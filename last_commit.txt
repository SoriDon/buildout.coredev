Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-10-02T17:35:59+02:00
Author: Manuel Reinhardt (reinhardt) <reinhardt@syslab.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/62d3debcfa17d24e913681b89227370ee1bd7a95

Removed getObjSize.py. #1801

Files changed:
M CHANGES.rst
M Products/CMFPlone/tests/test_utils.py
D Products/CMFPlone/skins/plone_scripts/getObjSize.py
D Products/CMFPlone/tests/testGetObjectSize.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex b0194199e..faa8dd685 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -19,7 +19,8 @@ Breaking changes:\n \n New features:\n \n-- Factored out human_readable_size method for replacing getObjSize.py. #1801\n+- Factored out human_readable_size method for replacing getObjSize.py;\n+  removed getObjSize.py. #1801\n   [reinhardt]\n \n - Update TinyMCE to 4.7.13\ndiff --git a/Products/CMFPlone/skins/plone_scripts/getObjSize.py b/Products/CMFPlone/skins/plone_scripts/getObjSize.py\ndeleted file mode 100644\nindex 7504970f0..000000000\n--- a/Products/CMFPlone/skins/plone_scripts/getObjSize.py\n+++ /dev/null\n@@ -1,52 +0,0 @@\n-## Script (Python) "getObjSize"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=obj=None, size=None\n-##title=\n-\n-from Products.CMFPlone.utils import base_hasattr\n-\n-if obj is None:\n-    obj = context\n-\n-const = {\'KB\': 1024,\n-         \'MB\': 1024 * 1024,\n-         \'GB\': 1024 * 1024 * 1024}\n-order = (\'GB\', \'MB\', \'KB\')\n-smaller = order[-1]\n-\n-# allow arbitrary sizes to be passed through,\n-# if there is no size, but there is an object\n-# look up the object, this maintains backwards\n-# compatibility\n-if size is None and base_hasattr(obj, \'get_size\'):\n-    size = obj.get_size()\n-\n-# if the size is a float, then make it an int\n-# happens for large files\n-try:\n-    size = int(size)\n-except (ValueError, TypeError):\n-    pass\n-\n-if not size:\n-    return \'0 %s\' % smaller\n-\n-try:\n-    integer_types = (int, long)\n-except NameError:\n-    # Python 3\n-    integer_types = (int, )\n-\n-if isinstance(size, integer_types):\n-    if size < const[smaller]:\n-        return \'1 %s\' % smaller\n-    for c in order:\n-        if size / const[c] > 0:\n-            break\n-    return \'%.1f %s\' % (float(size / float(const[c])), c)\n-\n-return size\ndiff --git a/Products/CMFPlone/tests/testGetObjectSize.py b/Products/CMFPlone/tests/testGetObjectSize.py\ndeleted file mode 100644\nindex 579f08129..000000000\n--- a/Products/CMFPlone/tests/testGetObjectSize.py\n+++ /dev/null\n@@ -1,75 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from Products.CMFPlone.tests import PloneTestCase\n-from Products.CMFPlone.tests import dummy\n-\n-\n-class TestGetObjSize(PloneTestCase.PloneTestCase):\n-\n-    def testZeroInt(self):\n-        self.assertEqual(self.portal.getObjSize(None, 0), "0 KB")\n-\n-    def testBInt(self):\n-        self.assertEqual(self.portal.getObjSize(None, 234), "1 KB")\n-\n-    def testKBInt(self):\n-        self.assertEqual(self.portal.getObjSize(None, 5678), "5.5 KB")\n-\n-    def testMBInt(self):\n-        self.assertEqual(self.portal.getObjSize(None, 3307520), "3.2 MB")\n-\n-    def testGBInt(self):\n-        self.assertEqual(self.portal.getObjSize(None, 7564738298), "7.0 GB")\n-\n-    def testZeroFloat(self):\n-        self.assertEqual(self.portal.getObjSize(None, 0.0), "0 KB")\n-\n-    def testBFloat(self):\n-        self.assertEqual(self.portal.getObjSize(None, 234.5), "1 KB")\n-\n-    def testKBFloat(self):\n-        self.assertEqual(self.portal.getObjSize(None, 5678.5), "5.5 KB")\n-\n-    def testMBFloat(self):\n-        self.assertEqual(self.portal.getObjSize(None, 3307520.5), "3.2 MB")\n-\n-    def testGBFloat(self):\n-        self.assertEqual(self.portal.getObjSize(None, 7564738298.5), "7.0 GB")\n-\n-    def testNone(self):\n-        self.assertEqual(self.portal.getObjSize(None, None), "0 KB")\n-\n-    def testEmptyString(self):\n-        self.assertEqual(self.portal.getObjSize(None, \'\'), "0 KB")\n-\n-    def testNonIntString(self):\n-        self.assertEqual(self.portal.getObjSize(None, \'barney\'), \'barney\')\n-\n-\n-class TestGetObjSizedItem(PloneTestCase.PloneTestCase):\n-\n-    def afterSetUp(self):\n-        self.ob = dummy.SizedItem()\n-\n-    def testZero(self):\n-        self.ob.set_size(0)\n-        self.assertEqual(self.portal.getObjSize(self.ob), \'0 KB\')\n-\n-    def testBInt(self):\n-        self.ob.set_size(884)\n-        self.assertEqual(self.portal.getObjSize(self.ob), \'1 KB\')\n-\n-    def testKBInt(self):\n-        self.ob.set_size(1348)\n-        self.assertEqual(self.portal.getObjSize(self.ob), \'1.3 KB\')\n-\n-    def testMBInt(self):\n-        self.ob.set_size(1024 * 1024 + 1024 * 687)\n-        self.assertEqual(self.portal.getObjSize(self.ob), \'1.7 MB\')\n-\n-    def testGBInt(self):\n-        self.ob.set_size(1024 * 1024 * 1024 + 1024 * 1024 * 107)\n-        self.assertEqual(self.portal.getObjSize(self.ob), \'1.1 GB\')\n-\n-    def testGBFloat(self):\n-        self.ob.set_size(float(1024 * 1024 * 1024 + 1024 * 1024 * 107))\n-        self.assertEqual(self.portal.getObjSize(self.ob), \'1.1 GB\')\ndiff --git a/Products/CMFPlone/tests/test_utils.py b/Products/CMFPlone/tests/test_utils.py\nindex e258ab0c6..061081605 100644\n--- a/Products/CMFPlone/tests/test_utils.py\n+++ b/Products/CMFPlone/tests/test_utils.py\n@@ -147,7 +147,7 @@ def physicalPathFromURL(self, url):\n         ctx.vh_root = \'/approot/PloneSite/folder/SubSite\'\n         self.assertEqual(get_top_site_from_url(ctx, req).id, \'SubSite\')\n \n-    def test_human_readable_size(self):\n+    def test_human_readable_size_int(self):\n         from Products.CMFPlone.utils import human_readable_size\n \n         self.assertEqual(human_readable_size(0), \'0 KB\')\n@@ -165,6 +165,31 @@ def test_human_readable_size(self):\n         size *= 1024\n         self.assertEqual(human_readable_size(size), \'1536.0 GB\')\n \n+    def test_human_readable_size_float(self):\n+        from Products.CMFPlone.utils import human_readable_size\n+\n+        self.assertEqual(human_readable_size(0.), \'0 KB\')\n+        self.assertEqual(human_readable_size(1.), \'1 KB\')\n+        size = 1000.\n+        self.assertEqual(human_readable_size(size), \'1 KB\')\n+        size += 24.\n+        self.assertEqual(human_readable_size(size), \'1.0 KB\')\n+        size += 512.\n+        self.assertEqual(human_readable_size(size), \'1.5 KB\')\n+        size *= 1024.\n+        self.assertEqual(human_readable_size(size), \'1.5 MB\')\n+        size *= 1024.\n+        self.assertEqual(human_readable_size(size), \'1.5 GB\')\n+        size *= 1024.\n+        self.assertEqual(human_readable_size(size), \'1536.0 GB\')\n+\n+    def test_human_readable_size_special(self):\n+        from Products.CMFPlone.utils import human_readable_size\n+\n+        self.assertEqual(human_readable_size(None), \'0 KB\')\n+        self.assertEqual(human_readable_size(\'\'), \'0 KB\')\n+        self.assertEqual(human_readable_size(\'barney\'), \'barney\')\n+\n \n class LogoTests(PloneTestCase.PloneTestCase):\n \n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-10-04T11:08:32+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/4a51296e0e0deedbc453ee5dcdf935e0d11cb770

Merge branch 'master' into 1801-remove-getObjSize

Files changed:
M CHANGES.rst
M Products/CMFPlone/static/patterns/toolbar/src/toolbar.js
D Products/CMFPlone/skins/plone_scripts/setAuthCookie.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex faa8dd685..3611e5984 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,9 +14,13 @@ Breaking changes:\n   Third party code need either to depend on plone.app.controlpanel 4.0,\n   which is a backward compatibilit package only, or also update to not depend on it anymore.\n   [jensens]\n+\n - Removed getObjectsFromPathList.py skin script. #1801\n   [reinhardt]\n \n+- Removed setAuthCookie.py skin script. #1801\n+  [tlotze]\n+\n New features:\n \n - Factored out human_readable_size method for replacing getObjSize.py;\n@@ -46,6 +50,9 @@ New features:\n \n Bug fixes:\n \n+- Fix toolbar menu on mobile #2333.\n+  [tmassman]\n+\n - Removed the ``raiseUnauthorized`` skin script.\n   If you use this, please do permission checking in your own Python code instead (likely in a browser view).\n   Refs `issue 1801 <https://github.com/plone/Products.CMFPlone/issues/1801>`_.\n@@ -94,6 +101,7 @@ Bug fixes:\n - Remove ``plone-generate-gruntfile`` (it is all available through ``plone-compile-resources``).\n   [jensens]\n \n+\n New Features:\n \n - Update to latest mockup\ndiff --git a/Products/CMFPlone/skins/plone_scripts/setAuthCookie.py b/Products/CMFPlone/skins/plone_scripts/setAuthCookie.py\ndeleted file mode 100644\nindex 02a3a93af..000000000\n--- a/Products/CMFPlone/skins/plone_scripts/setAuthCookie.py\n+++ /dev/null\n@@ -1,24 +0,0 @@\n-## Script (Python) "setAuthCookie"\n-##title=Set Authentication Cookie\n-##parameters=resp, cookie_name, cookie_value\n-\n-try:\n-    length = context.portal_registry[\'plone.auth_cookie_length\']\n-except AttributeError:\n-    length = 0\n-\n-try:\n-    length = int(length)\n-except ValueError:\n-    length = 0\n-\n-cookie_path = \'/\'\n-if length:\n-    expires = (DateTime() + length).toZone(\'GMT\').rfc822()\n-    resp.setCookie(\n-        cookie_name,\n-        cookie_value,\n-        path=cookie_path,\n-        expires=expires)\n-else:\n-    resp.setCookie(cookie_name, cookie_value, path=cookie_path)\ndiff --git a/Products/CMFPlone/static/patterns/toolbar/src/toolbar.js b/Products/CMFPlone/static/patterns/toolbar/src/toolbar.js\nindex fb29ec552..f17049678 100644\n--- a/Products/CMFPlone/static/patterns/toolbar/src/toolbar.js\n+++ b/Products/CMFPlone/static/patterns/toolbar/src/toolbar.js\n@@ -32,11 +32,11 @@ define([\n       desktop_width: \'768px\'\n     },\n     pxToInt: function(px) {\n-      return parseInt(this.options.desktop_width.split(\'px\')[0], 10);\n+      return parseInt(px.split(\'px\')[0], 10);\n     },\n     setupMobile: function() {\n       var that = this;\n-      that.$container.css(\'right\', \'-\' + this.options.toolbar_width);\n+      that.$container.css(\'right\', \'-\' + that.options.toolbar_width);\n       // make sure we are in expanded mode\n       $(\'body\').addClass(that.options.classNames.leftExpanded);\n       $(\'body\').addClass(that.options.classNames.expanded);\n@@ -46,9 +46,9 @@ define([\n       $(\'body\').removeClass(that.options.classNames.topDefault);\n       $(\'body\').removeClass(that.options.classNames.default);\n       $(\'.\' + that.options.classNames.logo, that.$container).off(\'click\').on(\'click\', function() {\n-        var $el = $(this);\n+        var $el = $(that.$el);\n         if ($el.hasClass(\'open\')){\n-          that.$container.css(\'right\', \'-\' + this.options.toolbar_width);\n+          that.$container.css(\'right\', \'-\' + that.options.toolbar_width);\n           $(\'html\').css(\'margin-left\', \'0\');\n           $(\'html\').css(\'margin-right\', \'0\');\n           $el.removeClass(\'open\');\n@@ -56,8 +56,8 @@ define([\n         } else {\n           that.$container.css(\'right\', \'0\');\n           $el.addClass(\'open\');\n-          $(\'html\').css(\'margin-left\', \'-\' + this.options.toolbar_width);\n-          $( \'html\' ).css(\'margin-right\', this.options.toolbar_width);\n+          $(\'html\').css(\'margin-left\', \'-\' + that.options.toolbar_width);\n+          $( \'html\' ).css(\'margin-right\', that.options.toolbar_width);\n         }\n       });\n       // Remove desktop event binding\n@@ -69,14 +69,14 @@ define([\n         var $el = $(this).parent();\n         if ($el.hasClass(that.options.classNames.active)) {\n           that.$container.css(\'right\', \'0\');\n-          $(\'html\').css(\'margin-left\', \'-\' + this.options.toolbar_width);\n-          $(\'html\').css(\'margin-right\', this.options.toolbar_width);\n+          $(\'html\').css(\'margin-left\', \'-\' + that.options.toolbar_width);\n+          $(\'html\').css(\'margin-right\', that.options.toolbar_width);\n           $(\'nav li\', that.$container).removeClass(that.options.classNames.active);\n         } else {\n           $(\'nav li\', that.$container).removeClass(that.options.classNames.active);\n           $el.addClass(that.options.classNames.active);\n-          that.$container.css(\'right\', this.options.submenu_width);\n-          var margin = this.pxToInt(this.options.toolbar_width) + this.pxToInt(this.options.submenu_width);\n+          that.$container.css(\'right\', that.options.submenu_width);\n+          var margin = that.pxToInt(that.options.toolbar_width) + that.pxToInt(that.options.submenu_width);\n           $(\'html\').css(\'margin-left\', \'-\' + margin + \'px\' );\n           $(\'html\').css(\'margin-right\', + margin + \'px\');\n         }\n@@ -296,7 +296,7 @@ define([\n     },\n     hideElements: function() {\n       var that = this;\n-      if (this.state.left){\n+      if (that.state.left){\n         // only when on top\n         return;\n       }\n@@ -380,7 +380,7 @@ define([\n       }else {\n         that.setupMobile();\n       }\n-      this.$el.addClass(\'initialized\');\n+      that.$el.addClass(\'initialized\');\n \n       /* folder contents changes the context.\n          This is for usability so the menu changes along with\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-10-05T11:21:01+02:00
Author: Manuel Reinhardt (reinhardt) <reinhardt@syslab.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/103f9233b5e05e137da33e5a627f8523a601a382

Merge branch 'master' into 1801-remove-getObjSize

Files changed:
M CHANGES.rst
M Products/CMFPlone/profiles/default/rolemap.xml
M Products/CMFPlone/tests/testSiteAdminRole.py
D Products/CMFPlone/skins/plone_scripts/enableHTTPCompression.py
D Products/CMFPlone/skins/plone_scripts/redirectToReferrer.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 3611e5984..274c774d8 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -17,10 +17,19 @@ Breaking changes:\n \n - Removed getObjectsFromPathList.py skin script. #1801\n   [reinhardt]\n+  \n+- Removed redirectToReferrer.py skin script. #1801\n+  [tlotze]\n+\n+- Removed enableHTTPCompression.py skin script. #1801\n+  [tlotze]\n \n - Removed setAuthCookie.py skin script. #1801\n   [tlotze]\n \n+- Stop configuring \'View History\' permission which was removed from Zope.\n+  [davisagli]\n+\n New features:\n \n - Factored out human_readable_size method for replacing getObjSize.py;\ndiff --git a/Products/CMFPlone/profiles/default/rolemap.xml b/Products/CMFPlone/profiles/default/rolemap.xml\nindex 03b69f586..54dd70182 100644\n--- a/Products/CMFPlone/profiles/default/rolemap.xml\n+++ b/Products/CMFPlone/profiles/default/rolemap.xml\n@@ -132,9 +132,6 @@\n       <role name="Member"/>\n       <role name="Owner"/>\n     </permission>\n-    <permission name="View History" acquire="True">\n-      <role name="Site Administrator"/>\n-    </permission>\n     <permission name="View management screens"\n                 acquire="True">\n       <role name="Manager"/>\ndiff --git a/Products/CMFPlone/skins/plone_scripts/enableHTTPCompression.py b/Products/CMFPlone/skins/plone_scripts/enableHTTPCompression.py\ndeleted file mode 100644\nindex d53764e63..000000000\n--- a/Products/CMFPlone/skins/plone_scripts/enableHTTPCompression.py\n+++ /dev/null\n@@ -1,25 +0,0 @@\n-## Script (Python) "enableHTTPCompression"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=request=None, force=0, debug=0, enable=0\n-##title=Enable zlib based HTTP compression\n-\n-# force: force http compression even if the browser doesn\'t send an accept\n-# debug: return compression state (0: no, 1: yes, 2: force)\n-\n-if not enable:\n-    if debug:\n-        return \'<!-- compression status: disabled -->\'\n-    else:\n-        return\n-\n-if request is None:\n-    request = context.REQUEST\n-\n-result = request.RESPONSE.enableHTTPCompression(REQUEST=request, force=force)\n-\n-if debug:\n-    return \'<!-- compression status: %s -->\' % result\ndiff --git a/Products/CMFPlone/skins/plone_scripts/redirectToReferrer.py b/Products/CMFPlone/skins/plone_scripts/redirectToReferrer.py\ndeleted file mode 100644\nindex 9bd9b0916..000000000\n--- a/Products/CMFPlone/skins/plone_scripts/redirectToReferrer.py\n+++ /dev/null\n@@ -1,17 +0,0 @@\n-## Script (Python) "redirectToReferrer"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=message\n-##title=Redirect to Referrer with message\n-\n-request = context.REQUEST\n-referer = request.get(\'HTTP_REFERER\', \'\')\n-query_pos = referer.find(\'?\')\n-if query_pos != -1:\n-    target_url = referer[:referer.find(\'?\')]\n-else:\n-    target_url = referer\n-return request.RESPONSE.redirect(target_url)\ndiff --git a/Products/CMFPlone/tests/testSiteAdminRole.py b/Products/CMFPlone/tests/testSiteAdminRole.py\nindex b09e97958..218eafcdd 100644\n--- a/Products/CMFPlone/tests/testSiteAdminRole.py\n+++ b/Products/CMFPlone/tests/testSiteAdminRole.py\n@@ -196,7 +196,6 @@ def testExpectedPermissions(self):\n             \'Reply to item\':                                            0,\n             \'View\':                                                     1,\n             \'View Groups\':                                              1,\n-            \'View History\':                                             1,\n             \'View management screens\':                                  0,\n             \'WebDAV Lock items\':                                        1,\n             \'WebDAV Unlock items\':                                      1,\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-10-05T20:17:35+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/f0fe27cfb28337ccc1c8e6b6d21525150603faee

Merge branch 'master' into 1801-remove-getObjSize

Files changed:
M CHANGES.rst
M Products/CMFPlone/static/patterns/toolbar/src/css/toolbar.plone.less
D Products/CMFPlone/skins/plone_scripts/my_worklist.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 274c774d8..e6834ab0f 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -15,6 +15,9 @@ Breaking changes:\n   which is a backward compatibilit package only, or also update to not depend on it anymore.\n   [jensens]\n \n+- Removed my_worklist.py skin script. #1801\n+  [reinhardt]\n+  \n - Removed getObjectsFromPathList.py skin script. #1801\n   [reinhardt]\n   \n@@ -59,7 +62,10 @@ New features:\n \n Bug fixes:\n \n-- Fix toolbar menu on mobile #2333.\n+-- Fix wrong CSS property to allow correct word-break.\n+  [tmassman]\n+\n+ Fix toolbar menu on mobile #2333.\n   [tmassman]\n \n - Removed the ``raiseUnauthorized`` skin script.\ndiff --git a/Products/CMFPlone/skins/plone_scripts/my_worklist.py b/Products/CMFPlone/skins/plone_scripts/my_worklist.py\ndeleted file mode 100644\nindex 6d48de349..000000000\n--- a/Products/CMFPlone/skins/plone_scripts/my_worklist.py\n+++ /dev/null\n@@ -1,6 +0,0 @@\n-##parameters=\n-\n-if context.portal_membership.isAnonymousUser():\n-    return []\n-\n-return context.portal_workflow.getWorklistsResults()\ndiff --git a/Products/CMFPlone/static/patterns/toolbar/src/css/toolbar.plone.less b/Products/CMFPlone/static/patterns/toolbar/src/css/toolbar.plone.less\nindex 7975bc641..a938a4fe3 100644\n--- a/Products/CMFPlone/static/patterns/toolbar/src/css/toolbar.plone.less\n+++ b/Products/CMFPlone/static/patterns/toolbar/src/css/toolbar.plone.less\n@@ -12,9 +12,10 @@\n   left: 0;\n   width: @plone-left-toolbar;\n   height: 100%;\n-  hyphens: auto;\n   color: @plone-toolbar-text-color;\n   background: @plone-toolbar-bg;\n+  word-wrap: break-word;\n+  hyphens: auto;\n \n   a {\n     display: block;\n@@ -507,9 +508,8 @@\n \n   nav > ul a > span + span {\n     width: @plone-left-toolbar-expanded - 40px;\n+    max-width: @plone-left-toolbar-expanded - 40px;  // needed fixed size for word-wrap to work properly.\n     text-align: left;\n-    word-wrap: break-word;\n-    word-break: break-word;\n     background: none;\n   }\n \n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-10-05T20:26:47+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/d49c5f3a1b192bf2eb97290ffab2ec51e72f4517

Merge pull request #2553 from plone/1801-remove-getObjSize

Removed getObjSize.py

Files changed:
M CHANGES.rst
M Products/CMFPlone/tests/test_utils.py
D Products/CMFPlone/skins/plone_scripts/getObjSize.py
D Products/CMFPlone/tests/testGetObjectSize.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 9722d7e8e..e6834ab0f 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -35,7 +35,8 @@ Breaking changes:\n \n New features:\n \n-- Factored out human_readable_size method for replacing getObjSize.py. #1801\n+- Factored out human_readable_size method for replacing getObjSize.py;\n+  removed getObjSize.py. #1801\n   [reinhardt]\n \n - Update TinyMCE to 4.7.13\ndiff --git a/Products/CMFPlone/skins/plone_scripts/getObjSize.py b/Products/CMFPlone/skins/plone_scripts/getObjSize.py\ndeleted file mode 100644\nindex 7504970f0..000000000\n--- a/Products/CMFPlone/skins/plone_scripts/getObjSize.py\n+++ /dev/null\n@@ -1,52 +0,0 @@\n-## Script (Python) "getObjSize"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=obj=None, size=None\n-##title=\n-\n-from Products.CMFPlone.utils import base_hasattr\n-\n-if obj is None:\n-    obj = context\n-\n-const = {\'KB\': 1024,\n-         \'MB\': 1024 * 1024,\n-         \'GB\': 1024 * 1024 * 1024}\n-order = (\'GB\', \'MB\', \'KB\')\n-smaller = order[-1]\n-\n-# allow arbitrary sizes to be passed through,\n-# if there is no size, but there is an object\n-# look up the object, this maintains backwards\n-# compatibility\n-if size is None and base_hasattr(obj, \'get_size\'):\n-    size = obj.get_size()\n-\n-# if the size is a float, then make it an int\n-# happens for large files\n-try:\n-    size = int(size)\n-except (ValueError, TypeError):\n-    pass\n-\n-if not size:\n-    return \'0 %s\' % smaller\n-\n-try:\n-    integer_types = (int, long)\n-except NameError:\n-    # Python 3\n-    integer_types = (int, )\n-\n-if isinstance(size, integer_types):\n-    if size < const[smaller]:\n-        return \'1 %s\' % smaller\n-    for c in order:\n-        if size / const[c] > 0:\n-            break\n-    return \'%.1f %s\' % (float(size / float(const[c])), c)\n-\n-return size\ndiff --git a/Products/CMFPlone/tests/testGetObjectSize.py b/Products/CMFPlone/tests/testGetObjectSize.py\ndeleted file mode 100644\nindex 579f08129..000000000\n--- a/Products/CMFPlone/tests/testGetObjectSize.py\n+++ /dev/null\n@@ -1,75 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from Products.CMFPlone.tests import PloneTestCase\n-from Products.CMFPlone.tests import dummy\n-\n-\n-class TestGetObjSize(PloneTestCase.PloneTestCase):\n-\n-    def testZeroInt(self):\n-        self.assertEqual(self.portal.getObjSize(None, 0), "0 KB")\n-\n-    def testBInt(self):\n-        self.assertEqual(self.portal.getObjSize(None, 234), "1 KB")\n-\n-    def testKBInt(self):\n-        self.assertEqual(self.portal.getObjSize(None, 5678), "5.5 KB")\n-\n-    def testMBInt(self):\n-        self.assertEqual(self.portal.getObjSize(None, 3307520), "3.2 MB")\n-\n-    def testGBInt(self):\n-        self.assertEqual(self.portal.getObjSize(None, 7564738298), "7.0 GB")\n-\n-    def testZeroFloat(self):\n-        self.assertEqual(self.portal.getObjSize(None, 0.0), "0 KB")\n-\n-    def testBFloat(self):\n-        self.assertEqual(self.portal.getObjSize(None, 234.5), "1 KB")\n-\n-    def testKBFloat(self):\n-        self.assertEqual(self.portal.getObjSize(None, 5678.5), "5.5 KB")\n-\n-    def testMBFloat(self):\n-        self.assertEqual(self.portal.getObjSize(None, 3307520.5), "3.2 MB")\n-\n-    def testGBFloat(self):\n-        self.assertEqual(self.portal.getObjSize(None, 7564738298.5), "7.0 GB")\n-\n-    def testNone(self):\n-        self.assertEqual(self.portal.getObjSize(None, None), "0 KB")\n-\n-    def testEmptyString(self):\n-        self.assertEqual(self.portal.getObjSize(None, \'\'), "0 KB")\n-\n-    def testNonIntString(self):\n-        self.assertEqual(self.portal.getObjSize(None, \'barney\'), \'barney\')\n-\n-\n-class TestGetObjSizedItem(PloneTestCase.PloneTestCase):\n-\n-    def afterSetUp(self):\n-        self.ob = dummy.SizedItem()\n-\n-    def testZero(self):\n-        self.ob.set_size(0)\n-        self.assertEqual(self.portal.getObjSize(self.ob), \'0 KB\')\n-\n-    def testBInt(self):\n-        self.ob.set_size(884)\n-        self.assertEqual(self.portal.getObjSize(self.ob), \'1 KB\')\n-\n-    def testKBInt(self):\n-        self.ob.set_size(1348)\n-        self.assertEqual(self.portal.getObjSize(self.ob), \'1.3 KB\')\n-\n-    def testMBInt(self):\n-        self.ob.set_size(1024 * 1024 + 1024 * 687)\n-        self.assertEqual(self.portal.getObjSize(self.ob), \'1.7 MB\')\n-\n-    def testGBInt(self):\n-        self.ob.set_size(1024 * 1024 * 1024 + 1024 * 1024 * 107)\n-        self.assertEqual(self.portal.getObjSize(self.ob), \'1.1 GB\')\n-\n-    def testGBFloat(self):\n-        self.ob.set_size(float(1024 * 1024 * 1024 + 1024 * 1024 * 107))\n-        self.assertEqual(self.portal.getObjSize(self.ob), \'1.1 GB\')\ndiff --git a/Products/CMFPlone/tests/test_utils.py b/Products/CMFPlone/tests/test_utils.py\nindex e258ab0c6..061081605 100644\n--- a/Products/CMFPlone/tests/test_utils.py\n+++ b/Products/CMFPlone/tests/test_utils.py\n@@ -147,7 +147,7 @@ def physicalPathFromURL(self, url):\n         ctx.vh_root = \'/approot/PloneSite/folder/SubSite\'\n         self.assertEqual(get_top_site_from_url(ctx, req).id, \'SubSite\')\n \n-    def test_human_readable_size(self):\n+    def test_human_readable_size_int(self):\n         from Products.CMFPlone.utils import human_readable_size\n \n         self.assertEqual(human_readable_size(0), \'0 KB\')\n@@ -165,6 +165,31 @@ def test_human_readable_size(self):\n         size *= 1024\n         self.assertEqual(human_readable_size(size), \'1536.0 GB\')\n \n+    def test_human_readable_size_float(self):\n+        from Products.CMFPlone.utils import human_readable_size\n+\n+        self.assertEqual(human_readable_size(0.), \'0 KB\')\n+        self.assertEqual(human_readable_size(1.), \'1 KB\')\n+        size = 1000.\n+        self.assertEqual(human_readable_size(size), \'1 KB\')\n+        size += 24.\n+        self.assertEqual(human_readable_size(size), \'1.0 KB\')\n+        size += 512.\n+        self.assertEqual(human_readable_size(size), \'1.5 KB\')\n+        size *= 1024.\n+        self.assertEqual(human_readable_size(size), \'1.5 MB\')\n+        size *= 1024.\n+        self.assertEqual(human_readable_size(size), \'1.5 GB\')\n+        size *= 1024.\n+        self.assertEqual(human_readable_size(size), \'1536.0 GB\')\n+\n+    def test_human_readable_size_special(self):\n+        from Products.CMFPlone.utils import human_readable_size\n+\n+        self.assertEqual(human_readable_size(None), \'0 KB\')\n+        self.assertEqual(human_readable_size(\'\'), \'0 KB\')\n+        self.assertEqual(human_readable_size(\'barney\'), \'barney\')\n+\n \n class LogoTests(PloneTestCase.PloneTestCase):\n \n'

