Repository: plone.namedfile


Branch: refs/heads/master
Date: 2019-10-18T19:10:37+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/b2a76cdca75547dd846f7d03ddda897b20d61afe

more flexible/pluggable validation using adapters

Files changed:
A plone/namedfile/field.zcml
M plone/namedfile/configure.zcml
M plone/namedfile/field.py
M plone/namedfile/interfaces.py
M plone/namedfile/tests/test_image.py

b'diff --git a/plone/namedfile/configure.zcml b/plone/namedfile/configure.zcml\nindex f0f0e29..b4aeae2 100644\n--- a/plone/namedfile/configure.zcml\n+++ b/plone/namedfile/configure.zcml\n@@ -22,5 +22,6 @@\n   <include file="marshaler.zcml" />\n   <include file="scaling.zcml" />\n   <include file="editor.zcml" />\n+  <include file="field.zcml" />\n \n </configure>\ndiff --git a/plone/namedfile/field.py b/plone/namedfile/field.py\nindex 59c9330..bb8f51e 100644\n--- a/plone/namedfile/field.py\n+++ b/plone/namedfile/field.py\n@@ -11,9 +11,14 @@\n from plone.namedfile.interfaces import INamedFileField\n from plone.namedfile.interfaces import INamedImage\n from plone.namedfile.interfaces import INamedImageField\n+from plone.namedfile.interfaces import IPluggableFileFieldValidation\n+from plone.namedfile.interfaces import IPluggableImageFieldValidation\n from plone.namedfile.utils import get_contenttype\n+from zope.component import adapter\n+from zope.component import getAdapters\n from zope.i18nmessageid import MessageFactory\n from zope.interface import implementer\n+from zope.interface import Interface\n from zope.schema import Object\n from zope.schema import ValidationError\n \n@@ -21,16 +26,38 @@\n _ = MessageFactory(\'plone\')\n \n \n+@implementer(IPluggableImageFieldValidation)\n+@adapter(INamedImageField, Interface)\n+class ImageContenttypeValidator(object):\n+\n+    def __init__(self, field, value):\n+        self.field = field\n+        self.value = value\n+\n+    def __call__(self):\n+        if self.value is None:\n+            return\n+        mimetype = get_contenttype(self.value)\n+        if mimetype.split(\'/\')[0] != \'image\':\n+            raise InvalidImageFile(mimetype, self.field.__name__)\n+\n+\n class InvalidImageFile(ValidationError):\n     """Exception for invalid image file"""\n     __doc__ = _(u\'Invalid image file\')\n \n \n+def validate_binary_field(interface, field, value):\n+    for name, validator in getAdapters((field, value), interface):\n+        validator()\n+\n+\n def validate_image_field(field, value):\n-    if value is not None:\n-        mimetype = get_contenttype(value)\n-        if mimetype.split(\'/\')[0] != \'image\':\n-            raise InvalidImageFile(mimetype, field.__name__)\n+    validate_binary_field(IPluggableImageFieldValidation, field, value)\n+\n+\n+def validate_file_field(field, value):\n+    validate_binary_field(IPluggableFileFieldValidation, field, value)\n \n \n @implementer(INamedFileField)\n@@ -46,6 +73,10 @@ def __init__(self, **kw):\n             self.schema = kw.pop(\'schema\')\n         super(NamedFile, self).__init__(schema=self.schema, **kw)\n \n+    def _validate(self, value):\n+        super(NamedBlobImage, self)._validate(value)\n+        validate_file_field(self, value)\n+\n \n @implementer(INamedImageField)\n class NamedImage(Object):\n@@ -78,6 +109,10 @@ def __init__(self, **kw):\n             self.schema = kw.pop(\'schema\')\n         super(NamedBlobFile, self).__init__(schema=self.schema, **kw)\n \n+    def _validate(self, value):\n+        super(NamedBlobImage, self)._validate(value)\n+        validate_file_field(self, value)\n+\n \n @implementer(INamedBlobImageField)\n class NamedBlobImage(Object):\ndiff --git a/plone/namedfile/field.zcml b/plone/namedfile/field.zcml\nnew file mode 100644\nindex 0000000..6a20ba2\n--- /dev/null\n+++ b/plone/namedfile/field.zcml\n@@ -0,0 +1,11 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    xmlns:browser="http://namespaces.zope.org/browser">\n+\n+    <adapter\n+        factory=".field.ImageContenttypeValidator"\n+        name="image_contenttype"\n+    />\n+\n+</configure>\n\\ No newline at end of file\ndiff --git a/plone/namedfile/interfaces.py b/plone/namedfile/interfaces.py\nindex 455904e..ddaf83f 100644\n--- a/plone/namedfile/interfaces.py\n+++ b/plone/namedfile/interfaces.py\n@@ -59,6 +59,26 @@ class IStableImageScale(Interface):\n         """\n \n \n+class IPluggableBinaryFieldValidation(Interface):\n+\n+    def validate(field, value):\n+        """validates field and value.\n+\n+        raises zope.schema.ValidationError\n+        returns None\n+        """\n+\n+\n+class IPluggableFileFieldValidation(IPluggableBinaryFieldValidation):\n+    """pluggable validation for binary File fields\n+    """\n+\n+\n+class IPluggableImageFieldValidation(IPluggableBinaryFieldValidation):\n+    """pluggable validation for binary Image fields\n+    """\n+\n+\n # Values\n \n class INamed(Interface):\ndiff --git a/plone/namedfile/tests/test_image.py b/plone/namedfile/tests/test_image.py\nindex 11598ee..c4420fc 100644\n--- a/plone/namedfile/tests/test_image.py\n+++ b/plone/namedfile/tests/test_image.py\n@@ -5,6 +5,7 @@\n from plone.namedfile.interfaces import INamedImage\n from plone.namedfile.tests import getFile\n from plone.namedfile.utils import get_contenttype\n+from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n from zope.interface.verify import verifyClass\n \n import unittest\n@@ -79,10 +80,21 @@ def test_get_contenttype(self):\n                        filename=u\'notimage.doc\')),\n             \'application/msword\')\n \n+\n+class TestValidation(unittest.TestCase):\n+\n+    layer = PLONE_NAMEDFILE_INTEGRATION_TESTING\n+\n+    def _makeImage(self, *args, **kw):\n+        return NamedImage(*args, **kw)\n+\n     def testImageValidation(self):\n-        from plone.namedfile.field import InvalidImageFile,\\\n-            validate_image_field\n+        from plone.namedfile.field import InvalidImageFile\n+        from plone.namedfile.field import validate_image_field\n+        from plone.namedfile.interfaces import INamedImageField\n+        from zope.interface import implementer\n \n+        @implementer(INamedImageField)\n         class FakeField(object):\n             __name__ = \'logo\'\n \n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2019-10-18T19:23:07+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/dc197f759d19b551fc6e87bd4206f8c4435e1a1d

document and bump minor version

Files changed:
A news/81.feature
M setup.py

b"diff --git a/news/81.feature b/news/81.feature\nnew file mode 100644\nindex 0000000..608efbe\n--- /dev/null\n+++ b/news/81.feature\n@@ -0,0 +1,6 @@\n+Add new interface ``plone.namedfile.interfaces.IPluggableFileFieldValidation`` and ``plone.namedfile.interfaces.IPluggableImageFieldValidation``.\n+Refactored: the fields validation now looks for adapters with this interfaces adapting field and value.\n+All found adapters are called.\n+The image content type checker (existed before) is by now the only adapter implemented and registered so far.\n+Other adapters can be registered in related or custom code.\n+[jensens]\ndiff --git a/setup.py b/setup.py\nindex a13db6b..52208e3 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -5,7 +5,7 @@\n import os\n \n \n-version = '5.0.5.dev0'\n+version = '5.1.0.dev0'\n description = 'File types and fields for images, files and blob files with ' \\\n               'filenames'\n long_description = ('\\n\\n'.join([\n"

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2019-10-19T15:50:05+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/9dcf599ac16de87b6fef179afaca150a59284b81

correct copy paste mistakes

Files changed:
M plone/namedfile/field.py

b'diff --git a/plone/namedfile/field.py b/plone/namedfile/field.py\nindex bb8f51e..37bcc13 100644\n--- a/plone/namedfile/field.py\n+++ b/plone/namedfile/field.py\n@@ -74,7 +74,7 @@ def __init__(self, **kw):\n         super(NamedFile, self).__init__(schema=self.schema, **kw)\n \n     def _validate(self, value):\n-        super(NamedBlobImage, self)._validate(value)\n+        super(NamedFile, self)._validate(value)\n         validate_file_field(self, value)\n \n \n@@ -110,7 +110,7 @@ def __init__(self, **kw):\n         super(NamedBlobFile, self).__init__(schema=self.schema, **kw)\n \n     def _validate(self, value):\n-        super(NamedBlobImage, self)._validate(value)\n+        super(NamedBlobFile, self)._validate(value)\n         validate_file_field(self, value)\n \n \n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2019-10-21T09:14:51+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/10cd53a0ceafabe61af81594f1114a3c269156c0

Merge branch 'master' into flexible-validation

Files changed:
M CHANGES.rst
M setup.py
D news/80.bugfix

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 716e113..18deddf 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,16 @@ Changelog\n \n .. towncrier release notes start\n \n+5.0.5 (2019-10-12)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- fix ResourceWarnings for unclosed files\n+  [mamico] (#80)\n+\n+\n 5.0.4 (2019-06-27)\n ------------------\n \ndiff --git a/news/80.bugfix b/news/80.bugfix\ndeleted file mode 100644\nindex 239a081..0000000\n--- a/news/80.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-fix ResourceWarnings for unclosed files\n-[mamico]\ndiff --git a/setup.py b/setup.py\nindex 52208e3..4253838 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -6,6 +6,7 @@\n \n \n version = \'5.1.0.dev0\'\n+\n description = \'File types and fields for images, files and blob files with \' \\\n               \'filenames\'\n long_description = (\'\\n\\n\'.join([\n@@ -21,6 +22,7 @@\n     description=description,\n     long_description=long_description,\n     classifiers=[\n+        "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.2",\n         "Programming Language :: Python",\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2019-10-21T09:25:37+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/b4953731412ed9a3e3f5b6f01f68dcec4fee7682

fix interface signature

Files changed:
M plone/namedfile/interfaces.py

b'diff --git a/plone/namedfile/interfaces.py b/plone/namedfile/interfaces.py\nindex ddaf83f..2266ccf 100644\n--- a/plone/namedfile/interfaces.py\n+++ b/plone/namedfile/interfaces.py\n@@ -61,7 +61,7 @@ class IStableImageScale(Interface):\n \n class IPluggableBinaryFieldValidation(Interface):\n \n-    def validate(field, value):\n+    def __call__(field, value):\n         """validates field and value.\n \n         raises zope.schema.ValidationError\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2019-10-21T16:24:12+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/80be057a9f64deec157a12a34cf0a5091b3daaba

Merge pull request #81 from plone/flexible-validation

Pluggable validation using adapters

Files changed:
A news/81.feature
A plone/namedfile/field.zcml
M plone/namedfile/configure.zcml
M plone/namedfile/field.py
M plone/namedfile/interfaces.py
M plone/namedfile/tests/test_image.py
M setup.py

b'diff --git a/news/81.feature b/news/81.feature\nnew file mode 100644\nindex 0000000..608efbe\n--- /dev/null\n+++ b/news/81.feature\n@@ -0,0 +1,6 @@\n+Add new interface ``plone.namedfile.interfaces.IPluggableFileFieldValidation`` and ``plone.namedfile.interfaces.IPluggableImageFieldValidation``.\n+Refactored: the fields validation now looks for adapters with this interfaces adapting field and value.\n+All found adapters are called.\n+The image content type checker (existed before) is by now the only adapter implemented and registered so far.\n+Other adapters can be registered in related or custom code.\n+[jensens]\ndiff --git a/plone/namedfile/configure.zcml b/plone/namedfile/configure.zcml\nindex f0f0e29..b4aeae2 100644\n--- a/plone/namedfile/configure.zcml\n+++ b/plone/namedfile/configure.zcml\n@@ -22,5 +22,6 @@\n   <include file="marshaler.zcml" />\n   <include file="scaling.zcml" />\n   <include file="editor.zcml" />\n+  <include file="field.zcml" />\n \n </configure>\ndiff --git a/plone/namedfile/field.py b/plone/namedfile/field.py\nindex 59c9330..37bcc13 100644\n--- a/plone/namedfile/field.py\n+++ b/plone/namedfile/field.py\n@@ -11,9 +11,14 @@\n from plone.namedfile.interfaces import INamedFileField\n from plone.namedfile.interfaces import INamedImage\n from plone.namedfile.interfaces import INamedImageField\n+from plone.namedfile.interfaces import IPluggableFileFieldValidation\n+from plone.namedfile.interfaces import IPluggableImageFieldValidation\n from plone.namedfile.utils import get_contenttype\n+from zope.component import adapter\n+from zope.component import getAdapters\n from zope.i18nmessageid import MessageFactory\n from zope.interface import implementer\n+from zope.interface import Interface\n from zope.schema import Object\n from zope.schema import ValidationError\n \n@@ -21,16 +26,38 @@\n _ = MessageFactory(\'plone\')\n \n \n+@implementer(IPluggableImageFieldValidation)\n+@adapter(INamedImageField, Interface)\n+class ImageContenttypeValidator(object):\n+\n+    def __init__(self, field, value):\n+        self.field = field\n+        self.value = value\n+\n+    def __call__(self):\n+        if self.value is None:\n+            return\n+        mimetype = get_contenttype(self.value)\n+        if mimetype.split(\'/\')[0] != \'image\':\n+            raise InvalidImageFile(mimetype, self.field.__name__)\n+\n+\n class InvalidImageFile(ValidationError):\n     """Exception for invalid image file"""\n     __doc__ = _(u\'Invalid image file\')\n \n \n+def validate_binary_field(interface, field, value):\n+    for name, validator in getAdapters((field, value), interface):\n+        validator()\n+\n+\n def validate_image_field(field, value):\n-    if value is not None:\n-        mimetype = get_contenttype(value)\n-        if mimetype.split(\'/\')[0] != \'image\':\n-            raise InvalidImageFile(mimetype, field.__name__)\n+    validate_binary_field(IPluggableImageFieldValidation, field, value)\n+\n+\n+def validate_file_field(field, value):\n+    validate_binary_field(IPluggableFileFieldValidation, field, value)\n \n \n @implementer(INamedFileField)\n@@ -46,6 +73,10 @@ def __init__(self, **kw):\n             self.schema = kw.pop(\'schema\')\n         super(NamedFile, self).__init__(schema=self.schema, **kw)\n \n+    def _validate(self, value):\n+        super(NamedFile, self)._validate(value)\n+        validate_file_field(self, value)\n+\n \n @implementer(INamedImageField)\n class NamedImage(Object):\n@@ -78,6 +109,10 @@ def __init__(self, **kw):\n             self.schema = kw.pop(\'schema\')\n         super(NamedBlobFile, self).__init__(schema=self.schema, **kw)\n \n+    def _validate(self, value):\n+        super(NamedBlobFile, self)._validate(value)\n+        validate_file_field(self, value)\n+\n \n @implementer(INamedBlobImageField)\n class NamedBlobImage(Object):\ndiff --git a/plone/namedfile/field.zcml b/plone/namedfile/field.zcml\nnew file mode 100644\nindex 0000000..6a20ba2\n--- /dev/null\n+++ b/plone/namedfile/field.zcml\n@@ -0,0 +1,11 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    xmlns:browser="http://namespaces.zope.org/browser">\n+\n+    <adapter\n+        factory=".field.ImageContenttypeValidator"\n+        name="image_contenttype"\n+    />\n+\n+</configure>\n\\ No newline at end of file\ndiff --git a/plone/namedfile/interfaces.py b/plone/namedfile/interfaces.py\nindex 455904e..2266ccf 100644\n--- a/plone/namedfile/interfaces.py\n+++ b/plone/namedfile/interfaces.py\n@@ -59,6 +59,26 @@ class IStableImageScale(Interface):\n         """\n \n \n+class IPluggableBinaryFieldValidation(Interface):\n+\n+    def __call__(field, value):\n+        """validates field and value.\n+\n+        raises zope.schema.ValidationError\n+        returns None\n+        """\n+\n+\n+class IPluggableFileFieldValidation(IPluggableBinaryFieldValidation):\n+    """pluggable validation for binary File fields\n+    """\n+\n+\n+class IPluggableImageFieldValidation(IPluggableBinaryFieldValidation):\n+    """pluggable validation for binary Image fields\n+    """\n+\n+\n # Values\n \n class INamed(Interface):\ndiff --git a/plone/namedfile/tests/test_image.py b/plone/namedfile/tests/test_image.py\nindex 11598ee..c4420fc 100644\n--- a/plone/namedfile/tests/test_image.py\n+++ b/plone/namedfile/tests/test_image.py\n@@ -5,6 +5,7 @@\n from plone.namedfile.interfaces import INamedImage\n from plone.namedfile.tests import getFile\n from plone.namedfile.utils import get_contenttype\n+from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n from zope.interface.verify import verifyClass\n \n import unittest\n@@ -79,10 +80,21 @@ def test_get_contenttype(self):\n                        filename=u\'notimage.doc\')),\n             \'application/msword\')\n \n+\n+class TestValidation(unittest.TestCase):\n+\n+    layer = PLONE_NAMEDFILE_INTEGRATION_TESTING\n+\n+    def _makeImage(self, *args, **kw):\n+        return NamedImage(*args, **kw)\n+\n     def testImageValidation(self):\n-        from plone.namedfile.field import InvalidImageFile,\\\n-            validate_image_field\n+        from plone.namedfile.field import InvalidImageFile\n+        from plone.namedfile.field import validate_image_field\n+        from plone.namedfile.interfaces import INamedImageField\n+        from zope.interface import implementer\n \n+        @implementer(INamedImageField)\n         class FakeField(object):\n             __name__ = \'logo\'\n \ndiff --git a/setup.py b/setup.py\nindex e0f7b9c..4253838 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -5,7 +5,8 @@\n import os\n \n \n-version = \'5.0.6.dev0\'\n+version = \'5.1.0.dev0\'\n+\n description = \'File types and fields for images, files and blob files with \' \\\n               \'filenames\'\n long_description = (\'\\n\\n\'.join([\n'

