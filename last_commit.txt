Repository: plone.restapi


Branch: refs/heads/master
Date: 2023-01-26T08:05:50-08:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/44b7885a881aaac022933cf9fedcb60e9029facd

Fix auth cookie for Zope users in login endpoint (#1573)

* Fix auth cookie for Zope users in login endpoint

* lint

Files changed:
A news/1572.bugfix
M src/plone/restapi/services/auth/login.py
M src/plone/restapi/tests/test_functional_auth.py

b'diff --git a/news/1572.bugfix b/news/1572.bugfix\nnew file mode 100644\nindex 000000000..316c6b1a6\n--- /dev/null\n+++ b/news/1572.bugfix\n@@ -0,0 +1 @@\n+Fix bug where the `@login` endpoint did not set the correct `__ac` cookie for Zope users. [davisagli]\ndiff --git a/src/plone/restapi/services/auth/login.py b/src/plone/restapi/services/auth/login.py\nindex 47813440d..4bc47df6e 100644\n--- a/src/plone/restapi/services/auth/login.py\n+++ b/src/plone/restapi/services/auth/login.py\n@@ -32,6 +32,11 @@ def reply(self):\n         password = data["password"]\n         uf = self._find_userfolder(userid)\n \n+        # Also put the password in __ac_password on the request.\n+        # The post-login code in PlonePAS expects to find it there\n+        # when it calls the PAS updateCredentials plugin.\n+        self.request.form["__ac_password"] = data["password"]\n+\n         if uf is not None:\n             plugins = uf._getOb("plugins")\n             authenticators = plugins.listPlugins(IAuthenticationPlugin)\ndiff --git a/src/plone/restapi/tests/test_functional_auth.py b/src/plone/restapi/tests/test_functional_auth.py\nindex e308c903f..ea2f5f470 100644\n--- a/src/plone/restapi/tests/test_functional_auth.py\n+++ b/src/plone/restapi/tests/test_functional_auth.py\n@@ -1,4 +1,3 @@\n-from plone.app.testing import login\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -21,7 +20,6 @@ def setUp(self):\n         self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n-        login(self.portal, SITE_OWNER_NAME)\n         self.private_document = self.portal[\n             self.portal.invokeFactory("Document", id="doc1", title="My Document")\n         ]\n@@ -68,12 +66,21 @@ def test_api_login_grants_zmi(self):\n         """\n         Logging in via the API also grants access to the Zope root ZMI.\n         """\n+        app = self.layer["app"]\n+        app.acl_users.plugins.users.addUser(\n+            "zopeuser",\n+            "zopeuser",\n+            TEST_USER_PASSWORD,\n+        )\n+        app.acl_users.plugins.roles.assignRoleToPrincipal("Manager", "zopeuser")\n+        transaction.commit()\n+\n         session = requests.Session()\n         self.addCleanup(session.close)\n         login_resp = session.post(\n             self.portal_url + "/@login",\n             headers={"Accept": "application/json"},\n-            json={"login": SITE_OWNER_NAME, "password": SITE_OWNER_PASSWORD},\n+            json={"login": "zopeuser", "password": TEST_USER_PASSWORD},\n         )\n         self.assertIn(\n             "__ac",\n@@ -94,11 +101,6 @@ def test_api_login_grants_zmi(self):\n         zmi_resp = session.get(\n             self.layer["app"].absolute_url() + "/manage_workspace",\n         )\n-        # Works in the browser when running `$ bin/instance fg` in a `plone.restapi`\n-        # checkout against `http://localhost:8080/manage_main` but doesn\'t work in the\n-        # browser against the test fixture at `http://localhost:55001/manage_main`.  My\n-        # guess is that there\'s some subtle difference in the PAS plugin configuration.\n-        self.skipTest("FIXME: Works in real instance but not test fixture")\n         self.assertEqual(\n             zmi_resp.status_code,\n             200,\n'

