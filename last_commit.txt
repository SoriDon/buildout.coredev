Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-08-29T10:13:17+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/91407dd58997460da1f249536c557439f3b3635a

Improve debugging

The debug messages issued when a non existent behavior is recorded in an FTI have been improved

Fixes #109

Files changed:
A news/109.bugfix
M plone/dexterity/schema.py
M plone/dexterity/tests/test_schema_cache.py

b'diff --git a/news/109.bugfix b/news/109.bugfix\nnew file mode 100644\nindex 0000000..ae935a2\n--- /dev/null\n+++ b/news/109.bugfix\n@@ -0,0 +1 @@\n+The debug messages issued when a non existent behavior is recorded in an FTI have been improved [ale-rt]\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 93565ea..9d0afa8 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -136,10 +136,11 @@ def behavior_registrations(self, fti):\n             if registration is None:\n                 # BBB - this case should be deprecated in v 3.0\n                 warnings.warn(\n-                    \'No behavior registration found for behavior named: "{0}"\'\n+                    \'No behavior registration found for behavior named "{0}"\'\n+                    \' for factory "{1}"\'\n                     \' - trying deprecated fallback lookup (will be removed \'\n                     \'in 3.0)..."\'.format(\n-                        behavior_name\n+                        behavior_name, fti.getId()\n                     ),\n                     DeprecationWarning,\n                 )\n@@ -147,8 +148,8 @@ def behavior_registrations(self, fti):\n                     schema_interface = resolve(behavior_name)\n                 except (ValueError, ImportError):\n                     log.error(\n-                        "Error resolving behavior {0}".format(\n-                            behavior_name\n+                        "Error resolving behavior {0} for factory {1}".format(\n+                            behavior_name, fti.getId()\n                         )\n                     )\n                     continue\ndiff --git a/plone/dexterity/tests/test_schema_cache.py b/plone/dexterity/tests/test_schema_cache.py\nindex 5429b31..9d901e3 100644\n--- a/plone/dexterity/tests/test_schema_cache.py\n+++ b/plone/dexterity/tests/test_schema_cache.py\n@@ -1,12 +1,14 @@\n # -*- coding: utf-8 -*-\n from .case import MockTestCase\n from mock import Mock\n+from mock import patch\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import SCHEMA_CACHE\n from zope.interface import Interface\n \n import unittest\n+import warnings\n \n \n class TestSchemaCache(MockTestCase):\n@@ -57,6 +59,25 @@ class ITestBehavior(Interface):\n \n         self.assertTrue(r1[0] is r2[0] is registration)\n \n+    def test_unexistent_behaviors_lookup(self):\n+        fti = DexterityFTI(u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        # Set an unregistered behavior\n+        fti.behaviors = ["foo.bar"]\n+\n+        with patch("warnings.warn") as mock_warnings:\n+            warning_list = [call[1][0] for call in mock_warnings.mock_calls]\n+            SCHEMA_CACHE.behavior_registrations(u\'testtype\')\n+            # Verify the warning has been issued\n+            self.assertEqual(\n+                mock_warnings.mock_calls[-1].args[0],\n+                (\n+                    \'No behavior registration found for behavior named \'\n+                    \'"foo.bar" for factory "testtype" - trying deprecated \'\n+                    \'fallback lookup (will be removed in 3.0)..."\'\n+                )\n+            )\n+\n     def test_repeated_subtypes_lookup(self):\n \n         fti = DexterityFTI(u"testtype")\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-09-03T13:19:35+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.dexterity/commit/04f9f7046455ab004f8f40d45e56c939e0f9511c

Merge pull request #110 from plone/109-improved-warnings

Improve debugging

Files changed:
A news/109.bugfix
M plone/dexterity/schema.py
M plone/dexterity/tests/test_schema_cache.py

b'diff --git a/news/109.bugfix b/news/109.bugfix\nnew file mode 100644\nindex 0000000..ae935a2\n--- /dev/null\n+++ b/news/109.bugfix\n@@ -0,0 +1 @@\n+The debug messages issued when a non existent behavior is recorded in an FTI have been improved [ale-rt]\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 93565ea..9d0afa8 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -136,10 +136,11 @@ def behavior_registrations(self, fti):\n             if registration is None:\n                 # BBB - this case should be deprecated in v 3.0\n                 warnings.warn(\n-                    \'No behavior registration found for behavior named: "{0}"\'\n+                    \'No behavior registration found for behavior named "{0}"\'\n+                    \' for factory "{1}"\'\n                     \' - trying deprecated fallback lookup (will be removed \'\n                     \'in 3.0)..."\'.format(\n-                        behavior_name\n+                        behavior_name, fti.getId()\n                     ),\n                     DeprecationWarning,\n                 )\n@@ -147,8 +148,8 @@ def behavior_registrations(self, fti):\n                     schema_interface = resolve(behavior_name)\n                 except (ValueError, ImportError):\n                     log.error(\n-                        "Error resolving behavior {0}".format(\n-                            behavior_name\n+                        "Error resolving behavior {0} for factory {1}".format(\n+                            behavior_name, fti.getId()\n                         )\n                     )\n                     continue\ndiff --git a/plone/dexterity/tests/test_schema_cache.py b/plone/dexterity/tests/test_schema_cache.py\nindex 5429b31..9d901e3 100644\n--- a/plone/dexterity/tests/test_schema_cache.py\n+++ b/plone/dexterity/tests/test_schema_cache.py\n@@ -1,12 +1,14 @@\n # -*- coding: utf-8 -*-\n from .case import MockTestCase\n from mock import Mock\n+from mock import patch\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import SCHEMA_CACHE\n from zope.interface import Interface\n \n import unittest\n+import warnings\n \n \n class TestSchemaCache(MockTestCase):\n@@ -57,6 +59,25 @@ class ITestBehavior(Interface):\n \n         self.assertTrue(r1[0] is r2[0] is registration)\n \n+    def test_unexistent_behaviors_lookup(self):\n+        fti = DexterityFTI(u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        # Set an unregistered behavior\n+        fti.behaviors = ["foo.bar"]\n+\n+        with patch("warnings.warn") as mock_warnings:\n+            warning_list = [call[1][0] for call in mock_warnings.mock_calls]\n+            SCHEMA_CACHE.behavior_registrations(u\'testtype\')\n+            # Verify the warning has been issued\n+            self.assertEqual(\n+                mock_warnings.mock_calls[-1].args[0],\n+                (\n+                    \'No behavior registration found for behavior named \'\n+                    \'"foo.bar" for factory "testtype" - trying deprecated \'\n+                    \'fallback lookup (will be removed in 3.0)..."\'\n+                )\n+            )\n+\n     def test_repeated_subtypes_lookup(self):\n \n         fti = DexterityFTI(u"testtype")\n'

