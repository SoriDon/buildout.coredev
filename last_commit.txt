Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-10-20T10:22:10+02:00
Author: Víctor Fernández de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/5b98aee1a64cc9c44be7b26fe7ecee1f57901c2c

Add link integrity support for slate blocks (#1523)

Files changed:
A news/1522.feature
M src/plone/restapi/blocks_linkintegrity.py
M src/plone/restapi/configure.zcml
M src/plone/restapi/tests/test_blocks_linkintegrity.py

b'diff --git a/news/1522.feature b/news/1522.feature\nnew file mode 100644\nindex 000000000..e488bcd86\n--- /dev/null\n+++ b/news/1522.feature\n@@ -0,0 +1,2 @@\n+- Add link integrity support for slate blocks\n+[sneridagh]\ndiff --git a/src/plone/restapi/blocks_linkintegrity.py b/src/plone/restapi/blocks_linkintegrity.py\nindex b64be9e55..ab62ad283 100644\n--- a/src/plone/restapi/blocks_linkintegrity.py\n+++ b/src/plone/restapi/blocks_linkintegrity.py\n@@ -2,6 +2,7 @@\n from plone.app.linkintegrity.interfaces import IRetriever\n from plone.app.linkintegrity.retriever import DXGeneral\n from plone.restapi.behaviors import IBlocks\n+from plone.restapi.deserializer.blocks import iterate_children\n from plone.restapi.interfaces import IBlockFieldLinkIntegrityRetriever\n from zope.component import adapter\n from zope.component import subscribers\n@@ -58,6 +59,44 @@ def __call__(self, block):\n         return links\n \n \n+@adapter(IBlocks, IBrowserRequest)\n+@implementer(IBlockFieldLinkIntegrityRetriever)\n+class SlateBlockLinksRetriever:\n+\n+    order = 100\n+    block_type = "slate"\n+    field = "value"\n+\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+        self.links = []\n+\n+    def __call__(self, block):\n+        value = (block or {}).get(self.field, [])\n+        children = iterate_children(value or [])\n+\n+        for child in children:\n+            node_type = child.get("type")\n+            if node_type:\n+                handler = getattr(self, f"handle_{node_type}", None)\n+                if handler:\n+                    self.links.append(handler(child))\n+\n+        return self.links\n+\n+    def handle_a(self, child):\n+        data = child.get("data", {})\n+        if data.get("link", {}).get("internal", {}).get("internal_link"):\n+            internal_link = data["link"]["internal"]["internal_link"]\n+            if len(internal_link) > 0:\n+                return internal_link[0]["@id"]\n+\n+    def handle_link(self, child):\n+        if child.get("data", {}).get("url"):\n+            return child["data"]["url"]\n+\n+\n @adapter(IBlocks, IBrowserRequest)\n @implementer(IBlockFieldLinkIntegrityRetriever)\n class GenericBlockLinksRetriever(object):\ndiff --git a/src/plone/restapi/configure.zcml b/src/plone/restapi/configure.zcml\nindex 005eea5bc..5b1c55725 100644\n--- a/src/plone/restapi/configure.zcml\n+++ b/src/plone/restapi/configure.zcml\n@@ -140,5 +140,9 @@\n       factory=".blocks_linkintegrity.GenericBlockLinksRetriever"\n       provides="plone.restapi.interfaces.IBlockFieldLinkIntegrityRetriever"\n       />\n+  <subscriber\n+      factory=".blocks_linkintegrity.SlateBlockLinksRetriever"\n+      provides="plone.restapi.interfaces.IBlockFieldLinkIntegrityRetriever"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/tests/test_blocks_linkintegrity.py b/src/plone/restapi/tests/test_blocks_linkintegrity.py\nindex 1c9217efd..8d7eae633 100644\n--- a/src/plone/restapi/tests/test_blocks_linkintegrity.py\n+++ b/src/plone/restapi/tests/test_blocks_linkintegrity.py\n@@ -68,6 +68,85 @@ def test_links_retriever_return_internal_links_in_text_block(self):\n         self.assertEqual(len(value), 1)\n         self.assertIn("../resolveuid/{}".format(uid), value)\n \n+    def test_links_retriever_return_internal_links_type_a_in_slate_block(self):\n+        uid = IUUID(self.doc2)\n+        resolve_uid_link = {\n+            "@id": f"../resolveuid/{uid}",\n+            "title": "Welcome to Plone",\n+        }\n+        blocks = {\n+            "2caef9e6-93ff-4edf-896f-8c16654a9923": {\n+                "@type": "slate",\n+                "plaintext": "this is a slate link inside some text",\n+                "value": [\n+                    {\n+                        "children": [\n+                            {"text": "this is a "},\n+                            {\n+                                "children": [\n+                                    {"text": ""},\n+                                    {\n+                                        "children": [{"text": "slate link"}],\n+                                        "data": {\n+                                            "link": {\n+                                                "internal": {\n+                                                    "internal_link": [resolve_uid_link]\n+                                                }\n+                                            }\n+                                        },\n+                                        "type": "a",\n+                                    },\n+                                    {"text": ""},\n+                                ],\n+                                "type": "strong",\n+                            },\n+                            {"text": " inside some text"},\n+                        ],\n+                        "type": "p",\n+                    }\n+                ],\n+            },\n+            "6b2be2e6-9857-4bcc-a21a-29c0449e1c68": {"@type": "title"},\n+        }\n+\n+        self.portal.doc1.blocks = blocks\n+        value = self.retrieve_links(blocks)\n+\n+        self.assertEqual(len(value), 1)\n+        self.assertIn("../resolveuid/{}".format(uid), value)\n+\n+    def test_links_retriever_return_internal_links_type_link_in_slate_block(self):\n+        uid = IUUID(self.doc2)\n+        resolve_uid_link = f"../resolveuid/{uid}"\n+        blocks = {\n+            "abc": {\n+                "@type": "slate",\n+                "plaintext": "Frontpage content here",\n+                "value": [\n+                    {\n+                        "children": [\n+                            {"text": "Frontpage "},\n+                            {\n+                                "children": [{"text": "content "}],\n+                                "data": {\n+                                    "url": resolve_uid_link,\n+                                },\n+                                "type": "link",\n+                            },\n+                            {"text": "here"},\n+                        ],\n+                        "type": "h2",\n+                    }\n+                ],\n+            }\n+        }\n+\n+        self.portal.doc1.blocks = blocks\n+        value = self.retrieve_links(blocks)\n+\n+        self.assertEqual(len(value), 1)\n+        self.assertIn("../resolveuid/{}".format(uid), value)\n+\n     def test_links_retriever_return_internal_links_in_generic_block(self):\n         uid = IUUID(self.doc2)\n         blocks = {"111": {"@type": "foo", "href": "../resolveuid/{}".format(uid)}}\n@@ -257,6 +336,137 @@ def test_reference_correctly_unset_for_text_blocks(self):\n         back_references = self.get_back_references(self.doc2)\n         self.assertEqual(len(back_references), 0)\n \n+    def test_reference_correctly_set_for_slate_blocks(self):\n+        self.assertEqual([], self.get_back_references(self.doc2))\n+\n+        uid = IUUID(self.doc2)\n+        resolve_uid_link = {\n+            "@id": f"../resolveuid/{uid}",\n+            "title": "Welcome to Plone",\n+        }\n+        blocks = {\n+            "2caef9e6-93ff-4edf-896f-8c16654a9923": {\n+                "@type": "slate",\n+                "plaintext": "this is a slate link inside some text",\n+                "value": [\n+                    {\n+                        "children": [\n+                            {"text": "this is a "},\n+                            {\n+                                "children": [\n+                                    {"text": ""},\n+                                    {\n+                                        "children": [{"text": "slate link"}],\n+                                        "data": {\n+                                            "link": {\n+                                                "internal": {\n+                                                    "internal_link": [resolve_uid_link]\n+                                                }\n+                                            }\n+                                        },\n+                                        "type": "a",\n+                                    },\n+                                    {"text": ""},\n+                                ],\n+                                "type": "strong",\n+                            },\n+                            {"text": " inside some text"},\n+                        ],\n+                        "type": "p",\n+                    }\n+                ],\n+            },\n+            "6b2be2e6-9857-4bcc-a21a-29c0449e1c68": {"@type": "title"},\n+        }\n+        response = self.api_session.patch(\n+            "/doc-1",\n+            json={"blocks": blocks},\n+        )\n+        transaction.commit()\n+        self.assertEqual(response.status_code, 204)\n+        back_references = self.get_back_references(self.doc2)\n+        self.assertEqual(len(back_references), 1)\n+        self.assertEqual(back_references[0], self.doc1)\n+\n+    def test_reference_correctly_unset_for_slate_blocks(self):\n+        uid = IUUID(self.doc2)\n+        resolve_uid_link = {\n+            "@id": f"../resolveuid/{uid}",\n+            "title": "Welcome to Plone",\n+        }\n+        blocks = {\n+            "2caef9e6-93ff-4edf-896f-8c16654a9923": {\n+                "@type": "slate",\n+                "plaintext": "this is a slate link inside some text",\n+                "value": [\n+                    {\n+                        "children": [\n+                            {"text": "this is a "},\n+                            {\n+                                "children": [\n+                                    {"text": ""},\n+                                    {\n+                                        "children": [{"text": "slate link"}],\n+                                        "data": {\n+                                            "link": {\n+                                                "internal": {\n+                                                    "internal_link": [resolve_uid_link]\n+                                                }\n+                                            }\n+                                        },\n+                                        "type": "a",\n+                                    },\n+                                    {"text": ""},\n+                                ],\n+                                "type": "strong",\n+                            },\n+                            {"text": " inside some text"},\n+                        ],\n+                        "type": "p",\n+                    }\n+                ],\n+            },\n+            "6b2be2e6-9857-4bcc-a21a-29c0449e1c68": {"@type": "title"},\n+        }\n+        self.api_session.patch(\n+            "/doc-1",\n+            json={"blocks": blocks},\n+        )\n+        transaction.commit()\n+        back_references = self.get_back_references(self.doc2)\n+        self.assertEqual(len(back_references), 1)\n+\n+        # now unset reference\n+        unset_blocks = {\n+            "2caef9e6-93ff-4edf-896f-8c16654a9923": {\n+                "@type": "slate",\n+                "plaintext": "this is a slate link inside some text",\n+                "value": [\n+                    {\n+                        "children": [\n+                            {"text": "this is a "},\n+                            {\n+                                "children": [\n+                                    {"text": ""},\n+                                ],\n+                                "type": "strong",\n+                            },\n+                            {"text": " inside some text"},\n+                        ],\n+                        "type": "p",\n+                    }\n+                ],\n+            },\n+            "6b2be2e6-9857-4bcc-a21a-29c0449e1c68": {"@type": "title"},\n+        }\n+        self.api_session.patch(\n+            "/doc-1",\n+            json={"blocks": unset_blocks},\n+        )\n+        transaction.commit()\n+        back_references = self.get_back_references(self.doc2)\n+        self.assertEqual(len(back_references), 0)\n+\n     def test_reference_correctly_set_for_generic_blocks_with_href(self):\n         self.assertEqual([], self.get_back_references(self.doc2))\n \n'

