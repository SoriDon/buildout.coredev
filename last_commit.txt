Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-03-01T00:17:39+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/f52b871195706c4d7c0448a344bd7d0700406cf7

Drop compatibility with Plone 5.2, Python 2, Archetypes.

Files changed:
A news/60.breaking
M setup.py

b'diff --git a/news/60.breaking b/news/60.breaking\nnew file mode 100644\nindex 0000000..b4b45a0\n--- /dev/null\n+++ b/news/60.breaking\n@@ -0,0 +1,2 @@\n+Drop compatibility with Plone 5.2, Python 2, Archetypes.\n+[maurits]\ndiff --git a/setup.py b/setup.py\nindex 5302cf6..a0d6104 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from setuptools import setup, find_packages\n \n-version = \'3.3.4.dev0\'\n+version = \'4.0.0.dev0\'\n \n setup(\n     name=\'Products.CMFDiffTool\',\n@@ -11,14 +11,11 @@\n                       open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n@@ -27,7 +24,7 @@\n     keywords=\'Diff Plone\',\n     author=\'Brent Hendricks\',\n     author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/Products.CMFDiffTool\',\n+    url=\'https://github.com/plone/Products.CMFDiffTool\',\n     license=\'GPL\',\n     packages=find_packages(),\n     namespace_packages=[\'Products\'],\n@@ -43,6 +40,7 @@\n             \'plone.app.robotframework\',  # Only because plone.app.event fails\n             ]\n     ),\n+    python_requires=\'>=3.8\',\n     install_requires=[\n         \'setuptools\',\n         \'six\',\n@@ -50,7 +48,7 @@\n         \'Products.CMFCore\',\n         \'Products.GenericSetup\',\n         \'Acquisition\',\n-        \'Zope2\',\n+        \'Zope\',\n     ],\n     entry_points="""\n     [z3c.autoinclude.plugin]\n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-03-01T00:24:50+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/7d73b713a3185ea14518f72c331acfa3d7754b71

Removed Archetypes references from code.

Files changed:
M Products/CMFDiffTool/BaseDiff.py
M Products/CMFDiffTool/__init__.py
M Products/CMFDiffTool/dexteritydiff.py
M Products/CMFDiffTool/testing.py
M Products/CMFDiffTool/tests/BaseTestCase.py
D Products/CMFDiffTool/ATCompoundDiff.py
D Products/CMFDiffTool/tests/testATCompoundDiff.py

b'diff --git a/Products/CMFDiffTool/ATCompoundDiff.py b/Products/CMFDiffTool/ATCompoundDiff.py\ndeleted file mode 100644\nindex bc9b9f7..0000000\n--- a/Products/CMFDiffTool/ATCompoundDiff.py\n+++ /dev/null\n@@ -1,130 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from AccessControl.class_init import InitializeClass\n-from Products.CMFDiffTool.BinaryDiff import BinaryDiff\n-from Products.CMFDiffTool.CMFDTHtmlDiff import CMFDTHtmlDiff\n-from Products.CMFDiffTool.FieldDiff import FieldDiff\n-from Products.CMFDiffTool.interfaces.portal_diff import IDifference\n-from Products.CMFDiffTool.ListDiff import ListDiff\n-from Products.CMFDiffTool.TextDiff import TextDiff\n-\n-\n-AT_FIELD_MAPPING = {\'text\': \'variable_text\',\n-                    \'string\': \'variable_text\',\n-                    \'datetime\': FieldDiff,\n-                    \'file\': \'variable_binary\',\n-                    \'blob\': \'variable_binary\',\n-                    \'image\': BinaryDiff,\n-                    \'lines\': ListDiff,\n-                    \'integer\': FieldDiff,\n-                    \'float\': FieldDiff,\n-                    \'fixedpoint\': FieldDiff,\n-                    \'boolean\': FieldDiff,\n-                    \'reference\': \'raw:ListDiff\'}\n-\n-AT_EXCLUDED_FIELDS = (\'modification_date\', )\n-\n-\n-class ATCompoundDiff:\n-    \'\'\'Text difference\'\'\'\n-\n-    meta_type = \'Compound Diff for AT types\'\n-\n-    def __init__(self, obj1, obj2, field, id1=None, id2=None):\n-        if not id1:\n-            id1 = obj1.getId()\n-        if not id2:\n-            id2 = obj2.getId()\n-        self.id1 = id1\n-        self.id2 = id2\n-\n-        fields = self.getFields(obj1, obj2)\n-        self._diffs = self.generateSubDiffs(fields, obj1, obj2)\n-\n-    def __getitem__(self, index):\n-        return self._diffs[index]\n-\n-    def __len__(self):\n-        return len(self._diffs)\n-\n-    def __iter__(self):\n-        return iter(self._diffs)\n-\n-    def generateSubDiffs(self, fields, obj1, obj2):\n-        diff_list = []\n-        for field in fields:\n-            klass = field[\'klass\']\n-            diff = klass(obj1, obj2, field[\'accessor\'], id1=self.id1,\n-                         id2=self.id2,\n-                         field_name=field[\'name\'],\n-                         field_label=field[\'label\'],\n-                         schemata=field[\'schemata\'])\n-            diff_list.append(diff)\n-        return diff_list\n-\n-    def getFields(self, obj1, obj2):\n-        fields = []\n-        # Make sure we get the fields ordered by schemata, as in the edit view\n-        schematas = obj1.Schemata()\n-        schemata_names = schematas.keys()\n-\n-        # Put default first and metadata last\n-        if \'default\' in schemata_names and schemata_names[0] != \'default\':\n-            schemata_names.remove(\'default\')\n-            schemata_names.insert(0, \'default\')\n-        if \'metadata\' in schemata_names and schemata_names[-1] != \'metadata\':\n-            schemata_names.remove(\'metadata\')\n-            schemata_names.insert(-1, \'metadata\')\n-\n-        for schemata_name in schemata_names:\n-            schema = schematas[schemata_name]\n-            for field in schema.viewableFields(obj1):\n-                if (field.type in AT_FIELD_MAPPING and\n-                        field.getName() not in AT_EXCLUDED_FIELDS):\n-                    is_primary = getattr(field, \'primary\', False)\n-                    label = field.widget.Label(obj1)\n-                    diff_type = AT_FIELD_MAPPING[field.type]\n-                    if IDifference.implementedBy(diff_type):\n-                        fields.append({\'name\': field.getName(),\n-                                       \'accessor\': field.accessor,\n-                                       \'klass\': diff_type,\n-                                       \'primary\': is_primary,\n-                                       \'label\': label,\n-                                       \'schemata\': schemata_name})\n-                    elif \'raw\' in diff_type:\n-                        #  Handle Fields which diff against the edit accessor\n-                        diff_name = diff_type.split(\':\')[1]\n-                        diff_type = globals()[diff_name]\n-                        fields.append({\'name\': field.getName(),\n-                                       \'accessor\': field.edit_accessor,\n-                                       \'klass\': diff_type,\n-                                       \'primary\': is_primary,\n-                                       \'label\': label,\n-                                       \'schemata\': schemata_name})\n-                    elif diff_type == \'variable_binary\':\n-                        diff_type = BinaryDiff\n-                        if (\'text/\' in field.getContentType(obj1) and\n-                                \'text/\' in (obj2.getField(field.getName())\n-                                            .getContentType(obj2))):\n-                            diff_type = TextDiff\n-                        fields.append({\'name\': field.getName(),\n-                                       \'accessor\': field.accessor,\n-                                       \'klass\': diff_type,\n-                                       \'primary\': is_primary,\n-                                       \'label\': label,\n-                                       \'schemata\': schemata_name})\n-                    elif diff_type == \'variable_text\':\n-                        diff_type = TextDiff\n-                        if (\'html\' in field.getContentType(obj1) and\n-                                \'html\' in (obj2.getField(field.getName())\n-                                           .getContentType(obj2))):\n-                            diff_type = CMFDTHtmlDiff\n-                        fields.append({\'name\': field.getName(),\n-                                       \'accessor\': field.accessor,\n-                                       \'klass\': diff_type,\n-                                       \'primary\': is_primary,\n-                                       \'label\': label,\n-                                       \'schemata\': schemata_name})\n-        return fields\n-\n-\n-InitializeClass(ATCompoundDiff)\ndiff --git a/Products/CMFDiffTool/BaseDiff.py b/Products/CMFDiffTool/BaseDiff.py\nindex 1ab004a..4214841 100644\n--- a/Products/CMFDiffTool/BaseDiff.py\n+++ b/Products/CMFDiffTool/BaseDiff.py\n@@ -83,12 +83,6 @@ def _getValue(ob, field, field_name, convert_to_str=True):\n             value = getattr(ob, field, None)\n     elif field and safe_hasattr(aq_base(ob), field):\n         value = getattr(ob, field)\n-    elif safe_hasattr(aq_base(ob), \'getField\'):\n-        # Archetypes with an adapter extended schema needs special handling\n-        field = ob.getField(field_name)\n-        if field is None:\n-            raise AttributeError(field)\n-        value = field.getAccessor(ob)\n     else:\n         raise AttributeError(field)\n \ndiff --git a/Products/CMFDiffTool/__init__.py b/Products/CMFDiffTool/__init__.py\nindex 13937d9..31d0ef1 100644\n--- a/Products/CMFDiffTool/__init__.py\n+++ b/Products/CMFDiffTool/__init__.py\n@@ -11,7 +11,6 @@\n from Products.CMFDiffTool import ListDiff  # NOQA\n from Products.CMFDiffTool import BinaryDiff  # NOQA\n from Products.CMFDiffTool import CMFDTHtmlDiff  # NOQA\n-from Products.CMFDiffTool import ATCompoundDiff  # NOQA\n \n \n CMFDiffTool.registerDiffType(BinaryDiff.BinaryDiff)\n@@ -20,7 +19,6 @@\n CMFDiffTool.registerDiffType(TextDiff.TextDiff)\n CMFDiffTool.registerDiffType(TextDiff.AsTextDiff)\n CMFDiffTool.registerDiffType(CMFDTHtmlDiff.CMFDTHtmlDiff)\n-CMFDiffTool.registerDiffType(ATCompoundDiff.ATCompoundDiff)\n \n # Soft plone.namedfile dependency\n try:\ndiff --git a/Products/CMFDiffTool/dexteritydiff.py b/Products/CMFDiffTool/dexteritydiff.py\nindex e24bce4..71f3b84 100644\n--- a/Products/CMFDiffTool/dexteritydiff.py\n+++ b/Products/CMFDiffTool/dexteritydiff.py\n@@ -69,9 +69,7 @@\n \n \n class DexterityCompoundDiff(object):\n-    """Same as `Products.CMFDiffTool.ATCompoundDiff.ATCompoundDiff` but for\n-    Dexterity.\n-    """\n+    """text difference for Dexterity"""\n \n     meta_type = \'Compound Diff for Dexterity types\'\n \ndiff --git a/Products/CMFDiffTool/testing.py b/Products/CMFDiffTool/testing.py\nindex 36cf2ab..50b2d58 100644\n--- a/Products/CMFDiffTool/testing.py\n+++ b/Products/CMFDiffTool/testing.py\n@@ -99,30 +99,5 @@ def setUpPloneSite(self, portal):\n \n PACKAGE_DX_FIXTURE = DXLayer()\n \n-if six.PY2:\n-    try:\n-        from plone.app.testing.bbb_at import PTC_FIXTURE\n-    except ImportError:\n-        # plone.app.testing 5 or earlier\n-        from plone.app.testing.bbb import PTC_FIXTURE\n-\n-    class ATLayer(PloneSandboxLayer):\n-\n-        defaultBases = (PTC_FIXTURE, )\n-\n-        def setUpZope(self, app, configurationContext):\n-            # setup schema extender if available\n-            try:\n-                from archetypes import schemaextender\n-                self.loadZCML(package=schemaextender)\n-            except ImportError:\n-                pass\n-\n-    PACKAGE_AT_FIXTURE = ATLayer()\n-    CMFDiffToolATLayer = FunctionalTesting(\n-        bases=(PACKAGE_AT_FIXTURE, ),\n-        name=\'Products.CMFDiffTool.AT:functional\')\n-\n-\n CMFDiffToolDXLayer = FunctionalTesting(\n     bases=(PACKAGE_DX_FIXTURE, ), name=\'Products.CMFDiffTool.DX:functional\')\ndiff --git a/Products/CMFDiffTool/tests/BaseTestCase.py b/Products/CMFDiffTool/tests/BaseTestCase.py\nindex cbc0a62..30106e0 100644\n--- a/Products/CMFDiffTool/tests/BaseTestCase.py\n+++ b/Products/CMFDiffTool/tests/BaseTestCase.py\n@@ -1,7 +1,6 @@\n # -*- coding: utf-8 -*-\n from Products.CMFDiffTool.testing import CMFDiffToolDXLayer\n \n-import six\n import unittest\n \n \n@@ -15,20 +14,3 @@ class BaseDXTestCase(unittest.TestCase):\n \n     def setUp(self):\n         self.portal = self.layer[\'portal\']\n-\n-\n-if six.PY2:\n-    try:\n-        from plone.app.testing.bbb_at import PloneTestCase\n-    except ImportError:\n-        # plone.app.testing 5 or earlier\n-        from plone.app.testing.bbb import PloneTestCase\n-    from Products.CMFDiffTool.testing import CMFDiffToolATLayer\n-\n-    class BaseATTestCase(PloneTestCase):\n-        """ A base testing class for CMFDiffTool\n-\n-            It includes a layer which installes the product\n-            and some testing dependencies in a Plone site.\n-        """\n-        layer = CMFDiffToolATLayer\ndiff --git a/Products/CMFDiffTool/tests/testATCompoundDiff.py b/Products/CMFDiffTool/tests/testATCompoundDiff.py\ndeleted file mode 100644\nindex 9dd8e28..0000000\n--- a/Products/CMFDiffTool/tests/testATCompoundDiff.py\n+++ /dev/null\n@@ -1,106 +0,0 @@\n-# -*- coding: utf-8 -*-\n-import six\n-\n-\n-if six.PY2:\n-    from .BaseTestCase import BaseATTestCase\n-    from Products.Archetypes import atapi\n-    from Products.ATContentTypes.content.document import ATDocument\n-    from Products.CMFDiffTool.ATCompoundDiff import ATCompoundDiff\n-    from zope.component import adapts\n-    from zope.component import provideAdapter\n-    from zope.interface import alsoProvides\n-    from zope.interface import noLongerProvides\n-\n-    class TestATCompoundDiff(BaseATTestCase):\n-        """Test the portal_diff tool"""\n-\n-        def testCompoundDiff(self):\n-            first = self.folder.invokeFactory(\'Document\', \'extended-document\')\n-            first = self.folder[first]\n-            second = self.folder.invokeFactory(\'Document\',\n-                                               \'extended-document2\')\n-            second = self.folder[second]\n-            # Change a value\n-            first.setText(\'<p>Body1</p>\', mimetype=\'text/html\')\n-            second.setText(\'<p>Body2</p>\', mimetype=\'text/html\')\n-            fd = ATCompoundDiff(first, second, None)\n-            # There should be some fields\n-            self.assertTrue(len(fd))\n-            for field in fd:\n-                # We\'ve changed the body\n-                if field.label == \'label_body_text\':\n-                    # We have the correct values\n-                    self.assertEqual(field.oldValue, \'<p>Body1</p>\')\n-                    self.assertEqual(field.newValue, \'<p>Body2</p>\')\n-                    # And the correctly assigned diff type\n-                    self.assertEqual(field.meta_type, \'HTML Diff\')\n-                # We\'ve also changed the id\n-                elif field.label == \'label_short_name\':\n-                    self.assertEqual(field.oldValue, \'extended-document\')\n-                    self.assertEqual(field.newValue, \'extended-document2\')\n-                    self.assertEqual(field.meta_type, \'Lines Diff\')\n-                # The dates will be different, but everything else should\n-                # be the same\n-                elif field.label not in (\'label_creation_date\',\n-                                         \'label_modification_date\'):\n-                    self.assertEqual(field.oldValue, field.newValue)\n-\n-        def testAdaptedObjects(self):\n-            # Add a schema extended field to an ATDocument and test that\n-            # the compound diff can read it\n-            from archetypes.schemaextender.field import ExtensionField\n-            from archetypes.schemaextender.tests.mocks import Extender\n-            from archetypes.schemaextender.tests.mocks import IHighlighted\n-\n-            # custom field class which does not set attributes directly on the\n-            # content\n-            class HighlightedField(ExtensionField, atapi.StringField):\n-                def get(self, instance, **kwargs):\n-                    return IHighlighted.providedBy(instance)\n-\n-                def getRaw(self, instance, **kwargs):\n-                    return self.get(instance, **kwargs)\n-\n-                def set(self, instance, value, **kwargs):\n-                    if value and not IHighlighted.providedBy(instance):\n-                        alsoProvides(instance, IHighlighted)\n-                    elif not value and IHighlighted.providedBy(instance):\n-                        noLongerProvides(instance, IHighlighted)\n-\n-            class TestSchemaExtender(Extender):\n-                adapts(ATDocument)  # noqa: D001\n-                fields = [\n-                    HighlightedField(\'schemaextender_test\',\n-                                     schemata=\'settings\',\n-                                     widget=atapi.BooleanWidget(\n-                                         label=\'Extended\',\n-                                         description=\'\'),\n-                                     ),\n-                ]\n-\n-            """ Ensure that tool instances implement the portal_diff\n-            interface """\n-            provideAdapter(TestSchemaExtender,\n-                           name=u\'archetypes.schemaextender.tests\')\n-\n-            first = self.folder.invokeFactory(\'Document\', \'extended-document\')\n-            first = self.folder[first]\n-            second = self.folder.invokeFactory(\'Document\',\n-                                               \'extended-document2\')\n-            second = self.folder[second]\n-            # Change the value\n-            alsoProvides(second, IHighlighted)\n-            fd = ATCompoundDiff(first, second, None)\n-            field = fd[-1]\n-            self.assertEqual(field.oldValue, False)\n-            self.assertEqual(field.newValue, True)\n-            self.assertEqual(field.label, \'Extended\')\n-\n-else:\n-    import unittest\n-\n-    class TestDummy(unittest.TestCase):\n-\n-        def test_dummy(self):\n-            return\n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-03-01T00:38:01+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/c10ab4136a189ef3ab380c2bc9d775a8ffa0905c

Get rid of six.

Files changed:
M Products/CMFDiffTool/ChangeSet.py
M Products/CMFDiffTool/FieldDiff.py
M Products/CMFDiffTool/ListDiff.py
M Products/CMFDiffTool/TextDiff.py
M Products/CMFDiffTool/libs/htmldiff.py
M Products/CMFDiffTool/testing.py
M Products/CMFDiffTool/utils.py
M Products/__init__.py
M setup.py

b'diff --git a/Products/CMFDiffTool/ChangeSet.py b/Products/CMFDiffTool/ChangeSet.py\nindex 0b8aed9..0bdf2cb 100644\n--- a/Products/CMFDiffTool/ChangeSet.py\n+++ b/Products/CMFDiffTool/ChangeSet.py\n@@ -12,9 +12,9 @@\n from Acquisition import aq_base\n from Acquisition import Implicit\n from ComputedAttribute import ComputedAttribute\n+from functools import reduce\n from Products.CMFCore.utils import getToolByName\n from Products.CMFDiffTool.interfaces import IChangeSet\n-from six.moves import reduce\n from zope.interface import implementer\n \n import logging\ndiff --git a/Products/CMFDiffTool/FieldDiff.py b/Products/CMFDiffTool/FieldDiff.py\nindex 0bc41e8..8d40183 100644\n--- a/Products/CMFDiffTool/FieldDiff.py\n+++ b/Products/CMFDiffTool/FieldDiff.py\n@@ -1,9 +1,7 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from Products.CMFDiffTool.BaseDiff import _getValue\n from Products.CMFDiffTool.BaseDiff import BaseDiff\n from Products.CMFDiffTool.utils import html_escape\n-from six.moves import range\n \n import difflib\n \ndiff --git a/Products/CMFDiffTool/ListDiff.py b/Products/CMFDiffTool/ListDiff.py\nindex a3c78de..420d2fa 100644\n--- a/Products/CMFDiffTool/ListDiff.py\n+++ b/Products/CMFDiffTool/ListDiff.py\n@@ -1,11 +1,9 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from plone.dexterity.interfaces import IDexterityContent\n from Products.CMFDiffTool.choicediff import get_field_object\n from Products.CMFDiffTool.choicediff import title_or_value\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n from Products.CMFDiffTool.utils import html_escape\n-from six.moves import range\n \n \n class ListDiff(FieldDiff):\ndiff --git a/Products/CMFDiffTool/TextDiff.py b/Products/CMFDiffTool/TextDiff.py\nindex 72a8d62..52d190d 100644\n--- a/Products/CMFDiffTool/TextDiff.py\n+++ b/Products/CMFDiffTool/TextDiff.py\n@@ -1,15 +1,12 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from os import linesep\n from Products.CMFDiffTool import CMFDiffToolMessageFactory as _\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n from Products.CMFDiffTool.utils import html_escape\n from Products.CMFDiffTool.utils import safe_unicode\n-from Products.CMFDiffTool.utils import safe_utf8\n from zope.component.hooks import getSite\n \n import difflib\n-import six\n \n \n class TextDiff(FieldDiff):\n@@ -37,9 +34,6 @@ def unified_diff(self):\n         """Return a unified diff"""\n         a = self._parseField(self.oldValue, filename=self.oldFilename)\n         b = self._parseField(self.newValue, filename=self.newFilename)\n-        if six.PY2:\n-            a = [safe_utf8(i) for i in a]\n-            b = [safe_utf8(i) for i in b]\n         # in py3 unified_diff does not accept None for ids (id1 and id2)\n         # But TextDiff() sets None as default. We overwrite this here so the\n         # default of unified_diff (\'\') can be used .\n@@ -62,8 +56,6 @@ def html_diff(self, context=True, wrapcolumn=40):\n             safe_unicode(self.id1),\n             safe_unicode(self.id2),\n             context=context)\n-        if six.PY2:\n-            diff = safe_utf8(diff)\n         return diff\n \n     def inline_diff(self):\ndiff --git a/Products/CMFDiffTool/libs/htmldiff.py b/Products/CMFDiffTool/libs/htmldiff.py\nindex 01efb56..32d36af 100644\n--- a/Products/CMFDiffTool/libs/htmldiff.py\n+++ b/Products/CMFDiffTool/libs/htmldiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n htmldiff.py\n (C) Ian Bicking <ianb@colorstudy.com>\n@@ -11,16 +10,12 @@\n \n Better results if you use mxTidy first.  The output is HTML.\n """\n-from __future__ import print_function\n from difflib import SequenceMatcher\n-from six import StringIO\n+from html import escape\n+from io import StringIO\n \n import re\n \n-try:\n-    from html import escape\n-except ImportError:\n-    from cgi import escape\n \n \n def htmlEncode(s, esc=escape):\ndiff --git a/Products/CMFDiffTool/testing.py b/Products/CMFDiffTool/testing.py\nindex 50b2d58..af61a16 100644\n--- a/Products/CMFDiffTool/testing.py\n+++ b/Products/CMFDiffTool/testing.py\n@@ -9,8 +9,6 @@\n from zope.schema.vocabulary import SimpleTerm\n from zope.schema.vocabulary import SimpleVocabulary\n \n-import six\n-\n \n TEST_CONTENT_TYPE_ID = \'TestContentType\'\n \ndiff --git a/Products/CMFDiffTool/utils.py b/Products/CMFDiffTool/utils.py\nindex 1f1cf05..3d83865 100644\n--- a/Products/CMFDiffTool/utils.py\n+++ b/Products/CMFDiffTool/utils.py\n@@ -1,21 +1,12 @@\n-# -*- coding: utf-8 -*-\n-from Products.PortalTransforms.data import datastream\n+from html import escape\n from Products.PortalTransforms.transforms.safe_html import SafeHTML\n \n-import six\n-\n-\n-try:\n-    from html import escape\n-except ImportError:\n-    from cgi import escape\n-\n \n def safe_unicode(value):\n-    if isinstance(value, six.text_type):\n+    if isinstance(value, str):\n         return value\n     try:\n-        value = six.text_type(value)\n+        value = str(value)\n     except UnicodeDecodeError:\n         value = value.decode(\'utf-8\', \'replace\')\n     return value\n@@ -28,38 +19,24 @@ def safe_utf8(value):\n def scrub_html(value):\n     # Strip illegal HTML tags from string text.\n     transform = SafeHTML()\n-    # Available in Plone 5.2:\n-    # return transform.scrub_html(value)\n-    data = datastream("text/x-html-safe")\n-    data = transform.convert(value, data)\n-    return data.getData()\n+    return transform.scrub_html(value)\n \n \n # We will have two functions:\n # - html_escape: escape html, for example turn \'<\' into \'&lt;\'\n # - html_safe: return html with dangerous tags removed, using safe html transform.\n #\n-# In both Python 2 and 3, the convert function that we use in safe_html\n+# The convert function that we use in safe_html\n # cannot handle a non string-like value, for example an integer.\n # Same is true for the escape function.\n # Seems good to always return a string-like value though.\n-# But should that be bytes or string or unicode?\n-if six.PY2:\n-    # We use this in places where the result gets inserted in a string/bytes,\n-    # so we should use a string (utf-8) here.\n-    def html_escape(value):\n-        value = safe_utf8(value)\n-        return escape(value, 1)\n+# This gets inserted in a string/text.\n+\n \n-    def html_safe(value):\n-        value = safe_utf8(value)\n-        return scrub_html(value)\n-else:\n-    # In Python 3 this gets inserted in a string/text.\n-    def html_escape(value):\n-        value = safe_unicode(value)\n-        return escape(value, 1)\n+def html_escape(value):\n+    value = safe_unicode(value)\n+    return escape(value, 1)\n \n-    def html_safe(value):\n-        value = safe_unicode(value)\n-        return scrub_html(value)\n+def html_safe(value):\n+    value = safe_unicode(value)\n+    return scrub_html(value)\ndiff --git a/Products/__init__.py b/Products/__init__.py\nindex 85880ef..de40ea7 100644\n--- a/Products/__init__.py\n+++ b/Products/__init__.py\n@@ -1,7 +1 @@\n-# -*- coding: utf-8 -*-\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+__import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/setup.py b/setup.py\nindex a0d6104..df0a4b8 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -43,7 +43,6 @@\n     python_requires=\'>=3.8\',\n     install_requires=[\n         \'setuptools\',\n-        \'six\',\n         \'zope.interface\',\n         \'Products.CMFCore\',\n         \'Products.GenericSetup\',\n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-03-01T00:39:45+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/8b22c4a87161f7ac9f34faa9c47246c87e34ca1b

Use plone.base.

Files changed:
M Products/CMFDiffTool/BaseDiff.py
M Products/CMFDiffTool/CMFDiffTool.py
M Products/CMFDiffTool/tests/testChangeSet.py
M setup.py

b"diff --git a/Products/CMFDiffTool/BaseDiff.py b/Products/CMFDiffTool/BaseDiff.py\nindex 4214841..39b9470 100644\n--- a/Products/CMFDiffTool/BaseDiff.py\n+++ b/Products/CMFDiffTool/BaseDiff.py\n@@ -9,7 +9,7 @@\n from plone.dexterity.interfaces import IDexterityContent\n from Products.CMFDiffTool import CMFDiffToolMessageFactory as _\n from Products.CMFDiffTool.interfaces import IDifference\n-from Products.CMFPlone.utils import safe_hasattr\n+from plone.base.utils import safe_hasattr\n from z3c.relationfield.relation import RelationValue\n from zope.i18n import translate\n from zope.interface import implementer\ndiff --git a/Products/CMFDiffTool/CMFDiffTool.py b/Products/CMFDiffTool/CMFDiffTool.py\nindex ef302f8..53e3961 100644\n--- a/Products/CMFDiffTool/CMFDiffTool.py\n+++ b/Products/CMFDiffTool/CMFDiffTool.py\n@@ -12,7 +12,7 @@\n from Products.CMFCore.utils import UniqueObject\n from Products.CMFDiffTool.ChangeSet import BaseChangeSet\n from Products.CMFDiffTool.interfaces import IDiffTool\n-from Products.CMFPlone.utils import safe_hasattr\n+from plone.base.utils import safe_hasattr\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n from zExceptions import BadRequest\n from zope.interface import implementer\ndiff --git a/Products/CMFDiffTool/tests/testChangeSet.py b/Products/CMFDiffTool/tests/testChangeSet.py\nindex 6b9206e..fc16a94 100644\n--- a/Products/CMFDiffTool/tests/testChangeSet.py\n+++ b/Products/CMFDiffTool/tests/testChangeSet.py\n@@ -10,7 +10,7 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFDiffTool.ChangeSet import BaseChangeSet\n from Products.CMFDiffTool.dexteritydiff import DexterityCompoundDiff\n-from Products.CMFPlone.utils import safe_hasattr\n+from plone.base.utils import safe_hasattr\n from unittest import TestCase\n \n \ndiff --git a/setup.py b/setup.py\nindex df0a4b8..167d5d5 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -44,6 +44,7 @@\n     install_requires=[\n         'setuptools',\n         'zope.interface',\n+        'plone.base',\n         'Products.CMFCore',\n         'Products.GenericSetup',\n         'Acquisition',\n"

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-03-01T00:41:21+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/932136c9e128adb8c2ac0fcffe9d6c8cf9626d39

Avoid direct test dependency on plone.app.robotframework.

Depend on plone.app.contenttypes[test] instead.

Files changed:
M setup.py

b"diff --git a/setup.py b/setup.py\nindex 167d5d5..63c6af9 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -36,8 +36,7 @@\n             'plone.app.testing',\n             'plone.namedfile',\n             'plone.app.dexterity',\n-            'plone.app.contenttypes',\n-            'plone.app.robotframework',  # Only because plone.app.event fails\n+            'plone.app.contenttypes[test]',\n             ]\n     ),\n     python_requires='>=3.8',\n"

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-03-01T00:45:32+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/d80397e03476eb975f30c7bce368cdaf7616122c

Removed no longer needed include of five.globalrequest.

We have zope.globalrequest which is loaded.

Files changed:
M Products/CMFDiffTool/configure.zcml

b'diff --git a/Products/CMFDiffTool/configure.zcml b/Products/CMFDiffTool/configure.zcml\nindex ba34464..13d2a4f 100644\n--- a/Products/CMFDiffTool/configure.zcml\n+++ b/Products/CMFDiffTool/configure.zcml\n@@ -1,10 +1,4 @@\n-<configure xmlns="http://namespaces.zope.org/zope"\n-           xmlns:i18n="http://namespaces.zope.org/i18n"\n-           xmlns:zcml="http://namespaces.zope.org/zcml"\n-           xmlns:cmf="http://namespaces.zope.org/cmf" >\n-\n-  <include zcml:condition="installed five.globalrequest"\n-           package="five.globalrequest" />\n+<configure xmlns="http://namespaces.zope.org/zope">\n \n   <include package=".exportimport" />\n \n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-03-01T00:46:25+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/d0d25b869adff8939d3c768bfeb79e1326507a0a

isort

Files changed:
M Products/CMFDiffTool/BaseDiff.py
M Products/CMFDiffTool/CMFDiffTool.py
M Products/CMFDiffTool/__init__.py
M Products/CMFDiffTool/interfaces/__init__.py
M Products/CMFDiffTool/interfaces/portal_diff.py
M Products/CMFDiffTool/libs/htmldiff.py
M Products/CMFDiffTool/tests/testChangeSet.py
M setup.py

b'diff --git a/Products/CMFDiffTool/BaseDiff.py b/Products/CMFDiffTool/BaseDiff.py\nindex 39b9470..33ccc0c 100644\n--- a/Products/CMFDiffTool/BaseDiff.py\n+++ b/Products/CMFDiffTool/BaseDiff.py\n@@ -6,10 +6,10 @@\n \n from AccessControl.class_init import InitializeClass\n from Acquisition import aq_base\n+from plone.base.utils import safe_hasattr\n from plone.dexterity.interfaces import IDexterityContent\n from Products.CMFDiffTool import CMFDiffToolMessageFactory as _\n from Products.CMFDiffTool.interfaces import IDifference\n-from plone.base.utils import safe_hasattr\n from z3c.relationfield.relation import RelationValue\n from zope.i18n import translate\n from zope.interface import implementer\ndiff --git a/Products/CMFDiffTool/CMFDiffTool.py b/Products/CMFDiffTool/CMFDiffTool.py\nindex 53e3961..c984d29 100644\n--- a/Products/CMFDiffTool/CMFDiffTool.py\n+++ b/Products/CMFDiffTool/CMFDiffTool.py\n@@ -7,12 +7,12 @@\n from AccessControl.class_init import InitializeClass\n from Acquisition import aq_base\n from OFS.SimpleItem import SimpleItem\n+from plone.base.utils import safe_hasattr\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.utils import registerToolInterface\n from Products.CMFCore.utils import UniqueObject\n from Products.CMFDiffTool.ChangeSet import BaseChangeSet\n from Products.CMFDiffTool.interfaces import IDiffTool\n-from plone.base.utils import safe_hasattr\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n from zExceptions import BadRequest\n from zope.interface import implementer\ndiff --git a/Products/CMFDiffTool/__init__.py b/Products/CMFDiffTool/__init__.py\nindex 31d0ef1..fdd9af6 100644\n--- a/Products/CMFDiffTool/__init__.py\n+++ b/Products/CMFDiffTool/__init__.py\n@@ -2,15 +2,17 @@\n """Initialize CMFDiffTool Product"""\n # Set up a MessageFactory for the cmfdifftool domain\n from zope.i18nmessageid import MessageFactory\n+\n+\n CMFDiffToolMessageFactory = MessageFactory(\'plone\')\n \n from Products.CMFCore.utils import ToolInit  # NOQA\n+from Products.CMFDiffTool import BinaryDiff  # NOQA\n from Products.CMFDiffTool import CMFDiffTool  # NOQA\n+from Products.CMFDiffTool import CMFDTHtmlDiff  # NOQA\n from Products.CMFDiffTool import FieldDiff  # NOQA\n-from Products.CMFDiffTool import TextDiff  # NOQA\n from Products.CMFDiffTool import ListDiff  # NOQA\n-from Products.CMFDiffTool import BinaryDiff  # NOQA\n-from Products.CMFDiffTool import CMFDTHtmlDiff  # NOQA\n+from Products.CMFDiffTool import TextDiff  # NOQA\n \n \n CMFDiffTool.registerDiffType(BinaryDiff.BinaryDiff)\n@@ -31,8 +33,8 @@\n \n # Soft Dexterity dependency\n try:\n-    from Products.CMFDiffTool import dexteritydiff\n     from Products.CMFDiffTool import choicediff\n+    from Products.CMFDiffTool import dexteritydiff\n except ImportError:\n     pass\n else:\ndiff --git a/Products/CMFDiffTool/interfaces/__init__.py b/Products/CMFDiffTool/interfaces/__init__.py\nindex d1058e6..481a759 100644\n--- a/Products/CMFDiffTool/interfaces/__init__.py\n+++ b/Products/CMFDiffTool/interfaces/__init__.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n # Interface definitions\n-from zope.interface import Interface, Attribute\n+from zope.interface import Attribute\n+from zope.interface import Interface\n \n \n class IDiffTool(Interface):\ndiff --git a/Products/CMFDiffTool/interfaces/portal_diff.py b/Products/CMFDiffTool/interfaces/portal_diff.py\nindex 4ee4efa..99c2115 100644\n--- a/Products/CMFDiffTool/interfaces/portal_diff.py\n+++ b/Products/CMFDiffTool/interfaces/portal_diff.py\n@@ -2,5 +2,5 @@\n # Copyright (c) 2003 The Connexions Project, All Rights Reserved\n # Written by Brent Hendricks\n \n-from Products.CMFDiffTool.interfaces import IDiffTool as portal_diff  # NOQA\n from Products.CMFDiffTool.interfaces import IDifference  # NOQA\n+from Products.CMFDiffTool.interfaces import IDiffTool as portal_diff  # NOQA\ndiff --git a/Products/CMFDiffTool/libs/htmldiff.py b/Products/CMFDiffTool/libs/htmldiff.py\nindex 32d36af..7d34b53 100644\n--- a/Products/CMFDiffTool/libs/htmldiff.py\n+++ b/Products/CMFDiffTool/libs/htmldiff.py\n@@ -17,7 +17,6 @@\n import re\n \n \n-\n def htmlEncode(s, esc=escape):\n     return esc(s, 1)\n \ndiff --git a/Products/CMFDiffTool/tests/testChangeSet.py b/Products/CMFDiffTool/tests/testChangeSet.py\nindex fc16a94..b5457c7 100644\n--- a/Products/CMFDiffTool/tests/testChangeSet.py\n+++ b/Products/CMFDiffTool/tests/testChangeSet.py\n@@ -7,10 +7,10 @@\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # NOQA\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.base.utils import safe_hasattr\n from Products.CMFCore.utils import getToolByName\n from Products.CMFDiffTool.ChangeSet import BaseChangeSet\n from Products.CMFDiffTool.dexteritydiff import DexterityCompoundDiff\n-from plone.base.utils import safe_hasattr\n from unittest import TestCase\n \n \ndiff --git a/setup.py b/setup.py\nindex 63c6af9..173251c 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,5 +1,7 @@\n # -*- coding: utf-8 -*-\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n+\n \n version = \'4.0.0.dev0\'\n \n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-03-01T01:03:40+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/df1de30729d058e1f2637f7f2d4ca40beba3a52c

no universal wheel

Files changed:
M setup.cfg

b'diff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..526aeb2 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,2 @@\n [bdist_wheel]\n-universal = 1\n+universal = 0\n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-03-01T01:03:57+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/a4ca7210e0aac35aa37add67567f24f9322ae44b

Removed outdated buildout files

Files changed:
D buildout.cfg
D plone-4.3.x.cfg
D requirements.txt

b"diff --git a/buildout.cfg b/buildout.cfg\ndeleted file mode 100644\nindex 001d11e..0000000\n--- a/buildout.cfg\n+++ /dev/null\n@@ -1,47 +0,0 @@\n-[buildout]\n-extends =\n-    https://raw.github.com/collective/buildout.plonetest/master/test-5.x.cfg\n-package-name = Products.CMFDiffTool\n-package-extras = [test]\n-test-eggs = Pillow\n-develop = .\n-parts +=\n-    omelette\n-    code-analysis\n-\n-# network speedup\n-socket-timeout = 5\n-allow-hosts =\n-    *.python.org\n-    docutils.sourceforge.net\n-    prdownloads.sourceforge.net\n-    effbot.org\n-    dist.plone.org\n-\n-[test]\n-eggs +=\n-    ipdb\n-\n-[omelette]\n-recipe = collective.recipe.omelette\n-eggs = ${test:eggs}\n-\n-[code-analysis]\n-recipe = plone.recipe.codeanalysis [recommended]\n-directory = ${buildout:directory}/Products\n-flake8-max-complexity = 22\n-# If todo markers are marked as problems, no todomarkers will be written\n-# Don't show plone.api advertisement\n-# Don't checko for % formatter\n-flake8-ignore = T000,P001,S001\n-utf8-header = True\n-clean-lines = True\n-imports = True\n-pep3101 = False\n-debug-statements = True\n-return-status-codes = True\n-\n-[versions]\n-zc.buildout=\n-setuptools=\n-Products.CMFDiffTool=\ndiff --git a/plone-4.3.x.cfg b/plone-4.3.x.cfg\ndeleted file mode 100644\nindex e69de29..0000000\ndiff --git a/requirements.txt b/requirements.txt\ndeleted file mode 100644\nindex ff404cc..0000000\n--- a/requirements.txt\n+++ /dev/null\n@@ -1 +0,0 @@\n-zc.buildout==2.5.0\n"

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2023-03-02T15:37:45+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/6d31e070439ff45702b891add3865f4576583caa

Merge pull request #42 from plone/maurits-plone6-only

Drop compatibility with Plone 5.2, Python 2, Archetypes.

Files changed:
A news/60.breaking
M Products/CMFDiffTool/BaseDiff.py
M Products/CMFDiffTool/CMFDiffTool.py
M Products/CMFDiffTool/ChangeSet.py
M Products/CMFDiffTool/FieldDiff.py
M Products/CMFDiffTool/ListDiff.py
M Products/CMFDiffTool/TextDiff.py
M Products/CMFDiffTool/__init__.py
M Products/CMFDiffTool/configure.zcml
M Products/CMFDiffTool/dexteritydiff.py
M Products/CMFDiffTool/interfaces/__init__.py
M Products/CMFDiffTool/interfaces/portal_diff.py
M Products/CMFDiffTool/libs/htmldiff.py
M Products/CMFDiffTool/testing.py
M Products/CMFDiffTool/tests/BaseTestCase.py
M Products/CMFDiffTool/tests/testChangeSet.py
M Products/CMFDiffTool/utils.py
M Products/__init__.py
M setup.cfg
M setup.py
D Products/CMFDiffTool/ATCompoundDiff.py
D Products/CMFDiffTool/tests/testATCompoundDiff.py
D buildout.cfg
D plone-4.3.x.cfg
D requirements.txt

b'diff --git a/Products/CMFDiffTool/ATCompoundDiff.py b/Products/CMFDiffTool/ATCompoundDiff.py\ndeleted file mode 100644\nindex bc9b9f7..0000000\n--- a/Products/CMFDiffTool/ATCompoundDiff.py\n+++ /dev/null\n@@ -1,130 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from AccessControl.class_init import InitializeClass\n-from Products.CMFDiffTool.BinaryDiff import BinaryDiff\n-from Products.CMFDiffTool.CMFDTHtmlDiff import CMFDTHtmlDiff\n-from Products.CMFDiffTool.FieldDiff import FieldDiff\n-from Products.CMFDiffTool.interfaces.portal_diff import IDifference\n-from Products.CMFDiffTool.ListDiff import ListDiff\n-from Products.CMFDiffTool.TextDiff import TextDiff\n-\n-\n-AT_FIELD_MAPPING = {\'text\': \'variable_text\',\n-                    \'string\': \'variable_text\',\n-                    \'datetime\': FieldDiff,\n-                    \'file\': \'variable_binary\',\n-                    \'blob\': \'variable_binary\',\n-                    \'image\': BinaryDiff,\n-                    \'lines\': ListDiff,\n-                    \'integer\': FieldDiff,\n-                    \'float\': FieldDiff,\n-                    \'fixedpoint\': FieldDiff,\n-                    \'boolean\': FieldDiff,\n-                    \'reference\': \'raw:ListDiff\'}\n-\n-AT_EXCLUDED_FIELDS = (\'modification_date\', )\n-\n-\n-class ATCompoundDiff:\n-    \'\'\'Text difference\'\'\'\n-\n-    meta_type = \'Compound Diff for AT types\'\n-\n-    def __init__(self, obj1, obj2, field, id1=None, id2=None):\n-        if not id1:\n-            id1 = obj1.getId()\n-        if not id2:\n-            id2 = obj2.getId()\n-        self.id1 = id1\n-        self.id2 = id2\n-\n-        fields = self.getFields(obj1, obj2)\n-        self._diffs = self.generateSubDiffs(fields, obj1, obj2)\n-\n-    def __getitem__(self, index):\n-        return self._diffs[index]\n-\n-    def __len__(self):\n-        return len(self._diffs)\n-\n-    def __iter__(self):\n-        return iter(self._diffs)\n-\n-    def generateSubDiffs(self, fields, obj1, obj2):\n-        diff_list = []\n-        for field in fields:\n-            klass = field[\'klass\']\n-            diff = klass(obj1, obj2, field[\'accessor\'], id1=self.id1,\n-                         id2=self.id2,\n-                         field_name=field[\'name\'],\n-                         field_label=field[\'label\'],\n-                         schemata=field[\'schemata\'])\n-            diff_list.append(diff)\n-        return diff_list\n-\n-    def getFields(self, obj1, obj2):\n-        fields = []\n-        # Make sure we get the fields ordered by schemata, as in the edit view\n-        schematas = obj1.Schemata()\n-        schemata_names = schematas.keys()\n-\n-        # Put default first and metadata last\n-        if \'default\' in schemata_names and schemata_names[0] != \'default\':\n-            schemata_names.remove(\'default\')\n-            schemata_names.insert(0, \'default\')\n-        if \'metadata\' in schemata_names and schemata_names[-1] != \'metadata\':\n-            schemata_names.remove(\'metadata\')\n-            schemata_names.insert(-1, \'metadata\')\n-\n-        for schemata_name in schemata_names:\n-            schema = schematas[schemata_name]\n-            for field in schema.viewableFields(obj1):\n-                if (field.type in AT_FIELD_MAPPING and\n-                        field.getName() not in AT_EXCLUDED_FIELDS):\n-                    is_primary = getattr(field, \'primary\', False)\n-                    label = field.widget.Label(obj1)\n-                    diff_type = AT_FIELD_MAPPING[field.type]\n-                    if IDifference.implementedBy(diff_type):\n-                        fields.append({\'name\': field.getName(),\n-                                       \'accessor\': field.accessor,\n-                                       \'klass\': diff_type,\n-                                       \'primary\': is_primary,\n-                                       \'label\': label,\n-                                       \'schemata\': schemata_name})\n-                    elif \'raw\' in diff_type:\n-                        #  Handle Fields which diff against the edit accessor\n-                        diff_name = diff_type.split(\':\')[1]\n-                        diff_type = globals()[diff_name]\n-                        fields.append({\'name\': field.getName(),\n-                                       \'accessor\': field.edit_accessor,\n-                                       \'klass\': diff_type,\n-                                       \'primary\': is_primary,\n-                                       \'label\': label,\n-                                       \'schemata\': schemata_name})\n-                    elif diff_type == \'variable_binary\':\n-                        diff_type = BinaryDiff\n-                        if (\'text/\' in field.getContentType(obj1) and\n-                                \'text/\' in (obj2.getField(field.getName())\n-                                            .getContentType(obj2))):\n-                            diff_type = TextDiff\n-                        fields.append({\'name\': field.getName(),\n-                                       \'accessor\': field.accessor,\n-                                       \'klass\': diff_type,\n-                                       \'primary\': is_primary,\n-                                       \'label\': label,\n-                                       \'schemata\': schemata_name})\n-                    elif diff_type == \'variable_text\':\n-                        diff_type = TextDiff\n-                        if (\'html\' in field.getContentType(obj1) and\n-                                \'html\' in (obj2.getField(field.getName())\n-                                           .getContentType(obj2))):\n-                            diff_type = CMFDTHtmlDiff\n-                        fields.append({\'name\': field.getName(),\n-                                       \'accessor\': field.accessor,\n-                                       \'klass\': diff_type,\n-                                       \'primary\': is_primary,\n-                                       \'label\': label,\n-                                       \'schemata\': schemata_name})\n-        return fields\n-\n-\n-InitializeClass(ATCompoundDiff)\ndiff --git a/Products/CMFDiffTool/BaseDiff.py b/Products/CMFDiffTool/BaseDiff.py\nindex 1ab004a..33ccc0c 100644\n--- a/Products/CMFDiffTool/BaseDiff.py\n+++ b/Products/CMFDiffTool/BaseDiff.py\n@@ -6,10 +6,10 @@\n \n from AccessControl.class_init import InitializeClass\n from Acquisition import aq_base\n+from plone.base.utils import safe_hasattr\n from plone.dexterity.interfaces import IDexterityContent\n from Products.CMFDiffTool import CMFDiffToolMessageFactory as _\n from Products.CMFDiffTool.interfaces import IDifference\n-from Products.CMFPlone.utils import safe_hasattr\n from z3c.relationfield.relation import RelationValue\n from zope.i18n import translate\n from zope.interface import implementer\n@@ -83,12 +83,6 @@ def _getValue(ob, field, field_name, convert_to_str=True):\n             value = getattr(ob, field, None)\n     elif field and safe_hasattr(aq_base(ob), field):\n         value = getattr(ob, field)\n-    elif safe_hasattr(aq_base(ob), \'getField\'):\n-        # Archetypes with an adapter extended schema needs special handling\n-        field = ob.getField(field_name)\n-        if field is None:\n-            raise AttributeError(field)\n-        value = field.getAccessor(ob)\n     else:\n         raise AttributeError(field)\n \ndiff --git a/Products/CMFDiffTool/CMFDiffTool.py b/Products/CMFDiffTool/CMFDiffTool.py\nindex ef302f8..c984d29 100644\n--- a/Products/CMFDiffTool/CMFDiffTool.py\n+++ b/Products/CMFDiffTool/CMFDiffTool.py\n@@ -7,12 +7,12 @@\n from AccessControl.class_init import InitializeClass\n from Acquisition import aq_base\n from OFS.SimpleItem import SimpleItem\n+from plone.base.utils import safe_hasattr\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.utils import registerToolInterface\n from Products.CMFCore.utils import UniqueObject\n from Products.CMFDiffTool.ChangeSet import BaseChangeSet\n from Products.CMFDiffTool.interfaces import IDiffTool\n-from Products.CMFPlone.utils import safe_hasattr\n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n from zExceptions import BadRequest\n from zope.interface import implementer\ndiff --git a/Products/CMFDiffTool/ChangeSet.py b/Products/CMFDiffTool/ChangeSet.py\nindex 0b8aed9..0bdf2cb 100644\n--- a/Products/CMFDiffTool/ChangeSet.py\n+++ b/Products/CMFDiffTool/ChangeSet.py\n@@ -12,9 +12,9 @@\n from Acquisition import aq_base\n from Acquisition import Implicit\n from ComputedAttribute import ComputedAttribute\n+from functools import reduce\n from Products.CMFCore.utils import getToolByName\n from Products.CMFDiffTool.interfaces import IChangeSet\n-from six.moves import reduce\n from zope.interface import implementer\n \n import logging\ndiff --git a/Products/CMFDiffTool/FieldDiff.py b/Products/CMFDiffTool/FieldDiff.py\nindex 0bc41e8..8d40183 100644\n--- a/Products/CMFDiffTool/FieldDiff.py\n+++ b/Products/CMFDiffTool/FieldDiff.py\n@@ -1,9 +1,7 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from Products.CMFDiffTool.BaseDiff import _getValue\n from Products.CMFDiffTool.BaseDiff import BaseDiff\n from Products.CMFDiffTool.utils import html_escape\n-from six.moves import range\n \n import difflib\n \ndiff --git a/Products/CMFDiffTool/ListDiff.py b/Products/CMFDiffTool/ListDiff.py\nindex a3c78de..420d2fa 100644\n--- a/Products/CMFDiffTool/ListDiff.py\n+++ b/Products/CMFDiffTool/ListDiff.py\n@@ -1,11 +1,9 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from plone.dexterity.interfaces import IDexterityContent\n from Products.CMFDiffTool.choicediff import get_field_object\n from Products.CMFDiffTool.choicediff import title_or_value\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n from Products.CMFDiffTool.utils import html_escape\n-from six.moves import range\n \n \n class ListDiff(FieldDiff):\ndiff --git a/Products/CMFDiffTool/TextDiff.py b/Products/CMFDiffTool/TextDiff.py\nindex 72a8d62..52d190d 100644\n--- a/Products/CMFDiffTool/TextDiff.py\n+++ b/Products/CMFDiffTool/TextDiff.py\n@@ -1,15 +1,12 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.class_init import InitializeClass\n from os import linesep\n from Products.CMFDiffTool import CMFDiffToolMessageFactory as _\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n from Products.CMFDiffTool.utils import html_escape\n from Products.CMFDiffTool.utils import safe_unicode\n-from Products.CMFDiffTool.utils import safe_utf8\n from zope.component.hooks import getSite\n \n import difflib\n-import six\n \n \n class TextDiff(FieldDiff):\n@@ -37,9 +34,6 @@ def unified_diff(self):\n         """Return a unified diff"""\n         a = self._parseField(self.oldValue, filename=self.oldFilename)\n         b = self._parseField(self.newValue, filename=self.newFilename)\n-        if six.PY2:\n-            a = [safe_utf8(i) for i in a]\n-            b = [safe_utf8(i) for i in b]\n         # in py3 unified_diff does not accept None for ids (id1 and id2)\n         # But TextDiff() sets None as default. We overwrite this here so the\n         # default of unified_diff (\'\') can be used .\n@@ -62,8 +56,6 @@ def html_diff(self, context=True, wrapcolumn=40):\n             safe_unicode(self.id1),\n             safe_unicode(self.id2),\n             context=context)\n-        if six.PY2:\n-            diff = safe_utf8(diff)\n         return diff\n \n     def inline_diff(self):\ndiff --git a/Products/CMFDiffTool/__init__.py b/Products/CMFDiffTool/__init__.py\nindex 13937d9..fdd9af6 100644\n--- a/Products/CMFDiffTool/__init__.py\n+++ b/Products/CMFDiffTool/__init__.py\n@@ -2,16 +2,17 @@\n """Initialize CMFDiffTool Product"""\n # Set up a MessageFactory for the cmfdifftool domain\n from zope.i18nmessageid import MessageFactory\n+\n+\n CMFDiffToolMessageFactory = MessageFactory(\'plone\')\n \n from Products.CMFCore.utils import ToolInit  # NOQA\n+from Products.CMFDiffTool import BinaryDiff  # NOQA\n from Products.CMFDiffTool import CMFDiffTool  # NOQA\n+from Products.CMFDiffTool import CMFDTHtmlDiff  # NOQA\n from Products.CMFDiffTool import FieldDiff  # NOQA\n-from Products.CMFDiffTool import TextDiff  # NOQA\n from Products.CMFDiffTool import ListDiff  # NOQA\n-from Products.CMFDiffTool import BinaryDiff  # NOQA\n-from Products.CMFDiffTool import CMFDTHtmlDiff  # NOQA\n-from Products.CMFDiffTool import ATCompoundDiff  # NOQA\n+from Products.CMFDiffTool import TextDiff  # NOQA\n \n \n CMFDiffTool.registerDiffType(BinaryDiff.BinaryDiff)\n@@ -20,7 +21,6 @@\n CMFDiffTool.registerDiffType(TextDiff.TextDiff)\n CMFDiffTool.registerDiffType(TextDiff.AsTextDiff)\n CMFDiffTool.registerDiffType(CMFDTHtmlDiff.CMFDTHtmlDiff)\n-CMFDiffTool.registerDiffType(ATCompoundDiff.ATCompoundDiff)\n \n # Soft plone.namedfile dependency\n try:\n@@ -33,8 +33,8 @@\n \n # Soft Dexterity dependency\n try:\n-    from Products.CMFDiffTool import dexteritydiff\n     from Products.CMFDiffTool import choicediff\n+    from Products.CMFDiffTool import dexteritydiff\n except ImportError:\n     pass\n else:\ndiff --git a/Products/CMFDiffTool/configure.zcml b/Products/CMFDiffTool/configure.zcml\nindex ba34464..13d2a4f 100644\n--- a/Products/CMFDiffTool/configure.zcml\n+++ b/Products/CMFDiffTool/configure.zcml\n@@ -1,10 +1,4 @@\n-<configure xmlns="http://namespaces.zope.org/zope"\n-           xmlns:i18n="http://namespaces.zope.org/i18n"\n-           xmlns:zcml="http://namespaces.zope.org/zcml"\n-           xmlns:cmf="http://namespaces.zope.org/cmf" >\n-\n-  <include zcml:condition="installed five.globalrequest"\n-           package="five.globalrequest" />\n+<configure xmlns="http://namespaces.zope.org/zope">\n \n   <include package=".exportimport" />\n \ndiff --git a/Products/CMFDiffTool/dexteritydiff.py b/Products/CMFDiffTool/dexteritydiff.py\nindex e24bce4..71f3b84 100644\n--- a/Products/CMFDiffTool/dexteritydiff.py\n+++ b/Products/CMFDiffTool/dexteritydiff.py\n@@ -69,9 +69,7 @@\n \n \n class DexterityCompoundDiff(object):\n-    """Same as `Products.CMFDiffTool.ATCompoundDiff.ATCompoundDiff` but for\n-    Dexterity.\n-    """\n+    """text difference for Dexterity"""\n \n     meta_type = \'Compound Diff for Dexterity types\'\n \ndiff --git a/Products/CMFDiffTool/interfaces/__init__.py b/Products/CMFDiffTool/interfaces/__init__.py\nindex d1058e6..481a759 100644\n--- a/Products/CMFDiffTool/interfaces/__init__.py\n+++ b/Products/CMFDiffTool/interfaces/__init__.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n # Interface definitions\n-from zope.interface import Interface, Attribute\n+from zope.interface import Attribute\n+from zope.interface import Interface\n \n \n class IDiffTool(Interface):\ndiff --git a/Products/CMFDiffTool/interfaces/portal_diff.py b/Products/CMFDiffTool/interfaces/portal_diff.py\nindex 4ee4efa..99c2115 100644\n--- a/Products/CMFDiffTool/interfaces/portal_diff.py\n+++ b/Products/CMFDiffTool/interfaces/portal_diff.py\n@@ -2,5 +2,5 @@\n # Copyright (c) 2003 The Connexions Project, All Rights Reserved\n # Written by Brent Hendricks\n \n-from Products.CMFDiffTool.interfaces import IDiffTool as portal_diff  # NOQA\n from Products.CMFDiffTool.interfaces import IDifference  # NOQA\n+from Products.CMFDiffTool.interfaces import IDiffTool as portal_diff  # NOQA\ndiff --git a/Products/CMFDiffTool/libs/htmldiff.py b/Products/CMFDiffTool/libs/htmldiff.py\nindex 01efb56..7d34b53 100644\n--- a/Products/CMFDiffTool/libs/htmldiff.py\n+++ b/Products/CMFDiffTool/libs/htmldiff.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n htmldiff.py\n (C) Ian Bicking <ianb@colorstudy.com>\n@@ -11,17 +10,12 @@\n \n Better results if you use mxTidy first.  The output is HTML.\n """\n-from __future__ import print_function\n from difflib import SequenceMatcher\n-from six import StringIO\n+from html import escape\n+from io import StringIO\n \n import re\n \n-try:\n-    from html import escape\n-except ImportError:\n-    from cgi import escape\n-\n \n def htmlEncode(s, esc=escape):\n     return esc(s, 1)\ndiff --git a/Products/CMFDiffTool/testing.py b/Products/CMFDiffTool/testing.py\nindex 36cf2ab..af61a16 100644\n--- a/Products/CMFDiffTool/testing.py\n+++ b/Products/CMFDiffTool/testing.py\n@@ -9,8 +9,6 @@\n from zope.schema.vocabulary import SimpleTerm\n from zope.schema.vocabulary import SimpleVocabulary\n \n-import six\n-\n \n TEST_CONTENT_TYPE_ID = \'TestContentType\'\n \n@@ -99,30 +97,5 @@ def setUpPloneSite(self, portal):\n \n PACKAGE_DX_FIXTURE = DXLayer()\n \n-if six.PY2:\n-    try:\n-        from plone.app.testing.bbb_at import PTC_FIXTURE\n-    except ImportError:\n-        # plone.app.testing 5 or earlier\n-        from plone.app.testing.bbb import PTC_FIXTURE\n-\n-    class ATLayer(PloneSandboxLayer):\n-\n-        defaultBases = (PTC_FIXTURE, )\n-\n-        def setUpZope(self, app, configurationContext):\n-            # setup schema extender if available\n-            try:\n-                from archetypes import schemaextender\n-                self.loadZCML(package=schemaextender)\n-            except ImportError:\n-                pass\n-\n-    PACKAGE_AT_FIXTURE = ATLayer()\n-    CMFDiffToolATLayer = FunctionalTesting(\n-        bases=(PACKAGE_AT_FIXTURE, ),\n-        name=\'Products.CMFDiffTool.AT:functional\')\n-\n-\n CMFDiffToolDXLayer = FunctionalTesting(\n     bases=(PACKAGE_DX_FIXTURE, ), name=\'Products.CMFDiffTool.DX:functional\')\ndiff --git a/Products/CMFDiffTool/tests/BaseTestCase.py b/Products/CMFDiffTool/tests/BaseTestCase.py\nindex cbc0a62..30106e0 100644\n--- a/Products/CMFDiffTool/tests/BaseTestCase.py\n+++ b/Products/CMFDiffTool/tests/BaseTestCase.py\n@@ -1,7 +1,6 @@\n # -*- coding: utf-8 -*-\n from Products.CMFDiffTool.testing import CMFDiffToolDXLayer\n \n-import six\n import unittest\n \n \n@@ -15,20 +14,3 @@ class BaseDXTestCase(unittest.TestCase):\n \n     def setUp(self):\n         self.portal = self.layer[\'portal\']\n-\n-\n-if six.PY2:\n-    try:\n-        from plone.app.testing.bbb_at import PloneTestCase\n-    except ImportError:\n-        # plone.app.testing 5 or earlier\n-        from plone.app.testing.bbb import PloneTestCase\n-    from Products.CMFDiffTool.testing import CMFDiffToolATLayer\n-\n-    class BaseATTestCase(PloneTestCase):\n-        """ A base testing class for CMFDiffTool\n-\n-            It includes a layer which installes the product\n-            and some testing dependencies in a Plone site.\n-        """\n-        layer = CMFDiffToolATLayer\ndiff --git a/Products/CMFDiffTool/tests/testATCompoundDiff.py b/Products/CMFDiffTool/tests/testATCompoundDiff.py\ndeleted file mode 100644\nindex 9dd8e28..0000000\n--- a/Products/CMFDiffTool/tests/testATCompoundDiff.py\n+++ /dev/null\n@@ -1,106 +0,0 @@\n-# -*- coding: utf-8 -*-\n-import six\n-\n-\n-if six.PY2:\n-    from .BaseTestCase import BaseATTestCase\n-    from Products.Archetypes import atapi\n-    from Products.ATContentTypes.content.document import ATDocument\n-    from Products.CMFDiffTool.ATCompoundDiff import ATCompoundDiff\n-    from zope.component import adapts\n-    from zope.component import provideAdapter\n-    from zope.interface import alsoProvides\n-    from zope.interface import noLongerProvides\n-\n-    class TestATCompoundDiff(BaseATTestCase):\n-        """Test the portal_diff tool"""\n-\n-        def testCompoundDiff(self):\n-            first = self.folder.invokeFactory(\'Document\', \'extended-document\')\n-            first = self.folder[first]\n-            second = self.folder.invokeFactory(\'Document\',\n-                                               \'extended-document2\')\n-            second = self.folder[second]\n-            # Change a value\n-            first.setText(\'<p>Body1</p>\', mimetype=\'text/html\')\n-            second.setText(\'<p>Body2</p>\', mimetype=\'text/html\')\n-            fd = ATCompoundDiff(first, second, None)\n-            # There should be some fields\n-            self.assertTrue(len(fd))\n-            for field in fd:\n-                # We\'ve changed the body\n-                if field.label == \'label_body_text\':\n-                    # We have the correct values\n-                    self.assertEqual(field.oldValue, \'<p>Body1</p>\')\n-                    self.assertEqual(field.newValue, \'<p>Body2</p>\')\n-                    # And the correctly assigned diff type\n-                    self.assertEqual(field.meta_type, \'HTML Diff\')\n-                # We\'ve also changed the id\n-                elif field.label == \'label_short_name\':\n-                    self.assertEqual(field.oldValue, \'extended-document\')\n-                    self.assertEqual(field.newValue, \'extended-document2\')\n-                    self.assertEqual(field.meta_type, \'Lines Diff\')\n-                # The dates will be different, but everything else should\n-                # be the same\n-                elif field.label not in (\'label_creation_date\',\n-                                         \'label_modification_date\'):\n-                    self.assertEqual(field.oldValue, field.newValue)\n-\n-        def testAdaptedObjects(self):\n-            # Add a schema extended field to an ATDocument and test that\n-            # the compound diff can read it\n-            from archetypes.schemaextender.field import ExtensionField\n-            from archetypes.schemaextender.tests.mocks import Extender\n-            from archetypes.schemaextender.tests.mocks import IHighlighted\n-\n-            # custom field class which does not set attributes directly on the\n-            # content\n-            class HighlightedField(ExtensionField, atapi.StringField):\n-                def get(self, instance, **kwargs):\n-                    return IHighlighted.providedBy(instance)\n-\n-                def getRaw(self, instance, **kwargs):\n-                    return self.get(instance, **kwargs)\n-\n-                def set(self, instance, value, **kwargs):\n-                    if value and not IHighlighted.providedBy(instance):\n-                        alsoProvides(instance, IHighlighted)\n-                    elif not value and IHighlighted.providedBy(instance):\n-                        noLongerProvides(instance, IHighlighted)\n-\n-            class TestSchemaExtender(Extender):\n-                adapts(ATDocument)  # noqa: D001\n-                fields = [\n-                    HighlightedField(\'schemaextender_test\',\n-                                     schemata=\'settings\',\n-                                     widget=atapi.BooleanWidget(\n-                                         label=\'Extended\',\n-                                         description=\'\'),\n-                                     ),\n-                ]\n-\n-            """ Ensure that tool instances implement the portal_diff\n-            interface """\n-            provideAdapter(TestSchemaExtender,\n-                           name=u\'archetypes.schemaextender.tests\')\n-\n-            first = self.folder.invokeFactory(\'Document\', \'extended-document\')\n-            first = self.folder[first]\n-            second = self.folder.invokeFactory(\'Document\',\n-                                               \'extended-document2\')\n-            second = self.folder[second]\n-            # Change the value\n-            alsoProvides(second, IHighlighted)\n-            fd = ATCompoundDiff(first, second, None)\n-            field = fd[-1]\n-            self.assertEqual(field.oldValue, False)\n-            self.assertEqual(field.newValue, True)\n-            self.assertEqual(field.label, \'Extended\')\n-\n-else:\n-    import unittest\n-\n-    class TestDummy(unittest.TestCase):\n-\n-        def test_dummy(self):\n-            return\ndiff --git a/Products/CMFDiffTool/tests/testChangeSet.py b/Products/CMFDiffTool/tests/testChangeSet.py\nindex 6b9206e..b5457c7 100644\n--- a/Products/CMFDiffTool/tests/testChangeSet.py\n+++ b/Products/CMFDiffTool/tests/testChangeSet.py\n@@ -7,10 +7,10 @@\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # NOQA\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.base.utils import safe_hasattr\n from Products.CMFCore.utils import getToolByName\n from Products.CMFDiffTool.ChangeSet import BaseChangeSet\n from Products.CMFDiffTool.dexteritydiff import DexterityCompoundDiff\n-from Products.CMFPlone.utils import safe_hasattr\n from unittest import TestCase\n \n \ndiff --git a/Products/CMFDiffTool/utils.py b/Products/CMFDiffTool/utils.py\nindex 1f1cf05..3d83865 100644\n--- a/Products/CMFDiffTool/utils.py\n+++ b/Products/CMFDiffTool/utils.py\n@@ -1,21 +1,12 @@\n-# -*- coding: utf-8 -*-\n-from Products.PortalTransforms.data import datastream\n+from html import escape\n from Products.PortalTransforms.transforms.safe_html import SafeHTML\n \n-import six\n-\n-\n-try:\n-    from html import escape\n-except ImportError:\n-    from cgi import escape\n-\n \n def safe_unicode(value):\n-    if isinstance(value, six.text_type):\n+    if isinstance(value, str):\n         return value\n     try:\n-        value = six.text_type(value)\n+        value = str(value)\n     except UnicodeDecodeError:\n         value = value.decode(\'utf-8\', \'replace\')\n     return value\n@@ -28,38 +19,24 @@ def safe_utf8(value):\n def scrub_html(value):\n     # Strip illegal HTML tags from string text.\n     transform = SafeHTML()\n-    # Available in Plone 5.2:\n-    # return transform.scrub_html(value)\n-    data = datastream("text/x-html-safe")\n-    data = transform.convert(value, data)\n-    return data.getData()\n+    return transform.scrub_html(value)\n \n \n # We will have two functions:\n # - html_escape: escape html, for example turn \'<\' into \'&lt;\'\n # - html_safe: return html with dangerous tags removed, using safe html transform.\n #\n-# In both Python 2 and 3, the convert function that we use in safe_html\n+# The convert function that we use in safe_html\n # cannot handle a non string-like value, for example an integer.\n # Same is true for the escape function.\n # Seems good to always return a string-like value though.\n-# But should that be bytes or string or unicode?\n-if six.PY2:\n-    # We use this in places where the result gets inserted in a string/bytes,\n-    # so we should use a string (utf-8) here.\n-    def html_escape(value):\n-        value = safe_utf8(value)\n-        return escape(value, 1)\n+# This gets inserted in a string/text.\n+\n \n-    def html_safe(value):\n-        value = safe_utf8(value)\n-        return scrub_html(value)\n-else:\n-    # In Python 3 this gets inserted in a string/text.\n-    def html_escape(value):\n-        value = safe_unicode(value)\n-        return escape(value, 1)\n+def html_escape(value):\n+    value = safe_unicode(value)\n+    return escape(value, 1)\n \n-    def html_safe(value):\n-        value = safe_unicode(value)\n-        return scrub_html(value)\n+def html_safe(value):\n+    value = safe_unicode(value)\n+    return scrub_html(value)\ndiff --git a/Products/__init__.py b/Products/__init__.py\nindex 85880ef..de40ea7 100644\n--- a/Products/__init__.py\n+++ b/Products/__init__.py\n@@ -1,7 +1 @@\n-# -*- coding: utf-8 -*-\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+__import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/buildout.cfg b/buildout.cfg\ndeleted file mode 100644\nindex 001d11e..0000000\n--- a/buildout.cfg\n+++ /dev/null\n@@ -1,47 +0,0 @@\n-[buildout]\n-extends =\n-    https://raw.github.com/collective/buildout.plonetest/master/test-5.x.cfg\n-package-name = Products.CMFDiffTool\n-package-extras = [test]\n-test-eggs = Pillow\n-develop = .\n-parts +=\n-    omelette\n-    code-analysis\n-\n-# network speedup\n-socket-timeout = 5\n-allow-hosts =\n-    *.python.org\n-    docutils.sourceforge.net\n-    prdownloads.sourceforge.net\n-    effbot.org\n-    dist.plone.org\n-\n-[test]\n-eggs +=\n-    ipdb\n-\n-[omelette]\n-recipe = collective.recipe.omelette\n-eggs = ${test:eggs}\n-\n-[code-analysis]\n-recipe = plone.recipe.codeanalysis [recommended]\n-directory = ${buildout:directory}/Products\n-flake8-max-complexity = 22\n-# If todo markers are marked as problems, no todomarkers will be written\n-# Don\'t show plone.api advertisement\n-# Don\'t checko for % formatter\n-flake8-ignore = T000,P001,S001\n-utf8-header = True\n-clean-lines = True\n-imports = True\n-pep3101 = False\n-debug-statements = True\n-return-status-codes = True\n-\n-[versions]\n-zc.buildout=\n-setuptools=\n-Products.CMFDiffTool=\ndiff --git a/news/60.breaking b/news/60.breaking\nnew file mode 100644\nindex 0000000..b4b45a0\n--- /dev/null\n+++ b/news/60.breaking\n@@ -0,0 +1,2 @@\n+Drop compatibility with Plone 5.2, Python 2, Archetypes.\n+[maurits]\ndiff --git a/plone-4.3.x.cfg b/plone-4.3.x.cfg\ndeleted file mode 100644\nindex e69de29..0000000\ndiff --git a/requirements.txt b/requirements.txt\ndeleted file mode 100644\nindex ff404cc..0000000\n--- a/requirements.txt\n+++ /dev/null\n@@ -1 +0,0 @@\n-zc.buildout==2.5.0\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..526aeb2 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,2 @@\n [bdist_wheel]\n-universal = 1\n+universal = 0\ndiff --git a/setup.py b/setup.py\nindex 5302cf6..173251c 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,7 +1,9 @@\n # -*- coding: utf-8 -*-\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n-version = \'3.3.4.dev0\'\n+\n+version = \'4.0.0.dev0\'\n \n setup(\n     name=\'Products.CMFDiffTool\',\n@@ -11,14 +13,11 @@\n                       open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n@@ -27,7 +26,7 @@\n     keywords=\'Diff Plone\',\n     author=\'Brent Hendricks\',\n     author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/Products.CMFDiffTool\',\n+    url=\'https://github.com/plone/Products.CMFDiffTool\',\n     license=\'GPL\',\n     packages=find_packages(),\n     namespace_packages=[\'Products\'],\n@@ -39,18 +38,18 @@\n             \'plone.app.testing\',\n             \'plone.namedfile\',\n             \'plone.app.dexterity\',\n-            \'plone.app.contenttypes\',\n-            \'plone.app.robotframework\',  # Only because plone.app.event fails\n+            \'plone.app.contenttypes[test]\',\n             ]\n     ),\n+    python_requires=\'>=3.8\',\n     install_requires=[\n         \'setuptools\',\n-        \'six\',\n         \'zope.interface\',\n+        \'plone.base\',\n         \'Products.CMFCore\',\n         \'Products.GenericSetup\',\n         \'Acquisition\',\n-        \'Zope2\',\n+        \'Zope\',\n     ],\n     entry_points="""\n     [z3c.autoinclude.plugin]\n'

