Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2016-05-18T15:13:44+02:00
Author: Thomas Lotze () <tl@gocept.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/514c8c7255e2b581acaa3ff2e7a0accefec479b5

Python 3 compatibility.

Files changed:
M .travis.yml
M CHANGES.rst
M setup.py
M src/plone/recipe/zope2instance/__init__.py
M src/plone/recipe/zope2instance/ctl.py
M src/plone/recipe/zope2instance/make.py

diff --git a/.travis.yml b/.travis.yml
index ce74056..5277b43 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,6 +1,7 @@
 language: python
 python:
   - 2.7
+  - 3.5
 install:
   - python bootstrap.py
   - bin/buildout -t 3
diff --git a/CHANGES.rst b/CHANGES.rst
index b2b826e..68208d3 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,8 +1,8 @@
 Changelog
 =========
 
-4.2.21 (unreleased)
--------------------
+4.3.0 (unreleased)
+------------------
 
 Incompatibilities:
 
@@ -10,7 +10,7 @@ Incompatibilities:
 
 New:
 
-- *add item here*
+- Python 3 compatibility.
 
 Fixes:
 
diff --git a/setup.py b/setup.py
index 3933d2f..b437158 100644
--- a/setup.py
+++ b/setup.py
@@ -1,7 +1,7 @@
 from setuptools import setup, find_packages
 
 name = "plone.recipe.zope2instance"
-version = '4.2.21.dev0'
+version = '4.3.0.dev0'
 
 setup(
     name=name,
@@ -22,9 +22,11 @@
         "Framework :: Plone :: 5.0",
         "Framework :: Zope2",
         "Programming Language :: Python",
-        "Programming Language :: Python :: 2 :: Only",
+        "Programming Language :: Python :: 2",
         "Programming Language :: Python :: 2.6",
         "Programming Language :: Python :: 2.7",
+        "Programming Language :: Python :: 3",
+        "Programming Language :: Python :: 3.5",
         "Programming Language :: Python :: Implementation :: CPython",
     ],
     packages=find_packages('src'),
diff --git a/src/plone/recipe/zope2instance/__init__.py b/src/plone/recipe/zope2instance/__init__.py
index e01d9e6..90fbdb3 100644
--- a/src/plone/recipe/zope2instance/__init__.py
+++ b/src/plone/recipe/zope2instance/__init__.py
@@ -799,7 +799,7 @@ def render_file_storage(self, file_storage, blob_storage,
         if not os.path.exists(blob_storage):
             # Make it only readable for the current user, otherwise
             # you get a ZODB warning on startup.
-            os.makedirs(blob_storage, 0700)
+            os.makedirs(blob_storage, 0o700)
 
         storage = indent(storage, 2)
 
diff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py
index 8b9e0e0..ea49f47 100644
--- a/src/plone/recipe/zope2instance/ctl.py
+++ b/src/plone/recipe/zope2instance/ctl.py
@@ -77,7 +77,7 @@ def _get_pid_from_pidfile(self):
                         return int(f.read().strip())
                     except ValueError:
                         # pid file for any reason empty or corrupt
-                        print 'ERROR: Corrupt pid file: %s' % fname
+                        print('ERROR: Corrupt pid file: {}'.format(fname))
                         return 0
             else:
                 return 0
@@ -99,7 +99,7 @@ def _get_service_status(self):
             name = self._get_service_name()
             try:
                 status = win32serviceutil.QueryServiceStatus(name)[1]
-            except pywintypes.error, err:
+            except pywintypes.error as err:
                 # (1060, 'GetServiceKeyName', 'The specified service does not exist as an installed service.')
                 if err[0] == 1060:
                     return None
@@ -146,7 +146,7 @@ def do_install(self, arg):
 
             status = self._get_service_status()
             if status is not None:
-                print 'ERROR: Zope is already installed as a Windows service.'
+                print('ERROR: Zope is already installed as a Windows service.')
                 return
 
             # TODO: Are return values from do_ methods are really taken care of?
@@ -187,7 +187,7 @@ def do_install(self, arg):
                 self._set_winreg_key('pid_filename',
                              self.options.configroot.pid_filename)
 
-                print 'Installed Zope as Windows Service "%s".' % name
+                print('Installed Zope as Windows Service "{}".'.format(name))
 
             except pywintypes.error:
                 traceback.print_exc()
@@ -196,9 +196,10 @@ def do_install(self, arg):
             return ret_code
 
         def help_install(self):
-            print 'install -- Install Zope as a Windows service that must be manually started.'
-            print 'install auto -- Install Zope as a Windows service that starts at system startup.'
-
+            print("""\
+install -- Install Zope as a Windows service that must be manually started.
+install auto -- Install Zope as a Windows service that starts at system startup.\
+""")
         def do_start(self, arg):
 
             if not shell.IsUserAnAdmin():
@@ -207,18 +208,18 @@ def do_start(self, arg):
 
             status = self._get_service_status()
             if status is None:
-                print 'ERROR: Zope is not installed as Windows service.'
+                print('ERROR: Zope is not installed as Windows service.')
                 return
             elif status == win32service.SERVICE_START_PENDING:
-                print 'ERROR: The Zope Windows service is about to start.'
+                print('ERROR: The Zope Windows service is about to start.')
                 return
             elif status == win32service.SERVICE_RUNNING:
-                print 'ERROR: The Zope Windows service is already running.'
+                print('ERROR: The Zope Windows service is already running.')
                 return
             name = self._get_service_name()
             try:
                 win32serviceutil.StartService(name)
-                print 'Starting Windows Service "%s".' % name
+                print('Starting Windows Service "{}".'.format(name))
             except pywintypes.error:
                 traceback.print_exc()
 
@@ -230,15 +231,15 @@ def do_restart(self, arg):
 
             status = self._get_service_status()
             if status is None:
-                print 'ERROR: Zope is not installed as Windows service.'
+                print('ERROR: Zope is not installed as Windows service.')
                 return
             elif status == win32service.SERVICE_STOPPED:
-                print 'ERROR: The Zope Windows service has not been started.'
+                print('ERROR: The Zope Windows service has not been started.')
                 return
             name = self._get_service_name()
             try:
                 win32serviceutil.RestartService(name)
-                print 'Restarting Windows Service "%s".' % name
+                print('Restarting Windows Service "{}".'.format(name))
             except pywintypes.error:
                 traceback.print_exc()
 
@@ -250,15 +251,15 @@ def do_stop(self, arg):
 
             status = self._get_service_status()
             if status is None:
-                print 'ERROR: Zope is not installed as Windows service.'
+                print('ERROR: Zope is not installed as Windows service.')
                 return
             elif status == win32service.SERVICE_STOPPED:
-                print 'ERROR: The Zope Windows service has not been started.'
+                print('ERROR: The Zope Windows service has not been started.')
                 return
             name = self._get_service_name()
             try:
                 win32serviceutil.StopService(name)
-                print 'Stopping Windows Service "%s".' % name
+                print('Stopping Windows Service "{}".'.format(name))
             except pywintypes.error:
                 traceback.print_exc()
 
@@ -270,17 +271,17 @@ def do_remove(self, arg):
 
             status = self._get_service_status()
             if status is None:
-                print 'ERROR: Zope is not installed as a Windows service.'
+                print('ERROR: Zope is not installed as a Windows service.')
                 return
             elif not status is win32service.SERVICE_STOPPED:
-                print 'ERROR: Please stop the Windows service before removing it.'
+                print('ERROR: Please stop the Windows service before removing it.')
                 return
 
             ret_code = 0
             name = self._get_service_name()
             try:
                 win32serviceutil.RemoveService(name)
-                print 'Removed Windows Service "%s".' % name
+                print('Removed Windows Service "{}".'.format(name))
             except pywintypes.error:
                 ret_code = 1
                 traceback.print_exc()
@@ -309,11 +310,11 @@ def get_status(self):
 
         def do_status(self, arg=''):
             if arg not in ('', '-l'):
-                print 'ERROR: The only valid option is "-l".'
+                print('ERROR: The only valid option is "-l".')
                 return
             service_status = self._get_service_status()
             if service_status is None:
-                print 'Zope is not installed as a Windows service.'
+                print('Zope is not installed as a Windows service.')
             else:
                 name = self._get_service_name()
                 state = self.service_state_map.get(
@@ -321,16 +322,17 @@ def do_status(self, arg=''):
                 print('Zope is installed as Windows service "%s", '
                       'this service is currently %s.' % (name, state))
             if arg == '-l' and self.zd_status:
-                print self.zd_status
+                print(self.zd_status)
 
             # TODO: what about "self.zd_up"?
 
         def help_status(self):
-            print 'status -- Print status of the Windows service.'
-            print 'status -l -- Print status of the Windows service, and raw status output.'
+            print("""\
+status -- Print status of the Windows service.
+status -l -- Print status of the Windows service, and raw status output.""")
 
         def help_EOF(self):
-            print 'To quit, type CTRL+Z or use the quit command.'
+            print('To quit, type CTRL+Z or use the quit command.')
 
     # end of "if zopectl.WIN"
     else:
@@ -368,7 +370,8 @@ def do_start(self, arg):
             elif not self.zd_pid:
                 self.send_action("start")
             else:
-                print "daemon process already running; pid=%d" % self.zd_pid
+                print('daemon process already running; pid={}'.format(
+                        self.zd_pid))
                 return
             self.awhile(lambda: self.zd_pid,
                         "daemon process started, pid=%(zd_pid)d")
@@ -439,15 +442,16 @@ def get_startup_cmd(self, python, more, pyflags=""):
             return cmdline
 
     def help_startup_command(self):
-        print "    Also sets up a REQUEST, logs in the "
-        print "    AccessControl.SpecialUsers.system user, and may traverse "
-        print "    to an object, such as a CMF portal.  This environment set "
-        print "    up is controlled with following options:"
-        print "    -R/--no-request -- do not set up a REQUEST."
-        print "    -L/--no-login -- do not login the system user."
-        print "    -O/--object-path <path> -- Traverse to <path> from the app "
-        print "                               and make available as `obj`."
-        print "    Example usage: bin/instance -RLOPlone/front-page debug"
+        print("""\
+    Also sets up a REQUEST, logs in the 
+    AccessControl.SpecialUsers.system user, and may traverse 
+    to an object, such as a CMF portal.  This environment set 
+    up is controlled with following options:
+    -R/--no-request -- do not set up a REQUEST.
+    -L/--no-login -- do not login the system user.
+    -O/--object-path <path> -- Traverse to <path> from the app 
+                               and make available as `obj`.
+    Example usage: bin/instance -RLOPlone/front-page debug""")
 
     def do_run(self, arg):
         # If the command line was something like
@@ -470,7 +474,7 @@ def do_run(self, arg):
             tup = self.options.args[1:]
 
         if not tup:
-            print "usage: run <script> [args]"
+            print("usage: run <script> [args]")
             return
 
         # If we pass the script filename as a win32 backslashed path
@@ -496,8 +500,9 @@ def do_console(self, arg):
         self.do_foreground(arg, debug=False)
 
     def help_console(self):
-        print "console -- Run the program in the console."
-        print "    In contrast to foreground this does not turn on debug mode."
+        print("""\
+console -- Run the program in the console.
+    In contrast to foreground this does not turn on debug mode.""")
 
     def do_debug(self, arg):
         # `-c` disables the PYTHONSTARTUP feature; load it explicitly
@@ -618,6 +623,6 @@ def main(args=None):
         import readline
     except ImportError:
         pass
-    print 'Program: %s' % ' '.join(options.program)
+    print('Program: {}'.format(' '.join(options.program)))
     c.do_status()
     c.cmdloop()
diff --git a/src/plone/recipe/zope2instance/make.py b/src/plone/recipe/zope2instance/make.py
index 1b54d6b..5d1b20a 100644
--- a/src/plone/recipe/zope2instance/make.py
+++ b/src/plone/recipe/zope2instance/make.py
@@ -1,6 +1,7 @@
 from binascii import b2a_base64
 from hashlib import sha1
 import os
+import os.path
 import shutil
 import sys
 
@@ -29,10 +30,11 @@ def make_instance(user=None, instancehome=None, version='212'):
 
 def get_inituser():
     import getpass
-    print 'Please choose a username and password for the initial user.'
-    print 'These will be the credentials you use to initially manage'
-    print 'your new Zope instance.'
-    print
+    print("""\
+Please choose a username and password for the initial user.
+These will be the credentials you use to initially manage
+your new Zope instance.
+""")
     user = raw_input('Username: ').strip()
     if user == '':
         return None, None
@@ -43,16 +45,16 @@ def get_inituser():
             break
         else:
             passwd = verify = ''
-            print 'Password mismatch, please try again...'
+            print('Password mismatch, please try again...')
     return user, passwd
 
 
 def write_inituser(fn, user, password):
     fp = open(fn, 'w')
-    pw = b2a_base64(sha1(password).digest())[:-1]
+    pw = b2a_base64(sha1(password.encode('utf-8')).digest())[:-1]
     fp.write('%s:{SHA}%s\n' % (user, pw))
     fp.close()
-    os.chmod(fn, 0644)
+    os.chmod(fn, 0o644)
 
 
 def copyskel(sourcedir, targetdir):
@@ -66,28 +68,25 @@ def copyskel(sourcedir, targetdir):
     os.chdir(sourcedir)
     try:
         try:
-            os.path.walk(os.curdir, copydir, targetdir)
+            copydir(os.curdir, targetdir)
         finally:
             os.chdir(pwd)
-    except (IOError, OSError), msg:
-        print >>sys.stderr, msg
+    except (IOError, OSError) as msg:
+        print(msg, file=sys.stderr)
         sys.exit(1)
 
 
-def copydir(targetdir, sourcedir, names):
-    # Don't recurse into VCS directories:
-    for name in names[:]:
-        if os.path.normcase(name) in VCS_DIRS:
-            names.remove(name)
-        src = os.path.join(sourcedir, name)
-        if os.path.isfile(src):
-            # Copy the file:
+def copydir(sourcedir, targetdir):
+    for root, dirs, files in os.walk(sourcedir):
+        # Don't recurse into VCS directories:
+        dirs[:] = set(dirs).difference(VCS_DIRS)
+        for name in files:
+            src = os.path.join(root, name)
             dst = os.path.join(targetdir, src)
             if os.path.exists(dst):
                 continue
             shutil.copyfile(src, dst)
-        else:
-            # Directory:
+        for name in dirs:
             dn = os.path.join(targetdir, sourcedir, name)
             if not os.path.exists(dn):
                 os.mkdir(dn)


Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2017-07-21T08:30:09+02:00
Author: Michael Howitz (icemac) <mh@gocept.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/82fc2de4142a1f9828e29884b606837942662c07

Restore Python 2.7 compatibility.

Files changed:
M src/plone/recipe/zope2instance/make.py

diff --git a/src/plone/recipe/zope2instance/make.py b/src/plone/recipe/zope2instance/make.py
index 5d1b20a..ae1b43c 100644
--- a/src/plone/recipe/zope2instance/make.py
+++ b/src/plone/recipe/zope2instance/make.py
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from binascii import b2a_base64
 from hashlib import sha1
 import os


Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2017-07-21T08:30:24+02:00
Author: Michael Howitz (icemac) <mh@gocept.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/273df0a0050fd8a382281920dfe30de5fc5409bc

Update to current versions.

Files changed:
M bootstrap.py
M buildout.cfg
M src/plone/recipe/zope2instance/tests/test_docs.py

diff --git a/bootstrap.py b/bootstrap.py
index d5e8be1..1f59b21 100644
--- a/bootstrap.py
+++ b/bootstrap.py
@@ -18,75 +18,17 @@
 use the -c option to specify an alternate configuration file.
 """
 
-import os, shutil, sys, tempfile, urllib, urllib2, subprocess
+import os
+import shutil
+import sys
+import tempfile
+
 from optparse import OptionParser
 
-if sys.platform == 'win32':
-    def quote(c):
-        if ' ' in c:
-            return '"%s"' % c  # work around spawn lamosity on windows
-        else:
-            return c
-else:
-    quote = str
-
-# See zc.buildout.easy_install._has_broken_dash_S for motivation and comments.
-stdout, stderr = subprocess.Popen(
-    [sys.executable, '-Sc',
-     'try:\n'
-     '    import ConfigParser\n'
-     'except ImportError:\n'
-     '    print 1\n'
-     'else:\n'
-     '    print 0\n'],
-    stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
-has_broken_dash_S = bool(int(stdout.strip()))
-
-# In order to be more robust in the face of system Pythons, we want to
-# run without site-packages loaded.  This is somewhat tricky, in
-# particular because Python 2.6's distutils imports site, so starting
-# with the -S flag is not sufficient.  However, we'll start with that:
-if not has_broken_dash_S and 'site' in sys.modules:
-    # We will restart with python -S.
-    args = sys.argv[:]
-    args[0:0] = [sys.executable, '-S']
-    args = map(quote, args)
-    os.execv(sys.executable, args)
-# Now we are running with -S.  We'll get the clean sys.path, import site
-# because distutils will do it later, and then reset the path and clean
-# out any namespace packages from site-packages that might have been
-# loaded by .pth files.
-clean_path = sys.path[:]
-import site  # imported because of its side effects
-sys.path[:] = clean_path
-for k, v in sys.modules.items():
-    if k in ('setuptools', 'pkg_resources') or (
-        hasattr(v, '__path__') and
-        len(v.__path__) == 1 and
-        not os.path.exists(os.path.join(v.__path__[0], '__init__.py'))):
-        # This is a namespace package.  Remove it.
-        sys.modules.pop(k)
-
-is_jython = sys.platform.startswith('java')
-
-setuptools_source = 'http://peak.telecommunity.com/dist/ez_setup.py'
-distribute_source = 'http://python-distribute.org/distribute_setup.py'
-distribute_source = 'https://bitbucket.org/pypa/setuptools/raw/f657df1f1ed46596d236376649c99a470662b4ba/distribute_setup.py'
-
-# parsing arguments
-def normalize_to_url(option, opt_str, value, parser):
-    if value:
-        if '://' not in value:  # It doesn't smell like a URL.
-            value = 'file://%s' % (
-                urllib.pathname2url(
-                    os.path.abspath(os.path.expanduser(value))),)
-        if opt_str == '--download-base' and not value.endswith('/'):
-            # Download base needs a trailing slash to make the world happy.
-            value += '/'
-    else:
-        value = None
-    name = opt_str[2:].replace('-', '_')
-    setattr(parser.values, name, value)
+__version__ = '2015-07-01'
+# See zc.buildout's changelog if this version is up to date.
+
+tmpeggs = tempfile.mkdtemp(prefix='bootstrap-')
 
 usage = '''\
 [DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
@@ -96,129 +38,134 @@ def normalize_to_url(option, opt_str, value, parser):
 Simply run this script in a directory containing a buildout.cfg, using the
 Python that you want bin/buildout to use.
 
-Note that by using --setup-source and --download-base to point to
-local resources, you can keep this script from going over the network.
+Note that by using --find-links to point to local resources, you can keep
+this script from going over the network.
 '''
 
 parser = OptionParser(usage=usage)
-parser.add_option("-v", "--version", dest="version",
-                          help="use a specific zc.buildout version")
-parser.add_option("-d", "--distribute",
-                   action="store_true", dest="use_distribute", default=False,
-                   help="Use Distribute rather than Setuptools.")
-parser.add_option("--setup-source", action="callback", dest="setup_source",
-                  callback=normalize_to_url, nargs=1, type="string",
-                  help=("Specify a URL or file location for the setup file. "
-                        "If you use Setuptools, this will default to " +
-                        setuptools_source + "; if you use Distribute, this "
-                        "will default to " + distribute_source + "."))
-parser.add_option("--download-base", action="callback", dest="download_base",
-                  callback=normalize_to_url, nargs=1, type="string",
-                  help=("Specify a URL or directory for downloading "
-                        "zc.buildout and either Setuptools or Distribute. "
-                        "Defaults to PyPI."))
-parser.add_option("--eggs",
-                  help=("Specify a directory for storing eggs.  Defaults to "
-                        "a temporary directory that is deleted when the "
-                        "bootstrap script completes."))
+parser.add_option("--version",
+                  action="store_true", default=False,
+                  help=("Return bootstrap.py version."))
 parser.add_option("-t", "--accept-buildout-test-releases",
                   dest='accept_buildout_test_releases',
                   action="store_true", default=False,
-                  help=("Normally, if you do not specify a --version, the "
-                        "bootstrap script and buildout gets the newest "
+                  help=("Normally, if you do not specify a --buildout-version, "
+                        "the bootstrap script and buildout gets the newest "
                         "*final* versions of zc.buildout and its recipes and "
                         "extensions for you.  If you use this flag, "
                         "bootstrap and buildout will get the newest releases "
                         "even if they are alphas or betas."))
-parser.add_option("-c", None, action="store", dest="config_file",
-                   help=("Specify the path to the buildout configuration "
-                         "file to be used."))
+parser.add_option("-c", "--config-file",
+                  help=("Specify the path to the buildout configuration "
+                        "file to be used."))
+parser.add_option("-f", "--find-links",
+                  help=("Specify a URL to search for buildout releases"))
+parser.add_option("--allow-site-packages",
+                  action="store_true", default=False,
+                  help=("Let bootstrap.py use existing site packages"))
+parser.add_option("--buildout-version",
+                  help="Use a specific zc.buildout version")
+parser.add_option("--setuptools-version",
+                  help="Use a specific setuptools version")
+parser.add_option("--setuptools-to-dir",
+                  help=("Allow for re-use of existing directory of "
+                        "setuptools versions"))
 
 options, args = parser.parse_args()
+if options.version:
+    print("bootstrap.py version %s" % __version__)
+    sys.exit(0)
 
-if options.eggs:
-    eggs_dir = os.path.abspath(os.path.expanduser(options.eggs))
-else:
-    eggs_dir = tempfile.mkdtemp()
-
-if options.setup_source is None:
-    if options.use_distribute:
-        options.setup_source = distribute_source
-    else:
-        options.setup_source = setuptools_source
 
-if options.accept_buildout_test_releases:
-    args.insert(0, 'buildout:accept-buildout-test-releases=true')
+######################################################################
+# load/install setuptools
 
 try:
-    import pkg_resources
-    import setuptools  # A flag.  Sometimes pkg_resources is installed alone.
-    if not hasattr(pkg_resources, '_distribute'):
-        raise ImportError
+    from urllib.request import urlopen
 except ImportError:
-    ez_code = urllib2.urlopen(
-        options.setup_source).read().replace('\r\n', '\n')
-    ez = {}
-    exec ez_code in ez
-    setup_args = dict(to_dir=eggs_dir, download_delay=0)
-    if options.download_base:
-        setup_args['download_base'] = options.download_base
-    if options.use_distribute:
-        setup_args['no_fake'] = True
-        if sys.version_info[:2] == (2, 4):
-            setup_args['version'] = '0.6.32'
-    ez['use_setuptools'](**setup_args)
-    if 'pkg_resources' in sys.modules:
-        reload(sys.modules['pkg_resources'])
-    import pkg_resources
-    # This does not (always?) update the default working set.  We will
-    # do it.
-    for path in sys.path:
-        if path not in pkg_resources.working_set.entries:
-            pkg_resources.working_set.add_entry(path)
-
-cmd = [quote(sys.executable),
-       '-c',
-       quote('from setuptools.command.easy_install import main; main()'),
-       '-mqNxd',
-       quote(eggs_dir)]
-
-if not has_broken_dash_S:
-    cmd.insert(1, '-S')
-
-find_links = options.download_base
-if not find_links:
-    find_links = os.environ.get('bootstrap-testing-find-links')
-if not find_links and options.accept_buildout_test_releases:
-    find_links = 'http://downloads.buildout.org/'
-if find_links:
-    cmd.extend(['-f', quote(find_links)])
+    from urllib2 import urlopen
 
-if options.use_distribute:
-    setup_requirement = 'distribute'
+ez = {}
+if os.path.exists('ez_setup.py'):
+    exec(open('ez_setup.py').read(), ez)
 else:
-    setup_requirement = 'setuptools'
+    exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
+
+if not options.allow_site_packages:
+    # ez_setup imports site, which adds site packages
+    # this will remove them from the path to ensure that incompatible versions
+    # of setuptools are not in the path
+    import site
+    # inside a virtualenv, there is no 'getsitepackages'.
+    # We can't remove these reliably
+    if hasattr(site, 'getsitepackages'):
+        for sitepackage_path in site.getsitepackages():
+            # Strip all site-packages directories from sys.path that
+            # are not sys.prefix; this is because on Windows
+            # sys.prefix is a site-package directory.
+            if sitepackage_path != sys.prefix:
+                sys.path[:] = [x for x in sys.path
+                               if sitepackage_path not in x]
+
+setup_args = dict(to_dir=tmpeggs, download_delay=0)
+
+if options.setuptools_version is not None:
+    setup_args['version'] = options.setuptools_version
+if options.setuptools_to_dir is not None:
+    setup_args['to_dir'] = options.setuptools_to_dir
+
+ez['use_setuptools'](**setup_args)
+import setuptools
+import pkg_resources
+
+# This does not (always?) update the default working set.  We will
+# do it.
+for path in sys.path:
+    if path not in pkg_resources.working_set.entries:
+        pkg_resources.working_set.add_entry(path)
+
+######################################################################
+# Install buildout
+
 ws = pkg_resources.working_set
-setup_requirement_path = ws.find(
-    pkg_resources.Requirement.parse(setup_requirement)).location
-env = dict(
-    os.environ,
-    PYTHONPATH=setup_requirement_path)
+
+setuptools_path = ws.find(
+    pkg_resources.Requirement.parse('setuptools')).location
+
+# Fix sys.path here as easy_install.pth added before PYTHONPATH
+cmd = [sys.executable, '-c',
+       'import sys; sys.path[0:0] = [%r]; ' % setuptools_path +
+       'from setuptools.command.easy_install import main; main()',
+       '-mZqNxd', tmpeggs]
+
+find_links = os.environ.get(
+    'bootstrap-testing-find-links',
+    options.find_links or
+    ('http://downloads.buildout.org/'
+     if options.accept_buildout_test_releases else None)
+    )
+if find_links:
+    cmd.extend(['-f', find_links])
 
 requirement = 'zc.buildout'
-version = options.version
+version = options.buildout_version
 if version is None and not options.accept_buildout_test_releases:
     # Figure out the most recent final version of zc.buildout.
     import setuptools.package_index
     _final_parts = '*final-', '*final'
 
     def _final_version(parsed_version):
-        for part in parsed_version:
-            if (part[:1] == '*') and (part not in _final_parts):
-                return False
-        return True
+        try:
+            return not parsed_version.is_prerelease
+        except AttributeError:
+            # Older setuptools
+            for part in parsed_version:
+                if (part[:1] == '*') and (part not in _final_parts):
+                    return False
+            return True
+
     index = setuptools.package_index.PackageIndex(
-        search_path=[setup_requirement_path])
+        search_path=[setuptools_path])
     if find_links:
         index.add_find_links((find_links,))
     req = pkg_resources.Requirement.parse(requirement)
@@ -227,8 +174,6 @@ def _final_version(parsed_version):
         bestv = None
         for dist in index[req.project_name]:
             distv = dist.parsed_version
-            if distv >= pkg_resources.parse_version('2dev'):
-                continue
             if _final_version(distv):
                 if bestv is None or distv > bestv:
                     best = [dist]
@@ -238,40 +183,28 @@ def _final_version(parsed_version):
         if best:
             best.sort()
             version = best[-1].version
-
 if version:
-    requirement += '=='+version
-else:
-    requirement += '<2dev'
-
+    requirement = '=='.join((requirement, version))
 cmd.append(requirement)
 
-if is_jython:
-    import subprocess
-    exitcode = subprocess.Popen(cmd, env=env).wait()
-else:  # Windows prefers this, apparently; otherwise we would prefer subprocess
-    exitcode = os.spawnle(*([os.P_WAIT, sys.executable] + cmd + [env]))
-if exitcode != 0:
-    sys.stdout.flush()
-    sys.stderr.flush()
-    print ("An error occurred when trying to install zc.buildout. "
-           "Look above this message for any errors that "
-           "were output by easy_install.")
-    sys.exit(exitcode)
-
-ws.add_entry(eggs_dir)
+import subprocess
+if subprocess.call(cmd) != 0:
+    raise Exception(
+        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
+
+######################################################################
+# Import and run buildout
+
+ws.add_entry(tmpeggs)
 ws.require(requirement)
 import zc.buildout.buildout
 
-# If there isn't already a command in the args, add bootstrap
 if not [a for a in args if '=' not in a]:
     args.append('bootstrap')
 
-
-# if -c was provided, we push it back into args for buildout's main function
+# if -c was provided, we push it back into args for buildout' main function
 if options.config_file is not None:
     args[0:0] = ['-c', options.config_file]
 
 zc.buildout.buildout.main(args)
-if not options.eggs:  # clean up temporary egg directory
-    shutil.rmtree(eggs_dir)
+shutil.rmtree(tmpeggs)
diff --git a/buildout.cfg b/buildout.cfg
index a754baf..25b163b 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -1,13 +1,9 @@
 [buildout]
-extends = http://download.zope.org/Zope2/index/2.13.21/versions.cfg
-
+extends = https://raw.githubusercontent.com/zopefoundation/Zope/4.0a6/versions-prod.cfg
 versions = versions
 develop = .
 parts = test
 
-[versions]
-setuptools = 7.0
-
 [test]
 recipe = zc.recipe.testrunner
 eggs = plone.recipe.zope2instance
diff --git a/src/plone/recipe/zope2instance/tests/test_docs.py b/src/plone/recipe/zope2instance/tests/test_docs.py
index 1cf050e..a1a77e1 100644
--- a/src/plone/recipe/zope2instance/tests/test_docs.py
+++ b/src/plone/recipe/zope2instance/tests/test_docs.py
@@ -16,7 +16,12 @@ def setUp(test):
     install_develop('plone.recipe.zope2instance', test)
     install('zc.recipe.egg', test)
     install('mailinglogger', test)
-    dependencies = pkg_resources.working_set.require('Zope2')
+    install('ZODB3', test)
+    install_dependencies(pkg_resources.working_set.require('ZEO'), test)
+    install_dependencies(pkg_resources.working_set.require('Zope2'), test)
+
+
+def install_dependencies(dependencies, test):
     for dep in dependencies:
         try:
             install(dep.project_name, test)


Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2017-10-21T14:15:18+02:00
Author: tschorr (tschorr) <t_schorr@gmx.de>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/d68b1d6ec6c902b53c699a919cd85e44597ba7dc

merge master into py3

Files changed:
A setup.cfg
A src/plone/recipe/zope2instance/tests/wsgi.txt
A src/plone/recipe/zope2instance/wsgi.py
A zope4.cfg
M .travis.yml
M CHANGES.rst
M MANIFEST.in
M README.rst
M buildout.cfg
M setup.py
M src/plone/__init__.py
M src/plone/recipe/__init__.py
M src/plone/recipe/zope2instance/__init__.py
M src/plone/recipe/zope2instance/ctl.py
M src/plone/recipe/zope2instance/make.py
M src/plone/recipe/zope2instance/tests/test_docs.py
M src/plone/recipe/zope2instance/tests/zope2instance.txt

diff --git a/.travis.yml b/.travis.yml
index 5277b43..1f3db4b 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -3,6 +3,7 @@ python:
   - 2.7
   - 3.5
 install:
-  - python bootstrap.py
+  - pip install setuptools==33.1.1 zc.buildout==2.5.3
+  - buildout bootstrap
   - bin/buildout -t 3
 script: bin/test
diff --git a/CHANGES.rst b/CHANGES.rst
index 68208d3..893c770 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,20 +1,48 @@
 Changelog
 =========
 
-4.3.0 (unreleased)
+5.0.0 (unreleased)
 ------------------
 
-Incompatibilities:
+Breaking changes:
 
-- *add item here*
+- Python 3 compatibility.
 
-New:
+New features:
 
-- Python 3 compatibility.
+- Add wsgi support
+  [tschorr]
+
+Bug fixes:
+
+- Fix import. zopectl moved to ZServer
+  [pbauer]
+
+
+4.3 (2017-06-28)
+----------------
+
+New features:
+
+- Added ``storage-wrapper`` option to wrap storage configuration.
+  [davisagli]
+
+
+4.2.22 (2016-10-05)
+-------------------
+
+Bug fixes:
+
+- Add coding headers on python files.
+  [gforcada]
+
+4.2.21 (2016-05-26)
+-------------------
 
 Fixes:
 
-- *add item here*
+- Fix #23: "TypeError: <lambda>() takes no arguments (1 given)" on ./bin/instance start
+  [jensens]
 
 
 4.2.20 (2016-03-29)
diff --git a/MANIFEST.in b/MANIFEST.in
index fc44ccb..22594b9 100644
--- a/MANIFEST.in
+++ b/MANIFEST.in
@@ -1,4 +1,4 @@
-include *
+include *.rst
 
 recursive-include src *
 
diff --git a/README.rst b/README.rst
index 7318f30..a94cdb9 100644
--- a/README.rst
+++ b/README.rst
@@ -13,10 +13,6 @@ The name of the control script is the the name of the part in buildout.
 By default various runtime and log information will be stored inside the var/
 directory.
 
-*Note: This recipe is not intended to setup a Zope 2 WSGI based instance and
-will not work for this use-case. There's no special recipe required to setup
-WSGI any longer and you can use simple template recipes instead.*
-
 You can use it with a part like this::
 
   [instance]
@@ -80,6 +76,10 @@ initialization
    (Buildout < 1.5). This is very limited. In particular, be aware that leading
    whitespace is stripped from the code given. *added in version 4.2.14*
 
+wsgi
+   Use ``wsgi = on`` in a part to create a Python script that can be used as an
+   interface for a WSGI server.
+
 Theme resources
 ---------------
 
@@ -371,6 +371,10 @@ demo-blob-storage
   used with the default memory-based demo storage (in this case you
   might want to use a temporary directory).
 
+storage-wrapper
+  Template for arbitrary configuration to be wrapped around the main storage.
+  %s will be replaced with the existing storage configuration.
+
 effective-user
   The name of the effective user for the Zope process. Defaults to not setting
   an effective user.
diff --git a/buildout.cfg b/buildout.cfg
index 25b163b..62f2695 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -1,9 +1,15 @@
 [buildout]
-extends = https://raw.githubusercontent.com/zopefoundation/Zope/4.0a6/versions-prod.cfg
+extends = http://dist.plone.org/versions/zope-2-13-24-versions.cfg
 versions = versions
 develop = .
 parts = test
 
+[versions]
+setuptools = 33.1.1
+zc.buildout = 2.5.3
+transaction = 2.0.3
+zc.recipe.egg = 2.0.3
+
 [test]
 recipe = zc.recipe.testrunner
 eggs = plone.recipe.zope2instance
diff --git a/setup.cfg b/setup.cfg
new file mode 100644
index 0000000..37fb534
--- /dev/null
+++ b/setup.cfg
@@ -0,0 +1,11 @@
+[check-manifest]
+ignore =
+    *.cfg
+    bootstrap.py
+
+# When Python 2-3 compatible:
+# [bdist_wheel]
+# universal = 1
+
+[zest.releaser]
+create-wheel = yes
diff --git a/setup.py b/setup.py
index b437158..186aa32 100644
--- a/setup.py
+++ b/setup.py
@@ -1,7 +1,10 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
+
 
 name = "plone.recipe.zope2instance"
-version = '4.3.0.dev0'
+version = '5.0.dev0'
 
 setup(
     name=name,
@@ -20,6 +23,7 @@
         "Framework :: Plone",
         "Framework :: Plone :: 4.3",
         "Framework :: Plone :: 5.0",
+        "Framework :: Plone :: 5.1",
         "Framework :: Zope2",
         "Programming Language :: Python",
         "Programming Language :: Python :: 2",
@@ -39,7 +43,7 @@
         'mailinglogger',
         'zc.recipe.egg',
         'Zope2 >= 2.12.1',
-        'ZODB3 >= 3.9',
+        'ZODB >= 5.1.1',
     ],
     zip_safe=False,
     entry_points={'zc.buildout': ['default = %s:Recipe' % name]},
diff --git a/src/plone/__init__.py b/src/plone/__init__.py
index de40ea7..68c04af 100644
--- a/src/plone/__init__.py
+++ b/src/plone/__init__.py
@@ -1 +1,2 @@
+# -*- coding: utf-8 -*-
 __import__('pkg_resources').declare_namespace(__name__)
diff --git a/src/plone/recipe/__init__.py b/src/plone/recipe/__init__.py
index de40ea7..68c04af 100644
--- a/src/plone/recipe/__init__.py
+++ b/src/plone/recipe/__init__.py
@@ -1 +1,2 @@
+# -*- coding: utf-8 -*-
 __import__('pkg_resources').declare_namespace(__name__)
diff --git a/src/plone/recipe/zope2instance/__init__.py b/src/plone/recipe/zope2instance/__init__.py
index 90fbdb3..33fc6aa 100644
--- a/src/plone/recipe/zope2instance/__init__.py
+++ b/src/plone/recipe/zope2instance/__init__.py
@@ -77,6 +77,7 @@ def __init__(self, buildout, name, options):
             buildout['buildout'].get('include-site-packages', 'false')
             ) not in ('off', 'disable', 'false')
 
+        self.wsgi = options.get('wsgi') in ('waitress', 'on')
         # Get Scripts' attributes
         return Scripts.__init__(self, buildout, name, options)
 
@@ -541,10 +542,12 @@ def is_rs_option(name):
             else:
                 storage_snippet = demo_storage_template % storage_snippet
 
+        if options.get('storage-wrapper'):
+            storage_snippet = indent(options['storage-wrapper'] % storage_snippet, 4)
+
         zodb_tmp_storage = options.get('zodb-temporary-storage',
                                        zodb_temporary_storage_template)
-
-        template = zope_conf_template
+        template = wsgi_conf_template if self.wsgi else zope_conf_template
 
         pid_file = options.get(
             'pid-file',
@@ -610,28 +613,44 @@ def install_scripts(self):
         # The instance control script
         zope_conf = os.path.join(location, 'etc', 'zope.conf')
         zope_conf_path = options.get('zope-conf', zope_conf)
+        program_name = 'interpreter'
+        program_path = os.path.join(location, 'bin', program_name)
 
         zopectl_umask = options.get('zopectl-umask', '')
 
         extra_paths = options.get('extra-paths', '').split()
         requirements, ws = self.egg.working_set(['plone.recipe.zope2instance'])
-        reqs = [(self.options.get('control-script', self.name),
-                 'plone.recipe.zope2instance.ctl', 'main')]
+        reqs = [self.options.get('control-script', self.name)]
+        if self.wsgi:
+            reqs.extend(['plone.recipe.zope2instance.wsgi', 'waitress_main'])
+            options['initialization'] = wsgi_initialization
+        else:
+            reqs.extend(['plone.recipe.zope2instance.ctl', 'main'])
+        reqs = [tuple(reqs)]
 
         if options.get('relative-paths'):
-            class zope_conf_path(str):
+            class relative_path_str(str):
                 def __repr__(self):
                     return str(self)
 
-            zope_conf_path = zope_conf_path(
-                        zc.buildout.easy_install._relativitize(
-                            zope_conf,
-                            options['buildout-directory'] + os.sep,
-                            self._relative_paths
-                        )
+            zope_conf_path = relative_path_str(
+                zc.buildout.easy_install._relativitize(
+                    zope_conf,
+                    options['buildout-directory'] + os.sep,
+                    self._relative_paths
+                    )
+                )
+            program_path = relative_path_str(
+                zc.buildout.easy_install._relativitize(
+                    program_path,
+                    options['buildout-directory'] + os.sep,
+                    self._relative_paths
                     )
+                )
 
-        arguments = ["-C", zope_conf_path]
+        options['zope-conf'] = zope_conf_path
+        arguments = ["-C", zope_conf_path, '-p', program_path] \
+            if not self.wsgi else []
         if zopectl_umask:
             arguments.extend(["--umask", int(zopectl_umask, 8)])
         script_arguments = ('\n        ' + repr(arguments) +
@@ -640,9 +659,10 @@ def __repr__(self):
         generated = self._install_scripts(
             options['bin-directory'], ws, reqs=reqs, extra_paths=extra_paths,
             script_arguments=script_arguments)
-        generated.extend(self._install_scripts(
-            os.path.join(options['location'], 'bin'), ws,
-            interpreter='interpreter', extra_paths=extra_paths))
+        if not self.wsgi:
+            generated.extend(self._install_scripts(
+                os.path.join(options['location'], 'bin'), ws,
+                interpreter=program_name, extra_paths=extra_paths))
         return generated
 
     def _install_scripts(self, dest, working_set, reqs=(), interpreter=None,
@@ -671,7 +691,7 @@ def _install_scripts(self, dest, working_set, reqs=(), interpreter=None,
                 working_set=working_set,
                 executable=options['executable'],
                 extra_paths=extra_paths,
-                initialization=options['initialization'],
+                initialization=options['initialization'] % options,
                 arguments=script_arguments,
                 interpreter=interpreter,
                 relative_paths=self._relative_paths,)
@@ -1037,6 +1057,38 @@ def render_file_storage(self, file_storage, blob_storage,
 %(zope_conf_additional)s
 """
 
+wsgi_conf_template = """\
+%(imports_lines)s
+%%define INSTANCEHOME %(instance_home)s
+instancehome $INSTANCEHOME
+%%define CLIENTHOME %(client_home)s
+clienthome $CLIENTHOME
+%(paths_lines)s
+%(products_lines)s
+debug-mode %(debug_mode)s
+security-policy-implementation %(security_implementation)s
+verbose-security %(verbose_security)s
+%(default_zpublisher_encoding)s
+%(port_base)s
+%(effective_user)s
+%(environment_vars)s
+%(deprecation_warnings)s
+
+%(mailinglogger_import)s
+
+<zodb_db main>
+    # Main database
+    %(zodb_cache_size)s
+    %(zodb_cache_size_bytes)s
+%(storage_snippet)s
+    mount-point /
+</zodb_db>
+
+%(python_check_interval)s
+
+%(zope_conf_additional)s
+"""
+
 event_log_template = """\
 <eventlog>
   %(mailinglogger_config)s
@@ -1075,3 +1127,9 @@ def render_file_storage(self, file_storage, blob_storage,
     %s
 </configure>
 """
+
+wsgi_initialization = """\
+from Zope2.Startup.run import make_wsgi_app
+wsgiapp = make_wsgi_app({}, '%(zope-conf)s')
+def application(*args, **kwargs):return wsgiapp(*args, **kwargs)
+"""
diff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py
index ea49f47..0420bda 100644
--- a/src/plone/recipe/zope2instance/ctl.py
+++ b/src/plone/recipe/zope2instance/ctl.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 ##############################################################################
 #
 # Copyright (c) 2006-2007 Zope Corporation and Contributors.
@@ -32,7 +33,7 @@
 import sys
 from pkg_resources import iter_entry_points
 
-from Zope2.Startup import zopectl
+from ZServer.Zope2.Startup import zopectl
 
 if zopectl.WIN:
     import traceback
@@ -99,8 +100,9 @@ def _get_service_status(self):
             name = self._get_service_name()
             try:
                 status = win32serviceutil.QueryServiceStatus(name)[1]
-            except pywintypes.error as err:
-                # (1060, 'GetServiceKeyName', 'The specified service does not exist as an installed service.')
+            except pywintypes.error, err:
+                # (1060, 'GetServiceKeyName', 'The specified service does not
+                # exist as an installed service.')
                 if err[0] == 1060:
                     return None
                 else:
@@ -149,7 +151,8 @@ def do_install(self, arg):
                 print('ERROR: Zope is already installed as a Windows service.')
                 return
 
-            # TODO: Are return values from do_ methods are really taken care of?
+            # TODO:
+            # Are return values from do_ methods are really taken care of?
             # http://docs.python.org/library/cmd.html: "The return value is a
             # flag indicating whether interpretation of commands
             # by the interpreter should stop."
@@ -182,10 +185,14 @@ def do_install(self, arg):
                 pos = instance_script.rfind(script_suffix)
                 instance_exe = instance_script[:pos] + '.exe'
 
-                self._set_winreg_key('command',
-                             '"%s" console' % instance_exe)
-                self._set_winreg_key('pid_filename',
-                             self.options.configroot.pid_filename)
+                self._set_winreg_key(
+                    'command',
+                    '"%s" console' % instance_exe
+                )
+                self._set_winreg_key(
+                    'pid_filename',
+                    self.options.configroot.pid_filename
+                )
 
                 print('Installed Zope as Windows Service "{}".'.format(name))
 
@@ -196,10 +203,11 @@ def do_install(self, arg):
             return ret_code
 
         def help_install(self):
-            print("""\
-install -- Install Zope as a Windows service that must be manually started.
-install auto -- Install Zope as a Windows service that starts at system startup.\
-""")
+            print 'install -- Install Zope as a Windows service that must be '\
+                  'manually started.'
+            print 'install auto -- Install Zope as a Windows service that '\
+                  'starts at system startup.'
+
         def do_start(self, arg):
 
             if not shell.IsUserAnAdmin():
@@ -273,8 +281,9 @@ def do_remove(self, arg):
             if status is None:
                 print('ERROR: Zope is not installed as a Windows service.')
                 return
-            elif not status is win32service.SERVICE_STOPPED:
-                print('ERROR: Please stop the Windows service before removing it.')
+            elif status is not win32service.SERVICE_STOPPED:
+                print 'ERROR: Please stop the Windows service before '\
+                      'removing it.'
                 return
 
             ret_code = 0
@@ -288,7 +297,8 @@ def do_remove(self, arg):
 
             return ret_code
 
-        # NOTE: do not rename! called also on windows by non-windows "do_" methods
+        # NOTE: do not rename! called also on windows by non-windows
+        # "do_" methods
         def get_status(self):
             """This method only has side effects, despite its name:
 
@@ -300,7 +310,8 @@ def get_status(self):
 
             """
             zopectl.ZopeCmd.get_status(self)
-            # override value set by zopectl.ZopeCmd.get_status() (always -1 or 0)
+            # override value set by zopectl.ZopeCmd.get_status()
+            # (always -1 or 0)
             self.zd_pid = self._get_pid_from_pidfile()
 
             if self.zd_pid > 0:
@@ -327,9 +338,9 @@ def do_status(self, arg=''):
             # TODO: what about "self.zd_up"?
 
         def help_status(self):
-            print("""\
-status -- Print status of the Windows service.
-status -l -- Print status of the Windows service, and raw status output.""")
+            print 'status -- Print status of the Windows service.'
+            print 'status -l -- Print status of the Windows service, '\
+                  'and raw status output.'
 
         def help_EOF(self):
             print('To quit, type CTRL+Z or use the quit command.')
@@ -341,9 +352,10 @@ def do_start(self, arg):
             self.get_status()
             if not self.zd_up:
                 args = [
-                    self.options.python, self.options.interpreter,
+                    self.options.python,
+                    self.options.interpreter,
                     self.options.zdrun,
-                    ]
+                ]
                 args += self._get_override("-S", "schemafile")
                 args += self._get_override("-C", "configfile")
                 args += self._get_override("-b", "backofflimit")
@@ -354,8 +366,10 @@ def do_start(self, arg):
                 if self.options.umask:
                     args += self._get_override("-m", "umask",
                                                oct(self.options.umask))
-                args += self._get_override("-x", "exitcodes",
-                    ",".join(map(str, self.options.exitcodes)))
+                args += self._get_override(
+                    "-x", "exitcodes",
+                    ",".join(map(str, self.options.exitcodes))
+                )
                 args += self._get_override("-z", "directory")
 
                 args.extend(self.options.program)
@@ -373,8 +387,14 @@ def do_start(self, arg):
                 print('daemon process already running; pid={}'.format(
                         self.zd_pid))
                 return
-            self.awhile(lambda: self.zd_pid,
-                        "daemon process started, pid=%(zd_pid)d")
+
+            def cond(n=0):
+                return self.zd_pid
+
+            self.awhile(
+                cond,
+                'daemon process started, pid=%(zd_pid)d'
+            )
 
     def environment(self):
         configroot = self.options.configroot
@@ -393,11 +413,16 @@ def get_startup_cmd(self, python, more, pyflags=""):
         # will act as escapes.  Use r'' instead.
         # Also, don't forget that 'python'
         # may have spaces and needs to be quoted.
-        cmdline = ('"%s" %s "%s" %s -c "from Zope2 import configure; '
-                   'configure(r\'%s\'); '
-                   'import Zope2; app=Zope2.app(); '
-                   % (python, pyflags,
-                      self.options.interpreter, pyflags, self.options.configfile))
+        cmdline = (
+            '"%s" %s "%s" %s -c "from Zope2 import configure; '
+            'configure(r\'%s\'); '
+            'import Zope2; app=Zope2.app(); ' % (
+                python, pyflags,
+                self.options.interpreter,
+                pyflags,
+                self.options.configfile
+            )
+        )
 
         if not self.options.no_request:
             cmdline += (
@@ -443,13 +468,13 @@ def get_startup_cmd(self, python, more, pyflags=""):
 
     def help_startup_command(self):
         print("""\
-    Also sets up a REQUEST, logs in the 
-    AccessControl.SpecialUsers.system user, and may traverse 
-    to an object, such as a CMF portal.  This environment set 
+    Also sets up a REQUEST, logs in the
+    AccessControl.SpecialUsers.system user, and may traverse
+    to an object, such as a CMF portal.  This environment set
     up is controlled with following options:
     -R/--no-request -- do not set up a REQUEST.
     -L/--no-login -- do not login the system user.
-    -O/--object-path <path> -- Traverse to <path> from the app 
+    -O/--object-path <path> -- Traverse to <path> from the app
                                and make available as `obj`.
     Example usage: bin/instance -RLOPlone/front-page debug""")
 
@@ -506,12 +531,16 @@ def help_console(self):
 
     def do_debug(self, arg):
         # `-c` disables the PYTHONSTARTUP feature; load it explicitly
-        interactive_startup = ("import os;"
+        interactive_startup = (
+            "import os;"
             "os.path.exists(os.environ.get('PYTHONSTARTUP', '')) "
-            "and execfile(os.environ['PYTHONSTARTUP']); del os;")
-        cmdline = self.get_startup_cmd(self.options.python,
-                                       interactive_startup,
-                                       pyflags = '-i', )
+            "and execfile(os.environ['PYTHONSTARTUP']); del os;"
+        )
+        cmdline = self.get_startup_cmd(
+            self.options.python,
+            interactive_startup,
+            pyflags='-i',
+        )
         print ('Starting debugger (the name "app" is bound to the top-level '
                'Zope object)')
         os.system(cmdline)
@@ -524,8 +553,10 @@ def do_foreground(self, arg, debug=True):
         self.get_status()
         pid = self.zd_pid
         if pid:
-            print('The program seems already to be running. If you believe not, '
-                  'check for dangling .pid and .lock files in var/.')
+            print(
+                'The program seems already to be running. If you believe not, '
+                'check for dangling .pid and .lock files in var/.'
+            )
             return
 
         import subprocess
@@ -571,7 +602,8 @@ def do_test(self, arg):
 
 
 def main(args=None):
-    """ Customized entry point for launching Zope without forking other processes """
+    """Customized entry point for launching Zope without forking other processes
+    """
 
     options = zopectl.ZopeCtlOptions()
     options.add(name="no_request", short="R", long="no-request", flag=1)
@@ -610,7 +642,8 @@ def main(args=None):
     # The exit status is used for "Restart" on the ZMI Control Panel or
     # @@maintenance-controlpanel (see http://dev.plone.org/plone/ticket/10906).
     #
-    # Arguably we should return the exit status and let the wrapper script exit.
+    # Arguably we should return the exit status and let the wrapper script
+    # exit.
     # But it's generated by setuptools, and doesn't have that functionality.
 
     if options.args:
diff --git a/src/plone/recipe/zope2instance/make.py b/src/plone/recipe/zope2instance/make.py
index ae1b43c..40091ce 100644
--- a/src/plone/recipe/zope2instance/make.py
+++ b/src/plone/recipe/zope2instance/make.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from __future__ import print_function
 from binascii import b2a_base64
 from hashlib import sha1
diff --git a/src/plone/recipe/zope2instance/tests/test_docs.py b/src/plone/recipe/zope2instance/tests/test_docs.py
index a1a77e1..6cf1a57 100644
--- a/src/plone/recipe/zope2instance/tests/test_docs.py
+++ b/src/plone/recipe/zope2instance/tests/test_docs.py
@@ -19,6 +19,7 @@ def setUp(test):
     install('ZODB3', test)
     install_dependencies(pkg_resources.working_set.require('ZEO'), test)
     install_dependencies(pkg_resources.working_set.require('Zope2'), test)
+    install_dependencies(pkg_resources.working_set.require('ZODB'), test)
 
 
 def install_dependencies(dependencies, test):
@@ -39,10 +40,15 @@ def tearDown(test):
 
 def test_suite():
     suite = []
-    flags = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE |
+    flags = (
+        doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE |
         doctest.REPORT_NDIFF)
 
-    suite.append(doctest.DocFileSuite('zope2instance.txt', optionflags=flags,
-                 setUp=setUp, tearDown=tearDown))
+    suite.append(doctest.DocFileSuite(
+        'zope2instance.txt',
+        'wsgi.txt',
+        optionflags=flags,
+        setUp=setUp,
+        tearDown=tearDown))
 
     return unittest.TestSuite(suite)
diff --git a/src/plone/recipe/zope2instance/tests/wsgi.txt b/src/plone/recipe/zope2instance/tests/wsgi.txt
new file mode 100644
index 0000000..24249ec
--- /dev/null
+++ b/src/plone/recipe/zope2instance/tests/wsgi.txt
@@ -0,0 +1,61 @@
+=====================
+Test wsgi.py creation
+=====================
+
+
+    >>> from zc.buildout.testing import *
+    >>> from os.path import join
+    >>> import sys, os
+    >>> options = globals()
+
+Let's create a minimum buildout that uses the current
+plone.recipe.zope2instance::
+
+    >>> write('buildout.cfg',
+    ... '''
+    ... [buildout]
+    ... parts = wsgi.py
+    ... find-links = %(sample_buildout)s/eggs
+    ...
+    ... [wsgi.py]
+    ... recipe = plone.recipe.zope2instance
+    ... eggs =
+    ... user = me:me
+    ... wsgi = on
+    ... ''' % options)
+
+Let's run it::
+
+    >>> print system(join('bin', 'buildout')),
+    Installing wsgi.py.
+    Generated script '...wsgi.py'.
+    ...
+
+We should have a wsgi.py part, with a basic zope.conf::
+
+    >>> instance = os.path.join(sample_buildout, 'parts', 'wsgi.py')
+    >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
+    >>> zope_conf = zope_conf.replace('\\', '/')
+    >>> print zope_conf
+    %define INSTANCEHOME .../sample-buildout/parts/wsgi.py
+    instancehome $INSTANCEHOME
+    %define CLIENTHOME .../sample-buildout/var/wsgi.py
+    clienthome $CLIENTHOME
+    debug-mode off
+    security-policy-implementation C
+    verbose-security off
+    default-zpublisher-encoding utf-8
+    <zodb_db main>
+        # Main database
+        cache-size 30000
+        # Blob-enabled FileStorage database
+        <blobstorage>
+           blob-dir .../sample-buildout/var/blobstorage
+           # FileStorage database
+           <filestorage>
+             path .../sample-buildout/var/filestorage/Data.fs
+           </filestorage>
+        </blobstorage>
+        mount-point /
+    </zodb_db>
+    python-check-interval 1000
diff --git a/src/plone/recipe/zope2instance/tests/zope2instance.txt b/src/plone/recipe/zope2instance/tests/zope2instance.txt
index 5eb1346..51c9fd2 100644
--- a/src/plone/recipe/zope2instance/tests/zope2instance.txt
+++ b/src/plone/recipe/zope2instance/tests/zope2instance.txt
@@ -1,4 +1,4 @@
-=========================
+==========================
 plone.recipe.zope2instance
 ==========================
 
@@ -1315,6 +1315,57 @@ We should have a zope instance, with a basic zope.conf::
     ...
     <BLANKLINE>
 
+Custom storage wrapper
+======================
+
+To add custom configuration around the storage,
+use the `storage-wrapper` option::
+
+    >>> write('buildout.cfg',
+    ... '''
+    ... [buildout]
+    ... parts = instance
+    ... find-links = %(sample_buildout)s/eggs
+    ...
+    ... [instance]
+    ... recipe = plone.recipe.zope2instance
+    ... eggs =
+    ... user = me:me
+    ... storage-wrapper =
+    ...   <foo>
+    ...   %%s
+    ...   </foo>
+    ... ''' % options)
+
+Let's run it::
+
+    >>> print system(join('bin', 'buildout')),
+    Uninstalling instance.
+    Installing instance.
+    Generated script '...instance'.
+    Generated interpreter '.../parts/instance/bin/interpreter'.
+    ...
+
+Now zope.conf should include the custom storage wrapper::
+
+    >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
+    >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
+    >>> zope_conf = zope_conf.replace('\\', '/')
+    >>> print zope_conf
+    %define INSTANCEHOME .../sample-buildout/parts/instance
+    ...
+    <zodb_db main>
+        ...
+        <foo>
+            # Blob-enabled FileStorage database
+            ...
+        </foo>
+        ...
+    </zodb_db>
+    ...
+    <BLANKLINE>
+
+
 Custom Event log
 ================
 
@@ -1879,7 +1930,7 @@ We should have a zope instance script with the custom config file::
     >>> if WINDOWS:
     ...     instance_path += '-script.py'
     >>> open(instance_path).read()
-    "...plone.recipe.zope2instance.ctl.main(...['-C', '/some/path/my.conf']..."
+    "...plone.recipe.zope2instance.ctl.main(...['-C', '/some/path/my.conf', '-p', '.../bin/interpreter']..."
 
 Custom Zope Conf Imports
 ========================
diff --git a/src/plone/recipe/zope2instance/wsgi.py b/src/plone/recipe/zope2instance/wsgi.py
new file mode 100644
index 0000000..95f9ebe
--- /dev/null
+++ b/src/plone/recipe/zope2instance/wsgi.py
@@ -0,0 +1,19 @@
+from paste.deploy.loadwsgi import ConfigLoader, SERVER, APP
+from Zope2.Startup.run import make_wsgi_app
+
+
+def waitress_main(args=None):
+    """
+    Configure + start Plone behind waitress from the given PasteDeploy
+    configuration
+    Waitress - unlike uwsgi - expects us to do the
+    PasteDeploy stuff on our own.
+    """
+    ini_filename = args[-1]
+    config_loader = ConfigLoader(ini_filename)
+    server_config = config_loader.get_context(SERVER)
+    serve = server_config.create()
+    app_config = config_loader.get_context(APP)
+    zope_conf = app_config.local_conf['zope_conf']
+    wsgiapp = make_wsgi_app(app_config.global_conf, zope_conf)
+    serve(wsgiapp)
diff --git a/zope4.cfg b/zope4.cfg
new file mode 100644
index 0000000..25b163b
--- /dev/null
+++ b/zope4.cfg
@@ -0,0 +1,9 @@
+[buildout]
+extends = https://raw.githubusercontent.com/zopefoundation/Zope/4.0a6/versions-prod.cfg
+versions = versions
+develop = .
+parts = test
+
+[test]
+recipe = zc.recipe.testrunner
+eggs = plone.recipe.zope2instance


Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2017-10-21T14:26:00+02:00
Author: tschorr (tschorr) <t_schorr@gmx.de>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/d27ba4815ab9c267aeda5796727293385a19243b

 use Zope 4

Files changed:
M buildout.cfg
D zope4.cfg

diff --git a/buildout.cfg b/buildout.cfg
index 62f2695..25b163b 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -1,15 +1,9 @@
 [buildout]
-extends = http://dist.plone.org/versions/zope-2-13-24-versions.cfg
+extends = https://raw.githubusercontent.com/zopefoundation/Zope/4.0a6/versions-prod.cfg
 versions = versions
 develop = .
 parts = test
 
-[versions]
-setuptools = 33.1.1
-zc.buildout = 2.5.3
-transaction = 2.0.3
-zc.recipe.egg = 2.0.3
-
 [test]
 recipe = zc.recipe.testrunner
 eggs = plone.recipe.zope2instance
diff --git a/zope4.cfg b/zope4.cfg
deleted file mode 100644
index 25b163b..0000000
--- a/zope4.cfg
+++ /dev/null
@@ -1,9 +0,0 @@
-[buildout]
-extends = https://raw.githubusercontent.com/zopefoundation/Zope/4.0a6/versions-prod.cfg
-versions = versions
-develop = .
-parts = test
-
-[test]
-recipe = zc.recipe.testrunner
-eggs = plone.recipe.zope2instance


Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2017-10-21T15:03:17+02:00
Author: tschorr (tschorr) <t_schorr@gmx.de>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/cadf7aba0ec40510bbbe51ebe687b7ab1a217371

require ZEO, don't install ZODB3

Files changed:
M setup.py
M src/plone/recipe/zope2instance/tests/test_docs.py

diff --git a/setup.py b/setup.py
index 186aa32..4889f5b 100644
--- a/setup.py
+++ b/setup.py
@@ -44,6 +44,7 @@
         'zc.recipe.egg',
         'Zope2 >= 2.12.1',
         'ZODB >= 5.1.1',
+        'ZEO',
     ],
     zip_safe=False,
     entry_points={'zc.buildout': ['default = %s:Recipe' % name]},
diff --git a/src/plone/recipe/zope2instance/tests/test_docs.py b/src/plone/recipe/zope2instance/tests/test_docs.py
index 6cf1a57..6a4d30c 100644
--- a/src/plone/recipe/zope2instance/tests/test_docs.py
+++ b/src/plone/recipe/zope2instance/tests/test_docs.py
@@ -16,7 +16,6 @@ def setUp(test):
     install_develop('plone.recipe.zope2instance', test)
     install('zc.recipe.egg', test)
     install('mailinglogger', test)
-    install('ZODB3', test)
     install_dependencies(pkg_resources.working_set.require('ZEO'), test)
     install_dependencies(pkg_resources.working_set.require('Zope2'), test)
     install_dependencies(pkg_resources.working_set.require('ZODB'), test)


Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2017-10-21T15:11:19+02:00
Author: tschorr (tschorr) <t_schorr@gmx.de>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/48a6915732d984b076443e1997ca84020a007554

do we need mailinglogger at all?

Files changed:
M src/plone/recipe/zope2instance/tests/test_docs.py

diff --git a/src/plone/recipe/zope2instance/tests/test_docs.py b/src/plone/recipe/zope2instance/tests/test_docs.py
index 6a4d30c..9abe0e4 100644
--- a/src/plone/recipe/zope2instance/tests/test_docs.py
+++ b/src/plone/recipe/zope2instance/tests/test_docs.py
@@ -15,7 +15,6 @@ def setUp(test):
     buildoutSetUp(test)
     install_develop('plone.recipe.zope2instance', test)
     install('zc.recipe.egg', test)
-    install('mailinglogger', test)
     install_dependencies(pkg_resources.working_set.require('ZEO'), test)
     install_dependencies(pkg_resources.working_set.require('Zope2'), test)
     install_dependencies(pkg_resources.working_set.require('ZODB'), test)


Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2017-10-21T15:30:09+02:00
Author: tschorr (tschorr) <t_schorr@gmx.de>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/a0117386657db7cdc0ee90e9db38f42a0aa9d00b

mailinglogger not working in Python 3

Files changed:
M setup.py

diff --git a/setup.py b/setup.py
index 4889f5b..a87e127 100644
--- a/setup.py
+++ b/setup.py
@@ -40,7 +40,6 @@
     install_requires=[
         'zc.buildout',
         'setuptools',
-        'mailinglogger',
         'zc.recipe.egg',
         'Zope2 >= 2.12.1',
         'ZODB >= 5.1.1',


Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2017-10-21T16:08:30+02:00
Author: tschorr (tschorr) <t_schorr@gmx.de>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/c39a16a5ae2d22703ad723aa9c1d0524c4aa8c4a

suggest to install mailinglogger if needed

Files changed:
M README.rst

diff --git a/README.rst b/README.rst
index a94cdb9..7c827c1 100644
--- a/README.rst
+++ b/README.rst
@@ -251,6 +251,8 @@ mailinglogger
       subject [My domain error] [%(hostname)s] %(line)s
     </mailing-logger>
 
+  You will need to add `mailinglogger` to your buildout's egg section to make this work.
+
 z2-log
   The filename for the Z2 access log. Defaults to var/log/${partname}-Z2.log.
   Setting this value to 'disable' will make the <logger access> section to be omitted,


Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2017-10-21T16:46:40+02:00
Author: tschorr (tschorr) <t_schorr@gmx.de>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/540113bf06aeb7e5af75717535f3545a013fbf6d

use print()

Files changed:
M src/plone/recipe/zope2instance/tests/zope2instance.txt

diff --git a/src/plone/recipe/zope2instance/tests/zope2instance.txt b/src/plone/recipe/zope2instance/tests/zope2instance.txt
index 51c9fd2..8b073a0 100644
--- a/src/plone/recipe/zope2instance/tests/zope2instance.txt
+++ b/src/plone/recipe/zope2instance/tests/zope2instance.txt
@@ -9,6 +9,8 @@ works fine. It is based on zc.buildout testing module::
     >>> from zc.buildout.testing import *
     >>> from os.path import join
     >>> import sys, os
+    >>> if sys.version_info.major == '2':
+    ...     from __future__ import print_function
     >>> options = globals()
 
     >>> WINDOWS = sys.platform == 'win32'
@@ -30,7 +32,7 @@ plone.recipe.zope2instance::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Installing instance.
     Generated script '...instance'.
     Generated interpreter '.../parts/instance/bin/interpreter'.
@@ -41,7 +43,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     instancehome $INSTANCEHOME
     %define CLIENTHOME .../sample-buildout/var/instance
@@ -156,7 +158,7 @@ Let's start off by adding an FTP address::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -168,7 +170,7 @@ Our FTP server should be set up now::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <ftp-server>
@@ -194,7 +196,7 @@ Next we will add a WebDAV server::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -206,7 +208,7 @@ Our WebDAV server should be set up now::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <webdav-source-server>
@@ -233,7 +235,7 @@ Next we will add a WebDAV server with force-connection-close on::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -245,7 +247,7 @@ Our WebDAV server should be set up now::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <webdav-source-server>
@@ -276,7 +278,7 @@ To have a DemoStorage configuration, you can use demo-storage::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -288,7 +290,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -328,7 +330,7 @@ Verify that demostorage can be disable::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -340,7 +342,7 @@ We should have a zope instance, with a basic zope.conf without demostorage::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -381,7 +383,7 @@ changes::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -393,7 +395,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -442,7 +444,7 @@ You can add a blob storage to the demo-storage as well::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -454,7 +456,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
         <blobstorage base>
@@ -496,7 +498,7 @@ not supported by the in-memory demostorage)::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -508,7 +510,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -558,7 +560,7 @@ To have a ZlibStorage configuration, you can use zlib-storage::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -570,7 +572,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -619,7 +621,7 @@ can set the ``zlib-storage`` option to 'passive'::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -631,7 +633,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -683,7 +685,7 @@ To have a BeforeStorage configuration, you can use before-storage::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -695,7 +697,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -742,7 +744,7 @@ The before-storage option can be combined with a demo-storage::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -754,7 +756,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -808,7 +810,7 @@ To have a BlobStorage configuration, you can use blob-storage::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -820,7 +822,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -867,7 +869,7 @@ To have a RelStorage configuration, you can use rel-storage::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -879,7 +881,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -918,7 +920,7 @@ for the plone.recipe.zope2instance recipe.
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -930,7 +932,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -980,7 +982,7 @@ specified, they should get included in that section as well.
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -992,7 +994,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -1037,7 +1039,7 @@ Verify that demo-storage is correctly applied
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1049,7 +1051,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -1094,7 +1096,7 @@ Verify that blob-storage is correctly applied
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1106,7 +1108,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -1152,7 +1154,7 @@ before-storage::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1164,7 +1166,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -1222,7 +1224,7 @@ You can get specific zeo server address using `zeo-address`.
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1234,7 +1236,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -1277,7 +1279,7 @@ You can also set multiple zeo server addresses using `zeo-address`.
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1289,7 +1291,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -1339,7 +1341,7 @@ use the `storage-wrapper` option::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1351,7 +1353,7 @@ Now zope.conf should include the custom storage wrapper::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -1397,7 +1399,7 @@ to use `rotatezlogs`::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1409,7 +1411,7 @@ We should have a zope instance, with the custom event log::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <eventlog>
@@ -1455,7 +1457,7 @@ Mailing logger
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1467,7 +1469,7 @@ We should have a zope instance, with the mailing logger::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     %import mailinglogger
@@ -1517,7 +1519,7 @@ to use `rotatezlogs`::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1529,7 +1531,7 @@ We should have a zope instance, with the custom event log::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <logger access>
@@ -1567,7 +1569,7 @@ will be omitted::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1607,7 +1609,7 @@ will be omitted::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1657,7 +1659,7 @@ When this option is used the `zcml` option is ignored. Let's try it::
 
 Let's run the buildout::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1667,7 +1669,7 @@ Let's run the buildout::
 Now let's check that we have a zope instance, with the custom site.zcml::
 
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
-    >>> print open(os.path.join(instance, 'etc', 'site.zcml')).read()
+    >>> print(open(os.path.join(instance, 'etc', 'site.zcml')).read())
     <configure xmlns="http://namespaces.zope.org/zope"
                xmlns:five="http://namespaces.zope.org/five">
         <include package="Products.Five" />
@@ -1699,7 +1701,7 @@ between several servers::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1711,7 +1713,7 @@ Our environment variables should be set now::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <environment>
@@ -1739,7 +1741,7 @@ Now let's add several environment variables::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1773,7 +1775,7 @@ Several all on one line::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1810,7 +1812,7 @@ Check additional options to the HTTP server::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1821,7 +1823,7 @@ And check it::
 
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <http-server>
@@ -1855,7 +1857,7 @@ we don't error::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1879,7 +1881,7 @@ The recipe supports the generation of scripts with relative paths.
     ... eggs =
     ... user = me:me
     ... ''' % options)
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1917,7 +1919,7 @@ Custom Zope Conf
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1954,7 +1956,7 @@ define custom zope.conf sections using ZConfig API.
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1966,7 +1968,7 @@ We should have a zope instance, with custom imports::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %import mailinglogger
     %import eea.graylogger
     %define INSTANCEHOME .../sample-buildout/parts/instance
@@ -1994,7 +1996,7 @@ plone.app.theming resources directory.
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -2037,7 +2039,7 @@ plone.app.theming locales directory.
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -2075,12 +2077,12 @@ code to the initialization process.
     ... eggs =
     ... user = me:me
     ... initialization =
-    ...     print 'Initialization complete!'
+    ...     print('Initialization complete!')
     ... ''' % options)
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -2091,6 +2093,6 @@ We should see the given initialization commands included in the instance
 script::
 
     >>> instance = open(os.path.join(sample_buildout, 'bin', 'instance')).read()
-    >>> "print 'Initialization complete!'" in instance
+    >>> "print('Initialization complete!')" in instance
     True
 


Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2017-10-21T16:53:00+02:00
Author: tschorr (tschorr) <t_schorr@gmx.de>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/c5fd7a60ba5c9d688454c65bfe5ab0503c882287

move __future__ import to top

Files changed:
M src/plone/recipe/zope2instance/tests/zope2instance.txt

diff --git a/src/plone/recipe/zope2instance/tests/zope2instance.txt b/src/plone/recipe/zope2instance/tests/zope2instance.txt
index 8b073a0..9f4b2df 100644
--- a/src/plone/recipe/zope2instance/tests/zope2instance.txt
+++ b/src/plone/recipe/zope2instance/tests/zope2instance.txt
@@ -6,11 +6,11 @@ plone.recipe.zope2instance
 This is the doctest for plone.recipe.zope2instance. It ensures the template
 works fine. It is based on zc.buildout testing module::
 
+    >>> from __future__ import print_function
     >>> from zc.buildout.testing import *
     >>> from os.path import join
     >>> import sys, os
-    >>> if sys.version_info.major == '2':
-    ...     from __future__ import print_function
+
     >>> options = globals()
 
     >>> WINDOWS = sys.platform == 'win32'


Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2017-10-21T16:53:48+02:00
Author: tschorr (tschorr) <t_schorr@gmx.de>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/e9ad619ebc95dd57e77a49a377a11710e10a4729

whitespace

Files changed:
M src/plone/recipe/zope2instance/tests/zope2instance.txt

diff --git a/src/plone/recipe/zope2instance/tests/zope2instance.txt b/src/plone/recipe/zope2instance/tests/zope2instance.txt
index 9f4b2df..9facd10 100644
--- a/src/plone/recipe/zope2instance/tests/zope2instance.txt
+++ b/src/plone/recipe/zope2instance/tests/zope2instance.txt
@@ -10,9 +10,7 @@ works fine. It is based on zc.buildout testing module::
     >>> from zc.buildout.testing import *
     >>> from os.path import join
     >>> import sys, os
-
     >>> options = globals()
-
     >>> WINDOWS = sys.platform == 'win32'
 
 Let's create a minimum buildout that uses the current


Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2017-10-21T17:20:34+02:00
Author: tschorr (tschorr) <t_schorr@gmx.de>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/00d7d431642ad89b15029246889c6a3db8371131

print function for wsgi tests, new octal number format

Files changed:
M src/plone/recipe/zope2instance/tests/wsgi.txt
M src/plone/recipe/zope2instance/tests/zope2instance.txt

diff --git a/src/plone/recipe/zope2instance/tests/wsgi.txt b/src/plone/recipe/zope2instance/tests/wsgi.txt
index 24249ec..821f6cf 100644
--- a/src/plone/recipe/zope2instance/tests/wsgi.txt
+++ b/src/plone/recipe/zope2instance/tests/wsgi.txt
@@ -3,6 +3,7 @@ Test wsgi.py creation
 =====================
 
 
+    >>> from __future__ import print_function
     >>> from zc.buildout.testing import *
     >>> from os.path import join
     >>> import sys, os
@@ -26,7 +27,7 @@ plone.recipe.zope2instance::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Installing wsgi.py.
     Generated script '...wsgi.py'.
     ...
@@ -36,7 +37,7 @@ We should have a wsgi.py part, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'wsgi.py')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/wsgi.py
     instancehome $INSTANCEHOME
     %define CLIENTHOME .../sample-buildout/var/wsgi.py
diff --git a/src/plone/recipe/zope2instance/tests/zope2instance.txt b/src/plone/recipe/zope2instance/tests/zope2instance.txt
index 9facd10..e29684b 100644
--- a/src/plone/recipe/zope2instance/tests/zope2instance.txt
+++ b/src/plone/recipe/zope2instance/tests/zope2instance.txt
@@ -132,7 +132,7 @@ The blobstorage directory should only be readable by the current user,
 otherwise you get a warning when the zope instance starts up.  The
 (POSIX) path mode bits should be 0700.
 
-    >>> (os.stat(os.path.join('var', 'blobstorage')).st_mode & 077) == 0
+    >>> (os.stat(os.path.join('var', 'blobstorage')).st_mode & 0o077) == 0
     True
 
 


Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2017-10-21T17:44:34+02:00
Author: tschorr (tschorr) <t_schorr@gmx.de>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/023fe5098babac8aa9134f6327b4af031eafdfc7

no iteritems in Python 3

Files changed:
M src/plone/recipe/zope2instance/__init__.py

diff --git a/src/plone/recipe/zope2instance/__init__.py b/src/plone/recipe/zope2instance/__init__.py
index 33fc6aa..a5d9329 100644
--- a/src/plone/recipe/zope2instance/__init__.py
+++ b/src/plone/recipe/zope2instance/__init__.py
@@ -400,10 +400,10 @@ def is_rs_option(name):
             opts = dict(
                 type=type_,
                 db_opts='\n'.join(' ' * 12 + ' '.join((k, v))
-                                  for k, v in rel_storage.iteritems()
+                                  for k, v in rel_storage.items()
                                   if not is_rs_option(k)),
                 rs_opts='\n'.join(' ' * 8 + ' '.join((k, v))
-                                  for k, v in rel_storage.iteritems()
+                                  for k, v in rel_storage.items()
                                   if is_rs_option(k)),
                 )
             file_storage_snippet = rel_storage_template % opts


Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2017-10-22T11:18:37+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/1da5acd2e1693720bf04589c5ab412d78600d81b

isort imports according to plone rules

Files changed:
M src/plone/recipe/zope2instance/__init__.py
M src/plone/recipe/zope2instance/ctl.py
M src/plone/recipe/zope2instance/make.py
M src/plone/recipe/zope2instance/tests/test_docs.py
M src/plone/recipe/zope2instance/wsgi.py

diff --git a/src/plone/recipe/zope2instance/__init__.py b/src/plone/recipe/zope2instance/__init__.py
index a5d9329..c2dd072 100644
--- a/src/plone/recipe/zope2instance/__init__.py
+++ b/src/plone/recipe/zope2instance/__init__.py
@@ -13,18 +13,19 @@
 #
 ##############################################################################
 
+from plone.recipe.zope2instance import make
+from zc.recipe.egg.egg import Egg
+from zc.recipe.egg.egg import Scripts
+
 import os
 import os.path
+import pkg_resources
 import re
 import shutil
 import sys
-
-import pkg_resources
 import zc.buildout
 import zc.buildout.easy_install
 
-from plone.recipe.zope2instance import make
-from zc.recipe.egg.egg import Egg, Scripts
 
 IS_WIN = sys.platform[:3].lower() == 'win'
 
diff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py
index 0420bda..1909bbf 100644
--- a/src/plone/recipe/zope2instance/ctl.py
+++ b/src/plone/recipe/zope2instance/ctl.py
@@ -27,13 +27,14 @@
 available actions.
 """
 
+from pkg_resources import iter_entry_points
+from ZServer.Zope2.Startup import zopectl
+
 import csv
 import os
 import os.path
 import sys
-from pkg_resources import iter_entry_points
 
-from ZServer.Zope2.Startup import zopectl
 
 if zopectl.WIN:
     import traceback
diff --git a/src/plone/recipe/zope2instance/make.py b/src/plone/recipe/zope2instance/make.py
index 40091ce..c080b61 100644
--- a/src/plone/recipe/zope2instance/make.py
+++ b/src/plone/recipe/zope2instance/make.py
@@ -2,11 +2,13 @@
 from __future__ import print_function
 from binascii import b2a_base64
 from hashlib import sha1
+
 import os
 import os.path
 import shutil
 import sys
 
+
 VCS_DIRS = [os.path.normcase('CVS'),
             os.path.normcase('.svn'),
             os.path.normcase('.git')]
diff --git a/src/plone/recipe/zope2instance/tests/test_docs.py b/src/plone/recipe/zope2instance/tests/test_docs.py
index 9abe0e4..f6a50fd 100644
--- a/src/plone/recipe/zope2instance/tests/test_docs.py
+++ b/src/plone/recipe/zope2instance/tests/test_docs.py
@@ -1,15 +1,15 @@
 # -*- coding: utf-8 -*-
 
-import doctest
-import unittest
-import shutil
-
-import pkg_resources
 from zc.buildout.testing import buildoutSetUp
 from zc.buildout.testing import buildoutTearDown
 from zc.buildout.testing import install
 from zc.buildout.testing import install_develop
 
+import doctest
+import pkg_resources
+import shutil
+import unittest
+
 
 def setUp(test):
     buildoutSetUp(test)
diff --git a/src/plone/recipe/zope2instance/wsgi.py b/src/plone/recipe/zope2instance/wsgi.py
index 95f9ebe..20783f7 100644
--- a/src/plone/recipe/zope2instance/wsgi.py
+++ b/src/plone/recipe/zope2instance/wsgi.py
@@ -1,4 +1,6 @@
-from paste.deploy.loadwsgi import ConfigLoader, SERVER, APP
+from paste.deploy.loadwsgi import APP
+from paste.deploy.loadwsgi import ConfigLoader
+from paste.deploy.loadwsgi import SERVER
 from Zope2.Startup.run import make_wsgi_app
 
 


Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2017-10-22T11:35:42+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/4a1fa80c0bb1f049e11b485cf77643bc7504c853

Merge pull request #25 from plone/py3

Python 3 compatibility.

Files changed:
M .travis.yml
M CHANGES.rst
M README.rst
M bootstrap.py
M buildout.cfg
M setup.py
M src/plone/recipe/zope2instance/__init__.py
M src/plone/recipe/zope2instance/ctl.py
M src/plone/recipe/zope2instance/make.py
M src/plone/recipe/zope2instance/tests/test_docs.py
M src/plone/recipe/zope2instance/tests/wsgi.txt
M src/plone/recipe/zope2instance/tests/zope2instance.txt
M src/plone/recipe/zope2instance/wsgi.py

diff --git a/.travis.yml b/.travis.yml
index 3f7c5e8..1f3db4b 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,6 +1,7 @@
 language: python
 python:
   - 2.7
+  - 3.5
 install:
   - pip install setuptools==33.1.1 zc.buildout==2.5.3
   - buildout bootstrap
diff --git a/CHANGES.rst b/CHANGES.rst
index 3e24ee6..893c770 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,14 +1,12 @@
 Changelog
 =========
 
-
-
 5.0.0 (unreleased)
 ------------------
 
 Breaking changes:
 
-- *add item here*
+- Python 3 compatibility.
 
 New features:
 
diff --git a/README.rst b/README.rst
index a94cdb9..7c827c1 100644
--- a/README.rst
+++ b/README.rst
@@ -251,6 +251,8 @@ mailinglogger
       subject [My domain error] [%(hostname)s] %(line)s
     </mailing-logger>
 
+  You will need to add `mailinglogger` to your buildout's egg section to make this work.
+
 z2-log
   The filename for the Z2 access log. Defaults to var/log/${partname}-Z2.log.
   Setting this value to 'disable' will make the <logger access> section to be omitted,
diff --git a/bootstrap.py b/bootstrap.py
index d5e8be1..1f59b21 100644
--- a/bootstrap.py
+++ b/bootstrap.py
@@ -18,75 +18,17 @@
 use the -c option to specify an alternate configuration file.
 """
 
-import os, shutil, sys, tempfile, urllib, urllib2, subprocess
+import os
+import shutil
+import sys
+import tempfile
+
 from optparse import OptionParser
 
-if sys.platform == 'win32':
-    def quote(c):
-        if ' ' in c:
-            return '"%s"' % c  # work around spawn lamosity on windows
-        else:
-            return c
-else:
-    quote = str
-
-# See zc.buildout.easy_install._has_broken_dash_S for motivation and comments.
-stdout, stderr = subprocess.Popen(
-    [sys.executable, '-Sc',
-     'try:\n'
-     '    import ConfigParser\n'
-     'except ImportError:\n'
-     '    print 1\n'
-     'else:\n'
-     '    print 0\n'],
-    stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
-has_broken_dash_S = bool(int(stdout.strip()))
-
-# In order to be more robust in the face of system Pythons, we want to
-# run without site-packages loaded.  This is somewhat tricky, in
-# particular because Python 2.6's distutils imports site, so starting
-# with the -S flag is not sufficient.  However, we'll start with that:
-if not has_broken_dash_S and 'site' in sys.modules:
-    # We will restart with python -S.
-    args = sys.argv[:]
-    args[0:0] = [sys.executable, '-S']
-    args = map(quote, args)
-    os.execv(sys.executable, args)
-# Now we are running with -S.  We'll get the clean sys.path, import site
-# because distutils will do it later, and then reset the path and clean
-# out any namespace packages from site-packages that might have been
-# loaded by .pth files.
-clean_path = sys.path[:]
-import site  # imported because of its side effects
-sys.path[:] = clean_path
-for k, v in sys.modules.items():
-    if k in ('setuptools', 'pkg_resources') or (
-        hasattr(v, '__path__') and
-        len(v.__path__) == 1 and
-        not os.path.exists(os.path.join(v.__path__[0], '__init__.py'))):
-        # This is a namespace package.  Remove it.
-        sys.modules.pop(k)
-
-is_jython = sys.platform.startswith('java')
-
-setuptools_source = 'http://peak.telecommunity.com/dist/ez_setup.py'
-distribute_source = 'http://python-distribute.org/distribute_setup.py'
-distribute_source = 'https://bitbucket.org/pypa/setuptools/raw/f657df1f1ed46596d236376649c99a470662b4ba/distribute_setup.py'
-
-# parsing arguments
-def normalize_to_url(option, opt_str, value, parser):
-    if value:
-        if '://' not in value:  # It doesn't smell like a URL.
-            value = 'file://%s' % (
-                urllib.pathname2url(
-                    os.path.abspath(os.path.expanduser(value))),)
-        if opt_str == '--download-base' and not value.endswith('/'):
-            # Download base needs a trailing slash to make the world happy.
-            value += '/'
-    else:
-        value = None
-    name = opt_str[2:].replace('-', '_')
-    setattr(parser.values, name, value)
+__version__ = '2015-07-01'
+# See zc.buildout's changelog if this version is up to date.
+
+tmpeggs = tempfile.mkdtemp(prefix='bootstrap-')
 
 usage = '''\
 [DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
@@ -96,129 +38,134 @@ def normalize_to_url(option, opt_str, value, parser):
 Simply run this script in a directory containing a buildout.cfg, using the
 Python that you want bin/buildout to use.
 
-Note that by using --setup-source and --download-base to point to
-local resources, you can keep this script from going over the network.
+Note that by using --find-links to point to local resources, you can keep
+this script from going over the network.
 '''
 
 parser = OptionParser(usage=usage)
-parser.add_option("-v", "--version", dest="version",
-                          help="use a specific zc.buildout version")
-parser.add_option("-d", "--distribute",
-                   action="store_true", dest="use_distribute", default=False,
-                   help="Use Distribute rather than Setuptools.")
-parser.add_option("--setup-source", action="callback", dest="setup_source",
-                  callback=normalize_to_url, nargs=1, type="string",
-                  help=("Specify a URL or file location for the setup file. "
-                        "If you use Setuptools, this will default to " +
-                        setuptools_source + "; if you use Distribute, this "
-                        "will default to " + distribute_source + "."))
-parser.add_option("--download-base", action="callback", dest="download_base",
-                  callback=normalize_to_url, nargs=1, type="string",
-                  help=("Specify a URL or directory for downloading "
-                        "zc.buildout and either Setuptools or Distribute. "
-                        "Defaults to PyPI."))
-parser.add_option("--eggs",
-                  help=("Specify a directory for storing eggs.  Defaults to "
-                        "a temporary directory that is deleted when the "
-                        "bootstrap script completes."))
+parser.add_option("--version",
+                  action="store_true", default=False,
+                  help=("Return bootstrap.py version."))
 parser.add_option("-t", "--accept-buildout-test-releases",
                   dest='accept_buildout_test_releases',
                   action="store_true", default=False,
-                  help=("Normally, if you do not specify a --version, the "
-                        "bootstrap script and buildout gets the newest "
+                  help=("Normally, if you do not specify a --buildout-version, "
+                        "the bootstrap script and buildout gets the newest "
                         "*final* versions of zc.buildout and its recipes and "
                         "extensions for you.  If you use this flag, "
                         "bootstrap and buildout will get the newest releases "
                         "even if they are alphas or betas."))
-parser.add_option("-c", None, action="store", dest="config_file",
-                   help=("Specify the path to the buildout configuration "
-                         "file to be used."))
+parser.add_option("-c", "--config-file",
+                  help=("Specify the path to the buildout configuration "
+                        "file to be used."))
+parser.add_option("-f", "--find-links",
+                  help=("Specify a URL to search for buildout releases"))
+parser.add_option("--allow-site-packages",
+                  action="store_true", default=False,
+                  help=("Let bootstrap.py use existing site packages"))
+parser.add_option("--buildout-version",
+                  help="Use a specific zc.buildout version")
+parser.add_option("--setuptools-version",
+                  help="Use a specific setuptools version")
+parser.add_option("--setuptools-to-dir",
+                  help=("Allow for re-use of existing directory of "
+                        "setuptools versions"))
 
 options, args = parser.parse_args()
+if options.version:
+    print("bootstrap.py version %s" % __version__)
+    sys.exit(0)
 
-if options.eggs:
-    eggs_dir = os.path.abspath(os.path.expanduser(options.eggs))
-else:
-    eggs_dir = tempfile.mkdtemp()
-
-if options.setup_source is None:
-    if options.use_distribute:
-        options.setup_source = distribute_source
-    else:
-        options.setup_source = setuptools_source
 
-if options.accept_buildout_test_releases:
-    args.insert(0, 'buildout:accept-buildout-test-releases=true')
+######################################################################
+# load/install setuptools
 
 try:
-    import pkg_resources
-    import setuptools  # A flag.  Sometimes pkg_resources is installed alone.
-    if not hasattr(pkg_resources, '_distribute'):
-        raise ImportError
+    from urllib.request import urlopen
 except ImportError:
-    ez_code = urllib2.urlopen(
-        options.setup_source).read().replace('\r\n', '\n')
-    ez = {}
-    exec ez_code in ez
-    setup_args = dict(to_dir=eggs_dir, download_delay=0)
-    if options.download_base:
-        setup_args['download_base'] = options.download_base
-    if options.use_distribute:
-        setup_args['no_fake'] = True
-        if sys.version_info[:2] == (2, 4):
-            setup_args['version'] = '0.6.32'
-    ez['use_setuptools'](**setup_args)
-    if 'pkg_resources' in sys.modules:
-        reload(sys.modules['pkg_resources'])
-    import pkg_resources
-    # This does not (always?) update the default working set.  We will
-    # do it.
-    for path in sys.path:
-        if path not in pkg_resources.working_set.entries:
-            pkg_resources.working_set.add_entry(path)
-
-cmd = [quote(sys.executable),
-       '-c',
-       quote('from setuptools.command.easy_install import main; main()'),
-       '-mqNxd',
-       quote(eggs_dir)]
-
-if not has_broken_dash_S:
-    cmd.insert(1, '-S')
-
-find_links = options.download_base
-if not find_links:
-    find_links = os.environ.get('bootstrap-testing-find-links')
-if not find_links and options.accept_buildout_test_releases:
-    find_links = 'http://downloads.buildout.org/'
-if find_links:
-    cmd.extend(['-f', quote(find_links)])
+    from urllib2 import urlopen
 
-if options.use_distribute:
-    setup_requirement = 'distribute'
+ez = {}
+if os.path.exists('ez_setup.py'):
+    exec(open('ez_setup.py').read(), ez)
 else:
-    setup_requirement = 'setuptools'
+    exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
+
+if not options.allow_site_packages:
+    # ez_setup imports site, which adds site packages
+    # this will remove them from the path to ensure that incompatible versions
+    # of setuptools are not in the path
+    import site
+    # inside a virtualenv, there is no 'getsitepackages'.
+    # We can't remove these reliably
+    if hasattr(site, 'getsitepackages'):
+        for sitepackage_path in site.getsitepackages():
+            # Strip all site-packages directories from sys.path that
+            # are not sys.prefix; this is because on Windows
+            # sys.prefix is a site-package directory.
+            if sitepackage_path != sys.prefix:
+                sys.path[:] = [x for x in sys.path
+                               if sitepackage_path not in x]
+
+setup_args = dict(to_dir=tmpeggs, download_delay=0)
+
+if options.setuptools_version is not None:
+    setup_args['version'] = options.setuptools_version
+if options.setuptools_to_dir is not None:
+    setup_args['to_dir'] = options.setuptools_to_dir
+
+ez['use_setuptools'](**setup_args)
+import setuptools
+import pkg_resources
+
+# This does not (always?) update the default working set.  We will
+# do it.
+for path in sys.path:
+    if path not in pkg_resources.working_set.entries:
+        pkg_resources.working_set.add_entry(path)
+
+######################################################################
+# Install buildout
+
 ws = pkg_resources.working_set
-setup_requirement_path = ws.find(
-    pkg_resources.Requirement.parse(setup_requirement)).location
-env = dict(
-    os.environ,
-    PYTHONPATH=setup_requirement_path)
+
+setuptools_path = ws.find(
+    pkg_resources.Requirement.parse('setuptools')).location
+
+# Fix sys.path here as easy_install.pth added before PYTHONPATH
+cmd = [sys.executable, '-c',
+       'import sys; sys.path[0:0] = [%r]; ' % setuptools_path +
+       'from setuptools.command.easy_install import main; main()',
+       '-mZqNxd', tmpeggs]
+
+find_links = os.environ.get(
+    'bootstrap-testing-find-links',
+    options.find_links or
+    ('http://downloads.buildout.org/'
+     if options.accept_buildout_test_releases else None)
+    )
+if find_links:
+    cmd.extend(['-f', find_links])
 
 requirement = 'zc.buildout'
-version = options.version
+version = options.buildout_version
 if version is None and not options.accept_buildout_test_releases:
     # Figure out the most recent final version of zc.buildout.
     import setuptools.package_index
     _final_parts = '*final-', '*final'
 
     def _final_version(parsed_version):
-        for part in parsed_version:
-            if (part[:1] == '*') and (part not in _final_parts):
-                return False
-        return True
+        try:
+            return not parsed_version.is_prerelease
+        except AttributeError:
+            # Older setuptools
+            for part in parsed_version:
+                if (part[:1] == '*') and (part not in _final_parts):
+                    return False
+            return True
+
     index = setuptools.package_index.PackageIndex(
-        search_path=[setup_requirement_path])
+        search_path=[setuptools_path])
     if find_links:
         index.add_find_links((find_links,))
     req = pkg_resources.Requirement.parse(requirement)
@@ -227,8 +174,6 @@ def _final_version(parsed_version):
         bestv = None
         for dist in index[req.project_name]:
             distv = dist.parsed_version
-            if distv >= pkg_resources.parse_version('2dev'):
-                continue
             if _final_version(distv):
                 if bestv is None or distv > bestv:
                     best = [dist]
@@ -238,40 +183,28 @@ def _final_version(parsed_version):
         if best:
             best.sort()
             version = best[-1].version
-
 if version:
-    requirement += '=='+version
-else:
-    requirement += '<2dev'
-
+    requirement = '=='.join((requirement, version))
 cmd.append(requirement)
 
-if is_jython:
-    import subprocess
-    exitcode = subprocess.Popen(cmd, env=env).wait()
-else:  # Windows prefers this, apparently; otherwise we would prefer subprocess
-    exitcode = os.spawnle(*([os.P_WAIT, sys.executable] + cmd + [env]))
-if exitcode != 0:
-    sys.stdout.flush()
-    sys.stderr.flush()
-    print ("An error occurred when trying to install zc.buildout. "
-           "Look above this message for any errors that "
-           "were output by easy_install.")
-    sys.exit(exitcode)
-
-ws.add_entry(eggs_dir)
+import subprocess
+if subprocess.call(cmd) != 0:
+    raise Exception(
+        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
+
+######################################################################
+# Import and run buildout
+
+ws.add_entry(tmpeggs)
 ws.require(requirement)
 import zc.buildout.buildout
 
-# If there isn't already a command in the args, add bootstrap
 if not [a for a in args if '=' not in a]:
     args.append('bootstrap')
 
-
-# if -c was provided, we push it back into args for buildout's main function
+# if -c was provided, we push it back into args for buildout' main function
 if options.config_file is not None:
     args[0:0] = ['-c', options.config_file]
 
 zc.buildout.buildout.main(args)
-if not options.eggs:  # clean up temporary egg directory
-    shutil.rmtree(eggs_dir)
+shutil.rmtree(tmpeggs)
diff --git a/buildout.cfg b/buildout.cfg
index a06277d..25b163b 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -1,16 +1,9 @@
 [buildout]
-extends = http://dist.plone.org/versions/zope-2-13-24-versions.cfg
-
+extends = https://raw.githubusercontent.com/zopefoundation/Zope/4.0a6/versions-prod.cfg
 versions = versions
 develop = .
 parts = test
 
-[versions]
-setuptools = 33.1.1
-zc.buildout = 2.5.3
-transaction = 2.0.3
-zc.recipe.egg = 2.0.3
-
 [test]
 recipe = zc.recipe.testrunner
 eggs = plone.recipe.zope2instance
diff --git a/setup.py b/setup.py
index 3123896..a87e127 100644
--- a/setup.py
+++ b/setup.py
@@ -26,9 +26,11 @@
         "Framework :: Plone :: 5.1",
         "Framework :: Zope2",
         "Programming Language :: Python",
-        "Programming Language :: Python :: 2 :: Only",
+        "Programming Language :: Python :: 2",
         "Programming Language :: Python :: 2.6",
         "Programming Language :: Python :: 2.7",
+        "Programming Language :: Python :: 3",
+        "Programming Language :: Python :: 3.5",
         "Programming Language :: Python :: Implementation :: CPython",
     ],
     packages=find_packages('src'),
@@ -38,10 +40,10 @@
     install_requires=[
         'zc.buildout',
         'setuptools',
-        'mailinglogger',
         'zc.recipe.egg',
         'Zope2 >= 2.12.1',
         'ZODB >= 5.1.1',
+        'ZEO',
     ],
     zip_safe=False,
     entry_points={'zc.buildout': ['default = %s:Recipe' % name]},
diff --git a/src/plone/recipe/zope2instance/__init__.py b/src/plone/recipe/zope2instance/__init__.py
index 2206b2b..c2dd072 100644
--- a/src/plone/recipe/zope2instance/__init__.py
+++ b/src/plone/recipe/zope2instance/__init__.py
@@ -13,18 +13,19 @@
 #
 ##############################################################################
 
+from plone.recipe.zope2instance import make
+from zc.recipe.egg.egg import Egg
+from zc.recipe.egg.egg import Scripts
+
 import os
 import os.path
+import pkg_resources
 import re
 import shutil
 import sys
-
-import pkg_resources
 import zc.buildout
 import zc.buildout.easy_install
 
-from plone.recipe.zope2instance import make
-from zc.recipe.egg.egg import Egg, Scripts
 
 IS_WIN = sys.platform[:3].lower() == 'win'
 
@@ -400,10 +401,10 @@ def is_rs_option(name):
             opts = dict(
                 type=type_,
                 db_opts='\n'.join(' ' * 12 + ' '.join((k, v))
-                                  for k, v in rel_storage.iteritems()
+                                  for k, v in rel_storage.items()
                                   if not is_rs_option(k)),
                 rs_opts='\n'.join(' ' * 8 + ' '.join((k, v))
-                                  for k, v in rel_storage.iteritems()
+                                  for k, v in rel_storage.items()
                                   if is_rs_option(k)),
                 )
             file_storage_snippet = rel_storage_template % opts
@@ -819,7 +820,7 @@ def render_file_storage(self, file_storage, blob_storage,
         if not os.path.exists(blob_storage):
             # Make it only readable for the current user, otherwise
             # you get a ZODB warning on startup.
-            os.makedirs(blob_storage, 0700)
+            os.makedirs(blob_storage, 0o700)
 
         storage = indent(storage, 2)
 
diff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py
index ded5fae..1909bbf 100644
--- a/src/plone/recipe/zope2instance/ctl.py
+++ b/src/plone/recipe/zope2instance/ctl.py
@@ -27,13 +27,14 @@
 available actions.
 """
 
+from pkg_resources import iter_entry_points
+from ZServer.Zope2.Startup import zopectl
+
 import csv
 import os
 import os.path
 import sys
-from pkg_resources import iter_entry_points
 
-from ZServer.Zope2.Startup import zopectl
 
 if zopectl.WIN:
     import traceback
@@ -78,7 +79,7 @@ def _get_pid_from_pidfile(self):
                         return int(f.read().strip())
                     except ValueError:
                         # pid file for any reason empty or corrupt
-                        print 'ERROR: Corrupt pid file: %s' % fname
+                        print('ERROR: Corrupt pid file: {}'.format(fname))
                         return 0
             else:
                 return 0
@@ -148,7 +149,7 @@ def do_install(self, arg):
 
             status = self._get_service_status()
             if status is not None:
-                print 'ERROR: Zope is already installed as a Windows service.'
+                print('ERROR: Zope is already installed as a Windows service.')
                 return
 
             # TODO:
@@ -194,7 +195,7 @@ def do_install(self, arg):
                     self.options.configroot.pid_filename
                 )
 
-                print 'Installed Zope as Windows Service "%s".' % name
+                print('Installed Zope as Windows Service "{}".'.format(name))
 
             except pywintypes.error:
                 traceback.print_exc()
@@ -216,18 +217,18 @@ def do_start(self, arg):
 
             status = self._get_service_status()
             if status is None:
-                print 'ERROR: Zope is not installed as Windows service.'
+                print('ERROR: Zope is not installed as Windows service.')
                 return
             elif status == win32service.SERVICE_START_PENDING:
-                print 'ERROR: The Zope Windows service is about to start.'
+                print('ERROR: The Zope Windows service is about to start.')
                 return
             elif status == win32service.SERVICE_RUNNING:
-                print 'ERROR: The Zope Windows service is already running.'
+                print('ERROR: The Zope Windows service is already running.')
                 return
             name = self._get_service_name()
             try:
                 win32serviceutil.StartService(name)
-                print 'Starting Windows Service "%s".' % name
+                print('Starting Windows Service "{}".'.format(name))
             except pywintypes.error:
                 traceback.print_exc()
 
@@ -239,15 +240,15 @@ def do_restart(self, arg):
 
             status = self._get_service_status()
             if status is None:
-                print 'ERROR: Zope is not installed as Windows service.'
+                print('ERROR: Zope is not installed as Windows service.')
                 return
             elif status == win32service.SERVICE_STOPPED:
-                print 'ERROR: The Zope Windows service has not been started.'
+                print('ERROR: The Zope Windows service has not been started.')
                 return
             name = self._get_service_name()
             try:
                 win32serviceutil.RestartService(name)
-                print 'Restarting Windows Service "%s".' % name
+                print('Restarting Windows Service "{}".'.format(name))
             except pywintypes.error:
                 traceback.print_exc()
 
@@ -259,15 +260,15 @@ def do_stop(self, arg):
 
             status = self._get_service_status()
             if status is None:
-                print 'ERROR: Zope is not installed as Windows service.'
+                print('ERROR: Zope is not installed as Windows service.')
                 return
             elif status == win32service.SERVICE_STOPPED:
-                print 'ERROR: The Zope Windows service has not been started.'
+                print('ERROR: The Zope Windows service has not been started.')
                 return
             name = self._get_service_name()
             try:
                 win32serviceutil.StopService(name)
-                print 'Stopping Windows Service "%s".' % name
+                print('Stopping Windows Service "{}".'.format(name))
             except pywintypes.error:
                 traceback.print_exc()
 
@@ -279,7 +280,7 @@ def do_remove(self, arg):
 
             status = self._get_service_status()
             if status is None:
-                print 'ERROR: Zope is not installed as a Windows service.'
+                print('ERROR: Zope is not installed as a Windows service.')
                 return
             elif status is not win32service.SERVICE_STOPPED:
                 print 'ERROR: Please stop the Windows service before '\
@@ -290,7 +291,7 @@ def do_remove(self, arg):
             name = self._get_service_name()
             try:
                 win32serviceutil.RemoveService(name)
-                print 'Removed Windows Service "%s".' % name
+                print('Removed Windows Service "{}".'.format(name))
             except pywintypes.error:
                 ret_code = 1
                 traceback.print_exc()
@@ -321,11 +322,11 @@ def get_status(self):
 
         def do_status(self, arg=''):
             if arg not in ('', '-l'):
-                print 'ERROR: The only valid option is "-l".'
+                print('ERROR: The only valid option is "-l".')
                 return
             service_status = self._get_service_status()
             if service_status is None:
-                print 'Zope is not installed as a Windows service.'
+                print('Zope is not installed as a Windows service.')
             else:
                 name = self._get_service_name()
                 state = self.service_state_map.get(
@@ -333,7 +334,7 @@ def do_status(self, arg=''):
                 print('Zope is installed as Windows service "%s", '
                       'this service is currently %s.' % (name, state))
             if arg == '-l' and self.zd_status:
-                print self.zd_status
+                print(self.zd_status)
 
             # TODO: what about "self.zd_up"?
 
@@ -343,7 +344,7 @@ def help_status(self):
                   'and raw status output.'
 
         def help_EOF(self):
-            print 'To quit, type CTRL+Z or use the quit command.'
+            print('To quit, type CTRL+Z or use the quit command.')
 
     # end of "if zopectl.WIN"
     else:
@@ -384,7 +385,8 @@ def do_start(self, arg):
             elif not self.zd_pid:
                 self.send_action("start")
             else:
-                print "daemon process already running; pid=%d" % self.zd_pid
+                print('daemon process already running; pid={}'.format(
+                        self.zd_pid))
                 return
 
             def cond(n=0):
@@ -466,15 +468,16 @@ def get_startup_cmd(self, python, more, pyflags=""):
             return cmdline
 
     def help_startup_command(self):
-        print "    Also sets up a REQUEST, logs in the "
-        print "    AccessControl.SpecialUsers.system user, and may traverse "
-        print "    to an object, such as a CMF portal.  This environment set "
-        print "    up is controlled with following options:"
-        print "    -R/--no-request -- do not set up a REQUEST."
-        print "    -L/--no-login -- do not login the system user."
-        print "    -O/--object-path <path> -- Traverse to <path> from the app "
-        print "                               and make available as `obj`."
-        print "    Example usage: bin/instance -RLOPlone/front-page debug"
+        print("""\
+    Also sets up a REQUEST, logs in the
+    AccessControl.SpecialUsers.system user, and may traverse
+    to an object, such as a CMF portal.  This environment set
+    up is controlled with following options:
+    -R/--no-request -- do not set up a REQUEST.
+    -L/--no-login -- do not login the system user.
+    -O/--object-path <path> -- Traverse to <path> from the app
+                               and make available as `obj`.
+    Example usage: bin/instance -RLOPlone/front-page debug""")
 
     def do_run(self, arg):
         # If the command line was something like
@@ -497,7 +500,7 @@ def do_run(self, arg):
             tup = self.options.args[1:]
 
         if not tup:
-            print "usage: run <script> [args]"
+            print("usage: run <script> [args]")
             return
 
         # If we pass the script filename as a win32 backslashed path
@@ -523,8 +526,9 @@ def do_console(self, arg):
         self.do_foreground(arg, debug=False)
 
     def help_console(self):
-        print "console -- Run the program in the console."
-        print "    In contrast to foreground this does not turn on debug mode."
+        print("""\
+console -- Run the program in the console.
+    In contrast to foreground this does not turn on debug mode.""")
 
     def do_debug(self, arg):
         # `-c` disables the PYTHONSTARTUP feature; load it explicitly
@@ -653,6 +657,6 @@ def main(args=None):
         import readline
     except ImportError:
         pass
-    print 'Program: %s' % ' '.join(options.program)
+    print('Program: {}'.format(' '.join(options.program)))
     c.do_status()
     c.cmdloop()
diff --git a/src/plone/recipe/zope2instance/make.py b/src/plone/recipe/zope2instance/make.py
index e772d9c..c080b61 100644
--- a/src/plone/recipe/zope2instance/make.py
+++ b/src/plone/recipe/zope2instance/make.py
@@ -1,10 +1,14 @@
 # -*- coding: utf-8 -*-
+from __future__ import print_function
 from binascii import b2a_base64
 from hashlib import sha1
+
 import os
+import os.path
 import shutil
 import sys
 
+
 VCS_DIRS = [os.path.normcase('CVS'),
             os.path.normcase('.svn'),
             os.path.normcase('.git')]
@@ -30,10 +34,11 @@ def make_instance(user=None, instancehome=None, version='212'):
 
 def get_inituser():
     import getpass
-    print 'Please choose a username and password for the initial user.'
-    print 'These will be the credentials you use to initially manage'
-    print 'your new Zope instance.'
-    print
+    print("""\
+Please choose a username and password for the initial user.
+These will be the credentials you use to initially manage
+your new Zope instance.
+""")
     user = raw_input('Username: ').strip()
     if user == '':
         return None, None
@@ -44,16 +49,16 @@ def get_inituser():
             break
         else:
             passwd = verify = ''
-            print 'Password mismatch, please try again...'
+            print('Password mismatch, please try again...')
     return user, passwd
 
 
 def write_inituser(fn, user, password):
     fp = open(fn, 'w')
-    pw = b2a_base64(sha1(password).digest())[:-1]
+    pw = b2a_base64(sha1(password.encode('utf-8')).digest())[:-1]
     fp.write('%s:{SHA}%s\n' % (user, pw))
     fp.close()
-    os.chmod(fn, 0644)
+    os.chmod(fn, 0o644)
 
 
 def copyskel(sourcedir, targetdir):
@@ -67,28 +72,25 @@ def copyskel(sourcedir, targetdir):
     os.chdir(sourcedir)
     try:
         try:
-            os.path.walk(os.curdir, copydir, targetdir)
+            copydir(os.curdir, targetdir)
         finally:
             os.chdir(pwd)
-    except (IOError, OSError), msg:
-        print >>sys.stderr, msg
+    except (IOError, OSError) as msg:
+        print(msg, file=sys.stderr)
         sys.exit(1)
 
 
-def copydir(targetdir, sourcedir, names):
-    # Don't recurse into VCS directories:
-    for name in names[:]:
-        if os.path.normcase(name) in VCS_DIRS:
-            names.remove(name)
-        src = os.path.join(sourcedir, name)
-        if os.path.isfile(src):
-            # Copy the file:
+def copydir(sourcedir, targetdir):
+    for root, dirs, files in os.walk(sourcedir):
+        # Don't recurse into VCS directories:
+        dirs[:] = set(dirs).difference(VCS_DIRS)
+        for name in files:
+            src = os.path.join(root, name)
             dst = os.path.join(targetdir, src)
             if os.path.exists(dst):
                 continue
             shutil.copyfile(src, dst)
-        else:
-            # Directory:
+        for name in dirs:
             dn = os.path.join(targetdir, sourcedir, name)
             if not os.path.exists(dn):
                 os.mkdir(dn)
diff --git a/src/plone/recipe/zope2instance/tests/test_docs.py b/src/plone/recipe/zope2instance/tests/test_docs.py
index 21afea1..f6a50fd 100644
--- a/src/plone/recipe/zope2instance/tests/test_docs.py
+++ b/src/plone/recipe/zope2instance/tests/test_docs.py
@@ -1,22 +1,26 @@
 # -*- coding: utf-8 -*-
 
-import doctest
-import unittest
-import shutil
-
-import pkg_resources
 from zc.buildout.testing import buildoutSetUp
 from zc.buildout.testing import buildoutTearDown
 from zc.buildout.testing import install
 from zc.buildout.testing import install_develop
 
+import doctest
+import pkg_resources
+import shutil
+import unittest
+
 
 def setUp(test):
     buildoutSetUp(test)
     install_develop('plone.recipe.zope2instance', test)
     install('zc.recipe.egg', test)
-    install('mailinglogger', test)
-    dependencies = pkg_resources.working_set.require('Zope2', 'ZODB')
+    install_dependencies(pkg_resources.working_set.require('ZEO'), test)
+    install_dependencies(pkg_resources.working_set.require('Zope2'), test)
+    install_dependencies(pkg_resources.working_set.require('ZODB'), test)
+
+
+def install_dependencies(dependencies, test):
     for dep in dependencies:
         try:
             install(dep.project_name, test)
diff --git a/src/plone/recipe/zope2instance/tests/wsgi.txt b/src/plone/recipe/zope2instance/tests/wsgi.txt
index 24249ec..821f6cf 100644
--- a/src/plone/recipe/zope2instance/tests/wsgi.txt
+++ b/src/plone/recipe/zope2instance/tests/wsgi.txt
@@ -3,6 +3,7 @@ Test wsgi.py creation
 =====================
 
 
+    >>> from __future__ import print_function
     >>> from zc.buildout.testing import *
     >>> from os.path import join
     >>> import sys, os
@@ -26,7 +27,7 @@ plone.recipe.zope2instance::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Installing wsgi.py.
     Generated script '...wsgi.py'.
     ...
@@ -36,7 +37,7 @@ We should have a wsgi.py part, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'wsgi.py')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/wsgi.py
     instancehome $INSTANCEHOME
     %define CLIENTHOME .../sample-buildout/var/wsgi.py
diff --git a/src/plone/recipe/zope2instance/tests/zope2instance.txt b/src/plone/recipe/zope2instance/tests/zope2instance.txt
index 51c9fd2..e29684b 100644
--- a/src/plone/recipe/zope2instance/tests/zope2instance.txt
+++ b/src/plone/recipe/zope2instance/tests/zope2instance.txt
@@ -6,11 +6,11 @@ plone.recipe.zope2instance
 This is the doctest for plone.recipe.zope2instance. It ensures the template
 works fine. It is based on zc.buildout testing module::
 
+    >>> from __future__ import print_function
     >>> from zc.buildout.testing import *
     >>> from os.path import join
     >>> import sys, os
     >>> options = globals()
-
     >>> WINDOWS = sys.platform == 'win32'
 
 Let's create a minimum buildout that uses the current
@@ -30,7 +30,7 @@ plone.recipe.zope2instance::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Installing instance.
     Generated script '...instance'.
     Generated interpreter '.../parts/instance/bin/interpreter'.
@@ -41,7 +41,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     instancehome $INSTANCEHOME
     %define CLIENTHOME .../sample-buildout/var/instance
@@ -132,7 +132,7 @@ The blobstorage directory should only be readable by the current user,
 otherwise you get a warning when the zope instance starts up.  The
 (POSIX) path mode bits should be 0700.
 
-    >>> (os.stat(os.path.join('var', 'blobstorage')).st_mode & 077) == 0
+    >>> (os.stat(os.path.join('var', 'blobstorage')).st_mode & 0o077) == 0
     True
 
 
@@ -156,7 +156,7 @@ Let's start off by adding an FTP address::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -168,7 +168,7 @@ Our FTP server should be set up now::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <ftp-server>
@@ -194,7 +194,7 @@ Next we will add a WebDAV server::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -206,7 +206,7 @@ Our WebDAV server should be set up now::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <webdav-source-server>
@@ -233,7 +233,7 @@ Next we will add a WebDAV server with force-connection-close on::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -245,7 +245,7 @@ Our WebDAV server should be set up now::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <webdav-source-server>
@@ -276,7 +276,7 @@ To have a DemoStorage configuration, you can use demo-storage::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -288,7 +288,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -328,7 +328,7 @@ Verify that demostorage can be disable::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -340,7 +340,7 @@ We should have a zope instance, with a basic zope.conf without demostorage::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -381,7 +381,7 @@ changes::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -393,7 +393,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -442,7 +442,7 @@ You can add a blob storage to the demo-storage as well::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -454,7 +454,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
         <blobstorage base>
@@ -496,7 +496,7 @@ not supported by the in-memory demostorage)::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -508,7 +508,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -558,7 +558,7 @@ To have a ZlibStorage configuration, you can use zlib-storage::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -570,7 +570,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -619,7 +619,7 @@ can set the ``zlib-storage`` option to 'passive'::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -631,7 +631,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -683,7 +683,7 @@ To have a BeforeStorage configuration, you can use before-storage::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -695,7 +695,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -742,7 +742,7 @@ The before-storage option can be combined with a demo-storage::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -754,7 +754,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -808,7 +808,7 @@ To have a BlobStorage configuration, you can use blob-storage::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -820,7 +820,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -867,7 +867,7 @@ To have a RelStorage configuration, you can use rel-storage::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -879,7 +879,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -918,7 +918,7 @@ for the plone.recipe.zope2instance recipe.
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -930,7 +930,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -980,7 +980,7 @@ specified, they should get included in that section as well.
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -992,7 +992,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -1037,7 +1037,7 @@ Verify that demo-storage is correctly applied
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1049,7 +1049,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -1094,7 +1094,7 @@ Verify that blob-storage is correctly applied
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1106,7 +1106,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -1152,7 +1152,7 @@ before-storage::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1164,7 +1164,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -1222,7 +1222,7 @@ You can get specific zeo server address using `zeo-address`.
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1234,7 +1234,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -1277,7 +1277,7 @@ You can also set multiple zeo server addresses using `zeo-address`.
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1289,7 +1289,7 @@ We should have a zope instance, with a basic zope.conf::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -1339,7 +1339,7 @@ use the `storage-wrapper` option::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1351,7 +1351,7 @@ Now zope.conf should include the custom storage wrapper::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <zodb_db main>
@@ -1397,7 +1397,7 @@ to use `rotatezlogs`::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1409,7 +1409,7 @@ We should have a zope instance, with the custom event log::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <eventlog>
@@ -1455,7 +1455,7 @@ Mailing logger
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1467,7 +1467,7 @@ We should have a zope instance, with the mailing logger::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     %import mailinglogger
@@ -1517,7 +1517,7 @@ to use `rotatezlogs`::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1529,7 +1529,7 @@ We should have a zope instance, with the custom event log::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <logger access>
@@ -1567,7 +1567,7 @@ will be omitted::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1607,7 +1607,7 @@ will be omitted::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1657,7 +1657,7 @@ When this option is used the `zcml` option is ignored. Let's try it::
 
 Let's run the buildout::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1667,7 +1667,7 @@ Let's run the buildout::
 Now let's check that we have a zope instance, with the custom site.zcml::
 
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
-    >>> print open(os.path.join(instance, 'etc', 'site.zcml')).read()
+    >>> print(open(os.path.join(instance, 'etc', 'site.zcml')).read())
     <configure xmlns="http://namespaces.zope.org/zope"
                xmlns:five="http://namespaces.zope.org/five">
         <include package="Products.Five" />
@@ -1699,7 +1699,7 @@ between several servers::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1711,7 +1711,7 @@ Our environment variables should be set now::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <environment>
@@ -1739,7 +1739,7 @@ Now let's add several environment variables::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1773,7 +1773,7 @@ Several all on one line::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1810,7 +1810,7 @@ Check additional options to the HTTP server::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1821,7 +1821,7 @@ And check it::
 
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %define INSTANCEHOME .../sample-buildout/parts/instance
     ...
     <http-server>
@@ -1855,7 +1855,7 @@ we don't error::
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1879,7 +1879,7 @@ The recipe supports the generation of scripts with relative paths.
     ... eggs =
     ... user = me:me
     ... ''' % options)
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1917,7 +1917,7 @@ Custom Zope Conf
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1954,7 +1954,7 @@ define custom zope.conf sections using ZConfig API.
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -1966,7 +1966,7 @@ We should have a zope instance, with custom imports::
     >>> instance = os.path.join(sample_buildout, 'parts', 'instance')
     >>> zope_conf = open(os.path.join(instance, 'etc', 'zope.conf')).read()
     >>> zope_conf = zope_conf.replace('\\', '/')
-    >>> print zope_conf
+    >>> print(zope_conf)
     %import mailinglogger
     %import eea.graylogger
     %define INSTANCEHOME .../sample-buildout/parts/instance
@@ -1994,7 +1994,7 @@ plone.app.theming resources directory.
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -2037,7 +2037,7 @@ plone.app.theming locales directory.
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -2075,12 +2075,12 @@ code to the initialization process.
     ... eggs =
     ... user = me:me
     ... initialization =
-    ...     print 'Initialization complete!'
+    ...     print('Initialization complete!')
     ... ''' % options)
 
 Let's run it::
 
-    >>> print system(join('bin', 'buildout')),
+    >>> print(system(join('bin', 'buildout'))),
     Uninstalling instance.
     Installing instance.
     Generated script '...instance'.
@@ -2091,6 +2091,6 @@ We should see the given initialization commands included in the instance
 script::
 
     >>> instance = open(os.path.join(sample_buildout, 'bin', 'instance')).read()
-    >>> "print 'Initialization complete!'" in instance
+    >>> "print('Initialization complete!')" in instance
     True
 
diff --git a/src/plone/recipe/zope2instance/wsgi.py b/src/plone/recipe/zope2instance/wsgi.py
index 95f9ebe..20783f7 100644
--- a/src/plone/recipe/zope2instance/wsgi.py
+++ b/src/plone/recipe/zope2instance/wsgi.py
@@ -1,4 +1,6 @@
-from paste.deploy.loadwsgi import ConfigLoader, SERVER, APP
+from paste.deploy.loadwsgi import APP
+from paste.deploy.loadwsgi import ConfigLoader
+from paste.deploy.loadwsgi import SERVER
 from Zope2.Startup.run import make_wsgi_app
 
 


