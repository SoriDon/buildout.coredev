Repository: plone.browserlayer


Branch: refs/heads/master
Date: 2023-02-26T23:40:41+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.browserlayer/commit/3eea1e75675418750ebd54066c6a9ecc3fa0d586

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/ba6bcc29.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..52258da\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "ba6bcc29"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..a3085c9\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.1\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.1"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/ba6bcc29.internal b/news/ba6bcc29.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/ba6bcc29.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..0f96c85 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,24 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\ndiff --git a/setup.cfg b/setup.cfg\nindex 526aeb2..e70eb25 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,24 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\n+    lint-requirements.txt\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..bd0c937\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.10\n+    pipdeptree==2.3.3\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+description = run the tests of the distribution\n+deps =\n+    plone.browserlayer[test]\n+    pytest\n+    gocept.pytestlayer\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    pip install -e .[test]\n+    pytest\n'

Repository: plone.browserlayer


Branch: refs/heads/master
Date: 2023-02-26T23:45:01+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.browserlayer/commit/b1c36b67ff5beab1c4f0c41b85ebcd4b77b7e01d

chore: pyupgrade

Files changed:
M plone/__init__.py
M plone/browserlayer/exportimport.py
M plone/browserlayer/interfaces.py
M plone/browserlayer/layer.py
M plone/browserlayer/testing.py
M plone/browserlayer/tests/__init__.py
M plone/browserlayer/tests/interfaces.py
M plone/browserlayer/tests/test_doctest.py
M plone/browserlayer/utils.py
M setup.py

b"diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__('pkg_resources').declare_namespace(__name__)\ndiff --git a/plone/browserlayer/exportimport.py b/plone/browserlayer/exportimport.py\nindex 36581f0..4df24d9 100644\n--- a/plone/browserlayer/exportimport.py\n+++ b/plone/browserlayer/exportimport.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.browserlayer.interfaces import ILocalBrowserLayerType\n from plone.browserlayer.utils import register_layer\n from plone.browserlayer.utils import unregister_layer\n@@ -97,9 +96,9 @@ def importLayers(context):\n         return\n \n     importer = queryMultiAdapter((sm, context), IBody,\n-                                 name=u'plone.browserlayer')\n+                                 name='plone.browserlayer')\n     if importer is not None:\n-        filename = '%s%s' % (importer.name, importer.suffix)\n+        filename = f'{importer.name}{importer.suffix}'\n         body = context.readDataFile(filename)\n         if body is not None:\n             importer.filename = filename  # for error reporting\n@@ -116,9 +115,9 @@ def exportLayers(context):\n         return\n \n     exporter = queryMultiAdapter((sm, context), IBody,\n-                                 name=u'plone.browserlayer')\n+                                 name='plone.browserlayer')\n     if exporter is not None:\n-        filename = '%s%s' % (exporter.name, exporter.suffix)\n+        filename = f'{exporter.name}{exporter.suffix}'\n         body = exporter.body\n         if body is not None:\n             context.writeDataFile(filename, body, exporter.mime_type)\ndiff --git a/plone/browserlayer/interfaces.py b/plone/browserlayer/interfaces.py\nindex ec62136..324af1d 100644\n--- a/plone/browserlayer/interfaces.py\n+++ b/plone/browserlayer/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/plone/browserlayer/layer.py b/plone/browserlayer/layer.py\nindex 29d8ff7..2041974 100644\n--- a/plone/browserlayer/layer.py\n+++ b/plone/browserlayer/layer.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.browserlayer.interfaces import ILocalBrowserLayerType\n from zope.component import getAllUtilitiesRegisteredFor\n from zope.interface import directlyProvidedBy\ndiff --git a/plone/browserlayer/testing.py b/plone/browserlayer/testing.py\nindex 9b5aa1e..815746c 100644\n--- a/plone/browserlayer/testing.py\n+++ b/plone/browserlayer/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import PloneSandboxLayer\n from plone.app.testing.layers import FunctionalTesting\n \ndiff --git a/plone/browserlayer/tests/__init__.py b/plone/browserlayer/tests/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/browserlayer/tests/__init__.py\n+++ b/plone/browserlayer/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/browserlayer/tests/interfaces.py b/plone/browserlayer/tests/interfaces.py\nindex d1a326e..e24d34c 100644\n--- a/plone/browserlayer/tests/interfaces.py\n+++ b/plone/browserlayer/tests/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/plone/browserlayer/tests/test_doctest.py b/plone/browserlayer/tests/test_doctest.py\nindex ae839ea..4123ab7 100644\n--- a/plone/browserlayer/tests/test_doctest.py\n+++ b/plone/browserlayer/tests/test_doctest.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.browserlayer.testing import PLONEBROWSERLAYER_FUNCTIONAL_TESTING\n from plone.testing import layered\n \ndiff --git a/plone/browserlayer/utils.py b/plone/browserlayer/utils.py\nindex 1b4d112..0a22f68 100644\n--- a/plone/browserlayer/utils.py\n+++ b/plone/browserlayer/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.browserlayer.interfaces import ILocalBrowserLayerType\n from zope.component import getAllUtilitiesRegisteredFor\n from zope.component import getSiteManager\ndiff --git a/setup.py b/setup.py\nindex 1001d32..317d331 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n"

Repository: plone.browserlayer


Branch: refs/heads/master
Date: 2023-02-26T23:48:01+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.browserlayer/commit/66377f60f08645f9ccc99fe6003c09fced647833

chore: black

Files changed:
M plone/__init__.py
M plone/browserlayer/exportimport.py
M plone/browserlayer/interfaces.py
M plone/browserlayer/layer.py
M plone/browserlayer/testing.py
M plone/browserlayer/tests/interfaces.py
M plone/browserlayer/tests/test_doctest.py
M plone/browserlayer/utils.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/browserlayer/exportimport.py b/plone/browserlayer/exportimport.py\nindex 4df24d9..38d483b 100644\n--- a/plone/browserlayer/exportimport.py\n+++ b/plone/browserlayer/exportimport.py\n@@ -14,36 +14,35 @@\n \n \n def dummyGetId():\n-    return \'\'\n+    return ""\n \n \n @implementer(IBody)\n @adapter(IComponentRegistry, ISetupEnviron)\n class BrowserLayerXMLAdapter(XMLAdapterBase):\n-    """Im- and exporter for local browser layers\n-    """\n+    """Im- and exporter for local browser layers"""\n \n-    name = \'browserlayer\'\n-    _LOGGER_ID = \'browserlayer\'\n+    name = "browserlayer"\n+    _LOGGER_ID = "browserlayer"\n \n     def _exportNode(self):\n         # hack around an issue where _getObjectNode expects to have the context\n         # a meta_type and a getId method, which isn\'t the case for a component\n         # registry\n         if IComponentRegistry.providedBy(self.context):\n-            self.context.meta_type = \'ComponentRegistry\'\n+            self.context.meta_type = "ComponentRegistry"\n             self.context.getId = dummyGetId\n-        node = self._getObjectNode(\'layers\')\n+        node = self._getObjectNode("layers")\n         if IComponentRegistry.providedBy(self.context):\n-            del(self.context.meta_type)\n-            del(self.context.getId)\n+            del self.context.meta_type\n+            del self.context.getId\n         node.appendChild(self._extractLayers())\n-        self._logger.info(\'Browser layers exported\')\n+        self._logger.info("Browser layers exported")\n         return node\n \n     def _importNode(self, node):\n         self._initProvider(node)\n-        self._logger.info(\'Browser layers imported\')\n+        self._logger.info("Browser layers imported")\n \n     def _initProvider(self, node):\n         if self.environ.shouldPurge():\n@@ -51,54 +50,58 @@ def _initProvider(self, node):\n         self._initLayers(node)\n \n     def _purgeLayers(self):\n-        registeredLayers = [r.name for r in self.context.registeredUtilities()\n-                            if r.provided == ILocalBrowserLayerType]\n+        registeredLayers = [\n+            r.name\n+            for r in self.context.registeredUtilities()\n+            if r.provided == ILocalBrowserLayerType\n+        ]\n         for name in registeredLayers:\n             unregister_layer(name, site_manager=self.context)\n \n     def _initLayers(self, node):\n         for child in node.childNodes:\n-            if child.nodeName.lower() == \'layer\':\n-                name = child.getAttribute(\'name\')\n-                if child.getAttribute(\'remove\'):\n+            if child.nodeName.lower() == "layer":\n+                name = child.getAttribute("name")\n+                if child.getAttribute("remove"):\n                     try:\n                         unregister_layer(name, site_manager=self.context)\n                     except KeyError as e:\n                         self._logger.info(e)\n                     continue\n-                interface = _resolveDottedName(child.getAttribute(\'interface\'))\n+                interface = _resolveDottedName(child.getAttribute("interface"))\n                 register_layer(interface, name, site_manager=self.context)\n \n     def _extractLayers(self):\n         fragment = self._doc.createDocumentFragment()\n \n-        registrations = [r for r in self.context.registeredUtilities()\n-                         if r.provided == ILocalBrowserLayerType]\n+        registrations = [\n+            r\n+            for r in self.context.registeredUtilities()\n+            if r.provided == ILocalBrowserLayerType\n+        ]\n \n         registrations.sort()\n \n         for r in registrations:\n-            child = self._doc.createElement(\'layer\')\n-            child.setAttribute(\'name\', r.name)\n-            child.setAttribute(\'interface\', _getDottedName(r.component))\n+            child = self._doc.createElement("layer")\n+            child.setAttribute("name", r.name)\n+            child.setAttribute("interface", _getDottedName(r.component))\n             fragment.appendChild(child)\n \n         return fragment\n \n \n def importLayers(context):\n-    """Import local browser layers\n-    """\n+    """Import local browser layers"""\n     sm = getSiteManager(context.getSite())\n     if sm is None or not IComponentRegistry.providedBy(sm):\n-        logger = context.getLogger(\'browserlayer\')\n+        logger = context.getLogger("browserlayer")\n         logger.info("Can not register components - no site manager found.")\n         return\n \n-    importer = queryMultiAdapter((sm, context), IBody,\n-                                 name=\'plone.browserlayer\')\n+    importer = queryMultiAdapter((sm, context), IBody, name="plone.browserlayer")\n     if importer is not None:\n-        filename = f\'{importer.name}{importer.suffix}\'\n+        filename = f"{importer.name}{importer.suffix}"\n         body = context.readDataFile(filename)\n         if body is not None:\n             importer.filename = filename  # for error reporting\n@@ -106,18 +109,16 @@ def importLayers(context):\n \n \n def exportLayers(context):\n-    """Export local browser layers\n-    """\n+    """Export local browser layers"""\n     sm = getSiteManager(context.getSite())\n     if sm is None or not IComponentRegistry.providedBy(sm):\n-        logger = context.getLogger(\'browserlayer\')\n+        logger = context.getLogger("browserlayer")\n         logger.info("Can not register components - no site manager found.")\n         return\n \n-    exporter = queryMultiAdapter((sm, context), IBody,\n-                                 name=\'plone.browserlayer\')\n+    exporter = queryMultiAdapter((sm, context), IBody, name="plone.browserlayer")\n     if exporter is not None:\n-        filename = f\'{exporter.name}{exporter.suffix}\'\n+        filename = f"{exporter.name}{exporter.suffix}"\n         body = exporter.body\n         if body is not None:\n             context.writeDataFile(filename, body, exporter.mime_type)\ndiff --git a/plone/browserlayer/interfaces.py b/plone/browserlayer/interfaces.py\nindex 324af1d..3efc134 100644\n--- a/plone/browserlayer/interfaces.py\n+++ b/plone/browserlayer/interfaces.py\n@@ -2,5 +2,4 @@\n \n \n class ILocalBrowserLayerType(Interface):\n-    """Describes the type of interface an ILocalBrowserLayer is.\n-    """\n+    """Describes the type of interface an ILocalBrowserLayer is."""\ndiff --git a/plone/browserlayer/layer.py b/plone/browserlayer/layer.py\nindex 2041974..b651b7f 100644\n--- a/plone/browserlayer/layer.py\n+++ b/plone/browserlayer/layer.py\n@@ -6,8 +6,7 @@\n \n \n def mark_layer(site, event):\n-    """Mark the request with all installed layers.\n-    """\n+    """Mark the request with all installed layers."""\n     if getattr(event.request, "_plonebrowserlayer_", False):\n         return\n     event.request._plonebrowserlayer_ = True\ndiff --git a/plone/browserlayer/testing.py b/plone/browserlayer/testing.py\nindex 815746c..c2cab24 100644\n--- a/plone/browserlayer/testing.py\n+++ b/plone/browserlayer/testing.py\n@@ -3,11 +3,11 @@\n \n \n class PloneBrowserlayerLayer(PloneSandboxLayer):\n-\n     def setUpZope(self, app, configurationContext):\n         import plone.browserlayer.tests\n+\n         self.debug_mode = True\n-        self.loadZCML(\'tests/testing.zcml\', package=plone.browserlayer)\n+        self.loadZCML("tests/testing.zcml", package=plone.browserlayer)\n         self.loadZCML(package=plone.browserlayer)\n         self.debug_mode = False\n \n@@ -15,6 +15,5 @@ def setUpZope(self, app, configurationContext):\n PLONEBROWSERLAYER_FIXTURE = PloneBrowserlayerLayer()\n \n PLONEBROWSERLAYER_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONEBROWSERLAYER_FIXTURE,),\n-    name="PloneBrowserlayer:Functional"\n+    bases=(PLONEBROWSERLAYER_FIXTURE,), name="PloneBrowserlayer:Functional"\n )\ndiff --git a/plone/browserlayer/tests/interfaces.py b/plone/browserlayer/tests/interfaces.py\nindex e24d34c..22d1f39 100644\n--- a/plone/browserlayer/tests/interfaces.py\n+++ b/plone/browserlayer/tests/interfaces.py\n@@ -2,5 +2,4 @@\n \n \n class IMyProductLayer(Interface):\n-    """A layer unique to this product.\n-    """\n+    """A layer unique to this product."""\ndiff --git a/plone/browserlayer/tests/test_doctest.py b/plone/browserlayer/tests/test_doctest.py\nindex 4123ab7..c12e39d 100644\n--- a/plone/browserlayer/tests/test_doctest.py\n+++ b/plone/browserlayer/tests/test_doctest.py\n@@ -10,22 +10,21 @@\n class Py23DocChecker(doctest.OutputChecker):\n     def check_output(self, want, got, optionflags):\n         if six.PY2:\n-            want = re.sub(\'urllib.error.HTTPError\', \'HTTPError\', want)\n+            want = re.sub("urllib.error.HTTPError", "HTTPError", want)\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \n def test_suite():\n-    return unittest.TestSuite([\n-        layered(\n-            doctest.DocFileSuite(\n-                \'README.rst\',\n-                package=\'plone.browserlayer\',\n-                optionflags=(\n-                    doctest.ELLIPSIS |\n-                    doctest.REPORT_ONLY_FIRST_FAILURE\n+    return unittest.TestSuite(\n+        [\n+            layered(\n+                doctest.DocFileSuite(\n+                    "README.rst",\n+                    package="plone.browserlayer",\n+                    optionflags=(doctest.ELLIPSIS | doctest.REPORT_ONLY_FIRST_FAILURE),\n+                    checker=Py23DocChecker(),\n                 ),\n-                checker=Py23DocChecker(),\n-            ),\n-            layer=PLONEBROWSERLAYER_FUNCTIONAL_TESTING\n-        )\n-    ])\n+                layer=PLONEBROWSERLAYER_FUNCTIONAL_TESTING,\n+            )\n+        ]\n+    )\ndiff --git a/plone/browserlayer/utils.py b/plone/browserlayer/utils.py\nindex 0a22f68..ce2bb4f 100644\n--- a/plone/browserlayer/utils.py\n+++ b/plone/browserlayer/utils.py\n@@ -21,9 +21,9 @@ def register_layer(layer, name, site_manager=None):\n     if not ILocalBrowserLayerType.providedBy(layer):\n         alsoProvides(layer, ILocalBrowserLayerType)\n \n-    site_manager.registerUtility(component=layer,\n-                                 provided=ILocalBrowserLayerType,\n-                                 name=name)\n+    site_manager.registerUtility(\n+        component=layer, provided=ILocalBrowserLayerType, name=name\n+    )\n \n \n def unregister_layer(name, site_manager=None):\n@@ -38,12 +38,11 @@ def unregister_layer(name, site_manager=None):\n     if site_manager is None:\n         site_manager = getSiteManager()\n \n-    site_manager.unregisterUtility(component=existing,\n-                                   provided=ILocalBrowserLayerType,\n-                                   name=name)\n+    site_manager.unregisterUtility(\n+        component=existing, provided=ILocalBrowserLayerType, name=name\n+    )\n \n \n def registered_layers():\n-    """Return all currently registered layers\n-    """\n+    """Return all currently registered layers"""\n     return getAllUtilitiesRegisteredFor(ILocalBrowserLayerType)\ndiff --git a/setup.py b/setup.py\nindex 317d331..9cbef0d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,17 +1,14 @@\n from setuptools import find_packages\n from setuptools import setup\n \n-version = \'3.0.1.dev0\'\n+\n+version = "3.0.1.dev0"\n \n setup(\n-    name=\'plone.browserlayer\',\n+    name="plone.browserlayer",\n     version=version,\n     description="Browser layer management for Zope applications",\n-    long_description=(\n-        open("README.rst").read() +\n-        "\\n" +\n-        open("CHANGES.rst").read()\n-    ),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -27,27 +24,23 @@\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'plone browser layer\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://github.com/plone/plone.browserlayer\',\n-    license=\'GPL version 2\',\n+    keywords="plone browser layer",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/plone.browserlayer",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n-    extras_require=dict(\n-        test=[\n-           \'plone.app.testing\',\n-        ]\n-    ),\n+    extras_require=dict(test=["plone.app.testing"]),\n     install_requires=[\n-        \'setuptools\',\n-        \'zope.component\',\n-        \'zope.interface\',\n-        \'zope.traversing >= 3.9.0\',\n-        \'Products.CMFCore\',\n-        \'Products.GenericSetup>=1.4\',\n-        \'Zope\',\n+        "setuptools",\n+        "zope.component",\n+        "zope.interface",\n+        "zope.traversing >= 3.9.0",\n+        "Products.CMFCore",\n+        "Products.GenericSetup>=1.4",\n+        "Zope",\n     ],\n )\n'

Repository: plone.browserlayer


Branch: refs/heads/master
Date: 2023-02-26T23:49:37+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.browserlayer/commit/9c52aca5f484e897a43ef4503430297b96cc1595

chore: zpretty

Files changed:
M plone/browserlayer/configure.zcml
M plone/browserlayer/tests/local.pt
M plone/browserlayer/tests/profiles/testing/browserlayer.xml
M plone/browserlayer/tests/profiles/uninstall/browserlayer.xml
M plone/browserlayer/tests/standard.pt
M plone/browserlayer/tests/testing.zcml

b'diff --git a/plone/browserlayer/configure.zcml b/plone/browserlayer/configure.zcml\nindex ae62dca..42e5c47 100644\n--- a/plone/browserlayer/configure.zcml\n+++ b/plone/browserlayer/configure.zcml\n@@ -1,31 +1,34 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone.browserlayer">\n+    i18n_domain="plone.browserlayer"\n+    >\n \n-    <genericsetup:importStep\n-        name="browserlayer"\n-        title="Package browser layers"\n-        description="Enables use of skin layers for installed products."\n-        handler="plone.browserlayer.exportimport.importLayers">\n-        <depends name="componentregistry" />\n-    </genericsetup:importStep>\n+  <genericsetup:importStep\n+      name="browserlayer"\n+      title="Package browser layers"\n+      description="Enables use of skin layers for installed products."\n+      handler="plone.browserlayer.exportimport.importLayers"\n+      >\n+    <depends name="componentregistry" />\n+  </genericsetup:importStep>\n \n-    <genericsetup:exportStep\n-        name="browserlayer"\n-        title="Package browser layers"\n-        description="Export package browser layers"\n-        handler="plone.browserlayer.exportimport.exportLayers"\n-        />\n+  <genericsetup:exportStep\n+      name="browserlayer"\n+      title="Package browser layers"\n+      description="Export package browser layers"\n+      handler="plone.browserlayer.exportimport.exportLayers"\n+      />\n \n-    <subscriber\n-        for="Products.CMFCore.interfaces.ISiteRoot\n-             zope.traversing.interfaces.IBeforeTraverseEvent"\n-        handler=".layer.mark_layer"\n-        />\n+  <subscriber\n+      for="Products.CMFCore.interfaces.ISiteRoot\n+           zope.traversing.interfaces.IBeforeTraverseEvent"\n+      handler=".layer.mark_layer"\n+      />\n \n-    <adapter\n-        factory=".exportimport.BrowserLayerXMLAdapter"\n-        name="plone.browserlayer" />\n+  <adapter\n+      factory=".exportimport.BrowserLayerXMLAdapter"\n+      name="plone.browserlayer"\n+      />\n \n </configure>\ndiff --git a/plone/browserlayer/tests/local.pt b/plone/browserlayer/tests/local.pt\nindex 714e684..3f07bf0 100644\n--- a/plone/browserlayer/tests/local.pt\n+++ b/plone/browserlayer/tests/local.pt\n@@ -1 +1,3 @@\n-<tal:block define="dummy python:request.response.setHeader(\'Content-Type\', \'text/plain\')" />A local view\n\\ No newline at end of file\n+<tal:block define="\n+             dummy python:request.response.setHeader(\'Content-Type\', \'text/plain\');\n+           " />A local view\ndiff --git a/plone/browserlayer/tests/profiles/testing/browserlayer.xml b/plone/browserlayer/tests/profiles/testing/browserlayer.xml\nindex 093dba9..2633d4a 100644\n--- a/plone/browserlayer/tests/profiles/testing/browserlayer.xml\n+++ b/plone/browserlayer/tests/profiles/testing/browserlayer.xml\n@@ -1,4 +1,6 @@\n+<?xml version="1.0" encoding="utf-8"?>\n <layers>\n-    <layer name="plone.browserlayer.tests"\n-           interface="plone.browserlayer.tests.interfaces.IMyProductLayer" />\n+  <layer interface="plone.browserlayer.tests.interfaces.IMyProductLayer"\n+         name="plone.browserlayer.tests"\n+  />\n </layers>\ndiff --git a/plone/browserlayer/tests/profiles/uninstall/browserlayer.xml b/plone/browserlayer/tests/profiles/uninstall/browserlayer.xml\nindex b586cc0..422ed62 100644\n--- a/plone/browserlayer/tests/profiles/uninstall/browserlayer.xml\n+++ b/plone/browserlayer/tests/profiles/uninstall/browserlayer.xml\n@@ -1,7 +1,10 @@\n+<?xml version="1.0" encoding="utf-8"?>\n <layers>\n-    <layer name="plone.browserlayer.tests"\n-           remove="true" />\n-    <!-- remove not existing should not doing more than a log -->\n-    <layer name="plone.browserlayer.tests.notexisting"\n-           remove="true" />\n+  <layer name="plone.browserlayer.tests"\n+         remove="true"\n+  />\n+  <!-- remove not existing should not doing more than a log -->\n+  <layer name="plone.browserlayer.tests.notexisting"\n+         remove="true"\n+  />\n </layers>\ndiff --git a/plone/browserlayer/tests/standard.pt b/plone/browserlayer/tests/standard.pt\nindex b2d96b2..0fd1c71 100644\n--- a/plone/browserlayer/tests/standard.pt\n+++ b/plone/browserlayer/tests/standard.pt\n@@ -1 +1,3 @@\n-<tal:block define="dummy python:request.response.setHeader(\'Content-Type\', \'text/plain\')" />A standard view\n\\ No newline at end of file\n+<tal:block define="\n+             dummy python:request.response.setHeader(\'Content-Type\', \'text/plain\');\n+           " />A standard view\ndiff --git a/plone/browserlayer/tests/testing.zcml b/plone/browserlayer/tests/testing.zcml\nindex c321966..6176fa0 100644\n--- a/plone/browserlayer/tests/testing.zcml\n+++ b/plone/browserlayer/tests/testing.zcml\n@@ -2,37 +2,38 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone.browserlayer">\n+    i18n_domain="plone.browserlayer"\n+    >\n \n-    <genericsetup:registerProfile\n-        name="testing"\n-        title="Tests for local browser layer support"\n-        directory="profiles/testing"\n-        description=""\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        />\n+  <genericsetup:registerProfile\n+      name="testing"\n+      title="Tests for local browser layer support"\n+      description=""\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/testing"\n+      />\n \n-    <genericsetup:registerProfile\n-        name="uninstall"\n-        title="Tests for uninstalling a local browser layer"\n-        directory="profiles/uninstall"\n-        description=""\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        />\n+  <genericsetup:registerProfile\n+      name="uninstall"\n+      title="Tests for uninstalling a local browser layer"\n+      description=""\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/uninstall"\n+      />\n \n-    <browser:page\n-        name="layer-test-view"\n-        for="*"\n-        layer=".tests.interfaces.IMyProductLayer"\n-        template="local.pt"\n-        permission="zope.Public"\n-        />\n+  <browser:page\n+      name="layer-test-view"\n+      for="*"\n+      template="local.pt"\n+      permission="zope.Public"\n+      layer=".tests.interfaces.IMyProductLayer"\n+      />\n \n-    <browser:page\n-        name="standard-test-view"\n-        for="*"\n-        template="standard.pt"\n-        permission="zope.Public"\n-        />\n+  <browser:page\n+      name="standard-test-view"\n+      for="*"\n+      template="standard.pt"\n+      permission="zope.Public"\n+      />\n \n </configure>\n'

Repository: plone.browserlayer


Branch: refs/heads/master
Date: 2023-03-01T01:05:55+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.browserlayer/commit/4ee8113d349c89050445b30b4438c1d85c11e662

fix: adjust tests

Files changed:
M plone/browserlayer/README.rst
M plone/browserlayer/tests/test_doctest.py

b'diff --git a/plone/browserlayer/README.rst b/plone/browserlayer/README.rst\nindex 4423a5e..14c293b 100644\n--- a/plone/browserlayer/README.rst\n+++ b/plone/browserlayer/README.rst\n@@ -26,6 +26,7 @@ We can view a view registered for the default layer, though:\n     >>> browser.open(layer[\'portal\'].absolute_url() + \'/@@standard-test-view\')\n     >>> print(browser.contents)\n     A standard view\n+    <BLANKLINE>\n \n However, if we install the product the interface is registered in the local\n site manager. Here we use the utility method directly, though we could also\ndiff --git a/plone/browserlayer/tests/test_doctest.py b/plone/browserlayer/tests/test_doctest.py\nindex c12e39d..a241974 100644\n--- a/plone/browserlayer/tests/test_doctest.py\n+++ b/plone/browserlayer/tests/test_doctest.py\n@@ -21,7 +21,11 @@ def test_suite():\n                 doctest.DocFileSuite(\n                     "README.rst",\n                     package="plone.browserlayer",\n-                    optionflags=(doctest.ELLIPSIS | doctest.REPORT_ONLY_FIRST_FAILURE),\n+                    optionflags=(\n+                        doctest.ELLIPSIS\n+                        | doctest.REPORT_ONLY_FIRST_FAILURE\n+                        | doctest.NORMALIZE_WHITESPACE\n+                    ),\n                     checker=Py23DocChecker(),\n                 ),\n                 layer=PLONEBROWSERLAYER_FUNCTIONAL_TESTING,\n'

Repository: plone.browserlayer


Branch: refs/heads/master
Date: 2023-03-01T01:06:24+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.browserlayer/commit/ec94bfeca947eeb727cc02398500b4b7a8fac065

fix: remove python 2 compatiblity code

Files changed:
M plone/browserlayer/tests/test_doctest.py

b'diff --git a/plone/browserlayer/tests/test_doctest.py b/plone/browserlayer/tests/test_doctest.py\nindex a241974..56f294b 100644\n--- a/plone/browserlayer/tests/test_doctest.py\n+++ b/plone/browserlayer/tests/test_doctest.py\n@@ -2,18 +2,9 @@\n from plone.testing import layered\n \n import doctest\n-import re\n-import six\n import unittest\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            want = re.sub("urllib.error.HTTPError", "HTTPError", want)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     return unittest.TestSuite(\n         [\n@@ -26,7 +17,6 @@ def test_suite():\n                         | doctest.REPORT_ONLY_FIRST_FAILURE\n                         | doctest.NORMALIZE_WHITESPACE\n                     ),\n-                    checker=Py23DocChecker(),\n                 ),\n                 layer=PLONEBROWSERLAYER_FUNCTIONAL_TESTING,\n             )\n'

Repository: plone.browserlayer


Branch: refs/heads/master
Date: 2023-03-01T01:06:26+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.browserlayer/commit/cdd00f8ed239060fc1bbf59e73460fcfd9ad2926

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 9cbef0d..201e523 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -33,7 +33,14 @@\n     namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n-    extras_require=dict(test=["plone.app.testing"]),\n+    extras_require=dict(\n+        test=[\n+            "plone.app.testing",\n+            "plone.testing",\n+            "transaction",\n+            "zope.event",\n+        ]\n+    ),\n     install_requires=[\n         "setuptools",\n         "zope.component",\n'

Repository: plone.browserlayer


Branch: refs/heads/master
Date: 2023-03-01T01:06:26+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.browserlayer/commit/673bceacdbbfb29247e83d85e748ae46e2e0f193

chore: typos

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex d4916be..f13f3e5 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -111,7 +111,7 @@ Fixes:\n 2.1.2 (2012-10-03)\n ------------------\n \n-- Add support for calling many times remove in export (ie:even when no corresponding layer is registred, remove option should not throw exception).\n+- Add support for calling many times remove in export (ie:even when no corresponding layer is registered, remove option should not throw exception).\n   [toutpt]\n \n 2.1.1 (2011-11-24)\n'

Repository: plone.browserlayer


Branch: refs/heads/master
Date: 2023-03-01T01:06:26+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.browserlayer/commit/4a436fc3146f2e9c5eb5d8bcb6946f7878712860

chore: pyroma

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 201e523..fa7047d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -24,6 +24,7 @@\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n+    python_requires=">=3.8",\n     keywords="plone browser layer",\n     author="Plone Foundation",\n     author_email="plone-developers@lists.sourceforge.net",\n'

Repository: plone.browserlayer


Branch: refs/heads/master
Date: 2023-03-01T11:34:31+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.browserlayer/commit/79ea092a3a1e8730fd978caf4d9b0267f6b0e399

Merge pull request #11 from plone/config-with-default-template-6dbd685b

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/ba6bcc29.internal
A tox.ini
M CHANGES.rst
M plone/__init__.py
M plone/browserlayer/README.rst
M plone/browserlayer/configure.zcml
M plone/browserlayer/exportimport.py
M plone/browserlayer/interfaces.py
M plone/browserlayer/layer.py
M plone/browserlayer/testing.py
M plone/browserlayer/tests/__init__.py
M plone/browserlayer/tests/interfaces.py
M plone/browserlayer/tests/local.pt
M plone/browserlayer/tests/profiles/testing/browserlayer.xml
M plone/browserlayer/tests/profiles/uninstall/browserlayer.xml
M plone/browserlayer/tests/standard.pt
M plone/browserlayer/tests/test_doctest.py
M plone/browserlayer/tests/testing.zcml
M plone/browserlayer/utils.py
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..52258da\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "ba6bcc29"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..a3085c9\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.1\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.1"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex d4916be..f13f3e5 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -111,7 +111,7 @@ Fixes:\n 2.1.2 (2012-10-03)\n ------------------\n \n-- Add support for calling many times remove in export (ie:even when no corresponding layer is registred, remove option should not throw exception).\n+- Add support for calling many times remove in export (ie:even when no corresponding layer is registered, remove option should not throw exception).\n   [toutpt]\n \n 2.1.1 (2011-11-24)\ndiff --git a/news/ba6bcc29.internal b/news/ba6bcc29.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/ba6bcc29.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/browserlayer/README.rst b/plone/browserlayer/README.rst\nindex 4423a5e..14c293b 100644\n--- a/plone/browserlayer/README.rst\n+++ b/plone/browserlayer/README.rst\n@@ -26,6 +26,7 @@ We can view a view registered for the default layer, though:\n     >>> browser.open(layer[\'portal\'].absolute_url() + \'/@@standard-test-view\')\n     >>> print(browser.contents)\n     A standard view\n+    <BLANKLINE>\n \n However, if we install the product the interface is registered in the local\n site manager. Here we use the utility method directly, though we could also\ndiff --git a/plone/browserlayer/configure.zcml b/plone/browserlayer/configure.zcml\nindex ae62dca..42e5c47 100644\n--- a/plone/browserlayer/configure.zcml\n+++ b/plone/browserlayer/configure.zcml\n@@ -1,31 +1,34 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone.browserlayer">\n+    i18n_domain="plone.browserlayer"\n+    >\n \n-    <genericsetup:importStep\n-        name="browserlayer"\n-        title="Package browser layers"\n-        description="Enables use of skin layers for installed products."\n-        handler="plone.browserlayer.exportimport.importLayers">\n-        <depends name="componentregistry" />\n-    </genericsetup:importStep>\n+  <genericsetup:importStep\n+      name="browserlayer"\n+      title="Package browser layers"\n+      description="Enables use of skin layers for installed products."\n+      handler="plone.browserlayer.exportimport.importLayers"\n+      >\n+    <depends name="componentregistry" />\n+  </genericsetup:importStep>\n \n-    <genericsetup:exportStep\n-        name="browserlayer"\n-        title="Package browser layers"\n-        description="Export package browser layers"\n-        handler="plone.browserlayer.exportimport.exportLayers"\n-        />\n+  <genericsetup:exportStep\n+      name="browserlayer"\n+      title="Package browser layers"\n+      description="Export package browser layers"\n+      handler="plone.browserlayer.exportimport.exportLayers"\n+      />\n \n-    <subscriber\n-        for="Products.CMFCore.interfaces.ISiteRoot\n-             zope.traversing.interfaces.IBeforeTraverseEvent"\n-        handler=".layer.mark_layer"\n-        />\n+  <subscriber\n+      for="Products.CMFCore.interfaces.ISiteRoot\n+           zope.traversing.interfaces.IBeforeTraverseEvent"\n+      handler=".layer.mark_layer"\n+      />\n \n-    <adapter\n-        factory=".exportimport.BrowserLayerXMLAdapter"\n-        name="plone.browserlayer" />\n+  <adapter\n+      factory=".exportimport.BrowserLayerXMLAdapter"\n+      name="plone.browserlayer"\n+      />\n \n </configure>\ndiff --git a/plone/browserlayer/exportimport.py b/plone/browserlayer/exportimport.py\nindex 36581f0..38d483b 100644\n--- a/plone/browserlayer/exportimport.py\n+++ b/plone/browserlayer/exportimport.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.browserlayer.interfaces import ILocalBrowserLayerType\n from plone.browserlayer.utils import register_layer\n from plone.browserlayer.utils import unregister_layer\n@@ -15,36 +14,35 @@\n \n \n def dummyGetId():\n-    return \'\'\n+    return ""\n \n \n @implementer(IBody)\n @adapter(IComponentRegistry, ISetupEnviron)\n class BrowserLayerXMLAdapter(XMLAdapterBase):\n-    """Im- and exporter for local browser layers\n-    """\n+    """Im- and exporter for local browser layers"""\n \n-    name = \'browserlayer\'\n-    _LOGGER_ID = \'browserlayer\'\n+    name = "browserlayer"\n+    _LOGGER_ID = "browserlayer"\n \n     def _exportNode(self):\n         # hack around an issue where _getObjectNode expects to have the context\n         # a meta_type and a getId method, which isn\'t the case for a component\n         # registry\n         if IComponentRegistry.providedBy(self.context):\n-            self.context.meta_type = \'ComponentRegistry\'\n+            self.context.meta_type = "ComponentRegistry"\n             self.context.getId = dummyGetId\n-        node = self._getObjectNode(\'layers\')\n+        node = self._getObjectNode("layers")\n         if IComponentRegistry.providedBy(self.context):\n-            del(self.context.meta_type)\n-            del(self.context.getId)\n+            del self.context.meta_type\n+            del self.context.getId\n         node.appendChild(self._extractLayers())\n-        self._logger.info(\'Browser layers exported\')\n+        self._logger.info("Browser layers exported")\n         return node\n \n     def _importNode(self, node):\n         self._initProvider(node)\n-        self._logger.info(\'Browser layers imported\')\n+        self._logger.info("Browser layers imported")\n \n     def _initProvider(self, node):\n         if self.environ.shouldPurge():\n@@ -52,54 +50,58 @@ def _initProvider(self, node):\n         self._initLayers(node)\n \n     def _purgeLayers(self):\n-        registeredLayers = [r.name for r in self.context.registeredUtilities()\n-                            if r.provided == ILocalBrowserLayerType]\n+        registeredLayers = [\n+            r.name\n+            for r in self.context.registeredUtilities()\n+            if r.provided == ILocalBrowserLayerType\n+        ]\n         for name in registeredLayers:\n             unregister_layer(name, site_manager=self.context)\n \n     def _initLayers(self, node):\n         for child in node.childNodes:\n-            if child.nodeName.lower() == \'layer\':\n-                name = child.getAttribute(\'name\')\n-                if child.getAttribute(\'remove\'):\n+            if child.nodeName.lower() == "layer":\n+                name = child.getAttribute("name")\n+                if child.getAttribute("remove"):\n                     try:\n                         unregister_layer(name, site_manager=self.context)\n                     except KeyError as e:\n                         self._logger.info(e)\n                     continue\n-                interface = _resolveDottedName(child.getAttribute(\'interface\'))\n+                interface = _resolveDottedName(child.getAttribute("interface"))\n                 register_layer(interface, name, site_manager=self.context)\n \n     def _extractLayers(self):\n         fragment = self._doc.createDocumentFragment()\n \n-        registrations = [r for r in self.context.registeredUtilities()\n-                         if r.provided == ILocalBrowserLayerType]\n+        registrations = [\n+            r\n+            for r in self.context.registeredUtilities()\n+            if r.provided == ILocalBrowserLayerType\n+        ]\n \n         registrations.sort()\n \n         for r in registrations:\n-            child = self._doc.createElement(\'layer\')\n-            child.setAttribute(\'name\', r.name)\n-            child.setAttribute(\'interface\', _getDottedName(r.component))\n+            child = self._doc.createElement("layer")\n+            child.setAttribute("name", r.name)\n+            child.setAttribute("interface", _getDottedName(r.component))\n             fragment.appendChild(child)\n \n         return fragment\n \n \n def importLayers(context):\n-    """Import local browser layers\n-    """\n+    """Import local browser layers"""\n     sm = getSiteManager(context.getSite())\n     if sm is None or not IComponentRegistry.providedBy(sm):\n-        logger = context.getLogger(\'browserlayer\')\n+        logger = context.getLogger("browserlayer")\n         logger.info("Can not register components - no site manager found.")\n         return\n \n-    importer = queryMultiAdapter((sm, context), IBody,\n-                                 name=u\'plone.browserlayer\')\n+    importer = queryMultiAdapter((sm, context), IBody, name="plone.browserlayer")\n     if importer is not None:\n-        filename = \'%s%s\' % (importer.name, importer.suffix)\n+        filename = f"{importer.name}{importer.suffix}"\n         body = context.readDataFile(filename)\n         if body is not None:\n             importer.filename = filename  # for error reporting\n@@ -107,18 +109,16 @@ def importLayers(context):\n \n \n def exportLayers(context):\n-    """Export local browser layers\n-    """\n+    """Export local browser layers"""\n     sm = getSiteManager(context.getSite())\n     if sm is None or not IComponentRegistry.providedBy(sm):\n-        logger = context.getLogger(\'browserlayer\')\n+        logger = context.getLogger("browserlayer")\n         logger.info("Can not register components - no site manager found.")\n         return\n \n-    exporter = queryMultiAdapter((sm, context), IBody,\n-                                 name=u\'plone.browserlayer\')\n+    exporter = queryMultiAdapter((sm, context), IBody, name="plone.browserlayer")\n     if exporter is not None:\n-        filename = \'%s%s\' % (exporter.name, exporter.suffix)\n+        filename = f"{exporter.name}{exporter.suffix}"\n         body = exporter.body\n         if body is not None:\n             context.writeDataFile(filename, body, exporter.mime_type)\ndiff --git a/plone/browserlayer/interfaces.py b/plone/browserlayer/interfaces.py\nindex ec62136..3efc134 100644\n--- a/plone/browserlayer/interfaces.py\n+++ b/plone/browserlayer/interfaces.py\n@@ -1,7 +1,5 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \n class ILocalBrowserLayerType(Interface):\n-    """Describes the type of interface an ILocalBrowserLayer is.\n-    """\n+    """Describes the type of interface an ILocalBrowserLayer is."""\ndiff --git a/plone/browserlayer/layer.py b/plone/browserlayer/layer.py\nindex 29d8ff7..b651b7f 100644\n--- a/plone/browserlayer/layer.py\n+++ b/plone/browserlayer/layer.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.browserlayer.interfaces import ILocalBrowserLayerType\n from zope.component import getAllUtilitiesRegisteredFor\n from zope.interface import directlyProvidedBy\n@@ -7,8 +6,7 @@\n \n \n def mark_layer(site, event):\n-    """Mark the request with all installed layers.\n-    """\n+    """Mark the request with all installed layers."""\n     if getattr(event.request, "_plonebrowserlayer_", False):\n         return\n     event.request._plonebrowserlayer_ = True\ndiff --git a/plone/browserlayer/testing.py b/plone/browserlayer/testing.py\nindex 9b5aa1e..c2cab24 100644\n--- a/plone/browserlayer/testing.py\n+++ b/plone/browserlayer/testing.py\n@@ -1,14 +1,13 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import PloneSandboxLayer\n from plone.app.testing.layers import FunctionalTesting\n \n \n class PloneBrowserlayerLayer(PloneSandboxLayer):\n-\n     def setUpZope(self, app, configurationContext):\n         import plone.browserlayer.tests\n+\n         self.debug_mode = True\n-        self.loadZCML(\'tests/testing.zcml\', package=plone.browserlayer)\n+        self.loadZCML("tests/testing.zcml", package=plone.browserlayer)\n         self.loadZCML(package=plone.browserlayer)\n         self.debug_mode = False\n \n@@ -16,6 +15,5 @@ def setUpZope(self, app, configurationContext):\n PLONEBROWSERLAYER_FIXTURE = PloneBrowserlayerLayer()\n \n PLONEBROWSERLAYER_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONEBROWSERLAYER_FIXTURE,),\n-    name="PloneBrowserlayer:Functional"\n+    bases=(PLONEBROWSERLAYER_FIXTURE,), name="PloneBrowserlayer:Functional"\n )\ndiff --git a/plone/browserlayer/tests/__init__.py b/plone/browserlayer/tests/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/browserlayer/tests/__init__.py\n+++ b/plone/browserlayer/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/browserlayer/tests/interfaces.py b/plone/browserlayer/tests/interfaces.py\nindex d1a326e..22d1f39 100644\n--- a/plone/browserlayer/tests/interfaces.py\n+++ b/plone/browserlayer/tests/interfaces.py\n@@ -1,7 +1,5 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \n class IMyProductLayer(Interface):\n-    """A layer unique to this product.\n-    """\n+    """A layer unique to this product."""\ndiff --git a/plone/browserlayer/tests/local.pt b/plone/browserlayer/tests/local.pt\nindex 714e684..3f07bf0 100644\n--- a/plone/browserlayer/tests/local.pt\n+++ b/plone/browserlayer/tests/local.pt\n@@ -1 +1,3 @@\n-<tal:block define="dummy python:request.response.setHeader(\'Content-Type\', \'text/plain\')" />A local view\n\\ No newline at end of file\n+<tal:block define="\n+             dummy python:request.response.setHeader(\'Content-Type\', \'text/plain\');\n+           " />A local view\ndiff --git a/plone/browserlayer/tests/profiles/testing/browserlayer.xml b/plone/browserlayer/tests/profiles/testing/browserlayer.xml\nindex 093dba9..2633d4a 100644\n--- a/plone/browserlayer/tests/profiles/testing/browserlayer.xml\n+++ b/plone/browserlayer/tests/profiles/testing/browserlayer.xml\n@@ -1,4 +1,6 @@\n+<?xml version="1.0" encoding="utf-8"?>\n <layers>\n-    <layer name="plone.browserlayer.tests"\n-           interface="plone.browserlayer.tests.interfaces.IMyProductLayer" />\n+  <layer interface="plone.browserlayer.tests.interfaces.IMyProductLayer"\n+         name="plone.browserlayer.tests"\n+  />\n </layers>\ndiff --git a/plone/browserlayer/tests/profiles/uninstall/browserlayer.xml b/plone/browserlayer/tests/profiles/uninstall/browserlayer.xml\nindex b586cc0..422ed62 100644\n--- a/plone/browserlayer/tests/profiles/uninstall/browserlayer.xml\n+++ b/plone/browserlayer/tests/profiles/uninstall/browserlayer.xml\n@@ -1,7 +1,10 @@\n+<?xml version="1.0" encoding="utf-8"?>\n <layers>\n-    <layer name="plone.browserlayer.tests"\n-           remove="true" />\n-    <!-- remove not existing should not doing more than a log -->\n-    <layer name="plone.browserlayer.tests.notexisting"\n-           remove="true" />\n+  <layer name="plone.browserlayer.tests"\n+         remove="true"\n+  />\n+  <!-- remove not existing should not doing more than a log -->\n+  <layer name="plone.browserlayer.tests.notexisting"\n+         remove="true"\n+  />\n </layers>\ndiff --git a/plone/browserlayer/tests/standard.pt b/plone/browserlayer/tests/standard.pt\nindex b2d96b2..0fd1c71 100644\n--- a/plone/browserlayer/tests/standard.pt\n+++ b/plone/browserlayer/tests/standard.pt\n@@ -1 +1,3 @@\n-<tal:block define="dummy python:request.response.setHeader(\'Content-Type\', \'text/plain\')" />A standard view\n\\ No newline at end of file\n+<tal:block define="\n+             dummy python:request.response.setHeader(\'Content-Type\', \'text/plain\');\n+           " />A standard view\ndiff --git a/plone/browserlayer/tests/test_doctest.py b/plone/browserlayer/tests/test_doctest.py\nindex ae839ea..56f294b 100644\n--- a/plone/browserlayer/tests/test_doctest.py\n+++ b/plone/browserlayer/tests/test_doctest.py\n@@ -1,32 +1,24 @@\n-# -*- coding: utf-8 -*-\n from plone.browserlayer.testing import PLONEBROWSERLAYER_FUNCTIONAL_TESTING\n from plone.testing import layered\n \n import doctest\n-import re\n-import six\n import unittest\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            want = re.sub(\'urllib.error.HTTPError\', \'HTTPError\', want)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n-    return unittest.TestSuite([\n-        layered(\n-            doctest.DocFileSuite(\n-                \'README.rst\',\n-                package=\'plone.browserlayer\',\n-                optionflags=(\n-                    doctest.ELLIPSIS |\n-                    doctest.REPORT_ONLY_FIRST_FAILURE\n+    return unittest.TestSuite(\n+        [\n+            layered(\n+                doctest.DocFileSuite(\n+                    "README.rst",\n+                    package="plone.browserlayer",\n+                    optionflags=(\n+                        doctest.ELLIPSIS\n+                        | doctest.REPORT_ONLY_FIRST_FAILURE\n+                        | doctest.NORMALIZE_WHITESPACE\n+                    ),\n                 ),\n-                checker=Py23DocChecker(),\n-            ),\n-            layer=PLONEBROWSERLAYER_FUNCTIONAL_TESTING\n-        )\n-    ])\n+                layer=PLONEBROWSERLAYER_FUNCTIONAL_TESTING,\n+            )\n+        ]\n+    )\ndiff --git a/plone/browserlayer/tests/testing.zcml b/plone/browserlayer/tests/testing.zcml\nindex c321966..6176fa0 100644\n--- a/plone/browserlayer/tests/testing.zcml\n+++ b/plone/browserlayer/tests/testing.zcml\n@@ -2,37 +2,38 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone.browserlayer">\n+    i18n_domain="plone.browserlayer"\n+    >\n \n-    <genericsetup:registerProfile\n-        name="testing"\n-        title="Tests for local browser layer support"\n-        directory="profiles/testing"\n-        description=""\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        />\n+  <genericsetup:registerProfile\n+      name="testing"\n+      title="Tests for local browser layer support"\n+      description=""\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/testing"\n+      />\n \n-    <genericsetup:registerProfile\n-        name="uninstall"\n-        title="Tests for uninstalling a local browser layer"\n-        directory="profiles/uninstall"\n-        description=""\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        />\n+  <genericsetup:registerProfile\n+      name="uninstall"\n+      title="Tests for uninstalling a local browser layer"\n+      description=""\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/uninstall"\n+      />\n \n-    <browser:page\n-        name="layer-test-view"\n-        for="*"\n-        layer=".tests.interfaces.IMyProductLayer"\n-        template="local.pt"\n-        permission="zope.Public"\n-        />\n+  <browser:page\n+      name="layer-test-view"\n+      for="*"\n+      template="local.pt"\n+      permission="zope.Public"\n+      layer=".tests.interfaces.IMyProductLayer"\n+      />\n \n-    <browser:page\n-        name="standard-test-view"\n-        for="*"\n-        template="standard.pt"\n-        permission="zope.Public"\n-        />\n+  <browser:page\n+      name="standard-test-view"\n+      for="*"\n+      template="standard.pt"\n+      permission="zope.Public"\n+      />\n \n </configure>\ndiff --git a/plone/browserlayer/utils.py b/plone/browserlayer/utils.py\nindex 1b4d112..ce2bb4f 100644\n--- a/plone/browserlayer/utils.py\n+++ b/plone/browserlayer/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.browserlayer.interfaces import ILocalBrowserLayerType\n from zope.component import getAllUtilitiesRegisteredFor\n from zope.component import getSiteManager\n@@ -22,9 +21,9 @@ def register_layer(layer, name, site_manager=None):\n     if not ILocalBrowserLayerType.providedBy(layer):\n         alsoProvides(layer, ILocalBrowserLayerType)\n \n-    site_manager.registerUtility(component=layer,\n-                                 provided=ILocalBrowserLayerType,\n-                                 name=name)\n+    site_manager.registerUtility(\n+        component=layer, provided=ILocalBrowserLayerType, name=name\n+    )\n \n \n def unregister_layer(name, site_manager=None):\n@@ -39,12 +38,11 @@ def unregister_layer(name, site_manager=None):\n     if site_manager is None:\n         site_manager = getSiteManager()\n \n-    site_manager.unregisterUtility(component=existing,\n-                                   provided=ILocalBrowserLayerType,\n-                                   name=name)\n+    site_manager.unregisterUtility(\n+        component=existing, provided=ILocalBrowserLayerType, name=name\n+    )\n \n \n def registered_layers():\n-    """Return all currently registered layers\n-    """\n+    """Return all currently registered layers"""\n     return getAllUtilitiesRegisteredFor(ILocalBrowserLayerType)\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..0f96c85 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,24 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\ndiff --git a/setup.cfg b/setup.cfg\nindex 526aeb2..e70eb25 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,24 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\n+    lint-requirements.txt\ndiff --git a/setup.py b/setup.py\nindex 1001d32..fa7047d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,18 +1,14 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n-version = \'3.0.1.dev0\'\n+\n+version = "3.0.1.dev0"\n \n setup(\n-    name=\'plone.browserlayer\',\n+    name="plone.browserlayer",\n     version=version,\n     description="Browser layer management for Zope applications",\n-    long_description=(\n-        open("README.rst").read() +\n-        "\\n" +\n-        open("CHANGES.rst").read()\n-    ),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -28,27 +24,31 @@\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'plone browser layer\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://github.com/plone/plone.browserlayer\',\n-    license=\'GPL version 2\',\n+    python_requires=">=3.8",\n+    keywords="plone browser layer",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://github.com/plone/plone.browserlayer",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-           \'plone.app.testing\',\n+            "plone.app.testing",\n+            "plone.testing",\n+            "transaction",\n+            "zope.event",\n         ]\n     ),\n     install_requires=[\n-        \'setuptools\',\n-        \'zope.component\',\n-        \'zope.interface\',\n-        \'zope.traversing >= 3.9.0\',\n-        \'Products.CMFCore\',\n-        \'Products.GenericSetup>=1.4\',\n-        \'Zope\',\n+        "setuptools",\n+        "zope.component",\n+        "zope.interface",\n+        "zope.traversing >= 3.9.0",\n+        "Products.CMFCore",\n+        "Products.GenericSetup>=1.4",\n+        "Zope",\n     ],\n )\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..bd0c937\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.10\n+    pipdeptree==2.3.3\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+description = run the tests of the distribution\n+deps =\n+    plone.browserlayer[test]\n+    pytest\n+    gocept.pytestlayer\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    pip install -e .[test]\n+    pytest\n'

