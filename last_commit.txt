Repository: plone.rfc822


Branch: refs/heads/master
Date: 2023-04-23T19:34:06+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.rfc822/commit/0310f4d11a39ffe1fe195954f6dfc2829ea2ab8f

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/a864b30f.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..ab85364\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "a864b30f"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/a864b30f.internal b/news/a864b30f.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/a864b30f.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..639f77a 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,65 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..7b72ec1\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,76 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies\n+skip_install = true\n+deps =\n+    build\n+    z3c.dependencychecker==2.11\n+commands =\n+    python -m build --sdist --no-isolation\n+    dependencychecker\n+\n+[testenv:dependencies-graph]\n+description = generate a graph out of the package\'s dependencies\n+deps =\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+use_develop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.rfc822 {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+use_develop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.rfc822 {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

Repository: plone.rfc822


Branch: refs/heads/master
Date: 2023-04-23T19:35:01+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.rfc822/commit/5afb4757c7b7b58c9599a2cb6b2151aa4c580210

chore: pyupgrade

Files changed:
M plone/__init__.py
M plone/rfc822/__init__.py
M plone/rfc822/_utils.py
M plone/rfc822/defaultfields.py
M plone/rfc822/interfaces.py
M plone/rfc822/supermodel.py
M plone/rfc822/tests.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/rfc822/__init__.py b/plone/rfc822/__init__.py\nindex 98157cb..ebee1f1 100644\n--- a/plone/rfc822/__init__.py\n+++ b/plone/rfc822/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.rfc822._utils import constructMessage\n from plone.rfc822._utils import constructMessageFromSchema\n from plone.rfc822._utils import constructMessageFromSchemata\ndiff --git a/plone/rfc822/_utils.py b/plone/rfc822/_utils.py\nindex 8bcd098..ac3d0af 100644\n--- a/plone/rfc822/_utils.py\n+++ b/plone/rfc822/_utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Implementation of IMessageAPI methods.\n \n import these from plone.rfc822 directly, not from this module.\n@@ -26,9 +25,9 @@ def safe_native_string(value, encoding=\'utf8\'):\n     \'\'\' Try to convert value into a native string\n     \'\'\'\n     if six.PY2:\n-        if isinstance(value, six.text_type):\n+        if isinstance(value, str):\n             return value.encode(encoding)\n-    elif isinstance(value, six.binary_type):\n+    elif isinstance(value, bytes):\n         return value.decode(encoding)\n     if not isinstance(value, str):\n         raise ValueError(\'Cannot convert %r into a native string\' % value)\n@@ -108,7 +107,7 @@ def constructMessage(context, fields, charset="utf-8"):\n         marshaler = queryMultiAdapter((context, field), IFieldMarshaler)\n         if marshaler is None:\n             logger.debug(\n-                "No marshaler found for field {0} of {1}".format(\n+                "No marshaler found for field {} of {}".format(\n                     name, repr(context)\n                 )\n             )\n@@ -117,7 +116,7 @@ def constructMessage(context, fields, charset="utf-8"):\n             value = marshaler.marshal(charset, primary=False)\n         except ValueError as e:\n             logger.debug(\n-                "Marshaling of {0} for {1} failed: {2}".format(\n+                "Marshaling of {} for {} failed: {}".format(\n                     name, repr(context), str(e)\n                 )\n             )\n@@ -194,13 +193,13 @@ def initializeObject(context, fields, message, defaultCharset="utf-8"):\n         name = name.lower()\n         fieldset = header_fields.get(name, None)\n         if fieldset is None or len(fieldset) == 0:\n-            logger.debug("No matching field found for header {0}".format(name))\n+            logger.debug(f"No matching field found for header {name}")\n             continue\n         field = fieldset.pop(0)\n         marshaler = queryMultiAdapter((context, field), IFieldMarshaler)\n         if marshaler is None:\n             logger.debug(\n-                "No marshaler found for field {0} of {1}".format(\n+                "No marshaler found for field {} of {}".format(\n                     name, repr(context)\n                 )\n             )\n@@ -214,7 +213,7 @@ def initializeObject(context, fields, message, defaultCharset="utf-8"):\n         #\n         # Also, replace escaped Newlines, for details see\n         # https://tools.ietf.org/html/rfc2822#section-3.2.2\n-        if isinstance(header_value, six.binary_type):\n+        if isinstance(header_value, bytes):\n             header_value = header_value.replace(b"\\r\\n", b"\\n")\n             header_value = header_value.replace(b"\\\\n", b"\\n")\n         else:\n@@ -232,7 +231,7 @@ def initializeObject(context, fields, message, defaultCharset="utf-8"):\n             # interface allows demarshal() to raise ValueError to indicate\n             # marshalling failed\n             logger.debug(\n-                "Demarshalling of {0} for {1} failed: {2}".format(\n+                "Demarshalling of {} for {} failed: {}".format(\n                     name, repr(context), str(e)\n                 )\n             )\n@@ -246,7 +245,7 @@ def initializeObject(context, fields, message, defaultCharset="utf-8"):\n         return\n \n     # A single payload is a string, multiparts are lists\n-    if isinstance(payloads, six.string_types):\n+    if isinstance(payloads, str):\n         if len(primary) != 1:\n             raise ValueError(\n                 "Got a single string payload for message, but no primary "\n@@ -290,7 +289,7 @@ def initializeObject(context, fields, message, defaultCharset="utf-8"):\n             # interface allows demarshal() to raise ValueError to\n             # indicate marshalling failed\n             logger.debug(\n-                "Demarshalling of {0} for {1} failed: {2}".format(\n+                "Demarshalling of {} for {} failed: {}".format(\n                     name, repr(context), str(e)\n                 )\n             )\ndiff --git a/plone/rfc822/defaultfields.py b/plone/rfc822/defaultfields.py\nindex 250a6b2..1cb0ca0 100644\n--- a/plone/rfc822/defaultfields.py\n+++ b/plone/rfc822/defaultfields.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Default field marshalers for the fields in zope.schema.\n \n Note that none of the marshalers will return a value for getContentType(),\n@@ -52,7 +51,7 @@\n \n \n @implementer(IFieldMarshaler)\n-class BaseFieldMarshaler(object):\n+class BaseFieldMarshaler:\n     """Base class for field marshalers\n     """\n \n@@ -136,10 +135,10 @@ class UnicodeFieldMarshaler(BaseFieldMarshaler):\n     def encode(self, value, charset=\'utf-8\', primary=False):\n         if value is None:\n             return\n-        if isinstance(value, six.binary_type):\n+        if isinstance(value, bytes):\n             # value already encoded\n             return value\n-        return six.text_type(value).encode(charset)\n+        return str(value).encode(charset)\n \n     def decode(\n         self,\n@@ -149,7 +148,7 @@ def decode(\n         contentType=None,\n         primary=False,\n     ):\n-        if isinstance(value, six.binary_type):\n+        if isinstance(value, bytes):\n             unicodeValue = value.decode(charset)\n         else:\n             unicodeValue = value\n@@ -168,10 +167,10 @@ class UnicodeValueFieldMarshaler(UnicodeFieldMarshaler):\n     """\n \n     def encode(self, value, charset=\'utf-8\', primary=False):\n-        encoded = super(UnicodeValueFieldMarshaler, self).encode(\n+        encoded = super().encode(\n             value, charset, primary\n         )\n-        if not encoded or max(six.iterbytes(encoded)) < 128:\n+        if not encoded or max(iter(encoded)) < 128:\n             self.ascii = True\n         else:\n             self.ascii = False\n@@ -231,7 +230,7 @@ def decode(\n         contentType=None,\n         primary=False,\n     ):\n-        if isinstance(value, six.binary_type):\n+        if isinstance(value, bytes):\n             value = value.decode(charset)\n         try:\n             return dateutil.parser.parse(value)\n@@ -295,7 +294,7 @@ def decode(\n         primary=False,\n     ):\n         try:\n-            days, seconds, microseconds = [int(v) for v in value.split(":")]\n+            days, seconds, microseconds = (int(v) for v in value.split(":"))\n             return datetime.timedelta(days, seconds, microseconds)\n         except Exception as e:\n             raise ValueError(e)\n@@ -339,7 +338,7 @@ def encode(self, value, charset=\'utf-8\', primary=False):\n                 ascii = False\n \n         self.ascii = ascii\n-        if value_lines and isinstance(value_lines[0], six.binary_type):\n+        if value_lines and isinstance(value_lines[0], bytes):\n             return b\'||\'.join(value_lines)\n         else:\n             return \'||\'.join(value_lines)\n@@ -361,7 +360,7 @@ def decode(\n             )\n \n         listValue = []\n-        if isinstance(value, six.binary_type):\n+        if isinstance(value, bytes):\n             lines = value.split(b\'||\')\n         else:\n             lines = value.split(\'||\')\ndiff --git a/plone/rfc822/interfaces.py b/plone/rfc822/interfaces.py\nindex cdc09e0..5d1f113 100644\n--- a/plone/rfc822/interfaces.py\n+++ b/plone/rfc822/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope import schema\n from zope.interface import Attribute\n from zope.interface import Interface\n@@ -113,8 +112,8 @@ class IFieldMarshaler(Interface):\n     """\n \n     ascii = schema.Bool(\n-        title=u"ASCII only",\n-        description=u"Set this to true if this marshaler is guaranteed "\n+        title="ASCII only",\n+        description="Set this to true if this marshaler is guaranteed "\n         "to return ASCII characters only. This will allow "\n         "a header to be rendered without an encoding wrapper",\n         default=False,\ndiff --git a/plone/rfc822/supermodel.py b/plone/rfc822/supermodel.py\nindex 6d24d72..7476bb5 100644\n--- a/plone/rfc822/supermodel.py\n+++ b/plone/rfc822/supermodel.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n try:\n     from plone.supermodel.interfaces import IFieldMetadataHandler\n     HAVE_SUPERMODEL = True\n@@ -13,7 +12,7 @@\n     from zope.interface import implementer\n \n     @implementer(IFieldMetadataHandler)\n-    class PrimaryFieldMetadataHandler(object):\n+    class PrimaryFieldMetadataHandler:\n         """Define the ``marshal`` namespace.\n \n         This lets you write marshal:primary="true" on a field to mark it as\ndiff --git a/plone/rfc822/tests.py b/plone/rfc822/tests.py\nindex a2bb902..316c0ed 100644\n--- a/plone/rfc822/tests.py\n+++ b/plone/rfc822/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.rfc822._utils import safe_native_string\n from plone.testing import layered\n from plone.testing.zca import UNIT_TESTING\n@@ -25,8 +24,7 @@ class Py23DocChecker(doctest.OutputChecker):\n     def check_output(self, want, got, optionflags):\n         if six.PY2:\n             got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        if six.PY3:\n-            got = re.sub("b\'(.*?)\'", "\'\\\\1\'", got)\n+        got = re.sub("b\'(.*?)\'", "\'\\\\1\'", got)\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \n@@ -34,7 +32,7 @@ class TestUtils(unittest.TestCase):\n \n     def test_safe_native_string(self):\n         self.assertIsInstance(safe_native_string(b\'\'), str)\n-        self.assertIsInstance(safe_native_string(u\'\'), str)\n+        self.assertIsInstance(safe_native_string(\'\'), str)\n         self.assertRaises(ValueError, safe_native_string, None)\n \n \ndiff --git a/setup.py b/setup.py\nindex 6ba81e5..c98bf3d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: plone.rfc822


Branch: refs/heads/master
Date: 2023-04-23T19:36:08+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.rfc822/commit/949ee26a9400c7764756d9e45e1ff73a289af136

chore: black

Files changed:
M plone/__init__.py
M plone/rfc822/_utils.py
M plone/rfc822/defaultfields.py
M plone/rfc822/interfaces.py
M plone/rfc822/supermodel.py
M plone/rfc822/tests.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/rfc822/_utils.py b/plone/rfc822/_utils.py\nindex ac3d0af..fb75880 100644\n--- a/plone/rfc822/_utils.py\n+++ b/plone/rfc822/_utils.py\n@@ -21,16 +21,15 @@\n logger = logging.getLogger("plone.rfc822")\n \n \n-def safe_native_string(value, encoding=\'utf8\'):\n-    \'\'\' Try to convert value into a native string\n-    \'\'\'\n+def safe_native_string(value, encoding="utf8"):\n+    """Try to convert value into a native string"""\n     if six.PY2:\n         if isinstance(value, str):\n             return value.encode(encoding)\n     elif isinstance(value, bytes):\n         return value.decode(encoding)\n     if not isinstance(value, str):\n-        raise ValueError(\'Cannot convert %r into a native string\' % value)\n+        raise ValueError("Cannot convert %r into a native string" % value)\n     return value\n \n \n@@ -100,25 +99,21 @@ def constructMessage(context, fields, charset="utf-8"):\n \n     # First get all headers, storing primary fields for later\n     for name, field in fields:\n-        value = \'\'\n+        value = ""\n         if IPrimaryField.providedBy(field):\n             primaries.append((name, field))\n             continue\n         marshaler = queryMultiAdapter((context, field), IFieldMarshaler)\n         if marshaler is None:\n             logger.debug(\n-                "No marshaler found for field {} of {}".format(\n-                    name, repr(context)\n-                )\n+                "No marshaler found for field {} of {}".format(name, repr(context))\n             )\n             continue\n         try:\n             value = marshaler.marshal(charset, primary=False)\n         except ValueError as e:\n             logger.debug(\n-                "Marshaling of {} for {} failed: {}".format(\n-                    name, repr(context), str(e)\n-                )\n+                "Marshaling of {} for {} failed: {}".format(name, repr(context), str(e))\n             )\n             continue\n         if value is None:\n@@ -129,7 +124,7 @@ def constructMessage(context, fields, charset="utf-8"):\n             msg[name] = value\n         else:\n             # see https://tools.ietf.org/html/rfc2822#section-3.2.2\n-            if \'\\n\' in value:\n+            if "\\n" in value:\n                 value = value.replace("\\n", r"\\n")\n             msg[name] = Header(value, charset)\n \n@@ -139,25 +134,17 @@ def constructMessage(context, fields, charset="utf-8"):\n     return msg\n \n \n-@deprecate(\n-    "Use \'message.as_string()\' from \'email.message.Message\' class instead."\n-)\n+@deprecate("Use \'message.as_string()\' from \'email.message.Message\' class instead.")\n def renderMessage(message, mangleFromHeader=False):\n     # to be removed in a 3.x series\n     return message.as_string(mangleFromHeader)\n \n \n-def initializeObjectFromSchema(\n-    context, schema, message, defaultCharset="utf-8"\n-):\n-    initializeObject(\n-        context, getFieldsInOrder(schema), message, defaultCharset\n-    )\n+def initializeObjectFromSchema(context, schema, message, defaultCharset="utf-8"):\n+    initializeObject(context, getFieldsInOrder(schema), message, defaultCharset)\n \n \n-def initializeObjectFromSchemata(\n-    context, schemata, message, defaultCharset="utf-8"\n-):\n+def initializeObjectFromSchemata(context, schemata, message, defaultCharset="utf-8"):\n     """Convenience method which calls ``initializeObject()`` with all the\n     fields in order, of all the given schemata (a sequence of schema\n     interfaces).\n@@ -199,9 +186,7 @@ def initializeObject(context, fields, message, defaultCharset="utf-8"):\n         marshaler = queryMultiAdapter((context, field), IFieldMarshaler)\n         if marshaler is None:\n             logger.debug(\n-                "No marshaler found for field {} of {}".format(\n-                    name, repr(context)\n-                )\n+                "No marshaler found for field {} of {}".format(name, repr(context))\n             )\n             continue\n         header_value, header_charset = decode_header(value)[0]\ndiff --git a/plone/rfc822/defaultfields.py b/plone/rfc822/defaultfields.py\nindex 1cb0ca0..2d6cf09 100644\n--- a/plone/rfc822/defaultfields.py\n+++ b/plone/rfc822/defaultfields.py\n@@ -52,8 +52,7 @@\n \n @implementer(IFieldMarshaler)\n class BaseFieldMarshaler:\n-    """Base class for field marshalers\n-    """\n+    """Base class for field marshalers"""\n \n     ascii = False\n \n@@ -64,48 +63,41 @@ def __init__(self, context, field):\n         if field.interface is not None:\n             self.instance = field.interface(context, context)\n \n-    def marshal(self, charset=\'utf-8\', primary=False):\n+    def marshal(self, charset="utf-8", primary=False):\n         value = self._query(_marker)\n-        return (\n-            None if value is _marker else self.encode(value, charset, primary)\n-        )\n+        return None if value is _marker else self.encode(value, charset, primary)\n \n     def demarshal(\n         self,\n         value,\n         message=None,\n-        charset=\'utf-8\',\n+        charset="utf-8",\n         contentType=None,\n         primary=False,\n     ):\n-\n         if value:\n-            fieldValue = self.decode(\n-                value, message, charset, contentType, primary\n-            )\n+            fieldValue = self.decode(value, message, charset, contentType, primary)\n         else:\n             fieldValue = self.field.missing_value\n         self._set(fieldValue)\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n+    def encode(self, value, charset="utf-8", primary=False):\n         return None\n \n     def decode(\n         self,\n         value,\n         message=None,\n-        charset=\'utf-8\',\n+        charset="utf-8",\n         contentType=None,\n         primary=False,\n     ):\n-        raise ValueError(\n-            \'Demarshalling not implemented for %s\' % repr(self.field)\n-        )\n+        raise ValueError("Demarshalling not implemented for %s" % repr(self.field))\n \n     def getContentType(self):\n         return None\n \n-    def getCharset(self, default=\'utf-8\'):\n+    def getCharset(self, default="utf-8"):\n         return None\n \n     def postProcessMessage(self, message):\n@@ -117,10 +109,10 @@ def _query(self, default=None):\n         return self.field.query(self.instance, default)\n \n     def _set(self, value):\n-        if getattr(self.instance, \'marker\', False):\n+        if getattr(self.instance, "marker", False):\n             print(self.field.__name__)\n             print(value)\n-            print(\'-\' * 5)\n+            print("-" * 5)\n         try:\n             self.field.set(self.instance, value)\n         except TypeError as e:\n@@ -129,10 +121,9 @@ def _set(self, value):\n \n @adapter(Interface, IFromUnicode)\n class UnicodeFieldMarshaler(BaseFieldMarshaler):\n-    """Default marshaler for fields that support IFromUnicode\n-    """\n+    """Default marshaler for fields that support IFromUnicode"""\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n+    def encode(self, value, charset="utf-8", primary=False):\n         if value is None:\n             return\n         if isinstance(value, bytes):\n@@ -144,7 +135,7 @@ def decode(\n         self,\n         value,\n         message=None,\n-        charset=\'utf-8\',\n+        charset="utf-8",\n         contentType=None,\n         primary=False,\n     ):\n@@ -157,7 +148,7 @@ def decode(\n         except Exception as e:\n             raise ValueError(e)\n \n-    def getCharset(self, default=\'utf-8\'):\n+    def getCharset(self, default="utf-8"):\n         return default\n \n \n@@ -166,10 +157,8 @@ class UnicodeValueFieldMarshaler(UnicodeFieldMarshaler):\n     ASCII safe.\n     """\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n-        encoded = super().encode(\n-            value, charset, primary\n-        )\n+    def encode(self, value, charset="utf-8", primary=False):\n+        encoded = super().encode(value, charset, primary)\n         if not encoded or max(iter(encoded)) < 128:\n             self.ascii = True\n         else:\n@@ -184,7 +173,7 @@ class ASCIISafeFieldMarshaler(UnicodeFieldMarshaler):\n \n     ascii = True\n \n-    def getCharset(self, default=\'utf-8\'):\n+    def getCharset(self, default="utf-8"):\n         return None\n \n \n@@ -196,14 +185,14 @@ class BytesFieldMarshaler(BaseFieldMarshaler):\n \n     ascii = True\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n+    def encode(self, value, charset="utf-8", primary=False):\n         return value\n \n     def decode(\n         self,\n         value,\n         message=None,\n-        charset=\'utf-8\',\n+        charset="utf-8",\n         contentType=None,\n         primary=False,\n     ):\n@@ -212,12 +201,11 @@ def decode(\n \n @adapter(Interface, IDatetime)\n class DatetimeMarshaler(BaseFieldMarshaler):\n-    """Marshaler for Python datetime values\n-    """\n+    """Marshaler for Python datetime values"""\n \n     ascii = True\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n+    def encode(self, value, charset="utf-8", primary=False):\n         if value is None:\n             return None\n         return value.isoformat()\n@@ -226,7 +214,7 @@ def decode(\n         self,\n         value,\n         message=None,\n-        charset=\'utf-8\',\n+        charset="utf-8",\n         contentType=None,\n         primary=False,\n     ):\n@@ -249,7 +237,7 @@ class DateMarshaler(BaseFieldMarshaler):\n \n     ascii = True\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n+    def encode(self, value, charset="utf-8", primary=False):\n         if value is None:\n             return None\n         return value.isoformat()\n@@ -258,7 +246,7 @@ def decode(\n         self,\n         value,\n         message=None,\n-        charset=\'utf-8\',\n+        charset="utf-8",\n         contentType=None,\n         primary=False,\n     ):\n@@ -280,7 +268,7 @@ class TimedeltaMarshaler(BaseFieldMarshaler):\n \n     ascii = True\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n+    def encode(self, value, charset="utf-8", primary=False):\n         if value is None:\n             return None\n         return "%d:%d:%d" % (value.days, value.seconds, value.microseconds)\n@@ -289,7 +277,7 @@ def decode(\n         self,\n         value,\n         message=None,\n-        charset=\'utf-8\',\n+        charset="utf-8",\n         contentType=None,\n         primary=False,\n     ):\n@@ -302,12 +290,11 @@ def decode(\n \n @adapter(Interface, ICollection)\n class CollectionMarshaler(BaseFieldMarshaler):\n-    """Marshaler for collection values\n-    """\n+    """Marshaler for collection values"""\n \n     ascii = False\n \n-    def getCharset(self, default=\'utf-8\'):\n+    def getCharset(self, default="utf-8"):\n         valueTypeMarshaler = queryMultiAdapter(\n             (self.context, self.field.value_type), IFieldMarshaler\n         )\n@@ -315,7 +302,7 @@ def getCharset(self, default=\'utf-8\'):\n             return None\n         return valueTypeMarshaler.getCharset(default)\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n+    def encode(self, value, charset="utf-8", primary=False):\n         if value is None:\n             return None\n \n@@ -332,22 +319,22 @@ def encode(self, value, charset=\'utf-8\', primary=False):\n                 item, charset=charset, primary=primary\n             )\n             if marshaledValue is None:\n-                marshaledValue = \'\'\n+                marshaledValue = ""\n             value_lines.append(marshaledValue)\n             if not valueTypeMarshaler.ascii:\n                 ascii = False\n \n         self.ascii = ascii\n         if value_lines and isinstance(value_lines[0], bytes):\n-            return b\'||\'.join(value_lines)\n+            return b"||".join(value_lines)\n         else:\n-            return \'||\'.join(value_lines)\n+            return "||".join(value_lines)\n \n     def decode(\n         self,\n         value,\n         message=None,\n-        charset=\'utf-8\',\n+        charset="utf-8",\n         contentType=None,\n         primary=False,\n     ):\n@@ -356,19 +343,17 @@ def decode(\n         )\n         if valueTypeMarshaler is None:\n             raise ValueError(\n-                \'Cannot demarshal value type %s\' % repr(self.field.value_type)\n+                "Cannot demarshal value type %s" % repr(self.field.value_type)\n             )\n \n         listValue = []\n         if isinstance(value, bytes):\n-            lines = value.split(b\'||\')\n+            lines = value.split(b"||")\n         else:\n-            lines = value.split(\'||\')\n+            lines = value.split("||")\n         for line in lines:\n             listValue.append(\n-                valueTypeMarshaler.decode(\n-                    line, message, charset, contentType, primary\n-                )\n+                valueTypeMarshaler.decode(line, message, charset, contentType, primary)\n             )\n \n         sequenceType = self.field._type\ndiff --git a/plone/rfc822/interfaces.py b/plone/rfc822/interfaces.py\nindex 5d1f113..f1df2dc 100644\n--- a/plone/rfc822/interfaces.py\n+++ b/plone/rfc822/interfaces.py\n@@ -4,8 +4,7 @@\n \n \n class IPrimaryField(Interface):\n-    """Marker interface for the primary field in a schema\n-    """\n+    """Marker interface for the primary field in a schema"""\n \n \n class IPrimaryFieldInfo(Interface):\n@@ -13,6 +12,7 @@ class IPrimaryFieldInfo(Interface):\n \n     Content type frameworks should register an adapter to this interface.\n     """\n+\n     fieldname = Attribute("Field name")\n     field = Attribute("Field")\n     value = Attribute("Field value")\n@@ -26,18 +26,18 @@ class IMessageAPI(Interface):\n         >>> from plone.rfc822 import constructMessage\n     """\n \n-    def constructMessageFromSchema(context, schema, charset=\'utf-8\'):\n+    def constructMessageFromSchema(context, schema, charset="utf-8"):\n         """Convenience method which calls ``constructMessage()`` with all the\n         fields, in order, of the given schema interface\n         """\n \n-    def constructMessageFromSchemata(context, schemata, charset=\'utf-8\'):\n+    def constructMessageFromSchemata(context, schemata, charset="utf-8"):\n         """Convenience method which calls ``constructMessage()`` with all the\n         fields, in order, of all the given schemata (a sequence of schema\n         interfaces).\n         """\n \n-    def constructMessage(context, fields, charset=\'utf-8\'):\n+    def constructMessage(context, fields, charset="utf-8"):\n         """Helper method to construct a message.\n \n         ``context`` is a content object.\n@@ -64,28 +64,20 @@ def renderMessage(message, mangleFromHeader=False):\n         DEPRECATED. Use \'message.as_string()\' instead.\n         """\n \n-    def initializeObjectFromSchema(\n-        context,\n-        schema,\n-        message,\n-        defaultCharset=\'utf-8\'\n-    ):\n+    def initializeObjectFromSchema(context, schema, message, defaultCharset="utf-8"):\n         """Convenience method which calls ``initializeObject()`` with all the\n         fields, in order, of the given schema interface\n         """\n \n     def initializeObjectFromSchemata(\n-        context,\n-        schemata,\n-        message,\n-        defaultCharset=\'utf-8\'\n+        context, schemata, message, defaultCharset="utf-8"\n     ):\n         """Convenience method which calls ``initializeObject()`` with all the\n         fields in order, of all the given schemata (a sequence of schema\n         interfaces).\n         """\n \n-    def initializeObject(context, fields, message, defaultCharset=\'utf-8\'):\n+    def initializeObject(context, fields, message, defaultCharset="utf-8"):\n         """Initialise an object from a message.\n \n         ``context`` is the content object to initialise.\n@@ -120,7 +112,7 @@ class IFieldMarshaler(Interface):\n         required=True,\n     )\n \n-    def marshal(charset=\'utf-8\', primary=False):\n+    def marshal(charset="utf-8", primary=False):\n         """Return the value of the adapted field on the adapted context.\n \n         Note: It may be necessary to adapt the context to the field\'s\n@@ -141,11 +133,7 @@ def marshal(charset=\'utf-8\', primary=False):\n         """\n \n     def demarshal(\n-        value,\n-        message=None,\n-        charset=\'utf-8\',\n-        contentType=None,\n-        primary=False\n+        value, message=None, charset="utf-8", contentType=None, primary=False\n     ):\n         """Update the value of the adapted field on the adapted context.\n \n@@ -170,7 +158,7 @@ def demarshal(\n         Raise ``ValueError`` if the demarshalling cannot be completed.\n         """\n \n-    def encode(value, charset=\'utf-8\', primary=False):\n+    def encode(value, charset="utf-8", primary=False):\n         """Like marshal(), but acts on the passed-in ``value`` instead of\n         reading it from the field.\n \n@@ -180,13 +168,7 @@ def encode(value, charset=\'utf-8\', primary=False):\n         Return None if the value cannot be encoded.\n         """\n \n-    def decode(\n-        value,\n-        message=None,\n-        charset=\'utf-8\',\n-        contentType=None,\n-        primary=False\n-    ):\n+    def decode(value, message=None, charset="utf-8", contentType=None, primary=False):\n         """Like demarshal, but return the value instead of updating the field.\n \n         This is only used for collection fields and other situations where\n@@ -203,7 +185,7 @@ def getContentType():\n         May return None if a content type does not make sense.\n         """\n \n-    def getCharset(defualt=\'utf-8\'):\n+    def getCharset(defualt="utf-8"):\n         """Return the charset of the field. The value should be appropriate\n         for the \'charset\' parameter to the Content-Type HTTP header. This is\n         mainly used for marshalling\ndiff --git a/plone/rfc822/supermodel.py b/plone/rfc822/supermodel.py\nindex 7476bb5..91f8725 100644\n--- a/plone/rfc822/supermodel.py\n+++ b/plone/rfc822/supermodel.py\n@@ -1,11 +1,11 @@\n try:\n     from plone.supermodel.interfaces import IFieldMetadataHandler\n+\n     HAVE_SUPERMODEL = True\n except ImportError:\n     HAVE_SUPERMODEL = False\n \n if HAVE_SUPERMODEL:\n-\n     from plone.rfc822.interfaces import IPrimaryField\n     from plone.supermodel.utils import ns\n     from zope.interface import alsoProvides\n@@ -23,13 +23,16 @@ class PrimaryFieldMetadataHandler:\n         prefix = "marshal"\n \n         def read(self, fieldNode, schema, field):\n-            primary = fieldNode.get(ns(\'primary\', self.namespace))\n-            if (\n-                primary is not None and\n-                primary.lower() in ("true", "on", "yes", "y", "1")\n+            primary = fieldNode.get(ns("primary", self.namespace))\n+            if primary is not None and primary.lower() in (\n+                "true",\n+                "on",\n+                "yes",\n+                "y",\n+                "1",\n             ):\n                 alsoProvides(field, IPrimaryField)\n \n         def write(self, fieldNode, schema, field):\n             if IPrimaryField.providedBy(field):\n-                fieldNode.set(ns(\'primary\', self.namespace), "true")\n+                fieldNode.set(ns("primary", self.namespace), "true")\ndiff --git a/plone/rfc822/tests.py b/plone/rfc822/tests.py\nindex 316c0ed..c407c4e 100644\n--- a/plone/rfc822/tests.py\n+++ b/plone/rfc822/tests.py\n@@ -9,15 +9,17 @@\n \n \n DOCFILES = [\n-    \'message.rst\',\n-    \'fields.rst\',\n-    \'supermodel.rst\',\n+    "message.rst",\n+    "fields.rst",\n+    "supermodel.rst",\n ]\n \n-optionflags = doctest.ELLIPSIS | \\\n-    doctest.REPORT_UDIFF | \\\n-    doctest.NORMALIZE_WHITESPACE | \\\n-    doctest.REPORT_ONLY_FIRST_FAILURE\n+optionflags = (\n+    doctest.ELLIPSIS\n+    | doctest.REPORT_UDIFF\n+    | doctest.NORMALIZE_WHITESPACE\n+    | doctest.REPORT_ONLY_FIRST_FAILURE\n+)\n \n \n class Py23DocChecker(doctest.OutputChecker):\n@@ -29,26 +31,26 @@ def check_output(self, want, got, optionflags):\n \n \n class TestUtils(unittest.TestCase):\n-\n     def test_safe_native_string(self):\n-        self.assertIsInstance(safe_native_string(b\'\'), str)\n-        self.assertIsInstance(safe_native_string(\'\'), str)\n+        self.assertIsInstance(safe_native_string(b""), str)\n+        self.assertIsInstance(safe_native_string(""), str)\n         self.assertRaises(ValueError, safe_native_string, None)\n \n \n def test_suite():\n-\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(\n-            doctest.DocFileSuite(\n-                docfile,\n-                optionflags=optionflags,\n-                checker=Py23DocChecker(),\n-            ),\n-            layer=UNIT_TESTING\n-        )\n-        for docfile in DOCFILES\n-    ])\n-    suite.addTest(TestUtils(\'test_safe_native_string\'))\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite(\n+                    docfile,\n+                    optionflags=optionflags,\n+                    checker=Py23DocChecker(),\n+                ),\n+                layer=UNIT_TESTING,\n+            )\n+            for docfile in DOCFILES\n+        ]\n+    )\n+    suite.addTest(TestUtils("test_safe_native_string"))\n     return suite\ndiff --git a/setup.py b/setup.py\nindex c98bf3d..f6fa772 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -4,16 +4,19 @@\n import os\n \n \n-version = \'2.0.3.dev0\'\n+version = "2.0.3.dev0"\n \n setup(\n-    name=\'plone.rfc822\',\n+    name="plone.rfc822",\n     version=version,\n     description="RFC822 marshalling for zope.schema fields",\n     long_description=(\n-        open("README.rst").read() + "\\n" +\n-        open("CHANGES.rst").read() + "\\n" +\n-        open(os.path.join("plone", "rfc822", "message.rst")).read()),\n+        open("README.rst").read()\n+        + "\\n"\n+        + open("CHANGES.rst").read()\n+        + "\\n"\n+        + open(os.path.join("plone", "rfc822", "message.rst")).read()\n+    ),\n     # Get more strings from\n     # https://pypi.org/classifiers/\n     classifiers=[\n@@ -29,26 +32,26 @@\n         "Topic :: Software Development :: Libraries :: Python Modules",\n         "License :: OSI Approved :: BSD License",\n     ],\n-    keywords=\'zope schema rfc822\',\n-    author=\'Martin Aspeli and contributors\',\n-    author_email=\'optilude@gmail.com\',\n-    url=\'https://pypi.org/project/plone.rfc822\',\n-    license=\'BSD\',\n+    keywords="zope schema rfc822",\n+    author="Martin Aspeli and contributors",\n+    author_email="optilude@gmail.com",\n+    url="https://pypi.org/project/plone.rfc822",\n+    license="BSD",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require={\n-        \'supermodel\': [\'plone.supermodel\'],\n-        \'test\': [\'plone.testing\', \'plone.supermodel\'],\n+        "supermodel": ["plone.supermodel"],\n+        "test": ["plone.testing", "plone.supermodel"],\n     },\n     install_requires=[\n-        \'python-dateutil\',\n-        \'setuptools\',\n-        \'zope.component\',\n-        \'zope.deprecation\',\n-        \'zope.interface\',\n-        \'zope.schema\',\n+        "python-dateutil",\n+        "setuptools",\n+        "zope.component",\n+        "zope.deprecation",\n+        "zope.interface",\n+        "zope.schema",\n     ],\n     entry_points="""\n     """,\n'

Repository: plone.rfc822


Branch: refs/heads/master
Date: 2023-04-23T19:36:35+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.rfc822/commit/af42ab2ee08e8203aa4fef514c2effe9d37563f6

chore: pyupgrade

Files changed:
M plone/rfc822/_utils.py

b'diff --git a/plone/rfc822/_utils.py b/plone/rfc822/_utils.py\nindex fb75880..ca11094 100644\n--- a/plone/rfc822/_utils.py\n+++ b/plone/rfc822/_utils.py\n@@ -106,14 +106,14 @@ def constructMessage(context, fields, charset="utf-8"):\n         marshaler = queryMultiAdapter((context, field), IFieldMarshaler)\n         if marshaler is None:\n             logger.debug(\n-                "No marshaler found for field {} of {}".format(name, repr(context))\n+                f"No marshaler found for field {name} of {repr(context)}"\n             )\n             continue\n         try:\n             value = marshaler.marshal(charset, primary=False)\n         except ValueError as e:\n             logger.debug(\n-                "Marshaling of {} for {} failed: {}".format(name, repr(context), str(e))\n+                f"Marshaling of {name} for {repr(context)} failed: {str(e)}"\n             )\n             continue\n         if value is None:\n@@ -186,7 +186,7 @@ def initializeObject(context, fields, message, defaultCharset="utf-8"):\n         marshaler = queryMultiAdapter((context, field), IFieldMarshaler)\n         if marshaler is None:\n             logger.debug(\n-                "No marshaler found for field {} of {}".format(name, repr(context))\n+                f"No marshaler found for field {name} of {repr(context)}"\n             )\n             continue\n         header_value, header_charset = decode_header(value)[0]\n'

Repository: plone.rfc822


Branch: refs/heads/master
Date: 2023-04-23T19:37:02+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.rfc822/commit/e35f6c0b0ec6f254905b3170eb0426afc76d5c01

chore: black

Files changed:
M plone/rfc822/_utils.py

b'diff --git a/plone/rfc822/_utils.py b/plone/rfc822/_utils.py\nindex ca11094..0a114d2 100644\n--- a/plone/rfc822/_utils.py\n+++ b/plone/rfc822/_utils.py\n@@ -105,16 +105,12 @@ def constructMessage(context, fields, charset="utf-8"):\n             continue\n         marshaler = queryMultiAdapter((context, field), IFieldMarshaler)\n         if marshaler is None:\n-            logger.debug(\n-                f"No marshaler found for field {name} of {repr(context)}"\n-            )\n+            logger.debug(f"No marshaler found for field {name} of {repr(context)}")\n             continue\n         try:\n             value = marshaler.marshal(charset, primary=False)\n         except ValueError as e:\n-            logger.debug(\n-                f"Marshaling of {name} for {repr(context)} failed: {str(e)}"\n-            )\n+            logger.debug(f"Marshaling of {name} for {repr(context)} failed: {str(e)}")\n             continue\n         if value is None:\n             value = ""\n@@ -185,9 +181,7 @@ def initializeObject(context, fields, message, defaultCharset="utf-8"):\n         field = fieldset.pop(0)\n         marshaler = queryMultiAdapter((context, field), IFieldMarshaler)\n         if marshaler is None:\n-            logger.debug(\n-                f"No marshaler found for field {name} of {repr(context)}"\n-            )\n+            logger.debug(f"No marshaler found for field {name} of {repr(context)}")\n             continue\n         header_value, header_charset = decode_header(value)[0]\n         if header_charset is None:\n'

Repository: plone.rfc822


Branch: refs/heads/master
Date: 2023-04-23T19:37:21+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.rfc822/commit/272a1a6f79ad0a32065813f41c7ab36e327862a6

chore: zpretty

Files changed:
M plone/rfc822/configure.zcml

b'diff --git a/plone/rfc822/configure.zcml b/plone/rfc822/configure.zcml\nindex 2397069..af650db 100644\n--- a/plone/rfc822/configure.zcml\n+++ b/plone/rfc822/configure.zcml\n@@ -2,85 +2,100 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:five="http://namespaces.zope.org/five"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n-    i18n_domain="plone.rfc822">\n+    i18n_domain="plone.rfc822"\n+    >\n \n-    <!-- Standard IFromUnicode marshaler -->\n-    <adapter factory=".defaultfields.UnicodeFieldMarshaler" />\n+  <!-- Standard IFromUnicode marshaler -->\n+  <adapter factory=".defaultfields.UnicodeFieldMarshaler" />\n \n-    <!-- Text, TextLine, Password, SourceText may be ASCII safe -->\n-    <adapter\n-        for="* zope.schema.interfaces.INativeString"\n-        factory=".defaultfields.UnicodeValueFieldMarshaler"\n-        />\n-    <!-- ASCII Field marshaller -->\n-    <adapter\n-        for="* zope.schema.interfaces.IASCII"\n-        factory=".defaultfields.ASCIISafeFieldMarshaler"\n-        />\n-    <adapter\n-        for="* zope.schema.interfaces.IASCIILine"\n-        factory=".defaultfields.ASCIISafeFieldMarshaler"\n-        />\n+  <!-- Text, TextLine, Password, SourceText may be ASCII safe -->\n+  <adapter\n+      factory=".defaultfields.UnicodeValueFieldMarshaler"\n+      for="*\n+           zope.schema.interfaces.INativeString"\n+      />\n+  <!-- ASCII Field marshaller -->\n+  <adapter\n+      factory=".defaultfields.ASCIISafeFieldMarshaler"\n+      for="*\n+           zope.schema.interfaces.IASCII"\n+      />\n+  <adapter\n+      factory=".defaultfields.ASCIISafeFieldMarshaler"\n+      for="*\n+           zope.schema.interfaces.IASCIILine"\n+      />\n \n-    <!-- Bool and Choice omit to declare that they supports IFromUnicode in zope.schema 3.3 -->\n-    <adapter\n-        for="* zope.schema.interfaces.IBool"\n-        factory=".defaultfields.ASCIISafeFieldMarshaler"\n-        />\n-    <!-- We need this as a workaround for this issue:\n+  <!-- Bool and Choice omit to declare that they supports IFromUnicode in zope.schema 3.3 -->\n+  <adapter\n+      factory=".defaultfields.ASCIISafeFieldMarshaler"\n+      for="*\n+           zope.schema.interfaces.IBool"\n+      />\n+  <!-- We need this as a workaround for this issue:\n       https://github.com/zopefoundation/zope.schema/issues/80\n     -->\n-    <adapter\n-        for="* zope.schema._bootstrapfields.Bool"\n-        factory=".defaultfields.ASCIISafeFieldMarshaler"\n-        />\n-    <adapter\n-        for="* zope.schema.interfaces.IChoice"\n-        factory=".defaultfields.UnicodeValueFieldMarshaler"\n-        />\n+  <adapter\n+      factory=".defaultfields.ASCIISafeFieldMarshaler"\n+      for="*\n+           zope.schema._bootstrapfields.Bool"\n+      />\n+  <adapter\n+      factory=".defaultfields.UnicodeValueFieldMarshaler"\n+      for="*\n+           zope.schema.interfaces.IChoice"\n+      />\n \n-    <!-- Int, Float, and Decimal are ASCII safe -->\n-    <adapter\n-        for="* zope.schema.interfaces.IInt"\n-        factory=".defaultfields.ASCIISafeFieldMarshaler"\n-        />\n-    <adapter\n-        for="* zope.schema.interfaces.IFloat"\n-        factory=".defaultfields.ASCIISafeFieldMarshaler"\n-        />\n-    <adapter\n-        for="* zope.schema.interfaces.IDecimal"\n-        factory=".defaultfields.ASCIISafeFieldMarshaler"\n-        />\n+  <!-- Int, Float, and Decimal are ASCII safe -->\n+  <adapter\n+      factory=".defaultfields.ASCIISafeFieldMarshaler"\n+      for="*\n+           zope.schema.interfaces.IInt"\n+      />\n+  <adapter\n+      factory=".defaultfields.ASCIISafeFieldMarshaler"\n+      for="*\n+           zope.schema.interfaces.IFloat"\n+      />\n+  <adapter\n+      factory=".defaultfields.ASCIISafeFieldMarshaler"\n+      for="*\n+           zope.schema.interfaces.IDecimal"\n+      />\n \n-    <!-- Somehow this is necessary because these are in _bootstrapfields -->\n-    <adapter\n-        for="* zope.schema.Text"\n-        factory=".defaultfields.UnicodeValueFieldMarshaler"\n-        />\n-    <adapter\n-        for="* zope.schema.TextLine"\n-        factory=".defaultfields.UnicodeValueFieldMarshaler"\n-        />\n-    <adapter\n-        for="* zope.schema.Password"\n-        factory=".defaultfields.UnicodeValueFieldMarshaler"\n-        />\n-    <adapter\n-        for="* zope.schema.Int"\n-        factory=".defaultfields.ASCIISafeFieldMarshaler"\n-        />\n+  <!-- Somehow this is necessary because these are in _bootstrapfields -->\n+  <adapter\n+      factory=".defaultfields.UnicodeValueFieldMarshaler"\n+      for="*\n+           zope.schema.Text"\n+      />\n+  <adapter\n+      factory=".defaultfields.UnicodeValueFieldMarshaler"\n+      for="*\n+           zope.schema.TextLine"\n+      />\n+  <adapter\n+      factory=".defaultfields.UnicodeValueFieldMarshaler"\n+      for="*\n+           zope.schema.Password"\n+      />\n+  <adapter\n+      factory=".defaultfields.ASCIISafeFieldMarshaler"\n+      for="*\n+           zope.schema.Int"\n+      />\n \n-    <adapter factory=".defaultfields.BytesFieldMarshaler" />\n-    <adapter factory=".defaultfields.DatetimeMarshaler" />\n-    <adapter factory=".defaultfields.DateMarshaler" />\n-    <adapter factory=".defaultfields.TimedeltaMarshaler" />\n-    <adapter factory=".defaultfields.CollectionMarshaler" />\n+  <adapter factory=".defaultfields.BytesFieldMarshaler" />\n+  <adapter factory=".defaultfields.DatetimeMarshaler" />\n+  <adapter factory=".defaultfields.DateMarshaler" />\n+  <adapter factory=".defaultfields.TimedeltaMarshaler" />\n+  <adapter factory=".defaultfields.CollectionMarshaler" />\n \n-    <!-- Configure plone.supermodel handler if available -->\n-    <utility zcml:condition="installed plone.supermodel"\n-        factory=".supermodel.PrimaryFieldMetadataHandler"\n-        name="plone.rfc822.marshal"\n-        />\n+  <!-- Configure plone.supermodel handler if available -->\n+  <utility\n+      factory=".supermodel.PrimaryFieldMetadataHandler"\n+      name="plone.rfc822.marshal"\n+      zcml:condition="installed plone.supermodel"\n+      />\n \n </configure>\n'

Repository: plone.rfc822


Branch: refs/heads/master
Date: 2023-04-23T19:38:18+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.rfc822/commit/1837c23fe6c824a98449d07377d6614ae65496c2

chore: update trove classifiers

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex f6fa772..6e1c0b0 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -22,13 +22,13 @@\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n         "License :: OSI Approved :: BSD License",\n     ],\n'

Repository: plone.rfc822


Branch: refs/heads/master
Date: 2023-04-23T19:38:30+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.rfc822/commit/de9f96cd8799338783b4b9b2babe41781b8fe70e

feat: pyroma

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 6e1c0b0..7483517 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -41,6 +41,7 @@\n     namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     extras_require={\n         "supermodel": ["plone.supermodel"],\n         "test": ["plone.testing", "plone.supermodel"],\n'

Repository: plone.rfc822


Branch: refs/heads/master
Date: 2023-04-23T22:08:24+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.rfc822/commit/f473432ec5e109755f89a436264be8091c6e7406

feat: codespell

Files changed:
M plone/rfc822/interfaces.py
M plone/rfc822/message.rst

b'diff --git a/plone/rfc822/interfaces.py b/plone/rfc822/interfaces.py\nindex f1df2dc..57df5e3 100644\n--- a/plone/rfc822/interfaces.py\n+++ b/plone/rfc822/interfaces.py\n@@ -185,7 +185,7 @@ def getContentType():\n         May return None if a content type does not make sense.\n         """\n \n-    def getCharset(defualt="utf-8"):\n+    def getCharset(default="utf-8"):\n         """Return the charset of the field. The value should be appropriate\n         for the \'charset\' parameter to the Content-Type HTTP header. This is\n         mainly used for marshalling\ndiff --git a/plone/rfc822/message.rst b/plone/rfc822/message.rst\nindex d6beaaf..c801bab 100644\n--- a/plone/rfc822/message.rst\n+++ b/plone/rfc822/message.rst\n@@ -147,7 +147,7 @@ register it using the ``zope.component`` API.\n \n Hint: If the schema contained multiple text fields, this adapter would apply\n to all of them. To avoid that, we could either mark the field with a custom\n-marker interface (similary to the way we marked a field with ``IPrimaryField``\n+marker interface (similarly to the way we marked a field with ``IPrimaryField``\n above), or have the marshaler check the field name.\n \n Let\'s now try again:\n'

Repository: plone.rfc822


Branch: refs/heads/master
Date: 2023-04-23T22:15:22+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.rfc822/commit/d3b1b0b6a403cfcc53e263382b9dbacedd8c8931

feat: flake8

Files changed:
M plone/rfc822/_utils.py
M plone/rfc822/defaultfields.py
M plone/rfc822/interfaces.py
M setup.cfg

b'diff --git a/plone/rfc822/_utils.py b/plone/rfc822/_utils.py\nindex 0a114d2..5d78341 100644\n--- a/plone/rfc822/_utils.py\n+++ b/plone/rfc822/_utils.py\n@@ -248,11 +248,7 @@ def initializeObject(context, fields, message, defaultCharset="utf-8"):\n \n         marshaler = queryMultiAdapter((context, field), IFieldMarshaler)\n         if marshaler is None:\n-            logger.debug(\n-                "No marshaler found for primary field {0} of {0}".format(\n-                    name, repr(context)\n-                )\n-            )\n+            logger.debug(f"No marshaler found for primary field {name} of {context!r}")\n             continue\n         payload_value = payload.get_payload(decode=True)\n         payload_charset = payload.get_content_charset(charset)\ndiff --git a/plone/rfc822/defaultfields.py b/plone/rfc822/defaultfields.py\nindex 2d6cf09..d7e05d7 100644\n--- a/plone/rfc822/defaultfields.py\n+++ b/plone/rfc822/defaultfields.py\n@@ -44,7 +44,6 @@\n \n import datetime\n import dateutil.parser\n-import six\n \n \n _marker = object()\ndiff --git a/plone/rfc822/interfaces.py b/plone/rfc822/interfaces.py\nindex 57df5e3..863ec6d 100644\n--- a/plone/rfc822/interfaces.py\n+++ b/plone/rfc822/interfaces.py\n@@ -21,9 +21,9 @@ class IPrimaryFieldInfo(Interface):\n class IMessageAPI(Interface):\n     """Functions provided by this module\n \n-    These can all be imported as::\n+    These can all be imported as:\n \n-        >>> from plone.rfc822 import constructMessage\n+    from plone.rfc822 import constructMessage\n     """\n \n     def constructMessageFromSchema(context, schema, charset="utf-8"):\ndiff --git a/setup.cfg b/setup.cfg\nindex 0da8f8f..756f3fe 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -14,6 +14,8 @@ ignore =\n     E203,\n     # black takes care of spaces after commas\n     E231,\n+per-file-ignores =\n+    plone/rfc822/__init__.py:F401\n \n [check-manifest]\n ignore =\n'

Repository: plone.rfc822


Branch: refs/heads/master
Date: 2023-04-23T22:29:13+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.rfc822/commit/da5bcb7134fefbae4d31a76c769d1fb0e16348a5

feat: drop six usage

Files changed:
M plone/rfc822/_utils.py
M plone/rfc822/fields.rst
M plone/rfc822/message.rst
M plone/rfc822/tests.py

b'diff --git a/plone/rfc822/_utils.py b/plone/rfc822/_utils.py\nindex 5d78341..d591188 100644\n--- a/plone/rfc822/_utils.py\n+++ b/plone/rfc822/_utils.py\n@@ -15,7 +15,6 @@\n from zope.schema import getFieldsInOrder\n \n import logging\n-import six\n \n \n logger = logging.getLogger("plone.rfc822")\n@@ -23,10 +22,7 @@\n \n def safe_native_string(value, encoding="utf8"):\n     """Try to convert value into a native string"""\n-    if six.PY2:\n-        if isinstance(value, str):\n-            return value.encode(encoding)\n-    elif isinstance(value, bytes):\n+    if isinstance(value, bytes):\n         return value.decode(encoding)\n     if not isinstance(value, str):\n         raise ValueError("Cannot convert %r into a native string" % value)\ndiff --git a/plone/rfc822/fields.rst b/plone/rfc822/fields.rst\nindex e656445..7f78093 100644\n--- a/plone/rfc822/fields.rst\n+++ b/plone/rfc822/fields.rst\n@@ -63,7 +63,6 @@ This interface is implemented by a the following class::\n     >>> from decimal import Decimal\n     >>> from zope.interface import implementer\n     >>> import datetime\n-    >>> import six\n     >>> @implementer(ITestContent)\n     ... class TestContent(object):\n     ...     _text = u"text\\xd8"\n@@ -80,7 +79,7 @@ This interface is implemented by a the following class::\n     ...     _id = u\'some.id\'\n     ...     _dottedName = \'dotted.name\'\n     ...     _bool = True\n-    ...     _int = long(-10) if six.PY2 else -10\n+    ...     _int = -10\n     ...     _float = 0.3\n     ...     _decimal = Decimal("5.0")\n     ...     _choice1 = u"two"\n@@ -295,10 +294,7 @@ An URI is in Python 2 based on unicode text, in Python 3 on bytes.\n     \'http://plone.org\'\n     >>> marshaler.getContentType() is None\n     True\n-    >>> if six.PY2:\n-    ...     expected = None  # its IBytes based\n-    ... else:\n-    ...     expected = \'utf-8\'\n+    >>> expected = \'utf-8\'\n     >>> marshaler.getCharset(\'utf-8\') == expected\n     True\n     >>> marshaler.ascii\n@@ -316,10 +312,7 @@ Id\n     \'some.id\'\n     >>> marshaler.getContentType() is None\n     True\n-    >>> if six.PY2:\n-    ...     expected = None  # its IBytes based\n-    ... else:\n-    ...     expected = \'utf-8\'\n+    >>> expected = \'utf-8\'\n     >>> marshaler.getCharset(\'utf-8\') == expected\n     True\n     >>> marshaler.ascii\n@@ -337,10 +330,7 @@ DottedName\n     \'dotted.name\'\n     >>> marshaler.getContentType() is None\n     True\n-    >>> if six.PY2:\n-    ...     expected = None  # its IBytes based\n-    ... else:\n-    ...     expected = \'utf-8\'\n+    >>> expected = \'utf-8\'\n     >>> marshaler.getCharset(\'utf-8\') == expected\n     True\n     >>> marshaler.ascii\ndiff --git a/plone/rfc822/message.rst b/plone/rfc822/message.rst\nindex c801bab..062b01a 100644\n--- a/plone/rfc822/message.rst\n+++ b/plone/rfc822/message.rst\n@@ -23,7 +23,7 @@ annotations, which we will use later in this test::\n \n ::\n \n-    >>> from six import StringIO\n+    >>> from io import StringIO\n     >>> from zope.configuration import xmlconfig\n     >>> xmlconfig.xmlconfig(StringIO(configuration))\n \n@@ -621,7 +621,6 @@ Technical both is fine.\n \n ::\n \n-    >>> import six\n     >>> content.description = "Test content\\nwith newline difference"\n     >>> msg = constructMessageFromSchema(content, ITestContent)\n     >>> effective_output = msg.as_string()\ndiff --git a/plone/rfc822/tests.py b/plone/rfc822/tests.py\nindex c407c4e..8dbf8d3 100644\n--- a/plone/rfc822/tests.py\n+++ b/plone/rfc822/tests.py\n@@ -3,8 +3,6 @@\n from plone.testing.zca import UNIT_TESTING\n \n import doctest\n-import re\n-import six\n import unittest\n \n \n@@ -22,14 +20,6 @@\n )\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        got = re.sub("b\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n class TestUtils(unittest.TestCase):\n     def test_safe_native_string(self):\n         self.assertIsInstance(safe_native_string(b""), str)\n@@ -45,7 +35,6 @@ def test_suite():\n                 doctest.DocFileSuite(\n                     docfile,\n                     optionflags=optionflags,\n-                    checker=Py23DocChecker(),\n                 ),\n                 layer=UNIT_TESTING,\n             )\n'

Repository: plone.rfc822


Branch: refs/heads/master
Date: 2023-04-23T22:29:13+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.rfc822/commit/65cf56dda4f9e0b91341428371b228396b5fd08e

feat: configure z3c.dependencychecker

Files changed:
M pyproject.toml

b"diff --git a/pyproject.toml b/pyproject.toml\nindex 639f77a..acc473d 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -82,3 +82,4 @@ Zope = [\n   'Products.CMFCore', 'Products.CMFDynamicViewFTI',\n ]\n python-dateutil = ['dateutil']\n+ignore-packages = ['plone.supermodel']\n"

Repository: plone.rfc822


Branch: refs/heads/master
Date: 2023-04-23T22:49:39+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.rfc822/commit/b43153871474c39e3e3a8ba364b7d0f006edb6bb

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 7483517..e648bb5 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -44,7 +44,13 @@\n     python_requires=">=3.8",\n     extras_require={\n         "supermodel": ["plone.supermodel"],\n-        "test": ["plone.testing", "plone.supermodel"],\n+        "test": [\n+            "plone.testing",\n+            "plone.supermodel",\n+            "zope.annotation",\n+            "zope.configuration",\n+            "persistent",\n+        ],\n     },\n     install_requires=[\n         "python-dateutil",\n'

Repository: plone.rfc822


Branch: refs/heads/master
Date: 2023-04-23T22:49:39+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.rfc822/commit/a7a5d8a0acaf26ae494ddd374e979acf7dd620d5

fix: adapt tests

Files changed:
M plone/rfc822/fields.rst
M plone/rfc822/message.rst

b"diff --git a/plone/rfc822/fields.rst b/plone/rfc822/fields.rst\nindex 7f78093..632aade 100644\n--- a/plone/rfc822/fields.rst\n+++ b/plone/rfc822/fields.rst\n@@ -116,7 +116,7 @@ Text\n \n     >>> marshaler = getMultiAdapter((t, ITestContent['_text']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    'text\\xc3\\x98'\n+    b'text\\xc3\\x98'\n     >>> marshaler.decode(b'text\\xc3\\x98')\n     'text\\xd8'\n     >>> marshaler.getContentType() is None\n@@ -131,7 +131,7 @@ if the field value is within the ascii range::\n \n     >>> marshaler = getMultiAdapter((t, ITestContent['_text2']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    'text'\n+    b'text'\n     >>> marshaler.decode(b'text\\xc3\\x98')\n     'text\\xd8'\n     >>> marshaler.getContentType() is None\n@@ -148,7 +148,7 @@ TextLine\n \n     >>> marshaler = getMultiAdapter((t, ITestContent['_textLine']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    'textline\\xc3\\x98'\n+    b'textline\\xc3\\x98'\n     >>> marshaler.decode(b'textline\\xc3\\x98')\n     'textline\\xd8'\n     >>> marshaler.getContentType() is None\n@@ -165,7 +165,7 @@ if the field value is within the ascii range.\n \n     >>> marshaler = getMultiAdapter((t, ITestContent['_textLine2']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    'textline'\n+    b'textline'\n     >>> marshaler.decode(b'textline\\xc3\\x98')\n     'textline\\xd8'\n     >>> marshaler.getContentType() is None\n@@ -182,7 +182,7 @@ Password\n \n     >>> marshaler = getMultiAdapter((t, ITestContent['_password']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    'password\\xc3\\x98'\n+    b'password\\xc3\\x98'\n     >>> marshaler.decode(b'password\\xc3\\x98')\n     'password\\xd8'\n     >>> marshaler.getContentType() is None\n@@ -199,7 +199,7 @@ if the field value is within the ascii range.\n \n     >>> marshaler = getMultiAdapter((t, ITestContent['_password2']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    'password'\n+    b'password'\n     >>> marshaler.decode(b'password\\xc3\\x98')\n     'password\\xd8'\n     >>> marshaler.getContentType() is None\n@@ -218,7 +218,7 @@ Bytes\n     >>> marshaler.marshal()\n     'bytes'\n     >>> marshaler.decode(b'bytes')\n-    'bytes'\n+    b'bytes'\n     >>> marshaler.getContentType() is None\n     True\n     >>> marshaler.getCharset('utf-8') is None\n@@ -235,7 +235,7 @@ BytesLine\n     >>> marshaler.marshal()\n     'bytesline'\n     >>> marshaler.decode(b'bytesline')\n-    'bytesline'\n+    b'bytesline'\n     >>> marshaler.getContentType() is None\n     True\n     >>> marshaler.getCharset('utf-8') is None\n@@ -253,7 +253,7 @@ Note: There is a BytesField which stores b'foo' binary string.\n \n     >>> marshaler = getMultiAdapter((t, ITestContent['_ascii']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    'ascii'\n+    b'ascii'\n     >>> marshaler.decode(b'ascii')\n     'ascii'\n     >>> marshaler.getContentType() is None\n@@ -270,7 +270,7 @@ ASCIILine\n \n     >>> marshaler = getMultiAdapter((t, ITestContent['_asciiLine']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    'asciiline'\n+    b'asciiline'\n     >>> marshaler.decode(b'asciiline')\n     'asciiline'\n     >>> marshaler.getContentType() is None\n@@ -289,7 +289,7 @@ An URI is in Python 2 based on unicode text, in Python 3 on bytes.\n \n     >>> marshaler = getMultiAdapter((t, ITestContent['_uri']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    'http://plone.org'\n+    b'http://plone.org'\n     >>> marshaler.decode(b'http://plone.org')\n     'http://plone.org'\n     >>> marshaler.getContentType() is None\n@@ -307,7 +307,7 @@ Id\n \n     >>> marshaler = getMultiAdapter((t, ITestContent['_id']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    'some.id'\n+    b'some.id'\n     >>> marshaler.decode(b'some.id')\n     'some.id'\n     >>> marshaler.getContentType() is None\n@@ -325,7 +325,7 @@ DottedName\n \n     >>> marshaler = getMultiAdapter((t, ITestContent['_dottedName']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    'dotted.name'\n+    b'dotted.name'\n     >>> marshaler.decode(b'dotted.name')\n     'dotted.name'\n     >>> marshaler.getContentType() is None\n@@ -343,10 +343,10 @@ Bool\n \n     >>> marshaler = getMultiAdapter((t, ITestContent['_bool']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    'True'\n+    b'True'\n     >>> t._bool = False\n     >>> marshaler.marshal()\n-    'False'\n+    b'False'\n     >>> t._bool = True\n     >>> marshaler.decode(b'True')\n     True\n@@ -366,7 +366,7 @@ Int\n \n     >>> marshaler = getMultiAdapter((t, ITestContent['_int']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    '-10'\n+    b'-10'\n     >>> marshaler.decode(b'-10')\n     -10\n     >>> marshaler.getContentType() is None\n@@ -383,7 +383,7 @@ Float\n \n     >>> marshaler = getMultiAdapter((t, ITestContent['_float']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    '0.3'\n+    b'0.3'\n     >>> marshaler.decode(b'0.25')\n     0.25\n     >>> marshaler.getContentType() is None\n@@ -400,7 +400,7 @@ Decimal\n \n     >>> marshaler = getMultiAdapter((t, ITestContent['_decimal']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    '5.0'\n+    b'5.0'\n     >>> marshaler.decode(b'5.0')\n     Decimal('5.0')\n     >>> marshaler.getContentType() is None\n@@ -417,7 +417,7 @@ Choice\n \n     >>> marshaler = getMultiAdapter((t, ITestContent['_choice1']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    'two'\n+    b'two'\n     >>> marshaler.decode(b'one')\n     'one'\n     >>> marshaler.getContentType() is None\n@@ -429,7 +429,7 @@ Choice\n \n     >>> marshaler = getMultiAdapter((t, ITestContent['_choice2']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    'two'\n+    b'two'\n     >>> marshaler.decode(b'three')\n     'three'\n     >>> marshaler.getContentType() is None\n@@ -497,7 +497,7 @@ Tuple\n \n     >>> marshaler = getMultiAdapter((t, ITestContent['_tuple']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    'one\\xc3\\x98||two'\n+    b'one\\xc3\\x98||two'\n     >>> marshaler.decode(b'one\\xc3\\x98||two')\n     ('one\\xd8', 'two')\n     >>> marshaler.getContentType() is None\n@@ -514,7 +514,7 @@ List\n \n     >>> marshaler = getMultiAdapter((t, ITestContent['_list']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    'three||four'\n+    b'three||four'\n     >>> marshaler.decode(b'three||four')\n     ['three', 'four']\n     >>> marshaler.getContentType() is None\ndiff --git a/plone/rfc822/message.rst b/plone/rfc822/message.rst\nindex 062b01a..d468158 100644\n--- a/plone/rfc822/message.rst\n+++ b/plone/rfc822/message.rst\n@@ -554,7 +554,7 @@ We can also reconstruct the object from this message.\n     >>> initializeObjectFromSchema(newFileContent, IFileContent, inputMessage)\n \n     >>> newFileContent.file1.data\n-    'dummy file'\n+    b'dummy file'\n     >>> newFileContent.file1.contentType\n     'text/plain'\n     >>> newFileContent.file1.filename\n@@ -596,14 +596,14 @@ And again, we can reconstruct the object, this time with both fields:\n     >>> initializeObjectFromSchema(newFileContent, IFileContent, inputMessage)\n \n     >>> newFileContent.file1.data\n-    'dummy file'\n+    b'dummy file'\n     >>> newFileContent.file1.contentType\n     'text/plain'\n     >>> newFileContent.file1.filename\n     'dummy1.txt'\n \n     >>> newFileContent.file2.data\n-    '<html><body>test</body></html>'\n+    b'<html><body>test</body></html>'\n     >>> newFileContent.file2.contentType\n     'text/html'\n     >>> newFileContent.file2.filename\n"

Repository: plone.rfc822


Branch: refs/heads/master
Date: 2023-04-23T22:49:40+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.rfc822/commit/9e738220d7629f5a7eecf5d405a774ea5949e166

Add news entry

Files changed:
A news/1.breaking

b'diff --git a/news/1.breaking b/news/1.breaking\nnew file mode 100644\nindex 0000000..6a2e7d2\n--- /dev/null\n+++ b/news/1.breaking\n@@ -0,0 +1,2 @@\n+Drop python 2.7 compatibility.\n+[gforcada]\n'

Repository: plone.rfc822


Branch: refs/heads/master
Date: 2023-04-24T19:15:21+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.rfc822/commit/18d927e6505419c84dfbce3a4b960cf54f257909

bump version

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex e648bb5..363721b 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -4,7 +4,7 @@\n import os\n \n \n-version = "2.0.3.dev0"\n+version = "3.0.0.dev0"\n \n setup(\n     name="plone.rfc822",\n'

Repository: plone.rfc822


Branch: refs/heads/master
Date: 2023-04-24T20:43:12+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.rfc822/commit/9f9ea61ee728e95dc12617183c23f7d9f68617d9

Remove long deprecated  function.

Files changed:
A news/1-1.breaking
M plone/rfc822/__init__.py
M plone/rfc822/_utils.py
M setup.py

b'diff --git a/news/1-1.breaking b/news/1-1.breaking\nnew file mode 100644\nindex 0000000..385e630\n--- /dev/null\n+++ b/news/1-1.breaking\n@@ -0,0 +1,2 @@\n+Remove long deprecated `renderMessage` function.\n+[@jensens]\n\\ No newline at end of file\ndiff --git a/plone/rfc822/__init__.py b/plone/rfc822/__init__.py\nindex ebee1f1..36f4fa4 100644\n--- a/plone/rfc822/__init__.py\n+++ b/plone/rfc822/__init__.py\n@@ -4,7 +4,6 @@\n from plone.rfc822._utils import initializeObject\n from plone.rfc822._utils import initializeObjectFromSchema\n from plone.rfc822._utils import initializeObjectFromSchemata\n-from plone.rfc822._utils import renderMessage\n from plone.rfc822.interfaces import IMessageAPI\n \n import zope.interface\ndiff --git a/plone/rfc822/_utils.py b/plone/rfc822/_utils.py\nindex d591188..a3a112e 100644\n--- a/plone/rfc822/_utils.py\n+++ b/plone/rfc822/_utils.py\n@@ -11,7 +11,6 @@\n from plone.rfc822.interfaces import IFieldMarshaler\n from plone.rfc822.interfaces import IPrimaryField\n from zope.component import queryMultiAdapter\n-from zope.deprecation import deprecate\n from zope.schema import getFieldsInOrder\n \n import logging\n@@ -126,12 +125,6 @@ def constructMessage(context, fields, charset="utf-8"):\n     return msg\n \n \n-@deprecate("Use \'message.as_string()\' from \'email.message.Message\' class instead.")\n-def renderMessage(message, mangleFromHeader=False):\n-    # to be removed in a 3.x series\n-    return message.as_string(mangleFromHeader)\n-\n-\n def initializeObjectFromSchema(context, schema, message, defaultCharset="utf-8"):\n     initializeObject(context, getFieldsInOrder(schema), message, defaultCharset)\n \ndiff --git a/setup.py b/setup.py\nindex 363721b..a570c29 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -56,7 +56,6 @@\n         "python-dateutil",\n         "setuptools",\n         "zope.component",\n-        "zope.deprecation",\n         "zope.interface",\n         "zope.schema",\n     ],\n'

Repository: plone.rfc822


Branch: refs/heads/master
Date: 2023-04-24T23:14:55+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.rfc822/commit/f8a491dfd67189b2d634044d791708eded528ce3

Merge pull request #9 from plone/config-with-default-template-583efcad

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/1-1.breaking
A news/1.breaking
A news/a864b30f.internal
A tox.ini
M plone/__init__.py
M plone/rfc822/__init__.py
M plone/rfc822/_utils.py
M plone/rfc822/configure.zcml
M plone/rfc822/defaultfields.py
M plone/rfc822/fields.rst
M plone/rfc822/interfaces.py
M plone/rfc822/message.rst
M plone/rfc822/supermodel.py
M plone/rfc822/tests.py
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..ab85364\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "a864b30f"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/1-1.breaking b/news/1-1.breaking\nnew file mode 100644\nindex 0000000..385e630\n--- /dev/null\n+++ b/news/1-1.breaking\n@@ -0,0 +1,2 @@\n+Remove long deprecated `renderMessage` function.\n+[@jensens]\n\\ No newline at end of file\ndiff --git a/news/1.breaking b/news/1.breaking\nnew file mode 100644\nindex 0000000..6a2e7d2\n--- /dev/null\n+++ b/news/1.breaking\n@@ -0,0 +1,2 @@\n+Drop python 2.7 compatibility.\n+[gforcada]\ndiff --git a/news/a864b30f.internal b/news/a864b30f.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/a864b30f.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/rfc822/__init__.py b/plone/rfc822/__init__.py\nindex 98157cb..36f4fa4 100644\n--- a/plone/rfc822/__init__.py\n+++ b/plone/rfc822/__init__.py\n@@ -1,11 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.rfc822._utils import constructMessage\n from plone.rfc822._utils import constructMessageFromSchema\n from plone.rfc822._utils import constructMessageFromSchemata\n from plone.rfc822._utils import initializeObject\n from plone.rfc822._utils import initializeObjectFromSchema\n from plone.rfc822._utils import initializeObjectFromSchemata\n-from plone.rfc822._utils import renderMessage\n from plone.rfc822.interfaces import IMessageAPI\n \n import zope.interface\ndiff --git a/plone/rfc822/_utils.py b/plone/rfc822/_utils.py\nindex 8bcd098..a3a112e 100644\n--- a/plone/rfc822/_utils.py\n+++ b/plone/rfc822/_utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Implementation of IMessageAPI methods.\n \n import these from plone.rfc822 directly, not from this module.\n@@ -12,26 +11,20 @@\n from plone.rfc822.interfaces import IFieldMarshaler\n from plone.rfc822.interfaces import IPrimaryField\n from zope.component import queryMultiAdapter\n-from zope.deprecation import deprecate\n from zope.schema import getFieldsInOrder\n \n import logging\n-import six\n \n \n logger = logging.getLogger("plone.rfc822")\n \n \n-def safe_native_string(value, encoding=\'utf8\'):\n-    \'\'\' Try to convert value into a native string\n-    \'\'\'\n-    if six.PY2:\n-        if isinstance(value, six.text_type):\n-            return value.encode(encoding)\n-    elif isinstance(value, six.binary_type):\n+def safe_native_string(value, encoding="utf8"):\n+    """Try to convert value into a native string"""\n+    if isinstance(value, bytes):\n         return value.decode(encoding)\n     if not isinstance(value, str):\n-        raise ValueError(\'Cannot convert %r into a native string\' % value)\n+        raise ValueError("Cannot convert %r into a native string" % value)\n     return value\n \n \n@@ -101,26 +94,18 @@ def constructMessage(context, fields, charset="utf-8"):\n \n     # First get all headers, storing primary fields for later\n     for name, field in fields:\n-        value = \'\'\n+        value = ""\n         if IPrimaryField.providedBy(field):\n             primaries.append((name, field))\n             continue\n         marshaler = queryMultiAdapter((context, field), IFieldMarshaler)\n         if marshaler is None:\n-            logger.debug(\n-                "No marshaler found for field {0} of {1}".format(\n-                    name, repr(context)\n-                )\n-            )\n+            logger.debug(f"No marshaler found for field {name} of {repr(context)}")\n             continue\n         try:\n             value = marshaler.marshal(charset, primary=False)\n         except ValueError as e:\n-            logger.debug(\n-                "Marshaling of {0} for {1} failed: {2}".format(\n-                    name, repr(context), str(e)\n-                )\n-            )\n+            logger.debug(f"Marshaling of {name} for {repr(context)} failed: {str(e)}")\n             continue\n         if value is None:\n             value = ""\n@@ -130,7 +115,7 @@ def constructMessage(context, fields, charset="utf-8"):\n             msg[name] = value\n         else:\n             # see https://tools.ietf.org/html/rfc2822#section-3.2.2\n-            if \'\\n\' in value:\n+            if "\\n" in value:\n                 value = value.replace("\\n", r"\\n")\n             msg[name] = Header(value, charset)\n \n@@ -140,25 +125,11 @@ def constructMessage(context, fields, charset="utf-8"):\n     return msg\n \n \n-@deprecate(\n-    "Use \'message.as_string()\' from \'email.message.Message\' class instead."\n-)\n-def renderMessage(message, mangleFromHeader=False):\n-    # to be removed in a 3.x series\n-    return message.as_string(mangleFromHeader)\n-\n+def initializeObjectFromSchema(context, schema, message, defaultCharset="utf-8"):\n+    initializeObject(context, getFieldsInOrder(schema), message, defaultCharset)\n \n-def initializeObjectFromSchema(\n-    context, schema, message, defaultCharset="utf-8"\n-):\n-    initializeObject(\n-        context, getFieldsInOrder(schema), message, defaultCharset\n-    )\n \n-\n-def initializeObjectFromSchemata(\n-    context, schemata, message, defaultCharset="utf-8"\n-):\n+def initializeObjectFromSchemata(context, schemata, message, defaultCharset="utf-8"):\n     """Convenience method which calls ``initializeObject()`` with all the\n     fields in order, of all the given schemata (a sequence of schema\n     interfaces).\n@@ -194,16 +165,12 @@ def initializeObject(context, fields, message, defaultCharset="utf-8"):\n         name = name.lower()\n         fieldset = header_fields.get(name, None)\n         if fieldset is None or len(fieldset) == 0:\n-            logger.debug("No matching field found for header {0}".format(name))\n+            logger.debug(f"No matching field found for header {name}")\n             continue\n         field = fieldset.pop(0)\n         marshaler = queryMultiAdapter((context, field), IFieldMarshaler)\n         if marshaler is None:\n-            logger.debug(\n-                "No marshaler found for field {0} of {1}".format(\n-                    name, repr(context)\n-                )\n-            )\n+            logger.debug(f"No marshaler found for field {name} of {repr(context)}")\n             continue\n         header_value, header_charset = decode_header(value)[0]\n         if header_charset is None:\n@@ -214,7 +181,7 @@ def initializeObject(context, fields, message, defaultCharset="utf-8"):\n         #\n         # Also, replace escaped Newlines, for details see\n         # https://tools.ietf.org/html/rfc2822#section-3.2.2\n-        if isinstance(header_value, six.binary_type):\n+        if isinstance(header_value, bytes):\n             header_value = header_value.replace(b"\\r\\n", b"\\n")\n             header_value = header_value.replace(b"\\\\n", b"\\n")\n         else:\n@@ -232,7 +199,7 @@ def initializeObject(context, fields, message, defaultCharset="utf-8"):\n             # interface allows demarshal() to raise ValueError to indicate\n             # marshalling failed\n             logger.debug(\n-                "Demarshalling of {0} for {1} failed: {2}".format(\n+                "Demarshalling of {} for {} failed: {}".format(\n                     name, repr(context), str(e)\n                 )\n             )\n@@ -246,7 +213,7 @@ def initializeObject(context, fields, message, defaultCharset="utf-8"):\n         return\n \n     # A single payload is a string, multiparts are lists\n-    if isinstance(payloads, six.string_types):\n+    if isinstance(payloads, str):\n         if len(primary) != 1:\n             raise ValueError(\n                 "Got a single string payload for message, but no primary "\n@@ -270,11 +237,7 @@ def initializeObject(context, fields, message, defaultCharset="utf-8"):\n \n         marshaler = queryMultiAdapter((context, field), IFieldMarshaler)\n         if marshaler is None:\n-            logger.debug(\n-                "No marshaler found for primary field {0} of {0}".format(\n-                    name, repr(context)\n-                )\n-            )\n+            logger.debug(f"No marshaler found for primary field {name} of {context!r}")\n             continue\n         payload_value = payload.get_payload(decode=True)\n         payload_charset = payload.get_content_charset(charset)\n@@ -290,7 +253,7 @@ def initializeObject(context, fields, message, defaultCharset="utf-8"):\n             # interface allows demarshal() to raise ValueError to\n             # indicate marshalling failed\n             logger.debug(\n-                "Demarshalling of {0} for {1} failed: {2}".format(\n+                "Demarshalling of {} for {} failed: {}".format(\n                     name, repr(context), str(e)\n                 )\n             )\ndiff --git a/plone/rfc822/configure.zcml b/plone/rfc822/configure.zcml\nindex 2397069..af650db 100644\n--- a/plone/rfc822/configure.zcml\n+++ b/plone/rfc822/configure.zcml\n@@ -2,85 +2,100 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:five="http://namespaces.zope.org/five"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n-    i18n_domain="plone.rfc822">\n+    i18n_domain="plone.rfc822"\n+    >\n \n-    <!-- Standard IFromUnicode marshaler -->\n-    <adapter factory=".defaultfields.UnicodeFieldMarshaler" />\n+  <!-- Standard IFromUnicode marshaler -->\n+  <adapter factory=".defaultfields.UnicodeFieldMarshaler" />\n \n-    <!-- Text, TextLine, Password, SourceText may be ASCII safe -->\n-    <adapter\n-        for="* zope.schema.interfaces.INativeString"\n-        factory=".defaultfields.UnicodeValueFieldMarshaler"\n-        />\n-    <!-- ASCII Field marshaller -->\n-    <adapter\n-        for="* zope.schema.interfaces.IASCII"\n-        factory=".defaultfields.ASCIISafeFieldMarshaler"\n-        />\n-    <adapter\n-        for="* zope.schema.interfaces.IASCIILine"\n-        factory=".defaultfields.ASCIISafeFieldMarshaler"\n-        />\n+  <!-- Text, TextLine, Password, SourceText may be ASCII safe -->\n+  <adapter\n+      factory=".defaultfields.UnicodeValueFieldMarshaler"\n+      for="*\n+           zope.schema.interfaces.INativeString"\n+      />\n+  <!-- ASCII Field marshaller -->\n+  <adapter\n+      factory=".defaultfields.ASCIISafeFieldMarshaler"\n+      for="*\n+           zope.schema.interfaces.IASCII"\n+      />\n+  <adapter\n+      factory=".defaultfields.ASCIISafeFieldMarshaler"\n+      for="*\n+           zope.schema.interfaces.IASCIILine"\n+      />\n \n-    <!-- Bool and Choice omit to declare that they supports IFromUnicode in zope.schema 3.3 -->\n-    <adapter\n-        for="* zope.schema.interfaces.IBool"\n-        factory=".defaultfields.ASCIISafeFieldMarshaler"\n-        />\n-    <!-- We need this as a workaround for this issue:\n+  <!-- Bool and Choice omit to declare that they supports IFromUnicode in zope.schema 3.3 -->\n+  <adapter\n+      factory=".defaultfields.ASCIISafeFieldMarshaler"\n+      for="*\n+           zope.schema.interfaces.IBool"\n+      />\n+  <!-- We need this as a workaround for this issue:\n       https://github.com/zopefoundation/zope.schema/issues/80\n     -->\n-    <adapter\n-        for="* zope.schema._bootstrapfields.Bool"\n-        factory=".defaultfields.ASCIISafeFieldMarshaler"\n-        />\n-    <adapter\n-        for="* zope.schema.interfaces.IChoice"\n-        factory=".defaultfields.UnicodeValueFieldMarshaler"\n-        />\n+  <adapter\n+      factory=".defaultfields.ASCIISafeFieldMarshaler"\n+      for="*\n+           zope.schema._bootstrapfields.Bool"\n+      />\n+  <adapter\n+      factory=".defaultfields.UnicodeValueFieldMarshaler"\n+      for="*\n+           zope.schema.interfaces.IChoice"\n+      />\n \n-    <!-- Int, Float, and Decimal are ASCII safe -->\n-    <adapter\n-        for="* zope.schema.interfaces.IInt"\n-        factory=".defaultfields.ASCIISafeFieldMarshaler"\n-        />\n-    <adapter\n-        for="* zope.schema.interfaces.IFloat"\n-        factory=".defaultfields.ASCIISafeFieldMarshaler"\n-        />\n-    <adapter\n-        for="* zope.schema.interfaces.IDecimal"\n-        factory=".defaultfields.ASCIISafeFieldMarshaler"\n-        />\n+  <!-- Int, Float, and Decimal are ASCII safe -->\n+  <adapter\n+      factory=".defaultfields.ASCIISafeFieldMarshaler"\n+      for="*\n+           zope.schema.interfaces.IInt"\n+      />\n+  <adapter\n+      factory=".defaultfields.ASCIISafeFieldMarshaler"\n+      for="*\n+           zope.schema.interfaces.IFloat"\n+      />\n+  <adapter\n+      factory=".defaultfields.ASCIISafeFieldMarshaler"\n+      for="*\n+           zope.schema.interfaces.IDecimal"\n+      />\n \n-    <!-- Somehow this is necessary because these are in _bootstrapfields -->\n-    <adapter\n-        for="* zope.schema.Text"\n-        factory=".defaultfields.UnicodeValueFieldMarshaler"\n-        />\n-    <adapter\n-        for="* zope.schema.TextLine"\n-        factory=".defaultfields.UnicodeValueFieldMarshaler"\n-        />\n-    <adapter\n-        for="* zope.schema.Password"\n-        factory=".defaultfields.UnicodeValueFieldMarshaler"\n-        />\n-    <adapter\n-        for="* zope.schema.Int"\n-        factory=".defaultfields.ASCIISafeFieldMarshaler"\n-        />\n+  <!-- Somehow this is necessary because these are in _bootstrapfields -->\n+  <adapter\n+      factory=".defaultfields.UnicodeValueFieldMarshaler"\n+      for="*\n+           zope.schema.Text"\n+      />\n+  <adapter\n+      factory=".defaultfields.UnicodeValueFieldMarshaler"\n+      for="*\n+           zope.schema.TextLine"\n+      />\n+  <adapter\n+      factory=".defaultfields.UnicodeValueFieldMarshaler"\n+      for="*\n+           zope.schema.Password"\n+      />\n+  <adapter\n+      factory=".defaultfields.ASCIISafeFieldMarshaler"\n+      for="*\n+           zope.schema.Int"\n+      />\n \n-    <adapter factory=".defaultfields.BytesFieldMarshaler" />\n-    <adapter factory=".defaultfields.DatetimeMarshaler" />\n-    <adapter factory=".defaultfields.DateMarshaler" />\n-    <adapter factory=".defaultfields.TimedeltaMarshaler" />\n-    <adapter factory=".defaultfields.CollectionMarshaler" />\n+  <adapter factory=".defaultfields.BytesFieldMarshaler" />\n+  <adapter factory=".defaultfields.DatetimeMarshaler" />\n+  <adapter factory=".defaultfields.DateMarshaler" />\n+  <adapter factory=".defaultfields.TimedeltaMarshaler" />\n+  <adapter factory=".defaultfields.CollectionMarshaler" />\n \n-    <!-- Configure plone.supermodel handler if available -->\n-    <utility zcml:condition="installed plone.supermodel"\n-        factory=".supermodel.PrimaryFieldMetadataHandler"\n-        name="plone.rfc822.marshal"\n-        />\n+  <!-- Configure plone.supermodel handler if available -->\n+  <utility\n+      factory=".supermodel.PrimaryFieldMetadataHandler"\n+      name="plone.rfc822.marshal"\n+      zcml:condition="installed plone.supermodel"\n+      />\n \n </configure>\ndiff --git a/plone/rfc822/defaultfields.py b/plone/rfc822/defaultfields.py\nindex 250a6b2..d7e05d7 100644\n--- a/plone/rfc822/defaultfields.py\n+++ b/plone/rfc822/defaultfields.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Default field marshalers for the fields in zope.schema.\n \n Note that none of the marshalers will return a value for getContentType(),\n@@ -45,16 +44,14 @@\n \n import datetime\n import dateutil.parser\n-import six\n \n \n _marker = object()\n \n \n @implementer(IFieldMarshaler)\n-class BaseFieldMarshaler(object):\n-    """Base class for field marshalers\n-    """\n+class BaseFieldMarshaler:\n+    """Base class for field marshalers"""\n \n     ascii = False\n \n@@ -65,48 +62,41 @@ def __init__(self, context, field):\n         if field.interface is not None:\n             self.instance = field.interface(context, context)\n \n-    def marshal(self, charset=\'utf-8\', primary=False):\n+    def marshal(self, charset="utf-8", primary=False):\n         value = self._query(_marker)\n-        return (\n-            None if value is _marker else self.encode(value, charset, primary)\n-        )\n+        return None if value is _marker else self.encode(value, charset, primary)\n \n     def demarshal(\n         self,\n         value,\n         message=None,\n-        charset=\'utf-8\',\n+        charset="utf-8",\n         contentType=None,\n         primary=False,\n     ):\n-\n         if value:\n-            fieldValue = self.decode(\n-                value, message, charset, contentType, primary\n-            )\n+            fieldValue = self.decode(value, message, charset, contentType, primary)\n         else:\n             fieldValue = self.field.missing_value\n         self._set(fieldValue)\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n+    def encode(self, value, charset="utf-8", primary=False):\n         return None\n \n     def decode(\n         self,\n         value,\n         message=None,\n-        charset=\'utf-8\',\n+        charset="utf-8",\n         contentType=None,\n         primary=False,\n     ):\n-        raise ValueError(\n-            \'Demarshalling not implemented for %s\' % repr(self.field)\n-        )\n+        raise ValueError("Demarshalling not implemented for %s" % repr(self.field))\n \n     def getContentType(self):\n         return None\n \n-    def getCharset(self, default=\'utf-8\'):\n+    def getCharset(self, default="utf-8"):\n         return None\n \n     def postProcessMessage(self, message):\n@@ -118,10 +108,10 @@ def _query(self, default=None):\n         return self.field.query(self.instance, default)\n \n     def _set(self, value):\n-        if getattr(self.instance, \'marker\', False):\n+        if getattr(self.instance, "marker", False):\n             print(self.field.__name__)\n             print(value)\n-            print(\'-\' * 5)\n+            print("-" * 5)\n         try:\n             self.field.set(self.instance, value)\n         except TypeError as e:\n@@ -130,26 +120,25 @@ def _set(self, value):\n \n @adapter(Interface, IFromUnicode)\n class UnicodeFieldMarshaler(BaseFieldMarshaler):\n-    """Default marshaler for fields that support IFromUnicode\n-    """\n+    """Default marshaler for fields that support IFromUnicode"""\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n+    def encode(self, value, charset="utf-8", primary=False):\n         if value is None:\n             return\n-        if isinstance(value, six.binary_type):\n+        if isinstance(value, bytes):\n             # value already encoded\n             return value\n-        return six.text_type(value).encode(charset)\n+        return str(value).encode(charset)\n \n     def decode(\n         self,\n         value,\n         message=None,\n-        charset=\'utf-8\',\n+        charset="utf-8",\n         contentType=None,\n         primary=False,\n     ):\n-        if isinstance(value, six.binary_type):\n+        if isinstance(value, bytes):\n             unicodeValue = value.decode(charset)\n         else:\n             unicodeValue = value\n@@ -158,7 +147,7 @@ def decode(\n         except Exception as e:\n             raise ValueError(e)\n \n-    def getCharset(self, default=\'utf-8\'):\n+    def getCharset(self, default="utf-8"):\n         return default\n \n \n@@ -167,11 +156,9 @@ class UnicodeValueFieldMarshaler(UnicodeFieldMarshaler):\n     ASCII safe.\n     """\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n-        encoded = super(UnicodeValueFieldMarshaler, self).encode(\n-            value, charset, primary\n-        )\n-        if not encoded or max(six.iterbytes(encoded)) < 128:\n+    def encode(self, value, charset="utf-8", primary=False):\n+        encoded = super().encode(value, charset, primary)\n+        if not encoded or max(iter(encoded)) < 128:\n             self.ascii = True\n         else:\n             self.ascii = False\n@@ -185,7 +172,7 @@ class ASCIISafeFieldMarshaler(UnicodeFieldMarshaler):\n \n     ascii = True\n \n-    def getCharset(self, default=\'utf-8\'):\n+    def getCharset(self, default="utf-8"):\n         return None\n \n \n@@ -197,14 +184,14 @@ class BytesFieldMarshaler(BaseFieldMarshaler):\n \n     ascii = True\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n+    def encode(self, value, charset="utf-8", primary=False):\n         return value\n \n     def decode(\n         self,\n         value,\n         message=None,\n-        charset=\'utf-8\',\n+        charset="utf-8",\n         contentType=None,\n         primary=False,\n     ):\n@@ -213,12 +200,11 @@ def decode(\n \n @adapter(Interface, IDatetime)\n class DatetimeMarshaler(BaseFieldMarshaler):\n-    """Marshaler for Python datetime values\n-    """\n+    """Marshaler for Python datetime values"""\n \n     ascii = True\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n+    def encode(self, value, charset="utf-8", primary=False):\n         if value is None:\n             return None\n         return value.isoformat()\n@@ -227,11 +213,11 @@ def decode(\n         self,\n         value,\n         message=None,\n-        charset=\'utf-8\',\n+        charset="utf-8",\n         contentType=None,\n         primary=False,\n     ):\n-        if isinstance(value, six.binary_type):\n+        if isinstance(value, bytes):\n             value = value.decode(charset)\n         try:\n             return dateutil.parser.parse(value)\n@@ -250,7 +236,7 @@ class DateMarshaler(BaseFieldMarshaler):\n \n     ascii = True\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n+    def encode(self, value, charset="utf-8", primary=False):\n         if value is None:\n             return None\n         return value.isoformat()\n@@ -259,7 +245,7 @@ def decode(\n         self,\n         value,\n         message=None,\n-        charset=\'utf-8\',\n+        charset="utf-8",\n         contentType=None,\n         primary=False,\n     ):\n@@ -281,7 +267,7 @@ class TimedeltaMarshaler(BaseFieldMarshaler):\n \n     ascii = True\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n+    def encode(self, value, charset="utf-8", primary=False):\n         if value is None:\n             return None\n         return "%d:%d:%d" % (value.days, value.seconds, value.microseconds)\n@@ -290,12 +276,12 @@ def decode(\n         self,\n         value,\n         message=None,\n-        charset=\'utf-8\',\n+        charset="utf-8",\n         contentType=None,\n         primary=False,\n     ):\n         try:\n-            days, seconds, microseconds = [int(v) for v in value.split(":")]\n+            days, seconds, microseconds = (int(v) for v in value.split(":"))\n             return datetime.timedelta(days, seconds, microseconds)\n         except Exception as e:\n             raise ValueError(e)\n@@ -303,12 +289,11 @@ def decode(\n \n @adapter(Interface, ICollection)\n class CollectionMarshaler(BaseFieldMarshaler):\n-    """Marshaler for collection values\n-    """\n+    """Marshaler for collection values"""\n \n     ascii = False\n \n-    def getCharset(self, default=\'utf-8\'):\n+    def getCharset(self, default="utf-8"):\n         valueTypeMarshaler = queryMultiAdapter(\n             (self.context, self.field.value_type), IFieldMarshaler\n         )\n@@ -316,7 +301,7 @@ def getCharset(self, default=\'utf-8\'):\n             return None\n         return valueTypeMarshaler.getCharset(default)\n \n-    def encode(self, value, charset=\'utf-8\', primary=False):\n+    def encode(self, value, charset="utf-8", primary=False):\n         if value is None:\n             return None\n \n@@ -333,22 +318,22 @@ def encode(self, value, charset=\'utf-8\', primary=False):\n                 item, charset=charset, primary=primary\n             )\n             if marshaledValue is None:\n-                marshaledValue = \'\'\n+                marshaledValue = ""\n             value_lines.append(marshaledValue)\n             if not valueTypeMarshaler.ascii:\n                 ascii = False\n \n         self.ascii = ascii\n-        if value_lines and isinstance(value_lines[0], six.binary_type):\n-            return b\'||\'.join(value_lines)\n+        if value_lines and isinstance(value_lines[0], bytes):\n+            return b"||".join(value_lines)\n         else:\n-            return \'||\'.join(value_lines)\n+            return "||".join(value_lines)\n \n     def decode(\n         self,\n         value,\n         message=None,\n-        charset=\'utf-8\',\n+        charset="utf-8",\n         contentType=None,\n         primary=False,\n     ):\n@@ -357,19 +342,17 @@ def decode(\n         )\n         if valueTypeMarshaler is None:\n             raise ValueError(\n-                \'Cannot demarshal value type %s\' % repr(self.field.value_type)\n+                "Cannot demarshal value type %s" % repr(self.field.value_type)\n             )\n \n         listValue = []\n-        if isinstance(value, six.binary_type):\n-            lines = value.split(b\'||\')\n+        if isinstance(value, bytes):\n+            lines = value.split(b"||")\n         else:\n-            lines = value.split(\'||\')\n+            lines = value.split("||")\n         for line in lines:\n             listValue.append(\n-                valueTypeMarshaler.decode(\n-                    line, message, charset, contentType, primary\n-                )\n+                valueTypeMarshaler.decode(line, message, charset, contentType, primary)\n             )\n \n         sequenceType = self.field._type\ndiff --git a/plone/rfc822/fields.rst b/plone/rfc822/fields.rst\nindex e656445..632aade 100644\n--- a/plone/rfc822/fields.rst\n+++ b/plone/rfc822/fields.rst\n@@ -63,7 +63,6 @@ This interface is implemented by a the following class::\n     >>> from decimal import Decimal\n     >>> from zope.interface import implementer\n     >>> import datetime\n-    >>> import six\n     >>> @implementer(ITestContent)\n     ... class TestContent(object):\n     ...     _text = u"text\\xd8"\n@@ -80,7 +79,7 @@ This interface is implemented by a the following class::\n     ...     _id = u\'some.id\'\n     ...     _dottedName = \'dotted.name\'\n     ...     _bool = True\n-    ...     _int = long(-10) if six.PY2 else -10\n+    ...     _int = -10\n     ...     _float = 0.3\n     ...     _decimal = Decimal("5.0")\n     ...     _choice1 = u"two"\n@@ -117,7 +116,7 @@ Text\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_text\']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    \'text\\xc3\\x98\'\n+    b\'text\\xc3\\x98\'\n     >>> marshaler.decode(b\'text\\xc3\\x98\')\n     \'text\\xd8\'\n     >>> marshaler.getContentType() is None\n@@ -132,7 +131,7 @@ if the field value is within the ascii range::\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_text2\']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    \'text\'\n+    b\'text\'\n     >>> marshaler.decode(b\'text\\xc3\\x98\')\n     \'text\\xd8\'\n     >>> marshaler.getContentType() is None\n@@ -149,7 +148,7 @@ TextLine\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_textLine\']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    \'textline\\xc3\\x98\'\n+    b\'textline\\xc3\\x98\'\n     >>> marshaler.decode(b\'textline\\xc3\\x98\')\n     \'textline\\xd8\'\n     >>> marshaler.getContentType() is None\n@@ -166,7 +165,7 @@ if the field value is within the ascii range.\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_textLine2\']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    \'textline\'\n+    b\'textline\'\n     >>> marshaler.decode(b\'textline\\xc3\\x98\')\n     \'textline\\xd8\'\n     >>> marshaler.getContentType() is None\n@@ -183,7 +182,7 @@ Password\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_password\']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    \'password\\xc3\\x98\'\n+    b\'password\\xc3\\x98\'\n     >>> marshaler.decode(b\'password\\xc3\\x98\')\n     \'password\\xd8\'\n     >>> marshaler.getContentType() is None\n@@ -200,7 +199,7 @@ if the field value is within the ascii range.\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_password2\']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    \'password\'\n+    b\'password\'\n     >>> marshaler.decode(b\'password\\xc3\\x98\')\n     \'password\\xd8\'\n     >>> marshaler.getContentType() is None\n@@ -219,7 +218,7 @@ Bytes\n     >>> marshaler.marshal()\n     \'bytes\'\n     >>> marshaler.decode(b\'bytes\')\n-    \'bytes\'\n+    b\'bytes\'\n     >>> marshaler.getContentType() is None\n     True\n     >>> marshaler.getCharset(\'utf-8\') is None\n@@ -236,7 +235,7 @@ BytesLine\n     >>> marshaler.marshal()\n     \'bytesline\'\n     >>> marshaler.decode(b\'bytesline\')\n-    \'bytesline\'\n+    b\'bytesline\'\n     >>> marshaler.getContentType() is None\n     True\n     >>> marshaler.getCharset(\'utf-8\') is None\n@@ -254,7 +253,7 @@ Note: There is a BytesField which stores b\'foo\' binary string.\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_ascii\']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    \'ascii\'\n+    b\'ascii\'\n     >>> marshaler.decode(b\'ascii\')\n     \'ascii\'\n     >>> marshaler.getContentType() is None\n@@ -271,7 +270,7 @@ ASCIILine\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_asciiLine\']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    \'asciiline\'\n+    b\'asciiline\'\n     >>> marshaler.decode(b\'asciiline\')\n     \'asciiline\'\n     >>> marshaler.getContentType() is None\n@@ -290,15 +289,12 @@ An URI is in Python 2 based on unicode text, in Python 3 on bytes.\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_uri\']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    \'http://plone.org\'\n+    b\'http://plone.org\'\n     >>> marshaler.decode(b\'http://plone.org\')\n     \'http://plone.org\'\n     >>> marshaler.getContentType() is None\n     True\n-    >>> if six.PY2:\n-    ...     expected = None  # its IBytes based\n-    ... else:\n-    ...     expected = \'utf-8\'\n+    >>> expected = \'utf-8\'\n     >>> marshaler.getCharset(\'utf-8\') == expected\n     True\n     >>> marshaler.ascii\n@@ -311,15 +307,12 @@ Id\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_id\']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    \'some.id\'\n+    b\'some.id\'\n     >>> marshaler.decode(b\'some.id\')\n     \'some.id\'\n     >>> marshaler.getContentType() is None\n     True\n-    >>> if six.PY2:\n-    ...     expected = None  # its IBytes based\n-    ... else:\n-    ...     expected = \'utf-8\'\n+    >>> expected = \'utf-8\'\n     >>> marshaler.getCharset(\'utf-8\') == expected\n     True\n     >>> marshaler.ascii\n@@ -332,15 +325,12 @@ DottedName\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_dottedName\']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    \'dotted.name\'\n+    b\'dotted.name\'\n     >>> marshaler.decode(b\'dotted.name\')\n     \'dotted.name\'\n     >>> marshaler.getContentType() is None\n     True\n-    >>> if six.PY2:\n-    ...     expected = None  # its IBytes based\n-    ... else:\n-    ...     expected = \'utf-8\'\n+    >>> expected = \'utf-8\'\n     >>> marshaler.getCharset(\'utf-8\') == expected\n     True\n     >>> marshaler.ascii\n@@ -353,10 +343,10 @@ Bool\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_bool\']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    \'True\'\n+    b\'True\'\n     >>> t._bool = False\n     >>> marshaler.marshal()\n-    \'False\'\n+    b\'False\'\n     >>> t._bool = True\n     >>> marshaler.decode(b\'True\')\n     True\n@@ -376,7 +366,7 @@ Int\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_int\']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    \'-10\'\n+    b\'-10\'\n     >>> marshaler.decode(b\'-10\')\n     -10\n     >>> marshaler.getContentType() is None\n@@ -393,7 +383,7 @@ Float\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_float\']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    \'0.3\'\n+    b\'0.3\'\n     >>> marshaler.decode(b\'0.25\')\n     0.25\n     >>> marshaler.getContentType() is None\n@@ -410,7 +400,7 @@ Decimal\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_decimal\']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    \'5.0\'\n+    b\'5.0\'\n     >>> marshaler.decode(b\'5.0\')\n     Decimal(\'5.0\')\n     >>> marshaler.getContentType() is None\n@@ -427,7 +417,7 @@ Choice\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_choice1\']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    \'two\'\n+    b\'two\'\n     >>> marshaler.decode(b\'one\')\n     \'one\'\n     >>> marshaler.getContentType() is None\n@@ -439,7 +429,7 @@ Choice\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_choice2\']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    \'two\'\n+    b\'two\'\n     >>> marshaler.decode(b\'three\')\n     \'three\'\n     >>> marshaler.getContentType() is None\n@@ -507,7 +497,7 @@ Tuple\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_tuple\']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    \'one\\xc3\\x98||two\'\n+    b\'one\\xc3\\x98||two\'\n     >>> marshaler.decode(b\'one\\xc3\\x98||two\')\n     (\'one\\xd8\', \'two\')\n     >>> marshaler.getContentType() is None\n@@ -524,7 +514,7 @@ List\n \n     >>> marshaler = getMultiAdapter((t, ITestContent[\'_list\']), IFieldMarshaler)\n     >>> marshaler.marshal()\n-    \'three||four\'\n+    b\'three||four\'\n     >>> marshaler.decode(b\'three||four\')\n     [\'three\', \'four\']\n     >>> marshaler.getContentType() is None\ndiff --git a/plone/rfc822/interfaces.py b/plone/rfc822/interfaces.py\nindex cdc09e0..863ec6d 100644\n--- a/plone/rfc822/interfaces.py\n+++ b/plone/rfc822/interfaces.py\n@@ -1,12 +1,10 @@\n-# -*- coding: utf-8 -*-\n from zope import schema\n from zope.interface import Attribute\n from zope.interface import Interface\n \n \n class IPrimaryField(Interface):\n-    """Marker interface for the primary field in a schema\n-    """\n+    """Marker interface for the primary field in a schema"""\n \n \n class IPrimaryFieldInfo(Interface):\n@@ -14,6 +12,7 @@ class IPrimaryFieldInfo(Interface):\n \n     Content type frameworks should register an adapter to this interface.\n     """\n+\n     fieldname = Attribute("Field name")\n     field = Attribute("Field")\n     value = Attribute("Field value")\n@@ -22,23 +21,23 @@ class IPrimaryFieldInfo(Interface):\n class IMessageAPI(Interface):\n     """Functions provided by this module\n \n-    These can all be imported as::\n+    These can all be imported as:\n \n-        >>> from plone.rfc822 import constructMessage\n+    from plone.rfc822 import constructMessage\n     """\n \n-    def constructMessageFromSchema(context, schema, charset=\'utf-8\'):\n+    def constructMessageFromSchema(context, schema, charset="utf-8"):\n         """Convenience method which calls ``constructMessage()`` with all the\n         fields, in order, of the given schema interface\n         """\n \n-    def constructMessageFromSchemata(context, schemata, charset=\'utf-8\'):\n+    def constructMessageFromSchemata(context, schemata, charset="utf-8"):\n         """Convenience method which calls ``constructMessage()`` with all the\n         fields, in order, of all the given schemata (a sequence of schema\n         interfaces).\n         """\n \n-    def constructMessage(context, fields, charset=\'utf-8\'):\n+    def constructMessage(context, fields, charset="utf-8"):\n         """Helper method to construct a message.\n \n         ``context`` is a content object.\n@@ -65,28 +64,20 @@ def renderMessage(message, mangleFromHeader=False):\n         DEPRECATED. Use \'message.as_string()\' instead.\n         """\n \n-    def initializeObjectFromSchema(\n-        context,\n-        schema,\n-        message,\n-        defaultCharset=\'utf-8\'\n-    ):\n+    def initializeObjectFromSchema(context, schema, message, defaultCharset="utf-8"):\n         """Convenience method which calls ``initializeObject()`` with all the\n         fields, in order, of the given schema interface\n         """\n \n     def initializeObjectFromSchemata(\n-        context,\n-        schemata,\n-        message,\n-        defaultCharset=\'utf-8\'\n+        context, schemata, message, defaultCharset="utf-8"\n     ):\n         """Convenience method which calls ``initializeObject()`` with all the\n         fields in order, of all the given schemata (a sequence of schema\n         interfaces).\n         """\n \n-    def initializeObject(context, fields, message, defaultCharset=\'utf-8\'):\n+    def initializeObject(context, fields, message, defaultCharset="utf-8"):\n         """Initialise an object from a message.\n \n         ``context`` is the content object to initialise.\n@@ -113,15 +104,15 @@ class IFieldMarshaler(Interface):\n     """\n \n     ascii = schema.Bool(\n-        title=u"ASCII only",\n-        description=u"Set this to true if this marshaler is guaranteed "\n+        title="ASCII only",\n+        description="Set this to true if this marshaler is guaranteed "\n         "to return ASCII characters only. This will allow "\n         "a header to be rendered without an encoding wrapper",\n         default=False,\n         required=True,\n     )\n \n-    def marshal(charset=\'utf-8\', primary=False):\n+    def marshal(charset="utf-8", primary=False):\n         """Return the value of the adapted field on the adapted context.\n \n         Note: It may be necessary to adapt the context to the field\'s\n@@ -142,11 +133,7 @@ def marshal(charset=\'utf-8\', primary=False):\n         """\n \n     def demarshal(\n-        value,\n-        message=None,\n-        charset=\'utf-8\',\n-        contentType=None,\n-        primary=False\n+        value, message=None, charset="utf-8", contentType=None, primary=False\n     ):\n         """Update the value of the adapted field on the adapted context.\n \n@@ -171,7 +158,7 @@ def demarshal(\n         Raise ``ValueError`` if the demarshalling cannot be completed.\n         """\n \n-    def encode(value, charset=\'utf-8\', primary=False):\n+    def encode(value, charset="utf-8", primary=False):\n         """Like marshal(), but acts on the passed-in ``value`` instead of\n         reading it from the field.\n \n@@ -181,13 +168,7 @@ def encode(value, charset=\'utf-8\', primary=False):\n         Return None if the value cannot be encoded.\n         """\n \n-    def decode(\n-        value,\n-        message=None,\n-        charset=\'utf-8\',\n-        contentType=None,\n-        primary=False\n-    ):\n+    def decode(value, message=None, charset="utf-8", contentType=None, primary=False):\n         """Like demarshal, but return the value instead of updating the field.\n \n         This is only used for collection fields and other situations where\n@@ -204,7 +185,7 @@ def getContentType():\n         May return None if a content type does not make sense.\n         """\n \n-    def getCharset(defualt=\'utf-8\'):\n+    def getCharset(default="utf-8"):\n         """Return the charset of the field. The value should be appropriate\n         for the \'charset\' parameter to the Content-Type HTTP header. This is\n         mainly used for marshalling\ndiff --git a/plone/rfc822/message.rst b/plone/rfc822/message.rst\nindex d6beaaf..d468158 100644\n--- a/plone/rfc822/message.rst\n+++ b/plone/rfc822/message.rst\n@@ -23,7 +23,7 @@ annotations, which we will use later in this test::\n \n ::\n \n-    >>> from six import StringIO\n+    >>> from io import StringIO\n     >>> from zope.configuration import xmlconfig\n     >>> xmlconfig.xmlconfig(StringIO(configuration))\n \n@@ -147,7 +147,7 @@ register it using the ``zope.component`` API.\n \n Hint: If the schema contained multiple text fields, this adapter would apply\n to all of them. To avoid that, we could either mark the field with a custom\n-marker interface (similary to the way we marked a field with ``IPrimaryField``\n+marker interface (similarly to the way we marked a field with ``IPrimaryField``\n above), or have the marshaler check the field name.\n \n Let\'s now try again:\n@@ -554,7 +554,7 @@ We can also reconstruct the object from this message.\n     >>> initializeObjectFromSchema(newFileContent, IFileContent, inputMessage)\n \n     >>> newFileContent.file1.data\n-    \'dummy file\'\n+    b\'dummy file\'\n     >>> newFileContent.file1.contentType\n     \'text/plain\'\n     >>> newFileContent.file1.filename\n@@ -596,14 +596,14 @@ And again, we can reconstruct the object, this time with both fields:\n     >>> initializeObjectFromSchema(newFileContent, IFileContent, inputMessage)\n \n     >>> newFileContent.file1.data\n-    \'dummy file\'\n+    b\'dummy file\'\n     >>> newFileContent.file1.contentType\n     \'text/plain\'\n     >>> newFileContent.file1.filename\n     \'dummy1.txt\'\n \n     >>> newFileContent.file2.data\n-    \'<html><body>test</body></html>\'\n+    b\'<html><body>test</body></html>\'\n     >>> newFileContent.file2.contentType\n     \'text/html\'\n     >>> newFileContent.file2.filename\n@@ -621,7 +621,6 @@ Technical both is fine.\n \n ::\n \n-    >>> import six\n     >>> content.description = "Test content\\nwith newline difference"\n     >>> msg = constructMessageFromSchema(content, ITestContent)\n     >>> effective_output = msg.as_string()\ndiff --git a/plone/rfc822/supermodel.py b/plone/rfc822/supermodel.py\nindex 6d24d72..91f8725 100644\n--- a/plone/rfc822/supermodel.py\n+++ b/plone/rfc822/supermodel.py\n@@ -1,19 +1,18 @@\n-# -*- coding: utf-8 -*-\n try:\n     from plone.supermodel.interfaces import IFieldMetadataHandler\n+\n     HAVE_SUPERMODEL = True\n except ImportError:\n     HAVE_SUPERMODEL = False\n \n if HAVE_SUPERMODEL:\n-\n     from plone.rfc822.interfaces import IPrimaryField\n     from plone.supermodel.utils import ns\n     from zope.interface import alsoProvides\n     from zope.interface import implementer\n \n     @implementer(IFieldMetadataHandler)\n-    class PrimaryFieldMetadataHandler(object):\n+    class PrimaryFieldMetadataHandler:\n         """Define the ``marshal`` namespace.\n \n         This lets you write marshal:primary="true" on a field to mark it as\n@@ -24,13 +23,16 @@ class PrimaryFieldMetadataHandler(object):\n         prefix = "marshal"\n \n         def read(self, fieldNode, schema, field):\n-            primary = fieldNode.get(ns(\'primary\', self.namespace))\n-            if (\n-                primary is not None and\n-                primary.lower() in ("true", "on", "yes", "y", "1")\n+            primary = fieldNode.get(ns("primary", self.namespace))\n+            if primary is not None and primary.lower() in (\n+                "true",\n+                "on",\n+                "yes",\n+                "y",\n+                "1",\n             ):\n                 alsoProvides(field, IPrimaryField)\n \n         def write(self, fieldNode, schema, field):\n             if IPrimaryField.providedBy(field):\n-                fieldNode.set(ns(\'primary\', self.namespace), "true")\n+                fieldNode.set(ns("primary", self.namespace), "true")\ndiff --git a/plone/rfc822/tests.py b/plone/rfc822/tests.py\nindex a2bb902..8dbf8d3 100644\n--- a/plone/rfc822/tests.py\n+++ b/plone/rfc822/tests.py\n@@ -1,56 +1,45 @@\n-# -*- coding: utf-8 -*-\n from plone.rfc822._utils import safe_native_string\n from plone.testing import layered\n from plone.testing.zca import UNIT_TESTING\n \n import doctest\n-import re\n-import six\n import unittest\n \n \n DOCFILES = [\n-    \'message.rst\',\n-    \'fields.rst\',\n-    \'supermodel.rst\',\n+    "message.rst",\n+    "fields.rst",\n+    "supermodel.rst",\n ]\n \n-optionflags = doctest.ELLIPSIS | \\\n-    doctest.REPORT_UDIFF | \\\n-    doctest.NORMALIZE_WHITESPACE | \\\n-    doctest.REPORT_ONLY_FIRST_FAILURE\n-\n-\n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        if six.PY3:\n-            got = re.sub("b\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+optionflags = (\n+    doctest.ELLIPSIS\n+    | doctest.REPORT_UDIFF\n+    | doctest.NORMALIZE_WHITESPACE\n+    | doctest.REPORT_ONLY_FIRST_FAILURE\n+)\n \n \n class TestUtils(unittest.TestCase):\n-\n     def test_safe_native_string(self):\n-        self.assertIsInstance(safe_native_string(b\'\'), str)\n-        self.assertIsInstance(safe_native_string(u\'\'), str)\n+        self.assertIsInstance(safe_native_string(b""), str)\n+        self.assertIsInstance(safe_native_string(""), str)\n         self.assertRaises(ValueError, safe_native_string, None)\n \n \n def test_suite():\n-\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(\n-            doctest.DocFileSuite(\n-                docfile,\n-                optionflags=optionflags,\n-                checker=Py23DocChecker(),\n-            ),\n-            layer=UNIT_TESTING\n-        )\n-        for docfile in DOCFILES\n-    ])\n-    suite.addTest(TestUtils(\'test_safe_native_string\'))\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite(\n+                    docfile,\n+                    optionflags=optionflags,\n+                ),\n+                layer=UNIT_TESTING,\n+            )\n+            for docfile in DOCFILES\n+        ]\n+    )\n+    suite.addTest(TestUtils("test_safe_native_string"))\n     return suite\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..acc473d 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,66 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\n+ignore-packages = [\'plone.supermodel\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..756f3fe 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,25 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+per-file-ignores =\n+    plone/rfc822/__init__.py:F401\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex 6ba81e5..a570c29 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,55 +1,63 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n import os\n \n \n-version = \'2.0.3.dev0\'\n+version = "3.0.0.dev0"\n \n setup(\n-    name=\'plone.rfc822\',\n+    name="plone.rfc822",\n     version=version,\n     description="RFC822 marshalling for zope.schema fields",\n     long_description=(\n-        open("README.rst").read() + "\\n" +\n-        open("CHANGES.rst").read() + "\\n" +\n-        open(os.path.join("plone", "rfc822", "message.rst")).read()),\n+        open("README.rst").read()\n+        + "\\n"\n+        + open("CHANGES.rst").read()\n+        + "\\n"\n+        + open(os.path.join("plone", "rfc822", "message.rst")).read()\n+    ),\n     # Get more strings from\n     # https://pypi.org/classifiers/\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n         "License :: OSI Approved :: BSD License",\n     ],\n-    keywords=\'zope schema rfc822\',\n-    author=\'Martin Aspeli and contributors\',\n-    author_email=\'optilude@gmail.com\',\n-    url=\'https://pypi.org/project/plone.rfc822\',\n-    license=\'BSD\',\n+    keywords="zope schema rfc822",\n+    author="Martin Aspeli and contributors",\n+    author_email="optilude@gmail.com",\n+    url="https://pypi.org/project/plone.rfc822",\n+    license="BSD",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     extras_require={\n-        \'supermodel\': [\'plone.supermodel\'],\n-        \'test\': [\'plone.testing\', \'plone.supermodel\'],\n+        "supermodel": ["plone.supermodel"],\n+        "test": [\n+            "plone.testing",\n+            "plone.supermodel",\n+            "zope.annotation",\n+            "zope.configuration",\n+            "persistent",\n+        ],\n     },\n     install_requires=[\n-        \'python-dateutil\',\n-        \'setuptools\',\n-        \'zope.component\',\n-        \'zope.deprecation\',\n-        \'zope.interface\',\n-        \'zope.schema\',\n+        "python-dateutil",\n+        "setuptools",\n+        "zope.component",\n+        "zope.interface",\n+        "zope.schema",\n     ],\n     entry_points="""\n     """,\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..7b72ec1\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,76 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies\n+skip_install = true\n+deps =\n+    build\n+    z3c.dependencychecker==2.11\n+commands =\n+    python -m build --sdist --no-isolation\n+    dependencychecker\n+\n+[testenv:dependencies-graph]\n+description = generate a graph out of the package\'s dependencies\n+deps =\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+use_develop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.rfc822 {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+use_develop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.rfc822 {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

