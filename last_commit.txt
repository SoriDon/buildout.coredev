Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-04-19T17:22:02+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/d501f93529105e08af79dc7637a4032325273531

Add image_srcset output filter

Files changed:
A news/49.feature
A plone/outputfilters/filters/image_srcset.py
M plone/outputfilters/filters/configure.zcml
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py

b'diff --git a/news/49.feature b/news/49.feature\nnew file mode 100644\nindex 0000000..ce4f04b\n--- /dev/null\n+++ b/news/49.feature\n@@ -0,0 +1 @@\n+Add image_srcset output filter, to convert IMG tags into PICTURE tags with multiple source definitions as define in imaging control panel [MrTango]\n\\ No newline at end of file\ndiff --git a/plone/outputfilters/filters/configure.zcml b/plone/outputfilters/filters/configure.zcml\nindex 19ef066..0899ce7 100644\n--- a/plone/outputfilters/filters/configure.zcml\n+++ b/plone/outputfilters/filters/configure.zcml\n@@ -10,6 +10,13 @@\n     factory=".resolveuid_and_caption.ResolveUIDAndCaptionFilter"\n     />\n \n+  <adapter\n+    provides="..interfaces.IFilter"\n+    name="image_srcset"\n+    for="* *"\n+    factory=".image_srcset.ImageSrcsetFilter"\n+    />\n+\n   <!-- in Plone 5, we always resolve uids -->\n   <utility factory=".resolveuid_and_caption.ResolveUidsAlwaysEnabled"\n            name="plone5-always-enabled"\ndiff --git a/plone/outputfilters/filters/image_srcset.py b/plone/outputfilters/filters/image_srcset.py\nnew file mode 100644\nindex 0000000..059cfd4\n--- /dev/null\n+++ b/plone/outputfilters/filters/image_srcset.py\n@@ -0,0 +1,101 @@\n+import re\n+\n+from bs4 import BeautifulSoup\n+from plone.base.interfaces import IImagingSchema\n+from plone.outputfilters.interfaces import IFilter\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFPlone.utils import safe_nativestring\n+from zope.component import getUtility\n+from zope.interface import implementer\n+\n+\n+@implementer(IFilter)\n+class ImageSrcsetFilter(object):\n+    """Converts img/figure tags with a data-srcset attribute into srcset definition.\n+    <picture>\n+        <source media="(max-width:768px) and (orientation:portrait)"\n+                srcset="resolveuid/44d84ffd32924bb8b9dbd720f43e761c/@@images/image/teaser" />\n+        <source media="(max-width:768px)"\n+                srcset="resolveuid/44d84ffd32924bb8b9dbd720f43e761c/@@images/image/large" />\n+        <source media="(min-width:992px)"\n+                srcset="resolveuid/44d84ffd32924bb8b9dbd720f43e761c/@@images/image/larger" />\n+        <source media="(min-width:1200px)"\n+                srcset="resolveuid/44d84ffd32924bb8b9dbd720f43e761c/@@images/image/great" />\n+        <source media="(min-width:1400px)"\n+                srcset="resolveuid/44d84ffd32924bb8b9dbd720f43e761c/@@images/image/huge" />\n+        <img src="resolveuid/44d84ffd32924bb8b9dbd720f43e761c/@@images/image/huge" />\n+    </picture>\n+    """\n+\n+    order = 700\n+\n+    def _shorttag_replace(self, match):\n+        tag = match.group(1)\n+        if tag in self.singleton_tags:\n+            return "<" + tag + " />"\n+        else:\n+            return "<" + tag + "></" + tag + ">"\n+\n+    def is_enabled(self):\n+        if self.context is None:\n+            return False\n+        else:\n+            return True\n+\n+    def __init__(self, context=None, request=None):\n+        self.current_status = None\n+        self.context = context\n+        self.request = request\n+\n+    def __call__(self, data):\n+        data = re.sub(r"<([^<>\\s]+?)\\s*/>", self._shorttag_replace, data)\n+        soup = BeautifulSoup(safe_nativestring(data), "html.parser")\n+        self.image_srcsets = self.image_srcsets()\n+\n+        for elem in soup.find_all("img"):\n+            srcset_name = elem.attrs.get("data-srcset", "")\n+            if not srcset_name:\n+                continue\n+            elem.replace_with(self.convert_to_srcset(srcset_name, elem, soup))\n+        return str(soup)\n+\n+    def image_srcsets(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n+        return settings.image_srcsets\n+\n+    def convert_to_srcset(self, srcset_name, elem, soup):\n+        """Converts the element to a srcset definition\n+        """\n+        srcset_config = self.image_srcsets.get(srcset_name)\n+        sourceset = srcset_config.get(\'sourceset\')\n+        if not sourceset:\n+            return elem\n+        src = elem.attrs.get("src")\n+        picture_tag = soup.new_tag("picture")\n+        for i, source in enumerate(sourceset):\n+            scale = source[\'scale\']\n+            media = source.get(\'media\')\n+            title = elem.attrs.get(\'title\')\n+            alt = elem.attrs.get(\'alt\')\n+            klass = elem.attrs.get(\'class\')\n+            if i == len(sourceset) - 1:\n+                source_tag = soup.new_tag("img", src=self.update_src_scale(src=src, scale=scale))\n+            else:\n+                # TODO guess type:\n+                source_tag = soup.new_tag("source", srcset=self.update_src_scale(src=src, scale=scale))\n+            source_tag["loading"] = "lazy"\n+            if media:\n+                source_tag["media"] = media\n+            if title:\n+                source_tag["title"] = title\n+            if alt:\n+                source_tag["alt"] = alt\n+            if klass:\n+                source_tag["class"] = klass\n+            picture_tag.append(source_tag)\n+        return picture_tag\n+\n+    def update_src_scale(self, src, scale):\n+        parts = src.split("/")\n+        return "/".join(parts[:-1]) + "/{}".format(scale)\n\\ No newline at end of file\ndiff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 935c926..4773bb1 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -159,8 +159,9 @@ def __call__(self, data):\n                     and not href.startswith(\'#\'):\n                 attributes[\'href\'] = self._render_resolveuid(href)\n         for elem in soup.find_all([\'source\', \'img\']):\n-            # SOURCE is used for video and audio.\n-            # SRCSET specified multiple images (see below).\n+            # handles srcset attributes, not src\n+            # parent of SOURCE is picture here.\n+            # SRCSET on source/img specifies one or more images (see below).\n             attributes = elem.attrs\n             srcset = attributes.get(\'srcset\')\n             if not srcset:\n@@ -169,10 +170,11 @@ def __call__(self, data):\n             # [(src1, 480w), (src2, 360w)]\n             srcs = [src.strip().split() for src in srcset.strip().split(\',\') if src.strip()]\n             for idx, elm in enumerate(srcs):\n-                srcs[idx][0] = self._render_resolveuid(elm[0])\n+                image, fullimage, src, description = self.resolve_image(elm[0])\n+                srcs[idx][0] = src\n             attributes[\'srcset\'] = \',\'.join(\' \'.join(src) for src in srcs)\n         for elem in soup.find_all([\'source\', \'iframe\', \'audio\', \'video\']):\n-            # SOURCE is used for video and audio.\n+            # parent of SOURCE is video or audio here.\n             # AUDIO/VIDEO can also have src attribute.\n             # IFRAME is used to embed PDFs.\n             attributes = elem.attrs\n@@ -181,6 +183,7 @@ def __call__(self, data):\n                 continue\n             attributes[\'src\'] = self._render_resolveuid(src)\n         for elem in soup.find_all(\'img\'):\n+            # handles src attribute\n             attributes = elem.attrs\n             src = attributes.get(\'src\', \'\')\n             image, fullimage, src, description = self.resolve_image(src)\n@@ -325,7 +328,7 @@ def handle_captioned_image(self, attributes, image, fullimage,\n                                elem, caption):\n         """Handle captioned image.\n \n-        The img element is replaced by a definition list\n+        The img element is replaced by figure\n         as created by the template ../browser/captioned_image.pt\n         """\n         klass = \' \'.join(attributes[\'class\'])\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex ec748f5..cc9a971 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -115,6 +115,71 @@ def test_parsing_minimal(self):\n         res = self.parser(text)\n         self.assertEqual(text, str(res))\n \n+    def test_parsing_long_doc(self):\n+        text = """<div class="hero">\n+<h1>Welcome!</h1>\n+<p><a href="https://plone.com" class="btn btn-primary" target="_blank" rel="noopener">Learn more about Plone</a></p>\n+</div>\n+<p class="discreet">If you\'re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone support channels about this.</p>\n+<p class="discreet"><img class="image-richtext image-inline image-size-small" src="resolveuid/{uid}/@@images/image/preview" alt="" data-linktype="image" data-srcset="small" data-scale="preview" data-val="{uid}" /></p>\n+<h2>Get started</h2>\n+<p>Before you start exploring your newly created Plone site, please do the following:</p>\n+<ol>\n+<li>Make sure you are logged in as an admin/manager user. <span class="discreet">(You should have a Site Setup entry in the user menu)</span></li>\n+<li><a href="@@mail-controlpanel" target="_blank" rel="noopener">Set up your mail server</a>. <span class="discreet">(Plone needs a valid SMTP server to verify users and send out password reminders)</span></li>\n+<li><a href="@@security-controlpanel" target="_blank" rel="noopener">Decide what security level you want on your site</a>. <span class="discreet">(Allow self registration, password policies, etc)</span></li>\n+</ol>\n+<h2>Get comfortable</h2>\n+<p>After that, we suggest you do one or more of the following:</p>\n+<ul>\n+<li>Find out <a href="https://plone.com/features/" class="link-plain" target="_blank" rel="noopener">What\'s new in Plone</a>.</li>\n+<li>Read the <a href="https://docs.plone.org" class="link-plain" target="_blank" rel="noopener">documentation</a>.</li>\n+<li>Follow a <a href="https://training.plone.org" class="link-plain" target="_blank" rel="noopener">training</a>.</li>\n+<li>Explore the <a href="https://plone.org/download/add-ons" class="link-plain" target="_blank" rel="noopener">available add-ons</a> for Plone.</li>\n+<li>Read and/or subscribe to the <a href="https://plone.org/support" class="link-plain" target="_blank" rel="noopener">support channels</a>.</li>\n+<li>Find out <a href="https://plone.com/success-stories/" class="link-plain" target="_blank" rel="noopener">how others are using Plone</a>.</li>\n+</ul>\n+<p><img class="image-richtext image-left image-size-medium captioned zoomable" src="resolveuid/{uid}/@@images/image/larger" alt="" data-linktype="image" data-srcset="medium" data-scale="larger" data-val="{uid}" /></p>\n+<h2>Make it your own</h2>\n+<p>Plone has a lot of different settings that can be used to make it do what you want it to. Some examples:</p>\n+<ul>\n+<li>Try out a different theme, either pick from <a href="@@theming-controlpanel" target="_blank" rel="noopener">the included ones</a>, or one of the <a href="https://plone.org/download/add-ons" class="link-plain" target="_blank" rel="noopener">available themes from plone.org</a>. <span class="discreet">(Make sure the theme is compatible with the version of Plone you are currently using)</span></li>\n+<li><a href="@@content-controlpanel" target="_blank" rel="noopener"> Decide what kind of workflow you want in your site.</a> <span class="discreet">(The default is typical for a public web site; if you want to use Plone as a closed intranet or extranet, you can choose a different workflow.)</span></li>\n+<li>By default, Plone uses a visual editor for content. <span class="discreet">(If you prefer text-based syntax and/or wiki syntax, you can change this in the <a href="@@markup-controlpanel" target="_blank" rel="noopener">markup control panel</a>)</span></li>\n+<li>\xe2\x80\xa6and many more settings are available in the <a href="@@overview-controlpanel" target="_blank" rel="noopener">Site Setup</a>.</li>\n+</ul>\n+<h2>Tell us how you use it</h2>\n+<p>Are you doing something interesting with Plone? Big site deployments, interesting use cases? Do you have a company that delivers Plone-based solutions?</p>\n+<ul>\n+<li>Add your company as a <a href="https://plone.com/providers/" class="link-plain" target="_blank" rel="noopener">Plone provider</a>.</li>\n+<li>Add a <a href="https://plone.com/success-stories/" class="link-plain" target="_blank" rel="noopener">success story</a> describing your deployed project and customer.</li>\n+</ul>\n+<h2>Find out more about Plone</h2>\n+<p>Plone is a powerful content management system built on a rock-solid application stack written using the Python programming language. More about these technologies:</p>\n+<ul>\n+<li>The <a href="https://plone.com" class="link-plain" target="_blank" rel="noopener">Plone open source Content Management System</a> web site for evaluators and decision makers.</li>\n+<li>The <a href="https://plone.org" class="link-plain" target="_blank" rel="noopener">Plone community </a> web site for developers.</li>\n+<li>The <a href="https://www.python.org" class="link-plain" target="_blank" rel="noopener">Python programming language</a> web site.</li>\n+</ul>\n+<h2><img class="image-richtext image-inline image-size-large" src="resolveuid/{uid}/@@images/image/huge" alt="" data-linktype="image" data-srcset="large" data-scale="huge" data-val="{uid}" /></h2>\n+<h2>Support the Plone Foundation</h2>\n+<p>Plone is made possible only through the efforts of thousands of dedicated individuals and hundreds of companies. The Plone Foundation:</p>\n+<ul>\n+<li>\xe2\x80\xa6protects and promotes Plone.</li>\n+<li>\xe2\x80\xa6is a registered 501(c)(3) charitable organization.</li>\n+<li>\xe2\x80\xa6donations are tax-deductible.</li>\n+<li><a href="https://plone.org/sponsors/be-a-hero" target="_blank" rel="noopener">Support the Foundation and help make Plone better!</a></li>\n+</ul>\n+<p>Thanks for using our product; we hope you like it!</p>\n+<p>\xe2\x80\x94The Plone Team</p>\n+        """.format(uid=self.UID)\n+        import time\n+        startTime = time.time()\n+        res = self.parser(text)\n+        executionTime = (time.time() - startTime)\n+        print(executionTime)\n+        self.assertTrue(res)\n+\n     def test_parsing_preserves_newlines(self):\n         # Test if it preserves newlines which should not be filtered out\n         text = """<pre>This is line 1\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-04-20T11:49:18+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/b190b71a2a06138625d36ffffc8fb006faad63a9

Fix resolve_uid_and_caption tests

Files changed:
M plone/outputfilters/tests/test_resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex cc9a971..cb011bd 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -78,6 +78,8 @@ def _assertTransformsTo(self, input, expected):\n         out = self.parser(input)\n         normalized_out = normalize_html(out)\n         normalized_expected = normalize_html(expected)\n+        # print("e: {}".format(normalized_expected))\n+        # print("o: {}".format(normalized_out))\n         try:\n             self.assertTrue(_ellipsis_match(normalized_expected,\n                                             normalized_out))\n@@ -177,7 +179,7 @@ def test_parsing_long_doc(self):\n         startTime = time.time()\n         res = self.parser(text)\n         executionTime = (time.time() - startTime)\n-        print(executionTime)\n+        print("\\n\\nresolve_uid_and_caption parsing time: {}\\n".format(executionTime))\n         self.assertTrue(res)\n \n     def test_parsing_preserves_newlines(self):\n@@ -429,7 +431,7 @@ def test_image_captioning_resolveuid_no_scale(self):\n     def test_image_captioning_resolveuid_with_srcset_and_src(self):\n         text_in = """<img class="captioned" src="resolveuid/%s/@@images/image" srcset="resolveuid/%s/@@images/image 480w,resolveuid/%s/@@images/image 360w"/>""" % (self.UID, self.UID, self.UID)\n         text_out = """<figure class="captioned">\n-<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" srcset="http://nohost/plone/image.jpg/@@images/image 480w,http://nohost/plone/image.jpg/@@images/image 360w" title="Image" width="500"/>\n+<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" srcset="http://nohost/plone/image.jpg/@@images/...jpeg 480w,http://nohost/plone/image.jpg/@@images/...jpeg 360w" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-04-20T11:49:49+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/e7005162bfefc164fbb67ac3bdfe58437053779c

prevent image_srcset from breaking when srcset config is missing, add tests

Files changed:
A plone/outputfilters/tests/test_image_srcset.py
M plone/outputfilters/filters/image_srcset.py

b'diff --git a/plone/outputfilters/filters/image_srcset.py b/plone/outputfilters/filters/image_srcset.py\nindex 059cfd4..ba289c9 100644\n--- a/plone/outputfilters/filters/image_srcset.py\n+++ b/plone/outputfilters/filters/image_srcset.py\n@@ -1,3 +1,4 @@\n+import logging\n import re\n \n from bs4 import BeautifulSoup\n@@ -8,6 +9,8 @@\n from zope.component import getUtility\n from zope.interface import implementer\n \n+logger = logging.getLogger("plone.outputfilter.image_srcset")\n+\n \n @implementer(IFilter)\n class ImageSrcsetFilter(object):\n@@ -47,10 +50,15 @@ def __init__(self, context=None, request=None):\n         self.context = context\n         self.request = request\n \n+    @property\n+    def image_srcsets(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n+        return settings.image_srcsets\n+\n     def __call__(self, data):\n         data = re.sub(r"<([^<>\\s]+?)\\s*/>", self._shorttag_replace, data)\n         soup = BeautifulSoup(safe_nativestring(data), "html.parser")\n-        self.image_srcsets = self.image_srcsets()\n \n         for elem in soup.find_all("img"):\n             srcset_name = elem.attrs.get("data-srcset", "")\n@@ -59,31 +67,36 @@ def __call__(self, data):\n             elem.replace_with(self.convert_to_srcset(srcset_name, elem, soup))\n         return str(soup)\n \n-    def image_srcsets(self):\n-        registry = getUtility(IRegistry)\n-        settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n-        return settings.image_srcsets\n-\n     def convert_to_srcset(self, srcset_name, elem, soup):\n-        """Converts the element to a srcset definition\n-        """\n+        """Converts the element to a srcset definition"""\n         srcset_config = self.image_srcsets.get(srcset_name)\n-        sourceset = srcset_config.get(\'sourceset\')\n+        if not srcset_config:\n+            logger.warn(\n+                "Could not find the given srcset_name {0}, leave tag untouched!".format(\n+                    srcset_name\n+                )\n+            )\n+            return elem\n+        sourceset = srcset_config.get("sourceset")\n         if not sourceset:\n             return elem\n         src = elem.attrs.get("src")\n         picture_tag = soup.new_tag("picture")\n         for i, source in enumerate(sourceset):\n-            scale = source[\'scale\']\n-            media = source.get(\'media\')\n-            title = elem.attrs.get(\'title\')\n-            alt = elem.attrs.get(\'alt\')\n-            klass = elem.attrs.get(\'class\')\n+            scale = source["scale"]\n+            media = source.get("media")\n+            title = elem.attrs.get("title")\n+            alt = elem.attrs.get("alt")\n+            klass = elem.attrs.get("class")\n             if i == len(sourceset) - 1:\n-                source_tag = soup.new_tag("img", src=self.update_src_scale(src=src, scale=scale))\n+                source_tag = soup.new_tag(\n+                    "img", src=self.update_src_scale(src=src, scale=scale)\n+                )\n             else:\n                 # TODO guess type:\n-                source_tag = soup.new_tag("source", srcset=self.update_src_scale(src=src, scale=scale))\n+                source_tag = soup.new_tag(\n+                    "source", srcset=self.update_src_scale(src=src, scale=scale)\n+                )\n             source_tag["loading"] = "lazy"\n             if media:\n                 source_tag["media"] = media\n@@ -98,4 +111,4 @@ def convert_to_srcset(self, srcset_name, elem, soup):\n \n     def update_src_scale(self, src, scale):\n         parts = src.split("/")\n-        return "/".join(parts[:-1]) + "/{}".format(scale)\n\\ No newline at end of file\n+        return "/".join(parts[:-1]) + "/{}".format(scale)\ndiff --git a/plone/outputfilters/tests/test_image_srcset.py b/plone/outputfilters/tests/test_image_srcset.py\nnew file mode 100644\nindex 0000000..0d56a7a\n--- /dev/null\n+++ b/plone/outputfilters/tests/test_image_srcset.py\n@@ -0,0 +1,198 @@\n+# -*- coding: utf-8 -*-\n+from doctest import _ellipsis_match\n+from doctest import OutputChecker\n+from doctest import REPORT_NDIFF\n+from os.path import abspath\n+from os.path import dirname\n+from os.path import join\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing.bbb import PloneTestCase\n+from plone.namedfile.file import NamedBlobImage\n+from plone.namedfile.file import NamedImage\n+from plone.namedfile.tests.test_scaling import DummyContent as NFDummyContent\n+from plone.outputfilters.filters.image_srcset import ImageSrcsetFilter\n+from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n+from Products.PortalTransforms.tests.utils import normalize_html\n+\n+\n+PREFIX = abspath(dirname(__file__))\n+\n+\n+def dummy_image():\n+    filename = join(PREFIX, u\'image.jpg\')\n+    data = None\n+    with open(filename, \'rb\') as fd:\n+        data = fd.read()\n+        fd.close()\n+    return NamedBlobImage(data=data, filename=filename)\n+\n+\n+class ImageSrcsetFilterIntegrationTestCase(PloneTestCase):\n+\n+    layer = PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n+\n+    image_id = \'image.jpg\'\n+\n+    def _makeParser(self, **kw):\n+        parser = ImageSrcsetFilter(context=self.portal)\n+        for k, v in kw.items():\n+            setattr(parser, k, v)\n+        return parser\n+\n+    def _makeDummyContent(self):\n+        from OFS.SimpleItem import SimpleItem\n+\n+        class DummyContent(SimpleItem):\n+\n+            def __init__(self, id):\n+                self.id = id\n+\n+            def UID(self):\n+                return \'foo\'\n+\n+            allowedRolesAndUsers = (\'Anonymous\',)\n+\n+        class DummyContent2(NFDummyContent):\n+            id = __name__ = \'foo2\'\n+            title = u\'Sch\xc3\xb6nes Bild\'\n+\n+            def UID(self):\n+                return \'foo2\'\n+\n+        dummy = DummyContent(\'foo\')\n+        self.portal._setObject(\'foo\', dummy)\n+        self.portal.portal_catalog.catalog_object(self.portal.foo)\n+\n+        dummy2 = DummyContent2(\'foo2\')\n+        with open(join(PREFIX, self.image_id), \'rb\') as fd:\n+            data = fd.read()\n+            fd.close()\n+        dummy2.image = NamedImage(data, \'image/jpeg\', u\'image.jpeg\')\n+        self.portal._setObject(\'foo2\', dummy2)\n+        self.portal.portal_catalog.catalog_object(self.portal.foo2)\n+\n+    def _assertTransformsTo(self, input, expected):\n+        # compare two chunks of HTML ignoring whitespace differences,\n+        # and with a useful diff on failure\n+        out = self.parser(input)\n+        normalized_out = normalize_html(out)\n+        normalized_expected = normalize_html(expected)\n+        # print("e: {}".format(normalized_expected))\n+        # print("o: {}".format(normalized_out))\n+        try:\n+            self.assertTrue(_ellipsis_match(normalized_expected,\n+                                            normalized_out))\n+        except AssertionError:\n+            class wrapper(object):\n+                want = expected\n+            raise AssertionError(self.outputchecker.output_difference(\n+                wrapper, out, REPORT_NDIFF))\n+\n+    def afterSetUp(self):\n+        # create an image and record its UID\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+\n+        if self.image_id not in self.portal:\n+            self.portal.invokeFactory(\n+                \'Image\', id=self.image_id, title=\'Image\')\n+        image = self.portal[self.image_id]\n+        image.setDescription(\'My caption\')\n+        image.image = dummy_image()\n+        image.reindexObject()\n+        self.UID = image.UID()\n+        self.parser = self._makeParser(captioned_images=True,\n+                                       resolve_uids=True)\n+        assert self.parser.is_enabled()\n+\n+        self.outputchecker = OutputChecker()\n+\n+    def beforeTearDown(self):\n+        self.login()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        del self.portal[self.image_id]\n+\n+    def test_parsing_minimal(self):\n+        text = \'<div>Some simple text.</div>\'\n+        res = self.parser(text)\n+        self.assertEqual(text, str(res))\n+\n+    def test_parsing_long_doc(self):\n+        text = """<h1>Welcome!</h1>\n+<p class="discreet">If you\'re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone support channels about this.</p>\n+<p class="discreet"><img class="image-richtext image-inline image-size-small" src="resolveuid/{uid}/@@images/image/preview" alt="" data-linktype="image" data-srcset="small" data-scale="preview" data-val="{uid}" /></p>\n+<h2>Get started</h2>\n+<p>Before you start exploring your newly created Plone site, please do the following:</p>\n+<ol>\n+<li>Make sure you are logged in as an admin/manager user. <span class="discreet">(You should have a Site Setup entry in the user menu)</span></li>\n+</ol>\n+<h2>Get comfortable</h2>\n+<p>After that, we suggest you do one or more of the following:</p>\n+<p><img class="image-richtext image-left image-size-medium captioned zoomable" src="resolveuid/{uid}/@@images/image/larger" alt="" data-linktype="image" data-srcset="medium" data-scale="larger" data-val="{uid}" /></p>\n+<h2>Make it your own</h2>\n+<p>Plone has a lot of different settings that can be used to make it do what you want it to. Some examples:</p>\n+<h2>Tell us how you use it</h2>\n+<p>Are you doing something interesting with Plone? Big site deployments, interesting use cases? Do you have a company that delivers Plone-based solutions?</p>\n+<h2>Find out more about Plone</h2>\n+<p class="discreet"><img class="image-richtext image-right image-size-large" src="resolveuid/{uid}/@@images/image/huge" alt="" data-linktype="image" data-srcset="large" data-scale="huge" data-val="{uid}" /></p>\n+<p>Plone is a powerful content management system built on a rock-solid application stack written using the Python programming language. More about these technologies:</p>\n+<h2><img class="image-richtext image-inline image-size-large" src="resolveuid/{uid}/@@images/image/huge" alt="" data-linktype="image" data-srcset="large" data-scale="huge" data-val="{uid}" /></h2>\n+<h2>Support the Plone Foundation</h2>\n+<p>Plone is made possible only through the efforts of thousands of dedicated individuals and hundreds of companies. The Plone Foundation:</p>\n+<ul>\n+<li>\xe2\x80\xa6protects and promotes Plone.</li>\n+<li>\xe2\x80\xa6is a registered 501(c)(3) charitable organization.</li>\n+<li>\xe2\x80\xa6donations are tax-deductible.</li>\n+</ul>\n+<p>Thanks for using our product; we hope you like it!</p>\n+<p>\xe2\x80\x94The Plone Team</p>\n+        """.format(uid=self.UID)\n+        import time\n+        startTime = time.time()\n+        res = self.parser(text)\n+        executionTime = (time.time() - startTime)\n+        print("\\n\\nimage srcset parsing time: {}\\n".format(executionTime))\n+        self.assertTrue(res)\n+\n+        text_out = """<h1>Welcome!</h1>\n+<p class="discreet">If you\'re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone support channels about this.</p>\n+<p class="discreet"><picture><img class="image-richtext image-inline image-size-small" loading="lazy" src="resolveuid/{uid}/@@images/image/preview"/></picture></p>\n+<h2>Get started</h2>\n+<p>Before you start exploring your newly created Plone site, please do the following:</p>\n+<ol>\n+<li>Make sure you are logged in as an admin/manager user. <span class="discreet">(You should have a Site Setup entry in the user menu)</span></li>\n+</ol>\n+<h2>Get comfortable</h2>\n+<p>After that, we suggest you do one or more of the following:</p>\n+<p><picture><source class="image-richtext image-left image-size-medium captioned zoomable" loading="lazy" media="(max-width:768px)" srcset="resolveuid/{uid}/@@images/image/large"/><img class="image-richtext image-left image-size-medium captioned zoomable" loading="lazy" src="resolveuid/{uid}/@@images/image/larger"/></picture></p>\n+<h2>Make it your own</h2>\n+<p>Plone has a lot of different settings that can be used to make it do what you want it to. Some examples:</p>\n+<h2>Tell us how you use it</h2>\n+<p>Are you doing something interesting with Plone? Big site deployments, interesting use cases? Do you have a company that delivers Plone-based solutions?</p>\n+<h2>Find out more about Plone</h2>\n+<p class="discreet"><picture><source class="image-richtext image-right image-size-large" loading="lazy" media="(max-width:768px) and (orientation:portrait)" srcset="resolveuid/{uid}/@@images/image/teaser"/><source class="image-richtext image-right image-size-large" loading="lazy" media="(max-width:768px)" srcset="resolveuid/{uid}/@@images/image/large"/><source class="image-richtext image-right image-size-large" loading="lazy" media="(min-width:992px)" srcset="resolveuid/{uid}/@@images/image/larger"/><source class="image-richtext image-right image-size-large" loading="lazy" media="(min-width:1200px)" srcset="resolveuid/{uid}/@@images/image/great"/><source class="image-richtext image-right image-size-large" loading="lazy" media="(min-width:1400px)" srcset="resolveuid/{uid}/@@images/image/huge"/><img class="image-richtext image-right image-size-large" loading="lazy" src="resolveuid/{uid}/@@images/image/huge"/></picture></p>\n+<p>Plone is a powerful content management system built on a rock-solid application stack written using the Python programming language. More about these technologies:</p>\n+<h2><picture><source class="image-richtext image-inline image-size-large" loading="lazy" media="(max-width:768px) and (orientation:portrait)" srcset="resolveuid/{uid}/@@images/image/teaser"/><source class="image-richtext image-inline image-size-large" loading="lazy" media="(max-width:768px)" srcset="resolveuid/{uid}/@@images/image/large"/><source class="image-richtext image-inline image-size-large" loading="lazy" media="(min-width:992px)" srcset="resolveuid/{uid}/@@images/image/larger"/><source class="image-richtext image-inline image-size-large" loading="lazy" media="(min-width:1200px)" srcset="resolveuid/{uid}/@@images/image/great"/><source class="image-richtext image-inline image-size-large" loading="lazy" media="(min-width:1400px)" srcset="resolveuid/{uid}/@@images/image/huge"/><img class="image-richtext image-inline image-size-large" loading="lazy" src="resolveuid/{uid}/@@images/image/huge"/></picture></h2>\n+<h2>Support the Plone Foundation</h2>\n+<p>Plone is made possible only through the efforts of thousands of dedicated individuals and hundreds of companies. The Plone Foundation:</p>\n+<ul>\n+<li>\xe2\x80\xa6protects and promotes Plone.</li>\n+<li>\xe2\x80\xa6is a registered 501(c)(3) charitable organization.</li>\n+<li>\xe2\x80\xa6donations are tax-deductible.</li>\n+</ul>\n+<p>Thanks for using our product; we hope you like it!</p>\n+<p>\xe2\x80\x94The Plone Team</p>\n+        """.format(uid=self.UID)\n+        self._assertTransformsTo(text, text_out)\n+\n+    def test_parsing_with_nonexisting_srcset(self):\n+        text = """\n+<p><img class="image-richtext image-inline image-size-thumb" src="resolveuid/{uid}/@@images/image/thumb" alt="" data-linktype="image" data-srcset="thumb" data-scale="thumb" data-val="{uid}" /></p>\n+        """.format(uid=self.UID)\n+        res = self.parser(text)\n+        self.assertTrue(res)\n+        text_out = """\n+<p><img class="image-richtext image-inline image-size-thumb" src="resolveuid/{uid}/@@images/image/thumb" alt="" data-linktype="image" data-srcset="thumb" data-scale="thumb" data-val="{uid}" /></p>\n+        """.format(uid=self.UID)\n+        # verify that tag was not converted:\n+        self.assertTrue("data-srcset" in res)\n\\ No newline at end of file\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-04-22T14:41:32+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/0812821f85bfd110a9040aa26b038c7fdf20a822

copy all attributes except src/srcset from images in srcset filter

Files changed:
M plone/outputfilters/filters/image_srcset.py

b'diff --git a/plone/outputfilters/filters/image_srcset.py b/plone/outputfilters/filters/image_srcset.py\nindex ba289c9..d60a61b 100644\n--- a/plone/outputfilters/filters/image_srcset.py\n+++ b/plone/outputfilters/filters/image_srcset.py\n@@ -85,9 +85,6 @@ def convert_to_srcset(self, srcset_name, elem, soup):\n         for i, source in enumerate(sourceset):\n             scale = source["scale"]\n             media = source.get("media")\n-            title = elem.attrs.get("title")\n-            alt = elem.attrs.get("alt")\n-            klass = elem.attrs.get("class")\n             if i == len(sourceset) - 1:\n                 source_tag = soup.new_tag(\n                     "img", src=self.update_src_scale(src=src, scale=scale)\n@@ -97,15 +94,13 @@ def convert_to_srcset(self, srcset_name, elem, soup):\n                 source_tag = soup.new_tag(\n                     "source", srcset=self.update_src_scale(src=src, scale=scale)\n                 )\n+            for k, attr in elem.attrs.items():\n+                if k in ["src", "srcset"]:\n+                    continue\n+                source_tag.attrs[k] = attr\n             source_tag["loading"] = "lazy"\n             if media:\n                 source_tag["media"] = media\n-            if title:\n-                source_tag["title"] = title\n-            if alt:\n-                source_tag["alt"] = alt\n-            if klass:\n-                source_tag["class"] = klass\n             picture_tag.append(source_tag)\n         return picture_tag\n \n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-04-22T14:44:04+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/a5c1abc5198b580a0b2f322fb49f28f1b19f842e

set width/height on img and inside srcset

Files changed:
M plone/outputfilters/filters/resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 4773bb1..a00085d 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -171,7 +171,9 @@ def __call__(self, data):\n             srcs = [src.strip().split() for src in srcset.strip().split(\',\') if src.strip()]\n             for idx, elm in enumerate(srcs):\n                 image, fullimage, src, description = self.resolve_image(elm[0])\n-                srcs[idx][0] = src\n+                # attributes["width"] = image.width\n+                # attributes["height"] = image.height\n+                srcs[idx][0] = "{0} {1}w".format(src, image.width)\n             attributes[\'srcset\'] = \',\'.join(\' \'.join(src) for src in srcs)\n         for elem in soup.find_all([\'source\', \'iframe\', \'audio\', \'video\']):\n             # parent of SOURCE is video or audio here.\n@@ -188,6 +190,9 @@ def __call__(self, data):\n             src = attributes.get(\'src\', \'\')\n             image, fullimage, src, description = self.resolve_image(src)\n             attributes["src"] = src\n+            attributes["width"] = image.width\n+            attributes["height"] = image.height\n+\n \n             if fullimage is not None:\n                 # Check to see if the alt / title tags need setting\n@@ -198,7 +203,11 @@ def __call__(self, data):\n                 if \'title\' not in attributes:\n                     attributes[\'title\'] = title\n \n+            # captioning\n             caption = description\n+            caption_manual_override = attributes.get("data-captiontext", "")\n+            if caption_manual_override:\n+                caption = caption_manual_override\n             # Check if the image needs to be captioned\n             if (\n                 self.captioned_images and\n@@ -245,7 +254,6 @@ def resolve_image(self, src):\n         if urlsplit(src)[0]:\n             # We have a scheme\n             return None, None, src, description\n-\n         base = self.context\n         subpath = src\n         appendix = \'\'\n@@ -328,7 +336,7 @@ def handle_captioned_image(self, attributes, image, fullimage,\n                                elem, caption):\n         """Handle captioned image.\n \n-        The img element is replaced by figure\n+        The img/picture element is replaced by figure\n         as created by the template ../browser/captioned_image.pt\n         """\n         klass = \' \'.join(attributes[\'class\'])\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-05-05T13:57:19+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/8bec6fd6f2070b70a3d2713fef8eec0679aa911e

refactor image srcset filter

Files changed:
M plone/outputfilters/filters/image_srcset.py
M plone/outputfilters/filters/resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/filters/image_srcset.py b/plone/outputfilters/filters/image_srcset.py\nindex d60a61b..f014faa 100644\n--- a/plone/outputfilters/filters/image_srcset.py\n+++ b/plone/outputfilters/filters/image_srcset.py\n@@ -50,6 +50,12 @@ def __init__(self, context=None, request=None):\n         self.context = context\n         self.request = request\n \n+    @property\n+    def image_scales(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n+        return settings.allowed_sizes\n+\n     @property\n     def image_srcsets(self):\n         registry = getUtility(IRegistry)\n@@ -77,6 +83,10 @@ def convert_to_srcset(self, srcset_name, elem, soup):\n                 )\n             )\n             return elem\n+        images_scales = self.image_scales\n+        excluded_scales = srcset_config.get("excludedScales")\n+        if excluded_scales:\n+            images_scales = [scale for scale in self.image_scales if not scale in excluded_scales]\n         sourceset = srcset_config.get("sourceset")\n         if not sourceset:\n             return elem\n@@ -85,9 +95,13 @@ def convert_to_srcset(self, srcset_name, elem, soup):\n         for i, source in enumerate(sourceset):\n             scale = source["scale"]\n             media = source.get("media")\n+            additional_scales = source.get("additionalScales", None)\n+            if additional_scales is None:\n+                additional_scales = [s for s in images_scales if s != scale]\n             if i == len(sourceset) - 1:\n                 source_tag = soup.new_tag(\n-                    "img", src=self.update_src_scale(src=src, scale=scale)\n+                    "img", src=self.update_src_scale(src=src, scale=scale),\n+\n                 )\n             else:\n                 # TODO guess type:\ndiff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex a00085d..dd9b933 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -171,9 +171,7 @@ def __call__(self, data):\n             srcs = [src.strip().split() for src in srcset.strip().split(\',\') if src.strip()]\n             for idx, elm in enumerate(srcs):\n                 image, fullimage, src, description = self.resolve_image(elm[0])\n-                # attributes["width"] = image.width\n-                # attributes["height"] = image.height\n-                srcs[idx][0] = "{0} {1}w".format(src, image.width)\n+                srcs[idx][0] = src\n             attributes[\'srcset\'] = \',\'.join(\' \'.join(src) for src in srcs)\n         for elem in soup.find_all([\'source\', \'iframe\', \'audio\', \'video\']):\n             # parent of SOURCE is video or audio here.\n@@ -190,8 +188,6 @@ def __call__(self, data):\n             src = attributes.get(\'src\', \'\')\n             image, fullimage, src, description = self.resolve_image(src)\n             attributes["src"] = src\n-            attributes["width"] = image.width\n-            attributes["height"] = image.height\n \n \n             if fullimage is not None:\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-05-08T21:00:42+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/785b0fe4db7bbfc413f7375a2e347a461eda3440

set w parameter in srcset definitions

Files changed:
M plone/outputfilters/filters/image_srcset.py

b'diff --git a/plone/outputfilters/filters/image_srcset.py b/plone/outputfilters/filters/image_srcset.py\nindex f014faa..1819641 100644\n--- a/plone/outputfilters/filters/image_srcset.py\n+++ b/plone/outputfilters/filters/image_srcset.py\n@@ -51,7 +51,7 @@ def __init__(self, context=None, request=None):\n         self.request = request\n \n     @property\n-    def image_scales(self):\n+    def allowed_scales(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n         return settings.allowed_sizes\n@@ -62,6 +62,24 @@ def image_srcsets(self):\n         settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n         return settings.image_srcsets\n \n+    def get_scale_name(self, scale_line):\n+        parts = scale_line.split(" ")\n+        return parts and parts[0] or ""\n+\n+    def get_scale_width(self, scale):\n+        """ get width from allowed_scales line\n+            large 800:65536\n+        """\n+        for s in self.allowed_scales:\n+            parts = s.split(" ")\n+            if not parts:\n+                continue\n+            if parts[0] == scale:\n+                dimentions = parts[1].split(":")\n+                if not dimentions:\n+                    continue\n+                return dimentions[0]\n+\n     def __call__(self, data):\n         data = re.sub(r"<([^<>\\s]+?)\\s*/>", self._shorttag_replace, data)\n         soup = BeautifulSoup(safe_nativestring(data), "html.parser")\n@@ -83,39 +101,43 @@ def convert_to_srcset(self, srcset_name, elem, soup):\n                 )\n             )\n             return elem\n-        images_scales = self.image_scales\n-        excluded_scales = srcset_config.get("excludedScales")\n-        if excluded_scales:\n-            images_scales = [scale for scale in self.image_scales if not scale in excluded_scales]\n+        allowed_scales = self.allowed_scales\n         sourceset = srcset_config.get("sourceset")\n         if not sourceset:\n             return elem\n         src = elem.attrs.get("src")\n         picture_tag = soup.new_tag("picture")\n         for i, source in enumerate(sourceset):\n-            scale = source["scale"]\n+            target_scale = source["scale"]\n             media = source.get("media")\n+\n             additional_scales = source.get("additionalScales", None)\n             if additional_scales is None:\n-                additional_scales = [s for s in images_scales if s != scale]\n-            if i == len(sourceset) - 1:\n-                source_tag = soup.new_tag(\n-                    "img", src=self.update_src_scale(src=src, scale=scale),\n-\n-                )\n-            else:\n-                # TODO guess type:\n-                source_tag = soup.new_tag(\n-                    "source", srcset=self.update_src_scale(src=src, scale=scale)\n-                )\n-            for k, attr in elem.attrs.items():\n-                if k in ["src", "srcset"]:\n-                    continue\n-                source_tag.attrs[k] = attr\n-            source_tag["loading"] = "lazy"\n+                additional_scales = [self.get_scale_name(s) for s in allowed_scales if s != target_scale]\n+            source_scales = [target_scale] + additional_scales\n+            source_srcset = []\n+            for scale in source_scales:\n+                scale_url = self.update_src_scale(src=src, scale=scale)\n+                scale_width = self.get_scale_width(scale)\n+                source_srcset.append("{0} {1}w".format(scale_url, scale_width))\n+            source_tag = soup.new_tag(\n+                "source", srcset=",\\n".join(source_srcset)\n+            )\n             if media:\n                 source_tag["media"] = media\n             picture_tag.append(source_tag)\n+            if i == len(sourceset) - 1:\n+                scale_width = self.get_scale_width(target_scale)\n+                img_tag = soup.new_tag(\n+                    "img", src=self.update_src_scale(src=src, scale=target_scale),\n+                )\n+                for k, attr in elem.attrs.items():\n+                    if k in ["src", "srcset"]:\n+                        continue\n+                    img_tag.attrs[k] = attr\n+                img_tag["width"] = scale_width\n+                img_tag["loading"] = "lazy"\n+                picture_tag.append(img_tag)\n         return picture_tag\n \n     def update_src_scale(self, src, scale):\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-05-08T21:15:25+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/4e1b6cd7e40c94121ced22339b66c0c0f7ed1ed9

Add img width/height in resolveuid_and_caption filter if not present

Files changed:
M plone/outputfilters/filters/image_srcset.py
M plone/outputfilters/filters/resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/filters/image_srcset.py b/plone/outputfilters/filters/image_srcset.py\nindex 1819641..720334d 100644\n--- a/plone/outputfilters/filters/image_srcset.py\n+++ b/plone/outputfilters/filters/image_srcset.py\n@@ -127,7 +127,6 @@ def convert_to_srcset(self, srcset_name, elem, soup):\n                 source_tag["media"] = media\n             picture_tag.append(source_tag)\n             if i == len(sourceset) - 1:\n-                scale_width = self.get_scale_width(target_scale)\n                 img_tag = soup.new_tag(\n                     "img", src=self.update_src_scale(src=src, scale=target_scale),\n                 )\n@@ -135,7 +134,6 @@ def convert_to_srcset(self, srcset_name, elem, soup):\n                     if k in ["src", "srcset"]:\n                         continue\n                     img_tag.attrs[k] = attr\n-                img_tag["width"] = scale_width\n                 img_tag["loading"] = "lazy"\n                 picture_tag.append(img_tag)\n         return picture_tag\ndiff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex dd9b933..d0a0351 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -188,6 +188,10 @@ def __call__(self, data):\n             src = attributes.get(\'src\', \'\')\n             image, fullimage, src, description = self.resolve_image(src)\n             attributes["src"] = src\n+            if not attributes.get("width"):\n+                attributes["width"] = image.width\n+            if not attributes.get("height"):\n+                attributes["height"] = image.height\n \n \n             if fullimage is not None:\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-05-16T18:02:58+02:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/0ba15c76388499cbe89c5e79321df632ed6cc5d0

use new url method in @@images view to postpone image scale creating until browser reuqests it

Files changed:
M plone/outputfilters/filters/resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex d0a0351..2e0d80c 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -170,7 +170,8 @@ def __call__(self, data):\n             # [(src1, 480w), (src2, 360w)]\n             srcs = [src.strip().split() for src in srcset.strip().split(\',\') if src.strip()]\n             for idx, elm in enumerate(srcs):\n-                image, fullimage, src, description = self.resolve_image(elm[0])\n+                image_url = elm[0]\n+                src = self.resolve_scale_data(image_url)\n                 srcs[idx][0] = src\n             attributes[\'srcset\'] = \',\'.join(\' \'.join(src) for src in srcs)\n         for elem in soup.find_all([\'source\', \'iframe\', \'audio\', \'video\']):\n@@ -188,12 +189,11 @@ def __call__(self, data):\n             src = attributes.get(\'src\', \'\')\n             image, fullimage, src, description = self.resolve_image(src)\n             attributes["src"] = src\n-            if not attributes.get("width"):\n-                attributes["width"] = image.width\n-            if not attributes.get("height"):\n-                attributes["height"] = image.height\n-\n-\n+            # we could get the width/height (aspect ratio) without the scale\n+            # from the image field: width, height = fullimage.get("image").getImageSize()\n+            # XXX: refacture resolve_image to not create scales\n+            attributes["width"] = image.width\n+            attributes["height"] = image.height\n             if fullimage is not None:\n                 # Check to see if the alt / title tags need setting\n                 title = safe_unicode(aq_acquire(fullimage, \'Title\')())\n@@ -229,6 +229,16 @@ def lookup_uid(self, uid):\n                 uid = uids[0]\n         return uuidToObject(uid)\n \n+    def resolve_scale_data(self, url):\n+        """ return scale url, width and height\n+        """\n+        url_parts = url.split("/")\n+        field_name = url_parts[-2]\n+        scale_name = url_parts[-1]\n+        obj, subpath, appendix = self.resolve_link(url)\n+        scale_view = obj.unrestrictedTraverse(\'@@images\', None)\n+        return scale_view.url(field=field_name, scale=scale_name)\n+\n     def resolve_link(self, href):\n         obj = None\n         subpath = href\n@@ -270,9 +280,9 @@ def traversal_stack(base, path):\n                 try:\n                     if hasattr(aq_base(obj), \'scale\'):\n                         if components:\n-                            child = obj.scale(child_id, components.pop())\n+                            child = obj.url(child_id, components.pop())\n                         else:\n-                            child = obj.scale(child_id)\n+                            child = obj.url(child_id)\n                     else:\n                         # Do not use restrictedTraverse here; the path to the\n                         # image may lead over containers that lack the View\n@@ -323,7 +333,6 @@ def traverse_path(base, path):\n \n         if image is None:\n             return None, None, src, description\n-\n         try:\n             url = image.absolute_url()\n         except AttributeError:\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-05-16T22:15:05+02:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/7528e725db1d662894ea86f41fda2fe0f54cd4c4

use new pre scale parameter

Files changed:
M plone/outputfilters/filters/resolveuid_and_caption.py

b"diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 2e0d80c..861de3e 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -171,7 +171,7 @@ def __call__(self, data):\n             srcs = [src.strip().split() for src in srcset.strip().split(',') if src.strip()]\n             for idx, elm in enumerate(srcs):\n                 image_url = elm[0]\n-                src = self.resolve_scale_data(image_url)\n+                image, fullimage, src, description = self.resolve_image(image_url)\n                 srcs[idx][0] = src\n             attributes['srcset'] = ','.join(' '.join(src) for src in srcs)\n         for elem in soup.find_all(['source', 'iframe', 'audio', 'video']):\n@@ -237,7 +237,7 @@ def resolve_scale_data(self, url):\n         scale_name = url_parts[-1]\n         obj, subpath, appendix = self.resolve_link(url)\n         scale_view = obj.unrestrictedTraverse('@@images', None)\n-        return scale_view.url(field=field_name, scale=scale_name)\n+        return scale_view.scale(field_name, scale_name, pre=True)\n \n     def resolve_link(self, href):\n         obj = None\n@@ -280,9 +280,9 @@ def traversal_stack(base, path):\n                 try:\n                     if hasattr(aq_base(obj), 'scale'):\n                         if components:\n-                            child = obj.url(child_id, components.pop())\n+                            child = obj.scale(child_id, components.pop(), pre=True)\n                         else:\n-                            child = obj.url(child_id)\n+                            child = obj.scale(child_id, pre=True)\n                     else:\n                         # Do not use restrictedTraverse here; the path to the\n                         # image may lead over containers that lack the View\n"

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-05-18T17:43:15+02:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/8dbc3366397cbef1ecd92cd4cb60de971903f7cd

Fix captioning of picture tags

Files changed:
M plone/outputfilters/browser/captioned_image.pt
M plone/outputfilters/filters/configure.zcml
M plone/outputfilters/filters/image_srcset.py
M plone/outputfilters/filters/resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/browser/captioned_image.pt b/plone/outputfilters/browser/captioned_image.pt\nindex 8f4a9a8..637ba2a 100644\n--- a/plone/outputfilters/browser/captioned_image.pt\n+++ b/plone/outputfilters/browser/captioned_image.pt\n@@ -1,6 +1,4 @@\n <figure tal:attributes="class options/class;">\n-  <a tal:omit-tag="options/isfullsize" rel="lightbox"\n-      tal:attributes="href options/url_path;"\n-      tal:content="structure options/tag">[image goes here]</a>\n+  <picture tal:replace="structure options/tag"></picture>\n   <figcaption class="image-caption" tal:content="options/caption|nothing"></figcaption>\n </figure>\ndiff --git a/plone/outputfilters/filters/configure.zcml b/plone/outputfilters/filters/configure.zcml\nindex 0899ce7..c351214 100644\n--- a/plone/outputfilters/filters/configure.zcml\n+++ b/plone/outputfilters/filters/configure.zcml\n@@ -5,16 +5,16 @@\n \n   <adapter\n     provides="..interfaces.IFilter"\n-    name="resolveuid_and_caption"\n+    name="image_srcset"\n     for="* *"\n-    factory=".resolveuid_and_caption.ResolveUIDAndCaptionFilter"\n+    factory=".image_srcset.ImageSrcsetFilter"\n     />\n \n   <adapter\n     provides="..interfaces.IFilter"\n-    name="image_srcset"\n+    name="resolveuid_and_caption"\n     for="* *"\n-    factory=".image_srcset.ImageSrcsetFilter"\n+    factory=".resolveuid_and_caption.ResolveUIDAndCaptionFilter"\n     />\n \n   <!-- in Plone 5, we always resolve uids -->\ndiff --git a/plone/outputfilters/filters/image_srcset.py b/plone/outputfilters/filters/image_srcset.py\nindex 720334d..62d4348 100644\n--- a/plone/outputfilters/filters/image_srcset.py\n+++ b/plone/outputfilters/filters/image_srcset.py\n@@ -107,6 +107,9 @@ def convert_to_srcset(self, srcset_name, elem, soup):\n             return elem\n         src = elem.attrs.get("src")\n         picture_tag = soup.new_tag("picture")\n+        css_classes = elem.attrs.get("class")\n+        if "captioned" in css_classes:\n+            picture_tag["class"] = "captioned"\n         for i, source in enumerate(sourceset):\n             target_scale = source["scale"]\n             media = source.get("media")\ndiff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 861de3e..b0bc572 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -203,20 +203,36 @@ def __call__(self, data):\n                 if \'title\' not in attributes:\n                     attributes[\'title\'] = title\n \n-            # captioning\n+        for picture_elem in soup.find_all(\'picture\'):\n+            if \'captioned\' not in picture_elem.attrs.get(\'class\', []):\n+                continue\n+            elem = picture_elem.find("img")\n+            attributes = elem.attrs\n+            src = attributes.get(\'src\', \'\')\n+            image, fullimage, src, description = self.resolve_image(src)\n+            attributes["src"] = src\n             caption = description\n             caption_manual_override = attributes.get("data-captiontext", "")\n             if caption_manual_override:\n                 caption = caption_manual_override\n             # Check if the image needs to be captioned\n-            if (\n-                self.captioned_images and\n-                image is not None and\n-                caption and\n-                \'captioned\' in attributes.get(\'class\', [])\n-            ):\n-                self.handle_captioned_image(\n-                    attributes, image, fullimage, elem, caption)\n+            if (self.captioned_images and caption):\n+                options = {}\n+                options["tag"] = picture_elem.prettify()\n+                options["caption"] = newline_to_br(html_quote(caption))\n+                options["class"] = \' \'.join(attributes[\'class\'])\n+                del attributes[\'class\']\n+                picture_elem.append(elem)\n+                captioned = BeautifulSoup(\n+                    self.captioned_image_template(**options), \'html.parser\')\n+\n+                # if we are a captioned image within a link, remove and occurrences\n+                # of a tags inside caption template to preserve the outer link\n+                if bool(elem.find_parent(\'a\')) and bool(captioned.find(\'a\')):\n+                    captioned.a.unwrap()\n+                del captioned.picture.img["class"]\n+                picture_elem.replace_with(captioned)\n+\n         return six.text_type(soup)\n \n     def lookup_uid(self, uid):\n@@ -340,58 +356,3 @@ def traverse_path(base, path):\n         src = url + appendix\n         description = safe_unicode(aq_acquire(fullimage, \'Description\')())\n         return image, fullimage, src, description\n-\n-    def handle_captioned_image(self, attributes, image, fullimage,\n-                               elem, caption):\n-        """Handle captioned image.\n-\n-        The img/picture element is replaced by figure\n-        as created by the template ../browser/captioned_image.pt\n-        """\n-        klass = \' \'.join(attributes[\'class\'])\n-        del attributes[\'class\']\n-        del attributes[\'src\']\n-        if \'width\' in attributes and attributes[\'width\']:\n-            attributes[\'width\'] = int(attributes[\'width\'])\n-        if \'height\' in attributes and attributes[\'height\']:\n-            attributes[\'height\'] = int(attributes[\'height\'])\n-        view = fullimage.unrestrictedTraverse(\'@@images\', None)\n-        if view is not None:\n-            original_width, original_height = view.getImageSize()\n-        else:\n-            original_width, original_height = fullimage.width, fullimage.height\n-        if image is not fullimage:\n-            # image is a scale object\n-            tag = image.tag\n-            width = image.width\n-        else:\n-            if hasattr(aq_base(image), \'tag\'):\n-                tag = image.tag\n-            else:\n-                tag = view.scale().tag\n-            width = original_width\n-        options = {\n-            \'class\': klass,\n-            \'originalwidth\': attributes.get(\'width\', None),\n-            \'originalalt\': attributes.get(\'alt\', None),\n-            \'url_path\': fullimage.absolute_url_path(),\n-            \'caption\': newline_to_br(html_quote(caption)),\n-            \'image\': image,\n-            \'fullimage\': fullimage,\n-            \'tag\': tag(**attributes),\n-            \'isfullsize\': image is fullimage or (\n-                image.width == original_width and\n-                image.height == original_height),\n-            \'width\': attributes.get(\'width\', width),\n-        }\n-\n-        captioned = BeautifulSoup(\n-            self.captioned_image_template(**options), \'html.parser\')\n-\n-        # if we are a captioned image within a link, remove and occurrences\n-        # of a tags inside caption template to preserve the outer link\n-        if bool(elem.find_parent(\'a\')) and \\\n-           bool(captioned.find(\'a\')):\n-            captioned.a.unwrap()\n-\n-        elem.replace_with(captioned)\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-05-24T20:44:17+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/17157fd14cd4e5e90339afc16c1e183fa658956e

do not use title as alt attribute content

Files changed:
M plone/outputfilters/filters/resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex b0bc572..7a18028 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -199,7 +199,7 @@ def __call__(self, data):\n                 title = safe_unicode(aq_acquire(fullimage, \'Title\')())\n                 if not attributes.get(\'alt\'):\n                     # XXX alt attribute contains *alternate* text\n-                    attributes[\'alt\'] = description or title\n+                    attributes[\'alt\'] = description or ""\n                 if \'title\' not in attributes:\n                     attributes[\'title\'] = title\n \n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-01T21:00:06+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/ce96bc9be3975344fbc84f048e406a66873b1108

refacture image_srcset method to be reusable in plone.namedfile

Files changed:
A plone/outputfilters/utils.py
M plone/outputfilters/filters/image_srcset.py

b'diff --git a/plone/outputfilters/filters/image_srcset.py b/plone/outputfilters/filters/image_srcset.py\nindex 62d4348..c837c07 100644\n--- a/plone/outputfilters/filters/image_srcset.py\n+++ b/plone/outputfilters/filters/image_srcset.py\n@@ -2,32 +2,17 @@\n import re\n \n from bs4 import BeautifulSoup\n-from plone.base.interfaces import IImagingSchema\n from plone.outputfilters.interfaces import IFilter\n-from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.utils import safe_nativestring\n-from zope.component import getUtility\n from zope.interface import implementer\n+from plone.outputfilters.utils import Img2PictureTag\n \n logger = logging.getLogger("plone.outputfilter.image_srcset")\n \n \n @implementer(IFilter)\n class ImageSrcsetFilter(object):\n-    """Converts img/figure tags with a data-srcset attribute into srcset definition.\n-    <picture>\n-        <source media="(max-width:768px) and (orientation:portrait)"\n-                srcset="resolveuid/44d84ffd32924bb8b9dbd720f43e761c/@@images/image/teaser" />\n-        <source media="(max-width:768px)"\n-                srcset="resolveuid/44d84ffd32924bb8b9dbd720f43e761c/@@images/image/large" />\n-        <source media="(min-width:992px)"\n-                srcset="resolveuid/44d84ffd32924bb8b9dbd720f43e761c/@@images/image/larger" />\n-        <source media="(min-width:1200px)"\n-                srcset="resolveuid/44d84ffd32924bb8b9dbd720f43e761c/@@images/image/great" />\n-        <source media="(min-width:1400px)"\n-                srcset="resolveuid/44d84ffd32924bb8b9dbd720f43e761c/@@images/image/huge" />\n-        <img src="resolveuid/44d84ffd32924bb8b9dbd720f43e761c/@@images/image/huge" />\n-    </picture>\n+    """Converts img tags with a data-srcset attribute into picture tag with srcset definition.\n     """\n \n     order = 700\n@@ -49,36 +34,8 @@ def __init__(self, context=None, request=None):\n         self.current_status = None\n         self.context = context\n         self.request = request\n+        self.img2picturetag = Img2PictureTag()\n \n-    @property\n-    def allowed_scales(self):\n-        registry = getUtility(IRegistry)\n-        settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n-        return settings.allowed_sizes\n-\n-    @property\n-    def image_srcsets(self):\n-        registry = getUtility(IRegistry)\n-        settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n-        return settings.image_srcsets\n-\n-    def get_scale_name(self, scale_line):\n-        parts = scale_line.split(" ")\n-        return parts and parts[0] or ""\n-\n-    def get_scale_width(self, scale):\n-        """ get width from allowed_scales line\n-            large 800:65536\n-        """\n-        for s in self.allowed_scales:\n-            parts = s.split(" ")\n-            if not parts:\n-                continue\n-            if parts[0] == scale:\n-                dimentions = parts[1].split(":")\n-                if not dimentions:\n-                    continue\n-                return dimentions[0]\n \n     def __call__(self, data):\n         data = re.sub(r"<([^<>\\s]+?)\\s*/>", self._shorttag_replace, data)\n@@ -88,59 +45,16 @@ def __call__(self, data):\n             srcset_name = elem.attrs.get("data-srcset", "")\n             if not srcset_name:\n                 continue\n-            elem.replace_with(self.convert_to_srcset(srcset_name, elem, soup))\n-        return str(soup)\n-\n-    def convert_to_srcset(self, srcset_name, elem, soup):\n-        """Converts the element to a srcset definition"""\n-        srcset_config = self.image_srcsets.get(srcset_name)\n-        if not srcset_config:\n-            logger.warn(\n-                "Could not find the given srcset_name {0}, leave tag untouched!".format(\n-                    srcset_name\n+            srcset_config = self.img2picturetag.image_srcsets.get(srcset_name)\n+            if not srcset_config:\n+                logger.warn(\n+                    "Could not find the given srcset_name {0}, leave tag untouched!".format(\n+                        srcset_name\n+                    )\n                 )\n-            )\n-            return elem\n-        allowed_scales = self.allowed_scales\n-        sourceset = srcset_config.get("sourceset")\n-        if not sourceset:\n-            return elem\n-        src = elem.attrs.get("src")\n-        picture_tag = soup.new_tag("picture")\n-        css_classes = elem.attrs.get("class")\n-        if "captioned" in css_classes:\n-            picture_tag["class"] = "captioned"\n-        for i, source in enumerate(sourceset):\n-            target_scale = source["scale"]\n-            media = source.get("media")\n-\n-            additional_scales = source.get("additionalScales", None)\n-            if additional_scales is None:\n-                additional_scales = [self.get_scale_name(s) for s in allowed_scales if s != target_scale]\n-            source_scales = [target_scale] + additional_scales\n-            source_srcset = []\n-            for scale in source_scales:\n-                scale_url = self.update_src_scale(src=src, scale=scale)\n-                scale_width = self.get_scale_width(scale)\n-                source_srcset.append("{0} {1}w".format(scale_url, scale_width))\n-            source_tag = soup.new_tag(\n-                "source", srcset=",\\n".join(source_srcset)\n-            )\n-            if media:\n-                source_tag["media"] = media\n-            picture_tag.append(source_tag)\n-            if i == len(sourceset) - 1:\n-                img_tag = soup.new_tag(\n-                    "img", src=self.update_src_scale(src=src, scale=target_scale),\n-                )\n-                for k, attr in elem.attrs.items():\n-                    if k in ["src", "srcset"]:\n-                        continue\n-                    img_tag.attrs[k] = attr\n-                img_tag["loading"] = "lazy"\n-                picture_tag.append(img_tag)\n-        return picture_tag\n-\n-    def update_src_scale(self, src, scale):\n-        parts = src.split("/")\n-        return "/".join(parts[:-1]) + "/{}".format(scale)\n+                continue\n+            sourceset = srcset_config.get("sourceset")\n+            if not sourceset:\n+                continue\n+            elem.replace_with(self.img2picturetag.create_picture_tag(sourceset, elem.attrs))\n+        return str(soup)\ndiff --git a/plone/outputfilters/utils.py b/plone/outputfilters/utils.py\nnew file mode 100644\nindex 0000000..7184721\n--- /dev/null\n+++ b/plone/outputfilters/utils.py\n@@ -0,0 +1,88 @@\n+import logging\n+\n+from plone.base.interfaces import IImagingSchema\n+from plone.registry.interfaces import IRegistry\n+from zope.component import getUtility\n+from bs4 import BeautifulSoup\n+\n+logger = logging.getLogger("plone.outputfilter.image_srcset")\n+\n+\n+class Img2PictureTag(object):\n+    @property\n+    def allowed_scales(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n+        return settings.allowed_sizes\n+\n+    @property\n+    def image_srcsets(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n+        return settings.image_srcsets\n+\n+    def get_scale_name(self, scale_line):\n+        parts = scale_line.split(" ")\n+        return parts and parts[0] or ""\n+\n+    def get_scale_width(self, scale):\n+        """get width from allowed_scales line\n+        large 800:65536\n+        """\n+        for s in self.allowed_scales:\n+            parts = s.split(" ")\n+            if not parts:\n+                continue\n+            if parts[0] == scale:\n+                dimentions = parts[1].split(":")\n+                if not dimentions:\n+                    continue\n+                return dimentions[0]\n+\n+    def create_picture_tag(self, sourceset, attributes):\n+        """Converts the element to a srcset definition"""\n+        soup = BeautifulSoup("", "html.parser")\n+        allowed_scales = self.allowed_scales\n+        src = attributes.get("src")\n+        picture_tag = soup.new_tag("picture")\n+        css_classes = attributes.get("class")\n+        if "captioned" in css_classes:\n+            picture_tag["class"] = "captioned"\n+        for i, source in enumerate(sourceset):\n+            target_scale = source["scale"]\n+            media = source.get("media")\n+\n+            additional_scales = source.get("additionalScales", None)\n+            if additional_scales is None:\n+                additional_scales = [\n+                    self.get_scale_name(s) for s in allowed_scales if s != target_scale\n+                ]\n+            source_scales = [target_scale] + additional_scales\n+            source_srcset = []\n+            for scale in source_scales:\n+                scale_url = self.update_src_scale(src=src, scale=scale)\n+                scale_width = self.get_scale_width(scale)\n+                source_srcset.append("{0} {1}w".format(scale_url, scale_width))\n+            source_tag = soup.new_tag("source", srcset=",\\n".join(source_srcset))\n+            if media:\n+                source_tag["media"] = media\n+            picture_tag.append(source_tag)\n+            if i == len(sourceset) - 1:\n+                img_tag = soup.new_tag(\n+                    "img",\n+                    src=self.update_src_scale(src=src, scale=target_scale),\n+                )\n+                for k, attr in attributes.items():\n+                    if k in ["src", "srcset"]:\n+                        continue\n+                    img_tag.attrs[k] = attr\n+                img_tag["loading"] = "lazy"\n+                picture_tag.append(img_tag)\n+        return picture_tag\n+\n+    def update_src_scale(self, src, scale):\n+        parts = src.split("/")\n+        if "." in src:\n+            field_name = parts[-1].split("-")[0]\n+            return "/".join(parts[:-1]) + "/{0}/{1}".format(field_name, scale)\n+        return "/".join(parts[:-1]) + "/{}".format(scale)\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-02T10:35:02+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/b2b2f8fc17101d702ca99065bf1fd3256e80a29a

fix update_src_scale method

Files changed:
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/utils.py

b'diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 7a18028..3725e1a 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -192,6 +192,8 @@ def __call__(self, data):\n             # we could get the width/height (aspect ratio) without the scale\n             # from the image field: width, height = fullimage.get("image").getImageSize()\n             # XXX: refacture resolve_image to not create scales\n+            if not image:\n+                return\n             attributes["width"] = image.width\n             attributes["height"] = image.height\n             if fullimage is not None:\ndiff --git a/plone/outputfilters/utils.py b/plone/outputfilters/utils.py\nindex 7184721..22038ad 100644\n--- a/plone/outputfilters/utils.py\n+++ b/plone/outputfilters/utils.py\n@@ -82,7 +82,9 @@ def create_picture_tag(self, sourceset, attributes):\n \n     def update_src_scale(self, src, scale):\n         parts = src.split("/")\n-        if "." in src:\n+        if "." in parts[-1]:\n             field_name = parts[-1].split("-")[0]\n-            return "/".join(parts[:-1]) + "/{0}/{1}".format(field_name, scale)\n-        return "/".join(parts[:-1]) + "/{}".format(scale)\n+            src_scale =  "/".join(parts[:-1]) + "/{0}/{1}".format(field_name, scale)\n+            return src_scale\n+        src_scale = "/".join(parts[:-1]) + "/{}".format(scale)\n+        return src_scale\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-02T11:31:39+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/8371ce079639ba63f7151b988cbd013894722f07

Fix image_srcset tests

Files changed:
M plone/outputfilters/tests/test_image_srcset.py

b'diff --git a/plone/outputfilters/tests/test_image_srcset.py b/plone/outputfilters/tests/test_image_srcset.py\nindex 0d56a7a..38a7e7f 100644\n--- a/plone/outputfilters/tests/test_image_srcset.py\n+++ b/plone/outputfilters/tests/test_image_srcset.py\n@@ -119,30 +119,41 @@ def test_parsing_minimal(self):\n \n     def test_parsing_long_doc(self):\n         text = """<h1>Welcome!</h1>\n-<p class="discreet">If you\'re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone support channels about this.</p>\n-<p class="discreet"><img class="image-richtext image-inline image-size-small" src="resolveuid/{uid}/@@images/image/preview" alt="" data-linktype="image" data-srcset="small" data-scale="preview" data-val="{uid}" /></p>\n+<p class="discreet">If you\'re seeing this instead of the web site you were expecting, the owner of this web site has\n+    just installed Plone. Do not contact the Plone Team or the Plone support channels about this.</p>\n+<p class="discreet"><img class="image-richtext image-inline image-size-small"\n+        src="resolveuid/{uid}/@@images/image/preview" alt="" data-linktype="image" data-srcset="small"\n+        data-scale="preview" data-val="{uid}" /></p>\n <h2>Get started</h2>\n <p>Before you start exploring your newly created Plone site, please do the following:</p>\n <ol>\n-<li>Make sure you are logged in as an admin/manager user. <span class="discreet">(You should have a Site Setup entry in the user menu)</span></li>\n+    <li>Make sure you are logged in as an admin/manager user. <span class="discreet">(You should have a Site Setup entry\n+            in the user menu)</span></li>\n </ol>\n <h2>Get comfortable</h2>\n <p>After that, we suggest you do one or more of the following:</p>\n-<p><img class="image-richtext image-left image-size-medium captioned zoomable" src="resolveuid/{uid}/@@images/image/larger" alt="" data-linktype="image" data-srcset="medium" data-scale="larger" data-val="{uid}" /></p>\n+<p><img class="image-richtext image-left image-size-medium captioned zoomable"\n+        src="resolveuid/{uid}/@@images/image/larger" alt="" data-linktype="image" data-srcset="medium"\n+        data-scale="larger" data-val="{uid}" /></p>\n <h2>Make it your own</h2>\n <p>Plone has a lot of different settings that can be used to make it do what you want it to. Some examples:</p>\n <h2>Tell us how you use it</h2>\n-<p>Are you doing something interesting with Plone? Big site deployments, interesting use cases? Do you have a company that delivers Plone-based solutions?</p>\n+<p>Are you doing something interesting with Plone? Big site deployments, interesting use cases? Do you have a company\n+    that delivers Plone-based solutions?</p>\n <h2>Find out more about Plone</h2>\n-<p class="discreet"><img class="image-richtext image-right image-size-large" src="resolveuid/{uid}/@@images/image/huge" alt="" data-linktype="image" data-srcset="large" data-scale="huge" data-val="{uid}" /></p>\n-<p>Plone is a powerful content management system built on a rock-solid application stack written using the Python programming language. More about these technologies:</p>\n-<h2><img class="image-richtext image-inline image-size-large" src="resolveuid/{uid}/@@images/image/huge" alt="" data-linktype="image" data-srcset="large" data-scale="huge" data-val="{uid}" /></h2>\n+<p class="discreet"><img class="image-richtext image-right image-size-large" src="resolveuid/{uid}/@@images/image/huge"\n+        alt="" data-linktype="image" data-srcset="large" data-scale="huge" data-val="{uid}" /></p>\n+<p>Plone is a powerful content management system built on a rock-solid application stack written using the Python\n+    programming language. More about these technologies:</p>\n+<h2><img class="image-richtext image-inline image-size-large" src="resolveuid/{uid}/@@images/image/huge" alt=""\n+        data-linktype="image" data-srcset="large" data-scale="huge" data-val="{uid}" /></h2>\n <h2>Support the Plone Foundation</h2>\n-<p>Plone is made possible only through the efforts of thousands of dedicated individuals and hundreds of companies. The Plone Foundation:</p>\n+<p>Plone is made possible only through the efforts of thousands of dedicated individuals and hundreds of companies. The\n+    Plone Foundation:</p>\n <ul>\n-<li>\xe2\x80\xa6protects and promotes Plone.</li>\n-<li>\xe2\x80\xa6is a registered 501(c)(3) charitable organization.</li>\n-<li>\xe2\x80\xa6donations are tax-deductible.</li>\n+    <li>\xe2\x80\xa6protects and promotes Plone.</li>\n+    <li>\xe2\x80\xa6is a registered 501(c)(3) charitable organization.</li>\n+    <li>\xe2\x80\xa6donations are tax-deductible.</li>\n </ul>\n <p>Thanks for using our product; we hope you like it!</p>\n <p>\xe2\x80\x94The Plone Team</p>\n@@ -155,35 +166,72 @@ def test_parsing_long_doc(self):\n         self.assertTrue(res)\n \n         text_out = """<h1>Welcome!</h1>\n-<p class="discreet">If you\'re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone support channels about this.</p>\n-<p class="discreet"><picture><img class="image-richtext image-inline image-size-small" loading="lazy" src="resolveuid/{uid}/@@images/image/preview"/></picture></p>\n+<p class="discreet">If you\'re seeing this instead of the web site you were expecting, the owner of this web site has\n+    just installed Plone. Do not contact the Plone Team or the Plone support channels about this.</p>\n+<p class="discreet">\n+    <picture>\n+        <source\n+            srcset="resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/larger 1000w" />\n+        <img alt="" class="image-richtext image-inline image-size-small" data-linktype="image" data-scale="preview"\n+            data-srcset="small" data-val="{uid}" loading="lazy"\n+            src="resolveuid/{uid}/@@images/image/preview" />\n+    </picture>\n+</p>\n <h2>Get started</h2>\n <p>Before you start exploring your newly created Plone site, please do the following:</p>\n <ol>\n-<li>Make sure you are logged in as an admin/manager user. <span class="discreet">(You should have a Site Setup entry in the user menu)</span></li>\n+    <li>Make sure you are logged in as an admin/manager user.<span class="discreet">(You should have a Site Setup entry\n+            in the user menu)</span></li>\n </ol>\n <h2>Get comfortable</h2>\n <p>After that, we suggest you do one or more of the following:</p>\n-<p><picture><source class="image-richtext image-left image-size-medium captioned zoomable" loading="lazy" media="(max-width:768px)" srcset="resolveuid/{uid}/@@images/image/large"/><img class="image-richtext image-left image-size-medium captioned zoomable" loading="lazy" src="resolveuid/{uid}/@@images/image/larger"/></picture></p>\n+<p>\n+    <picture class="captioned">\n+        <source\n+            srcset="resolveuid/{uid}/@@images/image/teaser 600w, resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/larger 1000w, resolveuid/{uid}/@@images/image/great 1200w" />\n+        <img alt="" class="image-richtext image-left image-size-medium captioned zoomable" data-linktype="image"\n+            data-scale="larger" data-srcset="medium" data-val="{uid}" loading="lazy"\n+            src="resolveuid/{uid}/@@images/image/teaser" />\n+    </picture>\n+</p>\n <h2>Make it your own</h2>\n <p>Plone has a lot of different settings that can be used to make it do what you want it to. Some examples:</p>\n <h2>Tell us how you use it</h2>\n-<p>Are you doing something interesting with Plone? Big site deployments, interesting use cases? Do you have a company that delivers Plone-based solutions?</p>\n+<p>Are you doing something interesting with Plone? Big site deployments, interesting use cases? Do you have a company\n+    that delivers Plone-based solutions?</p>\n <h2>Find out more about Plone</h2>\n-<p class="discreet"><picture><source class="image-richtext image-right image-size-large" loading="lazy" media="(max-width:768px) and (orientation:portrait)" srcset="resolveuid/{uid}/@@images/image/teaser"/><source class="image-richtext image-right image-size-large" loading="lazy" media="(max-width:768px)" srcset="resolveuid/{uid}/@@images/image/large"/><source class="image-richtext image-right image-size-large" loading="lazy" media="(min-width:992px)" srcset="resolveuid/{uid}/@@images/image/larger"/><source class="image-richtext image-right image-size-large" loading="lazy" media="(min-width:1200px)" srcset="resolveuid/{uid}/@@images/image/great"/><source class="image-richtext image-right image-size-large" loading="lazy" media="(min-width:1400px)" srcset="resolveuid/{uid}/@@images/image/huge"/><img class="image-richtext image-right image-size-large" loading="lazy" src="resolveuid/{uid}/@@images/image/huge"/></picture></p>\n-<p>Plone is a powerful content management system built on a rock-solid application stack written using the Python programming language. More about these technologies:</p>\n-<h2><picture><source class="image-richtext image-inline image-size-large" loading="lazy" media="(max-width:768px) and (orientation:portrait)" srcset="resolveuid/{uid}/@@images/image/teaser"/><source class="image-richtext image-inline image-size-large" loading="lazy" media="(max-width:768px)" srcset="resolveuid/{uid}/@@images/image/large"/><source class="image-richtext image-inline image-size-large" loading="lazy" media="(min-width:992px)" srcset="resolveuid/{uid}/@@images/image/larger"/><source class="image-richtext image-inline image-size-large" loading="lazy" media="(min-width:1200px)" srcset="resolveuid/{uid}/@@images/image/great"/><source class="image-richtext image-inline image-size-large" loading="lazy" media="(min-width:1400px)" srcset="resolveuid/{uid}/@@images/image/huge"/><img class="image-richtext image-inline image-size-large" loading="lazy" src="resolveuid/{uid}/@@images/image/huge"/></picture></h2>\n+<p class="discreet">\n+    <picture>\n+        <source\n+            srcset="resolveuid/{uid}/@@images/image/larger 1000w, resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/teaser 600w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/great 1200w, resolveuid/{uid}/@@images/image/huge 1600w" />\n+        <img alt="" class="image-richtext image-right image-size-large" data-linktype="image" data-scale="huge"\n+            data-srcset="large" data-val="{uid}" loading="lazy"\n+            src="resolveuid/{uid}/@@images/image/larger" />\n+    </picture>\n+</p>\n+<p>Plone is a powerful content management system built on a rock-solid application stack written using the Python\n+    programming language. More about these technologies:</p>\n+<h2>\n+    <picture>\n+        <source\n+            srcset="resolveuid/{uid}/@@images/image/larger 1000w, resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/teaser 600w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/great 1200w, resolveuid/{uid}/@@images/image/huge 1600w" />\n+        <img alt="" class="image-richtext image-inline image-size-large" data-linktype="image" data-scale="huge"\n+            data-srcset="large" data-val="{uid}" loading="lazy"\n+            src="resolveuid/{uid}/@@images/image/larger" />\n+    </picture>\n+</h2>\n <h2>Support the Plone Foundation</h2>\n-<p>Plone is made possible only through the efforts of thousands of dedicated individuals and hundreds of companies. The Plone Foundation:</p>\n+<p>Plone is made possible only through the efforts of thousands of dedicated individuals and hundreds of companies. The\n+    Plone Foundation:</p>\n <ul>\n-<li>\xe2\x80\xa6protects and promotes Plone.</li>\n-<li>\xe2\x80\xa6is a registered 501(c)(3) charitable organization.</li>\n-<li>\xe2\x80\xa6donations are tax-deductible.</li>\n+    <li>\xe2\x80\xa6protects and promotes Plone.</li>\n+    <li>\xe2\x80\xa6is a registered 501(c)(3) charitable organization.</li>\n+    <li>\xe2\x80\xa6donations are tax-deductible.</li>\n </ul>\n <p>Thanks for using our product; we hope you like it!</p>\n <p>\xe2\x80\x94The Plone Team</p>\n         """.format(uid=self.UID)\n-        self._assertTransformsTo(text, text_out)\n+        # self._assertTransformsTo(text, text_out)\n \n     def test_parsing_with_nonexisting_srcset(self):\n         text = """\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-03T19:45:03+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/25c15cdc85e17834ca59e4e44d6091c553894dda

move utils.Img2PictureTag from outputfilter to namedfile.picture

Files changed:
M plone/outputfilters/filters/image_srcset.py
D plone/outputfilters/utils.py

b'diff --git a/plone/outputfilters/filters/image_srcset.py b/plone/outputfilters/filters/image_srcset.py\nindex c837c07..092f90c 100644\n--- a/plone/outputfilters/filters/image_srcset.py\n+++ b/plone/outputfilters/filters/image_srcset.py\n@@ -5,7 +5,7 @@\n from plone.outputfilters.interfaces import IFilter\n from Products.CMFPlone.utils import safe_nativestring\n from zope.interface import implementer\n-from plone.outputfilters.utils import Img2PictureTag\n+from plone.namedfile.picture import Img2PictureTag\n \n logger = logging.getLogger("plone.outputfilter.image_srcset")\n \ndiff --git a/plone/outputfilters/utils.py b/plone/outputfilters/utils.py\ndeleted file mode 100644\nindex 22038ad..0000000\n--- a/plone/outputfilters/utils.py\n+++ /dev/null\n@@ -1,90 +0,0 @@\n-import logging\n-\n-from plone.base.interfaces import IImagingSchema\n-from plone.registry.interfaces import IRegistry\n-from zope.component import getUtility\n-from bs4 import BeautifulSoup\n-\n-logger = logging.getLogger("plone.outputfilter.image_srcset")\n-\n-\n-class Img2PictureTag(object):\n-    @property\n-    def allowed_scales(self):\n-        registry = getUtility(IRegistry)\n-        settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n-        return settings.allowed_sizes\n-\n-    @property\n-    def image_srcsets(self):\n-        registry = getUtility(IRegistry)\n-        settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n-        return settings.image_srcsets\n-\n-    def get_scale_name(self, scale_line):\n-        parts = scale_line.split(" ")\n-        return parts and parts[0] or ""\n-\n-    def get_scale_width(self, scale):\n-        """get width from allowed_scales line\n-        large 800:65536\n-        """\n-        for s in self.allowed_scales:\n-            parts = s.split(" ")\n-            if not parts:\n-                continue\n-            if parts[0] == scale:\n-                dimentions = parts[1].split(":")\n-                if not dimentions:\n-                    continue\n-                return dimentions[0]\n-\n-    def create_picture_tag(self, sourceset, attributes):\n-        """Converts the element to a srcset definition"""\n-        soup = BeautifulSoup("", "html.parser")\n-        allowed_scales = self.allowed_scales\n-        src = attributes.get("src")\n-        picture_tag = soup.new_tag("picture")\n-        css_classes = attributes.get("class")\n-        if "captioned" in css_classes:\n-            picture_tag["class"] = "captioned"\n-        for i, source in enumerate(sourceset):\n-            target_scale = source["scale"]\n-            media = source.get("media")\n-\n-            additional_scales = source.get("additionalScales", None)\n-            if additional_scales is None:\n-                additional_scales = [\n-                    self.get_scale_name(s) for s in allowed_scales if s != target_scale\n-                ]\n-            source_scales = [target_scale] + additional_scales\n-            source_srcset = []\n-            for scale in source_scales:\n-                scale_url = self.update_src_scale(src=src, scale=scale)\n-                scale_width = self.get_scale_width(scale)\n-                source_srcset.append("{0} {1}w".format(scale_url, scale_width))\n-            source_tag = soup.new_tag("source", srcset=",\\n".join(source_srcset))\n-            if media:\n-                source_tag["media"] = media\n-            picture_tag.append(source_tag)\n-            if i == len(sourceset) - 1:\n-                img_tag = soup.new_tag(\n-                    "img",\n-                    src=self.update_src_scale(src=src, scale=target_scale),\n-                )\n-                for k, attr in attributes.items():\n-                    if k in ["src", "srcset"]:\n-                        continue\n-                    img_tag.attrs[k] = attr\n-                img_tag["loading"] = "lazy"\n-                picture_tag.append(img_tag)\n-        return picture_tag\n-\n-    def update_src_scale(self, src, scale):\n-        parts = src.split("/")\n-        if "." in parts[-1]:\n-            field_name = parts[-1].split("-")[0]\n-            src_scale =  "/".join(parts[:-1]) + "/{0}/{1}".format(field_name, scale)\n-            return src_scale\n-        src_scale = "/".join(parts[:-1]) + "/{}".format(scale)\n-        return src_scale\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-03T19:45:21+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/5befed3a8d8e8c788cb3a237e237a0f310e1b8cb

prettify soup output

Files changed:
M plone/outputfilters/filters/image_srcset.py

b'diff --git a/plone/outputfilters/filters/image_srcset.py b/plone/outputfilters/filters/image_srcset.py\nindex 092f90c..b6cdd6f 100644\n--- a/plone/outputfilters/filters/image_srcset.py\n+++ b/plone/outputfilters/filters/image_srcset.py\n@@ -57,4 +57,4 @@ def __call__(self, data):\n             if not sourceset:\n                 continue\n             elem.replace_with(self.img2picturetag.create_picture_tag(sourceset, elem.attrs))\n-        return str(soup)\n+        return soup.prettify()\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-03T19:46:14+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/76705bb3a09e06f5479e13351b66daf1b0172a1a

cleanup

Files changed:
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 3725e1a..a46b776 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_acquire\n from Acquisition import aq_base\n+from Acquisition import aq_inner\n from Acquisition import aq_parent\n from bs4 import BeautifulSoup\n from DocumentTemplate.html_quote import html_quote\n@@ -29,13 +30,6 @@\n import six\n \n \n-HAS_LINGUAPLONE = True\n-try:\n-    from Products.LinguaPlone.utils import translated_references\n-except ImportError:\n-    HAS_LINGUAPLONE = False\n-\n-\n appendix_re = re.compile(\'^(.*)([?#].*)$\')\n resolveuid_re = re.compile(\'^[./]*resolve[Uu]id/([^/]*)/?(.*)$\')\n \n@@ -146,7 +140,6 @@ def _render_resolveuid(self, href):\n     def __call__(self, data):\n         data = re.sub(r\'<([^<>\\s]+?)\\s*/>\', self._shorttag_replace, data)\n         soup = BeautifulSoup(safe_unicode(data), \'html.parser\')\n-\n         for elem in soup.find_all([\'a\', \'area\']):\n             attributes = elem.attrs\n             href = attributes.get(\'href\')\n@@ -192,10 +185,9 @@ def __call__(self, data):\n             # we could get the width/height (aspect ratio) without the scale\n             # from the image field: width, height = fullimage.get("image").getImageSize()\n             # XXX: refacture resolve_image to not create scales\n-            if not image:\n-                return\n-            attributes["width"] = image.width\n-            attributes["height"] = image.height\n+            if image and hasattr(image, "width"):\n+                attributes["width"] = image.width\n+                attributes["height"] = image.height\n             if fullimage is not None:\n                 # Check to see if the alt / title tags need setting\n                 title = safe_unicode(aq_acquire(fullimage, \'Title\')())\n@@ -204,7 +196,6 @@ def __call__(self, data):\n                     attributes[\'alt\'] = description or ""\n                 if \'title\' not in attributes:\n                     attributes[\'title\'] = title\n-\n         for picture_elem in soup.find_all(\'picture\'):\n             if \'captioned\' not in picture_elem.attrs.get(\'class\', []):\n                 continue\n@@ -237,16 +228,6 @@ def __call__(self, data):\n \n         return six.text_type(soup)\n \n-    def lookup_uid(self, uid):\n-        context = self.context\n-        if HAS_LINGUAPLONE:\n-            # If we have LinguaPlone installed, add support for language-aware\n-            # references\n-            uids = translated_references(context, context.Language(), uid)\n-            if len(uids) > 0:\n-                uid = uids[0]\n-        return uuidToObject(uid)\n-\n     def resolve_scale_data(self, url):\n         """ return scale url, width and height\n         """\n@@ -271,7 +252,7 @@ def resolve_link(self, href):\n             match = resolveuid_re.match(subpath)\n             if match is not None:\n                 uid, _subpath = match.groups()\n-                obj = self.lookup_uid(uid)\n+                obj = uuidToObject(uid)\n                 if obj is not None:\n                     subpath = _subpath\n \ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex cb011bd..c9b19b8 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -334,7 +334,7 @@ def test_image_captioning_in_news_item(self):\n         # Test captioning\n         output = news_item.text.output\n         text_out = """<span><figure class="captioned">\n-<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<img height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>\n </span>"""\n@@ -354,7 +354,7 @@ def test_image_captioning_absolute_path(self):\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_relative_path(self):\n-        text_in = """<img class="captioned" src="image.jpg"/>"""\n+        text_in = """<img class="captioned" src="./image.jpg"/>"""\n         text_out = """<figure class="captioned">\n <img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n@@ -423,7 +423,7 @@ def test_image_captioning_resolveuid_new_scale_plone_namedfile(self):\n     def test_image_captioning_resolveuid_no_scale(self):\n         text_in = """<img class="captioned" src="resolveuid/%s/@@images/image"/>""" % self.UID\n         text_out = """<figure class="captioned">\n-<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<img alt="My caption" class="captioned" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -431,7 +431,7 @@ def test_image_captioning_resolveuid_no_scale(self):\n     def test_image_captioning_resolveuid_with_srcset_and_src(self):\n         text_in = """<img class="captioned" src="resolveuid/%s/@@images/image" srcset="resolveuid/%s/@@images/image 480w,resolveuid/%s/@@images/image 360w"/>""" % (self.UID, self.UID, self.UID)\n         text_out = """<figure class="captioned">\n-<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" srcset="http://nohost/plone/image.jpg/@@images/...jpeg 480w,http://nohost/plone/image.jpg/@@images/...jpeg 360w" title="Image" width="500"/>\n+<img alt="My caption" class="captioned" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" srcset="http://nohost/plone/image.jpg/@@images/...jpeg 480w,http://nohost/plone/image.jpg/@@images/...jpeg 360w" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-03T19:46:34+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/f734494ec19009c8f157a48f83df083f1b17814e

fix test

Files changed:
M plone/outputfilters/tests/test_resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex c9b19b8..e2dfc51 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -327,7 +327,7 @@ def test_image_captioning_in_news_item(self):\n         news_item = self.portal[\'a-news-item\']\n         from plone.app.textfield.value import RichTextValue\n         news_item.text = RichTextValue(\n-            \'<span><img class="captioned" src="image.jpg"/></span>\',\n+            \'<span><picture class="captioned"><img src="image.jpg"/></picture></span>\',\n             \'text/html\', \'text/x-html-safe\')\n         news_item.setDescription("Description.")\n \n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-07T17:26:22+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/be09d6a5a964933d62e75c209238857305d0ff5d

rename image_srcset to picture_variants, fix captioning

Files changed:
A plone/outputfilters/filters/picture_variants.py
A plone/outputfilters/tests/test_picture_variants.py
M plone/outputfilters/filters/configure.zcml
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py
D plone/outputfilters/filters/image_srcset.py
D plone/outputfilters/tests/test_image_srcset.py

b'diff --git a/plone/outputfilters/filters/configure.zcml b/plone/outputfilters/filters/configure.zcml\nindex c351214..4376517 100644\n--- a/plone/outputfilters/filters/configure.zcml\n+++ b/plone/outputfilters/filters/configure.zcml\n@@ -5,9 +5,9 @@\n \n   <adapter\n     provides="..interfaces.IFilter"\n-    name="image_srcset"\n+    name="picture_variants"\n     for="* *"\n-    factory=".image_srcset.ImageSrcsetFilter"\n+    factory=".picture_variants.PictureVariantsFilter"\n     />\n \n   <adapter\ndiff --git a/plone/outputfilters/filters/image_srcset.py b/plone/outputfilters/filters/picture_variants.py\nsimilarity index 66%\nrename from plone/outputfilters/filters/image_srcset.py\nrename to plone/outputfilters/filters/picture_variants.py\nindex b6cdd6f..36e62ff 100644\n--- a/plone/outputfilters/filters/image_srcset.py\n+++ b/plone/outputfilters/filters/picture_variants.py\n@@ -7,12 +7,12 @@\n from zope.interface import implementer\n from plone.namedfile.picture import Img2PictureTag\n \n-logger = logging.getLogger("plone.outputfilter.image_srcset")\n+logger = logging.getLogger("plone.outputfilter.picture_variants")\n \n \n @implementer(IFilter)\n-class ImageSrcsetFilter(object):\n-    """Converts img tags with a data-srcset attribute into picture tag with srcset definition.\n+class PictureVariantsFilter(object):\n+    """Converts img tags with a data-picturevariant attribute into picture/source tag\'s with srcset definitions.\n     """\n \n     order = 700\n@@ -42,18 +42,18 @@ def __call__(self, data):\n         soup = BeautifulSoup(safe_nativestring(data), "html.parser")\n \n         for elem in soup.find_all("img"):\n-            srcset_name = elem.attrs.get("data-srcset", "")\n-            if not srcset_name:\n+            picture_variant_name = elem.attrs.get("data-picturevariant", "")\n+            if not picture_variant_name:\n                 continue\n-            srcset_config = self.img2picturetag.image_srcsets.get(srcset_name)\n-            if not srcset_config:\n+            picture_variants_config = self.img2picturetag.picture_variants.get(picture_variant_name)\n+            if not picture_variants_config:\n                 logger.warn(\n-                    "Could not find the given srcset_name {0}, leave tag untouched!".format(\n-                        srcset_name\n+                    "Could not find the given picture_variant_name {0}, leave tag untouched!".format(\n+                        picture_variant_name\n                     )\n                 )\n                 continue\n-            sourceset = srcset_config.get("sourceset")\n+            sourceset = picture_variants_config.get("sourceset")\n             if not sourceset:\n                 continue\n             elem.replace_with(self.img2picturetag.create_picture_tag(sourceset, elem.attrs))\ndiff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex a46b776..36c194f 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -176,56 +176,93 @@ def __call__(self, data):\n             if not src:\n                 continue\n             attributes[\'src\'] = self._render_resolveuid(src)\n-        for elem in soup.find_all(\'img\'):\n-            # handles src attribute\n-            attributes = elem.attrs\n+        for elem in soup.find_all([\'img\', \'picture\']):\n+            if elem.name == "picture":\n+                img_elem = elem.find("img")\n+            else:\n+                img_elem = elem\n+\n+            # handle src attribute\n+            attributes = img_elem.attrs\n             src = attributes.get(\'src\', \'\')\n             image, fullimage, src, description = self.resolve_image(src)\n             attributes["src"] = src\n-            # we could get the width/height (aspect ratio) without the scale\n-            # from the image field: width, height = fullimage.get("image").getImageSize()\n-            # XXX: refacture resolve_image to not create scales\n             if image and hasattr(image, "width"):\n-                attributes["width"] = image.width\n-                attributes["height"] = image.height\n+                if "width" not in attributes:\n+                    attributes["width"] = image.width\n+                if "height" not in attributes:\n+                    attributes["height"] = image.height\n             if fullimage is not None:\n                 # Check to see if the alt / title tags need setting\n                 title = safe_unicode(aq_acquire(fullimage, \'Title\')())\n                 if not attributes.get(\'alt\'):\n-                    # XXX alt attribute contains *alternate* text\n-                    attributes[\'alt\'] = description or ""\n+                    # bettr an emty alt tag than none. This avoid\'s screen readers\n+                    # to read the file name instead. A better fallback would be\n+                    # a fallback alt text comming from the img object.\n+                    attributes[\'alt\'] = ""\n                 if \'title\' not in attributes:\n                     attributes[\'title\'] = title\n-        for picture_elem in soup.find_all(\'picture\'):\n-            if \'captioned\' not in picture_elem.attrs.get(\'class\', []):\n-                continue\n-            elem = picture_elem.find("img")\n-            attributes = elem.attrs\n-            src = attributes.get(\'src\', \'\')\n-            image, fullimage, src, description = self.resolve_image(src)\n-            attributes["src"] = src\n-            caption = description\n-            caption_manual_override = attributes.get("data-captiontext", "")\n-            if caption_manual_override:\n-                caption = caption_manual_override\n-            # Check if the image needs to be captioned\n-            if (self.captioned_images and caption):\n-                options = {}\n-                options["tag"] = picture_elem.prettify()\n-                options["caption"] = newline_to_br(html_quote(caption))\n-                options["class"] = \' \'.join(attributes[\'class\'])\n-                del attributes[\'class\']\n-                picture_elem.append(elem)\n-                captioned = BeautifulSoup(\n-                    self.captioned_image_template(**options), \'html.parser\')\n-\n-                # if we are a captioned image within a link, remove and occurrences\n-                # of a tags inside caption template to preserve the outer link\n-                if bool(elem.find_parent(\'a\')) and bool(captioned.find(\'a\')):\n-                    captioned.a.unwrap()\n-                del captioned.picture.img["class"]\n-                picture_elem.replace_with(captioned)\n \n+            # handle captions\n+            if \'captioned\' in elem.attrs.get(\'class\', []):\n+                caption = description\n+                caption_manual_override = attributes.get("data-captiontext", "")\n+                if caption_manual_override:\n+                    caption = caption_manual_override\n+                # Check if the image needs to be captioned\n+                if (self.captioned_images and caption):\n+                    options = {}\n+                    options["tag"] = elem.prettify()\n+                    options["caption"] = newline_to_br(html_quote(caption))\n+                    options["class"] = \' \'.join(attributes[\'class\'])\n+                    del attributes[\'class\']\n+                    if elem.name == "picture":\n+                        elem.append(img_elem)\n+                    captioned = BeautifulSoup(\n+                        self.captioned_image_template(**options), \'html.parser\')\n+\n+                    # if we are a captioned image within a link, remove and occurrences\n+                    # of a tags inside caption template to preserve the outer link\n+                    if bool(elem.find_parent(\'a\')) and bool(captioned.find(\'a\')):\n+                        captioned.a.unwrap()\n+                    if elem.name == "picture":\n+                        del captioned.picture.img["class"]\n+                    elem.replace_with(captioned)\n+\n+        # # captioning must hapen before resolving uid\'s\n+        # for cap_elem in soup.find_all([\'picture\', \'img\']):\n+        #     if \'captioned\' in cap_elem.attrs.get(\'class\', []):\n+        #         if cap_elem.name == "picture":\n+        #             img_elem = cap_elem.find("img")\n+        #         else:\n+        #             img_elem = cap_elem\n+        #         attributes = img_elem.attrs\n+        #         src = attributes.get(\'src\', \'\')\n+        #         image, fullimage, src, description = self.resolve_image(src)\n+        #         attributes["src"] = src\n+        #         caption = description\n+        #         caption_manual_override = attributes.get("data-captiontext", "")\n+        #         if caption_manual_override:\n+        #             caption = caption_manual_override\n+        #         # Check if the image needs to be captioned\n+        #         if (self.captioned_images and caption):\n+        #             options = {}\n+        #             options["tag"] = cap_elem.prettify()\n+        #             options["caption"] = newline_to_br(html_quote(caption))\n+        #             options["class"] = \' \'.join(attributes[\'class\'])\n+        #             del attributes[\'class\']\n+        #             if cap_elem.name == "picture":\n+        #                 cap_elem.append(img_elem)\n+        #             captioned = BeautifulSoup(\n+        #                 self.captioned_image_template(**options), \'html.parser\')\n+\n+        #             # if we are a captioned image within a link, remove and occurrences\n+        #             # of a tags inside caption template to preserve the outer link\n+        #             if bool(cap_elem.find_parent(\'a\')) and bool(captioned.find(\'a\')):\n+        #                 captioned.a.unwrap()\n+        #             if cap_elem.name == "picture":\n+        #                 del captioned.picture.img["class"]\n+        #             cap_elem.replace_with(captioned)\n         return six.text_type(soup)\n \n     def resolve_scale_data(self, url):\n@@ -274,6 +311,7 @@ def traversal_stack(base, path):\n             obj = base\n             stack = [obj]\n             components = path.split(\'/\')\n+            # print("components: {}".format(components))\n             while components:\n                 child_id = unquote(components.pop(0))\n                 try:\n@@ -296,6 +334,7 @@ def traversal_stack(base, path):\n                     return\n                 obj = child\n                 stack.append(obj)\n+            # print(f"traversal_stack: {stack}")\n             return stack\n \n         def traverse_path(base, path):\ndiff --git a/plone/outputfilters/tests/test_image_srcset.py b/plone/outputfilters/tests/test_picture_variants.py\nsimilarity index 85%\nrename from plone/outputfilters/tests/test_image_srcset.py\nrename to plone/outputfilters/tests/test_picture_variants.py\nindex 38a7e7f..f5fc0fa 100644\n--- a/plone/outputfilters/tests/test_image_srcset.py\n+++ b/plone/outputfilters/tests/test_picture_variants.py\n@@ -11,7 +11,7 @@\n from plone.namedfile.file import NamedBlobImage\n from plone.namedfile.file import NamedImage\n from plone.namedfile.tests.test_scaling import DummyContent as NFDummyContent\n-from plone.outputfilters.filters.image_srcset import ImageSrcsetFilter\n+from plone.outputfilters.filters.picture_variants import PictureVariantsFilter\n from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n from Products.PortalTransforms.tests.utils import normalize_html\n \n@@ -28,14 +28,14 @@ def dummy_image():\n     return NamedBlobImage(data=data, filename=filename)\n \n \n-class ImageSrcsetFilterIntegrationTestCase(PloneTestCase):\n+class PictureVariantsFilterIntegrationTestCase(PloneTestCase):\n \n     layer = PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n \n     image_id = \'image.jpg\'\n \n     def _makeParser(self, **kw):\n-        parser = ImageSrcsetFilter(context=self.portal)\n+        parser = PictureVariantsFilter(context=self.portal)\n         for k, v in kw.items():\n             setattr(parser, k, v)\n         return parser\n@@ -78,8 +78,8 @@ def _assertTransformsTo(self, input, expected):\n         out = self.parser(input)\n         normalized_out = normalize_html(out)\n         normalized_expected = normalize_html(expected)\n-        # print("e: {}".format(normalized_expected))\n-        # print("o: {}".format(normalized_out))\n+        print("\\n e: {}".format(expected))\n+        print("\\n o: {}".format(out))\n         try:\n             self.assertTrue(_ellipsis_match(normalized_expected,\n                                             normalized_out))\n@@ -113,7 +113,9 @@ def beforeTearDown(self):\n         del self.portal[self.image_id]\n \n     def test_parsing_minimal(self):\n-        text = \'<div>Some simple text.</div>\'\n+        text = """<div>\n+ Some simple text.\n+</div>"""\n         res = self.parser(text)\n         self.assertEqual(text, str(res))\n \n@@ -122,7 +124,7 @@ def test_parsing_long_doc(self):\n <p class="discreet">If you\'re seeing this instead of the web site you were expecting, the owner of this web site has\n     just installed Plone. Do not contact the Plone Team or the Plone support channels about this.</p>\n <p class="discreet"><img class="image-richtext image-inline image-size-small"\n-        src="resolveuid/{uid}/@@images/image/preview" alt="" data-linktype="image" data-srcset="small"\n+        src="resolveuid/{uid}/@@images/image/preview" alt="" data-linktype="image" data-picturevariant="small"\n         data-scale="preview" data-val="{uid}" /></p>\n <h2>Get started</h2>\n <p>Before you start exploring your newly created Plone site, please do the following:</p>\n@@ -133,7 +135,7 @@ def test_parsing_long_doc(self):\n <h2>Get comfortable</h2>\n <p>After that, we suggest you do one or more of the following:</p>\n <p><img class="image-richtext image-left image-size-medium captioned zoomable"\n-        src="resolveuid/{uid}/@@images/image/larger" alt="" data-linktype="image" data-srcset="medium"\n+        src="resolveuid/{uid}/@@images/image/larger" alt="" data-linktype="image" data-picturevariant="medium"\n         data-scale="larger" data-val="{uid}" /></p>\n <h2>Make it your own</h2>\n <p>Plone has a lot of different settings that can be used to make it do what you want it to. Some examples:</p>\n@@ -142,11 +144,11 @@ def test_parsing_long_doc(self):\n     that delivers Plone-based solutions?</p>\n <h2>Find out more about Plone</h2>\n <p class="discreet"><img class="image-richtext image-right image-size-large" src="resolveuid/{uid}/@@images/image/huge"\n-        alt="" data-linktype="image" data-srcset="large" data-scale="huge" data-val="{uid}" /></p>\n+        alt="" data-linktype="image" data-picturevariant="large" data-scale="huge" data-val="{uid}" /></p>\n <p>Plone is a powerful content management system built on a rock-solid application stack written using the Python\n     programming language. More about these technologies:</p>\n <h2><img class="image-richtext image-inline image-size-large" src="resolveuid/{uid}/@@images/image/huge" alt=""\n-        data-linktype="image" data-srcset="large" data-scale="huge" data-val="{uid}" /></h2>\n+        data-linktype="image" data-picturevariant="large" data-scale="huge" data-val="{uid}" /></h2>\n <h2>Support the Plone Foundation</h2>\n <p>Plone is made possible only through the efforts of thousands of dedicated individuals and hundreds of companies. The\n     Plone Foundation:</p>\n@@ -171,10 +173,10 @@ def test_parsing_long_doc(self):\n <p class="discreet">\n     <picture>\n         <source\n-            srcset="resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/larger 1000w" />\n-        <img alt="" class="image-richtext image-inline image-size-small" data-linktype="image" data-scale="preview"\n-            data-srcset="small" data-val="{uid}" loading="lazy"\n-            src="resolveuid/{uid}/@@images/image/preview" />\n+            srcset="resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/larger 1000w"/>\n+        <img alt="" class="image-richtext image-inline image-size-small" data-linktype="image"\n+            data-picturevariant="small" data-scale="preview" data-val="{uid}" loading="lazy"\n+            src="resolveuid/{uid}/@@images/image/preview"/>\n     </picture>\n </p>\n <h2>Get started</h2>\n@@ -188,10 +190,10 @@ def test_parsing_long_doc(self):\n <p>\n     <picture class="captioned">\n         <source\n-            srcset="resolveuid/{uid}/@@images/image/teaser 600w, resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/larger 1000w, resolveuid/{uid}/@@images/image/great 1200w" />\n+            srcset="resolveuid/{uid}/@@images/image/teaser 600w, resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/larger 1000w, resolveuid/{uid}/@@images/image/great 1200w"/>\n         <img alt="" class="image-richtext image-left image-size-medium captioned zoomable" data-linktype="image"\n-            data-scale="larger" data-srcset="medium" data-val="{uid}" loading="lazy"\n-            src="resolveuid/{uid}/@@images/image/teaser" />\n+            data-picturevariant="medium" data-scale="larger" data-val="{uid}" loading="lazy"\n+            src="resolveuid/{uid}/@@images/image/teaser"/>\n     </picture>\n </p>\n <h2>Make it your own</h2>\n@@ -203,10 +205,10 @@ def test_parsing_long_doc(self):\n <p class="discreet">\n     <picture>\n         <source\n-            srcset="resolveuid/{uid}/@@images/image/larger 1000w, resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/teaser 600w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/great 1200w, resolveuid/{uid}/@@images/image/huge 1600w" />\n-        <img alt="" class="image-richtext image-right image-size-large" data-linktype="image" data-scale="huge"\n-            data-srcset="large" data-val="{uid}" loading="lazy"\n-            src="resolveuid/{uid}/@@images/image/larger" />\n+            srcset="resolveuid/{uid}/@@images/image/larger 1000w, resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/teaser 600w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/great 1200w, resolveuid/{uid}/@@images/image/huge 1600w"/>\n+        <img alt="" class="image-richtext image-right image-size-large" data-linktype="image"\n+            data-picturevariant="large" data-scale="huge" data-val="{uid}" loading="lazy"\n+            src="resolveuid/{uid}/@@images/image/larger"/>\n     </picture>\n </p>\n <p>Plone is a powerful content management system built on a rock-solid application stack written using the Python\n@@ -214,10 +216,10 @@ def test_parsing_long_doc(self):\n <h2>\n     <picture>\n         <source\n-            srcset="resolveuid/{uid}/@@images/image/larger 1000w, resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/teaser 600w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/great 1200w, resolveuid/{uid}/@@images/image/huge 1600w" />\n-        <img alt="" class="image-richtext image-inline image-size-large" data-linktype="image" data-scale="huge"\n-            data-srcset="large" data-val="{uid}" loading="lazy"\n-            src="resolveuid/{uid}/@@images/image/larger" />\n+            srcset="resolveuid/{uid}/@@images/image/larger 1000w, resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/teaser 600w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/great 1200w, resolveuid/{uid}/@@images/image/huge 1600w"/>\n+        <img alt="" class="image-richtext image-inline image-size-large" data-linktype="image"\n+            data-picturevariant="large" data-scale="huge" data-val="{uid}" loading="lazy"\n+            src="resolveuid/{uid}/@@images/image/larger"/>\n     </picture>\n </h2>\n <h2>Support the Plone Foundation</h2>\n@@ -231,16 +233,16 @@ def test_parsing_long_doc(self):\n <p>Thanks for using our product; we hope you like it!</p>\n <p>\xe2\x80\x94The Plone Team</p>\n         """.format(uid=self.UID)\n-        # self._assertTransformsTo(text, text_out)\n+        self._assertTransformsTo(text, text_out)\n \n     def test_parsing_with_nonexisting_srcset(self):\n         text = """\n-<p><img class="image-richtext image-inline image-size-thumb" src="resolveuid/{uid}/@@images/image/thumb" alt="" data-linktype="image" data-srcset="thumb" data-scale="thumb" data-val="{uid}" /></p>\n+<p><img class="image-richtext image-inline image-size-thumb" src="resolveuid/{uid}/@@images/image/thumb" alt="" data-linktype="image" data-picturevariant="thumb" data-scale="thumb" data-val="{uid}" /></p>\n         """.format(uid=self.UID)\n         res = self.parser(text)\n         self.assertTrue(res)\n         text_out = """\n-<p><img class="image-richtext image-inline image-size-thumb" src="resolveuid/{uid}/@@images/image/thumb" alt="" data-linktype="image" data-srcset="thumb" data-scale="thumb" data-val="{uid}" /></p>\n+<p><img class="image-richtext image-inline image-size-thumb" src="resolveuid/{uid}/@@images/image/thumb" alt="" data-linktype="image" data-picturevariant="thumb" data-scale="thumb" data-val="{uid}" /></p>\n         """.format(uid=self.UID)\n         # verify that tag was not converted:\n-        self.assertTrue("data-srcset" in res)\n\\ No newline at end of file\n+        self.assertTrue("data-picturevariant" in res)\n\\ No newline at end of file\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex e2dfc51..5724a6d 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -72,14 +72,17 @@ def UID(self):\n         self.portal._setObject(\'foo2\', dummy2)\n         self.portal.portal_catalog.catalog_object(self.portal.foo2)\n \n-    def _assertTransformsTo(self, input, expected):\n+    def _assertTransformsTo(self, input, expected, parsing=True):\n         # compare two chunks of HTML ignoring whitespace differences,\n         # and with a useful diff on failure\n-        out = self.parser(input)\n+        if parsing:\n+            out = self.parser(input)\n+        else:\n+            out = input\n         normalized_out = normalize_html(out)\n         normalized_expected = normalize_html(expected)\n-        # print("e: {}".format(normalized_expected))\n-        # print("o: {}".format(normalized_out))\n+        print("e: {}".format(normalized_expected))\n+        print("o: {}".format(normalized_out))\n         try:\n             self.assertTrue(_ellipsis_match(normalized_expected,\n                                             normalized_out))\n@@ -327,10 +330,9 @@ def test_image_captioning_in_news_item(self):\n         news_item = self.portal[\'a-news-item\']\n         from plone.app.textfield.value import RichTextValue\n         news_item.text = RichTextValue(\n-            \'<span><picture class="captioned"><img src="image.jpg"/></picture></span>\',\n-            \'text/html\', \'text/x-html-safe\')\n+            \'<span><img class="captioned" src="image.jpg"/></span>\',\n+            \'text/html\', \'text/html\')\n         news_item.setDescription("Description.")\n-\n         # Test captioning\n         output = news_item.text.output\n         text_out = """<span><figure class="captioned">\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-08T16:09:28+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/bc7647b44b284a763a3259f9f9c1c9e494f78502

refacture use of Img2PictureTag/get_picture_variants, and fix tests

Files changed:
M plone/outputfilters/filters/picture_variants.py
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/filters/picture_variants.py b/plone/outputfilters/filters/picture_variants.py\nindex 36e62ff..935c3d2 100644\n--- a/plone/outputfilters/filters/picture_variants.py\n+++ b/plone/outputfilters/filters/picture_variants.py\n@@ -5,7 +5,7 @@\n from plone.outputfilters.interfaces import IFilter\n from Products.CMFPlone.utils import safe_nativestring\n from zope.interface import implementer\n-from plone.namedfile.picture import Img2PictureTag\n+from plone.namedfile.picture import Img2PictureTag, get_picture_variants\n \n logger = logging.getLogger("plone.outputfilter.picture_variants")\n \n@@ -45,7 +45,7 @@ def __call__(self, data):\n             picture_variant_name = elem.attrs.get("data-picturevariant", "")\n             if not picture_variant_name:\n                 continue\n-            picture_variants_config = self.img2picturetag.picture_variants.get(picture_variant_name)\n+            picture_variants_config = get_picture_variants().get(picture_variant_name)\n             if not picture_variants_config:\n                 logger.warn(\n                     "Could not find the given picture_variant_name {0}, leave tag untouched!".format(\ndiff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 36c194f..6ddd076 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -227,6 +227,8 @@ def __call__(self, data):\n                         captioned.a.unwrap()\n                     if elem.name == "picture":\n                         del captioned.picture.img["class"]\n+                    else:\n+                        del captioned.img["class"]\n                     elem.replace_with(captioned)\n \n         # # captioning must hapen before resolving uid\'s\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex 5724a6d..d0a5f3f 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -336,7 +336,7 @@ def test_image_captioning_in_news_item(self):\n         # Test captioning\n         output = news_item.text.output\n         text_out = """<span><figure class="captioned">\n-<img height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>\n </span>"""\n@@ -344,13 +344,13 @@ def test_image_captioning_in_news_item(self):\n \n     def test_image_captioning_absolutizes_uncaptioned_image(self):\n         text_in = """<img src="/image.jpg" />"""\n-        text_out = """<img alt="My caption" src="http://nohost/plone/image.jpg" title="Image"/>"""\n+        text_out = """<img alt="" src="http://nohost/plone/image.jpg" title="Image"/>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_absolute_path(self):\n         text_in = """<img class="captioned" src="/image.jpg"/>"""\n         text_out = """<figure class="captioned">\n-<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -358,7 +358,7 @@ def test_image_captioning_absolute_path(self):\n     def test_image_captioning_relative_path(self):\n         text_in = """<img class="captioned" src="./image.jpg"/>"""\n         text_out = """<figure class="captioned">\n-<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -379,7 +379,7 @@ def test_image_captioning_relative_path_private_folder(self):\n \n         text_in = """<img class="captioned" src="private/image.jpg"/>"""\n         text_out = """<figure class="captioned">\n-<img alt="My private image caption" height="331" src="http://nohost/plone/private/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/private/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My private image caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -387,7 +387,7 @@ def test_image_captioning_relative_path_private_folder(self):\n     def test_image_captioning_relative_path_scale(self):\n         text_in = """<img class="captioned" src="image.jpg/@@images/image/thumb"/>"""\n         text_out = """<figure class="captioned">\n-<a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/></a>\n+<img alt="" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -395,7 +395,7 @@ def test_image_captioning_relative_path_scale(self):\n     def test_image_captioning_resolveuid(self):\n         text_in = """<img class="captioned" src="resolveuid/%s"/>""" % self.UID\n         text_out = """<figure class="captioned">\n-<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -403,7 +403,7 @@ def test_image_captioning_resolveuid(self):\n     def test_image_captioning_resolveuid_scale(self):\n         text_in = """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>""" % self.UID\n         text_out = """<figure class="captioned">\n-<a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/></a>\n+<img alt="" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -411,7 +411,7 @@ def test_image_captioning_resolveuid_scale(self):\n     def test_image_captioning_resolveuid_new_scale(self):\n         text_in = """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>""" % self.UID\n         text_out = """<figure class="captioned">\n-<a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/></a>\n+<img alt="" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -419,13 +419,13 @@ def test_image_captioning_resolveuid_new_scale(self):\n     def test_image_captioning_resolveuid_new_scale_plone_namedfile(self):\n         self._makeDummyContent()\n         text_in = """<img class="captioned" src="resolveuid/foo2/@@images/image/thumb"/>"""\n-        text_out = u"""<img alt="Sch\xc3\xb6nes Bild" class="captioned" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild"/>"""\n+        text_out = u"""<img alt="" class="captioned" height="84" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild" width="128"/>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid_no_scale(self):\n         text_in = """<img class="captioned" src="resolveuid/%s/@@images/image"/>""" % self.UID\n         text_out = """<figure class="captioned">\n-<img alt="My caption" class="captioned" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -433,7 +433,7 @@ def test_image_captioning_resolveuid_no_scale(self):\n     def test_image_captioning_resolveuid_with_srcset_and_src(self):\n         text_in = """<img class="captioned" src="resolveuid/%s/@@images/image" srcset="resolveuid/%s/@@images/image 480w,resolveuid/%s/@@images/image 360w"/>""" % (self.UID, self.UID, self.UID)\n         text_out = """<figure class="captioned">\n-<img alt="My caption" class="captioned" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" srcset="http://nohost/plone/image.jpg/@@images/...jpeg 480w,http://nohost/plone/image.jpg/@@images/...jpeg 360w" title="Image" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" srcset="http://nohost/plone/image.jpg/@@images/...jpeg 480w,http://nohost/plone/image.jpg/@@images/...jpeg 360w" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -466,7 +466,7 @@ def test_source_resolveuid_srcset(self):\n     def test_image_captioning_resolveuid_no_scale_plone_namedfile(self):\n         self._makeDummyContent()\n         text_in = """<img class="captioned" src="resolveuid/foo2/@@images/image"/>"""\n-        text_out = u"""<img alt="Sch\xc3\xb6nes Bild" class="captioned" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild"/>"""\n+        text_out = u"""<img alt="" class="captioned" height="331" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild" width="500"/>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_bad_uid(self):\n@@ -488,7 +488,7 @@ def test_image_captioning_external_url(self):\n     def test_image_captioning_preserves_custom_attributes(self):\n         text_in = """<img class="captioned" width="42" height="42" foo="bar" src="image.jpg"/>"""\n         text_out = """<figure class="captioned">\n-<img alt="My caption" foo="bar" height="42" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="42"/>\n+<img alt="" foo="bar" height="42" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="42"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -504,7 +504,7 @@ def test_image_captioning_handles_unquoted_attributes(self):\n     def test_image_captioning_preserves_existing_links(self):\n         text_in = """<a href="/xyzzy" class="link"><img class="image-left captioned" src="image.jpg/@@images/image/thumb"/></a>"""\n         text_out = """<a class="link" href="/xyzzy"><figure class="image-left captioned">\n-<img alt="My caption" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/>\n+<img alt="" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>\n </a>"""\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-08T15:55:01+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.outputfilters/commit/c02dbb98de026ae07d58b8287b5463200b4a06c5

Fixed getting width and height for img with resolveuid without @@images.

Try @@images/image in that case.
Renamed test_image_captioning_resolveuid to test_image_captioning_resolveuid_bare so you can run this test on its own.

Files changed:
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 6ddd076..148471a 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -349,7 +349,11 @@ def traverse_path(base, path):\n         if obj is not None:\n             # resolved uid\n             fullimage = obj\n-            image = traverse_path(fullimage, subpath)\n+            image = None\n+            if not subpath:\n+                image = traverse_path(fullimage, "@@images/image")\n+            if image is None:\n+                image = traverse_path(fullimage, subpath)\n         elif \'/@@\' in subpath:\n             # split on view\n             pos = subpath.find(\'/@@\')\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex d0a5f3f..3331ffb 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -392,7 +392,7 @@ def test_image_captioning_relative_path_scale(self):\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n \n-    def test_image_captioning_resolveuid(self):\n+    def test_image_captioning_resolveuid_bare(self):\n         text_in = """<img class="captioned" src="resolveuid/%s"/>""" % self.UID\n         text_out = """<figure class="captioned">\n <img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-08T17:26:29+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/fc8cae069a32d938a069366f0ae7d95d89fb8a88

fix test_image_captioning_relative_path_private_folder

Files changed:
M plone/outputfilters/filters/resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 148471a..014cd14 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -181,7 +181,6 @@ def __call__(self, data):\n                 img_elem = elem.find("img")\n             else:\n                 img_elem = elem\n-\n             # handle src attribute\n             attributes = img_elem.attrs\n             src = attributes.get(\'src\', \'\')\n@@ -230,41 +229,6 @@ def __call__(self, data):\n                     else:\n                         del captioned.img["class"]\n                     elem.replace_with(captioned)\n-\n-        # # captioning must hapen before resolving uid\'s\n-        # for cap_elem in soup.find_all([\'picture\', \'img\']):\n-        #     if \'captioned\' in cap_elem.attrs.get(\'class\', []):\n-        #         if cap_elem.name == "picture":\n-        #             img_elem = cap_elem.find("img")\n-        #         else:\n-        #             img_elem = cap_elem\n-        #         attributes = img_elem.attrs\n-        #         src = attributes.get(\'src\', \'\')\n-        #         image, fullimage, src, description = self.resolve_image(src)\n-        #         attributes["src"] = src\n-        #         caption = description\n-        #         caption_manual_override = attributes.get("data-captiontext", "")\n-        #         if caption_manual_override:\n-        #             caption = caption_manual_override\n-        #         # Check if the image needs to be captioned\n-        #         if (self.captioned_images and caption):\n-        #             options = {}\n-        #             options["tag"] = cap_elem.prettify()\n-        #             options["caption"] = newline_to_br(html_quote(caption))\n-        #             options["class"] = \' \'.join(attributes[\'class\'])\n-        #             del attributes[\'class\']\n-        #             if cap_elem.name == "picture":\n-        #                 cap_elem.append(img_elem)\n-        #             captioned = BeautifulSoup(\n-        #                 self.captioned_image_template(**options), \'html.parser\')\n-\n-        #             # if we are a captioned image within a link, remove and occurrences\n-        #             # of a tags inside caption template to preserve the outer link\n-        #             if bool(cap_elem.find_parent(\'a\')) and bool(captioned.find(\'a\')):\n-        #                 captioned.a.unwrap()\n-        #             if cap_elem.name == "picture":\n-        #                 del captioned.picture.img["class"]\n-        #             cap_elem.replace_with(captioned)\n         return six.text_type(soup)\n \n     def resolve_scale_data(self, url):\n@@ -374,6 +338,10 @@ def traverse_path(base, path):\n                     if hasattr(aq_base(parent), \'tag\'):\n                         fullimage = parent\n                         break\n+            if not hasattr(image, "width"):\n+                image_scale = traverse_path(image, "@@images/image")\n+                if image_scale:\n+                    image = image_scale\n \n         if image is None:\n             return None, None, src, description\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-08T17:27:06+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/0ffd8535c21153b17f837e98d157f62a31c0a855

remove wrong tests, srcset is not allowed in video/audio

Files changed:
M plone/outputfilters/tests/test_resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex 3331ffb..51c32d2 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -453,16 +453,6 @@ def test_audio_resolveuid(self):\n         text_out = """<audio src="http://nohost/plone/image.jpg"></audio>"""\n         self._assertTransformsTo(text_in, text_out)\n \n-    def test_source_resolveuid(self):\n-        text_in = """<video><source src="resolveuid/%s"/></video>""" % self.UID\n-        text_out = """<video><source src="http://nohost/plone/image.jpg"/></video>"""\n-        self._assertTransformsTo(text_in, text_out)\n-\n-    def test_source_resolveuid_srcset(self):\n-        text_in = """<video><source mimetype="video/mp4" srcset="resolveuid/%s"/></video>""" % self.UID\n-        text_out = """<video><source mimetype="video/mp4" srcset="http://nohost/plone/image.jpg"/></video>"""\n-        self._assertTransformsTo(text_in, text_out)\n-\n     def test_image_captioning_resolveuid_no_scale_plone_namedfile(self):\n         self._makeDummyContent()\n         text_in = """<img class="captioned" src="resolveuid/foo2/@@images/image"/>"""\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-08T17:41:07+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/8e23b0a9097aad3d55887f0deb6797410ec95d54

fix test

Files changed:
M plone/outputfilters/README.rst
M plone/outputfilters/tests/test_resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/README.rst b/plone/outputfilters/README.rst\nindex 454b166..31342f9 100644\n--- a/plone/outputfilters/README.rst\n+++ b/plone/outputfilters/README.rst\n@@ -62,7 +62,7 @@ be applied::\n     >>> portal = layer[\'portal\']\n     >>> str(portal.portal_transforms.convertTo(\'text/x-html-safe\',\n     ...     \'test--test\', mimetype=\'text/html\', context=portal))\n-    \'test\xe2\x80\x94test\'\n+    \'test\xe2\x80\x94test\\n\'\n \n \n How it works\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex 51c32d2..89a42d9 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -344,7 +344,7 @@ def test_image_captioning_in_news_item(self):\n \n     def test_image_captioning_absolutizes_uncaptioned_image(self):\n         text_in = """<img src="/image.jpg" />"""\n-        text_out = """<img alt="" src="http://nohost/plone/image.jpg" title="Image"/>"""\n+        text_out = """<img alt="" height="331" src="http://nohost/plone/image.jpg" title="Image" width="500"/>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_absolute_path(self):\n@@ -356,7 +356,7 @@ def test_image_captioning_absolute_path(self):\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_relative_path(self):\n-        text_in = """<img class="captioned" src="./image.jpg"/>"""\n+        text_in = """<img class="captioned" src="image.jpg"/>"""\n         text_out = """<figure class="captioned">\n <img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n@@ -506,7 +506,7 @@ def test_image_captioning_handles_non_ascii(self):\n             u\'Kupu Test Image \\xe5\\xe4\\xf6\')\n         text_in = """<img class="captioned" src="image.jpg"/>"""\n         text_out = u"""<figure class="captioned">\n-<img alt="Kupu Test Image \\xe5\\xe4\\xf6" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Kupu Test Image \\xe5\\xe4\\xf6" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Kupu Test Image \\xe5\\xe4\\xf6" width="500"/>\n <figcaption class="image-caption">Kupu Test Image \\xe5\\xe4\\xf6</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-08T17:43:44+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/bf3670e6429446749fdba39b83405fbef982b5d9

fix last test

Files changed:
M plone/outputfilters/tests/test_resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex 89a42d9..f011457 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -344,7 +344,7 @@ def test_image_captioning_in_news_item(self):\n \n     def test_image_captioning_absolutizes_uncaptioned_image(self):\n         text_in = """<img src="/image.jpg" />"""\n-        text_out = """<img alt="" height="331" src="http://nohost/plone/image.jpg" title="Image" width="500"/>"""\n+        text_out = """<img alt="" height="331" src="http://nohost/plone/....jpg" title="Image" width="500"/>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_absolute_path(self):\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-08T17:46:23+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/283332a82f3c6e3cee011055651c4577bea5049c

fix it again ;)

Files changed:
M plone/outputfilters/tests/test_resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex f011457..411a74f 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -344,7 +344,7 @@ def test_image_captioning_in_news_item(self):\n \n     def test_image_captioning_absolutizes_uncaptioned_image(self):\n         text_in = """<img src="/image.jpg" />"""\n-        text_out = """<img alt="" height="331" src="http://nohost/plone/....jpg" title="Image" width="500"/>"""\n+        text_out = """<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/....jpeg" title="Image" width="500"/>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_absolute_path(self):\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-08T17:57:33+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/52a4650feb943c53d128b8779b683ad281ddd706

use plone.app.uuid.utils.uuidToObject, add dependency to plone.namedfile

Files changed:
M plone/outputfilters/filters/resolveuid_and_caption.py
M setup.py

b"diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 014cd14..b48c07d 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -6,7 +6,7 @@\n from bs4 import BeautifulSoup\n from DocumentTemplate.html_quote import html_quote\n from DocumentTemplate.DT_Var import newline_to_br\n-from plone.outputfilters.browser.resolveuid import uuidToObject\n+from plone.app.uuid.utils import uuidToObject\n from plone.outputfilters.interfaces import IFilter\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import IContentish\ndiff --git a/setup.py b/setup.py\nindex 4ad8816..27d151d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -66,6 +66,7 @@ def read(filename):\n         'Products.GenericSetup',\n         'Products.MimetypesRegistry',\n         'Products.PortalTransforms>=2.0',\n+        'plone.namedfile',\n         'setuptools',\n         'six',\n         'unidecode',\n"

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-08T17:02:36+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.outputfilters/commit/e434a29906819efa01d08865fbf54b026fec9e42

Add dependency on plone.app.uuid

Files changed:
M setup.py

b"diff --git a/setup.py b/setup.py\nindex 27d151d..8cecaca 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -67,6 +67,7 @@ def read(filename):\n         'Products.MimetypesRegistry',\n         'Products.PortalTransforms>=2.0',\n         'plone.namedfile',\n+        'plone.app.uuid',\n         'setuptools',\n         'six',\n         'unidecode',\n"

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-08T18:13:09+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/bfd44edf233e2bbaa40f1cb62537f0bb22090151

deactivate print statement

Files changed:
M plone/outputfilters/tests/test_picture_variants.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/tests/test_picture_variants.py b/plone/outputfilters/tests/test_picture_variants.py\nindex f5fc0fa..542c161 100644\n--- a/plone/outputfilters/tests/test_picture_variants.py\n+++ b/plone/outputfilters/tests/test_picture_variants.py\n@@ -78,8 +78,8 @@ def _assertTransformsTo(self, input, expected):\n         out = self.parser(input)\n         normalized_out = normalize_html(out)\n         normalized_expected = normalize_html(expected)\n-        print("\\n e: {}".format(expected))\n-        print("\\n o: {}".format(out))\n+        # print("\\n e: {}".format(expected))\n+        # print("\\n o: {}".format(out))\n         try:\n             self.assertTrue(_ellipsis_match(normalized_expected,\n                                             normalized_out))\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex 411a74f..b250951 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -81,8 +81,8 @@ def _assertTransformsTo(self, input, expected, parsing=True):\n             out = input\n         normalized_out = normalize_html(out)\n         normalized_expected = normalize_html(expected)\n-        print("e: {}".format(normalized_expected))\n-        print("o: {}".format(normalized_out))\n+        # print("e: {}".format(normalized_expected))\n+        # print("o: {}".format(normalized_out))\n         try:\n             self.assertTrue(_ellipsis_match(normalized_expected,\n                                             normalized_out))\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-08T18:13:19+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.outputfilters/commit/7b4a8f5bcb80936d7d122912c6753b97529446d4

Merge branch 'mrtango-image-sourcesets-filter' of https://github.com/plone/plone.outputfilters into mrtango-image-sourcesets-filter

Files changed:
M setup.py

b"diff --git a/setup.py b/setup.py\nindex 27d151d..8cecaca 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -67,6 +67,7 @@ def read(filename):\n         'Products.MimetypesRegistry',\n         'Products.PortalTransforms>=2.0',\n         'plone.namedfile',\n+        'plone.app.uuid',\n         'setuptools',\n         'six',\n         'unidecode',\n"

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-08T17:35:28+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.outputfilters/commit/6ee71503c52c422a795fba74625b46f3f6a553df

Add some deprecation warnings in resolveuid.

Other code should import from plone.app.uuid.utils.
Removed our tests for these functions: uuidToObject and uuidToURL.

Files changed:
M plone/outputfilters/browser/resolveuid.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py
M setup.py

b'diff --git a/plone/outputfilters/browser/resolveuid.py b/plone/outputfilters/browser/resolveuid.py\nindex e774de2..0022053 100644\n--- a/plone/outputfilters/browser/resolveuid.py\n+++ b/plone/outputfilters/browser/resolveuid.py\n@@ -1,47 +1,33 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_base\n+from plone.app.uuid.utils import uuidToURL\n+from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n from zExceptions import NotFound\n+from zope.component.hooks import getSite\n+from zope.deprecation import deprecate\n from zope.interface import implementer\n from zope.publisher.browser import BrowserView\n from zope.publisher.interfaces import IPublishTraverse\n \n+import zope.deferredimport\n \n-try:\n-    from zope.component.hooks import getSite\n-except ImportError:\n-    from zope.app.component.hooks import getSite\n \n-\n-def uuidToURL(uuid):\n-    """Resolves a UUID to a URL via the UID index of portal_catalog.\n-    """\n-    catalog = getToolByName(getSite(), \'portal_catalog\')\n-    res = catalog.unrestrictedSearchResults(UID=uuid)\n-    if res:\n-        return res[0].getURL()\n-\n-\n-def uuidToObject(uuid):\n-    """Resolves a UUID to an object via the UID index of portal_catalog.\n-    """\n-    catalog = getToolByName(getSite(), \'portal_catalog\')\n-    res = catalog.unrestrictedSearchResults(UID=uuid)\n-    if res:\n-        return res[0]._unrestrictedGetObject()\n+zope.deferredimport.initialize()\n+zope.deferredimport.deprecated(\n+    "Import from plone.app.uuid.utils instead",\n+    uuidToObject=\'plone.app.uuid:utils.uuidToObject\',\n+    # This does not seem to work, since we need it ourselves in this file:\n+    # uuidToURL=\'plone.app.uuid:utils.uuidToURL\',\n+)\n \n \n-try:\n-    from plone.uuid.interfaces import IUUID\n-except ImportError:\n-    def uuidFor(obj):\n-        return obj.UID()\n-else:\n-    def uuidFor(obj):\n-        uuid = IUUID(obj, None)\n-        if uuid is None and hasattr(aq_base(obj), \'UID\'):\n-            uuid = obj.UID()\n-        return uuid\n+@deprecate(\'uuidFor is no longer used and supported, will be removed in Plone 7.\')\n+def uuidFor(obj):\n+    uuid = IUUID(obj, None)\n+    if uuid is None and hasattr(aq_base(obj), \'UID\'):\n+        uuid = obj.UID()\n+    return uuid\n \n \n @implementer(IPublishTraverse)\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex b250951..2d2c344 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -303,27 +303,6 @@ def test_resolveuid_view_querystring(self):\n         self.assertEqual(\'http://nohost/plone/image.jpg?qs\',\n                          res.headers[\'location\'])\n \n-    def test_uuidToURL(self):\n-        from plone.outputfilters.browser.resolveuid import uuidToURL\n-        self.assertEqual(\'http://nohost/plone/image.jpg\',\n-                         uuidToURL(self.UID))\n-\n-    def test_uuidToObject(self):\n-        from plone.outputfilters.browser.resolveuid import uuidToObject\n-        self.assertTrue(self.portal[\'image.jpg\'].aq_base\n-                        is uuidToObject(self.UID).aq_base)\n-\n-    def test_uuidToURL_permission(self):\n-        from plone.outputfilters.browser.resolveuid import uuidToURL\n-        from plone.outputfilters.browser.resolveuid import uuidToObject\n-        self.portal.invokeFactory(\'Document\', id=\'page\', title=\'Page\')\n-        page = self.portal[\'page\']\n-        self.logout()\n-        self.assertEqual(\'http://nohost/plone/page\',\n-                         uuidToURL(page.UID()))\n-        self.assertTrue(page.aq_base\n-                        is uuidToObject(page.UID()).aq_base)\n-\n     def test_image_captioning_in_news_item(self):\n         # Create a news item with a relative unscaled image\n         self.portal.invokeFactory(\'News Item\', id=\'a-news-item\', title=\'Title\')\ndiff --git a/setup.py b/setup.py\nindex 8cecaca..17047da 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -73,6 +73,8 @@ def read(filename):\n         \'unidecode\',\n         \'beautifulsoup4\',\n         \'lxml\',\n+        \'zope.deferredimport\',\n+        \'zope.deprecation\',\n     ],\n     extras_require={\n         \'test\': [\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-10T01:18:12+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.outputfilters/commit/5f74d9bdee2329e2279dd108f68f7369566df11f

Revert "Add some deprecation warnings in resolveuid."

This reverts commit 6ee71503c52c422a795fba74625b46f3f6a553df.
It causes test failures in plone.restapi.

Also, we should test what happens in our own code when you are anonymous and we call `uuidToObject` on a uuid of a private object.
Actually, that seems to work, at least for a simple link, both with our version of this function and with the version from `plone.app.uuid`.
But I don't know why it works.

Files changed:
M plone/outputfilters/browser/resolveuid.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py
M setup.py

b'diff --git a/plone/outputfilters/browser/resolveuid.py b/plone/outputfilters/browser/resolveuid.py\nindex 0022053..e774de2 100644\n--- a/plone/outputfilters/browser/resolveuid.py\n+++ b/plone/outputfilters/browser/resolveuid.py\n@@ -1,33 +1,47 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_base\n-from plone.app.uuid.utils import uuidToURL\n-from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n from zExceptions import NotFound\n-from zope.component.hooks import getSite\n-from zope.deprecation import deprecate\n from zope.interface import implementer\n from zope.publisher.browser import BrowserView\n from zope.publisher.interfaces import IPublishTraverse\n \n-import zope.deferredimport\n \n+try:\n+    from zope.component.hooks import getSite\n+except ImportError:\n+    from zope.app.component.hooks import getSite\n \n-zope.deferredimport.initialize()\n-zope.deferredimport.deprecated(\n-    "Import from plone.app.uuid.utils instead",\n-    uuidToObject=\'plone.app.uuid:utils.uuidToObject\',\n-    # This does not seem to work, since we need it ourselves in this file:\n-    # uuidToURL=\'plone.app.uuid:utils.uuidToURL\',\n-)\n+\n+def uuidToURL(uuid):\n+    """Resolves a UUID to a URL via the UID index of portal_catalog.\n+    """\n+    catalog = getToolByName(getSite(), \'portal_catalog\')\n+    res = catalog.unrestrictedSearchResults(UID=uuid)\n+    if res:\n+        return res[0].getURL()\n+\n+\n+def uuidToObject(uuid):\n+    """Resolves a UUID to an object via the UID index of portal_catalog.\n+    """\n+    catalog = getToolByName(getSite(), \'portal_catalog\')\n+    res = catalog.unrestrictedSearchResults(UID=uuid)\n+    if res:\n+        return res[0]._unrestrictedGetObject()\n \n \n-@deprecate(\'uuidFor is no longer used and supported, will be removed in Plone 7.\')\n-def uuidFor(obj):\n-    uuid = IUUID(obj, None)\n-    if uuid is None and hasattr(aq_base(obj), \'UID\'):\n-        uuid = obj.UID()\n-    return uuid\n+try:\n+    from plone.uuid.interfaces import IUUID\n+except ImportError:\n+    def uuidFor(obj):\n+        return obj.UID()\n+else:\n+    def uuidFor(obj):\n+        uuid = IUUID(obj, None)\n+        if uuid is None and hasattr(aq_base(obj), \'UID\'):\n+            uuid = obj.UID()\n+        return uuid\n \n \n @implementer(IPublishTraverse)\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex 2d2c344..b250951 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -303,6 +303,27 @@ def test_resolveuid_view_querystring(self):\n         self.assertEqual(\'http://nohost/plone/image.jpg?qs\',\n                          res.headers[\'location\'])\n \n+    def test_uuidToURL(self):\n+        from plone.outputfilters.browser.resolveuid import uuidToURL\n+        self.assertEqual(\'http://nohost/plone/image.jpg\',\n+                         uuidToURL(self.UID))\n+\n+    def test_uuidToObject(self):\n+        from plone.outputfilters.browser.resolveuid import uuidToObject\n+        self.assertTrue(self.portal[\'image.jpg\'].aq_base\n+                        is uuidToObject(self.UID).aq_base)\n+\n+    def test_uuidToURL_permission(self):\n+        from plone.outputfilters.browser.resolveuid import uuidToURL\n+        from plone.outputfilters.browser.resolveuid import uuidToObject\n+        self.portal.invokeFactory(\'Document\', id=\'page\', title=\'Page\')\n+        page = self.portal[\'page\']\n+        self.logout()\n+        self.assertEqual(\'http://nohost/plone/page\',\n+                         uuidToURL(page.UID()))\n+        self.assertTrue(page.aq_base\n+                        is uuidToObject(page.UID()).aq_base)\n+\n     def test_image_captioning_in_news_item(self):\n         # Create a news item with a relative unscaled image\n         self.portal.invokeFactory(\'News Item\', id=\'a-news-item\', title=\'Title\')\ndiff --git a/setup.py b/setup.py\nindex 17047da..8cecaca 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -73,8 +73,6 @@ def read(filename):\n         \'unidecode\',\n         \'beautifulsoup4\',\n         \'lxml\',\n-        \'zope.deferredimport\',\n-        \'zope.deprecation\',\n     ],\n     extras_require={\n         \'test\': [\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-10T01:25:22+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.outputfilters/commit/99f0203c62f5755bfa240e9e7e0c3958b0a85c75

Do add deprecation warnings for our own uuidToObject and uuidToURL.

Files changed:
M plone/outputfilters/browser/resolveuid.py
M setup.py

b'diff --git a/plone/outputfilters/browser/resolveuid.py b/plone/outputfilters/browser/resolveuid.py\nindex e774de2..7883fd1 100644\n--- a/plone/outputfilters/browser/resolveuid.py\n+++ b/plone/outputfilters/browser/resolveuid.py\n@@ -2,6 +2,7 @@\n from Acquisition import aq_base\n from Products.CMFCore.utils import getToolByName\n from zExceptions import NotFound\n+from zope.deprecation import deprecate\n from zope.interface import implementer\n from zope.publisher.browser import BrowserView\n from zope.publisher.interfaces import IPublishTraverse\n@@ -13,6 +14,7 @@\n     from zope.app.component.hooks import getSite\n \n \n+@deprecate("Please use plone.app.uuid.utils.uuidToURL instead.")\n def uuidToURL(uuid):\n     """Resolves a UUID to a URL via the UID index of portal_catalog.\n     """\n@@ -22,6 +24,10 @@ def uuidToURL(uuid):\n         return res[0].getURL()\n \n \n+@deprecate(\n+    "Please use plone.app.uuid.utils.uuidToObject instead. "\n+    "But be aware that this does an extra security check."\n+)\n def uuidToObject(uuid):\n     """Resolves a UUID to an object via the UID index of portal_catalog.\n     """\ndiff --git a/setup.py b/setup.py\nindex 8cecaca..052dc3f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -71,6 +71,7 @@ def read(filename):\n         \'setuptools\',\n         \'six\',\n         \'unidecode\',\n+        \'zope.deprecation\',\n         \'beautifulsoup4\',\n         \'lxml\',\n     ],\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-10T13:36:13+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.outputfilters/commit/10651b93d002e9a9fa26faab93c1ab678e4eeaa8

Removed _shorttag_replace from picture_variants filter.

This was copied from the resolve_uid_and_caption filter, but was missing the singleton_tags definition.

I don't think it is needed in resolve_uid_and_caption either.
It is meant to replace singleton tags without any content which should not be singleton tags.
For example change `&lt;p /&gt;` into `&lt;p&gt;&lt;/p&gt;`.
But beautifulsoup is already doing that for us:

```
&gt;&gt;&gt; print(BeautifulSoup("&lt;p /&gt;", "html.parser"))
&lt;p&gt;&lt;/p&gt;
```

Cleanup (plus possibly adding a test) can be done later, to not overfill this PR.

Files changed:
M plone/outputfilters/filters/picture_variants.py

b'diff --git a/plone/outputfilters/filters/picture_variants.py b/plone/outputfilters/filters/picture_variants.py\nindex 935c3d2..d3d2bb6 100644\n--- a/plone/outputfilters/filters/picture_variants.py\n+++ b/plone/outputfilters/filters/picture_variants.py\n@@ -1,5 +1,4 @@\n import logging\n-import re\n \n from bs4 import BeautifulSoup\n from plone.outputfilters.interfaces import IFilter\n@@ -17,13 +16,6 @@ class PictureVariantsFilter(object):\n \n     order = 700\n \n-    def _shorttag_replace(self, match):\n-        tag = match.group(1)\n-        if tag in self.singleton_tags:\n-            return "<" + tag + " />"\n-        else:\n-            return "<" + tag + "></" + tag + ">"\n-\n     def is_enabled(self):\n         if self.context is None:\n             return False\n@@ -38,7 +30,6 @@ def __init__(self, context=None, request=None):\n \n \n     def __call__(self, data):\n-        data = re.sub(r"<([^<>\\s]+?)\\s*/>", self._shorttag_replace, data)\n         soup = BeautifulSoup(safe_nativestring(data), "html.parser")\n \n         for elem in soup.find_all("img"):\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-10T17:27:28+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.outputfilters/commit/73af19d15cb1eaae72143bcd454cdc129eeed0a1

Use our own version of uuidToObject.

The one from plone.app.uuid does an extra security check.
We *should* be using that one, instead of having our own slightly different copy.
But let's do that in a later PR, where we can focus on what might possibly break because of this.
See https://github.com/plone/plone.outputfilters/issues/52

Files changed:
M plone/outputfilters/filters/resolveuid_and_caption.py

b'diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex b48c07d..014cd14 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -6,7 +6,7 @@\n from bs4 import BeautifulSoup\n from DocumentTemplate.html_quote import html_quote\n from DocumentTemplate.DT_Var import newline_to_br\n-from plone.app.uuid.utils import uuidToObject\n+from plone.outputfilters.browser.resolveuid import uuidToObject\n from plone.outputfilters.interfaces import IFilter\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import IContentish\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-16T14:21:48+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.outputfilters/commit/397c7e74f34c1c2426231049a67f26b811c1b4da

fix test

Files changed:
M plone/outputfilters/tests/test_picture_variants.py

b'diff --git a/plone/outputfilters/tests/test_picture_variants.py b/plone/outputfilters/tests/test_picture_variants.py\nindex 542c161..2307eef 100644\n--- a/plone/outputfilters/tests/test_picture_variants.py\n+++ b/plone/outputfilters/tests/test_picture_variants.py\n@@ -173,7 +173,7 @@ def test_parsing_long_doc(self):\n <p class="discreet">\n     <picture>\n         <source\n-            srcset="resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/larger 1000w"/>\n+            srcset="resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/larger 1000w"/>\n         <img alt="" class="image-richtext image-inline image-size-small" data-linktype="image"\n             data-picturevariant="small" data-scale="preview" data-val="{uid}" loading="lazy"\n             src="resolveuid/{uid}/@@images/image/preview"/>\n'

Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2022-06-16T18:53:51+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.outputfilters/commit/f28f92e73546dd6ec2e32561df2c04305f91e7dd

Merge pull request #49 from plone/mrtango-image-sourcesets-filter

Add image sourcesets filter

Files changed:
A news/49.feature
A plone/outputfilters/filters/picture_variants.py
A plone/outputfilters/tests/test_picture_variants.py
M plone/outputfilters/README.rst
M plone/outputfilters/browser/captioned_image.pt
M plone/outputfilters/browser/resolveuid.py
M plone/outputfilters/filters/configure.zcml
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py
M setup.py

b'diff --git a/news/49.feature b/news/49.feature\nnew file mode 100644\nindex 0000000..ce4f04b\n--- /dev/null\n+++ b/news/49.feature\n@@ -0,0 +1 @@\n+Add image_srcset output filter, to convert IMG tags into PICTURE tags with multiple source definitions as define in imaging control panel [MrTango]\n\\ No newline at end of file\ndiff --git a/plone/outputfilters/README.rst b/plone/outputfilters/README.rst\nindex 454b166..31342f9 100644\n--- a/plone/outputfilters/README.rst\n+++ b/plone/outputfilters/README.rst\n@@ -62,7 +62,7 @@ be applied::\n     >>> portal = layer[\'portal\']\n     >>> str(portal.portal_transforms.convertTo(\'text/x-html-safe\',\n     ...     \'test--test\', mimetype=\'text/html\', context=portal))\n-    \'test\xe2\x80\x94test\'\n+    \'test\xe2\x80\x94test\\n\'\n \n \n How it works\ndiff --git a/plone/outputfilters/browser/captioned_image.pt b/plone/outputfilters/browser/captioned_image.pt\nindex 8f4a9a8..637ba2a 100644\n--- a/plone/outputfilters/browser/captioned_image.pt\n+++ b/plone/outputfilters/browser/captioned_image.pt\n@@ -1,6 +1,4 @@\n <figure tal:attributes="class options/class;">\n-  <a tal:omit-tag="options/isfullsize" rel="lightbox"\n-      tal:attributes="href options/url_path;"\n-      tal:content="structure options/tag">[image goes here]</a>\n+  <picture tal:replace="structure options/tag"></picture>\n   <figcaption class="image-caption" tal:content="options/caption|nothing"></figcaption>\n </figure>\ndiff --git a/plone/outputfilters/browser/resolveuid.py b/plone/outputfilters/browser/resolveuid.py\nindex e774de2..7883fd1 100644\n--- a/plone/outputfilters/browser/resolveuid.py\n+++ b/plone/outputfilters/browser/resolveuid.py\n@@ -2,6 +2,7 @@\n from Acquisition import aq_base\n from Products.CMFCore.utils import getToolByName\n from zExceptions import NotFound\n+from zope.deprecation import deprecate\n from zope.interface import implementer\n from zope.publisher.browser import BrowserView\n from zope.publisher.interfaces import IPublishTraverse\n@@ -13,6 +14,7 @@\n     from zope.app.component.hooks import getSite\n \n \n+@deprecate("Please use plone.app.uuid.utils.uuidToURL instead.")\n def uuidToURL(uuid):\n     """Resolves a UUID to a URL via the UID index of portal_catalog.\n     """\n@@ -22,6 +24,10 @@ def uuidToURL(uuid):\n         return res[0].getURL()\n \n \n+@deprecate(\n+    "Please use plone.app.uuid.utils.uuidToObject instead. "\n+    "But be aware that this does an extra security check."\n+)\n def uuidToObject(uuid):\n     """Resolves a UUID to an object via the UID index of portal_catalog.\n     """\ndiff --git a/plone/outputfilters/filters/configure.zcml b/plone/outputfilters/filters/configure.zcml\nindex 19ef066..4376517 100644\n--- a/plone/outputfilters/filters/configure.zcml\n+++ b/plone/outputfilters/filters/configure.zcml\n@@ -3,6 +3,13 @@\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:browser="http://namespaces.zope.org/browser">\n \n+  <adapter\n+    provides="..interfaces.IFilter"\n+    name="picture_variants"\n+    for="* *"\n+    factory=".picture_variants.PictureVariantsFilter"\n+    />\n+\n   <adapter\n     provides="..interfaces.IFilter"\n     name="resolveuid_and_caption"\ndiff --git a/plone/outputfilters/filters/picture_variants.py b/plone/outputfilters/filters/picture_variants.py\nnew file mode 100644\nindex 0000000..d3d2bb6\n--- /dev/null\n+++ b/plone/outputfilters/filters/picture_variants.py\n@@ -0,0 +1,51 @@\n+import logging\n+\n+from bs4 import BeautifulSoup\n+from plone.outputfilters.interfaces import IFilter\n+from Products.CMFPlone.utils import safe_nativestring\n+from zope.interface import implementer\n+from plone.namedfile.picture import Img2PictureTag, get_picture_variants\n+\n+logger = logging.getLogger("plone.outputfilter.picture_variants")\n+\n+\n+@implementer(IFilter)\n+class PictureVariantsFilter(object):\n+    """Converts img tags with a data-picturevariant attribute into picture/source tag\'s with srcset definitions.\n+    """\n+\n+    order = 700\n+\n+    def is_enabled(self):\n+        if self.context is None:\n+            return False\n+        else:\n+            return True\n+\n+    def __init__(self, context=None, request=None):\n+        self.current_status = None\n+        self.context = context\n+        self.request = request\n+        self.img2picturetag = Img2PictureTag()\n+\n+\n+    def __call__(self, data):\n+        soup = BeautifulSoup(safe_nativestring(data), "html.parser")\n+\n+        for elem in soup.find_all("img"):\n+            picture_variant_name = elem.attrs.get("data-picturevariant", "")\n+            if not picture_variant_name:\n+                continue\n+            picture_variants_config = get_picture_variants().get(picture_variant_name)\n+            if not picture_variants_config:\n+                logger.warn(\n+                    "Could not find the given picture_variant_name {0}, leave tag untouched!".format(\n+                        picture_variant_name\n+                    )\n+                )\n+                continue\n+            sourceset = picture_variants_config.get("sourceset")\n+            if not sourceset:\n+                continue\n+            elem.replace_with(self.img2picturetag.create_picture_tag(sourceset, elem.attrs))\n+        return soup.prettify()\ndiff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py\nindex 935c926..014cd14 100644\n--- a/plone/outputfilters/filters/resolveuid_and_caption.py\n+++ b/plone/outputfilters/filters/resolveuid_and_caption.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_acquire\n from Acquisition import aq_base\n+from Acquisition import aq_inner\n from Acquisition import aq_parent\n from bs4 import BeautifulSoup\n from DocumentTemplate.html_quote import html_quote\n@@ -29,13 +30,6 @@\n import six\n \n \n-HAS_LINGUAPLONE = True\n-try:\n-    from Products.LinguaPlone.utils import translated_references\n-except ImportError:\n-    HAS_LINGUAPLONE = False\n-\n-\n appendix_re = re.compile(\'^(.*)([?#].*)$\')\n resolveuid_re = re.compile(\'^[./]*resolve[Uu]id/([^/]*)/?(.*)$\')\n \n@@ -146,7 +140,6 @@ def _render_resolveuid(self, href):\n     def __call__(self, data):\n         data = re.sub(r\'<([^<>\\s]+?)\\s*/>\', self._shorttag_replace, data)\n         soup = BeautifulSoup(safe_unicode(data), \'html.parser\')\n-\n         for elem in soup.find_all([\'a\', \'area\']):\n             attributes = elem.attrs\n             href = attributes.get(\'href\')\n@@ -159,8 +152,9 @@ def __call__(self, data):\n                     and not href.startswith(\'#\'):\n                 attributes[\'href\'] = self._render_resolveuid(href)\n         for elem in soup.find_all([\'source\', \'img\']):\n-            # SOURCE is used for video and audio.\n-            # SRCSET specified multiple images (see below).\n+            # handles srcset attributes, not src\n+            # parent of SOURCE is picture here.\n+            # SRCSET on source/img specifies one or more images (see below).\n             attributes = elem.attrs\n             srcset = attributes.get(\'srcset\')\n             if not srcset:\n@@ -169,10 +163,12 @@ def __call__(self, data):\n             # [(src1, 480w), (src2, 360w)]\n             srcs = [src.strip().split() for src in srcset.strip().split(\',\') if src.strip()]\n             for idx, elm in enumerate(srcs):\n-                srcs[idx][0] = self._render_resolveuid(elm[0])\n+                image_url = elm[0]\n+                image, fullimage, src, description = self.resolve_image(image_url)\n+                srcs[idx][0] = src\n             attributes[\'srcset\'] = \',\'.join(\' \'.join(src) for src in srcs)\n         for elem in soup.find_all([\'source\', \'iframe\', \'audio\', \'video\']):\n-            # SOURCE is used for video and audio.\n+            # parent of SOURCE is video or audio here.\n             # AUDIO/VIDEO can also have src attribute.\n             # IFRAME is used to embed PDFs.\n             attributes = elem.attrs\n@@ -180,42 +176,70 @@ def __call__(self, data):\n             if not src:\n                 continue\n             attributes[\'src\'] = self._render_resolveuid(src)\n-        for elem in soup.find_all(\'img\'):\n-            attributes = elem.attrs\n+        for elem in soup.find_all([\'img\', \'picture\']):\n+            if elem.name == "picture":\n+                img_elem = elem.find("img")\n+            else:\n+                img_elem = elem\n+            # handle src attribute\n+            attributes = img_elem.attrs\n             src = attributes.get(\'src\', \'\')\n             image, fullimage, src, description = self.resolve_image(src)\n             attributes["src"] = src\n-\n+            if image and hasattr(image, "width"):\n+                if "width" not in attributes:\n+                    attributes["width"] = image.width\n+                if "height" not in attributes:\n+                    attributes["height"] = image.height\n             if fullimage is not None:\n                 # Check to see if the alt / title tags need setting\n                 title = safe_unicode(aq_acquire(fullimage, \'Title\')())\n                 if not attributes.get(\'alt\'):\n-                    # XXX alt attribute contains *alternate* text\n-                    attributes[\'alt\'] = description or title\n+                    # bettr an emty alt tag than none. This avoid\'s screen readers\n+                    # to read the file name instead. A better fallback would be\n+                    # a fallback alt text comming from the img object.\n+                    attributes[\'alt\'] = ""\n                 if \'title\' not in attributes:\n                     attributes[\'title\'] = title\n \n-            caption = description\n-            # Check if the image needs to be captioned\n-            if (\n-                self.captioned_images and\n-                image is not None and\n-                caption and\n-                \'captioned\' in attributes.get(\'class\', [])\n-            ):\n-                self.handle_captioned_image(\n-                    attributes, image, fullimage, elem, caption)\n+            # handle captions\n+            if \'captioned\' in elem.attrs.get(\'class\', []):\n+                caption = description\n+                caption_manual_override = attributes.get("data-captiontext", "")\n+                if caption_manual_override:\n+                    caption = caption_manual_override\n+                # Check if the image needs to be captioned\n+                if (self.captioned_images and caption):\n+                    options = {}\n+                    options["tag"] = elem.prettify()\n+                    options["caption"] = newline_to_br(html_quote(caption))\n+                    options["class"] = \' \'.join(attributes[\'class\'])\n+                    del attributes[\'class\']\n+                    if elem.name == "picture":\n+                        elem.append(img_elem)\n+                    captioned = BeautifulSoup(\n+                        self.captioned_image_template(**options), \'html.parser\')\n+\n+                    # if we are a captioned image within a link, remove and occurrences\n+                    # of a tags inside caption template to preserve the outer link\n+                    if bool(elem.find_parent(\'a\')) and bool(captioned.find(\'a\')):\n+                        captioned.a.unwrap()\n+                    if elem.name == "picture":\n+                        del captioned.picture.img["class"]\n+                    else:\n+                        del captioned.img["class"]\n+                    elem.replace_with(captioned)\n         return six.text_type(soup)\n \n-    def lookup_uid(self, uid):\n-        context = self.context\n-        if HAS_LINGUAPLONE:\n-            # If we have LinguaPlone installed, add support for language-aware\n-            # references\n-            uids = translated_references(context, context.Language(), uid)\n-            if len(uids) > 0:\n-                uid = uids[0]\n-        return uuidToObject(uid)\n+    def resolve_scale_data(self, url):\n+        """ return scale url, width and height\n+        """\n+        url_parts = url.split("/")\n+        field_name = url_parts[-2]\n+        scale_name = url_parts[-1]\n+        obj, subpath, appendix = self.resolve_link(url)\n+        scale_view = obj.unrestrictedTraverse(\'@@images\', None)\n+        return scale_view.scale(field_name, scale_name, pre=True)\n \n     def resolve_link(self, href):\n         obj = None\n@@ -231,7 +255,7 @@ def resolve_link(self, href):\n             match = resolveuid_re.match(subpath)\n             if match is not None:\n                 uid, _subpath = match.groups()\n-                obj = self.lookup_uid(uid)\n+                obj = uuidToObject(uid)\n                 if obj is not None:\n                     subpath = _subpath\n \n@@ -242,7 +266,6 @@ def resolve_image(self, src):\n         if urlsplit(src)[0]:\n             # We have a scheme\n             return None, None, src, description\n-\n         base = self.context\n         subpath = src\n         appendix = \'\'\n@@ -254,14 +277,15 @@ def traversal_stack(base, path):\n             obj = base\n             stack = [obj]\n             components = path.split(\'/\')\n+            # print("components: {}".format(components))\n             while components:\n                 child_id = unquote(components.pop(0))\n                 try:\n                     if hasattr(aq_base(obj), \'scale\'):\n                         if components:\n-                            child = obj.scale(child_id, components.pop())\n+                            child = obj.scale(child_id, components.pop(), pre=True)\n                         else:\n-                            child = obj.scale(child_id)\n+                            child = obj.scale(child_id, pre=True)\n                     else:\n                         # Do not use restrictedTraverse here; the path to the\n                         # image may lead over containers that lack the View\n@@ -276,6 +300,7 @@ def traversal_stack(base, path):\n                     return\n                 obj = child\n                 stack.append(obj)\n+            # print(f"traversal_stack: {stack}")\n             return stack\n \n         def traverse_path(base, path):\n@@ -288,7 +313,11 @@ def traverse_path(base, path):\n         if obj is not None:\n             # resolved uid\n             fullimage = obj\n-            image = traverse_path(fullimage, subpath)\n+            image = None\n+            if not subpath:\n+                image = traverse_path(fullimage, "@@images/image")\n+            if image is None:\n+                image = traverse_path(fullimage, subpath)\n         elif \'/@@\' in subpath:\n             # split on view\n             pos = subpath.find(\'/@@\')\n@@ -309,10 +338,13 @@ def traverse_path(base, path):\n                     if hasattr(aq_base(parent), \'tag\'):\n                         fullimage = parent\n                         break\n+            if not hasattr(image, "width"):\n+                image_scale = traverse_path(image, "@@images/image")\n+                if image_scale:\n+                    image = image_scale\n \n         if image is None:\n             return None, None, src, description\n-\n         try:\n             url = image.absolute_url()\n         except AttributeError:\n@@ -320,58 +352,3 @@ def traverse_path(base, path):\n         src = url + appendix\n         description = safe_unicode(aq_acquire(fullimage, \'Description\')())\n         return image, fullimage, src, description\n-\n-    def handle_captioned_image(self, attributes, image, fullimage,\n-                               elem, caption):\n-        """Handle captioned image.\n-\n-        The img element is replaced by a definition list\n-        as created by the template ../browser/captioned_image.pt\n-        """\n-        klass = \' \'.join(attributes[\'class\'])\n-        del attributes[\'class\']\n-        del attributes[\'src\']\n-        if \'width\' in attributes and attributes[\'width\']:\n-            attributes[\'width\'] = int(attributes[\'width\'])\n-        if \'height\' in attributes and attributes[\'height\']:\n-            attributes[\'height\'] = int(attributes[\'height\'])\n-        view = fullimage.unrestrictedTraverse(\'@@images\', None)\n-        if view is not None:\n-            original_width, original_height = view.getImageSize()\n-        else:\n-            original_width, original_height = fullimage.width, fullimage.height\n-        if image is not fullimage:\n-            # image is a scale object\n-            tag = image.tag\n-            width = image.width\n-        else:\n-            if hasattr(aq_base(image), \'tag\'):\n-                tag = image.tag\n-            else:\n-                tag = view.scale().tag\n-            width = original_width\n-        options = {\n-            \'class\': klass,\n-            \'originalwidth\': attributes.get(\'width\', None),\n-            \'originalalt\': attributes.get(\'alt\', None),\n-            \'url_path\': fullimage.absolute_url_path(),\n-            \'caption\': newline_to_br(html_quote(caption)),\n-            \'image\': image,\n-            \'fullimage\': fullimage,\n-            \'tag\': tag(**attributes),\n-            \'isfullsize\': image is fullimage or (\n-                image.width == original_width and\n-                image.height == original_height),\n-            \'width\': attributes.get(\'width\', width),\n-        }\n-\n-        captioned = BeautifulSoup(\n-            self.captioned_image_template(**options), \'html.parser\')\n-\n-        # if we are a captioned image within a link, remove and occurrences\n-        # of a tags inside caption template to preserve the outer link\n-        if bool(elem.find_parent(\'a\')) and \\\n-           bool(captioned.find(\'a\')):\n-            captioned.a.unwrap()\n-\n-        elem.replace_with(captioned)\ndiff --git a/plone/outputfilters/tests/test_picture_variants.py b/plone/outputfilters/tests/test_picture_variants.py\nnew file mode 100644\nindex 0000000..2307eef\n--- /dev/null\n+++ b/plone/outputfilters/tests/test_picture_variants.py\n@@ -0,0 +1,248 @@\n+# -*- coding: utf-8 -*-\n+from doctest import _ellipsis_match\n+from doctest import OutputChecker\n+from doctest import REPORT_NDIFF\n+from os.path import abspath\n+from os.path import dirname\n+from os.path import join\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing.bbb import PloneTestCase\n+from plone.namedfile.file import NamedBlobImage\n+from plone.namedfile.file import NamedImage\n+from plone.namedfile.tests.test_scaling import DummyContent as NFDummyContent\n+from plone.outputfilters.filters.picture_variants import PictureVariantsFilter\n+from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n+from Products.PortalTransforms.tests.utils import normalize_html\n+\n+\n+PREFIX = abspath(dirname(__file__))\n+\n+\n+def dummy_image():\n+    filename = join(PREFIX, u\'image.jpg\')\n+    data = None\n+    with open(filename, \'rb\') as fd:\n+        data = fd.read()\n+        fd.close()\n+    return NamedBlobImage(data=data, filename=filename)\n+\n+\n+class PictureVariantsFilterIntegrationTestCase(PloneTestCase):\n+\n+    layer = PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING\n+\n+    image_id = \'image.jpg\'\n+\n+    def _makeParser(self, **kw):\n+        parser = PictureVariantsFilter(context=self.portal)\n+        for k, v in kw.items():\n+            setattr(parser, k, v)\n+        return parser\n+\n+    def _makeDummyContent(self):\n+        from OFS.SimpleItem import SimpleItem\n+\n+        class DummyContent(SimpleItem):\n+\n+            def __init__(self, id):\n+                self.id = id\n+\n+            def UID(self):\n+                return \'foo\'\n+\n+            allowedRolesAndUsers = (\'Anonymous\',)\n+\n+        class DummyContent2(NFDummyContent):\n+            id = __name__ = \'foo2\'\n+            title = u\'Sch\xc3\xb6nes Bild\'\n+\n+            def UID(self):\n+                return \'foo2\'\n+\n+        dummy = DummyContent(\'foo\')\n+        self.portal._setObject(\'foo\', dummy)\n+        self.portal.portal_catalog.catalog_object(self.portal.foo)\n+\n+        dummy2 = DummyContent2(\'foo2\')\n+        with open(join(PREFIX, self.image_id), \'rb\') as fd:\n+            data = fd.read()\n+            fd.close()\n+        dummy2.image = NamedImage(data, \'image/jpeg\', u\'image.jpeg\')\n+        self.portal._setObject(\'foo2\', dummy2)\n+        self.portal.portal_catalog.catalog_object(self.portal.foo2)\n+\n+    def _assertTransformsTo(self, input, expected):\n+        # compare two chunks of HTML ignoring whitespace differences,\n+        # and with a useful diff on failure\n+        out = self.parser(input)\n+        normalized_out = normalize_html(out)\n+        normalized_expected = normalize_html(expected)\n+        # print("\\n e: {}".format(expected))\n+        # print("\\n o: {}".format(out))\n+        try:\n+            self.assertTrue(_ellipsis_match(normalized_expected,\n+                                            normalized_out))\n+        except AssertionError:\n+            class wrapper(object):\n+                want = expected\n+            raise AssertionError(self.outputchecker.output_difference(\n+                wrapper, out, REPORT_NDIFF))\n+\n+    def afterSetUp(self):\n+        # create an image and record its UID\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+\n+        if self.image_id not in self.portal:\n+            self.portal.invokeFactory(\n+                \'Image\', id=self.image_id, title=\'Image\')\n+        image = self.portal[self.image_id]\n+        image.setDescription(\'My caption\')\n+        image.image = dummy_image()\n+        image.reindexObject()\n+        self.UID = image.UID()\n+        self.parser = self._makeParser(captioned_images=True,\n+                                       resolve_uids=True)\n+        assert self.parser.is_enabled()\n+\n+        self.outputchecker = OutputChecker()\n+\n+    def beforeTearDown(self):\n+        self.login()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        del self.portal[self.image_id]\n+\n+    def test_parsing_minimal(self):\n+        text = """<div>\n+ Some simple text.\n+</div>"""\n+        res = self.parser(text)\n+        self.assertEqual(text, str(res))\n+\n+    def test_parsing_long_doc(self):\n+        text = """<h1>Welcome!</h1>\n+<p class="discreet">If you\'re seeing this instead of the web site you were expecting, the owner of this web site has\n+    just installed Plone. Do not contact the Plone Team or the Plone support channels about this.</p>\n+<p class="discreet"><img class="image-richtext image-inline image-size-small"\n+        src="resolveuid/{uid}/@@images/image/preview" alt="" data-linktype="image" data-picturevariant="small"\n+        data-scale="preview" data-val="{uid}" /></p>\n+<h2>Get started</h2>\n+<p>Before you start exploring your newly created Plone site, please do the following:</p>\n+<ol>\n+    <li>Make sure you are logged in as an admin/manager user. <span class="discreet">(You should have a Site Setup entry\n+            in the user menu)</span></li>\n+</ol>\n+<h2>Get comfortable</h2>\n+<p>After that, we suggest you do one or more of the following:</p>\n+<p><img class="image-richtext image-left image-size-medium captioned zoomable"\n+        src="resolveuid/{uid}/@@images/image/larger" alt="" data-linktype="image" data-picturevariant="medium"\n+        data-scale="larger" data-val="{uid}" /></p>\n+<h2>Make it your own</h2>\n+<p>Plone has a lot of different settings that can be used to make it do what you want it to. Some examples:</p>\n+<h2>Tell us how you use it</h2>\n+<p>Are you doing something interesting with Plone? Big site deployments, interesting use cases? Do you have a company\n+    that delivers Plone-based solutions?</p>\n+<h2>Find out more about Plone</h2>\n+<p class="discreet"><img class="image-richtext image-right image-size-large" src="resolveuid/{uid}/@@images/image/huge"\n+        alt="" data-linktype="image" data-picturevariant="large" data-scale="huge" data-val="{uid}" /></p>\n+<p>Plone is a powerful content management system built on a rock-solid application stack written using the Python\n+    programming language. More about these technologies:</p>\n+<h2><img class="image-richtext image-inline image-size-large" src="resolveuid/{uid}/@@images/image/huge" alt=""\n+        data-linktype="image" data-picturevariant="large" data-scale="huge" data-val="{uid}" /></h2>\n+<h2>Support the Plone Foundation</h2>\n+<p>Plone is made possible only through the efforts of thousands of dedicated individuals and hundreds of companies. The\n+    Plone Foundation:</p>\n+<ul>\n+    <li>\xe2\x80\xa6protects and promotes Plone.</li>\n+    <li>\xe2\x80\xa6is a registered 501(c)(3) charitable organization.</li>\n+    <li>\xe2\x80\xa6donations are tax-deductible.</li>\n+</ul>\n+<p>Thanks for using our product; we hope you like it!</p>\n+<p>\xe2\x80\x94The Plone Team</p>\n+        """.format(uid=self.UID)\n+        import time\n+        startTime = time.time()\n+        res = self.parser(text)\n+        executionTime = (time.time() - startTime)\n+        print("\\n\\nimage srcset parsing time: {}\\n".format(executionTime))\n+        self.assertTrue(res)\n+\n+        text_out = """<h1>Welcome!</h1>\n+<p class="discreet">If you\'re seeing this instead of the web site you were expecting, the owner of this web site has\n+    just installed Plone. Do not contact the Plone Team or the Plone support channels about this.</p>\n+<p class="discreet">\n+    <picture>\n+        <source\n+            srcset="resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/larger 1000w"/>\n+        <img alt="" class="image-richtext image-inline image-size-small" data-linktype="image"\n+            data-picturevariant="small" data-scale="preview" data-val="{uid}" loading="lazy"\n+            src="resolveuid/{uid}/@@images/image/preview"/>\n+    </picture>\n+</p>\n+<h2>Get started</h2>\n+<p>Before you start exploring your newly created Plone site, please do the following:</p>\n+<ol>\n+    <li>Make sure you are logged in as an admin/manager user.<span class="discreet">(You should have a Site Setup entry\n+            in the user menu)</span></li>\n+</ol>\n+<h2>Get comfortable</h2>\n+<p>After that, we suggest you do one or more of the following:</p>\n+<p>\n+    <picture class="captioned">\n+        <source\n+            srcset="resolveuid/{uid}/@@images/image/teaser 600w, resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/larger 1000w, resolveuid/{uid}/@@images/image/great 1200w"/>\n+        <img alt="" class="image-richtext image-left image-size-medium captioned zoomable" data-linktype="image"\n+            data-picturevariant="medium" data-scale="larger" data-val="{uid}" loading="lazy"\n+            src="resolveuid/{uid}/@@images/image/teaser"/>\n+    </picture>\n+</p>\n+<h2>Make it your own</h2>\n+<p>Plone has a lot of different settings that can be used to make it do what you want it to. Some examples:</p>\n+<h2>Tell us how you use it</h2>\n+<p>Are you doing something interesting with Plone? Big site deployments, interesting use cases? Do you have a company\n+    that delivers Plone-based solutions?</p>\n+<h2>Find out more about Plone</h2>\n+<p class="discreet">\n+    <picture>\n+        <source\n+            srcset="resolveuid/{uid}/@@images/image/larger 1000w, resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/teaser 600w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/great 1200w, resolveuid/{uid}/@@images/image/huge 1600w"/>\n+        <img alt="" class="image-richtext image-right image-size-large" data-linktype="image"\n+            data-picturevariant="large" data-scale="huge" data-val="{uid}" loading="lazy"\n+            src="resolveuid/{uid}/@@images/image/larger"/>\n+    </picture>\n+</p>\n+<p>Plone is a powerful content management system built on a rock-solid application stack written using the Python\n+    programming language. More about these technologies:</p>\n+<h2>\n+    <picture>\n+        <source\n+            srcset="resolveuid/{uid}/@@images/image/larger 1000w, resolveuid/{uid}/@@images/image/preview 400w, resolveuid/{uid}/@@images/image/teaser 600w, resolveuid/{uid}/@@images/image/large 800w, resolveuid/{uid}/@@images/image/great 1200w, resolveuid/{uid}/@@images/image/huge 1600w"/>\n+        <img alt="" class="image-richtext image-inline image-size-large" data-linktype="image"\n+            data-picturevariant="large" data-scale="huge" data-val="{uid}" loading="lazy"\n+            src="resolveuid/{uid}/@@images/image/larger"/>\n+    </picture>\n+</h2>\n+<h2>Support the Plone Foundation</h2>\n+<p>Plone is made possible only through the efforts of thousands of dedicated individuals and hundreds of companies. The\n+    Plone Foundation:</p>\n+<ul>\n+    <li>\xe2\x80\xa6protects and promotes Plone.</li>\n+    <li>\xe2\x80\xa6is a registered 501(c)(3) charitable organization.</li>\n+    <li>\xe2\x80\xa6donations are tax-deductible.</li>\n+</ul>\n+<p>Thanks for using our product; we hope you like it!</p>\n+<p>\xe2\x80\x94The Plone Team</p>\n+        """.format(uid=self.UID)\n+        self._assertTransformsTo(text, text_out)\n+\n+    def test_parsing_with_nonexisting_srcset(self):\n+        text = """\n+<p><img class="image-richtext image-inline image-size-thumb" src="resolveuid/{uid}/@@images/image/thumb" alt="" data-linktype="image" data-picturevariant="thumb" data-scale="thumb" data-val="{uid}" /></p>\n+        """.format(uid=self.UID)\n+        res = self.parser(text)\n+        self.assertTrue(res)\n+        text_out = """\n+<p><img class="image-richtext image-inline image-size-thumb" src="resolveuid/{uid}/@@images/image/thumb" alt="" data-linktype="image" data-picturevariant="thumb" data-scale="thumb" data-val="{uid}" /></p>\n+        """.format(uid=self.UID)\n+        # verify that tag was not converted:\n+        self.assertTrue("data-picturevariant" in res)\n\\ No newline at end of file\ndiff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py\nindex ec748f5..b250951 100644\n--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py\n+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py\n@@ -72,12 +72,17 @@ def UID(self):\n         self.portal._setObject(\'foo2\', dummy2)\n         self.portal.portal_catalog.catalog_object(self.portal.foo2)\n \n-    def _assertTransformsTo(self, input, expected):\n+    def _assertTransformsTo(self, input, expected, parsing=True):\n         # compare two chunks of HTML ignoring whitespace differences,\n         # and with a useful diff on failure\n-        out = self.parser(input)\n+        if parsing:\n+            out = self.parser(input)\n+        else:\n+            out = input\n         normalized_out = normalize_html(out)\n         normalized_expected = normalize_html(expected)\n+        # print("e: {}".format(normalized_expected))\n+        # print("o: {}".format(normalized_out))\n         try:\n             self.assertTrue(_ellipsis_match(normalized_expected,\n                                             normalized_out))\n@@ -115,6 +120,71 @@ def test_parsing_minimal(self):\n         res = self.parser(text)\n         self.assertEqual(text, str(res))\n \n+    def test_parsing_long_doc(self):\n+        text = """<div class="hero">\n+<h1>Welcome!</h1>\n+<p><a href="https://plone.com" class="btn btn-primary" target="_blank" rel="noopener">Learn more about Plone</a></p>\n+</div>\n+<p class="discreet">If you\'re seeing this instead of the web site you were expecting, the owner of this web site has just installed Plone. Do not contact the Plone Team or the Plone support channels about this.</p>\n+<p class="discreet"><img class="image-richtext image-inline image-size-small" src="resolveuid/{uid}/@@images/image/preview" alt="" data-linktype="image" data-srcset="small" data-scale="preview" data-val="{uid}" /></p>\n+<h2>Get started</h2>\n+<p>Before you start exploring your newly created Plone site, please do the following:</p>\n+<ol>\n+<li>Make sure you are logged in as an admin/manager user. <span class="discreet">(You should have a Site Setup entry in the user menu)</span></li>\n+<li><a href="@@mail-controlpanel" target="_blank" rel="noopener">Set up your mail server</a>. <span class="discreet">(Plone needs a valid SMTP server to verify users and send out password reminders)</span></li>\n+<li><a href="@@security-controlpanel" target="_blank" rel="noopener">Decide what security level you want on your site</a>. <span class="discreet">(Allow self registration, password policies, etc)</span></li>\n+</ol>\n+<h2>Get comfortable</h2>\n+<p>After that, we suggest you do one or more of the following:</p>\n+<ul>\n+<li>Find out <a href="https://plone.com/features/" class="link-plain" target="_blank" rel="noopener">What\'s new in Plone</a>.</li>\n+<li>Read the <a href="https://docs.plone.org" class="link-plain" target="_blank" rel="noopener">documentation</a>.</li>\n+<li>Follow a <a href="https://training.plone.org" class="link-plain" target="_blank" rel="noopener">training</a>.</li>\n+<li>Explore the <a href="https://plone.org/download/add-ons" class="link-plain" target="_blank" rel="noopener">available add-ons</a> for Plone.</li>\n+<li>Read and/or subscribe to the <a href="https://plone.org/support" class="link-plain" target="_blank" rel="noopener">support channels</a>.</li>\n+<li>Find out <a href="https://plone.com/success-stories/" class="link-plain" target="_blank" rel="noopener">how others are using Plone</a>.</li>\n+</ul>\n+<p><img class="image-richtext image-left image-size-medium captioned zoomable" src="resolveuid/{uid}/@@images/image/larger" alt="" data-linktype="image" data-srcset="medium" data-scale="larger" data-val="{uid}" /></p>\n+<h2>Make it your own</h2>\n+<p>Plone has a lot of different settings that can be used to make it do what you want it to. Some examples:</p>\n+<ul>\n+<li>Try out a different theme, either pick from <a href="@@theming-controlpanel" target="_blank" rel="noopener">the included ones</a>, or one of the <a href="https://plone.org/download/add-ons" class="link-plain" target="_blank" rel="noopener">available themes from plone.org</a>. <span class="discreet">(Make sure the theme is compatible with the version of Plone you are currently using)</span></li>\n+<li><a href="@@content-controlpanel" target="_blank" rel="noopener"> Decide what kind of workflow you want in your site.</a> <span class="discreet">(The default is typical for a public web site; if you want to use Plone as a closed intranet or extranet, you can choose a different workflow.)</span></li>\n+<li>By default, Plone uses a visual editor for content. <span class="discreet">(If you prefer text-based syntax and/or wiki syntax, you can change this in the <a href="@@markup-controlpanel" target="_blank" rel="noopener">markup control panel</a>)</span></li>\n+<li>\xe2\x80\xa6and many more settings are available in the <a href="@@overview-controlpanel" target="_blank" rel="noopener">Site Setup</a>.</li>\n+</ul>\n+<h2>Tell us how you use it</h2>\n+<p>Are you doing something interesting with Plone? Big site deployments, interesting use cases? Do you have a company that delivers Plone-based solutions?</p>\n+<ul>\n+<li>Add your company as a <a href="https://plone.com/providers/" class="link-plain" target="_blank" rel="noopener">Plone provider</a>.</li>\n+<li>Add a <a href="https://plone.com/success-stories/" class="link-plain" target="_blank" rel="noopener">success story</a> describing your deployed project and customer.</li>\n+</ul>\n+<h2>Find out more about Plone</h2>\n+<p>Plone is a powerful content management system built on a rock-solid application stack written using the Python programming language. More about these technologies:</p>\n+<ul>\n+<li>The <a href="https://plone.com" class="link-plain" target="_blank" rel="noopener">Plone open source Content Management System</a> web site for evaluators and decision makers.</li>\n+<li>The <a href="https://plone.org" class="link-plain" target="_blank" rel="noopener">Plone community </a> web site for developers.</li>\n+<li>The <a href="https://www.python.org" class="link-plain" target="_blank" rel="noopener">Python programming language</a> web site.</li>\n+</ul>\n+<h2><img class="image-richtext image-inline image-size-large" src="resolveuid/{uid}/@@images/image/huge" alt="" data-linktype="image" data-srcset="large" data-scale="huge" data-val="{uid}" /></h2>\n+<h2>Support the Plone Foundation</h2>\n+<p>Plone is made possible only through the efforts of thousands of dedicated individuals and hundreds of companies. The Plone Foundation:</p>\n+<ul>\n+<li>\xe2\x80\xa6protects and promotes Plone.</li>\n+<li>\xe2\x80\xa6is a registered 501(c)(3) charitable organization.</li>\n+<li>\xe2\x80\xa6donations are tax-deductible.</li>\n+<li><a href="https://plone.org/sponsors/be-a-hero" target="_blank" rel="noopener">Support the Foundation and help make Plone better!</a></li>\n+</ul>\n+<p>Thanks for using our product; we hope you like it!</p>\n+<p>\xe2\x80\x94The Plone Team</p>\n+        """.format(uid=self.UID)\n+        import time\n+        startTime = time.time()\n+        res = self.parser(text)\n+        executionTime = (time.time() - startTime)\n+        print("\\n\\nresolve_uid_and_caption parsing time: {}\\n".format(executionTime))\n+        self.assertTrue(res)\n+\n     def test_parsing_preserves_newlines(self):\n         # Test if it preserves newlines which should not be filtered out\n         text = """<pre>This is line 1\n@@ -261,13 +331,12 @@ def test_image_captioning_in_news_item(self):\n         from plone.app.textfield.value import RichTextValue\n         news_item.text = RichTextValue(\n             \'<span><img class="captioned" src="image.jpg"/></span>\',\n-            \'text/html\', \'text/x-html-safe\')\n+            \'text/html\', \'text/html\')\n         news_item.setDescription("Description.")\n-\n         # Test captioning\n         output = news_item.text.output\n         text_out = """<span><figure class="captioned">\n-<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>\n </span>"""\n@@ -275,13 +344,13 @@ def test_image_captioning_in_news_item(self):\n \n     def test_image_captioning_absolutizes_uncaptioned_image(self):\n         text_in = """<img src="/image.jpg" />"""\n-        text_out = """<img alt="My caption" src="http://nohost/plone/image.jpg" title="Image"/>"""\n+        text_out = """<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/....jpeg" title="Image" width="500"/>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_absolute_path(self):\n         text_in = """<img class="captioned" src="/image.jpg"/>"""\n         text_out = """<figure class="captioned">\n-<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -289,7 +358,7 @@ def test_image_captioning_absolute_path(self):\n     def test_image_captioning_relative_path(self):\n         text_in = """<img class="captioned" src="image.jpg"/>"""\n         text_out = """<figure class="captioned">\n-<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -310,7 +379,7 @@ def test_image_captioning_relative_path_private_folder(self):\n \n         text_in = """<img class="captioned" src="private/image.jpg"/>"""\n         text_out = """<figure class="captioned">\n-<img alt="My private image caption" height="331" src="http://nohost/plone/private/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/private/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My private image caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -318,15 +387,15 @@ def test_image_captioning_relative_path_private_folder(self):\n     def test_image_captioning_relative_path_scale(self):\n         text_in = """<img class="captioned" src="image.jpg/@@images/image/thumb"/>"""\n         text_out = """<figure class="captioned">\n-<a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/></a>\n+<img alt="" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n \n-    def test_image_captioning_resolveuid(self):\n+    def test_image_captioning_resolveuid_bare(self):\n         text_in = """<img class="captioned" src="resolveuid/%s"/>""" % self.UID\n         text_out = """<figure class="captioned">\n-<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -334,7 +403,7 @@ def test_image_captioning_resolveuid(self):\n     def test_image_captioning_resolveuid_scale(self):\n         text_in = """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>""" % self.UID\n         text_out = """<figure class="captioned">\n-<a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/></a>\n+<img alt="" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -342,7 +411,7 @@ def test_image_captioning_resolveuid_scale(self):\n     def test_image_captioning_resolveuid_new_scale(self):\n         text_in = """<img class="captioned" src="resolveuid/%s/@@images/image/thumb"/>""" % self.UID\n         text_out = """<figure class="captioned">\n-<a href="/plone/image.jpg" rel="lightbox"><img alt="My caption" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/></a>\n+<img alt="" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -350,13 +419,13 @@ def test_image_captioning_resolveuid_new_scale(self):\n     def test_image_captioning_resolveuid_new_scale_plone_namedfile(self):\n         self._makeDummyContent()\n         text_in = """<img class="captioned" src="resolveuid/foo2/@@images/image/thumb"/>"""\n-        text_out = u"""<img alt="Sch\xc3\xb6nes Bild" class="captioned" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild"/>"""\n+        text_out = u"""<img alt="" class="captioned" height="84" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild" width="128"/>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_resolveuid_no_scale(self):\n         text_in = """<img class="captioned" src="resolveuid/%s/@@images/image"/>""" % self.UID\n         text_out = """<figure class="captioned">\n-<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -364,7 +433,7 @@ def test_image_captioning_resolveuid_no_scale(self):\n     def test_image_captioning_resolveuid_with_srcset_and_src(self):\n         text_in = """<img class="captioned" src="resolveuid/%s/@@images/image" srcset="resolveuid/%s/@@images/image 480w,resolveuid/%s/@@images/image 360w"/>""" % (self.UID, self.UID, self.UID)\n         text_out = """<figure class="captioned">\n-<img alt="My caption" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" srcset="http://nohost/plone/image.jpg/@@images/image 480w,http://nohost/plone/image.jpg/@@images/image 360w" title="Image" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" srcset="http://nohost/plone/image.jpg/@@images/...jpeg 480w,http://nohost/plone/image.jpg/@@images/...jpeg 360w" title="Image" width="500"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -384,20 +453,10 @@ def test_audio_resolveuid(self):\n         text_out = """<audio src="http://nohost/plone/image.jpg"></audio>"""\n         self._assertTransformsTo(text_in, text_out)\n \n-    def test_source_resolveuid(self):\n-        text_in = """<video><source src="resolveuid/%s"/></video>""" % self.UID\n-        text_out = """<video><source src="http://nohost/plone/image.jpg"/></video>"""\n-        self._assertTransformsTo(text_in, text_out)\n-\n-    def test_source_resolveuid_srcset(self):\n-        text_in = """<video><source mimetype="video/mp4" srcset="resolveuid/%s"/></video>""" % self.UID\n-        text_out = """<video><source mimetype="video/mp4" srcset="http://nohost/plone/image.jpg"/></video>"""\n-        self._assertTransformsTo(text_in, text_out)\n-\n     def test_image_captioning_resolveuid_no_scale_plone_namedfile(self):\n         self._makeDummyContent()\n         text_in = """<img class="captioned" src="resolveuid/foo2/@@images/image"/>"""\n-        text_out = u"""<img alt="Sch\xc3\xb6nes Bild" class="captioned" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild"/>"""\n+        text_out = u"""<img alt="" class="captioned" height="331" src="http://nohost/plone/foo2/@@images/...jpeg" title="Sch\xc3\xb6nes Bild" width="500"/>"""\n         self._assertTransformsTo(text_in, text_out)\n \n     def test_image_captioning_bad_uid(self):\n@@ -419,7 +478,7 @@ def test_image_captioning_external_url(self):\n     def test_image_captioning_preserves_custom_attributes(self):\n         text_in = """<img class="captioned" width="42" height="42" foo="bar" src="image.jpg"/>"""\n         text_out = """<figure class="captioned">\n-<img alt="My caption" foo="bar" height="42" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="42"/>\n+<img alt="" foo="bar" height="42" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="42"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\n@@ -435,7 +494,7 @@ def test_image_captioning_handles_unquoted_attributes(self):\n     def test_image_captioning_preserves_existing_links(self):\n         text_in = """<a href="/xyzzy" class="link"><img class="image-left captioned" src="image.jpg/@@images/image/thumb"/></a>"""\n         text_out = """<a class="link" href="/xyzzy"><figure class="image-left captioned">\n-<img alt="My caption" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/>\n+<img alt="" height="84" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Image" width="128"/>\n <figcaption class="image-caption">My caption</figcaption>\n </figure>\n </a>"""\n@@ -447,7 +506,7 @@ def test_image_captioning_handles_non_ascii(self):\n             u\'Kupu Test Image \\xe5\\xe4\\xf6\')\n         text_in = """<img class="captioned" src="image.jpg"/>"""\n         text_out = u"""<figure class="captioned">\n-<img alt="Kupu Test Image \\xe5\\xe4\\xf6" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Kupu Test Image \\xe5\\xe4\\xf6" width="500"/>\n+<img alt="" height="331" src="http://nohost/plone/image.jpg/@@images/...jpeg" title="Kupu Test Image \\xe5\\xe4\\xf6" width="500"/>\n <figcaption class="image-caption">Kupu Test Image \\xe5\\xe4\\xf6</figcaption>\n </figure>"""\n         self._assertTransformsTo(text_in, text_out)\ndiff --git a/setup.py b/setup.py\nindex 4ad8816..052dc3f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -66,9 +66,12 @@ def read(filename):\n         \'Products.GenericSetup\',\n         \'Products.MimetypesRegistry\',\n         \'Products.PortalTransforms>=2.0\',\n+        \'plone.namedfile\',\n+        \'plone.app.uuid\',\n         \'setuptools\',\n         \'six\',\n         \'unidecode\',\n+        \'zope.deprecation\',\n         \'beautifulsoup4\',\n         \'lxml\',\n     ],\n'

