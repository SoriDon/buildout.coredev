Repository: Products.CMFDynamicViewFTI


Branch: refs/heads/master
Date: 2023-04-09T10:22:46+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/055212b5d6d85b231ea01882e3a91c028d0e90b8

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/3333c742.internal
A tox.ini
M pyproject.toml
M setup.cfg
D bootstrap.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..d915ae9\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "3333c742"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex 506a75f..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,178 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-tmpeggs = tempfile.mkdtemp()\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep\n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n-\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-\n-\n-options, args = parser.parse_args()\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    if options.allow_site_packages:\n-        import setuptools\n-        import pkg_resources\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-requirement = \'zc.buildout\'\n-version = options.version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        for part in parsed_version:\n-            if (part[:1] == \'*\') and (part not in _final_parts):\n-                return False\n-        return True\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/news/3333c742.internal b/news/3333c742.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/3333c742.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 526aeb2..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..ddf8828\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s Products.CMFDynamicViewFTI {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s Products.CMFDynamicViewFTI {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

Repository: Products.CMFDynamicViewFTI


Branch: refs/heads/master
Date: 2023-04-09T10:25:08+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/730324172e4f955058209d86ca2da252e9601937

chore: isort

Files changed:
M Products/CMFDynamicViewFTI/browserdefault.py
M Products/CMFDynamicViewFTI/content_for_tests.py
M Products/CMFDynamicViewFTI/fti.py
M Products/CMFDynamicViewFTI/interface.py
M Products/CMFDynamicViewFTI/permissions.py
M Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
M setup.py

b'diff --git a/Products/CMFDynamicViewFTI/browserdefault.py b/Products/CMFDynamicViewFTI/browserdefault.py\nindex e35700d..ba5d643 100644\n--- a/Products/CMFDynamicViewFTI/browserdefault.py\n+++ b/Products/CMFDynamicViewFTI/browserdefault.py\n@@ -6,8 +6,8 @@\n the ISelectableBrowserDefault interface from CMFPlone.\n """\n from AccessControl import ClassSecurityInfo\n-from Acquisition import aq_base\n from AccessControl.class_init import InitializeClass\n+from Acquisition import aq_base\n from ExtensionClass import Base\n from Products.CMFCore.permissions import View\n from Products.CMFCore.utils import getToolByName\ndiff --git a/Products/CMFDynamicViewFTI/content_for_tests.py b/Products/CMFDynamicViewFTI/content_for_tests.py\nindex be1e028..1790b8f 100644\n--- a/Products/CMFDynamicViewFTI/content_for_tests.py\n+++ b/Products/CMFDynamicViewFTI/content_for_tests.py\n@@ -1,5 +1,5 @@\n-from Products.CMFCore.PortalFolder import PortalFolder\n from Products.CMFCore.PortalContent import PortalContent\n+from Products.CMFCore.PortalFolder import PortalFolder\n from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin\n \n \ndiff --git a/Products/CMFDynamicViewFTI/fti.py b/Products/CMFDynamicViewFTI/fti.py\nindex cb76438..cf659a8 100644\n--- a/Products/CMFDynamicViewFTI/fti.py\n+++ b/Products/CMFDynamicViewFTI/fti.py\n@@ -1,6 +1,6 @@\n from AccessControl import ClassSecurityInfo\n-from Acquisition import aq_base\n from AccessControl.class_init import InitializeClass\n+from Acquisition import aq_base\n from Products.CMFCore.permissions import View\n from Products.CMFCore.TypesTool import FactoryTypeInformation\n from Products.CMFCore.utils import getToolByName\ndiff --git a/Products/CMFDynamicViewFTI/interface.py b/Products/CMFDynamicViewFTI/interface.py\nindex 1805e3d..8916c41 100644\n--- a/Products/CMFDynamicViewFTI/interface.py\n+++ b/Products/CMFDynamicViewFTI/interface.py\n@@ -1,8 +1,10 @@\n # BBB module will be removed at some point. We will still need it as long as\n # we plan to support Plone 4.3.x\n from Products.CMFDynamicViewFTI.interfaces import *\n+\n import warnings\n \n+\n warnings.warn(\n     \'import from Products.CMFDynamicViewFTI.interfaces instead\',\n     DeprecationWarning\ndiff --git a/Products/CMFDynamicViewFTI/permissions.py b/Products/CMFDynamicViewFTI/permissions.py\nindex 19d7400..6731b34 100644\n--- a/Products/CMFDynamicViewFTI/permissions.py\n+++ b/Products/CMFDynamicViewFTI/permissions.py\n@@ -1,4 +1,5 @@\n from AccessControl.Permission import addPermission\n \n+\n ModifyViewTemplate = "Modify view template"\n addPermission(ModifyViewTemplate, (\'Manager\', \'Owner\'))\ndiff --git a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py\nindex be0f462..c0e2f48 100644\n--- a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py\n+++ b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py\n@@ -4,7 +4,9 @@\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import _createObjectByType\n-from Products.GenericSetup import EXTENSION, profile_registry\n+from Products.GenericSetup import EXTENSION\n+from Products.GenericSetup import profile_registry\n+\n import transaction\n import unittest\n \ndiff --git a/setup.py b/setup.py\nindex 78404d9..c30f06b 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,6 +1,7 @@\n from setuptools import find_packages\n from setuptools import setup\n \n+\n version = \'7.0.1.dev0\'\n \n long_description = open("README.rst").read()\n'

Repository: Products.CMFDynamicViewFTI


Branch: refs/heads/master
Date: 2023-04-09T10:26:29+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/cc63fece16ac6b1980ad7139a7cc74f216d21979

chore: black

Files changed:
M Products/CMFDynamicViewFTI/__init__.py
M Products/CMFDynamicViewFTI/browser/typeinfo.py
M Products/CMFDynamicViewFTI/browserdefault.py
M Products/CMFDynamicViewFTI/content_for_tests.py
M Products/CMFDynamicViewFTI/fti.py
M Products/CMFDynamicViewFTI/interface.py
M Products/CMFDynamicViewFTI/interfaces.py
M Products/CMFDynamicViewFTI/permissions.py
M Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
M Products/CMFDynamicViewFTI/tests/test_browserdefault.py
M Products/CMFDynamicViewFTI/tests/test_fti.py
M Products/__init__.py
M setup.py

b'diff --git a/Products/CMFDynamicViewFTI/__init__.py b/Products/CMFDynamicViewFTI/__init__.py\nindex bba4fc4..293c4a2 100644\n--- a/Products/CMFDynamicViewFTI/__init__.py\n+++ b/Products/CMFDynamicViewFTI/__init__.py\n@@ -7,26 +7,18 @@\n \n def initialize(context):\n     # (DynamicViewTypeInformation factory is created from ZCML)\n-    cmf_utils.registerIcon(\n-        DynamicViewTypeInformation,\n-        \'images/typeinfo.gif\',\n-        globals()\n-    )\n+    cmf_utils.registerIcon(DynamicViewTypeInformation, "images/typeinfo.gif", globals())\n \n     context.registerClass(\n         content_for_tests.DynFolder,\n         permission=AddPortalFolders,\n-        constructors=(\n-            (\'addDynFolder\', content_for_tests.addDynFolder),\n-        ),\n-        icon=\'images/typeinfo.gif\'\n+        constructors=(("addDynFolder", content_for_tests.addDynFolder),),\n+        icon="images/typeinfo.gif",\n     )\n \n     context.registerClass(\n         content_for_tests.DynDocument,\n         permission=AddPortalContent,\n-        constructors=(\n-            (\'addDynDocument\', content_for_tests.addDynDocument),\n-        ),\n-        icon=\'images/typeinfo.gif\'\n+        constructors=(("addDynDocument", content_for_tests.addDynDocument),),\n+        icon="images/typeinfo.gif",\n     )\ndiff --git a/Products/CMFDynamicViewFTI/browser/typeinfo.py b/Products/CMFDynamicViewFTI/browser/typeinfo.py\nindex 9fced65..1ec9362 100644\n--- a/Products/CMFDynamicViewFTI/browser/typeinfo.py\n+++ b/Products/CMFDynamicViewFTI/browser/typeinfo.py\n@@ -12,4 +12,4 @@ class DVFactoryTypeInformationAddView(FactoryTypeInformationAddView):\n \n     klass = DynamicViewTypeInformation\n \n-    description = \'A dynamic view type information object defines a portal type.\'\n+    description = "A dynamic view type information object defines a portal type."\ndiff --git a/Products/CMFDynamicViewFTI/browserdefault.py b/Products/CMFDynamicViewFTI/browserdefault.py\nindex ba5d643..0fdcbba 100644\n--- a/Products/CMFDynamicViewFTI/browserdefault.py\n+++ b/Products/CMFDynamicViewFTI/browserdefault.py\n@@ -39,13 +39,13 @@ class BrowserDefaultMixin(Base):\n \n     _at_fti_meta_type = fti_meta_type\n     aliases = {\n-        \'(Default)\': \'(dynamic view)\',\n-        \'view\': \'(selected layout)\',\n-        \'edit\': \'base_edit\',\n-        \'properties\': \'base_metadata\',\n-        \'sharing\': \'folder_localrole_form\',\n-        \'gethtml\': \'\',\n-        \'mkdir\': \'\',\n+        "(Default)": "(dynamic view)",\n+        "view": "(selected layout)",\n+        "edit": "base_edit",\n+        "properties": "base_metadata",\n+        "sharing": "folder_localrole_form",\n+        "gethtml": "",\n+        "mkdir": "",\n     }\n \n     default_view = "base_view"\n@@ -92,7 +92,7 @@ def getDefaultPage(self):\n         if fti is None:\n             return None\n \n-        plone_utils = getToolByName(self, \'plone_utils\', None)\n+        plone_utils = getToolByName(self, "plone_utils", None)\n         if plone_utils is not None:\n             return plone_utils.getDefaultPage(self)\n \n@@ -113,7 +113,7 @@ def canSetDefaultPage(self):\n         # (folderish) item, and the item is folderish.\n         if not self.isPrincipiaFolderish:\n             return False\n-        mtool = getToolByName(self, \'portal_membership\')\n+        mtool = getToolByName(self, "portal_membership")\n         member = mtool.getAuthenticatedMember()\n         return member.has_permission(ModifyViewTemplate, self)\n \n@@ -130,8 +130,8 @@ def setDefaultPage(self, objectId):\n         new_page = old_page = None\n         if objectId is not None:\n             new_page = getattr(self, objectId, None)\n-        if self.hasProperty(\'default_page\'):\n-            pages = self.getProperty(\'default_page\', \'\')\n+        if self.hasProperty("default_page"):\n+            pages = self.getProperty("default_page", "")\n             if isinstance(pages, (list, tuple)):\n                 for page in pages:\n                     old_page = getattr(self, page, None)\n@@ -141,17 +141,17 @@ def setDefaultPage(self, objectId):\n                 old_page = getattr(self, pages, None)\n \n             if objectId is None:\n-                self.manage_delProperties([\'default_page\'])\n+                self.manage_delProperties(["default_page"])\n             else:\n                 self.manage_changeProperties(default_page=objectId)\n         else:\n             if objectId is not None:\n-                self.manage_addProperty(\'default_page\', objectId, \'string\')\n+                self.manage_addProperty("default_page", objectId, "string")\n         if new_page != old_page:\n             if new_page is not None:\n-                new_page.reindexObject([\'is_default_page\'])\n+                new_page.reindexObject(["is_default_page"])\n             if old_page is not None:\n-                old_page.reindexObject([\'is_default_page\'])\n+                old_page.reindexObject(["is_default_page"])\n \n     @security.protected(ModifyViewTemplate)\n     def setLayout(self, layout):\n@@ -162,28 +162,27 @@ def setLayout(self, layout):\n         # setDefaultPage(), it is turned off by calling setDefaultPage(None).\n         if not (layout and isinstance(layout, str)):\n             raise ValueError(\n-                "layout must be a non empty string, got %s(%s)" %\n-                (layout, type(layout))\n+                "layout must be a non empty string, got %s(%s)" % (layout, type(layout))\n             )\n \n         defaultPage = self.getDefaultPage()\n         if defaultPage is None and layout == self.getLayout():\n             return\n \n-        if self.hasProperty(\'layout\'):\n+        if self.hasProperty("layout"):\n             self.manage_changeProperties(layout=layout)\n         else:\n-            if getattr(aq_base(self), \'layout\', _marker) is not _marker:\n+            if getattr(aq_base(self), "layout", _marker) is not _marker:\n                 # Archetypes remains? clean up\n                 old = self.layout\n                 if old and not isinstance(old, str):\n                     raise RuntimeError(\n-                        "layout attribute exists on %s and is no string: %s" %\n-                        (self, type(old))\n+                        "layout attribute exists on %s and is no string: %s"\n+                        % (self, type(old))\n                     )\n-                delattr(self, \'layout\')\n+                delattr(self, "layout")\n \n-            self.manage_addProperty(\'layout\', layout, \'string\')\n+            self.manage_addProperty("layout", layout, "string")\n \n         self.setDefaultPage(None)\n \n@@ -198,7 +197,7 @@ def getDefaultLayout(self):\n     @security.public\n     def canSetLayout(self):\n         # Check if the current authenticated user is permitted to select a layout.\n-        mtool = getToolByName(self, \'portal_membership\')\n+        mtool = getToolByName(self, "portal_membership")\n         member = mtool.getAuthenticatedMember()\n         return member.has_permission(ModifyViewTemplate, self)\n \n@@ -217,10 +216,7 @@ def getAvailableLayouts(self):\n                 mid = mid.decode()\n             factory = gsm.adapters.lookup(spec, Interface, mid)\n             if factory is not None:\n-                menu = getUtility(\n-                    IBrowserMenu,\n-                    \'plone_displayviews\'\n-                )\n+                menu = getUtility(IBrowserMenu, "plone_displayviews")\n                 item = menu.getMenuItemByAction(self, self.REQUEST, mid)\n                 title = item and item.title or mid\n                 result.append((mid, title))\n@@ -245,7 +241,7 @@ def check_default_page(obj, event):\n     used by default for zope.container.interfaces.IContainerModifiedEvent\n     """\n     container = obj\n-    default_page_id = container.getProperty(\'default_page\', \'\')\n+    default_page_id = container.getProperty("default_page", "")\n     if default_page_id and not (default_page_id in container.objectIds()):\n         ISelectableBrowserDefault(container).setDefaultPage(None)\n \n@@ -259,6 +255,6 @@ def rename_default_page(obj, event):\n     if newParent != event.oldParent:\n         return\n     elif ISelectableBrowserDefault.providedBy(newParent):\n-        default_page_id = newParent.getProperty(\'default_page\', \'\')\n+        default_page_id = newParent.getProperty("default_page", "")\n         if default_page_id == event.oldName:\n             ISelectableBrowserDefault(newParent).setDefaultPage(event.newName)\ndiff --git a/Products/CMFDynamicViewFTI/content_for_tests.py b/Products/CMFDynamicViewFTI/content_for_tests.py\nindex 1790b8f..a27ab5d 100644\n--- a/Products/CMFDynamicViewFTI/content_for_tests.py\n+++ b/Products/CMFDynamicViewFTI/content_for_tests.py\n@@ -8,21 +8,18 @@ class DynFolder(PortalFolder, BrowserDefaultMixin):\n \n \n class DynDocument(PortalContent, BrowserDefaultMixin):\n-\n     def __init__(self, id, title):\n         self.id = id\n         self.title = title\n \n \n-def addDynFolder(self, id, title=\'\', REQUEST=None):\n-    """Add a new DynFolder object with id *id*.\n-    """\n+def addDynFolder(self, id, title="", REQUEST=None):\n+    """Add a new DynFolder object with id *id*."""\n     ob = DynFolder(id, title)\n     self._setObject(id, ob, suppress_events=True)\n \n \n-def addDynDocument(self, id, title=\'\', REQUEST=None):\n-    """Add a new DynDocument object with id *id*.\n-    """\n+def addDynDocument(self, id, title="", REQUEST=None):\n+    """Add a new DynDocument object with id *id*."""\n     ob = DynDocument(id, title)\n     self._setObject(id, ob, suppress_events=True)\ndiff --git a/Products/CMFDynamicViewFTI/fti.py b/Products/CMFDynamicViewFTI/fti.py\nindex cf659a8..66878e9 100644\n--- a/Products/CMFDynamicViewFTI/fti.py\n+++ b/Products/CMFDynamicViewFTI/fti.py\n@@ -21,8 +21,8 @@ def safe_hasattr(obj, name, _marker=object()):\n \n def safe_callable(obj):\n     """Make sure our callable checks are ConflictError safe."""\n-    if safe_hasattr(obj, \'__class__\'):\n-        if safe_hasattr(obj, \'__call__\'):\n+    if safe_hasattr(obj, "__class__"):\n+        if safe_hasattr(obj, "__call__"):\n             return True\n         else:\n             return isinstance(obj, type)\n@@ -36,8 +36,8 @@ def om_has_key(context, key):\n     Zope\'s OFS.ObjectManager has no method for checking if an object with an id\n     exists inside a folder.\n     """\n-    klass = getattr(aq_base(context), \'__class__\', None)\n-    if hasattr(klass, \'has_key\'):\n+    klass = getattr(aq_base(context), "__class__", None)\n+    if hasattr(klass, "has_key"):\n         # BTreeFolder2 optimization\n         if key in context:\n             return True\n@@ -48,7 +48,7 @@ def om_has_key(context, key):\n     return False\n \n \n-fti_meta_type = \'Factory-based Type Information with dynamic views\'\n+fti_meta_type = "Factory-based Type Information with dynamic views"\n \n \n @implementer(IDynamicViewTypeInformation)\n@@ -64,26 +64,26 @@ class DynamicViewTypeInformation(FactoryTypeInformation):\n \n     _properties = FactoryTypeInformation._properties + (\n         {\n-            \'id\': \'default_view\',\n-            \'type\': \'string\',\n-            \'mode\': \'w\',\n-            \'label\': \'Default view method\',\n+            "id": "default_view",\n+            "type": "string",\n+            "mode": "w",\n+            "label": "Default view method",\n         },\n         {\n-            \'id\': \'view_methods\',\n-            \'type\': \'lines\',\n-            \'mode\': \'w\',\n-            \'label\': \'Available view methods\'\n+            "id": "view_methods",\n+            "type": "lines",\n+            "mode": "w",\n+            "label": "Available view methods",\n         },\n         {\n-            \'id\': \'default_view_fallback\',\n-            \'type\': \'boolean\',\n-            \'mode\': \'w\',\n-            \'label\': \'Fall back to default view?\'\n+            "id": "default_view_fallback",\n+            "type": "boolean",\n+            "mode": "w",\n+            "label": "Fall back to default view?",\n         },\n     )\n \n-    default_view = \'\'\n+    default_view = ""\n     view_methods = ()\n     default_view_fallback = False\n \n@@ -98,7 +98,7 @@ def manage_changeProperties(self, **kw):\n             # TODO: use view action\n             self.default_view = default_view = self.immediate_view\n         if not view_methods:\n-            self.view_methods = view_methods = (default_view, )\n+            self.view_methods = view_methods = (default_view,)\n         if default_view and default_view not in view_methods:\n             raise ValueError(f"{default_view} not in {view_methods}")\n \n@@ -112,20 +112,15 @@ def getAvailableViewMethods(self, context):\n         # Get a list of registered view methods.\n         methods = self.view_methods\n         if isinstance(methods, str):\n-            methods = (methods, )\n+            methods = (methods,)\n         return tuple(methods)\n \n     @security.protected(View)\n-    def getViewMethod(\n-        self,\n-        context,\n-        enforce_available=False,\n-        check_exists=False\n-    ):\n+    def getViewMethod(self, context, enforce_available=False, check_exists=False):\n         # Get view method (aka layout) name from context.\n         # Return -- view method from context or default view name.\n         default = self.getDefaultViewMethod(context)\n-        layout = getattr(aq_base(context), \'layout\', None)\n+        layout = getattr(aq_base(context), "layout", None)\n \n         if safe_callable(layout):\n             layout = layout()\n@@ -133,8 +128,7 @@ def getViewMethod(\n             return default\n         if not isinstance(layout, str):\n             raise TypeError(\n-                "layout of %s must be a string, got %s" %\n-                (repr(context), type(layout))\n+                "layout of %s must be a string, got %s" % (repr(context), type(layout))\n             )\n         if enforce_available:\n             available = self.getAvailableViewMethods(context)\n@@ -159,11 +153,11 @@ def getDefaultPage(self, context, check_exists=False):\n         # default page id exists.\n         #\n         # Return -- None for no default page or a string\n-        if not getattr(aq_base(context), \'isPrincipiaFolderish\', False):\n+        if not getattr(aq_base(context), "isPrincipiaFolderish", False):\n             # non folderish objects don\'t have a default page per se\n             return None\n \n-        default_page = getattr(aq_base(context), \'default_page\', None)\n+        default_page = getattr(aq_base(context), "default_page", None)\n \n         if safe_callable(default_page):\n             default_page = default_page()\n@@ -173,8 +167,8 @@ def getDefaultPage(self, context, check_exists=False):\n             default_page = default_page[0]\n         if not isinstance(default_page, str):\n             raise TypeError(\n-                "default_page must be a string, got %s(%s):" %\n-                (default_page, type(default_page))\n+                "default_page must be a string, got %s(%s):"\n+                % (default_page, type(default_page))\n             )\n \n         if check_exists and not om_has_key(context, default_page):\n@@ -188,7 +182,7 @@ def defaultView(self, context):\n         # use that, else use the currently selected view method/layout.\n \n         # Delegate to PloneTool\'s version if we have it else, use own rules\n-        plone_utils = getToolByName(self, \'plone_utils\', None)\n+        plone_utils = getToolByName(self, "plone_utils", None)\n         if plone_utils is not None:\n             obj, path = plone_utils.browserDefault(context)\n             return path[-1]\n@@ -210,16 +204,13 @@ def queryMethodID(self, alias, default=None, context=None):\n         # getViewMethod()\n \n         methodTarget = FactoryTypeInformation.queryMethodID(\n-            self,\n-            alias,\n-            default=default,\n-            context=context\n+            self, alias, default=default, context=context\n         )\n         if not isinstance(methodTarget, str):\n             # nothing to do, method_id is probably None\n             return methodTarget\n \n-        if context is None or default == \'\':\n+        if context is None or default == "":\n             # the edit zpts like typesAliases don\'t apply a context and set the\n             # default to \'\'. We do not want to resolve (dynamic view) for these\n             # methods.\ndiff --git a/Products/CMFDynamicViewFTI/interface.py b/Products/CMFDynamicViewFTI/interface.py\nindex 8916c41..9532ddf 100644\n--- a/Products/CMFDynamicViewFTI/interface.py\n+++ b/Products/CMFDynamicViewFTI/interface.py\n@@ -6,6 +6,5 @@\n \n \n warnings.warn(\n-    \'import from Products.CMFDynamicViewFTI.interfaces instead\',\n-    DeprecationWarning\n+    "import from Products.CMFDynamicViewFTI.interfaces instead", DeprecationWarning\n )\ndiff --git a/Products/CMFDynamicViewFTI/interfaces.py b/Products/CMFDynamicViewFTI/interfaces.py\nindex 452394e..d2b91f0 100644\n--- a/Products/CMFDynamicViewFTI/interfaces.py\n+++ b/Products/CMFDynamicViewFTI/interfaces.py\n@@ -9,8 +9,7 @@ class IDynamicViewTypeInformation(ITypeInformation):\n     """\n \n     def getAvailableViewMethods(context):\n-        """Get a list of registered view methods\n-        """\n+        """Get a list of registered view methods"""\n \n     def getViewMethod(context, enforce_available=True):\n         """Get view method name from context\n@@ -19,8 +18,7 @@ def getViewMethod(context, enforce_available=True):\n         """\n \n     def getDefaultViewMethod(context):\n-        """Get the default view method from the FTI\n-        """\n+        """Get the default view method from the FTI"""\n \n     def getDefaultPage(context, check_exists=False):\n         """Get the default page from a folderish object\n@@ -78,8 +76,7 @@ def getLayout(**kw):\n         """\n \n     def getDefaultLayout():\n-        """Get the default layout template.\n-        """\n+        """Get the default layout template."""\n \n \n class ISelectableBrowserDefault(IBrowserDefault):\ndiff --git a/Products/CMFDynamicViewFTI/permissions.py b/Products/CMFDynamicViewFTI/permissions.py\nindex 6731b34..12c6e3e 100644\n--- a/Products/CMFDynamicViewFTI/permissions.py\n+++ b/Products/CMFDynamicViewFTI/permissions.py\n@@ -2,4 +2,4 @@\n \n \n ModifyViewTemplate = "Modify view template"\n-addPermission(ModifyViewTemplate, (\'Manager\', \'Owner\'))\n+addPermission(ModifyViewTemplate, ("Manager", "Owner"))\ndiff --git a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py\nindex c0e2f48..87f3450 100644\n--- a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py\n+++ b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py\n@@ -12,47 +12,50 @@\n \n \n class CMFDynamicViewFTIFixture(PloneSandboxLayer):\n-\n-    defaultBases = (PLONE_FIXTURE, )\n+    defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         profile_registry.registerProfile(\n-            \'CMFDVFTI_sampletypes\',\n-            \'CMFDynamicViewFTI Sample Content Types\',\n-            \'Extension profile including CMFDVFTI sample content types\',\n-            \'profiles/sample_types\',\n-            \'CMFDynamicViewFTI\',\n+            "CMFDVFTI_sampletypes",\n+            "CMFDynamicViewFTI Sample Content Types",\n+            "Extension profile including CMFDVFTI sample content types",\n+            "profiles/sample_types",\n+            "CMFDynamicViewFTI",\n             EXTENSION,\n-            for_=ISiteRoot\n+            for_=ISiteRoot,\n         )\n         import Products.CMFDynamicViewFTI.tests\n-        self.loadZCML(name=\'browserdefault.zcml\',\n-                      package=Products.CMFDynamicViewFTI.tests)\n \n-    def setUpPloneSite(self, portal):\n-        self.applyProfile(portal, \'CMFDynamicViewFTI:CMFDVFTI_sampletypes\')\n+        self.loadZCML(\n+            name="browserdefault.zcml", package=Products.CMFDynamicViewFTI.tests\n+        )\n \n+    def setUpPloneSite(self, portal):\n+        self.applyProfile(portal, "CMFDynamicViewFTI:CMFDVFTI_sampletypes")\n \n     def tearDownZope(self, app):\n         pass\n \n+\n CDV_FIXTURE = CMFDynamicViewFTIFixture()\n CDV_FUNCTIONAL_TESTING = testing.FunctionalTesting(\n-    bases=(CDV_FIXTURE, ), name=\'CMFDynamicViewFTI Testing:Functional\')\n+    bases=(CDV_FIXTURE,), name="CMFDynamicViewFTI Testing:Functional"\n+)\n \n \n class CMFDVFTITestCase(unittest.TestCase):\n     """This is a stub now, but in case you want to try\n-       something fancy on Your Branch (tm), put it here.\n+    something fancy on Your Branch (tm), put it here.\n     """\n+\n     layer = CDV_FUNCTIONAL_TESTING\n \n     def setUp(self):\n         """Set up before each test."""\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        _createObjectByType(\'DynFolder\', self.portal, id=\'folder\')\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        _createObjectByType("DynFolder", self.portal, id="folder")\n         self.folder = self.portal.folder\n-        self.types = getToolByName(self.portal, \'portal_types\')\n-        self.fti = self.types[\'DynFolder\']\n+        self.types = getToolByName(self.portal, "portal_types")\n+        self.fti = self.types["DynFolder"]\n         transaction.commit()\ndiff --git a/Products/CMFDynamicViewFTI/tests/test_browserdefault.py b/Products/CMFDynamicViewFTI/tests/test_browserdefault.py\nindex cff3bd2..9e9d725 100644\n--- a/Products/CMFDynamicViewFTI/tests/test_browserdefault.py\n+++ b/Products/CMFDynamicViewFTI/tests/test_browserdefault.py\n@@ -10,17 +10,15 @@\n \n \n class DummyFolder(BrowserDefaultMixin):\n-\n     def getTypeInfo(self):\n         return self.fti\n \n \n class IDummy(Interface):\n-    """ marker interface for a zope 3 view """\n+    """marker interface for a zope 3 view"""\n \n \n class TestBrowserDefault(CMFDVFTITestCase.CMFDVFTITestCase):\n-\n     def test_doesImplementISelectableBrowserDefault(self):\n         iface = ISelectableBrowserDefault\n         self.assertTrue(iface.implementedBy(BrowserDefaultMixin))\n@@ -31,15 +29,14 @@ def test_extendsInterface(self):\n \n \n class TestAvailableLayouts(CMFDVFTITestCase.CMFDVFTITestCase):\n-\n     def setUp(self):\n         super().setUp()\n         self.dfolder = DummyFolder()\n-        self.dfolder.fti = self.types[\'DynFolder\']\n+        self.dfolder.fti = self.types["DynFolder"]\n \n     def test_Zope3View(self):\n         dfolder = self.dfolder\n-        dfolder.layout = \'zope3_view\'\n+        dfolder.layout = "zope3_view"\n         dfolder.REQUEST = TestRequest()\n         view_methods = dfolder.getAvailableLayouts()\n         view_ids = [view_id for view_id, foo in view_methods]\n@@ -53,11 +50,11 @@ def test_Zope3View(self):\n \n     def test_Zope3ViewTitle(self):\n         dfolder = self.dfolder\n-        dfolder.layout = \'zope3_view\'\n+        dfolder.layout = "zope3_view"\n         dfolder.REQUEST = TestRequest()\n         directlyProvides(dfolder, IDummy)\n         view_methods = dfolder.getAvailableLayouts()\n \n         for id, title in view_methods:\n             if id == dfolder.layout:\n-                self.assertEqual(title, \'Zope3 Test View\')\n+                self.assertEqual(title, "Zope3 Test View")\ndiff --git a/Products/CMFDynamicViewFTI/tests/test_fti.py b/Products/CMFDynamicViewFTI/tests/test_fti.py\nindex 18a0e26..be909d4 100644\n--- a/Products/CMFDynamicViewFTI/tests/test_fti.py\n+++ b/Products/CMFDynamicViewFTI/tests/test_fti.py\n@@ -13,10 +13,9 @@\n \n \n class TestFTI(CMFDVFTITestCase.CMFDVFTITestCase):\n-\n     def _makeOne(self):\n         # Create and return a DynFolder\n-        self.folder.invokeFactory(\'DynFolder\', id=\'dynfolder\')\n+        self.folder.invokeFactory("DynFolder", id="dynfolder")\n         return self.folder.dynfolder\n \n     def test_doesImplementITypeInformation(self):\n@@ -37,52 +36,50 @@ def test_paranoid_subclass_test(self):\n \n     def test_CreateDynFolder(self):\n         dynfolder = self._makeOne()\n-        self.assertEqual(dynfolder.getPortalTypeName(), \'DynFolder\')\n+        self.assertEqual(dynfolder.getPortalTypeName(), "DynFolder")\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(info.getId(), \'DynFolder\')\n-        self.assertEqual(info.Title(), \'DynFolder\')\n-        self.assertEqual(info.getDefaultViewMethod(dynfolder), \'index_html\')\n+        self.assertEqual(info.getId(), "DynFolder")\n+        self.assertEqual(info.Title(), "DynFolder")\n+        self.assertEqual(info.getDefaultViewMethod(dynfolder), "index_html")\n         self.assertEqual(\n             info.getAvailableViewMethods(dynfolder),\n-            (\'index_html\', \'custom_view\', \'zope3_view\')\n+            ("index_html", "custom_view", "zope3_view"),\n         )\n \n     def test_DynFolderDefaultView(self):\n         dynfolder = self._makeOne()\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(info.getViewMethod(dynfolder), \'index_html\')\n+        self.assertEqual(info.getViewMethod(dynfolder), "index_html")\n \n     def test_DynFolderCustomView(self):\n         dynfolder = self._makeOne()\n-        self.types.DynFolder.manage_changeProperties(\n-            default_view=\'custom_view\'\n-        )\n+        self.types.DynFolder.manage_changeProperties(default_view="custom_view")\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(info.getViewMethod(dynfolder), \'custom_view\')\n+        self.assertEqual(info.getViewMethod(dynfolder), "custom_view")\n \n     def test_DynFolderViewFromLayout(self):\n         dynfolder = self._makeOne()\n-        dynfolder.layout = \'custom_view\'\n+        dynfolder.layout = "custom_view"\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(info.getViewMethod(dynfolder), \'custom_view\')\n+        self.assertEqual(info.getViewMethod(dynfolder), "custom_view")\n \n     def test_DynFolderViewFromCallableLayout(self):\n         dynfolder = self._makeOne()\n-        dynfolder.layout = lambda: \'custom_view\'\n+        dynfolder.layout = lambda: "custom_view"\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(info.getViewMethod(dynfolder), \'custom_view\')\n+        self.assertEqual(info.getViewMethod(dynfolder), "custom_view")\n \n     def test_NoneLayoutReturnsDefaultView(self):\n         dynfolder = self._makeOne()\n         dynfolder.layout = None\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(info.getViewMethod(dynfolder), \'index_html\')\n+        self.assertEqual(info.getViewMethod(dynfolder), "index_html")\n \n     def test_EmptyLayoutReturnsDefaultView(self):\n         dynfolder = self._makeOne()\n-        dynfolder.layout = \'\'\n+        dynfolder.layout = ""\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(info.getViewMethod(dynfolder), \'index_html\')\n+        self.assertEqual(info.getViewMethod(dynfolder), "index_html")\n \n     def test_InvalidLayoutRaisesTypeError(self):\n         dynfolder = self._makeOne()\n@@ -92,40 +89,34 @@ def test_InvalidLayoutRaisesTypeError(self):\n \n     def test_EnforceLayoutAvailable(self):\n         dynfolder = self._makeOne()\n-        dynfolder.layout = \'custom_view\'\n+        dynfolder.layout = "custom_view"\n         info = self.types.getTypeInfo(dynfolder)\n         self.assertEqual(\n-            info.getViewMethod(dynfolder, enforce_available=True),\n-            \'custom_view\'\n+            info.getViewMethod(dynfolder, enforce_available=True), "custom_view"\n         )\n \n     def test_UnavailableLayoutReturnsDefaultView(self):\n         dynfolder = self._makeOne()\n-        dynfolder.layout = \'bad_view\'\n+        dynfolder.layout = "bad_view"\n         info = self.types.getTypeInfo(dynfolder)\n         self.assertEqual(\n-            info.getViewMethod(dynfolder, enforce_available=True),\n-            \'index_html\'\n+            info.getViewMethod(dynfolder, enforce_available=True), "index_html"\n         )\n \n     def test_CheckLayoutExists(self):\n         dynfolder = self._makeOne()\n-        dynfolder.manage_addDTMLMethod(\'custom_view\', file=\'\')\n-        dynfolder.layout = \'custom_view\'\n+        dynfolder.manage_addDTMLMethod("custom_view", file="")\n+        dynfolder.layout = "custom_view"\n         info = self.types.getTypeInfo(dynfolder)\n         self.assertEqual(\n-            info.getViewMethod(dynfolder, check_exists=True),\n-            \'custom_view\'\n+            info.getViewMethod(dynfolder, check_exists=True), "custom_view"\n         )\n \n     def test_MissingLayoutReturnsDefaultView(self):\n         dynfolder = self._makeOne()\n-        dynfolder.layout = \'bad_view\'\n+        dynfolder.layout = "bad_view"\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(\n-            info.getViewMethod(dynfolder, check_exists=True),\n-            \'index_html\'\n-        )\n+        self.assertEqual(info.getViewMethod(dynfolder, check_exists=True), "index_html")\n \n     def test_DynFolderDefaultPage(self):\n         dynfolder = self._makeOne()\n@@ -134,15 +125,15 @@ def test_DynFolderDefaultPage(self):\n \n     def test_DynFolderDefaultPageFromAttribute(self):\n         dynfolder = self._makeOne()\n-        dynfolder.default_page = \'custom_page\'\n+        dynfolder.default_page = "custom_page"\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(info.getDefaultPage(dynfolder), \'custom_page\')\n+        self.assertEqual(info.getDefaultPage(dynfolder), "custom_page")\n \n     def test_DynFolderDefaultPageFromCallable(self):\n         dynfolder = self._makeOne()\n-        dynfolder.default_page = lambda: \'custom_page\'\n+        dynfolder.default_page = lambda: "custom_page"\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(info.getDefaultPage(dynfolder), \'custom_page\')\n+        self.assertEqual(info.getDefaultPage(dynfolder), "custom_page")\n \n     def test_NoneDefaultPageReturnsNone(self):\n         dynfolder = self._makeOne()\n@@ -152,7 +143,7 @@ def test_NoneDefaultPageReturnsNone(self):\n \n     def test_EmptyDefaultPageReturnsNone(self):\n         dynfolder = self._makeOne()\n-        dynfolder.default_page = \'\'\n+        dynfolder.default_page = ""\n         info = self.types.getTypeInfo(dynfolder)\n         self.assertEqual(info.getDefaultPage(dynfolder), None)\n \n@@ -164,84 +155,72 @@ def test_InvalidDefaultPageRaisesTypeError(self):\n \n     def test_CheckDefaultPageExists(self):\n         dynfolder = self._makeOne()\n-        dynfolder.manage_addDTMLMethod(\'custom_page\', file=\'\')\n-        dynfolder.default_page = \'custom_page\'\n+        dynfolder.manage_addDTMLMethod("custom_page", file="")\n+        dynfolder.default_page = "custom_page"\n         info = self.types.getTypeInfo(dynfolder)\n         self.assertEqual(\n-            info.getDefaultPage(dynfolder, check_exists=True),\n-            \'custom_page\'\n+            info.getDefaultPage(dynfolder, check_exists=True), "custom_page"\n         )\n \n     def test_MissingDefaultPageReturnsNone(self):\n         dynfolder = self._makeOne()\n-        dynfolder.default_page = \'bad_page\'\n+        dynfolder.default_page = "bad_page"\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(\n-            info.getDefaultPage(dynfolder, check_exists=True),\n-            None\n-        )\n+        self.assertEqual(info.getDefaultPage(dynfolder, check_exists=True), None)\n \n     def test_NonFolderishObjectReturnsNone(self):\n         dynfolder = self._makeOne()\n         dynfolder.isPrincipiaFolderish = 0\n-        dynfolder.default_page = \'custom_page\'\n+        dynfolder.default_page = "custom_page"\n         info = self.types.getTypeInfo(dynfolder)\n         self.assertEqual(info.getDefaultPage(dynfolder), None)\n \n     def test_DefaultViewWithBadLayoutUseFallback(self):\n         dynfolder = self._makeOne()\n-        dynfolder.layout = \'bad_view\'\n+        dynfolder.layout = "bad_view"\n         info = self.types.getTypeInfo(dynfolder)\n         # fallback not returned if not activated\n         self.assertFalse(info.default_view_fallback)\n-        self.assertEqual(\n-            info.defaultView(dynfolder),\n-            \'bad_view\'\n-        )\n+        self.assertEqual(info.defaultView(dynfolder), "bad_view")\n         # enable fallback\n         info.default_view_fallback = True\n-        self.assertEqual(\n-            info.defaultView(dynfolder),\n-            info.default_view\n-        )\n+        self.assertEqual(info.defaultView(dynfolder), info.default_view)\n \n \n class TestModifyDefaultPage(CMFDVFTITestCase.CMFDVFTITestCase):\n-\n     def _makeOne(self):\n         # Create and return a DynFolder\n-        self.folder.invokeFactory(\'DynFolder\', id=\'dynfolder\')\n+        self.folder.invokeFactory("DynFolder", id="dynfolder")\n         dynfolder = self.folder.dynfolder\n-        dynfolder.invokeFactory(\'DynDocument\', id=\'default_document\')\n-        dynfolder.setDefaultPage(\'default_document\')\n+        dynfolder.invokeFactory("DynDocument", id="default_document")\n+        dynfolder.setDefaultPage("default_document")\n         return dynfolder\n \n     def test_rename_default_page(self):\n         dynfolder = self._makeOne()\n-        self.assertEqual(dynfolder.getDefaultPage(), \'default_document\')\n+        self.assertEqual(dynfolder.getDefaultPage(), "default_document")\n         transaction.commit()\n-        dynfolder.manage_renameObject(\'default_document\', \'renamed_default\')\n-        self.assertFalse(\'default_document\' in dynfolder.objectIds())\n-        self.assertTrue(\'renamed_default\' in dynfolder.objectIds())\n-        self.assertEqual(dynfolder.getDefaultPage(), \'renamed_default\')\n-        self.assertEqual(dynfolder.getProperty(\'default_page\', \'\'),\n-                         \'renamed_default\')\n+        dynfolder.manage_renameObject("default_document", "renamed_default")\n+        self.assertFalse("default_document" in dynfolder.objectIds())\n+        self.assertTrue("renamed_default" in dynfolder.objectIds())\n+        self.assertEqual(dynfolder.getDefaultPage(), "renamed_default")\n+        self.assertEqual(dynfolder.getProperty("default_page", ""), "renamed_default")\n \n     def test_delete_default_page(self):\n         dynfolder = self._makeOne()\n-        self.assertEqual(dynfolder.getDefaultPage(), \'default_document\')\n-        dynfolder.manage_delObjects([\'default_document\'])\n-        self.assertFalse(\'default_document\' in dynfolder.objectIds())\n+        self.assertEqual(dynfolder.getDefaultPage(), "default_document")\n+        dynfolder.manage_delObjects(["default_document"])\n+        self.assertFalse("default_document" in dynfolder.objectIds())\n         self.assertEqual(dynfolder.getDefaultPage(), None)\n-        self.assertEqual(dynfolder.getProperty(\'default_page\', \'\'), \'\')\n+        self.assertEqual(dynfolder.getProperty("default_page", ""), "")\n \n     def test_cut_default_page(self):\n         dynfolder = self._makeOne()\n-        self.assertEqual(dynfolder.getDefaultPage(), \'default_document\')\n+        self.assertEqual(dynfolder.getDefaultPage(), "default_document")\n         transaction.commit()\n-        clipboard = dynfolder.manage_cutObjects([\'default_document\'])\n+        clipboard = dynfolder.manage_cutObjects(["default_document"])\n         self.folder.manage_pasteObjects(clipboard)\n-        self.assertFalse(\'default_document\' in dynfolder.objectIds())\n-        self.assertTrue(\'default_document\' in self.folder.objectIds())\n+        self.assertFalse("default_document" in dynfolder.objectIds())\n+        self.assertTrue("default_document" in self.folder.objectIds())\n         self.assertEqual(dynfolder.getDefaultPage(), None)\n-        self.assertEqual(dynfolder.getProperty(\'default_page\', \'\'), \'\')\n+        self.assertEqual(dynfolder.getProperty("default_page", ""), "")\ndiff --git a/Products/__init__.py b/Products/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/Products/__init__.py\n+++ b/Products/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/setup.py b/setup.py\nindex c30f06b..8b18a63 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = \'7.0.1.dev0\'\n+version = "7.0.1.dev0"\n \n long_description = open("README.rst").read()\n long_description += "\\n"\n@@ -10,7 +10,7 @@\n \n \n setup(\n-    name=\'Products.CMFDynamicViewFTI\',\n+    name="Products.CMFDynamicViewFTI",\n     version=version,\n     description="CMFDynamicViewFTI is a product for dynamic views in CMF.",\n     long_description=long_description,\n@@ -27,32 +27,32 @@\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'Zope CMF Plone dynamic view\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/Products.CMFDynamicViewFTI\',\n-    license=\'ZPL\',\n+    keywords="Zope CMF Plone dynamic view",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/Products.CMFDynamicViewFTI",\n+    license="ZPL",\n     packages=find_packages(),\n-    namespace_packages=[\'Products\'],\n+    namespace_packages=["Products"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-            \'plone.app.contentmenu\',\n-            \'zope.publisher\',\n-            \'plone.app.testing >= 4.2.5\',\n+            "plone.app.contentmenu",\n+            "zope.publisher",\n+            "plone.app.testing >= 4.2.5",\n         ]\n     ),\n     python_requires=">=3.8",\n     install_requires=[\n-        \'setuptools\',\n-        \'zope.browsermenu\',\n-        \'zope.component\',\n-        \'zope.interface\',\n-        \'Products.CMFCore\',\n-        \'Products.GenericSetup\',\n-        \'Acquisition\',\n-        \'ExtensionClass\',\n-        \'Zope\',\n+        "setuptools",\n+        "zope.browsermenu",\n+        "zope.component",\n+        "zope.interface",\n+        "Products.CMFCore",\n+        "Products.GenericSetup",\n+        "Acquisition",\n+        "ExtensionClass",\n+        "Zope",\n     ],\n )\n'

Repository: Products.CMFDynamicViewFTI


Branch: refs/heads/master
Date: 2023-04-09T10:26:58+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/f7953a124ea2a6a17881f68aa4928e7a11ed2e42

fix: no need pkgutil fallback

Files changed:
M Products/__init__.py

b'diff --git a/Products/__init__.py b/Products/__init__.py\nindex 05f0beb..5284146 100644\n--- a/Products/__init__.py\n+++ b/Products/__init__.py\n@@ -1,7 +1 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__("pkg_resources").declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\n'

Repository: Products.CMFDynamicViewFTI


Branch: refs/heads/master
Date: 2023-04-09T10:27:36+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/f7b7a1859648f661afb57dfccadaa22d92020932

chore: pyupgrade

Files changed:
M Products/CMFDynamicViewFTI/browserdefault.py
M Products/CMFDynamicViewFTI/fti.py

b'diff --git a/Products/CMFDynamicViewFTI/browserdefault.py b/Products/CMFDynamicViewFTI/browserdefault.py\nindex 0fdcbba..3d30e2a 100644\n--- a/Products/CMFDynamicViewFTI/browserdefault.py\n+++ b/Products/CMFDynamicViewFTI/browserdefault.py\n@@ -162,7 +162,7 @@ def setLayout(self, layout):\n         # setDefaultPage(), it is turned off by calling setDefaultPage(None).\n         if not (layout and isinstance(layout, str)):\n             raise ValueError(\n-                "layout must be a non empty string, got %s(%s)" % (layout, type(layout))\n+                f"layout must be a non empty string, got {layout}({type(layout)})"\n             )\n \n         defaultPage = self.getDefaultPage()\ndiff --git a/Products/CMFDynamicViewFTI/fti.py b/Products/CMFDynamicViewFTI/fti.py\nindex 66878e9..c99409d 100644\n--- a/Products/CMFDynamicViewFTI/fti.py\n+++ b/Products/CMFDynamicViewFTI/fti.py\n@@ -128,7 +128,7 @@ def getViewMethod(self, context, enforce_available=False, check_exists=False):\n             return default\n         if not isinstance(layout, str):\n             raise TypeError(\n-                "layout of %s must be a string, got %s" % (repr(context), type(layout))\n+                f"layout of {repr(context)} must be a string, got {type(layout)}"\n             )\n         if enforce_available:\n             available = self.getAvailableViewMethods(context)\n'

Repository: Products.CMFDynamicViewFTI


Branch: refs/heads/master
Date: 2023-04-09T10:28:01+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/d5dbf7143825943b7ee1f60ff9f51b345645b224

chore: zpretty ZXML/XML

Files changed:
M Products/CMFDynamicViewFTI/configure.zcml
M Products/CMFDynamicViewFTI/profiles/sample_types/types.xml
M Products/CMFDynamicViewFTI/profiles/sample_types/types/DynDocument.xml
M Products/CMFDynamicViewFTI/profiles/sample_types/types/DynFolder.xml
M Products/CMFDynamicViewFTI/tests/browserdefault.zcml

b'diff --git a/Products/CMFDynamicViewFTI/configure.zcml b/Products/CMFDynamicViewFTI/configure.zcml\nindex 3be0ddd..d822365 100644\n--- a/Products/CMFDynamicViewFTI/configure.zcml\n+++ b/Products/CMFDynamicViewFTI/configure.zcml\n@@ -1,40 +1,43 @@\n <configure\n-   xmlns="http://namespaces.zope.org/zope"\n-   xmlns:browser="http://namespaces.zope.org/browser"\n-   xmlns:five="http://namespaces.zope.org/five"\n-   i18n_domain="cmf_default">\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    xmlns:five="http://namespaces.zope.org/five"\n+    i18n_domain="cmf_default"\n+    >\n \n   <include package="Products.CMFCore" />\n \n   <browser:page\n-     for="zope.browser.interfaces.IAdding"\n-     name="addDVFactoryTypeInformation.html"\n-     template="browser/addWithPresettings.pt"\n-     class=".browser.typeinfo.DVFactoryTypeInformationAddView"\n-     permission="cmf.ManagePortal"\n-     />\n+      name="addDVFactoryTypeInformation.html"\n+      for="zope.browser.interfaces.IAdding"\n+      class=".browser.typeinfo.DVFactoryTypeInformationAddView"\n+      template="browser/addWithPresettings.pt"\n+      permission="cmf.ManagePortal"\n+      />\n \n   <five:registerClass\n-     class=".fti.DynamicViewTypeInformation"\n-     meta_type="Factory-based Type Information with dynamic views"\n-     addview="addDVFactoryTypeInformation.html"\n-     permission="cmf.ManagePortal"\n-     global="False"\n-     />\n+      class=".fti.DynamicViewTypeInformation"\n+      permission="cmf.ManagePortal"\n+      addview="addDVFactoryTypeInformation.html"\n+      global="False"\n+      meta_type="Factory-based Type Information with dynamic views"\n+      />\n \n   <permission\n-    id="cmf.ModifyViewTemplate"\n-    title="Modify view template"\n-    />\n+      id="cmf.ModifyViewTemplate"\n+      title="Modify view template"\n+      />\n \n   <subscriber\n-    for=".interfaces.ISelectableBrowserDefault\n-         zope.container.interfaces.IContainerModifiedEvent"\n-    handler=".browserdefault.check_default_page" />\n+      for=".interfaces.ISelectableBrowserDefault\n+           zope.container.interfaces.IContainerModifiedEvent"\n+      handler=".browserdefault.check_default_page"\n+      />\n \n   <subscriber\n-    for="*\n-         zope.lifecycleevent.interfaces.IObjectMovedEvent"\n-    handler=".browserdefault.rename_default_page" />\n+      for="*\n+           zope.lifecycleevent.interfaces.IObjectMovedEvent"\n+      handler=".browserdefault.rename_default_page"\n+      />\n \n </configure>\ndiff --git a/Products/CMFDynamicViewFTI/profiles/sample_types/types.xml b/Products/CMFDynamicViewFTI/profiles/sample_types/types.xml\nindex 4db83da..da504f5 100644\n--- a/Products/CMFDynamicViewFTI/profiles/sample_types/types.xml\n+++ b/Products/CMFDynamicViewFTI/profiles/sample_types/types.xml\n@@ -1,5 +1,11 @@\n-<?xml version="1.0"?>\n-<object name="portal_types" meta_type="CMF Types Tool">\n- <object name="DynFolder" meta_type="Factory-based Type Information with dynamic views"/>\n- <object name="DynDocument" meta_type="Factory-based Type Information with dynamic views"/>\n+<?xml version="1.0" encoding="utf-8"?>\n+<object meta_type="CMF Types Tool"\n+        name="portal_types"\n+>\n+  <object meta_type="Factory-based Type Information with dynamic views"\n+          name="DynFolder"\n+  />\n+  <object meta_type="Factory-based Type Information with dynamic views"\n+          name="DynDocument"\n+  />\n </object>\ndiff --git a/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynDocument.xml b/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynDocument.xml\nindex 38b87b1..a43631d 100644\n--- a/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynDocument.xml\n+++ b/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynDocument.xml\n@@ -1,27 +1,36 @@\n-<?xml version="1.0"?>\n-<object name="DynDocument"\n-   meta_type="Factory-based Type Information with dynamic views"\n-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n- <property name="title">DynDocument</property>\n- <property\n-    name="description">A page in the site. Can contain rich text.</property>\n- <property name="content_icon">document_icon.gif</property>\n- <property name="content_meta_type">DynDocument</property>\n- <property name="product">CMFDynamicViewFTI</property>\n- <property name="factory">addDynDocument</property>\n- <property name="immediate_view">metadata_edit_form</property>\n- <property name="global_allow">True</property>\n- <property name="filter_content_types">True</property>\n- <property name="allowed_content_types"/>\n- <property name="default_view">index_html</property>\n- <property name="view_methods">\n-  <element value="document_view"/>\n-  <element value="custom_view"/>\n- </property>\n- <alias from="(Default)" to="(Dynamic view)"/>\n- <alias from="view" to="(Selected layout)"/>\n- <action title="View" action_id="view" category="object" condition_expr=""\n-    url_expr="string:${object_url}/view" visible="True">\n-  <permission value="View"/>\n- </action>\n+<?xml version="1.0" encoding="utf-8"?>\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        meta_type="Factory-based Type Information with dynamic views"\n+        name="DynDocument"\n+>\n+  <property name="title">DynDocument</property>\n+  <property name="description">A page in the site. Can contain rich text.</property>\n+  <property name="content_icon">document_icon.gif</property>\n+  <property name="content_meta_type">DynDocument</property>\n+  <property name="product">CMFDynamicViewFTI</property>\n+  <property name="factory">addDynDocument</property>\n+  <property name="immediate_view">metadata_edit_form</property>\n+  <property name="global_allow">True</property>\n+  <property name="filter_content_types">True</property>\n+  <property name="allowed_content_types" />\n+  <property name="default_view">index_html</property>\n+  <property name="view_methods">\n+    <element value="document_view" />\n+    <element value="custom_view" />\n+  </property>\n+  <alias from="(Default)"\n+         to="(Dynamic view)"\n+  />\n+  <alias from="view"\n+         to="(Selected layout)"\n+  />\n+  <action action_id="view"\n+          category="object"\n+          condition_expr=""\n+          title="View"\n+          url_expr="string:${object_url}/view"\n+          visible="True"\n+  >\n+    <permission value="View" />\n+  </action>\n </object>\ndiff --git a/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynFolder.xml b/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynFolder.xml\nindex 5d7d6c6..c07edcd 100644\n--- a/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynFolder.xml\n+++ b/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynFolder.xml\n@@ -1,25 +1,35 @@\n-<?xml version="1.0"?>\n-<object name="DynFolder"\n-   meta_type="Factory-based Type Information with dynamic views"\n-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n- <property name="title">DynFolder</property>\n- <property name="content_icon">folder_icon.gif</property>\n- <property name="content_meta_type">DynFolder</property>\n- <property name="product">CMFDynamicViewFTI</property>\n- <property name="factory">addDynFolder</property>\n- <property name="immediate_view">folder_edit_form</property>\n- <property name="global_allow">True</property>\n- <property name="filter_content_types">False</property>\n- <property name="default_view">index_html</property>\n- <property name="view_methods">\n-  <element value="index_html"/>\n-  <element value="custom_view"/>\n-  <element value="zope3_view"/>\n- </property>\n- <alias from="(Default)" to="(Dynamic view)"/>\n- <alias from="view" to="(Selected layout)"/>\n- <action title="View" action_id="view" category="object" condition_expr=""\n-    url_expr="string:${object_url}" visible="True">\n-  <permission value="View"/>\n- </action>\n+<?xml version="1.0" encoding="utf-8"?>\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        meta_type="Factory-based Type Information with dynamic views"\n+        name="DynFolder"\n+>\n+  <property name="title">DynFolder</property>\n+  <property name="content_icon">folder_icon.gif</property>\n+  <property name="content_meta_type">DynFolder</property>\n+  <property name="product">CMFDynamicViewFTI</property>\n+  <property name="factory">addDynFolder</property>\n+  <property name="immediate_view">folder_edit_form</property>\n+  <property name="global_allow">True</property>\n+  <property name="filter_content_types">False</property>\n+  <property name="default_view">index_html</property>\n+  <property name="view_methods">\n+    <element value="index_html" />\n+    <element value="custom_view" />\n+    <element value="zope3_view" />\n+  </property>\n+  <alias from="(Default)"\n+         to="(Dynamic view)"\n+  />\n+  <alias from="view"\n+         to="(Selected layout)"\n+  />\n+  <action action_id="view"\n+          category="object"\n+          condition_expr=""\n+          title="View"\n+          url_expr="string:${object_url}"\n+          visible="True"\n+  >\n+    <permission value="View" />\n+  </action>\n </object>\ndiff --git a/Products/CMFDynamicViewFTI/tests/browserdefault.zcml b/Products/CMFDynamicViewFTI/tests/browserdefault.zcml\nindex 1624eb1..09a87e8 100644\n--- a/Products/CMFDynamicViewFTI/tests/browserdefault.zcml\n+++ b/Products/CMFDynamicViewFTI/tests/browserdefault.zcml\n@@ -1,14 +1,15 @@\n <configure\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    i18n_domain="plonetest">\n+    i18n_domain="plonetest"\n+    >\n \n-<browser:view\n-    for=".test_browserdefault.IDummy"\n-    provides="zope.publisher.interfaces.browser.IBrowserView"\n-    permission="zope2.Public"\n-    name="zope3_view"\n-    title="Zope3 Test View"\n-    menu="plone_displayviews"\n-    />\n+  <browser:view\n+      name="zope3_view"\n+      provides="zope.publisher.interfaces.browser.IBrowserView"\n+      for=".test_browserdefault.IDummy"\n+      permission="zope2.Public"\n+      menu="plone_displayviews"\n+      title="Zope3 Test View"\n+      />\n \n </configure>\n'

Repository: Products.CMFDynamicViewFTI


Branch: refs/heads/master
Date: 2023-04-09T10:28:20+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/5bfab7aa15180e52eb292e27ae50bd4c4a7f0ae0

chore: zpretty PT

Files changed:
M Products/CMFDynamicViewFTI/browser/addWithPresettings.pt

b'diff --git a/Products/CMFDynamicViewFTI/browser/addWithPresettings.pt b/Products/CMFDynamicViewFTI/browser/addWithPresettings.pt\nindex b8607aa..bd39d75 100644\n--- a/Products/CMFDynamicViewFTI/browser/addWithPresettings.pt\n+++ b/Products/CMFDynamicViewFTI/browser/addWithPresettings.pt\n@@ -1,53 +1,79 @@\n <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">\n <html>\n-<head>\n-<meta http-equiv="content-type" content="text/html;charset=utf-8" />\n+  <head>\n+    <meta http-equiv="content-type"\n+          content="text/html;charset=utf-8"\n+    />\n \n-</head>\n-<body>\n+  </head>\n+  <body>\n \n-<h1 tal:content="view/title">FORM TITLE</h1>\n+    <h1 tal:content="view/title">FORM TITLE</h1>\n \n-<p class="form-help" tal:content="view/description">DESCRIPTION TEXT.</p>\n+    <p class="form-help"\n+       tal:content="view/description"\n+    >DESCRIPTION TEXT.</p>\n \n-<form action="." method="post"\n-   tal:attributes="action request/ACTUAL_URL">\n-<table cellspacing="0" cellpadding="2" border="0">\n- <tr>\n-  <td>\n-   <div class="form-label">ID</div>\n-  </td>\n-  <td>\n-   <input type="text" name="add_input_name" size="40" />\n-  </td>\n- </tr>\n- <tr tal:condition="view/getProfileInfos">\n-  <td>\n-   <div class="form-label">Presettings</div>\n-  </td>\n-  <td>\n-   <select name="settings_id">\n-    <option value="" selected="selected">(None)</option>\n-    <optgroup label="PROFILE_TITLE"\n-       tal:repeat="profile view/getProfileInfos"\n-       tal:attributes="label profile/title">\n-     <option value="SETTINGS_ID"\n-             tal:repeat="obj_id profile/obj_ids"\n-             tal:attributes="value string:${profile/id}/${obj_id}"\n-             tal:content="obj_id">OBJ ID</option></optgroup>\n-   </select>\n-  </td>\n- </tr>\n- <tr>\n-  <td>\n+    <form action="."\n+          method="post"\n+          tal:attributes="\n+            action request/ACTUAL_URL;\n+          "\n+    >\n+      <table border="0"\n+             cellpadding="2"\n+             cellspacing="0"\n+      >\n+        <tr>\n+          <td>\n+            <div class="form-label">ID</div>\n+          </td>\n+          <td>\n+            <input name="add_input_name"\n+                   size="40"\n+                   type="text"\n+            />\n+          </td>\n+        </tr>\n+        <tr tal:condition="view/getProfileInfos">\n+          <td>\n+            <div class="form-label">Presettings</div>\n+          </td>\n+          <td>\n+            <select name="settings_id">\n+              <option selected="selected"\n+                      value=""\n+              >(None)</option>\n+              <optgroup label="PROFILE_TITLE"\n+                        tal:repeat="profile view/getProfileInfos"\n+                        tal:attributes="\n+                          label profile/title;\n+                        "\n+              >\n+                <option value="SETTINGS_ID"\n+                        tal:repeat="obj_id profile/obj_ids"\n+                        tal:content="obj_id"\n+                        tal:attributes="\n+                          value string:${profile/id}/${obj_id};\n+                        "\n+                >OBJ ID</option></optgroup>\n+            </select>\n+          </td>\n+        </tr>\n+        <tr>\n+          <td>\n    &nbsp;\n-  </td>\n-  <td>\n-   <input class="form-element" type="submit" name="submit_add" value="Add" />\n-  </td>\n- </tr>\n-</table>\n-</form>\n+          </td>\n+          <td>\n+            <input class="form-element"\n+                   name="submit_add"\n+                   type="submit"\n+                   value="Add"\n+            />\n+          </td>\n+        </tr>\n+      </table>\n+    </form>\n \n-</body>\n+  </body>\n </html>\n'

Repository: Products.CMFDynamicViewFTI


Branch: refs/heads/master
Date: 2023-04-09T10:29:47+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/8ca59c827cf6cb62f775fc9a82b70bc05fdaf98f

feat: codespell

Files changed:
M Products/CMFDynamicViewFTI/browserdefault.py

b'diff --git a/Products/CMFDynamicViewFTI/browserdefault.py b/Products/CMFDynamicViewFTI/browserdefault.py\nindex 3d30e2a..130907f 100644\n--- a/Products/CMFDynamicViewFTI/browserdefault.py\n+++ b/Products/CMFDynamicViewFTI/browserdefault.py\n@@ -247,7 +247,7 @@ def check_default_page(obj, event):\n \n \n def rename_default_page(obj, event):\n-    """event subscriber, rename default page if targte was renamed\n+    """event subscriber, rename default page if target was renamed\n \n     used by default for zope.lifecycleevent.interfaces.IObjectMovedEvent\n     """\n'

Repository: Products.CMFDynamicViewFTI


Branch: refs/heads/master
Date: 2023-04-09T10:31:15+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/36dec7711288e454ea4e8971ebd4295cdf0a59af

feat: flake8

Files changed:
M Products/CMFDynamicViewFTI/tests/test_browserdefault.py
M Products/CMFDynamicViewFTI/tests/test_fti.py

b'diff --git a/Products/CMFDynamicViewFTI/tests/test_browserdefault.py b/Products/CMFDynamicViewFTI/tests/test_browserdefault.py\nindex 9e9d725..6f5d674 100644\n--- a/Products/CMFDynamicViewFTI/tests/test_browserdefault.py\n+++ b/Products/CMFDynamicViewFTI/tests/test_browserdefault.py\n@@ -1,4 +1,3 @@\n-from Products.CMFCore.utils import getToolByName\n from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin\n from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault\n from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault\ndiff --git a/Products/CMFDynamicViewFTI/tests/test_fti.py b/Products/CMFDynamicViewFTI/tests/test_fti.py\nindex be909d4..39d7278 100644\n--- a/Products/CMFDynamicViewFTI/tests/test_fti.py\n+++ b/Products/CMFDynamicViewFTI/tests/test_fti.py\n@@ -1,5 +1,3 @@\n-from plone.app.testing import TEST_USER_NAME\n-from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFCore.interfaces import ITypeInformation\n from Products.CMFDynamicViewFTI.fti import DynamicViewTypeInformation\n from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation\n'

Repository: Products.CMFDynamicViewFTI


Branch: refs/heads/master
Date: 2023-04-09T10:31:45+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/eef89b2a6b6e25fa20283bc65668d5ef232fadeb

cleanup: drop Plone 4.3 support

Files changed:
D Products/CMFDynamicViewFTI/interface.py

b'diff --git a/Products/CMFDynamicViewFTI/interface.py b/Products/CMFDynamicViewFTI/interface.py\ndeleted file mode 100644\nindex 9532ddf..0000000\n--- a/Products/CMFDynamicViewFTI/interface.py\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-# BBB module will be removed at some point. We will still need it as long as\n-# we plan to support Plone 4.3.x\n-from Products.CMFDynamicViewFTI.interfaces import *\n-\n-import warnings\n-\n-\n-warnings.warn(\n-    "import from Products.CMFDynamicViewFTI.interfaces instead", DeprecationWarning\n-)\n'

Repository: Products.CMFDynamicViewFTI


Branch: refs/heads/master
Date: 2023-04-09T10:38:28+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/4b7b2faa945b17d3da35dd266eb3f782d6795d23

feat: replace CMFPlone for plone.base

Files changed:
M Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py

b'diff --git a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py\nindex 87f3450..f3d9b7c 100644\n--- a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py\n+++ b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py\n@@ -1,9 +1,9 @@\n from plone.app import testing\n from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import PloneSandboxLayer\n+from plone.base.utils import unrestricted_construct_instance\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import _createObjectByType\n from Products.GenericSetup import EXTENSION\n from Products.GenericSetup import profile_registry\n \n@@ -54,7 +54,7 @@ def setUp(self):\n         """Set up before each test."""\n         self.app = self.layer["app"]\n         self.portal = self.layer["portal"]\n-        _createObjectByType("DynFolder", self.portal, id="folder")\n+        unrestricted_construct_instance("DynFolder", self.portal, id="folder")\n         self.folder = self.portal.folder\n         self.types = getToolByName(self.portal, "portal_types")\n         self.fti = self.types["DynFolder"]\n'

Repository: Products.CMFDynamicViewFTI


Branch: refs/heads/master
Date: 2023-04-09T13:31:59+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/229eac83522842c3e8279a4d587a3c44b31630eb

cleanup: remove superfluous method

Files changed:
M Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py

b'diff --git a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py\nindex f3d9b7c..bbd692a 100644\n--- a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py\n+++ b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py\n@@ -33,9 +33,6 @@ def setUpZope(self, app, configurationContext):\n     def setUpPloneSite(self, portal):\n         self.applyProfile(portal, "CMFDynamicViewFTI:CMFDVFTI_sampletypes")\n \n-    def tearDownZope(self, app):\n-        pass\n-\n \n CDV_FIXTURE = CMFDynamicViewFTIFixture()\n CDV_FUNCTIONAL_TESTING = testing.FunctionalTesting(\n'

Repository: Products.CMFDynamicViewFTI


Branch: refs/heads/master
Date: 2023-04-09T13:31:59+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/2531d0090a6f03191998e4ebde40163bcdc68d03

fix: run test with tox

Turns out that when `plone.testing` installs distributions from the
`Products` namespace, it enforces that all of them have to be in the
same folder (which kind of make sense) but `tox` has a different idea on
that :-/

`tox` installs all dependencies but the development package is kept
outside that structure, and thus the `plone.testing` condition is not
met.

With this patch we check if it is the `tox` case and force the install.

Files changed:
M Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py

b'diff --git a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py\nindex bbd692a..21654b2 100644\n--- a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py\n+++ b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py\n@@ -30,6 +30,35 @@ def setUpZope(self, app, configurationContext):\n             name="browserdefault.zcml", package=Products.CMFDynamicViewFTI.tests\n         )\n \n+        from plone.testing.zope import _INSTALLED_PRODUCTS\n+\n+        if "Products.CMFDynamicViewFTI" not in _INSTALLED_PRODUCTS.keys():\n+            # replicate plone.testing.zope.installProduct\n+            # when running the tests via tox Products.CMFDynamicViewFTI\n+            # folder location is different than the other Products.*\n+            # packages.\n+            # `installProduct` checks for that and bails out otherwise.\n+            from AccessControl.class_init import InitializeClass\n+            from OFS.Application import get_folder_permissions\n+            from OFS.Application import install_product\n+            from OFS.Folder import Folder\n+            from pathlib import Path\n+\n+            import inspect\n+\n+            module_path = Path(inspect.getfile(Products.CMFDynamicViewFTI))\n+            product_folder = str(module_path.parent.parent)\n+\n+            install_product(\n+                app,\n+                product_folder,\n+                "CMFDynamicViewFTI",\n+                [],\n+                get_folder_permissions(),\n+                raise_exc=1,\n+            )\n+            InitializeClass(Folder)\n+\n     def setUpPloneSite(self, portal):\n         self.applyProfile(portal, "CMFDynamicViewFTI:CMFDVFTI_sampletypes")\n \n'

Repository: Products.CMFDynamicViewFTI


Branch: refs/heads/master
Date: 2023-04-09T13:32:00+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/87952ee390a6ae42d9fb6d7fe4c8218c4a7826a1

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 8b18a63..5cd375c 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -38,20 +38,19 @@\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-            "plone.app.contentmenu",\n-            "zope.publisher",\n+            "Products.GenericSetup",\n+            "plone.base",\n             "plone.app.testing >= 4.2.5",\n+            "plone.testing",\n+            "zope.publisher",\n         ]\n     ),\n     python_requires=">=3.8",\n     install_requires=[\n         "setuptools",\n+        "zope.browser",\n         "zope.browsermenu",\n-        "zope.component",\n-        "zope.interface",\n         "Products.CMFCore",\n-        "Products.GenericSetup",\n-        "Acquisition",\n         "ExtensionClass",\n         "Zope",\n     ],\n'

Repository: Products.CMFDynamicViewFTI


Branch: refs/heads/master
Date: 2023-04-10T12:55:02+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/ebd39f2d13b11ad4f96879c9671e7a8759721f45

Merge pull request #24 from plone/config-with-default-template-7adb382a

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/3333c742.internal
A tox.ini
M Products/CMFDynamicViewFTI/__init__.py
M Products/CMFDynamicViewFTI/browser/addWithPresettings.pt
M Products/CMFDynamicViewFTI/browser/typeinfo.py
M Products/CMFDynamicViewFTI/browserdefault.py
M Products/CMFDynamicViewFTI/configure.zcml
M Products/CMFDynamicViewFTI/content_for_tests.py
M Products/CMFDynamicViewFTI/fti.py
M Products/CMFDynamicViewFTI/interfaces.py
M Products/CMFDynamicViewFTI/permissions.py
M Products/CMFDynamicViewFTI/profiles/sample_types/types.xml
M Products/CMFDynamicViewFTI/profiles/sample_types/types/DynDocument.xml
M Products/CMFDynamicViewFTI/profiles/sample_types/types/DynFolder.xml
M Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py
M Products/CMFDynamicViewFTI/tests/browserdefault.zcml
M Products/CMFDynamicViewFTI/tests/test_browserdefault.py
M Products/CMFDynamicViewFTI/tests/test_fti.py
M Products/__init__.py
M pyproject.toml
M setup.cfg
M setup.py
D Products/CMFDynamicViewFTI/interface.py
D bootstrap.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..d915ae9\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "3333c742"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/Products/CMFDynamicViewFTI/__init__.py b/Products/CMFDynamicViewFTI/__init__.py\nindex bba4fc4..293c4a2 100644\n--- a/Products/CMFDynamicViewFTI/__init__.py\n+++ b/Products/CMFDynamicViewFTI/__init__.py\n@@ -7,26 +7,18 @@\n \n def initialize(context):\n     # (DynamicViewTypeInformation factory is created from ZCML)\n-    cmf_utils.registerIcon(\n-        DynamicViewTypeInformation,\n-        \'images/typeinfo.gif\',\n-        globals()\n-    )\n+    cmf_utils.registerIcon(DynamicViewTypeInformation, "images/typeinfo.gif", globals())\n \n     context.registerClass(\n         content_for_tests.DynFolder,\n         permission=AddPortalFolders,\n-        constructors=(\n-            (\'addDynFolder\', content_for_tests.addDynFolder),\n-        ),\n-        icon=\'images/typeinfo.gif\'\n+        constructors=(("addDynFolder", content_for_tests.addDynFolder),),\n+        icon="images/typeinfo.gif",\n     )\n \n     context.registerClass(\n         content_for_tests.DynDocument,\n         permission=AddPortalContent,\n-        constructors=(\n-            (\'addDynDocument\', content_for_tests.addDynDocument),\n-        ),\n-        icon=\'images/typeinfo.gif\'\n+        constructors=(("addDynDocument", content_for_tests.addDynDocument),),\n+        icon="images/typeinfo.gif",\n     )\ndiff --git a/Products/CMFDynamicViewFTI/browser/addWithPresettings.pt b/Products/CMFDynamicViewFTI/browser/addWithPresettings.pt\nindex b8607aa..bd39d75 100644\n--- a/Products/CMFDynamicViewFTI/browser/addWithPresettings.pt\n+++ b/Products/CMFDynamicViewFTI/browser/addWithPresettings.pt\n@@ -1,53 +1,79 @@\n <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">\n <html>\n-<head>\n-<meta http-equiv="content-type" content="text/html;charset=utf-8" />\n+  <head>\n+    <meta http-equiv="content-type"\n+          content="text/html;charset=utf-8"\n+    />\n \n-</head>\n-<body>\n+  </head>\n+  <body>\n \n-<h1 tal:content="view/title">FORM TITLE</h1>\n+    <h1 tal:content="view/title">FORM TITLE</h1>\n \n-<p class="form-help" tal:content="view/description">DESCRIPTION TEXT.</p>\n+    <p class="form-help"\n+       tal:content="view/description"\n+    >DESCRIPTION TEXT.</p>\n \n-<form action="." method="post"\n-   tal:attributes="action request/ACTUAL_URL">\n-<table cellspacing="0" cellpadding="2" border="0">\n- <tr>\n-  <td>\n-   <div class="form-label">ID</div>\n-  </td>\n-  <td>\n-   <input type="text" name="add_input_name" size="40" />\n-  </td>\n- </tr>\n- <tr tal:condition="view/getProfileInfos">\n-  <td>\n-   <div class="form-label">Presettings</div>\n-  </td>\n-  <td>\n-   <select name="settings_id">\n-    <option value="" selected="selected">(None)</option>\n-    <optgroup label="PROFILE_TITLE"\n-       tal:repeat="profile view/getProfileInfos"\n-       tal:attributes="label profile/title">\n-     <option value="SETTINGS_ID"\n-             tal:repeat="obj_id profile/obj_ids"\n-             tal:attributes="value string:${profile/id}/${obj_id}"\n-             tal:content="obj_id">OBJ ID</option></optgroup>\n-   </select>\n-  </td>\n- </tr>\n- <tr>\n-  <td>\n+    <form action="."\n+          method="post"\n+          tal:attributes="\n+            action request/ACTUAL_URL;\n+          "\n+    >\n+      <table border="0"\n+             cellpadding="2"\n+             cellspacing="0"\n+      >\n+        <tr>\n+          <td>\n+            <div class="form-label">ID</div>\n+          </td>\n+          <td>\n+            <input name="add_input_name"\n+                   size="40"\n+                   type="text"\n+            />\n+          </td>\n+        </tr>\n+        <tr tal:condition="view/getProfileInfos">\n+          <td>\n+            <div class="form-label">Presettings</div>\n+          </td>\n+          <td>\n+            <select name="settings_id">\n+              <option selected="selected"\n+                      value=""\n+              >(None)</option>\n+              <optgroup label="PROFILE_TITLE"\n+                        tal:repeat="profile view/getProfileInfos"\n+                        tal:attributes="\n+                          label profile/title;\n+                        "\n+              >\n+                <option value="SETTINGS_ID"\n+                        tal:repeat="obj_id profile/obj_ids"\n+                        tal:content="obj_id"\n+                        tal:attributes="\n+                          value string:${profile/id}/${obj_id};\n+                        "\n+                >OBJ ID</option></optgroup>\n+            </select>\n+          </td>\n+        </tr>\n+        <tr>\n+          <td>\n    &nbsp;\n-  </td>\n-  <td>\n-   <input class="form-element" type="submit" name="submit_add" value="Add" />\n-  </td>\n- </tr>\n-</table>\n-</form>\n+          </td>\n+          <td>\n+            <input class="form-element"\n+                   name="submit_add"\n+                   type="submit"\n+                   value="Add"\n+            />\n+          </td>\n+        </tr>\n+      </table>\n+    </form>\n \n-</body>\n+  </body>\n </html>\ndiff --git a/Products/CMFDynamicViewFTI/browser/typeinfo.py b/Products/CMFDynamicViewFTI/browser/typeinfo.py\nindex 9fced65..1ec9362 100644\n--- a/Products/CMFDynamicViewFTI/browser/typeinfo.py\n+++ b/Products/CMFDynamicViewFTI/browser/typeinfo.py\n@@ -12,4 +12,4 @@ class DVFactoryTypeInformationAddView(FactoryTypeInformationAddView):\n \n     klass = DynamicViewTypeInformation\n \n-    description = \'A dynamic view type information object defines a portal type.\'\n+    description = "A dynamic view type information object defines a portal type."\ndiff --git a/Products/CMFDynamicViewFTI/browserdefault.py b/Products/CMFDynamicViewFTI/browserdefault.py\nindex e35700d..130907f 100644\n--- a/Products/CMFDynamicViewFTI/browserdefault.py\n+++ b/Products/CMFDynamicViewFTI/browserdefault.py\n@@ -6,8 +6,8 @@\n the ISelectableBrowserDefault interface from CMFPlone.\n """\n from AccessControl import ClassSecurityInfo\n-from Acquisition import aq_base\n from AccessControl.class_init import InitializeClass\n+from Acquisition import aq_base\n from ExtensionClass import Base\n from Products.CMFCore.permissions import View\n from Products.CMFCore.utils import getToolByName\n@@ -39,13 +39,13 @@ class BrowserDefaultMixin(Base):\n \n     _at_fti_meta_type = fti_meta_type\n     aliases = {\n-        \'(Default)\': \'(dynamic view)\',\n-        \'view\': \'(selected layout)\',\n-        \'edit\': \'base_edit\',\n-        \'properties\': \'base_metadata\',\n-        \'sharing\': \'folder_localrole_form\',\n-        \'gethtml\': \'\',\n-        \'mkdir\': \'\',\n+        "(Default)": "(dynamic view)",\n+        "view": "(selected layout)",\n+        "edit": "base_edit",\n+        "properties": "base_metadata",\n+        "sharing": "folder_localrole_form",\n+        "gethtml": "",\n+        "mkdir": "",\n     }\n \n     default_view = "base_view"\n@@ -92,7 +92,7 @@ def getDefaultPage(self):\n         if fti is None:\n             return None\n \n-        plone_utils = getToolByName(self, \'plone_utils\', None)\n+        plone_utils = getToolByName(self, "plone_utils", None)\n         if plone_utils is not None:\n             return plone_utils.getDefaultPage(self)\n \n@@ -113,7 +113,7 @@ def canSetDefaultPage(self):\n         # (folderish) item, and the item is folderish.\n         if not self.isPrincipiaFolderish:\n             return False\n-        mtool = getToolByName(self, \'portal_membership\')\n+        mtool = getToolByName(self, "portal_membership")\n         member = mtool.getAuthenticatedMember()\n         return member.has_permission(ModifyViewTemplate, self)\n \n@@ -130,8 +130,8 @@ def setDefaultPage(self, objectId):\n         new_page = old_page = None\n         if objectId is not None:\n             new_page = getattr(self, objectId, None)\n-        if self.hasProperty(\'default_page\'):\n-            pages = self.getProperty(\'default_page\', \'\')\n+        if self.hasProperty("default_page"):\n+            pages = self.getProperty("default_page", "")\n             if isinstance(pages, (list, tuple)):\n                 for page in pages:\n                     old_page = getattr(self, page, None)\n@@ -141,17 +141,17 @@ def setDefaultPage(self, objectId):\n                 old_page = getattr(self, pages, None)\n \n             if objectId is None:\n-                self.manage_delProperties([\'default_page\'])\n+                self.manage_delProperties(["default_page"])\n             else:\n                 self.manage_changeProperties(default_page=objectId)\n         else:\n             if objectId is not None:\n-                self.manage_addProperty(\'default_page\', objectId, \'string\')\n+                self.manage_addProperty("default_page", objectId, "string")\n         if new_page != old_page:\n             if new_page is not None:\n-                new_page.reindexObject([\'is_default_page\'])\n+                new_page.reindexObject(["is_default_page"])\n             if old_page is not None:\n-                old_page.reindexObject([\'is_default_page\'])\n+                old_page.reindexObject(["is_default_page"])\n \n     @security.protected(ModifyViewTemplate)\n     def setLayout(self, layout):\n@@ -162,28 +162,27 @@ def setLayout(self, layout):\n         # setDefaultPage(), it is turned off by calling setDefaultPage(None).\n         if not (layout and isinstance(layout, str)):\n             raise ValueError(\n-                "layout must be a non empty string, got %s(%s)" %\n-                (layout, type(layout))\n+                f"layout must be a non empty string, got {layout}({type(layout)})"\n             )\n \n         defaultPage = self.getDefaultPage()\n         if defaultPage is None and layout == self.getLayout():\n             return\n \n-        if self.hasProperty(\'layout\'):\n+        if self.hasProperty("layout"):\n             self.manage_changeProperties(layout=layout)\n         else:\n-            if getattr(aq_base(self), \'layout\', _marker) is not _marker:\n+            if getattr(aq_base(self), "layout", _marker) is not _marker:\n                 # Archetypes remains? clean up\n                 old = self.layout\n                 if old and not isinstance(old, str):\n                     raise RuntimeError(\n-                        "layout attribute exists on %s and is no string: %s" %\n-                        (self, type(old))\n+                        "layout attribute exists on %s and is no string: %s"\n+                        % (self, type(old))\n                     )\n-                delattr(self, \'layout\')\n+                delattr(self, "layout")\n \n-            self.manage_addProperty(\'layout\', layout, \'string\')\n+            self.manage_addProperty("layout", layout, "string")\n \n         self.setDefaultPage(None)\n \n@@ -198,7 +197,7 @@ def getDefaultLayout(self):\n     @security.public\n     def canSetLayout(self):\n         # Check if the current authenticated user is permitted to select a layout.\n-        mtool = getToolByName(self, \'portal_membership\')\n+        mtool = getToolByName(self, "portal_membership")\n         member = mtool.getAuthenticatedMember()\n         return member.has_permission(ModifyViewTemplate, self)\n \n@@ -217,10 +216,7 @@ def getAvailableLayouts(self):\n                 mid = mid.decode()\n             factory = gsm.adapters.lookup(spec, Interface, mid)\n             if factory is not None:\n-                menu = getUtility(\n-                    IBrowserMenu,\n-                    \'plone_displayviews\'\n-                )\n+                menu = getUtility(IBrowserMenu, "plone_displayviews")\n                 item = menu.getMenuItemByAction(self, self.REQUEST, mid)\n                 title = item and item.title or mid\n                 result.append((mid, title))\n@@ -245,13 +241,13 @@ def check_default_page(obj, event):\n     used by default for zope.container.interfaces.IContainerModifiedEvent\n     """\n     container = obj\n-    default_page_id = container.getProperty(\'default_page\', \'\')\n+    default_page_id = container.getProperty("default_page", "")\n     if default_page_id and not (default_page_id in container.objectIds()):\n         ISelectableBrowserDefault(container).setDefaultPage(None)\n \n \n def rename_default_page(obj, event):\n-    """event subscriber, rename default page if targte was renamed\n+    """event subscriber, rename default page if target was renamed\n \n     used by default for zope.lifecycleevent.interfaces.IObjectMovedEvent\n     """\n@@ -259,6 +255,6 @@ def rename_default_page(obj, event):\n     if newParent != event.oldParent:\n         return\n     elif ISelectableBrowserDefault.providedBy(newParent):\n-        default_page_id = newParent.getProperty(\'default_page\', \'\')\n+        default_page_id = newParent.getProperty("default_page", "")\n         if default_page_id == event.oldName:\n             ISelectableBrowserDefault(newParent).setDefaultPage(event.newName)\ndiff --git a/Products/CMFDynamicViewFTI/configure.zcml b/Products/CMFDynamicViewFTI/configure.zcml\nindex 3be0ddd..d822365 100644\n--- a/Products/CMFDynamicViewFTI/configure.zcml\n+++ b/Products/CMFDynamicViewFTI/configure.zcml\n@@ -1,40 +1,43 @@\n <configure\n-   xmlns="http://namespaces.zope.org/zope"\n-   xmlns:browser="http://namespaces.zope.org/browser"\n-   xmlns:five="http://namespaces.zope.org/five"\n-   i18n_domain="cmf_default">\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    xmlns:five="http://namespaces.zope.org/five"\n+    i18n_domain="cmf_default"\n+    >\n \n   <include package="Products.CMFCore" />\n \n   <browser:page\n-     for="zope.browser.interfaces.IAdding"\n-     name="addDVFactoryTypeInformation.html"\n-     template="browser/addWithPresettings.pt"\n-     class=".browser.typeinfo.DVFactoryTypeInformationAddView"\n-     permission="cmf.ManagePortal"\n-     />\n+      name="addDVFactoryTypeInformation.html"\n+      for="zope.browser.interfaces.IAdding"\n+      class=".browser.typeinfo.DVFactoryTypeInformationAddView"\n+      template="browser/addWithPresettings.pt"\n+      permission="cmf.ManagePortal"\n+      />\n \n   <five:registerClass\n-     class=".fti.DynamicViewTypeInformation"\n-     meta_type="Factory-based Type Information with dynamic views"\n-     addview="addDVFactoryTypeInformation.html"\n-     permission="cmf.ManagePortal"\n-     global="False"\n-     />\n+      class=".fti.DynamicViewTypeInformation"\n+      permission="cmf.ManagePortal"\n+      addview="addDVFactoryTypeInformation.html"\n+      global="False"\n+      meta_type="Factory-based Type Information with dynamic views"\n+      />\n \n   <permission\n-    id="cmf.ModifyViewTemplate"\n-    title="Modify view template"\n-    />\n+      id="cmf.ModifyViewTemplate"\n+      title="Modify view template"\n+      />\n \n   <subscriber\n-    for=".interfaces.ISelectableBrowserDefault\n-         zope.container.interfaces.IContainerModifiedEvent"\n-    handler=".browserdefault.check_default_page" />\n+      for=".interfaces.ISelectableBrowserDefault\n+           zope.container.interfaces.IContainerModifiedEvent"\n+      handler=".browserdefault.check_default_page"\n+      />\n \n   <subscriber\n-    for="*\n-         zope.lifecycleevent.interfaces.IObjectMovedEvent"\n-    handler=".browserdefault.rename_default_page" />\n+      for="*\n+           zope.lifecycleevent.interfaces.IObjectMovedEvent"\n+      handler=".browserdefault.rename_default_page"\n+      />\n \n </configure>\ndiff --git a/Products/CMFDynamicViewFTI/content_for_tests.py b/Products/CMFDynamicViewFTI/content_for_tests.py\nindex be1e028..a27ab5d 100644\n--- a/Products/CMFDynamicViewFTI/content_for_tests.py\n+++ b/Products/CMFDynamicViewFTI/content_for_tests.py\n@@ -1,5 +1,5 @@\n-from Products.CMFCore.PortalFolder import PortalFolder\n from Products.CMFCore.PortalContent import PortalContent\n+from Products.CMFCore.PortalFolder import PortalFolder\n from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin\n \n \n@@ -8,21 +8,18 @@ class DynFolder(PortalFolder, BrowserDefaultMixin):\n \n \n class DynDocument(PortalContent, BrowserDefaultMixin):\n-\n     def __init__(self, id, title):\n         self.id = id\n         self.title = title\n \n \n-def addDynFolder(self, id, title=\'\', REQUEST=None):\n-    """Add a new DynFolder object with id *id*.\n-    """\n+def addDynFolder(self, id, title="", REQUEST=None):\n+    """Add a new DynFolder object with id *id*."""\n     ob = DynFolder(id, title)\n     self._setObject(id, ob, suppress_events=True)\n \n \n-def addDynDocument(self, id, title=\'\', REQUEST=None):\n-    """Add a new DynDocument object with id *id*.\n-    """\n+def addDynDocument(self, id, title="", REQUEST=None):\n+    """Add a new DynDocument object with id *id*."""\n     ob = DynDocument(id, title)\n     self._setObject(id, ob, suppress_events=True)\ndiff --git a/Products/CMFDynamicViewFTI/fti.py b/Products/CMFDynamicViewFTI/fti.py\nindex cb76438..c99409d 100644\n--- a/Products/CMFDynamicViewFTI/fti.py\n+++ b/Products/CMFDynamicViewFTI/fti.py\n@@ -1,6 +1,6 @@\n from AccessControl import ClassSecurityInfo\n-from Acquisition import aq_base\n from AccessControl.class_init import InitializeClass\n+from Acquisition import aq_base\n from Products.CMFCore.permissions import View\n from Products.CMFCore.TypesTool import FactoryTypeInformation\n from Products.CMFCore.utils import getToolByName\n@@ -21,8 +21,8 @@ def safe_hasattr(obj, name, _marker=object()):\n \n def safe_callable(obj):\n     """Make sure our callable checks are ConflictError safe."""\n-    if safe_hasattr(obj, \'__class__\'):\n-        if safe_hasattr(obj, \'__call__\'):\n+    if safe_hasattr(obj, "__class__"):\n+        if safe_hasattr(obj, "__call__"):\n             return True\n         else:\n             return isinstance(obj, type)\n@@ -36,8 +36,8 @@ def om_has_key(context, key):\n     Zope\'s OFS.ObjectManager has no method for checking if an object with an id\n     exists inside a folder.\n     """\n-    klass = getattr(aq_base(context), \'__class__\', None)\n-    if hasattr(klass, \'has_key\'):\n+    klass = getattr(aq_base(context), "__class__", None)\n+    if hasattr(klass, "has_key"):\n         # BTreeFolder2 optimization\n         if key in context:\n             return True\n@@ -48,7 +48,7 @@ def om_has_key(context, key):\n     return False\n \n \n-fti_meta_type = \'Factory-based Type Information with dynamic views\'\n+fti_meta_type = "Factory-based Type Information with dynamic views"\n \n \n @implementer(IDynamicViewTypeInformation)\n@@ -64,26 +64,26 @@ class DynamicViewTypeInformation(FactoryTypeInformation):\n \n     _properties = FactoryTypeInformation._properties + (\n         {\n-            \'id\': \'default_view\',\n-            \'type\': \'string\',\n-            \'mode\': \'w\',\n-            \'label\': \'Default view method\',\n+            "id": "default_view",\n+            "type": "string",\n+            "mode": "w",\n+            "label": "Default view method",\n         },\n         {\n-            \'id\': \'view_methods\',\n-            \'type\': \'lines\',\n-            \'mode\': \'w\',\n-            \'label\': \'Available view methods\'\n+            "id": "view_methods",\n+            "type": "lines",\n+            "mode": "w",\n+            "label": "Available view methods",\n         },\n         {\n-            \'id\': \'default_view_fallback\',\n-            \'type\': \'boolean\',\n-            \'mode\': \'w\',\n-            \'label\': \'Fall back to default view?\'\n+            "id": "default_view_fallback",\n+            "type": "boolean",\n+            "mode": "w",\n+            "label": "Fall back to default view?",\n         },\n     )\n \n-    default_view = \'\'\n+    default_view = ""\n     view_methods = ()\n     default_view_fallback = False\n \n@@ -98,7 +98,7 @@ def manage_changeProperties(self, **kw):\n             # TODO: use view action\n             self.default_view = default_view = self.immediate_view\n         if not view_methods:\n-            self.view_methods = view_methods = (default_view, )\n+            self.view_methods = view_methods = (default_view,)\n         if default_view and default_view not in view_methods:\n             raise ValueError(f"{default_view} not in {view_methods}")\n \n@@ -112,20 +112,15 @@ def getAvailableViewMethods(self, context):\n         # Get a list of registered view methods.\n         methods = self.view_methods\n         if isinstance(methods, str):\n-            methods = (methods, )\n+            methods = (methods,)\n         return tuple(methods)\n \n     @security.protected(View)\n-    def getViewMethod(\n-        self,\n-        context,\n-        enforce_available=False,\n-        check_exists=False\n-    ):\n+    def getViewMethod(self, context, enforce_available=False, check_exists=False):\n         # Get view method (aka layout) name from context.\n         # Return -- view method from context or default view name.\n         default = self.getDefaultViewMethod(context)\n-        layout = getattr(aq_base(context), \'layout\', None)\n+        layout = getattr(aq_base(context), "layout", None)\n \n         if safe_callable(layout):\n             layout = layout()\n@@ -133,8 +128,7 @@ def getViewMethod(\n             return default\n         if not isinstance(layout, str):\n             raise TypeError(\n-                "layout of %s must be a string, got %s" %\n-                (repr(context), type(layout))\n+                f"layout of {repr(context)} must be a string, got {type(layout)}"\n             )\n         if enforce_available:\n             available = self.getAvailableViewMethods(context)\n@@ -159,11 +153,11 @@ def getDefaultPage(self, context, check_exists=False):\n         # default page id exists.\n         #\n         # Return -- None for no default page or a string\n-        if not getattr(aq_base(context), \'isPrincipiaFolderish\', False):\n+        if not getattr(aq_base(context), "isPrincipiaFolderish", False):\n             # non folderish objects don\'t have a default page per se\n             return None\n \n-        default_page = getattr(aq_base(context), \'default_page\', None)\n+        default_page = getattr(aq_base(context), "default_page", None)\n \n         if safe_callable(default_page):\n             default_page = default_page()\n@@ -173,8 +167,8 @@ def getDefaultPage(self, context, check_exists=False):\n             default_page = default_page[0]\n         if not isinstance(default_page, str):\n             raise TypeError(\n-                "default_page must be a string, got %s(%s):" %\n-                (default_page, type(default_page))\n+                "default_page must be a string, got %s(%s):"\n+                % (default_page, type(default_page))\n             )\n \n         if check_exists and not om_has_key(context, default_page):\n@@ -188,7 +182,7 @@ def defaultView(self, context):\n         # use that, else use the currently selected view method/layout.\n \n         # Delegate to PloneTool\'s version if we have it else, use own rules\n-        plone_utils = getToolByName(self, \'plone_utils\', None)\n+        plone_utils = getToolByName(self, "plone_utils", None)\n         if plone_utils is not None:\n             obj, path = plone_utils.browserDefault(context)\n             return path[-1]\n@@ -210,16 +204,13 @@ def queryMethodID(self, alias, default=None, context=None):\n         # getViewMethod()\n \n         methodTarget = FactoryTypeInformation.queryMethodID(\n-            self,\n-            alias,\n-            default=default,\n-            context=context\n+            self, alias, default=default, context=context\n         )\n         if not isinstance(methodTarget, str):\n             # nothing to do, method_id is probably None\n             return methodTarget\n \n-        if context is None or default == \'\':\n+        if context is None or default == "":\n             # the edit zpts like typesAliases don\'t apply a context and set the\n             # default to \'\'. We do not want to resolve (dynamic view) for these\n             # methods.\ndiff --git a/Products/CMFDynamicViewFTI/interface.py b/Products/CMFDynamicViewFTI/interface.py\ndeleted file mode 100644\nindex 1805e3d..0000000\n--- a/Products/CMFDynamicViewFTI/interface.py\n+++ /dev/null\n@@ -1,9 +0,0 @@\n-# BBB module will be removed at some point. We will still need it as long as\n-# we plan to support Plone 4.3.x\n-from Products.CMFDynamicViewFTI.interfaces import *\n-import warnings\n-\n-warnings.warn(\n-    \'import from Products.CMFDynamicViewFTI.interfaces instead\',\n-    DeprecationWarning\n-)\ndiff --git a/Products/CMFDynamicViewFTI/interfaces.py b/Products/CMFDynamicViewFTI/interfaces.py\nindex 452394e..d2b91f0 100644\n--- a/Products/CMFDynamicViewFTI/interfaces.py\n+++ b/Products/CMFDynamicViewFTI/interfaces.py\n@@ -9,8 +9,7 @@ class IDynamicViewTypeInformation(ITypeInformation):\n     """\n \n     def getAvailableViewMethods(context):\n-        """Get a list of registered view methods\n-        """\n+        """Get a list of registered view methods"""\n \n     def getViewMethod(context, enforce_available=True):\n         """Get view method name from context\n@@ -19,8 +18,7 @@ def getViewMethod(context, enforce_available=True):\n         """\n \n     def getDefaultViewMethod(context):\n-        """Get the default view method from the FTI\n-        """\n+        """Get the default view method from the FTI"""\n \n     def getDefaultPage(context, check_exists=False):\n         """Get the default page from a folderish object\n@@ -78,8 +76,7 @@ def getLayout(**kw):\n         """\n \n     def getDefaultLayout():\n-        """Get the default layout template.\n-        """\n+        """Get the default layout template."""\n \n \n class ISelectableBrowserDefault(IBrowserDefault):\ndiff --git a/Products/CMFDynamicViewFTI/permissions.py b/Products/CMFDynamicViewFTI/permissions.py\nindex 19d7400..12c6e3e 100644\n--- a/Products/CMFDynamicViewFTI/permissions.py\n+++ b/Products/CMFDynamicViewFTI/permissions.py\n@@ -1,4 +1,5 @@\n from AccessControl.Permission import addPermission\n \n+\n ModifyViewTemplate = "Modify view template"\n-addPermission(ModifyViewTemplate, (\'Manager\', \'Owner\'))\n+addPermission(ModifyViewTemplate, ("Manager", "Owner"))\ndiff --git a/Products/CMFDynamicViewFTI/profiles/sample_types/types.xml b/Products/CMFDynamicViewFTI/profiles/sample_types/types.xml\nindex 4db83da..da504f5 100644\n--- a/Products/CMFDynamicViewFTI/profiles/sample_types/types.xml\n+++ b/Products/CMFDynamicViewFTI/profiles/sample_types/types.xml\n@@ -1,5 +1,11 @@\n-<?xml version="1.0"?>\n-<object name="portal_types" meta_type="CMF Types Tool">\n- <object name="DynFolder" meta_type="Factory-based Type Information with dynamic views"/>\n- <object name="DynDocument" meta_type="Factory-based Type Information with dynamic views"/>\n+<?xml version="1.0" encoding="utf-8"?>\n+<object meta_type="CMF Types Tool"\n+        name="portal_types"\n+>\n+  <object meta_type="Factory-based Type Information with dynamic views"\n+          name="DynFolder"\n+  />\n+  <object meta_type="Factory-based Type Information with dynamic views"\n+          name="DynDocument"\n+  />\n </object>\ndiff --git a/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynDocument.xml b/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynDocument.xml\nindex 38b87b1..a43631d 100644\n--- a/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynDocument.xml\n+++ b/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynDocument.xml\n@@ -1,27 +1,36 @@\n-<?xml version="1.0"?>\n-<object name="DynDocument"\n-   meta_type="Factory-based Type Information with dynamic views"\n-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n- <property name="title">DynDocument</property>\n- <property\n-    name="description">A page in the site. Can contain rich text.</property>\n- <property name="content_icon">document_icon.gif</property>\n- <property name="content_meta_type">DynDocument</property>\n- <property name="product">CMFDynamicViewFTI</property>\n- <property name="factory">addDynDocument</property>\n- <property name="immediate_view">metadata_edit_form</property>\n- <property name="global_allow">True</property>\n- <property name="filter_content_types">True</property>\n- <property name="allowed_content_types"/>\n- <property name="default_view">index_html</property>\n- <property name="view_methods">\n-  <element value="document_view"/>\n-  <element value="custom_view"/>\n- </property>\n- <alias from="(Default)" to="(Dynamic view)"/>\n- <alias from="view" to="(Selected layout)"/>\n- <action title="View" action_id="view" category="object" condition_expr=""\n-    url_expr="string:${object_url}/view" visible="True">\n-  <permission value="View"/>\n- </action>\n+<?xml version="1.0" encoding="utf-8"?>\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        meta_type="Factory-based Type Information with dynamic views"\n+        name="DynDocument"\n+>\n+  <property name="title">DynDocument</property>\n+  <property name="description">A page in the site. Can contain rich text.</property>\n+  <property name="content_icon">document_icon.gif</property>\n+  <property name="content_meta_type">DynDocument</property>\n+  <property name="product">CMFDynamicViewFTI</property>\n+  <property name="factory">addDynDocument</property>\n+  <property name="immediate_view">metadata_edit_form</property>\n+  <property name="global_allow">True</property>\n+  <property name="filter_content_types">True</property>\n+  <property name="allowed_content_types" />\n+  <property name="default_view">index_html</property>\n+  <property name="view_methods">\n+    <element value="document_view" />\n+    <element value="custom_view" />\n+  </property>\n+  <alias from="(Default)"\n+         to="(Dynamic view)"\n+  />\n+  <alias from="view"\n+         to="(Selected layout)"\n+  />\n+  <action action_id="view"\n+          category="object"\n+          condition_expr=""\n+          title="View"\n+          url_expr="string:${object_url}/view"\n+          visible="True"\n+  >\n+    <permission value="View" />\n+  </action>\n </object>\ndiff --git a/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynFolder.xml b/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynFolder.xml\nindex 5d7d6c6..c07edcd 100644\n--- a/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynFolder.xml\n+++ b/Products/CMFDynamicViewFTI/profiles/sample_types/types/DynFolder.xml\n@@ -1,25 +1,35 @@\n-<?xml version="1.0"?>\n-<object name="DynFolder"\n-   meta_type="Factory-based Type Information with dynamic views"\n-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n- <property name="title">DynFolder</property>\n- <property name="content_icon">folder_icon.gif</property>\n- <property name="content_meta_type">DynFolder</property>\n- <property name="product">CMFDynamicViewFTI</property>\n- <property name="factory">addDynFolder</property>\n- <property name="immediate_view">folder_edit_form</property>\n- <property name="global_allow">True</property>\n- <property name="filter_content_types">False</property>\n- <property name="default_view">index_html</property>\n- <property name="view_methods">\n-  <element value="index_html"/>\n-  <element value="custom_view"/>\n-  <element value="zope3_view"/>\n- </property>\n- <alias from="(Default)" to="(Dynamic view)"/>\n- <alias from="view" to="(Selected layout)"/>\n- <action title="View" action_id="view" category="object" condition_expr=""\n-    url_expr="string:${object_url}" visible="True">\n-  <permission value="View"/>\n- </action>\n+<?xml version="1.0" encoding="utf-8"?>\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        meta_type="Factory-based Type Information with dynamic views"\n+        name="DynFolder"\n+>\n+  <property name="title">DynFolder</property>\n+  <property name="content_icon">folder_icon.gif</property>\n+  <property name="content_meta_type">DynFolder</property>\n+  <property name="product">CMFDynamicViewFTI</property>\n+  <property name="factory">addDynFolder</property>\n+  <property name="immediate_view">folder_edit_form</property>\n+  <property name="global_allow">True</property>\n+  <property name="filter_content_types">False</property>\n+  <property name="default_view">index_html</property>\n+  <property name="view_methods">\n+    <element value="index_html" />\n+    <element value="custom_view" />\n+    <element value="zope3_view" />\n+  </property>\n+  <alias from="(Default)"\n+         to="(Dynamic view)"\n+  />\n+  <alias from="view"\n+         to="(Selected layout)"\n+  />\n+  <action action_id="view"\n+          category="object"\n+          condition_expr=""\n+          title="View"\n+          url_expr="string:${object_url}"\n+          visible="True"\n+  >\n+    <permission value="View" />\n+  </action>\n </object>\ndiff --git a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py\nindex be0f462..21654b2 100644\n--- a/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py\n+++ b/Products/CMFDynamicViewFTI/tests/CMFDVFTITestCase.py\n@@ -1,56 +1,87 @@\n from plone.app import testing\n from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import PloneSandboxLayer\n+from plone.base.utils import unrestricted_construct_instance\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import _createObjectByType\n-from Products.GenericSetup import EXTENSION, profile_registry\n+from Products.GenericSetup import EXTENSION\n+from Products.GenericSetup import profile_registry\n+\n import transaction\n import unittest\n \n \n class CMFDynamicViewFTIFixture(PloneSandboxLayer):\n-\n-    defaultBases = (PLONE_FIXTURE, )\n+    defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         profile_registry.registerProfile(\n-            \'CMFDVFTI_sampletypes\',\n-            \'CMFDynamicViewFTI Sample Content Types\',\n-            \'Extension profile including CMFDVFTI sample content types\',\n-            \'profiles/sample_types\',\n-            \'CMFDynamicViewFTI\',\n+            "CMFDVFTI_sampletypes",\n+            "CMFDynamicViewFTI Sample Content Types",\n+            "Extension profile including CMFDVFTI sample content types",\n+            "profiles/sample_types",\n+            "CMFDynamicViewFTI",\n             EXTENSION,\n-            for_=ISiteRoot\n+            for_=ISiteRoot,\n         )\n         import Products.CMFDynamicViewFTI.tests\n-        self.loadZCML(name=\'browserdefault.zcml\',\n-                      package=Products.CMFDynamicViewFTI.tests)\n \n-    def setUpPloneSite(self, portal):\n-        self.applyProfile(portal, \'CMFDynamicViewFTI:CMFDVFTI_sampletypes\')\n+        self.loadZCML(\n+            name="browserdefault.zcml", package=Products.CMFDynamicViewFTI.tests\n+        )\n+\n+        from plone.testing.zope import _INSTALLED_PRODUCTS\n+\n+        if "Products.CMFDynamicViewFTI" not in _INSTALLED_PRODUCTS.keys():\n+            # replicate plone.testing.zope.installProduct\n+            # when running the tests via tox Products.CMFDynamicViewFTI\n+            # folder location is different than the other Products.*\n+            # packages.\n+            # `installProduct` checks for that and bails out otherwise.\n+            from AccessControl.class_init import InitializeClass\n+            from OFS.Application import get_folder_permissions\n+            from OFS.Application import install_product\n+            from OFS.Folder import Folder\n+            from pathlib import Path\n \n+            import inspect\n+\n+            module_path = Path(inspect.getfile(Products.CMFDynamicViewFTI))\n+            product_folder = str(module_path.parent.parent)\n+\n+            install_product(\n+                app,\n+                product_folder,\n+                "CMFDynamicViewFTI",\n+                [],\n+                get_folder_permissions(),\n+                raise_exc=1,\n+            )\n+            InitializeClass(Folder)\n+\n+    def setUpPloneSite(self, portal):\n+        self.applyProfile(portal, "CMFDynamicViewFTI:CMFDVFTI_sampletypes")\n \n-    def tearDownZope(self, app):\n-        pass\n \n CDV_FIXTURE = CMFDynamicViewFTIFixture()\n CDV_FUNCTIONAL_TESTING = testing.FunctionalTesting(\n-    bases=(CDV_FIXTURE, ), name=\'CMFDynamicViewFTI Testing:Functional\')\n+    bases=(CDV_FIXTURE,), name="CMFDynamicViewFTI Testing:Functional"\n+)\n \n \n class CMFDVFTITestCase(unittest.TestCase):\n     """This is a stub now, but in case you want to try\n-       something fancy on Your Branch (tm), put it here.\n+    something fancy on Your Branch (tm), put it here.\n     """\n+\n     layer = CDV_FUNCTIONAL_TESTING\n \n     def setUp(self):\n         """Set up before each test."""\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        _createObjectByType(\'DynFolder\', self.portal, id=\'folder\')\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        unrestricted_construct_instance("DynFolder", self.portal, id="folder")\n         self.folder = self.portal.folder\n-        self.types = getToolByName(self.portal, \'portal_types\')\n-        self.fti = self.types[\'DynFolder\']\n+        self.types = getToolByName(self.portal, "portal_types")\n+        self.fti = self.types["DynFolder"]\n         transaction.commit()\ndiff --git a/Products/CMFDynamicViewFTI/tests/browserdefault.zcml b/Products/CMFDynamicViewFTI/tests/browserdefault.zcml\nindex 1624eb1..09a87e8 100644\n--- a/Products/CMFDynamicViewFTI/tests/browserdefault.zcml\n+++ b/Products/CMFDynamicViewFTI/tests/browserdefault.zcml\n@@ -1,14 +1,15 @@\n <configure\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    i18n_domain="plonetest">\n+    i18n_domain="plonetest"\n+    >\n \n-<browser:view\n-    for=".test_browserdefault.IDummy"\n-    provides="zope.publisher.interfaces.browser.IBrowserView"\n-    permission="zope2.Public"\n-    name="zope3_view"\n-    title="Zope3 Test View"\n-    menu="plone_displayviews"\n-    />\n+  <browser:view\n+      name="zope3_view"\n+      provides="zope.publisher.interfaces.browser.IBrowserView"\n+      for=".test_browserdefault.IDummy"\n+      permission="zope2.Public"\n+      menu="plone_displayviews"\n+      title="Zope3 Test View"\n+      />\n \n </configure>\ndiff --git a/Products/CMFDynamicViewFTI/tests/test_browserdefault.py b/Products/CMFDynamicViewFTI/tests/test_browserdefault.py\nindex cff3bd2..6f5d674 100644\n--- a/Products/CMFDynamicViewFTI/tests/test_browserdefault.py\n+++ b/Products/CMFDynamicViewFTI/tests/test_browserdefault.py\n@@ -1,4 +1,3 @@\n-from Products.CMFCore.utils import getToolByName\n from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin\n from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault\n from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault\n@@ -10,17 +9,15 @@\n \n \n class DummyFolder(BrowserDefaultMixin):\n-\n     def getTypeInfo(self):\n         return self.fti\n \n \n class IDummy(Interface):\n-    """ marker interface for a zope 3 view """\n+    """marker interface for a zope 3 view"""\n \n \n class TestBrowserDefault(CMFDVFTITestCase.CMFDVFTITestCase):\n-\n     def test_doesImplementISelectableBrowserDefault(self):\n         iface = ISelectableBrowserDefault\n         self.assertTrue(iface.implementedBy(BrowserDefaultMixin))\n@@ -31,15 +28,14 @@ def test_extendsInterface(self):\n \n \n class TestAvailableLayouts(CMFDVFTITestCase.CMFDVFTITestCase):\n-\n     def setUp(self):\n         super().setUp()\n         self.dfolder = DummyFolder()\n-        self.dfolder.fti = self.types[\'DynFolder\']\n+        self.dfolder.fti = self.types["DynFolder"]\n \n     def test_Zope3View(self):\n         dfolder = self.dfolder\n-        dfolder.layout = \'zope3_view\'\n+        dfolder.layout = "zope3_view"\n         dfolder.REQUEST = TestRequest()\n         view_methods = dfolder.getAvailableLayouts()\n         view_ids = [view_id for view_id, foo in view_methods]\n@@ -53,11 +49,11 @@ def test_Zope3View(self):\n \n     def test_Zope3ViewTitle(self):\n         dfolder = self.dfolder\n-        dfolder.layout = \'zope3_view\'\n+        dfolder.layout = "zope3_view"\n         dfolder.REQUEST = TestRequest()\n         directlyProvides(dfolder, IDummy)\n         view_methods = dfolder.getAvailableLayouts()\n \n         for id, title in view_methods:\n             if id == dfolder.layout:\n-                self.assertEqual(title, \'Zope3 Test View\')\n+                self.assertEqual(title, "Zope3 Test View")\ndiff --git a/Products/CMFDynamicViewFTI/tests/test_fti.py b/Products/CMFDynamicViewFTI/tests/test_fti.py\nindex 18a0e26..39d7278 100644\n--- a/Products/CMFDynamicViewFTI/tests/test_fti.py\n+++ b/Products/CMFDynamicViewFTI/tests/test_fti.py\n@@ -1,5 +1,3 @@\n-from plone.app.testing import TEST_USER_NAME\n-from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFCore.interfaces import ITypeInformation\n from Products.CMFDynamicViewFTI.fti import DynamicViewTypeInformation\n from Products.CMFDynamicViewFTI.interfaces import IDynamicViewTypeInformation\n@@ -13,10 +11,9 @@\n \n \n class TestFTI(CMFDVFTITestCase.CMFDVFTITestCase):\n-\n     def _makeOne(self):\n         # Create and return a DynFolder\n-        self.folder.invokeFactory(\'DynFolder\', id=\'dynfolder\')\n+        self.folder.invokeFactory("DynFolder", id="dynfolder")\n         return self.folder.dynfolder\n \n     def test_doesImplementITypeInformation(self):\n@@ -37,52 +34,50 @@ def test_paranoid_subclass_test(self):\n \n     def test_CreateDynFolder(self):\n         dynfolder = self._makeOne()\n-        self.assertEqual(dynfolder.getPortalTypeName(), \'DynFolder\')\n+        self.assertEqual(dynfolder.getPortalTypeName(), "DynFolder")\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(info.getId(), \'DynFolder\')\n-        self.assertEqual(info.Title(), \'DynFolder\')\n-        self.assertEqual(info.getDefaultViewMethod(dynfolder), \'index_html\')\n+        self.assertEqual(info.getId(), "DynFolder")\n+        self.assertEqual(info.Title(), "DynFolder")\n+        self.assertEqual(info.getDefaultViewMethod(dynfolder), "index_html")\n         self.assertEqual(\n             info.getAvailableViewMethods(dynfolder),\n-            (\'index_html\', \'custom_view\', \'zope3_view\')\n+            ("index_html", "custom_view", "zope3_view"),\n         )\n \n     def test_DynFolderDefaultView(self):\n         dynfolder = self._makeOne()\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(info.getViewMethod(dynfolder), \'index_html\')\n+        self.assertEqual(info.getViewMethod(dynfolder), "index_html")\n \n     def test_DynFolderCustomView(self):\n         dynfolder = self._makeOne()\n-        self.types.DynFolder.manage_changeProperties(\n-            default_view=\'custom_view\'\n-        )\n+        self.types.DynFolder.manage_changeProperties(default_view="custom_view")\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(info.getViewMethod(dynfolder), \'custom_view\')\n+        self.assertEqual(info.getViewMethod(dynfolder), "custom_view")\n \n     def test_DynFolderViewFromLayout(self):\n         dynfolder = self._makeOne()\n-        dynfolder.layout = \'custom_view\'\n+        dynfolder.layout = "custom_view"\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(info.getViewMethod(dynfolder), \'custom_view\')\n+        self.assertEqual(info.getViewMethod(dynfolder), "custom_view")\n \n     def test_DynFolderViewFromCallableLayout(self):\n         dynfolder = self._makeOne()\n-        dynfolder.layout = lambda: \'custom_view\'\n+        dynfolder.layout = lambda: "custom_view"\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(info.getViewMethod(dynfolder), \'custom_view\')\n+        self.assertEqual(info.getViewMethod(dynfolder), "custom_view")\n \n     def test_NoneLayoutReturnsDefaultView(self):\n         dynfolder = self._makeOne()\n         dynfolder.layout = None\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(info.getViewMethod(dynfolder), \'index_html\')\n+        self.assertEqual(info.getViewMethod(dynfolder), "index_html")\n \n     def test_EmptyLayoutReturnsDefaultView(self):\n         dynfolder = self._makeOne()\n-        dynfolder.layout = \'\'\n+        dynfolder.layout = ""\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(info.getViewMethod(dynfolder), \'index_html\')\n+        self.assertEqual(info.getViewMethod(dynfolder), "index_html")\n \n     def test_InvalidLayoutRaisesTypeError(self):\n         dynfolder = self._makeOne()\n@@ -92,40 +87,34 @@ def test_InvalidLayoutRaisesTypeError(self):\n \n     def test_EnforceLayoutAvailable(self):\n         dynfolder = self._makeOne()\n-        dynfolder.layout = \'custom_view\'\n+        dynfolder.layout = "custom_view"\n         info = self.types.getTypeInfo(dynfolder)\n         self.assertEqual(\n-            info.getViewMethod(dynfolder, enforce_available=True),\n-            \'custom_view\'\n+            info.getViewMethod(dynfolder, enforce_available=True), "custom_view"\n         )\n \n     def test_UnavailableLayoutReturnsDefaultView(self):\n         dynfolder = self._makeOne()\n-        dynfolder.layout = \'bad_view\'\n+        dynfolder.layout = "bad_view"\n         info = self.types.getTypeInfo(dynfolder)\n         self.assertEqual(\n-            info.getViewMethod(dynfolder, enforce_available=True),\n-            \'index_html\'\n+            info.getViewMethod(dynfolder, enforce_available=True), "index_html"\n         )\n \n     def test_CheckLayoutExists(self):\n         dynfolder = self._makeOne()\n-        dynfolder.manage_addDTMLMethod(\'custom_view\', file=\'\')\n-        dynfolder.layout = \'custom_view\'\n+        dynfolder.manage_addDTMLMethod("custom_view", file="")\n+        dynfolder.layout = "custom_view"\n         info = self.types.getTypeInfo(dynfolder)\n         self.assertEqual(\n-            info.getViewMethod(dynfolder, check_exists=True),\n-            \'custom_view\'\n+            info.getViewMethod(dynfolder, check_exists=True), "custom_view"\n         )\n \n     def test_MissingLayoutReturnsDefaultView(self):\n         dynfolder = self._makeOne()\n-        dynfolder.layout = \'bad_view\'\n+        dynfolder.layout = "bad_view"\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(\n-            info.getViewMethod(dynfolder, check_exists=True),\n-            \'index_html\'\n-        )\n+        self.assertEqual(info.getViewMethod(dynfolder, check_exists=True), "index_html")\n \n     def test_DynFolderDefaultPage(self):\n         dynfolder = self._makeOne()\n@@ -134,15 +123,15 @@ def test_DynFolderDefaultPage(self):\n \n     def test_DynFolderDefaultPageFromAttribute(self):\n         dynfolder = self._makeOne()\n-        dynfolder.default_page = \'custom_page\'\n+        dynfolder.default_page = "custom_page"\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(info.getDefaultPage(dynfolder), \'custom_page\')\n+        self.assertEqual(info.getDefaultPage(dynfolder), "custom_page")\n \n     def test_DynFolderDefaultPageFromCallable(self):\n         dynfolder = self._makeOne()\n-        dynfolder.default_page = lambda: \'custom_page\'\n+        dynfolder.default_page = lambda: "custom_page"\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(info.getDefaultPage(dynfolder), \'custom_page\')\n+        self.assertEqual(info.getDefaultPage(dynfolder), "custom_page")\n \n     def test_NoneDefaultPageReturnsNone(self):\n         dynfolder = self._makeOne()\n@@ -152,7 +141,7 @@ def test_NoneDefaultPageReturnsNone(self):\n \n     def test_EmptyDefaultPageReturnsNone(self):\n         dynfolder = self._makeOne()\n-        dynfolder.default_page = \'\'\n+        dynfolder.default_page = ""\n         info = self.types.getTypeInfo(dynfolder)\n         self.assertEqual(info.getDefaultPage(dynfolder), None)\n \n@@ -164,84 +153,72 @@ def test_InvalidDefaultPageRaisesTypeError(self):\n \n     def test_CheckDefaultPageExists(self):\n         dynfolder = self._makeOne()\n-        dynfolder.manage_addDTMLMethod(\'custom_page\', file=\'\')\n-        dynfolder.default_page = \'custom_page\'\n+        dynfolder.manage_addDTMLMethod("custom_page", file="")\n+        dynfolder.default_page = "custom_page"\n         info = self.types.getTypeInfo(dynfolder)\n         self.assertEqual(\n-            info.getDefaultPage(dynfolder, check_exists=True),\n-            \'custom_page\'\n+            info.getDefaultPage(dynfolder, check_exists=True), "custom_page"\n         )\n \n     def test_MissingDefaultPageReturnsNone(self):\n         dynfolder = self._makeOne()\n-        dynfolder.default_page = \'bad_page\'\n+        dynfolder.default_page = "bad_page"\n         info = self.types.getTypeInfo(dynfolder)\n-        self.assertEqual(\n-            info.getDefaultPage(dynfolder, check_exists=True),\n-            None\n-        )\n+        self.assertEqual(info.getDefaultPage(dynfolder, check_exists=True), None)\n \n     def test_NonFolderishObjectReturnsNone(self):\n         dynfolder = self._makeOne()\n         dynfolder.isPrincipiaFolderish = 0\n-        dynfolder.default_page = \'custom_page\'\n+        dynfolder.default_page = "custom_page"\n         info = self.types.getTypeInfo(dynfolder)\n         self.assertEqual(info.getDefaultPage(dynfolder), None)\n \n     def test_DefaultViewWithBadLayoutUseFallback(self):\n         dynfolder = self._makeOne()\n-        dynfolder.layout = \'bad_view\'\n+        dynfolder.layout = "bad_view"\n         info = self.types.getTypeInfo(dynfolder)\n         # fallback not returned if not activated\n         self.assertFalse(info.default_view_fallback)\n-        self.assertEqual(\n-            info.defaultView(dynfolder),\n-            \'bad_view\'\n-        )\n+        self.assertEqual(info.defaultView(dynfolder), "bad_view")\n         # enable fallback\n         info.default_view_fallback = True\n-        self.assertEqual(\n-            info.defaultView(dynfolder),\n-            info.default_view\n-        )\n+        self.assertEqual(info.defaultView(dynfolder), info.default_view)\n \n \n class TestModifyDefaultPage(CMFDVFTITestCase.CMFDVFTITestCase):\n-\n     def _makeOne(self):\n         # Create and return a DynFolder\n-        self.folder.invokeFactory(\'DynFolder\', id=\'dynfolder\')\n+        self.folder.invokeFactory("DynFolder", id="dynfolder")\n         dynfolder = self.folder.dynfolder\n-        dynfolder.invokeFactory(\'DynDocument\', id=\'default_document\')\n-        dynfolder.setDefaultPage(\'default_document\')\n+        dynfolder.invokeFactory("DynDocument", id="default_document")\n+        dynfolder.setDefaultPage("default_document")\n         return dynfolder\n \n     def test_rename_default_page(self):\n         dynfolder = self._makeOne()\n-        self.assertEqual(dynfolder.getDefaultPage(), \'default_document\')\n+        self.assertEqual(dynfolder.getDefaultPage(), "default_document")\n         transaction.commit()\n-        dynfolder.manage_renameObject(\'default_document\', \'renamed_default\')\n-        self.assertFalse(\'default_document\' in dynfolder.objectIds())\n-        self.assertTrue(\'renamed_default\' in dynfolder.objectIds())\n-        self.assertEqual(dynfolder.getDefaultPage(), \'renamed_default\')\n-        self.assertEqual(dynfolder.getProperty(\'default_page\', \'\'),\n-                         \'renamed_default\')\n+        dynfolder.manage_renameObject("default_document", "renamed_default")\n+        self.assertFalse("default_document" in dynfolder.objectIds())\n+        self.assertTrue("renamed_default" in dynfolder.objectIds())\n+        self.assertEqual(dynfolder.getDefaultPage(), "renamed_default")\n+        self.assertEqual(dynfolder.getProperty("default_page", ""), "renamed_default")\n \n     def test_delete_default_page(self):\n         dynfolder = self._makeOne()\n-        self.assertEqual(dynfolder.getDefaultPage(), \'default_document\')\n-        dynfolder.manage_delObjects([\'default_document\'])\n-        self.assertFalse(\'default_document\' in dynfolder.objectIds())\n+        self.assertEqual(dynfolder.getDefaultPage(), "default_document")\n+        dynfolder.manage_delObjects(["default_document"])\n+        self.assertFalse("default_document" in dynfolder.objectIds())\n         self.assertEqual(dynfolder.getDefaultPage(), None)\n-        self.assertEqual(dynfolder.getProperty(\'default_page\', \'\'), \'\')\n+        self.assertEqual(dynfolder.getProperty("default_page", ""), "")\n \n     def test_cut_default_page(self):\n         dynfolder = self._makeOne()\n-        self.assertEqual(dynfolder.getDefaultPage(), \'default_document\')\n+        self.assertEqual(dynfolder.getDefaultPage(), "default_document")\n         transaction.commit()\n-        clipboard = dynfolder.manage_cutObjects([\'default_document\'])\n+        clipboard = dynfolder.manage_cutObjects(["default_document"])\n         self.folder.manage_pasteObjects(clipboard)\n-        self.assertFalse(\'default_document\' in dynfolder.objectIds())\n-        self.assertTrue(\'default_document\' in self.folder.objectIds())\n+        self.assertFalse("default_document" in dynfolder.objectIds())\n+        self.assertTrue("default_document" in self.folder.objectIds())\n         self.assertEqual(dynfolder.getDefaultPage(), None)\n-        self.assertEqual(dynfolder.getProperty(\'default_page\', \'\'), \'\')\n+        self.assertEqual(dynfolder.getProperty("default_page", ""), "")\ndiff --git a/Products/__init__.py b/Products/__init__.py\nindex f48ad10..5284146 100644\n--- a/Products/__init__.py\n+++ b/Products/__init__.py\n@@ -1,6 +1 @@\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex 506a75f..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,178 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-tmpeggs = tempfile.mkdtemp()\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep\n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n-\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-\n-\n-options, args = parser.parse_args()\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    if options.allow_site_packages:\n-        import setuptools\n-        import pkg_resources\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-requirement = \'zc.buildout\'\n-version = options.version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        for part in parsed_version:\n-            if (part[:1] == \'*\') and (part not in _final_parts):\n-                return False\n-        return True\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/news/3333c742.internal b/news/3333c742.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/3333c742.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 526aeb2..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex 78404d9..5cd375c 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,7 +1,8 @@\n from setuptools import find_packages\n from setuptools import setup\n \n-version = \'7.0.1.dev0\'\n+\n+version = "7.0.1.dev0"\n \n long_description = open("README.rst").read()\n long_description += "\\n"\n@@ -9,7 +10,7 @@\n \n \n setup(\n-    name=\'Products.CMFDynamicViewFTI\',\n+    name="Products.CMFDynamicViewFTI",\n     version=version,\n     description="CMFDynamicViewFTI is a product for dynamic views in CMF.",\n     long_description=long_description,\n@@ -26,32 +27,31 @@\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'Zope CMF Plone dynamic view\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/Products.CMFDynamicViewFTI\',\n-    license=\'ZPL\',\n+    keywords="Zope CMF Plone dynamic view",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/Products.CMFDynamicViewFTI",\n+    license="ZPL",\n     packages=find_packages(),\n-    namespace_packages=[\'Products\'],\n+    namespace_packages=["Products"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-            \'plone.app.contentmenu\',\n-            \'zope.publisher\',\n-            \'plone.app.testing >= 4.2.5\',\n+            "Products.GenericSetup",\n+            "plone.base",\n+            "plone.app.testing >= 4.2.5",\n+            "plone.testing",\n+            "zope.publisher",\n         ]\n     ),\n     python_requires=">=3.8",\n     install_requires=[\n-        \'setuptools\',\n-        \'zope.browsermenu\',\n-        \'zope.component\',\n-        \'zope.interface\',\n-        \'Products.CMFCore\',\n-        \'Products.GenericSetup\',\n-        \'Acquisition\',\n-        \'ExtensionClass\',\n-        \'Zope\',\n+        "setuptools",\n+        "zope.browser",\n+        "zope.browsermenu",\n+        "Products.CMFCore",\n+        "ExtensionClass",\n+        "Zope",\n     ],\n )\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..ddf8828\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s Products.CMFDynamicViewFTI {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s Products.CMFDynamicViewFTI {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

