Repository: plone.autoform


Branch: refs/heads/master
Date: 2017-05-03T23:52:16+02:00
Author: Gil Forcada (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.autoform/commit/45e1601f029f8a21c07bfaff873583d23826bf5a

Clean up code analysis warnings

Files changed:
M CHANGES.rst
M plone/autoform/interfaces.py
M plone/autoform/supermodel.py
M plone/autoform/tests/test_directives.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 777da38..99c79ca 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -17,6 +17,8 @@ Bug fixes:
 - Fix traceback in updateFieldsFromSchemata for forms with no schema.
   [davisagli]
 
+- Clean up code.
+  [gforcada]
 
 1.7.2 (2017-04-01)
 ------------------
diff --git a/plone/autoform/interfaces.py b/plone/autoform/interfaces.py
index c19bcb5..8364b9a 100644
--- a/plone/autoform/interfaces.py
+++ b/plone/autoform/interfaces.py
@@ -11,13 +11,13 @@
 
 
 # Schema interface tagged value keys
-MODES_KEY = u"plone.autoform.modes"
-OMITTED_KEY = u"plone.autoform.omitted"
-ORDER_KEY = u"plone.autoform.order"
-WIDGETS_KEY = u"plone.autoform.widgets"
+MODES_KEY = u'plone.autoform.modes'
+OMITTED_KEY = u'plone.autoform.omitted'
+ORDER_KEY = u'plone.autoform.order'
+WIDGETS_KEY = u'plone.autoform.widgets'
 
-READ_PERMISSIONS_KEY = u"plone.autoform.security.read-permissions"
-WRITE_PERMISSIONS_KEY = u"plone.autoform.security.write-permissions"
+READ_PERMISSIONS_KEY = u'plone.autoform.security.read-permissions'
+WRITE_PERMISSIONS_KEY = u'plone.autoform.security.write-permissions'
 
 # Supermodel namespace and prefix
 
@@ -42,19 +42,19 @@ class IAutoExtensibleForm(Interface):
     """
 
     ignorePrefix = zope.schema.Bool(
-        title=u"Do not set a prefix for additional schemata",
+        title=u'Do not set a prefix for additional schemata',
         default=False
     )
 
     schema = zope.schema.Object(
-        title=u"Schema providing form fields",
+        title=u'Schema providing form fields',
         schema=IInterface
     )
 
     additionalSchemata = zope.schema.Tuple(
-        title=u"Supplementary schemata providing additional form fields",
+        title=u'Supplementary schemata providing additional form fields',
         value_type=zope.schema.Object(
-            title=u"Schema interface",
+            title=u'Schema interface',
             schema=IInterface
         ),
         required=False
@@ -67,7 +67,7 @@ class IAutoObjectSubForm(Interface):
     """
 
     schema = zope.schema.Object(
-        title=u"Schema providing form fields",
+        title=u'Schema providing form fields',
         schema=IInterface
     )
 
@@ -78,25 +78,25 @@ class IWidgetsView(IAutoExtensibleForm, IFieldsForm, IDisplayForm):
     """
 
     w = zope.schema.Dict(
-        title=u"Shortcut lookup for all widgets",
-        description=u"Contains all widgets, including those from groups "
-                    u"within this form",
+        title=u'Shortcut lookup for all widgets',
+        description=u'Contains all widgets, including those from groups '
+                    u'within this form',
         key_type=zope.schema.ASCIILine(
-            title=u"Widget name, with prefix"
+            title=u'Widget name, with prefix'
         ),
         value_type=zope.schema.Object(
-            title=u"Widget",
+            title=u'Widget',
             schema=IWidget
         )
     )
 
     fieldsets = zope.schema.Dict(
-        title=u"Lookup fieldset (group) by name",
+        title=u'Lookup fieldset (group) by name',
         key_type=zope.schema.ASCIILine(
-            title=u"Fieldset name"
+            title=u'Fieldset name'
         ),
         value_type=zope.schema.Object(
-            title=u"Fieldset",
+            title=u'Fieldset',
             schema=IFieldset
         )
     )
diff --git a/plone/autoform/supermodel.py b/plone/autoform/supermodel.py
index b5c61a8..16211fb 100644
--- a/plone/autoform/supermodel.py
+++ b/plone/autoform/supermodel.py
@@ -50,7 +50,8 @@ def _add_interface_values(self, schema, key, name, values):
                 interface = resolveDottedName(interface_dotted_name)
                 if not isinstance(interface, InterfaceClass):
                     raise ValueError(
-                        '%s not an Interface.' % interface_dotted_name)
+                        '{0} not an Interface.'.format(interface_dotted_name)
+                    )
             else:
                 interface = Interface
             tagged_value.append((interface, name, value))
@@ -59,9 +60,8 @@ def _add_interface_values(self, schema, key, name, values):
     def _add_validator(self, field, value):
         validator = resolveDottedName(value)
         if not IValidator.implementedBy(validator):
-            raise ValueError(
-                'z3c.form.interfaces.IValidator not implemented by %s.'
-                % value)
+            msg = 'z3c.form.interfaces.IValidator not implemented by {0}.'
+            raise ValueError(msg.format(value))
         provideAdapter(
             validator,
             (None, None, None, getSpecification(field), None),
@@ -103,7 +103,9 @@ def read(self, fieldNode, schema, field):
         elif widgetAttr is not None:  # BBB for old form:widget attributes
             obj = resolveDottedName(widgetAttr)
             if not IFieldWidget.implementedBy(obj):
-                raise ValueError('IFieldWidget not implemented by %s' % obj)
+                raise ValueError(
+                    'IFieldWidget not implemented by {0}'.format(obj)
+                )
             widget = widgetAttr
         if widget is not None:
             self._add(schema, WIDGETS_KEY, name, widget)
@@ -142,7 +144,7 @@ def write(self, fieldNode, schema, field):
         mode_values = []
         for interface, value in mode:
             if interface is not Interface:
-                value = '%s:%s' % (interface.__identifier__, value)
+                value = '{0}:{1}'.format(interface.__identifier__, value)
             mode_values.append(value)
         if mode_values:
             fieldNode.set(ns('mode', self.namespace), ' '.join(mode_values))
@@ -150,7 +152,7 @@ def write(self, fieldNode, schema, field):
         omitted_values = []
         for interface, value in omitted:
             if interface is not Interface:
-                value = '%s:%s' % (interface.__identifier__, value)
+                value = '{0}:{1}'.format(interface.__identifier__, value)
             omitted_values.append(value)
         if omitted_values:
             fieldNode.set(
diff --git a/plone/autoform/tests/test_directives.py b/plone/autoform/tests/test_directives.py
index 698aff0..027bf75 100644
--- a/plone/autoform/tests/test_directives.py
+++ b/plone/autoform/tests/test_directives.py
@@ -37,10 +37,10 @@ class IDummy(model.Schema):
             form.read_permission(foo='zope2.View')
             form.write_permission(foo='cmf.ModifyPortalContent')
 
-            foo = zope.schema.TextLine(title=u"Foo")
-            bar = zope.schema.TextLine(title=u"Bar")
-            baz = zope.schema.TextLine(title=u"Baz")
-            qux = zope.schema.TextLine(title=u"Qux")
+            foo = zope.schema.TextLine(title=u'Foo')
+            bar = zope.schema.TextLine(title=u'Bar')
+            baz = zope.schema.TextLine(title=u'Baz')
+            qux = zope.schema.TextLine(title=u'Qux')
 
         model.finalizeSchemas(IDummy)
 
@@ -68,9 +68,9 @@ def test_widget_supports_instances_and_strings(self):
         class IDummy(model.Schema):
             form.widget(foo=DummyWidget)
 
-            foo = zope.schema.TextLine(title=u"Foo")
-            bar = zope.schema.TextLine(title=u"Bar")
-            baz = zope.schema.TextLine(title=u"Baz")
+            foo = zope.schema.TextLine(title=u'Foo')
+            bar = zope.schema.TextLine(title=u'Bar')
+            baz = zope.schema.TextLine(title=u'Baz')
 
         self.assertEqual(
             {'foo': 'plone.autoform.tests.test_directives.DummyWidget'},
@@ -90,7 +90,7 @@ def __init__(self, request):
 
         class IDummy(model.Schema):
             form.widget('foo', DummyWidget, foo='bar')
-            foo = zope.schema.TextLine(title=u"Foo")
+            foo = zope.schema.TextLine(title=u'Foo')
 
         tv = IDummy.queryTaggedValue(WIDGETS_KEY)
         self.assertTrue(isinstance(tv['foo'], ParameterizedWidget))
@@ -110,7 +110,7 @@ def __init__(self, request):
 
         class IDummy(model.Schema):
             form.widget('foo', foo='bar')
-            foo = zope.schema.TextLine(title=u"Foo")
+            foo = zope.schema.TextLine(title=u'Foo')
 
         tv = IDummy.queryTaggedValue(WIDGETS_KEY)
         self.assertTrue(isinstance(tv['foo'], ParameterizedWidget))
@@ -145,10 +145,10 @@ class IDummy(model.Schema):
             form.write_permission(foo='cmf.ModifyPortalContent')
             form.write_permission(baz='another.Permission')
 
-            foo = zope.schema.TextLine(title=u"Foo")
-            bar = zope.schema.TextLine(title=u"Bar")
-            baz = zope.schema.TextLine(title=u"Baz")
-            qux = zope.schema.TextLine(title=u"Qux")
+            foo = zope.schema.TextLine(title=u'Foo')
+            bar = zope.schema.TextLine(title=u'Bar')
+            baz = zope.schema.TextLine(title=u'Baz')
+            qux = zope.schema.TextLine(title=u'Qux')
 
         self.assertEqual({'foo': 'some.dummy.Widget',
                           'baz': 'other.Widget'},


Repository: plone.autoform


Branch: refs/heads/master
Date: 2017-05-04T00:38:53+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.autoform/commit/f5689d82da71600edccf36f8167c46ba2cd0ecda

Merge pull request #26 from plone/cleanup

Clean up code analysis warnings

Files changed:
M CHANGES.rst
M plone/autoform/interfaces.py
M plone/autoform/supermodel.py
M plone/autoform/tests/test_directives.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 777da38..99c79ca 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -17,6 +17,8 @@ Bug fixes:
 - Fix traceback in updateFieldsFromSchemata for forms with no schema.
   [davisagli]
 
+- Clean up code.
+  [gforcada]
 
 1.7.2 (2017-04-01)
 ------------------
diff --git a/plone/autoform/interfaces.py b/plone/autoform/interfaces.py
index c19bcb5..8364b9a 100644
--- a/plone/autoform/interfaces.py
+++ b/plone/autoform/interfaces.py
@@ -11,13 +11,13 @@
 
 
 # Schema interface tagged value keys
-MODES_KEY = u"plone.autoform.modes"
-OMITTED_KEY = u"plone.autoform.omitted"
-ORDER_KEY = u"plone.autoform.order"
-WIDGETS_KEY = u"plone.autoform.widgets"
+MODES_KEY = u'plone.autoform.modes'
+OMITTED_KEY = u'plone.autoform.omitted'
+ORDER_KEY = u'plone.autoform.order'
+WIDGETS_KEY = u'plone.autoform.widgets'
 
-READ_PERMISSIONS_KEY = u"plone.autoform.security.read-permissions"
-WRITE_PERMISSIONS_KEY = u"plone.autoform.security.write-permissions"
+READ_PERMISSIONS_KEY = u'plone.autoform.security.read-permissions'
+WRITE_PERMISSIONS_KEY = u'plone.autoform.security.write-permissions'
 
 # Supermodel namespace and prefix
 
@@ -42,19 +42,19 @@ class IAutoExtensibleForm(Interface):
     """
 
     ignorePrefix = zope.schema.Bool(
-        title=u"Do not set a prefix for additional schemata",
+        title=u'Do not set a prefix for additional schemata',
         default=False
     )
 
     schema = zope.schema.Object(
-        title=u"Schema providing form fields",
+        title=u'Schema providing form fields',
         schema=IInterface
     )
 
     additionalSchemata = zope.schema.Tuple(
-        title=u"Supplementary schemata providing additional form fields",
+        title=u'Supplementary schemata providing additional form fields',
         value_type=zope.schema.Object(
-            title=u"Schema interface",
+            title=u'Schema interface',
             schema=IInterface
         ),
         required=False
@@ -67,7 +67,7 @@ class IAutoObjectSubForm(Interface):
     """
 
     schema = zope.schema.Object(
-        title=u"Schema providing form fields",
+        title=u'Schema providing form fields',
         schema=IInterface
     )
 
@@ -78,25 +78,25 @@ class IWidgetsView(IAutoExtensibleForm, IFieldsForm, IDisplayForm):
     """
 
     w = zope.schema.Dict(
-        title=u"Shortcut lookup for all widgets",
-        description=u"Contains all widgets, including those from groups "
-                    u"within this form",
+        title=u'Shortcut lookup for all widgets',
+        description=u'Contains all widgets, including those from groups '
+                    u'within this form',
         key_type=zope.schema.ASCIILine(
-            title=u"Widget name, with prefix"
+            title=u'Widget name, with prefix'
         ),
         value_type=zope.schema.Object(
-            title=u"Widget",
+            title=u'Widget',
             schema=IWidget
         )
     )
 
     fieldsets = zope.schema.Dict(
-        title=u"Lookup fieldset (group) by name",
+        title=u'Lookup fieldset (group) by name',
         key_type=zope.schema.ASCIILine(
-            title=u"Fieldset name"
+            title=u'Fieldset name'
         ),
         value_type=zope.schema.Object(
-            title=u"Fieldset",
+            title=u'Fieldset',
             schema=IFieldset
         )
     )
diff --git a/plone/autoform/supermodel.py b/plone/autoform/supermodel.py
index b5c61a8..16211fb 100644
--- a/plone/autoform/supermodel.py
+++ b/plone/autoform/supermodel.py
@@ -50,7 +50,8 @@ def _add_interface_values(self, schema, key, name, values):
                 interface = resolveDottedName(interface_dotted_name)
                 if not isinstance(interface, InterfaceClass):
                     raise ValueError(
-                        '%s not an Interface.' % interface_dotted_name)
+                        '{0} not an Interface.'.format(interface_dotted_name)
+                    )
             else:
                 interface = Interface
             tagged_value.append((interface, name, value))
@@ -59,9 +60,8 @@ def _add_interface_values(self, schema, key, name, values):
     def _add_validator(self, field, value):
         validator = resolveDottedName(value)
         if not IValidator.implementedBy(validator):
-            raise ValueError(
-                'z3c.form.interfaces.IValidator not implemented by %s.'
-                % value)
+            msg = 'z3c.form.interfaces.IValidator not implemented by {0}.'
+            raise ValueError(msg.format(value))
         provideAdapter(
             validator,
             (None, None, None, getSpecification(field), None),
@@ -103,7 +103,9 @@ def read(self, fieldNode, schema, field):
         elif widgetAttr is not None:  # BBB for old form:widget attributes
             obj = resolveDottedName(widgetAttr)
             if not IFieldWidget.implementedBy(obj):
-                raise ValueError('IFieldWidget not implemented by %s' % obj)
+                raise ValueError(
+                    'IFieldWidget not implemented by {0}'.format(obj)
+                )
             widget = widgetAttr
         if widget is not None:
             self._add(schema, WIDGETS_KEY, name, widget)
@@ -142,7 +144,7 @@ def write(self, fieldNode, schema, field):
         mode_values = []
         for interface, value in mode:
             if interface is not Interface:
-                value = '%s:%s' % (interface.__identifier__, value)
+                value = '{0}:{1}'.format(interface.__identifier__, value)
             mode_values.append(value)
         if mode_values:
             fieldNode.set(ns('mode', self.namespace), ' '.join(mode_values))
@@ -150,7 +152,7 @@ def write(self, fieldNode, schema, field):
         omitted_values = []
         for interface, value in omitted:
             if interface is not Interface:
-                value = '%s:%s' % (interface.__identifier__, value)
+                value = '{0}:{1}'.format(interface.__identifier__, value)
             omitted_values.append(value)
         if omitted_values:
             fieldNode.set(
diff --git a/plone/autoform/tests/test_directives.py b/plone/autoform/tests/test_directives.py
index 698aff0..027bf75 100644
--- a/plone/autoform/tests/test_directives.py
+++ b/plone/autoform/tests/test_directives.py
@@ -37,10 +37,10 @@ class IDummy(model.Schema):
             form.read_permission(foo='zope2.View')
             form.write_permission(foo='cmf.ModifyPortalContent')
 
-            foo = zope.schema.TextLine(title=u"Foo")
-            bar = zope.schema.TextLine(title=u"Bar")
-            baz = zope.schema.TextLine(title=u"Baz")
-            qux = zope.schema.TextLine(title=u"Qux")
+            foo = zope.schema.TextLine(title=u'Foo')
+            bar = zope.schema.TextLine(title=u'Bar')
+            baz = zope.schema.TextLine(title=u'Baz')
+            qux = zope.schema.TextLine(title=u'Qux')
 
         model.finalizeSchemas(IDummy)
 
@@ -68,9 +68,9 @@ def test_widget_supports_instances_and_strings(self):
         class IDummy(model.Schema):
             form.widget(foo=DummyWidget)
 
-            foo = zope.schema.TextLine(title=u"Foo")
-            bar = zope.schema.TextLine(title=u"Bar")
-            baz = zope.schema.TextLine(title=u"Baz")
+            foo = zope.schema.TextLine(title=u'Foo')
+            bar = zope.schema.TextLine(title=u'Bar')
+            baz = zope.schema.TextLine(title=u'Baz')
 
         self.assertEqual(
             {'foo': 'plone.autoform.tests.test_directives.DummyWidget'},
@@ -90,7 +90,7 @@ def __init__(self, request):
 
         class IDummy(model.Schema):
             form.widget('foo', DummyWidget, foo='bar')
-            foo = zope.schema.TextLine(title=u"Foo")
+            foo = zope.schema.TextLine(title=u'Foo')
 
         tv = IDummy.queryTaggedValue(WIDGETS_KEY)
         self.assertTrue(isinstance(tv['foo'], ParameterizedWidget))
@@ -110,7 +110,7 @@ def __init__(self, request):
 
         class IDummy(model.Schema):
             form.widget('foo', foo='bar')
-            foo = zope.schema.TextLine(title=u"Foo")
+            foo = zope.schema.TextLine(title=u'Foo')
 
         tv = IDummy.queryTaggedValue(WIDGETS_KEY)
         self.assertTrue(isinstance(tv['foo'], ParameterizedWidget))
@@ -145,10 +145,10 @@ class IDummy(model.Schema):
             form.write_permission(foo='cmf.ModifyPortalContent')
             form.write_permission(baz='another.Permission')
 
-            foo = zope.schema.TextLine(title=u"Foo")
-            bar = zope.schema.TextLine(title=u"Bar")
-            baz = zope.schema.TextLine(title=u"Baz")
-            qux = zope.schema.TextLine(title=u"Qux")
+            foo = zope.schema.TextLine(title=u'Foo')
+            bar = zope.schema.TextLine(title=u'Bar')
+            baz = zope.schema.TextLine(title=u'Baz')
+            qux = zope.schema.TextLine(title=u'Qux')
 
         self.assertEqual({'foo': 'some.dummy.Widget',
                           'baz': 'other.Widget'},


