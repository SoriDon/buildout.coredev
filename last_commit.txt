Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-06-30T14:42:34+02:00
Author: Thomas Buchberger (buchi) <t.buchberger@4teamwork.ch>
Commit: https://github.com/plone/plone.restapi/commit/98de0dd12bcda23ace6045c555849d5ec2cf3865

Rename DX content before adding it to a container

This is more consistent with the behavior when creating content TTW.
Also it avoids creating a savepoint.
AT content still has to be renamed after beeing added to a container.

Files changed:
M CHANGES.rst
M src/plone/restapi/deserializer/atcontent.py
M src/plone/restapi/services/content/add.py
M src/plone/restapi/services/content/tus.py
M src/plone/restapi/services/content/utils.py
M src/plone/restapi/tests/test_content_utils.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 925819b5..042039fc 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,10 @@ Changelog\n   src/plone/restapi instead and use package_data to include them.\n   [lgraf]\n \n+Bugfixes:\n+\n+- Rename Dexterity content before adding it to a container.\n+  [buchi]\n \n 3.2.1 (2018-06-28)\n ------------------\ndiff --git a/src/plone/restapi/deserializer/atcontent.py b/src/plone/restapi/deserializer/atcontent.py\nindex bb8cfb20..a6f696a0 100644\n--- a/src/plone/restapi/deserializer/atcontent.py\n+++ b/src/plone/restapi/deserializer/atcontent.py\n@@ -24,6 +24,8 @@ class DeserializeFromJson(OrderingMixin, object):\n     """JSON deserializer for Archetypes content types\n     """\n \n+    notifies_create = True\n+\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex 51ceb916..65b7b4e9 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -8,7 +8,6 @@\n from plone.restapi.services import Service\n from plone.restapi.services.content.utils import add\n from plone.restapi.services.content.utils import create\n-from plone.restapi.services.content.utils import rename\n from Products.Archetypes.interfaces import IBaseObject\n from Products.CMFPlone.utils import safe_hasattr\n from zExceptions import BadRequest\n@@ -82,11 +81,7 @@ def reply(self):\n         if not IBaseObject.providedBy(obj):\n             notify(ObjectCreatedEvent(obj))\n \n-        obj = add(self.context, obj)\n-\n-        # Rename if generated id\n-        if not id_:\n-            rename(obj)\n+        obj = add(self.context, obj, rename=not bool(id_))\n \n         self.request.response.setStatus(201)\n         self.request.response.setHeader(\'Location\', obj.absolute_url())\ndiff --git a/src/plone/restapi/services/content/tus.py b/src/plone/restapi/services/content/tus.py\nindex 9e908ccd..ee37c13b 100644\n--- a/src/plone/restapi/services/content/tus.py\n+++ b/src/plone/restapi/services/content/tus.py\n@@ -10,7 +10,6 @@\n from plone.restapi.interfaces import IDeserializeFromJson\n from plone.restapi.services import Service\n from plone.restapi.services.content.utils import create\n-from plone.restapi.services.content.utils import rename\n from plone.restapi.services.content.utils import add\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from uuid import uuid4\n@@ -231,8 +230,6 @@ def reply(self):\n                         filename.lower(), content_type, \'\') or \'File\'\n \n                 obj = create(self.context, type_)\n-                notify(ObjectCreatedEvent(obj))\n-                obj = add(self.context, obj)\n             else:\n                 obj = self.context\n \n@@ -263,7 +260,9 @@ def reply(self):\n                     \'Deserialization Error\', str(e), 400)\n \n             if mode == \'create\':\n-                rename(obj)\n+                if not getattr(deserializer, \'notifies_create\', False):\n+                    notify(ObjectCreatedEvent(obj))\n+                obj = add(self.context, obj)\n \n             tus_upload.close()\n             tus_upload.cleanup()\ndiff --git a/src/plone/restapi/services/content/utils.py b/src/plone/restapi/services/content/utils.py\nindex 790dcfa2..d8fc1025 100644\n--- a/src/plone/restapi/services/content/utils.py\n+++ b/src/plone/restapi/services/content/utils.py\n@@ -1,6 +1,5 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_base\n-from Acquisition import aq_parent\n from DateTime import DateTime\n from plone.app.content.interfaces import INameFromTitle\n from plone.app.uuid.utils import uuidToObject\n@@ -16,8 +15,6 @@\n from zope.container.interfaces import INameChooser\n from zope.event import notify\n \n-import transaction\n-\n \n def create(container, type_, id_=None, title=None):\n     """Create a new content item."""\n@@ -68,16 +65,30 @@ def create(container, type_, id_=None, title=None):\n     return obj\n \n \n-def add(container, obj):\n+def add(container, obj, rename=True):\n     """Add an object to a container."""\n-    id_ = obj.getId()\n+    id_ = getattr(aq_base(obj), \'id\', None)\n+\n     # Archetypes objects are already created in a container thus we just fire\n-    # the notification events.\n-    if aq_base(container) is aq_base(aq_parent(obj)):\n+    # the notification events and rename the object if necessary.\n+    if base_hasattr(obj, \'_at_rename_after_creation\'):\n         notify(ObjectAddedEvent(obj, container, id_))\n         notifyContainerModified(container)\n+        if obj._at_rename_after_creation and rename:\n+            obj._renameAfterCreation(check_auto_id=True)\n         return obj\n     else:\n+        if rename:\n+            chooser = INameChooser(container)\n+            # INameFromTitle adaptable objects should not get a name\n+            # suggestion. NameChooser would prefer the given name instead of\n+            # the one provided by the INameFromTitle adapter.\n+            suggestion = None\n+            name_from_title = INameFromTitle(obj, None)\n+            if name_from_title is None:\n+                suggestion = obj.Title()\n+            id_ = chooser.chooseName(suggestion, obj)\n+            obj.id = id_\n         new_id = container._setObject(id_, obj)\n         # _setObject triggers ObjectAddedEvent which can end up triggering a\n         # content rule to move the item to a different container. In this case\n@@ -87,29 +98,3 @@ def add(container, obj):\n         except AttributeError:\n             uuid = IUUID(obj)\n             return uuidToObject(uuid)\n-\n-\n-def rename(obj):\n-    """Rename an object if it has a temporary id."""\n-\n-    # Archetypes objects may get renamed during deserialization.\n-    # Do not rename again.\n-    if (base_hasattr(obj, \'_isIDAutoGenerated\') and\n-            not obj._isIDAutoGenerated(obj.getId())):\n-        return\n-\n-    container = aq_parent(obj)\n-    chooser = INameChooser(container)\n-    # INameFromTitle adaptable objects should not get a name\n-    # suggestion. NameChooser would prefer the given name instead of\n-    # the one provided by the INameFromTitle adapter.\n-    suggestion = None\n-    name_from_title = INameFromTitle(obj, None)\n-    if name_from_title is None:\n-        if base_hasattr(obj, \'generateNewId\'):\n-            suggestion = obj.generateNewId()\n-        else:\n-            suggestion = obj.Title()\n-    name = chooser.chooseName(suggestion, obj)\n-    transaction.savepoint(optimistic=True)\n-    container.manage_renameObject(obj.getId(), name)\ndiff --git a/src/plone/restapi/tests/test_content_utils.py b/src/plone/restapi/tests/test_content_utils.py\nindex 876075ac..898294b9 100644\n--- a/src/plone/restapi/tests/test_content_utils.py\n+++ b/src/plone/restapi/tests/test_content_utils.py\n@@ -4,7 +4,6 @@\n from plone.app.testing import TEST_USER_ID\n from plone.restapi.services.content.utils import add\n from plone.restapi.services.content.utils import create\n-from plone.restapi.services.content.utils import rename\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from Products.CMFPlone.interfaces import ISelectableConstrainTypes\n@@ -113,13 +112,22 @@ def setUp(self):\n         self.folder = self.portal[self.portal.invokeFactory(\n             \'Folder\', id=\'folder\', title=\'My Folder\'\n         )]\n-        self.obj = create(self.folder, \'Document\', \'my-document\')\n-        notify(ObjectCreatedEvent(self.obj))\n \n     def test_add_content_to_container(self):\n-        obj = add(self.folder, self.obj)\n+        obj = create(self.folder, \'Document\', \'my-document\')\n+        obj = add(self.folder, obj)\n         self.assertEqual(aq_parent(obj), self.folder)\n \n+    def test_add_content_to_container_renames_id(self):\n+        obj = create(self.folder, \'Document\', title=\'My Document\')\n+        obj = add(self.folder, obj)\n+        self.assertEqual(obj.getId(), \'my-document\')\n+\n+    def test_add_content_to_container_keeps_id(self):\n+        obj = create(self.folder, \'Document\', \'doc-1\', \'My Document\')\n+        obj = add(self.folder, obj, rename=False)\n+        self.assertEqual(obj.getId(), \'doc-1\')\n+\n     def test_add_content_to_container_and_move_on_added_event(self):\n         sm = getGlobalSiteManager()\n \n@@ -129,7 +137,9 @@ def move_object(event):\n                     ids=[\'my-document\']))\n         sm.registerHandler(move_object, (IObjectAddedEvent,))\n \n-        obj = add(self.folder, self.obj)\n+        obj = create(self.folder, \'Document\', \'my-document\')\n+        notify(ObjectCreatedEvent(obj))\n+        obj = add(self.folder, obj)\n         self.assertEqual(aq_parent(obj), self.portal)\n \n         sm.unregisterHandler(move_object, (IObjectAddedEvent,))\n@@ -147,47 +157,18 @@ def setUp(self):\n         self.folder = self.portal[self.portal.invokeFactory(\n             \'Folder\', id=\'folder\', title=\'My Folder\'\n         )]\n-        self.obj = create(self.folder, \'Document\', \'my-document\')\n \n     def test_add_content_to_container(self):\n-        obj = add(self.folder, self.obj)\n+        obj = create(self.folder, \'Document\', \'my-document\')\n+        obj = add(self.folder, obj)\n         self.assertEqual(aq_parent(obj), self.folder)\n \n+    def test_add_content_to_container_renames_id(self):\n+        obj = create(self.folder, \'Document\', title=\'My Document\')\n+        obj = add(self.folder, obj)\n+        self.assertEqual(obj.getId(), \'my-document\')\n \n-class TestRenameContent(unittest.TestCase):\n-\n-    layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n-\n-    def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-\n-        self.folder = self.portal[self.portal.invokeFactory(\n-            \'Folder\', id=\'folder\', title=\'My Folder\'\n-        )]\n-        self.obj = add(\n-            self.folder, create(self.folder, \'Document\', title=\'My Document\'))\n-\n-    def test_rename_content(self):\n-        rename(self.obj)\n-        self.assertEqual(self.obj.getId(), \'my-document\')\n-\n-\n-class TestATRenameContent(unittest.TestCase):\n-\n-    layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n-\n-    def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n-\n-        self.folder = self.portal[self.portal.invokeFactory(\n-            \'Folder\', id=\'folder\', title=\'My Folder\'\n-        )]\n-        self.obj = add(\n-            self.folder, create(self.folder, \'Document\', title=\'My Document\'))\n-\n-    def test_rename_content(self):\n-        rename(self.obj)\n-        self.assertEqual(self.obj.getId(), \'my-document\')\n+    def test_add_content_to_container_keeps_id(self):\n+        obj = create(self.folder, \'Document\', \'doc-1\', \'My Document\')\n+        obj = add(self.folder, obj, rename=False)\n+        self.assertEqual(obj.getId(), \'doc-1\')\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-06-30T14:47:46+02:00
Author: Thomas Buchberger (buchi) <t.buchberger@4teamwork.ch>
Commit: https://github.com/plone/plone.restapi/commit/5e45d06567e53f144ba38ec92480a80ca6f0fe65

Avoid hard dependency on Archetypes

Files changed:
M CHANGES.rst
M src/plone/restapi/services/content/add.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex 042039fc..d4a4db0b 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -13,6 +13,10 @@ Bugfixes:\n - Rename Dexterity content before adding it to a container.\n   [buchi]\n \n+- Avoid hard dependency on Archetypes introduced in 3.0.0.\n+  This fixes `issue 570 <https://github.com/plone/plone.restapi/issues/570>`_. \n+  [buchi]\n+\n 3.2.1 (2018-06-28)\n ------------------\n \ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex 65b7b4e9..efb2086f 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -8,7 +8,6 @@\n from plone.restapi.services import Service\n from plone.restapi.services.content.utils import add\n from plone.restapi.services.content.utils import create\n-from Products.Archetypes.interfaces import IBaseObject\n from Products.CMFPlone.utils import safe_hasattr\n from zExceptions import BadRequest\n from zExceptions import Unauthorized\n@@ -78,7 +77,7 @@ def reply(self):\n         if temporarily_wrapped:\n             obj = aq_base(obj)\n \n-        if not IBaseObject.providedBy(obj):\n+        if not getattr(deserializer, 'notifies_create', False):\n             notify(ObjectCreatedEvent(obj))\n \n         obj = add(self.context, obj, rename=not bool(id_))\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-07-03T16:10:52+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/aa5ae6cea90b0132fec5263b16455b2d7fea3a4c

Merge pull request #577 from plone/rename-before-add

Rename Dexterity content before adding it to a container

Files changed:
M CHANGES.rst
M src/plone/restapi/deserializer/atcontent.py
M src/plone/restapi/services/content/add.py
M src/plone/restapi/services/content/tus.py
M src/plone/restapi/services/content/utils.py
M src/plone/restapi/tests/test_content_utils.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 925819b5..d4a4db0b 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,14 @@ Changelog\n   src/plone/restapi instead and use package_data to include them.\n   [lgraf]\n \n+Bugfixes:\n+\n+- Rename Dexterity content before adding it to a container.\n+  [buchi]\n+\n+- Avoid hard dependency on Archetypes introduced in 3.0.0.\n+  This fixes `issue 570 <https://github.com/plone/plone.restapi/issues/570>`_. \n+  [buchi]\n \n 3.2.1 (2018-06-28)\n ------------------\ndiff --git a/src/plone/restapi/deserializer/atcontent.py b/src/plone/restapi/deserializer/atcontent.py\nindex bb8cfb20..a6f696a0 100644\n--- a/src/plone/restapi/deserializer/atcontent.py\n+++ b/src/plone/restapi/deserializer/atcontent.py\n@@ -24,6 +24,8 @@ class DeserializeFromJson(OrderingMixin, object):\n     """JSON deserializer for Archetypes content types\n     """\n \n+    notifies_create = True\n+\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex 51ceb916..efb2086f 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -8,8 +8,6 @@\n from plone.restapi.services import Service\n from plone.restapi.services.content.utils import add\n from plone.restapi.services.content.utils import create\n-from plone.restapi.services.content.utils import rename\n-from Products.Archetypes.interfaces import IBaseObject\n from Products.CMFPlone.utils import safe_hasattr\n from zExceptions import BadRequest\n from zExceptions import Unauthorized\n@@ -79,14 +77,10 @@ def reply(self):\n         if temporarily_wrapped:\n             obj = aq_base(obj)\n \n-        if not IBaseObject.providedBy(obj):\n+        if not getattr(deserializer, \'notifies_create\', False):\n             notify(ObjectCreatedEvent(obj))\n \n-        obj = add(self.context, obj)\n-\n-        # Rename if generated id\n-        if not id_:\n-            rename(obj)\n+        obj = add(self.context, obj, rename=not bool(id_))\n \n         self.request.response.setStatus(201)\n         self.request.response.setHeader(\'Location\', obj.absolute_url())\ndiff --git a/src/plone/restapi/services/content/tus.py b/src/plone/restapi/services/content/tus.py\nindex 9e908ccd..ee37c13b 100644\n--- a/src/plone/restapi/services/content/tus.py\n+++ b/src/plone/restapi/services/content/tus.py\n@@ -10,7 +10,6 @@\n from plone.restapi.interfaces import IDeserializeFromJson\n from plone.restapi.services import Service\n from plone.restapi.services.content.utils import create\n-from plone.restapi.services.content.utils import rename\n from plone.restapi.services.content.utils import add\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from uuid import uuid4\n@@ -231,8 +230,6 @@ def reply(self):\n                         filename.lower(), content_type, \'\') or \'File\'\n \n                 obj = create(self.context, type_)\n-                notify(ObjectCreatedEvent(obj))\n-                obj = add(self.context, obj)\n             else:\n                 obj = self.context\n \n@@ -263,7 +260,9 @@ def reply(self):\n                     \'Deserialization Error\', str(e), 400)\n \n             if mode == \'create\':\n-                rename(obj)\n+                if not getattr(deserializer, \'notifies_create\', False):\n+                    notify(ObjectCreatedEvent(obj))\n+                obj = add(self.context, obj)\n \n             tus_upload.close()\n             tus_upload.cleanup()\ndiff --git a/src/plone/restapi/services/content/utils.py b/src/plone/restapi/services/content/utils.py\nindex 790dcfa2..d8fc1025 100644\n--- a/src/plone/restapi/services/content/utils.py\n+++ b/src/plone/restapi/services/content/utils.py\n@@ -1,6 +1,5 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_base\n-from Acquisition import aq_parent\n from DateTime import DateTime\n from plone.app.content.interfaces import INameFromTitle\n from plone.app.uuid.utils import uuidToObject\n@@ -16,8 +15,6 @@\n from zope.container.interfaces import INameChooser\n from zope.event import notify\n \n-import transaction\n-\n \n def create(container, type_, id_=None, title=None):\n     """Create a new content item."""\n@@ -68,16 +65,30 @@ def create(container, type_, id_=None, title=None):\n     return obj\n \n \n-def add(container, obj):\n+def add(container, obj, rename=True):\n     """Add an object to a container."""\n-    id_ = obj.getId()\n+    id_ = getattr(aq_base(obj), \'id\', None)\n+\n     # Archetypes objects are already created in a container thus we just fire\n-    # the notification events.\n-    if aq_base(container) is aq_base(aq_parent(obj)):\n+    # the notification events and rename the object if necessary.\n+    if base_hasattr(obj, \'_at_rename_after_creation\'):\n         notify(ObjectAddedEvent(obj, container, id_))\n         notifyContainerModified(container)\n+        if obj._at_rename_after_creation and rename:\n+            obj._renameAfterCreation(check_auto_id=True)\n         return obj\n     else:\n+        if rename:\n+            chooser = INameChooser(container)\n+            # INameFromTitle adaptable objects should not get a name\n+            # suggestion. NameChooser would prefer the given name instead of\n+            # the one provided by the INameFromTitle adapter.\n+            suggestion = None\n+            name_from_title = INameFromTitle(obj, None)\n+            if name_from_title is None:\n+                suggestion = obj.Title()\n+            id_ = chooser.chooseName(suggestion, obj)\n+            obj.id = id_\n         new_id = container._setObject(id_, obj)\n         # _setObject triggers ObjectAddedEvent which can end up triggering a\n         # content rule to move the item to a different container. In this case\n@@ -87,29 +98,3 @@ def add(container, obj):\n         except AttributeError:\n             uuid = IUUID(obj)\n             return uuidToObject(uuid)\n-\n-\n-def rename(obj):\n-    """Rename an object if it has a temporary id."""\n-\n-    # Archetypes objects may get renamed during deserialization.\n-    # Do not rename again.\n-    if (base_hasattr(obj, \'_isIDAutoGenerated\') and\n-            not obj._isIDAutoGenerated(obj.getId())):\n-        return\n-\n-    container = aq_parent(obj)\n-    chooser = INameChooser(container)\n-    # INameFromTitle adaptable objects should not get a name\n-    # suggestion. NameChooser would prefer the given name instead of\n-    # the one provided by the INameFromTitle adapter.\n-    suggestion = None\n-    name_from_title = INameFromTitle(obj, None)\n-    if name_from_title is None:\n-        if base_hasattr(obj, \'generateNewId\'):\n-            suggestion = obj.generateNewId()\n-        else:\n-            suggestion = obj.Title()\n-    name = chooser.chooseName(suggestion, obj)\n-    transaction.savepoint(optimistic=True)\n-    container.manage_renameObject(obj.getId(), name)\ndiff --git a/src/plone/restapi/tests/test_content_utils.py b/src/plone/restapi/tests/test_content_utils.py\nindex 876075ac..898294b9 100644\n--- a/src/plone/restapi/tests/test_content_utils.py\n+++ b/src/plone/restapi/tests/test_content_utils.py\n@@ -4,7 +4,6 @@\n from plone.app.testing import TEST_USER_ID\n from plone.restapi.services.content.utils import add\n from plone.restapi.services.content.utils import create\n-from plone.restapi.services.content.utils import rename\n from plone.restapi.testing import PLONE_RESTAPI_AT_INTEGRATION_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from Products.CMFPlone.interfaces import ISelectableConstrainTypes\n@@ -113,13 +112,22 @@ def setUp(self):\n         self.folder = self.portal[self.portal.invokeFactory(\n             \'Folder\', id=\'folder\', title=\'My Folder\'\n         )]\n-        self.obj = create(self.folder, \'Document\', \'my-document\')\n-        notify(ObjectCreatedEvent(self.obj))\n \n     def test_add_content_to_container(self):\n-        obj = add(self.folder, self.obj)\n+        obj = create(self.folder, \'Document\', \'my-document\')\n+        obj = add(self.folder, obj)\n         self.assertEqual(aq_parent(obj), self.folder)\n \n+    def test_add_content_to_container_renames_id(self):\n+        obj = create(self.folder, \'Document\', title=\'My Document\')\n+        obj = add(self.folder, obj)\n+        self.assertEqual(obj.getId(), \'my-document\')\n+\n+    def test_add_content_to_container_keeps_id(self):\n+        obj = create(self.folder, \'Document\', \'doc-1\', \'My Document\')\n+        obj = add(self.folder, obj, rename=False)\n+        self.assertEqual(obj.getId(), \'doc-1\')\n+\n     def test_add_content_to_container_and_move_on_added_event(self):\n         sm = getGlobalSiteManager()\n \n@@ -129,7 +137,9 @@ def move_object(event):\n                     ids=[\'my-document\']))\n         sm.registerHandler(move_object, (IObjectAddedEvent,))\n \n-        obj = add(self.folder, self.obj)\n+        obj = create(self.folder, \'Document\', \'my-document\')\n+        notify(ObjectCreatedEvent(obj))\n+        obj = add(self.folder, obj)\n         self.assertEqual(aq_parent(obj), self.portal)\n \n         sm.unregisterHandler(move_object, (IObjectAddedEvent,))\n@@ -147,47 +157,18 @@ def setUp(self):\n         self.folder = self.portal[self.portal.invokeFactory(\n             \'Folder\', id=\'folder\', title=\'My Folder\'\n         )]\n-        self.obj = create(self.folder, \'Document\', \'my-document\')\n \n     def test_add_content_to_container(self):\n-        obj = add(self.folder, self.obj)\n+        obj = create(self.folder, \'Document\', \'my-document\')\n+        obj = add(self.folder, obj)\n         self.assertEqual(aq_parent(obj), self.folder)\n \n+    def test_add_content_to_container_renames_id(self):\n+        obj = create(self.folder, \'Document\', title=\'My Document\')\n+        obj = add(self.folder, obj)\n+        self.assertEqual(obj.getId(), \'my-document\')\n \n-class TestRenameContent(unittest.TestCase):\n-\n-    layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n-\n-    def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-\n-        self.folder = self.portal[self.portal.invokeFactory(\n-            \'Folder\', id=\'folder\', title=\'My Folder\'\n-        )]\n-        self.obj = add(\n-            self.folder, create(self.folder, \'Document\', title=\'My Document\'))\n-\n-    def test_rename_content(self):\n-        rename(self.obj)\n-        self.assertEqual(self.obj.getId(), \'my-document\')\n-\n-\n-class TestATRenameContent(unittest.TestCase):\n-\n-    layer = PLONE_RESTAPI_AT_INTEGRATION_TESTING\n-\n-    def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Contributor\'])\n-\n-        self.folder = self.portal[self.portal.invokeFactory(\n-            \'Folder\', id=\'folder\', title=\'My Folder\'\n-        )]\n-        self.obj = add(\n-            self.folder, create(self.folder, \'Document\', title=\'My Document\'))\n-\n-    def test_rename_content(self):\n-        rename(self.obj)\n-        self.assertEqual(self.obj.getId(), \'my-document\')\n+    def test_add_content_to_container_keeps_id(self):\n+        obj = create(self.folder, \'Document\', \'doc-1\', \'My Document\')\n+        obj = add(self.folder, obj, rename=False)\n+        self.assertEqual(obj.getId(), \'doc-1\')\n'

