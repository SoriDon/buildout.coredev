Repository: plone.protect


Branch: refs/heads/master
Date: 2019-07-17T15:17:44+02:00
Author: Manuel Reinhardt (reinhardt) <reinhardt@syslab.com>
Commit: https://github.com/plone/plone.protect/commit/e7bc05eafa7b7874e69f39c1b1344eac53cb96e5

When marking an OOBTree as safe, also mark its buckets as safe.
Fixes issues with objects that have many annotations.
Closes #88

Files changed:
A news/88.fixed
M plone/protect/tests/testAuto.py
M plone/protect/utils.py
M setup.py

b"diff --git a/news/88.fixed b/news/88.fixed\nnew file mode 100644\nindex 0000000..f410527\n--- /dev/null\n+++ b/news/88.fixed\n@@ -0,0 +1 @@\n+When marking an OOBTree as safe, also mark its buckets as safe. Fixes issues with objects that have many annotations.\ndiff --git a/plone/protect/tests/testAuto.py b/plone/protect/tests/testAuto.py\nindex 59640dc..70c75c1 100644\n--- a/plone/protect/tests/testAuto.py\n+++ b/plone/protect/tests/testAuto.py\n@@ -13,6 +13,7 @@\n from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING\n from plone.testing.zope import Browser\n from zExceptions import Forbidden\n+from zope.annotation.interfaces import IAnnotations\n from zope.component import getUtility\n \n import transaction\n@@ -186,6 +187,21 @@ def test_safe_write_empty_returns_true(self):\n         transform._registered_objects = lambda: [self.portal]\n         self.assertTrue(transform._check())\n \n+    def test_safe_write_large_oobtree(self):\n+        annotations = IAnnotations(self.portal)\n+        # Make sure the OOBTree has a second bucket. One bucket holds 30 items.\n+        for idx in range(35):\n+            key = '{0}{1}'.format(__name__, idx)\n+            value = 'test'\n+            annotations[key] = value\n+        transaction.commit()\n+        # Key that is alphabetically after the others ends up in the second\n+        # bucket.\n+        annotations['{0}{1}'.format(__name__, 'XXX999')] = 'abcd'\n+        safeWrite(annotations.obj.__annotations__)\n+        transform = ProtectTransform(self.portal, self.request)\n+        self.assertTrue(transform._check())\n+\n \n class TestAutoTransform(unittest.TestCase):\n     layer = PROTECT_FUNCTIONAL_TESTING\ndiff --git a/plone/protect/utils.py b/plone/protect/utils.py\nindex de859ad..358d3da 100644\n--- a/plone/protect/utils.py\n+++ b/plone/protect/utils.py\n@@ -1,6 +1,8 @@\n # -*- coding: utf-8 -*-\n from AccessControl.requestmethod import buildfacade\n from Acquisition import aq_parent\n+from BTrees.OOBTree import OOBTree\n+from BTrees.IOBTree import IOBTree\n from OFS.interfaces import IApplication\n from plone.keyring.keymanager import KeyManager\n from plone.protect.authenticator import createToken\n@@ -122,5 +124,11 @@ def safeWrite(obj, request=None):\n     try:\n         if obj._p_oid not in request.environ[SAFE_WRITE_KEY]:\n             request.environ[SAFE_WRITE_KEY].append(obj._p_oid)\n+        if isinstance(obj, (OOBTree, IOBTree)):\n+            bucket = obj._firstbucket\n+            while bucket:\n+                if bucket._p_oid not in request.environ[SAFE_WRITE_KEY]:\n+                    request.environ[SAFE_WRITE_KEY].append(bucket._p_oid)\n+                bucket = bucket._next\n     except AttributeError:\n         LOGGER.debug('object you attempted to mark safe does not have an oid')\ndiff --git a/setup.py b/setup.py\nindex f09f43d..b9e7404 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -51,6 +51,7 @@\n         'test': [\n             'plone.app.testing',\n             'Products.CMFPlone'\n+            'zope.annotation',\n         ],\n     }\n )\n"

Repository: plone.protect


Branch: refs/heads/master
Date: 2019-07-19T13:29:19+02:00
Author: Manuel Reinhardt (reinhardt) <reinhardt@syslab.com>
Commit: https://github.com/plone/plone.protect/commit/70511efaece7c4f387d8ff24f8ec629d26977250

Include more BTree types in the bucket fix.
Refs #88

Files changed:
M plone/protect/utils.py

b'diff --git a/plone/protect/utils.py b/plone/protect/utils.py\nindex 358d3da..7f8af53 100644\n--- a/plone/protect/utils.py\n+++ b/plone/protect/utils.py\n@@ -1,8 +1,15 @@\n # -*- coding: utf-8 -*-\n from AccessControl.requestmethod import buildfacade\n from Acquisition import aq_parent\n-from BTrees.OOBTree import OOBTree\n+from BTrees.IFBTree import IFBTree\n+from BTrees.IIBTree import IIBTree\n from BTrees.IOBTree import IOBTree\n+from BTrees.LFBTree import LFBTree\n+from BTrees.LLBTree import LLBTree\n+from BTrees.LOBTree import LOBTree\n+from BTrees.OIBTree import OIBTree\n+from BTrees.OLBTree import OLBTree\n+from BTrees.OOBTree import OOBTree\n from OFS.interfaces import IApplication\n from plone.keyring.keymanager import KeyManager\n from plone.protect.authenticator import createToken\n@@ -124,7 +131,18 @@ def safeWrite(obj, request=None):\n     try:\n         if obj._p_oid not in request.environ[SAFE_WRITE_KEY]:\n             request.environ[SAFE_WRITE_KEY].append(obj._p_oid)\n-        if isinstance(obj, (OOBTree, IOBTree)):\n+        btree_types = (\n+            IFBTree,\n+            IIBTree,\n+            IOBTree,\n+            LFBTree,\n+            LLBTree,\n+            LOBTree,\n+            OIBTree,\n+            OLBTree,\n+            OOBTree,\n+        )\n+        if isinstance(obj, btree_types):\n             bucket = obj._firstbucket\n             while bucket:\n                 if bucket._p_oid not in request.environ[SAFE_WRITE_KEY]:\n'

Repository: plone.protect


Branch: refs/heads/master
Date: 2019-07-22T09:36:35+02:00
Author: Manuel Reinhardt (reinhardt) <reinhardt@syslab.com>
Commit: https://github.com/plone/plone.protect/commit/546e21d644d848707c1045936bd4df407e486cd1

Moved BTree types tuple to module level.
Refs #88

Files changed:
M plone/protect/utils.py

b"diff --git a/plone/protect/utils.py b/plone/protect/utils.py\nindex 7f8af53..e749e76 100644\n--- a/plone/protect/utils.py\n+++ b/plone/protect/utils.py\n@@ -20,6 +20,17 @@\n \n \n SAFE_WRITE_KEY = 'plone.protect.safe_oids'\n+BTREE_TYPES = (\n+    IFBTree,\n+    IIBTree,\n+    IOBTree,\n+    LFBTree,\n+    LLBTree,\n+    LOBTree,\n+    OIBTree,\n+    OLBTree,\n+    OOBTree,\n+)\n LOGGER = logging.getLogger('plone.protect')\n \n _default = []\n@@ -131,18 +142,7 @@ def safeWrite(obj, request=None):\n     try:\n         if obj._p_oid not in request.environ[SAFE_WRITE_KEY]:\n             request.environ[SAFE_WRITE_KEY].append(obj._p_oid)\n-        btree_types = (\n-            IFBTree,\n-            IIBTree,\n-            IOBTree,\n-            LFBTree,\n-            LLBTree,\n-            LOBTree,\n-            OIBTree,\n-            OLBTree,\n-            OOBTree,\n-        )\n-        if isinstance(obj, btree_types):\n+        if isinstance(obj, BTREE_TYPES):\n             bucket = obj._firstbucket\n             while bucket:\n                 if bucket._p_oid not in request.environ[SAFE_WRITE_KEY]:\n"

Repository: plone.protect


Branch: refs/heads/master
Date: 2019-07-22T13:37:49+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.protect/commit/74988789705fcffcf9863011e8821ba9e91c3991

Merge pull request #89 from plone/88-safe-oobtree

When marking an OOBTree as safe, also mark its buckets as safe.

Files changed:
A news/88.fixed
M plone/protect/tests/testAuto.py
M plone/protect/utils.py
M setup.py

b"diff --git a/news/88.fixed b/news/88.fixed\nnew file mode 100644\nindex 0000000..f410527\n--- /dev/null\n+++ b/news/88.fixed\n@@ -0,0 +1 @@\n+When marking an OOBTree as safe, also mark its buckets as safe. Fixes issues with objects that have many annotations.\ndiff --git a/plone/protect/tests/testAuto.py b/plone/protect/tests/testAuto.py\nindex 59640dc..70c75c1 100644\n--- a/plone/protect/tests/testAuto.py\n+++ b/plone/protect/tests/testAuto.py\n@@ -13,6 +13,7 @@\n from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING\n from plone.testing.zope import Browser\n from zExceptions import Forbidden\n+from zope.annotation.interfaces import IAnnotations\n from zope.component import getUtility\n \n import transaction\n@@ -186,6 +187,21 @@ def test_safe_write_empty_returns_true(self):\n         transform._registered_objects = lambda: [self.portal]\n         self.assertTrue(transform._check())\n \n+    def test_safe_write_large_oobtree(self):\n+        annotations = IAnnotations(self.portal)\n+        # Make sure the OOBTree has a second bucket. One bucket holds 30 items.\n+        for idx in range(35):\n+            key = '{0}{1}'.format(__name__, idx)\n+            value = 'test'\n+            annotations[key] = value\n+        transaction.commit()\n+        # Key that is alphabetically after the others ends up in the second\n+        # bucket.\n+        annotations['{0}{1}'.format(__name__, 'XXX999')] = 'abcd'\n+        safeWrite(annotations.obj.__annotations__)\n+        transform = ProtectTransform(self.portal, self.request)\n+        self.assertTrue(transform._check())\n+\n \n class TestAutoTransform(unittest.TestCase):\n     layer = PROTECT_FUNCTIONAL_TESTING\ndiff --git a/plone/protect/utils.py b/plone/protect/utils.py\nindex de859ad..e749e76 100644\n--- a/plone/protect/utils.py\n+++ b/plone/protect/utils.py\n@@ -1,6 +1,15 @@\n # -*- coding: utf-8 -*-\n from AccessControl.requestmethod import buildfacade\n from Acquisition import aq_parent\n+from BTrees.IFBTree import IFBTree\n+from BTrees.IIBTree import IIBTree\n+from BTrees.IOBTree import IOBTree\n+from BTrees.LFBTree import LFBTree\n+from BTrees.LLBTree import LLBTree\n+from BTrees.LOBTree import LOBTree\n+from BTrees.OIBTree import OIBTree\n+from BTrees.OLBTree import OLBTree\n+from BTrees.OOBTree import OOBTree\n from OFS.interfaces import IApplication\n from plone.keyring.keymanager import KeyManager\n from plone.protect.authenticator import createToken\n@@ -11,6 +20,17 @@\n \n \n SAFE_WRITE_KEY = 'plone.protect.safe_oids'\n+BTREE_TYPES = (\n+    IFBTree,\n+    IIBTree,\n+    IOBTree,\n+    LFBTree,\n+    LLBTree,\n+    LOBTree,\n+    OIBTree,\n+    OLBTree,\n+    OOBTree,\n+)\n LOGGER = logging.getLogger('plone.protect')\n \n _default = []\n@@ -122,5 +142,11 @@ def safeWrite(obj, request=None):\n     try:\n         if obj._p_oid not in request.environ[SAFE_WRITE_KEY]:\n             request.environ[SAFE_WRITE_KEY].append(obj._p_oid)\n+        if isinstance(obj, BTREE_TYPES):\n+            bucket = obj._firstbucket\n+            while bucket:\n+                if bucket._p_oid not in request.environ[SAFE_WRITE_KEY]:\n+                    request.environ[SAFE_WRITE_KEY].append(bucket._p_oid)\n+                bucket = bucket._next\n     except AttributeError:\n         LOGGER.debug('object you attempted to mark safe does not have an oid')\ndiff --git a/setup.py b/setup.py\nindex f09f43d..b9e7404 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -51,6 +51,7 @@\n         'test': [\n             'plone.app.testing',\n             'Products.CMFPlone'\n+            'zope.annotation',\n         ],\n     }\n )\n"

