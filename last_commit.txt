Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-05-10T14:52:03+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/9f02f6e9c70327cbe4ff0ce8e9c0e93c57f5262b

remove verifydb, it was factored out to module zodbverify

Files changed:
A news/2858.feature
M setup.py
D Products/CMFPlone/_scripts/__init__.py
D Products/CMFPlone/_scripts/verifydb.py

b'diff --git a/Products/CMFPlone/_scripts/__init__.py b/Products/CMFPlone/_scripts/__init__.py\ndeleted file mode 100644\nindex 7c68785e9..000000000\n--- a/Products/CMFPlone/_scripts/__init__.py\n+++ /dev/null\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\n\\ No newline at end of file\ndiff --git a/Products/CMFPlone/_scripts/verifydb.py b/Products/CMFPlone/_scripts/verifydb.py\ndeleted file mode 100644\nindex 8e0fd0a7f..000000000\n--- a/Products/CMFPlone/_scripts/verifydb.py\n+++ /dev/null\n@@ -1,108 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from collections import Counter\n-from Zope2.Startup.run import make_wsgi_app\n-from ZODB.interfaces import IStorageCurrentRecordIteration\n-from ZODB.serialize import PersistentUnpickler\n-\n-import argparse\n-import io\n-import logging\n-import pdb\n-import pickletools\n-import sys\n-import traceback\n-import Zope2\n-\n-logger = logging.getLogger(\'zodbverify\')\n-\n-\n-def zopectl_entry(self, arg):\n-    parser = argparse.ArgumentParser(\n-        prog=sys.argv[0] + \' verifydb\',\n-        description=\'Verifies that all records in the database can be loaded.\',\n-    )\n-    parser.add_argument(\n-        \'-D\', \'--debug\', action=\'store_true\', dest=\'debug\',\n-        help=\'pause to debug broken pickles\')\n-    options = parser.parse_args(arg.split(\' \') if arg else [])\n-\n-    logging.basicConfig(level=logging.INFO)\n-    make_wsgi_app({}, self.options.configfile)\n-    app = Zope2.app()\n-    verify_zodb(app, debug=options.debug)\n-\n-\n-def verify_zodb(obj, debug=False):\n-    storage = obj._p_jar._db._storage\n-    if not IStorageCurrentRecordIteration.providedBy(storage):\n-        raise TypeError(\n-            \'ZODB storage {} does not implement record_iternext\'.format(\n-                storage))\n-\n-    logger.info(\'Scanning ZODB...\')\n-\n-    next_ = None\n-    count = 0\n-    errors = 0\n-    issues = []\n-    while True:\n-        count += 1\n-        oid, tid, data, next_ = storage.record_iternext(next_)\n-        logger.debug(\'Verifying {}\'.format(oid))\n-        success, msg = verify_record(oid, data, debug)\n-        if not success:\n-            errors += 1\n-            issues.append(msg)\n-        if next_ is None:\n-            break\n-\n-    issues = Counter(sorted(issues))\n-    msg = \'\'\n-    for value, amount in issues.items():\n-        msg += \'{}: {}\\n\'.format(value, amount)\n-\n-    logger.info(\n-        \'Done! Scanned {} records. \\n\'\n-        \'Found {} records that could not be loaded. \\n\'\n-        \'Exceptions and how often they happened: \\n\'\n-        \'{}\'.format(count, errors, msg)\n-    )\n-\n-\n-def verify_record(oid, data, debug=False):\n-    input_file = io.BytesIO(data)\n-    unpickler = PersistentUnpickler(None, persistent_load, input_file)\n-    class_info = \'unknown\'\n-    pos = None\n-    try:\n-        class_info = unpickler.load()\n-        pos = input_file.tell()\n-        unpickler.load()\n-    except Exception as e:\n-        input_file.seek(0)\n-        pickle = input_file.read()\n-        logger.info(\'\\nCould not process {} record {}:\'.format(\n-            class_info,\n-            repr(oid),\n-        ))\n-        logger.info(repr(pickle))\n-        logger.info(traceback.format_exc())\n-        if debug and pos is not None:\n-            try:\n-                pickletools.dis(pickle[pos:])\n-            except Exception:\n-                # ignore exceptions while disassembling the pickle since the\n-                # real issue is that it references a unavailable module\n-                pass\n-            finally:\n-                pdb.set_trace()\n-        elif debug and pos is None:\n-            pdb.set_trace()\n-        # The same issues should have the same msg\n-        msg = \'{}: {}\'.format(e.__class__.__name__, str(e))\n-        return False, msg\n-    return True, None\n-\n-\n-def persistent_load(ref):\n-    pass\ndiff --git a/news/2858.feature b/news/2858.feature\nnew file mode 100644\nindex 000000000..f814b46d7\n--- /dev/null\n+++ b/news/2858.feature\n@@ -0,0 +1,2 @@\n+Remove verifydb, it was moved to standalone package zodbverify.\n+[jensens]\ndiff --git a/setup.py b/setup.py\nindex 062c973fc..f68cbaff2 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -153,8 +153,4 @@\n             \'zope.testing\',\n         ]\n     },\n-    entry_points="""\\\n-      [plone.recipe.zope2instance.ctl]\n-      verifydb = Products.CMFPlone._scripts.verifydb:zopectl_entry\n-    """  # noqa\n )\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-05-13T12:32:52+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/ab6b65ecc17755e2e33632d0175bc7dbc96174de

Merge pull request #2858 from plone/zodbverify-move

remove verifydb, it was factored out to module zodbverify

Files changed:
A news/2858.feature
M setup.py
D Products/CMFPlone/_scripts/__init__.py
D Products/CMFPlone/_scripts/verifydb.py

b'diff --git a/Products/CMFPlone/_scripts/__init__.py b/Products/CMFPlone/_scripts/__init__.py\ndeleted file mode 100644\nindex 7c68785e9..000000000\n--- a/Products/CMFPlone/_scripts/__init__.py\n+++ /dev/null\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\n\\ No newline at end of file\ndiff --git a/Products/CMFPlone/_scripts/verifydb.py b/Products/CMFPlone/_scripts/verifydb.py\ndeleted file mode 100644\nindex 8e0fd0a7f..000000000\n--- a/Products/CMFPlone/_scripts/verifydb.py\n+++ /dev/null\n@@ -1,108 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from collections import Counter\n-from Zope2.Startup.run import make_wsgi_app\n-from ZODB.interfaces import IStorageCurrentRecordIteration\n-from ZODB.serialize import PersistentUnpickler\n-\n-import argparse\n-import io\n-import logging\n-import pdb\n-import pickletools\n-import sys\n-import traceback\n-import Zope2\n-\n-logger = logging.getLogger(\'zodbverify\')\n-\n-\n-def zopectl_entry(self, arg):\n-    parser = argparse.ArgumentParser(\n-        prog=sys.argv[0] + \' verifydb\',\n-        description=\'Verifies that all records in the database can be loaded.\',\n-    )\n-    parser.add_argument(\n-        \'-D\', \'--debug\', action=\'store_true\', dest=\'debug\',\n-        help=\'pause to debug broken pickles\')\n-    options = parser.parse_args(arg.split(\' \') if arg else [])\n-\n-    logging.basicConfig(level=logging.INFO)\n-    make_wsgi_app({}, self.options.configfile)\n-    app = Zope2.app()\n-    verify_zodb(app, debug=options.debug)\n-\n-\n-def verify_zodb(obj, debug=False):\n-    storage = obj._p_jar._db._storage\n-    if not IStorageCurrentRecordIteration.providedBy(storage):\n-        raise TypeError(\n-            \'ZODB storage {} does not implement record_iternext\'.format(\n-                storage))\n-\n-    logger.info(\'Scanning ZODB...\')\n-\n-    next_ = None\n-    count = 0\n-    errors = 0\n-    issues = []\n-    while True:\n-        count += 1\n-        oid, tid, data, next_ = storage.record_iternext(next_)\n-        logger.debug(\'Verifying {}\'.format(oid))\n-        success, msg = verify_record(oid, data, debug)\n-        if not success:\n-            errors += 1\n-            issues.append(msg)\n-        if next_ is None:\n-            break\n-\n-    issues = Counter(sorted(issues))\n-    msg = \'\'\n-    for value, amount in issues.items():\n-        msg += \'{}: {}\\n\'.format(value, amount)\n-\n-    logger.info(\n-        \'Done! Scanned {} records. \\n\'\n-        \'Found {} records that could not be loaded. \\n\'\n-        \'Exceptions and how often they happened: \\n\'\n-        \'{}\'.format(count, errors, msg)\n-    )\n-\n-\n-def verify_record(oid, data, debug=False):\n-    input_file = io.BytesIO(data)\n-    unpickler = PersistentUnpickler(None, persistent_load, input_file)\n-    class_info = \'unknown\'\n-    pos = None\n-    try:\n-        class_info = unpickler.load()\n-        pos = input_file.tell()\n-        unpickler.load()\n-    except Exception as e:\n-        input_file.seek(0)\n-        pickle = input_file.read()\n-        logger.info(\'\\nCould not process {} record {}:\'.format(\n-            class_info,\n-            repr(oid),\n-        ))\n-        logger.info(repr(pickle))\n-        logger.info(traceback.format_exc())\n-        if debug and pos is not None:\n-            try:\n-                pickletools.dis(pickle[pos:])\n-            except Exception:\n-                # ignore exceptions while disassembling the pickle since the\n-                # real issue is that it references a unavailable module\n-                pass\n-            finally:\n-                pdb.set_trace()\n-        elif debug and pos is None:\n-            pdb.set_trace()\n-        # The same issues should have the same msg\n-        msg = \'{}: {}\'.format(e.__class__.__name__, str(e))\n-        return False, msg\n-    return True, None\n-\n-\n-def persistent_load(ref):\n-    pass\ndiff --git a/news/2858.feature b/news/2858.feature\nnew file mode 100644\nindex 000000000..f814b46d7\n--- /dev/null\n+++ b/news/2858.feature\n@@ -0,0 +1,2 @@\n+Remove verifydb, it was moved to standalone package zodbverify.\n+[jensens]\ndiff --git a/setup.py b/setup.py\nindex 062c973fc..f68cbaff2 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -153,8 +153,4 @@\n             \'zope.testing\',\n         ]\n     },\n-    entry_points="""\\\n-      [plone.recipe.zope2instance.ctl]\n-      verifydb = Products.CMFPlone._scripts.verifydb:zopectl_entry\n-    """  # noqa\n )\n'

