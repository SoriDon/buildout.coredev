Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-04-11T10:35:35+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/1d62cddfe6d58735c7c7025fc36e782007a4156b

fixes: encoding bug on resource-cook; ValueError on writing legacy resources.

Files changed:
A news/2827.bugfix
M Products/CMFPlone/resources/browser/cook.py
M Products/CMFPlone/tests/testResourceRegistries.py

b"diff --git a/Products/CMFPlone/resources/browser/cook.py b/Products/CMFPlone/resources/browser/cook.py\nindex 8bb55b4ee..da999bfe2 100644\n--- a/Products/CMFPlone/resources/browser/cook.py\n+++ b/Products/CMFPlone/resources/browser/cook.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from __future__ import unicode_literals\n from calmjs.parse import es5\n from datetime import datetime\n from io import BytesIO\n@@ -78,7 +79,7 @@ def cookWhenChangingSettings(context, bundle=None):\n \n     # Let's join all css and js\n     css_compiler = Compiler(output_style='compressed')\n-    cooked_css = u''\n+    cooked_css = ''\n     cooked_js = REQUIREJS_RESET_PREFIX\n     siteUrl = getSite().absolute_url()\n     request = getRequest()\n@@ -98,13 +99,13 @@ def cookWhenChangingSettings(context, bundle=None):\n                         css = css_compiler.compile_string(css)\n                     if not isinstance(css, six.text_type):\n                         css = css.decode('utf8')\n-                    cooked_css += u'\\n/* Resource: {0} */\\n{1}\\n'.format(\n+                    cooked_css += '\\n/* Resource: {0} */\\n{1}\\n'.format(\n                         css_resource,\n                         css\n                     )\n                 else:\n                     cooked_css +=\\\n-                        u'\\n/* Could not find resource: {0} */\\n\\n'.format(\n+                        '\\n/* Could not find resource: {0} */\\n\\n'.format(\n                             css_resource\n                         )\n                     logger.warn('Could not find resource: %s', css_resource)\n@@ -113,14 +114,14 @@ def cookWhenChangingSettings(context, bundle=None):\n         js_url = siteUrl + '/' + resource.js\n         response = subrequest(js_url)\n         if response.status == 200:\n+            logger.info('Cooking js %s', resource.js)\n             js = response.getBody()\n+            if not isinstance(js, six.text_type):\n+                js = js.decode('utf8')\n             try:\n-                logger.info('Cooking js %s', resource.js)\n-                if not isinstance(js, six.text_type):\n-                    js = js.decode('utf8')\n                 cooked_js += '\\n/* resource: {0} */\\n{1}'.format(\n                     resource.js,\n-                    js if '.min.js' == resource.js[-7:] else\n+                    js if resource.js.endswith('.min.js') else\n                     es5.minify_print(js)\n                 )\n             except SyntaxError:\n@@ -146,8 +147,13 @@ def cookWhenChangingSettings(context, bundle=None):\n     def _write_resource(resource_path, cooked_string):\n         if not resource_path:\n             return\n-        resource_path = resource_path.split('++plone++')[-1]\n-        resource_name, resource_filepath = resource_path.split('/', 1)\n+        if '++plone++' in resource_path:\n+            resource_path = resource_path.split('++plone++')[-1]\n+        if '/' in resource_path:\n+            resource_name, resource_filepath = resource_path.split('/', 1)\n+        else:\n+            resource_name = 'legacy'\n+            resource_filepath = resource_path\n         if resource_name not in container:\n             container.makeDirectory(resource_name)\n         if not isinstance(cooked_string, six.binary_type):  # handle Error of OFS.Image  # noqa: E501\ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex cb0d88580..c13c0a797 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -3,7 +3,6 @@\n from plone.registry.interfaces import IRegistry\n from plone.resource.interfaces import IResourceDirectory\n from plone.subrequest import subrequest\n-from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.controlpanel.browser.resourceregistry import OverrideFolderManager  # noqa\n from Products.CMFPlone.controlpanel.browser.resourceregistry import ResourceRegistryControlPanelView  # noqa\n from Products.CMFPlone.interfaces import IBundleRegistry\n@@ -19,8 +18,6 @@\n from Products.CMFPlone.resources.exportimport.resourceregistry import ResourceRegistryNodeAdapter  # noqa\n from Products.CMFPlone.tests import PloneTestCase\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from Products.GenericSetup.context import SetupEnviron\n-from xml.dom.minidom import parseString\n from zope.component import getUtility\n \n import json\ndiff --git a/news/2827.bugfix b/news/2827.bugfix\nnew file mode 100644\nindex 000000000..373ce18d0\n--- /dev/null\n+++ b/news/2827.bugfix\n@@ -0,0 +1,2 @@\n+Fixes: Cooking resources with non ASCII resulted in encoding error.\n+Further, writing legacy resources resulted in ValueError. [jensens]\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-04-11T10:38:15+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/17322e5104c6d42c47fb37b236099913d2c33a59

Merge branch 'master' into fix-resource-cooking

Files changed:
A news/2828.bugfix
M Products/CMFPlone/browser/navigation.py
M Products/CMFPlone/tests/testNavigationView.py

b"diff --git a/Products/CMFPlone/browser/navigation.py b/Products/CMFPlone/browser/navigation.py\nindex ba9c12031..895830322 100644\n--- a/Products/CMFPlone/browser/navigation.py\n+++ b/Products/CMFPlone/browser/navigation.py\n@@ -72,7 +72,7 @@ def siteMap(self):\n class CatalogNavigationTabs(BrowserView):\n \n     def _getNavQuery(self):\n-                # check whether we only want actions\n+        # check whether we only want actions\n         registry = getUtility(IRegistry)\n         navigation_settings = registry.forInterface(\n             INavigationSchema,\n@@ -101,6 +101,9 @@ def _getNavQuery(self):\n \n         query['is_default_page'] = False\n \n+        if not navigation_settings.show_excluded_items:\n+            query['exclude_from_nav'] = False\n+\n         if not navigation_settings.nonfolderish_tabs:\n             query['is_folderish'] = True\n \n@@ -146,11 +149,13 @@ def _get_url(item):\n                 return (get_id(item), item.getRemoteUrl)\n             return get_view_url(item)\n \n+        context_path = '/'.join(context.getPhysicalPath())\n+\n         # now add the content to results\n         for item in rawresult:\n-            if not navigation_settings.show_excluded_items:\n-                if item.exclude_from_nav:\n-                    continue\n+            if item.exclude_from_nav and not context_path.startswith(item.getPath()):  # noqa: E501\n+                # skip excluded items if they're not in our context path\n+                continue\n             cid, item_url = _get_url(item)\n             data = {\n                 'name': utils.pretty_title_or_id(context, item),\ndiff --git a/Products/CMFPlone/tests/testNavigationView.py b/Products/CMFPlone/tests/testNavigationView.py\nindex e18f08897..bc343ce22 100644\n--- a/Products/CMFPlone/tests/testNavigationView.py\n+++ b/Products/CMFPlone/tests/testNavigationView.py\n@@ -596,28 +596,25 @@ def testDisableFolderTabs(self):\n         self.assertEqual(tabs, [])\n \n     def testTabsExcludeItemsWithExcludeProperty(self):\n-        # Make sure that items witht he exclude_from_nav property are purged\n-        view = self.view_class(self.portal, self.request.clone())\n-        tabs = view.topLevelTabs(actions=[])\n-        orig_len = len(tabs)\n         self.portal.folder2.exclude_from_nav = True\n         self.portal.folder2.reindexObject()\n \n-        # For the moment nothing changes because the default for\n-        # plone.show_excluded_items is True\n-        view = self.view_class(self.portal, self.request.clone())\n+        # if we're not in context of the excluded item it should disappear\n+        view = self.view_class(self.portal, self.request)\n+        tabs = view.topLevelTabs(actions=[])\n+        tab_names = [t['id'] for t in tabs]\n+        self.assertNotIn('folder2', tab_names)\n+\n+        # but if we're inside, it should be visible\n+        view = self.view_class(self.portal.folder2, self.request)\n         tabs = view.topLevelTabs(actions=[])\n-        self.assertTrue(tabs)\n-        self.assertEqual(len(tabs), orig_len)\n         tab_names = [t['id'] for t in tabs]\n         self.assertIn('folder2', tab_names)\n \n         # Now we flip the setting for plone.show_excluded_items\n         self.navigation_settings.show_excluded_items = False\n-        view = self.view_class(self.portal, self.request)\n+        view = self.view_class(self.portal.folder2, self.request)\n         tabs = view.topLevelTabs(actions=[])\n-        self.assertTrue(tabs)\n-        self.assertEqual(len(tabs), orig_len - 1)\n         tab_names = [t['id'] for t in tabs]\n         self.assertNotIn('folder2', tab_names)\n \ndiff --git a/news/2828.bugfix b/news/2828.bugfix\nnew file mode 100644\nindex 000000000..9971ac605\n--- /dev/null\n+++ b/news/2828.bugfix\n@@ -0,0 +1,2 @@\n+restore ``exclude_from_nav`` combined with ``show_excluded_items`` handling\n+[petschki]\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2019-04-11T14:02:04+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/fcbbf27f8787aee7552ee29b018326e5961e6ca5

Merge pull request #2827 from plone/fix-resource-cooking

fix encoding bug while cooking resources

Files changed:
A news/2827.bugfix
M Products/CMFPlone/resources/browser/cook.py
M Products/CMFPlone/tests/testResourceRegistries.py

b"diff --git a/Products/CMFPlone/resources/browser/cook.py b/Products/CMFPlone/resources/browser/cook.py\nindex 8bb55b4ee..da999bfe2 100644\n--- a/Products/CMFPlone/resources/browser/cook.py\n+++ b/Products/CMFPlone/resources/browser/cook.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from __future__ import unicode_literals\n from calmjs.parse import es5\n from datetime import datetime\n from io import BytesIO\n@@ -78,7 +79,7 @@ def cookWhenChangingSettings(context, bundle=None):\n \n     # Let's join all css and js\n     css_compiler = Compiler(output_style='compressed')\n-    cooked_css = u''\n+    cooked_css = ''\n     cooked_js = REQUIREJS_RESET_PREFIX\n     siteUrl = getSite().absolute_url()\n     request = getRequest()\n@@ -98,13 +99,13 @@ def cookWhenChangingSettings(context, bundle=None):\n                         css = css_compiler.compile_string(css)\n                     if not isinstance(css, six.text_type):\n                         css = css.decode('utf8')\n-                    cooked_css += u'\\n/* Resource: {0} */\\n{1}\\n'.format(\n+                    cooked_css += '\\n/* Resource: {0} */\\n{1}\\n'.format(\n                         css_resource,\n                         css\n                     )\n                 else:\n                     cooked_css +=\\\n-                        u'\\n/* Could not find resource: {0} */\\n\\n'.format(\n+                        '\\n/* Could not find resource: {0} */\\n\\n'.format(\n                             css_resource\n                         )\n                     logger.warn('Could not find resource: %s', css_resource)\n@@ -113,14 +114,14 @@ def cookWhenChangingSettings(context, bundle=None):\n         js_url = siteUrl + '/' + resource.js\n         response = subrequest(js_url)\n         if response.status == 200:\n+            logger.info('Cooking js %s', resource.js)\n             js = response.getBody()\n+            if not isinstance(js, six.text_type):\n+                js = js.decode('utf8')\n             try:\n-                logger.info('Cooking js %s', resource.js)\n-                if not isinstance(js, six.text_type):\n-                    js = js.decode('utf8')\n                 cooked_js += '\\n/* resource: {0} */\\n{1}'.format(\n                     resource.js,\n-                    js if '.min.js' == resource.js[-7:] else\n+                    js if resource.js.endswith('.min.js') else\n                     es5.minify_print(js)\n                 )\n             except SyntaxError:\n@@ -146,8 +147,13 @@ def cookWhenChangingSettings(context, bundle=None):\n     def _write_resource(resource_path, cooked_string):\n         if not resource_path:\n             return\n-        resource_path = resource_path.split('++plone++')[-1]\n-        resource_name, resource_filepath = resource_path.split('/', 1)\n+        if '++plone++' in resource_path:\n+            resource_path = resource_path.split('++plone++')[-1]\n+        if '/' in resource_path:\n+            resource_name, resource_filepath = resource_path.split('/', 1)\n+        else:\n+            resource_name = 'legacy'\n+            resource_filepath = resource_path\n         if resource_name not in container:\n             container.makeDirectory(resource_name)\n         if not isinstance(cooked_string, six.binary_type):  # handle Error of OFS.Image  # noqa: E501\ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex cb0d88580..c13c0a797 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -3,7 +3,6 @@\n from plone.registry.interfaces import IRegistry\n from plone.resource.interfaces import IResourceDirectory\n from plone.subrequest import subrequest\n-from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.controlpanel.browser.resourceregistry import OverrideFolderManager  # noqa\n from Products.CMFPlone.controlpanel.browser.resourceregistry import ResourceRegistryControlPanelView  # noqa\n from Products.CMFPlone.interfaces import IBundleRegistry\n@@ -19,8 +18,6 @@\n from Products.CMFPlone.resources.exportimport.resourceregistry import ResourceRegistryNodeAdapter  # noqa\n from Products.CMFPlone.tests import PloneTestCase\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from Products.GenericSetup.context import SetupEnviron\n-from xml.dom.minidom import parseString\n from zope.component import getUtility\n \n import json\ndiff --git a/news/2827.bugfix b/news/2827.bugfix\nnew file mode 100644\nindex 000000000..373ce18d0\n--- /dev/null\n+++ b/news/2827.bugfix\n@@ -0,0 +1,2 @@\n+Fixes: Cooking resources with non ASCII resulted in encoding error.\n+Further, writing legacy resources resulted in ValueError. [jensens]\n"

