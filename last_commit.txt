Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2021-10-07T09:51:46+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/fccc20fbdf8fdc143c7d96dc7109d5d251fcd1a9

format one line per sentence + remove outdated KSS

Files changed:
M README.rst

b'diff --git a/README.rst b/README.rst\nindex 1181fac..c1d3c84 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -4,25 +4,17 @@ plone.app.z3cform\n \n A Plone specific integration and HTML mark-up for z3c.form.\n \n+This is a Plone core package.\n+\n .. contents:: Table of Contents\n \n Introduction\n ==============\n \n-This Plone package is aimed for developers who want to create forms\n-in Python code.\n-\n-Please read the documentation for `z3c.form`_, which contains important\n-information about using z3c.form in Zope 2 in general. For the most part,\n-that package contains the "active" parts that you need to know about, and\n-this package provides "passive" overrides that make the forms integrate with\n-Plone.\n-\n-Installation\n-============\n+This Plone package is aimed for developers who want to create forms in Python code.\n \n-Plone 4.1 and later include *plone.app.z3cform* in Plone core. Older versions need to install\n-the addon separately as your own add-on dependency.\n+Please read the documentation for `z3c.form`_, which contains important information about using z3c.form in Zope 2 in general. \n+For the most part, that package contains the "active" parts that you need to know about, and this package provides "passive" overrides that make the forms integrate with Plone.\n \n Features\n ========\n@@ -30,13 +22,9 @@ Features\n The following Plone and z3c.form integration is added\n \n * Plone *main_template.pt* integration\n-\n * Plone specific widget frame\n-\n * Date/time pickers\n-\n * WYSIWYG widget (TinyMCE visual editor with Plone support)\n-\n * CRUD forms\n \n Out of the box form templates\n@@ -45,23 +33,16 @@ Out of the box form templates\n The form and widget templates are applied in the following order\n \n * *plone.app.z3cform* specific\n-\n * *plone.z3cform* specific\n-\n * *z3c.form* specific\n \n-*plone.app.z3cform* package overrides the ``@@ploneform-macros`` view from `plone.z3cform`_,\n-using standard Plone markup for form fields, fieldsets, etc.\n+*plone.app.z3cform* package overrides the ``@@ploneform-macros`` view from `plone.z3cform`_, using standard Plone markup for form fields, fieldsets, etc.\n \n-All the macros described in `plone.z3cform`_ are still available. In addition,\n-you can use the ``widget_rendering`` macro to render all the default widgets,\n-but none of the fieldsets (groups) or the fieldset headers (which would be\n-rendered with the ``fields`` macro).\n+All the macros described in `plone.z3cform`_ are still available. \n+In addition, you can use the ``widget_rendering`` macro to render all the default widgets, but none of the fieldsets (groups) or the fieldset headers (which would be rendered with the ``fields`` macro).\n \n-Each widget is rendered using the ``@@ploneform-render-widget`` view, which by\n-default includes the widget\'s label, required indicator, description, errors,\n-and the result of ``widget.render()``.  This view may be overridden for\n-particular widget types in order to customize this widget chrome.\n+Each widget is rendered using the ``@@ploneform-render-widget`` view, which by default includes the widget\'s label, required indicator, description, errors, and the result of ``widget.render()``.  \n+This view may be overridden for particular widget types in order to customize this widget chrome.\n \n Customizing form behavior\n =========================\n@@ -69,8 +50,8 @@ Customizing form behavior\n Form method\n -----------\n \n-If your form instance defines a property called ``method`` it allows\n-you to set whether form is HTTP POST or HTTP GET. The default is POST.\n+If your form instance defines a property called ``method`` it allows you to set whether form is HTTP POST or HTTP GET. \n+The default is POST. \n This translates to ``<form method="post">`` attribute.\n \n Example::\n@@ -86,8 +67,8 @@ Example::\n Form action\n -----------\n \n-Form ``action`` property defines HTTP target where the form is posted. The default is\n-the same page where the form was rendered, ``request.getURL()``.\n+Form ``action`` property defines HTTP target where the form is posted. \n+The default is the same page where the form was rendered, ``request.getURL()``.\n \n Example::\n \n@@ -112,8 +93,8 @@ Fieldsets and tabs\n ------------------\n \n You can fieldsets to your form if you subclass the form from z3c.form.group.GroupForm.\n-The default behavior of Plone is to turn these fieldsets to tabs (as seen on\n-any *Edit* view of content item).\n+The default behavior of Plone is to turn these fieldsets to tabs \n+(as seen on any *Edit* view of content item).\n \n You can disable this behavior for your form::\n \n@@ -125,8 +106,7 @@ You can disable this behavior for your form::\n Unload protection\n -----------------\n \n-The default behaviour on Plone is to add a confirm box\n-if you leave a form you have modified without having submitted it.\n+The default behaviour on Plone is to add a confirm box if you leave a form you have modified without having submitted it.\n \n You can disable this behavior for your form::\n \n@@ -140,13 +120,9 @@ CSRF Protection\n ===============\n \n A common vulnerability affecting web forms is cross-site request forgery (CSRF).\n-This attack occurs when the user of your site visits a third-party site that\n-uses Javascript to post to a URL on your site without the user\'s knowledge,\n-taking advantage of the user\'s active session.\n+This attack occurs when the user of your site visits a third-party site that uses Javascript to post to a URL on your site without the user\'s knowledge, taking advantage of the user\'s active session.\n \n-plone.app.z3cform can protect against this type of attack by adding a unique\n-token as a hidden input when rendering the form, and checking to make sure it\n-is present as a request parameter when form actions are executed.\n+plone.app.z3cform can protect against this type of attack by adding a unique token as a hidden input when rendering the form, and checking to make sure it is present as a request parameter when form actions are executed.\n \n To turn on this protection, enable the form\'s enableCSRFProtection attribute.\n Example::\n@@ -158,26 +134,24 @@ Example::\n Form main template override\n ===========================\n \n-Forms are framed by *FormWrapper* views. It places rendered\n-form inside Plone page frame. The default *FormWrapper* is supplied automatically,\n-but you can override it.\n+Forms are framed by *FormWrapper* views. \n+It places rendered form inside Plone page frame. \n+The default *FormWrapper* is supplied automatically, but you can override it.\n \n Below is a placeholder example with few `<select>` inputs.\n \n Example ``reporter.py``::\n \n-    import zope.schema\n-    import zope.interface\n-    from zope.i18nmessageid import MessageFactory\n     from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile as FiveViewPageTemplateFile\n-\n-    from zope.schema.vocabulary import SimpleVocabulary\n+    from zope.i18nmessageid import MessageFactory\n     from zope.schema.vocabulary import SimpleTerm\n-\n-    import z3c.form\n+    from zope.schema.vocabulary import SimpleVocabulary\n \n     import plone.app.z3cform\n     import plone.z3cform.templates\n+    import z3c.form\n+    import zope.interface\n+    import zope.schema\n \n     _ = MessageFactory(\'your.addon\')\n \n@@ -259,24 +233,20 @@ Example ``templates/reporter.html``::\n     <html metal:use-macro="context/main_template/macros/master"\n           i18n:domain="sits.reporttool">\n     <body>\n-\n         <metal:block fill-slot="main">\n \n             <h1 class="documentFirstHeading" tal:content="view/label | nothing" />\n \n             <div id="content-core">\n-\n                 <div id="form-input">\n                     <span tal:replace="structure view/contents" />\n                 </div>\n-\n                 <div id="form-output" tal:condition="view/form_instance/output">\n                     Chosen country: <b tal:content="view/form_instance/output/country" />\n                 </div>\n             </div>\n \n         </metal:block>\n-\n     </body>\n     </html>\n \n@@ -288,17 +258,15 @@ You can override widget templates as instructed for ``z3c.form``.\n which usually consists of\n \n * Label\n-\n * Required marker\n-\n * Description\n \n You might want to customize this widget frame for your own form.\n Below is an example how to do it.\n \n-* Copy `widget.pt <https://github.com/plone/plone.app.z3cform/blob/master/plone/app/z3cform/templates/widget.pt>`_ to your own package and customize it in way you wish\n+Copy `widget.pt <https://github.com/plone/plone.app.z3cform/blob/master/plone/app/z3cform/templates/widget.pt>`_ to your own package and customize it in way you wish\n \n-* Add the following to ``configure.zcml``\n+Add the following to ``configure.zcml``\n \n ::\n \n@@ -310,7 +278,7 @@ Below is an example how to do it.\n         template="demo-widget.pt"\n         />\n \n-* Create a new marker interface in Python code\n+Create a new marker interface in Python code\n \n ::\n \n@@ -319,7 +287,7 @@ Below is an example how to do it.\n     class IDemoWidget(Interface):\n         pass\n \n-* Then apply this marker interface to all of your widgets in ``form.update()``\n+Then apply this marker interface to all of your widgets in ``form.update()``\n \n ::\n \n@@ -335,8 +303,10 @@ Below is an example how to do it.\n Hide fields that have no value\n ==============================\n \n-The ``.empty`` css class marks the fields that have no value. If you don\'t want\n-to display these fields in view mode, add the following css in your theme::\n+The ``.empty`` css class marks the fields that have no value. \n+If you don\'t want to display these fields in view mode, add the following css in your theme.\n+\n+::\n \n     .template-view .empty.field {\n        display: none;\n@@ -346,14 +316,17 @@ to display these fields in view mode, add the following css in your theme::\n Add additional parameters to widgets\n ====================================\n \n-You can add additional parameters to widgets defined in this package\n-via the `plone.autoform.widgets.ParameterizedWidget` ::\n+You can add additional parameters to widgets defined in this package via the `plone.autoform.widgets.ParameterizedWidget`. \n+\n+::\n \n   from plone.app.z3c.form.widget import DateWidget\n   MyDateWidget = ParameterizedWidget(DateWidget, wrapper_css_class=\'event_start\')\n \n \n-or via directives ::\n+or via directives \n+\n+::\n \n   from plone.app.z3c.form.widget import DateWidget\n \n@@ -373,13 +346,10 @@ or via directives ::\n Testing\n =======\n \n-To test ``plone.app.z3form`` it is recommended to use\n-`plone.app.testing <https://pypi.python.org/pypi/plone.app.testing/>`_\n-function test layer which will do ``plone.app.z3cform`` setup for you.\n+To test ``plone.app.z3form`` it is recommended to use `plone.app.testing <https://pypi.python.org/pypi/plone.app.testing/>`_ function test layer which will do ``plone.app.z3cform`` setup for you.\n Read ``plone.app.z3cform`` manual for further instructions.\n \n-If you still need to test forms on lower level in unit tests\n-you need to enable ``plone.app.z3cform`` support manually.\n+If you still need to test forms on lower level in unit tests you need to enable ``plone.app.z3cform`` support manually.\n Below is an example::\n \n     import unittest\n@@ -429,33 +399,9 @@ ComponentLookupError in updateWidgets()\n           Module zope.component._api, line 103, in getMultiAdapter\n         ComponentLookupError: ((<getpaid.expercash.browser.views.CheckoutForm object at 0xdb052ac>, <HTTPRequest, URL=http://localhost:8080/test/@@getpaid-checkout-wizard>, <PloneSite at /test>), <InterfaceClass z3c.form.interfaces.IWidgets>, u\'\')\n \n-plone.app.z3cform layers are not in place (configuration ZCML is not read). You probably forgot to include plone.app.z3cform in your\n-product\'s configuration.zcml. See *Installation* above.\n-\n-\n-KSS inline validation (deprecated)\n-==================================\n-\n-.. note ::\n-\n-    Plone 4.3+ and later no longer includes KSS\n-\n-This package installs AJAX handlers to perform inline field validation. On any\n-form, the field will be validated when the user blurs a field.\n-\n-This relies on the KSS framework, and is only installed if ``plone.app.kss``\n-is available. If you are using a custom form, note that you must define the\n-following "kassattr" variables:\n-\n-* ``formname``, the name of the form view, defined on the ``<form />``\n-  element.\n-* ``fieldname``, the name of the current field (same as the widget name),\n-  defined on an element wrapping the field.\n-* ``fieldset``, defined for non-default fieldsets on the ``<fieldset />``\n-  element.\n+plone.app.z3cform layers are not in place (configuration ZCML is not read). \n+You probably forgot to include plone.app.z3cform in your product\'s configuration.zcml. See *Installation* above.\n \n-This also assumes the standard Plone form markup is used. See\n-``templaes/macros.pt`` for details.\n \n .. _z3c.form: http://pypi.python.org/pypi/z3c.form\n .. _Plone: http://plone.org\n'

