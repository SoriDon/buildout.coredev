Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-08-27T12:01:01+02:00
Author: Ã‰rico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/cd02b652810334dd53b2870b05973db60e1d8363

Fixes value not being stored during content creation (#1208)

* Fixes values not being stored during content creation if value is equal to the one returned by defaultFactory.

* Apply black.

Files changed:
A news/1207.bugfix
M src/plone/restapi/deserializer/dxcontent.py
M src/plone/restapi/tests/test_dxcontent_deserializer.py

b'diff --git a/news/1207.bugfix b/news/1207.bugfix\nnew file mode 100644\nindex 000000000..6e17c465b\n--- /dev/null\n+++ b/news/1207.bugfix\n@@ -0,0 +1,2 @@\n+Fixes values not being stored during content creation if value is equal to the one returned by defaultFactory.\n+[ericof]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/deserializer/dxcontent.py b/src/plone/restapi/deserializer/dxcontent.py\nindex affe7b770..70fe9de18 100644\n--- a/src/plone/restapi/deserializer/dxcontent.py\n+++ b/src/plone/restapi/deserializer/dxcontent.py\n@@ -41,7 +41,7 @@ def __call__(\n         if data is None:\n             data = json_body(self.request)\n \n-        schema_data, errors = self.get_schema_data(data, validate_all)\n+        schema_data, errors = self.get_schema_data(data, validate_all, create)\n \n         # Validate schemata\n         for schema, field_data in schema_data.items():\n@@ -75,7 +75,7 @@ def __call__(\n \n         return self.context\n \n-    def get_schema_data(self, data, validate_all):\n+    def get_schema_data(self, data, validate_all, create=False):\n         schema_data = {}\n         errors = []\n \n@@ -133,7 +133,20 @@ def get_schema_data(self, data, validate_all):\n                         errors.append({"message": e.doc(), "field": name, "error": e})\n                     else:\n                         field_data[name] = value\n-                        if value != dm.get():\n+                        current_value = dm.get()\n+                        if value != current_value:\n+                            should_change = True\n+                        elif create and dm.field.defaultFactory:\n+                            # During content creation we should set the value even if\n+                            # it is the same from the dm if the current_value was\n+                            # returned from a default_factory method\n+                            should_change = (\n+                                dm.field.defaultFactory(self.context) == current_value\n+                            )\n+                        else:\n+                            should_change = False\n+\n+                        if should_change:\n                             dm.set(value)\n                             self.mark_field_as_changed(schema, name)\n \ndiff --git a/src/plone/restapi/tests/test_dxcontent_deserializer.py b/src/plone/restapi/tests/test_dxcontent_deserializer.py\nindex d349f2e86..e9cc6fdf1 100644\n--- a/src/plone/restapi/tests/test_dxcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_deserializer.py\n@@ -41,11 +41,11 @@ def setUp(self):\n                 "Document", id="doc" + str(x), title="Test doc " + str(x)\n             )\n \n-    def deserialize(self, body="{}", validate_all=False, context=None):\n+    def deserialize(self, body="{}", validate_all=False, context=None, create=False):\n         context = context or self.portal.doc1\n         self.request["BODY"] = body\n         deserializer = getMultiAdapter((context, self.request), IDeserializeFromJson)\n-        return deserializer(validate_all=validate_all)\n+        return deserializer(validate_all=validate_all, create=create)\n \n     def test_deserializer_raises_with_invalid_body(self):\n         with self.assertRaises(DeserializationError) as cm:\n@@ -211,6 +211,24 @@ def test_set_layout(self):\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n         self.assertEqual("my_new_layout", self.portal.doc1.getLayout())\n \n+    def test_deserializer_should_store_default_value_on_content_creation(self):\n+        # Store default_factory values during content creation. This is specially\n+        # important for content types like Event, where the default_factory returns\n+        # a distinct value each time.\n+        self.portal.invokeFactory(\n+            "DXTestDocument",\n+            id="doc_default_value",\n+        )\n+        context = self.portal.doc_default_value\n+        default_value = "DefaultFactory"\n+        body = {"test_default_factory_field": default_value}\n+        self.deserialize(body=json.dumps(body), context=context, create=True)\n+        self.assertIn(\n+            "test_default_factory_field",\n+            dir(context),\n+            "Default value still available.",\n+        )\n+\n \n class TestDXContentSerializerDeserializer(unittest.TestCase):\n \n'

