Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-06T00:16:55+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/84dfac3424b3f6d1eed45ae816419e856b2ebcf5

Depend on Zope 5.5 for its improved fix_unicode_properties.

Removed our own temporary copy of this function.
See also https://github.com/plone/plone.app.upgrade/pull/271

Files changed:
M news/270.bugfix
M plone/app/upgrade/v60/alphas.py
M setup.py

b'diff --git a/news/270.bugfix b/news/270.bugfix\nindex 243f8971..f603541f 100644\n--- a/news/270.bugfix\n+++ b/news/270.bugfix\n@@ -1,2 +1,3 @@\n Fix several exceptions when calling ``fix_unicode_properties``.\n+Depend on Zope 5.5 to use its official version of this function.\n [maurits]\ndiff --git a/plone/app/upgrade/v60/alphas.py b/plone/app/upgrade/v60/alphas.py\nindex afdcb030..450d836a 100644\n--- a/plone/app/upgrade/v60/alphas.py\n+++ b/plone/app/upgrade/v60/alphas.py\n@@ -7,7 +7,6 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IBundleRegistry\n from Products.CMFPlone.utils import get_installer\n-from Products.CMFPlone.utils import safe_unicode\n from ZODB.broken import Broken\n from zope.component import getUtility\n from zope.component import queryUtility\n@@ -124,133 +123,6 @@ def index_siteroot(context):\n     portal.reindexObject()\n \n \n-def _string_tuple(value):\n-    # Copy of ZPublisher.utils._string_tuple which will be released in Zope 5.4.\n-    if not value:\n-        return ()\n-    return tuple([safe_unicode(element) for element in value])\n-\n-\n-def _fix_properties(obj, path=None):\n-    """Fix properties on object.\n-\n-    Copy of ZPublisher.utils.fix_properties which will be released in Zope 5.4.\n-    See https://github.com/zopefoundation/Zope/pull/993\n-\n-    This does two things:\n-\n-    1. Make sure lines contain only strings, instead of bytes,\n-       or worse: a combination of strings and bytes.\n-    2. Replace deprecated ulines, utext, utoken, and ustring properties\n-       with their non-unicode variant, using native strings.\n-\n-    See https://github.com/zopefoundation/Zope/issues/987\n-\n-    Since Zope 5.3, a lines property stores strings instead of bytes.\n-    But there is no migration yet.  (We do that here.)\n-    Result is that getProperty on an already created lines property\n-    will return the old value with bytes, but a newly created lines property\n-    will return strings.  And you might get combinations.\n-\n-    Also since Zope 5.3, the ulines property type is deprecated.\n-    You should use a lines property instead.\n-    Same for a few others: utext, utoken, ustring.\n-    The unicode variants are planned to be removed in Zope 6.\n-\n-    Intended usage:\n-    app.ZopeFindAndApply(app, search_sub=1, apply_func=fix_properties)\n-    """\n-    if path is None:\n-        # When using ZopeFindAndApply, path is always given.\n-        # But we may be called by other code.\n-        if hasattr(object, \'getPhysicalPath\'):\n-            path = \'/\'.join(object.getPhysicalPath())\n-        else:\n-            # Some simple object, for example in tests.\n-            # We don\'t care about the path then, it is only shown in logs.\n-            path = "/dummy"\n-\n-    if not hasattr(obj, "_updateProperty"):\n-        # Seen with portal_url tool, most items in portal_skins,\n-        # catalog lexicons, workflow states/transitions/variables, etc.\n-        return\n-    try:\n-        prop_map = obj.propertyMap()\n-    except (AttributeError, TypeError, KeyError, ValueError):\n-        # If getting the property map fails, there is nothing we can do.\n-        # Problems seen in practice:\n-        # - Object does not inherit from PropertyManager,\n-        #   for example \'MountedObject\'.\n-        # - Object is a no longer existing skin layer.\n-        logger.warning("Error getting property map from %s", path)\n-        return\n-\n-    for prop_info in prop_map:\n-        # Example: {\'id\': \'title\', \'type\': \'string\', \'mode\': \'w\'}\n-        prop_id = prop_info.get("id")\n-        current = obj.getProperty(prop_id)\n-        if current is None:\n-            continue\n-        new_type = prop_type = prop_info.get("type")\n-        if prop_type == "lines":\n-            new = _string_tuple(current)\n-        elif prop_type == "ulines":\n-            new_type = "lines"\n-            new = _string_tuple(current)\n-        elif prop_type == "utokens":\n-            new_type = "tokens"\n-            new = _string_tuple(current)\n-        elif prop_type == "utext":\n-            new_type = "text"\n-            new = safe_unicode(current)\n-        elif prop_type == "ustring":\n-            new_type = "string"\n-            new = safe_unicode(current)\n-        else:\n-            continue\n-        if prop_type != new_type:\n-            # Replace with non-unicode variant.\n-            # This could easily lead to:\n-            # Exceptions.BadRequest: Invalid or duplicate property id.\n-            #   obj._delProperty(prop_id)\n-            #   obj._setProperty(prop_id, new, new_type)\n-            # So fix it by using internal details.\n-            for prop in obj._properties:\n-                if prop.get("id") == prop_id:\n-                    prop["type"] = new_type\n-                    obj._p_changed = True\n-                    break\n-            else:\n-                # This probably cannot happen.\n-                # If it does, we want to know.\n-                logger.warning(\n-                    "Could not change property %s from %s to %s for %s",\n-                    prop_id,\n-                    prop_type,\n-                    new_type,\n-                    path,\n-                )\n-                continue\n-            obj._updateProperty(prop_id, new)\n-            logger.info(\n-                "Changed property %s from %s to %s for %s",\n-                prop_id,\n-                prop_type,\n-                new_type,\n-                path,\n-            )\n-            continue\n-        if current != new:\n-            obj._updateProperty(prop_id, new)\n-            logger.info(\n-                "Changed property %s at %s so value fits the type %s: %r",\n-                prop_id,\n-                path,\n-                prop_type,\n-                new,\n-            )\n-\n-\n def fix_unicode_properties(context):\n     """Fix unicode properties.\n \n@@ -263,24 +135,14 @@ def fix_unicode_properties(context):\n \n     See https://github.com/plone/Products.CMFPlone/issues/3305\n \n-    The main function we use here will be in Zope 5.4:\n+    The main function we use was added in Zope 5.4:\n     https://github.com/zopefoundation/Zope/pull/993\n-    If it is not there, we use our own copy.\n-    The Zope one should be leading though.\n-    Our copy can be removed when Zope 5.4. is released.\n-\n-    Update: there is a problem with both versions of the code,\n-    so for the moment we fix it in our own version,\n-    and always use it.\n-    See https://github.com/plone/plone.app.upgrade/issues/270\n+    and improved in Zope 5.5:\n+    https://github.com/zopefoundation/Zope/pull/1009\n     """\n-    # try:\n-    #     from ZPublisher.utils import fix_properties\n-    # except ImportError:\n-    #     fix_properties = _fix_properties\n-    fix_properties = _fix_properties\n+    from ZPublisher.utils import fix_properties\n+\n     portal = getSite()\n-    portal.reindexObject()\n     portal.ZopeFindAndApply(portal, search_sub=1, apply_func=fix_properties)\n \n \ndiff --git a/setup.py b/setup.py\nindex 4a616a00..84bc02f8 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -14,11 +14,9 @@\n         "Development Status :: 6 - Mature",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope2",\n-        "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n@@ -59,7 +57,7 @@\n         \'Products.PlonePAS >= 5.0.1\',\n         \'Products.PluggableAuthService\',\n         \'Products.ZCatalog >= 2.13.4\',\n-        \'Zope2\',\n+        \'Zope>=5.5\',\n         \'plone.contentrules\',\n         \'plone.app.iterate\',\n         \'plone.app.viewletmanager\',\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-07T22:03:02+02:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.app.upgrade/commit/aab80ad7635767b7aa346a0794cc50ac943a5557

Merge pull request #284 from plone/maurits-fix-unicode-properties-zope-55

Depend on Zope 5.5 for its improved fix_unicode_properties.

Files changed:
M news/270.bugfix
M plone/app/upgrade/v60/alphas.py
M setup.py

b'diff --git a/news/270.bugfix b/news/270.bugfix\nindex 243f8971..f603541f 100644\n--- a/news/270.bugfix\n+++ b/news/270.bugfix\n@@ -1,2 +1,3 @@\n Fix several exceptions when calling ``fix_unicode_properties``.\n+Depend on Zope 5.5 to use its official version of this function.\n [maurits]\ndiff --git a/plone/app/upgrade/v60/alphas.py b/plone/app/upgrade/v60/alphas.py\nindex 9cef5a90..8908c110 100644\n--- a/plone/app/upgrade/v60/alphas.py\n+++ b/plone/app/upgrade/v60/alphas.py\n@@ -7,7 +7,6 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IBundleRegistry\n from Products.CMFPlone.utils import get_installer\n-from Products.CMFPlone.utils import safe_unicode\n from ZODB.broken import Broken\n from zope.component import getUtility\n from zope.component import queryUtility\n@@ -124,133 +123,6 @@ def index_siteroot(context):\n     portal.reindexObject()\n \n \n-def _string_tuple(value):\n-    # Copy of ZPublisher.utils._string_tuple which will be released in Zope 5.4.\n-    if not value:\n-        return ()\n-    return tuple([safe_unicode(element) for element in value])\n-\n-\n-def _fix_properties(obj, path=None):\n-    """Fix properties on object.\n-\n-    Copy of ZPublisher.utils.fix_properties which will be released in Zope 5.4.\n-    See https://github.com/zopefoundation/Zope/pull/993\n-\n-    This does two things:\n-\n-    1. Make sure lines contain only strings, instead of bytes,\n-       or worse: a combination of strings and bytes.\n-    2. Replace deprecated ulines, utext, utoken, and ustring properties\n-       with their non-unicode variant, using native strings.\n-\n-    See https://github.com/zopefoundation/Zope/issues/987\n-\n-    Since Zope 5.3, a lines property stores strings instead of bytes.\n-    But there is no migration yet.  (We do that here.)\n-    Result is that getProperty on an already created lines property\n-    will return the old value with bytes, but a newly created lines property\n-    will return strings.  And you might get combinations.\n-\n-    Also since Zope 5.3, the ulines property type is deprecated.\n-    You should use a lines property instead.\n-    Same for a few others: utext, utoken, ustring.\n-    The unicode variants are planned to be removed in Zope 6.\n-\n-    Intended usage:\n-    app.ZopeFindAndApply(app, search_sub=1, apply_func=fix_properties)\n-    """\n-    if path is None:\n-        # When using ZopeFindAndApply, path is always given.\n-        # But we may be called by other code.\n-        if hasattr(object, \'getPhysicalPath\'):\n-            path = \'/\'.join(object.getPhysicalPath())\n-        else:\n-            # Some simple object, for example in tests.\n-            # We don\'t care about the path then, it is only shown in logs.\n-            path = "/dummy"\n-\n-    if not hasattr(obj, "_updateProperty"):\n-        # Seen with portal_url tool, most items in portal_skins,\n-        # catalog lexicons, workflow states/transitions/variables, etc.\n-        return\n-    try:\n-        prop_map = obj.propertyMap()\n-    except (AttributeError, TypeError, KeyError, ValueError):\n-        # If getting the property map fails, there is nothing we can do.\n-        # Problems seen in practice:\n-        # - Object does not inherit from PropertyManager,\n-        #   for example \'MountedObject\'.\n-        # - Object is a no longer existing skin layer.\n-        logger.warning("Error getting property map from %s", path)\n-        return\n-\n-    for prop_info in prop_map:\n-        # Example: {\'id\': \'title\', \'type\': \'string\', \'mode\': \'w\'}\n-        prop_id = prop_info.get("id")\n-        current = obj.getProperty(prop_id)\n-        if current is None:\n-            continue\n-        new_type = prop_type = prop_info.get("type")\n-        if prop_type == "lines":\n-            new = _string_tuple(current)\n-        elif prop_type == "ulines":\n-            new_type = "lines"\n-            new = _string_tuple(current)\n-        elif prop_type == "utokens":\n-            new_type = "tokens"\n-            new = _string_tuple(current)\n-        elif prop_type == "utext":\n-            new_type = "text"\n-            new = safe_unicode(current)\n-        elif prop_type == "ustring":\n-            new_type = "string"\n-            new = safe_unicode(current)\n-        else:\n-            continue\n-        if prop_type != new_type:\n-            # Replace with non-unicode variant.\n-            # This could easily lead to:\n-            # Exceptions.BadRequest: Invalid or duplicate property id.\n-            #   obj._delProperty(prop_id)\n-            #   obj._setProperty(prop_id, new, new_type)\n-            # So fix it by using internal details.\n-            for prop in obj._properties:\n-                if prop.get("id") == prop_id:\n-                    prop["type"] = new_type\n-                    obj._p_changed = True\n-                    break\n-            else:\n-                # This probably cannot happen.\n-                # If it does, we want to know.\n-                logger.warning(\n-                    "Could not change property %s from %s to %s for %s",\n-                    prop_id,\n-                    prop_type,\n-                    new_type,\n-                    path,\n-                )\n-                continue\n-            obj._updateProperty(prop_id, new)\n-            logger.info(\n-                "Changed property %s from %s to %s for %s",\n-                prop_id,\n-                prop_type,\n-                new_type,\n-                path,\n-            )\n-            continue\n-        if current != new:\n-            obj._updateProperty(prop_id, new)\n-            logger.info(\n-                "Changed property %s at %s so value fits the type %s: %r",\n-                prop_id,\n-                path,\n-                prop_type,\n-                new,\n-            )\n-\n-\n def fix_unicode_properties(context):\n     """Fix unicode properties.\n \n@@ -263,24 +135,14 @@ def fix_unicode_properties(context):\n \n     See https://github.com/plone/Products.CMFPlone/issues/3305\n \n-    The main function we use here will be in Zope 5.4:\n+    The main function we use was added in Zope 5.4:\n     https://github.com/zopefoundation/Zope/pull/993\n-    If it is not there, we use our own copy.\n-    The Zope one should be leading though.\n-    Our copy can be removed when Zope 5.4. is released.\n-\n-    Update: there is a problem with both versions of the code,\n-    so for the moment we fix it in our own version,\n-    and always use it.\n-    See https://github.com/plone/plone.app.upgrade/issues/270\n+    and improved in Zope 5.5:\n+    https://github.com/zopefoundation/Zope/pull/1009\n     """\n-    # try:\n-    #     from ZPublisher.utils import fix_properties\n-    # except ImportError:\n-    #     fix_properties = _fix_properties\n-    fix_properties = _fix_properties\n+    from ZPublisher.utils import fix_properties\n+\n     portal = getSite()\n-    portal.reindexObject()\n     portal.ZopeFindAndApply(portal, search_sub=1, apply_func=fix_properties)\n \n \ndiff --git a/setup.py b/setup.py\nindex 4a616a00..84bc02f8 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -14,11 +14,9 @@\n         "Development Status :: 6 - Mature",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope2",\n-        "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n@@ -59,7 +57,7 @@\n         \'Products.PlonePAS >= 5.0.1\',\n         \'Products.PluggableAuthService\',\n         \'Products.ZCatalog >= 2.13.4\',\n-        \'Zope2\',\n+        \'Zope>=5.5\',\n         \'plone.contentrules\',\n         \'plone.app.iterate\',\n         \'plone.app.viewletmanager\',\n'

