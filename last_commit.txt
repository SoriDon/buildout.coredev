Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2021-12-21T22:13:59+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFEditions/commit/075b49a026c6f035b680f2c4ed44916377a7256a

Removed versioning_config.py and versioning_config_form.pt from skin.

There is no code that points to these urls.
You can change the versioning config in the `@@content-controlpanel`, which is in CMFPlone.

Files changed:
A news/72.breaking.1
D Products/CMFEditions/skins/CMFEditions/versioning_config.py
D Products/CMFEditions/skins/CMFEditions/versioning_config_form.pt

b'diff --git a/Products/CMFEditions/skins/CMFEditions/versioning_config.py b/Products/CMFEditions/skins/CMFEditions/versioning_config.py\ndeleted file mode 100644\nindex aab0743..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/versioning_config.py\n+++ /dev/null\n@@ -1,21 +0,0 @@\n-## Script (Python) "versioning_config"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=policy_map\n-##title=versioning config\n-##\n-\n-enabled_types = []\n-type_policies = {}\n-for p_type in policy_map:\n-    if p_type.get(\'enabled\', None):\n-        enabled_types.append(p_type[\'portal_type\'])\n-    if p_type.get(\'policies\', None):\n-        type_policies[p_type[\'portal_type\']] = p_type[\'policies\']\n-\n-context.portal_repository.setVersionableContentTypes(enabled_types)\n-context.portal_repository.manage_setTypePolicies(type_policies)\n-context.REQUEST.RESPONSE.redirect(context.absolute_url() + \'/versioning_config_form\')\ndiff --git a/Products/CMFEditions/skins/CMFEditions/versioning_config_form.pt b/Products/CMFEditions/skins/CMFEditions/versioning_config_form.pt\ndeleted file mode 100644\nindex 29a2cb3..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/versioning_config_form.pt\n+++ /dev/null\n@@ -1,135 +0,0 @@\n-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"\n-"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\n-\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US"\n-    metal:define-macro="master"\n-    i18n:domain="cmfeditions">\n-\n-<metal:master use-macro="here/prefs_main_template/macros/master">\n-\n-    <metal:block metal:fill-slot="top_slot" define-slot="top_slot"\n-        tal:define="dummy python:request.set(\'disable_border\',1)" />\n-\n-    <body>\n-\n-    <div i18n:domain="cmfeditions"\n-         metal:fill-slot="prefs_configlet_main"\n-         metal:define-slot="prefs_configlet_main"\n-         tal:define="errors python:request.get(\'errors\', {});">\n-\n-    <div class="configlet">\n-\n-    <div class="documentEditable"\n-         tal:define="type_list here/portal_types/listContentTypes;\n-                     friendly_list context/plone_utils/getUserFriendlyTypes;\n-                     show_all request/show_all|nothing">\n-\n-        <div metal:define-slot="multisite_content">\n-\n-        <h1 i18n:translate="label_title_vers_config">Versioning Settings</h1>\n-\n-        <p class="documentDescription"\n-           i18n:translate="description_version_settings">\n-           You can have different settings for each content type. Content can\n-           be automatically versioned, and you can also opt to create a version\n-           when you revert a revision.\n-        </p>\n-\n-        <form action="."\n-            name="configure_multisite"\n-            method="post">\n-\n-        <fieldset>\n-        <legend i18n:translate="label_versionable_content_types">\n-            Versionable content types\n-        </legend>\n-\n-        <div class="field">\n-            <a href="" i18n:translate="label_versioning_config_show_all"\n-               tal:attributes="href string:${request/ACTUAL_URL}?show_all=True"\n-               tal:condition="python:friendly_list and not show_all">\n-               Show all types</a>\n-            <a href="" i18n:translate="label_versioning_config_show_friendly"\n-               tal:attributes="href string:${request/ACTUAL_URL}"\n-               tal:condition="python:friendly_list and show_all">\n-               Show only searchable types</a>\n-\n-            <table class="listing"\n-                   summary="Versionable content types"\n-                   i18n:attributes="summary label_versionable_content_types;"\n-                   tal:define="pr nocall:here/portal_repository;\n-                            versionablelist pr/getVersionableContentTypes;\n-                            all_policies pr/getPolicyMap;\n-                            policy_defs pr/listPolicies;\n-                            type_list python:list((show_all and type_list) or (friendly_list or type_list));">\n-              <tr>\n-                <th i18n:translate="label_item_type">Item Type</th>\n-                <th i18n:translate="label_enable_versioning">Versioning Enabled?</th>\n-                <th i18n:translate="label_versioning_policies">Policies</th>\n-              </tr>\n-              <tal:block tal:repeat="type_id type_list">\n-              <tr tal:define="typeinfo python:here.portal_types.getTypeInfo(type_id);\n-                              oddrow repeat/type_id/odd"\n-                  tal:attributes="class python:test(oddrow, \'even\', \'odd\')">\n-                <td>\n-                <span i18n:domain="plone" i18n:translate="" tal:content="typeinfo/Title">Type Title</span>\n-                <input type="hidden"\n-                        name="policy_map.portal_type:records"\n-                        value=""\n-                        tal:attributes="value type_id" />\n-                </td>\n-                <td class="listingCheckbox">\n-                    <input type="checkbox"\n-                        name="policy_map.enabled:boolean:records"\n-                        class="noborder"\n-                        checked="checked"\n-                        tal:attributes="value python:True;\n-                                        checked python:type_id in versionablelist;"/>\n-                </td>\n-\n-                <!-- These should really be checkboxes, not multiselect lists ~limi -->\n-                <td>\n-                  <select multiple="multiple"\n-                          size="3"\n-                          name="policy_map.policies:list:records">\n-                    <tal:block define="enabled_policies python:all_policies.get(type_id, []);"\n-                               repeat="policy policy_defs">\n-                        <option i18n:translate=""\n-                                value="policy_id"\n-                                tal:content="policy/Title"\n-                                tal:attributes="value policy/getId;\n-                                                selected python:policy.getId() in enabled_policies;" />\n-                    </tal:block>\n-                  </select>\n-                </td>\n-              </tr>\n-              </tal:block>\n-            </table>\n-        </div>\n-\n-        <div class="formControls">\n-            <input\n-                class="context"\n-                type="submit"\n-                i18n:domain="plone"\n-                i18n:attributes="value label_save"\n-                name="versioning_config:method"\n-                value="Save" />\n-        </div>\n-\n-        </fieldset>\n-\n-\n-        </form>\n-\n-        </div>\n-\n-    </div>\n-\n-    </div>\n-\n-    </div>\n-\n-    </body>\n-</metal:master>\n-</html>\ndiff --git a/news/72.breaking.1 b/news/72.breaking.1\nnew file mode 100644\nindex 0000000..04e5576\n--- /dev/null\n+++ b/news/72.breaking.1\n@@ -0,0 +1,3 @@\n+Removed versioning_config.py and versioning_config_form.pt from skin.\n+Instead, you can change the versioning config in the ``@@content-controlpanel``.\n+[maurits]\n'

Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2021-12-21T22:15:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFEditions/commit/37525aed5dbd6f961e44165dc2cb7f2ec35432e0

Removed get_cmfeditions_ftests.py

Last changed in 2006.
This needs Selenium, which we don't have.

Files changed:
D Products/CMFEditions/skins/CMFEditions/get_cmfeditions_ftests.py

b'diff --git a/Products/CMFEditions/skins/CMFEditions/get_cmfeditions_ftests.py b/Products/CMFEditions/skins/CMFEditions/get_cmfeditions_ftests.py\ndeleted file mode 100644\nindex 3221bac..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/get_cmfeditions_ftests.py\n+++ /dev/null\n@@ -1,30 +0,0 @@\n-## Script (Python) "get_cmfeditions_ftests"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=\n-##title=get cmfeditions ftests\n-##\n-selenium = context.portal_selenium\n-suite = selenium.getSuite()\n-target_language=\'en\'\n-suite.setTargetLanguage(target_language)\n-\n-selenium.addUser(id = \'sampleadmin\',fullname=\'Sample Admin\',roles=[\'Member\', \'Manager\',])\n-\n-# 1\n-test_logout = suite.TestLogout()\n-test_admin_login  = suite.TestLoginPortlet(\'admin\')\n-\n-suite.addTests("CMFEditions",\n-          \'Login as Sample Admin\',\n-          test_logout,\n-          test_admin_login,\n-          "check versions tab",\n-          suite.open(\'/index_html\'),\n-          suite.verifyTextPresent("versions"),\n-         )\n-\n-return suite\n'

Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2021-12-21T22:22:06+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFEditions/commit/e5dfdc9d1748ae68878687b167c13989b6b4732b

Removed migration code from version 1.0alpha3 to 1.0beta1 from 2006.

Files changed:
A news/72.breaking.2
M Products/CMFEditions/ZVCStorageTool.py
D Products/CMFEditions/skins/CMFEditions/migrateStorage.py

b'diff --git a/Products/CMFEditions/ZVCStorageTool.py b/Products/CMFEditions/ZVCStorageTool.py\nindex 0909617..c7e8bee 100644\n--- a/Products/CMFEditions/ZVCStorageTool.py\n+++ b/Products/CMFEditions/ZVCStorageTool.py\n@@ -533,141 +533,6 @@ def _retrieveMetadataFromZVC(self, zvc_histid, zvc_selector):\n         metadata = loads(logEntry.message.split(b"\\x00\\n", 1)[1])\n         return metadata\n \n-    # -------------------------------------------------------------------\n-    # Migration Support\n-    #\n-    # - Migration from 1.0alpha3 --> 1.0beta1\n-    # -------------------------------------------------------------------\n-\n-    def _is10alpha3Layout(self):\n-        """Returns True if Storage is of 1.0alpha3 layout"""\n-        return getattr(self, "_history_id_mapping", None) is not None\n-\n-    def migrateStorage(self):\n-        """Migrate the Storage to Newest Layout"""\n-        # check if already done\n-        if not self._is10alpha3Layout():\n-            logger.log(\n-                logging.INFO,\n-                "CMFEditions storage migration:" "Storage already migrated.",\n-            )\n-            return None\n-\n-        startTime = time.time()\n-        logger.log(\n-            logging.INFO,\n-            "CMFEditions storage migration:" "started migrating the whole storage",\n-        )\n-        from Products.ZopeVersionControl.Utility import VersionInfo\n-\n-        # build reverse mapping: zvc history id --> CMFEditions history id\n-        logger.log(\n-            logging.INFO,\n-            "CMFEditions storage migration:"\n-            "preparing history mapping CMFEditions <--> ZVC",\n-        )\n-        hidMapping = self._history_id_mapping\n-        hidReverseMapping = {}\n-        for hid, zvcHid in hidMapping.items():\n-            hidReverseMapping[zvcHid.history_id] = hid\n-            logger.log(\n-                logging.INFO,\n-                "CMFEditions storage migration:"\n-                " %6i <--> %s" % (hid, zvcHid.history_id),\n-            )\n-\n-        # iterate over all histories\n-        logger.log(\n-            logging.INFO,\n-            "CMFEditions storage migration:" "iterating over all histories:",\n-        )\n-        nbrOfMigratedHistories = 0\n-        nbrOfMigratedVersions = 0\n-        repo = self._getZVCRepo()\n-        for zvcHid in repo._histories.keys():\n-            zvcHistory = repo.getVersionHistory(zvcHid)\n-            zvcVersionIds = zvcHistory.getVersionIds()\n-            history_id = hidReverseMapping[zvcHid]\n-            history = self._getShadowHistory(history_id, autoAdd=True)\n-            logger.log(\n-                logging.INFO,\n-                "CMFEditions storage migration:"\n-                " migrating %s versions of history %s (ZVC: %s)"\n-                % (len(zvcVersionIds), history_id, zvcHid),\n-            )\n-            nbrOfMigratedHistories += 1\n-\n-            # iterate over all versions\n-            for zvcVid in zvcVersionIds:\n-                obj = zvcHistory.getVersionById(zvcVid)\n-                vc_info = VersionInfo(zvcHid, zvcVid, VersionInfo.CHECKED_IN)\n-                vc_info.timestamp = obj.date_created\n-                metadata = self._retrieveMetadataFromZVC(zvcHid, zvcVid)\n-\n-                # calculating approximate size\n-                zvc_obj = repo.getVersionOfResource(zvcHid, zvcVid)\n-                obj = zvc_obj.getWrappedObject()\n-                referenced_data = zvc_obj.getReferencedData()\n-                approxSize = getSize(obj) + getSize(referenced_data)\n-                metadata["sys_metadata"]["approxSize"] = approxSize\n-\n-                # we do not calculate version aware parent references\n-                # (it\'s possible but rather complicated)\n-\n-                # preparing administrative data\n-                shadowInfo = {\n-                    "vc_info": vc_info,\n-                    "metadata": metadata,\n-                }\n-\n-                # save metadata in shadow history\n-                logger.log(\n-                    logging.INFO,\n-                    "CMFEditions storage migration:"\n-                    " migrating version %s:" % (int(zvcVid) - 1),\n-                )\n-                history.save(shadowInfo)\n-\n-                app_metadata = metadata.get("app_metadata", {})\n-                if app_metadata:\n-                    logger.log(\n-                        logging.INFO,\n-                        "CMFEditions storage migration:" " application metadata:",\n-                    )\n-                    for item in app_metadata.items():\n-                        logger.log(\n-                            logging.INFO,\n-                            "CMFEditions storage migration: %s = %s" % item,\n-                        )\n-                sys_metadata = metadata.get("sys_metadata", {})\n-                if sys_metadata:\n-                    logger.log(\n-                        logging.INFO,\n-                        "CMFEditions storage migration:" " system metadata:",\n-                    )\n-                    for item in sys_metadata.items():\n-                        logger.log(\n-                            logging.INFO,\n-                            "CMFEditions storage migration: %s = %s" % item,\n-                        )\n-                nbrOfMigratedVersions += 1\n-\n-        # delete the old metadata\n-        del self._history_id_mapping\n-\n-        # log a summary\n-        totalTime = round(time.time() - startTime, 2)\n-        logger.log(\n-            logging.INFO,\n-            "CMFEditions storage migration:"\n-            "migrated %s histories and a total of %s versions in %.2f seconds"\n-            % (nbrOfMigratedHistories, nbrOfMigratedVersions, totalTime),\n-        )\n-\n-        # XXX have to add purge policy\n-\n-        return (nbrOfMigratedHistories, nbrOfMigratedVersions, totalTime)\n-\n     # -------------------------------------------------------------------\n     # ZMI methods\n     # -------------------------------------------------------------------\ndiff --git a/Products/CMFEditions/skins/CMFEditions/migrateStorage.py b/Products/CMFEditions/skins/CMFEditions/migrateStorage.py\ndeleted file mode 100644\nindex 1822db5..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/migrateStorage.py\n+++ /dev/null\n@@ -1,19 +0,0 @@\n-## Script (Python) "migrateStorage"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=\n-##title=Migrate the Storage\n-##\n-from Products.CMFCore.utils import getToolByName\n-\n-\n-storage = getToolByName(context, "portal_historiesstorage")\n-result = storage.migrateStorage()\n-if result is None:\n-    return "no storage migration necessary: nothing done"\n-\n-return "migrated %s histories and a total of %s versions in in %.2f seconds" \\\n-       % result\ndiff --git a/news/72.breaking.2 b/news/72.breaking.2\nnew file mode 100644\nindex 0000000..a5b4e91\n--- /dev/null\n+++ b/news/72.breaking.2\n@@ -0,0 +1,2 @@\n+Removed migration code from version 1.0alpha3 to 1.0beta1 from 2006.\n+[maurits]\n'

Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2021-12-21T22:25:43+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFEditions/commit/f0b743f51ac8f76a5e19b0b52090cae5f739410b

Removed versioning.gif and actionicons.xml that pointed to it.

actionicons.xml is no longer read.
The gif is for a controlpanel that no longer exists.

Files changed:
D Products/CMFEditions/profiles/default/actionicons.xml
D Products/CMFEditions/skins/CMFEditions/versioning.gif

b'diff --git a/Products/CMFEditions/profiles/default/actionicons.xml b/Products/CMFEditions/profiles/default/actionicons.xml\ndeleted file mode 100644\nindex 660620e..0000000\n--- a/Products/CMFEditions/profiles/default/actionicons.xml\n+++ /dev/null\n@@ -1,6 +0,0 @@\n-<?xml version="1.0"?>\n-<action-icons>\n- <action-icon category="controlpanel" action_id="versioning"\n-              title="Versioning" priority="0"\n-              icon_expr="versioning.gif"/>\n-</action-icons>\ndiff --git a/Products/CMFEditions/skins/CMFEditions/versioning.gif b/Products/CMFEditions/skins/CMFEditions/versioning.gif\ndeleted file mode 100644\nindex 8aa90b5..0000000\nBinary files a/Products/CMFEditions/skins/CMFEditions/versioning.gif and /dev/null differ\n'

Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2021-12-21T22:32:36+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFEditions/commit/a6fb495fae9a6e6eeb9f71cc66e3a4488ce10ce5

Removed Storage Migration Support.

This had code for creating a test hierarchy for migration tests.

Files changed:
M Products/CMFEditions/CopyModifyMergeRepositoryTool.py
M news/72.breaking.2
D Products/CMFEditions/StorageMigrationSupport.py
D Products/CMFEditions/skins/CMFEditions/createTestHierarchy.py

b'diff --git a/Products/CMFEditions/CopyModifyMergeRepositoryTool.py b/Products/CMFEditions/CopyModifyMergeRepositoryTool.py\nindex 520d1d7..73f386f 100644\n--- a/Products/CMFEditions/CopyModifyMergeRepositoryTool.py\n+++ b/Products/CMFEditions/CopyModifyMergeRepositoryTool.py\n@@ -716,17 +716,6 @@ def _fixIds(self, obj):\n                     obj._setObject(temp_id, child)\n                     all_ids.append(temp_id)\n \n-    # -------------------------------------------------------------------\n-    # diagnostics support\n-    # -------------------------------------------------------------------\n-\n-    def createTestHierarchy(self, context):\n-        """Create a Content Test Hierarchy"""\n-        # XXX to be allowed in test mode only\n-        from StorageMigrationSupport import createTestHierarchy\n-\n-        createTestHierarchy(context)\n-\n \n @implementer(IVersionData)\n class VersionData:\ndiff --git a/Products/CMFEditions/StorageMigrationSupport.py b/Products/CMFEditions/StorageMigrationSupport.py\ndeleted file mode 100644\nindex 7887324..0000000\n--- a/Products/CMFEditions/StorageMigrationSupport.py\n+++ /dev/null\n@@ -1,259 +0,0 @@\n-#########################################################################\n-# Copyright (c) 2006 Gregoire Weber\n-# All Rights Reserved.\n-#\n-# This file is part of CMFEditions.\n-#\n-# CMFEditions is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 2 of the License, or\n-# (at your option) any later version.\n-#\n-# CMFEditions is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with CMFEditions; if not, write to the Free Software\n-# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n-#########################################################################\n-"""Storage Migration Support\n-\n-Creating a test hierarchy for migration tests.\n-\n-"""\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFEditions import PACKAGE_HOME\n-\n-import logging\n-import os.path\n-import time\n-\n-\n-logger = logging.getLogger("CMFEditions")\n-\n-\n-def create(context, type, name):\n-    context.invokeFactory(type, name)\n-    obj = getattr(context, name)\n-    editMethods[type](obj, version=0)\n-    return obj\n-\n-\n-def edit(obj, version):\n-    type = obj.getPortalTypeName()\n-    editMethods[type](obj, version)\n-\n-\n-def editEvent(context, version=0):\n-    title = context.Title()\n-    desc = context.Description()\n-    eventType = context.Subject()\n-    location = context.location\n-    contact = context.contactName\n-    name = context.getId()\n-    if not title:\n-        title = "0: %s event title" % name\n-        desc = "0: %s event description" % name\n-        eventType = "Appointment"\n-        location = "0: %s event location" % name\n-        contact = "0: %s event contact" % name\n-    else:\n-        title = f"{version}{title[1:]}"\n-        desc = f"{version}{desc[1:]}"\n-        location = f"{version}{location[1:]}"\n-        contact = f"{version}{contact[1:]}"\n-\n-    context.update(\n-        title=title,\n-        description=desc,\n-        eventType=eventType,\n-        location=location,\n-        contactName=contact,\n-    )\n-\n-\n-def editFile(context, version=0):\n-    title = context.Title()\n-    desc = context.Description()\n-    file = context.index_html()\n-    name = context.getId()\n-    if not title:\n-        title = "0: %s file title" % name\n-        desc = "0: %s file description" % name\n-        file = 100 * ("0: %s file body\\n" % name)\n-    else:\n-        title = f"{version}{title[1:]}"\n-        desc = f"{version}{desc[1:]}"\n-        file = 100 * ("{}{}".format(version, ": %s file body\\n" % name))\n-    context.update(title=title, description=desc, file=file)\n-\n-\n-def editFolder(context, version=0):\n-    title = context.Title()\n-    desc = context.Description()\n-    name = context.getId()\n-    if not title:\n-        title = "0: %s folder title" % name\n-        desc = "0: %s folder description" % name\n-    title = f"{version}{title[1:]}"\n-    desc = f"{version}{desc[1:]}"\n-    context.folder_edit(title=title, description=desc)\n-\n-\n-def editImage(context, version=0):\n-    title = context.Title()\n-    desc = context.Description()\n-    image = context.index_html()\n-    name = context.getId()\n-    if name.endswith(".gif"):\n-        name = name[:-4]\n-    filename = f"{name}_v{version}.gif"\n-    path = os.path.join(PACKAGE_HOME, "tests", "images", filename)\n-    with open(path) as image_handle:\n-        image = image_handle.read()\n-    if not title:\n-        title = "0: %s image title" % name\n-        desc = "0: %s image description" % name\n-    else:\n-        title = f"{version}{title[1:]}"\n-        desc = f"{version}{desc[1:]}"\n-    context.update(title=title, description=desc, image=image)\n-\n-\n-def editLink(context, version=0):\n-    title = context.Title()\n-    desc = context.Description()\n-    remoteUrl = context.remoteUrl\n-    name = context.getId()\n-    if not title:\n-        title = "0: %s link title" % name\n-        desc = "0: %s link description" % name\n-        remoteUrl = "http://www.plone.org/#%s_v0" % name\n-    else:\n-        title = f"{version}{title[1:]}"\n-        desc = f"{version}{desc[1:]}"\n-        remoteUrl = f"{remoteUrl[:-1]}{version}"\n-    context.update(title=title, description=desc, remoteUrl=remoteUrl)\n-\n-\n-def editNewsItem(context, version=0):\n-    title = context.Title()\n-    desc = context.Description()\n-    text = context.getText()\n-    name = context.getId()\n-    if not title:\n-        title = "0: %s news item title" % name\n-        desc = "0: %s news item description" % name\n-        text = "0: %s news item body" % name\n-    else:\n-        title = f"{version}{title[1:]}"\n-        desc = f"{version}{desc[1:]}"\n-        text = f"{version}{text[1:]}"\n-    context.update(title=title, description=desc, text=text)\n-\n-\n-def editDocument(context, version=0):\n-    title = context.Title()\n-    desc = context.Description()\n-    text = context.getText()\n-    name = context.getId()\n-    if not title:\n-        title = "0: %s document title" % name\n-        desc = "0: %s document description" % name\n-        text = "0: %s document body" % name\n-    else:\n-        title = f"{version}{title[1:]}"\n-        desc = f"{version}{desc[1:]}"\n-        text = f"{version}{text[1:]}"\n-    context.update(title=title, description=desc, text=text)\n-\n-\n-def editTopic(context, version=0):\n-    pass\n-\n-\n-editMethods = {\n-    "Event": editEvent,\n-    "File": editFile,\n-    "Folder": editFolder,\n-    "Image": editImage,\n-    "Link": editLink,\n-    "News Item": editNewsItem,\n-    "Document": editDocument,\n-    "Topic": editTopic,\n-}\n-\n-hierarchy = {\n-    "events": ("Folder", "Event", 4, 3),\n-    "files": ("Folder", "File", 4, 3),\n-    "folders": ("Folder", "Folder", 3, 3),\n-    "images": ("Folder", "Image", 2, 4, ".gif"),\n-    "links": ("Folder", "Link", 4, 3),\n-    "newsitems": ("Folder", "News Item", 4, 3),\n-    "documents": ("Folder", "Document", 4, 3),\n-    "topics": ("Folder", "Topic", 0, 0),\n-}\n-\n-\n-def createTestHierarchy(context):\n-    startTime = time.time()\n-    repo = getToolByName(context, "portal_repository")\n-    testRoot = create(context, "Folder", "CMFEditionsTestHierarchy")\n-    nbrOfObjects = 0\n-    nbrOfEdits = 0\n-    nbrOfSaves = 0\n-    for name, type in hierarchy.items():\n-        logger.log(\n-            logging.INFO,\n-            f"createTestHierarchy: creating container {name}({type[0]})",\n-        )\n-        folder = create(testRoot, type[0], name)\n-        nbrOfObjects += 1\n-        logger.log(logging.INFO, "createTestHierarchy: save #0")\n-        repo.save(folder, comment="save #0")\n-        nbrOfSaves += 1\n-        for i in range(type[2]):\n-            if len(type) == 5:\n-                ext = type[4]\n-            else:\n-                ext = ""\n-\n-            # create and save\n-            objName = name[:-1] + str(i + 1) + ext\n-            logger.log(\n-                logging.INFO,\n-                f"createTestHierarchy: creating {objName}({type[1]})",\n-            )\n-            obj = create(folder, type[1], objName)\n-            nbrOfObjects += 1\n-            logger.log(logging.INFO, "createTestHierarchy: save #0")\n-            repo.save(obj, comment="save #0")\n-            nbrOfSaves += 1\n-\n-            # edit and save a number of times\n-            for j in range(1, type[3]):\n-                logger.log(logging.INFO, "createTestHierarchy: editing")\n-                edit(obj, j)\n-                nbrOfEdits += 1\n-                logger.log(logging.INFO, "createTestHierarchy: save #%s" % j)\n-                repo.save(obj, comment="save #%s" % j)\n-                nbrOfSaves += 1\n-\n-                vers = j + i * (type[3] - 1)\n-                logger.log(logging.INFO, "createTestHierarchy: editing parent")\n-                edit(folder, vers)\n-                nbrOfEdits += 1\n-                logger.log(logging.INFO, "createTestHierarchy: save parent #%s" % vers)\n-                repo.save(folder, comment="save #%s" % vers)\n-                nbrOfSaves += 1\n-\n-    totalTime = time.time() - startTime\n-    logger.log(\n-        logging.INFO,\n-        "createTestHierarchy: created %s objects, edited them %s times and saved %s versions in total in %.1f seconds"\n-        % (nbrOfObjects, nbrOfEdits, nbrOfSaves, round(totalTime, 1)),\n-    )\n-\n-    return testRoot\ndiff --git a/Products/CMFEditions/skins/CMFEditions/createTestHierarchy.py b/Products/CMFEditions/skins/CMFEditions/createTestHierarchy.py\ndeleted file mode 100644\nindex a277e1b..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/createTestHierarchy.py\n+++ /dev/null\n@@ -1,17 +0,0 @@\n-## Script (Python) "createTestHierarchy"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=\n-##title=Create a test hierarchy for migration tests\n-##\n-from Products.CMFCore.utils import getToolByName\n-\n-\n-repo = getToolByName(context, "portal_repository", None)\n-\n-if repo is not None:\n-    repo.createTestHierarchy(context)\n-    return "finished creating test hierarchy"\ndiff --git a/news/72.breaking.2 b/news/72.breaking.2\nindex a5b4e91..5b09f0a 100644\n--- a/news/72.breaking.2\n+++ b/news/72.breaking.2\n@@ -1,2 +1,4 @@\n Removed migration code from version 1.0alpha3 to 1.0beta1 from 2006.\n+Removed Storage Migration Support.\n+This had code for creating a test hierarchy for migration tests.\n [maurits]\n'

Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2021-12-21T22:36:10+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFEditions/commit/add50eca89e89da1e479f3e302dba7ada4e09911

Removed version_diff.pt.

This template is deprecated. Use the @@history view instead.

Files changed:
A news/71.bugfix.1
D Products/CMFEditions/skins/CMFEditions/version_diff.pt

b'diff --git a/Products/CMFEditions/skins/CMFEditions/version_diff.pt b/Products/CMFEditions/skins/CMFEditions/version_diff.pt\ndeleted file mode 100644\nindex e8b9c0f..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/version_diff.pt\n+++ /dev/null\n@@ -1,9 +0,0 @@\n-<tal:comment replace="nothing">\n-  This template is deprecated. Use the @@history view instead.\n-</tal:comment>\n-<tal:block define="one python:request.set(\'one\', request.get(\'version_id1\'));\n-                   two python:request.set(\'two\', request.get(\'version_id2\'));">\n-\n-  <tal:block replace="structure context/@@history" />\n-\n-</tal:block>\ndiff --git a/news/71.bugfix.1 b/news/71.bugfix.1\nnew file mode 100644\nindex 0000000..e6f0651\n--- /dev/null\n+++ b/news/71.bugfix.1\n@@ -0,0 +1,3 @@\n+Removed version_diff.pt.\n+This template is deprecated. Use the @@history view instead.\n+[maurits]\n'

Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2021-12-21T22:42:29+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFEditions/commit/34e860e70d3221e99f6e15f75ee7aefa880fcfff

Removed unused versions_history.pt which defines a versions_history macro.

We do still have versions_history_form.

Files changed:
A news/72.breaking.3
D Products/CMFEditions/skins/CMFEditions/versions_history.pt

b'diff --git a/Products/CMFEditions/skins/CMFEditions/versions_history.pt b/Products/CMFEditions/skins/CMFEditions/versions_history.pt\ndeleted file mode 100644\nindex fbe3281..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/versions_history.pt\n+++ /dev/null\n@@ -1,55 +0,0 @@\n-<span class="versionsHistory"\n-      metal:define-macro="versions_history"\n-      i18n:domain="cmfeditions">\n-<tal:history      tal:define="pr        nocall:here/portal_repository;\n-                              history   python:pr.getHistoryMetadata(context);\n-                              revisions python:history.getLength(countPurged=False);\n-                              histrange python:range(revisions-1, -1, -1)"\n-                  tal:condition="python: history and pr.isVersionable(context)">\n-      <dl id="versions" class="collapsible inline collapsedOnLoad">\n-        <dt class="collapsibleHeader" i18n:translate="label_versions">Recent Versions</dt>\n-        <dd class="collapsibleContent">\n-\n-        <table class="listing nosort" summary="Versions History"\n-               i18n:attributes="summary summary_versions_history;"\n-               tal:condition="history">\n-\n-          <tr>\n-            <th i18n:translate="listingheader_key">Revision</th>\n-            <th i18n:translate="listingheader_performed_by">Performed by</th>\n-            <th i18n:translate="listingheader_date_and_time">Date and Time</th>\n-            <th i18n:translate="listingheader_comment">Comment</th>\n-          </tr>\n-\n-          <metal:block tal:repeat="vdatai histrange">\n-            <tr tal:define="vdatafull  python:history.retrieve(vdatai, countPurged=False);\n-                            vdata      vdatafull/metadata;\n-                            odd        repeat/vdatai/odd;\n-                            id         vdatai"\n-                tal:attributes="class python:test(odd, \'even\', \'odd\')">\n-              <td>\n-                <span tal:content="id">1</span>\n-                <a href="#"\n-                   class="version-table-version"\n-                   tal:define="here_url context/absolute_url"\n-                   tal:attributes="href string:$here_url/versions_history_form?version_id=${id}"\n-                   i18n:translate="label_show_version">\n-                  show revisions</a>\n-              </td>\n-              <td>\n-                <span tal:content="vdata/sys_metadata/principal">francesco</span>\n-              </td>\n-              <td>\n-                <span tal:content="python:here.toLocalizedTime(vdata[\'sys_metadata\'][\'timestamp\'],long_format=1)">2004/10/21 03:15 PM</span>\n-              </td>\n-              <td><span tal:content="vdata/sys_metadata/comment">Draft version ready for comments from the group.</span>\n-              </td>\n-            </tr>\n-          </metal:block>\n-        </table>\n-\n-        </dd>\n-      </dl>\n-    </tal:history>\n-\n-</span>\ndiff --git a/news/72.breaking.3 b/news/72.breaking.3\nnew file mode 100644\nindex 0000000..7578490\n--- /dev/null\n+++ b/news/72.breaking.3\n@@ -0,0 +1,3 @@\n+Removed unused versions_history.pt which defines a versions_history macro.\n+We do still have versions_history_form.\n+[maurits]\n'

Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2021-12-21T22:58:12+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFEditions/commit/5164a8bf836d803a041e1036e9d24e57dc140b1e

Moved saveasnewversion from skin to a browser view.

Files changed:
A Products/CMFEditions/browser/policies.py
A news/71.feature.1
M Products/CMFEditions/browser/configure.zcml
D Products/CMFEditions/skins/CMFEditions/saveasnewversion.py

b'diff --git a/Products/CMFEditions/browser/configure.zcml b/Products/CMFEditions/browser/configure.zcml\nindex 7b15bd6..3ea586d 100644\n--- a/Products/CMFEditions/browser/configure.zcml\n+++ b/Products/CMFEditions/browser/configure.zcml\n@@ -62,5 +62,12 @@\n         permission="zope2.View"\n         />\n \n+    <browser:page\n+        for="*"\n+        name="saveasnewversion"\n+        class=".policies.SaveAsNewVersion"\n+        permission="zope2.View"\n+        />\n+\n </configure>\n \ndiff --git a/Products/CMFEditions/browser/policies.py b/Products/CMFEditions/browser/policies.py\nnew file mode 100644\nindex 0000000..c2c921f\n--- /dev/null\n+++ b/Products/CMFEditions/browser/policies.py\n@@ -0,0 +1,17 @@\n+from Products.CMFCore.utils import getToolByName\n+from Products.Five import BrowserView\n+\n+\n+class SaveAsNewVersion(BrowserView):\n+    """Save as new version\n+\n+    Originally a Script (Python): saveasnewversion\n+    """\n+\n+    def __call__(self):\n+        pr = getToolByName(self.context, "portal_repository", None)\n+        if pr is not None:\n+            versioncomment = self.request.get("versioncomment")\n+            # Note: the save method explicitly checks a permission.\n+            pr.save(obj=self.context, comment=versioncomment)\n+        self.request.RESPONSE.redirect("versions_history_form")\ndiff --git a/Products/CMFEditions/skins/CMFEditions/saveasnewversion.py b/Products/CMFEditions/skins/CMFEditions/saveasnewversion.py\ndeleted file mode 100644\nindex 17cdb71..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/saveasnewversion.py\n+++ /dev/null\n@@ -1,17 +0,0 @@\n-## Script (Python) "saveasnewversion"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=versioncomment\n-##title=Save as new version\n-##\n-\n-from Products.CMFCore.utils import getToolByName\n-\n-\n-pr = getToolByName(context, \'portal_repository\', None)\n-if pr is not None:\n-    pr.save(obj=context, comment=versioncomment)\n-    context.REQUEST.RESPONSE.redirect(\'versions_history_form\')\ndiff --git a/news/71.feature.1 b/news/71.feature.1\nnew file mode 100644\nindex 0000000..ba19867\n--- /dev/null\n+++ b/news/71.feature.1\n@@ -0,0 +1,2 @@\n+Moved ``saveasnewversion`` from skin to a browser view.\n+[maurits]\n'

Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2021-12-21T23:20:35+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFEditions/commit/a4432c6afe2521b3421cde761dfe17bd8e80a270

Moved revertversion from skin to a browser view.

Files changed:
M Products/CMFEditions/browser/configure.zcml
M Products/CMFEditions/browser/policies.py
M news/71.feature.1
D Products/CMFEditions/skins/CMFEditions/revertversion.py

b'diff --git a/Products/CMFEditions/browser/configure.zcml b/Products/CMFEditions/browser/configure.zcml\nindex 3ea586d..2197a5a 100644\n--- a/Products/CMFEditions/browser/configure.zcml\n+++ b/Products/CMFEditions/browser/configure.zcml\n@@ -69,5 +69,12 @@\n         permission="zope2.View"\n         />\n \n+    <browser:page\n+        for="*"\n+        name="revertversion"\n+        class=".policies.RevertVersion"\n+        permission="zope2.View"\n+        />\n+\n </configure>\n \ndiff --git a/Products/CMFEditions/browser/policies.py b/Products/CMFEditions/browser/policies.py\nindex c2c921f..be4af48 100644\n--- a/Products/CMFEditions/browser/policies.py\n+++ b/Products/CMFEditions/browser/policies.py\n@@ -1,5 +1,9 @@\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFEditions import CMFEditionsMessageFactory as _\n+from Products.CMFEditions.interfaces.IModifier import FileTooLargeToVersionError\n from Products.Five import BrowserView\n+from Products.statusmessages.interfaces import IStatusMessage\n+from zope.i18n import translate\n \n \n class SaveAsNewVersion(BrowserView):\n@@ -14,4 +18,52 @@ def __call__(self):\n             versioncomment = self.request.get("versioncomment")\n             # Note: the save method explicitly checks a permission.\n             pr.save(obj=self.context, comment=versioncomment)\n-        self.request.RESPONSE.redirect("versions_history_form")\n+        self.request.response.redirect("versions_history_form")\n+\n+\n+class RevertVersion(BrowserView):\n+    """Revert version\n+\n+    Originally a Script (Python): revertversion\n+    """\n+\n+    def __call__(self):\n+        version_id = self.request.get("version_id")\n+        pr = getToolByName(self.context, "portal_repository")\n+        pr.revert(self.context, version_id)\n+\n+        obj_type_view_url = self.context.getTypeInfo().getActionInfo("object/view")[\n+            "url"\n+        ]\n+        if obj_type_view_url != "/":\n+            view_url = "%s/%s" % (self.context.absolute_url(), obj_type_view_url)\n+        else:\n+            view_url = self.context.absolute_url()\n+\n+        if pr.supportsPolicy(self.context, "version_on_revert"):\n+            try:\n+                commit_msg = translate(\n+                    _(\n+                        u"Reverted to revision ${version}",\n+                        mapping={"version": version_id},\n+                    ),\n+                    context=self.request,\n+                )\n+                pr.save(obj=self.context, comment=commit_msg)\n+            except FileTooLargeToVersionError:\n+                IStatusMessage(self.request).addStatusMessage(\n+                    _(\n+                        "The most current revision of the file could not be "\n+                        "saved before reverting because the file is too large."\n+                    ),\n+                    "warning",\n+                )\n+\n+        title = self.context.title_or_id()\n+        msg = _(\n+            "${title} has been reverted to revision ${version}.",\n+            mapping={"title": title, "version": version_id},\n+        )\n+        IStatusMessage(self.request).addStatusMessage(msg, "info")\n+\n+        return self.request.response.redirect(view_url)\ndiff --git a/Products/CMFEditions/skins/CMFEditions/revertversion.py b/Products/CMFEditions/skins/CMFEditions/revertversion.py\ndeleted file mode 100644\nindex e01b0cc..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/revertversion.py\n+++ /dev/null\n@@ -1,45 +0,0 @@\n-## Script (Python) "revertversion"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=version_id\n-##title=Revert version\n-##\n-from Products.CMFEditions import CMFEditionsMessageFactory as _\n-from Products.CMFEditions.interfaces.IModifier import FileTooLargeToVersionError\n-from Products.CMFPlone.utils import safe_unicode\n-\n-\n-RESPONSE = context.REQUEST.RESPONSE\n-putils = container.plone_utils\n-pr = container.portal_repository\n-pr.revert(context, version_id)\n-\n-obj_type_view_url = context.getTypeInfo().getActionInfo(\'object/view\')[\'url\']\n-if obj_type_view_url != \'/\':\n-    view_url = \'%s/%s\' % (context.absolute_url(), obj_type_view_url)\n-else:\n-    view_url = context.absolute_url()\n-\n-title = safe_unicode(context.title_or_id())\n-msg = _(u\'${title} has been reverted to revision ${version}.\',\n-        mapping={\'title\': title,\n-                 \'version\': version_id})\n-\n-if pr.supportsPolicy(context, \'version_on_revert\'):\n-    try:\n-        commit_msg = context.translate(_(u\'Reverted to revision ${version}\',\n-                                       mapping={\'version\': version_id}))\n-        pr.save(obj=context, comment=commit_msg)\n-    except FileTooLargeToVersionError:\n-        putils.addPortalMessage(\n-  _(u\'The most current revision of the file could not be saved before reverting \'\n-    \'because the file is too large.\'),\n-       type=\'warn\'\n-       )\n-\n-context.plone_utils.addPortalMessage(msg)\n-\n-return RESPONSE.redirect(view_url)\ndiff --git a/news/71.feature.1 b/news/71.feature.1\nindex ba19867..3ce4363 100644\n--- a/news/71.feature.1\n+++ b/news/71.feature.1\n@@ -1,2 +1,2 @@\n-Moved ``saveasnewversion`` from skin to a browser view.\n+Moved ``saveasnewversion`` and ``revertversion`` from skin to a browser view.\n [maurits]\n'

Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2021-12-21T23:21:52+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFEditions/commit/4612767ed4ed260e8fbdada6c20a6213e1e5755c

versions_history_form: link to revertversion and saveasnewversion as browser views.

Files changed:
M Products/CMFEditions/skins/CMFEditions/versions_history_form.pt

b'diff --git a/Products/CMFEditions/skins/CMFEditions/versions_history_form.pt b/Products/CMFEditions/skins/CMFEditions/versions_history_form.pt\nindex ce6c079..bc23ed6 100644\n--- a/Products/CMFEditions/skins/CMFEditions/versions_history_form.pt\n+++ b/Products/CMFEditions/skins/CMFEditions/versions_history_form.pt\n@@ -148,7 +148,7 @@\n                         <li tal:condition="python: (not current_version) and canRevertToPrevious">\n \n                             <form action="" method="post"\n-                                  tal:attributes="action string:$here_url/revertversion">\n+                                  tal:attributes="action string:$here_url/@@revertversion">\n                               <input type="hidden" name="version_id" value="" tal:attributes="value id" />\n                               <input class="standalone" type="submit"\n                                      i18n:attributes="value label_revert"\n@@ -164,7 +164,7 @@\n     <form action="#"\n         method="post"\n         tal:define="here_url context/absolute_url"\n-        tal:attributes="action string:${here_url}/saveasnewversion"\n+        tal:attributes="action string:${here_url}/@@saveasnewversion"\n         tal:condition="not: python:pr.supportsPolicy(context, \'at_edit_autoversion\')">\n \n         <fieldset>\n'

Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2021-12-21T23:27:12+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFEditions/commit/0222034a17b3bfa916012527ec826721d63fc095

Moved diff_legend from skin to browser view.

Files changed:
A Products/CMFEditions/browser/templates/diff_legend.pt
M Products/CMFEditions/browser/configure.zcml
M Products/CMFEditions/browser/diff.pt
M news/71.feature.1
D Products/CMFEditions/skins/CMFEditions/diff_legend.pt

b'diff --git a/Products/CMFEditions/browser/configure.zcml b/Products/CMFEditions/browser/configure.zcml\nindex 2197a5a..3f92399 100644\n--- a/Products/CMFEditions/browser/configure.zcml\n+++ b/Products/CMFEditions/browser/configure.zcml\n@@ -76,5 +76,13 @@\n         permission="zope2.View"\n         />\n \n+    <!-- Note: this is also used by plone.app.iterate -->\n+    <browser:page\n+        for="*"\n+        name="diff_legend"\n+        template="templates/diff_legend.pt"\n+        permission="zope2.View"\n+        />\n+\n </configure>\n \ndiff --git a/Products/CMFEditions/browser/diff.pt b/Products/CMFEditions/browser/diff.pt\nindex 55f60f5..e91edb3 100644\n--- a/Products/CMFEditions/browser/diff.pt\n+++ b/Products/CMFEditions/browser/diff.pt\n@@ -90,7 +90,7 @@\n               </noscript>\n             </form>\n \n-            <div metal:use-macro="here/diff_legend/macros/diff_legend" />\n+            <div metal:use-macro="context/@@diff_legend/macros/diff_legend" />\n \n             <p tal:condition="not:view/changes" i18n:translate="">\n               There are no changes between the selected revisions.\ndiff --git a/Products/CMFEditions/skins/CMFEditions/diff_legend.pt b/Products/CMFEditions/browser/templates/diff_legend.pt\nsimilarity index 100%\nrename from Products/CMFEditions/skins/CMFEditions/diff_legend.pt\nrename to Products/CMFEditions/browser/templates/diff_legend.pt\ndiff --git a/news/71.feature.1 b/news/71.feature.1\nindex 3ce4363..08fd573 100644\n--- a/news/71.feature.1\n+++ b/news/71.feature.1\n@@ -1,2 +1,3 @@\n-Moved ``saveasnewversion`` and ``revertversion`` from skin to a browser view.\n+Moved various items from from skin to a browser view:\n+``saveasnewversion``, ``revertversion``, ``diff_legend``.\n [maurits]\n'

Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2021-12-22T00:01:53+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFEditions/commit/6044775de21dbde6400e08fddbe1d18a5d091c65

Moved diff.pt from browser to browser/templates.

Register the template in zcml instead of calling ViewPageTemplateFile in Python.
Easier to override.

Files changed:
A Products/CMFEditions/browser/templates/diff.pt
M Products/CMFEditions/browser/configure.zcml
M Products/CMFEditions/browser/diff.py
D Products/CMFEditions/browser/diff.pt

b'diff --git a/Products/CMFEditions/browser/configure.zcml b/Products/CMFEditions/browser/configure.zcml\nindex 3f92399..3291222 100644\n--- a/Products/CMFEditions/browser/configure.zcml\n+++ b/Products/CMFEditions/browser/configure.zcml\n@@ -6,6 +6,7 @@\n         for="*"\n         name="history"\n         class=".diff.DiffView"\n+        template="templates/diff.pt"\n         permission="CMFEditions.AccessPreviousVersions"\n         />\n \ndiff --git a/Products/CMFEditions/browser/diff.py b/Products/CMFEditions/browser/diff.py\nindex 8711c84..ee8a3c7 100644\n--- a/Products/CMFEditions/browser/diff.py\n+++ b/Products/CMFEditions/browser/diff.py\n@@ -2,12 +2,10 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFEditions import CMFEditionsMessageFactory as _\n from Products.Five.browser import BrowserView\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.i18n import translate\n \n \n class DiffView(BrowserView):\n-    template = ViewPageTemplateFile("diff.pt")\n \n     def __init__(self, *args):\n         super().__init__(*args)\n@@ -59,7 +57,7 @@ def __call__(self):\n             change for change in self.changeset.getDiffs() if not change.same\n         ]\n \n-        return self.template()\n+        return self.index()\n \n \n class CanDiff(BrowserView):\ndiff --git a/Products/CMFEditions/browser/diff.pt b/Products/CMFEditions/browser/templates/diff.pt\nsimilarity index 100%\nrename from Products/CMFEditions/browser/diff.pt\nrename to Products/CMFEditions/browser/templates/diff.pt\n'

Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2021-12-22T00:02:13+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFEditions/commit/09b3c749d60b782ceacca88c92255d81b535108f

Moved versions_history_form from skin to browser view.

We might not need this anymore though: the @@historyview/@@contenthistory from plone.app.layout is mostly the same, and looks nicer.
But we have a preview and a form to add a new version.

Files changed:
A Products/CMFEditions/browser/templates/versions_history_form.pt
M Products/CMFEditions/browser/configure.zcml
M news/71.feature.1
D Products/CMFEditions/skins/CMFEditions/versions_history_form.pt
D Products/CMFEditions/skins/CMFEditions/versions_history_form.pt.metadata

b'diff --git a/Products/CMFEditions/browser/configure.zcml b/Products/CMFEditions/browser/configure.zcml\nindex 3291222..ef9bf3d 100644\n--- a/Products/CMFEditions/browser/configure.zcml\n+++ b/Products/CMFEditions/browser/configure.zcml\n@@ -85,5 +85,17 @@\n         permission="zope2.View"\n         />\n \n+    <!-- Note: this is roughly the same as @@historyview in plone.app.layout\n+         which is a small wrapper around @@contenthistory in plone.app.layout,\n+         which is a viewlet turned into a view.  Their version looks nicer.\n+         But our versions_history_form has a preview (which contenthistory points to)\n+         and a form to add a new version, if the policy is manual. -->\n+    <browser:page\n+        for="*"\n+        name="versions_history_form"\n+        template="templates/versions_history_form.pt"\n+        permission="zope2.View"\n+        />\n+\n </configure>\n \ndiff --git a/Products/CMFEditions/skins/CMFEditions/versions_history_form.pt b/Products/CMFEditions/browser/templates/versions_history_form.pt\nsimilarity index 100%\nrename from Products/CMFEditions/skins/CMFEditions/versions_history_form.pt\nrename to Products/CMFEditions/browser/templates/versions_history_form.pt\ndiff --git a/Products/CMFEditions/skins/CMFEditions/versions_history_form.pt.metadata b/Products/CMFEditions/skins/CMFEditions/versions_history_form.pt.metadata\ndeleted file mode 100644\nindex daa4e53..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/versions_history_form.pt.metadata\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-[default]\n-title=Versions history\n-\ndiff --git a/news/71.feature.1 b/news/71.feature.1\nindex 08fd573..36bf4d8 100644\n--- a/news/71.feature.1\n+++ b/news/71.feature.1\n@@ -1,3 +1,3 @@\n Moved various items from from skin to a browser view:\n-``saveasnewversion``, ``revertversion``, ``diff_legend``.\n+``saveasnewversion``, ``revertversion``, ``diff_legend``, ``versions_history_form``.\n [maurits]\n'

Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2021-12-22T00:14:59+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFEditions/commit/8aa501aae26915abd8668e9542f2179e057888c6

Merged skin script checkUpToDate into versions_history_form view.

Files changed:
A news/71.feature.2
M Products/CMFEditions/browser/configure.zcml
M Products/CMFEditions/browser/templates/versions_history_form.pt
M Products/CMFEditions/browser/views.py
D Products/CMFEditions/skins/CMFEditions/checkUpToDate.py

b'diff --git a/Products/CMFEditions/browser/configure.zcml b/Products/CMFEditions/browser/configure.zcml\nindex ef9bf3d..22bb84b 100644\n--- a/Products/CMFEditions/browser/configure.zcml\n+++ b/Products/CMFEditions/browser/configure.zcml\n@@ -93,6 +93,7 @@\n     <browser:page\n         for="*"\n         name="versions_history_form"\n+        class=".views.VersionsHistoryForm"\n         template="templates/versions_history_form.pt"\n         permission="zope2.View"\n         />\ndiff --git a/Products/CMFEditions/browser/templates/versions_history_form.pt b/Products/CMFEditions/browser/templates/versions_history_form.pt\nindex bc23ed6..03cd674 100644\n--- a/Products/CMFEditions/browser/templates/versions_history_form.pt\n+++ b/Products/CMFEditions/browser/templates/versions_history_form.pt\n@@ -11,8 +11,8 @@\n                    revisions python:history and history.getLength(countPurged=False) or 0;\n                    histrange python:range(revisions-1, -1, -1);\n                    here_url context/absolute_url;\n-                   view nocall:context/@@candiff;\n-                   can_diff view/can_diff;\n+                   can_diff_view nocall:context/@@candiff;\n+                   can_diff can_diff_view/can_diff;\n                    checkPermission nocall:context/portal_membership/checkPermission;\n                    canRevertToPrevious python:checkPermission(\'CMFEditions: Revert to previous versions\', context);"\n                    tal:condition="python: pr.isVersionable(context)">\n@@ -32,7 +32,7 @@\n             summary="Content history"\n             cellpadding="0" cellspacing="0"\n             tal:condition="history"\n-            tal:define="current python:context.checkUpToDate(history)">\n+            tal:define="current python:view.checkUpToDate(history)">\n             <thead>\n                 <tr>\n                   <th><tal:title i18n:translate="listingheader_key"\ndiff --git a/Products/CMFEditions/browser/views.py b/Products/CMFEditions/browser/views.py\nindex 23501f5..90b2884 100644\n--- a/Products/CMFEditions/browser/views.py\n+++ b/Products/CMFEditions/browser/views.py\n@@ -93,3 +93,39 @@ def __call__(self):\n class VersionView(BrowserView):\n     def human_readable_size(self):\n         return human_readable_size\n+\n+\n+class VersionsHistoryForm(BrowserView):\n+    def checkUpToDate(self, history):\n+        """Check if Up To Date.\n+\n+        This used to be a Script (Python): checkUpToDate\n+        """\n+        repo = getToolByName(self.context, "portal_repository", None)\n+\n+        isModified = None\n+        reverted_vid = None\n+        isReverted = None\n+\n+        version_id = getattr(self.context, "version_id", None)\n+        if repo is not None:\n+            if version_id is None:\n+                isModified = True\n+                isReverted = False\n+            else:\n+                isModified = not repo.isUpToDate(self.context, version_id)\n+                historyLength = len(history)\n+                reverted_vid = version_id\n+                if historyLength == version_id + 1:\n+                    isReverted = False\n+                else:\n+                    isReverted = True\n+                if isModified:\n+                    version_id = historyLength\n+\n+        return {\n+            "isModified": isModified,\n+            "version_id": version_id,\n+            "isReverted": isReverted,\n+            "reverted_vid": reverted_vid,\n+        }\ndiff --git a/Products/CMFEditions/skins/CMFEditions/checkUpToDate.py b/Products/CMFEditions/skins/CMFEditions/checkUpToDate.py\ndeleted file mode 100644\nindex d21a03f..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/checkUpToDate.py\n+++ /dev/null\n@@ -1,40 +0,0 @@\n-## Script (Python) "checkUpToDate"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=history\n-##title=Check if Up To Date\n-##\n-from Products.CMFCore.utils import getToolByName\n-\n-\n-repo = getToolByName(context, "portal_repository", None)\n-\n-isModified = None\n-reverted_vid = None\n-isReverted = None\n-\n-version_id = getattr(context, "version_id", None)\n-if repo is not None:\n-    if version_id is None:\n-        isModified = True\n-        isReverted = False\n-    else:\n-        isModified = not repo.isUpToDate(context, version_id)\n-        historyLength = len(history)\n-        reverted_vid = version_id\n-        if historyLength == version_id+1:\n-            isReverted = False\n-        else:\n-            isReverted = True\n-        if isModified:\n-            version_id = historyLength\n-\n-return {\n-    "isModified": isModified,\n-    "version_id": version_id,\n-    "isReverted": isReverted,\n-    "reverted_vid": reverted_vid,\n-}\ndiff --git a/news/71.feature.2 b/news/71.feature.2\nnew file mode 100644\nindex 0000000..b126bea\n--- /dev/null\n+++ b/news/71.feature.2\n@@ -0,0 +1,2 @@\n+Merged skin script ``checkUpToDate`` into ``versions_history_form`` view.\n+[maurits]\n'

Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2021-12-22T00:18:06+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFEditions/commit/8bf0f7a11ec2eba1895b05d0868eb48c071df761

Merged can_diff view into versions_history_form view.

Files changed:
M Products/CMFEditions/browser/configure.zcml
M Products/CMFEditions/browser/diff.py
M Products/CMFEditions/browser/templates/versions_history_form.pt
M Products/CMFEditions/browser/views.py
M news/71.feature.2

b'diff --git a/Products/CMFEditions/browser/configure.zcml b/Products/CMFEditions/browser/configure.zcml\nindex 22bb84b..4b2804c 100644\n--- a/Products/CMFEditions/browser/configure.zcml\n+++ b/Products/CMFEditions/browser/configure.zcml\n@@ -10,14 +10,6 @@\n         permission="CMFEditions.AccessPreviousVersions"\n         />\n \n-    <browser:page\n-        for="*"\n-        name="candiff"\n-        class=".diff.CanDiff"\n-        attribute="can_diff"\n-        permission="zope2.View"\n-        />\n-\n     <browser:page\n         for="*"\n         name="get_macros"\ndiff --git a/Products/CMFEditions/browser/diff.py b/Products/CMFEditions/browser/diff.py\nindex ee8a3c7..7143434 100644\n--- a/Products/CMFEditions/browser/diff.py\n+++ b/Products/CMFEditions/browser/diff.py\n@@ -58,14 +58,3 @@ def __call__(self):\n         ]\n \n         return self.index()\n-\n-\n-class CanDiff(BrowserView):\n-    def can_diff(self):\n-        """Return True if content is diffable"""\n-        context = self.context\n-        portal_diff = getToolByName(context, "portal_diff", None)\n-        return (\n-            portal_diff\n-            and len(portal_diff.getDiffForPortalType(context.portal_type)) > 0\n-        )\ndiff --git a/Products/CMFEditions/browser/templates/versions_history_form.pt b/Products/CMFEditions/browser/templates/versions_history_form.pt\nindex 03cd674..e27f9eb 100644\n--- a/Products/CMFEditions/browser/templates/versions_history_form.pt\n+++ b/Products/CMFEditions/browser/templates/versions_history_form.pt\n@@ -11,8 +11,7 @@\n                    revisions python:history and history.getLength(countPurged=False) or 0;\n                    histrange python:range(revisions-1, -1, -1);\n                    here_url context/absolute_url;\n-                   can_diff_view nocall:context/@@candiff;\n-                   can_diff can_diff_view/can_diff;\n+                   can_diff view/can_diff;\n                    checkPermission nocall:context/portal_membership/checkPermission;\n                    canRevertToPrevious python:checkPermission(\'CMFEditions: Revert to previous versions\', context);"\n                    tal:condition="python: pr.isVersionable(context)">\ndiff --git a/Products/CMFEditions/browser/views.py b/Products/CMFEditions/browser/views.py\nindex 90b2884..d015319 100644\n--- a/Products/CMFEditions/browser/views.py\n+++ b/Products/CMFEditions/browser/views.py\n@@ -129,3 +129,12 @@ def checkUpToDate(self, history):\n             "isReverted": isReverted,\n             "reverted_vid": reverted_vid,\n         }\n+\n+    def can_diff(self):\n+        """Return True if content is diffable"""\n+        context = self.context\n+        portal_diff = getToolByName(context, "portal_diff", None)\n+        return (\n+            portal_diff\n+            and len(portal_diff.getDiffForPortalType(context.portal_type)) > 0\n+        )\ndiff --git a/news/71.feature.2 b/news/71.feature.2\nindex b126bea..3790332 100644\n--- a/news/71.feature.2\n+++ b/news/71.feature.2\n@@ -1,2 +1,3 @@\n Merged skin script ``checkUpToDate`` into ``versions_history_form`` view.\n+Merged ``can_diff`` view into ``versions_history_form`` view.\n [maurits]\n'

Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2021-12-22T00:28:56+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFEditions/commit/75c48d3f1164da1d6f0670f55f6e5d3121dfa9ad

Moved compare.css from skin to a browser view.

We should make this a browser resource, but plone.app.iterate uses it as well,
and I don't want to deal with that package right now.
Can be improved later.

Files changed:
A Products/CMFEditions/browser/compare.css
M Products/CMFEditions/browser/configure.zcml
M Products/CMFEditions/browser/views.py
M news/71.feature.1
D Products/CMFEditions/skins/CMFEditions/compare.css.dtml

b'diff --git a/Products/CMFEditions/skins/CMFEditions/compare.css.dtml b/Products/CMFEditions/browser/compare.css\nsimilarity index 100%\nrename from Products/CMFEditions/skins/CMFEditions/compare.css.dtml\nrename to Products/CMFEditions/browser/compare.css\ndiff --git a/Products/CMFEditions/browser/configure.zcml b/Products/CMFEditions/browser/configure.zcml\nindex 4b2804c..8dce428 100644\n--- a/Products/CMFEditions/browser/configure.zcml\n+++ b/Products/CMFEditions/browser/configure.zcml\n@@ -90,5 +90,14 @@\n         permission="zope2.View"\n         />\n \n+    <!-- We could make this a resource, but then we need to change plone.app.iterate as well.\n+         So for now make it a browser view. -->\n+    <browser:page\n+        for="*"\n+        name="compare.css"\n+        class=".views.CompareCSS"\n+        permission="zope2.View"\n+        />\n+\n </configure>\n \ndiff --git a/Products/CMFEditions/browser/views.py b/Products/CMFEditions/browser/views.py\nindex d015319..88e4271 100644\n--- a/Products/CMFEditions/browser/views.py\n+++ b/Products/CMFEditions/browser/views.py\n@@ -9,6 +9,8 @@\n from Products.Five import BrowserView\n from Products.statusmessages.interfaces import IStatusMessage\n \n+import os\n+\n \n class UpdateVersionOnEditView(BrowserView):\n     def success(self):\n@@ -138,3 +140,19 @@ def can_diff(self):\n             portal_diff\n             and len(portal_diff.getDiffForPortalType(context.portal_type)) > 0\n         )\n+\n+\n+css_path = os.path.join(os.path.dirname(__file__), "compare.css")\n+with open(css_path) as myfile:\n+    COMPARE_CSS = myfile.read()\n+\n+\n+class CompareCSS(BrowserView):\n+    """Formerly skins/CMFEditions/compare.css.dtml\n+\n+    Should be a browser resource, but I don\'t want to change plone.app.iterate just now.\n+    That will further complicate an already complex PR.\n+    """\n+\n+    def __call__(self):\n+        return COMPARE_CSS\ndiff --git a/news/71.feature.1 b/news/71.feature.1\nindex 36bf4d8..32d0a92 100644\n--- a/news/71.feature.1\n+++ b/news/71.feature.1\n@@ -1,3 +1,3 @@\n Moved various items from from skin to a browser view:\n-``saveasnewversion``, ``revertversion``, ``diff_legend``, ``versions_history_form``.\n+``saveasnewversion``, ``revertversion``, ``diff_legend``, ``versions_history_form``, ``compare.css``.\n [maurits]\n'

Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2021-12-22T00:46:16+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFEditions/commit/9b6a3d50c1b5577aac29fc69e3a1780e8bc9419c

Remove now empty CMFEditions skin layer in an upgrade step.

Files changed:
A news/71.feature.3
M Products/CMFEditions/configure.zcml
M Products/CMFEditions/profiles.zcml
M Products/CMFEditions/profiles/default/metadata.xml
M Products/CMFEditions/setuphandlers.py
D Products/CMFEditions/profiles/default/skins.xml

b'diff --git a/Products/CMFEditions/configure.zcml b/Products/CMFEditions/configure.zcml\nindex 005774b..f208b02 100644\n--- a/Products/CMFEditions/configure.zcml\n+++ b/Products/CMFEditions/configure.zcml\n@@ -1,14 +1,9 @@\n <configure xmlns="http://namespaces.zope.org/zope"\n-    xmlns:cmf="http://namespaces.zope.org/cmf"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:i18n="http://namespaces.zope.org/i18n"\n     i18n_domain="cmfeditions">\n \n   <include file="permissions.zcml"/>\n \n-  <cmf:registerDirectory name="skins" directory="skins" recursive="True" />\n-\n   <include package="Products.CMFUid" />\n   <!-- provides hooks for zope.copy -->\n   <include package="zope.location" />\ndiff --git a/Products/CMFEditions/profiles.zcml b/Products/CMFEditions/profiles.zcml\nindex 9704bf2..bafc103 100644\n--- a/Products/CMFEditions/profiles.zcml\n+++ b/Products/CMFEditions/profiles.zcml\n@@ -41,4 +41,13 @@\n            handler=".setuphandlers.removeBrokenModifiers" />\n     </genericsetup:upgradeSteps>\n \n+    <genericsetup:upgradeSteps\n+        source="10"\n+        destination="11"\n+        profile="Products.CMFEditions:CMFEditions">\n+        <genericsetup:upgradeStep\n+           title="Remove CMFEditions skin layer"\n+           handler=".setuphandlers.removeSkinLayer" />\n+    </genericsetup:upgradeSteps>\n+\n </configure>\ndiff --git a/Products/CMFEditions/profiles/default/metadata.xml b/Products/CMFEditions/profiles/default/metadata.xml\nindex f0dc8db..295a9a2 100644\n--- a/Products/CMFEditions/profiles/default/metadata.xml\n+++ b/Products/CMFEditions/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n <?xml version="1.0"?>\n <metadata>\n-  <version>10</version>\n+  <version>11</version>\n </metadata>\ndiff --git a/Products/CMFEditions/profiles/default/skins.xml b/Products/CMFEditions/profiles/default/skins.xml\ndeleted file mode 100644\nindex eb38a80..0000000\n--- a/Products/CMFEditions/profiles/default/skins.xml\n+++ /dev/null\n@@ -1,8 +0,0 @@\n-<?xml version="1.0"?>\n-<object name="portal_skins">\n- <object name="CMFEditions" meta_type="Filesystem Directory View"\n-    directory="Products.CMFEditions:skins/CMFEditions"/>\n- <skin-path name="*">\n-  <layer name="CMFEditions" insert-after="custom"/>\n- </skin-path>\n-</object>\ndiff --git a/Products/CMFEditions/setuphandlers.py b/Products/CMFEditions/setuphandlers.py\nindex 82da986..4ff713c 100644\n--- a/Products/CMFEditions/setuphandlers.py\n+++ b/Products/CMFEditions/setuphandlers.py\n@@ -55,3 +55,21 @@ def removeBrokenModifiers(context):\n             continue\n         tool._delObject(modifier_id)\n         logger.info("Removed broken %s from portal_modifier.", modifier_id)\n+\n+\n+def removeSkinLayer(context):\n+    """Remove our skin layer."""\n+    skins = getToolByName(context, "portal_skins")\n+    # Remove directory views for directories missing on the filesystem\n+    our_skin = "CMFEditions"\n+    if our_skin in skins.keys():\n+        skins._delObject(our_skin)\n+        logger.info("Removed %s from skin layers.", our_skin)\n+\n+    for layer, paths in skins.selections.items():\n+        paths = paths.split(",")\n+        if our_skin not in paths:\n+            continue\n+        paths.remove(our_skin)\n+        skins.selections[layer] = ",".join(paths)\n+        logger.info("Removed %s from skin selection %s.", our_skin, layer)\ndiff --git a/news/71.feature.3 b/news/71.feature.3\nnew file mode 100644\nindex 0000000..96f61bd\n--- /dev/null\n+++ b/news/71.feature.3\n@@ -0,0 +1,2 @@\n+Remove now empty CMFEditions skin layer in an upgrade step.\n+[maurits]\n'

Repository: Products.CMFEditions


Branch: refs/heads/master
Date: 2021-12-22T11:42:13+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFEditions/commit/637c0ee1e431b9919d2d6198a1e043f704dac632

Merge pull request #81 from plone/maurits-skins-to-browser

Remove the CMFEditions skin layer

Files changed:
A Products/CMFEditions/browser/compare.css
A Products/CMFEditions/browser/policies.py
A Products/CMFEditions/browser/templates/diff.pt
A Products/CMFEditions/browser/templates/diff_legend.pt
A Products/CMFEditions/browser/templates/versions_history_form.pt
A news/71.bugfix.1
A news/71.feature.1
A news/71.feature.2
A news/71.feature.3
A news/72.breaking.1
A news/72.breaking.2
A news/72.breaking.3
M Products/CMFEditions/CopyModifyMergeRepositoryTool.py
M Products/CMFEditions/ZVCStorageTool.py
M Products/CMFEditions/browser/configure.zcml
M Products/CMFEditions/browser/diff.py
M Products/CMFEditions/browser/views.py
M Products/CMFEditions/configure.zcml
M Products/CMFEditions/profiles.zcml
M Products/CMFEditions/profiles/default/metadata.xml
M Products/CMFEditions/setuphandlers.py
D Products/CMFEditions/StorageMigrationSupport.py
D Products/CMFEditions/browser/diff.pt
D Products/CMFEditions/profiles/default/actionicons.xml
D Products/CMFEditions/profiles/default/skins.xml
D Products/CMFEditions/skins/CMFEditions/checkUpToDate.py
D Products/CMFEditions/skins/CMFEditions/compare.css.dtml
D Products/CMFEditions/skins/CMFEditions/createTestHierarchy.py
D Products/CMFEditions/skins/CMFEditions/diff_legend.pt
D Products/CMFEditions/skins/CMFEditions/get_cmfeditions_ftests.py
D Products/CMFEditions/skins/CMFEditions/migrateStorage.py
D Products/CMFEditions/skins/CMFEditions/revertversion.py
D Products/CMFEditions/skins/CMFEditions/saveasnewversion.py
D Products/CMFEditions/skins/CMFEditions/version_diff.pt
D Products/CMFEditions/skins/CMFEditions/versioning.gif
D Products/CMFEditions/skins/CMFEditions/versioning_config.py
D Products/CMFEditions/skins/CMFEditions/versioning_config_form.pt
D Products/CMFEditions/skins/CMFEditions/versions_history.pt
D Products/CMFEditions/skins/CMFEditions/versions_history_form.pt
D Products/CMFEditions/skins/CMFEditions/versions_history_form.pt.metadata

b'diff --git a/Products/CMFEditions/CopyModifyMergeRepositoryTool.py b/Products/CMFEditions/CopyModifyMergeRepositoryTool.py\nindex 520d1d7..73f386f 100644\n--- a/Products/CMFEditions/CopyModifyMergeRepositoryTool.py\n+++ b/Products/CMFEditions/CopyModifyMergeRepositoryTool.py\n@@ -716,17 +716,6 @@ def _fixIds(self, obj):\n                     obj._setObject(temp_id, child)\n                     all_ids.append(temp_id)\n \n-    # -------------------------------------------------------------------\n-    # diagnostics support\n-    # -------------------------------------------------------------------\n-\n-    def createTestHierarchy(self, context):\n-        """Create a Content Test Hierarchy"""\n-        # XXX to be allowed in test mode only\n-        from StorageMigrationSupport import createTestHierarchy\n-\n-        createTestHierarchy(context)\n-\n \n @implementer(IVersionData)\n class VersionData:\ndiff --git a/Products/CMFEditions/StorageMigrationSupport.py b/Products/CMFEditions/StorageMigrationSupport.py\ndeleted file mode 100644\nindex 7887324..0000000\n--- a/Products/CMFEditions/StorageMigrationSupport.py\n+++ /dev/null\n@@ -1,259 +0,0 @@\n-#########################################################################\n-# Copyright (c) 2006 Gregoire Weber\n-# All Rights Reserved.\n-#\n-# This file is part of CMFEditions.\n-#\n-# CMFEditions is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 2 of the License, or\n-# (at your option) any later version.\n-#\n-# CMFEditions is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with CMFEditions; if not, write to the Free Software\n-# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n-#########################################################################\n-"""Storage Migration Support\n-\n-Creating a test hierarchy for migration tests.\n-\n-"""\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFEditions import PACKAGE_HOME\n-\n-import logging\n-import os.path\n-import time\n-\n-\n-logger = logging.getLogger("CMFEditions")\n-\n-\n-def create(context, type, name):\n-    context.invokeFactory(type, name)\n-    obj = getattr(context, name)\n-    editMethods[type](obj, version=0)\n-    return obj\n-\n-\n-def edit(obj, version):\n-    type = obj.getPortalTypeName()\n-    editMethods[type](obj, version)\n-\n-\n-def editEvent(context, version=0):\n-    title = context.Title()\n-    desc = context.Description()\n-    eventType = context.Subject()\n-    location = context.location\n-    contact = context.contactName\n-    name = context.getId()\n-    if not title:\n-        title = "0: %s event title" % name\n-        desc = "0: %s event description" % name\n-        eventType = "Appointment"\n-        location = "0: %s event location" % name\n-        contact = "0: %s event contact" % name\n-    else:\n-        title = f"{version}{title[1:]}"\n-        desc = f"{version}{desc[1:]}"\n-        location = f"{version}{location[1:]}"\n-        contact = f"{version}{contact[1:]}"\n-\n-    context.update(\n-        title=title,\n-        description=desc,\n-        eventType=eventType,\n-        location=location,\n-        contactName=contact,\n-    )\n-\n-\n-def editFile(context, version=0):\n-    title = context.Title()\n-    desc = context.Description()\n-    file = context.index_html()\n-    name = context.getId()\n-    if not title:\n-        title = "0: %s file title" % name\n-        desc = "0: %s file description" % name\n-        file = 100 * ("0: %s file body\\n" % name)\n-    else:\n-        title = f"{version}{title[1:]}"\n-        desc = f"{version}{desc[1:]}"\n-        file = 100 * ("{}{}".format(version, ": %s file body\\n" % name))\n-    context.update(title=title, description=desc, file=file)\n-\n-\n-def editFolder(context, version=0):\n-    title = context.Title()\n-    desc = context.Description()\n-    name = context.getId()\n-    if not title:\n-        title = "0: %s folder title" % name\n-        desc = "0: %s folder description" % name\n-    title = f"{version}{title[1:]}"\n-    desc = f"{version}{desc[1:]}"\n-    context.folder_edit(title=title, description=desc)\n-\n-\n-def editImage(context, version=0):\n-    title = context.Title()\n-    desc = context.Description()\n-    image = context.index_html()\n-    name = context.getId()\n-    if name.endswith(".gif"):\n-        name = name[:-4]\n-    filename = f"{name}_v{version}.gif"\n-    path = os.path.join(PACKAGE_HOME, "tests", "images", filename)\n-    with open(path) as image_handle:\n-        image = image_handle.read()\n-    if not title:\n-        title = "0: %s image title" % name\n-        desc = "0: %s image description" % name\n-    else:\n-        title = f"{version}{title[1:]}"\n-        desc = f"{version}{desc[1:]}"\n-    context.update(title=title, description=desc, image=image)\n-\n-\n-def editLink(context, version=0):\n-    title = context.Title()\n-    desc = context.Description()\n-    remoteUrl = context.remoteUrl\n-    name = context.getId()\n-    if not title:\n-        title = "0: %s link title" % name\n-        desc = "0: %s link description" % name\n-        remoteUrl = "http://www.plone.org/#%s_v0" % name\n-    else:\n-        title = f"{version}{title[1:]}"\n-        desc = f"{version}{desc[1:]}"\n-        remoteUrl = f"{remoteUrl[:-1]}{version}"\n-    context.update(title=title, description=desc, remoteUrl=remoteUrl)\n-\n-\n-def editNewsItem(context, version=0):\n-    title = context.Title()\n-    desc = context.Description()\n-    text = context.getText()\n-    name = context.getId()\n-    if not title:\n-        title = "0: %s news item title" % name\n-        desc = "0: %s news item description" % name\n-        text = "0: %s news item body" % name\n-    else:\n-        title = f"{version}{title[1:]}"\n-        desc = f"{version}{desc[1:]}"\n-        text = f"{version}{text[1:]}"\n-    context.update(title=title, description=desc, text=text)\n-\n-\n-def editDocument(context, version=0):\n-    title = context.Title()\n-    desc = context.Description()\n-    text = context.getText()\n-    name = context.getId()\n-    if not title:\n-        title = "0: %s document title" % name\n-        desc = "0: %s document description" % name\n-        text = "0: %s document body" % name\n-    else:\n-        title = f"{version}{title[1:]}"\n-        desc = f"{version}{desc[1:]}"\n-        text = f"{version}{text[1:]}"\n-    context.update(title=title, description=desc, text=text)\n-\n-\n-def editTopic(context, version=0):\n-    pass\n-\n-\n-editMethods = {\n-    "Event": editEvent,\n-    "File": editFile,\n-    "Folder": editFolder,\n-    "Image": editImage,\n-    "Link": editLink,\n-    "News Item": editNewsItem,\n-    "Document": editDocument,\n-    "Topic": editTopic,\n-}\n-\n-hierarchy = {\n-    "events": ("Folder", "Event", 4, 3),\n-    "files": ("Folder", "File", 4, 3),\n-    "folders": ("Folder", "Folder", 3, 3),\n-    "images": ("Folder", "Image", 2, 4, ".gif"),\n-    "links": ("Folder", "Link", 4, 3),\n-    "newsitems": ("Folder", "News Item", 4, 3),\n-    "documents": ("Folder", "Document", 4, 3),\n-    "topics": ("Folder", "Topic", 0, 0),\n-}\n-\n-\n-def createTestHierarchy(context):\n-    startTime = time.time()\n-    repo = getToolByName(context, "portal_repository")\n-    testRoot = create(context, "Folder", "CMFEditionsTestHierarchy")\n-    nbrOfObjects = 0\n-    nbrOfEdits = 0\n-    nbrOfSaves = 0\n-    for name, type in hierarchy.items():\n-        logger.log(\n-            logging.INFO,\n-            f"createTestHierarchy: creating container {name}({type[0]})",\n-        )\n-        folder = create(testRoot, type[0], name)\n-        nbrOfObjects += 1\n-        logger.log(logging.INFO, "createTestHierarchy: save #0")\n-        repo.save(folder, comment="save #0")\n-        nbrOfSaves += 1\n-        for i in range(type[2]):\n-            if len(type) == 5:\n-                ext = type[4]\n-            else:\n-                ext = ""\n-\n-            # create and save\n-            objName = name[:-1] + str(i + 1) + ext\n-            logger.log(\n-                logging.INFO,\n-                f"createTestHierarchy: creating {objName}({type[1]})",\n-            )\n-            obj = create(folder, type[1], objName)\n-            nbrOfObjects += 1\n-            logger.log(logging.INFO, "createTestHierarchy: save #0")\n-            repo.save(obj, comment="save #0")\n-            nbrOfSaves += 1\n-\n-            # edit and save a number of times\n-            for j in range(1, type[3]):\n-                logger.log(logging.INFO, "createTestHierarchy: editing")\n-                edit(obj, j)\n-                nbrOfEdits += 1\n-                logger.log(logging.INFO, "createTestHierarchy: save #%s" % j)\n-                repo.save(obj, comment="save #%s" % j)\n-                nbrOfSaves += 1\n-\n-                vers = j + i * (type[3] - 1)\n-                logger.log(logging.INFO, "createTestHierarchy: editing parent")\n-                edit(folder, vers)\n-                nbrOfEdits += 1\n-                logger.log(logging.INFO, "createTestHierarchy: save parent #%s" % vers)\n-                repo.save(folder, comment="save #%s" % vers)\n-                nbrOfSaves += 1\n-\n-    totalTime = time.time() - startTime\n-    logger.log(\n-        logging.INFO,\n-        "createTestHierarchy: created %s objects, edited them %s times and saved %s versions in total in %.1f seconds"\n-        % (nbrOfObjects, nbrOfEdits, nbrOfSaves, round(totalTime, 1)),\n-    )\n-\n-    return testRoot\ndiff --git a/Products/CMFEditions/ZVCStorageTool.py b/Products/CMFEditions/ZVCStorageTool.py\nindex 0909617..c7e8bee 100644\n--- a/Products/CMFEditions/ZVCStorageTool.py\n+++ b/Products/CMFEditions/ZVCStorageTool.py\n@@ -533,141 +533,6 @@ def _retrieveMetadataFromZVC(self, zvc_histid, zvc_selector):\n         metadata = loads(logEntry.message.split(b"\\x00\\n", 1)[1])\n         return metadata\n \n-    # -------------------------------------------------------------------\n-    # Migration Support\n-    #\n-    # - Migration from 1.0alpha3 --> 1.0beta1\n-    # -------------------------------------------------------------------\n-\n-    def _is10alpha3Layout(self):\n-        """Returns True if Storage is of 1.0alpha3 layout"""\n-        return getattr(self, "_history_id_mapping", None) is not None\n-\n-    def migrateStorage(self):\n-        """Migrate the Storage to Newest Layout"""\n-        # check if already done\n-        if not self._is10alpha3Layout():\n-            logger.log(\n-                logging.INFO,\n-                "CMFEditions storage migration:" "Storage already migrated.",\n-            )\n-            return None\n-\n-        startTime = time.time()\n-        logger.log(\n-            logging.INFO,\n-            "CMFEditions storage migration:" "started migrating the whole storage",\n-        )\n-        from Products.ZopeVersionControl.Utility import VersionInfo\n-\n-        # build reverse mapping: zvc history id --> CMFEditions history id\n-        logger.log(\n-            logging.INFO,\n-            "CMFEditions storage migration:"\n-            "preparing history mapping CMFEditions <--> ZVC",\n-        )\n-        hidMapping = self._history_id_mapping\n-        hidReverseMapping = {}\n-        for hid, zvcHid in hidMapping.items():\n-            hidReverseMapping[zvcHid.history_id] = hid\n-            logger.log(\n-                logging.INFO,\n-                "CMFEditions storage migration:"\n-                " %6i <--> %s" % (hid, zvcHid.history_id),\n-            )\n-\n-        # iterate over all histories\n-        logger.log(\n-            logging.INFO,\n-            "CMFEditions storage migration:" "iterating over all histories:",\n-        )\n-        nbrOfMigratedHistories = 0\n-        nbrOfMigratedVersions = 0\n-        repo = self._getZVCRepo()\n-        for zvcHid in repo._histories.keys():\n-            zvcHistory = repo.getVersionHistory(zvcHid)\n-            zvcVersionIds = zvcHistory.getVersionIds()\n-            history_id = hidReverseMapping[zvcHid]\n-            history = self._getShadowHistory(history_id, autoAdd=True)\n-            logger.log(\n-                logging.INFO,\n-                "CMFEditions storage migration:"\n-                " migrating %s versions of history %s (ZVC: %s)"\n-                % (len(zvcVersionIds), history_id, zvcHid),\n-            )\n-            nbrOfMigratedHistories += 1\n-\n-            # iterate over all versions\n-            for zvcVid in zvcVersionIds:\n-                obj = zvcHistory.getVersionById(zvcVid)\n-                vc_info = VersionInfo(zvcHid, zvcVid, VersionInfo.CHECKED_IN)\n-                vc_info.timestamp = obj.date_created\n-                metadata = self._retrieveMetadataFromZVC(zvcHid, zvcVid)\n-\n-                # calculating approximate size\n-                zvc_obj = repo.getVersionOfResource(zvcHid, zvcVid)\n-                obj = zvc_obj.getWrappedObject()\n-                referenced_data = zvc_obj.getReferencedData()\n-                approxSize = getSize(obj) + getSize(referenced_data)\n-                metadata["sys_metadata"]["approxSize"] = approxSize\n-\n-                # we do not calculate version aware parent references\n-                # (it\'s possible but rather complicated)\n-\n-                # preparing administrative data\n-                shadowInfo = {\n-                    "vc_info": vc_info,\n-                    "metadata": metadata,\n-                }\n-\n-                # save metadata in shadow history\n-                logger.log(\n-                    logging.INFO,\n-                    "CMFEditions storage migration:"\n-                    " migrating version %s:" % (int(zvcVid) - 1),\n-                )\n-                history.save(shadowInfo)\n-\n-                app_metadata = metadata.get("app_metadata", {})\n-                if app_metadata:\n-                    logger.log(\n-                        logging.INFO,\n-                        "CMFEditions storage migration:" " application metadata:",\n-                    )\n-                    for item in app_metadata.items():\n-                        logger.log(\n-                            logging.INFO,\n-                            "CMFEditions storage migration: %s = %s" % item,\n-                        )\n-                sys_metadata = metadata.get("sys_metadata", {})\n-                if sys_metadata:\n-                    logger.log(\n-                        logging.INFO,\n-                        "CMFEditions storage migration:" " system metadata:",\n-                    )\n-                    for item in sys_metadata.items():\n-                        logger.log(\n-                            logging.INFO,\n-                            "CMFEditions storage migration: %s = %s" % item,\n-                        )\n-                nbrOfMigratedVersions += 1\n-\n-        # delete the old metadata\n-        del self._history_id_mapping\n-\n-        # log a summary\n-        totalTime = round(time.time() - startTime, 2)\n-        logger.log(\n-            logging.INFO,\n-            "CMFEditions storage migration:"\n-            "migrated %s histories and a total of %s versions in %.2f seconds"\n-            % (nbrOfMigratedHistories, nbrOfMigratedVersions, totalTime),\n-        )\n-\n-        # XXX have to add purge policy\n-\n-        return (nbrOfMigratedHistories, nbrOfMigratedVersions, totalTime)\n-\n     # -------------------------------------------------------------------\n     # ZMI methods\n     # -------------------------------------------------------------------\ndiff --git a/Products/CMFEditions/skins/CMFEditions/compare.css.dtml b/Products/CMFEditions/browser/compare.css\nsimilarity index 100%\nrename from Products/CMFEditions/skins/CMFEditions/compare.css.dtml\nrename to Products/CMFEditions/browser/compare.css\ndiff --git a/Products/CMFEditions/browser/configure.zcml b/Products/CMFEditions/browser/configure.zcml\nindex 7b15bd6..8dce428 100644\n--- a/Products/CMFEditions/browser/configure.zcml\n+++ b/Products/CMFEditions/browser/configure.zcml\n@@ -6,17 +6,10 @@\n         for="*"\n         name="history"\n         class=".diff.DiffView"\n+        template="templates/diff.pt"\n         permission="CMFEditions.AccessPreviousVersions"\n         />\n \n-    <browser:page\n-        for="*"\n-        name="candiff"\n-        class=".diff.CanDiff"\n-        attribute="can_diff"\n-        permission="zope2.View"\n-        />\n-\n     <browser:page\n         for="*"\n         name="get_macros"\n@@ -62,5 +55,49 @@\n         permission="zope2.View"\n         />\n \n+    <browser:page\n+        for="*"\n+        name="saveasnewversion"\n+        class=".policies.SaveAsNewVersion"\n+        permission="zope2.View"\n+        />\n+\n+    <browser:page\n+        for="*"\n+        name="revertversion"\n+        class=".policies.RevertVersion"\n+        permission="zope2.View"\n+        />\n+\n+    <!-- Note: this is also used by plone.app.iterate -->\n+    <browser:page\n+        for="*"\n+        name="diff_legend"\n+        template="templates/diff_legend.pt"\n+        permission="zope2.View"\n+        />\n+\n+    <!-- Note: this is roughly the same as @@historyview in plone.app.layout\n+         which is a small wrapper around @@contenthistory in plone.app.layout,\n+         which is a viewlet turned into a view.  Their version looks nicer.\n+         But our versions_history_form has a preview (which contenthistory points to)\n+         and a form to add a new version, if the policy is manual. -->\n+    <browser:page\n+        for="*"\n+        name="versions_history_form"\n+        class=".views.VersionsHistoryForm"\n+        template="templates/versions_history_form.pt"\n+        permission="zope2.View"\n+        />\n+\n+    <!-- We could make this a resource, but then we need to change plone.app.iterate as well.\n+         So for now make it a browser view. -->\n+    <browser:page\n+        for="*"\n+        name="compare.css"\n+        class=".views.CompareCSS"\n+        permission="zope2.View"\n+        />\n+\n </configure>\n \ndiff --git a/Products/CMFEditions/browser/diff.py b/Products/CMFEditions/browser/diff.py\nindex 8711c84..7143434 100644\n--- a/Products/CMFEditions/browser/diff.py\n+++ b/Products/CMFEditions/browser/diff.py\n@@ -2,12 +2,10 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFEditions import CMFEditionsMessageFactory as _\n from Products.Five.browser import BrowserView\n-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.i18n import translate\n \n \n class DiffView(BrowserView):\n-    template = ViewPageTemplateFile("diff.pt")\n \n     def __init__(self, *args):\n         super().__init__(*args)\n@@ -59,15 +57,4 @@ def __call__(self):\n             change for change in self.changeset.getDiffs() if not change.same\n         ]\n \n-        return self.template()\n-\n-\n-class CanDiff(BrowserView):\n-    def can_diff(self):\n-        """Return True if content is diffable"""\n-        context = self.context\n-        portal_diff = getToolByName(context, "portal_diff", None)\n-        return (\n-            portal_diff\n-            and len(portal_diff.getDiffForPortalType(context.portal_type)) > 0\n-        )\n+        return self.index()\ndiff --git a/Products/CMFEditions/browser/policies.py b/Products/CMFEditions/browser/policies.py\nnew file mode 100644\nindex 0000000..be4af48\n--- /dev/null\n+++ b/Products/CMFEditions/browser/policies.py\n@@ -0,0 +1,69 @@\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFEditions import CMFEditionsMessageFactory as _\n+from Products.CMFEditions.interfaces.IModifier import FileTooLargeToVersionError\n+from Products.Five import BrowserView\n+from Products.statusmessages.interfaces import IStatusMessage\n+from zope.i18n import translate\n+\n+\n+class SaveAsNewVersion(BrowserView):\n+    """Save as new version\n+\n+    Originally a Script (Python): saveasnewversion\n+    """\n+\n+    def __call__(self):\n+        pr = getToolByName(self.context, "portal_repository", None)\n+        if pr is not None:\n+            versioncomment = self.request.get("versioncomment")\n+            # Note: the save method explicitly checks a permission.\n+            pr.save(obj=self.context, comment=versioncomment)\n+        self.request.response.redirect("versions_history_form")\n+\n+\n+class RevertVersion(BrowserView):\n+    """Revert version\n+\n+    Originally a Script (Python): revertversion\n+    """\n+\n+    def __call__(self):\n+        version_id = self.request.get("version_id")\n+        pr = getToolByName(self.context, "portal_repository")\n+        pr.revert(self.context, version_id)\n+\n+        obj_type_view_url = self.context.getTypeInfo().getActionInfo("object/view")[\n+            "url"\n+        ]\n+        if obj_type_view_url != "/":\n+            view_url = "%s/%s" % (self.context.absolute_url(), obj_type_view_url)\n+        else:\n+            view_url = self.context.absolute_url()\n+\n+        if pr.supportsPolicy(self.context, "version_on_revert"):\n+            try:\n+                commit_msg = translate(\n+                    _(\n+                        u"Reverted to revision ${version}",\n+                        mapping={"version": version_id},\n+                    ),\n+                    context=self.request,\n+                )\n+                pr.save(obj=self.context, comment=commit_msg)\n+            except FileTooLargeToVersionError:\n+                IStatusMessage(self.request).addStatusMessage(\n+                    _(\n+                        "The most current revision of the file could not be "\n+                        "saved before reverting because the file is too large."\n+                    ),\n+                    "warning",\n+                )\n+\n+        title = self.context.title_or_id()\n+        msg = _(\n+            "${title} has been reverted to revision ${version}.",\n+            mapping={"title": title, "version": version_id},\n+        )\n+        IStatusMessage(self.request).addStatusMessage(msg, "info")\n+\n+        return self.request.response.redirect(view_url)\ndiff --git a/Products/CMFEditions/browser/diff.pt b/Products/CMFEditions/browser/templates/diff.pt\nsimilarity index 99%\nrename from Products/CMFEditions/browser/diff.pt\nrename to Products/CMFEditions/browser/templates/diff.pt\nindex 55f60f5..e91edb3 100644\n--- a/Products/CMFEditions/browser/diff.pt\n+++ b/Products/CMFEditions/browser/templates/diff.pt\n@@ -90,7 +90,7 @@\n               </noscript>\n             </form>\n \n-            <div metal:use-macro="here/diff_legend/macros/diff_legend" />\n+            <div metal:use-macro="context/@@diff_legend/macros/diff_legend" />\n \n             <p tal:condition="not:view/changes" i18n:translate="">\n               There are no changes between the selected revisions.\ndiff --git a/Products/CMFEditions/skins/CMFEditions/diff_legend.pt b/Products/CMFEditions/browser/templates/diff_legend.pt\nsimilarity index 100%\nrename from Products/CMFEditions/skins/CMFEditions/diff_legend.pt\nrename to Products/CMFEditions/browser/templates/diff_legend.pt\ndiff --git a/Products/CMFEditions/skins/CMFEditions/versions_history_form.pt b/Products/CMFEditions/browser/templates/versions_history_form.pt\nsimilarity index 98%\nrename from Products/CMFEditions/skins/CMFEditions/versions_history_form.pt\nrename to Products/CMFEditions/browser/templates/versions_history_form.pt\nindex ce6c079..e27f9eb 100644\n--- a/Products/CMFEditions/skins/CMFEditions/versions_history_form.pt\n+++ b/Products/CMFEditions/browser/templates/versions_history_form.pt\n@@ -11,7 +11,6 @@\n                    revisions python:history and history.getLength(countPurged=False) or 0;\n                    histrange python:range(revisions-1, -1, -1);\n                    here_url context/absolute_url;\n-                   view nocall:context/@@candiff;\n                    can_diff view/can_diff;\n                    checkPermission nocall:context/portal_membership/checkPermission;\n                    canRevertToPrevious python:checkPermission(\'CMFEditions: Revert to previous versions\', context);"\n@@ -32,7 +31,7 @@\n             summary="Content history"\n             cellpadding="0" cellspacing="0"\n             tal:condition="history"\n-            tal:define="current python:context.checkUpToDate(history)">\n+            tal:define="current python:view.checkUpToDate(history)">\n             <thead>\n                 <tr>\n                   <th><tal:title i18n:translate="listingheader_key"\n@@ -148,7 +147,7 @@\n                         <li tal:condition="python: (not current_version) and canRevertToPrevious">\n \n                             <form action="" method="post"\n-                                  tal:attributes="action string:$here_url/revertversion">\n+                                  tal:attributes="action string:$here_url/@@revertversion">\n                               <input type="hidden" name="version_id" value="" tal:attributes="value id" />\n                               <input class="standalone" type="submit"\n                                      i18n:attributes="value label_revert"\n@@ -164,7 +163,7 @@\n     <form action="#"\n         method="post"\n         tal:define="here_url context/absolute_url"\n-        tal:attributes="action string:${here_url}/saveasnewversion"\n+        tal:attributes="action string:${here_url}/@@saveasnewversion"\n         tal:condition="not: python:pr.supportsPolicy(context, \'at_edit_autoversion\')">\n \n         <fieldset>\ndiff --git a/Products/CMFEditions/browser/views.py b/Products/CMFEditions/browser/views.py\nindex 23501f5..88e4271 100644\n--- a/Products/CMFEditions/browser/views.py\n+++ b/Products/CMFEditions/browser/views.py\n@@ -9,6 +9,8 @@\n from Products.Five import BrowserView\n from Products.statusmessages.interfaces import IStatusMessage\n \n+import os\n+\n \n class UpdateVersionOnEditView(BrowserView):\n     def success(self):\n@@ -93,3 +95,64 @@ def __call__(self):\n class VersionView(BrowserView):\n     def human_readable_size(self):\n         return human_readable_size\n+\n+\n+class VersionsHistoryForm(BrowserView):\n+    def checkUpToDate(self, history):\n+        """Check if Up To Date.\n+\n+        This used to be a Script (Python): checkUpToDate\n+        """\n+        repo = getToolByName(self.context, "portal_repository", None)\n+\n+        isModified = None\n+        reverted_vid = None\n+        isReverted = None\n+\n+        version_id = getattr(self.context, "version_id", None)\n+        if repo is not None:\n+            if version_id is None:\n+                isModified = True\n+                isReverted = False\n+            else:\n+                isModified = not repo.isUpToDate(self.context, version_id)\n+                historyLength = len(history)\n+                reverted_vid = version_id\n+                if historyLength == version_id + 1:\n+                    isReverted = False\n+                else:\n+                    isReverted = True\n+                if isModified:\n+                    version_id = historyLength\n+\n+        return {\n+            "isModified": isModified,\n+            "version_id": version_id,\n+            "isReverted": isReverted,\n+            "reverted_vid": reverted_vid,\n+        }\n+\n+    def can_diff(self):\n+        """Return True if content is diffable"""\n+        context = self.context\n+        portal_diff = getToolByName(context, "portal_diff", None)\n+        return (\n+            portal_diff\n+            and len(portal_diff.getDiffForPortalType(context.portal_type)) > 0\n+        )\n+\n+\n+css_path = os.path.join(os.path.dirname(__file__), "compare.css")\n+with open(css_path) as myfile:\n+    COMPARE_CSS = myfile.read()\n+\n+\n+class CompareCSS(BrowserView):\n+    """Formerly skins/CMFEditions/compare.css.dtml\n+\n+    Should be a browser resource, but I don\'t want to change plone.app.iterate just now.\n+    That will further complicate an already complex PR.\n+    """\n+\n+    def __call__(self):\n+        return COMPARE_CSS\ndiff --git a/Products/CMFEditions/configure.zcml b/Products/CMFEditions/configure.zcml\nindex 005774b..f208b02 100644\n--- a/Products/CMFEditions/configure.zcml\n+++ b/Products/CMFEditions/configure.zcml\n@@ -1,14 +1,9 @@\n <configure xmlns="http://namespaces.zope.org/zope"\n-    xmlns:cmf="http://namespaces.zope.org/cmf"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:i18n="http://namespaces.zope.org/i18n"\n     i18n_domain="cmfeditions">\n \n   <include file="permissions.zcml"/>\n \n-  <cmf:registerDirectory name="skins" directory="skins" recursive="True" />\n-\n   <include package="Products.CMFUid" />\n   <!-- provides hooks for zope.copy -->\n   <include package="zope.location" />\ndiff --git a/Products/CMFEditions/profiles.zcml b/Products/CMFEditions/profiles.zcml\nindex 9704bf2..bafc103 100644\n--- a/Products/CMFEditions/profiles.zcml\n+++ b/Products/CMFEditions/profiles.zcml\n@@ -41,4 +41,13 @@\n            handler=".setuphandlers.removeBrokenModifiers" />\n     </genericsetup:upgradeSteps>\n \n+    <genericsetup:upgradeSteps\n+        source="10"\n+        destination="11"\n+        profile="Products.CMFEditions:CMFEditions">\n+        <genericsetup:upgradeStep\n+           title="Remove CMFEditions skin layer"\n+           handler=".setuphandlers.removeSkinLayer" />\n+    </genericsetup:upgradeSteps>\n+\n </configure>\ndiff --git a/Products/CMFEditions/profiles/default/actionicons.xml b/Products/CMFEditions/profiles/default/actionicons.xml\ndeleted file mode 100644\nindex 660620e..0000000\n--- a/Products/CMFEditions/profiles/default/actionicons.xml\n+++ /dev/null\n@@ -1,6 +0,0 @@\n-<?xml version="1.0"?>\n-<action-icons>\n- <action-icon category="controlpanel" action_id="versioning"\n-              title="Versioning" priority="0"\n-              icon_expr="versioning.gif"/>\n-</action-icons>\ndiff --git a/Products/CMFEditions/profiles/default/metadata.xml b/Products/CMFEditions/profiles/default/metadata.xml\nindex f0dc8db..295a9a2 100644\n--- a/Products/CMFEditions/profiles/default/metadata.xml\n+++ b/Products/CMFEditions/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n <?xml version="1.0"?>\n <metadata>\n-  <version>10</version>\n+  <version>11</version>\n </metadata>\ndiff --git a/Products/CMFEditions/profiles/default/skins.xml b/Products/CMFEditions/profiles/default/skins.xml\ndeleted file mode 100644\nindex eb38a80..0000000\n--- a/Products/CMFEditions/profiles/default/skins.xml\n+++ /dev/null\n@@ -1,8 +0,0 @@\n-<?xml version="1.0"?>\n-<object name="portal_skins">\n- <object name="CMFEditions" meta_type="Filesystem Directory View"\n-    directory="Products.CMFEditions:skins/CMFEditions"/>\n- <skin-path name="*">\n-  <layer name="CMFEditions" insert-after="custom"/>\n- </skin-path>\n-</object>\ndiff --git a/Products/CMFEditions/setuphandlers.py b/Products/CMFEditions/setuphandlers.py\nindex 82da986..4ff713c 100644\n--- a/Products/CMFEditions/setuphandlers.py\n+++ b/Products/CMFEditions/setuphandlers.py\n@@ -55,3 +55,21 @@ def removeBrokenModifiers(context):\n             continue\n         tool._delObject(modifier_id)\n         logger.info("Removed broken %s from portal_modifier.", modifier_id)\n+\n+\n+def removeSkinLayer(context):\n+    """Remove our skin layer."""\n+    skins = getToolByName(context, "portal_skins")\n+    # Remove directory views for directories missing on the filesystem\n+    our_skin = "CMFEditions"\n+    if our_skin in skins.keys():\n+        skins._delObject(our_skin)\n+        logger.info("Removed %s from skin layers.", our_skin)\n+\n+    for layer, paths in skins.selections.items():\n+        paths = paths.split(",")\n+        if our_skin not in paths:\n+            continue\n+        paths.remove(our_skin)\n+        skins.selections[layer] = ",".join(paths)\n+        logger.info("Removed %s from skin selection %s.", our_skin, layer)\ndiff --git a/Products/CMFEditions/skins/CMFEditions/checkUpToDate.py b/Products/CMFEditions/skins/CMFEditions/checkUpToDate.py\ndeleted file mode 100644\nindex d21a03f..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/checkUpToDate.py\n+++ /dev/null\n@@ -1,40 +0,0 @@\n-## Script (Python) "checkUpToDate"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=history\n-##title=Check if Up To Date\n-##\n-from Products.CMFCore.utils import getToolByName\n-\n-\n-repo = getToolByName(context, "portal_repository", None)\n-\n-isModified = None\n-reverted_vid = None\n-isReverted = None\n-\n-version_id = getattr(context, "version_id", None)\n-if repo is not None:\n-    if version_id is None:\n-        isModified = True\n-        isReverted = False\n-    else:\n-        isModified = not repo.isUpToDate(context, version_id)\n-        historyLength = len(history)\n-        reverted_vid = version_id\n-        if historyLength == version_id+1:\n-            isReverted = False\n-        else:\n-            isReverted = True\n-        if isModified:\n-            version_id = historyLength\n-\n-return {\n-    "isModified": isModified,\n-    "version_id": version_id,\n-    "isReverted": isReverted,\n-    "reverted_vid": reverted_vid,\n-}\ndiff --git a/Products/CMFEditions/skins/CMFEditions/createTestHierarchy.py b/Products/CMFEditions/skins/CMFEditions/createTestHierarchy.py\ndeleted file mode 100644\nindex a277e1b..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/createTestHierarchy.py\n+++ /dev/null\n@@ -1,17 +0,0 @@\n-## Script (Python) "createTestHierarchy"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=\n-##title=Create a test hierarchy for migration tests\n-##\n-from Products.CMFCore.utils import getToolByName\n-\n-\n-repo = getToolByName(context, "portal_repository", None)\n-\n-if repo is not None:\n-    repo.createTestHierarchy(context)\n-    return "finished creating test hierarchy"\ndiff --git a/Products/CMFEditions/skins/CMFEditions/get_cmfeditions_ftests.py b/Products/CMFEditions/skins/CMFEditions/get_cmfeditions_ftests.py\ndeleted file mode 100644\nindex 3221bac..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/get_cmfeditions_ftests.py\n+++ /dev/null\n@@ -1,30 +0,0 @@\n-## Script (Python) "get_cmfeditions_ftests"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=\n-##title=get cmfeditions ftests\n-##\n-selenium = context.portal_selenium\n-suite = selenium.getSuite()\n-target_language=\'en\'\n-suite.setTargetLanguage(target_language)\n-\n-selenium.addUser(id = \'sampleadmin\',fullname=\'Sample Admin\',roles=[\'Member\', \'Manager\',])\n-\n-# 1\n-test_logout = suite.TestLogout()\n-test_admin_login  = suite.TestLoginPortlet(\'admin\')\n-\n-suite.addTests("CMFEditions",\n-          \'Login as Sample Admin\',\n-          test_logout,\n-          test_admin_login,\n-          "check versions tab",\n-          suite.open(\'/index_html\'),\n-          suite.verifyTextPresent("versions"),\n-         )\n-\n-return suite\ndiff --git a/Products/CMFEditions/skins/CMFEditions/migrateStorage.py b/Products/CMFEditions/skins/CMFEditions/migrateStorage.py\ndeleted file mode 100644\nindex 1822db5..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/migrateStorage.py\n+++ /dev/null\n@@ -1,19 +0,0 @@\n-## Script (Python) "migrateStorage"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=\n-##title=Migrate the Storage\n-##\n-from Products.CMFCore.utils import getToolByName\n-\n-\n-storage = getToolByName(context, "portal_historiesstorage")\n-result = storage.migrateStorage()\n-if result is None:\n-    return "no storage migration necessary: nothing done"\n-\n-return "migrated %s histories and a total of %s versions in in %.2f seconds" \\\n-       % result\ndiff --git a/Products/CMFEditions/skins/CMFEditions/revertversion.py b/Products/CMFEditions/skins/CMFEditions/revertversion.py\ndeleted file mode 100644\nindex e01b0cc..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/revertversion.py\n+++ /dev/null\n@@ -1,45 +0,0 @@\n-## Script (Python) "revertversion"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=version_id\n-##title=Revert version\n-##\n-from Products.CMFEditions import CMFEditionsMessageFactory as _\n-from Products.CMFEditions.interfaces.IModifier import FileTooLargeToVersionError\n-from Products.CMFPlone.utils import safe_unicode\n-\n-\n-RESPONSE = context.REQUEST.RESPONSE\n-putils = container.plone_utils\n-pr = container.portal_repository\n-pr.revert(context, version_id)\n-\n-obj_type_view_url = context.getTypeInfo().getActionInfo(\'object/view\')[\'url\']\n-if obj_type_view_url != \'/\':\n-    view_url = \'%s/%s\' % (context.absolute_url(), obj_type_view_url)\n-else:\n-    view_url = context.absolute_url()\n-\n-title = safe_unicode(context.title_or_id())\n-msg = _(u\'${title} has been reverted to revision ${version}.\',\n-        mapping={\'title\': title,\n-                 \'version\': version_id})\n-\n-if pr.supportsPolicy(context, \'version_on_revert\'):\n-    try:\n-        commit_msg = context.translate(_(u\'Reverted to revision ${version}\',\n-                                       mapping={\'version\': version_id}))\n-        pr.save(obj=context, comment=commit_msg)\n-    except FileTooLargeToVersionError:\n-        putils.addPortalMessage(\n-  _(u\'The most current revision of the file could not be saved before reverting \'\n-    \'because the file is too large.\'),\n-       type=\'warn\'\n-       )\n-\n-context.plone_utils.addPortalMessage(msg)\n-\n-return RESPONSE.redirect(view_url)\ndiff --git a/Products/CMFEditions/skins/CMFEditions/saveasnewversion.py b/Products/CMFEditions/skins/CMFEditions/saveasnewversion.py\ndeleted file mode 100644\nindex 17cdb71..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/saveasnewversion.py\n+++ /dev/null\n@@ -1,17 +0,0 @@\n-## Script (Python) "saveasnewversion"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=versioncomment\n-##title=Save as new version\n-##\n-\n-from Products.CMFCore.utils import getToolByName\n-\n-\n-pr = getToolByName(context, \'portal_repository\', None)\n-if pr is not None:\n-    pr.save(obj=context, comment=versioncomment)\n-    context.REQUEST.RESPONSE.redirect(\'versions_history_form\')\ndiff --git a/Products/CMFEditions/skins/CMFEditions/version_diff.pt b/Products/CMFEditions/skins/CMFEditions/version_diff.pt\ndeleted file mode 100644\nindex e8b9c0f..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/version_diff.pt\n+++ /dev/null\n@@ -1,9 +0,0 @@\n-<tal:comment replace="nothing">\n-  This template is deprecated. Use the @@history view instead.\n-</tal:comment>\n-<tal:block define="one python:request.set(\'one\', request.get(\'version_id1\'));\n-                   two python:request.set(\'two\', request.get(\'version_id2\'));">\n-\n-  <tal:block replace="structure context/@@history" />\n-\n-</tal:block>\ndiff --git a/Products/CMFEditions/skins/CMFEditions/versioning.gif b/Products/CMFEditions/skins/CMFEditions/versioning.gif\ndeleted file mode 100644\nindex 8aa90b5..0000000\nBinary files a/Products/CMFEditions/skins/CMFEditions/versioning.gif and /dev/null differ\ndiff --git a/Products/CMFEditions/skins/CMFEditions/versioning_config.py b/Products/CMFEditions/skins/CMFEditions/versioning_config.py\ndeleted file mode 100644\nindex aab0743..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/versioning_config.py\n+++ /dev/null\n@@ -1,21 +0,0 @@\n-## Script (Python) "versioning_config"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=policy_map\n-##title=versioning config\n-##\n-\n-enabled_types = []\n-type_policies = {}\n-for p_type in policy_map:\n-    if p_type.get(\'enabled\', None):\n-        enabled_types.append(p_type[\'portal_type\'])\n-    if p_type.get(\'policies\', None):\n-        type_policies[p_type[\'portal_type\']] = p_type[\'policies\']\n-\n-context.portal_repository.setVersionableContentTypes(enabled_types)\n-context.portal_repository.manage_setTypePolicies(type_policies)\n-context.REQUEST.RESPONSE.redirect(context.absolute_url() + \'/versioning_config_form\')\ndiff --git a/Products/CMFEditions/skins/CMFEditions/versioning_config_form.pt b/Products/CMFEditions/skins/CMFEditions/versioning_config_form.pt\ndeleted file mode 100644\nindex 29a2cb3..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/versioning_config_form.pt\n+++ /dev/null\n@@ -1,135 +0,0 @@\n-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"\n-"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\n-\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US"\n-    metal:define-macro="master"\n-    i18n:domain="cmfeditions">\n-\n-<metal:master use-macro="here/prefs_main_template/macros/master">\n-\n-    <metal:block metal:fill-slot="top_slot" define-slot="top_slot"\n-        tal:define="dummy python:request.set(\'disable_border\',1)" />\n-\n-    <body>\n-\n-    <div i18n:domain="cmfeditions"\n-         metal:fill-slot="prefs_configlet_main"\n-         metal:define-slot="prefs_configlet_main"\n-         tal:define="errors python:request.get(\'errors\', {});">\n-\n-    <div class="configlet">\n-\n-    <div class="documentEditable"\n-         tal:define="type_list here/portal_types/listContentTypes;\n-                     friendly_list context/plone_utils/getUserFriendlyTypes;\n-                     show_all request/show_all|nothing">\n-\n-        <div metal:define-slot="multisite_content">\n-\n-        <h1 i18n:translate="label_title_vers_config">Versioning Settings</h1>\n-\n-        <p class="documentDescription"\n-           i18n:translate="description_version_settings">\n-           You can have different settings for each content type. Content can\n-           be automatically versioned, and you can also opt to create a version\n-           when you revert a revision.\n-        </p>\n-\n-        <form action="."\n-            name="configure_multisite"\n-            method="post">\n-\n-        <fieldset>\n-        <legend i18n:translate="label_versionable_content_types">\n-            Versionable content types\n-        </legend>\n-\n-        <div class="field">\n-            <a href="" i18n:translate="label_versioning_config_show_all"\n-               tal:attributes="href string:${request/ACTUAL_URL}?show_all=True"\n-               tal:condition="python:friendly_list and not show_all">\n-               Show all types</a>\n-            <a href="" i18n:translate="label_versioning_config_show_friendly"\n-               tal:attributes="href string:${request/ACTUAL_URL}"\n-               tal:condition="python:friendly_list and show_all">\n-               Show only searchable types</a>\n-\n-            <table class="listing"\n-                   summary="Versionable content types"\n-                   i18n:attributes="summary label_versionable_content_types;"\n-                   tal:define="pr nocall:here/portal_repository;\n-                            versionablelist pr/getVersionableContentTypes;\n-                            all_policies pr/getPolicyMap;\n-                            policy_defs pr/listPolicies;\n-                            type_list python:list((show_all and type_list) or (friendly_list or type_list));">\n-              <tr>\n-                <th i18n:translate="label_item_type">Item Type</th>\n-                <th i18n:translate="label_enable_versioning">Versioning Enabled?</th>\n-                <th i18n:translate="label_versioning_policies">Policies</th>\n-              </tr>\n-              <tal:block tal:repeat="type_id type_list">\n-              <tr tal:define="typeinfo python:here.portal_types.getTypeInfo(type_id);\n-                              oddrow repeat/type_id/odd"\n-                  tal:attributes="class python:test(oddrow, \'even\', \'odd\')">\n-                <td>\n-                <span i18n:domain="plone" i18n:translate="" tal:content="typeinfo/Title">Type Title</span>\n-                <input type="hidden"\n-                        name="policy_map.portal_type:records"\n-                        value=""\n-                        tal:attributes="value type_id" />\n-                </td>\n-                <td class="listingCheckbox">\n-                    <input type="checkbox"\n-                        name="policy_map.enabled:boolean:records"\n-                        class="noborder"\n-                        checked="checked"\n-                        tal:attributes="value python:True;\n-                                        checked python:type_id in versionablelist;"/>\n-                </td>\n-\n-                <!-- These should really be checkboxes, not multiselect lists ~limi -->\n-                <td>\n-                  <select multiple="multiple"\n-                          size="3"\n-                          name="policy_map.policies:list:records">\n-                    <tal:block define="enabled_policies python:all_policies.get(type_id, []);"\n-                               repeat="policy policy_defs">\n-                        <option i18n:translate=""\n-                                value="policy_id"\n-                                tal:content="policy/Title"\n-                                tal:attributes="value policy/getId;\n-                                                selected python:policy.getId() in enabled_policies;" />\n-                    </tal:block>\n-                  </select>\n-                </td>\n-              </tr>\n-              </tal:block>\n-            </table>\n-        </div>\n-\n-        <div class="formControls">\n-            <input\n-                class="context"\n-                type="submit"\n-                i18n:domain="plone"\n-                i18n:attributes="value label_save"\n-                name="versioning_config:method"\n-                value="Save" />\n-        </div>\n-\n-        </fieldset>\n-\n-\n-        </form>\n-\n-        </div>\n-\n-    </div>\n-\n-    </div>\n-\n-    </div>\n-\n-    </body>\n-</metal:master>\n-</html>\ndiff --git a/Products/CMFEditions/skins/CMFEditions/versions_history.pt b/Products/CMFEditions/skins/CMFEditions/versions_history.pt\ndeleted file mode 100644\nindex fbe3281..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/versions_history.pt\n+++ /dev/null\n@@ -1,55 +0,0 @@\n-<span class="versionsHistory"\n-      metal:define-macro="versions_history"\n-      i18n:domain="cmfeditions">\n-<tal:history      tal:define="pr        nocall:here/portal_repository;\n-                              history   python:pr.getHistoryMetadata(context);\n-                              revisions python:history.getLength(countPurged=False);\n-                              histrange python:range(revisions-1, -1, -1)"\n-                  tal:condition="python: history and pr.isVersionable(context)">\n-      <dl id="versions" class="collapsible inline collapsedOnLoad">\n-        <dt class="collapsibleHeader" i18n:translate="label_versions">Recent Versions</dt>\n-        <dd class="collapsibleContent">\n-\n-        <table class="listing nosort" summary="Versions History"\n-               i18n:attributes="summary summary_versions_history;"\n-               tal:condition="history">\n-\n-          <tr>\n-            <th i18n:translate="listingheader_key">Revision</th>\n-            <th i18n:translate="listingheader_performed_by">Performed by</th>\n-            <th i18n:translate="listingheader_date_and_time">Date and Time</th>\n-            <th i18n:translate="listingheader_comment">Comment</th>\n-          </tr>\n-\n-          <metal:block tal:repeat="vdatai histrange">\n-            <tr tal:define="vdatafull  python:history.retrieve(vdatai, countPurged=False);\n-                            vdata      vdatafull/metadata;\n-                            odd        repeat/vdatai/odd;\n-                            id         vdatai"\n-                tal:attributes="class python:test(odd, \'even\', \'odd\')">\n-              <td>\n-                <span tal:content="id">1</span>\n-                <a href="#"\n-                   class="version-table-version"\n-                   tal:define="here_url context/absolute_url"\n-                   tal:attributes="href string:$here_url/versions_history_form?version_id=${id}"\n-                   i18n:translate="label_show_version">\n-                  show revisions</a>\n-              </td>\n-              <td>\n-                <span tal:content="vdata/sys_metadata/principal">francesco</span>\n-              </td>\n-              <td>\n-                <span tal:content="python:here.toLocalizedTime(vdata[\'sys_metadata\'][\'timestamp\'],long_format=1)">2004/10/21 03:15 PM</span>\n-              </td>\n-              <td><span tal:content="vdata/sys_metadata/comment">Draft version ready for comments from the group.</span>\n-              </td>\n-            </tr>\n-          </metal:block>\n-        </table>\n-\n-        </dd>\n-      </dl>\n-    </tal:history>\n-\n-</span>\ndiff --git a/Products/CMFEditions/skins/CMFEditions/versions_history_form.pt.metadata b/Products/CMFEditions/skins/CMFEditions/versions_history_form.pt.metadata\ndeleted file mode 100644\nindex daa4e53..0000000\n--- a/Products/CMFEditions/skins/CMFEditions/versions_history_form.pt.metadata\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-[default]\n-title=Versions history\n-\ndiff --git a/news/71.bugfix.1 b/news/71.bugfix.1\nnew file mode 100644\nindex 0000000..e6f0651\n--- /dev/null\n+++ b/news/71.bugfix.1\n@@ -0,0 +1,3 @@\n+Removed version_diff.pt.\n+This template is deprecated. Use the @@history view instead.\n+[maurits]\ndiff --git a/news/71.feature.1 b/news/71.feature.1\nnew file mode 100644\nindex 0000000..32d0a92\n--- /dev/null\n+++ b/news/71.feature.1\n@@ -0,0 +1,3 @@\n+Moved various items from from skin to a browser view:\n+``saveasnewversion``, ``revertversion``, ``diff_legend``, ``versions_history_form``, ``compare.css``.\n+[maurits]\ndiff --git a/news/71.feature.2 b/news/71.feature.2\nnew file mode 100644\nindex 0000000..3790332\n--- /dev/null\n+++ b/news/71.feature.2\n@@ -0,0 +1,3 @@\n+Merged skin script ``checkUpToDate`` into ``versions_history_form`` view.\n+Merged ``can_diff`` view into ``versions_history_form`` view.\n+[maurits]\ndiff --git a/news/71.feature.3 b/news/71.feature.3\nnew file mode 100644\nindex 0000000..96f61bd\n--- /dev/null\n+++ b/news/71.feature.3\n@@ -0,0 +1,2 @@\n+Remove now empty CMFEditions skin layer in an upgrade step.\n+[maurits]\ndiff --git a/news/72.breaking.1 b/news/72.breaking.1\nnew file mode 100644\nindex 0000000..04e5576\n--- /dev/null\n+++ b/news/72.breaking.1\n@@ -0,0 +1,3 @@\n+Removed versioning_config.py and versioning_config_form.pt from skin.\n+Instead, you can change the versioning config in the ``@@content-controlpanel``.\n+[maurits]\ndiff --git a/news/72.breaking.2 b/news/72.breaking.2\nnew file mode 100644\nindex 0000000..5b09f0a\n--- /dev/null\n+++ b/news/72.breaking.2\n@@ -0,0 +1,4 @@\n+Removed migration code from version 1.0alpha3 to 1.0beta1 from 2006.\n+Removed Storage Migration Support.\n+This had code for creating a test hierarchy for migration tests.\n+[maurits]\ndiff --git a/news/72.breaking.3 b/news/72.breaking.3\nnew file mode 100644\nindex 0000000..7578490\n--- /dev/null\n+++ b/news/72.breaking.3\n@@ -0,0 +1,3 @@\n+Removed unused versions_history.pt which defines a versions_history macro.\n+We do still have versions_history_form.\n+[maurits]\n'

