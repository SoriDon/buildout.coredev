Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-05-04T20:51:07+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.layout/commit/757e1631da460617b83e4f4212b623ca8b8538aa

isort

Files changed:
M plone/app/layout/dashboard/dashboard.py
M plone/app/layout/dashboard/user_actions.py
M plone/app/layout/favicon_handler.py
M plone/app/layout/links/tests/test_favicon_viewlet.py
M plone/app/layout/links/viewlets.py
M plone/app/layout/viewlets/common.py
M setup.cfg

b'diff --git a/plone/app/layout/dashboard/dashboard.py b/plone/app/layout/dashboard/dashboard.py\nindex d305b5a6..6ada84e7 100644\n--- a/plone/app/layout/dashboard/dashboard.py\n+++ b/plone/app/layout/dashboard/dashboard.py\n@@ -1,3 +1,4 @@\n from zope.deprecation import moved\n \n+\n moved("plone.app.portlets.dashboard.dashboard", "Version 5.0")\ndiff --git a/plone/app/layout/dashboard/user_actions.py b/plone/app/layout/dashboard/user_actions.py\nindex 8e0ce46e..0edf7112 100644\n--- a/plone/app/layout/dashboard/user_actions.py\n+++ b/plone/app/layout/dashboard/user_actions.py\n@@ -1,3 +1,4 @@\n from zope.deprecation import moved\n \n+\n moved("plone.app.portlets.dashboard.user_actions", "Version 5.0")\ndiff --git a/plone/app/layout/favicon_handler.py b/plone/app/layout/favicon_handler.py\nindex 5af3ca0c..d451381c 100644\n--- a/plone/app/layout/favicon_handler.py\n+++ b/plone/app/layout/favicon_handler.py\n@@ -1,11 +1,12 @@\n-from zope.component import adapter\n-from plone.registry.interfaces import IRecordModifiedEvent\n-from Products.CMFPlone.interfaces import ISiteSchema\n from plone.formwidget.namedfile.converter import b64decode_file\n-import mimetypes\n-from zope.component import getUtility\n+from plone.registry.interfaces import IRecordModifiedEvent\n from plone.registry.interfaces import IRegistry\n from plone.registry.recordsproxy import RecordsProxy\n+from Products.CMFPlone.interfaces import ISiteSchema\n+from zope.component import adapter\n+from zope.component import getUtility\n+\n+import mimetypes\n \n \n @adapter(ISiteSchema, IRecordModifiedEvent)\ndiff --git a/plone/app/layout/links/tests/test_favicon_viewlet.py b/plone/app/layout/links/tests/test_favicon_viewlet.py\nindex 9cf85a16..21b78211 100644\n--- a/plone/app/layout/links/tests/test_favicon_viewlet.py\n+++ b/plone/app/layout/links/tests/test_favicon_viewlet.py\n@@ -1,17 +1,16 @@\n # -*- coding: utf-8 -*-\n-from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n+from plone.app.layout.links.viewlets import FaviconViewlet\n from plone.app.layout.testing import FUNCTIONAL_TESTING\n+from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.formwidget.namedfile.converter import b64encode_file\n+from plone.namedfile.file import NamedBlobFile\n from plone.registry.interfaces import IRegistry\n+from Products.CMFPlone.interfaces import ISecuritySchema\n+from Products.CMFPlone.interfaces import ISiteSchema\n from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings\n from zope.component import getUtility\n-from plone.namedfile.file import NamedBlobFile\n-from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISecuritySchema, ISiteSchema\n-from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n-from plone.app.layout.links.viewlets import FaviconViewlet\n-from plone.formwidget.namedfile.converter import b64encode_file\n \n \n class TestFaviconViewletView(ViewletsTestCase, FaviconViewlet):\ndiff --git a/plone/app/layout/links/viewlets.py b/plone/app/layout/links/viewlets.py\nindex 8096e3df..71d8d56d 100644\n--- a/plone/app/layout/links/viewlets.py\n+++ b/plone/app/layout/links/viewlets.py\n@@ -2,21 +2,23 @@\n from Acquisition import aq_inner\n from plone.app.layout.viewlets import ViewletBase\n from plone.app.uuid.utils import uuidToObject\n+from plone.formwidget.namedfile.converter import b64decode_file\n from plone.memoize import ram\n from plone.memoize import view\n from plone.memoize.compress import xhtml_compress\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISecuritySchema, ISiteSchema\n+from Products.CMFPlone.interfaces import ISecuritySchema\n+from Products.CMFPlone.interfaces import ISiteSchema\n from Products.CMFPlone.interfaces.syndication import IFeedSettings\n from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings\n from Products.CMFPlone.utils import safe_bytes\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from typing import NoReturn\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.schema.interfaces import IVocabularyFactory\n-from plone.formwidget.namedfile.converter import b64decode_file\n+\n import mimetypes\n-from typing import NoReturn\n \n \n def get_language(context, request):\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex 79fb687e..f7816f0c 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -4,6 +4,7 @@\n from Acquisition import aq_inner\n from collections import defaultdict\n from functools import total_ordering\n+from html import escape\n from plone.app.layout.globals.interfaces import IViewView\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.app.layout.navigation.root import getNavigationRootObject\n@@ -30,11 +31,11 @@\n from zope.interface import alsoProvides\n from zope.interface import implementer\n from zope.viewlet.interfaces import IViewlet\n-from html import escape\n \n import json\n import zope.deferredimport\n \n+\n zope.deferredimport.initialize()\n zope.deferredimport.deprecated(\n     "Import from plone.app.portlets.browser.viewlets instead",\ndiff --git a/setup.cfg b/setup.cfg\nindex 57272aa4..469f1a50 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -4,14 +4,14 @@ ignore =\n     jenkins.cfg\n \n [isort]\n-force_alphabetical_sort=True\n-force_single_line=True\n-lines_after_imports=2\n-line_length=200\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n \n \n [bdist_wheel]\n-universal = 1\n+universal = 0\n \n [flake8]\n # black compatible flake8 rules:\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-05-04T20:52:23+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.layout/commit/aa539fcb6a8044fb257c562447c9679a764f2371

git ls-files | grep '\.py' | xargs pyupgrade --py37-plus

Files changed:
M plone/__init__.py
M plone/app/layout/__init__.py
M plone/app/layout/analytics/__init__.py
M plone/app/layout/analytics/tests/__init__.py
M plone/app/layout/analytics/tests/test_doctests.py
M plone/app/layout/analytics/view.py
M plone/app/layout/globals/__init__.py
M plone/app/layout/globals/context.py
M plone/app/layout/globals/interface.py
M plone/app/layout/globals/interfaces.py
M plone/app/layout/globals/layout.py
M plone/app/layout/globals/patterns_settings.py
M plone/app/layout/globals/portal.py
M plone/app/layout/globals/tests/__init__.py
M plone/app/layout/globals/tests/test_context.py
M plone/app/layout/globals/tests/test_interface.py
M plone/app/layout/globals/tests/test_layout.py
M plone/app/layout/globals/tests/test_portal.py
M plone/app/layout/globals/tests/test_tools.py
M plone/app/layout/globals/tools.py
M plone/app/layout/icons/__init__.py
M plone/app/layout/icons/icons.py
M plone/app/layout/icons/interfaces.py
M plone/app/layout/links/__init__.py
M plone/app/layout/links/tests/__init__.py
M plone/app/layout/links/tests/test_canonical_url.py
M plone/app/layout/links/tests/test_favicon_viewlet.py
M plone/app/layout/links/tests/test_rssviewlet.py
M plone/app/layout/links/viewlets.py
M plone/app/layout/navigation/__init__.py
M plone/app/layout/navigation/defaultpage.py
M plone/app/layout/navigation/interfaces.py
M plone/app/layout/navigation/navtree.py
M plone/app/layout/navigation/root.py
M plone/app/layout/navigation/tests/test_root.py
M plone/app/layout/nextprevious/__init__.py
M plone/app/layout/nextprevious/interfaces.py
M plone/app/layout/nextprevious/view.py
M plone/app/layout/sitemap/__init__.py
M plone/app/layout/sitemap/sitemap.py
M plone/app/layout/sitemap/tests/__init__.py
M plone/app/layout/sitemap/tests/test_sitemap.py
M plone/app/layout/testing.py
M plone/app/layout/viewlets/__init__.py
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/content.py
M plone/app/layout/viewlets/globalstatusmessage.py
M plone/app/layout/viewlets/httpheaders.py
M plone/app/layout/viewlets/interfaces.py
M plone/app/layout/viewlets/social.py
M plone/app/layout/viewlets/tests/base.py
M plone/app/layout/viewlets/tests/test_common.py
M plone/app/layout/viewlets/tests/test_content.py
M plone/app/layout/viewlets/tests/test_functional.py
M plone/app/layout/viewlets/tests/test_history.py
M plone/app/layout/viewlets/tests/test_social.py
M plone/app/layout/viewlets/toolbar.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 03d08ffd..5284146e 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/layout/__init__.py b/plone/app/layout/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/layout/__init__.py\n+++ b/plone/app/layout/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/layout/analytics/__init__.py b/plone/app/layout/analytics/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/layout/analytics/__init__.py\n+++ b/plone/app/layout/analytics/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/layout/analytics/tests/__init__.py b/plone/app/layout/analytics/tests/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/layout/analytics/tests/__init__.py\n+++ b/plone/app/layout/analytics/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/layout/analytics/tests/test_doctests.py b/plone/app/layout/analytics/tests/test_doctests.py\nindex 2ab3cd61..ab2b2e05 100644\n--- a/plone/app/layout/analytics/tests/test_doctests.py\n+++ b/plone/app/layout/analytics/tests/test_doctests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.testing import FUNCTIONAL_TESTING\n from plone.testing import layered\n \ndiff --git a/plone/app/layout/analytics/view.py b/plone/app/layout/analytics/view.py\nindex 4a41531b..7a85b69f 100644\n--- a/plone/app/layout/analytics/view.py\n+++ b/plone/app/layout/analytics/view.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import ISiteSchema\n from Products.Five.browser import BrowserView\n@@ -14,7 +13,7 @@ class AnalyticsViewlet(BrowserView):\n     render = ViewPageTemplateFile("view.pt")\n \n     def __init__(self, context, request, view, manager):\n-        super(AnalyticsViewlet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.__parent__ = view\n         self.view = view\n         self.manager = manager\n@@ -24,9 +23,9 @@ def webstats_js(self):\n         registry = getUtility(IRegistry)\n         site_settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         try:\n-            return site_settings.webstats_js or u""\n+            return site_settings.webstats_js or ""\n         except AttributeError:\n-            return u""\n+            return ""\n \n     def update(self):\n         """The viewlet manager _updateViewlets requires this method"""\ndiff --git a/plone/app/layout/globals/__init__.py b/plone/app/layout/globals/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/layout/globals/__init__.py\n+++ b/plone/app/layout/globals/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/layout/globals/context.py b/plone/app/layout/globals/context.py\nindex 3de9b9bd..b04d58b4 100644\n--- a/plone/app/layout/globals/context.py\n+++ b/plone/app/layout/globals/context.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .interfaces import IContextState\n from Acquisition import aq_base\n from Acquisition import aq_inner\ndiff --git a/plone/app/layout/globals/interface.py b/plone/app/layout/globals/interface.py\nindex d2381353..ccd5ce92 100644\n--- a/plone/app/layout/globals/interface.py\n+++ b/plone/app/layout/globals/interface.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .interfaces import IInterfaceInformation\n from Acquisition import aq_base\n from plone.memoize.view import memoize\n@@ -18,7 +17,7 @@ def resolveInterface(dotted_name):\n \n \n def getDottedName(iface):\n-    return "%s.%s" % (iface.__module__, iface.__name__)\n+    return f"{iface.__module__}.{iface.__name__}"\n \n \n def _trim_doc_string(text):\ndiff --git a/plone/app/layout/globals/interfaces.py b/plone/app/layout/globals/interfaces.py\nindex 61413a7f..f521bc6c 100644\n--- a/plone/app/layout/globals/interfaces.py\n+++ b/plone/app/layout/globals/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.deprecation import deprecated\n from zope.interface import Interface\n \ndiff --git a/plone/app/layout/globals/layout.py b/plone/app/layout/globals/layout.py\nindex c85f66ca..efcc5c52 100644\n--- a/plone/app/layout/globals/layout.py\n+++ b/plone/app/layout/globals/layout.py\n@@ -199,7 +199,7 @@ def bodyClass(self, template, view):\n         - pat-markspeciallinks: mark special links is set\n         """\n         portal_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_portal_state"\n+            (self.context, self.request), name="plone_portal_state"\n         )\n         normalizer = queryUtility(IIDNormalizer)\n         registry = getUtility(IRegistry)\n@@ -289,7 +289,7 @@ def bodyClass(self, template, view):\n                 extra_classes = body_class_adapter.get_classes(template, view) or []\n             except TypeError:  # This adapter is implemented without arguments\n                 extra_classes = body_class_adapter.get_classes() or []\n-            if isinstance(extra_classes, six.string_types):\n+            if isinstance(extra_classes, str):\n                 extra_classes = extra_classes.split(" ")\n             body_classes.update(extra_classes)\n \n@@ -298,7 +298,7 @@ def bodyClass(self, template, view):\n \n @adapter(Interface)\n @implementer(IBodyClassAdapter)\n-class DefaultBodyClasses(object):\n+class DefaultBodyClasses:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\ndiff --git a/plone/app/layout/globals/patterns_settings.py b/plone/app/layout/globals/patterns_settings.py\nindex 88ee8279..e77d85d8 100644\n--- a/plone/app/layout/globals/patterns_settings.py\n+++ b/plone/app/layout/globals/patterns_settings.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.deferredimport import deprecated\n \n \ndiff --git a/plone/app/layout/globals/portal.py b/plone/app/layout/globals/portal.py\nindex 1939cdcd..b98e63ed 100644\n--- a/plone/app/layout/globals/portal.py\n+++ b/plone/app/layout/globals/portal.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .interfaces import IPortalState\n from Acquisition import aq_inner\n from plone.app.layout.navigation.root import getNavigationRoot\ndiff --git a/plone/app/layout/globals/tests/__init__.py b/plone/app/layout/globals/tests/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/layout/globals/tests/__init__.py\n+++ b/plone/app/layout/globals/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/layout/globals/tests/test_context.py b/plone/app/layout/globals/tests/test_context.py\nindex 08edbf4c..f9a9886c 100644\n--- a/plone/app/layout/globals/tests/test_context.py\n+++ b/plone/app/layout/globals/tests/test_context.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.layout.testing import INTEGRATION_TESTING\n from plone.app.testing import setRoles\n@@ -104,7 +103,7 @@ def test_view_template_id_nonbrowserdefault_restricted(self):\n         fti = self.portal.portal_types.TempFolder\n         view_action = fti.getActionObject("object/view")\n         view_perms = view_action.getPermissions()\n-        view_action.edit(permissions=(u"Modify Portal Content",))\n+        view_action.edit(permissions=("Modify Portal Content",))\n \n         tf = _createObjectByType("TempFolder", self.folder, "tf")\n         tf.manage_addLocalRoles(TEST_USER_ID, ("Manager",))\ndiff --git a/plone/app/layout/globals/tests/test_interface.py b/plone/app/layout/globals/tests/test_interface.py\nindex 102d9d5d..b67151ad 100644\n--- a/plone/app/layout/globals/tests/test_interface.py\n+++ b/plone/app/layout/globals/tests/test_interface.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Attribute\n from zope.interface import Interface\n \n@@ -30,7 +29,7 @@ class ITwo(Interface):\n     pass\n \n \n-class NotAnInterface(object):\n+class NotAnInterface:\n     pass\n \n \ndiff --git a/plone/app/layout/globals/tests/test_layout.py b/plone/app/layout/globals/tests/test_layout.py\nindex dd1ad34f..efcd5db7 100644\n--- a/plone/app/layout/globals/tests/test_layout.py\n+++ b/plone/app/layout/globals/tests/test_layout.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.layout.testing import INTEGRATION_TESTING\n from plone.app.testing import setRoles\ndiff --git a/plone/app/layout/globals/tests/test_portal.py b/plone/app/layout/globals/tests/test_portal.py\nindex 9f60e1fa..cf28efd5 100644\n--- a/plone/app/layout/globals/tests/test_portal.py\n+++ b/plone/app/layout/globals/tests/test_portal.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.app.layout.testing import INTEGRATION_TESTING\n@@ -36,7 +35,7 @@ def test_portal(self):\n     def test_portal_title(self):\n         registry = getUtility(IRegistry)\n         self.site_settings = registry.forInterface(ISiteSchema, prefix="plone")\n-        self.site_settings.site_title = u"My title"\n+        self.site_settings.site_title = "My title"\n         self.assertEqual(self.view.portal_title(), "My title")\n \n     def test_portal_url(self):\ndiff --git a/plone/app/layout/globals/tests/test_tools.py b/plone/app/layout/globals/tests/test_tools.py\nindex d7c9d16f..52cf75d9 100644\n--- a/plone/app/layout/globals/tests/test_tools.py\n+++ b/plone/app/layout/globals/tests/test_tools.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.testing import INTEGRATION_TESTING\n from Products.CMFPlone.utils import getToolByName\n \ndiff --git a/plone/app/layout/globals/tools.py b/plone/app/layout/globals/tools.py\nindex 085f4d57..fd04b816 100644\n--- a/plone/app/layout/globals/tools.py\n+++ b/plone/app/layout/globals/tools.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .interfaces import ITools\n from plone.memoize.view import memoize_contextless\n from Products.CMFCore.utils import getToolByName\ndiff --git a/plone/app/layout/icons/__init__.py b/plone/app/layout/icons/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/layout/icons/__init__.py\n+++ b/plone/app/layout/icons/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/layout/icons/icons.py b/plone/app/layout/icons/icons.py\nindex 607e3567..cb084b39 100644\n--- a/plone/app/layout/icons/icons.py\n+++ b/plone/app/layout/icons/icons.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from plone.app.layout.icons.interfaces import IContentIcon\n@@ -11,7 +10,7 @@\n from zope.interface import implementer\n \n \n-class BaseIcon(object):\n+class BaseIcon:\n     """Helper base class for html rendering"""\n \n     __allow_access_to_unprotected_subobjects__ = True\n@@ -25,7 +24,7 @@ def html_tag(self):\n         if not self.url:\n             return None\n \n-        tag = \'<img width="%s" height="%s" src="%s"\' % (\n+        tag = \'<img width="{}" height="{}" src="{}"\'.format(\n             self.width,\n             self.height,\n             self.url,\n@@ -56,10 +55,10 @@ def url(self):\n             return path\n \n         portal_state_view = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_portal_state"\n+            (self.context, self.request), name="plone_portal_state"\n         )\n         portal_url = portal_state_view.portal_url()\n-        return "%s/%s" % (portal_url, path)\n+        return f"{portal_url}/{path}"\n \n     @property\n     def description(self):\n@@ -67,7 +66,7 @@ def description(self):\n         tt = getToolByName(context, "portal_types")\n         fti = tt.get(self.brain["portal_type"])\n         if fti is not None:\n-            res = "%s %s" % (\n+            res = "{} {}".format(\n                 translate(fti.Title(), context=self.request),\n                 self._mimetype(),\n             )\n@@ -121,7 +120,7 @@ def url(self):\n             return path\n \n         portal_url = getToolByName(self.context, "portal_url")()\n-        return "%s/%s" % (portal_url, path)\n+        return f"{portal_url}/{path}"\n \n     @property\n     def description(self):\n@@ -178,7 +177,7 @@ def __init__(self, context, request, obj):\n     def url(self):\n         portal_url = getToolByName(self.context, "portal_url")()\n         portal_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_portal_state"\n+            (self.context, self.request), name="plone_portal_state"\n         )\n         if portal_state.is_rtl():\n             return "%s/rtl-site_icon.png" % portal_url\ndiff --git a/plone/app/layout/icons/interfaces.py b/plone/app/layout/icons/interfaces.py\nindex c40dfbdd..11263b11 100644\n--- a/plone/app/layout/icons/interfaces.py\n+++ b/plone/app/layout/icons/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Attribute\n from zope.interface import Interface\n \ndiff --git a/plone/app/layout/links/__init__.py b/plone/app/layout/links/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/layout/links/__init__.py\n+++ b/plone/app/layout/links/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/layout/links/tests/__init__.py b/plone/app/layout/links/tests/__init__.py\nindex ec51c5a2..792d6005 100644\n--- a/plone/app/layout/links/tests/__init__.py\n+++ b/plone/app/layout/links/tests/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/app/layout/links/tests/test_canonical_url.py b/plone/app/layout/links/tests/test_canonical_url.py\nindex 7c2caee5..308033fd 100644\n--- a/plone/app/layout/links/tests/test_canonical_url.py\n+++ b/plone/app/layout/links/tests/test_canonical_url.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from plone.app.layout.testing import FUNCTIONAL_TESTING\n from plone.testing.zope import Browser\n \ndiff --git a/plone/app/layout/links/tests/test_favicon_viewlet.py b/plone/app/layout/links/tests/test_favicon_viewlet.py\nindex 21b78211..dfe8360b 100644\n--- a/plone/app/layout/links/tests/test_favicon_viewlet.py\n+++ b/plone/app/layout/links/tests/test_favicon_viewlet.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.links.viewlets import FaviconViewlet\n from plone.app.layout.testing import FUNCTIONAL_TESTING\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n@@ -25,7 +24,7 @@ def test_FaviconViewlet_get_mimetype_svg(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSchema, prefix="plone")\n         filename = \'test.svg\'\n-        file_data = \'Hello World\'.encode()\n+        file_data = b\'Hello World\'\n         encoded_data = b64encode_file(filename=filename, data=file_data)\n         settings.site_favicon = encoded_data\n         mimetype = settings.site_favicon_mimetype\n@@ -35,7 +34,7 @@ def test_FaviconViewlet_get_mimetype_jpg(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSchema, prefix="plone")\n         filename = \'test.jpg\'\n-        file_data = \'Hello World\'.encode()\n+        file_data = b\'Hello World\'\n         encoded_data = b64encode_file(filename=filename, data=file_data)\n         settings.site_favicon = encoded_data\n         mimetype = settings.site_favicon_mimetype\n@@ -45,7 +44,7 @@ def test_FaviconViewlet_get_mimetype_png(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSchema, prefix="plone")\n         filename = \'test.png\'\n-        file_data = \'Hello World\'.encode()\n+        file_data = b\'Hello World\'\n         encoded_data = b64encode_file(filename=filename, data=file_data)\n         settings.site_favicon = encoded_data\n         mimetype = settings.site_favicon_mimetype\n@@ -55,7 +54,7 @@ def test_FaviconViewlet_get_mimetype_ico(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSchema, prefix="plone")\n         filename = \'test.ico\'\n-        file_data = \'Hello World\'.encode()\n+        file_data = b\'Hello World\'\n         encoded_data = b64encode_file(filename=filename, data=file_data)\n         settings.site_favicon = encoded_data\n         mimetype = settings.site_favicon_mimetype\ndiff --git a/plone/app/layout/links/tests/test_rssviewlet.py b/plone/app/layout/links/tests/test_rssviewlet.py\nindex 4ad8f43f..50f1866b 100644\n--- a/plone/app/layout/links/tests/test_rssviewlet.py\n+++ b/plone/app/layout/links/tests/test_rssviewlet.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.links.viewlets import RSSViewlet\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n from plone.app.testing import setRoles\ndiff --git a/plone/app/layout/links/viewlets.py b/plone/app/layout/links/viewlets.py\nindex 71d8d56d..813f0287 100644\n--- a/plone/app/layout/links/viewlets.py\n+++ b/plone/app/layout/links/viewlets.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.layout.viewlets import ViewletBase\n from plone.app.uuid.utils import uuidToObject\n@@ -22,7 +21,7 @@\n \n \n def get_language(context, request):\n-    portal_state = getMultiAdapter((context, request), name=u"plone_portal_state")\n+    portal_state = getMultiAdapter((context, request), name="plone_portal_state")\n     return portal_state.language()\n \n \n@@ -97,7 +96,7 @@ class AuthorViewlet(ViewletBase):\n     _template = ViewPageTemplateFile("author.pt")\n \n     def update(self):\n-        super(AuthorViewlet, self).update()\n+        super().update()\n         self.tools = getMultiAdapter((self.context, self.request), name="plone_tools")\n \n     def show(self):\n@@ -112,7 +111,7 @@ def show(self):\n     def render(self):\n         if self.show():\n             return self._template()\n-        return u""\n+        return ""\n \n \n class RSSViewlet(ViewletBase):\n@@ -133,19 +132,19 @@ def getRssLinks(self, obj):\n \n             urls.append(\n                 {\n-                    "title": "%s - %s" % (obj.Title(), safe_bytes(term.title)),\n+                    "title": f"{obj.Title()} - {safe_bytes(term.title)}",\n                     "url": obj.absolute_url() + "/" + term.value,\n                 }\n             )\n         return urls\n \n     def update(self):\n-        super(RSSViewlet, self).update()\n+        super().update()\n         self.rsslinks = []\n         portal = self.portal_state.portal()\n         util = getMultiAdapter((self.context, self.request), name="syndication-util")\n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n         if context_state.is_portal_root():\n             if util.site_enabled():\n@@ -182,7 +181,7 @@ class CanonicalURL(ViewletBase):\n     @view.memoize\n     def render(self):\n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n         canonical_url = context_state.canonical_object_url()\n-        return u\'    <link rel="canonical" href="%s" />\' % canonical_url\n+        return \'    <link rel="canonical" href="%s" />\' % canonical_url\ndiff --git a/plone/app/layout/navigation/__init__.py b/plone/app/layout/navigation/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/layout/navigation/__init__.py\n+++ b/plone/app/layout/navigation/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/layout/navigation/defaultpage.py b/plone/app/layout/navigation/defaultpage.py\nindex 3f684b8f..6e8f26fa 100644\n--- a/plone/app/layout/navigation/defaultpage.py\n+++ b/plone/app/layout/navigation/defaultpage.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.deferredimport import deprecated\n \n \ndiff --git a/plone/app/layout/navigation/interfaces.py b/plone/app/layout/navigation/interfaces.py\nindex 53f3b05f..c41a0a38 100644\n--- a/plone/app/layout/navigation/interfaces.py\n+++ b/plone/app/layout/navigation/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.deferredimport import deprecated\n from zope.interface import Attribute\n from zope.interface import Interface\ndiff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex d2e7efbe..360f0de6 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # This module contains a function to help build navigation-tree-like structures\n # from catalog queries.\n \n@@ -11,7 +10,7 @@\n \n \n @implementer(INavtreeStrategy)\n-class NavtreeStrategyBase(object):\n+class NavtreeStrategyBase:\n     """Basic navigation tree strategy that does nothing."""\n \n     __allow_access_to_unprotected_subobjects__ = 1\n@@ -143,7 +142,7 @@ def buildFolderTree(context, obj=None, query={}, strategy=NavtreeStrategyBase())\n         query["path"] = rootPath\n     elif rootPath is None:\n         pathQuery = query["path"]\n-        if isinstance(pathQuery, six.string_types):\n+        if isinstance(pathQuery, str):\n             rootPath = pathQuery\n         else:\n             # Adjust for the fact that in a \'navtree\' query, the actual path\n@@ -181,7 +180,7 @@ def buildFolderTree(context, obj=None, query={}, strategy=NavtreeStrategyBase())\n \n     # Allow the strategy to suppliment the query for keys not already\n     # present in the query such as sorting and omitting default pages\n-    for key, value in six.iteritems(strategy.supplimentQuery):\n+    for key, value in strategy.supplimentQuery.items():\n         if key not in query:\n             query[key] = value\n \ndiff --git a/plone/app/layout/navigation/root.py b/plone/app/layout/navigation/root.py\nindex 734af426..4badee8b 100644\n--- a/plone/app/layout/navigation/root.py\n+++ b/plone/app/layout/navigation/root.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\ndiff --git a/plone/app/layout/navigation/tests/test_root.py b/plone/app/layout/navigation/tests/test_root.py\nindex 46a6afd2..d6ac822a 100644\n--- a/plone/app/layout/navigation/tests/test_root.py\n+++ b/plone/app/layout/navigation/tests/test_root.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.navigation.root import getNavigationRootObject\n from plone.app.layout.testing import INTEGRATION_TESTING\n \ndiff --git a/plone/app/layout/nextprevious/__init__.py b/plone/app/layout/nextprevious/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/layout/nextprevious/__init__.py\n+++ b/plone/app/layout/nextprevious/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/layout/nextprevious/interfaces.py b/plone/app/layout/nextprevious/interfaces.py\nindex ee16e090..b20de44d 100644\n--- a/plone/app/layout/nextprevious/interfaces.py\n+++ b/plone/app/layout/nextprevious/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n from zope.schema import Bool\n \n@@ -8,7 +7,7 @@ class INextPreviousProvider(Interface):\n     item relative to a particular id.\n     """\n \n-    enabled = Bool(title=u"True if next/previous behaviour is enabled")\n+    enabled = Bool(title="True if next/previous behaviour is enabled")\n \n     def getNextItem(obj):\n         """Returns information about next item in the container relative to\ndiff --git a/plone/app/layout/nextprevious/view.py b/plone/app/layout/nextprevious/view.py\nindex 23a65e60..073cc677 100644\n--- a/plone/app/layout/nextprevious/view.py\n+++ b/plone/app/layout/nextprevious/view.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from plone.app.layout.nextprevious.interfaces import INextPreviousProvider\n@@ -36,7 +35,7 @@ def _provider(self):\n \n     def isViewTemplate(self):\n         plone = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n         return plone.is_view_template()\n \ndiff --git a/plone/app/layout/sitemap/__init__.py b/plone/app/layout/sitemap/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/layout/sitemap/__init__.py\n+++ b/plone/app/layout/sitemap/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/layout/sitemap/sitemap.py b/plone/app/layout/sitemap/sitemap.py\nindex f62c06b1..cbdfedea 100644\n--- a/plone/app/layout/sitemap/sitemap.py\n+++ b/plone/app/layout/sitemap/sitemap.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from BTrees.OOBTree import OOBTree\n from gzip import GzipFile\n from plone.memoize import ram\n@@ -24,7 +23,7 @@ def _render_cachekey(fun, self):\n     url = self.context.absolute_url()\n     catalog = getToolByName(self.context, "portal_catalog")\n     counter = catalog.getCounter()\n-    return "%s/%s/%s" % (url, self.filename, counter)\n+    return f"{url}/{self.filename}/{counter}"\n \n \n class SiteMapView(BrowserView):\n@@ -106,7 +105,7 @@ def generate(self):\n         xml = self.template()\n         fp = BytesIO()\n         gzip = GzipFile(self.filename, "wb", 9, fp)\n-        if isinstance(xml, six.text_type):\n+        if isinstance(xml, str):\n             xml = xml.encode("utf8")\n         gzip.write(xml)\n         gzip.close()\ndiff --git a/plone/app/layout/sitemap/tests/__init__.py b/plone/app/layout/sitemap/tests/__init__.py\nindex ec51c5a2..792d6005 100644\n--- a/plone/app/layout/sitemap/tests/__init__.py\n+++ b/plone/app/layout/sitemap/tests/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/app/layout/sitemap/tests/test_sitemap.py b/plone/app/layout/sitemap/tests/test_sitemap.py\nindex 09ed1ed2..deae29ca 100644\n--- a/plone/app/layout/sitemap/tests/test_sitemap.py\n+++ b/plone/app/layout/sitemap/tests/test_sitemap.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from DateTime import DateTime\n from gzip import GzipFile\n from plone.app.layout.navigation.interfaces import INavigationRoot\n@@ -224,7 +223,7 @@ def test_typesUseViewActionInListings(self):\n         self.wftool.doActionFor(newsitem, "publish")\n         self.assertTrue("published" == self.wftool.getInfoFor(newsitem, "review_state"))\n         registry = getUtility(IRegistry)\n-        registry["plone.types_use_view_action_in_listings"] = [u"News Item"]\n+        registry["plone.types_use_view_action_in_listings"] = ["News Item"]\n \n         logout()\n \ndiff --git a/plone/app/layout/testing.py b/plone/app/layout/testing.py\nindex 42e27671..3974d941 100644\n--- a/plone/app/layout/testing.py\n+++ b/plone/app/layout/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\ndiff --git a/plone/app/layout/viewlets/__init__.py b/plone/app/layout/viewlets/__init__.py\nindex d167fdbf..9ac3d803 100644\n--- a/plone/app/layout/viewlets/__init__.py\n+++ b/plone/app/layout/viewlets/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n from .common import ViewletBase  # noqa\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex f7816f0c..56bbb609 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from Acquisition import aq_base\n from Acquisition import aq_inner\n@@ -50,7 +49,7 @@ class ViewletBase(BrowserView):\n     """Base class with common functions for link viewlets."""\n \n     def __init__(self, context, request, view, manager=None):\n-        super(ViewletBase, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.__parent__ = view\n         self.context = context\n         self.request = request\n@@ -197,7 +196,7 @@ class SearchBoxViewlet(ViewletBase):\n     index = ViewPageTemplateFile("searchbox.pt")\n \n     def update(self):\n-        super(SearchBoxViewlet, self).update()\n+        super().update()\n \n         context_state = getMultiAdapter(\n             (self.context, self.request), name="plone_context_state"\n@@ -216,7 +215,7 @@ class LogoViewlet(ViewletBase):\n     index = ViewPageTemplateFile("logo.pt")\n \n     def update(self):\n-        super(LogoViewlet, self).update()\n+        super().update()\n \n         # TODO: should this be changed to settings.site_title?\n         self.navigation_root_title = self.portal_state.navigation_root_title()\n@@ -424,7 +423,7 @@ class PersonalBarViewlet(ViewletBase):\n     user_name = ""\n \n     def update(self):\n-        super(PersonalBarViewlet, self).update()\n+        super().update()\n         context = aq_inner(self.context)\n \n         context_state = getMultiAdapter(\n@@ -486,7 +485,7 @@ def update(self):\n         # from plone.app.contentmenu. This behaves differently depending on\n         # whether the view is marked with IViewView. If our parent view\n         # provides that marker, we should do it here as well.\n-        super(ContentViewsViewlet, self).update()\n+        super().update()\n         if IViewView.providedBy(self.__parent__):\n             alsoProvides(self, IViewView)\n \n@@ -532,7 +531,7 @@ def getTabSets(self):\n             if starts("http") or starts("javascript"):\n                 item["url"] = action_url\n             else:\n-                item["url"] = "%s/%s" % (context_url, action_url)\n+                item["url"] = f"{context_url}/{action_url}"\n             item["url"] = addTokenToUrl(item["url"], self.request)\n \n             action_method = item["url"].split("/")[-1].split("?")[0]\n@@ -602,7 +601,7 @@ class PathBarViewlet(ViewletBase):\n     index = ViewPageTemplateFile("path_bar.pt")\n \n     def update(self):\n-        super(PathBarViewlet, self).update()\n+        super().update()\n \n         self.is_rtl = self.portal_state.is_rtl()\n \ndiff --git a/plone/app/layout/viewlets/content.py b/plone/app/layout/viewlets/content.py\nindex eb17758a..f1d12b32 100644\n--- a/plone/app/layout/viewlets/content.py\n+++ b/plone/app/layout/viewlets/content.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from Acquisition import aq_inner\n from DateTime import DateTime\n@@ -22,7 +21,6 @@\n from Products.CMFPlone.utils import log\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from six.moves import range\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.component import queryMultiAdapter\n@@ -49,10 +47,10 @@ class DocumentActionsViewlet(ViewletBase):\n     index = ViewPageTemplateFile("document_actions.pt")\n \n     def update(self):\n-        super(DocumentActionsViewlet, self).update()\n+        super().update()\n \n         self.context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n         self.actions = self.context_state.actions("document_actions")\n \n@@ -62,9 +60,9 @@ class DocumentBylineViewlet(ViewletBase):\n     index = ViewPageTemplateFile("document_byline.pt")\n \n     def update(self):\n-        super(DocumentBylineViewlet, self).update()\n+        super().update()\n         self.context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n         self.anonymous = self.portal_state.anonymous()\n         self.has_pam = HAS_PAM\n@@ -156,10 +154,10 @@ class HistoryByLineView(BrowserView):\n     def update(self):\n         context = self.context\n         self.portal_state = getMultiAdapter(\n-            (context, self.request), name=u"plone_portal_state"\n+            (context, self.request), name="plone_portal_state"\n         )\n         self.context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n         self.anonymous = self.portal_state.anonymous()\n         self.has_pam = HAS_PAM\n@@ -289,7 +287,7 @@ def related_items(self):\n             brains = catalog(UID=related)\n             if brains:\n                 # build a position dict by iterating over the items once\n-                positions = dict([(v, i) for (i, v) in enumerate(related)])\n+                positions = {v: i for (i, v) in enumerate(related)}\n                 # We need to keep the ordering intact\n                 res = list(brains)\n \n@@ -345,7 +343,7 @@ def getUserInfo(self, userid):\n         if fullname:\n             actor["fullname"] = fullname\n \n-        return dict(actor=actor, actor_home="%s/author/%s" % (self.site_url, userid))\n+        return dict(actor=actor, actor_home=f"{self.site_url}/author/{userid}")\n \n     def workflowHistory(self, complete=True):\n         """Return workflow history of this context.\n@@ -374,7 +372,7 @@ def workflowHistory(self, complete=True):\n                 review_history = list(review_history)\n \n             portal_type = context.portal_type\n-            anon = _(u"label_anonymous_user", default=u"Anonymous User")\n+            anon = _("label_anonymous_user", default="Anonymous User")\n \n             for r in review_history:\n                 r["type"] = "workflow"\n@@ -438,8 +436,8 @@ def morphVersionDataToHistoryFormat(vdata, version_id):\n             )\n             info = dict(\n                 type="versioning",\n-                action=_(u"Edited"),\n-                transition_title=_(u"Edited"),\n+                action=_("Edited"),\n+                transition_title=_("Edited"),\n                 actorid=userid,\n                 time=meta["timestamp"],\n                 comments=meta["comment"],\n@@ -450,7 +448,7 @@ def morphVersionDataToHistoryFormat(vdata, version_id):\n                 if version_id > 0:\n                     info[\n                         "diff_previous_url"\n-                    ] = "%s/@@history?one=%s&two=%s&_authenticator=%s" % (\n+                    ] = "{}/@@history?one={}&two={}&_authenticator={}".format(\n                         context_url,\n                         version_id,\n                         version_id - 1,\n@@ -459,7 +457,7 @@ def morphVersionDataToHistoryFormat(vdata, version_id):\n                 if not rt.isUpToDate(context, version_id):\n                     info[\n                         "diff_current_url"\n-                    ] = "%s/@@history?one=current&two=%s&_authenticator=%s" % (\n+                    ] = "{}/@@history?one=current&two={}&_authenticator={}".format(\n                         context_url,\n                         version_id,\n                         token,\n@@ -509,7 +507,7 @@ def toLocalizedTime(self, time, long_format=None, time_only=None):\n \n class ContentHistoryView(ContentHistoryViewlet):\n     def __init__(self, context, request):\n-        super(ContentHistoryView, self).__init__(context, request, None, None)\n+        super().__init__(context, request, None, None)\n         self.update()\n \n     def __call__(self):\ndiff --git a/plone/app/layout/viewlets/globalstatusmessage.py b/plone/app/layout/viewlets/globalstatusmessage.py\nindex a23dcee2..9fdebd58 100644\n--- a/plone/app/layout/viewlets/globalstatusmessage.py\n+++ b/plone/app/layout/viewlets/globalstatusmessage.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.viewlets.common import ViewletBase\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n@@ -37,7 +36,7 @@ class GlobalStatusMessage(ViewletBase):\n     index = ViewPageTemplateFile("globalstatusmessage.pt")\n \n     def update(self):\n-        super(GlobalStatusMessage, self).update()\n+        super().update()\n         self.status = IStatusMessage(self.request)\n         self.messages = self.status.show()\n \ndiff --git a/plone/app/layout/viewlets/httpheaders.py b/plone/app/layout/viewlets/httpheaders.py\nindex 2eed6364..371ba945 100644\n--- a/plone/app/layout/viewlets/httpheaders.py\n+++ b/plone/app/layout/viewlets/httpheaders.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.viewlets.common import ViewletBase\n \n \n@@ -6,10 +5,10 @@ class HeaderViewlet(ViewletBase):\n     """a base viewlet that do not render anything, just ready to set headers"""\n \n     def index(self):\n-        return u""\n+        return ""\n \n     def update(self):\n-        super(HeaderViewlet, self).update()\n+        super().update()\n         self.setHeader = self.request.response.setHeader\n         for name, value in self.getHeaders():\n             self.setHeader(name, value)\ndiff --git a/plone/app/layout/viewlets/interfaces.py b/plone/app/layout/viewlets/interfaces.py\nindex 71b1b499..cb63b626 100644\n--- a/plone/app/layout/viewlets/interfaces.py\n+++ b/plone/app/layout/viewlets/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.viewlet.interfaces import IViewletManager\n \n \ndiff --git a/plone/app/layout/viewlets/social.py b/plone/app/layout/viewlets/social.py\nindex df38d0c8..c84c6256 100644\n--- a/plone/app/layout/viewlets/social.py\n+++ b/plone/app/layout/viewlets/social.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.viewlets.common import TitleViewlet\n from plone.memoize.view import memoize\n from plone.registry.interfaces import IRegistry\ndiff --git a/plone/app/layout/viewlets/tests/base.py b/plone/app/layout/viewlets/tests/base.py\nindex ffcc3659..aafbe309 100644\n--- a/plone/app/layout/viewlets/tests/base.py\n+++ b/plone/app/layout/viewlets/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.testing import FUNCTIONAL_TESTING\n from plone.app.layout.testing import INTEGRATION_TESTING\n from plone.app.layout.testing import TEST_USER_ID\ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex 11cb14fd..344f9d1d 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.layout.viewlets.common import ContentViewsViewlet\n from plone.app.layout.viewlets.common import GlobalSectionsViewlet\n@@ -56,9 +55,9 @@ class TestContentViewsViewlet(ViewletsTestCase):\n     """Test the content views viewlet."""\n \n     def setUp(self):\n-        super(TestContentViewsViewlet, self).setUp()\n+        super().setUp()\n         self.folder.invokeFactory("Document", "test", title="Test default page")\n-        self.folder.title = u"Folder"\n+        self.folder.title = "Folder"\n \n     def _invalidateRequestMemoizations(self):\n         try:\n@@ -89,7 +88,7 @@ def test_set1_NonStructuralFolder(self):\n     def test_set1(self):\n         self._invalidateRequestMemoizations()\n         setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n-        self.app.REQUEST["ACTUAL_URL"] = "%s/edit?_authenticator=%s" % (\n+        self.app.REQUEST["ACTUAL_URL"] = "{}/edit?_authenticator={}".format(\n             self.folder.test.absolute_url(),\n             auth.createToken(),\n         )\n@@ -105,9 +104,9 @@ class TestTitleViewsViewlet(ViewletsTestCase):\n     """Test the title viewlet."""\n \n     def setUp(self):\n-        super(TestTitleViewsViewlet, self).setUp()\n+        super().setUp()\n         self.folder.invokeFactory("Document", "test", title="Test default page")\n-        self.folder.title = u"Folder"\n+        self.folder.title = "Folder"\n \n     def _invalidateRequestMemoizations(self):\n         try:\n@@ -125,10 +124,10 @@ def test_title_viewlet_on_portal(self):\n         self.assertEqual(viewlet.site_title, "Plone site")\n         registry = getUtility(IRegistry)\n         site_settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n-        site_settings.site_title = u"S\xc3\xbcper Site"\n+        site_settings.site_title = "S\xc3\xbcper Site"\n         self._invalidateRequestMemoizations()\n         viewlet.update()\n-        self.assertEqual(viewlet.site_title, u"S\\xfcper Site")\n+        self.assertEqual(viewlet.site_title, "S\\xfcper Site")\n \n     def test_title_viewlet_on_content(self):\n         """Title viewlet renders navigation root title"""\n@@ -140,10 +139,10 @@ def test_title_viewlet_on_content(self):\n         self.assertEqual(viewlet.site_title, "Test default page &mdash; Plone site")\n         registry = getUtility(IRegistry)\n         site_settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n-        site_settings.site_title = u"S\xc3\xbcper Site"\n+        site_settings.site_title = "S\xc3\xbcper Site"\n         self._invalidateRequestMemoizations()\n         viewlet.update()\n-        self.assertEqual(viewlet.site_title, u"Test default page &mdash; S\\xfcper Site")\n+        self.assertEqual(viewlet.site_title, "Test default page &mdash; S\\xfcper Site")\n \n     def test_title_viewlet_with_navigation_root(self):\n         """Title viewlet renders navigation root title"""\n@@ -153,7 +152,7 @@ def test_title_viewlet_with_navigation_root(self):\n         directlyProvides(self.folder, INavigationRoot)\n         viewlet = TitleViewlet(self.folder.test, self.app.REQUEST, None)\n         viewlet.update()\n-        self.assertEqual(viewlet.site_title, u"Test default page &mdash; Folder")\n+        self.assertEqual(viewlet.site_title, "Test default page &mdash; Folder")\n \n \n class TestLogoViewlet(ViewletsTestCase):\n@@ -175,7 +174,7 @@ def test_logo_viewlet_portal_root_default(self):\n         viewlet = LogoViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n         self.assertEqual(\n-            viewlet.img_src, "{0}/logo.png".format(self.portal.absolute_url())\n+            viewlet.img_src, f"{self.portal.absolute_url()}/logo.png"\n         )\n \n     def test_logo_viewlet_portal_root_registry(self):\n@@ -190,7 +189,7 @@ def test_logo_viewlet_portal_root_registry(self):\n         viewlet.update()\n         self.assertTrue(\n             viewlet.img_src,\n-            "{0}/@@site-logo/pixel.png".format(self.portal.absolute_url()),\n+            f"{self.portal.absolute_url()}/@@site-logo/pixel.png",\n         )\n \n     def test_logo_viewlet_navigation_root_default(self):\n@@ -201,7 +200,7 @@ def test_logo_viewlet_navigation_root_default(self):\n         viewlet = LogoViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n         self.assertEqual(\n-            viewlet.img_src, "{0}/logo.png".format(self.folder.absolute_url())\n+            viewlet.img_src, f"{self.folder.absolute_url()}/logo.png"\n         )\n \n     def test_viewlet_navigation_root_registry(self):\n@@ -218,7 +217,7 @@ def test_viewlet_navigation_root_registry(self):\n         viewlet.update()\n         self.assertTrue(\n             viewlet.img_src,\n-            "{0}/@@site-logo/pixel.png".format(self.folder.absolute_url()),\n+            f"{self.folder.absolute_url()}/@@site-logo/pixel.png",\n         )\n \n \n@@ -243,10 +242,10 @@ def _get_navtree(self, context=None):\n     def test_globalnav_respects_types_use_view_action_in_listings(self):\n         """Test selected tabs with a INavigationroot folder involved"""\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n-        self.portal.invokeFactory("Image", "image", title=u"S\xc3\xb6me Image")\n-        self.portal.invokeFactory("File", "file", title=u"Some File")\n-        self.portal.invokeFactory("Document", "doc", title=u"Some D\xc3\xb6cument")\n-        self.portal.invokeFactory("Collection", "collection", title=u"Some Collection")\n+        self.portal.invokeFactory("Image", "image", title="S\xc3\xb6me Image")\n+        self.portal.invokeFactory("File", "file", title="Some File")\n+        self.portal.invokeFactory("Document", "doc", title="Some D\xc3\xb6cument")\n+        self.portal.invokeFactory("Collection", "collection", title="Some Collection")\n         request = self.layer["request"]\n         gsv = GlobalSectionsViewlet(self.portal, request, None)\n         gsv.update()\n@@ -261,14 +260,14 @@ def test_globalnav_navigation_depth(self):\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         registry = getUtility(IRegistry)\n         registry["plone.navigation_depth"] = 3\n-        self.portal.invokeFactory("Folder", "folder", title=u"F\xc3\xb6lder")\n-        self.portal.invokeFactory("Folder", "folder2", title=u"Folder 2")\n-        self.portal.invokeFactory("Folder", "folder3", title=u"Folder 3")\n+        self.portal.invokeFactory("Folder", "folder", title="F\xc3\xb6lder")\n+        self.portal.invokeFactory("Folder", "folder2", title="Folder 2")\n+        self.portal.invokeFactory("Folder", "folder3", title="Folder 3")\n         folder = self.portal.folder\n-        folder.invokeFactory("Folder", "subfolder", title=u"Subfolder")\n-        folder.invokeFactory("Folder", "subfolder2", title=u"S\xc3\xbcbfolder 2")\n+        folder.invokeFactory("Folder", "subfolder", title="Subfolder")\n+        folder.invokeFactory("Folder", "subfolder2", title="S\xc3\xbcbfolder 2")\n         subfolder = folder.subfolder\n-        subfolder.invokeFactory("Folder", "subsubfolder", title=u"Sub2folder")\n+        subfolder.invokeFactory("Folder", "subsubfolder", title="Sub2folder")\n \n         request = self.layer["request"]\n         navtree = self._get_navtree()\n@@ -278,15 +277,15 @@ def test_globalnav_navigation_depth(self):\n         )\n         self.assertListEqual(\n             [x["title"] for x in navtree["/plone"]],\n-            [u"Home", u"Members", u"F\xc3\xb6lder", u"Folder 2", u"Folder 3"],\n+            ["Home", "Members", "F\xc3\xb6lder", "Folder 2", "Folder 3"],\n         )\n         self.assertListEqual(\n             [x["title"] for x in navtree["/plone/folder"]],\n-            [u"Subfolder", u"S\xc3\xbcbfolder 2"],\n+            ["Subfolder", "S\xc3\xbcbfolder 2"],\n         )\n         self.assertListEqual(\n             [x["title"] for x in navtree["/plone/folder/subfolder"]],\n-            [u"Sub2folder"],\n+            ["Sub2folder"],\n         )\n \n         gsv = GlobalSectionsViewlet(self.portal, request, None)\n@@ -316,7 +315,7 @@ def test_generate_tabs_non_folderish(self):\n         self.portal.invokeFactory(\n             "Document",\n             "test-doc",\n-            title=u"A simple document (\xc3\xa0\xc3\xa8\xc3\xac\xc3\xb2\xc3\xb9)",\n+            title="A simple document (\xc3\xa0\xc3\xa8\xc3\xac\xc3\xb2\xc3\xb9)",\n         )\n         navtree = self._get_navtree()\n         self.assertListEqual(sorted(navtree), ["/plone", "/plone/Members"])\n@@ -329,12 +328,12 @@ def test_generate_tabs_sorted(self):\n         self.portal.invokeFactory(\n             "Document",\n             "test-doc-2",\n-            title=u"Document 2",\n+            title="Document 2",\n         )\n         self.portal.invokeFactory(\n             "Document",\n             "test-doc-1",\n-            title=u"Document 1",\n+            title="Document 1",\n         )\n         navtree = self._get_navtree()\n         # default sorting by position in parent\n@@ -350,7 +349,7 @@ def test_generate_tabs_sorted(self):\n         )\n \n         # check we can sort by title\n-        self.registry["plone.sort_tabs_on"] = u"sortable_title"\n+        self.registry["plone.sort_tabs_on"] = "sortable_title"\n         navtree = self._get_navtree()\n         self.assertListEqual(sorted(navtree), ["/plone", "/plone/Members"])\n         self.assertListEqual(\n@@ -379,12 +378,12 @@ def test_generate_tabs_sorted(self):\n \n     def test_generate_tabs_displayed_types(self):\n         self.registry["plone.displayed_types"] = (\n-            u"Image",\n-            u"File",\n-            u"Link",\n-            u"News Item",\n-            u"Document",\n-            u"Event",\n+            "Image",\n+            "File",\n+            "Link",\n+            "News Item",\n+            "Document",\n+            "Event",\n         )\n         navtree = self._get_navtree()\n         self.assertListEqual(\n@@ -403,7 +402,7 @@ def test_generate_tabs_filter_on_state(self):\n                 "/plone/index_html",\n             ],\n         )\n-        self.registry["plone.workflow_states_to_show"] = (u"private",)\n+        self.registry["plone.workflow_states_to_show"] = ("private",)\n         navtree = self._get_navtree()\n         self.assertListEqual(sorted(navtree), ["/plone", "/plone/Members"])\n         self.assertListEqual(\n@@ -428,18 +427,18 @@ def test_generate_tabs_exclude_from_nav(self):\n         self.portal.invokeFactory(\n             "Folder",\n             "test-folder",\n-            title=u"Test folder",\n+            title="Test folder",\n         )\n         self.portal.invokeFactory(\n             "Folder",\n             "excluded-folder",\n-            title=u"Excluded folder",\n+            title="Excluded folder",\n             exclude_from_nav=True,\n         )\n         self.portal["excluded-folder"].invokeFactory(\n             "Folder",\n             "sub-folder",\n-            title=u"Sub folder",\n+            title="Sub folder",\n         )\n \n         navtree = self._get_navtree()\n@@ -622,7 +621,7 @@ def test_escaping_twice_does_not_double_escape_items(self):\n         """Test for https://github.com/plone/plone.app.layout/issues/280."""\n \n         self.portal.invokeFactory(\n-            "Document", "test-doc-1", title=u"Document 1 & 2",\n+            "Document", "test-doc-1", title="Document 1 & 2",\n         )\n \n         request = self.layer["request"]\n@@ -652,7 +651,7 @@ def get_browser(self):\n         browser.handleErrors = False\n         browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}",\n         )\n         return browser\n \n@@ -670,7 +669,7 @@ def assert_not_hacked(self, browser):\n             index = body.index(hacked)\n             start = max(0, index - 50)\n             end = min(index + len(hacked) + 50, len(body))\n-            assert False, "Hacked script found in body: ... {0} ...".format(\n+            assert False, "Hacked script found in body: ... {} ...".format(\n                 body[start:end]\n             )\n \ndiff --git a/plone/app/layout/viewlets/tests/test_content.py b/plone/app/layout/viewlets/tests/test_content.py\nindex 26b837f6..741897d2 100644\n--- a/plone/app/layout/viewlets/tests/test_content.py\n+++ b/plone/app/layout/viewlets/tests/test_content.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from DateTime import DateTime\n from plone.app.layout.viewlets.content import ContentRelatedItems\n from plone.app.layout.viewlets.content import DocumentBylineViewlet\n@@ -38,7 +37,7 @@ class TestDocumentBylineViewletView(ViewletsTestCase):\n     """\n \n     def setUp(self):\n-        super(TestDocumentBylineViewletView, self).setUp()\n+        super().setUp()\n         self.folder.invokeFactory("Document", "doc1", title="Document 1")\n         self.context = self.folder["doc1"]\n \n@@ -134,7 +133,7 @@ class TestHistoryBylineViewletView(ViewletsTestCase):\n     """\n \n     def setUp(self):\n-        super(TestHistoryBylineViewletView, self).setUp()\n+        super().setUp()\n         self.folder.invokeFactory("Document", "doc1", title="Document 1")\n         self.context = self.folder["doc1"]\n \n@@ -222,7 +221,7 @@ def test_pub_date(self):\n \n class TestRelatedItemsViewlet(ViewletsTestCase):\n     def setUp(self):\n-        super(TestRelatedItemsViewlet, self).setUp()\n+        super().setUp()\n         self.folder.invokeFactory("Document", "doc1", title="Document 1")\n         self.folder.invokeFactory("Document", "doc2", title="Document 2")\n         self.folder.invokeFactory("Document", "doc3", title="Document 3")\n@@ -251,7 +250,7 @@ def testDeletedRelatedItems(self):\n \n class TestDexterityRelatedItemsViewlet(ViewletsTestCase):\n     def setUp(self):\n-        super(TestDexterityRelatedItemsViewlet, self).setUp()\n+        super().setUp()\n         """ create some sample content to test with """\n         from Products.CMFPlone.utils import get_installer\n \ndiff --git a/plone/app/layout/viewlets/tests/test_functional.py b/plone/app/layout/viewlets/tests/test_functional.py\nindex 70e19c36..b061a3fe 100644\n--- a/plone/app/layout/viewlets/tests/test_functional.py\n+++ b/plone/app/layout/viewlets/tests/test_functional.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.testing import FUNCTIONAL_TESTING\n from plone.testing import layered\n \ndiff --git a/plone/app/layout/viewlets/tests/test_history.py b/plone/app/layout/viewlets/tests/test_history.py\nindex 0d960687..cf81fcfc 100644\n--- a/plone/app/layout/viewlets/tests/test_history.py\n+++ b/plone/app/layout/viewlets/tests/test_history.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.viewlets.content import ContentHistoryViewlet\n from plone.app.layout.viewlets.content import WorkflowHistoryViewlet\n from plone.app.layout.viewlets.tests.base import ViewletsFunctionalTestCase\n@@ -11,7 +10,7 @@\n \n class TestWorkflowHistoryViewlet(ViewletsFunctionalTestCase):\n     def setUp(self):\n-        super(TestWorkflowHistoryViewlet, self).setUp()\n+        super().setUp()\n         # add document, perform transition, set history for non-existent\n         # member and also None (anonymous)\n         self.folder.invokeFactory("Document", "d1")\n@@ -69,7 +68,7 @@ def test_transitionHistory(self):\n \n class TestContentHistoryViewlet(ViewletsFunctionalTestCase):\n     def setUp(self):\n-        super(TestContentHistoryViewlet, self).setUp()\n+        super().setUp()\n         # add document, perform transition, set history for non-existent\n         # member and also None (anonymous)\n         self.folder.invokeFactory("Document", "d1")\ndiff --git a/plone/app/layout/viewlets/tests/test_social.py b/plone/app/layout/viewlets/tests/test_social.py\nindex 3b9b8fc3..bd942fd2 100644\n--- a/plone/app/layout/viewlets/tests/test_social.py\n+++ b/plone/app/layout/viewlets/tests/test_social.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.viewlets.social import SocialTagsViewlet\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n from plone.app.testing import login\n@@ -16,7 +15,7 @@ class TestSocialViewlet(ViewletsTestCase):\n     """Test the content views viewlet."""\n \n     def setUp(self):\n-        super(TestSocialViewlet, self).setUp()\n+        super().setUp()\n         login(self.portal, TEST_USER_NAME)\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.folder.invokeFactory("News Item", "news-item", title="News Item")\ndiff --git a/plone/app/layout/viewlets/toolbar.py b/plone/app/layout/viewlets/toolbar.py\nindex 7e48e1b2..8aad707a 100644\n--- a/plone/app/layout/viewlets/toolbar.py\n+++ b/plone/app/layout/viewlets/toolbar.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.viewlets.common import PersonalBarViewlet\n from plone.app.viewletmanager.manager import OrderedViewletManager\n from plone.memoize.instance import memoize\n@@ -13,7 +12,7 @@ class ToolbarViewletManager(OrderedViewletManager):\n     custom_template = ViewPageTemplateFile("toolbar.pt")\n \n     def base_render(self):\n-        return super(ToolbarViewletManager, self).render()\n+        return super().render()\n \n     def render(self):\n         return self.custom_template()\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-05-04T20:52:46+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.layout/commit/813150223613364d4d7cae39de5a402e06fa7a7d

black

Files changed:
M plone/app/layout/favicon_handler.py
M plone/app/layout/globals/layout.py
M plone/app/layout/links/tests/test_favicon_viewlet.py
M plone/app/layout/links/viewlets.py
M plone/app/layout/viewlets/content.py
M plone/app/layout/viewlets/tests/test_common.py

b'diff --git a/plone/app/layout/favicon_handler.py b/plone/app/layout/favicon_handler.py\nindex d451381c..cdb3ba31 100644\n--- a/plone/app/layout/favicon_handler.py\n+++ b/plone/app/layout/favicon_handler.py\n@@ -10,15 +10,15 @@\n \n \n @adapter(ISiteSchema, IRecordModifiedEvent)\n-def updateMimetype(settings: RecordsProxy, event: IRecordModifiedEvent=None):\n+def updateMimetype(settings: RecordsProxy, event: IRecordModifiedEvent = None):\n \n-    if event.record.fieldName != \'site_favicon\' or not event.record.value:\n+    if event.record.fieldName != "site_favicon" or not event.record.value:\n         return\n \n     filename = b64decode_file(event.newValue)[0]\n     mimetype = mimetypes.guess_type(filename)[0] if filename else None\n-    if mimetype in (\'image/x-icon\', None):\n+    if mimetype in ("image/x-icon", None):\n         # Override incorrect MIME type registered in both PIL and the\n         # Products.MimetypesRegistry product.\n-        mimetype = \'image/vnd.microsoft.icon\'\n-    settings.__registry__[\'plone.site_favicon_mimetype\'] = mimetype\n+        mimetype = "image/vnd.microsoft.icon"\n+    settings.__registry__["plone.site_favicon_mimetype"] = mimetype\ndiff --git a/plone/app/layout/globals/layout.py b/plone/app/layout/globals/layout.py\nindex efcc5c52..2e1f6559 100644\n--- a/plone/app/layout/globals/layout.py\n+++ b/plone/app/layout/globals/layout.py\n@@ -36,6 +36,7 @@\n     ViewMixinForTemplates,\n )\n \n+\n @implementer(ILayoutPolicy)\n class LayoutPolicy(BrowserView):\n     """A view that gives access to various layout related functions."""\n@@ -100,7 +101,7 @@ def _image_visibility(self, name):\n         if visibility != "authenticated":\n             return False\n         user = getSecurityManager().getUser()\n-        return user is not None and user.getUserName() != \'Anonymous User\'\n+        return user is not None and user.getUserName() != "Anonymous User"\n \n     @memoize\n     def icons_visible(self):\ndiff --git a/plone/app/layout/links/tests/test_favicon_viewlet.py b/plone/app/layout/links/tests/test_favicon_viewlet.py\nindex dfe8360b..9231640b 100644\n--- a/plone/app/layout/links/tests/test_favicon_viewlet.py\n+++ b/plone/app/layout/links/tests/test_favicon_viewlet.py\n@@ -17,52 +17,52 @@ class TestFaviconViewletView(ViewletsTestCase, FaviconViewlet):\n \n     def setUp(self):\n         self.portal = self.layer["portal"]\n-        self.request = \'\'\n-        self.site_url = \'\'\n+        self.request = ""\n+        self.site_url = ""\n \n     def test_FaviconViewlet_get_mimetype_svg(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSchema, prefix="plone")\n-        filename = \'test.svg\'\n-        file_data = b\'Hello World\'\n+        filename = "test.svg"\n+        file_data = b"Hello World"\n         encoded_data = b64encode_file(filename=filename, data=file_data)\n         settings.site_favicon = encoded_data\n         mimetype = settings.site_favicon_mimetype\n-        self.assertEqual(mimetype, \'image/svg+xml\')\n+        self.assertEqual(mimetype, "image/svg+xml")\n \n     def test_FaviconViewlet_get_mimetype_jpg(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSchema, prefix="plone")\n-        filename = \'test.jpg\'\n-        file_data = b\'Hello World\'\n+        filename = "test.jpg"\n+        file_data = b"Hello World"\n         encoded_data = b64encode_file(filename=filename, data=file_data)\n         settings.site_favicon = encoded_data\n         mimetype = settings.site_favicon_mimetype\n-        self.assertEqual(mimetype, \'image/jpeg\')\n+        self.assertEqual(mimetype, "image/jpeg")\n \n     def test_FaviconViewlet_get_mimetype_png(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSchema, prefix="plone")\n-        filename = \'test.png\'\n-        file_data = b\'Hello World\'\n+        filename = "test.png"\n+        file_data = b"Hello World"\n         encoded_data = b64encode_file(filename=filename, data=file_data)\n         settings.site_favicon = encoded_data\n         mimetype = settings.site_favicon_mimetype\n-        self.assertEqual(mimetype, \'image/png\')\n+        self.assertEqual(mimetype, "image/png")\n \n     def test_FaviconViewlet_get_mimetype_ico(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSchema, prefix="plone")\n-        filename = \'test.ico\'\n-        file_data = b\'Hello World\'\n+        filename = "test.ico"\n+        file_data = b"Hello World"\n         encoded_data = b64encode_file(filename=filename, data=file_data)\n         settings.site_favicon = encoded_data\n         mimetype = settings.site_favicon_mimetype\n-        self.assertEqual(mimetype, \'image/vnd.microsoft.icon\')\n+        self.assertEqual(mimetype, "image/vnd.microsoft.icon")\n \n     def test_FaviconViewlet_get_mimetype_none(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSchema, prefix="plone")\n         settings.site_favicon = None\n         mimetype = settings.site_favicon_mimetype\n-        self.assertEqual(mimetype, \'image/vnd.microsoft.icon\')\n+        self.assertEqual(mimetype, "image/vnd.microsoft.icon")\ndiff --git a/plone/app/layout/links/viewlets.py b/plone/app/layout/links/viewlets.py\nindex 813f0287..c4ee7cc7 100644\n--- a/plone/app/layout/links/viewlets.py\n+++ b/plone/app/layout/links/viewlets.py\n@@ -53,7 +53,7 @@ def init_favicon(self) -> NoReturn:\n         if getattr(settings, "site_favicon", False):\n             # The user has customized the favicon via the Site configlet.\n             filename = b64decode_file(settings.site_favicon)[0]\n-            \n+\n             cachebust = "?name=" + filename\n         # The filename is *always* /favicon.ico, irrespective of the content type,\n         # because:\ndiff --git a/plone/app/layout/viewlets/content.py b/plone/app/layout/viewlets/content.py\nindex f1d12b32..25c58db4 100644\n--- a/plone/app/layout/viewlets/content.py\n+++ b/plone/app/layout/viewlets/content.py\n@@ -147,7 +147,7 @@ def get_translations(self):\n \n \n class HistoryByLineView(BrowserView):\n-    """ DocumentByLine information for content history view """\n+    """DocumentByLine information for content history view"""\n \n     index = ViewPageTemplateFile("history_view.pt")\n \n@@ -495,13 +495,9 @@ def fullHistory(self):\n \n     def toLocalizedTime(self, time, long_format=None, time_only=None):\n         """Convert time to localized time"""\n-        util = getToolByName(self.context, \'translation_service\')\n+        util = getToolByName(self.context, "translation_service")\n         return util.ulocalized_time(\n-            time,\n-            long_format,\n-            time_only,\n-            self.context,\n-            domain=\'plonelocales\'\n+            time, long_format, time_only, self.context, domain="plonelocales"\n         )\n \n \ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex 344f9d1d..75672825 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -173,9 +173,7 @@ def test_logo_viewlet_portal_root_default(self):\n         """\n         viewlet = LogoViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n-        self.assertEqual(\n-            viewlet.img_src, f"{self.portal.absolute_url()}/logo.png"\n-        )\n+        self.assertEqual(viewlet.img_src, f"{self.portal.absolute_url()}/logo.png")\n \n     def test_logo_viewlet_portal_root_registry(self):\n         """When a logo is set, and viewlet is opened on a non-navigation root,\n@@ -199,9 +197,7 @@ def test_logo_viewlet_navigation_root_default(self):\n         self._set_site(self.folder)\n         viewlet = LogoViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n-        self.assertEqual(\n-            viewlet.img_src, f"{self.folder.absolute_url()}/logo.png"\n-        )\n+        self.assertEqual(viewlet.img_src, f"{self.folder.absolute_url()}/logo.png")\n \n     def test_viewlet_navigation_root_registry(self):\n         """When a logo is set, and viewlet is opened on a navigation root,\n@@ -621,7 +617,9 @@ def test_escaping_twice_does_not_double_escape_items(self):\n         """Test for https://github.com/plone/plone.app.layout/issues/280."""\n \n         self.portal.invokeFactory(\n-            "Document", "test-doc-1", title="Document 1 & 2",\n+            "Document",\n+            "test-doc-1",\n+            title="Document 1 & 2",\n         )\n \n         request = self.layer["request"]\n@@ -638,7 +636,6 @@ def test_escaping_twice_does_not_double_escape_items(self):\n         self.assertIn("Document 1 &amp; 2", html)\n \n \n-\n class TestTitleEscape(ViewletsFunctionalTestCase):\n     """Test that the title in the global sections viewlet is escaped.\n \n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-05-04T20:54:46+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.layout/commit/8a05420d6edc7d76cf7c379a4922fb60489a014a

Removed six

Files changed:
M plone/app/layout/globals/layout.py
M plone/app/layout/navigation/navtree.py
M plone/app/layout/sitemap/sitemap.py
M plone/app/layout/sitemap/tests/test_sitemap.py
M setup.py

b'diff --git a/plone/app/layout/globals/layout.py b/plone/app/layout/globals/layout.py\nindex 2e1f6559..e47064cc 100644\n--- a/plone/app/layout/globals/layout.py\n+++ b/plone/app/layout/globals/layout.py\n@@ -27,7 +27,6 @@\n from zope.publisher.browser import BrowserView\n \n import json\n-import six\n \n \n TEMPLATE_CLASSES = (\ndiff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex 360f0de6..c9ec123a 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -6,8 +6,6 @@\n from Products.CMFPlone.defaultpage import check_default_page_via_view\n from zope.interface import implementer\n \n-import six\n-\n \n @implementer(INavtreeStrategy)\n class NavtreeStrategyBase:\ndiff --git a/plone/app/layout/sitemap/sitemap.py b/plone/app/layout/sitemap/sitemap.py\nindex cbdfedea..8a417cb5 100644\n--- a/plone/app/layout/sitemap/sitemap.py\n+++ b/plone/app/layout/sitemap/sitemap.py\n@@ -1,5 +1,6 @@\n from BTrees.OOBTree import OOBTree\n from gzip import GzipFile\n+from io import BytesIO\n from plone.memoize import ram\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n@@ -7,12 +8,9 @@\n from Products.CMFPlone.interfaces import ISiteSchema\n from Products.Five import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from six import BytesIO\n from zope.component import getUtility\n from zope.publisher.interfaces import NotFound\n \n-import six\n-\n \n def _render_cachekey(fun, self):\n     # Cache by filename\ndiff --git a/plone/app/layout/sitemap/tests/test_sitemap.py b/plone/app/layout/sitemap/tests/test_sitemap.py\nindex deae29ca..f3cbef46 100644\n--- a/plone/app/layout/sitemap/tests/test_sitemap.py\n+++ b/plone/app/layout/sitemap/tests/test_sitemap.py\n@@ -12,7 +12,7 @@\n from Products.CMFPlone.interfaces import ISearchSchema\n from Products.CMFPlone.interfaces import ISiteSchema\n from Products.CMFPlone.utils import safe_unicode\n-from six import BytesIO\n+from io import BytesIO\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.interface import alsoProvides\ndiff --git a/setup.py b/setup.py\nindex bb7399ae..a148dede 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -24,6 +24,7 @@\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n     ],\n     keywords="plone layout viewlet",\n     author="Plone Foundation",\n@@ -48,7 +49,6 @@\n         "Products.CMFDynamicViewFTI",\n         "Products.CMFEditions >=1.2.2",\n         "setuptools",\n-        "six",\n         "zope.component",\n         "zope.deferredimport",\n         "zope.deprecation",\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-05-04T20:58:39+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.layout/commit/0d30a278a0130bd755ad93e245863f6dce663a06

flake8

Note that IBelowContentDescription was defined twice, exactly the same.

Files changed:
M plone/app/layout/favicon_handler.py
M plone/app/layout/links/tests/test_favicon_viewlet.py
M plone/app/layout/links/viewlets.py
M plone/app/layout/sitemap/tests/test_sitemap.py
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/interfaces.py
M plone/app/layout/viewlets/tests/test_content.py

b'diff --git a/plone/app/layout/favicon_handler.py b/plone/app/layout/favicon_handler.py\nindex cdb3ba31..d5cc7013 100644\n--- a/plone/app/layout/favicon_handler.py\n+++ b/plone/app/layout/favicon_handler.py\n@@ -1,10 +1,8 @@\n from plone.formwidget.namedfile.converter import b64decode_file\n from plone.registry.interfaces import IRecordModifiedEvent\n-from plone.registry.interfaces import IRegistry\n from plone.registry.recordsproxy import RecordsProxy\n from Products.CMFPlone.interfaces import ISiteSchema\n from zope.component import adapter\n-from zope.component import getUtility\n \n import mimetypes\n \ndiff --git a/plone/app/layout/links/tests/test_favicon_viewlet.py b/plone/app/layout/links/tests/test_favicon_viewlet.py\nindex 9231640b..39fd9394 100644\n--- a/plone/app/layout/links/tests/test_favicon_viewlet.py\n+++ b/plone/app/layout/links/tests/test_favicon_viewlet.py\n@@ -1,14 +1,9 @@\n from plone.app.layout.links.viewlets import FaviconViewlet\n from plone.app.layout.testing import FUNCTIONAL_TESTING\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n from plone.formwidget.namedfile.converter import b64encode_file\n-from plone.namedfile.file import NamedBlobFile\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISecuritySchema\n from Products.CMFPlone.interfaces import ISiteSchema\n-from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings\n from zope.component import getUtility\n \n \ndiff --git a/plone/app/layout/links/viewlets.py b/plone/app/layout/links/viewlets.py\nindex c4ee7cc7..4c142039 100644\n--- a/plone/app/layout/links/viewlets.py\n+++ b/plone/app/layout/links/viewlets.py\n@@ -17,8 +17,6 @@\n from zope.component import getUtility\n from zope.schema.interfaces import IVocabularyFactory\n \n-import mimetypes\n-\n \n def get_language(context, request):\n     portal_state = getMultiAdapter((context, request), name="plone_portal_state")\ndiff --git a/plone/app/layout/sitemap/tests/test_sitemap.py b/plone/app/layout/sitemap/tests/test_sitemap.py\nindex f3cbef46..aca32253 100644\n--- a/plone/app/layout/sitemap/tests/test_sitemap.py\n+++ b/plone/app/layout/sitemap/tests/test_sitemap.py\n@@ -1,5 +1,6 @@\n from DateTime import DateTime\n from gzip import GzipFile\n+from io import BytesIO\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.layout.testing import INTEGRATION_TESTING\n from plone.app.testing import login\n@@ -12,7 +13,6 @@\n from Products.CMFPlone.interfaces import ISearchSchema\n from Products.CMFPlone.interfaces import ISiteSchema\n from Products.CMFPlone.utils import safe_unicode\n-from io import BytesIO\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.interface import alsoProvides\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex 56bbb609..829ba8bd 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -6,7 +6,6 @@\n from html import escape\n from plone.app.layout.globals.interfaces import IViewView\n from plone.app.layout.navigation.root import getNavigationRoot\n-from plone.app.layout.navigation.root import getNavigationRootObject\n from plone.i18n.interfaces import ILanguageSchema\n from plone.memoize.view import memoize\n from plone.protect.utils import addTokenToUrl\ndiff --git a/plone/app/layout/viewlets/interfaces.py b/plone/app/layout/viewlets/interfaces.py\nindex cb63b626..aa84997e 100644\n--- a/plone/app/layout/viewlets/interfaces.py\n+++ b/plone/app/layout/viewlets/interfaces.py\n@@ -63,10 +63,6 @@ class IBelowContentDescription(IViewletManager):\n     """A viewlet manager that sits below the content description in view templates"""\n \n \n-class IBelowContentDescription(IViewletManager):\n-    """A viewlet manager that sits below the content description in view templates"""\n-\n-\n class IAboveContentBody(IViewletManager):\n     """A viewlet manager that sits above the content body in view templates"""\n \ndiff --git a/plone/app/layout/viewlets/tests/test_content.py b/plone/app/layout/viewlets/tests/test_content.py\nindex 741897d2..5e7e2c0d 100644\n--- a/plone/app/layout/viewlets/tests/test_content.py\n+++ b/plone/app/layout/viewlets/tests/test_content.py\n@@ -60,9 +60,6 @@ def _get_viewlet(self):\n     def test_pub_date(self):\n         # configure our portal to enable publication date on pages globally on\n         # the site\n-        registry = getUtility(IRegistry)\n-        # settings = registry.forInterface(ISiteSchema, prefix="plone")\n-\n         self.site_settings.display_publication_date_in_byline = True\n \n         logout()\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-05-04T21:06:18+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.layout/commit/b28fcd87a3a3cec8a98c4e15530eeb5b1e2e9efa

use plone.base

Files changed:
M plone/app/layout/globals/context.py
M plone/app/layout/globals/tests/test_tools.py
M plone/app/layout/links/viewlets.py
M plone/app/layout/sitemap/tests/test_sitemap.py
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/content.py
M plone/app/layout/viewlets/tests/test_content.py
M setup.py

b'diff --git a/plone/app/layout/globals/context.py b/plone/app/layout/globals/context.py\nindex b04d58b4..dbe5af62 100644\n--- a/plone/app/layout/globals/context.py\n+++ b/plone/app/layout/globals/context.py\n@@ -3,6 +3,7 @@\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from plone.app.layout.navigation.interfaces import INavigationRoot\n+from plone.base.utils import pretty_title_or_id\n from plone.memoize.view import memoize\n from plone.portlets.interfaces import ILocalPortletAssignable\n from plone.registry.interfaces import IRegistry\n@@ -10,7 +11,6 @@\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.utils import getToolByName\n from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault\n-from Products.CMFPlone import utils\n from Products.CMFPlone.interfaces import INonStructuralFolder\n from Products.Five.browser import BrowserView\n from zope.component import getMultiAdapter\n@@ -142,7 +142,7 @@ def object_url(self):\n     @memoize\n     def object_title(self):\n         context = aq_inner(self.context)\n-        return utils.pretty_title_or_id(context, context)\n+        return pretty_title_or_id(context, context)\n \n     @memoize\n     def workflow_state(self):\ndiff --git a/plone/app/layout/globals/tests/test_tools.py b/plone/app/layout/globals/tests/test_tools.py\nindex 52cf75d9..f35b4481 100644\n--- a/plone/app/layout/globals/tests/test_tools.py\n+++ b/plone/app/layout/globals/tests/test_tools.py\n@@ -1,5 +1,5 @@\n from plone.app.layout.testing import INTEGRATION_TESTING\n-from Products.CMFPlone.utils import getToolByName\n+from Products.CMFCore.utils import getToolByName\n \n import unittest\n \ndiff --git a/plone/app/layout/links/viewlets.py b/plone/app/layout/links/viewlets.py\nindex 4c142039..4fdd0a88 100644\n--- a/plone/app/layout/links/viewlets.py\n+++ b/plone/app/layout/links/viewlets.py\n@@ -1,6 +1,7 @@\n from Acquisition import aq_inner\n from plone.app.layout.viewlets import ViewletBase\n from plone.app.uuid.utils import uuidToObject\n+from plone.base.utils import safe_bytes\n from plone.formwidget.namedfile.converter import b64decode_file\n from plone.memoize import ram\n from plone.memoize import view\n@@ -10,7 +11,6 @@\n from Products.CMFPlone.interfaces import ISiteSchema\n from Products.CMFPlone.interfaces.syndication import IFeedSettings\n from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings\n-from Products.CMFPlone.utils import safe_bytes\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from typing import NoReturn\n from zope.component import getMultiAdapter\ndiff --git a/plone/app/layout/sitemap/tests/test_sitemap.py b/plone/app/layout/sitemap/tests/test_sitemap.py\nindex aca32253..44433e7d 100644\n--- a/plone/app/layout/sitemap/tests/test_sitemap.py\n+++ b/plone/app/layout/sitemap/tests/test_sitemap.py\n@@ -8,11 +8,11 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n+from plone.base.utils import safe_text\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import ISearchSchema\n from Products.CMFPlone.interfaces import ISiteSchema\n-from Products.CMFPlone.utils import safe_unicode\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.interface import alsoProvides\n@@ -74,7 +74,7 @@ def uncompress(self, sitemapdata):\n         unziped = GzipFile(fileobj=sio)\n         xml = unziped.read()\n         unziped.close()\n-        return safe_unicode(xml)\n+        return safe_text(xml)\n \n     def test_disabled(self):\n         """\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex 829ba8bd..72e4fa87 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -6,6 +6,7 @@\n from html import escape\n from plone.app.layout.globals.interfaces import IViewView\n from plone.app.layout.navigation.root import getNavigationRoot\n+from plone.base.utils import safe_text\n from plone.i18n.interfaces import ILanguageSchema\n from plone.memoize.view import memoize\n from plone.protect.utils import addTokenToUrl\n@@ -17,7 +18,6 @@\n from Products.CMFPlone.interfaces import ISiteSchema\n from Products.CMFPlone.interfaces.controlpanel import INavigationSchema\n from Products.CMFPlone.utils import getSiteLogo\n-from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from urllib.parse import unquote\n@@ -134,7 +134,7 @@ def page_title(self):\n         context_state = getMultiAdapter(\n             (self.context, self.request), name="plone_context_state"\n         )\n-        return escape(safe_unicode(context_state.object_title()))\n+        return escape(safe_text(context_state.object_title()))\n \n     def update(self):\n         if IPloneSiteRoot.providedBy(self.context):\n@@ -146,7 +146,7 @@ def update(self):\n         if IPloneSiteRoot.providedBy(portal_state.navigation_root()):\n             portal_title = self.site_title_setting\n         else:\n-            portal_title = escape(safe_unicode(portal_state.navigation_root_title()))\n+            portal_title = escape(safe_text(portal_state.navigation_root_title()))\n         if self.page_title == portal_title:\n             self.site_title = portal_title\n         else:\n@@ -294,9 +294,9 @@ def navtree(self):\n                     entry["title"], domain="plone", context=self.request\n                 )\n \n-            entry["title"] = escape(safe_unicode(entry["title"]))\n+            entry["title"] = escape(safe_text(entry["title"]))\n             if "name" in entry and entry["name"]:\n-                entry["name"] = escape(safe_unicode(entry["name"]))\n+                entry["name"] = escape(safe_text(entry["name"]))\n             self.customize_tab(entry, tab)\n             ret[navtree_path].append(entry)\n \n@@ -350,7 +350,7 @@ def navtree(self):\n                 "path": brain_path,\n                 "uid": brain.UID,\n                 "url": url,\n-                "title": escape(safe_unicode(brain.Title)),\n+                "title": escape(safe_text(brain.Title)),\n                 "review_state": brain.review_state,\n             }\n             self.customize_entry(entry, brain)\ndiff --git a/plone/app/layout/viewlets/content.py b/plone/app/layout/viewlets/content.py\nindex 25c58db4..eb3174ef 100644\n--- a/plone/app/layout/viewlets/content.py\n+++ b/plone/app/layout/viewlets/content.py\n@@ -7,6 +7,7 @@\n from plone.app.multilingual.browser.vocabularies import translated_languages\n from plone.app.multilingual.interfaces import ITranslatable\n from plone.app.multilingual.interfaces import ITranslationManager\n+from plone.base.utils import base_hasattr\n from plone.memoize.instance import memoize\n from plone.protect.authenticator import createToken\n from plone.registry.interfaces import IRegistry\n@@ -17,7 +18,6 @@\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.interfaces import ISecuritySchema\n from Products.CMFPlone.interfaces import ISiteSchema\n-from Products.CMFPlone.utils import base_hasattr\n from Products.CMFPlone.utils import log\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\ndiff --git a/plone/app/layout/viewlets/tests/test_content.py b/plone/app/layout/viewlets/tests/test_content.py\nindex 5e7e2c0d..22faf63e 100644\n--- a/plone/app/layout/viewlets/tests/test_content.py\n+++ b/plone/app/layout/viewlets/tests/test_content.py\n@@ -249,7 +249,7 @@ class TestDexterityRelatedItemsViewlet(ViewletsTestCase):\n     def setUp(self):\n         super().setUp()\n         """ create some sample content to test with """\n-        from Products.CMFPlone.utils import get_installer\n+        from plone.base.utils import get_installer\n \n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         fti = DexterityFTI("Dexterity Item with relatedItems behavior")\ndiff --git a/setup.py b/setup.py\nindex a148dede..abf85da2 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -40,6 +40,7 @@\n         "DateTime",\n         "plone.app.content",\n         "plone.app.viewletmanager >=1.2",\n+        "plone.base",\n         "plone.batching >1.0.999",\n         "plone.i18n",\n         "plone.memoize",\n@@ -58,7 +59,7 @@\n         "zope.publisher",\n         "zope.schema",\n         "zope.viewlet",\n-        "Zope2",\n+        "Zope",\n     ],\n     extras_require=dict(\n         test=[\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-05-04T21:45:08+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.layout/commit/ecf369b6fb72804a2757632de00293c369bdef10

Add news snippet.

Files changed:
A news/302.breaking

b'diff --git a/news/302.breaking b/news/302.breaking\nnew file mode 100644\nindex 00000000..c8485a01\n--- /dev/null\n+++ b/news/302.breaking\n@@ -0,0 +1 @@\n+Use ``plone.base``, black, isort.  [maurits]\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-05-04T21:57:08+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.layout/commit/37e7f9703339a386690af62cbcb1b52862da664a

Get more from plone.base

Files changed:
M plone/app/layout/links/tests/test_rssviewlet.py
M plone/app/layout/links/viewlets.py
M plone/app/layout/navigation/navtree.py

b'diff --git a/plone/app/layout/links/tests/test_rssviewlet.py b/plone/app/layout/links/tests/test_rssviewlet.py\nindex 50f1866b..ae12c856 100644\n--- a/plone/app/layout/links/tests/test_rssviewlet.py\n+++ b/plone/app/layout/links/tests/test_rssviewlet.py\n@@ -2,8 +2,8 @@\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.base.interfaces import ISiteSyndicationSettings\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings\n from zope.component import getUtility\n \n \ndiff --git a/plone/app/layout/links/viewlets.py b/plone/app/layout/links/viewlets.py\nindex 4fdd0a88..6bafc232 100644\n--- a/plone/app/layout/links/viewlets.py\n+++ b/plone/app/layout/links/viewlets.py\n@@ -1,6 +1,8 @@\n from Acquisition import aq_inner\n from plone.app.layout.viewlets import ViewletBase\n from plone.app.uuid.utils import uuidToObject\n+from plone.base.interfaces import ISiteSyndicationSettings\n+from plone.base.interfaces.syndication import IFeedSettings\n from plone.base.utils import safe_bytes\n from plone.formwidget.namedfile.converter import b64decode_file\n from plone.memoize import ram\n@@ -9,8 +11,6 @@\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import ISecuritySchema\n from Products.CMFPlone.interfaces import ISiteSchema\n-from Products.CMFPlone.interfaces.syndication import IFeedSettings\n-from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from typing import NoReturn\n from zope.component import getMultiAdapter\ndiff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex c9ec123a..00de3bbd 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -2,8 +2,8 @@\n # from catalog queries.\n \n from plone.app.layout.navigation.interfaces import INavtreeStrategy\n+from plone.base.defaultpage import check_default_page_via_view\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.defaultpage import check_default_page_via_view\n from zope.interface import implementer\n \n \n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-05-04T22:20:18+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.layout/commit/1fc9a13661ba21e9fb485d5a3da764ed07e87bab

Remove deprecated code.

Files changed:
M plone/app/layout/globals/interfaces.py
M plone/app/layout/navigation/interfaces.py
M plone/app/layout/viewlets/common.py
D plone/app/layout/globals/patterns_settings.py
D plone/app/layout/navigation/defaultpage.py

b'diff --git a/plone/app/layout/globals/interfaces.py b/plone/app/layout/globals/interfaces.py\nindex f521bc6c..db5fdeae 100644\n--- a/plone/app/layout/globals/interfaces.py\n+++ b/plone/app/layout/globals/interfaces.py\n@@ -1,4 +1,3 @@\n-from zope.deprecation import deprecated\n from zope.interface import Interface\n \n \n@@ -230,15 +229,3 @@ class IViewView(Interface):\n \n class IBodyClassAdapter(Interface):\n     """Adapter interface for retrieving extra body classes."""\n-\n-\n-class IPatternsSettingsRenderer(Interface):\n-    """Interface for the adapter that renders the settings for patterns\n-\n-    DEPRECATED\n-    """\n-\n-\n-IPatternsSettingsRenderer = deprecated(\n-    IPatternsSettingsRenderer, "This interface was deprecated because it was pointless."\n-)\ndiff --git a/plone/app/layout/globals/patterns_settings.py b/plone/app/layout/globals/patterns_settings.py\ndeleted file mode 100644\nindex e77d85d8..00000000\n--- a/plone/app/layout/globals/patterns_settings.py\n+++ /dev/null\n@@ -1,7 +0,0 @@\n-from zope.deferredimport import deprecated\n-\n-\n-deprecated(\n-    "Import from Products.CMFPlone.patterns.view instead",\n-    PatternSettings="Products.CMFPlone.patterns.view.PatternSettingsView",\n-)\ndiff --git a/plone/app/layout/navigation/defaultpage.py b/plone/app/layout/navigation/defaultpage.py\ndeleted file mode 100644\nindex 6e8f26fa..00000000\n--- a/plone/app/layout/navigation/defaultpage.py\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-from zope.deferredimport import deprecated\n-\n-\n-# remove in Plone 6\n-deprecated(\n-    "Import from Products.CMFPlone instead",\n-    DefaultPage="Products.CMFPlone.browser.defaultpage:DefaultPage",\n-    isDefaultPage="Products.CMFPlone.defaultpage:is_default_page",\n-    getDefaultPage="Products.CMFPlone.defaultpage:get_default_page",\n-)\ndiff --git a/plone/app/layout/navigation/interfaces.py b/plone/app/layout/navigation/interfaces.py\nindex c41a0a38..f2ac6275 100644\n--- a/plone/app/layout/navigation/interfaces.py\n+++ b/plone/app/layout/navigation/interfaces.py\n@@ -1,15 +1,7 @@\n-from zope.deferredimport import deprecated\n from zope.interface import Attribute\n from zope.interface import Interface\n \n \n-# remove in plone 6\n-deprecated(\n-    "Import from Products.CMFPlone instead",\n-    IDefaultPage="Products.CMFPlone.interfaces.defaultpage:DefaultPage",\n-)\n-\n-\n class INavigationRoot(Interface):\n     """A marker interface for signaling the navigation root."""\n \ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex 72e4fa87..3400571a 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -24,7 +24,6 @@\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.component import queryMultiAdapter\n-from zope.deprecation.deprecation import deprecate\n from zope.i18n import translate\n from zope.interface import alsoProvides\n from zope.interface import implementer\n@@ -58,13 +57,6 @@ def __init__(self, context, request, view, manager=None):\n     def __hash__(self):\n         return id(self) * 16\n \n-    @property\n-    @deprecate(\n-        "Use site_url instead. " + "ViewletBase.portal_url will be removed in Plone 4"\n-    )\n-    def portal_url(self):\n-        return self.site_url\n-\n     def update(self):\n         self.portal_state = getMultiAdapter(\n             (self.context, self.request), name="plone_portal_state"\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-05-04T22:24:13+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.layout/commit/ffa142edb7d8ee5193746a60614d121eb0b0d8c8

Get interfaces from plone.base.

I searched and replaced and it worked. :-)

Files changed:
M plone/app/layout/analytics/tests/analytics.txt
M plone/app/layout/analytics/view.py
M plone/app/layout/favicon_handler.py
M plone/app/layout/globals/context.py
M plone/app/layout/globals/layout.py
M plone/app/layout/globals/portal.py
M plone/app/layout/globals/tests/test_context.py
M plone/app/layout/globals/tests/test_layout.py
M plone/app/layout/globals/tests/test_portal.py
M plone/app/layout/icons/configure.zcml
M plone/app/layout/links/tests/test_favicon_viewlet.py
M plone/app/layout/links/viewlets.py
M plone/app/layout/sitemap/sitemap.py
M plone/app/layout/sitemap/tests/test_sitemap.py
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/content.py
M plone/app/layout/viewlets/social.py
M plone/app/layout/viewlets/tests/test_common.py
M plone/app/layout/viewlets/tests/test_content.py
M plone/app/layout/viewlets/tests/test_social.py
M plone/app/layout/viewlets/toolbar.py

b'diff --git a/plone/app/layout/analytics/tests/analytics.txt b/plone/app/layout/analytics/tests/analytics.txt\nindex 9a914756..4826dda2 100644\n--- a/plone/app/layout/analytics/tests/analytics.txt\n+++ b/plone/app/layout/analytics/tests/analytics.txt\n@@ -30,7 +30,7 @@ Set the analytics code through the controlpanel and verify it renders properly:\n \n     >>> from plone.registry.interfaces import IRegistry\n     >>> from zope.component import getUtility\n-    >>> from Products.CMFPlone.interfaces import ISiteSchema\n+    >>> from plone.base.interfaces import ISiteSchema\n     >>> registry = getUtility(IRegistry)\n     >>> site_settings = registry.forInterface(ISiteSchema, prefix="plone")\n     >>> site_settings.webstats_js = u"<script>window.title=\'Hello\'</script>"\ndiff --git a/plone/app/layout/analytics/view.py b/plone/app/layout/analytics/view.py\nindex 7a85b69f..5de1a4a4 100644\n--- a/plone/app/layout/analytics/view.py\n+++ b/plone/app/layout/analytics/view.py\n@@ -1,5 +1,5 @@\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISiteSchema\n+from plone.base.interfaces import ISiteSchema\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.component import getUtility\ndiff --git a/plone/app/layout/favicon_handler.py b/plone/app/layout/favicon_handler.py\nindex d5cc7013..439dec25 100644\n--- a/plone/app/layout/favicon_handler.py\n+++ b/plone/app/layout/favicon_handler.py\n@@ -1,7 +1,7 @@\n from plone.formwidget.namedfile.converter import b64decode_file\n from plone.registry.interfaces import IRecordModifiedEvent\n from plone.registry.recordsproxy import RecordsProxy\n-from Products.CMFPlone.interfaces import ISiteSchema\n+from plone.base.interfaces import ISiteSchema\n from zope.component import adapter\n \n import mimetypes\ndiff --git a/plone/app/layout/globals/context.py b/plone/app/layout/globals/context.py\nindex dbe5af62..e4fbb109 100644\n--- a/plone/app/layout/globals/context.py\n+++ b/plone/app/layout/globals/context.py\n@@ -11,7 +11,7 @@\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.utils import getToolByName\n from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault\n-from Products.CMFPlone.interfaces import INonStructuralFolder\n+from plone.base.interfaces import INonStructuralFolder\n from Products.Five.browser import BrowserView\n from zope.component import getMultiAdapter\n from zope.component import getUtility\ndiff --git a/plone/app/layout/globals/layout.py b/plone/app/layout/globals/layout.py\nindex e47064cc..ee8e21e7 100644\n--- a/plone/app/layout/globals/layout.py\n+++ b/plone/app/layout/globals/layout.py\n@@ -8,8 +8,8 @@\n from plone.portlets.interfaces import IPortletManagerRenderer\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.controlpanel import ILinkSchema\n-from Products.CMFPlone.interfaces.controlpanel import ISiteSchema\n+from plone.base.interfaces.controlpanel import ILinkSchema\n+from plone.base.interfaces.controlpanel import ISiteSchema\n from Products.Five.browser.metaconfigure import ViewMixinForTemplates\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.browserpage.viewpagetemplatefile import (\ndiff --git a/plone/app/layout/globals/portal.py b/plone/app/layout/globals/portal.py\nindex b98e63ed..07a5a6ea 100644\n--- a/plone/app/layout/globals/portal.py\n+++ b/plone/app/layout/globals/portal.py\n@@ -8,8 +8,8 @@\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import ISearchSchema\n-from Products.CMFPlone.interfaces import ISiteSchema\n+from plone.base.interfaces import ISearchSchema\n+from plone.base.interfaces import ISiteSchema\n from Products.Five.browser import BrowserView\n from zope.component import getUtility\n from zope.component import providedBy\ndiff --git a/plone/app/layout/globals/tests/test_context.py b/plone/app/layout/globals/tests/test_context.py\nindex f9a9886c..e1f5eb1c 100644\n--- a/plone/app/layout/globals/tests/test_context.py\n+++ b/plone/app/layout/globals/tests/test_context.py\n@@ -5,7 +5,7 @@\n from plone.app.testing.helpers import logout\n from plone.locking.interfaces import ILockable\n from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault\n-from Products.CMFPlone.interfaces import INonStructuralFolder\n+from plone.base.interfaces import INonStructuralFolder\n from Products.CMFPlone.utils import _createObjectByType\n from zope.interface import alsoProvides\n from zope.interface import directlyProvides\ndiff --git a/plone/app/layout/globals/tests/test_layout.py b/plone/app/layout/globals/tests/test_layout.py\nindex efcd5db7..ee86ecd9 100644\n--- a/plone/app/layout/globals/tests/test_layout.py\n+++ b/plone/app/layout/globals/tests/test_layout.py\n@@ -5,7 +5,7 @@\n from plone.app.testing.helpers import logout\n from plone.portlets.interfaces import IPortletType\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces.controlpanel import ILinkSchema\n+from plone.base.interfaces.controlpanel import ILinkSchema\n from zope.component import getUtility\n \n import os\ndiff --git a/plone/app/layout/globals/tests/test_portal.py b/plone/app/layout/globals/tests/test_portal.py\nindex cf28efd5..a029337b 100644\n--- a/plone/app/layout/globals/tests/test_portal.py\n+++ b/plone/app/layout/globals/tests/test_portal.py\n@@ -6,8 +6,8 @@\n from plone.app.testing.helpers import logout\n from plone.i18n.interfaces import ILanguageSchema\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISearchSchema\n-from Products.CMFPlone.interfaces import ISiteSchema\n+from plone.base.interfaces import ISearchSchema\n+from plone.base.interfaces import ISiteSchema\n from zope.component import getUtility\n from zope.event import notify\n from zope.i18n.locales import locales\ndiff --git a/plone/app/layout/icons/configure.zcml b/plone/app/layout/icons/configure.zcml\nindex c357ddd4..1d5f8d69 100644\n--- a/plone/app/layout/icons/configure.zcml\n+++ b/plone/app/layout/icons/configure.zcml\n@@ -29,7 +29,7 @@\n \n   <adapter for="*\n                 zope.publisher.interfaces.browser.IBrowserRequest\n-                Products.CMFPlone.interfaces.IPloneSiteRoot"\n+                plone.base.interfaces.IPloneSiteRoot"\n            factory=".icons.PloneSiteContentIcon"\n            provides=".interfaces.IContentIcon" />\n \ndiff --git a/plone/app/layout/links/tests/test_favicon_viewlet.py b/plone/app/layout/links/tests/test_favicon_viewlet.py\nindex 39fd9394..17d8673b 100644\n--- a/plone/app/layout/links/tests/test_favicon_viewlet.py\n+++ b/plone/app/layout/links/tests/test_favicon_viewlet.py\n@@ -3,7 +3,7 @@\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n from plone.formwidget.namedfile.converter import b64encode_file\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISiteSchema\n+from plone.base.interfaces import ISiteSchema\n from zope.component import getUtility\n \n \ndiff --git a/plone/app/layout/links/viewlets.py b/plone/app/layout/links/viewlets.py\nindex 6bafc232..08e868fe 100644\n--- a/plone/app/layout/links/viewlets.py\n+++ b/plone/app/layout/links/viewlets.py\n@@ -9,8 +9,8 @@\n from plone.memoize import view\n from plone.memoize.compress import xhtml_compress\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISecuritySchema\n-from Products.CMFPlone.interfaces import ISiteSchema\n+from plone.base.interfaces import ISecuritySchema\n+from plone.base.interfaces import ISiteSchema\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from typing import NoReturn\n from zope.component import getMultiAdapter\ndiff --git a/plone/app/layout/sitemap/sitemap.py b/plone/app/layout/sitemap/sitemap.py\nindex 8a417cb5..a897ee69 100644\n--- a/plone/app/layout/sitemap/sitemap.py\n+++ b/plone/app/layout/sitemap/sitemap.py\n@@ -4,8 +4,8 @@\n from plone.memoize import ram\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n-from Products.CMFPlone.interfaces import ISiteSchema\n+from plone.base.interfaces import IPloneSiteRoot\n+from plone.base.interfaces import ISiteSchema\n from Products.Five import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.component import getUtility\ndiff --git a/plone/app/layout/sitemap/tests/test_sitemap.py b/plone/app/layout/sitemap/tests/test_sitemap.py\nindex 44433e7d..113fbfed 100644\n--- a/plone/app/layout/sitemap/tests/test_sitemap.py\n+++ b/plone/app/layout/sitemap/tests/test_sitemap.py\n@@ -11,8 +11,8 @@\n from plone.base.utils import safe_text\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import ISearchSchema\n-from Products.CMFPlone.interfaces import ISiteSchema\n+from plone.base.interfaces import ISearchSchema\n+from plone.base.interfaces import ISiteSchema\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.interface import alsoProvides\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex 3400571a..0beddc00 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -13,10 +13,10 @@\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n-from Products.CMFPlone.interfaces import ISearchSchema\n-from Products.CMFPlone.interfaces import ISiteSchema\n-from Products.CMFPlone.interfaces.controlpanel import INavigationSchema\n+from plone.base.interfaces import IPloneSiteRoot\n+from plone.base.interfaces import ISearchSchema\n+from plone.base.interfaces import ISiteSchema\n+from plone.base.interfaces.controlpanel import INavigationSchema\n from Products.CMFPlone.utils import getSiteLogo\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\ndiff --git a/plone/app/layout/viewlets/content.py b/plone/app/layout/viewlets/content.py\nindex eb3174ef..92fe59e4 100644\n--- a/plone/app/layout/viewlets/content.py\n+++ b/plone/app/layout/viewlets/content.py\n@@ -16,8 +16,8 @@\n from Products.CMFCore.WorkflowCore import WorkflowException\n from Products.CMFEditions.Permissions import AccessPreviousVersions\n from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.interfaces import ISecuritySchema\n-from Products.CMFPlone.interfaces import ISiteSchema\n+from plone.base.interfaces import ISecuritySchema\n+from plone.base.interfaces import ISiteSchema\n from Products.CMFPlone.utils import log\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\ndiff --git a/plone/app/layout/viewlets/social.py b/plone/app/layout/viewlets/social.py\nindex c84c6256..07bba8d7 100644\n--- a/plone/app/layout/viewlets/social.py\n+++ b/plone/app/layout/viewlets/social.py\n@@ -4,8 +4,8 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.browser.syndication.adapters import BaseItem\n from Products.CMFPlone.browser.syndication.adapters import FolderFeed\n-from Products.CMFPlone.interfaces import ISocialMediaSchema\n-from Products.CMFPlone.interfaces.syndication import IFeedItem\n+from plone.base.interfaces import ISocialMediaSchema\n+from plone.base.interfaces.syndication import IFeedItem\n from Products.CMFPlone.utils import getSiteLogo\n from zope.component import getUtility\n from zope.component import queryMultiAdapter\ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex 75672825..9332a02a 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -13,8 +13,8 @@\n from plone.protect import authenticator as auth\n from plone.registry.interfaces import IRegistry\n from plone.testing.zope import Browser\n-from Products.CMFPlone.interfaces import INonStructuralFolder\n-from Products.CMFPlone.interfaces import ISiteSchema\n+from plone.base.interfaces import INonStructuralFolder\n+from plone.base.interfaces import ISiteSchema\n from zope.component import getUtility\n from zope.component.hooks import setSite\n from zope.interface import alsoProvides\ndiff --git a/plone/app/layout/viewlets/tests/test_content.py b/plone/app/layout/viewlets/tests/test_content.py\nindex 22faf63e..9df8fe79 100644\n--- a/plone/app/layout/viewlets/tests/test_content.py\n+++ b/plone/app/layout/viewlets/tests/test_content.py\n@@ -8,8 +8,8 @@\n from plone.app.testing import TEST_USER_ID\n from plone.locking.interfaces import ILockable\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISecuritySchema\n-from Products.CMFPlone.interfaces import ISiteSchema\n+from plone.base.interfaces import ISecuritySchema\n+from plone.base.interfaces import ISiteSchema\n from z3c.relationfield import RelationValue\n from zope.component import getUtility\n from zope.interface import Interface\ndiff --git a/plone/app/layout/viewlets/tests/test_social.py b/plone/app/layout/viewlets/tests/test_social.py\nindex bd942fd2..32bc4f72 100644\n--- a/plone/app/layout/viewlets/tests/test_social.py\n+++ b/plone/app/layout/viewlets/tests/test_social.py\n@@ -6,7 +6,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISocialMediaSchema\n+from plone.base.interfaces import ISocialMediaSchema\n from zope.annotation.interfaces import IAnnotations\n from zope.component import getUtility\n \ndiff --git a/plone/app/layout/viewlets/toolbar.py b/plone/app/layout/viewlets/toolbar.py\nindex 8aad707a..09aaaf65 100644\n--- a/plone/app/layout/viewlets/toolbar.py\n+++ b/plone/app/layout/viewlets/toolbar.py\n@@ -2,7 +2,7 @@\n from plone.app.viewletmanager.manager import OrderedViewletManager\n from plone.memoize.instance import memoize\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces.controlpanel import ISiteSchema\n+from plone.base.interfaces.controlpanel import ISiteSchema\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-05-05T11:57:25+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.layout/commit/8e589e64ac472993a4d8bcc1bd83d2de5f5ef87a

Merge pull request #302 from plone/base-overhaul

Base overhaul

Files changed:
A news/302.breaking
M plone/__init__.py
M plone/app/layout/__init__.py
M plone/app/layout/analytics/__init__.py
M plone/app/layout/analytics/tests/__init__.py
M plone/app/layout/analytics/tests/analytics.txt
M plone/app/layout/analytics/tests/test_doctests.py
M plone/app/layout/analytics/view.py
M plone/app/layout/dashboard/dashboard.py
M plone/app/layout/dashboard/user_actions.py
M plone/app/layout/favicon_handler.py
M plone/app/layout/globals/__init__.py
M plone/app/layout/globals/context.py
M plone/app/layout/globals/interface.py
M plone/app/layout/globals/interfaces.py
M plone/app/layout/globals/layout.py
M plone/app/layout/globals/portal.py
M plone/app/layout/globals/tests/__init__.py
M plone/app/layout/globals/tests/test_context.py
M plone/app/layout/globals/tests/test_interface.py
M plone/app/layout/globals/tests/test_layout.py
M plone/app/layout/globals/tests/test_portal.py
M plone/app/layout/globals/tests/test_tools.py
M plone/app/layout/globals/tools.py
M plone/app/layout/icons/__init__.py
M plone/app/layout/icons/configure.zcml
M plone/app/layout/icons/icons.py
M plone/app/layout/icons/interfaces.py
M plone/app/layout/links/__init__.py
M plone/app/layout/links/tests/__init__.py
M plone/app/layout/links/tests/test_canonical_url.py
M plone/app/layout/links/tests/test_favicon_viewlet.py
M plone/app/layout/links/tests/test_rssviewlet.py
M plone/app/layout/links/viewlets.py
M plone/app/layout/navigation/__init__.py
M plone/app/layout/navigation/interfaces.py
M plone/app/layout/navigation/navtree.py
M plone/app/layout/navigation/root.py
M plone/app/layout/navigation/tests/test_root.py
M plone/app/layout/nextprevious/__init__.py
M plone/app/layout/nextprevious/interfaces.py
M plone/app/layout/nextprevious/view.py
M plone/app/layout/sitemap/__init__.py
M plone/app/layout/sitemap/sitemap.py
M plone/app/layout/sitemap/tests/__init__.py
M plone/app/layout/sitemap/tests/test_sitemap.py
M plone/app/layout/testing.py
M plone/app/layout/viewlets/__init__.py
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/content.py
M plone/app/layout/viewlets/globalstatusmessage.py
M plone/app/layout/viewlets/httpheaders.py
M plone/app/layout/viewlets/interfaces.py
M plone/app/layout/viewlets/social.py
M plone/app/layout/viewlets/tests/base.py
M plone/app/layout/viewlets/tests/test_common.py
M plone/app/layout/viewlets/tests/test_content.py
M plone/app/layout/viewlets/tests/test_functional.py
M plone/app/layout/viewlets/tests/test_history.py
M plone/app/layout/viewlets/tests/test_social.py
M plone/app/layout/viewlets/toolbar.py
M setup.cfg
M setup.py
D plone/app/layout/globals/patterns_settings.py
D plone/app/layout/navigation/defaultpage.py

b'diff --git a/news/302.breaking b/news/302.breaking\nnew file mode 100644\nindex 00000000..c8485a01\n--- /dev/null\n+++ b/news/302.breaking\n@@ -0,0 +1 @@\n+Use ``plone.base``, black, isort.  [maurits]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 03d08ffd..5284146e 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/layout/__init__.py b/plone/app/layout/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/layout/__init__.py\n+++ b/plone/app/layout/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/layout/analytics/__init__.py b/plone/app/layout/analytics/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/layout/analytics/__init__.py\n+++ b/plone/app/layout/analytics/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/layout/analytics/tests/__init__.py b/plone/app/layout/analytics/tests/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/layout/analytics/tests/__init__.py\n+++ b/plone/app/layout/analytics/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/layout/analytics/tests/analytics.txt b/plone/app/layout/analytics/tests/analytics.txt\nindex 9a914756..4826dda2 100644\n--- a/plone/app/layout/analytics/tests/analytics.txt\n+++ b/plone/app/layout/analytics/tests/analytics.txt\n@@ -30,7 +30,7 @@ Set the analytics code through the controlpanel and verify it renders properly:\n \n     >>> from plone.registry.interfaces import IRegistry\n     >>> from zope.component import getUtility\n-    >>> from Products.CMFPlone.interfaces import ISiteSchema\n+    >>> from plone.base.interfaces import ISiteSchema\n     >>> registry = getUtility(IRegistry)\n     >>> site_settings = registry.forInterface(ISiteSchema, prefix="plone")\n     >>> site_settings.webstats_js = u"<script>window.title=\'Hello\'</script>"\ndiff --git a/plone/app/layout/analytics/tests/test_doctests.py b/plone/app/layout/analytics/tests/test_doctests.py\nindex 2ab3cd61..ab2b2e05 100644\n--- a/plone/app/layout/analytics/tests/test_doctests.py\n+++ b/plone/app/layout/analytics/tests/test_doctests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.testing import FUNCTIONAL_TESTING\n from plone.testing import layered\n \ndiff --git a/plone/app/layout/analytics/view.py b/plone/app/layout/analytics/view.py\nindex 4a41531b..5de1a4a4 100644\n--- a/plone/app/layout/analytics/view.py\n+++ b/plone/app/layout/analytics/view.py\n@@ -1,6 +1,5 @@\n-# -*- coding: utf-8 -*-\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISiteSchema\n+from plone.base.interfaces import ISiteSchema\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.component import getUtility\n@@ -14,7 +13,7 @@ class AnalyticsViewlet(BrowserView):\n     render = ViewPageTemplateFile("view.pt")\n \n     def __init__(self, context, request, view, manager):\n-        super(AnalyticsViewlet, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.__parent__ = view\n         self.view = view\n         self.manager = manager\n@@ -24,9 +23,9 @@ def webstats_js(self):\n         registry = getUtility(IRegistry)\n         site_settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         try:\n-            return site_settings.webstats_js or u""\n+            return site_settings.webstats_js or ""\n         except AttributeError:\n-            return u""\n+            return ""\n \n     def update(self):\n         """The viewlet manager _updateViewlets requires this method"""\ndiff --git a/plone/app/layout/dashboard/dashboard.py b/plone/app/layout/dashboard/dashboard.py\nindex d305b5a6..6ada84e7 100644\n--- a/plone/app/layout/dashboard/dashboard.py\n+++ b/plone/app/layout/dashboard/dashboard.py\n@@ -1,3 +1,4 @@\n from zope.deprecation import moved\n \n+\n moved("plone.app.portlets.dashboard.dashboard", "Version 5.0")\ndiff --git a/plone/app/layout/dashboard/user_actions.py b/plone/app/layout/dashboard/user_actions.py\nindex 8e0ce46e..0edf7112 100644\n--- a/plone/app/layout/dashboard/user_actions.py\n+++ b/plone/app/layout/dashboard/user_actions.py\n@@ -1,3 +1,4 @@\n from zope.deprecation import moved\n \n+\n moved("plone.app.portlets.dashboard.user_actions", "Version 5.0")\ndiff --git a/plone/app/layout/favicon_handler.py b/plone/app/layout/favicon_handler.py\nindex 5af3ca0c..439dec25 100644\n--- a/plone/app/layout/favicon_handler.py\n+++ b/plone/app/layout/favicon_handler.py\n@@ -1,23 +1,22 @@\n-from zope.component import adapter\n-from plone.registry.interfaces import IRecordModifiedEvent\n-from Products.CMFPlone.interfaces import ISiteSchema\n from plone.formwidget.namedfile.converter import b64decode_file\n-import mimetypes\n-from zope.component import getUtility\n-from plone.registry.interfaces import IRegistry\n+from plone.registry.interfaces import IRecordModifiedEvent\n from plone.registry.recordsproxy import RecordsProxy\n+from plone.base.interfaces import ISiteSchema\n+from zope.component import adapter\n+\n+import mimetypes\n \n \n @adapter(ISiteSchema, IRecordModifiedEvent)\n-def updateMimetype(settings: RecordsProxy, event: IRecordModifiedEvent=None):\n+def updateMimetype(settings: RecordsProxy, event: IRecordModifiedEvent = None):\n \n-    if event.record.fieldName != \'site_favicon\' or not event.record.value:\n+    if event.record.fieldName != "site_favicon" or not event.record.value:\n         return\n \n     filename = b64decode_file(event.newValue)[0]\n     mimetype = mimetypes.guess_type(filename)[0] if filename else None\n-    if mimetype in (\'image/x-icon\', None):\n+    if mimetype in ("image/x-icon", None):\n         # Override incorrect MIME type registered in both PIL and the\n         # Products.MimetypesRegistry product.\n-        mimetype = \'image/vnd.microsoft.icon\'\n-    settings.__registry__[\'plone.site_favicon_mimetype\'] = mimetype\n+        mimetype = "image/vnd.microsoft.icon"\n+    settings.__registry__["plone.site_favicon_mimetype"] = mimetype\ndiff --git a/plone/app/layout/globals/__init__.py b/plone/app/layout/globals/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/layout/globals/__init__.py\n+++ b/plone/app/layout/globals/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/layout/globals/context.py b/plone/app/layout/globals/context.py\nindex 3de9b9bd..e4fbb109 100644\n--- a/plone/app/layout/globals/context.py\n+++ b/plone/app/layout/globals/context.py\n@@ -1,9 +1,9 @@\n-# -*- coding: utf-8 -*-\n from .interfaces import IContextState\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from plone.app.layout.navigation.interfaces import INavigationRoot\n+from plone.base.utils import pretty_title_or_id\n from plone.memoize.view import memoize\n from plone.portlets.interfaces import ILocalPortletAssignable\n from plone.registry.interfaces import IRegistry\n@@ -11,8 +11,7 @@\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.utils import getToolByName\n from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault\n-from Products.CMFPlone import utils\n-from Products.CMFPlone.interfaces import INonStructuralFolder\n+from plone.base.interfaces import INonStructuralFolder\n from Products.Five.browser import BrowserView\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n@@ -143,7 +142,7 @@ def object_url(self):\n     @memoize\n     def object_title(self):\n         context = aq_inner(self.context)\n-        return utils.pretty_title_or_id(context, context)\n+        return pretty_title_or_id(context, context)\n \n     @memoize\n     def workflow_state(self):\ndiff --git a/plone/app/layout/globals/interface.py b/plone/app/layout/globals/interface.py\nindex d2381353..ccd5ce92 100644\n--- a/plone/app/layout/globals/interface.py\n+++ b/plone/app/layout/globals/interface.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .interfaces import IInterfaceInformation\n from Acquisition import aq_base\n from plone.memoize.view import memoize\n@@ -18,7 +17,7 @@ def resolveInterface(dotted_name):\n \n \n def getDottedName(iface):\n-    return "%s.%s" % (iface.__module__, iface.__name__)\n+    return f"{iface.__module__}.{iface.__name__}"\n \n \n def _trim_doc_string(text):\ndiff --git a/plone/app/layout/globals/interfaces.py b/plone/app/layout/globals/interfaces.py\nindex 61413a7f..db5fdeae 100644\n--- a/plone/app/layout/globals/interfaces.py\n+++ b/plone/app/layout/globals/interfaces.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-from zope.deprecation import deprecated\n from zope.interface import Interface\n \n \n@@ -231,15 +229,3 @@ class IViewView(Interface):\n \n class IBodyClassAdapter(Interface):\n     """Adapter interface for retrieving extra body classes."""\n-\n-\n-class IPatternsSettingsRenderer(Interface):\n-    """Interface for the adapter that renders the settings for patterns\n-\n-    DEPRECATED\n-    """\n-\n-\n-IPatternsSettingsRenderer = deprecated(\n-    IPatternsSettingsRenderer, "This interface was deprecated because it was pointless."\n-)\ndiff --git a/plone/app/layout/globals/layout.py b/plone/app/layout/globals/layout.py\nindex c85f66ca..ee8e21e7 100644\n--- a/plone/app/layout/globals/layout.py\n+++ b/plone/app/layout/globals/layout.py\n@@ -8,8 +8,8 @@\n from plone.portlets.interfaces import IPortletManagerRenderer\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.controlpanel import ILinkSchema\n-from Products.CMFPlone.interfaces.controlpanel import ISiteSchema\n+from plone.base.interfaces.controlpanel import ILinkSchema\n+from plone.base.interfaces.controlpanel import ISiteSchema\n from Products.Five.browser.metaconfigure import ViewMixinForTemplates\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.browserpage.viewpagetemplatefile import (\n@@ -27,7 +27,6 @@\n from zope.publisher.browser import BrowserView\n \n import json\n-import six\n \n \n TEMPLATE_CLASSES = (\n@@ -36,6 +35,7 @@\n     ViewMixinForTemplates,\n )\n \n+\n @implementer(ILayoutPolicy)\n class LayoutPolicy(BrowserView):\n     """A view that gives access to various layout related functions."""\n@@ -100,7 +100,7 @@ def _image_visibility(self, name):\n         if visibility != "authenticated":\n             return False\n         user = getSecurityManager().getUser()\n-        return user is not None and user.getUserName() != \'Anonymous User\'\n+        return user is not None and user.getUserName() != "Anonymous User"\n \n     @memoize\n     def icons_visible(self):\n@@ -199,7 +199,7 @@ def bodyClass(self, template, view):\n         - pat-markspeciallinks: mark special links is set\n         """\n         portal_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_portal_state"\n+            (self.context, self.request), name="plone_portal_state"\n         )\n         normalizer = queryUtility(IIDNormalizer)\n         registry = getUtility(IRegistry)\n@@ -289,7 +289,7 @@ def bodyClass(self, template, view):\n                 extra_classes = body_class_adapter.get_classes(template, view) or []\n             except TypeError:  # This adapter is implemented without arguments\n                 extra_classes = body_class_adapter.get_classes() or []\n-            if isinstance(extra_classes, six.string_types):\n+            if isinstance(extra_classes, str):\n                 extra_classes = extra_classes.split(" ")\n             body_classes.update(extra_classes)\n \n@@ -298,7 +298,7 @@ def bodyClass(self, template, view):\n \n @adapter(Interface)\n @implementer(IBodyClassAdapter)\n-class DefaultBodyClasses(object):\n+class DefaultBodyClasses:\n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\ndiff --git a/plone/app/layout/globals/patterns_settings.py b/plone/app/layout/globals/patterns_settings.py\ndeleted file mode 100644\nindex 88ee8279..00000000\n--- a/plone/app/layout/globals/patterns_settings.py\n+++ /dev/null\n@@ -1,8 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from zope.deferredimport import deprecated\n-\n-\n-deprecated(\n-    "Import from Products.CMFPlone.patterns.view instead",\n-    PatternSettings="Products.CMFPlone.patterns.view.PatternSettingsView",\n-)\ndiff --git a/plone/app/layout/globals/portal.py b/plone/app/layout/globals/portal.py\nindex 1939cdcd..07a5a6ea 100644\n--- a/plone/app/layout/globals/portal.py\n+++ b/plone/app/layout/globals/portal.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .interfaces import IPortalState\n from Acquisition import aq_inner\n from plone.app.layout.navigation.root import getNavigationRoot\n@@ -9,8 +8,8 @@\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import ISearchSchema\n-from Products.CMFPlone.interfaces import ISiteSchema\n+from plone.base.interfaces import ISearchSchema\n+from plone.base.interfaces import ISiteSchema\n from Products.Five.browser import BrowserView\n from zope.component import getUtility\n from zope.component import providedBy\ndiff --git a/plone/app/layout/globals/tests/__init__.py b/plone/app/layout/globals/tests/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/layout/globals/tests/__init__.py\n+++ b/plone/app/layout/globals/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/layout/globals/tests/test_context.py b/plone/app/layout/globals/tests/test_context.py\nindex 08edbf4c..e1f5eb1c 100644\n--- a/plone/app/layout/globals/tests/test_context.py\n+++ b/plone/app/layout/globals/tests/test_context.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.layout.testing import INTEGRATION_TESTING\n from plone.app.testing import setRoles\n@@ -6,7 +5,7 @@\n from plone.app.testing.helpers import logout\n from plone.locking.interfaces import ILockable\n from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault\n-from Products.CMFPlone.interfaces import INonStructuralFolder\n+from plone.base.interfaces import INonStructuralFolder\n from Products.CMFPlone.utils import _createObjectByType\n from zope.interface import alsoProvides\n from zope.interface import directlyProvides\n@@ -104,7 +103,7 @@ def test_view_template_id_nonbrowserdefault_restricted(self):\n         fti = self.portal.portal_types.TempFolder\n         view_action = fti.getActionObject("object/view")\n         view_perms = view_action.getPermissions()\n-        view_action.edit(permissions=(u"Modify Portal Content",))\n+        view_action.edit(permissions=("Modify Portal Content",))\n \n         tf = _createObjectByType("TempFolder", self.folder, "tf")\n         tf.manage_addLocalRoles(TEST_USER_ID, ("Manager",))\ndiff --git a/plone/app/layout/globals/tests/test_interface.py b/plone/app/layout/globals/tests/test_interface.py\nindex 102d9d5d..b67151ad 100644\n--- a/plone/app/layout/globals/tests/test_interface.py\n+++ b/plone/app/layout/globals/tests/test_interface.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Attribute\n from zope.interface import Interface\n \n@@ -30,7 +29,7 @@ class ITwo(Interface):\n     pass\n \n \n-class NotAnInterface(object):\n+class NotAnInterface:\n     pass\n \n \ndiff --git a/plone/app/layout/globals/tests/test_layout.py b/plone/app/layout/globals/tests/test_layout.py\nindex dd1ad34f..ee86ecd9 100644\n--- a/plone/app/layout/globals/tests/test_layout.py\n+++ b/plone/app/layout/globals/tests/test_layout.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.layout.testing import INTEGRATION_TESTING\n from plone.app.testing import setRoles\n@@ -6,7 +5,7 @@\n from plone.app.testing.helpers import logout\n from plone.portlets.interfaces import IPortletType\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces.controlpanel import ILinkSchema\n+from plone.base.interfaces.controlpanel import ILinkSchema\n from zope.component import getUtility\n \n import os\ndiff --git a/plone/app/layout/globals/tests/test_portal.py b/plone/app/layout/globals/tests/test_portal.py\nindex 9f60e1fa..a029337b 100644\n--- a/plone/app/layout/globals/tests/test_portal.py\n+++ b/plone/app/layout/globals/tests/test_portal.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.app.layout.testing import INTEGRATION_TESTING\n@@ -7,8 +6,8 @@\n from plone.app.testing.helpers import logout\n from plone.i18n.interfaces import ILanguageSchema\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISearchSchema\n-from Products.CMFPlone.interfaces import ISiteSchema\n+from plone.base.interfaces import ISearchSchema\n+from plone.base.interfaces import ISiteSchema\n from zope.component import getUtility\n from zope.event import notify\n from zope.i18n.locales import locales\n@@ -36,7 +35,7 @@ def test_portal(self):\n     def test_portal_title(self):\n         registry = getUtility(IRegistry)\n         self.site_settings = registry.forInterface(ISiteSchema, prefix="plone")\n-        self.site_settings.site_title = u"My title"\n+        self.site_settings.site_title = "My title"\n         self.assertEqual(self.view.portal_title(), "My title")\n \n     def test_portal_url(self):\ndiff --git a/plone/app/layout/globals/tests/test_tools.py b/plone/app/layout/globals/tests/test_tools.py\nindex d7c9d16f..f35b4481 100644\n--- a/plone/app/layout/globals/tests/test_tools.py\n+++ b/plone/app/layout/globals/tests/test_tools.py\n@@ -1,6 +1,5 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.testing import INTEGRATION_TESTING\n-from Products.CMFPlone.utils import getToolByName\n+from Products.CMFCore.utils import getToolByName\n \n import unittest\n \ndiff --git a/plone/app/layout/globals/tools.py b/plone/app/layout/globals/tools.py\nindex 085f4d57..fd04b816 100644\n--- a/plone/app/layout/globals/tools.py\n+++ b/plone/app/layout/globals/tools.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .interfaces import ITools\n from plone.memoize.view import memoize_contextless\n from Products.CMFCore.utils import getToolByName\ndiff --git a/plone/app/layout/icons/__init__.py b/plone/app/layout/icons/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/layout/icons/__init__.py\n+++ b/plone/app/layout/icons/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/layout/icons/configure.zcml b/plone/app/layout/icons/configure.zcml\nindex c357ddd4..1d5f8d69 100644\n--- a/plone/app/layout/icons/configure.zcml\n+++ b/plone/app/layout/icons/configure.zcml\n@@ -29,7 +29,7 @@\n \n   <adapter for="*\n                 zope.publisher.interfaces.browser.IBrowserRequest\n-                Products.CMFPlone.interfaces.IPloneSiteRoot"\n+                plone.base.interfaces.IPloneSiteRoot"\n            factory=".icons.PloneSiteContentIcon"\n            provides=".interfaces.IContentIcon" />\n \ndiff --git a/plone/app/layout/icons/icons.py b/plone/app/layout/icons/icons.py\nindex 607e3567..cb084b39 100644\n--- a/plone/app/layout/icons/icons.py\n+++ b/plone/app/layout/icons/icons.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from plone.app.layout.icons.interfaces import IContentIcon\n@@ -11,7 +10,7 @@\n from zope.interface import implementer\n \n \n-class BaseIcon(object):\n+class BaseIcon:\n     """Helper base class for html rendering"""\n \n     __allow_access_to_unprotected_subobjects__ = True\n@@ -25,7 +24,7 @@ def html_tag(self):\n         if not self.url:\n             return None\n \n-        tag = \'<img width="%s" height="%s" src="%s"\' % (\n+        tag = \'<img width="{}" height="{}" src="{}"\'.format(\n             self.width,\n             self.height,\n             self.url,\n@@ -56,10 +55,10 @@ def url(self):\n             return path\n \n         portal_state_view = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_portal_state"\n+            (self.context, self.request), name="plone_portal_state"\n         )\n         portal_url = portal_state_view.portal_url()\n-        return "%s/%s" % (portal_url, path)\n+        return f"{portal_url}/{path}"\n \n     @property\n     def description(self):\n@@ -67,7 +66,7 @@ def description(self):\n         tt = getToolByName(context, "portal_types")\n         fti = tt.get(self.brain["portal_type"])\n         if fti is not None:\n-            res = "%s %s" % (\n+            res = "{} {}".format(\n                 translate(fti.Title(), context=self.request),\n                 self._mimetype(),\n             )\n@@ -121,7 +120,7 @@ def url(self):\n             return path\n \n         portal_url = getToolByName(self.context, "portal_url")()\n-        return "%s/%s" % (portal_url, path)\n+        return f"{portal_url}/{path}"\n \n     @property\n     def description(self):\n@@ -178,7 +177,7 @@ def __init__(self, context, request, obj):\n     def url(self):\n         portal_url = getToolByName(self.context, "portal_url")()\n         portal_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_portal_state"\n+            (self.context, self.request), name="plone_portal_state"\n         )\n         if portal_state.is_rtl():\n             return "%s/rtl-site_icon.png" % portal_url\ndiff --git a/plone/app/layout/icons/interfaces.py b/plone/app/layout/icons/interfaces.py\nindex c40dfbdd..11263b11 100644\n--- a/plone/app/layout/icons/interfaces.py\n+++ b/plone/app/layout/icons/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Attribute\n from zope.interface import Interface\n \ndiff --git a/plone/app/layout/links/__init__.py b/plone/app/layout/links/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/layout/links/__init__.py\n+++ b/plone/app/layout/links/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/layout/links/tests/__init__.py b/plone/app/layout/links/tests/__init__.py\nindex ec51c5a2..792d6005 100644\n--- a/plone/app/layout/links/tests/__init__.py\n+++ b/plone/app/layout/links/tests/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/app/layout/links/tests/test_canonical_url.py b/plone/app/layout/links/tests/test_canonical_url.py\nindex 7c2caee5..308033fd 100644\n--- a/plone/app/layout/links/tests/test_canonical_url.py\n+++ b/plone/app/layout/links/tests/test_canonical_url.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from plone.app.layout.testing import FUNCTIONAL_TESTING\n from plone.testing.zope import Browser\n \ndiff --git a/plone/app/layout/links/tests/test_favicon_viewlet.py b/plone/app/layout/links/tests/test_favicon_viewlet.py\nindex 9cf85a16..17d8673b 100644\n--- a/plone/app/layout/links/tests/test_favicon_viewlet.py\n+++ b/plone/app/layout/links/tests/test_favicon_viewlet.py\n@@ -1,17 +1,10 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n+from plone.app.layout.links.viewlets import FaviconViewlet\n from plone.app.layout.testing import FUNCTIONAL_TESTING\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n-from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings\n-from zope.component import getUtility\n-from plone.namedfile.file import NamedBlobFile\n-from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISecuritySchema, ISiteSchema\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n-from plone.app.layout.links.viewlets import FaviconViewlet\n from plone.formwidget.namedfile.converter import b64encode_file\n+from plone.registry.interfaces import IRegistry\n+from plone.base.interfaces import ISiteSchema\n+from zope.component import getUtility\n \n \n class TestFaviconViewletView(ViewletsTestCase, FaviconViewlet):\n@@ -19,52 +12,52 @@ class TestFaviconViewletView(ViewletsTestCase, FaviconViewlet):\n \n     def setUp(self):\n         self.portal = self.layer["portal"]\n-        self.request = \'\'\n-        self.site_url = \'\'\n+        self.request = ""\n+        self.site_url = ""\n \n     def test_FaviconViewlet_get_mimetype_svg(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSchema, prefix="plone")\n-        filename = \'test.svg\'\n-        file_data = \'Hello World\'.encode()\n+        filename = "test.svg"\n+        file_data = b"Hello World"\n         encoded_data = b64encode_file(filename=filename, data=file_data)\n         settings.site_favicon = encoded_data\n         mimetype = settings.site_favicon_mimetype\n-        self.assertEqual(mimetype, \'image/svg+xml\')\n+        self.assertEqual(mimetype, "image/svg+xml")\n \n     def test_FaviconViewlet_get_mimetype_jpg(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSchema, prefix="plone")\n-        filename = \'test.jpg\'\n-        file_data = \'Hello World\'.encode()\n+        filename = "test.jpg"\n+        file_data = b"Hello World"\n         encoded_data = b64encode_file(filename=filename, data=file_data)\n         settings.site_favicon = encoded_data\n         mimetype = settings.site_favicon_mimetype\n-        self.assertEqual(mimetype, \'image/jpeg\')\n+        self.assertEqual(mimetype, "image/jpeg")\n \n     def test_FaviconViewlet_get_mimetype_png(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSchema, prefix="plone")\n-        filename = \'test.png\'\n-        file_data = \'Hello World\'.encode()\n+        filename = "test.png"\n+        file_data = b"Hello World"\n         encoded_data = b64encode_file(filename=filename, data=file_data)\n         settings.site_favicon = encoded_data\n         mimetype = settings.site_favicon_mimetype\n-        self.assertEqual(mimetype, \'image/png\')\n+        self.assertEqual(mimetype, "image/png")\n \n     def test_FaviconViewlet_get_mimetype_ico(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSchema, prefix="plone")\n-        filename = \'test.ico\'\n-        file_data = \'Hello World\'.encode()\n+        filename = "test.ico"\n+        file_data = b"Hello World"\n         encoded_data = b64encode_file(filename=filename, data=file_data)\n         settings.site_favicon = encoded_data\n         mimetype = settings.site_favicon_mimetype\n-        self.assertEqual(mimetype, \'image/vnd.microsoft.icon\')\n+        self.assertEqual(mimetype, "image/vnd.microsoft.icon")\n \n     def test_FaviconViewlet_get_mimetype_none(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSchema, prefix="plone")\n         settings.site_favicon = None\n         mimetype = settings.site_favicon_mimetype\n-        self.assertEqual(mimetype, \'image/vnd.microsoft.icon\')\n+        self.assertEqual(mimetype, "image/vnd.microsoft.icon")\ndiff --git a/plone/app/layout/links/tests/test_rssviewlet.py b/plone/app/layout/links/tests/test_rssviewlet.py\nindex 4ad8f43f..ae12c856 100644\n--- a/plone/app/layout/links/tests/test_rssviewlet.py\n+++ b/plone/app/layout/links/tests/test_rssviewlet.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.links.viewlets import RSSViewlet\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.base.interfaces import ISiteSyndicationSettings\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings\n from zope.component import getUtility\n \n \ndiff --git a/plone/app/layout/links/viewlets.py b/plone/app/layout/links/viewlets.py\nindex 8096e3df..08e868fe 100644\n--- a/plone/app/layout/links/viewlets.py\n+++ b/plone/app/layout/links/viewlets.py\n@@ -1,26 +1,25 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.layout.viewlets import ViewletBase\n from plone.app.uuid.utils import uuidToObject\n+from plone.base.interfaces import ISiteSyndicationSettings\n+from plone.base.interfaces.syndication import IFeedSettings\n+from plone.base.utils import safe_bytes\n+from plone.formwidget.namedfile.converter import b64decode_file\n from plone.memoize import ram\n from plone.memoize import view\n from plone.memoize.compress import xhtml_compress\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISecuritySchema, ISiteSchema\n-from Products.CMFPlone.interfaces.syndication import IFeedSettings\n-from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings\n-from Products.CMFPlone.utils import safe_bytes\n+from plone.base.interfaces import ISecuritySchema\n+from plone.base.interfaces import ISiteSchema\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n+from typing import NoReturn\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.schema.interfaces import IVocabularyFactory\n-from plone.formwidget.namedfile.converter import b64decode_file\n-import mimetypes\n-from typing import NoReturn\n \n \n def get_language(context, request):\n-    portal_state = getMultiAdapter((context, request), name=u"plone_portal_state")\n+    portal_state = getMultiAdapter((context, request), name="plone_portal_state")\n     return portal_state.language()\n \n \n@@ -52,7 +51,7 @@ def init_favicon(self) -> NoReturn:\n         if getattr(settings, "site_favicon", False):\n             # The user has customized the favicon via the Site configlet.\n             filename = b64decode_file(settings.site_favicon)[0]\n-            \n+\n             cachebust = "?name=" + filename\n         # The filename is *always* /favicon.ico, irrespective of the content type,\n         # because:\n@@ -95,7 +94,7 @@ class AuthorViewlet(ViewletBase):\n     _template = ViewPageTemplateFile("author.pt")\n \n     def update(self):\n-        super(AuthorViewlet, self).update()\n+        super().update()\n         self.tools = getMultiAdapter((self.context, self.request), name="plone_tools")\n \n     def show(self):\n@@ -110,7 +109,7 @@ def show(self):\n     def render(self):\n         if self.show():\n             return self._template()\n-        return u""\n+        return ""\n \n \n class RSSViewlet(ViewletBase):\n@@ -131,19 +130,19 @@ def getRssLinks(self, obj):\n \n             urls.append(\n                 {\n-                    "title": "%s - %s" % (obj.Title(), safe_bytes(term.title)),\n+                    "title": f"{obj.Title()} - {safe_bytes(term.title)}",\n                     "url": obj.absolute_url() + "/" + term.value,\n                 }\n             )\n         return urls\n \n     def update(self):\n-        super(RSSViewlet, self).update()\n+        super().update()\n         self.rsslinks = []\n         portal = self.portal_state.portal()\n         util = getMultiAdapter((self.context, self.request), name="syndication-util")\n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n         if context_state.is_portal_root():\n             if util.site_enabled():\n@@ -180,7 +179,7 @@ class CanonicalURL(ViewletBase):\n     @view.memoize\n     def render(self):\n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n         canonical_url = context_state.canonical_object_url()\n-        return u\'    <link rel="canonical" href="%s" />\' % canonical_url\n+        return \'    <link rel="canonical" href="%s" />\' % canonical_url\ndiff --git a/plone/app/layout/navigation/__init__.py b/plone/app/layout/navigation/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/layout/navigation/__init__.py\n+++ b/plone/app/layout/navigation/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/layout/navigation/defaultpage.py b/plone/app/layout/navigation/defaultpage.py\ndeleted file mode 100644\nindex 3f684b8f..00000000\n--- a/plone/app/layout/navigation/defaultpage.py\n+++ /dev/null\n@@ -1,11 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from zope.deferredimport import deprecated\n-\n-\n-# remove in Plone 6\n-deprecated(\n-    "Import from Products.CMFPlone instead",\n-    DefaultPage="Products.CMFPlone.browser.defaultpage:DefaultPage",\n-    isDefaultPage="Products.CMFPlone.defaultpage:is_default_page",\n-    getDefaultPage="Products.CMFPlone.defaultpage:get_default_page",\n-)\ndiff --git a/plone/app/layout/navigation/interfaces.py b/plone/app/layout/navigation/interfaces.py\nindex 53f3b05f..f2ac6275 100644\n--- a/plone/app/layout/navigation/interfaces.py\n+++ b/plone/app/layout/navigation/interfaces.py\n@@ -1,16 +1,7 @@\n-# -*- coding: utf-8 -*-\n-from zope.deferredimport import deprecated\n from zope.interface import Attribute\n from zope.interface import Interface\n \n \n-# remove in plone 6\n-deprecated(\n-    "Import from Products.CMFPlone instead",\n-    IDefaultPage="Products.CMFPlone.interfaces.defaultpage:DefaultPage",\n-)\n-\n-\n class INavigationRoot(Interface):\n     """A marker interface for signaling the navigation root."""\n \ndiff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex d2e7efbe..00de3bbd 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -1,17 +1,14 @@\n-# -*- coding: utf-8 -*-\n # This module contains a function to help build navigation-tree-like structures\n # from catalog queries.\n \n from plone.app.layout.navigation.interfaces import INavtreeStrategy\n+from plone.base.defaultpage import check_default_page_via_view\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.defaultpage import check_default_page_via_view\n from zope.interface import implementer\n \n-import six\n-\n \n @implementer(INavtreeStrategy)\n-class NavtreeStrategyBase(object):\n+class NavtreeStrategyBase:\n     """Basic navigation tree strategy that does nothing."""\n \n     __allow_access_to_unprotected_subobjects__ = 1\n@@ -143,7 +140,7 @@ def buildFolderTree(context, obj=None, query={}, strategy=NavtreeStrategyBase())\n         query["path"] = rootPath\n     elif rootPath is None:\n         pathQuery = query["path"]\n-        if isinstance(pathQuery, six.string_types):\n+        if isinstance(pathQuery, str):\n             rootPath = pathQuery\n         else:\n             # Adjust for the fact that in a \'navtree\' query, the actual path\n@@ -181,7 +178,7 @@ def buildFolderTree(context, obj=None, query={}, strategy=NavtreeStrategyBase())\n \n     # Allow the strategy to suppliment the query for keys not already\n     # present in the query such as sorting and omitting default pages\n-    for key, value in six.iteritems(strategy.supplimentQuery):\n+    for key, value in strategy.supplimentQuery.items():\n         if key not in query:\n             query[key] = value\n \ndiff --git a/plone/app/layout/navigation/root.py b/plone/app/layout/navigation/root.py\nindex 734af426..4badee8b 100644\n--- a/plone/app/layout/navigation/root.py\n+++ b/plone/app/layout/navigation/root.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\ndiff --git a/plone/app/layout/navigation/tests/test_root.py b/plone/app/layout/navigation/tests/test_root.py\nindex 46a6afd2..d6ac822a 100644\n--- a/plone/app/layout/navigation/tests/test_root.py\n+++ b/plone/app/layout/navigation/tests/test_root.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.navigation.root import getNavigationRootObject\n from plone.app.layout.testing import INTEGRATION_TESTING\n \ndiff --git a/plone/app/layout/nextprevious/__init__.py b/plone/app/layout/nextprevious/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/layout/nextprevious/__init__.py\n+++ b/plone/app/layout/nextprevious/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/layout/nextprevious/interfaces.py b/plone/app/layout/nextprevious/interfaces.py\nindex ee16e090..b20de44d 100644\n--- a/plone/app/layout/nextprevious/interfaces.py\n+++ b/plone/app/layout/nextprevious/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n from zope.schema import Bool\n \n@@ -8,7 +7,7 @@ class INextPreviousProvider(Interface):\n     item relative to a particular id.\n     """\n \n-    enabled = Bool(title=u"True if next/previous behaviour is enabled")\n+    enabled = Bool(title="True if next/previous behaviour is enabled")\n \n     def getNextItem(obj):\n         """Returns information about next item in the container relative to\ndiff --git a/plone/app/layout/nextprevious/view.py b/plone/app/layout/nextprevious/view.py\nindex 23a65e60..073cc677 100644\n--- a/plone/app/layout/nextprevious/view.py\n+++ b/plone/app/layout/nextprevious/view.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from plone.app.layout.nextprevious.interfaces import INextPreviousProvider\n@@ -36,7 +35,7 @@ def _provider(self):\n \n     def isViewTemplate(self):\n         plone = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n         return plone.is_view_template()\n \ndiff --git a/plone/app/layout/sitemap/__init__.py b/plone/app/layout/sitemap/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/layout/sitemap/__init__.py\n+++ b/plone/app/layout/sitemap/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/layout/sitemap/sitemap.py b/plone/app/layout/sitemap/sitemap.py\nindex f62c06b1..a897ee69 100644\n--- a/plone/app/layout/sitemap/sitemap.py\n+++ b/plone/app/layout/sitemap/sitemap.py\n@@ -1,19 +1,16 @@\n-# -*- coding: utf-8 -*-\n from BTrees.OOBTree import OOBTree\n from gzip import GzipFile\n+from io import BytesIO\n from plone.memoize import ram\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n-from Products.CMFPlone.interfaces import ISiteSchema\n+from plone.base.interfaces import IPloneSiteRoot\n+from plone.base.interfaces import ISiteSchema\n from Products.Five import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from six import BytesIO\n from zope.component import getUtility\n from zope.publisher.interfaces import NotFound\n \n-import six\n-\n \n def _render_cachekey(fun, self):\n     # Cache by filename\n@@ -24,7 +21,7 @@ def _render_cachekey(fun, self):\n     url = self.context.absolute_url()\n     catalog = getToolByName(self.context, "portal_catalog")\n     counter = catalog.getCounter()\n-    return "%s/%s/%s" % (url, self.filename, counter)\n+    return f"{url}/{self.filename}/{counter}"\n \n \n class SiteMapView(BrowserView):\n@@ -106,7 +103,7 @@ def generate(self):\n         xml = self.template()\n         fp = BytesIO()\n         gzip = GzipFile(self.filename, "wb", 9, fp)\n-        if isinstance(xml, six.text_type):\n+        if isinstance(xml, str):\n             xml = xml.encode("utf8")\n         gzip.write(xml)\n         gzip.close()\ndiff --git a/plone/app/layout/sitemap/tests/__init__.py b/plone/app/layout/sitemap/tests/__init__.py\nindex ec51c5a2..792d6005 100644\n--- a/plone/app/layout/sitemap/tests/__init__.py\n+++ b/plone/app/layout/sitemap/tests/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/app/layout/sitemap/tests/test_sitemap.py b/plone/app/layout/sitemap/tests/test_sitemap.py\nindex 09ed1ed2..113fbfed 100644\n--- a/plone/app/layout/sitemap/tests/test_sitemap.py\n+++ b/plone/app/layout/sitemap/tests/test_sitemap.py\n@@ -1,6 +1,6 @@\n-# -*- coding: utf-8 -*-\n from DateTime import DateTime\n from gzip import GzipFile\n+from io import BytesIO\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.layout.testing import INTEGRATION_TESTING\n from plone.app.testing import login\n@@ -8,12 +8,11 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n+from plone.base.utils import safe_text\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import ISearchSchema\n-from Products.CMFPlone.interfaces import ISiteSchema\n-from Products.CMFPlone.utils import safe_unicode\n-from six import BytesIO\n+from plone.base.interfaces import ISearchSchema\n+from plone.base.interfaces import ISiteSchema\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.interface import alsoProvides\n@@ -75,7 +74,7 @@ def uncompress(self, sitemapdata):\n         unziped = GzipFile(fileobj=sio)\n         xml = unziped.read()\n         unziped.close()\n-        return safe_unicode(xml)\n+        return safe_text(xml)\n \n     def test_disabled(self):\n         """\n@@ -224,7 +223,7 @@ def test_typesUseViewActionInListings(self):\n         self.wftool.doActionFor(newsitem, "publish")\n         self.assertTrue("published" == self.wftool.getInfoFor(newsitem, "review_state"))\n         registry = getUtility(IRegistry)\n-        registry["plone.types_use_view_action_in_listings"] = [u"News Item"]\n+        registry["plone.types_use_view_action_in_listings"] = ["News Item"]\n \n         logout()\n \ndiff --git a/plone/app/layout/testing.py b/plone/app/layout/testing.py\nindex 42e27671..3974d941 100644\n--- a/plone/app/layout/testing.py\n+++ b/plone/app/layout/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\ndiff --git a/plone/app/layout/viewlets/__init__.py b/plone/app/layout/viewlets/__init__.py\nindex d167fdbf..9ac3d803 100644\n--- a/plone/app/layout/viewlets/__init__.py\n+++ b/plone/app/layout/viewlets/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n from .common import ViewletBase  # noqa\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex 79fb687e..0beddc00 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -1,40 +1,38 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from collections import defaultdict\n from functools import total_ordering\n+from html import escape\n from plone.app.layout.globals.interfaces import IViewView\n from plone.app.layout.navigation.root import getNavigationRoot\n-from plone.app.layout.navigation.root import getNavigationRootObject\n+from plone.base.utils import safe_text\n from plone.i18n.interfaces import ILanguageSchema\n from plone.memoize.view import memoize\n from plone.protect.utils import addTokenToUrl\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n-from Products.CMFPlone.interfaces import ISearchSchema\n-from Products.CMFPlone.interfaces import ISiteSchema\n-from Products.CMFPlone.interfaces.controlpanel import INavigationSchema\n+from plone.base.interfaces import IPloneSiteRoot\n+from plone.base.interfaces import ISearchSchema\n+from plone.base.interfaces import ISiteSchema\n+from plone.base.interfaces.controlpanel import INavigationSchema\n from Products.CMFPlone.utils import getSiteLogo\n-from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from urllib.parse import unquote\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.component import queryMultiAdapter\n-from zope.deprecation.deprecation import deprecate\n from zope.i18n import translate\n from zope.interface import alsoProvides\n from zope.interface import implementer\n from zope.viewlet.interfaces import IViewlet\n-from html import escape\n \n import json\n import zope.deferredimport\n \n+\n zope.deferredimport.initialize()\n zope.deferredimport.deprecated(\n     "Import from plone.app.portlets.browser.viewlets instead",\n@@ -49,7 +47,7 @@ class ViewletBase(BrowserView):\n     """Base class with common functions for link viewlets."""\n \n     def __init__(self, context, request, view, manager=None):\n-        super(ViewletBase, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.__parent__ = view\n         self.context = context\n         self.request = request\n@@ -59,13 +57,6 @@ def __init__(self, context, request, view, manager=None):\n     def __hash__(self):\n         return id(self) * 16\n \n-    @property\n-    @deprecate(\n-        "Use site_url instead. " + "ViewletBase.portal_url will be removed in Plone 4"\n-    )\n-    def portal_url(self):\n-        return self.site_url\n-\n     def update(self):\n         self.portal_state = getMultiAdapter(\n             (self.context, self.request), name="plone_portal_state"\n@@ -135,7 +126,7 @@ def page_title(self):\n         context_state = getMultiAdapter(\n             (self.context, self.request), name="plone_context_state"\n         )\n-        return escape(safe_unicode(context_state.object_title()))\n+        return escape(safe_text(context_state.object_title()))\n \n     def update(self):\n         if IPloneSiteRoot.providedBy(self.context):\n@@ -147,7 +138,7 @@ def update(self):\n         if IPloneSiteRoot.providedBy(portal_state.navigation_root()):\n             portal_title = self.site_title_setting\n         else:\n-            portal_title = escape(safe_unicode(portal_state.navigation_root_title()))\n+            portal_title = escape(safe_text(portal_state.navigation_root_title()))\n         if self.page_title == portal_title:\n             self.site_title = portal_title\n         else:\n@@ -196,7 +187,7 @@ class SearchBoxViewlet(ViewletBase):\n     index = ViewPageTemplateFile("searchbox.pt")\n \n     def update(self):\n-        super(SearchBoxViewlet, self).update()\n+        super().update()\n \n         context_state = getMultiAdapter(\n             (self.context, self.request), name="plone_context_state"\n@@ -215,7 +206,7 @@ class LogoViewlet(ViewletBase):\n     index = ViewPageTemplateFile("logo.pt")\n \n     def update(self):\n-        super(LogoViewlet, self).update()\n+        super().update()\n \n         # TODO: should this be changed to settings.site_title?\n         self.navigation_root_title = self.portal_state.navigation_root_title()\n@@ -295,9 +286,9 @@ def navtree(self):\n                     entry["title"], domain="plone", context=self.request\n                 )\n \n-            entry["title"] = escape(safe_unicode(entry["title"]))\n+            entry["title"] = escape(safe_text(entry["title"]))\n             if "name" in entry and entry["name"]:\n-                entry["name"] = escape(safe_unicode(entry["name"]))\n+                entry["name"] = escape(safe_text(entry["name"]))\n             self.customize_tab(entry, tab)\n             ret[navtree_path].append(entry)\n \n@@ -351,7 +342,7 @@ def navtree(self):\n                 "path": brain_path,\n                 "uid": brain.UID,\n                 "url": url,\n-                "title": escape(safe_unicode(brain.Title)),\n+                "title": escape(safe_text(brain.Title)),\n                 "review_state": brain.review_state,\n             }\n             self.customize_entry(entry, brain)\n@@ -423,7 +414,7 @@ class PersonalBarViewlet(ViewletBase):\n     user_name = ""\n \n     def update(self):\n-        super(PersonalBarViewlet, self).update()\n+        super().update()\n         context = aq_inner(self.context)\n \n         context_state = getMultiAdapter(\n@@ -485,7 +476,7 @@ def update(self):\n         # from plone.app.contentmenu. This behaves differently depending on\n         # whether the view is marked with IViewView. If our parent view\n         # provides that marker, we should do it here as well.\n-        super(ContentViewsViewlet, self).update()\n+        super().update()\n         if IViewView.providedBy(self.__parent__):\n             alsoProvides(self, IViewView)\n \n@@ -531,7 +522,7 @@ def getTabSets(self):\n             if starts("http") or starts("javascript"):\n                 item["url"] = action_url\n             else:\n-                item["url"] = "%s/%s" % (context_url, action_url)\n+                item["url"] = f"{context_url}/{action_url}"\n             item["url"] = addTokenToUrl(item["url"], self.request)\n \n             action_method = item["url"].split("/")[-1].split("?")[0]\n@@ -601,7 +592,7 @@ class PathBarViewlet(ViewletBase):\n     index = ViewPageTemplateFile("path_bar.pt")\n \n     def update(self):\n-        super(PathBarViewlet, self).update()\n+        super().update()\n \n         self.is_rtl = self.portal_state.is_rtl()\n \ndiff --git a/plone/app/layout/viewlets/content.py b/plone/app/layout/viewlets/content.py\nindex eb17758a..92fe59e4 100644\n--- a/plone/app/layout/viewlets/content.py\n+++ b/plone/app/layout/viewlets/content.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from Acquisition import aq_inner\n from DateTime import DateTime\n@@ -8,6 +7,7 @@\n from plone.app.multilingual.browser.vocabularies import translated_languages\n from plone.app.multilingual.interfaces import ITranslatable\n from plone.app.multilingual.interfaces import ITranslationManager\n+from plone.base.utils import base_hasattr\n from plone.memoize.instance import memoize\n from plone.protect.authenticator import createToken\n from plone.registry.interfaces import IRegistry\n@@ -16,13 +16,11 @@\n from Products.CMFCore.WorkflowCore import WorkflowException\n from Products.CMFEditions.Permissions import AccessPreviousVersions\n from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.interfaces import ISecuritySchema\n-from Products.CMFPlone.interfaces import ISiteSchema\n-from Products.CMFPlone.utils import base_hasattr\n+from plone.base.interfaces import ISecuritySchema\n+from plone.base.interfaces import ISiteSchema\n from Products.CMFPlone.utils import log\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from six.moves import range\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.component import queryMultiAdapter\n@@ -49,10 +47,10 @@ class DocumentActionsViewlet(ViewletBase):\n     index = ViewPageTemplateFile("document_actions.pt")\n \n     def update(self):\n-        super(DocumentActionsViewlet, self).update()\n+        super().update()\n \n         self.context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n         self.actions = self.context_state.actions("document_actions")\n \n@@ -62,9 +60,9 @@ class DocumentBylineViewlet(ViewletBase):\n     index = ViewPageTemplateFile("document_byline.pt")\n \n     def update(self):\n-        super(DocumentBylineViewlet, self).update()\n+        super().update()\n         self.context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n         self.anonymous = self.portal_state.anonymous()\n         self.has_pam = HAS_PAM\n@@ -149,17 +147,17 @@ def get_translations(self):\n \n \n class HistoryByLineView(BrowserView):\n-    """ DocumentByLine information for content history view """\n+    """DocumentByLine information for content history view"""\n \n     index = ViewPageTemplateFile("history_view.pt")\n \n     def update(self):\n         context = self.context\n         self.portal_state = getMultiAdapter(\n-            (context, self.request), name=u"plone_portal_state"\n+            (context, self.request), name="plone_portal_state"\n         )\n         self.context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n         self.anonymous = self.portal_state.anonymous()\n         self.has_pam = HAS_PAM\n@@ -289,7 +287,7 @@ def related_items(self):\n             brains = catalog(UID=related)\n             if brains:\n                 # build a position dict by iterating over the items once\n-                positions = dict([(v, i) for (i, v) in enumerate(related)])\n+                positions = {v: i for (i, v) in enumerate(related)}\n                 # We need to keep the ordering intact\n                 res = list(brains)\n \n@@ -345,7 +343,7 @@ def getUserInfo(self, userid):\n         if fullname:\n             actor["fullname"] = fullname\n \n-        return dict(actor=actor, actor_home="%s/author/%s" % (self.site_url, userid))\n+        return dict(actor=actor, actor_home=f"{self.site_url}/author/{userid}")\n \n     def workflowHistory(self, complete=True):\n         """Return workflow history of this context.\n@@ -374,7 +372,7 @@ def workflowHistory(self, complete=True):\n                 review_history = list(review_history)\n \n             portal_type = context.portal_type\n-            anon = _(u"label_anonymous_user", default=u"Anonymous User")\n+            anon = _("label_anonymous_user", default="Anonymous User")\n \n             for r in review_history:\n                 r["type"] = "workflow"\n@@ -438,8 +436,8 @@ def morphVersionDataToHistoryFormat(vdata, version_id):\n             )\n             info = dict(\n                 type="versioning",\n-                action=_(u"Edited"),\n-                transition_title=_(u"Edited"),\n+                action=_("Edited"),\n+                transition_title=_("Edited"),\n                 actorid=userid,\n                 time=meta["timestamp"],\n                 comments=meta["comment"],\n@@ -450,7 +448,7 @@ def morphVersionDataToHistoryFormat(vdata, version_id):\n                 if version_id > 0:\n                     info[\n                         "diff_previous_url"\n-                    ] = "%s/@@history?one=%s&two=%s&_authenticator=%s" % (\n+                    ] = "{}/@@history?one={}&two={}&_authenticator={}".format(\n                         context_url,\n                         version_id,\n                         version_id - 1,\n@@ -459,7 +457,7 @@ def morphVersionDataToHistoryFormat(vdata, version_id):\n                 if not rt.isUpToDate(context, version_id):\n                     info[\n                         "diff_current_url"\n-                    ] = "%s/@@history?one=current&two=%s&_authenticator=%s" % (\n+                    ] = "{}/@@history?one=current&two={}&_authenticator={}".format(\n                         context_url,\n                         version_id,\n                         token,\n@@ -497,19 +495,15 @@ def fullHistory(self):\n \n     def toLocalizedTime(self, time, long_format=None, time_only=None):\n         """Convert time to localized time"""\n-        util = getToolByName(self.context, \'translation_service\')\n+        util = getToolByName(self.context, "translation_service")\n         return util.ulocalized_time(\n-            time,\n-            long_format,\n-            time_only,\n-            self.context,\n-            domain=\'plonelocales\'\n+            time, long_format, time_only, self.context, domain="plonelocales"\n         )\n \n \n class ContentHistoryView(ContentHistoryViewlet):\n     def __init__(self, context, request):\n-        super(ContentHistoryView, self).__init__(context, request, None, None)\n+        super().__init__(context, request, None, None)\n         self.update()\n \n     def __call__(self):\ndiff --git a/plone/app/layout/viewlets/globalstatusmessage.py b/plone/app/layout/viewlets/globalstatusmessage.py\nindex a23dcee2..9fdebd58 100644\n--- a/plone/app/layout/viewlets/globalstatusmessage.py\n+++ b/plone/app/layout/viewlets/globalstatusmessage.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.viewlets.common import ViewletBase\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n@@ -37,7 +36,7 @@ class GlobalStatusMessage(ViewletBase):\n     index = ViewPageTemplateFile("globalstatusmessage.pt")\n \n     def update(self):\n-        super(GlobalStatusMessage, self).update()\n+        super().update()\n         self.status = IStatusMessage(self.request)\n         self.messages = self.status.show()\n \ndiff --git a/plone/app/layout/viewlets/httpheaders.py b/plone/app/layout/viewlets/httpheaders.py\nindex 2eed6364..371ba945 100644\n--- a/plone/app/layout/viewlets/httpheaders.py\n+++ b/plone/app/layout/viewlets/httpheaders.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.viewlets.common import ViewletBase\n \n \n@@ -6,10 +5,10 @@ class HeaderViewlet(ViewletBase):\n     """a base viewlet that do not render anything, just ready to set headers"""\n \n     def index(self):\n-        return u""\n+        return ""\n \n     def update(self):\n-        super(HeaderViewlet, self).update()\n+        super().update()\n         self.setHeader = self.request.response.setHeader\n         for name, value in self.getHeaders():\n             self.setHeader(name, value)\ndiff --git a/plone/app/layout/viewlets/interfaces.py b/plone/app/layout/viewlets/interfaces.py\nindex 71b1b499..aa84997e 100644\n--- a/plone/app/layout/viewlets/interfaces.py\n+++ b/plone/app/layout/viewlets/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.viewlet.interfaces import IViewletManager\n \n \n@@ -64,10 +63,6 @@ class IBelowContentDescription(IViewletManager):\n     """A viewlet manager that sits below the content description in view templates"""\n \n \n-class IBelowContentDescription(IViewletManager):\n-    """A viewlet manager that sits below the content description in view templates"""\n-\n-\n class IAboveContentBody(IViewletManager):\n     """A viewlet manager that sits above the content body in view templates"""\n \ndiff --git a/plone/app/layout/viewlets/social.py b/plone/app/layout/viewlets/social.py\nindex df38d0c8..07bba8d7 100644\n--- a/plone/app/layout/viewlets/social.py\n+++ b/plone/app/layout/viewlets/social.py\n@@ -1,12 +1,11 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.viewlets.common import TitleViewlet\n from plone.memoize.view import memoize\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.browser.syndication.adapters import BaseItem\n from Products.CMFPlone.browser.syndication.adapters import FolderFeed\n-from Products.CMFPlone.interfaces import ISocialMediaSchema\n-from Products.CMFPlone.interfaces.syndication import IFeedItem\n+from plone.base.interfaces import ISocialMediaSchema\n+from plone.base.interfaces.syndication import IFeedItem\n from Products.CMFPlone.utils import getSiteLogo\n from zope.component import getUtility\n from zope.component import queryMultiAdapter\ndiff --git a/plone/app/layout/viewlets/tests/base.py b/plone/app/layout/viewlets/tests/base.py\nindex ffcc3659..aafbe309 100644\n--- a/plone/app/layout/viewlets/tests/base.py\n+++ b/plone/app/layout/viewlets/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.testing import FUNCTIONAL_TESTING\n from plone.app.layout.testing import INTEGRATION_TESTING\n from plone.app.layout.testing import TEST_USER_ID\ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex 11cb14fd..9332a02a 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.layout.viewlets.common import ContentViewsViewlet\n from plone.app.layout.viewlets.common import GlobalSectionsViewlet\n@@ -14,8 +13,8 @@\n from plone.protect import authenticator as auth\n from plone.registry.interfaces import IRegistry\n from plone.testing.zope import Browser\n-from Products.CMFPlone.interfaces import INonStructuralFolder\n-from Products.CMFPlone.interfaces import ISiteSchema\n+from plone.base.interfaces import INonStructuralFolder\n+from plone.base.interfaces import ISiteSchema\n from zope.component import getUtility\n from zope.component.hooks import setSite\n from zope.interface import alsoProvides\n@@ -56,9 +55,9 @@ class TestContentViewsViewlet(ViewletsTestCase):\n     """Test the content views viewlet."""\n \n     def setUp(self):\n-        super(TestContentViewsViewlet, self).setUp()\n+        super().setUp()\n         self.folder.invokeFactory("Document", "test", title="Test default page")\n-        self.folder.title = u"Folder"\n+        self.folder.title = "Folder"\n \n     def _invalidateRequestMemoizations(self):\n         try:\n@@ -89,7 +88,7 @@ def test_set1_NonStructuralFolder(self):\n     def test_set1(self):\n         self._invalidateRequestMemoizations()\n         setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n-        self.app.REQUEST["ACTUAL_URL"] = "%s/edit?_authenticator=%s" % (\n+        self.app.REQUEST["ACTUAL_URL"] = "{}/edit?_authenticator={}".format(\n             self.folder.test.absolute_url(),\n             auth.createToken(),\n         )\n@@ -105,9 +104,9 @@ class TestTitleViewsViewlet(ViewletsTestCase):\n     """Test the title viewlet."""\n \n     def setUp(self):\n-        super(TestTitleViewsViewlet, self).setUp()\n+        super().setUp()\n         self.folder.invokeFactory("Document", "test", title="Test default page")\n-        self.folder.title = u"Folder"\n+        self.folder.title = "Folder"\n \n     def _invalidateRequestMemoizations(self):\n         try:\n@@ -125,10 +124,10 @@ def test_title_viewlet_on_portal(self):\n         self.assertEqual(viewlet.site_title, "Plone site")\n         registry = getUtility(IRegistry)\n         site_settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n-        site_settings.site_title = u"S\xc3\xbcper Site"\n+        site_settings.site_title = "S\xc3\xbcper Site"\n         self._invalidateRequestMemoizations()\n         viewlet.update()\n-        self.assertEqual(viewlet.site_title, u"S\\xfcper Site")\n+        self.assertEqual(viewlet.site_title, "S\\xfcper Site")\n \n     def test_title_viewlet_on_content(self):\n         """Title viewlet renders navigation root title"""\n@@ -140,10 +139,10 @@ def test_title_viewlet_on_content(self):\n         self.assertEqual(viewlet.site_title, "Test default page &mdash; Plone site")\n         registry = getUtility(IRegistry)\n         site_settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n-        site_settings.site_title = u"S\xc3\xbcper Site"\n+        site_settings.site_title = "S\xc3\xbcper Site"\n         self._invalidateRequestMemoizations()\n         viewlet.update()\n-        self.assertEqual(viewlet.site_title, u"Test default page &mdash; S\\xfcper Site")\n+        self.assertEqual(viewlet.site_title, "Test default page &mdash; S\\xfcper Site")\n \n     def test_title_viewlet_with_navigation_root(self):\n         """Title viewlet renders navigation root title"""\n@@ -153,7 +152,7 @@ def test_title_viewlet_with_navigation_root(self):\n         directlyProvides(self.folder, INavigationRoot)\n         viewlet = TitleViewlet(self.folder.test, self.app.REQUEST, None)\n         viewlet.update()\n-        self.assertEqual(viewlet.site_title, u"Test default page &mdash; Folder")\n+        self.assertEqual(viewlet.site_title, "Test default page &mdash; Folder")\n \n \n class TestLogoViewlet(ViewletsTestCase):\n@@ -174,9 +173,7 @@ def test_logo_viewlet_portal_root_default(self):\n         """\n         viewlet = LogoViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n-        self.assertEqual(\n-            viewlet.img_src, "{0}/logo.png".format(self.portal.absolute_url())\n-        )\n+        self.assertEqual(viewlet.img_src, f"{self.portal.absolute_url()}/logo.png")\n \n     def test_logo_viewlet_portal_root_registry(self):\n         """When a logo is set, and viewlet is opened on a non-navigation root,\n@@ -190,7 +187,7 @@ def test_logo_viewlet_portal_root_registry(self):\n         viewlet.update()\n         self.assertTrue(\n             viewlet.img_src,\n-            "{0}/@@site-logo/pixel.png".format(self.portal.absolute_url()),\n+            f"{self.portal.absolute_url()}/@@site-logo/pixel.png",\n         )\n \n     def test_logo_viewlet_navigation_root_default(self):\n@@ -200,9 +197,7 @@ def test_logo_viewlet_navigation_root_default(self):\n         self._set_site(self.folder)\n         viewlet = LogoViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n-        self.assertEqual(\n-            viewlet.img_src, "{0}/logo.png".format(self.folder.absolute_url())\n-        )\n+        self.assertEqual(viewlet.img_src, f"{self.folder.absolute_url()}/logo.png")\n \n     def test_viewlet_navigation_root_registry(self):\n         """When a logo is set, and viewlet is opened on a navigation root,\n@@ -218,7 +213,7 @@ def test_viewlet_navigation_root_registry(self):\n         viewlet.update()\n         self.assertTrue(\n             viewlet.img_src,\n-            "{0}/@@site-logo/pixel.png".format(self.folder.absolute_url()),\n+            f"{self.folder.absolute_url()}/@@site-logo/pixel.png",\n         )\n \n \n@@ -243,10 +238,10 @@ def _get_navtree(self, context=None):\n     def test_globalnav_respects_types_use_view_action_in_listings(self):\n         """Test selected tabs with a INavigationroot folder involved"""\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n-        self.portal.invokeFactory("Image", "image", title=u"S\xc3\xb6me Image")\n-        self.portal.invokeFactory("File", "file", title=u"Some File")\n-        self.portal.invokeFactory("Document", "doc", title=u"Some D\xc3\xb6cument")\n-        self.portal.invokeFactory("Collection", "collection", title=u"Some Collection")\n+        self.portal.invokeFactory("Image", "image", title="S\xc3\xb6me Image")\n+        self.portal.invokeFactory("File", "file", title="Some File")\n+        self.portal.invokeFactory("Document", "doc", title="Some D\xc3\xb6cument")\n+        self.portal.invokeFactory("Collection", "collection", title="Some Collection")\n         request = self.layer["request"]\n         gsv = GlobalSectionsViewlet(self.portal, request, None)\n         gsv.update()\n@@ -261,14 +256,14 @@ def test_globalnav_navigation_depth(self):\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         registry = getUtility(IRegistry)\n         registry["plone.navigation_depth"] = 3\n-        self.portal.invokeFactory("Folder", "folder", title=u"F\xc3\xb6lder")\n-        self.portal.invokeFactory("Folder", "folder2", title=u"Folder 2")\n-        self.portal.invokeFactory("Folder", "folder3", title=u"Folder 3")\n+        self.portal.invokeFactory("Folder", "folder", title="F\xc3\xb6lder")\n+        self.portal.invokeFactory("Folder", "folder2", title="Folder 2")\n+        self.portal.invokeFactory("Folder", "folder3", title="Folder 3")\n         folder = self.portal.folder\n-        folder.invokeFactory("Folder", "subfolder", title=u"Subfolder")\n-        folder.invokeFactory("Folder", "subfolder2", title=u"S\xc3\xbcbfolder 2")\n+        folder.invokeFactory("Folder", "subfolder", title="Subfolder")\n+        folder.invokeFactory("Folder", "subfolder2", title="S\xc3\xbcbfolder 2")\n         subfolder = folder.subfolder\n-        subfolder.invokeFactory("Folder", "subsubfolder", title=u"Sub2folder")\n+        subfolder.invokeFactory("Folder", "subsubfolder", title="Sub2folder")\n \n         request = self.layer["request"]\n         navtree = self._get_navtree()\n@@ -278,15 +273,15 @@ def test_globalnav_navigation_depth(self):\n         )\n         self.assertListEqual(\n             [x["title"] for x in navtree["/plone"]],\n-            [u"Home", u"Members", u"F\xc3\xb6lder", u"Folder 2", u"Folder 3"],\n+            ["Home", "Members", "F\xc3\xb6lder", "Folder 2", "Folder 3"],\n         )\n         self.assertListEqual(\n             [x["title"] for x in navtree["/plone/folder"]],\n-            [u"Subfolder", u"S\xc3\xbcbfolder 2"],\n+            ["Subfolder", "S\xc3\xbcbfolder 2"],\n         )\n         self.assertListEqual(\n             [x["title"] for x in navtree["/plone/folder/subfolder"]],\n-            [u"Sub2folder"],\n+            ["Sub2folder"],\n         )\n \n         gsv = GlobalSectionsViewlet(self.portal, request, None)\n@@ -316,7 +311,7 @@ def test_generate_tabs_non_folderish(self):\n         self.portal.invokeFactory(\n             "Document",\n             "test-doc",\n-            title=u"A simple document (\xc3\xa0\xc3\xa8\xc3\xac\xc3\xb2\xc3\xb9)",\n+            title="A simple document (\xc3\xa0\xc3\xa8\xc3\xac\xc3\xb2\xc3\xb9)",\n         )\n         navtree = self._get_navtree()\n         self.assertListEqual(sorted(navtree), ["/plone", "/plone/Members"])\n@@ -329,12 +324,12 @@ def test_generate_tabs_sorted(self):\n         self.portal.invokeFactory(\n             "Document",\n             "test-doc-2",\n-            title=u"Document 2",\n+            title="Document 2",\n         )\n         self.portal.invokeFactory(\n             "Document",\n             "test-doc-1",\n-            title=u"Document 1",\n+            title="Document 1",\n         )\n         navtree = self._get_navtree()\n         # default sorting by position in parent\n@@ -350,7 +345,7 @@ def test_generate_tabs_sorted(self):\n         )\n \n         # check we can sort by title\n-        self.registry["plone.sort_tabs_on"] = u"sortable_title"\n+        self.registry["plone.sort_tabs_on"] = "sortable_title"\n         navtree = self._get_navtree()\n         self.assertListEqual(sorted(navtree), ["/plone", "/plone/Members"])\n         self.assertListEqual(\n@@ -379,12 +374,12 @@ def test_generate_tabs_sorted(self):\n \n     def test_generate_tabs_displayed_types(self):\n         self.registry["plone.displayed_types"] = (\n-            u"Image",\n-            u"File",\n-            u"Link",\n-            u"News Item",\n-            u"Document",\n-            u"Event",\n+            "Image",\n+            "File",\n+            "Link",\n+            "News Item",\n+            "Document",\n+            "Event",\n         )\n         navtree = self._get_navtree()\n         self.assertListEqual(\n@@ -403,7 +398,7 @@ def test_generate_tabs_filter_on_state(self):\n                 "/plone/index_html",\n             ],\n         )\n-        self.registry["plone.workflow_states_to_show"] = (u"private",)\n+        self.registry["plone.workflow_states_to_show"] = ("private",)\n         navtree = self._get_navtree()\n         self.assertListEqual(sorted(navtree), ["/plone", "/plone/Members"])\n         self.assertListEqual(\n@@ -428,18 +423,18 @@ def test_generate_tabs_exclude_from_nav(self):\n         self.portal.invokeFactory(\n             "Folder",\n             "test-folder",\n-            title=u"Test folder",\n+            title="Test folder",\n         )\n         self.portal.invokeFactory(\n             "Folder",\n             "excluded-folder",\n-            title=u"Excluded folder",\n+            title="Excluded folder",\n             exclude_from_nav=True,\n         )\n         self.portal["excluded-folder"].invokeFactory(\n             "Folder",\n             "sub-folder",\n-            title=u"Sub folder",\n+            title="Sub folder",\n         )\n \n         navtree = self._get_navtree()\n@@ -622,7 +617,9 @@ def test_escaping_twice_does_not_double_escape_items(self):\n         """Test for https://github.com/plone/plone.app.layout/issues/280."""\n \n         self.portal.invokeFactory(\n-            "Document", "test-doc-1", title=u"Document 1 & 2",\n+            "Document",\n+            "test-doc-1",\n+            title="Document 1 & 2",\n         )\n \n         request = self.layer["request"]\n@@ -639,7 +636,6 @@ def test_escaping_twice_does_not_double_escape_items(self):\n         self.assertIn("Document 1 &amp; 2", html)\n \n \n-\n class TestTitleEscape(ViewletsFunctionalTestCase):\n     """Test that the title in the global sections viewlet is escaped.\n \n@@ -652,7 +648,7 @@ def get_browser(self):\n         browser.handleErrors = False\n         browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}",\n         )\n         return browser\n \n@@ -670,7 +666,7 @@ def assert_not_hacked(self, browser):\n             index = body.index(hacked)\n             start = max(0, index - 50)\n             end = min(index + len(hacked) + 50, len(body))\n-            assert False, "Hacked script found in body: ... {0} ...".format(\n+            assert False, "Hacked script found in body: ... {} ...".format(\n                 body[start:end]\n             )\n \ndiff --git a/plone/app/layout/viewlets/tests/test_content.py b/plone/app/layout/viewlets/tests/test_content.py\nindex 26b837f6..9df8fe79 100644\n--- a/plone/app/layout/viewlets/tests/test_content.py\n+++ b/plone/app/layout/viewlets/tests/test_content.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from DateTime import DateTime\n from plone.app.layout.viewlets.content import ContentRelatedItems\n from plone.app.layout.viewlets.content import DocumentBylineViewlet\n@@ -9,8 +8,8 @@\n from plone.app.testing import TEST_USER_ID\n from plone.locking.interfaces import ILockable\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISecuritySchema\n-from Products.CMFPlone.interfaces import ISiteSchema\n+from plone.base.interfaces import ISecuritySchema\n+from plone.base.interfaces import ISiteSchema\n from z3c.relationfield import RelationValue\n from zope.component import getUtility\n from zope.interface import Interface\n@@ -38,7 +37,7 @@ class TestDocumentBylineViewletView(ViewletsTestCase):\n     """\n \n     def setUp(self):\n-        super(TestDocumentBylineViewletView, self).setUp()\n+        super().setUp()\n         self.folder.invokeFactory("Document", "doc1", title="Document 1")\n         self.context = self.folder["doc1"]\n \n@@ -61,9 +60,6 @@ def _get_viewlet(self):\n     def test_pub_date(self):\n         # configure our portal to enable publication date on pages globally on\n         # the site\n-        registry = getUtility(IRegistry)\n-        # settings = registry.forInterface(ISiteSchema, prefix="plone")\n-\n         self.site_settings.display_publication_date_in_byline = True\n \n         logout()\n@@ -134,7 +130,7 @@ class TestHistoryBylineViewletView(ViewletsTestCase):\n     """\n \n     def setUp(self):\n-        super(TestHistoryBylineViewletView, self).setUp()\n+        super().setUp()\n         self.folder.invokeFactory("Document", "doc1", title="Document 1")\n         self.context = self.folder["doc1"]\n \n@@ -222,7 +218,7 @@ def test_pub_date(self):\n \n class TestRelatedItemsViewlet(ViewletsTestCase):\n     def setUp(self):\n-        super(TestRelatedItemsViewlet, self).setUp()\n+        super().setUp()\n         self.folder.invokeFactory("Document", "doc1", title="Document 1")\n         self.folder.invokeFactory("Document", "doc2", title="Document 2")\n         self.folder.invokeFactory("Document", "doc3", title="Document 3")\n@@ -251,9 +247,9 @@ def testDeletedRelatedItems(self):\n \n class TestDexterityRelatedItemsViewlet(ViewletsTestCase):\n     def setUp(self):\n-        super(TestDexterityRelatedItemsViewlet, self).setUp()\n+        super().setUp()\n         """ create some sample content to test with """\n-        from Products.CMFPlone.utils import get_installer\n+        from plone.base.utils import get_installer\n \n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         fti = DexterityFTI("Dexterity Item with relatedItems behavior")\ndiff --git a/plone/app/layout/viewlets/tests/test_functional.py b/plone/app/layout/viewlets/tests/test_functional.py\nindex 70e19c36..b061a3fe 100644\n--- a/plone/app/layout/viewlets/tests/test_functional.py\n+++ b/plone/app/layout/viewlets/tests/test_functional.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.testing import FUNCTIONAL_TESTING\n from plone.testing import layered\n \ndiff --git a/plone/app/layout/viewlets/tests/test_history.py b/plone/app/layout/viewlets/tests/test_history.py\nindex 0d960687..cf81fcfc 100644\n--- a/plone/app/layout/viewlets/tests/test_history.py\n+++ b/plone/app/layout/viewlets/tests/test_history.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.viewlets.content import ContentHistoryViewlet\n from plone.app.layout.viewlets.content import WorkflowHistoryViewlet\n from plone.app.layout.viewlets.tests.base import ViewletsFunctionalTestCase\n@@ -11,7 +10,7 @@\n \n class TestWorkflowHistoryViewlet(ViewletsFunctionalTestCase):\n     def setUp(self):\n-        super(TestWorkflowHistoryViewlet, self).setUp()\n+        super().setUp()\n         # add document, perform transition, set history for non-existent\n         # member and also None (anonymous)\n         self.folder.invokeFactory("Document", "d1")\n@@ -69,7 +68,7 @@ def test_transitionHistory(self):\n \n class TestContentHistoryViewlet(ViewletsFunctionalTestCase):\n     def setUp(self):\n-        super(TestContentHistoryViewlet, self).setUp()\n+        super().setUp()\n         # add document, perform transition, set history for non-existent\n         # member and also None (anonymous)\n         self.folder.invokeFactory("Document", "d1")\ndiff --git a/plone/app/layout/viewlets/tests/test_social.py b/plone/app/layout/viewlets/tests/test_social.py\nindex 3b9b8fc3..32bc4f72 100644\n--- a/plone/app/layout/viewlets/tests/test_social.py\n+++ b/plone/app/layout/viewlets/tests/test_social.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.viewlets.social import SocialTagsViewlet\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n from plone.app.testing import login\n@@ -7,7 +6,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISocialMediaSchema\n+from plone.base.interfaces import ISocialMediaSchema\n from zope.annotation.interfaces import IAnnotations\n from zope.component import getUtility\n \n@@ -16,7 +15,7 @@ class TestSocialViewlet(ViewletsTestCase):\n     """Test the content views viewlet."""\n \n     def setUp(self):\n-        super(TestSocialViewlet, self).setUp()\n+        super().setUp()\n         login(self.portal, TEST_USER_NAME)\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.folder.invokeFactory("News Item", "news-item", title="News Item")\ndiff --git a/plone/app/layout/viewlets/toolbar.py b/plone/app/layout/viewlets/toolbar.py\nindex 7e48e1b2..09aaaf65 100644\n--- a/plone/app/layout/viewlets/toolbar.py\n+++ b/plone/app/layout/viewlets/toolbar.py\n@@ -1,9 +1,8 @@\n-# -*- coding: utf-8 -*-\n from plone.app.layout.viewlets.common import PersonalBarViewlet\n from plone.app.viewletmanager.manager import OrderedViewletManager\n from plone.memoize.instance import memoize\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces.controlpanel import ISiteSchema\n+from plone.base.interfaces.controlpanel import ISiteSchema\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n@@ -13,7 +12,7 @@ class ToolbarViewletManager(OrderedViewletManager):\n     custom_template = ViewPageTemplateFile("toolbar.pt")\n \n     def base_render(self):\n-        return super(ToolbarViewletManager, self).render()\n+        return super().render()\n \n     def render(self):\n         return self.custom_template()\ndiff --git a/setup.cfg b/setup.cfg\nindex 57272aa4..469f1a50 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -4,14 +4,14 @@ ignore =\n     jenkins.cfg\n \n [isort]\n-force_alphabetical_sort=True\n-force_single_line=True\n-lines_after_imports=2\n-line_length=200\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n \n \n [bdist_wheel]\n-universal = 1\n+universal = 0\n \n [flake8]\n # black compatible flake8 rules:\ndiff --git a/setup.py b/setup.py\nindex bb7399ae..abf85da2 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -24,6 +24,7 @@\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n     ],\n     keywords="plone layout viewlet",\n     author="Plone Foundation",\n@@ -39,6 +40,7 @@\n         "DateTime",\n         "plone.app.content",\n         "plone.app.viewletmanager >=1.2",\n+        "plone.base",\n         "plone.batching >1.0.999",\n         "plone.i18n",\n         "plone.memoize",\n@@ -48,7 +50,6 @@\n         "Products.CMFDynamicViewFTI",\n         "Products.CMFEditions >=1.2.2",\n         "setuptools",\n-        "six",\n         "zope.component",\n         "zope.deferredimport",\n         "zope.deprecation",\n@@ -58,7 +59,7 @@\n         "zope.publisher",\n         "zope.schema",\n         "zope.viewlet",\n-        "Zope2",\n+        "Zope",\n     ],\n     extras_require=dict(\n         test=[\n'

