Repository: plone.app.users


Branch: refs/heads/master
Date: 2018-09-18T13:16:09+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.users/commit/8544a6090bd42331f30a0fc35b0dbda6aee32fb8

fix links in py3

Files changed:
M plone/app/users/browser/account.py

b"diff --git a/plone/app/users/browser/account.py b/plone/app/users/browser/account.py\nindex 611f9ea..674b629 100644\n--- a/plone/app/users/browser/account.py\n+++ b/plone/app/users/browser/account.py\n@@ -25,6 +25,8 @@\n from zope.interface import implementer\n from ZTUtils import make_query\n \n+import six\n+\n \n MESSAGE_EMAIL_CANNOT_CHANGE = \\\n     _('message_email_cannot_change',\n@@ -165,10 +167,9 @@ def _differentEmail(self, email):\n         return email not in (member.getId(), member.getUserName())\n \n     def makeQuery(self):\n-        if hasattr(self.request, 'userid'):\n-            return '?' + make_query({\n-                'userid': self.request.form.get('userid').encode('utf8')\n-            })\n+        userid = self.request.form.get('userid', None)\n+        if userid is not None:\n+            return '?{}'.format(make_query({'userid': userid}))\n         return ''\n \n     def action(self):\n"

Repository: plone.app.users


Branch: refs/heads/master
Date: 2018-09-18T13:16:09+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.users/commit/269e59ee13195ff3313a23b7e08d92861d3f8a61

fix change-password for py3

Files changed:
M plone/app/users/browser/passwordpanel.py

b'diff --git a/plone/app/users/browser/passwordpanel.py b/plone/app/users/browser/passwordpanel.py\nindex 83f59f8..7d6faa2 100644\n--- a/plone/app/users/browser/passwordpanel.py\n+++ b/plone/app/users/browser/passwordpanel.py\n@@ -9,6 +9,8 @@\n from zope import schema\n from zope.interface import Interface\n \n+import six\n+\n \n class IPasswordSchema(Interface):\n     """Provide schema for password form """\n@@ -83,7 +85,7 @@ def validate_password(self, action, data):\n         # check if password is correct\n         current_password = data.get(\'current_password\')\n         if current_password:\n-            if isinstance(current_password, unicode):\n+            if six.PY2 and isinstance(current_password, six.text_type):\n                 current_password = current_password.encode(\'utf8\')\n \n             if not membertool.testCurrentPassword(current_password):\n@@ -123,7 +125,7 @@ def action_reset_passwd(self, action):\n         membertool = getToolByName(self.context, \'portal_membership\')\n \n         password = data[\'new_password\']\n-        if isinstance(password, unicode):\n+        if six.PY2 and isinstance(password, six.text_type):\n             password = password.encode(\'utf8\')\n \n         try:\n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2018-09-18T13:16:09+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.users/commit/aeb477cf375624ddd9e711ba7861bd09058b3ad9

WIP: fix py3 support

Files changed:
M plone/app/users/browser/membersearch.py
M plone/app/users/testing.py
M plone/app/users/tests/base.py
M plone/app/users/tests/flexible_user_registration.rst
M plone/app/users/tests/member_search.rst
M plone/app/users/tests/password.rst
M plone/app/users/tests/personal_preferences.rst
M plone/app/users/tests/plugins.rst
M plone/app/users/tests/registration_forms.rst
M plone/app/users/tests/test_doctests.py
M plone/app/users/tests/test_robot.py
M plone/app/users/tests/userdata.rst

b'diff --git a/plone/app/users/browser/membersearch.py b/plone/app/users/browser/membersearch.py\nindex 4f3eb6c..f589168 100644\n--- a/plone/app/users/browser/membersearch.py\n+++ b/plone/app/users/browser/membersearch.py\n@@ -66,7 +66,7 @@ def extractCriteriaFromRequest(criteria):\n                 \'form.widgets.roles-empty-marker\', ]:\n         if key in criteria:\n             del criteria[key]\n-    for (key, value) in criteria.items():\n+    for (key, value) in list(criteria.items()):\n         if not value:\n             del criteria[key]\n         else:\ndiff --git a/plone/app/users/testing.py b/plone/app/users/testing.py\nindex 9ff4f83..cef3a16 100644\n--- a/plone/app/users/testing.py\n+++ b/plone/app/users/testing.py\n@@ -1,24 +1,49 @@\n # -*- coding: utf-8 -*-\n-from plone.app.robotframework.testing import AUTOLOGIN_LIBRARY_FIXTURE\n-from plone.app.testing.bbb import PTC_FIXTURE\n-from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING\n-from plone.app.testing.layers import FunctionalTesting\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n+from plone.app.robotframework.testing import REMOTE_LIBRARY_BUNDLE_FIXTURE\n+from plone.app.testing import applyProfile\n+from plone.app.testing import FunctionalTesting\n+from plone.app.testing import IntegrationTesting\n+from plone.app.testing import PloneSandboxLayer\n from plone.testing import z2\n \n-import doctest\n+import plone.app.users\n \n \n-PLONE_APP_USERS_FIXTURE = PTC_FIXTURE\n-PLONE_APP_USERS_FUNCTIONAL_TESTING = PTC_FUNCTIONAL_TESTING\n+class PloneAppUsersLayer(PloneSandboxLayer):\n \n-PLONE_APP_USERS_ROBOT = FunctionalTesting(\n-    bases=(PLONE_APP_USERS_FIXTURE,\n-           AUTOLOGIN_LIBRARY_FIXTURE,\n-           z2.ZSERVER_FIXTURE),\n-    name="PloneAppUsersLayer:Robot")\n+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n-optionflags = (\n-    doctest.ELLIPSIS |\n-    doctest.NORMALIZE_WHITESPACE |\n-    doctest.REPORT_ONLY_FIRST_FAILURE\n+    def setUpZope(self, app, configurationContext):\n+        # Load any other ZCML that is required for your tests.\n+        # The z3c.autoinclude feature is disabled in the Plone fixture base\n+        # layer.\n+        self.loadZCML(package=plone.app.users)\n+\n+    def setUpPloneSite(self, portal):\n+        applyProfile(portal, \'plone.app.users:default\')\n+\n+\n+PLONE_APP_USERS_FIXTURE = PloneAppUsersLayer()\n+\n+\n+PLONE_APP_USERS_INTEGRATION_TESTING = IntegrationTesting(\n+    bases=(PLONE_APP_USERS_FIXTURE,),\n+    name=\'PloneAppUsersLayer:IntegrationTesting\',\n+)\n+\n+\n+PLONE_APP_USERS_FUNCTIONAL_TESTING = FunctionalTesting(\n+    bases=(PLONE_APP_USERS_FIXTURE,),\n+    name=\'PloneAppUsersLayer:FunctionalTesting\',\n+)\n+\n+\n+PLONE_APP_USERS_ACCEPTANCE_TESTING = FunctionalTesting(\n+    bases=(\n+        PLONE_APP_USERS_FIXTURE,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+        z2.ZSERVER_FIXTURE,\n+    ),\n+    name=\'PloneAppUsersLayer:AcceptanceTesting\',\n )\ndiff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py\nindex b33cf9e..7f9f4c3 100644\n--- a/plone/app/users/tests/base.py\n+++ b/plone/app/users/tests/base.py\n@@ -30,7 +30,9 @@ class BaseTestCase(PloneTestCase):\n \n     layer = PLONE_APP_USERS_FUNCTIONAL_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n         self.portal.acl_users._doAddUser(\'admin\', \'secret\', [\'Manager\'], [])\n         set_mock_mailhost(self.portal)\n         self.membership = self.portal.portal_membership\ndiff --git a/plone/app/users/tests/flexible_user_registration.rst b/plone/app/users/tests/flexible_user_registration.rst\nindex 07c21ef..1027aaa 100644\n--- a/plone/app/users/tests/flexible_user_registration.rst\n+++ b/plone/app/users/tests/flexible_user_registration.rst\n@@ -69,7 +69,7 @@ We should be able to add a field::\n \n     >>> browser.open(\'http://nohost/plone/@@member-fields\')\n     >>> browser.getLink(id="add-field").click()\n-    >>> print browser.url\n+    >>> print(browser.url)\n     http://nohost/plone/member-fields/@@add-field...\n \n     >>> \'Add new field\' in browser.contents\ndiff --git a/plone/app/users/tests/member_search.rst b/plone/app/users/tests/member_search.rst\nindex 0bbce8c..13e3585 100644\n--- a/plone/app/users/tests/member_search.rst\n+++ b/plone/app/users/tests/member_search.rst\n@@ -101,7 +101,7 @@ So let\'s search again. We should see two members (test_user_1_ and bob):\n     >>> browser.getControl(name=\'form.buttons.search\').click()\n     >>> \'2 items matching your search terms.\' in browser.contents\n     True\n-    >>> \'<a href="http://nohost/plone/Members/test_user_1_">\'in browser.contents\n+    >>> \'<a href="http://nohost/plone/author/test_user_1_">\'in browser.contents\n     True\n     >>> \'<a href="http://nohost/plone/author/bob-jones">\'in browser.contents\n     True\ndiff --git a/plone/app/users/tests/password.rst b/plone/app/users/tests/password.rst\nindex 320e4f6..9edd74b 100644\n--- a/plone/app/users/tests/password.rst\n+++ b/plone/app/users/tests/password.rst\n@@ -27,7 +27,7 @@ Viewing this form should not be possible for anonymous users:\n     >>> browser.open(\'http://nohost/plone/\' + view_name)\n     Traceback (most recent call last):\n     ...\n-    Unauthorized: ...You are not authorized to access this resource...\n+    zExceptions.unauthorized.Unauthorized: ...You are not authorized to access this resource...\n \n So let\'s login as Plone user:\n     >>> browser.open(\'http://nohost/plone/\')\n@@ -94,7 +94,7 @@ Now let\'s test using a PAS Password validation plugin. Add a test plugin.\n \n Check that we are given instructions on what is a valid password\n \n-   >>> print browser.contents\n+   >>> print(browser.contents)\n     <...\n     ...Enter your new password. Must not be dead...\n \n@@ -105,7 +105,7 @@ Let\'s try to change the password with an invalid password:\n     >>> browser.getControl(\'New password\').value = \'dead parrot\'\n     >>> browser.getControl(\'Confirm password\').value = \'dead parrot\'\n     >>> browser.getControl(\'Change Password\').click()\n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...\n     ...Must not be dead...\n \n@@ -115,7 +115,7 @@ Now try a valid password\n     >>> browser.getControl(\'New password\').value = \'fish\'\n     >>> browser.getControl(\'Confirm password\').value = \'fish\'\n     >>> browser.getControl(\'Change Password\').click()\n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...\n     ...Password changed...\n \ndiff --git a/plone/app/users/tests/personal_preferences.rst b/plone/app/users/tests/personal_preferences.rst\nindex 172344b..d5e88ef 100644\n--- a/plone/app/users/tests/personal_preferences.rst\n+++ b/plone/app/users/tests/personal_preferences.rst\n@@ -32,7 +32,7 @@ Viewing user data shouldn\'t be possible for anonymous users:\n     >>> browser.open("http://nohost/plone/" + view_name)\n     Traceback (most recent call last):\n     ...\n-    Unauthorized: ...You are not authorized to access this resource...\n+    zExceptions.unauthorized.Unauthorized: ...You are not authorized to access this resource...\n \n So let\'s login as Plone user:\n     >>> browser.open(\'http://nohost/plone/\')\ndiff --git a/plone/app/users/tests/plugins.rst b/plone/app/users/tests/plugins.rst\nindex 2e70a69..135f11e 100644\n--- a/plone/app/users/tests/plugins.rst\n+++ b/plone/app/users/tests/plugins.rst\n@@ -88,7 +88,7 @@ Now our password policy is in force.\n \n Check that we are given our help text on what is a valid password\n \n-   >>> print browser.contents\n+   >>> print(browser.contents)\n     <...\n     ...Enter your new password. Must not be dead...\n \n@@ -102,9 +102,9 @@ We\'ll enter an invalid password\n     >>> browser.getControl(\'Confirm password\').value = \'dead parrot\'\n     >>> browser.getControl(\'Register\').click()\n \n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...<div class="fieldErrorBox">Must not be dead</div>...\n-    >>> print browser.url\n+    >>> print(browser.url)\n     http://...@@new-user...\n \n Passwords that are autogenerated for users are not validated since they will never\ndiff --git a/plone/app/users/tests/registration_forms.rst b/plone/app/users/tests/registration_forms.rst\nindex 9012979..79116af 100644\n--- a/plone/app/users/tests/registration_forms.rst\n+++ b/plone/app/users/tests/registration_forms.rst\n@@ -2,6 +2,14 @@ Testing the flexible user registration\n ======================================\n \n     >>> portal = layer[\'portal\']\n+    >>> from plone.app.testing import setRoles\n+    >>> from plone.app.testing import TEST_USER_ID\n+    >>> setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+    >>> portal.invokeFactory(\'Folder\', \'news\')\n+    \'news\'\n+\n+    >>> import transaction\n+    >>> transaction.commit()\n     >>> from plone.testing.z2 import Browser\n     >>> browser = Browser(layer[\'app\'])\n     >>> browser.open(\'http://nohost/plone\')\n@@ -79,8 +87,8 @@ Testing the flexible user registration\n     >>> browser.getControl(\'Register\').click()\n     >>> browser.contents\n     \'...There were errors...Invalid email address...\'\n-    \n-    Fill out the form. \n+\n+    Fill out the form.\n     >>> browser.getControl(\'User Name\').value = \'user1\'\n     >>> browser.getControl(\'E-mail\').value = \'user1@example.com\'\n     >>> browser.getControl(\'Register\').click()\n@@ -143,6 +151,7 @@ Testing the flexible user registration\n     particular view. Let\'s make sure a came_from parameter in the query\n     string will be respected.\n \n+    >>> browser.handleErrors = False\n     >>> browser.open(\'http://nohost/plone/@@register?came_from=http://nohost/plone/news\')\n     >>> browser.getControl(\'User Name\').value = \'user5\'\n     >>> browser.getControl(\'E-mail\').value = \'user5@example.com\'\n@@ -263,9 +272,9 @@ Testing the flexible user registration\n     As we want to validate emails. The password fields have become optional.\n     >>> browser.getControl(name=\'form.widgets.mail_me\' + list_widget_suffix).value = True\n     >>> browser.getControl(\'Register\').click()\n-    >>> print browser.url\n+    >>> print(browser.url)\n     http://...@@usergroup-userprefs...\n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...User added...user4...\n \n     Check that at least this one error does not show up:\n@@ -313,7 +322,7 @@ Testing the flexible user registration\n \n     Check that we are given instructions on what is a valid password\n \n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...\n     ...Enter your new password. Must not be dead...\n \n@@ -331,7 +340,7 @@ Testing the flexible user registration\n     >>> browser.getControl(\'Confirm password\').value = \'dead parrot\'\n     >>> browser.getControl(\'Register\').click()\n \n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...<div class="fieldErrorBox">...Must not be dead...</div>...\n \n \n@@ -370,7 +379,7 @@ Testing the flexible user registration\n \n     Check that we are given instructions on what is a valid password\n \n-    >>> print browser.getControl("Password").labels[0]\n+    >>> print(browser.getControl("Password").labels[0])\n     Password...Enter your new password. Must not be dead. Minimum 5 characters...\n \n     We\'ll enter an invalid password\n@@ -382,7 +391,7 @@ Testing the flexible user registration\n     >>> browser.getControl(\'Confirm password\').value = \'dead\'\n     >>> browser.getControl(\'Register\').click()\n \n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...<div class="fieldErrorBox">...Must not be dead. Your password must contain at least 5 characters....</div>...\n \n     Now try a valid password -- and we\'ll make sure non-ASCII characters are\ndiff --git a/plone/app/users/tests/test_doctests.py b/plone/app/users/tests/test_doctests.py\nindex 21a35cd..1bc9179 100644\n--- a/plone/app/users/tests/test_doctests.py\n+++ b/plone/app/users/tests/test_doctests.py\n@@ -1,5 +1,4 @@\n # -*- coding: utf-8 -*-\n-from plone.app.users.testing import optionflags\n from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n from plone.testing import layered\n \n@@ -22,6 +21,11 @@\n     \'../vocabularies.py\',\n ]\n \n+optionflags = (\n+    doctest.ELLIPSIS |\n+    doctest.NORMALIZE_WHITESPACE |\n+    doctest.REPORT_ONLY_FIRST_FAILURE\n+)\n \n def test_suite():\n     suite = unittest.TestSuite()\ndiff --git a/plone/app/users/tests/test_robot.py b/plone/app/users/tests/test_robot.py\nindex 8b7a9f6..8d3ed58 100644\n--- a/plone/app/users/tests/test_robot.py\n+++ b/plone/app/users/tests/test_robot.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from plone.app.users.testing import PLONE_APP_USERS_ROBOT\n+from plone.app.users.testing import PLONE_APP_USERS_ACCEPTANCE_TESTING\n from plone.testing import layered\n \n import os\n@@ -18,6 +18,6 @@ def test_suite():\n #                    robotsuite.RobotTestSuite(\n #                        testfilepath,\n #                        noncritical=[\'fixme\']),\n-#                    layer=PLONE_APP_USERS_ROBOT),\n+#                    layer=PLONE_APP_USERS_ACCEPTANCE_TESTING),\n #            ])\n     return suite\ndiff --git a/plone/app/users/tests/userdata.rst b/plone/app/users/tests/userdata.rst\nindex f56dbeb..a0385f2 100644\n--- a/plone/app/users/tests/userdata.rst\n+++ b/plone/app/users/tests/userdata.rst\n@@ -32,7 +32,7 @@ Viewing user data shouldn\'t be possible for anonymous users:\n     >>> browser.open(view_url)\n     Traceback (most recent call last):\n     ...\n-    Unauthorized: ...You are not authorized to access this resource...\n+    zExceptions.unauthorized.Unauthorized: ...You are not authorized to access this resource...\n \n So let\'s login as Plone user:\n     >>> browser.open(\'http://nohost/plone/\')\n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2018-09-18T13:16:09+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.users/commit/0b650863c11f6901504c6fc039ec14610fd2c7f2

fix more tests for py3

Files changed:
M plone/app/users/tests/test_new_user.py

b'diff --git a/plone/app/users/tests/test_new_user.py b/plone/app/users/tests/test_new_user.py\nindex 5be5d1c..4bc3c5f 100644\n--- a/plone/app/users/tests/test_new_user.py\n+++ b/plone/app/users/tests/test_new_user.py\n@@ -36,8 +36,8 @@ class TestGenerateUserIdLoginName(BaseTestCase):\n     security settings.\n     """\n \n-    def afterSetUp(self):\n-        super(TestGenerateUserIdLoginName, self).afterSetUp()\n+    def setUp(self):\n+        super(TestGenerateUserIdLoginName, self).setUp()\n         self.portal_url = self.portal.absolute_url()\n         self.portal.acl_users._doAddUser(\n             \'siteadmin\', \'secret\', [\'Site Administrator\'], []\n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2018-09-18T13:16:09+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.users/commit/8f2b2a40bfd01ba7ef71ab181d90b93771aecddc

Remove last dependencies on PloneTestCase from plone.app.users

Files changed:
M plone/app/users/tests/base.py
M plone/app/users/tests/test_account.py
M plone/app/users/tests/test_exportimport.py
M plone/app/users/tests/test_schema_types.py
M plone/app/users/tests/test_user_data_panel.py

b'diff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py\nindex 7f9f4c3..072c322 100644\n--- a/plone/app/users/tests/base.py\n+++ b/plone/app/users/tests/base.py\n@@ -8,7 +8,8 @@\n from AccessControl.SecurityInfo import ClassSecurityInfo\n from Acquisition import aq_base\n from OFS.Cache import Cacheable\n-from plone.app.testing.bbb import PloneTestCase\n+from plone.app.testing import setRoles\n+from plone.app.testing import login\n from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n from plone.registry.interfaces import IRegistry\n from plone.testing.z2 import Browser\n@@ -24,8 +25,10 @@\n from zope.component import getSiteManager\n from zope.component import getUtility\n \n+import unittest\n \n-class BaseTestCase(PloneTestCase):\n+\n+class BaseTestCase(unittest.TestCase):\n     """ base test case which adds amin user """\n \n     layer = PLONE_APP_USERS_FUNCTIONAL_TESTING\n@@ -41,8 +44,8 @@ def setUp(self):\n         self.browser = Browser(self.layer[\'app\'])\n         self.request = self.layer[\'request\']\n \n-    def beforeTearDown(self):\n-        self.login(\'admin\')\n+    def tearDown(self):\n+        login(self.portal, \'admin\')\n         unset_mock_mailhost(self.portal)\n         pas_instance = self.portal.acl_users\n         plugin = getattr(pas_instance, \'test\', None)\ndiff --git a/plone/app/users/tests/test_account.py b/plone/app/users/tests/test_account.py\nindex 5168ac7..7c3405b 100644\n--- a/plone/app/users/tests/test_account.py\n+++ b/plone/app/users/tests/test_account.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from Products.CMFCore.interfaces import IMembershipTool\n from plone.app.users.browser.account import AccountPanelSchemaAdapter\n+from plone.app.users.tests.base import BaseTestCase\n from plone.testing import z2\n from zope.interface import implementer\n from zope.component import provideUtility\ndiff --git a/plone/app/users/tests/test_exportimport.py b/plone/app/users/tests/test_exportimport.py\nindex ddad27f..e2cebf6 100644\n--- a/plone/app/users/tests/test_exportimport.py\n+++ b/plone/app/users/tests/test_exportimport.py\n@@ -1,9 +1,9 @@\n # -*- coding: utf-8 -*-\n-from plone.app.testing.bbb import PloneTestCase\n from plone.app.users.browser.userdatapanel import getUserDataSchema\n from plone.app.users.setuphandlers import export_schema\n from plone.app.users.setuphandlers import import_schema\n from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n+from plone.app.users.tests.base import BaseTestCase\n from plone.namedfile.field import NamedBlobImage\n from Products.CMFCore.utils import getToolByName\n from Products.GenericSetup.tests.common import DummyExportContext\n@@ -11,11 +11,10 @@\n from zope import schema\n \n \n-class TestImport(PloneTestCase):\n+class TestImport(BaseTestCase):\n \n-    layer = PLONE_APP_USERS_FUNCTIONAL_TESTING\n-\n-    def afterSetUp(self):\n+    def setUp(self):\n+        super(TestImport, self).setUp()\n         xml = """<model xmlns:lingua="http://namespaces.plone.org/supermodel/lingua" xmlns:users="http://namespaces.plone.org/supermodel/users" xmlns:form="http://namespaces.plone.org/supermodel/form" xmlns:i18n="http://xml.zope.org/namespaces/i18n" xmlns:security="http://namespaces.plone.org/supermodel/security" xmlns:marshal="http://namespaces.plone.org/supermodel/marshal" xmlns="http://namespaces.plone.org/supermodel/schema" i18n:domain="plone">\n   <schema name="member-fields">\n     <field name="home_page" type="zope.schema.URI" users:forms="In User Profile">\ndiff --git a/plone/app/users/tests/test_schema_types.py b/plone/app/users/tests/test_schema_types.py\nindex 529104f..c4b9544 100644\n--- a/plone/app/users/tests/test_schema_types.py\n+++ b/plone/app/users/tests/test_schema_types.py\n@@ -8,15 +8,15 @@\n from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n from plone.testing.z2 import Browser\n from Products.GenericSetup.tests.common import DummyImportContext\n+from plone.app.users.tests.base import BaseTestCase\n \n import transaction\n \n \n-class TestSchema(PloneTestCase):\n+class TestSchema(BaseTestCase):\n \n-    layer = PLONE_APP_USERS_FUNCTIONAL_TESTING\n-\n-    def afterSetUp(self):\n+    def setUp(self):\n+        super(TestSchema, self).setUp()\n         xml = """<model xmlns:lingua="http://namespaces.plone.org/supermodel/lingua" xmlns:users="http://namespaces.plone.org/supermodel/users" xmlns:form="http://namespaces.plone.org/supermodel/form" xmlns:i18n="http://xml.zope.org/namespaces/i18n" xmlns:security="http://namespaces.plone.org/supermodel/security" xmlns:marshal="http://namespaces.plone.org/supermodel/marshal" xmlns="http://namespaces.plone.org/supermodel/schema" i18n:domain="plone">\n   <schema name="member-fields">\n     <field name="home_page" type="zope.schema.URI" users:forms="In User Profile">\ndiff --git a/plone/app/users/tests/test_user_data_panel.py b/plone/app/users/tests/test_user_data_panel.py\nindex 7115019..8e5f38d 100644\n--- a/plone/app/users/tests/test_user_data_panel.py\n+++ b/plone/app/users/tests/test_user_data_panel.py\n@@ -1,19 +1,13 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFCore.utils import getToolByName\n+from plone.app.testing import applyProfile\n from plone.app.users.browser.userdatapanel import UserDataPanel\n from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n-from plone.app.testing import applyProfile\n-from plone.app.testing.bbb import PloneTestCase\n-from plone.testing import z2\n+from plone.app.users.tests.base import BaseTestCase\n from zExceptions import NotFound\n from zope.i18n import translate\n \n-import unittest\n-\n-\n-class TestUserDataPanel(PloneTestCase):\n \n-    layer = PLONE_APP_USERS_FUNCTIONAL_TESTING\n+class TestUserDataPanel(BaseTestCase):\n \n     def test_regression(self):\n         portal = self.layer[\'portal\']\n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2018-09-18T13:16:09+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.users/commit/f63b6b4358f2aaa56ff6c2f798ab4bd828b94c58

cleanup

Files changed:
M plone/app/users/tests/test_pam.py
M plone/app/users/tests/test_schema_types.py

b'diff --git a/plone/app/users/tests/test_pam.py b/plone/app/users/tests/test_pam.py\nindex c67601f..c9e4d51 100644\n--- a/plone/app/users/tests/test_pam.py\n+++ b/plone/app/users/tests/test_pam.py\n@@ -1,22 +1,22 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFCore.utils import getToolByName\n from plone.app.multilingual.browser.setup import SetupMultilingualSite\n-from plone.app.users.browser.userdatapanel import UserDataPanel\n-from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n-from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, TEST_USER_PASSWORD\n-from plone.app.testing import setRoles\n+from plone.app.testing import applyProfile\n from plone.app.testing import login\n from plone.app.testing import PloneSandboxLayer\n-from plone.app.testing import applyProfile\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, TEST_USER_PASSWORD\n from plone.app.testing.layers import FunctionalTesting\n-from plone.app.testing.bbb import PloneTestCase\n+from plone.app.users.browser.userdatapanel import UserDataPanel\n+from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n from plone.testing import z2\n+from Products.CMFCore.utils import getToolByName\n+from transaction import commit\n from zExceptions import NotFound\n from zope.i18n import translate\n \n-from transaction import commit\n import unittest\n \n+\n class WITHPAMLayer(PloneSandboxLayer):\n \n     def setUpPloneSite(self, portal):\n@@ -37,7 +37,7 @@ def setUpPloneSite(self, portal):\n     name="PloneAppUsersWithPAMLayer:Functional")\n \n \n-class TestUserDataPanelWithPAM(PloneTestCase):\n+class TestUserDataPanelWithPAM(unittest.TestCase):\n \n     layer = WITHPAM_FUNCTIONAL_TESTING\n \ndiff --git a/plone/app/users/tests/test_schema_types.py b/plone/app/users/tests/test_schema_types.py\nindex c4b9544..0218816 100644\n--- a/plone/app/users/tests/test_schema_types.py\n+++ b/plone/app/users/tests/test_schema_types.py\n@@ -3,7 +3,6 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n-from plone.app.testing.bbb import PloneTestCase\n from plone.app.users.setuphandlers import import_schema\n from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n from plone.testing.z2 import Browser\n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2018-09-18T13:16:09+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.users/commit/21b7d910572051a0ea179e5d5e8b46329a4185b4

fix schema-export

Files changed:
M plone/app/users/setuphandlers.py

b'diff --git a/plone/app/users/setuphandlers.py b/plone/app/users/setuphandlers.py\nindex 94e9b0a..3fd8b06 100644\n--- a/plone/app/users/setuphandlers.py\n+++ b/plone/app/users/setuphandlers.py\n@@ -1,4 +1,6 @@\n # -*- coding: utf-8 -*-\n+from Products.CMFPlone.utils import safe_encode\n+\n import logging\n import plone.app.users.browser.schemaeditor as ttw\n import six\n@@ -24,5 +26,5 @@ def export_schema(context):\n     """Export TTW schema\n     """\n     schema = ttw.serialize_ttw_schema()\n-    context.writeDataFile(FILE, schema, \'text/xml\')\n+    context.writeDataFile(FILE, safe_encode(schema), \'text/xml\')\n     logger.info(\'Exported schema\')\n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2018-09-18T13:16:09+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.users/commit/742d6ff02e32886179dd41a52c4afd4c8c2f394c

fix tests for py2

Files changed:
M plone/app/users/tests/personal_preferences_prefs_user_details.rst
M plone/app/users/tests/test_doctests.py
M plone/app/users/tests/userdata_prefs_user_details.rst
M plone/app/users/vocabularies.py

b'diff --git a/plone/app/users/tests/personal_preferences_prefs_user_details.rst b/plone/app/users/tests/personal_preferences_prefs_user_details.rst\nindex 924b661..478b0e5 100644\n--- a/plone/app/users/tests/personal_preferences_prefs_user_details.rst\n+++ b/plone/app/users/tests/personal_preferences_prefs_user_details.rst\n@@ -115,5 +115,7 @@ form::\n     >>> browser.getControl(\'Cancel\').click()\n     >>> \'Changes canceled.\' in browser.contents\n     True\n-    >>> \'?userid=test_user_1_\' in browser.url\n+    >>> import six\n+    >>> searchstring = \'?userid:utf8:ustring=test_user_1_\' if six.PY2 else \'?userid=test_user_1_\'\n+    >>> searchstring in browser.url\n     True\ndiff --git a/plone/app/users/tests/test_doctests.py b/plone/app/users/tests/test_doctests.py\nindex 1bc9179..e4f4f34 100644\n--- a/plone/app/users/tests/test_doctests.py\n+++ b/plone/app/users/tests/test_doctests.py\n@@ -3,6 +3,8 @@\n from plone.testing import layered\n \n import doctest\n+import re\n+import six\n import unittest\n \n \n@@ -27,6 +29,17 @@\n     doctest.REPORT_ONLY_FIRST_FAILURE\n )\n \n+\n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            got = got.replace(\'Unauthorized\', \'zExceptions.unauthorized.Unauthorized\')\n+            got = got.replace(\':utf8:ustring\', \'\')\n+            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n+            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n+\n def test_suite():\n     suite = unittest.TestSuite()\n     suite.addTests([\n@@ -34,7 +47,8 @@ def test_suite():\n             doctest.DocFileSuite(\n                 \'tests/{0}\'.format(test_file),\n                 package=\'plone.app.users\',\n-                optionflags=optionflags\n+                optionflags=optionflags,\n+                checker=Py23DocChecker(),\n             ),\n             layer=PLONE_APP_USERS_FUNCTIONAL_TESTING)\n         for test_file in doc_tests\ndiff --git a/plone/app/users/tests/userdata_prefs_user_details.rst b/plone/app/users/tests/userdata_prefs_user_details.rst\nindex fdc5453..8a7e563 100644\n--- a/plone/app/users/tests/userdata_prefs_user_details.rst\n+++ b/plone/app/users/tests/userdata_prefs_user_details.rst\n@@ -15,6 +15,9 @@ Set Up\n     >>> membership = portal.portal_membership\n \n     >>> user_information_url = \'http://nohost/plone/@@user-information?userid={0}\'.format(TEST_USER_ID)\n+    >>> import six\n+    >>> if six.PY2:\n+    ...     user_information_url = \'http://nohost/plone/@@user-information?userid:utf8:ustring=test_user_1_\'\n \n     >>> browser = Browser(app)\n     >>> browser.handleErrors = False\ndiff --git a/plone/app/users/vocabularies.py b/plone/app/users/vocabularies.py\nindex 3d2cefb..fd094e6 100644\n--- a/plone/app/users/vocabularies.py\n+++ b/plone/app/users/vocabularies.py\n@@ -91,7 +91,7 @@ class GroupIdVocabulary(object):\n       >>> [k.value for k in fields] # doctest: +NORMALIZE_WHITESPACE\n       [\'fancygroup\', \'Reviewers\', \'Site Administrators\']\n       >>> [k.title for k in fields] # doctest: +NORMALIZE_WHITESPACE\n-      [u\'Group Title (fancygroup)\', u\'Reviewers\', u\'Site Administrators\']\n+      [\'Group Title (fancygroup)\', \'Reviewers\', \'Site Administrators\']\n \n     """\n \n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2018-09-18T13:16:09+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.users/commit/b563b3e353fc1a140234bb34f13b6bf16b6f7812

fix remaining tests for py3

Files changed:
M plone/app/users/tests/test_exportimport.py
M plone/app/users/vocabularies.py

b'diff --git a/plone/app/users/tests/test_exportimport.py b/plone/app/users/tests/test_exportimport.py\nindex e2cebf6..81443d9 100644\n--- a/plone/app/users/tests/test_exportimport.py\n+++ b/plone/app/users/tests/test_exportimport.py\n@@ -167,14 +167,14 @@ def test_export(self):\n         context = DummyExportContext(self.portal)\n         export_schema(context)\n         self.assertEqual(\'userschema.xml\', context._wrote[0][0])\n-        self.assertIn(\'field name="home_page"\', context._wrote[0][1])\n-        self.assertIn(\'field name="description"\', context._wrote[0][1])\n-        self.assertIn(\'field name="location"\', context._wrote[0][1])\n-        self.assertIn(\'field name="portrait"\', context._wrote[0][1])\n-        self.assertIn(\'field name="birthdate"\', context._wrote[0][1])\n-        self.assertIn(\'field name="another_date"\', context._wrote[0][1])\n-        self.assertIn(\'field name="age"\', context._wrote[0][1])\n-        self.assertIn(\'field name="department"\', context._wrote[0][1])\n-        self.assertIn(\'field name="skills"\', context._wrote[0][1])\n-        self.assertIn(\'field name="pi"\', context._wrote[0][1])\n-        self.assertIn(\'field name="vegetarian"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="home_page"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="description"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="location"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="portrait"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="birthdate"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="another_date"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="age"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="department"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="skills"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="pi"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="vegetarian"\', context._wrote[0][1])\ndiff --git a/plone/app/users/vocabularies.py b/plone/app/users/vocabularies.py\nindex fd094e6..907097d 100644\n--- a/plone/app/users/vocabularies.py\n+++ b/plone/app/users/vocabularies.py\n@@ -38,8 +38,9 @@ class UserRegistrationFieldsVocabulary(object):\n \n       >>> len(fields.by_token)\n       10\n-      >>> [k.value for k in fields] # doctest: +NORMALIZE_WHITESPACE\n-      [\'username\', \'description\', \'home_page\', \'email\', \'password_ctl\', \'portrait\', \'fullname\', \'password\', \'mail_me\', \'location\']\n+      >>> values = [k.value for k in fields]\n+      >>> sorted(values)\n+      [\'description\', \'email\', \'fullname\', \'home_page\', \'location\', \'mail_me\', \'password\', \'password_ctl\', \'portrait\', \'username\']\n \n       >>> email = fields.by_token[\'email\']\n       >>> email.title, email.token, email.value\n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2018-09-18T13:16:09+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.users/commit/4cad485c2323ae63db923f00acdda802b3f8ab3a

fix edge-case where creating users fails when the form was modified with invalid groups

Files changed:
M plone/app/users/browser/register.py

b"diff --git a/plone/app/users/browser/register.py b/plone/app/users/browser/register.py\nindex 9b6122c..87a02b4 100644\n--- a/plone/app/users/browser/register.py\n+++ b/plone/app/users/browser/register.py\n@@ -695,7 +695,7 @@ def action_join(self, action):\n         )\n         try:\n             # Add user to the selected group(s)\n-            if 'groups' in data.keys():\n+            if data.get('groups', None) is not None:\n                 for groupname in data['groups']:\n                     group = portal_groups.getGroupById(groupname)\n                     if 'Manager' in group.getRoles() and not is_zope_manager:\n"

Repository: plone.app.users


Branch: refs/heads/master
Date: 2018-09-18T13:19:26+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.users/commit/0c7be7a18f2aa36a5c8b8fc15087118678f4c96b

add changenote and classifiers

Files changed:
M CHANGES.rst
M plone/app/users/browser/account.py
M setup.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex 9b6697d..30d6759 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,11 +10,12 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Add support for Python 3.\n+  [pbauer]\n \n Bug fixes:\n \n-- Remove dependency on plone,app.controlpanel.\n+- Remove dependency on plone.app.controlpanel.\n   [jensens]\n \n - Fix browser test to use name of user/password field instead of label.\n@@ -26,9 +27,11 @@ Bug fixes:\n - Move forgotten 'registered' template from Products.CMFPlone skins to here, were it belongs to.\n   [jensens]\n \n-- Don't depend on ZODB version directly. Rely on Zope dependency \n+- Don't depend on ZODB version directly. Rely on Zope dependency\n   [tomgross]\n \n+- Remove dependency on PloneTestCase\n+  [pbauer]\n \n 2.4.2 (2018-04-03)\n ------------------\n@@ -47,10 +50,10 @@ Bug fixes:\n - Provide the UserDataPanelAdapter for INavigationRoot, so @@personal-information\n   is not broken with p.a.multilingual\n   [ebrehault]\n-  \n-- Fix tests to avoid using testbrowser internals. \n+\n+- Fix tests to avoid using testbrowser internals.\n   [davisagli]\n-  \n+\n - Python 3 fixes.\n   [pbauer]\n \ndiff --git a/plone/app/users/browser/account.py b/plone/app/users/browser/account.py\nindex 674b629..cb1e436 100644\n--- a/plone/app/users/browser/account.py\n+++ b/plone/app/users/browser/account.py\n@@ -25,8 +25,6 @@\n from zope.interface import implementer\n from ZTUtils import make_query\n \n-import six\n-\n \n MESSAGE_EMAIL_CANNOT_CHANGE = \\\n     _('message_email_cannot_change',\ndiff --git a/setup.py b/setup.py\nindex 24fcf7d..4dbff90 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -27,11 +27,14 @@\n         'Environment :: Web Environment',\n         'Framework :: Plone',\n         'Framework :: Plone :: 5.1',\n+        'Framework :: Plone :: 5.2',\n         'Framework :: Zope2',\n         'License :: OSI Approved :: GNU General Public License v2 (GPLv2)',\n         'Operating System :: OS Independent',\n         'Programming Language :: Python',\n         'Programming Language :: Python :: 2.7',\n+        'Programming Language :: Python :: 3.6',\n+        'Programming Language :: Python :: 3.7',\n     ],\n     keywords='Zope CMF Plone Users Groups',\n     author='Plone Foundation',\n@@ -59,6 +62,7 @@\n         'plone.schema',\n         'plone.uuid',\n         'setuptools',\n+        'six',\n         'z3c.form',\n         'zope.component',\n         'zope.event',\n"

Repository: plone.app.users


Branch: refs/heads/master
Date: 2018-09-19T07:38:35+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.users/commit/65078838638867b98e4ed051fab9287184a0093a

Merge pull request #75 from plone/python3

Python3

Files changed:
M CHANGES.rst
M plone/app/users/browser/account.py
M plone/app/users/browser/membersearch.py
M plone/app/users/browser/passwordpanel.py
M plone/app/users/browser/register.py
M plone/app/users/setuphandlers.py
M plone/app/users/testing.py
M plone/app/users/tests/base.py
M plone/app/users/tests/flexible_user_registration.rst
M plone/app/users/tests/member_search.rst
M plone/app/users/tests/password.rst
M plone/app/users/tests/personal_preferences.rst
M plone/app/users/tests/personal_preferences_prefs_user_details.rst
M plone/app/users/tests/plugins.rst
M plone/app/users/tests/registration_forms.rst
M plone/app/users/tests/test_account.py
M plone/app/users/tests/test_doctests.py
M plone/app/users/tests/test_exportimport.py
M plone/app/users/tests/test_new_user.py
M plone/app/users/tests/test_pam.py
M plone/app/users/tests/test_robot.py
M plone/app/users/tests/test_schema_types.py
M plone/app/users/tests/test_user_data_panel.py
M plone/app/users/tests/userdata.rst
M plone/app/users/tests/userdata_prefs_user_details.rst
M plone/app/users/vocabularies.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 9b6697d..30d6759 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -10,11 +10,12 @@ Breaking changes:\n \n New features:\n \n-- *add item here*\n+- Add support for Python 3.\n+  [pbauer]\n \n Bug fixes:\n \n-- Remove dependency on plone,app.controlpanel.\n+- Remove dependency on plone.app.controlpanel.\n   [jensens]\n \n - Fix browser test to use name of user/password field instead of label.\n@@ -26,9 +27,11 @@ Bug fixes:\n - Move forgotten \'registered\' template from Products.CMFPlone skins to here, were it belongs to.\n   [jensens]\n \n-- Don\'t depend on ZODB version directly. Rely on Zope dependency \n+- Don\'t depend on ZODB version directly. Rely on Zope dependency\n   [tomgross]\n \n+- Remove dependency on PloneTestCase\n+  [pbauer]\n \n 2.4.2 (2018-04-03)\n ------------------\n@@ -47,10 +50,10 @@ Bug fixes:\n - Provide the UserDataPanelAdapter for INavigationRoot, so @@personal-information\n   is not broken with p.a.multilingual\n   [ebrehault]\n-  \n-- Fix tests to avoid using testbrowser internals. \n+\n+- Fix tests to avoid using testbrowser internals.\n   [davisagli]\n-  \n+\n - Python 3 fixes.\n   [pbauer]\n \ndiff --git a/plone/app/users/browser/account.py b/plone/app/users/browser/account.py\nindex 611f9ea..cb1e436 100644\n--- a/plone/app/users/browser/account.py\n+++ b/plone/app/users/browser/account.py\n@@ -165,10 +165,9 @@ def _differentEmail(self, email):\n         return email not in (member.getId(), member.getUserName())\n \n     def makeQuery(self):\n-        if hasattr(self.request, \'userid\'):\n-            return \'?\' + make_query({\n-                \'userid\': self.request.form.get(\'userid\').encode(\'utf8\')\n-            })\n+        userid = self.request.form.get(\'userid\', None)\n+        if userid is not None:\n+            return \'?{}\'.format(make_query({\'userid\': userid}))\n         return \'\'\n \n     def action(self):\ndiff --git a/plone/app/users/browser/membersearch.py b/plone/app/users/browser/membersearch.py\nindex 4f3eb6c..f589168 100644\n--- a/plone/app/users/browser/membersearch.py\n+++ b/plone/app/users/browser/membersearch.py\n@@ -66,7 +66,7 @@ def extractCriteriaFromRequest(criteria):\n                 \'form.widgets.roles-empty-marker\', ]:\n         if key in criteria:\n             del criteria[key]\n-    for (key, value) in criteria.items():\n+    for (key, value) in list(criteria.items()):\n         if not value:\n             del criteria[key]\n         else:\ndiff --git a/plone/app/users/browser/passwordpanel.py b/plone/app/users/browser/passwordpanel.py\nindex 83f59f8..7d6faa2 100644\n--- a/plone/app/users/browser/passwordpanel.py\n+++ b/plone/app/users/browser/passwordpanel.py\n@@ -9,6 +9,8 @@\n from zope import schema\n from zope.interface import Interface\n \n+import six\n+\n \n class IPasswordSchema(Interface):\n     """Provide schema for password form """\n@@ -83,7 +85,7 @@ def validate_password(self, action, data):\n         # check if password is correct\n         current_password = data.get(\'current_password\')\n         if current_password:\n-            if isinstance(current_password, unicode):\n+            if six.PY2 and isinstance(current_password, six.text_type):\n                 current_password = current_password.encode(\'utf8\')\n \n             if not membertool.testCurrentPassword(current_password):\n@@ -123,7 +125,7 @@ def action_reset_passwd(self, action):\n         membertool = getToolByName(self.context, \'portal_membership\')\n \n         password = data[\'new_password\']\n-        if isinstance(password, unicode):\n+        if six.PY2 and isinstance(password, six.text_type):\n             password = password.encode(\'utf8\')\n \n         try:\ndiff --git a/plone/app/users/browser/register.py b/plone/app/users/browser/register.py\nindex 9b6122c..87a02b4 100644\n--- a/plone/app/users/browser/register.py\n+++ b/plone/app/users/browser/register.py\n@@ -695,7 +695,7 @@ def action_join(self, action):\n         )\n         try:\n             # Add user to the selected group(s)\n-            if \'groups\' in data.keys():\n+            if data.get(\'groups\', None) is not None:\n                 for groupname in data[\'groups\']:\n                     group = portal_groups.getGroupById(groupname)\n                     if \'Manager\' in group.getRoles() and not is_zope_manager:\ndiff --git a/plone/app/users/setuphandlers.py b/plone/app/users/setuphandlers.py\nindex 94e9b0a..3fd8b06 100644\n--- a/plone/app/users/setuphandlers.py\n+++ b/plone/app/users/setuphandlers.py\n@@ -1,4 +1,6 @@\n # -*- coding: utf-8 -*-\n+from Products.CMFPlone.utils import safe_encode\n+\n import logging\n import plone.app.users.browser.schemaeditor as ttw\n import six\n@@ -24,5 +26,5 @@ def export_schema(context):\n     """Export TTW schema\n     """\n     schema = ttw.serialize_ttw_schema()\n-    context.writeDataFile(FILE, schema, \'text/xml\')\n+    context.writeDataFile(FILE, safe_encode(schema), \'text/xml\')\n     logger.info(\'Exported schema\')\ndiff --git a/plone/app/users/testing.py b/plone/app/users/testing.py\nindex 9ff4f83..cef3a16 100644\n--- a/plone/app/users/testing.py\n+++ b/plone/app/users/testing.py\n@@ -1,24 +1,49 @@\n # -*- coding: utf-8 -*-\n-from plone.app.robotframework.testing import AUTOLOGIN_LIBRARY_FIXTURE\n-from plone.app.testing.bbb import PTC_FIXTURE\n-from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING\n-from plone.app.testing.layers import FunctionalTesting\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n+from plone.app.robotframework.testing import REMOTE_LIBRARY_BUNDLE_FIXTURE\n+from plone.app.testing import applyProfile\n+from plone.app.testing import FunctionalTesting\n+from plone.app.testing import IntegrationTesting\n+from plone.app.testing import PloneSandboxLayer\n from plone.testing import z2\n \n-import doctest\n+import plone.app.users\n \n \n-PLONE_APP_USERS_FIXTURE = PTC_FIXTURE\n-PLONE_APP_USERS_FUNCTIONAL_TESTING = PTC_FUNCTIONAL_TESTING\n+class PloneAppUsersLayer(PloneSandboxLayer):\n \n-PLONE_APP_USERS_ROBOT = FunctionalTesting(\n-    bases=(PLONE_APP_USERS_FIXTURE,\n-           AUTOLOGIN_LIBRARY_FIXTURE,\n-           z2.ZSERVER_FIXTURE),\n-    name="PloneAppUsersLayer:Robot")\n+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n-optionflags = (\n-    doctest.ELLIPSIS |\n-    doctest.NORMALIZE_WHITESPACE |\n-    doctest.REPORT_ONLY_FIRST_FAILURE\n+    def setUpZope(self, app, configurationContext):\n+        # Load any other ZCML that is required for your tests.\n+        # The z3c.autoinclude feature is disabled in the Plone fixture base\n+        # layer.\n+        self.loadZCML(package=plone.app.users)\n+\n+    def setUpPloneSite(self, portal):\n+        applyProfile(portal, \'plone.app.users:default\')\n+\n+\n+PLONE_APP_USERS_FIXTURE = PloneAppUsersLayer()\n+\n+\n+PLONE_APP_USERS_INTEGRATION_TESTING = IntegrationTesting(\n+    bases=(PLONE_APP_USERS_FIXTURE,),\n+    name=\'PloneAppUsersLayer:IntegrationTesting\',\n+)\n+\n+\n+PLONE_APP_USERS_FUNCTIONAL_TESTING = FunctionalTesting(\n+    bases=(PLONE_APP_USERS_FIXTURE,),\n+    name=\'PloneAppUsersLayer:FunctionalTesting\',\n+)\n+\n+\n+PLONE_APP_USERS_ACCEPTANCE_TESTING = FunctionalTesting(\n+    bases=(\n+        PLONE_APP_USERS_FIXTURE,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+        z2.ZSERVER_FIXTURE,\n+    ),\n+    name=\'PloneAppUsersLayer:AcceptanceTesting\',\n )\ndiff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py\nindex b33cf9e..072c322 100644\n--- a/plone/app/users/tests/base.py\n+++ b/plone/app/users/tests/base.py\n@@ -8,7 +8,8 @@\n from AccessControl.SecurityInfo import ClassSecurityInfo\n from Acquisition import aq_base\n from OFS.Cache import Cacheable\n-from plone.app.testing.bbb import PloneTestCase\n+from plone.app.testing import setRoles\n+from plone.app.testing import login\n from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n from plone.registry.interfaces import IRegistry\n from plone.testing.z2 import Browser\n@@ -24,13 +25,17 @@\n from zope.component import getSiteManager\n from zope.component import getUtility\n \n+import unittest\n \n-class BaseTestCase(PloneTestCase):\n+\n+class BaseTestCase(unittest.TestCase):\n     """ base test case which adds amin user """\n \n     layer = PLONE_APP_USERS_FUNCTIONAL_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n         self.portal.acl_users._doAddUser(\'admin\', \'secret\', [\'Manager\'], [])\n         set_mock_mailhost(self.portal)\n         self.membership = self.portal.portal_membership\n@@ -39,8 +44,8 @@ def afterSetUp(self):\n         self.browser = Browser(self.layer[\'app\'])\n         self.request = self.layer[\'request\']\n \n-    def beforeTearDown(self):\n-        self.login(\'admin\')\n+    def tearDown(self):\n+        login(self.portal, \'admin\')\n         unset_mock_mailhost(self.portal)\n         pas_instance = self.portal.acl_users\n         plugin = getattr(pas_instance, \'test\', None)\ndiff --git a/plone/app/users/tests/flexible_user_registration.rst b/plone/app/users/tests/flexible_user_registration.rst\nindex 07c21ef..1027aaa 100644\n--- a/plone/app/users/tests/flexible_user_registration.rst\n+++ b/plone/app/users/tests/flexible_user_registration.rst\n@@ -69,7 +69,7 @@ We should be able to add a field::\n \n     >>> browser.open(\'http://nohost/plone/@@member-fields\')\n     >>> browser.getLink(id="add-field").click()\n-    >>> print browser.url\n+    >>> print(browser.url)\n     http://nohost/plone/member-fields/@@add-field...\n \n     >>> \'Add new field\' in browser.contents\ndiff --git a/plone/app/users/tests/member_search.rst b/plone/app/users/tests/member_search.rst\nindex 0bbce8c..13e3585 100644\n--- a/plone/app/users/tests/member_search.rst\n+++ b/plone/app/users/tests/member_search.rst\n@@ -101,7 +101,7 @@ So let\'s search again. We should see two members (test_user_1_ and bob):\n     >>> browser.getControl(name=\'form.buttons.search\').click()\n     >>> \'2 items matching your search terms.\' in browser.contents\n     True\n-    >>> \'<a href="http://nohost/plone/Members/test_user_1_">\'in browser.contents\n+    >>> \'<a href="http://nohost/plone/author/test_user_1_">\'in browser.contents\n     True\n     >>> \'<a href="http://nohost/plone/author/bob-jones">\'in browser.contents\n     True\ndiff --git a/plone/app/users/tests/password.rst b/plone/app/users/tests/password.rst\nindex 320e4f6..9edd74b 100644\n--- a/plone/app/users/tests/password.rst\n+++ b/plone/app/users/tests/password.rst\n@@ -27,7 +27,7 @@ Viewing this form should not be possible for anonymous users:\n     >>> browser.open(\'http://nohost/plone/\' + view_name)\n     Traceback (most recent call last):\n     ...\n-    Unauthorized: ...You are not authorized to access this resource...\n+    zExceptions.unauthorized.Unauthorized: ...You are not authorized to access this resource...\n \n So let\'s login as Plone user:\n     >>> browser.open(\'http://nohost/plone/\')\n@@ -94,7 +94,7 @@ Now let\'s test using a PAS Password validation plugin. Add a test plugin.\n \n Check that we are given instructions on what is a valid password\n \n-   >>> print browser.contents\n+   >>> print(browser.contents)\n     <...\n     ...Enter your new password. Must not be dead...\n \n@@ -105,7 +105,7 @@ Let\'s try to change the password with an invalid password:\n     >>> browser.getControl(\'New password\').value = \'dead parrot\'\n     >>> browser.getControl(\'Confirm password\').value = \'dead parrot\'\n     >>> browser.getControl(\'Change Password\').click()\n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...\n     ...Must not be dead...\n \n@@ -115,7 +115,7 @@ Now try a valid password\n     >>> browser.getControl(\'New password\').value = \'fish\'\n     >>> browser.getControl(\'Confirm password\').value = \'fish\'\n     >>> browser.getControl(\'Change Password\').click()\n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...\n     ...Password changed...\n \ndiff --git a/plone/app/users/tests/personal_preferences.rst b/plone/app/users/tests/personal_preferences.rst\nindex 172344b..d5e88ef 100644\n--- a/plone/app/users/tests/personal_preferences.rst\n+++ b/plone/app/users/tests/personal_preferences.rst\n@@ -32,7 +32,7 @@ Viewing user data shouldn\'t be possible for anonymous users:\n     >>> browser.open("http://nohost/plone/" + view_name)\n     Traceback (most recent call last):\n     ...\n-    Unauthorized: ...You are not authorized to access this resource...\n+    zExceptions.unauthorized.Unauthorized: ...You are not authorized to access this resource...\n \n So let\'s login as Plone user:\n     >>> browser.open(\'http://nohost/plone/\')\ndiff --git a/plone/app/users/tests/personal_preferences_prefs_user_details.rst b/plone/app/users/tests/personal_preferences_prefs_user_details.rst\nindex 924b661..478b0e5 100644\n--- a/plone/app/users/tests/personal_preferences_prefs_user_details.rst\n+++ b/plone/app/users/tests/personal_preferences_prefs_user_details.rst\n@@ -115,5 +115,7 @@ form::\n     >>> browser.getControl(\'Cancel\').click()\n     >>> \'Changes canceled.\' in browser.contents\n     True\n-    >>> \'?userid=test_user_1_\' in browser.url\n+    >>> import six\n+    >>> searchstring = \'?userid:utf8:ustring=test_user_1_\' if six.PY2 else \'?userid=test_user_1_\'\n+    >>> searchstring in browser.url\n     True\ndiff --git a/plone/app/users/tests/plugins.rst b/plone/app/users/tests/plugins.rst\nindex 2e70a69..135f11e 100644\n--- a/plone/app/users/tests/plugins.rst\n+++ b/plone/app/users/tests/plugins.rst\n@@ -88,7 +88,7 @@ Now our password policy is in force.\n \n Check that we are given our help text on what is a valid password\n \n-   >>> print browser.contents\n+   >>> print(browser.contents)\n     <...\n     ...Enter your new password. Must not be dead...\n \n@@ -102,9 +102,9 @@ We\'ll enter an invalid password\n     >>> browser.getControl(\'Confirm password\').value = \'dead parrot\'\n     >>> browser.getControl(\'Register\').click()\n \n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...<div class="fieldErrorBox">Must not be dead</div>...\n-    >>> print browser.url\n+    >>> print(browser.url)\n     http://...@@new-user...\n \n Passwords that are autogenerated for users are not validated since they will never\ndiff --git a/plone/app/users/tests/registration_forms.rst b/plone/app/users/tests/registration_forms.rst\nindex 9012979..79116af 100644\n--- a/plone/app/users/tests/registration_forms.rst\n+++ b/plone/app/users/tests/registration_forms.rst\n@@ -2,6 +2,14 @@ Testing the flexible user registration\n ======================================\n \n     >>> portal = layer[\'portal\']\n+    >>> from plone.app.testing import setRoles\n+    >>> from plone.app.testing import TEST_USER_ID\n+    >>> setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+    >>> portal.invokeFactory(\'Folder\', \'news\')\n+    \'news\'\n+\n+    >>> import transaction\n+    >>> transaction.commit()\n     >>> from plone.testing.z2 import Browser\n     >>> browser = Browser(layer[\'app\'])\n     >>> browser.open(\'http://nohost/plone\')\n@@ -79,8 +87,8 @@ Testing the flexible user registration\n     >>> browser.getControl(\'Register\').click()\n     >>> browser.contents\n     \'...There were errors...Invalid email address...\'\n-    \n-    Fill out the form. \n+\n+    Fill out the form.\n     >>> browser.getControl(\'User Name\').value = \'user1\'\n     >>> browser.getControl(\'E-mail\').value = \'user1@example.com\'\n     >>> browser.getControl(\'Register\').click()\n@@ -143,6 +151,7 @@ Testing the flexible user registration\n     particular view. Let\'s make sure a came_from parameter in the query\n     string will be respected.\n \n+    >>> browser.handleErrors = False\n     >>> browser.open(\'http://nohost/plone/@@register?came_from=http://nohost/plone/news\')\n     >>> browser.getControl(\'User Name\').value = \'user5\'\n     >>> browser.getControl(\'E-mail\').value = \'user5@example.com\'\n@@ -263,9 +272,9 @@ Testing the flexible user registration\n     As we want to validate emails. The password fields have become optional.\n     >>> browser.getControl(name=\'form.widgets.mail_me\' + list_widget_suffix).value = True\n     >>> browser.getControl(\'Register\').click()\n-    >>> print browser.url\n+    >>> print(browser.url)\n     http://...@@usergroup-userprefs...\n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...User added...user4...\n \n     Check that at least this one error does not show up:\n@@ -313,7 +322,7 @@ Testing the flexible user registration\n \n     Check that we are given instructions on what is a valid password\n \n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...\n     ...Enter your new password. Must not be dead...\n \n@@ -331,7 +340,7 @@ Testing the flexible user registration\n     >>> browser.getControl(\'Confirm password\').value = \'dead parrot\'\n     >>> browser.getControl(\'Register\').click()\n \n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...<div class="fieldErrorBox">...Must not be dead...</div>...\n \n \n@@ -370,7 +379,7 @@ Testing the flexible user registration\n \n     Check that we are given instructions on what is a valid password\n \n-    >>> print browser.getControl("Password").labels[0]\n+    >>> print(browser.getControl("Password").labels[0])\n     Password...Enter your new password. Must not be dead. Minimum 5 characters...\n \n     We\'ll enter an invalid password\n@@ -382,7 +391,7 @@ Testing the flexible user registration\n     >>> browser.getControl(\'Confirm password\').value = \'dead\'\n     >>> browser.getControl(\'Register\').click()\n \n-    >>> print browser.contents\n+    >>> print(browser.contents)\n     <...<div class="fieldErrorBox">...Must not be dead. Your password must contain at least 5 characters....</div>...\n \n     Now try a valid password -- and we\'ll make sure non-ASCII characters are\ndiff --git a/plone/app/users/tests/test_account.py b/plone/app/users/tests/test_account.py\nindex 5168ac7..7c3405b 100644\n--- a/plone/app/users/tests/test_account.py\n+++ b/plone/app/users/tests/test_account.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from Products.CMFCore.interfaces import IMembershipTool\n from plone.app.users.browser.account import AccountPanelSchemaAdapter\n+from plone.app.users.tests.base import BaseTestCase\n from plone.testing import z2\n from zope.interface import implementer\n from zope.component import provideUtility\ndiff --git a/plone/app/users/tests/test_doctests.py b/plone/app/users/tests/test_doctests.py\nindex 21a35cd..e4f4f34 100644\n--- a/plone/app/users/tests/test_doctests.py\n+++ b/plone/app/users/tests/test_doctests.py\n@@ -1,9 +1,10 @@\n # -*- coding: utf-8 -*-\n-from plone.app.users.testing import optionflags\n from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n from plone.testing import layered\n \n import doctest\n+import re\n+import six\n import unittest\n \n \n@@ -22,6 +23,22 @@\n     \'../vocabularies.py\',\n ]\n \n+optionflags = (\n+    doctest.ELLIPSIS |\n+    doctest.NORMALIZE_WHITESPACE |\n+    doctest.REPORT_ONLY_FIRST_FAILURE\n+)\n+\n+\n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            got = got.replace(\'Unauthorized\', \'zExceptions.unauthorized.Unauthorized\')\n+            got = got.replace(\':utf8:ustring\', \'\')\n+            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n+            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n \n def test_suite():\n     suite = unittest.TestSuite()\n@@ -30,7 +47,8 @@ def test_suite():\n             doctest.DocFileSuite(\n                 \'tests/{0}\'.format(test_file),\n                 package=\'plone.app.users\',\n-                optionflags=optionflags\n+                optionflags=optionflags,\n+                checker=Py23DocChecker(),\n             ),\n             layer=PLONE_APP_USERS_FUNCTIONAL_TESTING)\n         for test_file in doc_tests\ndiff --git a/plone/app/users/tests/test_exportimport.py b/plone/app/users/tests/test_exportimport.py\nindex ddad27f..81443d9 100644\n--- a/plone/app/users/tests/test_exportimport.py\n+++ b/plone/app/users/tests/test_exportimport.py\n@@ -1,9 +1,9 @@\n # -*- coding: utf-8 -*-\n-from plone.app.testing.bbb import PloneTestCase\n from plone.app.users.browser.userdatapanel import getUserDataSchema\n from plone.app.users.setuphandlers import export_schema\n from plone.app.users.setuphandlers import import_schema\n from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n+from plone.app.users.tests.base import BaseTestCase\n from plone.namedfile.field import NamedBlobImage\n from Products.CMFCore.utils import getToolByName\n from Products.GenericSetup.tests.common import DummyExportContext\n@@ -11,11 +11,10 @@\n from zope import schema\n \n \n-class TestImport(PloneTestCase):\n+class TestImport(BaseTestCase):\n \n-    layer = PLONE_APP_USERS_FUNCTIONAL_TESTING\n-\n-    def afterSetUp(self):\n+    def setUp(self):\n+        super(TestImport, self).setUp()\n         xml = """<model xmlns:lingua="http://namespaces.plone.org/supermodel/lingua" xmlns:users="http://namespaces.plone.org/supermodel/users" xmlns:form="http://namespaces.plone.org/supermodel/form" xmlns:i18n="http://xml.zope.org/namespaces/i18n" xmlns:security="http://namespaces.plone.org/supermodel/security" xmlns:marshal="http://namespaces.plone.org/supermodel/marshal" xmlns="http://namespaces.plone.org/supermodel/schema" i18n:domain="plone">\n   <schema name="member-fields">\n     <field name="home_page" type="zope.schema.URI" users:forms="In User Profile">\n@@ -168,14 +167,14 @@ def test_export(self):\n         context = DummyExportContext(self.portal)\n         export_schema(context)\n         self.assertEqual(\'userschema.xml\', context._wrote[0][0])\n-        self.assertIn(\'field name="home_page"\', context._wrote[0][1])\n-        self.assertIn(\'field name="description"\', context._wrote[0][1])\n-        self.assertIn(\'field name="location"\', context._wrote[0][1])\n-        self.assertIn(\'field name="portrait"\', context._wrote[0][1])\n-        self.assertIn(\'field name="birthdate"\', context._wrote[0][1])\n-        self.assertIn(\'field name="another_date"\', context._wrote[0][1])\n-        self.assertIn(\'field name="age"\', context._wrote[0][1])\n-        self.assertIn(\'field name="department"\', context._wrote[0][1])\n-        self.assertIn(\'field name="skills"\', context._wrote[0][1])\n-        self.assertIn(\'field name="pi"\', context._wrote[0][1])\n-        self.assertIn(\'field name="vegetarian"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="home_page"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="description"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="location"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="portrait"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="birthdate"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="another_date"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="age"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="department"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="skills"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="pi"\', context._wrote[0][1])\n+        self.assertIn(b\'field name="vegetarian"\', context._wrote[0][1])\ndiff --git a/plone/app/users/tests/test_new_user.py b/plone/app/users/tests/test_new_user.py\nindex 5be5d1c..4bc3c5f 100644\n--- a/plone/app/users/tests/test_new_user.py\n+++ b/plone/app/users/tests/test_new_user.py\n@@ -36,8 +36,8 @@ class TestGenerateUserIdLoginName(BaseTestCase):\n     security settings.\n     """\n \n-    def afterSetUp(self):\n-        super(TestGenerateUserIdLoginName, self).afterSetUp()\n+    def setUp(self):\n+        super(TestGenerateUserIdLoginName, self).setUp()\n         self.portal_url = self.portal.absolute_url()\n         self.portal.acl_users._doAddUser(\n             \'siteadmin\', \'secret\', [\'Site Administrator\'], []\ndiff --git a/plone/app/users/tests/test_pam.py b/plone/app/users/tests/test_pam.py\nindex c67601f..c9e4d51 100644\n--- a/plone/app/users/tests/test_pam.py\n+++ b/plone/app/users/tests/test_pam.py\n@@ -1,22 +1,22 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFCore.utils import getToolByName\n from plone.app.multilingual.browser.setup import SetupMultilingualSite\n-from plone.app.users.browser.userdatapanel import UserDataPanel\n-from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n-from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, TEST_USER_PASSWORD\n-from plone.app.testing import setRoles\n+from plone.app.testing import applyProfile\n from plone.app.testing import login\n from plone.app.testing import PloneSandboxLayer\n-from plone.app.testing import applyProfile\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, TEST_USER_PASSWORD\n from plone.app.testing.layers import FunctionalTesting\n-from plone.app.testing.bbb import PloneTestCase\n+from plone.app.users.browser.userdatapanel import UserDataPanel\n+from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n from plone.testing import z2\n+from Products.CMFCore.utils import getToolByName\n+from transaction import commit\n from zExceptions import NotFound\n from zope.i18n import translate\n \n-from transaction import commit\n import unittest\n \n+\n class WITHPAMLayer(PloneSandboxLayer):\n \n     def setUpPloneSite(self, portal):\n@@ -37,7 +37,7 @@ def setUpPloneSite(self, portal):\n     name="PloneAppUsersWithPAMLayer:Functional")\n \n \n-class TestUserDataPanelWithPAM(PloneTestCase):\n+class TestUserDataPanelWithPAM(unittest.TestCase):\n \n     layer = WITHPAM_FUNCTIONAL_TESTING\n \ndiff --git a/plone/app/users/tests/test_robot.py b/plone/app/users/tests/test_robot.py\nindex 8b7a9f6..8d3ed58 100644\n--- a/plone/app/users/tests/test_robot.py\n+++ b/plone/app/users/tests/test_robot.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from plone.app.users.testing import PLONE_APP_USERS_ROBOT\n+from plone.app.users.testing import PLONE_APP_USERS_ACCEPTANCE_TESTING\n from plone.testing import layered\n \n import os\n@@ -18,6 +18,6 @@ def test_suite():\n #                    robotsuite.RobotTestSuite(\n #                        testfilepath,\n #                        noncritical=[\'fixme\']),\n-#                    layer=PLONE_APP_USERS_ROBOT),\n+#                    layer=PLONE_APP_USERS_ACCEPTANCE_TESTING),\n #            ])\n     return suite\ndiff --git a/plone/app/users/tests/test_schema_types.py b/plone/app/users/tests/test_schema_types.py\nindex 529104f..0218816 100644\n--- a/plone/app/users/tests/test_schema_types.py\n+++ b/plone/app/users/tests/test_schema_types.py\n@@ -3,20 +3,19 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n-from plone.app.testing.bbb import PloneTestCase\n from plone.app.users.setuphandlers import import_schema\n from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n from plone.testing.z2 import Browser\n from Products.GenericSetup.tests.common import DummyImportContext\n+from plone.app.users.tests.base import BaseTestCase\n \n import transaction\n \n \n-class TestSchema(PloneTestCase):\n+class TestSchema(BaseTestCase):\n \n-    layer = PLONE_APP_USERS_FUNCTIONAL_TESTING\n-\n-    def afterSetUp(self):\n+    def setUp(self):\n+        super(TestSchema, self).setUp()\n         xml = """<model xmlns:lingua="http://namespaces.plone.org/supermodel/lingua" xmlns:users="http://namespaces.plone.org/supermodel/users" xmlns:form="http://namespaces.plone.org/supermodel/form" xmlns:i18n="http://xml.zope.org/namespaces/i18n" xmlns:security="http://namespaces.plone.org/supermodel/security" xmlns:marshal="http://namespaces.plone.org/supermodel/marshal" xmlns="http://namespaces.plone.org/supermodel/schema" i18n:domain="plone">\n   <schema name="member-fields">\n     <field name="home_page" type="zope.schema.URI" users:forms="In User Profile">\ndiff --git a/plone/app/users/tests/test_user_data_panel.py b/plone/app/users/tests/test_user_data_panel.py\nindex 7115019..8e5f38d 100644\n--- a/plone/app/users/tests/test_user_data_panel.py\n+++ b/plone/app/users/tests/test_user_data_panel.py\n@@ -1,19 +1,13 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFCore.utils import getToolByName\n+from plone.app.testing import applyProfile\n from plone.app.users.browser.userdatapanel import UserDataPanel\n from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n-from plone.app.testing import applyProfile\n-from plone.app.testing.bbb import PloneTestCase\n-from plone.testing import z2\n+from plone.app.users.tests.base import BaseTestCase\n from zExceptions import NotFound\n from zope.i18n import translate\n \n-import unittest\n-\n-\n-class TestUserDataPanel(PloneTestCase):\n \n-    layer = PLONE_APP_USERS_FUNCTIONAL_TESTING\n+class TestUserDataPanel(BaseTestCase):\n \n     def test_regression(self):\n         portal = self.layer[\'portal\']\ndiff --git a/plone/app/users/tests/userdata.rst b/plone/app/users/tests/userdata.rst\nindex f56dbeb..a0385f2 100644\n--- a/plone/app/users/tests/userdata.rst\n+++ b/plone/app/users/tests/userdata.rst\n@@ -32,7 +32,7 @@ Viewing user data shouldn\'t be possible for anonymous users:\n     >>> browser.open(view_url)\n     Traceback (most recent call last):\n     ...\n-    Unauthorized: ...You are not authorized to access this resource...\n+    zExceptions.unauthorized.Unauthorized: ...You are not authorized to access this resource...\n \n So let\'s login as Plone user:\n     >>> browser.open(\'http://nohost/plone/\')\ndiff --git a/plone/app/users/tests/userdata_prefs_user_details.rst b/plone/app/users/tests/userdata_prefs_user_details.rst\nindex fdc5453..8a7e563 100644\n--- a/plone/app/users/tests/userdata_prefs_user_details.rst\n+++ b/plone/app/users/tests/userdata_prefs_user_details.rst\n@@ -15,6 +15,9 @@ Set Up\n     >>> membership = portal.portal_membership\n \n     >>> user_information_url = \'http://nohost/plone/@@user-information?userid={0}\'.format(TEST_USER_ID)\n+    >>> import six\n+    >>> if six.PY2:\n+    ...     user_information_url = \'http://nohost/plone/@@user-information?userid:utf8:ustring=test_user_1_\'\n \n     >>> browser = Browser(app)\n     >>> browser.handleErrors = False\ndiff --git a/plone/app/users/vocabularies.py b/plone/app/users/vocabularies.py\nindex 3d2cefb..907097d 100644\n--- a/plone/app/users/vocabularies.py\n+++ b/plone/app/users/vocabularies.py\n@@ -38,8 +38,9 @@ class UserRegistrationFieldsVocabulary(object):\n \n       >>> len(fields.by_token)\n       10\n-      >>> [k.value for k in fields] # doctest: +NORMALIZE_WHITESPACE\n-      [\'username\', \'description\', \'home_page\', \'email\', \'password_ctl\', \'portrait\', \'fullname\', \'password\', \'mail_me\', \'location\']\n+      >>> values = [k.value for k in fields]\n+      >>> sorted(values)\n+      [\'description\', \'email\', \'fullname\', \'home_page\', \'location\', \'mail_me\', \'password\', \'password_ctl\', \'portrait\', \'username\']\n \n       >>> email = fields.by_token[\'email\']\n       >>> email.title, email.token, email.value\n@@ -91,7 +92,7 @@ class GroupIdVocabulary(object):\n       >>> [k.value for k in fields] # doctest: +NORMALIZE_WHITESPACE\n       [\'fancygroup\', \'Reviewers\', \'Site Administrators\']\n       >>> [k.title for k in fields] # doctest: +NORMALIZE_WHITESPACE\n-      [u\'Group Title (fancygroup)\', u\'Reviewers\', u\'Site Administrators\']\n+      [\'Group Title (fancygroup)\', \'Reviewers\', \'Site Administrators\']\n \n     """\n \ndiff --git a/setup.py b/setup.py\nindex 24fcf7d..4dbff90 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -27,11 +27,14 @@\n         \'Environment :: Web Environment\',\n         \'Framework :: Plone\',\n         \'Framework :: Plone :: 5.1\',\n+        \'Framework :: Plone :: 5.2\',\n         \'Framework :: Zope2\',\n         \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n         \'Operating System :: OS Independent\',\n         \'Programming Language :: Python\',\n         \'Programming Language :: Python :: 2.7\',\n+        \'Programming Language :: Python :: 3.6\',\n+        \'Programming Language :: Python :: 3.7\',\n     ],\n     keywords=\'Zope CMF Plone Users Groups\',\n     author=\'Plone Foundation\',\n@@ -59,6 +62,7 @@\n         \'plone.schema\',\n         \'plone.uuid\',\n         \'setuptools\',\n+        \'six\',\n         \'z3c.form\',\n         \'zope.component\',\n         \'zope.event\',\n'

