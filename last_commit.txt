Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-11T20:47:33+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/7c4d338063fa1565853f2cec0e4011145ff1266d

Removed use of six and other Python 2 only code.

Files changed:
M plone/app/upgrade/tests/test_upgrade.py
M plone/app/upgrade/v52/final.py
M plone/app/upgrade/v52/tests.py
M setup.py

b'diff --git a/plone/app/upgrade/tests/test_upgrade.py b/plone/app/upgrade/tests/test_upgrade.py\nindex 131f8553..dc9c491b 100644\n--- a/plone/app/upgrade/tests/test_upgrade.py\n+++ b/plone/app/upgrade/tests/test_upgrade.py\n@@ -5,7 +5,6 @@\n from Products.CMFPlone.factory import _DEFAULT_PROFILE\n \n import mock\n-import sys\n \n \n class TestUpgrade(MigrationTest):\n@@ -41,12 +40,9 @@ def testVersionMatch(self):\n     def testDoUpgrades(self):\n         self.setRoles([\'Manager\'])\n \n-        if sys.version_info.major == 2:\n-            start_profile = \'4013\'\n-        else:\n-            # Python 3 is only supported on 5.2+.\n-            # This means you can not upgrade from 5.1 or earlier.\n-            start_profile = \'5200\'\n+        # Python 3 is only supported on 5.2+.\n+        # This means you can not upgrade from 5.1 or earlier.\n+        start_profile = \'5200\'\n         self.setup.setLastVersionForProfile(_DEFAULT_PROFILE, start_profile)\n         upgrades = self.setup.listUpgrades(_DEFAULT_PROFILE)\n         self.assertTrue(len(upgrades) > 0)\ndiff --git a/plone/app/upgrade/v52/final.py b/plone/app/upgrade/v52/final.py\nindex 78aa1b58..19a797e6 100644\n--- a/plone/app/upgrade/v52/final.py\n+++ b/plone/app/upgrade/v52/final.py\n@@ -11,7 +11,6 @@\n from zope.component import getUtility\n \n import logging\n-import six\n \n \n logger = logging.getLogger(\'plone.app.upgrade\')\n@@ -217,12 +216,9 @@ def migrate_record_from_ascii_to_bytes(field_name, iface, prefix=None):\n         logger.info("Replaced empty %s ASCII (native string) field with Bytes field.", field_name)\n         return\n     new_record = registry.records[field_name]\n-    if isinstance(original_value, six.text_type):\n-        # This is what we expect in Python 3.\n-        # fromUnicode could be called fromText in Python 3.\n+    if isinstance(original_value, str):\n         new_value = new_record.field.fromUnicode(original_value)\n     elif isinstance(original_value, bytes):\n-        # This is what we expect in Python 2.\n         new_value = original_value\n     else:\n         # Seems impossible, but I like to be careful.\ndiff --git a/plone/app/upgrade/v52/tests.py b/plone/app/upgrade/v52/tests.py\nindex 7fb0b87c..296a1532 100644\n--- a/plone/app/upgrade/v52/tests.py\n+++ b/plone/app/upgrade/v52/tests.py\n@@ -10,7 +10,6 @@\n from Products.CMFPlone.interfaces import IMarkupSchema\n from zope.component import getUtility\n \n-import six\n import unittest\n \n \n@@ -153,22 +152,6 @@ def test_site_logo_text(self):\n         self.assertIsInstance(record.value, bytes)\n         self.assertEqual(record.value, b"native string")\n \n-    @unittest.skipIf(six.PY3, \'Only test on Python 2\')\n-    def test_site_logo_field_bytes_value_text(self):\n-        from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n-\n-        del self.registry.records[\'plone.site_logo\']\n-        record_51 = Record(field.Bytes())\n-        # This would give a WrongType error on Python 3:\n-        record_51.value = "native string"\n-        self.registry.records[\'plone.site_logo\'] = record_51\n-        # Migrate.\n-        migrate_site_logo_from_ascii_to_bytes(self.portal)\n-        record = self.registry.records[\'plone.site_logo\']\n-        self.assertIsInstance(record.field, field.Bytes)\n-        self.assertIsInstance(record.value, bytes)\n-        self.assertEqual(record.value, b"native string")\n-\n     def test_migrate_record_from_ascii_to_bytes_with_prefix(self):\n         # This is the more general fixer from ASCII to Bytes.\n         from plone.app.upgrade.v52.final import migrate_record_from_ascii_to_bytes\ndiff --git a/setup.py b/setup.py\nindex a4ab1d33..0505b13a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -61,7 +61,6 @@\n         \'plone.contentrules\',\n         \'plone.app.iterate\',\n         \'plone.app.viewletmanager\',\n-        \'six\',\n     ],\n     entry_points="""\n     [z3c.autoinclude.plugin]\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-11T20:47:33+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/4de30c5ae33398b6834a264eb8099a625a4bb8fe

Removed Kupu editor backwards compatibility alias.

Files changed:
M plone/app/upgrade/__init__.py
D plone/app/upgrade/kupu_bbb.py

b"diff --git a/plone/app/upgrade/__init__.py b/plone/app/upgrade/__init__.py\nindex e8dc5bf3..13aa3bda 100644\n--- a/plone/app/upgrade/__init__.py\n+++ b/plone/app/upgrade/__init__.py\n@@ -24,10 +24,6 @@\n     import zope.ramcache.ram\n     alias_module('zope.app.cache.ram', zope.ramcache.ram)\n \n-if 'products.kupu' not in pkg_resources.working_set.by_key:\n-    from . import kupu_bbb\n-    alias_module('Products.kupu.plone.plonelibrarytool', kupu_bbb)\n-\n try:\n     from Products.CMFCalendar import interfaces\n except ImportError:\ndiff --git a/plone/app/upgrade/kupu_bbb.py b/plone/app/upgrade/kupu_bbb.py\ndeleted file mode 100644\nindex 21c55c57..00000000\n--- a/plone/app/upgrade/kupu_bbb.py\n+++ /dev/null\n@@ -1,31 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from OFS import SimpleItem\n-\n-\n-class PloneKupuLibraryTool(SimpleItem.SimpleItem):\n-\n-    def get_stripped_attributes(self):\n-        stripped = []\n-        for (tags, attrs) in self.getHtmlExclusions():\n-            if not tags:\n-                stripped.extend(attrs)\n-        return stripped\n-\n-    def get_stripped_combinations(self):\n-        stripped = [(tags, attrs) for (tags, attrs) in\n-                    self.getHtmlExclusions() if tags and attrs]\n-        return stripped\n-\n-    def getHtmlExclusions(self):\n-        excl = getattr(self, 'html_exclusions', ())\n-        res = []\n-        for (t, a) in excl:\n-            if t and t[0] == '':\n-                t = []\n-            if a and a[0] == '':\n-                a = []\n-            res.append((t, a))\n-        return res\n-\n-    def isKupuEnabled(self, *args, **kwargs):\n-        return False\n"

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-11T20:47:33+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/ea27af9774d5a5079f8088c78dd2feb194b0ec2b

Removed test support for old Products.ResourceRegistries.

Files changed:
M plone/app/upgrade/__init__.py
M plone/app/upgrade/tests/base.py

b"diff --git a/plone/app/upgrade/__init__.py b/plone/app/upgrade/__init__.py\nindex 13aa3bda..d106d06b 100644\n--- a/plone/app/upgrade/__init__.py\n+++ b/plone/app/upgrade/__init__.py\n@@ -9,13 +9,6 @@\n import warnings\n \n \n-try:\n-    pkg_resources.get_distribution('Products.ResourceRegistries')\n-except pkg_resources.DistributionNotFound:\n-    IS_PRODUCT_RESOURCE_REGISTRIES_INSTALLED = False\n-else:\n-    IS_PRODUCT_RESOURCE_REGISTRIES_INSTALLED = True\n-\n try:\n     from zope.app.cache.interfaces.ram import IRAMCache  # noqa F401\n except ImportError:\n@@ -157,11 +150,6 @@\n     alias_module('plone.app.folder.nogopip.GopipIndex', GopipIndex)\n \n \n-if not IS_PRODUCT_RESOURCE_REGISTRIES_INSTALLED:\n-    sys.modules['Products.ResourceRegistries.tools.CSSRegistry'] = bbb\n-    sys.modules['Products.ResourceRegistries.tools.JSRegistry'] = bbb\n-\n-\n try:\n     with warnings.catch_warnings():\n         # Catch DeprecationWarning:\ndiff --git a/plone/app/upgrade/tests/base.py b/plone/app/upgrade/tests/base.py\nindex 30366a79..0ab005e6 100644\n--- a/plone/app/upgrade/tests/base.py\n+++ b/plone/app/upgrade/tests/base.py\n@@ -16,7 +16,6 @@\n import transaction\n import warnings\n \n-from plone.app.upgrade import IS_PRODUCT_RESOURCE_REGISTRIES_INSTALLED\n \n #\n # Base TestCase for upgrades\n@@ -67,20 +66,6 @@ def removeActionFromTool(\n         ):\n             tool._delOb(action_id)\n \n-    def addResourceToJSTool(self, resource_name):\n-        if IS_PRODUCT_RESOURCE_REGISTRIES_INSTALLED:\n-            # Registers a resource with the javascripts tool\n-            tool = getToolByName(self.portal, 'portal_javascripts')\n-            if resource_name not in tool.getResourceIds():\n-                tool.registerScript(resource_name)\n-\n-    def addResourceToCSSTool(self, resource_name):\n-        if IS_PRODUCT_RESOURCE_REGISTRIES_INSTALLED:\n-            # Registers a resource with the css tool\n-            tool = getToolByName(self.portal, 'portal_css')\n-            if resource_name not in tool.getResourceIds():\n-                tool.registerStylesheet(resource_name)\n-\n     def removeSiteProperty(self, property_id):\n         # Removes a site property from portal_properties\n         tool = getToolByName(self.portal, 'portal_properties')\n"

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-11T20:47:33+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/04bbe2e2843f9ba900cf007b514232bfa20452b3

Use get_installer from plone.base.

No more backwards compatibility code needed for older Plone versions.

Files changed:
M plone/app/upgrade/tests/base.py
M plone/app/upgrade/utils.py
M plone/app/upgrade/v52/betas.py
M plone/app/upgrade/v52/final.py
M plone/app/upgrade/v60/alphas.py
M setup.py

b'diff --git a/plone/app/upgrade/tests/base.py b/plone/app/upgrade/tests/base.py\nindex 0ab005e6..880ebe43 100644\n--- a/plone/app/upgrade/tests/base.py\n+++ b/plone/app/upgrade/tests/base.py\n@@ -7,6 +7,7 @@\n from plone.app.testing import PloneSandboxLayer\n from plone.app.testing.bbb import PloneTestCase\n from plone.app.testing.bbb import PTC_FIXTURE\n+from plone.base.utils import get_installer\n from Products.CMFCore.interfaces import IActionCategory\n from Products.CMFCore.interfaces import IActionInfo\n from Products.CMFCore.utils import getToolByName\n@@ -102,19 +103,9 @@ def removeMemberdataProperty(self, property_id):\n \n     def uninstallProduct(self, product_name):\n         # Removes a product\n-        try:\n-            from Products.CMFPlone.utils import get_installer\n-        except ImportError:\n-            # BBB For Plone 5.0 and lower.\n-            qi = getToolByName(self.portal, \'portal_quickinstaller\', None)\n-            if qi is None:\n-                return\n-            if qi.isProductInstalled(product_name):\n-                qi.uninstallProducts([product_name])\n-        else:\n-            qi = get_installer(self.portal)\n-            if qi.is_product_installed(product_name):\n-                qi.uninstall_product(product_name)\n+        installer = get_installer(self.portal)\n+        if installer.is_product_installed(product_name):\n+            installer.uninstall_product(product_name)\n \n     def addSkinLayer(self, layer, skin=\'Plone Default\', pos=None):\n         # Adds a skin layer at pos. If pos is None, the layer is appended\ndiff --git a/plone/app/upgrade/utils.py b/plone/app/upgrade/utils.py\nindex 4e276e1b..41c4ea08 100644\n--- a/plone/app/upgrade/utils.py\n+++ b/plone/app/upgrade/utils.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_base\n+from plone.base.utils import get_installer\n from Products.CMFCore.DirectoryView import _dirreg\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import base_hasattr\n@@ -171,41 +172,13 @@ def installOrReinstallProduct(portal, product_name, out=None, hidden=False):\n     If product is already installed test if it needs to be reinstalled. Also\n     fix skins after reinstalling\n     """\n-    try:\n-        from Products.CMFPlone.utils import get_installer\n-    except ImportError:\n-        # BBB For Plone 5.0 and lower.\n-        qi = getToolByName(portal, \'portal_quickinstaller\', None)\n-        if qi is None:\n-            return\n-        old_qi = True\n-    else:\n-        qi = get_installer(portal)\n-        old_qi = False\n-    if old_qi:\n-        if not qi.isProductInstalled(product_name):\n-            qi.installProduct(product_name, hidden=hidden)\n-            logger.info(\'Installed %s\', product_name)\n-        elif old_qi:\n-            info = qi._getOb(product_name)\n-            installed_version = info.getInstalledVersion()\n-            product_version = qi.getProductVersion(product_name)\n-            if installed_version != product_version:\n-                qi.reinstallProducts([product_name])\n-                logger.info(\n-                    \'%s is out of date (installed: %s/ filesystem: %s), \'\n-                    \'reinstalled.\',\n-                    product_name, installed_version, product_version)\n-            else:\n-                logger.info(\'%s already installed.\', product_name)\n+    installer = get_installer(portal)\n+    if not installer.is_product_installed(product_name):\n+        installer.install_product(product_name, allow_hidden=True)\n+        logger.info(\'Installed %s\', product_name)\n     else:\n-        # New QI browser view.\n-        if not qi.is_product_installed(product_name):\n-            qi.install_product(product_name, allow_hidden=True)\n-            logger.info(\'Installed %s\', product_name)\n-        else:\n-            qi.upgrade_product(product_name)\n-            logger.info(\'Upgraded %s\', product_name)\n+        installer.upgrade_product(product_name)\n+        logger.info(\'Upgraded %s\', product_name)\n     # Refresh skins\n     portal.clearCurrentSkin()\n     if getattr(portal, \'REQUEST\', None):\ndiff --git a/plone/app/upgrade/v52/betas.py b/plone/app/upgrade/v52/betas.py\nindex 9ab73793..b80a0c28 100644\n--- a/plone/app/upgrade/v52/betas.py\n+++ b/plone/app/upgrade/v52/betas.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.app.upgrade.utils import cleanUpToolRegistry\n from plone.app.upgrade.utils import loadMigrationProfile\n+from plone.base.utils import get_installer\n from Products.CMFCore.utils import getToolByName\n from types import ModuleType\n from zc.relation.interfaces import ICatalog\n@@ -142,16 +143,14 @@ def to52beta1(context):\n     remove_legacy_resource_registries(context)\n     remove_interface_indexes_from_relations_catalog()\n     # Make sure plone.staticresources is installed\n-    from Products.CMFPlone.utils import get_installer\n-    qi = get_installer(context)\n-    if not qi.is_product_installed(\'plone.staticresources\'):\n-        qi.install_product(\'plone.staticresources\')\n+    installer = get_installer(context)\n+    if not installer.is_product_installed(\'plone.staticresources\'):\n+        installer.install_product(\'plone.staticresources\')\n \n \n def to52rc1(context):\n     loadMigrationProfile(context, \'profile-plone.app.upgrade.v52:to52rc1\')\n     # Make sure plone.staticresources is installed\n-    from Products.CMFPlone.utils import get_installer\n-    qi = get_installer(context)\n-    if not qi.is_product_installed(\'plone.staticresources\'):\n-        qi.install_product(\'plone.staticresources\')\n+    installer = get_installer(context)\n+    if not installer.is_product_installed(\'plone.staticresources\'):\n+        installer.install_product(\'plone.staticresources\')\ndiff --git a/plone/app/upgrade/v52/final.py b/plone/app/upgrade/v52/final.py\nindex 19a797e6..0b52c623 100644\n--- a/plone/app/upgrade/v52/final.py\n+++ b/plone/app/upgrade/v52/final.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl.Permissions import view\n from plone.app.upgrade.utils import loadMigrationProfile\n+from plone.base.utils import get_installer\n from plone.registry import field\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n@@ -84,10 +85,9 @@ def move_dotted_to_named_behaviors(context):\n \n     logger.info(\'Done moving dotted to named behaviors.\')\n     # Make sure plone.staticresources is installed\n-    from Products.CMFPlone.utils import get_installer\n-    qi = get_installer(context)\n-    if not qi.is_product_installed(\'plone.staticresources\'):\n-        qi.install_product(\'plone.staticresources\')\n+    installer = get_installer(context)\n+    if not installer.is_product_installed(\'plone.staticresources\'):\n+        installer.install_product(\'plone.staticresources\')\n \n \n KEYS_TO_CHANGE = [\n@@ -129,10 +129,9 @@ def to521(context):\n     """5.2.0 -> 5.2.1"""\n     loadMigrationProfile(context, \'profile-plone.app.upgrade.v52:to521\')\n     # Make sure plone.staticresources is installed\n-    from Products.CMFPlone.utils import get_installer\n-    qi = get_installer(context)\n-    if not qi.is_product_installed(\'plone.staticresources\'):\n-        qi.install_product(\'plone.staticresources\')\n+    installer = get_installer(context)\n+    if not installer.is_product_installed(\'plone.staticresources\'):\n+        installer.install_product(\'plone.staticresources\')\n \n \n def to522(context):\ndiff --git a/plone/app/upgrade/v60/alphas.py b/plone/app/upgrade/v60/alphas.py\nindex 8908c110..8fcff6ce 100644\n--- a/plone/app/upgrade/v60/alphas.py\n+++ b/plone/app/upgrade/v60/alphas.py\n@@ -1,12 +1,12 @@\n # -*- coding: utf-8 -*-\n from plone.app.upgrade.utils import loadMigrationProfile\n+from plone.base.utils import get_installer\n from plone.dexterity.fti import DexterityFTI\n from plone.registry.interfaces import IRegistry\n from plone.uuid.interfaces import ATTRIBUTE_NAME\n from plone.uuid.interfaces import IUUIDGenerator\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IBundleRegistry\n-from Products.CMFPlone.utils import get_installer\n from ZODB.broken import Broken\n from zope.component import getUtility\n from zope.component import queryUtility\ndiff --git a/setup.py b/setup.py\nindex 0505b13a..4ba9824d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -44,6 +44,7 @@\n     ),\n     install_requires=[\n         \'setuptools\',\n+        \'plone.base\',\n         \'plone.portlets\',\n         \'transaction\',\n         \'zope.component\',\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-11T20:47:33+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/4bed821baff81043157ef0dc20a270c39391d52a

Removed backwards compatibility aliases.

Files changed:
M plone/app/upgrade/__init__.py
D plone/app/upgrade/atcontentypes_bbb.py
D plone/app/upgrade/bbb.py
D plone/app/upgrade/bbbd/LanguageTool.py
D plone/app/upgrade/bbbd/__init__.py

b'diff --git a/plone/app/upgrade/__init__.py b/plone/app/upgrade/__init__.py\nindex d106d06b..de75665f 100644\n--- a/plone/app/upgrade/__init__.py\n+++ b/plone/app/upgrade/__init__.py\n@@ -1,171 +1,15 @@\n-# -*- coding: utf-8 -*-\n from plone.app.upgrade.utils import alias_module\n \n-from . import bbb\n-from . import bbb_qi\n-from . import bbbd\n import pkg_resources\n-import sys\n-import warnings\n \n \n-try:\n-    from zope.app.cache.interfaces.ram import IRAMCache  # noqa F401\n-except ImportError:\n-    import zope.ramcache.interfaces.ram\n-    alias_module(\'zope.app.cache.interfaces.ram\', zope.ramcache.interfaces.ram)\n-    import zope.ramcache.ram\n-    alias_module(\'zope.app.cache.ram\', zope.ramcache.ram)\n-\n-try:\n-    from Products.CMFCalendar import interfaces\n-except ImportError:\n-    alias_module(\'Products.CMFCalendar.interfaces\', bbb)\n-\n-try:\n-    from Products.CMFPlone import CalendarTool  # noqa F401\n-except ImportError:\n-    sys.modules[\'Products.CMFPlone.CalendarTool\'] = bbb\n-\n-try:\n-    from Products.CMFPlone import DiscussionTool  # noqa F401\n-except ImportError:\n-    sys.modules[\'Products.CMFPlone.DiscussionTool\'] = bbb\n-\n-try:\n-    from Products.CMFPlone import InterfaceTool  # noqa F401\n-except ImportError:\n-    sys.modules[\'Products.CMFPlone.InterfaceTool\'] = bbb\n-\n-try:\n-    from Products.CMFPlone import SyndicationTool  # noqa F401\n-except ImportError:\n-    sys.modules[\'Products.CMFPlone.SyndicationTool\'] = bbb\n-\n-try:\n-    from Products.CMFPlone import UndoTool  # noqa F401\n-except ImportError:\n-    sys.modules[\'Products.CMFPlone.UndoTool\'] = bbb\n-\n-\n-try:\n-    import Products.TinyMCE\n-except ImportError:\n-    alias_module(\'Products.TinyMCE.utility\', bbb)\n-    alias_module(\'Products.TinyMCE.interfaces.utility\', bbb)\n-\n-\n-try:\n-    import Products.CMFActionIcons\n-except ImportError:\n-    alias_module(\'Products.CMFPlone.ActionIconsTool\', bbb)\n-    alias_module(\'Products.CMFActionIcons.interfaces\', bbb)\n-    alias_module(\'Products.CMFActionIcons.interfaces._tools\', bbb)\n-    alias_module(\'Products.CMFActionIcons.ActionIconsTool\', bbb)\n-\n-try:\n-    import Products.CMFPlone.FactoryTool\n-except ImportError:\n-    try:\n-        pkg_resources.get_distribution(\'Products.ATContentTypes\')\n-    except BaseException:\n-        from plone.app.upgrade import atcontentypes_bbb\n-        alias_module(\'Products.CMFPlone.FactoryTool\', atcontentypes_bbb)\n-    else:\n-        from Products.ATContentTypes.tool import factory\n-        alias_module(\'Products.CMFPlone.FactoryTool\', factory)\n-\n-try:\n-    import Products.CMFPlone.MetadataTool\n-    Products.CMFPlone.MetadataTool  # pyflakes\n-except ImportError:\n-    try:\n-        pkg_resources.get_distribution(\'Products.ATContentTypes\')\n-    except BaseException:\n-        from plone.app.upgrade import atcontentypes_bbb\n-        alias_module(\'Products.CMFPlone.MetadataTool\', atcontentypes_bbb)\n-    else:\n-        from Products.ATContentTypes.tool import metadata\n-        alias_module(\'Products.CMFPlone.MetadataTool\', metadata)\n-\n-try:\n-    import Products.CMFDefault.MetadataTool\n-    Products.CMFDefault.MetadataTool  # pyflakes\n-except ImportError:\n-    try:\n-        pkg_resources.get_distribution(\'Products.ATContentTypes\')\n-    except BaseException:\n-        from plone.app.upgrade import atcontentypes_bbb\n-        alias_module(\'Products.CMFDefault.MetadataTool\', atcontentypes_bbb)\n-    else:\n-        from Products.ATContentTypes.tool import metadata\n-        sys.modules[\'Products.CMFDefault.MetadataTool\'] = metadata\n-\n-try:\n-    import Products.CMFDefault.SyndicationInfo\n-    Products.CMFDefault.SyndicationInfo  # pyflakes\n-except ImportError:\n-    sys.modules[\'Products.CMFDefault.SyndicationInfo\'] = bbb\n-\n-try:\n-    from Products.PloneLanguageTool import interfaces  # noqa F811\n-except ImportError:\n-    alias_module(\'Products.PloneLanguageTool.interfaces\', bbb)\n-    alias_module(\'Products.PloneLanguageTool\', bbbd)\n-    __import__(\n-        \'Products.PloneLanguageTool.LanguageTool\',\n-    ).PloneLanguageTool.LanguageTool = __import__(\n-        \'Products.PloneLanguageTool.LanguageTool\',\n-    ).PloneLanguageTool.LanguageTool.LanguageTool\n-\n-\n-# To solve the __iro__ problem because CMFPlacefulWorkflow interfaces\n-# changed on 1.6.1\n-try:\n-    pkg_resources.get_distribution(\'Products.CMFPlacefulWorkflow\')\n-    from Products.CMFPlacefulWorkflow.interfaces import (  # noqa F401\n-        portal_placeful_workflow)\n-except pkg_resources.DistributionNotFound:\n-    # No package in this environment requires CMFPlacefulWorkflow,\n-    # so no patching necessary\n-    pass\n-except BaseException:\n-    from Products.CMFPlacefulWorkflow import interfaces  # noqa F811\n-    alias_module(\n-        \'Products.CMFPlacefulWorkflow.interfaces.portal_placeful_workflow\',\n-        interfaces)\n-\n-try:\n-    from Products.PasswordResetTool import PasswordResetTool\n-    PasswordResetTool  # pyflakes\n-except ImportError:\n-    sys.modules[\'Products.PasswordResetTool.PasswordResetTool\'] = bbb\n-\n-\n-try:\n-    from plone.app.folder.nogopip import GopipIndex\n-    GopipIndex  # pyflakes\n-except ImportError:\n-    from plone.folder.nogopip import GopipIndex\n-    alias_module(\'plone.app.folder.nogopip.GopipIndex\', GopipIndex)\n-\n-\n-try:\n-    with warnings.catch_warnings():\n-        # Catch DeprecationWarning:\n-        # "LockItem is deprecated. Please import from OFS.LockItem."\n-        # Depending on which Plone/Zope version we have, webdav may be gone or re-added.\n-        # Anyway, if the import fails, we want to create an alias module.\n-        warnings.simplefilter("ignore")\n-        from webdav.LockItem import LockItem\n-        LockItem  # pyflakes\n-except ImportError:\n-    from OFS.LockItem import LockItem\n-    alias_module(\'webdav.LockItem.LockItem\', LockItem)\n-\n try:\n     pkg_resources.get_distribution(\'Products.CMFQuickInstallerTool\')\n except pkg_resources.DistributionNotFound:\n+    # The alias module helps when migrating to Plone 6.0.0a1.\n+    # Remove when we no longer support upgrading from Plone 5.2.\n+    from . import bbb_qi\n+\n     alias_module(\'Products.CMFQuickInstallerTool\', bbb_qi)\n     alias_module(\'Products.CMFPlone.QuickInstallerTool\', bbb_qi)\n \ndiff --git a/plone/app/upgrade/atcontentypes_bbb.py b/plone/app/upgrade/atcontentypes_bbb.py\ndeleted file mode 100644\nindex 743f8174..00000000\n--- a/plone/app/upgrade/atcontentypes_bbb.py\n+++ /dev/null\n@@ -1,24 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from OFS.SimpleItem import SimpleItem\n-from Products.CMFCore.utils import registerToolInterface\n-from zope.interface import Interface\n-\n-\n-MetadataTool = SimpleItem\n-\n-\n-class FactoryTool(SimpleItem):\n-    """ Compatibility code for portal_factory\n-    """\n-\n-    def __nonzero__(self):\n-        """ Always evaluate to False\n-        """\n-        return 0\n-\n-\n-class IFactoryTool(Interface):\n-    pass\n-\n-\n-registerToolInterface(\'portal_factory\', IFactoryTool)\ndiff --git a/plone/app/upgrade/bbb.py b/plone/app/upgrade/bbb.py\ndeleted file mode 100644\nindex 92755bd7..00000000\n--- a/plone/app/upgrade/bbb.py\n+++ /dev/null\n@@ -1,78 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from OFS.SimpleItem import SimpleItem\n-from Products.CMFCore.utils import registerToolInterface\n-from zope.interface import Interface\n-\n-\n-CalendarTool = SimpleItem\n-DiscussionTool = SimpleItem\n-InterfaceTool = SimpleItem\n-SyndicationTool = SimpleItem\n-UndoTool = SimpleItem\n-TinyMCE = SimpleItem\n-PasswordResetTool = SimpleItem\n-CSSRegistryTool = SimpleItem\n-JSRegistryTool = SimpleItem\n-\n-\n-class ILanguageTool(Interface):\n-    pass\n-\n-\n-class ITinyMCE(Interface):\n-    pass\n-\n-\n-class ICalendarTool(Interface):\n-    pass\n-\n-\n-class IActionIconsTool(Interface):\n-    pass\n-\n-\n-registerToolInterface(\'portal_actionicons\', IActionIconsTool)\n-\n-\n-class ActionIcon(SimpleItem):\n-\n-    _title = None\n-    _category = \'object\'\n-    _action_id = \'view\'\n-    _icon_expr_text = \'document_icon\'\n-\n-    def __init__(self, category, action_id, icon_expr_text=\'\', title=None):\n-        self._category = category\n-        self._action_id = action_id\n-        self._icon_expr_text = icon_expr_text\n-        self._title = title\n-\n-\n-class ActionIconsTool(SimpleItem):\n-\n-    def __init__(self):\n-        self._icons = ()\n-        self._lookup = {}\n-\n-    def listActionIcons(self):\n-        return [x.__of__(self) for x in self._icons]\n-\n-    def addActionIcon(self, category, action_id, icon_expr, title=None):\n-        icons = list(self._icons)\n-        icons.append(ActionIcon(category, action_id, icon_expr, title))\n-        self._lookup[(category, action_id)] = icons[-1]\n-        self._icons = tuple(icons)\n-\n-    def removeActionIcon(self, category, action_id):\n-        icons = list(self._icons)\n-        icon = self._lookup[(category, action_id)]\n-        icons.remove(icon)\n-        del self._lookup[(category, action_id)]\n-        self._icons = tuple(icons)\n-\n-# BBB from CMFDefault\n-\n-\n-class SyndicationInformation(SimpleItem):\n-    id = \'syndication_information\'\n-    meta_type = \'SyndicationInformation\'\ndiff --git a/plone/app/upgrade/bbbd/LanguageTool.py b/plone/app/upgrade/bbbd/LanguageTool.py\ndeleted file mode 100644\nindex 16bc01bc..00000000\n--- a/plone/app/upgrade/bbbd/LanguageTool.py\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from OFS.SimpleItem import SimpleItem\n-from ZPublisher import BeforeTraverse\n-\n-\n-class LanguageTool(SimpleItem):\n-\n-    def __call__(self, container, req):\n-        pass\n-\n-    def manage_beforeDelete(self, item, container):\n-        if item is self:\n-            handle = self.meta_type + \'/\' + self.getId()\n-            BeforeTraverse.unregisterBeforeTraverse(container, handle)\ndiff --git a/plone/app/upgrade/bbbd/__init__.py b/plone/app/upgrade/bbbd/__init__.py\ndeleted file mode 100644\nindex 87cd06e7..00000000\n--- a/plone/app/upgrade/bbbd/__init__.py\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from .LanguageTool import LanguageTool  # noqa F401\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-11T20:51:04+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/a5305c9d95a992da9e72dcad382fd2eb2ca6daaf

Removed 'mock' dependency.

Use unittest.mock.

Files changed:
M plone/app/upgrade/tests/test_upgrade.py
M setup.py

b"diff --git a/plone/app/upgrade/tests/test_upgrade.py b/plone/app/upgrade/tests/test_upgrade.py\nindex dc9c491b..25d5bbb8 100644\n--- a/plone/app/upgrade/tests/test_upgrade.py\n+++ b/plone/app/upgrade/tests/test_upgrade.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.app.upgrade.tests.base import MigrationTest\n from plone.app.upgrade.utils import version_match\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.factory import _DEFAULT_PROFILE\n \n-import mock\n+from unittest import mock\n \n \n class TestUpgrade(MigrationTest):\ndiff --git a/setup.py b/setup.py\nindex 4ba9824d..813afd78 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -36,7 +36,6 @@\n     extras_require=dict(\n         test=[\n             'zope.site',\n-            'mock',\n             'plone.app.caching',\n             'plone.app.testing',\n             'plone.app.theming',\n"

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-11T20:53:17+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/5af5775a32a6499537c7d3c1fe1ca7e0b12ad0e3

Depend on Products.CMFPlone&gt;=6.0.0a1.

Removed most other minimum versions, as we are pretty much guaranteed to have at least those versions in Plone 6,
and the reasons for the minimum pins are only interesting for software archeologists.

Files changed:
M setup.py

b"diff --git a/setup.py b/setup.py\nindex 813afd78..1599caa5 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -50,13 +50,13 @@\n         'zope.interface',\n         'zope.ramcache',\n         'Acquisition',\n-        'Products.CMFPlone',\n+        'Products.CMFPlone>=6.0.0a1',\n         'Products.CMFCore',\n         'Products.CMFEditions',\n-        'Products.GenericSetup>=1.8.1',\n-        'Products.PlonePAS >= 5.0.1',\n+        'Products.GenericSetup',\n+        'Products.PlonePAS',\n         'Products.PluggableAuthService',\n-        'Products.ZCatalog >= 2.13.4',\n+        'Products.ZCatalog',\n         'Zope>=5.5',\n         'plone.contentrules',\n         'plone.app.iterate',\n"

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-11T20:55:00+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/605ea2fec5c6d900db209a3d29955be60040079e

Removed zope.site test dependency.

Files changed:
M setup.py

b"diff --git a/setup.py b/setup.py\nindex 1599caa5..5a690b58 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -35,7 +35,6 @@\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-            'zope.site',\n             'plone.app.caching',\n             'plone.app.testing',\n             'plone.app.theming',\n"

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-11T22:40:15+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/965bad2fb752e128d4a758f4dcafc3e90e904097

Updated dependencies.

Files changed:
M plone/app/upgrade/tests/base.py
M setup.py

b'diff --git a/plone/app/upgrade/tests/base.py b/plone/app/upgrade/tests/base.py\nindex 880ebe43..438d31ad 100644\n--- a/plone/app/upgrade/tests/base.py\n+++ b/plone/app/upgrade/tests/base.py\n@@ -27,14 +27,7 @@ class UpgradeTestCaseFixture(PloneSandboxLayer):\n \n     defaultBases = (PLONE_FIXTURE,)\n \n-    def setUpZope(self, app, configurationContext):\n-        # In 5.0 alpha we install or upgrade plone.app.caching,\n-        # so it must be available to Zope.\n-        import plone.app.caching\n-        self.loadZCML(\n-            name=\'configure.zcml\',\n-            package=plone.app.caching,\n-        )\n+    # We used to have a method setUpZope here, but currently it is not needed.\n \n \n UPGRADE_TEST_CASE_FIXTURE = UpgradeTestCaseFixture()\ndiff --git a/setup.py b/setup.py\nindex 5a690b58..65bb05b0 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -35,31 +35,29 @@\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-            \'plone.app.caching\',\n             \'plone.app.testing\',\n-            \'plone.app.theming\',\n+            \'plone.app.redirector\',\n         ]\n     ),\n     install_requires=[\n         \'setuptools\',\n         \'plone.base\',\n-        \'plone.portlets\',\n+        \'plone.registry\',\n+        \'plone.folder\',\n+        \'plone.uuid\',\n         \'transaction\',\n         \'zope.component\',\n         \'zope.interface\',\n-        \'zope.ramcache\',\n         \'Acquisition\',\n         \'Products.CMFPlone>=6.0.0a1\',\n         \'Products.CMFCore\',\n         \'Products.CMFEditions\',\n         \'Products.GenericSetup\',\n         \'Products.PlonePAS\',\n-        \'Products.PluggableAuthService\',\n         \'Products.ZCatalog\',\n+        \'ZODB\',\n         \'Zope>=5.5\',\n-        \'plone.contentrules\',\n-        \'plone.app.iterate\',\n-        \'plone.app.viewletmanager\',\n+        \'plone.app.theming\',\n     ],\n     entry_points="""\n     [z3c.autoinclude.plugin]\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-12T21:02:49+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/3645ffe2b5b342f1fc6e552a0b8b26c3b3793301

Add news snippet.

Files changed:
A news/286.breaking

b'diff --git a/news/286.breaking b/news/286.breaking\nnew file mode 100644\nindex 00000000..19f7820d\n--- /dev/null\n+++ b/news/286.breaking\n@@ -0,0 +1,4 @@\n+Removed old code, aliases and dependencies.\n+This were only needed to have a clean upgrade to earlier Plone versions.\n+We only support upgrading from Plone 5.2 Python 3.\n+[maurits]\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-04-12T21:03:57+02:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.app.upgrade/commit/973aaa825b1a30ad237fb52d6bfef59fc99adc4e

Merge pull request #286 from plone/maurits-cleanup

Cleanup old code and aliases

Files changed:
A news/286.breaking
M plone/app/upgrade/__init__.py
M plone/app/upgrade/tests/base.py
M plone/app/upgrade/tests/test_upgrade.py
M plone/app/upgrade/utils.py
M plone/app/upgrade/v52/betas.py
M plone/app/upgrade/v52/final.py
M plone/app/upgrade/v52/tests.py
M plone/app/upgrade/v60/alphas.py
M setup.py
D plone/app/upgrade/atcontentypes_bbb.py
D plone/app/upgrade/bbb.py
D plone/app/upgrade/bbbd/LanguageTool.py
D plone/app/upgrade/bbbd/__init__.py
D plone/app/upgrade/kupu_bbb.py

b'diff --git a/news/286.breaking b/news/286.breaking\nnew file mode 100644\nindex 00000000..19f7820d\n--- /dev/null\n+++ b/news/286.breaking\n@@ -0,0 +1,4 @@\n+Removed old code, aliases and dependencies.\n+This were only needed to have a clean upgrade to earlier Plone versions.\n+We only support upgrading from Plone 5.2 Python 3.\n+[maurits]\ndiff --git a/plone/app/upgrade/__init__.py b/plone/app/upgrade/__init__.py\nindex e8dc5bf3..de75665f 100644\n--- a/plone/app/upgrade/__init__.py\n+++ b/plone/app/upgrade/__init__.py\n@@ -1,187 +1,15 @@\n-# -*- coding: utf-8 -*-\n from plone.app.upgrade.utils import alias_module\n \n-from . import bbb\n-from . import bbb_qi\n-from . import bbbd\n import pkg_resources\n-import sys\n-import warnings\n \n \n-try:\n-    pkg_resources.get_distribution(\'Products.ResourceRegistries\')\n-except pkg_resources.DistributionNotFound:\n-    IS_PRODUCT_RESOURCE_REGISTRIES_INSTALLED = False\n-else:\n-    IS_PRODUCT_RESOURCE_REGISTRIES_INSTALLED = True\n-\n-try:\n-    from zope.app.cache.interfaces.ram import IRAMCache  # noqa F401\n-except ImportError:\n-    import zope.ramcache.interfaces.ram\n-    alias_module(\'zope.app.cache.interfaces.ram\', zope.ramcache.interfaces.ram)\n-    import zope.ramcache.ram\n-    alias_module(\'zope.app.cache.ram\', zope.ramcache.ram)\n-\n-if \'products.kupu\' not in pkg_resources.working_set.by_key:\n-    from . import kupu_bbb\n-    alias_module(\'Products.kupu.plone.plonelibrarytool\', kupu_bbb)\n-\n-try:\n-    from Products.CMFCalendar import interfaces\n-except ImportError:\n-    alias_module(\'Products.CMFCalendar.interfaces\', bbb)\n-\n-try:\n-    from Products.CMFPlone import CalendarTool  # noqa F401\n-except ImportError:\n-    sys.modules[\'Products.CMFPlone.CalendarTool\'] = bbb\n-\n-try:\n-    from Products.CMFPlone import DiscussionTool  # noqa F401\n-except ImportError:\n-    sys.modules[\'Products.CMFPlone.DiscussionTool\'] = bbb\n-\n-try:\n-    from Products.CMFPlone import InterfaceTool  # noqa F401\n-except ImportError:\n-    sys.modules[\'Products.CMFPlone.InterfaceTool\'] = bbb\n-\n-try:\n-    from Products.CMFPlone import SyndicationTool  # noqa F401\n-except ImportError:\n-    sys.modules[\'Products.CMFPlone.SyndicationTool\'] = bbb\n-\n-try:\n-    from Products.CMFPlone import UndoTool  # noqa F401\n-except ImportError:\n-    sys.modules[\'Products.CMFPlone.UndoTool\'] = bbb\n-\n-\n-try:\n-    import Products.TinyMCE\n-except ImportError:\n-    alias_module(\'Products.TinyMCE.utility\', bbb)\n-    alias_module(\'Products.TinyMCE.interfaces.utility\', bbb)\n-\n-\n-try:\n-    import Products.CMFActionIcons\n-except ImportError:\n-    alias_module(\'Products.CMFPlone.ActionIconsTool\', bbb)\n-    alias_module(\'Products.CMFActionIcons.interfaces\', bbb)\n-    alias_module(\'Products.CMFActionIcons.interfaces._tools\', bbb)\n-    alias_module(\'Products.CMFActionIcons.ActionIconsTool\', bbb)\n-\n-try:\n-    import Products.CMFPlone.FactoryTool\n-except ImportError:\n-    try:\n-        pkg_resources.get_distribution(\'Products.ATContentTypes\')\n-    except BaseException:\n-        from plone.app.upgrade import atcontentypes_bbb\n-        alias_module(\'Products.CMFPlone.FactoryTool\', atcontentypes_bbb)\n-    else:\n-        from Products.ATContentTypes.tool import factory\n-        alias_module(\'Products.CMFPlone.FactoryTool\', factory)\n-\n-try:\n-    import Products.CMFPlone.MetadataTool\n-    Products.CMFPlone.MetadataTool  # pyflakes\n-except ImportError:\n-    try:\n-        pkg_resources.get_distribution(\'Products.ATContentTypes\')\n-    except BaseException:\n-        from plone.app.upgrade import atcontentypes_bbb\n-        alias_module(\'Products.CMFPlone.MetadataTool\', atcontentypes_bbb)\n-    else:\n-        from Products.ATContentTypes.tool import metadata\n-        alias_module(\'Products.CMFPlone.MetadataTool\', metadata)\n-\n-try:\n-    import Products.CMFDefault.MetadataTool\n-    Products.CMFDefault.MetadataTool  # pyflakes\n-except ImportError:\n-    try:\n-        pkg_resources.get_distribution(\'Products.ATContentTypes\')\n-    except BaseException:\n-        from plone.app.upgrade import atcontentypes_bbb\n-        alias_module(\'Products.CMFDefault.MetadataTool\', atcontentypes_bbb)\n-    else:\n-        from Products.ATContentTypes.tool import metadata\n-        sys.modules[\'Products.CMFDefault.MetadataTool\'] = metadata\n-\n-try:\n-    import Products.CMFDefault.SyndicationInfo\n-    Products.CMFDefault.SyndicationInfo  # pyflakes\n-except ImportError:\n-    sys.modules[\'Products.CMFDefault.SyndicationInfo\'] = bbb\n-\n-try:\n-    from Products.PloneLanguageTool import interfaces  # noqa F811\n-except ImportError:\n-    alias_module(\'Products.PloneLanguageTool.interfaces\', bbb)\n-    alias_module(\'Products.PloneLanguageTool\', bbbd)\n-    __import__(\n-        \'Products.PloneLanguageTool.LanguageTool\',\n-    ).PloneLanguageTool.LanguageTool = __import__(\n-        \'Products.PloneLanguageTool.LanguageTool\',\n-    ).PloneLanguageTool.LanguageTool.LanguageTool\n-\n-\n-# To solve the __iro__ problem because CMFPlacefulWorkflow interfaces\n-# changed on 1.6.1\n-try:\n-    pkg_resources.get_distribution(\'Products.CMFPlacefulWorkflow\')\n-    from Products.CMFPlacefulWorkflow.interfaces import (  # noqa F401\n-        portal_placeful_workflow)\n-except pkg_resources.DistributionNotFound:\n-    # No package in this environment requires CMFPlacefulWorkflow,\n-    # so no patching necessary\n-    pass\n-except BaseException:\n-    from Products.CMFPlacefulWorkflow import interfaces  # noqa F811\n-    alias_module(\n-        \'Products.CMFPlacefulWorkflow.interfaces.portal_placeful_workflow\',\n-        interfaces)\n-\n-try:\n-    from Products.PasswordResetTool import PasswordResetTool\n-    PasswordResetTool  # pyflakes\n-except ImportError:\n-    sys.modules[\'Products.PasswordResetTool.PasswordResetTool\'] = bbb\n-\n-\n-try:\n-    from plone.app.folder.nogopip import GopipIndex\n-    GopipIndex  # pyflakes\n-except ImportError:\n-    from plone.folder.nogopip import GopipIndex\n-    alias_module(\'plone.app.folder.nogopip.GopipIndex\', GopipIndex)\n-\n-\n-if not IS_PRODUCT_RESOURCE_REGISTRIES_INSTALLED:\n-    sys.modules[\'Products.ResourceRegistries.tools.CSSRegistry\'] = bbb\n-    sys.modules[\'Products.ResourceRegistries.tools.JSRegistry\'] = bbb\n-\n-\n-try:\n-    with warnings.catch_warnings():\n-        # Catch DeprecationWarning:\n-        # "LockItem is deprecated. Please import from OFS.LockItem."\n-        # Depending on which Plone/Zope version we have, webdav may be gone or re-added.\n-        # Anyway, if the import fails, we want to create an alias module.\n-        warnings.simplefilter("ignore")\n-        from webdav.LockItem import LockItem\n-        LockItem  # pyflakes\n-except ImportError:\n-    from OFS.LockItem import LockItem\n-    alias_module(\'webdav.LockItem.LockItem\', LockItem)\n-\n try:\n     pkg_resources.get_distribution(\'Products.CMFQuickInstallerTool\')\n except pkg_resources.DistributionNotFound:\n+    # The alias module helps when migrating to Plone 6.0.0a1.\n+    # Remove when we no longer support upgrading from Plone 5.2.\n+    from . import bbb_qi\n+\n     alias_module(\'Products.CMFQuickInstallerTool\', bbb_qi)\n     alias_module(\'Products.CMFPlone.QuickInstallerTool\', bbb_qi)\n \ndiff --git a/plone/app/upgrade/atcontentypes_bbb.py b/plone/app/upgrade/atcontentypes_bbb.py\ndeleted file mode 100644\nindex 743f8174..00000000\n--- a/plone/app/upgrade/atcontentypes_bbb.py\n+++ /dev/null\n@@ -1,24 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from OFS.SimpleItem import SimpleItem\n-from Products.CMFCore.utils import registerToolInterface\n-from zope.interface import Interface\n-\n-\n-MetadataTool = SimpleItem\n-\n-\n-class FactoryTool(SimpleItem):\n-    """ Compatibility code for portal_factory\n-    """\n-\n-    def __nonzero__(self):\n-        """ Always evaluate to False\n-        """\n-        return 0\n-\n-\n-class IFactoryTool(Interface):\n-    pass\n-\n-\n-registerToolInterface(\'portal_factory\', IFactoryTool)\ndiff --git a/plone/app/upgrade/bbb.py b/plone/app/upgrade/bbb.py\ndeleted file mode 100644\nindex 92755bd7..00000000\n--- a/plone/app/upgrade/bbb.py\n+++ /dev/null\n@@ -1,78 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from OFS.SimpleItem import SimpleItem\n-from Products.CMFCore.utils import registerToolInterface\n-from zope.interface import Interface\n-\n-\n-CalendarTool = SimpleItem\n-DiscussionTool = SimpleItem\n-InterfaceTool = SimpleItem\n-SyndicationTool = SimpleItem\n-UndoTool = SimpleItem\n-TinyMCE = SimpleItem\n-PasswordResetTool = SimpleItem\n-CSSRegistryTool = SimpleItem\n-JSRegistryTool = SimpleItem\n-\n-\n-class ILanguageTool(Interface):\n-    pass\n-\n-\n-class ITinyMCE(Interface):\n-    pass\n-\n-\n-class ICalendarTool(Interface):\n-    pass\n-\n-\n-class IActionIconsTool(Interface):\n-    pass\n-\n-\n-registerToolInterface(\'portal_actionicons\', IActionIconsTool)\n-\n-\n-class ActionIcon(SimpleItem):\n-\n-    _title = None\n-    _category = \'object\'\n-    _action_id = \'view\'\n-    _icon_expr_text = \'document_icon\'\n-\n-    def __init__(self, category, action_id, icon_expr_text=\'\', title=None):\n-        self._category = category\n-        self._action_id = action_id\n-        self._icon_expr_text = icon_expr_text\n-        self._title = title\n-\n-\n-class ActionIconsTool(SimpleItem):\n-\n-    def __init__(self):\n-        self._icons = ()\n-        self._lookup = {}\n-\n-    def listActionIcons(self):\n-        return [x.__of__(self) for x in self._icons]\n-\n-    def addActionIcon(self, category, action_id, icon_expr, title=None):\n-        icons = list(self._icons)\n-        icons.append(ActionIcon(category, action_id, icon_expr, title))\n-        self._lookup[(category, action_id)] = icons[-1]\n-        self._icons = tuple(icons)\n-\n-    def removeActionIcon(self, category, action_id):\n-        icons = list(self._icons)\n-        icon = self._lookup[(category, action_id)]\n-        icons.remove(icon)\n-        del self._lookup[(category, action_id)]\n-        self._icons = tuple(icons)\n-\n-# BBB from CMFDefault\n-\n-\n-class SyndicationInformation(SimpleItem):\n-    id = \'syndication_information\'\n-    meta_type = \'SyndicationInformation\'\ndiff --git a/plone/app/upgrade/bbbd/LanguageTool.py b/plone/app/upgrade/bbbd/LanguageTool.py\ndeleted file mode 100644\nindex 16bc01bc..00000000\n--- a/plone/app/upgrade/bbbd/LanguageTool.py\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from OFS.SimpleItem import SimpleItem\n-from ZPublisher import BeforeTraverse\n-\n-\n-class LanguageTool(SimpleItem):\n-\n-    def __call__(self, container, req):\n-        pass\n-\n-    def manage_beforeDelete(self, item, container):\n-        if item is self:\n-            handle = self.meta_type + \'/\' + self.getId()\n-            BeforeTraverse.unregisterBeforeTraverse(container, handle)\ndiff --git a/plone/app/upgrade/bbbd/__init__.py b/plone/app/upgrade/bbbd/__init__.py\ndeleted file mode 100644\nindex 87cd06e7..00000000\n--- a/plone/app/upgrade/bbbd/__init__.py\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from .LanguageTool import LanguageTool  # noqa F401\ndiff --git a/plone/app/upgrade/kupu_bbb.py b/plone/app/upgrade/kupu_bbb.py\ndeleted file mode 100644\nindex 21c55c57..00000000\n--- a/plone/app/upgrade/kupu_bbb.py\n+++ /dev/null\n@@ -1,31 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from OFS import SimpleItem\n-\n-\n-class PloneKupuLibraryTool(SimpleItem.SimpleItem):\n-\n-    def get_stripped_attributes(self):\n-        stripped = []\n-        for (tags, attrs) in self.getHtmlExclusions():\n-            if not tags:\n-                stripped.extend(attrs)\n-        return stripped\n-\n-    def get_stripped_combinations(self):\n-        stripped = [(tags, attrs) for (tags, attrs) in\n-                    self.getHtmlExclusions() if tags and attrs]\n-        return stripped\n-\n-    def getHtmlExclusions(self):\n-        excl = getattr(self, \'html_exclusions\', ())\n-        res = []\n-        for (t, a) in excl:\n-            if t and t[0] == \'\':\n-                t = []\n-            if a and a[0] == \'\':\n-                a = []\n-            res.append((t, a))\n-        return res\n-\n-    def isKupuEnabled(self, *args, **kwargs):\n-        return False\ndiff --git a/plone/app/upgrade/tests/base.py b/plone/app/upgrade/tests/base.py\nindex 30366a79..438d31ad 100644\n--- a/plone/app/upgrade/tests/base.py\n+++ b/plone/app/upgrade/tests/base.py\n@@ -7,6 +7,7 @@\n from plone.app.testing import PloneSandboxLayer\n from plone.app.testing.bbb import PloneTestCase\n from plone.app.testing.bbb import PTC_FIXTURE\n+from plone.base.utils import get_installer\n from Products.CMFCore.interfaces import IActionCategory\n from Products.CMFCore.interfaces import IActionInfo\n from Products.CMFCore.utils import getToolByName\n@@ -16,7 +17,6 @@\n import transaction\n import warnings\n \n-from plone.app.upgrade import IS_PRODUCT_RESOURCE_REGISTRIES_INSTALLED\n \n #\n # Base TestCase for upgrades\n@@ -27,14 +27,7 @@ class UpgradeTestCaseFixture(PloneSandboxLayer):\n \n     defaultBases = (PLONE_FIXTURE,)\n \n-    def setUpZope(self, app, configurationContext):\n-        # In 5.0 alpha we install or upgrade plone.app.caching,\n-        # so it must be available to Zope.\n-        import plone.app.caching\n-        self.loadZCML(\n-            name=\'configure.zcml\',\n-            package=plone.app.caching,\n-        )\n+    # We used to have a method setUpZope here, but currently it is not needed.\n \n \n UPGRADE_TEST_CASE_FIXTURE = UpgradeTestCaseFixture()\n@@ -67,20 +60,6 @@ def removeActionFromTool(\n         ):\n             tool._delOb(action_id)\n \n-    def addResourceToJSTool(self, resource_name):\n-        if IS_PRODUCT_RESOURCE_REGISTRIES_INSTALLED:\n-            # Registers a resource with the javascripts tool\n-            tool = getToolByName(self.portal, \'portal_javascripts\')\n-            if resource_name not in tool.getResourceIds():\n-                tool.registerScript(resource_name)\n-\n-    def addResourceToCSSTool(self, resource_name):\n-        if IS_PRODUCT_RESOURCE_REGISTRIES_INSTALLED:\n-            # Registers a resource with the css tool\n-            tool = getToolByName(self.portal, \'portal_css\')\n-            if resource_name not in tool.getResourceIds():\n-                tool.registerStylesheet(resource_name)\n-\n     def removeSiteProperty(self, property_id):\n         # Removes a site property from portal_properties\n         tool = getToolByName(self.portal, \'portal_properties\')\n@@ -117,19 +96,9 @@ def removeMemberdataProperty(self, property_id):\n \n     def uninstallProduct(self, product_name):\n         # Removes a product\n-        try:\n-            from Products.CMFPlone.utils import get_installer\n-        except ImportError:\n-            # BBB For Plone 5.0 and lower.\n-            qi = getToolByName(self.portal, \'portal_quickinstaller\', None)\n-            if qi is None:\n-                return\n-            if qi.isProductInstalled(product_name):\n-                qi.uninstallProducts([product_name])\n-        else:\n-            qi = get_installer(self.portal)\n-            if qi.is_product_installed(product_name):\n-                qi.uninstall_product(product_name)\n+        installer = get_installer(self.portal)\n+        if installer.is_product_installed(product_name):\n+            installer.uninstall_product(product_name)\n \n     def addSkinLayer(self, layer, skin=\'Plone Default\', pos=None):\n         # Adds a skin layer at pos. If pos is None, the layer is appended\ndiff --git a/plone/app/upgrade/tests/test_upgrade.py b/plone/app/upgrade/tests/test_upgrade.py\nindex 131f8553..25d5bbb8 100644\n--- a/plone/app/upgrade/tests/test_upgrade.py\n+++ b/plone/app/upgrade/tests/test_upgrade.py\n@@ -1,11 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.app.upgrade.tests.base import MigrationTest\n from plone.app.upgrade.utils import version_match\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.factory import _DEFAULT_PROFILE\n \n-import mock\n-import sys\n+from unittest import mock\n \n \n class TestUpgrade(MigrationTest):\n@@ -41,12 +39,9 @@ def testVersionMatch(self):\n     def testDoUpgrades(self):\n         self.setRoles([\'Manager\'])\n \n-        if sys.version_info.major == 2:\n-            start_profile = \'4013\'\n-        else:\n-            # Python 3 is only supported on 5.2+.\n-            # This means you can not upgrade from 5.1 or earlier.\n-            start_profile = \'5200\'\n+        # Python 3 is only supported on 5.2+.\n+        # This means you can not upgrade from 5.1 or earlier.\n+        start_profile = \'5200\'\n         self.setup.setLastVersionForProfile(_DEFAULT_PROFILE, start_profile)\n         upgrades = self.setup.listUpgrades(_DEFAULT_PROFILE)\n         self.assertTrue(len(upgrades) > 0)\ndiff --git a/plone/app/upgrade/utils.py b/plone/app/upgrade/utils.py\nindex 4e276e1b..41c4ea08 100644\n--- a/plone/app/upgrade/utils.py\n+++ b/plone/app/upgrade/utils.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_base\n+from plone.base.utils import get_installer\n from Products.CMFCore.DirectoryView import _dirreg\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import base_hasattr\n@@ -171,41 +172,13 @@ def installOrReinstallProduct(portal, product_name, out=None, hidden=False):\n     If product is already installed test if it needs to be reinstalled. Also\n     fix skins after reinstalling\n     """\n-    try:\n-        from Products.CMFPlone.utils import get_installer\n-    except ImportError:\n-        # BBB For Plone 5.0 and lower.\n-        qi = getToolByName(portal, \'portal_quickinstaller\', None)\n-        if qi is None:\n-            return\n-        old_qi = True\n-    else:\n-        qi = get_installer(portal)\n-        old_qi = False\n-    if old_qi:\n-        if not qi.isProductInstalled(product_name):\n-            qi.installProduct(product_name, hidden=hidden)\n-            logger.info(\'Installed %s\', product_name)\n-        elif old_qi:\n-            info = qi._getOb(product_name)\n-            installed_version = info.getInstalledVersion()\n-            product_version = qi.getProductVersion(product_name)\n-            if installed_version != product_version:\n-                qi.reinstallProducts([product_name])\n-                logger.info(\n-                    \'%s is out of date (installed: %s/ filesystem: %s), \'\n-                    \'reinstalled.\',\n-                    product_name, installed_version, product_version)\n-            else:\n-                logger.info(\'%s already installed.\', product_name)\n+    installer = get_installer(portal)\n+    if not installer.is_product_installed(product_name):\n+        installer.install_product(product_name, allow_hidden=True)\n+        logger.info(\'Installed %s\', product_name)\n     else:\n-        # New QI browser view.\n-        if not qi.is_product_installed(product_name):\n-            qi.install_product(product_name, allow_hidden=True)\n-            logger.info(\'Installed %s\', product_name)\n-        else:\n-            qi.upgrade_product(product_name)\n-            logger.info(\'Upgraded %s\', product_name)\n+        installer.upgrade_product(product_name)\n+        logger.info(\'Upgraded %s\', product_name)\n     # Refresh skins\n     portal.clearCurrentSkin()\n     if getattr(portal, \'REQUEST\', None):\ndiff --git a/plone/app/upgrade/v52/betas.py b/plone/app/upgrade/v52/betas.py\nindex 9ab73793..b80a0c28 100644\n--- a/plone/app/upgrade/v52/betas.py\n+++ b/plone/app/upgrade/v52/betas.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.app.upgrade.utils import cleanUpToolRegistry\n from plone.app.upgrade.utils import loadMigrationProfile\n+from plone.base.utils import get_installer\n from Products.CMFCore.utils import getToolByName\n from types import ModuleType\n from zc.relation.interfaces import ICatalog\n@@ -142,16 +143,14 @@ def to52beta1(context):\n     remove_legacy_resource_registries(context)\n     remove_interface_indexes_from_relations_catalog()\n     # Make sure plone.staticresources is installed\n-    from Products.CMFPlone.utils import get_installer\n-    qi = get_installer(context)\n-    if not qi.is_product_installed(\'plone.staticresources\'):\n-        qi.install_product(\'plone.staticresources\')\n+    installer = get_installer(context)\n+    if not installer.is_product_installed(\'plone.staticresources\'):\n+        installer.install_product(\'plone.staticresources\')\n \n \n def to52rc1(context):\n     loadMigrationProfile(context, \'profile-plone.app.upgrade.v52:to52rc1\')\n     # Make sure plone.staticresources is installed\n-    from Products.CMFPlone.utils import get_installer\n-    qi = get_installer(context)\n-    if not qi.is_product_installed(\'plone.staticresources\'):\n-        qi.install_product(\'plone.staticresources\')\n+    installer = get_installer(context)\n+    if not installer.is_product_installed(\'plone.staticresources\'):\n+        installer.install_product(\'plone.staticresources\')\ndiff --git a/plone/app/upgrade/v52/final.py b/plone/app/upgrade/v52/final.py\nindex 78aa1b58..0b52c623 100644\n--- a/plone/app/upgrade/v52/final.py\n+++ b/plone/app/upgrade/v52/final.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl.Permissions import view\n from plone.app.upgrade.utils import loadMigrationProfile\n+from plone.base.utils import get_installer\n from plone.registry import field\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n@@ -11,7 +12,6 @@\n from zope.component import getUtility\n \n import logging\n-import six\n \n \n logger = logging.getLogger(\'plone.app.upgrade\')\n@@ -85,10 +85,9 @@ def move_dotted_to_named_behaviors(context):\n \n     logger.info(\'Done moving dotted to named behaviors.\')\n     # Make sure plone.staticresources is installed\n-    from Products.CMFPlone.utils import get_installer\n-    qi = get_installer(context)\n-    if not qi.is_product_installed(\'plone.staticresources\'):\n-        qi.install_product(\'plone.staticresources\')\n+    installer = get_installer(context)\n+    if not installer.is_product_installed(\'plone.staticresources\'):\n+        installer.install_product(\'plone.staticresources\')\n \n \n KEYS_TO_CHANGE = [\n@@ -130,10 +129,9 @@ def to521(context):\n     """5.2.0 -> 5.2.1"""\n     loadMigrationProfile(context, \'profile-plone.app.upgrade.v52:to521\')\n     # Make sure plone.staticresources is installed\n-    from Products.CMFPlone.utils import get_installer\n-    qi = get_installer(context)\n-    if not qi.is_product_installed(\'plone.staticresources\'):\n-        qi.install_product(\'plone.staticresources\')\n+    installer = get_installer(context)\n+    if not installer.is_product_installed(\'plone.staticresources\'):\n+        installer.install_product(\'plone.staticresources\')\n \n \n def to522(context):\n@@ -217,12 +215,9 @@ def migrate_record_from_ascii_to_bytes(field_name, iface, prefix=None):\n         logger.info("Replaced empty %s ASCII (native string) field with Bytes field.", field_name)\n         return\n     new_record = registry.records[field_name]\n-    if isinstance(original_value, six.text_type):\n-        # This is what we expect in Python 3.\n-        # fromUnicode could be called fromText in Python 3.\n+    if isinstance(original_value, str):\n         new_value = new_record.field.fromUnicode(original_value)\n     elif isinstance(original_value, bytes):\n-        # This is what we expect in Python 2.\n         new_value = original_value\n     else:\n         # Seems impossible, but I like to be careful.\ndiff --git a/plone/app/upgrade/v52/tests.py b/plone/app/upgrade/v52/tests.py\nindex 7fb0b87c..296a1532 100644\n--- a/plone/app/upgrade/v52/tests.py\n+++ b/plone/app/upgrade/v52/tests.py\n@@ -10,7 +10,6 @@\n from Products.CMFPlone.interfaces import IMarkupSchema\n from zope.component import getUtility\n \n-import six\n import unittest\n \n \n@@ -153,22 +152,6 @@ def test_site_logo_text(self):\n         self.assertIsInstance(record.value, bytes)\n         self.assertEqual(record.value, b"native string")\n \n-    @unittest.skipIf(six.PY3, \'Only test on Python 2\')\n-    def test_site_logo_field_bytes_value_text(self):\n-        from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n-\n-        del self.registry.records[\'plone.site_logo\']\n-        record_51 = Record(field.Bytes())\n-        # This would give a WrongType error on Python 3:\n-        record_51.value = "native string"\n-        self.registry.records[\'plone.site_logo\'] = record_51\n-        # Migrate.\n-        migrate_site_logo_from_ascii_to_bytes(self.portal)\n-        record = self.registry.records[\'plone.site_logo\']\n-        self.assertIsInstance(record.field, field.Bytes)\n-        self.assertIsInstance(record.value, bytes)\n-        self.assertEqual(record.value, b"native string")\n-\n     def test_migrate_record_from_ascii_to_bytes_with_prefix(self):\n         # This is the more general fixer from ASCII to Bytes.\n         from plone.app.upgrade.v52.final import migrate_record_from_ascii_to_bytes\ndiff --git a/plone/app/upgrade/v60/alphas.py b/plone/app/upgrade/v60/alphas.py\nindex 8908c110..8fcff6ce 100644\n--- a/plone/app/upgrade/v60/alphas.py\n+++ b/plone/app/upgrade/v60/alphas.py\n@@ -1,12 +1,12 @@\n # -*- coding: utf-8 -*-\n from plone.app.upgrade.utils import loadMigrationProfile\n+from plone.base.utils import get_installer\n from plone.dexterity.fti import DexterityFTI\n from plone.registry.interfaces import IRegistry\n from plone.uuid.interfaces import ATTRIBUTE_NAME\n from plone.uuid.interfaces import IUUIDGenerator\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IBundleRegistry\n-from Products.CMFPlone.utils import get_installer\n from ZODB.broken import Broken\n from zope.component import getUtility\n from zope.component import queryUtility\ndiff --git a/setup.py b/setup.py\nindex a4ab1d33..65bb05b0 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -35,33 +35,29 @@\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-            \'zope.site\',\n-            \'mock\',\n-            \'plone.app.caching\',\n             \'plone.app.testing\',\n-            \'plone.app.theming\',\n+            \'plone.app.redirector\',\n         ]\n     ),\n     install_requires=[\n         \'setuptools\',\n-        \'plone.portlets\',\n+        \'plone.base\',\n+        \'plone.registry\',\n+        \'plone.folder\',\n+        \'plone.uuid\',\n         \'transaction\',\n         \'zope.component\',\n         \'zope.interface\',\n-        \'zope.ramcache\',\n         \'Acquisition\',\n-        \'Products.CMFPlone\',\n+        \'Products.CMFPlone>=6.0.0a1\',\n         \'Products.CMFCore\',\n         \'Products.CMFEditions\',\n-        \'Products.GenericSetup>=1.8.1\',\n-        \'Products.PlonePAS >= 5.0.1\',\n-        \'Products.PluggableAuthService\',\n-        \'Products.ZCatalog >= 2.13.4\',\n+        \'Products.GenericSetup\',\n+        \'Products.PlonePAS\',\n+        \'Products.ZCatalog\',\n+        \'ZODB\',\n         \'Zope>=5.5\',\n-        \'plone.contentrules\',\n-        \'plone.app.iterate\',\n-        \'plone.app.viewletmanager\',\n-        \'six\',\n+        \'plone.app.theming\',\n     ],\n     entry_points="""\n     [z3c.autoinclude.plugin]\n'

