Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-06-22T01:13:56+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/74532fbfe0777433ad968f7db45ec8f6bd26c5d0

Add picture to valid tags and loading/srcset/sizes to custom attributes.

Part of the already merged image srcset PLIP.

Files changed:
M plone/app/upgrade/v60/profiles/to6005/registry.xml

b'diff --git a/plone/app/upgrade/v60/profiles/to6005/registry.xml b/plone/app/upgrade/v60/profiles/to6005/registry.xml\nindex efddabe6..7c8abfbd 100644\n--- a/plone/app/upgrade/v60/profiles/to6005/registry.xml\n+++ b/plone/app/upgrade/v60/profiles/to6005/registry.xml\n@@ -6,4 +6,15 @@\n   <records interface="plone.base.interfaces.IImagingSchema"\n            prefix="plone" />\n \n+  <records interface="plone.base.interfaces.controlpanel.IFilterSchema" prefix="plone">\n+    <value key="valid_tags" purge="false">\n+      <element>picture</element>\n+    </value>\n+    <value key="custom_attributes" purge="false">\n+      <element>loading</element>\n+      <element>srcset</element>\n+      <element>sizes</element>\n+    </value>\n+  </records>\n+\n </registry>\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-06-22T01:14:13+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/e397d2ad304514aac7041adb8a76f9e256370024

Add image_scales catalog metadata column.

Files changed:
A news/3521.feature
A plone/app/upgrade/v60/profiles/to6005/catalog.xml

b'diff --git a/news/3521.feature b/news/3521.feature\nnew file mode 100644\nindex 00000000..5ce61eaa\n--- /dev/null\n+++ b/news/3521.feature\n@@ -0,0 +1,2 @@\n+Add ``image_scales`` catalog metadata column.\n+[maurits]\ndiff --git a/plone/app/upgrade/v60/profiles/to6005/catalog.xml b/plone/app/upgrade/v60/profiles/to6005/catalog.xml\nnew file mode 100644\nindex 00000000..6f505135\n--- /dev/null\n+++ b/plone/app/upgrade/v60/profiles/to6005/catalog.xml\n@@ -0,0 +1,4 @@\n+<?xml version="1.0"?>\n+<object name="portal_catalog" meta_type="Plone Catalog Tool">\n+ <column value="image_scales"/>\n+</object>\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-06-22T01:47:32+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/c0dd13bdca096c22034d7f155cc1ec53a1931bda

Update all brains to get image_scales metadata.

Files changed:
M news/3521.feature
M plone/app/upgrade/utils.py
M plone/app/upgrade/v60/configure.zcml

b'diff --git a/news/3521.feature b/news/3521.feature\nindex 5ce61eaa..4209ec87 100644\n--- a/news/3521.feature\n+++ b/news/3521.feature\n@@ -1,2 +1,3 @@\n Add ``image_scales`` catalog metadata column.\n+Update all brains to get this info.\n [maurits]\ndiff --git a/plone/app/upgrade/utils.py b/plone/app/upgrade/utils.py\nindex db5255aa..aacb01eb 100644\n--- a/plone/app/upgrade/utils.py\n+++ b/plone/app/upgrade/utils.py\n@@ -349,6 +349,33 @@ def updateIconsInBrains(context, typesToUpdate=None):\n     logger.info("Updated `getIcon` metadata.")\n \n \n+def update_catalog_metadata(context):\n+    """Update catalog metadata for all brains."""\n+    catalog = getToolByName(context, "portal_catalog")\n+    logger.info("Updating metadata.")\n+    # If we want to report progress, we need to know how many brains there are\n+    # and we can only do this if we have a list instead of a generator.\n+    brains = list(catalog.getAllBrains())\n+    num_objects = len(brains)\n+    pghandler = ZLogHandler(100)\n+    pghandler.init("Updating metadata", num_objects)\n+    for index, brain in enumerate(brains, 1):\n+        pghandler.report(index)\n+        obj = brain.getObject()\n+        # We can only update the metadata if we also update at least one index.\n+        # Passing in a valid but inexpensive index, makes sure we do not reindex the\n+        # entire catalog including expensive indexes like SearchableText.\n+        brain_path = brain.getPath()\n+        try:\n+            catalog.catalog_object(obj, brain_path, ["id"], True, pghandler)\n+        except ConflictError:\n+            raise\n+        except Exception:\n+            pass\n+    pghandler.finish()\n+    logger.info("Updated metadata of all brains.")\n+\n+\n def get_property(context, property_name, default_value=None):\n     try:\n         return getattr(context, property_name, default_value)\ndiff --git a/plone/app/upgrade/v60/configure.zcml b/plone/app/upgrade/v60/configure.zcml\nindex 4a72b7ee..327d132c 100644\n--- a/plone/app/upgrade/v60/configure.zcml\n+++ b/plone/app/upgrade/v60/configure.zcml\n@@ -115,6 +115,11 @@\n            handler=".alphas.upgrade_plone_module_profiles"\n            />\n \n+       <gs:upgradeStep\n+           title="Update catalog brains to add image_scales."\n+           handler="plone.app.upgrade.utils.update_catalog_metadata"\n+           />\n+\n     </gs:upgradeSteps>\n \n </configure>\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-06-23T11:39:40+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/6188db00933237bc5f5a91a5bd88c9e4a7a3eaf8

Allow disabling image scales catalog update with environment variable.

export UPDATE_CATALOG_FOR_IMAGE_SCALES=0

Files changed:
M news/3521.feature
M plone/app/upgrade/v60/alphas.py
M plone/app/upgrade/v60/configure.zcml

b'diff --git a/news/3521.feature b/news/3521.feature\nindex 4209ec87..077284c6 100644\n--- a/news/3521.feature\n+++ b/news/3521.feature\n@@ -1,3 +1,5 @@\n Add ``image_scales`` catalog metadata column.\n Update all brains to get this info.\n+Since this takes long on large sites, you can disable this with an environment variable:\n+``export UPDATE_CATALOG_FOR_IMAGE_SCALES=0``\n [maurits]\ndiff --git a/plone/app/upgrade/v60/alphas.py b/plone/app/upgrade/v60/alphas.py\nindex 47a39e63..c6ac87fe 100644\n--- a/plone/app/upgrade/v60/alphas.py\n+++ b/plone/app/upgrade/v60/alphas.py\n@@ -1,4 +1,5 @@\n from plone.app.upgrade.utils import loadMigrationProfile\n+from plone.app.upgrade.utils import update_catalog_metadata\n from plone.base.utils import get_installer\n from plone.dexterity.fti import DexterityFTI\n from plone.registry.interfaces import IRegistry\n@@ -6,12 +7,14 @@\n from plone.uuid.interfaces import IUUIDGenerator\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IBundleRegistry\n+from time import time\n from ZODB.broken import Broken\n from zope.component import getUtility\n from zope.component import queryUtility\n from zope.component.hooks import getSite\n \n import logging\n+import os\n \n \n logger = logging.getLogger("plone.app.upgrade")\n@@ -323,6 +326,30 @@ def sorter(value):\n     record.value = new_value\n \n \n+def update_catalog_for_image_scales(context):\n+    """Update the catalog to add the image_scales column to all brains.\n+\n+    This may take long.  By default we update, but we check an environment variable\n+    so you can switch this off:\n+    UPDATE_CATALOG_FOR_IMAGE_SCALES = 0\n+    """\n+    # We could catch TypeError and ValueError, but really this is a user error,\n+    # so let\'s fail.\n+    update = bool(int(os.getenv("UPDATE_CATALOG_FOR_IMAGE_SCALES", 1)))\n+    if not update:\n+        logger.warning(\n+            "UPDATE_CATALOG_FOR_IMAGE_SCALES is false, so not updating catalog."\n+        )\n+        return\n+    start = time()\n+    update_catalog_metadata(context)\n+    end = time()\n+    minutes = (end - start) / 60\n+    logger.info(\n+        "Time taken to update catalog for image scales: %.1f minutes.", minutes\n+    )\n+\n+\n def upgrade_plone_module_profiles(context):\n     """Upgrade profiles of core Plone modules to specific versions.\n \ndiff --git a/plone/app/upgrade/v60/configure.zcml b/plone/app/upgrade/v60/configure.zcml\nindex 327d132c..075587ce 100644\n--- a/plone/app/upgrade/v60/configure.zcml\n+++ b/plone/app/upgrade/v60/configure.zcml\n@@ -117,7 +117,7 @@\n \n        <gs:upgradeStep\n            title="Update catalog brains to add image_scales."\n-           handler="plone.app.upgrade.utils.update_catalog_metadata"\n+           handler=".alphas.update_catalog_for_image_scales"\n            />\n \n     </gs:upgradeSteps>\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-06-23T11:43:31+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/f1ba47cbbd441bf3410fc66f505f65bb1615a6ba

Add the image_scales column in Python code, instead of catalog.xml.

Only add this if UPDATE_CATALOG_FOR_IMAGE_SCALES is not set to zero.

Files changed:
M news/3521.feature
M plone/app/upgrade/v60/alphas.py
D plone/app/upgrade/v60/profiles/to6005/catalog.xml

b'diff --git a/news/3521.feature b/news/3521.feature\nindex 077284c6..c418ec8f 100644\n--- a/news/3521.feature\n+++ b/news/3521.feature\n@@ -2,4 +2,5 @@ Add ``image_scales`` catalog metadata column.\n Update all brains to get this info.\n Since this takes long on large sites, you can disable this with an environment variable:\n ``export UPDATE_CATALOG_FOR_IMAGE_SCALES=0``\n+In that case, you are advised to add the ``image_scales`` column manually to the catalog later.\n [maurits]\ndiff --git a/plone/app/upgrade/v60/alphas.py b/plone/app/upgrade/v60/alphas.py\nindex c6ac87fe..8b468a17 100644\n--- a/plone/app/upgrade/v60/alphas.py\n+++ b/plone/app/upgrade/v60/alphas.py\n@@ -341,6 +341,11 @@ def update_catalog_for_image_scales(context):\n             "UPDATE_CATALOG_FOR_IMAGE_SCALES is false, so not updating catalog."\n         )\n         return\n+    catalog = getToolByName(context, "portal_catalog")\n+    column = "image_scales"\n+    if column not in catalog.schema():\n+        catalog.addColumn(column)\n+        logger.info("Added %s column to catalog metadata schema.", column)\n     start = time()\n     update_catalog_metadata(context)\n     end = time()\ndiff --git a/plone/app/upgrade/v60/profiles/to6005/catalog.xml b/plone/app/upgrade/v60/profiles/to6005/catalog.xml\ndeleted file mode 100644\nindex 6f505135..00000000\n--- a/plone/app/upgrade/v60/profiles/to6005/catalog.xml\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-<?xml version="1.0"?>\n-<object name="portal_catalog" meta_type="Plone Catalog Tool">\n- <column value="image_scales"/>\n-</object>\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-06-23T12:21:03+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/1c8e04d16f143e2950892dc6d05e7b159cc01121

image scales catlog upgrade: only change the image_scales metadata.

Do not recalculate the other columns.
The new update_catalog_metadata function now accepts a column keyword argument.
If you use this, then we try to update only this column, using the inner workings of the catalog.
If we see the catalog is not what we expect, then we fall back to calling catalog_object, which touches all metadata.

Files changed:
M plone/app/upgrade/utils.py
M plone/app/upgrade/v60/alphas.py

b'diff --git a/plone/app/upgrade/utils.py b/plone/app/upgrade/utils.py\nindex aacb01eb..d61b11a6 100644\n--- a/plone/app/upgrade/utils.py\n+++ b/plone/app/upgrade/utils.py\n@@ -1,5 +1,7 @@\n from Acquisition import aq_base\n+from Missing import Missing\n from plone.base.utils import get_installer\n+from plone.indexer.interfaces import IIndexableObject\n from Products.CMFCore.DirectoryView import _dirreg\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import base_hasattr\n@@ -9,6 +11,7 @@\n from Products.ZCatalog.ProgressHandler import ZLogHandler\n from types import ModuleType\n from ZODB.POSException import ConflictError\n+from zope.component import getMultiAdapter\n \n import logging\n import pkg_resources\n@@ -349,7 +352,7 @@ def updateIconsInBrains(context, typesToUpdate=None):\n     logger.info("Updated `getIcon` metadata.")\n \n \n-def update_catalog_metadata(context):\n+def update_catalog_metadata(context, column=None):\n     """Update catalog metadata for all brains."""\n     catalog = getToolByName(context, "portal_catalog")\n     logger.info("Updating metadata.")\n@@ -359,9 +362,43 @@ def update_catalog_metadata(context):\n     num_objects = len(brains)\n     pghandler = ZLogHandler(100)\n     pghandler.init("Updating metadata", num_objects)\n+\n+    column_position = metadata = None\n+    if column is not None:\n+        # We want to update one single column.\n+        # First check if it is there.\n+        if column not in catalog.schema():\n+            raise KeyError(\n+                "Column %s is not in the catalog schema: %s", column, catalog.schema()\n+            )\n+        # Updating a single column is only possible when relying on inner workings of\n+        # the catalog.  Find out if we have a regular ZCatalog and not something\n+        # special. Taken over from updateIconsInBrains above.\n+        _catalog = getattr(catalog, "_catalog", None)\n+        if _catalog is not None:\n+            metadata = _catalog.data\n+            column_position = _catalog.schema.get(column, None)\n+\n     for index, brain in enumerate(brains, 1):\n         pghandler.report(index)\n         obj = brain.getObject()\n+        if column_position is not None:\n+            # We rely on the inner workings of the catalog.\n+            rid = brain.getRID()\n+            record = metadata[rid]\n+            old_value = record[column_position]\n+            # see CMFPlone/catalog.zcml\n+            wrapper = getMultiAdapter((obj, catalog), IIndexableObject)\n+            try:\n+                new_value = getattr(wrapper, column)\n+            except AttributeError:\n+                new_value = Missing\n+            if old_value == new_value:\n+                continue\n+            new_record = list(record)\n+            new_record[column_position] = new_value\n+            metadata[rid] = tuple(new_record)\n+            continue\n         # We can only update the metadata if we also update at least one index.\n         # Passing in a valid but inexpensive index, makes sure we do not reindex the\n         # entire catalog including expensive indexes like SearchableText.\ndiff --git a/plone/app/upgrade/v60/alphas.py b/plone/app/upgrade/v60/alphas.py\nindex 8b468a17..ec380c11 100644\n--- a/plone/app/upgrade/v60/alphas.py\n+++ b/plone/app/upgrade/v60/alphas.py\n@@ -347,7 +347,7 @@ def update_catalog_for_image_scales(context):\n         catalog.addColumn(column)\n         logger.info("Added %s column to catalog metadata schema.", column)\n     start = time()\n-    update_catalog_metadata(context)\n+    update_catalog_metadata(context, column=column)\n     end = time()\n     minutes = (end - start) / 60\n     logger.info(\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-06-23T12:33:07+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/cf51b172b446a0772cdfaeba501ccda14697a8a5

image scales: fix Missing value.

Take over code from `ZCatalog/Catalog.py:recordify`.

For those like me who don't often look at the `Missing` module, its `__init__.py` has:

```
V = MV = Value = Missing()
notMissing = Missing()
```

Files changed:
M plone/app/upgrade/utils.py

b'diff --git a/plone/app/upgrade/utils.py b/plone/app/upgrade/utils.py\nindex d61b11a6..2c451b42 100644\n--- a/plone/app/upgrade/utils.py\n+++ b/plone/app/upgrade/utils.py\n@@ -1,5 +1,5 @@\n from Acquisition import aq_base\n-from Missing import Missing\n+from Missing import MV\n from plone.base.utils import get_installer\n from plone.indexer.interfaces import IIndexableObject\n from Products.CMFCore.DirectoryView import _dirreg\n@@ -389,10 +389,12 @@ def update_catalog_metadata(context, column=None):\n             old_value = record[column_position]\n             # see CMFPlone/catalog.zcml\n             wrapper = getMultiAdapter((obj, catalog), IIndexableObject)\n-            try:\n-                new_value = getattr(wrapper, column)\n-            except AttributeError:\n-                new_value = Missing\n+            # See ZCatalog/Catalog.py:recordify\n+            new_value = getattr(wrapper, column, MV)\n+            if (new_value is not MV and safe_callable(new_value)):\n+                new_value = new_value()\n+            record.append(attr)\n+\n             if old_value == new_value:\n                 continue\n             new_record = list(record)\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-06-23T12:46:55+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/0b0793098e1c24b8ab7847dbed6215dc8d731261

Fix undefined variables, I was too hasty.

Files changed:
M plone/app/upgrade/utils.py

b'diff --git a/plone/app/upgrade/utils.py b/plone/app/upgrade/utils.py\nindex 2c451b42..6a7bc0c5 100644\n--- a/plone/app/upgrade/utils.py\n+++ b/plone/app/upgrade/utils.py\n@@ -8,6 +8,7 @@\n from Products.GenericSetup.interfaces import ISetupTool\n from Products.GenericSetup.registry import _export_step_registry\n from Products.GenericSetup.registry import _import_step_registry\n+from Products.PluginIndexes.util import safe_callable\n from Products.ZCatalog.ProgressHandler import ZLogHandler\n from types import ModuleType\n from ZODB.POSException import ConflictError\n@@ -393,8 +394,6 @@ def update_catalog_metadata(context, column=None):\n             new_value = getattr(wrapper, column, MV)\n             if (new_value is not MV and safe_callable(new_value)):\n                 new_value = new_value()\n-            record.append(attr)\n-\n             if old_value == new_value:\n                 continue\n             new_record = list(record)\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2022-06-24T09:59:10+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.upgrade/commit/b7b536c6a97eeca414cd8554258b608741010fa0

Merge pull request #292 from plone/image-scales-metadata

Add image_scales metadata

Files changed:
A news/3521.feature
M plone/app/upgrade/utils.py
M plone/app/upgrade/v60/alphas.py
M plone/app/upgrade/v60/configure.zcml
M plone/app/upgrade/v60/profiles/to6005/registry.xml

b'diff --git a/news/3521.feature b/news/3521.feature\nnew file mode 100644\nindex 00000000..c418ec8f\n--- /dev/null\n+++ b/news/3521.feature\n@@ -0,0 +1,6 @@\n+Add ``image_scales`` catalog metadata column.\n+Update all brains to get this info.\n+Since this takes long on large sites, you can disable this with an environment variable:\n+``export UPDATE_CATALOG_FOR_IMAGE_SCALES=0``\n+In that case, you are advised to add the ``image_scales`` column manually to the catalog later.\n+[maurits]\ndiff --git a/plone/app/upgrade/utils.py b/plone/app/upgrade/utils.py\nindex db5255aa..6a7bc0c5 100644\n--- a/plone/app/upgrade/utils.py\n+++ b/plone/app/upgrade/utils.py\n@@ -1,14 +1,18 @@\n from Acquisition import aq_base\n+from Missing import MV\n from plone.base.utils import get_installer\n+from plone.indexer.interfaces import IIndexableObject\n from Products.CMFCore.DirectoryView import _dirreg\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import base_hasattr\n from Products.GenericSetup.interfaces import ISetupTool\n from Products.GenericSetup.registry import _export_step_registry\n from Products.GenericSetup.registry import _import_step_registry\n+from Products.PluginIndexes.util import safe_callable\n from Products.ZCatalog.ProgressHandler import ZLogHandler\n from types import ModuleType\n from ZODB.POSException import ConflictError\n+from zope.component import getMultiAdapter\n \n import logging\n import pkg_resources\n@@ -349,6 +353,67 @@ def updateIconsInBrains(context, typesToUpdate=None):\n     logger.info("Updated `getIcon` metadata.")\n \n \n+def update_catalog_metadata(context, column=None):\n+    """Update catalog metadata for all brains."""\n+    catalog = getToolByName(context, "portal_catalog")\n+    logger.info("Updating metadata.")\n+    # If we want to report progress, we need to know how many brains there are\n+    # and we can only do this if we have a list instead of a generator.\n+    brains = list(catalog.getAllBrains())\n+    num_objects = len(brains)\n+    pghandler = ZLogHandler(100)\n+    pghandler.init("Updating metadata", num_objects)\n+\n+    column_position = metadata = None\n+    if column is not None:\n+        # We want to update one single column.\n+        # First check if it is there.\n+        if column not in catalog.schema():\n+            raise KeyError(\n+                "Column %s is not in the catalog schema: %s", column, catalog.schema()\n+            )\n+        # Updating a single column is only possible when relying on inner workings of\n+        # the catalog.  Find out if we have a regular ZCatalog and not something\n+        # special. Taken over from updateIconsInBrains above.\n+        _catalog = getattr(catalog, "_catalog", None)\n+        if _catalog is not None:\n+            metadata = _catalog.data\n+            column_position = _catalog.schema.get(column, None)\n+\n+    for index, brain in enumerate(brains, 1):\n+        pghandler.report(index)\n+        obj = brain.getObject()\n+        if column_position is not None:\n+            # We rely on the inner workings of the catalog.\n+            rid = brain.getRID()\n+            record = metadata[rid]\n+            old_value = record[column_position]\n+            # see CMFPlone/catalog.zcml\n+            wrapper = getMultiAdapter((obj, catalog), IIndexableObject)\n+            # See ZCatalog/Catalog.py:recordify\n+            new_value = getattr(wrapper, column, MV)\n+            if (new_value is not MV and safe_callable(new_value)):\n+                new_value = new_value()\n+            if old_value == new_value:\n+                continue\n+            new_record = list(record)\n+            new_record[column_position] = new_value\n+            metadata[rid] = tuple(new_record)\n+            continue\n+        # We can only update the metadata if we also update at least one index.\n+        # Passing in a valid but inexpensive index, makes sure we do not reindex the\n+        # entire catalog including expensive indexes like SearchableText.\n+        brain_path = brain.getPath()\n+        try:\n+            catalog.catalog_object(obj, brain_path, ["id"], True, pghandler)\n+        except ConflictError:\n+            raise\n+        except Exception:\n+            pass\n+    pghandler.finish()\n+    logger.info("Updated metadata of all brains.")\n+\n+\n def get_property(context, property_name, default_value=None):\n     try:\n         return getattr(context, property_name, default_value)\ndiff --git a/plone/app/upgrade/v60/alphas.py b/plone/app/upgrade/v60/alphas.py\nindex 47a39e63..ec380c11 100644\n--- a/plone/app/upgrade/v60/alphas.py\n+++ b/plone/app/upgrade/v60/alphas.py\n@@ -1,4 +1,5 @@\n from plone.app.upgrade.utils import loadMigrationProfile\n+from plone.app.upgrade.utils import update_catalog_metadata\n from plone.base.utils import get_installer\n from plone.dexterity.fti import DexterityFTI\n from plone.registry.interfaces import IRegistry\n@@ -6,12 +7,14 @@\n from plone.uuid.interfaces import IUUIDGenerator\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IBundleRegistry\n+from time import time\n from ZODB.broken import Broken\n from zope.component import getUtility\n from zope.component import queryUtility\n from zope.component.hooks import getSite\n \n import logging\n+import os\n \n \n logger = logging.getLogger("plone.app.upgrade")\n@@ -323,6 +326,35 @@ def sorter(value):\n     record.value = new_value\n \n \n+def update_catalog_for_image_scales(context):\n+    """Update the catalog to add the image_scales column to all brains.\n+\n+    This may take long.  By default we update, but we check an environment variable\n+    so you can switch this off:\n+    UPDATE_CATALOG_FOR_IMAGE_SCALES = 0\n+    """\n+    # We could catch TypeError and ValueError, but really this is a user error,\n+    # so let\'s fail.\n+    update = bool(int(os.getenv("UPDATE_CATALOG_FOR_IMAGE_SCALES", 1)))\n+    if not update:\n+        logger.warning(\n+            "UPDATE_CATALOG_FOR_IMAGE_SCALES is false, so not updating catalog."\n+        )\n+        return\n+    catalog = getToolByName(context, "portal_catalog")\n+    column = "image_scales"\n+    if column not in catalog.schema():\n+        catalog.addColumn(column)\n+        logger.info("Added %s column to catalog metadata schema.", column)\n+    start = time()\n+    update_catalog_metadata(context, column=column)\n+    end = time()\n+    minutes = (end - start) / 60\n+    logger.info(\n+        "Time taken to update catalog for image scales: %.1f minutes.", minutes\n+    )\n+\n+\n def upgrade_plone_module_profiles(context):\n     """Upgrade profiles of core Plone modules to specific versions.\n \ndiff --git a/plone/app/upgrade/v60/configure.zcml b/plone/app/upgrade/v60/configure.zcml\nindex 4a72b7ee..075587ce 100644\n--- a/plone/app/upgrade/v60/configure.zcml\n+++ b/plone/app/upgrade/v60/configure.zcml\n@@ -115,6 +115,11 @@\n            handler=".alphas.upgrade_plone_module_profiles"\n            />\n \n+       <gs:upgradeStep\n+           title="Update catalog brains to add image_scales."\n+           handler=".alphas.update_catalog_for_image_scales"\n+           />\n+\n     </gs:upgradeSteps>\n \n </configure>\ndiff --git a/plone/app/upgrade/v60/profiles/to6005/registry.xml b/plone/app/upgrade/v60/profiles/to6005/registry.xml\nindex efddabe6..7c8abfbd 100644\n--- a/plone/app/upgrade/v60/profiles/to6005/registry.xml\n+++ b/plone/app/upgrade/v60/profiles/to6005/registry.xml\n@@ -6,4 +6,15 @@\n   <records interface="plone.base.interfaces.IImagingSchema"\n            prefix="plone" />\n \n+  <records interface="plone.base.interfaces.controlpanel.IFilterSchema" prefix="plone">\n+    <value key="valid_tags" purge="false">\n+      <element>picture</element>\n+    </value>\n+    <value key="custom_attributes" purge="false">\n+      <element>loading</element>\n+      <element>srcset</element>\n+      <element>sizes</element>\n+    </value>\n+  </records>\n+\n </registry>\n'

