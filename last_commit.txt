Repository: plone.app.caching


Branch: refs/heads/master
Date: 2022-05-06T17:54:37+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/5a7a23b40307875eda077e794fe765ae5c33dfff

move ruleset assignments to plone.restapi

Files changed:
M plone/app/caching/caching.zcml
M plone/app/caching/configure.zcml

b'diff --git a/plone/app/caching/caching.zcml b/plone/app/caching/caching.zcml\nindex e081d57..a8f4ef6 100644\n--- a/plone/app/caching/caching.zcml\n+++ b/plone/app/caching/caching.zcml\n@@ -133,47 +133,6 @@\n       ruleset="plone.content.file"\n       />\n \n-  <!-- plone.restapi content -->\n-  <configure zcml:condition="installed plone.restapi">\n-\n-    <include package="plone.restapi" />\n-\n-    <cache:ruleset\n-        for="plone.restapi.services.discussion.conversation.CommentsGet"\n-        ruleset="plone.content.itemView"\n-        />\n-\n-    <cache:ruleset\n-        for="plone.restapi.services.actions.get.ActionsGet"\n-        ruleset="plone.content.dynamic"\n-        />\n-    <cache:ruleset\n-        for="plone.restapi.services.breadcrumbs.get.BreadcrumbsGet"\n-        ruleset="plone.content.dynamic"\n-        />\n-    <cache:ruleset\n-        for="plone.restapi.services.content.get.ContentGet"\n-        ruleset="plone.content.dynamic"\n-        />\n-    <cache:ruleset\n-        for="plone.restapi.services.multilingual.pam.TranslationInfo"\n-        ruleset="plone.content.dynamic"\n-        />\n-    <cache:ruleset\n-        for="plone.restapi.services.navigation.get.NavigationGet"\n-        ruleset="plone.content.dynamic"\n-        />\n-    <cache:ruleset\n-        for="plone.restapi.services.querystring.get.QuerystringGet"\n-        ruleset="plone.content.dynamic"\n-        />\n-    <cache:ruleset\n-        for="plone.restapi.services.search.get.SearchGet"\n-        ruleset="plone.content.dynamic"\n-        />\n-\n-  </configure>\n-\n   <!-- Paths to purge -->\n \n   <!-- Standard CMF content -->\ndiff --git a/plone/app/caching/configure.zcml b/plone/app/caching/configure.zcml\nindex c2e13fe..732fc39 100644\n--- a/plone/app/caching/configure.zcml\n+++ b/plone/app/caching/configure.zcml\n@@ -1,9 +1,12 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n+    xmlns:meta="http://namespaces.zope.org/meta"\n     i18n_domain="plone"\n     >\n \n+  <meta:provides feature="plone-app-caching-3" />\n+\n   <include\n       package="z3c.zcmlhook"\n       file="meta.zcml"\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2022-05-06T17:58:39+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/982da2811340204394fa8af271d68b8d65f93d55

add newsfile

Files changed:
A news/100.feature

b'diff --git a/news/100.feature b/news/100.feature\nnew file mode 100644\nindex 0000000..079e2d0\n--- /dev/null\n+++ b/news/100.feature\n@@ -0,0 +1,2 @@\n+Move caching ruleset assignments from here to plone.restapi and add ZCML feature here.\n+[jensens]\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2022-05-06T18:10:12+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/a2f112f3333b24db4cc04bdc72fba596ceb07662

zpretty

Files changed:
M plone/app/caching/configure.zcml

b'diff --git a/plone/app/caching/configure.zcml b/plone/app/caching/configure.zcml\nindex 732fc39..48394f7 100644\n--- a/plone/app/caching/configure.zcml\n+++ b/plone/app/caching/configure.zcml\n@@ -1,7 +1,7 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:meta="http://namespaces.zope.org/meta"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     i18n_domain="plone"\n     >\n \n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2022-05-08T00:30:48+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/0527f84d3029c66346b47d0d90e5d7b484e56ad0

move tests to restapi

Files changed:
M plone/app/caching/testing.py
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py
M setup.py

b'diff --git a/plone/app/caching/testing.py b/plone/app/caching/testing.py\nindex b4f6919..4546a5c 100644\n--- a/plone/app/caching/testing.py\n+++ b/plone/app/caching/testing.py\n@@ -6,7 +6,6 @@\n from plone.app.testing import PloneSandboxLayer\n from plone.cachepurging.interfaces import IPurger\n from plone.protect.authenticator import _getKeyring\n-from plone.restapi.testing import PLONE_RESTAPI_DX_PAM_FIXTURE\n from plone.testing import z2\n from zope.component import getUtility\n from zope.component import provideUtility\n@@ -63,13 +62,7 @@ class PloneAppCaching(PloneAppCachingBase):\n     defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n \n-class PloneAppCachingRestAPI(PloneAppCachingBase):\n-\n-    defaultBases = (PLONE_RESTAPI_DX_PAM_FIXTURE,)\n-\n-\n PLONE_APP_CACHING_FIXTURE = PloneAppCaching()\n-PLONE_APP_CACHING_RESTAPI_FIXTURE = PloneAppCachingRestAPI()\n PLONE_APP_CACHING_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(PLONE_APP_CACHING_FIXTURE,),\n     name="PloneAppCaching:Integration",\n@@ -79,11 +72,6 @@ class PloneAppCachingRestAPI(PloneAppCachingBase):\n     name="PloneAppCaching:Functional",\n )\n \n-PLONE_APP_CACHING_FUNCTIONAL_RESTAPI_TESTING = FunctionalTesting(\n-    bases=(PLONE_APP_CACHING_RESTAPI_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="PloneAppCachingRestAPI:Functional",\n-)\n-\n \n def getToken(username):\n     ring = _getKeyring(username)\ndiff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py\nindex b2ff4a6..1e2d1f7 100644\n--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py\n@@ -1,6 +1,5 @@\n from io import BytesIO\n from plone.app.caching.interfaces import IPloneCacheSettings\n-from plone.app.caching.testing import PLONE_APP_CACHING_FUNCTIONAL_RESTAPI_TESTING\n from plone.app.caching.testing import PLONE_APP_CACHING_FUNCTIONAL_TESTING\n from plone.app.caching.tests.test_utils import normalize_etag\n from plone.app.caching.tests.test_utils import stable_now\n@@ -17,7 +16,6 @@\n from plone.cachepurging.interfaces import IPurger\n from plone.caching.interfaces import ICacheSettings\n from plone.registry.interfaces import IRegistry\n-from plone.restapi.testing import RelativeSession\n from plone.testing.z2 import Browser\n from Products.CMFCore.FSFile import FSFile\n from Products.CMFCore.utils import getToolByName\n@@ -603,119 +601,3 @@ def test_stable_resources(self):\n         # What is the best way to test this?\n         # Maybe not important since the RR test exercises the same code?\n         pass\n-\n-\n-class TestProfileWithCachingRestAPI(unittest.TestCase):\n-    """This test aims to exercise the caching operations expected from the\n-    `with-caching-proxy` profile for supported restapi calls.\n-    """\n-\n-    layer = PLONE_APP_CACHING_FUNCTIONAL_RESTAPI_TESTING\n-\n-    def setUp(self):\n-        self.app = self.layer["app"]\n-        self.portal = self.layer["portal"]\n-\n-        test_css = FSFile(\n-            "test.css", os.path.join(os.path.dirname(__file__), "test.css")\n-        )\n-        self.portal.portal_skins.custom._setOb("test.css", test_css)\n-\n-        setRequest(self.portal.REQUEST)\n-\n-        applyProfile(self.portal, "plone.app.caching:with-caching-proxy")\n-\n-        self.registry = getUtility(IRegistry)\n-\n-        self.cacheSettings = self.registry.forInterface(ICacheSettings)\n-        self.cachePurgingSettings = self.registry.forInterface(ICachePurgingSettings)\n-        self.ploneCacheSettings = self.registry.forInterface(IPloneCacheSettings)\n-\n-        self.cacheSettings.enabled = True\n-\n-        self.purger = getUtility(IPurger)\n-        self.purger.reset()\n-\n-        # some test content\n-        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n-\n-        self.portal.invokeFactory("Folder", "f1")\n-        self.portal["f1"].title = "Folder one"\n-        self.portal.portal_workflow.doActionFor(self.portal["f1"], "publish")\n-\n-        self.portal["f1"].invokeFactory("Folder", "f2")\n-        self.portal["f1"]["f2"].title = "Folder one sub one"\n-        self.portal.portal_workflow.doActionFor(self.portal["f1"]["f2"], "publish")\n-\n-        self.portal.invokeFactory("Collection", "c")\n-        self.portal["c"].title = "A Collection"\n-        self.portal.portal_workflow.doActionFor(self.portal["c"], "publish")\n-\n-        transaction.commit()\n-\n-        # restapi test session\n-        self.api_session = RelativeSession(self.layer["portal"].absolute_url())\n-        self.api_session.headers.update({"Accept": "application/json"})\n-\n-    def test_restapi_actions(self):\n-        # plone.content.dynamic for plone.restapi.services.actions.get.ActionsGet\n-        response = self.api_session.get("/f1/f2/@actions")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\n-\n-    def test_restapi_breadcrumbs(self):\n-        # plone.content.dynamic for plone.restapi.services.breadcrumbs.get.BreadcrumbsGet\n-        response = self.api_session.get("/f1/f2/@breadcrumbs")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\n-\n-    def test_restapi_comments(self):\n-        # plone.content.itemView for plone.restapi.services.discussion.conversation.CommentsGet\n-        response = self.api_session.get("/f1/f2/@comments")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.itemView")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.weakCaching"\n-        )\n-\n-    def test_restapi_content(self):\n-        # plone.content.dynamic for plone.restapi.services.content.get.ContentGet\n-        response = self.api_session.get("/f1/f2")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\n-\n-    def test_restapi_navigation(self):\n-        # plone.content.dynamic for plone.restapi.services.navigation.get.NavigationGet\n-        response = self.api_session.get("/f1/f2/@navigation")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\n-\n-    def test_restapi_querystring(self):\n-        # plone.content.dynamic for plone.restapi.services.querystring.get.QueryStringGet\n-        response = self.api_session.get("/@querystring")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\n-\n-    def test_restapi_search(self):\n-        # plone.content.dynamic for plone.restapi.services.search.get.SearchGet\n-        response = self.api_session.get("/@search")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\ndiff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py\nindex 0032d55..342aacb 100644\n--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py\n@@ -1,5 +1,4 @@\n from plone.app.caching.interfaces import IPloneCacheSettings\n-from plone.app.caching.testing import PLONE_APP_CACHING_FUNCTIONAL_RESTAPI_TESTING\n from plone.app.caching.testing import PLONE_APP_CACHING_FUNCTIONAL_TESTING\n from plone.app.caching.tests.test_utils import normalize_etag\n from plone.app.caching.tests.test_utils import stable_now\n@@ -13,7 +12,6 @@\n from plone.cachepurging.interfaces import ICachePurgingSettings\n from plone.caching.interfaces import ICacheSettings\n from plone.registry.interfaces import IRegistry\n-from plone.restapi.testing import RelativeSession\n from plone.testing.z2 import Browser\n from Products.CMFCore.FSFile import FSFile\n from Products.CMFCore.utils import getToolByName\n@@ -508,116 +506,3 @@ def test_stable_resources(self):\n         # What is the best way to test this?\n         # Maybe not important since the RR test exercises the same code?\n         pass\n-\n-\n-class TestProfileWithoutCachingRestAPI(unittest.TestCase):\n-    """This test aims to exercise the caching operations expected from the\n-    `without-caching-proxy` profile for supported restapi calls.\n-    """\n-\n-    layer = PLONE_APP_CACHING_FUNCTIONAL_RESTAPI_TESTING\n-\n-    def setUp(self):\n-        self.app = self.layer["app"]\n-        self.portal = self.layer["portal"]\n-\n-        test_css = FSFile(\n-            "test.css", os.path.join(os.path.dirname(__file__), "test.css")\n-        )\n-        self.portal.portal_skins.custom._setOb("test.css", test_css)\n-\n-        setRequest(self.portal.REQUEST)\n-\n-        applyProfile(self.portal, "plone.app.caching:without-caching-proxy")\n-\n-        self.registry = getUtility(IRegistry)\n-\n-        self.cacheSettings = self.registry.forInterface(ICacheSettings)\n-        self.cachePurgingSettings = self.registry.forInterface(ICachePurgingSettings)\n-        self.ploneCacheSettings = self.registry.forInterface(IPloneCacheSettings)\n-\n-        self.cacheSettings.enabled = True\n-\n-        # some test content\n-        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n-\n-        self.portal.invokeFactory("Folder", "f1")\n-        self.portal["f1"].title = "Folder one"\n-        self.portal.portal_workflow.doActionFor(self.portal["f1"], "publish")\n-\n-        self.portal["f1"].invokeFactory("Folder", "f2")\n-        self.portal["f1"]["f2"].title = "Folder one sub one"\n-        self.portal.portal_workflow.doActionFor(self.portal["f1"]["f2"], "publish")\n-\n-        self.portal.invokeFactory("Collection", "c")\n-        self.portal["c"].title = "A Collection"\n-        self.portal.portal_workflow.doActionFor(self.portal["c"], "publish")\n-\n-        transaction.commit()\n-\n-        # restapi test session\n-        self.api_session = RelativeSession(self.layer["portal"].absolute_url())\n-        self.api_session.headers.update({"Accept": "application/json"})\n-\n-    def test_restapi_actions(self):\n-        # plone.content.dynamic for plone.restapi.services.actions.get.ActionsGet\n-        response = self.api_session.get("/f1/f2/@actions")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\n-\n-    def test_restapi_breadcrumbs(self):\n-        # plone.content.dynamic for plone.restapi.services.breadcrumbs.get.BreadcrumbsGet\n-        response = self.api_session.get("/f1/f2/@breadcrumbs")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\n-\n-    def test_restapi_comments(self):\n-        # plone.content.itemView for plone.restapi.services.discussion.conversation.CommentsGet\n-        response = self.api_session.get("/f1/f2/@comments")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.itemView")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.weakCaching"\n-        )\n-\n-    def test_restapi_content(self):\n-        # plone.content.dynamic for plone.restapi.services.content.get.ContentGet\n-        response = self.api_session.get("/f1/f2")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\n-\n-    def test_restapi_navigation(self):\n-        # plone.content.dynamic for plone.restapi.services.navigation.get.NavigationGet\n-        response = self.api_session.get("/f1/f2/@navigation")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\n-\n-    def test_restapi_querystring(self):\n-        # plone.content.dynamic for plone.restapi.services.querystring.get.QueryStringGet\n-        response = self.api_session.get("/@querystring")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\n-\n-    def test_restapi_search(self):\n-        # plone.content.dynamic for plone.restapi.services.search.get.SearchGet\n-        response = self.api_session.get("/@search")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\ndiff --git a/setup.py b/setup.py\nindex da96778..2d7e8de 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -44,7 +44,6 @@\n         "test": [\n             "plone.app.contenttypes[test]",\n             "plone.app.testing",\n-            "plone.restapi[test]",\n         ]\n     },\n     entry_points="""\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2022-05-10T17:13:47+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/f41fb7c4d3b1a0cc9c8fe2b553b7845fef2b0793

Merge pull request #100 from plone/move-to-restapi

move ruleset assignments to plone.restapi

Files changed:
A news/100.feature
M plone/app/caching/caching.zcml
M plone/app/caching/configure.zcml
M plone/app/caching/testing.py
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py
M setup.py

b'diff --git a/news/100.feature b/news/100.feature\nnew file mode 100644\nindex 0000000..079e2d0\n--- /dev/null\n+++ b/news/100.feature\n@@ -0,0 +1,2 @@\n+Move caching ruleset assignments from here to plone.restapi and add ZCML feature here.\n+[jensens]\ndiff --git a/plone/app/caching/caching.zcml b/plone/app/caching/caching.zcml\nindex adf9a34..80a5d63 100644\n--- a/plone/app/caching/caching.zcml\n+++ b/plone/app/caching/caching.zcml\n@@ -124,47 +124,6 @@\n       ruleset="plone.content.file"\n       />\n \n-  <!-- plone.restapi content -->\n-  <configure zcml:condition="installed plone.restapi">\n-\n-    <include package="plone.restapi" />\n-\n-    <cache:ruleset\n-        for="plone.restapi.services.discussion.conversation.CommentsGet"\n-        ruleset="plone.content.itemView"\n-        />\n-\n-    <cache:ruleset\n-        for="plone.restapi.services.actions.get.ActionsGet"\n-        ruleset="plone.content.dynamic"\n-        />\n-    <cache:ruleset\n-        for="plone.restapi.services.breadcrumbs.get.BreadcrumbsGet"\n-        ruleset="plone.content.dynamic"\n-        />\n-    <cache:ruleset\n-        for="plone.restapi.services.content.get.ContentGet"\n-        ruleset="plone.content.dynamic"\n-        />\n-    <cache:ruleset\n-        for="plone.restapi.services.multilingual.pam.TranslationInfo"\n-        ruleset="plone.content.dynamic"\n-        />\n-    <cache:ruleset\n-        for="plone.restapi.services.navigation.get.NavigationGet"\n-        ruleset="plone.content.dynamic"\n-        />\n-    <cache:ruleset\n-        for="plone.restapi.services.querystring.get.QuerystringGet"\n-        ruleset="plone.content.dynamic"\n-        />\n-    <cache:ruleset\n-        for="plone.restapi.services.search.get.SearchGet"\n-        ruleset="plone.content.dynamic"\n-        />\n-\n-  </configure>\n-\n   <!-- Paths to purge -->\n \n   <!-- Standard CMF content -->\ndiff --git a/plone/app/caching/configure.zcml b/plone/app/caching/configure.zcml\nindex c2e13fe..48394f7 100644\n--- a/plone/app/caching/configure.zcml\n+++ b/plone/app/caching/configure.zcml\n@@ -1,9 +1,12 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n+    xmlns:meta="http://namespaces.zope.org/meta"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     i18n_domain="plone"\n     >\n \n+  <meta:provides feature="plone-app-caching-3" />\n+\n   <include\n       package="z3c.zcmlhook"\n       file="meta.zcml"\ndiff --git a/plone/app/caching/testing.py b/plone/app/caching/testing.py\nindex b4f6919..4546a5c 100644\n--- a/plone/app/caching/testing.py\n+++ b/plone/app/caching/testing.py\n@@ -6,7 +6,6 @@\n from plone.app.testing import PloneSandboxLayer\n from plone.cachepurging.interfaces import IPurger\n from plone.protect.authenticator import _getKeyring\n-from plone.restapi.testing import PLONE_RESTAPI_DX_PAM_FIXTURE\n from plone.testing import z2\n from zope.component import getUtility\n from zope.component import provideUtility\n@@ -63,13 +62,7 @@ class PloneAppCaching(PloneAppCachingBase):\n     defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n \n-class PloneAppCachingRestAPI(PloneAppCachingBase):\n-\n-    defaultBases = (PLONE_RESTAPI_DX_PAM_FIXTURE,)\n-\n-\n PLONE_APP_CACHING_FIXTURE = PloneAppCaching()\n-PLONE_APP_CACHING_RESTAPI_FIXTURE = PloneAppCachingRestAPI()\n PLONE_APP_CACHING_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(PLONE_APP_CACHING_FIXTURE,),\n     name="PloneAppCaching:Integration",\n@@ -79,11 +72,6 @@ class PloneAppCachingRestAPI(PloneAppCachingBase):\n     name="PloneAppCaching:Functional",\n )\n \n-PLONE_APP_CACHING_FUNCTIONAL_RESTAPI_TESTING = FunctionalTesting(\n-    bases=(PLONE_APP_CACHING_RESTAPI_FIXTURE, z2.ZSERVER_FIXTURE),\n-    name="PloneAppCachingRestAPI:Functional",\n-)\n-\n \n def getToken(username):\n     ring = _getKeyring(username)\ndiff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py\nindex b2ff4a6..1e2d1f7 100644\n--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py\n@@ -1,6 +1,5 @@\n from io import BytesIO\n from plone.app.caching.interfaces import IPloneCacheSettings\n-from plone.app.caching.testing import PLONE_APP_CACHING_FUNCTIONAL_RESTAPI_TESTING\n from plone.app.caching.testing import PLONE_APP_CACHING_FUNCTIONAL_TESTING\n from plone.app.caching.tests.test_utils import normalize_etag\n from plone.app.caching.tests.test_utils import stable_now\n@@ -17,7 +16,6 @@\n from plone.cachepurging.interfaces import IPurger\n from plone.caching.interfaces import ICacheSettings\n from plone.registry.interfaces import IRegistry\n-from plone.restapi.testing import RelativeSession\n from plone.testing.z2 import Browser\n from Products.CMFCore.FSFile import FSFile\n from Products.CMFCore.utils import getToolByName\n@@ -603,119 +601,3 @@ def test_stable_resources(self):\n         # What is the best way to test this?\n         # Maybe not important since the RR test exercises the same code?\n         pass\n-\n-\n-class TestProfileWithCachingRestAPI(unittest.TestCase):\n-    """This test aims to exercise the caching operations expected from the\n-    `with-caching-proxy` profile for supported restapi calls.\n-    """\n-\n-    layer = PLONE_APP_CACHING_FUNCTIONAL_RESTAPI_TESTING\n-\n-    def setUp(self):\n-        self.app = self.layer["app"]\n-        self.portal = self.layer["portal"]\n-\n-        test_css = FSFile(\n-            "test.css", os.path.join(os.path.dirname(__file__), "test.css")\n-        )\n-        self.portal.portal_skins.custom._setOb("test.css", test_css)\n-\n-        setRequest(self.portal.REQUEST)\n-\n-        applyProfile(self.portal, "plone.app.caching:with-caching-proxy")\n-\n-        self.registry = getUtility(IRegistry)\n-\n-        self.cacheSettings = self.registry.forInterface(ICacheSettings)\n-        self.cachePurgingSettings = self.registry.forInterface(ICachePurgingSettings)\n-        self.ploneCacheSettings = self.registry.forInterface(IPloneCacheSettings)\n-\n-        self.cacheSettings.enabled = True\n-\n-        self.purger = getUtility(IPurger)\n-        self.purger.reset()\n-\n-        # some test content\n-        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n-\n-        self.portal.invokeFactory("Folder", "f1")\n-        self.portal["f1"].title = "Folder one"\n-        self.portal.portal_workflow.doActionFor(self.portal["f1"], "publish")\n-\n-        self.portal["f1"].invokeFactory("Folder", "f2")\n-        self.portal["f1"]["f2"].title = "Folder one sub one"\n-        self.portal.portal_workflow.doActionFor(self.portal["f1"]["f2"], "publish")\n-\n-        self.portal.invokeFactory("Collection", "c")\n-        self.portal["c"].title = "A Collection"\n-        self.portal.portal_workflow.doActionFor(self.portal["c"], "publish")\n-\n-        transaction.commit()\n-\n-        # restapi test session\n-        self.api_session = RelativeSession(self.layer["portal"].absolute_url())\n-        self.api_session.headers.update({"Accept": "application/json"})\n-\n-    def test_restapi_actions(self):\n-        # plone.content.dynamic for plone.restapi.services.actions.get.ActionsGet\n-        response = self.api_session.get("/f1/f2/@actions")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\n-\n-    def test_restapi_breadcrumbs(self):\n-        # plone.content.dynamic for plone.restapi.services.breadcrumbs.get.BreadcrumbsGet\n-        response = self.api_session.get("/f1/f2/@breadcrumbs")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\n-\n-    def test_restapi_comments(self):\n-        # plone.content.itemView for plone.restapi.services.discussion.conversation.CommentsGet\n-        response = self.api_session.get("/f1/f2/@comments")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.itemView")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.weakCaching"\n-        )\n-\n-    def test_restapi_content(self):\n-        # plone.content.dynamic for plone.restapi.services.content.get.ContentGet\n-        response = self.api_session.get("/f1/f2")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\n-\n-    def test_restapi_navigation(self):\n-        # plone.content.dynamic for plone.restapi.services.navigation.get.NavigationGet\n-        response = self.api_session.get("/f1/f2/@navigation")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\n-\n-    def test_restapi_querystring(self):\n-        # plone.content.dynamic for plone.restapi.services.querystring.get.QueryStringGet\n-        response = self.api_session.get("/@querystring")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\n-\n-    def test_restapi_search(self):\n-        # plone.content.dynamic for plone.restapi.services.search.get.SearchGet\n-        response = self.api_session.get("/@search")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\ndiff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py\nindex 0032d55..342aacb 100644\n--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py\n@@ -1,5 +1,4 @@\n from plone.app.caching.interfaces import IPloneCacheSettings\n-from plone.app.caching.testing import PLONE_APP_CACHING_FUNCTIONAL_RESTAPI_TESTING\n from plone.app.caching.testing import PLONE_APP_CACHING_FUNCTIONAL_TESTING\n from plone.app.caching.tests.test_utils import normalize_etag\n from plone.app.caching.tests.test_utils import stable_now\n@@ -13,7 +12,6 @@\n from plone.cachepurging.interfaces import ICachePurgingSettings\n from plone.caching.interfaces import ICacheSettings\n from plone.registry.interfaces import IRegistry\n-from plone.restapi.testing import RelativeSession\n from plone.testing.z2 import Browser\n from Products.CMFCore.FSFile import FSFile\n from Products.CMFCore.utils import getToolByName\n@@ -508,116 +506,3 @@ def test_stable_resources(self):\n         # What is the best way to test this?\n         # Maybe not important since the RR test exercises the same code?\n         pass\n-\n-\n-class TestProfileWithoutCachingRestAPI(unittest.TestCase):\n-    """This test aims to exercise the caching operations expected from the\n-    `without-caching-proxy` profile for supported restapi calls.\n-    """\n-\n-    layer = PLONE_APP_CACHING_FUNCTIONAL_RESTAPI_TESTING\n-\n-    def setUp(self):\n-        self.app = self.layer["app"]\n-        self.portal = self.layer["portal"]\n-\n-        test_css = FSFile(\n-            "test.css", os.path.join(os.path.dirname(__file__), "test.css")\n-        )\n-        self.portal.portal_skins.custom._setOb("test.css", test_css)\n-\n-        setRequest(self.portal.REQUEST)\n-\n-        applyProfile(self.portal, "plone.app.caching:without-caching-proxy")\n-\n-        self.registry = getUtility(IRegistry)\n-\n-        self.cacheSettings = self.registry.forInterface(ICacheSettings)\n-        self.cachePurgingSettings = self.registry.forInterface(ICachePurgingSettings)\n-        self.ploneCacheSettings = self.registry.forInterface(IPloneCacheSettings)\n-\n-        self.cacheSettings.enabled = True\n-\n-        # some test content\n-        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n-\n-        self.portal.invokeFactory("Folder", "f1")\n-        self.portal["f1"].title = "Folder one"\n-        self.portal.portal_workflow.doActionFor(self.portal["f1"], "publish")\n-\n-        self.portal["f1"].invokeFactory("Folder", "f2")\n-        self.portal["f1"]["f2"].title = "Folder one sub one"\n-        self.portal.portal_workflow.doActionFor(self.portal["f1"]["f2"], "publish")\n-\n-        self.portal.invokeFactory("Collection", "c")\n-        self.portal["c"].title = "A Collection"\n-        self.portal.portal_workflow.doActionFor(self.portal["c"], "publish")\n-\n-        transaction.commit()\n-\n-        # restapi test session\n-        self.api_session = RelativeSession(self.layer["portal"].absolute_url())\n-        self.api_session.headers.update({"Accept": "application/json"})\n-\n-    def test_restapi_actions(self):\n-        # plone.content.dynamic for plone.restapi.services.actions.get.ActionsGet\n-        response = self.api_session.get("/f1/f2/@actions")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\n-\n-    def test_restapi_breadcrumbs(self):\n-        # plone.content.dynamic for plone.restapi.services.breadcrumbs.get.BreadcrumbsGet\n-        response = self.api_session.get("/f1/f2/@breadcrumbs")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\n-\n-    def test_restapi_comments(self):\n-        # plone.content.itemView for plone.restapi.services.discussion.conversation.CommentsGet\n-        response = self.api_session.get("/f1/f2/@comments")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.itemView")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.weakCaching"\n-        )\n-\n-    def test_restapi_content(self):\n-        # plone.content.dynamic for plone.restapi.services.content.get.ContentGet\n-        response = self.api_session.get("/f1/f2")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\n-\n-    def test_restapi_navigation(self):\n-        # plone.content.dynamic for plone.restapi.services.navigation.get.NavigationGet\n-        response = self.api_session.get("/f1/f2/@navigation")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\n-\n-    def test_restapi_querystring(self):\n-        # plone.content.dynamic for plone.restapi.services.querystring.get.QueryStringGet\n-        response = self.api_session.get("/@querystring")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\n-\n-    def test_restapi_search(self):\n-        # plone.content.dynamic for plone.restapi.services.search.get.SearchGet\n-        response = self.api_session.get("/@search")\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(response.headers["X-Cache-Rule"], "plone.content.dynamic")\n-        self.assertEqual(\n-            response.headers["X-Cache-Operation"], "plone.app.caching.terseCaching"\n-        )\ndiff --git a/setup.py b/setup.py\nindex da96778..2d7e8de 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -44,7 +44,6 @@\n         "test": [\n             "plone.app.contenttypes[test]",\n             "plone.app.testing",\n-            "plone.restapi[test]",\n         ]\n     },\n     entry_points="""\n'

