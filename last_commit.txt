Repository: plone.behavior


Branch: refs/heads/master
Date: 2023-04-12T13:56:19+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.behavior/commit/7b502070e63b4b97ae5af84a18324da1cef3a1cf

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/a9dd65cc.internal
M pyproject.toml
M setup.cfg
M tox.ini
D .travis.yml

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..a774e20\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "a9dd65cc"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/.travis.yml b/.travis.yml\ndeleted file mode 100644\nindex fdc68c2..0000000\n--- a/.travis.yml\n+++ /dev/null\n@@ -1,13 +0,0 @@\n-language: python\n-python:\n-    - 2.7\n-    - 3.5\n-    - 3.6\n-    - 3.7\n-    - 3.8\n-install:\n-    - pip install tox-travis\n-script:\n-    - tox\n-notifications:\n-    email: false\ndiff --git a/news/a9dd65cc.internal b/news/a9dd65cc.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/a9dd65cc.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..0dad625 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,62 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\', \'ExtensionClass\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\', \'six\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 64d953a..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,8 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n [check-manifest]\n ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n     tox.ini\n-\n-\n-\n-[bdist_wheel]\n-universal = 1\ndiff --git a/tox.ini b/tox.ini\nindex dc7a8e2..f22d75e 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,10 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n envlist =\n-    py27,py35,py36,py37,py38\n+    format\n+    lint\n+    test\n \n [testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.behavior {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n deps =\n+    coverage\n     zope.testrunner\n-    .[test]\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    zope-testrunner --test-path=. {posargs:-pvc}\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.behavior {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

Repository: plone.behavior


Branch: refs/heads/master
Date: 2023-04-12T13:57:43+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.behavior/commit/cf26fe343bff19881ad2ce20b7000b5b31388fb8

run pyupgrade

Files changed:
M plone/__init__.py
M plone/behavior/__init__.py
M plone/behavior/annotation.py
M plone/behavior/factory.py
M plone/behavior/interfaces.py
M plone/behavior/markers.py
M plone/behavior/metaconfigure.py
M plone/behavior/registration.py
M plone/behavior/tests.py
M plone/behavior/vocab.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/behavior/__init__.py b/plone/behavior/__init__.py\nindex 9207b39..de93ce3 100644\n--- a/plone/behavior/__init__.py\n+++ b/plone/behavior/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Convenience import\n from plone.behavior.annotation import AnnotationStorage  # noqa\n \ndiff --git a/plone/behavior/annotation.py b/plone/behavior/annotation.py\nindex a496348..4e6dc3a 100644\n--- a/plone/behavior/annotation.py\n+++ b/plone/behavior/annotation.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.behavior.interfaces import ISchemaAwareFactory\n from zope.annotation.interfaces import IAnnotatable\n from zope.annotation.interfaces import IAnnotations\n@@ -8,7 +7,7 @@\n \n \n @adapter(IAnnotatable)\n-class AnnotationsFactoryImpl(object):\n+class AnnotationsFactoryImpl:\n     """A factory that knows how to store data in annotations.\n \n     Each value will be stored as a primitive in the annotations under a key\n@@ -38,14 +37,14 @@ def __getattr__(self, name):\n \n     def __setattr__(self, name, value):\n         if name not in self.__dict__[\'schema\']:\n-            super(AnnotationsFactoryImpl, self).__setattr__(name, value)\n+            super().__setattr__(name, value)\n         else:\n             prefixed_name = self.__dict__[\'prefix\'] + name\n             self.__dict__[\'annotations\'][prefixed_name] = value\n \n \n @provider(ISchemaAwareFactory)\n-class AnnotationStorage(object):\n+class AnnotationStorage:\n     """Behavior adapter factory class for storing data in annotations.\n     """\n \ndiff --git a/plone/behavior/factory.py b/plone/behavior/factory.py\nindex 8d83e91..54e8ad2 100644\n--- a/plone/behavior/factory.py\n+++ b/plone/behavior/factory.py\n@@ -1,11 +1,10 @@\n-# -*- coding: utf-8 -*-\n from plone.behavior.interfaces import IBehaviorAdapterFactory\n from plone.behavior.interfaces import IBehaviorAssignable\n from zope.interface import implementer\n \n \n @implementer(IBehaviorAdapterFactory)\n-class BehaviorAdapterFactory(object):\n+class BehaviorAdapterFactory:\n \n     def __init__(self, behavior):\n         self.behavior = behavior\ndiff --git a/plone/behavior/interfaces.py b/plone/behavior/interfaces.py\nindex e23c516..e08682a 100644\n--- a/plone/behavior/interfaces.py\n+++ b/plone/behavior/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope import schema\n from zope.interface import Interface\n from zope.interface.interfaces import IInterface\n@@ -29,41 +28,41 @@ class IBehavior(Interface):\n     """\n \n     title = schema.TextLine(\n-        title=u\'Short title of the behavior\',\n+        title=\'Short title of the behavior\',\n         required=True,\n     )\n \n     description = schema.Text(\n-        title=u\'Longer description of the behavior\',\n+        title=\'Longer description of the behavior\',\n         required=False,\n     )\n \n     name = schema.TextLine(\n-        title=u\'Readable short name to be used for behavior lookup\',\n-        description=u\'E.g. plone.somebehavior. If not given the full dotted \'\n-                    u\'name of the interfaces is used for lookup instead.\'\n-                    u\'Recommended, but due to BBB not required.\',\n+        title=\'Readable short name to be used for behavior lookup\',\n+        description=\'E.g. plone.somebehavior. If not given the full dotted \'\n+                    \'name of the interfaces is used for lookup instead.\'\n+                    \'Recommended, but due to BBB not required.\',\n         required=False,\n     )\n \n     interface = schema.Object(\n-        title=u\'Interface describing this behavior\',\n+        title=\'Interface describing this behavior\',\n         required=True,\n         schema=IInterface,\n     )\n \n     marker = schema.Object(\n-        title=u\'Marker interface for objects sporting this behavior\',\n-        description=u\'Markers are persisted in the ZODB. \'\n-                    u\'Required when a factory is given, because the factory \'\n-                    u\'is an adapter adapting the the marker and providing the \'\n-                    u\'"interface" of this behavior.\',\n+        title=\'Marker interface for objects sporting this behavior\',\n+        description=\'Markers are persisted in the ZODB. \'\n+                    \'Required when a factory is given, because the factory \'\n+                    \'is an adapter adapting the the marker and providing the \'\n+                    \'"interface" of this behavior.\',\n         required=False,\n         schema=IInterface,\n     )\n \n     factory = schema.Object(\n-        title=u\'An adapter factory for the behavior\',\n+        title=\'An adapter factory for the behavior\',\n         required=True,\n         schema=Interface,\n     )\n@@ -85,7 +84,7 @@ class IBehaviorAdapterFactory(Interface):\n     """\n \n     behavior = schema.Object(\n-        title=u\'The behavior this is a factory for\',\n+        title=\'The behavior this is a factory for\',\n         schema=IBehavior,\n     )\n \ndiff --git a/plone/behavior/markers.py b/plone/behavior/markers.py\nindex 19599b8..cd76bfd 100644\n--- a/plone/behavior/markers.py\n+++ b/plone/behavior/markers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.behavior.interfaces import IBehaviorAssignable\n from zope.interface import alsoProvides\n \ndiff --git a/plone/behavior/metaconfigure.py b/plone/behavior/metaconfigure.py\nindex e28a3cf..40f1809 100644\n--- a/plone/behavior/metaconfigure.py\n+++ b/plone/behavior/metaconfigure.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.behavior import logger\n from plone.behavior.factory import BehaviorAdapterFactory\n from plone.behavior.interfaces import IBehavior\n@@ -23,65 +22,65 @@ class IBehaviorDirective(Interface):\n     """\n \n     name = TextLine(\n-        title=u\'Name\',\n-        description=u\'Convenience lookup name for this behavior\',\n+        title=\'Name\',\n+        description=\'Convenience lookup name for this behavior\',\n         required=False,\n     )\n \n     title = configuration_fields.MessageID(\n-        title=u\'Title\',\n-        description=u\'A user friendly title for this behavior\',\n+        title=\'Title\',\n+        description=\'A user friendly title for this behavior\',\n         required=True,\n     )\n \n     description = configuration_fields.MessageID(\n-        title=u\'Description\',\n-        description=u\'A longer description for this behavior\',\n+        title=\'Description\',\n+        description=\'A longer description for this behavior\',\n         required=False,\n     )\n \n     provides = configuration_fields.GlobalInterface(\n-        title=u\'An interface to which the behavior can be adapted\',\n-        description=u\'This is what the conditional adapter factory will \'\n-                    u\'be registered as providing\',\n+        title=\'An interface to which the behavior can be adapted\',\n+        description=\'This is what the conditional adapter factory will \'\n+                    \'be registered as providing\',\n         required=True,\n     )\n \n     marker = configuration_fields.GlobalInterface(\n-        title=u\'A marker interface to be applied by the behavior\',\n-        description=u\'If factory is not given, then this is optional\',\n+        title=\'A marker interface to be applied by the behavior\',\n+        description=\'If factory is not given, then this is optional\',\n         required=False,\n     )\n \n     factory = configuration_fields.GlobalObject(\n-        title=u\'The factory for this behavior\',\n-        description=u\'If this is not given, the behavior is assumed to \'\n-                    u\'provide a marker interface\',\n+        title=\'The factory for this behavior\',\n+        description=\'If this is not given, the behavior is assumed to \'\n+                    \'provide a marker interface\',\n         required=False,\n     )\n \n     for_ = configuration_fields.GlobalObject(\n-        title=u\'The type of object to register the conditional adapter \'\n-              u\'factory for\',\n-        description=u\'This is optional - the default is to register the \'\n-                    u\'factory for zope.interface.Interface\',\n+        title=\'The type of object to register the conditional adapter \'\n+              \'factory for\',\n+        description=\'This is optional - the default is to register the \'\n+                    \'factory for zope.interface.Interface\',\n         required=False,\n     )\n \n     name_only = configuration_fields.Bool(\n-        title=u\'Do not register the behavior under the dotted path, but \'\n-              u\'only under the given name\',\n-        description=u\'Use this option to register a behavior for the same \'\n-                    u\'provides under a different name.\',\n+        title=\'Do not register the behavior under the dotted path, but \'\n+              \'only under the given name\',\n+        description=\'Use this option to register a behavior for the same \'\n+                    \'provides under a different name.\',\n         required=False,\n     )\n \n     former_dotted_names = TextLine(\n-        title=u\'Space-separated list of dotted names that this behavior was \'\n-              u\'formerly registered under\',\n-        description=u\'Use this field in case you change the dotted name, \'\n-                    u\'so that the current behavior can be looked up under \'\n-                    u\'its former name.\',\n+        title=\'Space-separated list of dotted names that this behavior was \'\n+              \'formerly registered under\',\n+        description=\'Use this field in case you change the dotted name, \'\n+                    \'so that the current behavior can be looked up under \'\n+                    \'its former name.\',\n         required=False,\n     )\n \n@@ -97,7 +96,7 @@ def _detect_for(factory, marker):\n         return adapts[0]\n     if len(adapts) > 1:\n         raise ConfigurationError(\n-            u\'The factory can not be declared as multi-adapter.\')\n+            \'The factory can not be declared as multi-adapter.\')\n     # down here it means len(adapts) < 1\n     if marker is not None:\n         # given we have a marker it is safe to register for the\n@@ -119,12 +118,12 @@ def behaviorDirective(_context, title, provides, name=None, description=None,\n \n     if marker is not None and factory is None and marker is not provides:\n         raise ConfigurationError(\n-            u\'You cannot specify a different \\\'marker\\\' and \\\'provides\\\' if \'\n-            u\'there is no adapter factory for the provided interface.\')\n+            \'You cannot specify a different \\\'marker\\\' and \\\'provides\\\' if \'\n+            \'there is no adapter factory for the provided interface.\')\n     if name_only and name is None:\n         raise ConfigurationError(\n-            u\'If you decide to only register by \\\'name\\\', a name must \'\n-            u\'be given.\')\n+            \'If you decide to only register by \\\'name\\\', a name must \'\n+            \'be given.\')\n \n     # Instantiate the real factory if it\'s the schema-aware type. We do\n     # this here so that the for_ interface may take this into account.\n@@ -168,8 +167,8 @@ def behaviorDirective(_context, title, provides, name=None, description=None,\n     if factory is None:\n         if for_ is not None:\n             logger.warn(\n-                u\'Specifying \\\'for\\\' in behavior \\\'{0}\\\' if no \\\'factory\\\' is \'\n-                u\'given has no effect and is superfluous.\'.format(title))\n+                \'Specifying \\\'for\\\' in behavior \\\'{}\\\' if no \\\'factory\\\' is \'\n+                \'given has no effect and is superfluous.\'.format(title))\n         # w/o factory we\'re done here: schema only behavior\n         return\n \ndiff --git a/plone/behavior/registration.py b/plone/behavior/registration.py\nindex ba18687..7c6d264 100644\n--- a/plone/behavior/registration.py\n+++ b/plone/behavior/registration.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.behavior import logger\n from plone.behavior.interfaces import IBehavior\n from zope.component import ComponentLookupError\n@@ -27,7 +26,7 @@\n \n \n @implementer(IBehavior)\n-class BehaviorRegistration(object):\n+class BehaviorRegistration:\n \n     def __init__(self, title, description, interface,\n                  marker, factory, name=None, former_dotted_names=\'\'):\n@@ -60,7 +59,7 @@ def __repr__(self):\n             ),\n             \'extra_info\': (\n                 self.former_dotted_names and\n-                \'\\n  former dotted names: {0}\'.format(self.former_dotted_names)\n+                f\'\\n  former dotted names: {self.former_dotted_names}\'\n             ),\n         }\n         return REGISTRATION_REPR.format(**info)\n@@ -96,8 +95,8 @@ def lookup_behavior_registration(\n             if name in behavior.former_dotted_names:\n                 if warn_about_fallback:\n                     logger.warn(\n-                        \'The dotted name "{0}" is deprecated. It has been \'\n-                        \'changed to "{1}"\'.format(\n+                        \'The dotted name "{}" is deprecated. It has been \'\n+                        \'changed to "{}"\'.format(\n                             name, behavior.interface.__identifier__, ))\n                 return behavior\n         raise BehaviorRegistrationNotFound(name)\ndiff --git a/plone/behavior/tests.py b/plone/behavior/tests.py\nindex fe2f254..9f37cce 100644\n--- a/plone/behavior/tests.py\n+++ b/plone/behavior/tests.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-from __future__ import print_function\n from zope import schema\n from zope.component import adapter\n from zope.interface import implementer\n@@ -18,7 +16,7 @@ class IAdapterBehavior(Interface):\n \n \n @implementer(IAdapterBehavior)\n-class AdapterBehavior(object):\n+class AdapterBehavior:\n     def __init__(self, context):\n         self.context = context\n \n@@ -29,7 +27,7 @@ class IRenamedAdapterBehavior(Interface):\n \n \n @implementer(IRenamedAdapterBehavior)\n-class RenamedAdapterBehavior(object):\n+class RenamedAdapterBehavior:\n     def __init__(self, context):\n         self.context = context\n \n@@ -40,7 +38,7 @@ class IRestrictedAdapterBehavior(Interface):\n \n \n @implementer(IRestrictedAdapterBehavior)\n-class RestrictedAdapterBehavior(object):\n+class RestrictedAdapterBehavior:\n     def __init__(self, context):\n         self.context = context\n \n@@ -60,7 +58,7 @@ class ISomeContext(Interface):\n \n @implementer(IImpliedRestrictionAdapterBehavior)\n @adapter(ISomeContext)\n-class ImpliedRestrictionAdapterBehavior(object):\n+class ImpliedRestrictionAdapterBehavior:\n \n     def __init__(self, context):\n         self.context = context\n@@ -78,7 +76,7 @@ class INameOnlyBehavior(Interface):\n \n # For test of the annotation factory\n class IAnnotationStored(Interface):\n-    some_field = schema.TextLine(title=u\'Some field\', default=u\'default value\')\n+    some_field = schema.TextLine(title=\'Some field\', default=\'default value\')\n \n \n # Behavior and marker\n@@ -98,7 +96,7 @@ class IMarkerAndAdapterMarker2(Interface):\n     pass\n \n \n-class DummyBehaviorImpl(object):\n+class DummyBehaviorImpl:\n \n     def __init__(self, context):\n         self.context = context\ndiff --git a/plone/behavior/vocab.py b/plone/behavior/vocab.py\nindex ffe7264..246d944 100644\n--- a/plone/behavior/vocab.py\n+++ b/plone/behavior/vocab.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.behavior.interfaces import IBehavior\n from zope.component import getUtilitiesFor\n from zope.interface import provider\n'

Repository: plone.behavior


Branch: refs/heads/master
Date: 2023-04-12T23:49:57+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.behavior/commit/3629714143f97dc62d1025cbd71f5fd7a16b19e3

run zpretty

Files changed:
M plone/behavior/configure.zcml
M plone/behavior/meta.zcml

b'diff --git a/plone/behavior/configure.zcml b/plone/behavior/configure.zcml\nindex 2788496..e6e0fc3 100644\n--- a/plone/behavior/configure.zcml\n+++ b/plone/behavior/configure.zcml\n@@ -1,10 +1,11 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone.behavior">\n+    i18n_domain="plone.behavior"\n+    >\n \n-    <utility\n-        component=".vocab.BehaviorsVocabularyFactory"\n-        name="Behaviors"\n-        />\n+  <utility\n+      name="Behaviors"\n+      component=".vocab.BehaviorsVocabularyFactory"\n+      />\n \n </configure>\ndiff --git a/plone/behavior/meta.zcml b/plone/behavior/meta.zcml\nindex d24311f..82a4d17 100644\n--- a/plone/behavior/meta.zcml\n+++ b/plone/behavior/meta.zcml\n@@ -1,15 +1,16 @@\n <configure\n     xmlns="http://namespaces.zope.org/meta"\n-    i18n_domain="plone.behavior">\n+    i18n_domain="plone.behavior"\n+    >\n \n-    <directives namespace="http://namespaces.plone.org/plone">\n+  <directives namespace="http://namespaces.plone.org/plone">\n \n-        <directive\n-            name="behavior"\n-            schema=".metaconfigure.IBehaviorDirective"\n-            handler=".metaconfigure.behaviorDirective"\n-            />\n+    <directive\n+        name="behavior"\n+        handler=".metaconfigure.behaviorDirective"\n+        schema=".metaconfigure.IBehaviorDirective"\n+        />\n \n-    </directives>\n+  </directives>\n \n </configure>\n'

Repository: plone.behavior


Branch: refs/heads/master
Date: 2023-04-12T23:49:58+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.behavior/commit/c2239357f7a0c5cc8fec8c0a27ed777c75b22cbd

run black

Files changed:
M plone/__init__.py
M plone/behavior/__init__.py
M plone/behavior/annotation.py
M plone/behavior/factory.py
M plone/behavior/interfaces.py
M plone/behavior/metaconfigure.py
M plone/behavior/registration.py
M plone/behavior/tests.py
M plone/behavior/vocab.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/behavior/__init__.py b/plone/behavior/__init__.py\nindex de93ce3..d5b6b70 100644\n--- a/plone/behavior/__init__.py\n+++ b/plone/behavior/__init__.py\n@@ -4,4 +4,4 @@\n import logging\n \n \n-logger = logging.getLogger(\'plone.behavior\')\n+logger = logging.getLogger("plone.behavior")\ndiff --git a/plone/behavior/annotation.py b/plone/behavior/annotation.py\nindex 4e6dc3a..ddacfab 100644\n--- a/plone/behavior/annotation.py\n+++ b/plone/behavior/annotation.py\n@@ -19,34 +19,33 @@ class AnnotationsFactoryImpl:\n     """\n \n     def __init__(self, context, schema):\n-        self.__dict__[\'schema\'] = schema\n-        self.__dict__[\'prefix\'] = schema.__identifier__ + \'.\'\n-        self.__dict__[\'annotations\'] = IAnnotations(context)\n+        self.__dict__["schema"] = schema\n+        self.__dict__["prefix"] = schema.__identifier__ + "."\n+        self.__dict__["annotations"] = IAnnotations(context)\n         alsoProvides(self, schema)\n \n     def __getattr__(self, name):\n-        if name not in self.__dict__[\'schema\']:\n+        if name not in self.__dict__["schema"]:\n             raise AttributeError(name)\n \n-        annotations = self.__dict__[\'annotations\']\n-        key_name = self.__dict__[\'prefix\'] + name\n+        annotations = self.__dict__["annotations"]\n+        key_name = self.__dict__["prefix"] + name\n         if key_name not in annotations:\n-            return self.__dict__[\'schema\'][name].missing_value\n+            return self.__dict__["schema"][name].missing_value\n \n         return annotations[key_name]\n \n     def __setattr__(self, name, value):\n-        if name not in self.__dict__[\'schema\']:\n+        if name not in self.__dict__["schema"]:\n             super().__setattr__(name, value)\n         else:\n-            prefixed_name = self.__dict__[\'prefix\'] + name\n-            self.__dict__[\'annotations\'][prefixed_name] = value\n+            prefixed_name = self.__dict__["prefix"] + name\n+            self.__dict__["annotations"][prefixed_name] = value\n \n \n @provider(ISchemaAwareFactory)\n class AnnotationStorage:\n-    """Behavior adapter factory class for storing data in annotations.\n-    """\n+    """Behavior adapter factory class for storing data in annotations."""\n \n     def __init__(self, schema):\n         self.schema = schema\ndiff --git a/plone/behavior/factory.py b/plone/behavior/factory.py\nindex 54e8ad2..76d84b3 100644\n--- a/plone/behavior/factory.py\n+++ b/plone/behavior/factory.py\n@@ -5,7 +5,6 @@\n \n @implementer(IBehaviorAdapterFactory)\n class BehaviorAdapterFactory:\n-\n     def __init__(self, behavior):\n         self.behavior = behavior\n \ndiff --git a/plone/behavior/interfaces.py b/plone/behavior/interfaces.py\nindex e08682a..ed993e6 100644\n--- a/plone/behavior/interfaces.py\n+++ b/plone/behavior/interfaces.py\n@@ -17,8 +17,7 @@ def supports(behavior_interface):\n         """\n \n     def enumerateBehaviors():\n-        """Return an iterable of all the IBehaviors supported by the context.\n-        """\n+        """Return an iterable of all the IBehaviors supported by the context."""\n \n \n class IBehavior(Interface):\n@@ -28,41 +27,41 @@ class IBehavior(Interface):\n     """\n \n     title = schema.TextLine(\n-        title=\'Short title of the behavior\',\n+        title="Short title of the behavior",\n         required=True,\n     )\n \n     description = schema.Text(\n-        title=\'Longer description of the behavior\',\n+        title="Longer description of the behavior",\n         required=False,\n     )\n \n     name = schema.TextLine(\n-        title=\'Readable short name to be used for behavior lookup\',\n-        description=\'E.g. plone.somebehavior. If not given the full dotted \'\n-                    \'name of the interfaces is used for lookup instead.\'\n-                    \'Recommended, but due to BBB not required.\',\n+        title="Readable short name to be used for behavior lookup",\n+        description="E.g. plone.somebehavior. If not given the full dotted "\n+        "name of the interfaces is used for lookup instead."\n+        "Recommended, but due to BBB not required.",\n         required=False,\n     )\n \n     interface = schema.Object(\n-        title=\'Interface describing this behavior\',\n+        title="Interface describing this behavior",\n         required=True,\n         schema=IInterface,\n     )\n \n     marker = schema.Object(\n-        title=\'Marker interface for objects sporting this behavior\',\n-        description=\'Markers are persisted in the ZODB. \'\n-                    \'Required when a factory is given, because the factory \'\n-                    \'is an adapter adapting the the marker and providing the \'\n-                    \'"interface" of this behavior.\',\n+        title="Marker interface for objects sporting this behavior",\n+        description="Markers are persisted in the ZODB. "\n+        "Required when a factory is given, because the factory "\n+        "is an adapter adapting the the marker and providing the "\n+        \'"interface" of this behavior.\',\n         required=False,\n         schema=IInterface,\n     )\n \n     factory = schema.Object(\n-        title=\'An adapter factory for the behavior\',\n+        title="An adapter factory for the behavior",\n         required=True,\n         schema=Interface,\n     )\n@@ -84,7 +83,7 @@ class IBehaviorAdapterFactory(Interface):\n     """\n \n     behavior = schema.Object(\n-        title=\'The behavior this is a factory for\',\n+        title="The behavior this is a factory for",\n         schema=IBehavior,\n     )\n \ndiff --git a/plone/behavior/metaconfigure.py b/plone/behavior/metaconfigure.py\nindex 40f1809..d0a8ce6 100644\n--- a/plone/behavior/metaconfigure.py\n+++ b/plone/behavior/metaconfigure.py\n@@ -22,81 +22,78 @@ class IBehaviorDirective(Interface):\n     """\n \n     name = TextLine(\n-        title=\'Name\',\n-        description=\'Convenience lookup name for this behavior\',\n+        title="Name",\n+        description="Convenience lookup name for this behavior",\n         required=False,\n     )\n \n     title = configuration_fields.MessageID(\n-        title=\'Title\',\n-        description=\'A user friendly title for this behavior\',\n+        title="Title",\n+        description="A user friendly title for this behavior",\n         required=True,\n     )\n \n     description = configuration_fields.MessageID(\n-        title=\'Description\',\n-        description=\'A longer description for this behavior\',\n+        title="Description",\n+        description="A longer description for this behavior",\n         required=False,\n     )\n \n     provides = configuration_fields.GlobalInterface(\n-        title=\'An interface to which the behavior can be adapted\',\n-        description=\'This is what the conditional adapter factory will \'\n-                    \'be registered as providing\',\n+        title="An interface to which the behavior can be adapted",\n+        description="This is what the conditional adapter factory will "\n+        "be registered as providing",\n         required=True,\n     )\n \n     marker = configuration_fields.GlobalInterface(\n-        title=\'A marker interface to be applied by the behavior\',\n-        description=\'If factory is not given, then this is optional\',\n+        title="A marker interface to be applied by the behavior",\n+        description="If factory is not given, then this is optional",\n         required=False,\n     )\n \n     factory = configuration_fields.GlobalObject(\n-        title=\'The factory for this behavior\',\n-        description=\'If this is not given, the behavior is assumed to \'\n-                    \'provide a marker interface\',\n+        title="The factory for this behavior",\n+        description="If this is not given, the behavior is assumed to "\n+        "provide a marker interface",\n         required=False,\n     )\n \n     for_ = configuration_fields.GlobalObject(\n-        title=\'The type of object to register the conditional adapter \'\n-              \'factory for\',\n-        description=\'This is optional - the default is to register the \'\n-                    \'factory for zope.interface.Interface\',\n+        title="The type of object to register the conditional adapter " "factory for",\n+        description="This is optional - the default is to register the "\n+        "factory for zope.interface.Interface",\n         required=False,\n     )\n \n     name_only = configuration_fields.Bool(\n-        title=\'Do not register the behavior under the dotted path, but \'\n-              \'only under the given name\',\n-        description=\'Use this option to register a behavior for the same \'\n-                    \'provides under a different name.\',\n+        title="Do not register the behavior under the dotted path, but "\n+        "only under the given name",\n+        description="Use this option to register a behavior for the same "\n+        "provides under a different name.",\n         required=False,\n     )\n \n     former_dotted_names = TextLine(\n-        title=\'Space-separated list of dotted names that this behavior was \'\n-              \'formerly registered under\',\n-        description=\'Use this field in case you change the dotted name, \'\n-                    \'so that the current behavior can be looked up under \'\n-                    \'its former name.\',\n+        title="Space-separated list of dotted names that this behavior was "\n+        "formerly registered under",\n+        description="Use this field in case you change the dotted name, "\n+        "so that the current behavior can be looked up under "\n+        "its former name.",\n         required=False,\n     )\n \n \n def _detect_for(factory, marker):\n-    """if no explicit for is given we need to figure it out.\n-    """\n+    """if no explicit for is given we need to figure it out."""\n     # Attempt to guess the factory\'s adapted interface and use it as\n     # the \'for_\'.\n     # at last bastion fallback to \'*\' (=Interface).\n-    adapts = getattr(factory, \'__component_adapts__\', [])\n+    adapts = getattr(factory, "__component_adapts__", [])\n     if len(adapts) == 1:\n         return adapts[0]\n     if len(adapts) > 1:\n-        raise ConfigurationError(\n-            \'The factory can not be declared as multi-adapter.\')\n+        raise ConfigurationError("The factory can not be declared as multi-adapter.")\n     # down here it means len(adapts) < 1\n     if marker is not None:\n         # given we have a marker it is safe to register for the\n@@ -106,10 +103,18 @@ def _detect_for(factory, marker):\n     return Interface\n \n \n-def behaviorDirective(_context, title, provides, name=None, description=None,\n-                      marker=None, factory=None, for_=None, name_only=False,\n-                      former_dotted_names=\'\'):\n-\n+def behaviorDirective(\n+    _context,\n+    title,\n+    provides,\n+    name=None,\n+    description=None,\n+    marker=None,\n+    factory=None,\n+    for_=None,\n+    name_only=False,\n+    former_dotted_names="",\n+):\n     if marker is None and factory is None:\n         # a schema only behavior means usually direct attribute settings on the\n         # object itself, so the object itself provides the interface.\n@@ -118,12 +123,13 @@ def behaviorDirective(_context, title, provides, name=None, description=None,\n \n     if marker is not None and factory is None and marker is not provides:\n         raise ConfigurationError(\n-            \'You cannot specify a different \\\'marker\\\' and \\\'provides\\\' if \'\n-            \'there is no adapter factory for the provided interface.\')\n+            "You cannot specify a different \'marker\' and \'provides\' if "\n+            "there is no adapter factory for the provided interface."\n+        )\n     if name_only and name is None:\n         raise ConfigurationError(\n-            \'If you decide to only register by \\\'name\\\', a name must \'\n-            \'be given.\')\n+            "If you decide to only register by \'name\', a name must " "be given."\n+        )\n \n     # Instantiate the real factory if it\'s the schema-aware type. We do\n     # this here so that the for_ interface may take this into account.\n@@ -167,8 +173,9 @@ def behaviorDirective(_context, title, provides, name=None, description=None,\n     if factory is None:\n         if for_ is not None:\n             logger.warn(\n-                \'Specifying \\\'for\\\' in behavior \\\'{}\\\' if no \\\'factory\\\' is \'\n-                \'given has no effect and is superfluous.\'.format(title))\n+                "Specifying \'for\' in behavior \'{}\' if no \'factory\' is "\n+                "given has no effect and is superfluous.".format(title)\n+            )\n         # w/o factory we\'re done here: schema only behavior\n         return\n \ndiff --git a/plone/behavior/registration.py b/plone/behavior/registration.py\nindex 7c6d264..4273286 100644\n--- a/plone/behavior/registration.py\n+++ b/plone/behavior/registration.py\n@@ -27,9 +27,16 @@\n \n @implementer(IBehavior)\n class BehaviorRegistration:\n-\n-    def __init__(self, title, description, interface,\n-                 marker, factory, name=None, former_dotted_names=\'\'):\n+    def __init__(\n+        self,\n+        title,\n+        description,\n+        interface,\n+        marker,\n+        factory,\n+        name=None,\n+        former_dotted_names="",\n+    ):\n         self.title = title\n         self.description = description\n         self.interface = interface\n@@ -42,36 +49,34 @@ def __repr__(self):\n         if self.marker is not None:\n             marker_info = self.marker.__identifier__\n         elif self.marker is not None and self.marker is not self.interface:\n-            marker_info = \'(uses schema as marker)\'\n+            marker_info = "(uses schema as marker)"\n         else:\n-            marker_info = \'(no marker is set)\'\n+            marker_info = "(no marker is set)"\n         info = {\n-            \'class\': self.__class__.__name__,\n-            \'id\': id(self),\n-            \'name\': self.name or \'(unique name not set)\',\n-            \'identifier\': self.interface.__identifier__,\n-            \'marker\': marker_info,\n-            \'factory\': text_type(self.factory),\n-            \'title\': self.title or \'(no title)\',\n-            \'description\': textwrap.fill(\n-                self.description or \'(no description)\',\n-                subsequent_indent=\'  \',\n+            "class": self.__class__.__name__,\n+            "id": id(self),\n+            "name": self.name or "(unique name not set)",\n+            "identifier": self.interface.__identifier__,\n+            "marker": marker_info,\n+            "factory": text_type(self.factory),\n+            "title": self.title or "(no title)",\n+            "description": textwrap.fill(\n+                self.description or "(no description)",\n+                subsequent_indent="  ",\n             ),\n-            \'extra_info\': (\n-                self.former_dotted_names and\n-                f\'\\n  former dotted names: {self.former_dotted_names}\'\n+            "extra_info": (\n+                self.former_dotted_names\n+                and f"\\n  former dotted names: {self.former_dotted_names}"\n             ),\n         }\n         return REGISTRATION_REPR.format(**info)\n \n \n class BehaviorRegistrationNotFound(Exception):\n-    """Exception thrown if behavior registration lookup fails.\n-    """\n+    """Exception thrown if behavior registration lookup fails."""\n \n \n-def lookup_behavior_registration(\n-        name=None, identifier=None, warn_about_fallback=True):\n+def lookup_behavior_registration(name=None, identifier=None, warn_about_fallback=True):\n     """Look up behavior registration either by name or interface identifier.\n        Fall back to checking the former_dotted_names if the lookup is not\n        successful.\n@@ -80,9 +85,9 @@ def lookup_behavior_registration(\n     ``BehaviorRegistrationNotFound`` is thrown if lookup fails.\n     """\n     try:\n-        assert(name or identifier)\n+        assert name or identifier\n     except AssertionError:\n-        raise ValueError(\'Either ``name`` or ``identifier`` must be given\')\n+        raise ValueError("Either ``name`` or ``identifier`` must be given")\n     # identifier rules if given\n     if identifier:\n         name = identifier\n@@ -97,6 +102,9 @@ def lookup_behavior_registration(\n                     logger.warn(\n                         \'The dotted name "{}" is deprecated. It has been \'\n                         \'changed to "{}"\'.format(\n-                            name, behavior.interface.__identifier__, ))\n+                            name,\n+                            behavior.interface.__identifier__,\n+                        )\n+                    )\n                 return behavior\n         raise BehaviorRegistrationNotFound(name)\ndiff --git a/plone/behavior/tests.py b/plone/behavior/tests.py\nindex 9f37cce..3217440 100644\n--- a/plone/behavior/tests.py\n+++ b/plone/behavior/tests.py\n@@ -59,7 +59,6 @@ class ISomeContext(Interface):\n @implementer(IImpliedRestrictionAdapterBehavior)\n @adapter(ISomeContext)\n class ImpliedRestrictionAdapterBehavior:\n-\n     def __init__(self, context):\n         self.context = context\n \n@@ -76,7 +75,7 @@ class INameOnlyBehavior(Interface):\n \n # For test of the annotation factory\n class IAnnotationStored(Interface):\n-    some_field = schema.TextLine(title=\'Some field\', default=\'default value\')\n+    some_field = schema.TextLine(title="Some field", default="default value")\n \n \n # Behavior and marker\n@@ -97,7 +96,6 @@ class IMarkerAndAdapterMarker2(Interface):\n \n \n class DummyBehaviorImpl:\n-\n     def __init__(self, context):\n         self.context = context\n \n@@ -108,32 +106,35 @@ def check_output(self, want, got, optionflags):\n             want = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n             want = re.sub(\'u"(.*?)"\', \'"\\\\1"\', want)\n             got = re.sub(\n-                \'plone.behavior.registration.BehaviorRegistrationNotFound\',\n-                \'BehaviorRegistrationNotFound\', got)\n+                "plone.behavior.registration.BehaviorRegistrationNotFound",\n+                "BehaviorRegistrationNotFound",\n+                got,\n+            )\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \n def test_suite():\n-    return unittest.TestSuite((\n-\n-        doctest.DocFileSuite(\n-            \'behaviors.rst\',\n-            tearDown=zope.component.testing.tearDown,\n-            globs={\n-                \'print_function\': print_function,\n-            },\n-            checker=Py23DocChecker(),\n-        ),\n-        doctest.DocFileSuite(\n-            \'directives.rst\',\n-            setUp=zope.component.testing.setUp,\n-            tearDown=zope.component.testing.tearDown,\n-            checker=Py23DocChecker(),\n-        ),\n-        doctest.DocFileSuite(\n-            \'annotation.rst\',\n-            setUp=zope.component.testing.setUp,\n-            tearDown=zope.component.testing.tearDown,\n-            checker=Py23DocChecker(),\n-        ),\n-    ))\n+    return unittest.TestSuite(\n+        (\n+            doctest.DocFileSuite(\n+                "behaviors.rst",\n+                tearDown=zope.component.testing.tearDown,\n+                globs={\n+                    "print_function": print_function,\n+                },\n+                checker=Py23DocChecker(),\n+            ),\n+            doctest.DocFileSuite(\n+                "directives.rst",\n+                setUp=zope.component.testing.setUp,\n+                tearDown=zope.component.testing.tearDown,\n+                checker=Py23DocChecker(),\n+            ),\n+            doctest.DocFileSuite(\n+                "annotation.rst",\n+                setUp=zope.component.testing.setUp,\n+                tearDown=zope.component.testing.tearDown,\n+                checker=Py23DocChecker(),\n+            ),\n+        )\n+    )\ndiff --git a/plone/behavior/vocab.py b/plone/behavior/vocab.py\nindex 246d944..ef01a32 100644\n--- a/plone/behavior/vocab.py\n+++ b/plone/behavior/vocab.py\n@@ -8,7 +8,5 @@\n @provider(IVocabularyFactory)\n def BehaviorsVocabularyFactory(context):\n     behaviors = getUtilitiesFor(IBehavior)\n-    items = [\n-        (reg.title, reg.interface.__identifier__) for (title, reg) in behaviors\n-    ]\n+    items = [(reg.title, reg.interface.__identifier__) for (title, reg) in behaviors]\n     return SimpleVocabulary.fromItems(items)\ndiff --git a/setup.py b/setup.py\nindex ab17791..9e2577f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,17 +2,17 @@\n from setuptools import setup\n \n \n-version = \'1.4.1.dev0\'\n+version = "1.4.1.dev0"\n desc = "Infrastructure for maintaining a registry of available behaviors"\n doc_files = [\n     "README.rst",\n     "CHANGES.rst",\n ]\n-longdesc = \'\\n\'.join([open(_).read() for _ in doc_files])\n+longdesc = "\\n".join([open(_).read() for _ in doc_files])\n \n \n setup(\n-    name=\'plone.behavior\',\n+    name="plone.behavior",\n     version=version,\n     description=desc,\n     long_description=longdesc,\n@@ -32,26 +32,26 @@\n         "Topic :: Software Development :: Libraries :: Python Modules",\n         "License :: OSI Approved :: BSD License",\n     ],\n-    keywords=\'Plone behavior registry\',\n-    author=\'Martin Aspeli\',\n-    author_email=\'optilude@gmail.com\',\n-    url=\'https://pypi.org/project/plone.behavior\',\n-    license=\'BSD\',\n+    keywords="Plone behavior registry",\n+    author="Martin Aspeli",\n+    author_email="optilude@gmail.com",\n+    url="https://pypi.org/project/plone.behavior",\n+    license="BSD",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'setuptools\',\n-        \'zope.annotation\',\n-        \'zope.component\',\n-        \'zope.configuration\',\n-        \'zope.interface\',\n-        \'zope.schema\',\n+        "setuptools",\n+        "zope.annotation",\n+        "zope.component",\n+        "zope.configuration",\n+        "zope.interface",\n+        "zope.schema",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'zope.lifecycleevent\',\n+        "test": [\n+            "zope.lifecycleevent",\n         ],\n     },\n     entry_points="""\n'

Repository: plone.behavior


Branch: refs/heads/master
Date: 2023-04-12T23:49:58+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.behavior/commit/8c89e4b399c48997e88e1362ad9e2b779c4e386c

fix metadata and bump version

(cherry picked from commit 3c8040405334367e21e7c3d206a6b35c4943f10e)

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 9e2577f..e79b5c1 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = "1.4.1.dev0"\n+version = "2.0.0.dev0"\n desc = "Infrastructure for maintaining a registry of available behaviors"\n doc_files = [\n     "README.rst",\n@@ -20,27 +20,28 @@\n     classifiers=[\n         "Development Status :: 6 - Mature",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.5",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n         "License :: OSI Approved :: BSD License",\n     ],\n     keywords="Plone behavior registry",\n     author="Martin Aspeli",\n     author_email="optilude@gmail.com",\n-    url="https://pypi.org/project/plone.behavior",\n+    maintainer="Plone Foundation - Release Team",\n+    maintainer_email="releaseteam@plone.org",\n+    url="https://github.com/plone/plone.behavior",\n     license="BSD",\n     packages=find_packages(),\n     namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n         "setuptools",\n         "zope.annotation",\n'

Repository: plone.behavior


Branch: refs/heads/master
Date: 2023-04-12T23:49:58+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.behavior/commit/61c8a7576c4782f0506aaa1f0c344cf0d9ee03f7

upgrade doctests to py3 only

Files changed:
M plone/behavior/annotation.rst
M plone/behavior/directives.rst
M plone/behavior/registration.py
M plone/behavior/tests.py

b'diff --git a/plone/behavior/annotation.rst b/plone/behavior/annotation.rst\nindex b6a40c7..16c12d9 100644\n--- a/plone/behavior/annotation.rst\n+++ b/plone/behavior/annotation.rst\n@@ -94,14 +94,14 @@ Let\'s look at the annotations also::\n \n If we now set the value, it will be stored in annotations::\n \n-    >>> adapted.some_field = u\'New value\'\n+    >>> adapted.some_field = \'New value\'\n     >>> sorted(IAnnotations(context).items())\n-    [(\'plone.behavior.tests.IAnnotationStored.some_field\', u\'New value\')]\n+    [(\'plone.behavior.tests.IAnnotationStored.some_field\', \'New value\')]\n \n And of course we can get it back again::\n \n     >>> adapted.some_field\n-    u\'New value\'\n+    \'New value\'\n \n If we try to get some other field, we get an AttributeError::\n \ndiff --git a/plone/behavior/directives.rst b/plone/behavior/directives.rst\nindex 9c52829..99390cb 100644\n--- a/plone/behavior/directives.rst\n+++ b/plone/behavior/directives.rst\n@@ -154,13 +154,13 @@ for any context.\n \n     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IAdapterBehavior")\n     >>> dummy.name\n-    u\'adapter_behavior\'\n+    \'adapter_behavior\'\n \n     >>> dummy.title\n-    u\'Adapter behavior\'\n+    \'Adapter behavior\'\n \n     >>> dummy.description\n-    u\'A basic adapter behavior\'\n+    \'A basic adapter behavior\'\n \n     >>> dummy.interface\n     <InterfaceClass plone.behavior.tests.IAdapterBehavior>\n@@ -179,10 +179,10 @@ for any context.\n \n     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IRestrictedAdapterBehavior")\n     >>> dummy.name\n-    u\'context_restricted_behavior\'\n+    \'context_restricted_behavior\'\n \n     >>> dummy.title\n-    u\'Context restricted behavior\'\n+    \'Context restricted behavior\'\n \n     >>> dummy.description is None\n     True\n@@ -205,10 +205,10 @@ declaration on the factory.\n \n     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IImpliedRestrictionAdapterBehavior")\n     >>> dummy.name\n-    u\'factory_implied_context_restricted_behavior\'\n+    \'factory_implied_context_restricted_behavior\'\n \n     >>> dummy.title\n-    u\'Factory-implied context restricted behavior\'\n+    \'Factory-implied context restricted behavior\'\n \n     >>> dummy.description is None\n     True\n@@ -230,10 +230,10 @@ declaration on the factory.\n \n     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IMarkerBehavior")\n     >>> dummy.name\n-    u\'marker_interface_behavior\'\n+    \'marker_interface_behavior\'\n \n     >>> dummy.title\n-    u\'Marker interface behavior\'\n+    \'Marker interface behavior\'\n \n     >>> dummy.description is None\n     True\n@@ -255,10 +255,10 @@ declaration on the factory.\n \n     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IAnnotationStored")\n     >>> dummy.name\n-    u\'annotation_storage_behavior\'\n+    \'annotation_storage_behavior\'\n \n     >>> dummy.title\n-    u\'Annotation storage behavior\'\n+    \'Annotation storage behavior\'\n \n     >>> dummy.description is None\n     True\n@@ -282,10 +282,10 @@ declaration on the factory.\n \n     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IMarkerAndAdapterBehavior")\n     >>> dummy.name\n-    u\'marker_and_adapter\'\n+    \'marker_and_adapter\'\n \n     >>> dummy.title\n-    u\'Marker and adapter\'\n+    \'Marker and adapter\'\n \n     >>> dummy.description is None\n     True\n@@ -310,10 +310,10 @@ declaration on the factory.\n \n     >>> dummy = getUtility(IBehavior, name=u"marker_and_adapter_no_atadapter")\n     >>> dummy.name\n-    u\'marker_and_adapter_no_atadapter\'\n+    \'marker_and_adapter_no_atadapter\'\n \n     >>> dummy.title\n-    u\'Marker and adapter no @adapter\'\n+    \'Marker and adapter no @adapter\'\n \n     >>> dummy.description is None\n     True\n@@ -347,13 +347,13 @@ declaration on the factory.\n \n     >>> dummy = getUtility(IBehavior, name=u"name_only")\n     >>> dummy.name\n-    u\'name_only\'\n+    \'name_only\'\n \n 8) A behavior that used to be known under a different dotted name\n \n     A behavior that has been renamed, can of course be found under the new name.\n     The representation tells us the former dotted name.\n-    \n+\n     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IRenamedAdapterBehavior")\n     >>> dummy  # doctest: +ELLIPSIS\n     <BehaviorRegistration renamed_adapter_behavior at ...\n@@ -376,7 +376,7 @@ Test registration lookup helper utility.\n     >>> lookup_behavior_registration(\'inexistent\')\n     Traceback (most recent call last):\n       ...\n-    BehaviorRegistrationNotFound: inexistent\n+    plone.behavior.registration.BehaviorRegistrationNotFound: inexistent\n \n     >>> lookup_behavior_registration(\'adapter_behavior\')  # doctest: +ELLIPSIS\n     <BehaviorRegistration adapter_behavior at ...\n@@ -399,7 +399,7 @@ Test registration lookup helper utility.\n     >\n \n     A lookup via getUtility for a former behavior name fails.\n-    \n+\n     >>> failed = False\n     >>> try:\n     ...     dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IOriginalAdapterBehavior")\n@@ -409,7 +409,7 @@ Test registration lookup helper utility.\n     True\n \n     But the lookup helper still finds it under the former name.\n-    \n+\n     >>> dummy = lookup_behavior_registration("plone.behavior.tests.IOriginalAdapterBehavior")\n     >>> dummy.name\n-    u\'renamed_adapter_behavior\'\n+    \'renamed_adapter_behavior\'\ndiff --git a/plone/behavior/registration.py b/plone/behavior/registration.py\nindex 4273286..3f546d8 100644\n--- a/plone/behavior/registration.py\n+++ b/plone/behavior/registration.py\n@@ -99,7 +99,7 @@ def lookup_behavior_registration(name=None, identifier=None, warn_about_fallback\n             # if the requested name is registered as a former dotted name.\n             if name in behavior.former_dotted_names:\n                 if warn_about_fallback:\n-                    logger.warn(\n+                    logger.warning(\n                         \'The dotted name "{}" is deprecated. It has been \'\n                         \'changed to "{}"\'.format(\n                             name,\ndiff --git a/plone/behavior/tests.py b/plone/behavior/tests.py\nindex 3217440..c0620d6 100644\n--- a/plone/behavior/tests.py\n+++ b/plone/behavior/tests.py\n@@ -4,8 +4,6 @@\n from zope.interface import Interface\n \n import doctest\n-import re\n-import sys\n import unittest\n import zope.component.testing\n \n@@ -100,41 +98,26 @@ def __init__(self, context):\n         self.context = context\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if sys.version_info[0] > 2:\n-            want = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n-            want = re.sub(\'u"(.*?)"\', \'"\\\\1"\', want)\n-            got = re.sub(\n-                "plone.behavior.registration.BehaviorRegistrationNotFound",\n-                "BehaviorRegistrationNotFound",\n-                got,\n-            )\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     return unittest.TestSuite(\n         (\n             doctest.DocFileSuite(\n                 "behaviors.rst",\n+                setUp=zope.component.testing.setUp,\n                 tearDown=zope.component.testing.tearDown,\n                 globs={\n-                    "print_function": print_function,\n+                    "print_function": print,\n                 },\n-                checker=Py23DocChecker(),\n             ),\n             doctest.DocFileSuite(\n                 "directives.rst",\n                 setUp=zope.component.testing.setUp,\n                 tearDown=zope.component.testing.tearDown,\n-                checker=Py23DocChecker(),\n             ),\n             doctest.DocFileSuite(\n                 "annotation.rst",\n                 setUp=zope.component.testing.setUp,\n                 tearDown=zope.component.testing.tearDown,\n-                checker=Py23DocChecker(),\n             ),\n         )\n     )\n'

Repository: plone.behavior


Branch: refs/heads/master
Date: 2023-04-12T23:49:58+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.behavior/commit/ad4de544419b253d0792c92dca8d7fb0b6358c30

fix codespell findings.

Files changed:
M CHANGES.rst
M README.rst
M plone/behavior/directives.rst
M plone/behavior/registration.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 00c7d80..ac67b8b 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -50,7 +50,7 @@ New features:\n \n \n - New option ``former_dotted_names`` that allows to register the former name\n-  under which a behavior used to be registerd. This can be useful to ensure a\n+  under which a behavior used to be registered. This can be useful to ensure a\n   smooth transition in case a behavior\'s dotted name is changed. [pysailor]\n   (#18)\n \ndiff --git a/README.rst b/README.rst\nindex 07db01b..52816ff 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -147,7 +147,7 @@ The directive supports the attributes:\n ``name``\n     Convenience lookup name for this behavior (optional).\n     The behavior will be always registered under the dotted name of ``provides`` attribute.\n-    This are usally long names. ``name`` is a short name for this.\n+    This are usually long names. ``name`` is a short name for this.\n     If ``name`` is given the behavior is registered additional under it.\n     Anyway using short namespaces in ``name`` is recommended.\n \n@@ -189,13 +189,13 @@ ZCML Examples\n \n Example usage, given\n \n-- some ``context`` (some arbitary object) which is ``IBehaviorAssignable``,\n-- an ``IMyBehavior`` interface intented to be used as ``provides``,\n-- an ``IMyMarker`` interface intented to be used as ``marker``,\n+- some ``context`` (some arbitrary object) which is ``IBehaviorAssignable``,\n+- an ``IMyBehavior`` interface intended to be used as ``provides``,\n+- an ``IMyMarker`` interface intended to be used as ``marker``,\n - a ``MyFactory`` class implementing ``IMyBehavior`` ,\n - a ``MySchemaAwareFactory`` class implementing ``IMyBehavior`` and ``plone.behavior.interfaces.ISchemaAwareFactory``,\n-- an ``IMyType`` intented to be used as ``for``.\n-- some ``typed_context`` (some arbitary object) which is ``IBehaviorAssignable`` and provides ``IMyType``,\n+- an ``IMyType`` intended to be used as ``for``.\n+- some ``typed_context`` (some arbitrary object) which is ``IBehaviorAssignable`` and provides ``IMyType``,\n - an ``MyTypedFactory`` class implementing ``IMyBehavior`` and adapting ``IMyType``,\n \n ``title`` and ``description`` is trivial, so we dont cover it here in the explanantion.\n@@ -220,7 +220,7 @@ I.e. both is done by ``plone.dexterity``.\n .. warning::\n    Using the same Interface as marker and behavior works, but is not recommended and will be deprecated in future.\n    It is semantically wrong!\n-   \n+\n    Go for Example 3 instead!\n \n ::\ndiff --git a/plone/behavior/directives.rst b/plone/behavior/directives.rst\nindex 99390cb..054bf2b 100644\n--- a/plone/behavior/directives.rst\n+++ b/plone/behavior/directives.rst\n@@ -299,7 +299,7 @@ declaration on the factory.\n     >>> dummy.factory # doctest: +ELLIPSIS\n     <plone.behavior.annotation.AnnotationStorage object at ...>\n \n-    The factory has ist ``__component_adapts__`` (``@adapter``) in place, so the adapted Interface must be returned.\n+    The factory has it\'s ``__component_adapts__`` (``@adapter``) in place, so the adapted Interface must be returned.\n \n     >>> from plone.behavior.tests import IMarkerAndAdapterBehavior\n     >>> [a.required for a in sm.registeredAdapters() if a.provided == IMarkerAndAdapterBehavior][0]\n@@ -327,7 +327,7 @@ declaration on the factory.\n     >>> dummy.factory # doctest: +ELLIPSIS\n     <class \'plone.behavior.tests.DummyBehaviorImpl\'>\n \n-    The factory has ist ``__component_adapts__`` (``@adapter``) in place, so the adapted Interface must be returned.\n+    The factory has it\'s ``__component_adapts__`` (``@adapter``) in place, so the adapted Interface must be returned.\n \n     >>> from plone.behavior.tests import IMarkerAndAdapterBehavior2\n     >>> [a.required for a in sm.registeredAdapters() if a.provided == IMarkerAndAdapterBehavior2][0]\ndiff --git a/plone/behavior/registration.py b/plone/behavior/registration.py\nindex 3f546d8..3b68fa2 100644\n--- a/plone/behavior/registration.py\n+++ b/plone/behavior/registration.py\n@@ -5,16 +5,9 @@\n from zope.component import getUtility\n from zope.interface import implementer\n \n-import sys\n import textwrap\n \n \n-if sys.version_info[0] >= 3:\n-    text_type = str\n-else:\n-    text_type = unicode\n-\n-\n REGISTRATION_REPR = """\\\n <{class} {name} at {id}\n   schema: {identifier}\n@@ -58,7 +51,7 @@ def __repr__(self):\n             "name": self.name or "(unique name not set)",\n             "identifier": self.interface.__identifier__,\n             "marker": marker_info,\n-            "factory": text_type(self.factory),\n+            "factory": str(self.factory),\n             "title": self.title or "(no title)",\n             "description": textwrap.fill(\n                 self.description or "(no description)",\n'

Repository: plone.behavior


Branch: refs/heads/master
Date: 2023-04-13T08:58:30+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.behavior/commit/89731e1ac8c1142e269797a72419db626055b9b8

Merge pull request #24 from plone/config-with-default-template-3f6d9cbf

Config with default template 3f6d9cbf

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/a9dd65cc.internal
M CHANGES.rst
M README.rst
M plone/__init__.py
M plone/behavior/__init__.py
M plone/behavior/annotation.py
M plone/behavior/annotation.rst
M plone/behavior/configure.zcml
M plone/behavior/directives.rst
M plone/behavior/factory.py
M plone/behavior/interfaces.py
M plone/behavior/markers.py
M plone/behavior/meta.zcml
M plone/behavior/metaconfigure.py
M plone/behavior/registration.py
M plone/behavior/tests.py
M plone/behavior/vocab.py
M pyproject.toml
M setup.cfg
M setup.py
M tox.ini
D .travis.yml

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..a774e20\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "a9dd65cc"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/.travis.yml b/.travis.yml\ndeleted file mode 100644\nindex fdc68c2..0000000\n--- a/.travis.yml\n+++ /dev/null\n@@ -1,13 +0,0 @@\n-language: python\n-python:\n-    - 2.7\n-    - 3.5\n-    - 3.6\n-    - 3.7\n-    - 3.8\n-install:\n-    - pip install tox-travis\n-script:\n-    - tox\n-notifications:\n-    email: false\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 00c7d80..ac67b8b 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -50,7 +50,7 @@ New features:\n \n \n - New option ``former_dotted_names`` that allows to register the former name\n-  under which a behavior used to be registerd. This can be useful to ensure a\n+  under which a behavior used to be registered. This can be useful to ensure a\n   smooth transition in case a behavior\'s dotted name is changed. [pysailor]\n   (#18)\n \ndiff --git a/README.rst b/README.rst\nindex 07db01b..52816ff 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -147,7 +147,7 @@ The directive supports the attributes:\n ``name``\n     Convenience lookup name for this behavior (optional).\n     The behavior will be always registered under the dotted name of ``provides`` attribute.\n-    This are usally long names. ``name`` is a short name for this.\n+    This are usually long names. ``name`` is a short name for this.\n     If ``name`` is given the behavior is registered additional under it.\n     Anyway using short namespaces in ``name`` is recommended.\n \n@@ -189,13 +189,13 @@ ZCML Examples\n \n Example usage, given\n \n-- some ``context`` (some arbitary object) which is ``IBehaviorAssignable``,\n-- an ``IMyBehavior`` interface intented to be used as ``provides``,\n-- an ``IMyMarker`` interface intented to be used as ``marker``,\n+- some ``context`` (some arbitrary object) which is ``IBehaviorAssignable``,\n+- an ``IMyBehavior`` interface intended to be used as ``provides``,\n+- an ``IMyMarker`` interface intended to be used as ``marker``,\n - a ``MyFactory`` class implementing ``IMyBehavior`` ,\n - a ``MySchemaAwareFactory`` class implementing ``IMyBehavior`` and ``plone.behavior.interfaces.ISchemaAwareFactory``,\n-- an ``IMyType`` intented to be used as ``for``.\n-- some ``typed_context`` (some arbitary object) which is ``IBehaviorAssignable`` and provides ``IMyType``,\n+- an ``IMyType`` intended to be used as ``for``.\n+- some ``typed_context`` (some arbitrary object) which is ``IBehaviorAssignable`` and provides ``IMyType``,\n - an ``MyTypedFactory`` class implementing ``IMyBehavior`` and adapting ``IMyType``,\n \n ``title`` and ``description`` is trivial, so we dont cover it here in the explanantion.\n@@ -220,7 +220,7 @@ I.e. both is done by ``plone.dexterity``.\n .. warning::\n    Using the same Interface as marker and behavior works, but is not recommended and will be deprecated in future.\n    It is semantically wrong!\n-   \n+\n    Go for Example 3 instead!\n \n ::\ndiff --git a/news/a9dd65cc.internal b/news/a9dd65cc.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/a9dd65cc.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/behavior/__init__.py b/plone/behavior/__init__.py\nindex 9207b39..d5b6b70 100644\n--- a/plone/behavior/__init__.py\n+++ b/plone/behavior/__init__.py\n@@ -1,8 +1,7 @@\n-# -*- coding: utf-8 -*-\n # Convenience import\n from plone.behavior.annotation import AnnotationStorage  # noqa\n \n import logging\n \n \n-logger = logging.getLogger(\'plone.behavior\')\n+logger = logging.getLogger("plone.behavior")\ndiff --git a/plone/behavior/annotation.py b/plone/behavior/annotation.py\nindex a496348..ddacfab 100644\n--- a/plone/behavior/annotation.py\n+++ b/plone/behavior/annotation.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.behavior.interfaces import ISchemaAwareFactory\n from zope.annotation.interfaces import IAnnotatable\n from zope.annotation.interfaces import IAnnotations\n@@ -8,7 +7,7 @@\n \n \n @adapter(IAnnotatable)\n-class AnnotationsFactoryImpl(object):\n+class AnnotationsFactoryImpl:\n     """A factory that knows how to store data in annotations.\n \n     Each value will be stored as a primitive in the annotations under a key\n@@ -20,34 +19,33 @@ class AnnotationsFactoryImpl(object):\n     """\n \n     def __init__(self, context, schema):\n-        self.__dict__[\'schema\'] = schema\n-        self.__dict__[\'prefix\'] = schema.__identifier__ + \'.\'\n-        self.__dict__[\'annotations\'] = IAnnotations(context)\n+        self.__dict__["schema"] = schema\n+        self.__dict__["prefix"] = schema.__identifier__ + "."\n+        self.__dict__["annotations"] = IAnnotations(context)\n         alsoProvides(self, schema)\n \n     def __getattr__(self, name):\n-        if name not in self.__dict__[\'schema\']:\n+        if name not in self.__dict__["schema"]:\n             raise AttributeError(name)\n \n-        annotations = self.__dict__[\'annotations\']\n-        key_name = self.__dict__[\'prefix\'] + name\n+        annotations = self.__dict__["annotations"]\n+        key_name = self.__dict__["prefix"] + name\n         if key_name not in annotations:\n-            return self.__dict__[\'schema\'][name].missing_value\n+            return self.__dict__["schema"][name].missing_value\n \n         return annotations[key_name]\n \n     def __setattr__(self, name, value):\n-        if name not in self.__dict__[\'schema\']:\n-            super(AnnotationsFactoryImpl, self).__setattr__(name, value)\n+        if name not in self.__dict__["schema"]:\n+            super().__setattr__(name, value)\n         else:\n-            prefixed_name = self.__dict__[\'prefix\'] + name\n-            self.__dict__[\'annotations\'][prefixed_name] = value\n+            prefixed_name = self.__dict__["prefix"] + name\n+            self.__dict__["annotations"][prefixed_name] = value\n \n \n @provider(ISchemaAwareFactory)\n-class AnnotationStorage(object):\n-    """Behavior adapter factory class for storing data in annotations.\n-    """\n+class AnnotationStorage:\n+    """Behavior adapter factory class for storing data in annotations."""\n \n     def __init__(self, schema):\n         self.schema = schema\ndiff --git a/plone/behavior/annotation.rst b/plone/behavior/annotation.rst\nindex b6a40c7..16c12d9 100644\n--- a/plone/behavior/annotation.rst\n+++ b/plone/behavior/annotation.rst\n@@ -94,14 +94,14 @@ Let\'s look at the annotations also::\n \n If we now set the value, it will be stored in annotations::\n \n-    >>> adapted.some_field = u\'New value\'\n+    >>> adapted.some_field = \'New value\'\n     >>> sorted(IAnnotations(context).items())\n-    [(\'plone.behavior.tests.IAnnotationStored.some_field\', u\'New value\')]\n+    [(\'plone.behavior.tests.IAnnotationStored.some_field\', \'New value\')]\n \n And of course we can get it back again::\n \n     >>> adapted.some_field\n-    u\'New value\'\n+    \'New value\'\n \n If we try to get some other field, we get an AttributeError::\n \ndiff --git a/plone/behavior/configure.zcml b/plone/behavior/configure.zcml\nindex 2788496..e6e0fc3 100644\n--- a/plone/behavior/configure.zcml\n+++ b/plone/behavior/configure.zcml\n@@ -1,10 +1,11 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone.behavior">\n+    i18n_domain="plone.behavior"\n+    >\n \n-    <utility\n-        component=".vocab.BehaviorsVocabularyFactory"\n-        name="Behaviors"\n-        />\n+  <utility\n+      name="Behaviors"\n+      component=".vocab.BehaviorsVocabularyFactory"\n+      />\n \n </configure>\ndiff --git a/plone/behavior/directives.rst b/plone/behavior/directives.rst\nindex 9c52829..054bf2b 100644\n--- a/plone/behavior/directives.rst\n+++ b/plone/behavior/directives.rst\n@@ -154,13 +154,13 @@ for any context.\n \n     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IAdapterBehavior")\n     >>> dummy.name\n-    u\'adapter_behavior\'\n+    \'adapter_behavior\'\n \n     >>> dummy.title\n-    u\'Adapter behavior\'\n+    \'Adapter behavior\'\n \n     >>> dummy.description\n-    u\'A basic adapter behavior\'\n+    \'A basic adapter behavior\'\n \n     >>> dummy.interface\n     <InterfaceClass plone.behavior.tests.IAdapterBehavior>\n@@ -179,10 +179,10 @@ for any context.\n \n     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IRestrictedAdapterBehavior")\n     >>> dummy.name\n-    u\'context_restricted_behavior\'\n+    \'context_restricted_behavior\'\n \n     >>> dummy.title\n-    u\'Context restricted behavior\'\n+    \'Context restricted behavior\'\n \n     >>> dummy.description is None\n     True\n@@ -205,10 +205,10 @@ declaration on the factory.\n \n     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IImpliedRestrictionAdapterBehavior")\n     >>> dummy.name\n-    u\'factory_implied_context_restricted_behavior\'\n+    \'factory_implied_context_restricted_behavior\'\n \n     >>> dummy.title\n-    u\'Factory-implied context restricted behavior\'\n+    \'Factory-implied context restricted behavior\'\n \n     >>> dummy.description is None\n     True\n@@ -230,10 +230,10 @@ declaration on the factory.\n \n     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IMarkerBehavior")\n     >>> dummy.name\n-    u\'marker_interface_behavior\'\n+    \'marker_interface_behavior\'\n \n     >>> dummy.title\n-    u\'Marker interface behavior\'\n+    \'Marker interface behavior\'\n \n     >>> dummy.description is None\n     True\n@@ -255,10 +255,10 @@ declaration on the factory.\n \n     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IAnnotationStored")\n     >>> dummy.name\n-    u\'annotation_storage_behavior\'\n+    \'annotation_storage_behavior\'\n \n     >>> dummy.title\n-    u\'Annotation storage behavior\'\n+    \'Annotation storage behavior\'\n \n     >>> dummy.description is None\n     True\n@@ -282,10 +282,10 @@ declaration on the factory.\n \n     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IMarkerAndAdapterBehavior")\n     >>> dummy.name\n-    u\'marker_and_adapter\'\n+    \'marker_and_adapter\'\n \n     >>> dummy.title\n-    u\'Marker and adapter\'\n+    \'Marker and adapter\'\n \n     >>> dummy.description is None\n     True\n@@ -299,7 +299,7 @@ declaration on the factory.\n     >>> dummy.factory # doctest: +ELLIPSIS\n     <plone.behavior.annotation.AnnotationStorage object at ...>\n \n-    The factory has ist ``__component_adapts__`` (``@adapter``) in place, so the adapted Interface must be returned.\n+    The factory has it\'s ``__component_adapts__`` (``@adapter``) in place, so the adapted Interface must be returned.\n \n     >>> from plone.behavior.tests import IMarkerAndAdapterBehavior\n     >>> [a.required for a in sm.registeredAdapters() if a.provided == IMarkerAndAdapterBehavior][0]\n@@ -310,10 +310,10 @@ declaration on the factory.\n \n     >>> dummy = getUtility(IBehavior, name=u"marker_and_adapter_no_atadapter")\n     >>> dummy.name\n-    u\'marker_and_adapter_no_atadapter\'\n+    \'marker_and_adapter_no_atadapter\'\n \n     >>> dummy.title\n-    u\'Marker and adapter no @adapter\'\n+    \'Marker and adapter no @adapter\'\n \n     >>> dummy.description is None\n     True\n@@ -327,7 +327,7 @@ declaration on the factory.\n     >>> dummy.factory # doctest: +ELLIPSIS\n     <class \'plone.behavior.tests.DummyBehaviorImpl\'>\n \n-    The factory has ist ``__component_adapts__`` (``@adapter``) in place, so the adapted Interface must be returned.\n+    The factory has it\'s ``__component_adapts__`` (``@adapter``) in place, so the adapted Interface must be returned.\n \n     >>> from plone.behavior.tests import IMarkerAndAdapterBehavior2\n     >>> [a.required for a in sm.registeredAdapters() if a.provided == IMarkerAndAdapterBehavior2][0]\n@@ -347,13 +347,13 @@ declaration on the factory.\n \n     >>> dummy = getUtility(IBehavior, name=u"name_only")\n     >>> dummy.name\n-    u\'name_only\'\n+    \'name_only\'\n \n 8) A behavior that used to be known under a different dotted name\n \n     A behavior that has been renamed, can of course be found under the new name.\n     The representation tells us the former dotted name.\n-    \n+\n     >>> dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IRenamedAdapterBehavior")\n     >>> dummy  # doctest: +ELLIPSIS\n     <BehaviorRegistration renamed_adapter_behavior at ...\n@@ -376,7 +376,7 @@ Test registration lookup helper utility.\n     >>> lookup_behavior_registration(\'inexistent\')\n     Traceback (most recent call last):\n       ...\n-    BehaviorRegistrationNotFound: inexistent\n+    plone.behavior.registration.BehaviorRegistrationNotFound: inexistent\n \n     >>> lookup_behavior_registration(\'adapter_behavior\')  # doctest: +ELLIPSIS\n     <BehaviorRegistration adapter_behavior at ...\n@@ -399,7 +399,7 @@ Test registration lookup helper utility.\n     >\n \n     A lookup via getUtility for a former behavior name fails.\n-    \n+\n     >>> failed = False\n     >>> try:\n     ...     dummy = getUtility(IBehavior, name=u"plone.behavior.tests.IOriginalAdapterBehavior")\n@@ -409,7 +409,7 @@ Test registration lookup helper utility.\n     True\n \n     But the lookup helper still finds it under the former name.\n-    \n+\n     >>> dummy = lookup_behavior_registration("plone.behavior.tests.IOriginalAdapterBehavior")\n     >>> dummy.name\n-    u\'renamed_adapter_behavior\'\n+    \'renamed_adapter_behavior\'\ndiff --git a/plone/behavior/factory.py b/plone/behavior/factory.py\nindex 8d83e91..76d84b3 100644\n--- a/plone/behavior/factory.py\n+++ b/plone/behavior/factory.py\n@@ -1,12 +1,10 @@\n-# -*- coding: utf-8 -*-\n from plone.behavior.interfaces import IBehaviorAdapterFactory\n from plone.behavior.interfaces import IBehaviorAssignable\n from zope.interface import implementer\n \n \n @implementer(IBehaviorAdapterFactory)\n-class BehaviorAdapterFactory(object):\n-\n+class BehaviorAdapterFactory:\n     def __init__(self, behavior):\n         self.behavior = behavior\n \ndiff --git a/plone/behavior/interfaces.py b/plone/behavior/interfaces.py\nindex e23c516..ed993e6 100644\n--- a/plone/behavior/interfaces.py\n+++ b/plone/behavior/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope import schema\n from zope.interface import Interface\n from zope.interface.interfaces import IInterface\n@@ -18,8 +17,7 @@ def supports(behavior_interface):\n         """\n \n     def enumerateBehaviors():\n-        """Return an iterable of all the IBehaviors supported by the context.\n-        """\n+        """Return an iterable of all the IBehaviors supported by the context."""\n \n \n class IBehavior(Interface):\n@@ -29,41 +27,41 @@ class IBehavior(Interface):\n     """\n \n     title = schema.TextLine(\n-        title=u\'Short title of the behavior\',\n+        title="Short title of the behavior",\n         required=True,\n     )\n \n     description = schema.Text(\n-        title=u\'Longer description of the behavior\',\n+        title="Longer description of the behavior",\n         required=False,\n     )\n \n     name = schema.TextLine(\n-        title=u\'Readable short name to be used for behavior lookup\',\n-        description=u\'E.g. plone.somebehavior. If not given the full dotted \'\n-                    u\'name of the interfaces is used for lookup instead.\'\n-                    u\'Recommended, but due to BBB not required.\',\n+        title="Readable short name to be used for behavior lookup",\n+        description="E.g. plone.somebehavior. If not given the full dotted "\n+        "name of the interfaces is used for lookup instead."\n+        "Recommended, but due to BBB not required.",\n         required=False,\n     )\n \n     interface = schema.Object(\n-        title=u\'Interface describing this behavior\',\n+        title="Interface describing this behavior",\n         required=True,\n         schema=IInterface,\n     )\n \n     marker = schema.Object(\n-        title=u\'Marker interface for objects sporting this behavior\',\n-        description=u\'Markers are persisted in the ZODB. \'\n-                    u\'Required when a factory is given, because the factory \'\n-                    u\'is an adapter adapting the the marker and providing the \'\n-                    u\'"interface" of this behavior.\',\n+        title="Marker interface for objects sporting this behavior",\n+        description="Markers are persisted in the ZODB. "\n+        "Required when a factory is given, because the factory "\n+        "is an adapter adapting the the marker and providing the "\n+        \'"interface" of this behavior.\',\n         required=False,\n         schema=IInterface,\n     )\n \n     factory = schema.Object(\n-        title=u\'An adapter factory for the behavior\',\n+        title="An adapter factory for the behavior",\n         required=True,\n         schema=Interface,\n     )\n@@ -85,7 +83,7 @@ class IBehaviorAdapterFactory(Interface):\n     """\n \n     behavior = schema.Object(\n-        title=u\'The behavior this is a factory for\',\n+        title="The behavior this is a factory for",\n         schema=IBehavior,\n     )\n \ndiff --git a/plone/behavior/markers.py b/plone/behavior/markers.py\nindex 19599b8..cd76bfd 100644\n--- a/plone/behavior/markers.py\n+++ b/plone/behavior/markers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.behavior.interfaces import IBehaviorAssignable\n from zope.interface import alsoProvides\n \ndiff --git a/plone/behavior/meta.zcml b/plone/behavior/meta.zcml\nindex d24311f..82a4d17 100644\n--- a/plone/behavior/meta.zcml\n+++ b/plone/behavior/meta.zcml\n@@ -1,15 +1,16 @@\n <configure\n     xmlns="http://namespaces.zope.org/meta"\n-    i18n_domain="plone.behavior">\n+    i18n_domain="plone.behavior"\n+    >\n \n-    <directives namespace="http://namespaces.plone.org/plone">\n+  <directives namespace="http://namespaces.plone.org/plone">\n \n-        <directive\n-            name="behavior"\n-            schema=".metaconfigure.IBehaviorDirective"\n-            handler=".metaconfigure.behaviorDirective"\n-            />\n+    <directive\n+        name="behavior"\n+        handler=".metaconfigure.behaviorDirective"\n+        schema=".metaconfigure.IBehaviorDirective"\n+        />\n \n-    </directives>\n+  </directives>\n \n </configure>\ndiff --git a/plone/behavior/metaconfigure.py b/plone/behavior/metaconfigure.py\nindex e28a3cf..d0a8ce6 100644\n--- a/plone/behavior/metaconfigure.py\n+++ b/plone/behavior/metaconfigure.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.behavior import logger\n from plone.behavior.factory import BehaviorAdapterFactory\n from plone.behavior.interfaces import IBehavior\n@@ -23,81 +22,78 @@ class IBehaviorDirective(Interface):\n     """\n \n     name = TextLine(\n-        title=u\'Name\',\n-        description=u\'Convenience lookup name for this behavior\',\n+        title="Name",\n+        description="Convenience lookup name for this behavior",\n         required=False,\n     )\n \n     title = configuration_fields.MessageID(\n-        title=u\'Title\',\n-        description=u\'A user friendly title for this behavior\',\n+        title="Title",\n+        description="A user friendly title for this behavior",\n         required=True,\n     )\n \n     description = configuration_fields.MessageID(\n-        title=u\'Description\',\n-        description=u\'A longer description for this behavior\',\n+        title="Description",\n+        description="A longer description for this behavior",\n         required=False,\n     )\n \n     provides = configuration_fields.GlobalInterface(\n-        title=u\'An interface to which the behavior can be adapted\',\n-        description=u\'This is what the conditional adapter factory will \'\n-                    u\'be registered as providing\',\n+        title="An interface to which the behavior can be adapted",\n+        description="This is what the conditional adapter factory will "\n+        "be registered as providing",\n         required=True,\n     )\n \n     marker = configuration_fields.GlobalInterface(\n-        title=u\'A marker interface to be applied by the behavior\',\n-        description=u\'If factory is not given, then this is optional\',\n+        title="A marker interface to be applied by the behavior",\n+        description="If factory is not given, then this is optional",\n         required=False,\n     )\n \n     factory = configuration_fields.GlobalObject(\n-        title=u\'The factory for this behavior\',\n-        description=u\'If this is not given, the behavior is assumed to \'\n-                    u\'provide a marker interface\',\n+        title="The factory for this behavior",\n+        description="If this is not given, the behavior is assumed to "\n+        "provide a marker interface",\n         required=False,\n     )\n \n     for_ = configuration_fields.GlobalObject(\n-        title=u\'The type of object to register the conditional adapter \'\n-              u\'factory for\',\n-        description=u\'This is optional - the default is to register the \'\n-                    u\'factory for zope.interface.Interface\',\n+        title="The type of object to register the conditional adapter " "factory for",\n+        description="This is optional - the default is to register the "\n+        "factory for zope.interface.Interface",\n         required=False,\n     )\n \n     name_only = configuration_fields.Bool(\n-        title=u\'Do not register the behavior under the dotted path, but \'\n-              u\'only under the given name\',\n-        description=u\'Use this option to register a behavior for the same \'\n-                    u\'provides under a different name.\',\n+        title="Do not register the behavior under the dotted path, but "\n+        "only under the given name",\n+        description="Use this option to register a behavior for the same "\n+        "provides under a different name.",\n         required=False,\n     )\n \n     former_dotted_names = TextLine(\n-        title=u\'Space-separated list of dotted names that this behavior was \'\n-              u\'formerly registered under\',\n-        description=u\'Use this field in case you change the dotted name, \'\n-                    u\'so that the current behavior can be looked up under \'\n-                    u\'its former name.\',\n+        title="Space-separated list of dotted names that this behavior was "\n+        "formerly registered under",\n+        description="Use this field in case you change the dotted name, "\n+        "so that the current behavior can be looked up under "\n+        "its former name.",\n         required=False,\n     )\n \n \n def _detect_for(factory, marker):\n-    """if no explicit for is given we need to figure it out.\n-    """\n+    """if no explicit for is given we need to figure it out."""\n     # Attempt to guess the factory\'s adapted interface and use it as\n     # the \'for_\'.\n     # at last bastion fallback to \'*\' (=Interface).\n-    adapts = getattr(factory, \'__component_adapts__\', [])\n+    adapts = getattr(factory, "__component_adapts__", [])\n     if len(adapts) == 1:\n         return adapts[0]\n     if len(adapts) > 1:\n-        raise ConfigurationError(\n-            u\'The factory can not be declared as multi-adapter.\')\n+        raise ConfigurationError("The factory can not be declared as multi-adapter.")\n     # down here it means len(adapts) < 1\n     if marker is not None:\n         # given we have a marker it is safe to register for the\n@@ -107,10 +103,18 @@ def _detect_for(factory, marker):\n     return Interface\n \n \n-def behaviorDirective(_context, title, provides, name=None, description=None,\n-                      marker=None, factory=None, for_=None, name_only=False,\n-                      former_dotted_names=\'\'):\n-\n+def behaviorDirective(\n+    _context,\n+    title,\n+    provides,\n+    name=None,\n+    description=None,\n+    marker=None,\n+    factory=None,\n+    for_=None,\n+    name_only=False,\n+    former_dotted_names="",\n+):\n     if marker is None and factory is None:\n         # a schema only behavior means usually direct attribute settings on the\n         # object itself, so the object itself provides the interface.\n@@ -119,12 +123,13 @@ def behaviorDirective(_context, title, provides, name=None, description=None,\n \n     if marker is not None and factory is None and marker is not provides:\n         raise ConfigurationError(\n-            u\'You cannot specify a different \\\'marker\\\' and \\\'provides\\\' if \'\n-            u\'there is no adapter factory for the provided interface.\')\n+            "You cannot specify a different \'marker\' and \'provides\' if "\n+            "there is no adapter factory for the provided interface."\n+        )\n     if name_only and name is None:\n         raise ConfigurationError(\n-            u\'If you decide to only register by \\\'name\\\', a name must \'\n-            u\'be given.\')\n+            "If you decide to only register by \'name\', a name must " "be given."\n+        )\n \n     # Instantiate the real factory if it\'s the schema-aware type. We do\n     # this here so that the for_ interface may take this into account.\n@@ -168,8 +173,9 @@ def behaviorDirective(_context, title, provides, name=None, description=None,\n     if factory is None:\n         if for_ is not None:\n             logger.warn(\n-                u\'Specifying \\\'for\\\' in behavior \\\'{0}\\\' if no \\\'factory\\\' is \'\n-                u\'given has no effect and is superfluous.\'.format(title))\n+                "Specifying \'for\' in behavior \'{}\' if no \'factory\' is "\n+                "given has no effect and is superfluous.".format(title)\n+            )\n         # w/o factory we\'re done here: schema only behavior\n         return\n \ndiff --git a/plone/behavior/registration.py b/plone/behavior/registration.py\nindex ba18687..3b68fa2 100644\n--- a/plone/behavior/registration.py\n+++ b/plone/behavior/registration.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.behavior import logger\n from plone.behavior.interfaces import IBehavior\n from zope.component import ComponentLookupError\n@@ -6,16 +5,9 @@\n from zope.component import getUtility\n from zope.interface import implementer\n \n-import sys\n import textwrap\n \n \n-if sys.version_info[0] >= 3:\n-    text_type = str\n-else:\n-    text_type = unicode\n-\n-\n REGISTRATION_REPR = """\\\n <{class} {name} at {id}\n   schema: {identifier}\n@@ -27,10 +19,17 @@\n \n \n @implementer(IBehavior)\n-class BehaviorRegistration(object):\n-\n-    def __init__(self, title, description, interface,\n-                 marker, factory, name=None, former_dotted_names=\'\'):\n+class BehaviorRegistration:\n+    def __init__(\n+        self,\n+        title,\n+        description,\n+        interface,\n+        marker,\n+        factory,\n+        name=None,\n+        former_dotted_names="",\n+    ):\n         self.title = title\n         self.description = description\n         self.interface = interface\n@@ -43,36 +42,34 @@ def __repr__(self):\n         if self.marker is not None:\n             marker_info = self.marker.__identifier__\n         elif self.marker is not None and self.marker is not self.interface:\n-            marker_info = \'(uses schema as marker)\'\n+            marker_info = "(uses schema as marker)"\n         else:\n-            marker_info = \'(no marker is set)\'\n+            marker_info = "(no marker is set)"\n         info = {\n-            \'class\': self.__class__.__name__,\n-            \'id\': id(self),\n-            \'name\': self.name or \'(unique name not set)\',\n-            \'identifier\': self.interface.__identifier__,\n-            \'marker\': marker_info,\n-            \'factory\': text_type(self.factory),\n-            \'title\': self.title or \'(no title)\',\n-            \'description\': textwrap.fill(\n-                self.description or \'(no description)\',\n-                subsequent_indent=\'  \',\n+            "class": self.__class__.__name__,\n+            "id": id(self),\n+            "name": self.name or "(unique name not set)",\n+            "identifier": self.interface.__identifier__,\n+            "marker": marker_info,\n+            "factory": str(self.factory),\n+            "title": self.title or "(no title)",\n+            "description": textwrap.fill(\n+                self.description or "(no description)",\n+                subsequent_indent="  ",\n             ),\n-            \'extra_info\': (\n-                self.former_dotted_names and\n-                \'\\n  former dotted names: {0}\'.format(self.former_dotted_names)\n+            "extra_info": (\n+                self.former_dotted_names\n+                and f"\\n  former dotted names: {self.former_dotted_names}"\n             ),\n         }\n         return REGISTRATION_REPR.format(**info)\n \n \n class BehaviorRegistrationNotFound(Exception):\n-    """Exception thrown if behavior registration lookup fails.\n-    """\n+    """Exception thrown if behavior registration lookup fails."""\n \n \n-def lookup_behavior_registration(\n-        name=None, identifier=None, warn_about_fallback=True):\n+def lookup_behavior_registration(name=None, identifier=None, warn_about_fallback=True):\n     """Look up behavior registration either by name or interface identifier.\n        Fall back to checking the former_dotted_names if the lookup is not\n        successful.\n@@ -81,9 +78,9 @@ def lookup_behavior_registration(\n     ``BehaviorRegistrationNotFound`` is thrown if lookup fails.\n     """\n     try:\n-        assert(name or identifier)\n+        assert name or identifier\n     except AssertionError:\n-        raise ValueError(\'Either ``name`` or ``identifier`` must be given\')\n+        raise ValueError("Either ``name`` or ``identifier`` must be given")\n     # identifier rules if given\n     if identifier:\n         name = identifier\n@@ -95,9 +92,12 @@ def lookup_behavior_registration(\n             # if the requested name is registered as a former dotted name.\n             if name in behavior.former_dotted_names:\n                 if warn_about_fallback:\n-                    logger.warn(\n-                        \'The dotted name "{0}" is deprecated. It has been \'\n-                        \'changed to "{1}"\'.format(\n-                            name, behavior.interface.__identifier__, ))\n+                    logger.warning(\n+                        \'The dotted name "{}" is deprecated. It has been \'\n+                        \'changed to "{}"\'.format(\n+                            name,\n+                            behavior.interface.__identifier__,\n+                        )\n+                    )\n                 return behavior\n         raise BehaviorRegistrationNotFound(name)\ndiff --git a/plone/behavior/tests.py b/plone/behavior/tests.py\nindex fe2f254..c0620d6 100644\n--- a/plone/behavior/tests.py\n+++ b/plone/behavior/tests.py\n@@ -1,13 +1,9 @@\n-# -*- coding: utf-8 -*-\n-from __future__ import print_function\n from zope import schema\n from zope.component import adapter\n from zope.interface import implementer\n from zope.interface import Interface\n \n import doctest\n-import re\n-import sys\n import unittest\n import zope.component.testing\n \n@@ -18,7 +14,7 @@ class IAdapterBehavior(Interface):\n \n \n @implementer(IAdapterBehavior)\n-class AdapterBehavior(object):\n+class AdapterBehavior:\n     def __init__(self, context):\n         self.context = context\n \n@@ -29,7 +25,7 @@ class IRenamedAdapterBehavior(Interface):\n \n \n @implementer(IRenamedAdapterBehavior)\n-class RenamedAdapterBehavior(object):\n+class RenamedAdapterBehavior:\n     def __init__(self, context):\n         self.context = context\n \n@@ -40,7 +36,7 @@ class IRestrictedAdapterBehavior(Interface):\n \n \n @implementer(IRestrictedAdapterBehavior)\n-class RestrictedAdapterBehavior(object):\n+class RestrictedAdapterBehavior:\n     def __init__(self, context):\n         self.context = context\n \n@@ -60,8 +56,7 @@ class ISomeContext(Interface):\n \n @implementer(IImpliedRestrictionAdapterBehavior)\n @adapter(ISomeContext)\n-class ImpliedRestrictionAdapterBehavior(object):\n-\n+class ImpliedRestrictionAdapterBehavior:\n     def __init__(self, context):\n         self.context = context\n \n@@ -78,7 +73,7 @@ class INameOnlyBehavior(Interface):\n \n # For test of the annotation factory\n class IAnnotationStored(Interface):\n-    some_field = schema.TextLine(title=u\'Some field\', default=u\'default value\')\n+    some_field = schema.TextLine(title="Some field", default="default value")\n \n \n # Behavior and marker\n@@ -98,44 +93,31 @@ class IMarkerAndAdapterMarker2(Interface):\n     pass\n \n \n-class DummyBehaviorImpl(object):\n-\n+class DummyBehaviorImpl:\n     def __init__(self, context):\n         self.context = context\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if sys.version_info[0] > 2:\n-            want = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n-            want = re.sub(\'u"(.*?)"\', \'"\\\\1"\', want)\n-            got = re.sub(\n-                \'plone.behavior.registration.BehaviorRegistrationNotFound\',\n-                \'BehaviorRegistrationNotFound\', got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n-    return unittest.TestSuite((\n-\n-        doctest.DocFileSuite(\n-            \'behaviors.rst\',\n-            tearDown=zope.component.testing.tearDown,\n-            globs={\n-                \'print_function\': print_function,\n-            },\n-            checker=Py23DocChecker(),\n-        ),\n-        doctest.DocFileSuite(\n-            \'directives.rst\',\n-            setUp=zope.component.testing.setUp,\n-            tearDown=zope.component.testing.tearDown,\n-            checker=Py23DocChecker(),\n-        ),\n-        doctest.DocFileSuite(\n-            \'annotation.rst\',\n-            setUp=zope.component.testing.setUp,\n-            tearDown=zope.component.testing.tearDown,\n-            checker=Py23DocChecker(),\n-        ),\n-    ))\n+    return unittest.TestSuite(\n+        (\n+            doctest.DocFileSuite(\n+                "behaviors.rst",\n+                setUp=zope.component.testing.setUp,\n+                tearDown=zope.component.testing.tearDown,\n+                globs={\n+                    "print_function": print,\n+                },\n+            ),\n+            doctest.DocFileSuite(\n+                "directives.rst",\n+                setUp=zope.component.testing.setUp,\n+                tearDown=zope.component.testing.tearDown,\n+            ),\n+            doctest.DocFileSuite(\n+                "annotation.rst",\n+                setUp=zope.component.testing.setUp,\n+                tearDown=zope.component.testing.tearDown,\n+            ),\n+        )\n+    )\ndiff --git a/plone/behavior/vocab.py b/plone/behavior/vocab.py\nindex ffe7264..ef01a32 100644\n--- a/plone/behavior/vocab.py\n+++ b/plone/behavior/vocab.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.behavior.interfaces import IBehavior\n from zope.component import getUtilitiesFor\n from zope.interface import provider\n@@ -9,7 +8,5 @@\n @provider(IVocabularyFactory)\n def BehaviorsVocabularyFactory(context):\n     behaviors = getUtilitiesFor(IBehavior)\n-    items = [\n-        (reg.title, reg.interface.__identifier__) for (title, reg) in behaviors\n-    ]\n+    items = [(reg.title, reg.interface.__identifier__) for (title, reg) in behaviors]\n     return SimpleVocabulary.fromItems(items)\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..0dad625 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,62 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\', \'ExtensionClass\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\', \'six\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 64d953a..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,8 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n [check-manifest]\n ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n     tox.ini\n-\n-\n-\n-[bdist_wheel]\n-universal = 1\ndiff --git a/setup.py b/setup.py\nindex ab17791..e79b5c1 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,17 +2,17 @@\n from setuptools import setup\n \n \n-version = \'1.4.1.dev0\'\n+version = "2.0.0.dev0"\n desc = "Infrastructure for maintaining a registry of available behaviors"\n doc_files = [\n     "README.rst",\n     "CHANGES.rst",\n ]\n-longdesc = \'\\n\'.join([open(_).read() for _ in doc_files])\n+longdesc = "\\n".join([open(_).read() for _ in doc_files])\n \n \n setup(\n-    name=\'plone.behavior\',\n+    name="plone.behavior",\n     version=version,\n     description=desc,\n     long_description=longdesc,\n@@ -20,38 +20,39 @@\n     classifiers=[\n         "Development Status :: 6 - Mature",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.5",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n         "License :: OSI Approved :: BSD License",\n     ],\n-    keywords=\'Plone behavior registry\',\n-    author=\'Martin Aspeli\',\n-    author_email=\'optilude@gmail.com\',\n-    url=\'https://pypi.org/project/plone.behavior\',\n-    license=\'BSD\',\n+    keywords="Plone behavior registry",\n+    author="Martin Aspeli",\n+    author_email="optilude@gmail.com",\n+    maintainer="Plone Foundation - Release Team",\n+    maintainer_email="releaseteam@plone.org",\n+    url="https://github.com/plone/plone.behavior",\n+    license="BSD",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n-        \'setuptools\',\n-        \'zope.annotation\',\n-        \'zope.component\',\n-        \'zope.configuration\',\n-        \'zope.interface\',\n-        \'zope.schema\',\n+        "setuptools",\n+        "zope.annotation",\n+        "zope.component",\n+        "zope.configuration",\n+        "zope.interface",\n+        "zope.schema",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'zope.lifecycleevent\',\n+        "test": [\n+            "zope.lifecycleevent",\n         ],\n     },\n     entry_points="""\ndiff --git a/tox.ini b/tox.ini\nindex dc7a8e2..f22d75e 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,10 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n envlist =\n-    py27,py35,py36,py37,py38\n+    format\n+    lint\n+    test\n \n [testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.behavior {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n deps =\n+    coverage\n     zope.testrunner\n-    .[test]\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    zope-testrunner --test-path=. {posargs:-pvc}\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.behavior {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

