Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2019-02-07T17:54:37+01:00
Author: Gil Forcada (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.portlets/commit/f60f3f6bf9273f6da8b9518b7330820f4e24c66b

feat: remove ZopeTestCase usage

Files changed:
M plone/app/portlets/tests/base.py
M plone/app/portlets/tests/test_context.py
M plone/app/portlets/tests/test_traversal.py
M plone/app/portlets/tests/test_utils.py

b'diff --git a/plone/app/portlets/tests/base.py b/plone/app/portlets/tests/base.py\nindex b9b2ffb..3dd180d 100644\n--- a/plone/app/portlets/tests/base.py\n+++ b/plone/app/portlets/tests/base.py\n@@ -1,14 +1,8 @@\n # -*- coding: utf-8 -*-\n-"""Base class for integration tests, based on ZopeTestCase.\n-\n-Note that importing this module has various side-effects: it registers a set of\n-products with Zope, and it sets up a sandbox Plone site with the appropriate\n-products installed.\n-"""\n+"""Base class for integration tests."""\n from plone.app.portlets.testing import PLONE_APP_PORTLETS_INTEGRATION_TESTING\n from plone.app.testing import PLONE_FUNCTIONAL_TESTING\n from plone.testing.z2 import Browser\n-from Testing.ZopeTestCase import Functional\n \n import unittest\n \n@@ -33,7 +27,7 @@ def afterSetUp(self):\n         pass\n \n \n-class PortletsFunctionalTestCase(unittest.TestCase, Functional):\n+class PortletsFunctionalTestCase(unittest.TestCase):\n     """Base class for functional integration tests for plone.app.portlets.\n     This may provide specific set-up and tear-down operations, or provide\n     convenience methods.\ndiff --git a/plone/app/portlets/tests/test_context.py b/plone/app/portlets/tests/test_context.py\nindex ea6ad5a..c5ccf56 100644\n--- a/plone/app/portlets/tests/test_context.py\n+++ b/plone/app/portlets/tests/test_context.py\n@@ -6,8 +6,6 @@\n \n from plone.portlets.interfaces import IPortletContext\n \n-from Testing.ZopeTestCase import user_name\n-\n \n class TestBasicContext(PortletsTestCase):\n \n@@ -20,36 +18,36 @@ def testGlobalsNoGroups(self):\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 3)\n         self.assertEqual(g[0], (\'content_type\', \'Folder\'))\n-        self.assertEqual(g[1], (\'user\', user_name))\n+        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n \n     def testGlobalsWithSingleGroup(self):\n \n         group = self.portal.portal_groups.getGroupById(\'Reviewers\')\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        group.addMember(user_name)\n+        group.addMember(TEST_USER_ID)\n         setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n \n         ctx = IPortletContext(self.folder)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 4)\n         self.assertEqual(g[0], (\'content_type\', \'Folder\'))\n-        self.assertEqual(g[1], (\'user\', user_name))\n+        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n         self.assertEqual(g[3], (\'group\', \'Reviewers\'))\n \n     def testGlobalsWithMultipleGroup(self):\n \n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         group = self.portal.portal_groups.getGroupById(\'Reviewers\')\n-        group.addMember(user_name)\n+        group.addMember(TEST_USER_ID)\n         group = self.portal.portal_groups.getGroupById(\'Administrators\')\n-        group.addMember(user_name)\n+        group.addMember(TEST_USER_ID)\n         setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n \n         ctx = IPortletContext(self.folder)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 5)\n         self.assertEqual(g[0], (\'content_type\', \'Folder\'))\n-        self.assertEqual(g[1], (\'user\', user_name))\n+        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n         self.assertEqual(g[2], (\'group\', \'Administrators\'))\n         self.assertEqual(g[4], (\'group\', \'Reviewers\'))\n \n@@ -73,36 +71,36 @@ def testGlobalsNoGroups(self):\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 3)\n         self.assertEqual(g[0], (\'content_type\', \'Plone Site\'))\n-        self.assertEqual(g[1], (\'user\', user_name))\n+        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n \n     def testGlobalsWithSingleGroup(self):\n \n         group = self.portal.portal_groups.getGroupById(\'Reviewers\')\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        group.addMember(user_name)\n+        group.addMember(TEST_USER_ID)\n         setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n \n         ctx = IPortletContext(self.portal)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 4)\n         self.assertEqual(g[0], (\'content_type\', \'Plone Site\'))\n-        self.assertEqual(g[1], (\'user\', user_name))\n+        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n         self.assertEqual(g[3], (\'group\', \'Reviewers\'))\n \n     def testGlobalsWithMultipleGroup(self):\n \n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         group = self.portal.portal_groups.getGroupById(\'Reviewers\')\n-        group.addMember(user_name)\n+        group.addMember(TEST_USER_ID)\n         group = self.portal.portal_groups.getGroupById(\'Administrators\')\n-        group.addMember(user_name)\n+        group.addMember(TEST_USER_ID)\n         setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n \n         ctx = IPortletContext(self.portal)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 5)\n         self.assertEqual(g[0], (\'content_type\', \'Plone Site\'))\n-        self.assertEqual(g[1], (\'user\', user_name))\n+        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n         self.assertEqual(g[2], (\'group\', \'Administrators\'))\n         self.assertEqual(g[4], (\'group\', \'Reviewers\'))\n \ndiff --git a/plone/app/portlets/tests/test_traversal.py b/plone/app/portlets/tests/test_traversal.py\nindex 06eb3b5..b598450 100644\n--- a/plone/app/portlets/tests/test_traversal.py\n+++ b/plone/app/portlets/tests/test_traversal.py\n@@ -3,8 +3,6 @@\n from Acquisition import aq_parent\n from AccessControl import Unauthorized\n \n-from Testing.ZopeTestCase import user_name\n-\n from zope.component import getMultiAdapter, getUtility\n \n from plone.portlets.interfaces import IPortletManager, IPortletAssignmentMapping\n@@ -38,11 +36,11 @@ def testContextNamespace(self):\n     def testDashboardNamespace(self):\n         assignment = classic.Assignment()\n         manager = getUtility(IPortletManager, name=\'plone.dashboard1\')\n-        mapping = self.portal.restrictedTraverse(\'++dashboard++plone.dashboard1+\' + user_name)\n+        mapping = self.portal.restrictedTraverse(\'++dashboard++plone.dashboard1+\' + TEST_USER_ID)\n         self._assertSameObject(aq_parent(mapping), self.portal)\n         mapping[\'foo\'] = assignment\n-        self._assertSameObject(manager[USER_CATEGORY][user_name][\'foo\'], assignment)\n-        self.assertEqual(\'++dashboard++plone.dashboard1+\' + user_name, mapping.id)\n+        self._assertSameObject(manager[USER_CATEGORY][TEST_USER_ID][\'foo\'], assignment)\n+        self.assertEqual(\'++dashboard++plone.dashboard1+\' + TEST_USER_ID, mapping.id)\n \n     def testGroupDashboardNamespace(self):\n         assignment = classic.Assignment()\ndiff --git a/plone/app/portlets/tests/test_utils.py b/plone/app/portlets/tests/test_utils.py\nindex 41ab8ec..f1dc026 100644\n--- a/plone/app/portlets/tests/test_utils.py\n+++ b/plone/app/portlets/tests/test_utils.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from Testing.ZopeTestCase import user_name\n+from plone.app.testing import TEST_USER_ID\n \n from zope.component import getUtility, getMultiAdapter\n \n@@ -19,9 +19,9 @@ class TestAssignmentFromKey(PortletsTestCase):\n     def afterSetUp(self):\n         self.manager = getUtility(IPortletManager, name=u\'plone.leftcolumn\')\n         self.cat = self.manager[USER_CATEGORY]\n-        self.cat[user_name] = PortletAssignmentMapping(manager=u\'plone.leftcolumn\',\n+        self.cat[TEST_USER_ID] = PortletAssignmentMapping(manager=u\'plone.leftcolumn\',\n                                                        category=USER_CATEGORY,\n-                                                       name=user_name)\n+                                                       name=TEST_USER_ID)\n \n     def testGetPortletFromContext(self):\n         mapping = getMultiAdapter((self.portal, self.manager), IPortletAssignmentMapping)\n@@ -44,8 +44,8 @@ def testGetPortletFromContextUnicodePath(self):\n \n     def testGetPortletFromUserCategory(self):\n         c = classic.Assignment()\n-        self.cat[user_name][\'foo\'] = c\n-        a = assignment_from_key(self.portal, u\'plone.leftcolumn\', USER_CATEGORY, user_name, \'foo\')\n+        self.cat[TEST_USER_ID][\'foo\'] = c\n+        a = assignment_from_key(self.portal, u\'plone.leftcolumn\', USER_CATEGORY, TEST_USER_ID, \'foo\')\n         self.assertEqual(c, a)\n \n \n'

Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2019-02-07T17:54:38+01:00
Author: Gil Forcada (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.portlets/commit/15ab69573722d62fd4876eae39e162b77ce8252f

feat: remove last traces of ZopeTestCase

Files changed:
M plone/app/portlets/testing.py
M plone/app/portlets/tests/base.py
M plone/app/portlets/tests/testDoctests.py
M plone/app/portlets/tests/testMemberDashboard.rst
M plone/app/portlets/tests/test_namechooser.py

b'diff --git a/plone/app/portlets/testing.py b/plone/app/portlets/testing.py\nindex 7f7e11f..72f5b8b 100644\n--- a/plone/app/portlets/testing.py\n+++ b/plone/app/portlets/testing.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n+from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import PloneSandboxLayer\n@@ -11,6 +12,8 @@\n from plone.testing import z2\n from zope.configuration import xmlconfig\n \n+import doctest\n+\n \n class PloneAppPortlets(PloneSandboxLayer):\n \n@@ -46,3 +49,11 @@ def setUpPloneSite(self, portal):\n     bases=(PLONE_APP_PORTLETS_FIXTURE,),\n     name="PloneAppPortlets:Integration",\n )\n+PLONE_APP_PORTLETS_FUNCTIONAL_TESTING = FunctionalTesting(\n+    bases=(PLONE_APP_PORTLETS_FIXTURE,),\n+    name="PloneAppPortlets:Functional",\n+)\n+\n+OPTIONFLAGS = (\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n+)\ndiff --git a/plone/app/portlets/tests/base.py b/plone/app/portlets/tests/base.py\nindex 3dd180d..9a819ee 100644\n--- a/plone/app/portlets/tests/base.py\n+++ b/plone/app/portlets/tests/base.py\n@@ -1,8 +1,6 @@\n # -*- coding: utf-8 -*-\n """Base class for integration tests."""\n from plone.app.portlets.testing import PLONE_APP_PORTLETS_INTEGRATION_TESTING\n-from plone.app.testing import PLONE_FUNCTIONAL_TESTING\n-from plone.testing.z2 import Browser\n \n import unittest\n \n@@ -25,32 +23,3 @@ def setUp(self):\n \n     def afterSetUp(self):\n         pass\n-\n-\n-class PortletsFunctionalTestCase(unittest.TestCase):\n-    """Base class for functional integration tests for plone.app.portlets.\n-    This may provide specific set-up and tear-down operations, or provide\n-    convenience methods.\n-    """\n-\n-    layer = PLONE_FUNCTIONAL_TESTING\n-\n-    def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n-        self.portal_url = self.portal.absolute_url()\n-        self.browser = Browser(self.app)\n-        self.browser.handleErrors = True\n-        self.app.acl_users.userFolderAddUser(\'app\', \'secret\', [\'Manager\'], [])\n-        from plone.testing import z2\n-        z2.login(self.app[\'acl_users\'], \'app\')\n-\n-        import transaction\n-        transaction.commit()\n-        self.site_administrator_browser = Browser(self.app)\n-        self.site_administrator_browser.handleErrors = False\n-        self.site_administrator_browser.addHeader(\n-            \'Authorization\',\n-            \'Basic %s:%s\' % (\'app\', \'secret\')\n-        )\ndiff --git a/plone/app/portlets/tests/testDoctests.py b/plone/app/portlets/tests/testDoctests.py\nindex b9da15e..5b45916 100644\n--- a/plone/app/portlets/tests/testDoctests.py\n+++ b/plone/app/portlets/tests/testDoctests.py\n@@ -1,20 +1,35 @@\n # -*- coding: utf-8 -*-\n-from plone.app.portlets.tests.base import PortletsFunctionalTestCase\n-from Testing.ZopeTestCase import FunctionalDocFileSuite\n+from plone.app.portlets.testing import OPTIONFLAGS\n+from plone.app.portlets.testing import PLONE_APP_PORTLETS_FUNCTIONAL_TESTING\n+from plone.testing import layered\n from unittest import TestSuite\n \n import doctest\n+import re\n+import six\n+\n+\n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            got = re.sub(\n+                \'LocationError\', \'zope.location.interfaces.LocationError\', got\n+            )\n+            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \n def test_suite():\n     suite = TestSuite()\n-    OPTIONFLAGS = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)\n     suite.addTest(\n-        FunctionalDocFileSuite(\n-            \'testMemberDashboard.rst\',\n-            optionflags=OPTIONFLAGS,\n-            package="plone.app.portlets.tests",\n-            test_class=PortletsFunctionalTestCase,\n-        ),\n+        layered(\n+            doctest.DocFileSuite(\n+                \'testMemberDashboard.rst\',\n+                checker=Py23DocChecker(),\n+                package=\'plone.app.portlets.tests\',\n+                optionflags=OPTIONFLAGS,\n+            ),\n+            layer=PLONE_APP_PORTLETS_FUNCTIONAL_TESTING\n+        )\n     )\n     return suite\ndiff --git a/plone/app/portlets/tests/testMemberDashboard.rst b/plone/app/portlets/tests/testMemberDashboard.rst\nindex 5e0b4ca..dd92233 100644\n--- a/plone/app/portlets/tests/testMemberDashboard.rst\n+++ b/plone/app/portlets/tests/testMemberDashboard.rst\n@@ -2,6 +2,7 @@ Setup::\n \n     >>> user1, pass1 = \'user1\', \'pass1\'\n     >>> user2, pass2 = \'user2\', \'pass2\'\n+    >>> portal = layer[\'portal\']\n     >>> uf = portal.acl_users\n     >>> uf.userFolderAddUser(user1, pass1, [\'Member\'], [])\n     >>> uf.userFolderAddUser(user2, pass2, [\'Member\'], [])\n@@ -15,7 +16,8 @@ bug: 11174: Portal Members can\'t add portlets to their dashboard\n ----------------------\n Login as the \'user1\' user\n \n-    >>> browser = self.browser\n+    >>> from plone.testing.z2 import Browser\n+    >>> browser = Browser(layer[\'app\'])\n     >>> portalURL = portal.absolute_url()\n \n     >>> browser.open(portalURL + \'/login_form\')\ndiff --git a/plone/app/portlets/tests/test_namechooser.py b/plone/app/portlets/tests/test_namechooser.py\nindex ecf19a9..0cf7342 100644\n--- a/plone/app/portlets/tests/test_namechooser.py\n+++ b/plone/app/portlets/tests/test_namechooser.py\n@@ -2,19 +2,21 @@\n import unittest\n import doctest\n \n-from plone.app.portlets.tests.base import PortletsTestCase\n+from plone.testing import layered\n+from plone.app.portlets.testing import PLONE_APP_PORTLETS_INTEGRATION_TESTING\n+from plone.app.portlets.testing import OPTIONFLAGS\n \n-from Testing import ZopeTestCase as ztc\n \n def test_suite():\n \n     import plone.app.portlets.storage\n \n     return unittest.TestSuite([\n-\n-        ztc.ZopeDocTestSuite(\n-            module=plone.app.portlets.storage,\n-            test_class=PortletsTestCase,\n-            optionflags=doctest.REPORT_ONLY_FIRST_FAILURE | doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS),\n-\n-        ])\n+        layered(\n+            doctest.DocTestSuite(\n+                module=plone.app.portlets.storage,\n+                optionflags=OPTIONFLAGS,\n+            ),\n+            layer=PLONE_APP_PORTLETS_INTEGRATION_TESTING,\n+        )\n+    ])\n'

Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2019-02-07T17:54:38+01:00
Author: Gil Forcada (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.portlets/commit/15f0c0c16ffa3ac99b8ccfc6d197578b4ca0e3e7

chore: update assert methods

Files changed:
M plone/app/portlets/tests/test_actions_portlet.py
M plone/app/portlets/tests/test_navigation_portlet.py

b'diff --git a/plone/app/portlets/tests/test_actions_portlet.py b/plone/app/portlets/tests/test_actions_portlet.py\nindex 7286660..20831a0 100644\n--- a/plone/app/portlets/tests/test_actions_portlet.py\n+++ b/plone/app/portlets/tests/test_actions_portlet.py\n@@ -31,8 +31,8 @@ def test_portlet_type_registered(self):\n \n     def test_interfaces(self):\n         portlet = actions.Assignment(ptitle=u\'actions\', category=u\'document\', show_icons=True)\n-        self.failUnless(IPortletAssignment.providedBy(portlet))\n-        self.failUnless(IPortletDataProvider.providedBy(portlet.data))\n+        self.assertTrue(IPortletAssignment.providedBy(portlet))\n+        self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n         return\n \n     def test_invoke_add_view(self):\n@@ -52,7 +52,7 @@ def test_invoke_add_view(self):\n         addview.createAndAdd(data=data)\n \n         self.assertEquals(len(mapping), 1)\n-        self.failUnless(isinstance(mapping.values()[0],\n+        self.assertTrue(isinstance(mapping.values()[0],\n                                    actions.Assignment))\n         return\n \n@@ -62,7 +62,7 @@ def test_invoke_edit_view(self):\n \n         mapping[\'foo\'] = actions.Assignment(ptitle=u\'actions\', category=u\'document\', show_icons=True)\n         editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n-        self.failUnless(isinstance(editview, actions.EditForm))\n+        self.assertTrue(isinstance(editview, actions.EditForm))\n         return\n \n     def test_obtain_renderer(self):\n@@ -76,7 +76,7 @@ def test_obtain_renderer(self):\n \n         renderer = getMultiAdapter(\n             (context, request, view, manager, assignment), IPortletRenderer)\n-        self.failUnless(isinstance(renderer, actions.Renderer))\n+        self.assertTrue(isinstance(renderer, actions.Renderer))\n         return\n \n \n@@ -106,13 +106,13 @@ def test_render(self):\n         output = r.actionLinks()\n \n         if int(migtool.getInstanceVersion()[0]) >= 4:\n-            self.failUnlessEqual(len(output), 3)\n+            self.assertEqual(len(output), 3)\n         else:\n-            self.failUnlessEqual(len(output), 4)\n+            self.assertEqual(len(output), 4)\n \n         first = output[0]\n-        self.failUnlessEqual(first[\'url\'], \'http://nohost/plone/sitemap\')\n-        self.failUnlessEqual(first[\'title\'], u"Site Map")\n+        self.assertEqual(first[\'url\'], \'http://nohost/plone/sitemap\')\n+        self.assertEqual(first[\'title\'], u"Site Map")\n \n     def test_render_woicon(self):\n         """Without icons"""\n@@ -123,7 +123,7 @@ def test_render_woicon(self):\n         r.update()\n         output = r.actionLinks()\n         first = output[0]\n-        self.failUnless(first[\'icon\'] is None, "We should not have an icon")\n+        self.assertTrue(first[\'icon\'] is None, "We should not have an icon")\n         return\n \n     def test_multiple_portlets(self):\n@@ -175,7 +175,7 @@ def test_portal_tabs(self):\n         # Have our expected tabs ?\n         expected = set([u\'Test Folder\', u\'Home\', u\'Users\', u\'News\', u\'Events\'])\n         got = set([six.text_type(link[\'title\']) for link in output])\n-        self.failUnlessEqual(got, expected)\n+        self.assertEqual(got, expected)\n \n     def test_object_buttons(self):\n         """Special stuff for the object_buttons category\n@@ -214,7 +214,7 @@ def test_object_buttons_with_icons(self):\n             assignment=actions.Assignment(\n                 ptitle=u\'actions\', category=u\'object_buttons\', show_icons=True))\n         r.update()\n-        self.failUnless(r.actionLinks)\n+        self.assertTrue(r.actionLinks)\n         output = r.actionLinks()\n \n         # Have our expected tabs ?\ndiff --git a/plone/app/portlets/tests/test_navigation_portlet.py b/plone/app/portlets/tests/test_navigation_portlet.py\nindex 915e989..605f9b7 100644\n--- a/plone/app/portlets/tests/test_navigation_portlet.py\n+++ b/plone/app/portlets/tests/test_navigation_portlet.py\n@@ -270,8 +270,8 @@ def testIncludeTopWithoutNavigationRoot(self):\n             assignment=navigation.Assignment(\n                 topLevel=0, root_uid=None, includeTop=True))\n         tree = view.getNavTree()\n-        self.failUnless(tree)\n-        self.failUnless(view.root_is_portal())\n+        self.assertTrue(tree)\n+        self.assertTrue(view.root_is_portal())\n         self.assertEqual(len(tree[\'children\']), 6)\n         self.assertEqual(view.getNavRootPath(), \'/plone\')\n \n'

Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2019-02-07T17:54:38+01:00
Author: Gil Forcada (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.portlets/commit/70448bd81d0dd38653105b42c2d7b73af147d8cf

feat: initialize towncrier

Files changed:
A news/.gitkeep
A news/119.bugfix
A news/121.bugfix
A pyproject.toml
M CHANGES.rst
D .gitattributes

b'diff --git a/.gitattributes b/.gitattributes\ndeleted file mode 100644\nindex 6f9ff67..0000000\n--- a/.gitattributes\n+++ /dev/null\n@@ -1 +0,0 @@\n-CHANGES.rst merge=union\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex fdd9b1c..af2e3c2 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,23 +1,12 @@\n Changelog\n =========\n \n+.. You should *NOT* be adding new change log entries to this file.\n+   You should create a file in the news directory instead.\n+   For helpful instructions, please see:\n+   https://github.com/plone/plone.releaser/blob/master/ADD-A-NEWS-ITEM.rst\n \n-4.4.1 (unreleased)\n-------------------\n-\n-Breaking changes:\n-\n-- *add item here*\n-\n-New features:\n-\n-- *add item here*\n-\n-Bug fixes:\n-\n-- a11y: Added role attribute for portalMessage\n-  [nzambello]\n-\n+.. towncrier release notes start\n \n 4.4.0 (2018-10-31)\n ------------------\ndiff --git a/news/.gitkeep b/news/.gitkeep\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/news/119.bugfix b/news/119.bugfix\nnew file mode 100644\nindex 0000000..eff58a8\n--- /dev/null\n+++ b/news/119.bugfix\n@@ -0,0 +1,2 @@\n+a11y: Added role attribute for portalMessage\n+[nzambello]\ndiff --git a/news/121.bugfix b/news/121.bugfix\nnew file mode 100644\nindex 0000000..1303f02\n--- /dev/null\n+++ b/news/121.bugfix\n@@ -0,0 +1,2 @@\n+Remove last traces of ZopeTestCase.\n+[gforcada]\ndiff --git a/pyproject.toml b/pyproject.toml\nnew file mode 100644\nindex 0000000..05b615d\n--- /dev/null\n+++ b/pyproject.toml\n@@ -0,0 +1,20 @@\n+[tool.towncrier]\n+filename = "CHANGES.rst"\n+directory = "news/"\n+title_format = "{version} ({project_date})"\n+underlines = ["-", ""]\n+\n+[[tool.towncrier.type]]\n+directory = "breaking"\n+name = "Breaking changes:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "feature"\n+name = "New features:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "bugfix"\n+name = "Bug fixes:"\n+showcontent = true\n'

Repository: plone.app.portlets


Branch: refs/heads/master
Date: 2019-02-08T14:08:53+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.portlets/commit/f8a5cdd8d9f77a1b4ae376d578d52b470df35749

Merge pull request #122 from plone/remove-cruft

Remove cruft

Files changed:
A news/.gitkeep
A news/119.bugfix
A news/121.bugfix
A pyproject.toml
M CHANGES.rst
M plone/app/portlets/testing.py
M plone/app/portlets/tests/base.py
M plone/app/portlets/tests/testDoctests.py
M plone/app/portlets/tests/testMemberDashboard.rst
M plone/app/portlets/tests/test_actions_portlet.py
M plone/app/portlets/tests/test_context.py
M plone/app/portlets/tests/test_namechooser.py
M plone/app/portlets/tests/test_navigation_portlet.py
M plone/app/portlets/tests/test_traversal.py
M plone/app/portlets/tests/test_utils.py
D .gitattributes

b'diff --git a/.gitattributes b/.gitattributes\ndeleted file mode 100644\nindex 6f9ff67..0000000\n--- a/.gitattributes\n+++ /dev/null\n@@ -1 +0,0 @@\n-CHANGES.rst merge=union\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex fdd9b1c..af2e3c2 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,23 +1,12 @@\n Changelog\n =========\n \n+.. You should *NOT* be adding new change log entries to this file.\n+   You should create a file in the news directory instead.\n+   For helpful instructions, please see:\n+   https://github.com/plone/plone.releaser/blob/master/ADD-A-NEWS-ITEM.rst\n \n-4.4.1 (unreleased)\n-------------------\n-\n-Breaking changes:\n-\n-- *add item here*\n-\n-New features:\n-\n-- *add item here*\n-\n-Bug fixes:\n-\n-- a11y: Added role attribute for portalMessage\n-  [nzambello]\n-\n+.. towncrier release notes start\n \n 4.4.0 (2018-10-31)\n ------------------\ndiff --git a/news/.gitkeep b/news/.gitkeep\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/news/119.bugfix b/news/119.bugfix\nnew file mode 100644\nindex 0000000..eff58a8\n--- /dev/null\n+++ b/news/119.bugfix\n@@ -0,0 +1,2 @@\n+a11y: Added role attribute for portalMessage\n+[nzambello]\ndiff --git a/news/121.bugfix b/news/121.bugfix\nnew file mode 100644\nindex 0000000..1303f02\n--- /dev/null\n+++ b/news/121.bugfix\n@@ -0,0 +1,2 @@\n+Remove last traces of ZopeTestCase.\n+[gforcada]\ndiff --git a/plone/app/portlets/testing.py b/plone/app/portlets/testing.py\nindex 7f7e11f..72f5b8b 100644\n--- a/plone/app/portlets/testing.py\n+++ b/plone/app/portlets/testing.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n+from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import PloneSandboxLayer\n@@ -11,6 +12,8 @@\n from plone.testing import z2\n from zope.configuration import xmlconfig\n \n+import doctest\n+\n \n class PloneAppPortlets(PloneSandboxLayer):\n \n@@ -46,3 +49,11 @@ def setUpPloneSite(self, portal):\n     bases=(PLONE_APP_PORTLETS_FIXTURE,),\n     name="PloneAppPortlets:Integration",\n )\n+PLONE_APP_PORTLETS_FUNCTIONAL_TESTING = FunctionalTesting(\n+    bases=(PLONE_APP_PORTLETS_FIXTURE,),\n+    name="PloneAppPortlets:Functional",\n+)\n+\n+OPTIONFLAGS = (\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n+)\ndiff --git a/plone/app/portlets/tests/base.py b/plone/app/portlets/tests/base.py\nindex b9b2ffb..9a819ee 100644\n--- a/plone/app/portlets/tests/base.py\n+++ b/plone/app/portlets/tests/base.py\n@@ -1,14 +1,6 @@\n # -*- coding: utf-8 -*-\n-"""Base class for integration tests, based on ZopeTestCase.\n-\n-Note that importing this module has various side-effects: it registers a set of\n-products with Zope, and it sets up a sandbox Plone site with the appropriate\n-products installed.\n-"""\n+"""Base class for integration tests."""\n from plone.app.portlets.testing import PLONE_APP_PORTLETS_INTEGRATION_TESTING\n-from plone.app.testing import PLONE_FUNCTIONAL_TESTING\n-from plone.testing.z2 import Browser\n-from Testing.ZopeTestCase import Functional\n \n import unittest\n \n@@ -31,32 +23,3 @@ def setUp(self):\n \n     def afterSetUp(self):\n         pass\n-\n-\n-class PortletsFunctionalTestCase(unittest.TestCase, Functional):\n-    """Base class for functional integration tests for plone.app.portlets.\n-    This may provide specific set-up and tear-down operations, or provide\n-    convenience methods.\n-    """\n-\n-    layer = PLONE_FUNCTIONAL_TESTING\n-\n-    def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.request = self.layer[\'request\']\n-        self.portal = self.layer[\'portal\']\n-        self.portal_url = self.portal.absolute_url()\n-        self.browser = Browser(self.app)\n-        self.browser.handleErrors = True\n-        self.app.acl_users.userFolderAddUser(\'app\', \'secret\', [\'Manager\'], [])\n-        from plone.testing import z2\n-        z2.login(self.app[\'acl_users\'], \'app\')\n-\n-        import transaction\n-        transaction.commit()\n-        self.site_administrator_browser = Browser(self.app)\n-        self.site_administrator_browser.handleErrors = False\n-        self.site_administrator_browser.addHeader(\n-            \'Authorization\',\n-            \'Basic %s:%s\' % (\'app\', \'secret\')\n-        )\ndiff --git a/plone/app/portlets/tests/testDoctests.py b/plone/app/portlets/tests/testDoctests.py\nindex b9da15e..5b45916 100644\n--- a/plone/app/portlets/tests/testDoctests.py\n+++ b/plone/app/portlets/tests/testDoctests.py\n@@ -1,20 +1,35 @@\n # -*- coding: utf-8 -*-\n-from plone.app.portlets.tests.base import PortletsFunctionalTestCase\n-from Testing.ZopeTestCase import FunctionalDocFileSuite\n+from plone.app.portlets.testing import OPTIONFLAGS\n+from plone.app.portlets.testing import PLONE_APP_PORTLETS_FUNCTIONAL_TESTING\n+from plone.testing import layered\n from unittest import TestSuite\n \n import doctest\n+import re\n+import six\n+\n+\n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            got = re.sub(\n+                \'LocationError\', \'zope.location.interfaces.LocationError\', got\n+            )\n+            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \n def test_suite():\n     suite = TestSuite()\n-    OPTIONFLAGS = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)\n     suite.addTest(\n-        FunctionalDocFileSuite(\n-            \'testMemberDashboard.rst\',\n-            optionflags=OPTIONFLAGS,\n-            package="plone.app.portlets.tests",\n-            test_class=PortletsFunctionalTestCase,\n-        ),\n+        layered(\n+            doctest.DocFileSuite(\n+                \'testMemberDashboard.rst\',\n+                checker=Py23DocChecker(),\n+                package=\'plone.app.portlets.tests\',\n+                optionflags=OPTIONFLAGS,\n+            ),\n+            layer=PLONE_APP_PORTLETS_FUNCTIONAL_TESTING\n+        )\n     )\n     return suite\ndiff --git a/plone/app/portlets/tests/testMemberDashboard.rst b/plone/app/portlets/tests/testMemberDashboard.rst\nindex 5e0b4ca..dd92233 100644\n--- a/plone/app/portlets/tests/testMemberDashboard.rst\n+++ b/plone/app/portlets/tests/testMemberDashboard.rst\n@@ -2,6 +2,7 @@ Setup::\n \n     >>> user1, pass1 = \'user1\', \'pass1\'\n     >>> user2, pass2 = \'user2\', \'pass2\'\n+    >>> portal = layer[\'portal\']\n     >>> uf = portal.acl_users\n     >>> uf.userFolderAddUser(user1, pass1, [\'Member\'], [])\n     >>> uf.userFolderAddUser(user2, pass2, [\'Member\'], [])\n@@ -15,7 +16,8 @@ bug: 11174: Portal Members can\'t add portlets to their dashboard\n ----------------------\n Login as the \'user1\' user\n \n-    >>> browser = self.browser\n+    >>> from plone.testing.z2 import Browser\n+    >>> browser = Browser(layer[\'app\'])\n     >>> portalURL = portal.absolute_url()\n \n     >>> browser.open(portalURL + \'/login_form\')\ndiff --git a/plone/app/portlets/tests/test_actions_portlet.py b/plone/app/portlets/tests/test_actions_portlet.py\nindex 7286660..20831a0 100644\n--- a/plone/app/portlets/tests/test_actions_portlet.py\n+++ b/plone/app/portlets/tests/test_actions_portlet.py\n@@ -31,8 +31,8 @@ def test_portlet_type_registered(self):\n \n     def test_interfaces(self):\n         portlet = actions.Assignment(ptitle=u\'actions\', category=u\'document\', show_icons=True)\n-        self.failUnless(IPortletAssignment.providedBy(portlet))\n-        self.failUnless(IPortletDataProvider.providedBy(portlet.data))\n+        self.assertTrue(IPortletAssignment.providedBy(portlet))\n+        self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n         return\n \n     def test_invoke_add_view(self):\n@@ -52,7 +52,7 @@ def test_invoke_add_view(self):\n         addview.createAndAdd(data=data)\n \n         self.assertEquals(len(mapping), 1)\n-        self.failUnless(isinstance(mapping.values()[0],\n+        self.assertTrue(isinstance(mapping.values()[0],\n                                    actions.Assignment))\n         return\n \n@@ -62,7 +62,7 @@ def test_invoke_edit_view(self):\n \n         mapping[\'foo\'] = actions.Assignment(ptitle=u\'actions\', category=u\'document\', show_icons=True)\n         editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n-        self.failUnless(isinstance(editview, actions.EditForm))\n+        self.assertTrue(isinstance(editview, actions.EditForm))\n         return\n \n     def test_obtain_renderer(self):\n@@ -76,7 +76,7 @@ def test_obtain_renderer(self):\n \n         renderer = getMultiAdapter(\n             (context, request, view, manager, assignment), IPortletRenderer)\n-        self.failUnless(isinstance(renderer, actions.Renderer))\n+        self.assertTrue(isinstance(renderer, actions.Renderer))\n         return\n \n \n@@ -106,13 +106,13 @@ def test_render(self):\n         output = r.actionLinks()\n \n         if int(migtool.getInstanceVersion()[0]) >= 4:\n-            self.failUnlessEqual(len(output), 3)\n+            self.assertEqual(len(output), 3)\n         else:\n-            self.failUnlessEqual(len(output), 4)\n+            self.assertEqual(len(output), 4)\n \n         first = output[0]\n-        self.failUnlessEqual(first[\'url\'], \'http://nohost/plone/sitemap\')\n-        self.failUnlessEqual(first[\'title\'], u"Site Map")\n+        self.assertEqual(first[\'url\'], \'http://nohost/plone/sitemap\')\n+        self.assertEqual(first[\'title\'], u"Site Map")\n \n     def test_render_woicon(self):\n         """Without icons"""\n@@ -123,7 +123,7 @@ def test_render_woicon(self):\n         r.update()\n         output = r.actionLinks()\n         first = output[0]\n-        self.failUnless(first[\'icon\'] is None, "We should not have an icon")\n+        self.assertTrue(first[\'icon\'] is None, "We should not have an icon")\n         return\n \n     def test_multiple_portlets(self):\n@@ -175,7 +175,7 @@ def test_portal_tabs(self):\n         # Have our expected tabs ?\n         expected = set([u\'Test Folder\', u\'Home\', u\'Users\', u\'News\', u\'Events\'])\n         got = set([six.text_type(link[\'title\']) for link in output])\n-        self.failUnlessEqual(got, expected)\n+        self.assertEqual(got, expected)\n \n     def test_object_buttons(self):\n         """Special stuff for the object_buttons category\n@@ -214,7 +214,7 @@ def test_object_buttons_with_icons(self):\n             assignment=actions.Assignment(\n                 ptitle=u\'actions\', category=u\'object_buttons\', show_icons=True))\n         r.update()\n-        self.failUnless(r.actionLinks)\n+        self.assertTrue(r.actionLinks)\n         output = r.actionLinks()\n \n         # Have our expected tabs ?\ndiff --git a/plone/app/portlets/tests/test_context.py b/plone/app/portlets/tests/test_context.py\nindex ea6ad5a..c5ccf56 100644\n--- a/plone/app/portlets/tests/test_context.py\n+++ b/plone/app/portlets/tests/test_context.py\n@@ -6,8 +6,6 @@\n \n from plone.portlets.interfaces import IPortletContext\n \n-from Testing.ZopeTestCase import user_name\n-\n \n class TestBasicContext(PortletsTestCase):\n \n@@ -20,36 +18,36 @@ def testGlobalsNoGroups(self):\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 3)\n         self.assertEqual(g[0], (\'content_type\', \'Folder\'))\n-        self.assertEqual(g[1], (\'user\', user_name))\n+        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n \n     def testGlobalsWithSingleGroup(self):\n \n         group = self.portal.portal_groups.getGroupById(\'Reviewers\')\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        group.addMember(user_name)\n+        group.addMember(TEST_USER_ID)\n         setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n \n         ctx = IPortletContext(self.folder)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 4)\n         self.assertEqual(g[0], (\'content_type\', \'Folder\'))\n-        self.assertEqual(g[1], (\'user\', user_name))\n+        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n         self.assertEqual(g[3], (\'group\', \'Reviewers\'))\n \n     def testGlobalsWithMultipleGroup(self):\n \n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         group = self.portal.portal_groups.getGroupById(\'Reviewers\')\n-        group.addMember(user_name)\n+        group.addMember(TEST_USER_ID)\n         group = self.portal.portal_groups.getGroupById(\'Administrators\')\n-        group.addMember(user_name)\n+        group.addMember(TEST_USER_ID)\n         setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n \n         ctx = IPortletContext(self.folder)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 5)\n         self.assertEqual(g[0], (\'content_type\', \'Folder\'))\n-        self.assertEqual(g[1], (\'user\', user_name))\n+        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n         self.assertEqual(g[2], (\'group\', \'Administrators\'))\n         self.assertEqual(g[4], (\'group\', \'Reviewers\'))\n \n@@ -73,36 +71,36 @@ def testGlobalsNoGroups(self):\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 3)\n         self.assertEqual(g[0], (\'content_type\', \'Plone Site\'))\n-        self.assertEqual(g[1], (\'user\', user_name))\n+        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n \n     def testGlobalsWithSingleGroup(self):\n \n         group = self.portal.portal_groups.getGroupById(\'Reviewers\')\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        group.addMember(user_name)\n+        group.addMember(TEST_USER_ID)\n         setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n \n         ctx = IPortletContext(self.portal)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 4)\n         self.assertEqual(g[0], (\'content_type\', \'Plone Site\'))\n-        self.assertEqual(g[1], (\'user\', user_name))\n+        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n         self.assertEqual(g[3], (\'group\', \'Reviewers\'))\n \n     def testGlobalsWithMultipleGroup(self):\n \n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         group = self.portal.portal_groups.getGroupById(\'Reviewers\')\n-        group.addMember(user_name)\n+        group.addMember(TEST_USER_ID)\n         group = self.portal.portal_groups.getGroupById(\'Administrators\')\n-        group.addMember(user_name)\n+        group.addMember(TEST_USER_ID)\n         setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n \n         ctx = IPortletContext(self.portal)\n         g = ctx.globalPortletCategories()\n         self.assertEqual(len(g), 5)\n         self.assertEqual(g[0], (\'content_type\', \'Plone Site\'))\n-        self.assertEqual(g[1], (\'user\', user_name))\n+        self.assertEqual(g[1], (\'user\', TEST_USER_ID))\n         self.assertEqual(g[2], (\'group\', \'Administrators\'))\n         self.assertEqual(g[4], (\'group\', \'Reviewers\'))\n \ndiff --git a/plone/app/portlets/tests/test_namechooser.py b/plone/app/portlets/tests/test_namechooser.py\nindex ecf19a9..0cf7342 100644\n--- a/plone/app/portlets/tests/test_namechooser.py\n+++ b/plone/app/portlets/tests/test_namechooser.py\n@@ -2,19 +2,21 @@\n import unittest\n import doctest\n \n-from plone.app.portlets.tests.base import PortletsTestCase\n+from plone.testing import layered\n+from plone.app.portlets.testing import PLONE_APP_PORTLETS_INTEGRATION_TESTING\n+from plone.app.portlets.testing import OPTIONFLAGS\n \n-from Testing import ZopeTestCase as ztc\n \n def test_suite():\n \n     import plone.app.portlets.storage\n \n     return unittest.TestSuite([\n-\n-        ztc.ZopeDocTestSuite(\n-            module=plone.app.portlets.storage,\n-            test_class=PortletsTestCase,\n-            optionflags=doctest.REPORT_ONLY_FIRST_FAILURE | doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS),\n-\n-        ])\n+        layered(\n+            doctest.DocTestSuite(\n+                module=plone.app.portlets.storage,\n+                optionflags=OPTIONFLAGS,\n+            ),\n+            layer=PLONE_APP_PORTLETS_INTEGRATION_TESTING,\n+        )\n+    ])\ndiff --git a/plone/app/portlets/tests/test_navigation_portlet.py b/plone/app/portlets/tests/test_navigation_portlet.py\nindex 915e989..605f9b7 100644\n--- a/plone/app/portlets/tests/test_navigation_portlet.py\n+++ b/plone/app/portlets/tests/test_navigation_portlet.py\n@@ -270,8 +270,8 @@ def testIncludeTopWithoutNavigationRoot(self):\n             assignment=navigation.Assignment(\n                 topLevel=0, root_uid=None, includeTop=True))\n         tree = view.getNavTree()\n-        self.failUnless(tree)\n-        self.failUnless(view.root_is_portal())\n+        self.assertTrue(tree)\n+        self.assertTrue(view.root_is_portal())\n         self.assertEqual(len(tree[\'children\']), 6)\n         self.assertEqual(view.getNavRootPath(), \'/plone\')\n \ndiff --git a/plone/app/portlets/tests/test_traversal.py b/plone/app/portlets/tests/test_traversal.py\nindex 06eb3b5..b598450 100644\n--- a/plone/app/portlets/tests/test_traversal.py\n+++ b/plone/app/portlets/tests/test_traversal.py\n@@ -3,8 +3,6 @@\n from Acquisition import aq_parent\n from AccessControl import Unauthorized\n \n-from Testing.ZopeTestCase import user_name\n-\n from zope.component import getMultiAdapter, getUtility\n \n from plone.portlets.interfaces import IPortletManager, IPortletAssignmentMapping\n@@ -38,11 +36,11 @@ def testContextNamespace(self):\n     def testDashboardNamespace(self):\n         assignment = classic.Assignment()\n         manager = getUtility(IPortletManager, name=\'plone.dashboard1\')\n-        mapping = self.portal.restrictedTraverse(\'++dashboard++plone.dashboard1+\' + user_name)\n+        mapping = self.portal.restrictedTraverse(\'++dashboard++plone.dashboard1+\' + TEST_USER_ID)\n         self._assertSameObject(aq_parent(mapping), self.portal)\n         mapping[\'foo\'] = assignment\n-        self._assertSameObject(manager[USER_CATEGORY][user_name][\'foo\'], assignment)\n-        self.assertEqual(\'++dashboard++plone.dashboard1+\' + user_name, mapping.id)\n+        self._assertSameObject(manager[USER_CATEGORY][TEST_USER_ID][\'foo\'], assignment)\n+        self.assertEqual(\'++dashboard++plone.dashboard1+\' + TEST_USER_ID, mapping.id)\n \n     def testGroupDashboardNamespace(self):\n         assignment = classic.Assignment()\ndiff --git a/plone/app/portlets/tests/test_utils.py b/plone/app/portlets/tests/test_utils.py\nindex 41ab8ec..f1dc026 100644\n--- a/plone/app/portlets/tests/test_utils.py\n+++ b/plone/app/portlets/tests/test_utils.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from Testing.ZopeTestCase import user_name\n+from plone.app.testing import TEST_USER_ID\n \n from zope.component import getUtility, getMultiAdapter\n \n@@ -19,9 +19,9 @@ class TestAssignmentFromKey(PortletsTestCase):\n     def afterSetUp(self):\n         self.manager = getUtility(IPortletManager, name=u\'plone.leftcolumn\')\n         self.cat = self.manager[USER_CATEGORY]\n-        self.cat[user_name] = PortletAssignmentMapping(manager=u\'plone.leftcolumn\',\n+        self.cat[TEST_USER_ID] = PortletAssignmentMapping(manager=u\'plone.leftcolumn\',\n                                                        category=USER_CATEGORY,\n-                                                       name=user_name)\n+                                                       name=TEST_USER_ID)\n \n     def testGetPortletFromContext(self):\n         mapping = getMultiAdapter((self.portal, self.manager), IPortletAssignmentMapping)\n@@ -44,8 +44,8 @@ def testGetPortletFromContextUnicodePath(self):\n \n     def testGetPortletFromUserCategory(self):\n         c = classic.Assignment()\n-        self.cat[user_name][\'foo\'] = c\n-        a = assignment_from_key(self.portal, u\'plone.leftcolumn\', USER_CATEGORY, user_name, \'foo\')\n+        self.cat[TEST_USER_ID][\'foo\'] = c\n+        a = assignment_from_key(self.portal, u\'plone.leftcolumn\', USER_CATEGORY, TEST_USER_ID, \'foo\')\n         self.assertEqual(c, a)\n \n \ndiff --git a/pyproject.toml b/pyproject.toml\nnew file mode 100644\nindex 0000000..05b615d\n--- /dev/null\n+++ b/pyproject.toml\n@@ -0,0 +1,20 @@\n+[tool.towncrier]\n+filename = "CHANGES.rst"\n+directory = "news/"\n+title_format = "{version} ({project_date})"\n+underlines = ["-", ""]\n+\n+[[tool.towncrier.type]]\n+directory = "breaking"\n+name = "Breaking changes:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "feature"\n+name = "New features:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "bugfix"\n+name = "Bug fixes:"\n+showcontent = true\n'

