Repository: plone.portlet.collection


Branch: refs/heads/master
Date: 2022-05-17T14:17:24+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.portlet.collection/commit/e0320450f69bd1d845fb4ff3c9b7c10783687f75

Update .gitignore

Files changed:
M .gitignore

b'diff --git a/.gitignore b/.gitignore\nindex 1177e10..66edeab 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -22,3 +22,4 @@\n /.coverage\n coverage.xml\n zptlint.log\n+/venv\n\\ No newline at end of file\n'

Repository: plone.portlet.collection


Branch: refs/heads/master
Date: 2022-05-17T14:23:57+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.portlet.collection/commit/02c719df99081e3643fc639f951c9a7d81c1c28f

Update infrastructure

- based on collective/buildout.plonetest
- add a buildout config
- add requirements
- add isort profile
- add install requirements for tests

Files changed:
A base.cfg
A buildout.cfg
A requirements-6.0.x.txt
A test_plone60.cfg
M setup.cfg

b"diff --git a/base.cfg b/base.cfg\nnew file mode 100644\nindex 0000000..205192e\n--- /dev/null\n+++ b/base.cfg\n@@ -0,0 +1,115 @@\n+[buildout]\n+show-picked-versions = true\n+extensions =\n+    mr.developer\n+\n+parts =\n+    instance\n+    test\n+# we use tox for testing and linting, by default\n+#    code-analysis\n+    coverage\n+    test-coverage\n+    createcoverage\n+    releaser\n+    i18ndude\n+    omelette\n+    robot\n+    plone-helper-scripts\n+    vscode\n+\n+develop = .\n+\n+abi-tag-eggs = true\n+\n+sources-dir = src-mrd\n+\n+[instance]\n+recipe = plone.recipe.zope2instance\n+user = admin:admin\n+http-address = 8080\n+environment-vars =\n+    zope_i18n_compile_mo_files true\n+eggs =\n+    Plone\n+    Pillow\n+    plone.portlet.collection [test]\n+\n+[vscode]\n+recipe = collective.recipe.vscode\n+eggs = ${instance:eggs}\n+autocomplete-use-omelette = True\n+\n+# [code-analysis]\n+# recipe = plone.recipe.codeanalysis\n+# directory = ${buildout:directory}/src/ukd\n+# return-status-codes = False\n+\n+\n+[omelette]\n+recipe = collective.recipe.omelette\n+eggs = ${instance:eggs}\n+\n+\n+[test]\n+recipe = zc.recipe.testrunner\n+eggs = ${instance:eggs}\n+initialization =\n+    os.environ['TZ'] = 'UTC'\n+defaults = ['-s', 'plone.portlet.collection', '--auto-color', '--auto-progress']\n+\n+\n+[coverage]\n+recipe = zc.recipe.egg\n+eggs = coverage\n+\n+\n+[test-coverage]\n+recipe = collective.recipe.template\n+input = inline:\n+    #!/bin/bash\n+    export TZ=UTC\n+    ${buildout:directory}/bin/coverage run bin/test $*\n+    ${buildout:directory}/bin/coverage html\n+    ${buildout:directory}/bin/coverage report -m --fail-under=90\n+    # Fail (exit status 1) if coverage returns exit status 2 (this happens\n+    # when test coverage is below 100%.\n+output = ${buildout:directory}/bin/test-coverage\n+mode = 755\n+\n+\n+[createcoverage]\n+recipe = zc.recipe.egg\n+eggs = createcoverage\n+\n+\n+[robot]\n+recipe = zc.recipe.egg\n+eggs =\n+    ${test:eggs}\n+    plone.app.robotframework[debug,reload]\n+\n+\n+[releaser]\n+recipe = zc.recipe.egg\n+eggs = zest.releaser\n+\n+\n+[i18ndude]\n+recipe = zc.recipe.egg\n+eggs = i18ndude\n+\n+[plone-helper-scripts]\n+recipe = zc.recipe.egg\n+eggs =\n+   Products.CMFPlone\n+   ${instance:eggs}\n+interpreter = zopepy\n+scripts =\n+   zopepy\n+   plone-compile-resources\n+\n+[versions]\n+collective.recipe.vscode=0.1.8\n+# Don't use a released version\n+plone.portlet.collection =\ndiff --git a/buildout.cfg b/buildout.cfg\nnew file mode 100644\nindex 0000000..731ebd2\n--- /dev/null\n+++ b/buildout.cfg\n@@ -0,0 +1,3 @@\n+[buildout]\n+extends =\n+    test_plone60.cfg\ndiff --git a/requirements-6.0.x.txt b/requirements-6.0.x.txt\nnew file mode 100644\nindex 0000000..3ae6c36\n--- /dev/null\n+++ b/requirements-6.0.x.txt\n@@ -0,0 +1 @@\n+-r https://dist.plone.org/release/6.0-latest/requirements.txt\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..7c7b1d2 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,32 @@\n [bdist_wheel]\n universal = 1\n+\n+[check-manifest]\n+ignore =\n+    *.cfg\n+    .coveragerc\n+    .editorconfig\n+    .gitattributes\n+\n+[isort]\n+# black compatible isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n+\n+[flake8]\n+# black compatible flake8 rules:\n+ignore =\n+    W503,\n+    C812,\n+    E501\n+    T001\n+    C813\n+# E203, E266\n+exclude = bootstrap.py,docs,*.egg.,omelette\n+max-line-length = 88\n+max-complexity = 18\n+select = B,C,E,F,W,T4,B9\n+\n+builtins = unicode,basestring\ndiff --git a/test_plone60.cfg b/test_plone60.cfg\nnew file mode 100644\nindex 0000000..59b3583\n--- /dev/null\n+++ b/test_plone60.cfg\n@@ -0,0 +1,9 @@\n+[buildout]\n+extends =\n+    https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-6.0.x.cfg\n+    https://raw.githubusercontent.com/collective/buildout.plonetest/master/qa.cfg\n+    base.cfg\n+\n+update-versions-file = test_plone60.cfg\n+\n+[versions]\n"

Repository: plone.portlet.collection


Branch: refs/heads/master
Date: 2022-05-17T14:30:37+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.portlet.collection/commit/01d66b056b3a917fc26fe83504416d1cd59cbdc8

Housekeeping

- formatting code and templates
- isort &amp; black formatting
- zpretty for tal template

Files changed:
M plone/__init__.py
M plone/portlet/__init__.py
M plone/portlet/collection/__init__.py
M plone/portlet/collection/collection.pt
M plone/portlet/collection/collection.py
M plone/portlet/collection/testing.py
M plone/portlet/collection/tests/test_functional_doctest.py
M plone/portlet/collection/tests/test_portlet_collection.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/portlet/__init__.py b/plone/portlet/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/plone/portlet/__init__.py\n+++ b/plone/portlet/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/portlet/collection/__init__.py b/plone/portlet/collection/__init__.py\nindex 57208db..8af31d7 100644\n--- a/plone/portlet/collection/__init__.py\n+++ b/plone/portlet/collection/__init__.py\n@@ -7,5 +7,10 @@\n DEFAULT_ADD_CONTENT_PERMISSION = "%s: Add collection portlet" % PROJECTNAME\n \n addPermission(\n-    DEFAULT_ADD_CONTENT_PERMISSION, ("Manager", "Site Administrator", "Owner",)\n+    DEFAULT_ADD_CONTENT_PERMISSION,\n+    (\n+        "Manager",\n+        "Site Administrator",\n+        "Owner",\n+    ),\n )\ndiff --git a/plone/portlet/collection/collection.pt b/plone/portlet/collection/collection.pt\nindex e829fbc..dd691e9 100644\n--- a/plone/portlet/collection/collection.pt\n+++ b/plone/portlet/collection/collection.pt\n@@ -1,20 +1,33 @@\n-<html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      tal:omit-tag="">\n+<html\n+    xmlns="http://www.w3.org/1999/xhtml"\n+    xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+    xmlns:tal="http://xml.zope.org/namespaces/tal"\n+    tal:omit-tag=""\n+    >\n \n-  <div class="card portlet portletCollection"\n+  <div\n+      class="card portlet portletCollection"\n+      tal:define="\n+        collection_url view/collection_url;\n+        plone_view context/@@plone;\n+        toLocalizedTime nocall:plone_view/toLocalizedTime;\n+        viewActions python:context.portal_registry.get(\'plone.types_use_view_action_in_listings\', []);\n+        icons nocall:context/@@iconresolver;\n+        normalizeString nocall:plone_view/normalizeString;\n+      "\n+      tal:attributes="\n+        class string:card portlet portletCollection ${view/css_class};\n+      "\n       i18n:domain="plone"\n-      tal:define="collection_url view/collection_url;\n-                  plone_view context/@@plone;\n-                  toLocalizedTime nocall:plone_view/toLocalizedTime;\n-                  viewActions python:context.portal_registry.get(\'plone.types_use_view_action_in_listings\', []);\n-                  icons nocall:context/@@iconresolver;\n-                  normalizeString nocall:plone_view/normalizeString;"\n-      tal:attributes="class string:card portlet portletCollection ${view/css_class}">\n+      >\n \n     <div class="card-header">\n-      <a tal:attributes="href collection_url" tal:omit-tag="not:view/data/show_more">\n+      <a\n+          tal:omit-tag="not:view/data/show_more"\n+          tal:attributes="\n+            href collection_url;\n+          "\n+          >\n         <span tal:content="view/data/header" />\n       </a>\n     </div>\n@@ -22,54 +35,85 @@\n     <div class="card-body">\n       <ul>\n         <tal:events tal:repeat="obj view/results">\n-        <li class="portletItem"\n-            tal:define="plone_layout context/@@plone_layout;\n-                        portal context/@@plone_portal_state/portal;\n-                        image_scale portal/@@image_scale;\n-                        plone_view context/@@plone;\n-                        oddrow repeat/obj/odd;\n-                        useView python:obj.portal_type in viewActions;\n-                        itemUrl python:useView and obj.getURL() + \'/view\' or obj.getURL();\n-                        item_wf_state obj/review_state;\n-                        item_wf_state_class python:\'state-\' + plone_view.normalizeString(item_wf_state);\n-                        item_type obj/portal_type;\n-                        supress_icon    view/data/no_icons;\n-                        supress_thumb   view/data/no_thumbs;\n-                        thumb_scale view/thumb_scale;\n-                        item_type_class python:(\'contenttype-\' + plone_view.normalizeString(item_type)) if not supress_icon else \'\'"\n-            tal:attributes="class python:oddrow and \'portletItem even\' or \'portletItem odd\'">\n-          <a href="#"\n-              tal:attributes="href itemUrl;\n-                              class  string:tile $item_type_class $item_wf_state_class;\n-                              title obj/Description">\n+          <li\n+              class="portletItem"\n+              tal:define="\n+                plone_layout context/@@plone_layout;\n+                portal context/@@plone_portal_state/portal;\n+                image_scale portal/@@image_scale;\n+                plone_view context/@@plone;\n+                oddrow repeat/obj/odd;\n+                useView python:obj.portal_type in viewActions;\n+                itemUrl python:useView and obj.getURL() + \'/view\' or obj.getURL();\n+                item_wf_state obj/review_state;\n+                item_wf_state_class python:\'state-\' + plone_view.normalizeString(item_wf_state);\n+                item_type obj/portal_type;\n+                supress_icon    view/data/no_icons;\n+                supress_thumb   view/data/no_thumbs;\n+                thumb_scale view/thumb_scale;\n+                item_type_class python:(\'contenttype-\' + plone_view.normalizeString(item_type)) if not supress_icon else \'\';\n+              "\n+              tal:attributes="\n+                class python:oddrow and \'portletItem even\' or \'portletItem odd\';\n+              "\n+              >\n+            <a\n+                href="#"\n+                tal:attributes="\n+                  href itemUrl;\n+                  class  string:tile $item_type_class $item_wf_state_class;\n+                  title obj/Description;\n+                "\n+                >\n \n-            <tal:icon tal:condition="python: not supress_icon and item_type != \'File\'"\n-                      tal:replace="structure python:icons.tag(f\'contenttype/{normalizeString(item_type)}\')" />\n-            <tal:icon tal:condition="python: not supress_icon and item_type == \'File\'"\n-                      tal:replace="structure python:icons.tag(f\'mimetype-{obj.mime_type}\')" />\n-            <img tal:condition="python: obj.getIcon and thumb_scale and not supress_thumb"\n-                tal:replace="structure python:image_scale.tag(obj, \'image\', scale=thumb_scale, css_class=\'float-end thumb-\'+thumb_scale)" />\n+              <tal:icon\n+                  tal:condition="python: not supress_icon and item_type != \'File\'"\n+                  tal:replace="structure python:icons.tag(f\'contenttype/{normalizeString(item_type)}\')"\n+                  />\n+              <tal:icon\n+                  tal:condition="python: not supress_icon and item_type == \'File\'"\n+                  tal:replace="structure python:icons.tag(f\'mimetype-{obj.mime_type}\')"\n+                  />\n+              <img\n+                  tal:condition="python: obj.getIcon and thumb_scale and not supress_thumb"\n+                  tal:replace="structure python:image_scale.tag(obj, \'image\', scale=thumb_scale, css_class=\'float-end thumb-\'+thumb_scale)"\n+                  />\n \n-            <span tal:replace="obj/Title">Title</span>\n-          </a>\n-          <div class="portletItemDetails"\n-               tal:condition="view/data/show_dates"\n-               tal:define="obj_date python:obj.start and obj.start or obj.Date();"\n-               tal:content="python:toLocalizedTime(obj_date)">May 5</div>\n-        </li>\n+              <span tal:replace="obj/Title">Title</span>\n+            </a>\n+            <div\n+                class="portletItemDetails"\n+                tal:define="\n+                  obj_date python:obj.start and obj.start or obj.Date();\n+                "\n+                tal:condition="view/data/show_dates"\n+                tal:content="python:toLocalizedTime(obj_date)"\n+                >May 5</div>\n+          </li>\n         </tal:events>\n       </ul>\n     </div>\n \n-    <div class="card-footer"\n+    <div\n+        class="card-footer"\n+        tal:define="\n+          showMore view/data/show_more;\n+        "\n         tal:condition="python:showMore or view.include_empty_footer()"\n-        tal:define="showMore view/data/show_more">\n-      <a tal:condition="showMore" tal:attributes="href collection_url">\n-        <span class="hiddenStructure"><span tal:replace="view/data/header" /> - </span>\n-        <span i18n:translate="more_url">More&hellip;</span>\n+        >\n+      <a\n+          tal:condition="showMore"\n+          tal:attributes="\n+            href collection_url;\n+          "\n+          >\n+        <span class="hiddenStructure"><span tal:replace="view/data/header" />\n+          -\n+        </span>\n+        <span i18n:translate="more_url">More</span>\n       </a>\n     </div>\n \n   </div>\n \n-</html>\n\\ No newline at end of file\n+</html>\ndiff --git a/plone/portlet/collection/collection.py b/plone/portlet/collection/collection.py\nindex 2243674..b41105d 100644\n--- a/plone/portlet/collection/collection.py\n+++ b/plone/portlet/collection/collection.py\n@@ -29,101 +29,114 @@\n \n try:\n     from plone.app.collection.interfaces import ICollection\n+\n     COLLECTIONS.append(ICollection.__identifier__)\n except ImportError:\n     pass\n \n try:\n     from plone.app.contenttypes.interfaces import ICollection\n+\n     COLLECTIONS.append(ICollection.__identifier__)\n except ImportError:\n     pass\n \n \n class ICollectionPortlet(IPortletDataProvider):\n-    """A portlet which renders the results of a collection object.\n-    """\n+    """A portlet which renders the results of a collection object."""\n \n     header = schema.TextLine(\n-        title=_(u"Portlet header"),\n-        description=_(u"Title of the rendered portlet"),\n-        required=True)\n+        title=_("Portlet header"),\n+        description=_("Title of the rendered portlet"),\n+        required=True,\n+    )\n \n     widget(\n-        \'uid\',\n+        "uid",\n         RelatedItemsFieldWidget,\n-        pattern_options={\n-            \'selectableTypes\': [\'Collection\']\n-        }\n+        pattern_options={"selectableTypes": ["Collection"]},\n     )\n     uid = schema.Choice(\n-        title=_(u"Target collection"),\n-        description=_(u"Find the collection which provides the items to list"),\n+        title=_("Target collection"),\n+        description=_("Find the collection which provides the items to list"),\n         required=True,\n-        vocabulary=\'plone.app.vocabularies.Catalog\',\n+        vocabulary="plone.app.vocabularies.Catalog",\n     )\n \n     limit = schema.Int(\n-        title=_(u"Limit"),\n-        description=_(u"Specify the maximum number of items to show in the "\n-                      u"portlet. Leave this blank to show all items."),\n-        required=False)\n+        title=_("Limit"),\n+        description=_(\n+            "Specify the maximum number of items to show in the "\n+            "portlet. Leave this blank to show all items."\n+        ),\n+        required=False,\n+    )\n \n     random = schema.Bool(\n-        title=_(u"Select random items"),\n-        description=_(u"If enabled, items will be selected randomly from the "\n-                      u"collection, rather than based on its sort order."),\n-        required=True,\n-        default=False)\n+        title=_("Select random items"),\n+        description=_(\n+            "If enabled, items will be selected randomly from the "\n+            "collection, rather than based on its sort order."\n+        ),\n+        required=False,\n+        default=False,\n+    )\n \n     show_more = schema.Bool(\n-        title=_(u"Show more... link"),\n-        description=_(u"If enabled, a more... link will appear in the footer "\n-                      u"of the portlet, linking to the underlying "\n-                      u"Collection."),\n-        required=True,\n-        default=True)\n+        title=_("Show more... link"),\n+        description=_(\n+            "If enabled, a more... link will appear in the footer "\n+            "of the portlet, linking to the underlying "\n+            "Collection."\n+        ),\n+        required=False,\n+        default=True,\n+    )\n \n     show_dates = schema.Bool(\n-        title=_(u"Show dates"),\n-        description=_(u"If enabled, effective dates will be shown underneath "\n-                      u"the items listed."),\n-        required=True,\n-        default=False)\n+        title=_("Show dates"),\n+        description=_(\n+            "If enabled, effective dates will be shown underneath " "the items listed."\n+        ),\n+        required=False,\n+        default=False,\n+    )\n \n     exclude_context = schema.Bool(\n-        title=_(u"Exclude the Current Context"),\n+        title=_("Exclude the Current Context"),\n         description=_(\n-            u"If enabled, the listing will not include the current item the "\n-            u"portlet is rendered for if it otherwise would be."),\n-        required=True,\n-        default=True)\n+            "If enabled, the listing will not include the current item the "\n+            "portlet is rendered for if it otherwise would be."\n+        ),\n+        required=False,\n+        default=True,\n+    )\n \n     no_icons = schema.Bool(\n-        title=_(u"Suppress Icons"),\n-        description=_(\n-            u"If enabled, the portlet will not show document type icons."\n-        ),\n-        required=True,\n-        default=False)\n+        title=_("Suppress Icons"),\n+        description=_("If enabled, the portlet will not show document type icons."),\n+        required=False,\n+        default=False,\n+    )\n \n     thumb_scale = schema.TextLine(\n-        title=_(u"Override thumb scale"),\n+        title=_("Override thumb scale"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u\'\')\n+        default="",\n+    )\n \n     no_thumbs = schema.Bool(\n-        title=_(u"Suppress thumbs"),\n-        description=_(\n-            u"If enabled, the portlet will not show thumbs."),\n-        required=True,\n-        default=False)\n+        title=_("Suppress thumbs"),\n+        description=_("If enabled, the portlet will not show thumbs."),\n+        required=False,\n+        default=False,\n+    )\n \n \n @implementer(ICollectionPortlet)\n@@ -133,7 +146,8 @@ class Assignment(base.Assignment):\n     This is what is actually managed through the portlets UI and associated\n     with columns.\n     """\n-    header = u""\n+\n+    header = ""\n     limit = None\n     random = False\n     show_more = True\n@@ -145,10 +159,19 @@ class Assignment(base.Assignment):\n     # bbb\n     target_collection = None\n \n-    def __init__(self, header=u"", uid=None, limit=None,\n-                 random=False, show_more=True, show_dates=False,\n-                 exclude_context=True, no_icons=False, no_thumbs=False,\n-                 thumb_scale=None):\n+    def __init__(\n+        self,\n+        header="",\n+        uid=None,\n+        limit=None,\n+        random=False,\n+        show_more=True,\n+        show_dates=False,\n+        exclude_context=True,\n+        no_icons=False,\n+        no_thumbs=False,\n+        thumb_scale=None,\n+    ):\n         self.header = header\n         self.uid = uid\n         self.limit = limit\n@@ -172,17 +195,18 @@ def _uid(self):\n         # attribute, which is probably because it has an old\n         # \'target_collection\' attribute that needs to be converted.\n         path = self.target_collection\n-        portal = getToolByName(self, \'portal_url\').getPortalObject()\n+        portal = getToolByName(self, "portal_url").getPortalObject()\n         try:\n-            collection = portal.unrestrictedTraverse(path.lstrip(\'/\'))\n+            collection = portal.unrestrictedTraverse(path.lstrip("/"))\n         except (AttributeError, KeyError, TypeError, NotFound):\n             return\n         return collection.UID()\n+\n     uid = ComputedAttribute(_uid, 1)\n \n \n class Renderer(base.Renderer):\n-    _template = ViewPageTemplateFile(\'collection.pt\')\n+    _template = ViewPageTemplateFile("collection.pt")\n     render = _template\n \n     def __init__(self, *args):\n@@ -217,22 +241,21 @@ def _standard_results(self):\n         results = []\n         collection = self.collection()\n         if collection is not None:\n-            context_path = \'/\'.join(self.context.getPhysicalPath())\n-            exclude_context = getattr(self.data, \'exclude_context\', False)\n+            context_path = "/".join(self.context.getPhysicalPath())\n+            exclude_context = getattr(self.data, "exclude_context", False)\n             limit = self.data.limit\n             if limit and limit > 0:\n                 # pass on batching hints to the catalog\n                 results = collection.queryCatalog(\n-                    batch=True,\n-                    b_size=limit + exclude_context\n+                    batch=True, b_size=limit + exclude_context\n                 )\n                 results = results._sequence\n             else:\n                 results = collection.queryCatalog()\n             if exclude_context:\n                 results = [\n-                    brain for brain in results\n-                    if brain.getPath() != context_path]\n+                    brain for brain in results if brain.getPath() != context_path\n+                ]\n             if limit and limit > 0:\n                 results = results[:limit]\n         return results\n@@ -242,8 +265,8 @@ def _random_results(self):\n         results = []\n         collection = self.collection()\n         if collection is not None:\n-            context_path = \'/\'.join(self.context.getPhysicalPath())\n-            exclude_context = getattr(self.data, \'exclude_context\', False)\n+            context_path = "/".join(self.context.getPhysicalPath())\n+            exclude_context = getattr(self.data, "exclude_context", False)\n             results = collection.queryCatalog(sort_on=None)\n             if results is None:\n                 return []\n@@ -251,8 +274,8 @@ def _random_results(self):\n \n             if exclude_context:\n                 results = [\n-                    brain for brain in results\n-                    if brain.getPath() != context_path]\n+                    brain for brain in results if brain.getPath() != context_path\n+                ]\n             if len(results) < limit:\n                 limit = len(results)\n             results = random.sample(results, limit)\n@@ -280,8 +303,7 @@ def thumb_scale(self):\n         if self.data.thumb_scale:\n             return self.data.thumb_scale\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         if settings.no_thumbs_portlet:\n             return None\n         thumb_scale_portlet = settings.thumb_scale_portlet\n@@ -290,21 +312,17 @@ def thumb_scale(self):\n     def getMimeTypeIcon(self, obj):\n         fileo = obj.getObject().file\n         portal_url = getNavigationRoot(self.context)\n-        mtt = getToolByName(self.context, \'mimetypes_registry\')\n+        mtt = getToolByName(self.context, "mimetypes_registry")\n         if fileo.contentType:\n             ctype = mtt.lookup(fileo.contentType)\n-            return os.path.join(\n-                portal_url,\n-                guess_icon_path(ctype[0])\n-            )\n+            return os.path.join(portal_url, guess_icon_path(ctype[0]))\n         return None\n \n \n class AddForm(formhelper.AddForm):\n     schema = ICollectionPortlet\n-    label = _(u"Add Collection Portlet")\n-    description = _(u"This portlet displays a listing of items from a "\n-                    u"Collection.")\n+    label = _("Add Collection Portlet")\n+    description = _("This portlet displays a listing of items from a " "Collection.")\n \n     def create(self, data):\n         return Assignment(**data)\n@@ -312,6 +330,5 @@ def create(self, data):\n \n class EditForm(formhelper.EditForm):\n     schema = ICollectionPortlet\n-    label = _(u"Edit Collection Portlet")\n-    description = _(u"This portlet displays a listing of items from a "\n-                    u"Collection.")\n+    label = _("Edit Collection Portlet")\n+    description = _("This portlet displays a listing of items from a " "Collection.")\ndiff --git a/plone/portlet/collection/testing.py b/plone/portlet/collection/testing.py\nindex 1b80651..a83cf23 100644\n--- a/plone/portlet/collection/testing.py\n+++ b/plone/portlet/collection/testing.py\n@@ -1,14 +1,12 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n-from plone.app.testing import PloneSandboxLayer\n from plone.app.testing import applyProfile\n-from plone.app.testing import PLONE_FIXTURE\n-from plone.app.testing import IntegrationTesting\n from plone.app.testing import FunctionalTesting\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import setRoles\n+from plone.app.testing import IntegrationTesting\n from plone.app.testing import login\n-\n+from plone.app.testing import PloneSandboxLayer\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from zope.configuration import xmlconfig\n \n \n@@ -18,33 +16,24 @@ class PlonePortletCollection(PloneSandboxLayer):\n \n     def setUpZope(self, app, configurationContext):\n         import plone.portlet.collection\n+\n         xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.portlet.collection,\n-            context=configurationContext\n+            "configure.zcml", plone.portlet.collection, context=configurationContext\n         )\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.portlet.collection:default\')\n-        portal.acl_users.userFolderAddUser(\'admin\',\n-                                           \'secret\',\n-                                           [\'Manager\'],\n-                                           [])\n-        login(portal, \'admin\')\n+        applyProfile(portal, "plone.portlet.collection:default")\n+        portal.acl_users.userFolderAddUser("admin", "secret", ["Manager"], [])\n+        login(portal, "admin")\n         portal.portal_workflow.setDefaultChain("simple_publication_workflow")\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n-        portal.invokeFactory(\n-            "Folder",\n-            id="test-folder",\n-            title=u"Test Folder"\n-        )\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n+        portal.invokeFactory("Folder", id="test-folder", title="Test Folder")\n+\n \n PLONE_PORTLET_COLLECTION_FIXTURE = PlonePortletCollection()\n PLONE_PORTLET_COLLECTION_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_PORTLET_COLLECTION_FIXTURE,),\n-    name="PlonePortletCollection:Integration"\n+    bases=(PLONE_PORTLET_COLLECTION_FIXTURE,), name="PlonePortletCollection:Integration"\n )\n PLONE_PORTLET_COLLECTION_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_PORTLET_COLLECTION_FIXTURE,),\n-    name="PlonePortletCollection:Functional"\n+    bases=(PLONE_PORTLET_COLLECTION_FIXTURE,), name="PlonePortletCollection:Functional"\n )\ndiff --git a/plone/portlet/collection/tests/test_functional_doctest.py b/plone/portlet/collection/tests/test_functional_doctest.py\nindex b922fd8..8eecfe6 100644\n--- a/plone/portlet/collection/tests/test_functional_doctest.py\n+++ b/plone/portlet/collection/tests/test_functional_doctest.py\n@@ -3,35 +3,37 @@\n \n    These test are only triggered when Plone 4 (and plone.testing) is installed.\n """\n-import doctest\n-\n-import unittest\n-import pprint\n-\n+from plone.portlet.collection.testing import PLONE_PORTLET_COLLECTION_FUNCTIONAL_TESTING\n from plone.testing import layered\n \n-from plone.portlet.collection.testing import \\\n-    PLONE_PORTLET_COLLECTION_FUNCTIONAL_TESTING\n+import doctest\n+import pprint\n+import unittest\n \n \n optionflags = (\n-    doctest.ELLIPSIS |\n-    doctest.NORMALIZE_WHITESPACE |\n-    doctest.REPORT_ONLY_FIRST_FAILURE\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n )\n normal_testfiles = [\n-    \'functional.txt\',\n+    "functional.txt",\n ]\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(doctest.DocFileSuite(test,\n-                                     optionflags=optionflags,\n-                                     globs={\'pprint\': pprint.pprint,\n-                                            }\n-                                     ),\n-                layer=PLONE_PORTLET_COLLECTION_FUNCTIONAL_TESTING)\n-        for test in normal_testfiles])\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite(\n+                    test,\n+                    optionflags=optionflags,\n+                    globs={\n+                        "pprint": pprint.pprint,\n+                    },\n+                ),\n+                layer=PLONE_PORTLET_COLLECTION_FUNCTIONAL_TESTING,\n+            )\n+            for test in normal_testfiles\n+        ]\n+    )\n     return suite\ndiff --git a/plone/portlet/collection/tests/test_portlet_collection.py b/plone/portlet/collection/tests/test_portlet_collection.py\nindex 121dddb..732b142 100644\n--- a/plone/portlet/collection/tests/test_portlet_collection.py\n+++ b/plone/portlet/collection/tests/test_portlet_collection.py\n@@ -1,19 +1,19 @@\n from plone.app.portlets.storage import PortletAssignmentMapping\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import setRoles\n from plone.app.testing import logout\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.portlet.collection import collection\n+from plone.portlet.collection.testing import (\n+    PLONE_PORTLET_COLLECTION_INTEGRATION_TESTING,\n+)\n from plone.portlets.interfaces import IPortletAssignment\n from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n from Products.CMFCore.utils import getToolByName\n-from zope.component import getUtility, getMultiAdapter\n-\n-from plone.portlet.collection import collection\n-from plone.portlet.collection.testing import (\n-    PLONE_PORTLET_COLLECTION_INTEGRATION_TESTING\n-)\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n import unittest\n \n@@ -23,53 +23,51 @@ class TestPortlet(unittest.TestCase):\n     layer = PLONE_PORTLET_COLLECTION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n         self.folder = self.portal.folder\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(\n-            IPortletType, name=\'plone.portlet.collection.Collection\')\n-        self.assertEqual(\n-            portlet.addview, \'plone.portlet.collection.Collection\')\n+        portlet = getUtility(IPortletType, name="plone.portlet.collection.Collection")\n+        self.assertEqual(portlet.addview, "plone.portlet.collection.Collection")\n \n     def testInterfaces(self):\n-        portlet = collection.Assignment(header=u"title")\n+        portlet = collection.Assignment(header="title")\n         self.assertTrue(IPortletAssignment.providedBy(portlet))\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(\n-            IPortletType, name=\'plone.portlet.collection.Collection\')\n-        mapping = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="plone.portlet.collection.Collection")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n-        addview.createAndAdd(data={\'header\': u"test title"})\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n+        addview.createAndAdd(data={"header": "test title"})\n         self.assertEqual(len(mapping), 1)\n         self.assertTrue(isinstance(mapping.values()[0], collection.Assignment))\n \n     def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n-        mapping[\'foo\'] = collection.Assignment(header=u"title")\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = collection.Assignment(header="title")\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         self.assertTrue(isinstance(editview, collection.EditForm))\n \n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n+        view = self.folder.restrictedTraverse("@@plone")\n         manager = getUtility(\n-            IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n-        assignment = collection.Assignment(header=u"title")\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n+        assignment = collection.Assignment(header="title")\n \n-        renderer = getMultiAdapter((\n-            context, request, view, manager, assignment), IPortletRenderer)\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, collection.Renderer))\n \n \n@@ -78,42 +76,41 @@ class TestRenderer(unittest.TestCase):\n     layer = PLONE_PORTLET_COLLECTION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n         self.folder = self.portal.folder\n \n-    def renderer(self, context=None, request=None, view=None, manager=None,\n-                 assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n+        view = view or self.folder.restrictedTraverse("@@plone")\n         manager = manager or getUtility(\n-            IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n-        assignment = assignment or collection.Assignment(header=u"title")\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n+        assignment = assignment or collection.Assignment(header="title")\n \n         return getMultiAdapter(\n-            (context, request, view, manager, assignment),\n-            IPortletRenderer\n+            (context, request, view, manager, assignment), IPortletRenderer\n         )\n \n     def test_render(self):\n         r = self.renderer(\n-            context=self.portal,\n-            assignment=collection.Assignment(header=u"title")\n+            context=self.portal, assignment=collection.Assignment(header="title")\n         )\n         r.update()\n         output = r.render()\n-        self.assertTrue(\'title\' in output)\n+        self.assertTrue("title" in output)\n \n     def test_css_class(self):\n         r = self.renderer(\n-            context=self.portal,\n-            assignment=collection.Assignment(header=u"Welcome text")\n+            context=self.portal, assignment=collection.Assignment(header="Welcome text")\n         )\n-        self.assertEqual(\'portlet-collection-welcome-text\', r.css_class())\n+        self.assertEqual("portlet-collection-welcome-text", r.css_class())\n \n \n class TestCollectionQuery(unittest.TestCase):\n@@ -121,19 +118,17 @@ class TestCollectionQuery(unittest.TestCase):\n     layer = PLONE_PORTLET_COLLECTION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n         self.folder = self.portal.folder\n-        self.collection = self._createType(\n-            self.folder, \'Collection\', \'collection\')\n+        self.collection = self._createType(self.folder, "Collection", "collection")\n \n     def _createType(self, context, portal_type, id, **kwargs):\n-        """Helper method to create a new type\n-        """\n-        ttool = getToolByName(context, \'portal_types\')\n+        """Helper method to create a new type"""\n+        ttool = getToolByName(context, "portal_types")\n         cat = self.portal.portal_catalog\n \n         fti = ttool.getTypeInfo(portal_type)\n@@ -142,52 +137,56 @@ def _createType(self, context, portal_type, id, **kwargs):\n         cat.indexObject(obj)\n         return obj\n \n-    def renderer(self, context=None, request=None, view=None, manager=None,\n-                 assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n+        view = view or self.folder.restrictedTraverse("@@plone")\n         manager = manager or getUtility(\n-            IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n         assignment = assignment\n-        return getMultiAdapter((\n-            context, request, view, manager, assignment),\n-            IPortletRenderer\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n         )\n \n     def testPortletAvailabilityWithPrivateFolders(self):\n-        private_folder = self._createType(self.folder, \'Folder\', \'private\')\n-        public_subfolder = self._createType(private_folder, \'Folder\', \'public\')\n-        self.portal.portal_workflow.doActionFor(public_subfolder, \'publish\')\n-        self.collection = self._createType(\n-            public_subfolder, \'Collection\', \'collection\')\n-        self.portal.portal_workflow.doActionFor(self.collection, \'publish\')\n+        private_folder = self._createType(self.folder, "Folder", "private")\n+        public_subfolder = self._createType(private_folder, "Folder", "public")\n+        self.portal.portal_workflow.doActionFor(public_subfolder, "publish")\n+        self.collection = self._createType(public_subfolder, "Collection", "collection")\n+        self.portal.portal_workflow.doActionFor(self.collection, "publish")\n \n         mapping = PortletAssignmentMapping()\n-        mapping[\'foo\'] = collection.Assignment(\n-            header=u"title",\n-            uid=self.portal.folder.private.public.collection.UID()\n+        mapping["foo"] = collection.Assignment(\n+            header="title", uid=self.portal.folder.private.public.collection.UID()\n         )\n         logout()\n         collectionrenderer = self.renderer(\n-            context=None, request=None, view=None, manager=None,\n-            assignment=mapping[\'foo\']\n+            context=None,\n+            request=None,\n+            view=None,\n+            manager=None,\n+            assignment=mapping["foo"],\n         )\n \n         self.assertEqual(self.collection, collectionrenderer.collection())\n \n     def testSimpleQuery(self):\n         # set up our collection to search for Folders\n-        self.folder.collection.query = [{\n-            \'i\': \'portal_type\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Folder\',\n-        }]\n+        self.folder.collection.query = [\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Folder",\n+            }\n+        ]\n \n         # add a few folders\n         for i in range(6):\n-            self.folder.invokeFactory(\'Folder\', \'folder_%s\' % i)\n-            getattr(self.folder, \'folder_%s\' % i).reindexObject()\n+            self.folder.invokeFactory("Folder", "folder_%s" % i)\n+            getattr(self.folder, "folder_%s" % i).reindexObject()\n \n         # the folders are returned by the topic\n         collection_num_items = len(self.folder.collection.results())\n@@ -195,8 +194,8 @@ def testSimpleQuery(self):\n         self.assertTrue(collection_num_items >= 6)\n \n         mapping = PortletAssignmentMapping()\n-        mapping[\'foo\'] = collection.Assignment(\n-            header=u"title",\n+        mapping["foo"] = collection.Assignment(\n+            header="title",\n             uid=self.folder.collection.UID(),\n             exclude_context=False,\n         )\n@@ -205,24 +204,21 @@ def testSimpleQuery(self):\n             request=None,\n             view=None,\n             manager=None,\n-            assignment=mapping[\'foo\']\n+            assignment=mapping["foo"],\n         )\n         # we want the portlet to return us the same results as the collection\n-        self.assertEqual(collection_num_items, len(\n-            collectionrenderer.results()))\n+        self.assertEqual(collection_num_items, len(collectionrenderer.results()))\n \n     def testRandomQuery(self):\n         # set up our portlet renderer\n         mapping = PortletAssignmentMapping()\n-        mapping[\'foo\'] = collection.Assignment(\n-            header=u"title",\n-            random=True,\n-            uid=self.folder.collection.UID()\n+        mapping["foo"] = collection.Assignment(\n+            header="title", random=True, uid=self.folder.collection.UID()\n         )\n         # add some folders\n         for i in range(6):\n-            self.folder.invokeFactory(\'Folder\', \'folder_%s\' % i)\n-            getattr(self.folder, \'folder_%s\' % i).reindexObject()\n+            self.folder.invokeFactory("Folder", "folder_%s" % i)\n+            getattr(self.folder, "folder_%s" % i).reindexObject()\n \n         # collection with no criteria -- should return empty list\n         collectionrenderer = self.renderer(\n@@ -230,36 +226,38 @@ def testRandomQuery(self):\n             request=None,\n             view=None,\n             manager=None,\n-            assignment=mapping[\'foo\']\n+            assignment=mapping["foo"],\n         )\n         self.assertEqual(len(collectionrenderer.results()), 0)\n \n         # collection with simple criterion -- should return 1 (random) folder\n-        self.folder.collection.query = [{\n-            \'i\': \'portal_type\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Folder\',\n-        }]\n+        self.folder.collection.query = [\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Folder",\n+            }\n+        ]\n         collectionrenderer = self.renderer(\n             context=None,\n             request=None,\n             view=None,\n             manager=None,\n-            assignment=mapping[\'foo\']\n+            assignment=mapping["foo"],\n         )\n         self.assertEqual(len(collectionrenderer.results()), 1)\n \n         # collection with multiple criteria -- should behave similarly\n         self.folder.collection.query = [\n             {\n-                \'i\': \'portal_type\',\n-                \'o\': \'plone.app.querystring.operation.string.is\',\n-                \'v\': \'Folder\',\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Folder",\n             },\n             {\n-                \'i\': \'creator\',\n-                \'o\': \'plone.app.querystring.operation.string.is\',\n-                \'v\': \'test_user_1_\',\n+                "i": "creator",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "test_user_1_",\n             },\n         ]\n         collectionrenderer = self.renderer(\n@@ -267,19 +265,19 @@ def testRandomQuery(self):\n             request=None,\n             view=None,\n             manager=None,\n-            assignment=mapping[\'foo\']\n+            assignment=mapping["foo"],\n         )\n         collectionrenderer.results()\n \n         # collection with sorting -- should behave similarly (sort is ignored\n         # internally)\n-        self.folder.collection.sort_on = \'modified\'\n+        self.folder.collection.sort_on = "modified"\n         collectionrenderer = self.renderer(\n             context=None,\n             request=None,\n             view=None,\n             manager=None,\n-            assignment=mapping[\'foo\']\n+            assignment=mapping["foo"],\n         )\n         self.assertEqual(len(collectionrenderer.results()), 1)\n \n@@ -290,7 +288,7 @@ def testRandomQuery(self):\n             request=None,\n             view=None,\n             manager=None,\n-            assignment=mapping[\'foo\']\n+            assignment=mapping["foo"],\n         )\n         collectionrenderer.data.limit = 2\n         self.assertEqual(len(collectionrenderer.results()), 2)\n@@ -302,7 +300,7 @@ def testRandomQuery(self):\n             request=None,\n             view=None,\n             manager=None,\n-            assignment=mapping[\'foo\']\n+            assignment=mapping["foo"],\n         )\n         collectionrenderer.data.limit = 10\n         self.assertTrue(len(collectionrenderer.results()) >= 6)\n@@ -313,118 +311,130 @@ def test_exclude_context(self):\n         """\n         for idx in range(4):\n             self._createType(\n-                self.folder, \'News Item\',\n-                \'foo-news-item-title-{0}\'.format(idx))\n-        self.folder.collection.query = [{\n-            \'i\': \'portal_type\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'News Item\'}]\n-        self.folder.collection.sort_on = \'id\'\n-        context = self.folder[\'foo-news-item-title-1\']\n+                self.folder, "News Item", "foo-news-item-title-{0}".format(idx)\n+            )\n+        self.folder.collection.query = [\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "News Item",\n+            }\n+        ]\n+        self.folder.collection.sort_on = "id"\n+        context = self.folder["foo-news-item-title-1"]\n         included = [\n-            self.folder[\'foo-news-item-title-{0}\'.format(idx)].absolute_url()\n-            for idx in (0, 2)]\n-        limited = self.folder[\'foo-news-item-title-3\'].absolute_url()\n+            self.folder["foo-news-item-title-{0}".format(idx)].absolute_url()\n+            for idx in (0, 2)\n+        ]\n+        limited = self.folder["foo-news-item-title-3"].absolute_url()\n \n         assignment = collection.Assignment(\n-            header=u"title", uid=self.folder.collection.UID(), limit=2)\n+            header="title", uid=self.folder.collection.UID(), limit=2\n+        )\n \n-        folder_renderer = self.renderer(\n-            context=self.folder, assignment=assignment)\n-        folder_results = [\n-            brain.getURL() for brain in folder_renderer.results()]\n+        folder_renderer = self.renderer(context=self.folder, assignment=assignment)\n+        folder_results = [brain.getURL() for brain in folder_renderer.results()]\n         self.assertEqual(\n-            len(folder_results), 2, \'Wrong number of folder rendered results\')\n+            len(folder_results), 2, "Wrong number of folder rendered results"\n+        )\n         self.assertIn(\n-            included[0], folder_results,\n-            \'Folder rendered results missing item\')\n+            included[0], folder_results, "Folder rendered results missing item"\n+        )\n         self.assertIn(\n-            context.absolute_url(), folder_results,\n-            \'Folder rendered results missing context item\')\n+            context.absolute_url(),\n+            folder_results,\n+            "Folder rendered results missing context item",\n+        )\n         self.assertNotIn(\n-            included[1], folder_results,\n-            \'Folder rendered results included too many items\')\n+            included[1],\n+            folder_results,\n+            "Folder rendered results included too many items",\n+        )\n         self.assertNotIn(\n-            limited, folder_results,\n-            \'Folder rendered results included way too many items\')\n+            limited,\n+            folder_results,\n+            "Folder rendered results included way too many items",\n+        )\n \n         renderer = self.renderer(context=context, assignment=assignment)\n-        results = [\n-            brain.getURL() for brain in renderer.results()]\n-        self.assertEqual(\n-            len(results), 2, \'Wrong number of context rendered results\')\n-        self.assertIn(\n-            included[0], results,\n-            \'Context rendered results missing item\')\n-        self.assertIn(\n-            included[1], results,\n-            \'Context rendered results missing item\')\n+        results = [brain.getURL() for brain in renderer.results()]\n+        self.assertEqual(len(results), 2, "Wrong number of context rendered results")\n+        self.assertIn(included[0], results, "Context rendered results missing item")\n+        self.assertIn(included[1], results, "Context rendered results missing item")\n         self.assertNotIn(\n-            context.absolute_url(), results,\n-            \'Context rendered results included context\')\n+            context.absolute_url(), results, "Context rendered results included context"\n+        )\n         self.assertNotIn(\n-            limited, results,\n-            \'Context rendered results included too many items\')\n+            limited, results, "Context rendered results included too many items"\n+        )\n \n         assignment.exclude_context = False\n-        context_renderer = self.renderer(\n-            context=context, assignment=assignment)\n-        context_results = [\n-            brain.getURL() for brain in context_renderer.results()]\n+        context_renderer = self.renderer(context=context, assignment=assignment)\n+        context_results = [brain.getURL() for brain in context_renderer.results()]\n         self.assertEqual(\n-            len(context_results), 2,\n-            \'Wrong number of context rendered results\')\n+            len(context_results), 2, "Wrong number of context rendered results"\n+        )\n         self.assertIn(\n-            included[0], context_results,\n-            \'Context rendered results missing item\')\n+            included[0], context_results, "Context rendered results missing item"\n+        )\n         self.assertIn(\n-            context.absolute_url(), context_results,\n-            \'Context rendered results missing context\')\n+            context.absolute_url(),\n+            context_results,\n+            "Context rendered results missing context",\n+        )\n         self.assertNotIn(\n-            included[1], context_results,\n-            \'Context rendered results included too many items\')\n+            included[1],\n+            context_results,\n+            "Context rendered results included too many items",\n+        )\n         self.assertNotIn(\n-            limited, context_results,\n-            \'Context rendered results included way too many items\')\n+            limited,\n+            context_results,\n+            "Context rendered results included way too many items",\n+        )\n \n         del assignment.exclude_context\n-        missing_renderer = self.renderer(\n-            context=context, assignment=assignment)\n-        missing_results = [\n-            brain.getURL() for brain in missing_renderer.results()]\n+        missing_renderer = self.renderer(context=context, assignment=assignment)\n+        missing_results = [brain.getURL() for brain in missing_renderer.results()]\n         self.assertEqual(\n-            len(missing_results), 2,\n-            \'Wrong number of context rendered results\')\n+            len(missing_results), 2, "Wrong number of context rendered results"\n+        )\n         self.assertIn(\n-            included[0], missing_results,\n-            \'Context rendered results missing item\')\n+            included[0], missing_results, "Context rendered results missing item"\n+        )\n         self.assertIn(\n-            context.absolute_url(), missing_results,\n-            \'Context rendered results missing context\')\n+            context.absolute_url(),\n+            missing_results,\n+            "Context rendered results missing context",\n+        )\n         self.assertNotIn(\n-            included[1], missing_results,\n-            \'Context rendered results included too many items\')\n+            included[1],\n+            missing_results,\n+            "Context rendered results included too many items",\n+        )\n         self.assertNotIn(\n-            limited, missing_results,\n-            \'Context rendered results included way too many items\')\n+            limited,\n+            missing_results,\n+            "Context rendered results included way too many items",\n+        )\n \n         assignment.limit = 4\n         assignment.random = True\n         assignment.exclude_context = True\n         random_renderer = self.renderer(context=context, assignment=assignment)\n-        random_results = [\n-            brain.getURL() for brain in random_renderer.results()]\n+        random_results = [brain.getURL() for brain in random_renderer.results()]\n         self.assertEqual(\n-            len(random_results), 3, \'Wrong number of random rendered results\')\n-        self.assertIn(\n-            included[0], random_results,\n-            \'Context rendered results missing item\')\n+            len(random_results), 3, "Wrong number of random rendered results"\n+        )\n         self.assertIn(\n-            included[1], random_results,\n-            \'Context rendered results missing item\')\n+            included[0], random_results, "Context rendered results missing item"\n+        )\n         self.assertIn(\n-            limited, random_results,\n-            \'Context rendered results missing item\')\n+            included[1], random_results, "Context rendered results missing item"\n+        )\n+        self.assertIn(limited, random_results, "Context rendered results missing item")\n         self.assertNotIn(\n-            context.absolute_url(), random_results,\n-            \'Context rendered results included context\')\n+            context.absolute_url(),\n+            random_results,\n+            "Context rendered results included context",\n+        )\ndiff --git a/setup.py b/setup.py\nindex 3bd8be8..6075604 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,13 +1,14 @@\n-from setuptools import setup\n from setuptools import find_packages\n+from setuptools import setup\n+\n \n-version = \'4.0.0a4.dev0\'\n+version = "4.0.0a4.dev0"\n \n-setup(name=\'plone.portlet.collection\',\n+setup(\n+    name="plone.portlet.collection",\n     version=version,\n     description="A portlet that fetches results from a collection",\n-    long_description=open("README.rst").read() + "\\n" +\n-    open("CHANGES.rst").read(),\n+    long_description=open("README.rst").read() + "\\n" + open("CHANGES.rst").read(),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -22,26 +23,26 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'collection portlet\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.portlet.collection/\',\n-    license=\'GPL version 2\',\n+    keywords="collection portlet",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.portlet.collection/",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', "plone.portlet"],\n+    namespace_packages=["plone", "plone.portlet"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'setuptools\',\n-        \'plone.memoize\',\n-        \'plone.portlets\',\n-        \'plone.app.portlets\',\n-        \'plone.app.vocabularies\',\n+        "setuptools",\n+        "plone.memoize",\n+        "plone.portlets",\n+        "plone.app.portlets",\n+        "plone.app.vocabularies",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.testing\',\n-            \'plone.app.contenttypes\',\n+        "test": [\n+            "plone.app.testing",\n+            "plone.app.contenttypes"\n         ],\n-    }\n+    },\n )\n'

Repository: plone.portlet.collection


Branch: refs/heads/master
Date: 2022-05-17T14:48:19+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.portlet.collection/commit/b431e18561cbdced3ef0615b789634c6c0790c7b

add extras_require to setup.py

- add plone.app.robotframework

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 6075604..b725914 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -42,7 +42,8 @@\n     extras_require={\n         "test": [\n             "plone.app.testing",\n-            "plone.app.contenttypes"\n+            "plone.app.contenttypes",\n+            "plone.app.robotframework[debug]",\n         ],\n     },\n )\n'

Repository: plone.portlet.collection


Branch: refs/heads/master
Date: 2022-05-17T14:50:02+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.portlet.collection/commit/d4894eb9ab11fce7660e7242719cdd8612fd2ded

Add former removed HTML Entity to template

- zpretty remove the HTML Entity
- re-add &amp;hellip; in the "More Link"

Files changed:
M plone/portlet/collection/collection.pt

b'diff --git a/plone/portlet/collection/collection.pt b/plone/portlet/collection/collection.pt\nindex dd691e9..6c7c862 100644\n--- a/plone/portlet/collection/collection.pt\n+++ b/plone/portlet/collection/collection.pt\n@@ -110,7 +110,7 @@\n         <span class="hiddenStructure"><span tal:replace="view/data/header" />\n           -\n         </span>\n-        <span i18n:translate="more_url">More</span>\n+        <span i18n:translate="more_url">More&hellip;</span>\n       </a>\n     </div>\n \n'

Repository: plone.portlet.collection


Branch: refs/heads/master
Date: 2022-05-17T15:21:15+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.portlet.collection/commit/c54866a9309be85c42ec0e8ef4759ce18c817d7f

add changenote

Files changed:
A news/32.bugfix

b'diff --git a/news/32.bugfix b/news/32.bugfix\nnew file mode 100644\nindex 0000000..a8fc45b\n--- /dev/null\n+++ b/news/32.bugfix\n@@ -0,0 +1,3 @@\n+Update ICollectionPortlet Schema \n+set Option `required` to `False` of schema.Bool\n+[1letter]\n\\ No newline at end of file\n'

Repository: plone.portlet.collection


Branch: refs/heads/master
Date: 2022-05-19T13:03:51+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.portlet.collection/commit/21e2acdad34eec5657bd84c0efa5751fc61c388f

Update base.cfg

- remove part releaser
- remove part robot
- update part plone-helper-scripts

Files changed:
M base.cfg

b"diff --git a/base.cfg b/base.cfg\nindex 205192e..b9748fd 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -11,10 +11,8 @@ parts =\n     coverage\n     test-coverage\n     createcoverage\n-    releaser\n     i18ndude\n     omelette\n-    robot\n     plone-helper-scripts\n     vscode\n \n@@ -83,32 +81,21 @@ recipe = zc.recipe.egg\n eggs = createcoverage\n \n \n-[robot]\n-recipe = zc.recipe.egg\n-eggs =\n-    ${test:eggs}\n-    plone.app.robotframework[debug,reload]\n-\n-\n-[releaser]\n-recipe = zc.recipe.egg\n-eggs = zest.releaser\n-\n-\n [i18ndude]\n recipe = zc.recipe.egg\n eggs = i18ndude\n \n+\n [plone-helper-scripts]\n recipe = zc.recipe.egg\n eggs =\n-   Products.CMFPlone\n    ${instance:eggs}\n interpreter = zopepy\n scripts =\n    zopepy\n    plone-compile-resources\n \n+\n [versions]\n collective.recipe.vscode=0.1.8\n # Don't use a released version\n"

Repository: plone.portlet.collection


Branch: refs/heads/master
Date: 2022-05-19T16:18:50+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.portlet.collection/commit/e9bb73cc85713864ff7bb451a382e6216dfbdc92

Update Test Setup

- remove PLONE_APP_CONTENTTYPES_FIXTURE Layer
- add PLONE_FIXTURE Layer

Files changed:
M plone/portlet/collection/testing.py
M setup.py

b'diff --git a/plone/portlet/collection/testing.py b/plone/portlet/collection/testing.py\nindex a83cf23..f845c4c 100644\n--- a/plone/portlet/collection/testing.py\n+++ b/plone/portlet/collection/testing.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n+from plone.app.contenttypes.testing import PLONE_FIXTURE\n from plone.app.testing import applyProfile\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n@@ -12,7 +12,7 @@\n \n class PlonePortletCollection(PloneSandboxLayer):\n \n-    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n+    defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         import plone.portlet.collection\ndiff --git a/setup.py b/setup.py\nindex b725914..6075604 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -42,8 +42,7 @@\n     extras_require={\n         "test": [\n             "plone.app.testing",\n-            "plone.app.contenttypes",\n-            "plone.app.robotframework[debug]",\n+            "plone.app.contenttypes"\n         ],\n     },\n )\n'

Repository: plone.portlet.collection


Branch: refs/heads/master
Date: 2022-05-23T08:41:24+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.portlet.collection/commit/1cb50281f3bdc222d92d0114fd8af080b03b5e9e

Merge pull request #33 from plone/1letter/fix#32

1letter/fix#32

Files changed:
A base.cfg
A buildout.cfg
A news/32.bugfix
A requirements-6.0.x.txt
A test_plone60.cfg
M .gitignore
M plone/__init__.py
M plone/portlet/__init__.py
M plone/portlet/collection/__init__.py
M plone/portlet/collection/collection.pt
M plone/portlet/collection/collection.py
M plone/portlet/collection/testing.py
M plone/portlet/collection/tests/test_functional_doctest.py
M plone/portlet/collection/tests/test_portlet_collection.py
M setup.cfg
M setup.py

b'diff --git a/.gitignore b/.gitignore\nindex 1177e10..66edeab 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -22,3 +22,4 @@\n /.coverage\n coverage.xml\n zptlint.log\n+/venv\n\\ No newline at end of file\ndiff --git a/base.cfg b/base.cfg\nnew file mode 100644\nindex 0000000..b9748fd\n--- /dev/null\n+++ b/base.cfg\n@@ -0,0 +1,102 @@\n+[buildout]\n+show-picked-versions = true\n+extensions =\n+    mr.developer\n+\n+parts =\n+    instance\n+    test\n+# we use tox for testing and linting, by default\n+#    code-analysis\n+    coverage\n+    test-coverage\n+    createcoverage\n+    i18ndude\n+    omelette\n+    plone-helper-scripts\n+    vscode\n+\n+develop = .\n+\n+abi-tag-eggs = true\n+\n+sources-dir = src-mrd\n+\n+[instance]\n+recipe = plone.recipe.zope2instance\n+user = admin:admin\n+http-address = 8080\n+environment-vars =\n+    zope_i18n_compile_mo_files true\n+eggs =\n+    Plone\n+    Pillow\n+    plone.portlet.collection [test]\n+\n+[vscode]\n+recipe = collective.recipe.vscode\n+eggs = ${instance:eggs}\n+autocomplete-use-omelette = True\n+\n+# [code-analysis]\n+# recipe = plone.recipe.codeanalysis\n+# directory = ${buildout:directory}/src/ukd\n+# return-status-codes = False\n+\n+\n+[omelette]\n+recipe = collective.recipe.omelette\n+eggs = ${instance:eggs}\n+\n+\n+[test]\n+recipe = zc.recipe.testrunner\n+eggs = ${instance:eggs}\n+initialization =\n+    os.environ[\'TZ\'] = \'UTC\'\n+defaults = [\'-s\', \'plone.portlet.collection\', \'--auto-color\', \'--auto-progress\']\n+\n+\n+[coverage]\n+recipe = zc.recipe.egg\n+eggs = coverage\n+\n+\n+[test-coverage]\n+recipe = collective.recipe.template\n+input = inline:\n+    #!/bin/bash\n+    export TZ=UTC\n+    ${buildout:directory}/bin/coverage run bin/test $*\n+    ${buildout:directory}/bin/coverage html\n+    ${buildout:directory}/bin/coverage report -m --fail-under=90\n+    # Fail (exit status 1) if coverage returns exit status 2 (this happens\n+    # when test coverage is below 100%.\n+output = ${buildout:directory}/bin/test-coverage\n+mode = 755\n+\n+\n+[createcoverage]\n+recipe = zc.recipe.egg\n+eggs = createcoverage\n+\n+\n+[i18ndude]\n+recipe = zc.recipe.egg\n+eggs = i18ndude\n+\n+\n+[plone-helper-scripts]\n+recipe = zc.recipe.egg\n+eggs =\n+   ${instance:eggs}\n+interpreter = zopepy\n+scripts =\n+   zopepy\n+   plone-compile-resources\n+\n+\n+[versions]\n+collective.recipe.vscode=0.1.8\n+# Don\'t use a released version\n+plone.portlet.collection =\ndiff --git a/buildout.cfg b/buildout.cfg\nnew file mode 100644\nindex 0000000..731ebd2\n--- /dev/null\n+++ b/buildout.cfg\n@@ -0,0 +1,3 @@\n+[buildout]\n+extends =\n+    test_plone60.cfg\ndiff --git a/news/32.bugfix b/news/32.bugfix\nnew file mode 100644\nindex 0000000..a8fc45b\n--- /dev/null\n+++ b/news/32.bugfix\n@@ -0,0 +1,3 @@\n+Update ICollectionPortlet Schema \n+set Option `required` to `False` of schema.Bool\n+[1letter]\n\\ No newline at end of file\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/portlet/__init__.py b/plone/portlet/__init__.py\nindex f48ad10..05f0beb 100644\n--- a/plone/portlet/__init__.py\n+++ b/plone/portlet/__init__.py\n@@ -1,6 +1,7 @@\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/plone/portlet/collection/__init__.py b/plone/portlet/collection/__init__.py\nindex 57208db..8af31d7 100644\n--- a/plone/portlet/collection/__init__.py\n+++ b/plone/portlet/collection/__init__.py\n@@ -7,5 +7,10 @@\n DEFAULT_ADD_CONTENT_PERMISSION = "%s: Add collection portlet" % PROJECTNAME\n \n addPermission(\n-    DEFAULT_ADD_CONTENT_PERMISSION, ("Manager", "Site Administrator", "Owner",)\n+    DEFAULT_ADD_CONTENT_PERMISSION,\n+    (\n+        "Manager",\n+        "Site Administrator",\n+        "Owner",\n+    ),\n )\ndiff --git a/plone/portlet/collection/collection.pt b/plone/portlet/collection/collection.pt\nindex e829fbc..6c7c862 100644\n--- a/plone/portlet/collection/collection.pt\n+++ b/plone/portlet/collection/collection.pt\n@@ -1,20 +1,33 @@\n-<html xmlns="http://www.w3.org/1999/xhtml"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      tal:omit-tag="">\n+<html\n+    xmlns="http://www.w3.org/1999/xhtml"\n+    xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+    xmlns:tal="http://xml.zope.org/namespaces/tal"\n+    tal:omit-tag=""\n+    >\n \n-  <div class="card portlet portletCollection"\n+  <div\n+      class="card portlet portletCollection"\n+      tal:define="\n+        collection_url view/collection_url;\n+        plone_view context/@@plone;\n+        toLocalizedTime nocall:plone_view/toLocalizedTime;\n+        viewActions python:context.portal_registry.get(\'plone.types_use_view_action_in_listings\', []);\n+        icons nocall:context/@@iconresolver;\n+        normalizeString nocall:plone_view/normalizeString;\n+      "\n+      tal:attributes="\n+        class string:card portlet portletCollection ${view/css_class};\n+      "\n       i18n:domain="plone"\n-      tal:define="collection_url view/collection_url;\n-                  plone_view context/@@plone;\n-                  toLocalizedTime nocall:plone_view/toLocalizedTime;\n-                  viewActions python:context.portal_registry.get(\'plone.types_use_view_action_in_listings\', []);\n-                  icons nocall:context/@@iconresolver;\n-                  normalizeString nocall:plone_view/normalizeString;"\n-      tal:attributes="class string:card portlet portletCollection ${view/css_class}">\n+      >\n \n     <div class="card-header">\n-      <a tal:attributes="href collection_url" tal:omit-tag="not:view/data/show_more">\n+      <a\n+          tal:omit-tag="not:view/data/show_more"\n+          tal:attributes="\n+            href collection_url;\n+          "\n+          >\n         <span tal:content="view/data/header" />\n       </a>\n     </div>\n@@ -22,54 +35,85 @@\n     <div class="card-body">\n       <ul>\n         <tal:events tal:repeat="obj view/results">\n-        <li class="portletItem"\n-            tal:define="plone_layout context/@@plone_layout;\n-                        portal context/@@plone_portal_state/portal;\n-                        image_scale portal/@@image_scale;\n-                        plone_view context/@@plone;\n-                        oddrow repeat/obj/odd;\n-                        useView python:obj.portal_type in viewActions;\n-                        itemUrl python:useView and obj.getURL() + \'/view\' or obj.getURL();\n-                        item_wf_state obj/review_state;\n-                        item_wf_state_class python:\'state-\' + plone_view.normalizeString(item_wf_state);\n-                        item_type obj/portal_type;\n-                        supress_icon    view/data/no_icons;\n-                        supress_thumb   view/data/no_thumbs;\n-                        thumb_scale view/thumb_scale;\n-                        item_type_class python:(\'contenttype-\' + plone_view.normalizeString(item_type)) if not supress_icon else \'\'"\n-            tal:attributes="class python:oddrow and \'portletItem even\' or \'portletItem odd\'">\n-          <a href="#"\n-              tal:attributes="href itemUrl;\n-                              class  string:tile $item_type_class $item_wf_state_class;\n-                              title obj/Description">\n+          <li\n+              class="portletItem"\n+              tal:define="\n+                plone_layout context/@@plone_layout;\n+                portal context/@@plone_portal_state/portal;\n+                image_scale portal/@@image_scale;\n+                plone_view context/@@plone;\n+                oddrow repeat/obj/odd;\n+                useView python:obj.portal_type in viewActions;\n+                itemUrl python:useView and obj.getURL() + \'/view\' or obj.getURL();\n+                item_wf_state obj/review_state;\n+                item_wf_state_class python:\'state-\' + plone_view.normalizeString(item_wf_state);\n+                item_type obj/portal_type;\n+                supress_icon    view/data/no_icons;\n+                supress_thumb   view/data/no_thumbs;\n+                thumb_scale view/thumb_scale;\n+                item_type_class python:(\'contenttype-\' + plone_view.normalizeString(item_type)) if not supress_icon else \'\';\n+              "\n+              tal:attributes="\n+                class python:oddrow and \'portletItem even\' or \'portletItem odd\';\n+              "\n+              >\n+            <a\n+                href="#"\n+                tal:attributes="\n+                  href itemUrl;\n+                  class  string:tile $item_type_class $item_wf_state_class;\n+                  title obj/Description;\n+                "\n+                >\n \n-            <tal:icon tal:condition="python: not supress_icon and item_type != \'File\'"\n-                      tal:replace="structure python:icons.tag(f\'contenttype/{normalizeString(item_type)}\')" />\n-            <tal:icon tal:condition="python: not supress_icon and item_type == \'File\'"\n-                      tal:replace="structure python:icons.tag(f\'mimetype-{obj.mime_type}\')" />\n-            <img tal:condition="python: obj.getIcon and thumb_scale and not supress_thumb"\n-                tal:replace="structure python:image_scale.tag(obj, \'image\', scale=thumb_scale, css_class=\'float-end thumb-\'+thumb_scale)" />\n+              <tal:icon\n+                  tal:condition="python: not supress_icon and item_type != \'File\'"\n+                  tal:replace="structure python:icons.tag(f\'contenttype/{normalizeString(item_type)}\')"\n+                  />\n+              <tal:icon\n+                  tal:condition="python: not supress_icon and item_type == \'File\'"\n+                  tal:replace="structure python:icons.tag(f\'mimetype-{obj.mime_type}\')"\n+                  />\n+              <img\n+                  tal:condition="python: obj.getIcon and thumb_scale and not supress_thumb"\n+                  tal:replace="structure python:image_scale.tag(obj, \'image\', scale=thumb_scale, css_class=\'float-end thumb-\'+thumb_scale)"\n+                  />\n \n-            <span tal:replace="obj/Title">Title</span>\n-          </a>\n-          <div class="portletItemDetails"\n-               tal:condition="view/data/show_dates"\n-               tal:define="obj_date python:obj.start and obj.start or obj.Date();"\n-               tal:content="python:toLocalizedTime(obj_date)">May 5</div>\n-        </li>\n+              <span tal:replace="obj/Title">Title</span>\n+            </a>\n+            <div\n+                class="portletItemDetails"\n+                tal:define="\n+                  obj_date python:obj.start and obj.start or obj.Date();\n+                "\n+                tal:condition="view/data/show_dates"\n+                tal:content="python:toLocalizedTime(obj_date)"\n+                >May 5</div>\n+          </li>\n         </tal:events>\n       </ul>\n     </div>\n \n-    <div class="card-footer"\n+    <div\n+        class="card-footer"\n+        tal:define="\n+          showMore view/data/show_more;\n+        "\n         tal:condition="python:showMore or view.include_empty_footer()"\n-        tal:define="showMore view/data/show_more">\n-      <a tal:condition="showMore" tal:attributes="href collection_url">\n-        <span class="hiddenStructure"><span tal:replace="view/data/header" /> - </span>\n+        >\n+      <a\n+          tal:condition="showMore"\n+          tal:attributes="\n+            href collection_url;\n+          "\n+          >\n+        <span class="hiddenStructure"><span tal:replace="view/data/header" />\n+          -\n+        </span>\n         <span i18n:translate="more_url">More&hellip;</span>\n       </a>\n     </div>\n \n   </div>\n \n-</html>\n\\ No newline at end of file\n+</html>\ndiff --git a/plone/portlet/collection/collection.py b/plone/portlet/collection/collection.py\nindex 2243674..b41105d 100644\n--- a/plone/portlet/collection/collection.py\n+++ b/plone/portlet/collection/collection.py\n@@ -29,101 +29,114 @@\n \n try:\n     from plone.app.collection.interfaces import ICollection\n+\n     COLLECTIONS.append(ICollection.__identifier__)\n except ImportError:\n     pass\n \n try:\n     from plone.app.contenttypes.interfaces import ICollection\n+\n     COLLECTIONS.append(ICollection.__identifier__)\n except ImportError:\n     pass\n \n \n class ICollectionPortlet(IPortletDataProvider):\n-    """A portlet which renders the results of a collection object.\n-    """\n+    """A portlet which renders the results of a collection object."""\n \n     header = schema.TextLine(\n-        title=_(u"Portlet header"),\n-        description=_(u"Title of the rendered portlet"),\n-        required=True)\n+        title=_("Portlet header"),\n+        description=_("Title of the rendered portlet"),\n+        required=True,\n+    )\n \n     widget(\n-        \'uid\',\n+        "uid",\n         RelatedItemsFieldWidget,\n-        pattern_options={\n-            \'selectableTypes\': [\'Collection\']\n-        }\n+        pattern_options={"selectableTypes": ["Collection"]},\n     )\n     uid = schema.Choice(\n-        title=_(u"Target collection"),\n-        description=_(u"Find the collection which provides the items to list"),\n+        title=_("Target collection"),\n+        description=_("Find the collection which provides the items to list"),\n         required=True,\n-        vocabulary=\'plone.app.vocabularies.Catalog\',\n+        vocabulary="plone.app.vocabularies.Catalog",\n     )\n \n     limit = schema.Int(\n-        title=_(u"Limit"),\n-        description=_(u"Specify the maximum number of items to show in the "\n-                      u"portlet. Leave this blank to show all items."),\n-        required=False)\n+        title=_("Limit"),\n+        description=_(\n+            "Specify the maximum number of items to show in the "\n+            "portlet. Leave this blank to show all items."\n+        ),\n+        required=False,\n+    )\n \n     random = schema.Bool(\n-        title=_(u"Select random items"),\n-        description=_(u"If enabled, items will be selected randomly from the "\n-                      u"collection, rather than based on its sort order."),\n-        required=True,\n-        default=False)\n+        title=_("Select random items"),\n+        description=_(\n+            "If enabled, items will be selected randomly from the "\n+            "collection, rather than based on its sort order."\n+        ),\n+        required=False,\n+        default=False,\n+    )\n \n     show_more = schema.Bool(\n-        title=_(u"Show more... link"),\n-        description=_(u"If enabled, a more... link will appear in the footer "\n-                      u"of the portlet, linking to the underlying "\n-                      u"Collection."),\n-        required=True,\n-        default=True)\n+        title=_("Show more... link"),\n+        description=_(\n+            "If enabled, a more... link will appear in the footer "\n+            "of the portlet, linking to the underlying "\n+            "Collection."\n+        ),\n+        required=False,\n+        default=True,\n+    )\n \n     show_dates = schema.Bool(\n-        title=_(u"Show dates"),\n-        description=_(u"If enabled, effective dates will be shown underneath "\n-                      u"the items listed."),\n-        required=True,\n-        default=False)\n+        title=_("Show dates"),\n+        description=_(\n+            "If enabled, effective dates will be shown underneath " "the items listed."\n+        ),\n+        required=False,\n+        default=False,\n+    )\n \n     exclude_context = schema.Bool(\n-        title=_(u"Exclude the Current Context"),\n+        title=_("Exclude the Current Context"),\n         description=_(\n-            u"If enabled, the listing will not include the current item the "\n-            u"portlet is rendered for if it otherwise would be."),\n-        required=True,\n-        default=True)\n+            "If enabled, the listing will not include the current item the "\n+            "portlet is rendered for if it otherwise would be."\n+        ),\n+        required=False,\n+        default=True,\n+    )\n \n     no_icons = schema.Bool(\n-        title=_(u"Suppress Icons"),\n-        description=_(\n-            u"If enabled, the portlet will not show document type icons."\n-        ),\n-        required=True,\n-        default=False)\n+        title=_("Suppress Icons"),\n+        description=_("If enabled, the portlet will not show document type icons."),\n+        required=False,\n+        default=False,\n+    )\n \n     thumb_scale = schema.TextLine(\n-        title=_(u"Override thumb scale"),\n+        title=_("Override thumb scale"),\n         description=_(\n-            u"Enter a valid scale name"\n-            u" (see \'Image Handling\' control panel) to override"\n-            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n-            u" Leave empty to use default (see \'Site\' control panel)."\n+            "Enter a valid scale name"\n+            " (see \'Image Handling\' control panel) to override"\n+            " (e.g. icon, tile, thumb, mini, preview, ... )."\n+            " Leave empty to use default (see \'Site\' control panel)."\n         ),\n         required=False,\n-        default=u\'\')\n+        default="",\n+    )\n \n     no_thumbs = schema.Bool(\n-        title=_(u"Suppress thumbs"),\n-        description=_(\n-            u"If enabled, the portlet will not show thumbs."),\n-        required=True,\n-        default=False)\n+        title=_("Suppress thumbs"),\n+        description=_("If enabled, the portlet will not show thumbs."),\n+        required=False,\n+        default=False,\n+    )\n \n \n @implementer(ICollectionPortlet)\n@@ -133,7 +146,8 @@ class Assignment(base.Assignment):\n     This is what is actually managed through the portlets UI and associated\n     with columns.\n     """\n-    header = u""\n+\n+    header = ""\n     limit = None\n     random = False\n     show_more = True\n@@ -145,10 +159,19 @@ class Assignment(base.Assignment):\n     # bbb\n     target_collection = None\n \n-    def __init__(self, header=u"", uid=None, limit=None,\n-                 random=False, show_more=True, show_dates=False,\n-                 exclude_context=True, no_icons=False, no_thumbs=False,\n-                 thumb_scale=None):\n+    def __init__(\n+        self,\n+        header="",\n+        uid=None,\n+        limit=None,\n+        random=False,\n+        show_more=True,\n+        show_dates=False,\n+        exclude_context=True,\n+        no_icons=False,\n+        no_thumbs=False,\n+        thumb_scale=None,\n+    ):\n         self.header = header\n         self.uid = uid\n         self.limit = limit\n@@ -172,17 +195,18 @@ def _uid(self):\n         # attribute, which is probably because it has an old\n         # \'target_collection\' attribute that needs to be converted.\n         path = self.target_collection\n-        portal = getToolByName(self, \'portal_url\').getPortalObject()\n+        portal = getToolByName(self, "portal_url").getPortalObject()\n         try:\n-            collection = portal.unrestrictedTraverse(path.lstrip(\'/\'))\n+            collection = portal.unrestrictedTraverse(path.lstrip("/"))\n         except (AttributeError, KeyError, TypeError, NotFound):\n             return\n         return collection.UID()\n+\n     uid = ComputedAttribute(_uid, 1)\n \n \n class Renderer(base.Renderer):\n-    _template = ViewPageTemplateFile(\'collection.pt\')\n+    _template = ViewPageTemplateFile("collection.pt")\n     render = _template\n \n     def __init__(self, *args):\n@@ -217,22 +241,21 @@ def _standard_results(self):\n         results = []\n         collection = self.collection()\n         if collection is not None:\n-            context_path = \'/\'.join(self.context.getPhysicalPath())\n-            exclude_context = getattr(self.data, \'exclude_context\', False)\n+            context_path = "/".join(self.context.getPhysicalPath())\n+            exclude_context = getattr(self.data, "exclude_context", False)\n             limit = self.data.limit\n             if limit and limit > 0:\n                 # pass on batching hints to the catalog\n                 results = collection.queryCatalog(\n-                    batch=True,\n-                    b_size=limit + exclude_context\n+                    batch=True, b_size=limit + exclude_context\n                 )\n                 results = results._sequence\n             else:\n                 results = collection.queryCatalog()\n             if exclude_context:\n                 results = [\n-                    brain for brain in results\n-                    if brain.getPath() != context_path]\n+                    brain for brain in results if brain.getPath() != context_path\n+                ]\n             if limit and limit > 0:\n                 results = results[:limit]\n         return results\n@@ -242,8 +265,8 @@ def _random_results(self):\n         results = []\n         collection = self.collection()\n         if collection is not None:\n-            context_path = \'/\'.join(self.context.getPhysicalPath())\n-            exclude_context = getattr(self.data, \'exclude_context\', False)\n+            context_path = "/".join(self.context.getPhysicalPath())\n+            exclude_context = getattr(self.data, "exclude_context", False)\n             results = collection.queryCatalog(sort_on=None)\n             if results is None:\n                 return []\n@@ -251,8 +274,8 @@ def _random_results(self):\n \n             if exclude_context:\n                 results = [\n-                    brain for brain in results\n-                    if brain.getPath() != context_path]\n+                    brain for brain in results if brain.getPath() != context_path\n+                ]\n             if len(results) < limit:\n                 limit = len(results)\n             results = random.sample(results, limit)\n@@ -280,8 +303,7 @@ def thumb_scale(self):\n         if self.data.thumb_scale:\n             return self.data.thumb_scale\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix="plone", check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         if settings.no_thumbs_portlet:\n             return None\n         thumb_scale_portlet = settings.thumb_scale_portlet\n@@ -290,21 +312,17 @@ def thumb_scale(self):\n     def getMimeTypeIcon(self, obj):\n         fileo = obj.getObject().file\n         portal_url = getNavigationRoot(self.context)\n-        mtt = getToolByName(self.context, \'mimetypes_registry\')\n+        mtt = getToolByName(self.context, "mimetypes_registry")\n         if fileo.contentType:\n             ctype = mtt.lookup(fileo.contentType)\n-            return os.path.join(\n-                portal_url,\n-                guess_icon_path(ctype[0])\n-            )\n+            return os.path.join(portal_url, guess_icon_path(ctype[0]))\n         return None\n \n \n class AddForm(formhelper.AddForm):\n     schema = ICollectionPortlet\n-    label = _(u"Add Collection Portlet")\n-    description = _(u"This portlet displays a listing of items from a "\n-                    u"Collection.")\n+    label = _("Add Collection Portlet")\n+    description = _("This portlet displays a listing of items from a " "Collection.")\n \n     def create(self, data):\n         return Assignment(**data)\n@@ -312,6 +330,5 @@ def create(self, data):\n \n class EditForm(formhelper.EditForm):\n     schema = ICollectionPortlet\n-    label = _(u"Edit Collection Portlet")\n-    description = _(u"This portlet displays a listing of items from a "\n-                    u"Collection.")\n+    label = _("Edit Collection Portlet")\n+    description = _("This portlet displays a listing of items from a " "Collection.")\ndiff --git a/plone/portlet/collection/testing.py b/plone/portlet/collection/testing.py\nindex 1b80651..f845c4c 100644\n--- a/plone/portlet/collection/testing.py\n+++ b/plone/portlet/collection/testing.py\n@@ -1,50 +1,39 @@\n # -*- coding: utf-8 -*-\n-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n-from plone.app.testing import PloneSandboxLayer\n+from plone.app.contenttypes.testing import PLONE_FIXTURE\n from plone.app.testing import applyProfile\n-from plone.app.testing import PLONE_FIXTURE\n-from plone.app.testing import IntegrationTesting\n from plone.app.testing import FunctionalTesting\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import setRoles\n+from plone.app.testing import IntegrationTesting\n from plone.app.testing import login\n-\n+from plone.app.testing import PloneSandboxLayer\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from zope.configuration import xmlconfig\n \n \n class PlonePortletCollection(PloneSandboxLayer):\n \n-    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n+    defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         import plone.portlet.collection\n+\n         xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.portlet.collection,\n-            context=configurationContext\n+            "configure.zcml", plone.portlet.collection, context=configurationContext\n         )\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.portlet.collection:default\')\n-        portal.acl_users.userFolderAddUser(\'admin\',\n-                                           \'secret\',\n-                                           [\'Manager\'],\n-                                           [])\n-        login(portal, \'admin\')\n+        applyProfile(portal, "plone.portlet.collection:default")\n+        portal.acl_users.userFolderAddUser("admin", "secret", ["Manager"], [])\n+        login(portal, "admin")\n         portal.portal_workflow.setDefaultChain("simple_publication_workflow")\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n-        portal.invokeFactory(\n-            "Folder",\n-            id="test-folder",\n-            title=u"Test Folder"\n-        )\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n+        portal.invokeFactory("Folder", id="test-folder", title="Test Folder")\n+\n \n PLONE_PORTLET_COLLECTION_FIXTURE = PlonePortletCollection()\n PLONE_PORTLET_COLLECTION_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_PORTLET_COLLECTION_FIXTURE,),\n-    name="PlonePortletCollection:Integration"\n+    bases=(PLONE_PORTLET_COLLECTION_FIXTURE,), name="PlonePortletCollection:Integration"\n )\n PLONE_PORTLET_COLLECTION_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_PORTLET_COLLECTION_FIXTURE,),\n-    name="PlonePortletCollection:Functional"\n+    bases=(PLONE_PORTLET_COLLECTION_FIXTURE,), name="PlonePortletCollection:Functional"\n )\ndiff --git a/plone/portlet/collection/tests/test_functional_doctest.py b/plone/portlet/collection/tests/test_functional_doctest.py\nindex b922fd8..8eecfe6 100644\n--- a/plone/portlet/collection/tests/test_functional_doctest.py\n+++ b/plone/portlet/collection/tests/test_functional_doctest.py\n@@ -3,35 +3,37 @@\n \n    These test are only triggered when Plone 4 (and plone.testing) is installed.\n """\n-import doctest\n-\n-import unittest\n-import pprint\n-\n+from plone.portlet.collection.testing import PLONE_PORTLET_COLLECTION_FUNCTIONAL_TESTING\n from plone.testing import layered\n \n-from plone.portlet.collection.testing import \\\n-    PLONE_PORTLET_COLLECTION_FUNCTIONAL_TESTING\n+import doctest\n+import pprint\n+import unittest\n \n \n optionflags = (\n-    doctest.ELLIPSIS |\n-    doctest.NORMALIZE_WHITESPACE |\n-    doctest.REPORT_ONLY_FIRST_FAILURE\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n )\n normal_testfiles = [\n-    \'functional.txt\',\n+    "functional.txt",\n ]\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(doctest.DocFileSuite(test,\n-                                     optionflags=optionflags,\n-                                     globs={\'pprint\': pprint.pprint,\n-                                            }\n-                                     ),\n-                layer=PLONE_PORTLET_COLLECTION_FUNCTIONAL_TESTING)\n-        for test in normal_testfiles])\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite(\n+                    test,\n+                    optionflags=optionflags,\n+                    globs={\n+                        "pprint": pprint.pprint,\n+                    },\n+                ),\n+                layer=PLONE_PORTLET_COLLECTION_FUNCTIONAL_TESTING,\n+            )\n+            for test in normal_testfiles\n+        ]\n+    )\n     return suite\ndiff --git a/plone/portlet/collection/tests/test_portlet_collection.py b/plone/portlet/collection/tests/test_portlet_collection.py\nindex 121dddb..732b142 100644\n--- a/plone/portlet/collection/tests/test_portlet_collection.py\n+++ b/plone/portlet/collection/tests/test_portlet_collection.py\n@@ -1,19 +1,19 @@\n from plone.app.portlets.storage import PortletAssignmentMapping\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import setRoles\n from plone.app.testing import logout\n-from plone.portlets.interfaces import IPortletType\n-from plone.portlets.interfaces import IPortletManager\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.portlet.collection import collection\n+from plone.portlet.collection.testing import (\n+    PLONE_PORTLET_COLLECTION_INTEGRATION_TESTING,\n+)\n from plone.portlets.interfaces import IPortletAssignment\n from plone.portlets.interfaces import IPortletDataProvider\n+from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n+from plone.portlets.interfaces import IPortletType\n from Products.CMFCore.utils import getToolByName\n-from zope.component import getUtility, getMultiAdapter\n-\n-from plone.portlet.collection import collection\n-from plone.portlet.collection.testing import (\n-    PLONE_PORTLET_COLLECTION_INTEGRATION_TESTING\n-)\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n import unittest\n \n@@ -23,53 +23,51 @@ class TestPortlet(unittest.TestCase):\n     layer = PLONE_PORTLET_COLLECTION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n         self.folder = self.portal.folder\n \n     def testPortletTypeRegistered(self):\n-        portlet = getUtility(\n-            IPortletType, name=\'plone.portlet.collection.Collection\')\n-        self.assertEqual(\n-            portlet.addview, \'plone.portlet.collection.Collection\')\n+        portlet = getUtility(IPortletType, name="plone.portlet.collection.Collection")\n+        self.assertEqual(portlet.addview, "plone.portlet.collection.Collection")\n \n     def testInterfaces(self):\n-        portlet = collection.Assignment(header=u"title")\n+        portlet = collection.Assignment(header="title")\n         self.assertTrue(IPortletAssignment.providedBy(portlet))\n         self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n-        portlet = getUtility(\n-            IPortletType, name=\'plone.portlet.collection.Collection\')\n-        mapping = self.portal.restrictedTraverse(\n-            \'++contextportlets++plone.leftcolumn\')\n+        portlet = getUtility(IPortletType, name="plone.portlet.collection.Collection")\n+        mapping = self.portal.restrictedTraverse("++contextportlets++plone.leftcolumn")\n         for m in mapping.keys():\n             del mapping[m]\n-        addview = mapping.restrictedTraverse(\'+/\' + portlet.addview)\n-        addview.createAndAdd(data={\'header\': u"test title"})\n+        addview = mapping.restrictedTraverse("+/" + portlet.addview)\n+        addview.createAndAdd(data={"header": "test title"})\n         self.assertEqual(len(mapping), 1)\n         self.assertTrue(isinstance(mapping.values()[0], collection.Assignment))\n \n     def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n         request = self.folder.REQUEST\n-        mapping[\'foo\'] = collection.Assignment(header=u"title")\n-        editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n+        mapping["foo"] = collection.Assignment(header="title")\n+        editview = getMultiAdapter((mapping["foo"], request), name="edit")\n         self.assertTrue(isinstance(editview, collection.EditForm))\n \n     def testRenderer(self):\n         context = self.folder\n         request = self.folder.REQUEST\n-        view = self.folder.restrictedTraverse(\'@@plone\')\n+        view = self.folder.restrictedTraverse("@@plone")\n         manager = getUtility(\n-            IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n-        assignment = collection.Assignment(header=u"title")\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n+        assignment = collection.Assignment(header="title")\n \n-        renderer = getMultiAdapter((\n-            context, request, view, manager, assignment), IPortletRenderer)\n+        renderer = getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n+        )\n         self.assertTrue(isinstance(renderer, collection.Renderer))\n \n \n@@ -78,42 +76,41 @@ class TestRenderer(unittest.TestCase):\n     layer = PLONE_PORTLET_COLLECTION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n         self.folder = self.portal.folder\n \n-    def renderer(self, context=None, request=None, view=None, manager=None,\n-                 assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n+        view = view or self.folder.restrictedTraverse("@@plone")\n         manager = manager or getUtility(\n-            IPortletManager, name=\'plone.rightcolumn\', context=self.portal)\n-        assignment = assignment or collection.Assignment(header=u"title")\n+            IPortletManager, name="plone.rightcolumn", context=self.portal\n+        )\n+        assignment = assignment or collection.Assignment(header="title")\n \n         return getMultiAdapter(\n-            (context, request, view, manager, assignment),\n-            IPortletRenderer\n+            (context, request, view, manager, assignment), IPortletRenderer\n         )\n \n     def test_render(self):\n         r = self.renderer(\n-            context=self.portal,\n-            assignment=collection.Assignment(header=u"title")\n+            context=self.portal, assignment=collection.Assignment(header="title")\n         )\n         r.update()\n         output = r.render()\n-        self.assertTrue(\'title\' in output)\n+        self.assertTrue("title" in output)\n \n     def test_css_class(self):\n         r = self.renderer(\n-            context=self.portal,\n-            assignment=collection.Assignment(header=u"Welcome text")\n+            context=self.portal, assignment=collection.Assignment(header="Welcome text")\n         )\n-        self.assertEqual(\'portlet-collection-welcome-text\', r.css_class())\n+        self.assertEqual("portlet-collection-welcome-text", r.css_class())\n \n \n class TestCollectionQuery(unittest.TestCase):\n@@ -121,19 +118,17 @@ class TestCollectionQuery(unittest.TestCase):\n     layer = PLONE_PORTLET_COLLECTION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'folder\')\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.request["ACTUAL_URL"] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "folder")\n         self.folder = self.portal.folder\n-        self.collection = self._createType(\n-            self.folder, \'Collection\', \'collection\')\n+        self.collection = self._createType(self.folder, "Collection", "collection")\n \n     def _createType(self, context, portal_type, id, **kwargs):\n-        """Helper method to create a new type\n-        """\n-        ttool = getToolByName(context, \'portal_types\')\n+        """Helper method to create a new type"""\n+        ttool = getToolByName(context, "portal_types")\n         cat = self.portal.portal_catalog\n \n         fti = ttool.getTypeInfo(portal_type)\n@@ -142,52 +137,56 @@ def _createType(self, context, portal_type, id, **kwargs):\n         cat.indexObject(obj)\n         return obj\n \n-    def renderer(self, context=None, request=None, view=None, manager=None,\n-                 assignment=None):\n+    def renderer(\n+        self, context=None, request=None, view=None, manager=None, assignment=None\n+    ):\n         context = context or self.folder\n         request = request or self.folder.REQUEST\n-        view = view or self.folder.restrictedTraverse(\'@@plone\')\n+        view = view or self.folder.restrictedTraverse("@@plone")\n         manager = manager or getUtility(\n-            IPortletManager, name=\'plone.leftcolumn\', context=self.portal)\n+            IPortletManager, name="plone.leftcolumn", context=self.portal\n+        )\n         assignment = assignment\n-        return getMultiAdapter((\n-            context, request, view, manager, assignment),\n-            IPortletRenderer\n+        return getMultiAdapter(\n+            (context, request, view, manager, assignment), IPortletRenderer\n         )\n \n     def testPortletAvailabilityWithPrivateFolders(self):\n-        private_folder = self._createType(self.folder, \'Folder\', \'private\')\n-        public_subfolder = self._createType(private_folder, \'Folder\', \'public\')\n-        self.portal.portal_workflow.doActionFor(public_subfolder, \'publish\')\n-        self.collection = self._createType(\n-            public_subfolder, \'Collection\', \'collection\')\n-        self.portal.portal_workflow.doActionFor(self.collection, \'publish\')\n+        private_folder = self._createType(self.folder, "Folder", "private")\n+        public_subfolder = self._createType(private_folder, "Folder", "public")\n+        self.portal.portal_workflow.doActionFor(public_subfolder, "publish")\n+        self.collection = self._createType(public_subfolder, "Collection", "collection")\n+        self.portal.portal_workflow.doActionFor(self.collection, "publish")\n \n         mapping = PortletAssignmentMapping()\n-        mapping[\'foo\'] = collection.Assignment(\n-            header=u"title",\n-            uid=self.portal.folder.private.public.collection.UID()\n+        mapping["foo"] = collection.Assignment(\n+            header="title", uid=self.portal.folder.private.public.collection.UID()\n         )\n         logout()\n         collectionrenderer = self.renderer(\n-            context=None, request=None, view=None, manager=None,\n-            assignment=mapping[\'foo\']\n+            context=None,\n+            request=None,\n+            view=None,\n+            manager=None,\n+            assignment=mapping["foo"],\n         )\n \n         self.assertEqual(self.collection, collectionrenderer.collection())\n \n     def testSimpleQuery(self):\n         # set up our collection to search for Folders\n-        self.folder.collection.query = [{\n-            \'i\': \'portal_type\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Folder\',\n-        }]\n+        self.folder.collection.query = [\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Folder",\n+            }\n+        ]\n \n         # add a few folders\n         for i in range(6):\n-            self.folder.invokeFactory(\'Folder\', \'folder_%s\' % i)\n-            getattr(self.folder, \'folder_%s\' % i).reindexObject()\n+            self.folder.invokeFactory("Folder", "folder_%s" % i)\n+            getattr(self.folder, "folder_%s" % i).reindexObject()\n \n         # the folders are returned by the topic\n         collection_num_items = len(self.folder.collection.results())\n@@ -195,8 +194,8 @@ def testSimpleQuery(self):\n         self.assertTrue(collection_num_items >= 6)\n \n         mapping = PortletAssignmentMapping()\n-        mapping[\'foo\'] = collection.Assignment(\n-            header=u"title",\n+        mapping["foo"] = collection.Assignment(\n+            header="title",\n             uid=self.folder.collection.UID(),\n             exclude_context=False,\n         )\n@@ -205,24 +204,21 @@ def testSimpleQuery(self):\n             request=None,\n             view=None,\n             manager=None,\n-            assignment=mapping[\'foo\']\n+            assignment=mapping["foo"],\n         )\n         # we want the portlet to return us the same results as the collection\n-        self.assertEqual(collection_num_items, len(\n-            collectionrenderer.results()))\n+        self.assertEqual(collection_num_items, len(collectionrenderer.results()))\n \n     def testRandomQuery(self):\n         # set up our portlet renderer\n         mapping = PortletAssignmentMapping()\n-        mapping[\'foo\'] = collection.Assignment(\n-            header=u"title",\n-            random=True,\n-            uid=self.folder.collection.UID()\n+        mapping["foo"] = collection.Assignment(\n+            header="title", random=True, uid=self.folder.collection.UID()\n         )\n         # add some folders\n         for i in range(6):\n-            self.folder.invokeFactory(\'Folder\', \'folder_%s\' % i)\n-            getattr(self.folder, \'folder_%s\' % i).reindexObject()\n+            self.folder.invokeFactory("Folder", "folder_%s" % i)\n+            getattr(self.folder, "folder_%s" % i).reindexObject()\n \n         # collection with no criteria -- should return empty list\n         collectionrenderer = self.renderer(\n@@ -230,36 +226,38 @@ def testRandomQuery(self):\n             request=None,\n             view=None,\n             manager=None,\n-            assignment=mapping[\'foo\']\n+            assignment=mapping["foo"],\n         )\n         self.assertEqual(len(collectionrenderer.results()), 0)\n \n         # collection with simple criterion -- should return 1 (random) folder\n-        self.folder.collection.query = [{\n-            \'i\': \'portal_type\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'Folder\',\n-        }]\n+        self.folder.collection.query = [\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Folder",\n+            }\n+        ]\n         collectionrenderer = self.renderer(\n             context=None,\n             request=None,\n             view=None,\n             manager=None,\n-            assignment=mapping[\'foo\']\n+            assignment=mapping["foo"],\n         )\n         self.assertEqual(len(collectionrenderer.results()), 1)\n \n         # collection with multiple criteria -- should behave similarly\n         self.folder.collection.query = [\n             {\n-                \'i\': \'portal_type\',\n-                \'o\': \'plone.app.querystring.operation.string.is\',\n-                \'v\': \'Folder\',\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "Folder",\n             },\n             {\n-                \'i\': \'creator\',\n-                \'o\': \'plone.app.querystring.operation.string.is\',\n-                \'v\': \'test_user_1_\',\n+                "i": "creator",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "test_user_1_",\n             },\n         ]\n         collectionrenderer = self.renderer(\n@@ -267,19 +265,19 @@ def testRandomQuery(self):\n             request=None,\n             view=None,\n             manager=None,\n-            assignment=mapping[\'foo\']\n+            assignment=mapping["foo"],\n         )\n         collectionrenderer.results()\n \n         # collection with sorting -- should behave similarly (sort is ignored\n         # internally)\n-        self.folder.collection.sort_on = \'modified\'\n+        self.folder.collection.sort_on = "modified"\n         collectionrenderer = self.renderer(\n             context=None,\n             request=None,\n             view=None,\n             manager=None,\n-            assignment=mapping[\'foo\']\n+            assignment=mapping["foo"],\n         )\n         self.assertEqual(len(collectionrenderer.results()), 1)\n \n@@ -290,7 +288,7 @@ def testRandomQuery(self):\n             request=None,\n             view=None,\n             manager=None,\n-            assignment=mapping[\'foo\']\n+            assignment=mapping["foo"],\n         )\n         collectionrenderer.data.limit = 2\n         self.assertEqual(len(collectionrenderer.results()), 2)\n@@ -302,7 +300,7 @@ def testRandomQuery(self):\n             request=None,\n             view=None,\n             manager=None,\n-            assignment=mapping[\'foo\']\n+            assignment=mapping["foo"],\n         )\n         collectionrenderer.data.limit = 10\n         self.assertTrue(len(collectionrenderer.results()) >= 6)\n@@ -313,118 +311,130 @@ def test_exclude_context(self):\n         """\n         for idx in range(4):\n             self._createType(\n-                self.folder, \'News Item\',\n-                \'foo-news-item-title-{0}\'.format(idx))\n-        self.folder.collection.query = [{\n-            \'i\': \'portal_type\',\n-            \'o\': \'plone.app.querystring.operation.string.is\',\n-            \'v\': \'News Item\'}]\n-        self.folder.collection.sort_on = \'id\'\n-        context = self.folder[\'foo-news-item-title-1\']\n+                self.folder, "News Item", "foo-news-item-title-{0}".format(idx)\n+            )\n+        self.folder.collection.query = [\n+            {\n+                "i": "portal_type",\n+                "o": "plone.app.querystring.operation.string.is",\n+                "v": "News Item",\n+            }\n+        ]\n+        self.folder.collection.sort_on = "id"\n+        context = self.folder["foo-news-item-title-1"]\n         included = [\n-            self.folder[\'foo-news-item-title-{0}\'.format(idx)].absolute_url()\n-            for idx in (0, 2)]\n-        limited = self.folder[\'foo-news-item-title-3\'].absolute_url()\n+            self.folder["foo-news-item-title-{0}".format(idx)].absolute_url()\n+            for idx in (0, 2)\n+        ]\n+        limited = self.folder["foo-news-item-title-3"].absolute_url()\n \n         assignment = collection.Assignment(\n-            header=u"title", uid=self.folder.collection.UID(), limit=2)\n+            header="title", uid=self.folder.collection.UID(), limit=2\n+        )\n \n-        folder_renderer = self.renderer(\n-            context=self.folder, assignment=assignment)\n-        folder_results = [\n-            brain.getURL() for brain in folder_renderer.results()]\n+        folder_renderer = self.renderer(context=self.folder, assignment=assignment)\n+        folder_results = [brain.getURL() for brain in folder_renderer.results()]\n         self.assertEqual(\n-            len(folder_results), 2, \'Wrong number of folder rendered results\')\n+            len(folder_results), 2, "Wrong number of folder rendered results"\n+        )\n         self.assertIn(\n-            included[0], folder_results,\n-            \'Folder rendered results missing item\')\n+            included[0], folder_results, "Folder rendered results missing item"\n+        )\n         self.assertIn(\n-            context.absolute_url(), folder_results,\n-            \'Folder rendered results missing context item\')\n+            context.absolute_url(),\n+            folder_results,\n+            "Folder rendered results missing context item",\n+        )\n         self.assertNotIn(\n-            included[1], folder_results,\n-            \'Folder rendered results included too many items\')\n+            included[1],\n+            folder_results,\n+            "Folder rendered results included too many items",\n+        )\n         self.assertNotIn(\n-            limited, folder_results,\n-            \'Folder rendered results included way too many items\')\n+            limited,\n+            folder_results,\n+            "Folder rendered results included way too many items",\n+        )\n \n         renderer = self.renderer(context=context, assignment=assignment)\n-        results = [\n-            brain.getURL() for brain in renderer.results()]\n-        self.assertEqual(\n-            len(results), 2, \'Wrong number of context rendered results\')\n-        self.assertIn(\n-            included[0], results,\n-            \'Context rendered results missing item\')\n-        self.assertIn(\n-            included[1], results,\n-            \'Context rendered results missing item\')\n+        results = [brain.getURL() for brain in renderer.results()]\n+        self.assertEqual(len(results), 2, "Wrong number of context rendered results")\n+        self.assertIn(included[0], results, "Context rendered results missing item")\n+        self.assertIn(included[1], results, "Context rendered results missing item")\n         self.assertNotIn(\n-            context.absolute_url(), results,\n-            \'Context rendered results included context\')\n+            context.absolute_url(), results, "Context rendered results included context"\n+        )\n         self.assertNotIn(\n-            limited, results,\n-            \'Context rendered results included too many items\')\n+            limited, results, "Context rendered results included too many items"\n+        )\n \n         assignment.exclude_context = False\n-        context_renderer = self.renderer(\n-            context=context, assignment=assignment)\n-        context_results = [\n-            brain.getURL() for brain in context_renderer.results()]\n+        context_renderer = self.renderer(context=context, assignment=assignment)\n+        context_results = [brain.getURL() for brain in context_renderer.results()]\n         self.assertEqual(\n-            len(context_results), 2,\n-            \'Wrong number of context rendered results\')\n+            len(context_results), 2, "Wrong number of context rendered results"\n+        )\n         self.assertIn(\n-            included[0], context_results,\n-            \'Context rendered results missing item\')\n+            included[0], context_results, "Context rendered results missing item"\n+        )\n         self.assertIn(\n-            context.absolute_url(), context_results,\n-            \'Context rendered results missing context\')\n+            context.absolute_url(),\n+            context_results,\n+            "Context rendered results missing context",\n+        )\n         self.assertNotIn(\n-            included[1], context_results,\n-            \'Context rendered results included too many items\')\n+            included[1],\n+            context_results,\n+            "Context rendered results included too many items",\n+        )\n         self.assertNotIn(\n-            limited, context_results,\n-            \'Context rendered results included way too many items\')\n+            limited,\n+            context_results,\n+            "Context rendered results included way too many items",\n+        )\n \n         del assignment.exclude_context\n-        missing_renderer = self.renderer(\n-            context=context, assignment=assignment)\n-        missing_results = [\n-            brain.getURL() for brain in missing_renderer.results()]\n+        missing_renderer = self.renderer(context=context, assignment=assignment)\n+        missing_results = [brain.getURL() for brain in missing_renderer.results()]\n         self.assertEqual(\n-            len(missing_results), 2,\n-            \'Wrong number of context rendered results\')\n+            len(missing_results), 2, "Wrong number of context rendered results"\n+        )\n         self.assertIn(\n-            included[0], missing_results,\n-            \'Context rendered results missing item\')\n+            included[0], missing_results, "Context rendered results missing item"\n+        )\n         self.assertIn(\n-            context.absolute_url(), missing_results,\n-            \'Context rendered results missing context\')\n+            context.absolute_url(),\n+            missing_results,\n+            "Context rendered results missing context",\n+        )\n         self.assertNotIn(\n-            included[1], missing_results,\n-            \'Context rendered results included too many items\')\n+            included[1],\n+            missing_results,\n+            "Context rendered results included too many items",\n+        )\n         self.assertNotIn(\n-            limited, missing_results,\n-            \'Context rendered results included way too many items\')\n+            limited,\n+            missing_results,\n+            "Context rendered results included way too many items",\n+        )\n \n         assignment.limit = 4\n         assignment.random = True\n         assignment.exclude_context = True\n         random_renderer = self.renderer(context=context, assignment=assignment)\n-        random_results = [\n-            brain.getURL() for brain in random_renderer.results()]\n+        random_results = [brain.getURL() for brain in random_renderer.results()]\n         self.assertEqual(\n-            len(random_results), 3, \'Wrong number of random rendered results\')\n-        self.assertIn(\n-            included[0], random_results,\n-            \'Context rendered results missing item\')\n+            len(random_results), 3, "Wrong number of random rendered results"\n+        )\n         self.assertIn(\n-            included[1], random_results,\n-            \'Context rendered results missing item\')\n+            included[0], random_results, "Context rendered results missing item"\n+        )\n         self.assertIn(\n-            limited, random_results,\n-            \'Context rendered results missing item\')\n+            included[1], random_results, "Context rendered results missing item"\n+        )\n+        self.assertIn(limited, random_results, "Context rendered results missing item")\n         self.assertNotIn(\n-            context.absolute_url(), random_results,\n-            \'Context rendered results included context\')\n+            context.absolute_url(),\n+            random_results,\n+            "Context rendered results included context",\n+        )\ndiff --git a/requirements-6.0.x.txt b/requirements-6.0.x.txt\nnew file mode 100644\nindex 0000000..3ae6c36\n--- /dev/null\n+++ b/requirements-6.0.x.txt\n@@ -0,0 +1 @@\n+-r https://dist.plone.org/release/6.0-latest/requirements.txt\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..7c7b1d2 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,32 @@\n [bdist_wheel]\n universal = 1\n+\n+[check-manifest]\n+ignore =\n+    *.cfg\n+    .coveragerc\n+    .editorconfig\n+    .gitattributes\n+\n+[isort]\n+# black compatible isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n+\n+[flake8]\n+# black compatible flake8 rules:\n+ignore =\n+    W503,\n+    C812,\n+    E501\n+    T001\n+    C813\n+# E203, E266\n+exclude = bootstrap.py,docs,*.egg.,omelette\n+max-line-length = 88\n+max-complexity = 18\n+select = B,C,E,F,W,T4,B9\n+\n+builtins = unicode,basestring\ndiff --git a/setup.py b/setup.py\nindex 3bd8be8..6075604 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,13 +1,14 @@\n-from setuptools import setup\n from setuptools import find_packages\n+from setuptools import setup\n+\n \n-version = \'4.0.0a4.dev0\'\n+version = "4.0.0a4.dev0"\n \n-setup(name=\'plone.portlet.collection\',\n+setup(\n+    name="plone.portlet.collection",\n     version=version,\n     description="A portlet that fetches results from a collection",\n-    long_description=open("README.rst").read() + "\\n" +\n-    open("CHANGES.rst").read(),\n+    long_description=open("README.rst").read() + "\\n" + open("CHANGES.rst").read(),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -22,26 +23,26 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'collection portlet\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.portlet.collection/\',\n-    license=\'GPL version 2\',\n+    keywords="collection portlet",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.portlet.collection/",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', "plone.portlet"],\n+    namespace_packages=["plone", "plone.portlet"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'setuptools\',\n-        \'plone.memoize\',\n-        \'plone.portlets\',\n-        \'plone.app.portlets\',\n-        \'plone.app.vocabularies\',\n+        "setuptools",\n+        "plone.memoize",\n+        "plone.portlets",\n+        "plone.app.portlets",\n+        "plone.app.vocabularies",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.testing\',\n-            \'plone.app.contenttypes\',\n+        "test": [\n+            "plone.app.testing",\n+            "plone.app.contenttypes"\n         ],\n-    }\n+    },\n )\ndiff --git a/test_plone60.cfg b/test_plone60.cfg\nnew file mode 100644\nindex 0000000..59b3583\n--- /dev/null\n+++ b/test_plone60.cfg\n@@ -0,0 +1,9 @@\n+[buildout]\n+extends =\n+    https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-6.0.x.cfg\n+    https://raw.githubusercontent.com/collective/buildout.plonetest/master/qa.cfg\n+    base.cfg\n+\n+update-versions-file = test_plone60.cfg\n+\n+[versions]\n'

