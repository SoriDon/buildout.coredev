Repository: plone.base


Branch: refs/heads/main
Date: 2023-03-05T22:01:46+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.base/commit/ed0b55d8478c2095691daa6938d59d8318ec02f2

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/13d8d6c0.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..ecc606b\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "13d8d6c0"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..582f8ac\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/13d8d6c0.internal b/news/13d8d6c0.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/13d8d6c0.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..0f96c85 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,24 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\ndiff --git a/setup.cfg b/setup.cfg\nindex a72fc52..10711f1 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -65,14 +65,18 @@ ignore =\n   .coveragerc\n   .editorconfig\n   .gitattributes\n+  .meta.toml\n+  .pre-commit-config.yaml\n+  tox.ini\n \n [flake8]\n-exclude = docs,*.egg.\n-max-complexity = 15\n-\n-[isort]\n-# black compatible Plone isort rules:\n-profile = black\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..a2827e2\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.base\n+extras =\n+    test\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2023-03-05T22:03:55+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.base/commit/5a33ff9b31624742242de28e7f8874a88ce16d4b

chore: black

Files changed:
M src/plone/base/batch.py
M src/plone/base/interfaces/controlpanel.py
M src/plone/base/interfaces/resources.py
M src/plone/base/interfaces/syndication.py
M src/plone/base/utils.py

b'diff --git a/src/plone/base/batch.py b/src/plone/base/batch.py\nindex c9f56f4..ed202d7 100644\n--- a/src/plone/base/batch.py\n+++ b/src/plone/base/batch.py\n@@ -5,7 +5,6 @@\n \n \n class Batch(QuantumBatch):\n-\n     b_start_str = "b_start"\n \n     def __init__(\ndiff --git a/src/plone/base/interfaces/controlpanel.py b/src/plone/base/interfaces/controlpanel.py\nindex 4e31c21..5eb0e58 100644\n--- a/src/plone/base/interfaces/controlpanel.py\n+++ b/src/plone/base/interfaces/controlpanel.py\n@@ -113,7 +113,6 @@ def enumConfiglets(group=None):  # NOQA\n \n \n class IEditingSchema(Interface):\n-\n     available_editors = schema.List(\n         title=_("Available editors"),\n         description=_("Available editors in the portal."),\n@@ -327,7 +326,15 @@ class IFilterSchema(Interface):\n     custom_attributes = schema.List(\n         title=_("Custom attributes"),\n         description=_("These attributes are additionally allowed."),\n-        default=["style", "controls", "poster", "autoplay", "loading", "srcset", "sizes"],\n+        default=[\n+            "style",\n+            "controls",\n+            "poster",\n+            "autoplay",\n+            "loading",\n+            "srcset",\n+            "sizes",\n+        ],\n         value_type=schema.TextLine(),\n         missing_value=[],\n         required=False,\n@@ -469,7 +476,12 @@ class ITinyMCELayoutSchema(Interface):\n         description=_("Name|class"),\n         value_type=schema.TextLine(),\n         missing_value=[],\n-        default=["Listing|listing", "Listing compact|listing-compact", "Subdued grid|plain", "Invisible Grid|invisible-grid"],\n+        default=[\n+            "Listing|listing",\n+            "Listing compact|listing-compact",\n+            "Subdued grid|plain",\n+            "Invisible Grid|invisible-grid",\n+        ],\n     )\n \n     formats = schema.Text(\n@@ -838,7 +850,6 @@ class ITinyMCESchema(\n \n \n class IMaintenanceSchema(Interface):\n-\n     days = schema.Int(\n         title=_("Days of object history to keep after packing"),\n         description=_(\n@@ -855,7 +866,6 @@ class IMaintenanceSchema(Interface):\n \n \n class INavigationSchema(Interface):\n-\n     navigation_depth = schema.Int(\n         title=_("Navigation depth"),\n         description=_("Number of folder levels to show in the navigation."),\n@@ -983,7 +993,6 @@ class INavigationSchema(Interface):\n \n \n class ISearchSchema(Interface):\n-\n     enable_livesearch = schema.Bool(\n         title=_("Enable LiveSearch"),\n         description=_(\n@@ -1050,7 +1059,6 @@ class ISearchSchema(Interface):\n \n \n class ISecuritySchema(Interface):\n-\n     enable_self_reg = schema.Bool(\n         title=_("Enable self-registration"),\n         description=_(\n@@ -1135,7 +1143,6 @@ class ISecuritySchema(Interface):\n \n \n class ISiteSchema(Interface):\n-\n     site_title = schema.TextLine(\n         title=_("Site title"),\n         description=_(\n@@ -1469,7 +1476,6 @@ class ITypesSchema(Interface):\n \n \n class IMailSchema(Interface):\n-\n     smtp_host = schema.TextLine(\n         title=_("label_smtp_server", default="SMTP server"),\n         description=_(\n@@ -1546,7 +1552,6 @@ class IMailSchema(Interface):\n \n \n class IMarkupSchema(Interface):\n-\n     default_type = schema.Choice(\n         title=_("Default format"),\n         description=_(\n@@ -1592,7 +1597,6 @@ class IMarkupSchema(Interface):\n \n \n class IUserGroupsSettingsSchema(Interface):\n-\n     many_groups = schema.Bool(\n         title=_("Many groups?"),\n         description=_(\n@@ -1631,7 +1635,6 @@ def validate_twitter_username(value):\n \n \n class ISocialMediaSchema(Interface):\n-\n     share_social_data = schema.Bool(\n         title=_("Share social data"),\n         description=_(\n@@ -1799,7 +1802,13 @@ class IImagingSchema(Interface):\n                 "sourceset": [\n                     {\n                         "scale": "larger",\n-                        "additionalScales": ["preview", "teaser", "large", "great", "huge"],\n+                        "additionalScales": [\n+                            "preview",\n+                            "teaser",\n+                            "large",\n+                            "great",\n+                            "huge",\n+                        ],\n                     },\n                 ],\n             },\n@@ -1837,7 +1846,6 @@ class IImagingSchema(Interface):\n \n \n class ILoginSchema(Interface):\n-\n     auth_cookie_length = schema.Int(\n         title=_("Auth cookie length"), default=0, required=False\n     )\n@@ -1867,7 +1875,6 @@ class ILoginSchema(Interface):\n \n \n class ILinkSchema(Interface):\n-\n     external_links_open_new_window = schema.Bool(\n         title=_("Open external links in new a window"),\n         description=_(""),\n@@ -1899,7 +1906,6 @@ def _check_tales_expression(value):\n \n \n class IActionSchema(Interface):\n-\n     category = schema.Choice(\n         title=_("Category"),\n         vocabulary="plone.app.vocabularies.PortalActionCategories",\n@@ -1963,7 +1969,6 @@ class IActionSchema(Interface):\n \n \n class INewActionSchema(Interface):\n-\n     category = schema.Choice(\n         title=_("Category"),\n         vocabulary="plone.app.vocabularies.PortalActionCategories",\ndiff --git a/src/plone/base/interfaces/resources.py b/src/plone/base/interfaces/resources.py\nindex 2b5b5ad..54bd572 100644\n--- a/src/plone/base/interfaces/resources.py\n+++ b/src/plone/base/interfaces/resources.py\n@@ -11,7 +11,6 @@\n \n \n class IResourceRegistry(zope.interface.Interface):\n-\n     # DEPRECATED\n \n     url = schema.ASCIILine(title=_("Resources base URL"), required=False)\n@@ -43,7 +42,6 @@ class IResourceRegistry(zope.interface.Interface):\n \n \n class IBundleRegistry(zope.interface.Interface):\n-\n     jscompilation = schema.ASCIILine(\n         title=_("URL of the last js compilation"), required=False\n     )\ndiff --git a/src/plone/base/interfaces/syndication.py b/src/plone/base/interfaces/syndication.py\nindex 025bb1e..fc8f6d6 100644\n--- a/src/plone/base/interfaces/syndication.py\n+++ b/src/plone/base/interfaces/syndication.py\n@@ -129,12 +129,11 @@ def file_type():\n \n \n class ISiteSyndicationSettings(Interface):\n-\n     allowed = schema.Bool(\n         title=_("Allowed"),\n         description=_("Allow syndication for collections and folders " "on site."),\n         default=True,\n-        required=False\n+        required=False,\n     )\n \n     default_enabled = schema.Bool(\n@@ -144,21 +143,21 @@ class ISiteSyndicationSettings(Interface):\n             "folders and collections."\n         ),\n         default=False,\n-        required=False\n+        required=False,\n     )\n \n     search_rss_enabled = schema.Bool(\n         title=_("Search RSS enabled"),\n         description=_("Allows users to subscribe to feeds of search results"),\n         default=True,\n-        required=False\n+        required=False,\n     )\n \n     show_author_info = schema.Bool(\n         title=_("Show author info"),\n         description=_("Should feeds include author information"),\n         default=True,\n-        required=False\n+        required=False,\n     )\n \n     render_body = schema.Bool(\n@@ -169,7 +168,7 @@ class ISiteSyndicationSettings(Interface):\n             "render it, otherwise use description.",\n         ),\n         default=False,\n-        required=False\n+        required=False,\n     )\n \n     max_items = schema.Int(\n@@ -215,7 +214,7 @@ class ISiteSyndicationSettings(Interface):\n             "for particular folders and collections "\n         ),\n         default=False,\n-        required=False\n+        required=False,\n     )\n \n     show_syndication_link = schema.Bool(\n@@ -224,17 +223,12 @@ class ISiteSyndicationSettings(Interface):\n             "Enable RSS link document action on the syndication " "content item."\n         ),\n         default=False,\n-        required=False\n+        required=False,\n     )\n \n \n class IFeedSettings(Interface):\n-\n-    enabled = schema.Bool(\n-        title=_("Enabled"),\n-        default=False,\n-        required=False\n-    )\n+    enabled = schema.Bool(title=_("Enabled"), default=False, required=False)\n \n     feed_types = schema.Tuple(\n         title=_("Feed Types"),\n@@ -254,7 +248,7 @@ class IFeedSettings(Interface):\n             "render it, otherwise use description.",\n         ),\n         default=False,\n-        required=False\n+        required=False,\n     )\n \n     max_items = schema.Int(\ndiff --git a/src/plone/base/utils.py b/src/plone/base/utils.py\nindex bb4ffe8..cef2aa4 100644\n--- a/src/plone/base/utils.py\n+++ b/src/plone/base/utils.py\n@@ -27,10 +27,10 @@\n \n SIZE_CONST = {\n     "KB": 1024,\n-    "MB": 1024 ** 2,\n-    "GB": 1024 ** 3,\n-    "TB": 1024 ** 4,\n-    "PB": 1024 ** 5,\n+    "MB": 1024**2,\n+    "GB": 1024**3,\n+    "TB": 1024**4,\n+    "PB": 1024**5,\n }\n SIZE_ORDER = ("PB", "TB", "GB", "MB", "KB")\n \n@@ -122,7 +122,7 @@ def safe_text(value, encoding="utf-8") -> str:\n     if isinstance(value, bytes):\n         try:\n             value = str(value, encoding)\n-        except (UnicodeDecodeError):\n+        except UnicodeDecodeError:\n             value = value.decode("utf-8", "replace")\n     return value\n \n@@ -584,9 +584,9 @@ def unrestricted_construct_instance(type_name, container, id, *args, **kw):\n     to create the object without security checks.\n     """\n     id = str(id)\n-    typesTool = getToolByName(container, \'portal_types\')\n+    typesTool = getToolByName(container, "portal_types")\n     fti = typesTool.getTypeInfo(type_name)\n     if not fti:\n-        raise ValueError(\'Invalid type %s\' % type_name)\n+        raise ValueError("Invalid type %s" % type_name)\n \n     return fti._constructInstance(container, id, *args, **kw)\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2023-03-06T00:02:40+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.base/commit/a3ae0e3a299555b392c44ac7a56dd29b2a9be3dd

feat: flake8 smells

Files changed:
M setup.cfg
M src/plone/base/i18nl10n.py
M src/plone/base/interfaces/__init__.py
M src/plone/base/interfaces/controlpanel.py
M src/plone/base/tests/test_i18nl10n.py
M src/plone/base/tests/test_utils.py
M src/plone/base/utils.py

b'diff --git a/setup.cfg b/setup.cfg\nindex 10711f1..7b79fd4 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -80,3 +80,6 @@ ignore =\n     E203,\n     # black takes care of spaces after commas\n     E231,\n+per-file-ignores =\n+    src/plone/base/interfaces/__init__.py:F401\n+    src/plone/base/permissions.py:F401,E402\ndiff --git a/src/plone/base/i18nl10n.py b/src/plone/base/i18nl10n.py\nindex e8adf5f..0d5119e 100644\n--- a/src/plone/base/i18nl10n.py\n+++ b/src/plone/base/i18nl10n.py\n@@ -206,7 +206,7 @@ def ulocalized_time(\n     if not IDateTime.providedBy(time):\n         try:\n             time = DateTime(time)\n-        except:\n+        except Exception:\n             logger.debug(f"Failed to convert {time} to a DateTime object")\n             return None\n \ndiff --git a/src/plone/base/interfaces/__init__.py b/src/plone/base/interfaces/__init__.py\nindex 99dd116..e8bfd81 100644\n--- a/src/plone/base/interfaces/__init__.py\n+++ b/src/plone/base/interfaces/__init__.py\n@@ -1,4 +1,3 @@\n-# flake8: noqa\n from .basetool import IPloneBaseTool\n from .basetool import IPloneCatalogTool\n from .basetool import IPloneTool\ndiff --git a/src/plone/base/interfaces/controlpanel.py b/src/plone/base/interfaces/controlpanel.py\nindex 5eb0e58..952934b 100644\n--- a/src/plone/base/interfaces/controlpanel.py\n+++ b/src/plone/base/interfaces/controlpanel.py\n@@ -1,6 +1,5 @@\n from .basetool import IPloneBaseTool\n from plone import schema\n-from plone.autoform import directives\n from plone.base import PloneMessageFactory as _\n from Products.CMFCore.utils import getToolByName\n from zope.component.hooks import getSite\n@@ -85,7 +84,7 @@ def registerConfiglet(\n         name,\n         action,\n         condition="",\n-        permission="",  # NOQA\n+        permission="",\n         category="Plone",\n         visible=1,\n         appId=None,\n@@ -95,19 +94,19 @@ def registerConfiglet(\n     ):\n         """Registration of a Configlet"""\n \n-    def unregisterConfiglet(id):  # NOQA\n+    def unregisterConfiglet(id):\n         """unregister Configlet"""\n \n-    def unregisterApplication(appId):  # NOQA\n+    def unregisterApplication(appId):\n         """unregister Application with all configlets"""\n \n-    def getGroupIds():  # NOQA\n+    def getGroupIds():\n         """list of the group ids"""\n \n-    def getGroups():  # NOQA\n+    def getGroups():\n         """list of groups as dicts with id and title"""\n \n-    def enumConfiglets(group=None):  # NOQA\n+    def enumConfiglets(group=None):\n         """lists the Configlets of a group, returns them as dicts by\n         calling .getAction() on each of them"""\n \n@@ -491,7 +490,7 @@ class ITinyMCELayoutSchema(Interface):\n             "A format is for example the style that get applied when "\n             "you press the bold button inside the editor. "\n             "See https://www.tinymce.com/docs/configure/content-formatting/#formats"\n-        ),  # NOQA: E501\n+        ),\n         constraint=validate_json,\n         default=dump_json_to_text(\n             {\ndiff --git a/src/plone/base/tests/test_i18nl10n.py b/src/plone/base/tests/test_i18nl10n.py\nindex 5681fdc..28cd72f 100644\n--- a/src/plone/base/tests/test_i18nl10n.py\n+++ b/src/plone/base/tests/test_i18nl10n.py\n@@ -1,6 +1,5 @@\n """ Unit tests for plone.base.i18nl10n module. """\n from contextlib import contextmanager\n-from unittest.mock import MagicMock\n from unittest.mock import patch\n from zope.publisher.browser import TestRequest\n \n@@ -73,7 +72,6 @@ def mock_translate(msgid, *args, **kwargs):\n     # original translate function.  This depends on the keyword arguments having\n     # a mapping and/or a default.\n     if override:\n-        orig_msgid = msgid\n         msgid = override\n     standard = translate(msgid, *args, **kwargs)\n     if standard == default and override:\ndiff --git a/src/plone/base/tests/test_utils.py b/src/plone/base/tests/test_utils.py\nindex fc61a11..e2440ac 100644\n--- a/src/plone/base/tests/test_utils.py\n+++ b/src/plone/base/tests/test_utils.py\n@@ -67,7 +67,7 @@ def __init__(self, physical_path):\n                 if self.physical_path.split("/")[-1] in (\n                     "PloneSite",\n                     "SubSite",\n-                ):  # noqa\n+                ):\n                     alsoProvides(self, ISite)\n \n             @property\n@@ -75,9 +75,7 @@ def id(self):\n                 return self.physical_path.split("/")[-1]\n \n             def absolute_url(self):\n-                return (\n-                    self.vh_url + self.physical_path[len(self.vh_root) :] or "/"\n-                )  # noqa\n+                return self.vh_url + self.physical_path[len(self.vh_root) :] or "/"\n \n             def restrictedTraverse(self, path):\n                 return MockContext(self.vh_root + path)\ndiff --git a/src/plone/base/utils.py b/src/plone/base/utils.py\nindex cef2aa4..5052e30 100644\n--- a/src/plone/base/utils.py\n+++ b/src/plone/base/utils.py\n@@ -341,7 +341,7 @@ def get_top_site_from_url(context, request):\n         _path = "/".join(url_path[: _path_idx + 1]) or "/"\n         site_path = "/".join(request.physicalPathFromURL(_path)) or "/"\n         site = context.restrictedTraverse(site_path)\n-    except (ValueError, AttributeError) as exc:\n+    except (ValueError, AttributeError):\n         # On error, just return getSite.\n         # Refs: https://github.com/plone/plone.app.content/issues/103\n         # Also, TestRequest doesn\'t have physicalPathFromURL\n@@ -513,7 +513,7 @@ def _check_for_collision(contained_by, cid, **kwargs):\n             contained_by.checkValidId(cid)\n         except ConflictError:\n             raise\n-        except:  # noqa: E722\n+        except Exception:\n             return _("${name} is reserved.", mapping={"name": cid})\n \n     # make sure we don\'t collide with any parent method aliases\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2023-03-06T00:02:40+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.base/commit/b5e318b443ce1c72d14fbec25d8c499f2f4b9119

feat: codespell

Files changed:
M .meta.toml
M pyproject.toml
M src/plone/base/i18nl10n.py
M src/plone/base/interfaces/controlpanel.py
M src/plone/base/interfaces/password_reset.py
M src/plone/base/interfaces/translationservice.py
M src/plone/base/tests/messages.rst
M src/plone/base/tests/test_utils.py
M src/plone/base/utils.py

b'diff --git a/.meta.toml b/.meta.toml\nindex ecc606b..0707115 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -3,3 +3,6 @@\n [meta]\n template = "default"\n commit-id = "13d8d6c0"\n+\n+[codespell]\n+additional-ignores = "ist,discreet"\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 0f96c85..7265ce0 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -41,3 +41,6 @@ profile = "plone"\n \n [tool.black]\n target-version = ["py38"]\n+\n+[tool.codespell]\n+ignore-words-list = "ist,discreet"\ndiff --git a/src/plone/base/i18nl10n.py b/src/plone/base/i18nl10n.py\nindex 0d5119e..f2a3efd 100644\n--- a/src/plone/base/i18nl10n.py\n+++ b/src/plone/base/i18nl10n.py\n@@ -176,12 +176,12 @@ def ulocalized_time(\n     #       catalog date_format_long, date_format_short, and time_format\n     #       These msgids are translated using interpolation.\n     #       The variables used here are the same as used in the strftime\n-    #       formating.\n+    #       formatting.\n     #       Supported are:\n     #           %A, %a, %B, %b, %H, %I, %m, %d, %M, %p, %S, %Y, %y, %Z\n     #       Each used as variable in the msgstr without the %.\n     #       For example: "${A} ${d}. ${B} ${Y}, ${H}:${M} ${Z}"\n-    #       Each language dependend part is translated itself as well.\n+    #       Each language dependent part is translated itself as well.\n \n     # From http://docs.python.org/lib/module-time.html\n     #\ndiff --git a/src/plone/base/interfaces/controlpanel.py b/src/plone/base/interfaces/controlpanel.py\nindex 952934b..13b092b 100644\n--- a/src/plone/base/interfaces/controlpanel.py\n+++ b/src/plone/base/interfaces/controlpanel.py\n@@ -554,7 +554,7 @@ class ITinyMCEPluginSchema(Interface):\n                     SimpleTerm("paste", "paste", "paste"),\n                     SimpleTerm("preview", "preview", "preview"),\n                     SimpleTerm("print", "print", "print"),\n-                    # XXX disable save button since it is not implemeneted\n+                    # XXX disable save button since it is not implemented\n                     # SimpleTerm(\'save\', \'save\', u\'save\'),\n                     SimpleTerm("searchreplace", "searchreplace", "searchreplace"),\n                     SimpleTerm("tabfocus", "tabfocus", "tabfocus"),\n@@ -1261,7 +1261,7 @@ class ISiteSchema(Interface):\n         title=_("No thumbs in list views"),\n         description=_(\n             "Suppress thumbs in all list views; "\n-            "this default can be overriden individually"\n+            "this default can be overridden individually"\n         ),\n         default=False,\n         required=False,\n@@ -1271,7 +1271,7 @@ class ISiteSchema(Interface):\n         title=_("No thumbs in summary views"),\n         description=_(\n             "Suppress thumbs in all summary views; "\n-            "this default can be overriden individually"\n+            "this default can be overridden individually"\n         ),\n         default=False,\n         required=False,\n@@ -1281,7 +1281,7 @@ class ISiteSchema(Interface):\n         title=_("No thumbs in table views"),\n         description=_(\n             "Suppress thumbs in all tableviews and in folder contents view; "\n-            "this default can be overriden individually"\n+            "this default can be overridden individually"\n         ),\n         default=False,\n         required=False,\n@@ -1289,7 +1289,7 @@ class ISiteSchema(Interface):\n \n     thumb_scale_portlet = schema.Choice(\n         title=_("Thumb scale for portlets"),\n-        description=_("This default can be overriden individually."),\n+        description=_("This default can be overridden individually."),\n         default="icon",\n         vocabulary="plone.app.vocabularies.ImagesScales",\n         required=True,\n@@ -1298,7 +1298,7 @@ class ISiteSchema(Interface):\n     thumb_scale_listing = schema.Choice(\n         title=_("Thumb scale for listings"),\n         description=_(\n-            "E.g. standard view; This default can be overriden individually."\n+            "E.g. standard view; This default can be overridden individually."\n         ),\n         default="thumb",\n         vocabulary="plone.app.vocabularies.ImagesScales",\n@@ -1309,7 +1309,7 @@ class ISiteSchema(Interface):\n         title=_("Thumb scale for tables"),\n         description=_(\n             "E.g., tabular view, folder content listing;"\n-            " This default can be overriden individually."\n+            " This default can be overridden individually."\n         ),\n         default="tile",\n         vocabulary="plone.app.vocabularies.ImagesScales",\n@@ -1318,7 +1318,7 @@ class ISiteSchema(Interface):\n \n     thumb_scale_summary = schema.Choice(\n         title=_("Thumb scale for summary view"),\n-        description=_("This default can be overriden individually."),\n+        description=_("This default can be overridden individually."),\n         default="mini",\n         vocabulary="plone.app.vocabularies.ImagesScales",\n         required=True,\n@@ -1753,7 +1753,7 @@ class IImagingSchema(Interface):\n         description=_("Enter a JSON-formatted picture variants configuration."),\n         schema=json.dumps(\n             {\n-                "title": "Image srcset defintion",\n+                "title": "Image srcset definition",\n                 "type": "object",\n                 "additionalProperties": {"$ref": "#/$defs/srcset"},\n                 "$defs": {\n@@ -2008,7 +2008,7 @@ class IPloneControlPanelForm(IPloneControlPanelView):\n     """Forms using plone.app.controlpanel"""\n \n     def _on_save():\n-        """Callback mehod which can be implemented by control panels to\n+        """Callback method which can be implemented by control panels to\n         react when the form is successfully saved. This avoids the need\n         to re-define actions only to do some additional notification or\n         configuration which cannot be handled by the normal schema adapter.\ndiff --git a/src/plone/base/interfaces/password_reset.py b/src/plone/base/interfaces/password_reset.py\nindex d8fa0f8..685b774 100644\n--- a/src/plone/base/interfaces/password_reset.py\n+++ b/src/plone/base/interfaces/password_reset.py\n@@ -23,7 +23,7 @@ class IPWResetTool(Interface):\n     reset forgotten passwords.\n \n     This interface is rather sparse, but sufficient to describe the\n-    task. (In this manner we void being dependant on a specific\n+    task. (In this manner we void being dependent on a specific\n     process) The details of the process are in the implementation,\n     where they belong."""\n \ndiff --git a/src/plone/base/interfaces/translationservice.py b/src/plone/base/interfaces/translationservice.py\nindex 6524801..e4ea7b3 100644\n--- a/src/plone/base/interfaces/translationservice.py\n+++ b/src/plone/base/interfaces/translationservice.py\n@@ -6,7 +6,7 @@ class ITranslationServiceTool(Interface):\n \n     def translate(*args, **kw):\n         """Translate method to access the translation service\n-        from resticted code like skins.\n+        from restricted code like skins.\n         """\n \n     def encode(m, input_encoding=None, output_encoding=None, errors="strict"):\ndiff --git a/src/plone/base/tests/messages.rst b/src/plone/base/tests/messages.rst\nindex b54d798..2187c65 100644\n--- a/src/plone/base/tests/messages.rst\n+++ b/src/plone/base/tests/messages.rst\n@@ -25,7 +25,7 @@ You can also define a default text:\n   >>> msg.default\n   \'This is the text.\'\n \n-And at last there is the possibility of variable substition:\n+And at last there is the possibility of variable substitution:\n \n   >>> project = \'Plone\'\n   >>> msg = _(\'id\', default=\'Hello ${name}\', mapping={\'name\' : project})\n@@ -117,7 +117,7 @@ Inform the engine of our variables.\n   >>> engine.setLocal(\'msg\', msg)\n   >>> engine.setLocal(\'note\', note)\n \n-We also need a HTMLParser and TALInterpreter and add a simple convience function\n+We also need a HTMLParser and TALInterpreter and add a simple convenience function\n to get the parsed and interpreted text.\n \n   >>> from zope.tal.htmltalparser import HTMLTALParser\ndiff --git a/src/plone/base/tests/test_utils.py b/src/plone/base/tests/test_utils.py\nindex e2440ac..3e8a4dd 100644\n--- a/src/plone/base/tests/test_utils.py\n+++ b/src/plone/base/tests/test_utils.py\n@@ -109,7 +109,7 @@ def physicalPathFromURL(self, url):\n         ctx = MockContext("/approot/PloneSite/folder/SubSite/folder")\n         self.assertEqual(get_top_site_from_url(ctx, req).id, "PloneSite")\n \n-        # Case 4, using unicode paths accidentially:\n+        # Case 4, using unicode paths accidentally:\n         ctx = MockContext("/approot/PloneSite/folder/SubSite/folder")\n         self.assertEqual(get_top_site_from_url(ctx, req).id, "PloneSite")\n \ndiff --git a/src/plone/base/utils.py b/src/plone/base/utils.py\nindex 5052e30..3b36c06 100644\n--- a/src/plone/base/utils.py\n+++ b/src/plone/base/utils.py\n@@ -161,7 +161,7 @@ def safe_callable(obj):\n \n def get_empty_title(context, translated=True):\n     """Returns string to be used for objects with no title or id"""\n-    # The default is an extra fancy unicode elipsis\n+    # The default is an extra fancy unicode ellipsis,\n     empty = b"\\x5b\\xc2\\xb7\\xc2\\xb7\\xc2\\xb7\\x5d".decode("utf8")\n     if translated:\n         if context is not None:\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2023-03-06T00:02:40+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.base/commit/57d851c30e9c007a4953b8cb6d683cbcd9a8ff6e

fix(tox): code is inside src

Files changed:
M tox.ini

b'diff --git a/tox.ini b/tox.ini\nindex a2827e2..e246587 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -45,6 +45,6 @@ deps =\n     zope.testrunner\n     -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    zope-testrunner --test-path={toxinidir} -s plone.base\n+    zope-testrunner --test-path={toxinidir}/src -s plone.base\n extras =\n     test\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2023-03-06T00:02:40+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.base/commit/b034dee78441f71ffbd717547533de611dd08a36

feat: declare dependencies

Files changed:
M .meta.toml
M pyproject.toml
M setup.cfg
M src/plone/base/utils.py
M tox.ini

b'diff --git a/.meta.toml b/.meta.toml\nindex 0707115..8560e56 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -6,3 +6,8 @@ commit-id = "13d8d6c0"\n \n [codespell]\n additional-ignores = "ist,discreet"\n+\n+[dependencies]\n+mappings = [\n+    "Zope = [\'Products.Five\', \'Products.PageTemplates\', \'ZTUtils\']",\n+    ]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 7265ce0..7415149 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -44,3 +44,6 @@ target-version = ["py38"]\n \n [tool.codespell]\n ignore-words-list = "ist,discreet"\n+\n+[tool.dependencychecker]\n+Zope = [\'Products.Five\', \'Products.PageTemplates\', \'ZTUtils\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 7b79fd4..6bf840a 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -30,13 +30,26 @@ python_requires = >=3.8\n install_requires =\n     setuptools\n     # be aware to _not_ add dependencies to plone.app.* or Plones Products.* packages!\n+    AccessControl\n+    Acquisition\n+    ZODB\n+    Zope>=5\n     plone.batching\n     plone.registry\n+    plone.schema\n     plone.z3cform\n     Products.BTreeFolder2\n     Products.CMFCore\n     Products.CMFDynamicViewFTI\n-    Zope>=5\n+    transaction\n+    zExceptions\n+    zope.component\n+    zope.deprecation\n+    zope.i18n\n+    zope.i18nmessageid\n+    zope.interface\n+    zope.publisher\n+    zope.schema\n namespace_packages =\n     plone\n \n@@ -47,8 +60,8 @@ zip_safe = False\n \n [options.extras_require]\n test =\n-    plone.testing\n     plone.subrequest\n+    zope.tal\n \n [options.packages.find]\n where =\ndiff --git a/src/plone/base/utils.py b/src/plone/base/utils.py\nindex 3b36c06..08c006f 100644\n--- a/src/plone/base/utils.py\n+++ b/src/plone/base/utils.py\n@@ -98,7 +98,6 @@ def safeToInt(value, default=0):\n def safe_text(value, encoding="utf-8") -> str:\n     """Converts a value to text, even it is already a text string.\n \n-    >>> from Products.CMFPlone.utils import safe_text\n     >>> test_bytes = u\'\\u01b5\'.encode(\'utf-8\')\n     >>> safe_text(\'spam\') == u\'spam\'\n     True\ndiff --git a/tox.ini b/tox.ini\nindex e246587..c079715 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -43,6 +43,7 @@ commands =\n usedevelop = true\n deps =\n     zope.testrunner\n+    plone.portlets  # undeclared dependency of plone.protect\n     -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n     zope-testrunner --test-path={toxinidir}/src -s plone.base\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2023-03-08T18:25:46+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.base/commit/b2d3b9898094086547fd5a739b1970555a4bdbe0

Merge branch 'main' into config-with-default-template-43aa1e09

Files changed:
A news/Plone-3731.bugfix
M src/plone/base/interfaces/__init__.py
M src/plone/base/interfaces/siteroot.py

b'diff --git a/news/Plone-3731.bugfix b/news/Plone-3731.bugfix\nnew file mode 100644\nindex 0000000..5ee64af\n--- /dev/null\n+++ b/news/Plone-3731.bugfix\n@@ -0,0 +1,2 @@\n+Move interface plone.app.layout.navigation.interfaces.INavigationRoot to plone.base.interfaces.siteroot and add a deprecated import to plone.app.layout.\n+[jensens, gforcarda]\n\\ No newline at end of file\ndiff --git a/src/plone/base/interfaces/__init__.py b/src/plone/base/interfaces/__init__.py\nindex e8bfd81..23a2530 100644\n--- a/src/plone/base/interfaces/__init__.py\n+++ b/src/plone/base/interfaces/__init__.py\n@@ -54,6 +54,7 @@\n from .resources import IBundleRegistry\n from .resources import IResourceRegistry\n from .siteroot import IMigratingPloneSiteRoot\n+from .siteroot import INavigationRoot\n from .siteroot import IPloneSiteRoot\n from .siteroot import ITestCasePloneSiteRoot\n from .structure import INonStructuralFolder\ndiff --git a/src/plone/base/interfaces/siteroot.py b/src/plone/base/interfaces/siteroot.py\nindex 3e63f5f..780e401 100644\n--- a/src/plone/base/interfaces/siteroot.py\n+++ b/src/plone/base/interfaces/siteroot.py\n@@ -1,8 +1,11 @@\n-from plone.app.layout.navigation.interfaces import INavigationRoot\n from Products.CMFCore.interfaces import ISiteRoot\n from zope.interface import Interface\n \n \n+class INavigationRoot(Interface):\n+    """A marker interface for signaling the navigation root."""\n+\n+\n class IPloneSiteRoot(ISiteRoot, INavigationRoot):\n     """\n     Marker interface for the object which serves as the root of a\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2023-03-08T22:31:18+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.base/commit/7c984be2199cbb0c94c25b6aca52eb1e1678751c

Merge pull request #28 from plone/config-with-default-template-43aa1e09

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/13d8d6c0.internal
A tox.ini
M pyproject.toml
M setup.cfg
M src/plone/base/batch.py
M src/plone/base/i18nl10n.py
M src/plone/base/interfaces/__init__.py
M src/plone/base/interfaces/controlpanel.py
M src/plone/base/interfaces/password_reset.py
M src/plone/base/interfaces/resources.py
M src/plone/base/interfaces/syndication.py
M src/plone/base/interfaces/translationservice.py
M src/plone/base/tests/messages.rst
M src/plone/base/tests/test_i18nl10n.py
M src/plone/base/tests/test_utils.py
M src/plone/base/utils.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..8560e56\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,13 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "13d8d6c0"\n+\n+[codespell]\n+additional-ignores = "ist,discreet"\n+\n+[dependencies]\n+mappings = [\n+    "Zope = [\'Products.Five\', \'Products.PageTemplates\', \'ZTUtils\']",\n+    ]\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..582f8ac\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/13d8d6c0.internal b/news/13d8d6c0.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/13d8d6c0.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..7415149 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,30 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.codespell]\n+ignore-words-list = "ist,discreet"\n+\n+[tool.dependencychecker]\n+Zope = [\'Products.Five\', \'Products.PageTemplates\', \'ZTUtils\']\ndiff --git a/setup.cfg b/setup.cfg\nindex a72fc52..6bf840a 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -30,13 +30,26 @@ python_requires = >=3.8\n install_requires =\n     setuptools\n     # be aware to _not_ add dependencies to plone.app.* or Plones Products.* packages!\n+    AccessControl\n+    Acquisition\n+    ZODB\n+    Zope>=5\n     plone.batching\n     plone.registry\n+    plone.schema\n     plone.z3cform\n     Products.BTreeFolder2\n     Products.CMFCore\n     Products.CMFDynamicViewFTI\n-    Zope>=5\n+    transaction\n+    zExceptions\n+    zope.component\n+    zope.deprecation\n+    zope.i18n\n+    zope.i18nmessageid\n+    zope.interface\n+    zope.publisher\n+    zope.schema\n namespace_packages =\n     plone\n \n@@ -47,8 +60,8 @@ zip_safe = False\n \n [options.extras_require]\n test =\n-    plone.testing\n     plone.subrequest\n+    zope.tal\n \n [options.packages.find]\n where =\n@@ -65,14 +78,21 @@ ignore =\n   .coveragerc\n   .editorconfig\n   .gitattributes\n+  .meta.toml\n+  .pre-commit-config.yaml\n+  tox.ini\n \n [flake8]\n-exclude = docs,*.egg.\n-max-complexity = 15\n-\n-[isort]\n-# black compatible Plone isort rules:\n-profile = black\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+per-file-ignores =\n+    src/plone/base/interfaces/__init__.py:F401\n+    src/plone/base/permissions.py:F401,E402\ndiff --git a/src/plone/base/batch.py b/src/plone/base/batch.py\nindex c9f56f4..ed202d7 100644\n--- a/src/plone/base/batch.py\n+++ b/src/plone/base/batch.py\n@@ -5,7 +5,6 @@\n \n \n class Batch(QuantumBatch):\n-\n     b_start_str = "b_start"\n \n     def __init__(\ndiff --git a/src/plone/base/i18nl10n.py b/src/plone/base/i18nl10n.py\nindex e8adf5f..f2a3efd 100644\n--- a/src/plone/base/i18nl10n.py\n+++ b/src/plone/base/i18nl10n.py\n@@ -176,12 +176,12 @@ def ulocalized_time(\n     #       catalog date_format_long, date_format_short, and time_format\n     #       These msgids are translated using interpolation.\n     #       The variables used here are the same as used in the strftime\n-    #       formating.\n+    #       formatting.\n     #       Supported are:\n     #           %A, %a, %B, %b, %H, %I, %m, %d, %M, %p, %S, %Y, %y, %Z\n     #       Each used as variable in the msgstr without the %.\n     #       For example: "${A} ${d}. ${B} ${Y}, ${H}:${M} ${Z}"\n-    #       Each language dependend part is translated itself as well.\n+    #       Each language dependent part is translated itself as well.\n \n     # From http://docs.python.org/lib/module-time.html\n     #\n@@ -206,7 +206,7 @@ def ulocalized_time(\n     if not IDateTime.providedBy(time):\n         try:\n             time = DateTime(time)\n-        except:\n+        except Exception:\n             logger.debug(f"Failed to convert {time} to a DateTime object")\n             return None\n \ndiff --git a/src/plone/base/interfaces/__init__.py b/src/plone/base/interfaces/__init__.py\nindex ad92b39..23a2530 100644\n--- a/src/plone/base/interfaces/__init__.py\n+++ b/src/plone/base/interfaces/__init__.py\n@@ -1,4 +1,3 @@\n-# flake8: noqa\n from .basetool import IPloneBaseTool\n from .basetool import IPloneCatalogTool\n from .basetool import IPloneTool\ndiff --git a/src/plone/base/interfaces/controlpanel.py b/src/plone/base/interfaces/controlpanel.py\nindex 4e31c21..13b092b 100644\n--- a/src/plone/base/interfaces/controlpanel.py\n+++ b/src/plone/base/interfaces/controlpanel.py\n@@ -1,6 +1,5 @@\n from .basetool import IPloneBaseTool\n from plone import schema\n-from plone.autoform import directives\n from plone.base import PloneMessageFactory as _\n from Products.CMFCore.utils import getToolByName\n from zope.component.hooks import getSite\n@@ -85,7 +84,7 @@ def registerConfiglet(\n         name,\n         action,\n         condition="",\n-        permission="",  # NOQA\n+        permission="",\n         category="Plone",\n         visible=1,\n         appId=None,\n@@ -95,25 +94,24 @@ def registerConfiglet(\n     ):\n         """Registration of a Configlet"""\n \n-    def unregisterConfiglet(id):  # NOQA\n+    def unregisterConfiglet(id):\n         """unregister Configlet"""\n \n-    def unregisterApplication(appId):  # NOQA\n+    def unregisterApplication(appId):\n         """unregister Application with all configlets"""\n \n-    def getGroupIds():  # NOQA\n+    def getGroupIds():\n         """list of the group ids"""\n \n-    def getGroups():  # NOQA\n+    def getGroups():\n         """list of groups as dicts with id and title"""\n \n-    def enumConfiglets(group=None):  # NOQA\n+    def enumConfiglets(group=None):\n         """lists the Configlets of a group, returns them as dicts by\n         calling .getAction() on each of them"""\n \n \n class IEditingSchema(Interface):\n-\n     available_editors = schema.List(\n         title=_("Available editors"),\n         description=_("Available editors in the portal."),\n@@ -327,7 +325,15 @@ class IFilterSchema(Interface):\n     custom_attributes = schema.List(\n         title=_("Custom attributes"),\n         description=_("These attributes are additionally allowed."),\n-        default=["style", "controls", "poster", "autoplay", "loading", "srcset", "sizes"],\n+        default=[\n+            "style",\n+            "controls",\n+            "poster",\n+            "autoplay",\n+            "loading",\n+            "srcset",\n+            "sizes",\n+        ],\n         value_type=schema.TextLine(),\n         missing_value=[],\n         required=False,\n@@ -469,7 +475,12 @@ class ITinyMCELayoutSchema(Interface):\n         description=_("Name|class"),\n         value_type=schema.TextLine(),\n         missing_value=[],\n-        default=["Listing|listing", "Listing compact|listing-compact", "Subdued grid|plain", "Invisible Grid|invisible-grid"],\n+        default=[\n+            "Listing|listing",\n+            "Listing compact|listing-compact",\n+            "Subdued grid|plain",\n+            "Invisible Grid|invisible-grid",\n+        ],\n     )\n \n     formats = schema.Text(\n@@ -479,7 +490,7 @@ class ITinyMCELayoutSchema(Interface):\n             "A format is for example the style that get applied when "\n             "you press the bold button inside the editor. "\n             "See https://www.tinymce.com/docs/configure/content-formatting/#formats"\n-        ),  # NOQA: E501\n+        ),\n         constraint=validate_json,\n         default=dump_json_to_text(\n             {\n@@ -543,7 +554,7 @@ class ITinyMCEPluginSchema(Interface):\n                     SimpleTerm("paste", "paste", "paste"),\n                     SimpleTerm("preview", "preview", "preview"),\n                     SimpleTerm("print", "print", "print"),\n-                    # XXX disable save button since it is not implemeneted\n+                    # XXX disable save button since it is not implemented\n                     # SimpleTerm(\'save\', \'save\', u\'save\'),\n                     SimpleTerm("searchreplace", "searchreplace", "searchreplace"),\n                     SimpleTerm("tabfocus", "tabfocus", "tabfocus"),\n@@ -838,7 +849,6 @@ class ITinyMCESchema(\n \n \n class IMaintenanceSchema(Interface):\n-\n     days = schema.Int(\n         title=_("Days of object history to keep after packing"),\n         description=_(\n@@ -855,7 +865,6 @@ class IMaintenanceSchema(Interface):\n \n \n class INavigationSchema(Interface):\n-\n     navigation_depth = schema.Int(\n         title=_("Navigation depth"),\n         description=_("Number of folder levels to show in the navigation."),\n@@ -983,7 +992,6 @@ class INavigationSchema(Interface):\n \n \n class ISearchSchema(Interface):\n-\n     enable_livesearch = schema.Bool(\n         title=_("Enable LiveSearch"),\n         description=_(\n@@ -1050,7 +1058,6 @@ class ISearchSchema(Interface):\n \n \n class ISecuritySchema(Interface):\n-\n     enable_self_reg = schema.Bool(\n         title=_("Enable self-registration"),\n         description=_(\n@@ -1135,7 +1142,6 @@ class ISecuritySchema(Interface):\n \n \n class ISiteSchema(Interface):\n-\n     site_title = schema.TextLine(\n         title=_("Site title"),\n         description=_(\n@@ -1255,7 +1261,7 @@ class ISiteSchema(Interface):\n         title=_("No thumbs in list views"),\n         description=_(\n             "Suppress thumbs in all list views; "\n-            "this default can be overriden individually"\n+            "this default can be overridden individually"\n         ),\n         default=False,\n         required=False,\n@@ -1265,7 +1271,7 @@ class ISiteSchema(Interface):\n         title=_("No thumbs in summary views"),\n         description=_(\n             "Suppress thumbs in all summary views; "\n-            "this default can be overriden individually"\n+            "this default can be overridden individually"\n         ),\n         default=False,\n         required=False,\n@@ -1275,7 +1281,7 @@ class ISiteSchema(Interface):\n         title=_("No thumbs in table views"),\n         description=_(\n             "Suppress thumbs in all tableviews and in folder contents view; "\n-            "this default can be overriden individually"\n+            "this default can be overridden individually"\n         ),\n         default=False,\n         required=False,\n@@ -1283,7 +1289,7 @@ class ISiteSchema(Interface):\n \n     thumb_scale_portlet = schema.Choice(\n         title=_("Thumb scale for portlets"),\n-        description=_("This default can be overriden individually."),\n+        description=_("This default can be overridden individually."),\n         default="icon",\n         vocabulary="plone.app.vocabularies.ImagesScales",\n         required=True,\n@@ -1292,7 +1298,7 @@ class ISiteSchema(Interface):\n     thumb_scale_listing = schema.Choice(\n         title=_("Thumb scale for listings"),\n         description=_(\n-            "E.g. standard view; This default can be overriden individually."\n+            "E.g. standard view; This default can be overridden individually."\n         ),\n         default="thumb",\n         vocabulary="plone.app.vocabularies.ImagesScales",\n@@ -1303,7 +1309,7 @@ class ISiteSchema(Interface):\n         title=_("Thumb scale for tables"),\n         description=_(\n             "E.g., tabular view, folder content listing;"\n-            " This default can be overriden individually."\n+            " This default can be overridden individually."\n         ),\n         default="tile",\n         vocabulary="plone.app.vocabularies.ImagesScales",\n@@ -1312,7 +1318,7 @@ class ISiteSchema(Interface):\n \n     thumb_scale_summary = schema.Choice(\n         title=_("Thumb scale for summary view"),\n-        description=_("This default can be overriden individually."),\n+        description=_("This default can be overridden individually."),\n         default="mini",\n         vocabulary="plone.app.vocabularies.ImagesScales",\n         required=True,\n@@ -1469,7 +1475,6 @@ class ITypesSchema(Interface):\n \n \n class IMailSchema(Interface):\n-\n     smtp_host = schema.TextLine(\n         title=_("label_smtp_server", default="SMTP server"),\n         description=_(\n@@ -1546,7 +1551,6 @@ class IMailSchema(Interface):\n \n \n class IMarkupSchema(Interface):\n-\n     default_type = schema.Choice(\n         title=_("Default format"),\n         description=_(\n@@ -1592,7 +1596,6 @@ class IMarkupSchema(Interface):\n \n \n class IUserGroupsSettingsSchema(Interface):\n-\n     many_groups = schema.Bool(\n         title=_("Many groups?"),\n         description=_(\n@@ -1631,7 +1634,6 @@ def validate_twitter_username(value):\n \n \n class ISocialMediaSchema(Interface):\n-\n     share_social_data = schema.Bool(\n         title=_("Share social data"),\n         description=_(\n@@ -1751,7 +1753,7 @@ class IImagingSchema(Interface):\n         description=_("Enter a JSON-formatted picture variants configuration."),\n         schema=json.dumps(\n             {\n-                "title": "Image srcset defintion",\n+                "title": "Image srcset definition",\n                 "type": "object",\n                 "additionalProperties": {"$ref": "#/$defs/srcset"},\n                 "$defs": {\n@@ -1799,7 +1801,13 @@ class IImagingSchema(Interface):\n                 "sourceset": [\n                     {\n                         "scale": "larger",\n-                        "additionalScales": ["preview", "teaser", "large", "great", "huge"],\n+                        "additionalScales": [\n+                            "preview",\n+                            "teaser",\n+                            "large",\n+                            "great",\n+                            "huge",\n+                        ],\n                     },\n                 ],\n             },\n@@ -1837,7 +1845,6 @@ class IImagingSchema(Interface):\n \n \n class ILoginSchema(Interface):\n-\n     auth_cookie_length = schema.Int(\n         title=_("Auth cookie length"), default=0, required=False\n     )\n@@ -1867,7 +1874,6 @@ class ILoginSchema(Interface):\n \n \n class ILinkSchema(Interface):\n-\n     external_links_open_new_window = schema.Bool(\n         title=_("Open external links in new a window"),\n         description=_(""),\n@@ -1899,7 +1905,6 @@ def _check_tales_expression(value):\n \n \n class IActionSchema(Interface):\n-\n     category = schema.Choice(\n         title=_("Category"),\n         vocabulary="plone.app.vocabularies.PortalActionCategories",\n@@ -1963,7 +1968,6 @@ class IActionSchema(Interface):\n \n \n class INewActionSchema(Interface):\n-\n     category = schema.Choice(\n         title=_("Category"),\n         vocabulary="plone.app.vocabularies.PortalActionCategories",\n@@ -2004,7 +2008,7 @@ class IPloneControlPanelForm(IPloneControlPanelView):\n     """Forms using plone.app.controlpanel"""\n \n     def _on_save():\n-        """Callback mehod which can be implemented by control panels to\n+        """Callback method which can be implemented by control panels to\n         react when the form is successfully saved. This avoids the need\n         to re-define actions only to do some additional notification or\n         configuration which cannot be handled by the normal schema adapter.\ndiff --git a/src/plone/base/interfaces/password_reset.py b/src/plone/base/interfaces/password_reset.py\nindex d8fa0f8..685b774 100644\n--- a/src/plone/base/interfaces/password_reset.py\n+++ b/src/plone/base/interfaces/password_reset.py\n@@ -23,7 +23,7 @@ class IPWResetTool(Interface):\n     reset forgotten passwords.\n \n     This interface is rather sparse, but sufficient to describe the\n-    task. (In this manner we void being dependant on a specific\n+    task. (In this manner we void being dependent on a specific\n     process) The details of the process are in the implementation,\n     where they belong."""\n \ndiff --git a/src/plone/base/interfaces/resources.py b/src/plone/base/interfaces/resources.py\nindex 2b5b5ad..54bd572 100644\n--- a/src/plone/base/interfaces/resources.py\n+++ b/src/plone/base/interfaces/resources.py\n@@ -11,7 +11,6 @@\n \n \n class IResourceRegistry(zope.interface.Interface):\n-\n     # DEPRECATED\n \n     url = schema.ASCIILine(title=_("Resources base URL"), required=False)\n@@ -43,7 +42,6 @@ class IResourceRegistry(zope.interface.Interface):\n \n \n class IBundleRegistry(zope.interface.Interface):\n-\n     jscompilation = schema.ASCIILine(\n         title=_("URL of the last js compilation"), required=False\n     )\ndiff --git a/src/plone/base/interfaces/syndication.py b/src/plone/base/interfaces/syndication.py\nindex 025bb1e..fc8f6d6 100644\n--- a/src/plone/base/interfaces/syndication.py\n+++ b/src/plone/base/interfaces/syndication.py\n@@ -129,12 +129,11 @@ def file_type():\n \n \n class ISiteSyndicationSettings(Interface):\n-\n     allowed = schema.Bool(\n         title=_("Allowed"),\n         description=_("Allow syndication for collections and folders " "on site."),\n         default=True,\n-        required=False\n+        required=False,\n     )\n \n     default_enabled = schema.Bool(\n@@ -144,21 +143,21 @@ class ISiteSyndicationSettings(Interface):\n             "folders and collections."\n         ),\n         default=False,\n-        required=False\n+        required=False,\n     )\n \n     search_rss_enabled = schema.Bool(\n         title=_("Search RSS enabled"),\n         description=_("Allows users to subscribe to feeds of search results"),\n         default=True,\n-        required=False\n+        required=False,\n     )\n \n     show_author_info = schema.Bool(\n         title=_("Show author info"),\n         description=_("Should feeds include author information"),\n         default=True,\n-        required=False\n+        required=False,\n     )\n \n     render_body = schema.Bool(\n@@ -169,7 +168,7 @@ class ISiteSyndicationSettings(Interface):\n             "render it, otherwise use description.",\n         ),\n         default=False,\n-        required=False\n+        required=False,\n     )\n \n     max_items = schema.Int(\n@@ -215,7 +214,7 @@ class ISiteSyndicationSettings(Interface):\n             "for particular folders and collections "\n         ),\n         default=False,\n-        required=False\n+        required=False,\n     )\n \n     show_syndication_link = schema.Bool(\n@@ -224,17 +223,12 @@ class ISiteSyndicationSettings(Interface):\n             "Enable RSS link document action on the syndication " "content item."\n         ),\n         default=False,\n-        required=False\n+        required=False,\n     )\n \n \n class IFeedSettings(Interface):\n-\n-    enabled = schema.Bool(\n-        title=_("Enabled"),\n-        default=False,\n-        required=False\n-    )\n+    enabled = schema.Bool(title=_("Enabled"), default=False, required=False)\n \n     feed_types = schema.Tuple(\n         title=_("Feed Types"),\n@@ -254,7 +248,7 @@ class IFeedSettings(Interface):\n             "render it, otherwise use description.",\n         ),\n         default=False,\n-        required=False\n+        required=False,\n     )\n \n     max_items = schema.Int(\ndiff --git a/src/plone/base/interfaces/translationservice.py b/src/plone/base/interfaces/translationservice.py\nindex 6524801..e4ea7b3 100644\n--- a/src/plone/base/interfaces/translationservice.py\n+++ b/src/plone/base/interfaces/translationservice.py\n@@ -6,7 +6,7 @@ class ITranslationServiceTool(Interface):\n \n     def translate(*args, **kw):\n         """Translate method to access the translation service\n-        from resticted code like skins.\n+        from restricted code like skins.\n         """\n \n     def encode(m, input_encoding=None, output_encoding=None, errors="strict"):\ndiff --git a/src/plone/base/tests/messages.rst b/src/plone/base/tests/messages.rst\nindex b54d798..2187c65 100644\n--- a/src/plone/base/tests/messages.rst\n+++ b/src/plone/base/tests/messages.rst\n@@ -25,7 +25,7 @@ You can also define a default text:\n   >>> msg.default\n   \'This is the text.\'\n \n-And at last there is the possibility of variable substition:\n+And at last there is the possibility of variable substitution:\n \n   >>> project = \'Plone\'\n   >>> msg = _(\'id\', default=\'Hello ${name}\', mapping={\'name\' : project})\n@@ -117,7 +117,7 @@ Inform the engine of our variables.\n   >>> engine.setLocal(\'msg\', msg)\n   >>> engine.setLocal(\'note\', note)\n \n-We also need a HTMLParser and TALInterpreter and add a simple convience function\n+We also need a HTMLParser and TALInterpreter and add a simple convenience function\n to get the parsed and interpreted text.\n \n   >>> from zope.tal.htmltalparser import HTMLTALParser\ndiff --git a/src/plone/base/tests/test_i18nl10n.py b/src/plone/base/tests/test_i18nl10n.py\nindex 5681fdc..28cd72f 100644\n--- a/src/plone/base/tests/test_i18nl10n.py\n+++ b/src/plone/base/tests/test_i18nl10n.py\n@@ -1,6 +1,5 @@\n """ Unit tests for plone.base.i18nl10n module. """\n from contextlib import contextmanager\n-from unittest.mock import MagicMock\n from unittest.mock import patch\n from zope.publisher.browser import TestRequest\n \n@@ -73,7 +72,6 @@ def mock_translate(msgid, *args, **kwargs):\n     # original translate function.  This depends on the keyword arguments having\n     # a mapping and/or a default.\n     if override:\n-        orig_msgid = msgid\n         msgid = override\n     standard = translate(msgid, *args, **kwargs)\n     if standard == default and override:\ndiff --git a/src/plone/base/tests/test_utils.py b/src/plone/base/tests/test_utils.py\nindex fc61a11..3e8a4dd 100644\n--- a/src/plone/base/tests/test_utils.py\n+++ b/src/plone/base/tests/test_utils.py\n@@ -67,7 +67,7 @@ def __init__(self, physical_path):\n                 if self.physical_path.split("/")[-1] in (\n                     "PloneSite",\n                     "SubSite",\n-                ):  # noqa\n+                ):\n                     alsoProvides(self, ISite)\n \n             @property\n@@ -75,9 +75,7 @@ def id(self):\n                 return self.physical_path.split("/")[-1]\n \n             def absolute_url(self):\n-                return (\n-                    self.vh_url + self.physical_path[len(self.vh_root) :] or "/"\n-                )  # noqa\n+                return self.vh_url + self.physical_path[len(self.vh_root) :] or "/"\n \n             def restrictedTraverse(self, path):\n                 return MockContext(self.vh_root + path)\n@@ -111,7 +109,7 @@ def physicalPathFromURL(self, url):\n         ctx = MockContext("/approot/PloneSite/folder/SubSite/folder")\n         self.assertEqual(get_top_site_from_url(ctx, req).id, "PloneSite")\n \n-        # Case 4, using unicode paths accidentially:\n+        # Case 4, using unicode paths accidentally:\n         ctx = MockContext("/approot/PloneSite/folder/SubSite/folder")\n         self.assertEqual(get_top_site_from_url(ctx, req).id, "PloneSite")\n \ndiff --git a/src/plone/base/utils.py b/src/plone/base/utils.py\nindex bb4ffe8..08c006f 100644\n--- a/src/plone/base/utils.py\n+++ b/src/plone/base/utils.py\n@@ -27,10 +27,10 @@\n \n SIZE_CONST = {\n     "KB": 1024,\n-    "MB": 1024 ** 2,\n-    "GB": 1024 ** 3,\n-    "TB": 1024 ** 4,\n-    "PB": 1024 ** 5,\n+    "MB": 1024**2,\n+    "GB": 1024**3,\n+    "TB": 1024**4,\n+    "PB": 1024**5,\n }\n SIZE_ORDER = ("PB", "TB", "GB", "MB", "KB")\n \n@@ -98,7 +98,6 @@ def safeToInt(value, default=0):\n def safe_text(value, encoding="utf-8") -> str:\n     """Converts a value to text, even it is already a text string.\n \n-    >>> from Products.CMFPlone.utils import safe_text\n     >>> test_bytes = u\'\\u01b5\'.encode(\'utf-8\')\n     >>> safe_text(\'spam\') == u\'spam\'\n     True\n@@ -122,7 +121,7 @@ def safe_text(value, encoding="utf-8") -> str:\n     if isinstance(value, bytes):\n         try:\n             value = str(value, encoding)\n-        except (UnicodeDecodeError):\n+        except UnicodeDecodeError:\n             value = value.decode("utf-8", "replace")\n     return value\n \n@@ -161,7 +160,7 @@ def safe_callable(obj):\n \n def get_empty_title(context, translated=True):\n     """Returns string to be used for objects with no title or id"""\n-    # The default is an extra fancy unicode elipsis\n+    # The default is an extra fancy unicode ellipsis,\n     empty = b"\\x5b\\xc2\\xb7\\xc2\\xb7\\xc2\\xb7\\x5d".decode("utf8")\n     if translated:\n         if context is not None:\n@@ -341,7 +340,7 @@ def get_top_site_from_url(context, request):\n         _path = "/".join(url_path[: _path_idx + 1]) or "/"\n         site_path = "/".join(request.physicalPathFromURL(_path)) or "/"\n         site = context.restrictedTraverse(site_path)\n-    except (ValueError, AttributeError) as exc:\n+    except (ValueError, AttributeError):\n         # On error, just return getSite.\n         # Refs: https://github.com/plone/plone.app.content/issues/103\n         # Also, TestRequest doesn\'t have physicalPathFromURL\n@@ -513,7 +512,7 @@ def _check_for_collision(contained_by, cid, **kwargs):\n             contained_by.checkValidId(cid)\n         except ConflictError:\n             raise\n-        except:  # noqa: E722\n+        except Exception:\n             return _("${name} is reserved.", mapping={"name": cid})\n \n     # make sure we don\'t collide with any parent method aliases\n@@ -584,9 +583,9 @@ def unrestricted_construct_instance(type_name, container, id, *args, **kw):\n     to create the object without security checks.\n     """\n     id = str(id)\n-    typesTool = getToolByName(container, \'portal_types\')\n+    typesTool = getToolByName(container, "portal_types")\n     fti = typesTool.getTypeInfo(type_name)\n     if not fti:\n-        raise ValueError(\'Invalid type %s\' % type_name)\n+        raise ValueError("Invalid type %s" % type_name)\n \n     return fti._constructInstance(container, id, *args, **kw)\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..c079715\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,51 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    plone.portlets  # undeclared dependency of plone.protect\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir}/src -s plone.base\n+extras =\n+    test\n'

