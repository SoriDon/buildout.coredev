Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2023-03-25T15:20:00+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.PlonePAS/commit/2e878ea999f24d2724f5b4d892eb00010edeffb7

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/80cf330f.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 00000000..b4158b89\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 00000000..697a54cb\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "80cf330f"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 00000000..582f8acd\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/80cf330f.internal b/news/80cf330f.internal\nnew file mode 100644\nindex 00000000..c08f5399\n--- /dev/null\n+++ b/news/80cf330f.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex c4f4af63..2ebc43ea 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,8 +1,5 @@\n-[tool.pylint.\'MESSAGES CONTROL\']\n-disable = [\n-    "wrong-import-order",\n-]\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -23,3 +20,48 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\n+\n+[tool.pylint.\'MESSAGES CONTROL\']\n+disable = [\n+    "wrong-import-order",\n+]\ndiff --git a/setup.cfg b/setup.cfg\nindex b06ccf16..0da8f8fb 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,17 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n \n [flake8]\n-# Match Black\'s defaults\n-# https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html#flake8\n-max-line-length = 88\n-extend-ignore = E203\n-aggressive = 3\n-experimental = true\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n \n-\n-[isort]\n-profile = black\n-force_alphabetical_sort=True\n-force_single_line=True\n-lines_after_imports=2\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 00000000..0737ab52\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,53 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s Products.PlonePAS\n+extras =\n+    test\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2023-03-25T15:20:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.PlonePAS/commit/209a894c1c72e95599859f77cb92cd6751cb2e19

chore: pyupgrade

Files changed:
M src/Products/PlonePAS/tools/groups.py

b'diff --git a/src/Products/PlonePAS/tools/groups.py b/src/Products/PlonePAS/tools/groups.py\nindex 97f2a970..47ab275e 100644\n--- a/src/Products/PlonePAS/tools/groups.py\n+++ b/src/Products/PlonePAS/tools/groups.py\n@@ -400,7 +400,7 @@ def setGroupOwnership(self, group, object, REQUEST=None):\n         For GRUF this is easy. Others may have to re-implement."""\n         user = group.getGroup()\n         if user is None:\n-            raise ValueError("Invalid group: \'{}\'.".format(group))\n+            raise ValueError(f"Invalid group: \'{group}\'.")\n         object.changeOwnership(user)\n         object.manage_setLocalRoles(user.getId(), ["Owner"])\n \n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2023-03-25T15:20:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.PlonePAS/commit/55315a36b4e3203f9e4359147979fbe47c260430

chore: isort

Files changed:
M src/Products/PlonePAS/tests/dummy.py

b'diff --git a/src/Products/PlonePAS/tests/dummy.py b/src/Products/PlonePAS/tests/dummy.py\nindex 77338bbb..3f3ebc0b 100644\n--- a/src/Products/PlonePAS/tests/dummy.py\n+++ b/src/Products/PlonePAS/tests/dummy.py\n@@ -4,6 +4,7 @@\n \n import typing\n \n+\n TEXT = b"file data"\n \n \n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2023-03-25T15:20:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.PlonePAS/commit/c2f55c2574c90bd8e2987b29a77f84f2c9f30950

chore: black

Files changed:
M src/Products/PlonePAS/__init__.py
M src/Products/PlonePAS/browser/search.py
M src/Products/PlonePAS/plugins/group.py
M src/Products/PlonePAS/plugins/local_role.py
M src/Products/PlonePAS/plugins/property.py
M src/Products/PlonePAS/plugins/role.py
M src/Products/PlonePAS/plugins/ufactory.py
M src/Products/PlonePAS/setuphandlers.py
M src/Products/PlonePAS/sheet.py
M src/Products/PlonePAS/testing.py
M src/Products/PlonePAS/tests/test_basic_ops.py
M src/Products/PlonePAS/tests/test_groupdatatool.py
M src/Products/PlonePAS/tests/test_groupstool.py
M src/Products/PlonePAS/tests/test_memberdatatool.py
M src/Products/PlonePAS/tests/test_membershiptool.py
M src/Products/PlonePAS/tests/test_properties.py
M src/Products/PlonePAS/tests/test_role_plugin.py
M src/Products/PlonePAS/tests/test_views.py
M src/Products/PlonePAS/tools/groupdata.py
M src/Products/PlonePAS/tools/memberdata.py

b'diff --git a/src/Products/PlonePAS/__init__.py b/src/Products/PlonePAS/__init__.py\nindex b517a9e1..043d5b24 100644\n--- a/src/Products/PlonePAS/__init__.py\n+++ b/src/Products/PlonePAS/__init__.py\n@@ -44,7 +44,6 @@\n \n \n def initialize(context):\n-\n     tools = (GroupsTool, GroupDataTool, MembershipTool, MemberDataTool)\n \n     ToolInit(\ndiff --git a/src/Products/PlonePAS/browser/search.py b/src/Products/PlonePAS/browser/search.py\nindex 2f529e39..587d0401 100644\n--- a/src/Products/PlonePAS/browser/search.py\n+++ b/src/Products/PlonePAS/browser/search.py\n@@ -16,7 +16,7 @@ def extractCriteriaFromRequest(request):\n             if key in criteria:\n                 del criteria[key]\n \n-        for (key, value) in criteria.items():\n+        for key, value in criteria.items():\n             if not value:\n                 del criteria[key]\n \ndiff --git a/src/Products/PlonePAS/plugins/group.py b/src/Products/PlonePAS/plugins/group.py\nindex fcdc0f65..4a525aea 100644\n--- a/src/Products/PlonePAS/plugins/group.py\n+++ b/src/Products/PlonePAS/plugins/group.py\n@@ -44,7 +44,6 @@ def manage_addGroupManager(self, id, title="", RESPONSE=None):\n \n @implementer(IGroupManagement, IGroupIntrospection, IGroupCapability, IDeleteCapability)\n class GroupManager(ZODBGroupManager):\n-\n     meta_type = "Group Manager"\n     security = ClassSecurityInfo()\n \n@@ -170,7 +169,6 @@ def _findGroup(self, plugins, group_id, title=None, request=None):\n \n         propfinders = plugins.listPlugins(IPropertiesPlugin)\n         for propfinder_id, propfinder in propfinders:\n-\n             data = propfinder.getPropertiesForUser(group, request)\n             if data:\n                 group.addPropertysheet(propfinder_id, data)\n@@ -191,7 +189,6 @@ def _findGroup(self, plugins, group_id, title=None, request=None):\n \n     @security.private\n     def _verifyGroup(self, plugins, group_id=None, title=None):\n-\n         """group_id -> boolean\n         This method based on PluggableAuthService._verifyUser\n         """\ndiff --git a/src/Products/PlonePAS/plugins/local_role.py b/src/Products/PlonePAS/plugins/local_role.py\nindex b28c1abd..f224c755 100644\n--- a/src/Products/PlonePAS/plugins/local_role.py\n+++ b/src/Products/PlonePAS/plugins/local_role.py\n@@ -99,7 +99,6 @@ def checkLocalRolesAllowed(self, user, object, object_roles):\n         principal_ids.insert(0, user_id)\n \n         while 1:\n-\n             local_roles = getattr(inner_obj, "__ac_local_roles__", None)\n \n             if local_roles and callable(local_roles):\n@@ -147,14 +146,12 @@ def getAllLocalRolesInContext(self, context):\n         object = aq_inner(context)\n \n         while True:\n-\n             local_roles = getattr(object, "__ac_local_roles__", None)\n \n             if local_roles and callable(local_roles):\n                 local_roles = local_roles()\n \n             if local_roles:\n-\n                 dict = local_roles\n \n                 for principal, localroles in dict.items():\ndiff --git a/src/Products/PlonePAS/plugins/property.py b/src/Products/PlonePAS/plugins/property.py\nindex f40f4114..58902429 100644\n--- a/src/Products/PlonePAS/plugins/property.py\n+++ b/src/Products/PlonePAS/plugins/property.py\n@@ -212,7 +212,7 @@ def deleteUser(self, user_id):\n     @security.private\n     def testMemberData(self, memberdata, criteria, exact_match=False):\n         """Test if a memberdata matches the search criteria."""\n-        for (key, value) in criteria.items():\n+        for key, value in criteria.items():\n             testvalue = memberdata.get(key, None)\n             if testvalue is None:\n                 return False\ndiff --git a/src/Products/PlonePAS/plugins/role.py b/src/Products/PlonePAS/plugins/role.py\nindex 61247d47..7cb8e74a 100644\n--- a/src/Products/PlonePAS/plugins/role.py\n+++ b/src/Products/PlonePAS/plugins/role.py\n@@ -36,7 +36,6 @@ def manage_addGroupAwareRoleManager(self, id, title="", RESPONSE=None):\n \n @implementer(IAssignRoleCapability)\n class GroupAwareRoleManager(ZODBRoleManager):\n-\n     meta_type = "Group Aware Role Manager"\n     security = ClassSecurityInfo()\n \ndiff --git a/src/Products/PlonePAS/plugins/ufactory.py b/src/Products/PlonePAS/plugins/ufactory.py\nindex 06b8fe78..de0bf07e 100644\n--- a/src/Products/PlonePAS/plugins/ufactory.py\n+++ b/src/Products/PlonePAS/plugins/ufactory.py\n@@ -33,7 +33,6 @@ def manage_addPloneUserFactory(self, id, title="", RESPONSE=None):\n \n @implementer(IUserFactoryPlugin)\n class PloneUserFactory(BasePlugin):\n-\n     security = ClassSecurityInfo()\n     meta_type = "Plone User Factory"\n \n@@ -50,7 +49,6 @@ def createUser(self, user_id, name):\n \n \n class PloneUser(PropertiedUser):\n-\n     security = ClassSecurityInfo()\n \n     #################################\n@@ -205,7 +203,7 @@ def setProperties(self, properties=None, **kw):\n                 continue\n \n             update = {}\n-            for (key, value) in list(properties.items()):\n+            for key, value in list(properties.items()):\n                 if sheet.hasProperty(key):\n                     update[key] = value\n                     del properties[key]\ndiff --git a/src/Products/PlonePAS/setuphandlers.py b/src/Products/PlonePAS/setuphandlers.py\nindex f9d72040..69c6e828 100644\n--- a/src/Products/PlonePAS/setuphandlers.py\n+++ b/src/Products/PlonePAS/setuphandlers.py\n@@ -75,7 +75,6 @@ def registerPluginType(pas, plugin_type, plugin_info):\n \n \n def registerPluginTypes(pas):\n-\n     PluginInfo = {\n         "id": "IUserManagement",\n         "title": "user_management",\ndiff --git a/src/Products/PlonePAS/sheet.py b/src/Products/PlonePAS/sheet.py\nindex 221ef494..5c498ebb 100644\n--- a/src/Products/PlonePAS/sheet.py\n+++ b/src/Products/PlonePAS/sheet.py\n@@ -44,7 +44,9 @@ def validate(self, property_type, value):\n PropertySchema.addType("text", lambda x: x is None or isinstance(x, str))\n PropertySchema.addType("boolean", lambda x: 1)  # anything can be boolean\n PropertySchema.addType("int", lambda x: x is None or isinstance(x, int))\n-PropertySchema.addType("long", lambda x: x is None or isinstance(x, int))  # theres is no long in Python 3\n+PropertySchema.addType(\n+    "long", lambda x: x is None or isinstance(x, int)\n+)  # theres is no long in Python 3\n PropertySchema.addType("float", lambda x: x is None or isinstance(x, float))\n PropertySchema.addType("lines", lambda x: x is None or isinstance(x, (tuple, list)))\n PropertySchema.addType("selection", lambda x: x is None or isinstance(x, str))\ndiff --git a/src/Products/PlonePAS/testing.py b/src/Products/PlonePAS/testing.py\nindex f25f9d23..224c2660 100644\n--- a/src/Products/PlonePAS/testing.py\n+++ b/src/Products/PlonePAS/testing.py\n@@ -10,7 +10,6 @@\n \n \n class ProductsPlonepasLayer(PloneSandboxLayer):\n-\n     defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\ndiff --git a/src/Products/PlonePAS/tests/test_basic_ops.py b/src/Products/PlonePAS/tests/test_basic_ops.py\nindex d6c42e38..d1974fe5 100644\n--- a/src/Products/PlonePAS/tests/test_basic_ops.py\n+++ b/src/Products/PlonePAS/tests/test_basic_ops.py\n@@ -14,7 +14,6 @@\n \n \n class BasicOpsTestCase(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/src/Products/PlonePAS/tests/test_groupdatatool.py b/src/Products/PlonePAS/tests/test_groupdatatool.py\nindex e78240f4..c267af62 100644\n--- a/src/Products/PlonePAS/tests/test_groupdatatool.py\n+++ b/src/Products/PlonePAS/tests/test_groupdatatool.py\n@@ -16,7 +16,6 @@ def sortTuple(t):\n \n \n class TestGroupDataTool(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -40,7 +39,6 @@ def testWrapGroup(self):\n \n \n class TestGroupData(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -153,7 +151,6 @@ def testHasRole(self):\n \n \n class TestMethodProtection(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/src/Products/PlonePAS/tests/test_groupstool.py b/src/Products/PlonePAS/tests/test_groupstool.py\nindex 77c53aa5..2c23f611 100644\n--- a/src/Products/PlonePAS/tests/test_groupstool.py\n+++ b/src/Products/PlonePAS/tests/test_groupstool.py\n@@ -23,7 +23,6 @@ def sortTuple(t):\n \n \n class TestGroupsTool(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -119,7 +118,6 @@ def testManagerRemoveMember(self):\n \n \n class TestGroupsToolIntegration(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/src/Products/PlonePAS/tests/test_memberdatatool.py b/src/Products/PlonePAS/tests/test_memberdatatool.py\nindex 68cb4c01..5747b8a8 100644\n--- a/src/Products/PlonePAS/tests/test_memberdatatool.py\n+++ b/src/Products/PlonePAS/tests/test_memberdatatool.py\n@@ -13,7 +13,6 @@\n \n \n class TestMemberDataTool(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/src/Products/PlonePAS/tests/test_membershiptool.py b/src/Products/PlonePAS/tests/test_membershiptool.py\nindex 766a1f4e..b554d545 100644\n--- a/src/Products/PlonePAS/tests/test_membershiptool.py\n+++ b/src/Products/PlonePAS/tests/test_membershiptool.py\n@@ -33,7 +33,6 @@\n \n \n class MembershipToolTest(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -135,7 +134,6 @@ def test_id_clean(self):\n \n \n class MemberAreaTest(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -182,7 +180,6 @@ def test_memberareaCreationFlag_respected(self):\n \n \n class TestMembershipTool(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -696,7 +693,6 @@ def got_credentials_updated_event(event):\n \n \n class TestCreateMemberarea(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -779,7 +775,6 @@ def testCreateMemberareaWhenDisabled(self):\n \n \n class TestMemberareaSetup(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -823,7 +818,6 @@ def testHomePageNotExists(self):\n \n \n class TestSearchForMembers(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -967,7 +961,6 @@ def assertProtected(self, object, method):\n \n \n class TestMemberInfoView(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/src/Products/PlonePAS/tests/test_properties.py b/src/Products/PlonePAS/tests/test_properties.py\nindex 63d3de38..37ee865c 100644\n--- a/src/Products/PlonePAS/tests/test_properties.py\n+++ b/src/Products/PlonePAS/tests/test_properties.py\n@@ -10,7 +10,6 @@\n \n \n class PropertiesTest(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -204,7 +203,6 @@ def test_schema_for_mutable_property_provider(self):\n \n \n class PropertySearchTest(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/src/Products/PlonePAS/tests/test_role_plugin.py b/src/Products/PlonePAS/tests/test_role_plugin.py\nindex caf432b7..a252b470 100644\n--- a/src/Products/PlonePAS/tests/test_role_plugin.py\n+++ b/src/Products/PlonePAS/tests/test_role_plugin.py\n@@ -26,13 +26,11 @@ class GroupAwareRoleManagerTests(unittest.TestCase):\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def _getTargetClass(self):\n-\n         from Products.PlonePAS.plugins.role import GroupAwareRoleManager\n \n         return GroupAwareRoleManager\n \n     def _makeOne(self, id="test", *args, **kw):\n-\n         plugin = self._getTargetClass()(id=id, *args, **kw)\n         # We need to bind a fake request to this plugin\n         request, dummy_response = makeRequestAndResponse()\ndiff --git a/src/Products/PlonePAS/tests/test_views.py b/src/Products/PlonePAS/tests/test_views.py\nindex e1daa8da..d7d6bcef 100644\n--- a/src/Products/PlonePAS/tests/test_views.py\n+++ b/src/Products/PlonePAS/tests/test_views.py\n@@ -4,7 +4,6 @@\n \n \n class TestPASSearchView(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def test_sort(self):\ndiff --git a/src/Products/PlonePAS/tools/groupdata.py b/src/Products/PlonePAS/tools/groupdata.py\nindex b9074a31..581f3e03 100644\n--- a/src/Products/PlonePAS/tools/groupdata.py\n+++ b/src/Products/PlonePAS/tools/groupdata.py\n@@ -102,7 +102,6 @@ def registerGroupData(self, g, id):\n \n @implementer(IGroupData, IManageCapabilities)\n class GroupData(SimpleItem):\n-\n     security = ClassSecurityInfo()\n \n     id = None\ndiff --git a/src/Products/PlonePAS/tools/memberdata.py b/src/Products/PlonePAS/tools/memberdata.py\nindex c270307e..2f764011 100644\n--- a/src/Products/PlonePAS/tools/memberdata.py\n+++ b/src/Products/PlonePAS/tools/memberdata.py\n@@ -145,7 +145,6 @@ def searchMemberDataContents(self, search_param, search_term):\n \n                 if searched is not None:\n                     if searched.strip().lower().find(search_term) != -1:\n-\n                         res.append(\n                             {\n                                 "username": memberProperty("id"),\n@@ -227,7 +226,6 @@ def _getPlugins(self):\n @implementer(IManageCapabilities, IMember)\n @adapter(IUser, IMemberDataTool)\n class MemberData(BaseMemberAdapter):\n-\n     security = ClassSecurityInfo()\n \n     def __init__(self, user, tool):\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2023-03-25T15:20:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.PlonePAS/commit/57859cb22941bac4f084cb3bfa093baceeb0ac94

chore: zpretty ZCML/XML

Files changed:
M src/Products/PlonePAS/browser/configure.zcml
M src/Products/PlonePAS/configure.zcml
M src/Products/PlonePAS/exportimport.zcml
M src/Products/PlonePAS/profiles.zcml
M src/Products/PlonePAS/profiles/default/metadata.xml
M src/Products/PlonePAS/profiles/root-cookie/metadata.xml
M src/Products/PlonePAS/tools/configure.zcml

b'diff --git a/src/Products/PlonePAS/browser/configure.zcml b/src/Products/PlonePAS/browser/configure.zcml\nindex f8e6749d..f6cac731 100644\n--- a/src/Products/PlonePAS/browser/configure.zcml\n+++ b/src/Products/PlonePAS/browser/configure.zcml\n@@ -1,36 +1,37 @@\n <configure\n-    i18n_domain="Five"\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    xmlns:five="http://namespaces.zope.org/five">\n+    xmlns:five="http://namespaces.zope.org/five"\n+    i18n_domain="Five"\n+    >\n \n   <permission\n       id="PAS.SearchPrincipals"\n       title="Search for principals"\n-  />\n+      />\n \n   <browser:page\n-      allowed_interface="Products.PlonePAS.interfaces.browser.IPASInfoView"\n-      class=".info.PASInfoView"\n-      for="*"\n       name="pas_info"\n+      for="*"\n+      class=".info.PASInfoView"\n+      allowed_interface="Products.PlonePAS.interfaces.browser.IPASInfoView"\n       permission="zope2.View"\n-  />\n+      />\n \n   <browser:page\n-      allowed_interface="Products.PlonePAS.interfaces.browser.IPASMemberView"\n-      class=".member.PASMemberView"\n-      for="*"\n       name="pas_member"\n+      for="*"\n+      class=".member.PASMemberView"\n+      allowed_interface="Products.PlonePAS.interfaces.browser.IPASMemberView"\n       permission="zope2.View"\n-  />\n+      />\n \n   <browser:page\n-      allowed_interface="Products.PlonePAS.interfaces.browser.IPASSearchView"\n-      class=".search.PASSearchView"\n-      for="*"\n       name="pas_search"\n+      for="*"\n+      class=".search.PASSearchView"\n+      allowed_interface="Products.PlonePAS.interfaces.browser.IPASSearchView"\n       permission="zope2.View"\n-  />\n+      />\n \n </configure>\ndiff --git a/src/Products/PlonePAS/configure.zcml b/src/Products/PlonePAS/configure.zcml\nindex a6a123e4..4c20bf42 100644\n--- a/src/Products/PlonePAS/configure.zcml\n+++ b/src/Products/PlonePAS/configure.zcml\n@@ -1,8 +1,9 @@\n <configure\n-    i18n_domain="plone"\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:five="http://namespaces.zope.org/five"\n-    xmlns:i18n="http://namespaces.zope.org/i18n">\n+    xmlns:i18n="http://namespaces.zope.org/i18n"\n+    i18n_domain="plone"\n+    >\n \n   <include package=".browser" />\n   <include package=".tools" />\ndiff --git a/src/Products/PlonePAS/exportimport.zcml b/src/Products/PlonePAS/exportimport.zcml\nindex ae6fa67b..56749329 100644\n--- a/src/Products/PlonePAS/exportimport.zcml\n+++ b/src/Products/PlonePAS/exportimport.zcml\n@@ -2,25 +2,25 @@\n \n   <adapter\n       factory="Products.PluggableAuthService.plugins.exportimport.TitleOnlyExportImport"\n-      for="Products.PluggableAuthService.interfaces.plugins.IUserFactoryPlugin"\n       provides="Products.GenericSetup.interfaces.IFilesystemExporter"\n-  />\n+      for="Products.PluggableAuthService.interfaces.plugins.IUserFactoryPlugin"\n+      />\n   <adapter\n       factory="Products.PluggableAuthService.plugins.exportimport.TitleOnlyExportImport"\n-      for="Products.PluggableAuthService.interfaces.plugins.IUserFactoryPlugin"\n       provides="Products.GenericSetup.interfaces.IFilesystemImporter"\n-  />\n+      for="Products.PluggableAuthService.interfaces.plugins.IUserFactoryPlugin"\n+      />\n \n   <!-- XXX This should point to an own export/import class! TitleOnly is far not enough -->\n   <adapter\n       factory="Products.PluggableAuthService.plugins.exportimport.TitleOnlyExportImport"\n-      for="Products.PlonePAS.interfaces.plugins.IMutablePropertiesPlugin"\n       provides="Products.GenericSetup.interfaces.IFilesystemExporter"\n-  />\n+      for="Products.PlonePAS.interfaces.plugins.IMutablePropertiesPlugin"\n+      />\n   <adapter\n       factory="Products.PluggableAuthService.plugins.exportimport.TitleOnlyExportImport"\n-      for="Products.PlonePAS.interfaces.plugins.IMutablePropertiesPlugin"\n       provides="Products.GenericSetup.interfaces.IFilesystemImporter"\n-  />\n+      for="Products.PlonePAS.interfaces.plugins.IMutablePropertiesPlugin"\n+      />\n \n </configure>\ndiff --git a/src/Products/PlonePAS/profiles.zcml b/src/Products/PlonePAS/profiles.zcml\nindex a8993a9f..41343517 100644\n--- a/src/Products/PlonePAS/profiles.zcml\n+++ b/src/Products/PlonePAS/profiles.zcml\n@@ -1,20 +1,22 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plonepas">\n+    i18n_domain="plonepas"\n+    >\n \n   <genericsetup:registerProfile\n       name="PlonePAS"\n       title="PlonePAS"\n-      directory="profiles/default"\n       description="Extension profile for default PlonePAS setup."\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/default"\n       />\n   <genericsetup:importStep\n+      name="plonepas"\n+      title="PlonePAS setup"\n       description="Configure PlonePas"\n       handler="Products.PlonePAS.setuphandlers.setupPlonePAS"\n-      name="plonepas"\n-      title="PlonePAS setup">\n+      >\n     <depends name="componentregistry" />\n     <depends name="controlpanel" />\n     <depends name="memberdata-properties" />\n@@ -25,14 +27,15 @@\n       profile="Products.PlonePAS:PlonePAS"\n       source="4"\n       destination="5"\n-      handler=".upgrades.from4to5_fix_zope_root" />\n+      handler=".upgrades.from4to5_fix_zope_root"\n+      />\n \n   <genericsetup:registerProfile\n       name="root-cookie"\n       title="Zope Root Cookie Login"\n-      description="Change the Zope root `/acl_users` to use a simple cookie login form\n-\t\t   instead of HTTP `Basic ...` for authentication."\n+      description="Change the Zope root `/acl_users` to use a simple cookie login form      instead of HTTP `Basic ...` for authentication."\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n-      post_handler=".setuphandlers.set_up_zope_root_cookie_auth" />\n+      post_handler=".setuphandlers.set_up_zope_root_cookie_auth"\n+      />\n \n </configure>\ndiff --git a/src/Products/PlonePAS/profiles/default/metadata.xml b/src/Products/PlonePAS/profiles/default/metadata.xml\nindex 1062ac87..9b2ed11c 100644\n--- a/src/Products/PlonePAS/profiles/default/metadata.xml\n+++ b/src/Products/PlonePAS/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>5</version>\n </metadata>\ndiff --git a/src/Products/PlonePAS/profiles/root-cookie/metadata.xml b/src/Products/PlonePAS/profiles/root-cookie/metadata.xml\nindex cf4492ac..08b37b63 100644\n--- a/src/Products/PlonePAS/profiles/root-cookie/metadata.xml\n+++ b/src/Products/PlonePAS/profiles/root-cookie/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>1</version>\n </metadata>\ndiff --git a/src/Products/PlonePAS/tools/configure.zcml b/src/Products/PlonePAS/tools/configure.zcml\nindex ce5e9d4d..7616a8ed 100644\n--- a/src/Products/PlonePAS/tools/configure.zcml\n+++ b/src/Products/PlonePAS/tools/configure.zcml\n@@ -1,8 +1,8 @@\n <configure xmlns="http://namespaces.zope.org/zope">\n \n   <adapter\n-      provides="Products.CMFCore.interfaces.IMember"\n       factory=".memberdata.MemberData"\n+      provides="Products.CMFCore.interfaces.IMember"\n       />\n \n </configure>\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2023-03-25T15:20:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.PlonePAS/commit/56cb13d630e07b05a9f76d03c5bd1153767612d8

chore: zpretty PT

Files changed:
M src/Products/PlonePAS/zmi/AutoGroupForm.zpt
M src/Products/PlonePAS/zmi/PasswordPolicyForm.zpt

b'diff --git a/src/Products/PlonePAS/zmi/AutoGroupForm.zpt b/src/Products/PlonePAS/zmi/AutoGroupForm.zpt\nindex 0e60c35f..1de61d55 100644\n--- a/src/Products/PlonePAS/zmi/AutoGroupForm.zpt\n+++ b/src/Products/PlonePAS/zmi/AutoGroupForm.zpt\n@@ -1,66 +1,109 @@\n <h1 tal:replace="structure here/manage_page_header">Header</h1>\n \n-<h2 tal:define="form_title string:Add Auto Group plugin"\n-    tal:replace="structure here/manage_form_title">Form Title</h2>\n+<h2 tal:define="\n+      form_title string:Add Auto Group plugin;\n+    "\n+    tal:replace="structure here/manage_form_title"\n+>Form Title</h2>\n \n <p class="form-help">\n The Auto Group plugin automatically puts all authenticated users in a virtual\n group.\n </p>\n \n-<form action="manage_addAutoGroup" method="post">\n-<table cellspacing="0" cellpadding="2" border="0">\n-  <tr>\n-    <td align="left" valign="top">\n-    <div class="form-label">\n+<form action="manage_addAutoGroup"\n+      method="post"\n+>\n+  <table border="0"\n+         cellpadding="2"\n+         cellspacing="0"\n+  >\n+    <tr>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <div class="form-label">\n     Id\n-    </div>\n-    </td>\n-    <td align="left" valign="top">\n-    <input type="text" name="id" size="40" />\n-    </td>\n-  </tr>\n-  <tr>\n-    <td align="left" valign="top">\n-    <div class="form-optional">\n+        </div>\n+      </td>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <input name="id"\n+               size="40"\n+               type="text"\n+        />\n+      </td>\n+    </tr>\n+    <tr>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <div class="form-optional">\n     Title\n-    </div>\n-    </td>\n-    <td align="left" valign="top">\n-    <input type="text" name="title" size="40" />\n-    </td>\n-  </tr>\n-  <tr>\n-    <td align="left" valign="top">\n-    <div class="form-label">\n+        </div>\n+      </td>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <input name="title"\n+               size="40"\n+               type="text"\n+        />\n+      </td>\n+    </tr>\n+    <tr>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <div class="form-label">\n     Group id\n-    </div>\n-    </td>\n-    <td align="left" valign="top">\n-    <input type="text" name="group" size="40" />\n-    </td>\n-  </tr>\n-  <tr>\n-    <td align="left" valign="top">\n-    <div class="form-label">\n+        </div>\n+      </td>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <input name="group"\n+               size="40"\n+               type="text"\n+        />\n+      </td>\n+    </tr>\n+    <tr>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <div class="form-label">\n     Description\n-    </div>\n-    </td>\n-    <td align="left" valign="top">\n-    <input type="text" name="description" size="40" />\n-    </td>\n-  </tr>\n-  <tr>\n-    <td align="left" valign="top">\n-    </td>\n-    <td align="left" valign="top">\n-    <div class="form-element">\n-    <input class="form-element" type="submit" name="submit"\n-     value=" Add " />\n-    </div>\n-    </td>\n-  </tr>\n-</table>\n+        </div>\n+      </td>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <input name="description"\n+               size="40"\n+               type="text"\n+        />\n+      </td>\n+    </tr>\n+    <tr>\n+      <td align="left"\n+          valign="top"\n+      >\n+      </td>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <div class="form-element">\n+          <input class="form-element"\n+                 name="submit"\n+                 type="submit"\n+                 value=" Add "\n+          />\n+        </div>\n+      </td>\n+    </tr>\n+  </table>\n </form>\n \n <h1 tal:replace="structure here/manage_page_footer">Footer</h1>\ndiff --git a/src/Products/PlonePAS/zmi/PasswordPolicyForm.zpt b/src/Products/PlonePAS/zmi/PasswordPolicyForm.zpt\nindex 43a2726d..2b97a070 100644\n--- a/src/Products/PlonePAS/zmi/PasswordPolicyForm.zpt\n+++ b/src/Products/PlonePAS/zmi/PasswordPolicyForm.zpt\n@@ -1,45 +1,74 @@\n <h1 tal:replace="structure here/manage_page_header">Header</h1>\n \n-<h2 tal:define="form_title string:Add Default Plone Password Policy plugin"\n-    tal:replace="structure here/manage_form_title">Form Title</h2>\n+<h2 tal:define="\n+      form_title string:Add Default Plone Password Policy plugin;\n+    "\n+    tal:replace="structure here/manage_form_title"\n+>Form Title</h2>\n \n <p class="form-help">\n The Default Plone Password Policy validates passwords to be at least 5 chars long\n </p>\n \n-<form action="manage_addPasswordPolicyPlugin" method="post">\n-<table cellspacing="0" cellpadding="2" border="0">\n-  <tr>\n-    <td align="left" valign="top">\n-    <div class="form-label">\n+<form action="manage_addPasswordPolicyPlugin"\n+      method="post"\n+>\n+  <table border="0"\n+         cellpadding="2"\n+         cellspacing="0"\n+  >\n+    <tr>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <div class="form-label">\n     Id\n-    </div>\n-    </td>\n-    <td align="left" valign="top">\n-    <input type="text" name="id" size="40" />\n-    </td>\n-  </tr>\n-  <tr>\n-    <td align="left" valign="top">\n-    <div class="form-optional">\n+        </div>\n+      </td>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <input name="id"\n+               size="40"\n+               type="text"\n+        />\n+      </td>\n+    </tr>\n+    <tr>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <div class="form-optional">\n     Title\n-    </div>\n-    </td>\n-    <td align="left" valign="top">\n-    <input type="text" name="title" size="40" />\n-    </td>\n-  </tr>\n-  <tr>\n-    <td align="left" valign="top">\n-    </td>\n-    <td align="left" valign="top">\n-    <div class="form-element">\n-    <input class="form-element" type="submit" name="submit"\n-     value=" Add " />\n-    </div>\n-    </td>\n-  </tr>\n-</table>\n+        </div>\n+      </td>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <input name="title"\n+               size="40"\n+               type="text"\n+        />\n+      </td>\n+    </tr>\n+    <tr>\n+      <td align="left"\n+          valign="top"\n+      >\n+      </td>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <div class="form-element">\n+          <input class="form-element"\n+                 name="submit"\n+                 type="submit"\n+                 value=" Add "\n+          />\n+        </div>\n+      </td>\n+    </tr>\n+  </table>\n </form>\n \n <h1 tal:replace="structure here/manage_page_footer">Footer</h1>\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2023-03-25T15:20:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.PlonePAS/commit/64e7a1bf062337c2f2003ffb7ef488dc4bf9a39a

chore(tox): set src folder to test

Files changed:
M tox.ini

b'diff --git a/tox.ini b/tox.ini\nindex 0737ab52..b24b0bda 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -48,6 +48,6 @@ deps =\n     zope.testrunner\n     -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    zope-testrunner --test-path={toxinidir} -s Products.PlonePAS\n+    zope-testrunner --test-path={toxinidir}/src -s Products.PlonePAS\n extras =\n     test\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2023-03-25T15:20:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.PlonePAS/commit/e6cc79be985bf34e7309909d7b32086703b3b0e6

feat: pyroma

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex d2ff030f..1c0cc54b 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -51,6 +51,7 @@\n     namespace_packages=["Products"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=install_requires,\n     extras_require=dict(\n         test=[\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2023-03-25T15:20:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.PlonePAS/commit/6e23166882c51c02dcb81f4f5f264b54a72560f8

feat: flake8

Files changed:
M setup.py
M src/Products/PlonePAS/setuphandlers.py
M src/Products/PlonePAS/tests/test_doctests.py
M src/Products/PlonePAS/tests/test_groupdatatool.py
M src/Products/PlonePAS/tests/test_groupstool.py
M src/Products/PlonePAS/tools/groups.py
M src/Products/PlonePAS/tools/membership.py

b'diff --git a/setup.py b/setup.py\nindex 1c0cc54b..e34a5023 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,8 +1,6 @@\n from setuptools import find_packages\n from setuptools import setup\n \n-import sys\n-\n \n version = "7.0.1.dev0"\n \ndiff --git a/src/Products/PlonePAS/setuphandlers.py b/src/Products/PlonePAS/setuphandlers.py\nindex 69c6e828..7b0aa537 100644\n--- a/src/Products/PlonePAS/setuphandlers.py\n+++ b/src/Products/PlonePAS/setuphandlers.py\n@@ -21,7 +21,6 @@\n from Products.PluggableAuthService.plugins.RecursiveGroupsPlugin import (\n     addRecursiveGroupsPlugin,\n )\n-from zope import component\n \n import logging\n \ndiff --git a/src/Products/PlonePAS/tests/test_doctests.py b/src/Products/PlonePAS/tests/test_doctests.py\nindex 0583c7ea..f15e2f9f 100644\n--- a/src/Products/PlonePAS/tests/test_doctests.py\n+++ b/src/Products/PlonePAS/tests/test_doctests.py\n@@ -2,7 +2,6 @@\n from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING\n \n import doctest\n-import re\n import unittest\n \n \ndiff --git a/src/Products/PlonePAS/tests/test_groupdatatool.py b/src/Products/PlonePAS/tests/test_groupdatatool.py\nindex c267af62..30e9d8d4 100644\n--- a/src/Products/PlonePAS/tests/test_groupdatatool.py\n+++ b/src/Products/PlonePAS/tests/test_groupdatatool.py\n@@ -9,10 +9,10 @@\n import unittest\n \n \n-def sortTuple(t):\n-    l = list(t)\n-    l.sort()\n-    return tuple(l)\n+def sortTuple(a_tuple):\n+    a_list = list(a_tuple)\n+    a_list.sort()\n+    return tuple(a_list)\n \n \n class TestGroupDataTool(unittest.TestCase):\ndiff --git a/src/Products/PlonePAS/tests/test_groupstool.py b/src/Products/PlonePAS/tests/test_groupstool.py\nindex 2c23f611..0974e26e 100644\n--- a/src/Products/PlonePAS/tests/test_groupstool.py\n+++ b/src/Products/PlonePAS/tests/test_groupstool.py\n@@ -16,10 +16,10 @@\n import unittest\n \n \n-def sortTuple(t):\n-    l = list(t)\n-    l.sort()\n-    return tuple(l)\n+def sortTuple(a_tuple):\n+    a_list = list(a_tuple)\n+    a_list.sort()\n+    return tuple(a_list)\n \n \n class TestGroupsTool(unittest.TestCase):\ndiff --git a/src/Products/PlonePAS/tools/groups.py b/src/Products/PlonePAS/tools/groups.py\nindex 47ab275e..7d4a1083 100644\n--- a/src/Products/PlonePAS/tools/groups.py\n+++ b/src/Products/PlonePAS/tools/groups.py\n@@ -432,7 +432,7 @@ def wrapGroup(self, g, wrap_anon=0):\n                 return portal_group\n             except ConflictError:\n                 raise\n-            except:\n+            except Exception:\n                 logger.exception("Error during wrapGroup")\n         # Failed.\n         return g\ndiff --git a/src/Products/PlonePAS/tools/membership.py b/src/Products/PlonePAS/tools/membership.py\nindex 5a60059c..103d0410 100644\n--- a/src/Products/PlonePAS/tools/membership.py\n+++ b/src/Products/PlonePAS/tools/membership.py\n@@ -707,7 +707,7 @@ def logoutUser(self, REQUEST=None):\n             pas = getToolByName(self, "acl_users")\n             try:\n                 pas.logout(REQUEST)\n-            except Exception as e:\n+            except Exception:\n                 logger.error("Error in PAS logout()", exc_info=True)\n \n             # Expire the skin cookie if it is not configured to persist\n@@ -768,7 +768,7 @@ def getBadMembers(self):\n                 PIL.Image.open(BytesIO(portrait_data))\n             except ConflictError:\n                 pass\n-            except:\n+            except Exception:\n                 # Anything else we have a bad bad image and we destroy it\n                 # and ask questions later.\n                 portraits._delObject(member_id)\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2023-03-25T15:20:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.PlonePAS/commit/ee2b2e86427ca668d3f53d2f222ba96182ed6ad6

feat: codespell

Files changed:
M CHANGES.rst
M README.rst
M docs/STATUS.txt
M src/Products/PlonePAS/interfaces/group.py
M src/Products/PlonePAS/ldapmp.py
M src/Products/PlonePAS/pas.py
M src/Products/PlonePAS/plugins/group.py
M src/Products/PlonePAS/plugins/user.py
M src/Products/PlonePAS/sheet.py
M src/Products/PlonePAS/tests/test_membershiptool.py
M src/Products/PlonePAS/tests/test_role_plugin.py
M src/Products/PlonePAS/tools/groupdata.py
M src/Products/PlonePAS/tools/membership.py
M src/Products/PlonePAS/utils.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex d2d92fd4..557a770f 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -345,14 +345,14 @@ Fixes:\n   structure expected by ``buildout.plonetest``\'s ``qa.cfg``.\n   [jensens]\n \n-- Make patching of LDAPMultiPlugin explizit. Code using those must call\n+- Make patching of LDAPMultiPlugin explicit. Code using those must call\n   ``Products.PlonePAS.ldapmp.patch_ldapmp`` with no parameters in order\n   to activate the patches.\n   [jensens]\n \n - Removed (optional) Archetypes Storage (used in past with CMFMember, which\n-  itself was long time ago superseeded by Membrane). Probably dead code. If\n-  theres someone out there needing it in Plone 5 please copy the code from\n+  itself was long time ago superseded by Membrane). Probably dead code. If\n+  there\'s someone out there needing it in Plone 5 please copy the code from\n   git/Plone4 in your addon/project.\n   [jensens]\n \n@@ -607,7 +607,7 @@ Fixes:\n 4.0.1 - 2010-07-31\n ------------------\n \n-- Clean up some unused imports and variable assigments.\n+- Clean up some unused imports and variable assignments.\n   [esteele]\n \n - Stop looking to GRUF to check if group properties can be edited.\n@@ -1230,7 +1230,7 @@ Fixes:\n   types.\n   [reinout]\n \n-- Correct creation of groups wich default group managers.\n+- Correct creation of groups which default group managers.\n   [dreamcatcher]\n \n - Fix migration from GRUF sites: also include the member properties in the\ndiff --git a/README.rst b/README.rst\nindex ef1bdf5f..23ed81bd 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -57,7 +57,7 @@ Chad, Gautham, Joel, Kapil, Michel, Micheal ]\n Post-sprint work: J Cameron Cooper, Leo, Sidnei, Mark at `Enfold\n Systems <http://enfoldsystems.com>`_\n \n-Basic setAuthCookie support (to mimick CookieCrumbler):\n+Basic setAuthCookie support (to mimic CookieCrumbler):\n Rocky Burt at `ServerZen Software <http://www.serverzen.com>`_\n \n Synced login process with Plone:\n@@ -69,7 +69,7 @@ Wichert Akkerman at Simplon\n Bugfixes, improvements to membership and property lookups:\n Eric Steele and Erik Rose\n \n-Review, cleanup, modernize code, adressing Plone 5:\n+Review, cleanup, modernize code, addressing Plone 5:\n Jens Klein, BlueDynamics Alliance - `Klein & Partner KG <http://kleinundpartner.at>`_\n \n Source Code\ndiff --git a/docs/STATUS.txt b/docs/STATUS.txt\nindex a707e565..5172d6d8 100644\n--- a/docs/STATUS.txt\n+++ b/docs/STATUS.txt\n@@ -1,12 +1,12 @@\n Some Plone UI functionality will not work with all plugins.\n many plugins cannot modify users/properties/groups/etc. There is some\n capabilities checking now, so that things that cannot be changed will not\n-appear changable.\n+appear changeable.\n \n PlonePAS implements a good deal of the API expected of a UserFolder\n and of GRUF. However, no systematic determination of interface\n fulfillment has been made, beyond that used by the Plone UI. Over time\n-GRUF compatibilty will be removed in favour of a new interface on top\n+GRUF compatibility will be removed in favour of a new interface on top\n of PAS.\n \n PlonePAS will currently migrate the users and groups of a default\ndiff --git a/src/Products/PlonePAS/interfaces/group.py b/src/Products/PlonePAS/interfaces/group.py\nindex 739f453f..753e1e3b 100644\n--- a/src/Products/PlonePAS/interfaces/group.py\n+++ b/src/Products/PlonePAS/interfaces/group.py\n@@ -6,7 +6,7 @@ class IGroupManagement(Interface):\n     def addGroup(id, **kw):\n         """\n         Create a group with the supplied id, roles, and groups.\n-        return True if the operation suceeded\n+        return True if the operation succeeded\n         """\n \n     def addPrincipalToGroup(principal_id, group_id):\ndiff --git a/src/Products/PlonePAS/ldapmp.py b/src/Products/PlonePAS/ldapmp.py\nindex 5e84d05a..1b83ef33 100644\n--- a/src/Products/PlonePAS/ldapmp.py\n+++ b/src/Products/PlonePAS/ldapmp.py\n@@ -21,7 +21,7 @@\n \n \n def getPropertiesForUser(self, user, request=None):\n-    """Fullfill PropertiesPlugin requirements"""\n+    """Fulfill PropertiesPlugin requirements"""\n \n     if not isinstance(user, PloneGroup):\n         # It\'s not a PloneGroup, continue as usual\ndiff --git a/src/Products/PlonePAS/pas.py b/src/Products/PlonePAS/pas.py\nindex 83bc6ba2..b960f073 100644\n--- a/src/Products/PlonePAS/pas.py\n+++ b/src/Products/PlonePAS/pas.py\n@@ -1,4 +1,4 @@\n-# pas alterations and monkies\n+# pas alterations and monkeys\n from AccessControl import getSecurityManager\n from AccessControl import Unauthorized\n from AccessControl.PermissionRole import PermissionRole\n@@ -41,7 +41,7 @@\n \n \n def _userSetGroups(pas, user_id, groupnames):\n-    """method was used at GRUF level, but is used inside this monkies at several\n+    """method was used at GRUF level, but is used inside this monkeys at several\n     places too.\n \n     We no longer provide it on PAS to clean up patches\n@@ -83,7 +83,7 @@ def _userSetGroups(pas, user_id, groupnames):\n \n \n #################################\n-# pas folder monkies - standard zope user folder api or GRUF\n+# pas folder monkeys - standard zope user folder api or GRUF\n \n \n def _doAddUser(self, login, password, roles, domains, groups=None, **kw):\ndiff --git a/src/Products/PlonePAS/plugins/group.py b/src/Products/PlonePAS/plugins/group.py\nindex 4a525aea..f72fe9ec 100644\n--- a/src/Products/PlonePAS/plugins/group.py\n+++ b/src/Products/PlonePAS/plugins/group.py\n@@ -108,7 +108,7 @@ def getGroupMembers(self, group_id):\n         return tuple(self._group_principal_map.get(group_id, ()))\n \n     #################################\n-    # capabilties interface impls.\n+    # capabilities interface impls.\n \n     @security.public\n     def allowDeletePrincipal(self, principal_id):\ndiff --git a/src/Products/PlonePAS/plugins/user.py b/src/Products/PlonePAS/plugins/user.py\nindex f24bae78..dbd560ea 100644\n--- a/src/Products/PlonePAS/plugins/user.py\n+++ b/src/Products/PlonePAS/plugins/user.py\n@@ -48,7 +48,7 @@ class UserManager(BasePlugin):\n     @security.protected(ManageUsers)\n     def addUser(self, user_id, login_name, password):\n         """Original ZODBUserManager.addUser, modified to check if\n-        incoming password is already encypted.\n+        incoming password is already encrypted.\n \n         This support clean migration from default user source.\n         Should go into PAS.\ndiff --git a/src/Products/PlonePAS/sheet.py b/src/Products/PlonePAS/sheet.py\nindex 5c498ebb..2ca9d230 100644\n--- a/src/Products/PlonePAS/sheet.py\n+++ b/src/Products/PlonePAS/sheet.py\n@@ -46,7 +46,7 @@ def validate(self, property_type, value):\n PropertySchema.addType("int", lambda x: x is None or isinstance(x, int))\n PropertySchema.addType(\n     "long", lambda x: x is None or isinstance(x, int)\n-)  # theres is no long in Python 3\n+)  # there\'s is no long in Python 3\n PropertySchema.addType("float", lambda x: x is None or isinstance(x, float))\n PropertySchema.addType("lines", lambda x: x is None or isinstance(x, (tuple, list)))\n PropertySchema.addType("selection", lambda x: x is None or isinstance(x, str))\ndiff --git a/src/Products/PlonePAS/tests/test_membershiptool.py b/src/Products/PlonePAS/tests/test_membershiptool.py\nindex b554d545..b0d3480b 100644\n--- a/src/Products/PlonePAS/tests/test_membershiptool.py\n+++ b/src/Products/PlonePAS/tests/test_membershiptool.py\n@@ -684,12 +684,12 @@ def got_credentials_updated_event(event):\n         gsm.registerHandler(got_credentials_updated_event)\n \n         self.assertTrue(self.membership.testCurrentPassword(TEST_USER_PASSWORD))\n-        self.assertFalse(self.membership.testCurrentPassword("whoknows"))\n+        self.assertFalse(self.membership.testCurrentPassword("who-knows"))\n         login(self.portal, TEST_USER_NAME)  # Back to normal\n-        self.membership.setPassword("guessagain")\n+        self.membership.setPassword("guess-again")\n         self.assertEqual(len(events_fired), 1)\n         self.assertEqual(events_fired[0].principal.getId(), TEST_USER_ID)\n-        self.assertEqual(events_fired[0].password, "guessagain")\n+        self.assertEqual(events_fired[0].password, "guess-again")\n \n \n class TestCreateMemberarea(unittest.TestCase):\ndiff --git a/src/Products/PlonePAS/tests/test_role_plugin.py b/src/Products/PlonePAS/tests/test_role_plugin.py\nindex a252b470..a99779cc 100644\n--- a/src/Products/PlonePAS/tests/test_role_plugin.py\n+++ b/src/Products/PlonePAS/tests/test_role_plugin.py\n@@ -21,7 +21,7 @@ def getGroupsForPrincipal(self, principal, request=None):\n \n \n class GroupAwareRoleManagerTests(unittest.TestCase):\n-    """Roles manager that takes care of goup of principal"""\n+    """Roles manager that takes care of group of principal"""\n \n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \ndiff --git a/src/Products/PlonePAS/tools/groupdata.py b/src/Products/PlonePAS/tools/groupdata.py\nindex 581f3e03..9c85469a 100644\n--- a/src/Products/PlonePAS/tools/groupdata.py\n+++ b/src/Products/PlonePAS/tools/groupdata.py\n@@ -228,7 +228,7 @@ def canAdministrateGroup(self):\n         if user.getId() in managers:\n             return True\n \n-        # Belongs to a group which is explicitly mentionned as a group\n+        # Belongs to a group which is explicitly mentioned as a group\n         # administrator\n         meth = getattr(user, "getAllGroupNames", None)\n         if meth:\ndiff --git a/src/Products/PlonePAS/tools/membership.py b/src/Products/PlonePAS/tools/membership.py\nindex 103d0410..50310fbe 100644\n--- a/src/Products/PlonePAS/tools/membership.py\n+++ b/src/Products/PlonePAS/tools/membership.py\n@@ -476,7 +476,7 @@ def getPersonalFolder(self, member_id=None):\n \n     @security.public\n     def getPersonalPortrait(self, id=None, verifyPermission=0):\n-        """Return a members personal portait.\n+        """Return a members personal portrait.\n \n         Modified from CMFPlone version to URL-quote the member id.\n         """\n@@ -499,7 +499,7 @@ def getPersonalPortrait(self, id=None, verifyPermission=0):\n \n     @security.protected(SetOwnProperties)\n     def deletePersonalPortrait(self, id=None):\n-        """deletes the Portait of a member."""\n+        """deletes the Portrait of a member."""\n         authenticated_id = self.getAuthenticatedMember().getId()\n         if not id:\n             id = authenticated_id\n@@ -512,7 +512,7 @@ def deletePersonalPortrait(self, id=None):\n \n     @security.protected(SetOwnProperties)\n     def changeMemberPortrait(self, portrait, id=None):\n-        """update the portait of a member.\n+        """update the portrait of a member.\n \n         We URL-quote the member id if needed.\n \n@@ -598,7 +598,7 @@ def setPassword(self, password, domains=None, REQUEST=None):\n             if domains is None:\n                 domains = []\n             user = acl_users.getUserById(member.getUserId(), None)\n-            # we must change the users password trough grufs changepassword\n+            # we must change the users password through grufs changepassword\n             # to keep her  group settings\n             if hasattr(user, "changePassword"):\n                 user.changePassword(password)\ndiff --git a/src/Products/PlonePAS/utils.py b/src/Products/PlonePAS/utils.py\nindex 5ac710d5..c259c66e 100644\n--- a/src/Products/PlonePAS/utils.py\n+++ b/src/Products/PlonePAS/utils.py\n@@ -47,7 +47,7 @@ def scale_image(image_file, max_size=None, default_format=None):\n         >>> from PIL import Image\n \n     Let\'s make a couple test images and see how it works (all are\n-    100x100), the gif is palletted mode::\n+    100x100), the gif is paletted mode::\n \n         >>> pas_path = os.path.dirname(config.__file__)\n         >>> pjoin = os.path.join\n@@ -149,8 +149,8 @@ def scale_image(image_file, max_size=None, default_format=None):\n     # consider image mode when scaling\n     # source images can be mode \'1\',\'L,\',\'P\',\'RGB(A)\'\n     # convert to greyscale or RGBA before scaling\n-    # preserve palletted mode (but not pallette)\n-    # for palletted-only image formats, e.g. GIF\n+    # preserve paletted mode (but not palette)\n+    # for paletted-only image formats, e.g. GIF\n     # PNG compression is OK for RGBA thumbnails\n     original_mode = image.mode\n     if original_mode == "1":\n@@ -160,7 +160,7 @@ def scale_image(image_file, max_size=None, default_format=None):\n     # Rescale in place with an method that will not alter the aspect ratio\n     # and will only shrink the image not enlarge it.\n     image.thumbnail(size, resample=IMAGE_SCALE_PARAMS["algorithm"])\n-    # preserve palletted mode for GIF and PNG\n+    # preserve paletted mode for GIF and PNG\n     if original_mode == "P" and format in ("GIF", "PNG"):\n         image = image.convert("P")\n     # Save\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2023-03-25T15:20:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.PlonePAS/commit/96c773a409c0f3ee340e0807a3cf24b06513c820

feat: drop CMFPlone dependency

Files changed:
M src/Products/PlonePAS/setuphandlers.py
M src/Products/PlonePAS/testing.py

b'diff --git a/src/Products/PlonePAS/setuphandlers.py b/src/Products/PlonePAS/setuphandlers.py\nindex 7b0aa537..b0bdb849 100644\n--- a/src/Products/PlonePAS/setuphandlers.py\n+++ b/src/Products/PlonePAS/setuphandlers.py\n@@ -4,9 +4,9 @@\n \n from Acquisition import aq_base\n from Acquisition import aq_parent\n+from plone.base.interfaces.siteroot import IPloneSiteRoot\n from plone.session.plugins.session import manage_addSessionPlugin\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import interfaces as plone_ifaces\n from Products.PlonePAS import config\n from Products.PlonePAS.interfaces import group as igroup\n from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin\n@@ -217,7 +217,7 @@ def setupAuthPlugins(\n         login_path = crumbler.auto_login_page\n         cookie_name = crumbler.auth_cookie\n \n-    is_plone_site = plone_ifaces.IPloneSiteRoot.providedBy(portal)\n+    is_plone_site = IPloneSiteRoot.providedBy(portal)\n     if is_plone_site:\n         cookie_meta_type = cookie_handler.ExtendedCookieAuthHelper.meta_type\n         add_cookie_plugin = plone_pas.manage_addExtendedCookieAuthHelper\ndiff --git a/src/Products/PlonePAS/testing.py b/src/Products/PlonePAS/testing.py\nindex 224c2660..2b6eb8bb 100644\n--- a/src/Products/PlonePAS/testing.py\n+++ b/src/Products/PlonePAS/testing.py\n@@ -22,9 +22,9 @@ def setUpZope(self, app, configurationContext):\n     def setUpPloneSite(self, portal):\n         applyProfile(portal, "Products.PlonePAS:PlonePAS")\n         # setRoles(portal, TEST_USER_ID, [\'Manager\'])\n-        from Products.CMFPlone.utils import _createObjectByType\n+        from plone.base.utils import unrestricted_construct_instance\n \n-        _createObjectByType("Folder", portal, id="Members")\n+        unrestricted_construct_instance("Folder", portal, id="Members")\n         mtool = portal.portal_membership\n         if not mtool.getMemberareaCreationFlag():\n             mtool.setMemberareaCreationFlag()\n@@ -32,7 +32,7 @@ def setUpPloneSite(self, portal):\n         if mtool.getMemberareaCreationFlag():\n             mtool.setMemberareaCreationFlag()\n \n-        _createObjectByType("Folder", portal, id="folder")\n+        unrestricted_construct_instance("Folder", portal, id="folder")\n \n \n PRODUCTS_PLONEPAS_FIXTURE = ProductsPlonepasLayer()\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2023-03-25T15:45:24+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.PlonePAS/commit/9a13ace90170bc416d46d5fc9280cd89a8029114

chore: configure z3c.dependencychecker

Files changed:
M pyproject.toml

b"diff --git a/pyproject.toml b/pyproject.toml\nindex 2ebc43ea..89471264 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -60,6 +60,8 @@ Zope = [\n   'Products.CMFDynamicViewFTI', 'zope.deprecation',\n ]\n python-dateutil = ['dateutil']\n+Pillow = ['PIL']\n+ignore-packages = ['Products.LDAPMultiPlugins', 'plone.openid']\n \n [tool.pylint.'MESSAGES CONTROL']\n disable = [\n"

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2023-03-25T15:45:24+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.PlonePAS/commit/5551bf3f92d8b30c5d6107ef8fbe53fcf24ed53b

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex e34a5023..4ec8bd25 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -10,10 +10,14 @@\n longdescription += open("CHANGES.rst").read()\n \n install_requires = [\n+    "AuthEncoding",\n+    "BTrees",\n+    "Pillow",\n     "plone.base",\n     "plone.i18n",\n     "plone.memoize",\n     "plone.protect>=2.0.3",\n+    "plone.registry",\n     "plone.session",\n     "Products.GenericSetup",\n     "Products.PluggableAuthService>=2.0",\n@@ -54,8 +58,9 @@\n     extras_require=dict(\n         test=[\n             "plone.app.testing",\n+            "plone.app.contenttypes[test]",\n             "plone.testing",\n-            "plone.app.robotframework",\n+            "Products.PluginRegistry",\n         ],\n     ),\n )\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2023-03-25T23:35:17+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PlonePAS/commit/f798ec4fe44045995b59896b89e1a2e68396ad49

Merge pull request #71 from plone/config-with-default-template-9ec4a950

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/80cf330f.internal
A tox.ini
M CHANGES.rst
M README.rst
M docs/STATUS.txt
M pyproject.toml
M setup.cfg
M setup.py
M src/Products/PlonePAS/__init__.py
M src/Products/PlonePAS/browser/configure.zcml
M src/Products/PlonePAS/browser/search.py
M src/Products/PlonePAS/configure.zcml
M src/Products/PlonePAS/exportimport.zcml
M src/Products/PlonePAS/interfaces/group.py
M src/Products/PlonePAS/ldapmp.py
M src/Products/PlonePAS/pas.py
M src/Products/PlonePAS/plugins/group.py
M src/Products/PlonePAS/plugins/local_role.py
M src/Products/PlonePAS/plugins/property.py
M src/Products/PlonePAS/plugins/role.py
M src/Products/PlonePAS/plugins/ufactory.py
M src/Products/PlonePAS/plugins/user.py
M src/Products/PlonePAS/profiles.zcml
M src/Products/PlonePAS/profiles/default/metadata.xml
M src/Products/PlonePAS/profiles/root-cookie/metadata.xml
M src/Products/PlonePAS/setuphandlers.py
M src/Products/PlonePAS/sheet.py
M src/Products/PlonePAS/testing.py
M src/Products/PlonePAS/tests/dummy.py
M src/Products/PlonePAS/tests/test_basic_ops.py
M src/Products/PlonePAS/tests/test_doctests.py
M src/Products/PlonePAS/tests/test_groupdatatool.py
M src/Products/PlonePAS/tests/test_groupstool.py
M src/Products/PlonePAS/tests/test_memberdatatool.py
M src/Products/PlonePAS/tests/test_membershiptool.py
M src/Products/PlonePAS/tests/test_properties.py
M src/Products/PlonePAS/tests/test_role_plugin.py
M src/Products/PlonePAS/tests/test_views.py
M src/Products/PlonePAS/tools/configure.zcml
M src/Products/PlonePAS/tools/groupdata.py
M src/Products/PlonePAS/tools/groups.py
M src/Products/PlonePAS/tools/memberdata.py
M src/Products/PlonePAS/tools/membership.py
M src/Products/PlonePAS/utils.py
M src/Products/PlonePAS/zmi/AutoGroupForm.zpt
M src/Products/PlonePAS/zmi/PasswordPolicyForm.zpt

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 00000000..b4158b89\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 00000000..697a54cb\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "80cf330f"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 00000000..582f8acd\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex d2d92fd4..557a770f 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -345,14 +345,14 @@ Fixes:\n   structure expected by ``buildout.plonetest``\'s ``qa.cfg``.\n   [jensens]\n \n-- Make patching of LDAPMultiPlugin explizit. Code using those must call\n+- Make patching of LDAPMultiPlugin explicit. Code using those must call\n   ``Products.PlonePAS.ldapmp.patch_ldapmp`` with no parameters in order\n   to activate the patches.\n   [jensens]\n \n - Removed (optional) Archetypes Storage (used in past with CMFMember, which\n-  itself was long time ago superseeded by Membrane). Probably dead code. If\n-  theres someone out there needing it in Plone 5 please copy the code from\n+  itself was long time ago superseded by Membrane). Probably dead code. If\n+  there\'s someone out there needing it in Plone 5 please copy the code from\n   git/Plone4 in your addon/project.\n   [jensens]\n \n@@ -607,7 +607,7 @@ Fixes:\n 4.0.1 - 2010-07-31\n ------------------\n \n-- Clean up some unused imports and variable assigments.\n+- Clean up some unused imports and variable assignments.\n   [esteele]\n \n - Stop looking to GRUF to check if group properties can be edited.\n@@ -1230,7 +1230,7 @@ Fixes:\n   types.\n   [reinout]\n \n-- Correct creation of groups wich default group managers.\n+- Correct creation of groups which default group managers.\n   [dreamcatcher]\n \n - Fix migration from GRUF sites: also include the member properties in the\ndiff --git a/README.rst b/README.rst\nindex ef1bdf5f..23ed81bd 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -57,7 +57,7 @@ Chad, Gautham, Joel, Kapil, Michel, Micheal ]\n Post-sprint work: J Cameron Cooper, Leo, Sidnei, Mark at `Enfold\n Systems <http://enfoldsystems.com>`_\n \n-Basic setAuthCookie support (to mimick CookieCrumbler):\n+Basic setAuthCookie support (to mimic CookieCrumbler):\n Rocky Burt at `ServerZen Software <http://www.serverzen.com>`_\n \n Synced login process with Plone:\n@@ -69,7 +69,7 @@ Wichert Akkerman at Simplon\n Bugfixes, improvements to membership and property lookups:\n Eric Steele and Erik Rose\n \n-Review, cleanup, modernize code, adressing Plone 5:\n+Review, cleanup, modernize code, addressing Plone 5:\n Jens Klein, BlueDynamics Alliance - `Klein & Partner KG <http://kleinundpartner.at>`_\n \n Source Code\ndiff --git a/docs/STATUS.txt b/docs/STATUS.txt\nindex a707e565..5172d6d8 100644\n--- a/docs/STATUS.txt\n+++ b/docs/STATUS.txt\n@@ -1,12 +1,12 @@\n Some Plone UI functionality will not work with all plugins.\n many plugins cannot modify users/properties/groups/etc. There is some\n capabilities checking now, so that things that cannot be changed will not\n-appear changable.\n+appear changeable.\n \n PlonePAS implements a good deal of the API expected of a UserFolder\n and of GRUF. However, no systematic determination of interface\n fulfillment has been made, beyond that used by the Plone UI. Over time\n-GRUF compatibilty will be removed in favour of a new interface on top\n+GRUF compatibility will be removed in favour of a new interface on top\n of PAS.\n \n PlonePAS will currently migrate the users and groups of a default\ndiff --git a/news/80cf330f.internal b/news/80cf330f.internal\nnew file mode 100644\nindex 00000000..c08f5399\n--- /dev/null\n+++ b/news/80cf330f.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex c4f4af63..89471264 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,8 +1,5 @@\n-[tool.pylint.\'MESSAGES CONTROL\']\n-disable = [\n-    "wrong-import-order",\n-]\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -23,3 +20,50 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\n+Pillow = [\'PIL\']\n+ignore-packages = [\'Products.LDAPMultiPlugins\', \'plone.openid\']\n+\n+[tool.pylint.\'MESSAGES CONTROL\']\n+disable = [\n+    "wrong-import-order",\n+]\ndiff --git a/setup.cfg b/setup.cfg\nindex b06ccf16..0da8f8fb 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,17 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n \n [flake8]\n-# Match Black\'s defaults\n-# https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html#flake8\n-max-line-length = 88\n-extend-ignore = E203\n-aggressive = 3\n-experimental = true\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n \n-\n-[isort]\n-profile = black\n-force_alphabetical_sort=True\n-force_single_line=True\n-lines_after_imports=2\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex d2ff030f..4ec8bd25 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,8 +1,6 @@\n from setuptools import find_packages\n from setuptools import setup\n \n-import sys\n-\n \n version = "7.0.1.dev0"\n \n@@ -12,10 +10,14 @@\n longdescription += open("CHANGES.rst").read()\n \n install_requires = [\n+    "AuthEncoding",\n+    "BTrees",\n+    "Pillow",\n     "plone.base",\n     "plone.i18n",\n     "plone.memoize",\n     "plone.protect>=2.0.3",\n+    "plone.registry",\n     "plone.session",\n     "Products.GenericSetup",\n     "Products.PluggableAuthService>=2.0",\n@@ -51,12 +53,14 @@\n     namespace_packages=["Products"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=install_requires,\n     extras_require=dict(\n         test=[\n             "plone.app.testing",\n+            "plone.app.contenttypes[test]",\n             "plone.testing",\n-            "plone.app.robotframework",\n+            "Products.PluginRegistry",\n         ],\n     ),\n )\ndiff --git a/src/Products/PlonePAS/__init__.py b/src/Products/PlonePAS/__init__.py\nindex b517a9e1..043d5b24 100644\n--- a/src/Products/PlonePAS/__init__.py\n+++ b/src/Products/PlonePAS/__init__.py\n@@ -44,7 +44,6 @@\n \n \n def initialize(context):\n-\n     tools = (GroupsTool, GroupDataTool, MembershipTool, MemberDataTool)\n \n     ToolInit(\ndiff --git a/src/Products/PlonePAS/browser/configure.zcml b/src/Products/PlonePAS/browser/configure.zcml\nindex f8e6749d..f6cac731 100644\n--- a/src/Products/PlonePAS/browser/configure.zcml\n+++ b/src/Products/PlonePAS/browser/configure.zcml\n@@ -1,36 +1,37 @@\n <configure\n-    i18n_domain="Five"\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    xmlns:five="http://namespaces.zope.org/five">\n+    xmlns:five="http://namespaces.zope.org/five"\n+    i18n_domain="Five"\n+    >\n \n   <permission\n       id="PAS.SearchPrincipals"\n       title="Search for principals"\n-  />\n+      />\n \n   <browser:page\n-      allowed_interface="Products.PlonePAS.interfaces.browser.IPASInfoView"\n-      class=".info.PASInfoView"\n-      for="*"\n       name="pas_info"\n+      for="*"\n+      class=".info.PASInfoView"\n+      allowed_interface="Products.PlonePAS.interfaces.browser.IPASInfoView"\n       permission="zope2.View"\n-  />\n+      />\n \n   <browser:page\n-      allowed_interface="Products.PlonePAS.interfaces.browser.IPASMemberView"\n-      class=".member.PASMemberView"\n-      for="*"\n       name="pas_member"\n+      for="*"\n+      class=".member.PASMemberView"\n+      allowed_interface="Products.PlonePAS.interfaces.browser.IPASMemberView"\n       permission="zope2.View"\n-  />\n+      />\n \n   <browser:page\n-      allowed_interface="Products.PlonePAS.interfaces.browser.IPASSearchView"\n-      class=".search.PASSearchView"\n-      for="*"\n       name="pas_search"\n+      for="*"\n+      class=".search.PASSearchView"\n+      allowed_interface="Products.PlonePAS.interfaces.browser.IPASSearchView"\n       permission="zope2.View"\n-  />\n+      />\n \n </configure>\ndiff --git a/src/Products/PlonePAS/browser/search.py b/src/Products/PlonePAS/browser/search.py\nindex 2f529e39..587d0401 100644\n--- a/src/Products/PlonePAS/browser/search.py\n+++ b/src/Products/PlonePAS/browser/search.py\n@@ -16,7 +16,7 @@ def extractCriteriaFromRequest(request):\n             if key in criteria:\n                 del criteria[key]\n \n-        for (key, value) in criteria.items():\n+        for key, value in criteria.items():\n             if not value:\n                 del criteria[key]\n \ndiff --git a/src/Products/PlonePAS/configure.zcml b/src/Products/PlonePAS/configure.zcml\nindex a6a123e4..4c20bf42 100644\n--- a/src/Products/PlonePAS/configure.zcml\n+++ b/src/Products/PlonePAS/configure.zcml\n@@ -1,8 +1,9 @@\n <configure\n-    i18n_domain="plone"\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:five="http://namespaces.zope.org/five"\n-    xmlns:i18n="http://namespaces.zope.org/i18n">\n+    xmlns:i18n="http://namespaces.zope.org/i18n"\n+    i18n_domain="plone"\n+    >\n \n   <include package=".browser" />\n   <include package=".tools" />\ndiff --git a/src/Products/PlonePAS/exportimport.zcml b/src/Products/PlonePAS/exportimport.zcml\nindex ae6fa67b..56749329 100644\n--- a/src/Products/PlonePAS/exportimport.zcml\n+++ b/src/Products/PlonePAS/exportimport.zcml\n@@ -2,25 +2,25 @@\n \n   <adapter\n       factory="Products.PluggableAuthService.plugins.exportimport.TitleOnlyExportImport"\n-      for="Products.PluggableAuthService.interfaces.plugins.IUserFactoryPlugin"\n       provides="Products.GenericSetup.interfaces.IFilesystemExporter"\n-  />\n+      for="Products.PluggableAuthService.interfaces.plugins.IUserFactoryPlugin"\n+      />\n   <adapter\n       factory="Products.PluggableAuthService.plugins.exportimport.TitleOnlyExportImport"\n-      for="Products.PluggableAuthService.interfaces.plugins.IUserFactoryPlugin"\n       provides="Products.GenericSetup.interfaces.IFilesystemImporter"\n-  />\n+      for="Products.PluggableAuthService.interfaces.plugins.IUserFactoryPlugin"\n+      />\n \n   <!-- XXX This should point to an own export/import class! TitleOnly is far not enough -->\n   <adapter\n       factory="Products.PluggableAuthService.plugins.exportimport.TitleOnlyExportImport"\n-      for="Products.PlonePAS.interfaces.plugins.IMutablePropertiesPlugin"\n       provides="Products.GenericSetup.interfaces.IFilesystemExporter"\n-  />\n+      for="Products.PlonePAS.interfaces.plugins.IMutablePropertiesPlugin"\n+      />\n   <adapter\n       factory="Products.PluggableAuthService.plugins.exportimport.TitleOnlyExportImport"\n-      for="Products.PlonePAS.interfaces.plugins.IMutablePropertiesPlugin"\n       provides="Products.GenericSetup.interfaces.IFilesystemImporter"\n-  />\n+      for="Products.PlonePAS.interfaces.plugins.IMutablePropertiesPlugin"\n+      />\n \n </configure>\ndiff --git a/src/Products/PlonePAS/interfaces/group.py b/src/Products/PlonePAS/interfaces/group.py\nindex 739f453f..753e1e3b 100644\n--- a/src/Products/PlonePAS/interfaces/group.py\n+++ b/src/Products/PlonePAS/interfaces/group.py\n@@ -6,7 +6,7 @@ class IGroupManagement(Interface):\n     def addGroup(id, **kw):\n         """\n         Create a group with the supplied id, roles, and groups.\n-        return True if the operation suceeded\n+        return True if the operation succeeded\n         """\n \n     def addPrincipalToGroup(principal_id, group_id):\ndiff --git a/src/Products/PlonePAS/ldapmp.py b/src/Products/PlonePAS/ldapmp.py\nindex 5e84d05a..1b83ef33 100644\n--- a/src/Products/PlonePAS/ldapmp.py\n+++ b/src/Products/PlonePAS/ldapmp.py\n@@ -21,7 +21,7 @@\n \n \n def getPropertiesForUser(self, user, request=None):\n-    """Fullfill PropertiesPlugin requirements"""\n+    """Fulfill PropertiesPlugin requirements"""\n \n     if not isinstance(user, PloneGroup):\n         # It\'s not a PloneGroup, continue as usual\ndiff --git a/src/Products/PlonePAS/pas.py b/src/Products/PlonePAS/pas.py\nindex 83bc6ba2..b960f073 100644\n--- a/src/Products/PlonePAS/pas.py\n+++ b/src/Products/PlonePAS/pas.py\n@@ -1,4 +1,4 @@\n-# pas alterations and monkies\n+# pas alterations and monkeys\n from AccessControl import getSecurityManager\n from AccessControl import Unauthorized\n from AccessControl.PermissionRole import PermissionRole\n@@ -41,7 +41,7 @@\n \n \n def _userSetGroups(pas, user_id, groupnames):\n-    """method was used at GRUF level, but is used inside this monkies at several\n+    """method was used at GRUF level, but is used inside this monkeys at several\n     places too.\n \n     We no longer provide it on PAS to clean up patches\n@@ -83,7 +83,7 @@ def _userSetGroups(pas, user_id, groupnames):\n \n \n #################################\n-# pas folder monkies - standard zope user folder api or GRUF\n+# pas folder monkeys - standard zope user folder api or GRUF\n \n \n def _doAddUser(self, login, password, roles, domains, groups=None, **kw):\ndiff --git a/src/Products/PlonePAS/plugins/group.py b/src/Products/PlonePAS/plugins/group.py\nindex fcdc0f65..f72fe9ec 100644\n--- a/src/Products/PlonePAS/plugins/group.py\n+++ b/src/Products/PlonePAS/plugins/group.py\n@@ -44,7 +44,6 @@ def manage_addGroupManager(self, id, title="", RESPONSE=None):\n \n @implementer(IGroupManagement, IGroupIntrospection, IGroupCapability, IDeleteCapability)\n class GroupManager(ZODBGroupManager):\n-\n     meta_type = "Group Manager"\n     security = ClassSecurityInfo()\n \n@@ -109,7 +108,7 @@ def getGroupMembers(self, group_id):\n         return tuple(self._group_principal_map.get(group_id, ()))\n \n     #################################\n-    # capabilties interface impls.\n+    # capabilities interface impls.\n \n     @security.public\n     def allowDeletePrincipal(self, principal_id):\n@@ -170,7 +169,6 @@ def _findGroup(self, plugins, group_id, title=None, request=None):\n \n         propfinders = plugins.listPlugins(IPropertiesPlugin)\n         for propfinder_id, propfinder in propfinders:\n-\n             data = propfinder.getPropertiesForUser(group, request)\n             if data:\n                 group.addPropertysheet(propfinder_id, data)\n@@ -191,7 +189,6 @@ def _findGroup(self, plugins, group_id, title=None, request=None):\n \n     @security.private\n     def _verifyGroup(self, plugins, group_id=None, title=None):\n-\n         """group_id -> boolean\n         This method based on PluggableAuthService._verifyUser\n         """\ndiff --git a/src/Products/PlonePAS/plugins/local_role.py b/src/Products/PlonePAS/plugins/local_role.py\nindex b28c1abd..f224c755 100644\n--- a/src/Products/PlonePAS/plugins/local_role.py\n+++ b/src/Products/PlonePAS/plugins/local_role.py\n@@ -99,7 +99,6 @@ def checkLocalRolesAllowed(self, user, object, object_roles):\n         principal_ids.insert(0, user_id)\n \n         while 1:\n-\n             local_roles = getattr(inner_obj, "__ac_local_roles__", None)\n \n             if local_roles and callable(local_roles):\n@@ -147,14 +146,12 @@ def getAllLocalRolesInContext(self, context):\n         object = aq_inner(context)\n \n         while True:\n-\n             local_roles = getattr(object, "__ac_local_roles__", None)\n \n             if local_roles and callable(local_roles):\n                 local_roles = local_roles()\n \n             if local_roles:\n-\n                 dict = local_roles\n \n                 for principal, localroles in dict.items():\ndiff --git a/src/Products/PlonePAS/plugins/property.py b/src/Products/PlonePAS/plugins/property.py\nindex f40f4114..58902429 100644\n--- a/src/Products/PlonePAS/plugins/property.py\n+++ b/src/Products/PlonePAS/plugins/property.py\n@@ -212,7 +212,7 @@ def deleteUser(self, user_id):\n     @security.private\n     def testMemberData(self, memberdata, criteria, exact_match=False):\n         """Test if a memberdata matches the search criteria."""\n-        for (key, value) in criteria.items():\n+        for key, value in criteria.items():\n             testvalue = memberdata.get(key, None)\n             if testvalue is None:\n                 return False\ndiff --git a/src/Products/PlonePAS/plugins/role.py b/src/Products/PlonePAS/plugins/role.py\nindex 61247d47..7cb8e74a 100644\n--- a/src/Products/PlonePAS/plugins/role.py\n+++ b/src/Products/PlonePAS/plugins/role.py\n@@ -36,7 +36,6 @@ def manage_addGroupAwareRoleManager(self, id, title="", RESPONSE=None):\n \n @implementer(IAssignRoleCapability)\n class GroupAwareRoleManager(ZODBRoleManager):\n-\n     meta_type = "Group Aware Role Manager"\n     security = ClassSecurityInfo()\n \ndiff --git a/src/Products/PlonePAS/plugins/ufactory.py b/src/Products/PlonePAS/plugins/ufactory.py\nindex 06b8fe78..de0bf07e 100644\n--- a/src/Products/PlonePAS/plugins/ufactory.py\n+++ b/src/Products/PlonePAS/plugins/ufactory.py\n@@ -33,7 +33,6 @@ def manage_addPloneUserFactory(self, id, title="", RESPONSE=None):\n \n @implementer(IUserFactoryPlugin)\n class PloneUserFactory(BasePlugin):\n-\n     security = ClassSecurityInfo()\n     meta_type = "Plone User Factory"\n \n@@ -50,7 +49,6 @@ def createUser(self, user_id, name):\n \n \n class PloneUser(PropertiedUser):\n-\n     security = ClassSecurityInfo()\n \n     #################################\n@@ -205,7 +203,7 @@ def setProperties(self, properties=None, **kw):\n                 continue\n \n             update = {}\n-            for (key, value) in list(properties.items()):\n+            for key, value in list(properties.items()):\n                 if sheet.hasProperty(key):\n                     update[key] = value\n                     del properties[key]\ndiff --git a/src/Products/PlonePAS/plugins/user.py b/src/Products/PlonePAS/plugins/user.py\nindex f24bae78..dbd560ea 100644\n--- a/src/Products/PlonePAS/plugins/user.py\n+++ b/src/Products/PlonePAS/plugins/user.py\n@@ -48,7 +48,7 @@ class UserManager(BasePlugin):\n     @security.protected(ManageUsers)\n     def addUser(self, user_id, login_name, password):\n         """Original ZODBUserManager.addUser, modified to check if\n-        incoming password is already encypted.\n+        incoming password is already encrypted.\n \n         This support clean migration from default user source.\n         Should go into PAS.\ndiff --git a/src/Products/PlonePAS/profiles.zcml b/src/Products/PlonePAS/profiles.zcml\nindex a8993a9f..41343517 100644\n--- a/src/Products/PlonePAS/profiles.zcml\n+++ b/src/Products/PlonePAS/profiles.zcml\n@@ -1,20 +1,22 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plonepas">\n+    i18n_domain="plonepas"\n+    >\n \n   <genericsetup:registerProfile\n       name="PlonePAS"\n       title="PlonePAS"\n-      directory="profiles/default"\n       description="Extension profile for default PlonePAS setup."\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/default"\n       />\n   <genericsetup:importStep\n+      name="plonepas"\n+      title="PlonePAS setup"\n       description="Configure PlonePas"\n       handler="Products.PlonePAS.setuphandlers.setupPlonePAS"\n-      name="plonepas"\n-      title="PlonePAS setup">\n+      >\n     <depends name="componentregistry" />\n     <depends name="controlpanel" />\n     <depends name="memberdata-properties" />\n@@ -25,14 +27,15 @@\n       profile="Products.PlonePAS:PlonePAS"\n       source="4"\n       destination="5"\n-      handler=".upgrades.from4to5_fix_zope_root" />\n+      handler=".upgrades.from4to5_fix_zope_root"\n+      />\n \n   <genericsetup:registerProfile\n       name="root-cookie"\n       title="Zope Root Cookie Login"\n-      description="Change the Zope root `/acl_users` to use a simple cookie login form\n-\t\t   instead of HTTP `Basic ...` for authentication."\n+      description="Change the Zope root `/acl_users` to use a simple cookie login form      instead of HTTP `Basic ...` for authentication."\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n-      post_handler=".setuphandlers.set_up_zope_root_cookie_auth" />\n+      post_handler=".setuphandlers.set_up_zope_root_cookie_auth"\n+      />\n \n </configure>\ndiff --git a/src/Products/PlonePAS/profiles/default/metadata.xml b/src/Products/PlonePAS/profiles/default/metadata.xml\nindex 1062ac87..9b2ed11c 100644\n--- a/src/Products/PlonePAS/profiles/default/metadata.xml\n+++ b/src/Products/PlonePAS/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>5</version>\n </metadata>\ndiff --git a/src/Products/PlonePAS/profiles/root-cookie/metadata.xml b/src/Products/PlonePAS/profiles/root-cookie/metadata.xml\nindex cf4492ac..08b37b63 100644\n--- a/src/Products/PlonePAS/profiles/root-cookie/metadata.xml\n+++ b/src/Products/PlonePAS/profiles/root-cookie/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>1</version>\n </metadata>\ndiff --git a/src/Products/PlonePAS/setuphandlers.py b/src/Products/PlonePAS/setuphandlers.py\nindex f9d72040..b0bdb849 100644\n--- a/src/Products/PlonePAS/setuphandlers.py\n+++ b/src/Products/PlonePAS/setuphandlers.py\n@@ -4,9 +4,9 @@\n \n from Acquisition import aq_base\n from Acquisition import aq_parent\n+from plone.base.interfaces.siteroot import IPloneSiteRoot\n from plone.session.plugins.session import manage_addSessionPlugin\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import interfaces as plone_ifaces\n from Products.PlonePAS import config\n from Products.PlonePAS.interfaces import group as igroup\n from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin\n@@ -21,7 +21,6 @@\n from Products.PluggableAuthService.plugins.RecursiveGroupsPlugin import (\n     addRecursiveGroupsPlugin,\n )\n-from zope import component\n \n import logging\n \n@@ -75,7 +74,6 @@ def registerPluginType(pas, plugin_type, plugin_info):\n \n \n def registerPluginTypes(pas):\n-\n     PluginInfo = {\n         "id": "IUserManagement",\n         "title": "user_management",\n@@ -219,7 +217,7 @@ def setupAuthPlugins(\n         login_path = crumbler.auto_login_page\n         cookie_name = crumbler.auth_cookie\n \n-    is_plone_site = plone_ifaces.IPloneSiteRoot.providedBy(portal)\n+    is_plone_site = IPloneSiteRoot.providedBy(portal)\n     if is_plone_site:\n         cookie_meta_type = cookie_handler.ExtendedCookieAuthHelper.meta_type\n         add_cookie_plugin = plone_pas.manage_addExtendedCookieAuthHelper\ndiff --git a/src/Products/PlonePAS/sheet.py b/src/Products/PlonePAS/sheet.py\nindex 221ef494..2ca9d230 100644\n--- a/src/Products/PlonePAS/sheet.py\n+++ b/src/Products/PlonePAS/sheet.py\n@@ -44,7 +44,9 @@ def validate(self, property_type, value):\n PropertySchema.addType("text", lambda x: x is None or isinstance(x, str))\n PropertySchema.addType("boolean", lambda x: 1)  # anything can be boolean\n PropertySchema.addType("int", lambda x: x is None or isinstance(x, int))\n-PropertySchema.addType("long", lambda x: x is None or isinstance(x, int))  # theres is no long in Python 3\n+PropertySchema.addType(\n+    "long", lambda x: x is None or isinstance(x, int)\n+)  # there\'s is no long in Python 3\n PropertySchema.addType("float", lambda x: x is None or isinstance(x, float))\n PropertySchema.addType("lines", lambda x: x is None or isinstance(x, (tuple, list)))\n PropertySchema.addType("selection", lambda x: x is None or isinstance(x, str))\ndiff --git a/src/Products/PlonePAS/testing.py b/src/Products/PlonePAS/testing.py\nindex f25f9d23..2b6eb8bb 100644\n--- a/src/Products/PlonePAS/testing.py\n+++ b/src/Products/PlonePAS/testing.py\n@@ -10,7 +10,6 @@\n \n \n class ProductsPlonepasLayer(PloneSandboxLayer):\n-\n     defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n@@ -23,9 +22,9 @@ def setUpZope(self, app, configurationContext):\n     def setUpPloneSite(self, portal):\n         applyProfile(portal, "Products.PlonePAS:PlonePAS")\n         # setRoles(portal, TEST_USER_ID, [\'Manager\'])\n-        from Products.CMFPlone.utils import _createObjectByType\n+        from plone.base.utils import unrestricted_construct_instance\n \n-        _createObjectByType("Folder", portal, id="Members")\n+        unrestricted_construct_instance("Folder", portal, id="Members")\n         mtool = portal.portal_membership\n         if not mtool.getMemberareaCreationFlag():\n             mtool.setMemberareaCreationFlag()\n@@ -33,7 +32,7 @@ def setUpPloneSite(self, portal):\n         if mtool.getMemberareaCreationFlag():\n             mtool.setMemberareaCreationFlag()\n \n-        _createObjectByType("Folder", portal, id="folder")\n+        unrestricted_construct_instance("Folder", portal, id="folder")\n \n \n PRODUCTS_PLONEPAS_FIXTURE = ProductsPlonepasLayer()\ndiff --git a/src/Products/PlonePAS/tests/dummy.py b/src/Products/PlonePAS/tests/dummy.py\nindex 77338bbb..3f3ebc0b 100644\n--- a/src/Products/PlonePAS/tests/dummy.py\n+++ b/src/Products/PlonePAS/tests/dummy.py\n@@ -4,6 +4,7 @@\n \n import typing\n \n+\n TEXT = b"file data"\n \n \ndiff --git a/src/Products/PlonePAS/tests/test_basic_ops.py b/src/Products/PlonePAS/tests/test_basic_ops.py\nindex d6c42e38..d1974fe5 100644\n--- a/src/Products/PlonePAS/tests/test_basic_ops.py\n+++ b/src/Products/PlonePAS/tests/test_basic_ops.py\n@@ -14,7 +14,6 @@\n \n \n class BasicOpsTestCase(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/src/Products/PlonePAS/tests/test_doctests.py b/src/Products/PlonePAS/tests/test_doctests.py\nindex 0583c7ea..f15e2f9f 100644\n--- a/src/Products/PlonePAS/tests/test_doctests.py\n+++ b/src/Products/PlonePAS/tests/test_doctests.py\n@@ -2,7 +2,6 @@\n from Products.PlonePAS.testing import PRODUCTS_PLONEPAS_FUNCTIONAL_TESTING\n \n import doctest\n-import re\n import unittest\n \n \ndiff --git a/src/Products/PlonePAS/tests/test_groupdatatool.py b/src/Products/PlonePAS/tests/test_groupdatatool.py\nindex e78240f4..30e9d8d4 100644\n--- a/src/Products/PlonePAS/tests/test_groupdatatool.py\n+++ b/src/Products/PlonePAS/tests/test_groupdatatool.py\n@@ -9,14 +9,13 @@\n import unittest\n \n \n-def sortTuple(t):\n-    l = list(t)\n-    l.sort()\n-    return tuple(l)\n+def sortTuple(a_tuple):\n+    a_list = list(a_tuple)\n+    a_list.sort()\n+    return tuple(a_list)\n \n \n class TestGroupDataTool(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -40,7 +39,6 @@ def testWrapGroup(self):\n \n \n class TestGroupData(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -153,7 +151,6 @@ def testHasRole(self):\n \n \n class TestMethodProtection(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/src/Products/PlonePAS/tests/test_groupstool.py b/src/Products/PlonePAS/tests/test_groupstool.py\nindex 77c53aa5..0974e26e 100644\n--- a/src/Products/PlonePAS/tests/test_groupstool.py\n+++ b/src/Products/PlonePAS/tests/test_groupstool.py\n@@ -16,14 +16,13 @@\n import unittest\n \n \n-def sortTuple(t):\n-    l = list(t)\n-    l.sort()\n-    return tuple(l)\n+def sortTuple(a_tuple):\n+    a_list = list(a_tuple)\n+    a_list.sort()\n+    return tuple(a_list)\n \n \n class TestGroupsTool(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -119,7 +118,6 @@ def testManagerRemoveMember(self):\n \n \n class TestGroupsToolIntegration(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/src/Products/PlonePAS/tests/test_memberdatatool.py b/src/Products/PlonePAS/tests/test_memberdatatool.py\nindex 68cb4c01..5747b8a8 100644\n--- a/src/Products/PlonePAS/tests/test_memberdatatool.py\n+++ b/src/Products/PlonePAS/tests/test_memberdatatool.py\n@@ -13,7 +13,6 @@\n \n \n class TestMemberDataTool(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/src/Products/PlonePAS/tests/test_membershiptool.py b/src/Products/PlonePAS/tests/test_membershiptool.py\nindex 766a1f4e..b0d3480b 100644\n--- a/src/Products/PlonePAS/tests/test_membershiptool.py\n+++ b/src/Products/PlonePAS/tests/test_membershiptool.py\n@@ -33,7 +33,6 @@\n \n \n class MembershipToolTest(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -135,7 +134,6 @@ def test_id_clean(self):\n \n \n class MemberAreaTest(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -182,7 +180,6 @@ def test_memberareaCreationFlag_respected(self):\n \n \n class TestMembershipTool(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -687,16 +684,15 @@ def got_credentials_updated_event(event):\n         gsm.registerHandler(got_credentials_updated_event)\n \n         self.assertTrue(self.membership.testCurrentPassword(TEST_USER_PASSWORD))\n-        self.assertFalse(self.membership.testCurrentPassword("whoknows"))\n+        self.assertFalse(self.membership.testCurrentPassword("who-knows"))\n         login(self.portal, TEST_USER_NAME)  # Back to normal\n-        self.membership.setPassword("guessagain")\n+        self.membership.setPassword("guess-again")\n         self.assertEqual(len(events_fired), 1)\n         self.assertEqual(events_fired[0].principal.getId(), TEST_USER_ID)\n-        self.assertEqual(events_fired[0].password, "guessagain")\n+        self.assertEqual(events_fired[0].password, "guess-again")\n \n \n class TestCreateMemberarea(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -779,7 +775,6 @@ def testCreateMemberareaWhenDisabled(self):\n \n \n class TestMemberareaSetup(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -823,7 +818,6 @@ def testHomePageNotExists(self):\n \n \n class TestSearchForMembers(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -967,7 +961,6 @@ def assertProtected(self, object, method):\n \n \n class TestMemberInfoView(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/src/Products/PlonePAS/tests/test_properties.py b/src/Products/PlonePAS/tests/test_properties.py\nindex 63d3de38..37ee865c 100644\n--- a/src/Products/PlonePAS/tests/test_properties.py\n+++ b/src/Products/PlonePAS/tests/test_properties.py\n@@ -10,7 +10,6 @@\n \n \n class PropertiesTest(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -204,7 +203,6 @@ def test_schema_for_mutable_property_provider(self):\n \n \n class PropertySearchTest(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def setUp(self):\ndiff --git a/src/Products/PlonePAS/tests/test_role_plugin.py b/src/Products/PlonePAS/tests/test_role_plugin.py\nindex caf432b7..a99779cc 100644\n--- a/src/Products/PlonePAS/tests/test_role_plugin.py\n+++ b/src/Products/PlonePAS/tests/test_role_plugin.py\n@@ -21,18 +21,16 @@ def getGroupsForPrincipal(self, principal, request=None):\n \n \n class GroupAwareRoleManagerTests(unittest.TestCase):\n-    """Roles manager that takes care of goup of principal"""\n+    """Roles manager that takes care of group of principal"""\n \n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def _getTargetClass(self):\n-\n         from Products.PlonePAS.plugins.role import GroupAwareRoleManager\n \n         return GroupAwareRoleManager\n \n     def _makeOne(self, id="test", *args, **kw):\n-\n         plugin = self._getTargetClass()(id=id, *args, **kw)\n         # We need to bind a fake request to this plugin\n         request, dummy_response = makeRequestAndResponse()\ndiff --git a/src/Products/PlonePAS/tests/test_views.py b/src/Products/PlonePAS/tests/test_views.py\nindex e1daa8da..d7d6bcef 100644\n--- a/src/Products/PlonePAS/tests/test_views.py\n+++ b/src/Products/PlonePAS/tests/test_views.py\n@@ -4,7 +4,6 @@\n \n \n class TestPASSearchView(unittest.TestCase):\n-\n     layer = PRODUCTS_PLONEPAS_INTEGRATION_TESTING\n \n     def test_sort(self):\ndiff --git a/src/Products/PlonePAS/tools/configure.zcml b/src/Products/PlonePAS/tools/configure.zcml\nindex ce5e9d4d..7616a8ed 100644\n--- a/src/Products/PlonePAS/tools/configure.zcml\n+++ b/src/Products/PlonePAS/tools/configure.zcml\n@@ -1,8 +1,8 @@\n <configure xmlns="http://namespaces.zope.org/zope">\n \n   <adapter\n-      provides="Products.CMFCore.interfaces.IMember"\n       factory=".memberdata.MemberData"\n+      provides="Products.CMFCore.interfaces.IMember"\n       />\n \n </configure>\ndiff --git a/src/Products/PlonePAS/tools/groupdata.py b/src/Products/PlonePAS/tools/groupdata.py\nindex b9074a31..9c85469a 100644\n--- a/src/Products/PlonePAS/tools/groupdata.py\n+++ b/src/Products/PlonePAS/tools/groupdata.py\n@@ -102,7 +102,6 @@ def registerGroupData(self, g, id):\n \n @implementer(IGroupData, IManageCapabilities)\n class GroupData(SimpleItem):\n-\n     security = ClassSecurityInfo()\n \n     id = None\n@@ -229,7 +228,7 @@ def canAdministrateGroup(self):\n         if user.getId() in managers:\n             return True\n \n-        # Belongs to a group which is explicitly mentionned as a group\n+        # Belongs to a group which is explicitly mentioned as a group\n         # administrator\n         meth = getattr(user, "getAllGroupNames", None)\n         if meth:\ndiff --git a/src/Products/PlonePAS/tools/groups.py b/src/Products/PlonePAS/tools/groups.py\nindex 97f2a970..7d4a1083 100644\n--- a/src/Products/PlonePAS/tools/groups.py\n+++ b/src/Products/PlonePAS/tools/groups.py\n@@ -400,7 +400,7 @@ def setGroupOwnership(self, group, object, REQUEST=None):\n         For GRUF this is easy. Others may have to re-implement."""\n         user = group.getGroup()\n         if user is None:\n-            raise ValueError("Invalid group: \'{}\'.".format(group))\n+            raise ValueError(f"Invalid group: \'{group}\'.")\n         object.changeOwnership(user)\n         object.manage_setLocalRoles(user.getId(), ["Owner"])\n \n@@ -432,7 +432,7 @@ def wrapGroup(self, g, wrap_anon=0):\n                 return portal_group\n             except ConflictError:\n                 raise\n-            except:\n+            except Exception:\n                 logger.exception("Error during wrapGroup")\n         # Failed.\n         return g\ndiff --git a/src/Products/PlonePAS/tools/memberdata.py b/src/Products/PlonePAS/tools/memberdata.py\nindex c270307e..2f764011 100644\n--- a/src/Products/PlonePAS/tools/memberdata.py\n+++ b/src/Products/PlonePAS/tools/memberdata.py\n@@ -145,7 +145,6 @@ def searchMemberDataContents(self, search_param, search_term):\n \n                 if searched is not None:\n                     if searched.strip().lower().find(search_term) != -1:\n-\n                         res.append(\n                             {\n                                 "username": memberProperty("id"),\n@@ -227,7 +226,6 @@ def _getPlugins(self):\n @implementer(IManageCapabilities, IMember)\n @adapter(IUser, IMemberDataTool)\n class MemberData(BaseMemberAdapter):\n-\n     security = ClassSecurityInfo()\n \n     def __init__(self, user, tool):\ndiff --git a/src/Products/PlonePAS/tools/membership.py b/src/Products/PlonePAS/tools/membership.py\nindex 5a60059c..50310fbe 100644\n--- a/src/Products/PlonePAS/tools/membership.py\n+++ b/src/Products/PlonePAS/tools/membership.py\n@@ -476,7 +476,7 @@ def getPersonalFolder(self, member_id=None):\n \n     @security.public\n     def getPersonalPortrait(self, id=None, verifyPermission=0):\n-        """Return a members personal portait.\n+        """Return a members personal portrait.\n \n         Modified from CMFPlone version to URL-quote the member id.\n         """\n@@ -499,7 +499,7 @@ def getPersonalPortrait(self, id=None, verifyPermission=0):\n \n     @security.protected(SetOwnProperties)\n     def deletePersonalPortrait(self, id=None):\n-        """deletes the Portait of a member."""\n+        """deletes the Portrait of a member."""\n         authenticated_id = self.getAuthenticatedMember().getId()\n         if not id:\n             id = authenticated_id\n@@ -512,7 +512,7 @@ def deletePersonalPortrait(self, id=None):\n \n     @security.protected(SetOwnProperties)\n     def changeMemberPortrait(self, portrait, id=None):\n-        """update the portait of a member.\n+        """update the portrait of a member.\n \n         We URL-quote the member id if needed.\n \n@@ -598,7 +598,7 @@ def setPassword(self, password, domains=None, REQUEST=None):\n             if domains is None:\n                 domains = []\n             user = acl_users.getUserById(member.getUserId(), None)\n-            # we must change the users password trough grufs changepassword\n+            # we must change the users password through grufs changepassword\n             # to keep her  group settings\n             if hasattr(user, "changePassword"):\n                 user.changePassword(password)\n@@ -707,7 +707,7 @@ def logoutUser(self, REQUEST=None):\n             pas = getToolByName(self, "acl_users")\n             try:\n                 pas.logout(REQUEST)\n-            except Exception as e:\n+            except Exception:\n                 logger.error("Error in PAS logout()", exc_info=True)\n \n             # Expire the skin cookie if it is not configured to persist\n@@ -768,7 +768,7 @@ def getBadMembers(self):\n                 PIL.Image.open(BytesIO(portrait_data))\n             except ConflictError:\n                 pass\n-            except:\n+            except Exception:\n                 # Anything else we have a bad bad image and we destroy it\n                 # and ask questions later.\n                 portraits._delObject(member_id)\ndiff --git a/src/Products/PlonePAS/utils.py b/src/Products/PlonePAS/utils.py\nindex 5ac710d5..c259c66e 100644\n--- a/src/Products/PlonePAS/utils.py\n+++ b/src/Products/PlonePAS/utils.py\n@@ -47,7 +47,7 @@ def scale_image(image_file, max_size=None, default_format=None):\n         >>> from PIL import Image\n \n     Let\'s make a couple test images and see how it works (all are\n-    100x100), the gif is palletted mode::\n+    100x100), the gif is paletted mode::\n \n         >>> pas_path = os.path.dirname(config.__file__)\n         >>> pjoin = os.path.join\n@@ -149,8 +149,8 @@ def scale_image(image_file, max_size=None, default_format=None):\n     # consider image mode when scaling\n     # source images can be mode \'1\',\'L,\',\'P\',\'RGB(A)\'\n     # convert to greyscale or RGBA before scaling\n-    # preserve palletted mode (but not pallette)\n-    # for palletted-only image formats, e.g. GIF\n+    # preserve paletted mode (but not palette)\n+    # for paletted-only image formats, e.g. GIF\n     # PNG compression is OK for RGBA thumbnails\n     original_mode = image.mode\n     if original_mode == "1":\n@@ -160,7 +160,7 @@ def scale_image(image_file, max_size=None, default_format=None):\n     # Rescale in place with an method that will not alter the aspect ratio\n     # and will only shrink the image not enlarge it.\n     image.thumbnail(size, resample=IMAGE_SCALE_PARAMS["algorithm"])\n-    # preserve palletted mode for GIF and PNG\n+    # preserve paletted mode for GIF and PNG\n     if original_mode == "P" and format in ("GIF", "PNG"):\n         image = image.convert("P")\n     # Save\ndiff --git a/src/Products/PlonePAS/zmi/AutoGroupForm.zpt b/src/Products/PlonePAS/zmi/AutoGroupForm.zpt\nindex 0e60c35f..1de61d55 100644\n--- a/src/Products/PlonePAS/zmi/AutoGroupForm.zpt\n+++ b/src/Products/PlonePAS/zmi/AutoGroupForm.zpt\n@@ -1,66 +1,109 @@\n <h1 tal:replace="structure here/manage_page_header">Header</h1>\n \n-<h2 tal:define="form_title string:Add Auto Group plugin"\n-    tal:replace="structure here/manage_form_title">Form Title</h2>\n+<h2 tal:define="\n+      form_title string:Add Auto Group plugin;\n+    "\n+    tal:replace="structure here/manage_form_title"\n+>Form Title</h2>\n \n <p class="form-help">\n The Auto Group plugin automatically puts all authenticated users in a virtual\n group.\n </p>\n \n-<form action="manage_addAutoGroup" method="post">\n-<table cellspacing="0" cellpadding="2" border="0">\n-  <tr>\n-    <td align="left" valign="top">\n-    <div class="form-label">\n+<form action="manage_addAutoGroup"\n+      method="post"\n+>\n+  <table border="0"\n+         cellpadding="2"\n+         cellspacing="0"\n+  >\n+    <tr>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <div class="form-label">\n     Id\n-    </div>\n-    </td>\n-    <td align="left" valign="top">\n-    <input type="text" name="id" size="40" />\n-    </td>\n-  </tr>\n-  <tr>\n-    <td align="left" valign="top">\n-    <div class="form-optional">\n+        </div>\n+      </td>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <input name="id"\n+               size="40"\n+               type="text"\n+        />\n+      </td>\n+    </tr>\n+    <tr>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <div class="form-optional">\n     Title\n-    </div>\n-    </td>\n-    <td align="left" valign="top">\n-    <input type="text" name="title" size="40" />\n-    </td>\n-  </tr>\n-  <tr>\n-    <td align="left" valign="top">\n-    <div class="form-label">\n+        </div>\n+      </td>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <input name="title"\n+               size="40"\n+               type="text"\n+        />\n+      </td>\n+    </tr>\n+    <tr>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <div class="form-label">\n     Group id\n-    </div>\n-    </td>\n-    <td align="left" valign="top">\n-    <input type="text" name="group" size="40" />\n-    </td>\n-  </tr>\n-  <tr>\n-    <td align="left" valign="top">\n-    <div class="form-label">\n+        </div>\n+      </td>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <input name="group"\n+               size="40"\n+               type="text"\n+        />\n+      </td>\n+    </tr>\n+    <tr>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <div class="form-label">\n     Description\n-    </div>\n-    </td>\n-    <td align="left" valign="top">\n-    <input type="text" name="description" size="40" />\n-    </td>\n-  </tr>\n-  <tr>\n-    <td align="left" valign="top">\n-    </td>\n-    <td align="left" valign="top">\n-    <div class="form-element">\n-    <input class="form-element" type="submit" name="submit"\n-     value=" Add " />\n-    </div>\n-    </td>\n-  </tr>\n-</table>\n+        </div>\n+      </td>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <input name="description"\n+               size="40"\n+               type="text"\n+        />\n+      </td>\n+    </tr>\n+    <tr>\n+      <td align="left"\n+          valign="top"\n+      >\n+      </td>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <div class="form-element">\n+          <input class="form-element"\n+                 name="submit"\n+                 type="submit"\n+                 value=" Add "\n+          />\n+        </div>\n+      </td>\n+    </tr>\n+  </table>\n </form>\n \n <h1 tal:replace="structure here/manage_page_footer">Footer</h1>\ndiff --git a/src/Products/PlonePAS/zmi/PasswordPolicyForm.zpt b/src/Products/PlonePAS/zmi/PasswordPolicyForm.zpt\nindex 43a2726d..2b97a070 100644\n--- a/src/Products/PlonePAS/zmi/PasswordPolicyForm.zpt\n+++ b/src/Products/PlonePAS/zmi/PasswordPolicyForm.zpt\n@@ -1,45 +1,74 @@\n <h1 tal:replace="structure here/manage_page_header">Header</h1>\n \n-<h2 tal:define="form_title string:Add Default Plone Password Policy plugin"\n-    tal:replace="structure here/manage_form_title">Form Title</h2>\n+<h2 tal:define="\n+      form_title string:Add Default Plone Password Policy plugin;\n+    "\n+    tal:replace="structure here/manage_form_title"\n+>Form Title</h2>\n \n <p class="form-help">\n The Default Plone Password Policy validates passwords to be at least 5 chars long\n </p>\n \n-<form action="manage_addPasswordPolicyPlugin" method="post">\n-<table cellspacing="0" cellpadding="2" border="0">\n-  <tr>\n-    <td align="left" valign="top">\n-    <div class="form-label">\n+<form action="manage_addPasswordPolicyPlugin"\n+      method="post"\n+>\n+  <table border="0"\n+         cellpadding="2"\n+         cellspacing="0"\n+  >\n+    <tr>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <div class="form-label">\n     Id\n-    </div>\n-    </td>\n-    <td align="left" valign="top">\n-    <input type="text" name="id" size="40" />\n-    </td>\n-  </tr>\n-  <tr>\n-    <td align="left" valign="top">\n-    <div class="form-optional">\n+        </div>\n+      </td>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <input name="id"\n+               size="40"\n+               type="text"\n+        />\n+      </td>\n+    </tr>\n+    <tr>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <div class="form-optional">\n     Title\n-    </div>\n-    </td>\n-    <td align="left" valign="top">\n-    <input type="text" name="title" size="40" />\n-    </td>\n-  </tr>\n-  <tr>\n-    <td align="left" valign="top">\n-    </td>\n-    <td align="left" valign="top">\n-    <div class="form-element">\n-    <input class="form-element" type="submit" name="submit"\n-     value=" Add " />\n-    </div>\n-    </td>\n-  </tr>\n-</table>\n+        </div>\n+      </td>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <input name="title"\n+               size="40"\n+               type="text"\n+        />\n+      </td>\n+    </tr>\n+    <tr>\n+      <td align="left"\n+          valign="top"\n+      >\n+      </td>\n+      <td align="left"\n+          valign="top"\n+      >\n+        <div class="form-element">\n+          <input class="form-element"\n+                 name="submit"\n+                 type="submit"\n+                 value=" Add "\n+          />\n+        </div>\n+      </td>\n+    </tr>\n+  </table>\n </form>\n \n <h1 tal:replace="structure here/manage_page_footer">Footer</h1>\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 00000000..b24b0bda\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,53 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir}/src -s Products.PlonePAS\n+extras =\n+    test\n'

