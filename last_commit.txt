Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-04-08T14:03:50+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/1eec3fc2c219173825b2280bef49e81e440a3d40

fix #1513 - Wrong portal_url used for TinyMCE in multilingual site.

Also some refactoring together with plone.app.layout

Files changed:
A Products/CMFPlone/patterns/settings.py
A Products/CMFPlone/patterns/tinymce.py
A Products/CMFPlone/patterns/view.py
A Products/CMFPlone/tests/test_patternsettings.py
M CHANGES.rst
M Products/CMFPlone/Portal.py
M Products/CMFPlone/patterns/__init__.py
M Products/CMFPlone/patterns/configure.zcml
M Products/CMFPlone/patterns/utils.py
M Products/CMFPlone/utils.py
D Products/CMFPlone/tests/testPatternSettings.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 1afbbac..d553ce7 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,11 @@ Changelog
 
 Incompatibilities:
 
-- *add item here*
+- Moved code around and deprecated old locations in ``Products/CMFPlone/patterns/__init__``. 
+  This goes together with same pattern settings changes in ``plone.app.layout.globals.pattern_settings``.
+  Also moved general usable ``./patterns/utils/get_portal`` to ``./utils/.get_portal``. 
+  Depreacted ``./patterns/utils/get_portal`` and ``./patterns/utils/get_portal``.
+  [jensens]
 
 New:
 
@@ -23,6 +27,10 @@ New:
 
 Fixes:
 
+- Closes #1513 'Wrong portal_url used for TinyMCE in multilingual site',
+  also refactors the patterns settings and cleans it up.
+  [jensens]
+
 - Only encode JS body if unicode in gruntfile generation script to avoid
   unicode error.
   [jensens]
diff --git a/Products/CMFPlone/Portal.py b/Products/CMFPlone/Portal.py
index d4ad75f..671fb5c 100644
--- a/Products/CMFPlone/Portal.py
+++ b/Products/CMFPlone/Portal.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from AccessControl import Permissions
 from AccessControl import Unauthorized
@@ -13,7 +14,7 @@
 from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.DublinCore import DefaultDublinCoreImpl
-from Products.CMFPlone.interfaces import IPloneSiteRoot
+from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot
 from Products.CMFPlone.interfaces.syndication import ISyndicatable
 from Products.CMFPlone.permissions import AddPortalContent
 from Products.CMFPlone.permissions import AddPortalFolders
@@ -25,9 +26,10 @@
 from Products.CMFPlone.PloneFolder import ReplaceableWrapper
 from webdav.NullResource import NullResource
 from zope.component import queryUtility
-from zope.interface import implements
+from zope.interface import implementer
 
 
+@implementer(IPloneSiteRoot, ISyndicatable)
 class PloneSite(PortalObjectBase, DefaultDublinCoreImpl, OrderedContainer,
                 BrowserDefaultMixin, UniqueObject):
     """ The Plone site object. """
@@ -35,8 +37,6 @@ class PloneSite(PortalObjectBase, DefaultDublinCoreImpl, OrderedContainer,
     security = ClassSecurityInfo()
     meta_type = portal_type = 'Plone Site'
 
-    implements(IPloneSiteRoot, ISyndicatable)
-
     manage_options = (
         PortalObjectBase.manage_options[:2] +
         PortalObjectBase.manage_options[3:])
diff --git a/Products/CMFPlone/patterns/__init__.py b/Products/CMFPlone/patterns/__init__.py
index 41440cb..aa264f6 100644
--- a/Products/CMFPlone/patterns/__init__.py
+++ b/Products/CMFPlone/patterns/__init__.py
@@ -1,287 +1,13 @@
-from borg.localrole.interfaces import IFactoryTempFolder
-from Products.CMFPlone.interfaces import IPatternsSettings
-from Products.CMFPlone.interfaces import ITinyMCESchema
-from Products.CMFPlone.interfaces import ILinkSchema
-from zope.interface import implements
-from plone.registry.interfaces import IRegistry
-from zope.component import getUtility
-import json
-from Products.CMFPlone.patterns.utils import get_portal_url
-from Products.CMFCore.interfaces._content import IFolderish
-from plone.uuid.interfaces import IUUID
-from Products.CMFPlone.interfaces import IPloneSiteRoot
-from Acquisition import aq_parent, aq_inner
-from plone.app.layout.navigation.root import getNavigationRootObject
-from plone.app.theming.utils import theming_policy
-from Products.CMFCore.utils import getToolByName
-from zope.component.hooks import getSite
-
-
-class TinyMCESettingsGenerator(object):
-
-    def __init__(self, context, request):
-        self.context = context
-        self.request = request
-        self.portal = getSite()
-        registry = getUtility(IRegistry)
-        self.settings = registry.forInterface(
-            ITinyMCESchema, prefix="plone", check=False)
-        self.portal_url = get_portal_url(self.portal)
-
-    def get_theme(self):
-        return theming_policy().get_theme()
-
-    def get_content_css(self, style_css=''):
-        files = [
-            '%s/++plone++static/plone-compiled.css' % self.portal_url
-        ]
-        if style_css:
-            files.extend(style_css.split(','))
-        content_css = self.settings.content_css or []
-        for url in content_css:
-            if url and url.strip():
-                files.append('%s/%s' % (self.portal_url, url.strip()))
-        theme = self.get_theme()
-        if (theme and hasattr(theme, 'tinymce_content_css') and
-                theme.tinymce_content_css):
-            files.append(self.portal_url + theme.tinymce_content_css)
-
-        return ','.join(files)
-
-    def get_style_format(self, txt, _type='format', base=None):
-        parts = txt.strip().split('|')
-        if len(parts) < 2:
-            return
-        if base is None:
-            val = {}
-        else:
-            val = base
-        val.update({
-            'title': parts[0],
-            _type: parts[1]
-        })
-        if len(parts) > 2:
-            val['icon'] = parts[2]
-        return val
-
-    def get_all_style_formats(self):
-        header_styles = self.settings.header_styles or []
-        block_styles = self.settings.block_styles or []
-        inline_styles = self.settings.inline_styles or []
-        alignment_styles = self.settings.alignment_styles or []
-        table_styles = self.settings.table_styles or []
-        return [{
-            'title': 'Headers',
-            'items': [self.get_style_format(t) for t in header_styles]
-        }, {
-            'title': 'Block',
-            'items': [self.get_style_format(t) for t in block_styles]
-        }, {
-            'title': 'Inline',
-            'items': [self.get_style_format(t) for t in inline_styles]
-        }, {
-            'title': 'Alignment',
-            'items': [self.get_style_format(t) for t in alignment_styles]
-        }, {
-            'title': 'Tables',
-            'items': [self.get_style_format(t, 'classes', {'selector': 'table'})
-                      for t in table_styles]
-        }]
-
-    def get_tiny_config(self):
-        settings = self.settings
-
-        importcss_file_filter = '%s/++plone++static/tinymce-styles.css' % (
-            self.portal_url)
-
-        theme = self.get_theme()
-        if theme and getattr(theme, 'tinymce_styles_css', None):
-            importcss_file_filter += ',%s/%s' % (
-                self.portal_url,
-                theme.tinymce_styles_css.lstrip('/'))
-
-        tiny_config = {
-            'resize': settings.resizing and 'both' or False,
-            'content_css': self.get_content_css(importcss_file_filter),
-            'plugins': ['plonelink', 'ploneimage', 'importcss'] + settings.plugins,
-            'external_plugins': {},
-            'toolbar': settings.toolbar,
-            'entity_encoding': settings.entity_encoding,
-            'importcss_append': True,
-            'importcss_file_filter': importcss_file_filter,
-            'browser_spellcheck': True
-        }
-        toolbar_additions = settings.custom_buttons or []
-
-        if settings.editor_height:
-            tiny_config['height'] = settings.editor_height
-        if settings.autoresize:
-            tiny_config['plugins'].append('autoresize')
-            tiny_config['autoresize_max_height'] = 1000  # hard coded?
-        if settings.editor_width:
-            tiny_config['width'] = settings.editor_width
-
-        # specific plugin options
-        if 'contextmenu' in settings.plugins:
-            tiny_config['contextmenu'] = "plonelink ploneimage inserttable | cell row column deletetable"  # noqa
-
-        if settings.libraries_spellchecker_choice == 'AtD':
-            mtool = getToolByName(self.portal, 'portal_membership')
-            member = mtool.getAuthenticatedMember()
-            member_id = member.getId()
-            if member_id:
-                if 'compat3x' not in tiny_config['plugins']:
-                    tiny_config['plugins'].append('compat3x')
-                tiny_config['external_plugins']['AtD'] = \
-                    '%s/++plone++static/tinymce-AtD-plugin/editor_plugin.js' % self.portal_url  # noqa
-                # None when Anonymous User
-                tiny_config['atd_rpc_id'] = 'plone-' + member_id
-                tiny_config['atd_rpc_url'] = self.portal_url
-                tiny_config['atd_show_types'] = ','.join(settings.libraries_atd_show_types)  # noqa
-                tiny_config['atd_ignore_strings'] = ','.join(settings.libraries_atd_ignore_strings)  # noqa
-                toolbar_additions.append('AtD')
-        elif settings.libraries_spellchecker_choice == 'AtD':
-            tiny_config['browser_spellcheck'] = True
-
-        if toolbar_additions:
-            tiny_config['toolbar'] += ' | %s' % ' '.join(toolbar_additions)
-
-        for plugin in settings.custom_plugins or []:
-            parts = plugin.split('|')
-            if len(parts) != 2:
-                continue
-            tiny_config['external_plugins'][parts[0]] = parts[1]
-
-        tiny_config['style_formats'] = self.get_all_style_formats()
-        if settings.formats:
-            try:
-                tiny_config['formats'] = json.loads(settings.formats)
-            except ValueError:
-                pass
-
-        if settings.menubar:
-            tiny_config['menubar'] = settings.menubar
-        if settings.menu:
-            try:
-                tiny_config['menu'] = json.loads(settings.menu)
-            except ValueError:
-                pass
-
-        if hasattr(settings, 'templates') and settings.templates:
-            try:
-                tiny_config['templates'] = json.loads(settings.templates)
-            except ValueError:
-                pass
-
-        if settings.other_settings:
-            try:
-                tiny_config.update(json.loads(settings.other_settings))
-            except ValueError:
-                pass
-
-        return tiny_config
-
-
-class PloneSettingsAdapter(object):
-    """
-    This adapter will handle all default plone settings.
-
-    Right now, it only does tinymce
-    """
-    implements(IPatternsSettings)
-
-    def __init__(self, context, request, field):
-        self.request = request
-        self.context = context
-        self.field = field
-
-    def mark_special_links(self):
-        result = {}
-
-        registry = getUtility(IRegistry)
-        settings = registry.forInterface(
-            ILinkSchema, prefix="plone", check=False)
-
-        msl = settings.mark_special_links
-        elonw = settings.external_links_open_new_window
-        if msl or elonw:
-            result = {'data-pat-markspeciallinks':
-                      ('{"external_links_open_new_window": "%s",'
-                       '"mark_special_links": "%s"}' % (elonw, msl))}
-        return result
-
-    def __call__(self):
-        data = self.tinymce()
-        data.update(self.mark_special_links())
-        return data
-
-    def tinymce(self):
-        """
-        data-pat-tinymce : JSON.stringify({
-            relatedItems: {
-              vocabularyUrl: config.portal_url +
-                '/@@getVocabulary?name=plone.app.vocabularies.Catalog'
-            },
-            tiny: config,
-            prependToUrl: 'resolveuid/',
-            linkAttribute: 'UID',
-            prependToScalePart: '/@@images/image/'
-          })
-        """
-
-        generator = TinyMCESettingsGenerator(self.context, self.request)
-        settings = generator.settings
-
-        folder = aq_inner(self.context)
-        # Test if we are currently creating an Archetype object
-        if IFactoryTempFolder.providedBy(aq_parent(folder)):
-            folder = aq_parent(aq_parent(aq_parent(folder)))
-        if not IFolderish.providedBy(folder):
-            folder = aq_parent(folder)
-
-        if IPloneSiteRoot.providedBy(folder):
-            initial = None
-        else:
-            initial = IUUID(folder, None)
-
-        nav_root = getNavigationRootObject(folder, generator.portal)
-        root_url = get_portal_url(folder)
-        current_path = folder.absolute_url()[len(root_url):]
-
-        image_types = settings.image_objects or []
-        folder_types = settings.contains_objects or []
-
-        server_url = self.request.get('SERVER_URL', '')
-        site_path = generator.portal_url[len(server_url):]
-        configuration = {
-            'relatedItems': {
-                'vocabularyUrl':
-                    '%s/@@getVocabulary?name=plone.app.vocabularies.Catalog' % (
-                        root_url),
-                'folderTypes': folder_types,
-                'rootPath': '/'.join(nav_root.getPhysicalPath()) if nav_root
-                            else '/',
-                'sort_on': 'sortable_title',
-                'sort_order': 'ascending',
-            },
-            'upload': {
-                'initialFolder': initial,
-                'currentPath': current_path,
-                'baseUrl': generator.portal_url,
-                'relativePath': '@@fileUpload',
-                'uploadMultiple': False,
-                'maxFiles': 1,
-                'showTitle': False
-            },
-            'base_url': self.context.absolute_url(),
-            'tiny': generator.get_tiny_config(),
-            # This is for loading the languages on tinymce
-            'loadingBaseUrl': '%s/++plone++static/components/tinymce-builded/js/tinymce' % generator.portal_url,  # noqa
-            'prependToUrl': '{0}/resolveuid/'.format(site_path.rstrip('/')),
-            'linkAttribute': 'UID',
-            'prependToScalePart': '/@@images/image/',
-            'imageTypes': image_types
-            # 'anchorSelector': utility.anchor_selector,
-        }
-
-        return {'data-pat-tinymce': json.dumps(configuration)}
+# -*- coding: utf-8 -*-
+from zope.deferredimport import deprecated
+
+deprecated(
+    "Import from Products.CMFPlone.patterns.tinymce instead",
+    TinyMCESettingsGenerator='Products.CMFPlone.patterns.tinymce.'
+                             'TinyMCESettingsGenerator'
+)
+deprecated(
+    "Import from Products.CMFPlone.patterns.settings instead",
+    PloneSettingsAdapter='Products.CMFPlone.patterns.settings.'
+                         'PatternSettingsAdapter'
+)
diff --git a/Products/CMFPlone/patterns/configure.zcml b/Products/CMFPlone/patterns/configure.zcml
index d5784cd..c4c0de9 100644
--- a/Products/CMFPlone/patterns/configure.zcml
+++ b/Products/CMFPlone/patterns/configure.zcml
@@ -1,11 +1,26 @@
-<configure xmlns="http://namespaces.zope.org/zope"
-           i18n_domain="plone">
-
+<configure
+    i18n_domain="plone"
+    xmlns="http://namespaces.zope.org/zope"
+    xmlns:browser="http://namespaces.zope.org/browser">
+  <!-- helper view -->
+  <browser:page
+      class=".view.PatternsSettingsView"
+      for="*"
+      name="plone_patterns_settings"
+      permission="zope.Public"
+  />
   <!-- Adapters for patterns settings -->
-
-  <adapter for="* * *"
-      factory=".PloneSettingsAdapter"
+  <adapter
+      factory=".settings.PatternSettingsAdapter"
+      for="* * *"
+      name="pattern_settings"
       provides="Products.CMFPlone.interfaces.IPatternsSettings"
-      name="plone_settings" />
-
-</configure>
\ No newline at end of file
+  />
+  <!-- deprecated name -->
+  <adapter
+      factory=".settings.PatternSettingsAdapter"
+      for="* * *"
+      name="plone_settings"
+      provides="Products.CMFPlone.interfaces.IPatternsSettings"
+  />
+</configure>
diff --git a/Products/CMFPlone/patterns/settings.py b/Products/CMFPlone/patterns/settings.py
new file mode 100644
index 0000000..30d358a
--- /dev/null
+++ b/Products/CMFPlone/patterns/settings.py
@@ -0,0 +1,125 @@
+# -*- coding: utf-8 -*-
+from Acquisition import aq_parent, aq_inner
+from borg.localrole.interfaces import IFactoryTempFolder
+from plone.app.layout.navigation.root import getNavigationRootObject
+from plone.registry.interfaces import IRegistry
+from plone.uuid.interfaces import IUUID
+from Products.CMFCore.interfaces._content import IFolderish
+from Products.CMFPlone.interfaces import ILinkSchema
+from Products.CMFPlone.interfaces import IPatternsSettings
+from Products.CMFPlone.interfaces import IPloneSiteRoot
+from Products.CMFPlone.utils import get_portal
+from Products.CMFPlone.patterns.tinymce import TinyMCESettingsGenerator
+from zope.component import getUtility
+from zope.interface import implementer
+
+import json
+
+
+@implementer(IPatternsSettings)
+class PatternSettingsAdapter(object):
+    """
+    Provides default plone settings relevant for patterns.
+    """
+
+    def __init__(self, context, request, field):
+        self.request = request
+        self.context = context
+        self.field = field
+
+    def __call__(self):
+        data = self.tinymce()
+        data.update(self.mark_special_links())
+        return data
+
+    def mark_special_links(self):
+        result = {}
+
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(
+            ILinkSchema, prefix="plone", check=False)
+
+        msl = settings.mark_special_links
+        elonw = settings.external_links_open_new_window
+        if msl or elonw:
+            result = {
+                'data-pat-markspeciallinks': json.dumps(
+                    {
+                        'external_links_open_new_window': elonw,
+                        'mark_special_links': msl
+                    }
+                )
+            }
+        return result
+
+    def tinymce(self):
+        """
+        data-pat-tinymce : JSON.stringify({
+            relatedItems: {
+              vocabularyUrl: config.portal_url +
+                '/@@getVocabulary?name=plone.app.vocabularies.Catalog'
+            },
+            tiny: config,
+            prependToUrl: 'resolveuid/',
+            linkAttribute: 'UID',
+            prependToScalePart: '/@@images/image/'
+          })
+        """
+
+        generator = TinyMCESettingsGenerator(self.context, self.request)
+        settings = generator.settings
+        folder = aq_inner(self.context)
+
+        # Test if we are currently creating an Archetype object
+        if IFactoryTempFolder.providedBy(aq_parent(folder)):
+            folder = aq_parent(aq_parent(aq_parent(folder)))
+        if not IFolderish.providedBy(folder):
+            folder = aq_parent(folder)
+
+        if IPloneSiteRoot.providedBy(folder):
+            initial = None
+        else:
+            initial = IUUID(folder, None)
+
+        portal = get_portal()
+        portal_url = portal.absolute_url()
+        nav_root = getNavigationRootObject(folder, portal)
+        nav_root_url = nav_root.absolute_url()
+        current_path = folder.absolute_url()[len(portal_url):]
+
+        image_types = settings.image_objects or []
+        folder_types = settings.contains_objects or []
+
+        server_url = self.request.get('SERVER_URL', '')
+        site_path = portal_url[len(server_url):]
+        configuration = {
+            'base_url': self.context.absolute_url(),
+            'imageTypes': image_types,
+            'linkAttribute': 'UID',
+            # This is for loading the languages on tinymce
+            'loadingBaseUrl': '{0}/++plone++static/components/tinymce-builded/'
+                              'js/tinymce'.format(portal_url),
+            'relatedItems': {
+                'folderTypes': folder_types,
+                'rootPath': '/'.join(nav_root.getPhysicalPath())
+                            if nav_root else '/',
+                'sort_on': 'sortable_title',
+                'sort_order': 'ascending',
+                'vocabularyUrl':
+                    '{0}/@@getVocabulary?name=plone.app.vocabularies.'
+                    'Catalog'.format(nav_root_url),
+            },
+            'prependToScalePart': '/@@images/image/',
+            'prependToUrl': '{0}/resolveuid/'.format(site_path.rstrip('/')),
+            'tiny': generator.get_tiny_config(),
+            'upload': {
+                'baseUrl': portal_url,
+                'currentPath': current_path,
+                'initialFolder': initial,
+                'maxFiles': 1,
+                'relativePath': '@@fileUpload',
+                'showTitle': False,
+                'uploadMultiple': False,
+            },
+        }
+        return {'data-pat-tinymce': json.dumps(configuration)}
diff --git a/Products/CMFPlone/patterns/tinymce.py b/Products/CMFPlone/patterns/tinymce.py
new file mode 100644
index 0000000..5176e56
--- /dev/null
+++ b/Products/CMFPlone/patterns/tinymce.py
@@ -0,0 +1,195 @@
+# -*- coding: utf-8 -*-
+from plone.app.layout.navigation.root import getNavigationRootObject
+from plone.app.theming.utils import theming_policy
+from plone.registry.interfaces import IRegistry
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces import ITinyMCESchema
+from Products.CMFPlone.utils import get_portal
+from zope.component import getUtility
+
+import json
+
+
+class TinyMCESettingsGenerator(object):
+
+    def __init__(self, context, request):
+        self.context = context
+        self.request = request
+        self.settings = getUtility(IRegistry).forInterface(
+            ITinyMCESchema,
+            prefix="plone",
+            check=False
+        )
+        self.nav_root = getNavigationRootObject(
+            self.context,
+            get_portal(),
+        )
+        self.nav_root_url = self.nav_root.absolute_url()
+
+    def get_theme(self):
+        return theming_policy().get_theme()
+
+    def get_content_css(self, style_css=''):
+        files = [
+            '{0}/++plone++static/plone-compiled.css'.format(self.nav_root_url)
+        ]
+        if style_css:
+            files.extend(style_css.split(','))
+        content_css = self.settings.content_css or []
+        for url in content_css:
+            if url and url.strip():
+                files.append('/'.join([self.nav_root_url, url.strip()]))
+        theme = self.get_theme()
+        tinymce_content_css = getattr(theme, 'tinymce_content_css', None)
+        if tinymce_content_css is not None:
+            files.append(self.nav_root_url + theme.tinymce_content_css)
+
+        return ','.join(files)
+
+    def get_style_format(self, txt, _type='format', base=None):
+        parts = txt.strip().split('|')
+        if len(parts) < 2:
+            return
+        if base is None:
+            val = {}
+        else:
+            val = base
+        val.update({
+            'title': parts[0],
+            _type: parts[1]
+        })
+        if len(parts) > 2:
+            val['icon'] = parts[2]
+        return val
+
+    def get_all_style_formats(self):
+        header_styles = self.settings.header_styles or []
+        block_styles = self.settings.block_styles or []
+        inline_styles = self.settings.inline_styles or []
+        alignment_styles = self.settings.alignment_styles or []
+        table_styles = self.settings.table_styles or []
+        return [{
+            'title': 'Headers',
+            'items': [self.get_style_format(t) for t in header_styles]
+        }, {
+            'title': 'Block',
+            'items': [self.get_style_format(t) for t in block_styles]
+        }, {
+            'title': 'Inline',
+            'items': [self.get_style_format(t) for t in inline_styles]
+        }, {
+            'title': 'Alignment',
+            'items': [self.get_style_format(t) for t in alignment_styles]
+        }, {
+            'title': 'Tables',
+            'items': [
+                self.get_style_format(t, 'classes', {'selector': 'table'})
+                for t in table_styles
+            ]
+        }]
+
+    def get_tiny_config(self):
+        settings = self.settings
+        importcss_file_filter = '%s/++plone++static/tinymce-styles.css' % (
+            self.nav_root_url
+        )
+
+        theme = self.get_theme()
+        if theme and getattr(theme, 'tinymce_styles_css', None):
+            importcss_file_filter += ',%s/%s' % (
+                self.nav_root_url,
+                theme.tinymce_styles_css.lstrip('/'))
+
+        tiny_config = {
+            'resize': 'both' if settings.resizing else False,
+            'content_css': self.get_content_css(importcss_file_filter),
+            'plugins': [
+                'plonelink',
+                'ploneimage',
+                'importcss'
+            ] + settings.plugins,
+            'external_plugins': {},
+            'toolbar': settings.toolbar,
+            'entity_encoding': settings.entity_encoding,
+            'importcss_append': True,
+            'importcss_file_filter': importcss_file_filter,
+            'browser_spellcheck': True
+        }
+        toolbar_additions = settings.custom_buttons or []
+
+        if settings.editor_height:
+            tiny_config['height'] = settings.editor_height
+        if settings.autoresize:
+            tiny_config['plugins'].append('autoresize')
+            tiny_config['autoresize_max_height'] = 1000  # hard coded?
+        if settings.editor_width:
+            tiny_config['width'] = settings.editor_width
+
+        # specific plugin options
+        if 'contextmenu' in settings.plugins:
+            tiny_config['contextmenu'] = "plonelink ploneimage inserttable |"\
+                " cell row column deletetable"
+
+        if settings.libraries_spellchecker_choice == 'AtD':
+            mtool = getToolByName(self.context, 'portal_membership')
+            member = mtool.getAuthenticatedMember()
+            member_id = member.getId()
+            if member_id:
+                if 'compat3x' not in tiny_config['plugins']:
+                    tiny_config['plugins'].append('compat3x')
+                tiny_config['external_plugins']['AtD'] = (
+                    '{0}/++plone++static/tinymce-AtD-plugin/'
+                    'editor_plugin.js'.format(self.nav_root_url)
+                )
+                # None when Anonymous User
+                tiny_config['atd_rpc_id'] = 'plone-' + member_id
+                tiny_config['atd_rpc_url'] = self.nav_root_url
+                tiny_config['atd_show_types'] = ','.join(
+                    settings.libraries_atd_show_types
+                )
+                tiny_config['atd_ignore_strings'] = ','.join(
+                    settings.libraries_atd_ignore_strings
+                )
+                toolbar_additions.append('AtD')
+        elif settings.libraries_spellchecker_choice == 'AtD':
+            tiny_config['browser_spellcheck'] = True
+
+        if toolbar_additions:
+            tiny_config['toolbar'] += ' | {0}'.format(
+                ' '.join(toolbar_additions)
+            )
+
+        for plugin in settings.custom_plugins or []:
+            parts = plugin.split('|')
+            if len(parts) != 2:
+                continue
+            tiny_config['external_plugins'][parts[0]] = parts[1]
+
+        tiny_config['style_formats'] = self.get_all_style_formats()
+        if settings.formats:
+            try:
+                tiny_config['formats'] = json.loads(settings.formats)
+            except ValueError:
+                pass
+
+        if settings.menubar:
+            tiny_config['menubar'] = settings.menubar
+        if settings.menu:
+            try:
+                tiny_config['menu'] = json.loads(settings.menu)
+            except ValueError:
+                pass
+
+        if hasattr(settings, 'templates') and settings.templates:
+            try:
+                tiny_config['templates'] = json.loads(settings.templates)
+            except ValueError:
+                pass
+
+        if settings.other_settings:
+            try:
+                tiny_config.update(json.loads(settings.other_settings))
+            except ValueError:
+                pass
+
+        return tiny_config
diff --git a/Products/CMFPlone/patterns/utils.py b/Products/CMFPlone/patterns/utils.py
index 3ecd82c..e86fef7 100644
--- a/Products/CMFPlone/patterns/utils.py
+++ b/Products/CMFPlone/patterns/utils.py
@@ -1,38 +1,36 @@
+# -*- coding: utf-8 -*-
+from Products.CMFPlone import utils
+
 import json
-from zope.component.hooks import getSite
-from plone.app.layout.navigation.root import getNavigationRootObject
-from Products.CMFCore.interfaces import ISiteRoot
-from zope.component import providedBy
+import warnings
 
 
 def format_pattern_settings(option, config):
     if option.startswith('json:'):
         try:
-            result = json.loads(option.lstrip('json:') % config)
+            return json.loads(option.lstrip('json:') % config)
         except:
-            result = {}
-    else:
-        result = option % config
-    return result
+            return {}
+    return option % config
 
 
 def get_portal():
-    closest_site = getSite()
-    if closest_site is not None:
-        for potential_portal in closest_site.aq_chain:
-            if ISiteRoot in providedBy(potential_portal):
-                return potential_portal
+    """DEPRECATED
+    """
+    warnings.warn(
+        'Instead of Products.CMFPlone.patterns.get_portal: '
+        'use Products.CMFPlone.utils.get_portal',
+        DeprecationWarning
+    )
+    return utils.get_portal()
 
 
 def get_portal_url(context):
-    portal = get_portal()
-    if portal:
-        root = getNavigationRootObject(context, portal)
-        if root:
-            try:
-                return root.absolute_url()
-            except AttributeError:
-                return portal.absolute_url()
-        else:
-            return portal.absolute_url()
-    return ''
+    """DEPRECATED
+    """
+    warnings.warn(
+        'Instead of Products.CMFPlone.patterns.get_portal_url: '
+        'Use Products.CMFPlone.utils.portal.absolute_url()',
+        DeprecationWarning
+    )
+    return utils.get_portal().absolute_url()
diff --git a/Products/CMFPlone/patterns/view.py b/Products/CMFPlone/patterns/view.py
new file mode 100644
index 0000000..3603df8
--- /dev/null
+++ b/Products/CMFPlone/patterns/view.py
@@ -0,0 +1,48 @@
+# -*- coding: utf-8 -*-
+# This module delivers the global patterns settings
+from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.interfaces import IPatternsSettings
+from zope.component import getAdapters
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.publisher.browser import BrowserView
+
+
+class PatternsSettingsView(BrowserView):
+    """
+    Default patterns settings
+    """
+
+    def __call__(self):
+        portal_state = getMultiAdapter(
+            (self.context, self.request),
+            name=u'plone_portal_state'
+        )
+        context_state = getMultiAdapter(
+            (self.context, self.request),
+            name='plone_context_state'
+        )
+        # do not use getSite because it's possible it could be different
+        # than the actual portal url
+        portal_url = portal_state.portal_url()
+        result = {
+            'data-base-url': self.context.absolute_url(),
+            'data-view-url': context_state.view_url(),
+            'data-portal-url': portal_url,
+            'data-i18ncatalogurl': portal_url + '/plonejsi18n'
+        }
+
+        # first, check for any adapters that need pattern data defined
+        adapters = getAdapters(
+            (self.context, self.request, None),
+            IPatternsSettings
+        )
+        [result.update(x[1]()) for x in adapters]
+
+        # Resources Registered UI patterns can override adapters
+        registry = getUtility(IRegistry)
+        pattern_options = registry.get('plone.patternoptions', {})
+        for key, value in pattern_options.items():
+            result['data-pat-' + key] = value
+
+        return result
diff --git a/Products/CMFPlone/tests/testPatternSettings.py b/Products/CMFPlone/tests/testPatternSettings.py
deleted file mode 100644
index 6bcd9f2..0000000
--- a/Products/CMFPlone/tests/testPatternSettings.py
+++ /dev/null
@@ -1,36 +0,0 @@
-from Products.CMFPlone.tests import PloneTestCase
-from zope.component import getUtility
-from plone.registry.interfaces import IRegistry
-from Products.CMFPlone.interfaces import ITinyMCESchema
-from Products.CMFPlone.patterns import PloneSettingsAdapter
-from plone.app.testing import TEST_USER_NAME
-from plone.app.testing import login
-import json
-
-
-class TestTinyMCESettings(PloneTestCase.PloneTestCase):
-
-    def get_conf(self):
-        adapter = PloneSettingsAdapter(
-            self.portal, self.layer['request'], None)
-        return json.loads(adapter.tinymce()['data-pat-tinymce'])
-
-    def test_atd_included(self):
-        registry = getUtility(IRegistry)
-        settings = registry.forInterface(ITinyMCESchema, prefix="plone")
-        settings.libraries_spellchecker_choice = 'AtD'
-        login(self.portal, TEST_USER_NAME)
-        conf = self.get_conf()
-        self.assertTrue('compat3x' in conf['tiny']['plugins'])
-        self.assertTrue('AtD' in conf['tiny']['external_plugins'])
-
-    def test_style_formats(self):
-        conf = self.get_conf()
-        self.assertEqual(len(conf['tiny']['style_formats']), 5)
-
-    def test_other_settings(self):
-        registry = getUtility(IRegistry)
-        settings = registry.forInterface(ITinyMCESchema, prefix="plone")
-        settings.other_settings = u'{"foo": "bar"}'
-        conf = self.get_conf()
-        self.assertEqual(conf['tiny']['foo'], 'bar')
diff --git a/Products/CMFPlone/tests/test_patternsettings.py b/Products/CMFPlone/tests/test_patternsettings.py
new file mode 100644
index 0000000..44837ae
--- /dev/null
+++ b/Products/CMFPlone/tests/test_patternsettings.py
@@ -0,0 +1,106 @@
+# -*- coding: utf-8 -*-
+from plone.app.testing import login
+from plone.app.testing import TEST_USER_NAME
+from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.interfaces import ITinyMCESchema
+from Products.CMFPlone.patterns.view import PatternsSettingsView
+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+from zope.component import getUtility
+
+import json
+import unittest
+
+
+class TestTinyMCESettings(unittest.TestCase):
+
+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
+    def get_conf(self):
+        from Products.CMFPlone.patterns.settings import PatternSettingsAdapter
+        adapter = PatternSettingsAdapter(
+            self.layer['portal'],
+            self.layer['request'],
+            None
+        )
+        return json.loads(adapter.tinymce()['data-pat-tinymce'])
+
+    def test_atd_included(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ITinyMCESchema, prefix="plone")
+        settings.libraries_spellchecker_choice = 'AtD'
+        login(self.layer['portal'], TEST_USER_NAME)
+        conf = self.get_conf()
+        self.assertTrue('compat3x' in conf['tiny']['plugins'])
+        self.assertTrue('AtD' in conf['tiny']['external_plugins'])
+
+    def test_style_formats(self):
+        conf = self.get_conf()
+        self.assertEqual(len(conf['tiny']['style_formats']), 5)
+
+    def test_other_settings(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ITinyMCESchema, prefix="plone")
+        settings.other_settings = u'{"foo": "bar"}'
+        conf = self.get_conf()
+        self.assertEqual(conf['tiny']['foo'], 'bar')
+
+
+class TestPatternSettingsView(unittest.TestCase):
+    """Ensure that the basic redirector setup is successful.
+    """
+
+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+
+    def setUp(self):
+        self.layer['portal'].invokeFactory('Folder', 'folder')
+        self.folder = self.layer['portal']['folder']
+
+    def testShouldReturnCorrectType(self):
+        settings = PatternsSettingsView(self.folder, self.layer['request'])
+        result = settings()
+        self.assertEquals(type(result), dict)
+        for key, value in result.items():
+            self.assertTrue(isinstance(key, basestring))
+            self.assertTrue(isinstance(value, basestring))
+
+    def testFolderUrls(self):
+        settings = PatternsSettingsView(self.folder, self.layer['request'])
+        result = settings()
+        self.assertEquals(
+            result['data-base-url'],
+            self.folder.absolute_url()
+        )
+        self.assertEquals(
+            result['data-portal-url'],
+            self.layer['portal'].absolute_url()
+        )
+        self.assertEquals(
+            result['data-view-url'],
+            self.folder.absolute_url()
+        )
+
+    def testFileUrls(self):
+        self.folder.invokeFactory('File', 'file1')
+        file_obj = self.folder['file1']
+        settings = PatternsSettingsView(file_obj, self.layer['request'])
+        result = settings()
+        self.assertEquals(result['data-base-url'], file_obj.absolute_url())
+        self.assertEquals(
+            result['data-portal-url'],
+            self.layer['portal'].absolute_url()
+        )
+        self.assertEquals(
+            result['data-view-url'],
+            file_obj.absolute_url() + '/view'
+        )
+
+    def testPatternOptions(self):
+        registry = getUtility(IRegistry)
+        registry['plone.patternoptions'] = {
+            'foo': u'{"foo": "bar"}'
+        }
+
+        settings = PatternsSettingsView(self.folder, self.layer['request'])
+        result = settings()
+        self.assertEquals(result['data-pat-foo'], u'{"foo": "bar"}')
diff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py
index 60c51ab..4f0bd60 100644
--- a/Products/CMFPlone/utils.py
+++ b/Products/CMFPlone/utils.py
@@ -10,6 +10,9 @@
 from App.ImageFile import ImageFile
 from DateTime import DateTime
 from DateTime.interfaces import DateTimeError
+from log import log
+from log import log_deprecated
+from log import log_exc
 from os.path import join, abspath, split
 from plone.i18n.normalizer.interfaces import IIDNormalizer
 from plone.registry.interfaces import IRegistry
@@ -17,11 +20,13 @@
 from Products.CMFCore.utils import getToolByName
 from Products.CMFCore.utils import ToolInit as CMFCoreToolInit
 from Products.CMFPlone import PloneMessageFactory as _
+from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot
 from types import ClassType
 from webdav.interfaces import IWriteLock
 from zope import schema
 from zope.component import getMultiAdapter
 from zope.component import getUtility
+from zope.component import providedBy
 from zope.component import queryUtility
 from zope.component.hooks import getSite
 from zope.deferredimport import deprecated as deprecated_import
@@ -55,7 +60,6 @@
 security.declarePrivate('transaction')
 security.declarePrivate('zope')
 
-
 # Canonical way to get at CMFPlone directory
 PACKAGE_HOME = package_home(globals())
 security.declarePrivate('PACKAGE_HOME')
@@ -67,14 +71,23 @@
 pattern = re.compile(r'^(.*)\s+(\d+)\s*:\s*(\d+)$')
 
 # Log methods
-from log import log
-from log import log_exc
-from log import log_deprecated
-
 log_exc  # pyflakes.  Keep this, as someone may import it.
 _marker = []
 
 
+def get_portal():
+    """get the Plone portal object.
+
+    It fetched w/o any further context by using the last registered site.
+    So this work only after traversal time.
+    """
+    closest_site = getSite()
+    if closest_site is not None:
+        for potential_portal in closest_site.aq_chain:
+            if IPloneSiteRoot in providedBy(potential_portal):
+                return potential_portal
+
+
 def parent(obj):
     return aq_parent(aq_inner(obj))
 


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-04-08T14:06:51+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/24fd80ac254ace89d816872c9cf6a875cf695300

Merge pull request #1514 from plone/cleanup-and-fix-1513

fix #1513 - Wrong portal_url used for TinyMCE in multilingual site

Files changed:
A Products/CMFPlone/patterns/settings.py
A Products/CMFPlone/patterns/tinymce.py
A Products/CMFPlone/patterns/view.py
A Products/CMFPlone/tests/test_patternsettings.py
M CHANGES.rst
M Products/CMFPlone/Portal.py
M Products/CMFPlone/patterns/__init__.py
M Products/CMFPlone/patterns/configure.zcml
M Products/CMFPlone/patterns/utils.py
M Products/CMFPlone/utils.py
D Products/CMFPlone/tests/testPatternSettings.py

diff --git a/CHANGES.rst b/CHANGES.rst
index a33f261..7ff34d4 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,11 @@ Changelog
 
 Incompatibilities:
 
-- *add item here*
+- Moved code around and deprecated old locations in ``Products/CMFPlone/patterns/__init__``. 
+  This goes together with same pattern settings changes in ``plone.app.layout.globals.pattern_settings``.
+  Also moved general usable ``./patterns/utils/get_portal`` to ``./utils/.get_portal``. 
+  Depreacted ``./patterns/utils/get_portal`` and ``./patterns/utils/get_portal``.
+  [jensens]
 
 New:
 
@@ -23,6 +27,10 @@ New:
 
 Fixes:
 
+- Closes #1513 'Wrong portal_url used for TinyMCE in multilingual site',
+  also refactors the patterns settings and cleans it up.
+  [jensens]
+
 - Only encode JS body if unicode in gruntfile generation script to avoid
   unicode error.
   [jensens]
diff --git a/Products/CMFPlone/Portal.py b/Products/CMFPlone/Portal.py
index d4ad75f..671fb5c 100644
--- a/Products/CMFPlone/Portal.py
+++ b/Products/CMFPlone/Portal.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from AccessControl import Permissions
 from AccessControl import Unauthorized
@@ -13,7 +14,7 @@
 from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.DublinCore import DefaultDublinCoreImpl
-from Products.CMFPlone.interfaces import IPloneSiteRoot
+from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot
 from Products.CMFPlone.interfaces.syndication import ISyndicatable
 from Products.CMFPlone.permissions import AddPortalContent
 from Products.CMFPlone.permissions import AddPortalFolders
@@ -25,9 +26,10 @@
 from Products.CMFPlone.PloneFolder import ReplaceableWrapper
 from webdav.NullResource import NullResource
 from zope.component import queryUtility
-from zope.interface import implements
+from zope.interface import implementer
 
 
+@implementer(IPloneSiteRoot, ISyndicatable)
 class PloneSite(PortalObjectBase, DefaultDublinCoreImpl, OrderedContainer,
                 BrowserDefaultMixin, UniqueObject):
     """ The Plone site object. """
@@ -35,8 +37,6 @@ class PloneSite(PortalObjectBase, DefaultDublinCoreImpl, OrderedContainer,
     security = ClassSecurityInfo()
     meta_type = portal_type = 'Plone Site'
 
-    implements(IPloneSiteRoot, ISyndicatable)
-
     manage_options = (
         PortalObjectBase.manage_options[:2] +
         PortalObjectBase.manage_options[3:])
diff --git a/Products/CMFPlone/patterns/__init__.py b/Products/CMFPlone/patterns/__init__.py
index 41440cb..aa264f6 100644
--- a/Products/CMFPlone/patterns/__init__.py
+++ b/Products/CMFPlone/patterns/__init__.py
@@ -1,287 +1,13 @@
-from borg.localrole.interfaces import IFactoryTempFolder
-from Products.CMFPlone.interfaces import IPatternsSettings
-from Products.CMFPlone.interfaces import ITinyMCESchema
-from Products.CMFPlone.interfaces import ILinkSchema
-from zope.interface import implements
-from plone.registry.interfaces import IRegistry
-from zope.component import getUtility
-import json
-from Products.CMFPlone.patterns.utils import get_portal_url
-from Products.CMFCore.interfaces._content import IFolderish
-from plone.uuid.interfaces import IUUID
-from Products.CMFPlone.interfaces import IPloneSiteRoot
-from Acquisition import aq_parent, aq_inner
-from plone.app.layout.navigation.root import getNavigationRootObject
-from plone.app.theming.utils import theming_policy
-from Products.CMFCore.utils import getToolByName
-from zope.component.hooks import getSite
-
-
-class TinyMCESettingsGenerator(object):
-
-    def __init__(self, context, request):
-        self.context = context
-        self.request = request
-        self.portal = getSite()
-        registry = getUtility(IRegistry)
-        self.settings = registry.forInterface(
-            ITinyMCESchema, prefix="plone", check=False)
-        self.portal_url = get_portal_url(self.portal)
-
-    def get_theme(self):
-        return theming_policy().get_theme()
-
-    def get_content_css(self, style_css=''):
-        files = [
-            '%s/++plone++static/plone-compiled.css' % self.portal_url
-        ]
-        if style_css:
-            files.extend(style_css.split(','))
-        content_css = self.settings.content_css or []
-        for url in content_css:
-            if url and url.strip():
-                files.append('%s/%s' % (self.portal_url, url.strip()))
-        theme = self.get_theme()
-        if (theme and hasattr(theme, 'tinymce_content_css') and
-                theme.tinymce_content_css):
-            files.append(self.portal_url + theme.tinymce_content_css)
-
-        return ','.join(files)
-
-    def get_style_format(self, txt, _type='format', base=None):
-        parts = txt.strip().split('|')
-        if len(parts) < 2:
-            return
-        if base is None:
-            val = {}
-        else:
-            val = base
-        val.update({
-            'title': parts[0],
-            _type: parts[1]
-        })
-        if len(parts) > 2:
-            val['icon'] = parts[2]
-        return val
-
-    def get_all_style_formats(self):
-        header_styles = self.settings.header_styles or []
-        block_styles = self.settings.block_styles or []
-        inline_styles = self.settings.inline_styles or []
-        alignment_styles = self.settings.alignment_styles or []
-        table_styles = self.settings.table_styles or []
-        return [{
-            'title': 'Headers',
-            'items': [self.get_style_format(t) for t in header_styles]
-        }, {
-            'title': 'Block',
-            'items': [self.get_style_format(t) for t in block_styles]
-        }, {
-            'title': 'Inline',
-            'items': [self.get_style_format(t) for t in inline_styles]
-        }, {
-            'title': 'Alignment',
-            'items': [self.get_style_format(t) for t in alignment_styles]
-        }, {
-            'title': 'Tables',
-            'items': [self.get_style_format(t, 'classes', {'selector': 'table'})
-                      for t in table_styles]
-        }]
-
-    def get_tiny_config(self):
-        settings = self.settings
-
-        importcss_file_filter = '%s/++plone++static/tinymce-styles.css' % (
-            self.portal_url)
-
-        theme = self.get_theme()
-        if theme and getattr(theme, 'tinymce_styles_css', None):
-            importcss_file_filter += ',%s/%s' % (
-                self.portal_url,
-                theme.tinymce_styles_css.lstrip('/'))
-
-        tiny_config = {
-            'resize': settings.resizing and 'both' or False,
-            'content_css': self.get_content_css(importcss_file_filter),
-            'plugins': ['plonelink', 'ploneimage', 'importcss'] + settings.plugins,
-            'external_plugins': {},
-            'toolbar': settings.toolbar,
-            'entity_encoding': settings.entity_encoding,
-            'importcss_append': True,
-            'importcss_file_filter': importcss_file_filter,
-            'browser_spellcheck': True
-        }
-        toolbar_additions = settings.custom_buttons or []
-
-        if settings.editor_height:
-            tiny_config['height'] = settings.editor_height
-        if settings.autoresize:
-            tiny_config['plugins'].append('autoresize')
-            tiny_config['autoresize_max_height'] = 1000  # hard coded?
-        if settings.editor_width:
-            tiny_config['width'] = settings.editor_width
-
-        # specific plugin options
-        if 'contextmenu' in settings.plugins:
-            tiny_config['contextmenu'] = "plonelink ploneimage inserttable | cell row column deletetable"  # noqa
-
-        if settings.libraries_spellchecker_choice == 'AtD':
-            mtool = getToolByName(self.portal, 'portal_membership')
-            member = mtool.getAuthenticatedMember()
-            member_id = member.getId()
-            if member_id:
-                if 'compat3x' not in tiny_config['plugins']:
-                    tiny_config['plugins'].append('compat3x')
-                tiny_config['external_plugins']['AtD'] = \
-                    '%s/++plone++static/tinymce-AtD-plugin/editor_plugin.js' % self.portal_url  # noqa
-                # None when Anonymous User
-                tiny_config['atd_rpc_id'] = 'plone-' + member_id
-                tiny_config['atd_rpc_url'] = self.portal_url
-                tiny_config['atd_show_types'] = ','.join(settings.libraries_atd_show_types)  # noqa
-                tiny_config['atd_ignore_strings'] = ','.join(settings.libraries_atd_ignore_strings)  # noqa
-                toolbar_additions.append('AtD')
-        elif settings.libraries_spellchecker_choice == 'AtD':
-            tiny_config['browser_spellcheck'] = True
-
-        if toolbar_additions:
-            tiny_config['toolbar'] += ' | %s' % ' '.join(toolbar_additions)
-
-        for plugin in settings.custom_plugins or []:
-            parts = plugin.split('|')
-            if len(parts) != 2:
-                continue
-            tiny_config['external_plugins'][parts[0]] = parts[1]
-
-        tiny_config['style_formats'] = self.get_all_style_formats()
-        if settings.formats:
-            try:
-                tiny_config['formats'] = json.loads(settings.formats)
-            except ValueError:
-                pass
-
-        if settings.menubar:
-            tiny_config['menubar'] = settings.menubar
-        if settings.menu:
-            try:
-                tiny_config['menu'] = json.loads(settings.menu)
-            except ValueError:
-                pass
-
-        if hasattr(settings, 'templates') and settings.templates:
-            try:
-                tiny_config['templates'] = json.loads(settings.templates)
-            except ValueError:
-                pass
-
-        if settings.other_settings:
-            try:
-                tiny_config.update(json.loads(settings.other_settings))
-            except ValueError:
-                pass
-
-        return tiny_config
-
-
-class PloneSettingsAdapter(object):
-    """
-    This adapter will handle all default plone settings.
-
-    Right now, it only does tinymce
-    """
-    implements(IPatternsSettings)
-
-    def __init__(self, context, request, field):
-        self.request = request
-        self.context = context
-        self.field = field
-
-    def mark_special_links(self):
-        result = {}
-
-        registry = getUtility(IRegistry)
-        settings = registry.forInterface(
-            ILinkSchema, prefix="plone", check=False)
-
-        msl = settings.mark_special_links
-        elonw = settings.external_links_open_new_window
-        if msl or elonw:
-            result = {'data-pat-markspeciallinks':
-                      ('{"external_links_open_new_window": "%s",'
-                       '"mark_special_links": "%s"}' % (elonw, msl))}
-        return result
-
-    def __call__(self):
-        data = self.tinymce()
-        data.update(self.mark_special_links())
-        return data
-
-    def tinymce(self):
-        """
-        data-pat-tinymce : JSON.stringify({
-            relatedItems: {
-              vocabularyUrl: config.portal_url +
-                '/@@getVocabulary?name=plone.app.vocabularies.Catalog'
-            },
-            tiny: config,
-            prependToUrl: 'resolveuid/',
-            linkAttribute: 'UID',
-            prependToScalePart: '/@@images/image/'
-          })
-        """
-
-        generator = TinyMCESettingsGenerator(self.context, self.request)
-        settings = generator.settings
-
-        folder = aq_inner(self.context)
-        # Test if we are currently creating an Archetype object
-        if IFactoryTempFolder.providedBy(aq_parent(folder)):
-            folder = aq_parent(aq_parent(aq_parent(folder)))
-        if not IFolderish.providedBy(folder):
-            folder = aq_parent(folder)
-
-        if IPloneSiteRoot.providedBy(folder):
-            initial = None
-        else:
-            initial = IUUID(folder, None)
-
-        nav_root = getNavigationRootObject(folder, generator.portal)
-        root_url = get_portal_url(folder)
-        current_path = folder.absolute_url()[len(root_url):]
-
-        image_types = settings.image_objects or []
-        folder_types = settings.contains_objects or []
-
-        server_url = self.request.get('SERVER_URL', '')
-        site_path = generator.portal_url[len(server_url):]
-        configuration = {
-            'relatedItems': {
-                'vocabularyUrl':
-                    '%s/@@getVocabulary?name=plone.app.vocabularies.Catalog' % (
-                        root_url),
-                'folderTypes': folder_types,
-                'rootPath': '/'.join(nav_root.getPhysicalPath()) if nav_root
-                            else '/',
-                'sort_on': 'sortable_title',
-                'sort_order': 'ascending',
-            },
-            'upload': {
-                'initialFolder': initial,
-                'currentPath': current_path,
-                'baseUrl': generator.portal_url,
-                'relativePath': '@@fileUpload',
-                'uploadMultiple': False,
-                'maxFiles': 1,
-                'showTitle': False
-            },
-            'base_url': self.context.absolute_url(),
-            'tiny': generator.get_tiny_config(),
-            # This is for loading the languages on tinymce
-            'loadingBaseUrl': '%s/++plone++static/components/tinymce-builded/js/tinymce' % generator.portal_url,  # noqa
-            'prependToUrl': '{0}/resolveuid/'.format(site_path.rstrip('/')),
-            'linkAttribute': 'UID',
-            'prependToScalePart': '/@@images/image/',
-            'imageTypes': image_types
-            # 'anchorSelector': utility.anchor_selector,
-        }
-
-        return {'data-pat-tinymce': json.dumps(configuration)}
+# -*- coding: utf-8 -*-
+from zope.deferredimport import deprecated
+
+deprecated(
+    "Import from Products.CMFPlone.patterns.tinymce instead",
+    TinyMCESettingsGenerator='Products.CMFPlone.patterns.tinymce.'
+                             'TinyMCESettingsGenerator'
+)
+deprecated(
+    "Import from Products.CMFPlone.patterns.settings instead",
+    PloneSettingsAdapter='Products.CMFPlone.patterns.settings.'
+                         'PatternSettingsAdapter'
+)
diff --git a/Products/CMFPlone/patterns/configure.zcml b/Products/CMFPlone/patterns/configure.zcml
index d5784cd..c4c0de9 100644
--- a/Products/CMFPlone/patterns/configure.zcml
+++ b/Products/CMFPlone/patterns/configure.zcml
@@ -1,11 +1,26 @@
-<configure xmlns="http://namespaces.zope.org/zope"
-           i18n_domain="plone">
-
+<configure
+    i18n_domain="plone"
+    xmlns="http://namespaces.zope.org/zope"
+    xmlns:browser="http://namespaces.zope.org/browser">
+  <!-- helper view -->
+  <browser:page
+      class=".view.PatternsSettingsView"
+      for="*"
+      name="plone_patterns_settings"
+      permission="zope.Public"
+  />
   <!-- Adapters for patterns settings -->
-
-  <adapter for="* * *"
-      factory=".PloneSettingsAdapter"
+  <adapter
+      factory=".settings.PatternSettingsAdapter"
+      for="* * *"
+      name="pattern_settings"
       provides="Products.CMFPlone.interfaces.IPatternsSettings"
-      name="plone_settings" />
-
-</configure>
\ No newline at end of file
+  />
+  <!-- deprecated name -->
+  <adapter
+      factory=".settings.PatternSettingsAdapter"
+      for="* * *"
+      name="plone_settings"
+      provides="Products.CMFPlone.interfaces.IPatternsSettings"
+  />
+</configure>
diff --git a/Products/CMFPlone/patterns/settings.py b/Products/CMFPlone/patterns/settings.py
new file mode 100644
index 0000000..30d358a
--- /dev/null
+++ b/Products/CMFPlone/patterns/settings.py
@@ -0,0 +1,125 @@
+# -*- coding: utf-8 -*-
+from Acquisition import aq_parent, aq_inner
+from borg.localrole.interfaces import IFactoryTempFolder
+from plone.app.layout.navigation.root import getNavigationRootObject
+from plone.registry.interfaces import IRegistry
+from plone.uuid.interfaces import IUUID
+from Products.CMFCore.interfaces._content import IFolderish
+from Products.CMFPlone.interfaces import ILinkSchema
+from Products.CMFPlone.interfaces import IPatternsSettings
+from Products.CMFPlone.interfaces import IPloneSiteRoot
+from Products.CMFPlone.utils import get_portal
+from Products.CMFPlone.patterns.tinymce import TinyMCESettingsGenerator
+from zope.component import getUtility
+from zope.interface import implementer
+
+import json
+
+
+@implementer(IPatternsSettings)
+class PatternSettingsAdapter(object):
+    """
+    Provides default plone settings relevant for patterns.
+    """
+
+    def __init__(self, context, request, field):
+        self.request = request
+        self.context = context
+        self.field = field
+
+    def __call__(self):
+        data = self.tinymce()
+        data.update(self.mark_special_links())
+        return data
+
+    def mark_special_links(self):
+        result = {}
+
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(
+            ILinkSchema, prefix="plone", check=False)
+
+        msl = settings.mark_special_links
+        elonw = settings.external_links_open_new_window
+        if msl or elonw:
+            result = {
+                'data-pat-markspeciallinks': json.dumps(
+                    {
+                        'external_links_open_new_window': elonw,
+                        'mark_special_links': msl
+                    }
+                )
+            }
+        return result
+
+    def tinymce(self):
+        """
+        data-pat-tinymce : JSON.stringify({
+            relatedItems: {
+              vocabularyUrl: config.portal_url +
+                '/@@getVocabulary?name=plone.app.vocabularies.Catalog'
+            },
+            tiny: config,
+            prependToUrl: 'resolveuid/',
+            linkAttribute: 'UID',
+            prependToScalePart: '/@@images/image/'
+          })
+        """
+
+        generator = TinyMCESettingsGenerator(self.context, self.request)
+        settings = generator.settings
+        folder = aq_inner(self.context)
+
+        # Test if we are currently creating an Archetype object
+        if IFactoryTempFolder.providedBy(aq_parent(folder)):
+            folder = aq_parent(aq_parent(aq_parent(folder)))
+        if not IFolderish.providedBy(folder):
+            folder = aq_parent(folder)
+
+        if IPloneSiteRoot.providedBy(folder):
+            initial = None
+        else:
+            initial = IUUID(folder, None)
+
+        portal = get_portal()
+        portal_url = portal.absolute_url()
+        nav_root = getNavigationRootObject(folder, portal)
+        nav_root_url = nav_root.absolute_url()
+        current_path = folder.absolute_url()[len(portal_url):]
+
+        image_types = settings.image_objects or []
+        folder_types = settings.contains_objects or []
+
+        server_url = self.request.get('SERVER_URL', '')
+        site_path = portal_url[len(server_url):]
+        configuration = {
+            'base_url': self.context.absolute_url(),
+            'imageTypes': image_types,
+            'linkAttribute': 'UID',
+            # This is for loading the languages on tinymce
+            'loadingBaseUrl': '{0}/++plone++static/components/tinymce-builded/'
+                              'js/tinymce'.format(portal_url),
+            'relatedItems': {
+                'folderTypes': folder_types,
+                'rootPath': '/'.join(nav_root.getPhysicalPath())
+                            if nav_root else '/',
+                'sort_on': 'sortable_title',
+                'sort_order': 'ascending',
+                'vocabularyUrl':
+                    '{0}/@@getVocabulary?name=plone.app.vocabularies.'
+                    'Catalog'.format(nav_root_url),
+            },
+            'prependToScalePart': '/@@images/image/',
+            'prependToUrl': '{0}/resolveuid/'.format(site_path.rstrip('/')),
+            'tiny': generator.get_tiny_config(),
+            'upload': {
+                'baseUrl': portal_url,
+                'currentPath': current_path,
+                'initialFolder': initial,
+                'maxFiles': 1,
+                'relativePath': '@@fileUpload',
+                'showTitle': False,
+                'uploadMultiple': False,
+            },
+        }
+        return {'data-pat-tinymce': json.dumps(configuration)}
diff --git a/Products/CMFPlone/patterns/tinymce.py b/Products/CMFPlone/patterns/tinymce.py
new file mode 100644
index 0000000..5176e56
--- /dev/null
+++ b/Products/CMFPlone/patterns/tinymce.py
@@ -0,0 +1,195 @@
+# -*- coding: utf-8 -*-
+from plone.app.layout.navigation.root import getNavigationRootObject
+from plone.app.theming.utils import theming_policy
+from plone.registry.interfaces import IRegistry
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces import ITinyMCESchema
+from Products.CMFPlone.utils import get_portal
+from zope.component import getUtility
+
+import json
+
+
+class TinyMCESettingsGenerator(object):
+
+    def __init__(self, context, request):
+        self.context = context
+        self.request = request
+        self.settings = getUtility(IRegistry).forInterface(
+            ITinyMCESchema,
+            prefix="plone",
+            check=False
+        )
+        self.nav_root = getNavigationRootObject(
+            self.context,
+            get_portal(),
+        )
+        self.nav_root_url = self.nav_root.absolute_url()
+
+    def get_theme(self):
+        return theming_policy().get_theme()
+
+    def get_content_css(self, style_css=''):
+        files = [
+            '{0}/++plone++static/plone-compiled.css'.format(self.nav_root_url)
+        ]
+        if style_css:
+            files.extend(style_css.split(','))
+        content_css = self.settings.content_css or []
+        for url in content_css:
+            if url and url.strip():
+                files.append('/'.join([self.nav_root_url, url.strip()]))
+        theme = self.get_theme()
+        tinymce_content_css = getattr(theme, 'tinymce_content_css', None)
+        if tinymce_content_css is not None:
+            files.append(self.nav_root_url + theme.tinymce_content_css)
+
+        return ','.join(files)
+
+    def get_style_format(self, txt, _type='format', base=None):
+        parts = txt.strip().split('|')
+        if len(parts) < 2:
+            return
+        if base is None:
+            val = {}
+        else:
+            val = base
+        val.update({
+            'title': parts[0],
+            _type: parts[1]
+        })
+        if len(parts) > 2:
+            val['icon'] = parts[2]
+        return val
+
+    def get_all_style_formats(self):
+        header_styles = self.settings.header_styles or []
+        block_styles = self.settings.block_styles or []
+        inline_styles = self.settings.inline_styles or []
+        alignment_styles = self.settings.alignment_styles or []
+        table_styles = self.settings.table_styles or []
+        return [{
+            'title': 'Headers',
+            'items': [self.get_style_format(t) for t in header_styles]
+        }, {
+            'title': 'Block',
+            'items': [self.get_style_format(t) for t in block_styles]
+        }, {
+            'title': 'Inline',
+            'items': [self.get_style_format(t) for t in inline_styles]
+        }, {
+            'title': 'Alignment',
+            'items': [self.get_style_format(t) for t in alignment_styles]
+        }, {
+            'title': 'Tables',
+            'items': [
+                self.get_style_format(t, 'classes', {'selector': 'table'})
+                for t in table_styles
+            ]
+        }]
+
+    def get_tiny_config(self):
+        settings = self.settings
+        importcss_file_filter = '%s/++plone++static/tinymce-styles.css' % (
+            self.nav_root_url
+        )
+
+        theme = self.get_theme()
+        if theme and getattr(theme, 'tinymce_styles_css', None):
+            importcss_file_filter += ',%s/%s' % (
+                self.nav_root_url,
+                theme.tinymce_styles_css.lstrip('/'))
+
+        tiny_config = {
+            'resize': 'both' if settings.resizing else False,
+            'content_css': self.get_content_css(importcss_file_filter),
+            'plugins': [
+                'plonelink',
+                'ploneimage',
+                'importcss'
+            ] + settings.plugins,
+            'external_plugins': {},
+            'toolbar': settings.toolbar,
+            'entity_encoding': settings.entity_encoding,
+            'importcss_append': True,
+            'importcss_file_filter': importcss_file_filter,
+            'browser_spellcheck': True
+        }
+        toolbar_additions = settings.custom_buttons or []
+
+        if settings.editor_height:
+            tiny_config['height'] = settings.editor_height
+        if settings.autoresize:
+            tiny_config['plugins'].append('autoresize')
+            tiny_config['autoresize_max_height'] = 1000  # hard coded?
+        if settings.editor_width:
+            tiny_config['width'] = settings.editor_width
+
+        # specific plugin options
+        if 'contextmenu' in settings.plugins:
+            tiny_config['contextmenu'] = "plonelink ploneimage inserttable |"\
+                " cell row column deletetable"
+
+        if settings.libraries_spellchecker_choice == 'AtD':
+            mtool = getToolByName(self.context, 'portal_membership')
+            member = mtool.getAuthenticatedMember()
+            member_id = member.getId()
+            if member_id:
+                if 'compat3x' not in tiny_config['plugins']:
+                    tiny_config['plugins'].append('compat3x')
+                tiny_config['external_plugins']['AtD'] = (
+                    '{0}/++plone++static/tinymce-AtD-plugin/'
+                    'editor_plugin.js'.format(self.nav_root_url)
+                )
+                # None when Anonymous User
+                tiny_config['atd_rpc_id'] = 'plone-' + member_id
+                tiny_config['atd_rpc_url'] = self.nav_root_url
+                tiny_config['atd_show_types'] = ','.join(
+                    settings.libraries_atd_show_types
+                )
+                tiny_config['atd_ignore_strings'] = ','.join(
+                    settings.libraries_atd_ignore_strings
+                )
+                toolbar_additions.append('AtD')
+        elif settings.libraries_spellchecker_choice == 'AtD':
+            tiny_config['browser_spellcheck'] = True
+
+        if toolbar_additions:
+            tiny_config['toolbar'] += ' | {0}'.format(
+                ' '.join(toolbar_additions)
+            )
+
+        for plugin in settings.custom_plugins or []:
+            parts = plugin.split('|')
+            if len(parts) != 2:
+                continue
+            tiny_config['external_plugins'][parts[0]] = parts[1]
+
+        tiny_config['style_formats'] = self.get_all_style_formats()
+        if settings.formats:
+            try:
+                tiny_config['formats'] = json.loads(settings.formats)
+            except ValueError:
+                pass
+
+        if settings.menubar:
+            tiny_config['menubar'] = settings.menubar
+        if settings.menu:
+            try:
+                tiny_config['menu'] = json.loads(settings.menu)
+            except ValueError:
+                pass
+
+        if hasattr(settings, 'templates') and settings.templates:
+            try:
+                tiny_config['templates'] = json.loads(settings.templates)
+            except ValueError:
+                pass
+
+        if settings.other_settings:
+            try:
+                tiny_config.update(json.loads(settings.other_settings))
+            except ValueError:
+                pass
+
+        return tiny_config
diff --git a/Products/CMFPlone/patterns/utils.py b/Products/CMFPlone/patterns/utils.py
index 3ecd82c..e86fef7 100644
--- a/Products/CMFPlone/patterns/utils.py
+++ b/Products/CMFPlone/patterns/utils.py
@@ -1,38 +1,36 @@
+# -*- coding: utf-8 -*-
+from Products.CMFPlone import utils
+
 import json
-from zope.component.hooks import getSite
-from plone.app.layout.navigation.root import getNavigationRootObject
-from Products.CMFCore.interfaces import ISiteRoot
-from zope.component import providedBy
+import warnings
 
 
 def format_pattern_settings(option, config):
     if option.startswith('json:'):
         try:
-            result = json.loads(option.lstrip('json:') % config)
+            return json.loads(option.lstrip('json:') % config)
         except:
-            result = {}
-    else:
-        result = option % config
-    return result
+            return {}
+    return option % config
 
 
 def get_portal():
-    closest_site = getSite()
-    if closest_site is not None:
-        for potential_portal in closest_site.aq_chain:
-            if ISiteRoot in providedBy(potential_portal):
-                return potential_portal
+    """DEPRECATED
+    """
+    warnings.warn(
+        'Instead of Products.CMFPlone.patterns.get_portal: '
+        'use Products.CMFPlone.utils.get_portal',
+        DeprecationWarning
+    )
+    return utils.get_portal()
 
 
 def get_portal_url(context):
-    portal = get_portal()
-    if portal:
-        root = getNavigationRootObject(context, portal)
-        if root:
-            try:
-                return root.absolute_url()
-            except AttributeError:
-                return portal.absolute_url()
-        else:
-            return portal.absolute_url()
-    return ''
+    """DEPRECATED
+    """
+    warnings.warn(
+        'Instead of Products.CMFPlone.patterns.get_portal_url: '
+        'Use Products.CMFPlone.utils.portal.absolute_url()',
+        DeprecationWarning
+    )
+    return utils.get_portal().absolute_url()
diff --git a/Products/CMFPlone/patterns/view.py b/Products/CMFPlone/patterns/view.py
new file mode 100644
index 0000000..3603df8
--- /dev/null
+++ b/Products/CMFPlone/patterns/view.py
@@ -0,0 +1,48 @@
+# -*- coding: utf-8 -*-
+# This module delivers the global patterns settings
+from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.interfaces import IPatternsSettings
+from zope.component import getAdapters
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.publisher.browser import BrowserView
+
+
+class PatternsSettingsView(BrowserView):
+    """
+    Default patterns settings
+    """
+
+    def __call__(self):
+        portal_state = getMultiAdapter(
+            (self.context, self.request),
+            name=u'plone_portal_state'
+        )
+        context_state = getMultiAdapter(
+            (self.context, self.request),
+            name='plone_context_state'
+        )
+        # do not use getSite because it's possible it could be different
+        # than the actual portal url
+        portal_url = portal_state.portal_url()
+        result = {
+            'data-base-url': self.context.absolute_url(),
+            'data-view-url': context_state.view_url(),
+            'data-portal-url': portal_url,
+            'data-i18ncatalogurl': portal_url + '/plonejsi18n'
+        }
+
+        # first, check for any adapters that need pattern data defined
+        adapters = getAdapters(
+            (self.context, self.request, None),
+            IPatternsSettings
+        )
+        [result.update(x[1]()) for x in adapters]
+
+        # Resources Registered UI patterns can override adapters
+        registry = getUtility(IRegistry)
+        pattern_options = registry.get('plone.patternoptions', {})
+        for key, value in pattern_options.items():
+            result['data-pat-' + key] = value
+
+        return result
diff --git a/Products/CMFPlone/tests/testPatternSettings.py b/Products/CMFPlone/tests/testPatternSettings.py
deleted file mode 100644
index 6bcd9f2..0000000
--- a/Products/CMFPlone/tests/testPatternSettings.py
+++ /dev/null
@@ -1,36 +0,0 @@
-from Products.CMFPlone.tests import PloneTestCase
-from zope.component import getUtility
-from plone.registry.interfaces import IRegistry
-from Products.CMFPlone.interfaces import ITinyMCESchema
-from Products.CMFPlone.patterns import PloneSettingsAdapter
-from plone.app.testing import TEST_USER_NAME
-from plone.app.testing import login
-import json
-
-
-class TestTinyMCESettings(PloneTestCase.PloneTestCase):
-
-    def get_conf(self):
-        adapter = PloneSettingsAdapter(
-            self.portal, self.layer['request'], None)
-        return json.loads(adapter.tinymce()['data-pat-tinymce'])
-
-    def test_atd_included(self):
-        registry = getUtility(IRegistry)
-        settings = registry.forInterface(ITinyMCESchema, prefix="plone")
-        settings.libraries_spellchecker_choice = 'AtD'
-        login(self.portal, TEST_USER_NAME)
-        conf = self.get_conf()
-        self.assertTrue('compat3x' in conf['tiny']['plugins'])
-        self.assertTrue('AtD' in conf['tiny']['external_plugins'])
-
-    def test_style_formats(self):
-        conf = self.get_conf()
-        self.assertEqual(len(conf['tiny']['style_formats']), 5)
-
-    def test_other_settings(self):
-        registry = getUtility(IRegistry)
-        settings = registry.forInterface(ITinyMCESchema, prefix="plone")
-        settings.other_settings = u'{"foo": "bar"}'
-        conf = self.get_conf()
-        self.assertEqual(conf['tiny']['foo'], 'bar')
diff --git a/Products/CMFPlone/tests/test_patternsettings.py b/Products/CMFPlone/tests/test_patternsettings.py
new file mode 100644
index 0000000..44837ae
--- /dev/null
+++ b/Products/CMFPlone/tests/test_patternsettings.py
@@ -0,0 +1,106 @@
+# -*- coding: utf-8 -*-
+from plone.app.testing import login
+from plone.app.testing import TEST_USER_NAME
+from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.interfaces import ITinyMCESchema
+from Products.CMFPlone.patterns.view import PatternsSettingsView
+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+from zope.component import getUtility
+
+import json
+import unittest
+
+
+class TestTinyMCESettings(unittest.TestCase):
+
+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING
+
+    def get_conf(self):
+        from Products.CMFPlone.patterns.settings import PatternSettingsAdapter
+        adapter = PatternSettingsAdapter(
+            self.layer['portal'],
+            self.layer['request'],
+            None
+        )
+        return json.loads(adapter.tinymce()['data-pat-tinymce'])
+
+    def test_atd_included(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ITinyMCESchema, prefix="plone")
+        settings.libraries_spellchecker_choice = 'AtD'
+        login(self.layer['portal'], TEST_USER_NAME)
+        conf = self.get_conf()
+        self.assertTrue('compat3x' in conf['tiny']['plugins'])
+        self.assertTrue('AtD' in conf['tiny']['external_plugins'])
+
+    def test_style_formats(self):
+        conf = self.get_conf()
+        self.assertEqual(len(conf['tiny']['style_formats']), 5)
+
+    def test_other_settings(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(ITinyMCESchema, prefix="plone")
+        settings.other_settings = u'{"foo": "bar"}'
+        conf = self.get_conf()
+        self.assertEqual(conf['tiny']['foo'], 'bar')
+
+
+class TestPatternSettingsView(unittest.TestCase):
+    """Ensure that the basic redirector setup is successful.
+    """
+
+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+
+    def setUp(self):
+        self.layer['portal'].invokeFactory('Folder', 'folder')
+        self.folder = self.layer['portal']['folder']
+
+    def testShouldReturnCorrectType(self):
+        settings = PatternsSettingsView(self.folder, self.layer['request'])
+        result = settings()
+        self.assertEquals(type(result), dict)
+        for key, value in result.items():
+            self.assertTrue(isinstance(key, basestring))
+            self.assertTrue(isinstance(value, basestring))
+
+    def testFolderUrls(self):
+        settings = PatternsSettingsView(self.folder, self.layer['request'])
+        result = settings()
+        self.assertEquals(
+            result['data-base-url'],
+            self.folder.absolute_url()
+        )
+        self.assertEquals(
+            result['data-portal-url'],
+            self.layer['portal'].absolute_url()
+        )
+        self.assertEquals(
+            result['data-view-url'],
+            self.folder.absolute_url()
+        )
+
+    def testFileUrls(self):
+        self.folder.invokeFactory('File', 'file1')
+        file_obj = self.folder['file1']
+        settings = PatternsSettingsView(file_obj, self.layer['request'])
+        result = settings()
+        self.assertEquals(result['data-base-url'], file_obj.absolute_url())
+        self.assertEquals(
+            result['data-portal-url'],
+            self.layer['portal'].absolute_url()
+        )
+        self.assertEquals(
+            result['data-view-url'],
+            file_obj.absolute_url() + '/view'
+        )
+
+    def testPatternOptions(self):
+        registry = getUtility(IRegistry)
+        registry['plone.patternoptions'] = {
+            'foo': u'{"foo": "bar"}'
+        }
+
+        settings = PatternsSettingsView(self.folder, self.layer['request'])
+        result = settings()
+        self.assertEquals(result['data-pat-foo'], u'{"foo": "bar"}')
diff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py
index 60c51ab..4f0bd60 100644
--- a/Products/CMFPlone/utils.py
+++ b/Products/CMFPlone/utils.py
@@ -10,6 +10,9 @@
 from App.ImageFile import ImageFile
 from DateTime import DateTime
 from DateTime.interfaces import DateTimeError
+from log import log
+from log import log_deprecated
+from log import log_exc
 from os.path import join, abspath, split
 from plone.i18n.normalizer.interfaces import IIDNormalizer
 from plone.registry.interfaces import IRegistry
@@ -17,11 +20,13 @@
 from Products.CMFCore.utils import getToolByName
 from Products.CMFCore.utils import ToolInit as CMFCoreToolInit
 from Products.CMFPlone import PloneMessageFactory as _
+from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot
 from types import ClassType
 from webdav.interfaces import IWriteLock
 from zope import schema
 from zope.component import getMultiAdapter
 from zope.component import getUtility
+from zope.component import providedBy
 from zope.component import queryUtility
 from zope.component.hooks import getSite
 from zope.deferredimport import deprecated as deprecated_import
@@ -55,7 +60,6 @@
 security.declarePrivate('transaction')
 security.declarePrivate('zope')
 
-
 # Canonical way to get at CMFPlone directory
 PACKAGE_HOME = package_home(globals())
 security.declarePrivate('PACKAGE_HOME')
@@ -67,14 +71,23 @@
 pattern = re.compile(r'^(.*)\s+(\d+)\s*:\s*(\d+)$')
 
 # Log methods
-from log import log
-from log import log_exc
-from log import log_deprecated
-
 log_exc  # pyflakes.  Keep this, as someone may import it.
 _marker = []
 
 
+def get_portal():
+    """get the Plone portal object.
+
+    It fetched w/o any further context by using the last registered site.
+    So this work only after traversal time.
+    """
+    closest_site = getSite()
+    if closest_site is not None:
+        for potential_portal in closest_site.aq_chain:
+            if IPloneSiteRoot in providedBy(potential_portal):
+                return potential_portal
+
+
 def parent(obj):
     return aq_parent(aq_inner(obj))
 


