Repository: plone.namedfile


Branch: refs/heads/master
Date: 2017-09-08T17:38:19+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/5e71ee28b48a27ec09f693aed2ef992e61439bb0

add tests to show the problem of #56

Files changed:
M plone/namedfile/tests/test_scaling.py

diff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py
index 6044afc..a36a6d4 100644
--- a/plone/namedfile/tests/test_scaling.py
+++ b/plone/namedfile/tests/test_scaling.py
@@ -152,6 +152,72 @@ def testGetRetinaScaleByName(self):
         groups = re.match(expected, tag).groups()
         self.assertTrue(groups, tag)
 
+    def testGetRetinaScaleByWidthAndHeight(self):
+        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+        foo = self.scaling.scale('image', width=60, height=60)
+        self.assertTrue(foo.srcset)
+        self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')
+        self.assertEqual(foo.srcset[0]['width'], 120)
+        self.assertEqual(foo.srcset[0]['height'], 120)
+        assertImage(self, foo.srcset[0]['data'].data, 'PNG', (120, 120))
+
+        tag = foo.tag()
+        base = self.item.absolute_url()
+        expected = (
+            r'<img src="{0}'.format(base) +
+            r'/@@images/([-0-9a-f]{36})'
+            r'.(jpeg|gif|png)" '
+            r'alt="foo" title="foo" height="(\d+)" width="(\d+)" '
+            r'srcset="http://nohost/item/@@images/([-0-9a-f]{36})'
+            r'.(jpeg|gif|png)'
+            r' 2x" />')
+        groups = re.match(expected, tag).groups()
+        self.assertTrue(groups, tag)
+
+    def testGetRetinaScaleByWidthOnly(self):
+        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+        foo = self.scaling.scale('image', width=60)
+        self.assertTrue(foo.srcset)
+        self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')
+        self.assertEqual(foo.srcset[0]['width'], 120)
+        self.assertEqual(foo.srcset[0]['height'], 120)
+        assertImage(self, foo.srcset[0]['data'].data, 'PNG', (120, 120))
+
+        tag = foo.tag()
+        base = self.item.absolute_url()
+        expected = (
+            r'<img src="{0}'.format(base) +
+            r'/@@images/([-0-9a-f]{36})'
+            r'.(jpeg|gif|png)" '
+            r'alt="foo" title="foo" height="(\d+)" width="(\d+)" '
+            r'srcset="http://nohost/item/@@images/([-0-9a-f]{36})'
+            r'.(jpeg|gif|png)'
+            r' 2x" />')
+        groups = re.match(expected, tag).groups()
+        self.assertTrue(groups, tag)
+
+    def testGetRetinaScaleByHeightOnly(self):
+        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+        foo = self.scaling.scale('image', height=60)
+        self.assertTrue(foo.srcset)
+        self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')
+        self.assertEqual(foo.srcset[0]['width'], 120)
+        self.assertEqual(foo.srcset[0]['height'], 120)
+        assertImage(self, foo.srcset[0]['data'].data, 'PNG', (120, 120))
+
+        tag = foo.tag()
+        base = self.item.absolute_url()
+        expected = (
+            r'<img src="{0}'.format(base) +
+            r'/@@images/([-0-9a-f]{36})'
+            r'.(jpeg|gif|png)" '
+            r'alt="foo" title="foo" height="(\d+)" width="(\d+)" '
+            r'srcset="http://nohost/item/@@images/([-0-9a-f]{36})'
+            r'.(jpeg|gif|png)'
+            r' 2x" />')
+        groups = re.match(expected, tag).groups()
+        self.assertTrue(groups, tag)
+
     def testGetUnknownScale(self):
         foo = self.scaling.scale('image', scale='foo?')
         self.assertEqual(foo, None)


Repository: plone.namedfile


Branch: refs/heads/master
Date: 2017-09-08T17:57:37+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/a20f0c827a05019de1016e5366ee60195e2849f1

fixes #56

Files changed:
M CHANGES.rst
M plone/namedfile/scaling.py

diff --git a/CHANGES.rst b/CHANGES.rst
index b03af7c..1f82513 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,9 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Fix bug #56 where ``srcset`` generation failed on no given width or height if there was no sclae given.
+  https://github.com/plone/plone.namedfile/pull/56
+  [jensens]
 
 
 4.2.2 (2017-07-03)
diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py
index 53891ec..729b194 100644
--- a/plone/namedfile/scaling.py
+++ b/plone/namedfile/scaling.py
@@ -460,15 +460,23 @@ def calculate_srcset(
         (orig_width, orig_height) = self.getImageSize(fieldname)
         for retinaScale in self.getRetinaScales():
             # Don't create retina scales larger than the source image.
-            if orig_height and orig_height < height * retinaScale['scale']:
-                continue
-            if orig_width and orig_width < width * retinaScale['scale']:
+            if (
+                (
+                    height and
+                    orig_height and
+                    orig_height < height * retinaScale['scale']
+                ) or (
+                    width and
+                    orig_width and
+                    orig_width < width * retinaScale['scale']
+                )
+            ):
                 continue
             parameters['quality'] = retinaScale['quality']
             scale_src = storage.scale(
                 fieldname=fieldname,
-                height=height * retinaScale['scale'],
-                width=width * retinaScale['scale'],
+                height=height * retinaScale['scale'] if height else height,
+                width=width * retinaScale['scale'] if width else width,
                 direction=direction,
                 **parameters
             )
@@ -492,7 +500,13 @@ def tag(
 
 class NavigationRootScaling(ImageScaling):
     def _scale_cachekey(method, self, brain, fieldname, **kwargs):
-        return (self.context.absolute_url(), brain.UID, brain.modified, fieldname, kwargs)
+        return (
+            self.context.absolute_url(),
+            brain.UID,
+            brain.modified,
+            fieldname,
+            kwargs,
+        )
 
     @ram.cache(_scale_cachekey)
     def tag(self,


Repository: plone.namedfile


Branch: refs/heads/master
Date: 2017-09-08T17:57:37+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/a7fd1075737d7364a1cbcb4b3907934a505d4358

fix a bunch of C812 violations

Files changed:
M plone/namedfile/scaling.py
M plone/namedfile/tests/test_scaling.py

diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py
index 729b194..f2016c8 100644
--- a/plone/namedfile/scaling.py
+++ b/plone/namedfile/scaling.py
@@ -250,7 +250,7 @@ def __call__(
                 logger.exception(
                     'Could not scale "{0!r}" of {1!r}'.format(
                         orig_value,
-                        self.context.absolute_url
+                        self.context.absolute_url,
                     ),
                 )
                 return
@@ -258,7 +258,7 @@ def __call__(
             logger.exception(
                 'Could not scale "{0!r}" of {1!r}'.format(
                     orig_value,
-                    self.context.absolute_url
+                    self.context.absolute_url,
                 ),
             )
             return
@@ -270,7 +270,7 @@ def __call__(
         value = orig_value.__class__(
             data,
             contentType=mimetype,
-            filename=orig_value.filename
+            filename=orig_value.filename,
         )
         value.fieldname = fieldname
         return value, format_, dimensions
@@ -313,7 +313,7 @@ def publishTraverse(self, request, name):
                 self.context,
                 self.request,
                 data=value,
-                fieldname=name
+                fieldname=name,
             )
             return scale_view
         raise NotFound(self, name, self.request)
@@ -327,7 +327,7 @@ def traverse(self, name, furtherPath):
                 self.context,
                 self.request,
                 data=value,
-                fieldname=name
+                fieldname=name,
             )
         else:
             return ImmutableTraverser(self.scale(name, furtherPath[-1]))
@@ -343,7 +343,7 @@ def getAvailableSizes(self, fieldname=None):
         if fieldname:
             logger.warn(
                 'fieldname was passed to deprecated getAvailableSizes, but '
-                'will be ignored.'
+                'will be ignored.',
             )
         return self.available_sizes
 
@@ -411,7 +411,7 @@ def scale(
                 logger.warn(
                     'A scale name and width/heigth are given. Those are'
                     'mutually exclusive: solved by ignoring width/heigth and '
-                    'taking name'
+                    'taking name',
                 )
             available = self.available_sizes
             if scale not in available:
diff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py
index a36a6d4..b99d225 100644
--- a/plone/namedfile/tests/test_scaling.py
+++ b/plone/namedfile/tests/test_scaling.py
@@ -124,7 +124,7 @@ def testGetScaleByName(self):
         expected = \
             r'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" ' \
             r'alt="foo" title="foo" height="(\d+)" width="(\d+)" />'.format(
-                base
+                base,
             )
         groups = re.match(expected, tag).groups()
         self.assertTrue(groups, tag)
@@ -283,7 +283,7 @@ def testGetOriginalScaleTag(self):
         expected = \
             r'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" ' \
             r'alt="foo" title="foo" height="(\d+)" width="(\d+)" />'.format(
-                base
+                base,
             )
         self.assertTrue(re.match(expected, tag).groups())
 
@@ -294,7 +294,7 @@ def testScaleOnItemWithNonASCIITitle(self):
         expected = \
             r'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" ' \
             r'alt="\xfc" title="\xfc" height="(\d+)" width="(\d+)" />'.format(
-                base
+                base,
             )
         self.assertTrue(re.match(expected, tag).groups())
 
@@ -305,7 +305,7 @@ def testScaleOnItemWithUnicodeTitle(self):
         expected = \
             r'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" ' \
             r'alt="\xfc" title="\xfc" height="(\d+)" width="(\d+)" />'.format(
-                base
+                base,
             )
         self.assertTrue(re.match(expected, tag).groups())
 
@@ -370,7 +370,7 @@ def traverse(self, path=''):
         expected = \
             r'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" ' \
             r'alt="foo" title="foo" height="(\d+)" width="(\d+)" />'.format(
-                base
+                base,
             )
         groups = re.match(expected, tag).groups()
         self.assertTrue(groups, tag)


Repository: plone.namedfile


Branch: refs/heads/master
Date: 2017-09-08T22:43:43+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.namedfile/commit/bd6be273b7845d614d9748175ea9236e05beb9fc

Merge pull request #57 from plone/fix-56

Fixes #56

Files changed:
M CHANGES.rst
M plone/namedfile/scaling.py
M plone/namedfile/tests/test_scaling.py

diff --git a/CHANGES.rst b/CHANGES.rst
index b03af7c..1f82513 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,9 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Fix bug #56 where ``srcset`` generation failed on no given width or height if there was no sclae given.
+  https://github.com/plone/plone.namedfile/pull/56
+  [jensens]
 
 
 4.2.2 (2017-07-03)
diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py
index 53891ec..f2016c8 100644
--- a/plone/namedfile/scaling.py
+++ b/plone/namedfile/scaling.py
@@ -250,7 +250,7 @@ def __call__(
                 logger.exception(
                     'Could not scale "{0!r}" of {1!r}'.format(
                         orig_value,
-                        self.context.absolute_url
+                        self.context.absolute_url,
                     ),
                 )
                 return
@@ -258,7 +258,7 @@ def __call__(
             logger.exception(
                 'Could not scale "{0!r}" of {1!r}'.format(
                     orig_value,
-                    self.context.absolute_url
+                    self.context.absolute_url,
                 ),
             )
             return
@@ -270,7 +270,7 @@ def __call__(
         value = orig_value.__class__(
             data,
             contentType=mimetype,
-            filename=orig_value.filename
+            filename=orig_value.filename,
         )
         value.fieldname = fieldname
         return value, format_, dimensions
@@ -313,7 +313,7 @@ def publishTraverse(self, request, name):
                 self.context,
                 self.request,
                 data=value,
-                fieldname=name
+                fieldname=name,
             )
             return scale_view
         raise NotFound(self, name, self.request)
@@ -327,7 +327,7 @@ def traverse(self, name, furtherPath):
                 self.context,
                 self.request,
                 data=value,
-                fieldname=name
+                fieldname=name,
             )
         else:
             return ImmutableTraverser(self.scale(name, furtherPath[-1]))
@@ -343,7 +343,7 @@ def getAvailableSizes(self, fieldname=None):
         if fieldname:
             logger.warn(
                 'fieldname was passed to deprecated getAvailableSizes, but '
-                'will be ignored.'
+                'will be ignored.',
             )
         return self.available_sizes
 
@@ -411,7 +411,7 @@ def scale(
                 logger.warn(
                     'A scale name and width/heigth are given. Those are'
                     'mutually exclusive: solved by ignoring width/heigth and '
-                    'taking name'
+                    'taking name',
                 )
             available = self.available_sizes
             if scale not in available:
@@ -460,15 +460,23 @@ def calculate_srcset(
         (orig_width, orig_height) = self.getImageSize(fieldname)
         for retinaScale in self.getRetinaScales():
             # Don't create retina scales larger than the source image.
-            if orig_height and orig_height < height * retinaScale['scale']:
-                continue
-            if orig_width and orig_width < width * retinaScale['scale']:
+            if (
+                (
+                    height and
+                    orig_height and
+                    orig_height < height * retinaScale['scale']
+                ) or (
+                    width and
+                    orig_width and
+                    orig_width < width * retinaScale['scale']
+                )
+            ):
                 continue
             parameters['quality'] = retinaScale['quality']
             scale_src = storage.scale(
                 fieldname=fieldname,
-                height=height * retinaScale['scale'],
-                width=width * retinaScale['scale'],
+                height=height * retinaScale['scale'] if height else height,
+                width=width * retinaScale['scale'] if width else width,
                 direction=direction,
                 **parameters
             )
@@ -492,7 +500,13 @@ def tag(
 
 class NavigationRootScaling(ImageScaling):
     def _scale_cachekey(method, self, brain, fieldname, **kwargs):
-        return (self.context.absolute_url(), brain.UID, brain.modified, fieldname, kwargs)
+        return (
+            self.context.absolute_url(),
+            brain.UID,
+            brain.modified,
+            fieldname,
+            kwargs,
+        )
 
     @ram.cache(_scale_cachekey)
     def tag(self,
diff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py
index 6044afc..b99d225 100644
--- a/plone/namedfile/tests/test_scaling.py
+++ b/plone/namedfile/tests/test_scaling.py
@@ -124,7 +124,7 @@ def testGetScaleByName(self):
         expected = \
             r'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" ' \
             r'alt="foo" title="foo" height="(\d+)" width="(\d+)" />'.format(
-                base
+                base,
             )
         groups = re.match(expected, tag).groups()
         self.assertTrue(groups, tag)
@@ -152,6 +152,72 @@ def testGetRetinaScaleByName(self):
         groups = re.match(expected, tag).groups()
         self.assertTrue(groups, tag)
 
+    def testGetRetinaScaleByWidthAndHeight(self):
+        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+        foo = self.scaling.scale('image', width=60, height=60)
+        self.assertTrue(foo.srcset)
+        self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')
+        self.assertEqual(foo.srcset[0]['width'], 120)
+        self.assertEqual(foo.srcset[0]['height'], 120)
+        assertImage(self, foo.srcset[0]['data'].data, 'PNG', (120, 120))
+
+        tag = foo.tag()
+        base = self.item.absolute_url()
+        expected = (
+            r'<img src="{0}'.format(base) +
+            r'/@@images/([-0-9a-f]{36})'
+            r'.(jpeg|gif|png)" '
+            r'alt="foo" title="foo" height="(\d+)" width="(\d+)" '
+            r'srcset="http://nohost/item/@@images/([-0-9a-f]{36})'
+            r'.(jpeg|gif|png)'
+            r' 2x" />')
+        groups = re.match(expected, tag).groups()
+        self.assertTrue(groups, tag)
+
+    def testGetRetinaScaleByWidthOnly(self):
+        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+        foo = self.scaling.scale('image', width=60)
+        self.assertTrue(foo.srcset)
+        self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')
+        self.assertEqual(foo.srcset[0]['width'], 120)
+        self.assertEqual(foo.srcset[0]['height'], 120)
+        assertImage(self, foo.srcset[0]['data'].data, 'PNG', (120, 120))
+
+        tag = foo.tag()
+        base = self.item.absolute_url()
+        expected = (
+            r'<img src="{0}'.format(base) +
+            r'/@@images/([-0-9a-f]{36})'
+            r'.(jpeg|gif|png)" '
+            r'alt="foo" title="foo" height="(\d+)" width="(\d+)" '
+            r'srcset="http://nohost/item/@@images/([-0-9a-f]{36})'
+            r'.(jpeg|gif|png)'
+            r' 2x" />')
+        groups = re.match(expected, tag).groups()
+        self.assertTrue(groups, tag)
+
+    def testGetRetinaScaleByHeightOnly(self):
+        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+        foo = self.scaling.scale('image', height=60)
+        self.assertTrue(foo.srcset)
+        self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')
+        self.assertEqual(foo.srcset[0]['width'], 120)
+        self.assertEqual(foo.srcset[0]['height'], 120)
+        assertImage(self, foo.srcset[0]['data'].data, 'PNG', (120, 120))
+
+        tag = foo.tag()
+        base = self.item.absolute_url()
+        expected = (
+            r'<img src="{0}'.format(base) +
+            r'/@@images/([-0-9a-f]{36})'
+            r'.(jpeg|gif|png)" '
+            r'alt="foo" title="foo" height="(\d+)" width="(\d+)" '
+            r'srcset="http://nohost/item/@@images/([-0-9a-f]{36})'
+            r'.(jpeg|gif|png)'
+            r' 2x" />')
+        groups = re.match(expected, tag).groups()
+        self.assertTrue(groups, tag)
+
     def testGetUnknownScale(self):
         foo = self.scaling.scale('image', scale='foo?')
         self.assertEqual(foo, None)
@@ -217,7 +283,7 @@ def testGetOriginalScaleTag(self):
         expected = \
             r'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" ' \
             r'alt="foo" title="foo" height="(\d+)" width="(\d+)" />'.format(
-                base
+                base,
             )
         self.assertTrue(re.match(expected, tag).groups())
 
@@ -228,7 +294,7 @@ def testScaleOnItemWithNonASCIITitle(self):
         expected = \
             r'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" ' \
             r'alt="\xfc" title="\xfc" height="(\d+)" width="(\d+)" />'.format(
-                base
+                base,
             )
         self.assertTrue(re.match(expected, tag).groups())
 
@@ -239,7 +305,7 @@ def testScaleOnItemWithUnicodeTitle(self):
         expected = \
             r'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" ' \
             r'alt="\xfc" title="\xfc" height="(\d+)" width="(\d+)" />'.format(
-                base
+                base,
             )
         self.assertTrue(re.match(expected, tag).groups())
 
@@ -304,7 +370,7 @@ def traverse(self, path=''):
         expected = \
             r'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" ' \
             r'alt="foo" title="foo" height="(\d+)" width="(\d+)" />'.format(
-                base
+                base,
             )
         groups = re.match(expected, tag).groups()
         self.assertTrue(groups, tag)


