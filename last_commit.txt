Repository: plone.protect


Branch: refs/heads/master
Date: 2016-02-22T08:14:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.protect/commit/ea5a476be1331c13d964c867abd77c694c5d5d3e

Fixed AttributeError when calling safeWrite on a TestRequest.

This has no environ.

Files changed:
M CHANGES.rst
M plone/protect/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 9a20ce1..c85ce46 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Fixed AttributeError when calling ``safeWrite`` on a
+  ``TestRequest``, because this has no ``environ.``.  [maurits]
 
 
 3.0.17 (2015-12-07)
diff --git a/plone/protect/utils.py b/plone/protect/utils.py
index 8476fb9..d3888e8 100644
--- a/plone/protect/utils.py
+++ b/plone/protect/utils.py
@@ -110,7 +110,8 @@ def getRoot(context):
 def safeWrite(obj, request=None):
     if request is None:
         request = getRequest()
-    if request is None:
+    if request is None or getattr(request, 'environ', _default) is _default:
+        # Request not found or it is a TestRequest without an environment.
         LOGGER.debug('could not mark object as a safe write')
         return
     if SAFE_WRITE_KEY not in request.environ:
@@ -119,4 +120,4 @@ def safeWrite(obj, request=None):
         if obj._p_oid not in request.environ[SAFE_WRITE_KEY]:
             request.environ[SAFE_WRITE_KEY].append(obj._p_oid)
     except AttributeError:
-        LOGGER.debug('object you attempted to mark safe does not have an oid')
\ No newline at end of file
+        LOGGER.debug('object you attempted to mark safe does not have an oid')


Repository: plone.protect


Branch: refs/heads/master
Date: 2016-02-22T08:23:04+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.protect/commit/e156eb1d7e81b99a81ea048ef79bd58da55ca73b

Fixed more possible spots where we required an environ on the request.

Again, TestRequests have no environ.
We have not hit these spots in the tests so far, but it might happen.

Files changed:
M plone/protect/auto.py
M plone/protect/utils.py

diff --git a/plone/protect/auto.py b/plone/protect/auto.py
index 6e4d784..3367c91 100644
--- a/plone/protect/auto.py
+++ b/plone/protect/auto.py
@@ -213,7 +213,7 @@ def _check(self):
                 # need to be portlet assignments. XXX needs to be fixed
                 # somehow...
                 safe_oids = []
-                if SAFE_WRITE_KEY in self.request.environ:
+                if SAFE_WRITE_KEY in getattr(self.request, 'environ', {}):
                     safe_oids = self.request.environ[SAFE_WRITE_KEY]
                 safe = True
                 for obj in registered:
diff --git a/plone/protect/utils.py b/plone/protect/utils.py
index d3888e8..ff4fdae 100644
--- a/plone/protect/utils.py
+++ b/plone/protect/utils.py
@@ -71,14 +71,19 @@ def addTokenToUrl(url, req=None, manager=None):
         return url
     if req is None:
         req = getRequest()
-    if not url.startswith(req.SERVER_URL):
+    if req is None or not url.startswith(req.SERVER_URL):
         # only transforms urls to same site
         return url
-    if '_auth_token' not in req.environ:
-        # let's cache this value since this could be called
-        # many times for one request
-        req.environ['_auth_token'] = createToken(manager=manager)
-    token = req.environ['_auth_token']
+    if getattr(req, 'environ', _default) is _default:
+        # TestRequests have no environ.
+        token = createToken(manager=manager)
+    elif '_auth_token' not in req.environ:
+        # Let's cache this value since this could be called
+        # many times for one request.
+        token = createToken(manager=manager)
+        req.environ['_auth_token'] = token
+    else:
+        token = req.environ['_auth_token']
 
     if '_authenticator' not in url:
         if '?' not in url:


Repository: plone.protect


Branch: refs/heads/master
Date: 2016-02-22T07:55:29-06:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.protect/commit/b8d25c320560a2e8b2be4e4d5b5fef885f4977f1

Merge pull request #39 from plone/test-request-missing-environ

Test request missing environ

Files changed:
M CHANGES.rst
M plone/protect/auto.py
M plone/protect/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 9a20ce1..c85ce46 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Fixed AttributeError when calling ``safeWrite`` on a
+  ``TestRequest``, because this has no ``environ.``.  [maurits]
 
 
 3.0.17 (2015-12-07)
diff --git a/plone/protect/auto.py b/plone/protect/auto.py
index 6e4d784..3367c91 100644
--- a/plone/protect/auto.py
+++ b/plone/protect/auto.py
@@ -213,7 +213,7 @@ def _check(self):
                 # need to be portlet assignments. XXX needs to be fixed
                 # somehow...
                 safe_oids = []
-                if SAFE_WRITE_KEY in self.request.environ:
+                if SAFE_WRITE_KEY in getattr(self.request, 'environ', {}):
                     safe_oids = self.request.environ[SAFE_WRITE_KEY]
                 safe = True
                 for obj in registered:
diff --git a/plone/protect/utils.py b/plone/protect/utils.py
index 8476fb9..ff4fdae 100644
--- a/plone/protect/utils.py
+++ b/plone/protect/utils.py
@@ -71,14 +71,19 @@ def addTokenToUrl(url, req=None, manager=None):
         return url
     if req is None:
         req = getRequest()
-    if not url.startswith(req.SERVER_URL):
+    if req is None or not url.startswith(req.SERVER_URL):
         # only transforms urls to same site
         return url
-    if '_auth_token' not in req.environ:
-        # let's cache this value since this could be called
-        # many times for one request
-        req.environ['_auth_token'] = createToken(manager=manager)
-    token = req.environ['_auth_token']
+    if getattr(req, 'environ', _default) is _default:
+        # TestRequests have no environ.
+        token = createToken(manager=manager)
+    elif '_auth_token' not in req.environ:
+        # Let's cache this value since this could be called
+        # many times for one request.
+        token = createToken(manager=manager)
+        req.environ['_auth_token'] = token
+    else:
+        token = req.environ['_auth_token']
 
     if '_authenticator' not in url:
         if '?' not in url:
@@ -110,7 +115,8 @@ def getRoot(context):
 def safeWrite(obj, request=None):
     if request is None:
         request = getRequest()
-    if request is None:
+    if request is None or getattr(request, 'environ', _default) is _default:
+        # Request not found or it is a TestRequest without an environment.
         LOGGER.debug('could not mark object as a safe write')
         return
     if SAFE_WRITE_KEY not in request.environ:
@@ -119,4 +125,4 @@ def safeWrite(obj, request=None):
         if obj._p_oid not in request.environ[SAFE_WRITE_KEY]:
             request.environ[SAFE_WRITE_KEY].append(obj._p_oid)
     except AttributeError:
-        LOGGER.debug('object you attempted to mark safe does not have an oid')
\ No newline at end of file
+        LOGGER.debug('object you attempted to mark safe does not have an oid')


