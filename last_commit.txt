Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-06-11T15:22:18+02:00
Author: Lukas Graf (lukasgraf) <lukas.graf@4teamwork.ch>
Commit: https://github.com/plone/plone.restapi/commit/e1c934a965ad4a60518f4bc1a599616eee51bde6

Fix time freezing in Plone 5.1 tests:

Our patch for ZODB.utils.newTid got made ineffective by
internal API changes in freezegun:

The patch, which was supposed to ensure that ZODB.utils.newTid
always uses the real time functions (never the patched ones)
relied on an attribute 'previous_time_function' being present
on the patched time.time(), in order to recognize time being
patched an access the original, real time function.

That was true for an older version of freezegun, but now it
stows aways references to the original time functions in
module globals in freezegun.api (real_time, real_gmtime, etc).

This change therefore updates the patch to (always) use those
references to the original time functions, and adds a regression
test to guard against future changes in freezegun's API.

Files changed:
A src/plone/restapi/tests/test_time_freezing.py
M src/plone/restapi/testing.py

b'diff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 7f635685..5a584625 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -37,6 +37,7 @@\n import re\n import requests\n import six\n+import time\n \n \n PLONE_VERSION = pkg_resources.parse_version(api.env.plone_version())\n@@ -123,17 +124,19 @@ def tearDown(self):\n DATE_TIME_FIXTURE = DateTimeFixture()\n \n \n-import time  # noqa\n-from persistent.TimeStamp import TimeStamp  # noqa\n+def patchedNewTid(old):  # noqa\n+    """Make sure ZODB.utils.newTid always uses the real time functions\n \n+    instead of the ones possibly patched by freezegun.\n+    This is necessary because ZODB seems to be relying on time being monotonic\n+    for its transaction IDs, and freezing time results in\n+    POSException.ReadConflictErrors.\n+    """\n+    from persistent.TimeStamp import TimeStamp  # noqa\n+    import freezegun  # noqa\n \n-def patchedNewTid(old):  # noqa\n-    if getattr(time.time, "previous_time_function", False):\n-        t = time.time.previous_time_function()\n-        ts = TimeStamp(*time.gmtime.previous_gmtime_function(t)[:5] + (t % 60,))\n-    else:\n-        t = time.time()\n-        ts = TimeStamp(*time.gmtime(t)[:5] + (t % 60,))\n+    t = freezegun.api.real_time()\n+    ts = TimeStamp(*freezegun.api.real_gmtime(t)[:5] + (t % 60,))\n     if old is not None:\n         ts = ts.laterThan(TimeStamp(old))\n     return ts.raw()\ndiff --git a/src/plone/restapi/tests/test_time_freezing.py b/src/plone/restapi/tests/test_time_freezing.py\nnew file mode 100644\nindex 00000000..a35eff6c\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_time_freezing.py\n@@ -0,0 +1,26 @@\n+# -*- coding: utf-8 -*-\n+from freezegun import freeze_time\n+import freezegun\n+import time\n+import unittest\n+\n+\n+class TestTimeFreezing(unittest.TestCase):\n+\n+    def test_freezegun_provides_original_time_functions(self):\n+        """This test guards against future API changes in freezegun.\n+        """\n+        # These module globals in freezegun.api provide access to the\n+        # original time functions.\n+        self.assertTrue(hasattr(freezegun.api, \'real_time\'))\n+        self.assertTrue(hasattr(freezegun.api, \'real_gmtime\'))\n+\n+        # Before freezing time, they should be references to the\n+        # real time functions\n+        self.assertTrue(freezegun.api.real_time is time.time)\n+        self.assertTrue(freezegun.api.real_gmtime is time.gmtime)\n+\n+        # After freezing, we expect them to differ\n+        with freeze_time("2016-10-21 19:00:00"):\n+            self.assertFalse(freezegun.api.real_time is time.time)\n+            self.assertFalse(freezegun.api.real_gmtime is time.gmtime)\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-06-11T16:00:40+02:00
Author: Lukas Graf (lukasgraf) <lukas.graf@4teamwork.ch>
Commit: https://github.com/plone/plone.restapi/commit/3880e3869ec18bb42a033e411e1a8b7d061999cc

Add changelog entry.

Files changed:
A news/745.bugfix

b'diff --git a/news/745.bugfix b/news/745.bugfix\nnew file mode 100644\nindex 00000000..4c2a5565\n--- /dev/null\n+++ b/news/745.bugfix\n@@ -0,0 +1,2 @@\n+Fix time freezing in Plone 5.1 tests.\n+[lgraf]\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-06-12T16:08:35+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/5eaf5c2a04524846fe832ef2846d5d426476b1a9

Merge pull request #747 from plone/lg-fix-plone-5.1-tests-time-freezing

Fix time freezing in Plone 5.1 tests

Files changed:
A news/745.bugfix
A src/plone/restapi/tests/test_time_freezing.py
M src/plone/restapi/testing.py

b'diff --git a/news/745.bugfix b/news/745.bugfix\nnew file mode 100644\nindex 00000000..4c2a5565\n--- /dev/null\n+++ b/news/745.bugfix\n@@ -0,0 +1,2 @@\n+Fix time freezing in Plone 5.1 tests.\n+[lgraf]\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 7f635685..5a584625 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -37,6 +37,7 @@\n import re\n import requests\n import six\n+import time\n \n \n PLONE_VERSION = pkg_resources.parse_version(api.env.plone_version())\n@@ -123,17 +124,19 @@ def tearDown(self):\n DATE_TIME_FIXTURE = DateTimeFixture()\n \n \n-import time  # noqa\n-from persistent.TimeStamp import TimeStamp  # noqa\n+def patchedNewTid(old):  # noqa\n+    """Make sure ZODB.utils.newTid always uses the real time functions\n \n+    instead of the ones possibly patched by freezegun.\n+    This is necessary because ZODB seems to be relying on time being monotonic\n+    for its transaction IDs, and freezing time results in\n+    POSException.ReadConflictErrors.\n+    """\n+    from persistent.TimeStamp import TimeStamp  # noqa\n+    import freezegun  # noqa\n \n-def patchedNewTid(old):  # noqa\n-    if getattr(time.time, "previous_time_function", False):\n-        t = time.time.previous_time_function()\n-        ts = TimeStamp(*time.gmtime.previous_gmtime_function(t)[:5] + (t % 60,))\n-    else:\n-        t = time.time()\n-        ts = TimeStamp(*time.gmtime(t)[:5] + (t % 60,))\n+    t = freezegun.api.real_time()\n+    ts = TimeStamp(*freezegun.api.real_gmtime(t)[:5] + (t % 60,))\n     if old is not None:\n         ts = ts.laterThan(TimeStamp(old))\n     return ts.raw()\ndiff --git a/src/plone/restapi/tests/test_time_freezing.py b/src/plone/restapi/tests/test_time_freezing.py\nnew file mode 100644\nindex 00000000..a35eff6c\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_time_freezing.py\n@@ -0,0 +1,26 @@\n+# -*- coding: utf-8 -*-\n+from freezegun import freeze_time\n+import freezegun\n+import time\n+import unittest\n+\n+\n+class TestTimeFreezing(unittest.TestCase):\n+\n+    def test_freezegun_provides_original_time_functions(self):\n+        """This test guards against future API changes in freezegun.\n+        """\n+        # These module globals in freezegun.api provide access to the\n+        # original time functions.\n+        self.assertTrue(hasattr(freezegun.api, \'real_time\'))\n+        self.assertTrue(hasattr(freezegun.api, \'real_gmtime\'))\n+\n+        # Before freezing time, they should be references to the\n+        # real time functions\n+        self.assertTrue(freezegun.api.real_time is time.time)\n+        self.assertTrue(freezegun.api.real_gmtime is time.gmtime)\n+\n+        # After freezing, we expect them to differ\n+        with freeze_time("2016-10-21 19:00:00"):\n+            self.assertFalse(freezegun.api.real_time is time.time)\n+            self.assertFalse(freezegun.api.real_gmtime is time.gmtime)\n'

