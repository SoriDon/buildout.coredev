Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-25T15:04:35+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/490794f92239fb0a435405b5606f30662948c90a

Fail when renewing invalid authentication tokens.
When renewing an expired or invalid authentication token with ``@login-renew`` fail with a ``401`` error instead of returning a new authentication token.

Files changed:
A news/721.bugfix
M src/plone/restapi/services/auth/renew.py
M src/plone/restapi/tests/test_auth.py

b"diff --git a/news/721.bugfix b/news/721.bugfix\nnew file mode 100644\nindex 00000000..abc387aa\n--- /dev/null\n+++ b/news/721.bugfix\n@@ -0,0 +1,2 @@\n+When renewing an expired or invalid authentication token with ``@login-renew`` fail with a ``401`` error instead of returning a new authentication token.\n+[thet]\ndiff --git a/src/plone/restapi/services/auth/renew.py b/src/plone/restapi/services/auth/renew.py\nindex 19a982e6..258e3b05 100644\n--- a/src/plone/restapi/services/auth/renew.py\n+++ b/src/plone/restapi/services/auth/renew.py\n@@ -32,6 +32,12 @@ def reply(self):\n                          plone.protect.interfaces.IDisableCSRFProtection)\n \n         mtool = getToolByName(self.context, 'portal_membership')\n+        if (bool(mtool.isAnonymousUser())):\n+            # Don't generate authentication tokens for anonymous users.\n+            self.request.response.setStatus(401)\n+            return dict(error=dict(\n+                type='Invalid authentication token',\n+                message='The authentication token is invalid.'))\n         user = mtool.getAuthenticatedMember()\n         payload = {}\n         payload['fullname'] = user.getProperty('fullname')\ndiff --git a/src/plone/restapi/tests/test_auth.py b/src/plone/restapi/tests/test_auth.py\nindex 211a39c1..0d996158 100644\n--- a/src/plone/restapi/tests/test_auth.py\n+++ b/src/plone/restapi/tests/test_auth.py\n@@ -174,6 +174,9 @@ def test_renew_without_pas_plugin_fails(self):\n         self.assertIn('error', res)\n \n     def test_renew_returns_token(self):\n+        self.portal.acl_users.jwt_auth.store_tokens = True\n+        token = self.portal.acl_users.jwt_auth.create_token('admin')\n+        self.request._auth = 'Bearer {}'.format(token)\n         service = self.traverse()\n         res = service.reply()\n         self.assertIn('token', res)\n@@ -187,3 +190,17 @@ def test_renew_deletes_old_token(self):\n         self.assertIn('token', res)\n         self.assertEqual(\n             1, len(self.portal.acl_users.jwt_auth._tokens['admin']))\n+\n+    def test_renew_fails_on_invalid_token(self):\n+        token = 'this is an invalid token'\n+        self.request._auth = 'Bearer {}'.format(token)\n+        service = self.traverse()\n+        res = service.reply()\n+        self.assertEqual(\n+            service.request.response.status,\n+            401\n+        )\n+        self.assertEqual(\n+            res['error']['type'],\n+            'Invalid authentication token'\n+        )\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-05-07T16:02:02+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/806459c047d15181e2e347f03e596ab59f9ed1ac

Merge pull request #722 from plone/thet-fix721

Fail when renewing invalid authentication tokens.

Files changed:
A news/721.bugfix
M src/plone/restapi/services/auth/renew.py
M src/plone/restapi/tests/test_auth.py

b"diff --git a/news/721.bugfix b/news/721.bugfix\nnew file mode 100644\nindex 00000000..abc387aa\n--- /dev/null\n+++ b/news/721.bugfix\n@@ -0,0 +1,2 @@\n+When renewing an expired or invalid authentication token with ``@login-renew`` fail with a ``401`` error instead of returning a new authentication token.\n+[thet]\ndiff --git a/src/plone/restapi/services/auth/renew.py b/src/plone/restapi/services/auth/renew.py\nindex 19a982e6..258e3b05 100644\n--- a/src/plone/restapi/services/auth/renew.py\n+++ b/src/plone/restapi/services/auth/renew.py\n@@ -32,6 +32,12 @@ def reply(self):\n                          plone.protect.interfaces.IDisableCSRFProtection)\n \n         mtool = getToolByName(self.context, 'portal_membership')\n+        if (bool(mtool.isAnonymousUser())):\n+            # Don't generate authentication tokens for anonymous users.\n+            self.request.response.setStatus(401)\n+            return dict(error=dict(\n+                type='Invalid authentication token',\n+                message='The authentication token is invalid.'))\n         user = mtool.getAuthenticatedMember()\n         payload = {}\n         payload['fullname'] = user.getProperty('fullname')\ndiff --git a/src/plone/restapi/tests/test_auth.py b/src/plone/restapi/tests/test_auth.py\nindex 211a39c1..0d996158 100644\n--- a/src/plone/restapi/tests/test_auth.py\n+++ b/src/plone/restapi/tests/test_auth.py\n@@ -174,6 +174,9 @@ def test_renew_without_pas_plugin_fails(self):\n         self.assertIn('error', res)\n \n     def test_renew_returns_token(self):\n+        self.portal.acl_users.jwt_auth.store_tokens = True\n+        token = self.portal.acl_users.jwt_auth.create_token('admin')\n+        self.request._auth = 'Bearer {}'.format(token)\n         service = self.traverse()\n         res = service.reply()\n         self.assertIn('token', res)\n@@ -187,3 +190,17 @@ def test_renew_deletes_old_token(self):\n         self.assertIn('token', res)\n         self.assertEqual(\n             1, len(self.portal.acl_users.jwt_auth._tokens['admin']))\n+\n+    def test_renew_fails_on_invalid_token(self):\n+        token = 'this is an invalid token'\n+        self.request._auth = 'Bearer {}'.format(token)\n+        service = self.traverse()\n+        res = service.reply()\n+        self.assertEqual(\n+            service.request.response.status,\n+            401\n+        )\n+        self.assertEqual(\n+            res['error']['type'],\n+            'Invalid authentication token'\n+        )\n"

