Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-08-31T13:15:44+02:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/6e21d2e1257a320a4f72416cdff925b9c0b3c51e

Generalize the last bugfix solution for searching the userid on password reset requests, matching it with Plone's one.

Files changed:
M CHANGES.rst
M src/plone/restapi/services/users/add.py
M src/plone/restapi/tests/test_services_users.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 0be59b4e..0e671479 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,7 +4,12 @@ Changelog\n 3.4.4 (unreleased)\n ------------------\n \n-- Nothing changed yet.\n+Bugfixes:\n+\n+- Generalize the last bugfix solution for searching the userid on password\n+  reset requests, matching it with Plone\'s one. This covers all the request\n+  use cases.\n+  [sneridagh]\n \n \n 3.4.3 (2018-08-30)\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex 5d70e576..d9103c0f 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -267,7 +267,7 @@ def can_add_member(self):\n \n     def update_password(self, data):\n         username = self.params[0]\n-        target_user = self._get_user(username)\n+        target_user = self._get_user_by_login_name(username)\n         reset_token = data.get(\'reset_token\', None)\n         old_password = data.get(\'old_password\', None)\n         new_password = data.get(\'new_password\', None)\n@@ -277,16 +277,8 @@ def update_password(self, data):\n         pwt = getToolByName(self.context, \'portal_password_reset\')\n \n         if target_user is None:\n-            portal = getSite()\n-            security = getAdapter(portal, ISecuritySchema)\n-            if PLONE5 and security.use_uuid_as_userid:\n-                target_user = self._get_user_by_login_name(username)\n-                if target_user is None:\n-                    self.request.response.setStatus(404)\n-                    return\n-            else:\n-                self.request.response.setStatus(404)\n-                return\n+            self.request.response.setStatus(404)\n+            return\n \n         # Send password reset mail\n         if data.keys() == []:\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 0602a1d4..93d59ebf 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -687,6 +687,39 @@ def test_reset_with_uuid_as_userid_and_login_email_using_mail(self):\n \n         self.assertEqual(response.status_code, 200)\n \n+    def test_reset_and_login_email_using_mail(self):\n+        # enable use_email_as_login\n+        security_settings = getAdapter(self.portal, ISecuritySchema)\n+        security_settings.use_email_as_login = True\n+        transaction.commit()\n+\n+        response = self.api_session.post(\n+            \'/@users\',\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": "secret"\n+            },\n+        )\n+        transaction.commit()\n+\n+        self.assertEqual(201, response.status_code)\n+        user_id = response.json()[\'id\']\n+        user = api.user.get(userid=user_id)\n+        self.assertTrue(user)\n+\n+        reset_tool = getToolByName(self.portal, \'portal_password_reset\')\n+        reset_info = reset_tool.requestReset(user.id)\n+        token = reset_info[\'randomstring\']\n+        transaction.commit()\n+\n+        payload = {\'reset_token\': token,\n+                   \'new_password\': \'new_password\'}\n+        response = self.api_session.post(\n+            \'/@users/{}/reset-password\'.format(user.getUserName()),\n+            json=payload)\n+\n+        self.assertEqual(response.status_code, 200)\n+\n     def test_delete_user(self):\n         response = self.api_session.delete(\'/@users/noam\')\n         transaction.commit()\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-08-31T13:44:55+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/143546ebaff54480f08fff2dfbf0d658c2dd4b1e

Merge pull request #612 from plone/fix-generalize-login-name-searches-password-reset-requests

Generalize the last bugfix solution for searching the userid on passwâ€¦

Files changed:
M CHANGES.rst
M src/plone/restapi/services/users/add.py
M src/plone/restapi/tests/test_services_users.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 0be59b4e..0e671479 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,7 +4,12 @@ Changelog\n 3.4.4 (unreleased)\n ------------------\n \n-- Nothing changed yet.\n+Bugfixes:\n+\n+- Generalize the last bugfix solution for searching the userid on password\n+  reset requests, matching it with Plone\'s one. This covers all the request\n+  use cases.\n+  [sneridagh]\n \n \n 3.4.3 (2018-08-30)\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex 5d70e576..d9103c0f 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -267,7 +267,7 @@ def can_add_member(self):\n \n     def update_password(self, data):\n         username = self.params[0]\n-        target_user = self._get_user(username)\n+        target_user = self._get_user_by_login_name(username)\n         reset_token = data.get(\'reset_token\', None)\n         old_password = data.get(\'old_password\', None)\n         new_password = data.get(\'new_password\', None)\n@@ -277,16 +277,8 @@ def update_password(self, data):\n         pwt = getToolByName(self.context, \'portal_password_reset\')\n \n         if target_user is None:\n-            portal = getSite()\n-            security = getAdapter(portal, ISecuritySchema)\n-            if PLONE5 and security.use_uuid_as_userid:\n-                target_user = self._get_user_by_login_name(username)\n-                if target_user is None:\n-                    self.request.response.setStatus(404)\n-                    return\n-            else:\n-                self.request.response.setStatus(404)\n-                return\n+            self.request.response.setStatus(404)\n+            return\n \n         # Send password reset mail\n         if data.keys() == []:\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 0602a1d4..93d59ebf 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -687,6 +687,39 @@ def test_reset_with_uuid_as_userid_and_login_email_using_mail(self):\n \n         self.assertEqual(response.status_code, 200)\n \n+    def test_reset_and_login_email_using_mail(self):\n+        # enable use_email_as_login\n+        security_settings = getAdapter(self.portal, ISecuritySchema)\n+        security_settings.use_email_as_login = True\n+        transaction.commit()\n+\n+        response = self.api_session.post(\n+            \'/@users\',\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": "secret"\n+            },\n+        )\n+        transaction.commit()\n+\n+        self.assertEqual(201, response.status_code)\n+        user_id = response.json()[\'id\']\n+        user = api.user.get(userid=user_id)\n+        self.assertTrue(user)\n+\n+        reset_tool = getToolByName(self.portal, \'portal_password_reset\')\n+        reset_info = reset_tool.requestReset(user.id)\n+        token = reset_info[\'randomstring\']\n+        transaction.commit()\n+\n+        payload = {\'reset_token\': token,\n+                   \'new_password\': \'new_password\'}\n+        response = self.api_session.post(\n+            \'/@users/{}/reset-password\'.format(user.getUserName()),\n+            json=payload)\n+\n+        self.assertEqual(response.status_code, 200)\n+\n     def test_delete_user(self):\n         response = self.api_session.delete(\'/@users/noam\')\n         transaction.commit()\n'

