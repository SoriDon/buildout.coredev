Repository: plone.app.viewletmanager


Branch: refs/heads/master
Date: 2023-03-17T23:33:06+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/ed561afd5034681d824e8ddb509866db05906e9f

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/b2d5d4a5.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..d4a62f1\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "b2d5d4a5"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..582f8ac\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/b2d5d4a5.internal b/news/b2d5d4a5.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/b2d5d4a5.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 526aeb2..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..b65e34f\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.app.viewletmanager\n+extras =\n+    test\n'

Repository: plone.app.viewletmanager


Branch: refs/heads/master
Date: 2023-03-17T23:37:32+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/eae135d121c4ec777a6a7a2356f3b4dfd745d866

chore: pyupgrade

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/viewletmanager/exportimport/storage.py
M plone/app/viewletmanager/interfaces.py
M plone/app/viewletmanager/manager.py
M plone/app/viewletmanager/storage.py
M plone/app/viewletmanager/testing.py
M plone/app/viewletmanager/tests/test_docs.py
M plone/app/viewletmanager/tests/test_exportimport.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 85880ef..de40ea7 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,7 +1 @@\n-# -*- coding: utf-8 -*-\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+__import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 85880ef..de40ea7 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,7 +1 @@\n-# -*- coding: utf-8 -*-\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+__import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/app/viewletmanager/exportimport/storage.py b/plone/app/viewletmanager/exportimport/storage.py\nindex ca8aeea..4b47ff9 100644\n--- a/plone/app/viewletmanager/exportimport/storage.py\n+++ b/plone/app/viewletmanager/exportimport/storage.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n The following examples would all be added into the viewlets.xml file.\n \n@@ -109,7 +108,7 @@ class ViewletSettingsStorageNodeAdapter(XMLAdapterBase):\n     __used_for__ = IViewletSettingsStorage\n \n     def __init__(self, context, environ):\n-        super(ViewletSettingsStorageNodeAdapter, self).__init__(context,\n+        super().__init__(context,\n                                                                 environ)\n \n         self.skins = [\ndiff --git a/plone/app/viewletmanager/interfaces.py b/plone/app/viewletmanager/interfaces.py\nindex 406649c..eb9f340 100644\n--- a/plone/app/viewletmanager/interfaces.py\n+++ b/plone/app/viewletmanager/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/plone/app/viewletmanager/manager.py b/plone/app/viewletmanager/manager.py\nindex 87cc974..ec29663 100644\n--- a/plone/app/viewletmanager/manager.py\n+++ b/plone/app/viewletmanager/manager.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.ZopeGuards import guarded_hasattr\n from Acquisition import aq_base\n from Acquisition.interfaces import IAcquirer\n@@ -8,8 +7,8 @@\n from plone.app.viewletmanager.interfaces import IViewletSettingsStorage\n from Products.Five import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from six.moves.urllib.parse import parse_qs\n-from six.moves.urllib.parse import urlencode\n+from urllib.parse import parse_qs\n+from urllib.parse import urlencode\n from ZODB.POSException import ConflictError\n from zope.component import getAdapters\n from zope.component import getMultiAdapter\n@@ -26,7 +25,7 @@\n logger = getLogger(\'plone.app.viewletmanager\')\n \n \n-class BaseOrderedViewletManager(object):\n+class BaseOrderedViewletManager:\n \n     # Sometimes viewlets raise errors handled elsewhere -- e.g. for\n     # embedded ploneformgen forms.\n@@ -97,12 +96,10 @@ def render(self):\n                 raise\n             except Exception:\n                 logger.exception(\n-                    \'Error while rendering viewlet-manager "{0}" \'\n+                    \'Error while rendering viewlet-manager "{}" \'\n                     \'using a template\'.format(self.__name__)\n                 )\n-                return u\'error while rendering viewlet-manager {0}\\n\'.format(\n-                    self.__name__\n-                )\n+                return f\'error while rendering viewlet-manager {self.__name__}\\n\'\n         else:\n             html = []\n             for viewlet in self.viewlets:\n@@ -112,16 +109,16 @@ def render(self):\n                     raise\n                 except Exception:\n                     logger.exception(\n-                        \'Error while rendering viewlet-manager={0}, \'\n-                        \'viewlet={1}\'.format(\n+                        \'Error while rendering viewlet-manager={}, \'\n+                        \'viewlet={}\'.format(\n                             self.__name__,\n                             viewlet.__name__\n                         )\n                     )\n                     html.append(\n-                        u\'error while rendering {0}\\n\'.format(viewlet.__name__)\n+                        f\'error while rendering {viewlet.__name__}\\n\'\n                     )\n-            return u"\\n".join(html)\n+            return "\\n".join(html)\n \n \n class OrderedViewletManager(BaseOrderedViewletManager):\n@@ -160,7 +157,7 @@ def render(self):\n             for index, (name, viewlet) in enumerate(viewlets):\n                 if IAcquirer.providedBy(viewlet):\n                     viewlet = viewlet.__of__(viewlet.context)\n-                viewlet_id = "%s:%s" % (self.__name__, name)\n+                viewlet_id = f"{self.__name__}:{name}"\n                 options = {\n                     \'index\': index,\n                     \'name\': name,\n@@ -173,15 +170,15 @@ def render(self):\n                     viewlet.update()\n                     options[\'content\'] = viewlet.render()\n                 else:\n-                    options[\'content\'] = u""\n+                    options[\'content\'] = ""\n                 if index > 0:\n                     prev_viewlet = viewlets[index - 1][0]\n-                    query = {\'move_above\': "%s;%s" % (viewlet_id,\n+                    query = {\'move_above\': "{};{}".format(viewlet_id,\n                                                       prev_viewlet)}\n                     options[\'up_url\'] = query_tmpl % urlencode(query)\n                 if index < (len(viewlets) - 1):\n                     next_viewlet = viewlets[index + 1][0]\n-                    query = {\'move_below\': "%s;%s" % (viewlet_id,\n+                    query = {\'move_below\': "{};{}".format(viewlet_id,\n                                                       next_viewlet)}\n                     options[\'down_url\'] = query_tmpl % urlencode(query)\n                 results.append(options)\ndiff --git a/plone/app/viewletmanager/storage.py b/plone/app/viewletmanager/storage.py\nindex e60f3a7..367a870 100644\n--- a/plone/app/viewletmanager/storage.py\n+++ b/plone/app/viewletmanager/storage.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from persistent import Persistent\n from persistent.dict import PersistentDict\n from plone.app.viewletmanager.interfaces import IViewletSettingsStorage\ndiff --git a/plone/app/viewletmanager/testing.py b/plone/app/viewletmanager/testing.py\nindex 4549f82..6d2f19f 100644\n--- a/plone/app/viewletmanager/testing.py\n+++ b/plone/app/viewletmanager/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PLONE_FIXTURE\n from plone.testing import Layer\ndiff --git a/plone/app/viewletmanager/tests/test_docs.py b/plone/app/viewletmanager/tests/test_docs.py\nindex 8eb03ae..4bc9f0d 100644\n--- a/plone/app/viewletmanager/tests/test_docs.py\n+++ b/plone/app/viewletmanager/tests/test_docs.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.viewletmanager.testing import optionflags\n \n import doctest\n@@ -15,15 +14,12 @@\n \n class Py23DocChecker(doctest.OutputChecker):\n     def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n-        else:\n-            want = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n-            got = re.sub(\n-                \'zope.interface.interfaces.ComponentLookupError\',\n-                \'ComponentLookupError\',\n-                got,\n-            )\n+        want = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n+        got = re.sub(\n+            \'zope.interface.interfaces.ComponentLookupError\',\n+            \'ComponentLookupError\',\n+            got,\n+        )\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \n@@ -31,7 +27,7 @@ def test_suite():\n     suite = unittest.TestSuite()\n     suite.addTests([\n         doctest.DocFileSuite(\n-            \'tests/{0}\'.format(doc_file),\n+            f\'tests/{doc_file}\',\n             package=\'plone.app.viewletmanager\',\n             optionflags=optionflags,\n             checker=Py23DocChecker(),\ndiff --git a/plone/app/viewletmanager/tests/test_exportimport.py b/plone/app/viewletmanager/tests/test_exportimport.py\nindex 0a79e1f..161f81e 100644\n--- a/plone/app/viewletmanager/tests/test_exportimport.py\n+++ b/plone/app/viewletmanager/tests/test_exportimport.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from persistent.dict import PersistentDict\n from plone.app.viewletmanager.exportimport.storage import exportViewletSettingsStorage  # noqa: E501\n from plone.app.viewletmanager.exportimport.storage import importViewletSettingsStorage  # noqa: E501\n@@ -158,11 +157,11 @@ def _verifyImport(self, obj):\n         fancydict = {\'top\': (\'two\', \'three\', \'one\')}\n         hiddendict = {\'top\': (\'two\', )}\n         self.assertEqual(type(obj._order), PersistentDict)\n-        self.failUnless(\'fancy\' in obj._order.keys())\n+        self.assertTrue(\'fancy\' in obj._order.keys())\n         self.assertEqual(type(obj._order[\'fancy\']), PersistentDict)\n         self.assertEqual(dict(obj._order[\'fancy\']), fancydict)\n         self.assertEqual(type(obj._hidden), PersistentDict)\n-        self.failUnless(\'light\' in obj._hidden.keys())\n+        self.assertTrue(\'light\' in obj._hidden.keys())\n         self.assertEqual(type(obj._hidden[\'light\']), PersistentDict)\n         self.assertEqual(dict(obj._hidden[\'light\']), hiddendict)\n \n@@ -560,7 +559,7 @@ def test_syntax_error_reporting(self):\n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(ViewletSettingsStorageXMLAdapterTests))\n-    suite.addTest(unittest.makeSuite(ExportViewletSettingsStorageTests))\n-    suite.addTest(unittest.makeSuite(ImportViewletSettingsStorageTests))\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(ViewletSettingsStorageXMLAdapterTests))\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(ExportViewletSettingsStorageTests))\n+    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(ImportViewletSettingsStorageTests))\n     return suite\ndiff --git a/setup.py b/setup.py\nindex cd26854..2d875a6 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,11 +1,10 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n \n version = \'4.0.1.dev0\'\n \n-long_description = \'{0}\\n{1}\'.format(\n+long_description = \'{}\\n{}\'.format(\n     open(\'README.rst\').read(),\n     open(\'CHANGES.rst\').read()\n )\n'

Repository: plone.app.viewletmanager


Branch: refs/heads/master
Date: 2023-03-17T23:38:46+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/fcc940afc4ccba30b56ccd2923b163f666e16ced

chore: isort

Files changed:
M plone/app/viewletmanager/tests/test_exportimport.py

b'diff --git a/plone/app/viewletmanager/tests/test_exportimport.py b/plone/app/viewletmanager/tests/test_exportimport.py\nindex 161f81e..0b9f515 100644\n--- a/plone/app/viewletmanager/tests/test_exportimport.py\n+++ b/plone/app/viewletmanager/tests/test_exportimport.py\n@@ -1,10 +1,14 @@\n from persistent.dict import PersistentDict\n-from plone.app.viewletmanager.exportimport.storage import exportViewletSettingsStorage  # noqa: E501\n-from plone.app.viewletmanager.exportimport.storage import importViewletSettingsStorage  # noqa: E501\n-from plone.app.viewletmanager.exportimport.storage import ViewletSettingsStorageNodeAdapter  # noqa: E501\n+from plone.app.viewletmanager.exportimport.storage import exportViewletSettingsStorage\n+from plone.app.viewletmanager.exportimport.storage import importViewletSettingsStorage\n+from plone.app.viewletmanager.exportimport.storage import (\n+    ViewletSettingsStorageNodeAdapter,\n+)\n from plone.app.viewletmanager.interfaces import IViewletSettingsStorage\n from plone.app.viewletmanager.storage import ViewletSettingsStorage\n-from plone.app.viewletmanager.testing import PLONE_APP_VIEWLETMANAGER_INTEGRATION_TESTING  # noqa: E501\n+from plone.app.viewletmanager.testing import (\n+    PLONE_APP_VIEWLETMANAGER_INTEGRATION_TESTING,\n+)\n from Products.CMFPlone.exportimport.tests.base import BodyAdapterTestCase\n from Products.GenericSetup.tests.common import BaseRegistryTests\n from Products.GenericSetup.tests.common import DummyExportContext\n'

Repository: plone.app.viewletmanager


Branch: refs/heads/master
Date: 2023-03-17T23:40:53+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/1d0487389e1258b78a9a2b247a12927e0781d178

chore: black

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/viewletmanager/exportimport/storage.py
M plone/app/viewletmanager/interfaces.py
M plone/app/viewletmanager/manager.py
M plone/app/viewletmanager/storage.py
M plone/app/viewletmanager/testing.py
M plone/app/viewletmanager/tests/test_docs.py
M plone/app/viewletmanager/tests/test_exportimport.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/viewletmanager/exportimport/storage.py b/plone/app/viewletmanager/exportimport/storage.py\nindex 4b47ff9..e34c362 100644\n--- a/plone/app/viewletmanager/exportimport/storage.py\n+++ b/plone/app/viewletmanager/exportimport/storage.py\n@@ -63,9 +63,9 @@\n \n def importViewletSettingsStorage(context):\n     """Import viewlet settings."""\n-    logger = context.getLogger(\'plone.app.viewletmanager\')\n+    logger = context.getLogger("plone.app.viewletmanager")\n \n-    body = context.readDataFile(\'viewlets.xml\')\n+    body = context.readDataFile("viewlets.xml")\n     if body is None:\n         return\n \n@@ -80,8 +80,8 @@ def importViewletSettingsStorage(context):\n     try:\n         subdir = context._profile_path\n     except AttributeError:\n-        subdir = \'\'\n-    importer.filename = os.path.join(subdir, \'viewlets.xml\')\n+        subdir = ""\n+    importer.filename = os.path.join(subdir, "viewlets.xml")\n \n     importer.body = body\n     logger.info("Imported.")\n@@ -89,7 +89,7 @@ def importViewletSettingsStorage(context):\n \n def exportViewletSettingsStorage(context):\n     """Export viewlet settings."""\n-    logger = context.getLogger(\'plone.app.viewletmanager\')\n+    logger = context.getLogger("plone.app.viewletmanager")\n \n     storage = queryUtility(IViewletSettingsStorage)\n     if storage is None:\n@@ -100,7 +100,7 @@ def exportViewletSettingsStorage(context):\n         logger.warning("Export adapter missing.")\n         return\n \n-    context.writeDataFile(\'viewlets.xml\', exporter.body, exporter.mime_type)\n+    context.writeDataFile("viewlets.xml", exporter.body, exporter.mime_type)\n     logger.info("Exported.")\n \n \n@@ -108,30 +108,30 @@ class ViewletSettingsStorageNodeAdapter(XMLAdapterBase):\n     __used_for__ = IViewletSettingsStorage\n \n     def __init__(self, context, environ):\n-        super().__init__(context,\n-                                                                environ)\n+        super().__init__(context, environ)\n \n         self.skins = [\n-            skin.token for skin in\n-            getUtility(IVocabularyFactory,\n-                       \'plone.app.vocabularies.Skins\')(self.context)\n+            skin.token\n+            for skin in getUtility(IVocabularyFactory, "plone.app.vocabularies.Skins")(\n+                self.context\n+            )\n         ]\n \n     def _exportNode(self):\n         """\n         Export the object as a DOM node.\n         """\n-        output = self._doc.createElement(\'object\')\n-        for nodename in (\'order\', \'hidden\'):\n-            skins = getattr(self.context, \'_\' + nodename)\n+        output = self._doc.createElement("object")\n+        for nodename in ("order", "hidden"):\n+            skins = getattr(self.context, "_" + nodename)\n             for skin in sorted(skins):\n                 for name in sorted(skins[skin]):\n                     node = self._doc.createElement(nodename)\n-                    node.setAttribute(\'skinname\', skin)\n-                    node.setAttribute(\'manager\', name)\n+                    node.setAttribute("skinname", skin)\n+                    node.setAttribute("manager", name)\n                     for viewlet in skins[skin][name]:\n-                        child = self._doc.createElement(\'viewlet\')\n-                        child.setAttribute(\'name\', viewlet)\n+                        child = self._doc.createElement("viewlet")\n+                        child.setAttribute("name", viewlet)\n                         node.appendChild(child)\n                     output.appendChild(node)\n         return output\n@@ -142,24 +142,22 @@ def _importNode(self, node):\n         """\n         storage = self.context\n         purge = self.environ.shouldPurge()\n-        if node.getAttribute(\'purge\'):\n-            purge = self._convertToBoolean(node.getAttribute(\'purge\'))\n+        if node.getAttribute("purge"):\n+            purge = self._convertToBoolean(node.getAttribute("purge"))\n         if purge:\n             self._purgeViewletSettings()\n         for child in node.childNodes:\n             nodename = child.nodeName\n-            if nodename not in (\'order\', \'hidden\'):\n+            if nodename not in ("order", "hidden"):\n                 continue\n             purgeChild = False\n-            if child.getAttribute(\'purge\'):\n-                purgeChild = self._convertToBoolean(\n-                    child.getAttribute(\'purge\')\n-                )\n-            skinname = child.getAttribute(\'skinname\')\n-            manager = child.getAttribute(\'manager\')\n-            skins = getattr(storage, \'_\' + nodename)\n-\n-            if skinname == \'*\':\n+            if child.getAttribute("purge"):\n+                purgeChild = self._convertToBoolean(child.getAttribute("purge"))\n+            skinname = child.getAttribute("skinname")\n+            manager = child.getAttribute("manager")\n+            skins = getattr(storage, "_" + nodename)\n+\n+            if skinname == "*":\n                 all_skins = set(storage._hidden.keys())\n                 all_skins.update(storage._order.keys())\n                 all_skins.update(self.skins)\n@@ -169,37 +167,37 @@ def _importNode(self, node):\n                     if skinname in skins and not purgeChild:\n                         values = list(skins[skinname].get(manager, []))\n                     values = self._computeValues(values, child)\n-                    if nodename == \'order\':\n+                    if nodename == "order":\n                         storage.setOrder(manager, skinname, tuple(values))\n-                    elif nodename == \'hidden\':\n+                    elif nodename == "hidden":\n                         storage.setHidden(manager, skinname, tuple(values))\n             else:\n                 values = []\n                 if skinname in skins and not purgeChild:\n                     values = list(skins[skinname].get(manager, []))\n-                basename = child.getAttribute(\'based-on\')\n+                basename = child.getAttribute("based-on")\n                 if basename in skins:\n                     oldvalues = values\n                     values = list(skins[basename].get(manager, []))\n                     for value in oldvalues:\n                         if value not in values:\n-                            viewlet = self._doc.createElement(\'viewlet\')\n-                            viewlet.setAttribute(\'name\', value)\n+                            viewlet = self._doc.createElement("viewlet")\n+                            viewlet.setAttribute("name", value)\n                             if oldvalues.index(value) == 0:\n-                                viewlet.setAttribute(\'insert-before\', \'*\')\n+                                viewlet.setAttribute("insert-before", "*")\n                             else:\n                                 pos = oldvalues[oldvalues.index(value) - 1]\n-                                viewlet.setAttribute(\'insert-after\', pos)\n+                                viewlet.setAttribute("insert-after", pos)\n                             child.appendChild(viewlet)\n                 values = self._computeValues(values, child)\n-                if nodename == \'order\':\n+                if nodename == "order":\n                     storage.setOrder(manager, skinname, tuple(values))\n-                elif nodename == \'hidden\':\n+                elif nodename == "hidden":\n                     storage.setHidden(manager, skinname, tuple(values))\n \n-                if child.hasAttribute(\'make_default\'):\n+                if child.hasAttribute("make_default"):\n                     make_default = self._convertToBoolean(\n-                        child.getAttribute(\'make_default\')\n+                        child.getAttribute("make_default")\n                     )\n                     if make_default:\n                         storage.setDefault(manager, skinname)\n@@ -213,15 +211,15 @@ def _purgeViewletSettings(self):\n \n     def _computeValues(self, values, node):\n         for child in node.childNodes:\n-            if child.nodeName != \'viewlet\':\n+            if child.nodeName != "viewlet":\n                 continue\n-            viewlet_name = child.getAttribute(\'name\')\n+            viewlet_name = child.getAttribute("name")\n             if viewlet_name in values:\n                 values.remove(viewlet_name)\n \n-            if child.hasAttribute(\'insert-before\'):\n-                insert_before = child.getAttribute(\'insert-before\')\n-                if insert_before == \'*\':\n+            if child.hasAttribute("insert-before"):\n+                insert_before = child.getAttribute("insert-before")\n+                if insert_before == "*":\n                     values.insert(0, viewlet_name)\n                     continue\n                 else:\n@@ -231,9 +229,9 @@ def _computeValues(self, values, node):\n                         continue\n                     except ValueError:\n                         pass\n-            elif child.hasAttribute(\'insert-after\'):\n-                insert_after = child.getAttribute(\'insert-after\')\n-                if insert_after == \'*\':\n+            elif child.hasAttribute("insert-after"):\n+                insert_after = child.getAttribute("insert-after")\n+                if insert_after == "*":\n                     pass\n                 else:\n                     try:\n@@ -243,7 +241,7 @@ def _computeValues(self, values, node):\n                     except ValueError:\n                         pass\n \n-            if not child.hasAttribute(\'remove\'):\n+            if not child.hasAttribute("remove"):\n                 values.append(viewlet_name)\n \n         return values\ndiff --git a/plone/app/viewletmanager/interfaces.py b/plone/app/viewletmanager/interfaces.py\nindex eb9f340..c7ee0d6 100644\n--- a/plone/app/viewletmanager/interfaces.py\n+++ b/plone/app/viewletmanager/interfaces.py\n@@ -6,19 +6,19 @@ class IViewletSettingsStorage(Interface):\n \n     def getOrder(name, skinname):\n         """Returns tuple with ordered names of viewlets for the given\n-           viewletmanager (name) and skin name."""\n+        viewletmanager (name) and skin name."""\n \n     def setOrder(name, skinname, order):\n         """Takes the tuple of names from ``order`` and stores it for the\n-           given viewletmanager (name) and skin name."""\n+        given viewletmanager (name) and skin name."""\n \n     def getHidden(name, skinname):\n         """Returns tuple with names of hidden viewlets for the given\n-           viewletmanager (name) and skin name."""\n+        viewletmanager (name) and skin name."""\n \n     def setHidden(name, skinname, hidden):\n         """Takes the tuple of names from ``hidden`` and stores it for the\n-           given viewletmanager (name) and skin name."""\n+        given viewletmanager (name) and skin name."""\n \n \n class IViewletManagementView(Interface):\ndiff --git a/plone/app/viewletmanager/manager.py b/plone/app/viewletmanager/manager.py\nindex ec29663..e02e34b 100644\n--- a/plone/app/viewletmanager/manager.py\n+++ b/plone/app/viewletmanager/manager.py\n@@ -22,11 +22,10 @@\n from ZPublisher import Retry\n \n \n-logger = getLogger(\'plone.app.viewletmanager\')\n+logger = getLogger("plone.app.viewletmanager")\n \n \n class BaseOrderedViewletManager:\n-\n     # Sometimes viewlets raise errors handled elsewhere -- e.g. for\n     # embedded ploneformgen forms.\n     # See https://github.com/plone/plone.app.viewletmanager/issues/5\n@@ -55,7 +54,7 @@ def filter(self, viewlets):\n         for name, viewlet in viewlets:\n             if IAcquirer.providedBy(viewlet):\n                 viewlet = viewlet.__of__(viewlet.context)\n-            if name not in hidden and guarded_hasattr(viewlet, \'render\'):\n+            if name not in hidden and guarded_hasattr(viewlet, "render"):\n                 results.append((name, viewlet))\n         return results\n \n@@ -97,9 +96,9 @@ def render(self):\n             except Exception:\n                 logger.exception(\n                     \'Error while rendering viewlet-manager "{}" \'\n-                    \'using a template\'.format(self.__name__)\n+                    "using a template".format(self.__name__)\n                 )\n-                return f\'error while rendering viewlet-manager {self.__name__}\\n\'\n+                return f"error while rendering viewlet-manager {self.__name__}\\n"\n         else:\n             html = []\n             for viewlet in self.viewlets:\n@@ -109,38 +108,33 @@ def render(self):\n                     raise\n                 except Exception:\n                     logger.exception(\n-                        \'Error while rendering viewlet-manager={}, \'\n-                        \'viewlet={}\'.format(\n-                            self.__name__,\n-                            viewlet.__name__\n-                        )\n-                    )\n-                    html.append(\n-                        f\'error while rendering {viewlet.__name__}\\n\'\n+                        "Error while rendering viewlet-manager={}, "\n+                        "viewlet={}".format(self.__name__, viewlet.__name__)\n                     )\n+                    html.append(f"error while rendering {viewlet.__name__}\\n")\n             return "\\n".join(html)\n \n \n class OrderedViewletManager(BaseOrderedViewletManager):\n-    manager_template = ViewPageTemplateFile(\'manage-viewletmanager.pt\')\n+    manager_template = ViewPageTemplateFile("manage-viewletmanager.pt")\n \n     def render(self):\n         """See zope.contentprovider.interfaces.IContentProvider"""\n \n         # check whether we are in the manager view\n         is_managing = False\n-        parent = getattr(self, \'__parent__\', None)\n+        parent = getattr(self, "__parent__", None)\n         while parent is not None:\n             if IViewletManagementView.providedBy(parent):\n                 is_managing = True\n                 break\n-            parent = getattr(parent, \'__parent__\', None)\n+            parent = getattr(parent, "__parent__", None)\n \n         if is_managing:\n             # if we are in the managing view, then fetch all viewlets again\n             viewlets = getAdapters(\n-                (self.context, self.request, self.__parent__, self),\n-                IViewlet)\n+                (self.context, self.request, self.__parent__, self), IViewlet\n+            )\n \n             # sort them first\n             viewlets = self.sort(viewlets)\n@@ -150,8 +144,9 @@ def render(self):\n             hidden = frozenset(storage.getHidden(self.__name__, skinname))\n \n             # then render the ones which are accessible\n-            base_url = str(getMultiAdapter((self.context, self.request),\n-                           name=\'absolute_url\'))\n+            base_url = str(\n+                getMultiAdapter((self.context, self.request), name="absolute_url")\n+            )\n             query_tmpl = "%s/@@manage-viewlets?%%s" % base_url\n             results = []\n             for index, (name, viewlet) in enumerate(viewlets):\n@@ -159,32 +154,30 @@ def render(self):\n                     viewlet = viewlet.__of__(viewlet.context)\n                 viewlet_id = f"{self.__name__}:{name}"\n                 options = {\n-                    \'index\': index,\n-                    \'name\': name,\n-                    \'hidden\': name in hidden,\n-                    \'show_url\': query_tmpl % urlencode({\'show\': viewlet_id}),\n-                    \'hide_url\': query_tmpl % urlencode({\'hide\': viewlet_id}),\n+                    "index": index,\n+                    "name": name,\n+                    "hidden": name in hidden,\n+                    "show_url": query_tmpl % urlencode({"show": viewlet_id}),\n+                    "hide_url": query_tmpl % urlencode({"hide": viewlet_id}),\n                 }\n \n-                if guarded_hasattr(viewlet, \'render\'):\n+                if guarded_hasattr(viewlet, "render"):\n                     viewlet.update()\n-                    options[\'content\'] = viewlet.render()\n+                    options["content"] = viewlet.render()\n                 else:\n-                    options[\'content\'] = ""\n+                    options["content"] = ""\n                 if index > 0:\n                     prev_viewlet = viewlets[index - 1][0]\n-                    query = {\'move_above\': "{};{}".format(viewlet_id,\n-                                                      prev_viewlet)}\n-                    options[\'up_url\'] = query_tmpl % urlencode(query)\n+                    query = {"move_above": f"{viewlet_id};{prev_viewlet}"}\n+                    options["up_url"] = query_tmpl % urlencode(query)\n                 if index < (len(viewlets) - 1):\n                     next_viewlet = viewlets[index + 1][0]\n-                    query = {\'move_below\': "{};{}".format(viewlet_id,\n-                                                      next_viewlet)}\n-                    options[\'down_url\'] = query_tmpl % urlencode(query)\n+                    query = {"move_below": f"{viewlet_id};{next_viewlet}"}\n+                    options["down_url"] = query_tmpl % urlencode(query)\n                 results.append(options)\n \n             self.name = self.__name__\n-            self.normalized_name = self.name.replace(\'.\', \'-\')\n+            self.normalized_name = self.name.replace(".", "-")\n             interface = list(providedBy(self).flattened())[0]\n             self.interface = interface.__identifier__\n \n@@ -197,7 +190,6 @@ def render(self):\n \n @implementer(IViewletManagementView)\n class ManageViewlets(BrowserView):\n-\n     def show(self, manager, viewlet):\n         storage = getUtility(IViewletSettingsStorage)\n         skinname = self.context.getCurrentSkinName()\n@@ -211,17 +203,18 @@ def hide(self, manager, viewlet):\n         skinname = self.context.getCurrentSkinName()\n         hidden = storage.getHidden(manager, skinname)\n         if viewlet not in hidden:\n-            hidden = hidden + (viewlet, )\n+            hidden = hidden + (viewlet,)\n             storage.setHidden(manager, skinname, hidden)\n \n     def _getOrder(self, manager_name):\n         storage = getUtility(IViewletSettingsStorage)\n         skinname = self.context.getCurrentSkinName()\n         manager = queryMultiAdapter(\n-            (self.context, self.request, self), IContentProvider, manager_name)\n+            (self.context, self.request, self), IContentProvider, manager_name\n+        )\n         viewlets = getAdapters(\n-            (manager.context, manager.request, manager.__parent__, manager),\n-            IViewlet)\n+            (manager.context, manager.request, manager.__parent__, manager), IViewlet\n+        )\n         order_by_name = storage.getOrder(manager_name, skinname)\n         # first get the known ones\n         name_map = dict(viewlets)\n@@ -262,35 +255,35 @@ def moveBelow(self, manager, viewlet, dest):\n \n     def __call__(self):\n         base_url = "%s/@@manage-viewlets" % str(\n-            getMultiAdapter((self.context, self.request), name=\'absolute_url\')\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n         )\n-        qs = self.request.get(\'QUERY_STRING\', None)\n+        qs = self.request.get("QUERY_STRING", None)\n         if qs is not None:\n             query = parse_qs(qs)\n-            if \'show\' in query:\n-                for name in query[\'show\']:\n-                    manager, viewlet = name.split(\':\')\n+            if "show" in query:\n+                for name in query["show"]:\n+                    manager, viewlet = name.split(":")\n                     self.show(manager, viewlet)\n                     self.request.response.redirect(base_url)\n-                    return \'\'\n-            if \'hide\' in query:\n-                for name in query[\'hide\']:\n-                    manager, viewlet = name.split(\':\')\n+                    return ""\n+            if "hide" in query:\n+                for name in query["hide"]:\n+                    manager, viewlet = name.split(":")\n                     self.hide(manager, viewlet)\n                     self.request.response.redirect(base_url)\n-                    return \'\'\n-            if \'move_above\' in query:\n-                for name in query[\'move_above\']:\n-                    manager, viewlets = name.split(\':\')\n-                    viewlet, dest = viewlets.split(\';\')\n+                    return ""\n+            if "move_above" in query:\n+                for name in query["move_above"]:\n+                    manager, viewlets = name.split(":")\n+                    viewlet, dest = viewlets.split(";")\n                     self.moveAbove(manager, viewlet, dest)\n                     self.request.response.redirect(base_url)\n-                    return \'\'\n-            if \'move_below\' in query:\n-                for name in query[\'move_below\']:\n-                    manager, viewlets = name.split(\':\')\n-                    viewlet, dest = viewlets.split(\';\')\n+                    return ""\n+            if "move_below" in query:\n+                for name in query["move_below"]:\n+                    manager, viewlets = name.split(":")\n+                    viewlet, dest = viewlets.split(";")\n                     self.moveBelow(manager, viewlet, dest)\n                     self.request.response.redirect(base_url)\n-                    return \'\'\n+                    return ""\n         return self.index()\ndiff --git a/plone/app/viewletmanager/storage.py b/plone/app/viewletmanager/storage.py\nindex 367a870..ce6c22d 100644\n--- a/plone/app/viewletmanager/storage.py\n+++ b/plone/app/viewletmanager/storage.py\n@@ -6,7 +6,6 @@\n \n @implementer(IViewletSettingsStorage)\n class ViewletSettingsStorage(Persistent):\n-\n     def __init__(self):\n         self._order = PersistentDict()\n         self._hidden = PersistentDict()\n@@ -47,7 +46,7 @@ def getDefault(self, name):\n             return self._defaults.get(name)\n         except AttributeError:  # Backward compatibility\n             self._defaults = PersistentDict()\n-            self.setDefault(name, \'Plone Default\')\n+            self.setDefault(name, "Plone Default")\n             return self.getDefault(name)\n \n     def setDefault(self, name, skinname):\ndiff --git a/plone/app/viewletmanager/testing.py b/plone/app/viewletmanager/testing.py\nindex 6d2f19f..b751ef0 100644\n--- a/plone/app/viewletmanager/testing.py\n+++ b/plone/app/viewletmanager/testing.py\n@@ -7,23 +7,21 @@\n \n \n class PloneAppViewletmanagerLayer(Layer):\n-\n-    defaultBases = (PLONE_FIXTURE, )\n+    defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         # Load ZCML\n         import plone.app.viewletmanager\n+\n         xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.app.viewletmanager,\n-            context=configurationContext\n+            "configure.zcml", plone.app.viewletmanager, context=configurationContext\n         )\n \n \n PLONE_APP_VIEWLETMANAGER_FIXTURE = PloneAppViewletmanagerLayer()\n PLONE_APP_VIEWLETMANAGER_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_VIEWLETMANAGER_FIXTURE, ),\n-    name=\'PloneAppViewletmanagerLayer:Integration\'\n+    bases=(PLONE_APP_VIEWLETMANAGER_FIXTURE,),\n+    name="PloneAppViewletmanagerLayer:Integration",\n )\n \n optionflags = doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS\ndiff --git a/plone/app/viewletmanager/tests/test_docs.py b/plone/app/viewletmanager/tests/test_docs.py\nindex 4bc9f0d..7f7e369 100644\n--- a/plone/app/viewletmanager/tests/test_docs.py\n+++ b/plone/app/viewletmanager/tests/test_docs.py\n@@ -7,8 +7,8 @@\n \n \n doc_tests = [\n-    \'storage.rst\',\n-    \'manager.rst\',\n+    "storage.rst",\n+    "manager.rst",\n ]\n \n \n@@ -16,8 +16,8 @@ class Py23DocChecker(doctest.OutputChecker):\n     def check_output(self, want, got, optionflags):\n         want = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n         got = re.sub(\n-            \'zope.interface.interfaces.ComponentLookupError\',\n-            \'ComponentLookupError\',\n+            "zope.interface.interfaces.ComponentLookupError",\n+            "ComponentLookupError",\n             got,\n         )\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n@@ -25,14 +25,16 @@ def check_output(self, want, got, optionflags):\n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        doctest.DocFileSuite(\n-            f\'tests/{doc_file}\',\n-            package=\'plone.app.viewletmanager\',\n-            optionflags=optionflags,\n-            checker=Py23DocChecker(),\n-        )\n-        for doc_file in doc_tests\n-    ])\n+    suite.addTests(\n+        [\n+            doctest.DocFileSuite(\n+                f"tests/{doc_file}",\n+                package="plone.app.viewletmanager",\n+                optionflags=optionflags,\n+                checker=Py23DocChecker(),\n+            )\n+            for doc_file in doc_tests\n+        ]\n+    )\n \n     return suite\ndiff --git a/plone/app/viewletmanager/tests/test_exportimport.py b/plone/app/viewletmanager/tests/test_exportimport.py\nindex 0b9f515..ba93dbd 100644\n--- a/plone/app/viewletmanager/tests/test_exportimport.py\n+++ b/plone/app/viewletmanager/tests/test_exportimport.py\n@@ -20,13 +20,13 @@\n \n \n COMMON_SETUP_ORDER = {\n-    \'basic\': {\'top\': (\'one\', )},\n-    \'fancy\': {\'top\': (\'two\', \'three\', \'one\')},\n-    }\n+    "basic": {"top": ("one",)},\n+    "fancy": {"top": ("two", "three", "one")},\n+}\n \n COMMON_SETUP_HIDDEN = {\n-    \'light\': {\'top\': (\'two\', )},\n-    }\n+    "light": {"top": ("two",)},\n+}\n \n _VIEWLETS_XML = b"""\\\n <?xml version="1.0" encoding="utf-8"?>\n@@ -134,11 +134,10 @@\n \n \n class ViewletSettingsStorageXMLAdapterTests(BodyAdapterTestCase):\n-\n     layer = PLONE_APP_VIEWLETMANAGER_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.site = self.layer[\'portal\']\n+        self.site = self.layer["portal"]\n         sm = self.site.getSiteManager()\n         sm.registerUtility(ViewletSettingsStorage(), IViewletSettingsStorage)\n \n@@ -153,31 +152,30 @@ def _getTargetClass(self):\n         return ViewletSettingsStorageNodeAdapter\n \n     def _populate(self, obj):\n-        obj.setOrder(\'top\', \'fancy\', (\'two\', \'three\', \'one\'))\n-        obj.setOrder(\'top\', \'basic\', (\'one\', ))\n-        obj.setHidden(\'top\', \'light\', (\'two\', ))\n+        obj.setOrder("top", "fancy", ("two", "three", "one"))\n+        obj.setOrder("top", "basic", ("one",))\n+        obj.setHidden("top", "light", ("two",))\n \n     def _verifyImport(self, obj):\n-        fancydict = {\'top\': (\'two\', \'three\', \'one\')}\n-        hiddendict = {\'top\': (\'two\', )}\n+        fancydict = {"top": ("two", "three", "one")}\n+        hiddendict = {"top": ("two",)}\n         self.assertEqual(type(obj._order), PersistentDict)\n-        self.assertTrue(\'fancy\' in obj._order.keys())\n-        self.assertEqual(type(obj._order[\'fancy\']), PersistentDict)\n-        self.assertEqual(dict(obj._order[\'fancy\']), fancydict)\n+        self.assertTrue("fancy" in obj._order.keys())\n+        self.assertEqual(type(obj._order["fancy"]), PersistentDict)\n+        self.assertEqual(dict(obj._order["fancy"]), fancydict)\n         self.assertEqual(type(obj._hidden), PersistentDict)\n-        self.assertTrue(\'light\' in obj._hidden.keys())\n-        self.assertEqual(type(obj._hidden[\'light\']), PersistentDict)\n-        self.assertEqual(dict(obj._hidden[\'light\']), hiddendict)\n+        self.assertTrue("light" in obj._hidden.keys())\n+        self.assertEqual(type(obj._hidden["light"]), PersistentDict)\n+        self.assertEqual(dict(obj._hidden["light"]), hiddendict)\n \n \n class _ViewletSettingsStorageSetup(BaseRegistryTests):\n-\n     layer = PLONE_APP_VIEWLETMANAGER_INTEGRATION_TESTING\n \n     def setUp(self):\n         BaseRegistryTests.setUp(self)\n-        self.app = self.layer[\'app\']\n-        self.site = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.site = self.layer["portal"]\n         sm = self.site.getSiteManager()\n         sm.registerUtility(ViewletSettingsStorage(), IViewletSettingsStorage)\n         self.storage = getUtility(IViewletSettingsStorage)\n@@ -194,29 +192,25 @@ def tearDown(self):\n     def _populateSite(self, order={}, hidden={}):\n         for skinname in sorted(order):\n             for manager in order[skinname].keys():\n-                self.storage.setOrder(manager, skinname,\n-                                      order[skinname][manager])\n+                self.storage.setOrder(manager, skinname, order[skinname][manager])\n \n         for skinname in sorted(hidden):\n             for manager in hidden[skinname].keys():\n-                self.storage.setHidden(manager, skinname,\n-                                       hidden[skinname][manager])\n+                self.storage.setHidden(manager, skinname, hidden[skinname][manager])\n \n \n class ExportViewletSettingsStorageTests(_ViewletSettingsStorageSetup):\n-\n     def test_empty(self):\n         context = DummyExportContext(self.site)\n         exportViewletSettingsStorage(context)\n \n         self.assertEqual(len(context._wrote), 1)\n         filename, text, content_type = context._wrote[0]\n-        self.assertEqual(filename, \'viewlets.xml\')\n+        self.assertEqual(filename, "viewlets.xml")\n         self._compareDOM(text, _EMPTY_EXPORT)\n-        self.assertEqual(content_type, \'text/xml\')\n+        self.assertEqual(content_type, "text/xml")\n \n     def test_normal(self):\n-\n         _ORDER = COMMON_SETUP_ORDER\n         _HIDDEN = COMMON_SETUP_HIDDEN\n         self._populateSite(order=_ORDER, hidden=_HIDDEN)\n@@ -226,13 +220,12 @@ def test_normal(self):\n \n         self.assertEqual(len(context._wrote), 1)\n         filename, text, content_type = context._wrote[0]\n-        self.assertEqual(filename, \'viewlets.xml\')\n+        self.assertEqual(filename, "viewlets.xml")\n         self._compareDOM(text, _VIEWLETS_XML)\n-        self.assertEqual(content_type, \'text/xml\')\n+        self.assertEqual(content_type, "text/xml")\n \n \n class ImportViewletSettingsStorageTests(_ViewletSettingsStorageSetup):\n-\n     _VIEWLETS_XML = _VIEWLETS_XML\n     _EMPTY_EXPORT = _EMPTY_EXPORT\n     _CHILD_PURGE_IMPORT = _CHILD_PURGE_IMPORT\n@@ -251,21 +244,21 @@ def test_empty_default_purge(self):\n \n         site = self.site\n         utility = self.storage\n-        self.assertEqual(len(utility.getOrder(\'top\', \'fancy\')), 3)\n-        self.assertEqual(len(utility.getOrder(\'top\', \'basic\')), 1)\n-        self.assertEqual(len(utility.getHidden(\'top\', \'light\')), 1)\n+        self.assertEqual(len(utility.getOrder("top", "fancy")), 3)\n+        self.assertEqual(len(utility.getOrder("top", "basic")), 1)\n+        self.assertEqual(len(utility.getHidden("top", "light")), 1)\n         # Falls back to \'basic\'\n-        self.assertEqual(len(utility.getOrder(\'top\', \'undefined\')), 1)\n+        self.assertEqual(len(utility.getOrder("top", "undefined")), 1)\n \n         context = DummyImportContext(site)\n-        context._files[\'viewlets.xml\'] = self._EMPTY_EXPORT\n+        context._files["viewlets.xml"] = self._EMPTY_EXPORT\n         importViewletSettingsStorage(context)\n \n-        self.assertEqual(len(utility.getOrder(\'top\', \'fancy\')), 0)\n-        self.assertEqual(len(utility.getOrder(\'top\', \'basic\')), 0)\n-        self.assertEqual(len(utility.getHidden(\'top\', \'light\')), 0)\n+        self.assertEqual(len(utility.getOrder("top", "fancy")), 0)\n+        self.assertEqual(len(utility.getOrder("top", "basic")), 0)\n+        self.assertEqual(len(utility.getHidden("top", "light")), 0)\n         # Falls back to \'basic\'\n-        self.assertEqual(len(utility.getOrder(\'top\', \'undefined\')), 0)\n+        self.assertEqual(len(utility.getOrder("top", "undefined")), 0)\n \n     def test_empty_explicit_purge(self):\n         _ORDER = COMMON_SETUP_ORDER\n@@ -275,21 +268,21 @@ def test_empty_explicit_purge(self):\n         site = self.site\n         utility = self.storage\n \n-        self.assertEqual(len(utility.getOrder(\'top\', \'fancy\')), 3)\n-        self.assertEqual(len(utility.getOrder(\'top\', \'basic\')), 1)\n-        self.assertEqual(len(utility.getHidden(\'top\', \'light\')), 1)\n+        self.assertEqual(len(utility.getOrder("top", "fancy")), 3)\n+        self.assertEqual(len(utility.getOrder("top", "basic")), 1)\n+        self.assertEqual(len(utility.getHidden("top", "light")), 1)\n         # Falls back to \'basic\'\n-        self.assertEqual(len(utility.getOrder(\'top\', \'undefined\')), 1)\n+        self.assertEqual(len(utility.getOrder("top", "undefined")), 1)\n \n         context = DummyImportContext(site, True)\n-        context._files[\'viewlets.xml\'] = self._EMPTY_EXPORT\n+        context._files["viewlets.xml"] = self._EMPTY_EXPORT\n         importViewletSettingsStorage(context)\n \n-        self.assertEqual(len(utility.getOrder(\'top\', \'fancy\')), 0)\n-        self.assertEqual(len(utility.getOrder(\'top\', \'basic\')), 0)\n-        self.assertEqual(len(utility.getHidden(\'top\', \'light\')), 0)\n+        self.assertEqual(len(utility.getOrder("top", "fancy")), 0)\n+        self.assertEqual(len(utility.getOrder("top", "basic")), 0)\n+        self.assertEqual(len(utility.getHidden("top", "light")), 0)\n         # Falls back to \'basic\'\n-        self.assertEqual(len(utility.getOrder(\'top\', \'undefined\')), 0)\n+        self.assertEqual(len(utility.getOrder("top", "undefined")), 0)\n \n     def test_empty_skip_purge(self):\n         _ORDER = COMMON_SETUP_ORDER\n@@ -299,21 +292,21 @@ def test_empty_skip_purge(self):\n         site = self.site\n         utility = self.storage\n \n-        self.assertEqual(len(utility.getOrder(\'top\', \'fancy\')), 3)\n-        self.assertEqual(len(utility.getOrder(\'top\', \'basic\')), 1)\n-        self.assertEqual(len(utility.getHidden(\'top\', \'light\')), 1)\n+        self.assertEqual(len(utility.getOrder("top", "fancy")), 3)\n+        self.assertEqual(len(utility.getOrder("top", "basic")), 1)\n+        self.assertEqual(len(utility.getHidden("top", "light")), 1)\n         # Falls back to \'basic\'\n-        self.assertEqual(len(utility.getOrder(\'top\', \'undefined\')), 1)\n+        self.assertEqual(len(utility.getOrder("top", "undefined")), 1)\n \n         context = DummyImportContext(site, False)\n-        context._files[\'viewlets.xml\'] = self._EMPTY_EXPORT\n+        context._files["viewlets.xml"] = self._EMPTY_EXPORT\n         importViewletSettingsStorage(context)\n \n-        self.assertEqual(len(utility.getOrder(\'top\', \'fancy\')), 3)\n-        self.assertEqual(len(utility.getOrder(\'top\', \'basic\')), 1)\n-        self.assertEqual(len(utility.getHidden(\'top\', \'light\')), 1)\n+        self.assertEqual(len(utility.getOrder("top", "fancy")), 3)\n+        self.assertEqual(len(utility.getOrder("top", "basic")), 1)\n+        self.assertEqual(len(utility.getHidden("top", "light")), 1)\n         # Falls back to \'basic\'\n-        self.assertEqual(len(utility.getOrder(\'top\', \'undefined\')), 1)\n+        self.assertEqual(len(utility.getOrder("top", "undefined")), 1)\n \n     def test_specific_child_purge(self):\n         _ORDER = COMMON_SETUP_ORDER\n@@ -323,25 +316,25 @@ def test_specific_child_purge(self):\n         site = self.site\n         utility = self.storage\n \n-        self.assertEqual(len(utility.getOrder(\'top\', \'fancy\')), 3)\n-        self.assertEqual(len(utility.getOrder(\'top\', \'basic\')), 1)\n-        self.assertEqual(len(utility.getHidden(\'top\', \'light\')), 1)\n+        self.assertEqual(len(utility.getOrder("top", "fancy")), 3)\n+        self.assertEqual(len(utility.getOrder("top", "basic")), 1)\n+        self.assertEqual(len(utility.getHidden("top", "light")), 1)\n         # Falls back to \'basic\'\n-        self.assertEqual(len(utility.getOrder(\'top\', \'undefined\')), 1)\n+        self.assertEqual(len(utility.getOrder("top", "undefined")), 1)\n \n         context = DummyImportContext(site, False)\n-        context._files[\'viewlets.xml\'] = self._CHILD_PURGE_IMPORT\n+        context._files["viewlets.xml"] = self._CHILD_PURGE_IMPORT\n         importViewletSettingsStorage(context)\n \n-        self.assertEqual(len(utility.getOrder(\'top\', \'basic\')), 1)\n-        self.assertEqual(len(utility.getHidden(\'top\', \'light\')), 0)\n+        self.assertEqual(len(utility.getOrder("top", "basic")), 1)\n+        self.assertEqual(len(utility.getHidden("top", "light")), 0)\n         # All of the following fall back to basic because there either\n         # there are not anymore viewlet for the skinname or the skinname\n         # is not found\n-        self.assertEqual(utility._order[\'fancy\'][\'top\'], ())\n-        self.assertEqual(len(utility.getOrder(\'top\', \'fancy\')), 1)\n-        self.assertNotIn(\'undefined\', utility._order)\n-        self.assertEqual(len(utility.getOrder(\'top\', \'undefined\')), 1)\n+        self.assertEqual(utility._order["fancy"]["top"], ())\n+        self.assertEqual(len(utility.getOrder("top", "fancy")), 1)\n+        self.assertNotIn("undefined", utility._order)\n+        self.assertEqual(len(utility.getOrder("top", "undefined")), 1)\n \n     def test_normal(self):\n         site = self.site\n@@ -350,16 +343,14 @@ def test_normal(self):\n         self.assertEqual(len(utility._hidden.keys()), 0)\n \n         context = DummyImportContext(site, False)\n-        context._files[\'viewlets.xml\'] = self._VIEWLETS_XML\n+        context._files["viewlets.xml"] = self._VIEWLETS_XML\n         importViewletSettingsStorage(context)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', ))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one",))\n         # Falls back to \'basic\'\n-        self.assertEqual(utility.getOrder(\'top\', \'undefined (fallback)\'),\n-                         (\'one\', ))\n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'two\', \'three\', \'one\'))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "undefined (fallback)"), ("one",))\n+        self.assertEqual(utility.getOrder("top", "fancy"), ("two", "three", "one"))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n     def test_fragment_skip_purge(self):\n         _ORDER = COMMON_SETUP_ORDER\n@@ -371,24 +362,21 @@ def test_fragment_skip_purge(self):\n         self.assertEqual(len(utility._order.keys()), 2)\n         self.assertEqual(len(utility._hidden.keys()), 1)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'two\', \'three\', \'one\'))\n+        self.assertEqual(utility.getOrder("top", "fancy"), ("two", "three", "one"))\n         # Falls back to \'basic\'\n-        self.assertEqual(utility.getOrder(\'top\', \'undefined (fallback)\'),\n-                         (\'one\', ))\n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', ))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "undefined (fallback)"), ("one",))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one",))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n         context = DummyImportContext(site, False)\n-        context._files[\'viewlets.xml\'] = self._FRAGMENT1_IMPORT\n+        context._files["viewlets.xml"] = self._FRAGMENT1_IMPORT\n         importViewletSettingsStorage(context)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', ))\n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'three\', \'two\', \'one\'))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one",))\n+        self.assertEqual(utility.getOrder("top", "fancy"), ("three", "two", "one"))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n-        context._files[\'viewlets.xml\'] = self._FRAGMENT2_IMPORT\n+        context._files["viewlets.xml"] = self._FRAGMENT2_IMPORT\n         importViewletSettingsStorage(context)\n \n         # as the fragment FRAGMENT2_IMPORT sets the order for all skins\n@@ -399,17 +387,19 @@ def test_fragment_skip_purge(self):\n \n         self.assertEqual(len(utility._hidden.keys()), 1)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'three\', \'four\', \'two\', \'one\'))\n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', \'four\'))\n-        self.assertEqual(utility.getOrder(\'top\', \'light\'), (\'four\', ))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(\n+            utility.getOrder("top", "fancy"), ("three", "four", "two", "one")\n+        )\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one", "four"))\n+        self.assertEqual(utility.getOrder("top", "light"), ("four",))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n-        context._files[\'viewlets.xml\'] = self._FRAGMENT1_IMPORT\n+        context._files["viewlets.xml"] = self._FRAGMENT1_IMPORT\n         importViewletSettingsStorage(context)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'four\', \'three\', \'two\', \'one\'))\n+        self.assertEqual(\n+            utility.getOrder("top", "fancy"), ("four", "three", "two", "one")\n+        )\n \n     def test_fragment3_skip_purge(self):\n         _ORDER = COMMON_SETUP_ORDER\n@@ -421,24 +411,21 @@ def test_fragment3_skip_purge(self):\n         self.assertEqual(len(utility._order.keys()), 2)\n         self.assertEqual(len(utility._hidden.keys()), 1)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'two\', \'three\', \'one\'))\n+        self.assertEqual(utility.getOrder("top", "fancy"), ("two", "three", "one"))\n         # Falls back to \'basic\'\n-        self.assertEqual(utility.getOrder(\'top\', \'undefined (fallback)\'),\n-                         (\'one\',))\n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', ))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "undefined (fallback)"), ("one",))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one",))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n         context = DummyImportContext(site, False)\n-        context._files[\'viewlets.xml\'] = self._FRAGMENT3_IMPORT\n+        context._files["viewlets.xml"] = self._FRAGMENT3_IMPORT\n         importViewletSettingsStorage(context)\n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'),\n-                         (\'three\', \'one\', \'four\'))\n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'three\', \'two\', \'one\', \'four\'))\n-        self.assertEqual(utility.getOrder(\'top\', \'light\'),\n-                         (\'three\', \'four\'))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("three", "one", "four"))\n+        self.assertEqual(\n+            utility.getOrder("top", "fancy"), ("three", "two", "one", "four")\n+        )\n+        self.assertEqual(utility.getOrder("top", "light"), ("three", "four"))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n     def test_fragment4_remove(self):\n         _ORDER = COMMON_SETUP_ORDER\n@@ -450,21 +437,19 @@ def test_fragment4_remove(self):\n         self.assertEqual(len(utility._order.keys()), 2)\n         self.assertEqual(len(utility._hidden.keys()), 1)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'two\', \'three\', \'one\'))\n+        self.assertEqual(utility.getOrder("top", "fancy"), ("two", "three", "one"))\n         # Falls back to \'basic\'\n-        self.assertEqual(utility.getOrder(\'top\', \'undefined (fallback)\'),\n-                         (\'one\', ))\n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', ))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "undefined (fallback)"), ("one",))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one",))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n         context = DummyImportContext(site, False)\n-        context._files[\'viewlets.xml\'] = self._FRAGMENT4_IMPORT\n+        context._files["viewlets.xml"] = self._FRAGMENT4_IMPORT\n         importViewletSettingsStorage(context)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', ))\n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'), (\'two\', \'one\'))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one",))\n+        self.assertEqual(utility.getOrder("top", "fancy"), ("two", "one"))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n     def test_fragment5_based_on(self):\n         _ORDER = COMMON_SETUP_ORDER\n@@ -476,32 +461,26 @@ def test_fragment5_based_on(self):\n         self.assertEqual(len(utility._order.keys()), 2)\n         self.assertEqual(len(utility._hidden.keys()), 1)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'two\', \'three\', \'one\'))\n+        self.assertEqual(utility.getOrder("top", "fancy"), ("two", "three", "one"))\n         # Falls back to \'basic\'\n-        self.assertEqual(utility.getOrder(\'top\', \'undefined (fallback)\'),\n-                         (\'one\',))\n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', ))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "undefined (fallback)"), ("one",))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one",))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n         context = DummyImportContext(site, False)\n-        context._files[\'viewlets.xml\'] = self._FRAGMENT5_IMPORT\n+        context._files["viewlets.xml"] = self._FRAGMENT5_IMPORT\n         importViewletSettingsStorage(context)\n \n         self.assertEqual(len(utility._order.keys()), 5)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'two\', \'three\', \'one\'))\n-        self.assertEqual(utility.getOrder(\'top\', \'existing\'),\n-                         (\'two\', \'three\', \'one\'))\n-        self.assertEqual(utility.getOrder(\'top\', \'new\'),\n-                         (\'three\', \'two\', \'one\'))\n-        self.assertEqual(utility.getOrder(\'top\', \'wrongbase\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "fancy"), ("two", "three", "one"))\n+        self.assertEqual(utility.getOrder("top", "existing"), ("two", "three", "one"))\n+        self.assertEqual(utility.getOrder("top", "new"), ("three", "two", "one"))\n+        self.assertEqual(utility.getOrder("top", "wrongbase"), ("two",))\n         # Falls back to \'basic\'\n-        self.assertEqual(utility.getOrder(\'top\', \'undefined (fallback)\'),\n-                         (\'one\',))\n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', ))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "undefined (fallback)"), ("one",))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one",))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n     def test_fragment6_make_default(self):\n         _ORDER = COMMON_SETUP_ORDER\n@@ -513,21 +492,18 @@ def test_fragment6_make_default(self):\n         self.assertEqual(len(utility._order.keys()), 2)\n         self.assertEqual(len(utility._hidden.keys()), 1)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'two\', \'three\', \'one\'))\n+        self.assertEqual(utility.getOrder("top", "fancy"), ("two", "three", "one"))\n         # Falls back to \'basic\'\n-        self.assertEqual(utility.getOrder(\'top\', \'undefined (fallback)\'),\n-                         (\'one\', ))\n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', ))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "undefined (fallback)"), ("one",))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one",))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n         context = DummyImportContext(site, False)\n-        context._files[\'viewlets.xml\'] = self._FRAGMENT6_IMPORT\n+        context._files["viewlets.xml"] = self._FRAGMENT6_IMPORT\n         importViewletSettingsStorage(context)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'undefined\'),\n-                         (\'one\', \'two\', \'three\'))\n-        self.assertEqual(utility.getHidden(\'top\', \'undefined\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "undefined"), ("one", "two", "three"))\n+        self.assertEqual(utility.getHidden("top", "undefined"), ("two",))\n \n     def test_fragment7_make_default(self):\n         _ORDER = COMMON_SETUP_ORDER\n@@ -540,30 +516,40 @@ def test_fragment7_make_default(self):\n         self.assertEqual(len(utility._order.keys()), 2)\n         self.assertEqual(len(utility._hidden.keys()), 1)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'two\', \'three\', \'one\'))\n+        self.assertEqual(utility.getOrder("top", "fancy"), ("two", "three", "one"))\n         # Falls back to \'basic\'\n-        self.assertEqual(utility.getOrder(\'top\', \'undefined (fallback)\'),\n-                         (\'one\', ))\n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', ))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "undefined (fallback)"), ("one",))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one",))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n         context = DummyImportContext(site, False)\n-        context._files[\'viewlets.xml\'] = self._FRAGMENT7_IMPORT\n+        context._files["viewlets.xml"] = self._FRAGMENT7_IMPORT\n         importViewletSettingsStorage(context)\n-        self.assertEqual(utility.getHidden(\'top\', \'fancy\'), (\'two\', ))\n-        self.assertEqual(utility.getHidden(\'top\', \'basic\'), (\'two\', ))\n+        self.assertEqual(utility.getHidden("top", "fancy"), ("two",))\n+        self.assertEqual(utility.getHidden("top", "basic"), ("two",))\n \n     def test_syntax_error_reporting(self):\n         site = self.site\n         context = DummyImportContext(site, False)\n-        context._files[\'viewlets.xml\'] = """<?xml version="1.0"?>\\n<"""\n+        context._files["viewlets.xml"] = """<?xml version="1.0"?>\\n<"""\n         self.assertRaises(ExpatError, importViewletSettingsStorage, context)\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(ViewletSettingsStorageXMLAdapterTests))\n-    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(ExportViewletSettingsStorageTests))\n-    suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(ImportViewletSettingsStorageTests))\n+    suite.addTest(\n+        unittest.defaultTestLoader.loadTestsFromTestCase(\n+            ViewletSettingsStorageXMLAdapterTests\n+        )\n+    )\n+    suite.addTest(\n+        unittest.defaultTestLoader.loadTestsFromTestCase(\n+            ExportViewletSettingsStorageTests\n+        )\n+    )\n+    suite.addTest(\n+        unittest.defaultTestLoader.loadTestsFromTestCase(\n+            ImportViewletSettingsStorageTests\n+        )\n+    )\n     return suite\ndiff --git a/setup.py b/setup.py\nindex 2d875a6..e66484e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,65 +2,67 @@\n from setuptools import setup\n \n \n-version = \'4.0.1.dev0\'\n+version = "4.0.1.dev0"\n \n-long_description = \'{}\\n{}\'.format(\n-    open(\'README.rst\').read(),\n-    open(\'CHANGES.rst\').read()\n+long_description = "{}\\n{}".format(\n+    open("README.rst").read(), open("CHANGES.rst").read()\n )\n \n extras_require = {\n-    \'test\': [\n-        \'Products.CMFPlone\',\n-        \'plone.app.testing\',\n-        \'six\',\n-        \'zope.publisher\',\n+    "test": [\n+        "Products.CMFPlone",\n+        "plone.app.testing",\n+        "six",\n+        "zope.publisher",\n     ]\n }\n \n install_requires = [\n-    \'Acquisition\',\n-    \'Products.GenericSetup\',\n-    \'ZODB\',\n-    \'Zope\',\n-    \'plone.app.vocabularies\',\n-    \'setuptools\',\n-    \'zope.component\',\n-    \'zope.contentprovider\',\n-    \'zope.interface\',\n-    \'zope.site\',\n-    \'zope.viewlet\',\n+    "Acquisition",\n+    "Products.GenericSetup",\n+    "ZODB",\n+    "Zope",\n+    "plone.app.vocabularies",\n+    "setuptools",\n+    "zope.component",\n+    "zope.contentprovider",\n+    "zope.interface",\n+    "zope.site",\n+    "zope.viewlet",\n ]\n \n setup(\n-    name=\'plone.app.viewletmanager\',\n+    name="plone.app.viewletmanager",\n     version=version,\n-    description=\'Configurable viewlet manager\',\n+    description="Configurable viewlet manager",\n     long_description=long_description,\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'Environment :: Web Environment\',\n-        \'Framework :: Plone\',\n+        "Development Status :: 5 - Production/Stable",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        \'Framework :: Zope\',\n-        \'Framework :: Zope :: 5\',\n-        \'Intended Audience :: Developers\',\n-        \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n-        \'Operating System :: OS Independent\',\n-        \'Programming Language :: Python\',\n+        "Framework :: Zope",\n+        "Framework :: Zope :: 5",\n+        "Intended Audience :: Developers",\n+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'viewlets\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.viewletmanager\',\n-    license=\'GPL version 2\',\n+    keywords="viewlets",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.viewletmanager",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\', ],\n+    namespace_packages=[\n+        "plone",\n+        "plone.app",\n+    ],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=extras_require,\n'

Repository: plone.app.viewletmanager


Branch: refs/heads/master
Date: 2023-03-17T23:41:30+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/f6378634d1780bede81448a5fa3aeee8baedb123

chore: zptlint

Files changed:
M plone/app/viewletmanager/configure.zcml
M plone/app/viewletmanager/manage-viewletmanager.pt
M plone/app/viewletmanager/manage-viewlets.pt

b'diff --git a/plone/app/viewletmanager/configure.zcml b/plone/app/viewletmanager/configure.zcml\nindex c0f62d6..8733efe 100644\n--- a/plone/app/viewletmanager/configure.zcml\n+++ b/plone/app/viewletmanager/configure.zcml\n@@ -1,19 +1,21 @@\n-<configure xmlns="http://namespaces.zope.org/zope"\n-           xmlns:browser="http://namespaces.zope.org/browser"\n-           xmlns:five="http://namespaces.zope.org/five">\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    xmlns:five="http://namespaces.zope.org/five"\n+    >\n \n-    <include package=".exportimport" />\n+  <include package=".exportimport" />\n \n-    <class class=".manager.ManageViewlets">\n-        <implements interface="plone.app.layout.globals.interfaces.IViewView" />\n-    </class>\n+  <class class=".manager.ManageViewlets">\n+    <implements interface="plone.app.layout.globals.interfaces.IViewView" />\n+  </class>\n \n-    <browser:page\n-        for="*"\n-        name="manage-viewlets"\n-        class=".manager.ManageViewlets"\n-        template="manage-viewlets.pt"\n-        permission="cmf.ManagePortal"\n-        />\n+  <browser:page\n+      name="manage-viewlets"\n+      for="*"\n+      class=".manager.ManageViewlets"\n+      template="manage-viewlets.pt"\n+      permission="cmf.ManagePortal"\n+      />\n \n </configure>\ndiff --git a/plone/app/viewletmanager/manage-viewletmanager.pt b/plone/app/viewletmanager/manage-viewletmanager.pt\nindex b8d8343..e5e9aed 100644\n--- a/plone/app/viewletmanager/manage-viewletmanager.pt\n+++ b/plone/app/viewletmanager/manage-viewletmanager.pt\n@@ -1,46 +1,86 @@\n <div class="container mb-3"\n-     tal:define="manager_id view/normalized_name">\n-\n-  <div class="managedViewlets" id="${manager_id}" i18n:domain="plone">\n-\n-    <div class="card" tal:define="auth_token context/@@authenticator/token | nothing">\n+     tal:define="\n+       manager_id view/normalized_name;\n+     "\n+>\n+\n+  <div class="managedViewlets"\n+       id="${manager_id}"\n+       i18n:domain="plone"\n+  >\n+\n+    <div class="card"\n+         tal:define="\n+           auth_token context/@@authenticator/token | nothing;\n+         "\n+    >\n \n       <div class="card-header">\n-        ViewletManager <span class="text-muted" tal:content="view/name">ViewletManager name</span> (<span tal:content="view/interface" />)\n+        ViewletManager\n+        <span class="text-muted"\n+              tal:content="view/name"\n+        >ViewletManager name</span>\n+        (<span tal:content="view/interface"></span>)\n       </div>\n \n       <div class="card-body">\n \n-        <div tal:repeat="viewlet options/viewlets" class="${python:\'viewlet %s\' % (\'hiddenViewlet\' if viewlet[\'hidden\'] else \'\')}">\n+        <div class="${python:\'viewlet %s\' % (\'hiddenViewlet\' if viewlet[\'hidden\'] else \'\')}"\n+             tal:repeat="viewlet options/viewlets"\n+        >\n \n           <div class="card mb-3">\n \n             <div class="card-header d-flex">\n \n               <div class="me-auto">\n-                Viewlet <span class="text-muted" tal:content="viewlet/name">Viewlet name</span> (<span tal:replace="viewlet/index">Index</span>)\n+                Viewlet\n+                <span class="text-muted"\n+                      tal:content="viewlet/name"\n+                >Viewlet name</span>\n+                (<span tal:replace="viewlet/index">Index</span>)\n               </div>\n \n               <a class="btn btn-sm btn-outline-primary mx-1 text-decoration-none pat-inject"\n                  href="${viewlet/up_url}&_authenticator=${auth_token}#${manager_id}"\n-                 tal:condition="viewlet/up_url | nothing">\n-                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up-short" viewBox="0 0 16 16">\n-                  <path fill-rule="evenodd" d="M8 12a.5.5 0 0 0 .5-.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 .5.5z"/>\n+                 tal:condition="viewlet/up_url | nothing"\n+              >\n+                <svg xmlns="http://www.w3.org/2000/svg"\n+                     class="bi bi-arrow-up-short"\n+                     fill="currentColor"\n+                     height="16"\n+                     viewbox="0 0 16 16"\n+                     width="16"\n+                >\n+                  <path d="M8 12a.5.5 0 0 0 .5-.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 .5.5z"\n+                        fill-rule="evenodd"\n+                  ></path>\n                 </svg>\n               </a>\n               <a class="btn btn-sm btn-outline-primary mx-1 text-decoration-none pat-inject"\n                  href="${viewlet/down_url}&_authenticator=${auth_token}#${manager_id}"\n-                 tal:condition="viewlet/down_url | nothing">\n-                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down-short" viewBox="0 0 16 16">\n-                  <path fill-rule="evenodd" d="M8 4a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5A.5.5 0 0 1 8 4z"/>\n+                 tal:condition="viewlet/down_url | nothing"\n+              >\n+                <svg xmlns="http://www.w3.org/2000/svg"\n+                     class="bi bi-arrow-down-short"\n+                     fill="currentColor"\n+                     height="16"\n+                     viewbox="0 0 16 16"\n+                     width="16"\n+                >\n+                  <path d="M8 4a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5A.5.5 0 0 1 8 4z"\n+                        fill-rule="evenodd"\n+                  ></path>\n                 </svg>\n               </a>\n               <a class="btn btn-sm btn-outline-primary mx-1 text-decoration-none pat-inject ${python:\'active\' if not viewlet[\'hidden\'] else \'\'}"\n                  href="${viewlet/hide_url}&_authenticator=${auth_token}#${manager_id}"\n-                 i18n:translate="label_hide_item">Hide</a>\n+                 i18n:translate="label_hide_item"\n+              >Hide</a>\n               <a class="btn btn-sm btn-outline-primary mx-1 text-decoration-none pat-inject ${python:\'active\' if viewlet[\'hidden\'] else \'\'}"\n                  href="${viewlet/show_url}&_authenticator=${auth_token}#${manager_id}"\n-                 i18n:translate="label_show_item">Show</a>\n+                 i18n:translate="label_show_item"\n+              >Show</a>\n \n             </div>\n \ndiff --git a/plone/app/viewletmanager/manage-viewlets.pt b/plone/app/viewletmanager/manage-viewlets.pt\nindex c7b3c6c..10f199d 100644\n--- a/plone/app/viewletmanager/manage-viewlets.pt\n+++ b/plone/app/viewletmanager/manage-viewlets.pt\n@@ -1,16 +1,20 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       lang="en"\n       metal:use-macro="here/main_template/macros/master"\n-      i18n:domain="plone">\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n \n-<body>\n+  <body>\n \n-<metal:main fill-slot="main">\n+    <metal:main fill-slot="main">\n \n-    <style type="text/css" media="screen">\n+      <style media="screen"\n+             type="text/css"\n+      >\n         #portal-top { margin-top: 1em; }\n         #portal-footer-wrapper { background-color: unset; color: unset; text-align: left; padding: 0; }\n         #plone-toolbar { padding-top: 1em; }\n@@ -21,41 +25,45 @@\n         .hiddenViewlet .card {\n             --bs-card-border-color: var(--bs-gray-300);\n         }\n-    </style>\n+      </style>\n \n-    <div class="xcontainer">\n+      <div class="xcontainer">\n \n-        <div tal:replace="structure provider:plone.abovecontenttitle" />\n+        <div tal:replace="structure provider:plone.abovecontenttitle"></div>\n \n         <div class="container my5">\n-          <h1 class="" i18n:translate="label_title">\n+          <h1 class=""\n+              i18n:translate="label_title"\n+          >\n               Title\n           </h1>\n         </div>\n \n-        <div tal:replace="structure provider:plone.belowcontenttitle" />\n+        <div tal:replace="structure provider:plone.belowcontenttitle"></div>\n \n         <div class="container my-5">\n-          <div class="lead" i18n:translate="label_description">\n+          <div class="lead"\n+               i18n:translate="label_description"\n+          >\n               Summary\n           </div>\n         </div>\n \n-        <div tal:replace="structure provider:plone.abovecontentbody" />\n+        <div tal:replace="structure provider:plone.abovecontentbody"></div>\n \n         <div class="container my-5">\n           <div id="content-core">\n-              <p>\n+            <p>\n                   This item does not have any body text, click the edit tab to change it.\n-              </p>\n+            </p>\n           </div>\n         </div>\n \n-        <div tal:replace="structure provider:plone.belowcontentbody" />\n+        <div tal:replace="structure provider:plone.belowcontentbody"></div>\n \n-    </div>\n+      </div>\n \n-</metal:main>\n+    </metal:main>\n \n-</body>\n+  </body>\n </html>\n'

Repository: plone.app.viewletmanager


Branch: refs/heads/master
Date: 2023-03-17T23:42:23+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/7133148b07a016bd5b16f5a3231b295ba877a9d2

feat: pyroma

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex e66484e..0150368 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -59,6 +59,7 @@\n     url="https://pypi.org/project/plone.app.viewletmanager",\n     license="GPL version 2",\n     packages=find_packages(),\n+    python_requires=">=3.8",\n     namespace_packages=[\n         "plone",\n         "plone.app",\n'

Repository: plone.app.viewletmanager


Branch: refs/heads/master
Date: 2023-03-17T23:43:17+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/2a8e40f058b3a19b70fc51e223c6bddf6f2683e9

feat: remove last six usage

Files changed:
M plone/app/viewletmanager/tests/test_docs.py

b'diff --git a/plone/app/viewletmanager/tests/test_docs.py b/plone/app/viewletmanager/tests/test_docs.py\nindex 7f7e369..7e89aa9 100644\n--- a/plone/app/viewletmanager/tests/test_docs.py\n+++ b/plone/app/viewletmanager/tests/test_docs.py\n@@ -1,8 +1,6 @@\n from plone.app.viewletmanager.testing import optionflags\n \n import doctest\n-import re\n-import six\n import unittest\n \n \n@@ -12,17 +10,6 @@\n ]\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        want = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n-        got = re.sub(\n-            "zope.interface.interfaces.ComponentLookupError",\n-            "ComponentLookupError",\n-            got,\n-        )\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     suite = unittest.TestSuite()\n     suite.addTests(\n@@ -31,7 +18,6 @@ def test_suite():\n                 f"tests/{doc_file}",\n                 package="plone.app.viewletmanager",\n                 optionflags=optionflags,\n-                checker=Py23DocChecker(),\n             )\n             for doc_file in doc_tests\n         ]\n'

Repository: plone.app.viewletmanager


Branch: refs/heads/master
Date: 2023-03-17T23:43:56+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/06ff860a7f20263c241b07b7adaa52682c13c9da

feat: flake8

Files changed:
M plone/app/viewletmanager/manager.py

b'diff --git a/plone/app/viewletmanager/manager.py b/plone/app/viewletmanager/manager.py\nindex e02e34b..e1e9876 100644\n--- a/plone/app/viewletmanager/manager.py\n+++ b/plone/app/viewletmanager/manager.py\n@@ -82,7 +82,7 @@ def sort(self, viewlets):\n \n         try:\n             remaining = sorted(name_map.items(), key=lambda x: aq_base(x[1]))\n-        except:\n+        except Exception:\n             remaining = sorted(name_map.items(), key=itemgetter(0))\n         # return both together\n         return result + remaining\n@@ -228,7 +228,7 @@ def _getOrder(self, manager_name):\n         # Copied from Five\n         try:\n             remaining = sorted(name_map.items(), key=lambda x: aq_base(x[1]))\n-        except:\n+        except Exception:\n             remaining = sorted(name_map.items(), key=itemgetter(0))\n \n         return [x[0] for x in result + remaining]\n'

Repository: plone.app.viewletmanager


Branch: refs/heads/master
Date: 2023-03-18T00:02:39+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/3b0d2305dabba1209b7221b9555950f2adf89dcc

feat: adapt tests

Files changed:
M plone/app/viewletmanager/tests/manager.rst
M plone/app/viewletmanager/tests/storage.rst

b"diff --git a/plone/app/viewletmanager/tests/manager.rst b/plone/app/viewletmanager/tests/manager.rst\nindex 975c8de..d97a2db 100644\n--- a/plone/app/viewletmanager/tests/manager.rst\n+++ b/plone/app/viewletmanager/tests/manager.rst\n@@ -54,7 +54,7 @@ Initially there are no viewlets in it.\n \n     >>> manager.update()\n     >>> manager.render()\n-    u''\n+    ''\n \n Now we need some dummy viewlets.\n \n@@ -115,7 +115,7 @@ Now there should be some viewlets.\n \n     >>> manager.update()\n     >>> manager.render()\n-    u'first\\nsecond\\nthird'\n+    'first\\nsecond\\nthird'\n \n Now we should be able to change the order by setting it in the storage.\n \n@@ -123,7 +123,7 @@ Now we should be able to change the order by setting it in the storage.\n \n     >>> manager.update()\n     >>> manager.render()\n-    u'third\\nfirst\\nsecond'\n+    'third\\nfirst\\nsecond'\n \n The default skin should now be that same one for that manager.\n \n@@ -136,7 +136,7 @@ If we change the skin, the default order should apply.\n \n     >>> manager.update()\n     >>> manager.render()\n-    u'third\\nfirst\\nsecond'\n+    'third\\nfirst\\nsecond'\n \n     >>> del content.skin\n \n@@ -146,4 +146,4 @@ We can also hide viewlets.\n \n     >>> manager.update()\n     >>> manager.render()\n-    u'third\\nsecond'\n+    'third\\nsecond'\ndiff --git a/plone/app/viewletmanager/tests/storage.rst b/plone/app/viewletmanager/tests/storage.rst\nindex 04468c9..79dbb31 100644\n--- a/plone/app/viewletmanager/tests/storage.rst\n+++ b/plone/app/viewletmanager/tests/storage.rst\n@@ -60,7 +60,7 @@ The storage is a utility, so test if it works like that.\n     >>> zope.component.getUtility(IViewletSettingsStorage)\n     Traceback (most recent call last):\n         ...\n-    ComponentLookupError: (<InterfaceClass plone.app.viewletmanager.interfaces.IViewletSettingsStorage>, '')\n+    zope.interface.interfaces.ComponentLookupError: (<InterfaceClass plone.app.viewletmanager.interfaces.IViewletSettingsStorage>, '')\n \n     >>> zope.component.provideUtility(storage, IViewletSettingsStorage)\n \n"

Repository: plone.app.viewletmanager


Branch: refs/heads/master
Date: 2023-03-21T20:29:05+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/6fe61efea363d196d79701022bf3b42a02e94007

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 0150368..8a3bdf9 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -12,22 +12,18 @@\n     "test": [\n         "Products.CMFPlone",\n         "plone.app.testing",\n-        "six",\n+        "plone.testing",\n         "zope.publisher",\n     ]\n }\n \n install_requires = [\n-    "Acquisition",\n     "Products.GenericSetup",\n-    "ZODB",\n     "Zope",\n+    "persistent",\n     "plone.app.vocabularies",\n     "setuptools",\n-    "zope.component",\n     "zope.contentprovider",\n-    "zope.interface",\n-    "zope.site",\n     "zope.viewlet",\n ]\n \n'

Repository: plone.app.viewletmanager


Branch: refs/heads/master
Date: 2023-03-21T20:29:32+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/3b1e03b284d837026f6ff12a287681efa25e236a

chore: configure z3c.dependencychecker

Files changed:
M pyproject.toml

b"diff --git a/pyproject.toml b/pyproject.toml\nindex 9eb73f3..09b1f6b 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -60,3 +60,4 @@ Zope = [\n   'Products.CMFDynamicViewFTI', 'zope.deprecation',\n ]\n python-dateutil = ['dateutil']\n+ignore-packages = ['plone.app.vocabularies']\n"

Repository: plone.app.viewletmanager


Branch: refs/heads/master
Date: 2023-03-21T22:17:09+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/f55424d6369b0e0b6841c7da8610a8b1f0806732

Merge pull request #30 from plone/config-with-default-template-d575c76c

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/b2d5d4a5.internal
A tox.ini
M plone/__init__.py
M plone/app/__init__.py
M plone/app/viewletmanager/configure.zcml
M plone/app/viewletmanager/exportimport/storage.py
M plone/app/viewletmanager/interfaces.py
M plone/app/viewletmanager/manage-viewletmanager.pt
M plone/app/viewletmanager/manage-viewlets.pt
M plone/app/viewletmanager/manager.py
M plone/app/viewletmanager/storage.py
M plone/app/viewletmanager/testing.py
M plone/app/viewletmanager/tests/manager.rst
M plone/app/viewletmanager/tests/storage.rst
M plone/app/viewletmanager/tests/test_docs.py
M plone/app/viewletmanager/tests/test_exportimport.py
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..d4a62f1\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "b2d5d4a5"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..582f8ac\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.2\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/b2d5d4a5.internal b/news/b2d5d4a5.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/b2d5d4a5.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 85880ef..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,7 +1 @@\n-# -*- coding: utf-8 -*-\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 85880ef..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,7 +1 @@\n-# -*- coding: utf-8 -*-\n-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n-try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n-except ImportError:\n-    from pkgutil import extend_path\n-    __path__ = extend_path(__path__, __name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/viewletmanager/configure.zcml b/plone/app/viewletmanager/configure.zcml\nindex c0f62d6..8733efe 100644\n--- a/plone/app/viewletmanager/configure.zcml\n+++ b/plone/app/viewletmanager/configure.zcml\n@@ -1,19 +1,21 @@\n-<configure xmlns="http://namespaces.zope.org/zope"\n-           xmlns:browser="http://namespaces.zope.org/browser"\n-           xmlns:five="http://namespaces.zope.org/five">\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:browser="http://namespaces.zope.org/browser"\n+    xmlns:five="http://namespaces.zope.org/five"\n+    >\n \n-    <include package=".exportimport" />\n+  <include package=".exportimport" />\n \n-    <class class=".manager.ManageViewlets">\n-        <implements interface="plone.app.layout.globals.interfaces.IViewView" />\n-    </class>\n+  <class class=".manager.ManageViewlets">\n+    <implements interface="plone.app.layout.globals.interfaces.IViewView" />\n+  </class>\n \n-    <browser:page\n-        for="*"\n-        name="manage-viewlets"\n-        class=".manager.ManageViewlets"\n-        template="manage-viewlets.pt"\n-        permission="cmf.ManagePortal"\n-        />\n+  <browser:page\n+      name="manage-viewlets"\n+      for="*"\n+      class=".manager.ManageViewlets"\n+      template="manage-viewlets.pt"\n+      permission="cmf.ManagePortal"\n+      />\n \n </configure>\ndiff --git a/plone/app/viewletmanager/exportimport/storage.py b/plone/app/viewletmanager/exportimport/storage.py\nindex ca8aeea..e34c362 100644\n--- a/plone/app/viewletmanager/exportimport/storage.py\n+++ b/plone/app/viewletmanager/exportimport/storage.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n The following examples would all be added into the viewlets.xml file.\n \n@@ -64,9 +63,9 @@\n \n def importViewletSettingsStorage(context):\n     """Import viewlet settings."""\n-    logger = context.getLogger(\'plone.app.viewletmanager\')\n+    logger = context.getLogger("plone.app.viewletmanager")\n \n-    body = context.readDataFile(\'viewlets.xml\')\n+    body = context.readDataFile("viewlets.xml")\n     if body is None:\n         return\n \n@@ -81,8 +80,8 @@ def importViewletSettingsStorage(context):\n     try:\n         subdir = context._profile_path\n     except AttributeError:\n-        subdir = \'\'\n-    importer.filename = os.path.join(subdir, \'viewlets.xml\')\n+        subdir = ""\n+    importer.filename = os.path.join(subdir, "viewlets.xml")\n \n     importer.body = body\n     logger.info("Imported.")\n@@ -90,7 +89,7 @@ def importViewletSettingsStorage(context):\n \n def exportViewletSettingsStorage(context):\n     """Export viewlet settings."""\n-    logger = context.getLogger(\'plone.app.viewletmanager\')\n+    logger = context.getLogger("plone.app.viewletmanager")\n \n     storage = queryUtility(IViewletSettingsStorage)\n     if storage is None:\n@@ -101,7 +100,7 @@ def exportViewletSettingsStorage(context):\n         logger.warning("Export adapter missing.")\n         return\n \n-    context.writeDataFile(\'viewlets.xml\', exporter.body, exporter.mime_type)\n+    context.writeDataFile("viewlets.xml", exporter.body, exporter.mime_type)\n     logger.info("Exported.")\n \n \n@@ -109,30 +108,30 @@ class ViewletSettingsStorageNodeAdapter(XMLAdapterBase):\n     __used_for__ = IViewletSettingsStorage\n \n     def __init__(self, context, environ):\n-        super(ViewletSettingsStorageNodeAdapter, self).__init__(context,\n-                                                                environ)\n+        super().__init__(context, environ)\n \n         self.skins = [\n-            skin.token for skin in\n-            getUtility(IVocabularyFactory,\n-                       \'plone.app.vocabularies.Skins\')(self.context)\n+            skin.token\n+            for skin in getUtility(IVocabularyFactory, "plone.app.vocabularies.Skins")(\n+                self.context\n+            )\n         ]\n \n     def _exportNode(self):\n         """\n         Export the object as a DOM node.\n         """\n-        output = self._doc.createElement(\'object\')\n-        for nodename in (\'order\', \'hidden\'):\n-            skins = getattr(self.context, \'_\' + nodename)\n+        output = self._doc.createElement("object")\n+        for nodename in ("order", "hidden"):\n+            skins = getattr(self.context, "_" + nodename)\n             for skin in sorted(skins):\n                 for name in sorted(skins[skin]):\n                     node = self._doc.createElement(nodename)\n-                    node.setAttribute(\'skinname\', skin)\n-                    node.setAttribute(\'manager\', name)\n+                    node.setAttribute("skinname", skin)\n+                    node.setAttribute("manager", name)\n                     for viewlet in skins[skin][name]:\n-                        child = self._doc.createElement(\'viewlet\')\n-                        child.setAttribute(\'name\', viewlet)\n+                        child = self._doc.createElement("viewlet")\n+                        child.setAttribute("name", viewlet)\n                         node.appendChild(child)\n                     output.appendChild(node)\n         return output\n@@ -143,24 +142,22 @@ def _importNode(self, node):\n         """\n         storage = self.context\n         purge = self.environ.shouldPurge()\n-        if node.getAttribute(\'purge\'):\n-            purge = self._convertToBoolean(node.getAttribute(\'purge\'))\n+        if node.getAttribute("purge"):\n+            purge = self._convertToBoolean(node.getAttribute("purge"))\n         if purge:\n             self._purgeViewletSettings()\n         for child in node.childNodes:\n             nodename = child.nodeName\n-            if nodename not in (\'order\', \'hidden\'):\n+            if nodename not in ("order", "hidden"):\n                 continue\n             purgeChild = False\n-            if child.getAttribute(\'purge\'):\n-                purgeChild = self._convertToBoolean(\n-                    child.getAttribute(\'purge\')\n-                )\n-            skinname = child.getAttribute(\'skinname\')\n-            manager = child.getAttribute(\'manager\')\n-            skins = getattr(storage, \'_\' + nodename)\n-\n-            if skinname == \'*\':\n+            if child.getAttribute("purge"):\n+                purgeChild = self._convertToBoolean(child.getAttribute("purge"))\n+            skinname = child.getAttribute("skinname")\n+            manager = child.getAttribute("manager")\n+            skins = getattr(storage, "_" + nodename)\n+\n+            if skinname == "*":\n                 all_skins = set(storage._hidden.keys())\n                 all_skins.update(storage._order.keys())\n                 all_skins.update(self.skins)\n@@ -170,37 +167,37 @@ def _importNode(self, node):\n                     if skinname in skins and not purgeChild:\n                         values = list(skins[skinname].get(manager, []))\n                     values = self._computeValues(values, child)\n-                    if nodename == \'order\':\n+                    if nodename == "order":\n                         storage.setOrder(manager, skinname, tuple(values))\n-                    elif nodename == \'hidden\':\n+                    elif nodename == "hidden":\n                         storage.setHidden(manager, skinname, tuple(values))\n             else:\n                 values = []\n                 if skinname in skins and not purgeChild:\n                     values = list(skins[skinname].get(manager, []))\n-                basename = child.getAttribute(\'based-on\')\n+                basename = child.getAttribute("based-on")\n                 if basename in skins:\n                     oldvalues = values\n                     values = list(skins[basename].get(manager, []))\n                     for value in oldvalues:\n                         if value not in values:\n-                            viewlet = self._doc.createElement(\'viewlet\')\n-                            viewlet.setAttribute(\'name\', value)\n+                            viewlet = self._doc.createElement("viewlet")\n+                            viewlet.setAttribute("name", value)\n                             if oldvalues.index(value) == 0:\n-                                viewlet.setAttribute(\'insert-before\', \'*\')\n+                                viewlet.setAttribute("insert-before", "*")\n                             else:\n                                 pos = oldvalues[oldvalues.index(value) - 1]\n-                                viewlet.setAttribute(\'insert-after\', pos)\n+                                viewlet.setAttribute("insert-after", pos)\n                             child.appendChild(viewlet)\n                 values = self._computeValues(values, child)\n-                if nodename == \'order\':\n+                if nodename == "order":\n                     storage.setOrder(manager, skinname, tuple(values))\n-                elif nodename == \'hidden\':\n+                elif nodename == "hidden":\n                     storage.setHidden(manager, skinname, tuple(values))\n \n-                if child.hasAttribute(\'make_default\'):\n+                if child.hasAttribute("make_default"):\n                     make_default = self._convertToBoolean(\n-                        child.getAttribute(\'make_default\')\n+                        child.getAttribute("make_default")\n                     )\n                     if make_default:\n                         storage.setDefault(manager, skinname)\n@@ -214,15 +211,15 @@ def _purgeViewletSettings(self):\n \n     def _computeValues(self, values, node):\n         for child in node.childNodes:\n-            if child.nodeName != \'viewlet\':\n+            if child.nodeName != "viewlet":\n                 continue\n-            viewlet_name = child.getAttribute(\'name\')\n+            viewlet_name = child.getAttribute("name")\n             if viewlet_name in values:\n                 values.remove(viewlet_name)\n \n-            if child.hasAttribute(\'insert-before\'):\n-                insert_before = child.getAttribute(\'insert-before\')\n-                if insert_before == \'*\':\n+            if child.hasAttribute("insert-before"):\n+                insert_before = child.getAttribute("insert-before")\n+                if insert_before == "*":\n                     values.insert(0, viewlet_name)\n                     continue\n                 else:\n@@ -232,9 +229,9 @@ def _computeValues(self, values, node):\n                         continue\n                     except ValueError:\n                         pass\n-            elif child.hasAttribute(\'insert-after\'):\n-                insert_after = child.getAttribute(\'insert-after\')\n-                if insert_after == \'*\':\n+            elif child.hasAttribute("insert-after"):\n+                insert_after = child.getAttribute("insert-after")\n+                if insert_after == "*":\n                     pass\n                 else:\n                     try:\n@@ -244,7 +241,7 @@ def _computeValues(self, values, node):\n                     except ValueError:\n                         pass\n \n-            if not child.hasAttribute(\'remove\'):\n+            if not child.hasAttribute("remove"):\n                 values.append(viewlet_name)\n \n         return values\ndiff --git a/plone/app/viewletmanager/interfaces.py b/plone/app/viewletmanager/interfaces.py\nindex 406649c..c7ee0d6 100644\n--- a/plone/app/viewletmanager/interfaces.py\n+++ b/plone/app/viewletmanager/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \n@@ -7,19 +6,19 @@ class IViewletSettingsStorage(Interface):\n \n     def getOrder(name, skinname):\n         """Returns tuple with ordered names of viewlets for the given\n-           viewletmanager (name) and skin name."""\n+        viewletmanager (name) and skin name."""\n \n     def setOrder(name, skinname, order):\n         """Takes the tuple of names from ``order`` and stores it for the\n-           given viewletmanager (name) and skin name."""\n+        given viewletmanager (name) and skin name."""\n \n     def getHidden(name, skinname):\n         """Returns tuple with names of hidden viewlets for the given\n-           viewletmanager (name) and skin name."""\n+        viewletmanager (name) and skin name."""\n \n     def setHidden(name, skinname, hidden):\n         """Takes the tuple of names from ``hidden`` and stores it for the\n-           given viewletmanager (name) and skin name."""\n+        given viewletmanager (name) and skin name."""\n \n \n class IViewletManagementView(Interface):\ndiff --git a/plone/app/viewletmanager/manage-viewletmanager.pt b/plone/app/viewletmanager/manage-viewletmanager.pt\nindex b8d8343..e5e9aed 100644\n--- a/plone/app/viewletmanager/manage-viewletmanager.pt\n+++ b/plone/app/viewletmanager/manage-viewletmanager.pt\n@@ -1,46 +1,86 @@\n <div class="container mb-3"\n-     tal:define="manager_id view/normalized_name">\n-\n-  <div class="managedViewlets" id="${manager_id}" i18n:domain="plone">\n-\n-    <div class="card" tal:define="auth_token context/@@authenticator/token | nothing">\n+     tal:define="\n+       manager_id view/normalized_name;\n+     "\n+>\n+\n+  <div class="managedViewlets"\n+       id="${manager_id}"\n+       i18n:domain="plone"\n+  >\n+\n+    <div class="card"\n+         tal:define="\n+           auth_token context/@@authenticator/token | nothing;\n+         "\n+    >\n \n       <div class="card-header">\n-        ViewletManager <span class="text-muted" tal:content="view/name">ViewletManager name</span> (<span tal:content="view/interface" />)\n+        ViewletManager\n+        <span class="text-muted"\n+              tal:content="view/name"\n+        >ViewletManager name</span>\n+        (<span tal:content="view/interface"></span>)\n       </div>\n \n       <div class="card-body">\n \n-        <div tal:repeat="viewlet options/viewlets" class="${python:\'viewlet %s\' % (\'hiddenViewlet\' if viewlet[\'hidden\'] else \'\')}">\n+        <div class="${python:\'viewlet %s\' % (\'hiddenViewlet\' if viewlet[\'hidden\'] else \'\')}"\n+             tal:repeat="viewlet options/viewlets"\n+        >\n \n           <div class="card mb-3">\n \n             <div class="card-header d-flex">\n \n               <div class="me-auto">\n-                Viewlet <span class="text-muted" tal:content="viewlet/name">Viewlet name</span> (<span tal:replace="viewlet/index">Index</span>)\n+                Viewlet\n+                <span class="text-muted"\n+                      tal:content="viewlet/name"\n+                >Viewlet name</span>\n+                (<span tal:replace="viewlet/index">Index</span>)\n               </div>\n \n               <a class="btn btn-sm btn-outline-primary mx-1 text-decoration-none pat-inject"\n                  href="${viewlet/up_url}&_authenticator=${auth_token}#${manager_id}"\n-                 tal:condition="viewlet/up_url | nothing">\n-                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up-short" viewBox="0 0 16 16">\n-                  <path fill-rule="evenodd" d="M8 12a.5.5 0 0 0 .5-.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 .5.5z"/>\n+                 tal:condition="viewlet/up_url | nothing"\n+              >\n+                <svg xmlns="http://www.w3.org/2000/svg"\n+                     class="bi bi-arrow-up-short"\n+                     fill="currentColor"\n+                     height="16"\n+                     viewbox="0 0 16 16"\n+                     width="16"\n+                >\n+                  <path d="M8 12a.5.5 0 0 0 .5-.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 .5.5z"\n+                        fill-rule="evenodd"\n+                  ></path>\n                 </svg>\n               </a>\n               <a class="btn btn-sm btn-outline-primary mx-1 text-decoration-none pat-inject"\n                  href="${viewlet/down_url}&_authenticator=${auth_token}#${manager_id}"\n-                 tal:condition="viewlet/down_url | nothing">\n-                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down-short" viewBox="0 0 16 16">\n-                  <path fill-rule="evenodd" d="M8 4a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5A.5.5 0 0 1 8 4z"/>\n+                 tal:condition="viewlet/down_url | nothing"\n+              >\n+                <svg xmlns="http://www.w3.org/2000/svg"\n+                     class="bi bi-arrow-down-short"\n+                     fill="currentColor"\n+                     height="16"\n+                     viewbox="0 0 16 16"\n+                     width="16"\n+                >\n+                  <path d="M8 4a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5A.5.5 0 0 1 8 4z"\n+                        fill-rule="evenodd"\n+                  ></path>\n                 </svg>\n               </a>\n               <a class="btn btn-sm btn-outline-primary mx-1 text-decoration-none pat-inject ${python:\'active\' if not viewlet[\'hidden\'] else \'\'}"\n                  href="${viewlet/hide_url}&_authenticator=${auth_token}#${manager_id}"\n-                 i18n:translate="label_hide_item">Hide</a>\n+                 i18n:translate="label_hide_item"\n+              >Hide</a>\n               <a class="btn btn-sm btn-outline-primary mx-1 text-decoration-none pat-inject ${python:\'active\' if viewlet[\'hidden\'] else \'\'}"\n                  href="${viewlet/show_url}&_authenticator=${auth_token}#${manager_id}"\n-                 i18n:translate="label_show_item">Show</a>\n+                 i18n:translate="label_show_item"\n+              >Show</a>\n \n             </div>\n \ndiff --git a/plone/app/viewletmanager/manage-viewlets.pt b/plone/app/viewletmanager/manage-viewlets.pt\nindex c7b3c6c..10f199d 100644\n--- a/plone/app/viewletmanager/manage-viewlets.pt\n+++ b/plone/app/viewletmanager/manage-viewlets.pt\n@@ -1,16 +1,20 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       lang="en"\n       metal:use-macro="here/main_template/macros/master"\n-      i18n:domain="plone">\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n \n-<body>\n+  <body>\n \n-<metal:main fill-slot="main">\n+    <metal:main fill-slot="main">\n \n-    <style type="text/css" media="screen">\n+      <style media="screen"\n+             type="text/css"\n+      >\n         #portal-top { margin-top: 1em; }\n         #portal-footer-wrapper { background-color: unset; color: unset; text-align: left; padding: 0; }\n         #plone-toolbar { padding-top: 1em; }\n@@ -21,41 +25,45 @@\n         .hiddenViewlet .card {\n             --bs-card-border-color: var(--bs-gray-300);\n         }\n-    </style>\n+      </style>\n \n-    <div class="xcontainer">\n+      <div class="xcontainer">\n \n-        <div tal:replace="structure provider:plone.abovecontenttitle" />\n+        <div tal:replace="structure provider:plone.abovecontenttitle"></div>\n \n         <div class="container my5">\n-          <h1 class="" i18n:translate="label_title">\n+          <h1 class=""\n+              i18n:translate="label_title"\n+          >\n               Title\n           </h1>\n         </div>\n \n-        <div tal:replace="structure provider:plone.belowcontenttitle" />\n+        <div tal:replace="structure provider:plone.belowcontenttitle"></div>\n \n         <div class="container my-5">\n-          <div class="lead" i18n:translate="label_description">\n+          <div class="lead"\n+               i18n:translate="label_description"\n+          >\n               Summary\n           </div>\n         </div>\n \n-        <div tal:replace="structure provider:plone.abovecontentbody" />\n+        <div tal:replace="structure provider:plone.abovecontentbody"></div>\n \n         <div class="container my-5">\n           <div id="content-core">\n-              <p>\n+            <p>\n                   This item does not have any body text, click the edit tab to change it.\n-              </p>\n+            </p>\n           </div>\n         </div>\n \n-        <div tal:replace="structure provider:plone.belowcontentbody" />\n+        <div tal:replace="structure provider:plone.belowcontentbody"></div>\n \n-    </div>\n+      </div>\n \n-</metal:main>\n+    </metal:main>\n \n-</body>\n+  </body>\n </html>\ndiff --git a/plone/app/viewletmanager/manager.py b/plone/app/viewletmanager/manager.py\nindex 87cc974..e1e9876 100644\n--- a/plone/app/viewletmanager/manager.py\n+++ b/plone/app/viewletmanager/manager.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.ZopeGuards import guarded_hasattr\n from Acquisition import aq_base\n from Acquisition.interfaces import IAcquirer\n@@ -8,8 +7,8 @@\n from plone.app.viewletmanager.interfaces import IViewletSettingsStorage\n from Products.Five import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from six.moves.urllib.parse import parse_qs\n-from six.moves.urllib.parse import urlencode\n+from urllib.parse import parse_qs\n+from urllib.parse import urlencode\n from ZODB.POSException import ConflictError\n from zope.component import getAdapters\n from zope.component import getMultiAdapter\n@@ -23,11 +22,10 @@\n from ZPublisher import Retry\n \n \n-logger = getLogger(\'plone.app.viewletmanager\')\n+logger = getLogger("plone.app.viewletmanager")\n \n \n-class BaseOrderedViewletManager(object):\n-\n+class BaseOrderedViewletManager:\n     # Sometimes viewlets raise errors handled elsewhere -- e.g. for\n     # embedded ploneformgen forms.\n     # See https://github.com/plone/plone.app.viewletmanager/issues/5\n@@ -56,7 +54,7 @@ def filter(self, viewlets):\n         for name, viewlet in viewlets:\n             if IAcquirer.providedBy(viewlet):\n                 viewlet = viewlet.__of__(viewlet.context)\n-            if name not in hidden and guarded_hasattr(viewlet, \'render\'):\n+            if name not in hidden and guarded_hasattr(viewlet, "render"):\n                 results.append((name, viewlet))\n         return results\n \n@@ -84,7 +82,7 @@ def sort(self, viewlets):\n \n         try:\n             remaining = sorted(name_map.items(), key=lambda x: aq_base(x[1]))\n-        except:\n+        except Exception:\n             remaining = sorted(name_map.items(), key=itemgetter(0))\n         # return both together\n         return result + remaining\n@@ -97,12 +95,10 @@ def render(self):\n                 raise\n             except Exception:\n                 logger.exception(\n-                    \'Error while rendering viewlet-manager "{0}" \'\n-                    \'using a template\'.format(self.__name__)\n-                )\n-                return u\'error while rendering viewlet-manager {0}\\n\'.format(\n-                    self.__name__\n+                    \'Error while rendering viewlet-manager "{}" \'\n+                    "using a template".format(self.__name__)\n                 )\n+                return f"error while rendering viewlet-manager {self.__name__}\\n"\n         else:\n             html = []\n             for viewlet in self.viewlets:\n@@ -112,38 +108,33 @@ def render(self):\n                     raise\n                 except Exception:\n                     logger.exception(\n-                        \'Error while rendering viewlet-manager={0}, \'\n-                        \'viewlet={1}\'.format(\n-                            self.__name__,\n-                            viewlet.__name__\n-                        )\n-                    )\n-                    html.append(\n-                        u\'error while rendering {0}\\n\'.format(viewlet.__name__)\n+                        "Error while rendering viewlet-manager={}, "\n+                        "viewlet={}".format(self.__name__, viewlet.__name__)\n                     )\n-            return u"\\n".join(html)\n+                    html.append(f"error while rendering {viewlet.__name__}\\n")\n+            return "\\n".join(html)\n \n \n class OrderedViewletManager(BaseOrderedViewletManager):\n-    manager_template = ViewPageTemplateFile(\'manage-viewletmanager.pt\')\n+    manager_template = ViewPageTemplateFile("manage-viewletmanager.pt")\n \n     def render(self):\n         """See zope.contentprovider.interfaces.IContentProvider"""\n \n         # check whether we are in the manager view\n         is_managing = False\n-        parent = getattr(self, \'__parent__\', None)\n+        parent = getattr(self, "__parent__", None)\n         while parent is not None:\n             if IViewletManagementView.providedBy(parent):\n                 is_managing = True\n                 break\n-            parent = getattr(parent, \'__parent__\', None)\n+            parent = getattr(parent, "__parent__", None)\n \n         if is_managing:\n             # if we are in the managing view, then fetch all viewlets again\n             viewlets = getAdapters(\n-                (self.context, self.request, self.__parent__, self),\n-                IViewlet)\n+                (self.context, self.request, self.__parent__, self), IViewlet\n+            )\n \n             # sort them first\n             viewlets = self.sort(viewlets)\n@@ -153,41 +144,40 @@ def render(self):\n             hidden = frozenset(storage.getHidden(self.__name__, skinname))\n \n             # then render the ones which are accessible\n-            base_url = str(getMultiAdapter((self.context, self.request),\n-                           name=\'absolute_url\'))\n+            base_url = str(\n+                getMultiAdapter((self.context, self.request), name="absolute_url")\n+            )\n             query_tmpl = "%s/@@manage-viewlets?%%s" % base_url\n             results = []\n             for index, (name, viewlet) in enumerate(viewlets):\n                 if IAcquirer.providedBy(viewlet):\n                     viewlet = viewlet.__of__(viewlet.context)\n-                viewlet_id = "%s:%s" % (self.__name__, name)\n+                viewlet_id = f"{self.__name__}:{name}"\n                 options = {\n-                    \'index\': index,\n-                    \'name\': name,\n-                    \'hidden\': name in hidden,\n-                    \'show_url\': query_tmpl % urlencode({\'show\': viewlet_id}),\n-                    \'hide_url\': query_tmpl % urlencode({\'hide\': viewlet_id}),\n+                    "index": index,\n+                    "name": name,\n+                    "hidden": name in hidden,\n+                    "show_url": query_tmpl % urlencode({"show": viewlet_id}),\n+                    "hide_url": query_tmpl % urlencode({"hide": viewlet_id}),\n                 }\n \n-                if guarded_hasattr(viewlet, \'render\'):\n+                if guarded_hasattr(viewlet, "render"):\n                     viewlet.update()\n-                    options[\'content\'] = viewlet.render()\n+                    options["content"] = viewlet.render()\n                 else:\n-                    options[\'content\'] = u""\n+                    options["content"] = ""\n                 if index > 0:\n                     prev_viewlet = viewlets[index - 1][0]\n-                    query = {\'move_above\': "%s;%s" % (viewlet_id,\n-                                                      prev_viewlet)}\n-                    options[\'up_url\'] = query_tmpl % urlencode(query)\n+                    query = {"move_above": f"{viewlet_id};{prev_viewlet}"}\n+                    options["up_url"] = query_tmpl % urlencode(query)\n                 if index < (len(viewlets) - 1):\n                     next_viewlet = viewlets[index + 1][0]\n-                    query = {\'move_below\': "%s;%s" % (viewlet_id,\n-                                                      next_viewlet)}\n-                    options[\'down_url\'] = query_tmpl % urlencode(query)\n+                    query = {"move_below": f"{viewlet_id};{next_viewlet}"}\n+                    options["down_url"] = query_tmpl % urlencode(query)\n                 results.append(options)\n \n             self.name = self.__name__\n-            self.normalized_name = self.name.replace(\'.\', \'-\')\n+            self.normalized_name = self.name.replace(".", "-")\n             interface = list(providedBy(self).flattened())[0]\n             self.interface = interface.__identifier__\n \n@@ -200,7 +190,6 @@ def render(self):\n \n @implementer(IViewletManagementView)\n class ManageViewlets(BrowserView):\n-\n     def show(self, manager, viewlet):\n         storage = getUtility(IViewletSettingsStorage)\n         skinname = self.context.getCurrentSkinName()\n@@ -214,17 +203,18 @@ def hide(self, manager, viewlet):\n         skinname = self.context.getCurrentSkinName()\n         hidden = storage.getHidden(manager, skinname)\n         if viewlet not in hidden:\n-            hidden = hidden + (viewlet, )\n+            hidden = hidden + (viewlet,)\n             storage.setHidden(manager, skinname, hidden)\n \n     def _getOrder(self, manager_name):\n         storage = getUtility(IViewletSettingsStorage)\n         skinname = self.context.getCurrentSkinName()\n         manager = queryMultiAdapter(\n-            (self.context, self.request, self), IContentProvider, manager_name)\n+            (self.context, self.request, self), IContentProvider, manager_name\n+        )\n         viewlets = getAdapters(\n-            (manager.context, manager.request, manager.__parent__, manager),\n-            IViewlet)\n+            (manager.context, manager.request, manager.__parent__, manager), IViewlet\n+        )\n         order_by_name = storage.getOrder(manager_name, skinname)\n         # first get the known ones\n         name_map = dict(viewlets)\n@@ -238,7 +228,7 @@ def _getOrder(self, manager_name):\n         # Copied from Five\n         try:\n             remaining = sorted(name_map.items(), key=lambda x: aq_base(x[1]))\n-        except:\n+        except Exception:\n             remaining = sorted(name_map.items(), key=itemgetter(0))\n \n         return [x[0] for x in result + remaining]\n@@ -265,35 +255,35 @@ def moveBelow(self, manager, viewlet, dest):\n \n     def __call__(self):\n         base_url = "%s/@@manage-viewlets" % str(\n-            getMultiAdapter((self.context, self.request), name=\'absolute_url\')\n+            getMultiAdapter((self.context, self.request), name="absolute_url")\n         )\n-        qs = self.request.get(\'QUERY_STRING\', None)\n+        qs = self.request.get("QUERY_STRING", None)\n         if qs is not None:\n             query = parse_qs(qs)\n-            if \'show\' in query:\n-                for name in query[\'show\']:\n-                    manager, viewlet = name.split(\':\')\n+            if "show" in query:\n+                for name in query["show"]:\n+                    manager, viewlet = name.split(":")\n                     self.show(manager, viewlet)\n                     self.request.response.redirect(base_url)\n-                    return \'\'\n-            if \'hide\' in query:\n-                for name in query[\'hide\']:\n-                    manager, viewlet = name.split(\':\')\n+                    return ""\n+            if "hide" in query:\n+                for name in query["hide"]:\n+                    manager, viewlet = name.split(":")\n                     self.hide(manager, viewlet)\n                     self.request.response.redirect(base_url)\n-                    return \'\'\n-            if \'move_above\' in query:\n-                for name in query[\'move_above\']:\n-                    manager, viewlets = name.split(\':\')\n-                    viewlet, dest = viewlets.split(\';\')\n+                    return ""\n+            if "move_above" in query:\n+                for name in query["move_above"]:\n+                    manager, viewlets = name.split(":")\n+                    viewlet, dest = viewlets.split(";")\n                     self.moveAbove(manager, viewlet, dest)\n                     self.request.response.redirect(base_url)\n-                    return \'\'\n-            if \'move_below\' in query:\n-                for name in query[\'move_below\']:\n-                    manager, viewlets = name.split(\':\')\n-                    viewlet, dest = viewlets.split(\';\')\n+                    return ""\n+            if "move_below" in query:\n+                for name in query["move_below"]:\n+                    manager, viewlets = name.split(":")\n+                    viewlet, dest = viewlets.split(";")\n                     self.moveBelow(manager, viewlet, dest)\n                     self.request.response.redirect(base_url)\n-                    return \'\'\n+                    return ""\n         return self.index()\ndiff --git a/plone/app/viewletmanager/storage.py b/plone/app/viewletmanager/storage.py\nindex e60f3a7..ce6c22d 100644\n--- a/plone/app/viewletmanager/storage.py\n+++ b/plone/app/viewletmanager/storage.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from persistent import Persistent\n from persistent.dict import PersistentDict\n from plone.app.viewletmanager.interfaces import IViewletSettingsStorage\n@@ -7,7 +6,6 @@\n \n @implementer(IViewletSettingsStorage)\n class ViewletSettingsStorage(Persistent):\n-\n     def __init__(self):\n         self._order = PersistentDict()\n         self._hidden = PersistentDict()\n@@ -48,7 +46,7 @@ def getDefault(self, name):\n             return self._defaults.get(name)\n         except AttributeError:  # Backward compatibility\n             self._defaults = PersistentDict()\n-            self.setDefault(name, \'Plone Default\')\n+            self.setDefault(name, "Plone Default")\n             return self.getDefault(name)\n \n     def setDefault(self, name, skinname):\ndiff --git a/plone/app/viewletmanager/testing.py b/plone/app/viewletmanager/testing.py\nindex 4549f82..b751ef0 100644\n--- a/plone/app/viewletmanager/testing.py\n+++ b/plone/app/viewletmanager/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PLONE_FIXTURE\n from plone.testing import Layer\n@@ -8,23 +7,21 @@\n \n \n class PloneAppViewletmanagerLayer(Layer):\n-\n-    defaultBases = (PLONE_FIXTURE, )\n+    defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         # Load ZCML\n         import plone.app.viewletmanager\n+\n         xmlconfig.file(\n-            \'configure.zcml\',\n-            plone.app.viewletmanager,\n-            context=configurationContext\n+            "configure.zcml", plone.app.viewletmanager, context=configurationContext\n         )\n \n \n PLONE_APP_VIEWLETMANAGER_FIXTURE = PloneAppViewletmanagerLayer()\n PLONE_APP_VIEWLETMANAGER_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_VIEWLETMANAGER_FIXTURE, ),\n-    name=\'PloneAppViewletmanagerLayer:Integration\'\n+    bases=(PLONE_APP_VIEWLETMANAGER_FIXTURE,),\n+    name="PloneAppViewletmanagerLayer:Integration",\n )\n \n optionflags = doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS\ndiff --git a/plone/app/viewletmanager/tests/manager.rst b/plone/app/viewletmanager/tests/manager.rst\nindex 975c8de..d97a2db 100644\n--- a/plone/app/viewletmanager/tests/manager.rst\n+++ b/plone/app/viewletmanager/tests/manager.rst\n@@ -54,7 +54,7 @@ Initially there are no viewlets in it.\n \n     >>> manager.update()\n     >>> manager.render()\n-    u\'\'\n+    \'\'\n \n Now we need some dummy viewlets.\n \n@@ -115,7 +115,7 @@ Now there should be some viewlets.\n \n     >>> manager.update()\n     >>> manager.render()\n-    u\'first\\nsecond\\nthird\'\n+    \'first\\nsecond\\nthird\'\n \n Now we should be able to change the order by setting it in the storage.\n \n@@ -123,7 +123,7 @@ Now we should be able to change the order by setting it in the storage.\n \n     >>> manager.update()\n     >>> manager.render()\n-    u\'third\\nfirst\\nsecond\'\n+    \'third\\nfirst\\nsecond\'\n \n The default skin should now be that same one for that manager.\n \n@@ -136,7 +136,7 @@ If we change the skin, the default order should apply.\n \n     >>> manager.update()\n     >>> manager.render()\n-    u\'third\\nfirst\\nsecond\'\n+    \'third\\nfirst\\nsecond\'\n \n     >>> del content.skin\n \n@@ -146,4 +146,4 @@ We can also hide viewlets.\n \n     >>> manager.update()\n     >>> manager.render()\n-    u\'third\\nsecond\'\n+    \'third\\nsecond\'\ndiff --git a/plone/app/viewletmanager/tests/storage.rst b/plone/app/viewletmanager/tests/storage.rst\nindex 04468c9..79dbb31 100644\n--- a/plone/app/viewletmanager/tests/storage.rst\n+++ b/plone/app/viewletmanager/tests/storage.rst\n@@ -60,7 +60,7 @@ The storage is a utility, so test if it works like that.\n     >>> zope.component.getUtility(IViewletSettingsStorage)\n     Traceback (most recent call last):\n         ...\n-    ComponentLookupError: (<InterfaceClass plone.app.viewletmanager.interfaces.IViewletSettingsStorage>, \'\')\n+    zope.interface.interfaces.ComponentLookupError: (<InterfaceClass plone.app.viewletmanager.interfaces.IViewletSettingsStorage>, \'\')\n \n     >>> zope.component.provideUtility(storage, IViewletSettingsStorage)\n \ndiff --git a/plone/app/viewletmanager/tests/test_docs.py b/plone/app/viewletmanager/tests/test_docs.py\nindex 8eb03ae..7e89aa9 100644\n--- a/plone/app/viewletmanager/tests/test_docs.py\n+++ b/plone/app/viewletmanager/tests/test_docs.py\n@@ -1,42 +1,26 @@\n-# -*- coding: utf-8 -*-\n from plone.app.viewletmanager.testing import optionflags\n \n import doctest\n-import re\n-import six\n import unittest\n \n \n doc_tests = [\n-    \'storage.rst\',\n-    \'manager.rst\',\n+    "storage.rst",\n+    "manager.rst",\n ]\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n-        else:\n-            want = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n-            got = re.sub(\n-                \'zope.interface.interfaces.ComponentLookupError\',\n-                \'ComponentLookupError\',\n-                got,\n-            )\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        doctest.DocFileSuite(\n-            \'tests/{0}\'.format(doc_file),\n-            package=\'plone.app.viewletmanager\',\n-            optionflags=optionflags,\n-            checker=Py23DocChecker(),\n-        )\n-        for doc_file in doc_tests\n-    ])\n+    suite.addTests(\n+        [\n+            doctest.DocFileSuite(\n+                f"tests/{doc_file}",\n+                package="plone.app.viewletmanager",\n+                optionflags=optionflags,\n+            )\n+            for doc_file in doc_tests\n+        ]\n+    )\n \n     return suite\ndiff --git a/plone/app/viewletmanager/tests/test_exportimport.py b/plone/app/viewletmanager/tests/test_exportimport.py\nindex 0a79e1f..ba93dbd 100644\n--- a/plone/app/viewletmanager/tests/test_exportimport.py\n+++ b/plone/app/viewletmanager/tests/test_exportimport.py\n@@ -1,11 +1,14 @@\n-# -*- coding: utf-8 -*-\n from persistent.dict import PersistentDict\n-from plone.app.viewletmanager.exportimport.storage import exportViewletSettingsStorage  # noqa: E501\n-from plone.app.viewletmanager.exportimport.storage import importViewletSettingsStorage  # noqa: E501\n-from plone.app.viewletmanager.exportimport.storage import ViewletSettingsStorageNodeAdapter  # noqa: E501\n+from plone.app.viewletmanager.exportimport.storage import exportViewletSettingsStorage\n+from plone.app.viewletmanager.exportimport.storage import importViewletSettingsStorage\n+from plone.app.viewletmanager.exportimport.storage import (\n+    ViewletSettingsStorageNodeAdapter,\n+)\n from plone.app.viewletmanager.interfaces import IViewletSettingsStorage\n from plone.app.viewletmanager.storage import ViewletSettingsStorage\n-from plone.app.viewletmanager.testing import PLONE_APP_VIEWLETMANAGER_INTEGRATION_TESTING  # noqa: E501\n+from plone.app.viewletmanager.testing import (\n+    PLONE_APP_VIEWLETMANAGER_INTEGRATION_TESTING,\n+)\n from Products.CMFPlone.exportimport.tests.base import BodyAdapterTestCase\n from Products.GenericSetup.tests.common import BaseRegistryTests\n from Products.GenericSetup.tests.common import DummyExportContext\n@@ -17,13 +20,13 @@\n \n \n COMMON_SETUP_ORDER = {\n-    \'basic\': {\'top\': (\'one\', )},\n-    \'fancy\': {\'top\': (\'two\', \'three\', \'one\')},\n-    }\n+    "basic": {"top": ("one",)},\n+    "fancy": {"top": ("two", "three", "one")},\n+}\n \n COMMON_SETUP_HIDDEN = {\n-    \'light\': {\'top\': (\'two\', )},\n-    }\n+    "light": {"top": ("two",)},\n+}\n \n _VIEWLETS_XML = b"""\\\n <?xml version="1.0" encoding="utf-8"?>\n@@ -131,11 +134,10 @@\n \n \n class ViewletSettingsStorageXMLAdapterTests(BodyAdapterTestCase):\n-\n     layer = PLONE_APP_VIEWLETMANAGER_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.site = self.layer[\'portal\']\n+        self.site = self.layer["portal"]\n         sm = self.site.getSiteManager()\n         sm.registerUtility(ViewletSettingsStorage(), IViewletSettingsStorage)\n \n@@ -150,31 +152,30 @@ def _getTargetClass(self):\n         return ViewletSettingsStorageNodeAdapter\n \n     def _populate(self, obj):\n-        obj.setOrder(\'top\', \'fancy\', (\'two\', \'three\', \'one\'))\n-        obj.setOrder(\'top\', \'basic\', (\'one\', ))\n-        obj.setHidden(\'top\', \'light\', (\'two\', ))\n+        obj.setOrder("top", "fancy", ("two", "three", "one"))\n+        obj.setOrder("top", "basic", ("one",))\n+        obj.setHidden("top", "light", ("two",))\n \n     def _verifyImport(self, obj):\n-        fancydict = {\'top\': (\'two\', \'three\', \'one\')}\n-        hiddendict = {\'top\': (\'two\', )}\n+        fancydict = {"top": ("two", "three", "one")}\n+        hiddendict = {"top": ("two",)}\n         self.assertEqual(type(obj._order), PersistentDict)\n-        self.failUnless(\'fancy\' in obj._order.keys())\n-        self.assertEqual(type(obj._order[\'fancy\']), PersistentDict)\n-        self.assertEqual(dict(obj._order[\'fancy\']), fancydict)\n+        self.assertTrue("fancy" in obj._order.keys())\n+        self.assertEqual(type(obj._order["fancy"]), PersistentDict)\n+        self.assertEqual(dict(obj._order["fancy"]), fancydict)\n         self.assertEqual(type(obj._hidden), PersistentDict)\n-        self.failUnless(\'light\' in obj._hidden.keys())\n-        self.assertEqual(type(obj._hidden[\'light\']), PersistentDict)\n-        self.assertEqual(dict(obj._hidden[\'light\']), hiddendict)\n+        self.assertTrue("light" in obj._hidden.keys())\n+        self.assertEqual(type(obj._hidden["light"]), PersistentDict)\n+        self.assertEqual(dict(obj._hidden["light"]), hiddendict)\n \n \n class _ViewletSettingsStorageSetup(BaseRegistryTests):\n-\n     layer = PLONE_APP_VIEWLETMANAGER_INTEGRATION_TESTING\n \n     def setUp(self):\n         BaseRegistryTests.setUp(self)\n-        self.app = self.layer[\'app\']\n-        self.site = self.layer[\'portal\']\n+        self.app = self.layer["app"]\n+        self.site = self.layer["portal"]\n         sm = self.site.getSiteManager()\n         sm.registerUtility(ViewletSettingsStorage(), IViewletSettingsStorage)\n         self.storage = getUtility(IViewletSettingsStorage)\n@@ -191,29 +192,25 @@ def tearDown(self):\n     def _populateSite(self, order={}, hidden={}):\n         for skinname in sorted(order):\n             for manager in order[skinname].keys():\n-                self.storage.setOrder(manager, skinname,\n-                                      order[skinname][manager])\n+                self.storage.setOrder(manager, skinname, order[skinname][manager])\n \n         for skinname in sorted(hidden):\n             for manager in hidden[skinname].keys():\n-                self.storage.setHidden(manager, skinname,\n-                                       hidden[skinname][manager])\n+                self.storage.setHidden(manager, skinname, hidden[skinname][manager])\n \n \n class ExportViewletSettingsStorageTests(_ViewletSettingsStorageSetup):\n-\n     def test_empty(self):\n         context = DummyExportContext(self.site)\n         exportViewletSettingsStorage(context)\n \n         self.assertEqual(len(context._wrote), 1)\n         filename, text, content_type = context._wrote[0]\n-        self.assertEqual(filename, \'viewlets.xml\')\n+        self.assertEqual(filename, "viewlets.xml")\n         self._compareDOM(text, _EMPTY_EXPORT)\n-        self.assertEqual(content_type, \'text/xml\')\n+        self.assertEqual(content_type, "text/xml")\n \n     def test_normal(self):\n-\n         _ORDER = COMMON_SETUP_ORDER\n         _HIDDEN = COMMON_SETUP_HIDDEN\n         self._populateSite(order=_ORDER, hidden=_HIDDEN)\n@@ -223,13 +220,12 @@ def test_normal(self):\n \n         self.assertEqual(len(context._wrote), 1)\n         filename, text, content_type = context._wrote[0]\n-        self.assertEqual(filename, \'viewlets.xml\')\n+        self.assertEqual(filename, "viewlets.xml")\n         self._compareDOM(text, _VIEWLETS_XML)\n-        self.assertEqual(content_type, \'text/xml\')\n+        self.assertEqual(content_type, "text/xml")\n \n \n class ImportViewletSettingsStorageTests(_ViewletSettingsStorageSetup):\n-\n     _VIEWLETS_XML = _VIEWLETS_XML\n     _EMPTY_EXPORT = _EMPTY_EXPORT\n     _CHILD_PURGE_IMPORT = _CHILD_PURGE_IMPORT\n@@ -248,21 +244,21 @@ def test_empty_default_purge(self):\n \n         site = self.site\n         utility = self.storage\n-        self.assertEqual(len(utility.getOrder(\'top\', \'fancy\')), 3)\n-        self.assertEqual(len(utility.getOrder(\'top\', \'basic\')), 1)\n-        self.assertEqual(len(utility.getHidden(\'top\', \'light\')), 1)\n+        self.assertEqual(len(utility.getOrder("top", "fancy")), 3)\n+        self.assertEqual(len(utility.getOrder("top", "basic")), 1)\n+        self.assertEqual(len(utility.getHidden("top", "light")), 1)\n         # Falls back to \'basic\'\n-        self.assertEqual(len(utility.getOrder(\'top\', \'undefined\')), 1)\n+        self.assertEqual(len(utility.getOrder("top", "undefined")), 1)\n \n         context = DummyImportContext(site)\n-        context._files[\'viewlets.xml\'] = self._EMPTY_EXPORT\n+        context._files["viewlets.xml"] = self._EMPTY_EXPORT\n         importViewletSettingsStorage(context)\n \n-        self.assertEqual(len(utility.getOrder(\'top\', \'fancy\')), 0)\n-        self.assertEqual(len(utility.getOrder(\'top\', \'basic\')), 0)\n-        self.assertEqual(len(utility.getHidden(\'top\', \'light\')), 0)\n+        self.assertEqual(len(utility.getOrder("top", "fancy")), 0)\n+        self.assertEqual(len(utility.getOrder("top", "basic")), 0)\n+        self.assertEqual(len(utility.getHidden("top", "light")), 0)\n         # Falls back to \'basic\'\n-        self.assertEqual(len(utility.getOrder(\'top\', \'undefined\')), 0)\n+        self.assertEqual(len(utility.getOrder("top", "undefined")), 0)\n \n     def test_empty_explicit_purge(self):\n         _ORDER = COMMON_SETUP_ORDER\n@@ -272,21 +268,21 @@ def test_empty_explicit_purge(self):\n         site = self.site\n         utility = self.storage\n \n-        self.assertEqual(len(utility.getOrder(\'top\', \'fancy\')), 3)\n-        self.assertEqual(len(utility.getOrder(\'top\', \'basic\')), 1)\n-        self.assertEqual(len(utility.getHidden(\'top\', \'light\')), 1)\n+        self.assertEqual(len(utility.getOrder("top", "fancy")), 3)\n+        self.assertEqual(len(utility.getOrder("top", "basic")), 1)\n+        self.assertEqual(len(utility.getHidden("top", "light")), 1)\n         # Falls back to \'basic\'\n-        self.assertEqual(len(utility.getOrder(\'top\', \'undefined\')), 1)\n+        self.assertEqual(len(utility.getOrder("top", "undefined")), 1)\n \n         context = DummyImportContext(site, True)\n-        context._files[\'viewlets.xml\'] = self._EMPTY_EXPORT\n+        context._files["viewlets.xml"] = self._EMPTY_EXPORT\n         importViewletSettingsStorage(context)\n \n-        self.assertEqual(len(utility.getOrder(\'top\', \'fancy\')), 0)\n-        self.assertEqual(len(utility.getOrder(\'top\', \'basic\')), 0)\n-        self.assertEqual(len(utility.getHidden(\'top\', \'light\')), 0)\n+        self.assertEqual(len(utility.getOrder("top", "fancy")), 0)\n+        self.assertEqual(len(utility.getOrder("top", "basic")), 0)\n+        self.assertEqual(len(utility.getHidden("top", "light")), 0)\n         # Falls back to \'basic\'\n-        self.assertEqual(len(utility.getOrder(\'top\', \'undefined\')), 0)\n+        self.assertEqual(len(utility.getOrder("top", "undefined")), 0)\n \n     def test_empty_skip_purge(self):\n         _ORDER = COMMON_SETUP_ORDER\n@@ -296,21 +292,21 @@ def test_empty_skip_purge(self):\n         site = self.site\n         utility = self.storage\n \n-        self.assertEqual(len(utility.getOrder(\'top\', \'fancy\')), 3)\n-        self.assertEqual(len(utility.getOrder(\'top\', \'basic\')), 1)\n-        self.assertEqual(len(utility.getHidden(\'top\', \'light\')), 1)\n+        self.assertEqual(len(utility.getOrder("top", "fancy")), 3)\n+        self.assertEqual(len(utility.getOrder("top", "basic")), 1)\n+        self.assertEqual(len(utility.getHidden("top", "light")), 1)\n         # Falls back to \'basic\'\n-        self.assertEqual(len(utility.getOrder(\'top\', \'undefined\')), 1)\n+        self.assertEqual(len(utility.getOrder("top", "undefined")), 1)\n \n         context = DummyImportContext(site, False)\n-        context._files[\'viewlets.xml\'] = self._EMPTY_EXPORT\n+        context._files["viewlets.xml"] = self._EMPTY_EXPORT\n         importViewletSettingsStorage(context)\n \n-        self.assertEqual(len(utility.getOrder(\'top\', \'fancy\')), 3)\n-        self.assertEqual(len(utility.getOrder(\'top\', \'basic\')), 1)\n-        self.assertEqual(len(utility.getHidden(\'top\', \'light\')), 1)\n+        self.assertEqual(len(utility.getOrder("top", "fancy")), 3)\n+        self.assertEqual(len(utility.getOrder("top", "basic")), 1)\n+        self.assertEqual(len(utility.getHidden("top", "light")), 1)\n         # Falls back to \'basic\'\n-        self.assertEqual(len(utility.getOrder(\'top\', \'undefined\')), 1)\n+        self.assertEqual(len(utility.getOrder("top", "undefined")), 1)\n \n     def test_specific_child_purge(self):\n         _ORDER = COMMON_SETUP_ORDER\n@@ -320,25 +316,25 @@ def test_specific_child_purge(self):\n         site = self.site\n         utility = self.storage\n \n-        self.assertEqual(len(utility.getOrder(\'top\', \'fancy\')), 3)\n-        self.assertEqual(len(utility.getOrder(\'top\', \'basic\')), 1)\n-        self.assertEqual(len(utility.getHidden(\'top\', \'light\')), 1)\n+        self.assertEqual(len(utility.getOrder("top", "fancy")), 3)\n+        self.assertEqual(len(utility.getOrder("top", "basic")), 1)\n+        self.assertEqual(len(utility.getHidden("top", "light")), 1)\n         # Falls back to \'basic\'\n-        self.assertEqual(len(utility.getOrder(\'top\', \'undefined\')), 1)\n+        self.assertEqual(len(utility.getOrder("top", "undefined")), 1)\n \n         context = DummyImportContext(site, False)\n-        context._files[\'viewlets.xml\'] = self._CHILD_PURGE_IMPORT\n+        context._files["viewlets.xml"] = self._CHILD_PURGE_IMPORT\n         importViewletSettingsStorage(context)\n \n-        self.assertEqual(len(utility.getOrder(\'top\', \'basic\')), 1)\n-        self.assertEqual(len(utility.getHidden(\'top\', \'light\')), 0)\n+        self.assertEqual(len(utility.getOrder("top", "basic")), 1)\n+        self.assertEqual(len(utility.getHidden("top", "light")), 0)\n         # All of the following fall back to basic because there either\n         # there are not anymore viewlet for the skinname or the skinname\n         # is not found\n-        self.assertEqual(utility._order[\'fancy\'][\'top\'], ())\n-        self.assertEqual(len(utility.getOrder(\'top\', \'fancy\')), 1)\n-        self.assertNotIn(\'undefined\', utility._order)\n-        self.assertEqual(len(utility.getOrder(\'top\', \'undefined\')), 1)\n+        self.assertEqual(utility._order["fancy"]["top"], ())\n+        self.assertEqual(len(utility.getOrder("top", "fancy")), 1)\n+        self.assertNotIn("undefined", utility._order)\n+        self.assertEqual(len(utility.getOrder("top", "undefined")), 1)\n \n     def test_normal(self):\n         site = self.site\n@@ -347,16 +343,14 @@ def test_normal(self):\n         self.assertEqual(len(utility._hidden.keys()), 0)\n \n         context = DummyImportContext(site, False)\n-        context._files[\'viewlets.xml\'] = self._VIEWLETS_XML\n+        context._files["viewlets.xml"] = self._VIEWLETS_XML\n         importViewletSettingsStorage(context)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', ))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one",))\n         # Falls back to \'basic\'\n-        self.assertEqual(utility.getOrder(\'top\', \'undefined (fallback)\'),\n-                         (\'one\', ))\n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'two\', \'three\', \'one\'))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "undefined (fallback)"), ("one",))\n+        self.assertEqual(utility.getOrder("top", "fancy"), ("two", "three", "one"))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n     def test_fragment_skip_purge(self):\n         _ORDER = COMMON_SETUP_ORDER\n@@ -368,24 +362,21 @@ def test_fragment_skip_purge(self):\n         self.assertEqual(len(utility._order.keys()), 2)\n         self.assertEqual(len(utility._hidden.keys()), 1)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'two\', \'three\', \'one\'))\n+        self.assertEqual(utility.getOrder("top", "fancy"), ("two", "three", "one"))\n         # Falls back to \'basic\'\n-        self.assertEqual(utility.getOrder(\'top\', \'undefined (fallback)\'),\n-                         (\'one\', ))\n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', ))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "undefined (fallback)"), ("one",))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one",))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n         context = DummyImportContext(site, False)\n-        context._files[\'viewlets.xml\'] = self._FRAGMENT1_IMPORT\n+        context._files["viewlets.xml"] = self._FRAGMENT1_IMPORT\n         importViewletSettingsStorage(context)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', ))\n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'three\', \'two\', \'one\'))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one",))\n+        self.assertEqual(utility.getOrder("top", "fancy"), ("three", "two", "one"))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n-        context._files[\'viewlets.xml\'] = self._FRAGMENT2_IMPORT\n+        context._files["viewlets.xml"] = self._FRAGMENT2_IMPORT\n         importViewletSettingsStorage(context)\n \n         # as the fragment FRAGMENT2_IMPORT sets the order for all skins\n@@ -396,17 +387,19 @@ def test_fragment_skip_purge(self):\n \n         self.assertEqual(len(utility._hidden.keys()), 1)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'three\', \'four\', \'two\', \'one\'))\n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', \'four\'))\n-        self.assertEqual(utility.getOrder(\'top\', \'light\'), (\'four\', ))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(\n+            utility.getOrder("top", "fancy"), ("three", "four", "two", "one")\n+        )\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one", "four"))\n+        self.assertEqual(utility.getOrder("top", "light"), ("four",))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n-        context._files[\'viewlets.xml\'] = self._FRAGMENT1_IMPORT\n+        context._files["viewlets.xml"] = self._FRAGMENT1_IMPORT\n         importViewletSettingsStorage(context)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'four\', \'three\', \'two\', \'one\'))\n+        self.assertEqual(\n+            utility.getOrder("top", "fancy"), ("four", "three", "two", "one")\n+        )\n \n     def test_fragment3_skip_purge(self):\n         _ORDER = COMMON_SETUP_ORDER\n@@ -418,24 +411,21 @@ def test_fragment3_skip_purge(self):\n         self.assertEqual(len(utility._order.keys()), 2)\n         self.assertEqual(len(utility._hidden.keys()), 1)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'two\', \'three\', \'one\'))\n+        self.assertEqual(utility.getOrder("top", "fancy"), ("two", "three", "one"))\n         # Falls back to \'basic\'\n-        self.assertEqual(utility.getOrder(\'top\', \'undefined (fallback)\'),\n-                         (\'one\',))\n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', ))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "undefined (fallback)"), ("one",))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one",))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n         context = DummyImportContext(site, False)\n-        context._files[\'viewlets.xml\'] = self._FRAGMENT3_IMPORT\n+        context._files["viewlets.xml"] = self._FRAGMENT3_IMPORT\n         importViewletSettingsStorage(context)\n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'),\n-                         (\'three\', \'one\', \'four\'))\n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'three\', \'two\', \'one\', \'four\'))\n-        self.assertEqual(utility.getOrder(\'top\', \'light\'),\n-                         (\'three\', \'four\'))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("three", "one", "four"))\n+        self.assertEqual(\n+            utility.getOrder("top", "fancy"), ("three", "two", "one", "four")\n+        )\n+        self.assertEqual(utility.getOrder("top", "light"), ("three", "four"))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n     def test_fragment4_remove(self):\n         _ORDER = COMMON_SETUP_ORDER\n@@ -447,21 +437,19 @@ def test_fragment4_remove(self):\n         self.assertEqual(len(utility._order.keys()), 2)\n         self.assertEqual(len(utility._hidden.keys()), 1)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'two\', \'three\', \'one\'))\n+        self.assertEqual(utility.getOrder("top", "fancy"), ("two", "three", "one"))\n         # Falls back to \'basic\'\n-        self.assertEqual(utility.getOrder(\'top\', \'undefined (fallback)\'),\n-                         (\'one\', ))\n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', ))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "undefined (fallback)"), ("one",))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one",))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n         context = DummyImportContext(site, False)\n-        context._files[\'viewlets.xml\'] = self._FRAGMENT4_IMPORT\n+        context._files["viewlets.xml"] = self._FRAGMENT4_IMPORT\n         importViewletSettingsStorage(context)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', ))\n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'), (\'two\', \'one\'))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one",))\n+        self.assertEqual(utility.getOrder("top", "fancy"), ("two", "one"))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n     def test_fragment5_based_on(self):\n         _ORDER = COMMON_SETUP_ORDER\n@@ -473,32 +461,26 @@ def test_fragment5_based_on(self):\n         self.assertEqual(len(utility._order.keys()), 2)\n         self.assertEqual(len(utility._hidden.keys()), 1)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'two\', \'three\', \'one\'))\n+        self.assertEqual(utility.getOrder("top", "fancy"), ("two", "three", "one"))\n         # Falls back to \'basic\'\n-        self.assertEqual(utility.getOrder(\'top\', \'undefined (fallback)\'),\n-                         (\'one\',))\n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', ))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "undefined (fallback)"), ("one",))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one",))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n         context = DummyImportContext(site, False)\n-        context._files[\'viewlets.xml\'] = self._FRAGMENT5_IMPORT\n+        context._files["viewlets.xml"] = self._FRAGMENT5_IMPORT\n         importViewletSettingsStorage(context)\n \n         self.assertEqual(len(utility._order.keys()), 5)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'two\', \'three\', \'one\'))\n-        self.assertEqual(utility.getOrder(\'top\', \'existing\'),\n-                         (\'two\', \'three\', \'one\'))\n-        self.assertEqual(utility.getOrder(\'top\', \'new\'),\n-                         (\'three\', \'two\', \'one\'))\n-        self.assertEqual(utility.getOrder(\'top\', \'wrongbase\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "fancy"), ("two", "three", "one"))\n+        self.assertEqual(utility.getOrder("top", "existing"), ("two", "three", "one"))\n+        self.assertEqual(utility.getOrder("top", "new"), ("three", "two", "one"))\n+        self.assertEqual(utility.getOrder("top", "wrongbase"), ("two",))\n         # Falls back to \'basic\'\n-        self.assertEqual(utility.getOrder(\'top\', \'undefined (fallback)\'),\n-                         (\'one\',))\n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', ))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "undefined (fallback)"), ("one",))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one",))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n     def test_fragment6_make_default(self):\n         _ORDER = COMMON_SETUP_ORDER\n@@ -510,21 +492,18 @@ def test_fragment6_make_default(self):\n         self.assertEqual(len(utility._order.keys()), 2)\n         self.assertEqual(len(utility._hidden.keys()), 1)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'two\', \'three\', \'one\'))\n+        self.assertEqual(utility.getOrder("top", "fancy"), ("two", "three", "one"))\n         # Falls back to \'basic\'\n-        self.assertEqual(utility.getOrder(\'top\', \'undefined (fallback)\'),\n-                         (\'one\', ))\n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', ))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "undefined (fallback)"), ("one",))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one",))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n         context = DummyImportContext(site, False)\n-        context._files[\'viewlets.xml\'] = self._FRAGMENT6_IMPORT\n+        context._files["viewlets.xml"] = self._FRAGMENT6_IMPORT\n         importViewletSettingsStorage(context)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'undefined\'),\n-                         (\'one\', \'two\', \'three\'))\n-        self.assertEqual(utility.getHidden(\'top\', \'undefined\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "undefined"), ("one", "two", "three"))\n+        self.assertEqual(utility.getHidden("top", "undefined"), ("two",))\n \n     def test_fragment7_make_default(self):\n         _ORDER = COMMON_SETUP_ORDER\n@@ -537,30 +516,40 @@ def test_fragment7_make_default(self):\n         self.assertEqual(len(utility._order.keys()), 2)\n         self.assertEqual(len(utility._hidden.keys()), 1)\n \n-        self.assertEqual(utility.getOrder(\'top\', \'fancy\'),\n-                         (\'two\', \'three\', \'one\'))\n+        self.assertEqual(utility.getOrder("top", "fancy"), ("two", "three", "one"))\n         # Falls back to \'basic\'\n-        self.assertEqual(utility.getOrder(\'top\', \'undefined (fallback)\'),\n-                         (\'one\', ))\n-        self.assertEqual(utility.getOrder(\'top\', \'basic\'), (\'one\', ))\n-        self.assertEqual(utility.getHidden(\'top\', \'light\'), (\'two\', ))\n+        self.assertEqual(utility.getOrder("top", "undefined (fallback)"), ("one",))\n+        self.assertEqual(utility.getOrder("top", "basic"), ("one",))\n+        self.assertEqual(utility.getHidden("top", "light"), ("two",))\n \n         context = DummyImportContext(site, False)\n-        context._files[\'viewlets.xml\'] = self._FRAGMENT7_IMPORT\n+        context._files["viewlets.xml"] = self._FRAGMENT7_IMPORT\n         importViewletSettingsStorage(context)\n-        self.assertEqual(utility.getHidden(\'top\', \'fancy\'), (\'two\', ))\n-        self.assertEqual(utility.getHidden(\'top\', \'basic\'), (\'two\', ))\n+        self.assertEqual(utility.getHidden("top", "fancy"), ("two",))\n+        self.assertEqual(utility.getHidden("top", "basic"), ("two",))\n \n     def test_syntax_error_reporting(self):\n         site = self.site\n         context = DummyImportContext(site, False)\n-        context._files[\'viewlets.xml\'] = """<?xml version="1.0"?>\\n<"""\n+        context._files["viewlets.xml"] = """<?xml version="1.0"?>\\n<"""\n         self.assertRaises(ExpatError, importViewletSettingsStorage, context)\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(ViewletSettingsStorageXMLAdapterTests))\n-    suite.addTest(unittest.makeSuite(ExportViewletSettingsStorageTests))\n-    suite.addTest(unittest.makeSuite(ImportViewletSettingsStorageTests))\n+    suite.addTest(\n+        unittest.defaultTestLoader.loadTestsFromTestCase(\n+            ViewletSettingsStorageXMLAdapterTests\n+        )\n+    )\n+    suite.addTest(\n+        unittest.defaultTestLoader.loadTestsFromTestCase(\n+            ExportViewletSettingsStorageTests\n+        )\n+    )\n+    suite.addTest(\n+        unittest.defaultTestLoader.loadTestsFromTestCase(\n+            ImportViewletSettingsStorageTests\n+        )\n+    )\n     return suite\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..09b1f6b 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,44 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\n+ignore-packages = [\'plone.app.vocabularies\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 526aeb2..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex cd26854..8a3bdf9 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,67 +1,65 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n \n-version = \'4.0.1.dev0\'\n+version = "4.0.1.dev0"\n \n-long_description = \'{0}\\n{1}\'.format(\n-    open(\'README.rst\').read(),\n-    open(\'CHANGES.rst\').read()\n+long_description = "{}\\n{}".format(\n+    open("README.rst").read(), open("CHANGES.rst").read()\n )\n \n extras_require = {\n-    \'test\': [\n-        \'Products.CMFPlone\',\n-        \'plone.app.testing\',\n-        \'six\',\n-        \'zope.publisher\',\n+    "test": [\n+        "Products.CMFPlone",\n+        "plone.app.testing",\n+        "plone.testing",\n+        "zope.publisher",\n     ]\n }\n \n install_requires = [\n-    \'Acquisition\',\n-    \'Products.GenericSetup\',\n-    \'ZODB\',\n-    \'Zope\',\n-    \'plone.app.vocabularies\',\n-    \'setuptools\',\n-    \'zope.component\',\n-    \'zope.contentprovider\',\n-    \'zope.interface\',\n-    \'zope.site\',\n-    \'zope.viewlet\',\n+    "Products.GenericSetup",\n+    "Zope",\n+    "persistent",\n+    "plone.app.vocabularies",\n+    "setuptools",\n+    "zope.contentprovider",\n+    "zope.viewlet",\n ]\n \n setup(\n-    name=\'plone.app.viewletmanager\',\n+    name="plone.app.viewletmanager",\n     version=version,\n-    description=\'Configurable viewlet manager\',\n+    description="Configurable viewlet manager",\n     long_description=long_description,\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'Environment :: Web Environment\',\n-        \'Framework :: Plone\',\n+        "Development Status :: 5 - Production/Stable",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        \'Framework :: Zope\',\n-        \'Framework :: Zope :: 5\',\n-        \'Intended Audience :: Developers\',\n-        \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n-        \'Operating System :: OS Independent\',\n-        \'Programming Language :: Python\',\n+        "Framework :: Zope",\n+        "Framework :: Zope :: 5",\n+        "Intended Audience :: Developers",\n+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'viewlets\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.viewletmanager\',\n-    license=\'GPL version 2\',\n+    keywords="viewlets",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.viewletmanager",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\', ],\n+    python_requires=">=3.8",\n+    namespace_packages=[\n+        "plone",\n+        "plone.app",\n+    ],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=extras_require,\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..b65e34f\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,50 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --test-path={toxinidir} -s plone.app.viewletmanager\n+extras =\n+    test\n'

