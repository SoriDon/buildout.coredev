Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-05-01T23:14:00+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.discussion/commit/e72d86b9851c0fcd4db2b3321bb012b04bb92fc6

isort

Files changed:
M plone/app/discussion/browser/comment.py
M plone/app/discussion/browser/controlpanel.py
M plone/app/discussion/browser/moderation.py
M plone/app/discussion/catalog.py
M plone/app/discussion/events.py
M plone/app/discussion/tests/test_catalog.py
M plone/app/discussion/tests/test_comment.py
M plone/app/discussion/tests/test_comments_viewlet.py
M plone/app/discussion/tests/test_contentrules.py
M plone/app/discussion/tests/test_controlpanel.py
M plone/app/discussion/tests/test_conversation.py
M plone/app/discussion/tests/test_events.py
M plone/app/discussion/tests/test_indexers.py
M plone/app/discussion/tests/test_moderation_multiple_state_view.py
M plone/app/discussion/tests/test_moderation_view.py
M plone/app/discussion/tests/test_notifications.py
M plone/app/discussion/tests/test_workflow.py
M setup.cfg

b'diff --git a/plone/app/discussion/browser/comment.py b/plone/app/discussion/browser/comment.py\nindex 41beecc6..32e11cd5 100644\n--- a/plone/app/discussion/browser/comment.py\n+++ b/plone/app/discussion/browser/comment.py\n@@ -14,7 +14,6 @@\n from zope.component import getUtility\n from zope.event import notify\n from zope.lifecycleevent import ObjectModifiedEvent\n-from .comments import CommentForm\n \n \n class View(BrowserView):\ndiff --git a/plone/app/discussion/browser/controlpanel.py b/plone/app/discussion/browser/controlpanel.py\nindex 272fbb0c..fa9baab7 100644\n--- a/plone/app/discussion/browser/controlpanel.py\n+++ b/plone/app/discussion/browser/controlpanel.py\n@@ -16,10 +16,13 @@\n from zope.component import queryUtility\n from zope.component.hooks import getSite\n \n+\n # try/except was added because Configuration Changed Event was moved inside the\n # controlpanel file in the PR #2495 on Products.CMFPlone\n try:\n-    from Products.CMFPlone.interfaces.controlpanel import IConfigurationChangedEvent  # noqa: E501\n+    from Products.CMFPlone.interfaces.controlpanel import (  # noqa: E501\n+        IConfigurationChangedEvent,\n+    )\n except ImportError:\n     from Products.CMFPlone.interfaces import IConfigurationChangedEvent\n \ndiff --git a/plone/app/discussion/browser/moderation.py b/plone/app/discussion/browser/moderation.py\nindex 99d6216b..911dfd0f 100644\n--- a/plone/app/discussion/browser/moderation.py\n+++ b/plone/app/discussion/browser/moderation.py\n@@ -3,9 +3,9 @@\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n+from plone.app.discussion.events import CommentDeletedEvent\n from plone.app.discussion.events import CommentPublishedEvent\n from plone.app.discussion.events import CommentTransitionEvent\n-from plone.app.discussion.events import CommentDeletedEvent\n from plone.app.discussion.interfaces import _\n from plone.app.discussion.interfaces import IComment\n from plone.app.discussion.interfaces import IReplies\ndiff --git a/plone/app/discussion/catalog.py b/plone/app/discussion/catalog.py\nindex 73c5ab2d..a8bab83e 100644\n--- a/plone/app/discussion/catalog.py\n+++ b/plone/app/discussion/catalog.py\n@@ -15,6 +15,7 @@\n \n import six\n \n+\n MAX_DESCRIPTION = 25\n \n # Conversation Indexers\ndiff --git a/plone/app/discussion/events.py b/plone/app/discussion/events.py\nindex e2ecc023..85e84390 100644\n--- a/plone/app/discussion/events.py\n+++ b/plone/app/discussion/events.py\n@@ -2,12 +2,12 @@\n """ Custom discussion events\n """\n from plone.app.discussion.interfaces import ICommentAddedEvent\n-from plone.app.discussion.interfaces import ICommentModifiedEvent\n-from plone.app.discussion.interfaces import ICommentRemovedEvent\n-from plone.app.discussion.interfaces import IDiscussionEvent\n from plone.app.discussion.interfaces import ICommentDeletedEvent\n+from plone.app.discussion.interfaces import ICommentModifiedEvent\n from plone.app.discussion.interfaces import ICommentPublishedEvent\n+from plone.app.discussion.interfaces import ICommentRemovedEvent\n from plone.app.discussion.interfaces import ICommentTransitionEvent\n+from plone.app.discussion.interfaces import IDiscussionEvent\n from plone.app.discussion.interfaces import IReplyAddedEvent\n from plone.app.discussion.interfaces import IReplyModifiedEvent\n from plone.app.discussion.interfaces import IReplyRemovedEvent\ndiff --git a/plone/app/discussion/tests/test_catalog.py b/plone/app/discussion/tests/test_catalog.py\nindex 98abd9f6..facf5775 100644\n--- a/plone/app/discussion/tests/test_catalog.py\n+++ b/plone/app/discussion/tests/test_catalog.py\n@@ -3,7 +3,9 @@\n """\n from datetime import datetime\n from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from plone.app.discussion.testing import (  # noqa\n+    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from Products.CMFCore.utils import getToolByName\ndiff --git a/plone/app/discussion/tests/test_comment.py b/plone/app/discussion/tests/test_comment.py\nindex f5f726c8..681c7bdd 100644\n--- a/plone/app/discussion/tests/test_comment.py\n+++ b/plone/app/discussion/tests/test_comment.py\n@@ -3,7 +3,9 @@\n from plone.app.discussion.interfaces import IComment\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IReplies\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from plone.app.discussion.testing import (  # noqa\n+    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from Products.CMFCore.utils import getToolByName\ndiff --git a/plone/app/discussion/tests/test_comments_viewlet.py b/plone/app/discussion/tests/test_comments_viewlet.py\nindex 06b32313..20e66a31 100644\n--- a/plone/app/discussion/tests/test_comments_viewlet.py\n+++ b/plone/app/discussion/tests/test_comments_viewlet.py\n@@ -8,7 +8,9 @@\n from plone.app.discussion.browser.comments import CommentsViewlet\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IDiscussionSettings\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from plone.app.discussion.testing import (  # noqa\n+    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n+)\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\ndiff --git a/plone/app/discussion/tests/test_contentrules.py b/plone/app/discussion/tests/test_contentrules.py\nindex c05aeded..40403354 100644\n--- a/plone/app/discussion/tests/test_contentrules.py\n+++ b/plone/app/discussion/tests/test_contentrules.py\n@@ -5,7 +5,9 @@\n from plone.app.discussion.interfaces import IReplies\n from plone.app.discussion.interfaces import IReplyAddedEvent\n from plone.app.discussion.interfaces import IReplyRemovedEvent\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from plone.app.discussion.testing import (  # noqa\n+    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.contentrules.rule.interfaces import IRuleEventType\ndiff --git a/plone/app/discussion/tests/test_controlpanel.py b/plone/app/discussion/tests/test_controlpanel.py\nindex 4ad30189..9fbdca92 100644\n--- a/plone/app/discussion/tests/test_controlpanel.py\n+++ b/plone/app/discussion/tests/test_controlpanel.py\n@@ -1,6 +1,8 @@\n # -*- coding: utf-8 -*-\n from plone.app.discussion.interfaces import IDiscussionSettings\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from plone.app.discussion.testing import (  # noqa\n+    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.registry import Registry\ndiff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex fcf528c1..a8efcfd2 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -8,7 +8,9 @@\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IDiscussionSettings\n from plone.app.discussion.interfaces import IReplies\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from plone.app.discussion.testing import (  # noqa\n+    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.vocabularies.types import BAD_TYPES\ndiff --git a/plone/app/discussion/tests/test_events.py b/plone/app/discussion/tests/test_events.py\nindex 3742c768..c9dc1733 100644\n--- a/plone/app/discussion/tests/test_events.py\n+++ b/plone/app/discussion/tests/test_events.py\n@@ -1,7 +1,9 @@\n # -*- coding: utf-8 -*-\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IReplies\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from plone.app.discussion.testing import (  # noqa\n+    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from Zope2.App import zcml\ndiff --git a/plone/app/discussion/tests/test_indexers.py b/plone/app/discussion/tests/test_indexers.py\nindex 56efebca..96354811 100644\n--- a/plone/app/discussion/tests/test_indexers.py\n+++ b/plone/app/discussion/tests/test_indexers.py\n@@ -1,11 +1,13 @@\n # -*- coding: utf-8 -*-\n """Test for the plone.app.discussion indexers\n """\n-from DateTime import DateTime\n from datetime import datetime\n+from DateTime import DateTime\n from plone.app.discussion import catalog\n from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from plone.app.discussion.testing import (  # noqa\n+    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.indexer.delegate import DelegatingIndexerFactory\ndiff --git a/plone/app/discussion/tests/test_moderation_multiple_state_view.py b/plone/app/discussion/tests/test_moderation_multiple_state_view.py\nindex 72b1db02..0d4445d8 100644\n--- a/plone/app/discussion/tests/test_moderation_multiple_state_view.py\n+++ b/plone/app/discussion/tests/test_moderation_multiple_state_view.py\n@@ -1,11 +1,13 @@\n # -*- coding: utf-8 -*-\n from plone.app.discussion.browser.moderation import BulkActionsView\n-from plone.app.discussion.browser.moderation import DeleteComment\n from plone.app.discussion.browser.moderation import CommentTransition\n+from plone.app.discussion.browser.moderation import DeleteComment\n from plone.app.discussion.browser.moderation import View\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IDiscussionSettings\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from plone.app.discussion.testing import (  # noqa\n+    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.registry.interfaces import IRegistry\ndiff --git a/plone/app/discussion/tests/test_moderation_view.py b/plone/app/discussion/tests/test_moderation_view.py\nindex 76eddb31..3c14bbd4 100644\n--- a/plone/app/discussion/tests/test_moderation_view.py\n+++ b/plone/app/discussion/tests/test_moderation_view.py\n@@ -1,11 +1,13 @@\n # -*- coding: utf-8 -*-\n from plone.app.discussion.browser.moderation import BulkActionsView\n-from plone.app.discussion.browser.moderation import DeleteComment\n from plone.app.discussion.browser.moderation import CommentTransition\n+from plone.app.discussion.browser.moderation import DeleteComment\n from plone.app.discussion.browser.moderation import View\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IDiscussionSettings\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from plone.app.discussion.testing import (  # noqa\n+    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.registry.interfaces import IRegistry\ndiff --git a/plone/app/discussion/tests/test_notifications.py b/plone/app/discussion/tests/test_notifications.py\nindex 13f9f6d8..fbf792eb 100644\n--- a/plone/app/discussion/tests/test_notifications.py\n+++ b/plone/app/discussion/tests/test_notifications.py\n@@ -1,7 +1,9 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from plone.app.discussion.testing import (  # noqa\n+    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.registry.interfaces import IRegistry\ndiff --git a/plone/app/discussion/tests/test_workflow.py b/plone/app/discussion/tests/test_workflow.py\nindex 9f959fcc..963bf117 100644\n--- a/plone/app/discussion/tests/test_workflow.py\n+++ b/plone/app/discussion/tests/test_workflow.py\n@@ -4,7 +4,9 @@\n from AccessControl import Unauthorized\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IDiscussionLayer\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from plone.app.discussion.testing import (  # noqa\n+    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n+)\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n@@ -175,6 +177,7 @@ def test_comment_on_private_content_not_visible_to_world(self):\n \n     def test_migration(self):\n         from plone.app.discussion.upgrades import upgrade_comment_workflows\n+\n         # Fake permission according to earlier one_comment_workflow.\n         self.comment._View_Permission = (\'Anonymous\',)\n         # Anonymous can see the comment.\n@@ -319,6 +322,7 @@ def test_publish_comment_on_private_content_not_visible_to_world(self):\n \n     def test_migration(self):\n         from plone.app.discussion.upgrades import upgrade_comment_workflows\n+\n         # Fake permission according to earlier comment_review_workflow.\n         self.comment._View_Permission = (\'Anonymous\',)\n         # Anonymous can see the comment.\ndiff --git a/setup.cfg b/setup.cfg\nindex 5a698fce..e726c4cd 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -11,3 +11,10 @@ universal = 1\n \n [zest.releaser]\n create-wheel = yes\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-05-01T23:14:09+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.discussion/commit/34b758f2bd4e0c152e80022968a17e32b989afb4

black

Files changed:
M docs/source/conf.py
M plone/__init__.py
M plone/app/__init__.py
M plone/app/discussion/__init__.py
M plone/app/discussion/browser/captcha.py
M plone/app/discussion/browser/comment.py
M plone/app/discussion/browser/comments.py
M plone/app/discussion/browser/controlpanel.py
M plone/app/discussion/browser/conversation.py
M plone/app/discussion/browser/moderation.py
M plone/app/discussion/browser/traversal.py
M plone/app/discussion/browser/validator.py
M plone/app/discussion/catalog.py
M plone/app/discussion/comment.py
M plone/app/discussion/contentrules.py
M plone/app/discussion/conversation.py
M plone/app/discussion/events.py
M plone/app/discussion/interfaces.py
M plone/app/discussion/subscribers.py
M plone/app/discussion/testing.py
M plone/app/discussion/tests/test_catalog.py
M plone/app/discussion/tests/test_comment.py
M plone/app/discussion/tests/test_comments_viewlet.py
M plone/app/discussion/tests/test_contentrules.py
M plone/app/discussion/tests/test_controlpanel.py
M plone/app/discussion/tests/test_conversation.py
M plone/app/discussion/tests/test_events.py
M plone/app/discussion/tests/test_functional.py
M plone/app/discussion/tests/test_indexers.py
M plone/app/discussion/tests/test_moderation_multiple_state_view.py
M plone/app/discussion/tests/test_moderation_view.py
M plone/app/discussion/tests/test_notifications.py
M plone/app/discussion/tests/test_robot.py
M plone/app/discussion/tests/test_workflow.py
M plone/app/discussion/tool.py
M plone/app/discussion/upgrades.py
M plone/app/discussion/vocabularies.py
M setup.py

b'diff --git a/docs/source/conf.py b/docs/source/conf.py\nindex 925d1314..f5d59b89 100644\n--- a/docs/source/conf.py\n+++ b/docs/source/conf.py\n@@ -24,184 +24,190 @@\n \n # Add any Sphinx extension module names here, as strings. They can be\n # extensions coming with Sphinx (named \'sphinx.ext.*\') or your custom ones.\n-extensions = [\'sphinx.ext.autodoc\',\n-              \'sphinx.ext.doctest\',\n-              \'sphinx.ext.intersphinx\',\n-              \'sphinx.ext.todo\',\n-              \'sphinx.ext.coverage\',\n-              \'repoze.sphinx.autointerface\'\n-              ]\n+extensions = [\n+    "sphinx.ext.autodoc",\n+    "sphinx.ext.doctest",\n+    "sphinx.ext.intersphinx",\n+    "sphinx.ext.todo",\n+    "sphinx.ext.coverage",\n+    "repoze.sphinx.autointerface",\n+]\n \n \n # Add any paths that contain templates here, relative to this directory.\n-templates_path = [\'_templates\']\n+templates_path = ["_templates"]\n \n # The suffix of source filenames.\n-source_suffix = \'.txt\'\n+source_suffix = ".txt"\n \n # The encoding of source files.\n-#source_encoding = \'utf-8\'\n+# source_encoding = \'utf-8\'\n \n # The master toctree document.\n-master_doc = \'index\'\n+master_doc = "index"\n \n # General information about the project.\n-project = u\'plone.app.discussion\'\n-copyright = u\'2010, Timo Stollenwerk - Plone Foundation\'\n+project = u"plone.app.discussion"\n+copyright = u"2010, Timo Stollenwerk - Plone Foundation"\n \n # The version info for the project you\'re documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n # built documents.\n #\n # The short X.Y version.\n-version = \'2.0\'\n+version = "2.0"\n # The full version, including alpha/beta/rc tags.\n-release = \'2.0\'\n+release = "2.0"\n \n # The language for content autogenerated by Sphinx. Refer to documentation\n # for a list of supported languages.\n-#language = None\n+# language = None\n \n # There are two options for replacing |today|: either, you set today to some\n # non-false value, then it is used:\n-#today = \'\'\n+# today = \'\'\n # Else, today_fmt is used as the format for a strftime call.\n-#today_fmt = \'%B %d, %Y\'\n+# today_fmt = \'%B %d, %Y\'\n \n # List of documents that shouldn\'t be included in the build.\n-#unused_docs = []\n+# unused_docs = []\n \n # List of directories, relative to source directory, that shouldn\'t be searched\n # for source files.\n exclude_trees = []\n \n # The reST default role (used for this markup: `text`) to use for all documents.\n-#default_role = None\n+# default_role = None\n \n # If true, \'()\' will be appended to :func: etc. cross-reference text.\n-#add_function_parentheses = True\n+# add_function_parentheses = True\n \n # If true, the current module name will be prepended to all description\n # unit titles (such as .. function::).\n-#add_module_names = True\n+# add_module_names = True\n \n # If true, sectionauthor and moduleauthor directives will be shown in the\n # output. They are ignored by default.\n-#show_authors = False\n+# show_authors = False\n \n # The name of the Pygments (syntax highlighting) style to use.\n-pygments_style = \'sphinx\'\n+pygments_style = "sphinx"\n \n # A list of ignored prefixes for module index sorting.\n-#modindex_common_prefix = []\n+# modindex_common_prefix = []\n \n \n # -- Options for HTML output ---------------------------------------------\n \n # The theme to use for HTML and HTML Help pages.  Major themes that come with\n # Sphinx are currently \'default\' and \'sphinxdoc\'.\n-#html_theme = \'plone\'\n+# html_theme = \'plone\'\n \n # Theme options are theme-specific and customize the look and feel of a theme\n # further.  For a list of options available for each theme, see the\n # documentation.\n-#html_theme_options = {}\n+# html_theme_options = {}\n \n # Add any paths that contain custom themes here, relative to this directory.\n-html_theme_path = [\'_themes\']\n+html_theme_path = ["_themes"]\n \n # The name for this set of Sphinx documents.  If None, it defaults to\n # "<project> v<release> documentation".\n-#html_title = None\n+# html_title = None\n \n # A shorter title for the navigation bar.  Default is the same as html_title.\n-#html_short_title = None\n+# html_short_title = None\n \n # The name of an image file (relative to this directory) to place at the top\n # of the sidebar.\n-#html_logo = None\n+# html_logo = None\n \n # The name of an image file (within the static path) to use as favicon of the\n # docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n # pixels large.\n-#html_favicon = None\n+# html_favicon = None\n \n # Add any paths that contain custom static files (such as style sheets) here,\n # relative to this directory. They are copied after the builtin static files,\n # so a file named "default.css" will overwrite the builtin "default.css".\n-html_static_path = [\'_static\']\n+html_static_path = ["_static"]\n \n # If not \'\', a \'Last updated on:\' timestamp is inserted at every page bottom,\n # using the given strftime format.\n-#html_last_updated_fmt = \'%b %d, %Y\'\n+# html_last_updated_fmt = \'%b %d, %Y\'\n \n # If true, SmartyPants will be used to convert quotes and dashes to\n # typographically correct entities.\n-#html_use_smartypants = True\n+# html_use_smartypants = True\n \n # Custom sidebar templates, maps document names to template names.\n-#html_sidebars = {}\n+# html_sidebars = {}\n \n # Additional templates that should be rendered to pages, maps page names to\n # template names.\n-#html_additional_pages = {}\n+# html_additional_pages = {}\n \n # If false, no module index is generated.\n-#html_use_modindex = True\n+# html_use_modindex = True\n \n # If false, no index is generated.\n-#html_use_index = True\n+# html_use_index = True\n \n # If true, the index is split into individual pages for each letter.\n-#html_split_index = False\n+# html_split_index = False\n \n # If true, links to the reST sources are added to the pages.\n-#html_show_sourcelink = True\n+# html_show_sourcelink = True\n \n # If true, an OpenSearch description file will be output, and all pages will\n # contain a <link> tag referring to it.  The value of this option must be the\n # base URL from which the finished HTML is served.\n-#html_use_opensearch = \'\'\n+# html_use_opensearch = \'\'\n \n # If nonempty, this is the file name suffix for HTML files (e.g. ".xhtml").\n-#html_file_suffix = \'\'\n+# html_file_suffix = \'\'\n \n # Output file base name for HTML help builder.\n-htmlhelp_basename = \'ploneappdiscussiondoc\'\n+htmlhelp_basename = "ploneappdiscussiondoc"\n \n \n # -- Options for LaTeX output --------------------------------------------\n \n # The paper size (\'letter\' or \'a4\').\n-#latex_paper_size = \'letter\'\n+# latex_paper_size = \'letter\'\n \n # The font size (\'10pt\', \'11pt\' or \'12pt\').\n-#latex_font_size = \'10pt\'\n+# latex_font_size = \'10pt\'\n \n # Grouping the document tree into LaTeX files. List of tuples\n # (source start file, target name, title, author, documentclass [howto/manual]).\n latex_documents = [\n-    (\'index\', \'ploneappdiscussion.tex\', u\'plone.app.discussion Documentation\',\n-     u\'Timo Stollenwerk\', \'manual\'),\n+    (\n+        "index",\n+        "ploneappdiscussion.tex",\n+        u"plone.app.discussion Documentation",\n+        u"Timo Stollenwerk",\n+        "manual",\n+    ),\n ]\n \n # The name of an image file (relative to this directory) to place at the top of\n # the title page.\n-#latex_logo = None\n+# latex_logo = None\n \n # For "manual" documents, if this is true, then toplevel headings are parts,\n # not chapters.\n-#latex_use_parts = False\n+# latex_use_parts = False\n \n # Additional stuff for the LaTeX preamble.\n-#latex_preamble = \'\'\n+# latex_preamble = \'\'\n \n # Documents to append as an appendix to all manuals.\n-#latex_appendices = []\n+# latex_appendices = []\n \n # If false, no module index is generated.\n-#latex_use_modindex = True\n+# latex_use_modindex = True\n \n \n # Example configuration for intersphinx: refer to the Python standard library.\n-intersphinx_mapping = {\'http://docs.python.org/\': None}\n+intersphinx_mapping = {"http://docs.python.org/": None}\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af4..03d08ffd 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af4..03d08ffd 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/discussion/__init__.py b/plone/app/discussion/__init__.py\nindex 1936adce..88b2d0df 100644\n--- a/plone/app/discussion/__init__.py\n+++ b/plone/app/discussion/__init__.py\n@@ -2,4 +2,4 @@\n from zope.i18nmessageid import MessageFactory\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\ndiff --git a/plone/app/discussion/browser/captcha.py b/plone/app/discussion/browser/captcha.py\nindex 090fce95..3c21fc5c 100644\n--- a/plone/app/discussion/browser/captcha.py\n+++ b/plone/app/discussion/browser/captcha.py\n@@ -21,9 +21,9 @@\n @adapter(Comment)\n @interface.implementer(ICaptcha)\n class Captcha(Persistent):\n-    """Captcha input field.\n-    """\n-    captcha = u\'\'\n+    """Captcha input field."""\n+\n+    captcha = u""\n \n \n Captcha = factory(Captcha)\n@@ -47,22 +47,24 @@ def __init__(self, context, request, form):\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         self.captcha = settings.captcha\n-        portal_membership = getToolByName(self.context, \'portal_membership\')\n+        portal_membership = getToolByName(self.context, "portal_membership")\n         self.isAnon = portal_membership.isAnonymousUser()\n \n     def update(self):\n-        if self.captcha != \'disabled\' and self.isAnon:\n+        if self.captcha != "disabled" and self.isAnon:\n             # Add a captcha field if captcha is enabled in the registry\n-            self.add(ICaptcha, prefix=\'\')\n-            if self.captcha == \'captcha\':\n+            self.add(ICaptcha, prefix="")\n+            if self.captcha == "captcha":\n                 from plone.formwidget.captcha import CaptchaFieldWidget\n-                self.form.fields[\'captcha\'].widgetFactory = CaptchaFieldWidget\n-            elif self.captcha == \'recaptcha\':\n+\n+                self.form.fields["captcha"].widgetFactory = CaptchaFieldWidget\n+            elif self.captcha == "recaptcha":\n                 from plone.formwidget.recaptcha import ReCaptchaFieldWidget\n-                self.form.fields[\'captcha\'].widgetFactory = \\\n-                    ReCaptchaFieldWidget\n-            elif self.captcha == \'norobots\':\n+\n+                self.form.fields["captcha"].widgetFactory = ReCaptchaFieldWidget\n+            elif self.captcha == "norobots":\n                 from collective.z3cform.norobots import NorobotsFieldWidget\n-                self.form.fields[\'captcha\'].widgetFactory = NorobotsFieldWidget\n+\n+                self.form.fields["captcha"].widgetFactory = NorobotsFieldWidget\n             else:\n-                self.form.fields[\'captcha\'].mode = interfaces.HIDDEN_MODE\n+                self.form.fields["captcha"].mode = interfaces.HIDDEN_MODE\ndiff --git a/plone/app/discussion/browser/comment.py b/plone/app/discussion/browser/comment.py\nindex 32e11cd5..bfa1ea72 100644\n--- a/plone/app/discussion/browser/comment.py\n+++ b/plone/app/discussion/browser/comment.py\n@@ -37,8 +37,7 @@ def __call__(self):\n         context = aq_inner(self.context)\n \n         registry = getUtility(IRegistry)\n-        view_action_types = registry.get(\n-            \'plone.types_use_view_action_in_listings\', [])\n+        view_action_types = registry.get("plone.types_use_view_action_in_listings", [])\n \n         obj = aq_parent(aq_parent(context))\n         url = obj.absolute_url()\n@@ -49,33 +48,34 @@ def __call__(self):\n         will redirect right to the binary object, bypassing comments.\n         """\n         if obj.portal_type in view_action_types:\n-            url = \'{0}/view\'.format(url)\n+            url = "{0}/view".format(url)\n \n-        self.request.response.redirect(\'{0}#{1}\'.format(url, context.id))\n+        self.request.response.redirect("{0}#{1}".format(url, context.id))\n \n \n class EditCommentForm(CommentForm):\n     """Form to edit an existing comment."""\n+\n     ignoreContext = True\n-    id = \'edit-comment-form\'\n-    label = _(u\'edit_comment_form_title\', default=u\'Edit comment\')\n+    id = "edit-comment-form"\n+    label = _(u"edit_comment_form_title", default=u"Edit comment")\n \n     def updateWidgets(self):\n         super(EditCommentForm, self).updateWidgets()\n-        self.widgets[\'text\'].value = self.context.text\n+        self.widgets["text"].value = self.context.text\n         # We have to rename the id, otherwise TinyMCE can\'t initialize\n         # because there are two textareas with the same id.\n-        self.widgets[\'text\'].id = \'overlay-comment-text\'\n+        self.widgets["text"].id = "overlay-comment-text"\n \n-    def _redirect(self, target=\'\'):\n+    def _redirect(self, target=""):\n         if not target:\n-            portal_state = getMultiAdapter((self.context, self.request),\n-                                           name=u\'plone_portal_state\')\n+            portal_state = getMultiAdapter(\n+                (self.context, self.request), name=u"plone_portal_state"\n+            )\n             target = portal_state.portal_url()\n         self.request.response.redirect(target)\n \n-    @button.buttonAndHandler(_(u\'label_save\',\n-                               default=u\'Save\'), name=\'comment\')\n+    @button.buttonAndHandler(_(u"label_save", default=u"Save"), name="comment")\n     def handleComment(self, action):\n \n         # Validate form\n@@ -84,32 +84,28 @@ def handleComment(self, action):\n             return\n \n         # Check permissions\n-        can_edit = getSecurityManager().checkPermission(\n-            \'Edit comments\',\n-            self.context)\n-        mtool = getToolByName(self.context, \'portal_membership\')\n+        can_edit = getSecurityManager().checkPermission("Edit comments", self.context)\n+        mtool = getToolByName(self.context, "portal_membership")\n         if mtool.isAnonymousUser() or not can_edit:\n             return\n \n         # Update text\n-        self.context.text = data[\'text\']\n+        self.context.text = data["text"]\n         # Notify that the object has been modified\n         notify(ObjectModifiedEvent(self.context))\n \n         # Redirect to comment\n-        IStatusMessage(self.request).add(_(u\'comment_edit_notification\',\n-                                           default=\'Comment was edited\'),\n-                                         type=\'info\')\n-        return self._redirect(\n-            target=self.action.replace(\'@@edit-comment\', \'@@view\'))\n-\n-    @button.buttonAndHandler(_(u\'cancel_form_button\',\n-                               default=u\'Cancel\'), name=\'cancel\')\n+        IStatusMessage(self.request).add(\n+            _(u"comment_edit_notification", default="Comment was edited"), type="info"\n+        )\n+        return self._redirect(target=self.action.replace("@@edit-comment", "@@view"))\n+\n+    @button.buttonAndHandler(_(u"cancel_form_button", default=u"Cancel"), name="cancel")\n     def handle_cancel(self, action):\n         IStatusMessage(self.request).add(\n-            _(u\'comment_edit_cancel_notification\',\n-              default=u\'Edit comment cancelled\'),\n-            type=\'info\')\n+            _(u"comment_edit_cancel_notification", default=u"Edit comment cancelled"),\n+            type="info",\n+        )\n         return self._redirect(target=self.context.absolute_url())\n \n \ndiff --git a/plone/app/discussion/browser/comments.py b/plone/app/discussion/browser/comments.py\nindex d8ee95f9..324acc81 100644\n--- a/plone/app/discussion/browser/comments.py\n+++ b/plone/app/discussion/browser/comments.py\n@@ -35,28 +35,28 @@\n \n \n COMMENT_DESCRIPTION_PLAIN_TEXT = _(\n-    u\'comment_description_plain_text\',\n-    default=u\'You can add a comment by filling out the form below. \'\n-            u\'Plain text formatting.\',\n+    u"comment_description_plain_text",\n+    default=u"You can add a comment by filling out the form below. "\n+    u"Plain text formatting.",\n )\n \n COMMENT_DESCRIPTION_MARKDOWN = _(\n-    u\'comment_description_markdown\',\n-    default=u\'You can add a comment by filling out the form below. \'\n-            u\'Plain text formatting. You can use the Markdown syntax for \'\n-            u\'links and images.\',\n+    u"comment_description_markdown",\n+    default=u"You can add a comment by filling out the form below. "\n+    u"Plain text formatting. You can use the Markdown syntax for "\n+    u"links and images.",\n )\n \n COMMENT_DESCRIPTION_INTELLIGENT_TEXT = _(\n-    u\'comment_description_intelligent_text\',\n-    default=u\'You can add a comment by filling out the form below. \'\n-            u\'Plain text formatting. Web and email addresses are \'\n-            u\'transformed into clickable links.\',\n+    u"comment_description_intelligent_text",\n+    default=u"You can add a comment by filling out the form below. "\n+    u"Plain text formatting. Web and email addresses are "\n+    u"transformed into clickable links.",\n )\n \n COMMENT_DESCRIPTION_MODERATION_ENABLED = _(\n-    u\'comment_description_moderation_enabled\',\n-    default=u\'Comments are moderated.\',\n+    u"comment_description_moderation_enabled",\n+    default=u"Comments are moderated.",\n )\n \n \n@@ -64,30 +64,31 @@ class CommentForm(extensible.ExtensibleForm, form.Form):\n \n     ignoreContext = True  # don\'t use context to get widget data\n     id = None\n-    label = _(u\'Add a comment\')\n-    fields = field.Fields(IComment).omit(\'portal_type\',\n-                                         \'__parent__\',\n-                                         \'__name__\',\n-                                         \'comment_id\',\n-                                         \'mime_type\',\n-                                         \'creator\',\n-                                         \'creation_date\',\n-                                         \'modification_date\',\n-                                         \'author_username\',\n-                                         \'title\')\n+    label = _(u"Add a comment")\n+    fields = field.Fields(IComment).omit(\n+        "portal_type",\n+        "__parent__",\n+        "__name__",\n+        "comment_id",\n+        "mime_type",\n+        "creator",\n+        "creation_date",\n+        "modification_date",\n+        "author_username",\n+        "title",\n+    )\n \n     def updateFields(self):\n         super(CommentForm, self).updateFields()\n-        self.fields[\'user_notification\'].widgetFactory = \\\n-            SingleCheckBoxFieldWidget\n+        self.fields["user_notification"].widgetFactory = SingleCheckBoxFieldWidget\n \n     def updateWidgets(self):\n         super(CommentForm, self).updateWidgets()\n \n         # Widgets\n-        self.widgets[\'in_reply_to\'].mode = interfaces.HIDDEN_MODE\n-        self.widgets[\'text\'].addClass(\'autoresize\')\n-        self.widgets[\'user_notification\'].label = _(u\'\')\n+        self.widgets["in_reply_to"].mode = interfaces.HIDDEN_MODE\n+        self.widgets["text"].addClass("autoresize")\n+        self.widgets["user_notification"].label = _(u"")\n         # Reset widget field settings to their defaults, which may be changed\n         # further on.  Otherwise, the email field might get set to required\n         # when an anonymous user visits, and then remain required when an\n@@ -97,19 +98,19 @@ def updateWidgets(self):\n         # would have no effect until the instance was restarted.  Note that the\n         # widget is new each time, but the field is the same item in memory as\n         # the previous time.\n-        self.widgets[\'author_email\'].field.required = False\n+        self.widgets["author_email"].field.required = False\n         # The widget is new, but its \'required\' setting is based on the\n         # previous value on the field, so we need to reset it here.  Changing\n         # the field in updateFields does not help.\n-        self.widgets[\'author_email\'].required = False\n+        self.widgets["author_email"].required = False\n \n         # Rename the id of the text widgets because there can be css-id\n         # clashes with the text field of documents when using and overlay\n         # with TinyMCE.\n-        self.widgets[\'text\'].id = \'form-widgets-comment-text\'\n+        self.widgets["text"].id = "form-widgets-comment-text"\n \n         # Anonymous / Logged-in\n-        mtool = getToolByName(self.context, \'portal_membership\')\n+        mtool = getToolByName(self.context, "portal_membership")\n         anon = mtool.isAnonymousUser()\n \n         registry = queryUtility(IRegistry)\n@@ -119,52 +120,51 @@ def updateWidgets(self):\n             if settings.anonymous_email_enabled:\n                 # according to IDiscussionSettings.anonymous_email_enabled:\n                 # \'If selected, anonymous user will have to give their email.\'\n-                self.widgets[\'author_email\'].field.required = True\n-                self.widgets[\'author_email\'].required = True\n+                self.widgets["author_email"].field.required = True\n+                self.widgets["author_email"].required = True\n             else:\n-                self.widgets[\'author_email\'].mode = interfaces.HIDDEN_MODE\n+                self.widgets["author_email"].mode = interfaces.HIDDEN_MODE\n         else:\n-            self.widgets[\'author_name\'].mode = interfaces.HIDDEN_MODE\n-            self.widgets[\'author_email\'].mode = interfaces.HIDDEN_MODE\n+            self.widgets["author_name"].mode = interfaces.HIDDEN_MODE\n+            self.widgets["author_email"].mode = interfaces.HIDDEN_MODE\n \n         member = mtool.getAuthenticatedMember()\n-        member_email = member.getProperty(\'email\')\n+        member_email = member.getProperty("email")\n \n         # Hide the user_notification checkbox if user notification is disabled\n         # or the user is not logged in. Also check if the user has a valid\n         # email address\n-        member_email_is_empty = member_email == \'\'\n+        member_email_is_empty = member_email == ""\n         user_notification_disabled = not settings.user_notification_enabled\n         if member_email_is_empty or user_notification_disabled or anon:\n-            self.widgets[\'user_notification\'].mode = interfaces.HIDDEN_MODE\n+            self.widgets["user_notification"].mode = interfaces.HIDDEN_MODE\n \n     def updateActions(self):\n         super(CommentForm, self).updateActions()\n-        self.actions[\'cancel\'].addClass(\'btn btn-secondary\')\n-        self.actions[\'cancel\'].addClass(\'hide\')\n-        self.actions[\'comment\'].addClass(\'btn btn-primary\')\n+        self.actions["cancel"].addClass("btn btn-secondary")\n+        self.actions["cancel"].addClass("hide")\n+        self.actions["comment"].addClass("btn btn-primary")\n \n     def get_author(self, data):\n         context = aq_inner(self.context)\n         # some attributes are not always set\n-        author_name = u\'\'\n+        author_name = u""\n \n         # Make sure author_name/ author_email is properly encoded\n-        if \'author_name\' in data:\n-            author_name = safe_unicode(data[\'author_name\'])\n-        if \'author_email\' in data:\n-            author_email = safe_unicode(data[\'author_email\'])\n+        if "author_name" in data:\n+            author_name = safe_unicode(data["author_name"])\n+        if "author_email" in data:\n+            author_email = safe_unicode(data["author_email"])\n \n         # Set comment author properties for anonymous users or members\n-        portal_membership = getToolByName(context, \'portal_membership\')\n+        portal_membership = getToolByName(context, "portal_membership")\n         anon = portal_membership.isAnonymousUser()\n-        if not anon and getSecurityManager().checkPermission(\n-                \'Reply to item\', context):\n+        if not anon and getSecurityManager().checkPermission("Reply to item", context):\n             # Member\n             member = portal_membership.getAuthenticatedMember()\n-            email = safe_unicode(member.getProperty(\'email\'))\n-            fullname = member.getProperty(\'fullname\')\n-            if not fullname or fullname == \'\':\n+            email = safe_unicode(member.getProperty("email"))\n+            fullname = member.getProperty("fullname")\n+            if not fullname or fullname == "":\n                 fullname = member.getUserName()\n             fullname = safe_unicode(fullname)\n             author_name = fullname\n@@ -179,7 +179,7 @@ def get_author(self, data):\n \n     def create_comment(self, data):\n         context = aq_inner(self.context)\n-        comment = createObject(\'plone.Comment\')\n+        comment = createObject("plone.Comment")\n \n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n@@ -200,42 +200,44 @@ def create_comment(self, data):\n         comment.author_name, comment.author_email = self.get_author(data)\n \n         # Set comment author properties for anonymous users or members\n-        portal_membership = getToolByName(context, \'portal_membership\')\n+        portal_membership = getToolByName(context, "portal_membership")\n         anon = portal_membership.isAnonymousUser()\n         if anon and anonymous_comments:\n             # Anonymous Users\n             comment.user_notification = None\n         elif not anon and getSecurityManager().checkPermission(\n-                \'Reply to item\', context):\n+            "Reply to item", context\n+        ):\n             # Member\n             member = portal_membership.getAuthenticatedMember()\n             memberid = member.getId()\n             user = member.getUser()\n             comment.changeOwnership(user, recursive=False)\n-            comment.manage_setLocalRoles(memberid, [\'Owner\'])\n+            comment.manage_setLocalRoles(memberid, ["Owner"])\n             comment.creator = memberid\n             comment.author_username = memberid\n \n         else:  # pragma: no cover\n             raise Unauthorized(\n-                u\'Anonymous user tries to post a comment, but anonymous \'\n-                u\'commenting is disabled. Or user does not have the \'\n+                u"Anonymous user tries to post a comment, but anonymous "\n+                u"commenting is disabled. Or user does not have the "\n                 u"\'reply to item\' permission.",\n             )\n \n         return comment\n \n-    @button.buttonAndHandler(_(u\'add_comment_button\', default=u\'Comment\'),\n-                             name=\'comment\')\n+    @button.buttonAndHandler(\n+        _(u"add_comment_button", default=u"Comment"), name="comment"\n+    )\n     def handleComment(self, action):\n         context = aq_inner(self.context)\n \n         # Check if conversation is enabled on this content object\n         if not self.__parent__.restrictedTraverse(\n-            \'@@conversation_view\',\n+            "@@conversation_view",\n         ).enabled():\n             raise Unauthorized(\n-                \'Discussion is not enabled for this content object.\',\n+                "Discussion is not enabled for this content object.",\n             )\n \n         # Validation form\n@@ -246,28 +248,26 @@ def handleComment(self, action):\n         # Validate Captcha\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n-        portal_membership = getToolByName(self.context, \'portal_membership\')\n-        captcha_enabled = settings.captcha != \'disabled\'\n+        portal_membership = getToolByName(self.context, "portal_membership")\n+        captcha_enabled = settings.captcha != "disabled"\n         anonymous_comments = settings.anonymous_comments\n         anon = portal_membership.isAnonymousUser()\n         if captcha_enabled and anonymous_comments and anon:\n-            if \'captcha\' not in data:\n-                data[\'captcha\'] = u\'\'\n-            captcha = CaptchaValidator(self.context,\n-                                       self.request,\n-                                       None,\n-                                       ICaptcha[\'captcha\'],\n-                                       None)\n-            captcha.validate(data[\'captcha\'])\n+            if "captcha" not in data:\n+                data["captcha"] = u""\n+            captcha = CaptchaValidator(\n+                self.context, self.request, None, ICaptcha["captcha"], None\n+            )\n+            captcha.validate(data["captcha"])\n \n         # Create comment\n         comment = self.create_comment(data)\n \n         # Add comment to conversation\n         conversation = IConversation(self.__parent__)\n-        if data[\'in_reply_to\']:\n+        if data["in_reply_to"]:\n             # Add a reply to an existing comment\n-            conversation_to_reply_to = conversation.get(data[\'in_reply_to\'])\n+            conversation_to_reply_to = conversation.get(data["in_reply_to"])\n             replies = IReplies(conversation_to_reply_to)\n             comment_id = replies.addComment(comment)\n         else:\n@@ -279,25 +279,24 @@ def handleComment(self, action):\n         # shown to the user that his/her comment awaits moderation. If the user\n         # has \'review comments\' permission, he/she is redirected directly\n         # to the comment.\n-        can_review = getSecurityManager().checkPermission(\'Review comments\',\n-                                                          context)\n-        workflowTool = getToolByName(context, \'portal_workflow\')\n+        can_review = getSecurityManager().checkPermission("Review comments", context)\n+        workflowTool = getToolByName(context, "portal_workflow")\n         comment_review_state = workflowTool.getInfoFor(\n             comment,\n-            \'review_state\',\n+            "review_state",\n             None,\n         )\n-        if comment_review_state == \'pending\' and not can_review:\n+        if comment_review_state == "pending" and not can_review:\n             # Show info message when comment moderation is enabled\n             IStatusMessage(self.context.REQUEST).addStatusMessage(\n-                _(\'Your comment awaits moderator approval.\'),\n-                type=\'info\')\n+                _("Your comment awaits moderator approval."), type="info"\n+            )\n             self.request.response.redirect(self.action)\n         else:\n             # Redirect to comment (inside a content object page)\n-            self.request.response.redirect(self.action + \'#\' + str(comment_id))\n+            self.request.response.redirect(self.action + "#" + str(comment_id))\n \n-    @button.buttonAndHandler(_(u\'Cancel\'))\n+    @button.buttonAndHandler(_(u"Cancel"))\n     def handleCancel(self, action):\n         # This method should never be called, it\'s only there to show\n         # a cancel button that is handled by a jQuery method.\n@@ -307,15 +306,15 @@ def handleCancel(self, action):\n class CommentsViewlet(ViewletBase):\n \n     form = CommentForm\n-    index = ViewPageTemplateFile(\'comments.pt\')\n+    index = ViewPageTemplateFile("comments.pt")\n \n     def update(self):\n         super(CommentsViewlet, self).update()\n         discussion_allowed = self.is_discussion_allowed()\n         anonymous_allowed_or_can_reply = (\n-            self.is_anonymous() and\n-            self.anonymous_discussion_allowed() or\n-            self.can_reply()\n+            self.is_anonymous()\n+            and self.anonymous_discussion_allowed()\n+            or self.can_reply()\n         )\n         if discussion_allowed and anonymous_allowed_or_can_reply:\n             z2.switch_on(self, request_layer=IFormLayer)\n@@ -326,30 +325,29 @@ def update(self):\n     # view methods\n \n     def can_reply(self):\n-        """Returns true if current user has the \'Reply to item\' permission.\n-        """\n-        return getSecurityManager().checkPermission(\'Reply to item\',\n-                                                    aq_inner(self.context))\n+        """Returns true if current user has the \'Reply to item\' permission."""\n+        return getSecurityManager().checkPermission(\n+            "Reply to item", aq_inner(self.context)\n+        )\n \n     def can_manage(self):\n         """We keep this method for <= 1.0b9 backward compatibility. Since we do\n-           not want any API changes in beta releases.\n+        not want any API changes in beta releases.\n         """\n         return self.can_review()\n \n     def can_review(self):\n-        """Returns true if current user has the \'Review comments\' permission.\n-        """\n-        return getSecurityManager().checkPermission(\'Review comments\',\n-                                                    aq_inner(self.context))\n+        """Returns true if current user has the \'Review comments\' permission."""\n+        return getSecurityManager().checkPermission(\n+            "Review comments", aq_inner(self.context)\n+        )\n \n     def can_delete_own(self, comment):\n         """Returns true if the current user can delete the comment. Only\n         comments without replies can be deleted.\n         """\n         try:\n-            return comment.restrictedTraverse(\n-                \'@@delete-own-comment\').can_delete()\n+            return comment.restrictedTraverse("@@delete-own-comment").can_delete()\n         except Unauthorized:\n             return False\n \n@@ -358,8 +356,7 @@ def could_delete_own(self, comment):\n         no replies. This is used to prepare hidden form buttons for JS.\n         """\n         try:\n-            return comment.restrictedTraverse(\n-                \'@@delete-own-comment\').could_delete()\n+            return comment.restrictedTraverse("@@delete-own-comment").could_delete()\n         except Unauthorized:\n             return False\n \n@@ -367,58 +364,63 @@ def can_edit(self, reply):\n         """Returns true if current user has the \'Edit comments\'\n         permission.\n         """\n-        return getSecurityManager().checkPermission(\'Edit comments\',\n-                                                    aq_inner(reply))\n+        return getSecurityManager().checkPermission("Edit comments", aq_inner(reply))\n \n     def can_delete(self, reply):\n         """Returns true if current user has the \'Delete comments\'\n         permission.\n         """\n-        return getSecurityManager().checkPermission(\'Delete comments\',\n-                                                    aq_inner(reply))\n+        return getSecurityManager().checkPermission("Delete comments", aq_inner(reply))\n \n     def is_discussion_allowed(self):\n         context = aq_inner(self.context)\n-        return context.restrictedTraverse(\'@@conversation_view\').enabled()\n+        return context.restrictedTraverse("@@conversation_view").enabled()\n \n     def comment_transform_message(self):\n         """Returns the description that shows up above the comment text,\n-           dependent on the text_transform setting and the comment moderation\n-           workflow in the discussion control panel.\n+        dependent on the text_transform setting and the comment moderation\n+        workflow in the discussion control panel.\n         """\n         context = aq_inner(self.context)\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n \n         # text transform setting\n-        if settings.text_transform == \'text/x-web-intelligent\':\n-            message = translate(Message(COMMENT_DESCRIPTION_INTELLIGENT_TEXT),\n-                                context=self.request)\n-        elif settings.text_transform == \'text/x-web-markdown\':\n-            message = translate(Message(COMMENT_DESCRIPTION_MARKDOWN),\n-                                context=self.request)\n+        if settings.text_transform == "text/x-web-intelligent":\n+            message = translate(\n+                Message(COMMENT_DESCRIPTION_INTELLIGENT_TEXT), context=self.request\n+            )\n+        elif settings.text_transform == "text/x-web-markdown":\n+            message = translate(\n+                Message(COMMENT_DESCRIPTION_MARKDOWN), context=self.request\n+            )\n         else:\n-            message = translate(Message(COMMENT_DESCRIPTION_PLAIN_TEXT),\n-                                context=self.request)\n+            message = translate(\n+                Message(COMMENT_DESCRIPTION_PLAIN_TEXT), context=self.request\n+            )\n \n         # comment workflow\n-        wftool = getToolByName(context, \'portal_workflow\', None)\n-        workflow_chain = wftool.getChainForPortalType(\'Discussion Item\')\n+        wftool = getToolByName(context, "portal_workflow", None)\n+        workflow_chain = wftool.getChainForPortalType("Discussion Item")\n         if workflow_chain:\n             comment_workflow = workflow_chain[0]\n             comment_workflow = wftool[comment_workflow]\n             # check if the current workflow implements a pending state. If this\n             # is true comments are moderated\n-            if \'pending\' in comment_workflow.states:\n-                message = message + \' \' + \\\n-                    translate(Message(COMMENT_DESCRIPTION_MODERATION_ENABLED),\n-                              context=self.request)\n+            if "pending" in comment_workflow.states:\n+                message = (\n+                    message\n+                    + " "\n+                    + translate(\n+                        Message(COMMENT_DESCRIPTION_MODERATION_ENABLED),\n+                        context=self.request,\n+                    )\n+                )\n \n         return message\n \n     def has_replies(self, workflow_actions=False):\n-        """Returns true if there are replies.\n-        """\n+        """Returns true if there are replies."""\n         if self.get_replies(workflow_actions) is not None:\n             try:\n                 next(self.get_replies(workflow_actions))\n@@ -442,31 +444,32 @@ def get_replies(self, workflow_actions=False):\n         if conversation is None:\n             return iter([])\n \n-        wf = getToolByName(context, \'portal_workflow\')\n+        wf = getToolByName(context, "portal_workflow")\n         # workflow_actions is only true when user\n         # has \'Manage portal\' permission\n \n         def replies_with_workflow_actions():\n             # Generator that returns replies dict with workflow actions\n             for r in conversation.getThreads():\n-                comment_obj = r[\'comment\']\n+                comment_obj = r["comment"]\n                 # list all possible workflow actions\n                 actions = [\n-                    a for a in wf.listActionInfos(object=comment_obj)\n-                    if a[\'category\'] == \'workflow\' and a[\'allowed\']\n+                    a\n+                    for a in wf.listActionInfos(object=comment_obj)\n+                    if a["category"] == "workflow" and a["allowed"]\n                 ]\n                 r = r.copy()\n-                r[\'actions\'] = actions\n+                r["actions"] = actions\n                 yield r\n \n         def published_replies():\n             # Generator that returns replies dict with workflow status.\n             for r in conversation.getThreads():\n-                comment_obj = r[\'comment\']\n-                workflow_status = wf.getInfoFor(comment_obj, \'review_state\')\n-                if workflow_status == \'published\':\n+                comment_obj = r["comment"]\n+                workflow_status = wf.getInfoFor(comment_obj, "review_state")\n+                if workflow_status == "published":\n                     r = r.copy()\n-                    r[\'workflow_status\'] = workflow_status\n+                    r["workflow_status"] = workflow_status\n                     yield r\n \n         # Return all direct replies\n@@ -480,20 +483,16 @@ def get_commenter_home_url(self, username=None):\n         if username is None:\n             return None\n         else:\n-            return \'{0}/author/{1}\'.format(self.context.portal_url(), username)\n+            return "{0}/author/{1}".format(self.context.portal_url(), username)\n \n     def get_commenter_portrait(self, username=None):\n \n         if username is None:\n             # return the default user image if no username is given\n-            return \'defaultUser.png\'\n+            return "defaultUser.png"\n         else:\n-            portal_membership = getToolByName(self.context,\n-                                              \'portal_membership\',\n-                                              None)\n-            return portal_membership\\\n-                .getPersonalPortrait(username)\\\n-                .absolute_url()\n+            portal_membership = getToolByName(self.context, "portal_membership", None)\n+            return portal_membership.getPersonalPortrait(username).absolute_url()\n \n     def anonymous_discussion_allowed(self):\n         # Check if anonymous comments are allowed in the registry\n@@ -520,20 +519,18 @@ def show_commenter_image(self):\n         return settings.show_commenter_image\n \n     def is_anonymous(self):\n-        portal_membership = getToolByName(self.context,\n-                                          \'portal_membership\',\n-                                          None)\n+        portal_membership = getToolByName(self.context, "portal_membership", None)\n         return portal_membership.isAnonymousUser()\n \n     def login_action(self):\n-        return \'{0}/login_form?came_from={1}\'.format(\n+        return "{0}/login_form?came_from={1}".format(\n             self.navigation_root_url,\n-            quote(self.request.get(\'URL\', \'\')),\n+            quote(self.request.get("URL", "")),\n         )\n \n     def format_time(self, time):\n         # We have to transform Python datetime into Zope DateTime\n         # before we can call toLocalizedTime.\n-        util = getToolByName(self.context, \'translation_service\')\n+        util = getToolByName(self.context, "translation_service")\n         zope_time = DateTime(time.isoformat())\n         return util.toLocalizedTime(zope_time, long_format=True)\ndiff --git a/plone/app/discussion/browser/controlpanel.py b/plone/app/discussion/browser/controlpanel.py\nindex fa9baab7..8e40a3c2 100644\n--- a/plone/app/discussion/browser/controlpanel.py\n+++ b/plone/app/discussion/browser/controlpanel.py\n@@ -28,42 +28,40 @@\n \n \n class DiscussionSettingsEditForm(controlpanel.RegistryEditForm):\n-    """Discussion settings form.\n-    """\n+    """Discussion settings form."""\n+\n     schema = IDiscussionSettings\n-    id = \'DiscussionSettingsEditForm\'\n-    label = _(u\'Discussion settings\')\n+    id = "DiscussionSettingsEditForm"\n+    label = _(u"Discussion settings")\n     description = _(\n-        u\'help_discussion_settings_editform\',\n-        default=u\'Some discussion related settings are not \'\n-                u\'located in the Discussion Control Panel.\\n\'\n-                u\'To enable comments for a specific content type, \'\n-                u\'go to the Types Control Panel of this type and \'\n-                u\'choose "Allow comments".\\n\'\n-                u\'To enable the moderation workflow for comments, \'\n-                u\'go to the Types Control Panel, choose \'\n-                u\'"Comment" and set workflow to \'\n-                u\'"Comment Review Workflow".\',\n+        u"help_discussion_settings_editform",\n+        default=u"Some discussion related settings are not "\n+        u"located in the Discussion Control Panel.\\n"\n+        u"To enable comments for a specific content type, "\n+        u"go to the Types Control Panel of this type and "\n+        u\'choose "Allow comments".\\n\'\n+        u"To enable the moderation workflow for comments, "\n+        u"go to the Types Control Panel, choose "\n+        u\'"Comment" and set workflow to \'\n+        u\'"Comment Review Workflow".\',\n     )\n \n     def updateFields(self):\n         super(DiscussionSettingsEditForm, self).updateFields()\n-        self.fields[\'globally_enabled\'].widgetFactory = \\\n-            SingleCheckBoxFieldWidget\n-        self.fields[\'moderation_enabled\'].widgetFactory = \\\n-            SingleCheckBoxFieldWidget\n-        self.fields[\'edit_comment_enabled\'].widgetFactory = \\\n-            SingleCheckBoxFieldWidget\n-        self.fields[\'delete_own_comment_enabled\'].widgetFactory = \\\n-            SingleCheckBoxFieldWidget\n-        self.fields[\'anonymous_comments\'].widgetFactory = \\\n-            SingleCheckBoxFieldWidget\n-        self.fields[\'show_commenter_image\'].widgetFactory = \\\n-            SingleCheckBoxFieldWidget\n-        self.fields[\'moderator_notification_enabled\'].widgetFactory = \\\n-            SingleCheckBoxFieldWidget\n-        self.fields[\'user_notification_enabled\'].widgetFactory = \\\n-            SingleCheckBoxFieldWidget\n+        self.fields["globally_enabled"].widgetFactory = SingleCheckBoxFieldWidget\n+        self.fields["moderation_enabled"].widgetFactory = SingleCheckBoxFieldWidget\n+        self.fields["edit_comment_enabled"].widgetFactory = SingleCheckBoxFieldWidget\n+        self.fields[\n+            "delete_own_comment_enabled"\n+        ].widgetFactory = SingleCheckBoxFieldWidget\n+        self.fields["anonymous_comments"].widgetFactory = SingleCheckBoxFieldWidget\n+        self.fields["show_commenter_image"].widgetFactory = SingleCheckBoxFieldWidget\n+        self.fields[\n+            "moderator_notification_enabled"\n+        ].widgetFactory = SingleCheckBoxFieldWidget\n+        self.fields[\n+            "user_notification_enabled"\n+        ].widgetFactory = SingleCheckBoxFieldWidget\n \n     def updateWidgets(self):\n         try:\n@@ -73,33 +71,31 @@ def updateWidgets(self):\n             # provide auto-upgrade\n             update_registry(self.context)\n             super(DiscussionSettingsEditForm, self).updateWidgets()\n-        self.widgets[\'globally_enabled\'].label = _(u\'Enable Comments\')\n-        self.widgets[\'anonymous_comments\'].label = _(u\'Anonymous Comments\')\n-        self.widgets[\'show_commenter_image\'].label = _(u\'Commenter Image\')\n-        self.widgets[\'moderator_notification_enabled\'].label = _(\n-            u\'Moderator Email Notification\',\n+        self.widgets["globally_enabled"].label = _(u"Enable Comments")\n+        self.widgets["anonymous_comments"].label = _(u"Anonymous Comments")\n+        self.widgets["show_commenter_image"].label = _(u"Commenter Image")\n+        self.widgets["moderator_notification_enabled"].label = _(\n+            u"Moderator Email Notification",\n         )\n-        self.widgets[\'user_notification_enabled\'].label = _(\n-            u\'User Email Notification\',\n+        self.widgets["user_notification_enabled"].label = _(\n+            u"User Email Notification",\n         )\n \n-    @button.buttonAndHandler(_(\'Save\'), name=None)\n+    @button.buttonAndHandler(_("Save"), name=None)\n     def handleSave(self, action):\n         data, errors = self.extractData()\n         if errors:\n             self.status = self.formErrorsMessage\n             return\n         self.applyChanges(data)\n-        IStatusMessage(self.request).addStatusMessage(_(u\'Changes saved\'),\n-                                                      \'info\')\n-        self.context.REQUEST.RESPONSE.redirect(\'@@discussion-controlpanel\')\n+        IStatusMessage(self.request).addStatusMessage(_(u"Changes saved"), "info")\n+        self.context.REQUEST.RESPONSE.redirect("@@discussion-controlpanel")\n \n-    @button.buttonAndHandler(_(\'Cancel\'), name=\'cancel\')\n+    @button.buttonAndHandler(_("Cancel"), name="cancel")\n     def handleCancel(self, action):\n-        IStatusMessage(self.request).addStatusMessage(_(u\'Edit cancelled\'),\n-                                                      \'info\')\n+        IStatusMessage(self.request).addStatusMessage(_(u"Edit cancelled"), "info")\n         self.request.response.redirect(\n-            \'{0}/{1}\'.format(\n+            "{0}/{1}".format(\n                 self.context.absolute_url(),\n                 self.control_panel_view,\n             ),\n@@ -107,10 +103,10 @@ def handleCancel(self, action):\n \n \n class DiscussionSettingsControlPanel(controlpanel.ControlPanelFormWrapper):\n-    """Discussion settings control panel.\n-    """\n+    """Discussion settings control panel."""\n+\n     form = DiscussionSettingsEditForm\n-    index = ViewPageTemplateFile(\'controlpanel.pt\')\n+    index = ViewPageTemplateFile("controlpanel.pt")\n \n     def __call__(self):\n         self.mailhost_warning()\n@@ -126,43 +122,44 @@ def site_url(self):\n \n     def settings(self):\n         """Compose a string that contains all registry settings that are\n-           needed for the discussion control panel.\n+        needed for the discussion control panel.\n         """\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n-        wftool = getToolByName(self.context, \'portal_workflow\', None)\n-        workflow_chain = wftool.getChainForPortalType(\'Discussion Item\')\n+        wftool = getToolByName(self.context, "portal_workflow", None)\n+        workflow_chain = wftool.getChainForPortalType("Discussion Item")\n         output = []\n \n         # Globally enabled\n         if settings.globally_enabled:\n-            output.append(\'globally_enabled\')\n+            output.append("globally_enabled")\n \n         # Comment moderation\n-        one_state_worklow_disabled = \\\n-            \'comment_one_state_workflow\' not in workflow_chain\n-        comment_review_workflow_disabled = \\\n-            \'comment_review_workflow\' not in workflow_chain\n+        one_state_worklow_disabled = "comment_one_state_workflow" not in workflow_chain\n+        comment_review_workflow_disabled = (\n+            "comment_review_workflow" not in workflow_chain\n+        )\n         if one_state_worklow_disabled and comment_review_workflow_disabled:\n-            output.append(\'moderation_custom\')\n+            output.append("moderation_custom")\n         elif settings.moderation_enabled:\n-            output.append(\'moderation_enabled\')\n+            output.append("moderation_enabled")\n \n         if settings.edit_comment_enabled:\n-            output.append(\'edit_comment_enabled\')\n+            output.append("edit_comment_enabled")\n \n         if settings.delete_own_comment_enabled:\n-            output.append(\'delete_own_comment_enabled\')\n+            output.append("delete_own_comment_enabled")\n \n         # Anonymous comments\n         if settings.anonymous_comments:\n-            output.append(\'anonymous_comments\')\n+            output.append("anonymous_comments")\n \n         # Invalid mail setting\n-        ctrlOverview = getMultiAdapter((self.context, self.request),\n-                                       name=\'overview-controlpanel\')\n+        ctrlOverview = getMultiAdapter(\n+            (self.context, self.request), name="overview-controlpanel"\n+        )\n         if ctrlOverview.mailhost_warning():\n-            output.append(\'invalid_mail_setup\')\n+            output.append("invalid_mail_setup")\n \n         # Workflow\n         if workflow_chain:\n@@ -170,69 +167,71 @@ def settings(self):\n             output.append(discussion_workflow)\n \n         # Merge all settings into one string\n-        return \' \'.join(output)\n+        return " ".join(output)\n \n     def mailhost_warning(self):\n-        """Returns true if mailhost is not configured properly.\n-        """\n+        """Returns true if mailhost is not configured properly."""\n         # Copied from Products.CMFPlone/controlpanel/browser/overview.py\n         registry = getUtility(IRegistry)\n-        mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n+        mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n         mailhost = mail_settings.smtp_host\n         email = mail_settings.email_from_address\n         if mailhost and email:\n             pass\n         else:\n-            message = _(u\'discussion_text_no_mailhost_configured\',\n-                default=u\'You have not configured a mail host or a site \\\'From\\\' address, various features including contact forms, email notification and password reset will not work. Go to the E-Mail Settings to fix this.\')  # noqa: E501\n-            IStatusMessage(self.request).addStatusMessage(message, \'warning\')\n+            message = _(\n+                u"discussion_text_no_mailhost_configured",\n+                default=u"You have not configured a mail host or a site \'From\' address, various features including contact forms, email notification and password reset will not work. Go to the E-Mail Settings to fix this.",\n+            )  # noqa: E501\n+            IStatusMessage(self.request).addStatusMessage(message, "warning")\n \n     def custom_comment_workflow_warning(self):\n         """Return True if a custom comment workflow is enabled."""\n-        wftool = getToolByName(self.context, \'portal_workflow\', None)\n-        workflow_chain = wftool.getChainForPortalType(\'Discussion Item\')\n-        one_state_workflow_enabled = \\\n-            \'comment_one_state_workflow\' in workflow_chain\n-        comment_review_workflow_enabled = \\\n-            \'comment_review_workflow\' in workflow_chain\n+        wftool = getToolByName(self.context, "portal_workflow", None)\n+        workflow_chain = wftool.getChainForPortalType("Discussion Item")\n+        one_state_workflow_enabled = "comment_one_state_workflow" in workflow_chain\n+        comment_review_workflow_enabled = "comment_review_workflow" in workflow_chain\n         if one_state_workflow_enabled or comment_review_workflow_enabled:\n             pass\n         else:\n-            message = _(u\'discussion_text_custom_comment_workflow\',\n-                default=u\'You have configured a custom workflow for the \\\'Discussion Item\\\' content type. You can enable/disable the comment moderation in this control panel only if you use one of the default \\\'Discussion Item\\\' workflows. Go to the Types control panel to choose a workflow for the \\\'Discussion Item\\\' type.\')  # noqa: E501\n-            IStatusMessage(self.request).addStatusMessage(message, \'warning\')\n+            message = _(\n+                u"discussion_text_custom_comment_workflow",\n+                default=u"You have configured a custom workflow for the \'Discussion Item\' content type. You can enable/disable the comment moderation in this control panel only if you use one of the default \'Discussion Item\' workflows. Go to the Types control panel to choose a workflow for the \'Discussion Item\' type.",\n+            )  # noqa: E501\n+            IStatusMessage(self.request).addStatusMessage(message, "warning")\n \n \n def notify_configuration_changed(event):\n-    """Event subscriber that is called every time the configuration changed.\n-    """\n+    """Event subscriber that is called every time the configuration changed."""\n     portal = getSite()\n-    wftool = getToolByName(portal, \'portal_workflow\', None)\n+    wftool = getToolByName(portal, "portal_workflow", None)\n \n     if IRecordModifiedEvent.providedBy(event):\n         # Discussion control panel setting changed\n-        if event.record.fieldName == \'moderation_enabled\':\n+        if event.record.fieldName == "moderation_enabled":\n             # Moderation enabled has changed\n             if event.record.value is True:\n                 # Enable moderation workflow\n-                wftool.setChainForPortalTypes((\'Discussion Item\',),\n-                                              \'comment_review_workflow\')\n+                wftool.setChainForPortalTypes(\n+                    ("Discussion Item",), "comment_review_workflow"\n+                )\n             else:\n                 # Disable moderation workflow\n-                wftool.setChainForPortalTypes((\'Discussion Item\',),\n-                                              \'comment_one_state_workflow\')\n+                wftool.setChainForPortalTypes(\n+                    ("Discussion Item",), "comment_one_state_workflow"\n+                )\n \n     if IConfigurationChangedEvent.providedBy(event):\n         # Types control panel setting changed\n-        if \'workflow\' in event.data:\n+        if "workflow" in event.data:\n             registry = queryUtility(IRegistry)\n             settings = registry.forInterface(IDiscussionSettings, check=False)\n-            workflow_chain = wftool.getChainForPortalType(\'Discussion Item\')\n+            workflow_chain = wftool.getChainForPortalType("Discussion Item")\n             if workflow_chain:\n                 workflow = workflow_chain[0]\n-                if workflow == \'comment_one_state_workflow\':\n+                if workflow == "comment_one_state_workflow":\n                     settings.moderation_enabled = False\n-                elif workflow == \'comment_review_workflow\':\n+                elif workflow == "comment_review_workflow":\n                     settings.moderation_enabled = True\n                 else:\n                     # Custom workflow\ndiff --git a/plone/app/discussion/browser/conversation.py b/plone/app/discussion/browser/conversation.py\nindex 0017da4d..79622e05 100644\n--- a/plone/app/discussion/browser/conversation.py\n+++ b/plone/app/discussion/browser/conversation.py\n@@ -14,6 +14,7 @@\n \n try:\n     from plone.dexterity.interfaces import IDexterityContent\n+\n     DEXTERITY_INSTALLED = True\n except ImportError:\n     DEXTERITY_INSTALLED = False\n@@ -26,15 +27,14 @@ def traverse_parents(context):\n         if not IPloneSiteRoot.providedBy(obj):\n             obj_is_folderish = IFolderish.providedBy(obj)\n             obj_is_stuctural = not INonStructuralFolder.providedBy(obj)\n-            if (obj_is_folderish and obj_is_stuctural):\n-                flag = getattr(obj, \'allow_discussion\', None)\n+            if obj_is_folderish and obj_is_stuctural:\n+                flag = getattr(obj, "allow_discussion", None)\n                 if flag is not None:\n                     return flag\n     return None\n \n \n class ConversationView(object):\n-\n     def enabled(self):\n         if DEXTERITY_INSTALLED and IDexterityContent.providedBy(self.context):\n             return self._enabled_for_dexterity_types()\n@@ -42,7 +42,7 @@ def enabled(self):\n             return self._enabled_for_archetypes()\n \n     def _enabled_for_archetypes(self):\n-        """ Returns True if discussion is enabled for this conversation.\n+        """Returns True if discussion is enabled for this conversation.\n \n         This method checks five different settings in order to figure out if\n         discussion is enabled on a specific content object:\n@@ -82,7 +82,7 @@ def _enabled_for_archetypes(self):\n                 return False\n \n         # If discussion is disabled for the object, bail out\n-        obj_flag = getattr(aq_base(context), \'allow_discussion\', None)\n+        obj_flag = getattr(aq_base(context), "allow_discussion", None)\n         if obj_flag is False:\n             return False\n \n@@ -91,16 +91,16 @@ def _enabled_for_archetypes(self):\n         folder_allow_discussion = traverse_parents(context)\n \n         if folder_allow_discussion:\n-            if not getattr(self, \'allow_discussion\', None):\n+            if not getattr(self, "allow_discussion", None):\n                 return True\n         else:\n             if obj_flag:\n                 return True\n \n         # Check if discussion is allowed on the content type\n-        portal_types = getToolByName(self, \'portal_types\')\n+        portal_types = getToolByName(self, "portal_types")\n         document_fti = getattr(portal_types, context.portal_type)\n-        if not document_fti.getProperty(\'allow_discussion\'):\n+        if not document_fti.getProperty("allow_discussion"):\n             # If discussion is not allowed on the content type,\n             # check if \'allow discussion\' is overridden on the content object.\n             if not obj_flag:\n@@ -109,7 +109,7 @@ def _enabled_for_archetypes(self):\n         return True\n \n     def _enabled_for_dexterity_types(self):\n-        """ Returns True if discussion is enabled for this conversation.\n+        """Returns True if discussion is enabled for this conversation.\n \n         This method checks five different settings in order to figure out if\n         discussion is enable on a specific content object:\n@@ -134,11 +134,11 @@ def _enabled_for_dexterity_types(self):\n             return False\n \n         # Check if discussion is allowed on the content object\n-        if safe_hasattr(context, \'allow_discussion\'):\n+        if safe_hasattr(context, "allow_discussion"):\n             if context.allow_discussion is not None:\n                 return context.allow_discussion\n \n         # Check if discussion is allowed on the content type\n-        portal_types = getToolByName(self, \'portal_types\')\n+        portal_types = getToolByName(self, "portal_types")\n         document_fti = getattr(portal_types, context.portal_type)\n-        return document_fti.getProperty(\'allow_discussion\')\n+        return document_fti.getProperty("allow_discussion")\ndiff --git a/plone/app/discussion/browser/moderation.py b/plone/app/discussion/browser/moderation.py\nindex 911dfd0f..5603cd3e 100644\n--- a/plone/app/discussion/browser/moderation.py\n+++ b/plone/app/discussion/browser/moderation.py\n@@ -18,21 +18,20 @@\n \n # Translations for generated values in buttons\n # States\n-_(\'comment_pending\', default=\'pending\')\n+_("comment_pending", default="pending")\n # _(\'comment_approved\', default=\'published\')\n-_(\'comment_published\', default=\'published\')\n-_(\'comment_rejected\', default=\'rejected\')\n-_(\'comment_spam\', default=\'marked as spam\')\n+_("comment_published", default="published")\n+_("comment_rejected", default="rejected")\n+_("comment_spam", default="marked as spam")\n # Transitions\n-_(\'Recall\')\n-_(\'Approve\')\n-_(\'Reject\')\n-_(\'Spam\')\n+_("Recall")\n+_("Approve")\n+_("Reject")\n+_("Spam")\n PMF = _\n \n \n class TranslationHelper(BrowserView):\n-\n     def translate(self, text=""):\n         return _(text)\n \n@@ -44,22 +43,21 @@ def translate_comment_review_state(self, rs):\n class View(BrowserView):\n     """Show comment moderation view."""\n \n-    template = ViewPageTemplateFile(\'moderation.pt\')\n+    template = ViewPageTemplateFile("moderation.pt")\n     try:\n-        template.id = \'@@moderate-comments\'\n+        template.id = "@@moderate-comments"\n     except AttributeError:\n         # id is not writeable in Zope 2.12\n         pass\n \n     def __init__(self, context, request):\n         super(View, self).__init__(context, request)\n-        self.workflowTool = getToolByName(self.context, \'portal_workflow\')\n+        self.workflowTool = getToolByName(self.context, "portal_workflow")\n         self.transitions = []\n \n     def __call__(self):\n-        self.request.set(\'disable_border\', True)\n-        self.request.set(\'review_state\',\n-                         self.request.get(\'review_state\', \'pending\'))\n+        self.request.set("disable_border", True)\n+        self.request.set("review_state", self.request.get("review_state", "pending"))\n         return self.template()\n \n     def comments(self):\n@@ -67,15 +65,19 @@ def comments(self):\n \n         review_state is string or list of strings.\n         """\n-        catalog = getToolByName(self.context, \'portal_catalog\')\n-        if self.request.review_state == \'all\':\n-            return catalog(object_provides=IComment.__identifier__,\n-                           sort_on=\'created\',\n-                           sort_order=\'reverse\')\n-        return catalog(object_provides=IComment.__identifier__,\n-                       review_state=self.request.review_state,\n-                       sort_on=\'created\',\n-                       sort_order=\'reverse\')\n+        catalog = getToolByName(self.context, "portal_catalog")\n+        if self.request.review_state == "all":\n+            return catalog(\n+                object_provides=IComment.__identifier__,\n+                sort_on="created",\n+                sort_order="reverse",\n+            )\n+        return catalog(\n+            object_provides=IComment.__identifier__,\n+            review_state=self.request.review_state,\n+            sort_on="created",\n+            sort_order="reverse",\n+        )\n \n     def moderation_enabled(self):\n         """Return true if a review workflow is enabled on \'Discussion Item\'\n@@ -84,11 +86,10 @@ def moderation_enabled(self):\n         A \'review workflow\' is characterized by implementing a \'pending\'\n         workflow state.\n         """\n-        workflows = self.workflowTool.getChainForPortalType(\n-            \'Discussion Item\')\n+        workflows = self.workflowTool.getChainForPortalType("Discussion Item")\n         if workflows:\n             comment_workflow = self.workflowTool[workflows[0]]\n-            if \'pending\' in comment_workflow.states:\n+            if "pending" in comment_workflow.states:\n                 return True\n         return False\n \n@@ -100,11 +101,10 @@ def moderation_multiple_state_enabled(self):\n         A \'review multipe state workflow\' is characterized by implementing\n         a \'rejected\' workflow state and a \'spam\' workflow state.\n         """\n-        workflows = self.workflowTool.getChainForPortalType(\n-            \'Discussion Item\')\n+        workflows = self.workflowTool.getChainForPortalType("Discussion Item")\n         if workflows:\n             comment_workflow = self.workflowTool[workflows[0]]\n-            if \'spam\' in comment_workflow.states:\n+            if "spam" in comment_workflow.states:\n                 return True\n         return False\n \n@@ -125,27 +125,26 @@ def allowed_transitions(self, obj=None):\n         """\n         if obj:\n             transitions = [\n-                a for a in self.workflowTool.listActionInfos(object=obj)\n-                if a[\'category\'] == \'workflow\' and a[\'allowed\']\n-                ]\n+                a\n+                for a in self.workflowTool.listActionInfos(object=obj)\n+                if a["category"] == "workflow" and a["allowed"]\n+            ]\n             return transitions\n \n \n class ModerateCommentsEnabled(BrowserView):\n-\n     def __call__(self):\n         """Returns true if a \'review workflow\' is enabled on \'Discussion Item\'\n-           content type. A \'review workflow\' is characterized by implementing\n-           a \'pending\' workflow state.\n+        content type. A \'review workflow\' is characterized by implementing\n+        a \'pending\' workflow state.\n         """\n         context = aq_inner(self.context)\n-        workflowTool = getToolByName(context, \'portal_workflow\', None)\n-        comment_workflow = workflowTool.getChainForPortalType(\n-            \'Discussion Item\')\n+        workflowTool = getToolByName(context, "portal_workflow", None)\n+        comment_workflow = workflowTool.getChainForPortalType("Discussion Item")\n         if comment_workflow:\n             comment_workflow = comment_workflow[0]\n             comment_workflow = workflowTool[comment_workflow]\n-            if \'pending\' in comment_workflow.states:\n+            if "pending" in comment_workflow.states:\n                 return True\n \n         return False\n@@ -184,13 +183,15 @@ def __call__(self):\n             content_object.reindexObject()\n             notify(CommentDeletedEvent(self.context, comment))\n             IStatusMessage(self.context.REQUEST).addStatusMessage(\n-                _(\'Comment deleted.\'),\n-                type=\'info\')\n+                _("Comment deleted."), type="info"\n+            )\n         came_from = self.context.REQUEST.HTTP_REFERER\n         # if the referrer already has a came_from in it, don\'t redirect back\n-        if (len(came_from) == 0 or \'came_from=\' in came_from or\n-                not getToolByName(\n-                content_object, \'portal_url\').isURLInPortal(came_from)):\n+        if (\n+            len(came_from) == 0\n+            or "came_from=" in came_from\n+            or not getToolByName(content_object, "portal_url").isURLInPortal(came_from)\n+        ):\n             came_from = content_object.absolute_url()\n         return self.context.REQUEST.RESPONSE.redirect(came_from)\n \n@@ -198,8 +199,7 @@ def can_delete(self, reply):\n         """Returns true if current user has the \'Delete comments\'\n         permission.\n         """\n-        return getSecurityManager().checkPermission(\'Delete comments\',\n-                                                    aq_inner(reply))\n+        return getSecurityManager().checkPermission("Delete comments", aq_inner(reply))\n \n \n class DeleteOwnComment(DeleteComment):\n@@ -213,21 +213,18 @@ class DeleteOwnComment(DeleteComment):\n     """\n \n     def could_delete(self, comment=None):\n-        """Returns true if the comment could be deleted if it had no replies.\n-        """\n+        """Returns true if the comment could be deleted if it had no replies."""\n         sm = getSecurityManager()\n         comment = comment or aq_inner(self.context)\n         userid = sm.getUser().getId()\n-        return (\n-            sm.checkPermission(\'Delete own comments\', comment) and\n-            \'Owner\' in comment.get_local_roles_for_userid(userid)\n-        )\n+        return sm.checkPermission(\n+            "Delete own comments", comment\n+        ) and "Owner" in comment.get_local_roles_for_userid(userid)\n \n     def can_delete(self, comment=None):\n         comment = comment or self.context\n-        return (\n-            len(IReplies(aq_inner(comment))) == 0 and\n-            self.could_delete(comment=comment)\n+        return len(IReplies(aq_inner(comment))) == 0 and self.could_delete(\n+            comment=comment\n         )\n \n     def __call__(self):\n@@ -262,33 +259,37 @@ def __call__(self):\n         """Call CommentTransition."""\n         comment = aq_inner(self.context)\n         content_object = aq_parent(aq_parent(comment))\n-        workflow_action = self.request.form.get(\'workflow_action\', \'publish\')\n-        workflowTool = getToolByName(self.context, \'portal_workflow\')\n+        workflow_action = self.request.form.get("workflow_action", "publish")\n+        workflowTool = getToolByName(self.context, "portal_workflow")\n         workflowTool.doActionFor(comment, workflow_action)\n         comment.reindexObject()\n-        content_object.reindexObject(idxs=[\'total_comments\'])\n+        content_object.reindexObject(idxs=["total_comments"])\n         notify(CommentPublishedEvent(self.context, comment))\n         # for complexer workflows:\n         notify(CommentTransitionEvent(self.context, comment))\n-        comment_state_translated = \'\'\n+        comment_state_translated = ""\n         if workflowTool.getWorkflowsFor(comment):\n-            review_state_new = workflowTool.getInfoFor(ob=comment, name=\'review_state\')\n+            review_state_new = workflowTool.getInfoFor(ob=comment, name="review_state")\n             helper = self.context.restrictedTraverse("translationhelper")\n-            comment_state_translated = helper.translate_comment_review_state(review_state_new)\n+            comment_state_translated = helper.translate_comment_review_state(\n+                review_state_new\n+            )\n \n         msgid = _(\n             "comment_transmitted",\n-            default=\'Comment ${comment_state_translated}.\',\n-            mapping={"comment_state_translated": comment_state_translated})\n+            default="Comment ${comment_state_translated}.",\n+            mapping={"comment_state_translated": comment_state_translated},\n+        )\n         translated = self.context.translate(msgid)\n-        IStatusMessage(self.request).add(translated, type=\'info\')\n+        IStatusMessage(self.request).add(translated, type="info")\n \n         came_from = self.context.REQUEST.HTTP_REFERER\n         # if the referrer already has a came_from in it, don\'t redirect back\n-        if (len(came_from) == 0\n-            or \'came_from=\' in came_from\n-            or not getToolByName(\n-                content_object, \'portal_url\').isURLInPortal(came_from)):\n+        if (\n+            len(came_from) == 0\n+            or "came_from=" in came_from\n+            or not getToolByName(content_object, "portal_url").isURLInPortal(came_from)\n+        ):\n             came_from = content_object.absolute_url()\n         return self.context.REQUEST.RESPONSE.redirect(came_from)\n \n@@ -318,18 +319,18 @@ class BulkActionsView(BrowserView):\n \n     def __init__(self, context, request):\n         super(BulkActionsView, self).__init__(context, request)\n-        self.workflowTool = getToolByName(context, \'portal_workflow\')\n+        self.workflowTool = getToolByName(context, "portal_workflow")\n \n     def __call__(self):\n         """Call BulkActionsView."""\n-        if \'form.select.BulkAction\' in self.request:\n-            bulkaction = self.request.get(\'form.select.BulkAction\')\n-            self.paths = self.request.get(\'paths\')\n+        if "form.select.BulkAction" in self.request:\n+            bulkaction = self.request.get("form.select.BulkAction")\n+            self.paths = self.request.get("paths")\n             if self.paths:\n-                if bulkaction == \'-1\':\n+                if bulkaction == "-1":\n                     # no bulk action was selected\n                     pass\n-                elif bulkaction == \'delete\':\n+                elif bulkaction == "delete":\n                     self.delete()\n                 else:\n                     self.transmit(bulkaction)\n@@ -346,13 +347,14 @@ def transmit(self, action=None):\n             comment = context.restrictedTraverse(path)\n             content_object = aq_parent(aq_parent(comment))\n             allowed_transitions = [\n-                transition[\'id\'] for transition in self.workflowTool.listActionInfos(object=comment)\n-                if transition[\'category\'] == \'workflow\' and transition[\'allowed\']\n-                ]\n+                transition["id"]\n+                for transition in self.workflowTool.listActionInfos(object=comment)\n+                if transition["category"] == "workflow" and transition["allowed"]\n+            ]\n             if action in allowed_transitions:\n                 self.workflowTool.doActionFor(comment, action)\n                 comment.reindexObject()\n-                content_object.reindexObject(idxs=[\'total_comments\'])\n+                content_object.reindexObject(idxs=["total_comments"])\n                 notify(CommentPublishedEvent(content_object, comment))\n                 # for complexer workflows:\n                 notify(CommentTransitionEvent(self.context, comment))\n@@ -370,5 +372,5 @@ def delete(self):\n             conversation = aq_parent(comment)\n             content_object = aq_parent(conversation)\n             del conversation[comment.id]\n-            content_object.reindexObject(idxs=[\'total_comments\'])\n+            content_object.reindexObject(idxs=["total_comments"])\n             notify(CommentDeletedEvent(content_object, comment))\ndiff --git a/plone/app/discussion/browser/traversal.py b/plone/app/discussion/browser/traversal.py\nindex 1e2251c5..3dd55d4f 100644\n--- a/plone/app/discussion/browser/traversal.py\n+++ b/plone/app/discussion/browser/traversal.py\n@@ -29,8 +29,8 @@ def __init__(self, context, request=None):\n \n     def traverse(self, name, ignore):\n \n-        if name == \'default\':\n-            name = u\'\'\n+        if name == "default":\n+            name = u""\n \n         conversation = queryAdapter(self.context, IConversation, name=name)\n         if conversation is None:\ndiff --git a/plone/app/discussion/browser/validator.py b/plone/app/discussion/browser/validator.py\nindex d1582e9a..a9605387 100644\n--- a/plone/app/discussion/browser/validator.py\n+++ b/plone/app/discussion/browser/validator.py\n@@ -44,11 +44,12 @@ def validate(self, value):\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n \n-        if settings.captcha in (\'captcha\', \'recaptcha\', \'norobots\'):\n-            captcha = getMultiAdapter((aq_inner(self.context), self.request),\n-                                      name=settings.captcha)\n+        if settings.captcha in ("captcha", "recaptcha", "norobots"):\n+            captcha = getMultiAdapter(\n+                (aq_inner(self.context), self.request), name=settings.captcha\n+            )\n             if not captcha.verify(input=value):\n-                if settings.captcha == \'norobots\':\n+                if settings.captcha == "norobots":\n                     raise WrongNorobotsAnswer\n                 else:\n                     raise WrongCaptchaCode\n@@ -57,5 +58,4 @@ def validate(self, value):\n \n \n # Register Captcha validator for the Captcha field in the ICaptcha Form\n-validator.WidgetValidatorDiscriminators(CaptchaValidator,\n-                                        field=ICaptcha[\'captcha\'])\n+validator.WidgetValidatorDiscriminators(CaptchaValidator, field=ICaptcha["captcha"])\ndiff --git a/plone/app/discussion/catalog.py b/plone/app/discussion/catalog.py\nindex a8bab83e..0f9252f7 100644\n--- a/plone/app/discussion/catalog.py\n+++ b/plone/app/discussion/catalog.py\n@@ -25,7 +25,7 @@\n def total_comments(object):\n     # Total number of comments on a conversation\n     # Indexers won\'t work on old discussion items\n-    if object.meta_type != \'Discussion Item\':\n+    if object.meta_type != "Discussion Item":\n         try:\n             conversation = IConversation(object)\n             return conversation.total_comments()\n@@ -39,7 +39,7 @@ def total_comments(object):\n def last_comment_date(object):\n     # Date of the latest comment on a conversation\n     # Indexers won\'t work on old discussion items\n-    if object.meta_type != \'Discussion Item\':\n+    if object.meta_type != "Discussion Item":\n         try:\n             conversation = IConversation(object)\n             return conversation.last_comment_date\n@@ -53,7 +53,7 @@ def last_comment_date(object):\n def commentators(object):\n     # List of commentators on a conversation\n     # Indexers won\'t work on old discussion items\n-    if object.meta_type != \'Discussion Item\':\n+    if object.meta_type != "Discussion Item":\n         try:\n             conversation = IConversation(object)\n             return conversation.public_commentators\n@@ -62,6 +62,7 @@ def commentators(object):\n             # implemented an adapter for it\n             pass\n \n+\n # Comment Indexers\n \n \n@@ -76,24 +77,24 @@ def creator(object):\n         return\n     value = safe_unicode(object.creator)\n     if six.PY2:\n-        return value.encode(\'utf8\')\n+        return value.encode("utf8")\n     return value\n \n \n @indexer(IComment)\n def description(object):\n     # Return the first 25 words of the comment text and append \' [...]\'\n-    text = \' \'.join(\n-        object.getText(targetMimetype=\'text/plain\').split()[:MAX_DESCRIPTION],\n+    text = " ".join(\n+        object.getText(targetMimetype="text/plain").split()[:MAX_DESCRIPTION],\n     )\n     if len(object.getText().split()) > 25:\n-        text += \' [...]\'\n+        text += " [...]"\n     return text\n \n \n @indexer(IComment)\n def searchable_text(object):\n-    return object.getText(targetMimetype=\'text/plain\')\n+    return object.getText(targetMimetype="text/plain")\n \n \n @indexer(IComment)\n@@ -107,42 +108,42 @@ def in_response_to(object):\n def effective(object):\n     # the catalog index needs Zope DateTime instead of Python datetime\n     return DateTime(\n-            object.creation_date.year,\n-            object.creation_date.month,\n-            object.creation_date.day,\n-            object.creation_date.hour,\n-            object.creation_date.minute,\n-            object.creation_date.second,\n-            \'GMT\',\n-            )\n+        object.creation_date.year,\n+        object.creation_date.month,\n+        object.creation_date.day,\n+        object.creation_date.hour,\n+        object.creation_date.minute,\n+        object.creation_date.second,\n+        "GMT",\n+    )\n \n \n @indexer(IComment)\n def created(object):\n     # the catalog index needs Zope DateTime instead of Python datetime\n     return DateTime(\n-            object.creation_date.year,\n-            object.creation_date.month,\n-            object.creation_date.day,\n-            object.creation_date.hour,\n-            object.creation_date.minute,\n-            object.creation_date.second,\n-            \'GMT\',\n-            )\n+        object.creation_date.year,\n+        object.creation_date.month,\n+        object.creation_date.day,\n+        object.creation_date.hour,\n+        object.creation_date.minute,\n+        object.creation_date.second,\n+        "GMT",\n+    )\n \n \n @indexer(IComment)\n def modified(object):\n     # the catalog index needs Zope DateTime instead of Python datetime\n     return DateTime(\n-            object.modification_date.year,\n-            object.modification_date.month,\n-            object.modification_date.day,\n-            object.modification_date.hour,\n-            object.modification_date.minute,\n-            object.modification_date.second,\n-            \'GMT\',\n-            )\n+        object.modification_date.year,\n+        object.modification_date.month,\n+        object.modification_date.day,\n+        object.modification_date.hour,\n+        object.modification_date.minute,\n+        object.modification_date.second,\n+        "GMT",\n+    )\n \n \n # Override the conversation indexers for comments\ndiff --git a/plone/app/discussion/comment.py b/plone/app/discussion/comment.py\nindex cc1099f9..1d376be4 100644\n--- a/plone/app/discussion/comment.py\n+++ b/plone/app/discussion/comment.py\n@@ -44,57 +44,66 @@\n \n \n COMMENT_TITLE = _(\n-    u\'comment_title\',\n-    default=u\'${author_name} on ${content}\',\n-    )\n+    u"comment_title",\n+    default=u"${author_name} on ${content}",\n+)\n \n MAIL_NOTIFICATION_MESSAGE = _(\n-    u\'mail_notification_message\',\n+    u"mail_notification_message",\n     default=u\'A comment on "${title}" \'\n-            u\'has been posted here: ${link}\\n\\n\'\n-            u\'---\\n\'\n-            u\'${text}\\n\'\n-            u\'---\\n\',\n-    )\n+    u"has been posted here: ${link}\\n\\n"\n+    u"---\\n"\n+    u"${text}\\n"\n+    u"---\\n",\n+)\n \n MAIL_NOTIFICATION_MESSAGE_MODERATOR = _(\n-    u\'mail_notification_message_moderator2\',\n+    u"mail_notification_message_moderator2",\n     default=u\'A comment on "${title}" \'\n-            u\'has been posted by ${commentator}\\n\'\n-            u\'here: ${link}\\n\\n\'\n-            u\'---\\n\\n\'\n-            u\'${text}\\n\\n\'\n-            u\'---\\n\\n\'\n-            u\'Log in to moderate.\\n\\n\',\n-    )\n+    u"has been posted by ${commentator}\\n"\n+    u"here: ${link}\\n\\n"\n+    u"---\\n\\n"\n+    u"${text}\\n\\n"\n+    u"---\\n\\n"\n+    u"Log in to moderate.\\n\\n",\n+)\n \n-logger = logging.getLogger(\'plone.app.discussion\')\n+logger = logging.getLogger("plone.app.discussion")\n \n \n @implementer(IComment)\n-class Comment(CatalogAware, WorkflowAware, DynamicType, Traversable,\n-              RoleManager, Owned, Implicit, Persistent):\n+class Comment(\n+    CatalogAware,\n+    WorkflowAware,\n+    DynamicType,\n+    Traversable,\n+    RoleManager,\n+    Owned,\n+    Implicit,\n+    Persistent,\n+):\n     """A comment.\n \n     This object attempts to be as lightweight as possible. We implement a\n     number of standard methods instead of subclassing, to have total control\n     over what goes into the object.\n     """\n+\n     security = ClassSecurityInfo()\n \n-    meta_type = portal_type = \'Discussion Item\'\n+    meta_type = portal_type = "Discussion Item"\n     # This needs to be kept in sync with types/Discussion_Item.xml title\n-    fti_title = \'Comment\'\n+    fti_title = "Comment"\n \n     __parent__ = None\n \n     comment_id = None  # long\n     in_reply_to = None  # long\n \n-    title = u\'\'\n+    title = u""\n \n     mime_type = None\n-    text = u\'\'\n+    text = u""\n \n     creator = None\n     creation_date = None\n@@ -113,14 +122,17 @@ class Comment(CatalogAware, WorkflowAware, DynamicType, Traversable,\n \n     def __init__(self):\n         self.creation_date = self.modification_date = datetime.utcnow()\n-        self.mime_type = \'text/plain\'\n+        self.mime_type = "text/plain"\n \n         user = getSecurityManager().getUser()\n         if user and user.getId():\n             aclpath = [x for x in user.getPhysicalPath() if x]\n-            self._owner = (aclpath, user.getId(),)\n+            self._owner = (\n+                aclpath,\n+                user.getId(),\n+            )\n             self.__ac_local_roles__ = {\n-                user.getId(): [\'Owner\'],\n+                user.getId(): ["Owner"],\n             }\n \n     @property\n@@ -137,32 +149,32 @@ def getId(self):\n \n     def getText(self, targetMimetype=None):\n         """The body text of a comment."""\n-        transforms = getToolByName(self, \'portal_transforms\')\n+        transforms = getToolByName(self, "portal_transforms")\n \n         if targetMimetype is None:\n-            targetMimetype = \'text/x-html-safe\'\n+            targetMimetype = "text/x-html-safe"\n \n-        sourceMimetype = getattr(self, \'mime_type\', None)\n+        sourceMimetype = getattr(self, "mime_type", None)\n         if sourceMimetype is None:\n             registry = queryUtility(IRegistry)\n             settings = registry.forInterface(IDiscussionSettings, check=False)\n             sourceMimetype = settings.text_transform\n         text = self.text\n         if text is None:\n-            return \'\'\n+            return ""\n         if six.PY2 and isinstance(text, six.text_type):\n-            text = text.encode(\'utf8\')\n+            text = text.encode("utf8")\n         transform = transforms.convertTo(\n-            targetMimetype,\n-            text,\n-            context=self,\n-            mimetype=sourceMimetype)\n+            targetMimetype, text, context=self, mimetype=sourceMimetype\n+        )\n         if transform:\n             return transform.getData()\n         else:\n-            logger = logging.getLogger(\'plone.app.discussion\')\n-            msg = u\'Transform "{0}" => "{1}" not available. Failed to \' \\\n-                  u\'transform comment "{2}".\'\n+            logger = logging.getLogger("plone.app.discussion")\n+            msg = (\n+                u\'Transform "{0}" => "{1}" not available. Failed to \'\n+                u\'transform comment "{2}".\'\n+            )\n             logger.error(\n                 msg.format(\n                     sourceMimetype,\n@@ -182,8 +194,8 @@ def Title(self):\n             author_name = translate(\n                 Message(\n                     _(\n-                        u\'label_anonymous\',\n-                        default=u\'Anonymous\',\n+                        u"label_anonymous",\n+                        default=u"Anonymous",\n                     ),\n                 ),\n             )\n@@ -194,9 +206,14 @@ def Title(self):\n         # conversation, the parent of the conversation is the content object).\n         content = aq_base(self.__parent__.__parent__)\n         title = translate(\n-            Message(COMMENT_TITLE,\n-                    mapping={\'author_name\': safe_unicode(author_name),\n-                             \'content\': safe_unicode(content.Title())}))\n+            Message(\n+                COMMENT_TITLE,\n+                mapping={\n+                    "author_name": safe_unicode(author_name),\n+                    "content": safe_unicode(content.Title()),\n+                },\n+            )\n+        )\n         return title\n \n     def Creator(self):\n@@ -224,25 +241,23 @@ def opaqueValues(self):  # pragma: no cover\n \n \n def notify_workflow(obj, event):\n-    """Tell the workflow tool when a comment is added\n-    """\n-    tool = getToolByName(obj, \'portal_workflow\', None)\n+    """Tell the workflow tool when a comment is added"""\n+    tool = getToolByName(obj, "portal_workflow", None)\n     if tool is not None:\n         tool.notifyCreated(obj)\n \n \n def notify_content_object(obj, event):\n-    """Tell the content object when a comment is added\n-    """\n+    """Tell the content object when a comment is added"""\n     content_obj = aq_parent(aq_parent(obj))\n-    content_obj.reindexObject(idxs=(\'total_comments\',\n-                                    \'last_comment_date\',\n-                                    \'commentators\'))\n+    content_obj.reindexObject(\n+        idxs=("total_comments", "last_comment_date", "commentators")\n+    )\n \n \n def notify_content_object_deleted(obj, event):\n     """Remove all comments of a content object when the content object has been\n-       deleted.\n+    deleted.\n     """\n     if IAnnotatable.providedBy(obj):\n         conversation = IConversation(obj)\n@@ -251,40 +266,40 @@ def notify_content_object_deleted(obj, event):\n \n \n def notify_comment_added(obj, event):\n-    """ Notify custom discussion events when a comment is added or replied\n-    """\n+    """Notify custom discussion events when a comment is added or replied"""\n     conversation = aq_parent(obj)\n     context = aq_parent(conversation)\n-    if getattr(obj, \'in_reply_to\', None):\n+    if getattr(obj, "in_reply_to", None):\n         return notify(ReplyAddedEvent(context, obj))\n     return notify(CommentAddedEvent(context, obj))\n \n \n def notify_comment_modified(obj, event):\n-    """ Notify custom discussion events when a comment, or a reply, is modified\n-    """\n+    """Notify custom discussion events when a comment, or a reply, is modified"""\n     conversation = aq_parent(obj)\n     context = aq_parent(conversation)\n-    if getattr(obj, \'in_reply_to\', None):\n+    if getattr(obj, "in_reply_to", None):\n         return notify(ReplyModifiedEvent(context, obj))\n     return notify(CommentModifiedEvent(context, obj))\n \n \n def notify_comment_removed(obj, event):\n-    """ Notify custom discussion events when a comment or reply is removed\n-    """\n+    """Notify custom discussion events when a comment or reply is removed"""\n     conversation = aq_parent(obj)\n     context = aq_parent(conversation)\n-    if getattr(obj, \'in_reply_to\', None):\n+    if getattr(obj, "in_reply_to", None):\n         return notify(ReplyRemovedEvent(context, obj))\n     return notify(CommentRemovedEvent(context, obj))\n \n \n def notify_content_object_moved(obj, event):\n-    """Update all comments of a content object that has been moved.\n-    """\n-    if event.oldParent is None or event.newParent is None \\\n-            or event.oldName is None or event.newName is None:\n+    """Update all comments of a content object that has been moved."""\n+    if (\n+        event.oldParent is None\n+        or event.newParent is None\n+        or event.oldName is None\n+        or event.newName is None\n+    ):\n         return\n \n     # This method is also called for sublocations of moved objects. We\n@@ -293,21 +308,19 @@ def notify_content_object_moved(obj, event):\n     # in the object hierarchy. The object is already moved at this point. so\n     # obj.getPhysicalPath retruns the new path get the part of the path that\n     # was moved.\n-    moved_path = obj.getPhysicalPath()[\n-        len(event.newParent.getPhysicalPath()) + 1:\n-    ]\n+    moved_path = obj.getPhysicalPath()[len(event.newParent.getPhysicalPath()) + 1 :]\n \n     # Remove comments at the old location from catalog\n-    catalog = getToolByName(obj, \'portal_catalog\')\n-    old_path = \'/\'.join(\n-        event.oldParent.getPhysicalPath() +\n-        (event.oldName,) +\n-        moved_path,\n+    catalog = getToolByName(obj, "portal_catalog")\n+    old_path = "/".join(\n+        event.oldParent.getPhysicalPath() + (event.oldName,) + moved_path,\n+    )\n+    brains = catalog.searchResults(\n+        dict(\n+            path={"query": old_path},\n+            portal_type="Discussion Item",\n+        )\n     )\n-    brains = catalog.searchResults(dict(\n-        path={\'query\': old_path},\n-        portal_type=\'Discussion Item\',\n-    ))\n     for brain in brains:\n         catalog.uncatalog_object(brain.getPath())\n     # Reindex comment at the new location\n@@ -320,11 +333,11 @@ def notify_content_object_moved(obj, event):\n def notify_user(obj, event):\n     """Tell users when a comment has been added.\n \n-       This method composes and sends emails to all users that have added a\n-       comment to this conversation and enabled user notification.\n+    This method composes and sends emails to all users that have added a\n+    comment to this conversation and enabled user notification.\n \n-       This requires the user_notification setting to be enabled in the\n-       discussion control panel.\n+    This requires the user_notification setting to be enabled in the\n+    discussion control panel.\n     """\n \n     # Check if user notification is enabled\n@@ -334,9 +347,9 @@ def notify_user(obj, event):\n         return\n \n     # Get informations that are necessary to send an email\n-    mail_host = getToolByName(obj, \'MailHost\')\n+    mail_host = getToolByName(obj, "MailHost")\n     registry = getUtility(IRegistry)\n-    mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n+    mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n     sender = mail_settings.email_from_address\n \n     # Check if a sender address is available\n@@ -360,15 +373,14 @@ def notify_user(obj, event):\n     if not emails:\n         return\n \n-    subject = translate(_(u\'A comment has been posted.\'),\n-                        context=obj.REQUEST)\n+    subject = translate(_(u"A comment has been posted."), context=obj.REQUEST)\n     message = translate(\n         Message(\n             MAIL_NOTIFICATION_MESSAGE,\n             mapping={\n-                \'title\': safe_unicode(content_object.title),\n-                \'link\': content_object.absolute_url() + \'/view#\' + obj.id,\n-                \'text\': obj.text,\n+                "title": safe_unicode(content_object.title),\n+                "link": content_object.absolute_url() + "/view#" + obj.id,\n+                "text": obj.text,\n             },\n         ),\n         context=obj.REQUEST,\n@@ -381,12 +393,11 @@ def notify_user(obj, event):\n                 email,\n                 sender,\n                 subject,\n-                charset=\'utf-8\',\n+                charset="utf-8",\n             )\n         except SMTPException:\n             logger.error(\n-                \'SMTP exception while trying to send an \' +\n-                \'email from %s to %s\',\n+                "SMTP exception while trying to send an " + "email from %s to %s",\n                 sender,\n                 email,\n             )\n@@ -395,15 +406,15 @@ def notify_user(obj, event):\n def notify_moderator(obj, event):\n     """Tell the moderator when a comment needs attention.\n \n-       This method sends an email to the moderator if comment moderation a new\n-       comment has been added that needs to be approved.\n+    This method sends an email to the moderator if comment moderation a new\n+    comment has been added that needs to be approved.\n \n-       The moderator_notification setting has to be enabled in the discussion\n-       control panel.\n+    The moderator_notification setting has to be enabled in the discussion\n+    control panel.\n \n-       Configure the moderator e-mail address in the discussion control panel.\n-       If no moderator is configured but moderator notifications are turned on,\n-       the site admin email (from the mail control panel) will be used.\n+    Configure the moderator e-mail address in the discussion control panel.\n+    If no moderator is configured but moderator notifications are turned on,\n+    the site admin email (from the mail control panel) will be used.\n     """\n     # Check if moderator notification is enabled\n     registry = queryUtility(IRegistry)\n@@ -412,9 +423,9 @@ def notify_moderator(obj, event):\n         return\n \n     # Get informations that are necessary to send an email\n-    mail_host = getToolByName(obj, \'MailHost\')\n+    mail_host = getToolByName(obj, "MailHost")\n     registry = getUtility(IRegistry)\n-    mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n+    mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n     sender = mail_settings.email_from_address\n \n     if settings.moderator_email:\n@@ -430,22 +441,23 @@ def notify_moderator(obj, event):\n     content_object = aq_parent(conversation)\n \n     # Compose email\n-    subject = translate(_(u\'A comment has been posted.\'), context=obj.REQUEST)\n+    subject = translate(_(u"A comment has been posted."), context=obj.REQUEST)\n     message = translate(\n         Message(\n             MAIL_NOTIFICATION_MESSAGE_MODERATOR,\n             mapping={\n-                \'title\': safe_unicode(content_object.title),\n-                \'link\': content_object.absolute_url() + \'/view#\' + obj.id,\n-                \'text\': obj.text,\n-                \'commentator\': obj.author_email or translate(\n-                        Message(\n-                            _(\n-                                u\'label_anonymous\',\n-                                default=u\'Anonymous\',\n-                            ),\n+                "title": safe_unicode(content_object.title),\n+                "link": content_object.absolute_url() + "/view#" + obj.id,\n+                "text": obj.text,\n+                "commentator": obj.author_email\n+                or translate(\n+                    Message(\n+                        _(\n+                            u"label_anonymous",\n+                            default=u"Anonymous",\n                         ),\n-                    )\n+                    ),\n+                ),\n             },\n         ),\n         context=obj.REQUEST,\n@@ -453,12 +465,12 @@ def notify_moderator(obj, event):\n \n     # Send email\n     try:\n-        mail_host.send(message, mto, sender, subject, charset=\'utf-8\')\n+        mail_host.send(message, mto, sender, subject, charset="utf-8")\n     except SMTPException as e:\n         logger.error(\n-            \'SMTP exception (%s) while trying to send an \' +\n-            \'email notification to the comment moderator \' +\n-            \'(from %s to %s, message: %s)\',\n+            "SMTP exception (%s) while trying to send an "\n+            + "email notification to the comment moderator "\n+            + "(from %s to %s, message: %s)",\n             e,\n             sender,\n             mto,\ndiff --git a/plone/app/discussion/contentrules.py b/plone/app/discussion/contentrules.py\nindex c8f602a8..da324fcd 100644\n--- a/plone/app/discussion/contentrules.py\n+++ b/plone/app/discussion/contentrules.py\n@@ -7,101 +7,94 @@\n try:\n     from plone.stringinterp.adapters import BaseSubstitution\n except ImportError:\n+\n     class BaseSubstitution(object):\n-        """ Fallback class if plone.stringinterp is not available\n-        """\n+        """Fallback class if plone.stringinterp is not available"""\n \n         def __init__(self, context, **kwargs):\n             self.context = context\n \n+\n try:\n     from plone.app.contentrules.handlers import execute\n except ImportError:\n+\n     def execute(context, event):\n         return False\n \n \n def execute_comment(event):\n-    """ Execute comment content rules\n-    """\n+    """Execute comment content rules"""\n     execute(event.object, event)\n \n \n class CommentSubstitution(BaseSubstitution):\n-    """ Comment string substitution\n-    """\n+    """Comment string substitution"""\n \n     def __init__(self, context, **kwargs):\n         super(CommentSubstitution, self).__init__(context, **kwargs)\n \n     @property\n     def event(self):\n-        """ event that triggered the content rule\n-        """\n-        return self.context.REQUEST.get(\'event\')\n+        """event that triggered the content rule"""\n+        return self.context.REQUEST.get("event")\n \n     @property\n     def comment(self):\n-        """ Get changed inline comment\n-        """\n+        """Get changed inline comment"""\n         return self.event.comment\n \n \n class Id(CommentSubstitution):\n-    """ Comment id string substitution\n-    """\n-    category = _(u\'Comments\')\n-    description = _(u\'Comment id\')\n+    """Comment id string substitution"""\n+\n+    category = _(u"Comments")\n+    description = _(u"Comment id")\n \n     def safe_call(self):\n-        """ Safe call\n-        """\n-        return getattr(self.comment, \'comment_id\', u\'\')\n+        """Safe call"""\n+        return getattr(self.comment, "comment_id", u"")\n \n \n class Text(CommentSubstitution):\n-    """ Comment text\n-    """\n-    category = _(u\'Comments\')\n-    description = _(u\'Comment text\')\n+    """Comment text"""\n+\n+    category = _(u"Comments")\n+    description = _(u"Comment text")\n \n     def safe_call(self):\n-        """ Safe call\n-        """\n-        return getattr(self.comment, \'text\', u\'\')\n+        """Safe call"""\n+        return getattr(self.comment, "text", u"")\n \n \n class AuthorUserName(CommentSubstitution):\n-    """ Comment author user name string substitution\n-    """\n-    category = _(u\'Comments\')\n-    description = _(u\'Comment author user name\')\n+    """Comment author user name string substitution"""\n+\n+    category = _(u"Comments")\n+    description = _(u"Comment author user name")\n \n     def safe_call(self):\n-        """ Safe call\n-        """\n-        return getattr(self.comment, \'author_username\', u\'\')\n+        """Safe call"""\n+        return getattr(self.comment, "author_username", u"")\n \n \n class AuthorFullName(CommentSubstitution):\n-    """ Comment author full name string substitution\n-    """\n-    category = _(u\'Comments\')\n-    description = _(u\'Comment author full name\')\n+    """Comment author full name string substitution"""\n+\n+    category = _(u"Comments")\n+    description = _(u"Comment author full name")\n \n     def safe_call(self):\n-        """ Safe call\n-        """\n-        return getattr(self.comment, \'author_name\', u\'\')\n+        """Safe call"""\n+        return getattr(self.comment, "author_name", u"")\n \n \n class AuthorEmail(CommentSubstitution):\n-    """ Comment author email string substitution\n-    """\n-    category = _(u\'Comments\')\n-    description = _(u\'Comment author email\')\n+    """Comment author email string substitution"""\n+\n+    category = _(u"Comments")\n+    description = _(u"Comment author email")\n \n     def safe_call(self):\n-        """ Safe call\n-        """\n-        return getattr(self.comment, \'author_email\', u\'\')\n+        """Safe call"""\n+        return getattr(self.comment, "author_email", u"")\ndiff --git a/plone/app/discussion/conversation.py b/plone/app/discussion/conversation.py\nindex ae133018..6c28a162 100644\n--- a/plone/app/discussion/conversation.py\n+++ b/plone/app/discussion/conversation.py\n@@ -51,7 +51,7 @@ class Conversation(Traversable, Persistent, Explicit):\n \n     __allow_access_to_unprotected_subobjects__ = True\n \n-    def __init__(self, id=\'++conversation++default\'):\n+    def __init__(self, id="++conversation++default"):\n         self.id = id\n \n         # username -> count of comments; key is removed when count reaches 0\n@@ -72,12 +72,11 @@ def getId(self):\n \n     def enabled(self):\n         parent = aq_inner(self.__parent__)\n-        return parent.restrictedTraverse(\'@@conversation_view\').enabled()\n+        return parent.restrictedTraverse("@@conversation_view").enabled()\n \n     def total_comments(self):\n         public_comments = [\n-            x for x in self.values()\n-            if user_nobody.has_permission(\'View\', x)\n+            x for x in self.values() if user_nobody.has_permission("View", x)\n         ]\n         return len(public_comments)\n \n@@ -88,7 +87,7 @@ def last_comment_date(self):\n         comment_keys = self._comments.keys()\n         for comment_key in reversed(comment_keys):\n             comment = self._comments[comment_key]\n-            if user_nobody.has_permission(\'View\', comment):\n+            if user_nobody.has_permission("View", comment):\n                 return comment.creation_date\n         return None\n \n@@ -100,7 +99,7 @@ def commentators(self):\n     def public_commentators(self):\n         retval = set()\n         for comment in self._comments.values():\n-            if not user_nobody.has_permission(\'View\', comment):\n+            if not user_nobody.has_permission("View", comment):\n                 continue\n             retval.add(comment.author_username)\n         return tuple(retval)\n@@ -109,8 +108,7 @@ def objectIds(self):\n         return self._comments.keys()\n \n     def getComments(self, start=0, size=None):\n-        """Get unthreaded comments\n-        """\n+        """Get unthreaded comments"""\n         count = 0\n         for comment in self._comments.values(min=start):\n             # Yield the acquisition wrapped comment\n@@ -121,12 +119,11 @@ def getComments(self, start=0, size=None):\n                 return\n \n     def getThreads(self, start=0, size=None, root=0, depth=None):\n-        """Get threaded comments\n-        """\n+        """Get threaded comments"""\n \n         def recurse(comment_id, d=0):\n             # Yield the current comment before we look for its children\n-            yield {\'id\': comment_id, \'comment\': self[comment_id], \'depth\': d}\n+            yield {"id": comment_id, "comment": self[comment_id], "depth": d}\n \n             # Recurse if there are children and we are not out of our depth\n             if depth is None or d + 1 < depth:\n@@ -209,8 +206,7 @@ def __contains__(self, key):\n         return int(key) in self._comments\n \n     def __getitem__(self, key):\n-        """Get an item by its int key\n-        """\n+        """Get an item by its int key"""\n         try:\n             comment_id = int(key)\n         except ValueError:\n@@ -218,8 +214,7 @@ def __getitem__(self, key):\n         return self._comments[comment_id].__of__(self)\n \n     def __delitem__(self, key, suppress_container_modified=False):\n-        """Delete an item by its int key\n-        """\n+        """Delete an item by its int key"""\n \n         key = int(key)\n \n@@ -269,7 +264,13 @@ def keys(self):\n         return self._comments.keys()\n \n     def items(self):\n-        return [(i[0], i[1].__of__(self),) for i in self._comments.items()]\n+        return [\n+            (\n+                i[0],\n+                i[1].__of__(self),\n+            )\n+            for i in self._comments.items()\n+        ]\n \n     def values(self):\n         return [v.__of__(self) for v in self._comments.values()]\n@@ -283,7 +284,10 @@ def itervalues(self):\n \n     def iteritems(self):\n         for k, v in six.iteritems(self._comments):\n-            yield (k, v.__of__(self),)\n+            yield (\n+                k,\n+                v.__of__(self),\n+            )\n \n     def allowedContentTypes(self):\n         return []\n@@ -309,6 +313,7 @@ def conversationAdapterFactory(content):\n except ImportError:\n     pass\n else:\n+\n     @implementer(IConversation)  # pragma: no cover\n     @adapter(IAnnotatable)  # pragma: no cover\n     def conversationCanonicalAdapterFactory(content):  # pragma: no cover\n@@ -350,16 +355,14 @@ def __contains__(self, key):\n         return int(key) in self.children\n \n     def __getitem__(self, key):\n-        """Get an item by its int key\n-        """\n+        """Get an item by its int key"""\n         key = int(key)\n         if key not in self.children:\n             raise KeyError(key)\n         return self.conversation[key]\n \n     def __delitem__(self, key):\n-        """Delete an item by its int key\n-        """\n+        """Delete an item by its int key"""\n         key = int(key)\n         if key not in self.children:\n             raise KeyError(key)\n@@ -392,7 +395,10 @@ def itervalues(self):\n \n     def iteritems(self):\n         for key in self.children:\n-            yield (key, self.conversation[key],)\n+            yield (\n+                key,\n+                self.conversation[key],\n+            )\n \n     @property\n     def children(self):\n@@ -418,11 +424,12 @@ def __init__(self, context):\n         self.conversation = aq_parent(self.comment)\n         conversation_has_no_children = not hasattr(\n             self.conversation,\n-            \'_children\',\n+            "_children",\n         )\n         if self.conversation is None or conversation_has_no_children:\n-            raise TypeError("This adapter doesn\'t know what to do with the "\n-                            \'parent conversation\')\n+            raise TypeError(\n+                "This adapter doesn\'t know what to do with the " "parent conversation"\n+            )\n \n         self.comment_id = self.comment.comment_id\n \ndiff --git a/plone/app/discussion/events.py b/plone/app/discussion/events.py\nindex 85e84390..8cec3c38 100644\n--- a/plone/app/discussion/events.py\n+++ b/plone/app/discussion/events.py\n@@ -16,8 +16,7 @@\n \n @implementer(IDiscussionEvent)\n class DiscussionEvent(object):\n-    """ Custom event\n-    """\n+    """Custom event"""\n \n     def __init__(self, context, comment, **kwargs):\n         self.object = context\n@@ -28,55 +27,47 @@ def __init__(self, context, comment, **kwargs):\n         # Add event to the request to be able to access comment attributes\n         # in content-rules dynamic strings\n         request = context.REQUEST\n-        request.set(\'event\', self)\n+        request.set("event", self)\n \n \n @implementer(ICommentAddedEvent)\n class CommentAddedEvent(DiscussionEvent):\n-    """ Event to be triggered when a Comment is added\n-    """\n+    """Event to be triggered when a Comment is added"""\n \n \n @implementer(ICommentModifiedEvent)\n class CommentModifiedEvent(DiscussionEvent):\n-    """ Event to be triggered when a Comment is modified\n-    """\n+    """Event to be triggered when a Comment is modified"""\n \n \n @implementer(ICommentRemovedEvent)\n class CommentRemovedEvent(DiscussionEvent):\n-    """ Event to be triggered when a Comment is removed\n-    """\n+    """Event to be triggered when a Comment is removed"""\n \n \n @implementer(IReplyAddedEvent)\n class ReplyAddedEvent(DiscussionEvent):\n-    """ Event to be triggered when a Comment reply is added\n-    """\n+    """Event to be triggered when a Comment reply is added"""\n \n \n @implementer(IReplyModifiedEvent)\n class ReplyModifiedEvent(DiscussionEvent):\n-    """ Event to be triggered when a Comment reply is modified\n-    """\n+    """Event to be triggered when a Comment reply is modified"""\n \n \n @implementer(IReplyRemovedEvent)\n class ReplyRemovedEvent(DiscussionEvent):\n-    """ Event to be triggered when a Comment reply is removed\n-    """\n+    """Event to be triggered when a Comment reply is removed"""\n \n \n @implementer(ICommentDeletedEvent)\n class CommentDeletedEvent(DiscussionEvent):\n-    """ Event to be triggered when a Comment is deleted\n-    """\n+    """Event to be triggered when a Comment is deleted"""\n \n \n @implementer(ICommentPublishedEvent)\n class CommentPublishedEvent(DiscussionEvent):\n-    """ Event to be triggered when a Comment is publicated\n-    """\n+    """Event to be triggered when a Comment is publicated"""\n \n \n @implementer(ICommentTransitionEvent)\ndiff --git a/plone/app/discussion/interfaces.py b/plone/app/discussion/interfaces.py\nindex 76a0cee5..1a211f94 100644\n--- a/plone/app/discussion/interfaces.py\n+++ b/plone/app/discussion/interfaces.py\n@@ -14,9 +14,9 @@\n \n def isEmail(value):\n     portal = getUtility(ISiteRoot)\n-    reg_tool = getToolByName(portal, \'portal_registration\')\n+    reg_tool = getToolByName(portal, "portal_registration")\n     if not (value and reg_tool.isValidEmail(value)):\n-        raise Invalid(_(\'Invalid email address.\'))\n+        raise Invalid(_("Invalid email address."))\n     return True\n \n \n@@ -42,25 +42,24 @@ class IConversation(IIterableMapping):\n     """\n \n     total_comments = schema.Int(\n-        title=_(u\'Total number of public comments on this item\'),\n+        title=_(u"Total number of public comments on this item"),\n         min=0,\n         readonly=True,\n     )\n \n     last_comment_date = schema.Date(\n-        title=_(u\'Date of the most recent public comment\'),\n+        title=_(u"Date of the most recent public comment"),\n         readonly=True,\n     )\n \n     commentators = schema.Set(\n-        title=_(u\'The set of unique commentators (usernames)\'),\n+        title=_(u"The set of unique commentators (usernames)"),\n         readonly=True,\n     )\n \n     public_commentators = schema.Set(\n         title=_(\n-            u\'The set of unique commentators (usernames) \'\n-            u\'of published_comments\',\n+            u"The set of unique commentators (usernames) " u"of published_comments",\n         ),\n         readonly=True,\n     )\n@@ -72,8 +71,7 @@ def addComment(comment):\n         """\n \n     def __delitem__(key):\n-        """Delete the comment with the given key. The key is a long id.\n-        """\n+        """Delete the comment with the given key. The key is a long id."""\n \n     def getComments(start=0, size=None):\n         """Return an iterator of comment objects for rendering.\n@@ -130,8 +128,7 @@ def addComment(comment):\n         """\n \n     def __delitem__(key):\n-        """Delete the comment with the given key. The key is a long id.\n-        """\n+        """Delete the comment with the given key. The key is a long id."""\n \n \n class IComment(Interface):\n@@ -141,61 +138,58 @@ class IComment(Interface):\n     """\n \n     portal_type = schema.ASCIILine(\n-        title=_(u\'Portal type\'),\n-        default=\'Discussion Item\',\n+        title=_(u"Portal type"),\n+        default="Discussion Item",\n     )\n \n-    __parent__ = schema.Object(\n-        title=_(u\'Conversation\'), schema=Interface)\n+    __parent__ = schema.Object(title=_(u"Conversation"), schema=Interface)\n \n-    __name__ = schema.TextLine(title=_(u\'Name\'))\n+    __name__ = schema.TextLine(title=_(u"Name"))\n \n-    comment_id = schema.Int(\n-        title=_(u\'A comment id unique to this conversation\'))\n+    comment_id = schema.Int(title=_(u"A comment id unique to this conversation"))\n \n     in_reply_to = schema.Int(\n-        title=_(u\'Id of comment this comment is in reply to\'),\n+        title=_(u"Id of comment this comment is in reply to"),\n         required=False,\n     )\n \n     # for logged in comments - set to None for anonymous\n-    author_username = schema.TextLine(title=_(u\'Name\'), required=False)\n+    author_username = schema.TextLine(title=_(u"Name"), required=False)\n \n     # for anonymous comments only, set to None for logged in comments\n-    author_name = schema.TextLine(title=_(u\'Name\'), required=False)\n-    author_email = schema.TextLine(title=_(u\'Email\'),\n-                                   required=False,\n-                                   constraint=isEmail,\n-                                   )\n+    author_name = schema.TextLine(title=_(u"Name"), required=False)\n+    author_email = schema.TextLine(\n+        title=_(u"Email"),\n+        required=False,\n+        constraint=isEmail,\n+    )\n \n-    title = schema.TextLine(title=_(u\'label_subject\',\n-                                    default=u\'Subject\'))\n+    title = schema.TextLine(title=_(u"label_subject", default=u"Subject"))\n \n-    mime_type = schema.ASCIILine(title=_(u\'MIME type\'), default=\'text/plain\')\n+    mime_type = schema.ASCIILine(title=_(u"MIME type"), default="text/plain")\n     text = schema.Text(\n         title=_(\n-            u\'label_comment\',\n-            default=u\'Comment\',\n+            u"label_comment",\n+            default=u"Comment",\n         ),\n     )\n \n     user_notification = schema.Bool(\n         title=_(\n-            u\'Notify me of new comments via email.\',\n+            u"Notify me of new comments via email.",\n         ),\n         required=False,\n     )\n \n-    creator = schema.TextLine(title=_(u\'Username of the commenter\'))\n-    creation_date = schema.Date(title=_(u\'Creation date\'))\n-    modification_date = schema.Date(title=_(u\'Modification date\'))\n+    creator = schema.TextLine(title=_(u"Username of the commenter"))\n+    creation_date = schema.Date(title=_(u"Creation date"))\n+    modification_date = schema.Date(title=_(u"Modification date"))\n \n \n class ICaptcha(Interface):\n-    """Captcha/ReCaptcha text field to extend the existing comment form.\n-    """\n-    captcha = schema.TextLine(title=_(u\'Captcha\'),\n-                              required=False)\n+    """Captcha/ReCaptcha text field to extend the existing comment form."""\n+\n+    captcha = schema.TextLine(title=_(u"Captcha"), required=False)\n \n \n class IDiscussionSettings(Interface):\n@@ -210,40 +204,38 @@ class IDiscussionSettings(Interface):\n     # - Search control panel: Show comments in search results\n \n     globally_enabled = schema.Bool(\n-        title=_(u\'label_globally_enabled\',\n-                default=u\'Globally enable comments\'),\n+        title=_(u"label_globally_enabled", default=u"Globally enable comments"),\n         description=_(\n-            u\'help_globally_enabled\',\n-            default=u\'If selected, users are able to post comments on the \'\n-                    u\'site. However, you will still need to enable comments \'\n-                    u\'for specific content types, folders or content \'\n-                    u\'objects before users will be able to post comments.\',\n+            u"help_globally_enabled",\n+            default=u"If selected, users are able to post comments on the "\n+            u"site. However, you will still need to enable comments "\n+            u"for specific content types, folders or content "\n+            u"objects before users will be able to post comments.",\n         ),\n         required=False,\n         default=False,\n     )\n \n     anonymous_comments = schema.Bool(\n-        title=_(u\'label_anonymous_comments\',\n-                default=\'Enable anonymous comments\'),\n+        title=_(u"label_anonymous_comments", default="Enable anonymous comments"),\n         description=_(\n-            u\'help_anonymous_comments\',\n-            default=u\'If selected, anonymous users are able to post \'\n-                    u\'comments without logging in. It is highly \'\n-                    u\'recommended to use a captcha solution to prevent \'\n-                    u\'spam if this setting is enabled.\',\n+            u"help_anonymous_comments",\n+            default=u"If selected, anonymous users are able to post "\n+            u"comments without logging in. It is highly "\n+            u"recommended to use a captcha solution to prevent "\n+            u"spam if this setting is enabled.",\n         ),\n         required=False,\n         default=False,\n     )\n \n     anonymous_email_enabled = schema.Bool(\n-        title=_(u\'label_anonymous_email_enabled\',\n-                default=u\'Enable anonymous email field\'),\n+        title=_(\n+            u"label_anonymous_email_enabled", default=u"Enable anonymous email field"\n+        ),\n         description=_(\n-            u\'help_anonymous_email_enabled\',\n-            default=u\'If selected, anonymous user will have to \'\n-                    u\'give their email.\',\n+            u"help_anonymous_email_enabled",\n+            default=u"If selected, anonymous user will have to " u"give their email.",\n         ),\n         required=False,\n         default=False,\n@@ -251,130 +243,137 @@ class IDiscussionSettings(Interface):\n \n     moderation_enabled = schema.Bool(\n         title=_(\n-            u\'label_moderation_enabled\',\n-            default=\'Enable comment moderation\',\n+            u"label_moderation_enabled",\n+            default="Enable comment moderation",\n         ),\n         description=_(\n-            u\'help_moderation_enabled\',\n+            u"help_moderation_enabled",\n             default=u\'If selected, comments will enter a "Pending" state \'\n-                    u\'in which they are invisible to the public. A user \'\n-                    u\'with the "Review comments" permission ("Reviewer" \'\n-                    u\'or "Manager") can approve comments to make them \'\n-                    u\'visible to the public. If you want to enable a \'\n-                    u\'custom comment workflow, you have to go to the \'\n-                    u\'types control panel.\',\n+            u"in which they are invisible to the public. A user "\n+            u\'with the "Review comments" permission ("Reviewer" \'\n+            u\'or "Manager") can approve comments to make them \'\n+            u"visible to the public. If you want to enable a "\n+            u"custom comment workflow, you have to go to the "\n+            u"types control panel.",\n         ),\n         required=False,\n         default=False,\n     )\n \n     edit_comment_enabled = schema.Bool(\n-        title=_(u\'label_edit_comment_enabled\',\n-                default=\'Enable editing of comments\'),\n-        description=_(u\'help_edit_comment_enabled\',\n-                      default=u\'If selected, supports editing \'\n-                      \'of comments for users with the "Edit comments" \'\n-                      \'permission.\'),\n+        title=_(u"label_edit_comment_enabled", default="Enable editing of comments"),\n+        description=_(\n+            u"help_edit_comment_enabled",\n+            default=u"If selected, supports editing "\n+            \'of comments for users with the "Edit comments" \'\n+            "permission.",\n+        ),\n         required=False,\n         default=False,\n     )\n \n     delete_own_comment_enabled = schema.Bool(\n-        title=_(u\'label_delete_own_comment_enabled\',\n-                default=\'Enable deleting own comments\'),\n-        description=_(u\'help_delete_own_comment_enabled\',\n-                      default=u\'If selected, supports deleting \'\n-                      \'of own comments for users with the \'\n-                      \'"Delete own comments" permission.\'),\n+        title=_(\n+            u"label_delete_own_comment_enabled", default="Enable deleting own comments"\n+        ),\n+        description=_(\n+            u"help_delete_own_comment_enabled",\n+            default=u"If selected, supports deleting "\n+            "of own comments for users with the "\n+            \'"Delete own comments" permission.\',\n+        ),\n         required=False,\n         default=False,\n     )\n \n     text_transform = schema.Choice(\n-        title=_(u\'label_text_transform\',\n-                default=\'Comment text transform\'),\n+        title=_(u"label_text_transform", default="Comment text transform"),\n         description=_(\n-            u\'help_text_transform\',\n-            default=u\'Use this setting to choose if the comment text \'\n-                    u\'should be transformed in any way. You can choose \'\n-                    u\'between "Plain text" and "Intelligent text". \'\n-                    u\'"Intelligent text" converts plain text into HTML \'\n-                    u\'where line breaks and indentation is preserved, \'\n-                    u\'and web and email addresses are made into \'\n-                    u\'clickable links.\'),\n+            u"help_text_transform",\n+            default=u"Use this setting to choose if the comment text "\n+            u"should be transformed in any way. You can choose "\n+            u\'between "Plain text" and "Intelligent text". \'\n+            u\'"Intelligent text" converts plain text into HTML \'\n+            u"where line breaks and indentation is preserved, "\n+            u"and web and email addresses are made into "\n+            u"clickable links.",\n+        ),\n         required=True,\n-        default=\'text/plain\',\n-        vocabulary=\'plone.app.discussion.vocabularies.TextTransformVocabulary\',\n+        default="text/plain",\n+        vocabulary="plone.app.discussion.vocabularies.TextTransformVocabulary",\n     )\n \n     captcha = schema.Choice(\n-        title=_(u\'label_captcha\',\n-                default=\'Captcha\'),\n+        title=_(u"label_captcha", default="Captcha"),\n         description=_(\n-            u\'help_captcha\',\n-            default=u\'Use this setting to enable or disable Captcha \'\n-                    u\'validation for comments. Install \'\n-                    u\'plone.formwidget.captcha, \'\n-                    u\'plone.formwidget.recaptcha, collective.akismet, or \'\n-                    u\'collective.z3cform.norobots if there are no options \'\n-                    u\'available.\'),\n+            u"help_captcha",\n+            default=u"Use this setting to enable or disable Captcha "\n+            u"validation for comments. Install "\n+            u"plone.formwidget.captcha, "\n+            u"plone.formwidget.recaptcha, collective.akismet, or "\n+            u"collective.z3cform.norobots if there are no options "\n+            u"available.",\n+        ),\n         required=True,\n-        default=\'disabled\',\n-        vocabulary=\'plone.app.discussion.vocabularies.CaptchaVocabulary\',\n+        default="disabled",\n+        vocabulary="plone.app.discussion.vocabularies.CaptchaVocabulary",\n     )\n \n     show_commenter_image = schema.Bool(\n-        title=_(u\'label_show_commenter_image\',\n-                default=u\'Show commenter image\'),\n+        title=_(u"label_show_commenter_image", default=u"Show commenter image"),\n         description=_(\n-            u\'help_show_commenter_image\',\n-            default=u\'If selected, an image of the user is shown next to \'\n-                    u\'the comment.\'),\n+            u"help_show_commenter_image",\n+            default=u"If selected, an image of the user is shown next to "\n+            u"the comment.",\n+        ),\n         required=False,\n         default=True,\n     )\n \n     moderator_notification_enabled = schema.Bool(\n-        title=_(u\'label_moderator_notification_enabled\',\n-                default=u\'Enable moderator email notification\'),\n+        title=_(\n+            u"label_moderator_notification_enabled",\n+            default=u"Enable moderator email notification",\n+        ),\n         description=_(\n-            u\'help_moderator_notification_enabled\',\n-            default=u\'If selected, the moderator is notified if a comment \'\n-                    u\'needs attention. The moderator email address can \'\n-                    u\'be set below.\'),\n+            u"help_moderator_notification_enabled",\n+            default=u"If selected, the moderator is notified if a comment "\n+            u"needs attention. The moderator email address can "\n+            u"be set below.",\n+        ),\n         required=False,\n         default=False,\n     )\n \n     moderator_email = schema.ASCIILine(\n         title=_(\n-            u\'label_moderator_email\',\n-            default=u\'Moderator Email Address\',\n+            u"label_moderator_email",\n+            default=u"Moderator Email Address",\n         ),\n         description=_(\n-            u\'help_moderator_email\',\n-            default=u\'Address to which moderator notifications \'\n-                    u\'will be sent.\'),\n+            u"help_moderator_email",\n+            default=u"Address to which moderator notifications " u"will be sent.",\n+        ),\n         required=False,\n     )\n \n     user_notification_enabled = schema.Bool(\n         title=_(\n-            u\'label_user_notification_enabled\',\n-            default=u\'Enable user email notification\',\n+            u"label_user_notification_enabled",\n+            default=u"Enable user email notification",\n         ),\n         description=_(\n-            u\'help_user_notification_enabled\',\n-            default=u\'If selected, users can choose to be notified \'\n-                    u\'of new comments by email.\'),\n+            u"help_user_notification_enabled",\n+            default=u"If selected, users can choose to be notified "\n+            u"of new comments by email.",\n+        ),\n         required=False,\n         default=False,\n     )\n \n \n class IDiscussionLayer(Interface):\n-    """Request marker installed via browserlayer.xml.\n-    """\n+    """Request marker installed via browserlayer.xml."""\n \n \n class ICommentingTool(Interface):\n@@ -384,54 +383,46 @@ class ICommentingTool(Interface):\n     of Plone that had a portal_discussion tool.\n     """\n \n+\n #\n # Custom events\n #\n \n \n class IDiscussionEvent(IObjectEvent):\n-    """ Discussion custom event\n-    """\n+    """Discussion custom event"""\n \n \n class ICommentAddedEvent(IDiscussionEvent):\n-    """ Comment added\n-    """\n+    """Comment added"""\n \n \n class ICommentModifiedEvent(IDiscussionEvent):\n-    """ Comment modified\n-    """\n+    """Comment modified"""\n \n \n class ICommentRemovedEvent(IDiscussionEvent):\n-    """ Comment removed\n-    """\n+    """Comment removed"""\n \n \n class IReplyAddedEvent(IDiscussionEvent):\n-    """ Comment reply added\n-    """\n+    """Comment reply added"""\n \n \n class IReplyModifiedEvent(IDiscussionEvent):\n-    """ Comment reply modified\n-    """\n+    """Comment reply modified"""\n \n \n class IReplyRemovedEvent(IDiscussionEvent):\n-    """ Comment reply removed\n-    """\n+    """Comment reply removed"""\n \n \n class ICommentPublishedEvent(IDiscussionEvent):\n-    """ Notify user on comment publication\n-    """\n+    """Notify user on comment publication"""\n \n \n class ICommentDeletedEvent(IDiscussionEvent):\n-    """ Notify user on comment delete\n-    """\n+    """Notify user on comment delete"""\n \n \n class ICommentTransitionEvent(IDiscussionEvent):\ndiff --git a/plone/app/discussion/subscribers.py b/plone/app/discussion/subscribers.py\nindex 0234c972..5f208676 100644\n--- a/plone/app/discussion/subscribers.py\n+++ b/plone/app/discussion/subscribers.py\n@@ -3,12 +3,10 @@\n \n \n def index_object(obj, event):\n-    """Index the object when it is added/modified to the conversation.\n-    """\n+    """Index the object when it is added/modified to the conversation."""\n     obj.indexObject()\n \n \n def unindex_object(obj, event):\n-    """Unindex the object when it is removed from the conversation.\n-    """\n+    """Unindex the object when it is removed from the conversation."""\n     obj.unindexObject()\ndiff --git a/plone/app/discussion/testing.py b/plone/app/discussion/testing.py\nindex 5a4060ba..c78b6438 100644\n--- a/plone/app/discussion/testing.py\n+++ b/plone/app/discussion/testing.py\n@@ -15,40 +15,43 @@\n \n try:\n     import plone.app.collection  # noqa\n-    COLLECTION_TYPE = \'Collection\'\n+\n+    COLLECTION_TYPE = "Collection"\n except ImportError:\n-    COLLECTION_TYPE = \'Topic\'\n+    COLLECTION_TYPE = "Topic"\n \n \n class PloneAppDiscussion(PloneSandboxLayer):\n \n     defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n-    USER_NAME = \'johndoe\'\n-    USER_PASSWORD = \'secret\'\n-    MEMBER_NAME = \'janedoe\'\n-    MEMBER_PASSWORD = \'secret\'\n-    USER_WITH_FULLNAME_NAME = \'jim\'\n-    USER_WITH_FULLNAME_FULLNAME = \'Jim Fulton\'\n-    USER_WITH_FULLNAME_PASSWORD = \'secret\'\n-    MANAGER_USER_NAME = \'manager\'\n-    MANAGER_USER_PASSWORD = \'secret\'\n-    REVIEWER_NAME = \'reviewer\'\n-    REVIEWER_PASSWORD = \'secret\'\n+    USER_NAME = "johndoe"\n+    USER_PASSWORD = "secret"\n+    MEMBER_NAME = "janedoe"\n+    MEMBER_PASSWORD = "secret"\n+    USER_WITH_FULLNAME_NAME = "jim"\n+    USER_WITH_FULLNAME_FULLNAME = "Jim Fulton"\n+    USER_WITH_FULLNAME_PASSWORD = "secret"\n+    MANAGER_USER_NAME = "manager"\n+    MANAGER_USER_PASSWORD = "secret"\n+    REVIEWER_NAME = "reviewer"\n+    REVIEWER_PASSWORD = "secret"\n \n     def setUpZope(self, app, configurationContext):\n         # Load ZCML\n         import plone.app.discussion\n-        self.loadZCML(package=plone.app.discussion,\n-                      context=configurationContext,\n-                      )\n+\n+        self.loadZCML(\n+            package=plone.app.discussion,\n+            context=configurationContext,\n+        )\n \n     def setUpPloneSite(self, portal):\n         # Install into Plone site using portal_setup\n-        applyProfile(portal, \'plone.app.discussion:default\')\n+        applyProfile(portal, "plone.app.discussion:default")\n \n         # Creates some users\n-        acl_users = getToolByName(portal, \'acl_users\')\n+        acl_users = getToolByName(portal, "acl_users")\n         acl_users.userFolderAddUser(\n             self.USER_NAME,\n             self.USER_PASSWORD,\n@@ -58,41 +61,42 @@ def setUpPloneSite(self, portal):\n         acl_users.userFolderAddUser(\n             self.MEMBER_NAME,\n             self.MEMBER_PASSWORD,\n-            [\'Member\'],\n+            ["Member"],\n             [],\n         )\n         acl_users.userFolderAddUser(\n             self.USER_WITH_FULLNAME_NAME,\n             self.USER_WITH_FULLNAME_PASSWORD,\n-            [\'Member\'],\n+            ["Member"],\n             [],\n         )\n         acl_users.userFolderAddUser(\n             self.REVIEWER_NAME,\n             self.REVIEWER_PASSWORD,\n-            [\'Member\'],\n+            ["Member"],\n             [],\n         )\n-        mtool = getToolByName(portal, \'portal_membership\', None)\n-        gtool = getToolByName(portal, \'portal_groups\', None)\n-        gtool.addPrincipalToGroup(self.REVIEWER_NAME, \'Reviewers\')\n-        mtool.addMember(\'jim\', \'Jim\', [\'Member\'], [])\n-        mtool.getMemberById(\'jim\').setMemberProperties(\n-            {\'fullname\': \'Jim Fult\\xc3\\xb8rn\'})\n+        mtool = getToolByName(portal, "portal_membership", None)\n+        gtool = getToolByName(portal, "portal_groups", None)\n+        gtool.addPrincipalToGroup(self.REVIEWER_NAME, "Reviewers")\n+        mtool.addMember("jim", "Jim", ["Member"], [])\n+        mtool.getMemberById("jim").setMemberProperties(\n+            {"fullname": "Jim Fult\\xc3\\xb8rn"}\n+        )\n \n         acl_users.userFolderAddUser(\n             self.MANAGER_USER_NAME,\n             self.MANAGER_USER_PASSWORD,\n-            [\'Manager\'],\n+            ["Manager"],\n             [],\n         )\n \n         # Add a document\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n         portal.invokeFactory(\n-            id=\'doc1\',\n-            title=\'Document 1\',\n-            type_name=\'Document\',\n+            id="doc1",\n+            title="Document 1",\n+            type_name="Document",\n         )\n \n \n@@ -112,12 +116,12 @@ def setUpPloneSite(self, portal):\n PLONE_APP_DISCUSSION_ROBOT_FIXTURE = PloneAppDiscussionRobot()\n PLONE_APP_DISCUSSION_FIXTURE = PloneAppDiscussion()\n PLONE_APP_DISCUSSION_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_DISCUSSION_FIXTURE,),\n-    name=\'PloneAppDiscussion:Integration\')\n+    bases=(PLONE_APP_DISCUSSION_FIXTURE,), name="PloneAppDiscussion:Integration"\n+)\n PLONE_APP_DISCUSSION_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_APP_DISCUSSION_FIXTURE,),\n-    name=\'PloneAppDiscussion:Functional\')\n+    bases=(PLONE_APP_DISCUSSION_FIXTURE,), name="PloneAppDiscussion:Functional"\n+)\n PLONE_APP_DISCUSSION_ROBOT_TESTING = FunctionalTesting(\n     bases=(PLONE_APP_DISCUSSION_ROBOT_FIXTURE,),\n-    name=\'PloneAppDiscussion:Robot\',\n+    name="PloneAppDiscussion:Robot",\n )\ndiff --git a/plone/app/discussion/tests/test_catalog.py b/plone/app/discussion/tests/test_catalog.py\nindex facf5775..86cbaed0 100644\n--- a/plone/app/discussion/tests/test_catalog.py\n+++ b/plone/app/discussion/tests/test_catalog.py\n@@ -23,33 +23,29 @@ class CatalogSetupTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n     def test_catalog_installed(self):\n         self.assertTrue(\n-            \'total_comments\' in\n-            self.portal.portal_catalog.indexes(),\n+            "total_comments" in self.portal.portal_catalog.indexes(),\n         )\n         self.assertTrue(\n-            \'commentators\' in\n-            self.portal.portal_catalog.indexes(),\n+            "commentators" in self.portal.portal_catalog.indexes(),\n         )\n         self.assertTrue(\n-            \'total_comments\' in\n-            self.portal.portal_catalog.schema(),\n+            "total_comments" in self.portal.portal_catalog.schema(),\n         )\n         self.assertTrue(\n-            \'in_response_to\' in\n-            self.portal.portal_catalog.schema(),\n+            "in_response_to" in self.portal.portal_catalog.schema(),\n         )\n \n     def test_collection_criteria_installed(self):\n-        if \'portal_atct\' not in self.portal:\n+        if "portal_atct" not in self.portal:\n             return\n         try:\n-            self.portal.portal_atct.getIndex(\'commentators\')\n-            self.portal.portal_atct.getIndex(\'total_comments\')\n-            self.portal.portal_atct.getMetadata(\'total_comments\')\n+            self.portal.portal_atct.getIndex("commentators")\n+            self.portal.portal_atct.getIndex("total_comments")\n+            self.portal.portal_atct.getMetadata("total_comments")\n         except AttributeError:\n             self.fail()\n \n@@ -59,19 +55,19 @@ class ConversationCatalogTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         workflow = self.portal.portal_workflow\n-        workflow.doActionFor(self.portal.doc1, \'publish\')\n+        workflow.doActionFor(self.portal.doc1, "publish")\n \n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n         conversation = IConversation(self.portal.doc1)\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.title = \'Comment 1\'\n-        comment1.text = \'Comment text\'\n-        comment1.creator = \'jim\'\n-        comment1.author_username = \'Jim\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.title = "Comment 1"\n+        comment1.text = "Comment text"\n+        comment1.creator = "jim"\n+        comment1.author_username = "Jim"\n         comment1.creation_date = datetime(2006, 9, 17, 14, 18, 12)\n         comment1.modification_date = datetime(2006, 9, 17, 14, 18, 12)\n \n@@ -81,9 +77,9 @@ def setUp(self):\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Document\',\n+                portal_type="Document",\n             ),\n         )\n         self.conversation = conversation\n@@ -93,54 +89,54 @@ def setUp(self):\n         self.new_comment1_id = new_comment1_id\n \n     def test_total_comments(self):\n-        self.assertTrue(\'total_comments\' in self.doc1_brain)\n+        self.assertTrue("total_comments" in self.doc1_brain)\n         self.assertEqual(self.doc1_brain.total_comments, 1)\n \n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.title = \'Comment 2\'\n-        comment2.text = \'Comment text\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.title = "Comment 2"\n+        comment2.text = "Comment text"\n         new_comment2_id = self.conversation.addComment(comment2)\n \n         comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment2_id),\n+            "++conversation++default/{0}".format(new_comment2_id),\n         )\n         comment2.reindexObject()\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Document\',\n+                portal_type="Document",\n             ),\n         )\n         doc1_brain = brains[0]\n         self.assertEqual(doc1_brain.total_comments, 2)\n \n     def test_last_comment_date(self):\n-        self.assertTrue(\'last_comment_date\' in self.doc1_brain)\n+        self.assertTrue("last_comment_date" in self.doc1_brain)\n         self.assertEqual(\n             self.doc1_brain.last_comment_date,\n             datetime(2006, 9, 17, 14, 18, 12),\n         )\n \n         # Add another comment and check if last comment date is updated.\n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.title = \'Comment 2\'\n-        comment2.text = \'Comment text\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.title = "Comment 2"\n+        comment2.text = "Comment text"\n         comment2.creation_date = datetime(2009, 9, 17, 14, 18, 12)\n         comment2.modification_date = datetime(2009, 9, 17, 14, 18, 12)\n         new_comment2_id = self.conversation.addComment(comment2)\n \n         comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment2_id),\n+            "++conversation++default/{0}".format(new_comment2_id),\n         )\n         comment2.reindexObject()\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Document\',\n+                portal_type="Document",\n             ),\n         )\n         doc1_brain = brains[0]\n@@ -155,9 +151,9 @@ def test_last_comment_date(self):\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Document\',\n+                portal_type="Document",\n             ),\n         )\n         doc1_brain = brains[0]\n@@ -171,44 +167,44 @@ def test_last_comment_date(self):\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Document\',\n+                portal_type="Document",\n             ),\n         )\n         doc1_brain = brains[0]\n         self.assertEqual(doc1_brain.last_comment_date, None)\n \n     def test_commentators(self):\n-        self.assertTrue(\'commentators\' in self.doc1_brain)\n-        self.assertEqual(self.doc1_brain.commentators, (\'Jim\',))\n+        self.assertTrue("commentators" in self.doc1_brain)\n+        self.assertEqual(self.doc1_brain.commentators, ("Jim",))\n \n         # add another comment with another author\n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.title = \'Comment 2\'\n-        comment2.text = \'Comment text\'\n-        comment2.creator = \'emma\'\n-        comment2.author_username = \'Emma\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.title = "Comment 2"\n+        comment2.text = "Comment text"\n+        comment2.creator = "emma"\n+        comment2.author_username = "Emma"\n         new_comment2_id = self.conversation.addComment(comment2)\n \n         comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment2_id),\n+            "++conversation++default/{0}".format(new_comment2_id),\n         )\n         comment2.reindexObject()\n \n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Document\',\n+                portal_type="Document",\n             ),\n         )\n         doc1_brain = brains[0]\n \n         self.assertEqual(\n             sorted(doc1_brain.commentators),\n-            sorted((\'Jim\', \'Emma\')),\n+            sorted(("Jim", "Emma")),\n         )\n \n         # remove one comments\n@@ -216,22 +212,22 @@ def test_commentators(self):\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Document\',\n+                portal_type="Document",\n             ),\n         )\n         doc1_brain = brains[0]\n-        self.assertEqual(doc1_brain.commentators, (\'Jim\',))\n+        self.assertEqual(doc1_brain.commentators, ("Jim",))\n \n         # remove all comments\n         del self.conversation[self.new_comment1_id]\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Document\',\n+                portal_type="Document",\n             ),\n         )\n         doc1_brain = brains[0]\n@@ -241,9 +237,9 @@ def test_conversation_indexes_not_in_comments(self):\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Discussion Item\',\n+                portal_type="Discussion Item",\n             ),\n         )\n         comment1_brain = brains[0]\n@@ -252,14 +248,14 @@ def test_conversation_indexes_not_in_comments(self):\n         self.assertEqual(comment1_brain.total_comments, None)\n \n     def test_dont_index_private_commentators(self):\n-        self.comment1.manage_permission(\'View\', roles=tuple())\n+        self.comment1.manage_permission("View", roles=tuple())\n         self.portal.doc1.reindexObject()\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Document\',\n+                portal_type="Document",\n             ),\n         )\n         doc1_brain = brains[0]\n@@ -271,70 +267,70 @@ class CommentCatalogTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n \n         conversation = IConversation(self.portal.doc1)\n         self.conversation = conversation\n \n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n-        comment1.creator = \'jim\'\n-        comment1.author_name = \'Jim\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n+        comment1.creator = "jim"\n+        comment1.author_name = "Jim"\n         new_comment1_id = conversation.addComment(comment1)\n         self.comment_id = new_comment1_id\n \n         # Comment brain\n         self.comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment1_id),\n+            "++conversation++default/{0}".format(new_comment1_id),\n         )\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.comment.getPhysicalPath()),\n+                    "query": "/".join(self.comment.getPhysicalPath()),\n                 },\n             ),\n         )\n         self.comment_brain = brains[0]\n \n     def test_title(self):\n-        self.assertEqual(self.comment_brain.Title, \'Jim on Document 1\')\n+        self.assertEqual(self.comment_brain.Title, "Jim on Document 1")\n \n     def test_no_name_title(self):\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         cid = self.conversation.addComment(comment)\n \n         # Comment brain\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(cid),\n+            "++conversation++default/{0}".format(cid),\n         )\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(comment.getPhysicalPath()),\n+                    "query": "/".join(comment.getPhysicalPath()),\n                 },\n             ),\n         )\n         comment_brain = brains[0]\n-        self.assertEqual(comment_brain.Title, \'Anonymous on Document 1\')\n+        self.assertEqual(comment_brain.Title, "Anonymous on Document 1")\n \n     def test_type(self):\n-        self.assertEqual(self.comment_brain.portal_type, \'Discussion Item\')\n-        self.assertEqual(self.comment_brain.Type, \'Comment\')\n+        self.assertEqual(self.comment_brain.portal_type, "Discussion Item")\n+        self.assertEqual(self.comment_brain.Type, "Comment")\n \n     def test_review_state(self):\n-        self.assertEqual(self.comment_brain.review_state, \'published\')\n+        self.assertEqual(self.comment_brain.review_state, "published")\n \n     def test_creator(self):\n-        self.assertEqual(self.comment_brain.Creator, \'jim\')\n+        self.assertEqual(self.comment_brain.Creator, "jim")\n \n     def test_in_response_to(self):\n         """Make sure in_response_to returns the title or id of the content\n-           object the comment was added to.\n+        object the comment was added to.\n         """\n-        self.assertEqual(self.comment_brain.in_response_to, \'Document 1\')\n+        self.assertEqual(self.comment_brain.in_response_to, "Document 1")\n \n     def test_add_comment(self):\n         self.assertTrue(self.comment_brain)\n@@ -346,7 +342,7 @@ def test_delete_comment(self):\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.comment.getPhysicalPath()),\n+                    "query": "/".join(self.comment.getPhysicalPath()),\n                 },\n             ),\n         )\n@@ -354,54 +350,54 @@ def test_delete_comment(self):\n \n     def test_reindex_comment(self):\n         # Make sure a comment is reindexed on the catalog when is modified\n-        self.comment.text = \'Another text\'\n+        self.comment.text = "Another text"\n         notify(ObjectModifiedEvent(self.comment))\n-        brains = self.catalog.searchResults(SearchableText=\'Another text\')\n+        brains = self.catalog.searchResults(SearchableText="Another text")\n         self.assertEqual(len(brains), 1)\n \n     def test_remove_comments_when_content_object_is_removed(self):\n         """Make sure all comments are removed from the catalog, if the content\n-           object is removed.\n+        object is removed.\n         """\n-        brains = self.catalog.searchResults({\'portal_type\': \'Discussion Item\'})\n+        brains = self.catalog.searchResults({"portal_type": "Discussion Item"})\n         self.assertEqual(len(brains), 1)\n-        self.portal.manage_delObjects([\'doc1\'])\n-        brains = self.catalog.searchResults({\'portal_type\': \'Discussion Item\'})\n+        self.portal.manage_delObjects(["doc1"])\n+        brains = self.catalog.searchResults({"portal_type": "Discussion Item"})\n         self.assertEqual(len(brains), 0)\n \n     def test_move_comments_when_content_object_is_moved(self):\n         # Create two folders and a content object with a comment\n         self.portal.invokeFactory(\n-            id=\'folder1\',\n-            title=\'Folder 1\',\n-            type_name=\'Folder\',\n+            id="folder1",\n+            title="Folder 1",\n+            type_name="Folder",\n         )\n         self.portal.invokeFactory(\n-            id=\'folder2\',\n-            title=\'Folder 2\',\n-            type_name=\'Folder\',\n+            id="folder2",\n+            title="Folder 2",\n+            type_name="Folder",\n         )\n         self.portal.folder1.invokeFactory(\n-            id=\'moveme\',\n-            title=\'Move Me\',\n-            type_name=\'Document\',\n+            id="moveme",\n+            title="Move Me",\n+            type_name="Document",\n         )\n         conversation = IConversation(self.portal.folder1.moveme)\n-        comment = createObject(\'plone.Comment\')\n+        comment = createObject("plone.Comment")\n         comment_id = conversation.addComment(comment)\n         # We need to commit here so that _p_jar isn\'t None and move will work\n         transaction.savepoint(optimistic=True)\n \n         # Move moveme from folder1 to folder2\n-        cp = self.portal.folder1.manage_cutObjects(ids=(\'moveme\',))\n+        cp = self.portal.folder1.manage_cutObjects(ids=("moveme",))\n         self.portal.folder2.manage_pasteObjects(cp)\n \n         # Make sure no old comment brains are\n         brains = self.catalog.searchResults(\n             dict(\n-                portal_type=\'Discussion Item\',\n+                portal_type="Discussion Item",\n                 path={\n-                    \'query\': \'/\'.join(self.portal.folder1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.folder1.getPhysicalPath()),\n                 },\n             ),\n         )\n@@ -409,61 +405,60 @@ def test_move_comments_when_content_object_is_moved(self):\n \n         brains = self.catalog.searchResults(\n             dict(\n-                portal_type=\'Discussion Item\',\n+                portal_type="Discussion Item",\n                 path={\n-                    \'query\': \'/\'.join(self.portal.folder2.getPhysicalPath()),\n+                    "query": "/".join(self.portal.folder2.getPhysicalPath()),\n                 },\n             ),\n         )\n         self.assertEqual(len(brains), 1)\n         self.assertEqual(\n             brains[0].getPath(),\n-            \'/plone/folder2/moveme/++conversation++default/\' +\n-            str(comment_id),\n+            "/plone/folder2/moveme/++conversation++default/" + str(comment_id),\n         )\n \n     def test_move_upper_level_folder(self):\n         # create a folder with a nested structure\n         self.portal.invokeFactory(\n-            id=\'sourcefolder\',\n-            title=\'Source Folder\',\n-            type_name=\'Folder\',\n+            id="sourcefolder",\n+            title="Source Folder",\n+            type_name="Folder",\n         )\n         self.portal.sourcefolder.invokeFactory(\n-            id=\'moveme\',\n-            title=\'Move Me\',\n-            type_name=\'Folder\',\n+            id="moveme",\n+            title="Move Me",\n+            type_name="Folder",\n         )\n         self.portal.sourcefolder.moveme.invokeFactory(\n-            id=\'mydocument\',\n-            title=\'My Document\',\n-            type_name=\'Folder\',\n+            id="mydocument",\n+            title="My Document",\n+            type_name="Folder",\n         )\n         self.portal.invokeFactory(\n-            id=\'targetfolder\',\n-            title=\'Target Folder\',\n-            type_name=\'Folder\',\n+            id="targetfolder",\n+            title="Target Folder",\n+            type_name="Folder",\n         )\n \n         # create comment on my-document\n         conversation = IConversation(\n             self.portal.sourcefolder.moveme.mydocument,\n         )\n-        comment = createObject(\'plone.Comment\')\n+        comment = createObject("plone.Comment")\n         comment_id = conversation.addComment(comment)\n \n         # We need to commit here so that _p_jar isn\'t None and move will work\n         transaction.savepoint(optimistic=True)\n \n         # Move moveme from folder1 to folder2\n-        cp = self.portal.sourcefolder.manage_cutObjects(ids=(\'moveme\',))\n+        cp = self.portal.sourcefolder.manage_cutObjects(ids=("moveme",))\n         self.portal.targetfolder.manage_pasteObjects(cp)\n \n         # Make sure no old comment brains are left\n         brains = self.catalog.searchResults(\n             dict(\n-                portal_type=\'Discussion Item\',\n-                path={\'query\': \'/plone/sourcefolder/moveme\'},\n+                portal_type="Discussion Item",\n+                path={"query": "/plone/sourcefolder/moveme"},\n             ),\n         )\n         self.assertEqual(len(brains), 0)\n@@ -471,49 +466,47 @@ def test_move_upper_level_folder(self):\n         # make sure comments are correctly index on the target\n         brains = self.catalog.searchResults(\n             dict(\n-                portal_type=\'Discussion Item\',\n-                path={\'query\': \'/plone/targetfolder/moveme\'},\n+                portal_type="Discussion Item",\n+                path={"query": "/plone/targetfolder/moveme"},\n             ),\n         )\n         self.assertEqual(len(brains), 1)\n         self.assertEqual(\n             brains[0].getPath(),\n-            \'/plone/targetfolder/moveme/mydocument/++conversation++default/\' +\n-            str(comment_id),\n+            "/plone/targetfolder/moveme/mydocument/++conversation++default/"\n+            + str(comment_id),\n         )\n \n     def test_update_comments_when_content_object_is_renamed(self):\n         # We need to commit here so that _p_jar isn\'t None and move will work\n         transaction.savepoint(optimistic=True)\n \n-        self.portal.manage_renameObject(\'doc1\', \'doc2\')\n+        self.portal.manage_renameObject("doc1", "doc2")\n \n         brains = self.catalog.searchResults(\n-            portal_type=\'Discussion Item\',\n+            portal_type="Discussion Item",\n         )\n         self.assertEqual(len(brains), 1)\n         self.assertEqual(\n             brains[0].getPath(),\n-            \'/plone/doc2/++conversation++default/\' +\n-            str(self.comment_id),\n+            "/plone/doc2/++conversation++default/" + str(self.comment_id),\n         )\n \n     def test_clear_and_rebuild_catalog(self):\n-        brains = self.catalog.searchResults({\'portal_type\': \'Discussion Item\'})\n+        brains = self.catalog.searchResults({"portal_type": "Discussion Item"})\n         self.assertTrue(brains)\n \n         # Clear and rebuild catalog\n         self.catalog.clearFindAndRebuild()\n \n         # Check if comment is still there\n-        brains = self.catalog.searchResults({\'portal_type\': \'Discussion Item\'})\n+        brains = self.catalog.searchResults({"portal_type": "Discussion Item"})\n         self.assertTrue(brains)\n         comment_brain = brains[0]\n-        self.assertEqual(comment_brain.Title, u\'Jim on Document 1\')\n+        self.assertEqual(comment_brain.Title, u"Jim on Document 1")\n         self.assertEqual(\n             comment_brain.getPath(),\n-            \'/plone/doc1/++conversation++default/\' +\n-            str(self.comment_id),\n+            "/plone/doc1/++conversation++default/" + str(self.comment_id),\n         )\n \n     def test_clear_and_rebuild_catalog_for_nested_comments(self):\n@@ -528,25 +521,25 @@ def test_clear_and_rebuild_catalog_for_nested_comments(self):\n         # +- Comment 2\n         #    +- Comment 2_1\n \n-        comment1_1 = createObject(\'plone.Comment\')\n-        comment1_1.title = \'Re: Comment 1\'\n-        comment1_1.text = \'Comment text\'\n+        comment1_1 = createObject("plone.Comment")\n+        comment1_1.title = "Re: Comment 1"\n+        comment1_1.text = "Comment text"\n \n-        comment1_1_1 = createObject(\'plone.Comment\')\n-        comment1_1_1.title = \'Re: Re: Comment 1\'\n-        comment1_1_1.text = \'Comment text\'\n+        comment1_1_1 = createObject("plone.Comment")\n+        comment1_1_1.title = "Re: Re: Comment 1"\n+        comment1_1_1.text = "Comment text"\n \n-        comment1_2 = createObject(\'plone.Comment\')\n-        comment1_2.title = \'Re: Comment 1 (2)\'\n-        comment1_2.text = \'Comment text\'\n+        comment1_2 = createObject("plone.Comment")\n+        comment1_2.title = "Re: Comment 1 (2)"\n+        comment1_2.text = "Comment text"\n \n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.title = \'Comment 2\'\n-        comment2.text = \'Comment text\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.title = "Comment 2"\n+        comment2.text = "Comment text"\n \n-        comment2_1 = createObject(\'plone.Comment\')\n-        comment2_1.title = \'Re: Comment 2\'\n-        comment2_1.text = \'Comment text\'\n+        comment2_1 = createObject("plone.Comment")\n+        comment2_1.title = "Re: Comment 2"\n+        comment2_1.text = "Comment text"\n \n         # Create the nested comment structure\n         new_id_1 = self.conversation.addComment(self.comment)\n@@ -568,7 +561,7 @@ def test_clear_and_rebuild_catalog_for_nested_comments(self):\n         self.catalog.clearFindAndRebuild()\n \n         # Check if comments are still there\n-        brains = self.catalog.searchResults({\'portal_type\': \'Discussion Item\'})\n+        brains = self.catalog.searchResults({"portal_type": "Discussion Item"})\n         self.assertTrue(brains)\n         self.assertEqual(len(brains), 6)\n \n@@ -578,19 +571,19 @@ class NoConversationCatalogTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n \n         conversation = IConversation(self.portal.doc1)\n \n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Document\',\n+                portal_type="Document",\n             ),\n         )\n         self.conversation = conversation\n@@ -598,11 +591,10 @@ def setUp(self):\n         self.doc1_brain = brains[0]\n \n     def test_total_comments(self):\n-        self.assertTrue(\'total_comments\' in self.doc1_brain)\n+        self.assertTrue("total_comments" in self.doc1_brain)\n         self.assertEqual(self.doc1_brain.total_comments, 0)\n \n         # Make sure no conversation has been created\n         self.assertTrue(\n-            \'plone.app.discussion:conversation\' not in\n-            IAnnotations(self.portal.doc1),\n+            "plone.app.discussion:conversation" not in IAnnotations(self.portal.doc1),\n         )\ndiff --git a/plone/app/discussion/tests/test_comment.py b/plone/app/discussion/tests/test_comment.py\nindex 681c7bdd..ff9dd279 100644\n--- a/plone/app/discussion/tests/test_comment.py\n+++ b/plone/app/discussion/tests/test_comment.py\n@@ -18,7 +18,7 @@\n import unittest\n \n \n-logger = logging.getLogger(\'plone.app.discussion.tests\')\n+logger = logging.getLogger("plone.app.discussion.tests")\n logger.addHandler(logging.StreamHandler())\n \n \n@@ -27,30 +27,30 @@ class CommentTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         workflow = self.portal.portal_workflow\n-        workflow.doActionFor(self.portal.doc1, \'publish\')\n+        workflow.doActionFor(self.portal.doc1, "publish")\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n-        self.document_brain = self.catalog.searchResults(\n-            portal_type=\'Document\')[0]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n+        self.document_brain = self.catalog.searchResults(portal_type="Document")[0]\n \n     def test_factory(self):\n-        comment1 = createObject(\'plone.Comment\')\n+        comment1 = createObject("plone.Comment")\n         self.assertTrue(IComment.providedBy(comment1))\n \n     def test_UTCDates(self):\n-        utc_to_local_diff = \\\n-            datetime.datetime.now() - datetime.datetime.utcnow()\n+        utc_to_local_diff = datetime.datetime.now() - datetime.datetime.utcnow()\n         utc_to_local_diff = abs(utc_to_local_diff.seconds)\n         if utc_to_local_diff < 60:\n-            logger.warning(\'Your computer is living in a timezone where local \'\n-                           \'time equals utc time. Some potential errors can \'\n-                           \'get hidden by that\')\n-        comment1 = createObject(\'plone.Comment\')\n+            logger.warning(\n+                "Your computer is living in a timezone where local "\n+                "time equals utc time. Some potential errors can "\n+                "get hidden by that"\n+            )\n+        comment1 = createObject("plone.Comment")\n         local_utc = datetime.datetime.utcnow()\n         for date in (comment1.creation_date, comment1.modification_date):\n             difference = abs(date - local_utc)\n@@ -60,171 +60,166 @@ def test_UTCDates(self):\n             self.assertFalse(difference // 10)\n \n     def test_id(self):\n-        comment1 = createObject(\'plone.Comment\')\n+        comment1 = createObject("plone.Comment")\n         comment1.comment_id = 123\n-        self.assertEqual(\'123\', comment1.id)\n-        self.assertEqual(\'123\', comment1.getId())\n-        self.assertEqual(u\'123\', comment1.__name__)\n+        self.assertEqual("123", comment1.id)\n+        self.assertEqual("123", comment1.getId())\n+        self.assertEqual(u"123", comment1.__name__)\n \n     def test_uid(self):\n         conversation = IConversation(self.portal.doc1)\n-        comment1 = createObject(\'plone.Comment\')\n+        comment1 = createObject("plone.Comment")\n         conversation.addComment(comment1)\n         comment_brain = self.catalog.searchResults(\n-            portal_type=\'Discussion Item\',\n+            portal_type="Discussion Item",\n         )[0]\n         self.assertTrue(comment_brain.UID)\n \n     def test_uid_is_unique(self):\n         conversation = IConversation(self.portal.doc1)\n-        comment1 = createObject(\'plone.Comment\')\n+        comment1 = createObject("plone.Comment")\n         conversation.addComment(comment1)\n-        comment2 = createObject(\'plone.Comment\')\n+        comment2 = createObject("plone.Comment")\n         conversation.addComment(comment2)\n         brains = self.catalog.searchResults(\n-            portal_type=\'Discussion Item\',\n+            portal_type="Discussion Item",\n         )\n         self.assertNotEqual(brains[0].UID, brains[1].UID)\n \n     def test_comment_uid_differs_from_content_uid(self):\n         conversation = IConversation(self.portal.doc1)\n-        comment1 = createObject(\'plone.Comment\')\n+        comment1 = createObject("plone.Comment")\n         conversation.addComment(comment1)\n         comment_brain = self.catalog.searchResults(\n-            portal_type=\'Discussion Item\',\n+            portal_type="Discussion Item",\n         )[0]\n         self.assertNotEqual(self.document_brain.UID, comment_brain.UID)\n \n     def test_title(self):\n         conversation = IConversation(self.portal.doc1)\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.author_name = \'Jim Fulton\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.author_name = "Jim Fulton"\n         conversation.addComment(comment1)\n-        self.assertEqual(\'Jim Fulton on Document 1\', comment1.Title())\n+        self.assertEqual("Jim Fulton on Document 1", comment1.Title())\n \n     def test_no_name_title(self):\n         conversation = IConversation(self.portal.doc1)\n-        comment1 = createObject(\'plone.Comment\')\n+        comment1 = createObject("plone.Comment")\n         conversation.addComment(comment1)\n-        self.assertEqual(\'Anonymous on Document 1\', comment1.Title())\n+        self.assertEqual("Anonymous on Document 1", comment1.Title())\n \n     def test_title_special_characters(self):\n         self.portal.invokeFactory(\n-            id=\'doc_sp_chars\',\n-            title=u\'Document \xc3\xa4\xc3\xbc\xc3\xb6\',\n-            type_name=\'Document\',\n+            id="doc_sp_chars",\n+            title=u"Document \xc3\xa4\xc3\xbc\xc3\xb6",\n+            type_name="Document",\n         )\n         conversation = IConversation(self.portal.doc_sp_chars)\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.author_name = u\'Tarek Ziad\xc3\xa9\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.author_name = u"Tarek Ziad\xc3\xa9"\n         conversation.addComment(comment1)\n-        self.assertEqual(u\'Tarek Ziad\xc3\xa9 on Document \xc3\xa4\xc3\xbc\xc3\xb6\', comment1.Title())\n+        self.assertEqual(u"Tarek Ziad\xc3\xa9 on Document \xc3\xa4\xc3\xbc\xc3\xb6", comment1.Title())\n \n     def test_title_special_characters_utf8(self):\n         self.portal.invokeFactory(\n-            id=\'doc_sp_chars_utf8\',\n-            title=\'Document \xc3\xab\xc3\xaf\xc3\xbb\',\n-            type_name=\'Document\',\n+            id="doc_sp_chars_utf8",\n+            title="Document \xc3\xab\xc3\xaf\xc3\xbb",\n+            type_name="Document",\n         )\n         conversation = IConversation(self.portal.doc_sp_chars_utf8)\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.author_name = \'H\xc3\xbc\xc3\xbcb B\xc3\xb4\xc3\xbbm\xc3\xa4\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.author_name = "H\xc3\xbc\xc3\xbcb B\xc3\xb4\xc3\xbbm\xc3\xa4"\n         conversation.addComment(comment1)\n-        self.assertEqual(u\'H\xc3\xbc\xc3\xbcb B\xc3\xb4\xc3\xbbm\xc3\xa4 on Document \xc3\xab\xc3\xaf\xc3\xbb\', comment1.Title())\n+        self.assertEqual(u"H\xc3\xbc\xc3\xbcb B\xc3\xb4\xc3\xbbm\xc3\xa4 on Document \xc3\xab\xc3\xaf\xc3\xbb", comment1.Title())\n \n     def test_creator(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.creator = \'jim\'\n-        self.assertEqual(\'jim\', comment1.Creator())\n+        comment1 = createObject("plone.Comment")\n+        comment1.creator = "jim"\n+        self.assertEqual("jim", comment1.Creator())\n \n     def test_creator_author_name(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.author_name = \'joey\'\n-        self.assertEqual(\'joey\', comment1.Creator())\n+        comment1 = createObject("plone.Comment")\n+        comment1.author_name = "joey"\n+        self.assertEqual("joey", comment1.Creator())\n \n     def test_owner(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        self.assertEqual(([\'plone\', \'acl_users\'], TEST_USER_ID),\n-                         comment1.getOwnerTuple())\n+        comment1 = createObject("plone.Comment")\n+        self.assertEqual(\n+            (["plone", "acl_users"], TEST_USER_ID), comment1.getOwnerTuple()\n+        )\n \n     def test_type(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        self.assertEqual(comment1.Type(), \'Comment\')\n+        comment1 = createObject("plone.Comment")\n+        self.assertEqual(comment1.Type(), "Comment")\n \n     def test_mime_type(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        self.assertEqual(comment1.mime_type, \'text/plain\')\n+        comment1 = createObject("plone.Comment")\n+        self.assertEqual(comment1.mime_type, "text/plain")\n \n     def test_getText(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'First paragraph\\n\\nSecond_paragraph\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "First paragraph\\n\\nSecond_paragraph"\n         self.assertEqual(\n-            \'\'.join(comment1.getText().split()),\n-            \'<p>Firstparagraph<br><br>Second_paragraph</p>\',\n+            "".join(comment1.getText().split()),\n+            "<p>Firstparagraph<br><br>Second_paragraph</p>",\n         )\n \n     def test_getText_escapes_HTML(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'<b>Got HTML?</b>\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "<b>Got HTML?</b>"\n         self.assertEqual(\n             comment1.getText(),\n-            \'<p>&lt;b&gt;Got HTML?&lt;/b&gt;</p>\',\n+            "<p>&lt;b&gt;Got HTML?&lt;/b&gt;</p>",\n         )\n \n     def test_getText_with_non_ascii_characters(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = u\'Umlaute sind \xc3\xa4, \xc3\xb6 und \xc3\xbc.\'\n-        out = b\'<p>Umlaute sind \\xc3\\xa4, \\xc3\\xb6 und \\xc3\\xbc.</p>\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = u"Umlaute sind \xc3\xa4, \xc3\xb6 und \xc3\xbc."\n+        out = b"<p>Umlaute sind \\xc3\\xa4, \\xc3\\xb6 und \\xc3\\xbc.</p>"\n         if six.PY2:\n-            self.assertEqual(\n-                comment1.getText(),\n-                out)\n+            self.assertEqual(comment1.getText(), out)\n         else:\n-            self.assertEqual(\n-                comment1.getText(),\n-                out.decode(\'utf8\'))\n+            self.assertEqual(comment1.getText(), out.decode("utf8"))\n \n     def test_getText_doesnt_link(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Go to http://www.plone.org\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Go to http://www.plone.org"\n         self.assertEqual(\n             comment1.getText(),\n-            \'<p>Go to http://www.plone.org</p>\',\n+            "<p>Go to http://www.plone.org</p>",\n         )\n \n     def test_getText_uses_comment_mime_type(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Go to http://www.plone.org\'\n-        comment1.mime_type = \'text/x-web-intelligent\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Go to http://www.plone.org"\n+        comment1.mime_type = "text/x-web-intelligent"\n         self.assertEqual(\n             comment1.getText(),\n-            \'Go to <a href="http://www.plone.org" \' +\n-            \'rel="nofollow">http://www.plone.org</a>\',\n+            \'Go to <a href="http://www.plone.org" \'\n+            + \'rel="nofollow">http://www.plone.org</a>\',\n         )\n \n     def test_getText_uses_comment_mime_type_html(self):\n-        comment1 = createObject(\'plone.Comment\')\n+        comment1 = createObject("plone.Comment")\n         comment1.text = \'Go to <a href="http://www.plone.org">plone.org</a>\'\n-        comment1.mime_type = \'text/html\'\n+        comment1.mime_type = "text/html"\n         self.assertEqual(\n             comment1.getText(),\n             \'Go to <a href="http://www.plone.org">plone.org</a>\',\n         )\n \n     def test_getText_w_custom_targetMimetype(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'para\'\n-        self.assertEqual(comment1.getText(targetMimetype=\'text/plain\'), \'para\')\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "para"\n+        self.assertEqual(comment1.getText(targetMimetype="text/plain"), "para")\n \n     def test_getText_invalid_transformation_raises_error(self):\n         conversation = IConversation(self.portal.doc1)\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.mime_type = \'text/x-html-safe\'\n-        comment1.text = \'para\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.mime_type = "text/x-html-safe"\n+        comment1.text = "para"\n         conversation.addComment(comment1)\n-        self.assertEqual(\n-            comment1.getText(targetMimetype=\'text/html\'),\n-            \'para\')\n+        self.assertEqual(comment1.getText(targetMimetype="text/html"), "para")\n \n     def test_traversal(self):\n         # make sure comments are traversable, have an id, absolute_url and\n@@ -232,26 +227,29 @@ def test_traversal(self):\n \n         conversation = IConversation(self.portal.doc1)\n \n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n \n         new_comment1_id = conversation.addComment(comment1)\n \n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment1_id),\n+            "++conversation++default/{0}".format(new_comment1_id),\n         )\n         self.assertTrue(IComment.providedBy(comment))\n \n         self.assertEqual(\n             (\n-                \'\', \'plone\', \'doc1\', \'++conversation++default\',\n+                "",\n+                "plone",\n+                "doc1",\n+                "++conversation++default",\n                 str(new_comment1_id),\n             ),\n             comment.getPhysicalPath(),\n         )\n         self.assertEqual(\n-            \'http://nohost/plone/doc1/++conversation++default/\' +\n-            str(new_comment1_id), comment.absolute_url(),\n+            "http://nohost/plone/doc1/++conversation++default/" + str(new_comment1_id),\n+            comment.absolute_url(),\n         )\n \n     def test_view_blob_types(self):\n@@ -260,68 +258,67 @@ def test_view_blob_types(self):\n         version of the url with a /view in it.\n         """\n         self.portal.invokeFactory(\n-            id=\'image1\',\n-            title=\'Image\',\n-            type_name=\'Image\',\n+            id="image1",\n+            title="Image",\n+            type_name="Image",\n         )\n         conversation = IConversation(self.portal.image1)\n \n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n         new_comment1_id = conversation.addComment(comment1)\n         comment = self.portal.image1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment1_id),\n+            "++conversation++default/{0}".format(new_comment1_id),\n         )\n \n         view = View(comment, self.request)\n         View.__call__(view)\n         response = self.request.response\n-        self.assertIn(\'/view\', response.headers[\'location\'])\n+        self.assertIn("/view", response.headers["location"])\n \n     def test_workflow(self):\n-        """Basic test for the \'comment_review_workflow\'\n-        """\n+        """Basic test for the \'comment_review_workflow\'"""\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            (\'comment_review_workflow,\'),\n+            ("Discussion Item",),\n+            ("comment_review_workflow,"),\n         )\n \n         conversation = IConversation(self.portal.doc1)\n-        comment1 = createObject(\'plone.Comment\')\n+        comment1 = createObject("plone.Comment")\n         new_comment1_id = conversation.addComment(comment1)\n \n         comment = conversation[new_comment1_id]\n \n         # Make sure comments use the \'comment_review_workflow\'\n         chain = self.portal.portal_workflow.getChainFor(comment)\n-        self.assertEqual((\'comment_review_workflow\',), chain)\n+        self.assertEqual(("comment_review_workflow",), chain)\n \n         # Ensure the initial state was entered and recorded\n         self.assertEqual(\n             1,\n-            len(comment.workflow_history[\'comment_review_workflow\']),\n+            len(comment.workflow_history["comment_review_workflow"]),\n         )\n         self.assertEqual(\n             None,\n-            comment.workflow_history[\'comment_review_workflow\'][0][\'action\'],\n+            comment.workflow_history["comment_review_workflow"][0]["action"],\n         )\n         self.assertEqual(\n-            \'pending\',\n-            self.portal.portal_workflow.getInfoFor(comment, \'review_state\'),\n+            "pending",\n+            self.portal.portal_workflow.getInfoFor(comment, "review_state"),\n         )\n \n     def test_fti(self):\n         # test that we can look up an FTI for Discussion Item\n \n         self.assertIn(\n-            \'Discussion Item\',\n+            "Discussion Item",\n             self.portal.portal_types.objectIds(),\n         )\n \n-        comment1 = createObject(\'plone.Comment\')\n+        comment1 = createObject("plone.Comment")\n \n         fti = self.portal.portal_types.getTypeInfo(comment1)\n-        self.assertEqual(\'Discussion Item\', fti.getTypeInfo(comment1).getId())\n+        self.assertEqual("Discussion Item", fti.getTypeInfo(comment1).getId())\n \n     def test_view(self):\n         # make sure that the comment view is there and redirects to the right\n@@ -332,21 +329,21 @@ def test_view(self):\n         conversation = IConversation(self.portal.doc1)\n \n         # Create a comment\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n \n         # Add comment to the conversation\n         new_comment1_id = conversation.addComment(comment1)\n \n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment1_id),\n+            "++conversation++default/{0}".format(new_comment1_id),\n         )\n \n         # make sure the view is there\n         self.assertTrue(\n             getMultiAdapter(\n                 (comment, self.request),\n-                name=\'view\',\n+                name="view",\n             ),\n         )\n \n@@ -364,11 +361,11 @@ class RepliesTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         workflow = self.portal.portal_workflow\n-        workflow.doActionFor(self.portal.doc1, \'publish\')\n+        workflow.doActionFor(self.portal.doc1, "publish")\n \n     def test_add_comment(self):\n         # Add comments to a CommentReplies adapter\n@@ -380,16 +377,16 @@ def test_add_comment(self):\n         # Add a comment to the conversation\n         replies = IReplies(conversation)\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         new_id = replies.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id),\n+            "++conversation++default/{0}".format(new_id),\n         )\n \n         # Add a reply to the CommentReplies adapter of the first comment\n-        re_comment = createObject(\'plone.Comment\')\n-        re_comment.text = \'Comment text\'\n+        re_comment = createObject("plone.Comment")\n+        re_comment.text = "Comment text"\n \n         replies = IReplies(comment)\n \n@@ -417,16 +414,16 @@ def test_delete_comment(self):\n         # Add a comment to the conversation\n         replies = IReplies(conversation)\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         new_id = replies.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id),\n+            "++conversation++default/{0}".format(new_id),\n         )\n \n         # Add a reply to the CommentReplies adapter of the first comment\n-        re_comment = createObject(\'plone.Comment\')\n-        re_comment.text = \'Comment text\'\n+        re_comment = createObject("plone.Comment")\n+        re_comment.text = "Comment text"\n \n         replies = IReplies(comment)\n \n@@ -448,83 +445,86 @@ def test_traversal(self):\n         # physical path\n         conversation = IConversation(self.portal.doc1)\n \n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n \n         conversation.addComment(comment1)\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         new_id = conversation.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id),\n+            "++conversation++default/{0}".format(new_id),\n         )\n \n         # Add a reply to the CommentReplies adapter of the first comment\n-        re_comment = createObject(\'plone.Comment\')\n-        re_comment.text = \'Comment text\'\n+        re_comment = createObject("plone.Comment")\n+        re_comment.text = "Comment text"\n         replies = IReplies(comment)\n         new_re_id = replies.addComment(re_comment)\n         re_comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_re_id),\n+            "++conversation++default/{0}".format(new_re_id),\n         )\n \n         # Add a reply to the reply\n-        re_re_comment = createObject(\'plone.Comment\')\n-        re_re_comment.text = \'Comment text\'\n+        re_re_comment = createObject("plone.Comment")\n+        re_re_comment.text = "Comment text"\n         replies = IReplies(re_comment)\n         new_re_re_id = replies.addComment(re_re_comment)\n         re_re_comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_re_re_id),\n+            "++conversation++default/{0}".format(new_re_re_id),\n         )\n \n         # Add a reply to the replies reply\n-        re_re_re_comment = createObject(\'plone.Comment\')\n-        re_re_re_comment.text = \'Comment text\'\n+        re_re_re_comment = createObject("plone.Comment")\n+        re_re_re_comment.text = "Comment text"\n         replies = IReplies(re_re_comment)\n         new_re_re_re_id = replies.addComment(re_re_re_comment)\n         re_re_re_comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_re_re_re_id),\n+            "++conversation++default/{0}".format(new_re_re_re_id),\n         )\n \n         self.assertEqual(\n-            (\'\', \'plone\', \'doc1\', \'++conversation++default\', str(new_id)),\n+            ("", "plone", "doc1", "++conversation++default", str(new_id)),\n             comment.getPhysicalPath(),\n         )\n         self.assertEqual(\n-            \'http://nohost/plone/doc1/++conversation++default/\' +\n-            str(new_id), comment.absolute_url(),\n+            "http://nohost/plone/doc1/++conversation++default/" + str(new_id),\n+            comment.absolute_url(),\n         )\n         self.assertEqual(\n-            (\'\', \'plone\', \'doc1\', \'++conversation++default\', str(new_re_id)),\n+            ("", "plone", "doc1", "++conversation++default", str(new_re_id)),\n             re_comment.getPhysicalPath(),\n         )\n         self.assertEqual(\n-            \'http://nohost/plone/doc1/++conversation++default/\' +\n-            str(new_re_id),\n+            "http://nohost/plone/doc1/++conversation++default/" + str(new_re_id),\n             re_comment.absolute_url(),\n         )\n         self.assertEqual(\n             (\n-                \'\', \'plone\', \'doc1\', \'++conversation++default\',\n+                "",\n+                "plone",\n+                "doc1",\n+                "++conversation++default",\n                 str(new_re_re_id),\n             ),\n             re_re_comment.getPhysicalPath(),\n         )\n         self.assertEqual(\n-            \'http://nohost/plone/doc1/++conversation++default/\' +\n-            str(new_re_re_id),\n+            "http://nohost/plone/doc1/++conversation++default/" + str(new_re_re_id),\n             re_re_comment.absolute_url(),\n         )\n         self.assertEqual(\n             (\n-                \'\', \'plone\', \'doc1\', \'++conversation++default\',\n+                "",\n+                "plone",\n+                "doc1",\n+                "++conversation++default",\n                 str(new_re_re_re_id),\n             ),\n             re_re_re_comment.getPhysicalPath(),\n         )\n         self.assertEqual(\n-            \'http://nohost/plone/doc1/++conversation++default/\' +\n-            str(new_re_re_re_id),\n+            "http://nohost/plone/doc1/++conversation++default/" + str(new_re_re_re_id),\n             re_re_re_comment.absolute_url(),\n         )\ndiff --git a/plone/app/discussion/tests/test_comments_viewlet.py b/plone/app/discussion/tests/test_comments_viewlet.py\nindex 20e66a31..4b25242d 100644\n--- a/plone/app/discussion/tests/test_comments_viewlet.py\n+++ b/plone/app/discussion/tests/test_comments_viewlet.py\n@@ -40,23 +40,23 @@ class TestCommentForm(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'test-folder\')\n-        self.folder = self.portal[\'test-folder\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "test-folder")\n+        self.folder = self.portal["test-folder"]\n \n         interface.alsoProvides(\n             self.portal.REQUEST,\n             interfaces.IDiscussionLayer,\n         )\n \n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n-        wftool.doActionFor(self.portal.doc1, action=\'publish\')\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(self.portal.doc1, action="publish")\n         self.portal.doc1.allow_discussion = True\n-        self.membershipTool = getToolByName(self.folder, \'portal_membership\')\n+        self.membershipTool = getToolByName(self.folder, "portal_membership")\n         self.memberdata = self.portal.portal_memberdata\n-        self.context = getattr(self.portal, \'doc1\')\n+        self.context = getattr(self.portal, "doc1")\n \n         # Allow discussion\n         registry = queryUtility(IRegistry)\n@@ -64,8 +64,7 @@ def setUp(self):\n         settings.globally_enabled = True\n \n     def test_add_comment(self):\n-        """Post a comment as logged-in user.\n-        """\n+        """Post a comment as logged-in user."""\n \n         # Allow discussion\n         self.portal.doc1.allow_discussion = True\n@@ -82,7 +81,7 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u\'comment-form\',\n+            name=u"comment-form",\n         )\n \n         # The form should return an error if the comment text field is empty\n@@ -90,46 +89,45 @@ def make_request(form={}):\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u\'comment-form\',\n+            name=u"comment-form",\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n \n         self.assertEqual(len(errors), 1)\n-        self.assertFalse(commentForm.handleComment(commentForm, \'foo\'))\n+        self.assertFalse(commentForm.handleComment(commentForm, "foo"))\n \n         # The form is submitted successfully, if the required text field is\n         # filled out\n-        request = make_request(form={\'form.widgets.text\': u\'bar\'})\n+        request = make_request(form={"form.widgets.text": u"bar"})\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u\'comment-form\',\n+            name=u"comment-form",\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n \n         self.assertEqual(len(errors), 0)\n-        self.assertFalse(commentForm.handleComment(commentForm, \'foo\'))\n+        self.assertFalse(commentForm.handleComment(commentForm, "foo"))\n \n         comments = IConversation(commentForm.context).getComments()\n         comments = [comment for comment in comments]  # consume iterator\n         self.assertEqual(len(comments), 1)\n \n         for comment in comments:\n-            self.assertEqual(comment.text, u\'bar\')\n-            self.assertEqual(comment.creator, \'test_user_1_\')\n-            self.assertEqual(comment.getOwner().getUserName(), \'test-user\')\n+            self.assertEqual(comment.text, u"bar")\n+            self.assertEqual(comment.creator, "test_user_1_")\n+            self.assertEqual(comment.getOwner().getUserName(), "test-user")\n             local_roles = comment.get_local_roles()\n             self.assertEqual(len(local_roles), 1)\n             userid, roles = local_roles[0]\n-            self.assertEqual(userid, \'test_user_1_\')\n+            self.assertEqual(userid, "test_user_1_")\n             self.assertEqual(len(roles), 1)\n-            self.assertEqual(roles[0], \'Owner\')\n+            self.assertEqual(roles[0], "Owner")\n \n     def test_edit_comment(self):\n-        """Edit a comment as logged-in user.\n-        """\n+        """Edit a comment as logged-in user."""\n \n         # Allow discussion\n         self.portal.doc1.allow_discussion = True\n@@ -146,65 +144,64 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u\'comment-form\',\n+            name=u"comment-form",\n         )\n \n         provideAdapter(\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=EditCommentForm,\n-            name=u\'edit-comment-form\',\n+            name=u"edit-comment-form",\n         )\n \n         # The form is submitted successfully, if the required text field is\n         # filled out\n-        request = make_request(form={\'form.widgets.text\': u\'bar\'})\n+        request = make_request(form={"form.widgets.text": u"bar"})\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u\'comment-form\',\n+            name=u"comment-form",\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n \n         self.assertEqual(len(errors), 0)\n-        self.assertFalse(commentForm.handleComment(commentForm, \'foo\'))\n+        self.assertFalse(commentForm.handleComment(commentForm, "foo"))\n \n         # Edit the last comment\n         conversation = IConversation(self.context)\n         comment = [x for x in conversation.getComments()][-1]\n-        request = make_request(form={\'form.widgets.text\': u\'foobar\'})\n+        request = make_request(form={"form.widgets.text": u"foobar"})\n         editForm = getMultiAdapter(\n             (comment, request),\n-            name=u\'edit-comment-form\',\n+            name=u"edit-comment-form",\n         )\n         editForm.update()\n         data, errors = editForm.extractData()  # pylint: disable-msg=W0612\n \n         self.assertEqual(len(errors), 0)\n-        self.assertFalse(editForm.handleComment(editForm, \'foo\'))\n+        self.assertFalse(editForm.handleComment(editForm, "foo"))\n         comment = [x for x in conversation.getComments()][-1]\n-        self.assertEqual(comment.text, u\'foobar\')\n+        self.assertEqual(comment.text, u"foobar")\n \n         comments = IConversation(commentForm.context).getComments()\n         comments = [c for c in comments]  # consume iterator\n         self.assertEqual(len(comments), 1)\n \n         for comment in comments:\n-            self.assertEqual(comment.text, u\'foobar\')\n-            self.assertEqual(comment.creator, \'test_user_1_\')\n+            self.assertEqual(comment.text, u"foobar")\n+            self.assertEqual(comment.creator, "test_user_1_")\n \n-            self.assertEqual(comment.getOwner().getUserName(), \'test-user\')\n+            self.assertEqual(comment.getOwner().getUserName(), "test-user")\n             local_roles = comment.get_local_roles()\n             self.assertEqual(len(local_roles), 1)\n             userid, roles = local_roles[0]\n-            self.assertEqual(userid, \'test_user_1_\')\n+            self.assertEqual(userid, "test_user_1_")\n             self.assertEqual(len(roles), 1)\n-            self.assertEqual(roles[0], \'Owner\')\n+            self.assertEqual(roles[0], "Owner")\n \n     def test_delete_comment(self):\n-        """Delete a comment as logged-in user.\n-        """\n+        """Delete a comment as logged-in user."""\n \n         # Allow discussion\n         self.portal.doc1.allow_discussion = True\n@@ -221,48 +218,47 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u\'comment-form\',\n+            name=u"comment-form",\n         )\n \n         # The form is submitted successfully, if the required text field is\n         # filled out\n-        form_request = make_request(form={\'form.widgets.text\': u\'bar\'})\n+        form_request = make_request(form={"form.widgets.text": u"bar"})\n \n         commentForm = getMultiAdapter(\n             (self.context, form_request),\n-            name=u\'comment-form\',\n+            name=u"comment-form",\n         )\n \n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n         self.assertEqual(len(errors), 0)\n-        self.assertFalse(commentForm.handleComment(commentForm, \'foo\'))\n+        self.assertFalse(commentForm.handleComment(commentForm, "foo"))\n \n         # Delete the last comment\n         conversation = IConversation(self.context)\n         comment = [x for x in conversation.getComments()][-1]\n         deleteView = getMultiAdapter(\n             (comment, self.request),\n-            name=u\'moderate-delete-comment\',\n+            name=u"moderate-delete-comment",\n         )\n         # try to delete last comment without \'Delete comments\' permission\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         self.assertRaises(\n             Unauthorized,\n             comment.restrictedTraverse,\n-            \'@@moderate-delete-comment\',\n+            "@@moderate-delete-comment",\n         )\n         deleteView()\n         self.assertEqual(1, len([x for x in conversation.getComments()]))\n         # try to delete last comment with \'Delete comments\' permission\n-        setRoles(self.portal, TEST_USER_ID, [\'Reviewer\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Reviewer"])\n         deleteView()\n         self.assertEqual(0, len([x for x in conversation.getComments()]))\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def test_delete_own_comment(self):\n-        """Delete own comment as logged-in user.\n-        """\n+        """Delete own comment as logged-in user."""\n \n         # Allow discussion\n         self.portal.doc1.allow_discussion = True\n@@ -279,42 +275,42 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u\'comment-form\',\n+            name=u"comment-form",\n         )\n \n         # The form is submitted successfully, if the required text field is\n         # filled out\n-        form_request = make_request(form={\'form.widgets.text\': u\'bar\'})\n+        form_request = make_request(form={"form.widgets.text": u"bar"})\n \n         commentForm = getMultiAdapter(\n             (self.context, form_request),\n-            name=u\'comment-form\',\n+            name=u"comment-form",\n         )\n \n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n         self.assertEqual(len(errors), 0)\n-        self.assertFalse(commentForm.handleComment(commentForm, \'foo\'))\n+        self.assertFalse(commentForm.handleComment(commentForm, "foo"))\n \n         # Delete the last comment\n         conversation = IConversation(self.context)\n         comment = [x for x in conversation.getComments()][-1]\n         deleteView = getMultiAdapter(\n             (comment, self.request),\n-            name=u\'delete-own-comment\',\n+            name=u"delete-own-comment",\n         )\n         # try to delete last comment with johndoe\n-        setRoles(self.portal, \'johndoe\', [\'Member\'])\n-        login(self.portal, \'johndoe\')\n+        setRoles(self.portal, "johndoe", ["Member"])\n+        login(self.portal, "johndoe")\n         self.assertRaises(\n             Unauthorized,\n             comment.restrictedTraverse,\n-            \'@@delete-own-comment\',\n+            "@@delete-own-comment",\n         )\n         self.assertEqual(1, len([x for x in conversation.getComments()]))\n         # try to delete last comment with the same user that created it\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         deleteView()\n         self.assertEqual(0, len([x for x in conversation.getComments()]))\n \n@@ -337,40 +333,43 @@ def make_request(form={}):\n             alsoProvides(request, IAttributeAnnotatable)\n             return request\n \n-        provideAdapter(adapts=(Interface, IBrowserRequest),\n-                       provides=Interface,\n-                       factory=CommentForm,\n-                       name=u\'comment-form\')\n+        provideAdapter(\n+            adapts=(Interface, IBrowserRequest),\n+            provides=Interface,\n+            factory=CommentForm,\n+            name=u"comment-form",\n+        )\n \n         # Post an anonymous comment and provide a name\n-        request = make_request(form={\n-            \'form.widgets.name\': u\'john doe\',\n-            \'form.widgets.text\': u\'bar\',\n-        })\n+        request = make_request(\n+            form={\n+                "form.widgets.name": u"john doe",\n+                "form.widgets.text": u"bar",\n+            }\n+        )\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u\'comment-form\',\n+            name=u"comment-form",\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n \n         self.assertEqual(len(errors), 0)\n-        self.assertFalse(commentForm.handleComment(commentForm, \'action\'))\n+        self.assertFalse(commentForm.handleComment(commentForm, "action"))\n \n         comments = IConversation(commentForm.context).getComments()\n         comments = [comment for comment in comments]  # consume itertor\n         self.assertEqual(len(comments), 1)\n \n         for comment in IConversation(commentForm.context).getComments():\n-            self.assertEqual(comment.text, u\'bar\')\n+            self.assertEqual(comment.text, u"bar")\n             self.assertIsNone(comment.creator)\n             roles = comment.get_local_roles()\n             self.assertEqual(len(roles), 0)\n \n     def test_can_not_add_comments_if_discussion_is_not_allowed(self):\n-        """Make sure that comments can\'t be posted if discussion is disabled.\n-        """\n+        """Make sure that comments can\'t be posted if discussion is disabled."""\n \n         # Disable discussion\n         registry = queryUtility(IRegistry)\n@@ -384,16 +383,18 @@ def make_request(form={}):\n             alsoProvides(request, IAttributeAnnotatable)\n             return request\n \n-        provideAdapter(adapts=(Interface, IBrowserRequest),\n-                       provides=Interface,\n-                       factory=CommentForm,\n-                       name=u\'comment-form\')\n+        provideAdapter(\n+            adapts=(Interface, IBrowserRequest),\n+            provides=Interface,\n+            factory=CommentForm,\n+            name=u"comment-form",\n+        )\n \n-        request = make_request(form={\'form.widgets.text\': u\'bar\'})\n+        request = make_request(form={"form.widgets.text": u"bar"})\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u\'comment-form\',\n+            name=u"comment-form",\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n@@ -402,14 +403,11 @@ def make_request(form={}):\n         # allowed\n         self.assertEqual(len(errors), 0)\n \n-        self.assertRaises(Unauthorized,\n-                          commentForm.handleComment,\n-                          commentForm,\n-                          \'foo\')\n+        self.assertRaises(Unauthorized, commentForm.handleComment, commentForm, "foo")\n \n     def test_anonymous_can_not_add_comments_if_discussion_is_not_allowed(self):\n         """Make sure that anonymous users can\'t post comments if anonymous\n-           comments are disabled.\n+        comments are disabled.\n         """\n \n         # Anonymous comments are disabled by default\n@@ -423,15 +421,16 @@ def make_request(form={}):\n             alsoProvides(request, IAttributeAnnotatable)\n             return request\n \n-        provideAdapter(adapts=(Interface, IBrowserRequest),\n-                       provides=Interface,\n-                       factory=CommentForm,\n-                       name=u\'comment-form\')\n+        provideAdapter(\n+            adapts=(Interface, IBrowserRequest),\n+            provides=Interface,\n+            factory=CommentForm,\n+            name=u"comment-form",\n+        )\n \n-        request = make_request(form={\'form.widgets.text\': u\'bar\'})\n+        request = make_request(form={"form.widgets.text": u"bar"})\n \n-        commentForm = getMultiAdapter((self.context, request),\n-                                      name=u\'comment-form\')\n+        commentForm = getMultiAdapter((self.context, request), name=u"comment-form")\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n \n@@ -440,7 +439,7 @@ def make_request(form={}):\n             Unauthorized,\n             commentForm.handleComment,\n             commentForm,\n-            \'foo\',\n+            "foo",\n         )\n \n \n@@ -449,22 +448,22 @@ class TestCommentsViewlet(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'test-folder\')\n-        self.folder = self.portal[\'test-folder\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "test-folder")\n+        self.folder = self.portal["test-folder"]\n         interface.alsoProvides(\n             self.request,\n             interfaces.IDiscussionLayer,\n         )\n \n-        self.workflowTool = getToolByName(self.portal, \'portal_workflow\')\n-        self.workflowTool.setDefaultChain(\'comment_one_state_workflow\')\n+        self.workflowTool = getToolByName(self.portal, "portal_workflow")\n+        self.workflowTool.setDefaultChain("comment_one_state_workflow")\n \n-        self.membershipTool = getToolByName(self.folder, \'portal_membership\')\n+        self.membershipTool = getToolByName(self.folder, "portal_membership")\n         self.memberdata = self.portal.portal_memberdata\n-        context = getattr(self.portal, \'doc1\')\n+        context = getattr(self.portal, "doc1")\n         self.viewlet = CommentsViewlet(context, self.request, None, None)\n \n         # Allow discussion\n@@ -486,15 +485,14 @@ def test_can_review(self):\n         # Anonymous has no \'can review\' permission\n         self.assertFalse(self.viewlet.can_review())\n         # The reviewer role has the \'Review comments\' permission\n-        self.portal.acl_users._doAddUser(\n-            \'reviewer\', \'secret\', [\'Reviewer\'], [])\n-        login(self.portal, \'reviewer\')\n+        self.portal.acl_users._doAddUser("reviewer", "secret", ["Reviewer"], [])\n+        login(self.portal, "reviewer")\n         self.assertTrue(self.viewlet.can_review())\n \n     def test_can_manage(self):\n         """We keep this method for backward compatibility. This method has been\n-           removed in version 1.0b9 and added again in 1.0b11 because we don\'t\n-           do API changes in beta releases.\n+        removed in version 1.0b9 and added again in 1.0b11 because we don\'t\n+        do API changes in beta releases.\n         """\n         # Portal owner has \'can review\' permission\n         self.assertTrue(self.viewlet.can_manage())\n@@ -502,9 +500,8 @@ def test_can_manage(self):\n         # Anonymous has no \'can review\' permission\n         self.assertFalse(self.viewlet.can_manage())\n         # The reviewer role has the \'Review comments\' permission\n-        self.portal.acl_users._doAddUser(\n-            \'reviewer\', \'secret\', [\'Reviewer\'], [])\n-        login(self.portal, \'reviewer\')\n+        self.portal.acl_users._doAddUser("reviewer", "secret", ["Reviewer"], [])\n+        login(self.portal, "reviewer")\n         self.assertTrue(self.viewlet.can_manage())\n \n     def test_is_discussion_allowed(self):\n@@ -521,46 +518,48 @@ def test_comment_transform_message(self):\n         self.assertTrue(self.viewlet.comment_transform_message())\n         self.assertEqual(\n             self.viewlet.comment_transform_message(),\n-            \'You can add a comment by filling out the form below. Plain \' +\n-            \'text formatting.\')\n+            "You can add a comment by filling out the form below. Plain "\n+            + "text formatting.",\n+        )\n \n         # Set text transform to intelligent text\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n-        settings.text_transform = \'text/x-web-intelligent\'\n+        settings.text_transform = "text/x-web-intelligent"\n \n         # Make sure the comment description changes accordingly\n         self.assertEqual(\n             self.viewlet.comment_transform_message(),\n-            \'You can add a comment by filling out the form below. \' +\n-            \'Plain text formatting. Web and email addresses are transformed \' +\n-            \'into clickable links.\',\n+            "You can add a comment by filling out the form below. "\n+            + "Plain text formatting. Web and email addresses are transformed "\n+            + "into clickable links.",\n         )\n \n         # Enable moderation workflow\n         self.workflowTool.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            (\'comment_review_workflow,\'))\n+            ("Discussion Item",), ("comment_review_workflow,")\n+        )\n \n         # Make sure the comment description shows that comments are moderated\n         self.assertEqual(\n             self.viewlet.comment_transform_message(),\n-            \'You can add a comment by filling out the form below. \' +\n-            \'Plain text formatting. Web and email addresses are transformed \' +\n-            \'into clickable links. Comments are moderated.\')\n+            "You can add a comment by filling out the form below. "\n+            + "Plain text formatting. Web and email addresses are transformed "\n+            + "into clickable links. Comments are moderated.",\n+        )\n \n     def test_has_replies(self):\n         self.assertEqual(self.viewlet.has_replies(), False)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         conversation = IConversation(self.portal.doc1)\n         conversation.addComment(comment)\n         self.assertEqual(self.viewlet.has_replies(), True)\n \n     def test_get_replies(self):\n         self.assertFalse(self.viewlet.get_replies())\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         conversation = IConversation(self.portal.doc1)\n         conversation.addComment(comment)\n         conversation.addComment(comment)\n@@ -573,7 +572,7 @@ def test_get_replies(self):\n             next(replies)\n \n     def test_get_replies_on_non_annotatable_object(self):\n-        context = self.portal.MailHost      # the mail host is not annotatable\n+        context = self.portal.MailHost  # the mail host is not annotatable\n         viewlet = CommentsViewlet(context, self.request, None, None)\n         replies = viewlet.get_replies()\n         self.assertEqual(len(tuple(replies)), 0)\n@@ -583,8 +582,8 @@ def test_get_replies_on_non_annotatable_object(self):\n \n     def test_get_replies_with_workflow_actions(self):\n         self.assertFalse(self.viewlet.get_replies(workflow_actions=True))\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         conversation = IConversation(self.portal.doc1)\n         c1 = conversation.addComment(comment)\n         self.assertEqual(\n@@ -593,32 +592,34 @@ def test_get_replies_with_workflow_actions(self):\n         )\n         # Enable moderation workflow\n         self.workflowTool.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            (\'comment_review_workflow,\'),\n+            ("Discussion Item",),\n+            ("comment_review_workflow,"),\n         )\n         # Check if workflow actions are available\n         reply = next(self.viewlet.get_replies(workflow_actions=True))\n-        self.assertTrue(\'actions\' in reply)\n+        self.assertTrue("actions" in reply)\n         self.assertEqual(\n-            reply[\'actions\'][0][\'id\'],\n-            \'mark_as_spam\',\n+            reply["actions"][0]["id"],\n+            "mark_as_spam",\n+        )\n+        expected_url = (\n+            "http://nohost/plone/doc1/++conversation++default/{0}"\n+            "/content_status_modify?workflow_action=mark_as_spam"\n         )\n-        expected_url = \'http://nohost/plone/doc1/++conversation++default/{0}\' \\\n-                       \'/content_status_modify?workflow_action=mark_as_spam\'\n         self.assertEqual(\n-            reply[\'actions\'][0][\'url\'],\n+            reply["actions"][0]["url"],\n             expected_url.format(int(c1)),\n         )\n \n     def test_get_commenter_home_url(self):\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         IConversation(self.portal.doc1)\n-        portal_membership = getToolByName(self.portal, \'portal_membership\')\n+        portal_membership = getToolByName(self.portal, "portal_membership")\n         m = portal_membership.getAuthenticatedMember()\n         self.assertEqual(\n             self.viewlet.get_commenter_home_url(m.getUserName()),\n-            \'http://nohost/plone/author/test-user\',\n+            "http://nohost/plone/author/test-user",\n         )\n \n     def test_get_commenter_home_url_is_none(self):\n@@ -627,72 +628,77 @@ def test_get_commenter_home_url_is_none(self):\n     def test_get_commenter_portrait(self):\n \n         # Add a user with a member image\n-        self.membershipTool.addMember(\'jim\', \'Jim\', [\'Member\'], [])\n-        self.memberdata._setPortrait(Image(\n-            id=\'jim\',\n-            file=dummy.File(),\n-            title=\'\',\n-        ), \'jim\')\n+        self.membershipTool.addMember("jim", "Jim", ["Member"], [])\n+        self.memberdata._setPortrait(\n+            Image(\n+                id="jim",\n+                file=dummy.File(),\n+                title="",\n+            ),\n+            "jim",\n+        )\n         self.assertEqual(\n-            self.memberdata._getPortrait(\'jim\').getId(),\n-            \'jim\',\n+            self.memberdata._getPortrait("jim").getId(),\n+            "jim",\n         )\n         self.assertEqual(\n-            self.memberdata._getPortrait(\'jim\').meta_type,\n-            \'Image\',\n+            self.memberdata._getPortrait("jim").meta_type,\n+            "Image",\n         )\n \n         # Add a conversation with a comment\n         conversation = IConversation(self.portal.doc1)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n-        comment.Creator = \'Jim\'\n-        comment.author_username = \'jim\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n+        comment.Creator = "Jim"\n+        comment.author_username = "jim"\n         conversation.addComment(comment)\n \n         # Call get_commenter_portrait method of the viewlet\n         self.viewlet.update()\n-        portrait_url = self.viewlet.get_commenter_portrait(\'jim\')\n+        portrait_url = self.viewlet.get_commenter_portrait("jim")\n \n         # Check if the correct member image URL is returned\n         self.assertEqual(\n             portrait_url,\n-            \'http://nohost/plone/portal_memberdata/portraits/jim\',\n+            "http://nohost/plone/portal_memberdata/portraits/jim",\n         )\n \n     def test_get_commenter_portrait_is_none(self):\n \n         self.assertTrue(\n-            self.viewlet.get_commenter_portrait() in (\n-                \'defaultUser.png\',\n-                \'defaultUser.gif\',\n+            self.viewlet.get_commenter_portrait()\n+            in (\n+                "defaultUser.png",\n+                "defaultUser.gif",\n             ),\n         )\n \n     def test_get_commenter_portrait_without_userimage(self):\n \n         # Create a user without a user image\n-        self.membershipTool.addMember(\'jim\', \'Jim\', [\'Member\'], [])\n+        self.membershipTool.addMember("jim", "Jim", ["Member"], [])\n \n         # Add a conversation with a comment\n         conversation = IConversation(self.portal.doc1)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n-        comment.Creator = \'Jim\'\n-        comment.author_username = \'jim\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n+        comment.Creator = "Jim"\n+        comment.author_username = "jim"\n         conversation.addComment(comment)\n \n         # Call get_commenter_portrait method of the viewlet\n         self.viewlet.update()\n-        portrait_url = self.viewlet.get_commenter_portrait(\'jim\')\n+        portrait_url = self.viewlet.get_commenter_portrait("jim")\n \n         # Check if the correct default member image URL is returned.\n         # Note that Products.PlonePAS 4.0.5 and later have .png and\n         # earlier versions have .gif.\n         self.assertTrue(\n-            portrait_url in (\n-                \'http://nohost/plone/defaultUser.png\',\n-                \'http://nohost/plone/defaultUser.gif\',\n+            portrait_url\n+            in (\n+                "http://nohost/plone/defaultUser.png",\n+                "http://nohost/plone/defaultUser.gif",\n             ),\n         )\n \n@@ -702,8 +708,8 @@ def test_anonymous_discussion_allowed(self):\n         # Allow anonymous discussion\n         registry = queryUtility(IRegistry)\n         registry[\n-            \'plone.app.discussion.interfaces.IDiscussionSettings.\' +\n-            \'anonymous_comments\'\n+            "plone.app.discussion.interfaces.IDiscussionSettings."\n+            + "anonymous_comments"\n         ] = True\n         # Test if anonymous discussion is allowed for the viewlet\n         self.assertTrue(self.viewlet.anonymous_discussion_allowed())\n@@ -712,8 +718,8 @@ def test_show_commenter_image(self):\n         self.assertTrue(self.viewlet.show_commenter_image())\n         registry = queryUtility(IRegistry)\n         registry[\n-            \'plone.app.discussion.interfaces.IDiscussionSettings.\' +\n-            \'show_commenter_image\'\n+            "plone.app.discussion.interfaces.IDiscussionSettings."\n+            + "show_commenter_image"\n         ] = False\n         self.assertFalse(self.viewlet.show_commenter_image())\n \n@@ -726,7 +732,7 @@ def test_login_action(self):\n         self.viewlet.update()\n         self.assertEqual(\n             self.viewlet.login_action(),\n-            \'http://nohost/plone/login_form?came_from=http%3A//nohost\',\n+            "http://nohost/plone/login_form?came_from=http%3A//nohost",\n         )\n \n     def test_format_time(self):\n@@ -739,9 +745,8 @@ def test_format_time(self):\n         # a correct utc time that can be used to make datetime set the utc\n         # time of the local time given above. That way, the time for the\n         # example below is correct within each time zone, independent of DST\n-        python_time = datetime(\n-            *time.gmtime(time.mktime(python_time.timetuple()))[:7])\n+        python_time = datetime(*time.gmtime(time.mktime(python_time.timetuple()))[:7])\n         localized_time = self.viewlet.format_time(python_time)\n         self.assertTrue(\n-            localized_time in [\'Feb 01, 2009 11:32 PM\', \'2009-02-01 23:32\'],\n+            localized_time in ["Feb 01, 2009 11:32 PM", "2009-02-01 23:32"],\n         )\ndiff --git a/plone/app/discussion/tests/test_contentrules.py b/plone/app/discussion/tests/test_contentrules.py\nindex 40403354..d23c8548 100644\n--- a/plone/app/discussion/tests/test_contentrules.py\n+++ b/plone/app/discussion/tests/test_contentrules.py\n@@ -19,31 +19,33 @@\n \n \n class CommentContentRulesTest(unittest.TestCase):\n-    """ Test custom comments events\n-    """\n+    """Test custom comments events"""\n+\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n         # Setup sandbox\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         # Setup current user properties\n         member = self.portal.portal_membership.getMemberById(TEST_USER_ID)\n-        member.setMemberProperties({\n-            \'fullname\': \'X Manager\',\n-            \'email\': \'xmanager@example.com\',\n-        })\n+        member.setMemberProperties(\n+            {\n+                "fullname": "X Manager",\n+                "email": "xmanager@example.com",\n+            }\n+        )\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.document = self.portal[\'doc1\']\n+        self.document = self.portal["doc1"]\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'This is a comment\'\n-        comment.author_username = \'jim\'\n-        comment.author_name = \'Jim\'\n-        comment.author_email = \'jim@example.com\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "This is a comment"\n+        comment.author_username = "jim"\n+        comment.author_name = "Jim"\n+        comment.author_email = "jim@example.com"\n         conversation = IConversation(self.document)\n         conversation.addComment(comment)\n \n@@ -54,58 +56,61 @@ def testEventTypesMarked(self):\n         self.assertTrue(IRuleEventType.providedBy(IReplyRemovedEvent))\n \n     def testCommentIdStringSubstitution(self):\n-        comment_id = getAdapter(self.document, IStringSubstitution,\n-                                name=u\'comment_id\')\n+        comment_id = getAdapter(self.document, IStringSubstitution, name=u"comment_id")\n         self.assertIsInstance(comment_id(), int)\n \n     def testCommentTextStringSubstitution(self):\n-        comment_text = getAdapter(self.document, IStringSubstitution,\n-                                  name=u\'comment_text\')\n-        self.assertEqual(comment_text(), u\'This is a comment\')\n+        comment_text = getAdapter(\n+            self.document, IStringSubstitution, name=u"comment_text"\n+        )\n+        self.assertEqual(comment_text(), u"This is a comment")\n \n     def testCommentUserIdStringSubstitution(self):\n-        comment_user_id = getAdapter(self.document, IStringSubstitution,\n-                                     name=u\'comment_user_id\')\n-        self.assertEqual(comment_user_id(), u\'jim\')\n+        comment_user_id = getAdapter(\n+            self.document, IStringSubstitution, name=u"comment_user_id"\n+        )\n+        self.assertEqual(comment_user_id(), u"jim")\n \n     def testCommentUserFullNameStringSubstitution(self):\n-        comment_user_fullname = getAdapter(self.document, IStringSubstitution,\n-                                           name=u\'comment_user_fullname\')\n-        self.assertEqual(comment_user_fullname(), u\'Jim\')\n+        comment_user_fullname = getAdapter(\n+            self.document, IStringSubstitution, name=u"comment_user_fullname"\n+        )\n+        self.assertEqual(comment_user_fullname(), u"Jim")\n \n     def testCommentUserEmailStringSubstitution(self):\n-        comment_user_email = getAdapter(self.document, IStringSubstitution,\n-                                        name=u\'comment_user_email\')\n-        self.assertEqual(comment_user_email(), u\'jim@example.com\')\n+        comment_user_email = getAdapter(\n+            self.document, IStringSubstitution, name=u"comment_user_email"\n+        )\n+        self.assertEqual(comment_user_email(), u"jim@example.com")\n \n \n class ReplyContentRulesTest(unittest.TestCase):\n-    """ Test custom comments events\n-    """\n+    """Test custom comments events"""\n+\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n         # Setup sandbox\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.document = self.portal[\'doc1\']\n+        self.document = self.portal["doc1"]\n         conversation = IConversation(self.document)\n         replies = IReplies(conversation)\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'This is a comment\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "This is a comment"\n         new_id = replies.addComment(comment)\n         comment = self.document.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id),\n+            "++conversation++default/{0}".format(new_id),\n         )\n \n-        re_comment = createObject(\'plone.Comment\')\n-        re_comment.text = \'This is a reply\'\n-        re_comment.author_username = \'julia\'\n-        re_comment.author_name = \'Juliana\'\n-        re_comment.author_email = \'julia@example.com\'\n+        re_comment = createObject("plone.Comment")\n+        re_comment.text = "This is a reply"\n+        re_comment.author_username = "julia"\n+        re_comment.author_name = "Juliana"\n+        re_comment.author_email = "julia@example.com"\n \n         replies = IReplies(comment)\n         replies.addComment(re_comment)\n@@ -114,7 +119,7 @@ def testReplyIdStringSubstitution(self):\n         reply_id = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u\'comment_id\',\n+            name=u"comment_id",\n         )\n         self.assertIsInstance(reply_id(), int)\n \n@@ -122,30 +127,30 @@ def testReplyTextStringSubstitution(self):\n         reply_text = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u\'comment_text\',\n+            name=u"comment_text",\n         )\n-        self.assertEqual(reply_text(), u\'This is a reply\')\n+        self.assertEqual(reply_text(), u"This is a reply")\n \n     def testReplyUserIdStringSubstitution(self):\n         reply_user_id = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u\'comment_user_id\',\n+            name=u"comment_user_id",\n         )\n-        self.assertEqual(reply_user_id(), u\'julia\')\n+        self.assertEqual(reply_user_id(), u"julia")\n \n     def testReplyUserFullNameStringSubstitution(self):\n         reply_user_fullname = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u\'comment_user_fullname\',\n+            name=u"comment_user_fullname",\n         )\n-        self.assertEqual(reply_user_fullname(), u\'Juliana\')\n+        self.assertEqual(reply_user_fullname(), u"Juliana")\n \n     def testReplyUserEmailStringSubstitution(self):\n         reply_user_email = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u\'comment_user_email\',\n+            name=u"comment_user_email",\n         )\n-        self.assertEqual(reply_user_email(), u\'julia@example.com\')\n+        self.assertEqual(reply_user_email(), u"julia@example.com")\ndiff --git a/plone/app/discussion/tests/test_controlpanel.py b/plone/app/discussion/tests/test_controlpanel.py\nindex 9fbdca92..f9f1cb15 100644\n--- a/plone/app/discussion/tests/test_controlpanel.py\n+++ b/plone/app/discussion/tests/test_controlpanel.py\n@@ -19,8 +19,8 @@ class RegistryTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.registry = Registry()\n         self.registry.registerInterface(IDiscussionSettings)\n \n@@ -31,99 +31,100 @@ def test_registry_registered(self):\n     def test_discussion_controlpanel_view(self):\n         view = getMultiAdapter(\n             (self.portal, self.portal.REQUEST),\n-            name=\'discussion-controlpanel\',\n+            name="discussion-controlpanel",\n         )\n         self.assertTrue(view())\n \n     def test_discussion_in_controlpanel(self):\n         # Check if discussion is in the control panel\n-        self.controlpanel = getToolByName(self.portal, \'portal_controlpanel\')\n+        self.controlpanel = getToolByName(self.portal, "portal_controlpanel")\n         self.assertTrue(\n-            \'discussion\' in [\n-                a.getAction(self)[\'id\']\n-                for a in self.controlpanel.listActions()\n-            ],\n+            "discussion"\n+            in [a.getAction(self)["id"] for a in self.controlpanel.listActions()],\n         )\n \n     def test_globally_enabled(self):\n         # Check globally_enabled record\n-        self.assertTrue(\'globally_enabled\' in IDiscussionSettings)\n+        self.assertTrue("globally_enabled" in IDiscussionSettings)\n         self.assertEqual(\n             self.registry[\n-                \'plone.app.discussion.interfaces.\' +\n-                \'IDiscussionSettings.globally_enabled\'\n+                "plone.app.discussion.interfaces."\n+                + "IDiscussionSettings.globally_enabled"\n             ],\n             False,\n         )\n \n     def test_anonymous_comments(self):\n         # Check anonymous_comments record\n-        self.assertTrue(\'anonymous_comments\' in IDiscussionSettings)\n+        self.assertTrue("anonymous_comments" in IDiscussionSettings)\n         self.assertEqual(\n             self.registry[\n-                \'plone.app.discussion.interfaces.\' +\n-                \'IDiscussionSettings.anonymous_comments\'\n+                "plone.app.discussion.interfaces."\n+                + "IDiscussionSettings.anonymous_comments"\n             ],\n             False,\n         )\n \n     def test_moderation_enabled(self):\n         # Check globally_enabled record\n-        self.assertTrue(\'moderation_enabled\' in IDiscussionSettings)\n+        self.assertTrue("moderation_enabled" in IDiscussionSettings)\n         self.assertEqual(\n             self.registry[\n-                \'plone.app.discussion.interfaces.\' +\n-                \'IDiscussionSettings.moderation_enabled\'\n+                "plone.app.discussion.interfaces."\n+                + "IDiscussionSettings.moderation_enabled"\n             ],\n             False,\n         )\n \n     def test_edit_comment_enabled(self):\n         # Check edit_comment_enabled record\n-        self.assertTrue(\'edit_comment_enabled\' in IDiscussionSettings)\n+        self.assertTrue("edit_comment_enabled" in IDiscussionSettings)\n         self.assertEqual(\n-            self.registry[\'plone.app.discussion.interfaces.\' +\n-                          \'IDiscussionSettings.edit_comment_enabled\'],\n+            self.registry[\n+                "plone.app.discussion.interfaces."\n+                + "IDiscussionSettings.edit_comment_enabled"\n+            ],\n             False,\n         )\n \n     def test_delete_own_comment_enabled(self):\n         # Check delete_own_comment_enabled record\n-        self.assertTrue(\'delete_own_comment_enabled\' in IDiscussionSettings)\n+        self.assertTrue("delete_own_comment_enabled" in IDiscussionSettings)\n         self.assertEqual(\n-            self.registry[\'plone.app.discussion.interfaces.\' +\n-                          \'IDiscussionSettings.delete_own_comment_enabled\'],\n+            self.registry[\n+                "plone.app.discussion.interfaces."\n+                + "IDiscussionSettings.delete_own_comment_enabled"\n+            ],\n             False,\n         )\n \n     def test_text_transform(self):\n-        self.assertTrue(\'text_transform\' in IDiscussionSettings)\n+        self.assertTrue("text_transform" in IDiscussionSettings)\n         self.assertEqual(\n             self.registry[\n-                \'plone.app.discussion.interfaces.\' +\n-                \'IDiscussionSettings.text_transform\'\n+                "plone.app.discussion.interfaces."\n+                + "IDiscussionSettings.text_transform"\n             ],\n-            \'text/plain\',\n+            "text/plain",\n         )\n \n     def test_captcha(self):\n         # Check globally_enabled record\n-        self.assertTrue(\'captcha\' in IDiscussionSettings)\n+        self.assertTrue("captcha" in IDiscussionSettings)\n         self.assertEqual(\n             self.registry[\n-                \'plone.app.discussion.interfaces.\' +\n-                \'IDiscussionSettings.captcha\'\n+                "plone.app.discussion.interfaces." + "IDiscussionSettings.captcha"\n             ],\n-            \'disabled\',\n+            "disabled",\n         )\n \n     def test_show_commenter_image(self):\n         # Check show_commenter_image record\n-        self.assertTrue(\'show_commenter_image\' in IDiscussionSettings)\n+        self.assertTrue("show_commenter_image" in IDiscussionSettings)\n         self.assertEqual(\n             self.registry[\n-                \'plone.app.discussion.interfaces.\' +\n-                \'IDiscussionSettings.show_commenter_image\'\n+                "plone.app.discussion.interfaces."\n+                + "IDiscussionSettings.show_commenter_image"\n             ],\n             True,\n         )\n@@ -131,12 +132,12 @@ def test_show_commenter_image(self):\n     def test_moderator_notification_enabled(self):\n         # Check show_commenter_image record\n         self.assertTrue(\n-            \'moderator_notification_enabled\' in IDiscussionSettings,\n+            "moderator_notification_enabled" in IDiscussionSettings,\n         )\n         self.assertEqual(\n             self.registry[\n-                \'plone.app.discussion.interfaces.\' +\n-                \'IDiscussionSettings.moderator_notification_enabled\'\n+                "plone.app.discussion.interfaces."\n+                + "IDiscussionSettings.moderator_notification_enabled"\n             ],\n             False,\n         )\n@@ -156,22 +157,22 @@ class ConfigurationChangedSubscriberTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         registry = queryUtility(IRegistry)\n         self.settings = registry.forInterface(IDiscussionSettings, check=False)\n \n     def test_moderation_enabled_in_discussion_control_panel_changed(self):\n         """Make sure the \'Discussion Item\' workflow is changed properly, when\n-           the \'comment_moderation\' setting in the discussion control panel\n-           changes.\n+        the \'comment_moderation\' setting in the discussion control panel\n+        changes.\n         """\n         # By default the comment_one_state_workflow without moderation is\n         # enabled\n         self.assertEqual(\n-            (\'comment_one_state_workflow\',),\n+            ("comment_one_state_workflow",),\n             self.portal.portal_workflow.getChainForPortalType(\n-                \'Discussion Item\',\n+                "Discussion Item",\n             ),\n         )\n \n@@ -181,32 +182,32 @@ def test_moderation_enabled_in_discussion_control_panel_changed(self):\n         # Make sure the comment_review_workflow with moderation enabled is\n         # enabled\n         self.assertEqual(\n-            (\'comment_review_workflow\',),\n+            ("comment_review_workflow",),\n             self.portal.portal_workflow.getChainForPortalType(\n-                \'Discussion Item\',\n+                "Discussion Item",\n             ),\n         )\n         # And back\n         self.settings.moderation_enabled = False\n         self.assertEqual(\n-            (\'comment_one_state_workflow\',),\n+            ("comment_one_state_workflow",),\n             self.portal.portal_workflow.getChainForPortalType(\n-                \'Discussion Item\',\n+                "Discussion Item",\n             ),\n         )\n \n     def test_change_workflow_in_types_control_panel(self):\n         """Make sure the setting in the discussion control panel is changed\n-           accordingly, when the workflow for the \'Discussion Item\' changed in\n-           the types control panel.\n+        accordingly, when the workflow for the \'Discussion Item\' changed in\n+        the types control panel.\n         """\n         # By default, moderation is disabled\n         self.settings.moderation_enabled = False\n \n         # Enable the \'comment_review_workflow\' with moderation enabled\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            (\'comment_review_workflow\',),\n+            ("Discussion Item",),\n+            ("comment_review_workflow",),\n         )\n \n         # Make sure the moderation_enabled settings has changed\n@@ -214,15 +215,15 @@ def test_change_workflow_in_types_control_panel(self):\n \n         # Enable the \'comment_review_workflow\' with moderation enabled\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            (\'comment_one_state_workflow\',),\n+            ("Discussion Item",),\n+            ("comment_one_state_workflow",),\n         )\n         self.settings.moderation_enabled = True\n \n         # Enable a \'custom\' discussion workflow\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            (\'intranet_workflow\',),\n+            ("Discussion Item",),\n+            ("intranet_workflow",),\n         )\n \n         # Setting has not changed. A Custom workflow disables the\ndiff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex a8efcfd2..c00acd95 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -27,6 +27,7 @@\n \n try:\n     from plone.dexterity.interfaces import IDexterityContent\n+\n     DEXTERITY = True\n except ImportError:\n     DEXTERITY = False\n@@ -37,15 +38,14 @@ class ConversationTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        interface.alsoProvides(\n-            self.portal.REQUEST, interfaces.IDiscussionLayer)\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        interface.alsoProvides(self.portal.REQUEST, interfaces.IDiscussionLayer)\n \n         self.typetool = self.portal.portal_types\n         self.portal_discussion = getToolByName(\n             self.portal,\n-            \'portal_discussion\',\n+            "portal_discussion",\n             None,\n         )\n         # Allow discussion\n@@ -54,7 +54,7 @@ def setUp(self):\n         settings.globally_enabled = True\n \n         workflow = self.portal.portal_workflow\n-        workflow.doActionFor(self.portal.doc1, \'publish\')\n+        workflow.doActionFor(self.portal.doc1, "publish")\n \n     def test_add_comment(self):\n         # Create a conversation. In this case we doesn\'t assign it to an\n@@ -64,8 +64,8 @@ def test_add_comment(self):\n         # Add a comment. Note: in real life, we always create comments via the\n         # factory to allow different factories to be swapped in\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         new_id = conversation.addComment(comment)\n \n@@ -81,20 +81,19 @@ def test_add_comment(self):\n         self.assertEqual(len(tuple(conversation.getThreads())), 1)\n         self.assertEqual(conversation.total_comments(), 1)\n         self.assertTrue(\n-            conversation.last_comment_date - datetime.utcnow() <\n-            timedelta(seconds=1),\n+            conversation.last_comment_date - datetime.utcnow() < timedelta(seconds=1),\n         )\n \n     def test_private_comment(self):\n         conversation = IConversation(self.portal.doc1)\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.author_username = \'nobody\'\n+        comment = createObject("plone.Comment")\n+        comment.author_username = "nobody"\n         conversation.addComment(comment)\n-        comment.manage_permission(\'View\', roles=tuple())\n+        comment.manage_permission("View", roles=tuple())\n         self.assertEqual(0, conversation.total_comments())\n         self.assertEqual(None, conversation.last_comment_date)\n-        self.assertEqual([\'nobody\'], list(conversation.commentators))\n+        self.assertEqual(["nobody"], list(conversation.commentators))\n         self.assertEqual([], list(conversation.public_commentators))\n \n     def test_delete_comment(self):\n@@ -105,8 +104,8 @@ def test_delete_comment(self):\n         # Add a comment. Note: in real life, we always create comments via the\n         # factory to allow different factories to be swapped in\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         new_id = conversation.addComment(comment)\n \n@@ -141,23 +140,23 @@ def test_delete_recursive(self):\n         #    +- Comment 2_1\n \n         # Create all comments\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n \n-        comment1_1 = createObject(\'plone.Comment\')\n-        comment1_1.text = \'Comment text\'\n+        comment1_1 = createObject("plone.Comment")\n+        comment1_1.text = "Comment text"\n \n-        comment1_1_1 = createObject(\'plone.Comment\')\n-        comment1_1_1.text = \'Comment text\'\n+        comment1_1_1 = createObject("plone.Comment")\n+        comment1_1_1.text = "Comment text"\n \n-        comment1_2 = createObject(\'plone.Comment\')\n-        comment1_2.text = \'Comment text\'\n+        comment1_2 = createObject("plone.Comment")\n+        comment1_2.text = "Comment text"\n \n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.text = \'Comment text\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.text = "Comment text"\n \n-        comment2_1 = createObject(\'plone.Comment\')\n-        comment2_1.text = \'Comment text\'\n+        comment2_1 = createObject("plone.Comment")\n+        comment2_1.text = "Comment text"\n \n         # Create the nested comment structure\n         new_id_1 = conversation.addComment(comment1)\n@@ -177,21 +176,24 @@ def test_delete_recursive(self):\n \n         del conversation[new_id_1]\n \n-        self.assertEqual([\n-            {\'comment\': comment2, \'depth\': 0, \'id\': new_id_2},\n-            {\'comment\': comment2_1, \'depth\': 1, \'id\': new_id_2_1},\n-        ], list(conversation.getThreads()))\n+        self.assertEqual(\n+            [\n+                {"comment": comment2, "depth": 0, "id": new_id_2},\n+                {"comment": comment2_1, "depth": 1, "id": new_id_2_1},\n+            ],\n+            list(conversation.getThreads()),\n+        )\n \n     def test_delete_comment_when_content_object_is_deleted(self):\n         # Make sure all comments of a content object are deleted when the\n         # object itself is deleted.\n         conversation = IConversation(self.portal.doc1)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         conversation.addComment(comment)\n \n         # Delete the content object\n-        self.portal.manage_delObjects([\'doc1\'])\n+        self.portal.manage_delObjects(["doc1"])\n \n         # Make sure the comment has been deleted as well\n         self.assertEqual(len(list(conversation.getComments())), 0)\n@@ -200,8 +202,8 @@ def test_delete_comment_when_content_object_is_deleted(self):\n \n     def test_comments_enabled_on_doc_in_subfolder(self):\n         typetool = self.portal.portal_types\n-        typetool.constructContent(\'Folder\', self.portal, \'folder1\')\n-        typetool.constructContent(\'Document\', self.portal.folder1, \'doc2\')\n+        typetool.constructContent("Folder", self.portal, "folder1")\n+        typetool.constructContent("Document", self.portal.folder1, "doc2")\n \n         folder = self.portal.folder1\n \n@@ -211,13 +213,13 @@ def test_comments_enabled_on_doc_in_subfolder(self):\n         self.assertFalse(aq_base(folder).allow_discussion)\n \n         doc = self.portal.folder1.doc2\n-        conversation = doc.restrictedTraverse(\'@@conversation_view\')\n+        conversation = doc.restrictedTraverse("@@conversation_view")\n         self.assertEqual(conversation.enabled(), False)\n \n         # We have to allow discussion on Document content type, since\n         # otherwise allow_discussion will always return False\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n-        document_fti = getattr(portal_types, \'Document\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n+        document_fti = getattr(portal_types, "Document")\n         document_fti.manage_changeProperties(allow_discussion=True)\n \n         self.assertEqual(conversation.enabled(), True)\n@@ -225,13 +227,12 @@ def test_comments_enabled_on_doc_in_subfolder(self):\n     def test_disable_commenting_globally(self):\n \n         # Create a conversation.\n-        conversation = self.portal.doc1.restrictedTraverse(\n-            \'@@conversation_view\')\n+        conversation = self.portal.doc1.restrictedTraverse("@@conversation_view")\n \n         # We have to allow discussion on Document content type, since\n         # otherwise allow_discussion will always return False\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n-        document_fti = getattr(portal_types, \'Document\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n+        document_fti = getattr(portal_types, "Document")\n         document_fti.manage_changeProperties(allow_discussion=True)\n \n         # Check if conversation is enabled now\n@@ -251,14 +252,14 @@ def test_disable_commenting_globally(self):\n \n     def test_allow_discussion_for_news_items(self):\n \n-        self.typetool.constructContent(\'News Item\', self.portal, \'newsitem\')\n+        self.typetool.constructContent("News Item", self.portal, "newsitem")\n         newsitem = self.portal.newsitem\n-        conversation = newsitem.restrictedTraverse(\'@@conversation_view\')\n+        conversation = newsitem.restrictedTraverse("@@conversation_view")\n \n         # We have to allow discussion on Document content type, since\n         # otherwise allow_discussion will always return False\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n-        document_fti = getattr(portal_types, \'News Item\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n+        document_fti = getattr(portal_types, "News Item")\n         document_fti.manage_changeProperties(allow_discussion=True)\n \n         # Check if conversation is enabled now\n@@ -280,23 +281,23 @@ def test_disable_commenting_for_content_type(self):\n \n         # Create a conversation.\n         conversation = self.portal.doc1.restrictedTraverse(\n-            \'@@conversation_view\',\n+            "@@conversation_view",\n         )\n \n         # The Document content type is disabled by default\n         self.assertEqual(conversation.enabled(), False)\n \n         # Allow discussion on Document content type\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n-        document_fti = getattr(portal_types, \'Document\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n+        document_fti = getattr(portal_types, "Document")\n         document_fti.manage_changeProperties(allow_discussion=True)\n \n         # Check if conversation is enabled now\n         self.assertEqual(conversation.enabled(), True)\n \n         # Disallow discussion on Document content type\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n-        document_fti = getattr(portal_types, \'Document\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n+        document_fti = getattr(portal_types, "Document")\n         document_fti.manage_changeProperties(allow_discussion=False)\n \n         # Check if conversation is enabled now\n@@ -308,17 +309,17 @@ def test_allow_discussion_on_folder(self):\n         # plone.app.contenttypes does not have this restriction any longer.\n \n         # Create a folder\n-        self.typetool.constructContent(\'Folder\', self.portal, \'f1\')\n+        self.typetool.constructContent("Folder", self.portal, "f1")\n \n         # Usually we don\'t create a conversation on a folder\n-        conversation = self.portal.f1.restrictedTraverse(\'@@conversation_view\')\n+        conversation = self.portal.f1.restrictedTraverse("@@conversation_view")\n \n         # Allow discussion for the folder\n         self.portal.f1.allow_discussion = True\n \n         # Allow discussion on Folder content type\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n-        document_fti = getattr(portal_types, \'Folder\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n+        document_fti = getattr(portal_types, "Folder")\n         document_fti.manage_changeProperties(allow_discussion=True)\n \n         self.assertTrue(conversation.enabled())\n@@ -328,7 +329,7 @@ def test_is_discussion_allowed_on_content_object(self):\n \n         # Create a conversation.\n         conversation = self.portal.doc1.restrictedTraverse(\n-            \'@@conversation_view\',\n+            "@@conversation_view",\n         )\n \n         # Discussion is disallowed by default\n@@ -353,13 +354,13 @@ def test_dict_operations(self):\n         # Add a comment. Note: in real life, we always create comments via the\n         # factory to allow different factories to be swapped in\n \n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n \n         new_id1 = conversation.addComment(comment1)\n \n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.text = \'Comment text\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.text = "Comment text"\n \n         new_id2 = conversation.addComment(comment2)\n \n@@ -410,14 +411,14 @@ def test_total_comments(self):\n         # comments via the factory to allow different factories to be\n         # swapped in\n \n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n \n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.text = \'Comment text\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.text = "Comment text"\n \n-        comment3 = createObject(\'plone.Comment\')\n-        comment3.text = \'Comment text\'\n+        comment3 = createObject("plone.Comment")\n+        comment3.text = "Comment text"\n \n         conversation.addComment(comment1)\n         conversation.addComment(comment2)\n@@ -439,49 +440,49 @@ def test_commentators(self):\n         # Note: in real life, we always create\n         # comments via the factory to allow different factories to be\n         # swapped in\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n-        comment1.author_username = \'Jim\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n+        comment1.author_username = "Jim"\n         conversation.addComment(comment1)\n \n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.text = \'Comment text\'\n-        comment2.author_username = \'Joe\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.text = "Comment text"\n+        comment2.author_username = "Joe"\n         conversation.addComment(comment2)\n \n-        comment3 = createObject(\'plone.Comment\')\n-        comment3.text = \'Comment text\'\n-        comment3.author_username = \'Jack\'\n+        comment3 = createObject("plone.Comment")\n+        comment3.text = "Comment text"\n+        comment3.author_username = "Jack"\n         new_comment3_id = conversation.addComment(comment3)\n \n-        comment4 = createObject(\'plone.Comment\')\n-        comment4.text = \'Comment text\'\n-        comment4.author_username = \'Jack\'\n+        comment4 = createObject("plone.Comment")\n+        comment4.text = "Comment text"\n+        comment4.author_username = "Jack"\n         new_comment4_id = conversation.addComment(comment4)\n \n         # check if all commentators are in the commentators list\n         self.assertEqual(conversation.total_comments(), 4)\n-        self.assertTrue(\'Jim\' in conversation.commentators)\n-        self.assertTrue(\'Joe\' in conversation.commentators)\n-        self.assertTrue(\'Jack\' in conversation.commentators)\n+        self.assertTrue("Jim" in conversation.commentators)\n+        self.assertTrue("Joe" in conversation.commentators)\n+        self.assertTrue("Jack" in conversation.commentators)\n \n         # remove the comment from Jack\n         del conversation[new_comment3_id]\n \n         # check if Jack is still in the commentators list (since\n         # he had added two comments)\n-        self.assertTrue(\'Jim\' in conversation.commentators)\n-        self.assertTrue(\'Joe\' in conversation.commentators)\n-        self.assertTrue(\'Jack\' in conversation.commentators)\n+        self.assertTrue("Jim" in conversation.commentators)\n+        self.assertTrue("Joe" in conversation.commentators)\n+        self.assertTrue("Jack" in conversation.commentators)\n         self.assertEqual(conversation.total_comments(), 3)\n \n         # remove the second comment from Jack\n         del conversation[new_comment4_id]\n \n         # check if Jack has been removed from the commentators list\n-        self.assertTrue(\'Jim\' in conversation.commentators)\n-        self.assertTrue(\'Joe\' in conversation.commentators)\n-        self.assertFalse(\'Jack\' in conversation.commentators)\n+        self.assertTrue("Jim" in conversation.commentators)\n+        self.assertTrue("Joe" in conversation.commentators)\n+        self.assertFalse("Jack" in conversation.commentators)\n         self.assertEqual(conversation.total_comments(), 2)\n \n     def test_last_comment_date(self):\n@@ -496,29 +497,29 @@ def test_last_comment_date(self):\n         # Note: in real life, we always create\n         # comments via the factory to allow different factories to be\n         # swapped in\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n         comment1.creation_date = datetime.utcnow() - timedelta(4)\n         conversation.addComment(comment1)\n \n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.text = \'Comment text\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.text = "Comment text"\n         comment2.creation_date = datetime.utcnow() - timedelta(2)\n         new_comment2_id = conversation.addComment(comment2)\n \n-        comment3 = createObject(\'plone.Comment\')\n-        comment3.text = \'Comment text\'\n+        comment3 = createObject("plone.Comment")\n+        comment3.text = "Comment text"\n         comment3.creation_date = datetime.utcnow() - timedelta(1)\n         new_comment3_id = conversation.addComment(comment3)\n \n         # check if the latest comment is exactly one day old\n         self.assertTrue(\n-            conversation.last_comment_date < datetime.utcnow() -\n-            timedelta(hours=23, minutes=59, seconds=59),\n+            conversation.last_comment_date\n+            < datetime.utcnow() - timedelta(hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n-            conversation.last_comment_date >\n-            datetime.utcnow() - timedelta(days=1, seconds=1),\n+            conversation.last_comment_date\n+            > datetime.utcnow() - timedelta(days=1, seconds=1),\n         )\n \n         # remove the latest comment\n@@ -527,12 +528,12 @@ def test_last_comment_date(self):\n         # check if the latest comment has been updated\n         # the latest comment should be exactly two days old\n         self.assertTrue(\n-            conversation.last_comment_date < datetime.utcnow() -\n-            timedelta(days=1, hours=23, minutes=59, seconds=59),\n+            conversation.last_comment_date\n+            < datetime.utcnow() - timedelta(days=1, hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n-            conversation.last_comment_date > datetime.utcnow() -\n-            timedelta(days=2, seconds=1),\n+            conversation.last_comment_date\n+            > datetime.utcnow() - timedelta(days=2, seconds=1),\n         )\n \n         # remove the latest comment again\n@@ -541,12 +542,12 @@ def test_last_comment_date(self):\n         # check if the latest comment has been updated\n         # the latest comment should be exactly four days old\n         self.assertTrue(\n-            conversation.last_comment_date < datetime.utcnow() -\n-            timedelta(days=3, hours=23, minutes=59, seconds=59),\n+            conversation.last_comment_date\n+            < datetime.utcnow() - timedelta(days=3, hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n-            conversation.last_comment_date > datetime.utcnow() -\n-            timedelta(days=4, seconds=2),\n+            conversation.last_comment_date\n+            > datetime.utcnow() - timedelta(days=4, seconds=2),\n         )\n \n     def test_get_comments_full(self):\n@@ -574,23 +575,23 @@ def test_get_threads(self):\n         #    +- Comment 2_1\n \n         # Create all comments\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n \n-        comment1_1 = createObject(\'plone.Comment\')\n-        comment1_1.text = \'Comment text\'\n+        comment1_1 = createObject("plone.Comment")\n+        comment1_1.text = "Comment text"\n \n-        comment1_1_1 = createObject(\'plone.Comment\')\n-        comment1_1_1.text = \'Comment text\'\n+        comment1_1_1 = createObject("plone.Comment")\n+        comment1_1_1.text = "Comment text"\n \n-        comment1_2 = createObject(\'plone.Comment\')\n-        comment1_2.text = \'Comment text\'\n+        comment1_2 = createObject("plone.Comment")\n+        comment1_2.text = "Comment text"\n \n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.text = \'Comment text\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.text = "Comment text"\n \n-        comment2_1 = createObject(\'plone.Comment\')\n-        comment2_1.text = \'Comment text\'\n+        comment2_1 = createObject("plone.Comment")\n+        comment2_1.text = "Comment text"\n \n         # Create the nested comment structure\n         new_id_1 = conversation.addComment(comment1)\n@@ -610,14 +611,17 @@ def test_get_threads(self):\n \n         # Get threads\n \n-        self.assertEqual([\n-            {\'comment\': comment1, \'depth\': 0, \'id\': new_id_1},\n-            {\'comment\': comment1_1, \'depth\': 1, \'id\': new_id_1_1},\n-            {\'comment\': comment1_1_1, \'depth\': 2, \'id\': new_id_1_1_1},\n-            {\'comment\': comment1_2, \'depth\': 1, \'id\': new_id_1_2},\n-            {\'comment\': comment2, \'depth\': 0, \'id\': new_id_2},\n-            {\'comment\': comment2_1, \'depth\': 1, \'id\': new_id_2_1},\n-        ], list(conversation.getThreads()))\n+        self.assertEqual(\n+            [\n+                {"comment": comment1, "depth": 0, "id": new_id_1},\n+                {"comment": comment1_1, "depth": 1, "id": new_id_1_1},\n+                {"comment": comment1_1_1, "depth": 2, "id": new_id_1_1_1},\n+                {"comment": comment1_2, "depth": 1, "id": new_id_1_2},\n+                {"comment": comment2, "depth": 0, "id": new_id_2},\n+                {"comment": comment2_1, "depth": 1, "id": new_id_2_1},\n+            ],\n+            list(conversation.getThreads()),\n+        )\n \n     def test_get_threads_batched(self):\n         # TODO: test start, size, root and depth arguments to getThreads()  # noqa T000\n@@ -628,16 +632,16 @@ def test_traversal(self):\n         # make sure we can traverse to conversations and get a URL and path\n \n         conversation = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default\',\n+            "++conversation++default",\n         )\n         self.assertTrue(IConversation.providedBy(conversation))\n \n         self.assertEqual(\n-            (\'\', \'plone\', \'doc1\', \'++conversation++default\'),\n+            ("", "plone", "doc1", "++conversation++default"),\n             conversation.getPhysicalPath(),\n         )\n         self.assertEqual(\n-            \'http://nohost/plone/doc1/++conversation++default\',\n+            "http://nohost/plone/doc1/++conversation++default",\n             conversation.absolute_url(),\n         )\n \n@@ -646,7 +650,7 @@ def test_unconvertible_id(self):\n         # can\'t be converted to int\n \n         conversation = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/ThisCantBeRight\',\n+            "++conversation++default/ThisCantBeRight",\n         )\n         self.assertEqual(conversation, None)\n \n@@ -660,17 +664,16 @@ def test_parent(self):\n         self.assertTrue(conversation.__parent__)\n         self.assertTrue(aq_parent(conversation))\n \n-        self.assertEqual(conversation.__parent__.getId(), \'doc1\')\n+        self.assertEqual(conversation.__parent__.getId(), "doc1")\n \n     def test_discussion_item_not_in_bad_types(self):\n-        self.assertFalse(\'Discussion Item\' in BAD_TYPES)\n+        self.assertFalse("Discussion Item" in BAD_TYPES)\n \n     def test_no_comment(self):\n         IConversation(self.portal.doc1)\n         # Make sure no conversation has been created\n         self.assertTrue(\n-            \'plone.app.discussion:conversation\' not in\n-            IAnnotations(self.portal.doc1),\n+            "plone.app.discussion:conversation" not in IAnnotations(self.portal.doc1),\n         )\n \n \n@@ -679,8 +682,8 @@ class ConversationEnabledForDexterityTypesTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         interface.alsoProvides(\n             self.portal.REQUEST,\n             interfaces.IDiscussionLayer,\n@@ -693,7 +696,7 @@ def setUp(self):\n             )\n \n     def _makeOne(self, *args, **kw):\n-        return self.portal.doc1.restrictedTraverse(\'@@conversation_view\')\n+        return self.portal.doc1.restrictedTraverse("@@conversation_view")\n \n     def _globally_enable_discussion(self, value):\n         registry = queryUtility(IRegistry)\n@@ -701,7 +704,7 @@ def _globally_enable_discussion(self, value):\n         settings.globally_enabled = value\n \n     def _enable_discussion_on_portal_type(self, portal_type, allow_discussion):\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n         document_fti = getattr(portal_types, portal_type)\n         document_fti.manage_changeProperties(allow_discussion=allow_discussion)\n \n@@ -719,14 +722,14 @@ def test_conversation_is_not_enabled_by_default_on_portal_type(self):\n     def test_conversation_needs_to_be_enabled_globally_and_for_type(self):\n         if DEXTERITY:\n             self._globally_enable_discussion(True)\n-            self._enable_discussion_on_portal_type(\'Document\', True)\n+            self._enable_discussion_on_portal_type("Document", True)\n             conversation = self._makeOne(self.portal.doc1)\n             self.assertTrue(conversation.enabled())\n \n     def test_disable_discussion(self):\n         if DEXTERITY:\n             self._globally_enable_discussion(True)\n-            self._enable_discussion_on_portal_type(\'Document\', True)\n+            self._enable_discussion_on_portal_type("Document", True)\n             self.portal.doc1.allow_discussion = False\n             conversation = self._makeOne(self.portal.doc1)\n             self.assertFalse(conversation.enabled())\n@@ -734,7 +737,7 @@ def test_disable_discussion(self):\n     def test_enable_discussion(self):\n         if DEXTERITY:\n             self._globally_enable_discussion(True)\n-            self._enable_discussion_on_portal_type(\'Document\', True)\n+            self._enable_discussion_on_portal_type("Document", True)\n             self.portal.doc1.allow_discussion = True\n             conversation = self._makeOne(self.portal.doc1)\n             self.assertTrue(conversation.enabled())\n@@ -747,11 +750,11 @@ class RepliesTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         workflow = self.portal.portal_workflow\n-        workflow.doActionFor(self.portal.doc1, \'publish\')\n+        workflow.doActionFor(self.portal.doc1, "publish")\n \n     def test_add_comment(self):\n         # Add comments to a ConversationReplies adapter\n@@ -762,8 +765,8 @@ def test_add_comment(self):\n \n         replies = IReplies(conversation)\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         new_id = replies.addComment(comment)\n \n@@ -789,8 +792,8 @@ def test_delete_comment(self):\n         replies = IReplies(conversation)\n \n         # Add a comment.\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         new_id = replies.addComment(comment)\n \n@@ -828,39 +831,39 @@ def test_dict_api(self):\n         #    +- Comment 2_1\n \n         # Create all comments\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n \n-        comment1_1 = createObject(\'plone.Comment\')\n-        comment1_1.text = \'Comment text\'\n+        comment1_1 = createObject("plone.Comment")\n+        comment1_1.text = "Comment text"\n \n-        comment1_1_1 = createObject(\'plone.Comment\')\n-        comment1_1_1.text = \'Comment text\'\n+        comment1_1_1 = createObject("plone.Comment")\n+        comment1_1_1.text = "Comment text"\n \n-        comment1_2 = createObject(\'plone.Comment\')\n-        comment1_2.text = \'Comment text\'\n+        comment1_2 = createObject("plone.Comment")\n+        comment1_2.text = "Comment text"\n \n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.text = \'Comment text\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.text = "Comment text"\n \n-        comment2_1 = createObject(\'plone.Comment\')\n-        comment2_1.text = \'Comment text\'\n+        comment2_1 = createObject("plone.Comment")\n+        comment2_1.text = "Comment text"\n \n         # Create the nested comment structure\n         new_id_1 = replies.addComment(comment1)\n         comment1 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_1),\n+            "++conversation++default/{0}".format(new_id_1),\n         )\n         replies_to_comment1 = IReplies(comment1)\n         new_id_2 = replies.addComment(comment2)\n         comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_2),\n+            "++conversation++default/{0}".format(new_id_2),\n         )\n         replies_to_comment2 = IReplies(comment2)\n \n         new_id_1_1 = replies_to_comment1.addComment(comment1_1)\n         comment1_1 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_1_1),\n+            "++conversation++default/{0}".format(new_id_1_1),\n         )\n         replies_to_comment1_1 = IReplies(comment1_1)\n         replies_to_comment1_1.addComment(comment1_1_1)\ndiff --git a/plone/app/discussion/tests/test_events.py b/plone/app/discussion/tests/test_events.py\nindex c9dc1733..d4d6a926 100644\n--- a/plone/app/discussion/tests/test_events.py\n+++ b/plone/app/discussion/tests/test_events.py\n@@ -21,8 +21,8 @@\n \n \n class EventsRegistry(object):\n-    """ Fake registry to be used while testing discussion events\n-    """\n+    """Fake registry to be used while testing discussion events"""\n+\n     commentAdded = False\n     commentModified = False\n     commentRemoved = False\n@@ -30,6 +30,7 @@ class EventsRegistry(object):\n     replyModified = False\n     replyRemoved = False\n \n+\n #\n # Fake event handlers\n #\n@@ -65,19 +66,19 @@ def reply_removed(doc, evt):\n \n \n class CommentEventsTest(unittest.TestCase):\n-    """ Test custom comments events\n-    """\n+    """Test custom comments events"""\n+\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n \n         # Setup sandbox\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.registry = EventsRegistry\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.document = self.portal[\'doc1\']\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.document = self.portal["doc1"]\n \n         #\n         # Subscribers\n@@ -106,23 +107,23 @@ def setUp(self):\n \n          </configure>\n         """\n-        zcml.load_config(\'configure.zcml\', Products.Five)\n+        zcml.load_config("configure.zcml", Products.Five)\n         zcml.load_string(configure)\n \n     def test_addEvent(self):\n         self.assertFalse(self.registry.commentAdded)\n-        comment = createObject(\'plone.Comment\')\n+        comment = createObject("plone.Comment")\n         conversation = IConversation(self.document)\n         conversation.addComment(comment)\n         self.assertTrue(self.registry.commentAdded)\n \n     def test_modifyEvent(self):\n         self.assertFalse(self.registry.commentModified)\n-        comment = createObject(\'plone.Comment\')\n+        comment = createObject("plone.Comment")\n         conversation = IConversation(self.document)\n         new_id = conversation.addComment(comment)\n         comment = self.document.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id),\n+            "++conversation++default/{0}".format(new_id),\n         )\n         comment.text = "foo"\n         notify(ObjectModifiedEvent(comment))\n@@ -130,7 +131,7 @@ def test_modifyEvent(self):\n \n     def test_removedEvent(self):\n         self.assertFalse(self.registry.commentRemoved)\n-        comment = createObject(\'plone.Comment\')\n+        comment = createObject("plone.Comment")\n         conversation = IConversation(self.document)\n         cid = conversation.addComment(comment)\n         del conversation[cid]\n@@ -138,17 +139,17 @@ def test_removedEvent(self):\n \n \n class RepliesEventsTest(unittest.TestCase):\n-    """ Test custom replies events\n-    """\n+    """Test custom replies events"""\n+\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.registry = EventsRegistry\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.document = self.portal[\'doc1\']\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.document = self.portal["doc1"]\n \n         #\n         # Subscribers\n@@ -177,7 +178,7 @@ def setUp(self):\n \n          </configure>\n         """\n-        zcml.load_config(\'configure.zcml\', Products.Five)\n+        zcml.load_config("configure.zcml", Products.Five)\n         zcml.load_string(configure)\n \n     def test_addEvent(self):\n@@ -186,15 +187,15 @@ def test_addEvent(self):\n         conversation = IConversation(self.document)\n         replies = IReplies(conversation)\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         new_id = replies.addComment(comment)\n         comment = self.document.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id),\n+            "++conversation++default/{0}".format(new_id),\n         )\n \n-        re_comment = createObject(\'plone.Comment\')\n-        re_comment.text = \'Comment text\'\n+        re_comment = createObject("plone.Comment")\n+        re_comment.text = "Comment text"\n \n         replies = IReplies(comment)\n         replies.addComment(re_comment)\n@@ -206,14 +207,14 @@ def test_modifyEvent(self):\n \n         conversation = IConversation(self.document)\n         replies = IReplies(conversation)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         comment_id = replies.addComment(comment)\n         comment = self.document.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(comment_id),\n+            "++conversation++default/{0}".format(comment_id),\n         )\n-        re_comment = createObject(\'plone.Comment\')\n-        re_comment.text = \'Comment text\'\n+        re_comment = createObject("plone.Comment")\n+        re_comment.text = "Comment text"\n         replies = IReplies(comment)\n         new_id = replies.addComment(re_comment)\n         reply = replies[new_id]\n@@ -227,15 +228,15 @@ def test_removedEvent(self):\n         conversation = IConversation(self.portal.doc1)\n         replies = IReplies(conversation)\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         new_id = replies.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id),\n+            "++conversation++default/{0}".format(new_id),\n         )\n \n-        re_comment = createObject(\'plone.Comment\')\n-        re_comment.text = \'Comment text\'\n+        re_comment = createObject("plone.Comment")\n+        re_comment.text = "Comment text"\n         replies = IReplies(comment)\n         new_re_id = replies.addComment(re_comment)\n \ndiff --git a/plone/app/discussion/tests/test_functional.py b/plone/app/discussion/tests/test_functional.py\nindex 14db437a..23b71c6c 100644\n--- a/plone/app/discussion/tests/test_functional.py\n+++ b/plone/app/discussion/tests/test_functional.py\n@@ -12,29 +12,29 @@\n \n \n optionflags = (\n-    doctest.ELLIPSIS |\n-    doctest.NORMALIZE_WHITESPACE |\n-    doctest.REPORT_ONLY_FIRST_FAILURE\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n )\n normal_testfiles = [\n-    \'functional_test_comments.txt\',\n-    \'functional_test_comment_review_workflow.txt\',\n+    "functional_test_comments.txt",\n+    "functional_test_comment_review_workflow.txt",\n ]\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(\n-            doctest.DocFileSuite(\n-                test,\n-                optionflags=optionflags,\n-                globs={\n-                    \'pprint\': pprint.pprint,\n-                }\n-            ),\n-            layer=PLONE_APP_DISCUSSION_FUNCTIONAL_TESTING,\n-        )\n-        for test in normal_testfiles\n-    ])\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite(\n+                    test,\n+                    optionflags=optionflags,\n+                    globs={\n+                        "pprint": pprint.pprint,\n+                    },\n+                ),\n+                layer=PLONE_APP_DISCUSSION_FUNCTIONAL_TESTING,\n+            )\n+            for test in normal_testfiles\n+        ]\n+    )\n     return suite\ndiff --git a/plone/app/discussion/tests/test_indexers.py b/plone/app/discussion/tests/test_indexers.py\nindex 96354811..51801795 100644\n--- a/plone/app/discussion/tests/test_indexers.py\n+++ b/plone/app/discussion/tests/test_indexers.py\n@@ -28,41 +28,40 @@\n \n \n class ConversationIndexersTest(unittest.TestCase):\n-    """Conversation Indexer Tests\n-    """\n+    """Conversation Indexer Tests"""\n \n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         workflow = self.portal.portal_workflow\n-        workflow.doActionFor(self.portal.doc1, \'publish\')\n+        workflow.doActionFor(self.portal.doc1, "publish")\n \n         # Create a conversation.\n         conversation = IConversation(self.portal.doc1)\n \n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment Text\'\n-        comment1.creator = \'jim\'\n-        comment1.author_username = \'Jim\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment Text"\n+        comment1.creator = "jim"\n+        comment1.author_username = "Jim"\n         comment1.creation_date = datetime(2006, 9, 17, 14, 18, 12)\n         comment1.modification_date = datetime(2006, 9, 17, 14, 18, 12)\n         self.new_id1 = conversation.addComment(comment1)\n \n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.text = \'Comment Text\'\n-        comment2.creator = \'emma\'\n-        comment2.author_username = \'Emma\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.text = "Comment Text"\n+        comment2.creator = "emma"\n+        comment2.author_username = "Emma"\n         comment2.creation_date = datetime(2007, 12, 13, 4, 18, 12)\n         comment2.modification_date = datetime(2007, 12, 13, 4, 18, 12)\n         self.new_id2 = conversation.addComment(comment2)\n \n-        comment3 = createObject(\'plone.Comment\')\n-        comment3.text = \'Comment Text\'\n-        comment3.creator = \'lukas\'\n-        comment3.author_username = \'Lukas\'\n+        comment3 = createObject("plone.Comment")\n+        comment3.text = "Comment Text"\n+        comment3.creator = "lukas"\n+        comment3.author_username = "Lukas"\n         comment3.creation_date = datetime(2009, 4, 12, 11, 12, 12)\n         comment3.modification_date = datetime(2009, 4, 12, 11, 12, 12)\n         self.new_id3 = conversation.addComment(comment3)\n@@ -70,10 +69,12 @@ def setUp(self):\n         self.conversation = conversation\n \n     def test_conversation_total_comments(self):\n-        self.assertTrue(isinstance(\n-            catalog.total_comments,\n-            DelegatingIndexerFactory,\n-        ))\n+        self.assertTrue(\n+            isinstance(\n+                catalog.total_comments,\n+                DelegatingIndexerFactory,\n+            )\n+        )\n         self.assertEqual(catalog.total_comments(self.portal.doc1)(), 3)\n         del self.conversation[self.new_id1]\n         self.assertEqual(catalog.total_comments(self.portal.doc1)(), 2)\n@@ -82,10 +83,12 @@ def test_conversation_total_comments(self):\n         self.assertEqual(catalog.total_comments(self.portal.doc1)(), 0)\n \n     def test_conversation_last_comment_date(self):\n-        self.assertTrue(isinstance(\n-            catalog.last_comment_date,\n-            DelegatingIndexerFactory,\n-        ))\n+        self.assertTrue(\n+            isinstance(\n+                catalog.last_comment_date,\n+                DelegatingIndexerFactory,\n+            )\n+        )\n         self.assertEqual(\n             catalog.last_comment_date(self.portal.doc1)(),\n             datetime(2009, 4, 12, 11, 12, 12),\n@@ -112,8 +115,8 @@ class CommentIndexersTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         # Create a conversation. In this case we doesn\'t assign it to an\n         # object, as we just want to check the Conversation object API.\n@@ -122,10 +125,10 @@ def setUp(self):\n         # Add a comment. Note: in real life, we always create comments via the\n         # factory to allow different factories to be swapped in\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Lorem ipsum dolor sit amet.\'\n-        comment.creator = \'jim\'\n-        comment.author_name = \'Jim\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Lorem ipsum dolor sit amet."\n+        comment.creator = "jim"\n+        comment.author_name = "Jim"\n         comment.creation_date = datetime(2006, 9, 17, 14, 18, 12)\n         comment.modification_date = datetime(2008, 3, 12, 7, 32, 52)\n \n@@ -134,60 +137,61 @@ def setUp(self):\n         self.conversation = conversation\n \n     def test_title(self):\n-        self.assertEqual(catalog.title(self.comment)(), \'Jim on Document 1\')\n+        self.assertEqual(catalog.title(self.comment)(), "Jim on Document 1")\n         self.assertTrue(isinstance(catalog.title, DelegatingIndexerFactory))\n \n     def test_description(self):\n         self.assertEqual(\n             catalog.description(self.comment)(),\n-            \'Lorem ipsum dolor sit amet.\',\n+            "Lorem ipsum dolor sit amet.",\n         )\n-        self.assertTrue(\n-            isinstance(catalog.description, DelegatingIndexerFactory))\n+        self.assertTrue(isinstance(catalog.description, DelegatingIndexerFactory))\n \n     def test_description_long(self):\n         # Create a 50 word comment and make sure the description returns\n         # only the first 25 words\n-        comment_long = createObject(\'plone.Comment\')\n-        comment_long.title = \'Long Comment\'\n+        comment_long = createObject("plone.Comment")\n+        comment_long.title = "Long Comment"\n         comment_long.text = LONG_TEXT\n \n         self.conversation.addComment(comment_long)\n         self.assertEqual(\n             catalog.description(comment_long)(),\n-            LONG_TEXT_CUT.replace(\'\\n\', \' \'),\n+            LONG_TEXT_CUT.replace("\\n", " "),\n         )\n \n     def test_dates(self):\n         # Test if created, modified, effective etc. are set correctly\n         self.assertEqual(\n             catalog.created(self.comment)(),\n-            DateTime(2006, 9, 17, 14, 18, 12, \'GMT\'),\n+            DateTime(2006, 9, 17, 14, 18, 12, "GMT"),\n         )\n         self.assertEqual(\n             catalog.effective(self.comment)(),\n-            DateTime(2006, 9, 17, 14, 18, 12, \'GMT\'),\n+            DateTime(2006, 9, 17, 14, 18, 12, "GMT"),\n         )\n         self.assertEqual(\n             catalog.modified(self.comment)(),\n-            DateTime(2008, 3, 12, 7, 32, 52, \'GMT\'),\n+            DateTime(2008, 3, 12, 7, 32, 52, "GMT"),\n         )\n \n     def test_searchable_text(self):\n         # Test if searchable text is a concatenation of title and comment text\n         self.assertEqual(\n             catalog.searchable_text(self.comment)(),\n-            (\'Lorem ipsum dolor sit amet.\'),\n+            ("Lorem ipsum dolor sit amet."),\n+        )\n+        self.assertTrue(\n+            isinstance(\n+                catalog.searchable_text,\n+                DelegatingIndexerFactory,\n+            )\n         )\n-        self.assertTrue(isinstance(\n-            catalog.searchable_text,\n-            DelegatingIndexerFactory,\n-        ))\n \n     def test_creator(self):\n-        self.assertEqual(catalog.creator(self.comment)(), (\'jim\'))\n+        self.assertEqual(catalog.creator(self.comment)(), ("jim"))\n \n     def test_in_response_to(self):\n         # make sure in_response_to returns the title or id of the content\n         # object the comment was added to\n-        self.assertEqual(catalog.in_response_to(self.comment)(), \'Document 1\')\n+        self.assertEqual(catalog.in_response_to(self.comment)(), "Document 1")\ndiff --git a/plone/app/discussion/tests/test_moderation_multiple_state_view.py b/plone/app/discussion/tests/test_moderation_multiple_state_view.py\nindex 0d4445d8..7f9edb31 100644\n--- a/plone/app/discussion/tests/test_moderation_multiple_state_view.py\n+++ b/plone/app/discussion/tests/test_moderation_multiple_state_view.py\n@@ -23,59 +23,57 @@ class ModerationBulkActionsViewTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.wf = getToolByName(self.portal,\n-                                \'portal_workflow\',\n-                                None)\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.wf = getToolByName(self.portal, "portal_workflow", None)\n         self.context = self.portal\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            \'comment_review_workflow\',\n+            ("Discussion Item",),\n+            "comment_review_workflow",\n         )\n         self.wf_tool = self.portal.portal_workflow\n         # Add a conversation with three comments\n         conversation = IConversation(self.portal.doc1)\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.title = \'Comment 1\'\n-        comment1.text = \'Comment text\'\n-        comment1.Creator = \'Jim\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.title = "Comment 1"\n+        comment1.text = "Comment text"\n+        comment1.Creator = "Jim"\n         new_id_1 = conversation.addComment(comment1)\n         self.comment1 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_1),\n+            "++conversation++default/{0}".format(new_id_1),\n         )\n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.title = \'Comment 2\'\n-        comment2.text = \'Comment text\'\n-        comment2.Creator = \'Joe\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.title = "Comment 2"\n+        comment2.text = "Comment text"\n+        comment2.Creator = "Joe"\n         new_id_2 = conversation.addComment(comment2)\n         self.comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_2),\n+            "++conversation++default/{0}".format(new_id_2),\n         )\n-        comment3 = createObject(\'plone.Comment\')\n-        comment3.title = \'Comment 3\'\n-        comment3.text = \'Comment text\'\n-        comment3.Creator = \'Emma\'\n+        comment3 = createObject("plone.Comment")\n+        comment3.title = "Comment 3"\n+        comment3.text = "Comment text"\n+        comment3.Creator = "Emma"\n         new_id_3 = conversation.addComment(comment3)\n         self.comment3 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_3),\n+            "++conversation++default/{0}".format(new_id_3),\n         )\n         self.conversation = conversation\n \n     def test_default_bulkaction(self):\n         # Make sure no error is raised when no bulk actions has been supplied\n-        self.request.set(\'form.select.BulkAction\', \'-1\')\n-        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n+        self.request.set("form.select.BulkAction", "-1")\n+        self.request.set("paths", ["/".join(self.comment1.getPhysicalPath())])\n \n         view = BulkActionsView(self.portal, self.request)\n \n         self.assertFalse(view())\n \n     def test_publish(self):\n-        self.request.set(\'form.select.BulkAction\', \'publish\')\n-        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n+        self.request.set("form.select.BulkAction", "publish")\n+        self.request.set("paths", ["/".join(self.comment1.getPhysicalPath())])\n         view = BulkActionsView(self.portal, self.request)\n \n         view()\n@@ -83,16 +81,16 @@ def test_publish(self):\n         # Count published comments\n         published_comments = 0\n         for r in self.conversation.getThreads():\n-            comment_obj = r[\'comment\']\n-            workflow_status = self.wf.getInfoFor(comment_obj, \'review_state\')\n-            if workflow_status == \'published\':\n+            comment_obj = r["comment"]\n+            workflow_status = self.wf.getInfoFor(comment_obj, "review_state")\n+            if workflow_status == "published":\n                 published_comments += 1\n         # Make sure the comment has been published\n         self.assertEqual(published_comments, 1)\n \n     def test_mark_as_spam(self):\n-        self.request.set(\'form.select.BulkAction\', \'mark_as_spam\')\n-        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n+        self.request.set("form.select.BulkAction", "mark_as_spam")\n+        self.request.set("paths", ["/".join(self.comment1.getPhysicalPath())])\n \n         view = BulkActionsView(self.portal, self.request)\n \n@@ -101,9 +99,9 @@ def test_mark_as_spam(self):\n         # Count spam comments\n         spam_comments = 0\n         for r in self.conversation.getThreads():\n-            comment_obj = r[\'comment\']\n-            workflow_status = self.wf.getInfoFor(comment_obj, \'review_state\')\n-            if workflow_status == \'spam\':\n+            comment_obj = r["comment"]\n+            workflow_status = self.wf.getInfoFor(comment_obj, "review_state")\n+            if workflow_status == "spam":\n                 spam_comments += 1\n         # Make sure the comment has been marked as spam\n         self.assertEqual(spam_comments, 1)\n@@ -112,9 +110,14 @@ def test_delete(self):\n         # Initially we have three comments\n         self.assertEqual(len(self.conversation.objectIds()), 3)\n         # Delete two comments with bulk actions\n-        self.request.set(\'form.select.BulkAction\', \'delete\')\n-        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath()),\n-                                   \'/\'.join(self.comment3.getPhysicalPath())])\n+        self.request.set("form.select.BulkAction", "delete")\n+        self.request.set(\n+            "paths",\n+            [\n+                "/".join(self.comment1.getPhysicalPath()),\n+                "/".join(self.comment3.getPhysicalPath()),\n+            ],\n+        )\n         view = BulkActionsView(self.app, self.request)\n \n         view()\ndiff --git a/plone/app/discussion/tests/test_moderation_view.py b/plone/app/discussion/tests/test_moderation_view.py\nindex 3c14bbd4..59f24bac 100644\n--- a/plone/app/discussion/tests/test_moderation_view.py\n+++ b/plone/app/discussion/tests/test_moderation_view.py\n@@ -23,37 +23,37 @@ class ModerationViewTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal_discussion = getToolByName(self.portal,\n-                                               \'portal_discussion\',\n-                                               None)\n-        self.membership_tool = getToolByName(self.portal,\n-                                             \'portal_membership\')\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal_discussion = getToolByName(self.portal, "portal_discussion", None)\n+        self.membership_tool = getToolByName(self.portal, "portal_membership")\n         self.memberdata = self.portal.portal_memberdata\n         request = self.app.REQUEST\n-        context = getattr(self.portal, \'doc1\')\n+        context = getattr(self.portal, "doc1")\n         self.view = View(context, request)\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',), \'comment_review_workflow\')\n+            ("Discussion Item",), "comment_review_workflow"\n+        )\n         self.wf_tool = self.portal.portal_workflow\n \n     def test_moderation_enabled(self):\n         """Make sure that moderation_enabled returns true if the comment\n-           workflow implements a \'pending\' state.\n+        workflow implements a \'pending\' state.\n         """\n         # If workflow is not set, enabled must return False\n-        self.wf_tool.setChainForPortalTypes((\'Discussion Item\',), ())\n+        self.wf_tool.setChainForPortalTypes(("Discussion Item",), ())\n         self.assertEqual(self.view.moderation_enabled(), False)\n         # The comment_one_state_workflow does not have a \'pending\' state\n-        self.wf_tool.setChainForPortalTypes((\'Discussion Item\',),\n-                                            (\'comment_one_state_workflow,\'))\n+        self.wf_tool.setChainForPortalTypes(\n+            ("Discussion Item",), ("comment_one_state_workflow,")\n+        )\n         self.assertEqual(self.view.moderation_enabled(), False)\n         # The comment_review_workflow does have a \'pending\' state\n-        self.wf_tool.setChainForPortalTypes((\'Discussion Item\',),\n-                                            (\'comment_review_workflow,\'))\n+        self.wf_tool.setChainForPortalTypes(\n+            ("Discussion Item",), ("comment_review_workflow,")\n+        )\n         self.assertEqual(self.view.moderation_enabled(), True)\n \n \n@@ -62,59 +62,57 @@ class ModerationBulkActionsViewTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.wf = getToolByName(self.portal,\n-                                \'portal_workflow\',\n-                                None)\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.wf = getToolByName(self.portal, "portal_workflow", None)\n         self.context = self.portal\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            \'comment_review_workflow\',\n+            ("Discussion Item",),\n+            "comment_review_workflow",\n         )\n         self.wf_tool = self.portal.portal_workflow\n         # Add a conversation with three comments\n         conversation = IConversation(self.portal.doc1)\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.title = \'Comment 1\'\n-        comment1.text = \'Comment text\'\n-        comment1.Creator = \'Jim\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.title = "Comment 1"\n+        comment1.text = "Comment text"\n+        comment1.Creator = "Jim"\n         new_id_1 = conversation.addComment(comment1)\n         self.comment1 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_1),\n+            "++conversation++default/{0}".format(new_id_1),\n         )\n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.title = \'Comment 2\'\n-        comment2.text = \'Comment text\'\n-        comment2.Creator = \'Joe\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.title = "Comment 2"\n+        comment2.text = "Comment text"\n+        comment2.Creator = "Joe"\n         new_id_2 = conversation.addComment(comment2)\n         self.comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_2),\n+            "++conversation++default/{0}".format(new_id_2),\n         )\n-        comment3 = createObject(\'plone.Comment\')\n-        comment3.title = \'Comment 3\'\n-        comment3.text = \'Comment text\'\n-        comment3.Creator = \'Emma\'\n+        comment3 = createObject("plone.Comment")\n+        comment3.title = "Comment 3"\n+        comment3.text = "Comment text"\n+        comment3.Creator = "Emma"\n         new_id_3 = conversation.addComment(comment3)\n         self.comment3 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_3),\n+            "++conversation++default/{0}".format(new_id_3),\n         )\n         self.conversation = conversation\n \n     def test_default_bulkaction(self):\n         # Make sure no error is raised when no bulk actions has been supplied\n-        self.request.set(\'form.select.BulkAction\', \'-1\')\n-        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n+        self.request.set("form.select.BulkAction", "-1")\n+        self.request.set("paths", ["/".join(self.comment1.getPhysicalPath())])\n \n         view = BulkActionsView(self.portal, self.request)\n \n         self.assertFalse(view())\n \n     def test_publish(self):\n-        self.request.set(\'form.select.BulkAction\', \'publish\')\n-        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n+        self.request.set("form.select.BulkAction", "publish")\n+        self.request.set("paths", ["/".join(self.comment1.getPhysicalPath())])\n         view = BulkActionsView(self.portal, self.request)\n \n         view()\n@@ -122,9 +120,9 @@ def test_publish(self):\n         # Count published comments\n         published_comments = 0\n         for r in self.conversation.getThreads():\n-            comment_obj = r[\'comment\']\n-            workflow_status = self.wf.getInfoFor(comment_obj, \'review_state\')\n-            if workflow_status == \'published\':\n+            comment_obj = r["comment"]\n+            workflow_status = self.wf.getInfoFor(comment_obj, "review_state")\n+            if workflow_status == "published":\n                 published_comments += 1\n         # Make sure the comment has been published\n         self.assertEqual(published_comments, 1)\n@@ -133,9 +131,14 @@ def test_delete(self):\n         # Initially we have three comments\n         self.assertEqual(len(self.conversation.objectIds()), 3)\n         # Delete two comments with bulk actions\n-        self.request.set(\'form.select.BulkAction\', \'delete\')\n-        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath()),\n-                                   \'/\'.join(self.comment3.getPhysicalPath())])\n+        self.request.set("form.select.BulkAction", "delete")\n+        self.request.set(\n+            "paths",\n+            [\n+                "/".join(self.comment1.getPhysicalPath()),\n+                "/".join(self.comment3.getPhysicalPath()),\n+            ],\n+        )\n         view = BulkActionsView(self.app, self.request)\n \n         view()\n@@ -153,41 +156,41 @@ class RedirectionTest(unittest.TestCase):\n \n     def setUp(self):\n         # Update settings.\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         # applyProfile(self.portal, \'plone.app.discussion:default\')\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings)\n         settings.globally_enabled = True\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            (\'comment_review_workflow\',),\n+            ("Discussion Item",),\n+            ("comment_review_workflow",),\n         )\n         # Create page plus comment.\n         self.portal.invokeFactory(\n-            id=\'page\',\n-            title=\'Page 1\',\n-            type_name=\'Document\',\n+            id="page",\n+            title="Page 1",\n+            type_name="Document",\n         )\n         self.page = self.portal.page\n         self.conversation = IConversation(self.page)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         self.comment_id = self.conversation.addComment(comment)\n         self.comment = list(self.conversation.getComments())[0]\n \n     def test_regression(self):\n         page_url = self.page.absolute_url()\n-        self.request[\'HTTP_REFERER\'] = page_url\n+        self.request["HTTP_REFERER"] = page_url\n         for Klass in (DeleteComment, CommentTransition):\n             view = Klass(self.comment, self.request)\n             view.__parent__ = self.comment\n             self.assertEqual(page_url, view())\n \n     def test_valid_next_url(self):\n-        self.request[\'HTTP_REFERER\'] = \'http://attacker.com\'\n+        self.request["HTTP_REFERER"] = "http://attacker.com"\n         for Klass in (DeleteComment, CommentTransition):\n             view = Klass(self.comment, self.request)\n             view.__parent__ = self.comment\n-            self.assertNotEqual(\'http://attacker.com\', view())\n+            self.assertNotEqual("http://attacker.com", view())\ndiff --git a/plone/app/discussion/tests/test_notifications.py b/plone/app/discussion/tests/test_notifications.py\nindex fbf792eb..a0d3d701 100644\n--- a/plone/app/discussion/tests/test_notifications.py\n+++ b/plone/app/discussion/tests/test_notifications.py\n@@ -23,45 +23,46 @@ class TestUserNotificationUnit(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         # Set up a mock mailhost\n         self.portal._original_MailHost = self.portal.MailHost\n-        self.portal.MailHost = mailhost = MockMailHost(\'MailHost\')\n+        self.portal.MailHost = mailhost = MockMailHost("MailHost")\n         sm = getSiteManager(context=self.portal)\n         sm.unregisterUtility(provided=IMailHost)\n         sm.registerUtility(mailhost, provided=IMailHost)\n         # We need to fake a valid mail setup\n         registry = getUtility(IRegistry)\n-        mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n-        mail_settings.email_from_address = \'portal@plone.test\'\n+        mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n+        mail_settings.email_from_address = "portal@plone.test"\n         self.mailhost = self.portal.MailHost\n         # Enable user notification setting\n         registry = queryUtility(IRegistry)\n-        registry[\'plone.app.discussion.interfaces.IDiscussionSettings\' +\n-                 \'.user_notification_enabled\'] = True\n+        registry[\n+            "plone.app.discussion.interfaces.IDiscussionSettings"\n+            + ".user_notification_enabled"\n+        ] = True\n         # Archetypes content types store data as utf-8 encoded strings\n         # The missing u in front of a string is therefor not missing\n-        self.portal.doc1.title = \'K\xc3\xb6lle Alaaf\'  # What is \'Fasching\'?\n+        self.portal.doc1.title = "K\xc3\xb6lle Alaaf"  # What is \'Fasching\'?\n         self.conversation = IConversation(self.portal.doc1)\n \n     def beforeTearDown(self):\n         self.portal.MailHost = self.portal._original_MailHost\n         sm = getSiteManager(context=self.portal)\n         sm.unregisterUtility(provided=IMailHost)\n-        sm.registerUtility(aq_base(self.portal._original_MailHost),\n-                           provided=IMailHost)\n+        sm.registerUtility(aq_base(self.portal._original_MailHost), provided=IMailHost)\n \n     def test_notify_user(self):\n         # Add a comment with user notification enabled. Add another comment\n         # and make sure an email is send to the user of the first comment.\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         comment.user_notification = True\n-        comment.author_email = \'john@plone.test\'\n+        comment.author_email = "john@plone.test"\n         self.conversation.addComment(comment)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         comment_id = self.conversation.addComment(comment)\n \n@@ -69,52 +70,46 @@ def test_notify_user(self):\n         self.assertTrue(self.mailhost.messages[0])\n         msg = self.mailhost.messages[0]\n         msg = msg.decode("utf-8")\n-        self.assertIn(\'To: john@plone.test\', msg)\n-        self.assertIn(\'From: portal@plone.test\', msg)\n+        self.assertIn("To: john@plone.test", msg)\n+        self.assertIn("From: portal@plone.test", msg)\n         # We expect the headers to be properly header encoded (7-bit):\n-        self.assertIn(\n-            \'Subject: =?utf-8?q?A_comment_has_been_posted=2E?=\',\n-            msg)\n+        self.assertIn("Subject: =?utf-8?q?A_comment_has_been_posted=2E?=", msg)\n         # The output should be encoded in a reasonable manner\n         # (in this case quoted-printable).\n         # Depending on which Python version and which Products.MailHost version,\n         # you may get lines separated by \'\\n\' or \'\\r\\n\' in here.\n-        msg = msg.replace(\'\\r\\n\', \'\\n\')\n-        self.assertIn(\n-            \'A comment on "K=C3=B6lle Alaaf" has been posted here:\',\n-            msg)\n-        self.assertIn(\n-            \'http://nohost/plone/d=\\noc1/view#{0}\'.format(comment_id),\n-            msg)\n-        self.assertIn(\'Comment text\', msg)\n-        self.assertNotIn(\'Approve comment\', msg)\n-        self.assertNotIn(\'Delete comment\', msg)\n+        msg = msg.replace("\\r\\n", "\\n")\n+        self.assertIn(\'A comment on "K=C3=B6lle Alaaf" has been posted here:\', msg)\n+        self.assertIn("http://nohost/plone/d=\\noc1/view#{0}".format(comment_id), msg)\n+        self.assertIn("Comment text", msg)\n+        self.assertNotIn("Approve comment", msg)\n+        self.assertNotIn("Delete comment", msg)\n \n     def test_do_not_notify_user_when_notification_is_disabled(self):\n         registry = queryUtility(IRegistry)\n         registry[\n-            \'plone.app.discussion.interfaces.IDiscussionSettings.\' +\n-            \'user_notification_enabled\'\n+            "plone.app.discussion.interfaces.IDiscussionSettings."\n+            + "user_notification_enabled"\n         ] = False\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         comment.user_notification = True\n-        comment.author_email = \'john@plone.test\'\n+        comment.author_email = "john@plone.test"\n         self.conversation.addComment(comment)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         self.conversation.addComment(comment)\n \n         self.assertEqual(len(self.mailhost.messages), 0)\n \n     def test_do_not_notify_user_when_email_address_is_given(self):\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         comment.user_notification = True\n         self.conversation.addComment(comment)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         self.conversation.addComment(comment)\n \n@@ -124,15 +119,15 @@ def test_do_not_notify_user_when_no_sender_is_available(self):\n         # Set sender mail address to none and make sure no email is send to\n         # the moderator.\n         registry = getUtility(IRegistry)\n-        mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n+        mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n         mail_settings.email_from_address = None\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         comment.user_notification = True\n-        comment.author_email = \'john@plone.test\'\n+        comment.author_email = "john@plone.test"\n         self.conversation.addComment(comment)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         self.conversation.addComment(comment)\n         self.assertEqual(len(self.mailhost.messages), 0)\n@@ -141,15 +136,15 @@ def test_notify_only_once(self):\n         # When a user has added two comments in a conversation and has\n         # both times requested email notification, do not send him two\n         # emails when another comment has been added.\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         comment.user_notification = True\n-        comment.author_email = \'john@plone.test\'\n+        comment.author_email = "john@plone.test"\n         self.conversation.addComment(comment)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         comment.user_notification = True\n-        comment.author_email = \'john@plone.test\'\n+        comment.author_email = "john@plone.test"\n \n         self.conversation.addComment(comment)\n \n@@ -165,48 +160,47 @@ class TestModeratorNotificationUnit(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         # Set up a mock mailhost\n         self.portal._original_MailHost = self.portal.MailHost\n-        self.portal.MailHost = mailhost = MockMailHost(\'MailHost\')\n+        self.portal.MailHost = mailhost = MockMailHost("MailHost")\n         sm = getSiteManager(context=self.portal)\n         sm.unregisterUtility(provided=IMailHost)\n         sm.registerUtility(mailhost, provided=IMailHost)\n         # We need to fake a valid mail setup\n         registry = getUtility(IRegistry)\n-        mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n-        mail_settings.email_from_address = \'portal@plone.test\'\n+        mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n+        mail_settings.email_from_address = "portal@plone.test"\n         self.mailhost = self.portal.MailHost\n         # Enable comment moderation\n-        self.portal.portal_types[\'Document\'].allow_discussion = True\n+        self.portal.portal_types["Document"].allow_discussion = True\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            (\'comment_review_workflow\',),\n+            ("Discussion Item",),\n+            ("comment_review_workflow",),\n         )\n         # Enable moderator notification setting\n         registry = queryUtility(IRegistry)\n         registry[\n-            \'plone.app.discussion.interfaces.IDiscussionSettings.\' +\n-            \'moderator_notification_enabled\'\n+            "plone.app.discussion.interfaces.IDiscussionSettings."\n+            + "moderator_notification_enabled"\n         ] = True\n         # Archetypes content types store data as utf-8 encoded strings\n         # The missing u in front of a string is therefor not missing\n-        self.portal.doc1.title = \'K\xc3\xb6lle Alaaf\'  # What is \'Fasching\'?\n+        self.portal.doc1.title = "K\xc3\xb6lle Alaaf"  # What is \'Fasching\'?\n         self.conversation = IConversation(self.portal.doc1)\n \n     def beforeTearDown(self):\n         self.portal.MailHost = self.portal._original_MailHost\n         sm = getSiteManager(context=self.portal)\n         sm.unregisterUtility(provided=IMailHost)\n-        sm.registerUtility(aq_base(self.portal._original_MailHost),\n-                           provided=IMailHost)\n+        sm.registerUtility(aq_base(self.portal._original_MailHost), provided=IMailHost)\n \n     def test_notify_moderator(self):\n         """Add a comment and make sure an email is send to the moderator."""\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n-        comment.author_email = \'john@plone.test\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n+        comment.author_email = "john@plone.test"\n \n         comment_id = self.conversation.addComment(comment)\n \n@@ -214,54 +208,41 @@ def test_notify_moderator(self):\n         self.assertTrue(self.mailhost.messages[0])\n         msg = self.mailhost.messages[0]\n         msg = msg.decode("utf-8")\n-        self.assertTrue(\'To: portal@plone.test\' in msg)\n-        self.assertTrue(\'From: portal@plone.test\' in msg)\n+        self.assertTrue("To: portal@plone.test" in msg)\n+        self.assertTrue("From: portal@plone.test" in msg)\n         # We expect the headers to be properly header encoded (7-bit):\n-        self.assertTrue(\n-            \'Subject: =?utf-8?q?A_comment_has_been_posted=2E?=\'\n-            in msg)\n+        self.assertTrue("Subject: =?utf-8?q?A_comment_has_been_posted=2E?=" in msg)\n         # The output should be encoded in a reasonable manner\n         # (in this case quoted-printable):\n-        self.assertTrue(\n-            \'A comment on "K=C3=B6lle Alaaf" has been posted\'\n-            in msg\n-        )\n-        self.assertIn(\n-            \'http://nohost/plone/doc1/view#{0}\'.format(comment_id),\n-            msg\n-        )\n-        self.assertIn(\n-            comment.author_email,\n-            msg\n-        )\n-        self.assertIn(\n-            comment.text,\n-            msg\n-        )\n+        self.assertTrue(\'A comment on "K=C3=B6lle Alaaf" has been posted\' in msg)\n+        self.assertIn("http://nohost/plone/doc1/view#{0}".format(comment_id), msg)\n+        self.assertIn(comment.author_email, msg)\n+        self.assertIn(comment.text, msg)\n \n     def test_notify_moderator_specific_address(self):\n         # A moderator email address can be specified in the control panel.\n         registry = queryUtility(IRegistry)\n-        registry[\'plone.app.discussion.interfaces.IDiscussionSettings\' +\n-                 \'.moderator_email\'] = \'test@example.com\'\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        registry[\n+            "plone.app.discussion.interfaces.IDiscussionSettings" + ".moderator_email"\n+        ] = "test@example.com"\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         self.conversation.addComment(comment)\n \n         self.assertEqual(len(self.mailhost.messages), 1)\n         msg = self.mailhost.messages[0]\n         msg = msg.decode("utf-8")\n-        self.assertTrue(\'To: test@example.com\' in msg)\n+        self.assertTrue("To: test@example.com" in msg)\n \n     def test_do_not_notify_moderator_when_no_sender_is_available(self):\n         # Set sender mail address to nonw and make sure no email is send to the\n         # moderator.\n         registry = getUtility(IRegistry)\n-        mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n+        mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n         mail_settings.email_from_address = None\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         self.conversation.addComment(comment)\n \n@@ -271,10 +252,12 @@ def test_do_not_notify_moderator_when_notification_is_disabled(self):\n         # Disable moderator notification setting and make sure no email is send\n         # to the moderator.\n         registry = queryUtility(IRegistry)\n-        registry[\'plone.app.discussion.interfaces.IDiscussionSettings.\' +\n-                 \'moderator_notification_enabled\'] = False\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        registry[\n+            "plone.app.discussion.interfaces.IDiscussionSettings."\n+            + "moderator_notification_enabled"\n+        ] = False\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         self.conversation.addComment(comment)\n \ndiff --git a/plone/app/discussion/tests/test_robot.py b/plone/app/discussion/tests/test_robot.py\nindex 202b43b7..5b3e0735 100644\n--- a/plone/app/discussion/tests/test_robot.py\n+++ b/plone/app/discussion/tests/test_robot.py\n@@ -11,19 +11,21 @@\n def test_suite():\n     suite = unittest.TestSuite()\n     current_dir = os.path.abspath(os.path.dirname(__file__))\n-    robot_dir = os.path.join(current_dir, \'robot\')\n+    robot_dir = os.path.join(current_dir, "robot")\n     robot_tests = [\n-        os.path.join(\'robot\', doc) for doc in\n-        os.listdir(robot_dir) if doc.endswith(\'.robot\') and\n-        doc.startswith(\'test_\')\n+        os.path.join("robot", doc)\n+        for doc in os.listdir(robot_dir)\n+        if doc.endswith(".robot") and doc.startswith("test_")\n     ]\n     for robot_test in robot_tests:\n         robottestsuite = robotsuite.RobotTestSuite(robot_test)\n         robottestsuite.level = ROBOT_TEST_LEVEL\n-        suite.addTests([\n-            layered(\n-                robottestsuite,\n-                layer=PLONE_APP_DISCUSSION_ROBOT_TESTING,\n-            ),\n-        ])\n+        suite.addTests(\n+            [\n+                layered(\n+                    robottestsuite,\n+                    layer=PLONE_APP_DISCUSSION_ROBOT_TESTING,\n+                ),\n+            ]\n+        )\n     return suite\ndiff --git a/plone/app/discussion/tests/test_workflow.py b/plone/app/discussion/tests/test_workflow.py\nindex 963bf117..9095fc08 100644\n--- a/plone/app/discussion/tests/test_workflow.py\n+++ b/plone/app/discussion/tests/test_workflow.py\n@@ -21,48 +21,51 @@\n \n \n class WorkflowSetupTest(unittest.TestCase):\n-    """Make sure the workflows are set up properly.\n-    """\n+    """Make sure the workflows are set up properly."""\n \n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'test-folder\')\n-        self.folder = self.portal[\'test-folder\']\n-        self.portal.portal_types[\'Document\'].allow_discussion = True\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "test-folder")\n+        self.folder = self.portal["test-folder"]\n+        self.portal.portal_types["Document"].allow_discussion = True\n+        self.folder.invokeFactory("Document", "doc1")\n         self.doc = self.folder.doc1\n \n     def test_workflows_installed(self):\n-        """Make sure both comment workflows have been installed properly.\n-        """\n-        self.assertTrue(\'comment_one_state_workflow\' in\n-                        self.portal.portal_workflow.objectIds())\n-        self.assertTrue(\'comment_review_workflow\' in\n-                        self.portal.portal_workflow.objectIds())\n+        """Make sure both comment workflows have been installed properly."""\n+        self.assertTrue(\n+            "comment_one_state_workflow" in self.portal.portal_workflow.objectIds()\n+        )\n+        self.assertTrue(\n+            "comment_review_workflow" in self.portal.portal_workflow.objectIds()\n+        )\n \n     def test_default_workflow(self):\n-        """Make sure one_state_workflow is the default workflow.\n-        """\n+        """Make sure one_state_workflow is the default workflow."""\n         self.assertEqual(\n-            (\'comment_one_state_workflow\',),\n+            ("comment_one_state_workflow",),\n             self.portal.portal_workflow.getChainForPortalType(\n-                \'Discussion Item\',\n+                "Discussion Item",\n             ),\n         )\n \n     def test_review_comments_permission(self):\n         # \'Review comments\' in self.portal.permissionsOfRole(\'Admin\')\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Reviewer\'])\n-        self.assertTrue(self.portal.portal_membership.checkPermission(\n-                        \'Review comments\', self.folder), self.folder)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Reviewer"])\n+        self.assertTrue(\n+            self.portal.portal_membership.checkPermission(\n+                "Review comments", self.folder\n+            ),\n+            self.folder,\n+        )\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         self.assertFalse(\n             self.portal.portal_membership.checkPermission(\n-                \'Review comments\',\n+                "Review comments",\n                 self.folder,\n             ),\n             self.folder,\n@@ -73,31 +76,30 @@ def test_reply_to_item_permission(self):\n \n \n class PermissionsSetupTest(unittest.TestCase):\n-    """Make sure the permissions are set up properly.\n-    """\n+    """Make sure the permissions are set up properly."""\n \n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         mtool = self.portal.portal_membership\n         self.checkPermission = mtool.checkPermission\n \n     def test_reply_to_item_permission_assigned(self):\n         """Make sure the \'Reply to item\' permission is properly assigned.\n-           By default this permission is assigned to \'Member\' and \'Manager\'.\n-           plone.app.discussion assigns this permission to \'Authenticated\' as\n-           well to emulate the behavior of the old commenting system.\n+        By default this permission is assigned to \'Member\' and \'Manager\'.\n+        plone.app.discussion assigns this permission to \'Authenticated\' as\n+        well to emulate the behavior of the old commenting system.\n         """\n-        ReplyToItemPerm = \'Reply to item\'\n+        ReplyToItemPerm = "Reply to item"\n         # should be allowed as Member\n         self.assertTrue(self.checkPermission(ReplyToItemPerm, self.portal))\n         # should be allowed as Authenticated\n-        setRoles(self.portal, TEST_USER_ID, [\'Authenticated\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Authenticated"])\n         self.assertTrue(self.checkPermission(ReplyToItemPerm, self.portal))\n         # should be allowed as Manager\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.assertTrue(self.checkPermission(ReplyToItemPerm, self.portal))\n         # should not be allowed as anonymous\n         logout()\n@@ -105,70 +107,66 @@ def test_reply_to_item_permission_assigned(self):\n \n \n class CommentOneStateWorkflowTest(unittest.TestCase):\n-    """Test the comment_one_state_workflow that ships with plone.app.discussion.\n-    """\n+    """Test the comment_one_state_workflow that ships with plone.app.discussion."""\n \n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'test-folder\')\n-        self.folder = self.portal[\'test-folder\']\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "test-folder")\n+        self.folder = self.portal["test-folder"]\n         self.catalog = self.portal.portal_catalog\n         self.workflow = self.portal.portal_workflow\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n         self.doc = self.folder.doc1\n \n         # Add a comment\n         conversation = IConversation(self.folder.doc1)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         cid = conversation.addComment(comment)\n \n         self.comment = self.folder.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(cid),\n+            "++conversation++default/{0}".format(cid),\n         )\n \n-        self.portal.acl_users._doAddUser(\'member\', \'secret\', [\'Member\'], [])\n-        self.portal.acl_users._doAddUser(\n-            \'reviewer\', \'secret\', [\'Reviewer\'], [])\n-        self.portal.acl_users._doAddUser(\'manager\', \'secret\', [\'Manager\'], [])\n-        self.portal.acl_users._doAddUser(\'editor\', \' secret\', [\'Editor\'], [])\n-        self.portal.acl_users._doAddUser(\'reader\', \'secret\', [\'Reader\'], [])\n+        self.portal.acl_users._doAddUser("member", "secret", ["Member"], [])\n+        self.portal.acl_users._doAddUser("reviewer", "secret", ["Reviewer"], [])\n+        self.portal.acl_users._doAddUser("manager", "secret", ["Manager"], [])\n+        self.portal.acl_users._doAddUser("editor", " secret", ["Editor"], [])\n+        self.portal.acl_users._doAddUser("reader", "secret", ["Reader"], [])\n \n     def test_initial_workflow_state(self):\n-        """Make sure the initial workflow state of a comment is \'private\'.\n-        """\n+        """Make sure the initial workflow state of a comment is \'private\'."""\n         self.assertEqual(\n-            self.workflow.getInfoFor(self.doc, \'review_state\'),\n-            \'private\',\n+            self.workflow.getInfoFor(self.doc, "review_state"),\n+            "private",\n         )\n \n     def test_view_comments(self):\n-        """Make sure published comments can be viewed by everyone.\n-        """\n+        """Make sure published comments can be viewed by everyone."""\n         # Owner is allowed\n         # self.login(default_user)\n         # self.assertTrue(checkPerm(View, self.doc))\n         # Member is allowed\n         login(self.portal, TEST_USER_NAME)\n         workflow = self.portal.portal_workflow\n-        workflow.doActionFor(self.doc, \'publish\')\n+        workflow.doActionFor(self.doc, "publish")\n \n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(View, self.comment))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(View, self.comment))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(View, self.comment))\n         # Editor is allowed\n-        login(self.portal, \'editor\')\n+        login(self.portal, "editor")\n         self.assertTrue(checkPerm(View, self.comment))\n         # Reader is allowed\n-        login(self.portal, \'reader\')\n+        login(self.portal, "reader")\n         self.assertTrue(checkPerm(View, self.comment))\n \n     def test_comment_on_private_content_not_visible_to_world(self):\n@@ -179,7 +177,7 @@ def test_migration(self):\n         from plone.app.discussion.upgrades import upgrade_comment_workflows\n \n         # Fake permission according to earlier one_comment_workflow.\n-        self.comment._View_Permission = (\'Anonymous\',)\n+        self.comment._View_Permission = ("Anonymous",)\n         # Anonymous can see the comment.\n         logout()\n         self.assertTrue(checkPerm(View, self.comment))\n@@ -188,8 +186,8 @@ def test_migration(self):\n         upgrade_comment_workflows(self.portal.portal_setup)\n         # The workflow chain is still what we want.\n         self.assertEqual(\n-            self.portal.portal_workflow.getChainFor(\'Discussion Item\'),\n-            (\'comment_one_state_workflow\',),\n+            self.portal.portal_workflow.getChainFor("Discussion Item"),\n+            ("comment_one_state_workflow",),\n         )\n         # A Manager can still see the comment.\n         self.assertTrue(checkPerm(View, self.comment))\n@@ -199,112 +197,112 @@ def test_migration(self):\n \n \n class CommentReviewWorkflowTest(unittest.TestCase):\n-    """Test the comment_review_workflow that ships with plone.app.discussion.\n-    """\n+    """Test the comment_review_workflow that ships with plone.app.discussion."""\n \n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'test-folder\')\n-        self.folder = self.portal[\'test-folder\']\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "test-folder")\n+        self.folder = self.portal["test-folder"]\n \n         # Allow discussion on the Document content type\n-        self.portal.portal_types[\'Document\'].allow_discussion = True\n+        self.portal.portal_types["Document"].allow_discussion = True\n         # Set workflow for Discussion item to review workflow\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            (\'comment_review_workflow\',),\n+            ("Discussion Item",),\n+            ("comment_review_workflow",),\n         )\n \n         # Create a conversation for this Document\n         conversation = IConversation(self.portal.doc1)\n \n         # Add a comment.\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         comment_id = conversation.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(comment_id),\n+            "++conversation++default/{0}".format(comment_id),\n         )\n \n         self.conversation = conversation\n         self.comment_id = comment_id\n         self.comment = comment\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Reviewer\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Reviewer"])\n         alsoProvides(self.portal.REQUEST, IDiscussionLayer)\n \n     def test_delete(self):\n-        self.portal.REQUEST.form[\'comment_id\'] = self.comment_id\n-        view = self.comment.restrictedTraverse(\'@@moderate-delete-comment\')\n+        self.portal.REQUEST.form["comment_id"] = self.comment_id\n+        view = self.comment.restrictedTraverse("@@moderate-delete-comment")\n         view()\n         self.assertFalse(self.comment_id in self.conversation.objectIds())\n \n     def test_delete_as_anonymous(self):\n         # Make sure that anonymous users can not delete comments\n         logout()\n-        self.portal.REQUEST.form[\'comment_id\'] = self.comment_id\n+        self.portal.REQUEST.form["comment_id"] = self.comment_id\n         self.assertRaises(\n             Unauthorized,\n             self.comment.restrictedTraverse,\n-            \'@@moderate-delete-comment\',\n+            "@@moderate-delete-comment",\n         )\n         self.assertTrue(self.comment_id in self.conversation.objectIds())\n \n     def test_delete_as_user(self):\n         # Make sure that members can not delete comments\n         logout()\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n-        self.portal.REQUEST.form[\'comment_id\'] = self.comment_id\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n+        self.portal.REQUEST.form["comment_id"] = self.comment_id\n         self.assertRaises(\n             Unauthorized,\n             self.comment.restrictedTraverse,\n-            \'@@moderate-delete-comment\',\n+            "@@moderate-delete-comment",\n         )\n         self.assertTrue(self.comment_id in self.conversation.objectIds())\n \n     def test_publish(self):\n-        self.portal.REQUEST.form[\'comment_id\'] = self.comment_id\n-        self.portal.REQUEST.form[\'workflow_action\'] = \'publish\'\n+        self.portal.REQUEST.form["comment_id"] = self.comment_id\n+        self.portal.REQUEST.form["workflow_action"] = "publish"\n         self.assertEqual(\n-            \'pending\',\n+            "pending",\n             self.portal.portal_workflow.getInfoFor(\n                 self.comment,\n-                \'review_state\',\n+                "review_state",\n             ),\n         )\n-        view = self.comment.restrictedTraverse(\'@@transmit-comment\')\n+        view = self.comment.restrictedTraverse("@@transmit-comment")\n         view()\n         self.assertEqual(\n-            \'published\',\n+            "published",\n             self.portal.portal_workflow.getInfoFor(\n                 self.comment,\n-                \'review_state\',\n+                "review_state",\n             ),\n         )\n \n     def test_publish_as_anonymous(self):\n         logout()\n-        self.portal.REQUEST.form[\'comment_id\'] = self.comment_id\n-        self.portal.REQUEST.form[\'workflow_action\'] = \'publish\'\n+        self.portal.REQUEST.form["comment_id"] = self.comment_id\n+        self.portal.REQUEST.form["workflow_action"] = "publish"\n         self.assertEqual(\n-            \'pending\', self.portal.portal_workflow.getInfoFor(\n+            "pending",\n+            self.portal.portal_workflow.getInfoFor(\n                 self.comment,\n-                \'review_state\',\n+                "review_state",\n             ),\n         )\n         self.assertRaises(\n             Unauthorized,\n             self.comment.restrictedTraverse,\n-            \'@@transmit-comment\',\n+            "@@transmit-comment",\n         )\n         self.assertEqual(\n-            \'pending\',\n+            "pending",\n             self.portal.portal_workflow.getInfoFor(\n                 self.comment,\n-                \'review_state\',\n+                "review_state",\n             ),\n         )\n \n@@ -315,7 +313,7 @@ def test_publish_comment_on_private_content_not_visible_to_world(self):\n         # publish comment and check again\n         login(self.portal, TEST_USER_NAME)\n         workflow = self.portal.portal_workflow\n-        workflow.doActionFor(self.comment, \'publish\')\n+        workflow.doActionFor(self.comment, "publish")\n \n         logout()\n         self.assertFalse(checkPerm(View, self.comment))\n@@ -324,7 +322,7 @@ def test_migration(self):\n         from plone.app.discussion.upgrades import upgrade_comment_workflows\n \n         # Fake permission according to earlier comment_review_workflow.\n-        self.comment._View_Permission = (\'Anonymous\',)\n+        self.comment._View_Permission = ("Anonymous",)\n         # Anonymous can see the comment.\n         logout()\n         self.assertTrue(checkPerm(View, self.comment))\n@@ -333,8 +331,9 @@ def test_migration(self):\n         upgrade_comment_workflows(self.portal.portal_setup)\n         # The workflow chain is still what we want.\n         self.assertEqual(\n-            self.portal.portal_workflow.getChainFor(\'Discussion Item\'),\n-            (\'comment_review_workflow\',))\n+            self.portal.portal_workflow.getChainFor("Discussion Item"),\n+            ("comment_review_workflow",),\n+        )\n         # A Manager can still see the comment.\n         self.assertTrue(checkPerm(View, self.comment))\n         # Anonymous cannot see the comment.\ndiff --git a/plone/app/discussion/tool.py b/plone/app/discussion/tool.py\nindex a10ae3c3..a57e9bba 100644\n--- a/plone/app/discussion/tool.py\n+++ b/plone/app/discussion/tool.py\n@@ -17,62 +17,60 @@\n @interface.implementer(ICommentingTool)\n class CommentingTool(UniqueObject, SimpleItem):\n \n-    meta_type = \'plone.app.discussion tool\'\n-    id = \'portal_discussion\'\n+    meta_type = "plone.app.discussion tool"\n+    id = "portal_discussion"\n \n     def reindexObject(self, object):\n         # Reindex in catalog.\n-        catalog = getToolByName(self, \'portal_catalog\')\n+        catalog = getToolByName(self, "portal_catalog")\n         return catalog.reindexObject(object)\n \n     indexObject = reindexObject\n \n     def unindexObject(self, object):\n         # Remove from catalog.\n-        catalog = getToolByName(self, \'portal_catalog\')\n+        catalog = getToolByName(self, "portal_catalog")\n         return catalog.unindexObject(object)\n \n     def uniqueValuesFor(self, name):\n         # return unique values for FieldIndex name\n-        catalog = getToolByName(self, \'portal_catalog\')\n+        catalog = getToolByName(self, "portal_catalog")\n         return catalog.uniqueValuesFor(name)\n \n     def searchResults(self, REQUEST=None, **kw):\n         # Calls ZCatalog.searchResults with extra arguments that\n         # limit the results to what the user is allowed to see.\n-        catalog = getToolByName(self, \'portal_catalog\')\n+        catalog = getToolByName(self, "portal_catalog")\n         object_provides = [IComment.__identifier__]\n \n-        if \'object_provides\' in kw:\n-            kw_provides = kw[\'object_provides\']\n+        if "object_provides" in kw:\n+            kw_provides = kw["object_provides"]\n             if isinstance(str, kw_provides):\n                 object_provides.append(kw_provides)\n             else:\n                 object_provides.extend(kw_provides)\n \n-        if REQUEST is not None and \'object_provides\' in REQUEST.form:\n-            rq_provides = REQUEST.form[\'object_provides\']\n-            del REQUEST.form[\'object_provides\']\n+        if REQUEST is not None and "object_provides" in REQUEST.form:\n+            rq_provides = REQUEST.form["object_provides"]\n+            del REQUEST.form["object_provides"]\n             if isinstance(str, rq_provides):\n                 object_provides.append(rq_provides)\n             else:\n                 object_provides.extend(rq_provides)\n \n-        kw[\'object_provides\'] = object_provides\n+        kw["object_provides"] = object_provides\n         return catalog.searchResults(REQUEST, **kw)\n \n \n def index_object(obj, event):\n-    """Index the object when added to the conversation\n-    """\n+    """Index the object when added to the conversation"""\n     tool = queryUtility(ICommentingTool)\n     if tool is not None:\n         tool.indexObject(obj)\n \n \n def unindex_object(obj, event):\n-    """Unindex the object when removed\n-    """\n+    """Unindex the object when removed"""\n     tool = queryUtility(ICommentingTool)\n     if tool is not None:\n         tool.unindexObject(obj)\ndiff --git a/plone/app/discussion/upgrades.py b/plone/app/discussion/upgrades.py\nindex 784184e0..c9b19d1b 100644\n--- a/plone/app/discussion/upgrades.py\n+++ b/plone/app/discussion/upgrades.py\n@@ -7,8 +7,8 @@\n import logging\n \n \n-default_profile = \'profile-plone.app.discussion:default\'\n-logger = logging.getLogger(\'plone.app.discussion\')\n+default_profile = "profile-plone.app.discussion:default"\n+logger = logging.getLogger("plone.app.discussion")\n \n \n def update_registry(context):\n@@ -17,7 +17,7 @@ def update_registry(context):\n \n \n def update_rolemap(context):\n-    context.runImportStepFromProfile(default_profile, \'rolemap\')\n+    context.runImportStepFromProfile(default_profile, "rolemap")\n \n \n def upgrade_comment_workflows_retain_current_workflow(context):\n@@ -25,16 +25,16 @@ def upgrade_comment_workflows_retain_current_workflow(context):\n     # import step will change it to comment_one_state_workflow.  This is good.\n     # If it was anything else, we should restore this.  So get the original\n     # chain.\n-    portal_type = \'Discussion Item\'\n-    wf_tool = getToolByName(context, \'portal_workflow\')\n+    portal_type = "Discussion Item"\n+    wf_tool = getToolByName(context, "portal_workflow")\n     orig_chain = list(wf_tool.getChainFor(portal_type))\n \n     # Run the workflow step.  This sets the chain to\n     # comment_one_state_workflow.\n-    context.runImportStepFromProfile(default_profile, \'workflow\')\n+    context.runImportStepFromProfile(default_profile, "workflow")\n \n     # Restore original workflow chain if needed.\n-    old_workflow = \'one_state_workflow\'\n+    old_workflow = "one_state_workflow"\n     if old_workflow not in orig_chain:\n         # Restore the chain.  Probably comment_review_workflow.\n         wf_tool.setChainForPortalTypes([portal_type], orig_chain)\n@@ -43,7 +43,7 @@ def upgrade_comment_workflows_retain_current_workflow(context):\n         if old_workflow in orig_chain:\n             # Replace with new one.\n             idx = orig_chain.index(old_workflow)\n-            orig_chain[idx] = \'comment_one_state_workflow\'\n+            orig_chain[idx] = "comment_one_state_workflow"\n         # Restore the chain.\n         wf_tool.setChainForPortalTypes([portal_type], orig_chain)\n \n@@ -51,9 +51,9 @@ def upgrade_comment_workflows_retain_current_workflow(context):\n def upgrade_comment_workflows_apply_rolemapping(context):\n     # Now go over the comments, update their role mappings, and reindex the\n     # allowedRolesAndUsers index.\n-    portal_type = \'Discussion Item\'\n-    catalog = getToolByName(context, \'portal_catalog\')\n-    wf_tool = getToolByName(context, \'portal_workflow\')\n+    portal_type = "Discussion Item"\n+    catalog = getToolByName(context, "portal_catalog")\n+    wf_tool = getToolByName(context, "portal_workflow")\n     new_chain = list(wf_tool.getChainFor(portal_type))\n     workflows = [wf_tool.getWorkflowById(wf_id) for wf_id in new_chain]\n     for brain in catalog.unrestrictedSearchResults(portal_type=portal_type):\n@@ -63,7 +63,7 @@ def upgrade_comment_workflows_apply_rolemapping(context):\n                 wf.updateRoleMappingsFor(comment)\n             comment.reindexObjectSecurity()\n         except (AttributeError, KeyError):\n-            logger.info(\'Could not reindex comment {0}\'.format(brain.getURL()))\n+            logger.info("Could not reindex comment {0}".format(brain.getURL()))\n \n \n def upgrade_comment_workflows(context):\n@@ -72,7 +72,7 @@ def upgrade_comment_workflows(context):\n \n \n def add_js_to_plone_legacy(context):\n-    context.runImportStepFromProfile(default_profile, \'plone.app.registry\')\n+    context.runImportStepFromProfile(default_profile, "plone.app.registry")\n \n \n def extend_review_workflow(context):\ndiff --git a/plone/app/discussion/vocabularies.py b/plone/app/discussion/vocabularies.py\nindex b1588667..58b5716c 100644\n--- a/plone/app/discussion/vocabularies.py\n+++ b/plone/app/discussion/vocabularies.py\n@@ -7,6 +7,7 @@\n HAS_CAPTCHA = False\n try:\n     import plone.formwidget.captcha  # noqa\n+\n     HAS_CAPTCHA = True  # pragma: no cover\n except ImportError:\n     pass\n@@ -14,6 +15,7 @@\n HAS_RECAPTCHA = False\n try:\n     import plone.formwidget.recaptcha  # noqa\n+\n     HAS_RECAPTCHA = True  # pragma: no cover\n except ImportError:\n     pass\n@@ -21,6 +23,7 @@\n HAS_AKISMET = False\n try:\n     import collective.akismet  # noqa\n+\n     HAS_AKISMET = True  # pragma: no cover\n except ImportError:\n     pass\n@@ -28,73 +31,48 @@\n HAS_NOROBOTS = False\n try:\n     import collective.z3cform.norobots  # noqa\n+\n     HAS_NOROBOTS = True  # pragma: no cover\n except ImportError:\n     pass\n \n \n def captcha_vocabulary(context):\n-    """Vocabulary with all available captcha implementations.\n-    """\n+    """Vocabulary with all available captcha implementations."""\n     terms = []\n-    terms.append(\n-        SimpleTerm(\n-            value=\'disabled\',\n-            token=\'disabled\',\n-            title=_(u\'Disabled\')))\n+    terms.append(SimpleTerm(value="disabled", token="disabled", title=_(u"Disabled")))\n \n     if HAS_CAPTCHA:  # pragma: no cover\n-        terms.append(\n-            SimpleTerm(\n-                value=\'captcha\',\n-                token=\'captcha\',\n-                title=\'Captcha\'))\n+        terms.append(SimpleTerm(value="captcha", token="captcha", title="Captcha"))\n \n     if HAS_RECAPTCHA:  # pragma: no cover\n         terms.append(\n-            SimpleTerm(\n-                value=\'recaptcha\',\n-                token=\'recaptcha\',\n-                title=\'ReCaptcha\'))\n+            SimpleTerm(value="recaptcha", token="recaptcha", title="ReCaptcha")\n+        )\n \n     if HAS_AKISMET:  # pragma: no cover\n-        terms.append(\n-            SimpleTerm(\n-                value=\'akismet\',\n-                token=\'akismet\',\n-                title=\'Akismet\'))\n+        terms.append(SimpleTerm(value="akismet", token="akismet", title="Akismet"))\n \n     if HAS_NOROBOTS:  # pragma: no cover\n-        terms.append(\n-            SimpleTerm(\n-                value=\'norobots\',\n-                token=\'norobots\',\n-                title=\'Norobots\'))\n+        terms.append(SimpleTerm(value="norobots", token="norobots", title="Norobots"))\n     return SimpleVocabulary(terms)\n \n \n def text_transform_vocabulary(context):\n-    """Vocabulary with all available portal_transform transformations.\n-    """\n+    """Vocabulary with all available portal_transform transformations."""\n     terms = []\n+    terms.append(SimpleTerm(value="text/plain", token="text/plain", title="Plain text"))\n+    terms.append(SimpleTerm(value="text/html", token="text/html", title="HTML"))\n     terms.append(\n         SimpleTerm(\n-            value=\'text/plain\',\n-            token=\'text/plain\',\n-            title=\'Plain text\'))\n-    terms.append(\n-        SimpleTerm(\n-            value=\'text/html\',\n-            token=\'text/html\',\n-            title=\'HTML\'))\n-    terms.append(\n-        SimpleTerm(\n-            value=\'text/x-web-markdown\',\n-            token=\'text/x-web-markdown\',\n-            title=\'Markdown\'))\n+            value="text/x-web-markdown", token="text/x-web-markdown", title="Markdown"\n+        )\n+    )\n     terms.append(\n         SimpleTerm(\n-            value=\'text/x-web-intelligent\',\n-            token=\'text/x-web-intelligent\',\n-            title=\'Intelligent text\'))\n+            value="text/x-web-intelligent",\n+            token="text/x-web-intelligent",\n+            title="Intelligent text",\n+        )\n+    )\n     return SimpleVocabulary(terms)\ndiff --git a/setup.py b/setup.py\nindex 893470ab..ab0134b7 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -4,70 +4,70 @@\n from setuptools import setup\n \n \n-version = \'4.0.0a7.dev0\'\n+version = "4.0.0a7.dev0"\n \n install_requires = [\n-    \'setuptools\',\n-    \'plone.app.layout\',\n-    \'plone.app.registry\',\n-    \'plone.app.uuid\',\n-    \'plone.app.z3cform\',\n-    \'plone.indexer\',\n-    \'plone.registry\',\n-    \'plone.z3cform\',\n-    \'six\',\n-    \'ZODB3\',\n-    \'zope.interface\',\n-    \'zope.component\',\n-    \'zope.annotation\',\n-    \'zope.event\',\n-    \'zope.container\',\n-    \'zope.lifecycleevent\',\n-    \'zope.site\',\n-    \'z3c.form>=2.3.3\',\n+    "setuptools",\n+    "plone.app.layout",\n+    "plone.app.registry",\n+    "plone.app.uuid",\n+    "plone.app.z3cform",\n+    "plone.indexer",\n+    "plone.registry",\n+    "plone.z3cform",\n+    "six",\n+    "ZODB3",\n+    "zope.interface",\n+    "zope.component",\n+    "zope.annotation",\n+    "zope.event",\n+    "zope.container",\n+    "zope.lifecycleevent",\n+    "zope.site",\n+    "z3c.form>=2.3.3",\n ]\n \n-setup(name=\'plone.app.discussion\',\n-      version=version,\n-      description=\'Enhanced discussion support for Plone\',\n-      long_description=open(\'README.rst\').read() + \'\\n\' +\n-      open(\'CHANGES.rst\').read(),\n-      classifiers=[\n-          "Development Status :: 5 - Production/Stable",\n-          "Environment :: Web Environment",\n-          "Framework :: Plone",\n-          "Framework :: Plone :: 6.0",\n-          "Framework :: Plone :: Core",\n-          "Framework :: Zope :: 5",\n-          "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n-          "Operating System :: OS Independent",\n-          "Programming Language :: Python",\n-          "Programming Language :: Python :: 3.7",\n-          "Programming Language :: Python :: 3.8",\n-          "Programming Language :: Python :: 3.9",\n-      ],\n-      keywords=\'plone discussion\',\n-      author=\'Timo Stollenwerk - Plone Foundation\',\n-      author_email=\'plone-developers@lists.sourceforge.net\',\n-      url=\'https://pypi.org/project/plone.app.discussion\',\n-      license=\'GPL\',\n-      packages=find_packages(),\n-      namespace_packages=[\'plone\', \'plone.app\'],\n-      include_package_data=True,\n-      zip_safe=False,\n-      install_requires=install_requires,\n-      extras_require={\n-          \'test\': [\n-              \'plone.app.testing\',\n-              \'plone.stringinterp\',\n-              \'plone.contentrules\',\n-              \'plone.app.contentrules\',\n-              \'plone.app.contenttypes[test]\',\n-              \'plone.app.robotframework\',\n-          ],\n-      },\n-      entry_points="""\n+setup(\n+    name="plone.app.discussion",\n+    version=version,\n+    description="Enhanced discussion support for Plone",\n+    long_description=open("README.rst").read() + "\\n" + open("CHANGES.rst").read(),\n+    classifiers=[\n+        "Development Status :: 5 - Production/Stable",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n+        "Framework :: Zope :: 5",\n+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+    ],\n+    keywords="plone discussion",\n+    author="Timo Stollenwerk - Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.discussion",\n+    license="GPL",\n+    packages=find_packages(),\n+    namespace_packages=["plone", "plone.app"],\n+    include_package_data=True,\n+    zip_safe=False,\n+    install_requires=install_requires,\n+    extras_require={\n+        "test": [\n+            "plone.app.testing",\n+            "plone.stringinterp",\n+            "plone.contentrules",\n+            "plone.app.contentrules",\n+            "plone.app.contenttypes[test]",\n+            "plone.app.robotframework",\n+        ],\n+    },\n+    entry_points="""\n       [z3c.autoinclude.plugin]\n       target = plone\n       """,\n-      )\n+)\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-05-01T23:14:41+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.discussion/commit/75c6a5dcc176b608a5a3c698f8c638087afec59f

find  -name "*.py" -exec pyupgrade  --py3-only --py37-plus {} +

Files changed:
M docs/source/conf.py
M plone/__init__.py
M plone/app/__init__.py
M plone/app/discussion/__init__.py
M plone/app/discussion/browser/captcha.py
M plone/app/discussion/browser/comment.py
M plone/app/discussion/browser/comments.py
M plone/app/discussion/browser/controlpanel.py
M plone/app/discussion/browser/conversation.py
M plone/app/discussion/browser/moderation.py
M plone/app/discussion/browser/traversal.py
M plone/app/discussion/browser/validator.py
M plone/app/discussion/catalog.py
M plone/app/discussion/comment.py
M plone/app/discussion/contentrules.py
M plone/app/discussion/conversation.py
M plone/app/discussion/events.py
M plone/app/discussion/interfaces.py
M plone/app/discussion/subscribers.py
M plone/app/discussion/testing.py
M plone/app/discussion/tests/test_catalog.py
M plone/app/discussion/tests/test_comment.py
M plone/app/discussion/tests/test_comments_viewlet.py
M plone/app/discussion/tests/test_contentrules.py
M plone/app/discussion/tests/test_controlpanel.py
M plone/app/discussion/tests/test_conversation.py
M plone/app/discussion/tests/test_events.py
M plone/app/discussion/tests/test_functional.py
M plone/app/discussion/tests/test_indexers.py
M plone/app/discussion/tests/test_moderation_multiple_state_view.py
M plone/app/discussion/tests/test_moderation_view.py
M plone/app/discussion/tests/test_notifications.py
M plone/app/discussion/tests/test_robot.py
M plone/app/discussion/tests/test_workflow.py
M plone/app/discussion/tool.py
M plone/app/discussion/upgrades.py
M plone/app/discussion/vocabularies.py
M setup.py

b'diff --git a/docs/source/conf.py b/docs/source/conf.py\nindex f5d59b89..b94ce2d8 100644\n--- a/docs/source/conf.py\n+++ b/docs/source/conf.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # plone.app.discussion documentation build configuration file, created by\n # sphinx-quickstart on Thu Mar 18 10:17:15 2010.\n@@ -47,8 +46,8 @@\n master_doc = "index"\n \n # General information about the project.\n-project = u"plone.app.discussion"\n-copyright = u"2010, Timo Stollenwerk - Plone Foundation"\n+project = "plone.app.discussion"\n+copyright = "2010, Timo Stollenwerk - Plone Foundation"\n \n # The version info for the project you\'re documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n@@ -185,8 +184,8 @@\n     (\n         "index",\n         "ploneappdiscussion.tex",\n-        u"plone.app.discussion Documentation",\n-        u"Timo Stollenwerk",\n+        "plone.app.discussion Documentation",\n+        "Timo Stollenwerk",\n         "manual",\n     ),\n ]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 03d08ffd..5284146e 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 03d08ffd..5284146e 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/discussion/__init__.py b/plone/app/discussion/__init__.py\nindex 88b2d0df..8efe8b3c 100644\n--- a/plone/app/discussion/__init__.py\n+++ b/plone/app/discussion/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.i18nmessageid import MessageFactory\n \n \ndiff --git a/plone/app/discussion/browser/captcha.py b/plone/app/discussion/browser/captcha.py\nindex 3c21fc5c..7e10d124 100644\n--- a/plone/app/discussion/browser/captcha.py\n+++ b/plone/app/discussion/browser/captcha.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Captcha validator, see captcha.txt for design notes.\n from persistent import Persistent\n from plone.app.discussion.browser.comments import CommentForm\n@@ -23,7 +22,7 @@\n class Captcha(Persistent):\n     """Captcha input field."""\n \n-    captcha = u""\n+    captcha = ""\n \n \n Captcha = factory(Captcha)\ndiff --git a/plone/app/discussion/browser/comment.py b/plone/app/discussion/browser/comment.py\nindex bfa1ea72..fc95a55c 100644\n--- a/plone/app/discussion/browser/comment.py\n+++ b/plone/app/discussion/browser/comment.py\n@@ -1,4 +1,3 @@\n-# coding: utf-8\n from .comments import CommentForm\n from AccessControl import getSecurityManager\n from Acquisition import aq_inner\n@@ -48,9 +47,9 @@ def __call__(self):\n         will redirect right to the binary object, bypassing comments.\n         """\n         if obj.portal_type in view_action_types:\n-            url = "{0}/view".format(url)\n+            url = f"{url}/view"\n \n-        self.request.response.redirect("{0}#{1}".format(url, context.id))\n+        self.request.response.redirect(f"{url}#{context.id}")\n \n \n class EditCommentForm(CommentForm):\n@@ -58,10 +57,10 @@ class EditCommentForm(CommentForm):\n \n     ignoreContext = True\n     id = "edit-comment-form"\n-    label = _(u"edit_comment_form_title", default=u"Edit comment")\n+    label = _("edit_comment_form_title", default="Edit comment")\n \n     def updateWidgets(self):\n-        super(EditCommentForm, self).updateWidgets()\n+        super().updateWidgets()\n         self.widgets["text"].value = self.context.text\n         # We have to rename the id, otherwise TinyMCE can\'t initialize\n         # because there are two textareas with the same id.\n@@ -70,12 +69,12 @@ def updateWidgets(self):\n     def _redirect(self, target=""):\n         if not target:\n             portal_state = getMultiAdapter(\n-                (self.context, self.request), name=u"plone_portal_state"\n+                (self.context, self.request), name="plone_portal_state"\n             )\n             target = portal_state.portal_url()\n         self.request.response.redirect(target)\n \n-    @button.buttonAndHandler(_(u"label_save", default=u"Save"), name="comment")\n+    @button.buttonAndHandler(_("label_save", default="Save"), name="comment")\n     def handleComment(self, action):\n \n         # Validate form\n@@ -96,14 +95,14 @@ def handleComment(self, action):\n \n         # Redirect to comment\n         IStatusMessage(self.request).add(\n-            _(u"comment_edit_notification", default="Comment was edited"), type="info"\n+            _("comment_edit_notification", default="Comment was edited"), type="info"\n         )\n         return self._redirect(target=self.action.replace("@@edit-comment", "@@view"))\n \n-    @button.buttonAndHandler(_(u"cancel_form_button", default=u"Cancel"), name="cancel")\n+    @button.buttonAndHandler(_("cancel_form_button", default="Cancel"), name="cancel")\n     def handle_cancel(self, action):\n         IStatusMessage(self.request).add(\n-            _(u"comment_edit_cancel_notification", default=u"Edit comment cancelled"),\n+            _("comment_edit_cancel_notification", default="Edit comment cancelled"),\n             type="info",\n         )\n         return self._redirect(target=self.context.absolute_url())\ndiff --git a/plone/app/discussion/browser/comments.py b/plone/app/discussion/browser/comments.py\nindex 324acc81..817ad221 100644\n--- a/plone/app/discussion/browser/comments.py\n+++ b/plone/app/discussion/browser/comments.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n@@ -35,28 +34,28 @@\n \n \n COMMENT_DESCRIPTION_PLAIN_TEXT = _(\n-    u"comment_description_plain_text",\n-    default=u"You can add a comment by filling out the form below. "\n-    u"Plain text formatting.",\n+    "comment_description_plain_text",\n+    default="You can add a comment by filling out the form below. "\n+    "Plain text formatting.",\n )\n \n COMMENT_DESCRIPTION_MARKDOWN = _(\n-    u"comment_description_markdown",\n-    default=u"You can add a comment by filling out the form below. "\n-    u"Plain text formatting. You can use the Markdown syntax for "\n-    u"links and images.",\n+    "comment_description_markdown",\n+    default="You can add a comment by filling out the form below. "\n+    "Plain text formatting. You can use the Markdown syntax for "\n+    "links and images.",\n )\n \n COMMENT_DESCRIPTION_INTELLIGENT_TEXT = _(\n-    u"comment_description_intelligent_text",\n-    default=u"You can add a comment by filling out the form below. "\n-    u"Plain text formatting. Web and email addresses are "\n-    u"transformed into clickable links.",\n+    "comment_description_intelligent_text",\n+    default="You can add a comment by filling out the form below. "\n+    "Plain text formatting. Web and email addresses are "\n+    "transformed into clickable links.",\n )\n \n COMMENT_DESCRIPTION_MODERATION_ENABLED = _(\n-    u"comment_description_moderation_enabled",\n-    default=u"Comments are moderated.",\n+    "comment_description_moderation_enabled",\n+    default="Comments are moderated.",\n )\n \n \n@@ -64,7 +63,7 @@ class CommentForm(extensible.ExtensibleForm, form.Form):\n \n     ignoreContext = True  # don\'t use context to get widget data\n     id = None\n-    label = _(u"Add a comment")\n+    label = _("Add a comment")\n     fields = field.Fields(IComment).omit(\n         "portal_type",\n         "__parent__",\n@@ -79,16 +78,16 @@ class CommentForm(extensible.ExtensibleForm, form.Form):\n     )\n \n     def updateFields(self):\n-        super(CommentForm, self).updateFields()\n+        super().updateFields()\n         self.fields["user_notification"].widgetFactory = SingleCheckBoxFieldWidget\n \n     def updateWidgets(self):\n-        super(CommentForm, self).updateWidgets()\n+        super().updateWidgets()\n \n         # Widgets\n         self.widgets["in_reply_to"].mode = interfaces.HIDDEN_MODE\n         self.widgets["text"].addClass("autoresize")\n-        self.widgets["user_notification"].label = _(u"")\n+        self.widgets["user_notification"].label = _("")\n         # Reset widget field settings to their defaults, which may be changed\n         # further on.  Otherwise, the email field might get set to required\n         # when an anonymous user visits, and then remain required when an\n@@ -140,7 +139,7 @@ def updateWidgets(self):\n             self.widgets["user_notification"].mode = interfaces.HIDDEN_MODE\n \n     def updateActions(self):\n-        super(CommentForm, self).updateActions()\n+        super().updateActions()\n         self.actions["cancel"].addClass("btn btn-secondary")\n         self.actions["cancel"].addClass("hide")\n         self.actions["comment"].addClass("btn btn-primary")\n@@ -148,7 +147,7 @@ def updateActions(self):\n     def get_author(self, data):\n         context = aq_inner(self.context)\n         # some attributes are not always set\n-        author_name = u""\n+        author_name = ""\n \n         # Make sure author_name/ author_email is properly encoded\n         if "author_name" in data:\n@@ -219,16 +218,14 @@ def create_comment(self, data):\n \n         else:  # pragma: no cover\n             raise Unauthorized(\n-                u"Anonymous user tries to post a comment, but anonymous "\n-                u"commenting is disabled. Or user does not have the "\n-                u"\'reply to item\' permission.",\n+                "Anonymous user tries to post a comment, but anonymous "\n+                "commenting is disabled. Or user does not have the "\n+                "\'reply to item\' permission.",\n             )\n \n         return comment\n \n-    @button.buttonAndHandler(\n-        _(u"add_comment_button", default=u"Comment"), name="comment"\n-    )\n+    @button.buttonAndHandler(_("add_comment_button", default="Comment"), name="comment")\n     def handleComment(self, action):\n         context = aq_inner(self.context)\n \n@@ -254,7 +251,7 @@ def handleComment(self, action):\n         anon = portal_membership.isAnonymousUser()\n         if captcha_enabled and anonymous_comments and anon:\n             if "captcha" not in data:\n-                data["captcha"] = u""\n+                data["captcha"] = ""\n             captcha = CaptchaValidator(\n                 self.context, self.request, None, ICaptcha["captcha"], None\n             )\n@@ -296,7 +293,7 @@ def handleComment(self, action):\n             # Redirect to comment (inside a content object page)\n             self.request.response.redirect(self.action + "#" + str(comment_id))\n \n-    @button.buttonAndHandler(_(u"Cancel"))\n+    @button.buttonAndHandler(_("Cancel"))\n     def handleCancel(self, action):\n         # This method should never be called, it\'s only there to show\n         # a cancel button that is handled by a jQuery method.\n@@ -309,7 +306,7 @@ class CommentsViewlet(ViewletBase):\n     index = ViewPageTemplateFile("comments.pt")\n \n     def update(self):\n-        super(CommentsViewlet, self).update()\n+        super().update()\n         discussion_allowed = self.is_discussion_allowed()\n         anonymous_allowed_or_can_reply = (\n             self.is_anonymous()\n@@ -483,7 +480,7 @@ def get_commenter_home_url(self, username=None):\n         if username is None:\n             return None\n         else:\n-            return "{0}/author/{1}".format(self.context.portal_url(), username)\n+            return f"{self.context.portal_url()}/author/{username}"\n \n     def get_commenter_portrait(self, username=None):\n \n@@ -523,7 +520,7 @@ def is_anonymous(self):\n         return portal_membership.isAnonymousUser()\n \n     def login_action(self):\n-        return "{0}/login_form?came_from={1}".format(\n+        return "{}/login_form?came_from={}".format(\n             self.navigation_root_url,\n             quote(self.request.get("URL", "")),\n         )\ndiff --git a/plone/app/discussion/browser/controlpanel.py b/plone/app/discussion/browser/controlpanel.py\nindex 8e40a3c2..f359c481 100644\n--- a/plone/app/discussion/browser/controlpanel.py\n+++ b/plone/app/discussion/browser/controlpanel.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.discussion.interfaces import _\n from plone.app.discussion.interfaces import IDiscussionSettings\n from plone.app.discussion.upgrades import update_registry\n@@ -32,22 +31,22 @@ class DiscussionSettingsEditForm(controlpanel.RegistryEditForm):\n \n     schema = IDiscussionSettings\n     id = "DiscussionSettingsEditForm"\n-    label = _(u"Discussion settings")\n+    label = _("Discussion settings")\n     description = _(\n-        u"help_discussion_settings_editform",\n-        default=u"Some discussion related settings are not "\n-        u"located in the Discussion Control Panel.\\n"\n-        u"To enable comments for a specific content type, "\n-        u"go to the Types Control Panel of this type and "\n-        u\'choose "Allow comments".\\n\'\n-        u"To enable the moderation workflow for comments, "\n-        u"go to the Types Control Panel, choose "\n-        u\'"Comment" and set workflow to \'\n-        u\'"Comment Review Workflow".\',\n+        "help_discussion_settings_editform",\n+        default="Some discussion related settings are not "\n+        "located in the Discussion Control Panel.\\n"\n+        "To enable comments for a specific content type, "\n+        "go to the Types Control Panel of this type and "\n+        \'choose "Allow comments".\\n\'\n+        "To enable the moderation workflow for comments, "\n+        "go to the Types Control Panel, choose "\n+        \'"Comment" and set workflow to \'\n+        \'"Comment Review Workflow".\',\n     )\n \n     def updateFields(self):\n-        super(DiscussionSettingsEditForm, self).updateFields()\n+        super().updateFields()\n         self.fields["globally_enabled"].widgetFactory = SingleCheckBoxFieldWidget\n         self.fields["moderation_enabled"].widgetFactory = SingleCheckBoxFieldWidget\n         self.fields["edit_comment_enabled"].widgetFactory = SingleCheckBoxFieldWidget\n@@ -65,20 +64,20 @@ def updateFields(self):\n \n     def updateWidgets(self):\n         try:\n-            super(DiscussionSettingsEditForm, self).updateWidgets()\n+            super().updateWidgets()\n         except KeyError:\n             # upgrade profile not visible in prefs_install_products_form\n             # provide auto-upgrade\n             update_registry(self.context)\n-            super(DiscussionSettingsEditForm, self).updateWidgets()\n-        self.widgets["globally_enabled"].label = _(u"Enable Comments")\n-        self.widgets["anonymous_comments"].label = _(u"Anonymous Comments")\n-        self.widgets["show_commenter_image"].label = _(u"Commenter Image")\n+            super().updateWidgets()\n+        self.widgets["globally_enabled"].label = _("Enable Comments")\n+        self.widgets["anonymous_comments"].label = _("Anonymous Comments")\n+        self.widgets["show_commenter_image"].label = _("Commenter Image")\n         self.widgets["moderator_notification_enabled"].label = _(\n-            u"Moderator Email Notification",\n+            "Moderator Email Notification",\n         )\n         self.widgets["user_notification_enabled"].label = _(\n-            u"User Email Notification",\n+            "User Email Notification",\n         )\n \n     @button.buttonAndHandler(_("Save"), name=None)\n@@ -88,14 +87,14 @@ def handleSave(self, action):\n             self.status = self.formErrorsMessage\n             return\n         self.applyChanges(data)\n-        IStatusMessage(self.request).addStatusMessage(_(u"Changes saved"), "info")\n+        IStatusMessage(self.request).addStatusMessage(_("Changes saved"), "info")\n         self.context.REQUEST.RESPONSE.redirect("@@discussion-controlpanel")\n \n     @button.buttonAndHandler(_("Cancel"), name="cancel")\n     def handleCancel(self, action):\n-        IStatusMessage(self.request).addStatusMessage(_(u"Edit cancelled"), "info")\n+        IStatusMessage(self.request).addStatusMessage(_("Edit cancelled"), "info")\n         self.request.response.redirect(\n-            "{0}/{1}".format(\n+            "{}/{}".format(\n                 self.context.absolute_url(),\n                 self.control_panel_view,\n             ),\n@@ -111,7 +110,7 @@ class DiscussionSettingsControlPanel(controlpanel.ControlPanelFormWrapper):\n     def __call__(self):\n         self.mailhost_warning()\n         self.custom_comment_workflow_warning()\n-        return super(DiscussionSettingsControlPanel, self).__call__()\n+        return super().__call__()\n \n     @property\n     def site_url(self):\n@@ -180,8 +179,8 @@ def mailhost_warning(self):\n             pass\n         else:\n             message = _(\n-                u"discussion_text_no_mailhost_configured",\n-                default=u"You have not configured a mail host or a site \'From\' address, various features including contact forms, email notification and password reset will not work. Go to the E-Mail Settings to fix this.",\n+                "discussion_text_no_mailhost_configured",\n+                default="You have not configured a mail host or a site \'From\' address, various features including contact forms, email notification and password reset will not work. Go to the E-Mail Settings to fix this.",\n             )  # noqa: E501\n             IStatusMessage(self.request).addStatusMessage(message, "warning")\n \n@@ -195,8 +194,8 @@ def custom_comment_workflow_warning(self):\n             pass\n         else:\n             message = _(\n-                u"discussion_text_custom_comment_workflow",\n-                default=u"You have configured a custom workflow for the \'Discussion Item\' content type. You can enable/disable the comment moderation in this control panel only if you use one of the default \'Discussion Item\' workflows. Go to the Types control panel to choose a workflow for the \'Discussion Item\' type.",\n+                "discussion_text_custom_comment_workflow",\n+                default="You have configured a custom workflow for the \'Discussion Item\' content type. You can enable/disable the comment moderation in this control panel only if you use one of the default \'Discussion Item\' workflows. Go to the Types control panel to choose a workflow for the \'Discussion Item\' type.",\n             )  # noqa: E501\n             IStatusMessage(self.request).addStatusMessage(message, "warning")\n \ndiff --git a/plone/app/discussion/browser/conversation.py b/plone/app/discussion/browser/conversation.py\nindex 79622e05..f2356c8c 100644\n--- a/plone/app/discussion/browser/conversation.py\n+++ b/plone/app/discussion/browser/conversation.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_chain\n from Acquisition import aq_inner\n@@ -34,7 +33,7 @@ def traverse_parents(context):\n     return None\n \n \n-class ConversationView(object):\n+class ConversationView:\n     def enabled(self):\n         if DEXTERITY_INSTALLED and IDexterityContent.providedBy(self.context):\n             return self._enabled_for_dexterity_types()\ndiff --git a/plone/app/discussion/browser/moderation.py b/plone/app/discussion/browser/moderation.py\nindex 5603cd3e..1d0ee8f9 100644\n--- a/plone/app/discussion/browser/moderation.py\n+++ b/plone/app/discussion/browser/moderation.py\n@@ -1,4 +1,3 @@\n-# coding: utf-8\n from AccessControl import getSecurityManager\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n@@ -51,7 +50,7 @@ class View(BrowserView):\n         pass\n \n     def __init__(self, context, request):\n-        super(View, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.workflowTool = getToolByName(self.context, "portal_workflow")\n         self.transitions = []\n \n@@ -229,7 +228,7 @@ def can_delete(self, comment=None):\n \n     def __call__(self):\n         if self.can_delete():\n-            super(DeleteOwnComment, self).__call__()\n+            super().__call__()\n         else:\n             raise Unauthorized("You\'re not allowed to delete this comment.")\n \n@@ -318,7 +317,7 @@ class BulkActionsView(BrowserView):\n     """\n \n     def __init__(self, context, request):\n-        super(BulkActionsView, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.workflowTool = getToolByName(context, "portal_workflow")\n \n     def __call__(self):\ndiff --git a/plone/app/discussion/browser/traversal.py b/plone/app/discussion/browser/traversal.py\nindex 3dd55d4f..f626621d 100644\n--- a/plone/app/discussion/browser/traversal.py\n+++ b/plone/app/discussion/browser/traversal.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Implement the ++comments++ traversal namespace. This should return the\n IDiscussion container for the context, from which traversal will continue\n into an actual comment object.\n@@ -15,7 +14,7 @@\n \n @implementer(ITraversable)\n @adapter(Interface, IBrowserRequest)\n-class ConversationNamespace(object):\n+class ConversationNamespace:\n     """Allow traversal into a conversation via a ++conversation++name\n     namespace. The name is the name of an adapter from context to\n     IConversation. The special name \'default\' will be taken as the default\n@@ -30,7 +29,7 @@ def __init__(self, context, request=None):\n     def traverse(self, name, ignore):\n \n         if name == "default":\n-            name = u""\n+            name = ""\n \n         conversation = queryAdapter(self.context, IConversation, name=name)\n         if conversation is None:\ndiff --git a/plone/app/discussion/browser/validator.py b/plone/app/discussion/browser/validator.py\nindex a9605387..9d28bd95 100644\n--- a/plone/app/discussion/browser/validator.py\n+++ b/plone/app/discussion/browser/validator.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Captcha validator, see captcha.txt for design notes.\n """\n from Acquisition import aq_inner\n@@ -39,7 +38,7 @@ class CaptchaValidator(validator.SimpleFieldValidator):\n     # We adapt the CaptchaValidator class to all form fields (IField)\n \n     def validate(self, value):\n-        super(CaptchaValidator, self).validate(value)\n+        super().validate(value)\n \n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\ndiff --git a/plone/app/discussion/catalog.py b/plone/app/discussion/catalog.py\nindex 0f9252f7..0da596ef 100644\n--- a/plone/app/discussion/catalog.py\n+++ b/plone/app/discussion/catalog.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Catalog indexers, using plone.indexer. These will populate standard catalog\n indexes with values based on the IComment interface.\n \ndiff --git a/plone/app/discussion/comment.py b/plone/app/discussion/comment.py\nindex 1d376be4..4e515b8d 100644\n--- a/plone/app/discussion/comment.py\n+++ b/plone/app/discussion/comment.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """The default comment class and factory.\n """\n from AccessControl import ClassSecurityInfo\n@@ -44,28 +43,28 @@\n \n \n COMMENT_TITLE = _(\n-    u"comment_title",\n-    default=u"${author_name} on ${content}",\n+    "comment_title",\n+    default="${author_name} on ${content}",\n )\n \n MAIL_NOTIFICATION_MESSAGE = _(\n-    u"mail_notification_message",\n-    default=u\'A comment on "${title}" \'\n-    u"has been posted here: ${link}\\n\\n"\n-    u"---\\n"\n-    u"${text}\\n"\n-    u"---\\n",\n+    "mail_notification_message",\n+    default=\'A comment on "${title}" \'\n+    "has been posted here: ${link}\\n\\n"\n+    "---\\n"\n+    "${text}\\n"\n+    "---\\n",\n )\n \n MAIL_NOTIFICATION_MESSAGE_MODERATOR = _(\n-    u"mail_notification_message_moderator2",\n-    default=u\'A comment on "${title}" \'\n-    u"has been posted by ${commentator}\\n"\n-    u"here: ${link}\\n\\n"\n-    u"---\\n\\n"\n-    u"${text}\\n\\n"\n-    u"---\\n\\n"\n-    u"Log in to moderate.\\n\\n",\n+    "mail_notification_message_moderator2",\n+    default=\'A comment on "${title}" \'\n+    "has been posted by ${commentator}\\n"\n+    "here: ${link}\\n\\n"\n+    "---\\n\\n"\n+    "${text}\\n\\n"\n+    "---\\n\\n"\n+    "Log in to moderate.\\n\\n",\n )\n \n logger = logging.getLogger("plone.app.discussion")\n@@ -100,10 +99,10 @@ class Comment(\n     comment_id = None  # long\n     in_reply_to = None  # long\n \n-    title = u""\n+    title = ""\n \n     mime_type = None\n-    text = u""\n+    text = ""\n \n     creator = None\n     creation_date = None\n@@ -137,7 +136,7 @@ def __init__(self):\n \n     @property\n     def __name__(self):\n-        return self.comment_id and six.text_type(self.comment_id) or None\n+        return self.comment_id and str(self.comment_id) or None\n \n     @property\n     def id(self):\n@@ -162,7 +161,7 @@ def getText(self, targetMimetype=None):\n         text = self.text\n         if text is None:\n             return ""\n-        if six.PY2 and isinstance(text, six.text_type):\n+        if six.PY2 and isinstance(text, str):\n             text = text.encode("utf8")\n         transform = transforms.convertTo(\n             targetMimetype, text, context=self, mimetype=sourceMimetype\n@@ -172,8 +171,8 @@ def getText(self, targetMimetype=None):\n         else:\n             logger = logging.getLogger("plone.app.discussion")\n             msg = (\n-                u\'Transform "{0}" => "{1}" not available. Failed to \'\n-                u\'transform comment "{2}".\'\n+                \'Transform "{0}" => "{1}" not available. Failed to \'\n+                \'transform comment "{2}".\'\n             )\n             logger.error(\n                 msg.format(\n@@ -194,8 +193,8 @@ def Title(self):\n             author_name = translate(\n                 Message(\n                     _(\n-                        u"label_anonymous",\n-                        default=u"Anonymous",\n+                        "label_anonymous",\n+                        default="Anonymous",\n                     ),\n                 ),\n             )\n@@ -373,7 +372,7 @@ def notify_user(obj, event):\n     if not emails:\n         return\n \n-    subject = translate(_(u"A comment has been posted."), context=obj.REQUEST)\n+    subject = translate(_("A comment has been posted."), context=obj.REQUEST)\n     message = translate(\n         Message(\n             MAIL_NOTIFICATION_MESSAGE,\n@@ -441,7 +440,7 @@ def notify_moderator(obj, event):\n     content_object = aq_parent(conversation)\n \n     # Compose email\n-    subject = translate(_(u"A comment has been posted."), context=obj.REQUEST)\n+    subject = translate(_("A comment has been posted."), context=obj.REQUEST)\n     message = translate(\n         Message(\n             MAIL_NOTIFICATION_MESSAGE_MODERATOR,\n@@ -453,8 +452,8 @@ def notify_moderator(obj, event):\n                 or translate(\n                     Message(\n                         _(\n-                            u"label_anonymous",\n-                            default=u"Anonymous",\n+                            "label_anonymous",\n+                            default="Anonymous",\n                         ),\n                     ),\n                 ),\ndiff --git a/plone/app/discussion/contentrules.py b/plone/app/discussion/contentrules.py\nindex da324fcd..bc752b24 100644\n--- a/plone/app/discussion/contentrules.py\n+++ b/plone/app/discussion/contentrules.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """ Content rules handlers\n """\n from plone.app.discussion import _\n@@ -8,7 +7,7 @@\n     from plone.stringinterp.adapters import BaseSubstitution\n except ImportError:\n \n-    class BaseSubstitution(object):\n+    class BaseSubstitution:\n         """Fallback class if plone.stringinterp is not available"""\n \n         def __init__(self, context, **kwargs):\n@@ -32,7 +31,7 @@ class CommentSubstitution(BaseSubstitution):\n     """Comment string substitution"""\n \n     def __init__(self, context, **kwargs):\n-        super(CommentSubstitution, self).__init__(context, **kwargs)\n+        super().__init__(context, **kwargs)\n \n     @property\n     def event(self):\n@@ -48,53 +47,53 @@ def comment(self):\n class Id(CommentSubstitution):\n     """Comment id string substitution"""\n \n-    category = _(u"Comments")\n-    description = _(u"Comment id")\n+    category = _("Comments")\n+    description = _("Comment id")\n \n     def safe_call(self):\n         """Safe call"""\n-        return getattr(self.comment, "comment_id", u"")\n+        return getattr(self.comment, "comment_id", "")\n \n \n class Text(CommentSubstitution):\n     """Comment text"""\n \n-    category = _(u"Comments")\n-    description = _(u"Comment text")\n+    category = _("Comments")\n+    description = _("Comment text")\n \n     def safe_call(self):\n         """Safe call"""\n-        return getattr(self.comment, "text", u"")\n+        return getattr(self.comment, "text", "")\n \n \n class AuthorUserName(CommentSubstitution):\n     """Comment author user name string substitution"""\n \n-    category = _(u"Comments")\n-    description = _(u"Comment author user name")\n+    category = _("Comments")\n+    description = _("Comment author user name")\n \n     def safe_call(self):\n         """Safe call"""\n-        return getattr(self.comment, "author_username", u"")\n+        return getattr(self.comment, "author_username", "")\n \n \n class AuthorFullName(CommentSubstitution):\n     """Comment author full name string substitution"""\n \n-    category = _(u"Comments")\n-    description = _(u"Comment author full name")\n+    category = _("Comments")\n+    description = _("Comment author full name")\n \n     def safe_call(self):\n         """Safe call"""\n-        return getattr(self.comment, "author_name", u"")\n+        return getattr(self.comment, "author_name", "")\n \n \n class AuthorEmail(CommentSubstitution):\n     """Comment author email string substitution"""\n \n-    category = _(u"Comments")\n-    description = _(u"Comment author email")\n+    category = _("Comments")\n+    description = _("Comment author email")\n \n     def safe_call(self):\n         """Safe call"""\n-        return getattr(self.comment, "author_email", u"")\n+        return getattr(self.comment, "author_email", "")\ndiff --git a/plone/app/discussion/conversation.py b/plone/app/discussion/conversation.py\nindex 6c28a162..e42cc41e 100644\n--- a/plone/app/discussion/conversation.py\n+++ b/plone/app/discussion/conversation.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """The conversation and replies adapters\n \n The conversation is responsible for storing all comments. It provides a\n@@ -130,8 +129,7 @@ def recurse(comment_id, d=0):\n                 children = self._children.get(comment_id, None)\n                 if children is not None:\n                     for child_id in children:\n-                        for value in recurse(child_id, d + 1):\n-                            yield value\n+                        yield from recurse(child_id, d + 1)\n \n         # Find top level threads\n         comments = self._children.get(root, None)\n@@ -145,8 +143,7 @@ def recurse(comment_id, d=0):\n                     return\n \n                 # Let the closure recurse\n-                for value in recurse(comment_id):\n-                    yield value\n+                yield from recurse(comment_id)\n \n     def addComment(self, comment):\n         """Add a new comment. The parent id should have been set already. The\n@@ -276,14 +273,14 @@ def values(self):\n         return [v.__of__(self) for v in self._comments.values()]\n \n     def iterkeys(self):\n-        return six.iterkeys(self._comments)\n+        return self._comments.keys()\n \n     def itervalues(self):\n-        for v in six.itervalues(self._comments):\n+        for v in self._comments.values():\n             yield v.__of__(self)\n \n     def iteritems(self):\n-        for k, v in six.iteritems(self._comments):\n+        for k, v in self._comments.items():\n             yield (\n                 k,\n                 v.__of__(self),\n@@ -332,7 +329,7 @@ def conversationCanonicalAdapterFactory(content):  # pragma: no cover\n \n @implementer(IReplies)\n @adapter(Conversation)  # relies on implementation details\n-class ConversationReplies(object):\n+class ConversationReplies:\n     """An IReplies adapter for conversations.\n \n     This makes it easy to work with top-level comments.\ndiff --git a/plone/app/discussion/events.py b/plone/app/discussion/events.py\nindex 8cec3c38..3444bbc4 100644\n--- a/plone/app/discussion/events.py\n+++ b/plone/app/discussion/events.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """ Custom discussion events\n """\n from plone.app.discussion.interfaces import ICommentAddedEvent\n@@ -15,7 +14,7 @@\n \n \n @implementer(IDiscussionEvent)\n-class DiscussionEvent(object):\n+class DiscussionEvent:\n     """Custom event"""\n \n     def __init__(self, context, comment, **kwargs):\ndiff --git a/plone/app/discussion/interfaces.py b/plone/app/discussion/interfaces.py\nindex 1a211f94..1f35487c 100644\n--- a/plone/app/discussion/interfaces.py\n+++ b/plone/app/discussion/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Interfaces for plone.app.discussion\n """\n from plone.app.discussion import _\n@@ -42,24 +41,24 @@ class IConversation(IIterableMapping):\n     """\n \n     total_comments = schema.Int(\n-        title=_(u"Total number of public comments on this item"),\n+        title=_("Total number of public comments on this item"),\n         min=0,\n         readonly=True,\n     )\n \n     last_comment_date = schema.Date(\n-        title=_(u"Date of the most recent public comment"),\n+        title=_("Date of the most recent public comment"),\n         readonly=True,\n     )\n \n     commentators = schema.Set(\n-        title=_(u"The set of unique commentators (usernames)"),\n+        title=_("The set of unique commentators (usernames)"),\n         readonly=True,\n     )\n \n     public_commentators = schema.Set(\n         title=_(\n-            u"The set of unique commentators (usernames) " u"of published_comments",\n+            "The set of unique commentators (usernames) " "of published_comments",\n         ),\n         readonly=True,\n     )\n@@ -138,58 +137,58 @@ class IComment(Interface):\n     """\n \n     portal_type = schema.ASCIILine(\n-        title=_(u"Portal type"),\n+        title=_("Portal type"),\n         default="Discussion Item",\n     )\n \n-    __parent__ = schema.Object(title=_(u"Conversation"), schema=Interface)\n+    __parent__ = schema.Object(title=_("Conversation"), schema=Interface)\n \n-    __name__ = schema.TextLine(title=_(u"Name"))\n+    __name__ = schema.TextLine(title=_("Name"))\n \n-    comment_id = schema.Int(title=_(u"A comment id unique to this conversation"))\n+    comment_id = schema.Int(title=_("A comment id unique to this conversation"))\n \n     in_reply_to = schema.Int(\n-        title=_(u"Id of comment this comment is in reply to"),\n+        title=_("Id of comment this comment is in reply to"),\n         required=False,\n     )\n \n     # for logged in comments - set to None for anonymous\n-    author_username = schema.TextLine(title=_(u"Name"), required=False)\n+    author_username = schema.TextLine(title=_("Name"), required=False)\n \n     # for anonymous comments only, set to None for logged in comments\n-    author_name = schema.TextLine(title=_(u"Name"), required=False)\n+    author_name = schema.TextLine(title=_("Name"), required=False)\n     author_email = schema.TextLine(\n-        title=_(u"Email"),\n+        title=_("Email"),\n         required=False,\n         constraint=isEmail,\n     )\n \n-    title = schema.TextLine(title=_(u"label_subject", default=u"Subject"))\n+    title = schema.TextLine(title=_("label_subject", default="Subject"))\n \n-    mime_type = schema.ASCIILine(title=_(u"MIME type"), default="text/plain")\n+    mime_type = schema.ASCIILine(title=_("MIME type"), default="text/plain")\n     text = schema.Text(\n         title=_(\n-            u"label_comment",\n-            default=u"Comment",\n+            "label_comment",\n+            default="Comment",\n         ),\n     )\n \n     user_notification = schema.Bool(\n         title=_(\n-            u"Notify me of new comments via email.",\n+            "Notify me of new comments via email.",\n         ),\n         required=False,\n     )\n \n-    creator = schema.TextLine(title=_(u"Username of the commenter"))\n-    creation_date = schema.Date(title=_(u"Creation date"))\n-    modification_date = schema.Date(title=_(u"Modification date"))\n+    creator = schema.TextLine(title=_("Username of the commenter"))\n+    creation_date = schema.Date(title=_("Creation date"))\n+    modification_date = schema.Date(title=_("Modification date"))\n \n \n class ICaptcha(Interface):\n     """Captcha/ReCaptcha text field to extend the existing comment form."""\n \n-    captcha = schema.TextLine(title=_(u"Captcha"), required=False)\n+    captcha = schema.TextLine(title=_("Captcha"), required=False)\n \n \n class IDiscussionSettings(Interface):\n@@ -204,26 +203,26 @@ class IDiscussionSettings(Interface):\n     # - Search control panel: Show comments in search results\n \n     globally_enabled = schema.Bool(\n-        title=_(u"label_globally_enabled", default=u"Globally enable comments"),\n+        title=_("label_globally_enabled", default="Globally enable comments"),\n         description=_(\n-            u"help_globally_enabled",\n-            default=u"If selected, users are able to post comments on the "\n-            u"site. However, you will still need to enable comments "\n-            u"for specific content types, folders or content "\n-            u"objects before users will be able to post comments.",\n+            "help_globally_enabled",\n+            default="If selected, users are able to post comments on the "\n+            "site. However, you will still need to enable comments "\n+            "for specific content types, folders or content "\n+            "objects before users will be able to post comments.",\n         ),\n         required=False,\n         default=False,\n     )\n \n     anonymous_comments = schema.Bool(\n-        title=_(u"label_anonymous_comments", default="Enable anonymous comments"),\n+        title=_("label_anonymous_comments", default="Enable anonymous comments"),\n         description=_(\n-            u"help_anonymous_comments",\n-            default=u"If selected, anonymous users are able to post "\n-            u"comments without logging in. It is highly "\n-            u"recommended to use a captcha solution to prevent "\n-            u"spam if this setting is enabled.",\n+            "help_anonymous_comments",\n+            default="If selected, anonymous users are able to post "\n+            "comments without logging in. It is highly "\n+            "recommended to use a captcha solution to prevent "\n+            "spam if this setting is enabled.",\n         ),\n         required=False,\n         default=False,\n@@ -231,11 +230,11 @@ class IDiscussionSettings(Interface):\n \n     anonymous_email_enabled = schema.Bool(\n         title=_(\n-            u"label_anonymous_email_enabled", default=u"Enable anonymous email field"\n+            "label_anonymous_email_enabled", default="Enable anonymous email field"\n         ),\n         description=_(\n-            u"help_anonymous_email_enabled",\n-            default=u"If selected, anonymous user will have to " u"give their email.",\n+            "help_anonymous_email_enabled",\n+            default="If selected, anonymous user will have to " "give their email.",\n         ),\n         required=False,\n         default=False,\n@@ -243,28 +242,28 @@ class IDiscussionSettings(Interface):\n \n     moderation_enabled = schema.Bool(\n         title=_(\n-            u"label_moderation_enabled",\n+            "label_moderation_enabled",\n             default="Enable comment moderation",\n         ),\n         description=_(\n-            u"help_moderation_enabled",\n-            default=u\'If selected, comments will enter a "Pending" state \'\n-            u"in which they are invisible to the public. A user "\n-            u\'with the "Review comments" permission ("Reviewer" \'\n-            u\'or "Manager") can approve comments to make them \'\n-            u"visible to the public. If you want to enable a "\n-            u"custom comment workflow, you have to go to the "\n-            u"types control panel.",\n+            "help_moderation_enabled",\n+            default=\'If selected, comments will enter a "Pending" state \'\n+            "in which they are invisible to the public. A user "\n+            \'with the "Review comments" permission ("Reviewer" \'\n+            \'or "Manager") can approve comments to make them \'\n+            "visible to the public. If you want to enable a "\n+            "custom comment workflow, you have to go to the "\n+            "types control panel.",\n         ),\n         required=False,\n         default=False,\n     )\n \n     edit_comment_enabled = schema.Bool(\n-        title=_(u"label_edit_comment_enabled", default="Enable editing of comments"),\n+        title=_("label_edit_comment_enabled", default="Enable editing of comments"),\n         description=_(\n-            u"help_edit_comment_enabled",\n-            default=u"If selected, supports editing "\n+            "help_edit_comment_enabled",\n+            default="If selected, supports editing "\n             \'of comments for users with the "Edit comments" \'\n             "permission.",\n         ),\n@@ -274,11 +273,11 @@ class IDiscussionSettings(Interface):\n \n     delete_own_comment_enabled = schema.Bool(\n         title=_(\n-            u"label_delete_own_comment_enabled", default="Enable deleting own comments"\n+            "label_delete_own_comment_enabled", default="Enable deleting own comments"\n         ),\n         description=_(\n-            u"help_delete_own_comment_enabled",\n-            default=u"If selected, supports deleting "\n+            "help_delete_own_comment_enabled",\n+            default="If selected, supports deleting "\n             "of own comments for users with the "\n             \'"Delete own comments" permission.\',\n         ),\n@@ -287,16 +286,16 @@ class IDiscussionSettings(Interface):\n     )\n \n     text_transform = schema.Choice(\n-        title=_(u"label_text_transform", default="Comment text transform"),\n+        title=_("label_text_transform", default="Comment text transform"),\n         description=_(\n-            u"help_text_transform",\n-            default=u"Use this setting to choose if the comment text "\n-            u"should be transformed in any way. You can choose "\n-            u\'between "Plain text" and "Intelligent text". \'\n-            u\'"Intelligent text" converts plain text into HTML \'\n-            u"where line breaks and indentation is preserved, "\n-            u"and web and email addresses are made into "\n-            u"clickable links.",\n+            "help_text_transform",\n+            default="Use this setting to choose if the comment text "\n+            "should be transformed in any way. You can choose "\n+            \'between "Plain text" and "Intelligent text". \'\n+            \'"Intelligent text" converts plain text into HTML \'\n+            "where line breaks and indentation is preserved, "\n+            "and web and email addresses are made into "\n+            "clickable links.",\n         ),\n         required=True,\n         default="text/plain",\n@@ -304,15 +303,15 @@ class IDiscussionSettings(Interface):\n     )\n \n     captcha = schema.Choice(\n-        title=_(u"label_captcha", default="Captcha"),\n+        title=_("label_captcha", default="Captcha"),\n         description=_(\n-            u"help_captcha",\n-            default=u"Use this setting to enable or disable Captcha "\n-            u"validation for comments. Install "\n-            u"plone.formwidget.captcha, "\n-            u"plone.formwidget.recaptcha, collective.akismet, or "\n-            u"collective.z3cform.norobots if there are no options "\n-            u"available.",\n+            "help_captcha",\n+            default="Use this setting to enable or disable Captcha "\n+            "validation for comments. Install "\n+            "plone.formwidget.captcha, "\n+            "plone.formwidget.recaptcha, collective.akismet, or "\n+            "collective.z3cform.norobots if there are no options "\n+            "available.",\n         ),\n         required=True,\n         default="disabled",\n@@ -320,11 +319,11 @@ class IDiscussionSettings(Interface):\n     )\n \n     show_commenter_image = schema.Bool(\n-        title=_(u"label_show_commenter_image", default=u"Show commenter image"),\n+        title=_("label_show_commenter_image", default="Show commenter image"),\n         description=_(\n-            u"help_show_commenter_image",\n-            default=u"If selected, an image of the user is shown next to "\n-            u"the comment.",\n+            "help_show_commenter_image",\n+            default="If selected, an image of the user is shown next to "\n+            "the comment.",\n         ),\n         required=False,\n         default=True,\n@@ -332,14 +331,14 @@ class IDiscussionSettings(Interface):\n \n     moderator_notification_enabled = schema.Bool(\n         title=_(\n-            u"label_moderator_notification_enabled",\n-            default=u"Enable moderator email notification",\n+            "label_moderator_notification_enabled",\n+            default="Enable moderator email notification",\n         ),\n         description=_(\n-            u"help_moderator_notification_enabled",\n-            default=u"If selected, the moderator is notified if a comment "\n-            u"needs attention. The moderator email address can "\n-            u"be set below.",\n+            "help_moderator_notification_enabled",\n+            default="If selected, the moderator is notified if a comment "\n+            "needs attention. The moderator email address can "\n+            "be set below.",\n         ),\n         required=False,\n         default=False,\n@@ -347,25 +346,25 @@ class IDiscussionSettings(Interface):\n \n     moderator_email = schema.ASCIILine(\n         title=_(\n-            u"label_moderator_email",\n-            default=u"Moderator Email Address",\n+            "label_moderator_email",\n+            default="Moderator Email Address",\n         ),\n         description=_(\n-            u"help_moderator_email",\n-            default=u"Address to which moderator notifications " u"will be sent.",\n+            "help_moderator_email",\n+            default="Address to which moderator notifications " "will be sent.",\n         ),\n         required=False,\n     )\n \n     user_notification_enabled = schema.Bool(\n         title=_(\n-            u"label_user_notification_enabled",\n-            default=u"Enable user email notification",\n+            "label_user_notification_enabled",\n+            default="Enable user email notification",\n         ),\n         description=_(\n-            u"help_user_notification_enabled",\n-            default=u"If selected, users can choose to be notified "\n-            u"of new comments by email.",\n+            "help_user_notification_enabled",\n+            default="If selected, users can choose to be notified "\n+            "of new comments by email.",\n         ),\n         required=False,\n         default=False,\ndiff --git a/plone/app/discussion/subscribers.py b/plone/app/discussion/subscribers.py\nindex 5f208676..6e1b4985 100644\n--- a/plone/app/discussion/subscribers.py\n+++ b/plone/app/discussion/subscribers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n \n \ndiff --git a/plone/app/discussion/testing.py b/plone/app/discussion/testing.py\nindex c78b6438..01ea305f 100644\n--- a/plone/app/discussion/testing.py\n+++ b/plone/app/discussion/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.discussion.interfaces import IDiscussionSettings\n from plone.app.robotframework.testing import REMOTE_LIBRARY_ROBOT_TESTING\ndiff --git a/plone/app/discussion/tests/test_catalog.py b/plone/app/discussion/tests/test_catalog.py\nindex 86cbaed0..395f6c2f 100644\n--- a/plone/app/discussion/tests/test_catalog.py\n+++ b/plone/app/discussion/tests/test_catalog.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Test the plone.app.discussion catalog indexes\n """\n from datetime import datetime\n@@ -98,7 +97,7 @@ def test_total_comments(self):\n         new_comment2_id = self.conversation.addComment(comment2)\n \n         comment2 = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_comment2_id),\n+            f"++conversation++default/{new_comment2_id}",\n         )\n         comment2.reindexObject()\n         brains = self.catalog.searchResults(\n@@ -128,7 +127,7 @@ def test_last_comment_date(self):\n         new_comment2_id = self.conversation.addComment(comment2)\n \n         comment2 = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_comment2_id),\n+            f"++conversation++default/{new_comment2_id}",\n         )\n         comment2.reindexObject()\n         brains = self.catalog.searchResults(\n@@ -188,7 +187,7 @@ def test_commentators(self):\n         new_comment2_id = self.conversation.addComment(comment2)\n \n         comment2 = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_comment2_id),\n+            f"++conversation++default/{new_comment2_id}",\n         )\n         comment2.reindexObject()\n \n@@ -283,7 +282,7 @@ def setUp(self):\n \n         # Comment brain\n         self.comment = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_comment1_id),\n+            f"++conversation++default/{new_comment1_id}",\n         )\n         brains = self.catalog.searchResults(\n             dict(\n@@ -304,7 +303,7 @@ def test_no_name_title(self):\n \n         # Comment brain\n         comment = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(cid),\n+            f"++conversation++default/{cid}",\n         )\n         brains = self.catalog.searchResults(\n             dict(\n@@ -503,7 +502,7 @@ def test_clear_and_rebuild_catalog(self):\n         brains = self.catalog.searchResults({"portal_type": "Discussion Item"})\n         self.assertTrue(brains)\n         comment_brain = brains[0]\n-        self.assertEqual(comment_brain.Title, u"Jim on Document 1")\n+        self.assertEqual(comment_brain.Title, "Jim on Document 1")\n         self.assertEqual(\n             comment_brain.getPath(),\n             "/plone/doc1/++conversation++default/" + str(self.comment_id),\ndiff --git a/plone/app/discussion/tests/test_comment.py b/plone/app/discussion/tests/test_comment.py\nindex ff9dd279..3d16fea6 100644\n--- a/plone/app/discussion/tests/test_comment.py\n+++ b/plone/app/discussion/tests/test_comment.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.discussion.browser.comment import View\n from plone.app.discussion.interfaces import IComment\n from plone.app.discussion.interfaces import IConversation\n@@ -64,7 +63,7 @@ def test_id(self):\n         comment1.comment_id = 123\n         self.assertEqual("123", comment1.id)\n         self.assertEqual("123", comment1.getId())\n-        self.assertEqual(u"123", comment1.__name__)\n+        self.assertEqual("123", comment1.__name__)\n \n     def test_uid(self):\n         conversation = IConversation(self.portal.doc1)\n@@ -111,14 +110,14 @@ def test_no_name_title(self):\n     def test_title_special_characters(self):\n         self.portal.invokeFactory(\n             id="doc_sp_chars",\n-            title=u"Document \xc3\xa4\xc3\xbc\xc3\xb6",\n+            title="Document \xc3\xa4\xc3\xbc\xc3\xb6",\n             type_name="Document",\n         )\n         conversation = IConversation(self.portal.doc_sp_chars)\n         comment1 = createObject("plone.Comment")\n-        comment1.author_name = u"Tarek Ziad\xc3\xa9"\n+        comment1.author_name = "Tarek Ziad\xc3\xa9"\n         conversation.addComment(comment1)\n-        self.assertEqual(u"Tarek Ziad\xc3\xa9 on Document \xc3\xa4\xc3\xbc\xc3\xb6", comment1.Title())\n+        self.assertEqual("Tarek Ziad\xc3\xa9 on Document \xc3\xa4\xc3\xbc\xc3\xb6", comment1.Title())\n \n     def test_title_special_characters_utf8(self):\n         self.portal.invokeFactory(\n@@ -130,7 +129,7 @@ def test_title_special_characters_utf8(self):\n         comment1 = createObject("plone.Comment")\n         comment1.author_name = "H\xc3\xbc\xc3\xbcb B\xc3\xb4\xc3\xbbm\xc3\xa4"\n         conversation.addComment(comment1)\n-        self.assertEqual(u"H\xc3\xbc\xc3\xbcb B\xc3\xb4\xc3\xbbm\xc3\xa4 on Document \xc3\xab\xc3\xaf\xc3\xbb", comment1.Title())\n+        self.assertEqual("H\xc3\xbc\xc3\xbcb B\xc3\xb4\xc3\xbbm\xc3\xa4 on Document \xc3\xab\xc3\xaf\xc3\xbb", comment1.Title())\n \n     def test_creator(self):\n         comment1 = createObject("plone.Comment")\n@@ -174,12 +173,9 @@ def test_getText_escapes_HTML(self):\n \n     def test_getText_with_non_ascii_characters(self):\n         comment1 = createObject("plone.Comment")\n-        comment1.text = u"Umlaute sind \xc3\xa4, \xc3\xb6 und \xc3\xbc."\n+        comment1.text = "Umlaute sind \xc3\xa4, \xc3\xb6 und \xc3\xbc."\n         out = b"<p>Umlaute sind \\xc3\\xa4, \\xc3\\xb6 und \\xc3\\xbc.</p>"\n-        if six.PY2:\n-            self.assertEqual(comment1.getText(), out)\n-        else:\n-            self.assertEqual(comment1.getText(), out.decode("utf8"))\n+        self.assertEqual(comment1.getText(), out.decode("utf8"))\n \n     def test_getText_doesnt_link(self):\n         comment1 = createObject("plone.Comment")\n@@ -233,7 +229,7 @@ def test_traversal(self):\n         new_comment1_id = conversation.addComment(comment1)\n \n         comment = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_comment1_id),\n+            f"++conversation++default/{new_comment1_id}",\n         )\n         self.assertTrue(IComment.providedBy(comment))\n \n@@ -268,7 +264,7 @@ def test_view_blob_types(self):\n         comment1.text = "Comment text"\n         new_comment1_id = conversation.addComment(comment1)\n         comment = self.portal.image1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_comment1_id),\n+            f"++conversation++default/{new_comment1_id}",\n         )\n \n         view = View(comment, self.request)\n@@ -336,7 +332,7 @@ def test_view(self):\n         new_comment1_id = conversation.addComment(comment1)\n \n         comment = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_comment1_id),\n+            f"++conversation++default/{new_comment1_id}",\n         )\n \n         # make sure the view is there\n@@ -381,7 +377,7 @@ def test_add_comment(self):\n         comment.text = "Comment text"\n         new_id = replies.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_id),\n+            f"++conversation++default/{new_id}",\n         )\n \n         # Add a reply to the CommentReplies adapter of the first comment\n@@ -418,7 +414,7 @@ def test_delete_comment(self):\n         comment.text = "Comment text"\n         new_id = replies.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_id),\n+            f"++conversation++default/{new_id}",\n         )\n \n         # Add a reply to the CommentReplies adapter of the first comment\n@@ -454,7 +450,7 @@ def test_traversal(self):\n         comment.text = "Comment text"\n         new_id = conversation.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_id),\n+            f"++conversation++default/{new_id}",\n         )\n \n         # Add a reply to the CommentReplies adapter of the first comment\n@@ -463,7 +459,7 @@ def test_traversal(self):\n         replies = IReplies(comment)\n         new_re_id = replies.addComment(re_comment)\n         re_comment = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_re_id),\n+            f"++conversation++default/{new_re_id}",\n         )\n \n         # Add a reply to the reply\n@@ -472,7 +468,7 @@ def test_traversal(self):\n         replies = IReplies(re_comment)\n         new_re_re_id = replies.addComment(re_re_comment)\n         re_re_comment = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_re_re_id),\n+            f"++conversation++default/{new_re_re_id}",\n         )\n \n         # Add a reply to the replies reply\n@@ -481,7 +477,7 @@ def test_traversal(self):\n         replies = IReplies(re_re_comment)\n         new_re_re_re_id = replies.addComment(re_re_re_comment)\n         re_re_re_comment = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_re_re_re_id),\n+            f"++conversation++default/{new_re_re_re_id}",\n         )\n \n         self.assertEqual(\ndiff --git a/plone/app/discussion/tests/test_comments_viewlet.py b/plone/app/discussion/tests/test_comments_viewlet.py\nindex 4b25242d..020dfc01 100644\n--- a/plone/app/discussion/tests/test_comments_viewlet.py\n+++ b/plone/app/discussion/tests/test_comments_viewlet.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from datetime import datetime\n from OFS.Image import Image\n@@ -81,7 +80,7 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u"comment-form",\n+            name="comment-form",\n         )\n \n         # The form should return an error if the comment text field is empty\n@@ -89,7 +88,7 @@ def make_request(form={}):\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u"comment-form",\n+            name="comment-form",\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n@@ -99,11 +98,11 @@ def make_request(form={}):\n \n         # The form is submitted successfully, if the required text field is\n         # filled out\n-        request = make_request(form={"form.widgets.text": u"bar"})\n+        request = make_request(form={"form.widgets.text": "bar"})\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u"comment-form",\n+            name="comment-form",\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n@@ -116,7 +115,7 @@ def make_request(form={}):\n         self.assertEqual(len(comments), 1)\n \n         for comment in comments:\n-            self.assertEqual(comment.text, u"bar")\n+            self.assertEqual(comment.text, "bar")\n             self.assertEqual(comment.creator, "test_user_1_")\n             self.assertEqual(comment.getOwner().getUserName(), "test-user")\n             local_roles = comment.get_local_roles()\n@@ -144,23 +143,23 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u"comment-form",\n+            name="comment-form",\n         )\n \n         provideAdapter(\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=EditCommentForm,\n-            name=u"edit-comment-form",\n+            name="edit-comment-form",\n         )\n \n         # The form is submitted successfully, if the required text field is\n         # filled out\n-        request = make_request(form={"form.widgets.text": u"bar"})\n+        request = make_request(form={"form.widgets.text": "bar"})\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u"comment-form",\n+            name="comment-form",\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n@@ -171,10 +170,10 @@ def make_request(form={}):\n         # Edit the last comment\n         conversation = IConversation(self.context)\n         comment = [x for x in conversation.getComments()][-1]\n-        request = make_request(form={"form.widgets.text": u"foobar"})\n+        request = make_request(form={"form.widgets.text": "foobar"})\n         editForm = getMultiAdapter(\n             (comment, request),\n-            name=u"edit-comment-form",\n+            name="edit-comment-form",\n         )\n         editForm.update()\n         data, errors = editForm.extractData()  # pylint: disable-msg=W0612\n@@ -182,14 +181,14 @@ def make_request(form={}):\n         self.assertEqual(len(errors), 0)\n         self.assertFalse(editForm.handleComment(editForm, "foo"))\n         comment = [x for x in conversation.getComments()][-1]\n-        self.assertEqual(comment.text, u"foobar")\n+        self.assertEqual(comment.text, "foobar")\n \n         comments = IConversation(commentForm.context).getComments()\n         comments = [c for c in comments]  # consume iterator\n         self.assertEqual(len(comments), 1)\n \n         for comment in comments:\n-            self.assertEqual(comment.text, u"foobar")\n+            self.assertEqual(comment.text, "foobar")\n             self.assertEqual(comment.creator, "test_user_1_")\n \n             self.assertEqual(comment.getOwner().getUserName(), "test-user")\n@@ -218,16 +217,16 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u"comment-form",\n+            name="comment-form",\n         )\n \n         # The form is submitted successfully, if the required text field is\n         # filled out\n-        form_request = make_request(form={"form.widgets.text": u"bar"})\n+        form_request = make_request(form={"form.widgets.text": "bar"})\n \n         commentForm = getMultiAdapter(\n             (self.context, form_request),\n-            name=u"comment-form",\n+            name="comment-form",\n         )\n \n         commentForm.update()\n@@ -240,7 +239,7 @@ def make_request(form={}):\n         comment = [x for x in conversation.getComments()][-1]\n         deleteView = getMultiAdapter(\n             (comment, self.request),\n-            name=u"moderate-delete-comment",\n+            name="moderate-delete-comment",\n         )\n         # try to delete last comment without \'Delete comments\' permission\n         setRoles(self.portal, TEST_USER_ID, ["Member"])\n@@ -275,16 +274,16 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u"comment-form",\n+            name="comment-form",\n         )\n \n         # The form is submitted successfully, if the required text field is\n         # filled out\n-        form_request = make_request(form={"form.widgets.text": u"bar"})\n+        form_request = make_request(form={"form.widgets.text": "bar"})\n \n         commentForm = getMultiAdapter(\n             (self.context, form_request),\n-            name=u"comment-form",\n+            name="comment-form",\n         )\n \n         commentForm.update()\n@@ -297,7 +296,7 @@ def make_request(form={}):\n         comment = [x for x in conversation.getComments()][-1]\n         deleteView = getMultiAdapter(\n             (comment, self.request),\n-            name=u"delete-own-comment",\n+            name="delete-own-comment",\n         )\n         # try to delete last comment with johndoe\n         setRoles(self.portal, "johndoe", ["Member"])\n@@ -337,20 +336,20 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u"comment-form",\n+            name="comment-form",\n         )\n \n         # Post an anonymous comment and provide a name\n         request = make_request(\n             form={\n-                "form.widgets.name": u"john doe",\n-                "form.widgets.text": u"bar",\n+                "form.widgets.name": "john doe",\n+                "form.widgets.text": "bar",\n             }\n         )\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u"comment-form",\n+            name="comment-form",\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n@@ -363,7 +362,7 @@ def make_request(form={}):\n         self.assertEqual(len(comments), 1)\n \n         for comment in IConversation(commentForm.context).getComments():\n-            self.assertEqual(comment.text, u"bar")\n+            self.assertEqual(comment.text, "bar")\n             self.assertIsNone(comment.creator)\n             roles = comment.get_local_roles()\n             self.assertEqual(len(roles), 0)\n@@ -387,14 +386,14 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u"comment-form",\n+            name="comment-form",\n         )\n \n-        request = make_request(form={"form.widgets.text": u"bar"})\n+        request = make_request(form={"form.widgets.text": "bar"})\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u"comment-form",\n+            name="comment-form",\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n@@ -425,12 +424,12 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u"comment-form",\n+            name="comment-form",\n         )\n \n-        request = make_request(form={"form.widgets.text": u"bar"})\n+        request = make_request(form={"form.widgets.text": "bar"})\n \n-        commentForm = getMultiAdapter((self.context, request), name=u"comment-form")\n+        commentForm = getMultiAdapter((self.context, request), name="comment-form")\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n \ndiff --git a/plone/app/discussion/tests/test_contentrules.py b/plone/app/discussion/tests/test_contentrules.py\nindex d23c8548..506a5383 100644\n--- a/plone/app/discussion/tests/test_contentrules.py\n+++ b/plone/app/discussion/tests/test_contentrules.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.discussion.interfaces import ICommentAddedEvent\n from plone.app.discussion.interfaces import ICommentRemovedEvent\n from plone.app.discussion.interfaces import IConversation\n@@ -56,32 +55,32 @@ def testEventTypesMarked(self):\n         self.assertTrue(IRuleEventType.providedBy(IReplyRemovedEvent))\n \n     def testCommentIdStringSubstitution(self):\n-        comment_id = getAdapter(self.document, IStringSubstitution, name=u"comment_id")\n+        comment_id = getAdapter(self.document, IStringSubstitution, name="comment_id")\n         self.assertIsInstance(comment_id(), int)\n \n     def testCommentTextStringSubstitution(self):\n         comment_text = getAdapter(\n-            self.document, IStringSubstitution, name=u"comment_text"\n+            self.document, IStringSubstitution, name="comment_text"\n         )\n-        self.assertEqual(comment_text(), u"This is a comment")\n+        self.assertEqual(comment_text(), "This is a comment")\n \n     def testCommentUserIdStringSubstitution(self):\n         comment_user_id = getAdapter(\n-            self.document, IStringSubstitution, name=u"comment_user_id"\n+            self.document, IStringSubstitution, name="comment_user_id"\n         )\n-        self.assertEqual(comment_user_id(), u"jim")\n+        self.assertEqual(comment_user_id(), "jim")\n \n     def testCommentUserFullNameStringSubstitution(self):\n         comment_user_fullname = getAdapter(\n-            self.document, IStringSubstitution, name=u"comment_user_fullname"\n+            self.document, IStringSubstitution, name="comment_user_fullname"\n         )\n-        self.assertEqual(comment_user_fullname(), u"Jim")\n+        self.assertEqual(comment_user_fullname(), "Jim")\n \n     def testCommentUserEmailStringSubstitution(self):\n         comment_user_email = getAdapter(\n-            self.document, IStringSubstitution, name=u"comment_user_email"\n+            self.document, IStringSubstitution, name="comment_user_email"\n         )\n-        self.assertEqual(comment_user_email(), u"jim@example.com")\n+        self.assertEqual(comment_user_email(), "jim@example.com")\n \n \n class ReplyContentRulesTest(unittest.TestCase):\n@@ -103,7 +102,7 @@ def setUp(self):\n         comment.text = "This is a comment"\n         new_id = replies.addComment(comment)\n         comment = self.document.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_id),\n+            f"++conversation++default/{new_id}",\n         )\n \n         re_comment = createObject("plone.Comment")\n@@ -119,7 +118,7 @@ def testReplyIdStringSubstitution(self):\n         reply_id = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u"comment_id",\n+            name="comment_id",\n         )\n         self.assertIsInstance(reply_id(), int)\n \n@@ -127,30 +126,30 @@ def testReplyTextStringSubstitution(self):\n         reply_text = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u"comment_text",\n+            name="comment_text",\n         )\n-        self.assertEqual(reply_text(), u"This is a reply")\n+        self.assertEqual(reply_text(), "This is a reply")\n \n     def testReplyUserIdStringSubstitution(self):\n         reply_user_id = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u"comment_user_id",\n+            name="comment_user_id",\n         )\n-        self.assertEqual(reply_user_id(), u"julia")\n+        self.assertEqual(reply_user_id(), "julia")\n \n     def testReplyUserFullNameStringSubstitution(self):\n         reply_user_fullname = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u"comment_user_fullname",\n+            name="comment_user_fullname",\n         )\n-        self.assertEqual(reply_user_fullname(), u"Juliana")\n+        self.assertEqual(reply_user_fullname(), "Juliana")\n \n     def testReplyUserEmailStringSubstitution(self):\n         reply_user_email = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u"comment_user_email",\n+            name="comment_user_email",\n         )\n-        self.assertEqual(reply_user_email(), u"julia@example.com")\n+        self.assertEqual(reply_user_email(), "julia@example.com")\ndiff --git a/plone/app/discussion/tests/test_controlpanel.py b/plone/app/discussion/tests/test_controlpanel.py\nindex f9f1cb15..b148547e 100644\n--- a/plone/app/discussion/tests/test_controlpanel.py\n+++ b/plone/app/discussion/tests/test_controlpanel.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.discussion.interfaces import IDiscussionSettings\n from plone.app.discussion.testing import (  # noqa\n     PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\ndiff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex c00acd95..c749f530 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_parent\n from datetime import datetime\n@@ -387,17 +386,17 @@ def test_dict_operations(self):\n         self.assertTrue(comment2 in conversation.values())\n \n         # check if comment ids are in iterkeys\n-        self.assertTrue(new_id1 in six.iterkeys(conversation))\n-        self.assertTrue(new_id2 in six.iterkeys(conversation))\n-        self.assertFalse(123 in six.iterkeys(conversation))\n+        self.assertTrue(new_id1 in conversation.keys())\n+        self.assertTrue(new_id2 in conversation.keys())\n+        self.assertFalse(123 in conversation.keys())\n \n         # check if comment objects are in itervalues\n-        self.assertTrue(comment1 in six.itervalues(conversation))\n-        self.assertTrue(comment2 in six.itervalues(conversation))\n+        self.assertTrue(comment1 in conversation.values())\n+        self.assertTrue(comment2 in conversation.values())\n \n         # check if iteritems returns (key, comment object) pairs\n-        self.assertTrue((new_id1, comment1) in six.iteritems(conversation))\n-        self.assertTrue((new_id2, comment2) in six.iteritems(conversation))\n+        self.assertTrue((new_id1, comment1) in conversation.items())\n+        self.assertTrue((new_id2, comment2) in conversation.items())\n \n         # TODO test acquisition wrapping  # noqa T000\n         # self.assertTrue(aq_base(aq_parent(comment1)) is conversation)\n@@ -852,18 +851,18 @@ def test_dict_api(self):\n         # Create the nested comment structure\n         new_id_1 = replies.addComment(comment1)\n         comment1 = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_id_1),\n+            f"++conversation++default/{new_id_1}",\n         )\n         replies_to_comment1 = IReplies(comment1)\n         new_id_2 = replies.addComment(comment2)\n         comment2 = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_id_2),\n+            f"++conversation++default/{new_id_2}",\n         )\n         replies_to_comment2 = IReplies(comment2)\n \n         new_id_1_1 = replies_to_comment1.addComment(comment1_1)\n         comment1_1 = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_id_1_1),\n+            f"++conversation++default/{new_id_1_1}",\n         )\n         replies_to_comment1_1 = IReplies(comment1_1)\n         replies_to_comment1_1.addComment(comment1_1_1)\ndiff --git a/plone/app/discussion/tests/test_events.py b/plone/app/discussion/tests/test_events.py\nindex d4d6a926..175af1c7 100644\n--- a/plone/app/discussion/tests/test_events.py\n+++ b/plone/app/discussion/tests/test_events.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IReplies\n from plone.app.discussion.testing import (  # noqa\n@@ -20,7 +19,7 @@\n #\n \n \n-class EventsRegistry(object):\n+class EventsRegistry:\n     """Fake registry to be used while testing discussion events"""\n \n     commentAdded = False\n@@ -123,7 +122,7 @@ def test_modifyEvent(self):\n         conversation = IConversation(self.document)\n         new_id = conversation.addComment(comment)\n         comment = self.document.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_id),\n+            f"++conversation++default/{new_id}",\n         )\n         comment.text = "foo"\n         notify(ObjectModifiedEvent(comment))\n@@ -191,7 +190,7 @@ def test_addEvent(self):\n         comment.text = "Comment text"\n         new_id = replies.addComment(comment)\n         comment = self.document.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_id),\n+            f"++conversation++default/{new_id}",\n         )\n \n         re_comment = createObject("plone.Comment")\n@@ -211,7 +210,7 @@ def test_modifyEvent(self):\n         comment.text = "Comment text"\n         comment_id = replies.addComment(comment)\n         comment = self.document.restrictedTraverse(\n-            "++conversation++default/{0}".format(comment_id),\n+            f"++conversation++default/{comment_id}",\n         )\n         re_comment = createObject("plone.Comment")\n         re_comment.text = "Comment text"\n@@ -232,7 +231,7 @@ def test_removedEvent(self):\n         comment.text = "Comment text"\n         new_id = replies.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_id),\n+            f"++conversation++default/{new_id}",\n         )\n \n         re_comment = createObject("plone.Comment")\ndiff --git a/plone/app/discussion/tests/test_functional.py b/plone/app/discussion/tests/test_functional.py\nindex 23b71c6c..f5f1181b 100644\n--- a/plone/app/discussion/tests/test_functional.py\n+++ b/plone/app/discussion/tests/test_functional.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Functional Doctests for plone.app.discussion.\n \n    These test are only triggered when Plone 4 (and plone.testing) is installed.\ndiff --git a/plone/app/discussion/tests/test_indexers.py b/plone/app/discussion/tests/test_indexers.py\nindex 51801795..0581576a 100644\n--- a/plone/app/discussion/tests/test_indexers.py\n+++ b/plone/app/discussion/tests/test_indexers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Test for the plone.app.discussion indexers\n """\n from datetime import datetime\ndiff --git a/plone/app/discussion/tests/test_moderation_multiple_state_view.py b/plone/app/discussion/tests/test_moderation_multiple_state_view.py\nindex 7f9edb31..2247c6f1 100644\n--- a/plone/app/discussion/tests/test_moderation_multiple_state_view.py\n+++ b/plone/app/discussion/tests/test_moderation_multiple_state_view.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.discussion.browser.moderation import BulkActionsView\n from plone.app.discussion.browser.moderation import CommentTransition\n from plone.app.discussion.browser.moderation import DeleteComment\n@@ -42,7 +41,7 @@ def setUp(self):\n         comment1.Creator = "Jim"\n         new_id_1 = conversation.addComment(comment1)\n         self.comment1 = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_id_1),\n+            f"++conversation++default/{new_id_1}",\n         )\n         comment2 = createObject("plone.Comment")\n         comment2.title = "Comment 2"\n@@ -50,7 +49,7 @@ def setUp(self):\n         comment2.Creator = "Joe"\n         new_id_2 = conversation.addComment(comment2)\n         self.comment2 = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_id_2),\n+            f"++conversation++default/{new_id_2}",\n         )\n         comment3 = createObject("plone.Comment")\n         comment3.title = "Comment 3"\n@@ -58,7 +57,7 @@ def setUp(self):\n         comment3.Creator = "Emma"\n         new_id_3 = conversation.addComment(comment3)\n         self.comment3 = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_id_3),\n+            f"++conversation++default/{new_id_3}",\n         )\n         self.conversation = conversation\n \ndiff --git a/plone/app/discussion/tests/test_moderation_view.py b/plone/app/discussion/tests/test_moderation_view.py\nindex 59f24bac..54584041 100644\n--- a/plone/app/discussion/tests/test_moderation_view.py\n+++ b/plone/app/discussion/tests/test_moderation_view.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.discussion.browser.moderation import BulkActionsView\n from plone.app.discussion.browser.moderation import CommentTransition\n from plone.app.discussion.browser.moderation import DeleteComment\n@@ -81,7 +80,7 @@ def setUp(self):\n         comment1.Creator = "Jim"\n         new_id_1 = conversation.addComment(comment1)\n         self.comment1 = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_id_1),\n+            f"++conversation++default/{new_id_1}",\n         )\n         comment2 = createObject("plone.Comment")\n         comment2.title = "Comment 2"\n@@ -89,7 +88,7 @@ def setUp(self):\n         comment2.Creator = "Joe"\n         new_id_2 = conversation.addComment(comment2)\n         self.comment2 = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_id_2),\n+            f"++conversation++default/{new_id_2}",\n         )\n         comment3 = createObject("plone.Comment")\n         comment3.title = "Comment 3"\n@@ -97,7 +96,7 @@ def setUp(self):\n         comment3.Creator = "Emma"\n         new_id_3 = conversation.addComment(comment3)\n         self.comment3 = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(new_id_3),\n+            f"++conversation++default/{new_id_3}",\n         )\n         self.conversation = conversation\n \ndiff --git a/plone/app/discussion/tests/test_notifications.py b/plone/app/discussion/tests/test_notifications.py\nindex a0d3d701..fdf326ff 100644\n--- a/plone/app/discussion/tests/test_notifications.py\n+++ b/plone/app/discussion/tests/test_notifications.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.testing import (  # noqa\n@@ -80,7 +79,7 @@ def test_notify_user(self):\n         # you may get lines separated by \'\\n\' or \'\\r\\n\' in here.\n         msg = msg.replace("\\r\\n", "\\n")\n         self.assertIn(\'A comment on "K=C3=B6lle Alaaf" has been posted here:\', msg)\n-        self.assertIn("http://nohost/plone/d=\\noc1/view#{0}".format(comment_id), msg)\n+        self.assertIn(f"http://nohost/plone/d=\\noc1/view#{comment_id}", msg)\n         self.assertIn("Comment text", msg)\n         self.assertNotIn("Approve comment", msg)\n         self.assertNotIn("Delete comment", msg)\n@@ -215,7 +214,7 @@ def test_notify_moderator(self):\n         # The output should be encoded in a reasonable manner\n         # (in this case quoted-printable):\n         self.assertTrue(\'A comment on "K=C3=B6lle Alaaf" has been posted\' in msg)\n-        self.assertIn("http://nohost/plone/doc1/view#{0}".format(comment_id), msg)\n+        self.assertIn(f"http://nohost/plone/doc1/view#{comment_id}", msg)\n         self.assertIn(comment.author_email, msg)\n         self.assertIn(comment.text, msg)\n \ndiff --git a/plone/app/discussion/tests/test_robot.py b/plone/app/discussion/tests/test_robot.py\nindex 5b3e0735..e6487d5a 100644\n--- a/plone/app/discussion/tests/test_robot.py\n+++ b/plone/app/discussion/tests/test_robot.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.discussion.testing import PLONE_APP_DISCUSSION_ROBOT_TESTING\n from plone.app.testing import ROBOT_TEST_LEVEL\n from plone.testing import layered\ndiff --git a/plone/app/discussion/tests/test_workflow.py b/plone/app/discussion/tests/test_workflow.py\nindex 9095fc08..5667f001 100644\n--- a/plone/app/discussion/tests/test_workflow.py\n+++ b/plone/app/discussion/tests/test_workflow.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Test plone.app.discussion workflow and permissions.\n """\n from AccessControl import Unauthorized\n@@ -128,7 +127,7 @@ def setUp(self):\n         cid = conversation.addComment(comment)\n \n         self.comment = self.folder.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(cid),\n+            f"++conversation++default/{cid}",\n         )\n \n         self.portal.acl_users._doAddUser("member", "secret", ["Member"], [])\n@@ -223,7 +222,7 @@ def setUp(self):\n         comment.text = "Comment text"\n         comment_id = conversation.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            "++conversation++default/{0}".format(comment_id),\n+            f"++conversation++default/{comment_id}",\n         )\n \n         self.conversation = conversation\ndiff --git a/plone/app/discussion/tool.py b/plone/app/discussion/tool.py\nindex a57e9bba..50f9361e 100644\n--- a/plone/app/discussion/tool.py\n+++ b/plone/app/discussion/tool.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """The portal_discussion tool, usually accessed via\n queryUtility(ICommentingTool). The default implementation delegates to the\n standard portal_catalog for indexing comments.\ndiff --git a/plone/app/discussion/upgrades.py b/plone/app/discussion/upgrades.py\nindex c9b19d1b..40cdc8fe 100644\n--- a/plone/app/discussion/upgrades.py\n+++ b/plone/app/discussion/upgrades.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.discussion.interfaces import IDiscussionSettings\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n@@ -63,7 +62,7 @@ def upgrade_comment_workflows_apply_rolemapping(context):\n                 wf.updateRoleMappingsFor(comment)\n             comment.reindexObjectSecurity()\n         except (AttributeError, KeyError):\n-            logger.info("Could not reindex comment {0}".format(brain.getURL()))\n+            logger.info(f"Could not reindex comment {brain.getURL()}")\n \n \n def upgrade_comment_workflows(context):\ndiff --git a/plone/app/discussion/vocabularies.py b/plone/app/discussion/vocabularies.py\nindex 58b5716c..290448d3 100644\n--- a/plone/app/discussion/vocabularies.py\n+++ b/plone/app/discussion/vocabularies.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.discussion.interfaces import _\n from zope.schema.vocabulary import SimpleTerm\n from zope.schema.vocabulary import SimpleVocabulary\n@@ -40,7 +39,7 @@\n def captcha_vocabulary(context):\n     """Vocabulary with all available captcha implementations."""\n     terms = []\n-    terms.append(SimpleTerm(value="disabled", token="disabled", title=_(u"Disabled")))\n+    terms.append(SimpleTerm(value="disabled", token="disabled", title=_("Disabled")))\n \n     if HAS_CAPTCHA:  # pragma: no cover\n         terms.append(SimpleTerm(value="captcha", token="captcha", title="Captcha"))\ndiff --git a/setup.py b/setup.py\nindex ab0134b7..fbc46391 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,5 +1,3 @@\n-# encoding: utf-8\n-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-05-01T23:28:00+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.discussion/commit/19571f45ed62a5df96d0fad826ba59c80b4e1418

remove six plus some bbb cleanup

Files changed:
M plone/app/discussion/browser/comments.py
M plone/app/discussion/catalog.py
M plone/app/discussion/comment.py
M plone/app/discussion/conversation.py
M plone/app/discussion/tests/test_comment.py
M plone/app/discussion/tests/test_conversation.py
M setup.py

b'diff --git a/plone/app/discussion/browser/comments.py b/plone/app/discussion/browser/comments.py\nindex 817ad221..0ab018ff 100644\n--- a/plone/app/discussion/browser/comments.py\n+++ b/plone/app/discussion/browser/comments.py\n@@ -19,7 +19,7 @@\n from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n-from six.moves.urllib.parse import quote\n+from urllib.parse import quote\n from z3c.form import button\n from z3c.form import field\n from z3c.form import form\ndiff --git a/plone/app/discussion/catalog.py b/plone/app/discussion/catalog.py\nindex 0da596ef..91b683df 100644\n--- a/plone/app/discussion/catalog.py\n+++ b/plone/app/discussion/catalog.py\n@@ -12,8 +12,6 @@\n from Products.CMFPlone.utils import safe_unicode\n from Products.ZCatalog.interfaces import IZCatalog\n \n-import six\n-\n \n MAX_DESCRIPTION = 25\n \n@@ -75,8 +73,6 @@ def creator(object):\n     if not object.creator:\n         return\n     value = safe_unicode(object.creator)\n-    if six.PY2:\n-        return value.encode("utf8")\n     return value\n \n \ndiff --git a/plone/app/discussion/comment.py b/plone/app/discussion/comment.py\nindex 4e515b8d..a2bef65d 100644\n--- a/plone/app/discussion/comment.py\n+++ b/plone/app/discussion/comment.py\n@@ -39,7 +39,6 @@\n from zope.interface import implementer\n \n import logging\n-import six\n \n \n COMMENT_TITLE = _(\n@@ -161,8 +160,6 @@ def getText(self, targetMimetype=None):\n         text = self.text\n         if text is None:\n             return ""\n-        if six.PY2 and isinstance(text, str):\n-            text = text.encode("utf8")\n         transform = transforms.convertTo(\n             targetMimetype, text, context=self, mimetype=sourceMimetype\n         )\ndiff --git a/plone/app/discussion/conversation.py b/plone/app/discussion/conversation.py\nindex e42cc41e..8af1b71c 100644\n--- a/plone/app/discussion/conversation.py\n+++ b/plone/app/discussion/conversation.py\n@@ -36,7 +36,6 @@\n from zope.lifecycleevent import ObjectCreatedEvent\n from zope.lifecycleevent import ObjectRemovedEvent\n \n-import six\n import time\n \n \ndiff --git a/plone/app/discussion/tests/test_comment.py b/plone/app/discussion/tests/test_comment.py\nindex 3d16fea6..17bcb648 100644\n--- a/plone/app/discussion/tests/test_comment.py\n+++ b/plone/app/discussion/tests/test_comment.py\n@@ -2,9 +2,7 @@\n from plone.app.discussion.interfaces import IComment\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IReplies\n-from plone.app.discussion.testing import (  # noqa\n-    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n-)\n+from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from Products.CMFCore.utils import getToolByName\n@@ -13,7 +11,6 @@\n \n import datetime\n import logging\n-import six\n import unittest\n \n \ndiff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex c749f530..9cbfbc8a 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -7,12 +7,11 @@\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IDiscussionSettings\n from plone.app.discussion.interfaces import IReplies\n-from plone.app.discussion.testing import (  # noqa\n-    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n-)\n+from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.vocabularies.types import BAD_TYPES\n+from plone.dexterity.interfaces import IDexterityContent\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from zope import interface\n@@ -20,18 +19,9 @@\n from zope.component import createObject\n from zope.component import queryUtility\n \n-import six\n import unittest\n \n \n-try:\n-    from plone.dexterity.interfaces import IDexterityContent\n-\n-    DEXTERITY = True\n-except ImportError:\n-    DEXTERITY = False\n-\n-\n class ConversationTest(unittest.TestCase):\n \n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n@@ -688,11 +678,10 @@ def setUp(self):\n             interfaces.IDiscussionLayer,\n         )\n \n-        if DEXTERITY:\n-            interface.alsoProvides(\n-                self.portal.doc1,\n-                IDexterityContent,\n-            )\n+        interface.alsoProvides(\n+            self.portal.doc1,\n+            IDexterityContent,\n+        )\n \n     def _makeOne(self, *args, **kw):\n         return self.portal.doc1.restrictedTraverse("@@conversation_view")\n@@ -708,38 +697,33 @@ def _enable_discussion_on_portal_type(self, portal_type, allow_discussion):\n         document_fti.manage_changeProperties(allow_discussion=allow_discussion)\n \n     def test_conversation_is_not_enabled_by_default(self):\n-        if DEXTERITY:\n-            conversation = self._makeOne(self.portal.doc1)\n-            self.assertFalse(conversation.enabled())\n+        conversation = self._makeOne(self.portal.doc1)\n+        self.assertFalse(conversation.enabled())\n \n     def test_conversation_is_not_enabled_by_default_on_portal_type(self):\n-        if DEXTERITY:\n-            self._globally_enable_discussion(True)\n-            conversation = self._makeOne(self.portal.doc1)\n-            self.assertFalse(conversation.enabled())\n+        self._globally_enable_discussion(True)\n+        conversation = self._makeOne(self.portal.doc1)\n+        self.assertFalse(conversation.enabled())\n \n     def test_conversation_needs_to_be_enabled_globally_and_for_type(self):\n-        if DEXTERITY:\n-            self._globally_enable_discussion(True)\n-            self._enable_discussion_on_portal_type("Document", True)\n-            conversation = self._makeOne(self.portal.doc1)\n-            self.assertTrue(conversation.enabled())\n+        self._globally_enable_discussion(True)\n+        self._enable_discussion_on_portal_type("Document", True)\n+        conversation = self._makeOne(self.portal.doc1)\n+        self.assertTrue(conversation.enabled())\n \n     def test_disable_discussion(self):\n-        if DEXTERITY:\n-            self._globally_enable_discussion(True)\n-            self._enable_discussion_on_portal_type("Document", True)\n-            self.portal.doc1.allow_discussion = False\n-            conversation = self._makeOne(self.portal.doc1)\n-            self.assertFalse(conversation.enabled())\n+        self._globally_enable_discussion(True)\n+        self._enable_discussion_on_portal_type("Document", True)\n+        self.portal.doc1.allow_discussion = False\n+        conversation = self._makeOne(self.portal.doc1)\n+        self.assertFalse(conversation.enabled())\n \n     def test_enable_discussion(self):\n-        if DEXTERITY:\n-            self._globally_enable_discussion(True)\n-            self._enable_discussion_on_portal_type("Document", True)\n-            self.portal.doc1.allow_discussion = True\n-            conversation = self._makeOne(self.portal.doc1)\n-            self.assertTrue(conversation.enabled())\n+        self._globally_enable_discussion(True)\n+        self._enable_discussion_on_portal_type("Document", True)\n+        self.portal.doc1.allow_discussion = True\n+        conversation = self._makeOne(self.portal.doc1)\n+        self.assertTrue(conversation.enabled())\n \n \n class RepliesTest(unittest.TestCase):\ndiff --git a/setup.py b/setup.py\nindex fbc46391..3b2c6293 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -10,18 +10,9 @@\n     "plone.app.registry",\n     "plone.app.uuid",\n     "plone.app.z3cform",\n+    "plone.base",\n     "plone.indexer",\n-    "plone.registry",\n     "plone.z3cform",\n-    "six",\n-    "ZODB3",\n-    "zope.interface",\n-    "zope.component",\n-    "zope.annotation",\n-    "zope.event",\n-    "zope.container",\n-    "zope.lifecycleevent",\n-    "zope.site",\n     "z3c.form>=2.3.3",\n ]\n \n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-05-02T00:39:34+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.discussion/commit/f443deacbd81922717549ad045ee45407299c11d

use plone.base and remove dependencies to CMFPlone

Files changed:
M plone/app/discussion/browser/comments.py
M plone/app/discussion/browser/configure.zcml
M plone/app/discussion/browser/controlpanel.py
M plone/app/discussion/browser/conversation.py
M plone/app/discussion/catalog.py
M plone/app/discussion/comment.py
M plone/app/discussion/configure.zcml
M plone/app/discussion/conversation.py
M plone/app/discussion/interfaces.py
M plone/app/discussion/subscribers.zcml
M plone/app/discussion/tests/test_comments_viewlet.py
M plone/app/discussion/tests/test_conversation.py
M plone/app/discussion/tests/test_events.py
M plone/app/discussion/tests/test_functional.py
M plone/app/discussion/tests/test_indexers.py
M plone/app/discussion/tests/test_moderation_multiple_state_view.py
M plone/app/discussion/tests/test_moderation_view.py
M plone/app/discussion/tests/test_notifications.py
M plone/app/discussion/tests/test_robot.py
M plone/app/discussion/tests/test_workflow.py

b'diff --git a/plone/app/discussion/browser/comments.py b/plone/app/discussion/browser/comments.py\nindex 0ab018ff..387ceadf 100644\n--- a/plone/app/discussion/browser/comments.py\n+++ b/plone/app/discussion/browser/comments.py\n@@ -11,12 +11,12 @@\n from plone.app.discussion.interfaces import IDiscussionSettings\n from plone.app.discussion.interfaces import IReplies\n from plone.app.layout.viewlets.common import ViewletBase\n+from plone.base.utils import safe_text\n from plone.registry.interfaces import IRegistry\n from plone.z3cform import z2\n from plone.z3cform.fieldsets import extensible\n from plone.z3cform.interfaces import IWrappedForm\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n from urllib.parse import quote\n@@ -151,9 +151,9 @@ def get_author(self, data):\n \n         # Make sure author_name/ author_email is properly encoded\n         if "author_name" in data:\n-            author_name = safe_unicode(data["author_name"])\n+            author_name = safe_text(data["author_name"])\n         if "author_email" in data:\n-            author_email = safe_unicode(data["author_email"])\n+            author_email = safe_text(data["author_email"])\n \n         # Set comment author properties for anonymous users or members\n         portal_membership = getToolByName(context, "portal_membership")\n@@ -161,13 +161,13 @@ def get_author(self, data):\n         if not anon and getSecurityManager().checkPermission("Reply to item", context):\n             # Member\n             member = portal_membership.getAuthenticatedMember()\n-            email = safe_unicode(member.getProperty("email"))\n+            email = safe_text(member.getProperty("email"))\n             fullname = member.getProperty("fullname")\n             if not fullname or fullname == "":\n                 fullname = member.getUserName()\n-            fullname = safe_unicode(fullname)\n+            fullname = safe_text(fullname)\n             author_name = fullname\n-            email = safe_unicode(email)\n+            email = safe_text(email)\n             # XXX: according to IComment interface author_email must not be  # noqa T000\n             # set for logged in users, cite:\n             # \'for anonymous comments only, set to None for logged in comments\'\ndiff --git a/plone/app/discussion/browser/configure.zcml b/plone/app/discussion/browser/configure.zcml\nindex 63f80a45..0892259a 100644\n--- a/plone/app/discussion/browser/configure.zcml\n+++ b/plone/app/discussion/browser/configure.zcml\n@@ -48,7 +48,7 @@\n \n     <!-- Moderate comments enabled view -->\n     <browser:page\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+        for="plone.base.interfaces.IPloneSiteRoot"\n         name="moderate-comments-enabled"\n         layer="..interfaces.IDiscussionLayer"\n         class=".moderation.ModerateCommentsEnabled"\n@@ -141,14 +141,14 @@\n     <!-- Control panel -->\n     <browser:page\n         name="discussion-controlpanel"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+        for="plone.base.interfaces.IPloneSiteRoot"\n         class=".controlpanel.DiscussionSettingsControlPanel"\n         permission="cmf.ManagePortal"\n         />\n     <!-- Deprecated controlpanel url -->\n     <browser:page\n         name="discussion-settings"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+        for="plone.base.interfaces.IPloneSiteRoot"\n         class=".controlpanel.DiscussionSettingsControlPanel"\n         permission="cmf.ManagePortal"\n         />\ndiff --git a/plone/app/discussion/browser/controlpanel.py b/plone/app/discussion/browser/controlpanel.py\nindex f359c481..b9a3e23b 100644\n--- a/plone/app/discussion/browser/controlpanel.py\n+++ b/plone/app/discussion/browser/controlpanel.py\n@@ -1,11 +1,12 @@\n-from plone.app.discussion.interfaces import _\n-from plone.app.discussion.interfaces import IDiscussionSettings\n-from plone.app.discussion.upgrades import update_registry\n+from ..interfaces import _\n+from ..interfaces import IDiscussionSettings\n+from ..upgrades import update_registry\n from plone.app.registry.browser import controlpanel\n+from plone.base.interfaces.controlpanel import IConfigurationChangedEvent\n+from plone.base.interfaces.controlpanel import IMailSchema\n from plone.registry.interfaces import IRecordModifiedEvent\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n from z3c.form import button\n@@ -16,16 +17,6 @@\n from zope.component.hooks import getSite\n \n \n-# try/except was added because Configuration Changed Event was moved inside the\n-# controlpanel file in the PR #2495 on Products.CMFPlone\n-try:\n-    from Products.CMFPlone.interfaces.controlpanel import (  # noqa: E501\n-        IConfigurationChangedEvent,\n-    )\n-except ImportError:\n-    from Products.CMFPlone.interfaces import IConfigurationChangedEvent\n-\n-\n class DiscussionSettingsEditForm(controlpanel.RegistryEditForm):\n     """Discussion settings form."""\n \ndiff --git a/plone/app/discussion/browser/conversation.py b/plone/app/discussion/browser/conversation.py\nindex f2356c8c..ac0c9326 100644\n--- a/plone/app/discussion/browser/conversation.py\n+++ b/plone/app/discussion/browser/conversation.py\n@@ -1,13 +1,13 @@\n+from ..interfaces import IDiscussionSettings\n from Acquisition import aq_base\n from Acquisition import aq_chain\n from Acquisition import aq_inner\n-from plone.app.discussion.interfaces import IDiscussionSettings\n+from plone.base.interfaces import INonStructuralFolder\n+from plone.base.interfaces import IPloneSiteRoot\n+from plone.base.utils import safe_hasattr\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import IFolderish\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import INonStructuralFolder\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n-from Products.CMFPlone.utils import safe_hasattr\n from zope.component import queryUtility\n \n \ndiff --git a/plone/app/discussion/catalog.py b/plone/app/discussion/catalog.py\nindex 91b683df..6413d114 100644\n--- a/plone/app/discussion/catalog.py\n+++ b/plone/app/discussion/catalog.py\n@@ -6,10 +6,10 @@\n from DateTime import DateTime\n from plone.app.discussion.interfaces import IComment\n from plone.app.discussion.interfaces import IConversation\n+from plone.base.utils import safe_text\n from plone.indexer import indexer\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.interfaces import IContentish\n-from Products.CMFPlone.utils import safe_unicode\n from Products.ZCatalog.interfaces import IZCatalog\n \n \n@@ -72,7 +72,7 @@ def title(object):\n def creator(object):\n     if not object.creator:\n         return\n-    value = safe_unicode(object.creator)\n+    value = safe_text(object.creator)\n     return value\n \n \ndiff --git a/plone/app/discussion/comment.py b/plone/app/discussion/comment.py\nindex a2bef65d..438e7266 100644\n--- a/plone/app/discussion/comment.py\n+++ b/plone/app/discussion/comment.py\n@@ -20,14 +20,14 @@\n from plone.app.discussion.interfaces import IComment\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IDiscussionSettings\n+from plone.base.interfaces.controlpanel import IMailSchema\n+from plone.base.utils import safe_text\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore import permissions\n from Products.CMFCore.CMFCatalogAware import CatalogAware\n from Products.CMFCore.CMFCatalogAware import WorkflowAware\n from Products.CMFCore.DynamicType import DynamicType\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n-from Products.CMFPlone.utils import safe_unicode\n from smtplib import SMTPException\n from zope.annotation.interfaces import IAnnotatable\n from zope.component import getUtility\n@@ -205,8 +205,8 @@ def Title(self):\n             Message(\n                 COMMENT_TITLE,\n                 mapping={\n-                    "author_name": safe_unicode(author_name),\n-                    "content": safe_unicode(content.Title()),\n+                    "author_name": safe_text(author_name),\n+                    "content": safe_text(content.Title()),\n                 },\n             )\n         )\n@@ -374,7 +374,7 @@ def notify_user(obj, event):\n         Message(\n             MAIL_NOTIFICATION_MESSAGE,\n             mapping={\n-                "title": safe_unicode(content_object.title),\n+                "title": safe_text(content_object.title),\n                 "link": content_object.absolute_url() + "/view#" + obj.id,\n                 "text": obj.text,\n             },\n@@ -442,7 +442,7 @@ def notify_moderator(obj, event):\n         Message(\n             MAIL_NOTIFICATION_MESSAGE_MODERATOR,\n             mapping={\n-                "title": safe_unicode(content_object.title),\n+                "title": safe_text(content_object.title),\n                 "link": content_object.absolute_url() + "/view#" + obj.id,\n                 "text": obj.text,\n                 "commentator": obj.author_email\ndiff --git a/plone/app/discussion/configure.zcml b/plone/app/discussion/configure.zcml\nindex aabd851d..fb72ceef 100644\n--- a/plone/app/discussion/configure.zcml\n+++ b/plone/app/discussion/configure.zcml\n@@ -39,7 +39,7 @@\n         description="Commenting infrastructure for Plone"\n         directory="profiles/default"\n         provides="Products.GenericSetup.interfaces.EXTENSION"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+        for="plone.base.interfaces.IPloneSiteRoot"\n         />\n     <!-- For upgrade steps see upgrades.zcml. -->\n \ndiff --git a/plone/app/discussion/conversation.py b/plone/app/discussion/conversation.py\nindex 8af1b71c..1cdb2663 100644\n--- a/plone/app/discussion/conversation.py\n+++ b/plone/app/discussion/conversation.py\n@@ -9,6 +9,10 @@\n manipulating the comments directly in reply to a particular comment or at the\n top level of the conversation.\n """\n+from .comment import Comment\n+from .interfaces import DISCUSSION_ANNOTATION_KEY as ANNOTATION_KEY\n+from .interfaces import IConversation\n+from .interfaces import IReplies\n from AccessControl.SpecialUsers import nobody as user_nobody\n from Acquisition import aq_base\n from Acquisition import aq_inner\n@@ -21,11 +25,7 @@\n from OFS.event import ObjectWillBeRemovedEvent\n from OFS.Traversable import Traversable\n from persistent import Persistent\n-from plone.app.discussion.comment import Comment\n-from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.interfaces import IReplies\n-from Products.CMFPlone import DISCUSSION_ANNOTATION_KEY as ANNOTATION_KEY\n-from Products.CMFPlone.interfaces import IHideFromBreadcrumbs\n+from plone.base.interfaces import IHideFromBreadcrumbs\n from zope.annotation.interfaces import IAnnotatable\n from zope.annotation.interfaces import IAnnotations\n from zope.component import adapter\ndiff --git a/plone/app/discussion/interfaces.py b/plone/app/discussion/interfaces.py\nindex 1f35487c..e53628d8 100644\n--- a/plone/app/discussion/interfaces.py\n+++ b/plone/app/discussion/interfaces.py\n@@ -11,6 +11,9 @@\n from zope.interface.interfaces import IObjectEvent\n \n \n+DISCUSSION_ANNOTATION_KEY = "plone.app.discussion:conversation"\n+\n+\n def isEmail(value):\n     portal = getUtility(ISiteRoot)\n     reg_tool = getToolByName(portal, "portal_registration")\ndiff --git a/plone/app/discussion/subscribers.zcml b/plone/app/discussion/subscribers.zcml\nindex 85e74e2a..a797741b 100644\n--- a/plone/app/discussion/subscribers.zcml\n+++ b/plone/app/discussion/subscribers.zcml\n@@ -72,7 +72,7 @@\n     <!-- Control panel event subscribers -->\n \n     <subscriber\n-        for="Products.CMFPlone.interfaces.events.IConfigurationChangedEvent"\n+        for="plone.base.interfaces.events.IConfigurationChangedEvent"\n         handler=".browser.controlpanel.notify_configuration_changed"\n         />\n \ndiff --git a/plone/app/discussion/tests/test_comments_viewlet.py b/plone/app/discussion/tests/test_comments_viewlet.py\nindex 020dfc01..e1683783 100644\n--- a/plone/app/discussion/tests/test_comments_viewlet.py\n+++ b/plone/app/discussion/tests/test_comments_viewlet.py\n@@ -1,15 +1,13 @@\n+from .. import interfaces\n+from ..browser.comment import EditCommentForm\n+from ..browser.comments import CommentForm\n+from ..browser.comments import CommentsViewlet\n+from ..interfaces import IConversation\n+from ..interfaces import IDiscussionSettings\n+from ..testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n from AccessControl import Unauthorized\n from datetime import datetime\n from OFS.Image import Image\n-from plone.app.discussion import interfaces\n-from plone.app.discussion.browser.comment import EditCommentForm\n-from plone.app.discussion.browser.comments import CommentForm\n-from plone.app.discussion.browser.comments import CommentsViewlet\n-from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.interfaces import IDiscussionSettings\n-from plone.app.discussion.testing import (  # noqa\n-    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n-)\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n@@ -17,7 +15,6 @@\n from plone.app.testing import TEST_USER_NAME\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.tests import dummy\n from z3c.form.interfaces import IFormLayer\n from zope import interface\n from zope.annotation.interfaces import IAttributeAnnotatable\n@@ -29,9 +26,43 @@\n from zope.interface import Interface\n from zope.publisher.browser import TestRequest\n from zope.publisher.interfaces.browser import IBrowserRequest\n+from ZPublisher.HTTPRequest import FileUpload\n \n import time\n import unittest\n+import io\n+\n+\n+TEXT = b"file data"\n+\n+\n+class DummyFile(FileUpload):\n+    """Dummy upload object\n+    Used to fake uploaded files.\n+    """\n+\n+    __allow_access_to_unprotected_subobjects__ = 1\n+    filename = "dummy.txt"\n+    data = TEXT\n+    headers = {}\n+\n+    def __init__(self, filename=None, data=None, headers=None):\n+        if filename is not None:\n+            self.filename = filename\n+        if data is not None:\n+            self.data = data\n+        if headers is not None:\n+            self.headers = headers\n+        self.file = io.BytesIO(self.data)\n+\n+    def seek(self, *args):\n+        pass\n+\n+    def tell(self, *args):\n+        return 1\n+\n+    def read(self, *args):\n+        return self.data\n \n \n class TestCommentForm(unittest.TestCase):\n@@ -631,7 +662,7 @@ def test_get_commenter_portrait(self):\n         self.memberdata._setPortrait(\n             Image(\n                 id="jim",\n-                file=dummy.File(),\n+                file=DummyFile(),\n                 title="",\n             ),\n             "jim",\ndiff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex 9cbfbc8a..febce286 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -1,13 +1,13 @@\n+from ..interfaces import IComment\n+from ..interfaces import IConversation\n+from ..interfaces import IDiscussionLayer\n+from ..interfaces import IDiscussionSettings\n+from ..interfaces import IReplies\n+from ..testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n from Acquisition import aq_base\n from Acquisition import aq_parent\n from datetime import datetime\n from datetime import timedelta\n-from plone.app.discussion import interfaces\n-from plone.app.discussion.interfaces import IComment\n-from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.interfaces import IDiscussionSettings\n-from plone.app.discussion.interfaces import IReplies\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.vocabularies.types import BAD_TYPES\n@@ -29,7 +29,7 @@ class ConversationTest(unittest.TestCase):\n     def setUp(self):\n         self.portal = self.layer["portal"]\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n-        interface.alsoProvides(self.portal.REQUEST, interfaces.IDiscussionLayer)\n+        interface.alsoProvides(self.portal.REQUEST, IDiscussionLayer)\n \n         self.typetool = self.portal.portal_types\n         self.portal_discussion = getToolByName(\n@@ -675,7 +675,7 @@ def setUp(self):\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         interface.alsoProvides(\n             self.portal.REQUEST,\n-            interfaces.IDiscussionLayer,\n+            IDiscussionLayer,\n         )\n \n         interface.alsoProvides(\ndiff --git a/plone/app/discussion/tests/test_events.py b/plone/app/discussion/tests/test_events.py\nindex 175af1c7..a6cc1cdb 100644\n--- a/plone/app/discussion/tests/test_events.py\n+++ b/plone/app/discussion/tests/test_events.py\n@@ -1,8 +1,6 @@\n-from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.interfaces import IReplies\n-from plone.app.discussion.testing import (  # noqa\n-    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n-)\n+from ..interfaces import IConversation\n+from ..interfaces import IReplies\n+from ..testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from Zope2.App import zcml\ndiff --git a/plone/app/discussion/tests/test_functional.py b/plone/app/discussion/tests/test_functional.py\nindex f5f1181b..995016ed 100644\n--- a/plone/app/discussion/tests/test_functional.py\n+++ b/plone/app/discussion/tests/test_functional.py\n@@ -2,7 +2,7 @@\n \n    These test are only triggered when Plone 4 (and plone.testing) is installed.\n """\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_FUNCTIONAL_TESTING  # noqa\n+from ..testing import PLONE_APP_DISCUSSION_FUNCTIONAL_TESTING  # noqa\n from plone.testing import layered\n \n import doctest\ndiff --git a/plone/app/discussion/tests/test_indexers.py b/plone/app/discussion/tests/test_indexers.py\nindex 0581576a..b1b30f1e 100644\n--- a/plone/app/discussion/tests/test_indexers.py\n+++ b/plone/app/discussion/tests/test_indexers.py\n@@ -1,12 +1,10 @@\n """Test for the plone.app.discussion indexers\n """\n+from .. import catalog\n+from ..interfaces import IConversation\n+from ..testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n from datetime import datetime\n from DateTime import DateTime\n-from plone.app.discussion import catalog\n-from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.testing import (  # noqa\n-    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n-)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.indexer.delegate import DelegatingIndexerFactory\ndiff --git a/plone/app/discussion/tests/test_moderation_multiple_state_view.py b/plone/app/discussion/tests/test_moderation_multiple_state_view.py\nindex 2247c6f1..6a12a721 100644\n--- a/plone/app/discussion/tests/test_moderation_multiple_state_view.py\n+++ b/plone/app/discussion/tests/test_moderation_multiple_state_view.py\n@@ -1,12 +1,10 @@\n-from plone.app.discussion.browser.moderation import BulkActionsView\n-from plone.app.discussion.browser.moderation import CommentTransition\n-from plone.app.discussion.browser.moderation import DeleteComment\n-from plone.app.discussion.browser.moderation import View\n-from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.interfaces import IDiscussionSettings\n-from plone.app.discussion.testing import (  # noqa\n-    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n-)\n+from ..browser.moderation import BulkActionsView\n+from ..browser.moderation import CommentTransition\n+from ..browser.moderation import DeleteComment\n+from ..browser.moderation import View\n+from ..interfaces import IConversation\n+from ..interfaces import IDiscussionSettings\n+from ..testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.registry.interfaces import IRegistry\ndiff --git a/plone/app/discussion/tests/test_moderation_view.py b/plone/app/discussion/tests/test_moderation_view.py\nindex 54584041..639eaa35 100644\n--- a/plone/app/discussion/tests/test_moderation_view.py\n+++ b/plone/app/discussion/tests/test_moderation_view.py\n@@ -1,12 +1,10 @@\n-from plone.app.discussion.browser.moderation import BulkActionsView\n-from plone.app.discussion.browser.moderation import CommentTransition\n-from plone.app.discussion.browser.moderation import DeleteComment\n-from plone.app.discussion.browser.moderation import View\n-from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.interfaces import IDiscussionSettings\n-from plone.app.discussion.testing import (  # noqa\n-    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n-)\n+from ..browser.moderation import BulkActionsView\n+from ..browser.moderation import CommentTransition\n+from ..browser.moderation import DeleteComment\n+from ..browser.moderation import View\n+from ..interfaces import IConversation\n+from ..interfaces import IDiscussionSettings\n+from ..testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.registry.interfaces import IRegistry\ndiff --git a/plone/app/discussion/tests/test_notifications.py b/plone/app/discussion/tests/test_notifications.py\nindex fdf326ff..17e628a7 100644\n--- a/plone/app/discussion/tests/test_notifications.py\n+++ b/plone/app/discussion/tests/test_notifications.py\n@@ -1,14 +1,14 @@\n+from ..interfaces import IConversation\n+from ..testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n from Acquisition import aq_base\n-from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.testing import (  # noqa\n-    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n-)\n+from persistent.list import PersistentList\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.base.interfaces import IMailSchema\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import IMailSchema\n-from Products.CMFPlone.tests.utils import MockMailHost\n from Products.MailHost.interfaces import IMailHost\n+from Products.MailHost.MailHost import _mungeHeaders\n+from Products.MailHost.MailHost import MailBase\n from zope.component import createObject\n from zope.component import getSiteManager\n from zope.component import getUtility\n@@ -17,6 +17,42 @@\n import unittest\n \n \n+class MockMailHost(MailBase):\n+    """A MailHost that collects messages instead of sending them."""\n+\n+    def __init__(self, id):\n+        self.reset()\n+\n+    def reset(self):\n+        self.messages = PersistentList()\n+\n+    def _send(self, mfrom, mto, messageText, immediate=False):\n+        """Send the message"""\n+        self.messages.append(messageText)\n+\n+    def send(\n+        self,\n+        messageText,\n+        mto=None,\n+        mfrom=None,\n+        subject=None,\n+        encode=None,\n+        immediate=False,\n+        charset=None,\n+        msg_type=None,\n+    ):\n+        """send *messageText* modified by the other parameters.\n+\n+        *messageText* can either be an ``email.message.Message``\n+        or a string.\n+        Note that Products.MailHost 4.10 had changes here.\n+        """\n+        msg, mto, mfrom = _mungeHeaders(\n+            messageText, mto, mfrom, subject, charset, msg_type, encode\n+        )\n+        self.messages.append(msg)\n+\n+\n class TestUserNotificationUnit(unittest.TestCase):\n \n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\ndiff --git a/plone/app/discussion/tests/test_robot.py b/plone/app/discussion/tests/test_robot.py\nindex e6487d5a..c6266893 100644\n--- a/plone/app/discussion/tests/test_robot.py\n+++ b/plone/app/discussion/tests/test_robot.py\n@@ -1,4 +1,4 @@\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_ROBOT_TESTING\n+from ..testing import PLONE_APP_DISCUSSION_ROBOT_TESTING\n from plone.app.testing import ROBOT_TEST_LEVEL\n from plone.testing import layered\n \ndiff --git a/plone/app/discussion/tests/test_workflow.py b/plone/app/discussion/tests/test_workflow.py\nindex 5667f001..ece7d8ac 100644\n--- a/plone/app/discussion/tests/test_workflow.py\n+++ b/plone/app/discussion/tests/test_workflow.py\n@@ -1,11 +1,9 @@\n """Test plone.app.discussion workflow and permissions.\n """\n+from ..interfaces import IConversation\n+from ..interfaces import IDiscussionLayer\n+from ..testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n from AccessControl import Unauthorized\n-from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.interfaces import IDiscussionLayer\n-from plone.app.discussion.testing import (  # noqa\n-    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n-)\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-05-02T00:43:21+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.discussion/commit/bcb93157724d8044998853ab3a1f2a50ea99dda2

add newsfile

Files changed:
A news/195.breaking
M plone/app/discussion/tests/test_comments_viewlet.py

b'diff --git a/news/195.breaking b/news/195.breaking\nnew file mode 100644\nindex 00000000..41d8e37a\n--- /dev/null\n+++ b/news/195.breaking\n@@ -0,0 +1,2 @@\n+Code style black & isort. Remove six usage. Use plone.base and move annotation key over to here.\n+[jensens]\ndiff --git a/plone/app/discussion/tests/test_comments_viewlet.py b/plone/app/discussion/tests/test_comments_viewlet.py\nindex e1683783..54a18bd5 100644\n--- a/plone/app/discussion/tests/test_comments_viewlet.py\n+++ b/plone/app/discussion/tests/test_comments_viewlet.py\n@@ -28,9 +28,9 @@\n from zope.publisher.interfaces.browser import IBrowserRequest\n from ZPublisher.HTTPRequest import FileUpload\n \n+import io\n import time\n import unittest\n-import io\n \n \n TEXT = b"file data"\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-05-02T17:12:04+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.discussion/commit/e81e26c02b090da36dd80a7aace69ee39d6e7e99

Removed a few more unicode literals.

Files changed:
M docs/source/howtos/howto_extend_the_comment_form.txt
M docs/source/howtos/howto_make_pad_work_with_a_dexterity_content_type.txt
M plone/app/discussion/tests/functional_test_comment_review_workflow.txt
M plone/app/discussion/tests/test_notifications.py

b'diff --git a/docs/source/howtos/howto_extend_the_comment_form.txt b/docs/source/howtos/howto_extend_the_comment_form.txt\nindex 605e0efb..3afaf6a6 100644\n--- a/docs/source/howtos/howto_extend_the_comment_form.txt\n+++ b/docs/source/howtos/howto_extend_the_comment_form.txt\n@@ -58,13 +58,13 @@ comment form with the "website" field::\n \n     # Interface to define the fields we want to add to the comment form.\n     class ICommentExtenderFields(Interface):\n-        website = schema.TextLine(title=u"Website", required=False)\n+        website = schema.TextLine(title="Website", required=False)\n \n     # Persistent class that implements the ICommentExtenderFields interface\n     @adapter(Comment)\n     class CommentExtenderFields(Persistent):\n         interface.implements(ICommentExtenderFields)\n-        website = u""\n+        website = ""\n \n     # CommentExtenderFields factory\n     CommentExtenderFactory = factory(CommentExtenderFields)\ndiff --git a/docs/source/howtos/howto_make_pad_work_with_a_dexterity_content_type.txt b/docs/source/howtos/howto_make_pad_work_with_a_dexterity_content_type.txt\nindex b1346484..84610b37 100644\n--- a/docs/source/howtos/howto_make_pad_work_with_a_dexterity_content_type.txt\n+++ b/docs/source/howtos/howto_make_pad_work_with_a_dexterity_content_type.txt\n@@ -20,8 +20,8 @@ configure.zcml::\n Define an interface IMyDexterityContentType groked schema, I added::\n \n         allowDiscussion  = schema.Bool(\n-            title=_(u"Allow Users to Comment"),\n-            description=_(u"Allow users to commemt on you.  Comments\n+            title=_("Allow Users to Comment"),\n+            description=_("Allow users to comment on you.  Comments\n are shown at the end of each page"),\n             required=True,\n             default=True,\ndiff --git a/plone/app/discussion/tests/functional_test_comment_review_workflow.txt b/plone/app/discussion/tests/functional_test_comment_review_workflow.txt\nindex 84d384ff..099ce9fb 100644\n--- a/plone/app/discussion/tests/functional_test_comment_review_workflow.txt\n+++ b/plone/app/discussion/tests/functional_test_comment_review_workflow.txt\n@@ -252,7 +252,7 @@ Now we can post an anonymous comment.\n \n     >>> unprivileged_browser.open(urldoc)\n     >>> unprivileged_browser.getControl(name=\'form.widgets.text\').value = "This is an anonymous comment"\n-    >>> unprivileged_browser.getControl(name=\'form.widgets.author_name\').value = u\'John\'\n+    >>> unprivileged_browser.getControl(name=\'form.widgets.author_name\').value = \'John\'\n     >>> unprivileged_browser.getControl(name=\'form.widgets.author_email\').value = \'john@acme.com\'\n     >>> unprivileged_browser.getControl(name=\'form.buttons.comment\').click()\n \ndiff --git a/plone/app/discussion/tests/test_notifications.py b/plone/app/discussion/tests/test_notifications.py\nindex 17e628a7..305c90ed 100644\n--- a/plone/app/discussion/tests/test_notifications.py\n+++ b/plone/app/discussion/tests/test_notifications.py\n@@ -77,8 +77,6 @@ def setUp(self):\n             "plone.app.discussion.interfaces.IDiscussionSettings"\n             + ".user_notification_enabled"\n         ] = True\n-        # Archetypes content types store data as utf-8 encoded strings\n-        # The missing u in front of a string is therefor not missing\n         self.portal.doc1.title = "K\xc3\xb6lle Alaaf"  # What is \'Fasching\'?\n         self.conversation = IConversation(self.portal.doc1)\n \n@@ -220,8 +218,6 @@ def setUp(self):\n             "plone.app.discussion.interfaces.IDiscussionSettings."\n             + "moderator_notification_enabled"\n         ] = True\n-        # Archetypes content types store data as utf-8 encoded strings\n-        # The missing u in front of a string is therefor not missing\n         self.portal.doc1.title = "K\xc3\xb6lle Alaaf"  # What is \'Fasching\'?\n         self.conversation = IConversation(self.portal.doc1)\n \n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2022-05-03T15:10:38+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.discussion/commit/fe10c7448f408adfafab51c6a431a8499dc25a3a

Merge pull request #195 from plone/plone-base-overhaul

Plone base overhaul

Files changed:
A news/195.breaking
M docs/source/conf.py
M docs/source/howtos/howto_extend_the_comment_form.txt
M docs/source/howtos/howto_make_pad_work_with_a_dexterity_content_type.txt
M plone/__init__.py
M plone/app/__init__.py
M plone/app/discussion/__init__.py
M plone/app/discussion/browser/captcha.py
M plone/app/discussion/browser/comment.py
M plone/app/discussion/browser/comments.py
M plone/app/discussion/browser/configure.zcml
M plone/app/discussion/browser/controlpanel.py
M plone/app/discussion/browser/conversation.py
M plone/app/discussion/browser/moderation.py
M plone/app/discussion/browser/traversal.py
M plone/app/discussion/browser/validator.py
M plone/app/discussion/catalog.py
M plone/app/discussion/comment.py
M plone/app/discussion/configure.zcml
M plone/app/discussion/contentrules.py
M plone/app/discussion/conversation.py
M plone/app/discussion/events.py
M plone/app/discussion/interfaces.py
M plone/app/discussion/subscribers.py
M plone/app/discussion/subscribers.zcml
M plone/app/discussion/testing.py
M plone/app/discussion/tests/functional_test_comment_review_workflow.txt
M plone/app/discussion/tests/test_catalog.py
M plone/app/discussion/tests/test_comment.py
M plone/app/discussion/tests/test_comments_viewlet.py
M plone/app/discussion/tests/test_contentrules.py
M plone/app/discussion/tests/test_controlpanel.py
M plone/app/discussion/tests/test_conversation.py
M plone/app/discussion/tests/test_events.py
M plone/app/discussion/tests/test_functional.py
M plone/app/discussion/tests/test_indexers.py
M plone/app/discussion/tests/test_moderation_multiple_state_view.py
M plone/app/discussion/tests/test_moderation_view.py
M plone/app/discussion/tests/test_notifications.py
M plone/app/discussion/tests/test_robot.py
M plone/app/discussion/tests/test_workflow.py
M plone/app/discussion/tool.py
M plone/app/discussion/upgrades.py
M plone/app/discussion/vocabularies.py
M setup.cfg
M setup.py

b'diff --git a/docs/source/conf.py b/docs/source/conf.py\nindex 925d1314..b94ce2d8 100644\n--- a/docs/source/conf.py\n+++ b/docs/source/conf.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #\n # plone.app.discussion documentation build configuration file, created by\n # sphinx-quickstart on Thu Mar 18 10:17:15 2010.\n@@ -24,184 +23,190 @@\n \n # Add any Sphinx extension module names here, as strings. They can be\n # extensions coming with Sphinx (named \'sphinx.ext.*\') or your custom ones.\n-extensions = [\'sphinx.ext.autodoc\',\n-              \'sphinx.ext.doctest\',\n-              \'sphinx.ext.intersphinx\',\n-              \'sphinx.ext.todo\',\n-              \'sphinx.ext.coverage\',\n-              \'repoze.sphinx.autointerface\'\n-              ]\n+extensions = [\n+    "sphinx.ext.autodoc",\n+    "sphinx.ext.doctest",\n+    "sphinx.ext.intersphinx",\n+    "sphinx.ext.todo",\n+    "sphinx.ext.coverage",\n+    "repoze.sphinx.autointerface",\n+]\n \n \n # Add any paths that contain templates here, relative to this directory.\n-templates_path = [\'_templates\']\n+templates_path = ["_templates"]\n \n # The suffix of source filenames.\n-source_suffix = \'.txt\'\n+source_suffix = ".txt"\n \n # The encoding of source files.\n-#source_encoding = \'utf-8\'\n+# source_encoding = \'utf-8\'\n \n # The master toctree document.\n-master_doc = \'index\'\n+master_doc = "index"\n \n # General information about the project.\n-project = u\'plone.app.discussion\'\n-copyright = u\'2010, Timo Stollenwerk - Plone Foundation\'\n+project = "plone.app.discussion"\n+copyright = "2010, Timo Stollenwerk - Plone Foundation"\n \n # The version info for the project you\'re documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n # built documents.\n #\n # The short X.Y version.\n-version = \'2.0\'\n+version = "2.0"\n # The full version, including alpha/beta/rc tags.\n-release = \'2.0\'\n+release = "2.0"\n \n # The language for content autogenerated by Sphinx. Refer to documentation\n # for a list of supported languages.\n-#language = None\n+# language = None\n \n # There are two options for replacing |today|: either, you set today to some\n # non-false value, then it is used:\n-#today = \'\'\n+# today = \'\'\n # Else, today_fmt is used as the format for a strftime call.\n-#today_fmt = \'%B %d, %Y\'\n+# today_fmt = \'%B %d, %Y\'\n \n # List of documents that shouldn\'t be included in the build.\n-#unused_docs = []\n+# unused_docs = []\n \n # List of directories, relative to source directory, that shouldn\'t be searched\n # for source files.\n exclude_trees = []\n \n # The reST default role (used for this markup: `text`) to use for all documents.\n-#default_role = None\n+# default_role = None\n \n # If true, \'()\' will be appended to :func: etc. cross-reference text.\n-#add_function_parentheses = True\n+# add_function_parentheses = True\n \n # If true, the current module name will be prepended to all description\n # unit titles (such as .. function::).\n-#add_module_names = True\n+# add_module_names = True\n \n # If true, sectionauthor and moduleauthor directives will be shown in the\n # output. They are ignored by default.\n-#show_authors = False\n+# show_authors = False\n \n # The name of the Pygments (syntax highlighting) style to use.\n-pygments_style = \'sphinx\'\n+pygments_style = "sphinx"\n \n # A list of ignored prefixes for module index sorting.\n-#modindex_common_prefix = []\n+# modindex_common_prefix = []\n \n \n # -- Options for HTML output ---------------------------------------------\n \n # The theme to use for HTML and HTML Help pages.  Major themes that come with\n # Sphinx are currently \'default\' and \'sphinxdoc\'.\n-#html_theme = \'plone\'\n+# html_theme = \'plone\'\n \n # Theme options are theme-specific and customize the look and feel of a theme\n # further.  For a list of options available for each theme, see the\n # documentation.\n-#html_theme_options = {}\n+# html_theme_options = {}\n \n # Add any paths that contain custom themes here, relative to this directory.\n-html_theme_path = [\'_themes\']\n+html_theme_path = ["_themes"]\n \n # The name for this set of Sphinx documents.  If None, it defaults to\n # "<project> v<release> documentation".\n-#html_title = None\n+# html_title = None\n \n # A shorter title for the navigation bar.  Default is the same as html_title.\n-#html_short_title = None\n+# html_short_title = None\n \n # The name of an image file (relative to this directory) to place at the top\n # of the sidebar.\n-#html_logo = None\n+# html_logo = None\n \n # The name of an image file (within the static path) to use as favicon of the\n # docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n # pixels large.\n-#html_favicon = None\n+# html_favicon = None\n \n # Add any paths that contain custom static files (such as style sheets) here,\n # relative to this directory. They are copied after the builtin static files,\n # so a file named "default.css" will overwrite the builtin "default.css".\n-html_static_path = [\'_static\']\n+html_static_path = ["_static"]\n \n # If not \'\', a \'Last updated on:\' timestamp is inserted at every page bottom,\n # using the given strftime format.\n-#html_last_updated_fmt = \'%b %d, %Y\'\n+# html_last_updated_fmt = \'%b %d, %Y\'\n \n # If true, SmartyPants will be used to convert quotes and dashes to\n # typographically correct entities.\n-#html_use_smartypants = True\n+# html_use_smartypants = True\n \n # Custom sidebar templates, maps document names to template names.\n-#html_sidebars = {}\n+# html_sidebars = {}\n \n # Additional templates that should be rendered to pages, maps page names to\n # template names.\n-#html_additional_pages = {}\n+# html_additional_pages = {}\n \n # If false, no module index is generated.\n-#html_use_modindex = True\n+# html_use_modindex = True\n \n # If false, no index is generated.\n-#html_use_index = True\n+# html_use_index = True\n \n # If true, the index is split into individual pages for each letter.\n-#html_split_index = False\n+# html_split_index = False\n \n # If true, links to the reST sources are added to the pages.\n-#html_show_sourcelink = True\n+# html_show_sourcelink = True\n \n # If true, an OpenSearch description file will be output, and all pages will\n # contain a <link> tag referring to it.  The value of this option must be the\n # base URL from which the finished HTML is served.\n-#html_use_opensearch = \'\'\n+# html_use_opensearch = \'\'\n \n # If nonempty, this is the file name suffix for HTML files (e.g. ".xhtml").\n-#html_file_suffix = \'\'\n+# html_file_suffix = \'\'\n \n # Output file base name for HTML help builder.\n-htmlhelp_basename = \'ploneappdiscussiondoc\'\n+htmlhelp_basename = "ploneappdiscussiondoc"\n \n \n # -- Options for LaTeX output --------------------------------------------\n \n # The paper size (\'letter\' or \'a4\').\n-#latex_paper_size = \'letter\'\n+# latex_paper_size = \'letter\'\n \n # The font size (\'10pt\', \'11pt\' or \'12pt\').\n-#latex_font_size = \'10pt\'\n+# latex_font_size = \'10pt\'\n \n # Grouping the document tree into LaTeX files. List of tuples\n # (source start file, target name, title, author, documentclass [howto/manual]).\n latex_documents = [\n-    (\'index\', \'ploneappdiscussion.tex\', u\'plone.app.discussion Documentation\',\n-     u\'Timo Stollenwerk\', \'manual\'),\n+    (\n+        "index",\n+        "ploneappdiscussion.tex",\n+        "plone.app.discussion Documentation",\n+        "Timo Stollenwerk",\n+        "manual",\n+    ),\n ]\n \n # The name of an image file (relative to this directory) to place at the top of\n # the title page.\n-#latex_logo = None\n+# latex_logo = None\n \n # For "manual" documents, if this is true, then toplevel headings are parts,\n # not chapters.\n-#latex_use_parts = False\n+# latex_use_parts = False\n \n # Additional stuff for the LaTeX preamble.\n-#latex_preamble = \'\'\n+# latex_preamble = \'\'\n \n # Documents to append as an appendix to all manuals.\n-#latex_appendices = []\n+# latex_appendices = []\n \n # If false, no module index is generated.\n-#latex_use_modindex = True\n+# latex_use_modindex = True\n \n \n # Example configuration for intersphinx: refer to the Python standard library.\n-intersphinx_mapping = {\'http://docs.python.org/\': None}\n+intersphinx_mapping = {"http://docs.python.org/": None}\ndiff --git a/docs/source/howtos/howto_extend_the_comment_form.txt b/docs/source/howtos/howto_extend_the_comment_form.txt\nindex 605e0efb..3afaf6a6 100644\n--- a/docs/source/howtos/howto_extend_the_comment_form.txt\n+++ b/docs/source/howtos/howto_extend_the_comment_form.txt\n@@ -58,13 +58,13 @@ comment form with the "website" field::\n \n     # Interface to define the fields we want to add to the comment form.\n     class ICommentExtenderFields(Interface):\n-        website = schema.TextLine(title=u"Website", required=False)\n+        website = schema.TextLine(title="Website", required=False)\n \n     # Persistent class that implements the ICommentExtenderFields interface\n     @adapter(Comment)\n     class CommentExtenderFields(Persistent):\n         interface.implements(ICommentExtenderFields)\n-        website = u""\n+        website = ""\n \n     # CommentExtenderFields factory\n     CommentExtenderFactory = factory(CommentExtenderFields)\ndiff --git a/docs/source/howtos/howto_make_pad_work_with_a_dexterity_content_type.txt b/docs/source/howtos/howto_make_pad_work_with_a_dexterity_content_type.txt\nindex b1346484..84610b37 100644\n--- a/docs/source/howtos/howto_make_pad_work_with_a_dexterity_content_type.txt\n+++ b/docs/source/howtos/howto_make_pad_work_with_a_dexterity_content_type.txt\n@@ -20,8 +20,8 @@ configure.zcml::\n Define an interface IMyDexterityContentType groked schema, I added::\n \n         allowDiscussion  = schema.Bool(\n-            title=_(u"Allow Users to Comment"),\n-            description=_(u"Allow users to commemt on you.  Comments\n+            title=_("Allow Users to Comment"),\n+            description=_("Allow users to comment on you.  Comments\n are shown at the end of each page"),\n             required=True,\n             default=True,\ndiff --git a/news/195.breaking b/news/195.breaking\nnew file mode 100644\nindex 00000000..41d8e37a\n--- /dev/null\n+++ b/news/195.breaking\n@@ -0,0 +1,2 @@\n+Code style black & isort. Remove six usage. Use plone.base and move annotation key over to here.\n+[jensens]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af4..5284146e 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af4..5284146e 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/discussion/__init__.py b/plone/app/discussion/__init__.py\nindex 1936adce..8efe8b3c 100644\n--- a/plone/app/discussion/__init__.py\n+++ b/plone/app/discussion/__init__.py\n@@ -1,5 +1,4 @@\n-# -*- coding: utf-8 -*-\n from zope.i18nmessageid import MessageFactory\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\ndiff --git a/plone/app/discussion/browser/captcha.py b/plone/app/discussion/browser/captcha.py\nindex 090fce95..7e10d124 100644\n--- a/plone/app/discussion/browser/captcha.py\n+++ b/plone/app/discussion/browser/captcha.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Captcha validator, see captcha.txt for design notes.\n from persistent import Persistent\n from plone.app.discussion.browser.comments import CommentForm\n@@ -21,9 +20,9 @@\n @adapter(Comment)\n @interface.implementer(ICaptcha)\n class Captcha(Persistent):\n-    """Captcha input field.\n-    """\n-    captcha = u\'\'\n+    """Captcha input field."""\n+\n+    captcha = ""\n \n \n Captcha = factory(Captcha)\n@@ -47,22 +46,24 @@ def __init__(self, context, request, form):\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n         self.captcha = settings.captcha\n-        portal_membership = getToolByName(self.context, \'portal_membership\')\n+        portal_membership = getToolByName(self.context, "portal_membership")\n         self.isAnon = portal_membership.isAnonymousUser()\n \n     def update(self):\n-        if self.captcha != \'disabled\' and self.isAnon:\n+        if self.captcha != "disabled" and self.isAnon:\n             # Add a captcha field if captcha is enabled in the registry\n-            self.add(ICaptcha, prefix=\'\')\n-            if self.captcha == \'captcha\':\n+            self.add(ICaptcha, prefix="")\n+            if self.captcha == "captcha":\n                 from plone.formwidget.captcha import CaptchaFieldWidget\n-                self.form.fields[\'captcha\'].widgetFactory = CaptchaFieldWidget\n-            elif self.captcha == \'recaptcha\':\n+\n+                self.form.fields["captcha"].widgetFactory = CaptchaFieldWidget\n+            elif self.captcha == "recaptcha":\n                 from plone.formwidget.recaptcha import ReCaptchaFieldWidget\n-                self.form.fields[\'captcha\'].widgetFactory = \\\n-                    ReCaptchaFieldWidget\n-            elif self.captcha == \'norobots\':\n+\n+                self.form.fields["captcha"].widgetFactory = ReCaptchaFieldWidget\n+            elif self.captcha == "norobots":\n                 from collective.z3cform.norobots import NorobotsFieldWidget\n-                self.form.fields[\'captcha\'].widgetFactory = NorobotsFieldWidget\n+\n+                self.form.fields["captcha"].widgetFactory = NorobotsFieldWidget\n             else:\n-                self.form.fields[\'captcha\'].mode = interfaces.HIDDEN_MODE\n+                self.form.fields["captcha"].mode = interfaces.HIDDEN_MODE\ndiff --git a/plone/app/discussion/browser/comment.py b/plone/app/discussion/browser/comment.py\nindex 41beecc6..fc95a55c 100644\n--- a/plone/app/discussion/browser/comment.py\n+++ b/plone/app/discussion/browser/comment.py\n@@ -1,4 +1,3 @@\n-# coding: utf-8\n from .comments import CommentForm\n from AccessControl import getSecurityManager\n from Acquisition import aq_inner\n@@ -14,7 +13,6 @@\n from zope.component import getUtility\n from zope.event import notify\n from zope.lifecycleevent import ObjectModifiedEvent\n-from .comments import CommentForm\n \n \n class View(BrowserView):\n@@ -38,8 +36,7 @@ def __call__(self):\n         context = aq_inner(self.context)\n \n         registry = getUtility(IRegistry)\n-        view_action_types = registry.get(\n-            \'plone.types_use_view_action_in_listings\', [])\n+        view_action_types = registry.get("plone.types_use_view_action_in_listings", [])\n \n         obj = aq_parent(aq_parent(context))\n         url = obj.absolute_url()\n@@ -50,33 +47,34 @@ def __call__(self):\n         will redirect right to the binary object, bypassing comments.\n         """\n         if obj.portal_type in view_action_types:\n-            url = \'{0}/view\'.format(url)\n+            url = f"{url}/view"\n \n-        self.request.response.redirect(\'{0}#{1}\'.format(url, context.id))\n+        self.request.response.redirect(f"{url}#{context.id}")\n \n \n class EditCommentForm(CommentForm):\n     """Form to edit an existing comment."""\n+\n     ignoreContext = True\n-    id = \'edit-comment-form\'\n-    label = _(u\'edit_comment_form_title\', default=u\'Edit comment\')\n+    id = "edit-comment-form"\n+    label = _("edit_comment_form_title", default="Edit comment")\n \n     def updateWidgets(self):\n-        super(EditCommentForm, self).updateWidgets()\n-        self.widgets[\'text\'].value = self.context.text\n+        super().updateWidgets()\n+        self.widgets["text"].value = self.context.text\n         # We have to rename the id, otherwise TinyMCE can\'t initialize\n         # because there are two textareas with the same id.\n-        self.widgets[\'text\'].id = \'overlay-comment-text\'\n+        self.widgets["text"].id = "overlay-comment-text"\n \n-    def _redirect(self, target=\'\'):\n+    def _redirect(self, target=""):\n         if not target:\n-            portal_state = getMultiAdapter((self.context, self.request),\n-                                           name=u\'plone_portal_state\')\n+            portal_state = getMultiAdapter(\n+                (self.context, self.request), name="plone_portal_state"\n+            )\n             target = portal_state.portal_url()\n         self.request.response.redirect(target)\n \n-    @button.buttonAndHandler(_(u\'label_save\',\n-                               default=u\'Save\'), name=\'comment\')\n+    @button.buttonAndHandler(_("label_save", default="Save"), name="comment")\n     def handleComment(self, action):\n \n         # Validate form\n@@ -85,32 +83,28 @@ def handleComment(self, action):\n             return\n \n         # Check permissions\n-        can_edit = getSecurityManager().checkPermission(\n-            \'Edit comments\',\n-            self.context)\n-        mtool = getToolByName(self.context, \'portal_membership\')\n+        can_edit = getSecurityManager().checkPermission("Edit comments", self.context)\n+        mtool = getToolByName(self.context, "portal_membership")\n         if mtool.isAnonymousUser() or not can_edit:\n             return\n \n         # Update text\n-        self.context.text = data[\'text\']\n+        self.context.text = data["text"]\n         # Notify that the object has been modified\n         notify(ObjectModifiedEvent(self.context))\n \n         # Redirect to comment\n-        IStatusMessage(self.request).add(_(u\'comment_edit_notification\',\n-                                           default=\'Comment was edited\'),\n-                                         type=\'info\')\n-        return self._redirect(\n-            target=self.action.replace(\'@@edit-comment\', \'@@view\'))\n-\n-    @button.buttonAndHandler(_(u\'cancel_form_button\',\n-                               default=u\'Cancel\'), name=\'cancel\')\n+        IStatusMessage(self.request).add(\n+            _("comment_edit_notification", default="Comment was edited"), type="info"\n+        )\n+        return self._redirect(target=self.action.replace("@@edit-comment", "@@view"))\n+\n+    @button.buttonAndHandler(_("cancel_form_button", default="Cancel"), name="cancel")\n     def handle_cancel(self, action):\n         IStatusMessage(self.request).add(\n-            _(u\'comment_edit_cancel_notification\',\n-              default=u\'Edit comment cancelled\'),\n-            type=\'info\')\n+            _("comment_edit_cancel_notification", default="Edit comment cancelled"),\n+            type="info",\n+        )\n         return self._redirect(target=self.context.absolute_url())\n \n \ndiff --git a/plone/app/discussion/browser/comments.py b/plone/app/discussion/browser/comments.py\nindex d8ee95f9..387ceadf 100644\n--- a/plone/app/discussion/browser/comments.py\n+++ b/plone/app/discussion/browser/comments.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n@@ -12,15 +11,15 @@\n from plone.app.discussion.interfaces import IDiscussionSettings\n from plone.app.discussion.interfaces import IReplies\n from plone.app.layout.viewlets.common import ViewletBase\n+from plone.base.utils import safe_text\n from plone.registry.interfaces import IRegistry\n from plone.z3cform import z2\n from plone.z3cform.fieldsets import extensible\n from plone.z3cform.interfaces import IWrappedForm\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n-from six.moves.urllib.parse import quote\n+from urllib.parse import quote\n from z3c.form import button\n from z3c.form import field\n from z3c.form import form\n@@ -35,28 +34,28 @@\n \n \n COMMENT_DESCRIPTION_PLAIN_TEXT = _(\n-    u\'comment_description_plain_text\',\n-    default=u\'You can add a comment by filling out the form below. \'\n-            u\'Plain text formatting.\',\n+    "comment_description_plain_text",\n+    default="You can add a comment by filling out the form below. "\n+    "Plain text formatting.",\n )\n \n COMMENT_DESCRIPTION_MARKDOWN = _(\n-    u\'comment_description_markdown\',\n-    default=u\'You can add a comment by filling out the form below. \'\n-            u\'Plain text formatting. You can use the Markdown syntax for \'\n-            u\'links and images.\',\n+    "comment_description_markdown",\n+    default="You can add a comment by filling out the form below. "\n+    "Plain text formatting. You can use the Markdown syntax for "\n+    "links and images.",\n )\n \n COMMENT_DESCRIPTION_INTELLIGENT_TEXT = _(\n-    u\'comment_description_intelligent_text\',\n-    default=u\'You can add a comment by filling out the form below. \'\n-            u\'Plain text formatting. Web and email addresses are \'\n-            u\'transformed into clickable links.\',\n+    "comment_description_intelligent_text",\n+    default="You can add a comment by filling out the form below. "\n+    "Plain text formatting. Web and email addresses are "\n+    "transformed into clickable links.",\n )\n \n COMMENT_DESCRIPTION_MODERATION_ENABLED = _(\n-    u\'comment_description_moderation_enabled\',\n-    default=u\'Comments are moderated.\',\n+    "comment_description_moderation_enabled",\n+    default="Comments are moderated.",\n )\n \n \n@@ -64,30 +63,31 @@ class CommentForm(extensible.ExtensibleForm, form.Form):\n \n     ignoreContext = True  # don\'t use context to get widget data\n     id = None\n-    label = _(u\'Add a comment\')\n-    fields = field.Fields(IComment).omit(\'portal_type\',\n-                                         \'__parent__\',\n-                                         \'__name__\',\n-                                         \'comment_id\',\n-                                         \'mime_type\',\n-                                         \'creator\',\n-                                         \'creation_date\',\n-                                         \'modification_date\',\n-                                         \'author_username\',\n-                                         \'title\')\n+    label = _("Add a comment")\n+    fields = field.Fields(IComment).omit(\n+        "portal_type",\n+        "__parent__",\n+        "__name__",\n+        "comment_id",\n+        "mime_type",\n+        "creator",\n+        "creation_date",\n+        "modification_date",\n+        "author_username",\n+        "title",\n+    )\n \n     def updateFields(self):\n-        super(CommentForm, self).updateFields()\n-        self.fields[\'user_notification\'].widgetFactory = \\\n-            SingleCheckBoxFieldWidget\n+        super().updateFields()\n+        self.fields["user_notification"].widgetFactory = SingleCheckBoxFieldWidget\n \n     def updateWidgets(self):\n-        super(CommentForm, self).updateWidgets()\n+        super().updateWidgets()\n \n         # Widgets\n-        self.widgets[\'in_reply_to\'].mode = interfaces.HIDDEN_MODE\n-        self.widgets[\'text\'].addClass(\'autoresize\')\n-        self.widgets[\'user_notification\'].label = _(u\'\')\n+        self.widgets["in_reply_to"].mode = interfaces.HIDDEN_MODE\n+        self.widgets["text"].addClass("autoresize")\n+        self.widgets["user_notification"].label = _("")\n         # Reset widget field settings to their defaults, which may be changed\n         # further on.  Otherwise, the email field might get set to required\n         # when an anonymous user visits, and then remain required when an\n@@ -97,19 +97,19 @@ def updateWidgets(self):\n         # would have no effect until the instance was restarted.  Note that the\n         # widget is new each time, but the field is the same item in memory as\n         # the previous time.\n-        self.widgets[\'author_email\'].field.required = False\n+        self.widgets["author_email"].field.required = False\n         # The widget is new, but its \'required\' setting is based on the\n         # previous value on the field, so we need to reset it here.  Changing\n         # the field in updateFields does not help.\n-        self.widgets[\'author_email\'].required = False\n+        self.widgets["author_email"].required = False\n \n         # Rename the id of the text widgets because there can be css-id\n         # clashes with the text field of documents when using and overlay\n         # with TinyMCE.\n-        self.widgets[\'text\'].id = \'form-widgets-comment-text\'\n+        self.widgets["text"].id = "form-widgets-comment-text"\n \n         # Anonymous / Logged-in\n-        mtool = getToolByName(self.context, \'portal_membership\')\n+        mtool = getToolByName(self.context, "portal_membership")\n         anon = mtool.isAnonymousUser()\n \n         registry = queryUtility(IRegistry)\n@@ -119,56 +119,55 @@ def updateWidgets(self):\n             if settings.anonymous_email_enabled:\n                 # according to IDiscussionSettings.anonymous_email_enabled:\n                 # \'If selected, anonymous user will have to give their email.\'\n-                self.widgets[\'author_email\'].field.required = True\n-                self.widgets[\'author_email\'].required = True\n+                self.widgets["author_email"].field.required = True\n+                self.widgets["author_email"].required = True\n             else:\n-                self.widgets[\'author_email\'].mode = interfaces.HIDDEN_MODE\n+                self.widgets["author_email"].mode = interfaces.HIDDEN_MODE\n         else:\n-            self.widgets[\'author_name\'].mode = interfaces.HIDDEN_MODE\n-            self.widgets[\'author_email\'].mode = interfaces.HIDDEN_MODE\n+            self.widgets["author_name"].mode = interfaces.HIDDEN_MODE\n+            self.widgets["author_email"].mode = interfaces.HIDDEN_MODE\n \n         member = mtool.getAuthenticatedMember()\n-        member_email = member.getProperty(\'email\')\n+        member_email = member.getProperty("email")\n \n         # Hide the user_notification checkbox if user notification is disabled\n         # or the user is not logged in. Also check if the user has a valid\n         # email address\n-        member_email_is_empty = member_email == \'\'\n+        member_email_is_empty = member_email == ""\n         user_notification_disabled = not settings.user_notification_enabled\n         if member_email_is_empty or user_notification_disabled or anon:\n-            self.widgets[\'user_notification\'].mode = interfaces.HIDDEN_MODE\n+            self.widgets["user_notification"].mode = interfaces.HIDDEN_MODE\n \n     def updateActions(self):\n-        super(CommentForm, self).updateActions()\n-        self.actions[\'cancel\'].addClass(\'btn btn-secondary\')\n-        self.actions[\'cancel\'].addClass(\'hide\')\n-        self.actions[\'comment\'].addClass(\'btn btn-primary\')\n+        super().updateActions()\n+        self.actions["cancel"].addClass("btn btn-secondary")\n+        self.actions["cancel"].addClass("hide")\n+        self.actions["comment"].addClass("btn btn-primary")\n \n     def get_author(self, data):\n         context = aq_inner(self.context)\n         # some attributes are not always set\n-        author_name = u\'\'\n+        author_name = ""\n \n         # Make sure author_name/ author_email is properly encoded\n-        if \'author_name\' in data:\n-            author_name = safe_unicode(data[\'author_name\'])\n-        if \'author_email\' in data:\n-            author_email = safe_unicode(data[\'author_email\'])\n+        if "author_name" in data:\n+            author_name = safe_text(data["author_name"])\n+        if "author_email" in data:\n+            author_email = safe_text(data["author_email"])\n \n         # Set comment author properties for anonymous users or members\n-        portal_membership = getToolByName(context, \'portal_membership\')\n+        portal_membership = getToolByName(context, "portal_membership")\n         anon = portal_membership.isAnonymousUser()\n-        if not anon and getSecurityManager().checkPermission(\n-                \'Reply to item\', context):\n+        if not anon and getSecurityManager().checkPermission("Reply to item", context):\n             # Member\n             member = portal_membership.getAuthenticatedMember()\n-            email = safe_unicode(member.getProperty(\'email\'))\n-            fullname = member.getProperty(\'fullname\')\n-            if not fullname or fullname == \'\':\n+            email = safe_text(member.getProperty("email"))\n+            fullname = member.getProperty("fullname")\n+            if not fullname or fullname == "":\n                 fullname = member.getUserName()\n-            fullname = safe_unicode(fullname)\n+            fullname = safe_text(fullname)\n             author_name = fullname\n-            email = safe_unicode(email)\n+            email = safe_text(email)\n             # XXX: according to IComment interface author_email must not be  # noqa T000\n             # set for logged in users, cite:\n             # \'for anonymous comments only, set to None for logged in comments\'\n@@ -179,7 +178,7 @@ def get_author(self, data):\n \n     def create_comment(self, data):\n         context = aq_inner(self.context)\n-        comment = createObject(\'plone.Comment\')\n+        comment = createObject("plone.Comment")\n \n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n@@ -200,42 +199,42 @@ def create_comment(self, data):\n         comment.author_name, comment.author_email = self.get_author(data)\n \n         # Set comment author properties for anonymous users or members\n-        portal_membership = getToolByName(context, \'portal_membership\')\n+        portal_membership = getToolByName(context, "portal_membership")\n         anon = portal_membership.isAnonymousUser()\n         if anon and anonymous_comments:\n             # Anonymous Users\n             comment.user_notification = None\n         elif not anon and getSecurityManager().checkPermission(\n-                \'Reply to item\', context):\n+            "Reply to item", context\n+        ):\n             # Member\n             member = portal_membership.getAuthenticatedMember()\n             memberid = member.getId()\n             user = member.getUser()\n             comment.changeOwnership(user, recursive=False)\n-            comment.manage_setLocalRoles(memberid, [\'Owner\'])\n+            comment.manage_setLocalRoles(memberid, ["Owner"])\n             comment.creator = memberid\n             comment.author_username = memberid\n \n         else:  # pragma: no cover\n             raise Unauthorized(\n-                u\'Anonymous user tries to post a comment, but anonymous \'\n-                u\'commenting is disabled. Or user does not have the \'\n-                u"\'reply to item\' permission.",\n+                "Anonymous user tries to post a comment, but anonymous "\n+                "commenting is disabled. Or user does not have the "\n+                "\'reply to item\' permission.",\n             )\n \n         return comment\n \n-    @button.buttonAndHandler(_(u\'add_comment_button\', default=u\'Comment\'),\n-                             name=\'comment\')\n+    @button.buttonAndHandler(_("add_comment_button", default="Comment"), name="comment")\n     def handleComment(self, action):\n         context = aq_inner(self.context)\n \n         # Check if conversation is enabled on this content object\n         if not self.__parent__.restrictedTraverse(\n-            \'@@conversation_view\',\n+            "@@conversation_view",\n         ).enabled():\n             raise Unauthorized(\n-                \'Discussion is not enabled for this content object.\',\n+                "Discussion is not enabled for this content object.",\n             )\n \n         # Validation form\n@@ -246,28 +245,26 @@ def handleComment(self, action):\n         # Validate Captcha\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n-        portal_membership = getToolByName(self.context, \'portal_membership\')\n-        captcha_enabled = settings.captcha != \'disabled\'\n+        portal_membership = getToolByName(self.context, "portal_membership")\n+        captcha_enabled = settings.captcha != "disabled"\n         anonymous_comments = settings.anonymous_comments\n         anon = portal_membership.isAnonymousUser()\n         if captcha_enabled and anonymous_comments and anon:\n-            if \'captcha\' not in data:\n-                data[\'captcha\'] = u\'\'\n-            captcha = CaptchaValidator(self.context,\n-                                       self.request,\n-                                       None,\n-                                       ICaptcha[\'captcha\'],\n-                                       None)\n-            captcha.validate(data[\'captcha\'])\n+            if "captcha" not in data:\n+                data["captcha"] = ""\n+            captcha = CaptchaValidator(\n+                self.context, self.request, None, ICaptcha["captcha"], None\n+            )\n+            captcha.validate(data["captcha"])\n \n         # Create comment\n         comment = self.create_comment(data)\n \n         # Add comment to conversation\n         conversation = IConversation(self.__parent__)\n-        if data[\'in_reply_to\']:\n+        if data["in_reply_to"]:\n             # Add a reply to an existing comment\n-            conversation_to_reply_to = conversation.get(data[\'in_reply_to\'])\n+            conversation_to_reply_to = conversation.get(data["in_reply_to"])\n             replies = IReplies(conversation_to_reply_to)\n             comment_id = replies.addComment(comment)\n         else:\n@@ -279,25 +276,24 @@ def handleComment(self, action):\n         # shown to the user that his/her comment awaits moderation. If the user\n         # has \'review comments\' permission, he/she is redirected directly\n         # to the comment.\n-        can_review = getSecurityManager().checkPermission(\'Review comments\',\n-                                                          context)\n-        workflowTool = getToolByName(context, \'portal_workflow\')\n+        can_review = getSecurityManager().checkPermission("Review comments", context)\n+        workflowTool = getToolByName(context, "portal_workflow")\n         comment_review_state = workflowTool.getInfoFor(\n             comment,\n-            \'review_state\',\n+            "review_state",\n             None,\n         )\n-        if comment_review_state == \'pending\' and not can_review:\n+        if comment_review_state == "pending" and not can_review:\n             # Show info message when comment moderation is enabled\n             IStatusMessage(self.context.REQUEST).addStatusMessage(\n-                _(\'Your comment awaits moderator approval.\'),\n-                type=\'info\')\n+                _("Your comment awaits moderator approval."), type="info"\n+            )\n             self.request.response.redirect(self.action)\n         else:\n             # Redirect to comment (inside a content object page)\n-            self.request.response.redirect(self.action + \'#\' + str(comment_id))\n+            self.request.response.redirect(self.action + "#" + str(comment_id))\n \n-    @button.buttonAndHandler(_(u\'Cancel\'))\n+    @button.buttonAndHandler(_("Cancel"))\n     def handleCancel(self, action):\n         # This method should never be called, it\'s only there to show\n         # a cancel button that is handled by a jQuery method.\n@@ -307,15 +303,15 @@ def handleCancel(self, action):\n class CommentsViewlet(ViewletBase):\n \n     form = CommentForm\n-    index = ViewPageTemplateFile(\'comments.pt\')\n+    index = ViewPageTemplateFile("comments.pt")\n \n     def update(self):\n-        super(CommentsViewlet, self).update()\n+        super().update()\n         discussion_allowed = self.is_discussion_allowed()\n         anonymous_allowed_or_can_reply = (\n-            self.is_anonymous() and\n-            self.anonymous_discussion_allowed() or\n-            self.can_reply()\n+            self.is_anonymous()\n+            and self.anonymous_discussion_allowed()\n+            or self.can_reply()\n         )\n         if discussion_allowed and anonymous_allowed_or_can_reply:\n             z2.switch_on(self, request_layer=IFormLayer)\n@@ -326,30 +322,29 @@ def update(self):\n     # view methods\n \n     def can_reply(self):\n-        """Returns true if current user has the \'Reply to item\' permission.\n-        """\n-        return getSecurityManager().checkPermission(\'Reply to item\',\n-                                                    aq_inner(self.context))\n+        """Returns true if current user has the \'Reply to item\' permission."""\n+        return getSecurityManager().checkPermission(\n+            "Reply to item", aq_inner(self.context)\n+        )\n \n     def can_manage(self):\n         """We keep this method for <= 1.0b9 backward compatibility. Since we do\n-           not want any API changes in beta releases.\n+        not want any API changes in beta releases.\n         """\n         return self.can_review()\n \n     def can_review(self):\n-        """Returns true if current user has the \'Review comments\' permission.\n-        """\n-        return getSecurityManager().checkPermission(\'Review comments\',\n-                                                    aq_inner(self.context))\n+        """Returns true if current user has the \'Review comments\' permission."""\n+        return getSecurityManager().checkPermission(\n+            "Review comments", aq_inner(self.context)\n+        )\n \n     def can_delete_own(self, comment):\n         """Returns true if the current user can delete the comment. Only\n         comments without replies can be deleted.\n         """\n         try:\n-            return comment.restrictedTraverse(\n-                \'@@delete-own-comment\').can_delete()\n+            return comment.restrictedTraverse("@@delete-own-comment").can_delete()\n         except Unauthorized:\n             return False\n \n@@ -358,8 +353,7 @@ def could_delete_own(self, comment):\n         no replies. This is used to prepare hidden form buttons for JS.\n         """\n         try:\n-            return comment.restrictedTraverse(\n-                \'@@delete-own-comment\').could_delete()\n+            return comment.restrictedTraverse("@@delete-own-comment").could_delete()\n         except Unauthorized:\n             return False\n \n@@ -367,58 +361,63 @@ def can_edit(self, reply):\n         """Returns true if current user has the \'Edit comments\'\n         permission.\n         """\n-        return getSecurityManager().checkPermission(\'Edit comments\',\n-                                                    aq_inner(reply))\n+        return getSecurityManager().checkPermission("Edit comments", aq_inner(reply))\n \n     def can_delete(self, reply):\n         """Returns true if current user has the \'Delete comments\'\n         permission.\n         """\n-        return getSecurityManager().checkPermission(\'Delete comments\',\n-                                                    aq_inner(reply))\n+        return getSecurityManager().checkPermission("Delete comments", aq_inner(reply))\n \n     def is_discussion_allowed(self):\n         context = aq_inner(self.context)\n-        return context.restrictedTraverse(\'@@conversation_view\').enabled()\n+        return context.restrictedTraverse("@@conversation_view").enabled()\n \n     def comment_transform_message(self):\n         """Returns the description that shows up above the comment text,\n-           dependent on the text_transform setting and the comment moderation\n-           workflow in the discussion control panel.\n+        dependent on the text_transform setting and the comment moderation\n+        workflow in the discussion control panel.\n         """\n         context = aq_inner(self.context)\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n \n         # text transform setting\n-        if settings.text_transform == \'text/x-web-intelligent\':\n-            message = translate(Message(COMMENT_DESCRIPTION_INTELLIGENT_TEXT),\n-                                context=self.request)\n-        elif settings.text_transform == \'text/x-web-markdown\':\n-            message = translate(Message(COMMENT_DESCRIPTION_MARKDOWN),\n-                                context=self.request)\n+        if settings.text_transform == "text/x-web-intelligent":\n+            message = translate(\n+                Message(COMMENT_DESCRIPTION_INTELLIGENT_TEXT), context=self.request\n+            )\n+        elif settings.text_transform == "text/x-web-markdown":\n+            message = translate(\n+                Message(COMMENT_DESCRIPTION_MARKDOWN), context=self.request\n+            )\n         else:\n-            message = translate(Message(COMMENT_DESCRIPTION_PLAIN_TEXT),\n-                                context=self.request)\n+            message = translate(\n+                Message(COMMENT_DESCRIPTION_PLAIN_TEXT), context=self.request\n+            )\n \n         # comment workflow\n-        wftool = getToolByName(context, \'portal_workflow\', None)\n-        workflow_chain = wftool.getChainForPortalType(\'Discussion Item\')\n+        wftool = getToolByName(context, "portal_workflow", None)\n+        workflow_chain = wftool.getChainForPortalType("Discussion Item")\n         if workflow_chain:\n             comment_workflow = workflow_chain[0]\n             comment_workflow = wftool[comment_workflow]\n             # check if the current workflow implements a pending state. If this\n             # is true comments are moderated\n-            if \'pending\' in comment_workflow.states:\n-                message = message + \' \' + \\\n-                    translate(Message(COMMENT_DESCRIPTION_MODERATION_ENABLED),\n-                              context=self.request)\n+            if "pending" in comment_workflow.states:\n+                message = (\n+                    message\n+                    + " "\n+                    + translate(\n+                        Message(COMMENT_DESCRIPTION_MODERATION_ENABLED),\n+                        context=self.request,\n+                    )\n+                )\n \n         return message\n \n     def has_replies(self, workflow_actions=False):\n-        """Returns true if there are replies.\n-        """\n+        """Returns true if there are replies."""\n         if self.get_replies(workflow_actions) is not None:\n             try:\n                 next(self.get_replies(workflow_actions))\n@@ -442,31 +441,32 @@ def get_replies(self, workflow_actions=False):\n         if conversation is None:\n             return iter([])\n \n-        wf = getToolByName(context, \'portal_workflow\')\n+        wf = getToolByName(context, "portal_workflow")\n         # workflow_actions is only true when user\n         # has \'Manage portal\' permission\n \n         def replies_with_workflow_actions():\n             # Generator that returns replies dict with workflow actions\n             for r in conversation.getThreads():\n-                comment_obj = r[\'comment\']\n+                comment_obj = r["comment"]\n                 # list all possible workflow actions\n                 actions = [\n-                    a for a in wf.listActionInfos(object=comment_obj)\n-                    if a[\'category\'] == \'workflow\' and a[\'allowed\']\n+                    a\n+                    for a in wf.listActionInfos(object=comment_obj)\n+                    if a["category"] == "workflow" and a["allowed"]\n                 ]\n                 r = r.copy()\n-                r[\'actions\'] = actions\n+                r["actions"] = actions\n                 yield r\n \n         def published_replies():\n             # Generator that returns replies dict with workflow status.\n             for r in conversation.getThreads():\n-                comment_obj = r[\'comment\']\n-                workflow_status = wf.getInfoFor(comment_obj, \'review_state\')\n-                if workflow_status == \'published\':\n+                comment_obj = r["comment"]\n+                workflow_status = wf.getInfoFor(comment_obj, "review_state")\n+                if workflow_status == "published":\n                     r = r.copy()\n-                    r[\'workflow_status\'] = workflow_status\n+                    r["workflow_status"] = workflow_status\n                     yield r\n \n         # Return all direct replies\n@@ -480,20 +480,16 @@ def get_commenter_home_url(self, username=None):\n         if username is None:\n             return None\n         else:\n-            return \'{0}/author/{1}\'.format(self.context.portal_url(), username)\n+            return f"{self.context.portal_url()}/author/{username}"\n \n     def get_commenter_portrait(self, username=None):\n \n         if username is None:\n             # return the default user image if no username is given\n-            return \'defaultUser.png\'\n+            return "defaultUser.png"\n         else:\n-            portal_membership = getToolByName(self.context,\n-                                              \'portal_membership\',\n-                                              None)\n-            return portal_membership\\\n-                .getPersonalPortrait(username)\\\n-                .absolute_url()\n+            portal_membership = getToolByName(self.context, "portal_membership", None)\n+            return portal_membership.getPersonalPortrait(username).absolute_url()\n \n     def anonymous_discussion_allowed(self):\n         # Check if anonymous comments are allowed in the registry\n@@ -520,20 +516,18 @@ def show_commenter_image(self):\n         return settings.show_commenter_image\n \n     def is_anonymous(self):\n-        portal_membership = getToolByName(self.context,\n-                                          \'portal_membership\',\n-                                          None)\n+        portal_membership = getToolByName(self.context, "portal_membership", None)\n         return portal_membership.isAnonymousUser()\n \n     def login_action(self):\n-        return \'{0}/login_form?came_from={1}\'.format(\n+        return "{}/login_form?came_from={}".format(\n             self.navigation_root_url,\n-            quote(self.request.get(\'URL\', \'\')),\n+            quote(self.request.get("URL", "")),\n         )\n \n     def format_time(self, time):\n         # We have to transform Python datetime into Zope DateTime\n         # before we can call toLocalizedTime.\n-        util = getToolByName(self.context, \'translation_service\')\n+        util = getToolByName(self.context, "translation_service")\n         zope_time = DateTime(time.isoformat())\n         return util.toLocalizedTime(zope_time, long_format=True)\ndiff --git a/plone/app/discussion/browser/configure.zcml b/plone/app/discussion/browser/configure.zcml\nindex 63f80a45..0892259a 100644\n--- a/plone/app/discussion/browser/configure.zcml\n+++ b/plone/app/discussion/browser/configure.zcml\n@@ -48,7 +48,7 @@\n \n     <!-- Moderate comments enabled view -->\n     <browser:page\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+        for="plone.base.interfaces.IPloneSiteRoot"\n         name="moderate-comments-enabled"\n         layer="..interfaces.IDiscussionLayer"\n         class=".moderation.ModerateCommentsEnabled"\n@@ -141,14 +141,14 @@\n     <!-- Control panel -->\n     <browser:page\n         name="discussion-controlpanel"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+        for="plone.base.interfaces.IPloneSiteRoot"\n         class=".controlpanel.DiscussionSettingsControlPanel"\n         permission="cmf.ManagePortal"\n         />\n     <!-- Deprecated controlpanel url -->\n     <browser:page\n         name="discussion-settings"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+        for="plone.base.interfaces.IPloneSiteRoot"\n         class=".controlpanel.DiscussionSettingsControlPanel"\n         permission="cmf.ManagePortal"\n         />\ndiff --git a/plone/app/discussion/browser/controlpanel.py b/plone/app/discussion/browser/controlpanel.py\nindex 272fbb0c..b9a3e23b 100644\n--- a/plone/app/discussion/browser/controlpanel.py\n+++ b/plone/app/discussion/browser/controlpanel.py\n@@ -1,12 +1,12 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.discussion.interfaces import _\n-from plone.app.discussion.interfaces import IDiscussionSettings\n-from plone.app.discussion.upgrades import update_registry\n+from ..interfaces import _\n+from ..interfaces import IDiscussionSettings\n+from ..upgrades import update_registry\n from plone.app.registry.browser import controlpanel\n+from plone.base.interfaces.controlpanel import IConfigurationChangedEvent\n+from plone.base.interfaces.controlpanel import IMailSchema\n from plone.registry.interfaces import IRecordModifiedEvent\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n from z3c.form import button\n@@ -16,87 +16,76 @@\n from zope.component import queryUtility\n from zope.component.hooks import getSite\n \n-# try/except was added because Configuration Changed Event was moved inside the\n-# controlpanel file in the PR #2495 on Products.CMFPlone\n-try:\n-    from Products.CMFPlone.interfaces.controlpanel import IConfigurationChangedEvent  # noqa: E501\n-except ImportError:\n-    from Products.CMFPlone.interfaces import IConfigurationChangedEvent\n-\n \n class DiscussionSettingsEditForm(controlpanel.RegistryEditForm):\n-    """Discussion settings form.\n-    """\n+    """Discussion settings form."""\n+\n     schema = IDiscussionSettings\n-    id = \'DiscussionSettingsEditForm\'\n-    label = _(u\'Discussion settings\')\n+    id = "DiscussionSettingsEditForm"\n+    label = _("Discussion settings")\n     description = _(\n-        u\'help_discussion_settings_editform\',\n-        default=u\'Some discussion related settings are not \'\n-                u\'located in the Discussion Control Panel.\\n\'\n-                u\'To enable comments for a specific content type, \'\n-                u\'go to the Types Control Panel of this type and \'\n-                u\'choose "Allow comments".\\n\'\n-                u\'To enable the moderation workflow for comments, \'\n-                u\'go to the Types Control Panel, choose \'\n-                u\'"Comment" and set workflow to \'\n-                u\'"Comment Review Workflow".\',\n+        "help_discussion_settings_editform",\n+        default="Some discussion related settings are not "\n+        "located in the Discussion Control Panel.\\n"\n+        "To enable comments for a specific content type, "\n+        "go to the Types Control Panel of this type and "\n+        \'choose "Allow comments".\\n\'\n+        "To enable the moderation workflow for comments, "\n+        "go to the Types Control Panel, choose "\n+        \'"Comment" and set workflow to \'\n+        \'"Comment Review Workflow".\',\n     )\n \n     def updateFields(self):\n-        super(DiscussionSettingsEditForm, self).updateFields()\n-        self.fields[\'globally_enabled\'].widgetFactory = \\\n-            SingleCheckBoxFieldWidget\n-        self.fields[\'moderation_enabled\'].widgetFactory = \\\n-            SingleCheckBoxFieldWidget\n-        self.fields[\'edit_comment_enabled\'].widgetFactory = \\\n-            SingleCheckBoxFieldWidget\n-        self.fields[\'delete_own_comment_enabled\'].widgetFactory = \\\n-            SingleCheckBoxFieldWidget\n-        self.fields[\'anonymous_comments\'].widgetFactory = \\\n-            SingleCheckBoxFieldWidget\n-        self.fields[\'show_commenter_image\'].widgetFactory = \\\n-            SingleCheckBoxFieldWidget\n-        self.fields[\'moderator_notification_enabled\'].widgetFactory = \\\n-            SingleCheckBoxFieldWidget\n-        self.fields[\'user_notification_enabled\'].widgetFactory = \\\n-            SingleCheckBoxFieldWidget\n+        super().updateFields()\n+        self.fields["globally_enabled"].widgetFactory = SingleCheckBoxFieldWidget\n+        self.fields["moderation_enabled"].widgetFactory = SingleCheckBoxFieldWidget\n+        self.fields["edit_comment_enabled"].widgetFactory = SingleCheckBoxFieldWidget\n+        self.fields[\n+            "delete_own_comment_enabled"\n+        ].widgetFactory = SingleCheckBoxFieldWidget\n+        self.fields["anonymous_comments"].widgetFactory = SingleCheckBoxFieldWidget\n+        self.fields["show_commenter_image"].widgetFactory = SingleCheckBoxFieldWidget\n+        self.fields[\n+            "moderator_notification_enabled"\n+        ].widgetFactory = SingleCheckBoxFieldWidget\n+        self.fields[\n+            "user_notification_enabled"\n+        ].widgetFactory = SingleCheckBoxFieldWidget\n \n     def updateWidgets(self):\n         try:\n-            super(DiscussionSettingsEditForm, self).updateWidgets()\n+            super().updateWidgets()\n         except KeyError:\n             # upgrade profile not visible in prefs_install_products_form\n             # provide auto-upgrade\n             update_registry(self.context)\n-            super(DiscussionSettingsEditForm, self).updateWidgets()\n-        self.widgets[\'globally_enabled\'].label = _(u\'Enable Comments\')\n-        self.widgets[\'anonymous_comments\'].label = _(u\'Anonymous Comments\')\n-        self.widgets[\'show_commenter_image\'].label = _(u\'Commenter Image\')\n-        self.widgets[\'moderator_notification_enabled\'].label = _(\n-            u\'Moderator Email Notification\',\n+            super().updateWidgets()\n+        self.widgets["globally_enabled"].label = _("Enable Comments")\n+        self.widgets["anonymous_comments"].label = _("Anonymous Comments")\n+        self.widgets["show_commenter_image"].label = _("Commenter Image")\n+        self.widgets["moderator_notification_enabled"].label = _(\n+            "Moderator Email Notification",\n         )\n-        self.widgets[\'user_notification_enabled\'].label = _(\n-            u\'User Email Notification\',\n+        self.widgets["user_notification_enabled"].label = _(\n+            "User Email Notification",\n         )\n \n-    @button.buttonAndHandler(_(\'Save\'), name=None)\n+    @button.buttonAndHandler(_("Save"), name=None)\n     def handleSave(self, action):\n         data, errors = self.extractData()\n         if errors:\n             self.status = self.formErrorsMessage\n             return\n         self.applyChanges(data)\n-        IStatusMessage(self.request).addStatusMessage(_(u\'Changes saved\'),\n-                                                      \'info\')\n-        self.context.REQUEST.RESPONSE.redirect(\'@@discussion-controlpanel\')\n+        IStatusMessage(self.request).addStatusMessage(_("Changes saved"), "info")\n+        self.context.REQUEST.RESPONSE.redirect("@@discussion-controlpanel")\n \n-    @button.buttonAndHandler(_(\'Cancel\'), name=\'cancel\')\n+    @button.buttonAndHandler(_("Cancel"), name="cancel")\n     def handleCancel(self, action):\n-        IStatusMessage(self.request).addStatusMessage(_(u\'Edit cancelled\'),\n-                                                      \'info\')\n+        IStatusMessage(self.request).addStatusMessage(_("Edit cancelled"), "info")\n         self.request.response.redirect(\n-            \'{0}/{1}\'.format(\n+            "{}/{}".format(\n                 self.context.absolute_url(),\n                 self.control_panel_view,\n             ),\n@@ -104,15 +93,15 @@ def handleCancel(self, action):\n \n \n class DiscussionSettingsControlPanel(controlpanel.ControlPanelFormWrapper):\n-    """Discussion settings control panel.\n-    """\n+    """Discussion settings control panel."""\n+\n     form = DiscussionSettingsEditForm\n-    index = ViewPageTemplateFile(\'controlpanel.pt\')\n+    index = ViewPageTemplateFile("controlpanel.pt")\n \n     def __call__(self):\n         self.mailhost_warning()\n         self.custom_comment_workflow_warning()\n-        return super(DiscussionSettingsControlPanel, self).__call__()\n+        return super().__call__()\n \n     @property\n     def site_url(self):\n@@ -123,43 +112,44 @@ def site_url(self):\n \n     def settings(self):\n         """Compose a string that contains all registry settings that are\n-           needed for the discussion control panel.\n+        needed for the discussion control panel.\n         """\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n-        wftool = getToolByName(self.context, \'portal_workflow\', None)\n-        workflow_chain = wftool.getChainForPortalType(\'Discussion Item\')\n+        wftool = getToolByName(self.context, "portal_workflow", None)\n+        workflow_chain = wftool.getChainForPortalType("Discussion Item")\n         output = []\n \n         # Globally enabled\n         if settings.globally_enabled:\n-            output.append(\'globally_enabled\')\n+            output.append("globally_enabled")\n \n         # Comment moderation\n-        one_state_worklow_disabled = \\\n-            \'comment_one_state_workflow\' not in workflow_chain\n-        comment_review_workflow_disabled = \\\n-            \'comment_review_workflow\' not in workflow_chain\n+        one_state_worklow_disabled = "comment_one_state_workflow" not in workflow_chain\n+        comment_review_workflow_disabled = (\n+            "comment_review_workflow" not in workflow_chain\n+        )\n         if one_state_worklow_disabled and comment_review_workflow_disabled:\n-            output.append(\'moderation_custom\')\n+            output.append("moderation_custom")\n         elif settings.moderation_enabled:\n-            output.append(\'moderation_enabled\')\n+            output.append("moderation_enabled")\n \n         if settings.edit_comment_enabled:\n-            output.append(\'edit_comment_enabled\')\n+            output.append("edit_comment_enabled")\n \n         if settings.delete_own_comment_enabled:\n-            output.append(\'delete_own_comment_enabled\')\n+            output.append("delete_own_comment_enabled")\n \n         # Anonymous comments\n         if settings.anonymous_comments:\n-            output.append(\'anonymous_comments\')\n+            output.append("anonymous_comments")\n \n         # Invalid mail setting\n-        ctrlOverview = getMultiAdapter((self.context, self.request),\n-                                       name=\'overview-controlpanel\')\n+        ctrlOverview = getMultiAdapter(\n+            (self.context, self.request), name="overview-controlpanel"\n+        )\n         if ctrlOverview.mailhost_warning():\n-            output.append(\'invalid_mail_setup\')\n+            output.append("invalid_mail_setup")\n \n         # Workflow\n         if workflow_chain:\n@@ -167,69 +157,71 @@ def settings(self):\n             output.append(discussion_workflow)\n \n         # Merge all settings into one string\n-        return \' \'.join(output)\n+        return " ".join(output)\n \n     def mailhost_warning(self):\n-        """Returns true if mailhost is not configured properly.\n-        """\n+        """Returns true if mailhost is not configured properly."""\n         # Copied from Products.CMFPlone/controlpanel/browser/overview.py\n         registry = getUtility(IRegistry)\n-        mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n+        mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n         mailhost = mail_settings.smtp_host\n         email = mail_settings.email_from_address\n         if mailhost and email:\n             pass\n         else:\n-            message = _(u\'discussion_text_no_mailhost_configured\',\n-                default=u\'You have not configured a mail host or a site \\\'From\\\' address, various features including contact forms, email notification and password reset will not work. Go to the E-Mail Settings to fix this.\')  # noqa: E501\n-            IStatusMessage(self.request).addStatusMessage(message, \'warning\')\n+            message = _(\n+                "discussion_text_no_mailhost_configured",\n+                default="You have not configured a mail host or a site \'From\' address, various features including contact forms, email notification and password reset will not work. Go to the E-Mail Settings to fix this.",\n+            )  # noqa: E501\n+            IStatusMessage(self.request).addStatusMessage(message, "warning")\n \n     def custom_comment_workflow_warning(self):\n         """Return True if a custom comment workflow is enabled."""\n-        wftool = getToolByName(self.context, \'portal_workflow\', None)\n-        workflow_chain = wftool.getChainForPortalType(\'Discussion Item\')\n-        one_state_workflow_enabled = \\\n-            \'comment_one_state_workflow\' in workflow_chain\n-        comment_review_workflow_enabled = \\\n-            \'comment_review_workflow\' in workflow_chain\n+        wftool = getToolByName(self.context, "portal_workflow", None)\n+        workflow_chain = wftool.getChainForPortalType("Discussion Item")\n+        one_state_workflow_enabled = "comment_one_state_workflow" in workflow_chain\n+        comment_review_workflow_enabled = "comment_review_workflow" in workflow_chain\n         if one_state_workflow_enabled or comment_review_workflow_enabled:\n             pass\n         else:\n-            message = _(u\'discussion_text_custom_comment_workflow\',\n-                default=u\'You have configured a custom workflow for the \\\'Discussion Item\\\' content type. You can enable/disable the comment moderation in this control panel only if you use one of the default \\\'Discussion Item\\\' workflows. Go to the Types control panel to choose a workflow for the \\\'Discussion Item\\\' type.\')  # noqa: E501\n-            IStatusMessage(self.request).addStatusMessage(message, \'warning\')\n+            message = _(\n+                "discussion_text_custom_comment_workflow",\n+                default="You have configured a custom workflow for the \'Discussion Item\' content type. You can enable/disable the comment moderation in this control panel only if you use one of the default \'Discussion Item\' workflows. Go to the Types control panel to choose a workflow for the \'Discussion Item\' type.",\n+            )  # noqa: E501\n+            IStatusMessage(self.request).addStatusMessage(message, "warning")\n \n \n def notify_configuration_changed(event):\n-    """Event subscriber that is called every time the configuration changed.\n-    """\n+    """Event subscriber that is called every time the configuration changed."""\n     portal = getSite()\n-    wftool = getToolByName(portal, \'portal_workflow\', None)\n+    wftool = getToolByName(portal, "portal_workflow", None)\n \n     if IRecordModifiedEvent.providedBy(event):\n         # Discussion control panel setting changed\n-        if event.record.fieldName == \'moderation_enabled\':\n+        if event.record.fieldName == "moderation_enabled":\n             # Moderation enabled has changed\n             if event.record.value is True:\n                 # Enable moderation workflow\n-                wftool.setChainForPortalTypes((\'Discussion Item\',),\n-                                              \'comment_review_workflow\')\n+                wftool.setChainForPortalTypes(\n+                    ("Discussion Item",), "comment_review_workflow"\n+                )\n             else:\n                 # Disable moderation workflow\n-                wftool.setChainForPortalTypes((\'Discussion Item\',),\n-                                              \'comment_one_state_workflow\')\n+                wftool.setChainForPortalTypes(\n+                    ("Discussion Item",), "comment_one_state_workflow"\n+                )\n \n     if IConfigurationChangedEvent.providedBy(event):\n         # Types control panel setting changed\n-        if \'workflow\' in event.data:\n+        if "workflow" in event.data:\n             registry = queryUtility(IRegistry)\n             settings = registry.forInterface(IDiscussionSettings, check=False)\n-            workflow_chain = wftool.getChainForPortalType(\'Discussion Item\')\n+            workflow_chain = wftool.getChainForPortalType("Discussion Item")\n             if workflow_chain:\n                 workflow = workflow_chain[0]\n-                if workflow == \'comment_one_state_workflow\':\n+                if workflow == "comment_one_state_workflow":\n                     settings.moderation_enabled = False\n-                elif workflow == \'comment_review_workflow\':\n+                elif workflow == "comment_review_workflow":\n                     settings.moderation_enabled = True\n                 else:\n                     # Custom workflow\ndiff --git a/plone/app/discussion/browser/conversation.py b/plone/app/discussion/browser/conversation.py\nindex 0017da4d..ac0c9326 100644\n--- a/plone/app/discussion/browser/conversation.py\n+++ b/plone/app/discussion/browser/conversation.py\n@@ -1,19 +1,19 @@\n-# -*- coding: utf-8 -*-\n+from ..interfaces import IDiscussionSettings\n from Acquisition import aq_base\n from Acquisition import aq_chain\n from Acquisition import aq_inner\n-from plone.app.discussion.interfaces import IDiscussionSettings\n+from plone.base.interfaces import INonStructuralFolder\n+from plone.base.interfaces import IPloneSiteRoot\n+from plone.base.utils import safe_hasattr\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import IFolderish\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import INonStructuralFolder\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n-from Products.CMFPlone.utils import safe_hasattr\n from zope.component import queryUtility\n \n \n try:\n     from plone.dexterity.interfaces import IDexterityContent\n+\n     DEXTERITY_INSTALLED = True\n except ImportError:\n     DEXTERITY_INSTALLED = False\n@@ -26,15 +26,14 @@ def traverse_parents(context):\n         if not IPloneSiteRoot.providedBy(obj):\n             obj_is_folderish = IFolderish.providedBy(obj)\n             obj_is_stuctural = not INonStructuralFolder.providedBy(obj)\n-            if (obj_is_folderish and obj_is_stuctural):\n-                flag = getattr(obj, \'allow_discussion\', None)\n+            if obj_is_folderish and obj_is_stuctural:\n+                flag = getattr(obj, "allow_discussion", None)\n                 if flag is not None:\n                     return flag\n     return None\n \n \n-class ConversationView(object):\n-\n+class ConversationView:\n     def enabled(self):\n         if DEXTERITY_INSTALLED and IDexterityContent.providedBy(self.context):\n             return self._enabled_for_dexterity_types()\n@@ -42,7 +41,7 @@ def enabled(self):\n             return self._enabled_for_archetypes()\n \n     def _enabled_for_archetypes(self):\n-        """ Returns True if discussion is enabled for this conversation.\n+        """Returns True if discussion is enabled for this conversation.\n \n         This method checks five different settings in order to figure out if\n         discussion is enabled on a specific content object:\n@@ -82,7 +81,7 @@ def _enabled_for_archetypes(self):\n                 return False\n \n         # If discussion is disabled for the object, bail out\n-        obj_flag = getattr(aq_base(context), \'allow_discussion\', None)\n+        obj_flag = getattr(aq_base(context), "allow_discussion", None)\n         if obj_flag is False:\n             return False\n \n@@ -91,16 +90,16 @@ def _enabled_for_archetypes(self):\n         folder_allow_discussion = traverse_parents(context)\n \n         if folder_allow_discussion:\n-            if not getattr(self, \'allow_discussion\', None):\n+            if not getattr(self, "allow_discussion", None):\n                 return True\n         else:\n             if obj_flag:\n                 return True\n \n         # Check if discussion is allowed on the content type\n-        portal_types = getToolByName(self, \'portal_types\')\n+        portal_types = getToolByName(self, "portal_types")\n         document_fti = getattr(portal_types, context.portal_type)\n-        if not document_fti.getProperty(\'allow_discussion\'):\n+        if not document_fti.getProperty("allow_discussion"):\n             # If discussion is not allowed on the content type,\n             # check if \'allow discussion\' is overridden on the content object.\n             if not obj_flag:\n@@ -109,7 +108,7 @@ def _enabled_for_archetypes(self):\n         return True\n \n     def _enabled_for_dexterity_types(self):\n-        """ Returns True if discussion is enabled for this conversation.\n+        """Returns True if discussion is enabled for this conversation.\n \n         This method checks five different settings in order to figure out if\n         discussion is enable on a specific content object:\n@@ -134,11 +133,11 @@ def _enabled_for_dexterity_types(self):\n             return False\n \n         # Check if discussion is allowed on the content object\n-        if safe_hasattr(context, \'allow_discussion\'):\n+        if safe_hasattr(context, "allow_discussion"):\n             if context.allow_discussion is not None:\n                 return context.allow_discussion\n \n         # Check if discussion is allowed on the content type\n-        portal_types = getToolByName(self, \'portal_types\')\n+        portal_types = getToolByName(self, "portal_types")\n         document_fti = getattr(portal_types, context.portal_type)\n-        return document_fti.getProperty(\'allow_discussion\')\n+        return document_fti.getProperty("allow_discussion")\ndiff --git a/plone/app/discussion/browser/moderation.py b/plone/app/discussion/browser/moderation.py\nindex 99d6216b..1d0ee8f9 100644\n--- a/plone/app/discussion/browser/moderation.py\n+++ b/plone/app/discussion/browser/moderation.py\n@@ -1,11 +1,10 @@\n-# coding: utf-8\n from AccessControl import getSecurityManager\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n+from plone.app.discussion.events import CommentDeletedEvent\n from plone.app.discussion.events import CommentPublishedEvent\n from plone.app.discussion.events import CommentTransitionEvent\n-from plone.app.discussion.events import CommentDeletedEvent\n from plone.app.discussion.interfaces import _\n from plone.app.discussion.interfaces import IComment\n from plone.app.discussion.interfaces import IReplies\n@@ -18,21 +17,20 @@\n \n # Translations for generated values in buttons\n # States\n-_(\'comment_pending\', default=\'pending\')\n+_("comment_pending", default="pending")\n # _(\'comment_approved\', default=\'published\')\n-_(\'comment_published\', default=\'published\')\n-_(\'comment_rejected\', default=\'rejected\')\n-_(\'comment_spam\', default=\'marked as spam\')\n+_("comment_published", default="published")\n+_("comment_rejected", default="rejected")\n+_("comment_spam", default="marked as spam")\n # Transitions\n-_(\'Recall\')\n-_(\'Approve\')\n-_(\'Reject\')\n-_(\'Spam\')\n+_("Recall")\n+_("Approve")\n+_("Reject")\n+_("Spam")\n PMF = _\n \n \n class TranslationHelper(BrowserView):\n-\n     def translate(self, text=""):\n         return _(text)\n \n@@ -44,22 +42,21 @@ def translate_comment_review_state(self, rs):\n class View(BrowserView):\n     """Show comment moderation view."""\n \n-    template = ViewPageTemplateFile(\'moderation.pt\')\n+    template = ViewPageTemplateFile("moderation.pt")\n     try:\n-        template.id = \'@@moderate-comments\'\n+        template.id = "@@moderate-comments"\n     except AttributeError:\n         # id is not writeable in Zope 2.12\n         pass\n \n     def __init__(self, context, request):\n-        super(View, self).__init__(context, request)\n-        self.workflowTool = getToolByName(self.context, \'portal_workflow\')\n+        super().__init__(context, request)\n+        self.workflowTool = getToolByName(self.context, "portal_workflow")\n         self.transitions = []\n \n     def __call__(self):\n-        self.request.set(\'disable_border\', True)\n-        self.request.set(\'review_state\',\n-                         self.request.get(\'review_state\', \'pending\'))\n+        self.request.set("disable_border", True)\n+        self.request.set("review_state", self.request.get("review_state", "pending"))\n         return self.template()\n \n     def comments(self):\n@@ -67,15 +64,19 @@ def comments(self):\n \n         review_state is string or list of strings.\n         """\n-        catalog = getToolByName(self.context, \'portal_catalog\')\n-        if self.request.review_state == \'all\':\n-            return catalog(object_provides=IComment.__identifier__,\n-                           sort_on=\'created\',\n-                           sort_order=\'reverse\')\n-        return catalog(object_provides=IComment.__identifier__,\n-                       review_state=self.request.review_state,\n-                       sort_on=\'created\',\n-                       sort_order=\'reverse\')\n+        catalog = getToolByName(self.context, "portal_catalog")\n+        if self.request.review_state == "all":\n+            return catalog(\n+                object_provides=IComment.__identifier__,\n+                sort_on="created",\n+                sort_order="reverse",\n+            )\n+        return catalog(\n+            object_provides=IComment.__identifier__,\n+            review_state=self.request.review_state,\n+            sort_on="created",\n+            sort_order="reverse",\n+        )\n \n     def moderation_enabled(self):\n         """Return true if a review workflow is enabled on \'Discussion Item\'\n@@ -84,11 +85,10 @@ def moderation_enabled(self):\n         A \'review workflow\' is characterized by implementing a \'pending\'\n         workflow state.\n         """\n-        workflows = self.workflowTool.getChainForPortalType(\n-            \'Discussion Item\')\n+        workflows = self.workflowTool.getChainForPortalType("Discussion Item")\n         if workflows:\n             comment_workflow = self.workflowTool[workflows[0]]\n-            if \'pending\' in comment_workflow.states:\n+            if "pending" in comment_workflow.states:\n                 return True\n         return False\n \n@@ -100,11 +100,10 @@ def moderation_multiple_state_enabled(self):\n         A \'review multipe state workflow\' is characterized by implementing\n         a \'rejected\' workflow state and a \'spam\' workflow state.\n         """\n-        workflows = self.workflowTool.getChainForPortalType(\n-            \'Discussion Item\')\n+        workflows = self.workflowTool.getChainForPortalType("Discussion Item")\n         if workflows:\n             comment_workflow = self.workflowTool[workflows[0]]\n-            if \'spam\' in comment_workflow.states:\n+            if "spam" in comment_workflow.states:\n                 return True\n         return False\n \n@@ -125,27 +124,26 @@ def allowed_transitions(self, obj=None):\n         """\n         if obj:\n             transitions = [\n-                a for a in self.workflowTool.listActionInfos(object=obj)\n-                if a[\'category\'] == \'workflow\' and a[\'allowed\']\n-                ]\n+                a\n+                for a in self.workflowTool.listActionInfos(object=obj)\n+                if a["category"] == "workflow" and a["allowed"]\n+            ]\n             return transitions\n \n \n class ModerateCommentsEnabled(BrowserView):\n-\n     def __call__(self):\n         """Returns true if a \'review workflow\' is enabled on \'Discussion Item\'\n-           content type. A \'review workflow\' is characterized by implementing\n-           a \'pending\' workflow state.\n+        content type. A \'review workflow\' is characterized by implementing\n+        a \'pending\' workflow state.\n         """\n         context = aq_inner(self.context)\n-        workflowTool = getToolByName(context, \'portal_workflow\', None)\n-        comment_workflow = workflowTool.getChainForPortalType(\n-            \'Discussion Item\')\n+        workflowTool = getToolByName(context, "portal_workflow", None)\n+        comment_workflow = workflowTool.getChainForPortalType("Discussion Item")\n         if comment_workflow:\n             comment_workflow = comment_workflow[0]\n             comment_workflow = workflowTool[comment_workflow]\n-            if \'pending\' in comment_workflow.states:\n+            if "pending" in comment_workflow.states:\n                 return True\n \n         return False\n@@ -184,13 +182,15 @@ def __call__(self):\n             content_object.reindexObject()\n             notify(CommentDeletedEvent(self.context, comment))\n             IStatusMessage(self.context.REQUEST).addStatusMessage(\n-                _(\'Comment deleted.\'),\n-                type=\'info\')\n+                _("Comment deleted."), type="info"\n+            )\n         came_from = self.context.REQUEST.HTTP_REFERER\n         # if the referrer already has a came_from in it, don\'t redirect back\n-        if (len(came_from) == 0 or \'came_from=\' in came_from or\n-                not getToolByName(\n-                content_object, \'portal_url\').isURLInPortal(came_from)):\n+        if (\n+            len(came_from) == 0\n+            or "came_from=" in came_from\n+            or not getToolByName(content_object, "portal_url").isURLInPortal(came_from)\n+        ):\n             came_from = content_object.absolute_url()\n         return self.context.REQUEST.RESPONSE.redirect(came_from)\n \n@@ -198,8 +198,7 @@ def can_delete(self, reply):\n         """Returns true if current user has the \'Delete comments\'\n         permission.\n         """\n-        return getSecurityManager().checkPermission(\'Delete comments\',\n-                                                    aq_inner(reply))\n+        return getSecurityManager().checkPermission("Delete comments", aq_inner(reply))\n \n \n class DeleteOwnComment(DeleteComment):\n@@ -213,26 +212,23 @@ class DeleteOwnComment(DeleteComment):\n     """\n \n     def could_delete(self, comment=None):\n-        """Returns true if the comment could be deleted if it had no replies.\n-        """\n+        """Returns true if the comment could be deleted if it had no replies."""\n         sm = getSecurityManager()\n         comment = comment or aq_inner(self.context)\n         userid = sm.getUser().getId()\n-        return (\n-            sm.checkPermission(\'Delete own comments\', comment) and\n-            \'Owner\' in comment.get_local_roles_for_userid(userid)\n-        )\n+        return sm.checkPermission(\n+            "Delete own comments", comment\n+        ) and "Owner" in comment.get_local_roles_for_userid(userid)\n \n     def can_delete(self, comment=None):\n         comment = comment or self.context\n-        return (\n-            len(IReplies(aq_inner(comment))) == 0 and\n-            self.could_delete(comment=comment)\n+        return len(IReplies(aq_inner(comment))) == 0 and self.could_delete(\n+            comment=comment\n         )\n \n     def __call__(self):\n         if self.can_delete():\n-            super(DeleteOwnComment, self).__call__()\n+            super().__call__()\n         else:\n             raise Unauthorized("You\'re not allowed to delete this comment.")\n \n@@ -262,33 +258,37 @@ def __call__(self):\n         """Call CommentTransition."""\n         comment = aq_inner(self.context)\n         content_object = aq_parent(aq_parent(comment))\n-        workflow_action = self.request.form.get(\'workflow_action\', \'publish\')\n-        workflowTool = getToolByName(self.context, \'portal_workflow\')\n+        workflow_action = self.request.form.get("workflow_action", "publish")\n+        workflowTool = getToolByName(self.context, "portal_workflow")\n         workflowTool.doActionFor(comment, workflow_action)\n         comment.reindexObject()\n-        content_object.reindexObject(idxs=[\'total_comments\'])\n+        content_object.reindexObject(idxs=["total_comments"])\n         notify(CommentPublishedEvent(self.context, comment))\n         # for complexer workflows:\n         notify(CommentTransitionEvent(self.context, comment))\n-        comment_state_translated = \'\'\n+        comment_state_translated = ""\n         if workflowTool.getWorkflowsFor(comment):\n-            review_state_new = workflowTool.getInfoFor(ob=comment, name=\'review_state\')\n+            review_state_new = workflowTool.getInfoFor(ob=comment, name="review_state")\n             helper = self.context.restrictedTraverse("translationhelper")\n-            comment_state_translated = helper.translate_comment_review_state(review_state_new)\n+            comment_state_translated = helper.translate_comment_review_state(\n+                review_state_new\n+            )\n \n         msgid = _(\n             "comment_transmitted",\n-            default=\'Comment ${comment_state_translated}.\',\n-            mapping={"comment_state_translated": comment_state_translated})\n+            default="Comment ${comment_state_translated}.",\n+            mapping={"comment_state_translated": comment_state_translated},\n+        )\n         translated = self.context.translate(msgid)\n-        IStatusMessage(self.request).add(translated, type=\'info\')\n+        IStatusMessage(self.request).add(translated, type="info")\n \n         came_from = self.context.REQUEST.HTTP_REFERER\n         # if the referrer already has a came_from in it, don\'t redirect back\n-        if (len(came_from) == 0\n-            or \'came_from=\' in came_from\n-            or not getToolByName(\n-                content_object, \'portal_url\').isURLInPortal(came_from)):\n+        if (\n+            len(came_from) == 0\n+            or "came_from=" in came_from\n+            or not getToolByName(content_object, "portal_url").isURLInPortal(came_from)\n+        ):\n             came_from = content_object.absolute_url()\n         return self.context.REQUEST.RESPONSE.redirect(came_from)\n \n@@ -317,19 +317,19 @@ class BulkActionsView(BrowserView):\n     """\n \n     def __init__(self, context, request):\n-        super(BulkActionsView, self).__init__(context, request)\n-        self.workflowTool = getToolByName(context, \'portal_workflow\')\n+        super().__init__(context, request)\n+        self.workflowTool = getToolByName(context, "portal_workflow")\n \n     def __call__(self):\n         """Call BulkActionsView."""\n-        if \'form.select.BulkAction\' in self.request:\n-            bulkaction = self.request.get(\'form.select.BulkAction\')\n-            self.paths = self.request.get(\'paths\')\n+        if "form.select.BulkAction" in self.request:\n+            bulkaction = self.request.get("form.select.BulkAction")\n+            self.paths = self.request.get("paths")\n             if self.paths:\n-                if bulkaction == \'-1\':\n+                if bulkaction == "-1":\n                     # no bulk action was selected\n                     pass\n-                elif bulkaction == \'delete\':\n+                elif bulkaction == "delete":\n                     self.delete()\n                 else:\n                     self.transmit(bulkaction)\n@@ -346,13 +346,14 @@ def transmit(self, action=None):\n             comment = context.restrictedTraverse(path)\n             content_object = aq_parent(aq_parent(comment))\n             allowed_transitions = [\n-                transition[\'id\'] for transition in self.workflowTool.listActionInfos(object=comment)\n-                if transition[\'category\'] == \'workflow\' and transition[\'allowed\']\n-                ]\n+                transition["id"]\n+                for transition in self.workflowTool.listActionInfos(object=comment)\n+                if transition["category"] == "workflow" and transition["allowed"]\n+            ]\n             if action in allowed_transitions:\n                 self.workflowTool.doActionFor(comment, action)\n                 comment.reindexObject()\n-                content_object.reindexObject(idxs=[\'total_comments\'])\n+                content_object.reindexObject(idxs=["total_comments"])\n                 notify(CommentPublishedEvent(content_object, comment))\n                 # for complexer workflows:\n                 notify(CommentTransitionEvent(self.context, comment))\n@@ -370,5 +371,5 @@ def delete(self):\n             conversation = aq_parent(comment)\n             content_object = aq_parent(conversation)\n             del conversation[comment.id]\n-            content_object.reindexObject(idxs=[\'total_comments\'])\n+            content_object.reindexObject(idxs=["total_comments"])\n             notify(CommentDeletedEvent(content_object, comment))\ndiff --git a/plone/app/discussion/browser/traversal.py b/plone/app/discussion/browser/traversal.py\nindex 1e2251c5..f626621d 100644\n--- a/plone/app/discussion/browser/traversal.py\n+++ b/plone/app/discussion/browser/traversal.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Implement the ++comments++ traversal namespace. This should return the\n IDiscussion container for the context, from which traversal will continue\n into an actual comment object.\n@@ -15,7 +14,7 @@\n \n @implementer(ITraversable)\n @adapter(Interface, IBrowserRequest)\n-class ConversationNamespace(object):\n+class ConversationNamespace:\n     """Allow traversal into a conversation via a ++conversation++name\n     namespace. The name is the name of an adapter from context to\n     IConversation. The special name \'default\' will be taken as the default\n@@ -29,8 +28,8 @@ def __init__(self, context, request=None):\n \n     def traverse(self, name, ignore):\n \n-        if name == \'default\':\n-            name = u\'\'\n+        if name == "default":\n+            name = ""\n \n         conversation = queryAdapter(self.context, IConversation, name=name)\n         if conversation is None:\ndiff --git a/plone/app/discussion/browser/validator.py b/plone/app/discussion/browser/validator.py\nindex d1582e9a..9d28bd95 100644\n--- a/plone/app/discussion/browser/validator.py\n+++ b/plone/app/discussion/browser/validator.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Captcha validator, see captcha.txt for design notes.\n """\n from Acquisition import aq_inner\n@@ -39,16 +38,17 @@ class CaptchaValidator(validator.SimpleFieldValidator):\n     # We adapt the CaptchaValidator class to all form fields (IField)\n \n     def validate(self, value):\n-        super(CaptchaValidator, self).validate(value)\n+        super().validate(value)\n \n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n \n-        if settings.captcha in (\'captcha\', \'recaptcha\', \'norobots\'):\n-            captcha = getMultiAdapter((aq_inner(self.context), self.request),\n-                                      name=settings.captcha)\n+        if settings.captcha in ("captcha", "recaptcha", "norobots"):\n+            captcha = getMultiAdapter(\n+                (aq_inner(self.context), self.request), name=settings.captcha\n+            )\n             if not captcha.verify(input=value):\n-                if settings.captcha == \'norobots\':\n+                if settings.captcha == "norobots":\n                     raise WrongNorobotsAnswer\n                 else:\n                     raise WrongCaptchaCode\n@@ -57,5 +57,4 @@ def validate(self, value):\n \n \n # Register Captcha validator for the Captcha field in the ICaptcha Form\n-validator.WidgetValidatorDiscriminators(CaptchaValidator,\n-                                        field=ICaptcha[\'captcha\'])\n+validator.WidgetValidatorDiscriminators(CaptchaValidator, field=ICaptcha["captcha"])\ndiff --git a/plone/app/discussion/catalog.py b/plone/app/discussion/catalog.py\nindex 73c5ab2d..6413d114 100644\n--- a/plone/app/discussion/catalog.py\n+++ b/plone/app/discussion/catalog.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Catalog indexers, using plone.indexer. These will populate standard catalog\n indexes with values based on the IComment interface.\n \n@@ -7,13 +6,12 @@\n from DateTime import DateTime\n from plone.app.discussion.interfaces import IComment\n from plone.app.discussion.interfaces import IConversation\n+from plone.base.utils import safe_text\n from plone.indexer import indexer\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.interfaces import IContentish\n-from Products.CMFPlone.utils import safe_unicode\n from Products.ZCatalog.interfaces import IZCatalog\n \n-import six\n \n MAX_DESCRIPTION = 25\n \n@@ -24,7 +22,7 @@\n def total_comments(object):\n     # Total number of comments on a conversation\n     # Indexers won\'t work on old discussion items\n-    if object.meta_type != \'Discussion Item\':\n+    if object.meta_type != "Discussion Item":\n         try:\n             conversation = IConversation(object)\n             return conversation.total_comments()\n@@ -38,7 +36,7 @@ def total_comments(object):\n def last_comment_date(object):\n     # Date of the latest comment on a conversation\n     # Indexers won\'t work on old discussion items\n-    if object.meta_type != \'Discussion Item\':\n+    if object.meta_type != "Discussion Item":\n         try:\n             conversation = IConversation(object)\n             return conversation.last_comment_date\n@@ -52,7 +50,7 @@ def last_comment_date(object):\n def commentators(object):\n     # List of commentators on a conversation\n     # Indexers won\'t work on old discussion items\n-    if object.meta_type != \'Discussion Item\':\n+    if object.meta_type != "Discussion Item":\n         try:\n             conversation = IConversation(object)\n             return conversation.public_commentators\n@@ -61,6 +59,7 @@ def commentators(object):\n             # implemented an adapter for it\n             pass\n \n+\n # Comment Indexers\n \n \n@@ -73,26 +72,24 @@ def title(object):\n def creator(object):\n     if not object.creator:\n         return\n-    value = safe_unicode(object.creator)\n-    if six.PY2:\n-        return value.encode(\'utf8\')\n+    value = safe_text(object.creator)\n     return value\n \n \n @indexer(IComment)\n def description(object):\n     # Return the first 25 words of the comment text and append \' [...]\'\n-    text = \' \'.join(\n-        object.getText(targetMimetype=\'text/plain\').split()[:MAX_DESCRIPTION],\n+    text = " ".join(\n+        object.getText(targetMimetype="text/plain").split()[:MAX_DESCRIPTION],\n     )\n     if len(object.getText().split()) > 25:\n-        text += \' [...]\'\n+        text += " [...]"\n     return text\n \n \n @indexer(IComment)\n def searchable_text(object):\n-    return object.getText(targetMimetype=\'text/plain\')\n+    return object.getText(targetMimetype="text/plain")\n \n \n @indexer(IComment)\n@@ -106,42 +103,42 @@ def in_response_to(object):\n def effective(object):\n     # the catalog index needs Zope DateTime instead of Python datetime\n     return DateTime(\n-            object.creation_date.year,\n-            object.creation_date.month,\n-            object.creation_date.day,\n-            object.creation_date.hour,\n-            object.creation_date.minute,\n-            object.creation_date.second,\n-            \'GMT\',\n-            )\n+        object.creation_date.year,\n+        object.creation_date.month,\n+        object.creation_date.day,\n+        object.creation_date.hour,\n+        object.creation_date.minute,\n+        object.creation_date.second,\n+        "GMT",\n+    )\n \n \n @indexer(IComment)\n def created(object):\n     # the catalog index needs Zope DateTime instead of Python datetime\n     return DateTime(\n-            object.creation_date.year,\n-            object.creation_date.month,\n-            object.creation_date.day,\n-            object.creation_date.hour,\n-            object.creation_date.minute,\n-            object.creation_date.second,\n-            \'GMT\',\n-            )\n+        object.creation_date.year,\n+        object.creation_date.month,\n+        object.creation_date.day,\n+        object.creation_date.hour,\n+        object.creation_date.minute,\n+        object.creation_date.second,\n+        "GMT",\n+    )\n \n \n @indexer(IComment)\n def modified(object):\n     # the catalog index needs Zope DateTime instead of Python datetime\n     return DateTime(\n-            object.modification_date.year,\n-            object.modification_date.month,\n-            object.modification_date.day,\n-            object.modification_date.hour,\n-            object.modification_date.minute,\n-            object.modification_date.second,\n-            \'GMT\',\n-            )\n+        object.modification_date.year,\n+        object.modification_date.month,\n+        object.modification_date.day,\n+        object.modification_date.hour,\n+        object.modification_date.minute,\n+        object.modification_date.second,\n+        "GMT",\n+    )\n \n \n # Override the conversation indexers for comments\ndiff --git a/plone/app/discussion/comment.py b/plone/app/discussion/comment.py\nindex cc1099f9..438e7266 100644\n--- a/plone/app/discussion/comment.py\n+++ b/plone/app/discussion/comment.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """The default comment class and factory.\n """\n from AccessControl import ClassSecurityInfo\n@@ -21,14 +20,14 @@\n from plone.app.discussion.interfaces import IComment\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IDiscussionSettings\n+from plone.base.interfaces.controlpanel import IMailSchema\n+from plone.base.utils import safe_text\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore import permissions\n from Products.CMFCore.CMFCatalogAware import CatalogAware\n from Products.CMFCore.CMFCatalogAware import WorkflowAware\n from Products.CMFCore.DynamicType import DynamicType\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n-from Products.CMFPlone.utils import safe_unicode\n from smtplib import SMTPException\n from zope.annotation.interfaces import IAnnotatable\n from zope.component import getUtility\n@@ -40,61 +39,69 @@\n from zope.interface import implementer\n \n import logging\n-import six\n \n \n COMMENT_TITLE = _(\n-    u\'comment_title\',\n-    default=u\'${author_name} on ${content}\',\n-    )\n+    "comment_title",\n+    default="${author_name} on ${content}",\n+)\n \n MAIL_NOTIFICATION_MESSAGE = _(\n-    u\'mail_notification_message\',\n-    default=u\'A comment on "${title}" \'\n-            u\'has been posted here: ${link}\\n\\n\'\n-            u\'---\\n\'\n-            u\'${text}\\n\'\n-            u\'---\\n\',\n-    )\n+    "mail_notification_message",\n+    default=\'A comment on "${title}" \'\n+    "has been posted here: ${link}\\n\\n"\n+    "---\\n"\n+    "${text}\\n"\n+    "---\\n",\n+)\n \n MAIL_NOTIFICATION_MESSAGE_MODERATOR = _(\n-    u\'mail_notification_message_moderator2\',\n-    default=u\'A comment on "${title}" \'\n-            u\'has been posted by ${commentator}\\n\'\n-            u\'here: ${link}\\n\\n\'\n-            u\'---\\n\\n\'\n-            u\'${text}\\n\\n\'\n-            u\'---\\n\\n\'\n-            u\'Log in to moderate.\\n\\n\',\n-    )\n+    "mail_notification_message_moderator2",\n+    default=\'A comment on "${title}" \'\n+    "has been posted by ${commentator}\\n"\n+    "here: ${link}\\n\\n"\n+    "---\\n\\n"\n+    "${text}\\n\\n"\n+    "---\\n\\n"\n+    "Log in to moderate.\\n\\n",\n+)\n \n-logger = logging.getLogger(\'plone.app.discussion\')\n+logger = logging.getLogger("plone.app.discussion")\n \n \n @implementer(IComment)\n-class Comment(CatalogAware, WorkflowAware, DynamicType, Traversable,\n-              RoleManager, Owned, Implicit, Persistent):\n+class Comment(\n+    CatalogAware,\n+    WorkflowAware,\n+    DynamicType,\n+    Traversable,\n+    RoleManager,\n+    Owned,\n+    Implicit,\n+    Persistent,\n+):\n     """A comment.\n \n     This object attempts to be as lightweight as possible. We implement a\n     number of standard methods instead of subclassing, to have total control\n     over what goes into the object.\n     """\n+\n     security = ClassSecurityInfo()\n \n-    meta_type = portal_type = \'Discussion Item\'\n+    meta_type = portal_type = "Discussion Item"\n     # This needs to be kept in sync with types/Discussion_Item.xml title\n-    fti_title = \'Comment\'\n+    fti_title = "Comment"\n \n     __parent__ = None\n \n     comment_id = None  # long\n     in_reply_to = None  # long\n \n-    title = u\'\'\n+    title = ""\n \n     mime_type = None\n-    text = u\'\'\n+    text = ""\n \n     creator = None\n     creation_date = None\n@@ -113,19 +120,22 @@ class Comment(CatalogAware, WorkflowAware, DynamicType, Traversable,\n \n     def __init__(self):\n         self.creation_date = self.modification_date = datetime.utcnow()\n-        self.mime_type = \'text/plain\'\n+        self.mime_type = "text/plain"\n \n         user = getSecurityManager().getUser()\n         if user and user.getId():\n             aclpath = [x for x in user.getPhysicalPath() if x]\n-            self._owner = (aclpath, user.getId(),)\n+            self._owner = (\n+                aclpath,\n+                user.getId(),\n+            )\n             self.__ac_local_roles__ = {\n-                user.getId(): [\'Owner\'],\n+                user.getId(): ["Owner"],\n             }\n \n     @property\n     def __name__(self):\n-        return self.comment_id and six.text_type(self.comment_id) or None\n+        return self.comment_id and str(self.comment_id) or None\n \n     @property\n     def id(self):\n@@ -137,32 +147,30 @@ def getId(self):\n \n     def getText(self, targetMimetype=None):\n         """The body text of a comment."""\n-        transforms = getToolByName(self, \'portal_transforms\')\n+        transforms = getToolByName(self, "portal_transforms")\n \n         if targetMimetype is None:\n-            targetMimetype = \'text/x-html-safe\'\n+            targetMimetype = "text/x-html-safe"\n \n-        sourceMimetype = getattr(self, \'mime_type\', None)\n+        sourceMimetype = getattr(self, "mime_type", None)\n         if sourceMimetype is None:\n             registry = queryUtility(IRegistry)\n             settings = registry.forInterface(IDiscussionSettings, check=False)\n             sourceMimetype = settings.text_transform\n         text = self.text\n         if text is None:\n-            return \'\'\n-        if six.PY2 and isinstance(text, six.text_type):\n-            text = text.encode(\'utf8\')\n+            return ""\n         transform = transforms.convertTo(\n-            targetMimetype,\n-            text,\n-            context=self,\n-            mimetype=sourceMimetype)\n+            targetMimetype, text, context=self, mimetype=sourceMimetype\n+        )\n         if transform:\n             return transform.getData()\n         else:\n-            logger = logging.getLogger(\'plone.app.discussion\')\n-            msg = u\'Transform "{0}" => "{1}" not available. Failed to \' \\\n-                  u\'transform comment "{2}".\'\n+            logger = logging.getLogger("plone.app.discussion")\n+            msg = (\n+                \'Transform "{0}" => "{1}" not available. Failed to \'\n+                \'transform comment "{2}".\'\n+            )\n             logger.error(\n                 msg.format(\n                     sourceMimetype,\n@@ -182,8 +190,8 @@ def Title(self):\n             author_name = translate(\n                 Message(\n                     _(\n-                        u\'label_anonymous\',\n-                        default=u\'Anonymous\',\n+                        "label_anonymous",\n+                        default="Anonymous",\n                     ),\n                 ),\n             )\n@@ -194,9 +202,14 @@ def Title(self):\n         # conversation, the parent of the conversation is the content object).\n         content = aq_base(self.__parent__.__parent__)\n         title = translate(\n-            Message(COMMENT_TITLE,\n-                    mapping={\'author_name\': safe_unicode(author_name),\n-                             \'content\': safe_unicode(content.Title())}))\n+            Message(\n+                COMMENT_TITLE,\n+                mapping={\n+                    "author_name": safe_text(author_name),\n+                    "content": safe_text(content.Title()),\n+                },\n+            )\n+        )\n         return title\n \n     def Creator(self):\n@@ -224,25 +237,23 @@ def opaqueValues(self):  # pragma: no cover\n \n \n def notify_workflow(obj, event):\n-    """Tell the workflow tool when a comment is added\n-    """\n-    tool = getToolByName(obj, \'portal_workflow\', None)\n+    """Tell the workflow tool when a comment is added"""\n+    tool = getToolByName(obj, "portal_workflow", None)\n     if tool is not None:\n         tool.notifyCreated(obj)\n \n \n def notify_content_object(obj, event):\n-    """Tell the content object when a comment is added\n-    """\n+    """Tell the content object when a comment is added"""\n     content_obj = aq_parent(aq_parent(obj))\n-    content_obj.reindexObject(idxs=(\'total_comments\',\n-                                    \'last_comment_date\',\n-                                    \'commentators\'))\n+    content_obj.reindexObject(\n+        idxs=("total_comments", "last_comment_date", "commentators")\n+    )\n \n \n def notify_content_object_deleted(obj, event):\n     """Remove all comments of a content object when the content object has been\n-       deleted.\n+    deleted.\n     """\n     if IAnnotatable.providedBy(obj):\n         conversation = IConversation(obj)\n@@ -251,40 +262,40 @@ def notify_content_object_deleted(obj, event):\n \n \n def notify_comment_added(obj, event):\n-    """ Notify custom discussion events when a comment is added or replied\n-    """\n+    """Notify custom discussion events when a comment is added or replied"""\n     conversation = aq_parent(obj)\n     context = aq_parent(conversation)\n-    if getattr(obj, \'in_reply_to\', None):\n+    if getattr(obj, "in_reply_to", None):\n         return notify(ReplyAddedEvent(context, obj))\n     return notify(CommentAddedEvent(context, obj))\n \n \n def notify_comment_modified(obj, event):\n-    """ Notify custom discussion events when a comment, or a reply, is modified\n-    """\n+    """Notify custom discussion events when a comment, or a reply, is modified"""\n     conversation = aq_parent(obj)\n     context = aq_parent(conversation)\n-    if getattr(obj, \'in_reply_to\', None):\n+    if getattr(obj, "in_reply_to", None):\n         return notify(ReplyModifiedEvent(context, obj))\n     return notify(CommentModifiedEvent(context, obj))\n \n \n def notify_comment_removed(obj, event):\n-    """ Notify custom discussion events when a comment or reply is removed\n-    """\n+    """Notify custom discussion events when a comment or reply is removed"""\n     conversation = aq_parent(obj)\n     context = aq_parent(conversation)\n-    if getattr(obj, \'in_reply_to\', None):\n+    if getattr(obj, "in_reply_to", None):\n         return notify(ReplyRemovedEvent(context, obj))\n     return notify(CommentRemovedEvent(context, obj))\n \n \n def notify_content_object_moved(obj, event):\n-    """Update all comments of a content object that has been moved.\n-    """\n-    if event.oldParent is None or event.newParent is None \\\n-            or event.oldName is None or event.newName is None:\n+    """Update all comments of a content object that has been moved."""\n+    if (\n+        event.oldParent is None\n+        or event.newParent is None\n+        or event.oldName is None\n+        or event.newName is None\n+    ):\n         return\n \n     # This method is also called for sublocations of moved objects. We\n@@ -293,21 +304,19 @@ def notify_content_object_moved(obj, event):\n     # in the object hierarchy. The object is already moved at this point. so\n     # obj.getPhysicalPath retruns the new path get the part of the path that\n     # was moved.\n-    moved_path = obj.getPhysicalPath()[\n-        len(event.newParent.getPhysicalPath()) + 1:\n-    ]\n+    moved_path = obj.getPhysicalPath()[len(event.newParent.getPhysicalPath()) + 1 :]\n \n     # Remove comments at the old location from catalog\n-    catalog = getToolByName(obj, \'portal_catalog\')\n-    old_path = \'/\'.join(\n-        event.oldParent.getPhysicalPath() +\n-        (event.oldName,) +\n-        moved_path,\n+    catalog = getToolByName(obj, "portal_catalog")\n+    old_path = "/".join(\n+        event.oldParent.getPhysicalPath() + (event.oldName,) + moved_path,\n+    )\n+    brains = catalog.searchResults(\n+        dict(\n+            path={"query": old_path},\n+            portal_type="Discussion Item",\n+        )\n     )\n-    brains = catalog.searchResults(dict(\n-        path={\'query\': old_path},\n-        portal_type=\'Discussion Item\',\n-    ))\n     for brain in brains:\n         catalog.uncatalog_object(brain.getPath())\n     # Reindex comment at the new location\n@@ -320,11 +329,11 @@ def notify_content_object_moved(obj, event):\n def notify_user(obj, event):\n     """Tell users when a comment has been added.\n \n-       This method composes and sends emails to all users that have added a\n-       comment to this conversation and enabled user notification.\n+    This method composes and sends emails to all users that have added a\n+    comment to this conversation and enabled user notification.\n \n-       This requires the user_notification setting to be enabled in the\n-       discussion control panel.\n+    This requires the user_notification setting to be enabled in the\n+    discussion control panel.\n     """\n \n     # Check if user notification is enabled\n@@ -334,9 +343,9 @@ def notify_user(obj, event):\n         return\n \n     # Get informations that are necessary to send an email\n-    mail_host = getToolByName(obj, \'MailHost\')\n+    mail_host = getToolByName(obj, "MailHost")\n     registry = getUtility(IRegistry)\n-    mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n+    mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n     sender = mail_settings.email_from_address\n \n     # Check if a sender address is available\n@@ -360,15 +369,14 @@ def notify_user(obj, event):\n     if not emails:\n         return\n \n-    subject = translate(_(u\'A comment has been posted.\'),\n-                        context=obj.REQUEST)\n+    subject = translate(_("A comment has been posted."), context=obj.REQUEST)\n     message = translate(\n         Message(\n             MAIL_NOTIFICATION_MESSAGE,\n             mapping={\n-                \'title\': safe_unicode(content_object.title),\n-                \'link\': content_object.absolute_url() + \'/view#\' + obj.id,\n-                \'text\': obj.text,\n+                "title": safe_text(content_object.title),\n+                "link": content_object.absolute_url() + "/view#" + obj.id,\n+                "text": obj.text,\n             },\n         ),\n         context=obj.REQUEST,\n@@ -381,12 +389,11 @@ def notify_user(obj, event):\n                 email,\n                 sender,\n                 subject,\n-                charset=\'utf-8\',\n+                charset="utf-8",\n             )\n         except SMTPException:\n             logger.error(\n-                \'SMTP exception while trying to send an \' +\n-                \'email from %s to %s\',\n+                "SMTP exception while trying to send an " + "email from %s to %s",\n                 sender,\n                 email,\n             )\n@@ -395,15 +402,15 @@ def notify_user(obj, event):\n def notify_moderator(obj, event):\n     """Tell the moderator when a comment needs attention.\n \n-       This method sends an email to the moderator if comment moderation a new\n-       comment has been added that needs to be approved.\n+    This method sends an email to the moderator if comment moderation a new\n+    comment has been added that needs to be approved.\n \n-       The moderator_notification setting has to be enabled in the discussion\n-       control panel.\n+    The moderator_notification setting has to be enabled in the discussion\n+    control panel.\n \n-       Configure the moderator e-mail address in the discussion control panel.\n-       If no moderator is configured but moderator notifications are turned on,\n-       the site admin email (from the mail control panel) will be used.\n+    Configure the moderator e-mail address in the discussion control panel.\n+    If no moderator is configured but moderator notifications are turned on,\n+    the site admin email (from the mail control panel) will be used.\n     """\n     # Check if moderator notification is enabled\n     registry = queryUtility(IRegistry)\n@@ -412,9 +419,9 @@ def notify_moderator(obj, event):\n         return\n \n     # Get informations that are necessary to send an email\n-    mail_host = getToolByName(obj, \'MailHost\')\n+    mail_host = getToolByName(obj, "MailHost")\n     registry = getUtility(IRegistry)\n-    mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n+    mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n     sender = mail_settings.email_from_address\n \n     if settings.moderator_email:\n@@ -430,22 +437,23 @@ def notify_moderator(obj, event):\n     content_object = aq_parent(conversation)\n \n     # Compose email\n-    subject = translate(_(u\'A comment has been posted.\'), context=obj.REQUEST)\n+    subject = translate(_("A comment has been posted."), context=obj.REQUEST)\n     message = translate(\n         Message(\n             MAIL_NOTIFICATION_MESSAGE_MODERATOR,\n             mapping={\n-                \'title\': safe_unicode(content_object.title),\n-                \'link\': content_object.absolute_url() + \'/view#\' + obj.id,\n-                \'text\': obj.text,\n-                \'commentator\': obj.author_email or translate(\n-                        Message(\n-                            _(\n-                                u\'label_anonymous\',\n-                                default=u\'Anonymous\',\n-                            ),\n+                "title": safe_text(content_object.title),\n+                "link": content_object.absolute_url() + "/view#" + obj.id,\n+                "text": obj.text,\n+                "commentator": obj.author_email\n+                or translate(\n+                    Message(\n+                        _(\n+                            "label_anonymous",\n+                            default="Anonymous",\n                         ),\n-                    )\n+                    ),\n+                ),\n             },\n         ),\n         context=obj.REQUEST,\n@@ -453,12 +461,12 @@ def notify_moderator(obj, event):\n \n     # Send email\n     try:\n-        mail_host.send(message, mto, sender, subject, charset=\'utf-8\')\n+        mail_host.send(message, mto, sender, subject, charset="utf-8")\n     except SMTPException as e:\n         logger.error(\n-            \'SMTP exception (%s) while trying to send an \' +\n-            \'email notification to the comment moderator \' +\n-            \'(from %s to %s, message: %s)\',\n+            "SMTP exception (%s) while trying to send an "\n+            + "email notification to the comment moderator "\n+            + "(from %s to %s, message: %s)",\n             e,\n             sender,\n             mto,\ndiff --git a/plone/app/discussion/configure.zcml b/plone/app/discussion/configure.zcml\nindex aabd851d..fb72ceef 100644\n--- a/plone/app/discussion/configure.zcml\n+++ b/plone/app/discussion/configure.zcml\n@@ -39,7 +39,7 @@\n         description="Commenting infrastructure for Plone"\n         directory="profiles/default"\n         provides="Products.GenericSetup.interfaces.EXTENSION"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+        for="plone.base.interfaces.IPloneSiteRoot"\n         />\n     <!-- For upgrade steps see upgrades.zcml. -->\n \ndiff --git a/plone/app/discussion/contentrules.py b/plone/app/discussion/contentrules.py\nindex c8f602a8..bc752b24 100644\n--- a/plone/app/discussion/contentrules.py\n+++ b/plone/app/discussion/contentrules.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """ Content rules handlers\n """\n from plone.app.discussion import _\n@@ -7,101 +6,94 @@\n try:\n     from plone.stringinterp.adapters import BaseSubstitution\n except ImportError:\n-    class BaseSubstitution(object):\n-        """ Fallback class if plone.stringinterp is not available\n-        """\n+\n+    class BaseSubstitution:\n+        """Fallback class if plone.stringinterp is not available"""\n \n         def __init__(self, context, **kwargs):\n             self.context = context\n \n+\n try:\n     from plone.app.contentrules.handlers import execute\n except ImportError:\n+\n     def execute(context, event):\n         return False\n \n \n def execute_comment(event):\n-    """ Execute comment content rules\n-    """\n+    """Execute comment content rules"""\n     execute(event.object, event)\n \n \n class CommentSubstitution(BaseSubstitution):\n-    """ Comment string substitution\n-    """\n+    """Comment string substitution"""\n \n     def __init__(self, context, **kwargs):\n-        super(CommentSubstitution, self).__init__(context, **kwargs)\n+        super().__init__(context, **kwargs)\n \n     @property\n     def event(self):\n-        """ event that triggered the content rule\n-        """\n-        return self.context.REQUEST.get(\'event\')\n+        """event that triggered the content rule"""\n+        return self.context.REQUEST.get("event")\n \n     @property\n     def comment(self):\n-        """ Get changed inline comment\n-        """\n+        """Get changed inline comment"""\n         return self.event.comment\n \n \n class Id(CommentSubstitution):\n-    """ Comment id string substitution\n-    """\n-    category = _(u\'Comments\')\n-    description = _(u\'Comment id\')\n+    """Comment id string substitution"""\n+\n+    category = _("Comments")\n+    description = _("Comment id")\n \n     def safe_call(self):\n-        """ Safe call\n-        """\n-        return getattr(self.comment, \'comment_id\', u\'\')\n+        """Safe call"""\n+        return getattr(self.comment, "comment_id", "")\n \n \n class Text(CommentSubstitution):\n-    """ Comment text\n-    """\n-    category = _(u\'Comments\')\n-    description = _(u\'Comment text\')\n+    """Comment text"""\n+\n+    category = _("Comments")\n+    description = _("Comment text")\n \n     def safe_call(self):\n-        """ Safe call\n-        """\n-        return getattr(self.comment, \'text\', u\'\')\n+        """Safe call"""\n+        return getattr(self.comment, "text", "")\n \n \n class AuthorUserName(CommentSubstitution):\n-    """ Comment author user name string substitution\n-    """\n-    category = _(u\'Comments\')\n-    description = _(u\'Comment author user name\')\n+    """Comment author user name string substitution"""\n+\n+    category = _("Comments")\n+    description = _("Comment author user name")\n \n     def safe_call(self):\n-        """ Safe call\n-        """\n-        return getattr(self.comment, \'author_username\', u\'\')\n+        """Safe call"""\n+        return getattr(self.comment, "author_username", "")\n \n \n class AuthorFullName(CommentSubstitution):\n-    """ Comment author full name string substitution\n-    """\n-    category = _(u\'Comments\')\n-    description = _(u\'Comment author full name\')\n+    """Comment author full name string substitution"""\n+\n+    category = _("Comments")\n+    description = _("Comment author full name")\n \n     def safe_call(self):\n-        """ Safe call\n-        """\n-        return getattr(self.comment, \'author_name\', u\'\')\n+        """Safe call"""\n+        return getattr(self.comment, "author_name", "")\n \n \n class AuthorEmail(CommentSubstitution):\n-    """ Comment author email string substitution\n-    """\n-    category = _(u\'Comments\')\n-    description = _(u\'Comment author email\')\n+    """Comment author email string substitution"""\n+\n+    category = _("Comments")\n+    description = _("Comment author email")\n \n     def safe_call(self):\n-        """ Safe call\n-        """\n-        return getattr(self.comment, \'author_email\', u\'\')\n+        """Safe call"""\n+        return getattr(self.comment, "author_email", "")\ndiff --git a/plone/app/discussion/conversation.py b/plone/app/discussion/conversation.py\nindex ae133018..1cdb2663 100644\n--- a/plone/app/discussion/conversation.py\n+++ b/plone/app/discussion/conversation.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """The conversation and replies adapters\n \n The conversation is responsible for storing all comments. It provides a\n@@ -10,6 +9,10 @@\n manipulating the comments directly in reply to a particular comment or at the\n top level of the conversation.\n """\n+from .comment import Comment\n+from .interfaces import DISCUSSION_ANNOTATION_KEY as ANNOTATION_KEY\n+from .interfaces import IConversation\n+from .interfaces import IReplies\n from AccessControl.SpecialUsers import nobody as user_nobody\n from Acquisition import aq_base\n from Acquisition import aq_inner\n@@ -22,11 +25,7 @@\n from OFS.event import ObjectWillBeRemovedEvent\n from OFS.Traversable import Traversable\n from persistent import Persistent\n-from plone.app.discussion.comment import Comment\n-from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.interfaces import IReplies\n-from Products.CMFPlone import DISCUSSION_ANNOTATION_KEY as ANNOTATION_KEY\n-from Products.CMFPlone.interfaces import IHideFromBreadcrumbs\n+from plone.base.interfaces import IHideFromBreadcrumbs\n from zope.annotation.interfaces import IAnnotatable\n from zope.annotation.interfaces import IAnnotations\n from zope.component import adapter\n@@ -37,7 +36,6 @@\n from zope.lifecycleevent import ObjectCreatedEvent\n from zope.lifecycleevent import ObjectRemovedEvent\n \n-import six\n import time\n \n \n@@ -51,7 +49,7 @@ class Conversation(Traversable, Persistent, Explicit):\n \n     __allow_access_to_unprotected_subobjects__ = True\n \n-    def __init__(self, id=\'++conversation++default\'):\n+    def __init__(self, id="++conversation++default"):\n         self.id = id\n \n         # username -> count of comments; key is removed when count reaches 0\n@@ -72,12 +70,11 @@ def getId(self):\n \n     def enabled(self):\n         parent = aq_inner(self.__parent__)\n-        return parent.restrictedTraverse(\'@@conversation_view\').enabled()\n+        return parent.restrictedTraverse("@@conversation_view").enabled()\n \n     def total_comments(self):\n         public_comments = [\n-            x for x in self.values()\n-            if user_nobody.has_permission(\'View\', x)\n+            x for x in self.values() if user_nobody.has_permission("View", x)\n         ]\n         return len(public_comments)\n \n@@ -88,7 +85,7 @@ def last_comment_date(self):\n         comment_keys = self._comments.keys()\n         for comment_key in reversed(comment_keys):\n             comment = self._comments[comment_key]\n-            if user_nobody.has_permission(\'View\', comment):\n+            if user_nobody.has_permission("View", comment):\n                 return comment.creation_date\n         return None\n \n@@ -100,7 +97,7 @@ def commentators(self):\n     def public_commentators(self):\n         retval = set()\n         for comment in self._comments.values():\n-            if not user_nobody.has_permission(\'View\', comment):\n+            if not user_nobody.has_permission("View", comment):\n                 continue\n             retval.add(comment.author_username)\n         return tuple(retval)\n@@ -109,8 +106,7 @@ def objectIds(self):\n         return self._comments.keys()\n \n     def getComments(self, start=0, size=None):\n-        """Get unthreaded comments\n-        """\n+        """Get unthreaded comments"""\n         count = 0\n         for comment in self._comments.values(min=start):\n             # Yield the acquisition wrapped comment\n@@ -121,20 +117,18 @@ def getComments(self, start=0, size=None):\n                 return\n \n     def getThreads(self, start=0, size=None, root=0, depth=None):\n-        """Get threaded comments\n-        """\n+        """Get threaded comments"""\n \n         def recurse(comment_id, d=0):\n             # Yield the current comment before we look for its children\n-            yield {\'id\': comment_id, \'comment\': self[comment_id], \'depth\': d}\n+            yield {"id": comment_id, "comment": self[comment_id], "depth": d}\n \n             # Recurse if there are children and we are not out of our depth\n             if depth is None or d + 1 < depth:\n                 children = self._children.get(comment_id, None)\n                 if children is not None:\n                     for child_id in children:\n-                        for value in recurse(child_id, d + 1):\n-                            yield value\n+                        yield from recurse(child_id, d + 1)\n \n         # Find top level threads\n         comments = self._children.get(root, None)\n@@ -148,8 +142,7 @@ def recurse(comment_id, d=0):\n                     return\n \n                 # Let the closure recurse\n-                for value in recurse(comment_id):\n-                    yield value\n+                yield from recurse(comment_id)\n \n     def addComment(self, comment):\n         """Add a new comment. The parent id should have been set already. The\n@@ -209,8 +202,7 @@ def __contains__(self, key):\n         return int(key) in self._comments\n \n     def __getitem__(self, key):\n-        """Get an item by its int key\n-        """\n+        """Get an item by its int key"""\n         try:\n             comment_id = int(key)\n         except ValueError:\n@@ -218,8 +210,7 @@ def __getitem__(self, key):\n         return self._comments[comment_id].__of__(self)\n \n     def __delitem__(self, key, suppress_container_modified=False):\n-        """Delete an item by its int key\n-        """\n+        """Delete an item by its int key"""\n \n         key = int(key)\n \n@@ -269,21 +260,30 @@ def keys(self):\n         return self._comments.keys()\n \n     def items(self):\n-        return [(i[0], i[1].__of__(self),) for i in self._comments.items()]\n+        return [\n+            (\n+                i[0],\n+                i[1].__of__(self),\n+            )\n+            for i in self._comments.items()\n+        ]\n \n     def values(self):\n         return [v.__of__(self) for v in self._comments.values()]\n \n     def iterkeys(self):\n-        return six.iterkeys(self._comments)\n+        return self._comments.keys()\n \n     def itervalues(self):\n-        for v in six.itervalues(self._comments):\n+        for v in self._comments.values():\n             yield v.__of__(self)\n \n     def iteritems(self):\n-        for k, v in six.iteritems(self._comments):\n-            yield (k, v.__of__(self),)\n+        for k, v in self._comments.items():\n+            yield (\n+                k,\n+                v.__of__(self),\n+            )\n \n     def allowedContentTypes(self):\n         return []\n@@ -309,6 +309,7 @@ def conversationAdapterFactory(content):\n except ImportError:\n     pass\n else:\n+\n     @implementer(IConversation)  # pragma: no cover\n     @adapter(IAnnotatable)  # pragma: no cover\n     def conversationCanonicalAdapterFactory(content):  # pragma: no cover\n@@ -327,7 +328,7 @@ def conversationCanonicalAdapterFactory(content):  # pragma: no cover\n \n @implementer(IReplies)\n @adapter(Conversation)  # relies on implementation details\n-class ConversationReplies(object):\n+class ConversationReplies:\n     """An IReplies adapter for conversations.\n \n     This makes it easy to work with top-level comments.\n@@ -350,16 +351,14 @@ def __contains__(self, key):\n         return int(key) in self.children\n \n     def __getitem__(self, key):\n-        """Get an item by its int key\n-        """\n+        """Get an item by its int key"""\n         key = int(key)\n         if key not in self.children:\n             raise KeyError(key)\n         return self.conversation[key]\n \n     def __delitem__(self, key):\n-        """Delete an item by its int key\n-        """\n+        """Delete an item by its int key"""\n         key = int(key)\n         if key not in self.children:\n             raise KeyError(key)\n@@ -392,7 +391,10 @@ def itervalues(self):\n \n     def iteritems(self):\n         for key in self.children:\n-            yield (key, self.conversation[key],)\n+            yield (\n+                key,\n+                self.conversation[key],\n+            )\n \n     @property\n     def children(self):\n@@ -418,11 +420,12 @@ def __init__(self, context):\n         self.conversation = aq_parent(self.comment)\n         conversation_has_no_children = not hasattr(\n             self.conversation,\n-            \'_children\',\n+            "_children",\n         )\n         if self.conversation is None or conversation_has_no_children:\n-            raise TypeError("This adapter doesn\'t know what to do with the "\n-                            \'parent conversation\')\n+            raise TypeError(\n+                "This adapter doesn\'t know what to do with the " "parent conversation"\n+            )\n \n         self.comment_id = self.comment.comment_id\n \ndiff --git a/plone/app/discussion/events.py b/plone/app/discussion/events.py\nindex e2ecc023..3444bbc4 100644\n--- a/plone/app/discussion/events.py\n+++ b/plone/app/discussion/events.py\n@@ -1,13 +1,12 @@\n-# -*- coding: utf-8 -*-\n """ Custom discussion events\n """\n from plone.app.discussion.interfaces import ICommentAddedEvent\n-from plone.app.discussion.interfaces import ICommentModifiedEvent\n-from plone.app.discussion.interfaces import ICommentRemovedEvent\n-from plone.app.discussion.interfaces import IDiscussionEvent\n from plone.app.discussion.interfaces import ICommentDeletedEvent\n+from plone.app.discussion.interfaces import ICommentModifiedEvent\n from plone.app.discussion.interfaces import ICommentPublishedEvent\n+from plone.app.discussion.interfaces import ICommentRemovedEvent\n from plone.app.discussion.interfaces import ICommentTransitionEvent\n+from plone.app.discussion.interfaces import IDiscussionEvent\n from plone.app.discussion.interfaces import IReplyAddedEvent\n from plone.app.discussion.interfaces import IReplyModifiedEvent\n from plone.app.discussion.interfaces import IReplyRemovedEvent\n@@ -15,9 +14,8 @@\n \n \n @implementer(IDiscussionEvent)\n-class DiscussionEvent(object):\n-    """ Custom event\n-    """\n+class DiscussionEvent:\n+    """Custom event"""\n \n     def __init__(self, context, comment, **kwargs):\n         self.object = context\n@@ -28,55 +26,47 @@ def __init__(self, context, comment, **kwargs):\n         # Add event to the request to be able to access comment attributes\n         # in content-rules dynamic strings\n         request = context.REQUEST\n-        request.set(\'event\', self)\n+        request.set("event", self)\n \n \n @implementer(ICommentAddedEvent)\n class CommentAddedEvent(DiscussionEvent):\n-    """ Event to be triggered when a Comment is added\n-    """\n+    """Event to be triggered when a Comment is added"""\n \n \n @implementer(ICommentModifiedEvent)\n class CommentModifiedEvent(DiscussionEvent):\n-    """ Event to be triggered when a Comment is modified\n-    """\n+    """Event to be triggered when a Comment is modified"""\n \n \n @implementer(ICommentRemovedEvent)\n class CommentRemovedEvent(DiscussionEvent):\n-    """ Event to be triggered when a Comment is removed\n-    """\n+    """Event to be triggered when a Comment is removed"""\n \n \n @implementer(IReplyAddedEvent)\n class ReplyAddedEvent(DiscussionEvent):\n-    """ Event to be triggered when a Comment reply is added\n-    """\n+    """Event to be triggered when a Comment reply is added"""\n \n \n @implementer(IReplyModifiedEvent)\n class ReplyModifiedEvent(DiscussionEvent):\n-    """ Event to be triggered when a Comment reply is modified\n-    """\n+    """Event to be triggered when a Comment reply is modified"""\n \n \n @implementer(IReplyRemovedEvent)\n class ReplyRemovedEvent(DiscussionEvent):\n-    """ Event to be triggered when a Comment reply is removed\n-    """\n+    """Event to be triggered when a Comment reply is removed"""\n \n \n @implementer(ICommentDeletedEvent)\n class CommentDeletedEvent(DiscussionEvent):\n-    """ Event to be triggered when a Comment is deleted\n-    """\n+    """Event to be triggered when a Comment is deleted"""\n \n \n @implementer(ICommentPublishedEvent)\n class CommentPublishedEvent(DiscussionEvent):\n-    """ Event to be triggered when a Comment is publicated\n-    """\n+    """Event to be triggered when a Comment is publicated"""\n \n \n @implementer(ICommentTransitionEvent)\ndiff --git a/plone/app/discussion/interfaces.py b/plone/app/discussion/interfaces.py\nindex 76a0cee5..e53628d8 100644\n--- a/plone/app/discussion/interfaces.py\n+++ b/plone/app/discussion/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Interfaces for plone.app.discussion\n """\n from plone.app.discussion import _\n@@ -12,11 +11,14 @@\n from zope.interface.interfaces import IObjectEvent\n \n \n+DISCUSSION_ANNOTATION_KEY = "plone.app.discussion:conversation"\n+\n+\n def isEmail(value):\n     portal = getUtility(ISiteRoot)\n-    reg_tool = getToolByName(portal, \'portal_registration\')\n+    reg_tool = getToolByName(portal, "portal_registration")\n     if not (value and reg_tool.isValidEmail(value)):\n-        raise Invalid(_(\'Invalid email address.\'))\n+        raise Invalid(_("Invalid email address."))\n     return True\n \n \n@@ -42,25 +44,24 @@ class IConversation(IIterableMapping):\n     """\n \n     total_comments = schema.Int(\n-        title=_(u\'Total number of public comments on this item\'),\n+        title=_("Total number of public comments on this item"),\n         min=0,\n         readonly=True,\n     )\n \n     last_comment_date = schema.Date(\n-        title=_(u\'Date of the most recent public comment\'),\n+        title=_("Date of the most recent public comment"),\n         readonly=True,\n     )\n \n     commentators = schema.Set(\n-        title=_(u\'The set of unique commentators (usernames)\'),\n+        title=_("The set of unique commentators (usernames)"),\n         readonly=True,\n     )\n \n     public_commentators = schema.Set(\n         title=_(\n-            u\'The set of unique commentators (usernames) \'\n-            u\'of published_comments\',\n+            "The set of unique commentators (usernames) " "of published_comments",\n         ),\n         readonly=True,\n     )\n@@ -72,8 +73,7 @@ def addComment(comment):\n         """\n \n     def __delitem__(key):\n-        """Delete the comment with the given key. The key is a long id.\n-        """\n+        """Delete the comment with the given key. The key is a long id."""\n \n     def getComments(start=0, size=None):\n         """Return an iterator of comment objects for rendering.\n@@ -130,8 +130,7 @@ def addComment(comment):\n         """\n \n     def __delitem__(key):\n-        """Delete the comment with the given key. The key is a long id.\n-        """\n+        """Delete the comment with the given key. The key is a long id."""\n \n \n class IComment(Interface):\n@@ -141,61 +140,58 @@ class IComment(Interface):\n     """\n \n     portal_type = schema.ASCIILine(\n-        title=_(u\'Portal type\'),\n-        default=\'Discussion Item\',\n+        title=_("Portal type"),\n+        default="Discussion Item",\n     )\n \n-    __parent__ = schema.Object(\n-        title=_(u\'Conversation\'), schema=Interface)\n+    __parent__ = schema.Object(title=_("Conversation"), schema=Interface)\n \n-    __name__ = schema.TextLine(title=_(u\'Name\'))\n+    __name__ = schema.TextLine(title=_("Name"))\n \n-    comment_id = schema.Int(\n-        title=_(u\'A comment id unique to this conversation\'))\n+    comment_id = schema.Int(title=_("A comment id unique to this conversation"))\n \n     in_reply_to = schema.Int(\n-        title=_(u\'Id of comment this comment is in reply to\'),\n+        title=_("Id of comment this comment is in reply to"),\n         required=False,\n     )\n \n     # for logged in comments - set to None for anonymous\n-    author_username = schema.TextLine(title=_(u\'Name\'), required=False)\n+    author_username = schema.TextLine(title=_("Name"), required=False)\n \n     # for anonymous comments only, set to None for logged in comments\n-    author_name = schema.TextLine(title=_(u\'Name\'), required=False)\n-    author_email = schema.TextLine(title=_(u\'Email\'),\n-                                   required=False,\n-                                   constraint=isEmail,\n-                                   )\n+    author_name = schema.TextLine(title=_("Name"), required=False)\n+    author_email = schema.TextLine(\n+        title=_("Email"),\n+        required=False,\n+        constraint=isEmail,\n+    )\n \n-    title = schema.TextLine(title=_(u\'label_subject\',\n-                                    default=u\'Subject\'))\n+    title = schema.TextLine(title=_("label_subject", default="Subject"))\n \n-    mime_type = schema.ASCIILine(title=_(u\'MIME type\'), default=\'text/plain\')\n+    mime_type = schema.ASCIILine(title=_("MIME type"), default="text/plain")\n     text = schema.Text(\n         title=_(\n-            u\'label_comment\',\n-            default=u\'Comment\',\n+            "label_comment",\n+            default="Comment",\n         ),\n     )\n \n     user_notification = schema.Bool(\n         title=_(\n-            u\'Notify me of new comments via email.\',\n+            "Notify me of new comments via email.",\n         ),\n         required=False,\n     )\n \n-    creator = schema.TextLine(title=_(u\'Username of the commenter\'))\n-    creation_date = schema.Date(title=_(u\'Creation date\'))\n-    modification_date = schema.Date(title=_(u\'Modification date\'))\n+    creator = schema.TextLine(title=_("Username of the commenter"))\n+    creation_date = schema.Date(title=_("Creation date"))\n+    modification_date = schema.Date(title=_("Modification date"))\n \n \n class ICaptcha(Interface):\n-    """Captcha/ReCaptcha text field to extend the existing comment form.\n-    """\n-    captcha = schema.TextLine(title=_(u\'Captcha\'),\n-                              required=False)\n+    """Captcha/ReCaptcha text field to extend the existing comment form."""\n+\n+    captcha = schema.TextLine(title=_("Captcha"), required=False)\n \n \n class IDiscussionSettings(Interface):\n@@ -210,40 +206,38 @@ class IDiscussionSettings(Interface):\n     # - Search control panel: Show comments in search results\n \n     globally_enabled = schema.Bool(\n-        title=_(u\'label_globally_enabled\',\n-                default=u\'Globally enable comments\'),\n+        title=_("label_globally_enabled", default="Globally enable comments"),\n         description=_(\n-            u\'help_globally_enabled\',\n-            default=u\'If selected, users are able to post comments on the \'\n-                    u\'site. However, you will still need to enable comments \'\n-                    u\'for specific content types, folders or content \'\n-                    u\'objects before users will be able to post comments.\',\n+            "help_globally_enabled",\n+            default="If selected, users are able to post comments on the "\n+            "site. However, you will still need to enable comments "\n+            "for specific content types, folders or content "\n+            "objects before users will be able to post comments.",\n         ),\n         required=False,\n         default=False,\n     )\n \n     anonymous_comments = schema.Bool(\n-        title=_(u\'label_anonymous_comments\',\n-                default=\'Enable anonymous comments\'),\n+        title=_("label_anonymous_comments", default="Enable anonymous comments"),\n         description=_(\n-            u\'help_anonymous_comments\',\n-            default=u\'If selected, anonymous users are able to post \'\n-                    u\'comments without logging in. It is highly \'\n-                    u\'recommended to use a captcha solution to prevent \'\n-                    u\'spam if this setting is enabled.\',\n+            "help_anonymous_comments",\n+            default="If selected, anonymous users are able to post "\n+            "comments without logging in. It is highly "\n+            "recommended to use a captcha solution to prevent "\n+            "spam if this setting is enabled.",\n         ),\n         required=False,\n         default=False,\n     )\n \n     anonymous_email_enabled = schema.Bool(\n-        title=_(u\'label_anonymous_email_enabled\',\n-                default=u\'Enable anonymous email field\'),\n+        title=_(\n+            "label_anonymous_email_enabled", default="Enable anonymous email field"\n+        ),\n         description=_(\n-            u\'help_anonymous_email_enabled\',\n-            default=u\'If selected, anonymous user will have to \'\n-                    u\'give their email.\',\n+            "help_anonymous_email_enabled",\n+            default="If selected, anonymous user will have to " "give their email.",\n         ),\n         required=False,\n         default=False,\n@@ -251,130 +245,137 @@ class IDiscussionSettings(Interface):\n \n     moderation_enabled = schema.Bool(\n         title=_(\n-            u\'label_moderation_enabled\',\n-            default=\'Enable comment moderation\',\n+            "label_moderation_enabled",\n+            default="Enable comment moderation",\n         ),\n         description=_(\n-            u\'help_moderation_enabled\',\n-            default=u\'If selected, comments will enter a "Pending" state \'\n-                    u\'in which they are invisible to the public. A user \'\n-                    u\'with the "Review comments" permission ("Reviewer" \'\n-                    u\'or "Manager") can approve comments to make them \'\n-                    u\'visible to the public. If you want to enable a \'\n-                    u\'custom comment workflow, you have to go to the \'\n-                    u\'types control panel.\',\n+            "help_moderation_enabled",\n+            default=\'If selected, comments will enter a "Pending" state \'\n+            "in which they are invisible to the public. A user "\n+            \'with the "Review comments" permission ("Reviewer" \'\n+            \'or "Manager") can approve comments to make them \'\n+            "visible to the public. If you want to enable a "\n+            "custom comment workflow, you have to go to the "\n+            "types control panel.",\n         ),\n         required=False,\n         default=False,\n     )\n \n     edit_comment_enabled = schema.Bool(\n-        title=_(u\'label_edit_comment_enabled\',\n-                default=\'Enable editing of comments\'),\n-        description=_(u\'help_edit_comment_enabled\',\n-                      default=u\'If selected, supports editing \'\n-                      \'of comments for users with the "Edit comments" \'\n-                      \'permission.\'),\n+        title=_("label_edit_comment_enabled", default="Enable editing of comments"),\n+        description=_(\n+            "help_edit_comment_enabled",\n+            default="If selected, supports editing "\n+            \'of comments for users with the "Edit comments" \'\n+            "permission.",\n+        ),\n         required=False,\n         default=False,\n     )\n \n     delete_own_comment_enabled = schema.Bool(\n-        title=_(u\'label_delete_own_comment_enabled\',\n-                default=\'Enable deleting own comments\'),\n-        description=_(u\'help_delete_own_comment_enabled\',\n-                      default=u\'If selected, supports deleting \'\n-                      \'of own comments for users with the \'\n-                      \'"Delete own comments" permission.\'),\n+        title=_(\n+            "label_delete_own_comment_enabled", default="Enable deleting own comments"\n+        ),\n+        description=_(\n+            "help_delete_own_comment_enabled",\n+            default="If selected, supports deleting "\n+            "of own comments for users with the "\n+            \'"Delete own comments" permission.\',\n+        ),\n         required=False,\n         default=False,\n     )\n \n     text_transform = schema.Choice(\n-        title=_(u\'label_text_transform\',\n-                default=\'Comment text transform\'),\n+        title=_("label_text_transform", default="Comment text transform"),\n         description=_(\n-            u\'help_text_transform\',\n-            default=u\'Use this setting to choose if the comment text \'\n-                    u\'should be transformed in any way. You can choose \'\n-                    u\'between "Plain text" and "Intelligent text". \'\n-                    u\'"Intelligent text" converts plain text into HTML \'\n-                    u\'where line breaks and indentation is preserved, \'\n-                    u\'and web and email addresses are made into \'\n-                    u\'clickable links.\'),\n+            "help_text_transform",\n+            default="Use this setting to choose if the comment text "\n+            "should be transformed in any way. You can choose "\n+            \'between "Plain text" and "Intelligent text". \'\n+            \'"Intelligent text" converts plain text into HTML \'\n+            "where line breaks and indentation is preserved, "\n+            "and web and email addresses are made into "\n+            "clickable links.",\n+        ),\n         required=True,\n-        default=\'text/plain\',\n-        vocabulary=\'plone.app.discussion.vocabularies.TextTransformVocabulary\',\n+        default="text/plain",\n+        vocabulary="plone.app.discussion.vocabularies.TextTransformVocabulary",\n     )\n \n     captcha = schema.Choice(\n-        title=_(u\'label_captcha\',\n-                default=\'Captcha\'),\n+        title=_("label_captcha", default="Captcha"),\n         description=_(\n-            u\'help_captcha\',\n-            default=u\'Use this setting to enable or disable Captcha \'\n-                    u\'validation for comments. Install \'\n-                    u\'plone.formwidget.captcha, \'\n-                    u\'plone.formwidget.recaptcha, collective.akismet, or \'\n-                    u\'collective.z3cform.norobots if there are no options \'\n-                    u\'available.\'),\n+            "help_captcha",\n+            default="Use this setting to enable or disable Captcha "\n+            "validation for comments. Install "\n+            "plone.formwidget.captcha, "\n+            "plone.formwidget.recaptcha, collective.akismet, or "\n+            "collective.z3cform.norobots if there are no options "\n+            "available.",\n+        ),\n         required=True,\n-        default=\'disabled\',\n-        vocabulary=\'plone.app.discussion.vocabularies.CaptchaVocabulary\',\n+        default="disabled",\n+        vocabulary="plone.app.discussion.vocabularies.CaptchaVocabulary",\n     )\n \n     show_commenter_image = schema.Bool(\n-        title=_(u\'label_show_commenter_image\',\n-                default=u\'Show commenter image\'),\n+        title=_("label_show_commenter_image", default="Show commenter image"),\n         description=_(\n-            u\'help_show_commenter_image\',\n-            default=u\'If selected, an image of the user is shown next to \'\n-                    u\'the comment.\'),\n+            "help_show_commenter_image",\n+            default="If selected, an image of the user is shown next to "\n+            "the comment.",\n+        ),\n         required=False,\n         default=True,\n     )\n \n     moderator_notification_enabled = schema.Bool(\n-        title=_(u\'label_moderator_notification_enabled\',\n-                default=u\'Enable moderator email notification\'),\n+        title=_(\n+            "label_moderator_notification_enabled",\n+            default="Enable moderator email notification",\n+        ),\n         description=_(\n-            u\'help_moderator_notification_enabled\',\n-            default=u\'If selected, the moderator is notified if a comment \'\n-                    u\'needs attention. The moderator email address can \'\n-                    u\'be set below.\'),\n+            "help_moderator_notification_enabled",\n+            default="If selected, the moderator is notified if a comment "\n+            "needs attention. The moderator email address can "\n+            "be set below.",\n+        ),\n         required=False,\n         default=False,\n     )\n \n     moderator_email = schema.ASCIILine(\n         title=_(\n-            u\'label_moderator_email\',\n-            default=u\'Moderator Email Address\',\n+            "label_moderator_email",\n+            default="Moderator Email Address",\n         ),\n         description=_(\n-            u\'help_moderator_email\',\n-            default=u\'Address to which moderator notifications \'\n-                    u\'will be sent.\'),\n+            "help_moderator_email",\n+            default="Address to which moderator notifications " "will be sent.",\n+        ),\n         required=False,\n     )\n \n     user_notification_enabled = schema.Bool(\n         title=_(\n-            u\'label_user_notification_enabled\',\n-            default=u\'Enable user email notification\',\n+            "label_user_notification_enabled",\n+            default="Enable user email notification",\n         ),\n         description=_(\n-            u\'help_user_notification_enabled\',\n-            default=u\'If selected, users can choose to be notified \'\n-                    u\'of new comments by email.\'),\n+            "help_user_notification_enabled",\n+            default="If selected, users can choose to be notified "\n+            "of new comments by email.",\n+        ),\n         required=False,\n         default=False,\n     )\n \n \n class IDiscussionLayer(Interface):\n-    """Request marker installed via browserlayer.xml.\n-    """\n+    """Request marker installed via browserlayer.xml."""\n \n \n class ICommentingTool(Interface):\n@@ -384,54 +385,46 @@ class ICommentingTool(Interface):\n     of Plone that had a portal_discussion tool.\n     """\n \n+\n #\n # Custom events\n #\n \n \n class IDiscussionEvent(IObjectEvent):\n-    """ Discussion custom event\n-    """\n+    """Discussion custom event"""\n \n \n class ICommentAddedEvent(IDiscussionEvent):\n-    """ Comment added\n-    """\n+    """Comment added"""\n \n \n class ICommentModifiedEvent(IDiscussionEvent):\n-    """ Comment modified\n-    """\n+    """Comment modified"""\n \n \n class ICommentRemovedEvent(IDiscussionEvent):\n-    """ Comment removed\n-    """\n+    """Comment removed"""\n \n \n class IReplyAddedEvent(IDiscussionEvent):\n-    """ Comment reply added\n-    """\n+    """Comment reply added"""\n \n \n class IReplyModifiedEvent(IDiscussionEvent):\n-    """ Comment reply modified\n-    """\n+    """Comment reply modified"""\n \n \n class IReplyRemovedEvent(IDiscussionEvent):\n-    """ Comment reply removed\n-    """\n+    """Comment reply removed"""\n \n \n class ICommentPublishedEvent(IDiscussionEvent):\n-    """ Notify user on comment publication\n-    """\n+    """Notify user on comment publication"""\n \n \n class ICommentDeletedEvent(IDiscussionEvent):\n-    """ Notify user on comment delete\n-    """\n+    """Notify user on comment delete"""\n \n \n class ICommentTransitionEvent(IDiscussionEvent):\ndiff --git a/plone/app/discussion/subscribers.py b/plone/app/discussion/subscribers.py\nindex 0234c972..6e1b4985 100644\n--- a/plone/app/discussion/subscribers.py\n+++ b/plone/app/discussion/subscribers.py\n@@ -1,14 +1,11 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n \n \n def index_object(obj, event):\n-    """Index the object when it is added/modified to the conversation.\n-    """\n+    """Index the object when it is added/modified to the conversation."""\n     obj.indexObject()\n \n \n def unindex_object(obj, event):\n-    """Unindex the object when it is removed from the conversation.\n-    """\n+    """Unindex the object when it is removed from the conversation."""\n     obj.unindexObject()\ndiff --git a/plone/app/discussion/subscribers.zcml b/plone/app/discussion/subscribers.zcml\nindex 85e74e2a..a797741b 100644\n--- a/plone/app/discussion/subscribers.zcml\n+++ b/plone/app/discussion/subscribers.zcml\n@@ -72,7 +72,7 @@\n     <!-- Control panel event subscribers -->\n \n     <subscriber\n-        for="Products.CMFPlone.interfaces.events.IConfigurationChangedEvent"\n+        for="plone.base.interfaces.events.IConfigurationChangedEvent"\n         handler=".browser.controlpanel.notify_configuration_changed"\n         />\n \ndiff --git a/plone/app/discussion/testing.py b/plone/app/discussion/testing.py\nindex 5a4060ba..01ea305f 100644\n--- a/plone/app/discussion/testing.py\n+++ b/plone/app/discussion/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.discussion.interfaces import IDiscussionSettings\n from plone.app.robotframework.testing import REMOTE_LIBRARY_ROBOT_TESTING\n@@ -15,40 +14,43 @@\n \n try:\n     import plone.app.collection  # noqa\n-    COLLECTION_TYPE = \'Collection\'\n+\n+    COLLECTION_TYPE = "Collection"\n except ImportError:\n-    COLLECTION_TYPE = \'Topic\'\n+    COLLECTION_TYPE = "Topic"\n \n \n class PloneAppDiscussion(PloneSandboxLayer):\n \n     defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n-    USER_NAME = \'johndoe\'\n-    USER_PASSWORD = \'secret\'\n-    MEMBER_NAME = \'janedoe\'\n-    MEMBER_PASSWORD = \'secret\'\n-    USER_WITH_FULLNAME_NAME = \'jim\'\n-    USER_WITH_FULLNAME_FULLNAME = \'Jim Fulton\'\n-    USER_WITH_FULLNAME_PASSWORD = \'secret\'\n-    MANAGER_USER_NAME = \'manager\'\n-    MANAGER_USER_PASSWORD = \'secret\'\n-    REVIEWER_NAME = \'reviewer\'\n-    REVIEWER_PASSWORD = \'secret\'\n+    USER_NAME = "johndoe"\n+    USER_PASSWORD = "secret"\n+    MEMBER_NAME = "janedoe"\n+    MEMBER_PASSWORD = "secret"\n+    USER_WITH_FULLNAME_NAME = "jim"\n+    USER_WITH_FULLNAME_FULLNAME = "Jim Fulton"\n+    USER_WITH_FULLNAME_PASSWORD = "secret"\n+    MANAGER_USER_NAME = "manager"\n+    MANAGER_USER_PASSWORD = "secret"\n+    REVIEWER_NAME = "reviewer"\n+    REVIEWER_PASSWORD = "secret"\n \n     def setUpZope(self, app, configurationContext):\n         # Load ZCML\n         import plone.app.discussion\n-        self.loadZCML(package=plone.app.discussion,\n-                      context=configurationContext,\n-                      )\n+\n+        self.loadZCML(\n+            package=plone.app.discussion,\n+            context=configurationContext,\n+        )\n \n     def setUpPloneSite(self, portal):\n         # Install into Plone site using portal_setup\n-        applyProfile(portal, \'plone.app.discussion:default\')\n+        applyProfile(portal, "plone.app.discussion:default")\n \n         # Creates some users\n-        acl_users = getToolByName(portal, \'acl_users\')\n+        acl_users = getToolByName(portal, "acl_users")\n         acl_users.userFolderAddUser(\n             self.USER_NAME,\n             self.USER_PASSWORD,\n@@ -58,41 +60,42 @@ def setUpPloneSite(self, portal):\n         acl_users.userFolderAddUser(\n             self.MEMBER_NAME,\n             self.MEMBER_PASSWORD,\n-            [\'Member\'],\n+            ["Member"],\n             [],\n         )\n         acl_users.userFolderAddUser(\n             self.USER_WITH_FULLNAME_NAME,\n             self.USER_WITH_FULLNAME_PASSWORD,\n-            [\'Member\'],\n+            ["Member"],\n             [],\n         )\n         acl_users.userFolderAddUser(\n             self.REVIEWER_NAME,\n             self.REVIEWER_PASSWORD,\n-            [\'Member\'],\n+            ["Member"],\n             [],\n         )\n-        mtool = getToolByName(portal, \'portal_membership\', None)\n-        gtool = getToolByName(portal, \'portal_groups\', None)\n-        gtool.addPrincipalToGroup(self.REVIEWER_NAME, \'Reviewers\')\n-        mtool.addMember(\'jim\', \'Jim\', [\'Member\'], [])\n-        mtool.getMemberById(\'jim\').setMemberProperties(\n-            {\'fullname\': \'Jim Fult\\xc3\\xb8rn\'})\n+        mtool = getToolByName(portal, "portal_membership", None)\n+        gtool = getToolByName(portal, "portal_groups", None)\n+        gtool.addPrincipalToGroup(self.REVIEWER_NAME, "Reviewers")\n+        mtool.addMember("jim", "Jim", ["Member"], [])\n+        mtool.getMemberById("jim").setMemberProperties(\n+            {"fullname": "Jim Fult\\xc3\\xb8rn"}\n+        )\n \n         acl_users.userFolderAddUser(\n             self.MANAGER_USER_NAME,\n             self.MANAGER_USER_PASSWORD,\n-            [\'Manager\'],\n+            ["Manager"],\n             [],\n         )\n \n         # Add a document\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n         portal.invokeFactory(\n-            id=\'doc1\',\n-            title=\'Document 1\',\n-            type_name=\'Document\',\n+            id="doc1",\n+            title="Document 1",\n+            type_name="Document",\n         )\n \n \n@@ -112,12 +115,12 @@ def setUpPloneSite(self, portal):\n PLONE_APP_DISCUSSION_ROBOT_FIXTURE = PloneAppDiscussionRobot()\n PLONE_APP_DISCUSSION_FIXTURE = PloneAppDiscussion()\n PLONE_APP_DISCUSSION_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_DISCUSSION_FIXTURE,),\n-    name=\'PloneAppDiscussion:Integration\')\n+    bases=(PLONE_APP_DISCUSSION_FIXTURE,), name="PloneAppDiscussion:Integration"\n+)\n PLONE_APP_DISCUSSION_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(PLONE_APP_DISCUSSION_FIXTURE,),\n-    name=\'PloneAppDiscussion:Functional\')\n+    bases=(PLONE_APP_DISCUSSION_FIXTURE,), name="PloneAppDiscussion:Functional"\n+)\n PLONE_APP_DISCUSSION_ROBOT_TESTING = FunctionalTesting(\n     bases=(PLONE_APP_DISCUSSION_ROBOT_FIXTURE,),\n-    name=\'PloneAppDiscussion:Robot\',\n+    name="PloneAppDiscussion:Robot",\n )\ndiff --git a/plone/app/discussion/tests/functional_test_comment_review_workflow.txt b/plone/app/discussion/tests/functional_test_comment_review_workflow.txt\nindex 84d384ff..099ce9fb 100644\n--- a/plone/app/discussion/tests/functional_test_comment_review_workflow.txt\n+++ b/plone/app/discussion/tests/functional_test_comment_review_workflow.txt\n@@ -252,7 +252,7 @@ Now we can post an anonymous comment.\n \n     >>> unprivileged_browser.open(urldoc)\n     >>> unprivileged_browser.getControl(name=\'form.widgets.text\').value = "This is an anonymous comment"\n-    >>> unprivileged_browser.getControl(name=\'form.widgets.author_name\').value = u\'John\'\n+    >>> unprivileged_browser.getControl(name=\'form.widgets.author_name\').value = \'John\'\n     >>> unprivileged_browser.getControl(name=\'form.widgets.author_email\').value = \'john@acme.com\'\n     >>> unprivileged_browser.getControl(name=\'form.buttons.comment\').click()\n \ndiff --git a/plone/app/discussion/tests/test_catalog.py b/plone/app/discussion/tests/test_catalog.py\nindex 98abd9f6..395f6c2f 100644\n--- a/plone/app/discussion/tests/test_catalog.py\n+++ b/plone/app/discussion/tests/test_catalog.py\n@@ -1,9 +1,10 @@\n-# -*- coding: utf-8 -*-\n """Test the plone.app.discussion catalog indexes\n """\n from datetime import datetime\n from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from plone.app.discussion.testing import (  # noqa\n+    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from Products.CMFCore.utils import getToolByName\n@@ -21,33 +22,29 @@ class CatalogSetupTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n \n     def test_catalog_installed(self):\n         self.assertTrue(\n-            \'total_comments\' in\n-            self.portal.portal_catalog.indexes(),\n+            "total_comments" in self.portal.portal_catalog.indexes(),\n         )\n         self.assertTrue(\n-            \'commentators\' in\n-            self.portal.portal_catalog.indexes(),\n+            "commentators" in self.portal.portal_catalog.indexes(),\n         )\n         self.assertTrue(\n-            \'total_comments\' in\n-            self.portal.portal_catalog.schema(),\n+            "total_comments" in self.portal.portal_catalog.schema(),\n         )\n         self.assertTrue(\n-            \'in_response_to\' in\n-            self.portal.portal_catalog.schema(),\n+            "in_response_to" in self.portal.portal_catalog.schema(),\n         )\n \n     def test_collection_criteria_installed(self):\n-        if \'portal_atct\' not in self.portal:\n+        if "portal_atct" not in self.portal:\n             return\n         try:\n-            self.portal.portal_atct.getIndex(\'commentators\')\n-            self.portal.portal_atct.getIndex(\'total_comments\')\n-            self.portal.portal_atct.getMetadata(\'total_comments\')\n+            self.portal.portal_atct.getIndex("commentators")\n+            self.portal.portal_atct.getIndex("total_comments")\n+            self.portal.portal_atct.getMetadata("total_comments")\n         except AttributeError:\n             self.fail()\n \n@@ -57,19 +54,19 @@ class ConversationCatalogTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         workflow = self.portal.portal_workflow\n-        workflow.doActionFor(self.portal.doc1, \'publish\')\n+        workflow.doActionFor(self.portal.doc1, "publish")\n \n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n         conversation = IConversation(self.portal.doc1)\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.title = \'Comment 1\'\n-        comment1.text = \'Comment text\'\n-        comment1.creator = \'jim\'\n-        comment1.author_username = \'Jim\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.title = "Comment 1"\n+        comment1.text = "Comment text"\n+        comment1.creator = "jim"\n+        comment1.author_username = "Jim"\n         comment1.creation_date = datetime(2006, 9, 17, 14, 18, 12)\n         comment1.modification_date = datetime(2006, 9, 17, 14, 18, 12)\n \n@@ -79,9 +76,9 @@ def setUp(self):\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Document\',\n+                portal_type="Document",\n             ),\n         )\n         self.conversation = conversation\n@@ -91,54 +88,54 @@ def setUp(self):\n         self.new_comment1_id = new_comment1_id\n \n     def test_total_comments(self):\n-        self.assertTrue(\'total_comments\' in self.doc1_brain)\n+        self.assertTrue("total_comments" in self.doc1_brain)\n         self.assertEqual(self.doc1_brain.total_comments, 1)\n \n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.title = \'Comment 2\'\n-        comment2.text = \'Comment text\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.title = "Comment 2"\n+        comment2.text = "Comment text"\n         new_comment2_id = self.conversation.addComment(comment2)\n \n         comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment2_id),\n+            f"++conversation++default/{new_comment2_id}",\n         )\n         comment2.reindexObject()\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Document\',\n+                portal_type="Document",\n             ),\n         )\n         doc1_brain = brains[0]\n         self.assertEqual(doc1_brain.total_comments, 2)\n \n     def test_last_comment_date(self):\n-        self.assertTrue(\'last_comment_date\' in self.doc1_brain)\n+        self.assertTrue("last_comment_date" in self.doc1_brain)\n         self.assertEqual(\n             self.doc1_brain.last_comment_date,\n             datetime(2006, 9, 17, 14, 18, 12),\n         )\n \n         # Add another comment and check if last comment date is updated.\n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.title = \'Comment 2\'\n-        comment2.text = \'Comment text\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.title = "Comment 2"\n+        comment2.text = "Comment text"\n         comment2.creation_date = datetime(2009, 9, 17, 14, 18, 12)\n         comment2.modification_date = datetime(2009, 9, 17, 14, 18, 12)\n         new_comment2_id = self.conversation.addComment(comment2)\n \n         comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment2_id),\n+            f"++conversation++default/{new_comment2_id}",\n         )\n         comment2.reindexObject()\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Document\',\n+                portal_type="Document",\n             ),\n         )\n         doc1_brain = brains[0]\n@@ -153,9 +150,9 @@ def test_last_comment_date(self):\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Document\',\n+                portal_type="Document",\n             ),\n         )\n         doc1_brain = brains[0]\n@@ -169,44 +166,44 @@ def test_last_comment_date(self):\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Document\',\n+                portal_type="Document",\n             ),\n         )\n         doc1_brain = brains[0]\n         self.assertEqual(doc1_brain.last_comment_date, None)\n \n     def test_commentators(self):\n-        self.assertTrue(\'commentators\' in self.doc1_brain)\n-        self.assertEqual(self.doc1_brain.commentators, (\'Jim\',))\n+        self.assertTrue("commentators" in self.doc1_brain)\n+        self.assertEqual(self.doc1_brain.commentators, ("Jim",))\n \n         # add another comment with another author\n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.title = \'Comment 2\'\n-        comment2.text = \'Comment text\'\n-        comment2.creator = \'emma\'\n-        comment2.author_username = \'Emma\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.title = "Comment 2"\n+        comment2.text = "Comment text"\n+        comment2.creator = "emma"\n+        comment2.author_username = "Emma"\n         new_comment2_id = self.conversation.addComment(comment2)\n \n         comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment2_id),\n+            f"++conversation++default/{new_comment2_id}",\n         )\n         comment2.reindexObject()\n \n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Document\',\n+                portal_type="Document",\n             ),\n         )\n         doc1_brain = brains[0]\n \n         self.assertEqual(\n             sorted(doc1_brain.commentators),\n-            sorted((\'Jim\', \'Emma\')),\n+            sorted(("Jim", "Emma")),\n         )\n \n         # remove one comments\n@@ -214,22 +211,22 @@ def test_commentators(self):\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Document\',\n+                portal_type="Document",\n             ),\n         )\n         doc1_brain = brains[0]\n-        self.assertEqual(doc1_brain.commentators, (\'Jim\',))\n+        self.assertEqual(doc1_brain.commentators, ("Jim",))\n \n         # remove all comments\n         del self.conversation[self.new_comment1_id]\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Document\',\n+                portal_type="Document",\n             ),\n         )\n         doc1_brain = brains[0]\n@@ -239,9 +236,9 @@ def test_conversation_indexes_not_in_comments(self):\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Discussion Item\',\n+                portal_type="Discussion Item",\n             ),\n         )\n         comment1_brain = brains[0]\n@@ -250,14 +247,14 @@ def test_conversation_indexes_not_in_comments(self):\n         self.assertEqual(comment1_brain.total_comments, None)\n \n     def test_dont_index_private_commentators(self):\n-        self.comment1.manage_permission(\'View\', roles=tuple())\n+        self.comment1.manage_permission("View", roles=tuple())\n         self.portal.doc1.reindexObject()\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Document\',\n+                portal_type="Document",\n             ),\n         )\n         doc1_brain = brains[0]\n@@ -269,70 +266,70 @@ class CommentCatalogTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n \n         conversation = IConversation(self.portal.doc1)\n         self.conversation = conversation\n \n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n-        comment1.creator = \'jim\'\n-        comment1.author_name = \'Jim\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n+        comment1.creator = "jim"\n+        comment1.author_name = "Jim"\n         new_comment1_id = conversation.addComment(comment1)\n         self.comment_id = new_comment1_id\n \n         # Comment brain\n         self.comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment1_id),\n+            f"++conversation++default/{new_comment1_id}",\n         )\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.comment.getPhysicalPath()),\n+                    "query": "/".join(self.comment.getPhysicalPath()),\n                 },\n             ),\n         )\n         self.comment_brain = brains[0]\n \n     def test_title(self):\n-        self.assertEqual(self.comment_brain.Title, \'Jim on Document 1\')\n+        self.assertEqual(self.comment_brain.Title, "Jim on Document 1")\n \n     def test_no_name_title(self):\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         cid = self.conversation.addComment(comment)\n \n         # Comment brain\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(cid),\n+            f"++conversation++default/{cid}",\n         )\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(comment.getPhysicalPath()),\n+                    "query": "/".join(comment.getPhysicalPath()),\n                 },\n             ),\n         )\n         comment_brain = brains[0]\n-        self.assertEqual(comment_brain.Title, \'Anonymous on Document 1\')\n+        self.assertEqual(comment_brain.Title, "Anonymous on Document 1")\n \n     def test_type(self):\n-        self.assertEqual(self.comment_brain.portal_type, \'Discussion Item\')\n-        self.assertEqual(self.comment_brain.Type, \'Comment\')\n+        self.assertEqual(self.comment_brain.portal_type, "Discussion Item")\n+        self.assertEqual(self.comment_brain.Type, "Comment")\n \n     def test_review_state(self):\n-        self.assertEqual(self.comment_brain.review_state, \'published\')\n+        self.assertEqual(self.comment_brain.review_state, "published")\n \n     def test_creator(self):\n-        self.assertEqual(self.comment_brain.Creator, \'jim\')\n+        self.assertEqual(self.comment_brain.Creator, "jim")\n \n     def test_in_response_to(self):\n         """Make sure in_response_to returns the title or id of the content\n-           object the comment was added to.\n+        object the comment was added to.\n         """\n-        self.assertEqual(self.comment_brain.in_response_to, \'Document 1\')\n+        self.assertEqual(self.comment_brain.in_response_to, "Document 1")\n \n     def test_add_comment(self):\n         self.assertTrue(self.comment_brain)\n@@ -344,7 +341,7 @@ def test_delete_comment(self):\n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.comment.getPhysicalPath()),\n+                    "query": "/".join(self.comment.getPhysicalPath()),\n                 },\n             ),\n         )\n@@ -352,54 +349,54 @@ def test_delete_comment(self):\n \n     def test_reindex_comment(self):\n         # Make sure a comment is reindexed on the catalog when is modified\n-        self.comment.text = \'Another text\'\n+        self.comment.text = "Another text"\n         notify(ObjectModifiedEvent(self.comment))\n-        brains = self.catalog.searchResults(SearchableText=\'Another text\')\n+        brains = self.catalog.searchResults(SearchableText="Another text")\n         self.assertEqual(len(brains), 1)\n \n     def test_remove_comments_when_content_object_is_removed(self):\n         """Make sure all comments are removed from the catalog, if the content\n-           object is removed.\n+        object is removed.\n         """\n-        brains = self.catalog.searchResults({\'portal_type\': \'Discussion Item\'})\n+        brains = self.catalog.searchResults({"portal_type": "Discussion Item"})\n         self.assertEqual(len(brains), 1)\n-        self.portal.manage_delObjects([\'doc1\'])\n-        brains = self.catalog.searchResults({\'portal_type\': \'Discussion Item\'})\n+        self.portal.manage_delObjects(["doc1"])\n+        brains = self.catalog.searchResults({"portal_type": "Discussion Item"})\n         self.assertEqual(len(brains), 0)\n \n     def test_move_comments_when_content_object_is_moved(self):\n         # Create two folders and a content object with a comment\n         self.portal.invokeFactory(\n-            id=\'folder1\',\n-            title=\'Folder 1\',\n-            type_name=\'Folder\',\n+            id="folder1",\n+            title="Folder 1",\n+            type_name="Folder",\n         )\n         self.portal.invokeFactory(\n-            id=\'folder2\',\n-            title=\'Folder 2\',\n-            type_name=\'Folder\',\n+            id="folder2",\n+            title="Folder 2",\n+            type_name="Folder",\n         )\n         self.portal.folder1.invokeFactory(\n-            id=\'moveme\',\n-            title=\'Move Me\',\n-            type_name=\'Document\',\n+            id="moveme",\n+            title="Move Me",\n+            type_name="Document",\n         )\n         conversation = IConversation(self.portal.folder1.moveme)\n-        comment = createObject(\'plone.Comment\')\n+        comment = createObject("plone.Comment")\n         comment_id = conversation.addComment(comment)\n         # We need to commit here so that _p_jar isn\'t None and move will work\n         transaction.savepoint(optimistic=True)\n \n         # Move moveme from folder1 to folder2\n-        cp = self.portal.folder1.manage_cutObjects(ids=(\'moveme\',))\n+        cp = self.portal.folder1.manage_cutObjects(ids=("moveme",))\n         self.portal.folder2.manage_pasteObjects(cp)\n \n         # Make sure no old comment brains are\n         brains = self.catalog.searchResults(\n             dict(\n-                portal_type=\'Discussion Item\',\n+                portal_type="Discussion Item",\n                 path={\n-                    \'query\': \'/\'.join(self.portal.folder1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.folder1.getPhysicalPath()),\n                 },\n             ),\n         )\n@@ -407,61 +404,60 @@ def test_move_comments_when_content_object_is_moved(self):\n \n         brains = self.catalog.searchResults(\n             dict(\n-                portal_type=\'Discussion Item\',\n+                portal_type="Discussion Item",\n                 path={\n-                    \'query\': \'/\'.join(self.portal.folder2.getPhysicalPath()),\n+                    "query": "/".join(self.portal.folder2.getPhysicalPath()),\n                 },\n             ),\n         )\n         self.assertEqual(len(brains), 1)\n         self.assertEqual(\n             brains[0].getPath(),\n-            \'/plone/folder2/moveme/++conversation++default/\' +\n-            str(comment_id),\n+            "/plone/folder2/moveme/++conversation++default/" + str(comment_id),\n         )\n \n     def test_move_upper_level_folder(self):\n         # create a folder with a nested structure\n         self.portal.invokeFactory(\n-            id=\'sourcefolder\',\n-            title=\'Source Folder\',\n-            type_name=\'Folder\',\n+            id="sourcefolder",\n+            title="Source Folder",\n+            type_name="Folder",\n         )\n         self.portal.sourcefolder.invokeFactory(\n-            id=\'moveme\',\n-            title=\'Move Me\',\n-            type_name=\'Folder\',\n+            id="moveme",\n+            title="Move Me",\n+            type_name="Folder",\n         )\n         self.portal.sourcefolder.moveme.invokeFactory(\n-            id=\'mydocument\',\n-            title=\'My Document\',\n-            type_name=\'Folder\',\n+            id="mydocument",\n+            title="My Document",\n+            type_name="Folder",\n         )\n         self.portal.invokeFactory(\n-            id=\'targetfolder\',\n-            title=\'Target Folder\',\n-            type_name=\'Folder\',\n+            id="targetfolder",\n+            title="Target Folder",\n+            type_name="Folder",\n         )\n \n         # create comment on my-document\n         conversation = IConversation(\n             self.portal.sourcefolder.moveme.mydocument,\n         )\n-        comment = createObject(\'plone.Comment\')\n+        comment = createObject("plone.Comment")\n         comment_id = conversation.addComment(comment)\n \n         # We need to commit here so that _p_jar isn\'t None and move will work\n         transaction.savepoint(optimistic=True)\n \n         # Move moveme from folder1 to folder2\n-        cp = self.portal.sourcefolder.manage_cutObjects(ids=(\'moveme\',))\n+        cp = self.portal.sourcefolder.manage_cutObjects(ids=("moveme",))\n         self.portal.targetfolder.manage_pasteObjects(cp)\n \n         # Make sure no old comment brains are left\n         brains = self.catalog.searchResults(\n             dict(\n-                portal_type=\'Discussion Item\',\n-                path={\'query\': \'/plone/sourcefolder/moveme\'},\n+                portal_type="Discussion Item",\n+                path={"query": "/plone/sourcefolder/moveme"},\n             ),\n         )\n         self.assertEqual(len(brains), 0)\n@@ -469,49 +465,47 @@ def test_move_upper_level_folder(self):\n         # make sure comments are correctly index on the target\n         brains = self.catalog.searchResults(\n             dict(\n-                portal_type=\'Discussion Item\',\n-                path={\'query\': \'/plone/targetfolder/moveme\'},\n+                portal_type="Discussion Item",\n+                path={"query": "/plone/targetfolder/moveme"},\n             ),\n         )\n         self.assertEqual(len(brains), 1)\n         self.assertEqual(\n             brains[0].getPath(),\n-            \'/plone/targetfolder/moveme/mydocument/++conversation++default/\' +\n-            str(comment_id),\n+            "/plone/targetfolder/moveme/mydocument/++conversation++default/"\n+            + str(comment_id),\n         )\n \n     def test_update_comments_when_content_object_is_renamed(self):\n         # We need to commit here so that _p_jar isn\'t None and move will work\n         transaction.savepoint(optimistic=True)\n \n-        self.portal.manage_renameObject(\'doc1\', \'doc2\')\n+        self.portal.manage_renameObject("doc1", "doc2")\n \n         brains = self.catalog.searchResults(\n-            portal_type=\'Discussion Item\',\n+            portal_type="Discussion Item",\n         )\n         self.assertEqual(len(brains), 1)\n         self.assertEqual(\n             brains[0].getPath(),\n-            \'/plone/doc2/++conversation++default/\' +\n-            str(self.comment_id),\n+            "/plone/doc2/++conversation++default/" + str(self.comment_id),\n         )\n \n     def test_clear_and_rebuild_catalog(self):\n-        brains = self.catalog.searchResults({\'portal_type\': \'Discussion Item\'})\n+        brains = self.catalog.searchResults({"portal_type": "Discussion Item"})\n         self.assertTrue(brains)\n \n         # Clear and rebuild catalog\n         self.catalog.clearFindAndRebuild()\n \n         # Check if comment is still there\n-        brains = self.catalog.searchResults({\'portal_type\': \'Discussion Item\'})\n+        brains = self.catalog.searchResults({"portal_type": "Discussion Item"})\n         self.assertTrue(brains)\n         comment_brain = brains[0]\n-        self.assertEqual(comment_brain.Title, u\'Jim on Document 1\')\n+        self.assertEqual(comment_brain.Title, "Jim on Document 1")\n         self.assertEqual(\n             comment_brain.getPath(),\n-            \'/plone/doc1/++conversation++default/\' +\n-            str(self.comment_id),\n+            "/plone/doc1/++conversation++default/" + str(self.comment_id),\n         )\n \n     def test_clear_and_rebuild_catalog_for_nested_comments(self):\n@@ -526,25 +520,25 @@ def test_clear_and_rebuild_catalog_for_nested_comments(self):\n         # +- Comment 2\n         #    +- Comment 2_1\n \n-        comment1_1 = createObject(\'plone.Comment\')\n-        comment1_1.title = \'Re: Comment 1\'\n-        comment1_1.text = \'Comment text\'\n+        comment1_1 = createObject("plone.Comment")\n+        comment1_1.title = "Re: Comment 1"\n+        comment1_1.text = "Comment text"\n \n-        comment1_1_1 = createObject(\'plone.Comment\')\n-        comment1_1_1.title = \'Re: Re: Comment 1\'\n-        comment1_1_1.text = \'Comment text\'\n+        comment1_1_1 = createObject("plone.Comment")\n+        comment1_1_1.title = "Re: Re: Comment 1"\n+        comment1_1_1.text = "Comment text"\n \n-        comment1_2 = createObject(\'plone.Comment\')\n-        comment1_2.title = \'Re: Comment 1 (2)\'\n-        comment1_2.text = \'Comment text\'\n+        comment1_2 = createObject("plone.Comment")\n+        comment1_2.title = "Re: Comment 1 (2)"\n+        comment1_2.text = "Comment text"\n \n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.title = \'Comment 2\'\n-        comment2.text = \'Comment text\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.title = "Comment 2"\n+        comment2.text = "Comment text"\n \n-        comment2_1 = createObject(\'plone.Comment\')\n-        comment2_1.title = \'Re: Comment 2\'\n-        comment2_1.text = \'Comment text\'\n+        comment2_1 = createObject("plone.Comment")\n+        comment2_1.title = "Re: Comment 2"\n+        comment2_1.text = "Comment text"\n \n         # Create the nested comment structure\n         new_id_1 = self.conversation.addComment(self.comment)\n@@ -566,7 +560,7 @@ def test_clear_and_rebuild_catalog_for_nested_comments(self):\n         self.catalog.clearFindAndRebuild()\n \n         # Check if comments are still there\n-        brains = self.catalog.searchResults({\'portal_type\': \'Discussion Item\'})\n+        brains = self.catalog.searchResults({"portal_type": "Discussion Item"})\n         self.assertTrue(brains)\n         self.assertEqual(len(brains), 6)\n \n@@ -576,19 +570,19 @@ class NoConversationCatalogTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n \n         conversation = IConversation(self.portal.doc1)\n \n         brains = self.catalog.searchResults(\n             dict(\n                 path={\n-                    \'query\': \'/\'.join(self.portal.doc1.getPhysicalPath()),\n+                    "query": "/".join(self.portal.doc1.getPhysicalPath()),\n                 },\n-                portal_type=\'Document\',\n+                portal_type="Document",\n             ),\n         )\n         self.conversation = conversation\n@@ -596,11 +590,10 @@ def setUp(self):\n         self.doc1_brain = brains[0]\n \n     def test_total_comments(self):\n-        self.assertTrue(\'total_comments\' in self.doc1_brain)\n+        self.assertTrue("total_comments" in self.doc1_brain)\n         self.assertEqual(self.doc1_brain.total_comments, 0)\n \n         # Make sure no conversation has been created\n         self.assertTrue(\n-            \'plone.app.discussion:conversation\' not in\n-            IAnnotations(self.portal.doc1),\n+            "plone.app.discussion:conversation" not in IAnnotations(self.portal.doc1),\n         )\ndiff --git a/plone/app/discussion/tests/test_comment.py b/plone/app/discussion/tests/test_comment.py\nindex f5f726c8..17bcb648 100644\n--- a/plone/app/discussion/tests/test_comment.py\n+++ b/plone/app/discussion/tests/test_comment.py\n@@ -1,9 +1,8 @@\n-# -*- coding: utf-8 -*-\n from plone.app.discussion.browser.comment import View\n from plone.app.discussion.interfaces import IComment\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IReplies\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from Products.CMFCore.utils import getToolByName\n@@ -12,11 +11,10 @@\n \n import datetime\n import logging\n-import six\n import unittest\n \n \n-logger = logging.getLogger(\'plone.app.discussion.tests\')\n+logger = logging.getLogger("plone.app.discussion.tests")\n logger.addHandler(logging.StreamHandler())\n \n \n@@ -25,30 +23,30 @@ class CommentTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         workflow = self.portal.portal_workflow\n-        workflow.doActionFor(self.portal.doc1, \'publish\')\n+        workflow.doActionFor(self.portal.doc1, "publish")\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.catalog = getToolByName(self.portal, \'portal_catalog\')\n-        self.document_brain = self.catalog.searchResults(\n-            portal_type=\'Document\')[0]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n+        self.document_brain = self.catalog.searchResults(portal_type="Document")[0]\n \n     def test_factory(self):\n-        comment1 = createObject(\'plone.Comment\')\n+        comment1 = createObject("plone.Comment")\n         self.assertTrue(IComment.providedBy(comment1))\n \n     def test_UTCDates(self):\n-        utc_to_local_diff = \\\n-            datetime.datetime.now() - datetime.datetime.utcnow()\n+        utc_to_local_diff = datetime.datetime.now() - datetime.datetime.utcnow()\n         utc_to_local_diff = abs(utc_to_local_diff.seconds)\n         if utc_to_local_diff < 60:\n-            logger.warning(\'Your computer is living in a timezone where local \'\n-                           \'time equals utc time. Some potential errors can \'\n-                           \'get hidden by that\')\n-        comment1 = createObject(\'plone.Comment\')\n+            logger.warning(\n+                "Your computer is living in a timezone where local "\n+                "time equals utc time. Some potential errors can "\n+                "get hidden by that"\n+            )\n+        comment1 = createObject("plone.Comment")\n         local_utc = datetime.datetime.utcnow()\n         for date in (comment1.creation_date, comment1.modification_date):\n             difference = abs(date - local_utc)\n@@ -58,171 +56,163 @@ def test_UTCDates(self):\n             self.assertFalse(difference // 10)\n \n     def test_id(self):\n-        comment1 = createObject(\'plone.Comment\')\n+        comment1 = createObject("plone.Comment")\n         comment1.comment_id = 123\n-        self.assertEqual(\'123\', comment1.id)\n-        self.assertEqual(\'123\', comment1.getId())\n-        self.assertEqual(u\'123\', comment1.__name__)\n+        self.assertEqual("123", comment1.id)\n+        self.assertEqual("123", comment1.getId())\n+        self.assertEqual("123", comment1.__name__)\n \n     def test_uid(self):\n         conversation = IConversation(self.portal.doc1)\n-        comment1 = createObject(\'plone.Comment\')\n+        comment1 = createObject("plone.Comment")\n         conversation.addComment(comment1)\n         comment_brain = self.catalog.searchResults(\n-            portal_type=\'Discussion Item\',\n+            portal_type="Discussion Item",\n         )[0]\n         self.assertTrue(comment_brain.UID)\n \n     def test_uid_is_unique(self):\n         conversation = IConversation(self.portal.doc1)\n-        comment1 = createObject(\'plone.Comment\')\n+        comment1 = createObject("plone.Comment")\n         conversation.addComment(comment1)\n-        comment2 = createObject(\'plone.Comment\')\n+        comment2 = createObject("plone.Comment")\n         conversation.addComment(comment2)\n         brains = self.catalog.searchResults(\n-            portal_type=\'Discussion Item\',\n+            portal_type="Discussion Item",\n         )\n         self.assertNotEqual(brains[0].UID, brains[1].UID)\n \n     def test_comment_uid_differs_from_content_uid(self):\n         conversation = IConversation(self.portal.doc1)\n-        comment1 = createObject(\'plone.Comment\')\n+        comment1 = createObject("plone.Comment")\n         conversation.addComment(comment1)\n         comment_brain = self.catalog.searchResults(\n-            portal_type=\'Discussion Item\',\n+            portal_type="Discussion Item",\n         )[0]\n         self.assertNotEqual(self.document_brain.UID, comment_brain.UID)\n \n     def test_title(self):\n         conversation = IConversation(self.portal.doc1)\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.author_name = \'Jim Fulton\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.author_name = "Jim Fulton"\n         conversation.addComment(comment1)\n-        self.assertEqual(\'Jim Fulton on Document 1\', comment1.Title())\n+        self.assertEqual("Jim Fulton on Document 1", comment1.Title())\n \n     def test_no_name_title(self):\n         conversation = IConversation(self.portal.doc1)\n-        comment1 = createObject(\'plone.Comment\')\n+        comment1 = createObject("plone.Comment")\n         conversation.addComment(comment1)\n-        self.assertEqual(\'Anonymous on Document 1\', comment1.Title())\n+        self.assertEqual("Anonymous on Document 1", comment1.Title())\n \n     def test_title_special_characters(self):\n         self.portal.invokeFactory(\n-            id=\'doc_sp_chars\',\n-            title=u\'Document \xc3\xa4\xc3\xbc\xc3\xb6\',\n-            type_name=\'Document\',\n+            id="doc_sp_chars",\n+            title="Document \xc3\xa4\xc3\xbc\xc3\xb6",\n+            type_name="Document",\n         )\n         conversation = IConversation(self.portal.doc_sp_chars)\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.author_name = u\'Tarek Ziad\xc3\xa9\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.author_name = "Tarek Ziad\xc3\xa9"\n         conversation.addComment(comment1)\n-        self.assertEqual(u\'Tarek Ziad\xc3\xa9 on Document \xc3\xa4\xc3\xbc\xc3\xb6\', comment1.Title())\n+        self.assertEqual("Tarek Ziad\xc3\xa9 on Document \xc3\xa4\xc3\xbc\xc3\xb6", comment1.Title())\n \n     def test_title_special_characters_utf8(self):\n         self.portal.invokeFactory(\n-            id=\'doc_sp_chars_utf8\',\n-            title=\'Document \xc3\xab\xc3\xaf\xc3\xbb\',\n-            type_name=\'Document\',\n+            id="doc_sp_chars_utf8",\n+            title="Document \xc3\xab\xc3\xaf\xc3\xbb",\n+            type_name="Document",\n         )\n         conversation = IConversation(self.portal.doc_sp_chars_utf8)\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.author_name = \'H\xc3\xbc\xc3\xbcb B\xc3\xb4\xc3\xbbm\xc3\xa4\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.author_name = "H\xc3\xbc\xc3\xbcb B\xc3\xb4\xc3\xbbm\xc3\xa4"\n         conversation.addComment(comment1)\n-        self.assertEqual(u\'H\xc3\xbc\xc3\xbcb B\xc3\xb4\xc3\xbbm\xc3\xa4 on Document \xc3\xab\xc3\xaf\xc3\xbb\', comment1.Title())\n+        self.assertEqual("H\xc3\xbc\xc3\xbcb B\xc3\xb4\xc3\xbbm\xc3\xa4 on Document \xc3\xab\xc3\xaf\xc3\xbb", comment1.Title())\n \n     def test_creator(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.creator = \'jim\'\n-        self.assertEqual(\'jim\', comment1.Creator())\n+        comment1 = createObject("plone.Comment")\n+        comment1.creator = "jim"\n+        self.assertEqual("jim", comment1.Creator())\n \n     def test_creator_author_name(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.author_name = \'joey\'\n-        self.assertEqual(\'joey\', comment1.Creator())\n+        comment1 = createObject("plone.Comment")\n+        comment1.author_name = "joey"\n+        self.assertEqual("joey", comment1.Creator())\n \n     def test_owner(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        self.assertEqual(([\'plone\', \'acl_users\'], TEST_USER_ID),\n-                         comment1.getOwnerTuple())\n+        comment1 = createObject("plone.Comment")\n+        self.assertEqual(\n+            (["plone", "acl_users"], TEST_USER_ID), comment1.getOwnerTuple()\n+        )\n \n     def test_type(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        self.assertEqual(comment1.Type(), \'Comment\')\n+        comment1 = createObject("plone.Comment")\n+        self.assertEqual(comment1.Type(), "Comment")\n \n     def test_mime_type(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        self.assertEqual(comment1.mime_type, \'text/plain\')\n+        comment1 = createObject("plone.Comment")\n+        self.assertEqual(comment1.mime_type, "text/plain")\n \n     def test_getText(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'First paragraph\\n\\nSecond_paragraph\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "First paragraph\\n\\nSecond_paragraph"\n         self.assertEqual(\n-            \'\'.join(comment1.getText().split()),\n-            \'<p>Firstparagraph<br><br>Second_paragraph</p>\',\n+            "".join(comment1.getText().split()),\n+            "<p>Firstparagraph<br><br>Second_paragraph</p>",\n         )\n \n     def test_getText_escapes_HTML(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'<b>Got HTML?</b>\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "<b>Got HTML?</b>"\n         self.assertEqual(\n             comment1.getText(),\n-            \'<p>&lt;b&gt;Got HTML?&lt;/b&gt;</p>\',\n+            "<p>&lt;b&gt;Got HTML?&lt;/b&gt;</p>",\n         )\n \n     def test_getText_with_non_ascii_characters(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = u\'Umlaute sind \xc3\xa4, \xc3\xb6 und \xc3\xbc.\'\n-        out = b\'<p>Umlaute sind \\xc3\\xa4, \\xc3\\xb6 und \\xc3\\xbc.</p>\'\n-        if six.PY2:\n-            self.assertEqual(\n-                comment1.getText(),\n-                out)\n-        else:\n-            self.assertEqual(\n-                comment1.getText(),\n-                out.decode(\'utf8\'))\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Umlaute sind \xc3\xa4, \xc3\xb6 und \xc3\xbc."\n+        out = b"<p>Umlaute sind \\xc3\\xa4, \\xc3\\xb6 und \\xc3\\xbc.</p>"\n+        self.assertEqual(comment1.getText(), out.decode("utf8"))\n \n     def test_getText_doesnt_link(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Go to http://www.plone.org\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Go to http://www.plone.org"\n         self.assertEqual(\n             comment1.getText(),\n-            \'<p>Go to http://www.plone.org</p>\',\n+            "<p>Go to http://www.plone.org</p>",\n         )\n \n     def test_getText_uses_comment_mime_type(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Go to http://www.plone.org\'\n-        comment1.mime_type = \'text/x-web-intelligent\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Go to http://www.plone.org"\n+        comment1.mime_type = "text/x-web-intelligent"\n         self.assertEqual(\n             comment1.getText(),\n-            \'Go to <a href="http://www.plone.org" \' +\n-            \'rel="nofollow">http://www.plone.org</a>\',\n+            \'Go to <a href="http://www.plone.org" \'\n+            + \'rel="nofollow">http://www.plone.org</a>\',\n         )\n \n     def test_getText_uses_comment_mime_type_html(self):\n-        comment1 = createObject(\'plone.Comment\')\n+        comment1 = createObject("plone.Comment")\n         comment1.text = \'Go to <a href="http://www.plone.org">plone.org</a>\'\n-        comment1.mime_type = \'text/html\'\n+        comment1.mime_type = "text/html"\n         self.assertEqual(\n             comment1.getText(),\n             \'Go to <a href="http://www.plone.org">plone.org</a>\',\n         )\n \n     def test_getText_w_custom_targetMimetype(self):\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'para\'\n-        self.assertEqual(comment1.getText(targetMimetype=\'text/plain\'), \'para\')\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "para"\n+        self.assertEqual(comment1.getText(targetMimetype="text/plain"), "para")\n \n     def test_getText_invalid_transformation_raises_error(self):\n         conversation = IConversation(self.portal.doc1)\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.mime_type = \'text/x-html-safe\'\n-        comment1.text = \'para\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.mime_type = "text/x-html-safe"\n+        comment1.text = "para"\n         conversation.addComment(comment1)\n-        self.assertEqual(\n-            comment1.getText(targetMimetype=\'text/html\'),\n-            \'para\')\n+        self.assertEqual(comment1.getText(targetMimetype="text/html"), "para")\n \n     def test_traversal(self):\n         # make sure comments are traversable, have an id, absolute_url and\n@@ -230,26 +220,29 @@ def test_traversal(self):\n \n         conversation = IConversation(self.portal.doc1)\n \n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n \n         new_comment1_id = conversation.addComment(comment1)\n \n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment1_id),\n+            f"++conversation++default/{new_comment1_id}",\n         )\n         self.assertTrue(IComment.providedBy(comment))\n \n         self.assertEqual(\n             (\n-                \'\', \'plone\', \'doc1\', \'++conversation++default\',\n+                "",\n+                "plone",\n+                "doc1",\n+                "++conversation++default",\n                 str(new_comment1_id),\n             ),\n             comment.getPhysicalPath(),\n         )\n         self.assertEqual(\n-            \'http://nohost/plone/doc1/++conversation++default/\' +\n-            str(new_comment1_id), comment.absolute_url(),\n+            "http://nohost/plone/doc1/++conversation++default/" + str(new_comment1_id),\n+            comment.absolute_url(),\n         )\n \n     def test_view_blob_types(self):\n@@ -258,68 +251,67 @@ def test_view_blob_types(self):\n         version of the url with a /view in it.\n         """\n         self.portal.invokeFactory(\n-            id=\'image1\',\n-            title=\'Image\',\n-            type_name=\'Image\',\n+            id="image1",\n+            title="Image",\n+            type_name="Image",\n         )\n         conversation = IConversation(self.portal.image1)\n \n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n         new_comment1_id = conversation.addComment(comment1)\n         comment = self.portal.image1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment1_id),\n+            f"++conversation++default/{new_comment1_id}",\n         )\n \n         view = View(comment, self.request)\n         View.__call__(view)\n         response = self.request.response\n-        self.assertIn(\'/view\', response.headers[\'location\'])\n+        self.assertIn("/view", response.headers["location"])\n \n     def test_workflow(self):\n-        """Basic test for the \'comment_review_workflow\'\n-        """\n+        """Basic test for the \'comment_review_workflow\'"""\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            (\'comment_review_workflow,\'),\n+            ("Discussion Item",),\n+            ("comment_review_workflow,"),\n         )\n \n         conversation = IConversation(self.portal.doc1)\n-        comment1 = createObject(\'plone.Comment\')\n+        comment1 = createObject("plone.Comment")\n         new_comment1_id = conversation.addComment(comment1)\n \n         comment = conversation[new_comment1_id]\n \n         # Make sure comments use the \'comment_review_workflow\'\n         chain = self.portal.portal_workflow.getChainFor(comment)\n-        self.assertEqual((\'comment_review_workflow\',), chain)\n+        self.assertEqual(("comment_review_workflow",), chain)\n \n         # Ensure the initial state was entered and recorded\n         self.assertEqual(\n             1,\n-            len(comment.workflow_history[\'comment_review_workflow\']),\n+            len(comment.workflow_history["comment_review_workflow"]),\n         )\n         self.assertEqual(\n             None,\n-            comment.workflow_history[\'comment_review_workflow\'][0][\'action\'],\n+            comment.workflow_history["comment_review_workflow"][0]["action"],\n         )\n         self.assertEqual(\n-            \'pending\',\n-            self.portal.portal_workflow.getInfoFor(comment, \'review_state\'),\n+            "pending",\n+            self.portal.portal_workflow.getInfoFor(comment, "review_state"),\n         )\n \n     def test_fti(self):\n         # test that we can look up an FTI for Discussion Item\n \n         self.assertIn(\n-            \'Discussion Item\',\n+            "Discussion Item",\n             self.portal.portal_types.objectIds(),\n         )\n \n-        comment1 = createObject(\'plone.Comment\')\n+        comment1 = createObject("plone.Comment")\n \n         fti = self.portal.portal_types.getTypeInfo(comment1)\n-        self.assertEqual(\'Discussion Item\', fti.getTypeInfo(comment1).getId())\n+        self.assertEqual("Discussion Item", fti.getTypeInfo(comment1).getId())\n \n     def test_view(self):\n         # make sure that the comment view is there and redirects to the right\n@@ -330,21 +322,21 @@ def test_view(self):\n         conversation = IConversation(self.portal.doc1)\n \n         # Create a comment\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n \n         # Add comment to the conversation\n         new_comment1_id = conversation.addComment(comment1)\n \n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_comment1_id),\n+            f"++conversation++default/{new_comment1_id}",\n         )\n \n         # make sure the view is there\n         self.assertTrue(\n             getMultiAdapter(\n                 (comment, self.request),\n-                name=\'view\',\n+                name="view",\n             ),\n         )\n \n@@ -362,11 +354,11 @@ class RepliesTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         workflow = self.portal.portal_workflow\n-        workflow.doActionFor(self.portal.doc1, \'publish\')\n+        workflow.doActionFor(self.portal.doc1, "publish")\n \n     def test_add_comment(self):\n         # Add comments to a CommentReplies adapter\n@@ -378,16 +370,16 @@ def test_add_comment(self):\n         # Add a comment to the conversation\n         replies = IReplies(conversation)\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         new_id = replies.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id),\n+            f"++conversation++default/{new_id}",\n         )\n \n         # Add a reply to the CommentReplies adapter of the first comment\n-        re_comment = createObject(\'plone.Comment\')\n-        re_comment.text = \'Comment text\'\n+        re_comment = createObject("plone.Comment")\n+        re_comment.text = "Comment text"\n \n         replies = IReplies(comment)\n \n@@ -415,16 +407,16 @@ def test_delete_comment(self):\n         # Add a comment to the conversation\n         replies = IReplies(conversation)\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         new_id = replies.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id),\n+            f"++conversation++default/{new_id}",\n         )\n \n         # Add a reply to the CommentReplies adapter of the first comment\n-        re_comment = createObject(\'plone.Comment\')\n-        re_comment.text = \'Comment text\'\n+        re_comment = createObject("plone.Comment")\n+        re_comment.text = "Comment text"\n \n         replies = IReplies(comment)\n \n@@ -446,83 +438,86 @@ def test_traversal(self):\n         # physical path\n         conversation = IConversation(self.portal.doc1)\n \n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n \n         conversation.addComment(comment1)\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         new_id = conversation.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id),\n+            f"++conversation++default/{new_id}",\n         )\n \n         # Add a reply to the CommentReplies adapter of the first comment\n-        re_comment = createObject(\'plone.Comment\')\n-        re_comment.text = \'Comment text\'\n+        re_comment = createObject("plone.Comment")\n+        re_comment.text = "Comment text"\n         replies = IReplies(comment)\n         new_re_id = replies.addComment(re_comment)\n         re_comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_re_id),\n+            f"++conversation++default/{new_re_id}",\n         )\n \n         # Add a reply to the reply\n-        re_re_comment = createObject(\'plone.Comment\')\n-        re_re_comment.text = \'Comment text\'\n+        re_re_comment = createObject("plone.Comment")\n+        re_re_comment.text = "Comment text"\n         replies = IReplies(re_comment)\n         new_re_re_id = replies.addComment(re_re_comment)\n         re_re_comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_re_re_id),\n+            f"++conversation++default/{new_re_re_id}",\n         )\n \n         # Add a reply to the replies reply\n-        re_re_re_comment = createObject(\'plone.Comment\')\n-        re_re_re_comment.text = \'Comment text\'\n+        re_re_re_comment = createObject("plone.Comment")\n+        re_re_re_comment.text = "Comment text"\n         replies = IReplies(re_re_comment)\n         new_re_re_re_id = replies.addComment(re_re_re_comment)\n         re_re_re_comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_re_re_re_id),\n+            f"++conversation++default/{new_re_re_re_id}",\n         )\n \n         self.assertEqual(\n-            (\'\', \'plone\', \'doc1\', \'++conversation++default\', str(new_id)),\n+            ("", "plone", "doc1", "++conversation++default", str(new_id)),\n             comment.getPhysicalPath(),\n         )\n         self.assertEqual(\n-            \'http://nohost/plone/doc1/++conversation++default/\' +\n-            str(new_id), comment.absolute_url(),\n+            "http://nohost/plone/doc1/++conversation++default/" + str(new_id),\n+            comment.absolute_url(),\n         )\n         self.assertEqual(\n-            (\'\', \'plone\', \'doc1\', \'++conversation++default\', str(new_re_id)),\n+            ("", "plone", "doc1", "++conversation++default", str(new_re_id)),\n             re_comment.getPhysicalPath(),\n         )\n         self.assertEqual(\n-            \'http://nohost/plone/doc1/++conversation++default/\' +\n-            str(new_re_id),\n+            "http://nohost/plone/doc1/++conversation++default/" + str(new_re_id),\n             re_comment.absolute_url(),\n         )\n         self.assertEqual(\n             (\n-                \'\', \'plone\', \'doc1\', \'++conversation++default\',\n+                "",\n+                "plone",\n+                "doc1",\n+                "++conversation++default",\n                 str(new_re_re_id),\n             ),\n             re_re_comment.getPhysicalPath(),\n         )\n         self.assertEqual(\n-            \'http://nohost/plone/doc1/++conversation++default/\' +\n-            str(new_re_re_id),\n+            "http://nohost/plone/doc1/++conversation++default/" + str(new_re_re_id),\n             re_re_comment.absolute_url(),\n         )\n         self.assertEqual(\n             (\n-                \'\', \'plone\', \'doc1\', \'++conversation++default\',\n+                "",\n+                "plone",\n+                "doc1",\n+                "++conversation++default",\n                 str(new_re_re_re_id),\n             ),\n             re_re_re_comment.getPhysicalPath(),\n         )\n         self.assertEqual(\n-            \'http://nohost/plone/doc1/++conversation++default/\' +\n-            str(new_re_re_re_id),\n+            "http://nohost/plone/doc1/++conversation++default/" + str(new_re_re_re_id),\n             re_re_re_comment.absolute_url(),\n         )\ndiff --git a/plone/app/discussion/tests/test_comments_viewlet.py b/plone/app/discussion/tests/test_comments_viewlet.py\nindex 06b32313..54a18bd5 100644\n--- a/plone/app/discussion/tests/test_comments_viewlet.py\n+++ b/plone/app/discussion/tests/test_comments_viewlet.py\n@@ -1,14 +1,13 @@\n-# -*- coding: utf-8 -*-\n+from .. import interfaces\n+from ..browser.comment import EditCommentForm\n+from ..browser.comments import CommentForm\n+from ..browser.comments import CommentsViewlet\n+from ..interfaces import IConversation\n+from ..interfaces import IDiscussionSettings\n+from ..testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n from AccessControl import Unauthorized\n from datetime import datetime\n from OFS.Image import Image\n-from plone.app.discussion import interfaces\n-from plone.app.discussion.browser.comment import EditCommentForm\n-from plone.app.discussion.browser.comments import CommentForm\n-from plone.app.discussion.browser.comments import CommentsViewlet\n-from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.interfaces import IDiscussionSettings\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n@@ -16,7 +15,6 @@\n from plone.app.testing import TEST_USER_NAME\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.tests import dummy\n from z3c.form.interfaces import IFormLayer\n from zope import interface\n from zope.annotation.interfaces import IAttributeAnnotatable\n@@ -28,33 +26,67 @@\n from zope.interface import Interface\n from zope.publisher.browser import TestRequest\n from zope.publisher.interfaces.browser import IBrowserRequest\n+from ZPublisher.HTTPRequest import FileUpload\n \n+import io\n import time\n import unittest\n \n \n+TEXT = b"file data"\n+\n+\n+class DummyFile(FileUpload):\n+    """Dummy upload object\n+    Used to fake uploaded files.\n+    """\n+\n+    __allow_access_to_unprotected_subobjects__ = 1\n+    filename = "dummy.txt"\n+    data = TEXT\n+    headers = {}\n+\n+    def __init__(self, filename=None, data=None, headers=None):\n+        if filename is not None:\n+            self.filename = filename\n+        if data is not None:\n+            self.data = data\n+        if headers is not None:\n+            self.headers = headers\n+        self.file = io.BytesIO(self.data)\n+\n+    def seek(self, *args):\n+        pass\n+\n+    def tell(self, *args):\n+        return 1\n+\n+    def read(self, *args):\n+        return self.data\n+\n+\n class TestCommentForm(unittest.TestCase):\n \n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'test-folder\')\n-        self.folder = self.portal[\'test-folder\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "test-folder")\n+        self.folder = self.portal["test-folder"]\n \n         interface.alsoProvides(\n             self.portal.REQUEST,\n             interfaces.IDiscussionLayer,\n         )\n \n-        wftool = getToolByName(self.portal, \'portal_workflow\')\n-        wftool.doActionFor(self.portal.doc1, action=\'publish\')\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(self.portal.doc1, action="publish")\n         self.portal.doc1.allow_discussion = True\n-        self.membershipTool = getToolByName(self.folder, \'portal_membership\')\n+        self.membershipTool = getToolByName(self.folder, "portal_membership")\n         self.memberdata = self.portal.portal_memberdata\n-        self.context = getattr(self.portal, \'doc1\')\n+        self.context = getattr(self.portal, "doc1")\n \n         # Allow discussion\n         registry = queryUtility(IRegistry)\n@@ -62,8 +94,7 @@ def setUp(self):\n         settings.globally_enabled = True\n \n     def test_add_comment(self):\n-        """Post a comment as logged-in user.\n-        """\n+        """Post a comment as logged-in user."""\n \n         # Allow discussion\n         self.portal.doc1.allow_discussion = True\n@@ -80,7 +111,7 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u\'comment-form\',\n+            name="comment-form",\n         )\n \n         # The form should return an error if the comment text field is empty\n@@ -88,46 +119,45 @@ def make_request(form={}):\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u\'comment-form\',\n+            name="comment-form",\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n \n         self.assertEqual(len(errors), 1)\n-        self.assertFalse(commentForm.handleComment(commentForm, \'foo\'))\n+        self.assertFalse(commentForm.handleComment(commentForm, "foo"))\n \n         # The form is submitted successfully, if the required text field is\n         # filled out\n-        request = make_request(form={\'form.widgets.text\': u\'bar\'})\n+        request = make_request(form={"form.widgets.text": "bar"})\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u\'comment-form\',\n+            name="comment-form",\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n \n         self.assertEqual(len(errors), 0)\n-        self.assertFalse(commentForm.handleComment(commentForm, \'foo\'))\n+        self.assertFalse(commentForm.handleComment(commentForm, "foo"))\n \n         comments = IConversation(commentForm.context).getComments()\n         comments = [comment for comment in comments]  # consume iterator\n         self.assertEqual(len(comments), 1)\n \n         for comment in comments:\n-            self.assertEqual(comment.text, u\'bar\')\n-            self.assertEqual(comment.creator, \'test_user_1_\')\n-            self.assertEqual(comment.getOwner().getUserName(), \'test-user\')\n+            self.assertEqual(comment.text, "bar")\n+            self.assertEqual(comment.creator, "test_user_1_")\n+            self.assertEqual(comment.getOwner().getUserName(), "test-user")\n             local_roles = comment.get_local_roles()\n             self.assertEqual(len(local_roles), 1)\n             userid, roles = local_roles[0]\n-            self.assertEqual(userid, \'test_user_1_\')\n+            self.assertEqual(userid, "test_user_1_")\n             self.assertEqual(len(roles), 1)\n-            self.assertEqual(roles[0], \'Owner\')\n+            self.assertEqual(roles[0], "Owner")\n \n     def test_edit_comment(self):\n-        """Edit a comment as logged-in user.\n-        """\n+        """Edit a comment as logged-in user."""\n \n         # Allow discussion\n         self.portal.doc1.allow_discussion = True\n@@ -144,65 +174,64 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u\'comment-form\',\n+            name="comment-form",\n         )\n \n         provideAdapter(\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=EditCommentForm,\n-            name=u\'edit-comment-form\',\n+            name="edit-comment-form",\n         )\n \n         # The form is submitted successfully, if the required text field is\n         # filled out\n-        request = make_request(form={\'form.widgets.text\': u\'bar\'})\n+        request = make_request(form={"form.widgets.text": "bar"})\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u\'comment-form\',\n+            name="comment-form",\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n \n         self.assertEqual(len(errors), 0)\n-        self.assertFalse(commentForm.handleComment(commentForm, \'foo\'))\n+        self.assertFalse(commentForm.handleComment(commentForm, "foo"))\n \n         # Edit the last comment\n         conversation = IConversation(self.context)\n         comment = [x for x in conversation.getComments()][-1]\n-        request = make_request(form={\'form.widgets.text\': u\'foobar\'})\n+        request = make_request(form={"form.widgets.text": "foobar"})\n         editForm = getMultiAdapter(\n             (comment, request),\n-            name=u\'edit-comment-form\',\n+            name="edit-comment-form",\n         )\n         editForm.update()\n         data, errors = editForm.extractData()  # pylint: disable-msg=W0612\n \n         self.assertEqual(len(errors), 0)\n-        self.assertFalse(editForm.handleComment(editForm, \'foo\'))\n+        self.assertFalse(editForm.handleComment(editForm, "foo"))\n         comment = [x for x in conversation.getComments()][-1]\n-        self.assertEqual(comment.text, u\'foobar\')\n+        self.assertEqual(comment.text, "foobar")\n \n         comments = IConversation(commentForm.context).getComments()\n         comments = [c for c in comments]  # consume iterator\n         self.assertEqual(len(comments), 1)\n \n         for comment in comments:\n-            self.assertEqual(comment.text, u\'foobar\')\n-            self.assertEqual(comment.creator, \'test_user_1_\')\n+            self.assertEqual(comment.text, "foobar")\n+            self.assertEqual(comment.creator, "test_user_1_")\n \n-            self.assertEqual(comment.getOwner().getUserName(), \'test-user\')\n+            self.assertEqual(comment.getOwner().getUserName(), "test-user")\n             local_roles = comment.get_local_roles()\n             self.assertEqual(len(local_roles), 1)\n             userid, roles = local_roles[0]\n-            self.assertEqual(userid, \'test_user_1_\')\n+            self.assertEqual(userid, "test_user_1_")\n             self.assertEqual(len(roles), 1)\n-            self.assertEqual(roles[0], \'Owner\')\n+            self.assertEqual(roles[0], "Owner")\n \n     def test_delete_comment(self):\n-        """Delete a comment as logged-in user.\n-        """\n+        """Delete a comment as logged-in user."""\n \n         # Allow discussion\n         self.portal.doc1.allow_discussion = True\n@@ -219,48 +248,47 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u\'comment-form\',\n+            name="comment-form",\n         )\n \n         # The form is submitted successfully, if the required text field is\n         # filled out\n-        form_request = make_request(form={\'form.widgets.text\': u\'bar\'})\n+        form_request = make_request(form={"form.widgets.text": "bar"})\n \n         commentForm = getMultiAdapter(\n             (self.context, form_request),\n-            name=u\'comment-form\',\n+            name="comment-form",\n         )\n \n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n         self.assertEqual(len(errors), 0)\n-        self.assertFalse(commentForm.handleComment(commentForm, \'foo\'))\n+        self.assertFalse(commentForm.handleComment(commentForm, "foo"))\n \n         # Delete the last comment\n         conversation = IConversation(self.context)\n         comment = [x for x in conversation.getComments()][-1]\n         deleteView = getMultiAdapter(\n             (comment, self.request),\n-            name=u\'moderate-delete-comment\',\n+            name="moderate-delete-comment",\n         )\n         # try to delete last comment without \'Delete comments\' permission\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         self.assertRaises(\n             Unauthorized,\n             comment.restrictedTraverse,\n-            \'@@moderate-delete-comment\',\n+            "@@moderate-delete-comment",\n         )\n         deleteView()\n         self.assertEqual(1, len([x for x in conversation.getComments()]))\n         # try to delete last comment with \'Delete comments\' permission\n-        setRoles(self.portal, TEST_USER_ID, [\'Reviewer\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Reviewer"])\n         deleteView()\n         self.assertEqual(0, len([x for x in conversation.getComments()]))\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n     def test_delete_own_comment(self):\n-        """Delete own comment as logged-in user.\n-        """\n+        """Delete own comment as logged-in user."""\n \n         # Allow discussion\n         self.portal.doc1.allow_discussion = True\n@@ -277,42 +305,42 @@ def make_request(form={}):\n             adapts=(Interface, IBrowserRequest),\n             provides=Interface,\n             factory=CommentForm,\n-            name=u\'comment-form\',\n+            name="comment-form",\n         )\n \n         # The form is submitted successfully, if the required text field is\n         # filled out\n-        form_request = make_request(form={\'form.widgets.text\': u\'bar\'})\n+        form_request = make_request(form={"form.widgets.text": "bar"})\n \n         commentForm = getMultiAdapter(\n             (self.context, form_request),\n-            name=u\'comment-form\',\n+            name="comment-form",\n         )\n \n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n         self.assertEqual(len(errors), 0)\n-        self.assertFalse(commentForm.handleComment(commentForm, \'foo\'))\n+        self.assertFalse(commentForm.handleComment(commentForm, "foo"))\n \n         # Delete the last comment\n         conversation = IConversation(self.context)\n         comment = [x for x in conversation.getComments()][-1]\n         deleteView = getMultiAdapter(\n             (comment, self.request),\n-            name=u\'delete-own-comment\',\n+            name="delete-own-comment",\n         )\n         # try to delete last comment with johndoe\n-        setRoles(self.portal, \'johndoe\', [\'Member\'])\n-        login(self.portal, \'johndoe\')\n+        setRoles(self.portal, "johndoe", ["Member"])\n+        login(self.portal, "johndoe")\n         self.assertRaises(\n             Unauthorized,\n             comment.restrictedTraverse,\n-            \'@@delete-own-comment\',\n+            "@@delete-own-comment",\n         )\n         self.assertEqual(1, len([x for x in conversation.getComments()]))\n         # try to delete last comment with the same user that created it\n         login(self.portal, TEST_USER_NAME)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         deleteView()\n         self.assertEqual(0, len([x for x in conversation.getComments()]))\n \n@@ -335,40 +363,43 @@ def make_request(form={}):\n             alsoProvides(request, IAttributeAnnotatable)\n             return request\n \n-        provideAdapter(adapts=(Interface, IBrowserRequest),\n-                       provides=Interface,\n-                       factory=CommentForm,\n-                       name=u\'comment-form\')\n+        provideAdapter(\n+            adapts=(Interface, IBrowserRequest),\n+            provides=Interface,\n+            factory=CommentForm,\n+            name="comment-form",\n+        )\n \n         # Post an anonymous comment and provide a name\n-        request = make_request(form={\n-            \'form.widgets.name\': u\'john doe\',\n-            \'form.widgets.text\': u\'bar\',\n-        })\n+        request = make_request(\n+            form={\n+                "form.widgets.name": "john doe",\n+                "form.widgets.text": "bar",\n+            }\n+        )\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u\'comment-form\',\n+            name="comment-form",\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n \n         self.assertEqual(len(errors), 0)\n-        self.assertFalse(commentForm.handleComment(commentForm, \'action\'))\n+        self.assertFalse(commentForm.handleComment(commentForm, "action"))\n \n         comments = IConversation(commentForm.context).getComments()\n         comments = [comment for comment in comments]  # consume itertor\n         self.assertEqual(len(comments), 1)\n \n         for comment in IConversation(commentForm.context).getComments():\n-            self.assertEqual(comment.text, u\'bar\')\n+            self.assertEqual(comment.text, "bar")\n             self.assertIsNone(comment.creator)\n             roles = comment.get_local_roles()\n             self.assertEqual(len(roles), 0)\n \n     def test_can_not_add_comments_if_discussion_is_not_allowed(self):\n-        """Make sure that comments can\'t be posted if discussion is disabled.\n-        """\n+        """Make sure that comments can\'t be posted if discussion is disabled."""\n \n         # Disable discussion\n         registry = queryUtility(IRegistry)\n@@ -382,16 +413,18 @@ def make_request(form={}):\n             alsoProvides(request, IAttributeAnnotatable)\n             return request\n \n-        provideAdapter(adapts=(Interface, IBrowserRequest),\n-                       provides=Interface,\n-                       factory=CommentForm,\n-                       name=u\'comment-form\')\n+        provideAdapter(\n+            adapts=(Interface, IBrowserRequest),\n+            provides=Interface,\n+            factory=CommentForm,\n+            name="comment-form",\n+        )\n \n-        request = make_request(form={\'form.widgets.text\': u\'bar\'})\n+        request = make_request(form={"form.widgets.text": "bar"})\n \n         commentForm = getMultiAdapter(\n             (self.context, request),\n-            name=u\'comment-form\',\n+            name="comment-form",\n         )\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n@@ -400,14 +433,11 @@ def make_request(form={}):\n         # allowed\n         self.assertEqual(len(errors), 0)\n \n-        self.assertRaises(Unauthorized,\n-                          commentForm.handleComment,\n-                          commentForm,\n-                          \'foo\')\n+        self.assertRaises(Unauthorized, commentForm.handleComment, commentForm, "foo")\n \n     def test_anonymous_can_not_add_comments_if_discussion_is_not_allowed(self):\n         """Make sure that anonymous users can\'t post comments if anonymous\n-           comments are disabled.\n+        comments are disabled.\n         """\n \n         # Anonymous comments are disabled by default\n@@ -421,15 +451,16 @@ def make_request(form={}):\n             alsoProvides(request, IAttributeAnnotatable)\n             return request\n \n-        provideAdapter(adapts=(Interface, IBrowserRequest),\n-                       provides=Interface,\n-                       factory=CommentForm,\n-                       name=u\'comment-form\')\n+        provideAdapter(\n+            adapts=(Interface, IBrowserRequest),\n+            provides=Interface,\n+            factory=CommentForm,\n+            name="comment-form",\n+        )\n \n-        request = make_request(form={\'form.widgets.text\': u\'bar\'})\n+        request = make_request(form={"form.widgets.text": "bar"})\n \n-        commentForm = getMultiAdapter((self.context, request),\n-                                      name=u\'comment-form\')\n+        commentForm = getMultiAdapter((self.context, request), name="comment-form")\n         commentForm.update()\n         data, errors = commentForm.extractData()  # pylint: disable-msg=W0612\n \n@@ -438,7 +469,7 @@ def make_request(form={}):\n             Unauthorized,\n             commentForm.handleComment,\n             commentForm,\n-            \'foo\',\n+            "foo",\n         )\n \n \n@@ -447,22 +478,22 @@ class TestCommentsViewlet(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'test-folder\')\n-        self.folder = self.portal[\'test-folder\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "test-folder")\n+        self.folder = self.portal["test-folder"]\n         interface.alsoProvides(\n             self.request,\n             interfaces.IDiscussionLayer,\n         )\n \n-        self.workflowTool = getToolByName(self.portal, \'portal_workflow\')\n-        self.workflowTool.setDefaultChain(\'comment_one_state_workflow\')\n+        self.workflowTool = getToolByName(self.portal, "portal_workflow")\n+        self.workflowTool.setDefaultChain("comment_one_state_workflow")\n \n-        self.membershipTool = getToolByName(self.folder, \'portal_membership\')\n+        self.membershipTool = getToolByName(self.folder, "portal_membership")\n         self.memberdata = self.portal.portal_memberdata\n-        context = getattr(self.portal, \'doc1\')\n+        context = getattr(self.portal, "doc1")\n         self.viewlet = CommentsViewlet(context, self.request, None, None)\n \n         # Allow discussion\n@@ -484,15 +515,14 @@ def test_can_review(self):\n         # Anonymous has no \'can review\' permission\n         self.assertFalse(self.viewlet.can_review())\n         # The reviewer role has the \'Review comments\' permission\n-        self.portal.acl_users._doAddUser(\n-            \'reviewer\', \'secret\', [\'Reviewer\'], [])\n-        login(self.portal, \'reviewer\')\n+        self.portal.acl_users._doAddUser("reviewer", "secret", ["Reviewer"], [])\n+        login(self.portal, "reviewer")\n         self.assertTrue(self.viewlet.can_review())\n \n     def test_can_manage(self):\n         """We keep this method for backward compatibility. This method has been\n-           removed in version 1.0b9 and added again in 1.0b11 because we don\'t\n-           do API changes in beta releases.\n+        removed in version 1.0b9 and added again in 1.0b11 because we don\'t\n+        do API changes in beta releases.\n         """\n         # Portal owner has \'can review\' permission\n         self.assertTrue(self.viewlet.can_manage())\n@@ -500,9 +530,8 @@ def test_can_manage(self):\n         # Anonymous has no \'can review\' permission\n         self.assertFalse(self.viewlet.can_manage())\n         # The reviewer role has the \'Review comments\' permission\n-        self.portal.acl_users._doAddUser(\n-            \'reviewer\', \'secret\', [\'Reviewer\'], [])\n-        login(self.portal, \'reviewer\')\n+        self.portal.acl_users._doAddUser("reviewer", "secret", ["Reviewer"], [])\n+        login(self.portal, "reviewer")\n         self.assertTrue(self.viewlet.can_manage())\n \n     def test_is_discussion_allowed(self):\n@@ -519,46 +548,48 @@ def test_comment_transform_message(self):\n         self.assertTrue(self.viewlet.comment_transform_message())\n         self.assertEqual(\n             self.viewlet.comment_transform_message(),\n-            \'You can add a comment by filling out the form below. Plain \' +\n-            \'text formatting.\')\n+            "You can add a comment by filling out the form below. Plain "\n+            + "text formatting.",\n+        )\n \n         # Set text transform to intelligent text\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n-        settings.text_transform = \'text/x-web-intelligent\'\n+        settings.text_transform = "text/x-web-intelligent"\n \n         # Make sure the comment description changes accordingly\n         self.assertEqual(\n             self.viewlet.comment_transform_message(),\n-            \'You can add a comment by filling out the form below. \' +\n-            \'Plain text formatting. Web and email addresses are transformed \' +\n-            \'into clickable links.\',\n+            "You can add a comment by filling out the form below. "\n+            + "Plain text formatting. Web and email addresses are transformed "\n+            + "into clickable links.",\n         )\n \n         # Enable moderation workflow\n         self.workflowTool.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            (\'comment_review_workflow,\'))\n+            ("Discussion Item",), ("comment_review_workflow,")\n+        )\n \n         # Make sure the comment description shows that comments are moderated\n         self.assertEqual(\n             self.viewlet.comment_transform_message(),\n-            \'You can add a comment by filling out the form below. \' +\n-            \'Plain text formatting. Web and email addresses are transformed \' +\n-            \'into clickable links. Comments are moderated.\')\n+            "You can add a comment by filling out the form below. "\n+            + "Plain text formatting. Web and email addresses are transformed "\n+            + "into clickable links. Comments are moderated.",\n+        )\n \n     def test_has_replies(self):\n         self.assertEqual(self.viewlet.has_replies(), False)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         conversation = IConversation(self.portal.doc1)\n         conversation.addComment(comment)\n         self.assertEqual(self.viewlet.has_replies(), True)\n \n     def test_get_replies(self):\n         self.assertFalse(self.viewlet.get_replies())\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         conversation = IConversation(self.portal.doc1)\n         conversation.addComment(comment)\n         conversation.addComment(comment)\n@@ -571,7 +602,7 @@ def test_get_replies(self):\n             next(replies)\n \n     def test_get_replies_on_non_annotatable_object(self):\n-        context = self.portal.MailHost      # the mail host is not annotatable\n+        context = self.portal.MailHost  # the mail host is not annotatable\n         viewlet = CommentsViewlet(context, self.request, None, None)\n         replies = viewlet.get_replies()\n         self.assertEqual(len(tuple(replies)), 0)\n@@ -581,8 +612,8 @@ def test_get_replies_on_non_annotatable_object(self):\n \n     def test_get_replies_with_workflow_actions(self):\n         self.assertFalse(self.viewlet.get_replies(workflow_actions=True))\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         conversation = IConversation(self.portal.doc1)\n         c1 = conversation.addComment(comment)\n         self.assertEqual(\n@@ -591,32 +622,34 @@ def test_get_replies_with_workflow_actions(self):\n         )\n         # Enable moderation workflow\n         self.workflowTool.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            (\'comment_review_workflow,\'),\n+            ("Discussion Item",),\n+            ("comment_review_workflow,"),\n         )\n         # Check if workflow actions are available\n         reply = next(self.viewlet.get_replies(workflow_actions=True))\n-        self.assertTrue(\'actions\' in reply)\n+        self.assertTrue("actions" in reply)\n         self.assertEqual(\n-            reply[\'actions\'][0][\'id\'],\n-            \'mark_as_spam\',\n+            reply["actions"][0]["id"],\n+            "mark_as_spam",\n+        )\n+        expected_url = (\n+            "http://nohost/plone/doc1/++conversation++default/{0}"\n+            "/content_status_modify?workflow_action=mark_as_spam"\n         )\n-        expected_url = \'http://nohost/plone/doc1/++conversation++default/{0}\' \\\n-                       \'/content_status_modify?workflow_action=mark_as_spam\'\n         self.assertEqual(\n-            reply[\'actions\'][0][\'url\'],\n+            reply["actions"][0]["url"],\n             expected_url.format(int(c1)),\n         )\n \n     def test_get_commenter_home_url(self):\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         IConversation(self.portal.doc1)\n-        portal_membership = getToolByName(self.portal, \'portal_membership\')\n+        portal_membership = getToolByName(self.portal, "portal_membership")\n         m = portal_membership.getAuthenticatedMember()\n         self.assertEqual(\n             self.viewlet.get_commenter_home_url(m.getUserName()),\n-            \'http://nohost/plone/author/test-user\',\n+            "http://nohost/plone/author/test-user",\n         )\n \n     def test_get_commenter_home_url_is_none(self):\n@@ -625,72 +658,77 @@ def test_get_commenter_home_url_is_none(self):\n     def test_get_commenter_portrait(self):\n \n         # Add a user with a member image\n-        self.membershipTool.addMember(\'jim\', \'Jim\', [\'Member\'], [])\n-        self.memberdata._setPortrait(Image(\n-            id=\'jim\',\n-            file=dummy.File(),\n-            title=\'\',\n-        ), \'jim\')\n+        self.membershipTool.addMember("jim", "Jim", ["Member"], [])\n+        self.memberdata._setPortrait(\n+            Image(\n+                id="jim",\n+                file=DummyFile(),\n+                title="",\n+            ),\n+            "jim",\n+        )\n         self.assertEqual(\n-            self.memberdata._getPortrait(\'jim\').getId(),\n-            \'jim\',\n+            self.memberdata._getPortrait("jim").getId(),\n+            "jim",\n         )\n         self.assertEqual(\n-            self.memberdata._getPortrait(\'jim\').meta_type,\n-            \'Image\',\n+            self.memberdata._getPortrait("jim").meta_type,\n+            "Image",\n         )\n \n         # Add a conversation with a comment\n         conversation = IConversation(self.portal.doc1)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n-        comment.Creator = \'Jim\'\n-        comment.author_username = \'jim\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n+        comment.Creator = "Jim"\n+        comment.author_username = "jim"\n         conversation.addComment(comment)\n \n         # Call get_commenter_portrait method of the viewlet\n         self.viewlet.update()\n-        portrait_url = self.viewlet.get_commenter_portrait(\'jim\')\n+        portrait_url = self.viewlet.get_commenter_portrait("jim")\n \n         # Check if the correct member image URL is returned\n         self.assertEqual(\n             portrait_url,\n-            \'http://nohost/plone/portal_memberdata/portraits/jim\',\n+            "http://nohost/plone/portal_memberdata/portraits/jim",\n         )\n \n     def test_get_commenter_portrait_is_none(self):\n \n         self.assertTrue(\n-            self.viewlet.get_commenter_portrait() in (\n-                \'defaultUser.png\',\n-                \'defaultUser.gif\',\n+            self.viewlet.get_commenter_portrait()\n+            in (\n+                "defaultUser.png",\n+                "defaultUser.gif",\n             ),\n         )\n \n     def test_get_commenter_portrait_without_userimage(self):\n \n         # Create a user without a user image\n-        self.membershipTool.addMember(\'jim\', \'Jim\', [\'Member\'], [])\n+        self.membershipTool.addMember("jim", "Jim", ["Member"], [])\n \n         # Add a conversation with a comment\n         conversation = IConversation(self.portal.doc1)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n-        comment.Creator = \'Jim\'\n-        comment.author_username = \'jim\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n+        comment.Creator = "Jim"\n+        comment.author_username = "jim"\n         conversation.addComment(comment)\n \n         # Call get_commenter_portrait method of the viewlet\n         self.viewlet.update()\n-        portrait_url = self.viewlet.get_commenter_portrait(\'jim\')\n+        portrait_url = self.viewlet.get_commenter_portrait("jim")\n \n         # Check if the correct default member image URL is returned.\n         # Note that Products.PlonePAS 4.0.5 and later have .png and\n         # earlier versions have .gif.\n         self.assertTrue(\n-            portrait_url in (\n-                \'http://nohost/plone/defaultUser.png\',\n-                \'http://nohost/plone/defaultUser.gif\',\n+            portrait_url\n+            in (\n+                "http://nohost/plone/defaultUser.png",\n+                "http://nohost/plone/defaultUser.gif",\n             ),\n         )\n \n@@ -700,8 +738,8 @@ def test_anonymous_discussion_allowed(self):\n         # Allow anonymous discussion\n         registry = queryUtility(IRegistry)\n         registry[\n-            \'plone.app.discussion.interfaces.IDiscussionSettings.\' +\n-            \'anonymous_comments\'\n+            "plone.app.discussion.interfaces.IDiscussionSettings."\n+            + "anonymous_comments"\n         ] = True\n         # Test if anonymous discussion is allowed for the viewlet\n         self.assertTrue(self.viewlet.anonymous_discussion_allowed())\n@@ -710,8 +748,8 @@ def test_show_commenter_image(self):\n         self.assertTrue(self.viewlet.show_commenter_image())\n         registry = queryUtility(IRegistry)\n         registry[\n-            \'plone.app.discussion.interfaces.IDiscussionSettings.\' +\n-            \'show_commenter_image\'\n+            "plone.app.discussion.interfaces.IDiscussionSettings."\n+            + "show_commenter_image"\n         ] = False\n         self.assertFalse(self.viewlet.show_commenter_image())\n \n@@ -724,7 +762,7 @@ def test_login_action(self):\n         self.viewlet.update()\n         self.assertEqual(\n             self.viewlet.login_action(),\n-            \'http://nohost/plone/login_form?came_from=http%3A//nohost\',\n+            "http://nohost/plone/login_form?came_from=http%3A//nohost",\n         )\n \n     def test_format_time(self):\n@@ -737,9 +775,8 @@ def test_format_time(self):\n         # a correct utc time that can be used to make datetime set the utc\n         # time of the local time given above. That way, the time for the\n         # example below is correct within each time zone, independent of DST\n-        python_time = datetime(\n-            *time.gmtime(time.mktime(python_time.timetuple()))[:7])\n+        python_time = datetime(*time.gmtime(time.mktime(python_time.timetuple()))[:7])\n         localized_time = self.viewlet.format_time(python_time)\n         self.assertTrue(\n-            localized_time in [\'Feb 01, 2009 11:32 PM\', \'2009-02-01 23:32\'],\n+            localized_time in ["Feb 01, 2009 11:32 PM", "2009-02-01 23:32"],\n         )\ndiff --git a/plone/app/discussion/tests/test_contentrules.py b/plone/app/discussion/tests/test_contentrules.py\nindex c05aeded..506a5383 100644\n--- a/plone/app/discussion/tests/test_contentrules.py\n+++ b/plone/app/discussion/tests/test_contentrules.py\n@@ -1,11 +1,12 @@\n-# -*- coding: utf-8 -*-\n from plone.app.discussion.interfaces import ICommentAddedEvent\n from plone.app.discussion.interfaces import ICommentRemovedEvent\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IReplies\n from plone.app.discussion.interfaces import IReplyAddedEvent\n from plone.app.discussion.interfaces import IReplyRemovedEvent\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from plone.app.discussion.testing import (  # noqa\n+    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.contentrules.rule.interfaces import IRuleEventType\n@@ -17,31 +18,33 @@\n \n \n class CommentContentRulesTest(unittest.TestCase):\n-    """ Test custom comments events\n-    """\n+    """Test custom comments events"""\n+\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n         # Setup sandbox\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n \n         # Setup current user properties\n         member = self.portal.portal_membership.getMemberById(TEST_USER_ID)\n-        member.setMemberProperties({\n-            \'fullname\': \'X Manager\',\n-            \'email\': \'xmanager@example.com\',\n-        })\n+        member.setMemberProperties(\n+            {\n+                "fullname": "X Manager",\n+                "email": "xmanager@example.com",\n+            }\n+        )\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.document = self.portal[\'doc1\']\n+        self.document = self.portal["doc1"]\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'This is a comment\'\n-        comment.author_username = \'jim\'\n-        comment.author_name = \'Jim\'\n-        comment.author_email = \'jim@example.com\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "This is a comment"\n+        comment.author_username = "jim"\n+        comment.author_name = "Jim"\n+        comment.author_email = "jim@example.com"\n         conversation = IConversation(self.document)\n         conversation.addComment(comment)\n \n@@ -52,58 +55,61 @@ def testEventTypesMarked(self):\n         self.assertTrue(IRuleEventType.providedBy(IReplyRemovedEvent))\n \n     def testCommentIdStringSubstitution(self):\n-        comment_id = getAdapter(self.document, IStringSubstitution,\n-                                name=u\'comment_id\')\n+        comment_id = getAdapter(self.document, IStringSubstitution, name="comment_id")\n         self.assertIsInstance(comment_id(), int)\n \n     def testCommentTextStringSubstitution(self):\n-        comment_text = getAdapter(self.document, IStringSubstitution,\n-                                  name=u\'comment_text\')\n-        self.assertEqual(comment_text(), u\'This is a comment\')\n+        comment_text = getAdapter(\n+            self.document, IStringSubstitution, name="comment_text"\n+        )\n+        self.assertEqual(comment_text(), "This is a comment")\n \n     def testCommentUserIdStringSubstitution(self):\n-        comment_user_id = getAdapter(self.document, IStringSubstitution,\n-                                     name=u\'comment_user_id\')\n-        self.assertEqual(comment_user_id(), u\'jim\')\n+        comment_user_id = getAdapter(\n+            self.document, IStringSubstitution, name="comment_user_id"\n+        )\n+        self.assertEqual(comment_user_id(), "jim")\n \n     def testCommentUserFullNameStringSubstitution(self):\n-        comment_user_fullname = getAdapter(self.document, IStringSubstitution,\n-                                           name=u\'comment_user_fullname\')\n-        self.assertEqual(comment_user_fullname(), u\'Jim\')\n+        comment_user_fullname = getAdapter(\n+            self.document, IStringSubstitution, name="comment_user_fullname"\n+        )\n+        self.assertEqual(comment_user_fullname(), "Jim")\n \n     def testCommentUserEmailStringSubstitution(self):\n-        comment_user_email = getAdapter(self.document, IStringSubstitution,\n-                                        name=u\'comment_user_email\')\n-        self.assertEqual(comment_user_email(), u\'jim@example.com\')\n+        comment_user_email = getAdapter(\n+            self.document, IStringSubstitution, name="comment_user_email"\n+        )\n+        self.assertEqual(comment_user_email(), "jim@example.com")\n \n \n class ReplyContentRulesTest(unittest.TestCase):\n-    """ Test custom comments events\n-    """\n+    """Test custom comments events"""\n+\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n         # Setup sandbox\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        self.document = self.portal[\'doc1\']\n+        self.document = self.portal["doc1"]\n         conversation = IConversation(self.document)\n         replies = IReplies(conversation)\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'This is a comment\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "This is a comment"\n         new_id = replies.addComment(comment)\n         comment = self.document.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id),\n+            f"++conversation++default/{new_id}",\n         )\n \n-        re_comment = createObject(\'plone.Comment\')\n-        re_comment.text = \'This is a reply\'\n-        re_comment.author_username = \'julia\'\n-        re_comment.author_name = \'Juliana\'\n-        re_comment.author_email = \'julia@example.com\'\n+        re_comment = createObject("plone.Comment")\n+        re_comment.text = "This is a reply"\n+        re_comment.author_username = "julia"\n+        re_comment.author_name = "Juliana"\n+        re_comment.author_email = "julia@example.com"\n \n         replies = IReplies(comment)\n         replies.addComment(re_comment)\n@@ -112,7 +118,7 @@ def testReplyIdStringSubstitution(self):\n         reply_id = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u\'comment_id\',\n+            name="comment_id",\n         )\n         self.assertIsInstance(reply_id(), int)\n \n@@ -120,30 +126,30 @@ def testReplyTextStringSubstitution(self):\n         reply_text = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u\'comment_text\',\n+            name="comment_text",\n         )\n-        self.assertEqual(reply_text(), u\'This is a reply\')\n+        self.assertEqual(reply_text(), "This is a reply")\n \n     def testReplyUserIdStringSubstitution(self):\n         reply_user_id = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u\'comment_user_id\',\n+            name="comment_user_id",\n         )\n-        self.assertEqual(reply_user_id(), u\'julia\')\n+        self.assertEqual(reply_user_id(), "julia")\n \n     def testReplyUserFullNameStringSubstitution(self):\n         reply_user_fullname = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u\'comment_user_fullname\',\n+            name="comment_user_fullname",\n         )\n-        self.assertEqual(reply_user_fullname(), u\'Juliana\')\n+        self.assertEqual(reply_user_fullname(), "Juliana")\n \n     def testReplyUserEmailStringSubstitution(self):\n         reply_user_email = getAdapter(\n             self.document,\n             IStringSubstitution,\n-            name=u\'comment_user_email\',\n+            name="comment_user_email",\n         )\n-        self.assertEqual(reply_user_email(), u\'julia@example.com\')\n+        self.assertEqual(reply_user_email(), "julia@example.com")\ndiff --git a/plone/app/discussion/tests/test_controlpanel.py b/plone/app/discussion/tests/test_controlpanel.py\nindex 4ad30189..b148547e 100644\n--- a/plone/app/discussion/tests/test_controlpanel.py\n+++ b/plone/app/discussion/tests/test_controlpanel.py\n@@ -1,6 +1,7 @@\n-# -*- coding: utf-8 -*-\n from plone.app.discussion.interfaces import IDiscussionSettings\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from plone.app.discussion.testing import (  # noqa\n+    PLONE_APP_DISCUSSION_INTEGRATION_TESTING,\n+)\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.registry import Registry\n@@ -17,8 +18,8 @@ class RegistryTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.registry = Registry()\n         self.registry.registerInterface(IDiscussionSettings)\n \n@@ -29,99 +30,100 @@ def test_registry_registered(self):\n     def test_discussion_controlpanel_view(self):\n         view = getMultiAdapter(\n             (self.portal, self.portal.REQUEST),\n-            name=\'discussion-controlpanel\',\n+            name="discussion-controlpanel",\n         )\n         self.assertTrue(view())\n \n     def test_discussion_in_controlpanel(self):\n         # Check if discussion is in the control panel\n-        self.controlpanel = getToolByName(self.portal, \'portal_controlpanel\')\n+        self.controlpanel = getToolByName(self.portal, "portal_controlpanel")\n         self.assertTrue(\n-            \'discussion\' in [\n-                a.getAction(self)[\'id\']\n-                for a in self.controlpanel.listActions()\n-            ],\n+            "discussion"\n+            in [a.getAction(self)["id"] for a in self.controlpanel.listActions()],\n         )\n \n     def test_globally_enabled(self):\n         # Check globally_enabled record\n-        self.assertTrue(\'globally_enabled\' in IDiscussionSettings)\n+        self.assertTrue("globally_enabled" in IDiscussionSettings)\n         self.assertEqual(\n             self.registry[\n-                \'plone.app.discussion.interfaces.\' +\n-                \'IDiscussionSettings.globally_enabled\'\n+                "plone.app.discussion.interfaces."\n+                + "IDiscussionSettings.globally_enabled"\n             ],\n             False,\n         )\n \n     def test_anonymous_comments(self):\n         # Check anonymous_comments record\n-        self.assertTrue(\'anonymous_comments\' in IDiscussionSettings)\n+        self.assertTrue("anonymous_comments" in IDiscussionSettings)\n         self.assertEqual(\n             self.registry[\n-                \'plone.app.discussion.interfaces.\' +\n-                \'IDiscussionSettings.anonymous_comments\'\n+                "plone.app.discussion.interfaces."\n+                + "IDiscussionSettings.anonymous_comments"\n             ],\n             False,\n         )\n \n     def test_moderation_enabled(self):\n         # Check globally_enabled record\n-        self.assertTrue(\'moderation_enabled\' in IDiscussionSettings)\n+        self.assertTrue("moderation_enabled" in IDiscussionSettings)\n         self.assertEqual(\n             self.registry[\n-                \'plone.app.discussion.interfaces.\' +\n-                \'IDiscussionSettings.moderation_enabled\'\n+                "plone.app.discussion.interfaces."\n+                + "IDiscussionSettings.moderation_enabled"\n             ],\n             False,\n         )\n \n     def test_edit_comment_enabled(self):\n         # Check edit_comment_enabled record\n-        self.assertTrue(\'edit_comment_enabled\' in IDiscussionSettings)\n+        self.assertTrue("edit_comment_enabled" in IDiscussionSettings)\n         self.assertEqual(\n-            self.registry[\'plone.app.discussion.interfaces.\' +\n-                          \'IDiscussionSettings.edit_comment_enabled\'],\n+            self.registry[\n+                "plone.app.discussion.interfaces."\n+                + "IDiscussionSettings.edit_comment_enabled"\n+            ],\n             False,\n         )\n \n     def test_delete_own_comment_enabled(self):\n         # Check delete_own_comment_enabled record\n-        self.assertTrue(\'delete_own_comment_enabled\' in IDiscussionSettings)\n+        self.assertTrue("delete_own_comment_enabled" in IDiscussionSettings)\n         self.assertEqual(\n-            self.registry[\'plone.app.discussion.interfaces.\' +\n-                          \'IDiscussionSettings.delete_own_comment_enabled\'],\n+            self.registry[\n+                "plone.app.discussion.interfaces."\n+                + "IDiscussionSettings.delete_own_comment_enabled"\n+            ],\n             False,\n         )\n \n     def test_text_transform(self):\n-        self.assertTrue(\'text_transform\' in IDiscussionSettings)\n+        self.assertTrue("text_transform" in IDiscussionSettings)\n         self.assertEqual(\n             self.registry[\n-                \'plone.app.discussion.interfaces.\' +\n-                \'IDiscussionSettings.text_transform\'\n+                "plone.app.discussion.interfaces."\n+                + "IDiscussionSettings.text_transform"\n             ],\n-            \'text/plain\',\n+            "text/plain",\n         )\n \n     def test_captcha(self):\n         # Check globally_enabled record\n-        self.assertTrue(\'captcha\' in IDiscussionSettings)\n+        self.assertTrue("captcha" in IDiscussionSettings)\n         self.assertEqual(\n             self.registry[\n-                \'plone.app.discussion.interfaces.\' +\n-                \'IDiscussionSettings.captcha\'\n+                "plone.app.discussion.interfaces." + "IDiscussionSettings.captcha"\n             ],\n-            \'disabled\',\n+            "disabled",\n         )\n \n     def test_show_commenter_image(self):\n         # Check show_commenter_image record\n-        self.assertTrue(\'show_commenter_image\' in IDiscussionSettings)\n+        self.assertTrue("show_commenter_image" in IDiscussionSettings)\n         self.assertEqual(\n             self.registry[\n-                \'plone.app.discussion.interfaces.\' +\n-                \'IDiscussionSettings.show_commenter_image\'\n+                "plone.app.discussion.interfaces."\n+                + "IDiscussionSettings.show_commenter_image"\n             ],\n             True,\n         )\n@@ -129,12 +131,12 @@ def test_show_commenter_image(self):\n     def test_moderator_notification_enabled(self):\n         # Check show_commenter_image record\n         self.assertTrue(\n-            \'moderator_notification_enabled\' in IDiscussionSettings,\n+            "moderator_notification_enabled" in IDiscussionSettings,\n         )\n         self.assertEqual(\n             self.registry[\n-                \'plone.app.discussion.interfaces.\' +\n-                \'IDiscussionSettings.moderator_notification_enabled\'\n+                "plone.app.discussion.interfaces."\n+                + "IDiscussionSettings.moderator_notification_enabled"\n             ],\n             False,\n         )\n@@ -154,22 +156,22 @@ class ConfigurationChangedSubscriberTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         registry = queryUtility(IRegistry)\n         self.settings = registry.forInterface(IDiscussionSettings, check=False)\n \n     def test_moderation_enabled_in_discussion_control_panel_changed(self):\n         """Make sure the \'Discussion Item\' workflow is changed properly, when\n-           the \'comment_moderation\' setting in the discussion control panel\n-           changes.\n+        the \'comment_moderation\' setting in the discussion control panel\n+        changes.\n         """\n         # By default the comment_one_state_workflow without moderation is\n         # enabled\n         self.assertEqual(\n-            (\'comment_one_state_workflow\',),\n+            ("comment_one_state_workflow",),\n             self.portal.portal_workflow.getChainForPortalType(\n-                \'Discussion Item\',\n+                "Discussion Item",\n             ),\n         )\n \n@@ -179,32 +181,32 @@ def test_moderation_enabled_in_discussion_control_panel_changed(self):\n         # Make sure the comment_review_workflow with moderation enabled is\n         # enabled\n         self.assertEqual(\n-            (\'comment_review_workflow\',),\n+            ("comment_review_workflow",),\n             self.portal.portal_workflow.getChainForPortalType(\n-                \'Discussion Item\',\n+                "Discussion Item",\n             ),\n         )\n         # And back\n         self.settings.moderation_enabled = False\n         self.assertEqual(\n-            (\'comment_one_state_workflow\',),\n+            ("comment_one_state_workflow",),\n             self.portal.portal_workflow.getChainForPortalType(\n-                \'Discussion Item\',\n+                "Discussion Item",\n             ),\n         )\n \n     def test_change_workflow_in_types_control_panel(self):\n         """Make sure the setting in the discussion control panel is changed\n-           accordingly, when the workflow for the \'Discussion Item\' changed in\n-           the types control panel.\n+        accordingly, when the workflow for the \'Discussion Item\' changed in\n+        the types control panel.\n         """\n         # By default, moderation is disabled\n         self.settings.moderation_enabled = False\n \n         # Enable the \'comment_review_workflow\' with moderation enabled\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            (\'comment_review_workflow\',),\n+            ("Discussion Item",),\n+            ("comment_review_workflow",),\n         )\n \n         # Make sure the moderation_enabled settings has changed\n@@ -212,15 +214,15 @@ def test_change_workflow_in_types_control_panel(self):\n \n         # Enable the \'comment_review_workflow\' with moderation enabled\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            (\'comment_one_state_workflow\',),\n+            ("Discussion Item",),\n+            ("comment_one_state_workflow",),\n         )\n         self.settings.moderation_enabled = True\n \n         # Enable a \'custom\' discussion workflow\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            (\'intranet_workflow\',),\n+            ("Discussion Item",),\n+            ("intranet_workflow",),\n         )\n \n         # Setting has not changed. A Custom workflow disables the\ndiff --git a/plone/app/discussion/tests/test_conversation.py b/plone/app/discussion/tests/test_conversation.py\nindex fcf528c1..febce286 100644\n--- a/plone/app/discussion/tests/test_conversation.py\n+++ b/plone/app/discussion/tests/test_conversation.py\n@@ -1,17 +1,17 @@\n-# -*- coding: utf-8 -*-\n+from ..interfaces import IComment\n+from ..interfaces import IConversation\n+from ..interfaces import IDiscussionLayer\n+from ..interfaces import IDiscussionSettings\n+from ..interfaces import IReplies\n+from ..testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n from Acquisition import aq_base\n from Acquisition import aq_parent\n from datetime import datetime\n from datetime import timedelta\n-from plone.app.discussion import interfaces\n-from plone.app.discussion.interfaces import IComment\n-from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.interfaces import IDiscussionSettings\n-from plone.app.discussion.interfaces import IReplies\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.vocabularies.types import BAD_TYPES\n+from plone.dexterity.interfaces import IDexterityContent\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from zope import interface\n@@ -19,31 +19,22 @@\n from zope.component import createObject\n from zope.component import queryUtility\n \n-import six\n import unittest\n \n \n-try:\n-    from plone.dexterity.interfaces import IDexterityContent\n-    DEXTERITY = True\n-except ImportError:\n-    DEXTERITY = False\n-\n-\n class ConversationTest(unittest.TestCase):\n \n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        interface.alsoProvides(\n-            self.portal.REQUEST, interfaces.IDiscussionLayer)\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        interface.alsoProvides(self.portal.REQUEST, IDiscussionLayer)\n \n         self.typetool = self.portal.portal_types\n         self.portal_discussion = getToolByName(\n             self.portal,\n-            \'portal_discussion\',\n+            "portal_discussion",\n             None,\n         )\n         # Allow discussion\n@@ -52,7 +43,7 @@ def setUp(self):\n         settings.globally_enabled = True\n \n         workflow = self.portal.portal_workflow\n-        workflow.doActionFor(self.portal.doc1, \'publish\')\n+        workflow.doActionFor(self.portal.doc1, "publish")\n \n     def test_add_comment(self):\n         # Create a conversation. In this case we doesn\'t assign it to an\n@@ -62,8 +53,8 @@ def test_add_comment(self):\n         # Add a comment. Note: in real life, we always create comments via the\n         # factory to allow different factories to be swapped in\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         new_id = conversation.addComment(comment)\n \n@@ -79,20 +70,19 @@ def test_add_comment(self):\n         self.assertEqual(len(tuple(conversation.getThreads())), 1)\n         self.assertEqual(conversation.total_comments(), 1)\n         self.assertTrue(\n-            conversation.last_comment_date - datetime.utcnow() <\n-            timedelta(seconds=1),\n+            conversation.last_comment_date - datetime.utcnow() < timedelta(seconds=1),\n         )\n \n     def test_private_comment(self):\n         conversation = IConversation(self.portal.doc1)\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.author_username = \'nobody\'\n+        comment = createObject("plone.Comment")\n+        comment.author_username = "nobody"\n         conversation.addComment(comment)\n-        comment.manage_permission(\'View\', roles=tuple())\n+        comment.manage_permission("View", roles=tuple())\n         self.assertEqual(0, conversation.total_comments())\n         self.assertEqual(None, conversation.last_comment_date)\n-        self.assertEqual([\'nobody\'], list(conversation.commentators))\n+        self.assertEqual(["nobody"], list(conversation.commentators))\n         self.assertEqual([], list(conversation.public_commentators))\n \n     def test_delete_comment(self):\n@@ -103,8 +93,8 @@ def test_delete_comment(self):\n         # Add a comment. Note: in real life, we always create comments via the\n         # factory to allow different factories to be swapped in\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         new_id = conversation.addComment(comment)\n \n@@ -139,23 +129,23 @@ def test_delete_recursive(self):\n         #    +- Comment 2_1\n \n         # Create all comments\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n \n-        comment1_1 = createObject(\'plone.Comment\')\n-        comment1_1.text = \'Comment text\'\n+        comment1_1 = createObject("plone.Comment")\n+        comment1_1.text = "Comment text"\n \n-        comment1_1_1 = createObject(\'plone.Comment\')\n-        comment1_1_1.text = \'Comment text\'\n+        comment1_1_1 = createObject("plone.Comment")\n+        comment1_1_1.text = "Comment text"\n \n-        comment1_2 = createObject(\'plone.Comment\')\n-        comment1_2.text = \'Comment text\'\n+        comment1_2 = createObject("plone.Comment")\n+        comment1_2.text = "Comment text"\n \n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.text = \'Comment text\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.text = "Comment text"\n \n-        comment2_1 = createObject(\'plone.Comment\')\n-        comment2_1.text = \'Comment text\'\n+        comment2_1 = createObject("plone.Comment")\n+        comment2_1.text = "Comment text"\n \n         # Create the nested comment structure\n         new_id_1 = conversation.addComment(comment1)\n@@ -175,21 +165,24 @@ def test_delete_recursive(self):\n \n         del conversation[new_id_1]\n \n-        self.assertEqual([\n-            {\'comment\': comment2, \'depth\': 0, \'id\': new_id_2},\n-            {\'comment\': comment2_1, \'depth\': 1, \'id\': new_id_2_1},\n-        ], list(conversation.getThreads()))\n+        self.assertEqual(\n+            [\n+                {"comment": comment2, "depth": 0, "id": new_id_2},\n+                {"comment": comment2_1, "depth": 1, "id": new_id_2_1},\n+            ],\n+            list(conversation.getThreads()),\n+        )\n \n     def test_delete_comment_when_content_object_is_deleted(self):\n         # Make sure all comments of a content object are deleted when the\n         # object itself is deleted.\n         conversation = IConversation(self.portal.doc1)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         conversation.addComment(comment)\n \n         # Delete the content object\n-        self.portal.manage_delObjects([\'doc1\'])\n+        self.portal.manage_delObjects(["doc1"])\n \n         # Make sure the comment has been deleted as well\n         self.assertEqual(len(list(conversation.getComments())), 0)\n@@ -198,8 +191,8 @@ def test_delete_comment_when_content_object_is_deleted(self):\n \n     def test_comments_enabled_on_doc_in_subfolder(self):\n         typetool = self.portal.portal_types\n-        typetool.constructContent(\'Folder\', self.portal, \'folder1\')\n-        typetool.constructContent(\'Document\', self.portal.folder1, \'doc2\')\n+        typetool.constructContent("Folder", self.portal, "folder1")\n+        typetool.constructContent("Document", self.portal.folder1, "doc2")\n \n         folder = self.portal.folder1\n \n@@ -209,13 +202,13 @@ def test_comments_enabled_on_doc_in_subfolder(self):\n         self.assertFalse(aq_base(folder).allow_discussion)\n \n         doc = self.portal.folder1.doc2\n-        conversation = doc.restrictedTraverse(\'@@conversation_view\')\n+        conversation = doc.restrictedTraverse("@@conversation_view")\n         self.assertEqual(conversation.enabled(), False)\n \n         # We have to allow discussion on Document content type, since\n         # otherwise allow_discussion will always return False\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n-        document_fti = getattr(portal_types, \'Document\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n+        document_fti = getattr(portal_types, "Document")\n         document_fti.manage_changeProperties(allow_discussion=True)\n \n         self.assertEqual(conversation.enabled(), True)\n@@ -223,13 +216,12 @@ def test_comments_enabled_on_doc_in_subfolder(self):\n     def test_disable_commenting_globally(self):\n \n         # Create a conversation.\n-        conversation = self.portal.doc1.restrictedTraverse(\n-            \'@@conversation_view\')\n+        conversation = self.portal.doc1.restrictedTraverse("@@conversation_view")\n \n         # We have to allow discussion on Document content type, since\n         # otherwise allow_discussion will always return False\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n-        document_fti = getattr(portal_types, \'Document\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n+        document_fti = getattr(portal_types, "Document")\n         document_fti.manage_changeProperties(allow_discussion=True)\n \n         # Check if conversation is enabled now\n@@ -249,14 +241,14 @@ def test_disable_commenting_globally(self):\n \n     def test_allow_discussion_for_news_items(self):\n \n-        self.typetool.constructContent(\'News Item\', self.portal, \'newsitem\')\n+        self.typetool.constructContent("News Item", self.portal, "newsitem")\n         newsitem = self.portal.newsitem\n-        conversation = newsitem.restrictedTraverse(\'@@conversation_view\')\n+        conversation = newsitem.restrictedTraverse("@@conversation_view")\n \n         # We have to allow discussion on Document content type, since\n         # otherwise allow_discussion will always return False\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n-        document_fti = getattr(portal_types, \'News Item\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n+        document_fti = getattr(portal_types, "News Item")\n         document_fti.manage_changeProperties(allow_discussion=True)\n \n         # Check if conversation is enabled now\n@@ -278,23 +270,23 @@ def test_disable_commenting_for_content_type(self):\n \n         # Create a conversation.\n         conversation = self.portal.doc1.restrictedTraverse(\n-            \'@@conversation_view\',\n+            "@@conversation_view",\n         )\n \n         # The Document content type is disabled by default\n         self.assertEqual(conversation.enabled(), False)\n \n         # Allow discussion on Document content type\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n-        document_fti = getattr(portal_types, \'Document\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n+        document_fti = getattr(portal_types, "Document")\n         document_fti.manage_changeProperties(allow_discussion=True)\n \n         # Check if conversation is enabled now\n         self.assertEqual(conversation.enabled(), True)\n \n         # Disallow discussion on Document content type\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n-        document_fti = getattr(portal_types, \'Document\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n+        document_fti = getattr(portal_types, "Document")\n         document_fti.manage_changeProperties(allow_discussion=False)\n \n         # Check if conversation is enabled now\n@@ -306,17 +298,17 @@ def test_allow_discussion_on_folder(self):\n         # plone.app.contenttypes does not have this restriction any longer.\n \n         # Create a folder\n-        self.typetool.constructContent(\'Folder\', self.portal, \'f1\')\n+        self.typetool.constructContent("Folder", self.portal, "f1")\n \n         # Usually we don\'t create a conversation on a folder\n-        conversation = self.portal.f1.restrictedTraverse(\'@@conversation_view\')\n+        conversation = self.portal.f1.restrictedTraverse("@@conversation_view")\n \n         # Allow discussion for the folder\n         self.portal.f1.allow_discussion = True\n \n         # Allow discussion on Folder content type\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n-        document_fti = getattr(portal_types, \'Folder\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n+        document_fti = getattr(portal_types, "Folder")\n         document_fti.manage_changeProperties(allow_discussion=True)\n \n         self.assertTrue(conversation.enabled())\n@@ -326,7 +318,7 @@ def test_is_discussion_allowed_on_content_object(self):\n \n         # Create a conversation.\n         conversation = self.portal.doc1.restrictedTraverse(\n-            \'@@conversation_view\',\n+            "@@conversation_view",\n         )\n \n         # Discussion is disallowed by default\n@@ -351,13 +343,13 @@ def test_dict_operations(self):\n         # Add a comment. Note: in real life, we always create comments via the\n         # factory to allow different factories to be swapped in\n \n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n \n         new_id1 = conversation.addComment(comment1)\n \n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.text = \'Comment text\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.text = "Comment text"\n \n         new_id2 = conversation.addComment(comment2)\n \n@@ -384,17 +376,17 @@ def test_dict_operations(self):\n         self.assertTrue(comment2 in conversation.values())\n \n         # check if comment ids are in iterkeys\n-        self.assertTrue(new_id1 in six.iterkeys(conversation))\n-        self.assertTrue(new_id2 in six.iterkeys(conversation))\n-        self.assertFalse(123 in six.iterkeys(conversation))\n+        self.assertTrue(new_id1 in conversation.keys())\n+        self.assertTrue(new_id2 in conversation.keys())\n+        self.assertFalse(123 in conversation.keys())\n \n         # check if comment objects are in itervalues\n-        self.assertTrue(comment1 in six.itervalues(conversation))\n-        self.assertTrue(comment2 in six.itervalues(conversation))\n+        self.assertTrue(comment1 in conversation.values())\n+        self.assertTrue(comment2 in conversation.values())\n \n         # check if iteritems returns (key, comment object) pairs\n-        self.assertTrue((new_id1, comment1) in six.iteritems(conversation))\n-        self.assertTrue((new_id2, comment2) in six.iteritems(conversation))\n+        self.assertTrue((new_id1, comment1) in conversation.items())\n+        self.assertTrue((new_id2, comment2) in conversation.items())\n \n         # TODO test acquisition wrapping  # noqa T000\n         # self.assertTrue(aq_base(aq_parent(comment1)) is conversation)\n@@ -408,14 +400,14 @@ def test_total_comments(self):\n         # comments via the factory to allow different factories to be\n         # swapped in\n \n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n \n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.text = \'Comment text\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.text = "Comment text"\n \n-        comment3 = createObject(\'plone.Comment\')\n-        comment3.text = \'Comment text\'\n+        comment3 = createObject("plone.Comment")\n+        comment3.text = "Comment text"\n \n         conversation.addComment(comment1)\n         conversation.addComment(comment2)\n@@ -437,49 +429,49 @@ def test_commentators(self):\n         # Note: in real life, we always create\n         # comments via the factory to allow different factories to be\n         # swapped in\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n-        comment1.author_username = \'Jim\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n+        comment1.author_username = "Jim"\n         conversation.addComment(comment1)\n \n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.text = \'Comment text\'\n-        comment2.author_username = \'Joe\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.text = "Comment text"\n+        comment2.author_username = "Joe"\n         conversation.addComment(comment2)\n \n-        comment3 = createObject(\'plone.Comment\')\n-        comment3.text = \'Comment text\'\n-        comment3.author_username = \'Jack\'\n+        comment3 = createObject("plone.Comment")\n+        comment3.text = "Comment text"\n+        comment3.author_username = "Jack"\n         new_comment3_id = conversation.addComment(comment3)\n \n-        comment4 = createObject(\'plone.Comment\')\n-        comment4.text = \'Comment text\'\n-        comment4.author_username = \'Jack\'\n+        comment4 = createObject("plone.Comment")\n+        comment4.text = "Comment text"\n+        comment4.author_username = "Jack"\n         new_comment4_id = conversation.addComment(comment4)\n \n         # check if all commentators are in the commentators list\n         self.assertEqual(conversation.total_comments(), 4)\n-        self.assertTrue(\'Jim\' in conversation.commentators)\n-        self.assertTrue(\'Joe\' in conversation.commentators)\n-        self.assertTrue(\'Jack\' in conversation.commentators)\n+        self.assertTrue("Jim" in conversation.commentators)\n+        self.assertTrue("Joe" in conversation.commentators)\n+        self.assertTrue("Jack" in conversation.commentators)\n \n         # remove the comment from Jack\n         del conversation[new_comment3_id]\n \n         # check if Jack is still in the commentators list (since\n         # he had added two comments)\n-        self.assertTrue(\'Jim\' in conversation.commentators)\n-        self.assertTrue(\'Joe\' in conversation.commentators)\n-        self.assertTrue(\'Jack\' in conversation.commentators)\n+        self.assertTrue("Jim" in conversation.commentators)\n+        self.assertTrue("Joe" in conversation.commentators)\n+        self.assertTrue("Jack" in conversation.commentators)\n         self.assertEqual(conversation.total_comments(), 3)\n \n         # remove the second comment from Jack\n         del conversation[new_comment4_id]\n \n         # check if Jack has been removed from the commentators list\n-        self.assertTrue(\'Jim\' in conversation.commentators)\n-        self.assertTrue(\'Joe\' in conversation.commentators)\n-        self.assertFalse(\'Jack\' in conversation.commentators)\n+        self.assertTrue("Jim" in conversation.commentators)\n+        self.assertTrue("Joe" in conversation.commentators)\n+        self.assertFalse("Jack" in conversation.commentators)\n         self.assertEqual(conversation.total_comments(), 2)\n \n     def test_last_comment_date(self):\n@@ -494,29 +486,29 @@ def test_last_comment_date(self):\n         # Note: in real life, we always create\n         # comments via the factory to allow different factories to be\n         # swapped in\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n         comment1.creation_date = datetime.utcnow() - timedelta(4)\n         conversation.addComment(comment1)\n \n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.text = \'Comment text\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.text = "Comment text"\n         comment2.creation_date = datetime.utcnow() - timedelta(2)\n         new_comment2_id = conversation.addComment(comment2)\n \n-        comment3 = createObject(\'plone.Comment\')\n-        comment3.text = \'Comment text\'\n+        comment3 = createObject("plone.Comment")\n+        comment3.text = "Comment text"\n         comment3.creation_date = datetime.utcnow() - timedelta(1)\n         new_comment3_id = conversation.addComment(comment3)\n \n         # check if the latest comment is exactly one day old\n         self.assertTrue(\n-            conversation.last_comment_date < datetime.utcnow() -\n-            timedelta(hours=23, minutes=59, seconds=59),\n+            conversation.last_comment_date\n+            < datetime.utcnow() - timedelta(hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n-            conversation.last_comment_date >\n-            datetime.utcnow() - timedelta(days=1, seconds=1),\n+            conversation.last_comment_date\n+            > datetime.utcnow() - timedelta(days=1, seconds=1),\n         )\n \n         # remove the latest comment\n@@ -525,12 +517,12 @@ def test_last_comment_date(self):\n         # check if the latest comment has been updated\n         # the latest comment should be exactly two days old\n         self.assertTrue(\n-            conversation.last_comment_date < datetime.utcnow() -\n-            timedelta(days=1, hours=23, minutes=59, seconds=59),\n+            conversation.last_comment_date\n+            < datetime.utcnow() - timedelta(days=1, hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n-            conversation.last_comment_date > datetime.utcnow() -\n-            timedelta(days=2, seconds=1),\n+            conversation.last_comment_date\n+            > datetime.utcnow() - timedelta(days=2, seconds=1),\n         )\n \n         # remove the latest comment again\n@@ -539,12 +531,12 @@ def test_last_comment_date(self):\n         # check if the latest comment has been updated\n         # the latest comment should be exactly four days old\n         self.assertTrue(\n-            conversation.last_comment_date < datetime.utcnow() -\n-            timedelta(days=3, hours=23, minutes=59, seconds=59),\n+            conversation.last_comment_date\n+            < datetime.utcnow() - timedelta(days=3, hours=23, minutes=59, seconds=59),\n         )\n         self.assertTrue(\n-            conversation.last_comment_date > datetime.utcnow() -\n-            timedelta(days=4, seconds=2),\n+            conversation.last_comment_date\n+            > datetime.utcnow() - timedelta(days=4, seconds=2),\n         )\n \n     def test_get_comments_full(self):\n@@ -572,23 +564,23 @@ def test_get_threads(self):\n         #    +- Comment 2_1\n \n         # Create all comments\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n \n-        comment1_1 = createObject(\'plone.Comment\')\n-        comment1_1.text = \'Comment text\'\n+        comment1_1 = createObject("plone.Comment")\n+        comment1_1.text = "Comment text"\n \n-        comment1_1_1 = createObject(\'plone.Comment\')\n-        comment1_1_1.text = \'Comment text\'\n+        comment1_1_1 = createObject("plone.Comment")\n+        comment1_1_1.text = "Comment text"\n \n-        comment1_2 = createObject(\'plone.Comment\')\n-        comment1_2.text = \'Comment text\'\n+        comment1_2 = createObject("plone.Comment")\n+        comment1_2.text = "Comment text"\n \n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.text = \'Comment text\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.text = "Comment text"\n \n-        comment2_1 = createObject(\'plone.Comment\')\n-        comment2_1.text = \'Comment text\'\n+        comment2_1 = createObject("plone.Comment")\n+        comment2_1.text = "Comment text"\n \n         # Create the nested comment structure\n         new_id_1 = conversation.addComment(comment1)\n@@ -608,14 +600,17 @@ def test_get_threads(self):\n \n         # Get threads\n \n-        self.assertEqual([\n-            {\'comment\': comment1, \'depth\': 0, \'id\': new_id_1},\n-            {\'comment\': comment1_1, \'depth\': 1, \'id\': new_id_1_1},\n-            {\'comment\': comment1_1_1, \'depth\': 2, \'id\': new_id_1_1_1},\n-            {\'comment\': comment1_2, \'depth\': 1, \'id\': new_id_1_2},\n-            {\'comment\': comment2, \'depth\': 0, \'id\': new_id_2},\n-            {\'comment\': comment2_1, \'depth\': 1, \'id\': new_id_2_1},\n-        ], list(conversation.getThreads()))\n+        self.assertEqual(\n+            [\n+                {"comment": comment1, "depth": 0, "id": new_id_1},\n+                {"comment": comment1_1, "depth": 1, "id": new_id_1_1},\n+                {"comment": comment1_1_1, "depth": 2, "id": new_id_1_1_1},\n+                {"comment": comment1_2, "depth": 1, "id": new_id_1_2},\n+                {"comment": comment2, "depth": 0, "id": new_id_2},\n+                {"comment": comment2_1, "depth": 1, "id": new_id_2_1},\n+            ],\n+            list(conversation.getThreads()),\n+        )\n \n     def test_get_threads_batched(self):\n         # TODO: test start, size, root and depth arguments to getThreads()  # noqa T000\n@@ -626,16 +621,16 @@ def test_traversal(self):\n         # make sure we can traverse to conversations and get a URL and path\n \n         conversation = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default\',\n+            "++conversation++default",\n         )\n         self.assertTrue(IConversation.providedBy(conversation))\n \n         self.assertEqual(\n-            (\'\', \'plone\', \'doc1\', \'++conversation++default\'),\n+            ("", "plone", "doc1", "++conversation++default"),\n             conversation.getPhysicalPath(),\n         )\n         self.assertEqual(\n-            \'http://nohost/plone/doc1/++conversation++default\',\n+            "http://nohost/plone/doc1/++conversation++default",\n             conversation.absolute_url(),\n         )\n \n@@ -644,7 +639,7 @@ def test_unconvertible_id(self):\n         # can\'t be converted to int\n \n         conversation = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/ThisCantBeRight\',\n+            "++conversation++default/ThisCantBeRight",\n         )\n         self.assertEqual(conversation, None)\n \n@@ -658,17 +653,16 @@ def test_parent(self):\n         self.assertTrue(conversation.__parent__)\n         self.assertTrue(aq_parent(conversation))\n \n-        self.assertEqual(conversation.__parent__.getId(), \'doc1\')\n+        self.assertEqual(conversation.__parent__.getId(), "doc1")\n \n     def test_discussion_item_not_in_bad_types(self):\n-        self.assertFalse(\'Discussion Item\' in BAD_TYPES)\n+        self.assertFalse("Discussion Item" in BAD_TYPES)\n \n     def test_no_comment(self):\n         IConversation(self.portal.doc1)\n         # Make sure no conversation has been created\n         self.assertTrue(\n-            \'plone.app.discussion:conversation\' not in\n-            IAnnotations(self.portal.doc1),\n+            "plone.app.discussion:conversation" not in IAnnotations(self.portal.doc1),\n         )\n \n \n@@ -677,21 +671,20 @@ class ConversationEnabledForDexterityTypesTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         interface.alsoProvides(\n             self.portal.REQUEST,\n-            interfaces.IDiscussionLayer,\n+            IDiscussionLayer,\n         )\n \n-        if DEXTERITY:\n-            interface.alsoProvides(\n-                self.portal.doc1,\n-                IDexterityContent,\n-            )\n+        interface.alsoProvides(\n+            self.portal.doc1,\n+            IDexterityContent,\n+        )\n \n     def _makeOne(self, *args, **kw):\n-        return self.portal.doc1.restrictedTraverse(\'@@conversation_view\')\n+        return self.portal.doc1.restrictedTraverse("@@conversation_view")\n \n     def _globally_enable_discussion(self, value):\n         registry = queryUtility(IRegistry)\n@@ -699,43 +692,38 @@ def _globally_enable_discussion(self, value):\n         settings.globally_enabled = value\n \n     def _enable_discussion_on_portal_type(self, portal_type, allow_discussion):\n-        portal_types = getToolByName(self.portal, \'portal_types\')\n+        portal_types = getToolByName(self.portal, "portal_types")\n         document_fti = getattr(portal_types, portal_type)\n         document_fti.manage_changeProperties(allow_discussion=allow_discussion)\n \n     def test_conversation_is_not_enabled_by_default(self):\n-        if DEXTERITY:\n-            conversation = self._makeOne(self.portal.doc1)\n-            self.assertFalse(conversation.enabled())\n+        conversation = self._makeOne(self.portal.doc1)\n+        self.assertFalse(conversation.enabled())\n \n     def test_conversation_is_not_enabled_by_default_on_portal_type(self):\n-        if DEXTERITY:\n-            self._globally_enable_discussion(True)\n-            conversation = self._makeOne(self.portal.doc1)\n-            self.assertFalse(conversation.enabled())\n+        self._globally_enable_discussion(True)\n+        conversation = self._makeOne(self.portal.doc1)\n+        self.assertFalse(conversation.enabled())\n \n     def test_conversation_needs_to_be_enabled_globally_and_for_type(self):\n-        if DEXTERITY:\n-            self._globally_enable_discussion(True)\n-            self._enable_discussion_on_portal_type(\'Document\', True)\n-            conversation = self._makeOne(self.portal.doc1)\n-            self.assertTrue(conversation.enabled())\n+        self._globally_enable_discussion(True)\n+        self._enable_discussion_on_portal_type("Document", True)\n+        conversation = self._makeOne(self.portal.doc1)\n+        self.assertTrue(conversation.enabled())\n \n     def test_disable_discussion(self):\n-        if DEXTERITY:\n-            self._globally_enable_discussion(True)\n-            self._enable_discussion_on_portal_type(\'Document\', True)\n-            self.portal.doc1.allow_discussion = False\n-            conversation = self._makeOne(self.portal.doc1)\n-            self.assertFalse(conversation.enabled())\n+        self._globally_enable_discussion(True)\n+        self._enable_discussion_on_portal_type("Document", True)\n+        self.portal.doc1.allow_discussion = False\n+        conversation = self._makeOne(self.portal.doc1)\n+        self.assertFalse(conversation.enabled())\n \n     def test_enable_discussion(self):\n-        if DEXTERITY:\n-            self._globally_enable_discussion(True)\n-            self._enable_discussion_on_portal_type(\'Document\', True)\n-            self.portal.doc1.allow_discussion = True\n-            conversation = self._makeOne(self.portal.doc1)\n-            self.assertTrue(conversation.enabled())\n+        self._globally_enable_discussion(True)\n+        self._enable_discussion_on_portal_type("Document", True)\n+        self.portal.doc1.allow_discussion = True\n+        conversation = self._makeOne(self.portal.doc1)\n+        self.assertTrue(conversation.enabled())\n \n \n class RepliesTest(unittest.TestCase):\n@@ -745,11 +733,11 @@ class RepliesTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         workflow = self.portal.portal_workflow\n-        workflow.doActionFor(self.portal.doc1, \'publish\')\n+        workflow.doActionFor(self.portal.doc1, "publish")\n \n     def test_add_comment(self):\n         # Add comments to a ConversationReplies adapter\n@@ -760,8 +748,8 @@ def test_add_comment(self):\n \n         replies = IReplies(conversation)\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         new_id = replies.addComment(comment)\n \n@@ -787,8 +775,8 @@ def test_delete_comment(self):\n         replies = IReplies(conversation)\n \n         # Add a comment.\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         new_id = replies.addComment(comment)\n \n@@ -826,39 +814,39 @@ def test_dict_api(self):\n         #    +- Comment 2_1\n \n         # Create all comments\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment text\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment text"\n \n-        comment1_1 = createObject(\'plone.Comment\')\n-        comment1_1.text = \'Comment text\'\n+        comment1_1 = createObject("plone.Comment")\n+        comment1_1.text = "Comment text"\n \n-        comment1_1_1 = createObject(\'plone.Comment\')\n-        comment1_1_1.text = \'Comment text\'\n+        comment1_1_1 = createObject("plone.Comment")\n+        comment1_1_1.text = "Comment text"\n \n-        comment1_2 = createObject(\'plone.Comment\')\n-        comment1_2.text = \'Comment text\'\n+        comment1_2 = createObject("plone.Comment")\n+        comment1_2.text = "Comment text"\n \n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.text = \'Comment text\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.text = "Comment text"\n \n-        comment2_1 = createObject(\'plone.Comment\')\n-        comment2_1.text = \'Comment text\'\n+        comment2_1 = createObject("plone.Comment")\n+        comment2_1.text = "Comment text"\n \n         # Create the nested comment structure\n         new_id_1 = replies.addComment(comment1)\n         comment1 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_1),\n+            f"++conversation++default/{new_id_1}",\n         )\n         replies_to_comment1 = IReplies(comment1)\n         new_id_2 = replies.addComment(comment2)\n         comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_2),\n+            f"++conversation++default/{new_id_2}",\n         )\n         replies_to_comment2 = IReplies(comment2)\n \n         new_id_1_1 = replies_to_comment1.addComment(comment1_1)\n         comment1_1 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_1_1),\n+            f"++conversation++default/{new_id_1_1}",\n         )\n         replies_to_comment1_1 = IReplies(comment1_1)\n         replies_to_comment1_1.addComment(comment1_1_1)\ndiff --git a/plone/app/discussion/tests/test_events.py b/plone/app/discussion/tests/test_events.py\nindex 3742c768..a6cc1cdb 100644\n--- a/plone/app/discussion/tests/test_events.py\n+++ b/plone/app/discussion/tests/test_events.py\n@@ -1,7 +1,6 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.interfaces import IReplies\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from ..interfaces import IConversation\n+from ..interfaces import IReplies\n+from ..testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from Zope2.App import zcml\n@@ -18,9 +17,9 @@\n #\n \n \n-class EventsRegistry(object):\n-    """ Fake registry to be used while testing discussion events\n-    """\n+class EventsRegistry:\n+    """Fake registry to be used while testing discussion events"""\n+\n     commentAdded = False\n     commentModified = False\n     commentRemoved = False\n@@ -28,6 +27,7 @@ class EventsRegistry(object):\n     replyModified = False\n     replyRemoved = False\n \n+\n #\n # Fake event handlers\n #\n@@ -63,19 +63,19 @@ def reply_removed(doc, evt):\n \n \n class CommentEventsTest(unittest.TestCase):\n-    """ Test custom comments events\n-    """\n+    """Test custom comments events"""\n+\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n \n         # Setup sandbox\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.registry = EventsRegistry\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.document = self.portal[\'doc1\']\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.document = self.portal["doc1"]\n \n         #\n         # Subscribers\n@@ -104,23 +104,23 @@ def setUp(self):\n \n          </configure>\n         """\n-        zcml.load_config(\'configure.zcml\', Products.Five)\n+        zcml.load_config("configure.zcml", Products.Five)\n         zcml.load_string(configure)\n \n     def test_addEvent(self):\n         self.assertFalse(self.registry.commentAdded)\n-        comment = createObject(\'plone.Comment\')\n+        comment = createObject("plone.Comment")\n         conversation = IConversation(self.document)\n         conversation.addComment(comment)\n         self.assertTrue(self.registry.commentAdded)\n \n     def test_modifyEvent(self):\n         self.assertFalse(self.registry.commentModified)\n-        comment = createObject(\'plone.Comment\')\n+        comment = createObject("plone.Comment")\n         conversation = IConversation(self.document)\n         new_id = conversation.addComment(comment)\n         comment = self.document.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id),\n+            f"++conversation++default/{new_id}",\n         )\n         comment.text = "foo"\n         notify(ObjectModifiedEvent(comment))\n@@ -128,7 +128,7 @@ def test_modifyEvent(self):\n \n     def test_removedEvent(self):\n         self.assertFalse(self.registry.commentRemoved)\n-        comment = createObject(\'plone.Comment\')\n+        comment = createObject("plone.Comment")\n         conversation = IConversation(self.document)\n         cid = conversation.addComment(comment)\n         del conversation[cid]\n@@ -136,17 +136,17 @@ def test_removedEvent(self):\n \n \n class RepliesEventsTest(unittest.TestCase):\n-    """ Test custom replies events\n-    """\n+    """Test custom replies events"""\n+\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n         self.registry = EventsRegistry\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.document = self.portal[\'doc1\']\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.document = self.portal["doc1"]\n \n         #\n         # Subscribers\n@@ -175,7 +175,7 @@ def setUp(self):\n \n          </configure>\n         """\n-        zcml.load_config(\'configure.zcml\', Products.Five)\n+        zcml.load_config("configure.zcml", Products.Five)\n         zcml.load_string(configure)\n \n     def test_addEvent(self):\n@@ -184,15 +184,15 @@ def test_addEvent(self):\n         conversation = IConversation(self.document)\n         replies = IReplies(conversation)\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         new_id = replies.addComment(comment)\n         comment = self.document.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id),\n+            f"++conversation++default/{new_id}",\n         )\n \n-        re_comment = createObject(\'plone.Comment\')\n-        re_comment.text = \'Comment text\'\n+        re_comment = createObject("plone.Comment")\n+        re_comment.text = "Comment text"\n \n         replies = IReplies(comment)\n         replies.addComment(re_comment)\n@@ -204,14 +204,14 @@ def test_modifyEvent(self):\n \n         conversation = IConversation(self.document)\n         replies = IReplies(conversation)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         comment_id = replies.addComment(comment)\n         comment = self.document.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(comment_id),\n+            f"++conversation++default/{comment_id}",\n         )\n-        re_comment = createObject(\'plone.Comment\')\n-        re_comment.text = \'Comment text\'\n+        re_comment = createObject("plone.Comment")\n+        re_comment.text = "Comment text"\n         replies = IReplies(comment)\n         new_id = replies.addComment(re_comment)\n         reply = replies[new_id]\n@@ -225,15 +225,15 @@ def test_removedEvent(self):\n         conversation = IConversation(self.portal.doc1)\n         replies = IReplies(conversation)\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         new_id = replies.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id),\n+            f"++conversation++default/{new_id}",\n         )\n \n-        re_comment = createObject(\'plone.Comment\')\n-        re_comment.text = \'Comment text\'\n+        re_comment = createObject("plone.Comment")\n+        re_comment.text = "Comment text"\n         replies = IReplies(comment)\n         new_re_id = replies.addComment(re_comment)\n \ndiff --git a/plone/app/discussion/tests/test_functional.py b/plone/app/discussion/tests/test_functional.py\nindex 14db437a..995016ed 100644\n--- a/plone/app/discussion/tests/test_functional.py\n+++ b/plone/app/discussion/tests/test_functional.py\n@@ -1,9 +1,8 @@\n-# -*- coding: utf-8 -*-\n """Functional Doctests for plone.app.discussion.\n \n    These test are only triggered when Plone 4 (and plone.testing) is installed.\n """\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_FUNCTIONAL_TESTING  # noqa\n+from ..testing import PLONE_APP_DISCUSSION_FUNCTIONAL_TESTING  # noqa\n from plone.testing import layered\n \n import doctest\n@@ -12,29 +11,29 @@\n \n \n optionflags = (\n-    doctest.ELLIPSIS |\n-    doctest.NORMALIZE_WHITESPACE |\n-    doctest.REPORT_ONLY_FIRST_FAILURE\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n )\n normal_testfiles = [\n-    \'functional_test_comments.txt\',\n-    \'functional_test_comment_review_workflow.txt\',\n+    "functional_test_comments.txt",\n+    "functional_test_comment_review_workflow.txt",\n ]\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(\n-            doctest.DocFileSuite(\n-                test,\n-                optionflags=optionflags,\n-                globs={\n-                    \'pprint\': pprint.pprint,\n-                }\n-            ),\n-            layer=PLONE_APP_DISCUSSION_FUNCTIONAL_TESTING,\n-        )\n-        for test in normal_testfiles\n-    ])\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite(\n+                    test,\n+                    optionflags=optionflags,\n+                    globs={\n+                        "pprint": pprint.pprint,\n+                    },\n+                ),\n+                layer=PLONE_APP_DISCUSSION_FUNCTIONAL_TESTING,\n+            )\n+            for test in normal_testfiles\n+        ]\n+    )\n     return suite\ndiff --git a/plone/app/discussion/tests/test_indexers.py b/plone/app/discussion/tests/test_indexers.py\nindex 56efebca..b1b30f1e 100644\n--- a/plone/app/discussion/tests/test_indexers.py\n+++ b/plone/app/discussion/tests/test_indexers.py\n@@ -1,11 +1,10 @@\n-# -*- coding: utf-8 -*-\n """Test for the plone.app.discussion indexers\n """\n-from DateTime import DateTime\n+from .. import catalog\n+from ..interfaces import IConversation\n+from ..testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n from datetime import datetime\n-from plone.app.discussion import catalog\n-from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from DateTime import DateTime\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.indexer.delegate import DelegatingIndexerFactory\n@@ -26,41 +25,40 @@\n \n \n class ConversationIndexersTest(unittest.TestCase):\n-    """Conversation Indexer Tests\n-    """\n+    """Conversation Indexer Tests"""\n \n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         workflow = self.portal.portal_workflow\n-        workflow.doActionFor(self.portal.doc1, \'publish\')\n+        workflow.doActionFor(self.portal.doc1, "publish")\n \n         # Create a conversation.\n         conversation = IConversation(self.portal.doc1)\n \n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.text = \'Comment Text\'\n-        comment1.creator = \'jim\'\n-        comment1.author_username = \'Jim\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.text = "Comment Text"\n+        comment1.creator = "jim"\n+        comment1.author_username = "Jim"\n         comment1.creation_date = datetime(2006, 9, 17, 14, 18, 12)\n         comment1.modification_date = datetime(2006, 9, 17, 14, 18, 12)\n         self.new_id1 = conversation.addComment(comment1)\n \n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.text = \'Comment Text\'\n-        comment2.creator = \'emma\'\n-        comment2.author_username = \'Emma\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.text = "Comment Text"\n+        comment2.creator = "emma"\n+        comment2.author_username = "Emma"\n         comment2.creation_date = datetime(2007, 12, 13, 4, 18, 12)\n         comment2.modification_date = datetime(2007, 12, 13, 4, 18, 12)\n         self.new_id2 = conversation.addComment(comment2)\n \n-        comment3 = createObject(\'plone.Comment\')\n-        comment3.text = \'Comment Text\'\n-        comment3.creator = \'lukas\'\n-        comment3.author_username = \'Lukas\'\n+        comment3 = createObject("plone.Comment")\n+        comment3.text = "Comment Text"\n+        comment3.creator = "lukas"\n+        comment3.author_username = "Lukas"\n         comment3.creation_date = datetime(2009, 4, 12, 11, 12, 12)\n         comment3.modification_date = datetime(2009, 4, 12, 11, 12, 12)\n         self.new_id3 = conversation.addComment(comment3)\n@@ -68,10 +66,12 @@ def setUp(self):\n         self.conversation = conversation\n \n     def test_conversation_total_comments(self):\n-        self.assertTrue(isinstance(\n-            catalog.total_comments,\n-            DelegatingIndexerFactory,\n-        ))\n+        self.assertTrue(\n+            isinstance(\n+                catalog.total_comments,\n+                DelegatingIndexerFactory,\n+            )\n+        )\n         self.assertEqual(catalog.total_comments(self.portal.doc1)(), 3)\n         del self.conversation[self.new_id1]\n         self.assertEqual(catalog.total_comments(self.portal.doc1)(), 2)\n@@ -80,10 +80,12 @@ def test_conversation_total_comments(self):\n         self.assertEqual(catalog.total_comments(self.portal.doc1)(), 0)\n \n     def test_conversation_last_comment_date(self):\n-        self.assertTrue(isinstance(\n-            catalog.last_comment_date,\n-            DelegatingIndexerFactory,\n-        ))\n+        self.assertTrue(\n+            isinstance(\n+                catalog.last_comment_date,\n+                DelegatingIndexerFactory,\n+            )\n+        )\n         self.assertEqual(\n             catalog.last_comment_date(self.portal.doc1)(),\n             datetime(2009, 4, 12, 11, 12, 12),\n@@ -110,8 +112,8 @@ class CommentIndexersTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n         # Create a conversation. In this case we doesn\'t assign it to an\n         # object, as we just want to check the Conversation object API.\n@@ -120,10 +122,10 @@ def setUp(self):\n         # Add a comment. Note: in real life, we always create comments via the\n         # factory to allow different factories to be swapped in\n \n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Lorem ipsum dolor sit amet.\'\n-        comment.creator = \'jim\'\n-        comment.author_name = \'Jim\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Lorem ipsum dolor sit amet."\n+        comment.creator = "jim"\n+        comment.author_name = "Jim"\n         comment.creation_date = datetime(2006, 9, 17, 14, 18, 12)\n         comment.modification_date = datetime(2008, 3, 12, 7, 32, 52)\n \n@@ -132,60 +134,61 @@ def setUp(self):\n         self.conversation = conversation\n \n     def test_title(self):\n-        self.assertEqual(catalog.title(self.comment)(), \'Jim on Document 1\')\n+        self.assertEqual(catalog.title(self.comment)(), "Jim on Document 1")\n         self.assertTrue(isinstance(catalog.title, DelegatingIndexerFactory))\n \n     def test_description(self):\n         self.assertEqual(\n             catalog.description(self.comment)(),\n-            \'Lorem ipsum dolor sit amet.\',\n+            "Lorem ipsum dolor sit amet.",\n         )\n-        self.assertTrue(\n-            isinstance(catalog.description, DelegatingIndexerFactory))\n+        self.assertTrue(isinstance(catalog.description, DelegatingIndexerFactory))\n \n     def test_description_long(self):\n         # Create a 50 word comment and make sure the description returns\n         # only the first 25 words\n-        comment_long = createObject(\'plone.Comment\')\n-        comment_long.title = \'Long Comment\'\n+        comment_long = createObject("plone.Comment")\n+        comment_long.title = "Long Comment"\n         comment_long.text = LONG_TEXT\n \n         self.conversation.addComment(comment_long)\n         self.assertEqual(\n             catalog.description(comment_long)(),\n-            LONG_TEXT_CUT.replace(\'\\n\', \' \'),\n+            LONG_TEXT_CUT.replace("\\n", " "),\n         )\n \n     def test_dates(self):\n         # Test if created, modified, effective etc. are set correctly\n         self.assertEqual(\n             catalog.created(self.comment)(),\n-            DateTime(2006, 9, 17, 14, 18, 12, \'GMT\'),\n+            DateTime(2006, 9, 17, 14, 18, 12, "GMT"),\n         )\n         self.assertEqual(\n             catalog.effective(self.comment)(),\n-            DateTime(2006, 9, 17, 14, 18, 12, \'GMT\'),\n+            DateTime(2006, 9, 17, 14, 18, 12, "GMT"),\n         )\n         self.assertEqual(\n             catalog.modified(self.comment)(),\n-            DateTime(2008, 3, 12, 7, 32, 52, \'GMT\'),\n+            DateTime(2008, 3, 12, 7, 32, 52, "GMT"),\n         )\n \n     def test_searchable_text(self):\n         # Test if searchable text is a concatenation of title and comment text\n         self.assertEqual(\n             catalog.searchable_text(self.comment)(),\n-            (\'Lorem ipsum dolor sit amet.\'),\n+            ("Lorem ipsum dolor sit amet."),\n+        )\n+        self.assertTrue(\n+            isinstance(\n+                catalog.searchable_text,\n+                DelegatingIndexerFactory,\n+            )\n         )\n-        self.assertTrue(isinstance(\n-            catalog.searchable_text,\n-            DelegatingIndexerFactory,\n-        ))\n \n     def test_creator(self):\n-        self.assertEqual(catalog.creator(self.comment)(), (\'jim\'))\n+        self.assertEqual(catalog.creator(self.comment)(), ("jim"))\n \n     def test_in_response_to(self):\n         # make sure in_response_to returns the title or id of the content\n         # object the comment was added to\n-        self.assertEqual(catalog.in_response_to(self.comment)(), \'Document 1\')\n+        self.assertEqual(catalog.in_response_to(self.comment)(), "Document 1")\ndiff --git a/plone/app/discussion/tests/test_moderation_multiple_state_view.py b/plone/app/discussion/tests/test_moderation_multiple_state_view.py\nindex 72b1db02..6a12a721 100644\n--- a/plone/app/discussion/tests/test_moderation_multiple_state_view.py\n+++ b/plone/app/discussion/tests/test_moderation_multiple_state_view.py\n@@ -1,11 +1,10 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.discussion.browser.moderation import BulkActionsView\n-from plone.app.discussion.browser.moderation import DeleteComment\n-from plone.app.discussion.browser.moderation import CommentTransition\n-from plone.app.discussion.browser.moderation import View\n-from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.interfaces import IDiscussionSettings\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from ..browser.moderation import BulkActionsView\n+from ..browser.moderation import CommentTransition\n+from ..browser.moderation import DeleteComment\n+from ..browser.moderation import View\n+from ..interfaces import IConversation\n+from ..interfaces import IDiscussionSettings\n+from ..testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.registry.interfaces import IRegistry\n@@ -21,59 +20,57 @@ class ModerationBulkActionsViewTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.wf = getToolByName(self.portal,\n-                                \'portal_workflow\',\n-                                None)\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.wf = getToolByName(self.portal, "portal_workflow", None)\n         self.context = self.portal\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            \'comment_review_workflow\',\n+            ("Discussion Item",),\n+            "comment_review_workflow",\n         )\n         self.wf_tool = self.portal.portal_workflow\n         # Add a conversation with three comments\n         conversation = IConversation(self.portal.doc1)\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.title = \'Comment 1\'\n-        comment1.text = \'Comment text\'\n-        comment1.Creator = \'Jim\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.title = "Comment 1"\n+        comment1.text = "Comment text"\n+        comment1.Creator = "Jim"\n         new_id_1 = conversation.addComment(comment1)\n         self.comment1 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_1),\n+            f"++conversation++default/{new_id_1}",\n         )\n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.title = \'Comment 2\'\n-        comment2.text = \'Comment text\'\n-        comment2.Creator = \'Joe\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.title = "Comment 2"\n+        comment2.text = "Comment text"\n+        comment2.Creator = "Joe"\n         new_id_2 = conversation.addComment(comment2)\n         self.comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_2),\n+            f"++conversation++default/{new_id_2}",\n         )\n-        comment3 = createObject(\'plone.Comment\')\n-        comment3.title = \'Comment 3\'\n-        comment3.text = \'Comment text\'\n-        comment3.Creator = \'Emma\'\n+        comment3 = createObject("plone.Comment")\n+        comment3.title = "Comment 3"\n+        comment3.text = "Comment text"\n+        comment3.Creator = "Emma"\n         new_id_3 = conversation.addComment(comment3)\n         self.comment3 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_3),\n+            f"++conversation++default/{new_id_3}",\n         )\n         self.conversation = conversation\n \n     def test_default_bulkaction(self):\n         # Make sure no error is raised when no bulk actions has been supplied\n-        self.request.set(\'form.select.BulkAction\', \'-1\')\n-        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n+        self.request.set("form.select.BulkAction", "-1")\n+        self.request.set("paths", ["/".join(self.comment1.getPhysicalPath())])\n \n         view = BulkActionsView(self.portal, self.request)\n \n         self.assertFalse(view())\n \n     def test_publish(self):\n-        self.request.set(\'form.select.BulkAction\', \'publish\')\n-        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n+        self.request.set("form.select.BulkAction", "publish")\n+        self.request.set("paths", ["/".join(self.comment1.getPhysicalPath())])\n         view = BulkActionsView(self.portal, self.request)\n \n         view()\n@@ -81,16 +78,16 @@ def test_publish(self):\n         # Count published comments\n         published_comments = 0\n         for r in self.conversation.getThreads():\n-            comment_obj = r[\'comment\']\n-            workflow_status = self.wf.getInfoFor(comment_obj, \'review_state\')\n-            if workflow_status == \'published\':\n+            comment_obj = r["comment"]\n+            workflow_status = self.wf.getInfoFor(comment_obj, "review_state")\n+            if workflow_status == "published":\n                 published_comments += 1\n         # Make sure the comment has been published\n         self.assertEqual(published_comments, 1)\n \n     def test_mark_as_spam(self):\n-        self.request.set(\'form.select.BulkAction\', \'mark_as_spam\')\n-        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n+        self.request.set("form.select.BulkAction", "mark_as_spam")\n+        self.request.set("paths", ["/".join(self.comment1.getPhysicalPath())])\n \n         view = BulkActionsView(self.portal, self.request)\n \n@@ -99,9 +96,9 @@ def test_mark_as_spam(self):\n         # Count spam comments\n         spam_comments = 0\n         for r in self.conversation.getThreads():\n-            comment_obj = r[\'comment\']\n-            workflow_status = self.wf.getInfoFor(comment_obj, \'review_state\')\n-            if workflow_status == \'spam\':\n+            comment_obj = r["comment"]\n+            workflow_status = self.wf.getInfoFor(comment_obj, "review_state")\n+            if workflow_status == "spam":\n                 spam_comments += 1\n         # Make sure the comment has been marked as spam\n         self.assertEqual(spam_comments, 1)\n@@ -110,9 +107,14 @@ def test_delete(self):\n         # Initially we have three comments\n         self.assertEqual(len(self.conversation.objectIds()), 3)\n         # Delete two comments with bulk actions\n-        self.request.set(\'form.select.BulkAction\', \'delete\')\n-        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath()),\n-                                   \'/\'.join(self.comment3.getPhysicalPath())])\n+        self.request.set("form.select.BulkAction", "delete")\n+        self.request.set(\n+            "paths",\n+            [\n+                "/".join(self.comment1.getPhysicalPath()),\n+                "/".join(self.comment3.getPhysicalPath()),\n+            ],\n+        )\n         view = BulkActionsView(self.app, self.request)\n \n         view()\ndiff --git a/plone/app/discussion/tests/test_moderation_view.py b/plone/app/discussion/tests/test_moderation_view.py\nindex 76eddb31..639eaa35 100644\n--- a/plone/app/discussion/tests/test_moderation_view.py\n+++ b/plone/app/discussion/tests/test_moderation_view.py\n@@ -1,11 +1,10 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.discussion.browser.moderation import BulkActionsView\n-from plone.app.discussion.browser.moderation import DeleteComment\n-from plone.app.discussion.browser.moderation import CommentTransition\n-from plone.app.discussion.browser.moderation import View\n-from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.interfaces import IDiscussionSettings\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from ..browser.moderation import BulkActionsView\n+from ..browser.moderation import CommentTransition\n+from ..browser.moderation import DeleteComment\n+from ..browser.moderation import View\n+from ..interfaces import IConversation\n+from ..interfaces import IDiscussionSettings\n+from ..testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.registry.interfaces import IRegistry\n@@ -21,37 +20,37 @@ class ModerationViewTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal_discussion = getToolByName(self.portal,\n-                                               \'portal_discussion\',\n-                                               None)\n-        self.membership_tool = getToolByName(self.portal,\n-                                             \'portal_membership\')\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal_discussion = getToolByName(self.portal, "portal_discussion", None)\n+        self.membership_tool = getToolByName(self.portal, "portal_membership")\n         self.memberdata = self.portal.portal_memberdata\n         request = self.app.REQUEST\n-        context = getattr(self.portal, \'doc1\')\n+        context = getattr(self.portal, "doc1")\n         self.view = View(context, request)\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',), \'comment_review_workflow\')\n+            ("Discussion Item",), "comment_review_workflow"\n+        )\n         self.wf_tool = self.portal.portal_workflow\n \n     def test_moderation_enabled(self):\n         """Make sure that moderation_enabled returns true if the comment\n-           workflow implements a \'pending\' state.\n+        workflow implements a \'pending\' state.\n         """\n         # If workflow is not set, enabled must return False\n-        self.wf_tool.setChainForPortalTypes((\'Discussion Item\',), ())\n+        self.wf_tool.setChainForPortalTypes(("Discussion Item",), ())\n         self.assertEqual(self.view.moderation_enabled(), False)\n         # The comment_one_state_workflow does not have a \'pending\' state\n-        self.wf_tool.setChainForPortalTypes((\'Discussion Item\',),\n-                                            (\'comment_one_state_workflow,\'))\n+        self.wf_tool.setChainForPortalTypes(\n+            ("Discussion Item",), ("comment_one_state_workflow,")\n+        )\n         self.assertEqual(self.view.moderation_enabled(), False)\n         # The comment_review_workflow does have a \'pending\' state\n-        self.wf_tool.setChainForPortalTypes((\'Discussion Item\',),\n-                                            (\'comment_review_workflow,\'))\n+        self.wf_tool.setChainForPortalTypes(\n+            ("Discussion Item",), ("comment_review_workflow,")\n+        )\n         self.assertEqual(self.view.moderation_enabled(), True)\n \n \n@@ -60,59 +59,57 @@ class ModerationBulkActionsViewTest(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.wf = getToolByName(self.portal,\n-                                \'portal_workflow\',\n-                                None)\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.wf = getToolByName(self.portal, "portal_workflow", None)\n         self.context = self.portal\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            \'comment_review_workflow\',\n+            ("Discussion Item",),\n+            "comment_review_workflow",\n         )\n         self.wf_tool = self.portal.portal_workflow\n         # Add a conversation with three comments\n         conversation = IConversation(self.portal.doc1)\n-        comment1 = createObject(\'plone.Comment\')\n-        comment1.title = \'Comment 1\'\n-        comment1.text = \'Comment text\'\n-        comment1.Creator = \'Jim\'\n+        comment1 = createObject("plone.Comment")\n+        comment1.title = "Comment 1"\n+        comment1.text = "Comment text"\n+        comment1.Creator = "Jim"\n         new_id_1 = conversation.addComment(comment1)\n         self.comment1 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_1),\n+            f"++conversation++default/{new_id_1}",\n         )\n-        comment2 = createObject(\'plone.Comment\')\n-        comment2.title = \'Comment 2\'\n-        comment2.text = \'Comment text\'\n-        comment2.Creator = \'Joe\'\n+        comment2 = createObject("plone.Comment")\n+        comment2.title = "Comment 2"\n+        comment2.text = "Comment text"\n+        comment2.Creator = "Joe"\n         new_id_2 = conversation.addComment(comment2)\n         self.comment2 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_2),\n+            f"++conversation++default/{new_id_2}",\n         )\n-        comment3 = createObject(\'plone.Comment\')\n-        comment3.title = \'Comment 3\'\n-        comment3.text = \'Comment text\'\n-        comment3.Creator = \'Emma\'\n+        comment3 = createObject("plone.Comment")\n+        comment3.title = "Comment 3"\n+        comment3.text = "Comment text"\n+        comment3.Creator = "Emma"\n         new_id_3 = conversation.addComment(comment3)\n         self.comment3 = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(new_id_3),\n+            f"++conversation++default/{new_id_3}",\n         )\n         self.conversation = conversation\n \n     def test_default_bulkaction(self):\n         # Make sure no error is raised when no bulk actions has been supplied\n-        self.request.set(\'form.select.BulkAction\', \'-1\')\n-        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n+        self.request.set("form.select.BulkAction", "-1")\n+        self.request.set("paths", ["/".join(self.comment1.getPhysicalPath())])\n \n         view = BulkActionsView(self.portal, self.request)\n \n         self.assertFalse(view())\n \n     def test_publish(self):\n-        self.request.set(\'form.select.BulkAction\', \'publish\')\n-        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n+        self.request.set("form.select.BulkAction", "publish")\n+        self.request.set("paths", ["/".join(self.comment1.getPhysicalPath())])\n         view = BulkActionsView(self.portal, self.request)\n \n         view()\n@@ -120,9 +117,9 @@ def test_publish(self):\n         # Count published comments\n         published_comments = 0\n         for r in self.conversation.getThreads():\n-            comment_obj = r[\'comment\']\n-            workflow_status = self.wf.getInfoFor(comment_obj, \'review_state\')\n-            if workflow_status == \'published\':\n+            comment_obj = r["comment"]\n+            workflow_status = self.wf.getInfoFor(comment_obj, "review_state")\n+            if workflow_status == "published":\n                 published_comments += 1\n         # Make sure the comment has been published\n         self.assertEqual(published_comments, 1)\n@@ -131,9 +128,14 @@ def test_delete(self):\n         # Initially we have three comments\n         self.assertEqual(len(self.conversation.objectIds()), 3)\n         # Delete two comments with bulk actions\n-        self.request.set(\'form.select.BulkAction\', \'delete\')\n-        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath()),\n-                                   \'/\'.join(self.comment3.getPhysicalPath())])\n+        self.request.set("form.select.BulkAction", "delete")\n+        self.request.set(\n+            "paths",\n+            [\n+                "/".join(self.comment1.getPhysicalPath()),\n+                "/".join(self.comment3.getPhysicalPath()),\n+            ],\n+        )\n         view = BulkActionsView(self.app, self.request)\n \n         view()\n@@ -151,41 +153,41 @@ class RedirectionTest(unittest.TestCase):\n \n     def setUp(self):\n         # Update settings.\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         # applyProfile(self.portal, \'plone.app.discussion:default\')\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings)\n         settings.globally_enabled = True\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            (\'comment_review_workflow\',),\n+            ("Discussion Item",),\n+            ("comment_review_workflow",),\n         )\n         # Create page plus comment.\n         self.portal.invokeFactory(\n-            id=\'page\',\n-            title=\'Page 1\',\n-            type_name=\'Document\',\n+            id="page",\n+            title="Page 1",\n+            type_name="Document",\n         )\n         self.page = self.portal.page\n         self.conversation = IConversation(self.page)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         self.comment_id = self.conversation.addComment(comment)\n         self.comment = list(self.conversation.getComments())[0]\n \n     def test_regression(self):\n         page_url = self.page.absolute_url()\n-        self.request[\'HTTP_REFERER\'] = page_url\n+        self.request["HTTP_REFERER"] = page_url\n         for Klass in (DeleteComment, CommentTransition):\n             view = Klass(self.comment, self.request)\n             view.__parent__ = self.comment\n             self.assertEqual(page_url, view())\n \n     def test_valid_next_url(self):\n-        self.request[\'HTTP_REFERER\'] = \'http://attacker.com\'\n+        self.request["HTTP_REFERER"] = "http://attacker.com"\n         for Klass in (DeleteComment, CommentTransition):\n             view = Klass(self.comment, self.request)\n             view.__parent__ = self.comment\n-            self.assertNotEqual(\'http://attacker.com\', view())\n+            self.assertNotEqual("http://attacker.com", view())\ndiff --git a/plone/app/discussion/tests/test_notifications.py b/plone/app/discussion/tests/test_notifications.py\nindex 13f9f6d8..305c90ed 100644\n--- a/plone/app/discussion/tests/test_notifications.py\n+++ b/plone/app/discussion/tests/test_notifications.py\n@@ -1,13 +1,14 @@\n-# -*- coding: utf-8 -*-\n+from ..interfaces import IConversation\n+from ..testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n from Acquisition import aq_base\n-from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from persistent.list import PersistentList\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from plone.base.interfaces import IMailSchema\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import IMailSchema\n-from Products.CMFPlone.tests.utils import MockMailHost\n from Products.MailHost.interfaces import IMailHost\n+from Products.MailHost.MailHost import _mungeHeaders\n+from Products.MailHost.MailHost import MailBase\n from zope.component import createObject\n from zope.component import getSiteManager\n from zope.component import getUtility\n@@ -16,50 +17,85 @@\n import unittest\n \n \n+class MockMailHost(MailBase):\n+    """A MailHost that collects messages instead of sending them."""\n+\n+    def __init__(self, id):\n+        self.reset()\n+\n+    def reset(self):\n+        self.messages = PersistentList()\n+\n+    def _send(self, mfrom, mto, messageText, immediate=False):\n+        """Send the message"""\n+        self.messages.append(messageText)\n+\n+    def send(\n+        self,\n+        messageText,\n+        mto=None,\n+        mfrom=None,\n+        subject=None,\n+        encode=None,\n+        immediate=False,\n+        charset=None,\n+        msg_type=None,\n+    ):\n+        """send *messageText* modified by the other parameters.\n+\n+        *messageText* can either be an ``email.message.Message``\n+        or a string.\n+        Note that Products.MailHost 4.10 had changes here.\n+        """\n+        msg, mto, mfrom = _mungeHeaders(\n+            messageText, mto, mfrom, subject, charset, msg_type, encode\n+        )\n+        self.messages.append(msg)\n+\n+\n class TestUserNotificationUnit(unittest.TestCase):\n \n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         # Set up a mock mailhost\n         self.portal._original_MailHost = self.portal.MailHost\n-        self.portal.MailHost = mailhost = MockMailHost(\'MailHost\')\n+        self.portal.MailHost = mailhost = MockMailHost("MailHost")\n         sm = getSiteManager(context=self.portal)\n         sm.unregisterUtility(provided=IMailHost)\n         sm.registerUtility(mailhost, provided=IMailHost)\n         # We need to fake a valid mail setup\n         registry = getUtility(IRegistry)\n-        mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n-        mail_settings.email_from_address = \'portal@plone.test\'\n+        mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n+        mail_settings.email_from_address = "portal@plone.test"\n         self.mailhost = self.portal.MailHost\n         # Enable user notification setting\n         registry = queryUtility(IRegistry)\n-        registry[\'plone.app.discussion.interfaces.IDiscussionSettings\' +\n-                 \'.user_notification_enabled\'] = True\n-        # Archetypes content types store data as utf-8 encoded strings\n-        # The missing u in front of a string is therefor not missing\n-        self.portal.doc1.title = \'K\xc3\xb6lle Alaaf\'  # What is \'Fasching\'?\n+        registry[\n+            "plone.app.discussion.interfaces.IDiscussionSettings"\n+            + ".user_notification_enabled"\n+        ] = True\n+        self.portal.doc1.title = "K\xc3\xb6lle Alaaf"  # What is \'Fasching\'?\n         self.conversation = IConversation(self.portal.doc1)\n \n     def beforeTearDown(self):\n         self.portal.MailHost = self.portal._original_MailHost\n         sm = getSiteManager(context=self.portal)\n         sm.unregisterUtility(provided=IMailHost)\n-        sm.registerUtility(aq_base(self.portal._original_MailHost),\n-                           provided=IMailHost)\n+        sm.registerUtility(aq_base(self.portal._original_MailHost), provided=IMailHost)\n \n     def test_notify_user(self):\n         # Add a comment with user notification enabled. Add another comment\n         # and make sure an email is send to the user of the first comment.\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         comment.user_notification = True\n-        comment.author_email = \'john@plone.test\'\n+        comment.author_email = "john@plone.test"\n         self.conversation.addComment(comment)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         comment_id = self.conversation.addComment(comment)\n \n@@ -67,52 +103,46 @@ def test_notify_user(self):\n         self.assertTrue(self.mailhost.messages[0])\n         msg = self.mailhost.messages[0]\n         msg = msg.decode("utf-8")\n-        self.assertIn(\'To: john@plone.test\', msg)\n-        self.assertIn(\'From: portal@plone.test\', msg)\n+        self.assertIn("To: john@plone.test", msg)\n+        self.assertIn("From: portal@plone.test", msg)\n         # We expect the headers to be properly header encoded (7-bit):\n-        self.assertIn(\n-            \'Subject: =?utf-8?q?A_comment_has_been_posted=2E?=\',\n-            msg)\n+        self.assertIn("Subject: =?utf-8?q?A_comment_has_been_posted=2E?=", msg)\n         # The output should be encoded in a reasonable manner\n         # (in this case quoted-printable).\n         # Depending on which Python version and which Products.MailHost version,\n         # you may get lines separated by \'\\n\' or \'\\r\\n\' in here.\n-        msg = msg.replace(\'\\r\\n\', \'\\n\')\n-        self.assertIn(\n-            \'A comment on "K=C3=B6lle Alaaf" has been posted here:\',\n-            msg)\n-        self.assertIn(\n-            \'http://nohost/plone/d=\\noc1/view#{0}\'.format(comment_id),\n-            msg)\n-        self.assertIn(\'Comment text\', msg)\n-        self.assertNotIn(\'Approve comment\', msg)\n-        self.assertNotIn(\'Delete comment\', msg)\n+        msg = msg.replace("\\r\\n", "\\n")\n+        self.assertIn(\'A comment on "K=C3=B6lle Alaaf" has been posted here:\', msg)\n+        self.assertIn(f"http://nohost/plone/d=\\noc1/view#{comment_id}", msg)\n+        self.assertIn("Comment text", msg)\n+        self.assertNotIn("Approve comment", msg)\n+        self.assertNotIn("Delete comment", msg)\n \n     def test_do_not_notify_user_when_notification_is_disabled(self):\n         registry = queryUtility(IRegistry)\n         registry[\n-            \'plone.app.discussion.interfaces.IDiscussionSettings.\' +\n-            \'user_notification_enabled\'\n+            "plone.app.discussion.interfaces.IDiscussionSettings."\n+            + "user_notification_enabled"\n         ] = False\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         comment.user_notification = True\n-        comment.author_email = \'john@plone.test\'\n+        comment.author_email = "john@plone.test"\n         self.conversation.addComment(comment)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         self.conversation.addComment(comment)\n \n         self.assertEqual(len(self.mailhost.messages), 0)\n \n     def test_do_not_notify_user_when_email_address_is_given(self):\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         comment.user_notification = True\n         self.conversation.addComment(comment)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         self.conversation.addComment(comment)\n \n@@ -122,15 +152,15 @@ def test_do_not_notify_user_when_no_sender_is_available(self):\n         # Set sender mail address to none and make sure no email is send to\n         # the moderator.\n         registry = getUtility(IRegistry)\n-        mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n+        mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n         mail_settings.email_from_address = None\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         comment.user_notification = True\n-        comment.author_email = \'john@plone.test\'\n+        comment.author_email = "john@plone.test"\n         self.conversation.addComment(comment)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         self.conversation.addComment(comment)\n         self.assertEqual(len(self.mailhost.messages), 0)\n@@ -139,15 +169,15 @@ def test_notify_only_once(self):\n         # When a user has added two comments in a conversation and has\n         # both times requested email notification, do not send him two\n         # emails when another comment has been added.\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         comment.user_notification = True\n-        comment.author_email = \'john@plone.test\'\n+        comment.author_email = "john@plone.test"\n         self.conversation.addComment(comment)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         comment.user_notification = True\n-        comment.author_email = \'john@plone.test\'\n+        comment.author_email = "john@plone.test"\n \n         self.conversation.addComment(comment)\n \n@@ -163,48 +193,45 @@ class TestModeratorNotificationUnit(unittest.TestCase):\n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         # Set up a mock mailhost\n         self.portal._original_MailHost = self.portal.MailHost\n-        self.portal.MailHost = mailhost = MockMailHost(\'MailHost\')\n+        self.portal.MailHost = mailhost = MockMailHost("MailHost")\n         sm = getSiteManager(context=self.portal)\n         sm.unregisterUtility(provided=IMailHost)\n         sm.registerUtility(mailhost, provided=IMailHost)\n         # We need to fake a valid mail setup\n         registry = getUtility(IRegistry)\n-        mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n-        mail_settings.email_from_address = \'portal@plone.test\'\n+        mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n+        mail_settings.email_from_address = "portal@plone.test"\n         self.mailhost = self.portal.MailHost\n         # Enable comment moderation\n-        self.portal.portal_types[\'Document\'].allow_discussion = True\n+        self.portal.portal_types["Document"].allow_discussion = True\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            (\'comment_review_workflow\',),\n+            ("Discussion Item",),\n+            ("comment_review_workflow",),\n         )\n         # Enable moderator notification setting\n         registry = queryUtility(IRegistry)\n         registry[\n-            \'plone.app.discussion.interfaces.IDiscussionSettings.\' +\n-            \'moderator_notification_enabled\'\n+            "plone.app.discussion.interfaces.IDiscussionSettings."\n+            + "moderator_notification_enabled"\n         ] = True\n-        # Archetypes content types store data as utf-8 encoded strings\n-        # The missing u in front of a string is therefor not missing\n-        self.portal.doc1.title = \'K\xc3\xb6lle Alaaf\'  # What is \'Fasching\'?\n+        self.portal.doc1.title = "K\xc3\xb6lle Alaaf"  # What is \'Fasching\'?\n         self.conversation = IConversation(self.portal.doc1)\n \n     def beforeTearDown(self):\n         self.portal.MailHost = self.portal._original_MailHost\n         sm = getSiteManager(context=self.portal)\n         sm.unregisterUtility(provided=IMailHost)\n-        sm.registerUtility(aq_base(self.portal._original_MailHost),\n-                           provided=IMailHost)\n+        sm.registerUtility(aq_base(self.portal._original_MailHost), provided=IMailHost)\n \n     def test_notify_moderator(self):\n         """Add a comment and make sure an email is send to the moderator."""\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n-        comment.author_email = \'john@plone.test\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n+        comment.author_email = "john@plone.test"\n \n         comment_id = self.conversation.addComment(comment)\n \n@@ -212,54 +239,41 @@ def test_notify_moderator(self):\n         self.assertTrue(self.mailhost.messages[0])\n         msg = self.mailhost.messages[0]\n         msg = msg.decode("utf-8")\n-        self.assertTrue(\'To: portal@plone.test\' in msg)\n-        self.assertTrue(\'From: portal@plone.test\' in msg)\n+        self.assertTrue("To: portal@plone.test" in msg)\n+        self.assertTrue("From: portal@plone.test" in msg)\n         # We expect the headers to be properly header encoded (7-bit):\n-        self.assertTrue(\n-            \'Subject: =?utf-8?q?A_comment_has_been_posted=2E?=\'\n-            in msg)\n+        self.assertTrue("Subject: =?utf-8?q?A_comment_has_been_posted=2E?=" in msg)\n         # The output should be encoded in a reasonable manner\n         # (in this case quoted-printable):\n-        self.assertTrue(\n-            \'A comment on "K=C3=B6lle Alaaf" has been posted\'\n-            in msg\n-        )\n-        self.assertIn(\n-            \'http://nohost/plone/doc1/view#{0}\'.format(comment_id),\n-            msg\n-        )\n-        self.assertIn(\n-            comment.author_email,\n-            msg\n-        )\n-        self.assertIn(\n-            comment.text,\n-            msg\n-        )\n+        self.assertTrue(\'A comment on "K=C3=B6lle Alaaf" has been posted\' in msg)\n+        self.assertIn(f"http://nohost/plone/doc1/view#{comment_id}", msg)\n+        self.assertIn(comment.author_email, msg)\n+        self.assertIn(comment.text, msg)\n \n     def test_notify_moderator_specific_address(self):\n         # A moderator email address can be specified in the control panel.\n         registry = queryUtility(IRegistry)\n-        registry[\'plone.app.discussion.interfaces.IDiscussionSettings\' +\n-                 \'.moderator_email\'] = \'test@example.com\'\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        registry[\n+            "plone.app.discussion.interfaces.IDiscussionSettings" + ".moderator_email"\n+        ] = "test@example.com"\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         self.conversation.addComment(comment)\n \n         self.assertEqual(len(self.mailhost.messages), 1)\n         msg = self.mailhost.messages[0]\n         msg = msg.decode("utf-8")\n-        self.assertTrue(\'To: test@example.com\' in msg)\n+        self.assertTrue("To: test@example.com" in msg)\n \n     def test_do_not_notify_moderator_when_no_sender_is_available(self):\n         # Set sender mail address to nonw and make sure no email is send to the\n         # moderator.\n         registry = getUtility(IRegistry)\n-        mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n+        mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n         mail_settings.email_from_address = None\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         self.conversation.addComment(comment)\n \n@@ -269,10 +283,12 @@ def test_do_not_notify_moderator_when_notification_is_disabled(self):\n         # Disable moderator notification setting and make sure no email is send\n         # to the moderator.\n         registry = queryUtility(IRegistry)\n-        registry[\'plone.app.discussion.interfaces.IDiscussionSettings.\' +\n-                 \'moderator_notification_enabled\'] = False\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        registry[\n+            "plone.app.discussion.interfaces.IDiscussionSettings."\n+            + "moderator_notification_enabled"\n+        ] = False\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n \n         self.conversation.addComment(comment)\n \ndiff --git a/plone/app/discussion/tests/test_robot.py b/plone/app/discussion/tests/test_robot.py\nindex 202b43b7..c6266893 100644\n--- a/plone/app/discussion/tests/test_robot.py\n+++ b/plone/app/discussion/tests/test_robot.py\n@@ -1,5 +1,4 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_ROBOT_TESTING\n+from ..testing import PLONE_APP_DISCUSSION_ROBOT_TESTING\n from plone.app.testing import ROBOT_TEST_LEVEL\n from plone.testing import layered\n \n@@ -11,19 +10,21 @@\n def test_suite():\n     suite = unittest.TestSuite()\n     current_dir = os.path.abspath(os.path.dirname(__file__))\n-    robot_dir = os.path.join(current_dir, \'robot\')\n+    robot_dir = os.path.join(current_dir, "robot")\n     robot_tests = [\n-        os.path.join(\'robot\', doc) for doc in\n-        os.listdir(robot_dir) if doc.endswith(\'.robot\') and\n-        doc.startswith(\'test_\')\n+        os.path.join("robot", doc)\n+        for doc in os.listdir(robot_dir)\n+        if doc.endswith(".robot") and doc.startswith("test_")\n     ]\n     for robot_test in robot_tests:\n         robottestsuite = robotsuite.RobotTestSuite(robot_test)\n         robottestsuite.level = ROBOT_TEST_LEVEL\n-        suite.addTests([\n-            layered(\n-                robottestsuite,\n-                layer=PLONE_APP_DISCUSSION_ROBOT_TESTING,\n-            ),\n-        ])\n+        suite.addTests(\n+            [\n+                layered(\n+                    robottestsuite,\n+                    layer=PLONE_APP_DISCUSSION_ROBOT_TESTING,\n+                ),\n+            ]\n+        )\n     return suite\ndiff --git a/plone/app/discussion/tests/test_workflow.py b/plone/app/discussion/tests/test_workflow.py\nindex 9f959fcc..ece7d8ac 100644\n--- a/plone/app/discussion/tests/test_workflow.py\n+++ b/plone/app/discussion/tests/test_workflow.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n """Test plone.app.discussion workflow and permissions.\n """\n+from ..interfaces import IConversation\n+from ..interfaces import IDiscussionLayer\n+from ..testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n from AccessControl import Unauthorized\n-from plone.app.discussion.interfaces import IConversation\n-from plone.app.discussion.interfaces import IDiscussionLayer\n-from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n from plone.app.testing import login\n from plone.app.testing import logout\n from plone.app.testing import setRoles\n@@ -19,48 +18,51 @@\n \n \n class WorkflowSetupTest(unittest.TestCase):\n-    """Make sure the workflows are set up properly.\n-    """\n+    """Make sure the workflows are set up properly."""\n \n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'test-folder\')\n-        self.folder = self.portal[\'test-folder\']\n-        self.portal.portal_types[\'Document\'].allow_discussion = True\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "test-folder")\n+        self.folder = self.portal["test-folder"]\n+        self.portal.portal_types["Document"].allow_discussion = True\n+        self.folder.invokeFactory("Document", "doc1")\n         self.doc = self.folder.doc1\n \n     def test_workflows_installed(self):\n-        """Make sure both comment workflows have been installed properly.\n-        """\n-        self.assertTrue(\'comment_one_state_workflow\' in\n-                        self.portal.portal_workflow.objectIds())\n-        self.assertTrue(\'comment_review_workflow\' in\n-                        self.portal.portal_workflow.objectIds())\n+        """Make sure both comment workflows have been installed properly."""\n+        self.assertTrue(\n+            "comment_one_state_workflow" in self.portal.portal_workflow.objectIds()\n+        )\n+        self.assertTrue(\n+            "comment_review_workflow" in self.portal.portal_workflow.objectIds()\n+        )\n \n     def test_default_workflow(self):\n-        """Make sure one_state_workflow is the default workflow.\n-        """\n+        """Make sure one_state_workflow is the default workflow."""\n         self.assertEqual(\n-            (\'comment_one_state_workflow\',),\n+            ("comment_one_state_workflow",),\n             self.portal.portal_workflow.getChainForPortalType(\n-                \'Discussion Item\',\n+                "Discussion Item",\n             ),\n         )\n \n     def test_review_comments_permission(self):\n         # \'Review comments\' in self.portal.permissionsOfRole(\'Admin\')\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Reviewer\'])\n-        self.assertTrue(self.portal.portal_membership.checkPermission(\n-                        \'Review comments\', self.folder), self.folder)\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Reviewer"])\n+        self.assertTrue(\n+            self.portal.portal_membership.checkPermission(\n+                "Review comments", self.folder\n+            ),\n+            self.folder,\n+        )\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n         self.assertFalse(\n             self.portal.portal_membership.checkPermission(\n-                \'Review comments\',\n+                "Review comments",\n                 self.folder,\n             ),\n             self.folder,\n@@ -71,31 +73,30 @@ def test_reply_to_item_permission(self):\n \n \n class PermissionsSetupTest(unittest.TestCase):\n-    """Make sure the permissions are set up properly.\n-    """\n+    """Make sure the permissions are set up properly."""\n \n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         mtool = self.portal.portal_membership\n         self.checkPermission = mtool.checkPermission\n \n     def test_reply_to_item_permission_assigned(self):\n         """Make sure the \'Reply to item\' permission is properly assigned.\n-           By default this permission is assigned to \'Member\' and \'Manager\'.\n-           plone.app.discussion assigns this permission to \'Authenticated\' as\n-           well to emulate the behavior of the old commenting system.\n+        By default this permission is assigned to \'Member\' and \'Manager\'.\n+        plone.app.discussion assigns this permission to \'Authenticated\' as\n+        well to emulate the behavior of the old commenting system.\n         """\n-        ReplyToItemPerm = \'Reply to item\'\n+        ReplyToItemPerm = "Reply to item"\n         # should be allowed as Member\n         self.assertTrue(self.checkPermission(ReplyToItemPerm, self.portal))\n         # should be allowed as Authenticated\n-        setRoles(self.portal, TEST_USER_ID, [\'Authenticated\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Authenticated"])\n         self.assertTrue(self.checkPermission(ReplyToItemPerm, self.portal))\n         # should be allowed as Manager\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.assertTrue(self.checkPermission(ReplyToItemPerm, self.portal))\n         # should not be allowed as anonymous\n         logout()\n@@ -103,70 +104,66 @@ def test_reply_to_item_permission_assigned(self):\n \n \n class CommentOneStateWorkflowTest(unittest.TestCase):\n-    """Test the comment_one_state_workflow that ships with plone.app.discussion.\n-    """\n+    """Test the comment_one_state_workflow that ships with plone.app.discussion."""\n \n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'test-folder\')\n-        self.folder = self.portal[\'test-folder\']\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "test-folder")\n+        self.folder = self.portal["test-folder"]\n         self.catalog = self.portal.portal_catalog\n         self.workflow = self.portal.portal_workflow\n-        self.folder.invokeFactory(\'Document\', \'doc1\')\n+        self.folder.invokeFactory("Document", "doc1")\n         self.doc = self.folder.doc1\n \n         # Add a comment\n         conversation = IConversation(self.folder.doc1)\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         cid = conversation.addComment(comment)\n \n         self.comment = self.folder.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(cid),\n+            f"++conversation++default/{cid}",\n         )\n \n-        self.portal.acl_users._doAddUser(\'member\', \'secret\', [\'Member\'], [])\n-        self.portal.acl_users._doAddUser(\n-            \'reviewer\', \'secret\', [\'Reviewer\'], [])\n-        self.portal.acl_users._doAddUser(\'manager\', \'secret\', [\'Manager\'], [])\n-        self.portal.acl_users._doAddUser(\'editor\', \' secret\', [\'Editor\'], [])\n-        self.portal.acl_users._doAddUser(\'reader\', \'secret\', [\'Reader\'], [])\n+        self.portal.acl_users._doAddUser("member", "secret", ["Member"], [])\n+        self.portal.acl_users._doAddUser("reviewer", "secret", ["Reviewer"], [])\n+        self.portal.acl_users._doAddUser("manager", "secret", ["Manager"], [])\n+        self.portal.acl_users._doAddUser("editor", " secret", ["Editor"], [])\n+        self.portal.acl_users._doAddUser("reader", "secret", ["Reader"], [])\n \n     def test_initial_workflow_state(self):\n-        """Make sure the initial workflow state of a comment is \'private\'.\n-        """\n+        """Make sure the initial workflow state of a comment is \'private\'."""\n         self.assertEqual(\n-            self.workflow.getInfoFor(self.doc, \'review_state\'),\n-            \'private\',\n+            self.workflow.getInfoFor(self.doc, "review_state"),\n+            "private",\n         )\n \n     def test_view_comments(self):\n-        """Make sure published comments can be viewed by everyone.\n-        """\n+        """Make sure published comments can be viewed by everyone."""\n         # Owner is allowed\n         # self.login(default_user)\n         # self.assertTrue(checkPerm(View, self.doc))\n         # Member is allowed\n         login(self.portal, TEST_USER_NAME)\n         workflow = self.portal.portal_workflow\n-        workflow.doActionFor(self.doc, \'publish\')\n+        workflow.doActionFor(self.doc, "publish")\n \n-        login(self.portal, \'member\')\n+        login(self.portal, "member")\n         self.assertTrue(checkPerm(View, self.comment))\n         # Reviewer is allowed\n-        login(self.portal, \'reviewer\')\n+        login(self.portal, "reviewer")\n         self.assertTrue(checkPerm(View, self.comment))\n         # Anonymous is allowed\n         logout()\n         self.assertTrue(checkPerm(View, self.comment))\n         # Editor is allowed\n-        login(self.portal, \'editor\')\n+        login(self.portal, "editor")\n         self.assertTrue(checkPerm(View, self.comment))\n         # Reader is allowed\n-        login(self.portal, \'reader\')\n+        login(self.portal, "reader")\n         self.assertTrue(checkPerm(View, self.comment))\n \n     def test_comment_on_private_content_not_visible_to_world(self):\n@@ -175,8 +172,9 @@ def test_comment_on_private_content_not_visible_to_world(self):\n \n     def test_migration(self):\n         from plone.app.discussion.upgrades import upgrade_comment_workflows\n+\n         # Fake permission according to earlier one_comment_workflow.\n-        self.comment._View_Permission = (\'Anonymous\',)\n+        self.comment._View_Permission = ("Anonymous",)\n         # Anonymous can see the comment.\n         logout()\n         self.assertTrue(checkPerm(View, self.comment))\n@@ -185,8 +183,8 @@ def test_migration(self):\n         upgrade_comment_workflows(self.portal.portal_setup)\n         # The workflow chain is still what we want.\n         self.assertEqual(\n-            self.portal.portal_workflow.getChainFor(\'Discussion Item\'),\n-            (\'comment_one_state_workflow\',),\n+            self.portal.portal_workflow.getChainFor("Discussion Item"),\n+            ("comment_one_state_workflow",),\n         )\n         # A Manager can still see the comment.\n         self.assertTrue(checkPerm(View, self.comment))\n@@ -196,112 +194,112 @@ def test_migration(self):\n \n \n class CommentReviewWorkflowTest(unittest.TestCase):\n-    """Test the comment_review_workflow that ships with plone.app.discussion.\n-    """\n+    """Test the comment_review_workflow that ships with plone.app.discussion."""\n \n     layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'test-folder\')\n-        self.folder = self.portal[\'test-folder\']\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "test-folder")\n+        self.folder = self.portal["test-folder"]\n \n         # Allow discussion on the Document content type\n-        self.portal.portal_types[\'Document\'].allow_discussion = True\n+        self.portal.portal_types["Document"].allow_discussion = True\n         # Set workflow for Discussion item to review workflow\n         self.portal.portal_workflow.setChainForPortalTypes(\n-            (\'Discussion Item\',),\n-            (\'comment_review_workflow\',),\n+            ("Discussion Item",),\n+            ("comment_review_workflow",),\n         )\n \n         # Create a conversation for this Document\n         conversation = IConversation(self.portal.doc1)\n \n         # Add a comment.\n-        comment = createObject(\'plone.Comment\')\n-        comment.text = \'Comment text\'\n+        comment = createObject("plone.Comment")\n+        comment.text = "Comment text"\n         comment_id = conversation.addComment(comment)\n         comment = self.portal.doc1.restrictedTraverse(\n-            \'++conversation++default/{0}\'.format(comment_id),\n+            f"++conversation++default/{comment_id}",\n         )\n \n         self.conversation = conversation\n         self.comment_id = comment_id\n         self.comment = comment\n \n-        setRoles(self.portal, TEST_USER_ID, [\'Reviewer\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Reviewer"])\n         alsoProvides(self.portal.REQUEST, IDiscussionLayer)\n \n     def test_delete(self):\n-        self.portal.REQUEST.form[\'comment_id\'] = self.comment_id\n-        view = self.comment.restrictedTraverse(\'@@moderate-delete-comment\')\n+        self.portal.REQUEST.form["comment_id"] = self.comment_id\n+        view = self.comment.restrictedTraverse("@@moderate-delete-comment")\n         view()\n         self.assertFalse(self.comment_id in self.conversation.objectIds())\n \n     def test_delete_as_anonymous(self):\n         # Make sure that anonymous users can not delete comments\n         logout()\n-        self.portal.REQUEST.form[\'comment_id\'] = self.comment_id\n+        self.portal.REQUEST.form["comment_id"] = self.comment_id\n         self.assertRaises(\n             Unauthorized,\n             self.comment.restrictedTraverse,\n-            \'@@moderate-delete-comment\',\n+            "@@moderate-delete-comment",\n         )\n         self.assertTrue(self.comment_id in self.conversation.objectIds())\n \n     def test_delete_as_user(self):\n         # Make sure that members can not delete comments\n         logout()\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n-        self.portal.REQUEST.form[\'comment_id\'] = self.comment_id\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n+        self.portal.REQUEST.form["comment_id"] = self.comment_id\n         self.assertRaises(\n             Unauthorized,\n             self.comment.restrictedTraverse,\n-            \'@@moderate-delete-comment\',\n+            "@@moderate-delete-comment",\n         )\n         self.assertTrue(self.comment_id in self.conversation.objectIds())\n \n     def test_publish(self):\n-        self.portal.REQUEST.form[\'comment_id\'] = self.comment_id\n-        self.portal.REQUEST.form[\'workflow_action\'] = \'publish\'\n+        self.portal.REQUEST.form["comment_id"] = self.comment_id\n+        self.portal.REQUEST.form["workflow_action"] = "publish"\n         self.assertEqual(\n-            \'pending\',\n+            "pending",\n             self.portal.portal_workflow.getInfoFor(\n                 self.comment,\n-                \'review_state\',\n+                "review_state",\n             ),\n         )\n-        view = self.comment.restrictedTraverse(\'@@transmit-comment\')\n+        view = self.comment.restrictedTraverse("@@transmit-comment")\n         view()\n         self.assertEqual(\n-            \'published\',\n+            "published",\n             self.portal.portal_workflow.getInfoFor(\n                 self.comment,\n-                \'review_state\',\n+                "review_state",\n             ),\n         )\n \n     def test_publish_as_anonymous(self):\n         logout()\n-        self.portal.REQUEST.form[\'comment_id\'] = self.comment_id\n-        self.portal.REQUEST.form[\'workflow_action\'] = \'publish\'\n+        self.portal.REQUEST.form["comment_id"] = self.comment_id\n+        self.portal.REQUEST.form["workflow_action"] = "publish"\n         self.assertEqual(\n-            \'pending\', self.portal.portal_workflow.getInfoFor(\n+            "pending",\n+            self.portal.portal_workflow.getInfoFor(\n                 self.comment,\n-                \'review_state\',\n+                "review_state",\n             ),\n         )\n         self.assertRaises(\n             Unauthorized,\n             self.comment.restrictedTraverse,\n-            \'@@transmit-comment\',\n+            "@@transmit-comment",\n         )\n         self.assertEqual(\n-            \'pending\',\n+            "pending",\n             self.portal.portal_workflow.getInfoFor(\n                 self.comment,\n-                \'review_state\',\n+                "review_state",\n             ),\n         )\n \n@@ -312,15 +310,16 @@ def test_publish_comment_on_private_content_not_visible_to_world(self):\n         # publish comment and check again\n         login(self.portal, TEST_USER_NAME)\n         workflow = self.portal.portal_workflow\n-        workflow.doActionFor(self.comment, \'publish\')\n+        workflow.doActionFor(self.comment, "publish")\n \n         logout()\n         self.assertFalse(checkPerm(View, self.comment))\n \n     def test_migration(self):\n         from plone.app.discussion.upgrades import upgrade_comment_workflows\n+\n         # Fake permission according to earlier comment_review_workflow.\n-        self.comment._View_Permission = (\'Anonymous\',)\n+        self.comment._View_Permission = ("Anonymous",)\n         # Anonymous can see the comment.\n         logout()\n         self.assertTrue(checkPerm(View, self.comment))\n@@ -329,8 +328,9 @@ def test_migration(self):\n         upgrade_comment_workflows(self.portal.portal_setup)\n         # The workflow chain is still what we want.\n         self.assertEqual(\n-            self.portal.portal_workflow.getChainFor(\'Discussion Item\'),\n-            (\'comment_review_workflow\',))\n+            self.portal.portal_workflow.getChainFor("Discussion Item"),\n+            ("comment_review_workflow",),\n+        )\n         # A Manager can still see the comment.\n         self.assertTrue(checkPerm(View, self.comment))\n         # Anonymous cannot see the comment.\ndiff --git a/plone/app/discussion/tool.py b/plone/app/discussion/tool.py\nindex a10ae3c3..50f9361e 100644\n--- a/plone/app/discussion/tool.py\n+++ b/plone/app/discussion/tool.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """The portal_discussion tool, usually accessed via\n queryUtility(ICommentingTool). The default implementation delegates to the\n standard portal_catalog for indexing comments.\n@@ -17,62 +16,60 @@\n @interface.implementer(ICommentingTool)\n class CommentingTool(UniqueObject, SimpleItem):\n \n-    meta_type = \'plone.app.discussion tool\'\n-    id = \'portal_discussion\'\n+    meta_type = "plone.app.discussion tool"\n+    id = "portal_discussion"\n \n     def reindexObject(self, object):\n         # Reindex in catalog.\n-        catalog = getToolByName(self, \'portal_catalog\')\n+        catalog = getToolByName(self, "portal_catalog")\n         return catalog.reindexObject(object)\n \n     indexObject = reindexObject\n \n     def unindexObject(self, object):\n         # Remove from catalog.\n-        catalog = getToolByName(self, \'portal_catalog\')\n+        catalog = getToolByName(self, "portal_catalog")\n         return catalog.unindexObject(object)\n \n     def uniqueValuesFor(self, name):\n         # return unique values for FieldIndex name\n-        catalog = getToolByName(self, \'portal_catalog\')\n+        catalog = getToolByName(self, "portal_catalog")\n         return catalog.uniqueValuesFor(name)\n \n     def searchResults(self, REQUEST=None, **kw):\n         # Calls ZCatalog.searchResults with extra arguments that\n         # limit the results to what the user is allowed to see.\n-        catalog = getToolByName(self, \'portal_catalog\')\n+        catalog = getToolByName(self, "portal_catalog")\n         object_provides = [IComment.__identifier__]\n \n-        if \'object_provides\' in kw:\n-            kw_provides = kw[\'object_provides\']\n+        if "object_provides" in kw:\n+            kw_provides = kw["object_provides"]\n             if isinstance(str, kw_provides):\n                 object_provides.append(kw_provides)\n             else:\n                 object_provides.extend(kw_provides)\n \n-        if REQUEST is not None and \'object_provides\' in REQUEST.form:\n-            rq_provides = REQUEST.form[\'object_provides\']\n-            del REQUEST.form[\'object_provides\']\n+        if REQUEST is not None and "object_provides" in REQUEST.form:\n+            rq_provides = REQUEST.form["object_provides"]\n+            del REQUEST.form["object_provides"]\n             if isinstance(str, rq_provides):\n                 object_provides.append(rq_provides)\n             else:\n                 object_provides.extend(rq_provides)\n \n-        kw[\'object_provides\'] = object_provides\n+        kw["object_provides"] = object_provides\n         return catalog.searchResults(REQUEST, **kw)\n \n \n def index_object(obj, event):\n-    """Index the object when added to the conversation\n-    """\n+    """Index the object when added to the conversation"""\n     tool = queryUtility(ICommentingTool)\n     if tool is not None:\n         tool.indexObject(obj)\n \n \n def unindex_object(obj, event):\n-    """Unindex the object when removed\n-    """\n+    """Unindex the object when removed"""\n     tool = queryUtility(ICommentingTool)\n     if tool is not None:\n         tool.unindexObject(obj)\ndiff --git a/plone/app/discussion/upgrades.py b/plone/app/discussion/upgrades.py\nindex 784184e0..40cdc8fe 100644\n--- a/plone/app/discussion/upgrades.py\n+++ b/plone/app/discussion/upgrades.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.discussion.interfaces import IDiscussionSettings\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n@@ -7,8 +6,8 @@\n import logging\n \n \n-default_profile = \'profile-plone.app.discussion:default\'\n-logger = logging.getLogger(\'plone.app.discussion\')\n+default_profile = "profile-plone.app.discussion:default"\n+logger = logging.getLogger("plone.app.discussion")\n \n \n def update_registry(context):\n@@ -17,7 +16,7 @@ def update_registry(context):\n \n \n def update_rolemap(context):\n-    context.runImportStepFromProfile(default_profile, \'rolemap\')\n+    context.runImportStepFromProfile(default_profile, "rolemap")\n \n \n def upgrade_comment_workflows_retain_current_workflow(context):\n@@ -25,16 +24,16 @@ def upgrade_comment_workflows_retain_current_workflow(context):\n     # import step will change it to comment_one_state_workflow.  This is good.\n     # If it was anything else, we should restore this.  So get the original\n     # chain.\n-    portal_type = \'Discussion Item\'\n-    wf_tool = getToolByName(context, \'portal_workflow\')\n+    portal_type = "Discussion Item"\n+    wf_tool = getToolByName(context, "portal_workflow")\n     orig_chain = list(wf_tool.getChainFor(portal_type))\n \n     # Run the workflow step.  This sets the chain to\n     # comment_one_state_workflow.\n-    context.runImportStepFromProfile(default_profile, \'workflow\')\n+    context.runImportStepFromProfile(default_profile, "workflow")\n \n     # Restore original workflow chain if needed.\n-    old_workflow = \'one_state_workflow\'\n+    old_workflow = "one_state_workflow"\n     if old_workflow not in orig_chain:\n         # Restore the chain.  Probably comment_review_workflow.\n         wf_tool.setChainForPortalTypes([portal_type], orig_chain)\n@@ -43,7 +42,7 @@ def upgrade_comment_workflows_retain_current_workflow(context):\n         if old_workflow in orig_chain:\n             # Replace with new one.\n             idx = orig_chain.index(old_workflow)\n-            orig_chain[idx] = \'comment_one_state_workflow\'\n+            orig_chain[idx] = "comment_one_state_workflow"\n         # Restore the chain.\n         wf_tool.setChainForPortalTypes([portal_type], orig_chain)\n \n@@ -51,9 +50,9 @@ def upgrade_comment_workflows_retain_current_workflow(context):\n def upgrade_comment_workflows_apply_rolemapping(context):\n     # Now go over the comments, update their role mappings, and reindex the\n     # allowedRolesAndUsers index.\n-    portal_type = \'Discussion Item\'\n-    catalog = getToolByName(context, \'portal_catalog\')\n-    wf_tool = getToolByName(context, \'portal_workflow\')\n+    portal_type = "Discussion Item"\n+    catalog = getToolByName(context, "portal_catalog")\n+    wf_tool = getToolByName(context, "portal_workflow")\n     new_chain = list(wf_tool.getChainFor(portal_type))\n     workflows = [wf_tool.getWorkflowById(wf_id) for wf_id in new_chain]\n     for brain in catalog.unrestrictedSearchResults(portal_type=portal_type):\n@@ -63,7 +62,7 @@ def upgrade_comment_workflows_apply_rolemapping(context):\n                 wf.updateRoleMappingsFor(comment)\n             comment.reindexObjectSecurity()\n         except (AttributeError, KeyError):\n-            logger.info(\'Could not reindex comment {0}\'.format(brain.getURL()))\n+            logger.info(f"Could not reindex comment {brain.getURL()}")\n \n \n def upgrade_comment_workflows(context):\n@@ -72,7 +71,7 @@ def upgrade_comment_workflows(context):\n \n \n def add_js_to_plone_legacy(context):\n-    context.runImportStepFromProfile(default_profile, \'plone.app.registry\')\n+    context.runImportStepFromProfile(default_profile, "plone.app.registry")\n \n \n def extend_review_workflow(context):\ndiff --git a/plone/app/discussion/vocabularies.py b/plone/app/discussion/vocabularies.py\nindex b1588667..290448d3 100644\n--- a/plone/app/discussion/vocabularies.py\n+++ b/plone/app/discussion/vocabularies.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.discussion.interfaces import _\n from zope.schema.vocabulary import SimpleTerm\n from zope.schema.vocabulary import SimpleVocabulary\n@@ -7,6 +6,7 @@\n HAS_CAPTCHA = False\n try:\n     import plone.formwidget.captcha  # noqa\n+\n     HAS_CAPTCHA = True  # pragma: no cover\n except ImportError:\n     pass\n@@ -14,6 +14,7 @@\n HAS_RECAPTCHA = False\n try:\n     import plone.formwidget.recaptcha  # noqa\n+\n     HAS_RECAPTCHA = True  # pragma: no cover\n except ImportError:\n     pass\n@@ -21,6 +22,7 @@\n HAS_AKISMET = False\n try:\n     import collective.akismet  # noqa\n+\n     HAS_AKISMET = True  # pragma: no cover\n except ImportError:\n     pass\n@@ -28,73 +30,48 @@\n HAS_NOROBOTS = False\n try:\n     import collective.z3cform.norobots  # noqa\n+\n     HAS_NOROBOTS = True  # pragma: no cover\n except ImportError:\n     pass\n \n \n def captcha_vocabulary(context):\n-    """Vocabulary with all available captcha implementations.\n-    """\n+    """Vocabulary with all available captcha implementations."""\n     terms = []\n-    terms.append(\n-        SimpleTerm(\n-            value=\'disabled\',\n-            token=\'disabled\',\n-            title=_(u\'Disabled\')))\n+    terms.append(SimpleTerm(value="disabled", token="disabled", title=_("Disabled")))\n \n     if HAS_CAPTCHA:  # pragma: no cover\n-        terms.append(\n-            SimpleTerm(\n-                value=\'captcha\',\n-                token=\'captcha\',\n-                title=\'Captcha\'))\n+        terms.append(SimpleTerm(value="captcha", token="captcha", title="Captcha"))\n \n     if HAS_RECAPTCHA:  # pragma: no cover\n         terms.append(\n-            SimpleTerm(\n-                value=\'recaptcha\',\n-                token=\'recaptcha\',\n-                title=\'ReCaptcha\'))\n+            SimpleTerm(value="recaptcha", token="recaptcha", title="ReCaptcha")\n+        )\n \n     if HAS_AKISMET:  # pragma: no cover\n-        terms.append(\n-            SimpleTerm(\n-                value=\'akismet\',\n-                token=\'akismet\',\n-                title=\'Akismet\'))\n+        terms.append(SimpleTerm(value="akismet", token="akismet", title="Akismet"))\n \n     if HAS_NOROBOTS:  # pragma: no cover\n-        terms.append(\n-            SimpleTerm(\n-                value=\'norobots\',\n-                token=\'norobots\',\n-                title=\'Norobots\'))\n+        terms.append(SimpleTerm(value="norobots", token="norobots", title="Norobots"))\n     return SimpleVocabulary(terms)\n \n \n def text_transform_vocabulary(context):\n-    """Vocabulary with all available portal_transform transformations.\n-    """\n+    """Vocabulary with all available portal_transform transformations."""\n     terms = []\n+    terms.append(SimpleTerm(value="text/plain", token="text/plain", title="Plain text"))\n+    terms.append(SimpleTerm(value="text/html", token="text/html", title="HTML"))\n     terms.append(\n         SimpleTerm(\n-            value=\'text/plain\',\n-            token=\'text/plain\',\n-            title=\'Plain text\'))\n-    terms.append(\n-        SimpleTerm(\n-            value=\'text/html\',\n-            token=\'text/html\',\n-            title=\'HTML\'))\n-    terms.append(\n-        SimpleTerm(\n-            value=\'text/x-web-markdown\',\n-            token=\'text/x-web-markdown\',\n-            title=\'Markdown\'))\n+            value="text/x-web-markdown", token="text/x-web-markdown", title="Markdown"\n+        )\n+    )\n     terms.append(\n         SimpleTerm(\n-            value=\'text/x-web-intelligent\',\n-            token=\'text/x-web-intelligent\',\n-            title=\'Intelligent text\'))\n+            value="text/x-web-intelligent",\n+            token="text/x-web-intelligent",\n+            title="Intelligent text",\n+        )\n+    )\n     return SimpleVocabulary(terms)\ndiff --git a/setup.cfg b/setup.cfg\nindex 5a698fce..e726c4cd 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -11,3 +11,10 @@ universal = 1\n \n [zest.releaser]\n create-wheel = yes\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\ndiff --git a/setup.py b/setup.py\nindex 893470ab..3b2c6293 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,73 +1,62 @@\n-# encoding: utf-8\n-\n from setuptools import find_packages\n from setuptools import setup\n \n \n-version = \'4.0.0a7.dev0\'\n+version = "4.0.0a7.dev0"\n \n install_requires = [\n-    \'setuptools\',\n-    \'plone.app.layout\',\n-    \'plone.app.registry\',\n-    \'plone.app.uuid\',\n-    \'plone.app.z3cform\',\n-    \'plone.indexer\',\n-    \'plone.registry\',\n-    \'plone.z3cform\',\n-    \'six\',\n-    \'ZODB3\',\n-    \'zope.interface\',\n-    \'zope.component\',\n-    \'zope.annotation\',\n-    \'zope.event\',\n-    \'zope.container\',\n-    \'zope.lifecycleevent\',\n-    \'zope.site\',\n-    \'z3c.form>=2.3.3\',\n+    "setuptools",\n+    "plone.app.layout",\n+    "plone.app.registry",\n+    "plone.app.uuid",\n+    "plone.app.z3cform",\n+    "plone.base",\n+    "plone.indexer",\n+    "plone.z3cform",\n+    "z3c.form>=2.3.3",\n ]\n \n-setup(name=\'plone.app.discussion\',\n-      version=version,\n-      description=\'Enhanced discussion support for Plone\',\n-      long_description=open(\'README.rst\').read() + \'\\n\' +\n-      open(\'CHANGES.rst\').read(),\n-      classifiers=[\n-          "Development Status :: 5 - Production/Stable",\n-          "Environment :: Web Environment",\n-          "Framework :: Plone",\n-          "Framework :: Plone :: 6.0",\n-          "Framework :: Plone :: Core",\n-          "Framework :: Zope :: 5",\n-          "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n-          "Operating System :: OS Independent",\n-          "Programming Language :: Python",\n-          "Programming Language :: Python :: 3.7",\n-          "Programming Language :: Python :: 3.8",\n-          "Programming Language :: Python :: 3.9",\n-      ],\n-      keywords=\'plone discussion\',\n-      author=\'Timo Stollenwerk - Plone Foundation\',\n-      author_email=\'plone-developers@lists.sourceforge.net\',\n-      url=\'https://pypi.org/project/plone.app.discussion\',\n-      license=\'GPL\',\n-      packages=find_packages(),\n-      namespace_packages=[\'plone\', \'plone.app\'],\n-      include_package_data=True,\n-      zip_safe=False,\n-      install_requires=install_requires,\n-      extras_require={\n-          \'test\': [\n-              \'plone.app.testing\',\n-              \'plone.stringinterp\',\n-              \'plone.contentrules\',\n-              \'plone.app.contentrules\',\n-              \'plone.app.contenttypes[test]\',\n-              \'plone.app.robotframework\',\n-          ],\n-      },\n-      entry_points="""\n+setup(\n+    name="plone.app.discussion",\n+    version=version,\n+    description="Enhanced discussion support for Plone",\n+    long_description=open("README.rst").read() + "\\n" + open("CHANGES.rst").read(),\n+    classifiers=[\n+        "Development Status :: 5 - Production/Stable",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n+        "Framework :: Zope :: 5",\n+        "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n+        "Operating System :: OS Independent",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+    ],\n+    keywords="plone discussion",\n+    author="Timo Stollenwerk - Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.discussion",\n+    license="GPL",\n+    packages=find_packages(),\n+    namespace_packages=["plone", "plone.app"],\n+    include_package_data=True,\n+    zip_safe=False,\n+    install_requires=install_requires,\n+    extras_require={\n+        "test": [\n+            "plone.app.testing",\n+            "plone.stringinterp",\n+            "plone.contentrules",\n+            "plone.app.contentrules",\n+            "plone.app.contenttypes[test]",\n+            "plone.app.robotframework",\n+        ],\n+    },\n+    entry_points="""\n       [z3c.autoinclude.plugin]\n       target = plone\n       """,\n-      )\n+)\n'

