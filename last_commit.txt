Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-15T18:39:23+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/691114dae307bc29786da1ede46ba4cd6384de4c

Call new pre_scale and get_or_generate from plone.scale.

See branch pre-scale of plone.scale.

Files changed:
M plone/namedfile/scaling.py

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex cf4133a..4f0dbfd 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -370,7 +370,7 @@ def publishTraverse(self, request, name):\n             if "." in name:\n                 name, ext = name.rsplit(".", 1)\n             storage = getMultiAdapter((self.context, None), IImageScaleStorage)\n-            info = storage.get(name)\n+            info = storage.get_or_generate(name)\n             if info is None:\n                 raise NotFound(self, name, self.request)\n             scale_view = self._scale_view_class(self.context, self.request, **info)\n@@ -498,7 +498,7 @@ def scale(\n             (self.context, functools.partial(self.modified, fieldname)),\n             IImageScaleStorage\n         )\n-        info = storage.scale(\n+        info = storage.pre_scale(\n             fieldname=fieldname,\n             height=height,\n             width=width,\n@@ -543,7 +543,7 @@ def calculate_srcset(\n             ):\n                 continue\n             parameters["quality"] = hdScale["quality"]\n-            scale_src = storage.scale(\n+            scale_src = storage.pre_scale(\n                 fieldname=fieldname,\n                 height=height * hdScale["scale"] if height else height,\n                 width=width * hdScale["scale"] if width else width,\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-16T17:09:07+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/7de488efa143f16c367afc3d83c784a756b8c128

Use 'pre' at the right places.

Files changed:
M plone/namedfile/scaling.py

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 4f0dbfd..2ca72eb 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -396,7 +396,7 @@ def traverse(self, name, furtherPath):\n                 self.context, self.request, data=value, fieldname=name,\n             )\n         else:\n-            return ImmutableTraverser(self.scale(name, furtherPath[-1]))\n+            return ImmutableTraverser(self.scale(name, furtherPath[-1], pre=True))\n \n         if image is not None:\n             return image.tag()\n@@ -474,6 +474,7 @@ def scale(\n         height=None,\n         width=None,\n         direction="thumbnail",\n+        pre=False,\n         **parameters\n     ):\n         if fieldname is None:\n@@ -498,7 +499,11 @@ def scale(\n             (self.context, functools.partial(self.modified, fieldname)),\n             IImageScaleStorage\n         )\n-        info = storage.pre_scale(\n+        if pre:\n+            scale_method = storage.pre_scale\n+        else:\n+            scale_method = storage.scale\n+        info = scale_method(\n             fieldname=fieldname,\n             height=height,\n             width=width,\n@@ -564,7 +569,7 @@ def tag(\n         direction="thumbnail",\n         **kwargs\n     ):\n-        scale = self.scale(fieldname, scale, height, width, direction)\n+        scale = self.scale(fieldname, scale, height, width, direction, pre=True)\n         return scale.tag(**kwargs) if scale else None\n \n \n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-17T10:42:09+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/a5f1338bcfe0cae236f7f744cd471501a5596345

Do not include old-style srcset when requesting a scale via a url.

Only do this when pre=True, so when generating a tag.
You can override the standard behavior by explicitly passing new boolean parameter include_srcset.

Files changed:
M plone/namedfile/scaling.py

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 2ca72eb..b7a0520 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -475,6 +475,7 @@ def scale(\n         width=None,\n         direction="thumbnail",\n         pre=False,\n+        include_srcset=None,\n         **parameters\n     ):\n         if fieldname is None:\n@@ -514,15 +515,22 @@ def scale(\n         if info is None:\n             return  # 404\n \n-        info["srcset"] = self.calculate_srcset(\n-            fieldname=fieldname,\n-            height=height,\n-            width=width,\n-            direction=direction,\n-            scale=scale,\n-            storage=storage,\n-            **parameters\n-        )\n+        # Do we want to include srcset info for HiDPI?\n+        # If there is no explicit True/False given, we look at the value of \'pre\'.\n+        # When \'pre\' is False, the visitor is requesting a scale via a url,\n+        # so we only want a single image and not any fancy extras.\n+        if include_srcset is None and pre:\n+            include_srcset = True\n+        if include_srcset:\n+            info["srcset"] = self.calculate_srcset(\n+                fieldname=fieldname,\n+                height=height,\n+                width=width,\n+                direction=direction,\n+                scale=scale,\n+                storage=storage,\n+                **parameters\n+            )\n         info["fieldname"] = fieldname\n         scale_view = self._scale_view_class(self.context, self.request, **info)\n         return scale_view\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-17T11:13:33+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/340c41188a55c2b94e6a411c83396dc8593ad703

Merge branch 'master' into pre-scale

Files changed:
M tox.ini

b'diff --git a/tox.ini b/tox.ini\nindex c505c68..1bd6d76 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -26,6 +26,8 @@ commands_pre =\n \n [testenv:plone60-py{37,38,39,310}]\n commands_pre =\n-    pip install mxdev\n+    pip install -U pip\n+    # for libvcs pin, see https://github.com/bluedynamics/mxdev/issues/10\n+    pip install mxdev "libvcs<0.12"\n     mxdev -c sources-60.ini\n-    pip install --use-deprecated legacy-resolver -rrequirements-60-mxdev.txt\n+    pip install -rrequirements-60-mxdev.txt\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-17T15:57:55+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/ce07e8de5c46706651410548c1a34466c6162226

Add images-test view, only for Editors.

Show some versions of the image with different directions.
Show stored scales.
Add button for clearing the scales.

Currently only works when the fieldname is 'image' and there is an actual image.

Files changed:
A plone/namedfile/test.pt
M plone/namedfile/scaling.py
M plone/namedfile/scaling.zcml

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex b7a0520..ed9805c 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -4,6 +4,7 @@\n from DateTime import DateTime\n from io import BytesIO\n from plone.memoize import ram\n+from plone.protect import PostOnly\n from plone.namedfile.file import FILECHUNK_CLASSES\n from plone.namedfile.interfaces import IAvailableSizes\n from plone.namedfile.interfaces import IStableImageScale\n@@ -597,3 +598,24 @@ def tag(self, brain, fieldname, **kwargs):\n         images = obj.restrictedTraverse("@@images")\n         tag = images.tag(fieldname, **kwargs)\n         return tag\n+\n+\n+class ImagesTest(BrowserView):\n+    """View for Editors to check how images look and what scales are stored."""\n+\n+    @property\n+    def storage(self):\n+        return getMultiAdapter((self.context, None), IImageScaleStorage)\n+\n+    def stored_scales(self):\n+        return sorted(self.storage.items())\n+\n+    def clear(self):\n+        """Clear the scales.\n+        """\n+        PostOnly(self.request)\n+        self.storage.clear()\n+        url = self.context.absolute_url()\n+        logger.info("Scale storage cleared for %s", url)\n+        self.request.response.redirect(f"{url}/@@images-test")\n+        return "cleared"\ndiff --git a/plone/namedfile/scaling.zcml b/plone/namedfile/scaling.zcml\nindex a4ae5b2..b626d51 100644\n--- a/plone/namedfile/scaling.zcml\n+++ b/plone/namedfile/scaling.zcml\n@@ -4,6 +4,7 @@\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:browser="http://namespaces.zope.org/browser">\n   <include package="zope.annotation" />\n+  <include package="Products.CMFCore" />\n   <browser:page\n       allowed_attributes="scale tag"\n       class=".scaling.ImageScaling"\n@@ -11,6 +12,20 @@\n       name="images"\n       permission="zope2.View"\n   />\n+  <browser:page\n+      for=".interfaces.IImageScaleTraversable"\n+      name="images-test"\n+      class=".scaling.ImagesTest"\n+      template="test.pt"\n+      permission="cmf.ModifyPortalContent"\n+  />\n+  <browser:page\n+      for=".interfaces.IImageScaleTraversable"\n+      name="images-clear"\n+      class=".scaling.ImagesTest"\n+      attribute="clear"\n+      permission="cmf.ModifyPortalContent"\n+  />\n   <browser:page\n       allowed_attributes="scale tag"\n       class=".scaling.NavigationRootScaling"\ndiff --git a/plone/namedfile/test.pt b/plone/namedfile/test.pt\nnew file mode 100644\nindex 0000000..6da1f52\n--- /dev/null\n+++ b/plone/namedfile/test.pt\n@@ -0,0 +1,133 @@\n+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n+    xmlns:tal="http://xml.zope.org/namespaces/tal"\n+    xmlns:metal="http://xml.zope.org/namespaces/metal"\n+    xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+    lang="en"\n+    metal:use-macro="context/@@main_template/macros/master"\n+    i18n:domain="plone">\n+<body>\n+\n+<metal:content-core fill-slot="content-core">\n+<metal:block define-macro="content-core"\n+             tal:define="content_type python: context.image.contentType;\n+                         size context/image/getSize;\n+                         image_dimension context/image/getImageSize;\n+                         images context/@@images;\n+                         use_MB python: size > 1024*1024;\n+                         dimension python: str(image_dimension[0])+\'x\'+str(image_dimension[1]);\n+                         filename python: context.image.filename;\n+                         mimetype_icon python: \'mimetype-\' + content_type;\n+                         download_url python: \'{}/@@download/image/{}\'.format(context.absolute_url(), filename)\n+                                                     ">\n+  <p>\n+    Go to:\n+    <a href="#examples">examples</a>,\n+    <a href="#cover">cover</a>,\n+    <a href="#contain">contain</a>,\n+    <a href="#stored">stored scales</a>,\n+    <a href="#clear">clear</a>\n+  </p>\n+  <section class="section section-main">\n+    <h3>Thumb with info</h3>\n+    <p>Standard display of Image content type, but using thumb scale</p>\n+    <figure class="figure">\n+      <a tal:attributes="href string:${context/@@plone_context_state/object_url}/image_view_fullscreen"\n+         tal:define="img_tag python:images.tag(\'image\', scale=\'thumb\', css_class=\'figure-img img-fluid\')"\n+         >\n+        <img tal:replace="structure img_tag" />\n+      </a>\n+    </figure>\n+\n+    <div class="h5 mb-2">\n+      <a href="${python:download_url}" tal:content="python: filename">Filename</a>\n+    </div>\n+    <div class="metadata d-flex justify-content-center text-muted small">\n+      <div class="px-2">\n+        <tal:icon tal:replace="structure python:icons.tag(mimetype_icon, tag_class=\'icon-inline\', tag_alt=content_type)" />\n+        <span i18n:translate="image_kind_label" class="d-none">Type</span>\n+        <span tal:replace="python: content_type">image/jpeg</span>\n+      </div>\n+      <div class="px-2">\n+        <tal:icon tal:replace="structure python:icons.tag(\'aspect-ratio\', tag_class=\'icon-inline\', tag_alt=\'Dimension\')" />\n+        <span i18n:translate="image_dimension_label" class="d-none">Dimension</span>\n+        <span tal:replace="python: dimension">400x300</span>\n+      </div>\n+      <div class="px-2">\n+        <tal:icon tal:replace="structure python:icons.tag(\'file-binary\', tag_class=\'icon-inline\', tag_alt=\'Size\')" />\n+        <span i18n:translate="image_size_label" class="d-none">File size</span>\n+        <tal:MB condition="use_MB">${python:round(size/1024/1024, 1)} MB</tal:MB>\n+        <tal:KB condition="not: use_MB">${python:round(size/1024, 1)} KB</tal:KB>\n+      </div>\n+    </div>\n+\n+  </section>\n+\n+  <section class="section section-actions">\n+    <a class="btn btn-primary download" href="${python:download_url}" i18n:translate="">Download</a>\n+    <a class="btn btn-primary fullscreen" href="${context/@@plone_context_state/object_url}/image_view_fullscreen"><span i18n:translate="label_click_to_view_full_image">View full-size image</span></a>\n+  </section>\n+  <hr />\n+  <section id="examples">\n+    <h2>Examples with direction/mode</h2>\n+\n+    <h3>Mini</h3>\n+    <figure class="figure"\n+      tal:define="img_tag python:images.tag(\'image\', scale=\'mini\')">\n+      <img tal:replace="structure img_tag" />\n+      <br /><code tal:content="img_tag" />\n+    </figure>\n+\n+    <h3 id="cover">Mini direction=cover</h3>\n+    <figure class="figure"\n+      tal:define="img_tag python:images.tag(\'image\', scale=\'mini\', direction=\'cover\')">\n+      <img tal:replace="structure img_tag" />\n+      <br /><code tal:content="img_tag" />\n+    </figure>\n+\n+    <h3 id="contain">Mini direction=contain</h3>\n+    <p>\n+      Temporary note:\n+      This crops the image. The crop may fail unless this\n+      <a href="https://github.com/plone/plone.scale/pull/54">plone.scale PR</a> is merged.\n+    </p>\n+    <figure class="figure"\n+      tal:define="img_tag python:images.tag(\'image\', scale=\'mini\', direction=\'contain\')">\n+      <img tal:replace="structure img_tag" />\n+      <br /><code tal:content="img_tag" />\n+    </figure>\n+\n+  </section>\n+\n+  <section class="section" id="stored">\n+    <h3>Stored scales</h3>\n+    <div class="accordion" id="accordion-stored">\n+      <div class="accordion-item" tal:repeat="(uid, info) view/stored_scales">\n+        <h4 class="accordion-header" id="heading-${uid}">\n+          <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-${uid}" aria-expanded="false" aria-controls="collapse-${uid}">\n+            <code>${uid}</code>\n+          </button>\n+        </h4>\n+        <div id="collapse-${uid}" class="accordion-collapse collapse" aria-labelledby="heading-${uid}" data-bs-parent="#accordion-stored">\n+          <div class="accordion-body">\n+            <tal:block repeat="item python:sorted(info.items())">\n+              <br tal:condition="not:repeat/item/start" />\n+              <code>${python:item[0]}: ${python:item[1]}</code>\n+            </tal:block>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  </section>\n+\n+  <section class="section" id="clear">\n+    <h3>Clear scales</h3>\n+    <form method="post" action="${context/@@plone_context_state/object_url}/@@images-clear">\n+      <button>Clear</button>\n+    </form>\n+  </section>\n+\n+</metal:block>\n+</metal:content-core>\n+\n+</body>\n+</html>\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-17T16:15:40+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/ce1cf5fd02e99d9d7c7816436ab377e3b152eb54

From Products.CMFCore only load permissions.zcml.

Avoids a weird undefined genericsetup:importStep in CMFCore/exportimport/configure.zcml

Files changed:
M plone/namedfile/scaling.zcml

b'diff --git a/plone/namedfile/scaling.zcml b/plone/namedfile/scaling.zcml\nindex b626d51..3a4d58e 100644\n--- a/plone/namedfile/scaling.zcml\n+++ b/plone/namedfile/scaling.zcml\n@@ -4,7 +4,7 @@\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:browser="http://namespaces.zope.org/browser">\n   <include package="zope.annotation" />\n-  <include package="Products.CMFCore" />\n+  <include package="Products.CMFCore" file="permissions.zcml" />\n   <browser:page\n       allowed_attributes="scale tag"\n       class=".scaling.ImageScaling"\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-17T18:11:23+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/de6903d0b7cc9eb8808467b22bff4de2a90a8cca

mxdev: use the pre-scale branch of plone.scale.

Files changed:
M sources-52.ini
M sources-60.ini

b'diff --git a/sources-52.ini b/sources-52.ini\nindex 9a78476..f5e58aa 100644\n--- a/sources-52.ini\n+++ b/sources-52.ini\n@@ -7,4 +7,10 @@\n requirements-in = requirements-52.txt\n requirements-out = requirements-52-mxdev.txt\n constraints-out = constraints-52-mxdev.txt\n-ignores = plone.namedfile\n+ignores =\n+    plone.namedfile\n+    plone.scale\n+\n+[plone.scale]\n+url = https://github.com/plone/plone.scale.git\n+branch = pre-scale\ndiff --git a/sources-60.ini b/sources-60.ini\nindex 23c132d..5ff6556 100644\n--- a/sources-60.ini\n+++ b/sources-60.ini\n@@ -7,4 +7,10 @@\n requirements-in = requirements-60.txt\n requirements-out = requirements-60-mxdev.txt\n constraints-out = constraints-60-mxdev.txt\n-ignores = plone.namedfile\n+ignores =\n+    plone.namedfile\n+    plone.scale\n+\n+[plone.scale]\n+url = https://github.com/plone/plone.scale.git\n+branch = pre-scale\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-17T22:45:25+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/3fda001ffbf589aef9870593d5b6156aaf0c4f46

Start fixing tests.

Files changed:
M .gitignore
M plone/namedfile/tests/test_scaling.py

b'diff --git a/.gitignore b/.gitignore\nindex 9eff048..4159a5f 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -11,3 +11,4 @@ include\n lib\n parts\n requirements-*-mxdev.txt\n+sources/\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex 64edf02..cbf054c 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -26,6 +26,12 @@\n import unittest\n \n \n+# Unique scale name used to be a uuid.uui4(),\n+# which is a combination of hexadecimal digits with dashes, total 36.\n+# Now it is \'imagescalename-width-hash\', where hash is 32.\n+PAT_UID_SCALE = r"[0-9a-z]*-[0-9]*-[0-9a-f]{32}"\n+\n+\n def wait_to_ensure_modified():\n     # modified is measured in milliseconds\n     # wait 5ms to ensure modified will have changed\n@@ -112,6 +118,23 @@ def __init__(self, context, modified=None):\n         self.modified = modified\n         self.storage = context._scales\n \n+    def pre_scale(self, factory=None, **parameters):\n+        """Find image scale data for the given parameters or pre-create it.\n+\n+        In our version, we only support height and width.\n+        """\n+        stripped_parameters = {\n+            "target_height": parameters.get("height"),\n+            "target_width": parameters.get("width"),\n+        }\n+        key = self.hash(**stripped_parameters)\n+        info = self.get_info_by_hash(key)\n+        if info is not None:\n+            # Note: we could do something with self.modified here,\n+            # but we choose to ignore it.\n+            return info\n+        return self.create_scale(no_scale=True, **stripped_parameters)\n+\n     def scale(self, factory=None, **parameters):\n         """Find image scale data for the given parameters or create it.\n \n@@ -122,7 +145,6 @@ def scale(self, factory=None, **parameters):\n             "target_width": parameters.get("width"),\n         }\n         key = self.hash(**stripped_parameters)\n-        storage = self.storage\n         info = self.get_info_by_hash(key)\n         if info is not None:\n             # Note: we could do something with self.modified here,\n@@ -130,7 +152,7 @@ def scale(self, factory=None, **parameters):\n             return info\n         return self.create_scale(**stripped_parameters)\n \n-    def create_scale(self, target_height=None, target_width=None):\n+    def create_scale(self, target_height=None, target_width=None, no_scale=False):\n         if target_height is None and target_width is None:\n             # Return the original.\n             return self.context.info\n@@ -145,11 +167,22 @@ def create_scale(self, target_height=None, target_width=None):\n         uid = f"uid-{len(self.storage)}"\n         key = self.hash(target_height=target_height, target_width=target_width)\n \n-        # Create a new fake image for this scale.\n-        scale = FakeImage(value, format, key=key, uid=uid)\n+        if no_scale:\n+            info = dict(\n+                placeholder=True,\n+                width=self._width,\n+                height=self._height,\n+                mimetype=f\'image/{self.format.lower()}\',\n+                key=self.key,\n+                uid=self.uid\n+            )\n+        else:\n+            # Create a new fake image for this scale.\n+            scale = FakeImage(value, format, key=key, uid=uid)\n+            info = scale.info\n \n-        # Store the scale and return the info.\n-        self.storage[uid] = scale.info\n+        # Store the real scale or placeholder scale and return the info.\n+        self.storage[uid] = info\n         return scale.info\n \n     def __getitem__(self, uid):\n@@ -159,6 +192,19 @@ def __getitem__(self, uid):\n     def get(self, uid, default=None):\n         return self.storage.get(uid, default)\n \n+    def get_or_generate(self, uid, default=None):\n+        info = self.storage.get(uid, default)\n+        if info is None:\n+            return\n+        if info.get("data"):\n+            return info\n+        # We have a placeholder. Get real data.\n+        stripped_parameters = {\n+            "target_height": info.get("height"),\n+            "target_width": info.get("width"),\n+        }\n+        return self.create_scale(**stripped_parameters)\n+\n     def hash(self, **parameters):\n         return tuple(parameters.values())\n \n@@ -241,16 +287,16 @@ def testGetScaleByName(self):\n         self.assertEqual(foo.height, 60)\n         assertImage(self, foo.data.data, \'PNG\', (60, 60))\n         expected_url = re.compile(\n-            r\'http://nohost/item/@@images/[-a-z0-9]{36}\\.png\')\n+            r\'http://nohost/item/@@images/{0}.png\'.format(PAT_UID_SCALE))\n         self.assertTrue(expected_url.match(foo.absolute_url()))\n         self.assertEqual(foo.url, foo.absolute_url())\n \n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = \\\n-            r\'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" \' \\\n+            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \' \\\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" />\'.format(\n-                base,\n+                base, PAT_UID_SCALE\n             )\n         groups = re.match(expected, tag).groups()\n         self.assertTrue(groups, tag)\n@@ -269,10 +315,10 @@ def testGetHighPixelDensityScaleByName(self):\n         base = self.item.absolute_url()\n         expected = (\n             r\'<img src="{0}\'.format(base) +\n-            r\'/@@images/([-0-9a-f]{36})\'\n+            r\'/@@images/({0})\'.format(PAT_UID_SCALE) +\n             r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n-            r\'srcset="http://nohost/item/@@images/([-0-9a-f]{36})\'\n+            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE) +\n             r\'.(jpeg|gif|png)\'\n             r\' 2x" />\')\n         groups = re.match(expected, tag).groups()\n@@ -291,10 +337,10 @@ def testGetRetinaScaleByWidthAndHeight(self):\n         base = self.item.absolute_url()\n         expected = (\n             r\'<img src="{0}\'.format(base) +\n-            r\'/@@images/([-0-9a-f]{36})\'\n+            r\'/@@images/({0})\'.format(PAT_UID_SCALE) +\n             r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n-            r\'srcset="http://nohost/item/@@images/([-0-9a-f]{36})\'\n+            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE) +\n             r\'.(jpeg|gif|png)\'\n             r\' 2x" />\')\n         groups = re.match(expected, tag).groups()\n@@ -313,10 +359,10 @@ def testGetRetinaScaleByWidthOnly(self):\n         base = self.item.absolute_url()\n         expected = (\n             r\'<img src="{0}\'.format(base) +\n-            r\'/@@images/([-0-9a-f]{36})\'\n+            r\'/@@images/({0})\'.format(PAT_UID_SCALE) +\n             r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n-            r\'srcset="http://nohost/item/@@images/([-0-9a-f]{36})\'\n+            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE) +\n             r\'.(jpeg|gif|png)\'\n             r\' 2x" />\')\n         groups = re.match(expected, tag).groups()\n@@ -335,10 +381,10 @@ def testGetRetinaScaleByHeightOnly(self):\n         base = self.item.absolute_url()\n         expected = (\n             r\'<img src="{0}\'.format(base) +\n-            r\'/@@images/([-0-9a-f]{36})\'\n+            r\'/@@images/({0})\'.format(PAT_UID_SCALE) +\n             r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n-            r\'srcset="http://nohost/item/@@images/([-0-9a-f]{36})\'\n+            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE) +\n             r\'.(jpeg|gif|png)\'\n             r\' 2x" />\')\n         groups = re.match(expected, tag).groups()\n@@ -422,9 +468,9 @@ def testGetOriginalScaleTag(self):\n         tag = self.scaling.tag(\'image\')\n         base = self.item.absolute_url()\n         expected = \\\n-            r\'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" \' \\\n+            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \' \\\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" />\'.format(\n-                base,\n+                base, PAT_UID_SCALE\n             )\n         self.assertTrue(re.match(expected, tag).groups())\n \n@@ -433,9 +479,9 @@ def testScaleOnItemWithNonASCIITitle(self):\n         tag = self.scaling.tag(\'image\')\n         base = self.item.absolute_url()\n         expected = \\\n-            r\'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" \' \\\n+            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \' \\\n             r\'alt="\\xfc" title="\\xfc" height="(\\d+)" width="(\\d+)" />\'.format(\n-                base,\n+                base, PAT_UID_SCALE\n             )\n         self.assertTrue(re.match(expected, tag).groups())\n \n@@ -444,9 +490,9 @@ def testScaleOnItemWithUnicodeTitle(self):\n         tag = self.scaling.tag(\'image\')\n         base = self.item.absolute_url()\n         expected = \\\n-            r\'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" \' \\\n+            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \' \\\n             r\'alt="\\xfc" title="\\xfc" height="(\\d+)" width="(\\d+)" />\'.format(\n-                base,\n+                base, PAT_UID_SCALE\n             )\n         self.assertTrue(re.match(expected, tag).groups())\n \n@@ -509,7 +555,7 @@ def traverse(self, path=\'\'):\n         tag = static_traverser.traverse(scale, stack)\n         base = self.item.absolute_url()\n         expected = \\\n-            r\'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" \' \\\n+            r\'<img src="{0}/@@images/([0-9a-z]*-[0-9]*-[0-9a-f]{{32}}).(jpeg|gif|png)" \' \\\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" />\'.format(\n                 base,\n             )\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-17T22:46:00+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/4e3d3b9935465af34c82a5291f9186dd4160c8e5

Merge branch 'master' into pre-scale

Files changed:
A news/114.bugfix
M plone/namedfile/scaling.py

b'diff --git a/news/114.bugfix b/news/114.bugfix\nnew file mode 100644\nindex 0000000..a9127a9\n--- /dev/null\n+++ b/news/114.bugfix\n@@ -0,0 +1,3 @@\n+Only look at the width when checking if a HiDPI image would be larger than the original.\n+Otherwise HiDPI srcsets are never included when the scale is defined with a height of 65536.\n+[maurits]\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex ed9805c..30954d8 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -552,9 +552,8 @@ def calculate_srcset(\n         (orig_width, orig_height) = self.getImageSize(fieldname)\n         for hdScale in self.getHighPixelDensityScales():\n             # Don\'t create retina scales larger than the source image.\n-            if (height and orig_height and orig_height < height * hdScale["scale"]) or (\n-                width and orig_width and orig_width < width * hdScale["scale"]\n-            ):\n+            # We only care about the width, because height might be 65536.\n+            if width and orig_width and orig_width < width * hdScale["scale"]:\n                 continue\n             parameters["quality"] = hdScale["quality"]\n             scale_src = storage.pre_scale(\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-18T10:21:51+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/4a262a387f195cb6e0ba77ce7793c053c5be06fa

We need to pass include_srcset=True in tests.

Otherwise the scale method thinks we only want the current actual image scale, and then the srcset info would be useless so it does not include it.

Files changed:
M plone/namedfile/tests/test_scaling.py

b"diff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex cbf054c..59b786b 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -255,7 +255,7 @@ def testCreateExactScale(self):\n \n     def testCreateHighPixelDensityScale(self):\n         self.scaling.getHighPixelDensityScales = lambda: [{'scale': 2, 'quality': 66}]\n-        foo = self.scaling.scale('image', width=100, height=80)\n+        foo = self.scaling.scale('image', width=100, height=80, include_srcset=True)\n         self.assertTrue(foo.srcset)\n         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')\n         self.assertEqual(foo.srcset[0]['height'], 160)\n@@ -304,7 +304,7 @@ def testGetScaleByName(self):\n     def testGetHighPixelDensityScaleByName(self):\n         self.scaling.getHighPixelDensityScales = lambda: [{'scale': 2, 'quality': 66}]\n         self.scaling.available_sizes = {'foo': (60, 60)}\n-        foo = self.scaling.scale('image', scale='foo')\n+        foo = self.scaling.scale('image', scale='foo', include_srcset=True)\n         self.assertTrue(foo.srcset)\n         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')\n         self.assertEqual(foo.srcset[0]['width'], 120)\n@@ -326,7 +326,7 @@ def testGetHighPixelDensityScaleByName(self):\n \n     def testGetRetinaScaleByWidthAndHeight(self):\n         self.scaling.getHighPixelDensityScales = lambda: [{'scale': 2, 'quality': 66}]\n-        foo = self.scaling.scale('image', width=60, height=60)\n+        foo = self.scaling.scale('image', width=60, height=60, include_srcset=True)\n         self.assertTrue(foo.srcset)\n         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')\n         self.assertEqual(foo.srcset[0]['width'], 120)\n@@ -348,7 +348,7 @@ def testGetRetinaScaleByWidthAndHeight(self):\n \n     def testGetRetinaScaleByWidthOnly(self):\n         self.scaling.getHighPixelDensityScales = lambda: [{'scale': 2, 'quality': 66}]\n-        foo = self.scaling.scale('image', width=60)\n+        foo = self.scaling.scale('image', width=60, include_srcset=True)\n         self.assertTrue(foo.srcset)\n         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')\n         self.assertEqual(foo.srcset[0]['width'], 120)\n@@ -370,7 +370,7 @@ def testGetRetinaScaleByWidthOnly(self):\n \n     def testGetRetinaScaleByHeightOnly(self):\n         self.scaling.getHighPixelDensityScales = lambda: [{'scale': 2, 'quality': 66}]\n-        foo = self.scaling.scale('image', height=60)\n+        foo = self.scaling.scale('image', height=60, include_srcset=True)\n         self.assertTrue(foo.srcset)\n         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')\n         self.assertEqual(foo.srcset[0]['width'], 120)\n@@ -525,7 +525,9 @@ def testOversizedHighPixelDensityScale(self):\n         self.scaling.getHighPixelDensityScales = lambda: [\n             {'scale': 2, 'quality': 66},\n             {'scale': 3, 'quality': 66}]\n-        foo = self.scaling.scale('image', width=scale_size, height=scale_size)\n+        foo = self.scaling.scale(\n+            'image', width=scale_size, height=scale_size, include_srcset=True\n+        )\n         self.assertEqual(len(foo.srcset), 1)\n         self.assertEqual(foo.srcset[0]['scale'], 2)\n \n"

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-18T10:23:04+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/ec3cd655ed03b3fdeb7bc8b7c3a4183969738ee7

Fixed the tests for srcsets.

This shows we do not get the generated scale for the srcsets anymore.

Files changed:
M plone/namedfile/tests/test_scaling.py

b"diff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex 59b786b..6a969f5 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -169,7 +169,7 @@ def create_scale(self, target_height=None, target_width=None, no_scale=False):\n \n         if no_scale:\n             info = dict(\n-                placeholder=True,\n+                data=None,\n                 width=self._width,\n                 height=self._height,\n                 mimetype=f'image/{self.format.lower()}',\n@@ -260,7 +260,11 @@ def testCreateHighPixelDensityScale(self):\n         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')\n         self.assertEqual(foo.srcset[0]['height'], 160)\n         self.assertEqual(foo.srcset[0]['width'], 160)\n-        assertImage(self, foo.srcset[0]['data'].data, 'PNG', (160, 160))\n+        # It is a pre-registered scale, not yet rendered.\n+        self.assertEqual(foo.srcset[0]['data'], None)\n+        # Render the scale by pretending to visit its url.\n+        bar = self.scaling.publishTraverse(self.layer['request'], foo.srcset[0]['uid'])\n+        assertImage(self, bar.data.data, 'PNG', (160, 160))\n \n     def testCreateScaleWithoutData(self):\n         item = DummyContent()\n@@ -309,7 +313,12 @@ def testGetHighPixelDensityScaleByName(self):\n         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')\n         self.assertEqual(foo.srcset[0]['width'], 120)\n         self.assertEqual(foo.srcset[0]['height'], 120)\n-        assertImage(self, foo.srcset[0]['data'].data, 'PNG', (120, 120))\n+\n+        # It is a pre-registered scale, not yet rendered.\n+        self.assertEqual(foo.srcset[0]['data'], None)\n+        # Render the scale by pretending to visit its url.\n+        bar = self.scaling.publishTraverse(self.layer['request'], foo.srcset[0]['uid'])\n+        assertImage(self, bar.data.data, 'PNG', (120, 120))\n \n         tag = foo.tag()\n         base = self.item.absolute_url()\n@@ -331,7 +340,12 @@ def testGetRetinaScaleByWidthAndHeight(self):\n         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')\n         self.assertEqual(foo.srcset[0]['width'], 120)\n         self.assertEqual(foo.srcset[0]['height'], 120)\n-        assertImage(self, foo.srcset[0]['data'].data, 'PNG', (120, 120))\n+\n+        # It is a pre-registered scale, not yet rendered.\n+        self.assertEqual(foo.srcset[0]['data'], None)\n+        # Render the scale by pretending to visit its url.\n+        bar = self.scaling.publishTraverse(self.layer['request'], foo.srcset[0]['uid'])\n+        assertImage(self, bar.data.data, 'PNG', (120, 120))\n \n         tag = foo.tag()\n         base = self.item.absolute_url()\n@@ -353,7 +367,11 @@ def testGetRetinaScaleByWidthOnly(self):\n         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')\n         self.assertEqual(foo.srcset[0]['width'], 120)\n         self.assertEqual(foo.srcset[0]['height'], 120)\n-        assertImage(self, foo.srcset[0]['data'].data, 'PNG', (120, 120))\n+        # It is a pre-registered scale, not yet rendered.\n+        self.assertEqual(foo.srcset[0]['data'], None)\n+        # Render the scale by pretending to visit its url.\n+        bar = self.scaling.publishTraverse(self.layer['request'], foo.srcset[0]['uid'])\n+        assertImage(self, bar.data.data, 'PNG', (120, 120))\n \n         tag = foo.tag()\n         base = self.item.absolute_url()\n@@ -375,7 +393,11 @@ def testGetRetinaScaleByHeightOnly(self):\n         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')\n         self.assertEqual(foo.srcset[0]['width'], 120)\n         self.assertEqual(foo.srcset[0]['height'], 120)\n-        assertImage(self, foo.srcset[0]['data'].data, 'PNG', (120, 120))\n+        # It is a pre-registered scale, not yet rendered.\n+        self.assertEqual(foo.srcset[0]['data'], None)\n+        # Render the scale by pretending to visit its url.\n+        bar = self.scaling.publishTraverse(self.layer['request'], foo.srcset[0]['uid'])\n+        assertImage(self, bar.data.data, 'PNG', (120, 120))\n \n         tag = foo.tag()\n         base = self.item.absolute_url()\n"

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-18T16:11:45+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/6a2f4511c56695b9bda1236126b7e2f244a0a80b

Added news snippets

Files changed:
A news/113.feature.1
A news/113.feature.2

b'diff --git a/news/113.feature.1 b/news/113.feature.1\nnew file mode 100644\nindex 0000000..63ae72f\n--- /dev/null\n+++ b/news/113.feature.1\n@@ -0,0 +1,2 @@\n+Creating a tag no longer generates the actual scale.\n+[maurits]\ndiff --git a/news/113.feature.2 b/news/113.feature.2\nnew file mode 100644\nindex 0000000..6f70fb6\n--- /dev/null\n+++ b/news/113.feature.2\n@@ -0,0 +1,5 @@\n+Add ``@@images-test`` page for Editors.\n+This shows various variants from the image field of the current context.\n+It shows a list of stored scales.\n+It allows purging the stored scales.\n+[maurits]\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-18T16:24:50+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/6b90fa02b99ddd925d267ea5244d4752c6fc1d1b

images-test: sort the scales nicely

Files changed:
M plone/namedfile/scaling.py

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 30954d8..e848fb4 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -599,6 +599,16 @@ def tag(self, brain, fieldname, **kwargs):\n         return tag\n \n \n+def _scale_sort_key(item):\n+    key, value = item\n+    try:\n+        fieldname, width, uid = key.split("-")\n+        width = int(width)\n+    except (ValueError, IndexError, TypeError):\n+        return (key, )\n+    return (fieldname, width, uid)\n+\n+\n class ImagesTest(BrowserView):\n     """View for Editors to check how images look and what scales are stored."""\n \n@@ -607,7 +617,7 @@ def storage(self):\n         return getMultiAdapter((self.context, None), IImageScaleStorage)\n \n     def stored_scales(self):\n-        return sorted(self.storage.items())\n+        return sorted(self.storage.items(), key=_scale_sort_key)\n \n     def clear(self):\n         """Clear the scales.\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-18T17:11:45+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/291b85e24bdb361b47338b0a413b4c89d12d6446

images-test: add link to open image scale in new tab.

Files changed:
M plone/namedfile/test.pt

b'diff --git a/plone/namedfile/test.pt b/plone/namedfile/test.pt\nindex 6da1f52..1588396 100644\n--- a/plone/namedfile/test.pt\n+++ b/plone/namedfile/test.pt\n@@ -13,12 +13,12 @@\n                          size context/image/getSize;\n                          image_dimension context/image/getImageSize;\n                          images context/@@images;\n+                         context_url context/absolute_url;\n                          use_MB python: size > 1024*1024;\n                          dimension python: str(image_dimension[0])+\'x\'+str(image_dimension[1]);\n                          filename python: context.image.filename;\n                          mimetype_icon python: \'mimetype-\' + content_type;\n-                         download_url python: \'{}/@@download/image/{}\'.format(context.absolute_url(), filename)\n-                                                     ">\n+                         download_url python: \'{}/@@download/image/{}\'.format(context_url, filename)">\n   <p>\n     Go to:\n     <a href="#examples">examples</a>,\n@@ -31,7 +31,7 @@\n     <h3>Thumb with info</h3>\n     <p>Standard display of Image content type, but using thumb scale</p>\n     <figure class="figure">\n-      <a tal:attributes="href string:${context/@@plone_context_state/object_url}/image_view_fullscreen"\n+      <a href="${context_url}/image_view_fullscreen"\n          tal:define="img_tag python:images.tag(\'image\', scale=\'thumb\', css_class=\'figure-img img-fluid\')"\n          >\n         <img tal:replace="structure img_tag" />\n@@ -64,7 +64,7 @@\n \n   <section class="section section-actions">\n     <a class="btn btn-primary download" href="${python:download_url}" i18n:translate="">Download</a>\n-    <a class="btn btn-primary fullscreen" href="${context/@@plone_context_state/object_url}/image_view_fullscreen"><span i18n:translate="label_click_to_view_full_image">View full-size image</span></a>\n+    <a class="btn btn-primary fullscreen" href="${context_url}/image_view_fullscreen"><span i18n:translate="label_click_to_view_full_image">View full-size image</span></a>\n   </section>\n   <hr />\n   <section id="examples">\n@@ -113,6 +113,9 @@\n               <br tal:condition="not:repeat/item/start" />\n               <code>${python:item[0]}: ${python:item[1]}</code>\n             </tal:block>\n+            <br />\n+            <a target="_blank"\n+               href="${context_url}/@@images/${uid}">Open in new tab</a>\n           </div>\n         </div>\n       </div>\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-20T17:03:41+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.namedfile/commit/50aa9b4ea11a48e87abc6e258063877b13a16389

prevent unknown keyword parameter modified

Files changed:
M plone/namedfile/scaling.py

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex e848fb4..f3f4478 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -322,6 +322,8 @@ def __call__(\n             return\n \n         parameters = self.update_parameters(**parameters)\n+        if "modified" in parameters:\n+            del parameters["modified"]\n         try:\n             result = self.handle_image(\n                 orig_value, orig_data, direction, height, width, **parameters\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-23T21:53:11+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/e0ce960b249bc8cea8eeef160905d6d082757f23

Catch TypeError when getting IPrimaryFieldInfo.

For example when adapting a Folder:

```
TypeError: http://localhost:8080/Plone/@@ajax-search
Traceback (innermost last):
  Module ZPublisher.WSGIPublisher, line 167, in transaction_pubevents
  Module ZPublisher.WSGIPublisher, line 376, in publish_module
  Module ZPublisher.WSGIPublisher, line 271, in publish
  Module ZPublisher.mapply, line 85, in mapply
  Module ZPublisher.WSGIPublisher, line 68, in call_object
  Module Products.CMFPlone.browser.search, line 288, in __call__
  Module Products.CMFPlone.browser.search, line 303, in get_image_tag
  Module plone.memoize.volatile, line 74, in replacement
  Module plone.namedfile.scaling, line 600, in tag
  Module plone.namedfile.scaling, line 582, in tag
  Module plone.namedfile.scaling, line 510, in scale
  Module plone.scale.storage, line 220, in pre_scale
  Module plone.namedfile.scaling, line 200, in get_original_value
  Module zope.component.hooks, line 135, in adapter_hook
  Module plone.dexterity.primary, line 24, in __init__
TypeError: ('Could not adapt', &lt;Folder at /Plone/news&gt;, &lt;InterfaceClass plone.rfc822.interfaces.IPrimaryFieldInfo&gt;)
```

Files changed:
M plone/namedfile/scaling.py

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex f3f4478..d6a684b 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -197,7 +197,10 @@ def get_original_value(self):\n         In most cases this will be a NamedBlobImage field.\n         """\n         if self.fieldname is None:\n-            primary = IPrimaryFieldInfo(self.context, None)\n+            try:\n+                primary = IPrimaryFieldInfo(self.context)\n+            except TypeError:\n+                return\n             if primary is None:\n                 return\n             self.fieldname = primary.fieldname\n@@ -482,7 +485,10 @@ def scale(\n         **parameters\n     ):\n         if fieldname is None:\n-            primary_field = IPrimaryFieldInfo(self.context, None)\n+            try:\n+                primary = IPrimaryFieldInfo(self.context)\n+            except TypeError:\n+                return\n             if primary_field is None:\n                 return  # 404\n             fieldname = primary_field.fieldname\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-23T22:29:30+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/25d08144ec1811c6fbc2528d1c4cc09a4bad06ab

Do call IPrimaryFieldInfo with self.context and None, like before.

This does actually return None in some cases.

Files changed:
M plone/namedfile/scaling.py

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex d6a684b..0022fdb 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -198,7 +198,7 @@ def get_original_value(self):\n         """\n         if self.fieldname is None:\n             try:\n-                primary = IPrimaryFieldInfo(self.context)\n+                primary = IPrimaryFieldInfo(self.context, None)\n             except TypeError:\n                 return\n             if primary is None:\n@@ -486,7 +486,7 @@ def scale(\n     ):\n         if fieldname is None:\n             try:\n-                primary = IPrimaryFieldInfo(self.context)\n+                primary = IPrimaryFieldInfo(self.context, None)\n             except TypeError:\n                 return\n             if primary_field is None:\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-23T22:32:38+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/af46d750c3f618f44c13c6318b27646964239401

get_original_value: return IPrimaryFieldInfo.value

Files changed:
M plone/namedfile/scaling.py

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 0022fdb..00d6eee 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -204,6 +204,7 @@ def get_original_value(self):\n             if primary is None:\n                 return\n             self.fieldname = primary.fieldname\n+            return primary.value\n         return getattr(self.context, self.fieldname, None)\n \n     def get_raw_data(self, orig_value):\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-23T22:33:21+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/070740f23c136cf567c8be701066563fe192cdac

calculate_srcset: if scale_src is None, do not treat it as dictionary.

Files changed:
M plone/namedfile/scaling.py

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 00d6eee..477f548 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -572,9 +572,10 @@ def calculate_srcset(\n                 direction=direction,\n                 **parameters\n             )\n+            if scale_src is None:\n+                continue\n             scale_src["scale"] = hdScale["scale"]\n-            if scale_src is not None:\n-                srcset.append(scale_src)\n+            srcset.append(scale_src)\n         return srcset\n \n     def tag(\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-23T22:49:35+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/06a0a5c3effa77a38e3e3c291662b760a2ef966d

Register adapter for primary field info in tests.

Files changed:
M plone/namedfile/tests/test_scaling.py

b'diff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex 6a969f5..7de7ddb 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -9,11 +9,13 @@\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n from plone.namedfile.tests import getFile\n+from plone.rfc822.interfaces import IPrimaryFieldInfo\n from plone.scale.interfaces import IScaledImageQuality\n from plone.scale.storage import IImageScaleStorage\n from six import BytesIO\n from zExceptions import Unauthorized\n from zope.annotation import IAttributeAnnotatable\n+from zope.component import adapter\n from zope.component import getGlobalSiteManager\n from zope.component import getSiteManager\n from zope.interface import implementer\n@@ -59,6 +61,19 @@ def Title(self):\n         return self.title\n \n \n+@implementer(IPrimaryFieldInfo)\n+@adapter(DummyContent)\n+class PrimaryFieldInfo(object):\n+    def __init__(self, context):\n+        self.context = context\n+        self.fieldname = "image"\n+        self.field = self.context.image\n+\n+    @property\n+    def value(self):\n+        return self.field\n+\n+\n class MockNamedImage(NamedImage):\n     _p_mtime = DateTime().millis()\n \n@@ -219,6 +234,9 @@ class ImageScalingTests(unittest.TestCase):\n     layer = PLONE_NAMEDFILE_INTEGRATION_TESTING\n \n     def setUp(self):\n+        sm = getSiteManager()\n+        sm.registerAdapter(PrimaryFieldInfo)\n+\n         data = getFile(\'image.png\')\n         item = DummyContent()\n         item.image = MockNamedImage(data, \'image/png\', u\'image.png\')\n@@ -226,6 +244,10 @@ def setUp(self):\n         self.item = self.layer[\'app\'].item\n         self.scaling = ImageScaling(self.item, None)\n \n+    def tearDown(self):\n+        sm = getSiteManager()\n+        sm.unregisterAdapter(PrimaryFieldInfo)\n+\n     def testCreateScale(self):\n         foo = self.scaling.scale(\'image\', width=100, height=80)\n         self.assertTrue(foo.uid)\n@@ -559,6 +581,8 @@ class ImageTraverseTests(unittest.TestCase):\n     layer = PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        sm = getSiteManager()\n+        sm.registerAdapter(PrimaryFieldInfo)\n         self.app = self.layer[\'app\']\n         data = getFile(\'image.png\')\n         item = DummyContent()\n@@ -569,6 +593,8 @@ def setUp(self):\n \n     def tearDown(self):\n         ImageScaling._sizes = self._orig_sizes\n+        sm = getSiteManager()\n+        sm.unregisterAdapter(PrimaryFieldInfo)\n \n     def traverse(self, path=\'\'):\n         view = self.item.unrestrictedTraverse(\'@@images\')\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-24T00:13:46+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/22f5a8aee13b43e81608d7214665246ad572d2eb

Fix undefined names in primary field code.

Files changed:
M plone/namedfile/scaling.py

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 477f548..7b3357a 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -490,9 +490,9 @@ def scale(\n                 primary = IPrimaryFieldInfo(self.context, None)\n             except TypeError:\n                 return\n-            if primary_field is None:\n+            if primary is None:\n                 return  # 404\n-            fieldname = primary_field.fieldname\n+            fieldname = primary.fieldname\n         if scale is not None:\n             if width is not None or height is not None:\n                 logger.warn(\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-24T08:47:53+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/9ef547e7f39220a8477fd9fd87de0ac966a6f842

Merge branch 'master' into pre-scale

Files changed:
A news/118.bugfix
M plone/namedfile/scaling.py

b'diff --git a/news/118.bugfix b/news/118.bugfix\nnew file mode 100644\nindex 0000000..c9e19ea\n--- /dev/null\n+++ b/news/118.bugfix\n@@ -0,0 +1,3 @@\n+Fix Unauthorized when accessing @@image/image of private image, even as Manager.\n+Fixes problem introduced in previous release.\n+[maurits]\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 7b3357a..b3acc66 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -387,7 +387,7 @@ def publishTraverse(self, request, name):\n             # otherwise `name` must refer to a field...\n             if "." in name:\n                 name, ext = name.rsplit(".", 1)\n-            value = self.guarded_orig_image(name)\n+            value = self.get_orig_image(name)\n             scale_view = self._scale_view_class(\n                 self.context, self.request, data=value, fieldname=name,\n             )\n@@ -452,8 +452,15 @@ def getImageSize(self, fieldname=None):\n         return value.getImageSize()\n \n     def guarded_orig_image(self, fieldname):\n+        # Note: you must not call this from publishTraverse.\n+        # No authentication has taken place there yet, so everyone is still anonymous.\n         return guarded_getattr(self.context, fieldname, None)\n \n+    def get_orig_image(self, fieldname):\n+        # Get the image without doing permission checks.\n+        # Use guarded_orig_image instead of you want permission checks.\n+        return getattr(self.context, fieldname, None)\n+\n     @deprecate("use getHighPixelDensityScales instead")\n     def getRetinaScales(self):\n         return getHighPixelDensityScales()\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-05-24T09:09:10+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/369d46816a96ef0eccfffd505ea6d938d956db9a

Accept fieldname in get_original_value.

Otherwise it depends on having self.fieldname, which is not set here.
Then it falls back to IPrimaryFieldInfo.
In case of a news item with lead image, this does not find anything.

Do not register adapter for IPrimaryFieldInfo in functional tests, only in the integration tests.
I added this registration yesterday to fix some test failures.
I did not see that the test failures were problems that actually needed fixing.
I do that in this commit, plus one in plone.scale.

Files changed:
M plone/namedfile/scaling.py
M plone/namedfile/tests/test_scaling.py

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex b3acc66..1cfff70 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -191,21 +191,22 @@ def __init__(self, context):\n         # fieldname will be set for real in the __call__ method.\n         self.fieldname = None\n \n-    def get_original_value(self):\n+    def get_original_value(self, fieldname=None):\n         """Get the image value.\n \n         In most cases this will be a NamedBlobImage field.\n         """\n-        if self.fieldname is None:\n-            try:\n-                primary = IPrimaryFieldInfo(self.context, None)\n-            except TypeError:\n-                return\n-            if primary is None:\n-                return\n-            self.fieldname = primary.fieldname\n-            return primary.value\n-        return getattr(self.context, self.fieldname, None)\n+        fieldname = fieldname or self.fieldname\n+        if fieldname is not None:\n+            return getattr(self.context, fieldname, None)\n+        try:\n+            primary = IPrimaryFieldInfo(self.context, None)\n+        except TypeError:\n+            return\n+        if primary is None:\n+            return\n+        self.fieldname = primary.fieldname\n+        return primary.value\n \n     def get_raw_data(self, orig_value):\n         """Get the raw image data.\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex 7de7ddb..89ab3b7 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -581,8 +581,6 @@ class ImageTraverseTests(unittest.TestCase):\n     layer = PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        sm = getSiteManager()\n-        sm.registerAdapter(PrimaryFieldInfo)\n         self.app = self.layer[\'app\']\n         data = getFile(\'image.png\')\n         item = DummyContent()\n@@ -593,8 +591,6 @@ def setUp(self):\n \n     def tearDown(self):\n         ImageScaling._sizes = self._orig_sizes\n-        sm = getSiteManager()\n-        sm.unregisterAdapter(PrimaryFieldInfo)\n \n     def traverse(self, path=\'\'):\n         view = self.item.unrestrictedTraverse(\'@@images\')\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-01T21:04:54+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.namedfile/commit/163ae3476f5cc0ed46f93e824668ac4ca67dbe6c

black formating

Files changed:
M plone/namedfile/scaling.py

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 1cfff70..d57cd41 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -32,6 +32,7 @@\n from zope.publisher.interfaces import NotFound\n from zope.traversing.interfaces import ITraversable\n from zope.traversing.interfaces import TraversalError\n+from plone.outputfilters.utils import Img2PictureTag\n \n import functools\n import logging\n@@ -43,7 +44,7 @@\n \n \n class ImageScale(BrowserView):\n-    """ view used for rendering image scales """\n+    """view used for rendering image scales"""\n \n     # Grant full access to this view even if the object being viewed is\n     # protected\n@@ -68,8 +69,8 @@ def __init__(self, context, request, **info):\n             name = info["uid"]\n         else:\n             name = info["fieldname"]\n-        self.__name__ = u"{0}.{1}".format(name, extension)\n-        self.url = u"{0}/@@images/{1}".format(url, self.__name__)\n+        self.__name__ = "{0}.{1}".format(name, extension)\n+        self.url = "{0}/@@images/{1}".format(url, self.__name__)\n         self.srcset = info.get("srcset", [])\n \n     def absolute_url(self):\n@@ -80,7 +81,7 @@ def srcset_attribute(self):\n         extension = self.data.contentType.split("/")[-1].lower()\n         for scale in self.srcset:\n             _srcset_attr.append(\n-                u"{0}/@@images/{1}.{2} {3}x".format(\n+                "{0}/@@images/{1}.{2} {3}x".format(\n                     self.context.absolute_url(), scale["uid"], extension, scale["scale"]\n                 )\n             )\n@@ -94,10 +95,9 @@ def tag(\n         alt=_marker,\n         css_class=None,\n         title=_marker,\n-        **kwargs\n+        **kwargs,\n     ):\n-        """Create a tag including scale\n-        """\n+        """Create a tag including scale"""\n         if height is _marker:\n             height = getattr(self, "height", self.data._height)\n         if width is _marker:\n@@ -131,17 +131,17 @@ def tag(\n                 v = str(v)\n             elif isinstance(v, six.binary_type):\n                 v = six.text_type(v, "utf8")\n-            parts.append(u"{0}={1}".format(k, quoteattr(v)))\n+            parts.append("{0}={1}".format(k, quoteattr(v)))\n         parts.append("/>")\n \n-        return u" ".join(parts)\n+        return " ".join(parts)\n \n     def validate_access(self):\n         fieldname = getattr(self.data, "fieldname", getattr(self, "fieldname", None))\n         guarded_getattr(self.context, fieldname)\n \n     def index_html(self):\n-        """ download the image """\n+        """download the image"""\n         self.validate_access()\n         set_headers(self.data, self.request.response)\n         return stream_data(self.data)\n@@ -159,8 +159,8 @@ def __call__(self):\n         return self\n \n     def HEAD(self, REQUEST, RESPONSE=None):\n-        """ Obtain metainformation about the image implied by the request\n-            without transfer of the image itself\n+        """Obtain metainformation about the image implied by the request\n+        without transfer of the image itself\n         """\n         self.validate_access()\n         set_headers(self.data, REQUEST.response)\n@@ -290,7 +290,7 @@ def __call__(\n         height=None,\n         width=None,\n         scale=None,\n-        **parameters\n+        **parameters,\n     ):\n \n         """Factory for image scales`.\n@@ -347,7 +347,9 @@ def __call__(\n         data, format_, dimensions = result\n         mimetype = "image/{0}".format(format_.lower())\n         value = orig_value.__class__(\n-            data, contentType=mimetype, filename=orig_value.filename,\n+            data,\n+            contentType=mimetype,\n+            filename=orig_value.filename,\n         )\n         value.fieldname = self.fieldname\n \n@@ -356,7 +358,7 @@ def __call__(\n \n @implementer(ITraversable, IPublishTraverse)\n class ImageScaling(BrowserView):\n-    """ view used for generating (and storing) image scales """\n+    """view used for generating (and storing) image scales"""\n \n     # Ignore some stacks to help with accessing via webdav, otherwise you get a\n     # 404 NotFound error.\n@@ -364,7 +366,7 @@ class ImageScaling(BrowserView):\n     _scale_view_class = ImageScale\n \n     def publishTraverse(self, request, name):\n-        """ used for traversal via publisher, i.e. when using as a url """\n+        """used for traversal via publisher, i.e. when using as a url"""\n         stack = request.get("TraversalRequestNameStack")\n         image = None\n         if stack and stack[-1] not in self._ignored_stacks:\n@@ -390,18 +392,24 @@ def publishTraverse(self, request, name):\n                 name, ext = name.rsplit(".", 1)\n             value = self.get_orig_image(name)\n             scale_view = self._scale_view_class(\n-                self.context, self.request, data=value, fieldname=name,\n+                self.context,\n+                self.request,\n+                data=value,\n+                fieldname=name,\n             )\n             return scale_view\n         raise NotFound(self, name, self.request)\n \n     def traverse(self, name, furtherPath):\n-        """ used for path traversal, i.e. in zope page templates """\n+        """used for path traversal, i.e. in zope page templates"""\n         # validate access\n         value = self.guarded_orig_image(name)\n         if not furtherPath:\n             image = self._scale_view_class(\n-                self.context, self.request, data=value, fieldname=name,\n+                self.context,\n+                self.request,\n+                data=value,\n+                fieldname=name,\n             )\n         else:\n             return ImmutableTraverser(self.scale(name, furtherPath[-1], pre=True))\n@@ -491,7 +499,7 @@ def scale(\n         direction="thumbnail",\n         pre=False,\n         include_srcset=None,\n-        **parameters\n+        **parameters,\n     ):\n         if fieldname is None:\n             try:\n@@ -516,7 +524,7 @@ def scale(\n             alsoProvides(self.request, IDisableCSRFProtection)\n         storage = getMultiAdapter(\n             (self.context, functools.partial(self.modified, fieldname)),\n-            IImageScaleStorage\n+            IImageScaleStorage,\n         )\n         if pre:\n             scale_method = storage.pre_scale\n@@ -528,7 +536,7 @@ def scale(\n             width=width,\n             direction=direction,\n             scale=scale,\n-            **parameters\n+            **parameters,\n         )\n         if info is None:\n             return  # 404\n@@ -547,7 +555,7 @@ def scale(\n                 direction=direction,\n                 scale=scale,\n                 storage=storage,\n-                **parameters\n+                **parameters,\n             )\n         info["fieldname"] = fieldname\n         scale_view = self._scale_view_class(self.context, self.request, **info)\n@@ -561,7 +569,7 @@ def calculate_srcset(\n         width=None,\n         direction="thumbnail",\n         storage=None,\n-        **parameters\n+        **parameters,\n     ):\n         srcset = []\n         if storage is None:\n@@ -578,7 +586,7 @@ def calculate_srcset(\n                 height=height * hdScale["scale"] if height else height,\n                 width=width * hdScale["scale"] if width else width,\n                 direction=direction,\n-                **parameters\n+                **parameters,\n             )\n             if scale_src is None:\n                 continue\n@@ -593,7 +601,7 @@ def tag(\n         height=None,\n         width=None,\n         direction="thumbnail",\n-        **kwargs\n+        **kwargs,\n     ):\n         scale = self.scale(fieldname, scale, height, width, direction, pre=True)\n         return scale.tag(**kwargs) if scale else None\n@@ -623,7 +631,7 @@ def _scale_sort_key(item):\n         fieldname, width, uid = key.split("-")\n         width = int(width)\n     except (ValueError, IndexError, TypeError):\n-        return (key, )\n+        return (key,)\n     return (fieldname, width, uid)\n \n \n@@ -638,8 +646,7 @@ def stored_scales(self):\n         return sorted(self.storage.items(), key=_scale_sort_key)\n \n     def clear(self):\n-        """Clear the scales.\n-        """\n+        """Clear the scales."""\n         PostOnly(self.request)\n         self.storage.clear()\n         url = self.context.absolute_url()\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-01T21:06:01+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.namedfile/commit/0b2dd7be9f39b0a0e77f2249dfc7a7db36730891

Add picture method to ImageScaling and include it in test.pt

Files changed:
M plone/namedfile/scaling.py
M plone/namedfile/test.pt

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex d57cd41..f399656 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -606,6 +606,32 @@ def tag(\n         scale = self.scale(fieldname, scale, height, width, direction, pre=True)\n         return scale.tag(**kwargs) if scale else None\n \n+    def picture(\n+        self,\n+        fieldname=None,\n+        picture_variant=None,\n+        alt=_marker,\n+        css_class=None,\n+        title=_marker,\n+        **kwargs,\n+    ):\n+        img2picturetag = Img2PictureTag()\n+        picture_variant_config = img2picturetag.image_srcsets.get(picture_variant)\n+        if not picture_variant_config:\n+            # raise NotFound(self, picture_variant, self.request)\n+            logger.warn(\n+                "Could not find the given picture_variant {0}, leave tag untouched!".format(\n+                    picture_variant\n+                )\n+            )\n+            return\n+        sourceset = picture_variant_config.get("sourceset")\n+        scale = self.scale(fieldname, sourceset[-1].get("scale"), pre=True)\n+        attributes = {}\n+        attributes["class"] = css_class and [css_class] or []\n+        attributes["src"] = scale.url\n+        return img2picturetag.create_picture_tag(sourceset, attributes)\n+\n \n class NavigationRootScaling(ImageScaling):\n     def _scale_cachekey(method, self, brain, fieldname, **kwargs):\ndiff --git a/plone/namedfile/test.pt b/plone/namedfile/test.pt\nindex 1588396..901d661 100644\n--- a/plone/namedfile/test.pt\n+++ b/plone/namedfile/test.pt\n@@ -96,6 +96,13 @@\n       <br /><code tal:content="img_tag" />\n     </figure>\n \n+    <h3 id="picture_tag">Picture Tag</h3>\n+    <p>\n+      Generate a picture tag from configured picture_variant.\n+    </p>\n+    <picture\n+      tal:replace="structure python:images.picture(\'image\', picture_variant=\'medium\')" />\n+\n   </section>\n \n   <section class="section" id="stored">\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-02T10:34:30+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.namedfile/commit/e085b96d608abcbb4db6222ce5ea97e6b5222c13

Set width and height in picture method, update examples in test.pt

Files changed:
M plone/namedfile/scaling.py
M plone/namedfile/test.pt

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex f399656..f614b9e 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -630,6 +630,8 @@ def picture(\n         attributes = {}\n         attributes["class"] = css_class and [css_class] or []\n         attributes["src"] = scale.url\n+        attributes["width"] = scale.width\n+        attributes["height"] = scale.height\n         return img2picturetag.create_picture_tag(sourceset, attributes)\n \n \ndiff --git a/plone/namedfile/test.pt b/plone/namedfile/test.pt\nindex 901d661..f264054 100644\n--- a/plone/namedfile/test.pt\n+++ b/plone/namedfile/test.pt\n@@ -96,13 +96,33 @@\n       <br /><code tal:content="img_tag" />\n     </figure>\n \n-    <h3 id="picture_tag">Picture Tag</h3>\n+    <h3 id="picture_tag_large">Picture Tag Large</h3>\n     <p>\n-      Generate a picture tag from configured picture_variant.\n+      Generate a picture tag from configured picture_variant `large`.\n+    </p>\n+    <p>\n+      <picture\n+        tal:replace="structure python:images.picture(\'image\', picture_variant=\'large\')" />\n     </p>\n-    <picture\n-      tal:replace="structure python:images.picture(\'image\', picture_variant=\'medium\')" />\n \n+    <h3 id="picture_tag_medium">Picture Tag Medium</h3>\n+    <p>\n+      Generate a picture tag from configured picture_variant `medium`.\n+      This picture tag contains multiple source tags with media queries for art direction.\n+    </p>\n+    <p>\n+      <picture\n+        tal:replace="structure python:images.picture(\'image\', picture_variant=\'medium\')" />\n+    </p>\n+\n+    <h3 id="picture_tag_small">Picture Tag Small</h3>\n+    <p>\n+      Generate a picture tag from configured picture_variant `small`.\n+    </p>\n+    <p>\n+      <picture\n+        tal:replace="structure python:images.picture(\'image\', picture_variant=\'small\')" />\n+    </p>\n   </section>\n \n   <section class="section" id="stored">\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-02T11:10:36+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.namedfile/commit/d75880a6369b227d25fc19aa7cb7bda7d8bd0cc0

Add title and alt attributes, add changelog entry

Files changed:
A news/113.feature.3
M plone/namedfile/scaling.py
M plone/namedfile/test.pt

b'diff --git a/news/113.feature.3 b/news/113.feature.3\nnew file mode 100644\nindex 0000000..8af321b\n--- /dev/null\n+++ b/news/113.feature.3\n@@ -0,0 +1,2 @@\n+Add picture method to to ImageScaling and include it in @@image-test\n+[MrTango]\n\\ No newline at end of file\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex f614b9e..ba3c7e4 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -610,7 +610,7 @@ def picture(\n         self,\n         fieldname=None,\n         picture_variant=None,\n-        alt=_marker,\n+        alt=None,\n         css_class=None,\n         title=_marker,\n         **kwargs,\n@@ -632,6 +632,12 @@ def picture(\n         attributes["src"] = scale.url\n         attributes["width"] = scale.width\n         attributes["height"] = scale.height\n+        if title is _marker:\n+            attributes["title"] = self.context.Title()\n+        elif title:\n+            attributes["title"] = title\n+        if alt:\n+            attributes["alt"] = alt\n         return img2picturetag.create_picture_tag(sourceset, attributes)\n \n \ndiff --git a/plone/namedfile/test.pt b/plone/namedfile/test.pt\nindex f264054..ffa86ef 100644\n--- a/plone/namedfile/test.pt\n+++ b/plone/namedfile/test.pt\n@@ -121,7 +121,16 @@\n     </p>\n     <p>\n       <picture\n-        tal:replace="structure python:images.picture(\'image\', picture_variant=\'small\')" />\n+        tal:replace="structure python:images.picture(\'image\', picture_variant=\'small\', title=\'\')" />\n+    </p>\n+\n+    <h3 id="picture_tag_small">Picture Tag Small with title/alt</h3>\n+    <p>\n+      Generate a picture tag from configured picture_variant `small` wit title and alt attributess set.\n+    </p>\n+    <p>\n+      <picture\n+        tal:replace="structure python:images.picture(\'image\', picture_variant=\'small\', title=\'Custom picture title\', alt=\'alternative picture text\')" />\n     </p>\n   </section>\n \n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-03T19:42:26+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.namedfile/commit/430b5957fdc3c0b7af912e684b09b07451e4c2a8

move utils.Img2PictureTag from outputfilter to namedfile.picture

Files changed:
A plone/namedfile/picture.py
M plone/namedfile/scaling.py

b'diff --git a/plone/namedfile/picture.py b/plone/namedfile/picture.py\nnew file mode 100644\nindex 0000000..54d5f14\n--- /dev/null\n+++ b/plone/namedfile/picture.py\n@@ -0,0 +1,119 @@\n+import logging\n+import re\n+\n+from plone.base.interfaces import IImagingSchema\n+from plone.outputfilters.browser.resolveuid import uuidToObject\n+from plone.registry.interfaces import IRegistry\n+from zope.component import getUtility\n+from bs4 import BeautifulSoup\n+\n+logger = logging.getLogger("plone.outputfilter.image_srcset")\n+appendix_re = re.compile(\'^(.*)([?#].*)$\')\n+resolveuid_re = re.compile(\'^[./]*resolve[Uu]id/([^/]*)/?(.*)$\')\n+\n+\n+class Img2PictureTag(object):\n+    @property\n+    def allowed_scales(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n+        return settings.allowed_sizes\n+\n+    @property\n+    def image_srcsets(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n+        return settings.image_srcsets\n+\n+    def get_scale_name(self, scale_line):\n+        parts = scale_line.split(" ")\n+        return parts and parts[0] or ""\n+\n+    def get_scale_width(self, scale):\n+        """get width from allowed_scales line\n+        large 800:65536\n+        """\n+        for s in self.allowed_scales:\n+            parts = s.split(" ")\n+            if not parts:\n+                continue\n+            if parts[0] == scale:\n+                dimentions = parts[1].split(":")\n+                if not dimentions:\n+                    continue\n+                return dimentions[0]\n+\n+    def create_picture_tag(self, sourceset, attributes, uid=None, fieldname=None, resolve_urls=False):\n+        """Converts the img tag to a picture tag with srcset definition"""\n+        src = attributes.get("src")\n+        if not uid and not src:\n+            raise TypeError("Either uid or attributes[\'src\'] need to be given.")\n+        soup = BeautifulSoup("", "html.parser")\n+        allowed_scales = self.allowed_scales\n+        if uid:\n+            obj = uuidToObject(uid)\n+        else:\n+            obj = self.resolve_uid_url(src)\n+        picture_tag = soup.new_tag("picture")\n+        css_classes = attributes.get("class")\n+        if "captioned" in css_classes:\n+            picture_tag["class"] = "captioned"\n+        for i, source in enumerate(sourceset):\n+            target_scale = source["scale"]\n+            media = source.get("media")\n+\n+            additional_scales = source.get("additionalScales", None)\n+            if additional_scales is None:\n+                additional_scales = [\n+                    self.get_scale_name(s) for s in allowed_scales if s != target_scale\n+                ]\n+            source_scales = [target_scale] + additional_scales\n+            source_srcset = []\n+            for scale in source_scales:\n+                if resolve_urls and obj:\n+                    scale_view = obj.unrestrictedTraverse(\'@@images\', None)\n+                    scale_obj = scale_view.scale(fieldname, scale, pre=True)\n+                    scale_url = scale_obj.url\n+                elif src:\n+                    scale_url = self.update_src_scale(src=src, scale=scale)\n+                scale_width = self.get_scale_width(scale)\n+                source_srcset.append("{0} {1}w".format(scale_url, scale_width))\n+            source_tag = soup.new_tag("source", srcset=",\\n".join(source_srcset))\n+            if media:\n+                source_tag["media"] = media\n+            picture_tag.append(source_tag)\n+            if i == len(sourceset) - 1:\n+                scale_view = obj.unrestrictedTraverse(\'@@images\', None)\n+                scale_obj = scale_view.scale(fieldname, target_scale, pre=True)\n+                scale_url = scale_obj.url\n+                img_tag = soup.new_tag(\n+                    "img",\n+                    src=self.update_src_scale(src=scale_url, scale=target_scale),\n+                )\n+                for k, attr in attributes.items():\n+                    if k in ["src", "srcset"]:\n+                        continue\n+                    img_tag.attrs[k] = attr\n+                img_tag["loading"] = "lazy"\n+                picture_tag.append(img_tag)\n+        return picture_tag\n+\n+    def resolve_uid_url(self, href):\n+        obj = None\n+        subpath = href\n+        match = resolveuid_re.match(subpath)\n+        if match is not None:\n+            uid, _subpath = match.groups()\n+            obj = uuidToObject(uid)\n+        return obj\n+\n+    def update_src_scale(self, src, scale):\n+        parts = src.split("/")\n+        if "." in parts[-1]:\n+            field_name = parts[-1].split("-")[0]\n+            src_scale =  "/".join(parts[:-1]) + "/{0}/{1}".format(field_name, scale)\n+            src_scale\n+        else:\n+            src_scale = "/".join(parts[:-1]) + "/{}".format(scale)\n+        print(src_scale)\n+        return src_scale\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex ba3c7e4..acf2672 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -11,6 +11,7 @@\n from plone.namedfile.utils import getHighPixelDensityScales\n from plone.namedfile.utils import set_headers\n from plone.namedfile.utils import stream_data\n+from plone.namedfile.picture import Img2PictureTag\n from plone.protect.interfaces import IDisableCSRFProtection\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from plone.scale.interfaces import IImageScaleFactory\n@@ -32,7 +33,6 @@\n from zope.publisher.interfaces import NotFound\n from zope.traversing.interfaces import ITraversable\n from zope.traversing.interfaces import TraversalError\n-from plone.outputfilters.utils import Img2PictureTag\n \n import functools\n import logging\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-03T19:43:03+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.namedfile/commit/cc1036c4ff4ec8c3d59875d0a36d4e339f71d662

use PloneSandboxLayer for testing

Files changed:
M plone/namedfile/testing.py

b'diff --git a/plone/namedfile/testing.py b/plone/namedfile/testing.py\nindex a1c3885..db6c295 100644\n--- a/plone/namedfile/testing.py\n+++ b/plone/namedfile/testing.py\n@@ -1,35 +1,31 @@\n # -*- coding: utf-8 -*-\n-from plone.testing import Layer\n-from plone.testing import publisher\n-from plone.testing import zca\n+from plone.app.testing import applyProfile\n+from plone.app.testing import FunctionalTesting\n+from plone.app.testing import IntegrationTesting\n+from plone.app.testing import PLONE_FIXTURE\n+from plone.app.testing import PloneSandboxLayer\n \n-from plone.testing import zope\n-from zope.configuration import xmlconfig\n \n+class NamedFileTestLayer(PloneSandboxLayer):\n \n-class NamedFileTestLayer(Layer):\n-\n-    defaultBases = (zope.STARTUP, publisher.PUBLISHER_DIRECTIVES)\n-\n-    def setUp(self):\n-        zca.pushGlobalRegistry()\n+    defaultBases = (PLONE_FIXTURE,)\n \n+    def setUpZope(self, app, configurationContext):\n         import plone.namedfile\n-        xmlconfig.file(\'testing.zcml\', plone.namedfile)\n+        self.loadZCML(package=plone.namedfile, name="testing.zcml")\n \n-    def tearDown(self):\n-        # Zap the stacked zca context\n-        zca.popGlobalRegistry()\n+    def setUpPloneSite(self, portal):\n+        applyProfile(portal, \'plone.outputfilters:default\')\n \n \n PLONE_NAMEDFILE_FIXTURE = NamedFileTestLayer()\n \n-PLONE_NAMEDFILE_INTEGRATION_TESTING = zope.IntegrationTesting(\n+PLONE_NAMEDFILE_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(PLONE_NAMEDFILE_FIXTURE, ),\n-    name=\'plone.namedfile:NamedFileTestLayerIntegration\',\n+    name=\'plone.namedfile:Integration\',\n )\n \n-PLONE_NAMEDFILE_FUNCTIONAL_TESTING = zope.FunctionalTesting(\n+PLONE_NAMEDFILE_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PLONE_NAMEDFILE_FIXTURE, ),\n-    name=\'plone.namedfile:NamedFileTestLayerFunctional\',\n+    name=\'plone.namedfile:Functional\',\n )\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-03T19:43:40+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.namedfile/commit/87649137a1731acba98d68d211c4a0a7e0008e86

use resolve_urls and uid params for create_picture_tag

Files changed:
M plone/namedfile/scaling.py
M plone/namedfile/tests/test_scaling.py

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex acf2672..b9b21d9 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -638,7 +638,7 @@ def picture(\n             attributes["title"] = title\n         if alt:\n             attributes["alt"] = alt\n-        return img2picturetag.create_picture_tag(sourceset, attributes)\n+        return img2picturetag.create_picture_tag(sourceset, attributes, resolve_urls=True, uid=scale.context.UID(), fieldname=fieldname).prettify()\n \n \n class NavigationRootScaling(ImageScaling):\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex 89ab3b7..cbea839 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -434,6 +434,16 @@ def testGetRetinaScaleByHeightOnly(self):\n         groups = re.match(expected, tag).groups()\n         self.assertTrue(groups, tag)\n \n+    def testGetPictureTagByName(self):\n+        tag = self.scaling.picture(\'image\', picture_variant=\'medium\', resolve_links=True)\n+        base = self.item.absolute_url()\n+        expected = (\n+            r\'<picture>.*<source srcset=\\"http://nohost/item/@@images\'\n+        )\n+        groups = re.match(expected, tag, flags=re.S|re.M).groups()\n+        print(tag)\n+        #self.assertTrue(groups, tag)\n+\n     def testGetUnknownScale(self):\n         foo = self.scaling.scale(\'image\', scale=\'foo?\')\n         self.assertEqual(foo, None)\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-04T00:11:13+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/3bd293cc0803c0c47e3a6802c8d2c8442a90f9e8

Tests: add UID to DummyContent and patch uuidToObject.

This does a very small start for fixing the tests.

Files changed:
M plone/namedfile/tests/test_scaling.py

b'diff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex cbea839..01a3586 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from contextlib import contextmanager\n from DateTime import DateTime\n from OFS.SimpleItem import SimpleItem\n from plone.namedfile.field import NamedImage as NamedImageField\n@@ -13,6 +14,7 @@\n from plone.scale.interfaces import IScaledImageQuality\n from plone.scale.storage import IImageScaleStorage\n from six import BytesIO\n+from unittest.mock import patch\n from zExceptions import Unauthorized\n from zope.annotation import IAttributeAnnotatable\n from zope.component import adapter\n@@ -50,6 +52,14 @@ def assertImage(testcase, data, format_, size):\n     testcase.assertEqual(image.size, size)\n \n \n+@contextmanager\n+def patch_uuidToObject(value=None):\n+    import plone.namedfile.picture\n+\n+    with patch.object(plone.namedfile.picture, "uuidToObject", return_value=value):\n+        yield\n+\n+\n @implementer(IAttributeAnnotatable, IHasImage)\n class DummyContent(SimpleItem):\n     image = None\n@@ -60,6 +70,9 @@ class DummyContent(SimpleItem):\n     def Title(self):\n         return self.title\n \n+    def UID(self):\n+        return "dummy_uuid"\n+\n \n @implementer(IPrimaryFieldInfo)\n @adapter(DummyContent)\n@@ -435,7 +448,8 @@ def testGetRetinaScaleByHeightOnly(self):\n         self.assertTrue(groups, tag)\n \n     def testGetPictureTagByName(self):\n-        tag = self.scaling.picture(\'image\', picture_variant=\'medium\', resolve_links=True)\n+        with patch_uuidToObject(self.item):\n+            tag = self.scaling.picture(\'image\', picture_variant=\'medium\', resolve_links=True)\n         base = self.item.absolute_url()\n         expected = (\n             r\'<picture>.*<source srcset=\\"http://nohost/item/@@images\'\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-07T14:44:40+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.namedfile/commit/fe0850c9c67e2cd48eca69552dd4984de810088d

Revert "use PloneSandboxLayer for testing"

This reverts commit cc1036c4ff4ec8c3d59875d0a36d4e339f71d662.

Files changed:
M plone/namedfile/testing.py

b'diff --git a/plone/namedfile/testing.py b/plone/namedfile/testing.py\nindex db6c295..a1c3885 100644\n--- a/plone/namedfile/testing.py\n+++ b/plone/namedfile/testing.py\n@@ -1,31 +1,35 @@\n # -*- coding: utf-8 -*-\n-from plone.app.testing import applyProfile\n-from plone.app.testing import FunctionalTesting\n-from plone.app.testing import IntegrationTesting\n-from plone.app.testing import PLONE_FIXTURE\n-from plone.app.testing import PloneSandboxLayer\n+from plone.testing import Layer\n+from plone.testing import publisher\n+from plone.testing import zca\n \n+from plone.testing import zope\n+from zope.configuration import xmlconfig\n \n-class NamedFileTestLayer(PloneSandboxLayer):\n \n-    defaultBases = (PLONE_FIXTURE,)\n+class NamedFileTestLayer(Layer):\n+\n+    defaultBases = (zope.STARTUP, publisher.PUBLISHER_DIRECTIVES)\n+\n+    def setUp(self):\n+        zca.pushGlobalRegistry()\n \n-    def setUpZope(self, app, configurationContext):\n         import plone.namedfile\n-        self.loadZCML(package=plone.namedfile, name="testing.zcml")\n+        xmlconfig.file(\'testing.zcml\', plone.namedfile)\n \n-    def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.outputfilters:default\')\n+    def tearDown(self):\n+        # Zap the stacked zca context\n+        zca.popGlobalRegistry()\n \n \n PLONE_NAMEDFILE_FIXTURE = NamedFileTestLayer()\n \n-PLONE_NAMEDFILE_INTEGRATION_TESTING = IntegrationTesting(\n+PLONE_NAMEDFILE_INTEGRATION_TESTING = zope.IntegrationTesting(\n     bases=(PLONE_NAMEDFILE_FIXTURE, ),\n-    name=\'plone.namedfile:Integration\',\n+    name=\'plone.namedfile:NamedFileTestLayerIntegration\',\n )\n \n-PLONE_NAMEDFILE_FUNCTIONAL_TESTING = FunctionalTesting(\n+PLONE_NAMEDFILE_FUNCTIONAL_TESTING = zope.FunctionalTesting(\n     bases=(PLONE_NAMEDFILE_FIXTURE, ),\n-    name=\'plone.namedfile:Functional\',\n+    name=\'plone.namedfile:NamedFileTestLayerFunctional\',\n )\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-07T17:24:39+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.namedfile/commit/8d0567ee3cdd194316fe81dc26fc6610173b956c

rename image_srcsets to picture_variants, fix captioning

Files changed:
M plone/namedfile/picture.py
M plone/namedfile/scaling.py
M plone/namedfile/tests/test_scaling.py

b'diff --git a/plone/namedfile/picture.py b/plone/namedfile/picture.py\nindex 54d5f14..3e9aed7 100644\n--- a/plone/namedfile/picture.py\n+++ b/plone/namedfile/picture.py\n@@ -7,9 +7,9 @@\n from zope.component import getUtility\n from bs4 import BeautifulSoup\n \n-logger = logging.getLogger("plone.outputfilter.image_srcset")\n-appendix_re = re.compile(\'^(.*)([?#].*)$\')\n-resolveuid_re = re.compile(\'^[./]*resolve[Uu]id/([^/]*)/?(.*)$\')\n+logger = logging.getLogger("plone.outputfilter.picture_variant")\n+appendix_re = re.compile("^(.*)([?#].*)$")\n+resolveuid_re = re.compile("^[./]*resolve[Uu]id/([^/]*)/?(.*)$")\n \n \n class Img2PictureTag(object):\n@@ -20,10 +20,10 @@ def allowed_scales(self):\n         return settings.allowed_sizes\n \n     @property\n-    def image_srcsets(self):\n+    def picture_variants(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n-        return settings.image_srcsets\n+        return settings.picture_variants\n \n     def get_scale_name(self, scale_line):\n         parts = scale_line.split(" ")\n@@ -43,8 +43,12 @@ def get_scale_width(self, scale):\n                     continue\n                 return dimentions[0]\n \n-    def create_picture_tag(self, sourceset, attributes, uid=None, fieldname=None, resolve_urls=False):\n-        """Converts the img tag to a picture tag with srcset definition"""\n+    def create_picture_tag(\n+        self, sourceset, attributes, uid=None, fieldname=None, resolve_urls=False\n+    ):\n+        """Converts the img tag to a picture tag with picture_variant definition"""\n+        width = None\n+        height = None\n         src = attributes.get("src")\n         if not uid and not src:\n             raise TypeError("Either uid or attributes[\'src\'] need to be given.")\n@@ -55,11 +59,12 @@ def create_picture_tag(self, sourceset, attributes, uid=None, fieldname=None, re\n         else:\n             obj = self.resolve_uid_url(src)\n         picture_tag = soup.new_tag("picture")\n-        css_classes = attributes.get("class")\n+        css_classes = attributes.get("class", [])\n         if "captioned" in css_classes:\n             picture_tag["class"] = "captioned"\n         for i, source in enumerate(sourceset):\n             target_scale = source["scale"]\n+            print(f"target_scale: {target_scale}")\n             media = source.get("media")\n \n             additional_scales = source.get("additionalScales", None)\n@@ -71,10 +76,14 @@ def create_picture_tag(self, sourceset, attributes, uid=None, fieldname=None, re\n             source_srcset = []\n             for scale in source_scales:\n                 if resolve_urls and obj:\n-                    scale_view = obj.unrestrictedTraverse(\'@@images\', None)\n+                    scale_view = obj.unrestrictedTraverse("@@images", None)\n                     scale_obj = scale_view.scale(fieldname, scale, pre=True)\n                     scale_url = scale_obj.url\n-                elif src:\n+                else:\n+                    # obj = self.resolve_uid_url(src)\n+                    # scale_view = obj.unrestrictedTraverse("@@images", None)\n+                    # scale_obj = scale_view.scale(fieldname, scale, pre=True)\n+                    # scale_url = scale_obj.url\n                     scale_url = self.update_src_scale(src=src, scale=scale)\n                 scale_width = self.get_scale_width(scale)\n                 source_srcset.append("{0} {1}w".format(scale_url, scale_width))\n@@ -83,18 +92,30 @@ def create_picture_tag(self, sourceset, attributes, uid=None, fieldname=None, re\n                 source_tag["media"] = media\n             picture_tag.append(source_tag)\n             if i == len(sourceset) - 1:\n-                scale_view = obj.unrestrictedTraverse(\'@@images\', None)\n-                scale_obj = scale_view.scale(fieldname, target_scale, pre=True)\n-                scale_url = scale_obj.url\n-                img_tag = soup.new_tag(\n-                    "img",\n-                    src=self.update_src_scale(src=scale_url, scale=target_scale),\n-                )\n+                if resolve_urls and obj:\n+                    scale_view = obj.unrestrictedTraverse("@@images", None)\n+                    scale_obj = scale_view.scale(fieldname, target_scale, pre=True)\n+                    scale_url = scale_obj.url\n+                    width = scale_obj.width\n+                    height = scale_obj.height\n+                else:\n+                    # obj = self.resolve_uid_url(src)\n+                    # scale_view = obj.unrestrictedTraverse("@@images", None)\n+                    # scale_obj = scale_view.scale(fieldname, target_scale, pre=True)\n+                    # scale_url = scale_obj.url\n+                    # width = scale_obj.width\n+                    # height = scale_obj.height\n+                    scale_url = self.update_src_scale(src=src, scale=target_scale)\n+                img_tag = soup.new_tag("img", src=scale_url)\n                 for k, attr in attributes.items():\n                     if k in ["src", "srcset"]:\n                         continue\n                     img_tag.attrs[k] = attr\n                 img_tag["loading"] = "lazy"\n+                if width:\n+                    img_tag["width"] = width\n+                if height:\n+                    img_tag["height"] = height\n                 picture_tag.append(img_tag)\n         return picture_tag\n \n@@ -111,7 +132,7 @@ def update_src_scale(self, src, scale):\n         parts = src.split("/")\n         if "." in parts[-1]:\n             field_name = parts[-1].split("-")[0]\n-            src_scale =  "/".join(parts[:-1]) + "/{0}/{1}".format(field_name, scale)\n+            src_scale = "/".join(parts[:-1]) + "/{0}/{1}".format(field_name, scale)\n             src_scale\n         else:\n             src_scale = "/".join(parts[:-1]) + "/{}".format(scale)\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex b9b21d9..7a26d63 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -520,6 +520,7 @@ def scale(\n             if scale not in available:\n                 return None  # 404\n             width, height = available[scale]\n+            print(f"{width}/{height}")\n         if IDisableCSRFProtection and self.request is not None:\n             alsoProvides(self.request, IDisableCSRFProtection)\n         storage = getMultiAdapter(\n@@ -538,6 +539,7 @@ def scale(\n             scale=scale,\n             **parameters,\n         )\n+        print(f"ingo: {info}")\n         if info is None:\n             return  # 404\n \n@@ -629,6 +631,8 @@ def picture(\n         scale = self.scale(fieldname, sourceset[-1].get("scale"), pre=True)\n         attributes = {}\n         attributes["class"] = css_class and [css_class] or []\n+        if not attributes["class"]:\n+            del attributes["class"]\n         attributes["src"] = scale.url\n         attributes["width"] = scale.width\n         attributes["height"] = scale.height\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex 01a3586..0c951aa 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -1,11 +1,13 @@\n # -*- coding: utf-8 -*-\n from contextlib import contextmanager\n from DateTime import DateTime\n+from doctest import _ellipsis_match\n from OFS.SimpleItem import SimpleItem\n from plone.namedfile.field import NamedImage as NamedImageField\n from plone.namedfile.file import NamedImage\n from plone.namedfile.interfaces import IAvailableSizes\n from plone.namedfile.interfaces import IImageScaleTraversable\n+from plone.namedfile.picture import Img2PictureTag\n from plone.namedfile.scaling import ImageScaling\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n@@ -30,6 +32,19 @@\n import unittest\n \n \n+class Img2PictureTagMock(Img2PictureTag):\n+\n+    @property\n+    def allowed_scales(self):\n+        allowed_sizes = []\n+        return allowed_sizes\n+\n+    @property\n+    def image_srcsets(self):\n+        image_srcsets\n+        return image_srcsets\n+\n+\n # Unique scale name used to be a uuid.uui4(),\n # which is a combination of hexadecimal digits with dashes, total 36.\n # Now it is \'imagescalename-width-hash\', where hash is 32.\n@@ -449,14 +464,33 @@ def testGetRetinaScaleByHeightOnly(self):\n \n     def testGetPictureTagByName(self):\n         with patch_uuidToObject(self.item):\n-            tag = self.scaling.picture(\'image\', picture_variant=\'medium\', resolve_links=True)\n+            tag = self.scaling.picture(\'image\', picture_variant=\'medium\')\n         base = self.item.absolute_url()\n-        expected = (\n-            r\'<picture>.*<source srcset=\\"http://nohost/item/@@images\'\n-        )\n-        groups = re.match(expected, tag, flags=re.S|re.M).groups()\n-        print(tag)\n-        #self.assertTrue(groups, tag)\n+        expected = f"""<picture>\n+ <source srcset="http://nohost/item/@@images/image-600-....png 600w,\n+http://nohost/item/@@images/image-400-....png 400w,\n+http://nohost/item/@@images/image-800-....png 800w,\n+http://nohost/item/@@images/image-1000-....png 1000w,\n+http://nohost/item/@@images/image-1200-....png 1200w"/>\n+ <img height="200" loading="lazy" src="http://nohost/item/@@images/image-600-....png" title="foo" width="200"/>\n+</picture>"""\n+        self.assertTrue(_ellipsis_match(expected, tag))\n+\n+    def testGetPictureTagWithAltAndTitle(self):\n+        with patch_uuidToObject(self.item):\n+            tag = self.scaling.picture(\'image\', picture_variant=\'medium\', alt="Alternative text", title="Custom title")\n+        base = self.item.absolute_url()\n+        expected = f"""<picture>\n+ <source srcset="http://nohost/item/@@images/image-600-....png 600w,\n+http://nohost/item/@@images/image-400-....png 400w,\n+http://nohost/item/@@images/image-800-....png 800w,\n+http://nohost/item/@@images/image-1000-....png 1000w,\n+http://nohost/item/@@images/image-1200-....png 1200w"/>\n+ <img alt="Alternative text" height="200" loading="lazy" src="http://nohost/item/@@images/image-600-....png" title="Custom title" width="200"/>\n+</picture>"""\n+        print(f"{expected}")\n+        print(f"{tag}")\n+        self.assertTrue(_ellipsis_match(expected, tag))\n \n     def testGetUnknownScale(self):\n         foo = self.scaling.scale(\'image\', scale=\'foo?\')\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-08T16:08:10+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.namedfile/commit/bddd88ad56665019e9d869e154597cf70dfc01ad

refacture picture.py and fix tests

Files changed:
M plone/namedfile/picture.py
M plone/namedfile/scaling.py
M plone/namedfile/tests/test_scaling.py

b'diff --git a/plone/namedfile/picture.py b/plone/namedfile/picture.py\nindex 3e9aed7..f03914d 100644\n--- a/plone/namedfile/picture.py\n+++ b/plone/namedfile/picture.py\n@@ -2,9 +2,11 @@\n import re\n \n from plone.base.interfaces import IImagingSchema\n+from plone.namedfile.interfaces import IAvailableSizes\n from plone.outputfilters.browser.resolveuid import uuidToObject\n from plone.registry.interfaces import IRegistry\n from zope.component import getUtility\n+from zope.component import queryUtility\n from bs4 import BeautifulSoup\n \n logger = logging.getLogger("plone.outputfilter.picture_variant")\n@@ -12,18 +14,23 @@\n resolveuid_re = re.compile("^[./]*resolve[Uu]id/([^/]*)/?(.*)$")\n \n \n-class Img2PictureTag(object):\n-    @property\n-    def allowed_scales(self):\n-        registry = getUtility(IRegistry)\n-        settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n-        return settings.allowed_sizes\n+def get_allowed_scales():\n+    sizes_util = queryUtility(IAvailableSizes)\n+    if sizes_util is None:\n+        return {}\n+    sizes = sizes_util()\n+    if sizes is None:\n+        return {}\n+    return sizes\n+\n+\n+def get_picture_variants():\n+    registry = getUtility(IRegistry)\n+    settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n+    return settings.picture_variants\n \n-    @property\n-    def picture_variants(self):\n-        registry = getUtility(IRegistry)\n-        settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n-        return settings.picture_variants\n+\n+class Img2PictureTag(object):\n \n     def get_scale_name(self, scale_line):\n         parts = scale_line.split(" ")\n@@ -33,15 +40,9 @@ def get_scale_width(self, scale):\n         """get width from allowed_scales line\n         large 800:65536\n         """\n-        for s in self.allowed_scales:\n-            parts = s.split(" ")\n-            if not parts:\n-                continue\n-            if parts[0] == scale:\n-                dimentions = parts[1].split(":")\n-                if not dimentions:\n-                    continue\n-                return dimentions[0]\n+        allowed_scales = get_allowed_scales()\n+        scale_info = allowed_scales.get(scale)\n+        return scale_info[0]\n \n     def create_picture_tag(\n         self, sourceset, attributes, uid=None, fieldname=None, resolve_urls=False\n@@ -53,7 +54,7 @@ def create_picture_tag(\n         if not uid and not src:\n             raise TypeError("Either uid or attributes[\'src\'] need to be given.")\n         soup = BeautifulSoup("", "html.parser")\n-        allowed_scales = self.allowed_scales\n+        allowed_scales = get_allowed_scales()\n         if uid:\n             obj = uuidToObject(uid)\n         else:\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 7a26d63..2af2a16 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -11,7 +11,7 @@\n from plone.namedfile.utils import getHighPixelDensityScales\n from plone.namedfile.utils import set_headers\n from plone.namedfile.utils import stream_data\n-from plone.namedfile.picture import Img2PictureTag\n+from plone.namedfile.picture import Img2PictureTag, get_picture_variants\n from plone.protect.interfaces import IDisableCSRFProtection\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from plone.scale.interfaces import IImageScaleFactory\n@@ -618,7 +618,7 @@ def picture(\n         **kwargs,\n     ):\n         img2picturetag = Img2PictureTag()\n-        picture_variant_config = img2picturetag.image_srcsets.get(picture_variant)\n+        picture_variant_config = get_picture_variants().get(picture_variant)\n         if not picture_variant_config:\n             # raise NotFound(self, picture_variant, self.request)\n             logger.warn(\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex 0c951aa..09aad51 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -7,7 +7,6 @@\n from plone.namedfile.file import NamedImage\n from plone.namedfile.interfaces import IAvailableSizes\n from plone.namedfile.interfaces import IImageScaleTraversable\n-from plone.namedfile.picture import Img2PictureTag\n from plone.namedfile.scaling import ImageScaling\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n@@ -27,24 +26,13 @@\n from zope.publisher.interfaces import NotFound\n \n import PIL\n+import plone.namedfile.picture\n+import plone.namedfile.scaling\n import re\n import time\n import unittest\n \n \n-class Img2PictureTagMock(Img2PictureTag):\n-\n-    @property\n-    def allowed_scales(self):\n-        allowed_sizes = []\n-        return allowed_sizes\n-\n-    @property\n-    def image_srcsets(self):\n-        image_srcsets\n-        return image_srcsets\n-\n-\n # Unique scale name used to be a uuid.uui4(),\n # which is a combination of hexadecimal digits with dashes, total 36.\n # Now it is \'imagescalename-width-hash\', where hash is 32.\n@@ -67,12 +55,61 @@ def assertImage(testcase, data, format_, size):\n     testcase.assertEqual(image.size, size)\n \n \n-@contextmanager\n-def patch_uuidToObject(value=None):\n-    import plone.namedfile.picture\n+def patch_Img2PictureTag_picture_variants():\n+\n+    return {\n+        "large": {\n+            "title": "Large",\n+            "sourceset": [\n+                {\n+                    "scale": "larger",\n+                    "additionalScales": [\n+                        "preview",\n+                        "teaser",\n+                        "large",\n+                        "great",\n+                        "huge",\n+                    ],\n+                }\n+            ],\n+        },\n+        "medium": {\n+            "title": "Medium",\n+            "sourceset": [\n+                {\n+                    "scale": "teaser",\n+                    "additionalScales": ["preview", "large", "larger", "great"],\n+                }\n+            ],\n+        },\n+        "small": {\n+            "title": "Small",\n+            "sourceset": [\n+                {\n+                    "scale": "preview",\n+                    "additionalScales": ["preview", "large", "larger"],\n+                }\n+            ],\n+        },\n+    }\n+\n+\n+def patch_Img2PictureTag_allowed_scales():\n+\n+    return {\n+        "huge": (1600, 65536),\n+        "great": (1200, 65536),\n+        "larger": (1000, 65536),\n+        "large": (800, 65536),\n+        "teaser": (600, 65536),\n+        "preview": (400, 65536),\n+        "mini": (200, 65536),\n+        "thumb": (128, 128),\n+        "tile": (64, 64),\n+        "icon": (32, 32),\n+        "listing": (16, 16),\n+    }\n \n-    with patch.object(plone.namedfile.picture, "uuidToObject", return_value=value):\n-        yield\n \n \n @implementer(IAttributeAnnotatable, IHasImage)\n@@ -270,9 +307,11 @@ def setUp(self):\n         item.image = MockNamedImage(data, \'image/png\', u\'image.png\')\n         self.layer[\'app\']._setOb(\'item\', item)\n         self.item = self.layer[\'app\'].item\n+        self._orig_sizes = ImageScaling._sizes\n         self.scaling = ImageScaling(self.item, None)\n \n     def tearDown(self):\n+        ImageScaling._sizes = self._orig_sizes\n         sm = getSiteManager()\n         sm.unregisterAdapter(PrimaryFieldInfo)\n \n@@ -462,10 +501,25 @@ def testGetRetinaScaleByHeightOnly(self):\n         groups = re.match(expected, tag).groups()\n         self.assertTrue(groups, tag)\n \n-    def testGetPictureTagByName(self):\n-        with patch_uuidToObject(self.item):\n-            tag = self.scaling.picture(\'image\', picture_variant=\'medium\')\n-        base = self.item.absolute_url()\n+    @patch.object(\n+        plone.namedfile.scaling,\n+        "get_picture_variants",\n+        new=patch_Img2PictureTag_picture_variants,\n+        spec=True,\n+    )\n+    @patch.object(\n+        plone.namedfile.picture,\n+        "get_allowed_scales",\n+        new=patch_Img2PictureTag_allowed_scales,\n+        spec=True,\n+    )\n+    @patch.object(\n+        plone.namedfile.picture, "uuidToObject", spec=True\n+    )\n+    def testGetPictureTagByName(self, mock_uuid_to_object):\n+        ImageScaling._sizes = patch_Img2PictureTag_allowed_scales()\n+        mock_uuid_to_object.return_value = self.item\n+        tag = self.scaling.picture("image", picture_variant="medium")\n         expected = f"""<picture>\n  <source srcset="http://nohost/item/@@images/image-600-....png 600w,\n http://nohost/item/@@images/image-400-....png 400w,\n@@ -476,9 +530,30 @@ def testGetPictureTagByName(self):\n </picture>"""\n         self.assertTrue(_ellipsis_match(expected, tag))\n \n-    def testGetPictureTagWithAltAndTitle(self):\n-        with patch_uuidToObject(self.item):\n-            tag = self.scaling.picture(\'image\', picture_variant=\'medium\', alt="Alternative text", title="Custom title")\n+    @patch.object(\n+        plone.namedfile.scaling,\n+        "get_picture_variants",\n+        new=patch_Img2PictureTag_picture_variants,\n+        spec=True,\n+    )\n+    @patch.object(\n+        plone.namedfile.picture,\n+        "get_allowed_scales",\n+        new=patch_Img2PictureTag_allowed_scales,\n+        spec=True,\n+    )\n+    @patch.object(\n+        plone.namedfile.picture, "uuidToObject", spec=True\n+    )\n+    def testGetPictureTagWithAltAndTitle(self, mock_uuid_to_object):\n+        ImageScaling._sizes = patch_Img2PictureTag_allowed_scales()\n+        mock_uuid_to_object.return_value = self.item\n+        tag = self.scaling.picture(\n+            "image",\n+            picture_variant="medium",\n+            alt="Alternative text",\n+            title="Custom title",\n+        )\n         base = self.item.absolute_url()\n         expected = f"""<picture>\n  <source srcset="http://nohost/item/@@images/image-600-....png 600w,\n@@ -488,8 +563,6 @@ def testGetPictureTagWithAltAndTitle(self):\n http://nohost/item/@@images/image-1200-....png 1200w"/>\n  <img alt="Alternative text" height="200" loading="lazy" src="http://nohost/item/@@images/image-600-....png" title="Custom title" width="200"/>\n </picture>"""\n-        print(f"{expected}")\n-        print(f"{tag}")\n         self.assertTrue(_ellipsis_match(expected, tag))\n \n     def testGetUnknownScale(self):\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-08T16:08:20+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.namedfile/commit/aafadf83d63e8386e9ff9677827c0a4f29416185

black fixes

Files changed:
M plone/namedfile/tests/test_scaling.py

b'diff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex 09aad51..fcf0ad8 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -116,8 +116,8 @@ def patch_Img2PictureTag_allowed_scales():\n class DummyContent(SimpleItem):\n     image = None\n     modified = DateTime\n-    id = __name__ = \'item\'\n-    title = \'foo\'\n+    id = __name__ = "item"\n+    title = "foo"\n \n     def Title(self):\n         return self.title\n@@ -145,7 +145,7 @@ class MockNamedImage(NamedImage):\n \n @implementer(IScaledImageQuality)\n class DummyQualitySupplier(object):\n-    """ fake utility for plone.app.imaging\'s scaling quality """\n+    """fake utility for plone.app.imaging\'s scaling quality"""\n \n     def getQuality(self):\n         return 1  # as bad as it gets\n@@ -173,9 +173,9 @@ def info(self):\n             data=self.data,\n             width=self._width,\n             height=self._height,\n-            mimetype=f\'image/{self.format.lower()}\',\n+            mimetype=f"image/{self.format.lower()}",\n             key=self.key,\n-            uid=self.uid\n+            uid=self.uid,\n         )\n \n     def absolute_url(self):\n@@ -191,9 +191,9 @@ class FakeImageScaleStorage:\n     """Storage class for FakeImages."""\n \n     def __init__(self, context, modified=None):\n-        """ Adapt the given context item and optionally provide a callable\n-            to return a representation of the last modification date, which\n-            can be used to invalidate stored scale data on update. """\n+        """Adapt the given context item and optionally provide a callable\n+        to return a representation of the last modification date, which\n+        can be used to invalidate stored scale data on update."""\n         self.context = context\n         self.modified = modified\n         self.storage = context._scales\n@@ -252,9 +252,9 @@ def create_scale(self, target_height=None, target_width=None, no_scale=False):\n                 data=None,\n                 width=self._width,\n                 height=self._height,\n-                mimetype=f\'image/{self.format.lower()}\',\n+                mimetype=f"image/{self.format.lower()}",\n                 key=self.key,\n-                uid=self.uid\n+                uid=self.uid,\n             )\n         else:\n             # Create a new fake image for this scale.\n@@ -266,7 +266,7 @@ def create_scale(self, target_height=None, target_width=None, no_scale=False):\n         return scale.info\n \n     def __getitem__(self, uid):\n-        """ Find image scale data based on its uid. """\n+        """Find image scale data based on its uid."""\n         return self.storage[uid]\n \n     def get(self, uid, default=None):\n@@ -294,6 +294,12 @@ def get_info_by_hash(self, hash):\n                 return value\n \n \n+# @patch.multiple(\n+#     "plone.namedfile.scaling.Img2PictureTag",\n+#     allowed_scales=patch_Img2PictureTag_allowed_scales,\n+#     picture_variants=patch_Img2PictureTag_picture_variants,\n+#     spec=True,\n+# )\n class ImageScalingTests(unittest.TestCase):\n \n     layer = PLONE_NAMEDFILE_INTEGRATION_TESTING\n@@ -302,11 +308,11 @@ def setUp(self):\n         sm = getSiteManager()\n         sm.registerAdapter(PrimaryFieldInfo)\n \n-        data = getFile(\'image.png\')\n+        data = getFile("image.png")\n         item = DummyContent()\n-        item.image = MockNamedImage(data, \'image/png\', u\'image.png\')\n-        self.layer[\'app\']._setOb(\'item\', item)\n-        self.item = self.layer[\'app\'].item\n+        item.image = MockNamedImage(data, "image/png", "image.png")\n+        self.layer["app"]._setOb("item", item)\n+        self.item = self.layer["app"].item\n         self._orig_sizes = ImageScaling._sizes\n         self.scaling = ImageScaling(self.item, None)\n \n@@ -316,188 +322,196 @@ def tearDown(self):\n         sm.unregisterAdapter(PrimaryFieldInfo)\n \n     def testCreateScale(self):\n-        foo = self.scaling.scale(\'image\', width=100, height=80)\n+        foo = self.scaling.scale("image", width=100, height=80)\n         self.assertTrue(foo.uid)\n-        self.assertEqual(foo.mimetype, \'image/png\')\n+        self.assertEqual(foo.mimetype, "image/png")\n         self.assertIsInstance(foo.mimetype, str)\n-        self.assertEqual(foo.data.contentType, \'image/png\')\n+        self.assertEqual(foo.data.contentType, "image/png")\n         self.assertIsInstance(foo.data.contentType, str)\n         self.assertEqual(foo.width, 80)\n         self.assertEqual(foo.height, 80)\n-        assertImage(self, foo.data.data, \'PNG\', (80, 80))\n+        assertImage(self, foo.data.data, "PNG", (80, 80))\n \n     def testCreateExactScale(self):\n-        foo = self.scaling.scale(\'image\', width=100, height=80)\n+        foo = self.scaling.scale("image", width=100, height=80)\n         self.assertIsNot(foo.data, self.item.image)\n \n         # test that exact scale without parameters returns original\n-        foo = self.scaling.scale(\'image\',\n-                                 width=self.item.image._width,\n-                                 height=self.item.image._height)\n+        foo = self.scaling.scale(\n+            "image", width=self.item.image._width, height=self.item.image._height\n+        )\n         self.assertIs(foo.data, self.item.image)\n \n-        foo = self.scaling.scale(\'image\',\n-                                 width=self.item.image._width,\n-                                 height=self.item.image._height,\n-                                 quality=80)\n+        foo = self.scaling.scale(\n+            "image",\n+            width=self.item.image._width,\n+            height=self.item.image._height,\n+            quality=80,\n+        )\n         self.assertIsNot(foo.data, self.item.image)\n \n     def testCreateHighPixelDensityScale(self):\n-        self.scaling.getHighPixelDensityScales = lambda: [{\'scale\': 2, \'quality\': 66}]\n-        foo = self.scaling.scale(\'image\', width=100, height=80, include_srcset=True)\n+        self.scaling.getHighPixelDensityScales = lambda: [{"scale": 2, "quality": 66}]\n+        foo = self.scaling.scale("image", width=100, height=80, include_srcset=True)\n         self.assertTrue(foo.srcset)\n-        self.assertEqual(foo.srcset[0][\'mimetype\'], \'image/png\')\n-        self.assertEqual(foo.srcset[0][\'height\'], 160)\n-        self.assertEqual(foo.srcset[0][\'width\'], 160)\n+        self.assertEqual(foo.srcset[0]["mimetype"], "image/png")\n+        self.assertEqual(foo.srcset[0]["height"], 160)\n+        self.assertEqual(foo.srcset[0]["width"], 160)\n         # It is a pre-registered scale, not yet rendered.\n-        self.assertEqual(foo.srcset[0][\'data\'], None)\n+        self.assertEqual(foo.srcset[0]["data"], None)\n         # Render the scale by pretending to visit its url.\n-        bar = self.scaling.publishTraverse(self.layer[\'request\'], foo.srcset[0][\'uid\'])\n-        assertImage(self, bar.data.data, \'PNG\', (160, 160))\n+        bar = self.scaling.publishTraverse(self.layer["request"], foo.srcset[0]["uid"])\n+        assertImage(self, bar.data.data, "PNG", (160, 160))\n \n     def testCreateScaleWithoutData(self):\n         item = DummyContent()\n         scaling = ImageScaling(item, None)\n-        foo = scaling.scale(\'image\', width=100, height=80)\n+        foo = scaling.scale("image", width=100, height=80)\n         self.assertEqual(foo, None)\n \n     def testCreateHighPixelDensityScaleWithoutData(self):\n         item = DummyContent()\n         scaling = ImageScaling(item, None)\n-        scaling.getHighPixelDensityScales = lambda: [{\'scale\': 2, \'quality\': 66}]\n-        foo = scaling.scale(\'image\', width=100, height=80)\n-        self.assertFalse(hasattr(foo, \'srcset\'))\n+        scaling.getHighPixelDensityScales = lambda: [{"scale": 2, "quality": 66}]\n+        foo = scaling.scale("image", width=100, height=80)\n+        self.assertFalse(hasattr(foo, "srcset"))\n \n     def testGetScaleByName(self):\n-        self.scaling.available_sizes = {\'foo\': (60, 60)}\n-        foo = self.scaling.scale(\'image\', scale=\'foo\')\n+        self.scaling.available_sizes = {"foo": (60, 60)}\n+        foo = self.scaling.scale("image", scale="foo")\n         self.assertTrue(foo.uid)\n-        self.assertEqual(foo.mimetype, \'image/png\')\n+        self.assertEqual(foo.mimetype, "image/png")\n         self.assertIsInstance(foo.mimetype, str)\n-        self.assertEqual(foo.data.contentType, \'image/png\')\n+        self.assertEqual(foo.data.contentType, "image/png")\n         self.assertIsInstance(foo.data.contentType, str)\n         self.assertEqual(foo.width, 60)\n         self.assertEqual(foo.height, 60)\n-        assertImage(self, foo.data.data, \'PNG\', (60, 60))\n+        assertImage(self, foo.data.data, "PNG", (60, 60))\n         expected_url = re.compile(\n-            r\'http://nohost/item/@@images/{0}.png\'.format(PAT_UID_SCALE))\n+            r"http://nohost/item/@@images/{0}.png".format(PAT_UID_SCALE)\n+        )\n         self.assertTrue(expected_url.match(foo.absolute_url()))\n         self.assertEqual(foo.url, foo.absolute_url())\n \n         tag = foo.tag()\n         base = self.item.absolute_url()\n-        expected = \\\n-            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \' \\\n+        expected = (\n+            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" />\'.format(\n                 base, PAT_UID_SCALE\n             )\n+        )\n         groups = re.match(expected, tag).groups()\n         self.assertTrue(groups, tag)\n \n     def testGetHighPixelDensityScaleByName(self):\n-        self.scaling.getHighPixelDensityScales = lambda: [{\'scale\': 2, \'quality\': 66}]\n-        self.scaling.available_sizes = {\'foo\': (60, 60)}\n-        foo = self.scaling.scale(\'image\', scale=\'foo\', include_srcset=True)\n+        self.scaling.getHighPixelDensityScales = lambda: [{"scale": 2, "quality": 66}]\n+        self.scaling.available_sizes = {"foo": (60, 60)}\n+        foo = self.scaling.scale("image", scale="foo", include_srcset=True)\n         self.assertTrue(foo.srcset)\n-        self.assertEqual(foo.srcset[0][\'mimetype\'], \'image/png\')\n-        self.assertEqual(foo.srcset[0][\'width\'], 120)\n-        self.assertEqual(foo.srcset[0][\'height\'], 120)\n+        self.assertEqual(foo.srcset[0]["mimetype"], "image/png")\n+        self.assertEqual(foo.srcset[0]["width"], 120)\n+        self.assertEqual(foo.srcset[0]["height"], 120)\n \n         # It is a pre-registered scale, not yet rendered.\n-        self.assertEqual(foo.srcset[0][\'data\'], None)\n+        self.assertEqual(foo.srcset[0]["data"], None)\n         # Render the scale by pretending to visit its url.\n-        bar = self.scaling.publishTraverse(self.layer[\'request\'], foo.srcset[0][\'uid\'])\n-        assertImage(self, bar.data.data, \'PNG\', (120, 120))\n+        bar = self.scaling.publishTraverse(self.layer["request"], foo.srcset[0]["uid"])\n+        assertImage(self, bar.data.data, "PNG", (120, 120))\n \n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}\'.format(base) +\n-            r\'/@@images/({0})\'.format(PAT_UID_SCALE) +\n-            r\'.(jpeg|gif|png)" \'\n+            r\'<img src="{0}\'.format(base)\n+            + r"/@@images/({0})".format(PAT_UID_SCALE)\n+            + r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n-            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE) +\n-            r\'.(jpeg|gif|png)\'\n-            r\' 2x" />\')\n+            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE)\n+            + r".(jpeg|gif|png)"\n+            r\' 2x" />\'\n+        )\n         groups = re.match(expected, tag).groups()\n         self.assertTrue(groups, tag)\n \n     def testGetRetinaScaleByWidthAndHeight(self):\n-        self.scaling.getHighPixelDensityScales = lambda: [{\'scale\': 2, \'quality\': 66}]\n-        foo = self.scaling.scale(\'image\', width=60, height=60, include_srcset=True)\n+        self.scaling.getHighPixelDensityScales = lambda: [{"scale": 2, "quality": 66}]\n+        foo = self.scaling.scale("image", width=60, height=60, include_srcset=True)\n         self.assertTrue(foo.srcset)\n-        self.assertEqual(foo.srcset[0][\'mimetype\'], \'image/png\')\n-        self.assertEqual(foo.srcset[0][\'width\'], 120)\n-        self.assertEqual(foo.srcset[0][\'height\'], 120)\n+        self.assertEqual(foo.srcset[0]["mimetype"], "image/png")\n+        self.assertEqual(foo.srcset[0]["width"], 120)\n+        self.assertEqual(foo.srcset[0]["height"], 120)\n \n         # It is a pre-registered scale, not yet rendered.\n-        self.assertEqual(foo.srcset[0][\'data\'], None)\n+        self.assertEqual(foo.srcset[0]["data"], None)\n         # Render the scale by pretending to visit its url.\n-        bar = self.scaling.publishTraverse(self.layer[\'request\'], foo.srcset[0][\'uid\'])\n-        assertImage(self, bar.data.data, \'PNG\', (120, 120))\n+        bar = self.scaling.publishTraverse(self.layer["request"], foo.srcset[0]["uid"])\n+        assertImage(self, bar.data.data, "PNG", (120, 120))\n \n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}\'.format(base) +\n-            r\'/@@images/({0})\'.format(PAT_UID_SCALE) +\n-            r\'.(jpeg|gif|png)" \'\n+            r\'<img src="{0}\'.format(base)\n+            + r"/@@images/({0})".format(PAT_UID_SCALE)\n+            + r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n-            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE) +\n-            r\'.(jpeg|gif|png)\'\n-            r\' 2x" />\')\n+            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE)\n+            + r".(jpeg|gif|png)"\n+            r\' 2x" />\'\n+        )\n         groups = re.match(expected, tag).groups()\n         self.assertTrue(groups, tag)\n \n     def testGetRetinaScaleByWidthOnly(self):\n-        self.scaling.getHighPixelDensityScales = lambda: [{\'scale\': 2, \'quality\': 66}]\n-        foo = self.scaling.scale(\'image\', width=60, include_srcset=True)\n+        self.scaling.getHighPixelDensityScales = lambda: [{"scale": 2, "quality": 66}]\n+        foo = self.scaling.scale("image", width=60, include_srcset=True)\n         self.assertTrue(foo.srcset)\n-        self.assertEqual(foo.srcset[0][\'mimetype\'], \'image/png\')\n-        self.assertEqual(foo.srcset[0][\'width\'], 120)\n-        self.assertEqual(foo.srcset[0][\'height\'], 120)\n+        self.assertEqual(foo.srcset[0]["mimetype"], "image/png")\n+        self.assertEqual(foo.srcset[0]["width"], 120)\n+        self.assertEqual(foo.srcset[0]["height"], 120)\n         # It is a pre-registered scale, not yet rendered.\n-        self.assertEqual(foo.srcset[0][\'data\'], None)\n+        self.assertEqual(foo.srcset[0]["data"], None)\n         # Render the scale by pretending to visit its url.\n-        bar = self.scaling.publishTraverse(self.layer[\'request\'], foo.srcset[0][\'uid\'])\n-        assertImage(self, bar.data.data, \'PNG\', (120, 120))\n+        bar = self.scaling.publishTraverse(self.layer["request"], foo.srcset[0]["uid"])\n+        assertImage(self, bar.data.data, "PNG", (120, 120))\n \n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}\'.format(base) +\n-            r\'/@@images/({0})\'.format(PAT_UID_SCALE) +\n-            r\'.(jpeg|gif|png)" \'\n+            r\'<img src="{0}\'.format(base)\n+            + r"/@@images/({0})".format(PAT_UID_SCALE)\n+            + r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n-            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE) +\n-            r\'.(jpeg|gif|png)\'\n-            r\' 2x" />\')\n+            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE)\n+            + r".(jpeg|gif|png)"\n+            r\' 2x" />\'\n+        )\n         groups = re.match(expected, tag).groups()\n         self.assertTrue(groups, tag)\n \n     def testGetRetinaScaleByHeightOnly(self):\n-        self.scaling.getHighPixelDensityScales = lambda: [{\'scale\': 2, \'quality\': 66}]\n-        foo = self.scaling.scale(\'image\', height=60, include_srcset=True)\n+        self.scaling.getHighPixelDensityScales = lambda: [{"scale": 2, "quality": 66}]\n+        foo = self.scaling.scale("image", height=60, include_srcset=True)\n         self.assertTrue(foo.srcset)\n-        self.assertEqual(foo.srcset[0][\'mimetype\'], \'image/png\')\n-        self.assertEqual(foo.srcset[0][\'width\'], 120)\n-        self.assertEqual(foo.srcset[0][\'height\'], 120)\n+        self.assertEqual(foo.srcset[0]["mimetype"], "image/png")\n+        self.assertEqual(foo.srcset[0]["width"], 120)\n+        self.assertEqual(foo.srcset[0]["height"], 120)\n         # It is a pre-registered scale, not yet rendered.\n-        self.assertEqual(foo.srcset[0][\'data\'], None)\n+        self.assertEqual(foo.srcset[0]["data"], None)\n         # Render the scale by pretending to visit its url.\n-        bar = self.scaling.publishTraverse(self.layer[\'request\'], foo.srcset[0][\'uid\'])\n-        assertImage(self, bar.data.data, \'PNG\', (120, 120))\n+        bar = self.scaling.publishTraverse(self.layer["request"], foo.srcset[0]["uid"])\n+        assertImage(self, bar.data.data, "PNG", (120, 120))\n \n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}\'.format(base) +\n-            r\'/@@images/({0})\'.format(PAT_UID_SCALE) +\n-            r\'.(jpeg|gif|png)" \'\n+            r\'<img src="{0}\'.format(base)\n+            + r"/@@images/({0})".format(PAT_UID_SCALE)\n+            + r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n-            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE) +\n-            r\'.(jpeg|gif|png)\'\n-            r\' 2x" />\')\n+            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE)\n+            + r".(jpeg|gif|png)"\n+            r\' 2x" />\'\n+        )\n         groups = re.match(expected, tag).groups()\n         self.assertTrue(groups, tag)\n \n@@ -566,7 +580,7 @@ def testGetPictureTagWithAltAndTitle(self, mock_uuid_to_object):\n         self.assertTrue(_ellipsis_match(expected, tag))\n \n     def testGetUnknownScale(self):\n-        foo = self.scaling.scale(\'image\', scale=\'foo?\')\n+        foo = self.scaling.scale("image", scale="foo?")\n         self.assertEqual(foo, None)\n \n     def testScaleInvalidation(self):\n@@ -575,36 +589,36 @@ def testScaleInvalidation(self):\n         # Test that different parameters give different scale\n         self.item.modified = lambda: dt\n         self.item.image._p_mtime = dt.millis()\n-        scale1a = self.scaling.scale(\'image\', width=100, height=80)\n-        scale2a = self.scaling.scale(\'image\', width=80, height=60)\n+        scale1a = self.scaling.scale("image", width=100, height=80)\n+        scale2a = self.scaling.scale("image", width=80, height=60)\n         self.assertNotEqual(scale1a.data, scale2a.data)\n \n         # Test that bare object modification does not invalidate scales\n         self.item.modified = lambda: dt + 1\n-        scale1b = self.scaling.scale(\'image\', width=100, height=80)\n-        scale2b = self.scaling.scale(\'image\', width=80, height=60)\n+        scale1b = self.scaling.scale("image", width=100, height=80)\n+        scale2b = self.scaling.scale("image", width=80, height=60)\n         self.assertNotEqual(scale1b.data, scale2b.data)\n         self.assertEqual(scale1a.data, scale1b.data)\n         self.assertEqual(scale2a.data, scale2b.data)\n \n         # Test that field modification invalidates scales\n         self.item.image._p_mtime = (dt + 1).millis()\n-        scale1b = self.scaling.scale(\'image\', width=100, height=80)\n-        scale2b = self.scaling.scale(\'image\', width=80, height=60)\n+        scale1b = self.scaling.scale("image", width=100, height=80)\n+        scale2b = self.scaling.scale("image", width=80, height=60)\n         self.assertNotEqual(scale1b.data, scale2b.data)\n-        self.assertNotEqual(scale1a.data, scale1b.data, \'scale not updated?\')\n-        self.assertNotEqual(scale2a.data, scale2b.data, \'scale not updated?\')\n+        self.assertNotEqual(scale1a.data, scale1b.data, "scale not updated?")\n+        self.assertNotEqual(scale2a.data, scale2b.data, "scale not updated?")\n \n     def testCustomSizeChange(self):\n         # set custom image sizes & view a scale\n-        self.scaling.available_sizes = {\'foo\': (23, 23)}\n-        foo = self.scaling.scale(\'image\', scale=\'foo\')\n+        self.scaling.available_sizes = {"foo": (23, 23)}\n+        foo = self.scaling.scale("image", scale="foo")\n         self.assertEqual(foo.width, 23)\n         self.assertEqual(foo.height, 23)\n         # now let\'s update the scale dimensions, after which the scale\n         # shouldn\'t be the same...\n-        self.scaling.available_sizes = {\'foo\': (42, 42)}\n-        foo = self.scaling.scale(\'image\', scale=\'foo\')\n+        self.scaling.available_sizes = {"foo": (42, 42)}\n+        foo = self.scaling.scale("image", scale="foo")\n         self.assertEqual(foo.width, 42)\n         self.assertEqual(foo.height, 42)\n \n@@ -614,74 +628,76 @@ def testAvailableSizes(self):\n \n         # a callable can be used to look up the available sizes\n         def custom_available_sizes():\n-            return {\'bar\': (10, 10)}\n+            return {"bar": (10, 10)}\n+\n         sm = getSiteManager()\n-        sm.registerUtility(component=custom_available_sizes,\n-                           provided=IAvailableSizes)\n-        self.assertEqual(self.scaling.available_sizes, {\'bar\': (10, 10)})\n+        sm.registerUtility(component=custom_available_sizes, provided=IAvailableSizes)\n+        self.assertEqual(self.scaling.available_sizes, {"bar": (10, 10)})\n         sm.unregisterUtility(provided=IAvailableSizes)\n         # for testing purposes, the sizes may also be set directly on\n         # the scaling adapter\n-        self.scaling.available_sizes = {\'qux\': (12, 12)}\n-        self.assertEqual(self.scaling.available_sizes, {\'qux\': (12, 12)})\n+        self.scaling.available_sizes = {"qux": (12, 12)}\n+        self.assertEqual(self.scaling.available_sizes, {"qux": (12, 12)})\n \n     def testGuardedAccess(self):\n         # make sure it\'s not possible to access scales of forbidden images\n         self.item.__allow_access_to_unprotected_subobjects__ = 0\n-        self.assertRaises(Unauthorized,\n-                          self.scaling.guarded_orig_image, \'image\')\n+        self.assertRaises(Unauthorized, self.scaling.guarded_orig_image, "image")\n         self.item.__allow_access_to_unprotected_subobjects__ = 1\n \n     def testGetAvailableSizes(self):\n-        self.scaling.available_sizes = {\'foo\': (60, 60)}\n-        assert self.scaling.getAvailableSizes(\'image\') == {\'foo\': (60, 60)}\n+        self.scaling.available_sizes = {"foo": (60, 60)}\n+        assert self.scaling.getAvailableSizes("image") == {"foo": (60, 60)}\n \n     def testGetImageSize(self):\n-        assert self.scaling.getImageSize(\'image\') == (200, 200)\n+        assert self.scaling.getImageSize("image") == (200, 200)\n \n     def testGetOriginalScaleTag(self):\n-        tag = self.scaling.tag(\'image\')\n+        tag = self.scaling.tag("image")\n         base = self.item.absolute_url()\n-        expected = \\\n-            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \' \\\n+        expected = (\n+            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" />\'.format(\n                 base, PAT_UID_SCALE\n             )\n+        )\n         self.assertTrue(re.match(expected, tag).groups())\n \n     def testScaleOnItemWithNonASCIITitle(self):\n-        self.item.title = u\'\xc3\xbc\'\n-        tag = self.scaling.tag(\'image\')\n+        self.item.title = "\xc3\xbc"\n+        tag = self.scaling.tag("image")\n         base = self.item.absolute_url()\n-        expected = \\\n-            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \' \\\n+        expected = (\n+            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \'\n             r\'alt="\\xfc" title="\\xfc" height="(\\d+)" width="(\\d+)" />\'.format(\n                 base, PAT_UID_SCALE\n             )\n+        )\n         self.assertTrue(re.match(expected, tag).groups())\n \n     def testScaleOnItemWithUnicodeTitle(self):\n-        self.item.Title = lambda: u\'\xc3\xbc\'\n-        tag = self.scaling.tag(\'image\')\n+        self.item.Title = lambda: "\xc3\xbc"\n+        tag = self.scaling.tag("image")\n         base = self.item.absolute_url()\n-        expected = \\\n-            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \' \\\n+        expected = (\n+            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \'\n             r\'alt="\\xfc" title="\\xfc" height="(\\d+)" width="(\\d+)" />\'.format(\n                 base, PAT_UID_SCALE\n             )\n+        )\n         self.assertTrue(re.match(expected, tag).groups())\n \n     def testScaledJpegImageQuality(self):\n         """Test image quality setting for jpeg images.\n         Image quality not available for PNG images.\n         """\n-        data = getFile(\'image.jpg\')\n+        data = getFile("image.jpg")\n         item = DummyContent()\n-        item.image = NamedImage(data, \'image/png\', u\'image.jpg\')\n+        item.image = NamedImage(data, "image/png", "image.jpg")\n         scaling = ImageScaling(item, None)\n \n         # scale an image, record its size\n-        foo = scaling.scale(\'image\', width=100, height=80)\n+        foo = scaling.scale("image", width=100, height=80)\n         size_foo = foo.data.getSize()\n         # let\'s pretend p.a.imaging set the scaling quality to "really sloppy"\n         gsm = getGlobalSiteManager()\n@@ -689,22 +705,23 @@ def testScaledJpegImageQuality(self):\n         gsm.registerUtility(qualitySupplier.getQuality, IScaledImageQuality)\n         wait_to_ensure_modified()\n         # now scale again\n-        bar = scaling.scale(\'image\', width=100, height=80)\n+        bar = scaling.scale("image", width=100, height=80)\n         size_bar = bar.data.getSize()\n         # first one should be bigger\n         self.assertTrue(size_foo > size_bar)\n \n     def testOversizedHighPixelDensityScale(self):\n-        orig_size = max(self.scaling.getImageSize(\'image\'))\n+        orig_size = max(self.scaling.getImageSize("image"))\n         scale_size = orig_size / 2\n         self.scaling.getHighPixelDensityScales = lambda: [\n-            {\'scale\': 2, \'quality\': 66},\n-            {\'scale\': 3, \'quality\': 66}]\n+            {"scale": 2, "quality": 66},\n+            {"scale": 3, "quality": 66},\n+        ]\n         foo = self.scaling.scale(\n-            \'image\', width=scale_size, height=scale_size, include_srcset=True\n+            "image", width=scale_size, height=scale_size, include_srcset=True\n         )\n         self.assertEqual(len(foo.srcset), 1)\n-        self.assertEqual(foo.srcset[0][\'scale\'], 2)\n+        self.assertEqual(foo.srcset[0]["scale"], 2)\n \n \n class ImageTraverseTests(unittest.TestCase):\n@@ -712,59 +729,60 @@ class ImageTraverseTests(unittest.TestCase):\n     layer = PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        data = getFile(\'image.png\')\n+        self.app = self.layer["app"]\n+        data = getFile("image.png")\n         item = DummyContent()\n-        item.image = NamedImage(data, \'image/png\', u\'image.png\')\n-        self.app._setOb(\'item\', item)\n+        item.image = NamedImage(data, "image/png", "image.png")\n+        self.app._setOb("item", item)\n         self.item = self.app.item\n         self._orig_sizes = ImageScaling._sizes\n \n     def tearDown(self):\n         ImageScaling._sizes = self._orig_sizes\n \n-    def traverse(self, path=\'\'):\n-        view = self.item.unrestrictedTraverse(\'@@images\')\n-        stack = path.split(\'/\')\n+    def traverse(self, path=""):\n+        view = self.item.unrestrictedTraverse("@@images")\n+        stack = path.split("/")\n         name = stack.pop(0)\n         static_traverser = view.traverse(name, stack)\n         scale = stack.pop(0)\n         tag = static_traverser.traverse(scale, stack)\n         base = self.item.absolute_url()\n-        expected = \\\n-            r\'<img src="{0}/@@images/([0-9a-z]*-[0-9]*-[0-9a-f]{{32}}).(jpeg|gif|png)" \' \\\n+        expected = (\n+            r\'<img src="{0}/@@images/([0-9a-z]*-[0-9]*-[0-9a-f]{{32}}).(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" />\'.format(\n                 base,\n             )\n+        )\n         groups = re.match(expected, tag).groups()\n         self.assertTrue(groups, tag)\n         uid, ext, height, width = groups\n         return uid, ext, int(width), int(height)\n \n     def testImageThumb(self):\n-        ImageScaling._sizes = {\'thumb\': (128, 128)}\n-        uid, ext, width, height = self.traverse(\'image/thumb\')\n-        self.assertEqual((width, height), ImageScaling._sizes[\'thumb\'])\n-        self.assertEqual(ext, \'png\')\n+        ImageScaling._sizes = {"thumb": (128, 128)}\n+        uid, ext, width, height = self.traverse("image/thumb")\n+        self.assertEqual((width, height), ImageScaling._sizes["thumb"])\n+        self.assertEqual(ext, "png")\n \n     def testCustomSizes(self):\n         # set custom image sizes\n-        ImageScaling._sizes = {\'foo\': (23, 23)}\n+        ImageScaling._sizes = {"foo": (23, 23)}\n         # make sure traversing works with the new sizes\n-        uid, ext, width, height = self.traverse(\'image/foo\')\n+        uid, ext, width, height = self.traverse("image/foo")\n         self.assertEqual(width, 23)\n         self.assertEqual(height, 23)\n \n     def testScaleInvalidation(self):\n         # first view the thumbnail of the original image\n-        ImageScaling._sizes = {\'thumb\': (128, 128)}\n-        uid1, ext, width1, height1 = self.traverse(\'image/thumb\')\n+        ImageScaling._sizes = {"thumb": (128, 128)}\n+        uid1, ext, width1, height1 = self.traverse("image/thumb")\n         wait_to_ensure_modified()\n         # now upload a new one and make sure the thumbnail has changed\n-        data = getFile(\'image.jpg\')\n-        self.item.image = NamedImage(data, \'image/jpeg\', u\'image.jpg\')\n-        uid2, ext, width2, height2 = self.traverse(\'image/thumb\')\n-        self.assertNotEqual(uid1, uid2, \'thumb not updated?\')\n+        data = getFile("image.jpg")\n+        self.item.image = NamedImage(data, "image/jpeg", "image.jpg")\n+        uid2, ext, width2, height2 = self.traverse("image/thumb")\n+        self.assertNotEqual(uid1, uid2, "thumb not updated?")\n         # the height also differs as the original image had a size of 200, 200\n         # whereas the updated one has 500, 200...\n         self.assertEqual(width1, width2)\n@@ -772,23 +790,23 @@ def testScaleInvalidation(self):\n \n     def testCustomSizeChange(self):\n         # set custom image sizes & view a scale\n-        ImageScaling._sizes = {\'foo\': (23, 23)}\n-        uid1, ext, width, height = self.traverse(\'image/foo\')\n+        ImageScaling._sizes = {"foo": (23, 23)}\n+        uid1, ext, width, height = self.traverse("image/foo")\n         self.assertEqual(width, 23)\n         self.assertEqual(height, 23)\n         # now let\'s update the scale dimensions, after which the scale\n         # should also have been updated...\n-        ImageScaling._sizes = {\'foo\': (42, 42)}\n-        uid2, ext, width, height = self.traverse(\'image/foo\')\n+        ImageScaling._sizes = {"foo": (42, 42)}\n+        uid2, ext, width, height = self.traverse("image/foo")\n         self.assertEqual(width, 42)\n         self.assertEqual(height, 42)\n-        self.assertNotEqual(uid1, uid2, \'scale not updated?\')\n+        self.assertNotEqual(uid1, uid2, "scale not updated?")\n \n     def testGuardedAccess(self):\n         # make sure it\'s not possible to access scales of forbidden images\n         self.item.__allow_access_to_unprotected_subobjects__ = 0\n-        ImageScaling._sizes = {\'foo\': (42, 42)}\n-        self.assertRaises(Unauthorized, self.traverse, \'image/foo\')\n+        ImageScaling._sizes = {"foo": (42, 42)}\n+        self.assertRaises(Unauthorized, self.traverse, "image/foo")\n         self.item.__allow_access_to_unprotected_subobjects__ = 1\n \n \n@@ -892,4 +910,5 @@ def test_height(self):\n \n def test_suite():\n     from unittest import defaultTestLoader\n+\n     return defaultTestLoader.loadTestsFromName(__name__)\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-08T16:08:49+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/112b0e361fd4aa6680949e23a7604f2ab78f08a2

Fixed import for Plone 5.2.

We do not have plone.base there.
The picture method is not supported on 5.2, but it would be nice if the rest of the code still works.
I think get_picture_variants is mocked away in all tests, and this helps us.

Files changed:
M plone/namedfile/picture.py

b'diff --git a/plone/namedfile/picture.py b/plone/namedfile/picture.py\nindex f03914d..0644692 100644\n--- a/plone/namedfile/picture.py\n+++ b/plone/namedfile/picture.py\n@@ -1,7 +1,10 @@\n import logging\n import re\n \n-from plone.base.interfaces import IImagingSchema\n+try:\n+    from plone.base.interfaces import IImagingSchema\n+except ImportError:\n+    from Products.CMFPlone.interfaces.controlpanel import IImagingSchema\n from plone.namedfile.interfaces import IAvailableSizes\n from plone.outputfilters.browser.resolveuid import uuidToObject\n from plone.registry.interfaces import IRegistry\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-08T16:13:22+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/1c2ce5e8832dceb452950d023711b798c20def8f

black picture

Files changed:
M plone/namedfile/picture.py

b'diff --git a/plone/namedfile/picture.py b/plone/namedfile/picture.py\nindex 0644692..241ee28 100644\n--- a/plone/namedfile/picture.py\n+++ b/plone/namedfile/picture.py\n@@ -1,10 +1,6 @@\n import logging\n import re\n \n-try:\n-    from plone.base.interfaces import IImagingSchema\n-except ImportError:\n-    from Products.CMFPlone.interfaces.controlpanel import IImagingSchema\n from plone.namedfile.interfaces import IAvailableSizes\n from plone.outputfilters.browser.resolveuid import uuidToObject\n from plone.registry.interfaces import IRegistry\n@@ -12,6 +8,12 @@\n from zope.component import queryUtility\n from bs4 import BeautifulSoup\n \n+try:\n+    from plone.base.interfaces import IImagingSchema\n+except ImportError:\n+    from Products.CMFPlone.interfaces.controlpanel import IImagingSchema\n+\n+\n logger = logging.getLogger("plone.outputfilter.picture_variant")\n appendix_re = re.compile("^(.*)([?#].*)$")\n resolveuid_re = re.compile("^[./]*resolve[Uu]id/([^/]*)/?(.*)$")\n@@ -34,7 +36,6 @@ def get_picture_variants():\n \n \n class Img2PictureTag(object):\n-\n     def get_scale_name(self, scale_line):\n         parts = scale_line.split(" ")\n         return parts and parts[0] or ""\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-08T16:57:01+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/b1818528a1cf5abfc20503d91b409f62a9000afd

Let picture method return an img tag if the picture variant is not found.

When a template calls the picture method, it seems nicer to return a normal img tag in case of problems.
This also helps for Plone 5.2.

Files changed:
M plone/namedfile/picture.py
M plone/namedfile/scaling.py
M plone/namedfile/tests/test_scaling.py

b'diff --git a/plone/namedfile/picture.py b/plone/namedfile/picture.py\nindex 241ee28..0ed67f9 100644\n--- a/plone/namedfile/picture.py\n+++ b/plone/namedfile/picture.py\n@@ -32,7 +32,7 @@ def get_allowed_scales():\n def get_picture_variants():\n     registry = getUtility(IRegistry)\n     settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n-    return settings.picture_variants\n+    return getattr(settings, "picture_variants", {})\n \n \n class Img2PictureTag(object):\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 2af2a16..dc01b0a 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -620,13 +620,26 @@ def picture(\n         img2picturetag = Img2PictureTag()\n         picture_variant_config = get_picture_variants().get(picture_variant)\n         if not picture_variant_config:\n-            # raise NotFound(self, picture_variant, self.request)\n-            logger.warn(\n-                "Could not find the given picture_variant {0}, leave tag untouched!".format(\n-                    picture_variant\n-                )\n+            logger.warning(\n+                "Could not find the given picture_variant %s, "\n+                "creating ordinary img tag instead!",\n+                picture_variant\n             )\n-            return\n+            if picture_variant in self.available_sizes:\n+                # We have a bit of luck: we have a scale with the same name\n+                # as the picture variant.\n+                scale = picture_variant\n+            else:\n+                scale = None\n+            return self.tag(\n+                fieldname=fieldname,\n+                scale=scale,\n+                alt=alt,\n+                css_class=css_class,\n+                title=title,\n+                **kwargs,\n+            )\n+\n         sourceset = picture_variant_config.get("sourceset")\n         scale = self.scale(fieldname, sourceset[-1].get("scale"), pre=True)\n         attributes = {}\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex fcf0ad8..761cf1b 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -94,6 +94,11 @@ def patch_Img2PictureTag_picture_variants():\n     }\n \n \n+def patch_Img2PictureTag_empty_picture_variants():\n+    # You would have this in Plone 5.2, or if someone empties the registry setting.\n+    return {}\n+\n+\n def patch_Img2PictureTag_allowed_scales():\n \n     return {\n@@ -579,6 +584,28 @@ def testGetPictureTagWithAltAndTitle(self, mock_uuid_to_object):\n </picture>"""\n         self.assertTrue(_ellipsis_match(expected, tag))\n \n+    @patch.object(\n+        plone.namedfile.scaling,\n+        "get_picture_variants",\n+        new=patch_Img2PictureTag_empty_picture_variants,\n+        spec=True,\n+    )\n+    @patch.object(\n+        plone.namedfile.picture,\n+        "get_allowed_scales",\n+        new=patch_Img2PictureTag_allowed_scales,\n+        spec=True,\n+    )\n+    @patch.object(\n+        plone.namedfile.picture, "uuidToObject", spec=True\n+    )\n+    def testGetPictureTagWithoutAnyVariants(self, mock_uuid_to_object):\n+        ImageScaling._sizes = patch_Img2PictureTag_allowed_scales()\n+        mock_uuid_to_object.return_value = self.item\n+        tag = self.scaling.picture("image", picture_variant="medium")\n+        expected = f"""<img src="http://nohost/item/@@images/image-0-....png" title="foo" height="200" width="200" />"""\n+        self.assertTrue(_ellipsis_match(expected, tag))\n+\n     def testGetUnknownScale(self):\n         foo = self.scaling.scale("image", scale="foo?")\n         self.assertEqual(foo, None)\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-08T17:58:19+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.namedfile/commit/b64457cd101e2a63658abecd3afbf6dc1e0ab7e7

use plone.app.uuid.utils.uuidToObject

Files changed:
M plone/namedfile/picture.py
M plone/namedfile/scaling.py

b'diff --git a/plone/namedfile/picture.py b/plone/namedfile/picture.py\nindex f03914d..1b1b6c0 100644\n--- a/plone/namedfile/picture.py\n+++ b/plone/namedfile/picture.py\n@@ -3,7 +3,7 @@\n \n from plone.base.interfaces import IImagingSchema\n from plone.namedfile.interfaces import IAvailableSizes\n-from plone.outputfilters.browser.resolveuid import uuidToObject\n+from plone.app.uuid.utils import uuidToObject\n from plone.registry.interfaces import IRegistry\n from zope.component import getUtility\n from zope.component import queryUtility\n@@ -65,7 +65,6 @@ def create_picture_tag(\n             picture_tag["class"] = "captioned"\n         for i, source in enumerate(sourceset):\n             target_scale = source["scale"]\n-            print(f"target_scale: {target_scale}")\n             media = source.get("media")\n \n             additional_scales = source.get("additionalScales", None)\n@@ -137,5 +136,4 @@ def update_src_scale(self, src, scale):\n             src_scale\n         else:\n             src_scale = "/".join(parts[:-1]) + "/{}".format(scale)\n-        print(src_scale)\n         return src_scale\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 2af2a16..a5d971b 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -539,7 +539,7 @@ def scale(\n             scale=scale,\n             **parameters,\n         )\n-        print(f"ingo: {info}")\n+        print(f"plone.namedfile.scale: info: {info}")\n         if info is None:\n             return  # 404\n \n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-08T17:59:05+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.namedfile/commit/0833abae6403b4eb616f14790b22ccc5508a358a

Merge branch 'pre-scale-picture-tag' of https://github.com/plone/plone.namedfile into pre-scale-picture-tag

Files changed:
M plone/namedfile/picture.py
M plone/namedfile/scaling.py
M plone/namedfile/tests/test_scaling.py

b'diff --git a/plone/namedfile/picture.py b/plone/namedfile/picture.py\nindex 1b1b6c0..f7a1fe3 100644\n--- a/plone/namedfile/picture.py\n+++ b/plone/namedfile/picture.py\n@@ -1,7 +1,6 @@\n import logging\n import re\n \n-from plone.base.interfaces import IImagingSchema\n from plone.namedfile.interfaces import IAvailableSizes\n from plone.app.uuid.utils import uuidToObject\n from plone.registry.interfaces import IRegistry\n@@ -9,6 +8,12 @@\n from zope.component import queryUtility\n from bs4 import BeautifulSoup\n \n+try:\n+    from plone.base.interfaces import IImagingSchema\n+except ImportError:\n+    from Products.CMFPlone.interfaces.controlpanel import IImagingSchema\n+\n+\n logger = logging.getLogger("plone.outputfilter.picture_variant")\n appendix_re = re.compile("^(.*)([?#].*)$")\n resolveuid_re = re.compile("^[./]*resolve[Uu]id/([^/]*)/?(.*)$")\n@@ -27,11 +32,10 @@ def get_allowed_scales():\n def get_picture_variants():\n     registry = getUtility(IRegistry)\n     settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n-    return settings.picture_variants\n+    return getattr(settings, "picture_variants", {})\n \n \n class Img2PictureTag(object):\n-\n     def get_scale_name(self, scale_line):\n         parts = scale_line.split(" ")\n         return parts and parts[0] or ""\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex a5d971b..0664aa4 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -620,13 +620,26 @@ def picture(\n         img2picturetag = Img2PictureTag()\n         picture_variant_config = get_picture_variants().get(picture_variant)\n         if not picture_variant_config:\n-            # raise NotFound(self, picture_variant, self.request)\n-            logger.warn(\n-                "Could not find the given picture_variant {0}, leave tag untouched!".format(\n-                    picture_variant\n-                )\n+            logger.warning(\n+                "Could not find the given picture_variant %s, "\n+                "creating ordinary img tag instead!",\n+                picture_variant\n             )\n-            return\n+            if picture_variant in self.available_sizes:\n+                # We have a bit of luck: we have a scale with the same name\n+                # as the picture variant.\n+                scale = picture_variant\n+            else:\n+                scale = None\n+            return self.tag(\n+                fieldname=fieldname,\n+                scale=scale,\n+                alt=alt,\n+                css_class=css_class,\n+                title=title,\n+                **kwargs,\n+            )\n+\n         sourceset = picture_variant_config.get("sourceset")\n         scale = self.scale(fieldname, sourceset[-1].get("scale"), pre=True)\n         attributes = {}\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex fcf0ad8..761cf1b 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -94,6 +94,11 @@ def patch_Img2PictureTag_picture_variants():\n     }\n \n \n+def patch_Img2PictureTag_empty_picture_variants():\n+    # You would have this in Plone 5.2, or if someone empties the registry setting.\n+    return {}\n+\n+\n def patch_Img2PictureTag_allowed_scales():\n \n     return {\n@@ -579,6 +584,28 @@ def testGetPictureTagWithAltAndTitle(self, mock_uuid_to_object):\n </picture>"""\n         self.assertTrue(_ellipsis_match(expected, tag))\n \n+    @patch.object(\n+        plone.namedfile.scaling,\n+        "get_picture_variants",\n+        new=patch_Img2PictureTag_empty_picture_variants,\n+        spec=True,\n+    )\n+    @patch.object(\n+        plone.namedfile.picture,\n+        "get_allowed_scales",\n+        new=patch_Img2PictureTag_allowed_scales,\n+        spec=True,\n+    )\n+    @patch.object(\n+        plone.namedfile.picture, "uuidToObject", spec=True\n+    )\n+    def testGetPictureTagWithoutAnyVariants(self, mock_uuid_to_object):\n+        ImageScaling._sizes = patch_Img2PictureTag_allowed_scales()\n+        mock_uuid_to_object.return_value = self.item\n+        tag = self.scaling.picture("image", picture_variant="medium")\n+        expected = f"""<img src="http://nohost/item/@@images/image-0-....png" title="foo" height="200" width="200" />"""\n+        self.assertTrue(_ellipsis_match(expected, tag))\n+\n     def testGetUnknownScale(self):\n         foo = self.scaling.scale("image", scale="foo?")\n         self.assertEqual(foo, None)\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-08T17:03:04+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/5983331f737bb3e1ea68b5f53a3b19b10ac916d4

Add dependency on plone.app.uuid

Files changed:
M setup.py

b"diff --git a/setup.py b/setup.py\nindex 7935837..148ffe2 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -48,6 +48,7 @@\n     install_requires=[\n         'persistent',\n         'piexif',\n+        'plone.app.uuid',\n         'plone.rfc822>=2.0.0',\n         'plone.scale[storage] >=3.0',\n         'plone.schemaeditor',\n"

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-08T18:14:39+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.namedfile/commit/c4c68a6429fe9dfb648dd6b92e894248fed16f89

cleanup print statements

Files changed:
M plone/namedfile/scaling.py

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 0664aa4..6b5ab4c 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -520,7 +520,6 @@ def scale(\n             if scale not in available:\n                 return None  # 404\n             width, height = available[scale]\n-            print(f"{width}/{height}")\n         if IDisableCSRFProtection and self.request is not None:\n             alsoProvides(self.request, IDisableCSRFProtection)\n         storage = getMultiAdapter(\n@@ -539,7 +538,6 @@ def scale(\n             scale=scale,\n             **parameters,\n         )\n-        print(f"plone.namedfile.scale: info: {info}")\n         if info is None:\n             return  # 404\n \n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-08T18:14:47+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.namedfile/commit/74ea17c1140751e134babe8c96228ff911494fbf

Merge branch 'pre-scale-picture-tag' of https://github.com/plone/plone.namedfile into pre-scale-picture-tag

Files changed:
M setup.py

b"diff --git a/setup.py b/setup.py\nindex 7935837..148ffe2 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -48,6 +48,7 @@\n     install_requires=[\n         'persistent',\n         'piexif',\n+        'plone.app.uuid',\n         'plone.rfc822>=2.0.0',\n         'plone.scale[storage] >=3.0',\n         'plone.schemaeditor',\n"

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-08T18:07:08+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/8613ff2cbf7e23914ba20c5aa1c05f1762c6cb30

Update test.pt

Files changed:
M plone/namedfile/test.pt

b'diff --git a/plone/namedfile/test.pt b/plone/namedfile/test.pt\nindex ffa86ef..d15efb0 100644\n--- a/plone/namedfile/test.pt\n+++ b/plone/namedfile/test.pt\n@@ -24,6 +24,7 @@\n     <a href="#examples">examples</a>,\n     <a href="#cover">cover</a>,\n     <a href="#contain">contain</a>,\n+    <a href="#picture">picture tags</a>,\n     <a href="#stored">stored scales</a>,\n     <a href="#clear">clear</a>\n   </p>\n@@ -85,16 +86,21 @@\n     </figure>\n \n     <h3 id="contain">Mini direction=contain</h3>\n-    <p>\n-      Temporary note:\n-      This crops the image. The crop may fail unless this\n-      <a href="https://github.com/plone/plone.scale/pull/54">plone.scale PR</a> is merged.\n-    </p>\n     <figure class="figure"\n       tal:define="img_tag python:images.tag(\'image\', scale=\'mini\', direction=\'contain\')">\n       <img tal:replace="structure img_tag" />\n       <br /><code tal:content="img_tag" />\n     </figure>\n+  </section>\n+\n+  <section id="picture">\n+    <h2>Picture tags</h2>\n+    <p>\n+      Temporary note:\n+      Picture tags only work on Plone 6, with several other branches merged.\n+      See <a href="https://github.com/plone/buildout.coredev/blob/6.0/plips/plip-image-srcsets.cfg">coredev</a>.\n+      If not available (like on Plone 5.2), an ordinary image tag is created.\n+    </p>\n \n     <h3 id="picture_tag_large">Picture Tag Large</h3>\n     <p>\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-08T21:58:35+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/8660d4ed36e90e52031c5e8c1574eabf4677efc8

Update news snippet.

Files changed:
M news/113.feature.3

b'diff --git a/news/113.feature.3 b/news/113.feature.3\nindex 8af321b..98fb6d7 100644\n--- a/news/113.feature.3\n+++ b/news/113.feature.3\n@@ -1,2 +1,5 @@\n-Add picture method to to ImageScaling and include it in @@image-test\n-[MrTango]\n\\ No newline at end of file\n+Add picture method to to ImageScaling and include it in @@image-test.\n+Picture tags only work on Plone 6, with several other branches for picture variants merged.\n+See `plip-image-srcsets.cfg <https://github.com/plone/buildout.coredev/blob/6.0/plips/plip-image-srcsets.cfg>`_.\n+If not available (like on Plone 5.2), an ordinary image tag is created.\n+[MrTango]\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-08T21:59:15+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/26ce3a877d8c06dd11c20b7606204ba189984be9

Merge branch 'master' into pre-scale

Files changed:
M CHANGES.rst
M setup.py
D news/114.bugfix
D news/118.bugfix

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex d2d3d1b..23b989b 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,20 @@ Changelog\n \n .. towncrier release notes start\n \n+6.0.0a4 (2022-05-26)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Only look at the width when checking if a HiDPI image would be larger than the original.\n+  Otherwise HiDPI srcsets are never included when the scale is defined with a height of 65536.\n+  [maurits] (#114)\n+- Fix Unauthorized when accessing ``@@images/image`` of private image, even as Manager.\n+  Fixes problem introduced in previous release.\n+  [maurits] (#118)\n+\n+\n 6.0.0a3 (2022-02-28)\n --------------------\n \ndiff --git a/news/114.bugfix b/news/114.bugfix\ndeleted file mode 100644\nindex a9127a9..0000000\n--- a/news/114.bugfix\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Only look at the width when checking if a HiDPI image would be larger than the original.\n-Otherwise HiDPI srcsets are never included when the scale is defined with a height of 65536.\n-[maurits]\ndiff --git a/news/118.bugfix b/news/118.bugfix\ndeleted file mode 100644\nindex c9e19ea..0000000\n--- a/news/118.bugfix\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Fix Unauthorized when accessing @@image/image of private image, even as Manager.\n-Fixes problem introduced in previous release.\n-[maurits]\ndiff --git a/setup.py b/setup.py\nindex 148ffe2..1dd8934 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -5,7 +5,7 @@\n import os\n \n \n-version = '6.0.0a4.dev0'\n+version = '6.0.0a5.dev0'\n \n description = 'File types and fields for images, files and blob files with ' \\\n               'filenames'\n"

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-06-09T13:18:36+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/30f59c59cc37a64bf438235b1e288879b1126737

Merge pull request #113 from plone/pre-scale

Call new pre_scale and get_or_generate from plone.scale.

Files changed:
A news/113.feature.1
A news/113.feature.2
A news/113.feature.3
A plone/namedfile/picture.py
A plone/namedfile/test.pt
M .gitignore
M plone/namedfile/scaling.py
M plone/namedfile/scaling.zcml
M plone/namedfile/tests/test_scaling.py
M setup.py
M sources-52.ini
M sources-60.ini

b'diff --git a/.gitignore b/.gitignore\nindex 9eff048..4159a5f 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -11,3 +11,4 @@ include\n lib\n parts\n requirements-*-mxdev.txt\n+sources/\ndiff --git a/news/113.feature.1 b/news/113.feature.1\nnew file mode 100644\nindex 0000000..63ae72f\n--- /dev/null\n+++ b/news/113.feature.1\n@@ -0,0 +1,2 @@\n+Creating a tag no longer generates the actual scale.\n+[maurits]\ndiff --git a/news/113.feature.2 b/news/113.feature.2\nnew file mode 100644\nindex 0000000..6f70fb6\n--- /dev/null\n+++ b/news/113.feature.2\n@@ -0,0 +1,5 @@\n+Add ``@@images-test`` page for Editors.\n+This shows various variants from the image field of the current context.\n+It shows a list of stored scales.\n+It allows purging the stored scales.\n+[maurits]\ndiff --git a/news/113.feature.3 b/news/113.feature.3\nnew file mode 100644\nindex 0000000..98fb6d7\n--- /dev/null\n+++ b/news/113.feature.3\n@@ -0,0 +1,5 @@\n+Add picture method to to ImageScaling and include it in @@image-test.\n+Picture tags only work on Plone 6, with several other branches for picture variants merged.\n+See `plip-image-srcsets.cfg <https://github.com/plone/buildout.coredev/blob/6.0/plips/plip-image-srcsets.cfg>`_.\n+If not available (like on Plone 5.2), an ordinary image tag is created.\n+[MrTango]\ndiff --git a/plone/namedfile/picture.py b/plone/namedfile/picture.py\nnew file mode 100644\nindex 0000000..f7a1fe3\n--- /dev/null\n+++ b/plone/namedfile/picture.py\n@@ -0,0 +1,143 @@\n+import logging\n+import re\n+\n+from plone.namedfile.interfaces import IAvailableSizes\n+from plone.app.uuid.utils import uuidToObject\n+from plone.registry.interfaces import IRegistry\n+from zope.component import getUtility\n+from zope.component import queryUtility\n+from bs4 import BeautifulSoup\n+\n+try:\n+    from plone.base.interfaces import IImagingSchema\n+except ImportError:\n+    from Products.CMFPlone.interfaces.controlpanel import IImagingSchema\n+\n+\n+logger = logging.getLogger("plone.outputfilter.picture_variant")\n+appendix_re = re.compile("^(.*)([?#].*)$")\n+resolveuid_re = re.compile("^[./]*resolve[Uu]id/([^/]*)/?(.*)$")\n+\n+\n+def get_allowed_scales():\n+    sizes_util = queryUtility(IAvailableSizes)\n+    if sizes_util is None:\n+        return {}\n+    sizes = sizes_util()\n+    if sizes is None:\n+        return {}\n+    return sizes\n+\n+\n+def get_picture_variants():\n+    registry = getUtility(IRegistry)\n+    settings = registry.forInterface(IImagingSchema, prefix="plone", check=False)\n+    return getattr(settings, "picture_variants", {})\n+\n+\n+class Img2PictureTag(object):\n+    def get_scale_name(self, scale_line):\n+        parts = scale_line.split(" ")\n+        return parts and parts[0] or ""\n+\n+    def get_scale_width(self, scale):\n+        """get width from allowed_scales line\n+        large 800:65536\n+        """\n+        allowed_scales = get_allowed_scales()\n+        scale_info = allowed_scales.get(scale)\n+        return scale_info[0]\n+\n+    def create_picture_tag(\n+        self, sourceset, attributes, uid=None, fieldname=None, resolve_urls=False\n+    ):\n+        """Converts the img tag to a picture tag with picture_variant definition"""\n+        width = None\n+        height = None\n+        src = attributes.get("src")\n+        if not uid and not src:\n+            raise TypeError("Either uid or attributes[\'src\'] need to be given.")\n+        soup = BeautifulSoup("", "html.parser")\n+        allowed_scales = get_allowed_scales()\n+        if uid:\n+            obj = uuidToObject(uid)\n+        else:\n+            obj = self.resolve_uid_url(src)\n+        picture_tag = soup.new_tag("picture")\n+        css_classes = attributes.get("class", [])\n+        if "captioned" in css_classes:\n+            picture_tag["class"] = "captioned"\n+        for i, source in enumerate(sourceset):\n+            target_scale = source["scale"]\n+            media = source.get("media")\n+\n+            additional_scales = source.get("additionalScales", None)\n+            if additional_scales is None:\n+                additional_scales = [\n+                    self.get_scale_name(s) for s in allowed_scales if s != target_scale\n+                ]\n+            source_scales = [target_scale] + additional_scales\n+            source_srcset = []\n+            for scale in source_scales:\n+                if resolve_urls and obj:\n+                    scale_view = obj.unrestrictedTraverse("@@images", None)\n+                    scale_obj = scale_view.scale(fieldname, scale, pre=True)\n+                    scale_url = scale_obj.url\n+                else:\n+                    # obj = self.resolve_uid_url(src)\n+                    # scale_view = obj.unrestrictedTraverse("@@images", None)\n+                    # scale_obj = scale_view.scale(fieldname, scale, pre=True)\n+                    # scale_url = scale_obj.url\n+                    scale_url = self.update_src_scale(src=src, scale=scale)\n+                scale_width = self.get_scale_width(scale)\n+                source_srcset.append("{0} {1}w".format(scale_url, scale_width))\n+            source_tag = soup.new_tag("source", srcset=",\\n".join(source_srcset))\n+            if media:\n+                source_tag["media"] = media\n+            picture_tag.append(source_tag)\n+            if i == len(sourceset) - 1:\n+                if resolve_urls and obj:\n+                    scale_view = obj.unrestrictedTraverse("@@images", None)\n+                    scale_obj = scale_view.scale(fieldname, target_scale, pre=True)\n+                    scale_url = scale_obj.url\n+                    width = scale_obj.width\n+                    height = scale_obj.height\n+                else:\n+                    # obj = self.resolve_uid_url(src)\n+                    # scale_view = obj.unrestrictedTraverse("@@images", None)\n+                    # scale_obj = scale_view.scale(fieldname, target_scale, pre=True)\n+                    # scale_url = scale_obj.url\n+                    # width = scale_obj.width\n+                    # height = scale_obj.height\n+                    scale_url = self.update_src_scale(src=src, scale=target_scale)\n+                img_tag = soup.new_tag("img", src=scale_url)\n+                for k, attr in attributes.items():\n+                    if k in ["src", "srcset"]:\n+                        continue\n+                    img_tag.attrs[k] = attr\n+                img_tag["loading"] = "lazy"\n+                if width:\n+                    img_tag["width"] = width\n+                if height:\n+                    img_tag["height"] = height\n+                picture_tag.append(img_tag)\n+        return picture_tag\n+\n+    def resolve_uid_url(self, href):\n+        obj = None\n+        subpath = href\n+        match = resolveuid_re.match(subpath)\n+        if match is not None:\n+            uid, _subpath = match.groups()\n+            obj = uuidToObject(uid)\n+        return obj\n+\n+    def update_src_scale(self, src, scale):\n+        parts = src.split("/")\n+        if "." in parts[-1]:\n+            field_name = parts[-1].split("-")[0]\n+            src_scale = "/".join(parts[:-1]) + "/{0}/{1}".format(field_name, scale)\n+            src_scale\n+        else:\n+            src_scale = "/".join(parts[:-1]) + "/{}".format(scale)\n+        return src_scale\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 04b40b9..6b5ab4c 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -4,12 +4,14 @@\n from DateTime import DateTime\n from io import BytesIO\n from plone.memoize import ram\n+from plone.protect import PostOnly\n from plone.namedfile.file import FILECHUNK_CLASSES\n from plone.namedfile.interfaces import IAvailableSizes\n from plone.namedfile.interfaces import IStableImageScale\n from plone.namedfile.utils import getHighPixelDensityScales\n from plone.namedfile.utils import set_headers\n from plone.namedfile.utils import stream_data\n+from plone.namedfile.picture import Img2PictureTag, get_picture_variants\n from plone.protect.interfaces import IDisableCSRFProtection\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from plone.scale.interfaces import IImageScaleFactory\n@@ -42,7 +44,7 @@\n \n \n class ImageScale(BrowserView):\n-    """ view used for rendering image scales """\n+    """view used for rendering image scales"""\n \n     # Grant full access to this view even if the object being viewed is\n     # protected\n@@ -67,8 +69,8 @@ def __init__(self, context, request, **info):\n             name = info["uid"]\n         else:\n             name = info["fieldname"]\n-        self.__name__ = u"{0}.{1}".format(name, extension)\n-        self.url = u"{0}/@@images/{1}".format(url, self.__name__)\n+        self.__name__ = "{0}.{1}".format(name, extension)\n+        self.url = "{0}/@@images/{1}".format(url, self.__name__)\n         self.srcset = info.get("srcset", [])\n \n     def absolute_url(self):\n@@ -79,7 +81,7 @@ def srcset_attribute(self):\n         extension = self.data.contentType.split("/")[-1].lower()\n         for scale in self.srcset:\n             _srcset_attr.append(\n-                u"{0}/@@images/{1}.{2} {3}x".format(\n+                "{0}/@@images/{1}.{2} {3}x".format(\n                     self.context.absolute_url(), scale["uid"], extension, scale["scale"]\n                 )\n             )\n@@ -93,10 +95,9 @@ def tag(\n         alt=_marker,\n         css_class=None,\n         title=_marker,\n-        **kwargs\n+        **kwargs,\n     ):\n-        """Create a tag including scale\n-        """\n+        """Create a tag including scale"""\n         if height is _marker:\n             height = getattr(self, "height", self.data._height)\n         if width is _marker:\n@@ -130,17 +131,17 @@ def tag(\n                 v = str(v)\n             elif isinstance(v, six.binary_type):\n                 v = six.text_type(v, "utf8")\n-            parts.append(u"{0}={1}".format(k, quoteattr(v)))\n+            parts.append("{0}={1}".format(k, quoteattr(v)))\n         parts.append("/>")\n \n-        return u" ".join(parts)\n+        return " ".join(parts)\n \n     def validate_access(self):\n         fieldname = getattr(self.data, "fieldname", getattr(self, "fieldname", None))\n         guarded_getattr(self.context, fieldname)\n \n     def index_html(self):\n-        """ download the image """\n+        """download the image"""\n         self.validate_access()\n         set_headers(self.data, self.request.response)\n         return stream_data(self.data)\n@@ -158,8 +159,8 @@ def __call__(self):\n         return self\n \n     def HEAD(self, REQUEST, RESPONSE=None):\n-        """ Obtain metainformation about the image implied by the request\n-            without transfer of the image itself\n+        """Obtain metainformation about the image implied by the request\n+        without transfer of the image itself\n         """\n         self.validate_access()\n         set_headers(self.data, REQUEST.response)\n@@ -190,17 +191,22 @@ def __init__(self, context):\n         # fieldname will be set for real in the __call__ method.\n         self.fieldname = None\n \n-    def get_original_value(self):\n+    def get_original_value(self, fieldname=None):\n         """Get the image value.\n \n         In most cases this will be a NamedBlobImage field.\n         """\n-        if self.fieldname is None:\n+        fieldname = fieldname or self.fieldname\n+        if fieldname is not None:\n+            return getattr(self.context, fieldname, None)\n+        try:\n             primary = IPrimaryFieldInfo(self.context, None)\n-            if primary is None:\n-                return\n-            self.fieldname = primary.fieldname\n-        return getattr(self.context, self.fieldname, None)\n+        except TypeError:\n+            return\n+        if primary is None:\n+            return\n+        self.fieldname = primary.fieldname\n+        return primary.value\n \n     def get_raw_data(self, orig_value):\n         """Get the raw image data.\n@@ -284,7 +290,7 @@ def __call__(\n         height=None,\n         width=None,\n         scale=None,\n-        **parameters\n+        **parameters,\n     ):\n \n         """Factory for image scales`.\n@@ -321,6 +327,8 @@ def __call__(\n             return\n \n         parameters = self.update_parameters(**parameters)\n+        if "modified" in parameters:\n+            del parameters["modified"]\n         try:\n             result = self.handle_image(\n                 orig_value, orig_data, direction, height, width, **parameters\n@@ -339,7 +347,9 @@ def __call__(\n         data, format_, dimensions = result\n         mimetype = "image/{0}".format(format_.lower())\n         value = orig_value.__class__(\n-            data, contentType=mimetype, filename=orig_value.filename,\n+            data,\n+            contentType=mimetype,\n+            filename=orig_value.filename,\n         )\n         value.fieldname = self.fieldname\n \n@@ -348,7 +358,7 @@ def __call__(\n \n @implementer(ITraversable, IPublishTraverse)\n class ImageScaling(BrowserView):\n-    """ view used for generating (and storing) image scales """\n+    """view used for generating (and storing) image scales"""\n \n     # Ignore some stacks to help with accessing via webdav, otherwise you get a\n     # 404 NotFound error.\n@@ -356,7 +366,7 @@ class ImageScaling(BrowserView):\n     _scale_view_class = ImageScale\n \n     def publishTraverse(self, request, name):\n-        """ used for traversal via publisher, i.e. when using as a url """\n+        """used for traversal via publisher, i.e. when using as a url"""\n         stack = request.get("TraversalRequestNameStack")\n         image = None\n         if stack and stack[-1] not in self._ignored_stacks:\n@@ -370,7 +380,7 @@ def publishTraverse(self, request, name):\n             if "." in name:\n                 name, ext = name.rsplit(".", 1)\n             storage = getMultiAdapter((self.context, None), IImageScaleStorage)\n-            info = storage.get(name)\n+            info = storage.get_or_generate(name)\n             if info is None:\n                 raise NotFound(self, name, self.request)\n             scale_view = self._scale_view_class(self.context, self.request, **info)\n@@ -382,21 +392,27 @@ def publishTraverse(self, request, name):\n                 name, ext = name.rsplit(".", 1)\n             value = self.get_orig_image(name)\n             scale_view = self._scale_view_class(\n-                self.context, self.request, data=value, fieldname=name,\n+                self.context,\n+                self.request,\n+                data=value,\n+                fieldname=name,\n             )\n             return scale_view\n         raise NotFound(self, name, self.request)\n \n     def traverse(self, name, furtherPath):\n-        """ used for path traversal, i.e. in zope page templates """\n+        """used for path traversal, i.e. in zope page templates"""\n         # validate access\n         value = self.guarded_orig_image(name)\n         if not furtherPath:\n             image = self._scale_view_class(\n-                self.context, self.request, data=value, fieldname=name,\n+                self.context,\n+                self.request,\n+                data=value,\n+                fieldname=name,\n             )\n         else:\n-            return ImmutableTraverser(self.scale(name, furtherPath[-1]))\n+            return ImmutableTraverser(self.scale(name, furtherPath[-1], pre=True))\n \n         if image is not None:\n             return image.tag()\n@@ -481,13 +497,18 @@ def scale(\n         height=None,\n         width=None,\n         direction="thumbnail",\n-        **parameters\n+        pre=False,\n+        include_srcset=None,\n+        **parameters,\n     ):\n         if fieldname is None:\n-            primary_field = IPrimaryFieldInfo(self.context, None)\n-            if primary_field is None:\n+            try:\n+                primary = IPrimaryFieldInfo(self.context, None)\n+            except TypeError:\n+                return\n+            if primary is None:\n                 return  # 404\n-            fieldname = primary_field.fieldname\n+            fieldname = primary.fieldname\n         if scale is not None:\n             if width is not None or height is not None:\n                 logger.warn(\n@@ -503,28 +524,39 @@ def scale(\n             alsoProvides(self.request, IDisableCSRFProtection)\n         storage = getMultiAdapter(\n             (self.context, functools.partial(self.modified, fieldname)),\n-            IImageScaleStorage\n+            IImageScaleStorage,\n         )\n-        info = storage.scale(\n+        if pre:\n+            scale_method = storage.pre_scale\n+        else:\n+            scale_method = storage.scale\n+        info = scale_method(\n             fieldname=fieldname,\n             height=height,\n             width=width,\n             direction=direction,\n             scale=scale,\n-            **parameters\n+            **parameters,\n         )\n         if info is None:\n             return  # 404\n \n-        info["srcset"] = self.calculate_srcset(\n-            fieldname=fieldname,\n-            height=height,\n-            width=width,\n-            direction=direction,\n-            scale=scale,\n-            storage=storage,\n-            **parameters\n-        )\n+        # Do we want to include srcset info for HiDPI?\n+        # If there is no explicit True/False given, we look at the value of \'pre\'.\n+        # When \'pre\' is False, the visitor is requesting a scale via a url,\n+        # so we only want a single image and not any fancy extras.\n+        if include_srcset is None and pre:\n+            include_srcset = True\n+        if include_srcset:\n+            info["srcset"] = self.calculate_srcset(\n+                fieldname=fieldname,\n+                height=height,\n+                width=width,\n+                direction=direction,\n+                scale=scale,\n+                storage=storage,\n+                **parameters,\n+            )\n         info["fieldname"] = fieldname\n         scale_view = self._scale_view_class(self.context, self.request, **info)\n         return scale_view\n@@ -537,7 +569,7 @@ def calculate_srcset(\n         width=None,\n         direction="thumbnail",\n         storage=None,\n-        **parameters\n+        **parameters,\n     ):\n         srcset = []\n         if storage is None:\n@@ -549,16 +581,17 @@ def calculate_srcset(\n             if width and orig_width and orig_width < width * hdScale["scale"]:\n                 continue\n             parameters["quality"] = hdScale["quality"]\n-            scale_src = storage.scale(\n+            scale_src = storage.pre_scale(\n                 fieldname=fieldname,\n                 height=height * hdScale["scale"] if height else height,\n                 width=width * hdScale["scale"] if width else width,\n                 direction=direction,\n-                **parameters\n+                **parameters,\n             )\n+            if scale_src is None:\n+                continue\n             scale_src["scale"] = hdScale["scale"]\n-            if scale_src is not None:\n-                srcset.append(scale_src)\n+            srcset.append(scale_src)\n         return srcset\n \n     def tag(\n@@ -568,11 +601,60 @@ def tag(\n         height=None,\n         width=None,\n         direction="thumbnail",\n-        **kwargs\n+        **kwargs,\n     ):\n-        scale = self.scale(fieldname, scale, height, width, direction)\n+        scale = self.scale(fieldname, scale, height, width, direction, pre=True)\n         return scale.tag(**kwargs) if scale else None\n \n+    def picture(\n+        self,\n+        fieldname=None,\n+        picture_variant=None,\n+        alt=None,\n+        css_class=None,\n+        title=_marker,\n+        **kwargs,\n+    ):\n+        img2picturetag = Img2PictureTag()\n+        picture_variant_config = get_picture_variants().get(picture_variant)\n+        if not picture_variant_config:\n+            logger.warning(\n+                "Could not find the given picture_variant %s, "\n+                "creating ordinary img tag instead!",\n+                picture_variant\n+            )\n+            if picture_variant in self.available_sizes:\n+                # We have a bit of luck: we have a scale with the same name\n+                # as the picture variant.\n+                scale = picture_variant\n+            else:\n+                scale = None\n+            return self.tag(\n+                fieldname=fieldname,\n+                scale=scale,\n+                alt=alt,\n+                css_class=css_class,\n+                title=title,\n+                **kwargs,\n+            )\n+\n+        sourceset = picture_variant_config.get("sourceset")\n+        scale = self.scale(fieldname, sourceset[-1].get("scale"), pre=True)\n+        attributes = {}\n+        attributes["class"] = css_class and [css_class] or []\n+        if not attributes["class"]:\n+            del attributes["class"]\n+        attributes["src"] = scale.url\n+        attributes["width"] = scale.width\n+        attributes["height"] = scale.height\n+        if title is _marker:\n+            attributes["title"] = self.context.Title()\n+        elif title:\n+            attributes["title"] = title\n+        if alt:\n+            attributes["alt"] = alt\n+        return img2picturetag.create_picture_tag(sourceset, attributes, resolve_urls=True, uid=scale.context.UID(), fieldname=fieldname).prettify()\n+\n \n class NavigationRootScaling(ImageScaling):\n     def _scale_cachekey(method, self, brain, fieldname, **kwargs):\n@@ -590,3 +672,33 @@ def tag(self, brain, fieldname, **kwargs):\n         images = obj.restrictedTraverse("@@images")\n         tag = images.tag(fieldname, **kwargs)\n         return tag\n+\n+\n+def _scale_sort_key(item):\n+    key, value = item\n+    try:\n+        fieldname, width, uid = key.split("-")\n+        width = int(width)\n+    except (ValueError, IndexError, TypeError):\n+        return (key,)\n+    return (fieldname, width, uid)\n+\n+\n+class ImagesTest(BrowserView):\n+    """View for Editors to check how images look and what scales are stored."""\n+\n+    @property\n+    def storage(self):\n+        return getMultiAdapter((self.context, None), IImageScaleStorage)\n+\n+    def stored_scales(self):\n+        return sorted(self.storage.items(), key=_scale_sort_key)\n+\n+    def clear(self):\n+        """Clear the scales."""\n+        PostOnly(self.request)\n+        self.storage.clear()\n+        url = self.context.absolute_url()\n+        logger.info("Scale storage cleared for %s", url)\n+        self.request.response.redirect(f"{url}/@@images-test")\n+        return "cleared"\ndiff --git a/plone/namedfile/scaling.zcml b/plone/namedfile/scaling.zcml\nindex a4ae5b2..3a4d58e 100644\n--- a/plone/namedfile/scaling.zcml\n+++ b/plone/namedfile/scaling.zcml\n@@ -4,6 +4,7 @@\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:browser="http://namespaces.zope.org/browser">\n   <include package="zope.annotation" />\n+  <include package="Products.CMFCore" file="permissions.zcml" />\n   <browser:page\n       allowed_attributes="scale tag"\n       class=".scaling.ImageScaling"\n@@ -11,6 +12,20 @@\n       name="images"\n       permission="zope2.View"\n   />\n+  <browser:page\n+      for=".interfaces.IImageScaleTraversable"\n+      name="images-test"\n+      class=".scaling.ImagesTest"\n+      template="test.pt"\n+      permission="cmf.ModifyPortalContent"\n+  />\n+  <browser:page\n+      for=".interfaces.IImageScaleTraversable"\n+      name="images-clear"\n+      class=".scaling.ImagesTest"\n+      attribute="clear"\n+      permission="cmf.ModifyPortalContent"\n+  />\n   <browser:page\n       allowed_attributes="scale tag"\n       class=".scaling.NavigationRootScaling"\ndiff --git a/plone/namedfile/test.pt b/plone/namedfile/test.pt\nnew file mode 100644\nindex 0000000..d15efb0\n--- /dev/null\n+++ b/plone/namedfile/test.pt\n@@ -0,0 +1,178 @@\n+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n+    xmlns:tal="http://xml.zope.org/namespaces/tal"\n+    xmlns:metal="http://xml.zope.org/namespaces/metal"\n+    xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+    lang="en"\n+    metal:use-macro="context/@@main_template/macros/master"\n+    i18n:domain="plone">\n+<body>\n+\n+<metal:content-core fill-slot="content-core">\n+<metal:block define-macro="content-core"\n+             tal:define="content_type python: context.image.contentType;\n+                         size context/image/getSize;\n+                         image_dimension context/image/getImageSize;\n+                         images context/@@images;\n+                         context_url context/absolute_url;\n+                         use_MB python: size > 1024*1024;\n+                         dimension python: str(image_dimension[0])+\'x\'+str(image_dimension[1]);\n+                         filename python: context.image.filename;\n+                         mimetype_icon python: \'mimetype-\' + content_type;\n+                         download_url python: \'{}/@@download/image/{}\'.format(context_url, filename)">\n+  <p>\n+    Go to:\n+    <a href="#examples">examples</a>,\n+    <a href="#cover">cover</a>,\n+    <a href="#contain">contain</a>,\n+    <a href="#picture">picture tags</a>,\n+    <a href="#stored">stored scales</a>,\n+    <a href="#clear">clear</a>\n+  </p>\n+  <section class="section section-main">\n+    <h3>Thumb with info</h3>\n+    <p>Standard display of Image content type, but using thumb scale</p>\n+    <figure class="figure">\n+      <a href="${context_url}/image_view_fullscreen"\n+         tal:define="img_tag python:images.tag(\'image\', scale=\'thumb\', css_class=\'figure-img img-fluid\')"\n+         >\n+        <img tal:replace="structure img_tag" />\n+      </a>\n+    </figure>\n+\n+    <div class="h5 mb-2">\n+      <a href="${python:download_url}" tal:content="python: filename">Filename</a>\n+    </div>\n+    <div class="metadata d-flex justify-content-center text-muted small">\n+      <div class="px-2">\n+        <tal:icon tal:replace="structure python:icons.tag(mimetype_icon, tag_class=\'icon-inline\', tag_alt=content_type)" />\n+        <span i18n:translate="image_kind_label" class="d-none">Type</span>\n+        <span tal:replace="python: content_type">image/jpeg</span>\n+      </div>\n+      <div class="px-2">\n+        <tal:icon tal:replace="structure python:icons.tag(\'aspect-ratio\', tag_class=\'icon-inline\', tag_alt=\'Dimension\')" />\n+        <span i18n:translate="image_dimension_label" class="d-none">Dimension</span>\n+        <span tal:replace="python: dimension">400x300</span>\n+      </div>\n+      <div class="px-2">\n+        <tal:icon tal:replace="structure python:icons.tag(\'file-binary\', tag_class=\'icon-inline\', tag_alt=\'Size\')" />\n+        <span i18n:translate="image_size_label" class="d-none">File size</span>\n+        <tal:MB condition="use_MB">${python:round(size/1024/1024, 1)} MB</tal:MB>\n+        <tal:KB condition="not: use_MB">${python:round(size/1024, 1)} KB</tal:KB>\n+      </div>\n+    </div>\n+\n+  </section>\n+\n+  <section class="section section-actions">\n+    <a class="btn btn-primary download" href="${python:download_url}" i18n:translate="">Download</a>\n+    <a class="btn btn-primary fullscreen" href="${context_url}/image_view_fullscreen"><span i18n:translate="label_click_to_view_full_image">View full-size image</span></a>\n+  </section>\n+  <hr />\n+  <section id="examples">\n+    <h2>Examples with direction/mode</h2>\n+\n+    <h3>Mini</h3>\n+    <figure class="figure"\n+      tal:define="img_tag python:images.tag(\'image\', scale=\'mini\')">\n+      <img tal:replace="structure img_tag" />\n+      <br /><code tal:content="img_tag" />\n+    </figure>\n+\n+    <h3 id="cover">Mini direction=cover</h3>\n+    <figure class="figure"\n+      tal:define="img_tag python:images.tag(\'image\', scale=\'mini\', direction=\'cover\')">\n+      <img tal:replace="structure img_tag" />\n+      <br /><code tal:content="img_tag" />\n+    </figure>\n+\n+    <h3 id="contain">Mini direction=contain</h3>\n+    <figure class="figure"\n+      tal:define="img_tag python:images.tag(\'image\', scale=\'mini\', direction=\'contain\')">\n+      <img tal:replace="structure img_tag" />\n+      <br /><code tal:content="img_tag" />\n+    </figure>\n+  </section>\n+\n+  <section id="picture">\n+    <h2>Picture tags</h2>\n+    <p>\n+      Temporary note:\n+      Picture tags only work on Plone 6, with several other branches merged.\n+      See <a href="https://github.com/plone/buildout.coredev/blob/6.0/plips/plip-image-srcsets.cfg">coredev</a>.\n+      If not available (like on Plone 5.2), an ordinary image tag is created.\n+    </p>\n+\n+    <h3 id="picture_tag_large">Picture Tag Large</h3>\n+    <p>\n+      Generate a picture tag from configured picture_variant `large`.\n+    </p>\n+    <p>\n+      <picture\n+        tal:replace="structure python:images.picture(\'image\', picture_variant=\'large\')" />\n+    </p>\n+\n+    <h3 id="picture_tag_medium">Picture Tag Medium</h3>\n+    <p>\n+      Generate a picture tag from configured picture_variant `medium`.\n+      This picture tag contains multiple source tags with media queries for art direction.\n+    </p>\n+    <p>\n+      <picture\n+        tal:replace="structure python:images.picture(\'image\', picture_variant=\'medium\')" />\n+    </p>\n+\n+    <h3 id="picture_tag_small">Picture Tag Small</h3>\n+    <p>\n+      Generate a picture tag from configured picture_variant `small`.\n+    </p>\n+    <p>\n+      <picture\n+        tal:replace="structure python:images.picture(\'image\', picture_variant=\'small\', title=\'\')" />\n+    </p>\n+\n+    <h3 id="picture_tag_small">Picture Tag Small with title/alt</h3>\n+    <p>\n+      Generate a picture tag from configured picture_variant `small` wit title and alt attributess set.\n+    </p>\n+    <p>\n+      <picture\n+        tal:replace="structure python:images.picture(\'image\', picture_variant=\'small\', title=\'Custom picture title\', alt=\'alternative picture text\')" />\n+    </p>\n+  </section>\n+\n+  <section class="section" id="stored">\n+    <h3>Stored scales</h3>\n+    <div class="accordion" id="accordion-stored">\n+      <div class="accordion-item" tal:repeat="(uid, info) view/stored_scales">\n+        <h4 class="accordion-header" id="heading-${uid}">\n+          <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-${uid}" aria-expanded="false" aria-controls="collapse-${uid}">\n+            <code>${uid}</code>\n+          </button>\n+        </h4>\n+        <div id="collapse-${uid}" class="accordion-collapse collapse" aria-labelledby="heading-${uid}" data-bs-parent="#accordion-stored">\n+          <div class="accordion-body">\n+            <tal:block repeat="item python:sorted(info.items())">\n+              <br tal:condition="not:repeat/item/start" />\n+              <code>${python:item[0]}: ${python:item[1]}</code>\n+            </tal:block>\n+            <br />\n+            <a target="_blank"\n+               href="${context_url}/@@images/${uid}">Open in new tab</a>\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  </section>\n+\n+  <section class="section" id="clear">\n+    <h3>Clear scales</h3>\n+    <form method="post" action="${context/@@plone_context_state/object_url}/@@images-clear">\n+      <button>Clear</button>\n+    </form>\n+  </section>\n+\n+</metal:block>\n+</metal:content-core>\n+\n+</body>\n+</html>\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex 64edf02..761cf1b 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -1,5 +1,7 @@\n # -*- coding: utf-8 -*-\n+from contextlib import contextmanager\n from DateTime import DateTime\n+from doctest import _ellipsis_match\n from OFS.SimpleItem import SimpleItem\n from plone.namedfile.field import NamedImage as NamedImageField\n from plone.namedfile.file import NamedImage\n@@ -9,11 +11,14 @@\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n from plone.namedfile.tests import getFile\n+from plone.rfc822.interfaces import IPrimaryFieldInfo\n from plone.scale.interfaces import IScaledImageQuality\n from plone.scale.storage import IImageScaleStorage\n from six import BytesIO\n+from unittest.mock import patch\n from zExceptions import Unauthorized\n from zope.annotation import IAttributeAnnotatable\n+from zope.component import adapter\n from zope.component import getGlobalSiteManager\n from zope.component import getSiteManager\n from zope.interface import implementer\n@@ -21,11 +26,19 @@\n from zope.publisher.interfaces import NotFound\n \n import PIL\n+import plone.namedfile.picture\n+import plone.namedfile.scaling\n import re\n import time\n import unittest\n \n \n+# Unique scale name used to be a uuid.uui4(),\n+# which is a combination of hexadecimal digits with dashes, total 36.\n+# Now it is \'imagescalename-width-hash\', where hash is 32.\n+PAT_UID_SCALE = r"[0-9a-z]*-[0-9]*-[0-9a-f]{32}"\n+\n+\n def wait_to_ensure_modified():\n     # modified is measured in milliseconds\n     # wait 5ms to ensure modified will have changed\n@@ -42,16 +55,94 @@ def assertImage(testcase, data, format_, size):\n     testcase.assertEqual(image.size, size)\n \n \n+def patch_Img2PictureTag_picture_variants():\n+\n+    return {\n+        "large": {\n+            "title": "Large",\n+            "sourceset": [\n+                {\n+                    "scale": "larger",\n+                    "additionalScales": [\n+                        "preview",\n+                        "teaser",\n+                        "large",\n+                        "great",\n+                        "huge",\n+                    ],\n+                }\n+            ],\n+        },\n+        "medium": {\n+            "title": "Medium",\n+            "sourceset": [\n+                {\n+                    "scale": "teaser",\n+                    "additionalScales": ["preview", "large", "larger", "great"],\n+                }\n+            ],\n+        },\n+        "small": {\n+            "title": "Small",\n+            "sourceset": [\n+                {\n+                    "scale": "preview",\n+                    "additionalScales": ["preview", "large", "larger"],\n+                }\n+            ],\n+        },\n+    }\n+\n+\n+def patch_Img2PictureTag_empty_picture_variants():\n+    # You would have this in Plone 5.2, or if someone empties the registry setting.\n+    return {}\n+\n+\n+def patch_Img2PictureTag_allowed_scales():\n+\n+    return {\n+        "huge": (1600, 65536),\n+        "great": (1200, 65536),\n+        "larger": (1000, 65536),\n+        "large": (800, 65536),\n+        "teaser": (600, 65536),\n+        "preview": (400, 65536),\n+        "mini": (200, 65536),\n+        "thumb": (128, 128),\n+        "tile": (64, 64),\n+        "icon": (32, 32),\n+        "listing": (16, 16),\n+    }\n+\n+\n+\n @implementer(IAttributeAnnotatable, IHasImage)\n class DummyContent(SimpleItem):\n     image = None\n     modified = DateTime\n-    id = __name__ = \'item\'\n-    title = \'foo\'\n+    id = __name__ = "item"\n+    title = "foo"\n \n     def Title(self):\n         return self.title\n \n+    def UID(self):\n+        return "dummy_uuid"\n+\n+\n+@implementer(IPrimaryFieldInfo)\n+@adapter(DummyContent)\n+class PrimaryFieldInfo(object):\n+    def __init__(self, context):\n+        self.context = context\n+        self.fieldname = "image"\n+        self.field = self.context.image\n+\n+    @property\n+    def value(self):\n+        return self.field\n+\n \n class MockNamedImage(NamedImage):\n     _p_mtime = DateTime().millis()\n@@ -59,7 +150,7 @@ class MockNamedImage(NamedImage):\n \n @implementer(IScaledImageQuality)\n class DummyQualitySupplier(object):\n-    """ fake utility for plone.app.imaging\'s scaling quality """\n+    """fake utility for plone.app.imaging\'s scaling quality"""\n \n     def getQuality(self):\n         return 1  # as bad as it gets\n@@ -87,9 +178,9 @@ def info(self):\n             data=self.data,\n             width=self._width,\n             height=self._height,\n-            mimetype=f\'image/{self.format.lower()}\',\n+            mimetype=f"image/{self.format.lower()}",\n             key=self.key,\n-            uid=self.uid\n+            uid=self.uid,\n         )\n \n     def absolute_url(self):\n@@ -105,13 +196,30 @@ class FakeImageScaleStorage:\n     """Storage class for FakeImages."""\n \n     def __init__(self, context, modified=None):\n-        """ Adapt the given context item and optionally provide a callable\n-            to return a representation of the last modification date, which\n-            can be used to invalidate stored scale data on update. """\n+        """Adapt the given context item and optionally provide a callable\n+        to return a representation of the last modification date, which\n+        can be used to invalidate stored scale data on update."""\n         self.context = context\n         self.modified = modified\n         self.storage = context._scales\n \n+    def pre_scale(self, factory=None, **parameters):\n+        """Find image scale data for the given parameters or pre-create it.\n+\n+        In our version, we only support height and width.\n+        """\n+        stripped_parameters = {\n+            "target_height": parameters.get("height"),\n+            "target_width": parameters.get("width"),\n+        }\n+        key = self.hash(**stripped_parameters)\n+        info = self.get_info_by_hash(key)\n+        if info is not None:\n+            # Note: we could do something with self.modified here,\n+            # but we choose to ignore it.\n+            return info\n+        return self.create_scale(no_scale=True, **stripped_parameters)\n+\n     def scale(self, factory=None, **parameters):\n         """Find image scale data for the given parameters or create it.\n \n@@ -122,7 +230,6 @@ def scale(self, factory=None, **parameters):\n             "target_width": parameters.get("width"),\n         }\n         key = self.hash(**stripped_parameters)\n-        storage = self.storage\n         info = self.get_info_by_hash(key)\n         if info is not None:\n             # Note: we could do something with self.modified here,\n@@ -130,7 +237,7 @@ def scale(self, factory=None, **parameters):\n             return info\n         return self.create_scale(**stripped_parameters)\n \n-    def create_scale(self, target_height=None, target_width=None):\n+    def create_scale(self, target_height=None, target_width=None, no_scale=False):\n         if target_height is None and target_width is None:\n             # Return the original.\n             return self.context.info\n@@ -145,20 +252,44 @@ def create_scale(self, target_height=None, target_width=None):\n         uid = f"uid-{len(self.storage)}"\n         key = self.hash(target_height=target_height, target_width=target_width)\n \n-        # Create a new fake image for this scale.\n-        scale = FakeImage(value, format, key=key, uid=uid)\n+        if no_scale:\n+            info = dict(\n+                data=None,\n+                width=self._width,\n+                height=self._height,\n+                mimetype=f"image/{self.format.lower()}",\n+                key=self.key,\n+                uid=self.uid,\n+            )\n+        else:\n+            # Create a new fake image for this scale.\n+            scale = FakeImage(value, format, key=key, uid=uid)\n+            info = scale.info\n \n-        # Store the scale and return the info.\n-        self.storage[uid] = scale.info\n+        # Store the real scale or placeholder scale and return the info.\n+        self.storage[uid] = info\n         return scale.info\n \n     def __getitem__(self, uid):\n-        """ Find image scale data based on its uid. """\n+        """Find image scale data based on its uid."""\n         return self.storage[uid]\n \n     def get(self, uid, default=None):\n         return self.storage.get(uid, default)\n \n+    def get_or_generate(self, uid, default=None):\n+        info = self.storage.get(uid, default)\n+        if info is None:\n+            return\n+        if info.get("data"):\n+            return info\n+        # We have a placeholder. Get real data.\n+        stripped_parameters = {\n+            "target_height": info.get("height"),\n+            "target_width": info.get("width"),\n+        }\n+        return self.create_scale(**stripped_parameters)\n+\n     def hash(self, **parameters):\n         return tuple(parameters.values())\n \n@@ -168,184 +299,315 @@ def get_info_by_hash(self, hash):\n                 return value\n \n \n+# @patch.multiple(\n+#     "plone.namedfile.scaling.Img2PictureTag",\n+#     allowed_scales=patch_Img2PictureTag_allowed_scales,\n+#     picture_variants=patch_Img2PictureTag_picture_variants,\n+#     spec=True,\n+# )\n class ImageScalingTests(unittest.TestCase):\n \n     layer = PLONE_NAMEDFILE_INTEGRATION_TESTING\n \n     def setUp(self):\n-        data = getFile(\'image.png\')\n+        sm = getSiteManager()\n+        sm.registerAdapter(PrimaryFieldInfo)\n+\n+        data = getFile("image.png")\n         item = DummyContent()\n-        item.image = MockNamedImage(data, \'image/png\', u\'image.png\')\n-        self.layer[\'app\']._setOb(\'item\', item)\n-        self.item = self.layer[\'app\'].item\n+        item.image = MockNamedImage(data, "image/png", "image.png")\n+        self.layer["app"]._setOb("item", item)\n+        self.item = self.layer["app"].item\n+        self._orig_sizes = ImageScaling._sizes\n         self.scaling = ImageScaling(self.item, None)\n \n+    def tearDown(self):\n+        ImageScaling._sizes = self._orig_sizes\n+        sm = getSiteManager()\n+        sm.unregisterAdapter(PrimaryFieldInfo)\n+\n     def testCreateScale(self):\n-        foo = self.scaling.scale(\'image\', width=100, height=80)\n+        foo = self.scaling.scale("image", width=100, height=80)\n         self.assertTrue(foo.uid)\n-        self.assertEqual(foo.mimetype, \'image/png\')\n+        self.assertEqual(foo.mimetype, "image/png")\n         self.assertIsInstance(foo.mimetype, str)\n-        self.assertEqual(foo.data.contentType, \'image/png\')\n+        self.assertEqual(foo.data.contentType, "image/png")\n         self.assertIsInstance(foo.data.contentType, str)\n         self.assertEqual(foo.width, 80)\n         self.assertEqual(foo.height, 80)\n-        assertImage(self, foo.data.data, \'PNG\', (80, 80))\n+        assertImage(self, foo.data.data, "PNG", (80, 80))\n \n     def testCreateExactScale(self):\n-        foo = self.scaling.scale(\'image\', width=100, height=80)\n+        foo = self.scaling.scale("image", width=100, height=80)\n         self.assertIsNot(foo.data, self.item.image)\n \n         # test that exact scale without parameters returns original\n-        foo = self.scaling.scale(\'image\',\n-                                 width=self.item.image._width,\n-                                 height=self.item.image._height)\n+        foo = self.scaling.scale(\n+            "image", width=self.item.image._width, height=self.item.image._height\n+        )\n         self.assertIs(foo.data, self.item.image)\n \n-        foo = self.scaling.scale(\'image\',\n-                                 width=self.item.image._width,\n-                                 height=self.item.image._height,\n-                                 quality=80)\n+        foo = self.scaling.scale(\n+            "image",\n+            width=self.item.image._width,\n+            height=self.item.image._height,\n+            quality=80,\n+        )\n         self.assertIsNot(foo.data, self.item.image)\n \n     def testCreateHighPixelDensityScale(self):\n-        self.scaling.getHighPixelDensityScales = lambda: [{\'scale\': 2, \'quality\': 66}]\n-        foo = self.scaling.scale(\'image\', width=100, height=80)\n+        self.scaling.getHighPixelDensityScales = lambda: [{"scale": 2, "quality": 66}]\n+        foo = self.scaling.scale("image", width=100, height=80, include_srcset=True)\n         self.assertTrue(foo.srcset)\n-        self.assertEqual(foo.srcset[0][\'mimetype\'], \'image/png\')\n-        self.assertEqual(foo.srcset[0][\'height\'], 160)\n-        self.assertEqual(foo.srcset[0][\'width\'], 160)\n-        assertImage(self, foo.srcset[0][\'data\'].data, \'PNG\', (160, 160))\n+        self.assertEqual(foo.srcset[0]["mimetype"], "image/png")\n+        self.assertEqual(foo.srcset[0]["height"], 160)\n+        self.assertEqual(foo.srcset[0]["width"], 160)\n+        # It is a pre-registered scale, not yet rendered.\n+        self.assertEqual(foo.srcset[0]["data"], None)\n+        # Render the scale by pretending to visit its url.\n+        bar = self.scaling.publishTraverse(self.layer["request"], foo.srcset[0]["uid"])\n+        assertImage(self, bar.data.data, "PNG", (160, 160))\n \n     def testCreateScaleWithoutData(self):\n         item = DummyContent()\n         scaling = ImageScaling(item, None)\n-        foo = scaling.scale(\'image\', width=100, height=80)\n+        foo = scaling.scale("image", width=100, height=80)\n         self.assertEqual(foo, None)\n \n     def testCreateHighPixelDensityScaleWithoutData(self):\n         item = DummyContent()\n         scaling = ImageScaling(item, None)\n-        scaling.getHighPixelDensityScales = lambda: [{\'scale\': 2, \'quality\': 66}]\n-        foo = scaling.scale(\'image\', width=100, height=80)\n-        self.assertFalse(hasattr(foo, \'srcset\'))\n+        scaling.getHighPixelDensityScales = lambda: [{"scale": 2, "quality": 66}]\n+        foo = scaling.scale("image", width=100, height=80)\n+        self.assertFalse(hasattr(foo, "srcset"))\n \n     def testGetScaleByName(self):\n-        self.scaling.available_sizes = {\'foo\': (60, 60)}\n-        foo = self.scaling.scale(\'image\', scale=\'foo\')\n+        self.scaling.available_sizes = {"foo": (60, 60)}\n+        foo = self.scaling.scale("image", scale="foo")\n         self.assertTrue(foo.uid)\n-        self.assertEqual(foo.mimetype, \'image/png\')\n+        self.assertEqual(foo.mimetype, "image/png")\n         self.assertIsInstance(foo.mimetype, str)\n-        self.assertEqual(foo.data.contentType, \'image/png\')\n+        self.assertEqual(foo.data.contentType, "image/png")\n         self.assertIsInstance(foo.data.contentType, str)\n         self.assertEqual(foo.width, 60)\n         self.assertEqual(foo.height, 60)\n-        assertImage(self, foo.data.data, \'PNG\', (60, 60))\n+        assertImage(self, foo.data.data, "PNG", (60, 60))\n         expected_url = re.compile(\n-            r\'http://nohost/item/@@images/[-a-z0-9]{36}\\.png\')\n+            r"http://nohost/item/@@images/{0}.png".format(PAT_UID_SCALE)\n+        )\n         self.assertTrue(expected_url.match(foo.absolute_url()))\n         self.assertEqual(foo.url, foo.absolute_url())\n \n         tag = foo.tag()\n         base = self.item.absolute_url()\n-        expected = \\\n-            r\'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" \' \\\n+        expected = (\n+            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" />\'.format(\n-                base,\n+                base, PAT_UID_SCALE\n             )\n+        )\n         groups = re.match(expected, tag).groups()\n         self.assertTrue(groups, tag)\n \n     def testGetHighPixelDensityScaleByName(self):\n-        self.scaling.getHighPixelDensityScales = lambda: [{\'scale\': 2, \'quality\': 66}]\n-        self.scaling.available_sizes = {\'foo\': (60, 60)}\n-        foo = self.scaling.scale(\'image\', scale=\'foo\')\n+        self.scaling.getHighPixelDensityScales = lambda: [{"scale": 2, "quality": 66}]\n+        self.scaling.available_sizes = {"foo": (60, 60)}\n+        foo = self.scaling.scale("image", scale="foo", include_srcset=True)\n         self.assertTrue(foo.srcset)\n-        self.assertEqual(foo.srcset[0][\'mimetype\'], \'image/png\')\n-        self.assertEqual(foo.srcset[0][\'width\'], 120)\n-        self.assertEqual(foo.srcset[0][\'height\'], 120)\n-        assertImage(self, foo.srcset[0][\'data\'].data, \'PNG\', (120, 120))\n+        self.assertEqual(foo.srcset[0]["mimetype"], "image/png")\n+        self.assertEqual(foo.srcset[0]["width"], 120)\n+        self.assertEqual(foo.srcset[0]["height"], 120)\n+\n+        # It is a pre-registered scale, not yet rendered.\n+        self.assertEqual(foo.srcset[0]["data"], None)\n+        # Render the scale by pretending to visit its url.\n+        bar = self.scaling.publishTraverse(self.layer["request"], foo.srcset[0]["uid"])\n+        assertImage(self, bar.data.data, "PNG", (120, 120))\n \n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}\'.format(base) +\n-            r\'/@@images/([-0-9a-f]{36})\'\n-            r\'.(jpeg|gif|png)" \'\n+            r\'<img src="{0}\'.format(base)\n+            + r"/@@images/({0})".format(PAT_UID_SCALE)\n+            + r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n-            r\'srcset="http://nohost/item/@@images/([-0-9a-f]{36})\'\n-            r\'.(jpeg|gif|png)\'\n-            r\' 2x" />\')\n+            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE)\n+            + r".(jpeg|gif|png)"\n+            r\' 2x" />\'\n+        )\n         groups = re.match(expected, tag).groups()\n         self.assertTrue(groups, tag)\n \n     def testGetRetinaScaleByWidthAndHeight(self):\n-        self.scaling.getHighPixelDensityScales = lambda: [{\'scale\': 2, \'quality\': 66}]\n-        foo = self.scaling.scale(\'image\', width=60, height=60)\n+        self.scaling.getHighPixelDensityScales = lambda: [{"scale": 2, "quality": 66}]\n+        foo = self.scaling.scale("image", width=60, height=60, include_srcset=True)\n         self.assertTrue(foo.srcset)\n-        self.assertEqual(foo.srcset[0][\'mimetype\'], \'image/png\')\n-        self.assertEqual(foo.srcset[0][\'width\'], 120)\n-        self.assertEqual(foo.srcset[0][\'height\'], 120)\n-        assertImage(self, foo.srcset[0][\'data\'].data, \'PNG\', (120, 120))\n+        self.assertEqual(foo.srcset[0]["mimetype"], "image/png")\n+        self.assertEqual(foo.srcset[0]["width"], 120)\n+        self.assertEqual(foo.srcset[0]["height"], 120)\n+\n+        # It is a pre-registered scale, not yet rendered.\n+        self.assertEqual(foo.srcset[0]["data"], None)\n+        # Render the scale by pretending to visit its url.\n+        bar = self.scaling.publishTraverse(self.layer["request"], foo.srcset[0]["uid"])\n+        assertImage(self, bar.data.data, "PNG", (120, 120))\n \n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}\'.format(base) +\n-            r\'/@@images/([-0-9a-f]{36})\'\n-            r\'.(jpeg|gif|png)" \'\n+            r\'<img src="{0}\'.format(base)\n+            + r"/@@images/({0})".format(PAT_UID_SCALE)\n+            + r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n-            r\'srcset="http://nohost/item/@@images/([-0-9a-f]{36})\'\n-            r\'.(jpeg|gif|png)\'\n-            r\' 2x" />\')\n+            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE)\n+            + r".(jpeg|gif|png)"\n+            r\' 2x" />\'\n+        )\n         groups = re.match(expected, tag).groups()\n         self.assertTrue(groups, tag)\n \n     def testGetRetinaScaleByWidthOnly(self):\n-        self.scaling.getHighPixelDensityScales = lambda: [{\'scale\': 2, \'quality\': 66}]\n-        foo = self.scaling.scale(\'image\', width=60)\n+        self.scaling.getHighPixelDensityScales = lambda: [{"scale": 2, "quality": 66}]\n+        foo = self.scaling.scale("image", width=60, include_srcset=True)\n         self.assertTrue(foo.srcset)\n-        self.assertEqual(foo.srcset[0][\'mimetype\'], \'image/png\')\n-        self.assertEqual(foo.srcset[0][\'width\'], 120)\n-        self.assertEqual(foo.srcset[0][\'height\'], 120)\n-        assertImage(self, foo.srcset[0][\'data\'].data, \'PNG\', (120, 120))\n+        self.assertEqual(foo.srcset[0]["mimetype"], "image/png")\n+        self.assertEqual(foo.srcset[0]["width"], 120)\n+        self.assertEqual(foo.srcset[0]["height"], 120)\n+        # It is a pre-registered scale, not yet rendered.\n+        self.assertEqual(foo.srcset[0]["data"], None)\n+        # Render the scale by pretending to visit its url.\n+        bar = self.scaling.publishTraverse(self.layer["request"], foo.srcset[0]["uid"])\n+        assertImage(self, bar.data.data, "PNG", (120, 120))\n \n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}\'.format(base) +\n-            r\'/@@images/([-0-9a-f]{36})\'\n-            r\'.(jpeg|gif|png)" \'\n+            r\'<img src="{0}\'.format(base)\n+            + r"/@@images/({0})".format(PAT_UID_SCALE)\n+            + r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n-            r\'srcset="http://nohost/item/@@images/([-0-9a-f]{36})\'\n-            r\'.(jpeg|gif|png)\'\n-            r\' 2x" />\')\n+            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE)\n+            + r".(jpeg|gif|png)"\n+            r\' 2x" />\'\n+        )\n         groups = re.match(expected, tag).groups()\n         self.assertTrue(groups, tag)\n \n     def testGetRetinaScaleByHeightOnly(self):\n-        self.scaling.getHighPixelDensityScales = lambda: [{\'scale\': 2, \'quality\': 66}]\n-        foo = self.scaling.scale(\'image\', height=60)\n+        self.scaling.getHighPixelDensityScales = lambda: [{"scale": 2, "quality": 66}]\n+        foo = self.scaling.scale("image", height=60, include_srcset=True)\n         self.assertTrue(foo.srcset)\n-        self.assertEqual(foo.srcset[0][\'mimetype\'], \'image/png\')\n-        self.assertEqual(foo.srcset[0][\'width\'], 120)\n-        self.assertEqual(foo.srcset[0][\'height\'], 120)\n-        assertImage(self, foo.srcset[0][\'data\'].data, \'PNG\', (120, 120))\n+        self.assertEqual(foo.srcset[0]["mimetype"], "image/png")\n+        self.assertEqual(foo.srcset[0]["width"], 120)\n+        self.assertEqual(foo.srcset[0]["height"], 120)\n+        # It is a pre-registered scale, not yet rendered.\n+        self.assertEqual(foo.srcset[0]["data"], None)\n+        # Render the scale by pretending to visit its url.\n+        bar = self.scaling.publishTraverse(self.layer["request"], foo.srcset[0]["uid"])\n+        assertImage(self, bar.data.data, "PNG", (120, 120))\n \n         tag = foo.tag()\n         base = self.item.absolute_url()\n         expected = (\n-            r\'<img src="{0}\'.format(base) +\n-            r\'/@@images/([-0-9a-f]{36})\'\n-            r\'.(jpeg|gif|png)" \'\n+            r\'<img src="{0}\'.format(base)\n+            + r"/@@images/({0})".format(PAT_UID_SCALE)\n+            + r\'.(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" \'\n-            r\'srcset="http://nohost/item/@@images/([-0-9a-f]{36})\'\n-            r\'.(jpeg|gif|png)\'\n-            r\' 2x" />\')\n+            r\'srcset="http://nohost/item/@@images/({0})\'.format(PAT_UID_SCALE)\n+            + r".(jpeg|gif|png)"\n+            r\' 2x" />\'\n+        )\n         groups = re.match(expected, tag).groups()\n         self.assertTrue(groups, tag)\n \n+    @patch.object(\n+        plone.namedfile.scaling,\n+        "get_picture_variants",\n+        new=patch_Img2PictureTag_picture_variants,\n+        spec=True,\n+    )\n+    @patch.object(\n+        plone.namedfile.picture,\n+        "get_allowed_scales",\n+        new=patch_Img2PictureTag_allowed_scales,\n+        spec=True,\n+    )\n+    @patch.object(\n+        plone.namedfile.picture, "uuidToObject", spec=True\n+    )\n+    def testGetPictureTagByName(self, mock_uuid_to_object):\n+        ImageScaling._sizes = patch_Img2PictureTag_allowed_scales()\n+        mock_uuid_to_object.return_value = self.item\n+        tag = self.scaling.picture("image", picture_variant="medium")\n+        expected = f"""<picture>\n+ <source srcset="http://nohost/item/@@images/image-600-....png 600w,\n+http://nohost/item/@@images/image-400-....png 400w,\n+http://nohost/item/@@images/image-800-....png 800w,\n+http://nohost/item/@@images/image-1000-....png 1000w,\n+http://nohost/item/@@images/image-1200-....png 1200w"/>\n+ <img height="200" loading="lazy" src="http://nohost/item/@@images/image-600-....png" title="foo" width="200"/>\n+</picture>"""\n+        self.assertTrue(_ellipsis_match(expected, tag))\n+\n+    @patch.object(\n+        plone.namedfile.scaling,\n+        "get_picture_variants",\n+        new=patch_Img2PictureTag_picture_variants,\n+        spec=True,\n+    )\n+    @patch.object(\n+        plone.namedfile.picture,\n+        "get_allowed_scales",\n+        new=patch_Img2PictureTag_allowed_scales,\n+        spec=True,\n+    )\n+    @patch.object(\n+        plone.namedfile.picture, "uuidToObject", spec=True\n+    )\n+    def testGetPictureTagWithAltAndTitle(self, mock_uuid_to_object):\n+        ImageScaling._sizes = patch_Img2PictureTag_allowed_scales()\n+        mock_uuid_to_object.return_value = self.item\n+        tag = self.scaling.picture(\n+            "image",\n+            picture_variant="medium",\n+            alt="Alternative text",\n+            title="Custom title",\n+        )\n+        base = self.item.absolute_url()\n+        expected = f"""<picture>\n+ <source srcset="http://nohost/item/@@images/image-600-....png 600w,\n+http://nohost/item/@@images/image-400-....png 400w,\n+http://nohost/item/@@images/image-800-....png 800w,\n+http://nohost/item/@@images/image-1000-....png 1000w,\n+http://nohost/item/@@images/image-1200-....png 1200w"/>\n+ <img alt="Alternative text" height="200" loading="lazy" src="http://nohost/item/@@images/image-600-....png" title="Custom title" width="200"/>\n+</picture>"""\n+        self.assertTrue(_ellipsis_match(expected, tag))\n+\n+    @patch.object(\n+        plone.namedfile.scaling,\n+        "get_picture_variants",\n+        new=patch_Img2PictureTag_empty_picture_variants,\n+        spec=True,\n+    )\n+    @patch.object(\n+        plone.namedfile.picture,\n+        "get_allowed_scales",\n+        new=patch_Img2PictureTag_allowed_scales,\n+        spec=True,\n+    )\n+    @patch.object(\n+        plone.namedfile.picture, "uuidToObject", spec=True\n+    )\n+    def testGetPictureTagWithoutAnyVariants(self, mock_uuid_to_object):\n+        ImageScaling._sizes = patch_Img2PictureTag_allowed_scales()\n+        mock_uuid_to_object.return_value = self.item\n+        tag = self.scaling.picture("image", picture_variant="medium")\n+        expected = f"""<img src="http://nohost/item/@@images/image-0-....png" title="foo" height="200" width="200" />"""\n+        self.assertTrue(_ellipsis_match(expected, tag))\n+\n     def testGetUnknownScale(self):\n-        foo = self.scaling.scale(\'image\', scale=\'foo?\')\n+        foo = self.scaling.scale("image", scale="foo?")\n         self.assertEqual(foo, None)\n \n     def testScaleInvalidation(self):\n@@ -354,36 +616,36 @@ def testScaleInvalidation(self):\n         # Test that different parameters give different scale\n         self.item.modified = lambda: dt\n         self.item.image._p_mtime = dt.millis()\n-        scale1a = self.scaling.scale(\'image\', width=100, height=80)\n-        scale2a = self.scaling.scale(\'image\', width=80, height=60)\n+        scale1a = self.scaling.scale("image", width=100, height=80)\n+        scale2a = self.scaling.scale("image", width=80, height=60)\n         self.assertNotEqual(scale1a.data, scale2a.data)\n \n         # Test that bare object modification does not invalidate scales\n         self.item.modified = lambda: dt + 1\n-        scale1b = self.scaling.scale(\'image\', width=100, height=80)\n-        scale2b = self.scaling.scale(\'image\', width=80, height=60)\n+        scale1b = self.scaling.scale("image", width=100, height=80)\n+        scale2b = self.scaling.scale("image", width=80, height=60)\n         self.assertNotEqual(scale1b.data, scale2b.data)\n         self.assertEqual(scale1a.data, scale1b.data)\n         self.assertEqual(scale2a.data, scale2b.data)\n \n         # Test that field modification invalidates scales\n         self.item.image._p_mtime = (dt + 1).millis()\n-        scale1b = self.scaling.scale(\'image\', width=100, height=80)\n-        scale2b = self.scaling.scale(\'image\', width=80, height=60)\n+        scale1b = self.scaling.scale("image", width=100, height=80)\n+        scale2b = self.scaling.scale("image", width=80, height=60)\n         self.assertNotEqual(scale1b.data, scale2b.data)\n-        self.assertNotEqual(scale1a.data, scale1b.data, \'scale not updated?\')\n-        self.assertNotEqual(scale2a.data, scale2b.data, \'scale not updated?\')\n+        self.assertNotEqual(scale1a.data, scale1b.data, "scale not updated?")\n+        self.assertNotEqual(scale2a.data, scale2b.data, "scale not updated?")\n \n     def testCustomSizeChange(self):\n         # set custom image sizes & view a scale\n-        self.scaling.available_sizes = {\'foo\': (23, 23)}\n-        foo = self.scaling.scale(\'image\', scale=\'foo\')\n+        self.scaling.available_sizes = {"foo": (23, 23)}\n+        foo = self.scaling.scale("image", scale="foo")\n         self.assertEqual(foo.width, 23)\n         self.assertEqual(foo.height, 23)\n         # now let\'s update the scale dimensions, after which the scale\n         # shouldn\'t be the same...\n-        self.scaling.available_sizes = {\'foo\': (42, 42)}\n-        foo = self.scaling.scale(\'image\', scale=\'foo\')\n+        self.scaling.available_sizes = {"foo": (42, 42)}\n+        foo = self.scaling.scale("image", scale="foo")\n         self.assertEqual(foo.width, 42)\n         self.assertEqual(foo.height, 42)\n \n@@ -393,74 +655,76 @@ def testAvailableSizes(self):\n \n         # a callable can be used to look up the available sizes\n         def custom_available_sizes():\n-            return {\'bar\': (10, 10)}\n+            return {"bar": (10, 10)}\n+\n         sm = getSiteManager()\n-        sm.registerUtility(component=custom_available_sizes,\n-                           provided=IAvailableSizes)\n-        self.assertEqual(self.scaling.available_sizes, {\'bar\': (10, 10)})\n+        sm.registerUtility(component=custom_available_sizes, provided=IAvailableSizes)\n+        self.assertEqual(self.scaling.available_sizes, {"bar": (10, 10)})\n         sm.unregisterUtility(provided=IAvailableSizes)\n         # for testing purposes, the sizes may also be set directly on\n         # the scaling adapter\n-        self.scaling.available_sizes = {\'qux\': (12, 12)}\n-        self.assertEqual(self.scaling.available_sizes, {\'qux\': (12, 12)})\n+        self.scaling.available_sizes = {"qux": (12, 12)}\n+        self.assertEqual(self.scaling.available_sizes, {"qux": (12, 12)})\n \n     def testGuardedAccess(self):\n         # make sure it\'s not possible to access scales of forbidden images\n         self.item.__allow_access_to_unprotected_subobjects__ = 0\n-        self.assertRaises(Unauthorized,\n-                          self.scaling.guarded_orig_image, \'image\')\n+        self.assertRaises(Unauthorized, self.scaling.guarded_orig_image, "image")\n         self.item.__allow_access_to_unprotected_subobjects__ = 1\n \n     def testGetAvailableSizes(self):\n-        self.scaling.available_sizes = {\'foo\': (60, 60)}\n-        assert self.scaling.getAvailableSizes(\'image\') == {\'foo\': (60, 60)}\n+        self.scaling.available_sizes = {"foo": (60, 60)}\n+        assert self.scaling.getAvailableSizes("image") == {"foo": (60, 60)}\n \n     def testGetImageSize(self):\n-        assert self.scaling.getImageSize(\'image\') == (200, 200)\n+        assert self.scaling.getImageSize("image") == (200, 200)\n \n     def testGetOriginalScaleTag(self):\n-        tag = self.scaling.tag(\'image\')\n+        tag = self.scaling.tag("image")\n         base = self.item.absolute_url()\n-        expected = \\\n-            r\'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" \' \\\n+        expected = (\n+            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" />\'.format(\n-                base,\n+                base, PAT_UID_SCALE\n             )\n+        )\n         self.assertTrue(re.match(expected, tag).groups())\n \n     def testScaleOnItemWithNonASCIITitle(self):\n-        self.item.title = u\'\xc3\xbc\'\n-        tag = self.scaling.tag(\'image\')\n+        self.item.title = "\xc3\xbc"\n+        tag = self.scaling.tag("image")\n         base = self.item.absolute_url()\n-        expected = \\\n-            r\'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" \' \\\n+        expected = (\n+            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \'\n             r\'alt="\\xfc" title="\\xfc" height="(\\d+)" width="(\\d+)" />\'.format(\n-                base,\n+                base, PAT_UID_SCALE\n             )\n+        )\n         self.assertTrue(re.match(expected, tag).groups())\n \n     def testScaleOnItemWithUnicodeTitle(self):\n-        self.item.Title = lambda: u\'\xc3\xbc\'\n-        tag = self.scaling.tag(\'image\')\n+        self.item.Title = lambda: "\xc3\xbc"\n+        tag = self.scaling.tag("image")\n         base = self.item.absolute_url()\n-        expected = \\\n-            r\'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" \' \\\n+        expected = (\n+            r\'<img src="{0}/@@images/({1}).(jpeg|gif|png)" \'\n             r\'alt="\\xfc" title="\\xfc" height="(\\d+)" width="(\\d+)" />\'.format(\n-                base,\n+                base, PAT_UID_SCALE\n             )\n+        )\n         self.assertTrue(re.match(expected, tag).groups())\n \n     def testScaledJpegImageQuality(self):\n         """Test image quality setting for jpeg images.\n         Image quality not available for PNG images.\n         """\n-        data = getFile(\'image.jpg\')\n+        data = getFile("image.jpg")\n         item = DummyContent()\n-        item.image = NamedImage(data, \'image/png\', u\'image.jpg\')\n+        item.image = NamedImage(data, "image/png", "image.jpg")\n         scaling = ImageScaling(item, None)\n \n         # scale an image, record its size\n-        foo = scaling.scale(\'image\', width=100, height=80)\n+        foo = scaling.scale("image", width=100, height=80)\n         size_foo = foo.data.getSize()\n         # let\'s pretend p.a.imaging set the scaling quality to "really sloppy"\n         gsm = getGlobalSiteManager()\n@@ -468,20 +732,23 @@ def testScaledJpegImageQuality(self):\n         gsm.registerUtility(qualitySupplier.getQuality, IScaledImageQuality)\n         wait_to_ensure_modified()\n         # now scale again\n-        bar = scaling.scale(\'image\', width=100, height=80)\n+        bar = scaling.scale("image", width=100, height=80)\n         size_bar = bar.data.getSize()\n         # first one should be bigger\n         self.assertTrue(size_foo > size_bar)\n \n     def testOversizedHighPixelDensityScale(self):\n-        orig_size = max(self.scaling.getImageSize(\'image\'))\n+        orig_size = max(self.scaling.getImageSize("image"))\n         scale_size = orig_size / 2\n         self.scaling.getHighPixelDensityScales = lambda: [\n-            {\'scale\': 2, \'quality\': 66},\n-            {\'scale\': 3, \'quality\': 66}]\n-        foo = self.scaling.scale(\'image\', width=scale_size, height=scale_size)\n+            {"scale": 2, "quality": 66},\n+            {"scale": 3, "quality": 66},\n+        ]\n+        foo = self.scaling.scale(\n+            "image", width=scale_size, height=scale_size, include_srcset=True\n+        )\n         self.assertEqual(len(foo.srcset), 1)\n-        self.assertEqual(foo.srcset[0][\'scale\'], 2)\n+        self.assertEqual(foo.srcset[0]["scale"], 2)\n \n \n class ImageTraverseTests(unittest.TestCase):\n@@ -489,59 +756,60 @@ class ImageTraverseTests(unittest.TestCase):\n     layer = PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer[\'app\']\n-        data = getFile(\'image.png\')\n+        self.app = self.layer["app"]\n+        data = getFile("image.png")\n         item = DummyContent()\n-        item.image = NamedImage(data, \'image/png\', u\'image.png\')\n-        self.app._setOb(\'item\', item)\n+        item.image = NamedImage(data, "image/png", "image.png")\n+        self.app._setOb("item", item)\n         self.item = self.app.item\n         self._orig_sizes = ImageScaling._sizes\n \n     def tearDown(self):\n         ImageScaling._sizes = self._orig_sizes\n \n-    def traverse(self, path=\'\'):\n-        view = self.item.unrestrictedTraverse(\'@@images\')\n-        stack = path.split(\'/\')\n+    def traverse(self, path=""):\n+        view = self.item.unrestrictedTraverse("@@images")\n+        stack = path.split("/")\n         name = stack.pop(0)\n         static_traverser = view.traverse(name, stack)\n         scale = stack.pop(0)\n         tag = static_traverser.traverse(scale, stack)\n         base = self.item.absolute_url()\n-        expected = \\\n-            r\'<img src="{0}/@@images/([-0-9a-f]{{36}}).(jpeg|gif|png)" \' \\\n+        expected = (\n+            r\'<img src="{0}/@@images/([0-9a-z]*-[0-9]*-[0-9a-f]{{32}}).(jpeg|gif|png)" \'\n             r\'alt="foo" title="foo" height="(\\d+)" width="(\\d+)" />\'.format(\n                 base,\n             )\n+        )\n         groups = re.match(expected, tag).groups()\n         self.assertTrue(groups, tag)\n         uid, ext, height, width = groups\n         return uid, ext, int(width), int(height)\n \n     def testImageThumb(self):\n-        ImageScaling._sizes = {\'thumb\': (128, 128)}\n-        uid, ext, width, height = self.traverse(\'image/thumb\')\n-        self.assertEqual((width, height), ImageScaling._sizes[\'thumb\'])\n-        self.assertEqual(ext, \'png\')\n+        ImageScaling._sizes = {"thumb": (128, 128)}\n+        uid, ext, width, height = self.traverse("image/thumb")\n+        self.assertEqual((width, height), ImageScaling._sizes["thumb"])\n+        self.assertEqual(ext, "png")\n \n     def testCustomSizes(self):\n         # set custom image sizes\n-        ImageScaling._sizes = {\'foo\': (23, 23)}\n+        ImageScaling._sizes = {"foo": (23, 23)}\n         # make sure traversing works with the new sizes\n-        uid, ext, width, height = self.traverse(\'image/foo\')\n+        uid, ext, width, height = self.traverse("image/foo")\n         self.assertEqual(width, 23)\n         self.assertEqual(height, 23)\n \n     def testScaleInvalidation(self):\n         # first view the thumbnail of the original image\n-        ImageScaling._sizes = {\'thumb\': (128, 128)}\n-        uid1, ext, width1, height1 = self.traverse(\'image/thumb\')\n+        ImageScaling._sizes = {"thumb": (128, 128)}\n+        uid1, ext, width1, height1 = self.traverse("image/thumb")\n         wait_to_ensure_modified()\n         # now upload a new one and make sure the thumbnail has changed\n-        data = getFile(\'image.jpg\')\n-        self.item.image = NamedImage(data, \'image/jpeg\', u\'image.jpg\')\n-        uid2, ext, width2, height2 = self.traverse(\'image/thumb\')\n-        self.assertNotEqual(uid1, uid2, \'thumb not updated?\')\n+        data = getFile("image.jpg")\n+        self.item.image = NamedImage(data, "image/jpeg", "image.jpg")\n+        uid2, ext, width2, height2 = self.traverse("image/thumb")\n+        self.assertNotEqual(uid1, uid2, "thumb not updated?")\n         # the height also differs as the original image had a size of 200, 200\n         # whereas the updated one has 500, 200...\n         self.assertEqual(width1, width2)\n@@ -549,23 +817,23 @@ def testScaleInvalidation(self):\n \n     def testCustomSizeChange(self):\n         # set custom image sizes & view a scale\n-        ImageScaling._sizes = {\'foo\': (23, 23)}\n-        uid1, ext, width, height = self.traverse(\'image/foo\')\n+        ImageScaling._sizes = {"foo": (23, 23)}\n+        uid1, ext, width, height = self.traverse("image/foo")\n         self.assertEqual(width, 23)\n         self.assertEqual(height, 23)\n         # now let\'s update the scale dimensions, after which the scale\n         # should also have been updated...\n-        ImageScaling._sizes = {\'foo\': (42, 42)}\n-        uid2, ext, width, height = self.traverse(\'image/foo\')\n+        ImageScaling._sizes = {"foo": (42, 42)}\n+        uid2, ext, width, height = self.traverse("image/foo")\n         self.assertEqual(width, 42)\n         self.assertEqual(height, 42)\n-        self.assertNotEqual(uid1, uid2, \'scale not updated?\')\n+        self.assertNotEqual(uid1, uid2, "scale not updated?")\n \n     def testGuardedAccess(self):\n         # make sure it\'s not possible to access scales of forbidden images\n         self.item.__allow_access_to_unprotected_subobjects__ = 0\n-        ImageScaling._sizes = {\'foo\': (42, 42)}\n-        self.assertRaises(Unauthorized, self.traverse, \'image/foo\')\n+        ImageScaling._sizes = {"foo": (42, 42)}\n+        self.assertRaises(Unauthorized, self.traverse, "image/foo")\n         self.item.__allow_access_to_unprotected_subobjects__ = 1\n \n \n@@ -669,4 +937,5 @@ def test_height(self):\n \n def test_suite():\n     from unittest import defaultTestLoader\n+\n     return defaultTestLoader.loadTestsFromName(__name__)\ndiff --git a/setup.py b/setup.py\nindex 83c2fb6..1dd8934 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -48,6 +48,7 @@\n     install_requires=[\n         \'persistent\',\n         \'piexif\',\n+        \'plone.app.uuid\',\n         \'plone.rfc822>=2.0.0\',\n         \'plone.scale[storage] >=3.0\',\n         \'plone.schemaeditor\',\ndiff --git a/sources-52.ini b/sources-52.ini\nindex 9a78476..f5e58aa 100644\n--- a/sources-52.ini\n+++ b/sources-52.ini\n@@ -7,4 +7,10 @@\n requirements-in = requirements-52.txt\n requirements-out = requirements-52-mxdev.txt\n constraints-out = constraints-52-mxdev.txt\n-ignores = plone.namedfile\n+ignores =\n+    plone.namedfile\n+    plone.scale\n+\n+[plone.scale]\n+url = https://github.com/plone/plone.scale.git\n+branch = pre-scale\ndiff --git a/sources-60.ini b/sources-60.ini\nindex 23c132d..5ff6556 100644\n--- a/sources-60.ini\n+++ b/sources-60.ini\n@@ -7,4 +7,10 @@\n requirements-in = requirements-60.txt\n requirements-out = requirements-60-mxdev.txt\n constraints-out = constraints-60-mxdev.txt\n-ignores = plone.namedfile\n+ignores =\n+    plone.namedfile\n+    plone.scale\n+\n+[plone.scale]\n+url = https://github.com/plone/plone.scale.git\n+branch = pre-scale\n'

