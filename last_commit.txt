Repository: plone.app.intid


Branch: refs/heads/master
Date: 2023-04-07T16:49:51+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.intid/commit/ebd88a178dc165bd2c819f6204f53be810582721

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/3b8337e6.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..eb3c765\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "3b8337e6"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/3b8337e6.internal b/news/3b8337e6.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/3b8337e6.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..5cd9573\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.app.intid {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.app.intid {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

Repository: plone.app.intid


Branch: refs/heads/master
Date: 2023-04-07T16:50:32+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.intid/commit/75bd1f82108a61cf4a458aa2356f087041320f94

chore: pyupgrade

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/intid/__init__.py
M plone/app/intid/setuphandlers.py
M plone/app/intid/testing.py
M plone/app/intid/tests/test_setup.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/app/intid/__init__.py b/plone/app/intid/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/intid/__init__.py\n+++ b/plone/app/intid/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/intid/setuphandlers.py b/plone/app/intid/setuphandlers.py\nindex 8b52b3d..917b57f 100644\n--- a/plone/app/intid/setuphandlers.py\n+++ b/plone/app/intid/setuphandlers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from five.intid.intid import IntIds\n from five.intid.site import addUtility\n from Products.CMFCore.interfaces import IContentish\n@@ -73,5 +72,5 @@ def registerContent(context):\n         return\n     portal = context.getSite()\n     registered, existing = register_all_content_for_intids(portal)\n-    return (\'Assigned intids to {0} content objects, {1} objects \'\n+    return (\'Assigned intids to {} content objects, {} objects \'\n             \'already had intids.\'.format(registered, existing))\ndiff --git a/plone/app/intid/testing.py b/plone/app/intid/testing.py\nindex a92f96a..fbeebe8 100644\n--- a/plone/app/intid/testing.py\n+++ b/plone/app/intid/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import PloneSandboxLayer\ndiff --git a/plone/app/intid/tests/test_setup.py b/plone/app/intid/tests/test_setup.py\nindex bd9cc69..c17e1b0 100644\n--- a/plone/app/intid/tests/test_setup.py\n+++ b/plone/app/intid/tests/test_setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.intid.testing import SETUP_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\ndiff --git a/setup.py b/setup.py\nindex 63652e4..645c7e1 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -8,7 +8,7 @@\n     version=version,\n     description="Installation and migration support for five.intid within "\n                 "Plone/CMF",\n-    long_description=\'%s\\n%s\' % (\n+    long_description=\'{}\\n{}\'.format(\n         open("README.rst").read(),\n         open(os.path.join("CHANGES.rst")).read(),\n     ),\n'

Repository: plone.app.intid


Branch: refs/heads/master
Date: 2023-04-07T16:50:44+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.intid/commit/216ab106aed975c0fdb59aeb9ec3919b16bd279f

chore: isort

Files changed:
M setup.py

b"diff --git a/setup.py b/setup.py\nindex 645c7e1..5169004 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,6 +1,9 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n+\n import os\n \n+\n version = '1.1.5.dev0'\n \n setup(\n"

Repository: plone.app.intid


Branch: refs/heads/master
Date: 2023-04-07T16:51:35+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.intid/commit/cd2d910193718910e214f0df57e2563b574439ee

chore: black

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/intid/setuphandlers.py
M plone/app/intid/testing.py
M plone/app/intid/tests/test_setup.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/intid/setuphandlers.py b/plone/app/intid/setuphandlers.py\nindex 917b57f..eb475a3 100644\n--- a/plone/app/intid/setuphandlers.py\n+++ b/plone/app/intid/setuphandlers.py\n@@ -14,6 +14,7 @@\n try:\n     # XXX here we must consider plone.app.multilingual as well!\n     import Products.LinguaPlone\n+\n     Products.LinguaPlone\n     HAS_LINGUAPLONE = True\n except ImportError:\n@@ -23,22 +24,19 @@\n def register_all_content_for_intids(portal):\n     """Registers all existing content with the intid utility.\n     This will not be fast."""\n-    cat = getToolByName(portal, \'portal_catalog\', None)\n+    cat = getToolByName(portal, "portal_catalog", None)\n     if cat is None:\n         return\n     intids = getUtility(IIntIds)\n     # Take advantage of paths stored in keyreferences in five.intid to optimize\n     # registration\n-    registered_paths = {\n-        ref.path for ref in intids.ids\n-        if hasattr(ref, \'path\')\n-    }\n+    registered_paths = {ref.path for ref in intids.ids if hasattr(ref, "path")}\n     # Count how many objects we register\n     registered = 0\n     existing = 0\n-    query = {\'object_provides\': IContentish.__identifier__}\n+    query = {"object_provides": IContentish.__identifier__}\n     if HAS_LINGUAPLONE:\n-        query[\'Language\'] = \'all\'\n+        query["Language"] = "all"\n     for brain in cat(query):\n         if brain.getPath() in registered_paths:\n             existing += 1\n@@ -55,22 +53,23 @@ def register_all_content_for_intids(portal):\n \n \n def add_intids(context):\n-    addUtility(context, IIntIds, IntIds, ofs_name=\'intids\',\n-               findroot=False)\n+    addUtility(context, IIntIds, IntIds, ofs_name="intids", findroot=False)\n \n \n def installIntIds(context):\n-    if context.readDataFile(\'install_intids.txt\') is None:\n+    if context.readDataFile("install_intids.txt") is None:\n         return\n     portal = context.getSite()\n     add_intids(portal)\n-    return \'Added intid utility.\'\n+    return "Added intid utility."\n \n \n def registerContent(context):\n-    if context.readDataFile(\'intid_register_content.txt\') is None:\n+    if context.readDataFile("intid_register_content.txt") is None:\n         return\n     portal = context.getSite()\n     registered, existing = register_all_content_for_intids(portal)\n-    return (\'Assigned intids to {} content objects, {} objects \'\n-            \'already had intids.\'.format(registered, existing))\n+    return (\n+        "Assigned intids to {} content objects, {} objects "\n+        "already had intids.".format(registered, existing)\n+    )\ndiff --git a/plone/app/intid/testing.py b/plone/app/intid/testing.py\nindex fbeebe8..757c775 100644\n--- a/plone/app/intid/testing.py\n+++ b/plone/app/intid/testing.py\n@@ -4,15 +4,15 @@\n \n \n class IntidSetupFixture(PloneSandboxLayer):\n-    defaultBases = (PLONE_FIXTURE, )\n+    defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         # pylint: disable=W0613\n         import plone.app.intid\n+\n         self.loadZCML(package=plone.app.intid)\n \n \n SETUP_TESTING = IntegrationTesting(\n-    bases=(IntidSetupFixture(), ),\n-    name=\'IntidSetupFixture:Setup\'\n+    bases=(IntidSetupFixture(),), name="IntidSetupFixture:Setup"\n )\ndiff --git a/plone/app/intid/tests/test_setup.py b/plone/app/intid/tests/test_setup.py\nindex c17e1b0..c05d09a 100644\n--- a/plone/app/intid/tests/test_setup.py\n+++ b/plone/app/intid/tests/test_setup.py\n@@ -13,17 +13,17 @@ class TestSetup(unittest.TestCase):\n     layer = SETUP_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n+        self.portal = self.layer["portal"]\n         # XXX below code is only needed if theres no Folder FTI already setup.\n-        typetool = getToolByName(self.portal, \'portal_types\')\n-        if \'Folder\' not in typetool.objectIds():\n+        typetool = getToolByName(self.portal, "portal_types")\n+        if "Folder" not in typetool.objectIds():\n             # XXX Check if this is needed for Plone 5.0! In 4.3 the FTI is\n             # already setup\n-            fti = DexterityFTI(\'Folder\')\n-            typetool._setObject(\'Folder\', fti)\n+            fti = DexterityFTI("Folder")\n+            typetool._setObject("Folder", fti)\n \n     def tearDown(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n     def test_already_installed(self):\n         """plone.app.intid is a dependency of plone.app.linkintegrity\n@@ -31,13 +31,13 @@ def test_already_installed(self):\n         This tests if this is true.\n         """\n         # we create a folder\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        folder_id = self.portal.invokeFactory(\'Folder\', \'folder\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        folder_id = self.portal.invokeFactory("Folder", "folder")\n         folder = self.portal[folder_id]\n         intids = getUtility(IIntIds)\n         self.assertIsNotNone(intids.getId(folder))\n \n-    @unittest.skip(\'p.a.intid is always installed\')\n+    @unittest.skip("p.a.intid is always installed")\n     def test_install(self):\n         """When p.app.intid is intalled it registers some utility\n         from zope.intid and five.intid and search in portal_catalog\n@@ -50,8 +50,8 @@ def test_install(self):\n         from plone.app.testing import applyProfile\n \n         # we create a folder before the intallation of plone.app.intid\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        folder_id = self.portal.invokeFactory(\'Folder\', \'folder\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        folder_id = self.portal.invokeFactory("Folder", "folder")\n         folder = self.portal[folder_id]\n \n         # now we install manually the intid utilities\n@@ -62,5 +62,5 @@ def test_install(self):\n         self.assertRaises(KeyError, intids.getId, folder)\n \n         # when we install p.app.intid our folder is referencend by intid\n-        applyProfile(self.portal, \'plone.app.intid:default\')\n+        applyProfile(self.portal, "plone.app.intid:default")\n         self.assertIsNotNone(intids.getId(folder))\ndiff --git a/setup.py b/setup.py\nindex 5169004..49b9eff 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -4,14 +4,13 @@\n import os\n \n \n-version = \'1.1.5.dev0\'\n+version = "1.1.5.dev0"\n \n setup(\n-    name=\'plone.app.intid\',\n+    name="plone.app.intid",\n     version=version,\n-    description="Installation and migration support for five.intid within "\n-                "Plone/CMF",\n-    long_description=\'{}\\n{}\'.format(\n+    description="Installation and migration support for five.intid within " "Plone/CMF",\n+    long_description="{}\\n{}".format(\n         open("README.rst").read(),\n         open(os.path.join("CHANGES.rst")).read(),\n     ),\n@@ -33,26 +32,26 @@\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'plone zope five intid\',\n-    author=\'Alec Mitchell\',\n-    author_email=\'apm13@columbia.edu\',\n-    url=\'https://github.com/plone/plone.app.intid\',\n-    license=\'GPL\',\n+    keywords="plone zope five intid",\n+    author="Alec Mitchell",\n+    author_email="apm13@columbia.edu",\n+    url="https://github.com/plone/plone.app.intid",\n+    license="GPL",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'setuptools\',\n-        \'zope.intid\',\n-        \'zope.lifecycleevent\',\n-        \'five.intid>=1.0\',\n-        \'Products.CMFCore\',\n+        "setuptools",\n+        "zope.intid",\n+        "zope.lifecycleevent",\n+        "five.intid>=1.0",\n+        "Products.CMFCore",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.testing\',\n-            \'plone.dexterity\',\n+        "test": [\n+            "plone.app.testing",\n+            "plone.dexterity",\n         ],\n     },\n     entry_points="""\n'

Repository: plone.app.intid


Branch: refs/heads/master
Date: 2023-04-07T16:51:49+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.intid/commit/b481d85b5fd68d45fa7a43fe187dfb0777f7d860

chore: zpretty

Files changed:
M plone/app/intid/configure.zcml
M plone/app/intid/profiles.zcml
M plone/app/intid/profiles/default/metadata.xml

b'diff --git a/plone/app/intid/configure.zcml b/plone/app/intid/configure.zcml\nindex bddfd9e..15fcf4e 100644\n--- a/plone/app/intid/configure.zcml\n+++ b/plone/app/intid/configure.zcml\n@@ -2,27 +2,34 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:five="http://namespaces.zope.org/five"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n-    i18n_domain="plone.app.intid">\n+    i18n_domain="plone.app.intid"\n+    >\n \n-  <include package="five.intid" file="base.zcml" />\n-  <include package="five.intid" file="cmfdirectoryview.zcml" />\n+  <include\n+      package="five.intid"\n+      file="base.zcml"\n+      />\n+  <include\n+      package="five.intid"\n+      file="cmfdirectoryview.zcml"\n+      />\n   <include file="profiles.zcml" />\n \n   <!-- Register intid handlers for all CMF/Plone content -->\n   <subscriber\n-      handler="five.intid.intid.addIntIdSubscriber"\n       for="Products.CMFCore.interfaces.IDynamicType\n            zope.lifecycleevent.interfaces.IObjectAddedEvent"\n+      handler="five.intid.intid.addIntIdSubscriber"\n       />\n   <subscriber\n-      handler="five.intid.intid.removeIntIdSubscriber"\n       for="Products.CMFCore.interfaces.IDynamicType\n            zope.lifecycleevent.interfaces.IObjectRemovedEvent"\n+      handler="five.intid.intid.removeIntIdSubscriber"\n       />\n   <subscriber\n-      handler="five.intid.intid.moveIntIdSubscriber"\n       for="Products.CMFCore.interfaces.IDynamicType\n            zope.lifecycleevent.interfaces.IObjectMovedEvent"\n+      handler="five.intid.intid.moveIntIdSubscriber"\n       />\n \n </configure>\ndiff --git a/plone/app/intid/profiles.zcml b/plone/app/intid/profiles.zcml\nindex 0874b27..9e2db0b 100644\n--- a/plone/app/intid/profiles.zcml\n+++ b/plone/app/intid/profiles.zcml\n@@ -1,32 +1,35 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone.app.intid">\n+    i18n_domain="plone.app.intid"\n+    >\n \n-    <genericsetup:registerProfile\n-        name="default"\n-        title="plone.app.intid: install utility"\n-        directory="profiles/default"\n-        description="Extension profile to install an intid utility in a Plone site"\n-        for="Products.CMFCore.interfaces.ISiteRoot"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        />\n+  <genericsetup:registerProfile\n+      name="default"\n+      title="plone.app.intid: install utility"\n+      description="Extension profile to install an intid utility in a Plone site"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      for="Products.CMFCore.interfaces.ISiteRoot"\n+      directory="profiles/default"\n+      />\n \n-    <genericsetup:importStep\n-        name="import-intid-util"\n-        title="Import IntId Utility"\n-        description="Import intid utility."\n-        handler=".setuphandlers.installIntIds">\n-      <depends name="toolset"/>\n-    </genericsetup:importStep>\n+  <genericsetup:importStep\n+      name="import-intid-util"\n+      title="Import IntId Utility"\n+      description="Import intid utility."\n+      handler=".setuphandlers.installIntIds"\n+      >\n+    <depends name="toolset" />\n+  </genericsetup:importStep>\n \n-    <genericsetup:importStep\n-        name="intid-register-content"\n-        title="Register content with IntId utility"\n-        description="Register all plone content with intid utility."\n-        handler=".setuphandlers.registerContent">\n-      <depends name="catalog"/>\n-      <depends name="import-intid-util"/>\n-    </genericsetup:importStep>\n+  <genericsetup:importStep\n+      name="intid-register-content"\n+      title="Register content with IntId utility"\n+      description="Register all plone content with intid utility."\n+      handler=".setuphandlers.registerContent"\n+      >\n+    <depends name="catalog" />\n+    <depends name="import-intid-util" />\n+  </genericsetup:importStep>\n \n-</configure>\n\\ No newline at end of file\n+</configure>\ndiff --git a/plone/app/intid/profiles/default/metadata.xml b/plone/app/intid/profiles/default/metadata.xml\nindex cf4492a..08b37b6 100644\n--- a/plone/app/intid/profiles/default/metadata.xml\n+++ b/plone/app/intid/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>1</version>\n </metadata>\n'

Repository: plone.app.intid


Branch: refs/heads/master
Date: 2023-04-07T16:53:16+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.intid/commit/92d20126ca05b400ae49bcbb37f5337b2eeed591

feat: codespell

Files changed:
M CHANGES.rst
M plone/app/intid/tests/test_setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex ec35148..2c169a3 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -112,7 +112,7 @@ Fixes:\n 1.0b2 2010-02-22\n -------------------\n \n-- fixed dependecy of import profiles\n+- fixed dependency of import profiles\n   [naro]\n \n 1.0b1 2010-02-07\ndiff --git a/plone/app/intid/tests/test_setup.py b/plone/app/intid/tests/test_setup.py\nindex c05d09a..a1aba00 100644\n--- a/plone/app/intid/tests/test_setup.py\n+++ b/plone/app/intid/tests/test_setup.py\n@@ -14,7 +14,7 @@ class TestSetup(unittest.TestCase):\n \n     def setUp(self):\n         self.portal = self.layer["portal"]\n-        # XXX below code is only needed if theres no Folder FTI already setup.\n+        # XXX below code is only needed if there\'s no Folder FTI already setup.\n         typetool = getToolByName(self.portal, "portal_types")\n         if "Folder" not in typetool.objectIds():\n             # XXX Check if this is needed for Plone 5.0! In 4.3 the FTI is\n@@ -39,7 +39,7 @@ def test_already_installed(self):\n \n     @unittest.skip("p.a.intid is always installed")\n     def test_install(self):\n-        """When p.app.intid is intalled it registers some utility\n+        """When p.app.intid is installed it registers some utility\n         from zope.intid and five.intid and search in portal_catalog\n         all contents in order to register them in these utilities.\n \n@@ -49,7 +49,7 @@ def test_install(self):\n         from plone.app.intid.setuphandlers import add_intids\n         from plone.app.testing import applyProfile\n \n-        # we create a folder before the intallation of plone.app.intid\n+        # we create a folder before the installation of plone.app.intid\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         folder_id = self.portal.invokeFactory("Folder", "folder")\n         folder = self.portal[folder_id]\n'

Repository: plone.app.intid


Branch: refs/heads/master
Date: 2023-04-07T16:54:08+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.intid/commit/4b8c7bd4337a81bcd040d57e35a79d6c63e13561

feat: pyroma

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 49b9eff..b35390e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -17,16 +17,10 @@\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.0",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: 3.10",\n@@ -41,6 +35,7 @@\n     namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n         "setuptools",\n         "zope.intid",\n'

Repository: plone.app.intid


Branch: refs/heads/master
Date: 2023-04-07T16:56:09+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.intid/commit/a4844231836f1147f8708cc9f8ddc9e59caaaa4d

cleanup: drop LinguaPlone references

Files changed:
M plone/app/intid/setuphandlers.py

b'diff --git a/plone/app/intid/setuphandlers.py b/plone/app/intid/setuphandlers.py\nindex eb475a3..e3cde20 100644\n--- a/plone/app/intid/setuphandlers.py\n+++ b/plone/app/intid/setuphandlers.py\n@@ -11,16 +11,6 @@\n logger = logging.getLogger(__name__)\n \n \n-try:\n-    # XXX here we must consider plone.app.multilingual as well!\n-    import Products.LinguaPlone\n-\n-    Products.LinguaPlone\n-    HAS_LINGUAPLONE = True\n-except ImportError:\n-    HAS_LINGUAPLONE = False\n-\n-\n def register_all_content_for_intids(portal):\n     """Registers all existing content with the intid utility.\n     This will not be fast."""\n@@ -35,8 +25,6 @@ def register_all_content_for_intids(portal):\n     registered = 0\n     existing = 0\n     query = {"object_provides": IContentish.__identifier__}\n-    if HAS_LINGUAPLONE:\n-        query["Language"] = "all"\n     for brain in cat(query):\n         if brain.getPath() in registered_paths:\n             existing += 1\n'

Repository: plone.app.intid


Branch: refs/heads/master
Date: 2023-04-07T16:57:05+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.intid/commit/541569201c1a1e5413d049d17bf0bcb3c609671b

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex b35390e..1142730 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -42,6 +42,7 @@\n         "zope.lifecycleevent",\n         "five.intid>=1.0",\n         "Products.CMFCore",\n+        "Products.GenericSetup",\n     ],\n     extras_require={\n         "test": [\n'

Repository: plone.app.intid


Branch: refs/heads/master
Date: 2023-04-10T03:01:15+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.intid/commit/79ddf4b859be9adf39c0273dce6d36ffe0ec6620

Merge pull request #8 from plone/config-with-default-template-6ba59e5b

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/3b8337e6.internal
A tox.ini
M CHANGES.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/intid/__init__.py
M plone/app/intid/configure.zcml
M plone/app/intid/profiles.zcml
M plone/app/intid/profiles/default/metadata.xml
M plone/app/intid/setuphandlers.py
M plone/app/intid/testing.py
M plone/app/intid/tests/test_setup.py
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..eb3c765\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "3b8337e6"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex ec35148..2c169a3 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -112,7 +112,7 @@ Fixes:\n 1.0b2 2010-02-22\n -------------------\n \n-- fixed dependecy of import profiles\n+- fixed dependency of import profiles\n   [naro]\n \n 1.0b1 2010-02-07\ndiff --git a/news/3b8337e6.internal b/news/3b8337e6.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/3b8337e6.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/intid/__init__.py b/plone/app/intid/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/intid/__init__.py\n+++ b/plone/app/intid/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/intid/configure.zcml b/plone/app/intid/configure.zcml\nindex bddfd9e..15fcf4e 100644\n--- a/plone/app/intid/configure.zcml\n+++ b/plone/app/intid/configure.zcml\n@@ -2,27 +2,34 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:five="http://namespaces.zope.org/five"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n-    i18n_domain="plone.app.intid">\n+    i18n_domain="plone.app.intid"\n+    >\n \n-  <include package="five.intid" file="base.zcml" />\n-  <include package="five.intid" file="cmfdirectoryview.zcml" />\n+  <include\n+      package="five.intid"\n+      file="base.zcml"\n+      />\n+  <include\n+      package="five.intid"\n+      file="cmfdirectoryview.zcml"\n+      />\n   <include file="profiles.zcml" />\n \n   <!-- Register intid handlers for all CMF/Plone content -->\n   <subscriber\n-      handler="five.intid.intid.addIntIdSubscriber"\n       for="Products.CMFCore.interfaces.IDynamicType\n            zope.lifecycleevent.interfaces.IObjectAddedEvent"\n+      handler="five.intid.intid.addIntIdSubscriber"\n       />\n   <subscriber\n-      handler="five.intid.intid.removeIntIdSubscriber"\n       for="Products.CMFCore.interfaces.IDynamicType\n            zope.lifecycleevent.interfaces.IObjectRemovedEvent"\n+      handler="five.intid.intid.removeIntIdSubscriber"\n       />\n   <subscriber\n-      handler="five.intid.intid.moveIntIdSubscriber"\n       for="Products.CMFCore.interfaces.IDynamicType\n            zope.lifecycleevent.interfaces.IObjectMovedEvent"\n+      handler="five.intid.intid.moveIntIdSubscriber"\n       />\n \n </configure>\ndiff --git a/plone/app/intid/profiles.zcml b/plone/app/intid/profiles.zcml\nindex 0874b27..9e2db0b 100644\n--- a/plone/app/intid/profiles.zcml\n+++ b/plone/app/intid/profiles.zcml\n@@ -1,32 +1,35 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone.app.intid">\n+    i18n_domain="plone.app.intid"\n+    >\n \n-    <genericsetup:registerProfile\n-        name="default"\n-        title="plone.app.intid: install utility"\n-        directory="profiles/default"\n-        description="Extension profile to install an intid utility in a Plone site"\n-        for="Products.CMFCore.interfaces.ISiteRoot"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        />\n+  <genericsetup:registerProfile\n+      name="default"\n+      title="plone.app.intid: install utility"\n+      description="Extension profile to install an intid utility in a Plone site"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      for="Products.CMFCore.interfaces.ISiteRoot"\n+      directory="profiles/default"\n+      />\n \n-    <genericsetup:importStep\n-        name="import-intid-util"\n-        title="Import IntId Utility"\n-        description="Import intid utility."\n-        handler=".setuphandlers.installIntIds">\n-      <depends name="toolset"/>\n-    </genericsetup:importStep>\n+  <genericsetup:importStep\n+      name="import-intid-util"\n+      title="Import IntId Utility"\n+      description="Import intid utility."\n+      handler=".setuphandlers.installIntIds"\n+      >\n+    <depends name="toolset" />\n+  </genericsetup:importStep>\n \n-    <genericsetup:importStep\n-        name="intid-register-content"\n-        title="Register content with IntId utility"\n-        description="Register all plone content with intid utility."\n-        handler=".setuphandlers.registerContent">\n-      <depends name="catalog"/>\n-      <depends name="import-intid-util"/>\n-    </genericsetup:importStep>\n+  <genericsetup:importStep\n+      name="intid-register-content"\n+      title="Register content with IntId utility"\n+      description="Register all plone content with intid utility."\n+      handler=".setuphandlers.registerContent"\n+      >\n+    <depends name="catalog" />\n+    <depends name="import-intid-util" />\n+  </genericsetup:importStep>\n \n-</configure>\n\\ No newline at end of file\n+</configure>\ndiff --git a/plone/app/intid/profiles/default/metadata.xml b/plone/app/intid/profiles/default/metadata.xml\nindex cf4492a..08b37b6 100644\n--- a/plone/app/intid/profiles/default/metadata.xml\n+++ b/plone/app/intid/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>1</version>\n </metadata>\ndiff --git a/plone/app/intid/setuphandlers.py b/plone/app/intid/setuphandlers.py\nindex 8b52b3d..e3cde20 100644\n--- a/plone/app/intid/setuphandlers.py\n+++ b/plone/app/intid/setuphandlers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from five.intid.intid import IntIds\n from five.intid.site import addUtility\n from Products.CMFCore.interfaces import IContentish\n@@ -12,34 +11,20 @@\n logger = logging.getLogger(__name__)\n \n \n-try:\n-    # XXX here we must consider plone.app.multilingual as well!\n-    import Products.LinguaPlone\n-    Products.LinguaPlone\n-    HAS_LINGUAPLONE = True\n-except ImportError:\n-    HAS_LINGUAPLONE = False\n-\n-\n def register_all_content_for_intids(portal):\n     """Registers all existing content with the intid utility.\n     This will not be fast."""\n-    cat = getToolByName(portal, \'portal_catalog\', None)\n+    cat = getToolByName(portal, "portal_catalog", None)\n     if cat is None:\n         return\n     intids = getUtility(IIntIds)\n     # Take advantage of paths stored in keyreferences in five.intid to optimize\n     # registration\n-    registered_paths = {\n-        ref.path for ref in intids.ids\n-        if hasattr(ref, \'path\')\n-    }\n+    registered_paths = {ref.path for ref in intids.ids if hasattr(ref, "path")}\n     # Count how many objects we register\n     registered = 0\n     existing = 0\n-    query = {\'object_provides\': IContentish.__identifier__}\n-    if HAS_LINGUAPLONE:\n-        query[\'Language\'] = \'all\'\n+    query = {"object_provides": IContentish.__identifier__}\n     for brain in cat(query):\n         if brain.getPath() in registered_paths:\n             existing += 1\n@@ -56,22 +41,23 @@ def register_all_content_for_intids(portal):\n \n \n def add_intids(context):\n-    addUtility(context, IIntIds, IntIds, ofs_name=\'intids\',\n-               findroot=False)\n+    addUtility(context, IIntIds, IntIds, ofs_name="intids", findroot=False)\n \n \n def installIntIds(context):\n-    if context.readDataFile(\'install_intids.txt\') is None:\n+    if context.readDataFile("install_intids.txt") is None:\n         return\n     portal = context.getSite()\n     add_intids(portal)\n-    return \'Added intid utility.\'\n+    return "Added intid utility."\n \n \n def registerContent(context):\n-    if context.readDataFile(\'intid_register_content.txt\') is None:\n+    if context.readDataFile("intid_register_content.txt") is None:\n         return\n     portal = context.getSite()\n     registered, existing = register_all_content_for_intids(portal)\n-    return (\'Assigned intids to {0} content objects, {1} objects \'\n-            \'already had intids.\'.format(registered, existing))\n+    return (\n+        "Assigned intids to {} content objects, {} objects "\n+        "already had intids.".format(registered, existing)\n+    )\ndiff --git a/plone/app/intid/testing.py b/plone/app/intid/testing.py\nindex a92f96a..757c775 100644\n--- a/plone/app/intid/testing.py\n+++ b/plone/app/intid/testing.py\n@@ -1,19 +1,18 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PLONE_FIXTURE\n from plone.app.testing import PloneSandboxLayer\n \n \n class IntidSetupFixture(PloneSandboxLayer):\n-    defaultBases = (PLONE_FIXTURE, )\n+    defaultBases = (PLONE_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n         # pylint: disable=W0613\n         import plone.app.intid\n+\n         self.loadZCML(package=plone.app.intid)\n \n \n SETUP_TESTING = IntegrationTesting(\n-    bases=(IntidSetupFixture(), ),\n-    name=\'IntidSetupFixture:Setup\'\n+    bases=(IntidSetupFixture(),), name="IntidSetupFixture:Setup"\n )\ndiff --git a/plone/app/intid/tests/test_setup.py b/plone/app/intid/tests/test_setup.py\nindex bd9cc69..a1aba00 100644\n--- a/plone/app/intid/tests/test_setup.py\n+++ b/plone/app/intid/tests/test_setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.intid.testing import SETUP_TESTING\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n@@ -14,17 +13,17 @@ class TestSetup(unittest.TestCase):\n     layer = SETUP_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        # XXX below code is only needed if theres no Folder FTI already setup.\n-        typetool = getToolByName(self.portal, \'portal_types\')\n-        if \'Folder\' not in typetool.objectIds():\n+        self.portal = self.layer["portal"]\n+        # XXX below code is only needed if there\'s no Folder FTI already setup.\n+        typetool = getToolByName(self.portal, "portal_types")\n+        if "Folder" not in typetool.objectIds():\n             # XXX Check if this is needed for Plone 5.0! In 4.3 the FTI is\n             # already setup\n-            fti = DexterityFTI(\'Folder\')\n-            typetool._setObject(\'Folder\', fti)\n+            fti = DexterityFTI("Folder")\n+            typetool._setObject("Folder", fti)\n \n     def tearDown(self):\n-        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n \n     def test_already_installed(self):\n         """plone.app.intid is a dependency of plone.app.linkintegrity\n@@ -32,15 +31,15 @@ def test_already_installed(self):\n         This tests if this is true.\n         """\n         # we create a folder\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        folder_id = self.portal.invokeFactory(\'Folder\', \'folder\')\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        folder_id = self.portal.invokeFactory("Folder", "folder")\n         folder = self.portal[folder_id]\n         intids = getUtility(IIntIds)\n         self.assertIsNotNone(intids.getId(folder))\n \n-    @unittest.skip(\'p.a.intid is always installed\')\n+    @unittest.skip("p.a.intid is always installed")\n     def test_install(self):\n-        """When p.app.intid is intalled it registers some utility\n+        """When p.app.intid is installed it registers some utility\n         from zope.intid and five.intid and search in portal_catalog\n         all contents in order to register them in these utilities.\n \n@@ -50,9 +49,9 @@ def test_install(self):\n         from plone.app.intid.setuphandlers import add_intids\n         from plone.app.testing import applyProfile\n \n-        # we create a folder before the intallation of plone.app.intid\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        folder_id = self.portal.invokeFactory(\'Folder\', \'folder\')\n+        # we create a folder before the installation of plone.app.intid\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        folder_id = self.portal.invokeFactory("Folder", "folder")\n         folder = self.portal[folder_id]\n \n         # now we install manually the intid utilities\n@@ -63,5 +62,5 @@ def test_install(self):\n         self.assertRaises(KeyError, intids.getId, folder)\n \n         # when we install p.app.intid our folder is referencend by intid\n-        applyProfile(self.portal, \'plone.app.intid:default\')\n+        applyProfile(self.portal, "plone.app.intid:default")\n         self.assertIsNotNone(intids.getId(folder))\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex 63652e4..1142730 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,55 +1,53 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n+\n import os\n \n-version = \'1.1.5.dev0\'\n+\n+version = "1.1.5.dev0"\n \n setup(\n-    name=\'plone.app.intid\',\n+    name="plone.app.intid",\n     version=version,\n-    description="Installation and migration support for five.intid within "\n-                "Plone/CMF",\n-    long_description=\'%s\\n%s\' % (\n+    description="Installation and migration support for five.intid within " "Plone/CMF",\n+    long_description="{}\\n{}".format(\n         open("README.rst").read(),\n         open(os.path.join("CHANGES.rst")).read(),\n     ),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.0",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'plone zope five intid\',\n-    author=\'Alec Mitchell\',\n-    author_email=\'apm13@columbia.edu\',\n-    url=\'https://github.com/plone/plone.app.intid\',\n-    license=\'GPL\',\n+    keywords="plone zope five intid",\n+    author="Alec Mitchell",\n+    author_email="apm13@columbia.edu",\n+    url="https://github.com/plone/plone.app.intid",\n+    license="GPL",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n-        \'setuptools\',\n-        \'zope.intid\',\n-        \'zope.lifecycleevent\',\n-        \'five.intid>=1.0\',\n-        \'Products.CMFCore\',\n+        "setuptools",\n+        "zope.intid",\n+        "zope.lifecycleevent",\n+        "five.intid>=1.0",\n+        "Products.CMFCore",\n+        "Products.GenericSetup",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.app.testing\',\n-            \'plone.dexterity\',\n+        "test": [\n+            "plone.app.testing",\n+            "plone.dexterity",\n         ],\n     },\n     entry_points="""\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..5cd9573\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.app.intid {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.app.intid {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

