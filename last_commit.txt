Repository: plone.api


Branch: refs/heads/master
Date: 2022-03-31T15:58:56+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/5ddbe518abba342befb82f387f97b933f286557e

documentation with sphinx-book-theme

Files changed:
A requirements-docs.txt
M .gitignore
M docs/conf.py
M tox.ini

b'diff --git a/.gitignore b/.gitignore\nindex a2f78d5..6cb56eb 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -25,3 +25,4 @@\n /pip-selfcheck.json\n /_build/\n /.tox/\n+pyvenv.cfg\ndiff --git a/docs/conf.py b/docs/conf.py\nindex 106e0d3..7a6d467 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -49,6 +49,16 @@ def __getattr__(cls, name):\n         else:\n             return Mock()\n \n+\n MOCK_MODULES = [\'lxml\']\n for mod_name in MOCK_MODULES:\n     sys.modules[mod_name] = Mock()\n+\n+\n+# -- Options for HTML output -------------------------------------------------\n+\n+# The theme to use for HTML and HTML Help pages.  See the documentation for\n+# a list of builtin themes.\n+#\n+html_theme = "sphinx_book_theme"\n+\ndiff --git a/requirements-docs.txt b/requirements-docs.txt\nnew file mode 100644\nindex 0000000..ed461a9\n--- /dev/null\n+++ b/requirements-docs.txt\n@@ -0,0 +1,2 @@\n+Sphinx\n+sphinx-book-theme<=0.3.99\n\\ No newline at end of file\ndiff --git a/tox.ini b/tox.ini\nindex 5d0b011..e3d61bd 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -145,7 +145,7 @@ extras =\n     tests\n \n deps =\n-    Sphinx\n+    -r requirements-docs.txt\n \n commands =\n     python -VV\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-03-31T15:58:56+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/bfd927c78410b9ab1efcd130331c0647ec8918eb

Update develop.rst: build with 'tox -e docs'

Files changed:
M docs/contribute/develop.rst

b"diff --git a/docs/contribute/develop.rst b/docs/contribute/develop.rst\nindex f02eb76..53aa899 100644\n--- a/docs/contribute/develop.rst\n+++ b/docs/contribute/develop.rst\n@@ -50,18 +50,15 @@ First let's look at 'system' libraries and applications that are normally instal\n Python tools\n ------------\n \n-.. todo::\n+* tox automation - tox aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing and release process of Python software.\n \n-    Update this description:\n+Build the documentation with\n \n-    * add tox and propably pip.\n-    * easy_install should be removed.\n-    * question if virtualenv should be used, as tox also replaces this step.\n+.. sourcecode:: bash\n \n-Then you'll also need to install some Python specific tools:\n+    tox -e docs\n \n-* easy_install - the Python packaging system (download http://peak.telecommunity.com/dist/ez_setup.py and run ``sudo python2.7 ez_setup.py``.\n-* virtualenv - a tool that assists in creating isolated Python working environments. Run ``sudo easy_install virtualenv`` after your have installed   `easy_install` above.\n+The HTML pages are in _build/docs/html.\n \n .. note::\n \n"

Repository: plone.api


Branch: refs/heads/master
Date: 2022-03-31T15:58:56+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/f68b980b01a4762828bf5dc23a57c2be932c28ea

Add tox environment for building Plone 6 docs.

tox -e plone6docs

Files changed:
M tox.ini

b'diff --git a/tox.ini b/tox.ini\nindex e3d61bd..aee7322 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,11 +1,12 @@\n [tox]\n envlist =\n     py{36,37,38}-plone-{5.2},\n-    docs,\n #    black-check,\n     isort,\n     lint,\n     coverage-report,\n+    plone6docs,\n+    docs\n \n skip_missing_interpreters = False\n \n@@ -134,6 +135,26 @@ commands =\n whitelist_externals =\n     mkdir\n \n+\n+[testenv:plone6docs]\n+# New docs with sphinx-book-theme\n+# See [testenv:docs] for classic documentation\n+basepython = python\n+skip_install = False\n+usedevelop = True\n+extras =\n+    tests\n+\n+deps =\n+    -r requirements-docs.txt\n+\n+commands =\n+    python -VV\n+    mkdir -p {toxinidir}/_build/docs\n+    sphinx-build -b html -d _build/plone6docs/doctrees docs _build/plone6docs/html\n+#    sphinx-build -b doctest docs _build/docs/doctrees\n+\n+\n [testenv:docs]\n # Locally for Maurits this only works with Python 2.7.\n # Travis is happy with 3.7, not with 3.8 or 3.9.\n@@ -145,17 +166,18 @@ extras =\n     tests\n \n deps =\n-    -r requirements-docs.txt\n+    Sphinx\n \n commands =\n     python -VV\n     mkdir -p {toxinidir}/_build/docs\n-    sphinx-build -b html -d _build/docs/doctrees docs _build/docs/html\n+    sphinx-build -b html -D html_theme=alabaster -d _build/docs/doctrees docs _build/docs/html\n #    sphinx-build -b doctest docs _build/docs/doctrees\n \n whitelist_externals =\n     mkdir\n \n+\n [testenv:towncrier]\n basepython = python\n skip_install = True\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-03-31T15:58:56+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/5c1db483e5f7c9268f7973baa06c2b67251add1d

Create netlify.toml

Files changed:
A netlify.toml

b'diff --git a/netlify.toml b/netlify.toml\nnew file mode 100644\nindex 0000000..4b746a3\n--- /dev/null\n+++ b/netlify.toml\n@@ -0,0 +1,2 @@\n+[build.environment]\n+  PYTHON_VERSION = "3.9"\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-03-31T15:58:56+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/28e18a43b173f9b0dc58e7d96be6979be3876e02

Update netlify.toml: restrict Netlify build to changes on /docs

Files changed:
M netlify.toml

b'diff --git a/netlify.toml b/netlify.toml\nindex 4b746a3..af578b9 100644\n--- a/netlify.toml\n+++ b/netlify.toml\n@@ -1,2 +1,5 @@\n [build.environment]\n   PYTHON_VERSION = "3.9"\n+\n+[build]\n+  ignore = "git diff --quiet $CACHED_COMMIT_REF $COMMIT_REF ./docs/"\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-03-31T15:58:56+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/8c89062f0503f12da27b3856b4bd6481367d6921

Create Makefile

Files changed:
A Makefile

b'diff --git a/Makefile b/Makefile\nnew file mode 100644\nindex 0000000..e32c21f\n--- /dev/null\n+++ b/Makefile\n@@ -0,0 +1,38 @@\n+SHELL := /bin/bash\n+CURRENT_DIR:=$(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))\n+\n+version = 3\n+\n+# We like colors\n+# From: https://coderwall.com/p/izxssa/colored-makefile-for-golang-projects\n+RED=`tput setaf 1`\n+GREEN=`tput setaf 2`\n+RESET=`tput sgr0`\n+YELLOW=`tput setaf 3`\n+\n+\n+# all: .installed.cfg\n+\n+# Add the following \'help\' target to your Makefile\n+# And add help text after each target name starting with \'\\#\\#\'\n+.PHONY: help\n+help: ## This help message\n+\t@grep -E \'^[a-zA-Z_-]+:.*?## .*$$\' $(MAKEFILE_LIST) | sort | awk \'BEGIN {FS = ":.*?## "}; {printf "\\033[36m%-30s\\033[0m %s\\n", $$1, $$2}\'\n+\n+\n+\n+bin/python bin/pip:\n+\tpython$(version) -m venv . || virtualenv --python=python$(version) .\n+\tbin/python -m pip install --upgrade pip\n+\n+\n+# Documentation\n+# ----------------------------------------------------------------------\n+\n+.PHONY: netlify\n+netlify:\n+\tbin/pip install tox\n+\ttox -e plone6docs\n+\t@echo\n+\t@echo "Build finished. The HTML pages are in _build/plone6docs/html."\n+\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-03-31T15:58:56+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/891f838e3979eeec922dafe31e24aaf3ba06a2ff

Update develop.rst

Files changed:
M docs/contribute/develop.rst

b"diff --git a/docs/contribute/develop.rst b/docs/contribute/develop.rst\nindex 53aa899..cc957e7 100644\n--- a/docs/contribute/develop.rst\n+++ b/docs/contribute/develop.rst\n@@ -50,7 +50,8 @@ First let's look at 'system' libraries and applications that are normally instal\n Python tools\n ------------\n \n-* tox automation - tox aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing and release process of Python software.\n+* tox automation - tox aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing and release process of Python software.  \n+Install with `pip install tox`\n \n Build the documentation with\n \n"

Repository: plone.api


Branch: refs/heads/master
Date: 2022-03-31T15:58:56+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/1893491daff0e1bbc05c6fca99c59e88678d6bfa

Update netlify.toml

Files changed:
M netlify.toml

b'diff --git a/netlify.toml b/netlify.toml\nindex af578b9..9d440d0 100644\n--- a/netlify.toml\n+++ b/netlify.toml\n@@ -1,5 +1,5 @@\n [build.environment]\n-  PYTHON_VERSION = "3.9"\n+  PYTHON_VERSION = "3.8"\n \n [build]\n   ignore = "git diff --quiet $CACHED_COMMIT_REF $COMMIT_REF ./docs/"\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-03-31T15:58:56+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/d58738b600d60c731328f43141025909102fb866

Update Makefile: Fix deps for Netlify preview

Files changed:
M Makefile

b'diff --git a/Makefile b/Makefile\nindex e32c21f..59bbdb3 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -30,7 +30,7 @@ bin/python bin/pip:\n # ----------------------------------------------------------------------\n \n .PHONY: netlify\n-netlify:\n+netlify: bin/python bin/pip\n \tbin/pip install tox\n \ttox -e plone6docs\n \t@echo\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-03-31T15:58:56+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/2029be8aeacc1ae7cccc990d76c88653a901818a

Update Makefile: Fix command for Netlify preview

Files changed:
M Makefile

b'diff --git a/Makefile b/Makefile\nindex 59bbdb3..35cb436 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -32,7 +32,7 @@ bin/python bin/pip:\n .PHONY: netlify\n netlify: bin/python bin/pip\n \tbin/pip install tox\n-\ttox -e plone6docs\n+\tbin/tox -e plone6docs\n \t@echo\n \t@echo "Build finished. The HTML pages are in _build/plone6docs/html."\n \n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-01T07:03:14+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/e8e05785ebb6954fb3de030ace3c0f5bee0029e1

Fix docs build directory

Files changed:
M tox.ini

b'diff --git a/tox.ini b/tox.ini\nindex aee7322..518fbdb 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -150,7 +150,7 @@ deps =\n \n commands =\n     python -VV\n-    mkdir -p {toxinidir}/_build/docs\n+    mkdir -p {toxinidir}/_build/plone6docs\n     sphinx-build -b html -d _build/plone6docs/doctrees docs _build/plone6docs/html\n #    sphinx-build -b doctest docs _build/docs/doctrees\n \n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-01T09:08:52+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/061aabee9c1e3dd9520a9495d806fabb56c5d713

Fix broken links

Complained by plone.documentation 'make linkcheck'

Files changed:
M docs/contribute/develop.rst

b'diff --git a/docs/contribute/develop.rst b/docs/contribute/develop.rst\nindex cc957e7..427b5d1 100644\n--- a/docs/contribute/develop.rst\n+++ b/docs/contribute/develop.rst\n@@ -72,10 +72,10 @@ Further information\n \n If you experience problems read through the following links as almost all of the above steps are required for a default Plone development environment:\n \n-* http://plone.org/documentation/tutorial/buildout\n+* https://docs.plone.org/manage/index.html\n * http://pypi.python.org/pypi/zc.buildout/\n * http://pypi.python.org/pypi/setuptools\n-* http://plone.org/documentation/manual/installing-plone\n+* https://plone.org/download\n \n If you are an OS X user, you first need a working Python implementation\n (the one that comes with the operating system is broken).\n@@ -177,7 +177,7 @@ Once we are happy with your implementation, your branch gets merged into *master\n     them; in other words, others can comment on your code without your code\n     changing their development environments\n \n-Read more about Git branching at http://learn.github.com/p/branching.html and on our Git workflow at `Working with Git and GitHub <http://docs.plone.org/develop/coredev/docs/git.html>`_.\n+Read more about Git branching at https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches and on our Git workflow at `Working with Git and GitHub <http://docs.plone.org/develop/coredev/docs/git.html>`_.\n \n \n Once you are done with your work and you would like us to merge your changes into master, go to GitHub to do a *pull request*.\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-01T11:10:48+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/ca8a747ebfcce1622c2870ccf86b7f8679f19f7b

Fix Sphinx warning: title underline

Files changed:
M docs/api/index.rst

b'diff --git a/docs/api/index.rst b/docs/api/index.rst\nindex 2c70040..0353bac 100644\n--- a/docs/api/index.rst\n+++ b/docs/api/index.rst\n@@ -75,7 +75,7 @@ api.group\n \n \n api.env\n----------\n+-------\n \n .. autosummary::\n \n@@ -86,7 +86,7 @@ api.env\n \n \n api.relation\n----------\n+------------\n \n .. autosummary::\n \n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-01T11:11:24+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/fddeb1fecce11f74f45dd3c05199c7c4235b9308

Fix Sphinx warning: document not included in anytoctree.

Files changed:
D docs/contribute/conventions.rst

b'diff --git a/docs/contribute/conventions.rst b/docs/contribute/conventions.rst\ndeleted file mode 100644\nindex 196d8c7..0000000\n--- a/docs/contribute/conventions.rst\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-.. note::\n-\n-    This documentation was moved to the `styleguide section on docs.plone.org <http://docs.plone.org/develop/styleguide/>`_, to the `Working with Git and GitHub <http://docs.plone.org/develop/coredev/docs/git.html>`_ and to the :doc:`develop` chapter of the plone.api documentation.\n-\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-01T11:11:44+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/08efc7a83825d6b20f81325f098f3654b581cb3c

Fix Sphinx warning: bullet list

Files changed:
M docs/contribute/develop.rst

b"diff --git a/docs/contribute/develop.rst b/docs/contribute/develop.rst\nindex 427b5d1..c02850e 100644\n--- a/docs/contribute/develop.rst\n+++ b/docs/contribute/develop.rst\n@@ -50,8 +50,7 @@ First let's look at 'system' libraries and applications that are normally instal\n Python tools\n ------------\n \n-* tox automation - tox aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing and release process of Python software.  \n-Install with `pip install tox`\n+* tox automation - tox aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing and release process of Python software. Install with `pip install tox`.\n \n Build the documentation with\n \n"

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-01T11:12:17+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/786e4ced6b7a9cdd5eedd725fd9706498785b42d

Added link to list of methods.

Files changed:
M docs/relation.rst

b'diff --git a/docs/relation.rst b/docs/relation.rst\nindex 56a5cc1..287803f 100644\n--- a/docs/relation.rst\n+++ b/docs/relation.rst\n@@ -23,7 +23,7 @@ Get relations\n \n     api.relation.get(source=source, target=target, relationship="friend", unrestricted=False, as_dict=False)\n \n-You must provide either source, target or relationship, or a combination of those.\n+You must provide either source, target or relationship, or a combination of those to :meth:`api.relation.get`.\n ``unrestricted`` and ``as_dict`` are optional.\n \n By default the result is a list of ``RelationValue`` objects.\n@@ -80,7 +80,7 @@ Delete one or more relations:\n \n     api.relation.delete(source=source, target=target, relationship="friend")\n \n-In order to delete relation(s), you must provide either ``source``, ``target`` or ``relationship``.\n+In order to delete relation(s), you must provide either ``source``, ``target`` or ``relationship`` to :meth:`api.relation.delete`.\n You can mix and match.\n \n Delete all relations from source to any target:\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-01T11:12:54+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/1a36d8e54133f60c3b87e798ec6f62e34cfc357f

Fix rendering: no line break in docstring element

Files changed:
M src/plone/api/relation.py

b'diff --git a/src/plone/api/relation.py b/src/plone/api/relation.py\nindex 36a1bdd..8e15de1 100644\n--- a/src/plone/api/relation.py\n+++ b/src/plone/api/relation.py\n@@ -140,12 +140,10 @@ def create(source=None, target=None, relationship=None):\n     :type source: Content object\n     :param target: [required] Object that the relation will point to.\n     :type target: Content object\n-    :param relationship: [required] Relationship name. If that name is the same\n-    as a field name and this field is a RelationChoice/RelationList we will\n-    update the field-value accordingly.\n+    :param relationship: [required] Relationship name. If that name is the same as a field name and this field is a RelationChoice / RelationList we will update the field-value accordingly.\n     :type id: string\n     :Example: :ref:`relation_create_example`\n-    """\n+    """  # noqa\n     if source is not None and not base_hasattr(source, \'portal_type\'):\n         raise InvalidParameterError(\'{} has no portal_type\'.format(source))\n \n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-02T09:59:46+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/83f626d3ffba5f7f2552fb4e302eeed714a9c3c4

Update develop.rst: run `tox -e docs` to build the documentation

Files changed:
M docs/contribute/develop.rst

b'diff --git a/docs/contribute/develop.rst b/docs/contribute/develop.rst\nindex c02850e..e356701 100644\n--- a/docs/contribute/develop.rst\n+++ b/docs/contribute/develop.rst\n@@ -52,14 +52,6 @@ Python tools\n \n * tox automation - tox aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing and release process of Python software. Install with `pip install tox`.\n \n-Build the documentation with\n-\n-.. sourcecode:: bash\n-\n-    tox -e docs\n-\n-The HTML pages are in _build/docs/html.\n-\n .. note::\n \n     Again, OS X users should use https://github.com/collective/buildout.python,\n@@ -197,8 +189,7 @@ Commit checklist\n Before every commit you should:\n \n * Run unit tests and syntax validation checks.\n-* Add an entry to :ref:`changes` (if applicable).\n-* Add/modify :ref:`sphinx-docs` (if applicable).\n+* Add an entry to `CHANGES.rst` (if applicable).\n \n All syntax checks and all tests can be run with a single command.\n This command also re-generates your documentation.\n@@ -224,11 +215,13 @@ Travis is configured with the ``.travis.yml`` file located in the root of this p\n Sphinx Documentation\n ====================\n \n-Un-documented code is broken code.\n+::\n+\n+    Un-documented code is broken code.\n \n For every feature you add to the codebase you should also add documentation for it to ``docs/``.\n \n-After adding/modifying documentation, run ``make`` to re-generate your docs.\n+After adding/modifying documentation, run `tox -e docs` to re-generate your docs.\n \n Publicly available documentation on http://api.plone.org is automatically generated from these source files, periodically.\n So when you push changes to master on GitHub you should soon be able to see them published on ``api.plone.org``.\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-02T10:00:31+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/be4005032e68a7711b8bb12f84a8252dbf0fbd5c

Update CHANGES.rst

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 2411f7c..b7a328b 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -11,6 +11,12 @@ Changelog\n 2.0.0a2 (2021-10-13)\n --------------------\n \n+New features:\n+\n+\n+- Preview of documentation per pull request. Netlify bot adds link in PR comments. [ksuess]\n+- Integration in new Plone 6 documentation [ksuess]\n+\n Bug fixes:\n \n \n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-06T09:56:07+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/b3a7aad9fe87864ba738727ddebbddc8420a8cb3

Fix urls, redirects

Files changed:
M CHANGES.rst
M CONTRIBUTING.rst
M README.rst
M docs/about.rst
M docs/api/content.rst
M docs/api/env.rst
M docs/api/exceptions.rst
M docs/api/group.rst
M docs/api/index.rst
M docs/api/portal.rst
M docs/api/relation.rst
M docs/api/user.rst
M docs/content.rst
M docs/contribute/develop.rst
M docs/contribute/index.rst
M docs/contribute/release.rst
M docs/env.rst
M docs/group.rst
M docs/index.rst
M docs/portal.rst
M docs/relation.rst
M docs/user.rst
M src/plone/api/portal.py
M tox.ini

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex b7a328b..c60249a 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -390,8 +390,8 @@ Fixes:\n   [thet]\n \n - Remove the Plone APIs conventions. They are moved to\n-  http://docs.plone.org/develop/styleguide\n-  and http://docs.plone.org/develop/coredev/docs/git.html\n+  https://docs.plone.org/develop/styleguide\n+  and https://docs.plone.org/develop/coredev/docs/git.html\n   [thet]\n \n - Cleanup code to match Plone's style guide.\ndiff --git a/CONTRIBUTING.rst b/CONTRIBUTING.rst\nindex fc637ac..0b05938 100644\n--- a/CONTRIBUTING.rst\n+++ b/CONTRIBUTING.rst\n@@ -1 +1 @@\n-Please see http://docs.plone.org/develop/coredev/docs/guidelines.html\n+Please see https://docs.plone.org/develop/coredev/docs/guidelines.html\ndiff --git a/README.rst b/README.rst\nindex 16c0742..79f52bb 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -32,25 +32,25 @@ Source Code and Contribution\n ============================\n \n .. image:: https://api.travis-ci.org/plone/plone.api.svg\n-    :target: http://travis-ci.org/#!/plone/plone.api\n+    :target: https://travis-ci.org/#!/plone/plone.api\n \n .. image:: https://coveralls.io/repos/github/plone/plone.api/badge.svg?branch=master\n     :alt: Coverage\n     :target: https://coveralls.io/github/plone/plone.api?branch=master\n \n Contributors\n-    Please read the document `Process for Plone core's development <http://docs.plone.org/develop/coredev/docs/index.html>`_.\n-    Also consult the section about contribution in the `plone.api contributors documentation <http://docs.plone.org/develop/plone.api/docs/contribute/index.html>`_.\n+    Please read the document `Process for Plone core's development <https://docs.plone.org/develop/coredev/docs/index.html>`_.\n+    Also consult the section about contribution in the `plone.api contributors documentation <https://docs.plone.org/develop/plone.api/docs/contribute/index.html>`_.\n \n Source Code\n     at the `Plone code repository hosted at GitHub <https://github.com/plone/plone.api>`_.\n \n Issues\n-    Please use the `issue tracker <http://github.com/plone/plone.api/issues>`_\n+    Please use the `issue tracker <https://github.com/plone/plone.api/issues>`_\n \n Continuous Integration\n-    runs on `Travis CI <http://travis-ci.org/plone/plone.api>`_.\n+    runs on `Travis CI <https://travis-ci.org/plone/plone.api>`_.\n \n Code Coverage\n-    is measured at `Coveralls.io <http://coveralls.io/r/plone/plone.api>`_.\n+    is measured at `Coveralls.io <https://coveralls.io/github/plone/plone.api>`_.\n \ndiff --git a/docs/about.rst b/docs/about.rst\nindex 2adfa87..6a32fc7 100644\n--- a/docs/about.rst\n+++ b/docs/about.rst\n@@ -1,7 +1,7 @@\n .. admonition:: GitHub-only\n \n     WARNING: If you are reading this on GitHub, DON'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/about.html>`_\n+    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/about.html>`_\n     so you have working references and proper formatting.\n \n \n@@ -9,10 +9,11 @@\n About\n =====\n \n+\n Inspiration\n ===========\n \n-We want `plone.api` to be developed with `PEP 20 <http://www.python.org/dev/peps/pep-0020/>`_ idioms in mind, in particular:\n+We want `plone.api` to be developed with `PEP 20 <https://peps.python.org/pep-0020/>`_ idioms in mind, in particular:\n \n   | Explicit is better than implicit.\n   | Readability counts.\n@@ -25,11 +26,11 @@ All contributions to `plone.api` should keep these rules in mind.\n \n Two libraries are especially inspiring:\n \n-`SQLAlchemy <http://www.sqlalchemy.org/>`_\n+`SQLAlchemy <https://www.sqlalchemy.org/>`_\n   Arguably, the reason for SQLAlchemy's success in the developer community lies as much in its feature set as in the fact that its API is very well   designed, is consistent, explicit, and easy to learn.\n \n-`Requests <http://docs.python-requests.org>`_\n-  If you look at the documentation for this library, or see `the comparison between the urllib2 way and the requests way <https://gist.github.com/973705>`_, you can see a parallel for Plone regarding the way we *have been* versus the way we *should be* writing code.\n+`Requests <https://docs.python-requests.org/en/latest/>`_\n+  If you look at the documentation for this library, or see `the comparison between the urllib2 way and the requests way <https://gist.github.com/kennethreitz/973705>`_, you can see a parallel for Plone regarding the way we *have been* versus the way we *should be* writing code.\n   At the very least, we should have the option of being able to write such clean code.\n \n The API provides grouped functional access to otherwise distributed logic in Plone.\ndiff --git a/docs/api/content.rst b/docs/api/content.rst\nindex 52e1585..35659be 100644\n--- a/docs/api/content.rst\n+++ b/docs/api/content.rst\n@@ -1,7 +1,7 @@\n .. admonition:: GitHub-only\n \n     WARNING: If you are reading this on GitHub, DON'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/api/content.html>`_\n+    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/api/content.html>`_\n     so you have working references and proper formatting.\n \n \ndiff --git a/docs/api/env.rst b/docs/api/env.rst\nindex 360a403..527d7c1 100644\n--- a/docs/api/env.rst\n+++ b/docs/api/env.rst\n@@ -1,7 +1,7 @@\n .. admonition:: GitHub-only\n \n     WARNING: If you are reading this on GitHub, DON'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/api/env.html>`_\n+    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/api/env.html>`_\n     so you have working references and proper formatting.\n \n \ndiff --git a/docs/api/exceptions.rst b/docs/api/exceptions.rst\nindex bf826da..65bbb66 100644\n--- a/docs/api/exceptions.rst\n+++ b/docs/api/exceptions.rst\n@@ -1,7 +1,7 @@\n .. admonition:: GitHub-only\n \n     WARNING: If you are reading this on GitHub, DON'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/api/exceptions.html>`_\n+    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/api/exceptions.html>`_\n     so you have working references and proper formatting.\n \n \ndiff --git a/docs/api/group.rst b/docs/api/group.rst\nindex 9be3351..ccdf2bd 100644\n--- a/docs/api/group.rst\n+++ b/docs/api/group.rst\n@@ -1,7 +1,7 @@\n .. admonition:: GitHub-only\n \n     WARNING: If you are reading this on GitHub, DON'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/api/group.html>`_\n+    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/api/group.html>`_\n     so you have working references and proper formatting.\n \n \ndiff --git a/docs/api/index.rst b/docs/api/index.rst\nindex 0353bac..b9a968b 100644\n--- a/docs/api/index.rst\n+++ b/docs/api/index.rst\n@@ -1,7 +1,7 @@\n .. admonition:: GitHub-only\n \n     WARNING: If you are reading this on GitHub, DON'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/api/index.html>`_\n+    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/api/index.html>`_\n     so you have working references and proper formatting.\n \n \ndiff --git a/docs/api/portal.rst b/docs/api/portal.rst\nindex 31e00c3..05f07e2 100644\n--- a/docs/api/portal.rst\n+++ b/docs/api/portal.rst\n@@ -1,7 +1,7 @@\n .. admonition:: GitHub-only\n \n     WARNING: If you are reading this on GitHub, DON'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/api/portal.html>`_\n+    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/api/portal.html>`_\n     so you have working references and proper formatting.\n \n \ndiff --git a/docs/api/relation.rst b/docs/api/relation.rst\nindex 9769464..470d277 100644\n--- a/docs/api/relation.rst\n+++ b/docs/api/relation.rst\n@@ -1,7 +1,7 @@\n .. admonition:: GitHub-only\n \n     WARNING: If you are reading this on GitHub, DON'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/api/relation.html>`_\n+    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/api/relation.html>`_\n     so you have working references and proper formatting.\n \n \ndiff --git a/docs/api/user.rst b/docs/api/user.rst\nindex d54521b..566c6e3 100644\n--- a/docs/api/user.rst\n+++ b/docs/api/user.rst\n@@ -1,7 +1,7 @@\n .. admonition:: GitHub-only\n \n     WARNING: If you are reading this on GitHub, DON'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/api/user.html>`_\n+    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/api/user.html>`_\n     so you have working references and proper formatting.\n \n \ndiff --git a/docs/content.rst b/docs/content.rst\nindex e0292b9..53a4b27 100644\n--- a/docs/content.rst\n+++ b/docs/content.rst\n@@ -1,7 +1,7 @@\n .. admonition:: GitHub-only\n \n     WARNING: If you are reading this on GitHub, DON'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/content.html>`_\n+    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/content.html>`_\n     so you have working references and proper formatting.\n \n \n@@ -204,7 +204,7 @@ Combining multiple arguments:\n \n \n More information about how to use the catalog may be found in the\n-`Plone Documentation <http://docs.plone.org/develop/plone/searching_and_indexing/index.html>`_.\n+`Plone Documentation <https://docs.plone.org/develop/plone/searching_and_indexing/index.html>`_.\n \n Note that the catalog returns *brains* (metadata stored in indexes) and not objects.\n However, calling ``getObject()`` on brains does in fact give you the object.\ndiff --git a/docs/contribute/develop.rst b/docs/contribute/develop.rst\nindex e356701..d2d9e2d 100644\n--- a/docs/contribute/develop.rst\n+++ b/docs/contribute/develop.rst\n@@ -1,7 +1,7 @@\n .. admonition:: GitHub-only\n \n     WARNING: If you are reading this on GitHub, DON'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/contribute/develop.html>`_\n+    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/contribute/develop.html>`_\n     so you have working references and proper formatting.\n \n \n@@ -21,11 +21,10 @@ Its purpose is to guide them through the steps needed to start contributing.\n Locations of information and tools\n ==================================\n \n-* `Documentation @ docs.plone.org <http://docs.plone.org>`_\n-* `Source code @ GitHub <http://github.com/plone/plone.api>`_\n-* `Issues @ GitHub <http://github.com/plone/plone.api/issues>`_\n-* `Continuous Integration @ Travis CI <http://travis-ci.org/plone/plone.api>`_\n-* `Code Coverage @ Coveralls.io <http://coveralls.io/r/plone/plone.api>`_\n+* `Documentation @ docs.plone.org <https://docs.plone.org>`_\n+* `Source code @ GitHub <https://github.com/plone/plone.api>`_\n+* `Issues @ GitHub <https://github.com/plone/plone.api/issues>`_\n+* `Code Coverage @ Coveralls.io <https://coveralls.io/github/plone/plone.api>`_\n \n \n Prerequisites\n@@ -64,8 +63,8 @@ Further information\n If you experience problems read through the following links as almost all of the above steps are required for a default Plone development environment:\n \n * https://docs.plone.org/manage/index.html\n-* http://pypi.python.org/pypi/zc.buildout/\n-* http://pypi.python.org/pypi/setuptools\n+* https://pypi.org/project/zc.buildout/\n+* https://pypi.org/project/setuptools/\n * https://plone.org/download\n \n If you are an OS X user, you first need a working Python implementation\n@@ -168,7 +167,7 @@ Once we are happy with your implementation, your branch gets merged into *master\n     them; in other words, others can comment on your code without your code\n     changing their development environments\n \n-Read more about Git branching at https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches and on our Git workflow at `Working with Git and GitHub <http://docs.plone.org/develop/coredev/docs/git.html>`_.\n+Read more about Git branching at https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches and on our Git workflow at `Working with Git and GitHub <https://docs.plone.org/develop/coredev/docs/git.html>`_.\n \n \n Once you are done with your work and you would like us to merge your changes into master, go to GitHub to do a *pull request*.\n@@ -207,7 +206,7 @@ This command also re-generates your documentation.\n Travis Continuous Integration\n =============================\n \n-On every push to GitHub, `Travis <http://travis-ci.org/plone/plone.api>`_ runs all tests and syntax validation checks and reports build outcome to the ``#sprint`` IRC channel and the person who committed the last change.\n+On every push to GitHub, `Travis <https://travis-ci.org/plone/plone.api>`_ runs all tests and syntax validation checks and reports build outcome to the ``#sprint`` IRC channel and the person who committed the last change.\n \n Travis is configured with the ``.travis.yml`` file located in the root of this package.\n \n@@ -221,12 +220,12 @@ Sphinx Documentation\n \n For every feature you add to the codebase you should also add documentation for it to ``docs/``.\n \n-After adding/modifying documentation, run `tox -e docs` to re-generate your docs.\n+After adding/modifying documentation, run `tox -e plone6docs` to re-generate your docs.\n \n-Publicly available documentation on http://api.plone.org is automatically generated from these source files, periodically.\n+Publicly available documentation on https://6.dev-docs.plone.org/plone.api/ is automatically generated from these source files, periodically.\n So when you push changes to master on GitHub you should soon be able to see them published on ``api.plone.org``.\n \n-Read the `reStructuredText Primer <http://sphinx-doc.org/rest.html>`_ to brush up on your `reST` skills.\n+Read the `reStructuredText Primer <https://www.sphinx-doc.org/en/master/usage/restructuredtext/>`_ to brush up on your `reST` skills.\n \n Example:\n \ndiff --git a/docs/contribute/index.rst b/docs/contribute/index.rst\nindex 8c48d64..6ee8ca9 100644\n--- a/docs/contribute/index.rst\n+++ b/docs/contribute/index.rst\n@@ -1,7 +1,7 @@\n .. admonition:: GitHub-only\n \n     WARNING: If you are reading this on GitHub, DON'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/contribute/index.html>`_\n+    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/contribute/index.html>`_\n     so you have working references and proper formatting.\n \n \n@@ -12,7 +12,7 @@ How to contribute to this package?\n Conventions\n ===========\n \n-For rules and guidelines on syntax style, development process, repository workflow, etc see `The Plone Styleguides <http://docs.plone.org/develop/styleguide/>`_ and `Working with Git and GitHub <http://docs.plone.org/develop/coredev/docs/git.html>`_\n+For rules and guidelines on syntax style, development process, repository workflow, etc see `The Plone Styleguides <https://docs.plone.org/develop/styleguide/>`_ and `Working with Git and GitHub <https://docs.plone.org/develop/coredev/docs/git.html>`_\n \n \n Local development environment\ndiff --git a/docs/contribute/release.rst b/docs/contribute/release.rst\nindex 49cb2e0..85a14db 100644\n--- a/docs/contribute/release.rst\n+++ b/docs/contribute/release.rst\n@@ -1,7 +1,7 @@\n .. admonition:: GitHub-only\n \n     WARNING: If you are reading this on GitHub, DON'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/contribute/release.html>`_\n+    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/contribute/release.html>`_\n     so you have working references and proper formatting.\n \n .. _releasing_a_new_version:\ndiff --git a/docs/env.rst b/docs/env.rst\nindex 75c24e8..db857e2 100644\n--- a/docs/env.rst\n+++ b/docs/env.rst\n@@ -1,7 +1,7 @@\n .. admonition:: GitHub-only\n \n     WARNING: If you are reading this on GitHub, DON'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/env.html>`_\n+    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/env.html>`_\n     so you have working references and proper formatting.\n \n \ndiff --git a/docs/group.rst b/docs/group.rst\nindex 66eb637..bb9d36b 100644\n--- a/docs/group.rst\n+++ b/docs/group.rst\n@@ -1,7 +1,7 @@\n .. admonition:: GitHub-only\n \n     WARNING: If you are reading this on GitHub, DON'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/group.html>`_\n+    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/group.html>`_\n     so you have working references and proper formatting.\n \n \ndiff --git a/docs/index.rst b/docs/index.rst\nindex 7ee7425..832908f 100644\n--- a/docs/index.rst\n+++ b/docs/index.rst\n@@ -1,7 +1,7 @@\n .. admonition:: GitHub-only\n \n     WARNING: If you are reading this on GitHub, DON'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/index.html>`_\n+    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/index.html>`_\n     so you have working references and proper formatting.\n \n ===========\ndiff --git a/docs/portal.rst b/docs/portal.rst\nindex cdc2d80..2c3e732 100644\n--- a/docs/portal.rst\n+++ b/docs/portal.rst\n@@ -1,7 +1,7 @@\n .. admonition:: GitHub-only\n \n     WARNING: If you are reading this on GitHub, DON'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/portal.html>`_\n+    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/portal.html>`_\n     so you have working references and proper formatting.\n \n \ndiff --git a/docs/relation.rst b/docs/relation.rst\nindex 287803f..a185fff 100644\n--- a/docs/relation.rst\n+++ b/docs/relation.rst\n@@ -1,7 +1,7 @@\n .. admonition:: GitHub-only\n \n     WARNING: If you are reading this on GitHub, DON'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/env.html>`_\n+    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/env.html>`_\n     so you have working references and proper formatting.\n \n \ndiff --git a/docs/user.rst b/docs/user.rst\nindex c3d11ba..fc43701 100644\n--- a/docs/user.rst\n+++ b/docs/user.rst\n@@ -1,7 +1,7 @@\n .. admonition:: GitHub-only\n \n     WARNING: If you are reading this on GitHub, DON'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/user.html>`_\n+    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/user.html>`_\n     so you have working references and proper formatting.\n \n \ndiff --git a/src/plone/api/portal.py b/src/plone/api/portal.py\nindex 49b9127..291598d 100644\n--- a/src/plone/api/portal.py\n+++ b/src/plone/api/portal.py\n@@ -70,7 +70,7 @@ def get():\n \n     raise CannotGetPortalError(\n         'Unable to get the portal object. More info on '\n-        'http://docs.plone.org/develop/plone.api/docs/api/exceptions.html'\n+        'https://docs.plone.org/develop/plone.api/docs/api/exceptions.html'\n         '#plone.api.exc.CannotGetPortalError',\n     )\n \ndiff --git a/tox.ini b/tox.ini\nindex 518fbdb..71cca92 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -7,6 +7,7 @@ envlist =\n     coverage-report,\n     plone6docs,\n     docs\n+    linkcheck\n \n skip_missing_interpreters = False\n \n@@ -152,7 +153,6 @@ commands =\n     python -VV\n     mkdir -p {toxinidir}/_build/plone6docs\n     sphinx-build -b html -d _build/plone6docs/doctrees docs _build/plone6docs/html\n-#    sphinx-build -b doctest docs _build/docs/doctrees\n \n \n [testenv:docs]\n@@ -172,12 +172,25 @@ commands =\n     python -VV\n     mkdir -p {toxinidir}/_build/docs\n     sphinx-build -b html -D html_theme=alabaster -d _build/docs/doctrees docs _build/docs/html\n-#    sphinx-build -b doctest docs _build/docs/doctrees\n \n whitelist_externals =\n     mkdir\n \n \n+[testenv:linkcheck]\n+basepython = python\n+skip_install = False\n+usedevelop = True\n+extras =\n+    {[testenv:docs]extras}\n+deps =\n+    {[testenv:docs]deps}\n+commands =\n+    python -VV\n+    mkdir -p {toxinidir}/_build/plone6docs\n+    sphinx-build -b linkcheck -d _build/plone6docs/doctrees docs _build/plone6docs/linkcheck\n+\n+\n [testenv:towncrier]\n basepython = python\n skip_install = True\n"

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-06T10:28:17+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/28ceb6527ccf7910ad9cc91c5132ccd7da414985

Fix syntax and wording.

Files changed:
M docs/contribute/develop.rst
M docs/contribute/release.rst
M docs/relation.rst

b'diff --git a/docs/contribute/develop.rst b/docs/contribute/develop.rst\nindex d2d9e2d..8ff98b5 100644\n--- a/docs/contribute/develop.rst\n+++ b/docs/contribute/develop.rst\n@@ -49,7 +49,7 @@ First let\'s look at \'system\' libraries and applications that are normally instal\n Python tools\n ------------\n \n-* tox automation - tox aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing and release process of Python software. Install with `pip install tox`.\n+* tox automation - tox aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing and release process of Python software. Install with ``pip install tox``.\n \n .. note::\n \n@@ -188,7 +188,7 @@ Commit checklist\n Before every commit you should:\n \n * Run unit tests and syntax validation checks.\n-* Add an entry to `CHANGES.rst` (if applicable).\n+* Add an entry to ``CHANGES.rst`` (if applicable).\n \n All syntax checks and all tests can be run with a single command.\n This command also re-generates your documentation.\n@@ -214,13 +214,13 @@ Travis is configured with the ``.travis.yml`` file located in the root of this p\n Sphinx Documentation\n ====================\n \n-::\n+.. note::\n \n     Un-documented code is broken code.\n \n For every feature you add to the codebase you should also add documentation for it to ``docs/``.\n \n-After adding/modifying documentation, run `tox -e plone6docs` to re-generate your docs.\n+After adding or modifying documentation, run ``tox -e plone6docs`` to re-generate your documentation.\n \n Publicly available documentation on https://6.dev-docs.plone.org/plone.api/ is automatically generated from these source files, periodically.\n So when you push changes to master on GitHub you should soon be able to see them published on ``api.plone.org``.\ndiff --git a/docs/contribute/release.rst b/docs/contribute/release.rst\nindex 85a14db..0b5d8df 100644\n--- a/docs/contribute/release.rst\n+++ b/docs/contribute/release.rst\n@@ -41,7 +41,7 @@ Checklist\n \n Folow these step to create a new release of `plone.api`.\n \n-#. Verify that we have documented all changes in the ``docs/CHANGES.rst`` file.\n+#. Verify that we have documented all changes in the ``CHANGES.rst`` file.\n    Go through the list of commits since last release on GitHub and check all changes are documented.\n \n #. Modify the version identifier in the ``setup.py`` to reflect the version of the new release.\ndiff --git a/docs/relation.rst b/docs/relation.rst\nindex a185fff..acd24db 100644\n--- a/docs/relation.rst\n+++ b/docs/relation.rst\n@@ -23,7 +23,7 @@ Get relations\n \n     api.relation.get(source=source, target=target, relationship="friend", unrestricted=False, as_dict=False)\n \n-You must provide either source, target or relationship, or a combination of those to :meth:`api.relation.get`.\n+You must provide either source, target, or relationship, or a combination of those, to :meth:`api.relation.get`.\n ``unrestricted`` and ``as_dict`` are optional.\n \n By default the result is a list of ``RelationValue`` objects.\n@@ -80,7 +80,7 @@ Delete one or more relations:\n \n     api.relation.delete(source=source, target=target, relationship="friend")\n \n-In order to delete relation(s), you must provide either ``source``, ``target`` or ``relationship`` to :meth:`api.relation.delete`.\n+In order to delete relation(s), you must provide either ``source``, ``target``, or ``relationship`` to :meth:`api.relation.delete`.\n You can mix and match.\n \n Delete all relations from source to any target:\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-06T10:28:51+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/2dfe8c11250b78db035496768faeda3c40fc1fd4

Update Makefile: Add simple 'make docs-html' for those who are not familiar with tox.

Files changed:
M Makefile

b'diff --git a/Makefile b/Makefile\nindex 35cb436..378edd3 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -29,10 +29,16 @@ bin/python bin/pip:\n # Documentation\n # ----------------------------------------------------------------------\n \n+.PHONY: docs-html\n+docs-html: bin/python bin/pip ## Build documentation\n+\tbin/pip install tox\n+\tbin/tox -e plone6docs\n+\t@echo\n+\t@echo "Build of documentation finished. The HTML pages are in _build/plone6docs/html."\n+\n .PHONY: netlify\n netlify: bin/python bin/pip\n \tbin/pip install tox\n \tbin/tox -e plone6docs\n \t@echo\n-\t@echo "Build finished. The HTML pages are in _build/plone6docs/html."\n-\n+\t@echo "Build of documentation finished. The HTML pages are in _build/plone6docs/html."\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-06T12:37:51+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/f019e6fffcf450b977a52fb17182f139c830e3b9

Add conversion script (rst -&gt; myST markdown)

Files changed:
A fix-converted-myst.py
M Makefile
M docs/conf.py
M requirements-docs.txt

b'diff --git a/Makefile b/Makefile\nindex 378edd3..e5a8f33 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -35,9 +35,16 @@ docs-html: bin/python bin/pip ## Build documentation\n \tbin/tox -e plone6docs\n \t@echo\n \t@echo "Build of documentation finished. The HTML pages are in _build/plone6docs/html."\n+.PHONY: conversion-to-myst\n+conversion-to-myst: bin/python bin/pip ## Run conversion of documentation from restructuredText to myST\n+\tbin/pip install "rst-to-myst[sphinx]"\n+\t-bin/rst2myst convert -R docs/*.rst\n+\t-bin/rst2myst convert -R docs/**/*.rst\n+\tpython fix-converted-myst.py\n+\tmake netlify\n \n .PHONY: netlify\n-netlify: bin/python bin/pip\n+netlify: bin/python bin/pip ## Run documentatin build (Netlfy style)\n \tbin/pip install tox\n \tbin/tox -e plone6docs\n \t@echo\ndiff --git a/docs/conf.py b/docs/conf.py\nindex 7a6d467..8b874cf 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -1,14 +1,27 @@\n-# sphinx configuration\n+from pkg_resources import get_distribution\n+\n+import sys\n \n project = \'plone.api\'\n copyright = \'2012, Plone Foundation\'\n \n+version = release = get_distribution(project).version\n+\n+\n+# The suffix of source filenames.\n+source_suffix = {\n+    ".md": "markdown",\n+    ".rst": "restructuredtext",\n+}\n+\n extensions = [\n     \'sphinx.ext.doctest\',\n     \'sphinx.ext.coverage\',\n     \'sphinx.ext.autodoc\',\n     \'sphinx.ext.viewcode\',\n     \'sphinx.ext.autosummary\',\n+    "myst_parser",\n+    "sphinx.ext.todo",\n ]\n master_doc = \'index\'\n \n@@ -25,11 +38,6 @@\n     \'\', \'manual\'\n ), ]\n \n-from pkg_resources import get_distribution\n-version = release = get_distribution(project).version\n-\n-import sys\n-\n \n class Mock:\n     def __init__(self, *args, **kwargs):\n@@ -55,6 +63,13 @@ def __getattr__(cls, name):\n     sys.modules[mod_name] = Mock()\n \n \n+# -- Options for myST markdown conversion to html -----------------------------\n+\n+myst_enable_extensions = [\n+    "colon_fence"\n+]\n+\n+\n # -- Options for HTML output -------------------------------------------------\n \n # The theme to use for HTML and HTML Help pages.  See the documentation for\ndiff --git a/fix-converted-myst.py b/fix-converted-myst.py\nnew file mode 100644\nindex 0000000..c6eda07\n--- /dev/null\n+++ b/fix-converted-myst.py\n@@ -0,0 +1,42 @@\n+import logging\n+import os\n+import re\n+\n+logging.basicConfig()\n+logger = logging.getLogger("fix converted myST documentation")\n+logger.setLevel(logging.INFO)\n+\n+logger.info("Fix some myST / markdown stuff.")\n+count_files = {\n+    "modified": 0,\n+    "unmodified": 0,\n+}\n+\n+regex_replace_example = \'(?<=:ref:`)(.*)(?=`)\'\n+\n+\n+def replace_label_underscore(mobj):\n+    return mobj.group(0).replace(\'_\', \'-\')\n+\n+\n+regex_github_warning = r\':::{admonition}([\\S\\s]*?):::\'\n+\n+\n+for root, dirs, files in (*os.walk(\'./src\'), *os.walk(\'./docs\')):\n+    for name in files:\n+        if name.endswith(".py") or name.endswith(".md"):\n+            filename = os.path.join(root, name)\n+            with open(filename, \'r+\') as f:\n+                data = f.read()\n+                data_new = re.sub(regex_replace_example, replace_label_underscore, data)\n+                # data_new = re.sub(regex_github_warning, \'\', data_new, flags=re.DOTALL)\n+                f.seek(0)\n+                f.write(data_new)\n+                count_files["modified"] += 1\n+                logger.info(f"{filename} modified.")\n+\n+\n+logger.info(f\'myST modified for {count_files["modified"]} files.\')\n+logger.info(f\'{count_files["unmodified"]} files unmodified.\')\n+\n+# \'\\\\1\'.replace(\'_\', \'-\')\ndiff --git a/requirements-docs.txt b/requirements-docs.txt\nindex ed461a9..e072f37 100644\n--- a/requirements-docs.txt\n+++ b/requirements-docs.txt\n@@ -1,2 +1,4 @@\n Sphinx\n-sphinx-book-theme<=0.3.99\n\\ No newline at end of file\n+sphinx-book-theme<=0.3.99\n+myst-parser\n+sphinx-autobuild\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-06T12:37:51+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/bea6d2cd083a5f1aae0d2bb049e1da8fbca70cbd

Update fix-converted-myst.py

Files changed:
M fix-converted-myst.py

b'diff --git a/fix-converted-myst.py b/fix-converted-myst.py\nindex c6eda07..01f53e9 100644\n--- a/fix-converted-myst.py\n+++ b/fix-converted-myst.py\n@@ -12,14 +12,29 @@\n     "unmodified": 0,\n }\n \n-regex_replace_example = \'(?<=:ref:`)(.*)(?=`)\'\n \n+def replace_label_underscore(data):\n+    """Fix \'examples\' reference in docstrings.\n \n-def replace_label_underscore(mobj):\n-    return mobj.group(0).replace(\'_\', \'-\')\n+    :Example: :ref:`portal_get_tool_example`\n+    ->\n+    :Example: :ref:`portal-get-tool-example`\n+    """\n+    regex_label_underscore = \'(?<=:ref:`)(.*)(?=`)\'\n \n+    def _replace(mobj):\n+        return mobj.group(0).replace(\'_\', \'-\')\n \n-regex_github_warning = r\':::{admonition}([\\S\\s]*?):::\'\n+    data = re.sub(\n+        regex_label_underscore, _replace, data)\n+    return data\n+\n+\n+def remove_github_warning(data):\n+    """Remove \'GitHub-only\' warning"""\n+    regex_github_warning = r\':::{admonition}([\\S\\s]*?):::\'\n+    data = re.sub(regex_github_warning, \'\', data, flags=re.DOTALL)\n+    return data\n \n \n for root, dirs, files in (*os.walk(\'./src\'), *os.walk(\'./docs\')):\n@@ -28,15 +43,13 @@ def replace_label_underscore(mobj):\n             filename = os.path.join(root, name)\n             with open(filename, \'r+\') as f:\n                 data = f.read()\n-                data_new = re.sub(regex_replace_example, replace_label_underscore, data)\n-                # data_new = re.sub(regex_github_warning, \'\', data_new, flags=re.DOTALL)\n+                data = replace_label_underscore(data)\n+                # data = remove_github_warning(data)\n                 f.seek(0)\n-                f.write(data_new)\n+                f.write(data)\n                 count_files["modified"] += 1\n                 logger.info(f"{filename} modified.")\n \n \n logger.info(f\'myST modified for {count_files["modified"]} files.\')\n logger.info(f\'{count_files["unmodified"]} files unmodified.\')\n-\n-# \'\\\\1\'.replace(\'_\', \'-\')\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-06T12:41:04+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/f8a4b9c4a7708b13464886b3f1062a12595e9daa

Update Makefile: Change order of make targets

Files changed:
M Makefile

b'diff --git a/Makefile b/Makefile\nindex e5a8f33..5eaf407 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -35,13 +35,6 @@ docs-html: bin/python bin/pip ## Build documentation\n \tbin/tox -e plone6docs\n \t@echo\n \t@echo "Build of documentation finished. The HTML pages are in _build/plone6docs/html."\n-.PHONY: conversion-to-myst\n-conversion-to-myst: bin/python bin/pip ## Run conversion of documentation from restructuredText to myST\n-\tbin/pip install "rst-to-myst[sphinx]"\n-\t-bin/rst2myst convert -R docs/*.rst\n-\t-bin/rst2myst convert -R docs/**/*.rst\n-\tpython fix-converted-myst.py\n-\tmake netlify\n \n .PHONY: netlify\n netlify: bin/python bin/pip ## Run documentatin build (Netlfy style)\n@@ -49,3 +42,12 @@ netlify: bin/python bin/pip ## Run documentatin build (Netlfy style)\n \tbin/tox -e plone6docs\n \t@echo\n \t@echo "Build of documentation finished. The HTML pages are in _build/plone6docs/html."\n+\n+## Run conversion of documentation from restructuredText to myST\n+.PHONY: conversion-to-myst\n+conversion-to-myst: bin/python bin/pip\n+\tbin/pip install "rst-to-myst[sphinx]"\n+\t-bin/rst2myst convert -R docs/*.rst\n+\t-bin/rst2myst convert -R docs/**/*.rst\n+\tpython fix-converted-myst.py\n+\tmake netlify\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-06T12:45:59+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/5d607f52f7177ac4f99ac927d449c1494fe4f61f

Update CHANGES.rst

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex c60249a..9ecff64 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -16,6 +16,7 @@ New features:\n \n - Preview of documentation per pull request. Netlify bot adds link in PR comments. [ksuess]\n - Integration in new Plone 6 documentation [ksuess]\n+- Documentation is written in MyST markdown. Was restructuredText. [ksuess]\n \n Bug fixes:\n \n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-06T12:46:56+02:00
Author: Katja Süss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/a5ab449842e862bcdddaa1db90cc0e1e2bfd9a46

Merge pull request #470 from plone/conversion-to-myst-markdown

Conversion to myst markdown

Files changed:
A fix-converted-myst.py
M CHANGES.rst
M Makefile
M docs/conf.py
M requirements-docs.txt

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex c60249a..9ecff64 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -16,6 +16,7 @@ New features:\n \n - Preview of documentation per pull request. Netlify bot adds link in PR comments. [ksuess]\n - Integration in new Plone 6 documentation [ksuess]\n+- Documentation is written in MyST markdown. Was restructuredText. [ksuess]\n \n Bug fixes:\n \ndiff --git a/Makefile b/Makefile\nindex 378edd3..5eaf407 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -37,8 +37,17 @@ docs-html: bin/python bin/pip ## Build documentation\n \t@echo "Build of documentation finished. The HTML pages are in _build/plone6docs/html."\n \n .PHONY: netlify\n-netlify: bin/python bin/pip\n+netlify: bin/python bin/pip ## Run documentatin build (Netlfy style)\n \tbin/pip install tox\n \tbin/tox -e plone6docs\n \t@echo\n \t@echo "Build of documentation finished. The HTML pages are in _build/plone6docs/html."\n+\n+## Run conversion of documentation from restructuredText to myST\n+.PHONY: conversion-to-myst\n+conversion-to-myst: bin/python bin/pip\n+\tbin/pip install "rst-to-myst[sphinx]"\n+\t-bin/rst2myst convert -R docs/*.rst\n+\t-bin/rst2myst convert -R docs/**/*.rst\n+\tpython fix-converted-myst.py\n+\tmake netlify\ndiff --git a/docs/conf.py b/docs/conf.py\nindex 7a6d467..8b874cf 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -1,14 +1,27 @@\n-# sphinx configuration\n+from pkg_resources import get_distribution\n+\n+import sys\n \n project = \'plone.api\'\n copyright = \'2012, Plone Foundation\'\n \n+version = release = get_distribution(project).version\n+\n+\n+# The suffix of source filenames.\n+source_suffix = {\n+    ".md": "markdown",\n+    ".rst": "restructuredtext",\n+}\n+\n extensions = [\n     \'sphinx.ext.doctest\',\n     \'sphinx.ext.coverage\',\n     \'sphinx.ext.autodoc\',\n     \'sphinx.ext.viewcode\',\n     \'sphinx.ext.autosummary\',\n+    "myst_parser",\n+    "sphinx.ext.todo",\n ]\n master_doc = \'index\'\n \n@@ -25,11 +38,6 @@\n     \'\', \'manual\'\n ), ]\n \n-from pkg_resources import get_distribution\n-version = release = get_distribution(project).version\n-\n-import sys\n-\n \n class Mock:\n     def __init__(self, *args, **kwargs):\n@@ -55,6 +63,13 @@ def __getattr__(cls, name):\n     sys.modules[mod_name] = Mock()\n \n \n+# -- Options for myST markdown conversion to html -----------------------------\n+\n+myst_enable_extensions = [\n+    "colon_fence"\n+]\n+\n+\n # -- Options for HTML output -------------------------------------------------\n \n # The theme to use for HTML and HTML Help pages.  See the documentation for\ndiff --git a/fix-converted-myst.py b/fix-converted-myst.py\nnew file mode 100644\nindex 0000000..01f53e9\n--- /dev/null\n+++ b/fix-converted-myst.py\n@@ -0,0 +1,55 @@\n+import logging\n+import os\n+import re\n+\n+logging.basicConfig()\n+logger = logging.getLogger("fix converted myST documentation")\n+logger.setLevel(logging.INFO)\n+\n+logger.info("Fix some myST / markdown stuff.")\n+count_files = {\n+    "modified": 0,\n+    "unmodified": 0,\n+}\n+\n+\n+def replace_label_underscore(data):\n+    """Fix \'examples\' reference in docstrings.\n+\n+    :Example: :ref:`portal_get_tool_example`\n+    ->\n+    :Example: :ref:`portal-get-tool-example`\n+    """\n+    regex_label_underscore = \'(?<=:ref:`)(.*)(?=`)\'\n+\n+    def _replace(mobj):\n+        return mobj.group(0).replace(\'_\', \'-\')\n+\n+    data = re.sub(\n+        regex_label_underscore, _replace, data)\n+    return data\n+\n+\n+def remove_github_warning(data):\n+    """Remove \'GitHub-only\' warning"""\n+    regex_github_warning = r\':::{admonition}([\\S\\s]*?):::\'\n+    data = re.sub(regex_github_warning, \'\', data, flags=re.DOTALL)\n+    return data\n+\n+\n+for root, dirs, files in (*os.walk(\'./src\'), *os.walk(\'./docs\')):\n+    for name in files:\n+        if name.endswith(".py") or name.endswith(".md"):\n+            filename = os.path.join(root, name)\n+            with open(filename, \'r+\') as f:\n+                data = f.read()\n+                data = replace_label_underscore(data)\n+                # data = remove_github_warning(data)\n+                f.seek(0)\n+                f.write(data)\n+                count_files["modified"] += 1\n+                logger.info(f"{filename} modified.")\n+\n+\n+logger.info(f\'myST modified for {count_files["modified"]} files.\')\n+logger.info(f\'{count_files["unmodified"]} files unmodified.\')\ndiff --git a/requirements-docs.txt b/requirements-docs.txt\nindex ed461a9..e072f37 100644\n--- a/requirements-docs.txt\n+++ b/requirements-docs.txt\n@@ -1,2 +1,4 @@\n Sphinx\n-sphinx-book-theme<=0.3.99\n\\ No newline at end of file\n+sphinx-book-theme<=0.3.99\n+myst-parser\n+sphinx-autobuild\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-06T13:18:18+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/6fbbe2a669acd57eea3d6a741b71c7a531232056

Conversion to MyST

Files changed:
A docs/about.md
A docs/api/content.md
A docs/api/env.md
A docs/api/exceptions.md
A docs/api/group.md
A docs/api/index.md
A docs/api/portal.md
A docs/api/relation.md
A docs/api/user.md
A docs/content.md
A docs/contribute/develop.md
A docs/contribute/index.md
A docs/contribute/release.md
A docs/env.md
A docs/group.md
A docs/index.md
A docs/portal.md
A docs/relation.md
A docs/user.md
M src/plone/api/content.py
M src/plone/api/env.py
M src/plone/api/group.py
M src/plone/api/portal.py
M src/plone/api/relation.py
M src/plone/api/user.py
D docs/about.rst
D docs/api/content.rst
D docs/api/env.rst
D docs/api/exceptions.rst
D docs/api/group.rst
D docs/api/index.rst
D docs/api/portal.rst
D docs/api/relation.rst
D docs/api/user.rst
D docs/content.rst
D docs/contribute/develop.rst
D docs/contribute/index.rst
D docs/contribute/release.rst
D docs/env.rst
D docs/group.rst
D docs/index.rst
D docs/portal.rst
D docs/relation.rst
D docs/user.rst

b'diff --git a/docs/about.md b/docs/about.md\nnew file mode 100644\nindex 0000000..80824d0\n--- /dev/null\n+++ b/docs/about.md\n@@ -0,0 +1,147 @@\n+:::{admonition} GitHub-only\n+WARNING: If you are reading this on GitHub, DON\'T!\n+Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/about.html)\n+so you have working references and proper formatting.\n+:::\n+\n+# About\n+\n+## Inspiration\n+\n+We want `plone.api` to be developed with [PEP 20](https://peps.python.org/pep-0020/) idioms in mind, in particular:\n+\n+> Explicit is better than implicit.\n+>\n+> Readability counts.\n+>\n+> There should be one-- and preferably only one --obvious way to do it.\n+>\n+> Now is better than never.\n+>\n+> If the implementation is hard to explain, it\'s a bad idea.\n+>\n+> If the implementation is easy to explain, it may be a good idea.\n+\n+All contributions to `plone.api` should keep these rules in mind.\n+\n+Two libraries are especially inspiring:\n+\n+[SQLAlchemy](https://www.sqlalchemy.org/)\n+\n+: Arguably, the reason for SQLAlchemy\'s success in the developer community lies as much in its feature set as in the fact that its API is very well   designed, is consistent, explicit, and easy to learn.\n+\n+[Requests](https://docs.python-requests.org/en/latest/)\n+\n+: If you look at the documentation for this library, or see [the comparison between the urllib2 way and the requests way](https://gist.github.com/kennethreitz/973705), you can see a parallel for Plone regarding the way we *have been* versus the way we *should be* writing code.\n+  At the very least, we should have the option of being able to write such clean code.\n+\n+The API provides grouped functional access to otherwise distributed logic in Plone.\n+This distribution is a result of two historical factors: reuse of CMF- and Zope-methods, and reasonable but hard to remember splits like `acl_users` and `portal_memberdata`.\n+Methods defined in `plone.api` implement best-practice access to the original distributed APIs.\n+These methods also provide clear documentation of how best to access Plone APIs directly.\n+\n+:::{note}\n+If you doubt those last sentences:\n+We had five different ways to get the portal root with different edge-cases.\n+We had three different ways to move an object.\n+With this in mind, it\'s obvious that even the simplest Plone tasks can\'t be documented in a sane way.\n+:::\n+\n+We do not intend to cover all possible use-cases, only the most common.\n+We will cover the 20% of possible tasks on which we spend 80% of our time.\n+If you need to do something that `plone.api` does not support, use the underlying APIs directly.\n+We try to document sensible use cases even when we don\'t provide APIs for them, though.\n+\n+## Design decisions\n+\n+### Import and usage style\n+\n+API methods are grouped according to what they affect.\n+For example:\n+{ref}`chapter_portal`,\n+{ref}`chapter_content`,\n+{ref}`chapter_users`,\n+{ref}`chapter_env` and\n+{ref}`chapter_groups`.\n+In general, importing and using an API looks something like this:\n+\n+% invisible-code-block: python\n+%\n+% from plone import api\n+% from plone.api.exc import InvalidParameterError\n+% try:\n+%     api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n+% except InvalidParameterError:\n+%     portal = api.portal.get()\n+%     portal.portal_properties.site_properties.use_email_as_login = True\n+\n+```python\n+from plone import api\n+\n+portal = api.portal.get()\n+catalog = api.portal.get_tool(name="portal_catalog")\n+user = api.user.create(email=\'alice@plone.org\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(portal.__class__.__name__, \'PloneSite\')\n+% self.assertEqual(catalog.__class__.__name__, \'CatalogTool\')\n+% self.assertEqual(user.__class__.__name__, \'MemberData\')\n+\n+Always import the top-level package\n+(`from plone import api`)\n+and then use the group namespace to access the method you want\n+(`portal = api.portal.get()`).\n+\n+All example code should adhere to this style, to encourage one and only one preferred way of consuming API methods.\n+\n+### Prefer keyword arguments\n+\n+We prefer using keyword arguments to positional arguments.\n+Example code in `plone.api` will use this style, and we recommend users follow this convention.\n+For the curious, here are the reasons why:\n+\n+1. There will never be any doubt when writing a method whether an argument should be positional or not.\n+   Decision already made.\n+2. There will never be any doubt when using the API on which argument comes first, or which ones are named/positional.\n+   All arguments are named.\n+3. When using positional arguments, the method signature is dictated by the underlying implementation\n+   (think required vs. optional arguments).\n+   Named arguments are always optional in Python.\n+   Using keywords allows implementation details to change while the signature is preserved.\n+   In other words, the underlying API code can change substantially but code using it will remain valid.\n+4. The arguments can all be passed as a dictionary.\n+\n+```python\n+# GOOD\n+from plone import api\n+alice = api.user.get(username=\'alice@plone.org\')\n+\n+# BAD\n+from plone.api import user\n+alice = user.get(\'alice@plone.org\')\n+```\n+\n+## FAQ\n+\n+### Why aren\'t we using wrappers?\n+\n+We could wrap an object (like a user) with an API to make it more usable right now.\n+That would be an alternative to the convenience methods.\n+\n+Unfortunately a wrapper is not the same as the object it wraps, and answering the inevitable questions about this difference would be confusing. Moreover, functionality provided by {mod}`zope.interface` such as annotations would need to be proxied.\n+This would be extremely difficult, if not impossible.\n+\n+It is also important that developers be able to ensure that their tests continue to work even if wrappers were to be deprecated.\n+Consider the failure lurking behind test code such as this:\n+\n+```\n+if users[\'bob\'].__class__.__name__ == \'WrappedMemberDataObject\':\n+    # do something\n+```\n+\n+### Why `delete` instead of `remove`?\n+\n+- The underlying code uses method names similar to *delete* rather than to *remove*.\n+- The `CRUD` verb is *delete*, not *remove*.\ndiff --git a/docs/about.rst b/docs/about.rst\ndeleted file mode 100644\nindex 6a32fc7..0000000\n--- a/docs/about.rst\n+++ /dev/null\n@@ -1,152 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/about.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-=====\n-About\n-=====\n-\n-\n-Inspiration\n-===========\n-\n-We want `plone.api` to be developed with `PEP 20 <https://peps.python.org/pep-0020/>`_ idioms in mind, in particular:\n-\n-  | Explicit is better than implicit.\n-  | Readability counts.\n-  | There should be one-- and preferably only one --obvious way to do it.\n-  | Now is better than never.\n-  | If the implementation is hard to explain, it\'s a bad idea.\n-  | If the implementation is easy to explain, it may be a good idea.\n-\n-All contributions to `plone.api` should keep these rules in mind.\n-\n-Two libraries are especially inspiring:\n-\n-`SQLAlchemy <https://www.sqlalchemy.org/>`_\n-  Arguably, the reason for SQLAlchemy\'s success in the developer community lies as much in its feature set as in the fact that its API is very well   designed, is consistent, explicit, and easy to learn.\n-\n-`Requests <https://docs.python-requests.org/en/latest/>`_\n-  If you look at the documentation for this library, or see `the comparison between the urllib2 way and the requests way <https://gist.github.com/kennethreitz/973705>`_, you can see a parallel for Plone regarding the way we *have been* versus the way we *should be* writing code.\n-  At the very least, we should have the option of being able to write such clean code.\n-\n-The API provides grouped functional access to otherwise distributed logic in Plone.\n-This distribution is a result of two historical factors: reuse of CMF- and Zope-methods, and reasonable but hard to remember splits like `acl_users` and `portal_memberdata`.\n-Methods defined in `plone.api` implement best-practice access to the original distributed APIs.\n-These methods also provide clear documentation of how best to access Plone APIs directly.\n-\n-.. note::\n-   If you doubt those last sentences:\n-   We had five different ways to get the portal root with different edge-cases.\n-   We had three different ways to move an object.\n-   With this in mind, it\'s obvious that even the simplest Plone tasks can\'t be documented in a sane way.\n-\n-We do not intend to cover all possible use-cases, only the most common.\n-We will cover the 20% of possible tasks on which we spend 80% of our time.\n-If you need to do something that `plone.api` does not support, use the underlying APIs directly.\n-We try to document sensible use cases even when we don\'t provide APIs for them, though.\n-\n-Design decisions\n-================\n-\n-Import and usage style\n-----------------------\n-\n-API methods are grouped according to what they affect.\n-For example:\n-:ref:`chapter_portal`,\n-:ref:`chapter_content`,\n-:ref:`chapter_users`,\n-:ref:`chapter_env` and\n-:ref:`chapter_groups`.\n-In general, importing and using an API looks something like this:\n-\n-.. invisible-code-block: python\n-\n-    from plone import api\n-    from plone.api.exc import InvalidParameterError\n-    try:\n-        api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n-    except InvalidParameterError:\n-        portal = api.portal.get()\n-        portal.portal_properties.site_properties.use_email_as_login = True\n-\n-.. code-block:: python\n-\n-    from plone import api\n-\n-    portal = api.portal.get()\n-    catalog = api.portal.get_tool(name="portal_catalog")\n-    user = api.user.create(email=\'alice@plone.org\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(portal.__class__.__name__, \'PloneSite\')\n-    self.assertEqual(catalog.__class__.__name__, \'CatalogTool\')\n-    self.assertEqual(user.__class__.__name__, \'MemberData\')\n-\n-Always import the top-level package\n-(``from plone import api``)\n-and then use the group namespace to access the method you want\n-(``portal = api.portal.get()``).\n-\n-All example code should adhere to this style, to encourage one and only one preferred way of consuming API methods.\n-\n-\n-Prefer keyword arguments\n-------------------------\n-\n-We prefer using keyword arguments to positional arguments.\n-Example code in `plone.api` will use this style, and we recommend users follow this convention.\n-For the curious, here are the reasons why:\n-\n-#. There will never be any doubt when writing a method whether an argument should be positional or not.\n-   Decision already made.\n-#. There will never be any doubt when using the API on which argument comes first, or which ones are named/positional.\n-   All arguments are named.\n-#. When using positional arguments, the method signature is dictated by the underlying implementation\n-   (think required vs. optional arguments).\n-   Named arguments are always optional in Python.\n-   Using keywords allows implementation details to change while the signature is preserved.\n-   In other words, the underlying API code can change substantially but code using it will remain valid.\n-#. The arguments can all be passed as a dictionary.\n-\n-\n-.. code-block:: python\n-\n-    # GOOD\n-    from plone import api\n-    alice = api.user.get(username=\'alice@plone.org\')\n-\n-    # BAD\n-    from plone.api import user\n-    alice = user.get(\'alice@plone.org\')\n-\n-\n-FAQ\n-===\n-\n-Why aren\'t we using wrappers?\n------------------------------\n-\n-We could wrap an object (like a user) with an API to make it more usable right now.\n-That would be an alternative to the convenience methods.\n-\n-Unfortunately a wrapper is not the same as the object it wraps, and answering the inevitable questions about this difference would be confusing. Moreover, functionality provided by :mod:`zope.interface` such as annotations would need to be proxied.\n-This would be extremely difficult, if not impossible.\n-\n-It is also important that developers be able to ensure that their tests continue to work even if wrappers were to be deprecated.\n-Consider the failure lurking behind test code such as this::\n-\n-    if users[\'bob\'].__class__.__name__ == \'WrappedMemberDataObject\':\n-        # do something\n-\n-\n-Why ``delete`` instead of ``remove``?\n--------------------------------------\n-\n-* The underlying code uses method names similar to *delete* rather than to *remove*.\n-* The ``CRUD`` verb is *delete*, not *remove*.\ndiff --git a/docs/api/content.md b/docs/api/content.md\nnew file mode 100644\nindex 0000000..bccb214\n--- /dev/null\n+++ b/docs/api/content.md\n@@ -0,0 +1,14 @@\n+:::{admonition} GitHub-only\n+WARNING: If you are reading this on GitHub, DON\'T!\n+Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/api/content.html)\n+so you have working references and proper formatting.\n+:::\n+\n+(plone-api-content)=\n+\n+# plone.api.content\n+\n+```{eval-rst}\n+.. automodule:: plone.api.content\n+    :members:\n+```\ndiff --git a/docs/api/content.rst b/docs/api/content.rst\ndeleted file mode 100644\nindex 35659be..0000000\n--- a/docs/api/content.rst\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/api/content.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. _plone-api-content:\n-\n-plone.api.content\n-=================\n-\n-.. automodule:: plone.api.content\n-    :members:\ndiff --git a/docs/api/env.md b/docs/api/env.md\nnew file mode 100644\nindex 0000000..61e7d36\n--- /dev/null\n+++ b/docs/api/env.md\n@@ -0,0 +1,14 @@\n+:::{admonition} GitHub-only\n+WARNING: If you are reading this on GitHub, DON\'T!\n+Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/api/env.html)\n+so you have working references and proper formatting.\n+:::\n+\n+(plone-api-env)=\n+\n+# plone.api.env\n+\n+```{eval-rst}\n+.. automodule:: plone.api.env\n+    :members:\n+```\ndiff --git a/docs/api/env.rst b/docs/api/env.rst\ndeleted file mode 100644\nindex 527d7c1..0000000\n--- a/docs/api/env.rst\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/api/env.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. _plone-api-env:\n-\n-plone.api.env\n-=============\n-\n-.. automodule:: plone.api.env\n-    :members:\ndiff --git a/docs/api/exceptions.md b/docs/api/exceptions.md\nnew file mode 100644\nindex 0000000..770a5ca\n--- /dev/null\n+++ b/docs/api/exceptions.md\n@@ -0,0 +1,14 @@\n+:::{admonition} GitHub-only\n+WARNING: If you are reading this on GitHub, DON\'T!\n+Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/api/exceptions.html)\n+so you have working references and proper formatting.\n+:::\n+\n+(plone-api-errors)=\n+\n+# plone.api.exc\n+\n+```{eval-rst}\n+.. automodule:: plone.api.exc\n+    :members:\n+```\ndiff --git a/docs/api/exceptions.rst b/docs/api/exceptions.rst\ndeleted file mode 100644\nindex 65bbb66..0000000\n--- a/docs/api/exceptions.rst\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/api/exceptions.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. _plone-api-errors:\n-\n-plone.api.exc\n-=============\n-\n-.. automodule:: plone.api.exc\n-    :members:\ndiff --git a/docs/api/group.md b/docs/api/group.md\nnew file mode 100644\nindex 0000000..b896bdb\n--- /dev/null\n+++ b/docs/api/group.md\n@@ -0,0 +1,14 @@\n+:::{admonition} GitHub-only\n+WARNING: If you are reading this on GitHub, DON\'T!\n+Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/api/group.html)\n+so you have working references and proper formatting.\n+:::\n+\n+(plone-api-group)=\n+\n+# plone.api.group\n+\n+```{eval-rst}\n+.. automodule:: plone.api.group\n+    :members:\n+```\ndiff --git a/docs/api/group.rst b/docs/api/group.rst\ndeleted file mode 100644\nindex ccdf2bd..0000000\n--- a/docs/api/group.rst\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/api/group.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. _plone-api-group:\n-\n-plone.api.group\n-===============\n-\n-.. automodule:: plone.api.group\n-    :members:\ndiff --git a/docs/api/index.rst b/docs/api/index.md\nsimilarity index 71%\nrename from docs/api/index.rst\nrename to docs/api/index.md\nindex b9a968b..84680a7 100644\n--- a/docs/api/index.rst\n+++ b/docs/api/index.md\n@@ -1,18 +1,18 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/api/index.html>`_\n-    so you have working references and proper formatting.\n-\n+:::{admonition} GitHub-only\n+WARNING: If you are reading this on GitHub, DON\'T!\n+Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/api/index.html)\n+so you have working references and proper formatting.\n+:::\n \n+```{eval-rst}\n .. currentmodule:: plone\n+```\n \n-List of all API methods with descriptions\n-=========================================\n+# List of all API methods with descriptions\n \n-api.portal\n-----------\n+## api.portal\n \n+```{eval-rst}\n .. autosummary::\n \n     api.portal.get\n@@ -23,10 +23,11 @@ api.portal\n     api.portal.show_message\n     api.portal.get_registry_record\n \n+```\n \n-api.content\n------------\n+## api.content\n \n+```{eval-rst}\n .. autosummary::\n \n     api.content.get\n@@ -40,10 +41,11 @@ api.content\n     api.content.transition\n     api.content.get_view\n \n+```\n \n-api.user\n---------\n+## api.user\n \n+```{eval-rst}\n .. autosummary::\n \n     api.user.get\n@@ -57,10 +59,11 @@ api.user\n     api.user.grant_roles\n     api.user.revoke_roles\n \n+```\n \n-api.group\n----------\n+## api.group\n \n+```{eval-rst}\n .. autosummary::\n \n     api.group.get\n@@ -73,10 +76,11 @@ api.group\n     api.group.grant_roles\n     api.group.revoke_roles\n \n+```\n \n-api.env\n--------\n+## api.env\n \n+```{eval-rst}\n .. autosummary::\n \n     api.env.adopt_roles\n@@ -84,23 +88,26 @@ api.env\n     api.env.debug_mode\n     api.env.test_mode\n \n+```\n \n-api.relation\n-------------\n+## api.relation\n \n+```{eval-rst}\n .. autosummary::\n \n     api.relation.get\n     api.relation.create\n     api.relation.delete\n \n+```\n \n-Exceptions and errors\n----------------------\n+## Exceptions and errors\n \n+```{eval-rst}\n .. autosummary::\n \n     api.exc.PloneApiError\n     api.exc.MissingParameterError\n     api.exc.InvalidParameterError\n     api.exc.CannotGetPortalError\n+```\ndiff --git a/docs/api/portal.md b/docs/api/portal.md\nnew file mode 100644\nindex 0000000..c6b50d5\n--- /dev/null\n+++ b/docs/api/portal.md\n@@ -0,0 +1,14 @@\n+:::{admonition} GitHub-only\n+WARNING: If you are reading this on GitHub, DON\'T!\n+Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/api/portal.html)\n+so you have working references and proper formatting.\n+:::\n+\n+(plone-api-portal)=\n+\n+# plone.api.portal\n+\n+```{eval-rst}\n+.. automodule:: plone.api.portal\n+    :members:\n+```\ndiff --git a/docs/api/portal.rst b/docs/api/portal.rst\ndeleted file mode 100644\nindex 05f07e2..0000000\n--- a/docs/api/portal.rst\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/api/portal.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. _plone-api-portal:\n-\n-plone.api.portal\n-================\n-\n-.. automodule:: plone.api.portal\n-    :members:\ndiff --git a/docs/api/relation.md b/docs/api/relation.md\nnew file mode 100644\nindex 0000000..95e6a7c\n--- /dev/null\n+++ b/docs/api/relation.md\n@@ -0,0 +1,14 @@\n+:::{admonition} GitHub-only\n+WARNING: If you are reading this on GitHub, DON\'T!\n+Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/api/relation.html)\n+so you have working references and proper formatting.\n+:::\n+\n+(plone-api-relation)=\n+\n+# plone.api.relation\n+\n+```{eval-rst}\n+.. automodule:: plone.api.relation\n+    :members:\n+```\ndiff --git a/docs/api/relation.rst b/docs/api/relation.rst\ndeleted file mode 100644\nindex 470d277..0000000\n--- a/docs/api/relation.rst\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/api/relation.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. _plone-api-relation:\n-\n-plone.api.relation\n-==================\n-\n-.. automodule:: plone.api.relation\n-    :members:\ndiff --git a/docs/api/user.md b/docs/api/user.md\nnew file mode 100644\nindex 0000000..27f8746\n--- /dev/null\n+++ b/docs/api/user.md\n@@ -0,0 +1,14 @@\n+:::{admonition} GitHub-only\n+WARNING: If you are reading this on GitHub, DON\'T!\n+Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/api/user.html)\n+so you have working references and proper formatting.\n+:::\n+\n+(plone-api-user)=\n+\n+# plone.api.user\n+\n+```{eval-rst}\n+.. automodule:: plone.api.user\n+    :members:\n+```\ndiff --git a/docs/api/user.rst b/docs/api/user.rst\ndeleted file mode 100644\nindex 566c6e3..0000000\n--- a/docs/api/user.rst\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/api/user.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. _plone-api-user:\n-\n-plone.api.user\n-==============\n-\n-.. automodule:: plone.api.user\n-    :members:\ndiff --git a/docs/content.md b/docs/content.md\nnew file mode 100644\nindex 0000000..cdf4b2d\n--- /dev/null\n+++ b/docs/content.md\n@@ -0,0 +1,499 @@\n+:::{admonition} GitHub-only\n+WARNING: If you are reading this on GitHub, DON\'T!\n+Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/content.html)\n+so you have working references and proper formatting.\n+:::\n+\n+```{eval-rst}\n+.. module:: plone\n+```\n+\n+(chapter-content)=\n+\n+# Content\n+\n+(content-create-example)=\n+\n+## Create content\n+\n+To add an object, you must first have a container to put it in.\n+Get the portal object; it will serve nicely:\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+```\n+\n+Create your new content item using the {meth}`api.content.create` method.\n+The type argument will decide which content type will be created.\n+\n+```python\n+from plone import api\n+obj = api.content.create(\n+    type=\'Document\',\n+    title=\'My Content\',\n+    container=portal)\n+```\n+\n+The `id` of the new object is automatically and safely generated from its `title`.\n+\n+```python\n+assert obj.id == \'my-content\'\n+```\n+\n+(content-get-example)=\n+\n+## Get content object\n+\n+There are several approaches to getting your content object.\n+Consider the following portal structure:\n+\n+```\n+plone (portal root)\n+|-- blog\n+|-- about\n+|   |-- team\n+|   `-- contact\n+`-- events\n+    |-- training\n+    |-- conference\n+    `-- sprint\n+```\n+\n+% invisible-code-block: python\n+%\n+% portal = api.portal.get()\n+% image = api.content.create(type=\'Image\', id=\'image\', container=portal)\n+% blog = api.content.create(type=\'Link\', id=\'blog\', container=portal)\n+% about = api.content.create(type=\'Folder\', id=\'about\', container=portal)\n+% events = api.content.create(type=\'Folder\', id=\'events\', container=portal)\n+%\n+% api.content.create(container=about, type=\'Document\', id=\'team\')\n+% api.content.create(container=about, type=\'Document\', id=\'contact\')\n+%\n+% api.content.create(container=events, type=\'Event\', id=\'training\')\n+% api.content.create(container=events, type=\'Event\', id=\'conference\')\n+% api.content.create(container=events, type=\'Event\', id=\'sprint\')\n+\n+The following operations will get objects from the stucture above, including using {meth}`api.content.get`.\n+\n+```python\n+# let\'s first get the portal object\n+from plone import api\n+portal = api.portal.get()\n+assert portal.id == \'plone\'\n+\n+# content can be accessed directly with dict-like access\n+blog = portal[\'blog\']\n+\n+# another way is to use ``get()`` method and pass it a path\n+about = api.content.get(path=\'/about\')\n+\n+# more examples\n+conference = portal[\'events\'][\'conference\']\n+sprint = api.content.get(path=\'/events/sprint\')\n+\n+# moreover, you can access content by its UID\n+uid = about[\'team\'].UID()\n+team = api.content.get(UID=uid)\n+\n+# returns None if UID cannot be found in catalog\n+not_found = api.content.get(UID=\'notfound\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertTrue(portal)\n+% self.assertTrue(blog)\n+% self.assertTrue(about)\n+% self.assertTrue(conference)\n+% self.assertTrue(sprint)\n+% self.assertTrue(team)\n+% self.assertEquals(not_found, None)\n+\n+(content-find-example)=\n+\n+## Find content objects\n+\n+You can use the find function to search for content.\n+\n+Finding all Documents:\n+\n+```python\n+from plone import api\n+documents = api.content.find(portal_type=\'Document\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertGreater(len(documents), 0)\n+\n+Finding all Documents within a context:\n+\n+```python\n+from plone import api\n+documents = api.content.find(\n+    context=api.portal.get(), portal_type=\'Document\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertGreater(len(documents), 0)\n+\n+Limit search depth:\n+\n+```python\n+from plone import api\n+documents = api.content.find(depth=1, portal_type=\'Document\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertGreater(len(documents), 0)\n+\n+Limit search depth within a context:\n+\n+```python\n+from plone import api\n+documents = api.content.find(\n+    context=api.portal.get(), depth=1, portal_type=\'Document\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertGreater(len(documents), 0)\n+\n+Search by interface:\n+\n+```python\n+from plone import api\n+from Products.CMFCore.interfaces import IContentish\n+documents = api.content.find(object_provides=IContentish)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertGreater(len(documents), 0)\n+\n+Combining multiple arguments:\n+\n+```python\n+from plone import api\n+from Products.CMFCore.interfaces import IContentish\n+documents = api.content.find(\n+    context=api.portal.get(),\n+    depth=2,\n+    object_provides=IContentish,\n+    SearchableText=\'Team\',\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertGreater(len(documents), 0)\n+\n+More information about how to use the catalog may be found in the\n+[Plone Documentation](https://docs.plone.org/develop/plone/searching_and_indexing/index.html).\n+\n+Note that the catalog returns *brains* (metadata stored in indexes) and not objects.\n+However, calling `getObject()` on brains does in fact give you the object.\n+\n+```python\n+document_brain = documents[0]\n+document_obj = document_brain.getObject()\n+```\n+\n+(content-get-uuid-example)=\n+\n+## Get content object UUID\n+\n+A Universally Unique IDentifier (UUID) is a unique, non-human-readable identifier for a content object which remains constant for the object even if the object is moved.\n+\n+Plone uses UUIDs for storing references between content and for linking by UIDs, enabling persistent links.\n+\n+To get the UUID of any content object use {meth}`api.content.get_uuid`.\n+The following code gets the UUID of the `contact` document.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+contact = portal[\'about\'][\'contact\']\n+\n+uuid = api.content.get_uuid(obj=contact)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertTrue(isinstance(uuid, str))\n+\n+(content-move-example)=\n+\n+## Move content\n+\n+To move content around the portal structure defined above use the {meth}`api.content.move` method.\n+The code below moves the `contact` item (with all it contains) out of the folder `about` and into the Plone portal root.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+contact = portal[\'about\'][\'contact\']\n+\n+api.content.move(source=contact, target=portal)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertFalse(portal[\'about\'].get(\'contact\'))\n+% self.assertTrue(portal[\'contact\'])\n+\n+Actually, `move` behaves like a filesystem move.\n+If you pass it an `id` argument, the object will have that new ID in its new home.\n+By default it will retain its original ID.\n+\n+(content-rename-example)=\n+\n+## Rename content\n+\n+To rename a content object (change its ID), use the {meth}`api.content.rename` method.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+api.content.rename(obj=portal[\'blog\'], new_id=\'old-blog\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertFalse(portal.get(\'blog\'))\n+% self.assertTrue(portal[\'old-blog\'])\n+\n+(content-copy-example)=\n+\n+## Copy content\n+\n+To copy a content object, use the {meth}`api.content.copy` method.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+training = portal[\'events\'][\'training\']\n+\n+api.content.copy(source=training, target=portal)\n+```\n+\n+Note that the new object will have the same ID as the old object (unless otherwise stated).\n+This is not a problem, since the new object is in a different container.\n+\n+% invisible-code-block: python\n+%\n+% assert portal[\'events\'][\'training\'].id == \'training\'\n+% assert portal[\'training\'].id == \'training\'\n+\n+You can also set `target` to source\'s container and set `safe_id=True`.\n+This will duplicate your content object in the same container and assign it a new, non-conflicting ID.\n+\n+```python\n+api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n+new_training = portal[\'copy_of_training\']\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertTrue(portal[\'training\'])  # old object remains\n+% self.assertTrue(portal[\'copy_of_training\'])\n+\n+(content-delete-example)=\n+\n+## Delete content\n+\n+To delete a content object, pass the object to the {meth}`api.content.delete` method:\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+api.content.delete(obj=portal[\'copy_of_training\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertFalse(portal.get(\'copy_of_training\'))\n+\n+To delete multiple content objects, pass the objects to the {meth}`api.content.delete` method:\n+\n+% invisible-code-block: python\n+%\n+% api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n+% api.content.copy(source=portal[\'events\'][\'training\'], target=portal[\'events\'], safe_id=True)\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+data = [portal[\'copy_of_training\'], portal[\'events\'][\'copy_of_training\'], ]\n+api.content.delete(objects=data)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertFalse(portal.get(\'copy_of_training\'))\n+% self.assertFalse(portal.events.get(\'copy_of_training\'))\n+\n+If deleting content would result in broken links you will get a `LinkIntegrityNotificationException`. To delete anyway, set the option `check_linkintegrity` to `False`:\n+\n+% invisible-code-block: python\n+%\n+% from plone.app.textfield import RichTextValue\n+% from zope.lifecycleevent import modified\n+% api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n+% api.content.copy(source=portal[\'events\'][\'training\'], target=portal[\'events\'], safe_id=True)\n+% portal[\'about\'][\'team\'].text = RichTextValue(\'<a href="../copy_of_training">contact</a>\', \'text/html\', \'text/x-html-safe\')\n+% modified(portal[\'about\'][\'team\'])\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+api.content.delete(obj=portal[\'copy_of_training\'], check_linkintegrity=False)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertNotIn(\'copy_of_training\', portal.keys())\n+\n+(content-manipulation-with-safe-id-option)=\n+\n+## Content manipulation with the `safe_id` option\n+\n+When you manipulate content with {meth}`api.content.create`, {meth}`api.content.move` or {meth}`api.content.copy` the `safe_id` flag is disabled by default.\n+This means the uniqueness of IDs will be enforced.\n+If another object with the same ID is already present in the target container these API methods will raise an error.\n+\n+However, if the `safe_id` option is enabled, a non-conflicting ID will be generated.\n+\n+% invisible-code-block: python\n+%\n+% api.content.create(container=portal, type=\'Document\', id=\'document\', safe_id=True)\n+\n+```python\n+api.content.create(container=portal, type=\'Document\', id=\'document\', safe_id=True)\n+document = portal[\'document-1\']\n+```\n+\n+(content-get-state-example)=\n+\n+## Get workflow state\n+\n+To find out the current workflow state of your content, use the {meth}`api.content.get_state` method.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+state = api.content.get_state(obj=portal[\'about\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(state, \'private\')\n+\n+The optional `default` argument is returned if no workflow is defined for the object.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+state = api.content.get_state(obj=portal[\'image\'], default=\'Unknown\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(state, \'Unknown\')\n+\n+(content-transition-example)=\n+\n+## Transition\n+\n+To transition your content to a new workflow state, use the {meth}`api.content.transition` method.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+api.content.transition(obj=portal[\'about\'], transition=\'publish\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(\n+%     api.content.get_state(obj=portal[\'about\']),\n+%     \'published\'\n+% )\n+\n+If your workflow accepts any additional arguments to the checkin method you may supply them via kwargs.\n+These arguments can be saved to your transition using custom workflow variables inside the ZMI using an expression such as "python:state_change.kwargs.get(\'comment\', \'\')"\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+api.content.transition(obj=portal[\'about\'], transition=\'reject\', comment=\'You had a typo on your page.\')\n+```\n+\n+% invisible-code-block: python\n+\n+(content-disable-roles-acquisition-example)=\n+\n+## Disable local roles acquisition\n+\n+To disable the acquisition of local roles for an object, use the {meth}`api.content.disable_roles_acquisition` method.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+api.content.disable_roles_acquisition(obj=portal[\'about\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% ac_flag = getattr(portal[\'about\'], \'__ac_local_roles_block__\', None)\n+% self.assertTrue(ac_flag)\n+\n+(content-enable-roles-acquisition-example)=\n+\n+## Enable local roles acquisition\n+\n+To enable the acquisition of local roles for an object, use the {meth}`api.content.enable_roles_acquisition` method.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+api.content.enable_roles_acquisition(obj=portal[\'about\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% # As __ac_local_roles_block__ is None by default, we have to set it,\n+% # before we can test the enabling method.\n+% portal[\'about\'].__ac_local_roles_block__ = 1\n+%\n+% api.content.enable_roles_acquisition(obj=portal[\'about\'])\n+% ac_flag = getattr(portal[\'about\'], \'__ac_local_roles_block__\', None)\n+% self.assertFalse(ac_flag)\n+\n+(content-get-view-example)=\n+\n+## Get view\n+\n+To get a {class}`BrowserView` for your content, use {meth}`api.content.get_view`.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+view = api.content.get_view(\n+    name=\'plone\',\n+    context=portal[\'about\'],\n+    request=request,\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(view.__name__, u\'plone\')\n+\n+## Further reading\n+\n+For more information on possible flags and usage options please see the full {ref}`plone-api-content` specification.\ndiff --git a/docs/content.rst b/docs/content.rst\ndeleted file mode 100644\nindex 53a4b27..0000000\n--- a/docs/content.rst\n+++ /dev/null\n@@ -1,530 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/content.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. module:: plone\n-\n-.. _chapter_content:\n-\n-=======\n-Content\n-=======\n-\n-.. _content_create_example:\n-\n-Create content\n-==============\n-\n-To add an object, you must first have a container to put it in.\n-Get the portal object; it will serve nicely:\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-\n-Create your new content item using the :meth:`api.content.create` method.\n-The type argument will decide which content type will be created.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    obj = api.content.create(\n-        type=\'Document\',\n-        title=\'My Content\',\n-        container=portal)\n-\n-The ``id`` of the new object is automatically and safely generated from its ``title``.\n-\n-.. code-block:: python\n-\n-    assert obj.id == \'my-content\'\n-\n-\n-.. _content_get_example:\n-\n-Get content object\n-==================\n-\n-There are several approaches to getting your content object.\n-Consider the following portal structure::\n-\n-    plone (portal root)\n-    |-- blog\n-    |-- about\n-    |   |-- team\n-    |   `-- contact\n-    `-- events\n-        |-- training\n-        |-- conference\n-        `-- sprint\n-\n-.. invisible-code-block: python\n-\n-    portal = api.portal.get()\n-    image = api.content.create(type=\'Image\', id=\'image\', container=portal)\n-    blog = api.content.create(type=\'Link\', id=\'blog\', container=portal)\n-    about = api.content.create(type=\'Folder\', id=\'about\', container=portal)\n-    events = api.content.create(type=\'Folder\', id=\'events\', container=portal)\n-\n-    api.content.create(container=about, type=\'Document\', id=\'team\')\n-    api.content.create(container=about, type=\'Document\', id=\'contact\')\n-\n-    api.content.create(container=events, type=\'Event\', id=\'training\')\n-    api.content.create(container=events, type=\'Event\', id=\'conference\')\n-    api.content.create(container=events, type=\'Event\', id=\'sprint\')\n-\n-\n-The following operations will get objects from the stucture above, including using :meth:`api.content.get`.\n-\n-.. code-block:: python\n-\n-    # let\'s first get the portal object\n-    from plone import api\n-    portal = api.portal.get()\n-    assert portal.id == \'plone\'\n-\n-    # content can be accessed directly with dict-like access\n-    blog = portal[\'blog\']\n-\n-    # another way is to use ``get()`` method and pass it a path\n-    about = api.content.get(path=\'/about\')\n-\n-    # more examples\n-    conference = portal[\'events\'][\'conference\']\n-    sprint = api.content.get(path=\'/events/sprint\')\n-\n-    # moreover, you can access content by its UID\n-    uid = about[\'team\'].UID()\n-    team = api.content.get(UID=uid)\n-\n-    # returns None if UID cannot be found in catalog\n-    not_found = api.content.get(UID=\'notfound\')\n-\n-\n-.. invisible-code-block: python\n-\n-    self.assertTrue(portal)\n-    self.assertTrue(blog)\n-    self.assertTrue(about)\n-    self.assertTrue(conference)\n-    self.assertTrue(sprint)\n-    self.assertTrue(team)\n-    self.assertEquals(not_found, None)\n-\n-\n-.. _content_find_example:\n-\n-Find content objects\n-====================\n-\n-You can use the find function to search for content.\n-\n-Finding all Documents:\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    documents = api.content.find(portal_type=\'Document\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertGreater(len(documents), 0)\n-\n-\n-Finding all Documents within a context:\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    documents = api.content.find(\n-        context=api.portal.get(), portal_type=\'Document\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertGreater(len(documents), 0)\n-\n-Limit search depth:\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    documents = api.content.find(depth=1, portal_type=\'Document\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertGreater(len(documents), 0)\n-\n-\n-Limit search depth within a context:\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    documents = api.content.find(\n-        context=api.portal.get(), depth=1, portal_type=\'Document\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertGreater(len(documents), 0)\n-\n-\n-Search by interface:\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    from Products.CMFCore.interfaces import IContentish\n-    documents = api.content.find(object_provides=IContentish)\n-\n-.. invisible-code-block: python\n-\n-    self.assertGreater(len(documents), 0)\n-\n-\n-Combining multiple arguments:\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    from Products.CMFCore.interfaces import IContentish\n-    documents = api.content.find(\n-        context=api.portal.get(),\n-        depth=2,\n-        object_provides=IContentish,\n-        SearchableText=\'Team\',\n-    )\n-\n-.. invisible-code-block: python\n-\n-    self.assertGreater(len(documents), 0)\n-\n-\n-More information about how to use the catalog may be found in the\n-`Plone Documentation <https://docs.plone.org/develop/plone/searching_and_indexing/index.html>`_.\n-\n-Note that the catalog returns *brains* (metadata stored in indexes) and not objects.\n-However, calling ``getObject()`` on brains does in fact give you the object.\n-\n-.. code-block:: python\n-\n-    document_brain = documents[0]\n-    document_obj = document_brain.getObject()\n-\n-.. _content_get_uuid_example:\n-\n-Get content object UUID\n-=======================\n-\n-A Universally Unique IDentifier (UUID) is a unique, non-human-readable identifier for a content object which remains constant for the object even if the object is moved.\n-\n-Plone uses UUIDs for storing references between content and for linking by UIDs, enabling persistent links.\n-\n-To get the UUID of any content object use :meth:`api.content.get_uuid`.\n-The following code gets the UUID of the ``contact`` document.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    contact = portal[\'about\'][\'contact\']\n-\n-    uuid = api.content.get_uuid(obj=contact)\n-\n-.. invisible-code-block: python\n-\n-    self.assertTrue(isinstance(uuid, str))\n-\n-.. _content_move_example:\n-\n-Move content\n-============\n-\n-To move content around the portal structure defined above use the :meth:`api.content.move` method.\n-The code below moves the ``contact`` item (with all it contains) out of the folder ``about`` and into the Plone portal root.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    contact = portal[\'about\'][\'contact\']\n-\n-    api.content.move(source=contact, target=portal)\n-\n-.. invisible-code-block: python\n-\n-    self.assertFalse(portal[\'about\'].get(\'contact\'))\n-    self.assertTrue(portal[\'contact\'])\n-\n-Actually, ``move`` behaves like a filesystem move.\n-If you pass it an ``id`` argument, the object will have that new ID in its new home.\n-By default it will retain its original ID.\n-\n-.. _content_rename_example:\n-\n-Rename content\n-==============\n-\n-To rename a content object (change its ID), use the :meth:`api.content.rename` method.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    api.content.rename(obj=portal[\'blog\'], new_id=\'old-blog\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertFalse(portal.get(\'blog\'))\n-    self.assertTrue(portal[\'old-blog\'])\n-\n-\n-.. _content_copy_example:\n-\n-Copy content\n-============\n-\n-To copy a content object, use the :meth:`api.content.copy` method.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    training = portal[\'events\'][\'training\']\n-\n-    api.content.copy(source=training, target=portal)\n-\n-Note that the new object will have the same ID as the old object (unless otherwise stated).\n-This is not a problem, since the new object is in a different container.\n-\n-.. invisible-code-block: python\n-\n-    assert portal[\'events\'][\'training\'].id == \'training\'\n-    assert portal[\'training\'].id == \'training\'\n-\n-\n-You can also set ``target`` to source\'s container and set ``safe_id=True``.\n-This will duplicate your content object in the same container and assign it a new, non-conflicting ID.\n-\n-.. code-block:: python\n-\n-    api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n-    new_training = portal[\'copy_of_training\']\n-\n-.. invisible-code-block: python\n-\n-    self.assertTrue(portal[\'training\'])  # old object remains\n-    self.assertTrue(portal[\'copy_of_training\'])\n-\n-\n-.. _content_delete_example:\n-\n-Delete content\n-==============\n-\n-To delete a content object, pass the object to the :meth:`api.content.delete` method:\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    api.content.delete(obj=portal[\'copy_of_training\'])\n-\n-.. invisible-code-block: python\n-\n-    self.assertFalse(portal.get(\'copy_of_training\'))\n-\n-\n-To delete multiple content objects, pass the objects to the :meth:`api.content.delete` method:\n-\n-.. invisible-code-block: python\n-\n-    api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n-    api.content.copy(source=portal[\'events\'][\'training\'], target=portal[\'events\'], safe_id=True)\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    data = [portal[\'copy_of_training\'], portal[\'events\'][\'copy_of_training\'], ]\n-    api.content.delete(objects=data)\n-\n-.. invisible-code-block: python\n-\n-    self.assertFalse(portal.get(\'copy_of_training\'))\n-    self.assertFalse(portal.events.get(\'copy_of_training\'))\n-\n-\n-If deleting content would result in broken links you will get a `LinkIntegrityNotificationException`. To delete anyway, set the option `check_linkintegrity` to `False`:\n-\n-.. invisible-code-block: python\n-\n-    from plone.app.textfield import RichTextValue\n-    from zope.lifecycleevent import modified\n-    api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n-    api.content.copy(source=portal[\'events\'][\'training\'], target=portal[\'events\'], safe_id=True)\n-    portal[\'about\'][\'team\'].text = RichTextValue(\'<a href="../copy_of_training">contact</a>\', \'text/html\', \'text/x-html-safe\')\n-    modified(portal[\'about\'][\'team\'])\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    api.content.delete(obj=portal[\'copy_of_training\'], check_linkintegrity=False)\n-\n-.. invisible-code-block: python\n-\n-    self.assertNotIn(\'copy_of_training\', portal.keys())\n-\n-\n-.. _content_manipulation_with_safe_id_option:\n-\n-Content manipulation with the `safe_id` option\n-==============================================\n-\n-When you manipulate content with :meth:`api.content.create`, :meth:`api.content.move` or :meth:`api.content.copy` the `safe_id` flag is disabled by default.\n-This means the uniqueness of IDs will be enforced.\n-If another object with the same ID is already present in the target container these API methods will raise an error.\n-\n-However, if the `safe_id` option is enabled, a non-conflicting ID will be generated.\n-\n-.. invisible-code-block: python\n-\n-    api.content.create(container=portal, type=\'Document\', id=\'document\', safe_id=True)\n-\n-.. code-block:: python\n-\n-    api.content.create(container=portal, type=\'Document\', id=\'document\', safe_id=True)\n-    document = portal[\'document-1\']\n-\n-\n-.. _content_get_state_example:\n-\n-Get workflow state\n-==================\n-\n-To find out the current workflow state of your content, use the :meth:`api.content.get_state` method.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    state = api.content.get_state(obj=portal[\'about\'])\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(state, \'private\')\n-\n-The optional `default` argument is returned if no workflow is defined for the object.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    state = api.content.get_state(obj=portal[\'image\'], default=\'Unknown\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(state, \'Unknown\')\n-\n-.. _content_transition_example:\n-\n-Transition\n-==========\n-\n-To transition your content to a new workflow state, use the :meth:`api.content.transition` method.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    api.content.transition(obj=portal[\'about\'], transition=\'publish\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(\n-        api.content.get_state(obj=portal[\'about\']),\n-        \'published\'\n-    )\n-\n-If your workflow accepts any additional arguments to the checkin method you may supply them via kwargs.\n-These arguments can be saved to your transition using custom workflow variables inside the ZMI using an expression such as "python:state_change.kwargs.get(\'comment\', \'\')"\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    api.content.transition(obj=portal[\'about\'], transition=\'reject\', comment=\'You had a typo on your page.\')\n-\n-.. invisible-code-block: python\n-\n-.. _content_disable_roles_acquisition_example:\n-\n-Disable local roles acquisition\n-===============================\n-\n-To disable the acquisition of local roles for an object, use the :meth:`api.content.disable_roles_acquisition` method.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    api.content.disable_roles_acquisition(obj=portal[\'about\'])\n-\n-.. invisible-code-block: python\n-\n-    ac_flag = getattr(portal[\'about\'], \'__ac_local_roles_block__\', None)\n-    self.assertTrue(ac_flag)\n-\n-.. _content_enable_roles_acquisition_example:\n-\n-Enable local roles acquisition\n-==============================\n-\n-To enable the acquisition of local roles for an object, use the :meth:`api.content.enable_roles_acquisition` method.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    api.content.enable_roles_acquisition(obj=portal[\'about\'])\n-\n-.. invisible-code-block: python\n-\n-    # As __ac_local_roles_block__ is None by default, we have to set it,\n-    # before we can test the enabling method.\n-    portal[\'about\'].__ac_local_roles_block__ = 1\n-\n-    api.content.enable_roles_acquisition(obj=portal[\'about\'])\n-    ac_flag = getattr(portal[\'about\'], \'__ac_local_roles_block__\', None)\n-    self.assertFalse(ac_flag)\n-\n-.. _content_get_view_example:\n-\n-Get view\n-========\n-\n-To get a :class:`BrowserView` for your content, use :meth:`api.content.get_view`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    view = api.content.get_view(\n-        name=\'plone\',\n-        context=portal[\'about\'],\n-        request=request,\n-    )\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(view.__name__, u\'plone\')\n-\n-\n-Further reading\n-===============\n-\n-For more information on possible flags and usage options please see the full :ref:`plone-api-content` specification.\ndiff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\nnew file mode 100644\nindex 0000000..2638f91\n--- /dev/null\n+++ b/docs/contribute/develop.md\n@@ -0,0 +1,240 @@\n+:::{admonition} GitHub-only\n+WARNING: If you are reading this on GitHub, DON\'T!\n+Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/contribute/develop.html)\n+so you have working references and proper formatting.\n+:::\n+\n+# Development environment\n+\n+This section is meant for contributors to the `plone.api` project.\n+Its purpose is to guide them through the steps needed to start contributing.\n+\n+% note ::: This HowTo is written for Linux and OS X users.\n+% If you\'re are running Windows we suggest using VMWare or a similar Virtualization tool to install Ubuntu Linux on a virtual machine or installing Ubuntu Linux as a secondary OS on your machine.\n+% Alternatively, you can browse Plone\'s documentation on how to get Plone development environment up and running on Windows.\n+% Plone does run on Windows but it\'s not completely trivial to set it up.\n+\n+## Locations of information and tools\n+\n+- [Documentation @ docs.plone.org](https://docs.plone.org)\n+- [Source code @ GitHub](https://github.com/plone/plone.api)\n+- [Issues @ GitHub](https://github.com/plone/plone.api/issues)\n+- [Code Coverage @ Coveralls.io](https://coveralls.io/github/plone/plone.api)\n+\n+## Prerequisites\n+\n+### System libraries\n+\n+First let\'s look at \'system\' libraries and applications that are normally installed with your OS packet manager, such as apt, aptitude, yum, etc.:\n+\n+- `libxml2` - An xml parser written in C.\n+- `libxslt` - XSLT library written in C.\n+- `git` - Version control system.\n+- `gcc` - The GNU Compiler Collection.\n+- `g++` - The C++ extensions for gcc.\n+- `GNU make` - The fundamental build-control tool.\n+- `GNU tar` - The (un)archiving tool for extracting downloaded archives.\n+- `bzip2` and `gzip` decompression packages - `gzip` is nearly standard, however some platforms will require that `bzip2` be installed.\n+- `Python 2.7` - Linux distributions normally already have it, OS X users should use <https://github.com/collective/buildout.python> to get a clean Python version (the one that comes with OS X is broken).\n+\n+### Python tools\n+\n+- tox automation - tox aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing and release process of Python software. Install with `pip install tox`.\n+\n+:::{note}\n+Again, OS X users should use <https://github.com/collective/buildout.python>,\n+it will make your life much easier to have a cleanly compiled Python instead of using the system one that is broken in many deeply confusing ways.\n+:::\n+\n+### Further information\n+\n+If you experience problems read through the following links as almost all of the above steps are required for a default Plone development environment:\n+\n+- <https://docs.plone.org/manage/index.html>\n+- <https://pypi.org/project/zc.buildout/>\n+- <https://pypi.org/project/setuptools/>\n+- <https://plone.org/download>\n+\n+If you are an OS X user, you first need a working Python implementation\n+(the one that comes with the operating system is broken).\n+Use <https://github.com/collective/buildout.python> and be happy.\n+Also applicable to other OSes, if getting a working Python proves a challenge.\n+\n+(git-workflow)=\n+\n+## Git workflow & branching model\n+\n+Our repository on GitHub has the following layout:\n+\n+- **feature branches**: all development for new features must be done in\n+  dedicated branches, normally one branch per feature,\n+- **master branch**: when features get completed they are merged into the\n+  master branch; bugfixes are commited directly on the master branch,\n+- **tags**: whenever we create a new release we tag the repository so we can\n+  later re-trace our steps, re-release versions, etc.\n+\n+### Squashing commits\n+\n+In order to keep a clear and concise git history, it is good practice to squash commits before merging.\n+Use `git rebase --interactive` to squash all commits that you think are unnecessary.\n+\n+## Creating and using the development environment\n+\n+```{eval-rst}\n+.. todo::\n+\n+    Update this section as it seams out of date, there is no Makefile so this description makes no sense anymore.\n+```\n+\n+Go to your projects folder and download the lastest `plone.api` code:\n+\n+```bash\n+[you@local ~]$ cd <your_work_folder>\n+[you@local work]$ git clone https://github.com/plone/plone.api.git\n+```\n+\n+Now `cd` into the newly created directory and build your environment:\n+\n+```bash\n+[you@local work]$ cd plone.api\n+[you@local plone.api]$ make\n+```\n+\n+Go make some tea while\n+\n+- `make` creates an isolated Python environment in your `` plone.api` `` folder,\n+- bootstraps `zc.buildout`,\n+- fetches all dependencies,\n+- builds Plone,\n+- runs all tests and\n+- generates documentation so you can open it locally later on.\n+\n+Other commands that you may want to run:\n+\n+```bash\n+[you@local plone.api]$ make tests  # run all tests and syntax validation\n+[you@local plone.api]$ make docs   # re-generate documentation\n+[you@local plone.api]$ make clean  # reset your env back to a fresh start\n+[you@local plone.api]$ make        # re-build env, generate docs, run tests\n+```\n+\n+Open `Makefile` in your favorite code editor to see all possible commands and what they do.\n+And read <http://www.gnu.org/software/make/manual/make.html> to learn more about `make`.\n+\n+(working-on-an-issue)=\n+\n+## Working on an issue\n+\n+Our GitHub account contains a [list of open issues](https://github.com/plone/plone.api/issues).\n+Click on one that catches your attention.\n+If the issue description says `No one is assigned` it means no-one is already working on it and you can claim it as your own.\n+Click on the button next to the text and make yourself the one assigned for this issue.\n+\n+Based on our {ref}`git_workflow` all new features must be developed in separate git branches.\n+So if you are not doing a very trivial fix, but rather adding new features/enhancements, you should create a *feature branch*.\n+This way your work is kept in an isolated place where you can receive feedback on it, improve it, etc.\n+Once we are happy with your implementation, your branch gets merged into *master* at which point everyone else starts using your code.\n+\n+```bash\n+[you@local plone.api]$ git checkout master  # go to master branch\n+[you@local plone.api]$ git checkout -b issue_17  # create a feature branch\n+# replace 17 with the issue number you are working on\n+\n+# change code here\n+\n+[you@local plone.api]$ git add -p && git commit  # commit my changes\n+[you@local plone.api]$ git push origin issue_17  # push my branch to GitHub\n+# at this point others can see your changes but they don\'t get effected by\n+them; in other words, others can comment on your code without your code\n+changing their development environments\n+```\n+\n+Read more about Git branching at <https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches> and on our Git workflow at [Working with Git and GitHub](https://docs.plone.org/develop/coredev/docs/git.html).\n+\n+Once you are done with your work and you would like us to merge your changes into master, go to GitHub to do a *pull request*.\n+Open a browser and point it to `https://github.com/plone/plone.api/tree/issue_<ISSUE_NUMBER>`.\n+There you should see a `Pull Request` button.\n+Click on it, write some text about what you did and anything else you would like to tell the one who will review your work, and finally click `Send pull request`.\n+Now wait that someone comes by and merges your branch (don\'t do it yourself, even if you have permissions to do so).\n+\n+An example pull request text:\n+\n+```\n+Please merge my branch that resolves issue #13,\n+where I added the get_navigation_root() method.\n+```\n+\n+## Commit checklist\n+\n+Before every commit you should:\n+\n+- Run unit tests and syntax validation checks.\n+- Add an entry to `CHANGES.rst` (if applicable).\n+\n+All syntax checks and all tests can be run with a single command.\n+This command also re-generates your documentation.\n+\n+```bash\n+$ make\n+```\n+\n+:::{note}\n+It pays off to invest a little time to make your editor run `pep8` and `pyflakes` on a file every time you save that file\n+(or use `flake8` which combines both).\n+This saves you lots of time in the long run.\n+:::\n+\n+## Travis Continuous Integration\n+\n+On every push to GitHub, [Travis](https://travis-ci.org/plone/plone.api) runs all tests and syntax validation checks and reports build outcome to the `#sprint` IRC channel and the person who committed the last change.\n+\n+Travis is configured with the `.travis.yml` file located in the root of this package.\n+\n+## Sphinx Documentation\n+\n+:::{note}\n+Un-documented code is broken code.\n+:::\n+\n+For every feature you add to the codebase you should also add documentation for it to `docs/`.\n+\n+After adding or modifying documentation, run `tox -e plone6docs` to re-generate your documentation.\n+\n+Publicly available documentation on <https://6.dev-docs.plone.org/plone.api/> is automatically generated from these source files, periodically.\n+So when you push changes to master on GitHub you should soon be able to see them published on `api.plone.org`.\n+\n+Read the [reStructuredText Primer](https://www.sphinx-doc.org/en/master/usage/restructuredtext/) to brush up on your `reST` skills.\n+\n+Example:\n+\n+```python\n+def add(a, b):\n+    """Calculate the sum of the two parameters.\n+\n+    Also see the :func:`mod.path.my_func`, :meth:`mod.path.MyClass.method` and :attr:`mod.path.MY_CONSTANT` for more details.\n+\n+    :param a: The first operand.\n+    :type a: :class:`mod.path.A`\n+\n+    :param b: The second operand.\n+    :type b: :class:`mod.path.B`\n+\n+    :rtype: int\n+    :return: The sum of the operands.\n+    :raises: `KeyError`, if the operands are not the correct type.\n+    """\n+```\n+\n+Attributes are documented using the `#:` marker above the attribute.\n+The documentation may span multiple lines.\n+\n+```python\n+#: Description of the constant value\n+MY_CONSTANT = 0xc0ffee\n+\n+class Foobar(object):\n+\n+    #: Description of the class variable which spans over\n+    #: multiple lines\n+    FOO = 1\n+```\ndiff --git a/docs/contribute/develop.rst b/docs/contribute/develop.rst\ndeleted file mode 100644\nindex 8ff98b5..0000000\n--- a/docs/contribute/develop.rst\n+++ /dev/null\n@@ -1,262 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/contribute/develop.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-=======================\n-Development environment\n-=======================\n-\n-This section is meant for contributors to the `plone.api` project.\n-Its purpose is to guide them through the steps needed to start contributing.\n-\n-.. note ::: This HowTo is written for Linux and OS X users.\n-   If you\'re are running Windows we suggest using VMWare or a similar Virtualization tool to install Ubuntu Linux on a virtual machine or installing Ubuntu Linux as a secondary OS on your machine.\n-   Alternatively, you can browse Plone\'s documentation on how to get Plone development environment up and running on Windows.\n-   Plone does run on Windows but it\'s not completely trivial to set it up.\n-\n-\n-Locations of information and tools\n-==================================\n-\n-* `Documentation @ docs.plone.org <https://docs.plone.org>`_\n-* `Source code @ GitHub <https://github.com/plone/plone.api>`_\n-* `Issues @ GitHub <https://github.com/plone/plone.api/issues>`_\n-* `Code Coverage @ Coveralls.io <https://coveralls.io/github/plone/plone.api>`_\n-\n-\n-Prerequisites\n-=============\n-\n-System libraries\n-----------------\n-\n-First let\'s look at \'system\' libraries and applications that are normally installed with your OS packet manager, such as apt, aptitude, yum, etc.:\n-\n-* ``libxml2`` - An xml parser written in C.\n-* ``libxslt`` - XSLT library written in C.\n-* ``git`` - Version control system.\n-* ``gcc`` - The GNU Compiler Collection.\n-* ``g++`` - The C++ extensions for gcc.\n-* ``GNU make`` - The fundamental build-control tool.\n-* ``GNU tar`` - The (un)archiving tool for extracting downloaded archives.\n-* ``bzip2`` and ``gzip`` decompression packages - ``gzip`` is nearly standard, however some platforms will require that ``bzip2`` be installed.\n-* ``Python 2.7`` - Linux distributions normally already have it, OS X users should use https://github.com/collective/buildout.python to get a clean Python version (the one that comes with OS X is broken).\n-\n-\n-Python tools\n-------------\n-\n-* tox automation - tox aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing and release process of Python software. Install with ``pip install tox``.\n-\n-.. note::\n-\n-    Again, OS X users should use https://github.com/collective/buildout.python,\n-    it will make your life much easier to have a cleanly compiled Python instead of using the system one that is broken in many deeply confusing ways.\n-\n-\n-Further information\n--------------------\n-\n-If you experience problems read through the following links as almost all of the above steps are required for a default Plone development environment:\n-\n-* https://docs.plone.org/manage/index.html\n-* https://pypi.org/project/zc.buildout/\n-* https://pypi.org/project/setuptools/\n-* https://plone.org/download\n-\n-If you are an OS X user, you first need a working Python implementation\n-(the one that comes with the operating system is broken).\n-Use https://github.com/collective/buildout.python and be happy.\n-Also applicable to other OSes, if getting a working Python proves a challenge.\n-\n-\n-.. _git_workflow:\n-\n-Git workflow & branching model\n-==============================\n-\n-Our repository on GitHub has the following layout:\n-\n-* **feature branches**: all development for new features must be done in\n-  dedicated branches, normally one branch per feature,\n-* **master branch**: when features get completed they are merged into the\n-  master branch; bugfixes are commited directly on the master branch,\n-* **tags**: whenever we create a new release we tag the repository so we can\n-  later re-trace our steps, re-release versions, etc.\n-\n-\n-Squashing commits\n------------------\n-\n-In order to keep a clear and concise git history, it is good practice to squash commits before merging.\n-Use ``git rebase --interactive`` to squash all commits that you think are unnecessary.\n-\n-\n-Creating and using the development environment\n-==============================================\n-\n-.. todo::\n-\n-    Update this section as it seams out of date, there is no Makefile so this description makes no sense anymore.\n-\n-Go to your projects folder and download the lastest `plone.api` code:\n-\n-.. sourcecode:: bash\n-\n-    [you@local ~]$ cd <your_work_folder>\n-    [you@local work]$ git clone https://github.com/plone/plone.api.git\n-\n-Now `cd` into the newly created directory and build your environment:\n-\n-.. sourcecode:: bash\n-\n-    [you@local work]$ cd plone.api\n-    [you@local plone.api]$ make\n-\n-Go make some tea while\n-\n-* `make` creates an isolated Python environment in your `plone.api`` folder,\n-* bootstraps `zc.buildout`,\n-* fetches all dependencies,\n-* builds Plone,\n-* runs all tests and\n-* generates documentation so you can open it locally later on.\n-\n-Other commands that you may want to run:\n-\n-.. sourcecode:: bash\n-\n-    [you@local plone.api]$ make tests  # run all tests and syntax validation\n-    [you@local plone.api]$ make docs   # re-generate documentation\n-    [you@local plone.api]$ make clean  # reset your env back to a fresh start\n-    [you@local plone.api]$ make        # re-build env, generate docs, run tests\n-\n-Open ``Makefile`` in your favorite code editor to see all possible commands and what they do.\n-And read http://www.gnu.org/software/make/manual/make.html to learn more about `make`.\n-\n-\n-.. _working-on-an-issue:\n-\n-Working on an issue\n-===================\n-\n-Our GitHub account contains a `list of open issues <https://github.com/plone/plone.api/issues>`_.\n-Click on one that catches your attention.\n-If the issue description says ``No one is assigned`` it means no-one is already working on it and you can claim it as your own.\n-Click on the button next to the text and make yourself the one assigned for this issue.\n-\n-Based on our :ref:`git_workflow` all new features must be developed in separate git branches.\n-So if you are not doing a very trivial fix, but rather adding new features/enhancements, you should create a *feature branch*.\n-This way your work is kept in an isolated place where you can receive feedback on it, improve it, etc.\n-Once we are happy with your implementation, your branch gets merged into *master* at which point everyone else starts using your code.\n-\n-.. sourcecode:: bash\n-\n-    [you@local plone.api]$ git checkout master  # go to master branch\n-    [you@local plone.api]$ git checkout -b issue_17  # create a feature branch\n-    # replace 17 with the issue number you are working on\n-\n-    # change code here\n-\n-    [you@local plone.api]$ git add -p && git commit  # commit my changes\n-    [you@local plone.api]$ git push origin issue_17  # push my branch to GitHub\n-    # at this point others can see your changes but they don\'t get effected by\n-    them; in other words, others can comment on your code without your code\n-    changing their development environments\n-\n-Read more about Git branching at https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches and on our Git workflow at `Working with Git and GitHub <https://docs.plone.org/develop/coredev/docs/git.html>`_.\n-\n-\n-Once you are done with your work and you would like us to merge your changes into master, go to GitHub to do a *pull request*.\n-Open a browser and point it to ``https://github.com/plone/plone.api/tree/issue_<ISSUE_NUMBER>``.\n-There you should see a ``Pull Request`` button.\n-Click on it, write some text about what you did and anything else you would like to tell the one who will review your work, and finally click ``Send pull request``.\n-Now wait that someone comes by and merges your branch (don\'t do it yourself, even if you have permissions to do so).\n-\n-An example pull request text::\n-\n-    Please merge my branch that resolves issue #13,\n-    where I added the get_navigation_root() method.\n-\n-\n-Commit checklist\n-================\n-\n-Before every commit you should:\n-\n-* Run unit tests and syntax validation checks.\n-* Add an entry to ``CHANGES.rst`` (if applicable).\n-\n-All syntax checks and all tests can be run with a single command.\n-This command also re-generates your documentation.\n-\n-.. sourcecode:: bash\n-\n-    $ make\n-\n-.. note::\n-    It pays off to invest a little time to make your editor run `pep8` and `pyflakes` on a file every time you save that file\n-    (or use `flake8` which combines both).\n-    This saves you lots of time in the long run.\n-\n-\n-Travis Continuous Integration\n-=============================\n-\n-On every push to GitHub, `Travis <https://travis-ci.org/plone/plone.api>`_ runs all tests and syntax validation checks and reports build outcome to the ``#sprint`` IRC channel and the person who committed the last change.\n-\n-Travis is configured with the ``.travis.yml`` file located in the root of this package.\n-\n-\n-Sphinx Documentation\n-====================\n-\n-.. note::\n-\n-    Un-documented code is broken code.\n-\n-For every feature you add to the codebase you should also add documentation for it to ``docs/``.\n-\n-After adding or modifying documentation, run ``tox -e plone6docs`` to re-generate your documentation.\n-\n-Publicly available documentation on https://6.dev-docs.plone.org/plone.api/ is automatically generated from these source files, periodically.\n-So when you push changes to master on GitHub you should soon be able to see them published on ``api.plone.org``.\n-\n-Read the `reStructuredText Primer <https://www.sphinx-doc.org/en/master/usage/restructuredtext/>`_ to brush up on your `reST` skills.\n-\n-Example:\n-\n-.. sourcecode:: python\n-\n-    def add(a, b):\n-        """Calculate the sum of the two parameters.\n-\n-        Also see the :func:`mod.path.my_func`, :meth:`mod.path.MyClass.method` and :attr:`mod.path.MY_CONSTANT` for more details.\n-\n-        :param a: The first operand.\n-        :type a: :class:`mod.path.A`\n-\n-        :param b: The second operand.\n-        :type b: :class:`mod.path.B`\n-\n-        :rtype: int\n-        :return: The sum of the operands.\n-        :raises: `KeyError`, if the operands are not the correct type.\n-        """\n-\n-Attributes are documented using the `#:` marker above the attribute.\n-The documentation may span multiple lines.\n-\n-.. sourcecode:: python\n-\n-    #: Description of the constant value\n-    MY_CONSTANT = 0xc0ffee\n-\n-    class Foobar(object):\n-\n-        #: Description of the class variable which spans over\n-        #: multiple lines\n-        FOO = 1\ndiff --git a/docs/contribute/index.md b/docs/contribute/index.md\nnew file mode 100644\nindex 0000000..63d3ed0\n--- /dev/null\n+++ b/docs/contribute/index.md\n@@ -0,0 +1,31 @@\n+:::{admonition} GitHub-only\n+WARNING: If you are reading this on GitHub, DON\'T!\n+Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/contribute/index.html)\n+so you have working references and proper formatting.\n+:::\n+\n+# How to contribute to this package?\n+\n+## Conventions\n+\n+For rules and guidelines on syntax style, development process, repository workflow, etc see [The Plone Styleguides](https://docs.plone.org/develop/styleguide/) and [Working with Git and GitHub](https://docs.plone.org/develop/coredev/docs/git.html)\n+\n+## Local development environment\n+\n+Setting up and using the local development environment.\n+\n+```{toctree}\n+:maxdepth: 2\n+\n+develop.rst\n+```\n+\n+## Releasing a new version\n+\n+Description of our release process and guidelines.\n+\n+```{toctree}\n+:maxdepth: 2\n+\n+release.rst\n+```\ndiff --git a/docs/contribute/index.rst b/docs/contribute/index.rst\ndeleted file mode 100644\nindex 6ee8ca9..0000000\n--- a/docs/contribute/index.rst\n+++ /dev/null\n@@ -1,37 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/contribute/index.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-==================================\n-How to contribute to this package?\n-==================================\n-\n-Conventions\n-===========\n-\n-For rules and guidelines on syntax style, development process, repository workflow, etc see `The Plone Styleguides <https://docs.plone.org/develop/styleguide/>`_ and `Working with Git and GitHub <https://docs.plone.org/develop/coredev/docs/git.html>`_\n-\n-\n-Local development environment\n-=============================\n-\n-Setting up and using the local development environment.\n-\n-.. toctree::\n-   :maxdepth: 2\n-\n-   develop.rst\n-\n-\n-Releasing a new version\n-=======================\n-\n-Description of our release process and guidelines.\n-\n-.. toctree::\n-   :maxdepth: 2\n-\n-   release.rst\ndiff --git a/docs/contribute/release.md b/docs/contribute/release.md\nnew file mode 100644\nindex 0000000..eff11db\n--- /dev/null\n+++ b/docs/contribute/release.md\n@@ -0,0 +1,79 @@\n+:::{admonition} GitHub-only\n+WARNING: If you are reading this on GitHub, DON\'T!\n+Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/contribute/release.html)\n+so you have working references and proper formatting.\n+:::\n+\n+(releasing-a-new-version)=\n+\n+# Releasing a new version\n+\n+Releasing a new version of `plone.api` involves the following steps:\n+\n+1. Prepare source for a new release.\n+2. Create a git tag for the release.\n+3. Push the git tag upstream to GitHub.\n+4. Generate a distribution file for the package.\n+5. Upload the generated package to Python Package Index (PyPI).\n+\n+To avoid human errors and to automate some of the tasks above we use `jarn.mkrelease`.\n+It\'s listed as a dependency in `setup.py` and should already be installed in your local bin:\n+\n+```bash\n+$ bin/mkrelease --help\n+```\n+\n+Apart from that, in order to be able to upload a new version to PyPI you need to be listed under `Package Index Owner` list and you need to configure your PyPI credentials in the `~/.pypirc` file, e.g.:\n+\n+```\n+[distutils]\n+index-servers =\n+  pypi\n+\n+[pypi]\n+username = fred\n+password = secret\n+```\n+\n+## Checklist\n+\n+Folow these step to create a new release of `plone.api`.\n+\n+1. Verify that we have documented all changes in the `CHANGES.rst` file.\n+   Go through the list of commits since last release on GitHub and check all changes are documented.\n+2. Modify the version identifier in the `setup.py` to reflect the version of the new release.\n+3. Confirm that the package description (generated from `README.rst` and others) renders correctly by running `bin/longtest` and open its ouput in your favorite browser.\n+4. Commit all changes to the git repository and push them upstream to GitHub.\n+5. Create a release, tag it in git and upload it to GitHub by running `bin/mkrelease -d pypi -pq .` (see example below).\n+\n+## Example\n+\n+In the following example we are releasing version 0.1 of `plone.api`.\n+The package has been prepared so that `setup.py` contains the version `0.1`,\n+this change has been committed to git and all changes have been pushed upstream to GitHub:\n+\n+```bash\n+# Check that package description is rendered correctly\n+$ bin/longtest\n+\n+# Make a release and upload it to PyPI\n+$ bin/mkrelease -d pypi -pq ./\n+Releasing plone.api 0.1\n+Tagging plone.api 0.1\n+To git@github.com:plone/plone.api.git\n+* [new tag]         0.1 -> 0.1\n+running egg_info\n+running sdist\n+warning: sdist: standard file not found: should have one of README, README.txt\n+running register\n+Server response (200): OK\n+running upload\n+warning: sdist: standard file not found: should have one of README, README.txt\n+Server response (200): OK\n+done\n+```\n+\n+:::{note}\n+Please ignore the sdist warning about README file above.\n+PyPI does not depend on it and it\'s just a bug in setupools (reported and waiting to be fixed).\n+:::\ndiff --git a/docs/contribute/release.rst b/docs/contribute/release.rst\ndeleted file mode 100644\nindex 0b5d8df..0000000\n--- a/docs/contribute/release.rst\n+++ /dev/null\n@@ -1,86 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/contribute/release.html>`_\n-    so you have working references and proper formatting.\n-\n-.. _releasing_a_new_version:\n-\n-=======================\n-Releasing a new version\n-=======================\n-\n-Releasing a new version of `plone.api` involves the following steps:\n-\n-#. Prepare source for a new release.\n-#. Create a git tag for the release.\n-#. Push the git tag upstream to GitHub.\n-#. Generate a distribution file for the package.\n-#. Upload the generated package to Python Package Index (PyPI).\n-\n-To avoid human errors and to automate some of the tasks above we use ``jarn.mkrelease``.\n-It\'s listed as a dependency in ``setup.py`` and should already be installed in your local bin:\n-\n-.. sourcecode:: bash\n-\n-    $ bin/mkrelease --help\n-\n-Apart from that, in order to be able to upload a new version to PyPI you need to be listed under `Package Index Owner` list and you need to configure your PyPI credentials in the ``~/.pypirc`` file, e.g.::\n-\n-    [distutils]\n-    index-servers =\n-      pypi\n-\n-    [pypi]\n-    username = fred\n-    password = secret\n-\n-\n-Checklist\n-=========\n-\n-Folow these step to create a new release of `plone.api`.\n-\n-#. Verify that we have documented all changes in the ``CHANGES.rst`` file.\n-   Go through the list of commits since last release on GitHub and check all changes are documented.\n-\n-#. Modify the version identifier in the ``setup.py`` to reflect the version of the new release.\n-\n-#. Confirm that the package description (generated from ``README.rst`` and others) renders correctly by running ``bin/longtest`` and open its ouput in your favorite browser.\n-\n-#. Commit all changes to the git repository and push them upstream to GitHub.\n-\n-#. Create a release, tag it in git and upload it to GitHub by running ``bin/mkrelease -d pypi -pq .`` (see example below).\n-\n-\n-Example\n-=======\n-\n-In the following example we are releasing version 0.1 of `plone.api`.\n-The package has been prepared so that ``setup.py`` contains the version ``0.1``,\n-this change has been committed to git and all changes have been pushed upstream to GitHub:\n-\n-.. sourcecode:: bash\n-\n-  # Check that package description is rendered correctly\n-  $ bin/longtest\n-\n-  # Make a release and upload it to PyPI\n-  $ bin/mkrelease -d pypi -pq ./\n-  Releasing plone.api 0.1\n-  Tagging plone.api 0.1\n-  To git@github.com:plone/plone.api.git\n-  * [new tag]         0.1 -> 0.1\n-  running egg_info\n-  running sdist\n-  warning: sdist: standard file not found: should have one of README, README.txt\n-  running register\n-  Server response (200): OK\n-  running upload\n-  warning: sdist: standard file not found: should have one of README, README.txt\n-  Server response (200): OK\n-  done\n-\n-.. note::\n-  Please ignore the sdist warning about README file above.\n-  PyPI does not depend on it and it\'s just a bug in setupools (reported and waiting to be fixed).\ndiff --git a/docs/env.md b/docs/env.md\nnew file mode 100644\nindex 0000000..a07542a\n--- /dev/null\n+++ b/docs/env.md\n@@ -0,0 +1,146 @@\n+:::{admonition} GitHub-only\n+WARNING: If you are reading this on GitHub, DON\'T!\n+Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/env.html)\n+so you have working references and proper formatting.\n+:::\n+\n+```{eval-rst}\n+.. module:: plone\n+```\n+\n+(chapter-env)=\n+\n+# Environment\n+\n+(env-adopt-roles-example)=\n+\n+## Switch roles inside a block\n+\n+To temporarily override the list of available roles, use {meth}`api.env.adopt_roles`.\n+This is especially useful in unit tests.\n+\n+```python\n+from plone import api\n+from AccessControl import Unauthorized\n+\n+portal = api.portal.get()\n+with api.env.adopt_roles([\'Anonymous\']):\n+    self.assertRaises(\n+       Unauthorized,\n+       lambda: portal.restrictedTraverse("manage_propertiesForm")\n+    )\n+\n+with api.env.adopt_roles([\'Manager\', \'Member\']):\n+    portal.restrictedTraverse("manage_propertiesForm")\n+```\n+\n+(env-adopt-user-example)=\n+\n+## Switch user inside a block\n+\n+To temporarily override the currently active user, use {meth}`api.env.adopt_user`.\n+\n+```python\n+from plone import api\n+\n+portal = api.portal.get()\n+\n+# Create a new user.\n+api.user.create(\n+    username="doc_owner",\n+    roles=(\'Member\', \'Manager\',),\n+    email="new_owner@example.com",\n+)\n+\n+# Become that user and create a document.\n+with api.env.adopt_user(username="doc_owner"):\n+    api.content.create(\n+        container=portal,\n+        type=\'Document\',\n+        id=\'new_owned_doc\',\n+    )\n+\n+self.assertEqual(\n+    portal.new_owned_doc.getOwner().getId(),\n+    "doc_owner",\n+)\n+```\n+\n+(env-debug-mode-example)=\n+\n+## Debug mode\n+\n+To know if your Zope instance is running in debug mode, use {meth}`api.env.debug_mode`.\n+\n+```python\n+from plone import api\n+\n+in_debug_mode = api.env.debug_mode()\n+if in_debug_mode:\n+    print(\'Zope is in debug mode\')\n+```\n+\n+(env-test-mode-example)=\n+\n+## Test mode\n+\n+To know if your Plone instance is running in a test runner, use {meth}`api.env.test_mode`.\n+\n+```python\n+from plone import api\n+\n+in_test_mode = api.env.test_mode()\n+if in_test_mode:\n+    pass  # do something\n+```\n+\n+(env-read-only-mode-example)=\n+\n+## Read-Only mode\n+\n+To know if your Zope / Plone instance is running on a read-only ZODB connection use {meth}`api.env.read_only_mode`.\n+\n+**Use-Case:**\n+If you run a ZRS or RelStorage cluster with active replication where all replicas are read-only be default.\n+You could check if your instance is connected to a read only ZODB or a writeable ZODB.\n+Therefore you could adjust the UI to prevent create, delete or update pages are shown.\n+\n+```python\n+from plone import api\n+\n+is_read_only = api.env.read_only_mode()\n+if is_read_only:\n+    pass  # do something\n+```\n+\n+(env-plone-version-example)=\n+\n+## Plone version\n+\n+To know which version of Plone you are using, use {meth}`api.env.plone_version`.\n+\n+```python\n+from plone import api\n+\n+plone_version = api.env.plone_version()\n+if plone_version < \'4.1\':\n+    pass  # do something\n+```\n+\n+(env-zope-version-example)=\n+\n+## Zope version\n+\n+To know which version of Zope 2 you are using, use {meth}`api.env.zope_version`.\n+\n+```python\n+from plone import api\n+\n+zope_version = api.env.zope_version()\n+if zope_version >= \'2.13\':\n+    pass  # do something\n+```\n+\n+## Further reading\n+\n+For more information on possible flags and usage options please see the full {ref}`plone-api-env` specification.\ndiff --git a/docs/env.rst b/docs/env.rst\ndeleted file mode 100644\nindex db857e2..0000000\n--- a/docs/env.rst\n+++ /dev/null\n@@ -1,161 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/env.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. module:: plone\n-\n-.. _chapter_env:\n-\n-===========\n-Environment\n-===========\n-\n-.. _env_adopt_roles_example:\n-\n-Switch roles inside a block\n-===========================\n-\n-To temporarily override the list of available roles, use :meth:`api.env.adopt_roles`.\n-This is especially useful in unit tests.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    from AccessControl import Unauthorized\n-\n-    portal = api.portal.get()\n-    with api.env.adopt_roles([\'Anonymous\']):\n-        self.assertRaises(\n-           Unauthorized,\n-           lambda: portal.restrictedTraverse("manage_propertiesForm")\n-        )\n-\n-    with api.env.adopt_roles([\'Manager\', \'Member\']):\n-        portal.restrictedTraverse("manage_propertiesForm")\n-\n-\n-.. _env_adopt_user_example:\n-\n-Switch user inside a block\n-==========================\n-\n-To temporarily override the currently active user, use :meth:`api.env.adopt_user`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-\n-    portal = api.portal.get()\n-\n-    # Create a new user.\n-    api.user.create(\n-        username="doc_owner",\n-        roles=(\'Member\', \'Manager\',),\n-        email="new_owner@example.com",\n-    )\n-\n-    # Become that user and create a document.\n-    with api.env.adopt_user(username="doc_owner"):\n-        api.content.create(\n-            container=portal,\n-            type=\'Document\',\n-            id=\'new_owned_doc\',\n-        )\n-\n-    self.assertEqual(\n-        portal.new_owned_doc.getOwner().getId(),\n-        "doc_owner",\n-    )\n-\n-.. _env_debug_mode_example:\n-\n-Debug mode\n-==========\n-\n-To know if your Zope instance is running in debug mode, use :meth:`api.env.debug_mode`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-\n-    in_debug_mode = api.env.debug_mode()\n-    if in_debug_mode:\n-        print(\'Zope is in debug mode\')\n-\n-\n-.. _env_test_mode_example:\n-\n-Test mode\n-=========\n-\n-To know if your Plone instance is running in a test runner, use :meth:`api.env.test_mode`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-\n-    in_test_mode = api.env.test_mode()\n-    if in_test_mode:\n-        pass  # do something\n-\n-\n-.. _env_read_only_mode_example:\n-\n-Read-Only mode\n-==============\n-\n-To know if your Zope / Plone instance is running on a read-only ZODB connection use :meth:`api.env.read_only_mode`.\n-\n-**Use-Case:**\n-If you run a ZRS or RelStorage cluster with active replication where all replicas are read-only be default.\n-You could check if your instance is connected to a read only ZODB or a writeable ZODB.\n-Therefore you could adjust the UI to prevent create, delete or update pages are shown.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-\n-    is_read_only = api.env.read_only_mode()\n-    if is_read_only:\n-        pass  # do something\n-\n-\n-.. _env_plone_version_example:\n-\n-Plone version\n-=============\n-\n-To know which version of Plone you are using, use :meth:`api.env.plone_version`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-\n-    plone_version = api.env.plone_version()\n-    if plone_version < \'4.1\':\n-        pass  # do something\n-\n-\n-.. _env_zope_version_example:\n-\n-Zope version\n-============\n-\n-To know which version of Zope 2 you are using, use :meth:`api.env.zope_version`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-\n-    zope_version = api.env.zope_version()\n-    if zope_version >= \'2.13\':\n-        pass  # do something\n-\n-\n-Further reading\n-===============\n-\n-For more information on possible flags and usage options please see the full :ref:`plone-api-env` specification.\ndiff --git a/docs/group.md b/docs/group.md\nnew file mode 100644\nindex 0000000..3b5e88b\n--- /dev/null\n+++ b/docs/group.md\n@@ -0,0 +1,358 @@\n+:::{admonition} GitHub-only\n+WARNING: If you are reading this on GitHub, DON\'T!\n+Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/group.html)\n+so you have working references and proper formatting.\n+:::\n+\n+```{eval-rst}\n+.. module:: plone\n+```\n+\n+(chapter-groups)=\n+\n+# Groups\n+\n+(group-create-example)=\n+\n+## Create group\n+\n+To create a new group, use {meth}`api.group.create`.\n+\n+```python\n+from plone import api\n+group = api.group.create(groupname=\'staff\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(group.id, \'staff\')\n+\n+When you create groups, `title`, `description`, `roles` and `groups` are optional.\n+\n+```python\n+from plone import api\n+\n+group = api.group.create(\n+    groupname=\'board_members\',\n+    title=\'Board members\',\n+    description=\'Just a description\',\n+    roles=[\'Reader\', ],\n+    groups=[\'Site Administrators\', ],\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(group.id, \'board_members\')\n+% self.assertEqual(group.getProperty(\'title\'), \'Board members\')\n+% self.assertEqual(group.getProperty(\'description\'), \'Just a description\')\n+% self.assertTrue(\'Reader\' in group.getRoles())\n+% self.assertTrue(\'Site Administrators\' in group.getMemberIds())\n+\n+(group-get-example)=\n+\n+## Get group\n+\n+To get a group by its name, use {meth}`api.group.get`.\n+\n+```python\n+from plone import api\n+group = api.group.get(groupname=\'staff\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(group.id, \'staff\')\n+\n+(group-edit-example)=\n+\n+## Editing a group\n+\n+Groups can be edited by using the `group_tool`.\n+In this example, the `title`, `description` and `roles` are updated for the group \'Staff\'.\n+\n+```python\n+from plone import api\n+group_tool = api.portal.get_tool(name=\'portal_groups\')\n+group_tool.editGroup(\n+    \'staff\',\n+    roles=[\'Editor\', \'Reader\'],\n+    title=\'Staff\',\n+    description=\'Just a description\',\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% group = api.group.get(groupname=\'staff\')\n+%\n+% title = group.getProperty(\'title\')\n+% description = group.getProperty(\'description\')\n+% roles = group.getRoles()\n+%\n+% self.assertEqual(title, \'Staff\')\n+% self.assertEqual(description, \'Just a description\')\n+% self.assertTrue(\'Editor\' in roles)\n+% self.assertTrue(\'Reader\' in roles)\n+\n+(group-get-all-groups-example)=\n+\n+## Get all groups\n+\n+You can also get all groups by using {meth}`api.group.get_groups`.\n+\n+```python\n+from plone import api\n+groups = api.group.get_groups()\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(groups[0].id, \'Administrators\')\n+\n+(group-get-users-groups-example)=\n+\n+## Get user\'s groups\n+\n+Groups may be filtered by member. By passing the `username` parameter,\n+{meth}`api.group.get_groups` will return only the groups the user belongs to.\n+\n+% invisible-code-block: python\n+%\n+% api.user.create(email=\'jane@plone.org\', username=\'jane\')\n+% api.group.add_user(username=\'jane\', groupname=\'staff\')\n+% api.group.add_user(username=\'jane\', groupname=\'Reviewers\')\n+\n+```python\n+from plone import api\n+user = api.user.get(username=\'jane\')\n+groups = api.group.get_groups(username=\'jane\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% group_list = [g.id for g in groups]\n+% self.assertCountEqual(\n+%     group_list,\n+%     [\'Reviewers\', \'AuthenticatedUsers\', \'staff\'],\n+% )\n+\n+You can also pass the user directly to {meth}`api.group.get_groups`:\n+\n+> from plone import api\n+> user = api.user.get(username=\'jane\')\n+> groups = api.group.get_groups(user=user)\n+\n+% invisible-code-block: python\n+%\n+% group_list = [g.id for g in groups]\n+% self.assertCountEqual(\n+%     group_list,\n+%     [\'Reviewers\', \'AuthenticatedUsers\', \'staff\'],\n+% )\n+\n+## Get group members\n+\n+Use the {meth}`api.user.get_users` method to get all the users that are members of a group.\n+\n+```python\n+from plone import api\n+members = api.user.get_users(groupname=\'staff\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(members[0].id, \'jane\')\n+\n+(group-delete-example)=\n+\n+## Delete group\n+\n+To delete a group, use {meth}`api.group.delete` and pass in either the groupname or the group object you want to delete.\n+\n+```python\n+from plone import api\n+api.group.create(groupname=\'unwanted\')\n+api.group.delete(groupname=\'unwanted\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n+\n+```python\n+unwanted = api.group.create(groupname=\'unwanted\')\n+api.group.delete(group=unwanted)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n+\n+(group-add-user-example)=\n+\n+## Adding user to group\n+\n+To add a user to a group, use the {meth}`api.group.add_user` method.\n+This method accepts either the groupname or the group object for the target group and the username or the user object you want to add to the group.\n+\n+```python\n+from plone import api\n+\n+api.user.create(email=\'bob@plone.org\', username=\'bob\')\n+api.group.add_user(groupname=\'staff\', username=\'bob\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertTrue(\n+%     \'staff\' in [g.id for g in api.group.get_groups(username=\'bob\')]\n+% )\n+\n+(group-remove-user-example)=\n+\n+## Removing user from group\n+\n+To remove a user from a group, use the {meth}`api.group.remove_user` method.\n+This also accepts either the groupname or the group object for the target group and either the username or the user object you want to remove from the group.\n+\n+```python\n+from plone import api\n+api.group.remove_user(groupname=\'staff\', username=\'bob\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertFalse(\'staff\' in [g.id for g in api.group.get_groups(username=\'bob\')])\n+\n+(group-get-roles-example)=\n+\n+## Get group roles\n+\n+To find the roles assigned to a group, use the {meth}`api.group.get_roles` method.\n+By default it returns site-wide roles.\n+\n+```python\n+from plone import api\n+roles = api.group.get_roles(groupname=\'staff\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\']\n+% self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+\n+If you pass in a content object, it will return the local roles of the group in that particular context.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+folder = api.content.create(\n+    container=portal,\n+    type=\'Folder\',\n+    id=\'folder_four\',\n+    title=\'Folder Four\',\n+)\n+roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_four\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+\n+If you pass in a content object and `inherit=False`, it will return only the local roles of the group on that particular object and ignore global roles.\n+\n+```python\n+api.group.grant_roles(\n+    groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_four\'])\n+\n+roles = api.group.get_roles(\n+    groupname=\'staff\', obj=portal[\'folder_four\'], inherit=False)\n+```\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_OBJ_ROLES = [\'Contributor\']\n+% self.assertEqual(set(EXPECTED_OBJ_ROLES), set(roles))\n+\n+(group-grant-roles-example)=\n+\n+## Grant roles to group\n+\n+To grant roles to a group, use the {meth}`api.group.grant_roles` method.\n+By default, roles are granted site-wide.\n+\n+```python\n+from plone import api\n+api.group.grant_roles(\n+    groupname=\'staff\',\n+    roles=[\'Reviewer, SiteAdministrator\'],\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\', \'Reviewer, SiteAdministrator\']\n+% roles = api.group.get_roles(groupname=\'staff\')\n+% self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+\n+If you pass in a content object, roles will be assigned in that particular context.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+folder = api.content.create(\n+    container=portal, type=\'Folder\', id=\'folder_five\', title=\'Folder Five\')\n+api.group.grant_roles(\n+    groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_five\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_CONTEXT_ROLES = EXPECTED_SITE_ROLES + [\'Contributor\']\n+% roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n+% self.assertEqual(set([\'Contributor\']), set(roles))\n+% roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'])\n+% self.assertEqual(set(EXPECTED_CONTEXT_ROLES), set(roles))\n+\n+(group-revoke-roles-example)=\n+\n+## Revoke roles from group\n+\n+To revoke roles already granted to a group, use the {meth}`api.group.revoke_roles` method.\n+\n+```python\n+from plone import api\n+api.group.revoke_roles(\n+    groupname=\'staff\', roles=[\'Reviewer, SiteAdministrator\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\']\n+% roles = api.group.get_roles(groupname=\'staff\')\n+% self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+\n+If you pass in a content object, it will revoke roles granted in that particular context.\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_CONTEXT_ROLES = [\'Contributor\']\n+% roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n+% self.assertEqual([\'Contributor\'], roles)\n+\n+```python\n+from plone import api\n+api.group.revoke_roles(\n+    groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_five\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_CONTEXT_ROLES = []\n+% roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n+% self.assertEqual(set(EXPECTED_CONTEXT_ROLES), set(roles))\n+\n+## Further reading\n+\n+For more information on possible flags and complete options please see the full {ref}`plone-api-group` specification.\ndiff --git a/docs/group.rst b/docs/group.rst\ndeleted file mode 100644\nindex bb9d36b..0000000\n--- a/docs/group.rst\n+++ /dev/null\n@@ -1,390 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/group.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. module:: plone\n-\n-.. _chapter_groups:\n-\n-Groups\n-======\n-\n-\n-\n-.. _group_create_example:\n-\n-Create group\n-------------\n-\n-To create a new group, use :meth:`api.group.create`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    group = api.group.create(groupname=\'staff\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(group.id, \'staff\')\n-\n-When you create groups, ``title``, ``description``, ``roles`` and ``groups`` are optional.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-\n-    group = api.group.create(\n-        groupname=\'board_members\',\n-        title=\'Board members\',\n-        description=\'Just a description\',\n-        roles=[\'Reader\', ],\n-        groups=[\'Site Administrators\', ],\n-    )\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(group.id, \'board_members\')\n-    self.assertEqual(group.getProperty(\'title\'), \'Board members\')\n-    self.assertEqual(group.getProperty(\'description\'), \'Just a description\')\n-    self.assertTrue(\'Reader\' in group.getRoles())\n-    self.assertTrue(\'Site Administrators\' in group.getMemberIds())\n-\n-\n-.. _group_get_example:\n-\n-Get group\n----------\n-\n-To get a group by its name, use :meth:`api.group.get`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    group = api.group.get(groupname=\'staff\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(group.id, \'staff\')\n-\n-\n-.. _group_edit_example:\n-\n-Editing a group\n----------------\n-\n-Groups can be edited by using the ``group_tool``.\n-In this example, the ``title``, ``description`` and ``roles`` are updated for the group \'Staff\'.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    group_tool = api.portal.get_tool(name=\'portal_groups\')\n-    group_tool.editGroup(\n-        \'staff\',\n-        roles=[\'Editor\', \'Reader\'],\n-        title=\'Staff\',\n-        description=\'Just a description\',\n-    )\n-\n-.. invisible-code-block: python\n-\n-    group = api.group.get(groupname=\'staff\')\n-\n-    title = group.getProperty(\'title\')\n-    description = group.getProperty(\'description\')\n-    roles = group.getRoles()\n-\n-    self.assertEqual(title, \'Staff\')\n-    self.assertEqual(description, \'Just a description\')\n-    self.assertTrue(\'Editor\' in roles)\n-    self.assertTrue(\'Reader\' in roles)\n-\n-\n-.. _group_get_all_groups_example:\n-\n-Get all groups\n---------------\n-\n-You can also get all groups by using :meth:`api.group.get_groups`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    groups = api.group.get_groups()\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(groups[0].id, \'Administrators\')\n-\n-\n-.. _group_get_users_groups_example:\n-\n-Get user\'s groups\n------------------\n-\n-Groups may be filtered by member. By passing the ``username`` parameter,\n-:meth:`api.group.get_groups` will return only the groups the user belongs to.\n-\n-.. invisible-code-block: python\n-\n-    api.user.create(email=\'jane@plone.org\', username=\'jane\')\n-    api.group.add_user(username=\'jane\', groupname=\'staff\')\n-    api.group.add_user(username=\'jane\', groupname=\'Reviewers\')\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    user = api.user.get(username=\'jane\')\n-    groups = api.group.get_groups(username=\'jane\')\n-\n-.. invisible-code-block: python\n-\n-    group_list = [g.id for g in groups]\n-    self.assertCountEqual(\n-        group_list,\n-        [\'Reviewers\', \'AuthenticatedUsers\', \'staff\'],\n-    )\n-\n-You can also pass the user directly to :meth:`api.group.get_groups`:\n-\n-    from plone import api\n-    user = api.user.get(username=\'jane\')\n-    groups = api.group.get_groups(user=user)\n-\n-.. invisible-code-block: python\n-\n-    group_list = [g.id for g in groups]\n-    self.assertCountEqual(\n-        group_list,\n-        [\'Reviewers\', \'AuthenticatedUsers\', \'staff\'],\n-    )\n-\n-Get group members\n------------------\n-\n-Use the :meth:`api.user.get_users` method to get all the users that are members of a group.\n-\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    members = api.user.get_users(groupname=\'staff\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(members[0].id, \'jane\')\n-\n-\n-.. _group_delete_example:\n-\n-Delete group\n-------------\n-\n-To delete a group, use :meth:`api.group.delete` and pass in either the groupname or the group object you want to delete.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.group.create(groupname=\'unwanted\')\n-    api.group.delete(groupname=\'unwanted\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n-\n-.. code-block:: python\n-\n-    unwanted = api.group.create(groupname=\'unwanted\')\n-    api.group.delete(group=unwanted)\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n-\n-\n-.. _group_add_user_example:\n-\n-Adding user to group\n---------------------\n-\n-To add a user to a group, use the :meth:`api.group.add_user` method.\n-This method accepts either the groupname or the group object for the target group and the username or the user object you want to add to the group.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-\n-    api.user.create(email=\'bob@plone.org\', username=\'bob\')\n-    api.group.add_user(groupname=\'staff\', username=\'bob\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertTrue(\n-        \'staff\' in [g.id for g in api.group.get_groups(username=\'bob\')]\n-    )\n-\n-\n-.. _group_remove_user_example:\n-\n-Removing user from group\n-------------------------\n-\n-To remove a user from a group, use the :meth:`api.group.remove_user` method.\n-This also accepts either the groupname or the group object for the target group and either the username or the user object you want to remove from the group.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.group.remove_user(groupname=\'staff\', username=\'bob\')\n-\n-\n-.. invisible-code-block: python\n-\n-    self.assertFalse(\'staff\' in [g.id for g in api.group.get_groups(username=\'bob\')])\n-\n-\n-.. _group_get_roles_example:\n-\n-Get group roles\n----------------\n-\n-To find the roles assigned to a group, use the :meth:`api.group.get_roles` method.\n-By default it returns site-wide roles.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    roles = api.group.get_roles(groupname=\'staff\')\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\']\n-    self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n-\n-If you pass in a content object, it will return the local roles of the group in that particular context.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    folder = api.content.create(\n-        container=portal,\n-        type=\'Folder\',\n-        id=\'folder_four\',\n-        title=\'Folder Four\',\n-    )\n-    roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_four\'])\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n-\n-If you pass in a content object and `inherit=False`, it will return only the local roles of the group on that particular object and ignore global roles.\n-\n-.. code-block:: python\n-\n-    api.group.grant_roles(\n-        groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_four\'])\n-\n-    roles = api.group.get_roles(\n-        groupname=\'staff\', obj=portal[\'folder_four\'], inherit=False)\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_OBJ_ROLES = [\'Contributor\']\n-    self.assertEqual(set(EXPECTED_OBJ_ROLES), set(roles))\n-\n-\n-.. _group_grant_roles_example:\n-\n-Grant roles to group\n---------------------\n-\n-To grant roles to a group, use the :meth:`api.group.grant_roles` method.\n-By default, roles are granted site-wide.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.group.grant_roles(\n-        groupname=\'staff\',\n-        roles=[\'Reviewer, SiteAdministrator\'],\n-    )\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\', \'Reviewer, SiteAdministrator\']\n-    roles = api.group.get_roles(groupname=\'staff\')\n-    self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n-\n-\n-If you pass in a content object, roles will be assigned in that particular context.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    folder = api.content.create(\n-        container=portal, type=\'Folder\', id=\'folder_five\', title=\'Folder Five\')\n-    api.group.grant_roles(\n-        groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_five\'])\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_CONTEXT_ROLES = EXPECTED_SITE_ROLES + [\'Contributor\']\n-    roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n-    self.assertEqual(set([\'Contributor\']), set(roles))\n-    roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'])\n-    self.assertEqual(set(EXPECTED_CONTEXT_ROLES), set(roles))\n-\n-\n-.. _group_revoke_roles_example:\n-\n-Revoke roles from group\n------------------------\n-\n-To revoke roles already granted to a group, use the :meth:`api.group.revoke_roles` method.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.group.revoke_roles(\n-        groupname=\'staff\', roles=[\'Reviewer, SiteAdministrator\'])\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\']\n-    roles = api.group.get_roles(groupname=\'staff\')\n-    self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n-\n-\n-If you pass in a content object, it will revoke roles granted in that particular context.\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_CONTEXT_ROLES = [\'Contributor\']\n-    roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n-    self.assertEqual([\'Contributor\'], roles)\n-\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.group.revoke_roles(\n-        groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_five\'])\n-\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_CONTEXT_ROLES = []\n-    roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n-    self.assertEqual(set(EXPECTED_CONTEXT_ROLES), set(roles))\n-\n-\n-Further reading\n----------------\n-\n-For more information on possible flags and complete options please see the full :ref:`plone-api-group` specification.\ndiff --git a/docs/index.md b/docs/index.md\nnew file mode 100644\nindex 0000000..28aa794\n--- /dev/null\n+++ b/docs/index.md\n@@ -0,0 +1,73 @@\n+:::{admonition} GitHub-only\n+WARNING: If you are reading this on GitHub, DON\'T!\n+Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/index.html)\n+so you have working references and proper formatting.\n+:::\n+\n+# A Plone API\n+\n+> The `plone.api` is an elegant and simple API, built for humans wishing to develop with Plone.\n+>\n+> It comes with *cookbook*-like documentation and step-by-step instructions for doing common development tasks in Plone.\n+> Recipes try to assume the user does not have extensive knowledge about Plone internals.\n+\n+The intention of this package is to provide clear API methods for Plone functionality which may be confusing or difficult to access.\n+As the underlying code improves, some API methods may be deprecated and the documentation\n+here will be updated to show how to use the improved code (even if it means not using `plone.api`).\n+\n+Some parts of the documentation do not use *plone.api* methods directly, but simply provide guidance on achieving\n+a task using Plone\'s internal API.\n+\n+For example, using the portal catalog (see \'Find content objects\').\n+\n+The intention is to cover 20% of the tasks any Plone developer does 80% of the time.\n+By keeping everything in one place, the API stays introspectable and discoverable, important aspects of being Pythonic.\n+\n+:::{note}\n+This package is stable and used in production, but from time to time changes will be made to the API.\n+Additional API methods may be introduced in minor versions (1.1 -> 1.2).\n+Backward-incompatible changes to the API will be restricted to major versions (1.x -> 2.x).\n+:::\n+\n+## Narrative documentation\n+\n+```{toctree}\n+:maxdepth: 2\n+\n+about.rst\n+portal.rst\n+content.rst\n+user.rst\n+group.rst\n+env.rst\n+relation.rst\n+```\n+\n+## Complete API and advanced usage\n+\n+```{toctree}\n+:maxdepth: 1\n+\n+api/index.rst\n+api/portal.rst\n+api/content.rst\n+api/user.rst\n+api/group.rst\n+api/env.rst\n+api/relation.rst\n+api/exceptions.rst\n+```\n+\n+## Contribute\n+\n+```{toctree}\n+:maxdepth: 2\n+\n+contribute/index.rst\n+```\n+\n+## Indices and tables\n+\n+- {ref}`genindex`\n+- {ref}`modindex`\n+- {ref}`search`\ndiff --git a/docs/index.rst b/docs/index.rst\ndeleted file mode 100644\nindex 832908f..0000000\n--- a/docs/index.rst\n+++ /dev/null\n@@ -1,81 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/index.html>`_\n-    so you have working references and proper formatting.\n-\n-===========\n-A Plone API\n-===========\n-\n-    The ``plone.api`` is an elegant and simple API, built for humans wishing to develop with Plone.\n-\n-    It comes with *cookbook*-like documentation and step-by-step instructions for doing common development tasks in Plone.\n-    Recipes try to assume the user does not have extensive knowledge about Plone internals.\n-\n-The intention of this package is to provide clear API methods for Plone functionality which may be confusing or difficult to access.\n-As the underlying code improves, some API methods may be deprecated and the documentation\n-here will be updated to show how to use the improved code (even if it means not using ``plone.api``).\n-\n-Some parts of the documentation do not use *plone.api* methods directly, but simply provide guidance on achieving\n-a task using Plone\'s internal API.\n-\n-For example, using the portal catalog (see \'Find content objects\').\n-\n-The intention is to cover 20% of the tasks any Plone developer does 80% of the time.\n-By keeping everything in one place, the API stays introspectable and discoverable, important aspects of being Pythonic.\n-\n-.. note::\n-\n-    This package is stable and used in production, but from time to time changes will be made to the API.\n-    Additional API methods may be introduced in minor versions (1.1 -> 1.2).\n-    Backward-incompatible changes to the API will be restricted to major versions (1.x -> 2.x).\n-\n-\n-Narrative documentation\n-=======================\n-\n-.. toctree::\n-    :maxdepth: 2\n-\n-    about.rst\n-    portal.rst\n-    content.rst\n-    user.rst\n-    group.rst\n-    env.rst\n-    relation.rst\n-\n-\n-Complete API and advanced usage\n-===============================\n-\n-.. toctree::\n-    :maxdepth: 1\n-\n-    api/index.rst\n-    api/portal.rst\n-    api/content.rst\n-    api/user.rst\n-    api/group.rst\n-    api/env.rst\n-    api/relation.rst\n-    api/exceptions.rst\n-\n-\n-Contribute\n-==========\n-\n-.. toctree::\n-   :maxdepth: 2\n-\n-   contribute/index.rst\n-\n-\n-\n-Indices and tables\n-==================\n-\n-* :ref:`genindex`\n-* :ref:`modindex`\n-* :ref:`search`\ndiff --git a/docs/portal.md b/docs/portal.md\nnew file mode 100644\nindex 0000000..d5c9e48\n--- /dev/null\n+++ b/docs/portal.md\n@@ -0,0 +1,406 @@\n+:::{admonition} GitHub-only\n+WARNING: If you are reading this on GitHub, DON\'T!\n+Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/portal.html)\n+so you have working references and proper formatting.\n+:::\n+\n+```{eval-rst}\n+.. module:: plone\n+```\n+\n+(chapter-portal)=\n+\n+# Portal\n+\n+(portal-get-example)=\n+\n+## Get portal object\n+\n+Getting the Plone portal object is easy with {meth}`api.portal.get`.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(portal.getPortalTypeName(), \'Plone Site\')\n+% self.assertEqual(portal.getId(), \'plone\')\n+\n+(portal-get-navigation-root-example)=\n+\n+## Get navigation root\n+\n+In multilingual or multi-site Plone installations you probably want to get the language-specific navigation root object,\n+not the top portal object.\n+\n+You do this with {meth}`api.portal.get_navigation_root()`.\n+\n+Assuming there is a document `english_page` in a folder `en`, which is the navigation root:\n+\n+% invisible-code-block: python\n+%\n+% from plone import api\n+% from plone.app.layout.navigation.interfaces import INavigationRoot\n+% from zope.interface import alsoProvides\n+%\n+% portal = api.portal.get()\n+% english_folder = api.content.create(\n+%     type=\'Folder\',\n+%     title=\'en\',\n+%     container=portal,\n+% )\n+% alsoProvides(english_folder, INavigationRoot)\n+% english_page = api.content.create(\n+%     type=\'Document\',\n+%     title=\'English Page\',\n+%     container=english_folder,\n+% )\n+\n+```python\n+from plone import api\n+nav_root = api.portal.get_navigation_root(english_page)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(nav_root.id, \'en\')\n+\n+returns the folder `en`. If the folder `en` is not a navigation root it would return the portal.\n+\n+## Get portal url\n+\n+Since we now have the portal object, it\'s easy to get the portal URL.\n+\n+```python\n+from plone import api\n+url = api.portal.get().absolute_url()\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(url, \'http://nohost/plone\')\n+\n+(portal-get-tool-example)=\n+\n+## Get tool\n+\n+To get a portal tool easily, use {meth}`api.portal.get_tool` and pass in the name of the tool you need.\n+\n+```python\n+from plone import api\n+catalog = api.portal.get_tool(name=\'portal_catalog\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(catalog.__class__.__name__, \'CatalogTool\')\n+\n+(portal-get-localized-time-example)=\n+\n+## Get localized time\n+\n+To display the date/time in a user-friendly way, localized to the user\'s preferred language, use {meth}`api.portal.get_localized_time`.\n+\n+```python\n+from plone import api\n+from DateTime import DateTime\n+today = DateTime()\n+localized = api.portal.get_localized_time(datetime=today)\n+```\n+\n+% invisible-code-block: python\n+%\n+% # assert that the result is in fact a datetime\n+% self.assertEqual(DateTime(localized).__class__, DateTime)\n+\n+(portal-get-default-language-example)=\n+\n+## Get default language\n+\n+To get the default language, use {meth}`api.portal.get_default_language`.\n+\n+```python\n+from plone import api\n+lang = api.portal.get_default_language()\n+```\n+\n+% invisible-code-block: python\n+%\n+% # assert that the result is \'en\'\n+% self.assertEqual(lang, \'en\')\n+\n+(portal-get-current-language-example)=\n+\n+## Get current language\n+\n+To get the currently negotiated language, use {meth}`api.portal.get_current_language`.\n+\n+```python\n+from plone import api\n+lang = api.portal.get_current_language()\n+```\n+\n+% invisible-code-block: python\n+%\n+% # assert that the result is \'en\'\n+% self.assertEqual(lang, \'en\')\n+\n+(portal-translate-example)=\n+\n+## Translate\n+\n+To translate a message in a given language, use {meth}`api.portal.translate`.\n+\n+```python\n+from plone import api\n+msg = api.portal.translate(\'Edited\', lang=\'es\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% # assert that the translation is correct\n+% self.assertEqual(msg, u\'Editado\')\n+\n+(portal-send-email-example)=\n+\n+## Send E-Mail\n+\n+To send an e-mail use {meth}`api.portal.send_email`:\n+\n+% invisible-code-block: python\n+%\n+% # Mock the mail host so we can test sending the email\n+% from plone import api\n+% from Products.CMFPlone.tests.utils import MockMailHost\n+% from Products.CMFPlone.utils import getToolByName\n+% from Products.MailHost.interfaces import IMailHost\n+% api.portal.PRINTINGMAILHOST_ENABLED = True\n+%\n+% mockmailhost = MockMailHost(\'MailHost\')\n+% if not hasattr(mockmailhost, \'smtp_host\'):\n+%     mockmailhost.smtp_host = \'localhost\'\n+% portal = api.portal.get()\n+% portal.MailHost = mockmailhost\n+% sm = portal.getSiteManager()\n+% sm.registerUtility(component=mockmailhost, provided=IMailHost)\n+% mailhost = getToolByName(portal, \'MailHost\')\n+% mailhost.reset()\n+\n+```python\n+from plone import api\n+api.portal.send_email(\n+    recipient="bob@plone.org",\n+    sender="noreply@plone.org",\n+    subject="Trappist",\n+    body="One for you Bob!",\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(len(mailhost.messages), 1)\n+%\n+% try:\n+%     # Python 3\n+%     from email import message_from_bytes\n+% except ImportError:\n+%     # Python 2\n+%     from email import message_from_string as message_from_bytes\n+% msg = message_from_bytes(mailhost.messages[0])\n+% self.assertEqual(msg[\'To\'], \'bob@plone.org\')\n+% self.assertEqual(msg[\'From\'], \'noreply@plone.org\')\n+% self.assertEqual(msg[\'Subject\'], \'=?utf-8?q?Trappist?=\')\n+% self.assertEqual(msg.get_payload(), \'One for you Bob!\')\n+\n+If you need to add other fields not supported on send_email signature,\n+Python\'s standard [email module](https://docs.python.org/2.7/library/email.message.html#email.message.Message) can also be used:\n+\n+```python\n+from email.mime.multipart import MIMEMultipart\n+from email.mime.text import MIMEText\n+\n+message = MIMEMultipart()\n+message.attach(MIMEText("One for you Bar!"))\n+\n+part = MIMEText(\'<xml></xml>\', \'xml\')\n+part.add_header(\n+    \'Content-Disposition\',\n+    \'attachment; filename="report.xml"\'\n+)\n+message.attach(part)\n+\n+message[\'Reply-To\'] = "community@plone.org"\n+\n+api.portal.send_email(\n+    recipient="bob@plone.org",\n+    sender="noreply@plone.org",\n+    subject="Trappist",\n+    body=message,\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(len(mailhost.messages), 2)\n+%\n+% msg = message_from_bytes(mailhost.messages[1])\n+% payloads = msg.get_payload()\n+% self.assertEqual(len(payloads), 2)\n+% self.assertEqual(msg[\'Reply-To\'], \'community@plone.org\')\n+% self.assertEqual(payloads[0].get_payload(), \'One for you Bar!\')\n+% self.assertIn(\n+%     \'attachment; filename="report.xml\',\n+%     payloads[1][\'Content-Disposition\']\n+% )\n+% api.portal.PRINTINGMAILHOST_ENABLED = False\n+% mailhost.reset()\n+\n+(portal-show-message-example)=\n+\n+## Show notification message\n+\n+With {meth}`api.portal.show_message` you can show a notification message to the user.\n+\n+```python\n+from plone import api\n+api.portal.show_message(message=\'Blueberries!\', request=request)\n+```\n+\n+% invisible-code-block: python\n+%\n+% from Products.statusmessages.interfaces import IStatusMessage\n+% messages = IStatusMessage(request)\n+% show = messages.show()\n+% self.assertEqual(len(show), 1)\n+% self.assertTrue(\'Blueberries!\' in show[0].message)\n+\n+(portal-get-registry-record-example)=\n+\n+## Get plone.app.registry record\n+\n+Plone comes with a package `plone.app.registry` that provides a common way to store configuration and settings.\n+{meth}`api.portal.get_registry_record` provides an easy way to access these.\n+\n+% invisible-code-block: python\n+%\n+% from plone.registry.interfaces import IRegistry\n+% from plone.registry.record import Record\n+% from plone.registry import field\n+% from zope.component import getUtility\n+% registry = getUtility(IRegistry)\n+% registry.records[\'my.package.someoption\'] = Record(field.Bool(\n+%         title=u"Foo"))\n+% registry[\'my.package.someoption\'] = True\n+\n+```python\n+from plone import api\n+api.portal.get_registry_record(\'my.package.someoption\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertTrue(api.portal.get_registry_record(\'my.package.someoption\'))\n+\n+One common pattern when using registry records is to define an interface with all the settings.\n+{meth}`api.portal.get_registry_record` also allows you to use this pattern.\n+\n+% invisible-code-block: python\n+%\n+% from plone.registry.interfaces import IRegistry\n+% from plone.api.tests.test_portal import IMyRegistrySettings\n+%\n+% registry = getUtility(IRegistry)\n+% registry.registerInterface(IMyRegistrySettings)\n+% records = registry.forInterface(IMyRegistrySettings)\n+% records.field_one = u\'my text\'\n+\n+```python\n+from plone import api\n+api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(\n+%     api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings),\n+%     u\'my text\'\n+% )\n+\n+It is possible to provide a default value\n+that will be returned by {meth}`api.portal.get_registry_record`\n+if the queried record is not found.\n+\n+```python\n+from plone import api\n+api.portal.get_registry_record(\'foo\', interface=IMyRegistrySettings, default=u\'bar\')\n+api.portal.get_registry_record(\'foo\', default=u\'baz\')\n+```\n+\n+% invisible-code-block: python\n+% self.assertEqual(\n+%     api.portal.get_registry_record(\n+%         \'foo\',\n+%         interface=IMyRegistrySettings,\n+%         default=u\'bar\'\n+%     ),\n+%     u\'bar\',\n+% )\n+% self.assertEqual(\n+%     api.portal.get_registry_record(\'foo\', default=u\'baz\'),\n+%     u\'baz\',\n+% )\n+\n+(portal-set-registry-record-example)=\n+\n+## Set plone.app.registry record\n+\n+{meth}`api.portal.set_registry_record` provides an easy way to change `plone.app.registry` configuration and settings.\n+\n+% invisible-code-block: python\n+%\n+% from plone.registry.interfaces import IRegistry\n+% from plone.registry.record import Record\n+% from plone.registry import field\n+% from zope.component import getUtility\n+% registry = getUtility(IRegistry)\n+% registry.records[\'my.package.someoption\'] = Record(field.Bool(\n+%         title=u"Foo"))\n+% registry[\'my.package.someoption\'] = True\n+\n+```python\n+from plone import api\n+api.portal.set_registry_record(\'my.package.someoption\', False)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertFalse(registry[\'my.package.someoption\'])\n+\n+{meth}`api.portal.set_registry_record` allows you to define an interface with all the settings.\n+\n+% invisible-code-block: python\n+%\n+% from plone.registry.interfaces import IRegistry\n+% from plone.api.tests.test_portal import IMyRegistrySettings\n+%\n+% registry = getUtility(IRegistry)\n+% registry.registerInterface(IMyRegistrySettings)\n+% records = registry.forInterface(IMyRegistrySettings)\n+\n+```python\n+from plone import api\n+api.portal.set_registry_record(\'field_one\', u\'new value\', interface=IMyRegistrySettings)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(\n+%     api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings),\n+%     u\'new value\'\n+% )\n+\n+## Further reading\n+\n+For more information on possible flags and usage options please see the full {ref}`plone-api-portal` specification.\ndiff --git a/docs/portal.rst b/docs/portal.rst\ndeleted file mode 100644\nindex 2c3e732..0000000\n--- a/docs/portal.rst\n+++ /dev/null\n@@ -1,429 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/portal.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. module:: plone\n-\n-.. _chapter_portal:\n-\n-Portal\n-======\n-\n-.. _portal_get_example:\n-\n-Get portal object\n------------------\n-\n-Getting the Plone portal object is easy with :meth:`api.portal.get`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(portal.getPortalTypeName(), \'Plone Site\')\n-    self.assertEqual(portal.getId(), \'plone\')\n-\n-\n-.. _portal_get_navigation_root_example:\n-\n-Get navigation root\n--------------------\n-\n-In multilingual or multi-site Plone installations you probably want to get the language-specific navigation root object,\n-not the top portal object.\n-\n-You do this with :meth:`api.portal.get_navigation_root()`.\n-\n-Assuming there is a document ``english_page`` in a folder ``en``, which is the navigation root:\n-\n-.. invisible-code-block: python\n-\n-    from plone import api\n-    from plone.app.layout.navigation.interfaces import INavigationRoot\n-    from zope.interface import alsoProvides\n-\n-    portal = api.portal.get()\n-    english_folder = api.content.create(\n-        type=\'Folder\',\n-        title=\'en\',\n-        container=portal,\n-    )\n-    alsoProvides(english_folder, INavigationRoot)\n-    english_page = api.content.create(\n-        type=\'Document\',\n-        title=\'English Page\',\n-        container=english_folder,\n-    )\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    nav_root = api.portal.get_navigation_root(english_page)\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(nav_root.id, \'en\')\n-\n-returns the folder ``en``. If the folder ``en`` is not a navigation root it would return the portal.\n-\n-Get portal url\n---------------\n-\n-Since we now have the portal object, it\'s easy to get the portal URL.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    url = api.portal.get().absolute_url()\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(url, \'http://nohost/plone\')\n-\n-\n-.. _portal_get_tool_example:\n-\n-Get tool\n---------\n-\n-To get a portal tool easily, use :meth:`api.portal.get_tool` and pass in the name of the tool you need.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    catalog = api.portal.get_tool(name=\'portal_catalog\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(catalog.__class__.__name__, \'CatalogTool\')\n-\n-\n-.. _portal_get_localized_time_example:\n-\n-Get localized time\n-------------------\n-\n-To display the date/time in a user-friendly way, localized to the user\'s preferred language, use :meth:`api.portal.get_localized_time`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    from DateTime import DateTime\n-    today = DateTime()\n-    localized = api.portal.get_localized_time(datetime=today)\n-\n-.. invisible-code-block: python\n-\n-    # assert that the result is in fact a datetime\n-    self.assertEqual(DateTime(localized).__class__, DateTime)\n-\n-\n-.. _portal_get_default_language_example:\n-\n-Get default language\n---------------------\n-\n-To get the default language, use :meth:`api.portal.get_default_language`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    lang = api.portal.get_default_language()\n-\n-.. invisible-code-block: python\n-\n-    # assert that the result is \'en\'\n-    self.assertEqual(lang, \'en\')\n-\n-\n-.. _portal_get_current_language_example:\n-\n-Get current language\n---------------------\n-\n-To get the currently negotiated language, use :meth:`api.portal.get_current_language`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    lang = api.portal.get_current_language()\n-\n-.. invisible-code-block: python\n-\n-    # assert that the result is \'en\'\n-    self.assertEqual(lang, \'en\')\n-\n-\n-.. _portal_translate_example:\n-\n-Translate\n----------\n-\n-To translate a message in a given language, use :meth:`api.portal.translate`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    msg = api.portal.translate(\'Edited\', lang=\'es\')\n-\n-.. invisible-code-block: python\n-\n-    # assert that the translation is correct\n-    self.assertEqual(msg, u\'Editado\')\n-\n-\n-.. _portal_send_email_example:\n-\n-Send E-Mail\n------------\n-\n-To send an e-mail use :meth:`api.portal.send_email`:\n-\n-.. invisible-code-block: python\n-\n-    # Mock the mail host so we can test sending the email\n-    from plone import api\n-    from Products.CMFPlone.tests.utils import MockMailHost\n-    from Products.CMFPlone.utils import getToolByName\n-    from Products.MailHost.interfaces import IMailHost\n-    api.portal.PRINTINGMAILHOST_ENABLED = True\n-\n-    mockmailhost = MockMailHost(\'MailHost\')\n-    if not hasattr(mockmailhost, \'smtp_host\'):\n-        mockmailhost.smtp_host = \'localhost\'\n-    portal = api.portal.get()\n-    portal.MailHost = mockmailhost\n-    sm = portal.getSiteManager()\n-    sm.registerUtility(component=mockmailhost, provided=IMailHost)\n-    mailhost = getToolByName(portal, \'MailHost\')\n-    mailhost.reset()\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.portal.send_email(\n-        recipient="bob@plone.org",\n-        sender="noreply@plone.org",\n-        subject="Trappist",\n-        body="One for you Bob!",\n-    )\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(len(mailhost.messages), 1)\n-\n-    try:\n-        # Python 3\n-        from email import message_from_bytes\n-    except ImportError:\n-        # Python 2\n-        from email import message_from_string as message_from_bytes\n-    msg = message_from_bytes(mailhost.messages[0])\n-    self.assertEqual(msg[\'To\'], \'bob@plone.org\')\n-    self.assertEqual(msg[\'From\'], \'noreply@plone.org\')\n-    self.assertEqual(msg[\'Subject\'], \'=?utf-8?q?Trappist?=\')\n-    self.assertEqual(msg.get_payload(), \'One for you Bob!\')\n-\n-If you need to add other fields not supported on send_email signature,\n-Python\'s standard `email module <https://docs.python.org/2.7/library/email.message.html#email.message.Message>`_ can also be used:\n-\n-.. code-block:: python\n-\n-    from email.mime.multipart import MIMEMultipart\n-    from email.mime.text import MIMEText\n-\n-    message = MIMEMultipart()\n-    message.attach(MIMEText("One for you Bar!"))\n-\n-    part = MIMEText(\'<xml></xml>\', \'xml\')\n-    part.add_header(\n-        \'Content-Disposition\',\n-        \'attachment; filename="report.xml"\'\n-    )\n-    message.attach(part)\n-\n-    message[\'Reply-To\'] = "community@plone.org"\n-\n-    api.portal.send_email(\n-        recipient="bob@plone.org",\n-        sender="noreply@plone.org",\n-        subject="Trappist",\n-        body=message,\n-    )\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(len(mailhost.messages), 2)\n-\n-    msg = message_from_bytes(mailhost.messages[1])\n-    payloads = msg.get_payload()\n-    self.assertEqual(len(payloads), 2)\n-    self.assertEqual(msg[\'Reply-To\'], \'community@plone.org\')\n-    self.assertEqual(payloads[0].get_payload(), \'One for you Bar!\')\n-    self.assertIn(\n-        \'attachment; filename="report.xml\',\n-        payloads[1][\'Content-Disposition\']\n-    )\n-    api.portal.PRINTINGMAILHOST_ENABLED = False\n-    mailhost.reset()\n-\n-\n-.. _portal_show_message_example:\n-\n-Show notification message\n--------------------------\n-\n-With :meth:`api.portal.show_message` you can show a notification message to the user.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.portal.show_message(message=\'Blueberries!\', request=request)\n-\n-.. invisible-code-block: python\n-\n-    from Products.statusmessages.interfaces import IStatusMessage\n-    messages = IStatusMessage(request)\n-    show = messages.show()\n-    self.assertEqual(len(show), 1)\n-    self.assertTrue(\'Blueberries!\' in show[0].message)\n-\n-\n-.. _portal_get_registry_record_example:\n-\n-Get plone.app.registry record\n------------------------------\n-\n-Plone comes with a package ``plone.app.registry`` that provides a common way to store configuration and settings.\n-:meth:`api.portal.get_registry_record` provides an easy way to access these.\n-\n-.. invisible-code-block: python\n-\n-    from plone.registry.interfaces import IRegistry\n-    from plone.registry.record import Record\n-    from plone.registry import field\n-    from zope.component import getUtility\n-    registry = getUtility(IRegistry)\n-    registry.records[\'my.package.someoption\'] = Record(field.Bool(\n-            title=u"Foo"))\n-    registry[\'my.package.someoption\'] = True\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.portal.get_registry_record(\'my.package.someoption\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertTrue(api.portal.get_registry_record(\'my.package.someoption\'))\n-\n-One common pattern when using registry records is to define an interface with all the settings.\n-:meth:`api.portal.get_registry_record` also allows you to use this pattern.\n-\n-.. invisible-code-block: python\n-\n-    from plone.registry.interfaces import IRegistry\n-    from plone.api.tests.test_portal import IMyRegistrySettings\n-\n-    registry = getUtility(IRegistry)\n-    registry.registerInterface(IMyRegistrySettings)\n-    records = registry.forInterface(IMyRegistrySettings)\n-    records.field_one = u\'my text\'\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings)\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(\n-        api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings),\n-        u\'my text\'\n-    )\n-\n-It is possible to provide a default value\n-that will be returned by :meth:`api.portal.get_registry_record`\n-if the queried record is not found.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.portal.get_registry_record(\'foo\', interface=IMyRegistrySettings, default=u\'bar\')\n-    api.portal.get_registry_record(\'foo\', default=u\'baz\')\n-\n-.. invisible-code-block: python\n-    self.assertEqual(\n-        api.portal.get_registry_record(\n-            \'foo\',\n-            interface=IMyRegistrySettings,\n-            default=u\'bar\'\n-        ),\n-        u\'bar\',\n-    )\n-    self.assertEqual(\n-        api.portal.get_registry_record(\'foo\', default=u\'baz\'),\n-        u\'baz\',\n-    )\n-\n-.. _portal_set_registry_record_example:\n-\n-Set plone.app.registry record\n------------------------------\n-\n-:meth:`api.portal.set_registry_record` provides an easy way to change ``plone.app.registry`` configuration and settings.\n-\n-.. invisible-code-block: python\n-\n-    from plone.registry.interfaces import IRegistry\n-    from plone.registry.record import Record\n-    from plone.registry import field\n-    from zope.component import getUtility\n-    registry = getUtility(IRegistry)\n-    registry.records[\'my.package.someoption\'] = Record(field.Bool(\n-            title=u"Foo"))\n-    registry[\'my.package.someoption\'] = True\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.portal.set_registry_record(\'my.package.someoption\', False)\n-\n-.. invisible-code-block: python\n-\n-    self.assertFalse(registry[\'my.package.someoption\'])\n-\n-:meth:`api.portal.set_registry_record` allows you to define an interface with all the settings.\n-\n-\n-.. invisible-code-block: python\n-\n-    from plone.registry.interfaces import IRegistry\n-    from plone.api.tests.test_portal import IMyRegistrySettings\n-\n-    registry = getUtility(IRegistry)\n-    registry.registerInterface(IMyRegistrySettings)\n-    records = registry.forInterface(IMyRegistrySettings)\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.portal.set_registry_record(\'field_one\', u\'new value\', interface=IMyRegistrySettings)\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(\n-        api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings),\n-        u\'new value\'\n-    )\n-\n-Further reading\n----------------\n-\n-For more information on possible flags and usage options please see the full :ref:`plone-api-portal` specification.\ndiff --git a/docs/relation.md b/docs/relation.md\nnew file mode 100644\nindex 0000000..63fd052\n--- /dev/null\n+++ b/docs/relation.md\n@@ -0,0 +1,114 @@\n+:::{admonition} GitHub-only\n+WARNING: If you are reading this on GitHub, DON\'T!\n+Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/env.html)\n+so you have working references and proper formatting.\n+:::\n+\n+```{eval-rst}\n+.. module:: plone\n+```\n+\n+(chapter-relation)=\n+\n+# Relations\n+\n+(relation-get-example)=\n+\n+## Get relations\n+\n+```python\n+api.relation.get(source=source, target=target, relationship="friend", unrestricted=False, as_dict=False)\n+```\n+\n+You must provide either source, target, or relationship, or a combination of those, to {meth}`api.relation.get`.\n+`unrestricted` and `as_dict` are optional.\n+\n+By default the result is a list of `RelationValue` objects.\n+\n+If you set `as_dict=True` it will return a dictionary with the names of the relations as keys and lists of objects as values.\n+\n+By default the View permission is checked on the relation objects.\n+You only get objects that you are allowed to see.\n+Use the `unrestricted` parameter if you want to bypass this check.\n+\n+To get back relations, so relations pointing to an item, use:\n+\n+```python\n+api.relation.get(target=target)\n+```\n+\n+To get the objects connected by relations you can use the api of these return values:\n+\n+```python\n+for relation in api.relation.get(source=source):\n+    source = relation.from_object\n+    target = relation.to_object\n+    relationship = relation.from_attribute\n+```\n+\n+(relation-create-example)=\n+\n+## Create relation\n+\n+To create a relation between source object and target object, use {meth}`api.relation.create`.\n+\n+```python\n+from plone import api\n+\n+portal = api.portal.get()\n+source = portal.bob\n+target = portal.bobby\n+api.relation.create(source=source, target=target, relationship="friend")\n+```\n+\n+If the relation is based on a `RelationChoice` or `RelationList` field on the source object, the value of that field is created/updated accordingly.\n+\n+(relation-delete-example)=\n+\n+## Delete relation\n+\n+Delete one or more relations:\n+\n+```python\n+api.relation.delete(source=source, target=target, relationship="friend")\n+```\n+\n+In order to delete relation(s), you must provide either `source`, `target`, or `relationship` to {meth}`api.relation.delete`.\n+You can mix and match.\n+\n+Delete all relations from source to any target:\n+\n+```python\n+api.relation.delete(source=source)\n+```\n+\n+Delete all relations from any source to this target:\n+\n+```python\n+api.relation.delete(target=target)\n+```\n+\n+Delete relations with name "friend" from source to any target:\n+\n+```python\n+api.relation.delete(source=source, relationship="friend")\n+```\n+\n+Delete relations with name "uncle" from any source to this target:\n+\n+```python\n+api.relation.delete(target=target, relationship="uncle")\n+```\n+\n+Delete relations with name "enemy" from any source to any target:\n+\n+```python\n+api.relation.delete(relationship="enemy")\n+```\n+\n+If a deleted relation is based on a `RelationChoice` or `RelationList` field on the source object, the value of the field is removed/updated accordingly.\n+\n+## Further reading\n+\n+For more information on possible flags and usage options please see the full {ref}`plone-api-relation` specification.\n+For more information on relations read the relevant [chapter in the Mastering Plone training](https://training.plone.org/5/mastering-plone/relations.html).\ndiff --git a/docs/relation.rst b/docs/relation.rst\ndeleted file mode 100644\nindex acd24db..0000000\n--- a/docs/relation.rst\n+++ /dev/null\n@@ -1,123 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/env.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. module:: plone\n-\n-.. _chapter_relation:\n-\n-=========\n-Relations\n-=========\n-\n-\n-.. _relation_get_example:\n-\n-Get relations\n-=============\n-\n-.. code-block:: python\n-\n-    api.relation.get(source=source, target=target, relationship="friend", unrestricted=False, as_dict=False)\n-\n-You must provide either source, target, or relationship, or a combination of those, to :meth:`api.relation.get`.\n-``unrestricted`` and ``as_dict`` are optional.\n-\n-By default the result is a list of ``RelationValue`` objects.\n-\n-If you set ``as_dict=True`` it will return a dictionary with the names of the relations as keys and lists of objects as values.\n-\n-By default the View permission is checked on the relation objects.\n-You only get objects that you are allowed to see.\n-Use the ``unrestricted`` parameter if you want to bypass this check.\n-\n-To get back relations, so relations pointing to an item, use:\n-\n-.. code-block:: python\n-\n-    api.relation.get(target=target)\n-\n-To get the objects connected by relations you can use the api of these return values:\n-\n-.. code-block:: python\n-\n-    for relation in api.relation.get(source=source):\n-        source = relation.from_object\n-        target = relation.to_object\n-        relationship = relation.from_attribute\n-\n-\n-.. _relation_create_example:\n-\n-Create relation\n-===============\n-\n-To create a relation between source object and target object, use :meth:`api.relation.create`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-\n-    portal = api.portal.get()\n-    source = portal.bob\n-    target = portal.bobby\n-    api.relation.create(source=source, target=target, relationship="friend")\n-\n-If the relation is based on a ``RelationChoice`` or ``RelationList`` field on the source object, the value of that field is created/updated accordingly.\n-\n-\n-.. _relation_delete_example:\n-\n-Delete relation\n-===============\n-\n-Delete one or more relations:\n-\n-.. code-block:: python\n-\n-    api.relation.delete(source=source, target=target, relationship="friend")\n-\n-In order to delete relation(s), you must provide either ``source``, ``target``, or ``relationship`` to :meth:`api.relation.delete`.\n-You can mix and match.\n-\n-Delete all relations from source to any target:\n-\n-.. code-block:: python\n-\n-    api.relation.delete(source=source)\n-\n-Delete all relations from any source to this target:\n-\n-.. code-block:: python\n-\n-    api.relation.delete(target=target)\n-\n-Delete relations with name "friend" from source to any target:\n-\n-.. code-block:: python\n-\n-    api.relation.delete(source=source, relationship="friend")\n-\n-Delete relations with name "uncle" from any source to this target:\n-\n-.. code-block:: python\n-\n-    api.relation.delete(target=target, relationship="uncle")\n-\n-Delete relations with name "enemy" from any source to any target:\n-\n-.. code-block:: python\n-\n-    api.relation.delete(relationship="enemy")\n-\n-If a deleted relation is based on a ``RelationChoice`` or ``RelationList`` field on the source object, the value of the field is removed/updated accordingly.\n-\n-\n-Further reading\n-===============\n-\n-For more information on possible flags and usage options please see the full :ref:`plone-api-relation` specification.\n-For more information on relations read the relevant `chapter in the Mastering Plone training <https://training.plone.org/5/mastering-plone/relations.html>`_.\ndiff --git a/docs/user.md b/docs/user.md\nnew file mode 100644\nindex 0000000..8144621\n--- /dev/null\n+++ b/docs/user.md\n@@ -0,0 +1,409 @@\n+:::{admonition} GitHub-only\n+WARNING: If you are reading this on GitHub, DON\'T!\n+Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/user.html)\n+so you have working references and proper formatting.\n+:::\n+\n+```{eval-rst}\n+.. module:: plone\n+```\n+\n+(chapter-users)=\n+\n+# Users\n+\n+(user-create-example)=\n+\n+## Create user\n+\n+To create a new user, use {meth}`api.user.create`.\n+If your portal is configured to use emails as usernames, you just need to pass in the email of the new user.\n+\n+% invisible-code-block: python\n+%\n+% from plone import api\n+% from plone.api.exc import InvalidParameterError\n+% try:\n+%     api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n+% except InvalidParameterError:\n+%     portal = api.portal.get()\n+%     portal.portal_properties.site_properties.use_email_as_login = True\n+\n+```python\n+from plone import api\n+user = api.user.create(email=\'alice@plone.org\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(user.id, \'alice@plone.org\')\n+% self.assertEqual(user.getProperty(\'email\'), \'alice@plone.org\')\n+\n+Otherwise, you also need to pass in the username of the new user.\n+\n+% invisible-code-block: python\n+%\n+% try:\n+%     api.portal.set_registry_record(\'plone.use_email_as_login\', False)\n+% except InvalidParameterError:\n+%     portal = api.portal.get()\n+%     portal.portal_properties.site_properties.use_email_as_login = False\n+\n+```python\n+user = api.user.create(email=\'jane@plone.org\', username=\'jane\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(user.id, \'jane\')\n+% self.assertEqual(user.getProperty(\'email\'), \'jane@plone.org\')\n+\n+To set user properties when creating a new user, pass in a properties dict.\n+\n+```python\n+properties = dict(\n+    fullname=\'Bob\',\n+    location=\'Munich\',\n+)\n+user = api.user.create(\n+    username=\'bob\',\n+    email=\'bob@plone.org\',\n+    properties=properties,\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(user.getProperty(\'fullname\'), \'Bob\')\n+% self.assertEqual(user.getProperty(\'location\'), \'Munich\')\n+\n+Besides user properties you can also specify a password for the new user.\n+Otherwise a random 8-character alphanumeric password will be generated.\n+\n+```python\n+user = api.user.create(\n+    username=\'noob\',\n+    email=\'noob@plone.org\',\n+    password=\'secret\',\n+)\n+```\n+\n+(user-get-example)=\n+\n+## Get user\n+\n+You can get a user with {meth}`api.user.get`.\n+\n+```python\n+from plone import api\n+user = api.user.get(username=\'bob\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(user.id, \'bob\')\n+\n+## User properties\n+\n+Users have various properties set on them.\n+This is how you get and set them, using the underlying APIs:\n+\n+```python\n+from plone import api\n+user = api.user.get(username=\'bob\')\n+user.setMemberProperties(mapping={ \'location\': \'Neverland\', })\n+location = user.getProperty(\'location\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(location, \'Neverland\')\n+\n+(user-get-current-example)=\n+\n+## Get currently logged-in user\n+\n+Getting the currently logged-in user is easy with {meth}`api.user.get_current`.\n+\n+```python\n+from plone import api\n+current = api.user.get_current()\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(current.id, \'test_user_1_\')\n+\n+(user-is-anonymous-example)=\n+\n+## Check if current user is anonymous\n+\n+Sometimes you need to trigger or display some piece of information only for logged-in users.\n+It\'s easy to use {meth}`api.user.is_anonymous` to do a basic check for it.\n+\n+```python\n+from plone import api\n+if not api.user.is_anonymous():\n+    trigger = False\n+trigger = True\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertTrue(trigger)\n+\n+(user-get-all-users-example)=\n+\n+## Get all users\n+\n+Get all users in your portal with {meth}`api.user.get_users`.\n+\n+```python\n+from plone import api\n+users = api.user.get_users()\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertTrue(\'test_user_1_\' in [user.id for user in users])\n+\n+(user-get-groups-users-example)=\n+\n+## Get group\'s users\n+\n+If you set the `groupname` parameter, then {meth}`api.user.get_users` will return only users that are members of this group.\n+\n+% invisible-code-block: python\n+%\n+% api.group.create(groupname=\'staff\')\n+% api.group.add_user(username=\'jane\', groupname=\'staff\')\n+\n+```python\n+from plone import api\n+users = api.user.get_users(groupname=\'staff\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(users[0].id, \'jane\')\n+\n+(user-delete-example)=\n+\n+## Delete user\n+\n+To delete a user, use {meth}`api.user.delete` and pass in either the username or the user object you want to delete.\n+\n+```python\n+from plone import api\n+api.user.create(username=\'unwanted\', email=\'unwanted@example.org\')\n+api.user.delete(username=\'unwanted\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(api.user.get(username=\'unwanted\'), None)\n+\n+```python\n+unwanted = api.user.create(username=\'unwanted\', email=\'unwanted@example.org\')\n+api.user.delete(user=unwanted)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(api.user.get(username=\'unwanted\'), None)\n+\n+(user-get-roles-example)=\n+\n+## Get user roles\n+\n+The {meth}`api.user.get_roles` method is used for getting a user\'s roles.\n+By default it returns site-wide roles.\n+\n+```python\n+from plone import api\n+roles = api.user.get_roles(username=\'jane\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(set(roles), set([\'Member\',\'Authenticated\']))\n+\n+If you pass in a content object, it will return local roles of the user in that particular context.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+blog = api.content.create(container=portal, type=\'Document\', id=\'blog\', title=\'My blog\')\n+roles = api.user.get_roles(username=\'jane\', obj=portal[\'blog\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(set(roles), set([\'Member\',\'Authenticated\']))\n+\n+(user-get-permissions-example)=\n+\n+## Get user permissions\n+\n+The {meth}`api.user.get_permissions` method is used for getting user\'s permissions.\n+By default it returns site root permissions.\n+\n+```python\n+from plone import api\n+mike = api.user.create(email=\'mike@plone.org\', username=\'mike\')\n+permissions = api.user.get_permissions(username=\'mike\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% PERMISSIONS = {\n+%     \'View\': True,\n+%     \'Manage portal\': False,\n+%     \'Modify portal content\': False,\n+%     \'Access contents information\': True,\n+% }\n+%\n+% for k, v in PERMISSIONS.items():\n+%     self.assertTrue(v == api.user.get_permissions(username=\'mike\').get(k, None))\n+%     self.assertTrue(v == api.user.get_permissions(user=mike).get(k, None))\n+\n+If you pass in a content object, it will return local permissions of the user in that particular context.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_two\', title=\'Folder Two\')\n+permissions = api.user.get_permissions(username=\'mike\', obj=portal[\'folder_two\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% PERMISSIONS = {\n+%     \'View\': False,\n+%     \'Manage portal\': False,\n+%     \'Modify portal content\': False,\n+%     \'Access contents information\': False,\n+% }\n+%\n+% for k, v in PERMISSIONS.items():\n+%     self.assertTrue(v == api.user.get_permissions(username=\'mike\', obj=portal[\'folder_two\']).get(k, None))\n+%     self.assertTrue(v == api.user.get_permissions(user=mike, obj=portal[\'folder_two\']).get(k, None))\n+\n+(user-has-permission-example)=\n+\n+## Check user permission\n+\n+Instead of getting all user permissions, you can check a single permission using the {meth}`api.user.has_permission` method.\n+By default it checks the permission on the site root.\n+\n+```python\n+from plone import api\n+adam = api.user.create(email=\'adam@plone.org\', username=\'adam\')\n+can_view = api.user.has_permission(\'View\', username=\'adam\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertTrue(can_view)\n+\n+If you pass in a content object, it will check the permission in that particular context.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_hp\', title=\'Folder\')\n+can_view = api.user.has_permission(\'View\', username=\'adam\', obj=folder)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertFalse(can_view)\n+\n+(user-grant-roles-example)=\n+\n+## Grant roles to user\n+\n+The {meth}`api.user.grant_roles` allows us to grant a list of roles to the user.\n+\n+```python\n+from plone import api\n+api.user.grant_roles(username=\'jane\',\n+    roles=[\'Reviewer\', \'SiteAdministrator\']\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_ROLES_SITE = [\'Member\', \'Reviewer\', \'SiteAdministrator\', \'Authenticated\']\n+% roles = api.user.get_roles(username=\'jane\')\n+% self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n+\n+If you pass a content object or folder,\n+the roles are granted only on that context and not site-wide.\n+But all site-wide roles will also be returned by {meth}`api.user.get_roles` for this user on the given context.\n+\n+```python\n+from plone import api\n+folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_one\', title=\'Folder One\')\n+api.user.grant_roles(username=\'jane\',\n+    roles=[\'Editor\', \'Contributor\'],\n+    obj=portal[\'folder_one\']\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_ROLES_CONTEXT = EXPECTED_ROLES_SITE + [\'Editor\', \'Contributor\']\n+% roles = api.user.get_roles(username=\'jane\', obj=portal[\'folder_one\'])\n+% self.assertEqual(set(EXPECTED_ROLES_CONTEXT), set(roles))\n+% roles = api.user.get_roles(username=\'jane\')\n+% self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n+\n+(user-revoke-roles-example)=\n+\n+## Revoke roles from user\n+\n+The {meth}`api.user.revoke_roles` allows us to revoke a list of roles from the user.\n+\n+```python\n+from plone import api\n+api.user.revoke_roles(username=\'jane\', roles=[\'SiteAdministrator\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_ROLES_SITE = [\'Member\', \'Authenticated\', \'Reviewer\']\n+% roles = api.user.get_roles(username=\'jane\')\n+% self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n+\n+If you pass a context object the local roles for that context will be removed.\n+\n+```python\n+from plone import api\n+folder = api.content.create(\n+    container=portal,\n+    type=\'Folder\',\n+    id=\'folder_three\',\n+    title=\'Folder Three\'\n+)\n+api.user.grant_roles(\n+    username=\'jane\',\n+    roles=[\'Editor\', \'Contributor\'],\n+    obj=portal[\'folder_three\'],\n+)\n+api.user.revoke_roles(\n+    username=\'jane\',\n+    roles=[\'Editor\'],\n+    obj=portal[\'folder_three\'],\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_ROLES_CONTEXT = EXPECTED_ROLES_SITE + [\'Contributor\']\n+% roles = api.user.get_roles(username=\'jane\', obj=portal[\'folder_three\'])\n+% self.assertEqual(set(EXPECTED_ROLES_CONTEXT), set(roles))\n+\n+## Further reading\n+\n+For more information on possible flags and usage options please see the full {ref}`plone-api-user` specification.\ndiff --git a/docs/user.rst b/docs/user.rst\ndeleted file mode 100644\nindex fc43701..0000000\n--- a/docs/user.rst\n+++ /dev/null\n@@ -1,444 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <https://docs.plone.org/develop/plone.api/docs/user.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. module:: plone\n-\n-.. _chapter_users:\n-\n-Users\n-=====\n-\n-\n-.. _user_create_example:\n-\n-Create user\n------------\n-\n-To create a new user, use :meth:`api.user.create`.\n-If your portal is configured to use emails as usernames, you just need to pass in the email of the new user.\n-\n-.. invisible-code-block: python\n-\n-    from plone import api\n-    from plone.api.exc import InvalidParameterError\n-    try:\n-        api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n-    except InvalidParameterError:\n-        portal = api.portal.get()\n-        portal.portal_properties.site_properties.use_email_as_login = True\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    user = api.user.create(email=\'alice@plone.org\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(user.id, \'alice@plone.org\')\n-    self.assertEqual(user.getProperty(\'email\'), \'alice@plone.org\')\n-\n-\n-Otherwise, you also need to pass in the username of the new user.\n-\n-.. invisible-code-block: python\n-\n-    try:\n-        api.portal.set_registry_record(\'plone.use_email_as_login\', False)\n-    except InvalidParameterError:\n-        portal = api.portal.get()\n-        portal.portal_properties.site_properties.use_email_as_login = False\n-\n-.. code-block:: python\n-\n-    user = api.user.create(email=\'jane@plone.org\', username=\'jane\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(user.id, \'jane\')\n-    self.assertEqual(user.getProperty(\'email\'), \'jane@plone.org\')\n-\n-\n-To set user properties when creating a new user, pass in a properties dict.\n-\n-.. code-block:: python\n-\n-    properties = dict(\n-        fullname=\'Bob\',\n-        location=\'Munich\',\n-    )\n-    user = api.user.create(\n-        username=\'bob\',\n-        email=\'bob@plone.org\',\n-        properties=properties,\n-    )\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(user.getProperty(\'fullname\'), \'Bob\')\n-    self.assertEqual(user.getProperty(\'location\'), \'Munich\')\n-\n-\n-Besides user properties you can also specify a password for the new user.\n-Otherwise a random 8-character alphanumeric password will be generated.\n-\n-.. code-block:: python\n-\n-    user = api.user.create(\n-        username=\'noob\',\n-        email=\'noob@plone.org\',\n-        password=\'secret\',\n-    )\n-\n-\n-.. _user_get_example:\n-\n-Get user\n---------\n-\n-You can get a user with :meth:`api.user.get`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    user = api.user.get(username=\'bob\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(user.id, \'bob\')\n-\n-User properties\n----------------\n-\n-Users have various properties set on them.\n-This is how you get and set them, using the underlying APIs:\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    user = api.user.get(username=\'bob\')\n-    user.setMemberProperties(mapping={ \'location\': \'Neverland\', })\n-    location = user.getProperty(\'location\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(location, \'Neverland\')\n-\n-\n-.. _user_get_current_example:\n-\n-Get currently logged-in user\n-----------------------------\n-\n-Getting the currently logged-in user is easy with :meth:`api.user.get_current`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    current = api.user.get_current()\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(current.id, \'test_user_1_\')\n-\n-\n-.. _user_is_anonymous_example:\n-\n-Check if current user is anonymous\n-----------------------------------\n-\n-Sometimes you need to trigger or display some piece of information only for logged-in users.\n-It\'s easy to use :meth:`api.user.is_anonymous` to do a basic check for it.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    if not api.user.is_anonymous():\n-        trigger = False\n-    trigger = True\n-\n-.. invisible-code-block: python\n-\n-    self.assertTrue(trigger)\n-\n-\n-.. _user_get_all_users_example:\n-\n-Get all users\n--------------\n-\n-Get all users in your portal with :meth:`api.user.get_users`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    users = api.user.get_users()\n-\n-.. invisible-code-block: python\n-\n-    self.assertTrue(\'test_user_1_\' in [user.id for user in users])\n-\n-\n-.. _user_get_groups_users_example:\n-\n-Get group\'s users\n------------------\n-\n-If you set the `groupname` parameter, then :meth:`api.user.get_users` will return only users that are members of this group.\n-\n-.. invisible-code-block: python\n-\n-    api.group.create(groupname=\'staff\')\n-    api.group.add_user(username=\'jane\', groupname=\'staff\')\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    users = api.user.get_users(groupname=\'staff\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(users[0].id, \'jane\')\n-\n-\n-.. _user_delete_example:\n-\n-Delete user\n------------\n-\n-To delete a user, use :meth:`api.user.delete` and pass in either the username or the user object you want to delete.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.user.create(username=\'unwanted\', email=\'unwanted@example.org\')\n-    api.user.delete(username=\'unwanted\')\n-\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(api.user.get(username=\'unwanted\'), None)\n-\n-.. code-block:: python\n-\n-    unwanted = api.user.create(username=\'unwanted\', email=\'unwanted@example.org\')\n-    api.user.delete(user=unwanted)\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(api.user.get(username=\'unwanted\'), None)\n-\n-\n-.. _user_get_roles_example:\n-\n-Get user roles\n-----------------\n-\n-The :meth:`api.user.get_roles` method is used for getting a user\'s roles.\n-By default it returns site-wide roles.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    roles = api.user.get_roles(username=\'jane\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(set(roles), set([\'Member\',\'Authenticated\']))\n-\n-\n-If you pass in a content object, it will return local roles of the user in that particular context.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    blog = api.content.create(container=portal, type=\'Document\', id=\'blog\', title=\'My blog\')\n-    roles = api.user.get_roles(username=\'jane\', obj=portal[\'blog\'])\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(set(roles), set([\'Member\',\'Authenticated\']))\n-\n-\n-.. _user_get_permissions_example:\n-\n-Get user permissions\n---------------------\n-\n-The :meth:`api.user.get_permissions` method is used for getting user\'s permissions.\n-By default it returns site root permissions.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    mike = api.user.create(email=\'mike@plone.org\', username=\'mike\')\n-    permissions = api.user.get_permissions(username=\'mike\')\n-\n-.. invisible-code-block: python\n-\n-    PERMISSIONS = {\n-        \'View\': True,\n-        \'Manage portal\': False,\n-        \'Modify portal content\': False,\n-        \'Access contents information\': True,\n-    }\n-\n-    for k, v in PERMISSIONS.items():\n-        self.assertTrue(v == api.user.get_permissions(username=\'mike\').get(k, None))\n-        self.assertTrue(v == api.user.get_permissions(user=mike).get(k, None))\n-\n-\n-If you pass in a content object, it will return local permissions of the user in that particular context.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_two\', title=\'Folder Two\')\n-    permissions = api.user.get_permissions(username=\'mike\', obj=portal[\'folder_two\'])\n-\n-.. invisible-code-block: python\n-\n-    PERMISSIONS = {\n-        \'View\': False,\n-        \'Manage portal\': False,\n-        \'Modify portal content\': False,\n-        \'Access contents information\': False,\n-    }\n-\n-    for k, v in PERMISSIONS.items():\n-        self.assertTrue(v == api.user.get_permissions(username=\'mike\', obj=portal[\'folder_two\']).get(k, None))\n-        self.assertTrue(v == api.user.get_permissions(user=mike, obj=portal[\'folder_two\']).get(k, None))\n-\n-\n-.. _user_has_permission_example:\n-\n-Check user permission\n-----------------------\n-\n-Instead of getting all user permissions, you can check a single permission using the :meth:`api.user.has_permission` method.\n-By default it checks the permission on the site root.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    adam = api.user.create(email=\'adam@plone.org\', username=\'adam\')\n-    can_view = api.user.has_permission(\'View\', username=\'adam\')\n-\n-.. invisible-code-block: python\n-\n-   self.assertTrue(can_view)\n-\n-\n-If you pass in a content object, it will check the permission in that particular context.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_hp\', title=\'Folder\')\n-    can_view = api.user.has_permission(\'View\', username=\'adam\', obj=folder)\n-\n-.. invisible-code-block: python\n-\n-   self.assertFalse(can_view)\n-\n-\n-.. _user_grant_roles_example:\n-\n-Grant roles to user\n--------------------\n-\n-The :meth:`api.user.grant_roles` allows us to grant a list of roles to the user.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.user.grant_roles(username=\'jane\',\n-        roles=[\'Reviewer\', \'SiteAdministrator\']\n-    )\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_ROLES_SITE = [\'Member\', \'Reviewer\', \'SiteAdministrator\', \'Authenticated\']\n-    roles = api.user.get_roles(username=\'jane\')\n-    self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n-\n-\n-If you pass a content object or folder,\n-the roles are granted only on that context and not site-wide.\n-But all site-wide roles will also be returned by :meth:`api.user.get_roles` for this user on the given context.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_one\', title=\'Folder One\')\n-    api.user.grant_roles(username=\'jane\',\n-        roles=[\'Editor\', \'Contributor\'],\n-        obj=portal[\'folder_one\']\n-    )\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_ROLES_CONTEXT = EXPECTED_ROLES_SITE + [\'Editor\', \'Contributor\']\n-    roles = api.user.get_roles(username=\'jane\', obj=portal[\'folder_one\'])\n-    self.assertEqual(set(EXPECTED_ROLES_CONTEXT), set(roles))\n-    roles = api.user.get_roles(username=\'jane\')\n-    self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n-\n-\n-.. _user_revoke_roles_example:\n-\n-Revoke roles from user\n-----------------------\n-\n-The :meth:`api.user.revoke_roles` allows us to revoke a list of roles from the user.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.user.revoke_roles(username=\'jane\', roles=[\'SiteAdministrator\'])\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_ROLES_SITE = [\'Member\', \'Authenticated\', \'Reviewer\']\n-    roles = api.user.get_roles(username=\'jane\')\n-    self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n-\n-\n-If you pass a context object the local roles for that context will be removed.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    folder = api.content.create(\n-        container=portal,\n-        type=\'Folder\',\n-        id=\'folder_three\',\n-        title=\'Folder Three\'\n-    )\n-    api.user.grant_roles(\n-        username=\'jane\',\n-        roles=[\'Editor\', \'Contributor\'],\n-        obj=portal[\'folder_three\'],\n-    )\n-    api.user.revoke_roles(\n-        username=\'jane\',\n-        roles=[\'Editor\'],\n-        obj=portal[\'folder_three\'],\n-    )\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_ROLES_CONTEXT = EXPECTED_ROLES_SITE + [\'Contributor\']\n-    roles = api.user.get_roles(username=\'jane\', obj=portal[\'folder_three\'])\n-    self.assertEqual(set(EXPECTED_ROLES_CONTEXT), set(roles))\n-\n-Further reading\n----------------\n-\n-For more information on possible flags and usage options please see the full :ref:`plone-api-user` specification.\ndiff --git a/src/plone/api/content.py b/src/plone/api/content.py\nindex cd06e23..c2a5538 100644\n--- a/src/plone/api/content.py\n+++ b/src/plone/api/content.py\n@@ -59,7 +59,7 @@ def create(\n         KeyError,\n         :class:`~plone.api.exc.MissingParameterError`,\n         :class:`~plone.api.exc.InvalidParameterError`\n-    :Example: :ref:`content_create_example`\n+    :Example: :ref:`content-create-example`\n     """\n     # Create a temporary id if the id is not given\n     content_id = not safe_id and id or str(random.randint(0, 99999999))\n@@ -118,7 +118,7 @@ def get(path=None, UID=None):\n     :returns: Content object\n     :raises:\n         ValueError,\n-    :Example: :ref:`content_get_example`\n+    :Example: :ref:`content-get-example`\n     """\n     if path:\n         site = portal.get()\n@@ -148,7 +148,7 @@ def move(source=None, target=None, id=None, safe_id=False):\n     :param target: Target container to which the source object will\n         be moved. If no target is specified, the source object\'s container will\n         be used as a target, effectively making this operation a rename\n-        (:ref:`content_rename_example`).\n+        (:ref:`content-rename-example`).\n     :type target: Folderish content object\n     :param id: Pass this parameter if you want to change the id of the moved\n         object on the target location. If the new id conflicts with another\n@@ -163,7 +163,7 @@ def move(source=None, target=None, id=None, safe_id=False):\n     :raises:\n         KeyError\n         ValueError\n-    :Example: :ref:`content_move_example`\n+    :Example: :ref:`content-move-example`\n     """\n     source_id = source.getId()\n \n@@ -194,7 +194,7 @@ def rename(obj=None, new_id=None, safe_id=False):\n         InvalidParameterError. When True, choose a new, non-conflicting id.\n     :type safe_id: boolean\n     :returns: Content object that was renamed\n-    :Example: :ref:`content_rename_example`\n+    :Example: :ref:`content-rename-example`\n     """\n     obj_id = obj.getId()\n     container = obj.aq_parent\n@@ -232,7 +232,7 @@ def copy(source=None, target=None, id=None, safe_id=False):\n     :raises:\n         KeyError,\n         ValueError\n-    :Example: :ref:`content_copy_example`\n+    :Example: :ref:`content-copy-example`\n     """\n     source_id = source.getId()\n \n@@ -271,7 +271,7 @@ def delete(obj=None, objects=None, check_linkintegrity=True):\n         ValueError\n         plone.app.linkintegrity.exceptions.LinkIntegrityNotificationException\n \n-    :Example: :ref:`content_delete_example`\n+    :Example: :ref:`content-delete-example`\n     """\n     objects = [obj] if obj else objects\n \n@@ -308,7 +308,7 @@ def get_state(obj=None, default=_marker):\n     :rtype: string\n     :raises:\n         Products.CMFCore.WorkflowCore.WorkflowException\n-    :Example: :ref:`content_get_state_example`\n+    :Example: :ref:`content-get-state-example`\n     """\n     workflow = portal.get_tool(\'portal_workflow\')\n \n@@ -440,7 +440,7 @@ def transition(obj=None, transition=None, to_state=None, **kwargs):\n     :raises:\n         :class:`~plone.api.exc.MissingParameterError`,\n         :class:`~plone.api.exc.InvalidParameterError`\n-    :Example: :ref:`content_transition_example`\n+    :Example: :ref:`content-transition-example`\n     """\n     workflow = portal.get_tool(\'portal_workflow\')\n     if transition is not None:\n@@ -474,7 +474,7 @@ def disable_roles_acquisition(obj=None):\n \n     :param obj: [required] Context object to block the acquisition on.\n     :type obj: Content object\n-    :Example: :ref:`content_disable_roles_acquisition_example`\n+    :Example: :ref:`content-disable-roles-acquisition-example`\n     """\n     plone_utils = portal.get_tool(\'plone_utils\')\n     plone_utils.acquireLocalRoles(obj, status=0)\n@@ -487,7 +487,7 @@ def enable_roles_acquisition(obj=None):\n \n     :param obj: [required] Context object to enable the acquisition on.\n     :type obj: Content object\n-    :Example: :ref:`content_enable_roles_acquisition_example`\n+    :Example: :ref:`content-enable-roles-acquisition-example`\n     """\n     plone_utils = portal.get_tool(\'plone_utils\')\n     plone_utils.acquireLocalRoles(obj, status=1)\n@@ -506,7 +506,7 @@ def get_view(name=None, context=None, request=None):\n     :raises:\n         :class:`~plone.api.exc.MissingParameterError`,\n         :class:`~plone.api.exc.InvalidParameterError`\n-    :Example: :ref:`content_get_view_example`\n+    :Example: :ref:`content-get-view-example`\n     """\n     # We do not use exceptionhandling to detect if the requested view is\n     # available, because the __init__ of said view will contain\n@@ -544,7 +544,7 @@ def get_uuid(obj=None):\n     :rtype: string\n     :raises:\n         ValueError\n-    :Example: :ref:`content_get_uuid_example`\n+    :Example: :ref:`content-get-uuid-example`\n     """\n     return IUUID(obj)\n \n@@ -597,7 +597,7 @@ def find(context=None, depth=None, **kwargs):\n     :type obj: Content object\n     :returns: Catalog brains\n     :rtype: List\n-    :Example: :ref:`content_find_example`\n+    :Example: :ref:`content-find-example`\n \n     """\n     query = {}\ndiff --git a/src/plone/api/env.py b/src/plone/api/env.py\nindex acd7e6f..f8ccbc5 100644\n--- a/src/plone/api/env.py\n+++ b/src/plone/api/env.py\n@@ -29,7 +29,7 @@ def adopt_user(username=None, user=None):\n     :type user: user object from acl_users.getUser() or api.user.get().\n     :param username: username of user to switch to inside block.\n     :type username: string\n-    :Example: :ref:`env_adopt_user_example`\n+    :Example: :ref:`env-adopt-user-example`\n     """\n     # Grab the user object out of acl_users because this function\n     # accepts \'user\' objects that are actually things like MemberData\n@@ -89,7 +89,7 @@ def adopt_roles(roles=None):\n \n     :param roles: New roles to gain inside block. Existing roles will be lost.\n     :type roles: list of strings\n-    :Example: :ref:`env_adopt_roles_example`\n+    :Example: :ref:`env-adopt-roles-example`\n     """\n     if isinstance(roles, str):\n         roles = [roles]\n@@ -180,7 +180,7 @@ def getWrappedOwner(self):\n def debug_mode():\n     """Returns True if your zope instance is running in debug mode.\n \n-    :Example: :ref:`env_debug_mode_example`\n+    :Example: :ref:`env-debug-mode-example`\n     """\n     return getConfiguration().debug_mode\n \n@@ -188,7 +188,7 @@ def debug_mode():\n def test_mode():\n     """Returns True if you are running the zope test runner.\n \n-    :Example: :ref:`env_test_mode_example`\n+    :Example: :ref:`env-test-mode-example`\n     """\n     global IS_TEST\n \n@@ -206,7 +206,7 @@ def read_only_mode():\n     """Check if the Zope instance is running on a read-only ZODB.\n \n     :returns: bool isReadOnly True if ZODB is read-only\n-    :Example: :ref:`env_read_only_mode_example`\n+    :Example: :ref:`env-read-only-mode-example`\n     """\n     with closing(Zope2.DB.open()) as connection:\n         return connection.isReadOnly()\n@@ -216,7 +216,7 @@ def plone_version():\n     """Return Plone version number.\n \n     :returns: string denoting what release of Plone this distribution contains\n-    :Example: :ref:`env_plone_version_example`\n+    :Example: :ref:`env-plone-version-example`\n     """\n     return get_distribution(\'Products.CMFPlone\').version\n \n@@ -225,6 +225,6 @@ def zope_version():\n     """Return Zope 2 version number.\n \n     :returns: string denoting what release of Zope2 this distribution contains\n-    :Example: :ref:`env_zope_version_example`\n+    :Example: :ref:`env-zope-version-example`\n     """\n     return get_distribution(\'Zope2\').version\ndiff --git a/src/plone/api/group.py b/src/plone/api/group.py\nindex f56e186..30bf4c7 100644\n--- a/src/plone/api/group.py\n+++ b/src/plone/api/group.py\n@@ -34,7 +34,7 @@ def create(\n     :rtype: GroupData object\n     :raises:\n         ValueError\n-    :Example: :ref:`group_create_example`\n+    :Example: :ref:`group-create-example`\n     """\n     group_tool = portal.get_tool(\'portal_groups\')\n     group_tool.addGroup(\n@@ -57,7 +57,7 @@ def get(groupname=None):\n     :rtype: GroupData object\n     :raises:\n         ValueError\n-    :Example: :ref:`group_get_example`\n+    :Example: :ref:`group-get-example`\n     """\n     group_tool = portal.get_tool(\'portal_groups\')\n     return group_tool.getGroupById(groupname)\n@@ -79,8 +79,8 @@ def get_groups(username=None, user=None):\n     :returns: All groups (optionlly filtered by user)\n     :rtype: List of GroupData objects\n     :raises: UserNotFoundError\n-    :Example: :ref:`group_get_all_groups_example`,\n-        :ref:`group_get_users_groups_example`\n+    :Example: :ref:`group-get-all-groups-example`,\n+        :ref:`group-get-users-groups-example`\n     """\n     if username:\n         user = user_get(username=username)\n@@ -117,7 +117,7 @@ def delete(groupname=None, group=None):\n     :type group: GroupData object\n     :raises:\n         ValueError\n-    :Example: :ref:`group_delete_example`\n+    :Example: :ref:`group-delete-example`\n     """\n     group_tool = portal.get_tool(\'portal_groups\')\n \n@@ -151,7 +151,7 @@ def add_user(groupname=None, group=None, username=None, user=None):\n     :raises:\n         ValueError\n         UserNotFoundError\n-    :Example: :ref:`group_add_user_example`\n+    :Example: :ref:`group-add-user-example`\n \n     """\n     if username:\n@@ -189,7 +189,7 @@ def remove_user(groupname=None, group=None, username=None, user=None):\n     :raises:\n         ValueError\n         UserNotFoundError\n-    :Example: :ref:`group_remove_user_example`\n+    :Example: :ref:`group-remove-user-example`\n     """\n     if username:\n         user = user_get(username=username)\n@@ -219,7 +219,7 @@ def get_roles(groupname=None, group=None, obj=None, inherit=True):\n     :type inherit: boolean\n     :raises:\n         ValueError\n-    :Example: :ref:`group_get_roles_example`\n+    :Example: :ref:`group-get-roles-example`\n     """\n     group_id = groupname or group.id\n \n@@ -268,7 +268,7 @@ def grant_roles(groupname=None, group=None, roles=None, obj=None):\n     :type obj: content object\n     :raises:\n         ValueError\n-    :Example: :ref:`group_grant_roles_example`\n+    :Example: :ref:`group-grant-roles-example`\n     """\n     if \'Anonymous\' in roles or \'Authenticated\' in roles:\n         raise ValueError\n@@ -315,7 +315,7 @@ def revoke_roles(groupname=None, group=None, roles=None, obj=None):\n     :type obj: content object\n     :raises:\n         ValueError\n-    :Example: :ref:`group_revoke_roles_example`\n+    :Example: :ref:`group-revoke-roles-example`\n     """\n     if \'Anonymous\' in roles or \'Authenticated\' in roles:\n         raise ValueError\ndiff --git a/src/plone/api/portal.py b/src/plone/api/portal.py\nindex 291598d..7b5f188 100644\n--- a/src/plone/api/portal.py\n+++ b/src/plone/api/portal.py\n@@ -59,7 +59,7 @@ def get():\n \n     :returns: Plone portal object\n     :rtype: Portal object\n-    :Example: :ref:`portal_get_example`\n+    :Example: :ref:`portal-get-example`\n     """\n \n     closest_site = getSite()\n@@ -86,7 +86,7 @@ def get_navigation_root(context=None):\n     :type context: context object\n     :returns: Navigation Root\n     :rtype: Portal object\n-    :Example: :ref:`portal_get_navigation_root_example`\n+    :Example: :ref:`portal-get-navigation-root-example`\n     """\n     context = aq_inner(context)\n     return getNavigationRootObject(context, get())\n@@ -102,7 +102,7 @@ def get_tool(name=None):\n     :raises:\n         :class:`~plone.api.exc.MissingParameterError`,\n         :class:`~plone.api.exc.InvalidParameterError`\n-    :Example: :ref:`portal_get_tool_example`\n+    :Example: :ref:`portal-get-tool-example`\n     """\n     try:\n         return getToolByName(get(), name)\n@@ -147,7 +147,7 @@ def send_email(\n     :type body: boolean\n     :raises:\n         ValueError\n-    :Example: :ref:`portal_send_email_example`\n+    :Example: :ref:`portal-send-email-example`\n     """\n     portal = get()\n \n@@ -214,7 +214,7 @@ def get_localized_time(datetime=None, long_format=False, time_only=False):\n     :rtype: string\n     :raises:\n         ValueError\n-    :Example: :ref:`portal_get_localized_time_example`\n+    :Example: :ref:`portal-get-localized-time-example`\n     """\n     tool = get_tool(name=\'translation_service\')\n     request = getRequest()\n@@ -247,7 +247,7 @@ def show_message(message=None, request=None, type=\'info\'):\n     :type type: string\n     :raises:\n         ValueError\n-    :Example: :ref:`portal_show_message_example`\n+    :Example: :ref:`portal-show-message-example`\n     """\n     IStatusMessage(request).add(message, type=type)\n \n@@ -265,7 +265,7 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n     :type default: anything\n     :returns: Registry record value\n     :rtype: plone.app.registry registry record\n-    :Example: :ref:`portal_get_registry_record_example`\n+    :Example: :ref:`portal-get-registry-record-example`\n     """\n     if not isinstance(name, str):\n         raise InvalidParameterError("The \'name\' parameter has to be a string")\n@@ -333,7 +333,7 @@ def set_registry_record(name=None, value=None, interface=None):\n     :param interface: interface whose attributes are plone.app.registry\n         settings\n     :type interface: zope.interface.Interface\n-    :Example: :ref:`portal_set_registry_record_example`\n+    :Example: :ref:`portal-set-registry-record-example`\n     """\n     if not isinstance(name, str):\n         raise InvalidParameterError("The parameter \'name\' has to be a string")\n@@ -381,7 +381,7 @@ def get_default_language():\n \n     :returns: language identifier\n     :rtype: string\n-    :Example: :ref:`portal_get_default_language_example`\n+    :Example: :ref:`portal-get-default-language-example`\n     """\n     from plone.i18n.interfaces import ILanguageSchema\n     registry = getUtility(IRegistry)\n@@ -396,7 +396,7 @@ def get_current_language(context=None):\n     :type context: object\n     :returns: language identifier\n     :rtype: string\n-    :Example: :ref:`portal_get_current_language_example`\n+    :Example: :ref:`portal-get-current-language-example`\n     """\n     request = getRequest()\n     return request.get(\'LANGUAGE\', None) or \\\n@@ -417,7 +417,7 @@ def translate(msgid, domain=\'plone\', lang=None):\n     :type lang: string\n     :returns: translated message\n     :rtype: str\n-    :Example: :ref:`portal_translate_example`\n+    :Example: :ref:`portal-translate-example`\n     """\n     translation_service = get_tool(\'translation_service\')\n     query = {\ndiff --git a/src/plone/api/relation.py b/src/plone/api/relation.py\nindex 8e15de1..2bfd047 100644\n--- a/src/plone/api/relation.py\n+++ b/src/plone/api/relation.py\n@@ -71,7 +71,7 @@ def get(\n     :returns: A list of relations\n     :rtype: List of RelationValue objects\n \n-    :Example: :ref:`relation_get_example`\n+    :Example: :ref:`relation-get-example`\n     """\n     if source is not None and not base_hasattr(source, \'portal_type\'):\n         raise InvalidParameterError(\'{} has no portal_type\'.format(source))\n@@ -142,7 +142,7 @@ def create(source=None, target=None, relationship=None):\n     :type target: Content object\n     :param relationship: [required] Relationship name. If that name is the same as a field name and this field is a RelationChoice / RelationList we will update the field-value accordingly.\n     :type id: string\n-    :Example: :ref:`relation_create_example`\n+    :Example: :ref:`relation-create-example`\n     """  # noqa\n     if source is not None and not base_hasattr(source, \'portal_type\'):\n         raise InvalidParameterError(\'{} has no portal_type\'.format(source))\n@@ -256,7 +256,7 @@ def delete(source=None, target=None, relationship=None):\n         as a field name and this field is a RelationChoice/RelationList we\n         will delete/update the field-value accordingly.\n     :type id: string\n-    :Example: :ref:`relation_delete_example`\n+    :Example: :ref:`relation-delete-example`\n     """\n     if source is not None and not base_hasattr(source, \'portal_type\'):\n         raise InvalidParameterError(\'{} has no portal_type\'.format(source))\ndiff --git a/src/plone/api/user.py b/src/plone/api/user.py\nindex 375d865..0042824 100644\n--- a/src/plone/api/user.py\n+++ b/src/plone/api/user.py\n@@ -44,7 +44,7 @@ def create(\n     :raises:\n         MissingParameterError\n         InvalidParameterError\n-    :Example: :ref:`user_create_example`\n+    :Example: :ref:`user-create-example`\n     """\n     if properties is None:\n         # Never use a dict as default for a keyword argument.\n@@ -108,7 +108,7 @@ def get(userid=None, username=None):\n     :rtype: MemberData object\n     :raises:\n         MissingParameterError\n-    :Example: :ref:`user_get_example`\n+    :Example: :ref:`user-get-example`\n     """\n     if userid is not None:\n         portal_membership = portal.get_tool(\'portal_membership\')\n@@ -126,7 +126,7 @@ def get_current():\n \n     :returns: Currently logged-in user\n     :rtype: MemberData object\n-    :Example: :ref:`user_get_current_example`\n+    :Example: :ref:`user-get-current-example`\n     """\n     portal_membership = portal.get_tool(\'portal_membership\')\n     return portal_membership.getAuthenticatedMember()\n@@ -147,8 +147,8 @@ def get_users(groupname=None, group=None):\n     :type group: GroupData object\n     :returns: All users (optionally filtered by group)\n     :rtype: List of MemberData objects\n-    :Example: :ref:`user_get_all_users_example`,\n-        :ref:`user_get_groups_users_example`\n+    :Example: :ref:`user-get-all-users-example`,\n+        :ref:`user-get-groups-users-example`\n     """\n     if groupname:\n         group_tool = portal.get_tool(\'portal_groups\')\n@@ -179,7 +179,7 @@ def delete(username=None, user=None):\n     :raises:\n         MissingParameterError\n         InvalidParameterError\n-    :Example: :ref:`user_delete_example`\n+    :Example: :ref:`user-delete-example`\n     """\n     portal_membership = portal.get_tool(\'portal_membership\')\n     user_id = username or user.id\n@@ -191,7 +191,7 @@ def is_anonymous():\n \n     :returns: True if the current user is anonymous, False otherwise.\n     :rtype: bool\n-    :Example: :ref:`user_is_anonymous_example`\n+    :Example: :ref:`user-is-anonymous-example`\n     """\n     return bool(portal.get_tool(\'portal_membership\').isAnonymousUser())\n \n@@ -216,7 +216,7 @@ def get_roles(username=None, user=None, obj=None, inherit=True):\n     :type inherit: bool\n     :raises:\n         MissingParameterError\n-    :Example: :ref:`user_get_roles_example`\n+    :Example: :ref:`user-get-roles-example`\n     """\n     portal_membership = portal.get_tool(\'portal_membership\')\n \n@@ -278,7 +278,7 @@ def get_permissions(username=None, user=None, obj=None):\n     :type obj: content object\n     :raises:\n         InvalidParameterError\n-    :Example: :ref:`user_get_permissions_example`\n+    :Example: :ref:`user-get-permissions-example`\n     """\n     if obj is None:\n         obj = portal.get()\n@@ -351,7 +351,7 @@ def grant_roles(username=None, user=None, obj=None, roles=None):\n     :raises:\n         InvalidParameterError\n         MissingParameterError\n-    :Example: :ref:`user_grant_roles_example`\n+    :Example: :ref:`user-grant-roles-example`\n     """\n     if user is None:\n         user = get(username=username)\n@@ -399,7 +399,7 @@ def revoke_roles(username=None, user=None, obj=None, roles=None):\n     :type roles: list of strings\n     :raises:\n         InvalidParameterError\n-    :Example: :ref:`user_revoke_roles_example`\n+    :Example: :ref:`user-revoke-roles-example`\n     """\n     if user is None:\n         user = get(username=username)\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-06T13:51:18+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/1efc86e559f9761a758b71cd53f54673366e4392

Docstring fix multiline

Files changed:
M src/plone/api/relation.py

b'diff --git a/src/plone/api/relation.py b/src/plone/api/relation.py\nindex 2bfd047..e87be49 100644\n--- a/src/plone/api/relation.py\n+++ b/src/plone/api/relation.py\n@@ -140,7 +140,10 @@ def create(source=None, target=None, relationship=None):\n     :type source: Content object\n     :param target: [required] Object that the relation will point to.\n     :type target: Content object\n-    :param relationship: [required] Relationship name. If that name is the same as a field name and this field is a RelationChoice / RelationList we will update the field-value accordingly.\n+    :param relationship: [required] Relationship name.\n+        If that name is the same as a field name and this field\n+        is a RelationChoice / RelationList\n+        we will update the field-value accordingly.\n     :type id: string\n     :Example: :ref:`relation-create-example`\n     """  # noqa\n@@ -252,9 +255,10 @@ def delete(source=None, target=None, relationship=None):\n     :type source: Content object\n     :param target: Object that the relation points to.\n     :type target: Content object\n-    :param relationship: Relationship name. If that name is the same\n-        as a field name and this field is a RelationChoice/RelationList we\n-        will delete/update the field-value accordingly.\n+    :param relationship: Relationship name.\n+        If that name is the same as a field name\n+        and this field is a RelationChoice/RelationList\n+        we will delete/update the field-value accordingly.\n     :type id: string\n     :Example: :ref:`relation-delete-example`\n     """\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-06T13:51:39+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/55046b52a947c50df31526e2374daed5dfe964b1

Fix definitions (glossary style)

Files changed:
M docs/about.md

b"diff --git a/docs/about.md b/docs/about.md\nindex 80824d0..c1b980e 100644\n--- a/docs/about.md\n+++ b/docs/about.md\n@@ -26,14 +26,14 @@ All contributions to `plone.api` should keep these rules in mind.\n \n Two libraries are especially inspiring:\n \n+```{glossary}\n [SQLAlchemy](https://www.sqlalchemy.org/)\n-\n-: Arguably, the reason for SQLAlchemy's success in the developer community lies as much in its feature set as in the fact that its API is very well   designed, is consistent, explicit, and easy to learn.\n+   Arguably, the reason for SQLAlchemy's success in the developer community lies as much in its feature set as in the fact that its API is very well   designed, is consistent, explicit, and easy to learn.\n \n [Requests](https://docs.python-requests.org/en/latest/)\n-\n-: If you look at the documentation for this library, or see [the comparison between the urllib2 way and the requests way](https://gist.github.com/kennethreitz/973705), you can see a parallel for Plone regarding the way we *have been* versus the way we *should be* writing code.\n-  At the very least, we should have the option of being able to write such clean code.\n+   If you look at the documentation for this library, or see [the comparison between the urllib2 way and the requests way](https://gist.github.com/kennethreitz/973705), you can see a parallel for Plone regarding the way we *have been* versus the way we *should be* writing code.\n+   At the very least, we should have the option of being able to write such clean code.\n+```\n \n The API provides grouped functional access to otherwise distributed logic in Plone.\n This distribution is a result of two historical factors: reuse of CMF- and Zope-methods, and reasonable but hard to remember splits like `acl_users` and `portal_memberdata`.\n"

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-06T13:51:54+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/ac9159bdeabf2b7caf16e8754d7bf1245ffe0a53

Fix links.

Files changed:
M docs/contribute/develop.md

b'diff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\nindex 2638f91..c6ef588 100644\n--- a/docs/contribute/develop.md\n+++ b/docs/contribute/develop.md\n@@ -196,14 +196,14 @@ Travis is configured with the `.travis.yml` file located in the root of this pac\n Un-documented code is broken code.\n :::\n \n-For every feature you add to the codebase you should also add documentation for it to `docs/`.\n+For every feature you add to the codebase, you should also add documentation for it to `docs/`.\n \n After adding or modifying documentation, run `tox -e plone6docs` to re-generate your documentation.\n \n-Publicly available documentation on <https://6.dev-docs.plone.org/plone.api/> is automatically generated from these source files, periodically.\n-So when you push changes to master on GitHub you should soon be able to see them published on `api.plone.org`.\n+Publicly available documentation on [6.dev-docs.plone.org/plone.api](https://6.dev-docs.plone.org/plone.api) is automatically generated from these source files, periodically.\n+So when you push changes to master on GitHub you should soon be able to see them published on [6.dev-docs.plone.org/plone.api](https://6.dev-docs.plone.org/plone.api).\n \n-Read the [reStructuredText Primer](https://www.sphinx-doc.org/en/master/usage/restructuredtext/) to brush up on your `reST` skills.\n+Read the [General Guide to Writing Documentation](https://6.dev-docs.plone.org/contributing/writing-docs-guide.html) to brush up on your `MyST` skills.\n \n Example:\n \n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-06T13:52:48+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/5daa2311f4f83178322c122639be95f5336d43f8

Add tox docs-livehtml environment for an aggreable documentation writing.

Files changed:
M tox.ini

b'diff --git a/tox.ini b/tox.ini\nindex 71cca92..4574f5c 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -7,6 +7,7 @@ envlist =\n     coverage-report,\n     plone6docs,\n     docs\n+    docs-livehtml\n     linkcheck\n \n skip_missing_interpreters = False\n@@ -182,15 +183,29 @@ basepython = python\n skip_install = False\n usedevelop = True\n extras =\n-    {[testenv:docs]extras}\n+    {[testenv:plone6docs]extras}\n deps =\n-    {[testenv:docs]deps}\n+    {[testenv:plone6docs]deps}\n commands =\n     python -VV\n     mkdir -p {toxinidir}/_build/plone6docs\n     sphinx-build -b linkcheck -d _build/plone6docs/doctrees docs _build/plone6docs/linkcheck\n \n \n+[testenv:docs-livehtml]\n+basepython = python\n+skip_install = False\n+usedevelop = True\n+extras =\n+    {[testenv:plone6docs]extras}\n+deps =\n+    {[testenv:plone6docs]deps}\n+commands =\n+    python -VV\n+    mkdir -p {toxinidir}/_build/plone6docs\n+    sphinx-autobuild --ignore "*.swp" -b html docs _build/plone6docs/html \n+\n+\n [testenv:towncrier]\n basepython = python\n skip_install = True\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-07T10:33:07+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/3252f66e1eaa3523ebe09ee657feef0b58a9185c

Remove Github-only warning

Files changed:
M docs/about.md
M docs/api/content.md
M docs/api/env.md
M docs/api/exceptions.md
M docs/api/group.md
M docs/api/index.md
M docs/api/portal.md
M docs/api/relation.md
M docs/api/user.md
M docs/content.md
M docs/contribute/develop.md
M docs/contribute/index.md
M docs/contribute/release.md
M docs/env.md
M docs/group.md
M docs/index.md
M docs/portal.md
M docs/relation.md
M docs/user.md

b"diff --git a/docs/about.md b/docs/about.md\nindex c1b980e..fa1141c 100644\n--- a/docs/about.md\n+++ b/docs/about.md\n@@ -1,9 +1,3 @@\n-:::{admonition} GitHub-only\n-WARNING: If you are reading this on GitHub, DON'T!\n-Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/about.html)\n-so you have working references and proper formatting.\n-:::\n-\n # About\n \n ## Inspiration\ndiff --git a/docs/api/content.md b/docs/api/content.md\nindex bccb214..730e6b2 100644\n--- a/docs/api/content.md\n+++ b/docs/api/content.md\n@@ -1,9 +1,3 @@\n-:::{admonition} GitHub-only\n-WARNING: If you are reading this on GitHub, DON'T!\n-Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/api/content.html)\n-so you have working references and proper formatting.\n-:::\n-\n (plone-api-content)=\n \n # plone.api.content\ndiff --git a/docs/api/env.md b/docs/api/env.md\nindex 61e7d36..334f856 100644\n--- a/docs/api/env.md\n+++ b/docs/api/env.md\n@@ -1,9 +1,3 @@\n-:::{admonition} GitHub-only\n-WARNING: If you are reading this on GitHub, DON'T!\n-Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/api/env.html)\n-so you have working references and proper formatting.\n-:::\n-\n (plone-api-env)=\n \n # plone.api.env\ndiff --git a/docs/api/exceptions.md b/docs/api/exceptions.md\nindex 770a5ca..7c10736 100644\n--- a/docs/api/exceptions.md\n+++ b/docs/api/exceptions.md\n@@ -1,9 +1,3 @@\n-:::{admonition} GitHub-only\n-WARNING: If you are reading this on GitHub, DON'T!\n-Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/api/exceptions.html)\n-so you have working references and proper formatting.\n-:::\n-\n (plone-api-errors)=\n \n # plone.api.exc\ndiff --git a/docs/api/group.md b/docs/api/group.md\nindex b896bdb..3e59c6d 100644\n--- a/docs/api/group.md\n+++ b/docs/api/group.md\n@@ -1,9 +1,3 @@\n-:::{admonition} GitHub-only\n-WARNING: If you are reading this on GitHub, DON'T!\n-Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/api/group.html)\n-so you have working references and proper formatting.\n-:::\n-\n (plone-api-group)=\n \n # plone.api.group\ndiff --git a/docs/api/index.md b/docs/api/index.md\nindex 84680a7..a087fc8 100644\n--- a/docs/api/index.md\n+++ b/docs/api/index.md\n@@ -1,9 +1,3 @@\n-:::{admonition} GitHub-only\n-WARNING: If you are reading this on GitHub, DON'T!\n-Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/api/index.html)\n-so you have working references and proper formatting.\n-:::\n-\n ```{eval-rst}\n .. currentmodule:: plone\n ```\ndiff --git a/docs/api/portal.md b/docs/api/portal.md\nindex c6b50d5..cf0c35d 100644\n--- a/docs/api/portal.md\n+++ b/docs/api/portal.md\n@@ -1,9 +1,3 @@\n-:::{admonition} GitHub-only\n-WARNING: If you are reading this on GitHub, DON'T!\n-Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/api/portal.html)\n-so you have working references and proper formatting.\n-:::\n-\n (plone-api-portal)=\n \n # plone.api.portal\ndiff --git a/docs/api/relation.md b/docs/api/relation.md\nindex 95e6a7c..abce712 100644\n--- a/docs/api/relation.md\n+++ b/docs/api/relation.md\n@@ -1,9 +1,3 @@\n-:::{admonition} GitHub-only\n-WARNING: If you are reading this on GitHub, DON'T!\n-Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/api/relation.html)\n-so you have working references and proper formatting.\n-:::\n-\n (plone-api-relation)=\n \n # plone.api.relation\ndiff --git a/docs/api/user.md b/docs/api/user.md\nindex 27f8746..ec14613 100644\n--- a/docs/api/user.md\n+++ b/docs/api/user.md\n@@ -1,9 +1,3 @@\n-:::{admonition} GitHub-only\n-WARNING: If you are reading this on GitHub, DON'T!\n-Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/api/user.html)\n-so you have working references and proper formatting.\n-:::\n-\n (plone-api-user)=\n \n # plone.api.user\ndiff --git a/docs/content.md b/docs/content.md\nindex cdf4b2d..d5f04dc 100644\n--- a/docs/content.md\n+++ b/docs/content.md\n@@ -1,9 +1,3 @@\n-:::{admonition} GitHub-only\n-WARNING: If you are reading this on GitHub, DON'T!\n-Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/content.html)\n-so you have working references and proper formatting.\n-:::\n-\n ```{eval-rst}\n .. module:: plone\n ```\ndiff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\nindex c6ef588..5420b62 100644\n--- a/docs/contribute/develop.md\n+++ b/docs/contribute/develop.md\n@@ -1,9 +1,3 @@\n-:::{admonition} GitHub-only\n-WARNING: If you are reading this on GitHub, DON'T!\n-Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/contribute/develop.html)\n-so you have working references and proper formatting.\n-:::\n-\n # Development environment\n \n This section is meant for contributors to the `plone.api` project.\ndiff --git a/docs/contribute/index.md b/docs/contribute/index.md\nindex 63d3ed0..f99207a 100644\n--- a/docs/contribute/index.md\n+++ b/docs/contribute/index.md\n@@ -1,9 +1,3 @@\n-:::{admonition} GitHub-only\n-WARNING: If you are reading this on GitHub, DON'T!\n-Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/contribute/index.html)\n-so you have working references and proper formatting.\n-:::\n-\n # How to contribute to this package?\n \n ## Conventions\ndiff --git a/docs/contribute/release.md b/docs/contribute/release.md\nindex eff11db..34206c3 100644\n--- a/docs/contribute/release.md\n+++ b/docs/contribute/release.md\n@@ -1,9 +1,3 @@\n-:::{admonition} GitHub-only\n-WARNING: If you are reading this on GitHub, DON'T!\n-Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/contribute/release.html)\n-so you have working references and proper formatting.\n-:::\n-\n (releasing-a-new-version)=\n \n # Releasing a new version\ndiff --git a/docs/env.md b/docs/env.md\nindex a07542a..5c99a5a 100644\n--- a/docs/env.md\n+++ b/docs/env.md\n@@ -1,9 +1,3 @@\n-:::{admonition} GitHub-only\n-WARNING: If you are reading this on GitHub, DON'T!\n-Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/env.html)\n-so you have working references and proper formatting.\n-:::\n-\n ```{eval-rst}\n .. module:: plone\n ```\ndiff --git a/docs/group.md b/docs/group.md\nindex 3b5e88b..00c093d 100644\n--- a/docs/group.md\n+++ b/docs/group.md\n@@ -1,9 +1,3 @@\n-:::{admonition} GitHub-only\n-WARNING: If you are reading this on GitHub, DON'T!\n-Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/group.html)\n-so you have working references and proper formatting.\n-:::\n-\n ```{eval-rst}\n .. module:: plone\n ```\ndiff --git a/docs/index.md b/docs/index.md\nindex 28aa794..e7b89fc 100644\n--- a/docs/index.md\n+++ b/docs/index.md\n@@ -1,9 +1,3 @@\n-:::{admonition} GitHub-only\n-WARNING: If you are reading this on GitHub, DON'T!\n-Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/index.html)\n-so you have working references and proper formatting.\n-:::\n-\n # A Plone API\n \n > The `plone.api` is an elegant and simple API, built for humans wishing to develop with Plone.\ndiff --git a/docs/portal.md b/docs/portal.md\nindex d5c9e48..04bb1f6 100644\n--- a/docs/portal.md\n+++ b/docs/portal.md\n@@ -1,9 +1,3 @@\n-:::{admonition} GitHub-only\n-WARNING: If you are reading this on GitHub, DON'T!\n-Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/portal.html)\n-so you have working references and proper formatting.\n-:::\n-\n ```{eval-rst}\n .. module:: plone\n ```\ndiff --git a/docs/relation.md b/docs/relation.md\nindex 63fd052..7dbf077 100644\n--- a/docs/relation.md\n+++ b/docs/relation.md\n@@ -1,9 +1,3 @@\n-:::{admonition} GitHub-only\n-WARNING: If you are reading this on GitHub, DON'T!\n-Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/env.html)\n-so you have working references and proper formatting.\n-:::\n-\n ```{eval-rst}\n .. module:: plone\n ```\ndiff --git a/docs/user.md b/docs/user.md\nindex 8144621..e9d9769 100644\n--- a/docs/user.md\n+++ b/docs/user.md\n@@ -1,9 +1,3 @@\n-:::{admonition} GitHub-only\n-WARNING: If you are reading this on GitHub, DON'T!\n-Read the documentation at [docs.plone.org](https://docs.plone.org/develop/plone.api/docs/user.html)\n-so you have working references and proper formatting.\n-:::\n-\n ```{eval-rst}\n .. module:: plone\n ```\n"

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-07T10:33:31+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/96e11c0550d092d5022e0f6402251aaf764d7176

Update fix-converted-myst.py: Remove Github-only warning

Files changed:
M fix-converted-myst.py

b'diff --git a/fix-converted-myst.py b/fix-converted-myst.py\nindex 01f53e9..6062a20 100644\n--- a/fix-converted-myst.py\n+++ b/fix-converted-myst.py\n@@ -32,7 +32,7 @@ def _replace(mobj):\n \n def remove_github_warning(data):\n     """Remove \'GitHub-only\' warning"""\n-    regex_github_warning = r\':::{admonition}([\\S\\s]*?):::\'\n+    regex_github_warning = r\':::{admonition} GitHub-only([\\S\\s]*?):::\\n\\n\'\n     data = re.sub(regex_github_warning, \'\', data, flags=re.DOTALL)\n     return data\n \n@@ -44,9 +44,10 @@ def remove_github_warning(data):\n             with open(filename, \'r+\') as f:\n                 data = f.read()\n                 data = replace_label_underscore(data)\n-                # data = remove_github_warning(data)\n+                data = remove_github_warning(data)\n                 f.seek(0)\n                 f.write(data)\n+                f.truncate()\n                 count_files["modified"] += 1\n                 logger.info(f"{filename} modified.")\n \n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-07T11:48:04+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/7f07f4f870ade31a297e409c0adbb7b2b26219ff

Fix internal links.

and backticks for Steve.

Files changed:
M docs/about.md
M docs/contribute/develop.md
M docs/contribute/release.md
M docs/index.md
M src/plone/api/relation.py

b'diff --git a/docs/about.md b/docs/about.md\nindex fa1141c..b086cc2 100644\n--- a/docs/about.md\n+++ b/docs/about.md\n@@ -34,12 +34,12 @@ This distribution is a result of two historical factors: reuse of CMF- and Zope-\n Methods defined in `plone.api` implement best-practice access to the original distributed APIs.\n These methods also provide clear documentation of how best to access Plone APIs directly.\n \n-:::{note}\n+```{note}\n If you doubt those last sentences:\n We had five different ways to get the portal root with different edge-cases.\n We had three different ways to move an object.\n With this in mind, it\'s obvious that even the simplest Plone tasks can\'t be documented in a sane way.\n-:::\n+```\n \n We do not intend to cover all possible use-cases, only the most common.\n We will cover the 20% of possible tasks on which we spend 80% of our time.\n@@ -52,11 +52,12 @@ We try to document sensible use cases even when we don\'t provide APIs for them,\n \n API methods are grouped according to what they affect.\n For example:\n-{ref}`chapter_portal`,\n-{ref}`chapter_content`,\n-{ref}`chapter_users`,\n-{ref}`chapter_env` and\n-{ref}`chapter_groups`.\n+{ref}`chapter-portal`,\n+{ref}`chapter-content`,\n+{ref}`chapter-users`,\n+{ref}`chapter-groups`,\n+{ref}`chapter-relation` and\n+{ref}`chapter-env`.\n In general, importing and using an API looks something like this:\n \n % invisible-code-block: python\ndiff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\nindex 5420b62..06cd474 100644\n--- a/docs/contribute/develop.md\n+++ b/docs/contribute/develop.md\n@@ -3,7 +3,7 @@\n This section is meant for contributors to the `plone.api` project.\n Its purpose is to guide them through the steps needed to start contributing.\n \n-% note ::: This HowTo is written for Linux and OS X users.\n+% note ``` This HowTo is written for Linux and OS X users.\n % If you\'re are running Windows we suggest using VMWare or a similar Virtualization tool to install Ubuntu Linux on a virtual machine or installing Ubuntu Linux as a secondary OS on your machine.\n % Alternatively, you can browse Plone\'s documentation on how to get Plone development environment up and running on Windows.\n % Plone does run on Windows but it\'s not completely trivial to set it up.\n@@ -35,10 +35,10 @@ First let\'s look at \'system\' libraries and applications that are normally instal\n \n - tox automation - tox aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing and release process of Python software. Install with `pip install tox`.\n \n-:::{note}\n+```{note}\n Again, OS X users should use <https://github.com/collective/buildout.python>,\n it will make your life much easier to have a cleanly compiled Python instead of using the system one that is broken in many deeply confusing ways.\n-:::\n+```\n \n ### Further information\n \n@@ -124,7 +124,7 @@ Click on one that catches your attention.\n If the issue description says `No one is assigned` it means no-one is already working on it and you can claim it as your own.\n Click on the button next to the text and make yourself the one assigned for this issue.\n \n-Based on our {ref}`git_workflow` all new features must be developed in separate git branches.\n+Based on our {ref}`git-workflow` all new features must be developed in separate git branches.\n So if you are not doing a very trivial fix, but rather adding new features/enhancements, you should create a *feature branch*.\n This way your work is kept in an isolated place where you can receive feedback on it, improve it, etc.\n Once we are happy with your implementation, your branch gets merged into *master* at which point everyone else starts using your code.\n@@ -172,11 +172,11 @@ This command also re-generates your documentation.\n $ make\n ```\n \n-:::{note}\n+```{note}\n It pays off to invest a little time to make your editor run `pep8` and `pyflakes` on a file every time you save that file\n (or use `flake8` which combines both).\n This saves you lots of time in the long run.\n-:::\n+```\n \n ## Travis Continuous Integration\n \n@@ -186,9 +186,9 @@ Travis is configured with the `.travis.yml` file located in the root of this pac\n \n ## Sphinx Documentation\n \n-:::{note}\n+```{note}\n Un-documented code is broken code.\n-:::\n+```\n \n For every feature you add to the codebase, you should also add documentation for it to `docs/`.\n \ndiff --git a/docs/contribute/release.md b/docs/contribute/release.md\nindex 34206c3..208c77c 100644\n--- a/docs/contribute/release.md\n+++ b/docs/contribute/release.md\n@@ -67,7 +67,7 @@ Server response (200): OK\n done\n ```\n \n-:::{note}\n+```{note}\n Please ignore the sdist warning about README file above.\n PyPI does not depend on it and it\'s just a bug in setupools (reported and waiting to be fixed).\n-:::\n+```\ndiff --git a/docs/index.md b/docs/index.md\nindex e7b89fc..81b80d1 100644\n--- a/docs/index.md\n+++ b/docs/index.md\n@@ -17,11 +17,11 @@ For example, using the portal catalog (see \'Find content objects\').\n The intention is to cover 20% of the tasks any Plone developer does 80% of the time.\n By keeping everything in one place, the API stays introspectable and discoverable, important aspects of being Pythonic.\n \n-:::{note}\n+```{note}\n This package is stable and used in production, but from time to time changes will be made to the API.\n Additional API methods may be introduced in minor versions (1.1 -> 1.2).\n Backward-incompatible changes to the API will be restricted to major versions (1.x -> 2.x).\n-:::\n+```\n \n ## Narrative documentation\n \ndiff --git a/src/plone/api/relation.py b/src/plone/api/relation.py\nindex e87be49..1de0f4c 100644\n--- a/src/plone/api/relation.py\n+++ b/src/plone/api/relation.py\n@@ -146,7 +146,7 @@ def create(source=None, target=None, relationship=None):\n         we will update the field-value accordingly.\n     :type id: string\n     :Example: :ref:`relation-create-example`\n-    """  # noqa\n+    """\n     if source is not None and not base_hasattr(source, \'portal_type\'):\n         raise InvalidParameterError(\'{} has no portal_type\'.format(source))\n \n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-07T12:04:51+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/e3994a98c1d79a99c7fb95aeef186a21e017defd

Add 'deflist' to myst_enable_extensions and revert definition list in about.md

Files changed:
M docs/about.md
M docs/conf.py

b'diff --git a/docs/about.md b/docs/about.md\nindex b086cc2..2aa4b06 100644\n--- a/docs/about.md\n+++ b/docs/about.md\n@@ -20,14 +20,12 @@ All contributions to `plone.api` should keep these rules in mind.\n \n Two libraries are especially inspiring:\n \n-```{glossary}\n [SQLAlchemy](https://www.sqlalchemy.org/)\n-   Arguably, the reason for SQLAlchemy\'s success in the developer community lies as much in its feature set as in the fact that its API is very well   designed, is consistent, explicit, and easy to learn.\n+: Arguably, the reason for SQLAlchemy\'s success in the developer community lies as much in its feature set as in the fact that its API is very well designed, is consistent, explicit, and easy to learn.\n \n [Requests](https://docs.python-requests.org/en/latest/)\n-   If you look at the documentation for this library, or see [the comparison between the urllib2 way and the requests way](https://gist.github.com/kennethreitz/973705), you can see a parallel for Plone regarding the way we *have been* versus the way we *should be* writing code.\n-   At the very least, we should have the option of being able to write such clean code.\n-```\n+: If you look at the documentation for this library, or see [the comparison between the urllib2 way and the requests way](https://gist.github.com/kennethreitz/973705), you can see a parallel for Plone regarding the way we *have been* versus the way we *should be* writing code.\n+At the very least, we should have the option of being able to write such clean code.\n \n The API provides grouped functional access to otherwise distributed logic in Plone.\n This distribution is a result of two historical factors: reuse of CMF- and Zope-methods, and reasonable but hard to remember splits like `acl_users` and `portal_memberdata`.\ndiff --git a/docs/conf.py b/docs/conf.py\nindex 8b874cf..e0382f1 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -66,7 +66,8 @@ def __getattr__(cls, name):\n # -- Options for myST markdown conversion to html -----------------------------\n \n myst_enable_extensions = [\n-    "colon_fence"\n+    "colon_fence",\n+    "deflist",\n ]\n \n \n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-07T16:28:54+02:00
Author: ksuess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/0f0928c45e2fda1171ea8adda11b40568402babd

Fix warning 'duplicate object description' caused by '.. module:: plone'

.. module:: plone
instead of
.. module:: plone.api.user
is necessary to have
"To copy a content object, use the api.content.copy() method."
instead of
"To copy a content object, use the copy() method."

Files changed:
M docs/env.md
M docs/group.md
M docs/portal.md
M docs/relation.md
M docs/user.md

b'diff --git a/docs/env.md b/docs/env.md\nindex 5c99a5a..2c08782 100644\n--- a/docs/env.md\n+++ b/docs/env.md\n@@ -1,5 +1,6 @@\n ```{eval-rst}\n .. module:: plone\n+    :noindex:\n ```\n \n (chapter-env)=\ndiff --git a/docs/group.md b/docs/group.md\nindex 00c093d..24a5445 100644\n--- a/docs/group.md\n+++ b/docs/group.md\n@@ -1,5 +1,6 @@\n ```{eval-rst}\n .. module:: plone\n+    :noindex:\n ```\n \n (chapter-groups)=\ndiff --git a/docs/portal.md b/docs/portal.md\nindex 04bb1f6..33138c1 100644\n--- a/docs/portal.md\n+++ b/docs/portal.md\n@@ -1,5 +1,6 @@\n ```{eval-rst}\n .. module:: plone\n+    :noindex:\n ```\n \n (chapter-portal)=\ndiff --git a/docs/relation.md b/docs/relation.md\nindex 7dbf077..465e1c6 100644\n--- a/docs/relation.md\n+++ b/docs/relation.md\n@@ -1,5 +1,6 @@\n ```{eval-rst}\n .. module:: plone\n+    :noindex:\n ```\n \n (chapter-relation)=\ndiff --git a/docs/user.md b/docs/user.md\nindex e9d9769..6cb60ff 100644\n--- a/docs/user.md\n+++ b/docs/user.md\n@@ -1,5 +1,6 @@\n ```{eval-rst}\n .. module:: plone\n+    :noindex:\n ```\n \n (chapter-users)=\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2022-04-07T18:59:15+02:00
Author: Katja Süss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.api/commit/85ffebcb729b4a261812677bf7c26cee7beeee99

Merge pull request #469 from plone/integration-in-plone-docs-6

Integration of plone.api documentation in Plone 6 documentation

Files changed:
A Makefile
A docs/about.md
A docs/api/content.md
A docs/api/env.md
A docs/api/exceptions.md
A docs/api/group.md
A docs/api/index.md
A docs/api/portal.md
A docs/api/relation.md
A docs/api/user.md
A docs/content.md
A docs/contribute/develop.md
A docs/contribute/index.md
A docs/contribute/release.md
A docs/env.md
A docs/group.md
A docs/index.md
A docs/portal.md
A docs/relation.md
A docs/user.md
A fix-converted-myst.py
A netlify.toml
A requirements-docs.txt
M .gitignore
M CHANGES.rst
M CONTRIBUTING.rst
M README.rst
M docs/conf.py
M src/plone/api/content.py
M src/plone/api/env.py
M src/plone/api/group.py
M src/plone/api/portal.py
M src/plone/api/relation.py
M src/plone/api/user.py
M tox.ini
D docs/about.rst
D docs/api/content.rst
D docs/api/env.rst
D docs/api/exceptions.rst
D docs/api/group.rst
D docs/api/index.rst
D docs/api/portal.rst
D docs/api/relation.rst
D docs/api/user.rst
D docs/content.rst
D docs/contribute/conventions.rst
D docs/contribute/develop.rst
D docs/contribute/index.rst
D docs/contribute/release.rst
D docs/env.rst
D docs/group.rst
D docs/index.rst
D docs/portal.rst
D docs/relation.rst
D docs/user.rst

b'diff --git a/.gitignore b/.gitignore\nindex a2f78d5..6cb56eb 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -25,3 +25,4 @@\n /pip-selfcheck.json\n /_build/\n /.tox/\n+pyvenv.cfg\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 2411f7c..9ecff64 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -11,6 +11,13 @@ Changelog\n 2.0.0a2 (2021-10-13)\n --------------------\n \n+New features:\n+\n+\n+- Preview of documentation per pull request. Netlify bot adds link in PR comments. [ksuess]\n+- Integration in new Plone 6 documentation [ksuess]\n+- Documentation is written in MyST markdown. Was restructuredText. [ksuess]\n+\n Bug fixes:\n \n \n@@ -384,8 +391,8 @@ Fixes:\n   [thet]\n \n - Remove the Plone APIs conventions. They are moved to\n-  http://docs.plone.org/develop/styleguide\n-  and http://docs.plone.org/develop/coredev/docs/git.html\n+  https://docs.plone.org/develop/styleguide\n+  and https://docs.plone.org/develop/coredev/docs/git.html\n   [thet]\n \n - Cleanup code to match Plone\'s style guide.\ndiff --git a/CONTRIBUTING.rst b/CONTRIBUTING.rst\nindex fc637ac..0b05938 100644\n--- a/CONTRIBUTING.rst\n+++ b/CONTRIBUTING.rst\n@@ -1 +1 @@\n-Please see http://docs.plone.org/develop/coredev/docs/guidelines.html\n+Please see https://docs.plone.org/develop/coredev/docs/guidelines.html\ndiff --git a/Makefile b/Makefile\nnew file mode 100644\nindex 0000000..5eaf407\n--- /dev/null\n+++ b/Makefile\n@@ -0,0 +1,53 @@\n+SHELL := /bin/bash\n+CURRENT_DIR:=$(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))\n+\n+version = 3\n+\n+# We like colors\n+# From: https://coderwall.com/p/izxssa/colored-makefile-for-golang-projects\n+RED=`tput setaf 1`\n+GREEN=`tput setaf 2`\n+RESET=`tput sgr0`\n+YELLOW=`tput setaf 3`\n+\n+\n+# all: .installed.cfg\n+\n+# Add the following \'help\' target to your Makefile\n+# And add help text after each target name starting with \'\\#\\#\'\n+.PHONY: help\n+help: ## This help message\n+\t@grep -E \'^[a-zA-Z_-]+:.*?## .*$$\' $(MAKEFILE_LIST) | sort | awk \'BEGIN {FS = ":.*?## "}; {printf "\\033[36m%-30s\\033[0m %s\\n", $$1, $$2}\'\n+\n+\n+\n+bin/python bin/pip:\n+\tpython$(version) -m venv . || virtualenv --python=python$(version) .\n+\tbin/python -m pip install --upgrade pip\n+\n+\n+# Documentation\n+# ----------------------------------------------------------------------\n+\n+.PHONY: docs-html\n+docs-html: bin/python bin/pip ## Build documentation\n+\tbin/pip install tox\n+\tbin/tox -e plone6docs\n+\t@echo\n+\t@echo "Build of documentation finished. The HTML pages are in _build/plone6docs/html."\n+\n+.PHONY: netlify\n+netlify: bin/python bin/pip ## Run documentatin build (Netlfy style)\n+\tbin/pip install tox\n+\tbin/tox -e plone6docs\n+\t@echo\n+\t@echo "Build of documentation finished. The HTML pages are in _build/plone6docs/html."\n+\n+## Run conversion of documentation from restructuredText to myST\n+.PHONY: conversion-to-myst\n+conversion-to-myst: bin/python bin/pip\n+\tbin/pip install "rst-to-myst[sphinx]"\n+\t-bin/rst2myst convert -R docs/*.rst\n+\t-bin/rst2myst convert -R docs/**/*.rst\n+\tpython fix-converted-myst.py\n+\tmake netlify\ndiff --git a/README.rst b/README.rst\nindex 16c0742..79f52bb 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -32,25 +32,25 @@ Source Code and Contribution\n ============================\n \n .. image:: https://api.travis-ci.org/plone/plone.api.svg\n-    :target: http://travis-ci.org/#!/plone/plone.api\n+    :target: https://travis-ci.org/#!/plone/plone.api\n \n .. image:: https://coveralls.io/repos/github/plone/plone.api/badge.svg?branch=master\n     :alt: Coverage\n     :target: https://coveralls.io/github/plone/plone.api?branch=master\n \n Contributors\n-    Please read the document `Process for Plone core\'s development <http://docs.plone.org/develop/coredev/docs/index.html>`_.\n-    Also consult the section about contribution in the `plone.api contributors documentation <http://docs.plone.org/develop/plone.api/docs/contribute/index.html>`_.\n+    Please read the document `Process for Plone core\'s development <https://docs.plone.org/develop/coredev/docs/index.html>`_.\n+    Also consult the section about contribution in the `plone.api contributors documentation <https://docs.plone.org/develop/plone.api/docs/contribute/index.html>`_.\n \n Source Code\n     at the `Plone code repository hosted at GitHub <https://github.com/plone/plone.api>`_.\n \n Issues\n-    Please use the `issue tracker <http://github.com/plone/plone.api/issues>`_\n+    Please use the `issue tracker <https://github.com/plone/plone.api/issues>`_\n \n Continuous Integration\n-    runs on `Travis CI <http://travis-ci.org/plone/plone.api>`_.\n+    runs on `Travis CI <https://travis-ci.org/plone/plone.api>`_.\n \n Code Coverage\n-    is measured at `Coveralls.io <http://coveralls.io/r/plone/plone.api>`_.\n+    is measured at `Coveralls.io <https://coveralls.io/github/plone/plone.api>`_.\n \ndiff --git a/docs/about.md b/docs/about.md\nnew file mode 100644\nindex 0000000..2aa4b06\n--- /dev/null\n+++ b/docs/about.md\n@@ -0,0 +1,140 @@\n+# About\n+\n+## Inspiration\n+\n+We want `plone.api` to be developed with [PEP 20](https://peps.python.org/pep-0020/) idioms in mind, in particular:\n+\n+> Explicit is better than implicit.\n+>\n+> Readability counts.\n+>\n+> There should be one-- and preferably only one --obvious way to do it.\n+>\n+> Now is better than never.\n+>\n+> If the implementation is hard to explain, it\'s a bad idea.\n+>\n+> If the implementation is easy to explain, it may be a good idea.\n+\n+All contributions to `plone.api` should keep these rules in mind.\n+\n+Two libraries are especially inspiring:\n+\n+[SQLAlchemy](https://www.sqlalchemy.org/)\n+: Arguably, the reason for SQLAlchemy\'s success in the developer community lies as much in its feature set as in the fact that its API is very well designed, is consistent, explicit, and easy to learn.\n+\n+[Requests](https://docs.python-requests.org/en/latest/)\n+: If you look at the documentation for this library, or see [the comparison between the urllib2 way and the requests way](https://gist.github.com/kennethreitz/973705), you can see a parallel for Plone regarding the way we *have been* versus the way we *should be* writing code.\n+At the very least, we should have the option of being able to write such clean code.\n+\n+The API provides grouped functional access to otherwise distributed logic in Plone.\n+This distribution is a result of two historical factors: reuse of CMF- and Zope-methods, and reasonable but hard to remember splits like `acl_users` and `portal_memberdata`.\n+Methods defined in `plone.api` implement best-practice access to the original distributed APIs.\n+These methods also provide clear documentation of how best to access Plone APIs directly.\n+\n+```{note}\n+If you doubt those last sentences:\n+We had five different ways to get the portal root with different edge-cases.\n+We had three different ways to move an object.\n+With this in mind, it\'s obvious that even the simplest Plone tasks can\'t be documented in a sane way.\n+```\n+\n+We do not intend to cover all possible use-cases, only the most common.\n+We will cover the 20% of possible tasks on which we spend 80% of our time.\n+If you need to do something that `plone.api` does not support, use the underlying APIs directly.\n+We try to document sensible use cases even when we don\'t provide APIs for them, though.\n+\n+## Design decisions\n+\n+### Import and usage style\n+\n+API methods are grouped according to what they affect.\n+For example:\n+{ref}`chapter-portal`,\n+{ref}`chapter-content`,\n+{ref}`chapter-users`,\n+{ref}`chapter-groups`,\n+{ref}`chapter-relation` and\n+{ref}`chapter-env`.\n+In general, importing and using an API looks something like this:\n+\n+% invisible-code-block: python\n+%\n+% from plone import api\n+% from plone.api.exc import InvalidParameterError\n+% try:\n+%     api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n+% except InvalidParameterError:\n+%     portal = api.portal.get()\n+%     portal.portal_properties.site_properties.use_email_as_login = True\n+\n+```python\n+from plone import api\n+\n+portal = api.portal.get()\n+catalog = api.portal.get_tool(name="portal_catalog")\n+user = api.user.create(email=\'alice@plone.org\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(portal.__class__.__name__, \'PloneSite\')\n+% self.assertEqual(catalog.__class__.__name__, \'CatalogTool\')\n+% self.assertEqual(user.__class__.__name__, \'MemberData\')\n+\n+Always import the top-level package\n+(`from plone import api`)\n+and then use the group namespace to access the method you want\n+(`portal = api.portal.get()`).\n+\n+All example code should adhere to this style, to encourage one and only one preferred way of consuming API methods.\n+\n+### Prefer keyword arguments\n+\n+We prefer using keyword arguments to positional arguments.\n+Example code in `plone.api` will use this style, and we recommend users follow this convention.\n+For the curious, here are the reasons why:\n+\n+1. There will never be any doubt when writing a method whether an argument should be positional or not.\n+   Decision already made.\n+2. There will never be any doubt when using the API on which argument comes first, or which ones are named/positional.\n+   All arguments are named.\n+3. When using positional arguments, the method signature is dictated by the underlying implementation\n+   (think required vs. optional arguments).\n+   Named arguments are always optional in Python.\n+   Using keywords allows implementation details to change while the signature is preserved.\n+   In other words, the underlying API code can change substantially but code using it will remain valid.\n+4. The arguments can all be passed as a dictionary.\n+\n+```python\n+# GOOD\n+from plone import api\n+alice = api.user.get(username=\'alice@plone.org\')\n+\n+# BAD\n+from plone.api import user\n+alice = user.get(\'alice@plone.org\')\n+```\n+\n+## FAQ\n+\n+### Why aren\'t we using wrappers?\n+\n+We could wrap an object (like a user) with an API to make it more usable right now.\n+That would be an alternative to the convenience methods.\n+\n+Unfortunately a wrapper is not the same as the object it wraps, and answering the inevitable questions about this difference would be confusing. Moreover, functionality provided by {mod}`zope.interface` such as annotations would need to be proxied.\n+This would be extremely difficult, if not impossible.\n+\n+It is also important that developers be able to ensure that their tests continue to work even if wrappers were to be deprecated.\n+Consider the failure lurking behind test code such as this:\n+\n+```\n+if users[\'bob\'].__class__.__name__ == \'WrappedMemberDataObject\':\n+    # do something\n+```\n+\n+### Why `delete` instead of `remove`?\n+\n+- The underlying code uses method names similar to *delete* rather than to *remove*.\n+- The `CRUD` verb is *delete*, not *remove*.\ndiff --git a/docs/about.rst b/docs/about.rst\ndeleted file mode 100644\nindex 2adfa87..0000000\n--- a/docs/about.rst\n+++ /dev/null\n@@ -1,151 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/about.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-=====\n-About\n-=====\n-\n-Inspiration\n-===========\n-\n-We want `plone.api` to be developed with `PEP 20 <http://www.python.org/dev/peps/pep-0020/>`_ idioms in mind, in particular:\n-\n-  | Explicit is better than implicit.\n-  | Readability counts.\n-  | There should be one-- and preferably only one --obvious way to do it.\n-  | Now is better than never.\n-  | If the implementation is hard to explain, it\'s a bad idea.\n-  | If the implementation is easy to explain, it may be a good idea.\n-\n-All contributions to `plone.api` should keep these rules in mind.\n-\n-Two libraries are especially inspiring:\n-\n-`SQLAlchemy <http://www.sqlalchemy.org/>`_\n-  Arguably, the reason for SQLAlchemy\'s success in the developer community lies as much in its feature set as in the fact that its API is very well   designed, is consistent, explicit, and easy to learn.\n-\n-`Requests <http://docs.python-requests.org>`_\n-  If you look at the documentation for this library, or see `the comparison between the urllib2 way and the requests way <https://gist.github.com/973705>`_, you can see a parallel for Plone regarding the way we *have been* versus the way we *should be* writing code.\n-  At the very least, we should have the option of being able to write such clean code.\n-\n-The API provides grouped functional access to otherwise distributed logic in Plone.\n-This distribution is a result of two historical factors: reuse of CMF- and Zope-methods, and reasonable but hard to remember splits like `acl_users` and `portal_memberdata`.\n-Methods defined in `plone.api` implement best-practice access to the original distributed APIs.\n-These methods also provide clear documentation of how best to access Plone APIs directly.\n-\n-.. note::\n-   If you doubt those last sentences:\n-   We had five different ways to get the portal root with different edge-cases.\n-   We had three different ways to move an object.\n-   With this in mind, it\'s obvious that even the simplest Plone tasks can\'t be documented in a sane way.\n-\n-We do not intend to cover all possible use-cases, only the most common.\n-We will cover the 20% of possible tasks on which we spend 80% of our time.\n-If you need to do something that `plone.api` does not support, use the underlying APIs directly.\n-We try to document sensible use cases even when we don\'t provide APIs for them, though.\n-\n-Design decisions\n-================\n-\n-Import and usage style\n-----------------------\n-\n-API methods are grouped according to what they affect.\n-For example:\n-:ref:`chapter_portal`,\n-:ref:`chapter_content`,\n-:ref:`chapter_users`,\n-:ref:`chapter_env` and\n-:ref:`chapter_groups`.\n-In general, importing and using an API looks something like this:\n-\n-.. invisible-code-block: python\n-\n-    from plone import api\n-    from plone.api.exc import InvalidParameterError\n-    try:\n-        api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n-    except InvalidParameterError:\n-        portal = api.portal.get()\n-        portal.portal_properties.site_properties.use_email_as_login = True\n-\n-.. code-block:: python\n-\n-    from plone import api\n-\n-    portal = api.portal.get()\n-    catalog = api.portal.get_tool(name="portal_catalog")\n-    user = api.user.create(email=\'alice@plone.org\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(portal.__class__.__name__, \'PloneSite\')\n-    self.assertEqual(catalog.__class__.__name__, \'CatalogTool\')\n-    self.assertEqual(user.__class__.__name__, \'MemberData\')\n-\n-Always import the top-level package\n-(``from plone import api``)\n-and then use the group namespace to access the method you want\n-(``portal = api.portal.get()``).\n-\n-All example code should adhere to this style, to encourage one and only one preferred way of consuming API methods.\n-\n-\n-Prefer keyword arguments\n-------------------------\n-\n-We prefer using keyword arguments to positional arguments.\n-Example code in `plone.api` will use this style, and we recommend users follow this convention.\n-For the curious, here are the reasons why:\n-\n-#. There will never be any doubt when writing a method whether an argument should be positional or not.\n-   Decision already made.\n-#. There will never be any doubt when using the API on which argument comes first, or which ones are named/positional.\n-   All arguments are named.\n-#. When using positional arguments, the method signature is dictated by the underlying implementation\n-   (think required vs. optional arguments).\n-   Named arguments are always optional in Python.\n-   Using keywords allows implementation details to change while the signature is preserved.\n-   In other words, the underlying API code can change substantially but code using it will remain valid.\n-#. The arguments can all be passed as a dictionary.\n-\n-\n-.. code-block:: python\n-\n-    # GOOD\n-    from plone import api\n-    alice = api.user.get(username=\'alice@plone.org\')\n-\n-    # BAD\n-    from plone.api import user\n-    alice = user.get(\'alice@plone.org\')\n-\n-\n-FAQ\n-===\n-\n-Why aren\'t we using wrappers?\n------------------------------\n-\n-We could wrap an object (like a user) with an API to make it more usable right now.\n-That would be an alternative to the convenience methods.\n-\n-Unfortunately a wrapper is not the same as the object it wraps, and answering the inevitable questions about this difference would be confusing. Moreover, functionality provided by :mod:`zope.interface` such as annotations would need to be proxied.\n-This would be extremely difficult, if not impossible.\n-\n-It is also important that developers be able to ensure that their tests continue to work even if wrappers were to be deprecated.\n-Consider the failure lurking behind test code such as this::\n-\n-    if users[\'bob\'].__class__.__name__ == \'WrappedMemberDataObject\':\n-        # do something\n-\n-\n-Why ``delete`` instead of ``remove``?\n--------------------------------------\n-\n-* The underlying code uses method names similar to *delete* rather than to *remove*.\n-* The ``CRUD`` verb is *delete*, not *remove*.\ndiff --git a/docs/api/content.md b/docs/api/content.md\nnew file mode 100644\nindex 0000000..730e6b2\n--- /dev/null\n+++ b/docs/api/content.md\n@@ -0,0 +1,8 @@\n+(plone-api-content)=\n+\n+# plone.api.content\n+\n+```{eval-rst}\n+.. automodule:: plone.api.content\n+    :members:\n+```\ndiff --git a/docs/api/content.rst b/docs/api/content.rst\ndeleted file mode 100644\nindex 52e1585..0000000\n--- a/docs/api/content.rst\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/api/content.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. _plone-api-content:\n-\n-plone.api.content\n-=================\n-\n-.. automodule:: plone.api.content\n-    :members:\ndiff --git a/docs/api/env.md b/docs/api/env.md\nnew file mode 100644\nindex 0000000..334f856\n--- /dev/null\n+++ b/docs/api/env.md\n@@ -0,0 +1,8 @@\n+(plone-api-env)=\n+\n+# plone.api.env\n+\n+```{eval-rst}\n+.. automodule:: plone.api.env\n+    :members:\n+```\ndiff --git a/docs/api/env.rst b/docs/api/env.rst\ndeleted file mode 100644\nindex 360a403..0000000\n--- a/docs/api/env.rst\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/api/env.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. _plone-api-env:\n-\n-plone.api.env\n-=============\n-\n-.. automodule:: plone.api.env\n-    :members:\ndiff --git a/docs/api/exceptions.md b/docs/api/exceptions.md\nnew file mode 100644\nindex 0000000..7c10736\n--- /dev/null\n+++ b/docs/api/exceptions.md\n@@ -0,0 +1,8 @@\n+(plone-api-errors)=\n+\n+# plone.api.exc\n+\n+```{eval-rst}\n+.. automodule:: plone.api.exc\n+    :members:\n+```\ndiff --git a/docs/api/exceptions.rst b/docs/api/exceptions.rst\ndeleted file mode 100644\nindex bf826da..0000000\n--- a/docs/api/exceptions.rst\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/api/exceptions.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. _plone-api-errors:\n-\n-plone.api.exc\n-=============\n-\n-.. automodule:: plone.api.exc\n-    :members:\ndiff --git a/docs/api/group.md b/docs/api/group.md\nnew file mode 100644\nindex 0000000..3e59c6d\n--- /dev/null\n+++ b/docs/api/group.md\n@@ -0,0 +1,8 @@\n+(plone-api-group)=\n+\n+# plone.api.group\n+\n+```{eval-rst}\n+.. automodule:: plone.api.group\n+    :members:\n+```\ndiff --git a/docs/api/group.rst b/docs/api/group.rst\ndeleted file mode 100644\nindex 9be3351..0000000\n--- a/docs/api/group.rst\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/api/group.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. _plone-api-group:\n-\n-plone.api.group\n-===============\n-\n-.. automodule:: plone.api.group\n-    :members:\ndiff --git a/docs/api/index.rst b/docs/api/index.md\nsimilarity index 72%\nrename from docs/api/index.rst\nrename to docs/api/index.md\nindex 2c70040..a087fc8 100644\n--- a/docs/api/index.rst\n+++ b/docs/api/index.md\n@@ -1,18 +1,12 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/api/index.html>`_\n-    so you have working references and proper formatting.\n-\n-\n+```{eval-rst}\n .. currentmodule:: plone\n+```\n \n-List of all API methods with descriptions\n-=========================================\n+# List of all API methods with descriptions\n \n-api.portal\n-----------\n+## api.portal\n \n+```{eval-rst}\n .. autosummary::\n \n     api.portal.get\n@@ -23,10 +17,11 @@ api.portal\n     api.portal.show_message\n     api.portal.get_registry_record\n \n+```\n \n-api.content\n------------\n+## api.content\n \n+```{eval-rst}\n .. autosummary::\n \n     api.content.get\n@@ -40,10 +35,11 @@ api.content\n     api.content.transition\n     api.content.get_view\n \n+```\n \n-api.user\n---------\n+## api.user\n \n+```{eval-rst}\n .. autosummary::\n \n     api.user.get\n@@ -57,10 +53,11 @@ api.user\n     api.user.grant_roles\n     api.user.revoke_roles\n \n+```\n \n-api.group\n----------\n+## api.group\n \n+```{eval-rst}\n .. autosummary::\n \n     api.group.get\n@@ -73,10 +70,11 @@ api.group\n     api.group.grant_roles\n     api.group.revoke_roles\n \n+```\n \n-api.env\n----------\n+## api.env\n \n+```{eval-rst}\n .. autosummary::\n \n     api.env.adopt_roles\n@@ -84,23 +82,26 @@ api.env\n     api.env.debug_mode\n     api.env.test_mode\n \n+```\n \n-api.relation\n----------\n+## api.relation\n \n+```{eval-rst}\n .. autosummary::\n \n     api.relation.get\n     api.relation.create\n     api.relation.delete\n \n+```\n \n-Exceptions and errors\n----------------------\n+## Exceptions and errors\n \n+```{eval-rst}\n .. autosummary::\n \n     api.exc.PloneApiError\n     api.exc.MissingParameterError\n     api.exc.InvalidParameterError\n     api.exc.CannotGetPortalError\n+```\ndiff --git a/docs/api/portal.md b/docs/api/portal.md\nnew file mode 100644\nindex 0000000..cf0c35d\n--- /dev/null\n+++ b/docs/api/portal.md\n@@ -0,0 +1,8 @@\n+(plone-api-portal)=\n+\n+# plone.api.portal\n+\n+```{eval-rst}\n+.. automodule:: plone.api.portal\n+    :members:\n+```\ndiff --git a/docs/api/portal.rst b/docs/api/portal.rst\ndeleted file mode 100644\nindex 31e00c3..0000000\n--- a/docs/api/portal.rst\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/api/portal.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. _plone-api-portal:\n-\n-plone.api.portal\n-================\n-\n-.. automodule:: plone.api.portal\n-    :members:\ndiff --git a/docs/api/relation.md b/docs/api/relation.md\nnew file mode 100644\nindex 0000000..abce712\n--- /dev/null\n+++ b/docs/api/relation.md\n@@ -0,0 +1,8 @@\n+(plone-api-relation)=\n+\n+# plone.api.relation\n+\n+```{eval-rst}\n+.. automodule:: plone.api.relation\n+    :members:\n+```\ndiff --git a/docs/api/relation.rst b/docs/api/relation.rst\ndeleted file mode 100644\nindex 9769464..0000000\n--- a/docs/api/relation.rst\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/api/relation.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. _plone-api-relation:\n-\n-plone.api.relation\n-==================\n-\n-.. automodule:: plone.api.relation\n-    :members:\ndiff --git a/docs/api/user.md b/docs/api/user.md\nnew file mode 100644\nindex 0000000..ec14613\n--- /dev/null\n+++ b/docs/api/user.md\n@@ -0,0 +1,8 @@\n+(plone-api-user)=\n+\n+# plone.api.user\n+\n+```{eval-rst}\n+.. automodule:: plone.api.user\n+    :members:\n+```\ndiff --git a/docs/api/user.rst b/docs/api/user.rst\ndeleted file mode 100644\nindex d54521b..0000000\n--- a/docs/api/user.rst\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/api/user.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. _plone-api-user:\n-\n-plone.api.user\n-==============\n-\n-.. automodule:: plone.api.user\n-    :members:\ndiff --git a/docs/conf.py b/docs/conf.py\nindex 106e0d3..e0382f1 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -1,14 +1,27 @@\n-# sphinx configuration\n+from pkg_resources import get_distribution\n+\n+import sys\n \n project = \'plone.api\'\n copyright = \'2012, Plone Foundation\'\n \n+version = release = get_distribution(project).version\n+\n+\n+# The suffix of source filenames.\n+source_suffix = {\n+    ".md": "markdown",\n+    ".rst": "restructuredtext",\n+}\n+\n extensions = [\n     \'sphinx.ext.doctest\',\n     \'sphinx.ext.coverage\',\n     \'sphinx.ext.autodoc\',\n     \'sphinx.ext.viewcode\',\n     \'sphinx.ext.autosummary\',\n+    "myst_parser",\n+    "sphinx.ext.todo",\n ]\n master_doc = \'index\'\n \n@@ -25,11 +38,6 @@\n     \'\', \'manual\'\n ), ]\n \n-from pkg_resources import get_distribution\n-version = release = get_distribution(project).version\n-\n-import sys\n-\n \n class Mock:\n     def __init__(self, *args, **kwargs):\n@@ -49,6 +57,24 @@ def __getattr__(cls, name):\n         else:\n             return Mock()\n \n+\n MOCK_MODULES = [\'lxml\']\n for mod_name in MOCK_MODULES:\n     sys.modules[mod_name] = Mock()\n+\n+\n+# -- Options for myST markdown conversion to html -----------------------------\n+\n+myst_enable_extensions = [\n+    "colon_fence",\n+    "deflist",\n+]\n+\n+\n+# -- Options for HTML output -------------------------------------------------\n+\n+# The theme to use for HTML and HTML Help pages.  See the documentation for\n+# a list of builtin themes.\n+#\n+html_theme = "sphinx_book_theme"\n+\ndiff --git a/docs/content.md b/docs/content.md\nnew file mode 100644\nindex 0000000..d5f04dc\n--- /dev/null\n+++ b/docs/content.md\n@@ -0,0 +1,493 @@\n+```{eval-rst}\n+.. module:: plone\n+```\n+\n+(chapter-content)=\n+\n+# Content\n+\n+(content-create-example)=\n+\n+## Create content\n+\n+To add an object, you must first have a container to put it in.\n+Get the portal object; it will serve nicely:\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+```\n+\n+Create your new content item using the {meth}`api.content.create` method.\n+The type argument will decide which content type will be created.\n+\n+```python\n+from plone import api\n+obj = api.content.create(\n+    type=\'Document\',\n+    title=\'My Content\',\n+    container=portal)\n+```\n+\n+The `id` of the new object is automatically and safely generated from its `title`.\n+\n+```python\n+assert obj.id == \'my-content\'\n+```\n+\n+(content-get-example)=\n+\n+## Get content object\n+\n+There are several approaches to getting your content object.\n+Consider the following portal structure:\n+\n+```\n+plone (portal root)\n+|-- blog\n+|-- about\n+|   |-- team\n+|   `-- contact\n+`-- events\n+    |-- training\n+    |-- conference\n+    `-- sprint\n+```\n+\n+% invisible-code-block: python\n+%\n+% portal = api.portal.get()\n+% image = api.content.create(type=\'Image\', id=\'image\', container=portal)\n+% blog = api.content.create(type=\'Link\', id=\'blog\', container=portal)\n+% about = api.content.create(type=\'Folder\', id=\'about\', container=portal)\n+% events = api.content.create(type=\'Folder\', id=\'events\', container=portal)\n+%\n+% api.content.create(container=about, type=\'Document\', id=\'team\')\n+% api.content.create(container=about, type=\'Document\', id=\'contact\')\n+%\n+% api.content.create(container=events, type=\'Event\', id=\'training\')\n+% api.content.create(container=events, type=\'Event\', id=\'conference\')\n+% api.content.create(container=events, type=\'Event\', id=\'sprint\')\n+\n+The following operations will get objects from the stucture above, including using {meth}`api.content.get`.\n+\n+```python\n+# let\'s first get the portal object\n+from plone import api\n+portal = api.portal.get()\n+assert portal.id == \'plone\'\n+\n+# content can be accessed directly with dict-like access\n+blog = portal[\'blog\']\n+\n+# another way is to use ``get()`` method and pass it a path\n+about = api.content.get(path=\'/about\')\n+\n+# more examples\n+conference = portal[\'events\'][\'conference\']\n+sprint = api.content.get(path=\'/events/sprint\')\n+\n+# moreover, you can access content by its UID\n+uid = about[\'team\'].UID()\n+team = api.content.get(UID=uid)\n+\n+# returns None if UID cannot be found in catalog\n+not_found = api.content.get(UID=\'notfound\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertTrue(portal)\n+% self.assertTrue(blog)\n+% self.assertTrue(about)\n+% self.assertTrue(conference)\n+% self.assertTrue(sprint)\n+% self.assertTrue(team)\n+% self.assertEquals(not_found, None)\n+\n+(content-find-example)=\n+\n+## Find content objects\n+\n+You can use the find function to search for content.\n+\n+Finding all Documents:\n+\n+```python\n+from plone import api\n+documents = api.content.find(portal_type=\'Document\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertGreater(len(documents), 0)\n+\n+Finding all Documents within a context:\n+\n+```python\n+from plone import api\n+documents = api.content.find(\n+    context=api.portal.get(), portal_type=\'Document\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertGreater(len(documents), 0)\n+\n+Limit search depth:\n+\n+```python\n+from plone import api\n+documents = api.content.find(depth=1, portal_type=\'Document\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertGreater(len(documents), 0)\n+\n+Limit search depth within a context:\n+\n+```python\n+from plone import api\n+documents = api.content.find(\n+    context=api.portal.get(), depth=1, portal_type=\'Document\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertGreater(len(documents), 0)\n+\n+Search by interface:\n+\n+```python\n+from plone import api\n+from Products.CMFCore.interfaces import IContentish\n+documents = api.content.find(object_provides=IContentish)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertGreater(len(documents), 0)\n+\n+Combining multiple arguments:\n+\n+```python\n+from plone import api\n+from Products.CMFCore.interfaces import IContentish\n+documents = api.content.find(\n+    context=api.portal.get(),\n+    depth=2,\n+    object_provides=IContentish,\n+    SearchableText=\'Team\',\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertGreater(len(documents), 0)\n+\n+More information about how to use the catalog may be found in the\n+[Plone Documentation](https://docs.plone.org/develop/plone/searching_and_indexing/index.html).\n+\n+Note that the catalog returns *brains* (metadata stored in indexes) and not objects.\n+However, calling `getObject()` on brains does in fact give you the object.\n+\n+```python\n+document_brain = documents[0]\n+document_obj = document_brain.getObject()\n+```\n+\n+(content-get-uuid-example)=\n+\n+## Get content object UUID\n+\n+A Universally Unique IDentifier (UUID) is a unique, non-human-readable identifier for a content object which remains constant for the object even if the object is moved.\n+\n+Plone uses UUIDs for storing references between content and for linking by UIDs, enabling persistent links.\n+\n+To get the UUID of any content object use {meth}`api.content.get_uuid`.\n+The following code gets the UUID of the `contact` document.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+contact = portal[\'about\'][\'contact\']\n+\n+uuid = api.content.get_uuid(obj=contact)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertTrue(isinstance(uuid, str))\n+\n+(content-move-example)=\n+\n+## Move content\n+\n+To move content around the portal structure defined above use the {meth}`api.content.move` method.\n+The code below moves the `contact` item (with all it contains) out of the folder `about` and into the Plone portal root.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+contact = portal[\'about\'][\'contact\']\n+\n+api.content.move(source=contact, target=portal)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertFalse(portal[\'about\'].get(\'contact\'))\n+% self.assertTrue(portal[\'contact\'])\n+\n+Actually, `move` behaves like a filesystem move.\n+If you pass it an `id` argument, the object will have that new ID in its new home.\n+By default it will retain its original ID.\n+\n+(content-rename-example)=\n+\n+## Rename content\n+\n+To rename a content object (change its ID), use the {meth}`api.content.rename` method.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+api.content.rename(obj=portal[\'blog\'], new_id=\'old-blog\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertFalse(portal.get(\'blog\'))\n+% self.assertTrue(portal[\'old-blog\'])\n+\n+(content-copy-example)=\n+\n+## Copy content\n+\n+To copy a content object, use the {meth}`api.content.copy` method.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+training = portal[\'events\'][\'training\']\n+\n+api.content.copy(source=training, target=portal)\n+```\n+\n+Note that the new object will have the same ID as the old object (unless otherwise stated).\n+This is not a problem, since the new object is in a different container.\n+\n+% invisible-code-block: python\n+%\n+% assert portal[\'events\'][\'training\'].id == \'training\'\n+% assert portal[\'training\'].id == \'training\'\n+\n+You can also set `target` to source\'s container and set `safe_id=True`.\n+This will duplicate your content object in the same container and assign it a new, non-conflicting ID.\n+\n+```python\n+api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n+new_training = portal[\'copy_of_training\']\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertTrue(portal[\'training\'])  # old object remains\n+% self.assertTrue(portal[\'copy_of_training\'])\n+\n+(content-delete-example)=\n+\n+## Delete content\n+\n+To delete a content object, pass the object to the {meth}`api.content.delete` method:\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+api.content.delete(obj=portal[\'copy_of_training\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertFalse(portal.get(\'copy_of_training\'))\n+\n+To delete multiple content objects, pass the objects to the {meth}`api.content.delete` method:\n+\n+% invisible-code-block: python\n+%\n+% api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n+% api.content.copy(source=portal[\'events\'][\'training\'], target=portal[\'events\'], safe_id=True)\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+data = [portal[\'copy_of_training\'], portal[\'events\'][\'copy_of_training\'], ]\n+api.content.delete(objects=data)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertFalse(portal.get(\'copy_of_training\'))\n+% self.assertFalse(portal.events.get(\'copy_of_training\'))\n+\n+If deleting content would result in broken links you will get a `LinkIntegrityNotificationException`. To delete anyway, set the option `check_linkintegrity` to `False`:\n+\n+% invisible-code-block: python\n+%\n+% from plone.app.textfield import RichTextValue\n+% from zope.lifecycleevent import modified\n+% api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n+% api.content.copy(source=portal[\'events\'][\'training\'], target=portal[\'events\'], safe_id=True)\n+% portal[\'about\'][\'team\'].text = RichTextValue(\'<a href="../copy_of_training">contact</a>\', \'text/html\', \'text/x-html-safe\')\n+% modified(portal[\'about\'][\'team\'])\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+api.content.delete(obj=portal[\'copy_of_training\'], check_linkintegrity=False)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertNotIn(\'copy_of_training\', portal.keys())\n+\n+(content-manipulation-with-safe-id-option)=\n+\n+## Content manipulation with the `safe_id` option\n+\n+When you manipulate content with {meth}`api.content.create`, {meth}`api.content.move` or {meth}`api.content.copy` the `safe_id` flag is disabled by default.\n+This means the uniqueness of IDs will be enforced.\n+If another object with the same ID is already present in the target container these API methods will raise an error.\n+\n+However, if the `safe_id` option is enabled, a non-conflicting ID will be generated.\n+\n+% invisible-code-block: python\n+%\n+% api.content.create(container=portal, type=\'Document\', id=\'document\', safe_id=True)\n+\n+```python\n+api.content.create(container=portal, type=\'Document\', id=\'document\', safe_id=True)\n+document = portal[\'document-1\']\n+```\n+\n+(content-get-state-example)=\n+\n+## Get workflow state\n+\n+To find out the current workflow state of your content, use the {meth}`api.content.get_state` method.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+state = api.content.get_state(obj=portal[\'about\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(state, \'private\')\n+\n+The optional `default` argument is returned if no workflow is defined for the object.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+state = api.content.get_state(obj=portal[\'image\'], default=\'Unknown\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(state, \'Unknown\')\n+\n+(content-transition-example)=\n+\n+## Transition\n+\n+To transition your content to a new workflow state, use the {meth}`api.content.transition` method.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+api.content.transition(obj=portal[\'about\'], transition=\'publish\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(\n+%     api.content.get_state(obj=portal[\'about\']),\n+%     \'published\'\n+% )\n+\n+If your workflow accepts any additional arguments to the checkin method you may supply them via kwargs.\n+These arguments can be saved to your transition using custom workflow variables inside the ZMI using an expression such as "python:state_change.kwargs.get(\'comment\', \'\')"\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+api.content.transition(obj=portal[\'about\'], transition=\'reject\', comment=\'You had a typo on your page.\')\n+```\n+\n+% invisible-code-block: python\n+\n+(content-disable-roles-acquisition-example)=\n+\n+## Disable local roles acquisition\n+\n+To disable the acquisition of local roles for an object, use the {meth}`api.content.disable_roles_acquisition` method.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+api.content.disable_roles_acquisition(obj=portal[\'about\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% ac_flag = getattr(portal[\'about\'], \'__ac_local_roles_block__\', None)\n+% self.assertTrue(ac_flag)\n+\n+(content-enable-roles-acquisition-example)=\n+\n+## Enable local roles acquisition\n+\n+To enable the acquisition of local roles for an object, use the {meth}`api.content.enable_roles_acquisition` method.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+api.content.enable_roles_acquisition(obj=portal[\'about\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% # As __ac_local_roles_block__ is None by default, we have to set it,\n+% # before we can test the enabling method.\n+% portal[\'about\'].__ac_local_roles_block__ = 1\n+%\n+% api.content.enable_roles_acquisition(obj=portal[\'about\'])\n+% ac_flag = getattr(portal[\'about\'], \'__ac_local_roles_block__\', None)\n+% self.assertFalse(ac_flag)\n+\n+(content-get-view-example)=\n+\n+## Get view\n+\n+To get a {class}`BrowserView` for your content, use {meth}`api.content.get_view`.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+view = api.content.get_view(\n+    name=\'plone\',\n+    context=portal[\'about\'],\n+    request=request,\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(view.__name__, u\'plone\')\n+\n+## Further reading\n+\n+For more information on possible flags and usage options please see the full {ref}`plone-api-content` specification.\ndiff --git a/docs/content.rst b/docs/content.rst\ndeleted file mode 100644\nindex e0292b9..0000000\n--- a/docs/content.rst\n+++ /dev/null\n@@ -1,530 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/content.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. module:: plone\n-\n-.. _chapter_content:\n-\n-=======\n-Content\n-=======\n-\n-.. _content_create_example:\n-\n-Create content\n-==============\n-\n-To add an object, you must first have a container to put it in.\n-Get the portal object; it will serve nicely:\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-\n-Create your new content item using the :meth:`api.content.create` method.\n-The type argument will decide which content type will be created.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    obj = api.content.create(\n-        type=\'Document\',\n-        title=\'My Content\',\n-        container=portal)\n-\n-The ``id`` of the new object is automatically and safely generated from its ``title``.\n-\n-.. code-block:: python\n-\n-    assert obj.id == \'my-content\'\n-\n-\n-.. _content_get_example:\n-\n-Get content object\n-==================\n-\n-There are several approaches to getting your content object.\n-Consider the following portal structure::\n-\n-    plone (portal root)\n-    |-- blog\n-    |-- about\n-    |   |-- team\n-    |   `-- contact\n-    `-- events\n-        |-- training\n-        |-- conference\n-        `-- sprint\n-\n-.. invisible-code-block: python\n-\n-    portal = api.portal.get()\n-    image = api.content.create(type=\'Image\', id=\'image\', container=portal)\n-    blog = api.content.create(type=\'Link\', id=\'blog\', container=portal)\n-    about = api.content.create(type=\'Folder\', id=\'about\', container=portal)\n-    events = api.content.create(type=\'Folder\', id=\'events\', container=portal)\n-\n-    api.content.create(container=about, type=\'Document\', id=\'team\')\n-    api.content.create(container=about, type=\'Document\', id=\'contact\')\n-\n-    api.content.create(container=events, type=\'Event\', id=\'training\')\n-    api.content.create(container=events, type=\'Event\', id=\'conference\')\n-    api.content.create(container=events, type=\'Event\', id=\'sprint\')\n-\n-\n-The following operations will get objects from the stucture above, including using :meth:`api.content.get`.\n-\n-.. code-block:: python\n-\n-    # let\'s first get the portal object\n-    from plone import api\n-    portal = api.portal.get()\n-    assert portal.id == \'plone\'\n-\n-    # content can be accessed directly with dict-like access\n-    blog = portal[\'blog\']\n-\n-    # another way is to use ``get()`` method and pass it a path\n-    about = api.content.get(path=\'/about\')\n-\n-    # more examples\n-    conference = portal[\'events\'][\'conference\']\n-    sprint = api.content.get(path=\'/events/sprint\')\n-\n-    # moreover, you can access content by its UID\n-    uid = about[\'team\'].UID()\n-    team = api.content.get(UID=uid)\n-\n-    # returns None if UID cannot be found in catalog\n-    not_found = api.content.get(UID=\'notfound\')\n-\n-\n-.. invisible-code-block: python\n-\n-    self.assertTrue(portal)\n-    self.assertTrue(blog)\n-    self.assertTrue(about)\n-    self.assertTrue(conference)\n-    self.assertTrue(sprint)\n-    self.assertTrue(team)\n-    self.assertEquals(not_found, None)\n-\n-\n-.. _content_find_example:\n-\n-Find content objects\n-====================\n-\n-You can use the find function to search for content.\n-\n-Finding all Documents:\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    documents = api.content.find(portal_type=\'Document\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertGreater(len(documents), 0)\n-\n-\n-Finding all Documents within a context:\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    documents = api.content.find(\n-        context=api.portal.get(), portal_type=\'Document\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertGreater(len(documents), 0)\n-\n-Limit search depth:\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    documents = api.content.find(depth=1, portal_type=\'Document\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertGreater(len(documents), 0)\n-\n-\n-Limit search depth within a context:\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    documents = api.content.find(\n-        context=api.portal.get(), depth=1, portal_type=\'Document\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertGreater(len(documents), 0)\n-\n-\n-Search by interface:\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    from Products.CMFCore.interfaces import IContentish\n-    documents = api.content.find(object_provides=IContentish)\n-\n-.. invisible-code-block: python\n-\n-    self.assertGreater(len(documents), 0)\n-\n-\n-Combining multiple arguments:\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    from Products.CMFCore.interfaces import IContentish\n-    documents = api.content.find(\n-        context=api.portal.get(),\n-        depth=2,\n-        object_provides=IContentish,\n-        SearchableText=\'Team\',\n-    )\n-\n-.. invisible-code-block: python\n-\n-    self.assertGreater(len(documents), 0)\n-\n-\n-More information about how to use the catalog may be found in the\n-`Plone Documentation <http://docs.plone.org/develop/plone/searching_and_indexing/index.html>`_.\n-\n-Note that the catalog returns *brains* (metadata stored in indexes) and not objects.\n-However, calling ``getObject()`` on brains does in fact give you the object.\n-\n-.. code-block:: python\n-\n-    document_brain = documents[0]\n-    document_obj = document_brain.getObject()\n-\n-.. _content_get_uuid_example:\n-\n-Get content object UUID\n-=======================\n-\n-A Universally Unique IDentifier (UUID) is a unique, non-human-readable identifier for a content object which remains constant for the object even if the object is moved.\n-\n-Plone uses UUIDs for storing references between content and for linking by UIDs, enabling persistent links.\n-\n-To get the UUID of any content object use :meth:`api.content.get_uuid`.\n-The following code gets the UUID of the ``contact`` document.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    contact = portal[\'about\'][\'contact\']\n-\n-    uuid = api.content.get_uuid(obj=contact)\n-\n-.. invisible-code-block: python\n-\n-    self.assertTrue(isinstance(uuid, str))\n-\n-.. _content_move_example:\n-\n-Move content\n-============\n-\n-To move content around the portal structure defined above use the :meth:`api.content.move` method.\n-The code below moves the ``contact`` item (with all it contains) out of the folder ``about`` and into the Plone portal root.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    contact = portal[\'about\'][\'contact\']\n-\n-    api.content.move(source=contact, target=portal)\n-\n-.. invisible-code-block: python\n-\n-    self.assertFalse(portal[\'about\'].get(\'contact\'))\n-    self.assertTrue(portal[\'contact\'])\n-\n-Actually, ``move`` behaves like a filesystem move.\n-If you pass it an ``id`` argument, the object will have that new ID in its new home.\n-By default it will retain its original ID.\n-\n-.. _content_rename_example:\n-\n-Rename content\n-==============\n-\n-To rename a content object (change its ID), use the :meth:`api.content.rename` method.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    api.content.rename(obj=portal[\'blog\'], new_id=\'old-blog\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertFalse(portal.get(\'blog\'))\n-    self.assertTrue(portal[\'old-blog\'])\n-\n-\n-.. _content_copy_example:\n-\n-Copy content\n-============\n-\n-To copy a content object, use the :meth:`api.content.copy` method.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    training = portal[\'events\'][\'training\']\n-\n-    api.content.copy(source=training, target=portal)\n-\n-Note that the new object will have the same ID as the old object (unless otherwise stated).\n-This is not a problem, since the new object is in a different container.\n-\n-.. invisible-code-block: python\n-\n-    assert portal[\'events\'][\'training\'].id == \'training\'\n-    assert portal[\'training\'].id == \'training\'\n-\n-\n-You can also set ``target`` to source\'s container and set ``safe_id=True``.\n-This will duplicate your content object in the same container and assign it a new, non-conflicting ID.\n-\n-.. code-block:: python\n-\n-    api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n-    new_training = portal[\'copy_of_training\']\n-\n-.. invisible-code-block: python\n-\n-    self.assertTrue(portal[\'training\'])  # old object remains\n-    self.assertTrue(portal[\'copy_of_training\'])\n-\n-\n-.. _content_delete_example:\n-\n-Delete content\n-==============\n-\n-To delete a content object, pass the object to the :meth:`api.content.delete` method:\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    api.content.delete(obj=portal[\'copy_of_training\'])\n-\n-.. invisible-code-block: python\n-\n-    self.assertFalse(portal.get(\'copy_of_training\'))\n-\n-\n-To delete multiple content objects, pass the objects to the :meth:`api.content.delete` method:\n-\n-.. invisible-code-block: python\n-\n-    api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n-    api.content.copy(source=portal[\'events\'][\'training\'], target=portal[\'events\'], safe_id=True)\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    data = [portal[\'copy_of_training\'], portal[\'events\'][\'copy_of_training\'], ]\n-    api.content.delete(objects=data)\n-\n-.. invisible-code-block: python\n-\n-    self.assertFalse(portal.get(\'copy_of_training\'))\n-    self.assertFalse(portal.events.get(\'copy_of_training\'))\n-\n-\n-If deleting content would result in broken links you will get a `LinkIntegrityNotificationException`. To delete anyway, set the option `check_linkintegrity` to `False`:\n-\n-.. invisible-code-block: python\n-\n-    from plone.app.textfield import RichTextValue\n-    from zope.lifecycleevent import modified\n-    api.content.copy(source=portal[\'training\'], target=portal, safe_id=True)\n-    api.content.copy(source=portal[\'events\'][\'training\'], target=portal[\'events\'], safe_id=True)\n-    portal[\'about\'][\'team\'].text = RichTextValue(\'<a href="../copy_of_training">contact</a>\', \'text/html\', \'text/x-html-safe\')\n-    modified(portal[\'about\'][\'team\'])\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    api.content.delete(obj=portal[\'copy_of_training\'], check_linkintegrity=False)\n-\n-.. invisible-code-block: python\n-\n-    self.assertNotIn(\'copy_of_training\', portal.keys())\n-\n-\n-.. _content_manipulation_with_safe_id_option:\n-\n-Content manipulation with the `safe_id` option\n-==============================================\n-\n-When you manipulate content with :meth:`api.content.create`, :meth:`api.content.move` or :meth:`api.content.copy` the `safe_id` flag is disabled by default.\n-This means the uniqueness of IDs will be enforced.\n-If another object with the same ID is already present in the target container these API methods will raise an error.\n-\n-However, if the `safe_id` option is enabled, a non-conflicting ID will be generated.\n-\n-.. invisible-code-block: python\n-\n-    api.content.create(container=portal, type=\'Document\', id=\'document\', safe_id=True)\n-\n-.. code-block:: python\n-\n-    api.content.create(container=portal, type=\'Document\', id=\'document\', safe_id=True)\n-    document = portal[\'document-1\']\n-\n-\n-.. _content_get_state_example:\n-\n-Get workflow state\n-==================\n-\n-To find out the current workflow state of your content, use the :meth:`api.content.get_state` method.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    state = api.content.get_state(obj=portal[\'about\'])\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(state, \'private\')\n-\n-The optional `default` argument is returned if no workflow is defined for the object.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    state = api.content.get_state(obj=portal[\'image\'], default=\'Unknown\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(state, \'Unknown\')\n-\n-.. _content_transition_example:\n-\n-Transition\n-==========\n-\n-To transition your content to a new workflow state, use the :meth:`api.content.transition` method.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    api.content.transition(obj=portal[\'about\'], transition=\'publish\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(\n-        api.content.get_state(obj=portal[\'about\']),\n-        \'published\'\n-    )\n-\n-If your workflow accepts any additional arguments to the checkin method you may supply them via kwargs.\n-These arguments can be saved to your transition using custom workflow variables inside the ZMI using an expression such as "python:state_change.kwargs.get(\'comment\', \'\')"\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    api.content.transition(obj=portal[\'about\'], transition=\'reject\', comment=\'You had a typo on your page.\')\n-\n-.. invisible-code-block: python\n-\n-.. _content_disable_roles_acquisition_example:\n-\n-Disable local roles acquisition\n-===============================\n-\n-To disable the acquisition of local roles for an object, use the :meth:`api.content.disable_roles_acquisition` method.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    api.content.disable_roles_acquisition(obj=portal[\'about\'])\n-\n-.. invisible-code-block: python\n-\n-    ac_flag = getattr(portal[\'about\'], \'__ac_local_roles_block__\', None)\n-    self.assertTrue(ac_flag)\n-\n-.. _content_enable_roles_acquisition_example:\n-\n-Enable local roles acquisition\n-==============================\n-\n-To enable the acquisition of local roles for an object, use the :meth:`api.content.enable_roles_acquisition` method.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    api.content.enable_roles_acquisition(obj=portal[\'about\'])\n-\n-.. invisible-code-block: python\n-\n-    # As __ac_local_roles_block__ is None by default, we have to set it,\n-    # before we can test the enabling method.\n-    portal[\'about\'].__ac_local_roles_block__ = 1\n-\n-    api.content.enable_roles_acquisition(obj=portal[\'about\'])\n-    ac_flag = getattr(portal[\'about\'], \'__ac_local_roles_block__\', None)\n-    self.assertFalse(ac_flag)\n-\n-.. _content_get_view_example:\n-\n-Get view\n-========\n-\n-To get a :class:`BrowserView` for your content, use :meth:`api.content.get_view`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    view = api.content.get_view(\n-        name=\'plone\',\n-        context=portal[\'about\'],\n-        request=request,\n-    )\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(view.__name__, u\'plone\')\n-\n-\n-Further reading\n-===============\n-\n-For more information on possible flags and usage options please see the full :ref:`plone-api-content` specification.\ndiff --git a/docs/contribute/conventions.rst b/docs/contribute/conventions.rst\ndeleted file mode 100644\nindex 196d8c7..0000000\n--- a/docs/contribute/conventions.rst\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-.. note::\n-\n-    This documentation was moved to the `styleguide section on docs.plone.org <http://docs.plone.org/develop/styleguide/>`_, to the `Working with Git and GitHub <http://docs.plone.org/develop/coredev/docs/git.html>`_ and to the :doc:`develop` chapter of the plone.api documentation.\n-\ndiff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\nnew file mode 100644\nindex 0000000..06cd474\n--- /dev/null\n+++ b/docs/contribute/develop.md\n@@ -0,0 +1,234 @@\n+# Development environment\n+\n+This section is meant for contributors to the `plone.api` project.\n+Its purpose is to guide them through the steps needed to start contributing.\n+\n+% note ``` This HowTo is written for Linux and OS X users.\n+% If you\'re are running Windows we suggest using VMWare or a similar Virtualization tool to install Ubuntu Linux on a virtual machine or installing Ubuntu Linux as a secondary OS on your machine.\n+% Alternatively, you can browse Plone\'s documentation on how to get Plone development environment up and running on Windows.\n+% Plone does run on Windows but it\'s not completely trivial to set it up.\n+\n+## Locations of information and tools\n+\n+- [Documentation @ docs.plone.org](https://docs.plone.org)\n+- [Source code @ GitHub](https://github.com/plone/plone.api)\n+- [Issues @ GitHub](https://github.com/plone/plone.api/issues)\n+- [Code Coverage @ Coveralls.io](https://coveralls.io/github/plone/plone.api)\n+\n+## Prerequisites\n+\n+### System libraries\n+\n+First let\'s look at \'system\' libraries and applications that are normally installed with your OS packet manager, such as apt, aptitude, yum, etc.:\n+\n+- `libxml2` - An xml parser written in C.\n+- `libxslt` - XSLT library written in C.\n+- `git` - Version control system.\n+- `gcc` - The GNU Compiler Collection.\n+- `g++` - The C++ extensions for gcc.\n+- `GNU make` - The fundamental build-control tool.\n+- `GNU tar` - The (un)archiving tool for extracting downloaded archives.\n+- `bzip2` and `gzip` decompression packages - `gzip` is nearly standard, however some platforms will require that `bzip2` be installed.\n+- `Python 2.7` - Linux distributions normally already have it, OS X users should use <https://github.com/collective/buildout.python> to get a clean Python version (the one that comes with OS X is broken).\n+\n+### Python tools\n+\n+- tox automation - tox aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing and release process of Python software. Install with `pip install tox`.\n+\n+```{note}\n+Again, OS X users should use <https://github.com/collective/buildout.python>,\n+it will make your life much easier to have a cleanly compiled Python instead of using the system one that is broken in many deeply confusing ways.\n+```\n+\n+### Further information\n+\n+If you experience problems read through the following links as almost all of the above steps are required for a default Plone development environment:\n+\n+- <https://docs.plone.org/manage/index.html>\n+- <https://pypi.org/project/zc.buildout/>\n+- <https://pypi.org/project/setuptools/>\n+- <https://plone.org/download>\n+\n+If you are an OS X user, you first need a working Python implementation\n+(the one that comes with the operating system is broken).\n+Use <https://github.com/collective/buildout.python> and be happy.\n+Also applicable to other OSes, if getting a working Python proves a challenge.\n+\n+(git-workflow)=\n+\n+## Git workflow & branching model\n+\n+Our repository on GitHub has the following layout:\n+\n+- **feature branches**: all development for new features must be done in\n+  dedicated branches, normally one branch per feature,\n+- **master branch**: when features get completed they are merged into the\n+  master branch; bugfixes are commited directly on the master branch,\n+- **tags**: whenever we create a new release we tag the repository so we can\n+  later re-trace our steps, re-release versions, etc.\n+\n+### Squashing commits\n+\n+In order to keep a clear and concise git history, it is good practice to squash commits before merging.\n+Use `git rebase --interactive` to squash all commits that you think are unnecessary.\n+\n+## Creating and using the development environment\n+\n+```{eval-rst}\n+.. todo::\n+\n+    Update this section as it seams out of date, there is no Makefile so this description makes no sense anymore.\n+```\n+\n+Go to your projects folder and download the lastest `plone.api` code:\n+\n+```bash\n+[you@local ~]$ cd <your_work_folder>\n+[you@local work]$ git clone https://github.com/plone/plone.api.git\n+```\n+\n+Now `cd` into the newly created directory and build your environment:\n+\n+```bash\n+[you@local work]$ cd plone.api\n+[you@local plone.api]$ make\n+```\n+\n+Go make some tea while\n+\n+- `make` creates an isolated Python environment in your `` plone.api` `` folder,\n+- bootstraps `zc.buildout`,\n+- fetches all dependencies,\n+- builds Plone,\n+- runs all tests and\n+- generates documentation so you can open it locally later on.\n+\n+Other commands that you may want to run:\n+\n+```bash\n+[you@local plone.api]$ make tests  # run all tests and syntax validation\n+[you@local plone.api]$ make docs   # re-generate documentation\n+[you@local plone.api]$ make clean  # reset your env back to a fresh start\n+[you@local plone.api]$ make        # re-build env, generate docs, run tests\n+```\n+\n+Open `Makefile` in your favorite code editor to see all possible commands and what they do.\n+And read <http://www.gnu.org/software/make/manual/make.html> to learn more about `make`.\n+\n+(working-on-an-issue)=\n+\n+## Working on an issue\n+\n+Our GitHub account contains a [list of open issues](https://github.com/plone/plone.api/issues).\n+Click on one that catches your attention.\n+If the issue description says `No one is assigned` it means no-one is already working on it and you can claim it as your own.\n+Click on the button next to the text and make yourself the one assigned for this issue.\n+\n+Based on our {ref}`git-workflow` all new features must be developed in separate git branches.\n+So if you are not doing a very trivial fix, but rather adding new features/enhancements, you should create a *feature branch*.\n+This way your work is kept in an isolated place where you can receive feedback on it, improve it, etc.\n+Once we are happy with your implementation, your branch gets merged into *master* at which point everyone else starts using your code.\n+\n+```bash\n+[you@local plone.api]$ git checkout master  # go to master branch\n+[you@local plone.api]$ git checkout -b issue_17  # create a feature branch\n+# replace 17 with the issue number you are working on\n+\n+# change code here\n+\n+[you@local plone.api]$ git add -p && git commit  # commit my changes\n+[you@local plone.api]$ git push origin issue_17  # push my branch to GitHub\n+# at this point others can see your changes but they don\'t get effected by\n+them; in other words, others can comment on your code without your code\n+changing their development environments\n+```\n+\n+Read more about Git branching at <https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches> and on our Git workflow at [Working with Git and GitHub](https://docs.plone.org/develop/coredev/docs/git.html).\n+\n+Once you are done with your work and you would like us to merge your changes into master, go to GitHub to do a *pull request*.\n+Open a browser and point it to `https://github.com/plone/plone.api/tree/issue_<ISSUE_NUMBER>`.\n+There you should see a `Pull Request` button.\n+Click on it, write some text about what you did and anything else you would like to tell the one who will review your work, and finally click `Send pull request`.\n+Now wait that someone comes by and merges your branch (don\'t do it yourself, even if you have permissions to do so).\n+\n+An example pull request text:\n+\n+```\n+Please merge my branch that resolves issue #13,\n+where I added the get_navigation_root() method.\n+```\n+\n+## Commit checklist\n+\n+Before every commit you should:\n+\n+- Run unit tests and syntax validation checks.\n+- Add an entry to `CHANGES.rst` (if applicable).\n+\n+All syntax checks and all tests can be run with a single command.\n+This command also re-generates your documentation.\n+\n+```bash\n+$ make\n+```\n+\n+```{note}\n+It pays off to invest a little time to make your editor run `pep8` and `pyflakes` on a file every time you save that file\n+(or use `flake8` which combines both).\n+This saves you lots of time in the long run.\n+```\n+\n+## Travis Continuous Integration\n+\n+On every push to GitHub, [Travis](https://travis-ci.org/plone/plone.api) runs all tests and syntax validation checks and reports build outcome to the `#sprint` IRC channel and the person who committed the last change.\n+\n+Travis is configured with the `.travis.yml` file located in the root of this package.\n+\n+## Sphinx Documentation\n+\n+```{note}\n+Un-documented code is broken code.\n+```\n+\n+For every feature you add to the codebase, you should also add documentation for it to `docs/`.\n+\n+After adding or modifying documentation, run `tox -e plone6docs` to re-generate your documentation.\n+\n+Publicly available documentation on [6.dev-docs.plone.org/plone.api](https://6.dev-docs.plone.org/plone.api) is automatically generated from these source files, periodically.\n+So when you push changes to master on GitHub you should soon be able to see them published on [6.dev-docs.plone.org/plone.api](https://6.dev-docs.plone.org/plone.api).\n+\n+Read the [General Guide to Writing Documentation](https://6.dev-docs.plone.org/contributing/writing-docs-guide.html) to brush up on your `MyST` skills.\n+\n+Example:\n+\n+```python\n+def add(a, b):\n+    """Calculate the sum of the two parameters.\n+\n+    Also see the :func:`mod.path.my_func`, :meth:`mod.path.MyClass.method` and :attr:`mod.path.MY_CONSTANT` for more details.\n+\n+    :param a: The first operand.\n+    :type a: :class:`mod.path.A`\n+\n+    :param b: The second operand.\n+    :type b: :class:`mod.path.B`\n+\n+    :rtype: int\n+    :return: The sum of the operands.\n+    :raises: `KeyError`, if the operands are not the correct type.\n+    """\n+```\n+\n+Attributes are documented using the `#:` marker above the attribute.\n+The documentation may span multiple lines.\n+\n+```python\n+#: Description of the constant value\n+MY_CONSTANT = 0xc0ffee\n+\n+class Foobar(object):\n+\n+    #: Description of the class variable which spans over\n+    #: multiple lines\n+    FOO = 1\n+```\ndiff --git a/docs/contribute/develop.rst b/docs/contribute/develop.rst\ndeleted file mode 100644\nindex f02eb76..0000000\n--- a/docs/contribute/develop.rst\n+++ /dev/null\n@@ -1,273 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/contribute/develop.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-=======================\n-Development environment\n-=======================\n-\n-This section is meant for contributors to the `plone.api` project.\n-Its purpose is to guide them through the steps needed to start contributing.\n-\n-.. note ::: This HowTo is written for Linux and OS X users.\n-   If you\'re are running Windows we suggest using VMWare or a similar Virtualization tool to install Ubuntu Linux on a virtual machine or installing Ubuntu Linux as a secondary OS on your machine.\n-   Alternatively, you can browse Plone\'s documentation on how to get Plone development environment up and running on Windows.\n-   Plone does run on Windows but it\'s not completely trivial to set it up.\n-\n-\n-Locations of information and tools\n-==================================\n-\n-* `Documentation @ docs.plone.org <http://docs.plone.org>`_\n-* `Source code @ GitHub <http://github.com/plone/plone.api>`_\n-* `Issues @ GitHub <http://github.com/plone/plone.api/issues>`_\n-* `Continuous Integration @ Travis CI <http://travis-ci.org/plone/plone.api>`_\n-* `Code Coverage @ Coveralls.io <http://coveralls.io/r/plone/plone.api>`_\n-\n-\n-Prerequisites\n-=============\n-\n-System libraries\n-----------------\n-\n-First let\'s look at \'system\' libraries and applications that are normally installed with your OS packet manager, such as apt, aptitude, yum, etc.:\n-\n-* ``libxml2`` - An xml parser written in C.\n-* ``libxslt`` - XSLT library written in C.\n-* ``git`` - Version control system.\n-* ``gcc`` - The GNU Compiler Collection.\n-* ``g++`` - The C++ extensions for gcc.\n-* ``GNU make`` - The fundamental build-control tool.\n-* ``GNU tar`` - The (un)archiving tool for extracting downloaded archives.\n-* ``bzip2`` and ``gzip`` decompression packages - ``gzip`` is nearly standard, however some platforms will require that ``bzip2`` be installed.\n-* ``Python 2.7`` - Linux distributions normally already have it, OS X users should use https://github.com/collective/buildout.python to get a clean Python version (the one that comes with OS X is broken).\n-\n-\n-Python tools\n-------------\n-\n-.. todo::\n-\n-    Update this description:\n-\n-    * add tox and propably pip.\n-    * easy_install should be removed.\n-    * question if virtualenv should be used, as tox also replaces this step.\n-\n-Then you\'ll also need to install some Python specific tools:\n-\n-* easy_install - the Python packaging system (download http://peak.telecommunity.com/dist/ez_setup.py and run ``sudo python2.7 ez_setup.py``.\n-* virtualenv - a tool that assists in creating isolated Python working environments. Run ``sudo easy_install virtualenv`` after your have installed   `easy_install` above.\n-\n-.. note::\n-\n-    Again, OS X users should use https://github.com/collective/buildout.python,\n-    it will make your life much easier to have a cleanly compiled Python instead of using the system one that is broken in many deeply confusing ways.\n-\n-\n-Further information\n--------------------\n-\n-If you experience problems read through the following links as almost all of the above steps are required for a default Plone development environment:\n-\n-* http://plone.org/documentation/tutorial/buildout\n-* http://pypi.python.org/pypi/zc.buildout/\n-* http://pypi.python.org/pypi/setuptools\n-* http://plone.org/documentation/manual/installing-plone\n-\n-If you are an OS X user, you first need a working Python implementation\n-(the one that comes with the operating system is broken).\n-Use https://github.com/collective/buildout.python and be happy.\n-Also applicable to other OSes, if getting a working Python proves a challenge.\n-\n-\n-.. _git_workflow:\n-\n-Git workflow & branching model\n-==============================\n-\n-Our repository on GitHub has the following layout:\n-\n-* **feature branches**: all development for new features must be done in\n-  dedicated branches, normally one branch per feature,\n-* **master branch**: when features get completed they are merged into the\n-  master branch; bugfixes are commited directly on the master branch,\n-* **tags**: whenever we create a new release we tag the repository so we can\n-  later re-trace our steps, re-release versions, etc.\n-\n-\n-Squashing commits\n------------------\n-\n-In order to keep a clear and concise git history, it is good practice to squash commits before merging.\n-Use ``git rebase --interactive`` to squash all commits that you think are unnecessary.\n-\n-\n-Creating and using the development environment\n-==============================================\n-\n-.. todo::\n-\n-    Update this section as it seams out of date, there is no Makefile so this description makes no sense anymore.\n-\n-Go to your projects folder and download the lastest `plone.api` code:\n-\n-.. sourcecode:: bash\n-\n-    [you@local ~]$ cd <your_work_folder>\n-    [you@local work]$ git clone https://github.com/plone/plone.api.git\n-\n-Now `cd` into the newly created directory and build your environment:\n-\n-.. sourcecode:: bash\n-\n-    [you@local work]$ cd plone.api\n-    [you@local plone.api]$ make\n-\n-Go make some tea while\n-\n-* `make` creates an isolated Python environment in your `plone.api`` folder,\n-* bootstraps `zc.buildout`,\n-* fetches all dependencies,\n-* builds Plone,\n-* runs all tests and\n-* generates documentation so you can open it locally later on.\n-\n-Other commands that you may want to run:\n-\n-.. sourcecode:: bash\n-\n-    [you@local plone.api]$ make tests  # run all tests and syntax validation\n-    [you@local plone.api]$ make docs   # re-generate documentation\n-    [you@local plone.api]$ make clean  # reset your env back to a fresh start\n-    [you@local plone.api]$ make        # re-build env, generate docs, run tests\n-\n-Open ``Makefile`` in your favorite code editor to see all possible commands and what they do.\n-And read http://www.gnu.org/software/make/manual/make.html to learn more about `make`.\n-\n-\n-.. _working-on-an-issue:\n-\n-Working on an issue\n-===================\n-\n-Our GitHub account contains a `list of open issues <https://github.com/plone/plone.api/issues>`_.\n-Click on one that catches your attention.\n-If the issue description says ``No one is assigned`` it means no-one is already working on it and you can claim it as your own.\n-Click on the button next to the text and make yourself the one assigned for this issue.\n-\n-Based on our :ref:`git_workflow` all new features must be developed in separate git branches.\n-So if you are not doing a very trivial fix, but rather adding new features/enhancements, you should create a *feature branch*.\n-This way your work is kept in an isolated place where you can receive feedback on it, improve it, etc.\n-Once we are happy with your implementation, your branch gets merged into *master* at which point everyone else starts using your code.\n-\n-.. sourcecode:: bash\n-\n-    [you@local plone.api]$ git checkout master  # go to master branch\n-    [you@local plone.api]$ git checkout -b issue_17  # create a feature branch\n-    # replace 17 with the issue number you are working on\n-\n-    # change code here\n-\n-    [you@local plone.api]$ git add -p && git commit  # commit my changes\n-    [you@local plone.api]$ git push origin issue_17  # push my branch to GitHub\n-    # at this point others can see your changes but they don\'t get effected by\n-    them; in other words, others can comment on your code without your code\n-    changing their development environments\n-\n-Read more about Git branching at http://learn.github.com/p/branching.html and on our Git workflow at `Working with Git and GitHub <http://docs.plone.org/develop/coredev/docs/git.html>`_.\n-\n-\n-Once you are done with your work and you would like us to merge your changes into master, go to GitHub to do a *pull request*.\n-Open a browser and point it to ``https://github.com/plone/plone.api/tree/issue_<ISSUE_NUMBER>``.\n-There you should see a ``Pull Request`` button.\n-Click on it, write some text about what you did and anything else you would like to tell the one who will review your work, and finally click ``Send pull request``.\n-Now wait that someone comes by and merges your branch (don\'t do it yourself, even if you have permissions to do so).\n-\n-An example pull request text::\n-\n-    Please merge my branch that resolves issue #13,\n-    where I added the get_navigation_root() method.\n-\n-\n-Commit checklist\n-================\n-\n-Before every commit you should:\n-\n-* Run unit tests and syntax validation checks.\n-* Add an entry to :ref:`changes` (if applicable).\n-* Add/modify :ref:`sphinx-docs` (if applicable).\n-\n-All syntax checks and all tests can be run with a single command.\n-This command also re-generates your documentation.\n-\n-.. sourcecode:: bash\n-\n-    $ make\n-\n-.. note::\n-    It pays off to invest a little time to make your editor run `pep8` and `pyflakes` on a file every time you save that file\n-    (or use `flake8` which combines both).\n-    This saves you lots of time in the long run.\n-\n-\n-Travis Continuous Integration\n-=============================\n-\n-On every push to GitHub, `Travis <http://travis-ci.org/plone/plone.api>`_ runs all tests and syntax validation checks and reports build outcome to the ``#sprint`` IRC channel and the person who committed the last change.\n-\n-Travis is configured with the ``.travis.yml`` file located in the root of this package.\n-\n-\n-Sphinx Documentation\n-====================\n-\n-Un-documented code is broken code.\n-\n-For every feature you add to the codebase you should also add documentation for it to ``docs/``.\n-\n-After adding/modifying documentation, run ``make`` to re-generate your docs.\n-\n-Publicly available documentation on http://api.plone.org is automatically generated from these source files, periodically.\n-So when you push changes to master on GitHub you should soon be able to see them published on ``api.plone.org``.\n-\n-Read the `reStructuredText Primer <http://sphinx-doc.org/rest.html>`_ to brush up on your `reST` skills.\n-\n-Example:\n-\n-.. sourcecode:: python\n-\n-    def add(a, b):\n-        """Calculate the sum of the two parameters.\n-\n-        Also see the :func:`mod.path.my_func`, :meth:`mod.path.MyClass.method` and :attr:`mod.path.MY_CONSTANT` for more details.\n-\n-        :param a: The first operand.\n-        :type a: :class:`mod.path.A`\n-\n-        :param b: The second operand.\n-        :type b: :class:`mod.path.B`\n-\n-        :rtype: int\n-        :return: The sum of the operands.\n-        :raises: `KeyError`, if the operands are not the correct type.\n-        """\n-\n-Attributes are documented using the `#:` marker above the attribute.\n-The documentation may span multiple lines.\n-\n-.. sourcecode:: python\n-\n-    #: Description of the constant value\n-    MY_CONSTANT = 0xc0ffee\n-\n-    class Foobar(object):\n-\n-        #: Description of the class variable which spans over\n-        #: multiple lines\n-        FOO = 1\ndiff --git a/docs/contribute/index.md b/docs/contribute/index.md\nnew file mode 100644\nindex 0000000..f99207a\n--- /dev/null\n+++ b/docs/contribute/index.md\n@@ -0,0 +1,25 @@\n+# How to contribute to this package?\n+\n+## Conventions\n+\n+For rules and guidelines on syntax style, development process, repository workflow, etc see [The Plone Styleguides](https://docs.plone.org/develop/styleguide/) and [Working with Git and GitHub](https://docs.plone.org/develop/coredev/docs/git.html)\n+\n+## Local development environment\n+\n+Setting up and using the local development environment.\n+\n+```{toctree}\n+:maxdepth: 2\n+\n+develop.rst\n+```\n+\n+## Releasing a new version\n+\n+Description of our release process and guidelines.\n+\n+```{toctree}\n+:maxdepth: 2\n+\n+release.rst\n+```\ndiff --git a/docs/contribute/index.rst b/docs/contribute/index.rst\ndeleted file mode 100644\nindex 8c48d64..0000000\n--- a/docs/contribute/index.rst\n+++ /dev/null\n@@ -1,37 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/contribute/index.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-==================================\n-How to contribute to this package?\n-==================================\n-\n-Conventions\n-===========\n-\n-For rules and guidelines on syntax style, development process, repository workflow, etc see `The Plone Styleguides <http://docs.plone.org/develop/styleguide/>`_ and `Working with Git and GitHub <http://docs.plone.org/develop/coredev/docs/git.html>`_\n-\n-\n-Local development environment\n-=============================\n-\n-Setting up and using the local development environment.\n-\n-.. toctree::\n-   :maxdepth: 2\n-\n-   develop.rst\n-\n-\n-Releasing a new version\n-=======================\n-\n-Description of our release process and guidelines.\n-\n-.. toctree::\n-   :maxdepth: 2\n-\n-   release.rst\ndiff --git a/docs/contribute/release.md b/docs/contribute/release.md\nnew file mode 100644\nindex 0000000..208c77c\n--- /dev/null\n+++ b/docs/contribute/release.md\n@@ -0,0 +1,73 @@\n+(releasing-a-new-version)=\n+\n+# Releasing a new version\n+\n+Releasing a new version of `plone.api` involves the following steps:\n+\n+1. Prepare source for a new release.\n+2. Create a git tag for the release.\n+3. Push the git tag upstream to GitHub.\n+4. Generate a distribution file for the package.\n+5. Upload the generated package to Python Package Index (PyPI).\n+\n+To avoid human errors and to automate some of the tasks above we use `jarn.mkrelease`.\n+It\'s listed as a dependency in `setup.py` and should already be installed in your local bin:\n+\n+```bash\n+$ bin/mkrelease --help\n+```\n+\n+Apart from that, in order to be able to upload a new version to PyPI you need to be listed under `Package Index Owner` list and you need to configure your PyPI credentials in the `~/.pypirc` file, e.g.:\n+\n+```\n+[distutils]\n+index-servers =\n+  pypi\n+\n+[pypi]\n+username = fred\n+password = secret\n+```\n+\n+## Checklist\n+\n+Folow these step to create a new release of `plone.api`.\n+\n+1. Verify that we have documented all changes in the `CHANGES.rst` file.\n+   Go through the list of commits since last release on GitHub and check all changes are documented.\n+2. Modify the version identifier in the `setup.py` to reflect the version of the new release.\n+3. Confirm that the package description (generated from `README.rst` and others) renders correctly by running `bin/longtest` and open its ouput in your favorite browser.\n+4. Commit all changes to the git repository and push them upstream to GitHub.\n+5. Create a release, tag it in git and upload it to GitHub by running `bin/mkrelease -d pypi -pq .` (see example below).\n+\n+## Example\n+\n+In the following example we are releasing version 0.1 of `plone.api`.\n+The package has been prepared so that `setup.py` contains the version `0.1`,\n+this change has been committed to git and all changes have been pushed upstream to GitHub:\n+\n+```bash\n+# Check that package description is rendered correctly\n+$ bin/longtest\n+\n+# Make a release and upload it to PyPI\n+$ bin/mkrelease -d pypi -pq ./\n+Releasing plone.api 0.1\n+Tagging plone.api 0.1\n+To git@github.com:plone/plone.api.git\n+* [new tag]         0.1 -> 0.1\n+running egg_info\n+running sdist\n+warning: sdist: standard file not found: should have one of README, README.txt\n+running register\n+Server response (200): OK\n+running upload\n+warning: sdist: standard file not found: should have one of README, README.txt\n+Server response (200): OK\n+done\n+```\n+\n+```{note}\n+Please ignore the sdist warning about README file above.\n+PyPI does not depend on it and it\'s just a bug in setupools (reported and waiting to be fixed).\n+```\ndiff --git a/docs/contribute/release.rst b/docs/contribute/release.rst\ndeleted file mode 100644\nindex 49cb2e0..0000000\n--- a/docs/contribute/release.rst\n+++ /dev/null\n@@ -1,86 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/contribute/release.html>`_\n-    so you have working references and proper formatting.\n-\n-.. _releasing_a_new_version:\n-\n-=======================\n-Releasing a new version\n-=======================\n-\n-Releasing a new version of `plone.api` involves the following steps:\n-\n-#. Prepare source for a new release.\n-#. Create a git tag for the release.\n-#. Push the git tag upstream to GitHub.\n-#. Generate a distribution file for the package.\n-#. Upload the generated package to Python Package Index (PyPI).\n-\n-To avoid human errors and to automate some of the tasks above we use ``jarn.mkrelease``.\n-It\'s listed as a dependency in ``setup.py`` and should already be installed in your local bin:\n-\n-.. sourcecode:: bash\n-\n-    $ bin/mkrelease --help\n-\n-Apart from that, in order to be able to upload a new version to PyPI you need to be listed under `Package Index Owner` list and you need to configure your PyPI credentials in the ``~/.pypirc`` file, e.g.::\n-\n-    [distutils]\n-    index-servers =\n-      pypi\n-\n-    [pypi]\n-    username = fred\n-    password = secret\n-\n-\n-Checklist\n-=========\n-\n-Folow these step to create a new release of `plone.api`.\n-\n-#. Verify that we have documented all changes in the ``docs/CHANGES.rst`` file.\n-   Go through the list of commits since last release on GitHub and check all changes are documented.\n-\n-#. Modify the version identifier in the ``setup.py`` to reflect the version of the new release.\n-\n-#. Confirm that the package description (generated from ``README.rst`` and others) renders correctly by running ``bin/longtest`` and open its ouput in your favorite browser.\n-\n-#. Commit all changes to the git repository and push them upstream to GitHub.\n-\n-#. Create a release, tag it in git and upload it to GitHub by running ``bin/mkrelease -d pypi -pq .`` (see example below).\n-\n-\n-Example\n-=======\n-\n-In the following example we are releasing version 0.1 of `plone.api`.\n-The package has been prepared so that ``setup.py`` contains the version ``0.1``,\n-this change has been committed to git and all changes have been pushed upstream to GitHub:\n-\n-.. sourcecode:: bash\n-\n-  # Check that package description is rendered correctly\n-  $ bin/longtest\n-\n-  # Make a release and upload it to PyPI\n-  $ bin/mkrelease -d pypi -pq ./\n-  Releasing plone.api 0.1\n-  Tagging plone.api 0.1\n-  To git@github.com:plone/plone.api.git\n-  * [new tag]         0.1 -> 0.1\n-  running egg_info\n-  running sdist\n-  warning: sdist: standard file not found: should have one of README, README.txt\n-  running register\n-  Server response (200): OK\n-  running upload\n-  warning: sdist: standard file not found: should have one of README, README.txt\n-  Server response (200): OK\n-  done\n-\n-.. note::\n-  Please ignore the sdist warning about README file above.\n-  PyPI does not depend on it and it\'s just a bug in setupools (reported and waiting to be fixed).\ndiff --git a/docs/env.md b/docs/env.md\nnew file mode 100644\nindex 0000000..2c08782\n--- /dev/null\n+++ b/docs/env.md\n@@ -0,0 +1,141 @@\n+```{eval-rst}\n+.. module:: plone\n+    :noindex:\n+```\n+\n+(chapter-env)=\n+\n+# Environment\n+\n+(env-adopt-roles-example)=\n+\n+## Switch roles inside a block\n+\n+To temporarily override the list of available roles, use {meth}`api.env.adopt_roles`.\n+This is especially useful in unit tests.\n+\n+```python\n+from plone import api\n+from AccessControl import Unauthorized\n+\n+portal = api.portal.get()\n+with api.env.adopt_roles([\'Anonymous\']):\n+    self.assertRaises(\n+       Unauthorized,\n+       lambda: portal.restrictedTraverse("manage_propertiesForm")\n+    )\n+\n+with api.env.adopt_roles([\'Manager\', \'Member\']):\n+    portal.restrictedTraverse("manage_propertiesForm")\n+```\n+\n+(env-adopt-user-example)=\n+\n+## Switch user inside a block\n+\n+To temporarily override the currently active user, use {meth}`api.env.adopt_user`.\n+\n+```python\n+from plone import api\n+\n+portal = api.portal.get()\n+\n+# Create a new user.\n+api.user.create(\n+    username="doc_owner",\n+    roles=(\'Member\', \'Manager\',),\n+    email="new_owner@example.com",\n+)\n+\n+# Become that user and create a document.\n+with api.env.adopt_user(username="doc_owner"):\n+    api.content.create(\n+        container=portal,\n+        type=\'Document\',\n+        id=\'new_owned_doc\',\n+    )\n+\n+self.assertEqual(\n+    portal.new_owned_doc.getOwner().getId(),\n+    "doc_owner",\n+)\n+```\n+\n+(env-debug-mode-example)=\n+\n+## Debug mode\n+\n+To know if your Zope instance is running in debug mode, use {meth}`api.env.debug_mode`.\n+\n+```python\n+from plone import api\n+\n+in_debug_mode = api.env.debug_mode()\n+if in_debug_mode:\n+    print(\'Zope is in debug mode\')\n+```\n+\n+(env-test-mode-example)=\n+\n+## Test mode\n+\n+To know if your Plone instance is running in a test runner, use {meth}`api.env.test_mode`.\n+\n+```python\n+from plone import api\n+\n+in_test_mode = api.env.test_mode()\n+if in_test_mode:\n+    pass  # do something\n+```\n+\n+(env-read-only-mode-example)=\n+\n+## Read-Only mode\n+\n+To know if your Zope / Plone instance is running on a read-only ZODB connection use {meth}`api.env.read_only_mode`.\n+\n+**Use-Case:**\n+If you run a ZRS or RelStorage cluster with active replication where all replicas are read-only be default.\n+You could check if your instance is connected to a read only ZODB or a writeable ZODB.\n+Therefore you could adjust the UI to prevent create, delete or update pages are shown.\n+\n+```python\n+from plone import api\n+\n+is_read_only = api.env.read_only_mode()\n+if is_read_only:\n+    pass  # do something\n+```\n+\n+(env-plone-version-example)=\n+\n+## Plone version\n+\n+To know which version of Plone you are using, use {meth}`api.env.plone_version`.\n+\n+```python\n+from plone import api\n+\n+plone_version = api.env.plone_version()\n+if plone_version < \'4.1\':\n+    pass  # do something\n+```\n+\n+(env-zope-version-example)=\n+\n+## Zope version\n+\n+To know which version of Zope 2 you are using, use {meth}`api.env.zope_version`.\n+\n+```python\n+from plone import api\n+\n+zope_version = api.env.zope_version()\n+if zope_version >= \'2.13\':\n+    pass  # do something\n+```\n+\n+## Further reading\n+\n+For more information on possible flags and usage options please see the full {ref}`plone-api-env` specification.\ndiff --git a/docs/env.rst b/docs/env.rst\ndeleted file mode 100644\nindex 75c24e8..0000000\n--- a/docs/env.rst\n+++ /dev/null\n@@ -1,161 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/env.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. module:: plone\n-\n-.. _chapter_env:\n-\n-===========\n-Environment\n-===========\n-\n-.. _env_adopt_roles_example:\n-\n-Switch roles inside a block\n-===========================\n-\n-To temporarily override the list of available roles, use :meth:`api.env.adopt_roles`.\n-This is especially useful in unit tests.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    from AccessControl import Unauthorized\n-\n-    portal = api.portal.get()\n-    with api.env.adopt_roles([\'Anonymous\']):\n-        self.assertRaises(\n-           Unauthorized,\n-           lambda: portal.restrictedTraverse("manage_propertiesForm")\n-        )\n-\n-    with api.env.adopt_roles([\'Manager\', \'Member\']):\n-        portal.restrictedTraverse("manage_propertiesForm")\n-\n-\n-.. _env_adopt_user_example:\n-\n-Switch user inside a block\n-==========================\n-\n-To temporarily override the currently active user, use :meth:`api.env.adopt_user`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-\n-    portal = api.portal.get()\n-\n-    # Create a new user.\n-    api.user.create(\n-        username="doc_owner",\n-        roles=(\'Member\', \'Manager\',),\n-        email="new_owner@example.com",\n-    )\n-\n-    # Become that user and create a document.\n-    with api.env.adopt_user(username="doc_owner"):\n-        api.content.create(\n-            container=portal,\n-            type=\'Document\',\n-            id=\'new_owned_doc\',\n-        )\n-\n-    self.assertEqual(\n-        portal.new_owned_doc.getOwner().getId(),\n-        "doc_owner",\n-    )\n-\n-.. _env_debug_mode_example:\n-\n-Debug mode\n-==========\n-\n-To know if your Zope instance is running in debug mode, use :meth:`api.env.debug_mode`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-\n-    in_debug_mode = api.env.debug_mode()\n-    if in_debug_mode:\n-        print(\'Zope is in debug mode\')\n-\n-\n-.. _env_test_mode_example:\n-\n-Test mode\n-=========\n-\n-To know if your Plone instance is running in a test runner, use :meth:`api.env.test_mode`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-\n-    in_test_mode = api.env.test_mode()\n-    if in_test_mode:\n-        pass  # do something\n-\n-\n-.. _env_read_only_mode_example:\n-\n-Read-Only mode\n-==============\n-\n-To know if your Zope / Plone instance is running on a read-only ZODB connection use :meth:`api.env.read_only_mode`.\n-\n-**Use-Case:**\n-If you run a ZRS or RelStorage cluster with active replication where all replicas are read-only be default.\n-You could check if your instance is connected to a read only ZODB or a writeable ZODB.\n-Therefore you could adjust the UI to prevent create, delete or update pages are shown.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-\n-    is_read_only = api.env.read_only_mode()\n-    if is_read_only:\n-        pass  # do something\n-\n-\n-.. _env_plone_version_example:\n-\n-Plone version\n-=============\n-\n-To know which version of Plone you are using, use :meth:`api.env.plone_version`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-\n-    plone_version = api.env.plone_version()\n-    if plone_version < \'4.1\':\n-        pass  # do something\n-\n-\n-.. _env_zope_version_example:\n-\n-Zope version\n-============\n-\n-To know which version of Zope 2 you are using, use :meth:`api.env.zope_version`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-\n-    zope_version = api.env.zope_version()\n-    if zope_version >= \'2.13\':\n-        pass  # do something\n-\n-\n-Further reading\n-===============\n-\n-For more information on possible flags and usage options please see the full :ref:`plone-api-env` specification.\ndiff --git a/docs/group.md b/docs/group.md\nnew file mode 100644\nindex 0000000..24a5445\n--- /dev/null\n+++ b/docs/group.md\n@@ -0,0 +1,353 @@\n+```{eval-rst}\n+.. module:: plone\n+    :noindex:\n+```\n+\n+(chapter-groups)=\n+\n+# Groups\n+\n+(group-create-example)=\n+\n+## Create group\n+\n+To create a new group, use {meth}`api.group.create`.\n+\n+```python\n+from plone import api\n+group = api.group.create(groupname=\'staff\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(group.id, \'staff\')\n+\n+When you create groups, `title`, `description`, `roles` and `groups` are optional.\n+\n+```python\n+from plone import api\n+\n+group = api.group.create(\n+    groupname=\'board_members\',\n+    title=\'Board members\',\n+    description=\'Just a description\',\n+    roles=[\'Reader\', ],\n+    groups=[\'Site Administrators\', ],\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(group.id, \'board_members\')\n+% self.assertEqual(group.getProperty(\'title\'), \'Board members\')\n+% self.assertEqual(group.getProperty(\'description\'), \'Just a description\')\n+% self.assertTrue(\'Reader\' in group.getRoles())\n+% self.assertTrue(\'Site Administrators\' in group.getMemberIds())\n+\n+(group-get-example)=\n+\n+## Get group\n+\n+To get a group by its name, use {meth}`api.group.get`.\n+\n+```python\n+from plone import api\n+group = api.group.get(groupname=\'staff\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(group.id, \'staff\')\n+\n+(group-edit-example)=\n+\n+## Editing a group\n+\n+Groups can be edited by using the `group_tool`.\n+In this example, the `title`, `description` and `roles` are updated for the group \'Staff\'.\n+\n+```python\n+from plone import api\n+group_tool = api.portal.get_tool(name=\'portal_groups\')\n+group_tool.editGroup(\n+    \'staff\',\n+    roles=[\'Editor\', \'Reader\'],\n+    title=\'Staff\',\n+    description=\'Just a description\',\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% group = api.group.get(groupname=\'staff\')\n+%\n+% title = group.getProperty(\'title\')\n+% description = group.getProperty(\'description\')\n+% roles = group.getRoles()\n+%\n+% self.assertEqual(title, \'Staff\')\n+% self.assertEqual(description, \'Just a description\')\n+% self.assertTrue(\'Editor\' in roles)\n+% self.assertTrue(\'Reader\' in roles)\n+\n+(group-get-all-groups-example)=\n+\n+## Get all groups\n+\n+You can also get all groups by using {meth}`api.group.get_groups`.\n+\n+```python\n+from plone import api\n+groups = api.group.get_groups()\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(groups[0].id, \'Administrators\')\n+\n+(group-get-users-groups-example)=\n+\n+## Get user\'s groups\n+\n+Groups may be filtered by member. By passing the `username` parameter,\n+{meth}`api.group.get_groups` will return only the groups the user belongs to.\n+\n+% invisible-code-block: python\n+%\n+% api.user.create(email=\'jane@plone.org\', username=\'jane\')\n+% api.group.add_user(username=\'jane\', groupname=\'staff\')\n+% api.group.add_user(username=\'jane\', groupname=\'Reviewers\')\n+\n+```python\n+from plone import api\n+user = api.user.get(username=\'jane\')\n+groups = api.group.get_groups(username=\'jane\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% group_list = [g.id for g in groups]\n+% self.assertCountEqual(\n+%     group_list,\n+%     [\'Reviewers\', \'AuthenticatedUsers\', \'staff\'],\n+% )\n+\n+You can also pass the user directly to {meth}`api.group.get_groups`:\n+\n+> from plone import api\n+> user = api.user.get(username=\'jane\')\n+> groups = api.group.get_groups(user=user)\n+\n+% invisible-code-block: python\n+%\n+% group_list = [g.id for g in groups]\n+% self.assertCountEqual(\n+%     group_list,\n+%     [\'Reviewers\', \'AuthenticatedUsers\', \'staff\'],\n+% )\n+\n+## Get group members\n+\n+Use the {meth}`api.user.get_users` method to get all the users that are members of a group.\n+\n+```python\n+from plone import api\n+members = api.user.get_users(groupname=\'staff\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(members[0].id, \'jane\')\n+\n+(group-delete-example)=\n+\n+## Delete group\n+\n+To delete a group, use {meth}`api.group.delete` and pass in either the groupname or the group object you want to delete.\n+\n+```python\n+from plone import api\n+api.group.create(groupname=\'unwanted\')\n+api.group.delete(groupname=\'unwanted\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n+\n+```python\n+unwanted = api.group.create(groupname=\'unwanted\')\n+api.group.delete(group=unwanted)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n+\n+(group-add-user-example)=\n+\n+## Adding user to group\n+\n+To add a user to a group, use the {meth}`api.group.add_user` method.\n+This method accepts either the groupname or the group object for the target group and the username or the user object you want to add to the group.\n+\n+```python\n+from plone import api\n+\n+api.user.create(email=\'bob@plone.org\', username=\'bob\')\n+api.group.add_user(groupname=\'staff\', username=\'bob\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertTrue(\n+%     \'staff\' in [g.id for g in api.group.get_groups(username=\'bob\')]\n+% )\n+\n+(group-remove-user-example)=\n+\n+## Removing user from group\n+\n+To remove a user from a group, use the {meth}`api.group.remove_user` method.\n+This also accepts either the groupname or the group object for the target group and either the username or the user object you want to remove from the group.\n+\n+```python\n+from plone import api\n+api.group.remove_user(groupname=\'staff\', username=\'bob\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertFalse(\'staff\' in [g.id for g in api.group.get_groups(username=\'bob\')])\n+\n+(group-get-roles-example)=\n+\n+## Get group roles\n+\n+To find the roles assigned to a group, use the {meth}`api.group.get_roles` method.\n+By default it returns site-wide roles.\n+\n+```python\n+from plone import api\n+roles = api.group.get_roles(groupname=\'staff\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\']\n+% self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+\n+If you pass in a content object, it will return the local roles of the group in that particular context.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+folder = api.content.create(\n+    container=portal,\n+    type=\'Folder\',\n+    id=\'folder_four\',\n+    title=\'Folder Four\',\n+)\n+roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_four\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+\n+If you pass in a content object and `inherit=False`, it will return only the local roles of the group on that particular object and ignore global roles.\n+\n+```python\n+api.group.grant_roles(\n+    groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_four\'])\n+\n+roles = api.group.get_roles(\n+    groupname=\'staff\', obj=portal[\'folder_four\'], inherit=False)\n+```\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_OBJ_ROLES = [\'Contributor\']\n+% self.assertEqual(set(EXPECTED_OBJ_ROLES), set(roles))\n+\n+(group-grant-roles-example)=\n+\n+## Grant roles to group\n+\n+To grant roles to a group, use the {meth}`api.group.grant_roles` method.\n+By default, roles are granted site-wide.\n+\n+```python\n+from plone import api\n+api.group.grant_roles(\n+    groupname=\'staff\',\n+    roles=[\'Reviewer, SiteAdministrator\'],\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\', \'Reviewer, SiteAdministrator\']\n+% roles = api.group.get_roles(groupname=\'staff\')\n+% self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+\n+If you pass in a content object, roles will be assigned in that particular context.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+folder = api.content.create(\n+    container=portal, type=\'Folder\', id=\'folder_five\', title=\'Folder Five\')\n+api.group.grant_roles(\n+    groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_five\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_CONTEXT_ROLES = EXPECTED_SITE_ROLES + [\'Contributor\']\n+% roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n+% self.assertEqual(set([\'Contributor\']), set(roles))\n+% roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'])\n+% self.assertEqual(set(EXPECTED_CONTEXT_ROLES), set(roles))\n+\n+(group-revoke-roles-example)=\n+\n+## Revoke roles from group\n+\n+To revoke roles already granted to a group, use the {meth}`api.group.revoke_roles` method.\n+\n+```python\n+from plone import api\n+api.group.revoke_roles(\n+    groupname=\'staff\', roles=[\'Reviewer, SiteAdministrator\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\']\n+% roles = api.group.get_roles(groupname=\'staff\')\n+% self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n+\n+If you pass in a content object, it will revoke roles granted in that particular context.\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_CONTEXT_ROLES = [\'Contributor\']\n+% roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n+% self.assertEqual([\'Contributor\'], roles)\n+\n+```python\n+from plone import api\n+api.group.revoke_roles(\n+    groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_five\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_CONTEXT_ROLES = []\n+% roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n+% self.assertEqual(set(EXPECTED_CONTEXT_ROLES), set(roles))\n+\n+## Further reading\n+\n+For more information on possible flags and complete options please see the full {ref}`plone-api-group` specification.\ndiff --git a/docs/group.rst b/docs/group.rst\ndeleted file mode 100644\nindex 66eb637..0000000\n--- a/docs/group.rst\n+++ /dev/null\n@@ -1,390 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/group.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. module:: plone\n-\n-.. _chapter_groups:\n-\n-Groups\n-======\n-\n-\n-\n-.. _group_create_example:\n-\n-Create group\n-------------\n-\n-To create a new group, use :meth:`api.group.create`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    group = api.group.create(groupname=\'staff\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(group.id, \'staff\')\n-\n-When you create groups, ``title``, ``description``, ``roles`` and ``groups`` are optional.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-\n-    group = api.group.create(\n-        groupname=\'board_members\',\n-        title=\'Board members\',\n-        description=\'Just a description\',\n-        roles=[\'Reader\', ],\n-        groups=[\'Site Administrators\', ],\n-    )\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(group.id, \'board_members\')\n-    self.assertEqual(group.getProperty(\'title\'), \'Board members\')\n-    self.assertEqual(group.getProperty(\'description\'), \'Just a description\')\n-    self.assertTrue(\'Reader\' in group.getRoles())\n-    self.assertTrue(\'Site Administrators\' in group.getMemberIds())\n-\n-\n-.. _group_get_example:\n-\n-Get group\n----------\n-\n-To get a group by its name, use :meth:`api.group.get`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    group = api.group.get(groupname=\'staff\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(group.id, \'staff\')\n-\n-\n-.. _group_edit_example:\n-\n-Editing a group\n----------------\n-\n-Groups can be edited by using the ``group_tool``.\n-In this example, the ``title``, ``description`` and ``roles`` are updated for the group \'Staff\'.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    group_tool = api.portal.get_tool(name=\'portal_groups\')\n-    group_tool.editGroup(\n-        \'staff\',\n-        roles=[\'Editor\', \'Reader\'],\n-        title=\'Staff\',\n-        description=\'Just a description\',\n-    )\n-\n-.. invisible-code-block: python\n-\n-    group = api.group.get(groupname=\'staff\')\n-\n-    title = group.getProperty(\'title\')\n-    description = group.getProperty(\'description\')\n-    roles = group.getRoles()\n-\n-    self.assertEqual(title, \'Staff\')\n-    self.assertEqual(description, \'Just a description\')\n-    self.assertTrue(\'Editor\' in roles)\n-    self.assertTrue(\'Reader\' in roles)\n-\n-\n-.. _group_get_all_groups_example:\n-\n-Get all groups\n---------------\n-\n-You can also get all groups by using :meth:`api.group.get_groups`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    groups = api.group.get_groups()\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(groups[0].id, \'Administrators\')\n-\n-\n-.. _group_get_users_groups_example:\n-\n-Get user\'s groups\n------------------\n-\n-Groups may be filtered by member. By passing the ``username`` parameter,\n-:meth:`api.group.get_groups` will return only the groups the user belongs to.\n-\n-.. invisible-code-block: python\n-\n-    api.user.create(email=\'jane@plone.org\', username=\'jane\')\n-    api.group.add_user(username=\'jane\', groupname=\'staff\')\n-    api.group.add_user(username=\'jane\', groupname=\'Reviewers\')\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    user = api.user.get(username=\'jane\')\n-    groups = api.group.get_groups(username=\'jane\')\n-\n-.. invisible-code-block: python\n-\n-    group_list = [g.id for g in groups]\n-    self.assertCountEqual(\n-        group_list,\n-        [\'Reviewers\', \'AuthenticatedUsers\', \'staff\'],\n-    )\n-\n-You can also pass the user directly to :meth:`api.group.get_groups`:\n-\n-    from plone import api\n-    user = api.user.get(username=\'jane\')\n-    groups = api.group.get_groups(user=user)\n-\n-.. invisible-code-block: python\n-\n-    group_list = [g.id for g in groups]\n-    self.assertCountEqual(\n-        group_list,\n-        [\'Reviewers\', \'AuthenticatedUsers\', \'staff\'],\n-    )\n-\n-Get group members\n------------------\n-\n-Use the :meth:`api.user.get_users` method to get all the users that are members of a group.\n-\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    members = api.user.get_users(groupname=\'staff\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(members[0].id, \'jane\')\n-\n-\n-.. _group_delete_example:\n-\n-Delete group\n-------------\n-\n-To delete a group, use :meth:`api.group.delete` and pass in either the groupname or the group object you want to delete.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.group.create(groupname=\'unwanted\')\n-    api.group.delete(groupname=\'unwanted\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n-\n-.. code-block:: python\n-\n-    unwanted = api.group.create(groupname=\'unwanted\')\n-    api.group.delete(group=unwanted)\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(api.group.get(groupname=\'unwanted\'), None)\n-\n-\n-.. _group_add_user_example:\n-\n-Adding user to group\n---------------------\n-\n-To add a user to a group, use the :meth:`api.group.add_user` method.\n-This method accepts either the groupname or the group object for the target group and the username or the user object you want to add to the group.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-\n-    api.user.create(email=\'bob@plone.org\', username=\'bob\')\n-    api.group.add_user(groupname=\'staff\', username=\'bob\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertTrue(\n-        \'staff\' in [g.id for g in api.group.get_groups(username=\'bob\')]\n-    )\n-\n-\n-.. _group_remove_user_example:\n-\n-Removing user from group\n-------------------------\n-\n-To remove a user from a group, use the :meth:`api.group.remove_user` method.\n-This also accepts either the groupname or the group object for the target group and either the username or the user object you want to remove from the group.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.group.remove_user(groupname=\'staff\', username=\'bob\')\n-\n-\n-.. invisible-code-block: python\n-\n-    self.assertFalse(\'staff\' in [g.id for g in api.group.get_groups(username=\'bob\')])\n-\n-\n-.. _group_get_roles_example:\n-\n-Get group roles\n----------------\n-\n-To find the roles assigned to a group, use the :meth:`api.group.get_roles` method.\n-By default it returns site-wide roles.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    roles = api.group.get_roles(groupname=\'staff\')\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\']\n-    self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n-\n-If you pass in a content object, it will return the local roles of the group in that particular context.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    folder = api.content.create(\n-        container=portal,\n-        type=\'Folder\',\n-        id=\'folder_four\',\n-        title=\'Folder Four\',\n-    )\n-    roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_four\'])\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n-\n-If you pass in a content object and `inherit=False`, it will return only the local roles of the group on that particular object and ignore global roles.\n-\n-.. code-block:: python\n-\n-    api.group.grant_roles(\n-        groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_four\'])\n-\n-    roles = api.group.get_roles(\n-        groupname=\'staff\', obj=portal[\'folder_four\'], inherit=False)\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_OBJ_ROLES = [\'Contributor\']\n-    self.assertEqual(set(EXPECTED_OBJ_ROLES), set(roles))\n-\n-\n-.. _group_grant_roles_example:\n-\n-Grant roles to group\n---------------------\n-\n-To grant roles to a group, use the :meth:`api.group.grant_roles` method.\n-By default, roles are granted site-wide.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.group.grant_roles(\n-        groupname=\'staff\',\n-        roles=[\'Reviewer, SiteAdministrator\'],\n-    )\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\', \'Reviewer, SiteAdministrator\']\n-    roles = api.group.get_roles(groupname=\'staff\')\n-    self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n-\n-\n-If you pass in a content object, roles will be assigned in that particular context.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    folder = api.content.create(\n-        container=portal, type=\'Folder\', id=\'folder_five\', title=\'Folder Five\')\n-    api.group.grant_roles(\n-        groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_five\'])\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_CONTEXT_ROLES = EXPECTED_SITE_ROLES + [\'Contributor\']\n-    roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n-    self.assertEqual(set([\'Contributor\']), set(roles))\n-    roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'])\n-    self.assertEqual(set(EXPECTED_CONTEXT_ROLES), set(roles))\n-\n-\n-.. _group_revoke_roles_example:\n-\n-Revoke roles from group\n------------------------\n-\n-To revoke roles already granted to a group, use the :meth:`api.group.revoke_roles` method.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.group.revoke_roles(\n-        groupname=\'staff\', roles=[\'Reviewer, SiteAdministrator\'])\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_SITE_ROLES = [\'Authenticated\', \'Editor\', \'Reader\']\n-    roles = api.group.get_roles(groupname=\'staff\')\n-    self.assertEqual(set(EXPECTED_SITE_ROLES), set(roles))\n-\n-\n-If you pass in a content object, it will revoke roles granted in that particular context.\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_CONTEXT_ROLES = [\'Contributor\']\n-    roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n-    self.assertEqual([\'Contributor\'], roles)\n-\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.group.revoke_roles(\n-        groupname=\'staff\', roles=[\'Contributor\'], obj=portal[\'folder_five\'])\n-\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_CONTEXT_ROLES = []\n-    roles = api.group.get_roles(groupname=\'staff\', obj=portal[\'folder_five\'], inherit=False)\n-    self.assertEqual(set(EXPECTED_CONTEXT_ROLES), set(roles))\n-\n-\n-Further reading\n----------------\n-\n-For more information on possible flags and complete options please see the full :ref:`plone-api-group` specification.\ndiff --git a/docs/index.md b/docs/index.md\nnew file mode 100644\nindex 0000000..81b80d1\n--- /dev/null\n+++ b/docs/index.md\n@@ -0,0 +1,67 @@\n+# A Plone API\n+\n+> The `plone.api` is an elegant and simple API, built for humans wishing to develop with Plone.\n+>\n+> It comes with *cookbook*-like documentation and step-by-step instructions for doing common development tasks in Plone.\n+> Recipes try to assume the user does not have extensive knowledge about Plone internals.\n+\n+The intention of this package is to provide clear API methods for Plone functionality which may be confusing or difficult to access.\n+As the underlying code improves, some API methods may be deprecated and the documentation\n+here will be updated to show how to use the improved code (even if it means not using `plone.api`).\n+\n+Some parts of the documentation do not use *plone.api* methods directly, but simply provide guidance on achieving\n+a task using Plone\'s internal API.\n+\n+For example, using the portal catalog (see \'Find content objects\').\n+\n+The intention is to cover 20% of the tasks any Plone developer does 80% of the time.\n+By keeping everything in one place, the API stays introspectable and discoverable, important aspects of being Pythonic.\n+\n+```{note}\n+This package is stable and used in production, but from time to time changes will be made to the API.\n+Additional API methods may be introduced in minor versions (1.1 -> 1.2).\n+Backward-incompatible changes to the API will be restricted to major versions (1.x -> 2.x).\n+```\n+\n+## Narrative documentation\n+\n+```{toctree}\n+:maxdepth: 2\n+\n+about.rst\n+portal.rst\n+content.rst\n+user.rst\n+group.rst\n+env.rst\n+relation.rst\n+```\n+\n+## Complete API and advanced usage\n+\n+```{toctree}\n+:maxdepth: 1\n+\n+api/index.rst\n+api/portal.rst\n+api/content.rst\n+api/user.rst\n+api/group.rst\n+api/env.rst\n+api/relation.rst\n+api/exceptions.rst\n+```\n+\n+## Contribute\n+\n+```{toctree}\n+:maxdepth: 2\n+\n+contribute/index.rst\n+```\n+\n+## Indices and tables\n+\n+- {ref}`genindex`\n+- {ref}`modindex`\n+- {ref}`search`\ndiff --git a/docs/index.rst b/docs/index.rst\ndeleted file mode 100644\nindex 7ee7425..0000000\n--- a/docs/index.rst\n+++ /dev/null\n@@ -1,81 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/index.html>`_\n-    so you have working references and proper formatting.\n-\n-===========\n-A Plone API\n-===========\n-\n-    The ``plone.api`` is an elegant and simple API, built for humans wishing to develop with Plone.\n-\n-    It comes with *cookbook*-like documentation and step-by-step instructions for doing common development tasks in Plone.\n-    Recipes try to assume the user does not have extensive knowledge about Plone internals.\n-\n-The intention of this package is to provide clear API methods for Plone functionality which may be confusing or difficult to access.\n-As the underlying code improves, some API methods may be deprecated and the documentation\n-here will be updated to show how to use the improved code (even if it means not using ``plone.api``).\n-\n-Some parts of the documentation do not use *plone.api* methods directly, but simply provide guidance on achieving\n-a task using Plone\'s internal API.\n-\n-For example, using the portal catalog (see \'Find content objects\').\n-\n-The intention is to cover 20% of the tasks any Plone developer does 80% of the time.\n-By keeping everything in one place, the API stays introspectable and discoverable, important aspects of being Pythonic.\n-\n-.. note::\n-\n-    This package is stable and used in production, but from time to time changes will be made to the API.\n-    Additional API methods may be introduced in minor versions (1.1 -> 1.2).\n-    Backward-incompatible changes to the API will be restricted to major versions (1.x -> 2.x).\n-\n-\n-Narrative documentation\n-=======================\n-\n-.. toctree::\n-    :maxdepth: 2\n-\n-    about.rst\n-    portal.rst\n-    content.rst\n-    user.rst\n-    group.rst\n-    env.rst\n-    relation.rst\n-\n-\n-Complete API and advanced usage\n-===============================\n-\n-.. toctree::\n-    :maxdepth: 1\n-\n-    api/index.rst\n-    api/portal.rst\n-    api/content.rst\n-    api/user.rst\n-    api/group.rst\n-    api/env.rst\n-    api/relation.rst\n-    api/exceptions.rst\n-\n-\n-Contribute\n-==========\n-\n-.. toctree::\n-   :maxdepth: 2\n-\n-   contribute/index.rst\n-\n-\n-\n-Indices and tables\n-==================\n-\n-* :ref:`genindex`\n-* :ref:`modindex`\n-* :ref:`search`\ndiff --git a/docs/portal.md b/docs/portal.md\nnew file mode 100644\nindex 0000000..33138c1\n--- /dev/null\n+++ b/docs/portal.md\n@@ -0,0 +1,401 @@\n+```{eval-rst}\n+.. module:: plone\n+    :noindex:\n+```\n+\n+(chapter-portal)=\n+\n+# Portal\n+\n+(portal-get-example)=\n+\n+## Get portal object\n+\n+Getting the Plone portal object is easy with {meth}`api.portal.get`.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(portal.getPortalTypeName(), \'Plone Site\')\n+% self.assertEqual(portal.getId(), \'plone\')\n+\n+(portal-get-navigation-root-example)=\n+\n+## Get navigation root\n+\n+In multilingual or multi-site Plone installations you probably want to get the language-specific navigation root object,\n+not the top portal object.\n+\n+You do this with {meth}`api.portal.get_navigation_root()`.\n+\n+Assuming there is a document `english_page` in a folder `en`, which is the navigation root:\n+\n+% invisible-code-block: python\n+%\n+% from plone import api\n+% from plone.app.layout.navigation.interfaces import INavigationRoot\n+% from zope.interface import alsoProvides\n+%\n+% portal = api.portal.get()\n+% english_folder = api.content.create(\n+%     type=\'Folder\',\n+%     title=\'en\',\n+%     container=portal,\n+% )\n+% alsoProvides(english_folder, INavigationRoot)\n+% english_page = api.content.create(\n+%     type=\'Document\',\n+%     title=\'English Page\',\n+%     container=english_folder,\n+% )\n+\n+```python\n+from plone import api\n+nav_root = api.portal.get_navigation_root(english_page)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(nav_root.id, \'en\')\n+\n+returns the folder `en`. If the folder `en` is not a navigation root it would return the portal.\n+\n+## Get portal url\n+\n+Since we now have the portal object, it\'s easy to get the portal URL.\n+\n+```python\n+from plone import api\n+url = api.portal.get().absolute_url()\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(url, \'http://nohost/plone\')\n+\n+(portal-get-tool-example)=\n+\n+## Get tool\n+\n+To get a portal tool easily, use {meth}`api.portal.get_tool` and pass in the name of the tool you need.\n+\n+```python\n+from plone import api\n+catalog = api.portal.get_tool(name=\'portal_catalog\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(catalog.__class__.__name__, \'CatalogTool\')\n+\n+(portal-get-localized-time-example)=\n+\n+## Get localized time\n+\n+To display the date/time in a user-friendly way, localized to the user\'s preferred language, use {meth}`api.portal.get_localized_time`.\n+\n+```python\n+from plone import api\n+from DateTime import DateTime\n+today = DateTime()\n+localized = api.portal.get_localized_time(datetime=today)\n+```\n+\n+% invisible-code-block: python\n+%\n+% # assert that the result is in fact a datetime\n+% self.assertEqual(DateTime(localized).__class__, DateTime)\n+\n+(portal-get-default-language-example)=\n+\n+## Get default language\n+\n+To get the default language, use {meth}`api.portal.get_default_language`.\n+\n+```python\n+from plone import api\n+lang = api.portal.get_default_language()\n+```\n+\n+% invisible-code-block: python\n+%\n+% # assert that the result is \'en\'\n+% self.assertEqual(lang, \'en\')\n+\n+(portal-get-current-language-example)=\n+\n+## Get current language\n+\n+To get the currently negotiated language, use {meth}`api.portal.get_current_language`.\n+\n+```python\n+from plone import api\n+lang = api.portal.get_current_language()\n+```\n+\n+% invisible-code-block: python\n+%\n+% # assert that the result is \'en\'\n+% self.assertEqual(lang, \'en\')\n+\n+(portal-translate-example)=\n+\n+## Translate\n+\n+To translate a message in a given language, use {meth}`api.portal.translate`.\n+\n+```python\n+from plone import api\n+msg = api.portal.translate(\'Edited\', lang=\'es\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% # assert that the translation is correct\n+% self.assertEqual(msg, u\'Editado\')\n+\n+(portal-send-email-example)=\n+\n+## Send E-Mail\n+\n+To send an e-mail use {meth}`api.portal.send_email`:\n+\n+% invisible-code-block: python\n+%\n+% # Mock the mail host so we can test sending the email\n+% from plone import api\n+% from Products.CMFPlone.tests.utils import MockMailHost\n+% from Products.CMFPlone.utils import getToolByName\n+% from Products.MailHost.interfaces import IMailHost\n+% api.portal.PRINTINGMAILHOST_ENABLED = True\n+%\n+% mockmailhost = MockMailHost(\'MailHost\')\n+% if not hasattr(mockmailhost, \'smtp_host\'):\n+%     mockmailhost.smtp_host = \'localhost\'\n+% portal = api.portal.get()\n+% portal.MailHost = mockmailhost\n+% sm = portal.getSiteManager()\n+% sm.registerUtility(component=mockmailhost, provided=IMailHost)\n+% mailhost = getToolByName(portal, \'MailHost\')\n+% mailhost.reset()\n+\n+```python\n+from plone import api\n+api.portal.send_email(\n+    recipient="bob@plone.org",\n+    sender="noreply@plone.org",\n+    subject="Trappist",\n+    body="One for you Bob!",\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(len(mailhost.messages), 1)\n+%\n+% try:\n+%     # Python 3\n+%     from email import message_from_bytes\n+% except ImportError:\n+%     # Python 2\n+%     from email import message_from_string as message_from_bytes\n+% msg = message_from_bytes(mailhost.messages[0])\n+% self.assertEqual(msg[\'To\'], \'bob@plone.org\')\n+% self.assertEqual(msg[\'From\'], \'noreply@plone.org\')\n+% self.assertEqual(msg[\'Subject\'], \'=?utf-8?q?Trappist?=\')\n+% self.assertEqual(msg.get_payload(), \'One for you Bob!\')\n+\n+If you need to add other fields not supported on send_email signature,\n+Python\'s standard [email module](https://docs.python.org/2.7/library/email.message.html#email.message.Message) can also be used:\n+\n+```python\n+from email.mime.multipart import MIMEMultipart\n+from email.mime.text import MIMEText\n+\n+message = MIMEMultipart()\n+message.attach(MIMEText("One for you Bar!"))\n+\n+part = MIMEText(\'<xml></xml>\', \'xml\')\n+part.add_header(\n+    \'Content-Disposition\',\n+    \'attachment; filename="report.xml"\'\n+)\n+message.attach(part)\n+\n+message[\'Reply-To\'] = "community@plone.org"\n+\n+api.portal.send_email(\n+    recipient="bob@plone.org",\n+    sender="noreply@plone.org",\n+    subject="Trappist",\n+    body=message,\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(len(mailhost.messages), 2)\n+%\n+% msg = message_from_bytes(mailhost.messages[1])\n+% payloads = msg.get_payload()\n+% self.assertEqual(len(payloads), 2)\n+% self.assertEqual(msg[\'Reply-To\'], \'community@plone.org\')\n+% self.assertEqual(payloads[0].get_payload(), \'One for you Bar!\')\n+% self.assertIn(\n+%     \'attachment; filename="report.xml\',\n+%     payloads[1][\'Content-Disposition\']\n+% )\n+% api.portal.PRINTINGMAILHOST_ENABLED = False\n+% mailhost.reset()\n+\n+(portal-show-message-example)=\n+\n+## Show notification message\n+\n+With {meth}`api.portal.show_message` you can show a notification message to the user.\n+\n+```python\n+from plone import api\n+api.portal.show_message(message=\'Blueberries!\', request=request)\n+```\n+\n+% invisible-code-block: python\n+%\n+% from Products.statusmessages.interfaces import IStatusMessage\n+% messages = IStatusMessage(request)\n+% show = messages.show()\n+% self.assertEqual(len(show), 1)\n+% self.assertTrue(\'Blueberries!\' in show[0].message)\n+\n+(portal-get-registry-record-example)=\n+\n+## Get plone.app.registry record\n+\n+Plone comes with a package `plone.app.registry` that provides a common way to store configuration and settings.\n+{meth}`api.portal.get_registry_record` provides an easy way to access these.\n+\n+% invisible-code-block: python\n+%\n+% from plone.registry.interfaces import IRegistry\n+% from plone.registry.record import Record\n+% from plone.registry import field\n+% from zope.component import getUtility\n+% registry = getUtility(IRegistry)\n+% registry.records[\'my.package.someoption\'] = Record(field.Bool(\n+%         title=u"Foo"))\n+% registry[\'my.package.someoption\'] = True\n+\n+```python\n+from plone import api\n+api.portal.get_registry_record(\'my.package.someoption\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertTrue(api.portal.get_registry_record(\'my.package.someoption\'))\n+\n+One common pattern when using registry records is to define an interface with all the settings.\n+{meth}`api.portal.get_registry_record` also allows you to use this pattern.\n+\n+% invisible-code-block: python\n+%\n+% from plone.registry.interfaces import IRegistry\n+% from plone.api.tests.test_portal import IMyRegistrySettings\n+%\n+% registry = getUtility(IRegistry)\n+% registry.registerInterface(IMyRegistrySettings)\n+% records = registry.forInterface(IMyRegistrySettings)\n+% records.field_one = u\'my text\'\n+\n+```python\n+from plone import api\n+api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(\n+%     api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings),\n+%     u\'my text\'\n+% )\n+\n+It is possible to provide a default value\n+that will be returned by {meth}`api.portal.get_registry_record`\n+if the queried record is not found.\n+\n+```python\n+from plone import api\n+api.portal.get_registry_record(\'foo\', interface=IMyRegistrySettings, default=u\'bar\')\n+api.portal.get_registry_record(\'foo\', default=u\'baz\')\n+```\n+\n+% invisible-code-block: python\n+% self.assertEqual(\n+%     api.portal.get_registry_record(\n+%         \'foo\',\n+%         interface=IMyRegistrySettings,\n+%         default=u\'bar\'\n+%     ),\n+%     u\'bar\',\n+% )\n+% self.assertEqual(\n+%     api.portal.get_registry_record(\'foo\', default=u\'baz\'),\n+%     u\'baz\',\n+% )\n+\n+(portal-set-registry-record-example)=\n+\n+## Set plone.app.registry record\n+\n+{meth}`api.portal.set_registry_record` provides an easy way to change `plone.app.registry` configuration and settings.\n+\n+% invisible-code-block: python\n+%\n+% from plone.registry.interfaces import IRegistry\n+% from plone.registry.record import Record\n+% from plone.registry import field\n+% from zope.component import getUtility\n+% registry = getUtility(IRegistry)\n+% registry.records[\'my.package.someoption\'] = Record(field.Bool(\n+%         title=u"Foo"))\n+% registry[\'my.package.someoption\'] = True\n+\n+```python\n+from plone import api\n+api.portal.set_registry_record(\'my.package.someoption\', False)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertFalse(registry[\'my.package.someoption\'])\n+\n+{meth}`api.portal.set_registry_record` allows you to define an interface with all the settings.\n+\n+% invisible-code-block: python\n+%\n+% from plone.registry.interfaces import IRegistry\n+% from plone.api.tests.test_portal import IMyRegistrySettings\n+%\n+% registry = getUtility(IRegistry)\n+% registry.registerInterface(IMyRegistrySettings)\n+% records = registry.forInterface(IMyRegistrySettings)\n+\n+```python\n+from plone import api\n+api.portal.set_registry_record(\'field_one\', u\'new value\', interface=IMyRegistrySettings)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(\n+%     api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings),\n+%     u\'new value\'\n+% )\n+\n+## Further reading\n+\n+For more information on possible flags and usage options please see the full {ref}`plone-api-portal` specification.\ndiff --git a/docs/portal.rst b/docs/portal.rst\ndeleted file mode 100644\nindex cdc2d80..0000000\n--- a/docs/portal.rst\n+++ /dev/null\n@@ -1,429 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/portal.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. module:: plone\n-\n-.. _chapter_portal:\n-\n-Portal\n-======\n-\n-.. _portal_get_example:\n-\n-Get portal object\n------------------\n-\n-Getting the Plone portal object is easy with :meth:`api.portal.get`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(portal.getPortalTypeName(), \'Plone Site\')\n-    self.assertEqual(portal.getId(), \'plone\')\n-\n-\n-.. _portal_get_navigation_root_example:\n-\n-Get navigation root\n--------------------\n-\n-In multilingual or multi-site Plone installations you probably want to get the language-specific navigation root object,\n-not the top portal object.\n-\n-You do this with :meth:`api.portal.get_navigation_root()`.\n-\n-Assuming there is a document ``english_page`` in a folder ``en``, which is the navigation root:\n-\n-.. invisible-code-block: python\n-\n-    from plone import api\n-    from plone.app.layout.navigation.interfaces import INavigationRoot\n-    from zope.interface import alsoProvides\n-\n-    portal = api.portal.get()\n-    english_folder = api.content.create(\n-        type=\'Folder\',\n-        title=\'en\',\n-        container=portal,\n-    )\n-    alsoProvides(english_folder, INavigationRoot)\n-    english_page = api.content.create(\n-        type=\'Document\',\n-        title=\'English Page\',\n-        container=english_folder,\n-    )\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    nav_root = api.portal.get_navigation_root(english_page)\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(nav_root.id, \'en\')\n-\n-returns the folder ``en``. If the folder ``en`` is not a navigation root it would return the portal.\n-\n-Get portal url\n---------------\n-\n-Since we now have the portal object, it\'s easy to get the portal URL.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    url = api.portal.get().absolute_url()\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(url, \'http://nohost/plone\')\n-\n-\n-.. _portal_get_tool_example:\n-\n-Get tool\n---------\n-\n-To get a portal tool easily, use :meth:`api.portal.get_tool` and pass in the name of the tool you need.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    catalog = api.portal.get_tool(name=\'portal_catalog\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(catalog.__class__.__name__, \'CatalogTool\')\n-\n-\n-.. _portal_get_localized_time_example:\n-\n-Get localized time\n-------------------\n-\n-To display the date/time in a user-friendly way, localized to the user\'s preferred language, use :meth:`api.portal.get_localized_time`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    from DateTime import DateTime\n-    today = DateTime()\n-    localized = api.portal.get_localized_time(datetime=today)\n-\n-.. invisible-code-block: python\n-\n-    # assert that the result is in fact a datetime\n-    self.assertEqual(DateTime(localized).__class__, DateTime)\n-\n-\n-.. _portal_get_default_language_example:\n-\n-Get default language\n---------------------\n-\n-To get the default language, use :meth:`api.portal.get_default_language`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    lang = api.portal.get_default_language()\n-\n-.. invisible-code-block: python\n-\n-    # assert that the result is \'en\'\n-    self.assertEqual(lang, \'en\')\n-\n-\n-.. _portal_get_current_language_example:\n-\n-Get current language\n---------------------\n-\n-To get the currently negotiated language, use :meth:`api.portal.get_current_language`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    lang = api.portal.get_current_language()\n-\n-.. invisible-code-block: python\n-\n-    # assert that the result is \'en\'\n-    self.assertEqual(lang, \'en\')\n-\n-\n-.. _portal_translate_example:\n-\n-Translate\n----------\n-\n-To translate a message in a given language, use :meth:`api.portal.translate`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    msg = api.portal.translate(\'Edited\', lang=\'es\')\n-\n-.. invisible-code-block: python\n-\n-    # assert that the translation is correct\n-    self.assertEqual(msg, u\'Editado\')\n-\n-\n-.. _portal_send_email_example:\n-\n-Send E-Mail\n------------\n-\n-To send an e-mail use :meth:`api.portal.send_email`:\n-\n-.. invisible-code-block: python\n-\n-    # Mock the mail host so we can test sending the email\n-    from plone import api\n-    from Products.CMFPlone.tests.utils import MockMailHost\n-    from Products.CMFPlone.utils import getToolByName\n-    from Products.MailHost.interfaces import IMailHost\n-    api.portal.PRINTINGMAILHOST_ENABLED = True\n-\n-    mockmailhost = MockMailHost(\'MailHost\')\n-    if not hasattr(mockmailhost, \'smtp_host\'):\n-        mockmailhost.smtp_host = \'localhost\'\n-    portal = api.portal.get()\n-    portal.MailHost = mockmailhost\n-    sm = portal.getSiteManager()\n-    sm.registerUtility(component=mockmailhost, provided=IMailHost)\n-    mailhost = getToolByName(portal, \'MailHost\')\n-    mailhost.reset()\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.portal.send_email(\n-        recipient="bob@plone.org",\n-        sender="noreply@plone.org",\n-        subject="Trappist",\n-        body="One for you Bob!",\n-    )\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(len(mailhost.messages), 1)\n-\n-    try:\n-        # Python 3\n-        from email import message_from_bytes\n-    except ImportError:\n-        # Python 2\n-        from email import message_from_string as message_from_bytes\n-    msg = message_from_bytes(mailhost.messages[0])\n-    self.assertEqual(msg[\'To\'], \'bob@plone.org\')\n-    self.assertEqual(msg[\'From\'], \'noreply@plone.org\')\n-    self.assertEqual(msg[\'Subject\'], \'=?utf-8?q?Trappist?=\')\n-    self.assertEqual(msg.get_payload(), \'One for you Bob!\')\n-\n-If you need to add other fields not supported on send_email signature,\n-Python\'s standard `email module <https://docs.python.org/2.7/library/email.message.html#email.message.Message>`_ can also be used:\n-\n-.. code-block:: python\n-\n-    from email.mime.multipart import MIMEMultipart\n-    from email.mime.text import MIMEText\n-\n-    message = MIMEMultipart()\n-    message.attach(MIMEText("One for you Bar!"))\n-\n-    part = MIMEText(\'<xml></xml>\', \'xml\')\n-    part.add_header(\n-        \'Content-Disposition\',\n-        \'attachment; filename="report.xml"\'\n-    )\n-    message.attach(part)\n-\n-    message[\'Reply-To\'] = "community@plone.org"\n-\n-    api.portal.send_email(\n-        recipient="bob@plone.org",\n-        sender="noreply@plone.org",\n-        subject="Trappist",\n-        body=message,\n-    )\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(len(mailhost.messages), 2)\n-\n-    msg = message_from_bytes(mailhost.messages[1])\n-    payloads = msg.get_payload()\n-    self.assertEqual(len(payloads), 2)\n-    self.assertEqual(msg[\'Reply-To\'], \'community@plone.org\')\n-    self.assertEqual(payloads[0].get_payload(), \'One for you Bar!\')\n-    self.assertIn(\n-        \'attachment; filename="report.xml\',\n-        payloads[1][\'Content-Disposition\']\n-    )\n-    api.portal.PRINTINGMAILHOST_ENABLED = False\n-    mailhost.reset()\n-\n-\n-.. _portal_show_message_example:\n-\n-Show notification message\n--------------------------\n-\n-With :meth:`api.portal.show_message` you can show a notification message to the user.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.portal.show_message(message=\'Blueberries!\', request=request)\n-\n-.. invisible-code-block: python\n-\n-    from Products.statusmessages.interfaces import IStatusMessage\n-    messages = IStatusMessage(request)\n-    show = messages.show()\n-    self.assertEqual(len(show), 1)\n-    self.assertTrue(\'Blueberries!\' in show[0].message)\n-\n-\n-.. _portal_get_registry_record_example:\n-\n-Get plone.app.registry record\n------------------------------\n-\n-Plone comes with a package ``plone.app.registry`` that provides a common way to store configuration and settings.\n-:meth:`api.portal.get_registry_record` provides an easy way to access these.\n-\n-.. invisible-code-block: python\n-\n-    from plone.registry.interfaces import IRegistry\n-    from plone.registry.record import Record\n-    from plone.registry import field\n-    from zope.component import getUtility\n-    registry = getUtility(IRegistry)\n-    registry.records[\'my.package.someoption\'] = Record(field.Bool(\n-            title=u"Foo"))\n-    registry[\'my.package.someoption\'] = True\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.portal.get_registry_record(\'my.package.someoption\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertTrue(api.portal.get_registry_record(\'my.package.someoption\'))\n-\n-One common pattern when using registry records is to define an interface with all the settings.\n-:meth:`api.portal.get_registry_record` also allows you to use this pattern.\n-\n-.. invisible-code-block: python\n-\n-    from plone.registry.interfaces import IRegistry\n-    from plone.api.tests.test_portal import IMyRegistrySettings\n-\n-    registry = getUtility(IRegistry)\n-    registry.registerInterface(IMyRegistrySettings)\n-    records = registry.forInterface(IMyRegistrySettings)\n-    records.field_one = u\'my text\'\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings)\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(\n-        api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings),\n-        u\'my text\'\n-    )\n-\n-It is possible to provide a default value\n-that will be returned by :meth:`api.portal.get_registry_record`\n-if the queried record is not found.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.portal.get_registry_record(\'foo\', interface=IMyRegistrySettings, default=u\'bar\')\n-    api.portal.get_registry_record(\'foo\', default=u\'baz\')\n-\n-.. invisible-code-block: python\n-    self.assertEqual(\n-        api.portal.get_registry_record(\n-            \'foo\',\n-            interface=IMyRegistrySettings,\n-            default=u\'bar\'\n-        ),\n-        u\'bar\',\n-    )\n-    self.assertEqual(\n-        api.portal.get_registry_record(\'foo\', default=u\'baz\'),\n-        u\'baz\',\n-    )\n-\n-.. _portal_set_registry_record_example:\n-\n-Set plone.app.registry record\n------------------------------\n-\n-:meth:`api.portal.set_registry_record` provides an easy way to change ``plone.app.registry`` configuration and settings.\n-\n-.. invisible-code-block: python\n-\n-    from plone.registry.interfaces import IRegistry\n-    from plone.registry.record import Record\n-    from plone.registry import field\n-    from zope.component import getUtility\n-    registry = getUtility(IRegistry)\n-    registry.records[\'my.package.someoption\'] = Record(field.Bool(\n-            title=u"Foo"))\n-    registry[\'my.package.someoption\'] = True\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.portal.set_registry_record(\'my.package.someoption\', False)\n-\n-.. invisible-code-block: python\n-\n-    self.assertFalse(registry[\'my.package.someoption\'])\n-\n-:meth:`api.portal.set_registry_record` allows you to define an interface with all the settings.\n-\n-\n-.. invisible-code-block: python\n-\n-    from plone.registry.interfaces import IRegistry\n-    from plone.api.tests.test_portal import IMyRegistrySettings\n-\n-    registry = getUtility(IRegistry)\n-    registry.registerInterface(IMyRegistrySettings)\n-    records = registry.forInterface(IMyRegistrySettings)\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.portal.set_registry_record(\'field_one\', u\'new value\', interface=IMyRegistrySettings)\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(\n-        api.portal.get_registry_record(\'field_one\', interface=IMyRegistrySettings),\n-        u\'new value\'\n-    )\n-\n-Further reading\n----------------\n-\n-For more information on possible flags and usage options please see the full :ref:`plone-api-portal` specification.\ndiff --git a/docs/relation.md b/docs/relation.md\nnew file mode 100644\nindex 0000000..465e1c6\n--- /dev/null\n+++ b/docs/relation.md\n@@ -0,0 +1,109 @@\n+```{eval-rst}\n+.. module:: plone\n+    :noindex:\n+```\n+\n+(chapter-relation)=\n+\n+# Relations\n+\n+(relation-get-example)=\n+\n+## Get relations\n+\n+```python\n+api.relation.get(source=source, target=target, relationship="friend", unrestricted=False, as_dict=False)\n+```\n+\n+You must provide either source, target, or relationship, or a combination of those, to {meth}`api.relation.get`.\n+`unrestricted` and `as_dict` are optional.\n+\n+By default the result is a list of `RelationValue` objects.\n+\n+If you set `as_dict=True` it will return a dictionary with the names of the relations as keys and lists of objects as values.\n+\n+By default the View permission is checked on the relation objects.\n+You only get objects that you are allowed to see.\n+Use the `unrestricted` parameter if you want to bypass this check.\n+\n+To get back relations, so relations pointing to an item, use:\n+\n+```python\n+api.relation.get(target=target)\n+```\n+\n+To get the objects connected by relations you can use the api of these return values:\n+\n+```python\n+for relation in api.relation.get(source=source):\n+    source = relation.from_object\n+    target = relation.to_object\n+    relationship = relation.from_attribute\n+```\n+\n+(relation-create-example)=\n+\n+## Create relation\n+\n+To create a relation between source object and target object, use {meth}`api.relation.create`.\n+\n+```python\n+from plone import api\n+\n+portal = api.portal.get()\n+source = portal.bob\n+target = portal.bobby\n+api.relation.create(source=source, target=target, relationship="friend")\n+```\n+\n+If the relation is based on a `RelationChoice` or `RelationList` field on the source object, the value of that field is created/updated accordingly.\n+\n+(relation-delete-example)=\n+\n+## Delete relation\n+\n+Delete one or more relations:\n+\n+```python\n+api.relation.delete(source=source, target=target, relationship="friend")\n+```\n+\n+In order to delete relation(s), you must provide either `source`, `target`, or `relationship` to {meth}`api.relation.delete`.\n+You can mix and match.\n+\n+Delete all relations from source to any target:\n+\n+```python\n+api.relation.delete(source=source)\n+```\n+\n+Delete all relations from any source to this target:\n+\n+```python\n+api.relation.delete(target=target)\n+```\n+\n+Delete relations with name "friend" from source to any target:\n+\n+```python\n+api.relation.delete(source=source, relationship="friend")\n+```\n+\n+Delete relations with name "uncle" from any source to this target:\n+\n+```python\n+api.relation.delete(target=target, relationship="uncle")\n+```\n+\n+Delete relations with name "enemy" from any source to any target:\n+\n+```python\n+api.relation.delete(relationship="enemy")\n+```\n+\n+If a deleted relation is based on a `RelationChoice` or `RelationList` field on the source object, the value of the field is removed/updated accordingly.\n+\n+## Further reading\n+\n+For more information on possible flags and usage options please see the full {ref}`plone-api-relation` specification.\n+For more information on relations read the relevant [chapter in the Mastering Plone training](https://training.plone.org/5/mastering-plone/relations.html).\ndiff --git a/docs/relation.rst b/docs/relation.rst\ndeleted file mode 100644\nindex 56a5cc1..0000000\n--- a/docs/relation.rst\n+++ /dev/null\n@@ -1,123 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/env.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. module:: plone\n-\n-.. _chapter_relation:\n-\n-=========\n-Relations\n-=========\n-\n-\n-.. _relation_get_example:\n-\n-Get relations\n-=============\n-\n-.. code-block:: python\n-\n-    api.relation.get(source=source, target=target, relationship="friend", unrestricted=False, as_dict=False)\n-\n-You must provide either source, target or relationship, or a combination of those.\n-``unrestricted`` and ``as_dict`` are optional.\n-\n-By default the result is a list of ``RelationValue`` objects.\n-\n-If you set ``as_dict=True`` it will return a dictionary with the names of the relations as keys and lists of objects as values.\n-\n-By default the View permission is checked on the relation objects.\n-You only get objects that you are allowed to see.\n-Use the ``unrestricted`` parameter if you want to bypass this check.\n-\n-To get back relations, so relations pointing to an item, use:\n-\n-.. code-block:: python\n-\n-    api.relation.get(target=target)\n-\n-To get the objects connected by relations you can use the api of these return values:\n-\n-.. code-block:: python\n-\n-    for relation in api.relation.get(source=source):\n-        source = relation.from_object\n-        target = relation.to_object\n-        relationship = relation.from_attribute\n-\n-\n-.. _relation_create_example:\n-\n-Create relation\n-===============\n-\n-To create a relation between source object and target object, use :meth:`api.relation.create`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-\n-    portal = api.portal.get()\n-    source = portal.bob\n-    target = portal.bobby\n-    api.relation.create(source=source, target=target, relationship="friend")\n-\n-If the relation is based on a ``RelationChoice`` or ``RelationList`` field on the source object, the value of that field is created/updated accordingly.\n-\n-\n-.. _relation_delete_example:\n-\n-Delete relation\n-===============\n-\n-Delete one or more relations:\n-\n-.. code-block:: python\n-\n-    api.relation.delete(source=source, target=target, relationship="friend")\n-\n-In order to delete relation(s), you must provide either ``source``, ``target`` or ``relationship``.\n-You can mix and match.\n-\n-Delete all relations from source to any target:\n-\n-.. code-block:: python\n-\n-    api.relation.delete(source=source)\n-\n-Delete all relations from any source to this target:\n-\n-.. code-block:: python\n-\n-    api.relation.delete(target=target)\n-\n-Delete relations with name "friend" from source to any target:\n-\n-.. code-block:: python\n-\n-    api.relation.delete(source=source, relationship="friend")\n-\n-Delete relations with name "uncle" from any source to this target:\n-\n-.. code-block:: python\n-\n-    api.relation.delete(target=target, relationship="uncle")\n-\n-Delete relations with name "enemy" from any source to any target:\n-\n-.. code-block:: python\n-\n-    api.relation.delete(relationship="enemy")\n-\n-If a deleted relation is based on a ``RelationChoice`` or ``RelationList`` field on the source object, the value of the field is removed/updated accordingly.\n-\n-\n-Further reading\n-===============\n-\n-For more information on possible flags and usage options please see the full :ref:`plone-api-relation` specification.\n-For more information on relations read the relevant `chapter in the Mastering Plone training <https://training.plone.org/5/mastering-plone/relations.html>`_.\ndiff --git a/docs/user.md b/docs/user.md\nnew file mode 100644\nindex 0000000..6cb60ff\n--- /dev/null\n+++ b/docs/user.md\n@@ -0,0 +1,404 @@\n+```{eval-rst}\n+.. module:: plone\n+    :noindex:\n+```\n+\n+(chapter-users)=\n+\n+# Users\n+\n+(user-create-example)=\n+\n+## Create user\n+\n+To create a new user, use {meth}`api.user.create`.\n+If your portal is configured to use emails as usernames, you just need to pass in the email of the new user.\n+\n+% invisible-code-block: python\n+%\n+% from plone import api\n+% from plone.api.exc import InvalidParameterError\n+% try:\n+%     api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n+% except InvalidParameterError:\n+%     portal = api.portal.get()\n+%     portal.portal_properties.site_properties.use_email_as_login = True\n+\n+```python\n+from plone import api\n+user = api.user.create(email=\'alice@plone.org\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(user.id, \'alice@plone.org\')\n+% self.assertEqual(user.getProperty(\'email\'), \'alice@plone.org\')\n+\n+Otherwise, you also need to pass in the username of the new user.\n+\n+% invisible-code-block: python\n+%\n+% try:\n+%     api.portal.set_registry_record(\'plone.use_email_as_login\', False)\n+% except InvalidParameterError:\n+%     portal = api.portal.get()\n+%     portal.portal_properties.site_properties.use_email_as_login = False\n+\n+```python\n+user = api.user.create(email=\'jane@plone.org\', username=\'jane\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(user.id, \'jane\')\n+% self.assertEqual(user.getProperty(\'email\'), \'jane@plone.org\')\n+\n+To set user properties when creating a new user, pass in a properties dict.\n+\n+```python\n+properties = dict(\n+    fullname=\'Bob\',\n+    location=\'Munich\',\n+)\n+user = api.user.create(\n+    username=\'bob\',\n+    email=\'bob@plone.org\',\n+    properties=properties,\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(user.getProperty(\'fullname\'), \'Bob\')\n+% self.assertEqual(user.getProperty(\'location\'), \'Munich\')\n+\n+Besides user properties you can also specify a password for the new user.\n+Otherwise a random 8-character alphanumeric password will be generated.\n+\n+```python\n+user = api.user.create(\n+    username=\'noob\',\n+    email=\'noob@plone.org\',\n+    password=\'secret\',\n+)\n+```\n+\n+(user-get-example)=\n+\n+## Get user\n+\n+You can get a user with {meth}`api.user.get`.\n+\n+```python\n+from plone import api\n+user = api.user.get(username=\'bob\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(user.id, \'bob\')\n+\n+## User properties\n+\n+Users have various properties set on them.\n+This is how you get and set them, using the underlying APIs:\n+\n+```python\n+from plone import api\n+user = api.user.get(username=\'bob\')\n+user.setMemberProperties(mapping={ \'location\': \'Neverland\', })\n+location = user.getProperty(\'location\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(location, \'Neverland\')\n+\n+(user-get-current-example)=\n+\n+## Get currently logged-in user\n+\n+Getting the currently logged-in user is easy with {meth}`api.user.get_current`.\n+\n+```python\n+from plone import api\n+current = api.user.get_current()\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(current.id, \'test_user_1_\')\n+\n+(user-is-anonymous-example)=\n+\n+## Check if current user is anonymous\n+\n+Sometimes you need to trigger or display some piece of information only for logged-in users.\n+It\'s easy to use {meth}`api.user.is_anonymous` to do a basic check for it.\n+\n+```python\n+from plone import api\n+if not api.user.is_anonymous():\n+    trigger = False\n+trigger = True\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertTrue(trigger)\n+\n+(user-get-all-users-example)=\n+\n+## Get all users\n+\n+Get all users in your portal with {meth}`api.user.get_users`.\n+\n+```python\n+from plone import api\n+users = api.user.get_users()\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertTrue(\'test_user_1_\' in [user.id for user in users])\n+\n+(user-get-groups-users-example)=\n+\n+## Get group\'s users\n+\n+If you set the `groupname` parameter, then {meth}`api.user.get_users` will return only users that are members of this group.\n+\n+% invisible-code-block: python\n+%\n+% api.group.create(groupname=\'staff\')\n+% api.group.add_user(username=\'jane\', groupname=\'staff\')\n+\n+```python\n+from plone import api\n+users = api.user.get_users(groupname=\'staff\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(users[0].id, \'jane\')\n+\n+(user-delete-example)=\n+\n+## Delete user\n+\n+To delete a user, use {meth}`api.user.delete` and pass in either the username or the user object you want to delete.\n+\n+```python\n+from plone import api\n+api.user.create(username=\'unwanted\', email=\'unwanted@example.org\')\n+api.user.delete(username=\'unwanted\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(api.user.get(username=\'unwanted\'), None)\n+\n+```python\n+unwanted = api.user.create(username=\'unwanted\', email=\'unwanted@example.org\')\n+api.user.delete(user=unwanted)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(api.user.get(username=\'unwanted\'), None)\n+\n+(user-get-roles-example)=\n+\n+## Get user roles\n+\n+The {meth}`api.user.get_roles` method is used for getting a user\'s roles.\n+By default it returns site-wide roles.\n+\n+```python\n+from plone import api\n+roles = api.user.get_roles(username=\'jane\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(set(roles), set([\'Member\',\'Authenticated\']))\n+\n+If you pass in a content object, it will return local roles of the user in that particular context.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+blog = api.content.create(container=portal, type=\'Document\', id=\'blog\', title=\'My blog\')\n+roles = api.user.get_roles(username=\'jane\', obj=portal[\'blog\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(set(roles), set([\'Member\',\'Authenticated\']))\n+\n+(user-get-permissions-example)=\n+\n+## Get user permissions\n+\n+The {meth}`api.user.get_permissions` method is used for getting user\'s permissions.\n+By default it returns site root permissions.\n+\n+```python\n+from plone import api\n+mike = api.user.create(email=\'mike@plone.org\', username=\'mike\')\n+permissions = api.user.get_permissions(username=\'mike\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% PERMISSIONS = {\n+%     \'View\': True,\n+%     \'Manage portal\': False,\n+%     \'Modify portal content\': False,\n+%     \'Access contents information\': True,\n+% }\n+%\n+% for k, v in PERMISSIONS.items():\n+%     self.assertTrue(v == api.user.get_permissions(username=\'mike\').get(k, None))\n+%     self.assertTrue(v == api.user.get_permissions(user=mike).get(k, None))\n+\n+If you pass in a content object, it will return local permissions of the user in that particular context.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_two\', title=\'Folder Two\')\n+permissions = api.user.get_permissions(username=\'mike\', obj=portal[\'folder_two\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% PERMISSIONS = {\n+%     \'View\': False,\n+%     \'Manage portal\': False,\n+%     \'Modify portal content\': False,\n+%     \'Access contents information\': False,\n+% }\n+%\n+% for k, v in PERMISSIONS.items():\n+%     self.assertTrue(v == api.user.get_permissions(username=\'mike\', obj=portal[\'folder_two\']).get(k, None))\n+%     self.assertTrue(v == api.user.get_permissions(user=mike, obj=portal[\'folder_two\']).get(k, None))\n+\n+(user-has-permission-example)=\n+\n+## Check user permission\n+\n+Instead of getting all user permissions, you can check a single permission using the {meth}`api.user.has_permission` method.\n+By default it checks the permission on the site root.\n+\n+```python\n+from plone import api\n+adam = api.user.create(email=\'adam@plone.org\', username=\'adam\')\n+can_view = api.user.has_permission(\'View\', username=\'adam\')\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertTrue(can_view)\n+\n+If you pass in a content object, it will check the permission in that particular context.\n+\n+```python\n+from plone import api\n+portal = api.portal.get()\n+folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_hp\', title=\'Folder\')\n+can_view = api.user.has_permission(\'View\', username=\'adam\', obj=folder)\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertFalse(can_view)\n+\n+(user-grant-roles-example)=\n+\n+## Grant roles to user\n+\n+The {meth}`api.user.grant_roles` allows us to grant a list of roles to the user.\n+\n+```python\n+from plone import api\n+api.user.grant_roles(username=\'jane\',\n+    roles=[\'Reviewer\', \'SiteAdministrator\']\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_ROLES_SITE = [\'Member\', \'Reviewer\', \'SiteAdministrator\', \'Authenticated\']\n+% roles = api.user.get_roles(username=\'jane\')\n+% self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n+\n+If you pass a content object or folder,\n+the roles are granted only on that context and not site-wide.\n+But all site-wide roles will also be returned by {meth}`api.user.get_roles` for this user on the given context.\n+\n+```python\n+from plone import api\n+folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_one\', title=\'Folder One\')\n+api.user.grant_roles(username=\'jane\',\n+    roles=[\'Editor\', \'Contributor\'],\n+    obj=portal[\'folder_one\']\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_ROLES_CONTEXT = EXPECTED_ROLES_SITE + [\'Editor\', \'Contributor\']\n+% roles = api.user.get_roles(username=\'jane\', obj=portal[\'folder_one\'])\n+% self.assertEqual(set(EXPECTED_ROLES_CONTEXT), set(roles))\n+% roles = api.user.get_roles(username=\'jane\')\n+% self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n+\n+(user-revoke-roles-example)=\n+\n+## Revoke roles from user\n+\n+The {meth}`api.user.revoke_roles` allows us to revoke a list of roles from the user.\n+\n+```python\n+from plone import api\n+api.user.revoke_roles(username=\'jane\', roles=[\'SiteAdministrator\'])\n+```\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_ROLES_SITE = [\'Member\', \'Authenticated\', \'Reviewer\']\n+% roles = api.user.get_roles(username=\'jane\')\n+% self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n+\n+If you pass a context object the local roles for that context will be removed.\n+\n+```python\n+from plone import api\n+folder = api.content.create(\n+    container=portal,\n+    type=\'Folder\',\n+    id=\'folder_three\',\n+    title=\'Folder Three\'\n+)\n+api.user.grant_roles(\n+    username=\'jane\',\n+    roles=[\'Editor\', \'Contributor\'],\n+    obj=portal[\'folder_three\'],\n+)\n+api.user.revoke_roles(\n+    username=\'jane\',\n+    roles=[\'Editor\'],\n+    obj=portal[\'folder_three\'],\n+)\n+```\n+\n+% invisible-code-block: python\n+%\n+% EXPECTED_ROLES_CONTEXT = EXPECTED_ROLES_SITE + [\'Contributor\']\n+% roles = api.user.get_roles(username=\'jane\', obj=portal[\'folder_three\'])\n+% self.assertEqual(set(EXPECTED_ROLES_CONTEXT), set(roles))\n+\n+## Further reading\n+\n+For more information on possible flags and usage options please see the full {ref}`plone-api-user` specification.\ndiff --git a/docs/user.rst b/docs/user.rst\ndeleted file mode 100644\nindex c3d11ba..0000000\n--- a/docs/user.rst\n+++ /dev/null\n@@ -1,444 +0,0 @@\n-.. admonition:: GitHub-only\n-\n-    WARNING: If you are reading this on GitHub, DON\'T!\n-    Read the documentation at `docs.plone.org <http://docs.plone.org/develop/plone.api/docs/user.html>`_\n-    so you have working references and proper formatting.\n-\n-\n-.. module:: plone\n-\n-.. _chapter_users:\n-\n-Users\n-=====\n-\n-\n-.. _user_create_example:\n-\n-Create user\n------------\n-\n-To create a new user, use :meth:`api.user.create`.\n-If your portal is configured to use emails as usernames, you just need to pass in the email of the new user.\n-\n-.. invisible-code-block: python\n-\n-    from plone import api\n-    from plone.api.exc import InvalidParameterError\n-    try:\n-        api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n-    except InvalidParameterError:\n-        portal = api.portal.get()\n-        portal.portal_properties.site_properties.use_email_as_login = True\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    user = api.user.create(email=\'alice@plone.org\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(user.id, \'alice@plone.org\')\n-    self.assertEqual(user.getProperty(\'email\'), \'alice@plone.org\')\n-\n-\n-Otherwise, you also need to pass in the username of the new user.\n-\n-.. invisible-code-block: python\n-\n-    try:\n-        api.portal.set_registry_record(\'plone.use_email_as_login\', False)\n-    except InvalidParameterError:\n-        portal = api.portal.get()\n-        portal.portal_properties.site_properties.use_email_as_login = False\n-\n-.. code-block:: python\n-\n-    user = api.user.create(email=\'jane@plone.org\', username=\'jane\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(user.id, \'jane\')\n-    self.assertEqual(user.getProperty(\'email\'), \'jane@plone.org\')\n-\n-\n-To set user properties when creating a new user, pass in a properties dict.\n-\n-.. code-block:: python\n-\n-    properties = dict(\n-        fullname=\'Bob\',\n-        location=\'Munich\',\n-    )\n-    user = api.user.create(\n-        username=\'bob\',\n-        email=\'bob@plone.org\',\n-        properties=properties,\n-    )\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(user.getProperty(\'fullname\'), \'Bob\')\n-    self.assertEqual(user.getProperty(\'location\'), \'Munich\')\n-\n-\n-Besides user properties you can also specify a password for the new user.\n-Otherwise a random 8-character alphanumeric password will be generated.\n-\n-.. code-block:: python\n-\n-    user = api.user.create(\n-        username=\'noob\',\n-        email=\'noob@plone.org\',\n-        password=\'secret\',\n-    )\n-\n-\n-.. _user_get_example:\n-\n-Get user\n---------\n-\n-You can get a user with :meth:`api.user.get`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    user = api.user.get(username=\'bob\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(user.id, \'bob\')\n-\n-User properties\n----------------\n-\n-Users have various properties set on them.\n-This is how you get and set them, using the underlying APIs:\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    user = api.user.get(username=\'bob\')\n-    user.setMemberProperties(mapping={ \'location\': \'Neverland\', })\n-    location = user.getProperty(\'location\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(location, \'Neverland\')\n-\n-\n-.. _user_get_current_example:\n-\n-Get currently logged-in user\n-----------------------------\n-\n-Getting the currently logged-in user is easy with :meth:`api.user.get_current`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    current = api.user.get_current()\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(current.id, \'test_user_1_\')\n-\n-\n-.. _user_is_anonymous_example:\n-\n-Check if current user is anonymous\n-----------------------------------\n-\n-Sometimes you need to trigger or display some piece of information only for logged-in users.\n-It\'s easy to use :meth:`api.user.is_anonymous` to do a basic check for it.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    if not api.user.is_anonymous():\n-        trigger = False\n-    trigger = True\n-\n-.. invisible-code-block: python\n-\n-    self.assertTrue(trigger)\n-\n-\n-.. _user_get_all_users_example:\n-\n-Get all users\n--------------\n-\n-Get all users in your portal with :meth:`api.user.get_users`.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    users = api.user.get_users()\n-\n-.. invisible-code-block: python\n-\n-    self.assertTrue(\'test_user_1_\' in [user.id for user in users])\n-\n-\n-.. _user_get_groups_users_example:\n-\n-Get group\'s users\n------------------\n-\n-If you set the `groupname` parameter, then :meth:`api.user.get_users` will return only users that are members of this group.\n-\n-.. invisible-code-block: python\n-\n-    api.group.create(groupname=\'staff\')\n-    api.group.add_user(username=\'jane\', groupname=\'staff\')\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    users = api.user.get_users(groupname=\'staff\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(users[0].id, \'jane\')\n-\n-\n-.. _user_delete_example:\n-\n-Delete user\n------------\n-\n-To delete a user, use :meth:`api.user.delete` and pass in either the username or the user object you want to delete.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.user.create(username=\'unwanted\', email=\'unwanted@example.org\')\n-    api.user.delete(username=\'unwanted\')\n-\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(api.user.get(username=\'unwanted\'), None)\n-\n-.. code-block:: python\n-\n-    unwanted = api.user.create(username=\'unwanted\', email=\'unwanted@example.org\')\n-    api.user.delete(user=unwanted)\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(api.user.get(username=\'unwanted\'), None)\n-\n-\n-.. _user_get_roles_example:\n-\n-Get user roles\n-----------------\n-\n-The :meth:`api.user.get_roles` method is used for getting a user\'s roles.\n-By default it returns site-wide roles.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    roles = api.user.get_roles(username=\'jane\')\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(set(roles), set([\'Member\',\'Authenticated\']))\n-\n-\n-If you pass in a content object, it will return local roles of the user in that particular context.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    blog = api.content.create(container=portal, type=\'Document\', id=\'blog\', title=\'My blog\')\n-    roles = api.user.get_roles(username=\'jane\', obj=portal[\'blog\'])\n-\n-.. invisible-code-block: python\n-\n-    self.assertEqual(set(roles), set([\'Member\',\'Authenticated\']))\n-\n-\n-.. _user_get_permissions_example:\n-\n-Get user permissions\n---------------------\n-\n-The :meth:`api.user.get_permissions` method is used for getting user\'s permissions.\n-By default it returns site root permissions.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    mike = api.user.create(email=\'mike@plone.org\', username=\'mike\')\n-    permissions = api.user.get_permissions(username=\'mike\')\n-\n-.. invisible-code-block: python\n-\n-    PERMISSIONS = {\n-        \'View\': True,\n-        \'Manage portal\': False,\n-        \'Modify portal content\': False,\n-        \'Access contents information\': True,\n-    }\n-\n-    for k, v in PERMISSIONS.items():\n-        self.assertTrue(v == api.user.get_permissions(username=\'mike\').get(k, None))\n-        self.assertTrue(v == api.user.get_permissions(user=mike).get(k, None))\n-\n-\n-If you pass in a content object, it will return local permissions of the user in that particular context.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_two\', title=\'Folder Two\')\n-    permissions = api.user.get_permissions(username=\'mike\', obj=portal[\'folder_two\'])\n-\n-.. invisible-code-block: python\n-\n-    PERMISSIONS = {\n-        \'View\': False,\n-        \'Manage portal\': False,\n-        \'Modify portal content\': False,\n-        \'Access contents information\': False,\n-    }\n-\n-    for k, v in PERMISSIONS.items():\n-        self.assertTrue(v == api.user.get_permissions(username=\'mike\', obj=portal[\'folder_two\']).get(k, None))\n-        self.assertTrue(v == api.user.get_permissions(user=mike, obj=portal[\'folder_two\']).get(k, None))\n-\n-\n-.. _user_has_permission_example:\n-\n-Check user permission\n-----------------------\n-\n-Instead of getting all user permissions, you can check a single permission using the :meth:`api.user.has_permission` method.\n-By default it checks the permission on the site root.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    adam = api.user.create(email=\'adam@plone.org\', username=\'adam\')\n-    can_view = api.user.has_permission(\'View\', username=\'adam\')\n-\n-.. invisible-code-block: python\n-\n-   self.assertTrue(can_view)\n-\n-\n-If you pass in a content object, it will check the permission in that particular context.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    portal = api.portal.get()\n-    folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_hp\', title=\'Folder\')\n-    can_view = api.user.has_permission(\'View\', username=\'adam\', obj=folder)\n-\n-.. invisible-code-block: python\n-\n-   self.assertFalse(can_view)\n-\n-\n-.. _user_grant_roles_example:\n-\n-Grant roles to user\n--------------------\n-\n-The :meth:`api.user.grant_roles` allows us to grant a list of roles to the user.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.user.grant_roles(username=\'jane\',\n-        roles=[\'Reviewer\', \'SiteAdministrator\']\n-    )\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_ROLES_SITE = [\'Member\', \'Reviewer\', \'SiteAdministrator\', \'Authenticated\']\n-    roles = api.user.get_roles(username=\'jane\')\n-    self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n-\n-\n-If you pass a content object or folder,\n-the roles are granted only on that context and not site-wide.\n-But all site-wide roles will also be returned by :meth:`api.user.get_roles` for this user on the given context.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    folder = api.content.create(container=portal, type=\'Folder\', id=\'folder_one\', title=\'Folder One\')\n-    api.user.grant_roles(username=\'jane\',\n-        roles=[\'Editor\', \'Contributor\'],\n-        obj=portal[\'folder_one\']\n-    )\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_ROLES_CONTEXT = EXPECTED_ROLES_SITE + [\'Editor\', \'Contributor\']\n-    roles = api.user.get_roles(username=\'jane\', obj=portal[\'folder_one\'])\n-    self.assertEqual(set(EXPECTED_ROLES_CONTEXT), set(roles))\n-    roles = api.user.get_roles(username=\'jane\')\n-    self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n-\n-\n-.. _user_revoke_roles_example:\n-\n-Revoke roles from user\n-----------------------\n-\n-The :meth:`api.user.revoke_roles` allows us to revoke a list of roles from the user.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    api.user.revoke_roles(username=\'jane\', roles=[\'SiteAdministrator\'])\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_ROLES_SITE = [\'Member\', \'Authenticated\', \'Reviewer\']\n-    roles = api.user.get_roles(username=\'jane\')\n-    self.assertEqual(set(EXPECTED_ROLES_SITE), set(roles))\n-\n-\n-If you pass a context object the local roles for that context will be removed.\n-\n-.. code-block:: python\n-\n-    from plone import api\n-    folder = api.content.create(\n-        container=portal,\n-        type=\'Folder\',\n-        id=\'folder_three\',\n-        title=\'Folder Three\'\n-    )\n-    api.user.grant_roles(\n-        username=\'jane\',\n-        roles=[\'Editor\', \'Contributor\'],\n-        obj=portal[\'folder_three\'],\n-    )\n-    api.user.revoke_roles(\n-        username=\'jane\',\n-        roles=[\'Editor\'],\n-        obj=portal[\'folder_three\'],\n-    )\n-\n-.. invisible-code-block: python\n-\n-    EXPECTED_ROLES_CONTEXT = EXPECTED_ROLES_SITE + [\'Contributor\']\n-    roles = api.user.get_roles(username=\'jane\', obj=portal[\'folder_three\'])\n-    self.assertEqual(set(EXPECTED_ROLES_CONTEXT), set(roles))\n-\n-Further reading\n----------------\n-\n-For more information on possible flags and usage options please see the full :ref:`plone-api-user` specification.\ndiff --git a/fix-converted-myst.py b/fix-converted-myst.py\nnew file mode 100644\nindex 0000000..6062a20\n--- /dev/null\n+++ b/fix-converted-myst.py\n@@ -0,0 +1,56 @@\n+import logging\n+import os\n+import re\n+\n+logging.basicConfig()\n+logger = logging.getLogger("fix converted myST documentation")\n+logger.setLevel(logging.INFO)\n+\n+logger.info("Fix some myST / markdown stuff.")\n+count_files = {\n+    "modified": 0,\n+    "unmodified": 0,\n+}\n+\n+\n+def replace_label_underscore(data):\n+    """Fix \'examples\' reference in docstrings.\n+\n+    :Example: :ref:`portal_get_tool_example`\n+    ->\n+    :Example: :ref:`portal-get-tool-example`\n+    """\n+    regex_label_underscore = \'(?<=:ref:`)(.*)(?=`)\'\n+\n+    def _replace(mobj):\n+        return mobj.group(0).replace(\'_\', \'-\')\n+\n+    data = re.sub(\n+        regex_label_underscore, _replace, data)\n+    return data\n+\n+\n+def remove_github_warning(data):\n+    """Remove \'GitHub-only\' warning"""\n+    regex_github_warning = r\':::{admonition} GitHub-only([\\S\\s]*?):::\\n\\n\'\n+    data = re.sub(regex_github_warning, \'\', data, flags=re.DOTALL)\n+    return data\n+\n+\n+for root, dirs, files in (*os.walk(\'./src\'), *os.walk(\'./docs\')):\n+    for name in files:\n+        if name.endswith(".py") or name.endswith(".md"):\n+            filename = os.path.join(root, name)\n+            with open(filename, \'r+\') as f:\n+                data = f.read()\n+                data = replace_label_underscore(data)\n+                data = remove_github_warning(data)\n+                f.seek(0)\n+                f.write(data)\n+                f.truncate()\n+                count_files["modified"] += 1\n+                logger.info(f"{filename} modified.")\n+\n+\n+logger.info(f\'myST modified for {count_files["modified"]} files.\')\n+logger.info(f\'{count_files["unmodified"]} files unmodified.\')\ndiff --git a/netlify.toml b/netlify.toml\nnew file mode 100644\nindex 0000000..9d440d0\n--- /dev/null\n+++ b/netlify.toml\n@@ -0,0 +1,5 @@\n+[build.environment]\n+  PYTHON_VERSION = "3.8"\n+\n+[build]\n+  ignore = "git diff --quiet $CACHED_COMMIT_REF $COMMIT_REF ./docs/"\ndiff --git a/requirements-docs.txt b/requirements-docs.txt\nnew file mode 100644\nindex 0000000..e072f37\n--- /dev/null\n+++ b/requirements-docs.txt\n@@ -0,0 +1,4 @@\n+Sphinx\n+sphinx-book-theme<=0.3.99\n+myst-parser\n+sphinx-autobuild\ndiff --git a/src/plone/api/content.py b/src/plone/api/content.py\nindex cd06e23..c2a5538 100644\n--- a/src/plone/api/content.py\n+++ b/src/plone/api/content.py\n@@ -59,7 +59,7 @@ def create(\n         KeyError,\n         :class:`~plone.api.exc.MissingParameterError`,\n         :class:`~plone.api.exc.InvalidParameterError`\n-    :Example: :ref:`content_create_example`\n+    :Example: :ref:`content-create-example`\n     """\n     # Create a temporary id if the id is not given\n     content_id = not safe_id and id or str(random.randint(0, 99999999))\n@@ -118,7 +118,7 @@ def get(path=None, UID=None):\n     :returns: Content object\n     :raises:\n         ValueError,\n-    :Example: :ref:`content_get_example`\n+    :Example: :ref:`content-get-example`\n     """\n     if path:\n         site = portal.get()\n@@ -148,7 +148,7 @@ def move(source=None, target=None, id=None, safe_id=False):\n     :param target: Target container to which the source object will\n         be moved. If no target is specified, the source object\'s container will\n         be used as a target, effectively making this operation a rename\n-        (:ref:`content_rename_example`).\n+        (:ref:`content-rename-example`).\n     :type target: Folderish content object\n     :param id: Pass this parameter if you want to change the id of the moved\n         object on the target location. If the new id conflicts with another\n@@ -163,7 +163,7 @@ def move(source=None, target=None, id=None, safe_id=False):\n     :raises:\n         KeyError\n         ValueError\n-    :Example: :ref:`content_move_example`\n+    :Example: :ref:`content-move-example`\n     """\n     source_id = source.getId()\n \n@@ -194,7 +194,7 @@ def rename(obj=None, new_id=None, safe_id=False):\n         InvalidParameterError. When True, choose a new, non-conflicting id.\n     :type safe_id: boolean\n     :returns: Content object that was renamed\n-    :Example: :ref:`content_rename_example`\n+    :Example: :ref:`content-rename-example`\n     """\n     obj_id = obj.getId()\n     container = obj.aq_parent\n@@ -232,7 +232,7 @@ def copy(source=None, target=None, id=None, safe_id=False):\n     :raises:\n         KeyError,\n         ValueError\n-    :Example: :ref:`content_copy_example`\n+    :Example: :ref:`content-copy-example`\n     """\n     source_id = source.getId()\n \n@@ -271,7 +271,7 @@ def delete(obj=None, objects=None, check_linkintegrity=True):\n         ValueError\n         plone.app.linkintegrity.exceptions.LinkIntegrityNotificationException\n \n-    :Example: :ref:`content_delete_example`\n+    :Example: :ref:`content-delete-example`\n     """\n     objects = [obj] if obj else objects\n \n@@ -308,7 +308,7 @@ def get_state(obj=None, default=_marker):\n     :rtype: string\n     :raises:\n         Products.CMFCore.WorkflowCore.WorkflowException\n-    :Example: :ref:`content_get_state_example`\n+    :Example: :ref:`content-get-state-example`\n     """\n     workflow = portal.get_tool(\'portal_workflow\')\n \n@@ -440,7 +440,7 @@ def transition(obj=None, transition=None, to_state=None, **kwargs):\n     :raises:\n         :class:`~plone.api.exc.MissingParameterError`,\n         :class:`~plone.api.exc.InvalidParameterError`\n-    :Example: :ref:`content_transition_example`\n+    :Example: :ref:`content-transition-example`\n     """\n     workflow = portal.get_tool(\'portal_workflow\')\n     if transition is not None:\n@@ -474,7 +474,7 @@ def disable_roles_acquisition(obj=None):\n \n     :param obj: [required] Context object to block the acquisition on.\n     :type obj: Content object\n-    :Example: :ref:`content_disable_roles_acquisition_example`\n+    :Example: :ref:`content-disable-roles-acquisition-example`\n     """\n     plone_utils = portal.get_tool(\'plone_utils\')\n     plone_utils.acquireLocalRoles(obj, status=0)\n@@ -487,7 +487,7 @@ def enable_roles_acquisition(obj=None):\n \n     :param obj: [required] Context object to enable the acquisition on.\n     :type obj: Content object\n-    :Example: :ref:`content_enable_roles_acquisition_example`\n+    :Example: :ref:`content-enable-roles-acquisition-example`\n     """\n     plone_utils = portal.get_tool(\'plone_utils\')\n     plone_utils.acquireLocalRoles(obj, status=1)\n@@ -506,7 +506,7 @@ def get_view(name=None, context=None, request=None):\n     :raises:\n         :class:`~plone.api.exc.MissingParameterError`,\n         :class:`~plone.api.exc.InvalidParameterError`\n-    :Example: :ref:`content_get_view_example`\n+    :Example: :ref:`content-get-view-example`\n     """\n     # We do not use exceptionhandling to detect if the requested view is\n     # available, because the __init__ of said view will contain\n@@ -544,7 +544,7 @@ def get_uuid(obj=None):\n     :rtype: string\n     :raises:\n         ValueError\n-    :Example: :ref:`content_get_uuid_example`\n+    :Example: :ref:`content-get-uuid-example`\n     """\n     return IUUID(obj)\n \n@@ -597,7 +597,7 @@ def find(context=None, depth=None, **kwargs):\n     :type obj: Content object\n     :returns: Catalog brains\n     :rtype: List\n-    :Example: :ref:`content_find_example`\n+    :Example: :ref:`content-find-example`\n \n     """\n     query = {}\ndiff --git a/src/plone/api/env.py b/src/plone/api/env.py\nindex acd7e6f..f8ccbc5 100644\n--- a/src/plone/api/env.py\n+++ b/src/plone/api/env.py\n@@ -29,7 +29,7 @@ def adopt_user(username=None, user=None):\n     :type user: user object from acl_users.getUser() or api.user.get().\n     :param username: username of user to switch to inside block.\n     :type username: string\n-    :Example: :ref:`env_adopt_user_example`\n+    :Example: :ref:`env-adopt-user-example`\n     """\n     # Grab the user object out of acl_users because this function\n     # accepts \'user\' objects that are actually things like MemberData\n@@ -89,7 +89,7 @@ def adopt_roles(roles=None):\n \n     :param roles: New roles to gain inside block. Existing roles will be lost.\n     :type roles: list of strings\n-    :Example: :ref:`env_adopt_roles_example`\n+    :Example: :ref:`env-adopt-roles-example`\n     """\n     if isinstance(roles, str):\n         roles = [roles]\n@@ -180,7 +180,7 @@ def getWrappedOwner(self):\n def debug_mode():\n     """Returns True if your zope instance is running in debug mode.\n \n-    :Example: :ref:`env_debug_mode_example`\n+    :Example: :ref:`env-debug-mode-example`\n     """\n     return getConfiguration().debug_mode\n \n@@ -188,7 +188,7 @@ def debug_mode():\n def test_mode():\n     """Returns True if you are running the zope test runner.\n \n-    :Example: :ref:`env_test_mode_example`\n+    :Example: :ref:`env-test-mode-example`\n     """\n     global IS_TEST\n \n@@ -206,7 +206,7 @@ def read_only_mode():\n     """Check if the Zope instance is running on a read-only ZODB.\n \n     :returns: bool isReadOnly True if ZODB is read-only\n-    :Example: :ref:`env_read_only_mode_example`\n+    :Example: :ref:`env-read-only-mode-example`\n     """\n     with closing(Zope2.DB.open()) as connection:\n         return connection.isReadOnly()\n@@ -216,7 +216,7 @@ def plone_version():\n     """Return Plone version number.\n \n     :returns: string denoting what release of Plone this distribution contains\n-    :Example: :ref:`env_plone_version_example`\n+    :Example: :ref:`env-plone-version-example`\n     """\n     return get_distribution(\'Products.CMFPlone\').version\n \n@@ -225,6 +225,6 @@ def zope_version():\n     """Return Zope 2 version number.\n \n     :returns: string denoting what release of Zope2 this distribution contains\n-    :Example: :ref:`env_zope_version_example`\n+    :Example: :ref:`env-zope-version-example`\n     """\n     return get_distribution(\'Zope2\').version\ndiff --git a/src/plone/api/group.py b/src/plone/api/group.py\nindex f56e186..30bf4c7 100644\n--- a/src/plone/api/group.py\n+++ b/src/plone/api/group.py\n@@ -34,7 +34,7 @@ def create(\n     :rtype: GroupData object\n     :raises:\n         ValueError\n-    :Example: :ref:`group_create_example`\n+    :Example: :ref:`group-create-example`\n     """\n     group_tool = portal.get_tool(\'portal_groups\')\n     group_tool.addGroup(\n@@ -57,7 +57,7 @@ def get(groupname=None):\n     :rtype: GroupData object\n     :raises:\n         ValueError\n-    :Example: :ref:`group_get_example`\n+    :Example: :ref:`group-get-example`\n     """\n     group_tool = portal.get_tool(\'portal_groups\')\n     return group_tool.getGroupById(groupname)\n@@ -79,8 +79,8 @@ def get_groups(username=None, user=None):\n     :returns: All groups (optionlly filtered by user)\n     :rtype: List of GroupData objects\n     :raises: UserNotFoundError\n-    :Example: :ref:`group_get_all_groups_example`,\n-        :ref:`group_get_users_groups_example`\n+    :Example: :ref:`group-get-all-groups-example`,\n+        :ref:`group-get-users-groups-example`\n     """\n     if username:\n         user = user_get(username=username)\n@@ -117,7 +117,7 @@ def delete(groupname=None, group=None):\n     :type group: GroupData object\n     :raises:\n         ValueError\n-    :Example: :ref:`group_delete_example`\n+    :Example: :ref:`group-delete-example`\n     """\n     group_tool = portal.get_tool(\'portal_groups\')\n \n@@ -151,7 +151,7 @@ def add_user(groupname=None, group=None, username=None, user=None):\n     :raises:\n         ValueError\n         UserNotFoundError\n-    :Example: :ref:`group_add_user_example`\n+    :Example: :ref:`group-add-user-example`\n \n     """\n     if username:\n@@ -189,7 +189,7 @@ def remove_user(groupname=None, group=None, username=None, user=None):\n     :raises:\n         ValueError\n         UserNotFoundError\n-    :Example: :ref:`group_remove_user_example`\n+    :Example: :ref:`group-remove-user-example`\n     """\n     if username:\n         user = user_get(username=username)\n@@ -219,7 +219,7 @@ def get_roles(groupname=None, group=None, obj=None, inherit=True):\n     :type inherit: boolean\n     :raises:\n         ValueError\n-    :Example: :ref:`group_get_roles_example`\n+    :Example: :ref:`group-get-roles-example`\n     """\n     group_id = groupname or group.id\n \n@@ -268,7 +268,7 @@ def grant_roles(groupname=None, group=None, roles=None, obj=None):\n     :type obj: content object\n     :raises:\n         ValueError\n-    :Example: :ref:`group_grant_roles_example`\n+    :Example: :ref:`group-grant-roles-example`\n     """\n     if \'Anonymous\' in roles or \'Authenticated\' in roles:\n         raise ValueError\n@@ -315,7 +315,7 @@ def revoke_roles(groupname=None, group=None, roles=None, obj=None):\n     :type obj: content object\n     :raises:\n         ValueError\n-    :Example: :ref:`group_revoke_roles_example`\n+    :Example: :ref:`group-revoke-roles-example`\n     """\n     if \'Anonymous\' in roles or \'Authenticated\' in roles:\n         raise ValueError\ndiff --git a/src/plone/api/portal.py b/src/plone/api/portal.py\nindex 49b9127..7b5f188 100644\n--- a/src/plone/api/portal.py\n+++ b/src/plone/api/portal.py\n@@ -59,7 +59,7 @@ def get():\n \n     :returns: Plone portal object\n     :rtype: Portal object\n-    :Example: :ref:`portal_get_example`\n+    :Example: :ref:`portal-get-example`\n     """\n \n     closest_site = getSite()\n@@ -70,7 +70,7 @@ def get():\n \n     raise CannotGetPortalError(\n         \'Unable to get the portal object. More info on \'\n-        \'http://docs.plone.org/develop/plone.api/docs/api/exceptions.html\'\n+        \'https://docs.plone.org/develop/plone.api/docs/api/exceptions.html\'\n         \'#plone.api.exc.CannotGetPortalError\',\n     )\n \n@@ -86,7 +86,7 @@ def get_navigation_root(context=None):\n     :type context: context object\n     :returns: Navigation Root\n     :rtype: Portal object\n-    :Example: :ref:`portal_get_navigation_root_example`\n+    :Example: :ref:`portal-get-navigation-root-example`\n     """\n     context = aq_inner(context)\n     return getNavigationRootObject(context, get())\n@@ -102,7 +102,7 @@ def get_tool(name=None):\n     :raises:\n         :class:`~plone.api.exc.MissingParameterError`,\n         :class:`~plone.api.exc.InvalidParameterError`\n-    :Example: :ref:`portal_get_tool_example`\n+    :Example: :ref:`portal-get-tool-example`\n     """\n     try:\n         return getToolByName(get(), name)\n@@ -147,7 +147,7 @@ def send_email(\n     :type body: boolean\n     :raises:\n         ValueError\n-    :Example: :ref:`portal_send_email_example`\n+    :Example: :ref:`portal-send-email-example`\n     """\n     portal = get()\n \n@@ -214,7 +214,7 @@ def get_localized_time(datetime=None, long_format=False, time_only=False):\n     :rtype: string\n     :raises:\n         ValueError\n-    :Example: :ref:`portal_get_localized_time_example`\n+    :Example: :ref:`portal-get-localized-time-example`\n     """\n     tool = get_tool(name=\'translation_service\')\n     request = getRequest()\n@@ -247,7 +247,7 @@ def show_message(message=None, request=None, type=\'info\'):\n     :type type: string\n     :raises:\n         ValueError\n-    :Example: :ref:`portal_show_message_example`\n+    :Example: :ref:`portal-show-message-example`\n     """\n     IStatusMessage(request).add(message, type=type)\n \n@@ -265,7 +265,7 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n     :type default: anything\n     :returns: Registry record value\n     :rtype: plone.app.registry registry record\n-    :Example: :ref:`portal_get_registry_record_example`\n+    :Example: :ref:`portal-get-registry-record-example`\n     """\n     if not isinstance(name, str):\n         raise InvalidParameterError("The \'name\' parameter has to be a string")\n@@ -333,7 +333,7 @@ def set_registry_record(name=None, value=None, interface=None):\n     :param interface: interface whose attributes are plone.app.registry\n         settings\n     :type interface: zope.interface.Interface\n-    :Example: :ref:`portal_set_registry_record_example`\n+    :Example: :ref:`portal-set-registry-record-example`\n     """\n     if not isinstance(name, str):\n         raise InvalidParameterError("The parameter \'name\' has to be a string")\n@@ -381,7 +381,7 @@ def get_default_language():\n \n     :returns: language identifier\n     :rtype: string\n-    :Example: :ref:`portal_get_default_language_example`\n+    :Example: :ref:`portal-get-default-language-example`\n     """\n     from plone.i18n.interfaces import ILanguageSchema\n     registry = getUtility(IRegistry)\n@@ -396,7 +396,7 @@ def get_current_language(context=None):\n     :type context: object\n     :returns: language identifier\n     :rtype: string\n-    :Example: :ref:`portal_get_current_language_example`\n+    :Example: :ref:`portal-get-current-language-example`\n     """\n     request = getRequest()\n     return request.get(\'LANGUAGE\', None) or \\\n@@ -417,7 +417,7 @@ def translate(msgid, domain=\'plone\', lang=None):\n     :type lang: string\n     :returns: translated message\n     :rtype: str\n-    :Example: :ref:`portal_translate_example`\n+    :Example: :ref:`portal-translate-example`\n     """\n     translation_service = get_tool(\'translation_service\')\n     query = {\ndiff --git a/src/plone/api/relation.py b/src/plone/api/relation.py\nindex 36a1bdd..1de0f4c 100644\n--- a/src/plone/api/relation.py\n+++ b/src/plone/api/relation.py\n@@ -71,7 +71,7 @@ def get(\n     :returns: A list of relations\n     :rtype: List of RelationValue objects\n \n-    :Example: :ref:`relation_get_example`\n+    :Example: :ref:`relation-get-example`\n     """\n     if source is not None and not base_hasattr(source, \'portal_type\'):\n         raise InvalidParameterError(\'{} has no portal_type\'.format(source))\n@@ -140,11 +140,12 @@ def create(source=None, target=None, relationship=None):\n     :type source: Content object\n     :param target: [required] Object that the relation will point to.\n     :type target: Content object\n-    :param relationship: [required] Relationship name. If that name is the same\n-    as a field name and this field is a RelationChoice/RelationList we will\n-    update the field-value accordingly.\n+    :param relationship: [required] Relationship name.\n+        If that name is the same as a field name and this field\n+        is a RelationChoice / RelationList\n+        we will update the field-value accordingly.\n     :type id: string\n-    :Example: :ref:`relation_create_example`\n+    :Example: :ref:`relation-create-example`\n     """\n     if source is not None and not base_hasattr(source, \'portal_type\'):\n         raise InvalidParameterError(\'{} has no portal_type\'.format(source))\n@@ -254,11 +255,12 @@ def delete(source=None, target=None, relationship=None):\n     :type source: Content object\n     :param target: Object that the relation points to.\n     :type target: Content object\n-    :param relationship: Relationship name. If that name is the same\n-        as a field name and this field is a RelationChoice/RelationList we\n-        will delete/update the field-value accordingly.\n+    :param relationship: Relationship name.\n+        If that name is the same as a field name\n+        and this field is a RelationChoice/RelationList\n+        we will delete/update the field-value accordingly.\n     :type id: string\n-    :Example: :ref:`relation_delete_example`\n+    :Example: :ref:`relation-delete-example`\n     """\n     if source is not None and not base_hasattr(source, \'portal_type\'):\n         raise InvalidParameterError(\'{} has no portal_type\'.format(source))\ndiff --git a/src/plone/api/user.py b/src/plone/api/user.py\nindex 375d865..0042824 100644\n--- a/src/plone/api/user.py\n+++ b/src/plone/api/user.py\n@@ -44,7 +44,7 @@ def create(\n     :raises:\n         MissingParameterError\n         InvalidParameterError\n-    :Example: :ref:`user_create_example`\n+    :Example: :ref:`user-create-example`\n     """\n     if properties is None:\n         # Never use a dict as default for a keyword argument.\n@@ -108,7 +108,7 @@ def get(userid=None, username=None):\n     :rtype: MemberData object\n     :raises:\n         MissingParameterError\n-    :Example: :ref:`user_get_example`\n+    :Example: :ref:`user-get-example`\n     """\n     if userid is not None:\n         portal_membership = portal.get_tool(\'portal_membership\')\n@@ -126,7 +126,7 @@ def get_current():\n \n     :returns: Currently logged-in user\n     :rtype: MemberData object\n-    :Example: :ref:`user_get_current_example`\n+    :Example: :ref:`user-get-current-example`\n     """\n     portal_membership = portal.get_tool(\'portal_membership\')\n     return portal_membership.getAuthenticatedMember()\n@@ -147,8 +147,8 @@ def get_users(groupname=None, group=None):\n     :type group: GroupData object\n     :returns: All users (optionally filtered by group)\n     :rtype: List of MemberData objects\n-    :Example: :ref:`user_get_all_users_example`,\n-        :ref:`user_get_groups_users_example`\n+    :Example: :ref:`user-get-all-users-example`,\n+        :ref:`user-get-groups-users-example`\n     """\n     if groupname:\n         group_tool = portal.get_tool(\'portal_groups\')\n@@ -179,7 +179,7 @@ def delete(username=None, user=None):\n     :raises:\n         MissingParameterError\n         InvalidParameterError\n-    :Example: :ref:`user_delete_example`\n+    :Example: :ref:`user-delete-example`\n     """\n     portal_membership = portal.get_tool(\'portal_membership\')\n     user_id = username or user.id\n@@ -191,7 +191,7 @@ def is_anonymous():\n \n     :returns: True if the current user is anonymous, False otherwise.\n     :rtype: bool\n-    :Example: :ref:`user_is_anonymous_example`\n+    :Example: :ref:`user-is-anonymous-example`\n     """\n     return bool(portal.get_tool(\'portal_membership\').isAnonymousUser())\n \n@@ -216,7 +216,7 @@ def get_roles(username=None, user=None, obj=None, inherit=True):\n     :type inherit: bool\n     :raises:\n         MissingParameterError\n-    :Example: :ref:`user_get_roles_example`\n+    :Example: :ref:`user-get-roles-example`\n     """\n     portal_membership = portal.get_tool(\'portal_membership\')\n \n@@ -278,7 +278,7 @@ def get_permissions(username=None, user=None, obj=None):\n     :type obj: content object\n     :raises:\n         InvalidParameterError\n-    :Example: :ref:`user_get_permissions_example`\n+    :Example: :ref:`user-get-permissions-example`\n     """\n     if obj is None:\n         obj = portal.get()\n@@ -351,7 +351,7 @@ def grant_roles(username=None, user=None, obj=None, roles=None):\n     :raises:\n         InvalidParameterError\n         MissingParameterError\n-    :Example: :ref:`user_grant_roles_example`\n+    :Example: :ref:`user-grant-roles-example`\n     """\n     if user is None:\n         user = get(username=username)\n@@ -399,7 +399,7 @@ def revoke_roles(username=None, user=None, obj=None, roles=None):\n     :type roles: list of strings\n     :raises:\n         InvalidParameterError\n-    :Example: :ref:`user_revoke_roles_example`\n+    :Example: :ref:`user-revoke-roles-example`\n     """\n     if user is None:\n         user = get(username=username)\ndiff --git a/tox.ini b/tox.ini\nindex 5d0b011..4574f5c 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,11 +1,14 @@\n [tox]\n envlist =\n     py{36,37,38}-plone-{5.2},\n-    docs,\n #    black-check,\n     isort,\n     lint,\n     coverage-report,\n+    plone6docs,\n+    docs\n+    docs-livehtml\n+    linkcheck\n \n skip_missing_interpreters = False\n \n@@ -134,6 +137,25 @@ commands =\n whitelist_externals =\n     mkdir\n \n+\n+[testenv:plone6docs]\n+# New docs with sphinx-book-theme\n+# See [testenv:docs] for classic documentation\n+basepython = python\n+skip_install = False\n+usedevelop = True\n+extras =\n+    tests\n+\n+deps =\n+    -r requirements-docs.txt\n+\n+commands =\n+    python -VV\n+    mkdir -p {toxinidir}/_build/plone6docs\n+    sphinx-build -b html -d _build/plone6docs/doctrees docs _build/plone6docs/html\n+\n+\n [testenv:docs]\n # Locally for Maurits this only works with Python 2.7.\n # Travis is happy with 3.7, not with 3.8 or 3.9.\n@@ -150,12 +172,40 @@ deps =\n commands =\n     python -VV\n     mkdir -p {toxinidir}/_build/docs\n-    sphinx-build -b html -d _build/docs/doctrees docs _build/docs/html\n-#    sphinx-build -b doctest docs _build/docs/doctrees\n+    sphinx-build -b html -D html_theme=alabaster -d _build/docs/doctrees docs _build/docs/html\n \n whitelist_externals =\n     mkdir\n \n+\n+[testenv:linkcheck]\n+basepython = python\n+skip_install = False\n+usedevelop = True\n+extras =\n+    {[testenv:plone6docs]extras}\n+deps =\n+    {[testenv:plone6docs]deps}\n+commands =\n+    python -VV\n+    mkdir -p {toxinidir}/_build/plone6docs\n+    sphinx-build -b linkcheck -d _build/plone6docs/doctrees docs _build/plone6docs/linkcheck\n+\n+\n+[testenv:docs-livehtml]\n+basepython = python\n+skip_install = False\n+usedevelop = True\n+extras =\n+    {[testenv:plone6docs]extras}\n+deps =\n+    {[testenv:plone6docs]deps}\n+commands =\n+    python -VV\n+    mkdir -p {toxinidir}/_build/plone6docs\n+    sphinx-autobuild --ignore "*.swp" -b html docs _build/plone6docs/html \n+\n+\n [testenv:towncrier]\n basepython = python\n skip_install = True\n'

