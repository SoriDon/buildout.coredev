Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-08-09T18:19:00+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.app.layout/commit/ab0851145a0f2d3bd5e6f9fb029a5dbd0721eb80

Refs #204 - Optimize @@historyview workflowHistory user info

Files changed:
M plone/app/layout/viewlets/content.py

b'diff --git a/plone/app/layout/viewlets/content.py b/plone/app/layout/viewlets/content.py\nindex 9651ab2d..e5e23f7d 100644\n--- a/plone/app/layout/viewlets/content.py\n+++ b/plone/app/layout/viewlets/content.py\n@@ -320,6 +320,20 @@ class WorkflowHistoryViewlet(ViewletBase):\n \n     index = ViewPageTemplateFile("review_history.pt")\n \n+    @memoize\n+    def getUserInfo(self, userid):\n+        mt = getToolByName(self.context, \'portal_membership\')\n+        info = mt.getMemberInfo(userid)\n+        if info is None:\n+            return dict(actor_home="",\n+                        actor=dict(fullname=userid))\n+\n+        if not info.get("fullname", None):\n+            info["fullname"] = userid\n+\n+        return dict(actor=info,\n+                    actor_home="%s/author/%s" % (self.site_url, userid))\n+\n     def workflowHistory(self, complete=True):\n         """Return workflow history of this context.\n \n@@ -332,8 +346,6 @@ def workflowHistory(self, complete=True):\n             return []\n \n         workflow = getToolByName(context, \'portal_workflow\')\n-        membership = getToolByName(context, \'portal_membership\')\n-\n         review_history = []\n \n         try:\n@@ -362,14 +374,7 @@ def workflowHistory(self, complete=True):\n                     r[\'actor\'] = {\'username\': anon, \'fullname\': anon}\n                     r[\'actor_home\'] = \'\'\n                 else:\n-                    r[\'actor\'] = membership.getMemberInfo(actorid)\n-                    if r[\'actor\'] is not None:\n-                        r[\'actor_home\'] = self.navigation_root_url + \\\n-                            \'/author/\' + actorid\n-                    else:\n-                        # member info is not available\n-                        # the user was probably deleted\n-                        r[\'actor_home\'] = \'\'\n+                    r.update(self.getUserInfo(actorid))\n             review_history.reverse()\n \n         except WorkflowException:\n@@ -384,20 +389,6 @@ class ContentHistoryViewlet(WorkflowHistoryViewlet):\n \n     index = ViewPageTemplateFile("content_history.pt")\n \n-    @memoize\n-    def getUserInfo(self, userid):\n-        mt = getToolByName(self.context, \'portal_membership\')\n-        info = mt.getMemberInfo(userid)\n-        if info is None:\n-            return dict(actor_home="",\n-                        actor=dict(fullname=userid))\n-\n-        if not info.get("fullname", None):\n-            info["fullname"] = userid\n-\n-        return dict(actor=info,\n-                    actor_home="%s/author/%s" % (self.site_url, userid))\n-\n     def revisionHistory(self):\n         context = aq_inner(self.context)\n         if not _checkPermission(AccessPreviousVersions, context):\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-08-09T18:19:03+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.app.layout/commit/4ea45d0240dcb70a0d233ae75807a80b7d299793

Fixes #204 - Fix memory leak on getUserInfo

Files changed:
M plone/app/layout/viewlets/content.py

b'diff --git a/plone/app/layout/viewlets/content.py b/plone/app/layout/viewlets/content.py\nindex e5e23f7d..17196a8c 100644\n--- a/plone/app/layout/viewlets/content.py\n+++ b/plone/app/layout/viewlets/content.py\n@@ -322,16 +322,17 @@ class WorkflowHistoryViewlet(ViewletBase):\n \n     @memoize\n     def getUserInfo(self, userid):\n+        actor = dict(fullname=userid)\n         mt = getToolByName(self.context, \'portal_membership\')\n         info = mt.getMemberInfo(userid)\n         if info is None:\n-            return dict(actor_home="",\n-                        actor=dict(fullname=userid))\n+            return dict(actor_home="", actor=actor)\n \n-        if not info.get("fullname", None):\n-            info["fullname"] = userid\n+        fullname = info.get("fullname", None)\n+        if fullname:\n+            actor[\'fullname\'] = fullname\n \n-        return dict(actor=info,\n+        return dict(actor=actor,\n                     actor_home="%s/author/%s" % (self.site_url, userid))\n \n     def workflowHistory(self, complete=True):\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-08-09T18:35:58+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.app.layout/commit/d7cb958735ccd8c62386b7e85ff006d5b7d9b6df

Refs #204 - Update Changelog

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 2333f744..155a39dd 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -15,6 +15,8 @@ New features:\n \n Bug fixes:\n \n+- Memory leak on getUserInfo [avoinea] (#204)\n+\n - Show document byline for logged-in users. Fixes #160\n   [erral]\n \n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-09-09T10:42:14+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.layout/commit/39db6e3cf20e8157f50c15a182be914b0405bb5e

Merge branch 'master' into python3

Files changed:
A news/.gitkeep
A pyproject.toml
M .gitignore
M CHANGES.rst
M MANIFEST.in
M plone/app/layout/globals/layout.py
M plone/app/layout/navigation/defaultpage.py
M plone/app/layout/navigation/interfaces.py
M plone/app/layout/testing.py
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/globalstatusmessage.pt
M plone/app/layout/viewlets/httpheaders.py
M plone/app/layout/viewlets/sections.pt
M plone/app/layout/viewlets/tests/test_common.py
M setup.cfg
M setup.py

b'diff --git a/.gitignore b/.gitignore\nindex 851e4574..562df3ee 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -24,3 +24,4 @@ docs/Makefile\n docs/make.bat\n docs/doctrees\n docs/html\n+.DS_Store\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 155a39dd..2bdedceb 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,21 +1,108 @@\n Changelog\n =========\n \n-2.8.2 (unreleased)\n+.. You should *NOT* be adding new change log entries to this file.\n+   You should create a file in the news directory instead.\n+   For helpful instructions, please see:\n+   https://github.com/plone/plone.releaser/blob/master/ADD-A-NEWS-ITEM.rst\n+\n+.. towncrier release notes start\n+\n+3.2.2 (2019-08-29)\n+------------------\n+\n+Bug fixes:\n+\n+- Memory leak on getUserInfo [avoinea] (#204)\n+\n+\n+3.2.1 (2019-07-06)\n+------------------\n+\n+Bug fixes:\n+\n+- fix GlobalStatusMessage type translation (#202)\n+  [laulaz]\n+\n+- fix portal_tabs_view.topLevelTabs called twice\n+  [mamico] (#201)\n+\n+\n+3.2.0 (2019-06-27)\n+------------------\n+\n+New features:\n+\n+\n+- Add support for Python 3.8 [pbauer] (#200)\n+\n+\n+3.1.3 (2019-05-01)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- fix ``show_excluded_items`` in combination with ``exclude_from_nav`` setting\n+  [petschki] (#190)\n+- Remove unused imports (and so a DeprecationWarning). [jensens] (#193)\n+- Make navigation (global sections) subclassing easier. [iham] (#194)\n+\n+\n+3.1.2 (2019-03-21)\n ------------------\n \n Breaking changes:\n \n-- *add item here*\n+\n+- Remove the ``plone.navtree`` content provider that was introduced in the context of the Navigation PLIP (https://github.com/plone/Products.CMFPlone/issues/2516) [ale-rt] (#188)\n+\n+\n+3.1.1 (2019-03-03)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Improve the new navigation and add test coverage [ale-rt] (#181)\n+- Provide a proper unique id and a review state class for the first level tabs\n+  [ale-rt] (#184)\n+- Fix tests since the default nav-depth is now 3 for new sites. [pbauer] (#187)\n+\n+\n+3.1.0 (2019-02-13)\n+------------------\n+\n+New features:\n+\n+\n+- Added multilevel dropdown navigation [agitator] (#2516)\n+\n+\n+Bug fixes:\n+\n+\n+- fix python3 compatibility [petschki] (#176)\n+- Fix some issues with the new navigation. (Fixes\n+  https://github.com/plone/Products.CMFPlone/issues/2731 and\n+  https://github.com/plone/Products.CMFPlone/issues/2730) [pbauer] (#180)\n+\n+\n+3.0.0 (2018-10-30)\n+------------------\n \n New features:\n \n - Add test for Revert to Revision action in History Viewlet\n   [davilima6]\n \n+- Remove ``enable_compression`` method that isn\'t used in Plone. #1801\n+  [tlotze]\n+\n Bug fixes:\n \n-- Memory leak on getUserInfo [avoinea] (#204)\n+- Add template and view arguments support to IBodyClassAdapters (fixes `#158 <https://github.com/plone/plone.app.layout/issues/158>`_).\n+  [rodfersou]\n \n - Show document byline for logged-in users. Fixes #160\n   [erral]\ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex 90086303..74225c91 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -1,6 +1,10 @@\n include *.rst\n+include pyproject.toml\n \n graft docs\n graft plone\n \n global-exclude *.pyc\n+\n+recursive-exclude news *\n+exclude news\ndiff --git a/news/.gitkeep b/news/.gitkeep\nnew file mode 100644\nindex 00000000..e69de29b\ndiff --git a/plone/app/layout/globals/layout.py b/plone/app/layout/globals/layout.py\nindex 0587e45e..60003175 100644\n--- a/plone/app/layout/globals/layout.py\n+++ b/plone/app/layout/globals/layout.py\n@@ -27,6 +27,7 @@\n from zope.publisher.browser import BrowserView\n \n import json\n+import six\n \n \n TEMPLATE_CLASSES = (\n@@ -321,8 +322,11 @@ def bodyClass(self, template, view):\n             IBodyClassAdapter\n         )\n         for name, body_class_adapter in body_class_adapters:\n-            extra_classes = body_class_adapter.get_classes() or []\n-            if isinstance(extra_classes, basestring):\n+            try:\n+                extra_classes = body_class_adapter.get_classes(template, view) or []\n+            except TypeError:  # This adapter is implemented without arguments\n+                extra_classes = body_class_adapter.get_classes() or []\n+            if isinstance(extra_classes, six.string_types):\n                 extra_classes = extra_classes.split(\' \')\n             body_classes.update(extra_classes)\n \n@@ -337,7 +341,7 @@ def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n-    def get_classes(self):\n+    def get_classes(self, template, view):\n         """Default body classes adapter.\n         """\n         return []\ndiff --git a/plone/app/layout/navigation/defaultpage.py b/plone/app/layout/navigation/defaultpage.py\nindex a5c055c2..ee9a0ffa 100644\n--- a/plone/app/layout/navigation/defaultpage.py\n+++ b/plone/app/layout/navigation/defaultpage.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from zope.deferredimport import deprecated\n \n-\n+# remove in Plone 6\n deprecated(\n     "Import from Products.CMFPlone instead",\n     DefaultPage=\'Products.CMFPlone.browser.defaultpage:DefaultPage\',\ndiff --git a/plone/app/layout/navigation/interfaces.py b/plone/app/layout/navigation/interfaces.py\nindex a2f854cf..67739ce9 100644\n--- a/plone/app/layout/navigation/interfaces.py\n+++ b/plone/app/layout/navigation/interfaces.py\n@@ -3,7 +3,7 @@\n from zope.interface import Attribute\n from zope.interface import Interface\n \n-\n+# remove in plone 6\n deprecated(\n     "Import from Products.CMFPlone instead",\n     IDefaultPage=\'Products.CMFPlone.interfaces.defaultpage:DefaultPage\',\ndiff --git a/plone/app/layout/testing.py b/plone/app/layout/testing.py\nindex dc684d65..e59429e9 100644\n--- a/plone/app/layout/testing.py\n+++ b/plone/app/layout/testing.py\n@@ -4,8 +4,6 @@\n from plone.app.testing import IntegrationTesting\n from plone.app.testing import PloneSandboxLayer\n from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n-from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFPlone.utils import _createObjectByType\n \n \ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex e43a5fe8..79b9fbc0 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -2,18 +2,22 @@\n from AccessControl import getSecurityManager\n from Acquisition import aq_base\n from Acquisition import aq_inner\n-from cgi import escape\n+from collections import defaultdict\n from datetime import date\n from functools import total_ordering\n from plone.app.layout.globals.interfaces import IViewView\n+from plone.app.layout.navigation.root import getNavigationRoot\n from plone.app.layout.navigation.root import getNavigationRootObject\n from plone.memoize.view import memoize\n+from plone.memoize.view import memoize_contextless\n from plone.protect.utils import addTokenToUrl\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n from Products.CMFPlone.interfaces import ISearchSchema\n from Products.CMFPlone.interfaces import ISiteSchema\n+from Products.CMFPlone.interfaces.controlpanel import ILanguageSchema\n+from Products.CMFPlone.interfaces.controlpanel import INavigationSchema\n from Products.CMFPlone.utils import getSiteLogo\n from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser import BrowserView\n@@ -28,6 +32,11 @@\n from zope.interface import implementer\n from zope.viewlet.interfaces import IViewlet\n \n+try:\n+    from html import escape\n+except ImportError:\n+    from cgi import escape\n+\n \n @implementer(IViewlet)\n @total_ordering\n@@ -216,12 +225,177 @@ def update(self):\n class GlobalSectionsViewlet(ViewletBase):\n     index = ViewPageTemplateFile(\'sections.pt\')\n \n+    _opener_markup_template = (\n+        u\'<input id="navitem-{uid}" type="checkbox" class="opener" />\'\n+        u\'<label for="navitem-{uid}" role="button" aria-label="{title}"></label>\'  # noqa: E 501\n+    )\n+    _item_markup_template = (\n+        u\'<li class="{id}{has_sub_class}">\'\n+        u\'<a href="{url}" class="state-{review_state}"{aria_haspopup}>{title}</a>{opener}\'  # noqa: E 501\n+        u\'{sub}\'\n+        u\'</li>\'\n+    )\n+    _subtree_markup_wrapper = (\n+        u\'<ul class="has_subtree dropdown">{out}</ul>\'\n+    )\n+\n+    @property\n+    @memoize_contextless\n+    def settings(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(INavigationSchema, prefix=\'plone\')\n+        return settings\n+\n+    @property\n+    def language_settings(self):\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ILanguageSchema, prefix=\'plone\')\n+        return settings\n+\n+    @property\n+    def navtree_path(self):\n+        return getNavigationRoot(self.context)\n+\n+    @property\n+    def navtree_depth(self):\n+        return self.settings.navigation_depth\n+\n+    @property\n+    def current_language(self):\n+        return (\n+            self.request.get(\'LANGUAGE\', None)\n+            or (self.context and aq_inner(self.context).Language())\n+            or self.language_settings.default_language\n+        )\n+\n+    @property\n+    @memoize\n+    def navtree(self):\n+        ret = defaultdict(list)\n+        navtree_path = self.navtree_path\n+        for tab in self.portal_tabs:\n+            entry = tab.copy()\n+            entry.update({\n+                \'path\': \'/\'.join((navtree_path, tab[\'id\'])),\n+                \'uid\': tab[\'id\'],\n+            })\n+            if \'review_state\' not in entry:\n+                entry[\'review_state\'] = None\n+            if \'title\' not in entry:\n+                entry[\'title\'] = (\n+                    tab.get(\'name\')\n+                    or tab.get(\'description\')\n+                    or tab[\'id\']\n+                )\n+            entry[\'title\'] = safe_unicode(entry[\'title\'])\n+            ret[navtree_path].append(entry)\n+\n+        if not self.settings.generate_tabs:\n+            return ret\n+\n+        query = {\n+            \'path\': {\n+                \'query\': self.navtree_path,\n+                \'depth\': self.navtree_depth,\n+            },\n+            \'portal_type\': {\'query\': self.settings.displayed_types},\n+            \'Language\': self.current_language,\n+            \'sort_on\': self.settings.sort_tabs_on,\n+            \'is_default_page\': False,\n+        }\n+\n+        if self.settings.sort_tabs_reversed:\n+            query[\'sort_order\'] = \'reverse\'\n+\n+        if not self.settings.nonfolderish_tabs:\n+            query[\'is_folderish\'] = True\n+\n+        if self.settings.filter_on_workflow:\n+            query[\'review_state\'] = list(\n+                self.settings.workflow_states_to_show or ()\n+            )\n+\n+        if not self.settings.show_excluded_items:\n+            query[\'exclude_from_nav\'] = False\n+\n+        context_path = \'/\'.join(self.context.getPhysicalPath())\n+        portal_catalog = getToolByName(self.context, \'portal_catalog\')\n+        brains = portal_catalog.searchResults(**query)\n+\n+        registry = getUtility(IRegistry)\n+        types_using_view = registry.get(\n+            \'plone.types_use_view_action_in_listings\', [])\n+\n+        for brain in brains:\n+            brain_path = brain.getPath()\n+            brain_parent_path = brain_path.rpartition(\'/\')[0]\n+            if brain_parent_path == navtree_path:\n+                # This should be already provided by the portal_tabs_view\n+                continue\n+            if brain.exclude_from_nav and not context_path.startswith(brain_path):  # noqa: E501\n+                # skip excluded items if they\'re not in our context path\n+                continue\n+            url = brain.getURL()\n+            if brain.portal_type in types_using_view:\n+                url += \'/view\'\n+            entry = {\n+                \'id\': brain.getId,\n+                \'path\': brain_path,\n+                \'uid\': brain.UID,\n+                \'url\': url,\n+                \'title\': safe_unicode(brain.Title),\n+                \'review_state\': brain.review_state,\n+            }\n+            self.customize_entry(entry, brain)\n+            ret[brain_parent_path].append(entry)\n+        return ret\n+\n+    def customize_entry(self, entry, brain):\n+        """a little helper to add custom entry keys/values."""\n+        pass\n+\n+    def render_item(self, item, path):\n+        sub = self.build_tree(item[\'path\'], first_run=False)\n+        if sub:\n+            item.update({\n+                \'sub\': sub,\n+                \'opener\':  self._opener_markup_template.format(**item),\n+                \'aria_haspopup\': \' aria-haspopup="true"\',\n+                \'has_sub_class\': \' has_subtree\',\n+            })\n+        else:\n+            item.update({\n+                \'sub\': sub,\n+                \'opener\':  \'\',\n+                \'aria_haspopup\': \'\',\n+                \'has_sub_class\': \'\',\n+            })\n+        return self._item_markup_template.format(**item)\n+\n+    def build_tree(self, path, first_run=True):\n+        """Non-template based recursive tree building.\n+        3-4 times faster than template based.\n+        """\n+        out = u\'\'\n+        for item in self.navtree.get(path, []):\n+            out += self.render_item(item, path)\n+\n+        if not first_run and out:\n+            out = self._subtree_markup_wrapper.format(out=out)\n+        return out\n+\n+    def render_globalnav(self):\n+        return self.build_tree(self.navtree_path)\n+\n+    @property\n+    @memoize\n+    def portal_tabs(self):\n+        portal_tabs_view = getMultiAdapter((self.context, self.request),\n+               name=\'portal_tabs_view\')\n+        return portal_tabs_view.topLevelTabs()\n+\n     def update(self):\n         context = aq_inner(self.context)\n-        portal_tabs_view = getMultiAdapter((context, self.request),\n-                                           name=\'portal_tabs_view\')\n-        self.portal_tabs = portal_tabs_view.topLevelTabs()\n-\n         self.selected_tabs = self.selectedTabs(portal_tabs=self.portal_tabs)\n         self.selected_portal_tab = self.selected_tabs[\'portal\']\n \ndiff --git a/plone/app/layout/viewlets/globalstatusmessage.pt b/plone/app/layout/viewlets/globalstatusmessage.pt\nindex cfdc6b98..334aa51e 100644\n--- a/plone/app/layout/viewlets/globalstatusmessage.pt\n+++ b/plone/app/layout/viewlets/globalstatusmessage.pt\n@@ -4,6 +4,7 @@\n     <div tal:define="mtype message/type | nothing;"\n         tal:attributes="class string:portalMessage ${mtype};">\n         <strong\n+            i18n:domain="plone"\n             i18n:translate="" tal:content="python:mtype.capitalize()">Info</strong>\n         <span class="content"\n             tal:replace="message/message | nothing" i18n:translate="">\ndiff --git a/plone/app/layout/viewlets/httpheaders.py b/plone/app/layout/viewlets/httpheaders.py\nindex 0f39afa9..d6fe6dcd 100644\n--- a/plone/app/layout/viewlets/httpheaders.py\n+++ b/plone/app/layout/viewlets/httpheaders.py\n@@ -22,10 +22,6 @@ class HTTPCachingHeaders(HeaderViewlet):\n     """Replace the old global_cache_settings/macros/cacheheaders\n     """\n \n-    def enable_compression(self):\n-        """Call to activate gzip"""\n-        self.context.enableHTTPCompression(request=self.request, enable=1)\n-\n     def getHeaders(self):\n         lang = getattr(self.context, \'Language\', None)\n         if callable(lang):\ndiff --git a/plone/app/layout/viewlets/sections.pt b/plone/app/layout/viewlets/sections.pt\nindex 50459412..94dd6052 100644\n--- a/plone/app/layout/viewlets/sections.pt\n+++ b/plone/app/layout/viewlets/sections.pt\n@@ -6,8 +6,7 @@\n      tal:condition="portal_tabs"\n      i18n:domain="plone">\n \n-  <p class="hiddenStructure" i18n:translate="heading_sections">Navigation</p>\n-  <nav class="plone-navbar" id="portal-globalnav-wrapper">\n+  <nav class="plone-navbar pat-navigationmarker" id="portal-globalnav-wrapper">\n     <div class="container">\n       <div class="plone-navbar-header">\n         <button type="button" class="plone-navbar-toggle" data-toggle="collapse" data-target="#portal-globalnav-collapse">\n@@ -22,19 +21,7 @@\n         <ul class="plone-nav plone-navbar-nav"\n             id="portal-globalnav"\n             tal:define="selected_tab python:view.selected_portal_tab">\n-            <tal:tabs tal:repeat="tab portal_tabs">\n-              <li tal:define="tid tab/id"\n-                  tal:attributes="id string:portaltab-${tid};\n-                                  class python:selected_tab==tid and \'selected\' or nothing">\n-                  <a href=""\n-                     tal:content="tab/name"\n-                     tal:attributes="href tab/url;\n-                                     title tab/description|nothing;\n-                                     target tab/link_target|nothing;">\n-                    Tab Name\n-                  </a>\n-              </li>\n-            </tal:tabs>\n+          <navtree tal:replace="structure view/render_globalnav" />\n         </ul>\n       </div>\n     </div>\ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex 9fd85e58..dcc3a688 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -226,6 +226,21 @@ class TestGlobalSectionsViewlet(ViewletsTestCase):\n     """Test the global sections views viewlet.\n     """\n \n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+        self.registry = getUtility(IRegistry)\n+        self.folder = self.portal[\'Members\'][TEST_USER_ID]\n+        self.portal.Members.reindexObject()\n+        self.folder.reindexObject()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+\n+    def _get_navtree(self, context=None):\n+        if context is None:\n+            context = self.portal\n+        gsv = GlobalSectionsViewlet(context, self.request.clone(), None)\n+        return gsv.navtree\n+\n     def test_selectedtabs(self):\n         """ Test selected tabs the simplest case\n         """\n@@ -253,3 +268,291 @@ def test_selectedtabs_navroot(self):\n         gsv.update()\n         self.assertEqual(gsv.selected_tabs, {\'portal\': \'abc\'})\n         self.assertEqual(gsv.selected_portal_tab, \'abc\')\n+\n+    def test_globalnav_respects_types_use_view_action_in_listings(self):\n+        """ Test selected tabs with a INavigationroot folder involved\n+        """\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal.invokeFactory(\'Image\', \'image\', title=u\'S\xc3\xb6me Image\')\n+        self.portal.invokeFactory(\'File\', \'file\', title=u\'Some File\')\n+        self.portal.invokeFactory(\'Document\', \'doc\', title=u\'Some D\xc3\xb6cument\')\n+        request = self.layer[\'request\']\n+        gsv = GlobalSectionsViewlet(self.portal, request, None)\n+        gsv.update()\n+        html = gsv.render()\n+        self.assertIn(\'href="http://nohost/plone/image/view"\', html)\n+        self.assertIn(\'href="http://nohost/plone/file/view"\', html)\n+        self.assertIn(\'href="http://nohost/plone/doc"\', html)\n+\n+    def test_globalnav_navigation_depth(self):\n+        """ Test selected tabs with a INavigationroot folder involved\n+        """\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        registry = getUtility(IRegistry)\n+        registry[\'plone.navigation_depth\'] = 3\n+        self.portal.invokeFactory(\'Folder\', \'folder\', title=u\'F\xc3\xb6lder\')\n+        self.portal.invokeFactory(\'Folder\', \'folder2\', title=u\'Folder 2\')\n+        self.portal.invokeFactory(\'Folder\', \'folder3\', title=u\'Folder 3\')\n+        folder = self.portal.folder\n+        folder.invokeFactory(\'Folder\', \'subfolder\', title=u\'Subfolder\')\n+        folder.invokeFactory(\'Folder\', \'subfolder2\', title=u\'S\xc3\xbcbfolder 2\')\n+        subfolder = folder.subfolder\n+        subfolder.invokeFactory(\'Folder\', \'subsubfolder\', title=u\'Sub2folder\')\n+\n+        request = self.layer[\'request\']\n+        navtree = self._get_navtree()\n+        self.assertListEqual(\n+            sorted(navtree),\n+            [\n+                \'/plone\',\n+                \'/plone/Members\',\n+                \'/plone/folder\',\n+                \'/plone/folder/subfolder\'\n+            ],\n+        )\n+        self.assertListEqual(\n+            [x[\'title\'] for x in navtree[\'/plone\']],\n+            [u\'Home\', u\'Members\', u\'F\xc3\xb6lder\', u\'Folder 2\', u\'Folder 3\'],\n+        )\n+        self.assertListEqual(\n+            [x[\'title\'] for x in navtree[\'/plone/folder\']],\n+            [u\'Subfolder\', u\'S\xc3\xbcbfolder 2\'],\n+        )\n+        self.assertListEqual(\n+            [x[\'title\'] for x in navtree[\'/plone/folder/subfolder\']],\n+            [u\'Sub2folder\'],\n+        )\n+\n+        gsv = GlobalSectionsViewlet(self.portal, request, None)\n+        gsv.update()\n+        self.assertTrue(gsv.render())\n+\n+    def test_default_settings(self):\n+        self.assertEqual(self.registry[\'plone.navigation_depth\'], 3)\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(\n+            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [\'/plone/index_html\', \'/plone/Members\'],\n+        )\n+\n+    def test_do_not_generate_tabs(self):\n+        self.registry[\'plone.generate_tabs\'] = False\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), [\'/plone\'])\n+        self.assertListEqual(\n+            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [\'/plone/index_html\'],\n+        )\n+\n+    def test_generate_tabs_non_folderish(self):\n+        self.registry[\'plone.nonfolderish_tabs\'] = False\n+        self.portal.invokeFactory(\n+            \'Document\',\n+            \'test-doc\',\n+            title=u\'A simple document (\xc3\xa0\xc3\xa8\xc3\xac\xc3\xb2\xc3\xb9)\',\n+        )\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(\n+            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [\'/plone/index_html\', \'/plone/Members\'],\n+        )\n+\n+    def test_generate_tabs_sorted(self):\n+        self.portal.invokeFactory(\n+            \'Document\',\n+            \'test-doc-2\',\n+            title=u\'Document 2\',\n+        )\n+        self.portal.invokeFactory(\n+            \'Document\',\n+            \'test-doc-1\',\n+            title=u\'Document 1\',\n+        )\n+        navtree = self._get_navtree()\n+        # default sorting by position in parent\n+        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(\n+            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [\n+                \'/plone/index_html\',\n+                \'/plone/Members\',\n+                \'/plone/test-doc-2\',\n+                \'/plone/test-doc-1\',\n+            ],\n+        )\n+\n+        # check we can sort by title\n+        self.registry[\'plone.sort_tabs_on\'] = u\'sortable_title\'\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(\n+            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [\n+                \'/plone/index_html\',\n+                \'/plone/Members\',\n+                \'/plone/test-doc-1\',\n+                \'/plone/test-doc-2\',\n+            ],\n+        )\n+\n+        # check we can reverse sorting\n+        self.registry[\'plone.sort_tabs_reversed\'] = True\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(\n+            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [\n+                \'/plone/index_html\',\n+                \'/plone/test-doc-2\',\n+                \'/plone/test-doc-1\',\n+                \'/plone/Members\',\n+            ],\n+        )\n+\n+    def test_generate_tabs_displayed_types(self):\n+        self.registry[\'plone.displayed_types\'] = (\n+            u\'Image\',\n+            u\'File\',\n+            u\'Link\',\n+            u\'News Item\',\n+            u\'Document\',\n+            u\'Event\',\n+        )\n+        navtree = self._get_navtree()\n+        self.assertListEqual(\n+            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [\n+                \'/plone/index_html\',\n+            ],\n+        )\n+\n+    def test_generate_tabs_filter_on_state(self):\n+        self.registry[\'plone.filter_on_workflow\'] = True\n+        navtree = self._get_navtree()\n+        self.assertListEqual(\n+            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [\n+                \'/plone/index_html\',\n+            ],\n+        )\n+        self.registry[\'plone.workflow_states_to_show\'] = (u\'private\', )\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(\n+            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [\'/plone/index_html\', \'/plone/Members\'],\n+        )\n+\n+        # Let\'s check this works also with deep navigation\n+        self.registry[\'plone.navigation_depth\'] = 2\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), [\'/plone\', \'/plone/Members\'])\n+        self.assertListEqual(\n+            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [\'/plone/index_html\', \'/plone/Members\'],\n+        )\n+        self.assertListEqual(\n+            [item[\'path\'] for item in navtree[\'/plone/Members\']],\n+            [\'/plone/Members/test_user_1_\'],\n+        )\n+\n+    def test_generate_tabs_exclude_from_nav(self):\n+        self.portal.invokeFactory(\n+            \'Folder\',\n+            \'test-folder\',\n+            title=u\'Test folder\',\n+        )\n+        self.portal.invokeFactory(\n+            \'Folder\',\n+            \'excluded-folder\',\n+            title=u\'Excluded folder\',\n+            exclude_from_nav=True,\n+        )\n+        self.portal[\'excluded-folder\'].invokeFactory(\n+            \'Folder\',\n+            \'sub-folder\',\n+            title=u\'Sub folder\',\n+        )\n+\n+        navtree = self._get_navtree()\n+        self.assertListEqual(\n+            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [\n+                \'/plone/index_html\',\n+                \'/plone/Members\',\n+                \'/plone/test-folder\',\n+            ],\n+        )\n+\n+        # Check also that we we have proper nesting\n+        self.registry[\'plone.navigation_depth\'] = 2\n+        navtree = self._get_navtree()\n+        self.assertListEqual(\n+            sorted(navtree),\n+            [\'/plone\', \'/plone/Members\', \'/plone/excluded-folder\'],\n+        )\n+        self.assertListEqual(\n+            [item[\'path\'] for item in navtree[\'/plone/excluded-folder\']],\n+            [\'/plone/excluded-folder/sub-folder\'],\n+        )\n+\n+        self.registry[\'plone.navigation_depth\'] = 1\n+        self.registry[\'plone.show_excluded_items\'] = False\n+        navtree = self._get_navtree()\n+        self.assertListEqual(sorted(navtree), [\'/plone\'])\n+        self.assertListEqual(\n+            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [\'/plone/index_html\', \'/plone/Members\', \'/plone/test-folder\'],\n+        )\n+\n+        # If we increase the navigation depth to 2 the sub folder in the\n+        # exclude folder it is there but unlinked\n+        self.registry[\'plone.navigation_depth\'] = 2\n+        navtree = self._get_navtree()\n+        self.assertListEqual(\n+            sorted(navtree),\n+            [\'/plone\', \'/plone/Members\', \'/plone/excluded-folder\'],\n+        )\n+        self.assertListEqual(\n+            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [\'/plone/index_html\', \'/plone/Members\', \'/plone/test-folder\'],\n+        )\n+        self.assertListEqual(\n+            [item[\'path\'] for item in navtree[\'/plone/excluded-folder\']],\n+            [\'/plone/excluded-folder/sub-folder\'],\n+        )\n+\n+        self.portal[\'excluded-folder\'][\'sub-folder\'].exclude_from_nav = True\n+        self.portal[\'excluded-folder\'][\'sub-folder\'].reindexObject()\n+        navtree = self._get_navtree()\n+        self.assertListEqual(\n+            sorted(navtree),\n+            [\'/plone\', \'/plone/Members\'],\n+        )\n+        self.assertListEqual(\n+            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [\'/plone/index_html\', \'/plone/Members\', \'/plone/test-folder\'],\n+        )\n+\n+        # check for \'show_excluded_items\' in navtree\n+        self.registry[\'plone.show_excluded_items\'] = True\n+        navtree = self._get_navtree()\n+        # if we\'re not in (sub)context of an excluded item don\'t show it\n+        self.assertListEqual(\n+            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [\'/plone/index_html\', \'/plone/Members\', \'/plone/test-folder\'],\n+        )\n+        # but if so, keep the tree\n+        navtree = self._get_navtree(\n+            self.portal[\'excluded-folder\'][\'sub-folder\'])\n+        self.assertListEqual(\n+            [item[\'path\'] for item in navtree[\'/plone\']],\n+            [\'/plone/index_html\', \'/plone/Members\', \'/plone/test-folder\',\n+             \'/plone/excluded-folder\'],\n+        )\n+        self.assertListEqual(\n+            [item[\'path\'] for item in navtree[\'/plone/excluded-folder\']],\n+            [\'/plone/excluded-folder/sub-folder\'],\n+        )\ndiff --git a/pyproject.toml b/pyproject.toml\nnew file mode 100644\nindex 00000000..05b615de\n--- /dev/null\n+++ b/pyproject.toml\n@@ -0,0 +1,20 @@\n+[tool.towncrier]\n+filename = "CHANGES.rst"\n+directory = "news/"\n+title_format = "{version} ({project_date})"\n+underlines = ["-", ""]\n+\n+[[tool.towncrier.type]]\n+directory = "breaking"\n+name = "Breaking changes:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "feature"\n+name = "New features:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "bugfix"\n+name = "Bug fixes:"\n+showcontent = true\ndiff --git a/setup.cfg b/setup.cfg\nindex e1906c09..8b23883e 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -11,9 +11,7 @@ line_length=200\n not_skip=__init__.py\n \n \n-[zest.releaser]\n-create-wheel = yes\n \n-# When Python 2-3 compatible:\n-# [bdist_wheel]\n-# universal = 1\n+\n+[bdist_wheel]\n+universal = 1\ndiff --git a/setup.py b/setup.py\nindex 6818aaba..8817c6d6 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = \'2.8.2.dev0\'\n+version = \'3.2.3.dev0\'\n \n long_description = \\\n     open("README.rst").read() + "\\n" + open("CHANGES.rst").read()\n@@ -12,24 +12,26 @@\n       description="Layout mechanisms for Plone",\n       long_description=long_description,\n       classifiers=[\n+          "Development Status :: 6 - Mature",\n           "Environment :: Web Environment",\n           "Framework :: Plone",\n-          "Framework :: Plone :: 5.1",\n           "Framework :: Plone :: 5.2",\n           "Framework :: Zope2",\n+          "Framework :: Zope :: 4",\n           "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n           "Operating System :: OS Independent",\n           "Programming Language :: Python",\n           "Programming Language :: Python :: 2.7",\n           "Programming Language :: Python :: 3.6",\n           "Programming Language :: Python :: 3.7",\n+          "Programming Language :: Python :: 3.8",\n       ],\n       keywords=\'plone layout viewlet\',\n       author=\'Plone Foundation\',\n       author_email=\'plone-developers@lists.sourceforge.net\',\n-      url=\'https://pypi.python.org/pypi/plone.app.layout\',\n+      url=\'https://pypi.org/project/plone.app.layout\',\n       license=\'GPL version 2\',\n-      packages=find_packages(exclude=[\'ez_setup\']),\n+      packages=find_packages(),\n       namespace_packages=[\'plone\', \'plone.app\'],\n       include_package_data=True,\n       zip_safe=False,\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-09-09T10:43:40+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.layout/commit/9a015b56c5fdcb5555e39df98d77bc037c41a010

document chnage

Files changed:
A news/210.bugfix

b'diff --git a/news/210.bugfix b/news/210.bugfix\nnew file mode 100644\nindex 00000000..f19b0795\n--- /dev/null\n+++ b/news/210.bugfix\n@@ -0,0 +1 @@\n+Fix memory leak on getUserInfo [avoinea] (#204)\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2019-09-13T13:32:25+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.layout/commit/d87b309832392dab974854d54c2aeeb5f36e1ea8

Merge pull request #210 from avoinea/python3

Python3 - Fixes #204 - Fix memory leak on getUserInfo

Files changed:
A news/210.bugfix

b'diff --git a/news/210.bugfix b/news/210.bugfix\nnew file mode 100644\nindex 00000000..f19b0795\n--- /dev/null\n+++ b/news/210.bugfix\n@@ -0,0 +1 @@\n+Fix memory leak on getUserInfo [avoinea] (#204)\n'

