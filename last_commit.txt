Repository: plone.i18n


Branch: refs/heads/master
Date: 2021-08-13T16:39:57+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.i18n/commit/0838a71dd74c78ecd3fe5b26645b2a331e19498c

update to unidecode 1.0.22 and use its features

Files changed:
M CHANGES.rst
M plone/i18n/normalizer/base.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 2df9b39..163739e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -77,6 +77,10 @@ Breaking changes:\n \n Bug fixes:\n \n+- Make it work with newwest Unidecode 1.0.22. Use its method instaed of duplicating it in here.\n+  Also support newer unicode chars, like with `Bei Jing` in the example.\n+  [gogobd, jensens]\n+\n - Add Python 2 / 3 compatibility\n   [pbauer]\n \ndiff --git a/plone/i18n/normalizer/base.py b/plone/i18n/normalizer/base.py\nindex 09c8ca3..49bc936 100644\n--- a/plone/i18n/normalizer/base.py\n+++ b/plone/i18n/normalizer/base.py\n@@ -1,7 +1,5 @@\n # -*- coding: utf-8 -*-\n-from unicodedata import decomposition\n-from unicodedata import normalize\n-\n+from unidecode import unidecode\n import six\n import string\n \n@@ -10,13 +8,12 @@\n # See http://dev.plone.org/plone/ticket/4704 for details\n whitespace = \'\'.join([c for c in string.whitespace if ord(c) < 128])\n allowed = (\n-    string.ascii_letters + string.digits + string.punctuation + whitespace\n+    string.ascii_letters +\n+    string.digits +\n+    string.punctuation +\n+    whitespace\n )\n \n-CHAR = {}\n-NULLMAP = [\'\' * 0x100]\n-UNIDECODE_LIMIT = 0x0530\n-\n \n def mapUnicode(text, mapping=()):\n     """\n@@ -38,74 +35,27 @@ def mapUnicode(text, mapping=()):\n \n def baseNormalize(text):\n     """\n-    This method is used for normalization of unicode characters to the base ASCII\n-    letters. Output is ASCII encoded string (or char) with only ASCII letters,\n-    digits, punctuation and whitespace characters. Case is preserved.\n+    This method is used for normalization of unicode characters to the base\n+    ASCII letters. Output is ASCII encoded string (or char) with only ASCII\n+    letters, digits, punctuation and whitespace characters. Case is preserved.\n \n       >>> baseNormalize(123)\n       \'123\'\n \n       >>> baseNormalize(u\'a\\u0fff\')\n-      \'afff\'\n+      \'a\'\n \n       >>> baseNormalize(u"foo\\N{LATIN CAPITAL LETTER I WITH CARON}")\n       \'fooI\'\n \n       >>> baseNormalize(u"\\u5317\\u4EB0")\n-      \'53174eb0\'\n+      \'Bei Jing\'\n     """\n     if not isinstance(text, six.string_types):\n         # This most surely ends up in something the user does not expect\n         # to see. But at least it does not break.\n         return repr(text)\n \n-    text = text.strip()\n-\n-    res = []\n-    for ch in text:\n-        if ch in allowed:\n-            # ASCII chars, digits etc. stay untouched\n-            res.append(ch)\n-        else:\n-            ordinal = ord(ch)\n-            if ordinal < UNIDECODE_LIMIT:\n-                h = ordinal >> 8\n-                l = ordinal & 0xFF\n-\n-                c = CHAR.get(h, None)\n-\n-                if c == None:\n-                    try:\n-                        mod = __import__(\n-                            \'unidecode.x%02x\' % (h), [], [], [\'data\']\n-                        )\n-                    except ImportError:\n-                        CHAR[h] = NULLMAP\n-                        res.append(\'\')\n-                        continue\n-\n-                    CHAR[h] = mod.data\n-\n-                    try:\n-                        res.append(mod.data[l])\n-                    except IndexError:\n-                        res.append(\'\')\n-                else:\n-                    try:\n-                        res.append(c[l])\n-                    except IndexError:\n-                        res.append(\'\')\n-\n-            elif decomposition(ch):\n-                normalized = normalize(\'NFKD\', ch).strip()\n-                # string may contain non-letter chars too. Remove them\n-                # string may result to more than one char\n-                res.append(\'\'.join([c for c in normalized if c in allowed]))\n-\n-            else:\n-                # hex string instead of unknown char\n-                res.append("%x" % ordinal)\n-\n-    if six.PY2:\n-        return \'\'.join(res).encode(\'ascii\')\n-    return \'\'.join(res)\n+    text = unidecode(text).encode(\'ascii\').strip()\n+    text = [c for c in text if c in allowed]\n+    return \'\'.join(text)\ndiff --git a/setup.py b/setup.py\nindex 6446c93..c881288 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -39,7 +39,7 @@\n         \'plone.supermodel\',\n         \'setuptools\',\n         \'six\',\n-        \'Unidecode\',\n+        \'Unidecode>=1.0.22\',\n         \'ZODB\',\n         \'zope.component\',\n         \'zope.i18n\',\n'

Repository: plone.i18n


Branch: refs/heads/master
Date: 2021-08-13T16:40:00+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.i18n/commit/a78bd56991b9ad383b3bbcbb62eb1e4c12aa6695

Fix binary/text type

Files changed:
M plone/i18n/normalizer/base.py

b'diff --git a/plone/i18n/normalizer/base.py b/plone/i18n/normalizer/base.py\nindex 49bc936..a01f434 100644\n--- a/plone/i18n/normalizer/base.py\n+++ b/plone/i18n/normalizer/base.py\n@@ -36,8 +36,9 @@ def mapUnicode(text, mapping=()):\n def baseNormalize(text):\n     """\n     This method is used for normalization of unicode characters to the base\n-    ASCII letters. Output is ASCII encoded string (or char) with only ASCII\n-    letters, digits, punctuation and whitespace characters. Case is preserved.\n+    ASCII letters. \n+    Output is a native string with only ASCII letters, digits, punctuation \n+    and whitespace characters. Case is preserved.\n \n       >>> baseNormalize(123)\n       \'123\'\n@@ -54,8 +55,8 @@ def baseNormalize(text):\n     if not isinstance(text, six.string_types):\n         # This most surely ends up in something the user does not expect\n         # to see. But at least it does not break.\n-        return repr(text)\n-\n-    text = unidecode(text).encode(\'ascii\').strip()\n-    text = [c for c in text if c in allowed]\n-    return \'\'.join(text)\n+        text = repr(text)\n+    if six.PY2 and not isinstance(text, six.text_type):\n+        text = text.decode(\'ascii\', \'replace\')\n+    text = unidecode(text).strip()\n+    return \'\'.join(filter(lambda c: c in allowed, text))\n'

Repository: plone.i18n


Branch: refs/heads/master
Date: 2021-08-13T16:44:08+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.i18n/commit/b94ffa0950c6054c45400cc343fd66b01a800f10

move changelog entry to news file

Files changed:
A news/31.bugfix
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 163739e..2df9b39 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -77,10 +77,6 @@ Breaking changes:\n \n Bug fixes:\n \n-- Make it work with newwest Unidecode 1.0.22. Use its method instaed of duplicating it in here.\n-  Also support newer unicode chars, like with `Bei Jing` in the example.\n-  [gogobd, jensens]\n-\n - Add Python 2 / 3 compatibility\n   [pbauer]\n \ndiff --git a/news/31.bugfix b/news/31.bugfix\nnew file mode 100644\nindex 0000000..c2a8a33\n--- /dev/null\n+++ b/news/31.bugfix\n@@ -0,0 +1,4 @@\n+Make it work with newwest Unidecode 1.0.22. Use its method instaed of duplicating it in here.\n+Also support newer unicode chars, like with `Bei Jing` in the example.\n+[gogobd, jensens, alert]\n+\n'

Repository: plone.i18n


Branch: refs/heads/master
Date: 2021-08-13T16:57:03+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.i18n/commit/c400aa5e2b9bc484eb546a9a34619559bcb3b0fc

Plone 6 only, Drop Py 2.7 and 3.6

Files changed:
A news/31.breaking
M setup.py

b'diff --git a/news/31.breaking b/news/31.breaking\nnew file mode 100644\nindex 0000000..4455503\n--- /dev/null\n+++ b/news/31.breaking\n@@ -0,0 +1 @@\n+Drop support of Python 2 [jensens]\ndiff --git a/setup.py b/setup.py\nindex c881288..8f7fdac 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,6 +1,6 @@\n from setuptools import setup, find_packages\n \n-version = \'4.0.7.dev0\'\n+version = \'5.0.0.dev0\'\n \n setup(\n     name=\'plone.i18n\',\n@@ -12,17 +12,15 @@\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope2",\n         "Framework :: Zope :: 4",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n     ],\n     keywords=\'i18n l10n Plone\',\n     author=\'Plone Foundation\',\n'

Repository: plone.i18n


Branch: refs/heads/master
Date: 2021-08-13T17:01:46+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.i18n/commit/c20ce42bc248d662022885947fd31980ea9bda7c

black/isort

Files changed:
M plone/__init__.py
M plone/i18n/__init__.py
M plone/i18n/interfaces.py
M plone/i18n/locales/cctld.py
M plone/i18n/locales/countries.py
M plone/i18n/locales/interfaces.py
M plone/i18n/locales/languages.py
M plone/i18n/locales/tests/base.py
M plone/i18n/locales/tests/test_cctlds.py
M plone/i18n/locales/tests/test_countries.py
M plone/i18n/locales/tests/test_languages.py
M plone/i18n/negotiate/negotiate.py
M plone/i18n/negotiate/ptsnegotiator.py
M plone/i18n/normalizer/__init__.py
M plone/i18n/normalizer/base.py
M plone/i18n/normalizer/bg.py
M plone/i18n/normalizer/de.py
M plone/i18n/normalizer/el.py
M plone/i18n/normalizer/es.py
M plone/i18n/normalizer/fr.py
M plone/i18n/normalizer/interfaces.py
M plone/i18n/normalizer/ja.py
M plone/i18n/normalizer/pl.py
M plone/i18n/normalizer/pt.py
M plone/i18n/normalizer/ru.py
M plone/i18n/normalizer/tests/test_adapters.py
M plone/i18n/normalizer/tests/test_normalizer.py
M plone/i18n/normalizer/tr.py
M plone/i18n/normalizer/uk.py
M plone/i18n/tests/base.py
M plone/i18n/tests/test_languageutility.py
M plone/i18n/tests/test_negotiation.py
M plone/i18n/utility.py
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..03d08ff 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/i18n/__init__.py b/plone/i18n/__init__.py\nindex 7d57550..265ab3a 100644\n--- a/plone/i18n/__init__.py\n+++ b/plone/i18n/__init__.py\n@@ -3,4 +3,4 @@\n from Products.CMFCore.utils import registerToolInterface\n \n \n-registerToolInterface(\'portal_languages\', ILanguageUtility)\n+registerToolInterface("portal_languages", ILanguageUtility)\ndiff --git a/plone/i18n/interfaces.py b/plone/i18n/interfaces.py\nindex e3d6d77..6fd3d23 100644\n--- a/plone/i18n/interfaces.py\n+++ b/plone/i18n/interfaces.py\n@@ -1,155 +1,160 @@\n # -*- coding: utf-8 -*-\n-from zope.interface import Attribute\n-from zope.interface import Interface\n-from zope import schema\n from plone.supermodel import model\n+from zope import schema\n+\n # Definition of Import PloneMessageFactory to create messages in the plone\n # domain. We do a fresh re-definition here as to break the dependency on\n # `Products.CMFPlone.PloneMessageFactory`.\n from zope.i18nmessageid import MessageFactory\n-_ = PloneMessageFactory = MessageFactory(\'plone\')\n+from zope.interface import Attribute\n+from zope.interface import Interface\n+\n+\n+_ = PloneMessageFactory = MessageFactory("plone")\n \n \n class ILanguageUtility(Interface):\n-    """Marker interface for the portal_languages tool.\n-    """\n+    """Marker interface for the portal_languages tool."""\n \n \n class INegotiateLanguage(Interface):\n-    """Result of language negotiation\n-    """\n+    """Result of language negotiation"""\n \n-    language = Attribute(\'Language to use\')\n-    default_language = Attribute(\'Default language\')\n-    language_list = Attribute(\'List of language preferences in order\')\n+    language = Attribute("Language to use")\n+    default_language = Attribute("Default language")\n+    language_list = Attribute("List of language preferences in order")\n \n \n class ILanguageSchema(Interface):\n     model.fieldset(\n-        \'general\',\n-        label=_(u\'General\'),\n+        "general",\n+        label=_(u"General"),\n         fields=[\n-            \'default_language\',\n-            \'available_languages\',\n-            \'use_combined_language_codes\',\n-            \'display_flags\',\n-            \'always_show_selector\'\n+            "default_language",\n+            "available_languages",\n+            "use_combined_language_codes",\n+            "display_flags",\n+            "always_show_selector",\n         ],\n     )\n \n     default_language = schema.Choice(\n-        title=_(u\'heading_site_language\', default=u\'Site language\'),\n+        title=_(u"heading_site_language", default=u"Site language"),\n         description=_(\n-            u\'description_site_language\',\n-            default=u\'The language used for the content and the UI of \'\n-                    u\'this site.\'\n+            u"description_site_language",\n+            default=u"The language used for the content and the UI of " u"this site.",\n         ),\n-        default=\'en\',\n+        default="en",\n         required=True,\n-        vocabulary=\'plone.app.vocabularies.AvailableContentLanguages\'\n+        vocabulary="plone.app.vocabularies.AvailableContentLanguages",\n     )\n \n     available_languages = schema.List(\n-        title=_(u\'heading_available_languages\',\n-                default=u\'Available languages\'),\n-        description=_(u\'description_available_languages\',\n-                      default=u\'The languages in which the site should be \'\n-                              u\'translatable.\'),\n+        title=_(u"heading_available_languages", default=u"Available languages"),\n+        description=_(\n+            u"description_available_languages",\n+            default=u"The languages in which the site should be " u"translatable.",\n+        ),\n         required=True,\n-        default=[\'en\'],\n+        default=["en"],\n         missing_value=[],\n         value_type=schema.Choice(\n-            vocabulary=\'plone.app.vocabularies.AvailableContentLanguages\'\n-        )\n+            vocabulary="plone.app.vocabularies.AvailableContentLanguages"\n+        ),\n     )\n \n     use_combined_language_codes = schema.Bool(\n         title=_(\n-            u\'label_allow_combined_language_codes\',\n-            default=u\'Show country-specific language variants\'\n+            u"label_allow_combined_language_codes",\n+            default=u"Show country-specific language variants",\n         ),\n         description=_(\n-            u\'help_allow_combined_language_codes\',\n-            default=u\'Examples: pt-br (Brazilian Portuguese), \'\n-                    u\'en-us (American English) etc.\'\n+            u"help_allow_combined_language_codes",\n+            default=u"Examples: pt-br (Brazilian Portuguese), "\n+            u"en-us (American English) etc.",\n         ),\n         default=True,\n-        required=False\n+        required=False,\n     )\n \n     display_flags = schema.Bool(\n-        title=_(\n-            u\'label_display_flags\',\n-            default=u\'Show language flags\'\n-        ),\n-        description=u\'\',\n+        title=_(u"label_display_flags", default=u"Show language flags"),\n+        description=u"",\n         default=False,\n-        required=False\n+        required=False,\n     )\n \n     always_show_selector = schema.Bool(\n         title=_(\n-            u\'label_always_show_selector\',\n-            default=u\'Always show language selector\'\n+            u"label_always_show_selector",\n+            default=u"Always show language selector",\n         ),\n-        description=u\'\',\n+        description=u"",\n         default=False,\n-        required=False\n+        required=False,\n     )\n \n     model.fieldset(\n-        \'negotiation_scheme\',\n-        label=_(u\'Negotiation scheme\', default=u\'Negotiation scheme\'),\n+        "negotiation_scheme",\n+        label=_(u"Negotiation scheme", default=u"Negotiation scheme"),\n         fields=[\n-            \'use_content_negotiation\',\n-            \'use_path_negotiation\',\n-            \'use_cookie_negotiation\',\n-            \'authenticated_users_only\',\n-            \'set_cookie_always\',\n-            \'use_subdomain_negotiation\',\n-            \'use_cctld_negotiation\',\n-            \'use_request_negotiation\',\n+            "use_content_negotiation",\n+            "use_path_negotiation",\n+            "use_cookie_negotiation",\n+            "authenticated_users_only",\n+            "set_cookie_always",\n+            "use_subdomain_negotiation",\n+            "use_cctld_negotiation",\n+            "use_request_negotiation",\n         ],\n     )\n     use_content_negotiation = schema.Bool(\n-        title=_(u\'heading_language_of_the_content\',\n-                default=u\'Use the language of the content item\'),\n-        description=_(u\'description_language_of_the_content\',\n-                      default=u\'Use the language of the content item.\'),\n+        title=_(\n+            u"heading_language_of_the_content",\n+            default=u"Use the language of the content item",\n+        ),\n+        description=_(\n+            u"description_language_of_the_content",\n+            default=u"Use the language of the content item.",\n+        ),\n         default=False,\n         required=False,\n     )\n \n     use_path_negotiation = schema.Bool(\n         title=_(\n-            u\'heading_language_codes_in_URL\',\n-            default=u\'Use language codes in URL path for manual override\'),\n+            u"heading_language_codes_in_URL",\n+            default=u"Use language codes in URL path for manual override",\n+        ),\n         description=_(\n-            u\'description_language_codes_in_URL\',\n-            default=u\'Use language codes in URL path for manual override.\'),\n+            u"description_language_codes_in_URL",\n+            default=u"Use language codes in URL path for manual override.",\n+        ),\n         default=False,\n         required=False,\n     )\n \n     use_cookie_negotiation = schema.Bool(\n-        title=_(u\'heading_cookie_manual_override\',\n-                default=(u\'Use cookie for manual override\')),\n+        title=_(\n+            u"heading_cookie_manual_override",\n+            default=(u"Use cookie for manual override"),\n+        ),\n         description=_(\n-            u\'description_cookie_manual_override\',\n-            default=(\n-                u\'Required for the language selector viewlet to be rendered.\'\n-            )\n+            u"description_cookie_manual_override",\n+            default=(u"Required for the language selector viewlet to be rendered."),\n         ),\n         default=False,\n         required=False,\n     )\n \n     authenticated_users_only = schema.Bool(\n-        title=_(u\'heading_auth_cookie_manual_override\',\n-                default=u\'Authenticated users only\'),\n+        title=_(\n+            u"heading_auth_cookie_manual_override",\n+            default=u"Authenticated users only",\n+        ),\n         description=_(\n-            u\'description_auth_ookie_manual_override\',\n-            default=(u\'Related to: use cookie for manual override\')\n+            u"description_auth_ookie_manual_override",\n+            default=(u"Related to: use cookie for manual override"),\n         ),\n         default=False,\n         required=False,\n@@ -157,42 +162,42 @@ class ILanguageSchema(Interface):\n \n     set_cookie_always = schema.Bool(\n         title=_(\n-            u\'heading_set_language_cookie_always\',\n-            default=(u\'Set the language cookie always\')),\n+            u"heading_set_language_cookie_always",\n+            default=(u"Set the language cookie always"),\n+        ),\n         description=_(\n-            u\'description_set_language_cookie_always\',\n+            u"description_set_language_cookie_always",\n             default=(\n-                u\'i.e. also when the \\\'set_language\\\' request parameter is \'\n-                u\'absent\'\n-            )\n+                u"i.e. also when the \'set_language\' request parameter is " u"absent"\n+            ),\n         ),\n         default=False,\n         required=False,\n     )\n \n     use_subdomain_negotiation = schema.Bool(\n-        title=_(u\'heading_use_subdomain\',\n-                default=u\'Use subdomain\'),\n-        description=_(u\'description_use_subdomain\',\n-                      default=u\'e.g.: de.plone.org\'),\n+        title=_(u"heading_use_subdomain", default=u"Use subdomain"),\n+        description=_(u"description_use_subdomain", default=u"e.g.: de.plone.org"),\n         default=False,\n         required=False,\n     )\n \n     use_cctld_negotiation = schema.Bool(\n-        title=_(u\'heading_top_level_domain\',\n-                default=u\'Use top-level domain\'),\n-        description=_(u\'description_top_level_domain\',\n-                      default=u\'e.g.: www.plone.de\'),\n+        title=_(u"heading_top_level_domain", default=u"Use top-level domain"),\n+        description=_(u"description_top_level_domain", default=u"e.g.: www.plone.de"),\n         default=False,\n         required=False,\n     )\n \n     use_request_negotiation = schema.Bool(\n-        title=_(u\'heading_browser_language_request_negotiation\',\n-                default=u\'Use browser language request negotiation\'),\n-        description=_(u\'description_browser_language_request_negotiation\',\n-                      default=u\'Use browser language request negotiation.\'),\n+        title=_(\n+            u"heading_browser_language_request_negotiation",\n+            default=u"Use browser language request negotiation",\n+        ),\n+        description=_(\n+            u"description_browser_language_request_negotiation",\n+            default=u"Use browser language request negotiation.",\n+        ),\n         default=False,\n         required=False,\n     )\ndiff --git a/plone/i18n/locales/cctld.py b/plone/i18n/locales/cctld.py\nindex 7d8ee90..209d953 100644\n--- a/plone/i18n/locales/cctld.py\n+++ b/plone/i18n/locales/cctld.py\n@@ -13,22 +13,18 @@\n \n @implementer(ICcTLDInformation)\n class CcTLDInformation(object):\n-    """A list of country code top level domains their relevant languages.\n-    """\n+    """A list of country code top level domains their relevant languages."""\n \n     def getAvailableTLDs(self):\n-        """Return a sequence of country code top level domains.\n-        """\n+        """Return a sequence of country code top level domains."""\n         return list(_tld_to_language.keys())\n \n     def getTLDs(self):\n-        """Return a sequence of ccTLDs and their languages.\n-        """\n+        """Return a sequence of ccTLDs and their languages."""\n         return _tld_to_language.copy()\n \n     def getLanguagesForTLD(self, tld):\n-        """Return the relevant languages for a top level domain.\n-        """\n+        """Return the relevant languages for a top level domain."""\n         return _tld_to_language[tld]\n \n \ndiff --git a/plone/i18n/locales/countries.py b/plone/i18n/locales/countries.py\nindex fd11fa2..5ad1df0 100644\n--- a/plone/i18n/locales/countries.py\n+++ b/plone/i18n/locales/countries.py\n@@ -8,23 +8,19 @@\n \n @implementer(ICountryAvailability)\n class CountryAvailability(object):\n-    """A list of available coutries.\n-    """\n+    """A list of available coutries."""\n \n     def getAvailableCountries(self):\n-        """Return a sequence of country tags for available countries.\n-        """\n+        """Return a sequence of country tags for available countries."""\n         return list(_countrylist.keys())\n \n     def getCountries(self):\n-        """Return a sequence of Country objects for available countries.\n-        """\n+        """Return a sequence of Country objects for available countries."""\n         return _countrylist.copy()\n \n     def getCountryListing(self):\n-        """Return a sequence of country code and country name tuples.\n-        """\n-        return [(code, _countrylist[code][u\'name\']) for code in _countrylist]\n+        """Return a sequence of country code and country name tuples."""\n+        return [(code, _countrylist[code][u"name"]) for code in _countrylist]\n \n \n countries = CountryAvailability()\n@@ -40,691 +36,691 @@ def getCountryListing(self):\n # part of the list for historical reasons: an\n \n _countrylist = {\n-    u\'ad\': {u\'name\': \'Andorra\', u\'flag\': u\'/++resource++country-flags/ad.gif\'},\n-    u\'ae\': {\n-        u\'name\': \'United Arab Emirates\',\n-        u\'flag\': u\'/++resource++country-flags/ae.gif\',\n-    },\n-    u\'af\': {\n-        u\'name\': \'Afghanistan\',\n-        u\'flag\': u\'/++resource++country-flags/af.gif\',\n-    },\n-    u\'ag\': {\n-        u\'name\': \'Antigua and Barbuda\',\n-        u\'flag\': u\'/++resource++country-flags/ag.gif\',\n-    },\n-    u\'ai\': {\n-        u\'name\': \'Anguilla\',\n-        u\'flag\': u\'/++resource++country-flags/ai.gif\',\n-    },\n-    u\'al\': {u\'name\': \'Albania\', u\'flag\': u\'/++resource++country-flags/al.gif\'},\n-    u\'am\': {u\'name\': \'Armenia\', u\'flag\': u\'/++resource++country-flags/am.gif\'},\n-    u\'an\': {\n-        u\'name\': \'Netherlands Antilles\',\n-        u\'flag\': u\'/++resource++country-flags/an.gif\',\n-    },\n-    u\'ao\': {u\'name\': \'Angola\', u\'flag\': u\'/++resource++country-flags/ao.gif\'},\n-    u\'aq\': {\n-        u\'name\': \'Antarctica\',\n-        u\'flag\': u\'/++resource++country-flags/aq.gif\',\n-    },\n-    u\'ar\': {\n-        u\'name\': \'Argentina\',\n-        u\'flag\': u\'/++resource++country-flags/ar.gif\',\n-    },\n-    u\'as\': {\n-        u\'name\': \'American Samoa\',\n-        u\'flag\': u\'/++resource++country-flags/as.gif\',\n-    },\n-    u\'at\': {u\'name\': \'Austria\', u\'flag\': u\'/++resource++country-flags/at.gif\'},\n-    u\'au\': {\n-        u\'name\': \'Australia\',\n-        u\'flag\': u\'/++resource++country-flags/au.gif\',\n-    },\n-    u\'aw\': {u\'name\': \'Aruba\', u\'flag\': u\'/++resource++country-flags/aw.gif\'},\n-    u\'ax\': {\n-        u\'name\': \'Oland Islands\',\n-        u\'flag\': u\'/++resource++country-flags/ax.gif\',\n-    },\n-    u\'az\': {\n-        u\'name\': \'Azerbaijan\',\n-        u\'flag\': u\'/++resource++country-flags/az.gif\',\n-    },\n-    u\'ba\': {\n-        u\'name\': \'Bosnia and Herzegovina\',\n-        u\'flag\': u\'/++resource++country-flags/ba.gif\',\n-    },\n-    u\'bb\': {\n-        u\'name\': \'Barbados\',\n-        u\'flag\': u\'/++resource++country-flags/bb.gif\',\n-    },\n-    u\'bd\': {\n-        u\'name\': \'Bangladesh\',\n-        u\'flag\': u\'/++resource++country-flags/bd.gif\',\n-    },\n-    u\'be\': {u\'name\': \'Belgium\', u\'flag\': u\'/++resource++country-flags/be.gif\'},\n-    u\'bf\': {\n-        u\'name\': \'Burkina Faso\',\n-        u\'flag\': u\'/++resource++country-flags/bf.gif\',\n-    },\n-    u\'bg\': {\n-        u\'name\': \'Bulgaria\',\n-        u\'flag\': u\'/++resource++country-flags/bg.gif\',\n-    },\n-    u\'bh\': {u\'name\': \'Bahrain\', u\'flag\': u\'/++resource++country-flags/bh.gif\'},\n-    u\'bi\': {u\'name\': \'Burundi\', u\'flag\': u\'/++resource++country-flags/bi.gif\'},\n-    u\'bj\': {u\'name\': \'Benin\', u\'flag\': u\'/++resource++country-flags/bj.gif\'},\n-    u\'bl\': {\n-        u\'name\': \'Saint Barth\xc3\xa9lemy\',\n-        u\'flag\': u\'/++resource++country-flags/bl.gif\',\n-    },\n-    u\'bm\': {u\'name\': \'Bermuda\', u\'flag\': u\'/++resource++country-flags/bm.gif\'},\n-    u\'bn\': {\n-        u\'name\': \'Brunei Darussalam\',\n-        u\'flag\': u\'/++resource++country-flags/bn.gif\',\n-    },\n-    u\'bo\': {u\'name\': \'Bolivia\', u\'flag\': u\'/++resource++country-flags/bo.gif\'},\n-    u\'bq\': {\n-        u\'name\': \'Bonaire, Sint Eustatius and Saba\',\n-        u\'flag\': u\'/++resource++country-flags/bq.gif\',\n-    },\n-    u\'br\': {u\'name\': \'Brazil\', u\'flag\': u\'/++resource++country-flags/br.gif\'},\n-    u\'bs\': {u\'name\': \'Bahamas\', u\'flag\': u\'/++resource++country-flags/bs.gif\'},\n-    u\'bt\': {u\'name\': \'Bhutan\', u\'flag\': u\'/++resource++country-flags/bt.gif\'},\n-    u\'bv\': {\n-        u\'name\': \'Bouvet Island\',\n-        u\'flag\': u\'/++resource++country-flags/bv.gif\',\n-    },\n-    u\'bw\': {\n-        u\'name\': \'Botswana\',\n-        u\'flag\': u\'/++resource++country-flags/bw.gif\',\n-    },\n-    u\'by\': {u\'name\': \'Belarus\', u\'flag\': u\'/++resource++country-flags/by.gif\'},\n-    u\'bz\': {u\'name\': \'Belize\', u\'flag\': u\'/++resource++country-flags/bz.gif\'},\n-    u\'ca\': {u\'name\': \'Canada\', u\'flag\': u\'/++resource++country-flags/ca.gif\'},\n-    u\'cc\': {\n-        u\'name\': \'Cocos (Keeling) Islands\',\n-        u\'flag\': u\'/++resource++country-flags/cc.gif\',\n-    },\n-    u\'cd\': {\n-        u\'name\': \'Congo The Democratic Republic of\',\n-        u\'flag\': u\'/++resource++country-flags/cd.gif\',\n-    },\n-    u\'cf\': {\n-        u\'name\': \'Central African Republic\',\n-        u\'flag\': u\'/++resource++country-flags/cf.gif\',\n-    },\n-    u\'cg\': {u\'name\': \'Congo\', u\'flag\': u\'/++resource++country-flags/cg.gif\'},\n-    u\'ch\': {\n-        u\'name\': \'Switzerland\',\n-        u\'flag\': u\'/++resource++country-flags/ch.gif\',\n-    },\n-    u\'ci\': {\n-        u\'name\': "Cote d\'Ivoire",\n-        u\'flag\': u\'/++resource++country-flags/ci.gif\',\n-    },\n-    u\'ck\': {\n-        u\'name\': \'Cook Islands\',\n-        u\'flag\': u\'/++resource++country-flags/ck.gif\',\n-    },\n-    u\'cl\': {u\'name\': \'Chile\', u\'flag\': u\'/++resource++country-flags/cl.gif\'},\n-    u\'cm\': {\n-        u\'name\': \'Cameroon\',\n-        u\'flag\': u\'/++resource++country-flags/cm.gif\',\n-    },\n-    u\'cn\': {u\'name\': \'China\', u\'flag\': u\'/++resource++country-flags/cn.gif\'},\n-    u\'co\': {\n-        u\'name\': \'Colombia\',\n-        u\'flag\': u\'/++resource++country-flags/co.gif\',\n-    },\n-    u\'cr\': {\n-        u\'name\': \'Costa Rica\',\n-        u\'flag\': u\'/++resource++country-flags/cr.gif\',\n-    },\n-    u\'cs\': {\n-        u\'name\': \'Serbia and Montenegro\',\n-        u\'flag\': u\'/++resource++country-flags/cs.gif\',\n-    },\n-    u\'cu\': {u\'name\': \'Cuba\', u\'flag\': u\'/++resource++country-flags/cu.gif\'},\n-    u\'cv\': {\n-        u\'name\': \'Cape Verde\',\n-        u\'flag\': u\'/++resource++country-flags/cv.gif\',\n-    },\n-    u\'cw\': {u\'name\': \'Cura\xc3\xa7ao\', u\'flag\': u\'/++resource++country-flags/cw.png\'},\n-    u\'cx\': {\n-        u\'name\': \'Christmas Island\',\n-        u\'flag\': u\'/++resource++country-flags/cx.gif\',\n-    },\n-    u\'cy\': {u\'name\': \'Cyprus\', u\'flag\': u\'/++resource++country-flags/cy.gif\'},\n-    u\'cz\': {\n-        u\'name\': \'Czech Republic\',\n-        u\'flag\': u\'/++resource++country-flags/cz.gif\',\n-    },\n-    u\'de\': {u\'name\': \'Germany\', u\'flag\': u\'/++resource++country-flags/de.gif\'},\n-    u\'dj\': {\n-        u\'name\': \'Djibouti\',\n-        u\'flag\': u\'/++resource++country-flags/dj.gif\',\n-    },\n-    u\'dk\': {u\'name\': \'Denmark\', u\'flag\': u\'/++resource++country-flags/dk.gif\'},\n-    u\'dm\': {\n-        u\'name\': \'Dominica\',\n-        u\'flag\': u\'/++resource++country-flags/dm.gif\',\n-    },\n-    u\'do\': {\n-        u\'name\': \'Dominican Republic\',\n-        u\'flag\': u\'/++resource++country-flags/do.gif\',\n-    },\n-    u\'dz\': {u\'name\': \'Algeria\', u\'flag\': u\'/++resource++country-flags/dz.gif\'},\n-    u\'ec\': {u\'name\': \'Ecuador\', u\'flag\': u\'/++resource++country-flags/ec.gif\'},\n-    u\'ee\': {u\'name\': \'Estonia\', u\'flag\': u\'/++resource++country-flags/ee.gif\'},\n-    u\'eg\': {u\'name\': \'Egypt\', u\'flag\': u\'/++resource++country-flags/eg.gif\'},\n-    u\'eh\': {\n-        u\'name\': \'Western Sahara\',\n-        u\'flag\': u\'/++resource++country-flags/eh.gif\',\n-    },\n-    u\'er\': {u\'name\': \'Eritrea\', u\'flag\': u\'/++resource++country-flags/er.gif\'},\n-    u\'es\': {u\'name\': \'Spain\', u\'flag\': u\'/++resource++country-flags/es.gif\'},\n-    u\'et\': {\n-        u\'name\': \'Ethiopia\',\n-        u\'flag\': u\'/++resource++country-flags/et.gif\',\n-    },\n-    u\'fi\': {u\'name\': \'Finland\', u\'flag\': u\'/++resource++country-flags/fi.gif\'},\n-    u\'fj\': {u\'name\': \'Fiji\', u\'flag\': u\'/++resource++country-flags/fj.gif\'},\n-    u\'fk\': {\n-        u\'name\': \'Falkland Islands (Malvinas)\',\n-        u\'flag\': u\'/++resource++country-flags/fk.gif\',\n-    },\n-    u\'fm\': {\n-        u\'name\': \'Micronesia Federated States of\',\n-        u\'flag\': u\'/++resource++country-flags/fm.gif\',\n-    },\n-    u\'fo\': {\n-        u\'name\': \'Faroe Islands\',\n-        u\'flag\': u\'/++resource++country-flags/fo.gif\',\n-    },\n-    u\'fr\': {u\'name\': \'France\', u\'flag\': u\'/++resource++country-flags/fr.gif\'},\n-    u\'ga\': {u\'name\': \'Gabon\', u\'flag\': u\'/++resource++country-flags/ga.gif\'},\n-    u\'gb\': {\n-        u\'name\': \'United Kingdom\',\n-        u\'flag\': u\'/++resource++country-flags/gb.gif\',\n-    },\n-    u\'gd\': {u\'name\': \'Grenada\', u\'flag\': u\'/++resource++country-flags/gd.gif\'},\n-    u\'ge\': {u\'name\': \'Georgia\', u\'flag\': u\'/++resource++country-flags/ge.gif\'},\n-    u\'gf\': {\n-        u\'name\': \'French Guiana\',\n-        u\'flag\': u\'/++resource++country-flags/gf.gif\',\n-    },\n-    u\'gg\': {\n-        u\'name\': \'Guernsey\',\n-        u\'flag\': u\'/++resource++country-flags/gg.gif\',\n-    },\n-    u\'gh\': {u\'name\': \'Ghana\', u\'flag\': u\'/++resource++country-flags/gh.gif\'},\n-    u\'gi\': {\n-        u\'name\': \'Gibraltar\',\n-        u\'flag\': u\'/++resource++country-flags/gi.gif\',\n-    },\n-    u\'gl\': {\n-        u\'name\': \'Greenland\',\n-        u\'flag\': u\'/++resource++country-flags/gl.gif\',\n-    },\n-    u\'gm\': {u\'name\': \'Gambia\', u\'flag\': u\'/++resource++country-flags/gm.gif\'},\n-    u\'gn\': {u\'name\': \'Guinea\', u\'flag\': u\'/++resource++country-flags/gn.gif\'},\n-    u\'gp\': {\n-        u\'name\': \'Guadeloupe\',\n-        u\'flag\': u\'/++resource++country-flags/gp.gif\',\n-    },\n-    u\'gq\': {\n-        u\'name\': \'Equatorial Guinea\',\n-        u\'flag\': u\'/++resource++country-flags/gq.gif\',\n-    },\n-    u\'gr\': {u\'name\': \'Greece\', u\'flag\': u\'/++resource++country-flags/gr.gif\'},\n-    u\'gs\': {\n-        u\'name\': \'South Georgia and the South Sandwich Islands\',\n-        u\'flag\': u\'/++resource++country-flags/gs.gif\',\n-    },\n-    u\'gt\': {\n-        u\'name\': \'Guatemala\',\n-        u\'flag\': u\'/++resource++country-flags/gt.gif\',\n-    },\n-    u\'gu\': {u\'name\': \'Guam\', u\'flag\': u\'/++resource++country-flags/gu.gif\'},\n-    u\'gw\': {\n-        u\'name\': \'Guinea-Bissau\',\n-        u\'flag\': u\'/++resource++country-flags/gw.gif\',\n-    },\n-    u\'gy\': {u\'name\': \'Guyana\', u\'flag\': u\'/++resource++country-flags/gy.gif\'},\n-    u\'hk\': {\n-        u\'name\': \'Hong Kong\',\n-        u\'flag\': u\'/++resource++country-flags/hk.gif\',\n-    },\n-    u\'hm\': {\n-        u\'name\': \'Heard Island and McDonald Islands\',\n-        u\'flag\': u\'/++resource++country-flags/hm.gif\',\n-    },\n-    u\'hn\': {\n-        u\'name\': \'Honduras\',\n-        u\'flag\': u\'/++resource++country-flags/hn.gif\',\n-    },\n-    u\'hr\': {u\'name\': \'Croatia\', u\'flag\': u\'/++resource++country-flags/hr.gif\'},\n-    u\'ht\': {u\'name\': \'Haiti\', u\'flag\': u\'/++resource++country-flags/ht.gif\'},\n-    u\'hu\': {u\'name\': \'Hungary\', u\'flag\': u\'/++resource++country-flags/hu.gif\'},\n-    u\'id\': {\n-        u\'name\': \'Indonesia\',\n-        u\'flag\': u\'/++resource++country-flags/id.gif\',\n-    },\n-    u\'ie\': {u\'name\': \'Ireland\', u\'flag\': u\'/++resource++country-flags/ie.gif\'},\n-    u\'il\': {u\'name\': \'Israel\', u\'flag\': u\'/++resource++country-flags/il.gif\'},\n-    u\'im\': {\n-        u\'name\': \'Isle of Man\',\n-        u\'flag\': u\'/++resource++country-flags/im.gif\',\n-    },\n-    u\'in\': {u\'name\': \'India\', u\'flag\': u\'/++resource++country-flags/in.gif\'},\n-    u\'io\': {\n-        u\'name\': \'British Indian Ocean Territory\',\n-        u\'flag\': u\'/++resource++country-flags/io.gif\',\n-    },\n-    u\'iq\': {u\'name\': \'Iraq\', u\'flag\': u\'/++resource++country-flags/iq.gif\'},\n-    u\'ir\': {\n-        u\'name\': \'Iran Islamic Republic of\',\n-        u\'flag\': u\'/++resource++country-flags/ir.gif\',\n-    },\n-    u\'is\': {u\'name\': \'Iceland\', u\'flag\': u\'/++resource++country-flags/is.gif\'},\n-    u\'it\': {u\'name\': \'Italy\', u\'flag\': u\'/++resource++country-flags/it.gif\'},\n-    u\'je\': {u\'name\': \'Jersey\', u\'flag\': u\'/++resource++country-flags/je.gif\'},\n-    u\'jm\': {u\'name\': \'Jamaica\', u\'flag\': u\'/++resource++country-flags/jm.gif\'},\n-    u\'jo\': {u\'name\': \'Jordan\', u\'flag\': u\'/++resource++country-flags/jo.gif\'},\n-    u\'jp\': {u\'name\': \'Japan\', u\'flag\': u\'/++resource++country-flags/jp.gif\'},\n-    u\'ke\': {u\'name\': \'Kenya\', u\'flag\': u\'/++resource++country-flags/ke.gif\'},\n-    u\'kg\': {\n-        u\'name\': \'Kyrgyzstan\',\n-        u\'flag\': u\'/++resource++country-flags/kg.gif\',\n-    },\n-    u\'kh\': {\n-        u\'name\': \'Cambodia\',\n-        u\'flag\': u\'/++resource++country-flags/kh.gif\',\n-    },\n-    u\'ki\': {\n-        u\'name\': \'Kiribati\',\n-        u\'flag\': u\'/++resource++country-flags/ki.gif\',\n-    },\n-    u\'km\': {u\'name\': \'Comoros\', u\'flag\': u\'/++resource++country-flags/km.gif\'},\n-    u\'kn\': {\n-        u\'name\': \'Saint Kitts and Nevis\',\n-        u\'flag\': u\'/++resource++country-flags/kn.gif\',\n-    },\n-    u\'kp\': {\n-        u\'name\': "Korea Democratic People\'s Republic of",\n-        u\'flag\': u\'/++resource++country-flags/kp.gif\',\n-    },\n-    u\'kr\': {\n-        u\'name\': \'Korea Republic of\',\n-        u\'flag\': u\'/++resource++country-flags/kr.gif\',\n-    },\n-    u\'kw\': {u\'name\': \'Kuwait\', u\'flag\': u\'/++resource++country-flags/kw.gif\'},\n-    u\'ky\': {\n-        u\'name\': \'Cayman Islands\',\n-        u\'flag\': u\'/++resource++country-flags/ky.gif\',\n-    },\n-    u\'kz\': {\n-        u\'name\': \'Kazakhstan\',\n-        u\'flag\': u\'/++resource++country-flags/kz.gif\',\n-    },\n-    u\'la\': {\n-        u\'name\': "Lao People\'s Democratic Republic",\n-        u\'flag\': u\'/++resource++country-flags/la.gif\',\n-    },\n-    u\'lb\': {u\'name\': \'Lebanon\', u\'flag\': u\'/++resource++country-flags/lb.gif\'},\n-    u\'lc\': {\n-        u\'name\': \'Saint Lucia\',\n-        u\'flag\': u\'/++resource++country-flags/lc.gif\',\n-    },\n-    u\'li\': {\n-        u\'name\': \'Liechtenstein\',\n-        u\'flag\': u\'/++resource++country-flags/li.gif\',\n-    },\n-    u\'lk\': {\n-        u\'name\': \'Sri Lanka\',\n-        u\'flag\': u\'/++resource++country-flags/lk.gif\',\n-    },\n-    u\'lr\': {u\'name\': \'Liberia\', u\'flag\': u\'/++resource++country-flags/lr.gif\'},\n-    u\'ls\': {u\'name\': \'Lesotho\', u\'flag\': u\'/++resource++country-flags/ls.gif\'},\n-    u\'lt\': {\n-        u\'name\': \'Lithuania\',\n-        u\'flag\': u\'/++resource++country-flags/lt.gif\',\n-    },\n-    u\'lu\': {\n-        u\'name\': \'Luxembourg\',\n-        u\'flag\': u\'/++resource++country-flags/lu.gif\',\n-    },\n-    u\'lv\': {u\'name\': \'Latvia\', u\'flag\': u\'/++resource++country-flags/lv.gif\'},\n-    u\'ly\': {\n-        u\'name\': \'Libyan Arab Jamahiriya\',\n-        u\'flag\': u\'/++resource++country-flags/ly.gif\',\n-    },\n-    u\'ma\': {u\'name\': \'Morocco\', u\'flag\': u\'/++resource++country-flags/ma.gif\'},\n-    u\'mc\': {u\'name\': \'Monaco\', u\'flag\': u\'/++resource++country-flags/mc.gif\'},\n-    u\'md\': {\n-        u\'name\': \'Moldova Republic of\',\n-        u\'flag\': u\'/++resource++country-flags/md.gif\',\n-    },\n-    u\'me\': {\n-        u\'name\': \'Montenegro\',\n-        u\'flag\': u\'/++resource++country-flags/me.gif\',\n-    },\n-    u\'mf\': {\n-        u\'name\': \'Saint Martin (French part)\',\n-        u\'flag\': u\'/++resource++country-flags/mf.png\',\n-    },\n-    u\'mg\': {\n-        u\'name\': \'Madagascar\',\n-        u\'flag\': u\'/++resource++country-flags/mg.gif\',\n-    },\n-    u\'mh\': {\n-        u\'name\': \'Marshall Islands\',\n-        u\'flag\': u\'/++resource++country-flags/mh.gif\',\n-    },\n-    u\'mk\': {\n-        u\'name\': \'Macedonia the former Yugoslavian Republic of\',\n-        u\'flag\': u\'/++resource++country-flags/mk.gif\',\n-    },\n-    u\'ml\': {u\'name\': \'Mali\', u\'flag\': u\'/++resource++country-flags/ml.gif\'},\n-    u\'mm\': {u\'name\': \'Myanmar\', u\'flag\': u\'/++resource++country-flags/mm.gif\'},\n-    u\'mn\': {\n-        u\'name\': \'Mongolia\',\n-        u\'flag\': u\'/++resource++country-flags/mn.gif\',\n-    },\n-    u\'mo\': {u\'name\': \'Macao\', u\'flag\': u\'/++resource++country-flags/mo.gif\'},\n-    u\'mp\': {\n-        u\'name\': \'Northern Mariana Islands\',\n-        u\'flag\': u\'/++resource++country-flags/mp.gif\',\n-    },\n-    u\'mq\': {\n-        u\'name\': \'Martinique\',\n-        u\'flag\': u\'/++resource++country-flags/mq.gif\',\n-    },\n-    u\'mr\': {\n-        u\'name\': \'Mauritania\',\n-        u\'flag\': u\'/++resource++country-flags/mr.gif\',\n-    },\n-    u\'ms\': {\n-        u\'name\': \'Montserrat\',\n-        u\'flag\': u\'/++resource++country-flags/ms.gif\',\n-    },\n-    u\'mt\': {u\'name\': \'Malta\', u\'flag\': u\'/++resource++country-flags/mt.gif\'},\n-    u\'mu\': {\n-        u\'name\': \'Mauritius\',\n-        u\'flag\': u\'/++resource++country-flags/mu.gif\',\n-    },\n-    u\'mv\': {\n-        u\'name\': \'Maldives\',\n-        u\'flag\': u\'/++resource++country-flags/mv.gif\',\n-    },\n-    u\'mw\': {u\'name\': \'Malawi\', u\'flag\': u\'/++resource++country-flags/mw.gif\'},\n-    u\'mx\': {u\'name\': \'Mexico\', u\'flag\': u\'/++resource++country-flags/mx.gif\'},\n-    u\'my\': {\n-        u\'name\': \'Malaysia\',\n-        u\'flag\': u\'/++resource++country-flags/my.gif\',\n-    },\n-    u\'mz\': {\n-        u\'name\': \'Mozambique\',\n-        u\'flag\': u\'/++resource++country-flags/mz.gif\',\n-    },\n-    u\'na\': {u\'name\': \'Namibia\', u\'flag\': u\'/++resource++country-flags/na.gif\'},\n-    u\'nc\': {\n-        u\'name\': \'New Caledonia\',\n-        u\'flag\': u\'/++resource++country-flags/nc.gif\',\n-    },\n-    u\'ne\': {u\'name\': \'Niger\', u\'flag\': u\'/++resource++country-flags/ne.gif\'},\n-    u\'nf\': {\n-        u\'name\': \'Norfolk Island\',\n-        u\'flag\': u\'/++resource++country-flags/nf.gif\',\n-    },\n-    u\'ng\': {u\'name\': \'Nigeria\', u\'flag\': u\'/++resource++country-flags/ng.gif\'},\n-    u\'ni\': {\n-        u\'name\': \'Nicaragua\',\n-        u\'flag\': u\'/++resource++country-flags/ni.gif\',\n-    },\n-    u\'nl\': {\n-        u\'name\': \'Netherlands\',\n-        u\'flag\': u\'/++resource++country-flags/nl.gif\',\n-    },\n-    u\'no\': {u\'name\': \'Norway\', u\'flag\': u\'/++resource++country-flags/no.gif\'},\n-    u\'np\': {u\'name\': \'Nepal\', u\'flag\': u\'/++resource++country-flags/np.gif\'},\n-    u\'nr\': {u\'name\': \'Nauru\', u\'flag\': u\'/++resource++country-flags/nr.gif\'},\n-    u\'nu\': {u\'name\': \'Niue\', u\'flag\': u\'/++resource++country-flags/nu.gif\'},\n-    u\'nz\': {\n-        u\'name\': \'New Zealand\',\n-        u\'flag\': u\'/++resource++country-flags/nz.gif\',\n-    },\n-    u\'om\': {u\'name\': \'Oman\', u\'flag\': u\'/++resource++country-flags/om.gif\'},\n-    u\'pa\': {u\'name\': \'Panama\', u\'flag\': u\'/++resource++country-flags/pa.gif\'},\n-    u\'pe\': {u\'name\': \'Peru\', u\'flag\': u\'/++resource++country-flags/pe.gif\'},\n-    u\'pf\': {\n-        u\'name\': \'French Polynesia\',\n-        u\'flag\': u\'/++resource++country-flags/pf.gif\',\n-    },\n-    u\'pg\': {\n-        u\'name\': \'Papua New Guinea\',\n-        u\'flag\': u\'/++resource++country-flags/pg.gif\',\n-    },\n-    u\'ph\': {\n-        u\'name\': \'Philippines\',\n-        u\'flag\': u\'/++resource++country-flags/ph.gif\',\n-    },\n-    u\'pk\': {\n-        u\'name\': \'Pakistan\',\n-        u\'flag\': u\'/++resource++country-flags/pk.gif\',\n-    },\n-    u\'pl\': {u\'name\': \'Poland\', u\'flag\': u\'/++resource++country-flags/pl.gif\'},\n-    u\'pm\': {\n-        u\'name\': \'Saint Pierre and Miquelon\',\n-        u\'flag\': u\'/++resource++country-flags/pm.gif\',\n-    },\n-    u\'pn\': {\n-        u\'name\': \'Pitcairn\',\n-        u\'flag\': u\'/++resource++country-flags/pn.gif\',\n-    },\n-    u\'pr\': {\n-        u\'name\': \'Puerto Rico\',\n-        u\'flag\': u\'/++resource++country-flags/pr.gif\',\n-    },\n-    u\'ps\': {\n-        u\'name\': \'Palestinian Territory occupied\',\n-        u\'flag\': u\'/++resource++country-flags/ps.gif\',\n-    },\n-    u\'pt\': {\n-        u\'name\': \'Portugal\',\n-        u\'flag\': u\'/++resource++country-flags/pt.gif\',\n-    },\n-    u\'pw\': {u\'name\': \'Palau\', u\'flag\': u\'/++resource++country-flags/pw.gif\'},\n-    u\'py\': {\n-        u\'name\': \'Paraguay\',\n-        u\'flag\': u\'/++resource++country-flags/py.gif\',\n-    },\n-    u\'qa\': {u\'name\': \'Qatar\', u\'flag\': u\'/++resource++country-flags/qa.gif\'},\n-    u\'re\': {u\'name\': \'Reunion\', u\'flag\': u\'/++resource++country-flags/re.gif\'},\n-    u\'ro\': {u\'name\': \'Romania\', u\'flag\': u\'/++resource++country-flags/ro.gif\'},\n-    u\'rs\': {u\'name\': \'Serbia\', u\'flag\': u\'/++resource++country-flags/rs.gif\'},\n-    u\'ru\': {\n-        u\'name\': \'Russian Federation\',\n-        u\'flag\': u\'/++resource++country-flags/ru.gif\',\n-    },\n-    u\'rw\': {u\'name\': \'Rwanda\', u\'flag\': u\'/++resource++country-flags/rw.gif\'},\n-    u\'sa\': {\n-        u\'name\': \'Saudi Arabia\',\n-        u\'flag\': u\'/++resource++country-flags/sa.gif\',\n-    },\n-    u\'sb\': {\n-        u\'name\': \'Solomon Islands\',\n-        u\'flag\': u\'/++resource++country-flags/sb.gif\',\n-    },\n-    u\'sc\': {\n-        u\'name\': \'Seychelles\',\n-        u\'flag\': u\'/++resource++country-flags/sc.gif\',\n-    },\n-    u\'sd\': {u\'name\': \'Sudan\', u\'flag\': u\'/++resource++country-flags/sd.gif\'},\n-    u\'se\': {u\'name\': \'Sweden\', u\'flag\': u\'/++resource++country-flags/se.gif\'},\n-    u\'sg\': {\n-        u\'name\': \'Singapore\',\n-        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n-    },\n-    u\'sh\': {\n-        u\'name\': \'Saint Helena\',\n-        u\'flag\': u\'/++resource++country-flags/sh.gif\',\n-    },\n-    u\'si\': {\n-        u\'name\': \'Slovenia\',\n-        u\'flag\': u\'/++resource++country-flags/si.gif\',\n-    },\n-    u\'sj\': {\n-        u\'name\': \'Svalbard and Jan Mayen\',\n-        u\'flag\': u\'/++resource++country-flags/sj.gif\',\n-    },\n-    u\'sk\': {\n-        u\'name\': \'Slovakia\',\n-        u\'flag\': u\'/++resource++country-flags/sk.gif\',\n-    },\n-    u\'sl\': {\n-        u\'name\': \'Sierra Leone\',\n-        u\'flag\': u\'/++resource++country-flags/sl.gif\',\n-    },\n-    u\'sm\': {\n-        u\'name\': \'San Marino\',\n-        u\'flag\': u\'/++resource++country-flags/sm.gif\',\n-    },\n-    u\'sn\': {u\'name\': \'Senegal\', u\'flag\': u\'/++resource++country-flags/sn.gif\'},\n-    u\'so\': {u\'name\': \'Somalia\', u\'flag\': u\'/++resource++country-flags/so.gif\'},\n-    u\'sr\': {\n-        u\'name\': \'Suriname\',\n-        u\'flag\': u\'/++resource++country-flags/sr.gif\',\n-    },\n-    u\'ss\': {\n-        u\'name\': \'South Sudan\',\n-        u\'flag\': u\'/++resource++country-flags/ss.png\',\n-    },\n-    u\'st\': {\n-        u\'name\': \'Sao Tome and Principe\',\n-        u\'flag\': u\'/++resource++country-flags/st.gif\',\n-    },\n-    u\'sv\': {\n-        u\'name\': \'El Salvador\',\n-        u\'flag\': u\'/++resource++country-flags/sv.gif\',\n-    },\n-    u\'sx\': {\n-        u\'name\': \'Sint Maarten (Dutch part)\',\n-        u\'flag\': u\'/++resource++country-flags/sx.png\',\n-    },\n-    u\'sy\': {\n-        u\'name\': \'Syrian Arab Republic\',\n-        u\'flag\': u\'/++resource++country-flags/sy.gif\',\n-    },\n-    u\'sz\': {\n-        u\'name\': \'Swaziland\',\n-        u\'flag\': u\'/++resource++country-flags/sz.gif\',\n-    },\n-    u\'tc\': {\n-        u\'name\': \'Turks and Caicos Islands\',\n-        u\'flag\': u\'/++resource++country-flags/tc.gif\',\n-    },\n-    u\'td\': {u\'name\': \'Chad\', u\'flag\': u\'/++resource++country-flags/td.gif\'},\n-    u\'tf\': {\n-        u\'name\': \'French Southern Territories\',\n-        u\'flag\': u\'/++resource++country-flags/tf.gif\',\n-    },\n-    u\'tg\': {u\'name\': \'Togo\', u\'flag\': u\'/++resource++country-flags/tg.gif\'},\n-    u\'th\': {\n-        u\'name\': \'Thailand\',\n-        u\'flag\': u\'/++resource++country-flags/th.gif\',\n-    },\n-    u\'tj\': {\n-        u\'name\': \'Tajikistan\',\n-        u\'flag\': u\'/++resource++country-flags/tj.gif\',\n-    },\n-    u\'tk\': {u\'name\': \'Tokelau\', u\'flag\': u\'/++resource++country-flags/tk.gif\'},\n-    u\'tl\': {\n-        u\'name\': \'Timor-Leste\',\n-        u\'flag\': u\'/++resource++country-flags/tl.gif\',\n-    },\n-    u\'tm\': {\n-        u\'name\': \'Turkmenistan\',\n-        u\'flag\': u\'/++resource++country-flags/tm.gif\',\n-    },\n-    u\'tn\': {u\'name\': \'Tunisia\', u\'flag\': u\'/++resource++country-flags/tn.gif\'},\n-    u\'to\': {u\'name\': \'Tonga\', u\'flag\': u\'/++resource++country-flags/to.gif\'},\n-    u\'tr\': {u\'name\': \'Turkey\', u\'flag\': u\'/++resource++country-flags/tr.gif\'},\n-    u\'tt\': {\n-        u\'name\': \'Trinidad and Tobago\',\n-        u\'flag\': u\'/++resource++country-flags/tt.gif\',\n-    },\n-    u\'tv\': {u\'name\': \'Tuvalu\', u\'flag\': u\'/++resource++country-flags/tv.gif\'},\n-    u\'tw\': {u\'name\': \'Taiwan\', u\'flag\': u\'/++resource++country-flags/tw.gif\'},\n-    u\'tz\': {\n-        u\'name\': \'Tanzania United Republic of\',\n-        u\'flag\': u\'/++resource++country-flags/tz.gif\',\n-    },\n-    u\'ua\': {u\'name\': \'Ukraine\', u\'flag\': u\'/++resource++country-flags/ua.gif\'},\n-    u\'ug\': {u\'name\': \'Uganda\', u\'flag\': u\'/++resource++country-flags/ug.gif\'},\n-    u\'um\': {\n-        u\'name\': \'United States Minor Outlying Islands\',\n-        u\'flag\': u\'/++resource++country-flags/um.gif\',\n-    },\n-    u\'us\': {\n-        u\'name\': \'United States\',\n-        u\'flag\': u\'/++resource++country-flags/us.gif\',\n-    },\n-    u\'uy\': {u\'name\': \'Uruguay\', u\'flag\': u\'/++resource++country-flags/uy.gif\'},\n-    u\'uz\': {\n-        u\'name\': \'Uzbekistan\',\n-        u\'flag\': u\'/++resource++country-flags/uz.gif\',\n-    },\n-    u\'va\': {\n-        u\'name\': \'Holy See (Vatican City State)\',\n-        u\'flag\': u\'/++resource++country-flags/va.gif\',\n-    },\n-    u\'vc\': {\n-        u\'name\': \'Saint Vincent and the Grenadines\',\n-        u\'flag\': u\'/++resource++country-flags/vc.gif\',\n-    },\n-    u\'ve\': {\n-        u\'name\': \'Venezuela\',\n-        u\'flag\': u\'/++resource++country-flags/ve.gif\',\n-    },\n-    u\'vg\': {\n-        u\'name\': \'Virgin Islands British\',\n-        u\'flag\': u\'/++resource++country-flags/vg.gif\',\n-    },\n-    u\'vi\': {\n-        u\'name\': \'Virgin Islands U.S.\',\n-        u\'flag\': u\'/++resource++country-flags/vi.gif\',\n-    },\n-    u\'vn\': {\n-        u\'name\': \'Viet Nam\',\n-        u\'flag\': u\'/++resource++country-flags/vn.gif\',\n-    },\n-    u\'vu\': {u\'name\': \'Vanuatu\', u\'flag\': u\'/++resource++country-flags/vu.gif\'},\n-    u\'wf\': {\n-        u\'name\': \'Wallis and Futuna\',\n-        u\'flag\': u\'/++resource++country-flags/wf.gif\',\n-    },\n-    u\'ws\': {u\'name\': \'Samoa\', u\'flag\': u\'/++resource++country-flags/ws.gif\'},\n-    u\'ye\': {u\'name\': \'Yemen\', u\'flag\': u\'/++resource++country-flags/ye.gif\'},\n-    u\'yt\': {u\'name\': \'Mayotte\', u\'flag\': u\'/++resource++country-flags/yt.gif\'},\n-    u\'za\': {\n-        u\'name\': \'South Africa\',\n-        u\'flag\': u\'/++resource++country-flags/za.gif\',\n-    },\n-    u\'zm\': {u\'name\': \'Zambia\', u\'flag\': u\'/++resource++country-flags/zm.gif\'},\n-    u\'zw\': {\n-        u\'name\': \'Zimbabwe\',\n-        u\'flag\': u\'/++resource++country-flags/zw.gif\',\n-    },\n-    u\'xk\': {u\'name\': \'Kosovo\', u\'flag\': u\'/++resource++country-flags/xk.gif\'},\n+    u"ad": {u"name": "Andorra", u"flag": u"/++resource++country-flags/ad.gif"},\n+    u"ae": {\n+        u"name": "United Arab Emirates",\n+        u"flag": u"/++resource++country-flags/ae.gif",\n+    },\n+    u"af": {\n+        u"name": "Afghanistan",\n+        u"flag": u"/++resource++country-flags/af.gif",\n+    },\n+    u"ag": {\n+        u"name": "Antigua and Barbuda",\n+        u"flag": u"/++resource++country-flags/ag.gif",\n+    },\n+    u"ai": {\n+        u"name": "Anguilla",\n+        u"flag": u"/++resource++country-flags/ai.gif",\n+    },\n+    u"al": {u"name": "Albania", u"flag": u"/++resource++country-flags/al.gif"},\n+    u"am": {u"name": "Armenia", u"flag": u"/++resource++country-flags/am.gif"},\n+    u"an": {\n+        u"name": "Netherlands Antilles",\n+        u"flag": u"/++resource++country-flags/an.gif",\n+    },\n+    u"ao": {u"name": "Angola", u"flag": u"/++resource++country-flags/ao.gif"},\n+    u"aq": {\n+        u"name": "Antarctica",\n+        u"flag": u"/++resource++country-flags/aq.gif",\n+    },\n+    u"ar": {\n+        u"name": "Argentina",\n+        u"flag": u"/++resource++country-flags/ar.gif",\n+    },\n+    u"as": {\n+        u"name": "American Samoa",\n+        u"flag": u"/++resource++country-flags/as.gif",\n+    },\n+    u"at": {u"name": "Austria", u"flag": u"/++resource++country-flags/at.gif"},\n+    u"au": {\n+        u"name": "Australia",\n+        u"flag": u"/++resource++country-flags/au.gif",\n+    },\n+    u"aw": {u"name": "Aruba", u"flag": u"/++resource++country-flags/aw.gif"},\n+    u"ax": {\n+        u"name": "Oland Islands",\n+        u"flag": u"/++resource++country-flags/ax.gif",\n+    },\n+    u"az": {\n+        u"name": "Azerbaijan",\n+        u"flag": u"/++resource++country-flags/az.gif",\n+    },\n+    u"ba": {\n+        u"name": "Bosnia and Herzegovina",\n+        u"flag": u"/++resource++country-flags/ba.gif",\n+    },\n+    u"bb": {\n+        u"name": "Barbados",\n+        u"flag": u"/++resource++country-flags/bb.gif",\n+    },\n+    u"bd": {\n+        u"name": "Bangladesh",\n+        u"flag": u"/++resource++country-flags/bd.gif",\n+    },\n+    u"be": {u"name": "Belgium", u"flag": u"/++resource++country-flags/be.gif"},\n+    u"bf": {\n+        u"name": "Burkina Faso",\n+        u"flag": u"/++resource++country-flags/bf.gif",\n+    },\n+    u"bg": {\n+        u"name": "Bulgaria",\n+        u"flag": u"/++resource++country-flags/bg.gif",\n+    },\n+    u"bh": {u"name": "Bahrain", u"flag": u"/++resource++country-flags/bh.gif"},\n+    u"bi": {u"name": "Burundi", u"flag": u"/++resource++country-flags/bi.gif"},\n+    u"bj": {u"name": "Benin", u"flag": u"/++resource++country-flags/bj.gif"},\n+    u"bl": {\n+        u"name": "Saint Barth\xc3\xa9lemy",\n+        u"flag": u"/++resource++country-flags/bl.gif",\n+    },\n+    u"bm": {u"name": "Bermuda", u"flag": u"/++resource++country-flags/bm.gif"},\n+    u"bn": {\n+        u"name": "Brunei Darussalam",\n+        u"flag": u"/++resource++country-flags/bn.gif",\n+    },\n+    u"bo": {u"name": "Bolivia", u"flag": u"/++resource++country-flags/bo.gif"},\n+    u"bq": {\n+        u"name": "Bonaire, Sint Eustatius and Saba",\n+        u"flag": u"/++resource++country-flags/bq.gif",\n+    },\n+    u"br": {u"name": "Brazil", u"flag": u"/++resource++country-flags/br.gif"},\n+    u"bs": {u"name": "Bahamas", u"flag": u"/++resource++country-flags/bs.gif"},\n+    u"bt": {u"name": "Bhutan", u"flag": u"/++resource++country-flags/bt.gif"},\n+    u"bv": {\n+        u"name": "Bouvet Island",\n+        u"flag": u"/++resource++country-flags/bv.gif",\n+    },\n+    u"bw": {\n+        u"name": "Botswana",\n+        u"flag": u"/++resource++country-flags/bw.gif",\n+    },\n+    u"by": {u"name": "Belarus", u"flag": u"/++resource++country-flags/by.gif"},\n+    u"bz": {u"name": "Belize", u"flag": u"/++resource++country-flags/bz.gif"},\n+    u"ca": {u"name": "Canada", u"flag": u"/++resource++country-flags/ca.gif"},\n+    u"cc": {\n+        u"name": "Cocos (Keeling) Islands",\n+        u"flag": u"/++resource++country-flags/cc.gif",\n+    },\n+    u"cd": {\n+        u"name": "Congo The Democratic Republic of",\n+        u"flag": u"/++resource++country-flags/cd.gif",\n+    },\n+    u"cf": {\n+        u"name": "Central African Republic",\n+        u"flag": u"/++resource++country-flags/cf.gif",\n+    },\n+    u"cg": {u"name": "Congo", u"flag": u"/++resource++country-flags/cg.gif"},\n+    u"ch": {\n+        u"name": "Switzerland",\n+        u"flag": u"/++resource++country-flags/ch.gif",\n+    },\n+    u"ci": {\n+        u"name": "Cote d\'Ivoire",\n+        u"flag": u"/++resource++country-flags/ci.gif",\n+    },\n+    u"ck": {\n+        u"name": "Cook Islands",\n+        u"flag": u"/++resource++country-flags/ck.gif",\n+    },\n+    u"cl": {u"name": "Chile", u"flag": u"/++resource++country-flags/cl.gif"},\n+    u"cm": {\n+        u"name": "Cameroon",\n+        u"flag": u"/++resource++country-flags/cm.gif",\n+    },\n+    u"cn": {u"name": "China", u"flag": u"/++resource++country-flags/cn.gif"},\n+    u"co": {\n+        u"name": "Colombia",\n+        u"flag": u"/++resource++country-flags/co.gif",\n+    },\n+    u"cr": {\n+        u"name": "Costa Rica",\n+        u"flag": u"/++resource++country-flags/cr.gif",\n+    },\n+    u"cs": {\n+        u"name": "Serbia and Montenegro",\n+        u"flag": u"/++resource++country-flags/cs.gif",\n+    },\n+    u"cu": {u"name": "Cuba", u"flag": u"/++resource++country-flags/cu.gif"},\n+    u"cv": {\n+        u"name": "Cape Verde",\n+        u"flag": u"/++resource++country-flags/cv.gif",\n+    },\n+    u"cw": {u"name": "Cura\xc3\xa7ao", u"flag": u"/++resource++country-flags/cw.png"},\n+    u"cx": {\n+        u"name": "Christmas Island",\n+        u"flag": u"/++resource++country-flags/cx.gif",\n+    },\n+    u"cy": {u"name": "Cyprus", u"flag": u"/++resource++country-flags/cy.gif"},\n+    u"cz": {\n+        u"name": "Czech Republic",\n+        u"flag": u"/++resource++country-flags/cz.gif",\n+    },\n+    u"de": {u"name": "Germany", u"flag": u"/++resource++country-flags/de.gif"},\n+    u"dj": {\n+        u"name": "Djibouti",\n+        u"flag": u"/++resource++country-flags/dj.gif",\n+    },\n+    u"dk": {u"name": "Denmark", u"flag": u"/++resource++country-flags/dk.gif"},\n+    u"dm": {\n+        u"name": "Dominica",\n+        u"flag": u"/++resource++country-flags/dm.gif",\n+    },\n+    u"do": {\n+        u"name": "Dominican Republic",\n+        u"flag": u"/++resource++country-flags/do.gif",\n+    },\n+    u"dz": {u"name": "Algeria", u"flag": u"/++resource++country-flags/dz.gif"},\n+    u"ec": {u"name": "Ecuador", u"flag": u"/++resource++country-flags/ec.gif"},\n+    u"ee": {u"name": "Estonia", u"flag": u"/++resource++country-flags/ee.gif"},\n+    u"eg": {u"name": "Egypt", u"flag": u"/++resource++country-flags/eg.gif"},\n+    u"eh": {\n+        u"name": "Western Sahara",\n+        u"flag": u"/++resource++country-flags/eh.gif",\n+    },\n+    u"er": {u"name": "Eritrea", u"flag": u"/++resource++country-flags/er.gif"},\n+    u"es": {u"name": "Spain", u"flag": u"/++resource++country-flags/es.gif"},\n+    u"et": {\n+        u"name": "Ethiopia",\n+        u"flag": u"/++resource++country-flags/et.gif",\n+    },\n+    u"fi": {u"name": "Finland", u"flag": u"/++resource++country-flags/fi.gif"},\n+    u"fj": {u"name": "Fiji", u"flag": u"/++resource++country-flags/fj.gif"},\n+    u"fk": {\n+        u"name": "Falkland Islands (Malvinas)",\n+        u"flag": u"/++resource++country-flags/fk.gif",\n+    },\n+    u"fm": {\n+        u"name": "Micronesia Federated States of",\n+        u"flag": u"/++resource++country-flags/fm.gif",\n+    },\n+    u"fo": {\n+        u"name": "Faroe Islands",\n+        u"flag": u"/++resource++country-flags/fo.gif",\n+    },\n+    u"fr": {u"name": "France", u"flag": u"/++resource++country-flags/fr.gif"},\n+    u"ga": {u"name": "Gabon", u"flag": u"/++resource++country-flags/ga.gif"},\n+    u"gb": {\n+        u"name": "United Kingdom",\n+        u"flag": u"/++resource++country-flags/gb.gif",\n+    },\n+    u"gd": {u"name": "Grenada", u"flag": u"/++resource++country-flags/gd.gif"},\n+    u"ge": {u"name": "Georgia", u"flag": u"/++resource++country-flags/ge.gif"},\n+    u"gf": {\n+        u"name": "French Guiana",\n+        u"flag": u"/++resource++country-flags/gf.gif",\n+    },\n+    u"gg": {\n+        u"name": "Guernsey",\n+        u"flag": u"/++resource++country-flags/gg.gif",\n+    },\n+    u"gh": {u"name": "Ghana", u"flag": u"/++resource++country-flags/gh.gif"},\n+    u"gi": {\n+        u"name": "Gibraltar",\n+        u"flag": u"/++resource++country-flags/gi.gif",\n+    },\n+    u"gl": {\n+        u"name": "Greenland",\n+        u"flag": u"/++resource++country-flags/gl.gif",\n+    },\n+    u"gm": {u"name": "Gambia", u"flag": u"/++resource++country-flags/gm.gif"},\n+    u"gn": {u"name": "Guinea", u"flag": u"/++resource++country-flags/gn.gif"},\n+    u"gp": {\n+        u"name": "Guadeloupe",\n+        u"flag": u"/++resource++country-flags/gp.gif",\n+    },\n+    u"gq": {\n+        u"name": "Equatorial Guinea",\n+        u"flag": u"/++resource++country-flags/gq.gif",\n+    },\n+    u"gr": {u"name": "Greece", u"flag": u"/++resource++country-flags/gr.gif"},\n+    u"gs": {\n+        u"name": "South Georgia and the South Sandwich Islands",\n+        u"flag": u"/++resource++country-flags/gs.gif",\n+    },\n+    u"gt": {\n+        u"name": "Guatemala",\n+        u"flag": u"/++resource++country-flags/gt.gif",\n+    },\n+    u"gu": {u"name": "Guam", u"flag": u"/++resource++country-flags/gu.gif"},\n+    u"gw": {\n+        u"name": "Guinea-Bissau",\n+        u"flag": u"/++resource++country-flags/gw.gif",\n+    },\n+    u"gy": {u"name": "Guyana", u"flag": u"/++resource++country-flags/gy.gif"},\n+    u"hk": {\n+        u"name": "Hong Kong",\n+        u"flag": u"/++resource++country-flags/hk.gif",\n+    },\n+    u"hm": {\n+        u"name": "Heard Island and McDonald Islands",\n+        u"flag": u"/++resource++country-flags/hm.gif",\n+    },\n+    u"hn": {\n+        u"name": "Honduras",\n+        u"flag": u"/++resource++country-flags/hn.gif",\n+    },\n+    u"hr": {u"name": "Croatia", u"flag": u"/++resource++country-flags/hr.gif"},\n+    u"ht": {u"name": "Haiti", u"flag": u"/++resource++country-flags/ht.gif"},\n+    u"hu": {u"name": "Hungary", u"flag": u"/++resource++country-flags/hu.gif"},\n+    u"id": {\n+        u"name": "Indonesia",\n+        u"flag": u"/++resource++country-flags/id.gif",\n+    },\n+    u"ie": {u"name": "Ireland", u"flag": u"/++resource++country-flags/ie.gif"},\n+    u"il": {u"name": "Israel", u"flag": u"/++resource++country-flags/il.gif"},\n+    u"im": {\n+        u"name": "Isle of Man",\n+        u"flag": u"/++resource++country-flags/im.gif",\n+    },\n+    u"in": {u"name": "India", u"flag": u"/++resource++country-flags/in.gif"},\n+    u"io": {\n+        u"name": "British Indian Ocean Territory",\n+        u"flag": u"/++resource++country-flags/io.gif",\n+    },\n+    u"iq": {u"name": "Iraq", u"flag": u"/++resource++country-flags/iq.gif"},\n+    u"ir": {\n+        u"name": "Iran Islamic Republic of",\n+        u"flag": u"/++resource++country-flags/ir.gif",\n+    },\n+    u"is": {u"name": "Iceland", u"flag": u"/++resource++country-flags/is.gif"},\n+    u"it": {u"name": "Italy", u"flag": u"/++resource++country-flags/it.gif"},\n+    u"je": {u"name": "Jersey", u"flag": u"/++resource++country-flags/je.gif"},\n+    u"jm": {u"name": "Jamaica", u"flag": u"/++resource++country-flags/jm.gif"},\n+    u"jo": {u"name": "Jordan", u"flag": u"/++resource++country-flags/jo.gif"},\n+    u"jp": {u"name": "Japan", u"flag": u"/++resource++country-flags/jp.gif"},\n+    u"ke": {u"name": "Kenya", u"flag": u"/++resource++country-flags/ke.gif"},\n+    u"kg": {\n+        u"name": "Kyrgyzstan",\n+        u"flag": u"/++resource++country-flags/kg.gif",\n+    },\n+    u"kh": {\n+        u"name": "Cambodia",\n+        u"flag": u"/++resource++country-flags/kh.gif",\n+    },\n+    u"ki": {\n+        u"name": "Kiribati",\n+        u"flag": u"/++resource++country-flags/ki.gif",\n+    },\n+    u"km": {u"name": "Comoros", u"flag": u"/++resource++country-flags/km.gif"},\n+    u"kn": {\n+        u"name": "Saint Kitts and Nevis",\n+        u"flag": u"/++resource++country-flags/kn.gif",\n+    },\n+    u"kp": {\n+        u"name": "Korea Democratic People\'s Republic of",\n+        u"flag": u"/++resource++country-flags/kp.gif",\n+    },\n+    u"kr": {\n+        u"name": "Korea Republic of",\n+        u"flag": u"/++resource++country-flags/kr.gif",\n+    },\n+    u"kw": {u"name": "Kuwait", u"flag": u"/++resource++country-flags/kw.gif"},\n+    u"ky": {\n+        u"name": "Cayman Islands",\n+        u"flag": u"/++resource++country-flags/ky.gif",\n+    },\n+    u"kz": {\n+        u"name": "Kazakhstan",\n+        u"flag": u"/++resource++country-flags/kz.gif",\n+    },\n+    u"la": {\n+        u"name": "Lao People\'s Democratic Republic",\n+        u"flag": u"/++resource++country-flags/la.gif",\n+    },\n+    u"lb": {u"name": "Lebanon", u"flag": u"/++resource++country-flags/lb.gif"},\n+    u"lc": {\n+        u"name": "Saint Lucia",\n+        u"flag": u"/++resource++country-flags/lc.gif",\n+    },\n+    u"li": {\n+        u"name": "Liechtenstein",\n+        u"flag": u"/++resource++country-flags/li.gif",\n+    },\n+    u"lk": {\n+        u"name": "Sri Lanka",\n+        u"flag": u"/++resource++country-flags/lk.gif",\n+    },\n+    u"lr": {u"name": "Liberia", u"flag": u"/++resource++country-flags/lr.gif"},\n+    u"ls": {u"name": "Lesotho", u"flag": u"/++resource++country-flags/ls.gif"},\n+    u"lt": {\n+        u"name": "Lithuania",\n+        u"flag": u"/++resource++country-flags/lt.gif",\n+    },\n+    u"lu": {\n+        u"name": "Luxembourg",\n+        u"flag": u"/++resource++country-flags/lu.gif",\n+    },\n+    u"lv": {u"name": "Latvia", u"flag": u"/++resource++country-flags/lv.gif"},\n+    u"ly": {\n+        u"name": "Libyan Arab Jamahiriya",\n+        u"flag": u"/++resource++country-flags/ly.gif",\n+    },\n+    u"ma": {u"name": "Morocco", u"flag": u"/++resource++country-flags/ma.gif"},\n+    u"mc": {u"name": "Monaco", u"flag": u"/++resource++country-flags/mc.gif"},\n+    u"md": {\n+        u"name": "Moldova Republic of",\n+        u"flag": u"/++resource++country-flags/md.gif",\n+    },\n+    u"me": {\n+        u"name": "Montenegro",\n+        u"flag": u"/++resource++country-flags/me.gif",\n+    },\n+    u"mf": {\n+        u"name": "Saint Martin (French part)",\n+        u"flag": u"/++resource++country-flags/mf.png",\n+    },\n+    u"mg": {\n+        u"name": "Madagascar",\n+        u"flag": u"/++resource++country-flags/mg.gif",\n+    },\n+    u"mh": {\n+        u"name": "Marshall Islands",\n+        u"flag": u"/++resource++country-flags/mh.gif",\n+    },\n+    u"mk": {\n+        u"name": "Macedonia the former Yugoslavian Republic of",\n+        u"flag": u"/++resource++country-flags/mk.gif",\n+    },\n+    u"ml": {u"name": "Mali", u"flag": u"/++resource++country-flags/ml.gif"},\n+    u"mm": {u"name": "Myanmar", u"flag": u"/++resource++country-flags/mm.gif"},\n+    u"mn": {\n+        u"name": "Mongolia",\n+        u"flag": u"/++resource++country-flags/mn.gif",\n+    },\n+    u"mo": {u"name": "Macao", u"flag": u"/++resource++country-flags/mo.gif"},\n+    u"mp": {\n+        u"name": "Northern Mariana Islands",\n+        u"flag": u"/++resource++country-flags/mp.gif",\n+    },\n+    u"mq": {\n+        u"name": "Martinique",\n+        u"flag": u"/++resource++country-flags/mq.gif",\n+    },\n+    u"mr": {\n+        u"name": "Mauritania",\n+        u"flag": u"/++resource++country-flags/mr.gif",\n+    },\n+    u"ms": {\n+        u"name": "Montserrat",\n+        u"flag": u"/++resource++country-flags/ms.gif",\n+    },\n+    u"mt": {u"name": "Malta", u"flag": u"/++resource++country-flags/mt.gif"},\n+    u"mu": {\n+        u"name": "Mauritius",\n+        u"flag": u"/++resource++country-flags/mu.gif",\n+    },\n+    u"mv": {\n+        u"name": "Maldives",\n+        u"flag": u"/++resource++country-flags/mv.gif",\n+    },\n+    u"mw": {u"name": "Malawi", u"flag": u"/++resource++country-flags/mw.gif"},\n+    u"mx": {u"name": "Mexico", u"flag": u"/++resource++country-flags/mx.gif"},\n+    u"my": {\n+        u"name": "Malaysia",\n+        u"flag": u"/++resource++country-flags/my.gif",\n+    },\n+    u"mz": {\n+        u"name": "Mozambique",\n+        u"flag": u"/++resource++country-flags/mz.gif",\n+    },\n+    u"na": {u"name": "Namibia", u"flag": u"/++resource++country-flags/na.gif"},\n+    u"nc": {\n+        u"name": "New Caledonia",\n+        u"flag": u"/++resource++country-flags/nc.gif",\n+    },\n+    u"ne": {u"name": "Niger", u"flag": u"/++resource++country-flags/ne.gif"},\n+    u"nf": {\n+        u"name": "Norfolk Island",\n+        u"flag": u"/++resource++country-flags/nf.gif",\n+    },\n+    u"ng": {u"name": "Nigeria", u"flag": u"/++resource++country-flags/ng.gif"},\n+    u"ni": {\n+        u"name": "Nicaragua",\n+        u"flag": u"/++resource++country-flags/ni.gif",\n+    },\n+    u"nl": {\n+        u"name": "Netherlands",\n+        u"flag": u"/++resource++country-flags/nl.gif",\n+    },\n+    u"no": {u"name": "Norway", u"flag": u"/++resource++country-flags/no.gif"},\n+    u"np": {u"name": "Nepal", u"flag": u"/++resource++country-flags/np.gif"},\n+    u"nr": {u"name": "Nauru", u"flag": u"/++resource++country-flags/nr.gif"},\n+    u"nu": {u"name": "Niue", u"flag": u"/++resource++country-flags/nu.gif"},\n+    u"nz": {\n+        u"name": "New Zealand",\n+        u"flag": u"/++resource++country-flags/nz.gif",\n+    },\n+    u"om": {u"name": "Oman", u"flag": u"/++resource++country-flags/om.gif"},\n+    u"pa": {u"name": "Panama", u"flag": u"/++resource++country-flags/pa.gif"},\n+    u"pe": {u"name": "Peru", u"flag": u"/++resource++country-flags/pe.gif"},\n+    u"pf": {\n+        u"name": "French Polynesia",\n+        u"flag": u"/++resource++country-flags/pf.gif",\n+    },\n+    u"pg": {\n+        u"name": "Papua New Guinea",\n+        u"flag": u"/++resource++country-flags/pg.gif",\n+    },\n+    u"ph": {\n+        u"name": "Philippines",\n+        u"flag": u"/++resource++country-flags/ph.gif",\n+    },\n+    u"pk": {\n+        u"name": "Pakistan",\n+        u"flag": u"/++resource++country-flags/pk.gif",\n+    },\n+    u"pl": {u"name": "Poland", u"flag": u"/++resource++country-flags/pl.gif"},\n+    u"pm": {\n+        u"name": "Saint Pierre and Miquelon",\n+        u"flag": u"/++resource++country-flags/pm.gif",\n+    },\n+    u"pn": {\n+        u"name": "Pitcairn",\n+        u"flag": u"/++resource++country-flags/pn.gif",\n+    },\n+    u"pr": {\n+        u"name": "Puerto Rico",\n+        u"flag": u"/++resource++country-flags/pr.gif",\n+    },\n+    u"ps": {\n+        u"name": "Palestinian Territory occupied",\n+        u"flag": u"/++resource++country-flags/ps.gif",\n+    },\n+    u"pt": {\n+        u"name": "Portugal",\n+        u"flag": u"/++resource++country-flags/pt.gif",\n+    },\n+    u"pw": {u"name": "Palau", u"flag": u"/++resource++country-flags/pw.gif"},\n+    u"py": {\n+        u"name": "Paraguay",\n+        u"flag": u"/++resource++country-flags/py.gif",\n+    },\n+    u"qa": {u"name": "Qatar", u"flag": u"/++resource++country-flags/qa.gif"},\n+    u"re": {u"name": "Reunion", u"flag": u"/++resource++country-flags/re.gif"},\n+    u"ro": {u"name": "Romania", u"flag": u"/++resource++country-flags/ro.gif"},\n+    u"rs": {u"name": "Serbia", u"flag": u"/++resource++country-flags/rs.gif"},\n+    u"ru": {\n+        u"name": "Russian Federation",\n+        u"flag": u"/++resource++country-flags/ru.gif",\n+    },\n+    u"rw": {u"name": "Rwanda", u"flag": u"/++resource++country-flags/rw.gif"},\n+    u"sa": {\n+        u"name": "Saudi Arabia",\n+        u"flag": u"/++resource++country-flags/sa.gif",\n+    },\n+    u"sb": {\n+        u"name": "Solomon Islands",\n+        u"flag": u"/++resource++country-flags/sb.gif",\n+    },\n+    u"sc": {\n+        u"name": "Seychelles",\n+        u"flag": u"/++resource++country-flags/sc.gif",\n+    },\n+    u"sd": {u"name": "Sudan", u"flag": u"/++resource++country-flags/sd.gif"},\n+    u"se": {u"name": "Sweden", u"flag": u"/++resource++country-flags/se.gif"},\n+    u"sg": {\n+        u"name": "Singapore",\n+        u"flag": u"/++resource++country-flags/sg.gif",\n+    },\n+    u"sh": {\n+        u"name": "Saint Helena",\n+        u"flag": u"/++resource++country-flags/sh.gif",\n+    },\n+    u"si": {\n+        u"name": "Slovenia",\n+        u"flag": u"/++resource++country-flags/si.gif",\n+    },\n+    u"sj": {\n+        u"name": "Svalbard and Jan Mayen",\n+        u"flag": u"/++resource++country-flags/sj.gif",\n+    },\n+    u"sk": {\n+        u"name": "Slovakia",\n+        u"flag": u"/++resource++country-flags/sk.gif",\n+    },\n+    u"sl": {\n+        u"name": "Sierra Leone",\n+        u"flag": u"/++resource++country-flags/sl.gif",\n+    },\n+    u"sm": {\n+        u"name": "San Marino",\n+        u"flag": u"/++resource++country-flags/sm.gif",\n+    },\n+    u"sn": {u"name": "Senegal", u"flag": u"/++resource++country-flags/sn.gif"},\n+    u"so": {u"name": "Somalia", u"flag": u"/++resource++country-flags/so.gif"},\n+    u"sr": {\n+        u"name": "Suriname",\n+        u"flag": u"/++resource++country-flags/sr.gif",\n+    },\n+    u"ss": {\n+        u"name": "South Sudan",\n+        u"flag": u"/++resource++country-flags/ss.png",\n+    },\n+    u"st": {\n+        u"name": "Sao Tome and Principe",\n+        u"flag": u"/++resource++country-flags/st.gif",\n+    },\n+    u"sv": {\n+        u"name": "El Salvador",\n+        u"flag": u"/++resource++country-flags/sv.gif",\n+    },\n+    u"sx": {\n+        u"name": "Sint Maarten (Dutch part)",\n+        u"flag": u"/++resource++country-flags/sx.png",\n+    },\n+    u"sy": {\n+        u"name": "Syrian Arab Republic",\n+        u"flag": u"/++resource++country-flags/sy.gif",\n+    },\n+    u"sz": {\n+        u"name": "Swaziland",\n+        u"flag": u"/++resource++country-flags/sz.gif",\n+    },\n+    u"tc": {\n+        u"name": "Turks and Caicos Islands",\n+        u"flag": u"/++resource++country-flags/tc.gif",\n+    },\n+    u"td": {u"name": "Chad", u"flag": u"/++resource++country-flags/td.gif"},\n+    u"tf": {\n+        u"name": "French Southern Territories",\n+        u"flag": u"/++resource++country-flags/tf.gif",\n+    },\n+    u"tg": {u"name": "Togo", u"flag": u"/++resource++country-flags/tg.gif"},\n+    u"th": {\n+        u"name": "Thailand",\n+        u"flag": u"/++resource++country-flags/th.gif",\n+    },\n+    u"tj": {\n+        u"name": "Tajikistan",\n+        u"flag": u"/++resource++country-flags/tj.gif",\n+    },\n+    u"tk": {u"name": "Tokelau", u"flag": u"/++resource++country-flags/tk.gif"},\n+    u"tl": {\n+        u"name": "Timor-Leste",\n+        u"flag": u"/++resource++country-flags/tl.gif",\n+    },\n+    u"tm": {\n+        u"name": "Turkmenistan",\n+        u"flag": u"/++resource++country-flags/tm.gif",\n+    },\n+    u"tn": {u"name": "Tunisia", u"flag": u"/++resource++country-flags/tn.gif"},\n+    u"to": {u"name": "Tonga", u"flag": u"/++resource++country-flags/to.gif"},\n+    u"tr": {u"name": "Turkey", u"flag": u"/++resource++country-flags/tr.gif"},\n+    u"tt": {\n+        u"name": "Trinidad and Tobago",\n+        u"flag": u"/++resource++country-flags/tt.gif",\n+    },\n+    u"tv": {u"name": "Tuvalu", u"flag": u"/++resource++country-flags/tv.gif"},\n+    u"tw": {u"name": "Taiwan", u"flag": u"/++resource++country-flags/tw.gif"},\n+    u"tz": {\n+        u"name": "Tanzania United Republic of",\n+        u"flag": u"/++resource++country-flags/tz.gif",\n+    },\n+    u"ua": {u"name": "Ukraine", u"flag": u"/++resource++country-flags/ua.gif"},\n+    u"ug": {u"name": "Uganda", u"flag": u"/++resource++country-flags/ug.gif"},\n+    u"um": {\n+        u"name": "United States Minor Outlying Islands",\n+        u"flag": u"/++resource++country-flags/um.gif",\n+    },\n+    u"us": {\n+        u"name": "United States",\n+        u"flag": u"/++resource++country-flags/us.gif",\n+    },\n+    u"uy": {u"name": "Uruguay", u"flag": u"/++resource++country-flags/uy.gif"},\n+    u"uz": {\n+        u"name": "Uzbekistan",\n+        u"flag": u"/++resource++country-flags/uz.gif",\n+    },\n+    u"va": {\n+        u"name": "Holy See (Vatican City State)",\n+        u"flag": u"/++resource++country-flags/va.gif",\n+    },\n+    u"vc": {\n+        u"name": "Saint Vincent and the Grenadines",\n+        u"flag": u"/++resource++country-flags/vc.gif",\n+    },\n+    u"ve": {\n+        u"name": "Venezuela",\n+        u"flag": u"/++resource++country-flags/ve.gif",\n+    },\n+    u"vg": {\n+        u"name": "Virgin Islands British",\n+        u"flag": u"/++resource++country-flags/vg.gif",\n+    },\n+    u"vi": {\n+        u"name": "Virgin Islands U.S.",\n+        u"flag": u"/++resource++country-flags/vi.gif",\n+    },\n+    u"vn": {\n+        u"name": "Viet Nam",\n+        u"flag": u"/++resource++country-flags/vn.gif",\n+    },\n+    u"vu": {u"name": "Vanuatu", u"flag": u"/++resource++country-flags/vu.gif"},\n+    u"wf": {\n+        u"name": "Wallis and Futuna",\n+        u"flag": u"/++resource++country-flags/wf.gif",\n+    },\n+    u"ws": {u"name": "Samoa", u"flag": u"/++resource++country-flags/ws.gif"},\n+    u"ye": {u"name": "Yemen", u"flag": u"/++resource++country-flags/ye.gif"},\n+    u"yt": {u"name": "Mayotte", u"flag": u"/++resource++country-flags/yt.gif"},\n+    u"za": {\n+        u"name": "South Africa",\n+        u"flag": u"/++resource++country-flags/za.gif",\n+    },\n+    u"zm": {u"name": "Zambia", u"flag": u"/++resource++country-flags/zm.gif"},\n+    u"zw": {\n+        u"name": "Zimbabwe",\n+        u"flag": u"/++resource++country-flags/zw.gif",\n+    },\n+    u"xk": {u"name": "Kosovo", u"flag": u"/++resource++country-flags/xk.gif"},\n }\n \n # convert the utf-8 encoded values to unicode\n for code in _countrylist:\n     value = _countrylist[code]\n-    if u\'name\' in value:\n+    if u"name" in value:\n         if six.PY3:\n-            value[u\'name\'] = value[u\'name\']\n+            value[u"name"] = value[u"name"]\n         else:\n-            value[u\'name\'] = unicode(value[u\'name\'], \'utf-8\')\n+            value[u"name"] = unicode(value[u"name"], "utf-8")\ndiff --git a/plone/i18n/locales/interfaces.py b/plone/i18n/locales/interfaces.py\nindex f1f58b2..3ae0202 100644\n--- a/plone/i18n/locales/interfaces.py\n+++ b/plone/i18n/locales/interfaces.py\n@@ -1,7 +1,5 @@\n # -*- coding: utf-8 -*-\n-from zope.i18n.interfaces import (\n-    ILanguageAvailability as IBaseLanguageAvailability,\n-)\n+from zope.i18n.interfaces import ILanguageAvailability as IBaseLanguageAvailability\n from zope.interface import Interface\n \n \n@@ -9,44 +7,36 @@ class ICcTLDInformation(Interface):\n     """A list of country code top level domains their relevant languages."""\n \n     def getAvailableTLDs():\n-        """Return a sequence of country code top level domains.\n-        """\n+        """Return a sequence of country code top level domains."""\n \n     def getTLDs():\n-        """Return a sequence of ccTLDs and their languages.\n-        """\n+        """Return a sequence of ccTLDs and their languages."""\n \n     def getLanguagesForTLD(tld):\n-        """Return the relevant languages for a top level domain.\n-        """\n+        """Return the relevant languages for a top level domain."""\n \n \n class ICountryAvailability(Interface):\n     """A list of available coutries."""\n \n     def getAvailableCountries():\n-        """Return a sequence of country tags for available countries.\n-        """\n+        """Return a sequence of country tags for available countries."""\n \n     def getCountries():\n-        """Return a sequence of Country objects for available countries.\n-        """\n+        """Return a sequence of Country objects for available countries."""\n \n     def getCountryListing():\n-        """Return a sequence of country code and country name tuples.\n-        """\n+        """Return a sequence of country code and country name tuples."""\n \n \n class ILanguageAvailability(IBaseLanguageAvailability):\n     """A list of available languages."""\n \n     def getLanguages(combined=False):\n-        """Return a sequence of Language objects for available languages.\n-        """\n+        """Return a sequence of Language objects for available languages."""\n \n     def getLanguageListing(combined=False):\n-        """Return a sequence of language code and language name tuples.\n-        """\n+        """Return a sequence of language code and language name tuples."""\n \n \n class IContentLanguageAvailability(ILanguageAvailability):\n@@ -61,13 +51,11 @@ class IModifiableLanguageAvailability(ILanguageAvailability):\n     """A modifiable list of available languages."""\n \n     def setAvailableLanguages(languages, combined=False):\n-        """Set a list of available language tags.\n-        """\n+        """Set a list of available language tags."""\n \n \n class IModifiableCountryAvailability(ICountryAvailability):\n     """A modifiable list of available countries."""\n \n     def setAvailableCountries(countries):\n-        """Set a list of available country tags.\n-        """\n+        """Set a list of available country tags."""\ndiff --git a/plone/i18n/locales/languages.py b/plone/i18n/locales/languages.py\nindex 0ffec69..7671c82 100644\n--- a/plone/i18n/locales/languages.py\n+++ b/plone/i18n/locales/languages.py\n@@ -9,38 +9,33 @@\n \n @implementer(ILanguageAvailability)\n class LanguageAvailability(object):\n-    """A list of available languages.\n-    """\n+    """A list of available languages."""\n \n     def getAvailableLanguages(self, combined=False):\n-        """Return a sequence of language tags for available languages.\n-        """\n+        """Return a sequence of language tags for available languages."""\n         languages = list(_languagelist.keys())\n         if combined:\n             languages.extend(list(_combinedlanguagelist.keys()))\n         return languages\n \n     def getLanguages(self, combined=False):\n-        """Return a sequence of Language objects for available languages.\n-        """\n+        """Return a sequence of Language objects for available languages."""\n         languages = _languagelist.copy()\n         if combined:\n             languages.update(_combinedlanguagelist.copy())\n         return languages\n \n     def getLanguageListing(self, combined=False):\n-        """Return a sequence of language code and language name tuples.\n-        """\n+        """Return a sequence of language code and language name tuples."""\n         languages = _languagelist.copy()\n         if combined:\n             languages.update(_combinedlanguagelist.copy())\n-        return [(code, languages[code][u\'name\']) for code in languages]\n+        return [(code, languages[code][u"name"]) for code in languages]\n \n \n @implementer(IContentLanguageAvailability)\n class ContentLanguageAvailability(LanguageAvailability):\n-    """A list of available content languages.\n-    """\n+    """A list of available content languages."""\n \n \n contentlanguages = ContentLanguageAvailability()\n@@ -48,8 +43,7 @@ class ContentLanguageAvailability(LanguageAvailability):\n \n @implementer(IMetadataLanguageAvailability)\n class MetadataLanguageAvailability(LanguageAvailability):\n-    """A list of available metadata languages.\n-    """\n+    """A list of available metadata languages."""\n \n \n metadatalanguages = MetadataLanguageAvailability()\n@@ -66,1446 +60,1446 @@ class MetadataLanguageAvailability(LanguageAvailability):\n # even tough these have later been deprecated from the standard.\n \n _languagelist = {\n-    u\'aa\': {\n-        u\'native\': \'\xd0\xbc\xd0\xb0\xd0\xb3I\xd0\xb0\xd1\x80\xd1\x83\xd0\xbb \xd0\xbc\xd0\xb0\xd1\x86I\',\n-        u\'name\': \'Afar\',\n-        u\'flag\': u\'/++resource++country-flags/dj.gif\',\n-    },\n-    u\'ab\': {\n-        u\'native\': \'\xd0\xb1\xd1\x8b\xd0\xb7\xd1\x88\xd3\x99\xd0\xb0\',\n-        u\'name\': \'Abkhazian\',\n-        u\'flag\': u\'/++resource++country-flags/ge.gif\',\n-    },\n-    u\'ae\': {u\'native\': \'avesta\', u\'name\': \'Avestan\'},\n-    u\'af\': {u\'native\': \'Afrikaans\', u\'name\': \'Afrikaans\'},\n-    u\'ak\': {u\'native\': \'Akan\', u\'name\': \'Akan\'},\n-    u\'am\': {u\'native\': \'\xe1\x8a\xa0\xe1\x88\x9b\xe1\x88\xad\xe1\x8a\x9b\', u\'name\': \'Amharic\'},\n-    u\'an\': {u\'native\': \'aragon\xc3\xa9s\', u\'name\': \'Aragonese\'},\n-    u\'ar\': {\n-        u\'native\': \'\xd8\xa7\xd9\x84\xd8\xb9\xd8\xb1\xd8\xa8\xd9\x8a\xd8\xa9\',\n-        u\'name\': \'Arabic\',\n-        u\'flag\': \'/++resource++language-flags/ar.gif\',\n-    },\n-    u\'as\': {u\'native\': \'\xe0\xa6\x85\xe0\xa6\xb8\xe0\xa6\xae\xe0\xa6\xbf\xe0\xa7\x9f\xe0\xa6\xbe\', u\'name\': \'Assamese\'},\n-    u\'ay\': {u\'native\': \'Aymara\', u\'name\': \'Aymara\'},\n-    u\'az\': {\n-        u\'native\': \'Az\xc9\x99ri T\xc3\xbcrk\xc3\xa7\xc9\x99si\',\n-        u\'name\': \'Azerbaijani\',\n-        u\'flag\': u\'/++resource++country-flags/az.gif\',\n-    },\n-    u\'ba\': {u\'native\': \'Bashkir\', u\'name\': \'Bashkir\'},\n-    u\'be\': {\n-        u\'native\': \'\xd0\x91\xd0\xb5\xd0\xbb\xd0\xb0\xd1\x80\xd1\x83\xd1\x81\xd0\xba\xd1\x96\',\n-        u\'name\': \'Belarussian\',\n-        u\'flag\': u\'/++resource++country-flags/by.gif\',\n-    },\n-    u\'bg\': {\n-        u\'native\': \'\xd0\x91\xd1\x8a\xd0\xbb\xd0\xb3\xd0\xb0\xd1\x80\xd1\x81\xd0\xba\xd0\xb8\',\n-        u\'name\': \'Bulgarian\',\n-        u\'flag\': u\'/++resource++country-flags/bg.gif\',\n-    },\n-    u\'bh\': {u\'native\': \'Bihari\', u\'name\': \'Bihari\'},\n-    u\'bi\': {u\'native\': \'Bislama\', u\'name\': \'Bislama\'},\n-    u\'bm\': {u\'native\': \'bamanankan\', u\'name\': \'Bambara\'},\n-    u\'bn\': {\n-        u\'native\': \'\xe0\xa6\xac\xe0\xa6\xbe\xe0\xa6\x82\xe0\xa6\xb2\xe0\xa6\xbe\',\n-        u\'name\': \'Bengali\',\n-        u\'flag\': u\'/++resource++country-flags/bd.gif\',\n-    },\n-    u\'bo\': {u\'native\': \'\xe0\xbd\x96\xe0\xbd\xbc\xe0\xbd\x91\xe0\xbc\x8b\xe0\xbd\xa6\xe0\xbe\x90\xe0\xbd\x91\xe0\xbc\x8b\', u\'name\': \'Tibetan\'},\n-    u\'br\': {u\'native\': \'brezhoneg\', u\'name\': \'Breton\'},\n-    u\'bs\': {\n-        u\'native\': \'Bosanski\',\n-        u\'name\': \'Bosnian\',\n-        u\'flag\': u\'/++resource++country-flags/ba.gif\',\n-    },\n-    u\'ca\': {\n-        u\'native\': \'Catal\xc3\xa0\',\n-        u\'name\': \'Catalan\',\n-        u\'flag\': u\'/++resource++language-flags/ca.gif\',\n-    },\n-    u\'ce\': {u\'native\': \'\xd0\xbd\xd0\xbe\xd1\x85\xd1\x87\xd0\xb8\xd0\xb9\xd0\xbd \xd0\xbc\xd0\xbe\xd1\x82\xd1\x82\', u\'name\': \'Chechen\'},\n-    u\'ch\': {u\'native\': \'Chamoru\', u\'name\': \'Chamorro\'},\n-    u\'co\': {u\'native\': \'Corsu\', u\'name\': \'Corsican\'},\n-    u\'cr\': {u\'native\': \'\xe1\x93\x80\xe1\x90\xa6\xe1\x90\x83\xe1\x94\xad\xe1\x90\x8d\xe1\x90\x8f\xe1\x90\xa3\', u\'name\': \'Cree\'},\n-    u\'cs\': {\n-        u\'native\': \'\xc4\x8ce\xc5\xa1tina\',\n-        u\'name\': \'Czech\',\n-        u\'flag\': u\'/++resource++country-flags/cz.gif\',\n-    },\n-    u\'cu\': {u\'native\': \'\xd1\xa9\xd0\xb7\xd1\x8b\xd0\xba\xd1\x8a \xd1\x81\xd0\xbb\xd0\xbe\xd0\xb2\xd1\xa3\xd0\xbd\xd1\x8c\xd1\x81\xd0\xba\xd1\x8a\', u\'name\': \'Old Church Slavonic\'},\n-    u\'cv\': {u\'native\': \'\xd1\x87\xd3\x91\xd0\xb2\xd0\xb0\xd1\x88 \xd1\x87\xd3\x97\xd0\xbb\xd1\x85\xd0\xb8\', u\'name\': \'Chuvash\'},\n-    u\'cy\': {\n-        u\'native\': \'Cymraeg\',\n-        u\'name\': \'Welsh\',\n-        u\'flag\': \'/++resource++language-flags/cy.gif\',\n-    },\n-    u\'da\': {\n-        u\'native\': \'Dansk\',\n-        u\'name\': \'Danish\',\n-        u\'flag\': u\'/++resource++country-flags/dk.gif\',\n-    },\n-    u\'de\': {\n-        u\'native\': \'Deutsch\',\n-        u\'name\': \'German\',\n-        u\'flag\': u\'/++resource++country-flags/de.gif\',\n-    },\n-    u\'dv\': {u\'native\': \'Divehi\', u\'name\': \'Maldivian\'},\n-    u\'dz\': {u\'native\': \'Bhutani\', u\'name\': \'Indian Bhutani\'},\n-    u\'ee\': {u\'native\': \'E\xca\x8begbe\', u\'name\': \'Ewe\'},\n-    u\'el\': {\n-        u\'native\': \'\xce\x95\xce\xbb\xce\xbb\xce\xb7\xce\xbd\xce\xb9\xce\xba\xce\xac\',\n-        u\'name\': \'Greek\',\n-        u\'flag\': u\'/++resource++country-flags/gr.gif\',\n-    },\n-    u\'en\': {\n-        u\'native\': \'English\',\n-        u\'name\': \'English\',\n-        u\'flag\': u\'/++resource++country-flags/gb.gif\',\n-    },\n-    u\'eo\': {\n-        u\'native\': \'Esperanto\',\n-        u\'name\': \'Esperanto\',\n-        u\'flag\': \'/++resource++language-flags/eo.gif\',\n-    },\n-    u\'es\': {\n-        u\'native\': \'Espa\xc3\xb1ol\',\n-        u\'name\': \'Spanish\',\n-        u\'flag\': u\'/++resource++country-flags/es.gif\',\n-    },\n-    u\'et\': {\n-        u\'native\': \'Eesti\',\n-        u\'name\': \'Estonian\',\n-        u\'flag\': u\'/++resource++country-flags/ee.gif\',\n-    },\n-    u\'eu\': {\n-        u\'native\': \'Euskara\',\n-        u\'name\': \'Basque\',\n-        u\'flag\': \'/++resource++language-flags/eu.gif\',\n-    },\n-    u\'fa\': {u\'native\': \'\xd9\x81\xd8\xa7\xd8\xb1\xd8\xb3\xdb\x8c\', u\'name\': \'Persian\'},\n-    u\'ff\': {u\'native\': \'Fulfulde\', u\'name\': \'Fula\'},\n-    u\'fi\': {\n-        u\'native\': \'Suomi\',\n-        u\'name\': \'Finnish\',\n-        u\'flag\': u\'/++resource++country-flags/fi.gif\',\n-    },\n-    u\'fj\': {\n-        u\'native\': \'Fiji\',\n-        u\'name\': \'Fiji\',\n-        u\'flag\': u\'/++resource++country-flags/fj.gif\',\n-    },\n-    u\'fo\': {\n-        u\'native\': \'F\xc3\xb8royska\',\n-        u\'name\': \'Faroese\',\n-        u\'flag\': u\'/++resource++country-flags/fo.gif\',\n-    },\n-    u\'fr\': {\n-        u\'native\': \'Fran\xc3\xa7ais\',\n-        u\'name\': \'French\',\n-        u\'flag\': u\'/++resource++country-flags/fr.gif\',\n-    },\n-    u\'fy\': {u\'native\': \'Frysk\', u\'name\': \'Frisian\'},\n-    u\'ga\': {u\'native\': \'Gaeilge\', u\'name\': \'Irish Gaelic\'},\n-    u\'gd\': {u\'native\': \'G\xc3\xa0idhlig\', u\'name\': \'Scottish Gaelic\'},\n-    u\'gl\': {u\'native\': \'Galego\', u\'name\': \'Galician\'},\n-    u\'gn\': {u\'native\': \'Guarani\', u\'name\': \'Guarani\'},\n-    u\'gu\': {u\'native\': \'\xe0\xaa\x97\xe0\xab\x81\xe0\xaa\x9c\xe0\xaa\xb0\xe0\xaa\xbe\xe0\xaa\xa4\xe0\xab\x80\', u\'name\': \'Gujarati\'},\n-    u\'gv\': {u\'native\': \'Gaelg\', u\'name\': \'Manx Gaelic\'},\n-    u\'ha\': {u\'native\': \'\xd9\x87\xd9\x8e\xd9\x88\xd9\x8f\xd8\xb3\', u\'name\': \'Hausa\'},\n-    u\'he\': {\n-        u\'native\': \'\xd7\xa2\xd7\x91\xd7\xa8\xd7\x99\xd7\xaa\',\n-        u\'name\': \'Hebrew\',\n-        u\'flag\': u\'/++resource++country-flags/il.gif\',\n-    },\n-    u\'hi\': {\n-        u\'native\': \'\xe0\xa4\xb9\xe0\xa4\xbf\xe0\xa4\x82\xe0\xa4\xa6\xe0\xa5\x80\',\n-        u\'name\': \'Hindi\',\n-        u\'flag\': u\'/++resource++country-flags/in.gif\',\n-    },\n-    u\'ho\': {u\'native\': \'Hiri Motu\', u\'name\': \'Hiri Motu\'},\n-    u\'hr\': {\n-        u\'native\': \'Hrvatski\',\n-        u\'name\': \'Croatian\',\n-        u\'flag\': u\'/++resource++country-flags/hr.gif\',\n-    },\n-    u\'ht\': {u\'native\': \'Krey\xc3\xb2l ayisyen\', u\'name\': \'Haitian\'},\n-    u\'hu\': {\n-        u\'native\': \'Magyar\',\n-        u\'name\': \'Hungarian\',\n-        u\'flag\': u\'/++resource++country-flags/hu.gif\',\n-    },\n-    u\'hy\': {\n-        u\'native\': \'\xd5\x80\xd5\xa1\xd5\xb5\xd5\xa5\xd6\x80\xd5\xa7\xd5\xb6\',\n-        u\'name\': \'Armenian\',\n-        u\'flag\': u\'/++resource++country-flags/am.gif\',\n-    },\n-    u\'hz\': {u\'native\': \'Otjiherero\', u\'name\': \'Herero\'},\n-    u\'ia\': {u\'native\': \'Interlingua\', u\'name\': \'Interlingua\'},\n-    u\'id\': {\n-        u\'native\': \'Bahasa Indonesia\',\n-        u\'name\': \'Indonesian\',\n-        u\'flag\': u\'/++resource++country-flags/id.gif\',\n-    },\n-    u\'ie\': {u\'native\': \'Interlingue\', u\'name\': \'Interlingue\'},\n-    u\'ig\': {u\'native\': \'As\xe1\xbb\xa5s\xe1\xbb\xa5 Igbo\', u\'name\': \'Igbo\'},\n-    u\'ii\': {u\'native\': \'Nuosu\', u\'name\': \'Nuosu\'},\n-    u\'ik\': {u\'native\': \'I\xc3\xb1upiaq\', u\'name\': \'Inupiak\'},\n-    u\'io\': {u\'native\': \'Ido\', u\'name\': \'Ido\'},\n-    u\'is\': {\n-        u\'native\': \'\xc3\x8dslenska\',\n-        u\'name\': \'Icelandic\',\n-        u\'flag\': u\'/++resource++country-flags/is.gif\',\n-    },\n-    u\'it\': {\n-        u\'native\': \'Italiano\',\n-        u\'name\': \'Italian\',\n-        u\'flag\': u\'/++resource++country-flags/it.gif\',\n-    },\n-    u\'iu\': {u\'native\': \'\xe1\x90\x83\xe1\x93\x84\xe1\x92\x83\xe1\x91\x8e\xe1\x91\x90\xe1\x91\xa6\', u\'name\': \'Inuktitut\'},\n-    u\'ja\': {\n-        u\'native\': \'\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e\',\n-        u\'name\': \'Japanese\',\n-        u\'flag\': u\'/++resource++country-flags/jp.gif\',\n-    },\n-    u\'jv\': {u\'native\': \'Javanese\', u\'name\': \'basa Jawa\'},\n-    u\'ka\': {\n-        u\'native\': \'\xe1\x83\xa5\xe1\x83\x90\xe1\x83\xa0\xe1\x83\x97\xe1\x83\xa3\xe1\x83\x9a\xe1\x83\x98\',\n-        u\'name\': \'Georgian\',\n-        u\'flag\': u\'/++resource++country-flags/ge.gif\',\n-    },\n-    u\'kg\': {u\'native\': \'KiKongo\', u\'name\': \'Kongo\'},\n-    u\'ki\': {u\'native\': \'G\xc4\xa9k\xc5\xa9y\xc5\xa9\', u\'name\': \'Kikuyu\'},\n-    u\'kj\': {u\'native\': \'Kuanyama\', u\'name\': \'Kwanyama\'},\n-    u\'kk\': {\n-        u\'native\': \'\xef\xbb\x97\xef\xba\x8e\xef\xba\xaf\xef\xba\x8d\xef\xbb\x97\xef\xba\xb8\xef\xba\x8e\',\n-        u\'name\': \'Kazakh\',\n-        u\'flag\': u\'/++resource++country-flags/kz.gif\',\n-    },\n-    u\'kl\': {\n-        u\'native\': \'Greenlandic\',\n-        u\'name\': \'Greenlandic\',\n-        u\'flag\': u\'/++resource++country-flags/gl.gif\',\n-    },\n-    u\'km\': {\n-        u\'native\': \'\xe1\x9e\x81\xe1\x9f\x92\xe1\x9e\x98\xe1\x9f\x82\xe1\x9e\x9a\',\n-        u\'name\': \'Cambodian/Khmer\',\n-        u\'flag\': u\'/++resource++country-flags/kh.gif\',\n-    },\n-    u\'kn\': {\n-        u\'native\': \'\xe0\xb2\x95\xe0\xb2\xa8\xe0\xb3\x8d\xe0\xb2\xa8\xe0\xb2\xa1\',\n-        u\'name\': \'Kannada\',\n-        u\'flag\': u\'/++resource++country-flags/in.gif\',\n-    },\n-    u\'ko\': {\n-        u\'native\': \'\xed\x95\x9c\xea\xb5\xad\xec\x96\xb4\',\n-        u\'name\': \'Korean\',\n-        u\'flag\': u\'/++resource++country-flags/kr.gif\',\n-    },\n-    u\'kr\': {u\'native\': \'Kanuri\', u\'name\': \'Kanuri\'},\n-    u\'ks\': {\n-        u\'native\': \'\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xbd\xe0\xa4\xb6\xe0\xa5\x81\xe0\xa4\xb0\',\n-        u\'name\': \'Kashmiri\',\n-        u\'flag\': u\'/++resource++country-flags/in.gif\',\n-    },\n-    u\'ku\': {u\'native\': \'Kurd\xc3\xad\', u\'name\': \'Kurdish\'},\n-    u\'kv\': {u\'native\': \'\xd0\xba\xd0\xbe\xd0\xbc\xd0\xb8 \xd0\xba\xd1\x8b\xd0\xb2\', u\'name\': \'Komi\'},\n-    u\'kw\': {u\'native\': \'Kernewek\', u\'name\': \'Cornish\'},\n-    u\'ky\': {u\'native\': \'\xd0\x9a\xd1\x8b\xd1\x80\xd0\xb3\xd1\x8b\xd0\xb7\', u\'name\': \'Kirghiz\'},\n-    u\'la\': {\n-        u\'native\': \'Latin\',\n-        u\'name\': \'Latin\',\n-        u\'flag\': u\'/++resource++country-flags/va.gif\',\n-    },\n-    u\'lb\': {\n-        u\'native\': \'L\xc3\xabtzebuergesch\',\n-        u\'name\': \'Luxemburgish\',\n-        u\'flag\': u\'/++resource++country-flags/lu.gif\',\n-    },\n-    u\'lg\': {u\'native\': \'Luganda\', u\'name\': \'Ganda\'},\n-    u\'li\': {u\'native\': \'Limburgs\', u\'name\': \'Limburgish\'},\n-    u\'ln\': {u\'native\': \'Lingala\', u\'name\': \'Lingala\'},\n-    u\'lo\': {\n-        u\'native\': \'\xe0\xba\x9e\xe0\xba\xb2\xe0\xba\xaa\xe0\xba\xb2\xe0\xba\xa5\xe0\xba\xb2\xe0\xba\xa7\',\n-        u\'name\': \'Laotian\',\n-        u\'flag\': u\'/++resource++country-flags/la.gif\',\n-    },\n-    u\'lt\': {\n-        u\'native\': \'Lietuvi\xc5\xb3\',\n-        u\'name\': \'Lithuanian\',\n-        u\'flag\': u\'/++resource++country-flags/lt.gif\',\n-    },\n-    u\'lu\': {u\'native\': \'Tshiluba\', u\'name\': \'Luba-Katanga\'},\n-    u\'lv\': {\n-        u\'native\': \'Latvie\xc5\xa1u\',\n-        u\'name\': \'Latvian\',\n-        u\'flag\': u\'/++resource++country-flags/lv.gif\',\n-    },\n-    u\'mg\': {\n-        u\'native\': \'Malagasy\',\n-        u\'name\': \'Madagascarian\',\n-        u\'flag\': u\'/++resource++country-flags/mg.gif\',\n-    },\n-    u\'mh\': {u\'native\': \'Kajin M\xcc\xa7aje\xc4\xbc\', u\'name\': \'Marshallese\'},\n-    u\'mi\': {u\'native\': \'Maori\', u\'name\': \'Maori\'},\n-    u\'mk\': {\n-        u\'native\': \'\xd0\x9c\xd0\xb0\xd0\xba\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8\',\n-        u\'name\': \'Macedonian\',\n-        u\'flag\': u\'/++resource++country-flags/mk.gif\',\n-    },\n-    u\'ml\': {u\'native\': \'\xe0\xb4\xae\xe0\xb4\xb2\xe0\xb4\xaf\xe0\xb4\xbe\xe0\xb4\xb3\xe0\xb4\x82\', u\'name\': \'Malayalam\'},\n-    u\'mn\': {\n-        u\'native\': \'\xd0\x9c\xd0\xbe\xd0\xbd\xd0\xb3\xd0\xbe\xd0\xbb\',\n-        u\'name\': \'Mongolian\',\n-        u\'flag\': u\'/++resource++country-flags/mn.gif\',\n-    },\n-    u\'mo\': {\n-        u\'native\': \'Moldavian\',\n-        u\'name\': \'Moldavian\',\n-        u\'flag\': u\'/++resource++country-flags/md.gif\',\n-    },\n-    u\'mr\': {u\'native\': \'\xe0\xa4\xae\xe0\xa4\xb0\xe0\xa4\xbe\xe0\xa4\xa0\xe0\xa5\x80\', u\'name\': \'Marathi\'},\n-    u\'ms\': {u\'native\': \'Bahasa Melayu\', u\'name\': \'Malay\'},\n-    u\'mt\': {\n-        u\'native\': \'Malti\',\n-        u\'name\': \'Maltese\',\n-        u\'flag\': u\'/++resource++country-flags/mt.gif\',\n-    },\n-    u\'my\': {u\'native\': \'Burmese\', u\'name\': \'Burmese\'},\n-    u\'na\': {\n-        u\'native\': \'Nauru\',\n-        u\'name\': \'Nauruan\',\n-        u\'flag\': u\'/++resource++country-flags/nr.gif\',\n-    },\n-    u\'nb\': {u\'native\': \'Norsk bokm\xc3\xa5l\', u\'name\': \'Norwegian Bokm\xc3\xa5l\'},\n-    u\'nd\': {u\'native\': \'Ndebele (North)\', u\'name\': \'Ndebele (North)\'},\n-    u\'ne\': {u\'native\': \'\xe0\xa4\xa8\xe0\xa5\x87\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb2\xe0\xa5\x80\', u\'name\': \'Nepali\'},\n-    u\'ng\': {u\'native\': \'Owambo\', u\'name\': \'Ndonga\'},\n-    u\'nl\': {\n-        u\'native\': \'Nederlands\',\n-        u\'name\': \'Dutch\',\n-        u\'flag\': u\'/++resource++country-flags/nl.gif\',\n-    },\n-    u\'nn\': {\n-        u\'native\': \'Nynorsk\',\n-        u\'name\': \'Nynorsk\',\n-        u\'flag\': u\'/++resource++country-flags/no.gif\',\n-    },\n-    u\'no\': {\n-        u\'native\': \'Norsk\',\n-        u\'name\': \'Norwegian\',\n-        u\'flag\': u\'/++resource++country-flags/no.gif\',\n-    },\n-    u\'nr\': {u\'native\': \'IsiNdebele\', u\'name\': \'Ndebele (South)\'},\n-    u\'nv\': {u\'native\': \'Din\xc3\xa9 bizaad\', u\'name\': \'Navajo\'},\n-    u\'ny\': {u\'native\': \'chiChe\xc5\xb5a\', u\'name\': \'Chichewa\'},\n-    u\'oc\': {u\'native\': \'Occitan\', u\'name\': \'Occitan\'},\n-    u\'oj\': {u\'native\': \'\xe1\x90\x8a\xe1\x93\x82\xe1\x94\x91\xe1\x93\x88\xe1\x90\xaf\xe1\x92\xa7\xe1\x90\x8e\xe1\x93\x90\', u\'name\': \'Ojibwe\'},\n-    u\'om\': {u\'native\': \'Oromo\', u\'name\': \'Oromo\'},\n-    u\'or\': {u\'native\': \'\xe0\xac\x93\xe0\xad\x9c\xe0\xac\xbf\xe0\xac\x86\', u\'name\': \'Oriya\'},\n-    u\'os\': {u\'native\': \'\xd0\xb8\xd1\x80\xd0\xbe\xd0\xbd \xc3\xa6\xd0\xb2\xd0\xb7\xd0\xb0\xd0\xb3\', u\'name\': \'Ossetian\'},\n-    u\'pa\': {u\'native\': \'\xe0\xa8\xaa\xe0\xa9\xb0\xe0\xa8\x9c\xe0\xa8\xbe\xe0\xa8\xac\xe0\xa9\x80\', u\'name\': \'Punjabi\'},\n-    u\'pi\': {u\'native\': \'\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb4\xe0\xa4\xbf\', u\'name\': \'P\xc4\x81li\'},\n-    u\'pl\': {\n-        u\'native\': \'Polski\',\n-        u\'name\': \'Polish\',\n-        u\'flag\': u\'/++resource++country-flags/pl.gif\',\n-    },\n-    u\'ps\': {u\'native\': \'\xd9\xbe\xda\x9a\xd8\xaa\xd9\x88\', u\'name\': \'Pashto\'},\n-    u\'pt\': {\n-        u\'native\': \'Portugu\xc3\xaas\',\n-        u\'name\': \'Portuguese\',\n-        u\'flag\': u\'/++resource++country-flags/pt.gif\',\n-    },\n-    u\'qu\': {u\'native\': \'Quechua\', u\'name\': \'Quechua\'},\n-    u\'rm\': {u\'native\': \'Rhaeto-Romance\', u\'name\': \'Rhaeto-Romance\'},\n-    u\'rn\': {u\'native\': \'Kirundi\', u\'name\': \'Kirundi\'},\n-    u\'ro\': {\n-        u\'native\': \'Rom\xc3\xa2n\xc4\x83\',\n-        u\'name\': \'Romanian\',\n-        u\'flag\': u\'/++resource++country-flags/ro.gif\',\n-    },\n-    u\'ru\': {\n-        u\'native\': \'\xd0\xa0\xd1\x83\xd1\x81\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9\',\n-        u\'name\': \'Russian\',\n-        u\'flag\': u\'/++resource++country-flags/ru.gif\',\n-    },\n-    u\'rw\': {u\'native\': \'Kinyarwanda\', u\'name\': \'Kinyarwanda\'},\n-    u\'sa\': {u\'native\': \'\xe0\xa4\xb8\xe0\xa4\x82\xe0\xa4\xb8\xe0\xa5\x8d\xe0\xa4\x95\xe0\xa5\x83\xe0\xa4\xa4\', u\'name\': \'Sanskrit\'},\n-    u\'sc\': {u\'native\': \'sardu\', u\'name\': \'Sardinian\'},\n-    u\'sd\': {\n-        u\'native\': \'Sindhi\',\n-        u\'name\': \'Sindhi\',\n-        u\'flag\': u\'/++resource++country-flags/pk.gif\',\n-    },\n-    u\'se\': {u\'native\': \'Northern S\xc3\xa1mi\', u\'name\': \'Northern S\xc3\xa1mi\'},\n-    u\'sg\': {\n-        u\'native\': \'Sangho\',\n-        u\'name\': \'Sangho\',\n-        u\'flag\': u\'/++resource++country-flags/cf.gif\',\n-    },\n-    u\'sh\': {u\'native\': \'Serbo-Croatian\', u\'name\': \'Serbo-Croatian\'},\n-    u\'si\': {u\'native\': \'Singhalese\', u\'name\': \'Singhalese\'},\n-    u\'sk\': {\n-        u\'native\': \'Sloven\xc4\x8dina\',\n-        u\'name\': \'Slovak\',\n-        u\'flag\': u\'/++resource++country-flags/sk.gif\',\n-    },\n-    u\'sl\': {\n-        u\'native\': \'Sloven\xc5\xa1\xc4\x8dina\',\n-        u\'name\': \'Slovenian\',\n-        u\'flag\': u\'/++resource++country-flags/si.gif\',\n-    },\n-    u\'sm\': {u\'native\': \'Samoan\', u\'name\': \'Samoan\'},\n-    u\'sn\': {u\'native\': \'Shona\', u\'name\': \'Shona\'},\n-    u\'so\': {\n-        u\'native\': \'Somali\',\n-        u\'name\': \'Somali\',\n-        u\'flag\': u\'/++resource++country-flags/so.gif\',\n-    },\n-    u\'sq\': {\n-        u\'native\': \'Shqip\',\n-        u\'name\': \'Albanian\',\n-        u\'flag\': u\'/++resource++country-flags/al.gif\',\n-    },\n-    u\'sr\': {\n-        u\'native\': \'\xd1\x81\xd1\x80\xd0\xbf\xd1\x81\xd0\xba\xd0\xb8\',\n-        u\'name\': \'Serbian\',\n-        u\'flag\': u\'/++resource++country-flags/cs.gif\',\n-    },\n-    u\'ss\': {u\'native\': \'SiSwati\', u\'name\': \'Swati\'},\n-    u\'st\': {u\'native\': \'Sesotho\', u\'name\': \'Southern Sotho\'},\n-    u\'su\': {\n-        u\'native\': \'Sudanese\',\n-        u\'name\': \'Sudanese\',\n-        u\'flag\': u\'/++resource++country-flags/sd.gif\',\n-    },\n-    u\'sv\': {\n-        u\'native\': \'Svenska\',\n-        u\'name\': \'Swedish\',\n-        u\'flag\': u\'/++resource++country-flags/se.gif\',\n-    },\n-    u\'sw\': {u\'native\': \'Kiswahili\', u\'name\': \'Swahili\'},\n-    u\'ta\': {u\'native\': \'\xe0\xae\xa4\xe0\xae\xae\xe0\xae\xbf\xe0\xae\xb4\', u\'name\': \'Tamil\'},\n-    u\'te\': {u\'native\': \'\xe0\xb0\xa4\xe0\xb1\x86\xe0\xb0\xb2\xe0\xb1\x81\xe0\xb0\x97\xe0\xb1\x81\', u\'name\': \'Telugu\'},\n-    u\'tg\': {\n-        u\'native\': \'\xd0\xa2\xd0\xbe\xd2\xb7\xd0\xb8\xd0\xba\xd0\xb8\',\n-        u\'name\': \'Tadjik\',\n-        u\'flag\': u\'/++resource++country-flags/tj.gif\',\n-    },\n-    u\'th\': {\n-        u\'native\': \'\xe0\xb9\x84\xe0\xb8\x97\xe0\xb8\xa2\',\n-        u\'name\': \'Thai\',\n-        u\'flag\': u\'/++resource++country-flags/th.gif\',\n-    },\n-    u\'ti\': {u\'native\': \'\xe1\x89\xb5\xe1\x8c\x8d\xe1\x88\xad\xe1\x8a\x9b\', u\'name\': \'Tigrinya\'},\n-    u\'tk\': {\n-        u\'native\': \'\xd1\x82\xd2\xaf\xd1\x80\xd0\xbam\xd0\xb5\xd0\xbd\xd1\x87\xd0\xb5\',\n-        u\'name\': \'Turkmen\',\n-        u\'flag\': u\'/++resource++country-flags/tm.gif\',\n-    },\n-    u\'tl\': {u\'native\': \'Tagalog\', u\'name\': \'Tagalog\'},\n-    u\'tn\': {\n-        u\'native\': \'Setswana\',\n-        u\'name\': \'Tswana\',\n-        u\'flag\': u\'/++resource++country-flags/bw.gif\',\n-    },\n-    u\'to\': {u\'native\': \'Tonga\', u\'name\': \'Tonga\'},\n-    u\'tr\': {\n-        u\'native\': \'T\xc3\xbcrk\xc3\xa7e\',\n-        u\'name\': \'Turkish\',\n-        u\'flag\': u\'/++resource++country-flags/tr.gif\',\n-    },\n-    u\'ts\': {u\'native\': \'Xitsonga\', u\'name\': \'Tsonga\'},\n-    u\'tt\': {u\'native\': \'\xd1\x82\xd0\xb0\xd1\x82\xd0\xb0\xd1\x80\xd1\x87\xd0\xb0\', u\'name\': \'Tatar\'},\n-    u\'tw\': {u\'native\': \'Twi\', u\'name\': \'Twi\'},\n-    u\'ty\': {u\'native\': \'Reo Tahiti\', u\'name\': \'Tahitian\'},\n-    u\'ug\': {u\'native\': \'Uigur\', u\'name\': \'Uigur\'},\n-    u\'uk\': {\n-        u\'native\': \'\xd0\xa3\xd0\xba\xd1\x80\xd0\xb0\xd1\x97\xd0\xbd\xd1\x81\xd1\x8c\xd0\xba\xd0\xb0\',\n-        u\'name\': \'Ukrainian\',\n-        u\'flag\': u\'/++resource++country-flags/ua.gif\',\n-    },\n-    u\'ur\': {u\'native\': \'\xd8\xa7\xd8\xb1\xd8\xaf\xd9\x88\', u\'name\': \'Urdu\'},\n-    u\'uz\': {\n-        u\'native\': \'\xd0\x8e\xd0\xb7\xd0\xb1\xd0\xb5\xd0\xba\xd1\x87\xd0\xb0\',\n-        u\'name\': \'Uzbek\',\n-        u\'flag\': u\'/++resource++country-flags/uz.gif\',\n-    },\n-    u\'ve\': {u\'native\': \'Tshiven\xe1\xb8\x93a\', u\'name\': \'Venda\'},\n-    u\'vi\': {\n-        u\'native\': \'Ti\xe1\xba\xbfng Vi\xe1\xbb\x87t\',\n-        u\'name\': \'Vietnamese\',\n-        u\'flag\': u\'/++resource++country-flags/vn.gif\',\n-    },\n-    u\'vk\': {u\'native\': \'Ovalingo\', u\'name\': \'Viking\'},\n-    u\'vo\': {u\'native\': \'Volap\xc3\xbck\', u\'name\': \'Volap\xc3\xbck\'},\n-    u\'wa\': {u\'native\': \'Walon\', u\'name\': \'Walloon\'},\n-    u\'wo\': {u\'native\': \'Wolof\', u\'name\': \'Wolof\'},\n-    u\'xh\': {u\'native\': \'IsiXhosa\', u\'name\': \'Xhosa\'},\n-    u\'yi\': {\n-        u\'native\': \'\xd7\xb2\xd6\xb4\xd7\x93\xd7\x99\xd7\xa9\',\n-        u\'name\': \'Yiddish\',\n-        u\'flag\': u\'/++resource++country-flags/il.gif\',\n-    },\n-    u\'yo\': {u\'native\': \'Yor\xc3\xb9b\xc3\xa1\', u\'name\': \'Yorouba\'},\n-    u\'za\': {u\'native\': \'Zhuang\', u\'name\': \'Zhuang\'},\n-    u\'zh\': {\n-        u\'native\': \'\xe4\xb8\xad\xe6\x96\x87\',\n-        u\'name\': \'Chinese\',\n-        u\'flag\': u\'/++resource++country-flags/cn.gif\',\n-    },\n-    u\'zu\': {\n-        u\'native\': \'IsiZulu\',\n-        u\'name\': \'Zulu\',\n-        u\'flag\': u\'/++resource++country-flags/za.gif\',\n+    u"aa": {\n+        u"native": "\xd0\xbc\xd0\xb0\xd0\xb3I\xd0\xb0\xd1\x80\xd1\x83\xd0\xbb \xd0\xbc\xd0\xb0\xd1\x86I",\n+        u"name": "Afar",\n+        u"flag": u"/++resource++country-flags/dj.gif",\n+    },\n+    u"ab": {\n+        u"native": "\xd0\xb1\xd1\x8b\xd0\xb7\xd1\x88\xd3\x99\xd0\xb0",\n+        u"name": "Abkhazian",\n+        u"flag": u"/++resource++country-flags/ge.gif",\n+    },\n+    u"ae": {u"native": "avesta", u"name": "Avestan"},\n+    u"af": {u"native": "Afrikaans", u"name": "Afrikaans"},\n+    u"ak": {u"native": "Akan", u"name": "Akan"},\n+    u"am": {u"native": "\xe1\x8a\xa0\xe1\x88\x9b\xe1\x88\xad\xe1\x8a\x9b", u"name": "Amharic"},\n+    u"an": {u"native": "aragon\xc3\xa9s", u"name": "Aragonese"},\n+    u"ar": {\n+        u"native": "\xd8\xa7\xd9\x84\xd8\xb9\xd8\xb1\xd8\xa8\xd9\x8a\xd8\xa9",\n+        u"name": "Arabic",\n+        u"flag": "/++resource++language-flags/ar.gif",\n+    },\n+    u"as": {u"native": "\xe0\xa6\x85\xe0\xa6\xb8\xe0\xa6\xae\xe0\xa6\xbf\xe0\xa7\x9f\xe0\xa6\xbe", u"name": "Assamese"},\n+    u"ay": {u"native": "Aymara", u"name": "Aymara"},\n+    u"az": {\n+        u"native": "Az\xc9\x99ri T\xc3\xbcrk\xc3\xa7\xc9\x99si",\n+        u"name": "Azerbaijani",\n+        u"flag": u"/++resource++country-flags/az.gif",\n+    },\n+    u"ba": {u"native": "Bashkir", u"name": "Bashkir"},\n+    u"be": {\n+        u"native": "\xd0\x91\xd0\xb5\xd0\xbb\xd0\xb0\xd1\x80\xd1\x83\xd1\x81\xd0\xba\xd1\x96",\n+        u"name": "Belarussian",\n+        u"flag": u"/++resource++country-flags/by.gif",\n+    },\n+    u"bg": {\n+        u"native": "\xd0\x91\xd1\x8a\xd0\xbb\xd0\xb3\xd0\xb0\xd1\x80\xd1\x81\xd0\xba\xd0\xb8",\n+        u"name": "Bulgarian",\n+        u"flag": u"/++resource++country-flags/bg.gif",\n+    },\n+    u"bh": {u"native": "Bihari", u"name": "Bihari"},\n+    u"bi": {u"native": "Bislama", u"name": "Bislama"},\n+    u"bm": {u"native": "bamanankan", u"name": "Bambara"},\n+    u"bn": {\n+        u"native": "\xe0\xa6\xac\xe0\xa6\xbe\xe0\xa6\x82\xe0\xa6\xb2\xe0\xa6\xbe",\n+        u"name": "Bengali",\n+        u"flag": u"/++resource++country-flags/bd.gif",\n+    },\n+    u"bo": {u"native": "\xe0\xbd\x96\xe0\xbd\xbc\xe0\xbd\x91\xe0\xbc\x8b\xe0\xbd\xa6\xe0\xbe\x90\xe0\xbd\x91\xe0\xbc\x8b", u"name": "Tibetan"},\n+    u"br": {u"native": "brezhoneg", u"name": "Breton"},\n+    u"bs": {\n+        u"native": "Bosanski",\n+        u"name": "Bosnian",\n+        u"flag": u"/++resource++country-flags/ba.gif",\n+    },\n+    u"ca": {\n+        u"native": "Catal\xc3\xa0",\n+        u"name": "Catalan",\n+        u"flag": u"/++resource++language-flags/ca.gif",\n+    },\n+    u"ce": {u"native": "\xd0\xbd\xd0\xbe\xd1\x85\xd1\x87\xd0\xb8\xd0\xb9\xd0\xbd \xd0\xbc\xd0\xbe\xd1\x82\xd1\x82", u"name": "Chechen"},\n+    u"ch": {u"native": "Chamoru", u"name": "Chamorro"},\n+    u"co": {u"native": "Corsu", u"name": "Corsican"},\n+    u"cr": {u"native": "\xe1\x93\x80\xe1\x90\xa6\xe1\x90\x83\xe1\x94\xad\xe1\x90\x8d\xe1\x90\x8f\xe1\x90\xa3", u"name": "Cree"},\n+    u"cs": {\n+        u"native": "\xc4\x8ce\xc5\xa1tina",\n+        u"name": "Czech",\n+        u"flag": u"/++resource++country-flags/cz.gif",\n+    },\n+    u"cu": {u"native": "\xd1\xa9\xd0\xb7\xd1\x8b\xd0\xba\xd1\x8a \xd1\x81\xd0\xbb\xd0\xbe\xd0\xb2\xd1\xa3\xd0\xbd\xd1\x8c\xd1\x81\xd0\xba\xd1\x8a", u"name": "Old Church Slavonic"},\n+    u"cv": {u"native": "\xd1\x87\xd3\x91\xd0\xb2\xd0\xb0\xd1\x88 \xd1\x87\xd3\x97\xd0\xbb\xd1\x85\xd0\xb8", u"name": "Chuvash"},\n+    u"cy": {\n+        u"native": "Cymraeg",\n+        u"name": "Welsh",\n+        u"flag": "/++resource++language-flags/cy.gif",\n+    },\n+    u"da": {\n+        u"native": "Dansk",\n+        u"name": "Danish",\n+        u"flag": u"/++resource++country-flags/dk.gif",\n+    },\n+    u"de": {\n+        u"native": "Deutsch",\n+        u"name": "German",\n+        u"flag": u"/++resource++country-flags/de.gif",\n+    },\n+    u"dv": {u"native": "Divehi", u"name": "Maldivian"},\n+    u"dz": {u"native": "Bhutani", u"name": "Indian Bhutani"},\n+    u"ee": {u"native": "E\xca\x8begbe", u"name": "Ewe"},\n+    u"el": {\n+        u"native": "\xce\x95\xce\xbb\xce\xbb\xce\xb7\xce\xbd\xce\xb9\xce\xba\xce\xac",\n+        u"name": "Greek",\n+        u"flag": u"/++resource++country-flags/gr.gif",\n+    },\n+    u"en": {\n+        u"native": "English",\n+        u"name": "English",\n+        u"flag": u"/++resource++country-flags/gb.gif",\n+    },\n+    u"eo": {\n+        u"native": "Esperanto",\n+        u"name": "Esperanto",\n+        u"flag": "/++resource++language-flags/eo.gif",\n+    },\n+    u"es": {\n+        u"native": "Espa\xc3\xb1ol",\n+        u"name": "Spanish",\n+        u"flag": u"/++resource++country-flags/es.gif",\n+    },\n+    u"et": {\n+        u"native": "Eesti",\n+        u"name": "Estonian",\n+        u"flag": u"/++resource++country-flags/ee.gif",\n+    },\n+    u"eu": {\n+        u"native": "Euskara",\n+        u"name": "Basque",\n+        u"flag": "/++resource++language-flags/eu.gif",\n+    },\n+    u"fa": {u"native": "\xd9\x81\xd8\xa7\xd8\xb1\xd8\xb3\xdb\x8c", u"name": "Persian"},\n+    u"ff": {u"native": "Fulfulde", u"name": "Fula"},\n+    u"fi": {\n+        u"native": "Suomi",\n+        u"name": "Finnish",\n+        u"flag": u"/++resource++country-flags/fi.gif",\n+    },\n+    u"fj": {\n+        u"native": "Fiji",\n+        u"name": "Fiji",\n+        u"flag": u"/++resource++country-flags/fj.gif",\n+    },\n+    u"fo": {\n+        u"native": "F\xc3\xb8royska",\n+        u"name": "Faroese",\n+        u"flag": u"/++resource++country-flags/fo.gif",\n+    },\n+    u"fr": {\n+        u"native": "Fran\xc3\xa7ais",\n+        u"name": "French",\n+        u"flag": u"/++resource++country-flags/fr.gif",\n+    },\n+    u"fy": {u"native": "Frysk", u"name": "Frisian"},\n+    u"ga": {u"native": "Gaeilge", u"name": "Irish Gaelic"},\n+    u"gd": {u"native": "G\xc3\xa0idhlig", u"name": "Scottish Gaelic"},\n+    u"gl": {u"native": "Galego", u"name": "Galician"},\n+    u"gn": {u"native": "Guarani", u"name": "Guarani"},\n+    u"gu": {u"native": "\xe0\xaa\x97\xe0\xab\x81\xe0\xaa\x9c\xe0\xaa\xb0\xe0\xaa\xbe\xe0\xaa\xa4\xe0\xab\x80", u"name": "Gujarati"},\n+    u"gv": {u"native": "Gaelg", u"name": "Manx Gaelic"},\n+    u"ha": {u"native": "\xd9\x87\xd9\x8e\xd9\x88\xd9\x8f\xd8\xb3", u"name": "Hausa"},\n+    u"he": {\n+        u"native": "\xd7\xa2\xd7\x91\xd7\xa8\xd7\x99\xd7\xaa",\n+        u"name": "Hebrew",\n+        u"flag": u"/++resource++country-flags/il.gif",\n+    },\n+    u"hi": {\n+        u"native": "\xe0\xa4\xb9\xe0\xa4\xbf\xe0\xa4\x82\xe0\xa4\xa6\xe0\xa5\x80",\n+        u"name": "Hindi",\n+        u"flag": u"/++resource++country-flags/in.gif",\n+    },\n+    u"ho": {u"native": "Hiri Motu", u"name": "Hiri Motu"},\n+    u"hr": {\n+        u"native": "Hrvatski",\n+        u"name": "Croatian",\n+        u"flag": u"/++resource++country-flags/hr.gif",\n+    },\n+    u"ht": {u"native": "Krey\xc3\xb2l ayisyen", u"name": "Haitian"},\n+    u"hu": {\n+        u"native": "Magyar",\n+        u"name": "Hungarian",\n+        u"flag": u"/++resource++country-flags/hu.gif",\n+    },\n+    u"hy": {\n+        u"native": "\xd5\x80\xd5\xa1\xd5\xb5\xd5\xa5\xd6\x80\xd5\xa7\xd5\xb6",\n+        u"name": "Armenian",\n+        u"flag": u"/++resource++country-flags/am.gif",\n+    },\n+    u"hz": {u"native": "Otjiherero", u"name": "Herero"},\n+    u"ia": {u"native": "Interlingua", u"name": "Interlingua"},\n+    u"id": {\n+        u"native": "Bahasa Indonesia",\n+        u"name": "Indonesian",\n+        u"flag": u"/++resource++country-flags/id.gif",\n+    },\n+    u"ie": {u"native": "Interlingue", u"name": "Interlingue"},\n+    u"ig": {u"native": "As\xe1\xbb\xa5s\xe1\xbb\xa5 Igbo", u"name": "Igbo"},\n+    u"ii": {u"native": "Nuosu", u"name": "Nuosu"},\n+    u"ik": {u"native": "I\xc3\xb1upiaq", u"name": "Inupiak"},\n+    u"io": {u"native": "Ido", u"name": "Ido"},\n+    u"is": {\n+        u"native": "\xc3\x8dslenska",\n+        u"name": "Icelandic",\n+        u"flag": u"/++resource++country-flags/is.gif",\n+    },\n+    u"it": {\n+        u"native": "Italiano",\n+        u"name": "Italian",\n+        u"flag": u"/++resource++country-flags/it.gif",\n+    },\n+    u"iu": {u"native": "\xe1\x90\x83\xe1\x93\x84\xe1\x92\x83\xe1\x91\x8e\xe1\x91\x90\xe1\x91\xa6", u"name": "Inuktitut"},\n+    u"ja": {\n+        u"native": "\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e",\n+        u"name": "Japanese",\n+        u"flag": u"/++resource++country-flags/jp.gif",\n+    },\n+    u"jv": {u"native": "Javanese", u"name": "basa Jawa"},\n+    u"ka": {\n+        u"native": "\xe1\x83\xa5\xe1\x83\x90\xe1\x83\xa0\xe1\x83\x97\xe1\x83\xa3\xe1\x83\x9a\xe1\x83\x98",\n+        u"name": "Georgian",\n+        u"flag": u"/++resource++country-flags/ge.gif",\n+    },\n+    u"kg": {u"native": "KiKongo", u"name": "Kongo"},\n+    u"ki": {u"native": "G\xc4\xa9k\xc5\xa9y\xc5\xa9", u"name": "Kikuyu"},\n+    u"kj": {u"native": "Kuanyama", u"name": "Kwanyama"},\n+    u"kk": {\n+        u"native": "\xef\xbb\x97\xef\xba\x8e\xef\xba\xaf\xef\xba\x8d\xef\xbb\x97\xef\xba\xb8\xef\xba\x8e",\n+        u"name": "Kazakh",\n+        u"flag": u"/++resource++country-flags/kz.gif",\n+    },\n+    u"kl": {\n+        u"native": "Greenlandic",\n+        u"name": "Greenlandic",\n+        u"flag": u"/++resource++country-flags/gl.gif",\n+    },\n+    u"km": {\n+        u"native": "\xe1\x9e\x81\xe1\x9f\x92\xe1\x9e\x98\xe1\x9f\x82\xe1\x9e\x9a",\n+        u"name": "Cambodian/Khmer",\n+        u"flag": u"/++resource++country-flags/kh.gif",\n+    },\n+    u"kn": {\n+        u"native": "\xe0\xb2\x95\xe0\xb2\xa8\xe0\xb3\x8d\xe0\xb2\xa8\xe0\xb2\xa1",\n+        u"name": "Kannada",\n+        u"flag": u"/++resource++country-flags/in.gif",\n+    },\n+    u"ko": {\n+        u"native": "\xed\x95\x9c\xea\xb5\xad\xec\x96\xb4",\n+        u"name": "Korean",\n+        u"flag": u"/++resource++country-flags/kr.gif",\n+    },\n+    u"kr": {u"native": "Kanuri", u"name": "Kanuri"},\n+    u"ks": {\n+        u"native": "\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xbd\xe0\xa4\xb6\xe0\xa5\x81\xe0\xa4\xb0",\n+        u"name": "Kashmiri",\n+        u"flag": u"/++resource++country-flags/in.gif",\n+    },\n+    u"ku": {u"native": "Kurd\xc3\xad", u"name": "Kurdish"},\n+    u"kv": {u"native": "\xd0\xba\xd0\xbe\xd0\xbc\xd0\xb8 \xd0\xba\xd1\x8b\xd0\xb2", u"name": "Komi"},\n+    u"kw": {u"native": "Kernewek", u"name": "Cornish"},\n+    u"ky": {u"native": "\xd0\x9a\xd1\x8b\xd1\x80\xd0\xb3\xd1\x8b\xd0\xb7", u"name": "Kirghiz"},\n+    u"la": {\n+        u"native": "Latin",\n+        u"name": "Latin",\n+        u"flag": u"/++resource++country-flags/va.gif",\n+    },\n+    u"lb": {\n+        u"native": "L\xc3\xabtzebuergesch",\n+        u"name": "Luxemburgish",\n+        u"flag": u"/++resource++country-flags/lu.gif",\n+    },\n+    u"lg": {u"native": "Luganda", u"name": "Ganda"},\n+    u"li": {u"native": "Limburgs", u"name": "Limburgish"},\n+    u"ln": {u"native": "Lingala", u"name": "Lingala"},\n+    u"lo": {\n+        u"native": "\xe0\xba\x9e\xe0\xba\xb2\xe0\xba\xaa\xe0\xba\xb2\xe0\xba\xa5\xe0\xba\xb2\xe0\xba\xa7",\n+        u"name": "Laotian",\n+        u"flag": u"/++resource++country-flags/la.gif",\n+    },\n+    u"lt": {\n+        u"native": "Lietuvi\xc5\xb3",\n+        u"name": "Lithuanian",\n+        u"flag": u"/++resource++country-flags/lt.gif",\n+    },\n+    u"lu": {u"native": "Tshiluba", u"name": "Luba-Katanga"},\n+    u"lv": {\n+        u"native": "Latvie\xc5\xa1u",\n+        u"name": "Latvian",\n+        u"flag": u"/++resource++country-flags/lv.gif",\n+    },\n+    u"mg": {\n+        u"native": "Malagasy",\n+        u"name": "Madagascarian",\n+        u"flag": u"/++resource++country-flags/mg.gif",\n+    },\n+    u"mh": {u"native": "Kajin M\xcc\xa7aje\xc4\xbc", u"name": "Marshallese"},\n+    u"mi": {u"native": "Maori", u"name": "Maori"},\n+    u"mk": {\n+        u"native": "\xd0\x9c\xd0\xb0\xd0\xba\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8",\n+        u"name": "Macedonian",\n+        u"flag": u"/++resource++country-flags/mk.gif",\n+    },\n+    u"ml": {u"native": "\xe0\xb4\xae\xe0\xb4\xb2\xe0\xb4\xaf\xe0\xb4\xbe\xe0\xb4\xb3\xe0\xb4\x82", u"name": "Malayalam"},\n+    u"mn": {\n+        u"native": "\xd0\x9c\xd0\xbe\xd0\xbd\xd0\xb3\xd0\xbe\xd0\xbb",\n+        u"name": "Mongolian",\n+        u"flag": u"/++resource++country-flags/mn.gif",\n+    },\n+    u"mo": {\n+        u"native": "Moldavian",\n+        u"name": "Moldavian",\n+        u"flag": u"/++resource++country-flags/md.gif",\n+    },\n+    u"mr": {u"native": "\xe0\xa4\xae\xe0\xa4\xb0\xe0\xa4\xbe\xe0\xa4\xa0\xe0\xa5\x80", u"name": "Marathi"},\n+    u"ms": {u"native": "Bahasa Melayu", u"name": "Malay"},\n+    u"mt": {\n+        u"native": "Malti",\n+        u"name": "Maltese",\n+        u"flag": u"/++resource++country-flags/mt.gif",\n+    },\n+    u"my": {u"native": "Burmese", u"name": "Burmese"},\n+    u"na": {\n+        u"native": "Nauru",\n+        u"name": "Nauruan",\n+        u"flag": u"/++resource++country-flags/nr.gif",\n+    },\n+    u"nb": {u"native": "Norsk bokm\xc3\xa5l", u"name": "Norwegian Bokm\xc3\xa5l"},\n+    u"nd": {u"native": "Ndebele (North)", u"name": "Ndebele (North)"},\n+    u"ne": {u"native": "\xe0\xa4\xa8\xe0\xa5\x87\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb2\xe0\xa5\x80", u"name": "Nepali"},\n+    u"ng": {u"native": "Owambo", u"name": "Ndonga"},\n+    u"nl": {\n+        u"native": "Nederlands",\n+        u"name": "Dutch",\n+        u"flag": u"/++resource++country-flags/nl.gif",\n+    },\n+    u"nn": {\n+        u"native": "Nynorsk",\n+        u"name": "Nynorsk",\n+        u"flag": u"/++resource++country-flags/no.gif",\n+    },\n+    u"no": {\n+        u"native": "Norsk",\n+        u"name": "Norwegian",\n+        u"flag": u"/++resource++country-flags/no.gif",\n+    },\n+    u"nr": {u"native": "IsiNdebele", u"name": "Ndebele (South)"},\n+    u"nv": {u"native": "Din\xc3\xa9 bizaad", u"name": "Navajo"},\n+    u"ny": {u"native": "chiChe\xc5\xb5a", u"name": "Chichewa"},\n+    u"oc": {u"native": "Occitan", u"name": "Occitan"},\n+    u"oj": {u"native": "\xe1\x90\x8a\xe1\x93\x82\xe1\x94\x91\xe1\x93\x88\xe1\x90\xaf\xe1\x92\xa7\xe1\x90\x8e\xe1\x93\x90", u"name": "Ojibwe"},\n+    u"om": {u"native": "Oromo", u"name": "Oromo"},\n+    u"or": {u"native": "\xe0\xac\x93\xe0\xad\x9c\xe0\xac\xbf\xe0\xac\x86", u"name": "Oriya"},\n+    u"os": {u"native": "\xd0\xb8\xd1\x80\xd0\xbe\xd0\xbd \xc3\xa6\xd0\xb2\xd0\xb7\xd0\xb0\xd0\xb3", u"name": "Ossetian"},\n+    u"pa": {u"native": "\xe0\xa8\xaa\xe0\xa9\xb0\xe0\xa8\x9c\xe0\xa8\xbe\xe0\xa8\xac\xe0\xa9\x80", u"name": "Punjabi"},\n+    u"pi": {u"native": "\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb4\xe0\xa4\xbf", u"name": "P\xc4\x81li"},\n+    u"pl": {\n+        u"native": "Polski",\n+        u"name": "Polish",\n+        u"flag": u"/++resource++country-flags/pl.gif",\n+    },\n+    u"ps": {u"native": "\xd9\xbe\xda\x9a\xd8\xaa\xd9\x88", u"name": "Pashto"},\n+    u"pt": {\n+        u"native": "Portugu\xc3\xaas",\n+        u"name": "Portuguese",\n+        u"flag": u"/++resource++country-flags/pt.gif",\n+    },\n+    u"qu": {u"native": "Quechua", u"name": "Quechua"},\n+    u"rm": {u"native": "Rhaeto-Romance", u"name": "Rhaeto-Romance"},\n+    u"rn": {u"native": "Kirundi", u"name": "Kirundi"},\n+    u"ro": {\n+        u"native": "Rom\xc3\xa2n\xc4\x83",\n+        u"name": "Romanian",\n+        u"flag": u"/++resource++country-flags/ro.gif",\n+    },\n+    u"ru": {\n+        u"native": "\xd0\xa0\xd1\x83\xd1\x81\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9",\n+        u"name": "Russian",\n+        u"flag": u"/++resource++country-flags/ru.gif",\n+    },\n+    u"rw": {u"native": "Kinyarwanda", u"name": "Kinyarwanda"},\n+    u"sa": {u"native": "\xe0\xa4\xb8\xe0\xa4\x82\xe0\xa4\xb8\xe0\xa5\x8d\xe0\xa4\x95\xe0\xa5\x83\xe0\xa4\xa4", u"name": "Sanskrit"},\n+    u"sc": {u"native": "sardu", u"name": "Sardinian"},\n+    u"sd": {\n+        u"native": "Sindhi",\n+        u"name": "Sindhi",\n+        u"flag": u"/++resource++country-flags/pk.gif",\n+    },\n+    u"se": {u"native": "Northern S\xc3\xa1mi", u"name": "Northern S\xc3\xa1mi"},\n+    u"sg": {\n+        u"native": "Sangho",\n+        u"name": "Sangho",\n+        u"flag": u"/++resource++country-flags/cf.gif",\n+    },\n+    u"sh": {u"native": "Serbo-Croatian", u"name": "Serbo-Croatian"},\n+    u"si": {u"native": "Singhalese", u"name": "Singhalese"},\n+    u"sk": {\n+        u"native": "Sloven\xc4\x8dina",\n+        u"name": "Slovak",\n+        u"flag": u"/++resource++country-flags/sk.gif",\n+    },\n+    u"sl": {\n+        u"native": "Sloven\xc5\xa1\xc4\x8dina",\n+        u"name": "Slovenian",\n+        u"flag": u"/++resource++country-flags/si.gif",\n+    },\n+    u"sm": {u"native": "Samoan", u"name": "Samoan"},\n+    u"sn": {u"native": "Shona", u"name": "Shona"},\n+    u"so": {\n+        u"native": "Somali",\n+        u"name": "Somali",\n+        u"flag": u"/++resource++country-flags/so.gif",\n+    },\n+    u"sq": {\n+        u"native": "Shqip",\n+        u"name": "Albanian",\n+        u"flag": u"/++resource++country-flags/al.gif",\n+    },\n+    u"sr": {\n+        u"native": "\xd1\x81\xd1\x80\xd0\xbf\xd1\x81\xd0\xba\xd0\xb8",\n+        u"name": "Serbian",\n+        u"flag": u"/++resource++country-flags/cs.gif",\n+    },\n+    u"ss": {u"native": "SiSwati", u"name": "Swati"},\n+    u"st": {u"native": "Sesotho", u"name": "Southern Sotho"},\n+    u"su": {\n+        u"native": "Sudanese",\n+        u"name": "Sudanese",\n+        u"flag": u"/++resource++country-flags/sd.gif",\n+    },\n+    u"sv": {\n+        u"native": "Svenska",\n+        u"name": "Swedish",\n+        u"flag": u"/++resource++country-flags/se.gif",\n+    },\n+    u"sw": {u"native": "Kiswahili", u"name": "Swahili"},\n+    u"ta": {u"native": "\xe0\xae\xa4\xe0\xae\xae\xe0\xae\xbf\xe0\xae\xb4", u"name": "Tamil"},\n+    u"te": {u"native": "\xe0\xb0\xa4\xe0\xb1\x86\xe0\xb0\xb2\xe0\xb1\x81\xe0\xb0\x97\xe0\xb1\x81", u"name": "Telugu"},\n+    u"tg": {\n+        u"native": "\xd0\xa2\xd0\xbe\xd2\xb7\xd0\xb8\xd0\xba\xd0\xb8",\n+        u"name": "Tadjik",\n+        u"flag": u"/++resource++country-flags/tj.gif",\n+    },\n+    u"th": {\n+        u"native": "\xe0\xb9\x84\xe0\xb8\x97\xe0\xb8\xa2",\n+        u"name": "Thai",\n+        u"flag": u"/++resource++country-flags/th.gif",\n+    },\n+    u"ti": {u"native": "\xe1\x89\xb5\xe1\x8c\x8d\xe1\x88\xad\xe1\x8a\x9b", u"name": "Tigrinya"},\n+    u"tk": {\n+        u"native": "\xd1\x82\xd2\xaf\xd1\x80\xd0\xbam\xd0\xb5\xd0\xbd\xd1\x87\xd0\xb5",\n+        u"name": "Turkmen",\n+        u"flag": u"/++resource++country-flags/tm.gif",\n+    },\n+    u"tl": {u"native": "Tagalog", u"name": "Tagalog"},\n+    u"tn": {\n+        u"native": "Setswana",\n+        u"name": "Tswana",\n+        u"flag": u"/++resource++country-flags/bw.gif",\n+    },\n+    u"to": {u"native": "Tonga", u"name": "Tonga"},\n+    u"tr": {\n+        u"native": "T\xc3\xbcrk\xc3\xa7e",\n+        u"name": "Turkish",\n+        u"flag": u"/++resource++country-flags/tr.gif",\n+    },\n+    u"ts": {u"native": "Xitsonga", u"name": "Tsonga"},\n+    u"tt": {u"native": "\xd1\x82\xd0\xb0\xd1\x82\xd0\xb0\xd1\x80\xd1\x87\xd0\xb0", u"name": "Tatar"},\n+    u"tw": {u"native": "Twi", u"name": "Twi"},\n+    u"ty": {u"native": "Reo Tahiti", u"name": "Tahitian"},\n+    u"ug": {u"native": "Uigur", u"name": "Uigur"},\n+    u"uk": {\n+        u"native": "\xd0\xa3\xd0\xba\xd1\x80\xd0\xb0\xd1\x97\xd0\xbd\xd1\x81\xd1\x8c\xd0\xba\xd0\xb0",\n+        u"name": "Ukrainian",\n+        u"flag": u"/++resource++country-flags/ua.gif",\n+    },\n+    u"ur": {u"native": "\xd8\xa7\xd8\xb1\xd8\xaf\xd9\x88", u"name": "Urdu"},\n+    u"uz": {\n+        u"native": "\xd0\x8e\xd0\xb7\xd0\xb1\xd0\xb5\xd0\xba\xd1\x87\xd0\xb0",\n+        u"name": "Uzbek",\n+        u"flag": u"/++resource++country-flags/uz.gif",\n+    },\n+    u"ve": {u"native": "Tshiven\xe1\xb8\x93a", u"name": "Venda"},\n+    u"vi": {\n+        u"native": "Ti\xe1\xba\xbfng Vi\xe1\xbb\x87t",\n+        u"name": "Vietnamese",\n+        u"flag": u"/++resource++country-flags/vn.gif",\n+    },\n+    u"vk": {u"native": "Ovalingo", u"name": "Viking"},\n+    u"vo": {u"native": "Volap\xc3\xbck", u"name": "Volap\xc3\xbck"},\n+    u"wa": {u"native": "Walon", u"name": "Walloon"},\n+    u"wo": {u"native": "Wolof", u"name": "Wolof"},\n+    u"xh": {u"native": "IsiXhosa", u"name": "Xhosa"},\n+    u"yi": {\n+        u"native": "\xd7\xb2\xd6\xb4\xd7\x93\xd7\x99\xd7\xa9",\n+        u"name": "Yiddish",\n+        u"flag": u"/++resource++country-flags/il.gif",\n+    },\n+    u"yo": {u"native": "Yor\xc3\xb9b\xc3\xa1", u"name": "Yorouba"},\n+    u"za": {u"native": "Zhuang", u"name": "Zhuang"},\n+    u"zh": {\n+        u"native": "\xe4\xb8\xad\xe6\x96\x87",\n+        u"name": "Chinese",\n+        u"flag": u"/++resource++country-flags/cn.gif",\n+    },\n+    u"zu": {\n+        u"native": "IsiZulu",\n+        u"name": "Zulu",\n+        u"flag": u"/++resource++country-flags/za.gif",\n     },\n }\n \n # convert the utf-8 encoded values to unicode\n for code in _languagelist:\n     value = _languagelist[code]\n-    if u\'name\' in value:\n+    if u"name" in value:\n         if six.PY3:\n-            value[u\'name\'] = value[u\'name\']\n+            value[u"name"] = value[u"name"]\n         else:\n-            value[u\'name\'] = unicode(value[u\'name\'], \'utf-8\')\n-    if u\'native\' in value:\n+            value[u"name"] = unicode(value[u"name"], "utf-8")\n+    if u"native" in value:\n         if six.PY3:\n-            value[u\'native\'] = value[u\'native\']\n+            value[u"native"] = value[u"native"]\n         else:\n-            value[u\'native\'] = unicode(value[u\'native\'], \'utf-8\')\n+            value[u"native"] = unicode(value[u"native"], "utf-8")\n \n _combinedlanguagelist = {\n-    u\'ar-ae\': {\n-        u\'name\': \'Arabic (United Arab Emirates)\',\n-        u\'flag\': u\'/++resource++country-flags/ae.gif\',\n+    u"ar-ae": {\n+        u"name": "Arabic (United Arab Emirates)",\n+        u"flag": u"/++resource++country-flags/ae.gif",\n     },\n-    u\'ar-bh\': {\n-        u\'name\': \'Arabic (Bahrain)\',\n-        u\'flag\': u\'/++resource++country-flags/bh.gif\',\n+    u"ar-bh": {\n+        u"name": "Arabic (Bahrain)",\n+        u"flag": u"/++resource++country-flags/bh.gif",\n     },\n-    u\'ar-dz\': {\n-        u\'name\': \'Arabic (Algeria)\',\n-        u\'flag\': u\'/++resource++country-flags/dz.gif\',\n-    },\n-    u\'ar-eg\': {\n-        u\'name\': \'Arabic (Egypt)\',\n-        u\'flag\': u\'/++resource++country-flags/eg.gif\',\n-    },\n-    u\'ar-il\': {\n-        u\'name\': \'Arabic (Israel)\',\n-        u\'flag\': u\'/++resource++country-flags/il.gif\',\n-    },\n-    u\'ar-iq\': {\n-        u\'name\': \'Arabic (Iraq)\',\n-        u\'flag\': u\'/++resource++country-flags/iq.gif\',\n-    },\n-    u\'ar-jo\': {\n-        u\'name\': \'Arabic (Jordan)\',\n-        u\'flag\': u\'/++resource++country-flags/jo.gif\',\n-    },\n-    u\'ar-kw\': {\n-        u\'name\': \'Arabic (Kuwait)\',\n-        u\'flag\': u\'/++resource++country-flags/kw.gif\',\n-    },\n-    u\'ar-lb\': {\n-        u\'name\': \'Arabic (Lebanon)\',\n-        u\'flag\': u\'/++resource++country-flags/lb.gif\',\n-    },\n-    u\'ar-ly\': {\n-        u\'name\': \'Arabic (Libya)\',\n-        u\'flag\': u\'/++resource++country-flags/ly.gif\',\n-    },\n-    u\'ar-ma\': {\n-        u\'name\': \'Arabic (Morocco)\',\n-        u\'flag\': u\'/++resource++country-flags/ma.gif\',\n-    },\n-    u\'ar-mr\': {\n-        u\'name\': \'Arabic (Mauritania)\',\n-        u\'flag\': u\'/++resource++country-flags/mr.gif\',\n-    },\n-    u\'ar-om\': {\n-        u\'name\': \'Arabic (Oman)\',\n-        u\'flag\': u\'/++resource++country-flags/om.gif\',\n-    },\n-    u\'ar-ps\': {\n-        u\'name\': \'Arabic (Palestinian West Bank and Gaza)\',\n-        u\'flag\': u\'/++resource++country-flags/ps.gif\',\n-    },\n-    u\'ar-qa\': {\n-        u\'name\': \'Arabic (Qatar)\',\n-        u\'flag\': u\'/++resource++country-flags/qa.gif\',\n-    },\n-    u\'ar-sa\': {\n-        u\'name\': \'Arabic (Saudi Arabia)\',\n-        u\'flag\': u\'/++resource++country-flags/sa.gif\',\n-    },\n-    u\'ar-sd\': {\n-        u\'name\': \'Arabic (Sudan)\',\n-        u\'flag\': u\'/++resource++country-flags/ly.gif\',\n-    },\n-    u\'ar-so\': {\n-        u\'name\': \'Arabic (Somalia)\',\n-        u\'flag\': u\'/++resource++country-flags/so.gif\',\n-    },\n-    u\'ar-sy\': {\n-        u\'name\': \'Arabic (Syria)\',\n-        u\'flag\': u\'/++resource++country-flags/sy.gif\',\n-    },\n-    u\'ar-td\': {\n-        u\'name\': \'Arabic (Chad)\',\n-        u\'flag\': u\'/++resource++country-flags/td.gif\',\n-    },\n-    u\'ar-tn\': {\n-        u\'name\': \'Arabic (Tunisia)\',\n-        u\'flag\': u\'/++resource++country-flags/ly.gif\',\n-    },\n-    u\'ar-ye\': {\n-        u\'name\': \'Arabic (Yemen)\',\n-        u\'flag\': u\'/++resource++country-flags/ye.gif\',\n-    },\n-    u\'bn-bd\': {\n-        u\'name\': \'Bengali (Bangladesh)\',\n-        u\'flag\': u\'/++resource++country-flags/bd.gif\',\n-    },\n-    u\'bn-in\': {\n-        u\'name\': \'Bengali (India)\',\n-        u\'flag\': u\'/++resource++country-flags/in.gif\',\n-    },\n-    u\'bn-sg\': {\n-        u\'name\': \'Bengali (Singapore)\',\n-        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n-    },\n-    u\'ch-gu\': {\n-        u\'name\': \'Chamorro (Guam)\',\n-        u\'flag\': u\'/++resource++country-flags/gu.gif\',\n+    u"ar-dz": {\n+        u"name": "Arabic (Algeria)",\n+        u"flag": u"/++resource++country-flags/dz.gif",\n+    },\n+    u"ar-eg": {\n+        u"name": "Arabic (Egypt)",\n+        u"flag": u"/++resource++country-flags/eg.gif",\n+    },\n+    u"ar-il": {\n+        u"name": "Arabic (Israel)",\n+        u"flag": u"/++resource++country-flags/il.gif",\n+    },\n+    u"ar-iq": {\n+        u"name": "Arabic (Iraq)",\n+        u"flag": u"/++resource++country-flags/iq.gif",\n+    },\n+    u"ar-jo": {\n+        u"name": "Arabic (Jordan)",\n+        u"flag": u"/++resource++country-flags/jo.gif",\n+    },\n+    u"ar-kw": {\n+        u"name": "Arabic (Kuwait)",\n+        u"flag": u"/++resource++country-flags/kw.gif",\n+    },\n+    u"ar-lb": {\n+        u"name": "Arabic (Lebanon)",\n+        u"flag": u"/++resource++country-flags/lb.gif",\n+    },\n+    u"ar-ly": {\n+        u"name": "Arabic (Libya)",\n+        u"flag": u"/++resource++country-flags/ly.gif",\n+    },\n+    u"ar-ma": {\n+        u"name": "Arabic (Morocco)",\n+        u"flag": u"/++resource++country-flags/ma.gif",\n+    },\n+    u"ar-mr": {\n+        u"name": "Arabic (Mauritania)",\n+        u"flag": u"/++resource++country-flags/mr.gif",\n+    },\n+    u"ar-om": {\n+        u"name": "Arabic (Oman)",\n+        u"flag": u"/++resource++country-flags/om.gif",\n+    },\n+    u"ar-ps": {\n+        u"name": "Arabic (Palestinian West Bank and Gaza)",\n+        u"flag": u"/++resource++country-flags/ps.gif",\n+    },\n+    u"ar-qa": {\n+        u"name": "Arabic (Qatar)",\n+        u"flag": u"/++resource++country-flags/qa.gif",\n+    },\n+    u"ar-sa": {\n+        u"name": "Arabic (Saudi Arabia)",\n+        u"flag": u"/++resource++country-flags/sa.gif",\n+    },\n+    u"ar-sd": {\n+        u"name": "Arabic (Sudan)",\n+        u"flag": u"/++resource++country-flags/ly.gif",\n+    },\n+    u"ar-so": {\n+        u"name": "Arabic (Somalia)",\n+        u"flag": u"/++resource++country-flags/so.gif",\n+    },\n+    u"ar-sy": {\n+        u"name": "Arabic (Syria)",\n+        u"flag": u"/++resource++country-flags/sy.gif",\n+    },\n+    u"ar-td": {\n+        u"name": "Arabic (Chad)",\n+        u"flag": u"/++resource++country-flags/td.gif",\n+    },\n+    u"ar-tn": {\n+        u"name": "Arabic (Tunisia)",\n+        u"flag": u"/++resource++country-flags/ly.gif",\n+    },\n+    u"ar-ye": {\n+        u"name": "Arabic (Yemen)",\n+        u"flag": u"/++resource++country-flags/ye.gif",\n+    },\n+    u"bn-bd": {\n+        u"name": "Bengali (Bangladesh)",\n+        u"flag": u"/++resource++country-flags/bd.gif",\n+    },\n+    u"bn-in": {\n+        u"name": "Bengali (India)",\n+        u"flag": u"/++resource++country-flags/in.gif",\n+    },\n+    u"bn-sg": {\n+        u"name": "Bengali (Singapore)",\n+        u"flag": u"/++resource++country-flags/sg.gif",\n+    },\n+    u"ch-gu": {\n+        u"name": "Chamorro (Guam)",\n+        u"flag": u"/++resource++country-flags/gu.gif",\n     },\n-    u\'ch-mp\': {\n-        u\'name\': \'Chamorro (Northern Mariana Islands)\',\n-        u\'flag\': u\'/++resource++country-flags/mp.gif\',\n+    u"ch-mp": {\n+        u"name": "Chamorro (Northern Mariana Islands)",\n+        u"flag": u"/++resource++country-flags/mp.gif",\n     },\n-    u\'cs-cz\': {\n-        u\'name\': \'Czech (Czech republic)\',\n-        u\'native\': \'\xc4\x8ce\xc5\xa1tina (\xc4\x8cesk\xc3\xa1 republika)\',\n-        u\'flag\': u\'/++resource++country-flags/cz.gif\',\n-    },\n-    u\'da-dk\': {\n-        u\'name\': \'Danish (Denmark)\',\n-        u\'flag\': u\'/++resource++country-flags/dk.gif\',\n-    },\n-    u\'da-gl\': {\n-        u\'name\': \'Danish (Greenland)\',\n-        u\'flag\': u\'/++resource++country-flags/gl.gif\',\n-    },\n-    u\'de-at\': {\n-        u\'name\': \'German (Austria)\',\n-        u\'native\': \'Deutsch (\xc3\x96sterreich)\',\n-        u\'flag\': u\'/++resource++country-flags/at.gif\',\n+    u"cs-cz": {\n+        u"name": "Czech (Czech republic)",\n+        u"native": "\xc4\x8ce\xc5\xa1tina (\xc4\x8cesk\xc3\xa1 republika)",\n+        u"flag": u"/++resource++country-flags/cz.gif",\n+    },\n+    u"da-dk": {\n+        u"name": "Danish (Denmark)",\n+        u"flag": u"/++resource++country-flags/dk.gif",\n+    },\n+    u"da-gl": {\n+        u"name": "Danish (Greenland)",\n+        u"flag": u"/++resource++country-flags/gl.gif",\n+    },\n+    u"de-at": {\n+        u"name": "German (Austria)",\n+        u"native": "Deutsch (\xc3\x96sterreich)",\n+        u"flag": u"/++resource++country-flags/at.gif",\n     },\n-    u\'de-be\': {\n-        u\'name\': \'German (Belgium)\',\n-        u\'flag\': u\'/++resource++country-flags/de.gif\',\n+    u"de-be": {\n+        u"name": "German (Belgium)",\n+        u"flag": u"/++resource++country-flags/de.gif",\n     },\n-    u\'de-ch\': {\n-        u\'name\': \'German (Switzerland)\',\n-        u\'flag\': u\'/++resource++country-flags/ch.gif\',\n+    u"de-ch": {\n+        u"name": "German (Switzerland)",\n+        u"flag": u"/++resource++country-flags/ch.gif",\n     },\n-    u\'de-de\': {\n-        u\'name\': \'German (Germany)\',\n-        u\'flag\': u\'/++resource++country-flags/de.gif\',\n+    u"de-de": {\n+        u"name": "German (Germany)",\n+        u"flag": u"/++resource++country-flags/de.gif",\n     },\n-    u\'de-dk\': {\n-        u\'name\': \'German (Denmark)\',\n-        u\'flag\': u\'/++resource++country-flags/de.gif\',\n+    u"de-dk": {\n+        u"name": "German (Denmark)",\n+        u"flag": u"/++resource++country-flags/de.gif",\n     },\n-    u\'de-li\': {\n-        u\'name\': \'German (Liechtenstein)\',\n-        u\'flag\': u\'/++resource++country-flags/li.gif\',\n+    u"de-li": {\n+        u"name": "German (Liechtenstein)",\n+        u"flag": u"/++resource++country-flags/li.gif",\n     },\n-    u\'de-lu\': {\n-        u\'name\': \'German (Luxembourg)\',\n-        u\'flag\': u\'/++resource++country-flags/de.gif\',\n+    u"de-lu": {\n+        u"name": "German (Luxembourg)",\n+        u"flag": u"/++resource++country-flags/de.gif",\n     },\n-    u\'el-cy\': {\n-        u\'name\': \'Greek (Cyprus)\',\n-        u\'flag\': u\'/++resource++country-flags/cy.gif\',\n+    u"el-cy": {\n+        u"name": "Greek (Cyprus)",\n+        u"flag": u"/++resource++country-flags/cy.gif",\n     },\n-    u\'el-gr\': {\n-        u\'name\': \'Greek (Greece)\',\n-        u\'flag\': u\'/++resource++country-flags/gr.gif\',\n+    u"el-gr": {\n+        u"name": "Greek (Greece)",\n+        u"flag": u"/++resource++country-flags/gr.gif",\n     },\n-    u\'en-ag\': {\n-        u\'name\': \'English (Antigua and Barbuda)\',\n-        u\'flag\': u\'/++resource++country-flags/ag.gif\',\n+    u"en-ag": {\n+        u"name": "English (Antigua and Barbuda)",\n+        u"flag": u"/++resource++country-flags/ag.gif",\n     },\n-    u\'en-ai\': {\n-        u\'name\': \'English (Anguilla)\',\n-        u\'flag\': u\'/++resource++country-flags/ai.gif\',\n+    u"en-ai": {\n+        u"name": "English (Anguilla)",\n+        u"flag": u"/++resource++country-flags/ai.gif",\n     },\n-    u\'en-as\': {\n-        u\'name\': \'English (American Samoa)\',\n-        u\'flag\': u\'/++resource++country-flags/as.gif\',\n+    u"en-as": {\n+        u"name": "English (American Samoa)",\n+        u"flag": u"/++resource++country-flags/as.gif",\n     },\n-    u\'en-au\': {\n-        u\'name\': \'English (Australia)\',\n-        u\'flag\': u\'/++resource++country-flags/au.gif\',\n+    u"en-au": {\n+        u"name": "English (Australia)",\n+        u"flag": u"/++resource++country-flags/au.gif",\n     },\n-    u\'en-bb\': {\n-        u\'name\': \'English (Barbados)\',\n-        u\'flag\': u\'/++resource++country-flags/bb.gif\',\n+    u"en-bb": {\n+        u"name": "English (Barbados)",\n+        u"flag": u"/++resource++country-flags/bb.gif",\n     },\n-    u\'en-bm\': {\n-        u\'name\': \'English (Bermuda)\',\n-        u\'flag\': u\'/++resource++country-flags/bm.gif\',\n+    u"en-bm": {\n+        u"name": "English (Bermuda)",\n+        u"flag": u"/++resource++country-flags/bm.gif",\n     },\n-    u\'en-bn\': {\n-        u\'name\': \'English (Brunei)\',\n-        u\'flag\': u\'/++resource++country-flags/bn.gif\',\n+    u"en-bn": {\n+        u"name": "English (Brunei)",\n+        u"flag": u"/++resource++country-flags/bn.gif",\n     },\n-    u\'en-bs\': {\n-        u\'name\': \'English (Bahamas)\',\n-        u\'flag\': u\'/++resource++country-flags/bs.gif\',\n+    u"en-bs": {\n+        u"name": "English (Bahamas)",\n+        u"flag": u"/++resource++country-flags/bs.gif",\n     },\n-    u\'en-bw\': {\n-        u\'name\': \'English (Botswana)\',\n-        u\'flag\': u\'/++resource++country-flags/bw.gif\',\n+    u"en-bw": {\n+        u"name": "English (Botswana)",\n+        u"flag": u"/++resource++country-flags/bw.gif",\n     },\n-    u\'en-bz\': {\n-        u\'name\': \'English (Belize)\',\n-        u\'flag\': u\'/++resource++country-flags/bz.gif\',\n+    u"en-bz": {\n+        u"name": "English (Belize)",\n+        u"flag": u"/++resource++country-flags/bz.gif",\n     },\n-    u\'en-ca\': {\n-        u\'name\': \'English (Canada)\',\n-        u\'flag\': u\'/++resource++country-flags/ca.gif\',\n+    u"en-ca": {\n+        u"name": "English (Canada)",\n+        u"flag": u"/++resource++country-flags/ca.gif",\n     },\n-    u\'en-ck\': {\n-        u\'name\': \'English (Cook Islands)\',\n-        u\'flag\': u\'/++resource++country-flags/ck.gif\',\n+    u"en-ck": {\n+        u"name": "English (Cook Islands)",\n+        u"flag": u"/++resource++country-flags/ck.gif",\n     },\n-    u\'en-cm\': {\n-        u\'name\': \'English (Cameroon)\',\n-        u\'flag\': u\'/++resource++country-flags/cm.gif\',\n+    u"en-cm": {\n+        u"name": "English (Cameroon)",\n+        u"flag": u"/++resource++country-flags/cm.gif",\n     },\n-    u\'en-dm\': {\n-        u\'name\': \'English (Dominica)\',\n-        u\'flag\': u\'/++resource++country-flags/dm.gif\',\n+    u"en-dm": {\n+        u"name": "English (Dominica)",\n+        u"flag": u"/++resource++country-flags/dm.gif",\n     },\n-    u\'en-er\': {\n-        u\'name\': \'English (Eritrea)\',\n-        u\'flag\': u\'/++resource++country-flags/er.gif\',\n+    u"en-er": {\n+        u"name": "English (Eritrea)",\n+        u"flag": u"/++resource++country-flags/er.gif",\n     },\n-    u\'en-et\': {\n-        u\'name\': \'English (Ethiopia)\',\n-        u\'flag\': u\'/++resource++country-flags/et.gif\',\n+    u"en-et": {\n+        u"name": "English (Ethiopia)",\n+        u"flag": u"/++resource++country-flags/et.gif",\n     },\n-    u\'en-fj\': {\n-        u\'name\': \'English (Fiji)\',\n-        u\'flag\': u\'/++resource++country-flags/fj.gif\',\n+    u"en-fj": {\n+        u"name": "English (Fiji)",\n+        u"flag": u"/++resource++country-flags/fj.gif",\n     },\n-    u\'en-fk\': {\n-        u\'name\': \'English (Falkland Islands)\',\n-        u\'flag\': u\'/++resource++country-flags/fk.gif\',\n+    u"en-fk": {\n+        u"name": "English (Falkland Islands)",\n+        u"flag": u"/++resource++country-flags/fk.gif",\n     },\n-    u\'en-fm\': {\n-        u\'name\': \'English (Micronesia)\',\n-        u\'flag\': u\'/++resource++country-flags/fm.gif\',\n+    u"en-fm": {\n+        u"name": "English (Micronesia)",\n+        u"flag": u"/++resource++country-flags/fm.gif",\n     },\n-    u\'en-gb\': {\n-        u\'name\': \'English (United Kingdom)\',\n-        u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+    u"en-gb": {\n+        u"name": "English (United Kingdom)",\n+        u"flag": u"/++resource++country-flags/gb.gif",\n     },\n-    u\'en-gd\': {\n-        u\'name\': \'English (Grenada)\',\n-        u\'flag\': u\'/++resource++country-flags/gd.gif\',\n+    u"en-gd": {\n+        u"name": "English (Grenada)",\n+        u"flag": u"/++resource++country-flags/gd.gif",\n     },\n-    u\'en-gh\': {\n-        u\'name\': \'English (Ghana)\',\n-        u\'flag\': u\'/++resource++country-flags/gh.gif\',\n+    u"en-gh": {\n+        u"name": "English (Ghana)",\n+        u"flag": u"/++resource++country-flags/gh.gif",\n     },\n-    u\'en-gi\': {\n-        u\'name\': \'English (Gibraltar)\',\n-        u\'flag\': u\'/++resource++country-flags/gi.gif\',\n+    u"en-gi": {\n+        u"name": "English (Gibraltar)",\n+        u"flag": u"/++resource++country-flags/gi.gif",\n     },\n-    u\'en-gm\': {\n-        u\'name\': \'English (Gambia)\',\n-        u\'flag\': u\'/++resource++country-flags/gm.gif\',\n+    u"en-gm": {\n+        u"name": "English (Gambia)",\n+        u"flag": u"/++resource++country-flags/gm.gif",\n     },\n-    u\'en-gu\': {\n-        u\'name\': \'English (Guam)\',\n-        u\'flag\': u\'/++resource++country-flags/gu.gif\',\n+    u"en-gu": {\n+        u"name": "English (Guam)",\n+        u"flag": u"/++resource++country-flags/gu.gif",\n     },\n-    u\'en-gy\': {\n-        u\'name\': \'English (Guyana)\',\n-        u\'flag\': u\'/++resource++country-flags/gy.gif\',\n+    u"en-gy": {\n+        u"name": "English (Guyana)",\n+        u"flag": u"/++resource++country-flags/gy.gif",\n     },\n-    u\'en-ie\': {\n-        u\'name\': \'English (Ireland)\',\n-        u\'flag\': u\'/++resource++country-flags/ie.gif\',\n+    u"en-ie": {\n+        u"name": "English (Ireland)",\n+        u"flag": u"/++resource++country-flags/ie.gif",\n     },\n-    u\'en-il\': {\n-        u\'name\': \'English (Israel)\',\n-        u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+    u"en-il": {\n+        u"name": "English (Israel)",\n+        u"flag": u"/++resource++country-flags/gb.gif",\n     },\n-    u\'en-io\': {\n-        u\'name\': \'English (British Indian Ocean Territory)\',\n-        u\'flag\': u\'/++resource++country-flags/io.gif\',\n+    u"en-io": {\n+        u"name": "English (British Indian Ocean Territory)",\n+        u"flag": u"/++resource++country-flags/io.gif",\n     },\n-    u\'en-jm\': {\n-        u\'name\': \'English (Jamaica)\',\n-        u\'flag\': u\'/++resource++country-flags/jm.gif\',\n+    u"en-jm": {\n+        u"name": "English (Jamaica)",\n+        u"flag": u"/++resource++country-flags/jm.gif",\n     },\n-    u\'en-ke\': {\n-        u\'name\': \'English (Kenya)\',\n-        u\'flag\': u\'/++resource++country-flags/ke.gif\',\n+    u"en-ke": {\n+        u"name": "English (Kenya)",\n+        u"flag": u"/++resource++country-flags/ke.gif",\n     },\n-    u\'en-ki\': {\n-        u\'name\': \'English (Kiribati)\',\n-        u\'flag\': u\'/++resource++country-flags/ki.gif\',\n+    u"en-ki": {\n+        u"name": "English (Kiribati)",\n+        u"flag": u"/++resource++country-flags/ki.gif",\n     },\n-    u\'en-kn\': {\n-        u\'name\': \'English (St. Kitts-Nevis)\',\n-        u\'flag\': u\'/++resource++country-flags/kn.gif\',\n+    u"en-kn": {\n+        u"name": "English (St. Kitts-Nevis)",\n+        u"flag": u"/++resource++country-flags/kn.gif",\n     },\n-    u\'en-ky\': {\n-        u\'name\': \'English (Cayman Islands)\',\n-        u\'flag\': u\'/++resource++country-flags/ky.gif\',\n+    u"en-ky": {\n+        u"name": "English (Cayman Islands)",\n+        u"flag": u"/++resource++country-flags/ky.gif",\n     },\n-    u\'en-lc\': {\n-        u\'name\': \'English (St. Lucia)\',\n-        u\'flag\': u\'/++resource++country-flags/lc.gif\',\n+    u"en-lc": {\n+        u"name": "English (St. Lucia)",\n+        u"flag": u"/++resource++country-flags/lc.gif",\n     },\n-    u\'en-lr\': {\n-        u\'name\': \'English (Liberia)\',\n-        u\'flag\': u\'/++resource++country-flags/lr.gif\',\n+    u"en-lr": {\n+        u"name": "English (Liberia)",\n+        u"flag": u"/++resource++country-flags/lr.gif",\n     },\n-    u\'en-ls\': {\n-        u\'name\': \'English (Lesotho)\',\n-        u\'flag\': u\'/++resource++country-flags/ls.gif\',\n+    u"en-ls": {\n+        u"name": "English (Lesotho)",\n+        u"flag": u"/++resource++country-flags/ls.gif",\n     },\n-    u\'en-mp\': {\n-        u\'name\': \'English (Northern Mariana Islands)\',\n-        u\'flag\': u\'/++resource++country-flags/mp.gif\',\n+    u"en-mp": {\n+        u"name": "English (Northern Mariana Islands)",\n+        u"flag": u"/++resource++country-flags/mp.gif",\n     },\n-    u\'en-ms\': {\n-        u\'name\': \'English (Montserrat)\',\n-        u\'flag\': u\'/++resource++country-flags/ms.gif\',\n+    u"en-ms": {\n+        u"name": "English (Montserrat)",\n+        u"flag": u"/++resource++country-flags/ms.gif",\n     },\n-    u\'en-mt\': {\n-        u\'name\': \'English (Malta)\',\n-        u\'flag\': u\'/++resource++country-flags/mt.gif\',\n+    u"en-mt": {\n+        u"name": "English (Malta)",\n+        u"flag": u"/++resource++country-flags/mt.gif",\n     },\n-    u\'en-mu\': {\n-        u\'name\': \'English (Mauritius)\',\n-        u\'flag\': u\'/++resource++country-flags/mu.gif\',\n+    u"en-mu": {\n+        u"name": "English (Mauritius)",\n+        u"flag": u"/++resource++country-flags/mu.gif",\n     },\n-    u\'en-mw\': {\n-        u\'name\': \'English (Malawi)\',\n-        u\'flag\': u\'/++resource++country-flags/mw.gif\',\n+    u"en-mw": {\n+        u"name": "English (Malawi)",\n+        u"flag": u"/++resource++country-flags/mw.gif",\n     },\n-    u\'en-na\': {\n-        u\'name\': \'English (Namibia)\',\n-        u\'flag\': u\'/++resource++country-flags/na.gif\',\n+    u"en-na": {\n+        u"name": "English (Namibia)",\n+        u"flag": u"/++resource++country-flags/na.gif",\n     },\n-    u\'en-nf\': {\n-        u\'name\': \'English (Norfolk Island)\',\n-        u\'flag\': u\'/++resource++country-flags/nf.gif\',\n+    u"en-nf": {\n+        u"name": "English (Norfolk Island)",\n+        u"flag": u"/++resource++country-flags/nf.gif",\n     },\n-    u\'en-ng\': {\n-        u\'name\': \'English (Nigeria)\',\n-        u\'flag\': u\'/++resource++country-flags/ng.gif\',\n+    u"en-ng": {\n+        u"name": "English (Nigeria)",\n+        u"flag": u"/++resource++country-flags/ng.gif",\n     },\n-    u\'en-nr\': {\n-        u\'name\': \'English (Nauru)\',\n-        u\'flag\': u\'/++resource++country-flags/nr.gif\',\n+    u"en-nr": {\n+        u"name": "English (Nauru)",\n+        u"flag": u"/++resource++country-flags/nr.gif",\n     },\n-    u\'en-nu\': {\n-        u\'name\': \'English (Niue)\',\n-        u\'flag\': u\'/++resource++country-flags/nu.gif\',\n+    u"en-nu": {\n+        u"name": "English (Niue)",\n+        u"flag": u"/++resource++country-flags/nu.gif",\n     },\n-    u\'en-nz\': {\n-        u\'name\': \'English (New Zealand)\',\n-        u\'flag\': u\'/++resource++country-flags/nz.gif\',\n+    u"en-nz": {\n+        u"name": "English (New Zealand)",\n+        u"flag": u"/++resource++country-flags/nz.gif",\n     },\n-    u\'en-pg\': {\n-        u\'name\': \'English (Papua New Guinea)\',\n-        u\'flag\': u\'/++resource++country-flags/pg.gif\',\n+    u"en-pg": {\n+        u"name": "English (Papua New Guinea)",\n+        u"flag": u"/++resource++country-flags/pg.gif",\n     },\n-    u\'en-ph\': {\n-        u\'name\': \'English (Philippines)\',\n-        u\'flag\': u\'/++resource++country-flags/ph.gif\',\n+    u"en-ph": {\n+        u"name": "English (Philippines)",\n+        u"flag": u"/++resource++country-flags/ph.gif",\n     },\n-    u\'en-pk\': {\n-        u\'name\': \'English (Pakistan)\',\n-        u\'flag\': u\'/++resource++country-flags/pk.gif\',\n+    u"en-pk": {\n+        u"name": "English (Pakistan)",\n+        u"flag": u"/++resource++country-flags/pk.gif",\n     },\n-    u\'en-pn\': {\n-        u\'name\': \'English (Pitcairn)\',\n-        u\'flag\': u\'/++resource++country-flags/pn.gif\',\n+    u"en-pn": {\n+        u"name": "English (Pitcairn)",\n+        u"flag": u"/++resource++country-flags/pn.gif",\n     },\n-    u\'en-pr\': {\n-        u\'name\': \'English (Puerto Rico)\',\n-        u\'flag\': u\'/++resource++country-flags/pr.gif\',\n+    u"en-pr": {\n+        u"name": "English (Puerto Rico)",\n+        u"flag": u"/++resource++country-flags/pr.gif",\n     },\n-    u\'en-pw\': {\n-        u\'name\': \'English (Palau)\',\n-        u\'flag\': u\'/++resource++country-flags/pw.gif\',\n+    u"en-pw": {\n+        u"name": "English (Palau)",\n+        u"flag": u"/++resource++country-flags/pw.gif",\n     },\n-    u\'en-rw\': {\n-        u\'name\': \'English (Rwanda)\',\n-        u\'flag\': u\'/++resource++country-flags/rw.gif\',\n+    u"en-rw": {\n+        u"name": "English (Rwanda)",\n+        u"flag": u"/++resource++country-flags/rw.gif",\n     },\n-    u\'en-sb\': {\n-        u\'name\': \'English (Solomon Islands)\',\n-        u\'flag\': u\'/++resource++country-flags/sb.gif\',\n+    u"en-sb": {\n+        u"name": "English (Solomon Islands)",\n+        u"flag": u"/++resource++country-flags/sb.gif",\n     },\n-    u\'en-sc\': {\n-        u\'name\': \'English (Seychelles)\',\n-        u\'flag\': u\'/++resource++country-flags/sc.gif\',\n+    u"en-sc": {\n+        u"name": "English (Seychelles)",\n+        u"flag": u"/++resource++country-flags/sc.gif",\n     },\n-    u\'en-sg\': {\n-        u\'name\': \'English (Singapore)\',\n-        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n+    u"en-sg": {\n+        u"name": "English (Singapore)",\n+        u"flag": u"/++resource++country-flags/sg.gif",\n     },\n-    u\'en-sh\': {\n-        u\'name\': \'English (St. Helena)\',\n-        u\'flag\': u\'/++resource++country-flags/sh.gif\',\n+    u"en-sh": {\n+        u"name": "English (St. Helena)",\n+        u"flag": u"/++resource++country-flags/sh.gif",\n     },\n-    u\'en-sl\': {\n-        u\'name\': \'English (Sierra Leone)\',\n-        u\'flag\': u\'/++resource++country-flags/sl.gif\',\n+    u"en-sl": {\n+        u"name": "English (Sierra Leone)",\n+        u"flag": u"/++resource++country-flags/sl.gif",\n     },\n-    u\'en-so\': {\n-        u\'name\': \'English (Somalia)\',\n-        u\'flag\': u\'/++resource++country-flags/so.gif\',\n+    u"en-so": {\n+        u"name": "English (Somalia)",\n+        u"flag": u"/++resource++country-flags/so.gif",\n     },\n-    u\'en-sz\': {\n-        u\'name\': \'English (Swaziland)\',\n-        u\'flag\': u\'/++resource++country-flags/sz.gif\',\n+    u"en-sz": {\n+        u"name": "English (Swaziland)",\n+        u"flag": u"/++resource++country-flags/sz.gif",\n     },\n-    u\'en-tc\': {\n-        u\'name\': \'English (Turks and Caicos Islands)\',\n-        u\'flag\': u\'/++resource++country-flags/tc.gif\',\n+    u"en-tc": {\n+        u"name": "English (Turks and Caicos Islands)",\n+        u"flag": u"/++resource++country-flags/tc.gif",\n     },\n-    u\'en-tk\': {\n-        u\'name\': \'English (Tokelau)\',\n-        u\'flag\': u\'/++resource++country-flags/tk.gif\',\n+    u"en-tk": {\n+        u"name": "English (Tokelau)",\n+        u"flag": u"/++resource++country-flags/tk.gif",\n     },\n-    u\'en-to\': {\n-        u\'name\': \'English (Tonga)\',\n-        u\'flag\': u\'/++resource++country-flags/to.gif\',\n+    u"en-to": {\n+        u"name": "English (Tonga)",\n+        u"flag": u"/++resource++country-flags/to.gif",\n     },\n-    u\'en-tt\': {\n-        u\'name\': \'English (Trinidad and Tobago)\',\n-        u\'flag\': u\'/++resource++country-flags/tt.gif\',\n+    u"en-tt": {\n+        u"name": "English (Trinidad and Tobago)",\n+        u"flag": u"/++resource++country-flags/tt.gif",\n     },\n-    u\'en-ug\': {\n-        u\'name\': \'English (Uganda)\',\n-        u\'flag\': u\'/++resource++country-flags/ug.gif\',\n+    u"en-ug": {\n+        u"name": "English (Uganda)",\n+        u"flag": u"/++resource++country-flags/ug.gif",\n     },\n-    u\'en-us\': {\n-        u\'name\': \'English (USA)\',\n-        u\'flag\': u\'/++resource++country-flags/us.gif\',\n+    u"en-us": {\n+        u"name": "English (USA)",\n+        u"flag": u"/++resource++country-flags/us.gif",\n     },\n-    u\'en-vc\': {\n-        u\'name\': \'English (St. Vincent and the Grenadi)\',\n-        u\'flag\': u\'/++resource++country-flags/vc.gif\',\n+    u"en-vc": {\n+        u"name": "English (St. Vincent and the Grenadi)",\n+        u"flag": u"/++resource++country-flags/vc.gif",\n     },\n-    u\'en-vg\': {\n-        u\'name\': \'English (British Virgin Islands)\',\n-        u\'flag\': u\'/++resource++country-flags/vg.gif\',\n+    u"en-vg": {\n+        u"name": "English (British Virgin Islands)",\n+        u"flag": u"/++resource++country-flags/vg.gif",\n     },\n-    u\'en-vi\': {\n-        u\'name\': \'English (U.S. Virgin Islands)\',\n-        u\'flag\': u\'/++resource++country-flags/vi.gif\',\n+    u"en-vi": {\n+        u"name": "English (U.S. Virgin Islands)",\n+        u"flag": u"/++resource++country-flags/vi.gif",\n     },\n-    u\'en-vu\': {\n-        u\'name\': \'English (Vanuatu)\',\n-        u\'flag\': u\'/++resource++country-flags/vu.gif\',\n+    u"en-vu": {\n+        u"name": "English (Vanuatu)",\n+        u"flag": u"/++resource++country-flags/vu.gif",\n     },\n-    u\'en-ws\': {\n-        u\'name\': \'English (Western Samoa)\',\n-        u\'flag\': u\'/++resource++country-flags/ws.gif\',\n+    u"en-ws": {\n+        u"name": "English (Western Samoa)",\n+        u"flag": u"/++resource++country-flags/ws.gif",\n     },\n-    u\'en-za\': {\n-        u\'name\': \'English (South Africa)\',\n-        u\'flag\': u\'/++resource++country-flags/za.gif\',\n+    u"en-za": {\n+        u"name": "English (South Africa)",\n+        u"flag": u"/++resource++country-flags/za.gif",\n     },\n-    u\'en-zm\': {\n-        u\'name\': \'English (Zambia)\',\n-        u\'flag\': u\'/++resource++country-flags/zm.gif\',\n+    u"en-zm": {\n+        u"name": "English (Zambia)",\n+        u"flag": u"/++resource++country-flags/zm.gif",\n     },\n-    u\'en-zw\': {\n-        u\'name\': \'English (Zimbabwe)\',\n-        u\'flag\': u\'/++resource++country-flags/zw.gif\',\n+    u"en-zw": {\n+        u"name": "English (Zimbabwe)",\n+        u"flag": u"/++resource++country-flags/zw.gif",\n     },\n-    u\'es-ar\': {\n-        u\'name\': \'Spanish (Argentina)\',\n-        u\'flag\': u\'/++resource++country-flags/ar.gif\',\n+    u"es-ar": {\n+        u"name": "Spanish (Argentina)",\n+        u"flag": u"/++resource++country-flags/ar.gif",\n     },\n-    u\'es-bo\': {\n-        u\'name\': \'Spanish (Bolivia)\',\n-        u\'flag\': u\'/++resource++country-flags/bo.gif\',\n+    u"es-bo": {\n+        u"name": "Spanish (Bolivia)",\n+        u"flag": u"/++resource++country-flags/bo.gif",\n     },\n-    u\'es-cl\': {\n-        u\'name\': \'Spanish (Chile)\',\n-        u\'flag\': u\'/++resource++country-flags/cl.gif\',\n+    u"es-cl": {\n+        u"name": "Spanish (Chile)",\n+        u"flag": u"/++resource++country-flags/cl.gif",\n     },\n-    u\'es-co\': {\n-        u\'name\': \'Spanish (Colombia)\',\n-        u\'flag\': u\'/++resource++country-flags/co.gif\',\n+    u"es-co": {\n+        u"name": "Spanish (Colombia)",\n+        u"flag": u"/++resource++country-flags/co.gif",\n     },\n-    u\'es-cr\': {\n-        u\'name\': \'Spanish (Costa Rica)\',\n-        u\'flag\': u\'/++resource++country-flags/cr.gif\',\n+    u"es-cr": {\n+        u"name": "Spanish (Costa Rica)",\n+        u"flag": u"/++resource++country-flags/cr.gif",\n     },\n-    u\'es-cu\': {\n-        u\'name\': \'Spanish (Cuba)\',\n-        u\'flag\': u\'/++resource++country-flags/cu.gif\',\n+    u"es-cu": {\n+        u"name": "Spanish (Cuba)",\n+        u"flag": u"/++resource++country-flags/cu.gif",\n     },\n-    u\'es-do\': {\n-        u\'name\': \'Spanish (Dominican Republic)\',\n-        u\'flag\': u\'/++resource++country-flags/do.gif\',\n+    u"es-do": {\n+        u"name": "Spanish (Dominican Republic)",\n+        u"flag": u"/++resource++country-flags/do.gif",\n     },\n-    u\'es-ec\': {\n-        u\'name\': \'Spanish (Ecuador)\',\n-        u\'flag\': u\'/++resource++country-flags/ec.gif\',\n+    u"es-ec": {\n+        u"name": "Spanish (Ecuador)",\n+        u"flag": u"/++resource++country-flags/ec.gif",\n     },\n-    u\'es-es\': {\n-        u\'name\': \'Spanish (Spain)\',\n-        u\'flag\': u\'/++resource++country-flags/es.gif\',\n+    u"es-es": {\n+        u"name": "Spanish (Spain)",\n+        u"flag": u"/++resource++country-flags/es.gif",\n     },\n-    u\'es-gq\': {\n-        u\'name\': \'Spanish (Equatorial Guinea)\',\n-        u\'flag\': u\'/++resource++country-flags/gq.gif\',\n+    u"es-gq": {\n+        u"name": "Spanish (Equatorial Guinea)",\n+        u"flag": u"/++resource++country-flags/gq.gif",\n     },\n-    u\'es-gt\': {\n-        u\'name\': \'Spanish (Guatemala)\',\n-        u\'flag\': u\'/++resource++country-flags/gt.gif\',\n+    u"es-gt": {\n+        u"name": "Spanish (Guatemala)",\n+        u"flag": u"/++resource++country-flags/gt.gif",\n     },\n-    u\'es-hn\': {\n-        u\'name\': \'Spanish (Honduras)\',\n-        u\'flag\': u\'/++resource++country-flags/hn.gif\',\n+    u"es-hn": {\n+        u"name": "Spanish (Honduras)",\n+        u"flag": u"/++resource++country-flags/hn.gif",\n     },\n-    u\'es-mx\': {\n-        u\'name\': \'Spanish (Mexico)\',\n-        u\'flag\': u\'/++resource++country-flags/mx.gif\',\n+    u"es-mx": {\n+        u"name": "Spanish (Mexico)",\n+        u"flag": u"/++resource++country-flags/mx.gif",\n     },\n-    u\'es-ni\': {\n-        u\'name\': \'Spanish (Nicaragua)\',\n-        u\'flag\': u\'/++resource++country-flags/ni.gif\',\n+    u"es-ni": {\n+        u"name": "Spanish (Nicaragua)",\n+        u"flag": u"/++resource++country-flags/ni.gif",\n     },\n-    u\'es-pa\': {\n-        u\'name\': \'Spanish (Panama)\',\n-        u\'flag\': u\'/++resource++country-flags/pa.gif\',\n+    u"es-pa": {\n+        u"name": "Spanish (Panama)",\n+        u"flag": u"/++resource++country-flags/pa.gif",\n     },\n-    u\'es-pe\': {\n-        u\'name\': \'Spanish (Peru)\',\n-        u\'flag\': u\'/++resource++country-flags/pe.gif\',\n+    u"es-pe": {\n+        u"name": "Spanish (Peru)",\n+        u"flag": u"/++resource++country-flags/pe.gif",\n     },\n-    u\'es-pr\': {\n-        u\'name\': \'Spanish (Puerto Rico)\',\n-        u\'flag\': u\'/++resource++country-flags/pr.gif\',\n+    u"es-pr": {\n+        u"name": "Spanish (Puerto Rico)",\n+        u"flag": u"/++resource++country-flags/pr.gif",\n     },\n-    u\'es-py\': {\n-        u\'name\': \'Spanish (Paraguay)\',\n-        u\'flag\': u\'/++resource++country-flags/py.gif\',\n+    u"es-py": {\n+        u"name": "Spanish (Paraguay)",\n+        u"flag": u"/++resource++country-flags/py.gif",\n     },\n-    u\'es-sv\': {\n-        u\'name\': \'Spanish (El Salvador)\',\n-        u\'flag\': u\'/++resource++country-flags/sv.gif\',\n+    u"es-sv": {\n+        u"name": "Spanish (El Salvador)",\n+        u"flag": u"/++resource++country-flags/sv.gif",\n     },\n-    u\'es-us\': {\n-        u\'name\': \'Spanish (USA)\',\n-        u\'flag\': u\'/++resource++country-flags/us.gif\',\n+    u"es-us": {\n+        u"name": "Spanish (USA)",\n+        u"flag": u"/++resource++country-flags/us.gif",\n     },\n-    u\'es-uy\': {\n-        u\'name\': \'Spanish (Uruguay)\',\n-        u\'flag\': u\'/++resource++country-flags/uy.gif\',\n+    u"es-uy": {\n+        u"name": "Spanish (Uruguay)",\n+        u"flag": u"/++resource++country-flags/uy.gif",\n     },\n-    u\'es-ve\': {\n-        u\'name\': \'Spanish (Venezuela)\',\n-        u\'flag\': u\'/++resource++country-flags/ve.gif\',\n+    u"es-ve": {\n+        u"name": "Spanish (Venezuela)",\n+        u"flag": u"/++resource++country-flags/ve.gif",\n     },\n-    u\'fr-ad\': {\n-        u\'name\': \'French (Andorra)\',\n-        u\'flag\': u\'/++resource++country-flags/ad.gif\',\n+    u"fr-ad": {\n+        u"name": "French (Andorra)",\n+        u"flag": u"/++resource++country-flags/ad.gif",\n     },\n-    u\'fr-be\': {\n-        u\'name\': \'French (Belgium)\',\n-        u\'flag\': u\'/++resource++country-flags/be.gif\',\n+    u"fr-be": {\n+        u"name": "French (Belgium)",\n+        u"flag": u"/++resource++country-flags/be.gif",\n     },\n-    u\'fr-bf\': {\n-        u\'name\': \'French (Burkina Faso)\',\n-        u\'flag\': u\'/++resource++country-flags/bf.gif\',\n+    u"fr-bf": {\n+        u"name": "French (Burkina Faso)",\n+        u"flag": u"/++resource++country-flags/bf.gif",\n     },\n-    u\'fr-bi\': {\n-        u\'name\': \'French (Burundi)\',\n-        u\'flag\': u\'/++resource++country-flags/bi.gif\',\n+    u"fr-bi": {\n+        u"name": "French (Burundi)",\n+        u"flag": u"/++resource++country-flags/bi.gif",\n     },\n-    u\'fr-bj\': {\n-        u\'name\': \'French (Benin)\',\n-        u\'flag\': u\'/++resource++country-flags/bj.gif\',\n+    u"fr-bj": {\n+        u"name": "French (Benin)",\n+        u"flag": u"/++resource++country-flags/bj.gif",\n     },\n-    u\'fr-ca\': {\n-        u\'name\': \'French (Canada)\',\n-        u\'flag\': u\'/++resource++country-flags/ca.gif\',\n+    u"fr-ca": {\n+        u"name": "French (Canada)",\n+        u"flag": u"/++resource++country-flags/ca.gif",\n     },\n-    u\'fr-cd\': {\n-        u\'name\': \'French (Democratic Republic of Congo)\',\n-        u\'flag\': u\'/++resource++country-flags/cd.gif\',\n+    u"fr-cd": {\n+        u"name": "French (Democratic Republic of Congo)",\n+        u"flag": u"/++resource++country-flags/cd.gif",\n     },\n-    u\'fr-cf\': {\n-        u\'name\': \'French (Central African Republic)\',\n-        u\'flag\': u\'/++resource++country-flags/cf.gif\',\n+    u"fr-cf": {\n+        u"name": "French (Central African Republic)",\n+        u"flag": u"/++resource++country-flags/cf.gif",\n     },\n-    u\'fr-cg\': {\n-        u\'name\': \'French (Congo)\',\n-        u\'flag\': u\'/++resource++country-flags/cg.gif\',\n+    u"fr-cg": {\n+        u"name": "French (Congo)",\n+        u"flag": u"/++resource++country-flags/cg.gif",\n     },\n-    u\'fr-ch\': {\n-        u\'name\': \'French (Switzerland)\',\n-        u\'flag\': u\'/++resource++country-flags/ch.gif\',\n+    u"fr-ch": {\n+        u"name": "French (Switzerland)",\n+        u"flag": u"/++resource++country-flags/ch.gif",\n     },\n-    u\'fr-ci\': {\n-        u\'name\': \'French (Cote d\\\'Ivoire)\',\n-        u\'flag\': u\'/++resource++country-flags/ci.gif\',\n+    u"fr-ci": {\n+        u"name": "French (Cote d\'Ivoire)",\n+        u"flag": u"/++resource++country-flags/ci.gif",\n     },\n-    u\'fr-cm\': {\n-        u\'name\': \'French (Cameroon)\',\n-        u\'flag\': u\'/++resource++country-flags/cm.gif\',\n+    u"fr-cm": {\n+        u"name": "French (Cameroon)",\n+        u"flag": u"/++resource++country-flags/cm.gif",\n     },\n-    u\'fr-dj\': {\n-        u\'name\': \'French (Djibouti)\',\n-        u\'flag\': u\'/++resource++country-flags/dj.gif\',\n+    u"fr-dj": {\n+        u"name": "French (Djibouti)",\n+        u"flag": u"/++resource++country-flags/dj.gif",\n     },\n-    u\'fr-fr\': {\n-        u\'name\': \'French (France)\',\n-        u\'flag\': u\'/++resource++country-flags/fr.gif\',\n+    u"fr-fr": {\n+        u"name": "French (France)",\n+        u"flag": u"/++resource++country-flags/fr.gif",\n     },\n-    u\'fr-ga\': {\n-        u\'name\': \'French (Gabon)\',\n-        u\'flag\': u\'/++resource++country-flags/ga.gif\',\n+    u"fr-ga": {\n+        u"name": "French (Gabon)",\n+        u"flag": u"/++resource++country-flags/ga.gif",\n     },\n-    u\'fr-gb\': {\n-        u\'name\': \'French (United Kingdom)\',\n-        u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+    u"fr-gb": {\n+        u"name": "French (United Kingdom)",\n+        u"flag": u"/++resource++country-flags/gb.gif",\n     },\n-    u\'fr-gf\': {\n-        u\'name\': \'French (French Guiana)\',\n-        u\'flag\': u\'/++resource++country-flags/gf.gif\',\n+    u"fr-gf": {\n+        u"name": "French (French Guiana)",\n+        u"flag": u"/++resource++country-flags/gf.gif",\n     },\n-    u\'fr-gn\': {\n-        u\'name\': \'French (Guinea)\',\n-        u\'flag\': u\'/++resource++country-flags/gn.gif\',\n+    u"fr-gn": {\n+        u"name": "French (Guinea)",\n+        u"flag": u"/++resource++country-flags/gn.gif",\n     },\n-    u\'fr-gp\': {\n-        u\'name\': \'French (Guadeloupe)\',\n-        u\'flag\': u\'/++resource++country-flags/gp.gif\',\n+    u"fr-gp": {\n+        u"name": "French (Guadeloupe)",\n+        u"flag": u"/++resource++country-flags/gp.gif",\n     },\n-    u\'fr-ht\': {\n-        u\'name\': \'French (Haiti)\',\n-        u\'flag\': u\'/++resource++country-flags/ht.gif\',\n+    u"fr-ht": {\n+        u"name": "French (Haiti)",\n+        u"flag": u"/++resource++country-flags/ht.gif",\n     },\n-    u\'fr-it\': {\n-        u\'name\': \'French (Italy)\',\n-        u\'flag\': u\'/++resource++country-flags/it.gif\',\n+    u"fr-it": {\n+        u"name": "French (Italy)",\n+        u"flag": u"/++resource++country-flags/it.gif",\n     },\n-    u\'fr-km\': {\n-        u\'name\': \'French (Comoros Islands)\',\n-        u\'flag\': u\'/++resource++country-flags/km.gif\',\n+    u"fr-km": {\n+        u"name": "French (Comoros Islands)",\n+        u"flag": u"/++resource++country-flags/km.gif",\n     },\n-    u\'fr-lb\': {\n-        u\'name\': \'French (Lebanon)\',\n-        u\'flag\': u\'/++resource++country-flags/lb.gif\',\n+    u"fr-lb": {\n+        u"name": "French (Lebanon)",\n+        u"flag": u"/++resource++country-flags/lb.gif",\n     },\n-    u\'fr-lu\': {\n-        u\'name\': \'French (Luxembourg)\',\n-        u\'flag\': u\'/++resource++country-flags/lu.gif\',\n+    u"fr-lu": {\n+        u"name": "French (Luxembourg)",\n+        u"flag": u"/++resource++country-flags/lu.gif",\n     },\n-    u\'fr-mc\': {\n-        u\'name\': \'French (Monaco)\',\n-        u\'flag\': u\'/++resource++country-flags/mc.gif\',\n+    u"fr-mc": {\n+        u"name": "French (Monaco)",\n+        u"flag": u"/++resource++country-flags/mc.gif",\n     },\n-    u\'fr-mg\': {\n-        u\'name\': \'French (Madagascar)\',\n-        u\'flag\': u\'/++resource++country-flags/mg.gif\',\n+    u"fr-mg": {\n+        u"name": "French (Madagascar)",\n+        u"flag": u"/++resource++country-flags/mg.gif",\n     },\n-    u\'fr-ml\': {\n-        u\'name\': \'French (Mali)\',\n-        u\'flag\': u\'/++resource++country-flags/ml.gif\',\n+    u"fr-ml": {\n+        u"name": "French (Mali)",\n+        u"flag": u"/++resource++country-flags/ml.gif",\n     },\n-    u\'fr-mq\': {\n-        u\'name\': \'French (Martinique)\',\n-        u\'flag\': u\'/++resource++country-flags/mq.gif\',\n+    u"fr-mq": {\n+        u"name": "French (Martinique)",\n+        u"flag": u"/++resource++country-flags/mq.gif",\n     },\n-    u\'fr-nc\': {\n-        u\'name\': \'French (New Caledonia)\',\n-        u\'flag\': u\'/++resource++country-flags/nc.gif\',\n+    u"fr-nc": {\n+        u"name": "French (New Caledonia)",\n+        u"flag": u"/++resource++country-flags/nc.gif",\n     },\n-    u\'fr-pf\': {\n-        u\'name\': \'French (French Polynesia)\',\n-        u\'flag\': u\'/++resource++country-flags/pf.gif\',\n+    u"fr-pf": {\n+        u"name": "French (French Polynesia)",\n+        u"flag": u"/++resource++country-flags/pf.gif",\n     },\n-    u\'fr-pm\': {\n-        u\'name\': \'French (St. Pierre and Miquelon)\',\n-        u\'flag\': u\'/++resource++country-flags/pm.gif\',\n+    u"fr-pm": {\n+        u"name": "French (St. Pierre and Miquelon)",\n+        u"flag": u"/++resource++country-flags/pm.gif",\n     },\n-    u\'fr-re\': {\n-        u\'name\': \'French (Reunion)\',\n-        u\'flag\': u\'/++resource++country-flags/re.gif\',\n+    u"fr-re": {\n+        u"name": "French (Reunion)",\n+        u"flag": u"/++resource++country-flags/re.gif",\n     },\n-    u\'fr-rw\': {\n-        u\'name\': \'French (Rwanda)\',\n-        u\'flag\': u\'/++resource++country-flags/rw.gif\',\n+    u"fr-rw": {\n+        u"name": "French (Rwanda)",\n+        u"flag": u"/++resource++country-flags/rw.gif",\n     },\n-    u\'fr-sc\': {\n-        u\'name\': \'French (Seychelles)\',\n-        u\'flag\': u\'/++resource++country-flags/sc.gif\',\n+    u"fr-sc": {\n+        u"name": "French (Seychelles)",\n+        u"flag": u"/++resource++country-flags/sc.gif",\n     },\n-    u\'fr-td\': {\n-        u\'name\': \'French (Chad)\',\n-        u\'flag\': u\'/++resource++country-flags/td.gif\',\n+    u"fr-td": {\n+        u"name": "French (Chad)",\n+        u"flag": u"/++resource++country-flags/td.gif",\n     },\n-    u\'fr-tg\': {\n-        u\'name\': \'French (Togo)\',\n-        u\'flag\': u\'/++resource++country-flags/tg.gif\',\n+    u"fr-tg": {\n+        u"name": "French (Togo)",\n+        u"flag": u"/++resource++country-flags/tg.gif",\n     },\n-    u\'fr-vu\': {\n-        u\'name\': \'French (Vanuatu)\',\n-        u\'flag\': u\'/++resource++country-flags/vu.gif\',\n+    u"fr-vu": {\n+        u"name": "French (Vanuatu)",\n+        u"flag": u"/++resource++country-flags/vu.gif",\n     },\n-    u\'fr-wf\': {\n-        u\'name\': \'French (Wallis and Futuna)\',\n-        u\'flag\': u\'/++resource++country-flags/wf.gif\',\n+    u"fr-wf": {\n+        u"name": "French (Wallis and Futuna)",\n+        u"flag": u"/++resource++country-flags/wf.gif",\n     },\n-    u\'fr-yt\': {\n-        u\'name\': \'French (Mayotte)\',\n-        u\'flag\': u\'/++resource++country-flags/yt.gif\',\n+    u"fr-yt": {\n+        u"name": "French (Mayotte)",\n+        u"flag": u"/++resource++country-flags/yt.gif",\n     },\n-    u\'hr-ba\': {\n-        u\'name\': \'Croatian (Bosnia-Herzegovina)\',\n-        u\'flag\': u\'/++resource++country-flags/ba.gif\',\n+    u"hr-ba": {\n+        u"name": "Croatian (Bosnia-Herzegovina)",\n+        u"flag": u"/++resource++country-flags/ba.gif",\n     },\n-    u\'hr-hr\': {\n-        u\'name\': \'Croatian (Croatia)\',\n-        u\'flag\': u\'/++resource++country-flags/hr.gif\',\n-    },\n-    u\'hu-hu\': {\n-        u\'name\': \'Hungarian (Hungary)\',\n-        u\'flag\': u\'/++resource++country-flags/hu.gif\',\n-    },\n-    u\'hu-si\': {\n-        u\'name\': \'Hungarian (Slovenia)\',\n-        u\'flag\': u\'/++resource++country-flags/hu.gif\',\n-    },\n-    u\'it-ch\': {\n-        u\'name\': \'Italian (Switzerland)\',\n-        u\'flag\': u\'/++resource++country-flags/it.gif\',\n-    },\n-    u\'it-hr\': {\n-        u\'name\': \'Italian (Croatia)\',\n-        u\'flag\': u\'/++resource++country-flags/it.gif\',\n-    },\n-    u\'it-it\': {\n-        u\'name\': \'Italian (Italy)\',\n-        u\'flag\': u\'/++resource++country-flags/it.gif\',\n-    },\n-    u\'it-si\': {\n-        u\'name\': \'Italian (Slovenia)\',\n-        u\'flag\': u\'/++resource++country-flags/it.gif\',\n-    },\n-    u\'it-sm\': {\n-        u\'name\': \'Italian (San Marino)\',\n-        u\'flag\': u\'/++resource++country-flags/sm.gif\',\n-    },\n-    u\'ko-kp\': {\n-        u\'name\': \'Korean (Korea, North)\',\n-        u\'flag\': u\'/++resource++country-flags/kp.gif\',\n-    },\n-    u\'ko-kr\': {\n-        u\'name\': \'Korean (Korea, South)\',\n-        u\'flag\': u\'/++resource++country-flags/kr.gif\',\n-    },\n-    u\'ln-cd\': {\n-        u\'name\': \'Lingala (Democratic Republic of Congo)\',\n-        u\'flag\': u\'/++resource++country-flags/cd.gif\',\n-    },\n-    u\'ln-cg\': {\n-        u\'name\': \'Lingala (Congo)\',\n-        u\'flag\': u\'/++resource++country-flags/cg.gif\',\n-    },\n-    u\'ms-bn\': {\n-        u\'name\': \'Malay (Brunei)\',\n-        u\'flag\': u\'/++resource++country-flags/bn.gif\',\n-    },\n-    u\'ms-my\': {\n-        u\'name\': \'Malay (Malaysia)\',\n-        u\'flag\': u\'/++resource++country-flags/my.gif\',\n-    },\n-    u\'ms-sg\': {\n-        u\'name\': \'Malay (Singapore)\',\n-        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n-    },\n-    u\'nl-an\': {\n-        u\'name\': \'Dutch (Netherlands Antilles)\',\n-        u\'flag\': u\'/++resource++country-flags/an.gif\',\n-    },\n-    u\'nl-aw\': {\n-        u\'name\': \'Dutch (Aruba)\',\n-        u\'flag\': u\'/++resource++country-flags/aw.gif\',\n-    },\n-    u\'nl-be\': {\n-        u\'name\': \'Dutch (Belgium)\',\n-        u\'flag\': u\'/++resource++country-flags/be.gif\',\n-    },\n-    u\'nl-nl\': {\n-        u\'name\': \'Dutch (Netherlands)\',\n-        u\'flag\': u\'/++resource++country-flags/nl.gif\',\n-    },\n-    u\'nl-sr\': {\n-        u\'name\': \'Dutch (Suriname)\',\n-        u\'flag\': u\'/++resource++country-flags/sr.gif\',\n-    },\n-    u\'pt-ao\': {\n-        u\'name\': \'Portuguese (Angola)\',\n-        u\'native\': \'Portugu\xc3\xaas (Angola)\',\n-        u\'flag\': u\'/++resource++country-flags/ao.gif\',\n-    },\n-    u\'pt-br\': {\n-        u\'name\': \'Portuguese (Brazil)\',\n-        u\'native\': \'Portugu\xc3\xaas (Brasil)\',\n-        u\'flag\': u\'/++resource++country-flags/br.gif\',\n-    },\n-    u\'pt-cv\': {\n-        u\'name\': \'Portuguese (Ilhas Cabo Verde)\',\n-        u\'native\': \'Portugu\xc3\xaas (Cabo Verde)\',\n-        u\'flag\': u\'/++resource++country-flags/cv.gif\',\n-    },\n-    u\'pt-gw\': {\n-        u\'name\': \'Portuguese (Guin\xc3\xa9-Bissau)\',\n-        u\'native\': \'Portugu\xc3\xaas (Guin\xc3\xa9-Bissau)\',\n-        u\'flag\': u\'/++resource++country-flags/gw.gif\',\n-    },\n-    u\'pt-mz\': {\n-        u\'name\': \'Portuguese (Mo\xc3\xa7ambique)\',\n-        u\'native\': \'Portugu\xc3\xaas (Mo\xc3\xa7ambique)\',\n-        u\'flag\': u\'/++resource++country-flags/mz.gif\',\n-    },\n-    u\'pt-pt\': {\n-        u\'name\': \'Portuguese (Portugal)\',\n-        u\'native\': \'Portugu\xc3\xaas (Portugal)\',\n-        u\'flag\': u\'/++resource++country-flags/pt.gif\',\n-    },\n-    u\'pt-st\': {\n-        u\'name\': \'Portuguese (S\xc3\xa3o Tom\xc3\xa9 e Pr\xc3\xadncipe)\',\n-        u\'native\': \'Portugu\xc3\xaas (S\xc3\xa3o Tom\xc3\xa9 e Pr\xc3\xadncipe)\',\n-        u\'flag\': u\'/++resource++country-flags/st.gif\',\n-    },\n-    u\'sd-in\': {\n-        u\'name\': \'Sindhi (India)\',\n-        u\'flag\': u\'/++resource++country-flags/in.gif\',\n-    },\n-    u\'sd-pk\': {\n-        u\'name\': \'Sindhi (Pakistan)\',\n-        u\'flag\': u\'/++resource++country-flags/pk.gif\',\n-    },\n-    u\'sr-ba\': {\n-        u\'name\': \'Serbian (Bosnia-Herzegovina)\',\n-        u\'flag\': u\'/++resource++country-flags/ba.gif\',\n-    },\n-    u\'ss-sz\': {\n-        u\'name\': \'Swati (Swaziland)\',\n-        u\'flag\': u\'/++resource++country-flags/sz.gif\',\n-    },\n-    u\'ss-za\': {\n-        u\'name\': \'Swati (South Africa)\',\n-        u\'flag\': u\'/++resource++country-flags/za.gif\',\n-    },\n-    u\'sv-fi\': {\n-        u\'name\': \'Swedish (Finland)\',\n-        u\'flag\': u\'/++resource++country-flags/se.gif\',\n-    },\n-    u\'sv-se\': {\n-        u\'name\': \'Swedish (Sweden)\',\n-        u\'flag\': u\'/++resource++country-flags/se.gif\',\n-    },\n-    u\'sw-ke\': {\n-        u\'name\': \'Swahili (Kenya)\',\n-        u\'flag\': u\'/++resource++country-flags/ke.gif\',\n-    },\n-    u\'sw-tz\': {\n-        u\'name\': \'Swahili (Tanzania)\',\n-        u\'flag\': u\'/++resource++country-flags/tz.gif\',\n-    },\n-    u\'ta-in\': {\n-        u\'name\': \'Tamil (India)\',\n-        u\'flag\': u\'/++resource++country-flags/in.gif\',\n-    },\n-    u\'ta-sg\': {\n-        u\'name\': \'Tamil (Singapore)\',\n-        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n-    },\n-    u\'tn-bw\': {\n-        u\'name\': \'Tswana (Botswana)\',\n-        u\'flag\': u\'/++resource++country-flags/bw.gif\',\n-    },\n-    u\'tn-za\': {\n-        u\'name\': \'Tswana (South Africa)\',\n-        u\'flag\': u\'/++resource++country-flags/za.gif\',\n-    },\n-    u\'tr-bg\': {\n-        u\'name\': \'Turkish (Bulgaria)\',\n-        u\'flag\': u\'/++resource++country-flags/tr.gif\',\n-    },\n-    u\'tr-cy\': {\n-        u\'name\': \'Turkish (Cyprus)\',\n-        u\'flag\': u\'/++resource++country-flags/tr.gif\',\n-    },\n-    u\'tr-tr\': {\n-        u\'name\': \'Turkish (Turkey)\',\n-        u\'flag\': u\'/++resource++country-flags/tr.gif\',\n-    },\n-    u\'ur-in\': {\n-        u\'name\': \'Urdu (India)\',\n-        u\'flag\': u\'/++resource++country-flags/in.gif\',\n-    },\n-    u\'ur-pk\': {\n-        u\'name\': \'Urdu (Pakistan)\',\n-        u\'flag\': u\'/++resource++country-flags/pk.gif\',\n-    },\n-    u\'zh-cn\': {\n-        u\'name\': \'Chinese (China)\',\n-        u\'native\': \'\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87(\xe4\xb8\xad\xe5\x9b\xbd)\',\n-        u\'flag\': u\'/++resource++country-flags/cn.gif\',\n-    },\n-    u\'zh-hk\': {\n-        u\'name\': \'Chinese (Hongkong)\',\n-        u\'native\': \'\xe7\xb9\x81\xe9\xab\x94\xe4\xb8\xad\xe6\x96\x87(\xe9\xa6\x99\xe6\xb8\xaf)\',\n-        u\'flag\': u\'/++resource++country-flags/hk.gif\',\n-    },\n-    u\'zh-sg\': {\n-        u\'name\': \'Chinese (Singapore)\',\n-        u\'native\': \'\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87(\xe6\x96\xb0\xe5\x8a\xa0\xe5\x9d\xa1)\',\n-        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n-    },\n-    u\'zh-tw\': {\n-        u\'name\': \'Chinese (Taiwan)\',\n-        u\'native\': \'\xe7\xb9\x81\xe9\xab\x94\xe4\xb8\xad\xe6\x96\x87(\xe8\x87\xba\xe7\x81\xa3)\',\n-        u\'flag\': u\'/++resource++country-flags/tw.gif\',\n+    u"hr-hr": {\n+        u"name": "Croatian (Croatia)",\n+        u"flag": u"/++resource++country-flags/hr.gif",\n+    },\n+    u"hu-hu": {\n+        u"name": "Hungarian (Hungary)",\n+        u"flag": u"/++resource++country-flags/hu.gif",\n+    },\n+    u"hu-si": {\n+        u"name": "Hungarian (Slovenia)",\n+        u"flag": u"/++resource++country-flags/hu.gif",\n+    },\n+    u"it-ch": {\n+        u"name": "Italian (Switzerland)",\n+        u"flag": u"/++resource++country-flags/it.gif",\n+    },\n+    u"it-hr": {\n+        u"name": "Italian (Croatia)",\n+        u"flag": u"/++resource++country-flags/it.gif",\n+    },\n+    u"it-it": {\n+        u"name": "Italian (Italy)",\n+        u"flag": u"/++resource++country-flags/it.gif",\n+    },\n+    u"it-si": {\n+        u"name": "Italian (Slovenia)",\n+        u"flag": u"/++resource++country-flags/it.gif",\n+    },\n+    u"it-sm": {\n+        u"name": "Italian (San Marino)",\n+        u"flag": u"/++resource++country-flags/sm.gif",\n+    },\n+    u"ko-kp": {\n+        u"name": "Korean (Korea, North)",\n+        u"flag": u"/++resource++country-flags/kp.gif",\n+    },\n+    u"ko-kr": {\n+        u"name": "Korean (Korea, South)",\n+        u"flag": u"/++resource++country-flags/kr.gif",\n+    },\n+    u"ln-cd": {\n+        u"name": "Lingala (Democratic Republic of Congo)",\n+        u"flag": u"/++resource++country-flags/cd.gif",\n+    },\n+    u"ln-cg": {\n+        u"name": "Lingala (Congo)",\n+        u"flag": u"/++resource++country-flags/cg.gif",\n+    },\n+    u"ms-bn": {\n+        u"name": "Malay (Brunei)",\n+        u"flag": u"/++resource++country-flags/bn.gif",\n+    },\n+    u"ms-my": {\n+        u"name": "Malay (Malaysia)",\n+        u"flag": u"/++resource++country-flags/my.gif",\n+    },\n+    u"ms-sg": {\n+        u"name": "Malay (Singapore)",\n+        u"flag": u"/++resource++country-flags/sg.gif",\n+    },\n+    u"nl-an": {\n+        u"name": "Dutch (Netherlands Antilles)",\n+        u"flag": u"/++resource++country-flags/an.gif",\n+    },\n+    u"nl-aw": {\n+        u"name": "Dutch (Aruba)",\n+        u"flag": u"/++resource++country-flags/aw.gif",\n+    },\n+    u"nl-be": {\n+        u"name": "Dutch (Belgium)",\n+        u"flag": u"/++resource++country-flags/be.gif",\n+    },\n+    u"nl-nl": {\n+        u"name": "Dutch (Netherlands)",\n+        u"flag": u"/++resource++country-flags/nl.gif",\n+    },\n+    u"nl-sr": {\n+        u"name": "Dutch (Suriname)",\n+        u"flag": u"/++resource++country-flags/sr.gif",\n+    },\n+    u"pt-ao": {\n+        u"name": "Portuguese (Angola)",\n+        u"native": "Portugu\xc3\xaas (Angola)",\n+        u"flag": u"/++resource++country-flags/ao.gif",\n+    },\n+    u"pt-br": {\n+        u"name": "Portuguese (Brazil)",\n+        u"native": "Portugu\xc3\xaas (Brasil)",\n+        u"flag": u"/++resource++country-flags/br.gif",\n+    },\n+    u"pt-cv": {\n+        u"name": "Portuguese (Ilhas Cabo Verde)",\n+        u"native": "Portugu\xc3\xaas (Cabo Verde)",\n+        u"flag": u"/++resource++country-flags/cv.gif",\n+    },\n+    u"pt-gw": {\n+        u"name": "Portuguese (Guin\xc3\xa9-Bissau)",\n+        u"native": "Portugu\xc3\xaas (Guin\xc3\xa9-Bissau)",\n+        u"flag": u"/++resource++country-flags/gw.gif",\n+    },\n+    u"pt-mz": {\n+        u"name": "Portuguese (Mo\xc3\xa7ambique)",\n+        u"native": "Portugu\xc3\xaas (Mo\xc3\xa7ambique)",\n+        u"flag": u"/++resource++country-flags/mz.gif",\n+    },\n+    u"pt-pt": {\n+        u"name": "Portuguese (Portugal)",\n+        u"native": "Portugu\xc3\xaas (Portugal)",\n+        u"flag": u"/++resource++country-flags/pt.gif",\n+    },\n+    u"pt-st": {\n+        u"name": "Portuguese (S\xc3\xa3o Tom\xc3\xa9 e Pr\xc3\xadncipe)",\n+        u"native": "Portugu\xc3\xaas (S\xc3\xa3o Tom\xc3\xa9 e Pr\xc3\xadncipe)",\n+        u"flag": u"/++resource++country-flags/st.gif",\n+    },\n+    u"sd-in": {\n+        u"name": "Sindhi (India)",\n+        u"flag": u"/++resource++country-flags/in.gif",\n+    },\n+    u"sd-pk": {\n+        u"name": "Sindhi (Pakistan)",\n+        u"flag": u"/++resource++country-flags/pk.gif",\n+    },\n+    u"sr-ba": {\n+        u"name": "Serbian (Bosnia-Herzegovina)",\n+        u"flag": u"/++resource++country-flags/ba.gif",\n+    },\n+    u"ss-sz": {\n+        u"name": "Swati (Swaziland)",\n+        u"flag": u"/++resource++country-flags/sz.gif",\n+    },\n+    u"ss-za": {\n+        u"name": "Swati (South Africa)",\n+        u"flag": u"/++resource++country-flags/za.gif",\n+    },\n+    u"sv-fi": {\n+        u"name": "Swedish (Finland)",\n+        u"flag": u"/++resource++country-flags/se.gif",\n+    },\n+    u"sv-se": {\n+        u"name": "Swedish (Sweden)",\n+        u"flag": u"/++resource++country-flags/se.gif",\n+    },\n+    u"sw-ke": {\n+        u"name": "Swahili (Kenya)",\n+        u"flag": u"/++resource++country-flags/ke.gif",\n+    },\n+    u"sw-tz": {\n+        u"name": "Swahili (Tanzania)",\n+        u"flag": u"/++resource++country-flags/tz.gif",\n+    },\n+    u"ta-in": {\n+        u"name": "Tamil (India)",\n+        u"flag": u"/++resource++country-flags/in.gif",\n+    },\n+    u"ta-sg": {\n+        u"name": "Tamil (Singapore)",\n+        u"flag": u"/++resource++country-flags/sg.gif",\n+    },\n+    u"tn-bw": {\n+        u"name": "Tswana (Botswana)",\n+        u"flag": u"/++resource++country-flags/bw.gif",\n+    },\n+    u"tn-za": {\n+        u"name": "Tswana (South Africa)",\n+        u"flag": u"/++resource++country-flags/za.gif",\n+    },\n+    u"tr-bg": {\n+        u"name": "Turkish (Bulgaria)",\n+        u"flag": u"/++resource++country-flags/tr.gif",\n+    },\n+    u"tr-cy": {\n+        u"name": "Turkish (Cyprus)",\n+        u"flag": u"/++resource++country-flags/tr.gif",\n+    },\n+    u"tr-tr": {\n+        u"name": "Turkish (Turkey)",\n+        u"flag": u"/++resource++country-flags/tr.gif",\n+    },\n+    u"ur-in": {\n+        u"name": "Urdu (India)",\n+        u"flag": u"/++resource++country-flags/in.gif",\n+    },\n+    u"ur-pk": {\n+        u"name": "Urdu (Pakistan)",\n+        u"flag": u"/++resource++country-flags/pk.gif",\n+    },\n+    u"zh-cn": {\n+        u"name": "Chinese (China)",\n+        u"native": "\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87(\xe4\xb8\xad\xe5\x9b\xbd)",\n+        u"flag": u"/++resource++country-flags/cn.gif",\n+    },\n+    u"zh-hk": {\n+        u"name": "Chinese (Hongkong)",\n+        u"native": "\xe7\xb9\x81\xe9\xab\x94\xe4\xb8\xad\xe6\x96\x87(\xe9\xa6\x99\xe6\xb8\xaf)",\n+        u"flag": u"/++resource++country-flags/hk.gif",\n+    },\n+    u"zh-sg": {\n+        u"name": "Chinese (Singapore)",\n+        u"native": "\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87(\xe6\x96\xb0\xe5\x8a\xa0\xe5\x9d\xa1)",\n+        u"flag": u"/++resource++country-flags/sg.gif",\n+    },\n+    u"zh-tw": {\n+        u"name": "Chinese (Taiwan)",\n+        u"native": "\xe7\xb9\x81\xe9\xab\x94\xe4\xb8\xad\xe6\x96\x87(\xe8\x87\xba\xe7\x81\xa3)",\n+        u"flag": u"/++resource++country-flags/tw.gif",\n     },\n }\n \n # convert the utf-8 encoded values to unicode\n for code in _combinedlanguagelist:\n     value = _combinedlanguagelist[code]\n-    if u\'name\' in value:\n+    if u"name" in value:\n         if six.PY3:\n-            value[u\'name\'] = value[u\'name\']\n+            value[u"name"] = value[u"name"]\n         else:\n-            value[u\'name\'] = unicode(value[u\'name\'], \'utf-8\')\n-    if u\'native\' in value:\n+            value[u"name"] = unicode(value[u"name"], "utf-8")\n+    if u"native" in value:\n         if six.PY3:\n-            value[u\'native\'] = value[u\'native\']\n+            value[u"native"] = value[u"native"]\n         else:\n-            value[u\'native\'] = unicode(value[u\'native\'], \'utf-8\')\n+            value[u"native"] = unicode(value[u"native"], "utf-8")\ndiff --git a/plone/i18n/locales/tests/base.py b/plone/i18n/locales/tests/base.py\nindex 2523647..9163d88 100644\n--- a/plone/i18n/locales/tests/base.py\n+++ b/plone/i18n/locales/tests/base.py\n@@ -8,15 +8,15 @@ def setUp():\n     setUp()\n     import zope.component\n \n-    XMLConfig(\'meta.zcml\', zope.component)()\n+    XMLConfig("meta.zcml", zope.component)()\n \n     import zope.browserresource\n \n-    XMLConfig(\'meta.zcml\', zope.browserresource)()\n+    XMLConfig("meta.zcml", zope.browserresource)()\n \n     import plone.i18n.locales\n \n-    XMLConfig(\'configure.zcml\', plone.i18n.locales)()\n+    XMLConfig("configure.zcml", plone.i18n.locales)()\n \n \n def tearDown():\ndiff --git a/plone/i18n/locales/tests/test_cctlds.py b/plone/i18n/locales/tests/test_cctlds.py\nindex 1a38f86..5d85b42 100644\n--- a/plone/i18n/locales/tests/test_cctlds.py\n+++ b/plone/i18n/locales/tests/test_cctlds.py\n@@ -21,9 +21,9 @@ def _makeOne(self):\n         return queryUtility(ICcTLDInformation)\n \n     def test_interface(self):\n-        from zope.interface.verify import verifyClass\n-        from plone.i18n.locales.interfaces import ICcTLDInformation\n         from plone.i18n.locales.cctld import CcTLDInformation\n+        from plone.i18n.locales.interfaces import ICcTLDInformation\n+        from zope.interface.verify import verifyClass\n \n         self.assertTrue(verifyClass(ICcTLDInformation, CcTLDInformation))\n \ndiff --git a/plone/i18n/locales/tests/test_countries.py b/plone/i18n/locales/tests/test_countries.py\nindex 12ac5ef..198d8d6 100644\n--- a/plone/i18n/locales/tests/test_countries.py\n+++ b/plone/i18n/locales/tests/test_countries.py\n@@ -15,15 +15,15 @@ def tearDown(self):\n         tearDown()\n \n     def _makeOne(self):\n-        from zope.component import queryUtility\n         from plone.i18n.locales.interfaces import ICountryAvailability\n+        from zope.component import queryUtility\n \n         return queryUtility(ICountryAvailability)\n \n     def test_interface(self):\n-        from zope.interface.verify import verifyClass\n-        from plone.i18n.locales.interfaces import ICountryAvailability\n         from plone.i18n.locales.countries import CountryAvailability\n+        from plone.i18n.locales.interfaces import ICountryAvailability\n+        from zope.interface.verify import verifyClass\n \n         self.assertTrue(verifyClass(ICountryAvailability, CountryAvailability))\n \ndiff --git a/plone/i18n/locales/tests/test_languages.py b/plone/i18n/locales/tests/test_languages.py\nindex 0d2fafe..e4f2b6c 100644\n--- a/plone/i18n/locales/tests/test_languages.py\n+++ b/plone/i18n/locales/tests/test_languages.py\n@@ -5,9 +5,9 @@\n \n class TestInterfaces(unittest.TestCase):\n     def test_interface(self):\n-        from zope.interface.verify import verifyClass\n         from plone.i18n.locales.interfaces import ILanguageAvailability\n         from plone.i18n.locales.languages import LanguageAvailability\n+        from zope.interface.verify import verifyClass\n \n         self.assert_(verifyClass(ILanguageAvailability, LanguageAvailability))\n \n@@ -84,8 +84,8 @@ def test_get_language_listing(self):\n \n class TestContentLanguageAvailability(BaseTestCase, unittest.TestCase):\n     def _makeOne(self):\n-        from zope.component import queryUtility\n         from plone.i18n.locales.interfaces import IContentLanguageAvailability\n+        from zope.component import queryUtility\n \n         return queryUtility(IContentLanguageAvailability)\n \n@@ -94,16 +94,14 @@ def test_interface(self):\n         from plone.i18n.locales.languages import ContentLanguageAvailability\n \n         self.assertTrue(\n-            self._verify(\n-                IContentLanguageAvailability, ContentLanguageAvailability\n-            )\n+            self._verify(IContentLanguageAvailability, ContentLanguageAvailability)\n         )\n \n \n class TestMetadataLanguageAvailability(BaseTestCase, unittest.TestCase):\n     def _makeOne(self):\n-        from zope.component import queryUtility\n         from plone.i18n.locales.interfaces import IMetadataLanguageAvailability\n+        from zope.component import queryUtility\n \n         return queryUtility(IMetadataLanguageAvailability)\n \n@@ -112,7 +110,5 @@ def test_interface(self):\n         from plone.i18n.locales.languages import MetadataLanguageAvailability\n \n         self.assertTrue(\n-            self._verify(\n-                IMetadataLanguageAvailability, MetadataLanguageAvailability\n-            )\n+            self._verify(IMetadataLanguageAvailability, MetadataLanguageAvailability)\n         )\ndiff --git a/plone/i18n/negotiate/negotiate.py b/plone/i18n/negotiate/negotiate.py\nindex 74ee6b2..93a50eb 100644\n--- a/plone/i18n/negotiate/negotiate.py\n+++ b/plone/i18n/negotiate/negotiate.py\n@@ -33,11 +33,9 @@ def __init__(self, site, request):\n \n         if useCookie and not (authOnly and tool.isAnonymousUser()):\n             # If we are using the cookie stuff we provide the setter here\n-            set_language = request.get(\'set_language\', None)\n+            set_language = request.get("set_language", None)\n             if set_language:\n-                langsCookie = tool.setLanguageCookie(\n-                    set_language, request=request\n-                )\n+                langsCookie = tool.setLanguageCookie(set_language, request=request)\n             else:\n                 # Get from cookie\n                 langsCookie = tool.getLanguageCookie(request)\ndiff --git a/plone/i18n/negotiate/ptsnegotiator.py b/plone/i18n/negotiate/ptsnegotiator.py\nindex 8c4f17a..78c4e23 100644\n--- a/plone/i18n/negotiate/ptsnegotiator.py\n+++ b/plone/i18n/negotiate/ptsnegotiator.py\n@@ -11,34 +11,32 @@\n _langPrefsRegistry = {}\n \n \n-def getAcceptedHelper(self, request, kind=\'language\'):\n+def getAcceptedHelper(self, request, kind="language"):\n     """this is patched on prefs classes which don\'t define the getAccepted\n     classes but define the deprecated getPreferredLanguages method"""\n     return self.getPreferredLanguages()\n \n \n-def registerLangPrefsMethod(prefs, kind=\'language\'):\n+def registerLangPrefsMethod(prefs, kind="language"):\n     # check for correct format of prefs\n     if not isinstance(prefs, dict):\n-        prefs = {\'klass\': prefs, \'priority\': 0}\n+        prefs = {"klass": prefs, "priority": 0}\n     # add chain for kind\n     if kind not in _langPrefsRegistry:\n         _langPrefsRegistry[kind] = []\n     # backwards compatibilty monkey patch\n-    if not hasattr(prefs[\'klass\'], \'getAccepted\'):\n-        prefs[\'klass\'].getAccepted = getAcceptedHelper\n+    if not hasattr(prefs["klass"], "getAccepted"):\n+        prefs["klass"].getAccepted = getAcceptedHelper\n     # add this pref helper\n     _langPrefsRegistry[kind].append(prefs)\n     # sort by priority\n-    _langPrefsRegistry[kind].sort(\n-        key=operator.itemgetter(\'priority\'), reverse=True\n-    )\n+    _langPrefsRegistry[kind].sort(key=operator.itemgetter("priority"), reverse=True)\n \n \n-def getLangPrefs(env, kind=\'language\'):\n+def getLangPrefs(env, kind="language"):\n     """get higest prio method for kind"""\n     for pref in _langPrefsRegistry[kind]:\n-        handler = pref[\'klass\'](env)\n+        handler = pref["klass"](env)\n         accepted = handler.getAccepted(env, kind)\n         if accepted:\n             return accepted\n@@ -47,7 +45,7 @@ def getLangPrefs(env, kind=\'language\'):\n \n def lang_normalize(lang):\n     """filter"""\n-    return lang.replace(\'_\', \'-\')\n+    return lang.replace("_", "-")\n \n \n def str_lower(aString):\n@@ -62,11 +60,11 @@ def str_strip(aString):\n \n def type_accepted(available, preferred):\n     # ex: preferred is text/* and available is text/html\n-    av = available.split(\'/\')\n-    pr = preferred.split(\'/\')\n+    av = available.split("/")\n+    pr = preferred.split("/")\n     if len(av) < 2 or len(pr) < 2:\n         return False\n-    return pr[1] == \'*\' and pr[0] == av[0]\n+    return pr[1] == "*" and pr[0] == av[0]\n \n \n def lang_accepted(available, preferred):\n@@ -81,40 +79,40 @@ def _false(*a, **kw):\n class BrowserAccept(object):\n \n     filters = {\n-        \'content-type\': (str_lower,),\n-        \'language\': (str_lower, lang_normalize, str_strip),\n+        "content-type": (str_lower,),\n+        "language": (str_lower, lang_normalize, str_strip),\n     }\n \n     def __init__(self, request):\n         pass\n \n-    def getAccepted(self, request, kind=\'content-type\'):\n-        custom_name = (\'user_%s\' % kind).lower()\n-        if kind == \'content-type\':\n-            header_name = (\'HTTP_ACCEPT\').upper()\n+    def getAccepted(self, request, kind="content-type"):\n+        custom_name = ("user_%s" % kind).lower()\n+        if kind == "content-type":\n+            header_name = ("HTTP_ACCEPT").upper()\n         else:\n-            header_name = (\'HTTP_ACCEPT_%s\' % kind).upper()\n+            header_name = ("HTTP_ACCEPT_%s" % kind).upper()\n \n-        user_accepts = request.get(custom_name, \'\')\n-        http_accepts = request.get(header_name, \'\')\n+        user_accepts = request.get(custom_name, "")\n+        http_accepts = request.get(header_name, "")\n \n         if (\n             user_accepts\n             and http_accepts\n-            and user_accepts == request.cookies.get(\'custom_name\')\n+            and user_accepts == request.cookies.get("custom_name")\n         ):\n-            user_accepts = [a.strip() for a in user_accepts.split(\',\')]\n-            http_accepts = [a.strip() for a in http_accepts.split(\',\')]\n+            user_accepts = [a.strip() for a in user_accepts.split(",")]\n+            http_accepts = [a.strip() for a in http_accepts.split(",")]\n             for l in user_accepts:\n                 if l not in http_accepts:\n                     req_accepts = user_accepts + http_accepts\n                     break\n                 else:\n                     # user_accepts is a subset of http_accepts\n-                    request.RESPONSE.expireCookie(\'custom_name\', path=\'/\')\n+                    request.RESPONSE.expireCookie("custom_name", path="/")\n                     req_accepts = http_accepts\n         else:\n-            req_accepts = (user_accepts + \',\' + http_accepts).split(\',\')\n+            req_accepts = (user_accepts + "," + http_accepts).split(",")\n \n         accepts = []\n         i = 0\n@@ -129,14 +127,14 @@ def getAccepted(self, request, kind=\'content-type\'):\n             for normalizer in filters:\n                 accept = normalizer(accept)\n             if accept:\n-                ll = accept.split(\';\', 2)\n+                ll = accept.split(";", 2)\n                 quality = []\n \n                 if len(ll) == 2:\n                     try:\n                         q = l[1]\n-                        if q.startswith(\'q=\'):\n-                            q = q.split(\'=\', 2)[1]\n+                        if q.startswith("q="):\n+                            q = q.split("=", 2)[1]\n                             quality = float(q)\n                     except Exception:\n                         pass\n@@ -160,10 +158,10 @@ class CookieAccept(object):\n     def __init__(self, request):\n         pass\n \n-    def getAccepted(self, request, kind=\'language\'):\n-        if not hasattr(request, \'cookies\'):\n+    def getAccepted(self, request, kind="language"):\n+        if not hasattr(request, "cookies"):\n             return ()\n-        language = request.cookies.get(\'pts_language\', None)\n+        language = request.cookies.get("pts_language", None)\n         if language:\n             if isinstance(language, tuple):\n                 return language\n@@ -185,7 +183,7 @@ def setCookieLanguage(request, lang, REQUEST=None):\n     if isinstance(lang, tuple):\n         lang = lang[1]\n     lang = str_lower(lang_normalize(lang))\n-    request.RESPONSE.setCookie(\'pts_language\', lang)\n+    request.RESPONSE.setCookie("pts_language", lang)\n     if REQUEST:\n         REQUEST.RESPONSE.redirect(REQUEST.URL0)\n     else:\n@@ -195,18 +193,16 @@ def setCookieLanguage(request, lang, REQUEST=None):\n # higher number = higher priority\n # if a acceptor returns a false value (() or None) then the next acceptor\n # in the chain is queried\n-registerLangPrefsMethod({\'klass\': BrowserAccept, \'priority\': 10}, \'language\')\n-registerLangPrefsMethod({\'klass\': CookieAccept, \'priority\': 40}, \'language\')\n-registerLangPrefsMethod(\n-    {\'klass\': BrowserAccept, \'priority\': 10}, \'content-type\'\n-)\n+registerLangPrefsMethod({"klass": BrowserAccept, "priority": 10}, "language")\n+registerLangPrefsMethod({"klass": CookieAccept, "priority": 40}, "language")\n+registerLangPrefsMethod({"klass": BrowserAccept, "priority": 10}, "content-type")\n \n \n class Negotiator(object):\n \n-    tests = {\'content-type\': type_accepted, \'language\': lang_accepted}\n+    tests = {"content-type": type_accepted, "language": lang_accepted}\n \n-    def negotiate(self, choices, request, kind=\'content-type\'):\n+    def negotiate(self, choices, request, kind="content-type"):\n         choices = tuple(choices)\n         return self._negotiate(choices, request, kind)\n \n@@ -225,17 +221,17 @@ def _negotiate(self, choices, request, kind):\n \n     # backwards compatibility... should be deprecated\n     def getLanguage(self, langs, request):\n-        return self.negotiate(langs, request, \'language\')\n+        return self.negotiate(langs, request, "language")\n \n     def getLanguages(self, request):\n-        return getLangPrefs(request, \'language\')\n+        return getLangPrefs(request, "language")\n \n \n negotiator = Negotiator()\n \n \n def negotiate(langs, request):\n-    return negotiator.negotiate(langs, request, \'language\')\n+    return negotiator.negotiate(langs, request, "language")\n \n \n @implementer(IUserPreferredLanguages)\ndiff --git a/plone/i18n/normalizer/__init__.py b/plone/i18n/normalizer/__init__.py\nindex 821d036..2683114 100644\n--- a/plone/i18n/normalizer/__init__.py\n+++ b/plone/i18n/normalizer/__init__.py\n@@ -18,7 +18,7 @@\n MULTIPLE_DASHES_REGEX = re.compile(r"\\-+")\n EXTRA_DASHES_REGEX = re.compile(r"(^\\-+)|(\\-+$)")\n UNDERSCORE_START_REGEX = re.compile(r"(^_+)(.*)$")\n-LOCALE_SPLIT_REGEX = re.compile(r\'[_-]\')\n+LOCALE_SPLIT_REGEX = re.compile(r"[_-]")\n # Define static constraints\n MAX_LENGTH = 50\n MAX_FILENAME_LENGTH = 1023\n@@ -30,7 +30,7 @@ def cropName(base, maxLength=MAX_LENGTH):\n \n     index = baseLength\n     while index > maxLength:\n-        index = base.rfind(\'-\', 0, index)\n+        index = base.rfind("-", 0, index)\n \n     if index == -1 and baseLength > maxLength:\n         base = base[:maxLength]\n@@ -80,10 +80,10 @@ def normalize(self, text, locale=None, max_length=MAX_LENGTH):\n         # lowercase text\n         text = text.lower()\n \n-        text = IGNORE_REGEX.sub(\'\', text)\n-        text = NON_WORD_REGEX.sub(\'-\', text)\n-        text = MULTIPLE_DASHES_REGEX.sub(\'-\', text)\n-        text = EXTRA_DASHES_REGEX.sub(\'\', text)\n+        text = IGNORE_REGEX.sub("", text)\n+        text = NON_WORD_REGEX.sub("-", text)\n+        text = MULTIPLE_DASHES_REGEX.sub("-", text)\n+        text = EXTRA_DASHES_REGEX.sub("", text)\n \n         return cropName(text, maxLength=max_length)\n \n@@ -129,22 +129,22 @@ def normalize(self, text, locale=None, max_length=MAX_FILENAME_LENGTH):\n             text = m.groups()[1]\n \n         base = text\n-        ext = \'\'\n+        ext = ""\n \n         m = FILENAME_REGEX.match(text)\n         if m is not None:\n             base = m.groups()[0]\n             ext = m.groups()[1]\n \n-        base = IGNORE_REGEX.sub(\'\', base)\n-        base = DANGEROUS_CHARS_REGEX.sub(\'-\', base)\n-        base = EXTRA_DASHES_REGEX.sub(\'\', base)\n-        base = MULTIPLE_DASHES_REGEX.sub(\'-\', base)\n+        base = IGNORE_REGEX.sub("", base)\n+        base = DANGEROUS_CHARS_REGEX.sub("-", base)\n+        base = EXTRA_DASHES_REGEX.sub("", base)\n+        base = MULTIPLE_DASHES_REGEX.sub("-", base)\n \n         base = cropName(base, maxLength=max_length)\n \n-        if ext != \'\':\n-            base = base + \'.\' + ext\n+        if ext != "":\n+            base = base + "." + ext\n \n         return base\n \n@@ -190,23 +190,23 @@ def normalize(self, text, locale=None, max_length=MAX_URL_LENGTH):\n \n         # lowercase text\n         base = text.lower()\n-        ext = \'\'\n+        ext = ""\n \n         m = FILENAME_REGEX.match(base)\n         if m is not None:\n             base = m.groups()[0]\n             ext = m.groups()[1]\n \n-        base = IGNORE_REGEX.sub(\'\', base)\n-        base = NON_WORD_REGEX.sub(\'-\', base)\n-        base = URL_DANGEROUS_CHARS_REGEX.sub(\'-\', base)\n-        base = EXTRA_DASHES_REGEX.sub(\'\', base)\n-        base = MULTIPLE_DASHES_REGEX.sub(\'-\', base)\n+        base = IGNORE_REGEX.sub("", base)\n+        base = NON_WORD_REGEX.sub("-", base)\n+        base = URL_DANGEROUS_CHARS_REGEX.sub("-", base)\n+        base = EXTRA_DASHES_REGEX.sub("", base)\n+        base = MULTIPLE_DASHES_REGEX.sub("-", base)\n \n         base = cropName(base, maxLength=max_length)\n \n-        if ext != \'\':\n-            base = base + \'.\' + ext\n+        if ext != "":\n+            base = base + "." + ext\n \n         return base\n \ndiff --git a/plone/i18n/normalizer/base.py b/plone/i18n/normalizer/base.py\nindex a01f434..25b47fb 100644\n--- a/plone/i18n/normalizer/base.py\n+++ b/plone/i18n/normalizer/base.py\n@@ -1,18 +1,14 @@\n # -*- coding: utf-8 -*-\n from unidecode import unidecode\n+\n import six\n import string\n \n \n # On OpenBSD string.whitespace has a non-standard implementation\n # See http://dev.plone.org/plone/ticket/4704 for details\n-whitespace = \'\'.join([c for c in string.whitespace if ord(c) < 128])\n-allowed = (\n-    string.ascii_letters +\n-    string.digits +\n-    string.punctuation +\n-    whitespace\n-)\n+whitespace = "".join([c for c in string.whitespace if ord(c) < 128])\n+allowed = string.ascii_letters + string.digits + string.punctuation + whitespace\n \n \n def mapUnicode(text, mapping=()):\n@@ -20,7 +16,7 @@ def mapUnicode(text, mapping=()):\n     This method is used for replacement of special characters found in a\n     mapping before baseNormalize is applied.\n     """\n-    res = u\'\'\n+    res = u""\n     for ch in text:\n         ordinal = ord(ch)\n         if ordinal in mapping:\n@@ -36,8 +32,8 @@ def mapUnicode(text, mapping=()):\n def baseNormalize(text):\n     """\n     This method is used for normalization of unicode characters to the base\n-    ASCII letters. \n-    Output is a native string with only ASCII letters, digits, punctuation \n+    ASCII letters.\n+    Output is a native string with only ASCII letters, digits, punctuation\n     and whitespace characters. Case is preserved.\n \n       >>> baseNormalize(123)\n@@ -57,6 +53,6 @@ def baseNormalize(text):\n         # to see. But at least it does not break.\n         text = repr(text)\n     if six.PY2 and not isinstance(text, six.text_type):\n-        text = text.decode(\'ascii\', \'replace\')\n+        text = text.decode("ascii", "replace")\n     text = unidecode(text).strip()\n-    return \'\'.join(filter(lambda c: c in allowed, text))\n+    return "".join(filter(lambda c: c in allowed, text))\ndiff --git a/plone/i18n/normalizer/bg.py b/plone/i18n/normalizer/bg.py\nindex c1bfd10..66094a0 100644\n--- a/plone/i18n/normalizer/bg.py\n+++ b/plone/i18n/normalizer/bg.py\n@@ -7,66 +7,66 @@\n \n # Bulgarian character mapping\n mapping = {\n-    1040: \'A\',\n-    1041: \'B\',\n-    1042: \'V\',\n-    1043: \'G\',\n-    1044: \'D\',\n-    1045: \'E\',\n-    1046: \'ZH\',\n-    1047: \'Z\',\n-    1048: \'I\',\n-    1049: \'Y\',\n-    1050: \'K\',\n-    1051: \'L\',\n-    1052: \'M\',\n-    1053: \'N\',\n-    1054: \'O\',\n-    1055: \'P\',\n-    1056: \'R\',\n-    1057: \'S\',\n-    1058: \'T\',\n-    1059: \'U\',\n-    1060: \'F\',\n-    1061: \'H\',\n-    1062: \'TS\',\n-    1063: \'CH\',\n-    1064: \'SH\',\n-    1065: \'SHT\',\n-    1066: \'A\',\n-    1068: \'Y\',\n-    1070: \'YU\',\n-    1071: \'YA\',\n-    1072: \'a\',\n-    1073: \'b\',\n-    1074: \'v\',\n-    1075: \'g\',\n-    1076: \'d\',\n-    1077: \'e\',\n-    1078: \'zh\',\n-    1079: \'z\',\n-    1080: \'i\',\n-    1081: \'y\',\n-    1082: \'k\',\n-    1083: \'l\',\n-    1084: \'m\',\n-    1085: \'n\',\n-    1086: \'o\',\n-    1087: \'p\',\n-    1088: \'r\',\n-    1089: \'s\',\n-    1090: \'t\',\n-    1091: \'u\',\n-    1092: \'f\',\n-    1093: \'h\',\n-    1094: \'ts\',\n-    1095: \'ch\',\n-    1096: \'sh\',\n-    1097: \'sht\',\n-    1098: \'a\',\n-    1100: \'y\',\n-    1102: \'yu\',\n-    1103: \'ya\',\n+    1040: "A",\n+    1041: "B",\n+    1042: "V",\n+    1043: "G",\n+    1044: "D",\n+    1045: "E",\n+    1046: "ZH",\n+    1047: "Z",\n+    1048: "I",\n+    1049: "Y",\n+    1050: "K",\n+    1051: "L",\n+    1052: "M",\n+    1053: "N",\n+    1054: "O",\n+    1055: "P",\n+    1056: "R",\n+    1057: "S",\n+    1058: "T",\n+    1059: "U",\n+    1060: "F",\n+    1061: "H",\n+    1062: "TS",\n+    1063: "CH",\n+    1064: "SH",\n+    1065: "SHT",\n+    1066: "A",\n+    1068: "Y",\n+    1070: "YU",\n+    1071: "YA",\n+    1072: "a",\n+    1073: "b",\n+    1074: "v",\n+    1075: "g",\n+    1076: "d",\n+    1077: "e",\n+    1078: "zh",\n+    1079: "z",\n+    1080: "i",\n+    1081: "y",\n+    1082: "k",\n+    1083: "l",\n+    1084: "m",\n+    1085: "n",\n+    1086: "o",\n+    1087: "p",\n+    1088: "r",\n+    1089: "s",\n+    1090: "t",\n+    1091: "u",\n+    1092: "f",\n+    1093: "h",\n+    1094: "ts",\n+    1095: "ch",\n+    1096: "sh",\n+    1097: "sht",\n+    1098: "a",\n+    1100: "y",\n+    1102: "yu",\n+    1103: "ya",\n }\n \n \ndiff --git a/plone/i18n/normalizer/de.py b/plone/i18n/normalizer/de.py\nindex 43c87a8..e7fa57d 100644\n--- a/plone/i18n/normalizer/de.py\n+++ b/plone/i18n/normalizer/de.py\n@@ -17,23 +17,23 @@\n #     8364: Euro sign\n \n mapping = {\n-    196: \'AE\',\n-    198: \'AE\',\n-    214: \'OE\',\n-    220: \'UE\',\n-    223: \'ss\',\n-    224: \'a\',\n-    228: \'ae\',\n-    230: \'ae\',\n-    246: \'oe\',\n-    252: \'ue\',\n-    8222: \'-\',\n-    8220: \'-\',\n-    8218: \'-\',\n-    8216: \'-\',\n-    8211: \'-\',\n-    167: \'-\',\n-    8364: \'euro\',\n+    196: "AE",\n+    198: "AE",\n+    214: "OE",\n+    220: "UE",\n+    223: "ss",\n+    224: "a",\n+    228: "ae",\n+    230: "ae",\n+    246: "oe",\n+    252: "ue",\n+    8222: "-",\n+    8220: "-",\n+    8218: "-",\n+    8216: "-",\n+    8211: "-",\n+    167: "-",\n+    8364: "euro",\n }\n \n \ndiff --git a/plone/i18n/normalizer/el.py b/plone/i18n/normalizer/el.py\nindex b280419..6fbe79c 100644\n--- a/plone/i18n/normalizer/el.py\n+++ b/plone/i18n/normalizer/el.py\n@@ -7,75 +7,75 @@\n \n # Greek character mapping\n mapping = {\n-    902: \'A\',\n-    904: \'E\',\n-    905: \'H\',\n-    906: \'I\',\n-    908: \'O\',\n-    910: \'Y\',\n-    911: \'O\',\n-    912: \'i\',\n-    913: \'A\',\n-    914: \'B\',\n-    915: \'G\',\n-    916: \'D\',\n-    917: \'E\',\n-    918: \'Z\',\n-    919: \'I\',\n-    920: \'Th\',\n-    921: \'I\',\n-    922: \'K\',\n-    923: \'L\',\n-    924: \'M\',\n-    925: \'N\',\n-    926: \'Ks\',\n-    927: \'O\',\n-    928: \'P\',\n-    929: \'R\',\n-    931: \'S\',\n-    932: \'T\',\n-    933: \'Y\',\n-    934: \'F\',\n-    935: \'Ch\',\n-    936: \'Ps\',\n-    937: \'O\',\n-    938: \'I\',\n-    939: \'Y\',\n-    940: \'a\',\n-    941: \'e\',\n-    942: \'i\',\n-    943: \'i\',\n-    944: \'y\',\n-    945: \'a\',\n-    946: \'b\',\n-    947: \'g\',\n-    948: \'d\',\n-    949: \'e\',\n-    950: \'z\',\n-    951: \'i\',\n-    952: \'th\',\n-    953: \'i\',\n-    954: \'k\',\n-    955: \'l\',\n-    956: \'m\',\n-    957: \'n\',\n-    958: \'ks\',\n-    959: \'o\',\n-    960: \'p\',\n-    961: \'r\',\n-    962: \'s\',\n-    963: \'s\',\n-    964: \'t\',\n-    965: \'y\',\n-    966: \'f\',\n-    967: \'ch\',\n-    968: \'ps\',\n-    969: \'o\',\n-    970: \'i\',\n-    971: \'y\',\n-    972: \'o\',\n-    973: \'y\',\n-    974: \'o\',\n+    902: "A",\n+    904: "E",\n+    905: "H",\n+    906: "I",\n+    908: "O",\n+    910: "Y",\n+    911: "O",\n+    912: "i",\n+    913: "A",\n+    914: "B",\n+    915: "G",\n+    916: "D",\n+    917: "E",\n+    918: "Z",\n+    919: "I",\n+    920: "Th",\n+    921: "I",\n+    922: "K",\n+    923: "L",\n+    924: "M",\n+    925: "N",\n+    926: "Ks",\n+    927: "O",\n+    928: "P",\n+    929: "R",\n+    931: "S",\n+    932: "T",\n+    933: "Y",\n+    934: "F",\n+    935: "Ch",\n+    936: "Ps",\n+    937: "O",\n+    938: "I",\n+    939: "Y",\n+    940: "a",\n+    941: "e",\n+    942: "i",\n+    943: "i",\n+    944: "y",\n+    945: "a",\n+    946: "b",\n+    947: "g",\n+    948: "d",\n+    949: "e",\n+    950: "z",\n+    951: "i",\n+    952: "th",\n+    953: "i",\n+    954: "k",\n+    955: "l",\n+    956: "m",\n+    957: "n",\n+    958: "ks",\n+    959: "o",\n+    960: "p",\n+    961: "r",\n+    962: "s",\n+    963: "s",\n+    964: "t",\n+    965: "y",\n+    966: "f",\n+    967: "ch",\n+    968: "ps",\n+    969: "o",\n+    970: "i",\n+    971: "y",\n+    972: "o",\n+    973: "y",\n+    974: "o",\n }\n \n \ndiff --git a/plone/i18n/normalizer/es.py b/plone/i18n/normalizer/es.py\nindex 9ccf4c1..f9eece6 100644\n--- a/plone/i18n/normalizer/es.py\n+++ b/plone/i18n/normalizer/es.py\n@@ -7,31 +7,31 @@\n \n # Spanish character mapping\n mapping = {\n-    192: u\'A\',\n-    193: u\'A\',\n-    200: u\'E\',\n-    201: u\'E\',\n-    204: u\'I\',\n-    205: u\'I\',\n-    210: u\'O\',\n-    211: u\'O\',\n-    217: u\'U\',\n-    218: u\'U\',\n-    220: u\'U\',\n-    209: u\'N\',\n-    199: u\'C\',\n-    224: u\'a\',\n-    225: u\'a\',\n-    232: u\'e\',\n-    233: u\'e\',\n-    236: u\'i\',\n-    237: u\'i\',\n-    242: u\'o\',\n-    243: u\'o\',\n-    249: u\'u\',\n-    250: u\'u\',\n-    241: u\'n\',\n-    231: u\'c\',\n+    192: u"A",\n+    193: u"A",\n+    200: u"E",\n+    201: u"E",\n+    204: u"I",\n+    205: u"I",\n+    210: u"O",\n+    211: u"O",\n+    217: u"U",\n+    218: u"U",\n+    220: u"U",\n+    209: u"N",\n+    199: u"C",\n+    224: u"a",\n+    225: u"a",\n+    232: u"e",\n+    233: u"e",\n+    236: u"i",\n+    237: u"i",\n+    242: u"o",\n+    243: u"o",\n+    249: u"u",\n+    250: u"u",\n+    241: u"n",\n+    231: u"c",\n }\n \n \ndiff --git a/plone/i18n/normalizer/fr.py b/plone/i18n/normalizer/fr.py\nindex 006a385..4804606 100644\n--- a/plone/i18n/normalizer/fr.py\n+++ b/plone/i18n/normalizer/fr.py\n@@ -6,7 +6,7 @@\n \n \n # French character mapping\n-mapping = {339: \'oe\'}\n+mapping = {339: "oe"}\n \n \n @implementer(INormalizer)\ndiff --git a/plone/i18n/normalizer/interfaces.py b/plone/i18n/normalizer/interfaces.py\nindex dcd3779..9c2fc2b 100644\n--- a/plone/i18n/normalizer/interfaces.py\n+++ b/plone/i18n/normalizer/interfaces.py\n@@ -4,43 +4,43 @@\n \n class INormalizer(Interface):\n     """A normalizer can normalize any unicode text string according to a\n-       specific ruleset implemented in the normalizer itself.\n+    specific ruleset implemented in the normalizer itself.\n     """\n \n     def normalize(text, locale=None, max_length=None):\n         """The normalize method takes and input unicode text and an optional\n-           locale string and returns a normalized version of the text.\n-           If the locale is not None the ouput might differ dependent on the\n-           locale. The max_length argument allows you to override the default\n-           values used by the normalizers on a case-by-case basis.\n+        locale string and returns a normalized version of the text.\n+        If the locale is not None the ouput might differ dependent on the\n+        locale. The max_length argument allows you to override the default\n+        values used by the normalizers on a case-by-case basis.\n         """\n \n \n class IIDNormalizer(INormalizer):\n     """An ID normalizer can normalize any unicode string and returns a\n-       version that only contains of ASCII characters allowed in a typical\n-       scripting or programming language id, such as CSS class names or Python\n-       variable names for example.\n+    version that only contains of ASCII characters allowed in a typical\n+    scripting or programming language id, such as CSS class names or Python\n+    variable names for example.\n     """\n \n \n class IFileNameNormalizer(INormalizer):\n     """An file name normalizer can normalize any unicode string and returns a\n-       version that only contains of ASCII characters allowed in a URL while\n-       still preserving whitespace and upper and lower case.\n+    version that only contains of ASCII characters allowed in a URL while\n+    still preserving whitespace and upper and lower case.\n     """\n \n \n class IURLNormalizer(INormalizer):\n     """An URL normalizer can normalize any unicode string and returns a\n-       URL-safe version that only contains of ASCII characters allowed in a\n-       URL.\n+    URL-safe version that only contains of ASCII characters allowed in a\n+    URL.\n     """\n \n \n class IUserPreferredNormalizer(Interface):\n     """An adapter for the HTTPRequest to provide user preferred language\n-       dependent normalization.\n+    dependent normalization.\n     """\n \n     def normalize(text):\n@@ -49,11 +49,11 @@ def normalize(text):\n \n class IUserPreferredFileNameNormalizer(IUserPreferredNormalizer):\n     """An adapter for the HTTPRequest to provide user preferred language\n-       dependent normalization, based on an file name normalizer.\n+    dependent normalization, based on an file name normalizer.\n     """\n \n \n class IUserPreferredURLNormalizer(IUserPreferredNormalizer):\n     """An adapter for the HTTPRequest to provide user preferred language\n-       dependent normalization, based on an URL normalizer.\n+    dependent normalization, based on an URL normalizer.\n     """\ndiff --git a/plone/i18n/normalizer/ja.py b/plone/i18n/normalizer/ja.py\nindex 5c99efc..cdef197 100644\n--- a/plone/i18n/normalizer/ja.py\n+++ b/plone/i18n/normalizer/ja.py\n@@ -2,6 +2,7 @@\n from plone.i18n.normalizer.base import allowed\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n+\n import six\n \n \n@@ -32,7 +33,7 @@ def ja_normalize(text, max_length=MAX_LENGTH):\n     else:\n         exchanged = "".join(_gethashed(text, max_length))\n     if six.PY2:\n-        return exchanged.encode(\'ascii\')\n+        return exchanged.encode("ascii")\n     else:\n         return exchanged\n \ndiff --git a/plone/i18n/normalizer/pl.py b/plone/i18n/normalizer/pl.py\nindex b5c72d1..797fdc6 100644\n--- a/plone/i18n/normalizer/pl.py\n+++ b/plone/i18n/normalizer/pl.py\n@@ -5,7 +5,7 @@\n \n \n # Polish character mapping\n-mapping = {321: \'L\', 322: \'l\'}\n+mapping = {321: "L", 322: "l"}\n \n \n @implementer(INormalizer)\ndiff --git a/plone/i18n/normalizer/pt.py b/plone/i18n/normalizer/pt.py\nindex 14006d0..33caa5f 100644\n--- a/plone/i18n/normalizer/pt.py\n+++ b/plone/i18n/normalizer/pt.py\n@@ -6,32 +6,32 @@\n \n # Portuguese character mapping\n mapping = {\n-    192: u\'A\',\n-    193: u\'A\',\n-    194: u\'A\',\n-    195: u\'A\',\n-    201: u\'E\',\n-    202: u\'E\',\n-    205: u\'I\',\n-    211: u\'O\',\n-    212: u\'O\',\n-    213: u\'O\',\n-    218: u\'U\',\n-    220: u\'U\',\n-    199: u\'C\',\n-    224: u\'a\',\n-    225: u\'a\',\n-    226: u\'a\',\n-    227: u\'a\',\n-    233: u\'e\',\n-    234: u\'e\',\n-    237: u\'i\',\n-    243: u\'o\',\n-    244: u\'o\',\n-    245: u\'o\',\n-    250: u\'u\',\n-    252: u\'u\',\n-    231: u\'c\',\n+    192: u"A",\n+    193: u"A",\n+    194: u"A",\n+    195: u"A",\n+    201: u"E",\n+    202: u"E",\n+    205: u"I",\n+    211: u"O",\n+    212: u"O",\n+    213: u"O",\n+    218: u"U",\n+    220: u"U",\n+    199: u"C",\n+    224: u"a",\n+    225: u"a",\n+    226: u"a",\n+    227: u"a",\n+    233: u"e",\n+    234: u"e",\n+    237: u"i",\n+    243: u"o",\n+    244: u"o",\n+    245: u"o",\n+    250: u"u",\n+    252: u"u",\n+    231: u"c",\n }\n \n \ndiff --git a/plone/i18n/normalizer/ru.py b/plone/i18n/normalizer/ru.py\nindex 1d35782..d8bfff4 100644\n--- a/plone/i18n/normalizer/ru.py\n+++ b/plone/i18n/normalizer/ru.py\n@@ -6,72 +6,72 @@\n \n # Russian character mapping\n mapping = {\n-    1081: \'i\',\n-    1049: \'I\',\n-    1094: \'c\',\n-    1062: \'C\',\n-    1091: \'u\',\n-    1059: \'U\',\n-    1082: \'k\',\n-    1050: \'K\',\n-    1077: \'e\',\n-    1045: \'E\',\n-    1085: \'n\',\n-    1053: \'N\',\n-    1075: \'g\',\n-    1043: \'G\',\n-    1096: \'sh\',\n-    1064: \'SH\',\n-    1097: \'sch\',\n-    1065: \'SCH\',\n-    1079: \'z\',\n-    1047: \'Z\',\n-    1093: \'h\',\n-    1061: \'H\',\n-    1098: \'\',\n-    1066: \'\',\n-    1092: \'f\',\n-    1060: \'F\',\n-    1099: \'y\',\n-    1067: \'Y\',\n-    1074: \'v\',\n-    1042: \'V\',\n-    1072: \'a\',\n-    1040: \'A\',\n-    1087: \'p\',\n-    1055: \'P\',\n-    1088: \'r\',\n-    1056: \'R\',\n-    1086: \'o\',\n-    1054: \'O\',\n-    1083: \'l\',\n-    1051: \'L\',\n-    1076: \'d\',\n-    1044: \'D\',\n-    1078: \'zh\',\n-    1046: \'ZH\',\n-    1101: \'e\',\n-    1069: \'E\',\n-    1103: \'ya\',\n-    1071: \'YA\',\n-    1095: \'ch\',\n-    1063: \'CH\',\n-    1089: \'s\',\n-    1057: \'S\',\n-    1084: \'m\',\n-    1052: \'M\',\n-    1080: \'i\',\n-    1048: \'I\',\n-    1090: \'t\',\n-    1058: \'T\',\n-    1100: \'\',\n-    1068: \'\',\n-    1073: \'b\',\n-    1041: \'B\',\n-    1102: \'yu\',\n-    1070: \'YU\',\n-    1105: \'yo\',\n-    1025: \'YO\',\n+    1081: "i",\n+    1049: "I",\n+    1094: "c",\n+    1062: "C",\n+    1091: "u",\n+    1059: "U",\n+    1082: "k",\n+    1050: "K",\n+    1077: "e",\n+    1045: "E",\n+    1085: "n",\n+    1053: "N",\n+    1075: "g",\n+    1043: "G",\n+    1096: "sh",\n+    1064: "SH",\n+    1097: "sch",\n+    1065: "SCH",\n+    1079: "z",\n+    1047: "Z",\n+    1093: "h",\n+    1061: "H",\n+    1098: "",\n+    1066: "",\n+    1092: "f",\n+    1060: "F",\n+    1099: "y",\n+    1067: "Y",\n+    1074: "v",\n+    1042: "V",\n+    1072: "a",\n+    1040: "A",\n+    1087: "p",\n+    1055: "P",\n+    1088: "r",\n+    1056: "R",\n+    1086: "o",\n+    1054: "O",\n+    1083: "l",\n+    1051: "L",\n+    1076: "d",\n+    1044: "D",\n+    1078: "zh",\n+    1046: "ZH",\n+    1101: "e",\n+    1069: "E",\n+    1103: "ya",\n+    1071: "YA",\n+    1095: "ch",\n+    1063: "CH",\n+    1089: "s",\n+    1057: "S",\n+    1084: "m",\n+    1052: "M",\n+    1080: "i",\n+    1048: "I",\n+    1090: "t",\n+    1058: "T",\n+    1100: "",\n+    1068: "",\n+    1073: "b",\n+    1041: "B",\n+    1102: "yu",\n+    1070: "YU",\n+    1105: "yo",\n+    1025: "YO",\n }\n \n \ndiff --git a/plone/i18n/normalizer/tests/test_adapters.py b/plone/i18n/normalizer/tests/test_adapters.py\nindex d15aaca..725caaf 100644\n--- a/plone/i18n/normalizer/tests/test_adapters.py\n+++ b/plone/i18n/normalizer/tests/test_adapters.py\n@@ -26,9 +26,7 @@ def _makeOne(self, lang):\n \n class TestFileNameNormalizer(BaseTestCase, unittest.TestCase):\n     def _getTargetClass(self):\n-        from plone.i18n.normalizer.adapters import (\n-            UserPreferredFileNameNormalizer,\n-        )\n+        from plone.i18n.normalizer.adapters import UserPreferredFileNameNormalizer\n \n         return UserPreferredFileNameNormalizer\n \n@@ -36,25 +34,19 @@ def test_german(self):\n         norm = self._makeOne("de")\n         self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n \n-        self.assertEqual(\n-            norm.normalize(u"text with uml\xc3\xa4ut"), u"text with umlaeut"\n-        )\n+        self.assertEqual(norm.normalize(u"text with uml\xc3\xa4ut"), u"text with umlaeut")\n \n     def test_german_country(self):\n         norm = self._makeOne("de-DE")\n         self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n \n-        self.assertEqual(\n-            norm.normalize(u"text with uml\xc3\xa4ut"), u"text with umlaeut"\n-        )\n+        self.assertEqual(norm.normalize(u"text with uml\xc3\xa4ut"), u"text with umlaeut")\n \n     def test_english(self):\n         norm = self._makeOne("en")\n         self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n \n-        self.assertEqual(\n-            norm.normalize(u"text with uml\xc3\xa4ut"), u"text with umlaut"\n-        )\n+        self.assertEqual(norm.normalize(u"text with uml\xc3\xa4ut"), u"text with umlaut")\n \n     def test_spanish(self):\n         norm = self._makeOne("es")\n@@ -72,25 +64,19 @@ def test_german(self):\n         norm = self._makeOne("de")\n         self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n \n-        self.assertEqual(\n-            norm.normalize(u"text with uml\xc3\xa4ut"), u"text-with-umlaeut"\n-        )\n+        self.assertEqual(norm.normalize(u"text with uml\xc3\xa4ut"), u"text-with-umlaeut")\n \n     def test_german_country(self):\n         norm = self._makeOne("de-DE")\n         self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n \n-        self.assertEqual(\n-            norm.normalize(u"text with uml\xc3\xa4ut"), u"text-with-umlaeut"\n-        )\n+        self.assertEqual(norm.normalize(u"text with uml\xc3\xa4ut"), u"text-with-umlaeut")\n \n     def test_english(self):\n         norm = self._makeOne("en")\n         self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n \n-        self.assertEqual(\n-            norm.normalize(u"text with uml\xc3\xa4ut"), u"text-with-umlaut"\n-        )\n+        self.assertEqual(norm.normalize(u"text with uml\xc3\xa4ut"), u"text-with-umlaut")\n \n     def test_spanish(self):\n         norm = self._makeOne("es")\ndiff --git a/plone/i18n/normalizer/tests/test_normalizer.py b/plone/i18n/normalizer/tests/test_normalizer.py\nindex 93b0f6c..360eaf2 100644\n--- a/plone/i18n/normalizer/tests/test_normalizer.py\n+++ b/plone/i18n/normalizer/tests/test_normalizer.py\n@@ -21,53 +21,53 @@ def utf8unicode(value):\n \n def testIDNormalizer():\n     """\n-      >>> util = queryUtility(IIDNormalizer)\n-      >>> util\n-      <plone.i18n.normalizer.IDNormalizer object at ...>\n+    >>> util = queryUtility(IIDNormalizer)\n+    >>> util\n+    <plone.i18n.normalizer.IDNormalizer object at ...>\n \n-      >>> util.normalize(u\'simpleandsafe\')\n-      \'simpleandsafe\'\n+    >>> util.normalize(u\'simpleandsafe\')\n+    \'simpleandsafe\'\n \n-      >>> util.normalize(u\' Whitespace and capital Letters  \')\n-      \'whitespace-and-capital-letters\'\n+    >>> util.normalize(u\' Whitespace and capital Letters  \')\n+    \'whitespace-and-capital-letters\'\n \n-      >>> util.normalize(u">here\'s another!")\n-      \'heres-another\'\n+    >>> util.normalize(u">here\'s another!")\n+    \'heres-another\'\n \n-      >>> util.normalize(u">>>here\'!--s yet another!!!")\n-      \'here-s-yet-another\'\n+    >>> util.normalize(u">>>here\'!--s yet another!!!")\n+    \'here-s-yet-another\'\n \n-      >>> util.normalize(utf8unicode("uml\xc3\xa4ut.doc"))\n-      \'umlaut-doc\'\n+    >>> util.normalize(utf8unicode("uml\xc3\xa4ut.doc"))\n+    \'umlaut-doc\'\n \n-      >>> from plone.i18n.normalizer import MAX_LENGTH\n+    >>> from plone.i18n.normalizer import MAX_LENGTH\n \n-      >>> testString = u"thissentenceiswaytolongtobecroppedwithoutcuttedbythenormalizemethodbecauseithasnoplacetocrop"\n-      >>> util.normalize(testString)\n-      \'thissentenceiswaytolongtobecroppedwithoutcuttedbyt\'\n-      >>> len(util.normalize(testString)) == MAX_LENGTH\n-      True\n+    >>> testString = u"thissentenceiswaytolongtobecroppedwithoutcuttedbythenormalizemethodbecauseithasnoplacetocrop"\n+    >>> util.normalize(testString)\n+    \'thissentenceiswaytolongtobecroppedwithoutcuttedbyt\'\n+    >>> len(util.normalize(testString)) == MAX_LENGTH\n+    True\n \n-      >>> testString = u"thissentenceisacropped-by-the-normalize-method-because-it-has-many-places-to-crop"\n-      >>> util.normalize(testString)\n-      \'thissentenceisacropped-by-the-normalize-method\'\n-      >>> len(util.normalize(testString)) <= MAX_LENGTH\n-      True\n+    >>> testString = u"thissentenceisacropped-by-the-normalize-method-because-it-has-many-places-to-crop"\n+    >>> util.normalize(testString)\n+    \'thissentenceisacropped-by-the-normalize-method\'\n+    >>> len(util.normalize(testString)) <= MAX_LENGTH\n+    True\n \n-      >>> testString = u"this-sentence-is-way-to-long-but-can-be-cropped-by-the-normalize-method-because-it-has-many-places-to-crop"\n-      >>> util.normalize(testString)\n-      \'this-sentence-is-way-to-long-but-can-be-cropped-by\'\n-      >>> len(util.normalize(testString)) <= MAX_LENGTH\n-      True\n+    >>> testString = u"this-sentence-is-way-to-long-but-can-be-cropped-by-the-normalize-method-because-it-has-many-places-to-crop"\n+    >>> util.normalize(testString)\n+    \'this-sentence-is-way-to-long-but-can-be-cropped-by\'\n+    >>> len(util.normalize(testString)) <= MAX_LENGTH\n+    True\n \n-      >>> util.normalize(u"rest `n` peace")\n-      \'rest-n-peace\'\n+    >>> util.normalize(u"rest `n` peace")\n+    \'rest-n-peace\'\n \n-      >>> util.normalize(u"short-hello-version", max_length=10)\n-      \'short\'\n+    >>> util.normalize(u"short-hello-version", max_length=10)\n+    \'short\'\n \n-      >>> util.normalize(u"short-hello-version", max_length=15)\n-      \'short-hello\'\n+    >>> util.normalize(u"short-hello-version", max_length=15)\n+    \'short-hello\'\n     """\n \n \n@@ -120,45 +120,45 @@ def testLocaleAwareIDNormalizer():\n \n def testFileNameNormalizer():\n     """\n-      >>> util = queryUtility(IFileNameNormalizer)\n-      >>> util\n-      <plone.i18n.normalizer.FileNameNormalizer object at ...>\n+    >>> util = queryUtility(IFileNameNormalizer)\n+    >>> util\n+    <plone.i18n.normalizer.FileNameNormalizer object at ...>\n \n-      >>> util.normalize(u\'simpleandsafe\')\n-      \'simpleandsafe\'\n+    >>> util.normalize(u\'simpleandsafe\')\n+    \'simpleandsafe\'\n \n-      >>> util.normalize(u\' Whitespace and capital Letters  \')\n-      \'Whitespace and capital Letters\'\n+    >>> util.normalize(u\' Whitespace and capital Letters  \')\n+    \'Whitespace and capital Letters\'\n \n-      >>> util.normalize(u">here\'s another!")\n-      \'heres another\'\n+    >>> util.normalize(u">here\'s another!")\n+    \'heres another\'\n \n-      >>> util.normalize(u">>>here\'!--s yet another!!!")\n-      \'here-s yet another\'\n+    >>> util.normalize(u">>>here\'!--s yet another!!!")\n+    \'here-s yet another\'\n \n-      >>> util.normalize(u"{[(me too)]}")\n-      \'me too\'\n+    >>> util.normalize(u"{[(me too)]}")\n+    \'me too\'\n \n-      >>> util.normalize("pseudo_filename,pot,#1.doc")\n-      \'pseudo_filename-pot-#1.doc\'\n+    >>> util.normalize("pseudo_filename,pot,#1.doc")\n+    \'pseudo_filename-pot-#1.doc\'\n \n-      >>> util.normalize(utf8unicode("uml\xc3\xa4ut.doc"))\n-      \'umlaut.doc\'\n+    >>> util.normalize(utf8unicode("uml\xc3\xa4ut.doc"))\n+    \'umlaut.doc\'\n \n-      >>> len(util.normalize(u\'aa\' * 2000))\n-      1023\n+    >>> len(util.normalize(u\'aa\' * 2000))\n+    1023\n \n-      >>> util.normalize(u"rest `n` peace")\n-      \'rest -n- peace\'\n+    >>> util.normalize(u"rest `n` peace")\n+    \'rest -n- peace\'\n \n-      >>> util.normalize(u"short-hello-version", max_length=10)\n-      \'short\'\n+    >>> util.normalize(u"short-hello-version", max_length=10)\n+    \'short\'\n \n-      >>> util.normalize(u"_some_cameras_are_evil")\n-      \'some_cameras_are_evil\'\n+    >>> util.normalize(u"_some_cameras_are_evil")\n+    \'some_cameras_are_evil\'\n \n-      >>> util.normalize(u"____my_new_file")\n-      \'my_new_file\'\n+    >>> util.normalize(u"____my_new_file")\n+    \'my_new_file\'\n     """\n \n \n@@ -203,53 +203,53 @@ def testLocaleAwareFileNameNormalizer():\n \n def testURLNormalizer():\n     """\n-      >>> util = queryUtility(IURLNormalizer)\n-      >>> util\n-      <plone.i18n.normalizer.URLNormalizer object at ...>\n+    >>> util = queryUtility(IURLNormalizer)\n+    >>> util\n+    <plone.i18n.normalizer.URLNormalizer object at ...>\n \n-      >>> util.normalize(u\'simpleandsafe\')\n-      \'simpleandsafe\'\n+    >>> util.normalize(u\'simpleandsafe\')\n+    \'simpleandsafe\'\n \n-      >>> util.normalize(u\' Whitespace and capital Letters  \')\n-      \'whitespace-and-capital-letters\'\n+    >>> util.normalize(u\' Whitespace and capital Letters  \')\n+    \'whitespace-and-capital-letters\'\n \n-      >>> util.normalize(u">here\'s another!")\n-      \'heres-another\'\n+    >>> util.normalize(u">here\'s another!")\n+    \'heres-another\'\n \n-      >>> util.normalize(u">>>here\'!--s yet another!!!")\n-      \'here-s-yet-another\'\n+    >>> util.normalize(u">>>here\'!--s yet another!!!")\n+    \'here-s-yet-another\'\n \n-      >>> util.normalize(u"Doe, Joe")\n-      \'doe-joe\'\n+    >>> util.normalize(u"Doe, Joe")\n+    \'doe-joe\'\n \n-      >>> util.normalize(utf8unicode("uml\xc3\xa4ut.doc"))\n-      \'umlaut.doc\'\n+    >>> util.normalize(utf8unicode("uml\xc3\xa4ut.doc"))\n+    \'umlaut.doc\'\n \n-      >>> util.normalize(\'quote "this"!\')\n-      \'quote-this\'\n+    >>> util.normalize(\'quote "this"!\')\n+    \'quote-this\'\n \n-      >>> util.normalize("quote \'this\'!")\n-      \'quote-this\'\n+    >>> util.normalize("quote \'this\'!")\n+    \'quote-this\'\n \n-      >>> util.normalize("I\'m not a FILE.txt")\n-      \'im-not-a-file.txt\'\n+    >>> util.normalize("I\'m not a FILE.txt")\n+    \'im-not-a-file.txt\'\n \n-      >>> util.normalize("I\'m a big file.TXT")\n-      \'im-a-big-file.txt\'\n+    >>> util.normalize("I\'m a big file.TXT")\n+    \'im-a-big-file.txt\'\n \n-      >>> util.normalize(u"rest `n` peace")\n-      \'rest-n-peace\'\n+    >>> util.normalize(u"rest `n` peace")\n+    \'rest-n-peace\'\n \n-      >>> len(util.normalize(u\'aa\' * 2000))\n-      255\n+    >>> len(util.normalize(u\'aa\' * 2000))\n+    255\n \n-      >>> util.normalize(u"short-hello-version", max_length=10)\n-      \'short\'\n+    >>> util.normalize(u"short-hello-version", max_length=10)\n+    \'short\'\n \n-      Leading underscores are forbidden by zope, so this\n-      normalizer should strip it\n-      >>> util.normalize(u\'_awesome.txt\')\n-      \'awesome.txt\'\n+    Leading underscores are forbidden by zope, so this\n+    normalizer should strip it\n+    >>> util.normalize(u\'_awesome.txt\')\n+    \'awesome.txt\'\n     """\n \n \ndiff --git a/plone/i18n/normalizer/tr.py b/plone/i18n/normalizer/tr.py\nindex b9310ef..9e5e2b0 100644\n--- a/plone/i18n/normalizer/tr.py\n+++ b/plone/i18n/normalizer/tr.py\n@@ -6,7 +6,7 @@\n \n \n # Turkish character mapping\n-mapping = {286: \'G\', 287: \'g\', 304: \'I\', 305: \'i\', 350: \'S\', 351: \'s\'}\n+mapping = {286: "G", 287: "g", 304: "I", 305: "i", 350: "S", 351: "s"}\n \n \n @implementer(INormalizer)\ndiff --git a/plone/i18n/normalizer/uk.py b/plone/i18n/normalizer/uk.py\nindex 3ed6dfc..80a4790 100644\n--- a/plone/i18n/normalizer/uk.py\n+++ b/plone/i18n/normalizer/uk.py\n@@ -6,72 +6,72 @@\n \n # Ukrainian character mapping (according to BGN/PCGN romanization system)\n mapping = {\n-    0x0410: u\'A\',\n-    0x0430: u\'a\',\n-    0x0411: u\'B\',\n-    0x0431: u\'b\',\n-    0x0412: u\'V\',\n-    0x0432: u\'v\',\n-    0x0413: u\'H\',\n-    0x0433: u\'h\',\n-    0x0490: u\'G\',\n-    0x0491: u\'g\',\n-    0x0414: u\'D\',\n-    0x0434: u\'d\',\n-    0x0415: u\'E\',\n-    0x0435: u\'e\',\n-    0x0404: u\'YE\',\n-    0x0454: u\'ye\',\n-    0x0416: u\'ZH\',\n-    0x0436: u\'zh\',\n-    0x0417: u\'Z\',\n-    0x0437: u\'z\',\n-    0x0418: u\'Y\',\n-    0x0438: u\'y\',\n-    0x0406: u\'I\',\n-    0x0456: u\'i\',\n-    0x0407: u\'YI\',\n-    0x0457: u\'yi\',\n-    0x0419: u\'Y\',\n-    0x0439: u\'y\',\n-    0x041A: u\'K\',\n-    0x043A: u\'k\',\n-    0x041B: u\'L\',\n-    0x043B: u\'l\',\n-    0x041C: u\'M\',\n-    0x043C: u\'m\',\n-    0x041D: u\'N\',\n-    0x043D: u\'n\',\n-    0x041E: u\'O\',\n-    0x043E: u\'o\',\n-    0x041F: u\'P\',\n-    0x043F: u\'p\',\n-    0x0420: u\'R\',\n-    0x0440: u\'r\',\n-    0x0421: u\'S\',\n-    0x0441: u\'s\',\n-    0x0422: u\'T\',\n-    0x0442: u\'t\',\n-    0x0423: u\'U\',\n-    0x0443: u\'u\',\n-    0x0424: u\'F\',\n-    0x0444: u\'f\',\n-    0x0425: u\'KH\',\n-    0x0445: u\'kh\',\n-    0x0426: u\'TS\',\n-    0x0446: u\'ts\',\n-    0x0427: u\'CH\',\n-    0x0447: u\'ch\',\n-    0x0428: u\'SH\',\n-    0x0448: u\'sh\',\n-    0x0429: u\'SHCH\',\n-    0x0449: u\'shch\',\n-    0x042C: u\'\',\n-    0x044C: u\'\',\n-    0x042E: u\'YU\',\n-    0x044E: u\'yu\',\n-    0x042F: u\'YA\',\n-    0x044F: u\'ya\',\n+    0x0410: u"A",\n+    0x0430: u"a",\n+    0x0411: u"B",\n+    0x0431: u"b",\n+    0x0412: u"V",\n+    0x0432: u"v",\n+    0x0413: u"H",\n+    0x0433: u"h",\n+    0x0490: u"G",\n+    0x0491: u"g",\n+    0x0414: u"D",\n+    0x0434: u"d",\n+    0x0415: u"E",\n+    0x0435: u"e",\n+    0x0404: u"YE",\n+    0x0454: u"ye",\n+    0x0416: u"ZH",\n+    0x0436: u"zh",\n+    0x0417: u"Z",\n+    0x0437: u"z",\n+    0x0418: u"Y",\n+    0x0438: u"y",\n+    0x0406: u"I",\n+    0x0456: u"i",\n+    0x0407: u"YI",\n+    0x0457: u"yi",\n+    0x0419: u"Y",\n+    0x0439: u"y",\n+    0x041A: u"K",\n+    0x043A: u"k",\n+    0x041B: u"L",\n+    0x043B: u"l",\n+    0x041C: u"M",\n+    0x043C: u"m",\n+    0x041D: u"N",\n+    0x043D: u"n",\n+    0x041E: u"O",\n+    0x043E: u"o",\n+    0x041F: u"P",\n+    0x043F: u"p",\n+    0x0420: u"R",\n+    0x0440: u"r",\n+    0x0421: u"S",\n+    0x0441: u"s",\n+    0x0422: u"T",\n+    0x0442: u"t",\n+    0x0423: u"U",\n+    0x0443: u"u",\n+    0x0424: u"F",\n+    0x0444: u"f",\n+    0x0425: u"KH",\n+    0x0445: u"kh",\n+    0x0426: u"TS",\n+    0x0446: u"ts",\n+    0x0427: u"CH",\n+    0x0447: u"ch",\n+    0x0428: u"SH",\n+    0x0448: u"sh",\n+    0x0429: u"SHCH",\n+    0x0449: u"shch",\n+    0x042C: u"",\n+    0x044C: u"",\n+    0x042E: u"YU",\n+    0x044E: u"yu",\n+    0x042F: u"YA",\n+    0x044F: u"ya",\n }\n \n \ndiff --git a/plone/i18n/tests/base.py b/plone/i18n/tests/base.py\nindex f34ee74..820e795 100644\n--- a/plone/i18n/tests/base.py\n+++ b/plone/i18n/tests/base.py\n@@ -11,10 +11,9 @@ class PloneI18nLayer(PloneSandboxLayer):\n     defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n-        import plone.i18n\n-\n         # Needed to have ILanguage adapter for dx\n         import plone.app.multilingual\n+        import plone.i18n\n \n         self.loadZCML(package=plone.i18n)\n         self.loadZCML(package=plone.app.multilingual)\n@@ -22,17 +21,15 @@ def setUpZope(self, app, configurationContext):\n \n PLT_FIXTURE = PloneI18nLayer()\n PLT_FUNCTIONAL_TESTING = testing.FunctionalTesting(\n-    bases=(PLT_FIXTURE,), name=\'Plonei18nTestCase:Functional\'\n+    bases=(PLT_FIXTURE,), name="Plonei18nTestCase:Functional"\n )\n \n \n class TestCase(bbb.PloneTestCase):\n-    """Simple test case\n-    """\n+    """Simple test case"""\n \n     layer = PLT_FUNCTIONAL_TESTING\n \n \n class FunctionalTestCase(TestCase):\n-    """Simple test case for functional tests\n-    """\n+    """Simple test case for functional tests"""\ndiff --git a/plone/i18n/tests/test_languageutility.py b/plone/i18n/tests/test_languageutility.py\nindex e7b71dc..3a5e585 100644\n--- a/plone/i18n/tests/test_languageutility.py\n+++ b/plone/i18n/tests/test_languageutility.py\n@@ -27,43 +27,33 @@ def testLanguageSettings(self):\n         self.settings.available_languages = supportedLanguages\n         self.settings.use_combined_language_codes = False\n         self.assertEqual(self.ltool.getDefaultLanguage(), defaultLanguage)\n-        self.assertEqual(\n-            self.ltool.getSupportedLanguages(), supportedLanguages\n-        )\n+        self.assertEqual(self.ltool.getSupportedLanguages(), supportedLanguages)\n \n     def testSupportedLanguages(self):\n         defaultLanguage = "de"\n         supportedLanguages = ["en", "de", "no"]\n         self.settings.available_languages = supportedLanguages\n         self.settings.default_language = defaultLanguage\n-        self.assertEqual(\n-            self.ltool.getSupportedLanguages(), supportedLanguages\n-        )\n+        self.assertEqual(self.ltool.getSupportedLanguages(), supportedLanguages)\n \n         self.ltool.removeSupportedLanguages(supportedLanguages)\n         self.assertEqual(self.ltool.getSupportedLanguages(), [])\n \n         for lang in supportedLanguages:\n             self.ltool.addSupportedLanguage(lang)\n-        self.assertEqual(\n-            self.ltool.getSupportedLanguages(), supportedLanguages\n-        )\n+        self.assertEqual(self.ltool.getSupportedLanguages(), supportedLanguages)\n \n     def testDefaultLanguage(self):\n         supportedLanguages = ["de", "no"]\n         self.settings.available_languages = supportedLanguages\n         self.ltool.setDefaultLanguage("no")\n-        self.assertEqual(\n-            self.ltool.getSupportedLanguages(), supportedLanguages\n-        )\n+        self.assertEqual(self.ltool.getSupportedLanguages(), supportedLanguages)\n         self.assertEqual(self.ltool.getDefaultLanguage(), "no")\n \n         # default not in supported languages, should set to first supported\n         self.ltool.setDefaultLanguage("nl")\n \n-        self.assertEqual(\n-            self.ltool.getSupportedLanguages(), supportedLanguages\n-        )\n+        self.assertEqual(self.ltool.getSupportedLanguages(), supportedLanguages)\n         self.assertEqual(self.ltool.getDefaultLanguage(), "de")\n \n     def testAvailableLanguage(self):\ndiff --git a/plone/i18n/tests/test_negotiation.py b/plone/i18n/tests/test_negotiation.py\nindex ce0670c..a145c24 100644\n--- a/plone/i18n/tests/test_negotiation.py\n+++ b/plone/i18n/tests/test_negotiation.py\n@@ -138,9 +138,7 @@ def testContentObject(self):\n         ILanguage(doc).set_language("nl")\n         self.assertEqual(doc.Language(), "nl")\n         docpath = "/".join(doc.getPhysicalPath())\n-        response = self.publish(\n-            docpath, self.basic_auth, env={"PATH_INFO": docpath}\n-        )\n+        response = self.publish(docpath, self.basic_auth, env={"PATH_INFO": docpath})\n         self.checkLanguage(response, "nl")\n \n     def testContentObjectVHMPortal(self):\n@@ -196,7 +194,7 @@ def testContentObjectVHMFolder(self):\n         doc.setLanguage("nl")\n         self.assertEqual(doc.Language(), "nl")\n         docpath = "/".join(doc.getPhysicalPath())\n-        docpath = docpath[len(folder_path) + 1:]\n+        docpath = docpath[len(folder_path) + 1 :]\n \n         response = self.publish(\n             vhmBasePath + docpath, self.basic_auth, env={"diazo.off": "1"}\ndiff --git a/plone/i18n/utility.py b/plone/i18n/utility.py\nindex 2782311..7c023d9 100644\n--- a/plone/i18n/utility.py\n+++ b/plone/i18n/utility.py\n@@ -2,9 +2,9 @@\n from AccessControl import ClassSecurityInfo\n from AccessControl import getSecurityManager\n from operator import itemgetter\n+from plone.i18n.interfaces import ILanguageSchema\n from plone.i18n.interfaces import ILanguageUtility\n from plone.i18n.interfaces import INegotiateLanguage\n-from plone.i18n.interfaces import ILanguageSchema\n from plone.i18n.locales.interfaces import ICcTLDInformation\n from plone.i18n.locales.interfaces import IContentLanguageAvailability\n from plone.i18n.locales.interfaces import ICountryAvailability\n@@ -65,8 +65,7 @@ def setLanguageBinding(request):\n \n \n def onRequest(object, event):\n-    """Set Language headers in the request.\n-    """\n+    """Set Language headers in the request."""\n     request = event.request\n \n     return setLanguageBinding(request)\n@@ -80,9 +79,7 @@ class LanguageUtility(object):\n         ("portal_css", "portal_javascripts", "portal_kss", "portal_factory")\n     )\n \n-    exclude_exts = frozenset(\n-        ("css", "js", "kss", "xml", "gif", "jpg", "png", "jpeg")\n-    )\n+    exclude_exts = frozenset(("css", "js", "kss", "xml", "gif", "jpg", "png", "jpeg"))\n \n     @property\n     def settings(self):\n@@ -116,8 +113,7 @@ def listSupportedLanguages(self):\n         return r\n \n     def getAvailableLanguages(self):\n-        """Returns the dictionary of available languages.\n-        """\n+        """Returns the dictionary of available languages."""\n         util = queryUtility(IContentLanguageAvailability)\n         if self.settings.use_combined_language_codes:\n             languages = util.getLanguages(combined=True)\n@@ -276,9 +272,7 @@ def getContentLanguage(self, request):\n \n             # Now check if we need to exclude from using language specific path\n             # See https://dev.plone.org/ticket/11263\n-            if bool(\n-                [1 for p in self.exclude_paths if p in contentpath]\n-            ) or bool(\n+            if bool([1 for p in self.exclude_paths if p in contentpath]) or bool(\n                 [1 for p in self.exclude_exts if contentpath[0].endswith(p)]\n             ):\n                 return None\n@@ -436,10 +430,7 @@ def showSelector(self):\n         """Returns True if the selector viewlet should be shown."""\n         return self.settings.always_show_selector or (\n             self.settings.use_cookie_negotiation\n-            and not (\n-                self.settings.authenticated_users_only\n-                and self.isAnonymousUser()\n-            )\n+            and not (self.settings.authenticated_users_only and self.isAnonymousUser())\n         )\n \n \ndiff --git a/pyproject.toml b/pyproject.toml\nindex cb1bf7a..05b615d 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,7 +1,3 @@\n-[tool.black]\n-line-length = 79\n-skip-string-normalization = true\n-\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\ndiff --git a/setup.cfg b/setup.cfg\nindex 52002d1..203ab46 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -6,16 +6,11 @@ ignore =\n     .gitattributes\n \n [isort]\n-# for details see\n-# http://docs.plone.org/develop/styleguide/python.html#grouping-and-sorting\n+# black compatible Plone isort rules:\n+profile = black\n force_alphabetical_sort = True\n force_single_line = True\n lines_after_imports = 2\n-line_length = 79\n-not_skip = __init__.py\n-use_parentheses = True\n-multi_line_output = 3\n-include_trailing_comma = True\n \n [zest.releaser]\n create-wheel = yes\ndiff --git a/setup.py b/setup.py\nindex 8f7fdac..52f6ad5 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,13 +1,14 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n-version = \'5.0.0.dev0\'\n+\n+version = "5.0.0.dev0"\n \n setup(\n-    name=\'plone.i18n\',\n+    name="plone.i18n",\n     version=version,\n     description="Advanced i18n/l10n features",\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -22,41 +23,41 @@\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'i18n l10n Plone\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.i18n\',\n-    license=\'GPL version 2\',\n+    keywords="i18n l10n Plone",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.i18n",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'AccessControl\',\n-        \'Products.CMFCore\',\n-        \'plone.supermodel\',\n-        \'setuptools\',\n-        \'six\',\n-        \'Unidecode>=1.0.22\',\n-        \'ZODB\',\n-        \'zope.component\',\n-        \'zope.i18n\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n-        \'zope.publisher\',\n-        \'zope.schema\',\n-        \'zope.globalrequest\',\n-        \'Zope\',\n+        "AccessControl",\n+        "Products.CMFCore",\n+        "plone.supermodel",\n+        "setuptools",\n+        "six",\n+        "Unidecode>=1.0.22",\n+        "ZODB",\n+        "zope.component",\n+        "zope.i18n",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "zope.publisher",\n+        "zope.schema",\n+        "zope.globalrequest",\n+        "Zope",\n     ],\n     extras_require=dict(\n         test=[\n-            \'plone.app.contenttypes\',\n-            \'plone.app.testing\',\n-            \'plone.registry\',\n-            \'zope.browserresource\',\n-            \'zope.component [zcml]\',\n-            \'zope.configuration\',\n-            \'zope.testing\',\n+            "plone.app.contenttypes",\n+            "plone.app.testing",\n+            "plone.registry",\n+            "zope.browserresource",\n+            "zope.component [zcml]",\n+            "zope.configuration",\n+            "zope.testing",\n         ],\n     ),\n )\n'

Repository: plone.i18n


Branch: refs/heads/master
Date: 2021-08-13T17:03:11+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.i18n/commit/8ce015ece84ce9d92f79564975d241bda1a3a12f

find . -name *.py|xargs pyupgrade --py37-plus

Files changed:
M plone/__init__.py
M plone/i18n/__init__.py
M plone/i18n/interfaces.py
M plone/i18n/locales/cctld.py
M plone/i18n/locales/countries.py
M plone/i18n/locales/interfaces.py
M plone/i18n/locales/languages.py
M plone/i18n/locales/tests/__init__.py
M plone/i18n/locales/tests/base.py
M plone/i18n/locales/tests/test_cctlds.py
M plone/i18n/locales/tests/test_countries.py
M plone/i18n/locales/tests/test_languages.py
M plone/i18n/negotiate/negotiate.py
M plone/i18n/negotiate/ptsnegotiator.py
M plone/i18n/normalizer/__init__.py
M plone/i18n/normalizer/adapters.py
M plone/i18n/normalizer/base.py
M plone/i18n/normalizer/bg.py
M plone/i18n/normalizer/de.py
M plone/i18n/normalizer/el.py
M plone/i18n/normalizer/es.py
M plone/i18n/normalizer/fr.py
M plone/i18n/normalizer/interfaces.py
M plone/i18n/normalizer/ja.py
M plone/i18n/normalizer/pl.py
M plone/i18n/normalizer/pt.py
M plone/i18n/normalizer/ru.py
M plone/i18n/normalizer/tests/__init__.py
M plone/i18n/normalizer/tests/base.py
M plone/i18n/normalizer/tests/test_adapters.py
M plone/i18n/normalizer/tests/test_normalizer.py
M plone/i18n/normalizer/tr.py
M plone/i18n/normalizer/uk.py
M plone/i18n/tests/__init__.py
M plone/i18n/tests/base.py
M plone/i18n/tests/test_languageutility.py
M plone/i18n/tests/test_negotiation.py
M plone/i18n/utility.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 03d08ff..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/i18n/__init__.py b/plone/i18n/__init__.py\nindex 265ab3a..560980d 100644\n--- a/plone/i18n/__init__.py\n+++ b/plone/i18n/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.i18n.interfaces import ILanguageUtility\n from Products.CMFCore.utils import registerToolInterface\n \ndiff --git a/plone/i18n/interfaces.py b/plone/i18n/interfaces.py\nindex 6fd3d23..2831c55 100644\n--- a/plone/i18n/interfaces.py\n+++ b/plone/i18n/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.supermodel import model\n from zope import schema\n \n@@ -28,7 +27,7 @@ class INegotiateLanguage(Interface):\n class ILanguageSchema(Interface):\n     model.fieldset(\n         "general",\n-        label=_(u"General"),\n+        label=_("General"),\n         fields=[\n             "default_language",\n             "available_languages",\n@@ -39,10 +38,10 @@ class ILanguageSchema(Interface):\n     )\n \n     default_language = schema.Choice(\n-        title=_(u"heading_site_language", default=u"Site language"),\n+        title=_("heading_site_language", default="Site language"),\n         description=_(\n-            u"description_site_language",\n-            default=u"The language used for the content and the UI of " u"this site.",\n+            "description_site_language",\n+            default="The language used for the content and the UI of " "this site.",\n         ),\n         default="en",\n         required=True,\n@@ -50,10 +49,10 @@ class ILanguageSchema(Interface):\n     )\n \n     available_languages = schema.List(\n-        title=_(u"heading_available_languages", default=u"Available languages"),\n+        title=_("heading_available_languages", default="Available languages"),\n         description=_(\n-            u"description_available_languages",\n-            default=u"The languages in which the site should be " u"translatable.",\n+            "description_available_languages",\n+            default="The languages in which the site should be " "translatable.",\n         ),\n         required=True,\n         default=["en"],\n@@ -65,38 +64,38 @@ class ILanguageSchema(Interface):\n \n     use_combined_language_codes = schema.Bool(\n         title=_(\n-            u"label_allow_combined_language_codes",\n-            default=u"Show country-specific language variants",\n+            "label_allow_combined_language_codes",\n+            default="Show country-specific language variants",\n         ),\n         description=_(\n-            u"help_allow_combined_language_codes",\n-            default=u"Examples: pt-br (Brazilian Portuguese), "\n-            u"en-us (American English) etc.",\n+            "help_allow_combined_language_codes",\n+            default="Examples: pt-br (Brazilian Portuguese), "\n+            "en-us (American English) etc.",\n         ),\n         default=True,\n         required=False,\n     )\n \n     display_flags = schema.Bool(\n-        title=_(u"label_display_flags", default=u"Show language flags"),\n-        description=u"",\n+        title=_("label_display_flags", default="Show language flags"),\n+        description="",\n         default=False,\n         required=False,\n     )\n \n     always_show_selector = schema.Bool(\n         title=_(\n-            u"label_always_show_selector",\n-            default=u"Always show language selector",\n+            "label_always_show_selector",\n+            default="Always show language selector",\n         ),\n-        description=u"",\n+        description="",\n         default=False,\n         required=False,\n     )\n \n     model.fieldset(\n         "negotiation_scheme",\n-        label=_(u"Negotiation scheme", default=u"Negotiation scheme"),\n+        label=_("Negotiation scheme", default="Negotiation scheme"),\n         fields=[\n             "use_content_negotiation",\n             "use_path_negotiation",\n@@ -110,12 +109,12 @@ class ILanguageSchema(Interface):\n     )\n     use_content_negotiation = schema.Bool(\n         title=_(\n-            u"heading_language_of_the_content",\n-            default=u"Use the language of the content item",\n+            "heading_language_of_the_content",\n+            default="Use the language of the content item",\n         ),\n         description=_(\n-            u"description_language_of_the_content",\n-            default=u"Use the language of the content item.",\n+            "description_language_of_the_content",\n+            default="Use the language of the content item.",\n         ),\n         default=False,\n         required=False,\n@@ -123,12 +122,12 @@ class ILanguageSchema(Interface):\n \n     use_path_negotiation = schema.Bool(\n         title=_(\n-            u"heading_language_codes_in_URL",\n-            default=u"Use language codes in URL path for manual override",\n+            "heading_language_codes_in_URL",\n+            default="Use language codes in URL path for manual override",\n         ),\n         description=_(\n-            u"description_language_codes_in_URL",\n-            default=u"Use language codes in URL path for manual override.",\n+            "description_language_codes_in_URL",\n+            default="Use language codes in URL path for manual override.",\n         ),\n         default=False,\n         required=False,\n@@ -136,12 +135,12 @@ class ILanguageSchema(Interface):\n \n     use_cookie_negotiation = schema.Bool(\n         title=_(\n-            u"heading_cookie_manual_override",\n-            default=(u"Use cookie for manual override"),\n+            "heading_cookie_manual_override",\n+            default=("Use cookie for manual override"),\n         ),\n         description=_(\n-            u"description_cookie_manual_override",\n-            default=(u"Required for the language selector viewlet to be rendered."),\n+            "description_cookie_manual_override",\n+            default=("Required for the language selector viewlet to be rendered."),\n         ),\n         default=False,\n         required=False,\n@@ -149,12 +148,12 @@ class ILanguageSchema(Interface):\n \n     authenticated_users_only = schema.Bool(\n         title=_(\n-            u"heading_auth_cookie_manual_override",\n-            default=u"Authenticated users only",\n+            "heading_auth_cookie_manual_override",\n+            default="Authenticated users only",\n         ),\n         description=_(\n-            u"description_auth_ookie_manual_override",\n-            default=(u"Related to: use cookie for manual override"),\n+            "description_auth_ookie_manual_override",\n+            default=("Related to: use cookie for manual override"),\n         ),\n         default=False,\n         required=False,\n@@ -162,13 +161,13 @@ class ILanguageSchema(Interface):\n \n     set_cookie_always = schema.Bool(\n         title=_(\n-            u"heading_set_language_cookie_always",\n-            default=(u"Set the language cookie always"),\n+            "heading_set_language_cookie_always",\n+            default=("Set the language cookie always"),\n         ),\n         description=_(\n-            u"description_set_language_cookie_always",\n+            "description_set_language_cookie_always",\n             default=(\n-                u"i.e. also when the \'set_language\' request parameter is " u"absent"\n+                "i.e. also when the \'set_language\' request parameter is " "absent"\n             ),\n         ),\n         default=False,\n@@ -176,27 +175,27 @@ class ILanguageSchema(Interface):\n     )\n \n     use_subdomain_negotiation = schema.Bool(\n-        title=_(u"heading_use_subdomain", default=u"Use subdomain"),\n-        description=_(u"description_use_subdomain", default=u"e.g.: de.plone.org"),\n+        title=_("heading_use_subdomain", default="Use subdomain"),\n+        description=_("description_use_subdomain", default="e.g.: de.plone.org"),\n         default=False,\n         required=False,\n     )\n \n     use_cctld_negotiation = schema.Bool(\n-        title=_(u"heading_top_level_domain", default=u"Use top-level domain"),\n-        description=_(u"description_top_level_domain", default=u"e.g.: www.plone.de"),\n+        title=_("heading_top_level_domain", default="Use top-level domain"),\n+        description=_("description_top_level_domain", default="e.g.: www.plone.de"),\n         default=False,\n         required=False,\n     )\n \n     use_request_negotiation = schema.Bool(\n         title=_(\n-            u"heading_browser_language_request_negotiation",\n-            default=u"Use browser language request negotiation",\n+            "heading_browser_language_request_negotiation",\n+            default="Use browser language request negotiation",\n         ),\n         description=_(\n-            u"description_browser_language_request_negotiation",\n-            default=u"Use browser language request negotiation.",\n+            "description_browser_language_request_negotiation",\n+            default="Use browser language request negotiation.",\n         ),\n         default=False,\n         required=False,\ndiff --git a/plone/i18n/locales/cctld.py b/plone/i18n/locales/cctld.py\nindex 209d953..3b9e545 100644\n--- a/plone/i18n/locales/cctld.py\n+++ b/plone/i18n/locales/cctld.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # This file contains a map from internet top level domains to the spoken\n # language(s) in the country associated with the domain.\n \n@@ -12,7 +11,7 @@\n \n \n @implementer(ICcTLDInformation)\n-class CcTLDInformation(object):\n+class CcTLDInformation:\n     """A list of country code top level domains their relevant languages."""\n \n     def getAvailableTLDs(self):\n@@ -31,275 +30,275 @@ def getLanguagesForTLD(self, tld):\n ccTLDInformation = CcTLDInformation()\n \n _tld_to_language = {\n-    u"ac": [],\n-    u"ad": [],\n-    u"ae": [],\n-    u"aero": [],\n-    u"af": [],\n-    u"ag": [],\n-    u"ai": [],\n-    u"al": [],\n-    u"am": [],\n-    u"an": [],\n-    u"ao": [],\n-    u"aq": [u"en"],\n-    u"ar": [u"pt"],\n-    u"arpa": [u"en"],\n-    u"as": [u"en"],\n-    u"asia": [],\n-    u"at": [u"de"],\n-    u"au": [u"en"],\n-    u"aw": [],\n-    u"ax": [],\n-    u"az": [],\n-    u"ba": [u"bs"],\n-    u"bb": [],\n-    u"bd": [],\n-    u"be": [u"nl", u"fr"],\n-    u"bf": [],\n-    u"bg": [],\n-    u"bh": [],\n-    u"bi": [],\n-    u"biz": [],\n-    u"bj": [],\n-    u"bm": [],\n-    u"bn": [],\n-    u"bo": [],\n-    u"br": [u"pt"],\n-    u"bs": [],\n-    u"bt": [],\n-    u"bv": [],\n-    u"bw": [],\n-    u"by": [],\n-    u"bz": [],\n-    u"ca": [u"en"],\n-    u"cat": [u"ca"],\n-    u"cc": [],\n-    u"cd": [],\n-    u"cf": [],\n-    u"cg": [],\n-    u"ch": [u"de"],\n-    u"ci": [],\n-    u"ck": [],\n-    u"cl": [],\n-    u"cm": [],\n-    u"cn": [u"zh"],\n-    u"co": [],\n-    u"com": [],\n-    u"coop": [],\n-    u"cr": [u"es"],\n-    u"cu": [],\n-    u"cv": [],\n-    u"cx": [],\n-    u"cy": [],\n-    u"cz": [],\n-    u"de": [u"de"],\n-    u"dj": [],\n-    u"dk": [u"da"],\n-    u"dm": [],\n-    u"do": [],\n-    u"dz": [],\n-    u"ec": [],\n-    u"edu": [u"en"],\n-    u"ee": [u"et"],\n-    u"eg": [],\n-    u"er": [],\n-    u"es": [u"es"],\n-    u"et": [],\n-    u"eu": [],\n-    u"fi": [u"fi"],\n-    u"fj": [],\n-    u"fk": [],\n-    u"fm": [],\n-    u"fo": [u"fo"],\n-    u"fr": [u"fr"],\n-    u"ga": [],\n-    u"gb": [u"en"],\n-    u"gd": [],\n-    u"ge": [u"ka"],\n-    u"gf": [],\n-    u"gg": [],\n-    u"gh": [],\n-    u"gi": [],\n-    u"gl": [],\n-    u"gm": [],\n-    u"gn": [],\n-    u"gov": [u"en"],\n-    u"gp": [],\n-    u"gq": [],\n-    u"gr": [u"gr"],\n-    u"gs": [],\n-    u"gt": [],\n-    u"gu": [],\n-    u"gw": [],\n-    u"gy": [],\n-    u"hk": [],\n-    u"hm": [],\n-    u"hn": [],\n-    u"hr": [u"hr"],\n-    u"ht": [],\n-    u"hu": [u"hu"],\n-    u"id": [],\n-    u"ie": [],\n-    u"il": [u"he"],\n-    u"im": [u"en"],\n-    u"in": [u"hi"],\n-    u"info": [],\n-    u"int": [],\n-    u"io": [u"en"],\n-    u"iq": [u"ar"],\n-    u"ir": [u"ar"],\n-    u"is": [u"is"],\n-    u"it": [u"it"],\n-    u"je": [u"en"],\n-    u"jm": [],\n-    u"jo": [],\n-    u"jobs": [],\n-    u"jp": [u"ja"],\n-    u"ke": [],\n-    u"kg": [],\n-    u"kh": [],\n-    u"ki": [],\n-    u"km": [],\n-    u"kn": [],\n-    u"kp": [u"ko"],\n-    u"kr": [u"ko"],\n-    u"kw": [],\n-    u"ky": [],\n-    u"kz": [u"kk"],\n-    u"la": [],\n-    u"lb": [],\n-    u"lc": [],\n-    u"li": [],\n-    u"lk": [],\n-    u"lr": [],\n-    u"ls": [],\n-    u"lt": [],\n-    u"lu": [u"lb"],\n-    u"lv": [u"lv"],\n-    u"ly": [],\n-    u"ma": [],\n-    u"mc": [],\n-    u"md": [u"mo"],\n-    u"me": [],\n-    u"mg": [u"mg"],\n-    u"mh": [],\n-    u"mil": [u"en"],\n-    u"mk": [],\n-    u"ml": [],\n-    u"mm": [],\n-    u"mn": [u"mn"],\n-    u"mo": [],\n-    u"mobi": [],\n-    u"mp": [],\n-    u"mq": [],\n-    u"mr": [],\n-    u"ms": [],\n-    u"mt": [u"mt"],\n-    u"mu": [],\n-    u"museum": [],\n-    u"mv": [],\n-    u"mw": [],\n-    u"mx": [],\n-    u"my": [],\n-    u"mz": [],\n-    u"na": [],\n-    u"name": [],\n-    u"nc": [],\n-    u"ne": [],\n-    u"net": [],\n-    u"nf": [],\n-    u"ng": [],\n-    u"ni": [],\n-    u"nl": [u"nl"],\n-    u"no": [u"no"],\n-    u"np": [],\n-    u"nr": [],\n-    u"nu": [],\n-    u"nz": [],\n-    u"om": [u"en"],\n-    u"org": [],\n-    u"pa": [],\n-    u"pe": [],\n-    u"pf": [],\n-    u"pg": [],\n-    u"ph": [],\n-    u"pk": [],\n-    u"pl": [u"pl"],\n-    u"pm": [],\n-    u"pn": [],\n-    u"pr": [u"es"],\n-    u"pro": [],\n-    u"ps": [u"ar"],\n-    u"pt": [u"pt"],\n-    u"pw": [],\n-    u"py": [],\n-    u"qa": [],\n-    u"re": [],\n-    u"ro": [u"ro"],\n-    u"rs": [],\n-    u"ru": [u"ru"],\n-    u"rw": [],\n-    u"sa": [u"ar"],\n-    u"sb": [],\n-    u"sc": [],\n-    u"sd": [u"su"],\n-    u"se": [u"sv"],\n-    u"sg": [u"si"],\n-    u"sh": [],\n-    u"si": [u"sl"],\n-    u"sj": [],\n-    u"sk": [u"sk"],\n-    u"sl": [],\n-    u"sm": [],\n-    u"sn": [u"fr"],\n-    u"so": [u"so"],\n-    u"sr": [u"nl"],\n-    u"ss": [],\n-    u"st": [],\n-    u"su": [u"ru"],\n-    u"sv": [],\n-    u"sy": [],\n-    u"sz": [],\n-    u"tc": [u"tr"],\n-    u"td": [],\n-    u"tel": [],\n-    u"tf": [],\n-    u"tg": [u"to"],\n-    u"th": [u"th"],\n-    u"tj": [u"fa"],\n-    u"tk": [u"tk"],\n-    u"tl": [u"pt"],\n-    u"tm": [u"tk"],\n-    u"tn": [],\n-    u"to": [],\n-    u"tp": [u"pt"],\n-    u"tr": [],\n-    u"travel": [],\n-    u"tt": [],\n-    u"tv": [],\n-    u"tw": [u"zh"],\n-    u"tz": [],\n-    u"ua": [],\n-    u"ug": [],\n-    u"uk": [u"en"],\n-    u"us": [u"en"],\n-    u"uy": [],\n-    u"uz": [],\n-    u"va": [u"it"],\n-    u"vc": [],\n-    u"ve": [],\n-    u"vg": [],\n-    u"vi": [u"en"],\n-    u"vn": [u"vi"],\n-    u"vu": [],\n-    u"wf": [],\n-    u"ws": [u"sm"],\n-    u"xxx": [],\n-    u"ye": [],\n-    u"yt": [],\n-    u"yu": [u"sh"],\n-    u"za": [u"af"],\n-    u"zm": [],\n-    u"zw": [],\n+    "ac": [],\n+    "ad": [],\n+    "ae": [],\n+    "aero": [],\n+    "af": [],\n+    "ag": [],\n+    "ai": [],\n+    "al": [],\n+    "am": [],\n+    "an": [],\n+    "ao": [],\n+    "aq": ["en"],\n+    "ar": ["pt"],\n+    "arpa": ["en"],\n+    "as": ["en"],\n+    "asia": [],\n+    "at": ["de"],\n+    "au": ["en"],\n+    "aw": [],\n+    "ax": [],\n+    "az": [],\n+    "ba": ["bs"],\n+    "bb": [],\n+    "bd": [],\n+    "be": ["nl", "fr"],\n+    "bf": [],\n+    "bg": [],\n+    "bh": [],\n+    "bi": [],\n+    "biz": [],\n+    "bj": [],\n+    "bm": [],\n+    "bn": [],\n+    "bo": [],\n+    "br": ["pt"],\n+    "bs": [],\n+    "bt": [],\n+    "bv": [],\n+    "bw": [],\n+    "by": [],\n+    "bz": [],\n+    "ca": ["en"],\n+    "cat": ["ca"],\n+    "cc": [],\n+    "cd": [],\n+    "cf": [],\n+    "cg": [],\n+    "ch": ["de"],\n+    "ci": [],\n+    "ck": [],\n+    "cl": [],\n+    "cm": [],\n+    "cn": ["zh"],\n+    "co": [],\n+    "com": [],\n+    "coop": [],\n+    "cr": ["es"],\n+    "cu": [],\n+    "cv": [],\n+    "cx": [],\n+    "cy": [],\n+    "cz": [],\n+    "de": ["de"],\n+    "dj": [],\n+    "dk": ["da"],\n+    "dm": [],\n+    "do": [],\n+    "dz": [],\n+    "ec": [],\n+    "edu": ["en"],\n+    "ee": ["et"],\n+    "eg": [],\n+    "er": [],\n+    "es": ["es"],\n+    "et": [],\n+    "eu": [],\n+    "fi": ["fi"],\n+    "fj": [],\n+    "fk": [],\n+    "fm": [],\n+    "fo": ["fo"],\n+    "fr": ["fr"],\n+    "ga": [],\n+    "gb": ["en"],\n+    "gd": [],\n+    "ge": ["ka"],\n+    "gf": [],\n+    "gg": [],\n+    "gh": [],\n+    "gi": [],\n+    "gl": [],\n+    "gm": [],\n+    "gn": [],\n+    "gov": ["en"],\n+    "gp": [],\n+    "gq": [],\n+    "gr": ["gr"],\n+    "gs": [],\n+    "gt": [],\n+    "gu": [],\n+    "gw": [],\n+    "gy": [],\n+    "hk": [],\n+    "hm": [],\n+    "hn": [],\n+    "hr": ["hr"],\n+    "ht": [],\n+    "hu": ["hu"],\n+    "id": [],\n+    "ie": [],\n+    "il": ["he"],\n+    "im": ["en"],\n+    "in": ["hi"],\n+    "info": [],\n+    "int": [],\n+    "io": ["en"],\n+    "iq": ["ar"],\n+    "ir": ["ar"],\n+    "is": ["is"],\n+    "it": ["it"],\n+    "je": ["en"],\n+    "jm": [],\n+    "jo": [],\n+    "jobs": [],\n+    "jp": ["ja"],\n+    "ke": [],\n+    "kg": [],\n+    "kh": [],\n+    "ki": [],\n+    "km": [],\n+    "kn": [],\n+    "kp": ["ko"],\n+    "kr": ["ko"],\n+    "kw": [],\n+    "ky": [],\n+    "kz": ["kk"],\n+    "la": [],\n+    "lb": [],\n+    "lc": [],\n+    "li": [],\n+    "lk": [],\n+    "lr": [],\n+    "ls": [],\n+    "lt": [],\n+    "lu": ["lb"],\n+    "lv": ["lv"],\n+    "ly": [],\n+    "ma": [],\n+    "mc": [],\n+    "md": ["mo"],\n+    "me": [],\n+    "mg": ["mg"],\n+    "mh": [],\n+    "mil": ["en"],\n+    "mk": [],\n+    "ml": [],\n+    "mm": [],\n+    "mn": ["mn"],\n+    "mo": [],\n+    "mobi": [],\n+    "mp": [],\n+    "mq": [],\n+    "mr": [],\n+    "ms": [],\n+    "mt": ["mt"],\n+    "mu": [],\n+    "museum": [],\n+    "mv": [],\n+    "mw": [],\n+    "mx": [],\n+    "my": [],\n+    "mz": [],\n+    "na": [],\n+    "name": [],\n+    "nc": [],\n+    "ne": [],\n+    "net": [],\n+    "nf": [],\n+    "ng": [],\n+    "ni": [],\n+    "nl": ["nl"],\n+    "no": ["no"],\n+    "np": [],\n+    "nr": [],\n+    "nu": [],\n+    "nz": [],\n+    "om": ["en"],\n+    "org": [],\n+    "pa": [],\n+    "pe": [],\n+    "pf": [],\n+    "pg": [],\n+    "ph": [],\n+    "pk": [],\n+    "pl": ["pl"],\n+    "pm": [],\n+    "pn": [],\n+    "pr": ["es"],\n+    "pro": [],\n+    "ps": ["ar"],\n+    "pt": ["pt"],\n+    "pw": [],\n+    "py": [],\n+    "qa": [],\n+    "re": [],\n+    "ro": ["ro"],\n+    "rs": [],\n+    "ru": ["ru"],\n+    "rw": [],\n+    "sa": ["ar"],\n+    "sb": [],\n+    "sc": [],\n+    "sd": ["su"],\n+    "se": ["sv"],\n+    "sg": ["si"],\n+    "sh": [],\n+    "si": ["sl"],\n+    "sj": [],\n+    "sk": ["sk"],\n+    "sl": [],\n+    "sm": [],\n+    "sn": ["fr"],\n+    "so": ["so"],\n+    "sr": ["nl"],\n+    "ss": [],\n+    "st": [],\n+    "su": ["ru"],\n+    "sv": [],\n+    "sy": [],\n+    "sz": [],\n+    "tc": ["tr"],\n+    "td": [],\n+    "tel": [],\n+    "tf": [],\n+    "tg": ["to"],\n+    "th": ["th"],\n+    "tj": ["fa"],\n+    "tk": ["tk"],\n+    "tl": ["pt"],\n+    "tm": ["tk"],\n+    "tn": [],\n+    "to": [],\n+    "tp": ["pt"],\n+    "tr": [],\n+    "travel": [],\n+    "tt": [],\n+    "tv": [],\n+    "tw": ["zh"],\n+    "tz": [],\n+    "ua": [],\n+    "ug": [],\n+    "uk": ["en"],\n+    "us": ["en"],\n+    "uy": [],\n+    "uz": [],\n+    "va": ["it"],\n+    "vc": [],\n+    "ve": [],\n+    "vg": [],\n+    "vi": ["en"],\n+    "vn": ["vi"],\n+    "vu": [],\n+    "wf": [],\n+    "ws": ["sm"],\n+    "xxx": [],\n+    "ye": [],\n+    "yt": [],\n+    "yu": ["sh"],\n+    "za": ["af"],\n+    "zm": [],\n+    "zw": [],\n }\ndiff --git a/plone/i18n/locales/countries.py b/plone/i18n/locales/countries.py\nindex 5ad1df0..b7f74c0 100644\n--- a/plone/i18n/locales/countries.py\n+++ b/plone/i18n/locales/countries.py\n@@ -1,5 +1,3 @@\n-# -*- coding: UTF-8 -*-\n-\n from plone.i18n.locales.interfaces import ICountryAvailability\n from zope.interface import implementer\n \n@@ -7,7 +5,7 @@\n \n \n @implementer(ICountryAvailability)\n-class CountryAvailability(object):\n+class CountryAvailability:\n     """A list of available coutries."""\n \n     def getAvailableCountries(self):\n@@ -20,7 +18,7 @@ def getCountries(self):\n \n     def getCountryListing(self):\n         """Return a sequence of country code and country name tuples."""\n-        return [(code, _countrylist[code][u"name"]) for code in _countrylist]\n+        return [(code, _countrylist[code]["name"]) for code in _countrylist]\n \n \n countries = CountryAvailability()\n@@ -36,691 +34,688 @@ def getCountryListing(self):\n # part of the list for historical reasons: an\n \n _countrylist = {\n-    u"ad": {u"name": "Andorra", u"flag": u"/++resource++country-flags/ad.gif"},\n-    u"ae": {\n-        u"name": "United Arab Emirates",\n-        u"flag": u"/++resource++country-flags/ae.gif",\n-    },\n-    u"af": {\n-        u"name": "Afghanistan",\n-        u"flag": u"/++resource++country-flags/af.gif",\n-    },\n-    u"ag": {\n-        u"name": "Antigua and Barbuda",\n-        u"flag": u"/++resource++country-flags/ag.gif",\n-    },\n-    u"ai": {\n-        u"name": "Anguilla",\n-        u"flag": u"/++resource++country-flags/ai.gif",\n-    },\n-    u"al": {u"name": "Albania", u"flag": u"/++resource++country-flags/al.gif"},\n-    u"am": {u"name": "Armenia", u"flag": u"/++resource++country-flags/am.gif"},\n-    u"an": {\n-        u"name": "Netherlands Antilles",\n-        u"flag": u"/++resource++country-flags/an.gif",\n-    },\n-    u"ao": {u"name": "Angola", u"flag": u"/++resource++country-flags/ao.gif"},\n-    u"aq": {\n-        u"name": "Antarctica",\n-        u"flag": u"/++resource++country-flags/aq.gif",\n-    },\n-    u"ar": {\n-        u"name": "Argentina",\n-        u"flag": u"/++resource++country-flags/ar.gif",\n-    },\n-    u"as": {\n-        u"name": "American Samoa",\n-        u"flag": u"/++resource++country-flags/as.gif",\n-    },\n-    u"at": {u"name": "Austria", u"flag": u"/++resource++country-flags/at.gif"},\n-    u"au": {\n-        u"name": "Australia",\n-        u"flag": u"/++resource++country-flags/au.gif",\n-    },\n-    u"aw": {u"name": "Aruba", u"flag": u"/++resource++country-flags/aw.gif"},\n-    u"ax": {\n-        u"name": "Oland Islands",\n-        u"flag": u"/++resource++country-flags/ax.gif",\n-    },\n-    u"az": {\n-        u"name": "Azerbaijan",\n-        u"flag": u"/++resource++country-flags/az.gif",\n-    },\n-    u"ba": {\n-        u"name": "Bosnia and Herzegovina",\n-        u"flag": u"/++resource++country-flags/ba.gif",\n-    },\n-    u"bb": {\n-        u"name": "Barbados",\n-        u"flag": u"/++resource++country-flags/bb.gif",\n-    },\n-    u"bd": {\n-        u"name": "Bangladesh",\n-        u"flag": u"/++resource++country-flags/bd.gif",\n-    },\n-    u"be": {u"name": "Belgium", u"flag": u"/++resource++country-flags/be.gif"},\n-    u"bf": {\n-        u"name": "Burkina Faso",\n-        u"flag": u"/++resource++country-flags/bf.gif",\n-    },\n-    u"bg": {\n-        u"name": "Bulgaria",\n-        u"flag": u"/++resource++country-flags/bg.gif",\n-    },\n-    u"bh": {u"name": "Bahrain", u"flag": u"/++resource++country-flags/bh.gif"},\n-    u"bi": {u"name": "Burundi", u"flag": u"/++resource++country-flags/bi.gif"},\n-    u"bj": {u"name": "Benin", u"flag": u"/++resource++country-flags/bj.gif"},\n-    u"bl": {\n-        u"name": "Saint Barth\xc3\xa9lemy",\n-        u"flag": u"/++resource++country-flags/bl.gif",\n-    },\n-    u"bm": {u"name": "Bermuda", u"flag": u"/++resource++country-flags/bm.gif"},\n-    u"bn": {\n-        u"name": "Brunei Darussalam",\n-        u"flag": u"/++resource++country-flags/bn.gif",\n-    },\n-    u"bo": {u"name": "Bolivia", u"flag": u"/++resource++country-flags/bo.gif"},\n-    u"bq": {\n-        u"name": "Bonaire, Sint Eustatius and Saba",\n-        u"flag": u"/++resource++country-flags/bq.gif",\n-    },\n-    u"br": {u"name": "Brazil", u"flag": u"/++resource++country-flags/br.gif"},\n-    u"bs": {u"name": "Bahamas", u"flag": u"/++resource++country-flags/bs.gif"},\n-    u"bt": {u"name": "Bhutan", u"flag": u"/++resource++country-flags/bt.gif"},\n-    u"bv": {\n-        u"name": "Bouvet Island",\n-        u"flag": u"/++resource++country-flags/bv.gif",\n-    },\n-    u"bw": {\n-        u"name": "Botswana",\n-        u"flag": u"/++resource++country-flags/bw.gif",\n-    },\n-    u"by": {u"name": "Belarus", u"flag": u"/++resource++country-flags/by.gif"},\n-    u"bz": {u"name": "Belize", u"flag": u"/++resource++country-flags/bz.gif"},\n-    u"ca": {u"name": "Canada", u"flag": u"/++resource++country-flags/ca.gif"},\n-    u"cc": {\n-        u"name": "Cocos (Keeling) Islands",\n-        u"flag": u"/++resource++country-flags/cc.gif",\n-    },\n-    u"cd": {\n-        u"name": "Congo The Democratic Republic of",\n-        u"flag": u"/++resource++country-flags/cd.gif",\n-    },\n-    u"cf": {\n-        u"name": "Central African Republic",\n-        u"flag": u"/++resource++country-flags/cf.gif",\n-    },\n-    u"cg": {u"name": "Congo", u"flag": u"/++resource++country-flags/cg.gif"},\n-    u"ch": {\n-        u"name": "Switzerland",\n-        u"flag": u"/++resource++country-flags/ch.gif",\n-    },\n-    u"ci": {\n-        u"name": "Cote d\'Ivoire",\n-        u"flag": u"/++resource++country-flags/ci.gif",\n-    },\n-    u"ck": {\n-        u"name": "Cook Islands",\n-        u"flag": u"/++resource++country-flags/ck.gif",\n-    },\n-    u"cl": {u"name": "Chile", u"flag": u"/++resource++country-flags/cl.gif"},\n-    u"cm": {\n-        u"name": "Cameroon",\n-        u"flag": u"/++resource++country-flags/cm.gif",\n-    },\n-    u"cn": {u"name": "China", u"flag": u"/++resource++country-flags/cn.gif"},\n-    u"co": {\n-        u"name": "Colombia",\n-        u"flag": u"/++resource++country-flags/co.gif",\n-    },\n-    u"cr": {\n-        u"name": "Costa Rica",\n-        u"flag": u"/++resource++country-flags/cr.gif",\n-    },\n-    u"cs": {\n-        u"name": "Serbia and Montenegro",\n-        u"flag": u"/++resource++country-flags/cs.gif",\n-    },\n-    u"cu": {u"name": "Cuba", u"flag": u"/++resource++country-flags/cu.gif"},\n-    u"cv": {\n-        u"name": "Cape Verde",\n-        u"flag": u"/++resource++country-flags/cv.gif",\n-    },\n-    u"cw": {u"name": "Cura\xc3\xa7ao", u"flag": u"/++resource++country-flags/cw.png"},\n-    u"cx": {\n-        u"name": "Christmas Island",\n-        u"flag": u"/++resource++country-flags/cx.gif",\n-    },\n-    u"cy": {u"name": "Cyprus", u"flag": u"/++resource++country-flags/cy.gif"},\n-    u"cz": {\n-        u"name": "Czech Republic",\n-        u"flag": u"/++resource++country-flags/cz.gif",\n-    },\n-    u"de": {u"name": "Germany", u"flag": u"/++resource++country-flags/de.gif"},\n-    u"dj": {\n-        u"name": "Djibouti",\n-        u"flag": u"/++resource++country-flags/dj.gif",\n-    },\n-    u"dk": {u"name": "Denmark", u"flag": u"/++resource++country-flags/dk.gif"},\n-    u"dm": {\n-        u"name": "Dominica",\n-        u"flag": u"/++resource++country-flags/dm.gif",\n-    },\n-    u"do": {\n-        u"name": "Dominican Republic",\n-        u"flag": u"/++resource++country-flags/do.gif",\n-    },\n-    u"dz": {u"name": "Algeria", u"flag": u"/++resource++country-flags/dz.gif"},\n-    u"ec": {u"name": "Ecuador", u"flag": u"/++resource++country-flags/ec.gif"},\n-    u"ee": {u"name": "Estonia", u"flag": u"/++resource++country-flags/ee.gif"},\n-    u"eg": {u"name": "Egypt", u"flag": u"/++resource++country-flags/eg.gif"},\n-    u"eh": {\n-        u"name": "Western Sahara",\n-        u"flag": u"/++resource++country-flags/eh.gif",\n-    },\n-    u"er": {u"name": "Eritrea", u"flag": u"/++resource++country-flags/er.gif"},\n-    u"es": {u"name": "Spain", u"flag": u"/++resource++country-flags/es.gif"},\n-    u"et": {\n-        u"name": "Ethiopia",\n-        u"flag": u"/++resource++country-flags/et.gif",\n-    },\n-    u"fi": {u"name": "Finland", u"flag": u"/++resource++country-flags/fi.gif"},\n-    u"fj": {u"name": "Fiji", u"flag": u"/++resource++country-flags/fj.gif"},\n-    u"fk": {\n-        u"name": "Falkland Islands (Malvinas)",\n-        u"flag": u"/++resource++country-flags/fk.gif",\n-    },\n-    u"fm": {\n-        u"name": "Micronesia Federated States of",\n-        u"flag": u"/++resource++country-flags/fm.gif",\n-    },\n-    u"fo": {\n-        u"name": "Faroe Islands",\n-        u"flag": u"/++resource++country-flags/fo.gif",\n-    },\n-    u"fr": {u"name": "France", u"flag": u"/++resource++country-flags/fr.gif"},\n-    u"ga": {u"name": "Gabon", u"flag": u"/++resource++country-flags/ga.gif"},\n-    u"gb": {\n-        u"name": "United Kingdom",\n-        u"flag": u"/++resource++country-flags/gb.gif",\n-    },\n-    u"gd": {u"name": "Grenada", u"flag": u"/++resource++country-flags/gd.gif"},\n-    u"ge": {u"name": "Georgia", u"flag": u"/++resource++country-flags/ge.gif"},\n-    u"gf": {\n-        u"name": "French Guiana",\n-        u"flag": u"/++resource++country-flags/gf.gif",\n-    },\n-    u"gg": {\n-        u"name": "Guernsey",\n-        u"flag": u"/++resource++country-flags/gg.gif",\n-    },\n-    u"gh": {u"name": "Ghana", u"flag": u"/++resource++country-flags/gh.gif"},\n-    u"gi": {\n-        u"name": "Gibraltar",\n-        u"flag": u"/++resource++country-flags/gi.gif",\n-    },\n-    u"gl": {\n-        u"name": "Greenland",\n-        u"flag": u"/++resource++country-flags/gl.gif",\n-    },\n-    u"gm": {u"name": "Gambia", u"flag": u"/++resource++country-flags/gm.gif"},\n-    u"gn": {u"name": "Guinea", u"flag": u"/++resource++country-flags/gn.gif"},\n-    u"gp": {\n-        u"name": "Guadeloupe",\n-        u"flag": u"/++resource++country-flags/gp.gif",\n-    },\n-    u"gq": {\n-        u"name": "Equatorial Guinea",\n-        u"flag": u"/++resource++country-flags/gq.gif",\n-    },\n-    u"gr": {u"name": "Greece", u"flag": u"/++resource++country-flags/gr.gif"},\n-    u"gs": {\n-        u"name": "South Georgia and the South Sandwich Islands",\n-        u"flag": u"/++resource++country-flags/gs.gif",\n-    },\n-    u"gt": {\n-        u"name": "Guatemala",\n-        u"flag": u"/++resource++country-flags/gt.gif",\n-    },\n-    u"gu": {u"name": "Guam", u"flag": u"/++resource++country-flags/gu.gif"},\n-    u"gw": {\n-        u"name": "Guinea-Bissau",\n-        u"flag": u"/++resource++country-flags/gw.gif",\n-    },\n-    u"gy": {u"name": "Guyana", u"flag": u"/++resource++country-flags/gy.gif"},\n-    u"hk": {\n-        u"name": "Hong Kong",\n-        u"flag": u"/++resource++country-flags/hk.gif",\n-    },\n-    u"hm": {\n-        u"name": "Heard Island and McDonald Islands",\n-        u"flag": u"/++resource++country-flags/hm.gif",\n-    },\n-    u"hn": {\n-        u"name": "Honduras",\n-        u"flag": u"/++resource++country-flags/hn.gif",\n-    },\n-    u"hr": {u"name": "Croatia", u"flag": u"/++resource++country-flags/hr.gif"},\n-    u"ht": {u"name": "Haiti", u"flag": u"/++resource++country-flags/ht.gif"},\n-    u"hu": {u"name": "Hungary", u"flag": u"/++resource++country-flags/hu.gif"},\n-    u"id": {\n-        u"name": "Indonesia",\n-        u"flag": u"/++resource++country-flags/id.gif",\n-    },\n-    u"ie": {u"name": "Ireland", u"flag": u"/++resource++country-flags/ie.gif"},\n-    u"il": {u"name": "Israel", u"flag": u"/++resource++country-flags/il.gif"},\n-    u"im": {\n-        u"name": "Isle of Man",\n-        u"flag": u"/++resource++country-flags/im.gif",\n-    },\n-    u"in": {u"name": "India", u"flag": u"/++resource++country-flags/in.gif"},\n-    u"io": {\n-        u"name": "British Indian Ocean Territory",\n-        u"flag": u"/++resource++country-flags/io.gif",\n-    },\n-    u"iq": {u"name": "Iraq", u"flag": u"/++resource++country-flags/iq.gif"},\n-    u"ir": {\n-        u"name": "Iran Islamic Republic of",\n-        u"flag": u"/++resource++country-flags/ir.gif",\n-    },\n-    u"is": {u"name": "Iceland", u"flag": u"/++resource++country-flags/is.gif"},\n-    u"it": {u"name": "Italy", u"flag": u"/++resource++country-flags/it.gif"},\n-    u"je": {u"name": "Jersey", u"flag": u"/++resource++country-flags/je.gif"},\n-    u"jm": {u"name": "Jamaica", u"flag": u"/++resource++country-flags/jm.gif"},\n-    u"jo": {u"name": "Jordan", u"flag": u"/++resource++country-flags/jo.gif"},\n-    u"jp": {u"name": "Japan", u"flag": u"/++resource++country-flags/jp.gif"},\n-    u"ke": {u"name": "Kenya", u"flag": u"/++resource++country-flags/ke.gif"},\n-    u"kg": {\n-        u"name": "Kyrgyzstan",\n-        u"flag": u"/++resource++country-flags/kg.gif",\n-    },\n-    u"kh": {\n-        u"name": "Cambodia",\n-        u"flag": u"/++resource++country-flags/kh.gif",\n-    },\n-    u"ki": {\n-        u"name": "Kiribati",\n-        u"flag": u"/++resource++country-flags/ki.gif",\n-    },\n-    u"km": {u"name": "Comoros", u"flag": u"/++resource++country-flags/km.gif"},\n-    u"kn": {\n-        u"name": "Saint Kitts and Nevis",\n-        u"flag": u"/++resource++country-flags/kn.gif",\n-    },\n-    u"kp": {\n-        u"name": "Korea Democratic People\'s Republic of",\n-        u"flag": u"/++resource++country-flags/kp.gif",\n-    },\n-    u"kr": {\n-        u"name": "Korea Republic of",\n-        u"flag": u"/++resource++country-flags/kr.gif",\n-    },\n-    u"kw": {u"name": "Kuwait", u"flag": u"/++resource++country-flags/kw.gif"},\n-    u"ky": {\n-        u"name": "Cayman Islands",\n-        u"flag": u"/++resource++country-flags/ky.gif",\n-    },\n-    u"kz": {\n-        u"name": "Kazakhstan",\n-        u"flag": u"/++resource++country-flags/kz.gif",\n-    },\n-    u"la": {\n-        u"name": "Lao People\'s Democratic Republic",\n-        u"flag": u"/++resource++country-flags/la.gif",\n-    },\n-    u"lb": {u"name": "Lebanon", u"flag": u"/++resource++country-flags/lb.gif"},\n-    u"lc": {\n-        u"name": "Saint Lucia",\n-        u"flag": u"/++resource++country-flags/lc.gif",\n-    },\n-    u"li": {\n-        u"name": "Liechtenstein",\n-        u"flag": u"/++resource++country-flags/li.gif",\n-    },\n-    u"lk": {\n-        u"name": "Sri Lanka",\n-        u"flag": u"/++resource++country-flags/lk.gif",\n-    },\n-    u"lr": {u"name": "Liberia", u"flag": u"/++resource++country-flags/lr.gif"},\n-    u"ls": {u"name": "Lesotho", u"flag": u"/++resource++country-flags/ls.gif"},\n-    u"lt": {\n-        u"name": "Lithuania",\n-        u"flag": u"/++resource++country-flags/lt.gif",\n-    },\n-    u"lu": {\n-        u"name": "Luxembourg",\n-        u"flag": u"/++resource++country-flags/lu.gif",\n-    },\n-    u"lv": {u"name": "Latvia", u"flag": u"/++resource++country-flags/lv.gif"},\n-    u"ly": {\n-        u"name": "Libyan Arab Jamahiriya",\n-        u"flag": u"/++resource++country-flags/ly.gif",\n-    },\n-    u"ma": {u"name": "Morocco", u"flag": u"/++resource++country-flags/ma.gif"},\n-    u"mc": {u"name": "Monaco", u"flag": u"/++resource++country-flags/mc.gif"},\n-    u"md": {\n-        u"name": "Moldova Republic of",\n-        u"flag": u"/++resource++country-flags/md.gif",\n-    },\n-    u"me": {\n-        u"name": "Montenegro",\n-        u"flag": u"/++resource++country-flags/me.gif",\n-    },\n-    u"mf": {\n-        u"name": "Saint Martin (French part)",\n-        u"flag": u"/++resource++country-flags/mf.png",\n-    },\n-    u"mg": {\n-        u"name": "Madagascar",\n-        u"flag": u"/++resource++country-flags/mg.gif",\n-    },\n-    u"mh": {\n-        u"name": "Marshall Islands",\n-        u"flag": u"/++resource++country-flags/mh.gif",\n-    },\n-    u"mk": {\n-        u"name": "Macedonia the former Yugoslavian Republic of",\n-        u"flag": u"/++resource++country-flags/mk.gif",\n-    },\n-    u"ml": {u"name": "Mali", u"flag": u"/++resource++country-flags/ml.gif"},\n-    u"mm": {u"name": "Myanmar", u"flag": u"/++resource++country-flags/mm.gif"},\n-    u"mn": {\n-        u"name": "Mongolia",\n-        u"flag": u"/++resource++country-flags/mn.gif",\n-    },\n-    u"mo": {u"name": "Macao", u"flag": u"/++resource++country-flags/mo.gif"},\n-    u"mp": {\n-        u"name": "Northern Mariana Islands",\n-        u"flag": u"/++resource++country-flags/mp.gif",\n-    },\n-    u"mq": {\n-        u"name": "Martinique",\n-        u"flag": u"/++resource++country-flags/mq.gif",\n-    },\n-    u"mr": {\n-        u"name": "Mauritania",\n-        u"flag": u"/++resource++country-flags/mr.gif",\n-    },\n-    u"ms": {\n-        u"name": "Montserrat",\n-        u"flag": u"/++resource++country-flags/ms.gif",\n-    },\n-    u"mt": {u"name": "Malta", u"flag": u"/++resource++country-flags/mt.gif"},\n-    u"mu": {\n-        u"name": "Mauritius",\n-        u"flag": u"/++resource++country-flags/mu.gif",\n-    },\n-    u"mv": {\n-        u"name": "Maldives",\n-        u"flag": u"/++resource++country-flags/mv.gif",\n-    },\n-    u"mw": {u"name": "Malawi", u"flag": u"/++resource++country-flags/mw.gif"},\n-    u"mx": {u"name": "Mexico", u"flag": u"/++resource++country-flags/mx.gif"},\n-    u"my": {\n-        u"name": "Malaysia",\n-        u"flag": u"/++resource++country-flags/my.gif",\n-    },\n-    u"mz": {\n-        u"name": "Mozambique",\n-        u"flag": u"/++resource++country-flags/mz.gif",\n-    },\n-    u"na": {u"name": "Namibia", u"flag": u"/++resource++country-flags/na.gif"},\n-    u"nc": {\n-        u"name": "New Caledonia",\n-        u"flag": u"/++resource++country-flags/nc.gif",\n-    },\n-    u"ne": {u"name": "Niger", u"flag": u"/++resource++country-flags/ne.gif"},\n-    u"nf": {\n-        u"name": "Norfolk Island",\n-        u"flag": u"/++resource++country-flags/nf.gif",\n-    },\n-    u"ng": {u"name": "Nigeria", u"flag": u"/++resource++country-flags/ng.gif"},\n-    u"ni": {\n-        u"name": "Nicaragua",\n-        u"flag": u"/++resource++country-flags/ni.gif",\n-    },\n-    u"nl": {\n-        u"name": "Netherlands",\n-        u"flag": u"/++resource++country-flags/nl.gif",\n-    },\n-    u"no": {u"name": "Norway", u"flag": u"/++resource++country-flags/no.gif"},\n-    u"np": {u"name": "Nepal", u"flag": u"/++resource++country-flags/np.gif"},\n-    u"nr": {u"name": "Nauru", u"flag": u"/++resource++country-flags/nr.gif"},\n-    u"nu": {u"name": "Niue", u"flag": u"/++resource++country-flags/nu.gif"},\n-    u"nz": {\n-        u"name": "New Zealand",\n-        u"flag": u"/++resource++country-flags/nz.gif",\n-    },\n-    u"om": {u"name": "Oman", u"flag": u"/++resource++country-flags/om.gif"},\n-    u"pa": {u"name": "Panama", u"flag": u"/++resource++country-flags/pa.gif"},\n-    u"pe": {u"name": "Peru", u"flag": u"/++resource++country-flags/pe.gif"},\n-    u"pf": {\n-        u"name": "French Polynesia",\n-        u"flag": u"/++resource++country-flags/pf.gif",\n-    },\n-    u"pg": {\n-        u"name": "Papua New Guinea",\n-        u"flag": u"/++resource++country-flags/pg.gif",\n-    },\n-    u"ph": {\n-        u"name": "Philippines",\n-        u"flag": u"/++resource++country-flags/ph.gif",\n-    },\n-    u"pk": {\n-        u"name": "Pakistan",\n-        u"flag": u"/++resource++country-flags/pk.gif",\n-    },\n-    u"pl": {u"name": "Poland", u"flag": u"/++resource++country-flags/pl.gif"},\n-    u"pm": {\n-        u"name": "Saint Pierre and Miquelon",\n-        u"flag": u"/++resource++country-flags/pm.gif",\n-    },\n-    u"pn": {\n-        u"name": "Pitcairn",\n-        u"flag": u"/++resource++country-flags/pn.gif",\n-    },\n-    u"pr": {\n-        u"name": "Puerto Rico",\n-        u"flag": u"/++resource++country-flags/pr.gif",\n-    },\n-    u"ps": {\n-        u"name": "Palestinian Territory occupied",\n-        u"flag": u"/++resource++country-flags/ps.gif",\n-    },\n-    u"pt": {\n-        u"name": "Portugal",\n-        u"flag": u"/++resource++country-flags/pt.gif",\n-    },\n-    u"pw": {u"name": "Palau", u"flag": u"/++resource++country-flags/pw.gif"},\n-    u"py": {\n-        u"name": "Paraguay",\n-        u"flag": u"/++resource++country-flags/py.gif",\n-    },\n-    u"qa": {u"name": "Qatar", u"flag": u"/++resource++country-flags/qa.gif"},\n-    u"re": {u"name": "Reunion", u"flag": u"/++resource++country-flags/re.gif"},\n-    u"ro": {u"name": "Romania", u"flag": u"/++resource++country-flags/ro.gif"},\n-    u"rs": {u"name": "Serbia", u"flag": u"/++resource++country-flags/rs.gif"},\n-    u"ru": {\n-        u"name": "Russian Federation",\n-        u"flag": u"/++resource++country-flags/ru.gif",\n-    },\n-    u"rw": {u"name": "Rwanda", u"flag": u"/++resource++country-flags/rw.gif"},\n-    u"sa": {\n-        u"name": "Saudi Arabia",\n-        u"flag": u"/++resource++country-flags/sa.gif",\n-    },\n-    u"sb": {\n-        u"name": "Solomon Islands",\n-        u"flag": u"/++resource++country-flags/sb.gif",\n-    },\n-    u"sc": {\n-        u"name": "Seychelles",\n-        u"flag": u"/++resource++country-flags/sc.gif",\n-    },\n-    u"sd": {u"name": "Sudan", u"flag": u"/++resource++country-flags/sd.gif"},\n-    u"se": {u"name": "Sweden", u"flag": u"/++resource++country-flags/se.gif"},\n-    u"sg": {\n-        u"name": "Singapore",\n-        u"flag": u"/++resource++country-flags/sg.gif",\n-    },\n-    u"sh": {\n-        u"name": "Saint Helena",\n-        u"flag": u"/++resource++country-flags/sh.gif",\n-    },\n-    u"si": {\n-        u"name": "Slovenia",\n-        u"flag": u"/++resource++country-flags/si.gif",\n-    },\n-    u"sj": {\n-        u"name": "Svalbard and Jan Mayen",\n-        u"flag": u"/++resource++country-flags/sj.gif",\n-    },\n-    u"sk": {\n-        u"name": "Slovakia",\n-        u"flag": u"/++resource++country-flags/sk.gif",\n-    },\n-    u"sl": {\n-        u"name": "Sierra Leone",\n-        u"flag": u"/++resource++country-flags/sl.gif",\n-    },\n-    u"sm": {\n-        u"name": "San Marino",\n-        u"flag": u"/++resource++country-flags/sm.gif",\n-    },\n-    u"sn": {u"name": "Senegal", u"flag": u"/++resource++country-flags/sn.gif"},\n-    u"so": {u"name": "Somalia", u"flag": u"/++resource++country-flags/so.gif"},\n-    u"sr": {\n-        u"name": "Suriname",\n-        u"flag": u"/++resource++country-flags/sr.gif",\n-    },\n-    u"ss": {\n-        u"name": "South Sudan",\n-        u"flag": u"/++resource++country-flags/ss.png",\n-    },\n-    u"st": {\n-        u"name": "Sao Tome and Principe",\n-        u"flag": u"/++resource++country-flags/st.gif",\n-    },\n-    u"sv": {\n-        u"name": "El Salvador",\n-        u"flag": u"/++resource++country-flags/sv.gif",\n-    },\n-    u"sx": {\n-        u"name": "Sint Maarten (Dutch part)",\n-        u"flag": u"/++resource++country-flags/sx.png",\n-    },\n-    u"sy": {\n-        u"name": "Syrian Arab Republic",\n-        u"flag": u"/++resource++country-flags/sy.gif",\n-    },\n-    u"sz": {\n-        u"name": "Swaziland",\n-        u"flag": u"/++resource++country-flags/sz.gif",\n-    },\n-    u"tc": {\n-        u"name": "Turks and Caicos Islands",\n-        u"flag": u"/++resource++country-flags/tc.gif",\n-    },\n-    u"td": {u"name": "Chad", u"flag": u"/++resource++country-flags/td.gif"},\n-    u"tf": {\n-        u"name": "French Southern Territories",\n-        u"flag": u"/++resource++country-flags/tf.gif",\n-    },\n-    u"tg": {u"name": "Togo", u"flag": u"/++resource++country-flags/tg.gif"},\n-    u"th": {\n-        u"name": "Thailand",\n-        u"flag": u"/++resource++country-flags/th.gif",\n-    },\n-    u"tj": {\n-        u"name": "Tajikistan",\n-        u"flag": u"/++resource++country-flags/tj.gif",\n-    },\n-    u"tk": {u"name": "Tokelau", u"flag": u"/++resource++country-flags/tk.gif"},\n-    u"tl": {\n-        u"name": "Timor-Leste",\n-        u"flag": u"/++resource++country-flags/tl.gif",\n-    },\n-    u"tm": {\n-        u"name": "Turkmenistan",\n-        u"flag": u"/++resource++country-flags/tm.gif",\n-    },\n-    u"tn": {u"name": "Tunisia", u"flag": u"/++resource++country-flags/tn.gif"},\n-    u"to": {u"name": "Tonga", u"flag": u"/++resource++country-flags/to.gif"},\n-    u"tr": {u"name": "Turkey", u"flag": u"/++resource++country-flags/tr.gif"},\n-    u"tt": {\n-        u"name": "Trinidad and Tobago",\n-        u"flag": u"/++resource++country-flags/tt.gif",\n-    },\n-    u"tv": {u"name": "Tuvalu", u"flag": u"/++resource++country-flags/tv.gif"},\n-    u"tw": {u"name": "Taiwan", u"flag": u"/++resource++country-flags/tw.gif"},\n-    u"tz": {\n-        u"name": "Tanzania United Republic of",\n-        u"flag": u"/++resource++country-flags/tz.gif",\n-    },\n-    u"ua": {u"name": "Ukraine", u"flag": u"/++resource++country-flags/ua.gif"},\n-    u"ug": {u"name": "Uganda", u"flag": u"/++resource++country-flags/ug.gif"},\n-    u"um": {\n-        u"name": "United States Minor Outlying Islands",\n-        u"flag": u"/++resource++country-flags/um.gif",\n-    },\n-    u"us": {\n-        u"name": "United States",\n-        u"flag": u"/++resource++country-flags/us.gif",\n-    },\n-    u"uy": {u"name": "Uruguay", u"flag": u"/++resource++country-flags/uy.gif"},\n-    u"uz": {\n-        u"name": "Uzbekistan",\n-        u"flag": u"/++resource++country-flags/uz.gif",\n-    },\n-    u"va": {\n-        u"name": "Holy See (Vatican City State)",\n-        u"flag": u"/++resource++country-flags/va.gif",\n-    },\n-    u"vc": {\n-        u"name": "Saint Vincent and the Grenadines",\n-        u"flag": u"/++resource++country-flags/vc.gif",\n-    },\n-    u"ve": {\n-        u"name": "Venezuela",\n-        u"flag": u"/++resource++country-flags/ve.gif",\n-    },\n-    u"vg": {\n-        u"name": "Virgin Islands British",\n-        u"flag": u"/++resource++country-flags/vg.gif",\n-    },\n-    u"vi": {\n-        u"name": "Virgin Islands U.S.",\n-        u"flag": u"/++resource++country-flags/vi.gif",\n-    },\n-    u"vn": {\n-        u"name": "Viet Nam",\n-        u"flag": u"/++resource++country-flags/vn.gif",\n-    },\n-    u"vu": {u"name": "Vanuatu", u"flag": u"/++resource++country-flags/vu.gif"},\n-    u"wf": {\n-        u"name": "Wallis and Futuna",\n-        u"flag": u"/++resource++country-flags/wf.gif",\n-    },\n-    u"ws": {u"name": "Samoa", u"flag": u"/++resource++country-flags/ws.gif"},\n-    u"ye": {u"name": "Yemen", u"flag": u"/++resource++country-flags/ye.gif"},\n-    u"yt": {u"name": "Mayotte", u"flag": u"/++resource++country-flags/yt.gif"},\n-    u"za": {\n-        u"name": "South Africa",\n-        u"flag": u"/++resource++country-flags/za.gif",\n-    },\n-    u"zm": {u"name": "Zambia", u"flag": u"/++resource++country-flags/zm.gif"},\n-    u"zw": {\n-        u"name": "Zimbabwe",\n-        u"flag": u"/++resource++country-flags/zw.gif",\n-    },\n-    u"xk": {u"name": "Kosovo", u"flag": u"/++resource++country-flags/xk.gif"},\n+    "ad": {"name": "Andorra", "flag": "/++resource++country-flags/ad.gif"},\n+    "ae": {\n+        "name": "United Arab Emirates",\n+        "flag": "/++resource++country-flags/ae.gif",\n+    },\n+    "af": {\n+        "name": "Afghanistan",\n+        "flag": "/++resource++country-flags/af.gif",\n+    },\n+    "ag": {\n+        "name": "Antigua and Barbuda",\n+        "flag": "/++resource++country-flags/ag.gif",\n+    },\n+    "ai": {\n+        "name": "Anguilla",\n+        "flag": "/++resource++country-flags/ai.gif",\n+    },\n+    "al": {"name": "Albania", "flag": "/++resource++country-flags/al.gif"},\n+    "am": {"name": "Armenia", "flag": "/++resource++country-flags/am.gif"},\n+    "an": {\n+        "name": "Netherlands Antilles",\n+        "flag": "/++resource++country-flags/an.gif",\n+    },\n+    "ao": {"name": "Angola", "flag": "/++resource++country-flags/ao.gif"},\n+    "aq": {\n+        "name": "Antarctica",\n+        "flag": "/++resource++country-flags/aq.gif",\n+    },\n+    "ar": {\n+        "name": "Argentina",\n+        "flag": "/++resource++country-flags/ar.gif",\n+    },\n+    "as": {\n+        "name": "American Samoa",\n+        "flag": "/++resource++country-flags/as.gif",\n+    },\n+    "at": {"name": "Austria", "flag": "/++resource++country-flags/at.gif"},\n+    "au": {\n+        "name": "Australia",\n+        "flag": "/++resource++country-flags/au.gif",\n+    },\n+    "aw": {"name": "Aruba", "flag": "/++resource++country-flags/aw.gif"},\n+    "ax": {\n+        "name": "Oland Islands",\n+        "flag": "/++resource++country-flags/ax.gif",\n+    },\n+    "az": {\n+        "name": "Azerbaijan",\n+        "flag": "/++resource++country-flags/az.gif",\n+    },\n+    "ba": {\n+        "name": "Bosnia and Herzegovina",\n+        "flag": "/++resource++country-flags/ba.gif",\n+    },\n+    "bb": {\n+        "name": "Barbados",\n+        "flag": "/++resource++country-flags/bb.gif",\n+    },\n+    "bd": {\n+        "name": "Bangladesh",\n+        "flag": "/++resource++country-flags/bd.gif",\n+    },\n+    "be": {"name": "Belgium", "flag": "/++resource++country-flags/be.gif"},\n+    "bf": {\n+        "name": "Burkina Faso",\n+        "flag": "/++resource++country-flags/bf.gif",\n+    },\n+    "bg": {\n+        "name": "Bulgaria",\n+        "flag": "/++resource++country-flags/bg.gif",\n+    },\n+    "bh": {"name": "Bahrain", "flag": "/++resource++country-flags/bh.gif"},\n+    "bi": {"name": "Burundi", "flag": "/++resource++country-flags/bi.gif"},\n+    "bj": {"name": "Benin", "flag": "/++resource++country-flags/bj.gif"},\n+    "bl": {\n+        "name": "Saint Barth\xc3\xa9lemy",\n+        "flag": "/++resource++country-flags/bl.gif",\n+    },\n+    "bm": {"name": "Bermuda", "flag": "/++resource++country-flags/bm.gif"},\n+    "bn": {\n+        "name": "Brunei Darussalam",\n+        "flag": "/++resource++country-flags/bn.gif",\n+    },\n+    "bo": {"name": "Bolivia", "flag": "/++resource++country-flags/bo.gif"},\n+    "bq": {\n+        "name": "Bonaire, Sint Eustatius and Saba",\n+        "flag": "/++resource++country-flags/bq.gif",\n+    },\n+    "br": {"name": "Brazil", "flag": "/++resource++country-flags/br.gif"},\n+    "bs": {"name": "Bahamas", "flag": "/++resource++country-flags/bs.gif"},\n+    "bt": {"name": "Bhutan", "flag": "/++resource++country-flags/bt.gif"},\n+    "bv": {\n+        "name": "Bouvet Island",\n+        "flag": "/++resource++country-flags/bv.gif",\n+    },\n+    "bw": {\n+        "name": "Botswana",\n+        "flag": "/++resource++country-flags/bw.gif",\n+    },\n+    "by": {"name": "Belarus", "flag": "/++resource++country-flags/by.gif"},\n+    "bz": {"name": "Belize", "flag": "/++resource++country-flags/bz.gif"},\n+    "ca": {"name": "Canada", "flag": "/++resource++country-flags/ca.gif"},\n+    "cc": {\n+        "name": "Cocos (Keeling) Islands",\n+        "flag": "/++resource++country-flags/cc.gif",\n+    },\n+    "cd": {\n+        "name": "Congo The Democratic Republic of",\n+        "flag": "/++resource++country-flags/cd.gif",\n+    },\n+    "cf": {\n+        "name": "Central African Republic",\n+        "flag": "/++resource++country-flags/cf.gif",\n+    },\n+    "cg": {"name": "Congo", "flag": "/++resource++country-flags/cg.gif"},\n+    "ch": {\n+        "name": "Switzerland",\n+        "flag": "/++resource++country-flags/ch.gif",\n+    },\n+    "ci": {\n+        "name": "Cote d\'Ivoire",\n+        "flag": "/++resource++country-flags/ci.gif",\n+    },\n+    "ck": {\n+        "name": "Cook Islands",\n+        "flag": "/++resource++country-flags/ck.gif",\n+    },\n+    "cl": {"name": "Chile", "flag": "/++resource++country-flags/cl.gif"},\n+    "cm": {\n+        "name": "Cameroon",\n+        "flag": "/++resource++country-flags/cm.gif",\n+    },\n+    "cn": {"name": "China", "flag": "/++resource++country-flags/cn.gif"},\n+    "co": {\n+        "name": "Colombia",\n+        "flag": "/++resource++country-flags/co.gif",\n+    },\n+    "cr": {\n+        "name": "Costa Rica",\n+        "flag": "/++resource++country-flags/cr.gif",\n+    },\n+    "cs": {\n+        "name": "Serbia and Montenegro",\n+        "flag": "/++resource++country-flags/cs.gif",\n+    },\n+    "cu": {"name": "Cuba", "flag": "/++resource++country-flags/cu.gif"},\n+    "cv": {\n+        "name": "Cape Verde",\n+        "flag": "/++resource++country-flags/cv.gif",\n+    },\n+    "cw": {"name": "Cura\xc3\xa7ao", "flag": "/++resource++country-flags/cw.png"},\n+    "cx": {\n+        "name": "Christmas Island",\n+        "flag": "/++resource++country-flags/cx.gif",\n+    },\n+    "cy": {"name": "Cyprus", "flag": "/++resource++country-flags/cy.gif"},\n+    "cz": {\n+        "name": "Czech Republic",\n+        "flag": "/++resource++country-flags/cz.gif",\n+    },\n+    "de": {"name": "Germany", "flag": "/++resource++country-flags/de.gif"},\n+    "dj": {\n+        "name": "Djibouti",\n+        "flag": "/++resource++country-flags/dj.gif",\n+    },\n+    "dk": {"name": "Denmark", "flag": "/++resource++country-flags/dk.gif"},\n+    "dm": {\n+        "name": "Dominica",\n+        "flag": "/++resource++country-flags/dm.gif",\n+    },\n+    "do": {\n+        "name": "Dominican Republic",\n+        "flag": "/++resource++country-flags/do.gif",\n+    },\n+    "dz": {"name": "Algeria", "flag": "/++resource++country-flags/dz.gif"},\n+    "ec": {"name": "Ecuador", "flag": "/++resource++country-flags/ec.gif"},\n+    "ee": {"name": "Estonia", "flag": "/++resource++country-flags/ee.gif"},\n+    "eg": {"name": "Egypt", "flag": "/++resource++country-flags/eg.gif"},\n+    "eh": {\n+        "name": "Western Sahara",\n+        "flag": "/++resource++country-flags/eh.gif",\n+    },\n+    "er": {"name": "Eritrea", "flag": "/++resource++country-flags/er.gif"},\n+    "es": {"name": "Spain", "flag": "/++resource++country-flags/es.gif"},\n+    "et": {\n+        "name": "Ethiopia",\n+        "flag": "/++resource++country-flags/et.gif",\n+    },\n+    "fi": {"name": "Finland", "flag": "/++resource++country-flags/fi.gif"},\n+    "fj": {"name": "Fiji", "flag": "/++resource++country-flags/fj.gif"},\n+    "fk": {\n+        "name": "Falkland Islands (Malvinas)",\n+        "flag": "/++resource++country-flags/fk.gif",\n+    },\n+    "fm": {\n+        "name": "Micronesia Federated States of",\n+        "flag": "/++resource++country-flags/fm.gif",\n+    },\n+    "fo": {\n+        "name": "Faroe Islands",\n+        "flag": "/++resource++country-flags/fo.gif",\n+    },\n+    "fr": {"name": "France", "flag": "/++resource++country-flags/fr.gif"},\n+    "ga": {"name": "Gabon", "flag": "/++resource++country-flags/ga.gif"},\n+    "gb": {\n+        "name": "United Kingdom",\n+        "flag": "/++resource++country-flags/gb.gif",\n+    },\n+    "gd": {"name": "Grenada", "flag": "/++resource++country-flags/gd.gif"},\n+    "ge": {"name": "Georgia", "flag": "/++resource++country-flags/ge.gif"},\n+    "gf": {\n+        "name": "French Guiana",\n+        "flag": "/++resource++country-flags/gf.gif",\n+    },\n+    "gg": {\n+        "name": "Guernsey",\n+        "flag": "/++resource++country-flags/gg.gif",\n+    },\n+    "gh": {"name": "Ghana", "flag": "/++resource++country-flags/gh.gif"},\n+    "gi": {\n+        "name": "Gibraltar",\n+        "flag": "/++resource++country-flags/gi.gif",\n+    },\n+    "gl": {\n+        "name": "Greenland",\n+        "flag": "/++resource++country-flags/gl.gif",\n+    },\n+    "gm": {"name": "Gambia", "flag": "/++resource++country-flags/gm.gif"},\n+    "gn": {"name": "Guinea", "flag": "/++resource++country-flags/gn.gif"},\n+    "gp": {\n+        "name": "Guadeloupe",\n+        "flag": "/++resource++country-flags/gp.gif",\n+    },\n+    "gq": {\n+        "name": "Equatorial Guinea",\n+        "flag": "/++resource++country-flags/gq.gif",\n+    },\n+    "gr": {"name": "Greece", "flag": "/++resource++country-flags/gr.gif"},\n+    "gs": {\n+        "name": "South Georgia and the South Sandwich Islands",\n+        "flag": "/++resource++country-flags/gs.gif",\n+    },\n+    "gt": {\n+        "name": "Guatemala",\n+        "flag": "/++resource++country-flags/gt.gif",\n+    },\n+    "gu": {"name": "Guam", "flag": "/++resource++country-flags/gu.gif"},\n+    "gw": {\n+        "name": "Guinea-Bissau",\n+        "flag": "/++resource++country-flags/gw.gif",\n+    },\n+    "gy": {"name": "Guyana", "flag": "/++resource++country-flags/gy.gif"},\n+    "hk": {\n+        "name": "Hong Kong",\n+        "flag": "/++resource++country-flags/hk.gif",\n+    },\n+    "hm": {\n+        "name": "Heard Island and McDonald Islands",\n+        "flag": "/++resource++country-flags/hm.gif",\n+    },\n+    "hn": {\n+        "name": "Honduras",\n+        "flag": "/++resource++country-flags/hn.gif",\n+    },\n+    "hr": {"name": "Croatia", "flag": "/++resource++country-flags/hr.gif"},\n+    "ht": {"name": "Haiti", "flag": "/++resource++country-flags/ht.gif"},\n+    "hu": {"name": "Hungary", "flag": "/++resource++country-flags/hu.gif"},\n+    "id": {\n+        "name": "Indonesia",\n+        "flag": "/++resource++country-flags/id.gif",\n+    },\n+    "ie": {"name": "Ireland", "flag": "/++resource++country-flags/ie.gif"},\n+    "il": {"name": "Israel", "flag": "/++resource++country-flags/il.gif"},\n+    "im": {\n+        "name": "Isle of Man",\n+        "flag": "/++resource++country-flags/im.gif",\n+    },\n+    "in": {"name": "India", "flag": "/++resource++country-flags/in.gif"},\n+    "io": {\n+        "name": "British Indian Ocean Territory",\n+        "flag": "/++resource++country-flags/io.gif",\n+    },\n+    "iq": {"name": "Iraq", "flag": "/++resource++country-flags/iq.gif"},\n+    "ir": {\n+        "name": "Iran Islamic Republic of",\n+        "flag": "/++resource++country-flags/ir.gif",\n+    },\n+    "is": {"name": "Iceland", "flag": "/++resource++country-flags/is.gif"},\n+    "it": {"name": "Italy", "flag": "/++resource++country-flags/it.gif"},\n+    "je": {"name": "Jersey", "flag": "/++resource++country-flags/je.gif"},\n+    "jm": {"name": "Jamaica", "flag": "/++resource++country-flags/jm.gif"},\n+    "jo": {"name": "Jordan", "flag": "/++resource++country-flags/jo.gif"},\n+    "jp": {"name": "Japan", "flag": "/++resource++country-flags/jp.gif"},\n+    "ke": {"name": "Kenya", "flag": "/++resource++country-flags/ke.gif"},\n+    "kg": {\n+        "name": "Kyrgyzstan",\n+        "flag": "/++resource++country-flags/kg.gif",\n+    },\n+    "kh": {\n+        "name": "Cambodia",\n+        "flag": "/++resource++country-flags/kh.gif",\n+    },\n+    "ki": {\n+        "name": "Kiribati",\n+        "flag": "/++resource++country-flags/ki.gif",\n+    },\n+    "km": {"name": "Comoros", "flag": "/++resource++country-flags/km.gif"},\n+    "kn": {\n+        "name": "Saint Kitts and Nevis",\n+        "flag": "/++resource++country-flags/kn.gif",\n+    },\n+    "kp": {\n+        "name": "Korea Democratic People\'s Republic of",\n+        "flag": "/++resource++country-flags/kp.gif",\n+    },\n+    "kr": {\n+        "name": "Korea Republic of",\n+        "flag": "/++resource++country-flags/kr.gif",\n+    },\n+    "kw": {"name": "Kuwait", "flag": "/++resource++country-flags/kw.gif"},\n+    "ky": {\n+        "name": "Cayman Islands",\n+        "flag": "/++resource++country-flags/ky.gif",\n+    },\n+    "kz": {\n+        "name": "Kazakhstan",\n+        "flag": "/++resource++country-flags/kz.gif",\n+    },\n+    "la": {\n+        "name": "Lao People\'s Democratic Republic",\n+        "flag": "/++resource++country-flags/la.gif",\n+    },\n+    "lb": {"name": "Lebanon", "flag": "/++resource++country-flags/lb.gif"},\n+    "lc": {\n+        "name": "Saint Lucia",\n+        "flag": "/++resource++country-flags/lc.gif",\n+    },\n+    "li": {\n+        "name": "Liechtenstein",\n+        "flag": "/++resource++country-flags/li.gif",\n+    },\n+    "lk": {\n+        "name": "Sri Lanka",\n+        "flag": "/++resource++country-flags/lk.gif",\n+    },\n+    "lr": {"name": "Liberia", "flag": "/++resource++country-flags/lr.gif"},\n+    "ls": {"name": "Lesotho", "flag": "/++resource++country-flags/ls.gif"},\n+    "lt": {\n+        "name": "Lithuania",\n+        "flag": "/++resource++country-flags/lt.gif",\n+    },\n+    "lu": {\n+        "name": "Luxembourg",\n+        "flag": "/++resource++country-flags/lu.gif",\n+    },\n+    "lv": {"name": "Latvia", "flag": "/++resource++country-flags/lv.gif"},\n+    "ly": {\n+        "name": "Libyan Arab Jamahiriya",\n+        "flag": "/++resource++country-flags/ly.gif",\n+    },\n+    "ma": {"name": "Morocco", "flag": "/++resource++country-flags/ma.gif"},\n+    "mc": {"name": "Monaco", "flag": "/++resource++country-flags/mc.gif"},\n+    "md": {\n+        "name": "Moldova Republic of",\n+        "flag": "/++resource++country-flags/md.gif",\n+    },\n+    "me": {\n+        "name": "Montenegro",\n+        "flag": "/++resource++country-flags/me.gif",\n+    },\n+    "mf": {\n+        "name": "Saint Martin (French part)",\n+        "flag": "/++resource++country-flags/mf.png",\n+    },\n+    "mg": {\n+        "name": "Madagascar",\n+        "flag": "/++resource++country-flags/mg.gif",\n+    },\n+    "mh": {\n+        "name": "Marshall Islands",\n+        "flag": "/++resource++country-flags/mh.gif",\n+    },\n+    "mk": {\n+        "name": "Macedonia the former Yugoslavian Republic of",\n+        "flag": "/++resource++country-flags/mk.gif",\n+    },\n+    "ml": {"name": "Mali", "flag": "/++resource++country-flags/ml.gif"},\n+    "mm": {"name": "Myanmar", "flag": "/++resource++country-flags/mm.gif"},\n+    "mn": {\n+        "name": "Mongolia",\n+        "flag": "/++resource++country-flags/mn.gif",\n+    },\n+    "mo": {"name": "Macao", "flag": "/++resource++country-flags/mo.gif"},\n+    "mp": {\n+        "name": "Northern Mariana Islands",\n+        "flag": "/++resource++country-flags/mp.gif",\n+    },\n+    "mq": {\n+        "name": "Martinique",\n+        "flag": "/++resource++country-flags/mq.gif",\n+    },\n+    "mr": {\n+        "name": "Mauritania",\n+        "flag": "/++resource++country-flags/mr.gif",\n+    },\n+    "ms": {\n+        "name": "Montserrat",\n+        "flag": "/++resource++country-flags/ms.gif",\n+    },\n+    "mt": {"name": "Malta", "flag": "/++resource++country-flags/mt.gif"},\n+    "mu": {\n+        "name": "Mauritius",\n+        "flag": "/++resource++country-flags/mu.gif",\n+    },\n+    "mv": {\n+        "name": "Maldives",\n+        "flag": "/++resource++country-flags/mv.gif",\n+    },\n+    "mw": {"name": "Malawi", "flag": "/++resource++country-flags/mw.gif"},\n+    "mx": {"name": "Mexico", "flag": "/++resource++country-flags/mx.gif"},\n+    "my": {\n+        "name": "Malaysia",\n+        "flag": "/++resource++country-flags/my.gif",\n+    },\n+    "mz": {\n+        "name": "Mozambique",\n+        "flag": "/++resource++country-flags/mz.gif",\n+    },\n+    "na": {"name": "Namibia", "flag": "/++resource++country-flags/na.gif"},\n+    "nc": {\n+        "name": "New Caledonia",\n+        "flag": "/++resource++country-flags/nc.gif",\n+    },\n+    "ne": {"name": "Niger", "flag": "/++resource++country-flags/ne.gif"},\n+    "nf": {\n+        "name": "Norfolk Island",\n+        "flag": "/++resource++country-flags/nf.gif",\n+    },\n+    "ng": {"name": "Nigeria", "flag": "/++resource++country-flags/ng.gif"},\n+    "ni": {\n+        "name": "Nicaragua",\n+        "flag": "/++resource++country-flags/ni.gif",\n+    },\n+    "nl": {\n+        "name": "Netherlands",\n+        "flag": "/++resource++country-flags/nl.gif",\n+    },\n+    "no": {"name": "Norway", "flag": "/++resource++country-flags/no.gif"},\n+    "np": {"name": "Nepal", "flag": "/++resource++country-flags/np.gif"},\n+    "nr": {"name": "Nauru", "flag": "/++resource++country-flags/nr.gif"},\n+    "nu": {"name": "Niue", "flag": "/++resource++country-flags/nu.gif"},\n+    "nz": {\n+        "name": "New Zealand",\n+        "flag": "/++resource++country-flags/nz.gif",\n+    },\n+    "om": {"name": "Oman", "flag": "/++resource++country-flags/om.gif"},\n+    "pa": {"name": "Panama", "flag": "/++resource++country-flags/pa.gif"},\n+    "pe": {"name": "Peru", "flag": "/++resource++country-flags/pe.gif"},\n+    "pf": {\n+        "name": "French Polynesia",\n+        "flag": "/++resource++country-flags/pf.gif",\n+    },\n+    "pg": {\n+        "name": "Papua New Guinea",\n+        "flag": "/++resource++country-flags/pg.gif",\n+    },\n+    "ph": {\n+        "name": "Philippines",\n+        "flag": "/++resource++country-flags/ph.gif",\n+    },\n+    "pk": {\n+        "name": "Pakistan",\n+        "flag": "/++resource++country-flags/pk.gif",\n+    },\n+    "pl": {"name": "Poland", "flag": "/++resource++country-flags/pl.gif"},\n+    "pm": {\n+        "name": "Saint Pierre and Miquelon",\n+        "flag": "/++resource++country-flags/pm.gif",\n+    },\n+    "pn": {\n+        "name": "Pitcairn",\n+        "flag": "/++resource++country-flags/pn.gif",\n+    },\n+    "pr": {\n+        "name": "Puerto Rico",\n+        "flag": "/++resource++country-flags/pr.gif",\n+    },\n+    "ps": {\n+        "name": "Palestinian Territory occupied",\n+        "flag": "/++resource++country-flags/ps.gif",\n+    },\n+    "pt": {\n+        "name": "Portugal",\n+        "flag": "/++resource++country-flags/pt.gif",\n+    },\n+    "pw": {"name": "Palau", "flag": "/++resource++country-flags/pw.gif"},\n+    "py": {\n+        "name": "Paraguay",\n+        "flag": "/++resource++country-flags/py.gif",\n+    },\n+    "qa": {"name": "Qatar", "flag": "/++resource++country-flags/qa.gif"},\n+    "re": {"name": "Reunion", "flag": "/++resource++country-flags/re.gif"},\n+    "ro": {"name": "Romania", "flag": "/++resource++country-flags/ro.gif"},\n+    "rs": {"name": "Serbia", "flag": "/++resource++country-flags/rs.gif"},\n+    "ru": {\n+        "name": "Russian Federation",\n+        "flag": "/++resource++country-flags/ru.gif",\n+    },\n+    "rw": {"name": "Rwanda", "flag": "/++resource++country-flags/rw.gif"},\n+    "sa": {\n+        "name": "Saudi Arabia",\n+        "flag": "/++resource++country-flags/sa.gif",\n+    },\n+    "sb": {\n+        "name": "Solomon Islands",\n+        "flag": "/++resource++country-flags/sb.gif",\n+    },\n+    "sc": {\n+        "name": "Seychelles",\n+        "flag": "/++resource++country-flags/sc.gif",\n+    },\n+    "sd": {"name": "Sudan", "flag": "/++resource++country-flags/sd.gif"},\n+    "se": {"name": "Sweden", "flag": "/++resource++country-flags/se.gif"},\n+    "sg": {\n+        "name": "Singapore",\n+        "flag": "/++resource++country-flags/sg.gif",\n+    },\n+    "sh": {\n+        "name": "Saint Helena",\n+        "flag": "/++resource++country-flags/sh.gif",\n+    },\n+    "si": {\n+        "name": "Slovenia",\n+        "flag": "/++resource++country-flags/si.gif",\n+    },\n+    "sj": {\n+        "name": "Svalbard and Jan Mayen",\n+        "flag": "/++resource++country-flags/sj.gif",\n+    },\n+    "sk": {\n+        "name": "Slovakia",\n+        "flag": "/++resource++country-flags/sk.gif",\n+    },\n+    "sl": {\n+        "name": "Sierra Leone",\n+        "flag": "/++resource++country-flags/sl.gif",\n+    },\n+    "sm": {\n+        "name": "San Marino",\n+        "flag": "/++resource++country-flags/sm.gif",\n+    },\n+    "sn": {"name": "Senegal", "flag": "/++resource++country-flags/sn.gif"},\n+    "so": {"name": "Somalia", "flag": "/++resource++country-flags/so.gif"},\n+    "sr": {\n+        "name": "Suriname",\n+        "flag": "/++resource++country-flags/sr.gif",\n+    },\n+    "ss": {\n+        "name": "South Sudan",\n+        "flag": "/++resource++country-flags/ss.png",\n+    },\n+    "st": {\n+        "name": "Sao Tome and Principe",\n+        "flag": "/++resource++country-flags/st.gif",\n+    },\n+    "sv": {\n+        "name": "El Salvador",\n+        "flag": "/++resource++country-flags/sv.gif",\n+    },\n+    "sx": {\n+        "name": "Sint Maarten (Dutch part)",\n+        "flag": "/++resource++country-flags/sx.png",\n+    },\n+    "sy": {\n+        "name": "Syrian Arab Republic",\n+        "flag": "/++resource++country-flags/sy.gif",\n+    },\n+    "sz": {\n+        "name": "Swaziland",\n+        "flag": "/++resource++country-flags/sz.gif",\n+    },\n+    "tc": {\n+        "name": "Turks and Caicos Islands",\n+        "flag": "/++resource++country-flags/tc.gif",\n+    },\n+    "td": {"name": "Chad", "flag": "/++resource++country-flags/td.gif"},\n+    "tf": {\n+        "name": "French Southern Territories",\n+        "flag": "/++resource++country-flags/tf.gif",\n+    },\n+    "tg": {"name": "Togo", "flag": "/++resource++country-flags/tg.gif"},\n+    "th": {\n+        "name": "Thailand",\n+        "flag": "/++resource++country-flags/th.gif",\n+    },\n+    "tj": {\n+        "name": "Tajikistan",\n+        "flag": "/++resource++country-flags/tj.gif",\n+    },\n+    "tk": {"name": "Tokelau", "flag": "/++resource++country-flags/tk.gif"},\n+    "tl": {\n+        "name": "Timor-Leste",\n+        "flag": "/++resource++country-flags/tl.gif",\n+    },\n+    "tm": {\n+        "name": "Turkmenistan",\n+        "flag": "/++resource++country-flags/tm.gif",\n+    },\n+    "tn": {"name": "Tunisia", "flag": "/++resource++country-flags/tn.gif"},\n+    "to": {"name": "Tonga", "flag": "/++resource++country-flags/to.gif"},\n+    "tr": {"name": "Turkey", "flag": "/++resource++country-flags/tr.gif"},\n+    "tt": {\n+        "name": "Trinidad and Tobago",\n+        "flag": "/++resource++country-flags/tt.gif",\n+    },\n+    "tv": {"name": "Tuvalu", "flag": "/++resource++country-flags/tv.gif"},\n+    "tw": {"name": "Taiwan", "flag": "/++resource++country-flags/tw.gif"},\n+    "tz": {\n+        "name": "Tanzania United Republic of",\n+        "flag": "/++resource++country-flags/tz.gif",\n+    },\n+    "ua": {"name": "Ukraine", "flag": "/++resource++country-flags/ua.gif"},\n+    "ug": {"name": "Uganda", "flag": "/++resource++country-flags/ug.gif"},\n+    "um": {\n+        "name": "United States Minor Outlying Islands",\n+        "flag": "/++resource++country-flags/um.gif",\n+    },\n+    "us": {\n+        "name": "United States",\n+        "flag": "/++resource++country-flags/us.gif",\n+    },\n+    "uy": {"name": "Uruguay", "flag": "/++resource++country-flags/uy.gif"},\n+    "uz": {\n+        "name": "Uzbekistan",\n+        "flag": "/++resource++country-flags/uz.gif",\n+    },\n+    "va": {\n+        "name": "Holy See (Vatican City State)",\n+        "flag": "/++resource++country-flags/va.gif",\n+    },\n+    "vc": {\n+        "name": "Saint Vincent and the Grenadines",\n+        "flag": "/++resource++country-flags/vc.gif",\n+    },\n+    "ve": {\n+        "name": "Venezuela",\n+        "flag": "/++resource++country-flags/ve.gif",\n+    },\n+    "vg": {\n+        "name": "Virgin Islands British",\n+        "flag": "/++resource++country-flags/vg.gif",\n+    },\n+    "vi": {\n+        "name": "Virgin Islands U.S.",\n+        "flag": "/++resource++country-flags/vi.gif",\n+    },\n+    "vn": {\n+        "name": "Viet Nam",\n+        "flag": "/++resource++country-flags/vn.gif",\n+    },\n+    "vu": {"name": "Vanuatu", "flag": "/++resource++country-flags/vu.gif"},\n+    "wf": {\n+        "name": "Wallis and Futuna",\n+        "flag": "/++resource++country-flags/wf.gif",\n+    },\n+    "ws": {"name": "Samoa", "flag": "/++resource++country-flags/ws.gif"},\n+    "ye": {"name": "Yemen", "flag": "/++resource++country-flags/ye.gif"},\n+    "yt": {"name": "Mayotte", "flag": "/++resource++country-flags/yt.gif"},\n+    "za": {\n+        "name": "South Africa",\n+        "flag": "/++resource++country-flags/za.gif",\n+    },\n+    "zm": {"name": "Zambia", "flag": "/++resource++country-flags/zm.gif"},\n+    "zw": {\n+        "name": "Zimbabwe",\n+        "flag": "/++resource++country-flags/zw.gif",\n+    },\n+    "xk": {"name": "Kosovo", "flag": "/++resource++country-flags/xk.gif"},\n }\n \n # convert the utf-8 encoded values to unicode\n for code in _countrylist:\n     value = _countrylist[code]\n-    if u"name" in value:\n-        if six.PY3:\n-            value[u"name"] = value[u"name"]\n-        else:\n-            value[u"name"] = unicode(value[u"name"], "utf-8")\n+    if "name" in value:\n+        value["name"] = value["name"]\ndiff --git a/plone/i18n/locales/interfaces.py b/plone/i18n/locales/interfaces.py\nindex 3ae0202..e827328 100644\n--- a/plone/i18n/locales/interfaces.py\n+++ b/plone/i18n/locales/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.i18n.interfaces import ILanguageAvailability as IBaseLanguageAvailability\n from zope.interface import Interface\n \ndiff --git a/plone/i18n/locales/languages.py b/plone/i18n/locales/languages.py\nindex 7671c82..b312494 100644\n--- a/plone/i18n/locales/languages.py\n+++ b/plone/i18n/locales/languages.py\n@@ -1,4 +1,3 @@\n-# -*- coding: UTF-8 -*-\n from plone.i18n.locales.interfaces import IContentLanguageAvailability\n from plone.i18n.locales.interfaces import ILanguageAvailability\n from plone.i18n.locales.interfaces import IMetadataLanguageAvailability\n@@ -8,7 +7,7 @@\n \n \n @implementer(ILanguageAvailability)\n-class LanguageAvailability(object):\n+class LanguageAvailability:\n     """A list of available languages."""\n \n     def getAvailableLanguages(self, combined=False):\n@@ -30,7 +29,7 @@ def getLanguageListing(self, combined=False):\n         languages = _languagelist.copy()\n         if combined:\n             languages.update(_combinedlanguagelist.copy())\n-        return [(code, languages[code][u"name"]) for code in languages]\n+        return [(code, languages[code]["name"]) for code in languages]\n \n \n @implementer(IContentLanguageAvailability)\n@@ -60,1446 +59,1434 @@ class MetadataLanguageAvailability(LanguageAvailability):\n # even tough these have later been deprecated from the standard.\n \n _languagelist = {\n-    u"aa": {\n-        u"native": "\xd0\xbc\xd0\xb0\xd0\xb3I\xd0\xb0\xd1\x80\xd1\x83\xd0\xbb \xd0\xbc\xd0\xb0\xd1\x86I",\n-        u"name": "Afar",\n-        u"flag": u"/++resource++country-flags/dj.gif",\n-    },\n-    u"ab": {\n-        u"native": "\xd0\xb1\xd1\x8b\xd0\xb7\xd1\x88\xd3\x99\xd0\xb0",\n-        u"name": "Abkhazian",\n-        u"flag": u"/++resource++country-flags/ge.gif",\n-    },\n-    u"ae": {u"native": "avesta", u"name": "Avestan"},\n-    u"af": {u"native": "Afrikaans", u"name": "Afrikaans"},\n-    u"ak": {u"native": "Akan", u"name": "Akan"},\n-    u"am": {u"native": "\xe1\x8a\xa0\xe1\x88\x9b\xe1\x88\xad\xe1\x8a\x9b", u"name": "Amharic"},\n-    u"an": {u"native": "aragon\xc3\xa9s", u"name": "Aragonese"},\n-    u"ar": {\n-        u"native": "\xd8\xa7\xd9\x84\xd8\xb9\xd8\xb1\xd8\xa8\xd9\x8a\xd8\xa9",\n-        u"name": "Arabic",\n-        u"flag": "/++resource++language-flags/ar.gif",\n-    },\n-    u"as": {u"native": "\xe0\xa6\x85\xe0\xa6\xb8\xe0\xa6\xae\xe0\xa6\xbf\xe0\xa7\x9f\xe0\xa6\xbe", u"name": "Assamese"},\n-    u"ay": {u"native": "Aymara", u"name": "Aymara"},\n-    u"az": {\n-        u"native": "Az\xc9\x99ri T\xc3\xbcrk\xc3\xa7\xc9\x99si",\n-        u"name": "Azerbaijani",\n-        u"flag": u"/++resource++country-flags/az.gif",\n-    },\n-    u"ba": {u"native": "Bashkir", u"name": "Bashkir"},\n-    u"be": {\n-        u"native": "\xd0\x91\xd0\xb5\xd0\xbb\xd0\xb0\xd1\x80\xd1\x83\xd1\x81\xd0\xba\xd1\x96",\n-        u"name": "Belarussian",\n-        u"flag": u"/++resource++country-flags/by.gif",\n-    },\n-    u"bg": {\n-        u"native": "\xd0\x91\xd1\x8a\xd0\xbb\xd0\xb3\xd0\xb0\xd1\x80\xd1\x81\xd0\xba\xd0\xb8",\n-        u"name": "Bulgarian",\n-        u"flag": u"/++resource++country-flags/bg.gif",\n-    },\n-    u"bh": {u"native": "Bihari", u"name": "Bihari"},\n-    u"bi": {u"native": "Bislama", u"name": "Bislama"},\n-    u"bm": {u"native": "bamanankan", u"name": "Bambara"},\n-    u"bn": {\n-        u"native": "\xe0\xa6\xac\xe0\xa6\xbe\xe0\xa6\x82\xe0\xa6\xb2\xe0\xa6\xbe",\n-        u"name": "Bengali",\n-        u"flag": u"/++resource++country-flags/bd.gif",\n-    },\n-    u"bo": {u"native": "\xe0\xbd\x96\xe0\xbd\xbc\xe0\xbd\x91\xe0\xbc\x8b\xe0\xbd\xa6\xe0\xbe\x90\xe0\xbd\x91\xe0\xbc\x8b", u"name": "Tibetan"},\n-    u"br": {u"native": "brezhoneg", u"name": "Breton"},\n-    u"bs": {\n-        u"native": "Bosanski",\n-        u"name": "Bosnian",\n-        u"flag": u"/++resource++country-flags/ba.gif",\n-    },\n-    u"ca": {\n-        u"native": "Catal\xc3\xa0",\n-        u"name": "Catalan",\n-        u"flag": u"/++resource++language-flags/ca.gif",\n-    },\n-    u"ce": {u"native": "\xd0\xbd\xd0\xbe\xd1\x85\xd1\x87\xd0\xb8\xd0\xb9\xd0\xbd \xd0\xbc\xd0\xbe\xd1\x82\xd1\x82", u"name": "Chechen"},\n-    u"ch": {u"native": "Chamoru", u"name": "Chamorro"},\n-    u"co": {u"native": "Corsu", u"name": "Corsican"},\n-    u"cr": {u"native": "\xe1\x93\x80\xe1\x90\xa6\xe1\x90\x83\xe1\x94\xad\xe1\x90\x8d\xe1\x90\x8f\xe1\x90\xa3", u"name": "Cree"},\n-    u"cs": {\n-        u"native": "\xc4\x8ce\xc5\xa1tina",\n-        u"name": "Czech",\n-        u"flag": u"/++resource++country-flags/cz.gif",\n-    },\n-    u"cu": {u"native": "\xd1\xa9\xd0\xb7\xd1\x8b\xd0\xba\xd1\x8a \xd1\x81\xd0\xbb\xd0\xbe\xd0\xb2\xd1\xa3\xd0\xbd\xd1\x8c\xd1\x81\xd0\xba\xd1\x8a", u"name": "Old Church Slavonic"},\n-    u"cv": {u"native": "\xd1\x87\xd3\x91\xd0\xb2\xd0\xb0\xd1\x88 \xd1\x87\xd3\x97\xd0\xbb\xd1\x85\xd0\xb8", u"name": "Chuvash"},\n-    u"cy": {\n-        u"native": "Cymraeg",\n-        u"name": "Welsh",\n-        u"flag": "/++resource++language-flags/cy.gif",\n-    },\n-    u"da": {\n-        u"native": "Dansk",\n-        u"name": "Danish",\n-        u"flag": u"/++resource++country-flags/dk.gif",\n-    },\n-    u"de": {\n-        u"native": "Deutsch",\n-        u"name": "German",\n-        u"flag": u"/++resource++country-flags/de.gif",\n-    },\n-    u"dv": {u"native": "Divehi", u"name": "Maldivian"},\n-    u"dz": {u"native": "Bhutani", u"name": "Indian Bhutani"},\n-    u"ee": {u"native": "E\xca\x8begbe", u"name": "Ewe"},\n-    u"el": {\n-        u"native": "\xce\x95\xce\xbb\xce\xbb\xce\xb7\xce\xbd\xce\xb9\xce\xba\xce\xac",\n-        u"name": "Greek",\n-        u"flag": u"/++resource++country-flags/gr.gif",\n-    },\n-    u"en": {\n-        u"native": "English",\n-        u"name": "English",\n-        u"flag": u"/++resource++country-flags/gb.gif",\n-    },\n-    u"eo": {\n-        u"native": "Esperanto",\n-        u"name": "Esperanto",\n-        u"flag": "/++resource++language-flags/eo.gif",\n-    },\n-    u"es": {\n-        u"native": "Espa\xc3\xb1ol",\n-        u"name": "Spanish",\n-        u"flag": u"/++resource++country-flags/es.gif",\n-    },\n-    u"et": {\n-        u"native": "Eesti",\n-        u"name": "Estonian",\n-        u"flag": u"/++resource++country-flags/ee.gif",\n-    },\n-    u"eu": {\n-        u"native": "Euskara",\n-        u"name": "Basque",\n-        u"flag": "/++resource++language-flags/eu.gif",\n-    },\n-    u"fa": {u"native": "\xd9\x81\xd8\xa7\xd8\xb1\xd8\xb3\xdb\x8c", u"name": "Persian"},\n-    u"ff": {u"native": "Fulfulde", u"name": "Fula"},\n-    u"fi": {\n-        u"native": "Suomi",\n-        u"name": "Finnish",\n-        u"flag": u"/++resource++country-flags/fi.gif",\n-    },\n-    u"fj": {\n-        u"native": "Fiji",\n-        u"name": "Fiji",\n-        u"flag": u"/++resource++country-flags/fj.gif",\n-    },\n-    u"fo": {\n-        u"native": "F\xc3\xb8royska",\n-        u"name": "Faroese",\n-        u"flag": u"/++resource++country-flags/fo.gif",\n-    },\n-    u"fr": {\n-        u"native": "Fran\xc3\xa7ais",\n-        u"name": "French",\n-        u"flag": u"/++resource++country-flags/fr.gif",\n-    },\n-    u"fy": {u"native": "Frysk", u"name": "Frisian"},\n-    u"ga": {u"native": "Gaeilge", u"name": "Irish Gaelic"},\n-    u"gd": {u"native": "G\xc3\xa0idhlig", u"name": "Scottish Gaelic"},\n-    u"gl": {u"native": "Galego", u"name": "Galician"},\n-    u"gn": {u"native": "Guarani", u"name": "Guarani"},\n-    u"gu": {u"native": "\xe0\xaa\x97\xe0\xab\x81\xe0\xaa\x9c\xe0\xaa\xb0\xe0\xaa\xbe\xe0\xaa\xa4\xe0\xab\x80", u"name": "Gujarati"},\n-    u"gv": {u"native": "Gaelg", u"name": "Manx Gaelic"},\n-    u"ha": {u"native": "\xd9\x87\xd9\x8e\xd9\x88\xd9\x8f\xd8\xb3", u"name": "Hausa"},\n-    u"he": {\n-        u"native": "\xd7\xa2\xd7\x91\xd7\xa8\xd7\x99\xd7\xaa",\n-        u"name": "Hebrew",\n-        u"flag": u"/++resource++country-flags/il.gif",\n-    },\n-    u"hi": {\n-        u"native": "\xe0\xa4\xb9\xe0\xa4\xbf\xe0\xa4\x82\xe0\xa4\xa6\xe0\xa5\x80",\n-        u"name": "Hindi",\n-        u"flag": u"/++resource++country-flags/in.gif",\n-    },\n-    u"ho": {u"native": "Hiri Motu", u"name": "Hiri Motu"},\n-    u"hr": {\n-        u"native": "Hrvatski",\n-        u"name": "Croatian",\n-        u"flag": u"/++resource++country-flags/hr.gif",\n-    },\n-    u"ht": {u"native": "Krey\xc3\xb2l ayisyen", u"name": "Haitian"},\n-    u"hu": {\n-        u"native": "Magyar",\n-        u"name": "Hungarian",\n-        u"flag": u"/++resource++country-flags/hu.gif",\n-    },\n-    u"hy": {\n-        u"native": "\xd5\x80\xd5\xa1\xd5\xb5\xd5\xa5\xd6\x80\xd5\xa7\xd5\xb6",\n-        u"name": "Armenian",\n-        u"flag": u"/++resource++country-flags/am.gif",\n-    },\n-    u"hz": {u"native": "Otjiherero", u"name": "Herero"},\n-    u"ia": {u"native": "Interlingua", u"name": "Interlingua"},\n-    u"id": {\n-        u"native": "Bahasa Indonesia",\n-        u"name": "Indonesian",\n-        u"flag": u"/++resource++country-flags/id.gif",\n-    },\n-    u"ie": {u"native": "Interlingue", u"name": "Interlingue"},\n-    u"ig": {u"native": "As\xe1\xbb\xa5s\xe1\xbb\xa5 Igbo", u"name": "Igbo"},\n-    u"ii": {u"native": "Nuosu", u"name": "Nuosu"},\n-    u"ik": {u"native": "I\xc3\xb1upiaq", u"name": "Inupiak"},\n-    u"io": {u"native": "Ido", u"name": "Ido"},\n-    u"is": {\n-        u"native": "\xc3\x8dslenska",\n-        u"name": "Icelandic",\n-        u"flag": u"/++resource++country-flags/is.gif",\n-    },\n-    u"it": {\n-        u"native": "Italiano",\n-        u"name": "Italian",\n-        u"flag": u"/++resource++country-flags/it.gif",\n-    },\n-    u"iu": {u"native": "\xe1\x90\x83\xe1\x93\x84\xe1\x92\x83\xe1\x91\x8e\xe1\x91\x90\xe1\x91\xa6", u"name": "Inuktitut"},\n-    u"ja": {\n-        u"native": "\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e",\n-        u"name": "Japanese",\n-        u"flag": u"/++resource++country-flags/jp.gif",\n-    },\n-    u"jv": {u"native": "Javanese", u"name": "basa Jawa"},\n-    u"ka": {\n-        u"native": "\xe1\x83\xa5\xe1\x83\x90\xe1\x83\xa0\xe1\x83\x97\xe1\x83\xa3\xe1\x83\x9a\xe1\x83\x98",\n-        u"name": "Georgian",\n-        u"flag": u"/++resource++country-flags/ge.gif",\n-    },\n-    u"kg": {u"native": "KiKongo", u"name": "Kongo"},\n-    u"ki": {u"native": "G\xc4\xa9k\xc5\xa9y\xc5\xa9", u"name": "Kikuyu"},\n-    u"kj": {u"native": "Kuanyama", u"name": "Kwanyama"},\n-    u"kk": {\n-        u"native": "\xef\xbb\x97\xef\xba\x8e\xef\xba\xaf\xef\xba\x8d\xef\xbb\x97\xef\xba\xb8\xef\xba\x8e",\n-        u"name": "Kazakh",\n-        u"flag": u"/++resource++country-flags/kz.gif",\n-    },\n-    u"kl": {\n-        u"native": "Greenlandic",\n-        u"name": "Greenlandic",\n-        u"flag": u"/++resource++country-flags/gl.gif",\n-    },\n-    u"km": {\n-        u"native": "\xe1\x9e\x81\xe1\x9f\x92\xe1\x9e\x98\xe1\x9f\x82\xe1\x9e\x9a",\n-        u"name": "Cambodian/Khmer",\n-        u"flag": u"/++resource++country-flags/kh.gif",\n-    },\n-    u"kn": {\n-        u"native": "\xe0\xb2\x95\xe0\xb2\xa8\xe0\xb3\x8d\xe0\xb2\xa8\xe0\xb2\xa1",\n-        u"name": "Kannada",\n-        u"flag": u"/++resource++country-flags/in.gif",\n-    },\n-    u"ko": {\n-        u"native": "\xed\x95\x9c\xea\xb5\xad\xec\x96\xb4",\n-        u"name": "Korean",\n-        u"flag": u"/++resource++country-flags/kr.gif",\n-    },\n-    u"kr": {u"native": "Kanuri", u"name": "Kanuri"},\n-    u"ks": {\n-        u"native": "\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xbd\xe0\xa4\xb6\xe0\xa5\x81\xe0\xa4\xb0",\n-        u"name": "Kashmiri",\n-        u"flag": u"/++resource++country-flags/in.gif",\n-    },\n-    u"ku": {u"native": "Kurd\xc3\xad", u"name": "Kurdish"},\n-    u"kv": {u"native": "\xd0\xba\xd0\xbe\xd0\xbc\xd0\xb8 \xd0\xba\xd1\x8b\xd0\xb2", u"name": "Komi"},\n-    u"kw": {u"native": "Kernewek", u"name": "Cornish"},\n-    u"ky": {u"native": "\xd0\x9a\xd1\x8b\xd1\x80\xd0\xb3\xd1\x8b\xd0\xb7", u"name": "Kirghiz"},\n-    u"la": {\n-        u"native": "Latin",\n-        u"name": "Latin",\n-        u"flag": u"/++resource++country-flags/va.gif",\n-    },\n-    u"lb": {\n-        u"native": "L\xc3\xabtzebuergesch",\n-        u"name": "Luxemburgish",\n-        u"flag": u"/++resource++country-flags/lu.gif",\n-    },\n-    u"lg": {u"native": "Luganda", u"name": "Ganda"},\n-    u"li": {u"native": "Limburgs", u"name": "Limburgish"},\n-    u"ln": {u"native": "Lingala", u"name": "Lingala"},\n-    u"lo": {\n-        u"native": "\xe0\xba\x9e\xe0\xba\xb2\xe0\xba\xaa\xe0\xba\xb2\xe0\xba\xa5\xe0\xba\xb2\xe0\xba\xa7",\n-        u"name": "Laotian",\n-        u"flag": u"/++resource++country-flags/la.gif",\n-    },\n-    u"lt": {\n-        u"native": "Lietuvi\xc5\xb3",\n-        u"name": "Lithuanian",\n-        u"flag": u"/++resource++country-flags/lt.gif",\n-    },\n-    u"lu": {u"native": "Tshiluba", u"name": "Luba-Katanga"},\n-    u"lv": {\n-        u"native": "Latvie\xc5\xa1u",\n-        u"name": "Latvian",\n-        u"flag": u"/++resource++country-flags/lv.gif",\n-    },\n-    u"mg": {\n-        u"native": "Malagasy",\n-        u"name": "Madagascarian",\n-        u"flag": u"/++resource++country-flags/mg.gif",\n-    },\n-    u"mh": {u"native": "Kajin M\xcc\xa7aje\xc4\xbc", u"name": "Marshallese"},\n-    u"mi": {u"native": "Maori", u"name": "Maori"},\n-    u"mk": {\n-        u"native": "\xd0\x9c\xd0\xb0\xd0\xba\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8",\n-        u"name": "Macedonian",\n-        u"flag": u"/++resource++country-flags/mk.gif",\n-    },\n-    u"ml": {u"native": "\xe0\xb4\xae\xe0\xb4\xb2\xe0\xb4\xaf\xe0\xb4\xbe\xe0\xb4\xb3\xe0\xb4\x82", u"name": "Malayalam"},\n-    u"mn": {\n-        u"native": "\xd0\x9c\xd0\xbe\xd0\xbd\xd0\xb3\xd0\xbe\xd0\xbb",\n-        u"name": "Mongolian",\n-        u"flag": u"/++resource++country-flags/mn.gif",\n-    },\n-    u"mo": {\n-        u"native": "Moldavian",\n-        u"name": "Moldavian",\n-        u"flag": u"/++resource++country-flags/md.gif",\n-    },\n-    u"mr": {u"native": "\xe0\xa4\xae\xe0\xa4\xb0\xe0\xa4\xbe\xe0\xa4\xa0\xe0\xa5\x80", u"name": "Marathi"},\n-    u"ms": {u"native": "Bahasa Melayu", u"name": "Malay"},\n-    u"mt": {\n-        u"native": "Malti",\n-        u"name": "Maltese",\n-        u"flag": u"/++resource++country-flags/mt.gif",\n-    },\n-    u"my": {u"native": "Burmese", u"name": "Burmese"},\n-    u"na": {\n-        u"native": "Nauru",\n-        u"name": "Nauruan",\n-        u"flag": u"/++resource++country-flags/nr.gif",\n-    },\n-    u"nb": {u"native": "Norsk bokm\xc3\xa5l", u"name": "Norwegian Bokm\xc3\xa5l"},\n-    u"nd": {u"native": "Ndebele (North)", u"name": "Ndebele (North)"},\n-    u"ne": {u"native": "\xe0\xa4\xa8\xe0\xa5\x87\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb2\xe0\xa5\x80", u"name": "Nepali"},\n-    u"ng": {u"native": "Owambo", u"name": "Ndonga"},\n-    u"nl": {\n-        u"native": "Nederlands",\n-        u"name": "Dutch",\n-        u"flag": u"/++resource++country-flags/nl.gif",\n-    },\n-    u"nn": {\n-        u"native": "Nynorsk",\n-        u"name": "Nynorsk",\n-        u"flag": u"/++resource++country-flags/no.gif",\n-    },\n-    u"no": {\n-        u"native": "Norsk",\n-        u"name": "Norwegian",\n-        u"flag": u"/++resource++country-flags/no.gif",\n-    },\n-    u"nr": {u"native": "IsiNdebele", u"name": "Ndebele (South)"},\n-    u"nv": {u"native": "Din\xc3\xa9 bizaad", u"name": "Navajo"},\n-    u"ny": {u"native": "chiChe\xc5\xb5a", u"name": "Chichewa"},\n-    u"oc": {u"native": "Occitan", u"name": "Occitan"},\n-    u"oj": {u"native": "\xe1\x90\x8a\xe1\x93\x82\xe1\x94\x91\xe1\x93\x88\xe1\x90\xaf\xe1\x92\xa7\xe1\x90\x8e\xe1\x93\x90", u"name": "Ojibwe"},\n-    u"om": {u"native": "Oromo", u"name": "Oromo"},\n-    u"or": {u"native": "\xe0\xac\x93\xe0\xad\x9c\xe0\xac\xbf\xe0\xac\x86", u"name": "Oriya"},\n-    u"os": {u"native": "\xd0\xb8\xd1\x80\xd0\xbe\xd0\xbd \xc3\xa6\xd0\xb2\xd0\xb7\xd0\xb0\xd0\xb3", u"name": "Ossetian"},\n-    u"pa": {u"native": "\xe0\xa8\xaa\xe0\xa9\xb0\xe0\xa8\x9c\xe0\xa8\xbe\xe0\xa8\xac\xe0\xa9\x80", u"name": "Punjabi"},\n-    u"pi": {u"native": "\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb4\xe0\xa4\xbf", u"name": "P\xc4\x81li"},\n-    u"pl": {\n-        u"native": "Polski",\n-        u"name": "Polish",\n-        u"flag": u"/++resource++country-flags/pl.gif",\n-    },\n-    u"ps": {u"native": "\xd9\xbe\xda\x9a\xd8\xaa\xd9\x88", u"name": "Pashto"},\n-    u"pt": {\n-        u"native": "Portugu\xc3\xaas",\n-        u"name": "Portuguese",\n-        u"flag": u"/++resource++country-flags/pt.gif",\n-    },\n-    u"qu": {u"native": "Quechua", u"name": "Quechua"},\n-    u"rm": {u"native": "Rhaeto-Romance", u"name": "Rhaeto-Romance"},\n-    u"rn": {u"native": "Kirundi", u"name": "Kirundi"},\n-    u"ro": {\n-        u"native": "Rom\xc3\xa2n\xc4\x83",\n-        u"name": "Romanian",\n-        u"flag": u"/++resource++country-flags/ro.gif",\n-    },\n-    u"ru": {\n-        u"native": "\xd0\xa0\xd1\x83\xd1\x81\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9",\n-        u"name": "Russian",\n-        u"flag": u"/++resource++country-flags/ru.gif",\n-    },\n-    u"rw": {u"native": "Kinyarwanda", u"name": "Kinyarwanda"},\n-    u"sa": {u"native": "\xe0\xa4\xb8\xe0\xa4\x82\xe0\xa4\xb8\xe0\xa5\x8d\xe0\xa4\x95\xe0\xa5\x83\xe0\xa4\xa4", u"name": "Sanskrit"},\n-    u"sc": {u"native": "sardu", u"name": "Sardinian"},\n-    u"sd": {\n-        u"native": "Sindhi",\n-        u"name": "Sindhi",\n-        u"flag": u"/++resource++country-flags/pk.gif",\n-    },\n-    u"se": {u"native": "Northern S\xc3\xa1mi", u"name": "Northern S\xc3\xa1mi"},\n-    u"sg": {\n-        u"native": "Sangho",\n-        u"name": "Sangho",\n-        u"flag": u"/++resource++country-flags/cf.gif",\n-    },\n-    u"sh": {u"native": "Serbo-Croatian", u"name": "Serbo-Croatian"},\n-    u"si": {u"native": "Singhalese", u"name": "Singhalese"},\n-    u"sk": {\n-        u"native": "Sloven\xc4\x8dina",\n-        u"name": "Slovak",\n-        u"flag": u"/++resource++country-flags/sk.gif",\n-    },\n-    u"sl": {\n-        u"native": "Sloven\xc5\xa1\xc4\x8dina",\n-        u"name": "Slovenian",\n-        u"flag": u"/++resource++country-flags/si.gif",\n-    },\n-    u"sm": {u"native": "Samoan", u"name": "Samoan"},\n-    u"sn": {u"native": "Shona", u"name": "Shona"},\n-    u"so": {\n-        u"native": "Somali",\n-        u"name": "Somali",\n-        u"flag": u"/++resource++country-flags/so.gif",\n-    },\n-    u"sq": {\n-        u"native": "Shqip",\n-        u"name": "Albanian",\n-        u"flag": u"/++resource++country-flags/al.gif",\n-    },\n-    u"sr": {\n-        u"native": "\xd1\x81\xd1\x80\xd0\xbf\xd1\x81\xd0\xba\xd0\xb8",\n-        u"name": "Serbian",\n-        u"flag": u"/++resource++country-flags/cs.gif",\n-    },\n-    u"ss": {u"native": "SiSwati", u"name": "Swati"},\n-    u"st": {u"native": "Sesotho", u"name": "Southern Sotho"},\n-    u"su": {\n-        u"native": "Sudanese",\n-        u"name": "Sudanese",\n-        u"flag": u"/++resource++country-flags/sd.gif",\n-    },\n-    u"sv": {\n-        u"native": "Svenska",\n-        u"name": "Swedish",\n-        u"flag": u"/++resource++country-flags/se.gif",\n-    },\n-    u"sw": {u"native": "Kiswahili", u"name": "Swahili"},\n-    u"ta": {u"native": "\xe0\xae\xa4\xe0\xae\xae\xe0\xae\xbf\xe0\xae\xb4", u"name": "Tamil"},\n-    u"te": {u"native": "\xe0\xb0\xa4\xe0\xb1\x86\xe0\xb0\xb2\xe0\xb1\x81\xe0\xb0\x97\xe0\xb1\x81", u"name": "Telugu"},\n-    u"tg": {\n-        u"native": "\xd0\xa2\xd0\xbe\xd2\xb7\xd0\xb8\xd0\xba\xd0\xb8",\n-        u"name": "Tadjik",\n-        u"flag": u"/++resource++country-flags/tj.gif",\n-    },\n-    u"th": {\n-        u"native": "\xe0\xb9\x84\xe0\xb8\x97\xe0\xb8\xa2",\n-        u"name": "Thai",\n-        u"flag": u"/++resource++country-flags/th.gif",\n-    },\n-    u"ti": {u"native": "\xe1\x89\xb5\xe1\x8c\x8d\xe1\x88\xad\xe1\x8a\x9b", u"name": "Tigrinya"},\n-    u"tk": {\n-        u"native": "\xd1\x82\xd2\xaf\xd1\x80\xd0\xbam\xd0\xb5\xd0\xbd\xd1\x87\xd0\xb5",\n-        u"name": "Turkmen",\n-        u"flag": u"/++resource++country-flags/tm.gif",\n-    },\n-    u"tl": {u"native": "Tagalog", u"name": "Tagalog"},\n-    u"tn": {\n-        u"native": "Setswana",\n-        u"name": "Tswana",\n-        u"flag": u"/++resource++country-flags/bw.gif",\n-    },\n-    u"to": {u"native": "Tonga", u"name": "Tonga"},\n-    u"tr": {\n-        u"native": "T\xc3\xbcrk\xc3\xa7e",\n-        u"name": "Turkish",\n-        u"flag": u"/++resource++country-flags/tr.gif",\n-    },\n-    u"ts": {u"native": "Xitsonga", u"name": "Tsonga"},\n-    u"tt": {u"native": "\xd1\x82\xd0\xb0\xd1\x82\xd0\xb0\xd1\x80\xd1\x87\xd0\xb0", u"name": "Tatar"},\n-    u"tw": {u"native": "Twi", u"name": "Twi"},\n-    u"ty": {u"native": "Reo Tahiti", u"name": "Tahitian"},\n-    u"ug": {u"native": "Uigur", u"name": "Uigur"},\n-    u"uk": {\n-        u"native": "\xd0\xa3\xd0\xba\xd1\x80\xd0\xb0\xd1\x97\xd0\xbd\xd1\x81\xd1\x8c\xd0\xba\xd0\xb0",\n-        u"name": "Ukrainian",\n-        u"flag": u"/++resource++country-flags/ua.gif",\n-    },\n-    u"ur": {u"native": "\xd8\xa7\xd8\xb1\xd8\xaf\xd9\x88", u"name": "Urdu"},\n-    u"uz": {\n-        u"native": "\xd0\x8e\xd0\xb7\xd0\xb1\xd0\xb5\xd0\xba\xd1\x87\xd0\xb0",\n-        u"name": "Uzbek",\n-        u"flag": u"/++resource++country-flags/uz.gif",\n-    },\n-    u"ve": {u"native": "Tshiven\xe1\xb8\x93a", u"name": "Venda"},\n-    u"vi": {\n-        u"native": "Ti\xe1\xba\xbfng Vi\xe1\xbb\x87t",\n-        u"name": "Vietnamese",\n-        u"flag": u"/++resource++country-flags/vn.gif",\n-    },\n-    u"vk": {u"native": "Ovalingo", u"name": "Viking"},\n-    u"vo": {u"native": "Volap\xc3\xbck", u"name": "Volap\xc3\xbck"},\n-    u"wa": {u"native": "Walon", u"name": "Walloon"},\n-    u"wo": {u"native": "Wolof", u"name": "Wolof"},\n-    u"xh": {u"native": "IsiXhosa", u"name": "Xhosa"},\n-    u"yi": {\n-        u"native": "\xd7\xb2\xd6\xb4\xd7\x93\xd7\x99\xd7\xa9",\n-        u"name": "Yiddish",\n-        u"flag": u"/++resource++country-flags/il.gif",\n-    },\n-    u"yo": {u"native": "Yor\xc3\xb9b\xc3\xa1", u"name": "Yorouba"},\n-    u"za": {u"native": "Zhuang", u"name": "Zhuang"},\n-    u"zh": {\n-        u"native": "\xe4\xb8\xad\xe6\x96\x87",\n-        u"name": "Chinese",\n-        u"flag": u"/++resource++country-flags/cn.gif",\n-    },\n-    u"zu": {\n-        u"native": "IsiZulu",\n-        u"name": "Zulu",\n-        u"flag": u"/++resource++country-flags/za.gif",\n+    "aa": {\n+        "native": "\xd0\xbc\xd0\xb0\xd0\xb3I\xd0\xb0\xd1\x80\xd1\x83\xd0\xbb \xd0\xbc\xd0\xb0\xd1\x86I",\n+        "name": "Afar",\n+        "flag": "/++resource++country-flags/dj.gif",\n+    },\n+    "ab": {\n+        "native": "\xd0\xb1\xd1\x8b\xd0\xb7\xd1\x88\xd3\x99\xd0\xb0",\n+        "name": "Abkhazian",\n+        "flag": "/++resource++country-flags/ge.gif",\n+    },\n+    "ae": {"native": "avesta", "name": "Avestan"},\n+    "af": {"native": "Afrikaans", "name": "Afrikaans"},\n+    "ak": {"native": "Akan", "name": "Akan"},\n+    "am": {"native": "\xe1\x8a\xa0\xe1\x88\x9b\xe1\x88\xad\xe1\x8a\x9b", "name": "Amharic"},\n+    "an": {"native": "aragon\xc3\xa9s", "name": "Aragonese"},\n+    "ar": {\n+        "native": "\xd8\xa7\xd9\x84\xd8\xb9\xd8\xb1\xd8\xa8\xd9\x8a\xd8\xa9",\n+        "name": "Arabic",\n+        "flag": "/++resource++language-flags/ar.gif",\n+    },\n+    "as": {"native": "\xe0\xa6\x85\xe0\xa6\xb8\xe0\xa6\xae\xe0\xa6\xbf\xe0\xa7\x9f\xe0\xa6\xbe", "name": "Assamese"},\n+    "ay": {"native": "Aymara", "name": "Aymara"},\n+    "az": {\n+        "native": "Az\xc9\x99ri T\xc3\xbcrk\xc3\xa7\xc9\x99si",\n+        "name": "Azerbaijani",\n+        "flag": "/++resource++country-flags/az.gif",\n+    },\n+    "ba": {"native": "Bashkir", "name": "Bashkir"},\n+    "be": {\n+        "native": "\xd0\x91\xd0\xb5\xd0\xbb\xd0\xb0\xd1\x80\xd1\x83\xd1\x81\xd0\xba\xd1\x96",\n+        "name": "Belarussian",\n+        "flag": "/++resource++country-flags/by.gif",\n+    },\n+    "bg": {\n+        "native": "\xd0\x91\xd1\x8a\xd0\xbb\xd0\xb3\xd0\xb0\xd1\x80\xd1\x81\xd0\xba\xd0\xb8",\n+        "name": "Bulgarian",\n+        "flag": "/++resource++country-flags/bg.gif",\n+    },\n+    "bh": {"native": "Bihari", "name": "Bihari"},\n+    "bi": {"native": "Bislama", "name": "Bislama"},\n+    "bm": {"native": "bamanankan", "name": "Bambara"},\n+    "bn": {\n+        "native": "\xe0\xa6\xac\xe0\xa6\xbe\xe0\xa6\x82\xe0\xa6\xb2\xe0\xa6\xbe",\n+        "name": "Bengali",\n+        "flag": "/++resource++country-flags/bd.gif",\n+    },\n+    "bo": {"native": "\xe0\xbd\x96\xe0\xbd\xbc\xe0\xbd\x91\xe0\xbc\x8b\xe0\xbd\xa6\xe0\xbe\x90\xe0\xbd\x91\xe0\xbc\x8b", "name": "Tibetan"},\n+    "br": {"native": "brezhoneg", "name": "Breton"},\n+    "bs": {\n+        "native": "Bosanski",\n+        "name": "Bosnian",\n+        "flag": "/++resource++country-flags/ba.gif",\n+    },\n+    "ca": {\n+        "native": "Catal\xc3\xa0",\n+        "name": "Catalan",\n+        "flag": "/++resource++language-flags/ca.gif",\n+    },\n+    "ce": {"native": "\xd0\xbd\xd0\xbe\xd1\x85\xd1\x87\xd0\xb8\xd0\xb9\xd0\xbd \xd0\xbc\xd0\xbe\xd1\x82\xd1\x82", "name": "Chechen"},\n+    "ch": {"native": "Chamoru", "name": "Chamorro"},\n+    "co": {"native": "Corsu", "name": "Corsican"},\n+    "cr": {"native": "\xe1\x93\x80\xe1\x90\xa6\xe1\x90\x83\xe1\x94\xad\xe1\x90\x8d\xe1\x90\x8f\xe1\x90\xa3", "name": "Cree"},\n+    "cs": {\n+        "native": "\xc4\x8ce\xc5\xa1tina",\n+        "name": "Czech",\n+        "flag": "/++resource++country-flags/cz.gif",\n+    },\n+    "cu": {"native": "\xd1\xa9\xd0\xb7\xd1\x8b\xd0\xba\xd1\x8a \xd1\x81\xd0\xbb\xd0\xbe\xd0\xb2\xd1\xa3\xd0\xbd\xd1\x8c\xd1\x81\xd0\xba\xd1\x8a", "name": "Old Church Slavonic"},\n+    "cv": {"native": "\xd1\x87\xd3\x91\xd0\xb2\xd0\xb0\xd1\x88 \xd1\x87\xd3\x97\xd0\xbb\xd1\x85\xd0\xb8", "name": "Chuvash"},\n+    "cy": {\n+        "native": "Cymraeg",\n+        "name": "Welsh",\n+        "flag": "/++resource++language-flags/cy.gif",\n+    },\n+    "da": {\n+        "native": "Dansk",\n+        "name": "Danish",\n+        "flag": "/++resource++country-flags/dk.gif",\n+    },\n+    "de": {\n+        "native": "Deutsch",\n+        "name": "German",\n+        "flag": "/++resource++country-flags/de.gif",\n+    },\n+    "dv": {"native": "Divehi", "name": "Maldivian"},\n+    "dz": {"native": "Bhutani", "name": "Indian Bhutani"},\n+    "ee": {"native": "E\xca\x8begbe", "name": "Ewe"},\n+    "el": {\n+        "native": "\xce\x95\xce\xbb\xce\xbb\xce\xb7\xce\xbd\xce\xb9\xce\xba\xce\xac",\n+        "name": "Greek",\n+        "flag": "/++resource++country-flags/gr.gif",\n+    },\n+    "en": {\n+        "native": "English",\n+        "name": "English",\n+        "flag": "/++resource++country-flags/gb.gif",\n+    },\n+    "eo": {\n+        "native": "Esperanto",\n+        "name": "Esperanto",\n+        "flag": "/++resource++language-flags/eo.gif",\n+    },\n+    "es": {\n+        "native": "Espa\xc3\xb1ol",\n+        "name": "Spanish",\n+        "flag": "/++resource++country-flags/es.gif",\n+    },\n+    "et": {\n+        "native": "Eesti",\n+        "name": "Estonian",\n+        "flag": "/++resource++country-flags/ee.gif",\n+    },\n+    "eu": {\n+        "native": "Euskara",\n+        "name": "Basque",\n+        "flag": "/++resource++language-flags/eu.gif",\n+    },\n+    "fa": {"native": "\xd9\x81\xd8\xa7\xd8\xb1\xd8\xb3\xdb\x8c", "name": "Persian"},\n+    "ff": {"native": "Fulfulde", "name": "Fula"},\n+    "fi": {\n+        "native": "Suomi",\n+        "name": "Finnish",\n+        "flag": "/++resource++country-flags/fi.gif",\n+    },\n+    "fj": {\n+        "native": "Fiji",\n+        "name": "Fiji",\n+        "flag": "/++resource++country-flags/fj.gif",\n+    },\n+    "fo": {\n+        "native": "F\xc3\xb8royska",\n+        "name": "Faroese",\n+        "flag": "/++resource++country-flags/fo.gif",\n+    },\n+    "fr": {\n+        "native": "Fran\xc3\xa7ais",\n+        "name": "French",\n+        "flag": "/++resource++country-flags/fr.gif",\n+    },\n+    "fy": {"native": "Frysk", "name": "Frisian"},\n+    "ga": {"native": "Gaeilge", "name": "Irish Gaelic"},\n+    "gd": {"native": "G\xc3\xa0idhlig", "name": "Scottish Gaelic"},\n+    "gl": {"native": "Galego", "name": "Galician"},\n+    "gn": {"native": "Guarani", "name": "Guarani"},\n+    "gu": {"native": "\xe0\xaa\x97\xe0\xab\x81\xe0\xaa\x9c\xe0\xaa\xb0\xe0\xaa\xbe\xe0\xaa\xa4\xe0\xab\x80", "name": "Gujarati"},\n+    "gv": {"native": "Gaelg", "name": "Manx Gaelic"},\n+    "ha": {"native": "\xd9\x87\xd9\x8e\xd9\x88\xd9\x8f\xd8\xb3", "name": "Hausa"},\n+    "he": {\n+        "native": "\xd7\xa2\xd7\x91\xd7\xa8\xd7\x99\xd7\xaa",\n+        "name": "Hebrew",\n+        "flag": "/++resource++country-flags/il.gif",\n+    },\n+    "hi": {\n+        "native": "\xe0\xa4\xb9\xe0\xa4\xbf\xe0\xa4\x82\xe0\xa4\xa6\xe0\xa5\x80",\n+        "name": "Hindi",\n+        "flag": "/++resource++country-flags/in.gif",\n+    },\n+    "ho": {"native": "Hiri Motu", "name": "Hiri Motu"},\n+    "hr": {\n+        "native": "Hrvatski",\n+        "name": "Croatian",\n+        "flag": "/++resource++country-flags/hr.gif",\n+    },\n+    "ht": {"native": "Krey\xc3\xb2l ayisyen", "name": "Haitian"},\n+    "hu": {\n+        "native": "Magyar",\n+        "name": "Hungarian",\n+        "flag": "/++resource++country-flags/hu.gif",\n+    },\n+    "hy": {\n+        "native": "\xd5\x80\xd5\xa1\xd5\xb5\xd5\xa5\xd6\x80\xd5\xa7\xd5\xb6",\n+        "name": "Armenian",\n+        "flag": "/++resource++country-flags/am.gif",\n+    },\n+    "hz": {"native": "Otjiherero", "name": "Herero"},\n+    "ia": {"native": "Interlingua", "name": "Interlingua"},\n+    "id": {\n+        "native": "Bahasa Indonesia",\n+        "name": "Indonesian",\n+        "flag": "/++resource++country-flags/id.gif",\n+    },\n+    "ie": {"native": "Interlingue", "name": "Interlingue"},\n+    "ig": {"native": "As\xe1\xbb\xa5s\xe1\xbb\xa5 Igbo", "name": "Igbo"},\n+    "ii": {"native": "Nuosu", "name": "Nuosu"},\n+    "ik": {"native": "I\xc3\xb1upiaq", "name": "Inupiak"},\n+    "io": {"native": "Ido", "name": "Ido"},\n+    "is": {\n+        "native": "\xc3\x8dslenska",\n+        "name": "Icelandic",\n+        "flag": "/++resource++country-flags/is.gif",\n+    },\n+    "it": {\n+        "native": "Italiano",\n+        "name": "Italian",\n+        "flag": "/++resource++country-flags/it.gif",\n+    },\n+    "iu": {"native": "\xe1\x90\x83\xe1\x93\x84\xe1\x92\x83\xe1\x91\x8e\xe1\x91\x90\xe1\x91\xa6", "name": "Inuktitut"},\n+    "ja": {\n+        "native": "\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e",\n+        "name": "Japanese",\n+        "flag": "/++resource++country-flags/jp.gif",\n+    },\n+    "jv": {"native": "Javanese", "name": "basa Jawa"},\n+    "ka": {\n+        "native": "\xe1\x83\xa5\xe1\x83\x90\xe1\x83\xa0\xe1\x83\x97\xe1\x83\xa3\xe1\x83\x9a\xe1\x83\x98",\n+        "name": "Georgian",\n+        "flag": "/++resource++country-flags/ge.gif",\n+    },\n+    "kg": {"native": "KiKongo", "name": "Kongo"},\n+    "ki": {"native": "G\xc4\xa9k\xc5\xa9y\xc5\xa9", "name": "Kikuyu"},\n+    "kj": {"native": "Kuanyama", "name": "Kwanyama"},\n+    "kk": {\n+        "native": "\xef\xbb\x97\xef\xba\x8e\xef\xba\xaf\xef\xba\x8d\xef\xbb\x97\xef\xba\xb8\xef\xba\x8e",\n+        "name": "Kazakh",\n+        "flag": "/++resource++country-flags/kz.gif",\n+    },\n+    "kl": {\n+        "native": "Greenlandic",\n+        "name": "Greenlandic",\n+        "flag": "/++resource++country-flags/gl.gif",\n+    },\n+    "km": {\n+        "native": "\xe1\x9e\x81\xe1\x9f\x92\xe1\x9e\x98\xe1\x9f\x82\xe1\x9e\x9a",\n+        "name": "Cambodian/Khmer",\n+        "flag": "/++resource++country-flags/kh.gif",\n+    },\n+    "kn": {\n+        "native": "\xe0\xb2\x95\xe0\xb2\xa8\xe0\xb3\x8d\xe0\xb2\xa8\xe0\xb2\xa1",\n+        "name": "Kannada",\n+        "flag": "/++resource++country-flags/in.gif",\n+    },\n+    "ko": {\n+        "native": "\xed\x95\x9c\xea\xb5\xad\xec\x96\xb4",\n+        "name": "Korean",\n+        "flag": "/++resource++country-flags/kr.gif",\n+    },\n+    "kr": {"native": "Kanuri", "name": "Kanuri"},\n+    "ks": {\n+        "native": "\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xbd\xe0\xa4\xb6\xe0\xa5\x81\xe0\xa4\xb0",\n+        "name": "Kashmiri",\n+        "flag": "/++resource++country-flags/in.gif",\n+    },\n+    "ku": {"native": "Kurd\xc3\xad", "name": "Kurdish"},\n+    "kv": {"native": "\xd0\xba\xd0\xbe\xd0\xbc\xd0\xb8 \xd0\xba\xd1\x8b\xd0\xb2", "name": "Komi"},\n+    "kw": {"native": "Kernewek", "name": "Cornish"},\n+    "ky": {"native": "\xd0\x9a\xd1\x8b\xd1\x80\xd0\xb3\xd1\x8b\xd0\xb7", "name": "Kirghiz"},\n+    "la": {\n+        "native": "Latin",\n+        "name": "Latin",\n+        "flag": "/++resource++country-flags/va.gif",\n+    },\n+    "lb": {\n+        "native": "L\xc3\xabtzebuergesch",\n+        "name": "Luxemburgish",\n+        "flag": "/++resource++country-flags/lu.gif",\n+    },\n+    "lg": {"native": "Luganda", "name": "Ganda"},\n+    "li": {"native": "Limburgs", "name": "Limburgish"},\n+    "ln": {"native": "Lingala", "name": "Lingala"},\n+    "lo": {\n+        "native": "\xe0\xba\x9e\xe0\xba\xb2\xe0\xba\xaa\xe0\xba\xb2\xe0\xba\xa5\xe0\xba\xb2\xe0\xba\xa7",\n+        "name": "Laotian",\n+        "flag": "/++resource++country-flags/la.gif",\n+    },\n+    "lt": {\n+        "native": "Lietuvi\xc5\xb3",\n+        "name": "Lithuanian",\n+        "flag": "/++resource++country-flags/lt.gif",\n+    },\n+    "lu": {"native": "Tshiluba", "name": "Luba-Katanga"},\n+    "lv": {\n+        "native": "Latvie\xc5\xa1u",\n+        "name": "Latvian",\n+        "flag": "/++resource++country-flags/lv.gif",\n+    },\n+    "mg": {\n+        "native": "Malagasy",\n+        "name": "Madagascarian",\n+        "flag": "/++resource++country-flags/mg.gif",\n+    },\n+    "mh": {"native": "Kajin M\xcc\xa7aje\xc4\xbc", "name": "Marshallese"},\n+    "mi": {"native": "Maori", "name": "Maori"},\n+    "mk": {\n+        "native": "\xd0\x9c\xd0\xb0\xd0\xba\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8",\n+        "name": "Macedonian",\n+        "flag": "/++resource++country-flags/mk.gif",\n+    },\n+    "ml": {"native": "\xe0\xb4\xae\xe0\xb4\xb2\xe0\xb4\xaf\xe0\xb4\xbe\xe0\xb4\xb3\xe0\xb4\x82", "name": "Malayalam"},\n+    "mn": {\n+        "native": "\xd0\x9c\xd0\xbe\xd0\xbd\xd0\xb3\xd0\xbe\xd0\xbb",\n+        "name": "Mongolian",\n+        "flag": "/++resource++country-flags/mn.gif",\n+    },\n+    "mo": {\n+        "native": "Moldavian",\n+        "name": "Moldavian",\n+        "flag": "/++resource++country-flags/md.gif",\n+    },\n+    "mr": {"native": "\xe0\xa4\xae\xe0\xa4\xb0\xe0\xa4\xbe\xe0\xa4\xa0\xe0\xa5\x80", "name": "Marathi"},\n+    "ms": {"native": "Bahasa Melayu", "name": "Malay"},\n+    "mt": {\n+        "native": "Malti",\n+        "name": "Maltese",\n+        "flag": "/++resource++country-flags/mt.gif",\n+    },\n+    "my": {"native": "Burmese", "name": "Burmese"},\n+    "na": {\n+        "native": "Nauru",\n+        "name": "Nauruan",\n+        "flag": "/++resource++country-flags/nr.gif",\n+    },\n+    "nb": {"native": "Norsk bokm\xc3\xa5l", "name": "Norwegian Bokm\xc3\xa5l"},\n+    "nd": {"native": "Ndebele (North)", "name": "Ndebele (North)"},\n+    "ne": {"native": "\xe0\xa4\xa8\xe0\xa5\x87\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb2\xe0\xa5\x80", "name": "Nepali"},\n+    "ng": {"native": "Owambo", "name": "Ndonga"},\n+    "nl": {\n+        "native": "Nederlands",\n+        "name": "Dutch",\n+        "flag": "/++resource++country-flags/nl.gif",\n+    },\n+    "nn": {\n+        "native": "Nynorsk",\n+        "name": "Nynorsk",\n+        "flag": "/++resource++country-flags/no.gif",\n+    },\n+    "no": {\n+        "native": "Norsk",\n+        "name": "Norwegian",\n+        "flag": "/++resource++country-flags/no.gif",\n+    },\n+    "nr": {"native": "IsiNdebele", "name": "Ndebele (South)"},\n+    "nv": {"native": "Din\xc3\xa9 bizaad", "name": "Navajo"},\n+    "ny": {"native": "chiChe\xc5\xb5a", "name": "Chichewa"},\n+    "oc": {"native": "Occitan", "name": "Occitan"},\n+    "oj": {"native": "\xe1\x90\x8a\xe1\x93\x82\xe1\x94\x91\xe1\x93\x88\xe1\x90\xaf\xe1\x92\xa7\xe1\x90\x8e\xe1\x93\x90", "name": "Ojibwe"},\n+    "om": {"native": "Oromo", "name": "Oromo"},\n+    "or": {"native": "\xe0\xac\x93\xe0\xad\x9c\xe0\xac\xbf\xe0\xac\x86", "name": "Oriya"},\n+    "os": {"native": "\xd0\xb8\xd1\x80\xd0\xbe\xd0\xbd \xc3\xa6\xd0\xb2\xd0\xb7\xd0\xb0\xd0\xb3", "name": "Ossetian"},\n+    "pa": {"native": "\xe0\xa8\xaa\xe0\xa9\xb0\xe0\xa8\x9c\xe0\xa8\xbe\xe0\xa8\xac\xe0\xa9\x80", "name": "Punjabi"},\n+    "pi": {"native": "\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb4\xe0\xa4\xbf", "name": "P\xc4\x81li"},\n+    "pl": {\n+        "native": "Polski",\n+        "name": "Polish",\n+        "flag": "/++resource++country-flags/pl.gif",\n+    },\n+    "ps": {"native": "\xd9\xbe\xda\x9a\xd8\xaa\xd9\x88", "name": "Pashto"},\n+    "pt": {\n+        "native": "Portugu\xc3\xaas",\n+        "name": "Portuguese",\n+        "flag": "/++resource++country-flags/pt.gif",\n+    },\n+    "qu": {"native": "Quechua", "name": "Quechua"},\n+    "rm": {"native": "Rhaeto-Romance", "name": "Rhaeto-Romance"},\n+    "rn": {"native": "Kirundi", "name": "Kirundi"},\n+    "ro": {\n+        "native": "Rom\xc3\xa2n\xc4\x83",\n+        "name": "Romanian",\n+        "flag": "/++resource++country-flags/ro.gif",\n+    },\n+    "ru": {\n+        "native": "\xd0\xa0\xd1\x83\xd1\x81\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9",\n+        "name": "Russian",\n+        "flag": "/++resource++country-flags/ru.gif",\n+    },\n+    "rw": {"native": "Kinyarwanda", "name": "Kinyarwanda"},\n+    "sa": {"native": "\xe0\xa4\xb8\xe0\xa4\x82\xe0\xa4\xb8\xe0\xa5\x8d\xe0\xa4\x95\xe0\xa5\x83\xe0\xa4\xa4", "name": "Sanskrit"},\n+    "sc": {"native": "sardu", "name": "Sardinian"},\n+    "sd": {\n+        "native": "Sindhi",\n+        "name": "Sindhi",\n+        "flag": "/++resource++country-flags/pk.gif",\n+    },\n+    "se": {"native": "Northern S\xc3\xa1mi", "name": "Northern S\xc3\xa1mi"},\n+    "sg": {\n+        "native": "Sangho",\n+        "name": "Sangho",\n+        "flag": "/++resource++country-flags/cf.gif",\n+    },\n+    "sh": {"native": "Serbo-Croatian", "name": "Serbo-Croatian"},\n+    "si": {"native": "Singhalese", "name": "Singhalese"},\n+    "sk": {\n+        "native": "Sloven\xc4\x8dina",\n+        "name": "Slovak",\n+        "flag": "/++resource++country-flags/sk.gif",\n+    },\n+    "sl": {\n+        "native": "Sloven\xc5\xa1\xc4\x8dina",\n+        "name": "Slovenian",\n+        "flag": "/++resource++country-flags/si.gif",\n+    },\n+    "sm": {"native": "Samoan", "name": "Samoan"},\n+    "sn": {"native": "Shona", "name": "Shona"},\n+    "so": {\n+        "native": "Somali",\n+        "name": "Somali",\n+        "flag": "/++resource++country-flags/so.gif",\n+    },\n+    "sq": {\n+        "native": "Shqip",\n+        "name": "Albanian",\n+        "flag": "/++resource++country-flags/al.gif",\n+    },\n+    "sr": {\n+        "native": "\xd1\x81\xd1\x80\xd0\xbf\xd1\x81\xd0\xba\xd0\xb8",\n+        "name": "Serbian",\n+        "flag": "/++resource++country-flags/cs.gif",\n+    },\n+    "ss": {"native": "SiSwati", "name": "Swati"},\n+    "st": {"native": "Sesotho", "name": "Southern Sotho"},\n+    "su": {\n+        "native": "Sudanese",\n+        "name": "Sudanese",\n+        "flag": "/++resource++country-flags/sd.gif",\n+    },\n+    "sv": {\n+        "native": "Svenska",\n+        "name": "Swedish",\n+        "flag": "/++resource++country-flags/se.gif",\n+    },\n+    "sw": {"native": "Kiswahili", "name": "Swahili"},\n+    "ta": {"native": "\xe0\xae\xa4\xe0\xae\xae\xe0\xae\xbf\xe0\xae\xb4", "name": "Tamil"},\n+    "te": {"native": "\xe0\xb0\xa4\xe0\xb1\x86\xe0\xb0\xb2\xe0\xb1\x81\xe0\xb0\x97\xe0\xb1\x81", "name": "Telugu"},\n+    "tg": {\n+        "native": "\xd0\xa2\xd0\xbe\xd2\xb7\xd0\xb8\xd0\xba\xd0\xb8",\n+        "name": "Tadjik",\n+        "flag": "/++resource++country-flags/tj.gif",\n+    },\n+    "th": {\n+        "native": "\xe0\xb9\x84\xe0\xb8\x97\xe0\xb8\xa2",\n+        "name": "Thai",\n+        "flag": "/++resource++country-flags/th.gif",\n+    },\n+    "ti": {"native": "\xe1\x89\xb5\xe1\x8c\x8d\xe1\x88\xad\xe1\x8a\x9b", "name": "Tigrinya"},\n+    "tk": {\n+        "native": "\xd1\x82\xd2\xaf\xd1\x80\xd0\xbam\xd0\xb5\xd0\xbd\xd1\x87\xd0\xb5",\n+        "name": "Turkmen",\n+        "flag": "/++resource++country-flags/tm.gif",\n+    },\n+    "tl": {"native": "Tagalog", "name": "Tagalog"},\n+    "tn": {\n+        "native": "Setswana",\n+        "name": "Tswana",\n+        "flag": "/++resource++country-flags/bw.gif",\n+    },\n+    "to": {"native": "Tonga", "name": "Tonga"},\n+    "tr": {\n+        "native": "T\xc3\xbcrk\xc3\xa7e",\n+        "name": "Turkish",\n+        "flag": "/++resource++country-flags/tr.gif",\n+    },\n+    "ts": {"native": "Xitsonga", "name": "Tsonga"},\n+    "tt": {"native": "\xd1\x82\xd0\xb0\xd1\x82\xd0\xb0\xd1\x80\xd1\x87\xd0\xb0", "name": "Tatar"},\n+    "tw": {"native": "Twi", "name": "Twi"},\n+    "ty": {"native": "Reo Tahiti", "name": "Tahitian"},\n+    "ug": {"native": "Uigur", "name": "Uigur"},\n+    "uk": {\n+        "native": "\xd0\xa3\xd0\xba\xd1\x80\xd0\xb0\xd1\x97\xd0\xbd\xd1\x81\xd1\x8c\xd0\xba\xd0\xb0",\n+        "name": "Ukrainian",\n+        "flag": "/++resource++country-flags/ua.gif",\n+    },\n+    "ur": {"native": "\xd8\xa7\xd8\xb1\xd8\xaf\xd9\x88", "name": "Urdu"},\n+    "uz": {\n+        "native": "\xd0\x8e\xd0\xb7\xd0\xb1\xd0\xb5\xd0\xba\xd1\x87\xd0\xb0",\n+        "name": "Uzbek",\n+        "flag": "/++resource++country-flags/uz.gif",\n+    },\n+    "ve": {"native": "Tshiven\xe1\xb8\x93a", "name": "Venda"},\n+    "vi": {\n+        "native": "Ti\xe1\xba\xbfng Vi\xe1\xbb\x87t",\n+        "name": "Vietnamese",\n+        "flag": "/++resource++country-flags/vn.gif",\n+    },\n+    "vk": {"native": "Ovalingo", "name": "Viking"},\n+    "vo": {"native": "Volap\xc3\xbck", "name": "Volap\xc3\xbck"},\n+    "wa": {"native": "Walon", "name": "Walloon"},\n+    "wo": {"native": "Wolof", "name": "Wolof"},\n+    "xh": {"native": "IsiXhosa", "name": "Xhosa"},\n+    "yi": {\n+        "native": "\xd7\xb2\xd6\xb4\xd7\x93\xd7\x99\xd7\xa9",\n+        "name": "Yiddish",\n+        "flag": "/++resource++country-flags/il.gif",\n+    },\n+    "yo": {"native": "Yor\xc3\xb9b\xc3\xa1", "name": "Yorouba"},\n+    "za": {"native": "Zhuang", "name": "Zhuang"},\n+    "zh": {\n+        "native": "\xe4\xb8\xad\xe6\x96\x87",\n+        "name": "Chinese",\n+        "flag": "/++resource++country-flags/cn.gif",\n+    },\n+    "zu": {\n+        "native": "IsiZulu",\n+        "name": "Zulu",\n+        "flag": "/++resource++country-flags/za.gif",\n     },\n }\n \n # convert the utf-8 encoded values to unicode\n for code in _languagelist:\n     value = _languagelist[code]\n-    if u"name" in value:\n-        if six.PY3:\n-            value[u"name"] = value[u"name"]\n-        else:\n-            value[u"name"] = unicode(value[u"name"], "utf-8")\n-    if u"native" in value:\n-        if six.PY3:\n-            value[u"native"] = value[u"native"]\n-        else:\n-            value[u"native"] = unicode(value[u"native"], "utf-8")\n+    if "name" in value:\n+        value["name"] = value["name"]\n+    if "native" in value:\n+        value["native"] = value["native"]\n \n _combinedlanguagelist = {\n-    u"ar-ae": {\n-        u"name": "Arabic (United Arab Emirates)",\n-        u"flag": u"/++resource++country-flags/ae.gif",\n+    "ar-ae": {\n+        "name": "Arabic (United Arab Emirates)",\n+        "flag": "/++resource++country-flags/ae.gif",\n     },\n-    u"ar-bh": {\n-        u"name": "Arabic (Bahrain)",\n-        u"flag": u"/++resource++country-flags/bh.gif",\n+    "ar-bh": {\n+        "name": "Arabic (Bahrain)",\n+        "flag": "/++resource++country-flags/bh.gif",\n     },\n-    u"ar-dz": {\n-        u"name": "Arabic (Algeria)",\n-        u"flag": u"/++resource++country-flags/dz.gif",\n-    },\n-    u"ar-eg": {\n-        u"name": "Arabic (Egypt)",\n-        u"flag": u"/++resource++country-flags/eg.gif",\n-    },\n-    u"ar-il": {\n-        u"name": "Arabic (Israel)",\n-        u"flag": u"/++resource++country-flags/il.gif",\n-    },\n-    u"ar-iq": {\n-        u"name": "Arabic (Iraq)",\n-        u"flag": u"/++resource++country-flags/iq.gif",\n-    },\n-    u"ar-jo": {\n-        u"name": "Arabic (Jordan)",\n-        u"flag": u"/++resource++country-flags/jo.gif",\n-    },\n-    u"ar-kw": {\n-        u"name": "Arabic (Kuwait)",\n-        u"flag": u"/++resource++country-flags/kw.gif",\n-    },\n-    u"ar-lb": {\n-        u"name": "Arabic (Lebanon)",\n-        u"flag": u"/++resource++country-flags/lb.gif",\n-    },\n-    u"ar-ly": {\n-        u"name": "Arabic (Libya)",\n-        u"flag": u"/++resource++country-flags/ly.gif",\n-    },\n-    u"ar-ma": {\n-        u"name": "Arabic (Morocco)",\n-        u"flag": u"/++resource++country-flags/ma.gif",\n-    },\n-    u"ar-mr": {\n-        u"name": "Arabic (Mauritania)",\n-        u"flag": u"/++resource++country-flags/mr.gif",\n-    },\n-    u"ar-om": {\n-        u"name": "Arabic (Oman)",\n-        u"flag": u"/++resource++country-flags/om.gif",\n-    },\n-    u"ar-ps": {\n-        u"name": "Arabic (Palestinian West Bank and Gaza)",\n-        u"flag": u"/++resource++country-flags/ps.gif",\n-    },\n-    u"ar-qa": {\n-        u"name": "Arabic (Qatar)",\n-        u"flag": u"/++resource++country-flags/qa.gif",\n-    },\n-    u"ar-sa": {\n-        u"name": "Arabic (Saudi Arabia)",\n-        u"flag": u"/++resource++country-flags/sa.gif",\n-    },\n-    u"ar-sd": {\n-        u"name": "Arabic (Sudan)",\n-        u"flag": u"/++resource++country-flags/ly.gif",\n-    },\n-    u"ar-so": {\n-        u"name": "Arabic (Somalia)",\n-        u"flag": u"/++resource++country-flags/so.gif",\n-    },\n-    u"ar-sy": {\n-        u"name": "Arabic (Syria)",\n-        u"flag": u"/++resource++country-flags/sy.gif",\n-    },\n-    u"ar-td": {\n-        u"name": "Arabic (Chad)",\n-        u"flag": u"/++resource++country-flags/td.gif",\n-    },\n-    u"ar-tn": {\n-        u"name": "Arabic (Tunisia)",\n-        u"flag": u"/++resource++country-flags/ly.gif",\n-    },\n-    u"ar-ye": {\n-        u"name": "Arabic (Yemen)",\n-        u"flag": u"/++resource++country-flags/ye.gif",\n-    },\n-    u"bn-bd": {\n-        u"name": "Bengali (Bangladesh)",\n-        u"flag": u"/++resource++country-flags/bd.gif",\n-    },\n-    u"bn-in": {\n-        u"name": "Bengali (India)",\n-        u"flag": u"/++resource++country-flags/in.gif",\n-    },\n-    u"bn-sg": {\n-        u"name": "Bengali (Singapore)",\n-        u"flag": u"/++resource++country-flags/sg.gif",\n-    },\n-    u"ch-gu": {\n-        u"name": "Chamorro (Guam)",\n-        u"flag": u"/++resource++country-flags/gu.gif",\n+    "ar-dz": {\n+        "name": "Arabic (Algeria)",\n+        "flag": "/++resource++country-flags/dz.gif",\n+    },\n+    "ar-eg": {\n+        "name": "Arabic (Egypt)",\n+        "flag": "/++resource++country-flags/eg.gif",\n+    },\n+    "ar-il": {\n+        "name": "Arabic (Israel)",\n+        "flag": "/++resource++country-flags/il.gif",\n+    },\n+    "ar-iq": {\n+        "name": "Arabic (Iraq)",\n+        "flag": "/++resource++country-flags/iq.gif",\n+    },\n+    "ar-jo": {\n+        "name": "Arabic (Jordan)",\n+        "flag": "/++resource++country-flags/jo.gif",\n+    },\n+    "ar-kw": {\n+        "name": "Arabic (Kuwait)",\n+        "flag": "/++resource++country-flags/kw.gif",\n+    },\n+    "ar-lb": {\n+        "name": "Arabic (Lebanon)",\n+        "flag": "/++resource++country-flags/lb.gif",\n+    },\n+    "ar-ly": {\n+        "name": "Arabic (Libya)",\n+        "flag": "/++resource++country-flags/ly.gif",\n+    },\n+    "ar-ma": {\n+        "name": "Arabic (Morocco)",\n+        "flag": "/++resource++country-flags/ma.gif",\n+    },\n+    "ar-mr": {\n+        "name": "Arabic (Mauritania)",\n+        "flag": "/++resource++country-flags/mr.gif",\n+    },\n+    "ar-om": {\n+        "name": "Arabic (Oman)",\n+        "flag": "/++resource++country-flags/om.gif",\n+    },\n+    "ar-ps": {\n+        "name": "Arabic (Palestinian West Bank and Gaza)",\n+        "flag": "/++resource++country-flags/ps.gif",\n+    },\n+    "ar-qa": {\n+        "name": "Arabic (Qatar)",\n+        "flag": "/++resource++country-flags/qa.gif",\n+    },\n+    "ar-sa": {\n+        "name": "Arabic (Saudi Arabia)",\n+        "flag": "/++resource++country-flags/sa.gif",\n+    },\n+    "ar-sd": {\n+        "name": "Arabic (Sudan)",\n+        "flag": "/++resource++country-flags/ly.gif",\n+    },\n+    "ar-so": {\n+        "name": "Arabic (Somalia)",\n+        "flag": "/++resource++country-flags/so.gif",\n+    },\n+    "ar-sy": {\n+        "name": "Arabic (Syria)",\n+        "flag": "/++resource++country-flags/sy.gif",\n+    },\n+    "ar-td": {\n+        "name": "Arabic (Chad)",\n+        "flag": "/++resource++country-flags/td.gif",\n+    },\n+    "ar-tn": {\n+        "name": "Arabic (Tunisia)",\n+        "flag": "/++resource++country-flags/ly.gif",\n+    },\n+    "ar-ye": {\n+        "name": "Arabic (Yemen)",\n+        "flag": "/++resource++country-flags/ye.gif",\n+    },\n+    "bn-bd": {\n+        "name": "Bengali (Bangladesh)",\n+        "flag": "/++resource++country-flags/bd.gif",\n+    },\n+    "bn-in": {\n+        "name": "Bengali (India)",\n+        "flag": "/++resource++country-flags/in.gif",\n+    },\n+    "bn-sg": {\n+        "name": "Bengali (Singapore)",\n+        "flag": "/++resource++country-flags/sg.gif",\n+    },\n+    "ch-gu": {\n+        "name": "Chamorro (Guam)",\n+        "flag": "/++resource++country-flags/gu.gif",\n     },\n-    u"ch-mp": {\n-        u"name": "Chamorro (Northern Mariana Islands)",\n-        u"flag": u"/++resource++country-flags/mp.gif",\n+    "ch-mp": {\n+        "name": "Chamorro (Northern Mariana Islands)",\n+        "flag": "/++resource++country-flags/mp.gif",\n     },\n-    u"cs-cz": {\n-        u"name": "Czech (Czech republic)",\n-        u"native": "\xc4\x8ce\xc5\xa1tina (\xc4\x8cesk\xc3\xa1 republika)",\n-        u"flag": u"/++resource++country-flags/cz.gif",\n-    },\n-    u"da-dk": {\n-        u"name": "Danish (Denmark)",\n-        u"flag": u"/++resource++country-flags/dk.gif",\n-    },\n-    u"da-gl": {\n-        u"name": "Danish (Greenland)",\n-        u"flag": u"/++resource++country-flags/gl.gif",\n-    },\n-    u"de-at": {\n-        u"name": "German (Austria)",\n-        u"native": "Deutsch (\xc3\x96sterreich)",\n-        u"flag": u"/++resource++country-flags/at.gif",\n+    "cs-cz": {\n+        "name": "Czech (Czech republic)",\n+        "native": "\xc4\x8ce\xc5\xa1tina (\xc4\x8cesk\xc3\xa1 republika)",\n+        "flag": "/++resource++country-flags/cz.gif",\n+    },\n+    "da-dk": {\n+        "name": "Danish (Denmark)",\n+        "flag": "/++resource++country-flags/dk.gif",\n+    },\n+    "da-gl": {\n+        "name": "Danish (Greenland)",\n+        "flag": "/++resource++country-flags/gl.gif",\n+    },\n+    "de-at": {\n+        "name": "German (Austria)",\n+        "native": "Deutsch (\xc3\x96sterreich)",\n+        "flag": "/++resource++country-flags/at.gif",\n     },\n-    u"de-be": {\n-        u"name": "German (Belgium)",\n-        u"flag": u"/++resource++country-flags/de.gif",\n+    "de-be": {\n+        "name": "German (Belgium)",\n+        "flag": "/++resource++country-flags/de.gif",\n     },\n-    u"de-ch": {\n-        u"name": "German (Switzerland)",\n-        u"flag": u"/++resource++country-flags/ch.gif",\n+    "de-ch": {\n+        "name": "German (Switzerland)",\n+        "flag": "/++resource++country-flags/ch.gif",\n     },\n-    u"de-de": {\n-        u"name": "German (Germany)",\n-        u"flag": u"/++resource++country-flags/de.gif",\n+    "de-de": {\n+        "name": "German (Germany)",\n+        "flag": "/++resource++country-flags/de.gif",\n     },\n-    u"de-dk": {\n-        u"name": "German (Denmark)",\n-        u"flag": u"/++resource++country-flags/de.gif",\n+    "de-dk": {\n+        "name": "German (Denmark)",\n+        "flag": "/++resource++country-flags/de.gif",\n     },\n-    u"de-li": {\n-        u"name": "German (Liechtenstein)",\n-        u"flag": u"/++resource++country-flags/li.gif",\n+    "de-li": {\n+        "name": "German (Liechtenstein)",\n+        "flag": "/++resource++country-flags/li.gif",\n     },\n-    u"de-lu": {\n-        u"name": "German (Luxembourg)",\n-        u"flag": u"/++resource++country-flags/de.gif",\n+    "de-lu": {\n+        "name": "German (Luxembourg)",\n+        "flag": "/++resource++country-flags/de.gif",\n     },\n-    u"el-cy": {\n-        u"name": "Greek (Cyprus)",\n-        u"flag": u"/++resource++country-flags/cy.gif",\n+    "el-cy": {\n+        "name": "Greek (Cyprus)",\n+        "flag": "/++resource++country-flags/cy.gif",\n     },\n-    u"el-gr": {\n-        u"name": "Greek (Greece)",\n-        u"flag": u"/++resource++country-flags/gr.gif",\n+    "el-gr": {\n+        "name": "Greek (Greece)",\n+        "flag": "/++resource++country-flags/gr.gif",\n     },\n-    u"en-ag": {\n-        u"name": "English (Antigua and Barbuda)",\n-        u"flag": u"/++resource++country-flags/ag.gif",\n+    "en-ag": {\n+        "name": "English (Antigua and Barbuda)",\n+        "flag": "/++resource++country-flags/ag.gif",\n     },\n-    u"en-ai": {\n-        u"name": "English (Anguilla)",\n-        u"flag": u"/++resource++country-flags/ai.gif",\n+    "en-ai": {\n+        "name": "English (Anguilla)",\n+        "flag": "/++resource++country-flags/ai.gif",\n     },\n-    u"en-as": {\n-        u"name": "English (American Samoa)",\n-        u"flag": u"/++resource++country-flags/as.gif",\n+    "en-as": {\n+        "name": "English (American Samoa)",\n+        "flag": "/++resource++country-flags/as.gif",\n     },\n-    u"en-au": {\n-        u"name": "English (Australia)",\n-        u"flag": u"/++resource++country-flags/au.gif",\n+    "en-au": {\n+        "name": "English (Australia)",\n+        "flag": "/++resource++country-flags/au.gif",\n     },\n-    u"en-bb": {\n-        u"name": "English (Barbados)",\n-        u"flag": u"/++resource++country-flags/bb.gif",\n+    "en-bb": {\n+        "name": "English (Barbados)",\n+        "flag": "/++resource++country-flags/bb.gif",\n     },\n-    u"en-bm": {\n-        u"name": "English (Bermuda)",\n-        u"flag": u"/++resource++country-flags/bm.gif",\n+    "en-bm": {\n+        "name": "English (Bermuda)",\n+        "flag": "/++resource++country-flags/bm.gif",\n     },\n-    u"en-bn": {\n-        u"name": "English (Brunei)",\n-        u"flag": u"/++resource++country-flags/bn.gif",\n+    "en-bn": {\n+        "name": "English (Brunei)",\n+        "flag": "/++resource++country-flags/bn.gif",\n     },\n-    u"en-bs": {\n-        u"name": "English (Bahamas)",\n-        u"flag": u"/++resource++country-flags/bs.gif",\n+    "en-bs": {\n+        "name": "English (Bahamas)",\n+        "flag": "/++resource++country-flags/bs.gif",\n     },\n-    u"en-bw": {\n-        u"name": "English (Botswana)",\n-        u"flag": u"/++resource++country-flags/bw.gif",\n+    "en-bw": {\n+        "name": "English (Botswana)",\n+        "flag": "/++resource++country-flags/bw.gif",\n     },\n-    u"en-bz": {\n-        u"name": "English (Belize)",\n-        u"flag": u"/++resource++country-flags/bz.gif",\n+    "en-bz": {\n+        "name": "English (Belize)",\n+        "flag": "/++resource++country-flags/bz.gif",\n     },\n-    u"en-ca": {\n-        u"name": "English (Canada)",\n-        u"flag": u"/++resource++country-flags/ca.gif",\n+    "en-ca": {\n+        "name": "English (Canada)",\n+        "flag": "/++resource++country-flags/ca.gif",\n     },\n-    u"en-ck": {\n-        u"name": "English (Cook Islands)",\n-        u"flag": u"/++resource++country-flags/ck.gif",\n+    "en-ck": {\n+        "name": "English (Cook Islands)",\n+        "flag": "/++resource++country-flags/ck.gif",\n     },\n-    u"en-cm": {\n-        u"name": "English (Cameroon)",\n-        u"flag": u"/++resource++country-flags/cm.gif",\n+    "en-cm": {\n+        "name": "English (Cameroon)",\n+        "flag": "/++resource++country-flags/cm.gif",\n     },\n-    u"en-dm": {\n-        u"name": "English (Dominica)",\n-        u"flag": u"/++resource++country-flags/dm.gif",\n+    "en-dm": {\n+        "name": "English (Dominica)",\n+        "flag": "/++resource++country-flags/dm.gif",\n     },\n-    u"en-er": {\n-        u"name": "English (Eritrea)",\n-        u"flag": u"/++resource++country-flags/er.gif",\n+    "en-er": {\n+        "name": "English (Eritrea)",\n+        "flag": "/++resource++country-flags/er.gif",\n     },\n-    u"en-et": {\n-        u"name": "English (Ethiopia)",\n-        u"flag": u"/++resource++country-flags/et.gif",\n+    "en-et": {\n+        "name": "English (Ethiopia)",\n+        "flag": "/++resource++country-flags/et.gif",\n     },\n-    u"en-fj": {\n-        u"name": "English (Fiji)",\n-        u"flag": u"/++resource++country-flags/fj.gif",\n+    "en-fj": {\n+        "name": "English (Fiji)",\n+        "flag": "/++resource++country-flags/fj.gif",\n     },\n-    u"en-fk": {\n-        u"name": "English (Falkland Islands)",\n-        u"flag": u"/++resource++country-flags/fk.gif",\n+    "en-fk": {\n+        "name": "English (Falkland Islands)",\n+        "flag": "/++resource++country-flags/fk.gif",\n     },\n-    u"en-fm": {\n-        u"name": "English (Micronesia)",\n-        u"flag": u"/++resource++country-flags/fm.gif",\n+    "en-fm": {\n+        "name": "English (Micronesia)",\n+        "flag": "/++resource++country-flags/fm.gif",\n     },\n-    u"en-gb": {\n-        u"name": "English (United Kingdom)",\n-        u"flag": u"/++resource++country-flags/gb.gif",\n+    "en-gb": {\n+        "name": "English (United Kingdom)",\n+        "flag": "/++resource++country-flags/gb.gif",\n     },\n-    u"en-gd": {\n-        u"name": "English (Grenada)",\n-        u"flag": u"/++resource++country-flags/gd.gif",\n+    "en-gd": {\n+        "name": "English (Grenada)",\n+        "flag": "/++resource++country-flags/gd.gif",\n     },\n-    u"en-gh": {\n-        u"name": "English (Ghana)",\n-        u"flag": u"/++resource++country-flags/gh.gif",\n+    "en-gh": {\n+        "name": "English (Ghana)",\n+        "flag": "/++resource++country-flags/gh.gif",\n     },\n-    u"en-gi": {\n-        u"name": "English (Gibraltar)",\n-        u"flag": u"/++resource++country-flags/gi.gif",\n+    "en-gi": {\n+        "name": "English (Gibraltar)",\n+        "flag": "/++resource++country-flags/gi.gif",\n     },\n-    u"en-gm": {\n-        u"name": "English (Gambia)",\n-        u"flag": u"/++resource++country-flags/gm.gif",\n+    "en-gm": {\n+        "name": "English (Gambia)",\n+        "flag": "/++resource++country-flags/gm.gif",\n     },\n-    u"en-gu": {\n-        u"name": "English (Guam)",\n-        u"flag": u"/++resource++country-flags/gu.gif",\n+    "en-gu": {\n+        "name": "English (Guam)",\n+        "flag": "/++resource++country-flags/gu.gif",\n     },\n-    u"en-gy": {\n-        u"name": "English (Guyana)",\n-        u"flag": u"/++resource++country-flags/gy.gif",\n+    "en-gy": {\n+        "name": "English (Guyana)",\n+        "flag": "/++resource++country-flags/gy.gif",\n     },\n-    u"en-ie": {\n-        u"name": "English (Ireland)",\n-        u"flag": u"/++resource++country-flags/ie.gif",\n+    "en-ie": {\n+        "name": "English (Ireland)",\n+        "flag": "/++resource++country-flags/ie.gif",\n     },\n-    u"en-il": {\n-        u"name": "English (Israel)",\n-        u"flag": u"/++resource++country-flags/gb.gif",\n+    "en-il": {\n+        "name": "English (Israel)",\n+        "flag": "/++resource++country-flags/gb.gif",\n     },\n-    u"en-io": {\n-        u"name": "English (British Indian Ocean Territory)",\n-        u"flag": u"/++resource++country-flags/io.gif",\n+    "en-io": {\n+        "name": "English (British Indian Ocean Territory)",\n+        "flag": "/++resource++country-flags/io.gif",\n     },\n-    u"en-jm": {\n-        u"name": "English (Jamaica)",\n-        u"flag": u"/++resource++country-flags/jm.gif",\n+    "en-jm": {\n+        "name": "English (Jamaica)",\n+        "flag": "/++resource++country-flags/jm.gif",\n     },\n-    u"en-ke": {\n-        u"name": "English (Kenya)",\n-        u"flag": u"/++resource++country-flags/ke.gif",\n+    "en-ke": {\n+        "name": "English (Kenya)",\n+        "flag": "/++resource++country-flags/ke.gif",\n     },\n-    u"en-ki": {\n-        u"name": "English (Kiribati)",\n-        u"flag": u"/++resource++country-flags/ki.gif",\n+    "en-ki": {\n+        "name": "English (Kiribati)",\n+        "flag": "/++resource++country-flags/ki.gif",\n     },\n-    u"en-kn": {\n-        u"name": "English (St. Kitts-Nevis)",\n-        u"flag": u"/++resource++country-flags/kn.gif",\n+    "en-kn": {\n+        "name": "English (St. Kitts-Nevis)",\n+        "flag": "/++resource++country-flags/kn.gif",\n     },\n-    u"en-ky": {\n-        u"name": "English (Cayman Islands)",\n-        u"flag": u"/++resource++country-flags/ky.gif",\n+    "en-ky": {\n+        "name": "English (Cayman Islands)",\n+        "flag": "/++resource++country-flags/ky.gif",\n     },\n-    u"en-lc": {\n-        u"name": "English (St. Lucia)",\n-        u"flag": u"/++resource++country-flags/lc.gif",\n+    "en-lc": {\n+        "name": "English (St. Lucia)",\n+        "flag": "/++resource++country-flags/lc.gif",\n     },\n-    u"en-lr": {\n-        u"name": "English (Liberia)",\n-        u"flag": u"/++resource++country-flags/lr.gif",\n+    "en-lr": {\n+        "name": "English (Liberia)",\n+        "flag": "/++resource++country-flags/lr.gif",\n     },\n-    u"en-ls": {\n-        u"name": "English (Lesotho)",\n-        u"flag": u"/++resource++country-flags/ls.gif",\n+    "en-ls": {\n+        "name": "English (Lesotho)",\n+        "flag": "/++resource++country-flags/ls.gif",\n     },\n-    u"en-mp": {\n-        u"name": "English (Northern Mariana Islands)",\n-        u"flag": u"/++resource++country-flags/mp.gif",\n+    "en-mp": {\n+        "name": "English (Northern Mariana Islands)",\n+        "flag": "/++resource++country-flags/mp.gif",\n     },\n-    u"en-ms": {\n-        u"name": "English (Montserrat)",\n-        u"flag": u"/++resource++country-flags/ms.gif",\n+    "en-ms": {\n+        "name": "English (Montserrat)",\n+        "flag": "/++resource++country-flags/ms.gif",\n     },\n-    u"en-mt": {\n-        u"name": "English (Malta)",\n-        u"flag": u"/++resource++country-flags/mt.gif",\n+    "en-mt": {\n+        "name": "English (Malta)",\n+        "flag": "/++resource++country-flags/mt.gif",\n     },\n-    u"en-mu": {\n-        u"name": "English (Mauritius)",\n-        u"flag": u"/++resource++country-flags/mu.gif",\n+    "en-mu": {\n+        "name": "English (Mauritius)",\n+        "flag": "/++resource++country-flags/mu.gif",\n     },\n-    u"en-mw": {\n-        u"name": "English (Malawi)",\n-        u"flag": u"/++resource++country-flags/mw.gif",\n+    "en-mw": {\n+        "name": "English (Malawi)",\n+        "flag": "/++resource++country-flags/mw.gif",\n     },\n-    u"en-na": {\n-        u"name": "English (Namibia)",\n-        u"flag": u"/++resource++country-flags/na.gif",\n+    "en-na": {\n+        "name": "English (Namibia)",\n+        "flag": "/++resource++country-flags/na.gif",\n     },\n-    u"en-nf": {\n-        u"name": "English (Norfolk Island)",\n-        u"flag": u"/++resource++country-flags/nf.gif",\n+    "en-nf": {\n+        "name": "English (Norfolk Island)",\n+        "flag": "/++resource++country-flags/nf.gif",\n     },\n-    u"en-ng": {\n-        u"name": "English (Nigeria)",\n-        u"flag": u"/++resource++country-flags/ng.gif",\n+    "en-ng": {\n+        "name": "English (Nigeria)",\n+        "flag": "/++resource++country-flags/ng.gif",\n     },\n-    u"en-nr": {\n-        u"name": "English (Nauru)",\n-        u"flag": u"/++resource++country-flags/nr.gif",\n+    "en-nr": {\n+        "name": "English (Nauru)",\n+        "flag": "/++resource++country-flags/nr.gif",\n     },\n-    u"en-nu": {\n-        u"name": "English (Niue)",\n-        u"flag": u"/++resource++country-flags/nu.gif",\n+    "en-nu": {\n+        "name": "English (Niue)",\n+        "flag": "/++resource++country-flags/nu.gif",\n     },\n-    u"en-nz": {\n-        u"name": "English (New Zealand)",\n-        u"flag": u"/++resource++country-flags/nz.gif",\n+    "en-nz": {\n+        "name": "English (New Zealand)",\n+        "flag": "/++resource++country-flags/nz.gif",\n     },\n-    u"en-pg": {\n-        u"name": "English (Papua New Guinea)",\n-        u"flag": u"/++resource++country-flags/pg.gif",\n+    "en-pg": {\n+        "name": "English (Papua New Guinea)",\n+        "flag": "/++resource++country-flags/pg.gif",\n     },\n-    u"en-ph": {\n-        u"name": "English (Philippines)",\n-        u"flag": u"/++resource++country-flags/ph.gif",\n+    "en-ph": {\n+        "name": "English (Philippines)",\n+        "flag": "/++resource++country-flags/ph.gif",\n     },\n-    u"en-pk": {\n-        u"name": "English (Pakistan)",\n-        u"flag": u"/++resource++country-flags/pk.gif",\n+    "en-pk": {\n+        "name": "English (Pakistan)",\n+        "flag": "/++resource++country-flags/pk.gif",\n     },\n-    u"en-pn": {\n-        u"name": "English (Pitcairn)",\n-        u"flag": u"/++resource++country-flags/pn.gif",\n+    "en-pn": {\n+        "name": "English (Pitcairn)",\n+        "flag": "/++resource++country-flags/pn.gif",\n     },\n-    u"en-pr": {\n-        u"name": "English (Puerto Rico)",\n-        u"flag": u"/++resource++country-flags/pr.gif",\n+    "en-pr": {\n+        "name": "English (Puerto Rico)",\n+        "flag": "/++resource++country-flags/pr.gif",\n     },\n-    u"en-pw": {\n-        u"name": "English (Palau)",\n-        u"flag": u"/++resource++country-flags/pw.gif",\n+    "en-pw": {\n+        "name": "English (Palau)",\n+        "flag": "/++resource++country-flags/pw.gif",\n     },\n-    u"en-rw": {\n-        u"name": "English (Rwanda)",\n-        u"flag": u"/++resource++country-flags/rw.gif",\n+    "en-rw": {\n+        "name": "English (Rwanda)",\n+        "flag": "/++resource++country-flags/rw.gif",\n     },\n-    u"en-sb": {\n-        u"name": "English (Solomon Islands)",\n-        u"flag": u"/++resource++country-flags/sb.gif",\n+    "en-sb": {\n+        "name": "English (Solomon Islands)",\n+        "flag": "/++resource++country-flags/sb.gif",\n     },\n-    u"en-sc": {\n-        u"name": "English (Seychelles)",\n-        u"flag": u"/++resource++country-flags/sc.gif",\n+    "en-sc": {\n+        "name": "English (Seychelles)",\n+        "flag": "/++resource++country-flags/sc.gif",\n     },\n-    u"en-sg": {\n-        u"name": "English (Singapore)",\n-        u"flag": u"/++resource++country-flags/sg.gif",\n+    "en-sg": {\n+        "name": "English (Singapore)",\n+        "flag": "/++resource++country-flags/sg.gif",\n     },\n-    u"en-sh": {\n-        u"name": "English (St. Helena)",\n-        u"flag": u"/++resource++country-flags/sh.gif",\n+    "en-sh": {\n+        "name": "English (St. Helena)",\n+        "flag": "/++resource++country-flags/sh.gif",\n     },\n-    u"en-sl": {\n-        u"name": "English (Sierra Leone)",\n-        u"flag": u"/++resource++country-flags/sl.gif",\n+    "en-sl": {\n+        "name": "English (Sierra Leone)",\n+        "flag": "/++resource++country-flags/sl.gif",\n     },\n-    u"en-so": {\n-        u"name": "English (Somalia)",\n-        u"flag": u"/++resource++country-flags/so.gif",\n+    "en-so": {\n+        "name": "English (Somalia)",\n+        "flag": "/++resource++country-flags/so.gif",\n     },\n-    u"en-sz": {\n-        u"name": "English (Swaziland)",\n-        u"flag": u"/++resource++country-flags/sz.gif",\n+    "en-sz": {\n+        "name": "English (Swaziland)",\n+        "flag": "/++resource++country-flags/sz.gif",\n     },\n-    u"en-tc": {\n-        u"name": "English (Turks and Caicos Islands)",\n-        u"flag": u"/++resource++country-flags/tc.gif",\n+    "en-tc": {\n+        "name": "English (Turks and Caicos Islands)",\n+        "flag": "/++resource++country-flags/tc.gif",\n     },\n-    u"en-tk": {\n-        u"name": "English (Tokelau)",\n-        u"flag": u"/++resource++country-flags/tk.gif",\n+    "en-tk": {\n+        "name": "English (Tokelau)",\n+        "flag": "/++resource++country-flags/tk.gif",\n     },\n-    u"en-to": {\n-        u"name": "English (Tonga)",\n-        u"flag": u"/++resource++country-flags/to.gif",\n+    "en-to": {\n+        "name": "English (Tonga)",\n+        "flag": "/++resource++country-flags/to.gif",\n     },\n-    u"en-tt": {\n-        u"name": "English (Trinidad and Tobago)",\n-        u"flag": u"/++resource++country-flags/tt.gif",\n+    "en-tt": {\n+        "name": "English (Trinidad and Tobago)",\n+        "flag": "/++resource++country-flags/tt.gif",\n     },\n-    u"en-ug": {\n-        u"name": "English (Uganda)",\n-        u"flag": u"/++resource++country-flags/ug.gif",\n+    "en-ug": {\n+        "name": "English (Uganda)",\n+        "flag": "/++resource++country-flags/ug.gif",\n     },\n-    u"en-us": {\n-        u"name": "English (USA)",\n-        u"flag": u"/++resource++country-flags/us.gif",\n+    "en-us": {\n+        "name": "English (USA)",\n+        "flag": "/++resource++country-flags/us.gif",\n     },\n-    u"en-vc": {\n-        u"name": "English (St. Vincent and the Grenadi)",\n-        u"flag": u"/++resource++country-flags/vc.gif",\n+    "en-vc": {\n+        "name": "English (St. Vincent and the Grenadi)",\n+        "flag": "/++resource++country-flags/vc.gif",\n     },\n-    u"en-vg": {\n-        u"name": "English (British Virgin Islands)",\n-        u"flag": u"/++resource++country-flags/vg.gif",\n+    "en-vg": {\n+        "name": "English (British Virgin Islands)",\n+        "flag": "/++resource++country-flags/vg.gif",\n     },\n-    u"en-vi": {\n-        u"name": "English (U.S. Virgin Islands)",\n-        u"flag": u"/++resource++country-flags/vi.gif",\n+    "en-vi": {\n+        "name": "English (U.S. Virgin Islands)",\n+        "flag": "/++resource++country-flags/vi.gif",\n     },\n-    u"en-vu": {\n-        u"name": "English (Vanuatu)",\n-        u"flag": u"/++resource++country-flags/vu.gif",\n+    "en-vu": {\n+        "name": "English (Vanuatu)",\n+        "flag": "/++resource++country-flags/vu.gif",\n     },\n-    u"en-ws": {\n-        u"name": "English (Western Samoa)",\n-        u"flag": u"/++resource++country-flags/ws.gif",\n+    "en-ws": {\n+        "name": "English (Western Samoa)",\n+        "flag": "/++resource++country-flags/ws.gif",\n     },\n-    u"en-za": {\n-        u"name": "English (South Africa)",\n-        u"flag": u"/++resource++country-flags/za.gif",\n+    "en-za": {\n+        "name": "English (South Africa)",\n+        "flag": "/++resource++country-flags/za.gif",\n     },\n-    u"en-zm": {\n-        u"name": "English (Zambia)",\n-        u"flag": u"/++resource++country-flags/zm.gif",\n+    "en-zm": {\n+        "name": "English (Zambia)",\n+        "flag": "/++resource++country-flags/zm.gif",\n     },\n-    u"en-zw": {\n-        u"name": "English (Zimbabwe)",\n-        u"flag": u"/++resource++country-flags/zw.gif",\n+    "en-zw": {\n+        "name": "English (Zimbabwe)",\n+        "flag": "/++resource++country-flags/zw.gif",\n     },\n-    u"es-ar": {\n-        u"name": "Spanish (Argentina)",\n-        u"flag": u"/++resource++country-flags/ar.gif",\n+    "es-ar": {\n+        "name": "Spanish (Argentina)",\n+        "flag": "/++resource++country-flags/ar.gif",\n     },\n-    u"es-bo": {\n-        u"name": "Spanish (Bolivia)",\n-        u"flag": u"/++resource++country-flags/bo.gif",\n+    "es-bo": {\n+        "name": "Spanish (Bolivia)",\n+        "flag": "/++resource++country-flags/bo.gif",\n     },\n-    u"es-cl": {\n-        u"name": "Spanish (Chile)",\n-        u"flag": u"/++resource++country-flags/cl.gif",\n+    "es-cl": {\n+        "name": "Spanish (Chile)",\n+        "flag": "/++resource++country-flags/cl.gif",\n     },\n-    u"es-co": {\n-        u"name": "Spanish (Colombia)",\n-        u"flag": u"/++resource++country-flags/co.gif",\n+    "es-co": {\n+        "name": "Spanish (Colombia)",\n+        "flag": "/++resource++country-flags/co.gif",\n     },\n-    u"es-cr": {\n-        u"name": "Spanish (Costa Rica)",\n-        u"flag": u"/++resource++country-flags/cr.gif",\n+    "es-cr": {\n+        "name": "Spanish (Costa Rica)",\n+        "flag": "/++resource++country-flags/cr.gif",\n     },\n-    u"es-cu": {\n-        u"name": "Spanish (Cuba)",\n-        u"flag": u"/++resource++country-flags/cu.gif",\n+    "es-cu": {\n+        "name": "Spanish (Cuba)",\n+        "flag": "/++resource++country-flags/cu.gif",\n     },\n-    u"es-do": {\n-        u"name": "Spanish (Dominican Republic)",\n-        u"flag": u"/++resource++country-flags/do.gif",\n+    "es-do": {\n+        "name": "Spanish (Dominican Republic)",\n+        "flag": "/++resource++country-flags/do.gif",\n     },\n-    u"es-ec": {\n-        u"name": "Spanish (Ecuador)",\n-        u"flag": u"/++resource++country-flags/ec.gif",\n+    "es-ec": {\n+        "name": "Spanish (Ecuador)",\n+        "flag": "/++resource++country-flags/ec.gif",\n     },\n-    u"es-es": {\n-        u"name": "Spanish (Spain)",\n-        u"flag": u"/++resource++country-flags/es.gif",\n+    "es-es": {\n+        "name": "Spanish (Spain)",\n+        "flag": "/++resource++country-flags/es.gif",\n     },\n-    u"es-gq": {\n-        u"name": "Spanish (Equatorial Guinea)",\n-        u"flag": u"/++resource++country-flags/gq.gif",\n+    "es-gq": {\n+        "name": "Spanish (Equatorial Guinea)",\n+        "flag": "/++resource++country-flags/gq.gif",\n     },\n-    u"es-gt": {\n-        u"name": "Spanish (Guatemala)",\n-        u"flag": u"/++resource++country-flags/gt.gif",\n+    "es-gt": {\n+        "name": "Spanish (Guatemala)",\n+        "flag": "/++resource++country-flags/gt.gif",\n     },\n-    u"es-hn": {\n-        u"name": "Spanish (Honduras)",\n-        u"flag": u"/++resource++country-flags/hn.gif",\n+    "es-hn": {\n+        "name": "Spanish (Honduras)",\n+        "flag": "/++resource++country-flags/hn.gif",\n     },\n-    u"es-mx": {\n-        u"name": "Spanish (Mexico)",\n-        u"flag": u"/++resource++country-flags/mx.gif",\n+    "es-mx": {\n+        "name": "Spanish (Mexico)",\n+        "flag": "/++resource++country-flags/mx.gif",\n     },\n-    u"es-ni": {\n-        u"name": "Spanish (Nicaragua)",\n-        u"flag": u"/++resource++country-flags/ni.gif",\n+    "es-ni": {\n+        "name": "Spanish (Nicaragua)",\n+        "flag": "/++resource++country-flags/ni.gif",\n     },\n-    u"es-pa": {\n-        u"name": "Spanish (Panama)",\n-        u"flag": u"/++resource++country-flags/pa.gif",\n+    "es-pa": {\n+        "name": "Spanish (Panama)",\n+        "flag": "/++resource++country-flags/pa.gif",\n     },\n-    u"es-pe": {\n-        u"name": "Spanish (Peru)",\n-        u"flag": u"/++resource++country-flags/pe.gif",\n+    "es-pe": {\n+        "name": "Spanish (Peru)",\n+        "flag": "/++resource++country-flags/pe.gif",\n     },\n-    u"es-pr": {\n-        u"name": "Spanish (Puerto Rico)",\n-        u"flag": u"/++resource++country-flags/pr.gif",\n+    "es-pr": {\n+        "name": "Spanish (Puerto Rico)",\n+        "flag": "/++resource++country-flags/pr.gif",\n     },\n-    u"es-py": {\n-        u"name": "Spanish (Paraguay)",\n-        u"flag": u"/++resource++country-flags/py.gif",\n+    "es-py": {\n+        "name": "Spanish (Paraguay)",\n+        "flag": "/++resource++country-flags/py.gif",\n     },\n-    u"es-sv": {\n-        u"name": "Spanish (El Salvador)",\n-        u"flag": u"/++resource++country-flags/sv.gif",\n+    "es-sv": {\n+        "name": "Spanish (El Salvador)",\n+        "flag": "/++resource++country-flags/sv.gif",\n     },\n-    u"es-us": {\n-        u"name": "Spanish (USA)",\n-        u"flag": u"/++resource++country-flags/us.gif",\n+    "es-us": {\n+        "name": "Spanish (USA)",\n+        "flag": "/++resource++country-flags/us.gif",\n     },\n-    u"es-uy": {\n-        u"name": "Spanish (Uruguay)",\n-        u"flag": u"/++resource++country-flags/uy.gif",\n+    "es-uy": {\n+        "name": "Spanish (Uruguay)",\n+        "flag": "/++resource++country-flags/uy.gif",\n     },\n-    u"es-ve": {\n-        u"name": "Spanish (Venezuela)",\n-        u"flag": u"/++resource++country-flags/ve.gif",\n+    "es-ve": {\n+        "name": "Spanish (Venezuela)",\n+        "flag": "/++resource++country-flags/ve.gif",\n     },\n-    u"fr-ad": {\n-        u"name": "French (Andorra)",\n-        u"flag": u"/++resource++country-flags/ad.gif",\n+    "fr-ad": {\n+        "name": "French (Andorra)",\n+        "flag": "/++resource++country-flags/ad.gif",\n     },\n-    u"fr-be": {\n-        u"name": "French (Belgium)",\n-        u"flag": u"/++resource++country-flags/be.gif",\n+    "fr-be": {\n+        "name": "French (Belgium)",\n+        "flag": "/++resource++country-flags/be.gif",\n     },\n-    u"fr-bf": {\n-        u"name": "French (Burkina Faso)",\n-        u"flag": u"/++resource++country-flags/bf.gif",\n+    "fr-bf": {\n+        "name": "French (Burkina Faso)",\n+        "flag": "/++resource++country-flags/bf.gif",\n     },\n-    u"fr-bi": {\n-        u"name": "French (Burundi)",\n-        u"flag": u"/++resource++country-flags/bi.gif",\n+    "fr-bi": {\n+        "name": "French (Burundi)",\n+        "flag": "/++resource++country-flags/bi.gif",\n     },\n-    u"fr-bj": {\n-        u"name": "French (Benin)",\n-        u"flag": u"/++resource++country-flags/bj.gif",\n+    "fr-bj": {\n+        "name": "French (Benin)",\n+        "flag": "/++resource++country-flags/bj.gif",\n     },\n-    u"fr-ca": {\n-        u"name": "French (Canada)",\n-        u"flag": u"/++resource++country-flags/ca.gif",\n+    "fr-ca": {\n+        "name": "French (Canada)",\n+        "flag": "/++resource++country-flags/ca.gif",\n     },\n-    u"fr-cd": {\n-        u"name": "French (Democratic Republic of Congo)",\n-        u"flag": u"/++resource++country-flags/cd.gif",\n+    "fr-cd": {\n+        "name": "French (Democratic Republic of Congo)",\n+        "flag": "/++resource++country-flags/cd.gif",\n     },\n-    u"fr-cf": {\n-        u"name": "French (Central African Republic)",\n-        u"flag": u"/++resource++country-flags/cf.gif",\n+    "fr-cf": {\n+        "name": "French (Central African Republic)",\n+        "flag": "/++resource++country-flags/cf.gif",\n     },\n-    u"fr-cg": {\n-        u"name": "French (Congo)",\n-        u"flag": u"/++resource++country-flags/cg.gif",\n+    "fr-cg": {\n+        "name": "French (Congo)",\n+        "flag": "/++resource++country-flags/cg.gif",\n     },\n-    u"fr-ch": {\n-        u"name": "French (Switzerland)",\n-        u"flag": u"/++resource++country-flags/ch.gif",\n+    "fr-ch": {\n+        "name": "French (Switzerland)",\n+        "flag": "/++resource++country-flags/ch.gif",\n     },\n-    u"fr-ci": {\n-        u"name": "French (Cote d\'Ivoire)",\n-        u"flag": u"/++resource++country-flags/ci.gif",\n+    "fr-ci": {\n+        "name": "French (Cote d\'Ivoire)",\n+        "flag": "/++resource++country-flags/ci.gif",\n     },\n-    u"fr-cm": {\n-        u"name": "French (Cameroon)",\n-        u"flag": u"/++resource++country-flags/cm.gif",\n+    "fr-cm": {\n+        "name": "French (Cameroon)",\n+        "flag": "/++resource++country-flags/cm.gif",\n     },\n-    u"fr-dj": {\n-        u"name": "French (Djibouti)",\n-        u"flag": u"/++resource++country-flags/dj.gif",\n+    "fr-dj": {\n+        "name": "French (Djibouti)",\n+        "flag": "/++resource++country-flags/dj.gif",\n     },\n-    u"fr-fr": {\n-        u"name": "French (France)",\n-        u"flag": u"/++resource++country-flags/fr.gif",\n+    "fr-fr": {\n+        "name": "French (France)",\n+        "flag": "/++resource++country-flags/fr.gif",\n     },\n-    u"fr-ga": {\n-        u"name": "French (Gabon)",\n-        u"flag": u"/++resource++country-flags/ga.gif",\n+    "fr-ga": {\n+        "name": "French (Gabon)",\n+        "flag": "/++resource++country-flags/ga.gif",\n     },\n-    u"fr-gb": {\n-        u"name": "French (United Kingdom)",\n-        u"flag": u"/++resource++country-flags/gb.gif",\n+    "fr-gb": {\n+        "name": "French (United Kingdom)",\n+        "flag": "/++resource++country-flags/gb.gif",\n     },\n-    u"fr-gf": {\n-        u"name": "French (French Guiana)",\n-        u"flag": u"/++resource++country-flags/gf.gif",\n+    "fr-gf": {\n+        "name": "French (French Guiana)",\n+        "flag": "/++resource++country-flags/gf.gif",\n     },\n-    u"fr-gn": {\n-        u"name": "French (Guinea)",\n-        u"flag": u"/++resource++country-flags/gn.gif",\n+    "fr-gn": {\n+        "name": "French (Guinea)",\n+        "flag": "/++resource++country-flags/gn.gif",\n     },\n-    u"fr-gp": {\n-        u"name": "French (Guadeloupe)",\n-        u"flag": u"/++resource++country-flags/gp.gif",\n+    "fr-gp": {\n+        "name": "French (Guadeloupe)",\n+        "flag": "/++resource++country-flags/gp.gif",\n     },\n-    u"fr-ht": {\n-        u"name": "French (Haiti)",\n-        u"flag": u"/++resource++country-flags/ht.gif",\n+    "fr-ht": {\n+        "name": "French (Haiti)",\n+        "flag": "/++resource++country-flags/ht.gif",\n     },\n-    u"fr-it": {\n-        u"name": "French (Italy)",\n-        u"flag": u"/++resource++country-flags/it.gif",\n+    "fr-it": {\n+        "name": "French (Italy)",\n+        "flag": "/++resource++country-flags/it.gif",\n     },\n-    u"fr-km": {\n-        u"name": "French (Comoros Islands)",\n-        u"flag": u"/++resource++country-flags/km.gif",\n+    "fr-km": {\n+        "name": "French (Comoros Islands)",\n+        "flag": "/++resource++country-flags/km.gif",\n     },\n-    u"fr-lb": {\n-        u"name": "French (Lebanon)",\n-        u"flag": u"/++resource++country-flags/lb.gif",\n+    "fr-lb": {\n+        "name": "French (Lebanon)",\n+        "flag": "/++resource++country-flags/lb.gif",\n     },\n-    u"fr-lu": {\n-        u"name": "French (Luxembourg)",\n-        u"flag": u"/++resource++country-flags/lu.gif",\n+    "fr-lu": {\n+        "name": "French (Luxembourg)",\n+        "flag": "/++resource++country-flags/lu.gif",\n     },\n-    u"fr-mc": {\n-        u"name": "French (Monaco)",\n-        u"flag": u"/++resource++country-flags/mc.gif",\n+    "fr-mc": {\n+        "name": "French (Monaco)",\n+        "flag": "/++resource++country-flags/mc.gif",\n     },\n-    u"fr-mg": {\n-        u"name": "French (Madagascar)",\n-        u"flag": u"/++resource++country-flags/mg.gif",\n+    "fr-mg": {\n+        "name": "French (Madagascar)",\n+        "flag": "/++resource++country-flags/mg.gif",\n     },\n-    u"fr-ml": {\n-        u"name": "French (Mali)",\n-        u"flag": u"/++resource++country-flags/ml.gif",\n+    "fr-ml": {\n+        "name": "French (Mali)",\n+        "flag": "/++resource++country-flags/ml.gif",\n     },\n-    u"fr-mq": {\n-        u"name": "French (Martinique)",\n-        u"flag": u"/++resource++country-flags/mq.gif",\n+    "fr-mq": {\n+        "name": "French (Martinique)",\n+        "flag": "/++resource++country-flags/mq.gif",\n     },\n-    u"fr-nc": {\n-        u"name": "French (New Caledonia)",\n-        u"flag": u"/++resource++country-flags/nc.gif",\n+    "fr-nc": {\n+        "name": "French (New Caledonia)",\n+        "flag": "/++resource++country-flags/nc.gif",\n     },\n-    u"fr-pf": {\n-        u"name": "French (French Polynesia)",\n-        u"flag": u"/++resource++country-flags/pf.gif",\n+    "fr-pf": {\n+        "name": "French (French Polynesia)",\n+        "flag": "/++resource++country-flags/pf.gif",\n     },\n-    u"fr-pm": {\n-        u"name": "French (St. Pierre and Miquelon)",\n-        u"flag": u"/++resource++country-flags/pm.gif",\n+    "fr-pm": {\n+        "name": "French (St. Pierre and Miquelon)",\n+        "flag": "/++resource++country-flags/pm.gif",\n     },\n-    u"fr-re": {\n-        u"name": "French (Reunion)",\n-        u"flag": u"/++resource++country-flags/re.gif",\n+    "fr-re": {\n+        "name": "French (Reunion)",\n+        "flag": "/++resource++country-flags/re.gif",\n     },\n-    u"fr-rw": {\n-        u"name": "French (Rwanda)",\n-        u"flag": u"/++resource++country-flags/rw.gif",\n+    "fr-rw": {\n+        "name": "French (Rwanda)",\n+        "flag": "/++resource++country-flags/rw.gif",\n     },\n-    u"fr-sc": {\n-        u"name": "French (Seychelles)",\n-        u"flag": u"/++resource++country-flags/sc.gif",\n+    "fr-sc": {\n+        "name": "French (Seychelles)",\n+        "flag": "/++resource++country-flags/sc.gif",\n     },\n-    u"fr-td": {\n-        u"name": "French (Chad)",\n-        u"flag": u"/++resource++country-flags/td.gif",\n+    "fr-td": {\n+        "name": "French (Chad)",\n+        "flag": "/++resource++country-flags/td.gif",\n     },\n-    u"fr-tg": {\n-        u"name": "French (Togo)",\n-        u"flag": u"/++resource++country-flags/tg.gif",\n+    "fr-tg": {\n+        "name": "French (Togo)",\n+        "flag": "/++resource++country-flags/tg.gif",\n     },\n-    u"fr-vu": {\n-        u"name": "French (Vanuatu)",\n-        u"flag": u"/++resource++country-flags/vu.gif",\n+    "fr-vu": {\n+        "name": "French (Vanuatu)",\n+        "flag": "/++resource++country-flags/vu.gif",\n     },\n-    u"fr-wf": {\n-        u"name": "French (Wallis and Futuna)",\n-        u"flag": u"/++resource++country-flags/wf.gif",\n+    "fr-wf": {\n+        "name": "French (Wallis and Futuna)",\n+        "flag": "/++resource++country-flags/wf.gif",\n     },\n-    u"fr-yt": {\n-        u"name": "French (Mayotte)",\n-        u"flag": u"/++resource++country-flags/yt.gif",\n+    "fr-yt": {\n+        "name": "French (Mayotte)",\n+        "flag": "/++resource++country-flags/yt.gif",\n     },\n-    u"hr-ba": {\n-        u"name": "Croatian (Bosnia-Herzegovina)",\n-        u"flag": u"/++resource++country-flags/ba.gif",\n+    "hr-ba": {\n+        "name": "Croatian (Bosnia-Herzegovina)",\n+        "flag": "/++resource++country-flags/ba.gif",\n     },\n-    u"hr-hr": {\n-        u"name": "Croatian (Croatia)",\n-        u"flag": u"/++resource++country-flags/hr.gif",\n-    },\n-    u"hu-hu": {\n-        u"name": "Hungarian (Hungary)",\n-        u"flag": u"/++resource++country-flags/hu.gif",\n-    },\n-    u"hu-si": {\n-        u"name": "Hungarian (Slovenia)",\n-        u"flag": u"/++resource++country-flags/hu.gif",\n-    },\n-    u"it-ch": {\n-        u"name": "Italian (Switzerland)",\n-        u"flag": u"/++resource++country-flags/it.gif",\n-    },\n-    u"it-hr": {\n-        u"name": "Italian (Croatia)",\n-        u"flag": u"/++resource++country-flags/it.gif",\n-    },\n-    u"it-it": {\n-        u"name": "Italian (Italy)",\n-        u"flag": u"/++resource++country-flags/it.gif",\n-    },\n-    u"it-si": {\n-        u"name": "Italian (Slovenia)",\n-        u"flag": u"/++resource++country-flags/it.gif",\n-    },\n-    u"it-sm": {\n-        u"name": "Italian (San Marino)",\n-        u"flag": u"/++resource++country-flags/sm.gif",\n-    },\n-    u"ko-kp": {\n-        u"name": "Korean (Korea, North)",\n-        u"flag": u"/++resource++country-flags/kp.gif",\n-    },\n-    u"ko-kr": {\n-        u"name": "Korean (Korea, South)",\n-        u"flag": u"/++resource++country-flags/kr.gif",\n-    },\n-    u"ln-cd": {\n-        u"name": "Lingala (Democratic Republic of Congo)",\n-        u"flag": u"/++resource++country-flags/cd.gif",\n-    },\n-    u"ln-cg": {\n-        u"name": "Lingala (Congo)",\n-        u"flag": u"/++resource++country-flags/cg.gif",\n-    },\n-    u"ms-bn": {\n-        u"name": "Malay (Brunei)",\n-        u"flag": u"/++resource++country-flags/bn.gif",\n-    },\n-    u"ms-my": {\n-        u"name": "Malay (Malaysia)",\n-        u"flag": u"/++resource++country-flags/my.gif",\n-    },\n-    u"ms-sg": {\n-        u"name": "Malay (Singapore)",\n-        u"flag": u"/++resource++country-flags/sg.gif",\n-    },\n-    u"nl-an": {\n-        u"name": "Dutch (Netherlands Antilles)",\n-        u"flag": u"/++resource++country-flags/an.gif",\n-    },\n-    u"nl-aw": {\n-        u"name": "Dutch (Aruba)",\n-        u"flag": u"/++resource++country-flags/aw.gif",\n-    },\n-    u"nl-be": {\n-        u"name": "Dutch (Belgium)",\n-        u"flag": u"/++resource++country-flags/be.gif",\n-    },\n-    u"nl-nl": {\n-        u"name": "Dutch (Netherlands)",\n-        u"flag": u"/++resource++country-flags/nl.gif",\n-    },\n-    u"nl-sr": {\n-        u"name": "Dutch (Suriname)",\n-        u"flag": u"/++resource++country-flags/sr.gif",\n-    },\n-    u"pt-ao": {\n-        u"name": "Portuguese (Angola)",\n-        u"native": "Portugu\xc3\xaas (Angola)",\n-        u"flag": u"/++resource++country-flags/ao.gif",\n-    },\n-    u"pt-br": {\n-        u"name": "Portuguese (Brazil)",\n-        u"native": "Portugu\xc3\xaas (Brasil)",\n-        u"flag": u"/++resource++country-flags/br.gif",\n-    },\n-    u"pt-cv": {\n-        u"name": "Portuguese (Ilhas Cabo Verde)",\n-        u"native": "Portugu\xc3\xaas (Cabo Verde)",\n-        u"flag": u"/++resource++country-flags/cv.gif",\n-    },\n-    u"pt-gw": {\n-        u"name": "Portuguese (Guin\xc3\xa9-Bissau)",\n-        u"native": "Portugu\xc3\xaas (Guin\xc3\xa9-Bissau)",\n-        u"flag": u"/++resource++country-flags/gw.gif",\n-    },\n-    u"pt-mz": {\n-        u"name": "Portuguese (Mo\xc3\xa7ambique)",\n-        u"native": "Portugu\xc3\xaas (Mo\xc3\xa7ambique)",\n-        u"flag": u"/++resource++country-flags/mz.gif",\n-    },\n-    u"pt-pt": {\n-        u"name": "Portuguese (Portugal)",\n-        u"native": "Portugu\xc3\xaas (Portugal)",\n-        u"flag": u"/++resource++country-flags/pt.gif",\n-    },\n-    u"pt-st": {\n-        u"name": "Portuguese (S\xc3\xa3o Tom\xc3\xa9 e Pr\xc3\xadncipe)",\n-        u"native": "Portugu\xc3\xaas (S\xc3\xa3o Tom\xc3\xa9 e Pr\xc3\xadncipe)",\n-        u"flag": u"/++resource++country-flags/st.gif",\n-    },\n-    u"sd-in": {\n-        u"name": "Sindhi (India)",\n-        u"flag": u"/++resource++country-flags/in.gif",\n-    },\n-    u"sd-pk": {\n-        u"name": "Sindhi (Pakistan)",\n-        u"flag": u"/++resource++country-flags/pk.gif",\n-    },\n-    u"sr-ba": {\n-        u"name": "Serbian (Bosnia-Herzegovina)",\n-        u"flag": u"/++resource++country-flags/ba.gif",\n-    },\n-    u"ss-sz": {\n-        u"name": "Swati (Swaziland)",\n-        u"flag": u"/++resource++country-flags/sz.gif",\n-    },\n-    u"ss-za": {\n-        u"name": "Swati (South Africa)",\n-        u"flag": u"/++resource++country-flags/za.gif",\n-    },\n-    u"sv-fi": {\n-        u"name": "Swedish (Finland)",\n-        u"flag": u"/++resource++country-flags/se.gif",\n-    },\n-    u"sv-se": {\n-        u"name": "Swedish (Sweden)",\n-        u"flag": u"/++resource++country-flags/se.gif",\n-    },\n-    u"sw-ke": {\n-        u"name": "Swahili (Kenya)",\n-        u"flag": u"/++resource++country-flags/ke.gif",\n-    },\n-    u"sw-tz": {\n-        u"name": "Swahili (Tanzania)",\n-        u"flag": u"/++resource++country-flags/tz.gif",\n-    },\n-    u"ta-in": {\n-        u"name": "Tamil (India)",\n-        u"flag": u"/++resource++country-flags/in.gif",\n-    },\n-    u"ta-sg": {\n-        u"name": "Tamil (Singapore)",\n-        u"flag": u"/++resource++country-flags/sg.gif",\n-    },\n-    u"tn-bw": {\n-        u"name": "Tswana (Botswana)",\n-        u"flag": u"/++resource++country-flags/bw.gif",\n-    },\n-    u"tn-za": {\n-        u"name": "Tswana (South Africa)",\n-        u"flag": u"/++resource++country-flags/za.gif",\n-    },\n-    u"tr-bg": {\n-        u"name": "Turkish (Bulgaria)",\n-        u"flag": u"/++resource++country-flags/tr.gif",\n-    },\n-    u"tr-cy": {\n-        u"name": "Turkish (Cyprus)",\n-        u"flag": u"/++resource++country-flags/tr.gif",\n-    },\n-    u"tr-tr": {\n-        u"name": "Turkish (Turkey)",\n-        u"flag": u"/++resource++country-flags/tr.gif",\n-    },\n-    u"ur-in": {\n-        u"name": "Urdu (India)",\n-        u"flag": u"/++resource++country-flags/in.gif",\n-    },\n-    u"ur-pk": {\n-        u"name": "Urdu (Pakistan)",\n-        u"flag": u"/++resource++country-flags/pk.gif",\n-    },\n-    u"zh-cn": {\n-        u"name": "Chinese (China)",\n-        u"native": "\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87(\xe4\xb8\xad\xe5\x9b\xbd)",\n-        u"flag": u"/++resource++country-flags/cn.gif",\n-    },\n-    u"zh-hk": {\n-        u"name": "Chinese (Hongkong)",\n-        u"native": "\xe7\xb9\x81\xe9\xab\x94\xe4\xb8\xad\xe6\x96\x87(\xe9\xa6\x99\xe6\xb8\xaf)",\n-        u"flag": u"/++resource++country-flags/hk.gif",\n-    },\n-    u"zh-sg": {\n-        u"name": "Chinese (Singapore)",\n-        u"native": "\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87(\xe6\x96\xb0\xe5\x8a\xa0\xe5\x9d\xa1)",\n-        u"flag": u"/++resource++country-flags/sg.gif",\n-    },\n-    u"zh-tw": {\n-        u"name": "Chinese (Taiwan)",\n-        u"native": "\xe7\xb9\x81\xe9\xab\x94\xe4\xb8\xad\xe6\x96\x87(\xe8\x87\xba\xe7\x81\xa3)",\n-        u"flag": u"/++resource++country-flags/tw.gif",\n+    "hr-hr": {\n+        "name": "Croatian (Croatia)",\n+        "flag": "/++resource++country-flags/hr.gif",\n+    },\n+    "hu-hu": {\n+        "name": "Hungarian (Hungary)",\n+        "flag": "/++resource++country-flags/hu.gif",\n+    },\n+    "hu-si": {\n+        "name": "Hungarian (Slovenia)",\n+        "flag": "/++resource++country-flags/hu.gif",\n+    },\n+    "it-ch": {\n+        "name": "Italian (Switzerland)",\n+        "flag": "/++resource++country-flags/it.gif",\n+    },\n+    "it-hr": {\n+        "name": "Italian (Croatia)",\n+        "flag": "/++resource++country-flags/it.gif",\n+    },\n+    "it-it": {\n+        "name": "Italian (Italy)",\n+        "flag": "/++resource++country-flags/it.gif",\n+    },\n+    "it-si": {\n+        "name": "Italian (Slovenia)",\n+        "flag": "/++resource++country-flags/it.gif",\n+    },\n+    "it-sm": {\n+        "name": "Italian (San Marino)",\n+        "flag": "/++resource++country-flags/sm.gif",\n+    },\n+    "ko-kp": {\n+        "name": "Korean (Korea, North)",\n+        "flag": "/++resource++country-flags/kp.gif",\n+    },\n+    "ko-kr": {\n+        "name": "Korean (Korea, South)",\n+        "flag": "/++resource++country-flags/kr.gif",\n+    },\n+    "ln-cd": {\n+        "name": "Lingala (Democratic Republic of Congo)",\n+        "flag": "/++resource++country-flags/cd.gif",\n+    },\n+    "ln-cg": {\n+        "name": "Lingala (Congo)",\n+        "flag": "/++resource++country-flags/cg.gif",\n+    },\n+    "ms-bn": {\n+        "name": "Malay (Brunei)",\n+        "flag": "/++resource++country-flags/bn.gif",\n+    },\n+    "ms-my": {\n+        "name": "Malay (Malaysia)",\n+        "flag": "/++resource++country-flags/my.gif",\n+    },\n+    "ms-sg": {\n+        "name": "Malay (Singapore)",\n+        "flag": "/++resource++country-flags/sg.gif",\n+    },\n+    "nl-an": {\n+        "name": "Dutch (Netherlands Antilles)",\n+        "flag": "/++resource++country-flags/an.gif",\n+    },\n+    "nl-aw": {\n+        "name": "Dutch (Aruba)",\n+        "flag": "/++resource++country-flags/aw.gif",\n+    },\n+    "nl-be": {\n+        "name": "Dutch (Belgium)",\n+        "flag": "/++resource++country-flags/be.gif",\n+    },\n+    "nl-nl": {\n+        "name": "Dutch (Netherlands)",\n+        "flag": "/++resource++country-flags/nl.gif",\n+    },\n+    "nl-sr": {\n+        "name": "Dutch (Suriname)",\n+        "flag": "/++resource++country-flags/sr.gif",\n+    },\n+    "pt-ao": {\n+        "name": "Portuguese (Angola)",\n+        "native": "Portugu\xc3\xaas (Angola)",\n+        "flag": "/++resource++country-flags/ao.gif",\n+    },\n+    "pt-br": {\n+        "name": "Portuguese (Brazil)",\n+        "native": "Portugu\xc3\xaas (Brasil)",\n+        "flag": "/++resource++country-flags/br.gif",\n+    },\n+    "pt-cv": {\n+        "name": "Portuguese (Ilhas Cabo Verde)",\n+        "native": "Portugu\xc3\xaas (Cabo Verde)",\n+        "flag": "/++resource++country-flags/cv.gif",\n+    },\n+    "pt-gw": {\n+        "name": "Portuguese (Guin\xc3\xa9-Bissau)",\n+        "native": "Portugu\xc3\xaas (Guin\xc3\xa9-Bissau)",\n+        "flag": "/++resource++country-flags/gw.gif",\n+    },\n+    "pt-mz": {\n+        "name": "Portuguese (Mo\xc3\xa7ambique)",\n+        "native": "Portugu\xc3\xaas (Mo\xc3\xa7ambique)",\n+        "flag": "/++resource++country-flags/mz.gif",\n+    },\n+    "pt-pt": {\n+        "name": "Portuguese (Portugal)",\n+        "native": "Portugu\xc3\xaas (Portugal)",\n+        "flag": "/++resource++country-flags/pt.gif",\n+    },\n+    "pt-st": {\n+        "name": "Portuguese (S\xc3\xa3o Tom\xc3\xa9 e Pr\xc3\xadncipe)",\n+        "native": "Portugu\xc3\xaas (S\xc3\xa3o Tom\xc3\xa9 e Pr\xc3\xadncipe)",\n+        "flag": "/++resource++country-flags/st.gif",\n+    },\n+    "sd-in": {\n+        "name": "Sindhi (India)",\n+        "flag": "/++resource++country-flags/in.gif",\n+    },\n+    "sd-pk": {\n+        "name": "Sindhi (Pakistan)",\n+        "flag": "/++resource++country-flags/pk.gif",\n+    },\n+    "sr-ba": {\n+        "name": "Serbian (Bosnia-Herzegovina)",\n+        "flag": "/++resource++country-flags/ba.gif",\n+    },\n+    "ss-sz": {\n+        "name": "Swati (Swaziland)",\n+        "flag": "/++resource++country-flags/sz.gif",\n+    },\n+    "ss-za": {\n+        "name": "Swati (South Africa)",\n+        "flag": "/++resource++country-flags/za.gif",\n+    },\n+    "sv-fi": {\n+        "name": "Swedish (Finland)",\n+        "flag": "/++resource++country-flags/se.gif",\n+    },\n+    "sv-se": {\n+        "name": "Swedish (Sweden)",\n+        "flag": "/++resource++country-flags/se.gif",\n+    },\n+    "sw-ke": {\n+        "name": "Swahili (Kenya)",\n+        "flag": "/++resource++country-flags/ke.gif",\n+    },\n+    "sw-tz": {\n+        "name": "Swahili (Tanzania)",\n+        "flag": "/++resource++country-flags/tz.gif",\n+    },\n+    "ta-in": {\n+        "name": "Tamil (India)",\n+        "flag": "/++resource++country-flags/in.gif",\n+    },\n+    "ta-sg": {\n+        "name": "Tamil (Singapore)",\n+        "flag": "/++resource++country-flags/sg.gif",\n+    },\n+    "tn-bw": {\n+        "name": "Tswana (Botswana)",\n+        "flag": "/++resource++country-flags/bw.gif",\n+    },\n+    "tn-za": {\n+        "name": "Tswana (South Africa)",\n+        "flag": "/++resource++country-flags/za.gif",\n+    },\n+    "tr-bg": {\n+        "name": "Turkish (Bulgaria)",\n+        "flag": "/++resource++country-flags/tr.gif",\n+    },\n+    "tr-cy": {\n+        "name": "Turkish (Cyprus)",\n+        "flag": "/++resource++country-flags/tr.gif",\n+    },\n+    "tr-tr": {\n+        "name": "Turkish (Turkey)",\n+        "flag": "/++resource++country-flags/tr.gif",\n+    },\n+    "ur-in": {\n+        "name": "Urdu (India)",\n+        "flag": "/++resource++country-flags/in.gif",\n+    },\n+    "ur-pk": {\n+        "name": "Urdu (Pakistan)",\n+        "flag": "/++resource++country-flags/pk.gif",\n+    },\n+    "zh-cn": {\n+        "name": "Chinese (China)",\n+        "native": "\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87(\xe4\xb8\xad\xe5\x9b\xbd)",\n+        "flag": "/++resource++country-flags/cn.gif",\n+    },\n+    "zh-hk": {\n+        "name": "Chinese (Hongkong)",\n+        "native": "\xe7\xb9\x81\xe9\xab\x94\xe4\xb8\xad\xe6\x96\x87(\xe9\xa6\x99\xe6\xb8\xaf)",\n+        "flag": "/++resource++country-flags/hk.gif",\n+    },\n+    "zh-sg": {\n+        "name": "Chinese (Singapore)",\n+        "native": "\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87(\xe6\x96\xb0\xe5\x8a\xa0\xe5\x9d\xa1)",\n+        "flag": "/++resource++country-flags/sg.gif",\n+    },\n+    "zh-tw": {\n+        "name": "Chinese (Taiwan)",\n+        "native": "\xe7\xb9\x81\xe9\xab\x94\xe4\xb8\xad\xe6\x96\x87(\xe8\x87\xba\xe7\x81\xa3)",\n+        "flag": "/++resource++country-flags/tw.gif",\n     },\n }\n \n # convert the utf-8 encoded values to unicode\n for code in _combinedlanguagelist:\n     value = _combinedlanguagelist[code]\n-    if u"name" in value:\n-        if six.PY3:\n-            value[u"name"] = value[u"name"]\n-        else:\n-            value[u"name"] = unicode(value[u"name"], "utf-8")\n-    if u"native" in value:\n-        if six.PY3:\n-            value[u"native"] = value[u"native"]\n-        else:\n-            value[u"native"] = unicode(value[u"native"], "utf-8")\n+    if "name" in value:\n+        value["name"] = value["name"]\n+    if "native" in value:\n+        value["native"] = value["native"]\ndiff --git a/plone/i18n/locales/tests/__init__.py b/plone/i18n/locales/tests/__init__.py\nindex ec51c5a..792d600 100644\n--- a/plone/i18n/locales/tests/__init__.py\n+++ b/plone/i18n/locales/tests/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/i18n/locales/tests/base.py b/plone/i18n/locales/tests/base.py\nindex 9163d88..f7a3539 100644\n--- a/plone/i18n/locales/tests/base.py\n+++ b/plone/i18n/locales/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.configuration.xmlconfig import XMLConfig\n \n \ndiff --git a/plone/i18n/locales/tests/test_cctlds.py b/plone/i18n/locales/tests/test_cctlds.py\nindex 5d85b42..0a82b80 100644\n--- a/plone/i18n/locales/tests/test_cctlds.py\n+++ b/plone/i18n/locales/tests/test_cctlds.py\n@@ -1,5 +1,3 @@\n-# -*- coding: UTF-8 -*-\n-\n import unittest\n \n \n@@ -31,7 +29,7 @@ def test_get_available(self):\n         util = self._makeOne()\n         tlds = util.getAvailableTLDs()\n         self.assertTrue(len(tlds) > 200)\n-        self.assertIn(u"nl", tlds)\n+        self.assertIn("nl", tlds)\n \n     def test_get(self):\n         util = self._makeOne()\n@@ -40,5 +38,5 @@ def test_get(self):\n \n     def test_get_languages_for(self):\n         util = self._makeOne()\n-        self.assertEqual(util.getLanguagesForTLD(u"nl"), [u"nl"])\n-        self.assertEqual(util.getLanguagesForTLD(u"be"), [u"nl", u"fr"])\n+        self.assertEqual(util.getLanguagesForTLD("nl"), ["nl"])\n+        self.assertEqual(util.getLanguagesForTLD("be"), ["nl", "fr"])\ndiff --git a/plone/i18n/locales/tests/test_countries.py b/plone/i18n/locales/tests/test_countries.py\nindex 198d8d6..c532137 100644\n--- a/plone/i18n/locales/tests/test_countries.py\n+++ b/plone/i18n/locales/tests/test_countries.py\n@@ -1,5 +1,3 @@\n-# -*- coding: UTF-8 -*-\n-\n import unittest\n \n \n@@ -31,22 +29,22 @@ def test_get_available(self):\n         util = self._makeOne()\n         countrycodes = util.getAvailableCountries()\n         self.assertTrue(len(countrycodes) > 200)\n-        self.assertIn(u"de", countrycodes)\n+        self.assertIn("de", countrycodes)\n \n     def test_get_countries(self):\n         util = self._makeOne()\n         countries = util.getCountries()\n         self.assertTrue(len(countries) > 200)\n-        self.assert_(u"de" in countries)\n-        de = countries[u"de"]\n-        self.assertEqual(de[u"name"], u"Germany")\n-        self.assertEqual(de[u"flag"], u"/++resource++country-flags/de.gif")\n+        self.assert_("de" in countries)\n+        de = countries["de"]\n+        self.assertEqual(de["name"], "Germany")\n+        self.assertEqual(de["flag"], "/++resource++country-flags/de.gif")\n \n     def test_get_country_listing(self):\n         util = self._makeOne()\n         countries = util.getCountryListing()\n         self.assertTrue(len(countries) > 200)\n-        self.assertIn((u"de", u"Germany"), countries)\n+        self.assertIn(("de", "Germany"), countries)\n \n     def test_reservations(self):\n         # our list has historically contained some reservations, which\n@@ -54,5 +52,5 @@ def test_reservations(self):\n         # breaking content based on these\n         from plone.i18n.locales.countries import _countrylist\n \n-        self.assertIn(u"an", _countrylist)\n-        self.assertIn(u"cs", _countrylist)\n+        self.assertIn("an", _countrylist)\n+        self.assertIn("cs", _countrylist)\ndiff --git a/plone/i18n/locales/tests/test_languages.py b/plone/i18n/locales/tests/test_languages.py\nindex e4f2b6c..690ed05 100644\n--- a/plone/i18n/locales/tests/test_languages.py\n+++ b/plone/i18n/locales/tests/test_languages.py\n@@ -1,5 +1,3 @@\n-# -*- coding: UTF-8 -*-\n-\n import unittest\n \n \n@@ -18,11 +16,11 @@ def test_deprecated(self):\n         # want to break existing content based on it\n         from plone.i18n.locales.languages import _languagelist\n \n-        self.assertIn(u"mo", _languagelist)\n-        self.assertIn(u"sh", _languagelist)\n+        self.assertIn("mo", _languagelist)\n+        self.assertIn("sh", _languagelist)\n \n \n-class BaseTestCase(object):\n+class BaseTestCase:\n     def setUp(self):\n         from .base import setUp\n \n@@ -45,41 +43,41 @@ def test_get_available(self):\n         util = self._makeOne()\n         languagecodes = util.getAvailableLanguages()\n         self.assertTrue(len(languagecodes) > 100)\n-        self.assertIn(u"de", languagecodes)\n-        self.assertNotIn(u"pt-br", languagecodes)\n+        self.assertIn("de", languagecodes)\n+        self.assertNotIn("pt-br", languagecodes)\n \n     def test_get_available_combined(self):\n         util = self._makeOne()\n         languagecodes = util.getAvailableLanguages(combined=True)\n         self.assertTrue(len(languagecodes) > 300)\n-        self.assertIn(u"de", languagecodes)\n-        self.assertIn(u"pt-br", languagecodes)\n+        self.assertIn("de", languagecodes)\n+        self.assertIn("pt-br", languagecodes)\n \n     def test_get_languages(self):\n         util = self._makeOne()\n         languages = util.getLanguages()\n         self.assertTrue(len(languages) > 100)\n-        self.assertIn(u"de", languages)\n-        self.assertNotIn(u"pt-br", languages)\n-        de = languages[u"de"]\n-        self.assertEqual(de[u"name"], u"German")\n-        self.assertEqual(de[u"native"], u"Deutsch")\n-        self.assertEqual(de[u"flag"], u"/++resource++country-flags/de.gif")\n+        self.assertIn("de", languages)\n+        self.assertNotIn("pt-br", languages)\n+        de = languages["de"]\n+        self.assertEqual(de["name"], "German")\n+        self.assertEqual(de["native"], "Deutsch")\n+        self.assertEqual(de["flag"], "/++resource++country-flags/de.gif")\n \n     def test_get_languages_combined(self):\n         util = self._makeOne()\n         languages = util.getLanguages(combined=True)\n         self.assertTrue(len(languages) > 300)\n-        self.assertIn(u"de", languages)\n-        self.assertIn(u"pt-br", languages)\n-        self.assertEqual(languages[u"de"][u"name"], u"German")\n-        self.assertEqual(languages[u"pt-br"][u"name"], u"Portuguese (Brazil)")\n+        self.assertIn("de", languages)\n+        self.assertIn("pt-br", languages)\n+        self.assertEqual(languages["de"]["name"], "German")\n+        self.assertEqual(languages["pt-br"]["name"], "Portuguese (Brazil)")\n \n     def test_get_language_listing(self):\n         util = self._makeOne()\n         languages = util.getLanguageListing()\n         self.assertTrue(len(languages) > 100)\n-        self.assertIn((u"de", u"German"), languages)\n+        self.assertIn(("de", "German"), languages)\n \n \n class TestContentLanguageAvailability(BaseTestCase, unittest.TestCase):\ndiff --git a/plone/i18n/negotiate/negotiate.py b/plone/i18n/negotiate/negotiate.py\nindex 93a50eb..1d56fdb 100644\n--- a/plone/i18n/negotiate/negotiate.py\n+++ b/plone/i18n/negotiate/negotiate.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.i18n.interfaces import ILanguageUtility\n from plone.i18n.interfaces import INegotiateLanguage\n from zope.component import getUtility\n@@ -6,7 +5,7 @@\n \n \n @implementer(INegotiateLanguage)\n-class NegotiateLanguage(object):\n+class NegotiateLanguage:\n     """Perform default language negotiation"""\n \n     def __init__(self, site, request):\ndiff --git a/plone/i18n/negotiate/ptsnegotiator.py b/plone/i18n/negotiate/ptsnegotiator.py\nindex 78c4e23..a380d02 100644\n--- a/plone/i18n/negotiate/ptsnegotiator.py\n+++ b/plone/i18n/negotiate/ptsnegotiator.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.i18n.interfaces import IUserPreferredLanguages\n from zope.interface import implementer\n \n@@ -76,7 +75,7 @@ def _false(*a, **kw):\n     pass\n \n \n-class BrowserAccept(object):\n+class BrowserAccept:\n \n     filters = {\n         "content-type": (str_lower,),\n@@ -152,7 +151,7 @@ def getAccepted(self, request, kind="content-type"):\n         return [a[1] for a in accepts]\n \n \n-class CookieAccept(object):\n+class CookieAccept:\n     filters = (str_lower, lang_normalize, str_strip)\n \n     def __init__(self, request):\n@@ -198,7 +197,7 @@ def setCookieLanguage(request, lang, REQUEST=None):\n registerLangPrefsMethod({"klass": BrowserAccept, "priority": 10}, "content-type")\n \n \n-class Negotiator(object):\n+class Negotiator:\n \n     tests = {"content-type": type_accepted, "language": lang_accepted}\n \n@@ -235,7 +234,7 @@ def negotiate(langs, request):\n \n \n @implementer(IUserPreferredLanguages)\n-class PTSLanguages(object):\n+class PTSLanguages:\n     """Languages adapter that chooses languages for the zope.i18n machinery.\n \n     This used to be part of Products.Five.i18n.\ndiff --git a/plone/i18n/normalizer/__init__.py b/plone/i18n/normalizer/__init__.py\nindex 2683114..ca90554 100644\n--- a/plone/i18n/normalizer/__init__.py\n+++ b/plone/i18n/normalizer/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.i18n.normalizer.base import baseNormalize\n from plone.i18n.normalizer.interfaces import IFileNameNormalizer\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n@@ -42,7 +41,7 @@ def cropName(base, maxLength=MAX_LENGTH):\n \n \n @implementer(IIDNormalizer)\n-class IDNormalizer(object):\n+class IDNormalizer:\n     """\n     This normalizer can normalize any unicode string and returns a\n     version that only contains of ASCII characters allowed in a typical\n@@ -89,7 +88,7 @@ def normalize(self, text, locale=None, max_length=MAX_LENGTH):\n \n \n @implementer(IFileNameNormalizer)\n-class FileNameNormalizer(object):\n+class FileNameNormalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters allowed in a file name.\n@@ -150,7 +149,7 @@ def normalize(self, text, locale=None, max_length=MAX_FILENAME_LENGTH):\n \n \n @implementer(IURLNormalizer)\n-class URLNormalizer(object):\n+class URLNormalizer:\n     """\n     This normalizer can normalize any unicode string and returns a URL-safe\n     version that only contains of ASCII characters allowed in a URL.\ndiff --git a/plone/i18n/normalizer/adapters.py b/plone/i18n/normalizer/adapters.py\nindex 14010ce..211881d 100644\n--- a/plone/i18n/normalizer/adapters.py\n+++ b/plone/i18n/normalizer/adapters.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.i18n.normalizer.interfaces import IFileNameNormalizer\n from plone.i18n.normalizer.interfaces import IURLNormalizer\n from plone.i18n.normalizer.interfaces import IUserPreferredFileNameNormalizer\n@@ -9,7 +8,7 @@\n \n \n @implementer(IUserPreferredFileNameNormalizer)\n-class UserPreferredFileNameNormalizer(object):\n+class UserPreferredFileNameNormalizer:\n     """\n     An adapter for the HTTPRequest to provide user preferred language\n     dependent normalization.\n@@ -38,7 +37,7 @@ def normalize(self, text):\n \n \n @implementer(IUserPreferredURLNormalizer)\n-class UserPreferredURLNormalizer(object):\n+class UserPreferredURLNormalizer:\n     """\n     An adapter for the HTTPRequest to provide user preferred language\n     dependent normalization.\ndiff --git a/plone/i18n/normalizer/base.py b/plone/i18n/normalizer/base.py\nindex 25b47fb..210e118 100644\n--- a/plone/i18n/normalizer/base.py\n+++ b/plone/i18n/normalizer/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from unidecode import unidecode\n \n import six\n@@ -16,7 +15,7 @@ def mapUnicode(text, mapping=()):\n     This method is used for replacement of special characters found in a\n     mapping before baseNormalize is applied.\n     """\n-    res = u""\n+    res = ""\n     for ch in text:\n         ordinal = ord(ch)\n         if ordinal in mapping:\n@@ -48,11 +47,11 @@ def baseNormalize(text):\n       >>> baseNormalize(u"\\u5317\\u4EB0")\n       \'Bei Jing\'\n     """\n-    if not isinstance(text, six.string_types):\n+    if not isinstance(text, str):\n         # This most surely ends up in something the user does not expect\n         # to see. But at least it does not break.\n         text = repr(text)\n-    if six.PY2 and not isinstance(text, six.text_type):\n+    if six.PY2 and not isinstance(text, str):\n         text = text.decode("ascii", "replace")\n     text = unidecode(text).strip()\n     return "".join(filter(lambda c: c in allowed, text))\ndiff --git a/plone/i18n/normalizer/bg.py b/plone/i18n/normalizer/bg.py\nindex 66094a0..97bf74c 100644\n--- a/plone/i18n/normalizer/bg.py\n+++ b/plone/i18n/normalizer/bg.py\n@@ -1,5 +1,3 @@\n-# -*- coding: UTF-8 -*-\n-\n from plone.i18n.normalizer.base import mapUnicode\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n@@ -71,7 +69,7 @@\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/normalizer/de.py b/plone/i18n/normalizer/de.py\nindex e7fa57d..7aa0e51 100644\n--- a/plone/i18n/normalizer/de.py\n+++ b/plone/i18n/normalizer/de.py\n@@ -1,5 +1,3 @@\n-# -*- coding: UTF-8 -*-\n-\n from plone.i18n.normalizer.base import mapUnicode\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n@@ -38,7 +36,7 @@\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/normalizer/el.py b/plone/i18n/normalizer/el.py\nindex 6fbe79c..1c23159 100644\n--- a/plone/i18n/normalizer/el.py\n+++ b/plone/i18n/normalizer/el.py\n@@ -1,5 +1,3 @@\n-# -*- coding: UTF-8 -*-\n-\n from plone.i18n.normalizer.base import mapUnicode\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n@@ -80,7 +78,7 @@\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/normalizer/es.py b/plone/i18n/normalizer/es.py\nindex f9eece6..7e2c167 100644\n--- a/plone/i18n/normalizer/es.py\n+++ b/plone/i18n/normalizer/es.py\n@@ -1,5 +1,3 @@\n-# -*- coding: UTF-8 -*-\n-\n from plone.i18n.normalizer.base import mapUnicode\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n@@ -7,36 +5,36 @@\n \n # Spanish character mapping\n mapping = {\n-    192: u"A",\n-    193: u"A",\n-    200: u"E",\n-    201: u"E",\n-    204: u"I",\n-    205: u"I",\n-    210: u"O",\n-    211: u"O",\n-    217: u"U",\n-    218: u"U",\n-    220: u"U",\n-    209: u"N",\n-    199: u"C",\n-    224: u"a",\n-    225: u"a",\n-    232: u"e",\n-    233: u"e",\n-    236: u"i",\n-    237: u"i",\n-    242: u"o",\n-    243: u"o",\n-    249: u"u",\n-    250: u"u",\n-    241: u"n",\n-    231: u"c",\n+    192: "A",\n+    193: "A",\n+    200: "E",\n+    201: "E",\n+    204: "I",\n+    205: "I",\n+    210: "O",\n+    211: "O",\n+    217: "U",\n+    218: "U",\n+    220: "U",\n+    209: "N",\n+    199: "C",\n+    224: "a",\n+    225: "a",\n+    232: "e",\n+    233: "e",\n+    236: "i",\n+    237: "i",\n+    242: "o",\n+    243: "o",\n+    249: "u",\n+    250: "u",\n+    241: "n",\n+    231: "c",\n }\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/normalizer/fr.py b/plone/i18n/normalizer/fr.py\nindex 4804606..775d021 100644\n--- a/plone/i18n/normalizer/fr.py\n+++ b/plone/i18n/normalizer/fr.py\n@@ -1,5 +1,3 @@\n-# -*- coding: UTF-8 -*-\n-\n from plone.i18n.normalizer.base import mapUnicode\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n@@ -10,7 +8,7 @@\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/normalizer/interfaces.py b/plone/i18n/normalizer/interfaces.py\nindex 9c2fc2b..78384ba 100644\n--- a/plone/i18n/normalizer/interfaces.py\n+++ b/plone/i18n/normalizer/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/plone/i18n/normalizer/ja.py b/plone/i18n/normalizer/ja.py\nindex cdef197..20956fe 100644\n--- a/plone/i18n/normalizer/ja.py\n+++ b/plone/i18n/normalizer/ja.py\n@@ -1,4 +1,3 @@\n-# -*- coding: UTF-8 -*-\n from plone.i18n.normalizer.base import allowed\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n@@ -32,14 +31,11 @@ def ja_normalize(text, max_length=MAX_LENGTH):\n         exchanged = text\n     else:\n         exchanged = "".join(_gethashed(text, max_length))\n-    if six.PY2:\n-        return exchanged.encode("ascii")\n-    else:\n-        return exchanged\n+    return exchanged\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/normalizer/pl.py b/plone/i18n/normalizer/pl.py\nindex 797fdc6..6aba3c7 100644\n--- a/plone/i18n/normalizer/pl.py\n+++ b/plone/i18n/normalizer/pl.py\n@@ -1,4 +1,3 @@\n-# -*- coding: UTF-8 -*-\n from plone.i18n.normalizer.base import mapUnicode\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n@@ -9,7 +8,7 @@\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/normalizer/pt.py b/plone/i18n/normalizer/pt.py\nindex 33caa5f..8ae80e1 100644\n--- a/plone/i18n/normalizer/pt.py\n+++ b/plone/i18n/normalizer/pt.py\n@@ -1,4 +1,3 @@\n-# -*- coding: UTF-8 -*-\n from plone.i18n.normalizer.base import mapUnicode\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n@@ -6,37 +5,37 @@\n \n # Portuguese character mapping\n mapping = {\n-    192: u"A",\n-    193: u"A",\n-    194: u"A",\n-    195: u"A",\n-    201: u"E",\n-    202: u"E",\n-    205: u"I",\n-    211: u"O",\n-    212: u"O",\n-    213: u"O",\n-    218: u"U",\n-    220: u"U",\n-    199: u"C",\n-    224: u"a",\n-    225: u"a",\n-    226: u"a",\n-    227: u"a",\n-    233: u"e",\n-    234: u"e",\n-    237: u"i",\n-    243: u"o",\n-    244: u"o",\n-    245: u"o",\n-    250: u"u",\n-    252: u"u",\n-    231: u"c",\n+    192: "A",\n+    193: "A",\n+    194: "A",\n+    195: "A",\n+    201: "E",\n+    202: "E",\n+    205: "I",\n+    211: "O",\n+    212: "O",\n+    213: "O",\n+    218: "U",\n+    220: "U",\n+    199: "C",\n+    224: "a",\n+    225: "a",\n+    226: "a",\n+    227: "a",\n+    233: "e",\n+    234: "e",\n+    237: "i",\n+    243: "o",\n+    244: "o",\n+    245: "o",\n+    250: "u",\n+    252: "u",\n+    231: "c",\n }\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/normalizer/ru.py b/plone/i18n/normalizer/ru.py\nindex d8bfff4..cad6cca 100644\n--- a/plone/i18n/normalizer/ru.py\n+++ b/plone/i18n/normalizer/ru.py\n@@ -1,4 +1,3 @@\n-# -*- coding: UTF-8 -*-\n from plone.i18n.normalizer.base import mapUnicode\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n@@ -76,7 +75,7 @@\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/normalizer/tests/__init__.py b/plone/i18n/normalizer/tests/__init__.py\nindex ec51c5a..792d600 100644\n--- a/plone/i18n/normalizer/tests/__init__.py\n+++ b/plone/i18n/normalizer/tests/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/i18n/normalizer/tests/base.py b/plone/i18n/normalizer/tests/base.py\nindex aaebc04..9b22c60 100644\n--- a/plone/i18n/normalizer/tests/base.py\n+++ b/plone/i18n/normalizer/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.configuration.xmlconfig import XMLConfig\n \n \ndiff --git a/plone/i18n/normalizer/tests/test_adapters.py b/plone/i18n/normalizer/tests/test_adapters.py\nindex 725caaf..4ce19fb 100644\n--- a/plone/i18n/normalizer/tests/test_adapters.py\n+++ b/plone/i18n/normalizer/tests/test_adapters.py\n@@ -1,9 +1,7 @@\n-# -*- coding: utf-8 -*-\n-\n import unittest\n \n \n-class BaseTestCase(object):\n+class BaseTestCase:\n     def setUp(self):\n         from .base import setUp\n \n@@ -32,26 +30,26 @@ def _getTargetClass(self):\n \n     def test_german(self):\n         norm = self._makeOne("de")\n-        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n+        self.assertEqual(norm.normalize("simpleandsafe"), "simpleandsafe")\n \n-        self.assertEqual(norm.normalize(u"text with uml\xc3\xa4ut"), u"text with umlaeut")\n+        self.assertEqual(norm.normalize("text with uml\xc3\xa4ut"), "text with umlaeut")\n \n     def test_german_country(self):\n         norm = self._makeOne("de-DE")\n-        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n+        self.assertEqual(norm.normalize("simpleandsafe"), "simpleandsafe")\n \n-        self.assertEqual(norm.normalize(u"text with uml\xc3\xa4ut"), u"text with umlaeut")\n+        self.assertEqual(norm.normalize("text with uml\xc3\xa4ut"), "text with umlaeut")\n \n     def test_english(self):\n         norm = self._makeOne("en")\n-        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n+        self.assertEqual(norm.normalize("simpleandsafe"), "simpleandsafe")\n \n-        self.assertEqual(norm.normalize(u"text with uml\xc3\xa4ut"), u"text with umlaut")\n+        self.assertEqual(norm.normalize("text with uml\xc3\xa4ut"), "text with umlaut")\n \n     def test_spanish(self):\n         norm = self._makeOne("es")\n-        self.assertEqual(norm.normalize(u"simpleandsafe"), "simpleandsafe")\n-        self.assertEqual(norm.normalize(u"text with e\xc3\xb1e"), u"text with ene")\n+        self.assertEqual(norm.normalize("simpleandsafe"), "simpleandsafe")\n+        self.assertEqual(norm.normalize("text with e\xc3\xb1e"), "text with ene")\n \n \n class TestUrlNormalizer(BaseTestCase, unittest.TestCase):\n@@ -62,24 +60,24 @@ def _getTargetClass(self):\n \n     def test_german(self):\n         norm = self._makeOne("de")\n-        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n+        self.assertEqual(norm.normalize("simpleandsafe"), "simpleandsafe")\n \n-        self.assertEqual(norm.normalize(u"text with uml\xc3\xa4ut"), u"text-with-umlaeut")\n+        self.assertEqual(norm.normalize("text with uml\xc3\xa4ut"), "text-with-umlaeut")\n \n     def test_german_country(self):\n         norm = self._makeOne("de-DE")\n-        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n+        self.assertEqual(norm.normalize("simpleandsafe"), "simpleandsafe")\n \n-        self.assertEqual(norm.normalize(u"text with uml\xc3\xa4ut"), u"text-with-umlaeut")\n+        self.assertEqual(norm.normalize("text with uml\xc3\xa4ut"), "text-with-umlaeut")\n \n     def test_english(self):\n         norm = self._makeOne("en")\n-        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n+        self.assertEqual(norm.normalize("simpleandsafe"), "simpleandsafe")\n \n-        self.assertEqual(norm.normalize(u"text with uml\xc3\xa4ut"), u"text-with-umlaut")\n+        self.assertEqual(norm.normalize("text with uml\xc3\xa4ut"), "text-with-umlaut")\n \n     def test_spanish(self):\n         norm = self._makeOne("es")\n-        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n+        self.assertEqual(norm.normalize("simpleandsafe"), "simpleandsafe")\n \n-        self.assertEqual(norm.normalize(u"text with e\xc3\xb1e"), u"text-with-ene")\n+        self.assertEqual(norm.normalize("text with e\xc3\xb1e"), "text-with-ene")\ndiff --git a/plone/i18n/normalizer/tests/test_normalizer.py b/plone/i18n/normalizer/tests/test_normalizer.py\nindex 360eaf2..cb9f3c9 100644\n--- a/plone/i18n/normalizer/tests/test_normalizer.py\n+++ b/plone/i18n/normalizer/tests/test_normalizer.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from .base import setUp as configurationSetUp\n from .base import tearDown\n from doctest import DocTestSuite\ndiff --git a/plone/i18n/normalizer/tr.py b/plone/i18n/normalizer/tr.py\nindex 9e5e2b0..58e4ca3 100644\n--- a/plone/i18n/normalizer/tr.py\n+++ b/plone/i18n/normalizer/tr.py\n@@ -1,5 +1,3 @@\n-# -*- coding: UTF-8 -*-\n-\n from plone.i18n.normalizer.base import mapUnicode\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n@@ -10,7 +8,7 @@\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/normalizer/uk.py b/plone/i18n/normalizer/uk.py\nindex 80a4790..9f306ea 100644\n--- a/plone/i18n/normalizer/uk.py\n+++ b/plone/i18n/normalizer/uk.py\n@@ -1,4 +1,3 @@\n-# -*- coding: UTF-8 -*-\n from plone.i18n.normalizer.base import mapUnicode\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n@@ -6,77 +5,77 @@\n \n # Ukrainian character mapping (according to BGN/PCGN romanization system)\n mapping = {\n-    0x0410: u"A",\n-    0x0430: u"a",\n-    0x0411: u"B",\n-    0x0431: u"b",\n-    0x0412: u"V",\n-    0x0432: u"v",\n-    0x0413: u"H",\n-    0x0433: u"h",\n-    0x0490: u"G",\n-    0x0491: u"g",\n-    0x0414: u"D",\n-    0x0434: u"d",\n-    0x0415: u"E",\n-    0x0435: u"e",\n-    0x0404: u"YE",\n-    0x0454: u"ye",\n-    0x0416: u"ZH",\n-    0x0436: u"zh",\n-    0x0417: u"Z",\n-    0x0437: u"z",\n-    0x0418: u"Y",\n-    0x0438: u"y",\n-    0x0406: u"I",\n-    0x0456: u"i",\n-    0x0407: u"YI",\n-    0x0457: u"yi",\n-    0x0419: u"Y",\n-    0x0439: u"y",\n-    0x041A: u"K",\n-    0x043A: u"k",\n-    0x041B: u"L",\n-    0x043B: u"l",\n-    0x041C: u"M",\n-    0x043C: u"m",\n-    0x041D: u"N",\n-    0x043D: u"n",\n-    0x041E: u"O",\n-    0x043E: u"o",\n-    0x041F: u"P",\n-    0x043F: u"p",\n-    0x0420: u"R",\n-    0x0440: u"r",\n-    0x0421: u"S",\n-    0x0441: u"s",\n-    0x0422: u"T",\n-    0x0442: u"t",\n-    0x0423: u"U",\n-    0x0443: u"u",\n-    0x0424: u"F",\n-    0x0444: u"f",\n-    0x0425: u"KH",\n-    0x0445: u"kh",\n-    0x0426: u"TS",\n-    0x0446: u"ts",\n-    0x0427: u"CH",\n-    0x0447: u"ch",\n-    0x0428: u"SH",\n-    0x0448: u"sh",\n-    0x0429: u"SHCH",\n-    0x0449: u"shch",\n-    0x042C: u"",\n-    0x044C: u"",\n-    0x042E: u"YU",\n-    0x044E: u"yu",\n-    0x042F: u"YA",\n-    0x044F: u"ya",\n+    0x0410: "A",\n+    0x0430: "a",\n+    0x0411: "B",\n+    0x0431: "b",\n+    0x0412: "V",\n+    0x0432: "v",\n+    0x0413: "H",\n+    0x0433: "h",\n+    0x0490: "G",\n+    0x0491: "g",\n+    0x0414: "D",\n+    0x0434: "d",\n+    0x0415: "E",\n+    0x0435: "e",\n+    0x0404: "YE",\n+    0x0454: "ye",\n+    0x0416: "ZH",\n+    0x0436: "zh",\n+    0x0417: "Z",\n+    0x0437: "z",\n+    0x0418: "Y",\n+    0x0438: "y",\n+    0x0406: "I",\n+    0x0456: "i",\n+    0x0407: "YI",\n+    0x0457: "yi",\n+    0x0419: "Y",\n+    0x0439: "y",\n+    0x041A: "K",\n+    0x043A: "k",\n+    0x041B: "L",\n+    0x043B: "l",\n+    0x041C: "M",\n+    0x043C: "m",\n+    0x041D: "N",\n+    0x043D: "n",\n+    0x041E: "O",\n+    0x043E: "o",\n+    0x041F: "P",\n+    0x043F: "p",\n+    0x0420: "R",\n+    0x0440: "r",\n+    0x0421: "S",\n+    0x0441: "s",\n+    0x0422: "T",\n+    0x0442: "t",\n+    0x0423: "U",\n+    0x0443: "u",\n+    0x0424: "F",\n+    0x0444: "f",\n+    0x0425: "KH",\n+    0x0445: "kh",\n+    0x0426: "TS",\n+    0x0446: "ts",\n+    0x0427: "CH",\n+    0x0447: "ch",\n+    0x0428: "SH",\n+    0x0448: "sh",\n+    0x0429: "SHCH",\n+    0x0449: "shch",\n+    0x042C: "",\n+    0x044C: "",\n+    0x042E: "YU",\n+    0x044E: "yu",\n+    0x042F: "YA",\n+    0x044F: "ya",\n }\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/tests/__init__.py b/plone/i18n/tests/__init__.py\nindex ec51c5a..792d600 100644\n--- a/plone/i18n/tests/__init__.py\n+++ b/plone/i18n/tests/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/i18n/tests/base.py b/plone/i18n/tests/base.py\nindex 820e795..241ce11 100644\n--- a/plone/i18n/tests/base.py\n+++ b/plone/i18n/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app import testing\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import bbb\ndiff --git a/plone/i18n/tests/test_languageutility.py b/plone/i18n/tests/test_languageutility.py\nindex 3a5e585..119b3ae 100644\n--- a/plone/i18n/tests/test_languageutility.py\n+++ b/plone/i18n/tests/test_languageutility.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.i18n.interfaces import ILanguageSchema\ndiff --git a/plone/i18n/tests/test_negotiation.py b/plone/i18n/tests/test_negotiation.py\nindex a145c24..ca88212 100644\n--- a/plone/i18n/tests/test_negotiation.py\n+++ b/plone/i18n/tests/test_negotiation.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n@@ -13,7 +12,7 @@\n \n class LanguageNegotiationTestCase(base.FunctionalTestCase):\n     def afterSetUp(self):\n-        self.basic_auth = "%s:%s" % (TEST_USER_NAME, TEST_USER_PASSWORD)\n+        self.basic_auth = f"{TEST_USER_NAME}:{TEST_USER_PASSWORD}"\n         self.portal_path = self.portal.absolute_url(1)\n         self.tool = getToolByName(self.portal, "portal_languages")\n         self.settings = getUtility(IRegistry).forInterface(\n@@ -145,7 +144,7 @@ def testContentObjectVHMPortal(self):\n         adding = self.app.manage_addProduct["SiteAccess"]\n         adding.manage_addVirtualHostMonster("VHM")\n         vhmBasePath = (\n-            "/VirtualHostBase/http/example.org:80/{0}/"\n+            "/VirtualHostBase/http/example.org:80/{}/"\n             "VirtualHostRoot/".format(self.portal.getId())\n         )\n         self.layer["portal"].invokeFactory("Folder", "sub")\n@@ -163,7 +162,7 @@ def testContentObjectVHMPortalVHSubpath(self):\n         adding = self.app.manage_addProduct["SiteAccess"]\n         adding.manage_addVirtualHostMonster("VHM")\n         vhmBasePath = (\n-            "/VirtualHostBase/http/example.org:80/{0}/VirtualHostRoot/"\n+            "/VirtualHostBase/http/example.org:80/{}/VirtualHostRoot/"\n             "_vh_one/_vh_two/".format(self.portal.getId())\n         )\n \n@@ -183,7 +182,7 @@ def testContentObjectVHMFolder(self):\n         adding.manage_addVirtualHostMonster("VHM")\n \n         folder_path = "/".join(self.layer["portal"].getPhysicalPath())\n-        vhmBasePath = "/VirtualHostBase/http/example.org:80{0}/VirtualHostRoot/".format(\n+        vhmBasePath = "/VirtualHostBase/http/example.org:80{}/VirtualHostRoot/".format(\n             folder_path\n         )\n         self.layer["portal"].invokeFactory("Folder", "sub")\ndiff --git a/plone/i18n/utility.py b/plone/i18n/utility.py\nindex 7c023d9..d852041 100644\n--- a/plone/i18n/utility.py\n+++ b/plone/i18n/utility.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl import getSecurityManager\n from operator import itemgetter\n@@ -21,7 +20,7 @@\n from zope.interface import implementer\n \n \n-class LanguageBinding(object):\n+class LanguageBinding:\n     """Helper which holding language infos in request."""\n \n     security = ClassSecurityInfo()\n@@ -72,7 +71,7 @@ def onRequest(object, event):\n \n \n @implementer(ILanguageUtility)\n-class LanguageUtility(object):\n+class LanguageUtility:\n \n     # resources that must not use language specific URLs\n     exclude_paths = frozenset(\n@@ -109,7 +108,7 @@ def listSupportedLanguages(self):\n         available = self.getAvailableLanguages()\n         for i in self.supported_langs:\n             if available.get(i):\n-                r.append((i, available[i][u"name"]))\n+                r.append((i, available[i]["name"]))\n         return r\n \n     def getAvailableLanguages(self):\n@@ -140,13 +139,13 @@ def listAvailableLanguageInformation(self):\n         new_langs = []\n         for lang in langs:\n             # add language-code to dict\n-            langs[lang][u"code"] = lang\n+            langs[lang]["code"] = lang\n             # flatten outer dict to list to make it sortable\n             new_langs.append(langs[lang])\n         new_langs.sort(\n             lambda x, y: cmp(\n-                x.get(u"native", x.get(u"name")),\n-                y.get(u"native", y.get(u"name")),\n+                x.get("native", x.get("name")),\n+                y.get("native", y.get("name")),\n             )\n         )\n         return new_langs\n@@ -186,14 +185,14 @@ def getNameForLanguageCode(self, langCode):\n         """Returns the name for a language code."""\n         info = self.getAvailableLanguageInformation().get(langCode, None)\n         if info is not None:\n-            return info.get(u"name", None)\n+            return info.get("name", None)\n         return None\n \n     def getFlagForLanguageCode(self, langCode):\n         """Returns the name of the flag for a language code."""\n         info = self.getAvailableLanguageInformation().get(langCode, None)\n         if info is not None:\n-            return info.get(u"flag", None)\n+            return info.get("flag", None)\n         return None\n \n     def addSupportedLanguage(self, langCode):\n@@ -434,7 +433,7 @@ def showSelector(self):\n         )\n \n \n-class PrefsForPTS(object):\n+class PrefsForPTS:\n     """A preference to hook into PTS."""\n \n     def __init__(self, context):\n'

Repository: plone.i18n


Branch: refs/heads/master
Date: 2021-08-13T17:37:03+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.i18n/commit/3290adac47e591a9166360ab3b44f2b24b920c41

get rid of six

Files changed:
M plone/i18n/locales/countries.py
M plone/i18n/locales/languages.py
M plone/i18n/locales/tests/test_countries.py
M plone/i18n/locales/tests/test_languages.py
M plone/i18n/normalizer/base.py
M plone/i18n/normalizer/ja.py
M plone/i18n/normalizer/tests/test_adapters.py
M plone/i18n/normalizer/tests/test_normalizer.py
M setup.py

b'diff --git a/plone/i18n/locales/countries.py b/plone/i18n/locales/countries.py\nindex b7f74c0..c1bf859 100644\n--- a/plone/i18n/locales/countries.py\n+++ b/plone/i18n/locales/countries.py\n@@ -1,8 +1,6 @@\n from plone.i18n.locales.interfaces import ICountryAvailability\n from zope.interface import implementer\n \n-import six\n-\n \n @implementer(ICountryAvailability)\n class CountryAvailability:\ndiff --git a/plone/i18n/locales/languages.py b/plone/i18n/locales/languages.py\nindex b312494..ea0b7ec 100644\n--- a/plone/i18n/locales/languages.py\n+++ b/plone/i18n/locales/languages.py\n@@ -3,8 +3,6 @@\n from plone.i18n.locales.interfaces import IMetadataLanguageAvailability\n from zope.interface import implementer\n \n-import six\n-\n \n @implementer(ILanguageAvailability)\n class LanguageAvailability:\ndiff --git a/plone/i18n/locales/tests/test_countries.py b/plone/i18n/locales/tests/test_countries.py\nindex c532137..37b046f 100644\n--- a/plone/i18n/locales/tests/test_countries.py\n+++ b/plone/i18n/locales/tests/test_countries.py\n@@ -35,7 +35,7 @@ def test_get_countries(self):\n         util = self._makeOne()\n         countries = util.getCountries()\n         self.assertTrue(len(countries) > 200)\n-        self.assert_("de" in countries)\n+        self.assertIn("de", countries)\n         de = countries["de"]\n         self.assertEqual(de["name"], "Germany")\n         self.assertEqual(de["flag"], "/++resource++country-flags/de.gif")\ndiff --git a/plone/i18n/locales/tests/test_languages.py b/plone/i18n/locales/tests/test_languages.py\nindex 690ed05..cadf9e5 100644\n--- a/plone/i18n/locales/tests/test_languages.py\n+++ b/plone/i18n/locales/tests/test_languages.py\n@@ -7,7 +7,7 @@ def test_interface(self):\n         from plone.i18n.locales.languages import LanguageAvailability\n         from zope.interface.verify import verifyClass\n \n-        self.assert_(verifyClass(ILanguageAvailability, LanguageAvailability))\n+        self.assertTrue(verifyClass(ILanguageAvailability, LanguageAvailability))\n \n \n class TestDeprecatedLanguages(unittest.TestCase):\ndiff --git a/plone/i18n/normalizer/base.py b/plone/i18n/normalizer/base.py\nindex 210e118..8216f27 100644\n--- a/plone/i18n/normalizer/base.py\n+++ b/plone/i18n/normalizer/base.py\n@@ -1,6 +1,5 @@\n from unidecode import unidecode\n \n-import six\n import string\n \n \n@@ -51,7 +50,5 @@ def baseNormalize(text):\n         # This most surely ends up in something the user does not expect\n         # to see. But at least it does not break.\n         text = repr(text)\n-    if six.PY2 and not isinstance(text, str):\n-        text = text.decode("ascii", "replace")\n     text = unidecode(text).strip()\n     return "".join(filter(lambda c: c in allowed, text))\ndiff --git a/plone/i18n/normalizer/ja.py b/plone/i18n/normalizer/ja.py\nindex 20956fe..6242e17 100644\n--- a/plone/i18n/normalizer/ja.py\n+++ b/plone/i18n/normalizer/ja.py\n@@ -2,8 +2,6 @@\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n \n-import six\n-\n \n MAX_LENGTH = 6\n \ndiff --git a/plone/i18n/normalizer/tests/test_adapters.py b/plone/i18n/normalizer/tests/test_adapters.py\nindex 4ce19fb..b5c339b 100644\n--- a/plone/i18n/normalizer/tests/test_adapters.py\n+++ b/plone/i18n/normalizer/tests/test_adapters.py\n@@ -43,7 +43,6 @@ def test_german_country(self):\n     def test_english(self):\n         norm = self._makeOne("en")\n         self.assertEqual(norm.normalize("simpleandsafe"), "simpleandsafe")\n-\n         self.assertEqual(norm.normalize("text with uml\xc3\xa4ut"), "text with umlaut")\n \n     def test_spanish(self):\ndiff --git a/plone/i18n/normalizer/tests/test_normalizer.py b/plone/i18n/normalizer/tests/test_normalizer.py\nindex cb9f3c9..802a1c9 100644\n--- a/plone/i18n/normalizer/tests/test_normalizer.py\n+++ b/plone/i18n/normalizer/tests/test_normalizer.py\n@@ -7,26 +7,19 @@\n from zope.component import queryUtility\n \n import doctest\n-import six\n import unittest\n \n \n-def utf8unicode(value):\n-    if six.PY2:\n-        return unicode(value, "utf-8")\n-    return value\n-\n-\n def testIDNormalizer():\n     """\n     >>> util = queryUtility(IIDNormalizer)\n     >>> util\n     <plone.i18n.normalizer.IDNormalizer object at ...>\n \n-    >>> util.normalize(u\'simpleandsafe\')\n+    >>> util.normalize(\'simpleandsafe\')\n     \'simpleandsafe\'\n \n-    >>> util.normalize(u\' Whitespace and capital Letters  \')\n+    >>> util.normalize(\' Whitespace and capital Letters  \')\n     \'whitespace-and-capital-letters\'\n \n     >>> util.normalize(u">here\'s another!")\n@@ -35,7 +28,7 @@ def testIDNormalizer():\n     >>> util.normalize(u">>>here\'!--s yet another!!!")\n     \'here-s-yet-another\'\n \n-    >>> util.normalize(utf8unicode("uml\xc3\xa4ut.doc"))\n+    >>> util.normalize("uml\xc3\xa4ut.doc")\n     \'umlaut-doc\'\n \n     >>> from plone.i18n.normalizer import MAX_LENGTH\n@@ -83,22 +76,22 @@ def testLocaleAwareIDNormalizer():\n       >>> sm = getSiteManager()\n       >>> sm.registerUtility(de_util, IIDNormalizer, name=\'de\')\n \n-      >>> util.normalize(u\'simpleandsafe\', locale=\'de\')\n+      >>> util.normalize(\'simpleandsafe\', locale=\'de\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de\')\n+      >>> util.normalize(\'text with uml\xc3\xa4ut\', locale=\'de\')\n       \'text-with-umlaeut\'\n \n     Make sure we get the de normalizer as there\'s no special one for de-DE\n     registered.\n \n-      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de-DE\')\n+      >>> util.normalize(\'text with uml\xc3\xa4ut\', locale=\'de-DE\')\n       \'text-with-umlaeut\'\n \n-      >>> util.normalize(u\'simpleandsafe\', locale=\'pt-BR\')\n+      >>> util.normalize(\'simpleandsafe\', locale=\'pt-BR\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(u\'simpleandsafe\', locale=\'sr@Latn\')\n+      >>> util.normalize(\'simpleandsafe\', locale=\'sr@Latn\')\n       \'simpleandsafe\'\n \n       >>> util.normalize(u"short-hello-version", locale=\'de-DE\', max_length=10)\n@@ -110,7 +103,7 @@ def testLocaleAwareIDNormalizer():\n     Make sure we also handle POSIX-format locale identifiers,\n     for backwards-compatibility with an earlier version of plone.i18n.\n \n-      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de_DE\')\n+      >>> util.normalize(\'text with uml\xc3\xa4ut\', locale=\'de_DE\')\n       \'text-with-umlaeut\'\n \n     """\n@@ -122,10 +115,10 @@ def testFileNameNormalizer():\n     >>> util\n     <plone.i18n.normalizer.FileNameNormalizer object at ...>\n \n-    >>> util.normalize(u\'simpleandsafe\')\n+    >>> util.normalize(\'simpleandsafe\')\n     \'simpleandsafe\'\n \n-    >>> util.normalize(u\' Whitespace and capital Letters  \')\n+    >>> util.normalize(\' Whitespace and capital Letters  \')\n     \'Whitespace and capital Letters\'\n \n     >>> util.normalize(u">here\'s another!")\n@@ -140,10 +133,10 @@ def testFileNameNormalizer():\n     >>> util.normalize("pseudo_filename,pot,#1.doc")\n     \'pseudo_filename-pot-#1.doc\'\n \n-    >>> util.normalize(utf8unicode("uml\xc3\xa4ut.doc"))\n+    >>> util.normalize("uml\xc3\xa4ut.doc")\n     \'umlaut.doc\'\n \n-    >>> len(util.normalize(u\'aa\' * 2000))\n+    >>> len(util.normalize(\'aa\' * 2000))\n     1023\n \n     >>> util.normalize(u"rest `n` peace")\n@@ -166,22 +159,22 @@ def testLocaleAwareFileNameNormalizer():\n       >>> util\n       <plone.i18n.normalizer.FileNameNormalizer object at ...>\n \n-      >>> util.normalize(u\'simpleandsafe\', locale=\'de\')\n+      >>> util.normalize(\'simpleandsafe\', locale=\'de\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de\')\n+      >>> util.normalize(\'text with uml\xc3\xa4ut\', locale=\'de\')\n       \'text with umlaeut\'\n \n     Make sure we get the de normalizer as there\'s no special one for de-DE\n     registered.\n \n-      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de-DE\')\n+      >>> util.normalize(\'text with uml\xc3\xa4ut\', locale=\'de-DE\')\n       \'text with umlaeut\'\n \n-      >>> util.normalize(u\'simpleandsafe\', locale=\'pt-BR\')\n+      >>> util.normalize(\'simpleandsafe\', locale=\'pt-BR\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(u\'simpleandsafe\', locale=\'sr@Latn\')\n+      >>> util.normalize(\'simpleandsafe\', locale=\'sr@Latn\')\n       \'simpleandsafe\'\n \n       >>> util.normalize(u"short-hello-version", locale=\'de-DE\', max_length=10)\n@@ -193,7 +186,7 @@ def testLocaleAwareFileNameNormalizer():\n     Make sure we also handle POSIX-format locale identifiers,\n     for backwards-compatibility with an earlier version of plone.i18n.\n \n-      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de_DE\')\n+      >>> util.normalize(\'text with uml\xc3\xa4ut\', locale=\'de_DE\')\n       \'text with umlaeut\'\n \n     """\n@@ -205,10 +198,10 @@ def testURLNormalizer():\n     >>> util\n     <plone.i18n.normalizer.URLNormalizer object at ...>\n \n-    >>> util.normalize(u\'simpleandsafe\')\n+    >>> util.normalize(\'simpleandsafe\')\n     \'simpleandsafe\'\n \n-    >>> util.normalize(u\' Whitespace and capital Letters  \')\n+    >>> util.normalize(\' Whitespace and capital Letters  \')\n     \'whitespace-and-capital-letters\'\n \n     >>> util.normalize(u">here\'s another!")\n@@ -220,7 +213,7 @@ def testURLNormalizer():\n     >>> util.normalize(u"Doe, Joe")\n     \'doe-joe\'\n \n-    >>> util.normalize(utf8unicode("uml\xc3\xa4ut.doc"))\n+    >>> util.normalize("uml\xc3\xa4ut.doc")\n     \'umlaut.doc\'\n \n     >>> util.normalize(\'quote "this"!\')\n@@ -238,7 +231,7 @@ def testURLNormalizer():\n     >>> util.normalize(u"rest `n` peace")\n     \'rest-n-peace\'\n \n-    >>> len(util.normalize(u\'aa\' * 2000))\n+    >>> len(util.normalize(\'aa\' * 2000))\n     255\n \n     >>> util.normalize(u"short-hello-version", max_length=10)\n@@ -246,7 +239,7 @@ def testURLNormalizer():\n \n     Leading underscores are forbidden by zope, so this\n     normalizer should strip it\n-    >>> util.normalize(u\'_awesome.txt\')\n+    >>> util.normalize(\'_awesome.txt\')\n     \'awesome.txt\'\n     """\n \n@@ -257,22 +250,22 @@ def testLocaleAwareURLNormalizer():\n       >>> util\n       <plone.i18n.normalizer.URLNormalizer object at ...>\n \n-      >>> util.normalize(u\'simpleandsafe\', locale=\'de\')\n+      >>> util.normalize(\'simpleandsafe\', locale=\'de\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de\')\n+      >>> util.normalize(\'text with uml\xc3\xa4ut\', locale=\'de\')\n       \'text-with-umlaeut\'\n \n     Make sure we get the de normalizer as there\'s no special one for de-DE\n     registered.\n \n-      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de-DE\')\n+      >>> util.normalize(\'text with uml\xc3\xa4ut\', locale=\'de-DE\')\n       \'text-with-umlaeut\'\n \n-      >>> util.normalize(u\'simpleandsafe\', locale=\'pt-BR\')\n+      >>> util.normalize(\'simpleandsafe\', locale=\'pt-BR\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(u\'simpleandsafe\', locale=\'sr@Latn\')\n+      >>> util.normalize(\'simpleandsafe\', locale=\'sr@Latn\')\n       \'simpleandsafe\'\n \n       >>> util.normalize(u"short-hello-version", locale=\'de-DE\', max_length=10)\n@@ -281,7 +274,7 @@ def testLocaleAwareURLNormalizer():\n     Make sure we also handle POSIX-format locale identifiers,\n     for backwards-compatibility with an earlier version of plone.i18n.\n \n-      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de_DE\')\n+      >>> util.normalize(\'text with uml\xc3\xa4ut\', locale=\'de_DE\')\n       \'text-with-umlaeut\'\n \n     """\ndiff --git a/setup.py b/setup.py\nindex 52f6ad5..8f5c026 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -37,7 +37,6 @@\n         "Products.CMFCore",\n         "plone.supermodel",\n         "setuptools",\n-        "six",\n         "Unidecode>=1.0.22",\n         "ZODB",\n         "zope.component",\n'

Repository: plone.i18n


Branch: refs/heads/master
Date: 2021-08-13T18:45:31+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.i18n/commit/8525014cbbeff0f1430487bfba66e38ea987b8c0

fix typo and make it a feature

Files changed:
A news/31.feature
D news/31.bugfix

b'diff --git a/news/31.bugfix b/news/31.feature\nsimilarity index 50%\nrename from news/31.bugfix\nrename to news/31.feature\nindex c2a8a33..1a19a26 100644\n--- a/news/31.bugfix\n+++ b/news/31.feature\n@@ -1,4 +1,4 @@\n-Make it work with newwest Unidecode 1.0.22. Use its method instaed of duplicating it in here.\n+Make it work with newwest Unidecode 1.2.0. \n+Use its method instead of duplicating it in here.\n Also support newer unicode chars, like with `Bei Jing` in the example.\n [gogobd, jensens, alert]\n-\n'

Repository: plone.i18n


Branch: refs/heads/master
Date: 2021-08-13T18:50:14+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.i18n/commit/a08ccda62fe8a481fecabcd5852e78cdd103b0d9

Merge pull request #31 from plone/cleanup-and-upgrade-unidecode-3

Update to unidecode 1.2.0 and use its features

Files changed:
A news/31.breaking
A news/31.feature
M plone/__init__.py
M plone/i18n/__init__.py
M plone/i18n/interfaces.py
M plone/i18n/locales/cctld.py
M plone/i18n/locales/countries.py
M plone/i18n/locales/interfaces.py
M plone/i18n/locales/languages.py
M plone/i18n/locales/tests/__init__.py
M plone/i18n/locales/tests/base.py
M plone/i18n/locales/tests/test_cctlds.py
M plone/i18n/locales/tests/test_countries.py
M plone/i18n/locales/tests/test_languages.py
M plone/i18n/negotiate/negotiate.py
M plone/i18n/negotiate/ptsnegotiator.py
M plone/i18n/normalizer/__init__.py
M plone/i18n/normalizer/adapters.py
M plone/i18n/normalizer/base.py
M plone/i18n/normalizer/bg.py
M plone/i18n/normalizer/de.py
M plone/i18n/normalizer/el.py
M plone/i18n/normalizer/es.py
M plone/i18n/normalizer/fr.py
M plone/i18n/normalizer/interfaces.py
M plone/i18n/normalizer/ja.py
M plone/i18n/normalizer/pl.py
M plone/i18n/normalizer/pt.py
M plone/i18n/normalizer/ru.py
M plone/i18n/normalizer/tests/__init__.py
M plone/i18n/normalizer/tests/base.py
M plone/i18n/normalizer/tests/test_adapters.py
M plone/i18n/normalizer/tests/test_normalizer.py
M plone/i18n/normalizer/tr.py
M plone/i18n/normalizer/uk.py
M plone/i18n/tests/__init__.py
M plone/i18n/tests/base.py
M plone/i18n/tests/test_languageutility.py
M plone/i18n/tests/test_negotiation.py
M plone/i18n/utility.py
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/news/31.breaking b/news/31.breaking\nnew file mode 100644\nindex 0000000..4455503\n--- /dev/null\n+++ b/news/31.breaking\n@@ -0,0 +1 @@\n+Drop support of Python 2 [jensens]\ndiff --git a/news/31.feature b/news/31.feature\nnew file mode 100644\nindex 0000000..1a19a26\n--- /dev/null\n+++ b/news/31.feature\n@@ -0,0 +1,4 @@\n+Make it work with newwest Unidecode 1.2.0. \n+Use its method instead of duplicating it in here.\n+Also support newer unicode chars, like with `Bei Jing` in the example.\n+[gogobd, jensens, alert]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/i18n/__init__.py b/plone/i18n/__init__.py\nindex 7d57550..560980d 100644\n--- a/plone/i18n/__init__.py\n+++ b/plone/i18n/__init__.py\n@@ -1,6 +1,5 @@\n-# -*- coding: utf-8 -*-\n from plone.i18n.interfaces import ILanguageUtility\n from Products.CMFCore.utils import registerToolInterface\n \n \n-registerToolInterface(\'portal_languages\', ILanguageUtility)\n+registerToolInterface("portal_languages", ILanguageUtility)\ndiff --git a/plone/i18n/interfaces.py b/plone/i18n/interfaces.py\nindex e3d6d77..2831c55 100644\n--- a/plone/i18n/interfaces.py\n+++ b/plone/i18n/interfaces.py\n@@ -1,155 +1,159 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import Attribute\n-from zope.interface import Interface\n-from zope import schema\n from plone.supermodel import model\n+from zope import schema\n+\n # Definition of Import PloneMessageFactory to create messages in the plone\n # domain. We do a fresh re-definition here as to break the dependency on\n # `Products.CMFPlone.PloneMessageFactory`.\n from zope.i18nmessageid import MessageFactory\n-_ = PloneMessageFactory = MessageFactory(\'plone\')\n+from zope.interface import Attribute\n+from zope.interface import Interface\n+\n+\n+_ = PloneMessageFactory = MessageFactory("plone")\n \n \n class ILanguageUtility(Interface):\n-    """Marker interface for the portal_languages tool.\n-    """\n+    """Marker interface for the portal_languages tool."""\n \n \n class INegotiateLanguage(Interface):\n-    """Result of language negotiation\n-    """\n+    """Result of language negotiation"""\n \n-    language = Attribute(\'Language to use\')\n-    default_language = Attribute(\'Default language\')\n-    language_list = Attribute(\'List of language preferences in order\')\n+    language = Attribute("Language to use")\n+    default_language = Attribute("Default language")\n+    language_list = Attribute("List of language preferences in order")\n \n \n class ILanguageSchema(Interface):\n     model.fieldset(\n-        \'general\',\n-        label=_(u\'General\'),\n+        "general",\n+        label=_("General"),\n         fields=[\n-            \'default_language\',\n-            \'available_languages\',\n-            \'use_combined_language_codes\',\n-            \'display_flags\',\n-            \'always_show_selector\'\n+            "default_language",\n+            "available_languages",\n+            "use_combined_language_codes",\n+            "display_flags",\n+            "always_show_selector",\n         ],\n     )\n \n     default_language = schema.Choice(\n-        title=_(u\'heading_site_language\', default=u\'Site language\'),\n+        title=_("heading_site_language", default="Site language"),\n         description=_(\n-            u\'description_site_language\',\n-            default=u\'The language used for the content and the UI of \'\n-                    u\'this site.\'\n+            "description_site_language",\n+            default="The language used for the content and the UI of " "this site.",\n         ),\n-        default=\'en\',\n+        default="en",\n         required=True,\n-        vocabulary=\'plone.app.vocabularies.AvailableContentLanguages\'\n+        vocabulary="plone.app.vocabularies.AvailableContentLanguages",\n     )\n \n     available_languages = schema.List(\n-        title=_(u\'heading_available_languages\',\n-                default=u\'Available languages\'),\n-        description=_(u\'description_available_languages\',\n-                      default=u\'The languages in which the site should be \'\n-                              u\'translatable.\'),\n+        title=_("heading_available_languages", default="Available languages"),\n+        description=_(\n+            "description_available_languages",\n+            default="The languages in which the site should be " "translatable.",\n+        ),\n         required=True,\n-        default=[\'en\'],\n+        default=["en"],\n         missing_value=[],\n         value_type=schema.Choice(\n-            vocabulary=\'plone.app.vocabularies.AvailableContentLanguages\'\n-        )\n+            vocabulary="plone.app.vocabularies.AvailableContentLanguages"\n+        ),\n     )\n \n     use_combined_language_codes = schema.Bool(\n         title=_(\n-            u\'label_allow_combined_language_codes\',\n-            default=u\'Show country-specific language variants\'\n+            "label_allow_combined_language_codes",\n+            default="Show country-specific language variants",\n         ),\n         description=_(\n-            u\'help_allow_combined_language_codes\',\n-            default=u\'Examples: pt-br (Brazilian Portuguese), \'\n-                    u\'en-us (American English) etc.\'\n+            "help_allow_combined_language_codes",\n+            default="Examples: pt-br (Brazilian Portuguese), "\n+            "en-us (American English) etc.",\n         ),\n         default=True,\n-        required=False\n+        required=False,\n     )\n \n     display_flags = schema.Bool(\n-        title=_(\n-            u\'label_display_flags\',\n-            default=u\'Show language flags\'\n-        ),\n-        description=u\'\',\n+        title=_("label_display_flags", default="Show language flags"),\n+        description="",\n         default=False,\n-        required=False\n+        required=False,\n     )\n \n     always_show_selector = schema.Bool(\n         title=_(\n-            u\'label_always_show_selector\',\n-            default=u\'Always show language selector\'\n+            "label_always_show_selector",\n+            default="Always show language selector",\n         ),\n-        description=u\'\',\n+        description="",\n         default=False,\n-        required=False\n+        required=False,\n     )\n \n     model.fieldset(\n-        \'negotiation_scheme\',\n-        label=_(u\'Negotiation scheme\', default=u\'Negotiation scheme\'),\n+        "negotiation_scheme",\n+        label=_("Negotiation scheme", default="Negotiation scheme"),\n         fields=[\n-            \'use_content_negotiation\',\n-            \'use_path_negotiation\',\n-            \'use_cookie_negotiation\',\n-            \'authenticated_users_only\',\n-            \'set_cookie_always\',\n-            \'use_subdomain_negotiation\',\n-            \'use_cctld_negotiation\',\n-            \'use_request_negotiation\',\n+            "use_content_negotiation",\n+            "use_path_negotiation",\n+            "use_cookie_negotiation",\n+            "authenticated_users_only",\n+            "set_cookie_always",\n+            "use_subdomain_negotiation",\n+            "use_cctld_negotiation",\n+            "use_request_negotiation",\n         ],\n     )\n     use_content_negotiation = schema.Bool(\n-        title=_(u\'heading_language_of_the_content\',\n-                default=u\'Use the language of the content item\'),\n-        description=_(u\'description_language_of_the_content\',\n-                      default=u\'Use the language of the content item.\'),\n+        title=_(\n+            "heading_language_of_the_content",\n+            default="Use the language of the content item",\n+        ),\n+        description=_(\n+            "description_language_of_the_content",\n+            default="Use the language of the content item.",\n+        ),\n         default=False,\n         required=False,\n     )\n \n     use_path_negotiation = schema.Bool(\n         title=_(\n-            u\'heading_language_codes_in_URL\',\n-            default=u\'Use language codes in URL path for manual override\'),\n+            "heading_language_codes_in_URL",\n+            default="Use language codes in URL path for manual override",\n+        ),\n         description=_(\n-            u\'description_language_codes_in_URL\',\n-            default=u\'Use language codes in URL path for manual override.\'),\n+            "description_language_codes_in_URL",\n+            default="Use language codes in URL path for manual override.",\n+        ),\n         default=False,\n         required=False,\n     )\n \n     use_cookie_negotiation = schema.Bool(\n-        title=_(u\'heading_cookie_manual_override\',\n-                default=(u\'Use cookie for manual override\')),\n+        title=_(\n+            "heading_cookie_manual_override",\n+            default=("Use cookie for manual override"),\n+        ),\n         description=_(\n-            u\'description_cookie_manual_override\',\n-            default=(\n-                u\'Required for the language selector viewlet to be rendered.\'\n-            )\n+            "description_cookie_manual_override",\n+            default=("Required for the language selector viewlet to be rendered."),\n         ),\n         default=False,\n         required=False,\n     )\n \n     authenticated_users_only = schema.Bool(\n-        title=_(u\'heading_auth_cookie_manual_override\',\n-                default=u\'Authenticated users only\'),\n+        title=_(\n+            "heading_auth_cookie_manual_override",\n+            default="Authenticated users only",\n+        ),\n         description=_(\n-            u\'description_auth_ookie_manual_override\',\n-            default=(u\'Related to: use cookie for manual override\')\n+            "description_auth_ookie_manual_override",\n+            default=("Related to: use cookie for manual override"),\n         ),\n         default=False,\n         required=False,\n@@ -157,42 +161,42 @@ class ILanguageSchema(Interface):\n \n     set_cookie_always = schema.Bool(\n         title=_(\n-            u\'heading_set_language_cookie_always\',\n-            default=(u\'Set the language cookie always\')),\n+            "heading_set_language_cookie_always",\n+            default=("Set the language cookie always"),\n+        ),\n         description=_(\n-            u\'description_set_language_cookie_always\',\n+            "description_set_language_cookie_always",\n             default=(\n-                u\'i.e. also when the \\\'set_language\\\' request parameter is \'\n-                u\'absent\'\n-            )\n+                "i.e. also when the \'set_language\' request parameter is " "absent"\n+            ),\n         ),\n         default=False,\n         required=False,\n     )\n \n     use_subdomain_negotiation = schema.Bool(\n-        title=_(u\'heading_use_subdomain\',\n-                default=u\'Use subdomain\'),\n-        description=_(u\'description_use_subdomain\',\n-                      default=u\'e.g.: de.plone.org\'),\n+        title=_("heading_use_subdomain", default="Use subdomain"),\n+        description=_("description_use_subdomain", default="e.g.: de.plone.org"),\n         default=False,\n         required=False,\n     )\n \n     use_cctld_negotiation = schema.Bool(\n-        title=_(u\'heading_top_level_domain\',\n-                default=u\'Use top-level domain\'),\n-        description=_(u\'description_top_level_domain\',\n-                      default=u\'e.g.: www.plone.de\'),\n+        title=_("heading_top_level_domain", default="Use top-level domain"),\n+        description=_("description_top_level_domain", default="e.g.: www.plone.de"),\n         default=False,\n         required=False,\n     )\n \n     use_request_negotiation = schema.Bool(\n-        title=_(u\'heading_browser_language_request_negotiation\',\n-                default=u\'Use browser language request negotiation\'),\n-        description=_(u\'description_browser_language_request_negotiation\',\n-                      default=u\'Use browser language request negotiation.\'),\n+        title=_(\n+            "heading_browser_language_request_negotiation",\n+            default="Use browser language request negotiation",\n+        ),\n+        description=_(\n+            "description_browser_language_request_negotiation",\n+            default="Use browser language request negotiation.",\n+        ),\n         default=False,\n         required=False,\n     )\ndiff --git a/plone/i18n/locales/cctld.py b/plone/i18n/locales/cctld.py\nindex 7d8ee90..3b9e545 100644\n--- a/plone/i18n/locales/cctld.py\n+++ b/plone/i18n/locales/cctld.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # This file contains a map from internet top level domains to the spoken\n # language(s) in the country associated with the domain.\n \n@@ -12,298 +11,294 @@\n \n \n @implementer(ICcTLDInformation)\n-class CcTLDInformation(object):\n-    """A list of country code top level domains their relevant languages.\n-    """\n+class CcTLDInformation:\n+    """A list of country code top level domains their relevant languages."""\n \n     def getAvailableTLDs(self):\n-        """Return a sequence of country code top level domains.\n-        """\n+        """Return a sequence of country code top level domains."""\n         return list(_tld_to_language.keys())\n \n     def getTLDs(self):\n-        """Return a sequence of ccTLDs and their languages.\n-        """\n+        """Return a sequence of ccTLDs and their languages."""\n         return _tld_to_language.copy()\n \n     def getLanguagesForTLD(self, tld):\n-        """Return the relevant languages for a top level domain.\n-        """\n+        """Return the relevant languages for a top level domain."""\n         return _tld_to_language[tld]\n \n \n ccTLDInformation = CcTLDInformation()\n \n _tld_to_language = {\n-    u"ac": [],\n-    u"ad": [],\n-    u"ae": [],\n-    u"aero": [],\n-    u"af": [],\n-    u"ag": [],\n-    u"ai": [],\n-    u"al": [],\n-    u"am": [],\n-    u"an": [],\n-    u"ao": [],\n-    u"aq": [u"en"],\n-    u"ar": [u"pt"],\n-    u"arpa": [u"en"],\n-    u"as": [u"en"],\n-    u"asia": [],\n-    u"at": [u"de"],\n-    u"au": [u"en"],\n-    u"aw": [],\n-    u"ax": [],\n-    u"az": [],\n-    u"ba": [u"bs"],\n-    u"bb": [],\n-    u"bd": [],\n-    u"be": [u"nl", u"fr"],\n-    u"bf": [],\n-    u"bg": [],\n-    u"bh": [],\n-    u"bi": [],\n-    u"biz": [],\n-    u"bj": [],\n-    u"bm": [],\n-    u"bn": [],\n-    u"bo": [],\n-    u"br": [u"pt"],\n-    u"bs": [],\n-    u"bt": [],\n-    u"bv": [],\n-    u"bw": [],\n-    u"by": [],\n-    u"bz": [],\n-    u"ca": [u"en"],\n-    u"cat": [u"ca"],\n-    u"cc": [],\n-    u"cd": [],\n-    u"cf": [],\n-    u"cg": [],\n-    u"ch": [u"de"],\n-    u"ci": [],\n-    u"ck": [],\n-    u"cl": [],\n-    u"cm": [],\n-    u"cn": [u"zh"],\n-    u"co": [],\n-    u"com": [],\n-    u"coop": [],\n-    u"cr": [u"es"],\n-    u"cu": [],\n-    u"cv": [],\n-    u"cx": [],\n-    u"cy": [],\n-    u"cz": [],\n-    u"de": [u"de"],\n-    u"dj": [],\n-    u"dk": [u"da"],\n-    u"dm": [],\n-    u"do": [],\n-    u"dz": [],\n-    u"ec": [],\n-    u"edu": [u"en"],\n-    u"ee": [u"et"],\n-    u"eg": [],\n-    u"er": [],\n-    u"es": [u"es"],\n-    u"et": [],\n-    u"eu": [],\n-    u"fi": [u"fi"],\n-    u"fj": [],\n-    u"fk": [],\n-    u"fm": [],\n-    u"fo": [u"fo"],\n-    u"fr": [u"fr"],\n-    u"ga": [],\n-    u"gb": [u"en"],\n-    u"gd": [],\n-    u"ge": [u"ka"],\n-    u"gf": [],\n-    u"gg": [],\n-    u"gh": [],\n-    u"gi": [],\n-    u"gl": [],\n-    u"gm": [],\n-    u"gn": [],\n-    u"gov": [u"en"],\n-    u"gp": [],\n-    u"gq": [],\n-    u"gr": [u"gr"],\n-    u"gs": [],\n-    u"gt": [],\n-    u"gu": [],\n-    u"gw": [],\n-    u"gy": [],\n-    u"hk": [],\n-    u"hm": [],\n-    u"hn": [],\n-    u"hr": [u"hr"],\n-    u"ht": [],\n-    u"hu": [u"hu"],\n-    u"id": [],\n-    u"ie": [],\n-    u"il": [u"he"],\n-    u"im": [u"en"],\n-    u"in": [u"hi"],\n-    u"info": [],\n-    u"int": [],\n-    u"io": [u"en"],\n-    u"iq": [u"ar"],\n-    u"ir": [u"ar"],\n-    u"is": [u"is"],\n-    u"it": [u"it"],\n-    u"je": [u"en"],\n-    u"jm": [],\n-    u"jo": [],\n-    u"jobs": [],\n-    u"jp": [u"ja"],\n-    u"ke": [],\n-    u"kg": [],\n-    u"kh": [],\n-    u"ki": [],\n-    u"km": [],\n-    u"kn": [],\n-    u"kp": [u"ko"],\n-    u"kr": [u"ko"],\n-    u"kw": [],\n-    u"ky": [],\n-    u"kz": [u"kk"],\n-    u"la": [],\n-    u"lb": [],\n-    u"lc": [],\n-    u"li": [],\n-    u"lk": [],\n-    u"lr": [],\n-    u"ls": [],\n-    u"lt": [],\n-    u"lu": [u"lb"],\n-    u"lv": [u"lv"],\n-    u"ly": [],\n-    u"ma": [],\n-    u"mc": [],\n-    u"md": [u"mo"],\n-    u"me": [],\n-    u"mg": [u"mg"],\n-    u"mh": [],\n-    u"mil": [u"en"],\n-    u"mk": [],\n-    u"ml": [],\n-    u"mm": [],\n-    u"mn": [u"mn"],\n-    u"mo": [],\n-    u"mobi": [],\n-    u"mp": [],\n-    u"mq": [],\n-    u"mr": [],\n-    u"ms": [],\n-    u"mt": [u"mt"],\n-    u"mu": [],\n-    u"museum": [],\n-    u"mv": [],\n-    u"mw": [],\n-    u"mx": [],\n-    u"my": [],\n-    u"mz": [],\n-    u"na": [],\n-    u"name": [],\n-    u"nc": [],\n-    u"ne": [],\n-    u"net": [],\n-    u"nf": [],\n-    u"ng": [],\n-    u"ni": [],\n-    u"nl": [u"nl"],\n-    u"no": [u"no"],\n-    u"np": [],\n-    u"nr": [],\n-    u"nu": [],\n-    u"nz": [],\n-    u"om": [u"en"],\n-    u"org": [],\n-    u"pa": [],\n-    u"pe": [],\n-    u"pf": [],\n-    u"pg": [],\n-    u"ph": [],\n-    u"pk": [],\n-    u"pl": [u"pl"],\n-    u"pm": [],\n-    u"pn": [],\n-    u"pr": [u"es"],\n-    u"pro": [],\n-    u"ps": [u"ar"],\n-    u"pt": [u"pt"],\n-    u"pw": [],\n-    u"py": [],\n-    u"qa": [],\n-    u"re": [],\n-    u"ro": [u"ro"],\n-    u"rs": [],\n-    u"ru": [u"ru"],\n-    u"rw": [],\n-    u"sa": [u"ar"],\n-    u"sb": [],\n-    u"sc": [],\n-    u"sd": [u"su"],\n-    u"se": [u"sv"],\n-    u"sg": [u"si"],\n-    u"sh": [],\n-    u"si": [u"sl"],\n-    u"sj": [],\n-    u"sk": [u"sk"],\n-    u"sl": [],\n-    u"sm": [],\n-    u"sn": [u"fr"],\n-    u"so": [u"so"],\n-    u"sr": [u"nl"],\n-    u"ss": [],\n-    u"st": [],\n-    u"su": [u"ru"],\n-    u"sv": [],\n-    u"sy": [],\n-    u"sz": [],\n-    u"tc": [u"tr"],\n-    u"td": [],\n-    u"tel": [],\n-    u"tf": [],\n-    u"tg": [u"to"],\n-    u"th": [u"th"],\n-    u"tj": [u"fa"],\n-    u"tk": [u"tk"],\n-    u"tl": [u"pt"],\n-    u"tm": [u"tk"],\n-    u"tn": [],\n-    u"to": [],\n-    u"tp": [u"pt"],\n-    u"tr": [],\n-    u"travel": [],\n-    u"tt": [],\n-    u"tv": [],\n-    u"tw": [u"zh"],\n-    u"tz": [],\n-    u"ua": [],\n-    u"ug": [],\n-    u"uk": [u"en"],\n-    u"us": [u"en"],\n-    u"uy": [],\n-    u"uz": [],\n-    u"va": [u"it"],\n-    u"vc": [],\n-    u"ve": [],\n-    u"vg": [],\n-    u"vi": [u"en"],\n-    u"vn": [u"vi"],\n-    u"vu": [],\n-    u"wf": [],\n-    u"ws": [u"sm"],\n-    u"xxx": [],\n-    u"ye": [],\n-    u"yt": [],\n-    u"yu": [u"sh"],\n-    u"za": [u"af"],\n-    u"zm": [],\n-    u"zw": [],\n+    "ac": [],\n+    "ad": [],\n+    "ae": [],\n+    "aero": [],\n+    "af": [],\n+    "ag": [],\n+    "ai": [],\n+    "al": [],\n+    "am": [],\n+    "an": [],\n+    "ao": [],\n+    "aq": ["en"],\n+    "ar": ["pt"],\n+    "arpa": ["en"],\n+    "as": ["en"],\n+    "asia": [],\n+    "at": ["de"],\n+    "au": ["en"],\n+    "aw": [],\n+    "ax": [],\n+    "az": [],\n+    "ba": ["bs"],\n+    "bb": [],\n+    "bd": [],\n+    "be": ["nl", "fr"],\n+    "bf": [],\n+    "bg": [],\n+    "bh": [],\n+    "bi": [],\n+    "biz": [],\n+    "bj": [],\n+    "bm": [],\n+    "bn": [],\n+    "bo": [],\n+    "br": ["pt"],\n+    "bs": [],\n+    "bt": [],\n+    "bv": [],\n+    "bw": [],\n+    "by": [],\n+    "bz": [],\n+    "ca": ["en"],\n+    "cat": ["ca"],\n+    "cc": [],\n+    "cd": [],\n+    "cf": [],\n+    "cg": [],\n+    "ch": ["de"],\n+    "ci": [],\n+    "ck": [],\n+    "cl": [],\n+    "cm": [],\n+    "cn": ["zh"],\n+    "co": [],\n+    "com": [],\n+    "coop": [],\n+    "cr": ["es"],\n+    "cu": [],\n+    "cv": [],\n+    "cx": [],\n+    "cy": [],\n+    "cz": [],\n+    "de": ["de"],\n+    "dj": [],\n+    "dk": ["da"],\n+    "dm": [],\n+    "do": [],\n+    "dz": [],\n+    "ec": [],\n+    "edu": ["en"],\n+    "ee": ["et"],\n+    "eg": [],\n+    "er": [],\n+    "es": ["es"],\n+    "et": [],\n+    "eu": [],\n+    "fi": ["fi"],\n+    "fj": [],\n+    "fk": [],\n+    "fm": [],\n+    "fo": ["fo"],\n+    "fr": ["fr"],\n+    "ga": [],\n+    "gb": ["en"],\n+    "gd": [],\n+    "ge": ["ka"],\n+    "gf": [],\n+    "gg": [],\n+    "gh": [],\n+    "gi": [],\n+    "gl": [],\n+    "gm": [],\n+    "gn": [],\n+    "gov": ["en"],\n+    "gp": [],\n+    "gq": [],\n+    "gr": ["gr"],\n+    "gs": [],\n+    "gt": [],\n+    "gu": [],\n+    "gw": [],\n+    "gy": [],\n+    "hk": [],\n+    "hm": [],\n+    "hn": [],\n+    "hr": ["hr"],\n+    "ht": [],\n+    "hu": ["hu"],\n+    "id": [],\n+    "ie": [],\n+    "il": ["he"],\n+    "im": ["en"],\n+    "in": ["hi"],\n+    "info": [],\n+    "int": [],\n+    "io": ["en"],\n+    "iq": ["ar"],\n+    "ir": ["ar"],\n+    "is": ["is"],\n+    "it": ["it"],\n+    "je": ["en"],\n+    "jm": [],\n+    "jo": [],\n+    "jobs": [],\n+    "jp": ["ja"],\n+    "ke": [],\n+    "kg": [],\n+    "kh": [],\n+    "ki": [],\n+    "km": [],\n+    "kn": [],\n+    "kp": ["ko"],\n+    "kr": ["ko"],\n+    "kw": [],\n+    "ky": [],\n+    "kz": ["kk"],\n+    "la": [],\n+    "lb": [],\n+    "lc": [],\n+    "li": [],\n+    "lk": [],\n+    "lr": [],\n+    "ls": [],\n+    "lt": [],\n+    "lu": ["lb"],\n+    "lv": ["lv"],\n+    "ly": [],\n+    "ma": [],\n+    "mc": [],\n+    "md": ["mo"],\n+    "me": [],\n+    "mg": ["mg"],\n+    "mh": [],\n+    "mil": ["en"],\n+    "mk": [],\n+    "ml": [],\n+    "mm": [],\n+    "mn": ["mn"],\n+    "mo": [],\n+    "mobi": [],\n+    "mp": [],\n+    "mq": [],\n+    "mr": [],\n+    "ms": [],\n+    "mt": ["mt"],\n+    "mu": [],\n+    "museum": [],\n+    "mv": [],\n+    "mw": [],\n+    "mx": [],\n+    "my": [],\n+    "mz": [],\n+    "na": [],\n+    "name": [],\n+    "nc": [],\n+    "ne": [],\n+    "net": [],\n+    "nf": [],\n+    "ng": [],\n+    "ni": [],\n+    "nl": ["nl"],\n+    "no": ["no"],\n+    "np": [],\n+    "nr": [],\n+    "nu": [],\n+    "nz": [],\n+    "om": ["en"],\n+    "org": [],\n+    "pa": [],\n+    "pe": [],\n+    "pf": [],\n+    "pg": [],\n+    "ph": [],\n+    "pk": [],\n+    "pl": ["pl"],\n+    "pm": [],\n+    "pn": [],\n+    "pr": ["es"],\n+    "pro": [],\n+    "ps": ["ar"],\n+    "pt": ["pt"],\n+    "pw": [],\n+    "py": [],\n+    "qa": [],\n+    "re": [],\n+    "ro": ["ro"],\n+    "rs": [],\n+    "ru": ["ru"],\n+    "rw": [],\n+    "sa": ["ar"],\n+    "sb": [],\n+    "sc": [],\n+    "sd": ["su"],\n+    "se": ["sv"],\n+    "sg": ["si"],\n+    "sh": [],\n+    "si": ["sl"],\n+    "sj": [],\n+    "sk": ["sk"],\n+    "sl": [],\n+    "sm": [],\n+    "sn": ["fr"],\n+    "so": ["so"],\n+    "sr": ["nl"],\n+    "ss": [],\n+    "st": [],\n+    "su": ["ru"],\n+    "sv": [],\n+    "sy": [],\n+    "sz": [],\n+    "tc": ["tr"],\n+    "td": [],\n+    "tel": [],\n+    "tf": [],\n+    "tg": ["to"],\n+    "th": ["th"],\n+    "tj": ["fa"],\n+    "tk": ["tk"],\n+    "tl": ["pt"],\n+    "tm": ["tk"],\n+    "tn": [],\n+    "to": [],\n+    "tp": ["pt"],\n+    "tr": [],\n+    "travel": [],\n+    "tt": [],\n+    "tv": [],\n+    "tw": ["zh"],\n+    "tz": [],\n+    "ua": [],\n+    "ug": [],\n+    "uk": ["en"],\n+    "us": ["en"],\n+    "uy": [],\n+    "uz": [],\n+    "va": ["it"],\n+    "vc": [],\n+    "ve": [],\n+    "vg": [],\n+    "vi": ["en"],\n+    "vn": ["vi"],\n+    "vu": [],\n+    "wf": [],\n+    "ws": ["sm"],\n+    "xxx": [],\n+    "ye": [],\n+    "yt": [],\n+    "yu": ["sh"],\n+    "za": ["af"],\n+    "zm": [],\n+    "zw": [],\n }\ndiff --git a/plone/i18n/locales/countries.py b/plone/i18n/locales/countries.py\nindex fd11fa2..c1bf859 100644\n--- a/plone/i18n/locales/countries.py\n+++ b/plone/i18n/locales/countries.py\n@@ -1,30 +1,22 @@\n-# -*- coding: UTF-8 -*-\n-\n from plone.i18n.locales.interfaces import ICountryAvailability\n from zope.interface import implementer\n \n-import six\n-\n \n @implementer(ICountryAvailability)\n-class CountryAvailability(object):\n-    """A list of available coutries.\n-    """\n+class CountryAvailability:\n+    """A list of available coutries."""\n \n     def getAvailableCountries(self):\n-        """Return a sequence of country tags for available countries.\n-        """\n+        """Return a sequence of country tags for available countries."""\n         return list(_countrylist.keys())\n \n     def getCountries(self):\n-        """Return a sequence of Country objects for available countries.\n-        """\n+        """Return a sequence of Country objects for available countries."""\n         return _countrylist.copy()\n \n     def getCountryListing(self):\n-        """Return a sequence of country code and country name tuples.\n-        """\n-        return [(code, _countrylist[code][u\'name\']) for code in _countrylist]\n+        """Return a sequence of country code and country name tuples."""\n+        return [(code, _countrylist[code]["name"]) for code in _countrylist]\n \n \n countries = CountryAvailability()\n@@ -40,691 +32,688 @@ def getCountryListing(self):\n # part of the list for historical reasons: an\n \n _countrylist = {\n-    u\'ad\': {u\'name\': \'Andorra\', u\'flag\': u\'/++resource++country-flags/ad.gif\'},\n-    u\'ae\': {\n-        u\'name\': \'United Arab Emirates\',\n-        u\'flag\': u\'/++resource++country-flags/ae.gif\',\n-    },\n-    u\'af\': {\n-        u\'name\': \'Afghanistan\',\n-        u\'flag\': u\'/++resource++country-flags/af.gif\',\n-    },\n-    u\'ag\': {\n-        u\'name\': \'Antigua and Barbuda\',\n-        u\'flag\': u\'/++resource++country-flags/ag.gif\',\n-    },\n-    u\'ai\': {\n-        u\'name\': \'Anguilla\',\n-        u\'flag\': u\'/++resource++country-flags/ai.gif\',\n-    },\n-    u\'al\': {u\'name\': \'Albania\', u\'flag\': u\'/++resource++country-flags/al.gif\'},\n-    u\'am\': {u\'name\': \'Armenia\', u\'flag\': u\'/++resource++country-flags/am.gif\'},\n-    u\'an\': {\n-        u\'name\': \'Netherlands Antilles\',\n-        u\'flag\': u\'/++resource++country-flags/an.gif\',\n-    },\n-    u\'ao\': {u\'name\': \'Angola\', u\'flag\': u\'/++resource++country-flags/ao.gif\'},\n-    u\'aq\': {\n-        u\'name\': \'Antarctica\',\n-        u\'flag\': u\'/++resource++country-flags/aq.gif\',\n-    },\n-    u\'ar\': {\n-        u\'name\': \'Argentina\',\n-        u\'flag\': u\'/++resource++country-flags/ar.gif\',\n-    },\n-    u\'as\': {\n-        u\'name\': \'American Samoa\',\n-        u\'flag\': u\'/++resource++country-flags/as.gif\',\n-    },\n-    u\'at\': {u\'name\': \'Austria\', u\'flag\': u\'/++resource++country-flags/at.gif\'},\n-    u\'au\': {\n-        u\'name\': \'Australia\',\n-        u\'flag\': u\'/++resource++country-flags/au.gif\',\n-    },\n-    u\'aw\': {u\'name\': \'Aruba\', u\'flag\': u\'/++resource++country-flags/aw.gif\'},\n-    u\'ax\': {\n-        u\'name\': \'Oland Islands\',\n-        u\'flag\': u\'/++resource++country-flags/ax.gif\',\n-    },\n-    u\'az\': {\n-        u\'name\': \'Azerbaijan\',\n-        u\'flag\': u\'/++resource++country-flags/az.gif\',\n-    },\n-    u\'ba\': {\n-        u\'name\': \'Bosnia and Herzegovina\',\n-        u\'flag\': u\'/++resource++country-flags/ba.gif\',\n-    },\n-    u\'bb\': {\n-        u\'name\': \'Barbados\',\n-        u\'flag\': u\'/++resource++country-flags/bb.gif\',\n-    },\n-    u\'bd\': {\n-        u\'name\': \'Bangladesh\',\n-        u\'flag\': u\'/++resource++country-flags/bd.gif\',\n-    },\n-    u\'be\': {u\'name\': \'Belgium\', u\'flag\': u\'/++resource++country-flags/be.gif\'},\n-    u\'bf\': {\n-        u\'name\': \'Burkina Faso\',\n-        u\'flag\': u\'/++resource++country-flags/bf.gif\',\n-    },\n-    u\'bg\': {\n-        u\'name\': \'Bulgaria\',\n-        u\'flag\': u\'/++resource++country-flags/bg.gif\',\n-    },\n-    u\'bh\': {u\'name\': \'Bahrain\', u\'flag\': u\'/++resource++country-flags/bh.gif\'},\n-    u\'bi\': {u\'name\': \'Burundi\', u\'flag\': u\'/++resource++country-flags/bi.gif\'},\n-    u\'bj\': {u\'name\': \'Benin\', u\'flag\': u\'/++resource++country-flags/bj.gif\'},\n-    u\'bl\': {\n-        u\'name\': \'Saint Barth\xc3\xa9lemy\',\n-        u\'flag\': u\'/++resource++country-flags/bl.gif\',\n-    },\n-    u\'bm\': {u\'name\': \'Bermuda\', u\'flag\': u\'/++resource++country-flags/bm.gif\'},\n-    u\'bn\': {\n-        u\'name\': \'Brunei Darussalam\',\n-        u\'flag\': u\'/++resource++country-flags/bn.gif\',\n-    },\n-    u\'bo\': {u\'name\': \'Bolivia\', u\'flag\': u\'/++resource++country-flags/bo.gif\'},\n-    u\'bq\': {\n-        u\'name\': \'Bonaire, Sint Eustatius and Saba\',\n-        u\'flag\': u\'/++resource++country-flags/bq.gif\',\n-    },\n-    u\'br\': {u\'name\': \'Brazil\', u\'flag\': u\'/++resource++country-flags/br.gif\'},\n-    u\'bs\': {u\'name\': \'Bahamas\', u\'flag\': u\'/++resource++country-flags/bs.gif\'},\n-    u\'bt\': {u\'name\': \'Bhutan\', u\'flag\': u\'/++resource++country-flags/bt.gif\'},\n-    u\'bv\': {\n-        u\'name\': \'Bouvet Island\',\n-        u\'flag\': u\'/++resource++country-flags/bv.gif\',\n-    },\n-    u\'bw\': {\n-        u\'name\': \'Botswana\',\n-        u\'flag\': u\'/++resource++country-flags/bw.gif\',\n-    },\n-    u\'by\': {u\'name\': \'Belarus\', u\'flag\': u\'/++resource++country-flags/by.gif\'},\n-    u\'bz\': {u\'name\': \'Belize\', u\'flag\': u\'/++resource++country-flags/bz.gif\'},\n-    u\'ca\': {u\'name\': \'Canada\', u\'flag\': u\'/++resource++country-flags/ca.gif\'},\n-    u\'cc\': {\n-        u\'name\': \'Cocos (Keeling) Islands\',\n-        u\'flag\': u\'/++resource++country-flags/cc.gif\',\n-    },\n-    u\'cd\': {\n-        u\'name\': \'Congo The Democratic Republic of\',\n-        u\'flag\': u\'/++resource++country-flags/cd.gif\',\n-    },\n-    u\'cf\': {\n-        u\'name\': \'Central African Republic\',\n-        u\'flag\': u\'/++resource++country-flags/cf.gif\',\n-    },\n-    u\'cg\': {u\'name\': \'Congo\', u\'flag\': u\'/++resource++country-flags/cg.gif\'},\n-    u\'ch\': {\n-        u\'name\': \'Switzerland\',\n-        u\'flag\': u\'/++resource++country-flags/ch.gif\',\n-    },\n-    u\'ci\': {\n-        u\'name\': "Cote d\'Ivoire",\n-        u\'flag\': u\'/++resource++country-flags/ci.gif\',\n-    },\n-    u\'ck\': {\n-        u\'name\': \'Cook Islands\',\n-        u\'flag\': u\'/++resource++country-flags/ck.gif\',\n-    },\n-    u\'cl\': {u\'name\': \'Chile\', u\'flag\': u\'/++resource++country-flags/cl.gif\'},\n-    u\'cm\': {\n-        u\'name\': \'Cameroon\',\n-        u\'flag\': u\'/++resource++country-flags/cm.gif\',\n-    },\n-    u\'cn\': {u\'name\': \'China\', u\'flag\': u\'/++resource++country-flags/cn.gif\'},\n-    u\'co\': {\n-        u\'name\': \'Colombia\',\n-        u\'flag\': u\'/++resource++country-flags/co.gif\',\n-    },\n-    u\'cr\': {\n-        u\'name\': \'Costa Rica\',\n-        u\'flag\': u\'/++resource++country-flags/cr.gif\',\n-    },\n-    u\'cs\': {\n-        u\'name\': \'Serbia and Montenegro\',\n-        u\'flag\': u\'/++resource++country-flags/cs.gif\',\n-    },\n-    u\'cu\': {u\'name\': \'Cuba\', u\'flag\': u\'/++resource++country-flags/cu.gif\'},\n-    u\'cv\': {\n-        u\'name\': \'Cape Verde\',\n-        u\'flag\': u\'/++resource++country-flags/cv.gif\',\n-    },\n-    u\'cw\': {u\'name\': \'Cura\xc3\xa7ao\', u\'flag\': u\'/++resource++country-flags/cw.png\'},\n-    u\'cx\': {\n-        u\'name\': \'Christmas Island\',\n-        u\'flag\': u\'/++resource++country-flags/cx.gif\',\n-    },\n-    u\'cy\': {u\'name\': \'Cyprus\', u\'flag\': u\'/++resource++country-flags/cy.gif\'},\n-    u\'cz\': {\n-        u\'name\': \'Czech Republic\',\n-        u\'flag\': u\'/++resource++country-flags/cz.gif\',\n-    },\n-    u\'de\': {u\'name\': \'Germany\', u\'flag\': u\'/++resource++country-flags/de.gif\'},\n-    u\'dj\': {\n-        u\'name\': \'Djibouti\',\n-        u\'flag\': u\'/++resource++country-flags/dj.gif\',\n-    },\n-    u\'dk\': {u\'name\': \'Denmark\', u\'flag\': u\'/++resource++country-flags/dk.gif\'},\n-    u\'dm\': {\n-        u\'name\': \'Dominica\',\n-        u\'flag\': u\'/++resource++country-flags/dm.gif\',\n-    },\n-    u\'do\': {\n-        u\'name\': \'Dominican Republic\',\n-        u\'flag\': u\'/++resource++country-flags/do.gif\',\n-    },\n-    u\'dz\': {u\'name\': \'Algeria\', u\'flag\': u\'/++resource++country-flags/dz.gif\'},\n-    u\'ec\': {u\'name\': \'Ecuador\', u\'flag\': u\'/++resource++country-flags/ec.gif\'},\n-    u\'ee\': {u\'name\': \'Estonia\', u\'flag\': u\'/++resource++country-flags/ee.gif\'},\n-    u\'eg\': {u\'name\': \'Egypt\', u\'flag\': u\'/++resource++country-flags/eg.gif\'},\n-    u\'eh\': {\n-        u\'name\': \'Western Sahara\',\n-        u\'flag\': u\'/++resource++country-flags/eh.gif\',\n-    },\n-    u\'er\': {u\'name\': \'Eritrea\', u\'flag\': u\'/++resource++country-flags/er.gif\'},\n-    u\'es\': {u\'name\': \'Spain\', u\'flag\': u\'/++resource++country-flags/es.gif\'},\n-    u\'et\': {\n-        u\'name\': \'Ethiopia\',\n-        u\'flag\': u\'/++resource++country-flags/et.gif\',\n-    },\n-    u\'fi\': {u\'name\': \'Finland\', u\'flag\': u\'/++resource++country-flags/fi.gif\'},\n-    u\'fj\': {u\'name\': \'Fiji\', u\'flag\': u\'/++resource++country-flags/fj.gif\'},\n-    u\'fk\': {\n-        u\'name\': \'Falkland Islands (Malvinas)\',\n-        u\'flag\': u\'/++resource++country-flags/fk.gif\',\n-    },\n-    u\'fm\': {\n-        u\'name\': \'Micronesia Federated States of\',\n-        u\'flag\': u\'/++resource++country-flags/fm.gif\',\n-    },\n-    u\'fo\': {\n-        u\'name\': \'Faroe Islands\',\n-        u\'flag\': u\'/++resource++country-flags/fo.gif\',\n-    },\n-    u\'fr\': {u\'name\': \'France\', u\'flag\': u\'/++resource++country-flags/fr.gif\'},\n-    u\'ga\': {u\'name\': \'Gabon\', u\'flag\': u\'/++resource++country-flags/ga.gif\'},\n-    u\'gb\': {\n-        u\'name\': \'United Kingdom\',\n-        u\'flag\': u\'/++resource++country-flags/gb.gif\',\n-    },\n-    u\'gd\': {u\'name\': \'Grenada\', u\'flag\': u\'/++resource++country-flags/gd.gif\'},\n-    u\'ge\': {u\'name\': \'Georgia\', u\'flag\': u\'/++resource++country-flags/ge.gif\'},\n-    u\'gf\': {\n-        u\'name\': \'French Guiana\',\n-        u\'flag\': u\'/++resource++country-flags/gf.gif\',\n-    },\n-    u\'gg\': {\n-        u\'name\': \'Guernsey\',\n-        u\'flag\': u\'/++resource++country-flags/gg.gif\',\n-    },\n-    u\'gh\': {u\'name\': \'Ghana\', u\'flag\': u\'/++resource++country-flags/gh.gif\'},\n-    u\'gi\': {\n-        u\'name\': \'Gibraltar\',\n-        u\'flag\': u\'/++resource++country-flags/gi.gif\',\n-    },\n-    u\'gl\': {\n-        u\'name\': \'Greenland\',\n-        u\'flag\': u\'/++resource++country-flags/gl.gif\',\n-    },\n-    u\'gm\': {u\'name\': \'Gambia\', u\'flag\': u\'/++resource++country-flags/gm.gif\'},\n-    u\'gn\': {u\'name\': \'Guinea\', u\'flag\': u\'/++resource++country-flags/gn.gif\'},\n-    u\'gp\': {\n-        u\'name\': \'Guadeloupe\',\n-        u\'flag\': u\'/++resource++country-flags/gp.gif\',\n-    },\n-    u\'gq\': {\n-        u\'name\': \'Equatorial Guinea\',\n-        u\'flag\': u\'/++resource++country-flags/gq.gif\',\n-    },\n-    u\'gr\': {u\'name\': \'Greece\', u\'flag\': u\'/++resource++country-flags/gr.gif\'},\n-    u\'gs\': {\n-        u\'name\': \'South Georgia and the South Sandwich Islands\',\n-        u\'flag\': u\'/++resource++country-flags/gs.gif\',\n-    },\n-    u\'gt\': {\n-        u\'name\': \'Guatemala\',\n-        u\'flag\': u\'/++resource++country-flags/gt.gif\',\n-    },\n-    u\'gu\': {u\'name\': \'Guam\', u\'flag\': u\'/++resource++country-flags/gu.gif\'},\n-    u\'gw\': {\n-        u\'name\': \'Guinea-Bissau\',\n-        u\'flag\': u\'/++resource++country-flags/gw.gif\',\n-    },\n-    u\'gy\': {u\'name\': \'Guyana\', u\'flag\': u\'/++resource++country-flags/gy.gif\'},\n-    u\'hk\': {\n-        u\'name\': \'Hong Kong\',\n-        u\'flag\': u\'/++resource++country-flags/hk.gif\',\n-    },\n-    u\'hm\': {\n-        u\'name\': \'Heard Island and McDonald Islands\',\n-        u\'flag\': u\'/++resource++country-flags/hm.gif\',\n-    },\n-    u\'hn\': {\n-        u\'name\': \'Honduras\',\n-        u\'flag\': u\'/++resource++country-flags/hn.gif\',\n-    },\n-    u\'hr\': {u\'name\': \'Croatia\', u\'flag\': u\'/++resource++country-flags/hr.gif\'},\n-    u\'ht\': {u\'name\': \'Haiti\', u\'flag\': u\'/++resource++country-flags/ht.gif\'},\n-    u\'hu\': {u\'name\': \'Hungary\', u\'flag\': u\'/++resource++country-flags/hu.gif\'},\n-    u\'id\': {\n-        u\'name\': \'Indonesia\',\n-        u\'flag\': u\'/++resource++country-flags/id.gif\',\n-    },\n-    u\'ie\': {u\'name\': \'Ireland\', u\'flag\': u\'/++resource++country-flags/ie.gif\'},\n-    u\'il\': {u\'name\': \'Israel\', u\'flag\': u\'/++resource++country-flags/il.gif\'},\n-    u\'im\': {\n-        u\'name\': \'Isle of Man\',\n-        u\'flag\': u\'/++resource++country-flags/im.gif\',\n-    },\n-    u\'in\': {u\'name\': \'India\', u\'flag\': u\'/++resource++country-flags/in.gif\'},\n-    u\'io\': {\n-        u\'name\': \'British Indian Ocean Territory\',\n-        u\'flag\': u\'/++resource++country-flags/io.gif\',\n-    },\n-    u\'iq\': {u\'name\': \'Iraq\', u\'flag\': u\'/++resource++country-flags/iq.gif\'},\n-    u\'ir\': {\n-        u\'name\': \'Iran Islamic Republic of\',\n-        u\'flag\': u\'/++resource++country-flags/ir.gif\',\n-    },\n-    u\'is\': {u\'name\': \'Iceland\', u\'flag\': u\'/++resource++country-flags/is.gif\'},\n-    u\'it\': {u\'name\': \'Italy\', u\'flag\': u\'/++resource++country-flags/it.gif\'},\n-    u\'je\': {u\'name\': \'Jersey\', u\'flag\': u\'/++resource++country-flags/je.gif\'},\n-    u\'jm\': {u\'name\': \'Jamaica\', u\'flag\': u\'/++resource++country-flags/jm.gif\'},\n-    u\'jo\': {u\'name\': \'Jordan\', u\'flag\': u\'/++resource++country-flags/jo.gif\'},\n-    u\'jp\': {u\'name\': \'Japan\', u\'flag\': u\'/++resource++country-flags/jp.gif\'},\n-    u\'ke\': {u\'name\': \'Kenya\', u\'flag\': u\'/++resource++country-flags/ke.gif\'},\n-    u\'kg\': {\n-        u\'name\': \'Kyrgyzstan\',\n-        u\'flag\': u\'/++resource++country-flags/kg.gif\',\n-    },\n-    u\'kh\': {\n-        u\'name\': \'Cambodia\',\n-        u\'flag\': u\'/++resource++country-flags/kh.gif\',\n-    },\n-    u\'ki\': {\n-        u\'name\': \'Kiribati\',\n-        u\'flag\': u\'/++resource++country-flags/ki.gif\',\n-    },\n-    u\'km\': {u\'name\': \'Comoros\', u\'flag\': u\'/++resource++country-flags/km.gif\'},\n-    u\'kn\': {\n-        u\'name\': \'Saint Kitts and Nevis\',\n-        u\'flag\': u\'/++resource++country-flags/kn.gif\',\n-    },\n-    u\'kp\': {\n-        u\'name\': "Korea Democratic People\'s Republic of",\n-        u\'flag\': u\'/++resource++country-flags/kp.gif\',\n-    },\n-    u\'kr\': {\n-        u\'name\': \'Korea Republic of\',\n-        u\'flag\': u\'/++resource++country-flags/kr.gif\',\n-    },\n-    u\'kw\': {u\'name\': \'Kuwait\', u\'flag\': u\'/++resource++country-flags/kw.gif\'},\n-    u\'ky\': {\n-        u\'name\': \'Cayman Islands\',\n-        u\'flag\': u\'/++resource++country-flags/ky.gif\',\n-    },\n-    u\'kz\': {\n-        u\'name\': \'Kazakhstan\',\n-        u\'flag\': u\'/++resource++country-flags/kz.gif\',\n-    },\n-    u\'la\': {\n-        u\'name\': "Lao People\'s Democratic Republic",\n-        u\'flag\': u\'/++resource++country-flags/la.gif\',\n-    },\n-    u\'lb\': {u\'name\': \'Lebanon\', u\'flag\': u\'/++resource++country-flags/lb.gif\'},\n-    u\'lc\': {\n-        u\'name\': \'Saint Lucia\',\n-        u\'flag\': u\'/++resource++country-flags/lc.gif\',\n-    },\n-    u\'li\': {\n-        u\'name\': \'Liechtenstein\',\n-        u\'flag\': u\'/++resource++country-flags/li.gif\',\n-    },\n-    u\'lk\': {\n-        u\'name\': \'Sri Lanka\',\n-        u\'flag\': u\'/++resource++country-flags/lk.gif\',\n-    },\n-    u\'lr\': {u\'name\': \'Liberia\', u\'flag\': u\'/++resource++country-flags/lr.gif\'},\n-    u\'ls\': {u\'name\': \'Lesotho\', u\'flag\': u\'/++resource++country-flags/ls.gif\'},\n-    u\'lt\': {\n-        u\'name\': \'Lithuania\',\n-        u\'flag\': u\'/++resource++country-flags/lt.gif\',\n-    },\n-    u\'lu\': {\n-        u\'name\': \'Luxembourg\',\n-        u\'flag\': u\'/++resource++country-flags/lu.gif\',\n-    },\n-    u\'lv\': {u\'name\': \'Latvia\', u\'flag\': u\'/++resource++country-flags/lv.gif\'},\n-    u\'ly\': {\n-        u\'name\': \'Libyan Arab Jamahiriya\',\n-        u\'flag\': u\'/++resource++country-flags/ly.gif\',\n-    },\n-    u\'ma\': {u\'name\': \'Morocco\', u\'flag\': u\'/++resource++country-flags/ma.gif\'},\n-    u\'mc\': {u\'name\': \'Monaco\', u\'flag\': u\'/++resource++country-flags/mc.gif\'},\n-    u\'md\': {\n-        u\'name\': \'Moldova Republic of\',\n-        u\'flag\': u\'/++resource++country-flags/md.gif\',\n-    },\n-    u\'me\': {\n-        u\'name\': \'Montenegro\',\n-        u\'flag\': u\'/++resource++country-flags/me.gif\',\n-    },\n-    u\'mf\': {\n-        u\'name\': \'Saint Martin (French part)\',\n-        u\'flag\': u\'/++resource++country-flags/mf.png\',\n-    },\n-    u\'mg\': {\n-        u\'name\': \'Madagascar\',\n-        u\'flag\': u\'/++resource++country-flags/mg.gif\',\n-    },\n-    u\'mh\': {\n-        u\'name\': \'Marshall Islands\',\n-        u\'flag\': u\'/++resource++country-flags/mh.gif\',\n-    },\n-    u\'mk\': {\n-        u\'name\': \'Macedonia the former Yugoslavian Republic of\',\n-        u\'flag\': u\'/++resource++country-flags/mk.gif\',\n-    },\n-    u\'ml\': {u\'name\': \'Mali\', u\'flag\': u\'/++resource++country-flags/ml.gif\'},\n-    u\'mm\': {u\'name\': \'Myanmar\', u\'flag\': u\'/++resource++country-flags/mm.gif\'},\n-    u\'mn\': {\n-        u\'name\': \'Mongolia\',\n-        u\'flag\': u\'/++resource++country-flags/mn.gif\',\n-    },\n-    u\'mo\': {u\'name\': \'Macao\', u\'flag\': u\'/++resource++country-flags/mo.gif\'},\n-    u\'mp\': {\n-        u\'name\': \'Northern Mariana Islands\',\n-        u\'flag\': u\'/++resource++country-flags/mp.gif\',\n-    },\n-    u\'mq\': {\n-        u\'name\': \'Martinique\',\n-        u\'flag\': u\'/++resource++country-flags/mq.gif\',\n-    },\n-    u\'mr\': {\n-        u\'name\': \'Mauritania\',\n-        u\'flag\': u\'/++resource++country-flags/mr.gif\',\n-    },\n-    u\'ms\': {\n-        u\'name\': \'Montserrat\',\n-        u\'flag\': u\'/++resource++country-flags/ms.gif\',\n-    },\n-    u\'mt\': {u\'name\': \'Malta\', u\'flag\': u\'/++resource++country-flags/mt.gif\'},\n-    u\'mu\': {\n-        u\'name\': \'Mauritius\',\n-        u\'flag\': u\'/++resource++country-flags/mu.gif\',\n-    },\n-    u\'mv\': {\n-        u\'name\': \'Maldives\',\n-        u\'flag\': u\'/++resource++country-flags/mv.gif\',\n-    },\n-    u\'mw\': {u\'name\': \'Malawi\', u\'flag\': u\'/++resource++country-flags/mw.gif\'},\n-    u\'mx\': {u\'name\': \'Mexico\', u\'flag\': u\'/++resource++country-flags/mx.gif\'},\n-    u\'my\': {\n-        u\'name\': \'Malaysia\',\n-        u\'flag\': u\'/++resource++country-flags/my.gif\',\n-    },\n-    u\'mz\': {\n-        u\'name\': \'Mozambique\',\n-        u\'flag\': u\'/++resource++country-flags/mz.gif\',\n-    },\n-    u\'na\': {u\'name\': \'Namibia\', u\'flag\': u\'/++resource++country-flags/na.gif\'},\n-    u\'nc\': {\n-        u\'name\': \'New Caledonia\',\n-        u\'flag\': u\'/++resource++country-flags/nc.gif\',\n-    },\n-    u\'ne\': {u\'name\': \'Niger\', u\'flag\': u\'/++resource++country-flags/ne.gif\'},\n-    u\'nf\': {\n-        u\'name\': \'Norfolk Island\',\n-        u\'flag\': u\'/++resource++country-flags/nf.gif\',\n-    },\n-    u\'ng\': {u\'name\': \'Nigeria\', u\'flag\': u\'/++resource++country-flags/ng.gif\'},\n-    u\'ni\': {\n-        u\'name\': \'Nicaragua\',\n-        u\'flag\': u\'/++resource++country-flags/ni.gif\',\n-    },\n-    u\'nl\': {\n-        u\'name\': \'Netherlands\',\n-        u\'flag\': u\'/++resource++country-flags/nl.gif\',\n-    },\n-    u\'no\': {u\'name\': \'Norway\', u\'flag\': u\'/++resource++country-flags/no.gif\'},\n-    u\'np\': {u\'name\': \'Nepal\', u\'flag\': u\'/++resource++country-flags/np.gif\'},\n-    u\'nr\': {u\'name\': \'Nauru\', u\'flag\': u\'/++resource++country-flags/nr.gif\'},\n-    u\'nu\': {u\'name\': \'Niue\', u\'flag\': u\'/++resource++country-flags/nu.gif\'},\n-    u\'nz\': {\n-        u\'name\': \'New Zealand\',\n-        u\'flag\': u\'/++resource++country-flags/nz.gif\',\n-    },\n-    u\'om\': {u\'name\': \'Oman\', u\'flag\': u\'/++resource++country-flags/om.gif\'},\n-    u\'pa\': {u\'name\': \'Panama\', u\'flag\': u\'/++resource++country-flags/pa.gif\'},\n-    u\'pe\': {u\'name\': \'Peru\', u\'flag\': u\'/++resource++country-flags/pe.gif\'},\n-    u\'pf\': {\n-        u\'name\': \'French Polynesia\',\n-        u\'flag\': u\'/++resource++country-flags/pf.gif\',\n-    },\n-    u\'pg\': {\n-        u\'name\': \'Papua New Guinea\',\n-        u\'flag\': u\'/++resource++country-flags/pg.gif\',\n-    },\n-    u\'ph\': {\n-        u\'name\': \'Philippines\',\n-        u\'flag\': u\'/++resource++country-flags/ph.gif\',\n-    },\n-    u\'pk\': {\n-        u\'name\': \'Pakistan\',\n-        u\'flag\': u\'/++resource++country-flags/pk.gif\',\n-    },\n-    u\'pl\': {u\'name\': \'Poland\', u\'flag\': u\'/++resource++country-flags/pl.gif\'},\n-    u\'pm\': {\n-        u\'name\': \'Saint Pierre and Miquelon\',\n-        u\'flag\': u\'/++resource++country-flags/pm.gif\',\n-    },\n-    u\'pn\': {\n-        u\'name\': \'Pitcairn\',\n-        u\'flag\': u\'/++resource++country-flags/pn.gif\',\n-    },\n-    u\'pr\': {\n-        u\'name\': \'Puerto Rico\',\n-        u\'flag\': u\'/++resource++country-flags/pr.gif\',\n-    },\n-    u\'ps\': {\n-        u\'name\': \'Palestinian Territory occupied\',\n-        u\'flag\': u\'/++resource++country-flags/ps.gif\',\n-    },\n-    u\'pt\': {\n-        u\'name\': \'Portugal\',\n-        u\'flag\': u\'/++resource++country-flags/pt.gif\',\n-    },\n-    u\'pw\': {u\'name\': \'Palau\', u\'flag\': u\'/++resource++country-flags/pw.gif\'},\n-    u\'py\': {\n-        u\'name\': \'Paraguay\',\n-        u\'flag\': u\'/++resource++country-flags/py.gif\',\n-    },\n-    u\'qa\': {u\'name\': \'Qatar\', u\'flag\': u\'/++resource++country-flags/qa.gif\'},\n-    u\'re\': {u\'name\': \'Reunion\', u\'flag\': u\'/++resource++country-flags/re.gif\'},\n-    u\'ro\': {u\'name\': \'Romania\', u\'flag\': u\'/++resource++country-flags/ro.gif\'},\n-    u\'rs\': {u\'name\': \'Serbia\', u\'flag\': u\'/++resource++country-flags/rs.gif\'},\n-    u\'ru\': {\n-        u\'name\': \'Russian Federation\',\n-        u\'flag\': u\'/++resource++country-flags/ru.gif\',\n-    },\n-    u\'rw\': {u\'name\': \'Rwanda\', u\'flag\': u\'/++resource++country-flags/rw.gif\'},\n-    u\'sa\': {\n-        u\'name\': \'Saudi Arabia\',\n-        u\'flag\': u\'/++resource++country-flags/sa.gif\',\n-    },\n-    u\'sb\': {\n-        u\'name\': \'Solomon Islands\',\n-        u\'flag\': u\'/++resource++country-flags/sb.gif\',\n-    },\n-    u\'sc\': {\n-        u\'name\': \'Seychelles\',\n-        u\'flag\': u\'/++resource++country-flags/sc.gif\',\n-    },\n-    u\'sd\': {u\'name\': \'Sudan\', u\'flag\': u\'/++resource++country-flags/sd.gif\'},\n-    u\'se\': {u\'name\': \'Sweden\', u\'flag\': u\'/++resource++country-flags/se.gif\'},\n-    u\'sg\': {\n-        u\'name\': \'Singapore\',\n-        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n-    },\n-    u\'sh\': {\n-        u\'name\': \'Saint Helena\',\n-        u\'flag\': u\'/++resource++country-flags/sh.gif\',\n-    },\n-    u\'si\': {\n-        u\'name\': \'Slovenia\',\n-        u\'flag\': u\'/++resource++country-flags/si.gif\',\n-    },\n-    u\'sj\': {\n-        u\'name\': \'Svalbard and Jan Mayen\',\n-        u\'flag\': u\'/++resource++country-flags/sj.gif\',\n-    },\n-    u\'sk\': {\n-        u\'name\': \'Slovakia\',\n-        u\'flag\': u\'/++resource++country-flags/sk.gif\',\n-    },\n-    u\'sl\': {\n-        u\'name\': \'Sierra Leone\',\n-        u\'flag\': u\'/++resource++country-flags/sl.gif\',\n-    },\n-    u\'sm\': {\n-        u\'name\': \'San Marino\',\n-        u\'flag\': u\'/++resource++country-flags/sm.gif\',\n-    },\n-    u\'sn\': {u\'name\': \'Senegal\', u\'flag\': u\'/++resource++country-flags/sn.gif\'},\n-    u\'so\': {u\'name\': \'Somalia\', u\'flag\': u\'/++resource++country-flags/so.gif\'},\n-    u\'sr\': {\n-        u\'name\': \'Suriname\',\n-        u\'flag\': u\'/++resource++country-flags/sr.gif\',\n-    },\n-    u\'ss\': {\n-        u\'name\': \'South Sudan\',\n-        u\'flag\': u\'/++resource++country-flags/ss.png\',\n-    },\n-    u\'st\': {\n-        u\'name\': \'Sao Tome and Principe\',\n-        u\'flag\': u\'/++resource++country-flags/st.gif\',\n-    },\n-    u\'sv\': {\n-        u\'name\': \'El Salvador\',\n-        u\'flag\': u\'/++resource++country-flags/sv.gif\',\n-    },\n-    u\'sx\': {\n-        u\'name\': \'Sint Maarten (Dutch part)\',\n-        u\'flag\': u\'/++resource++country-flags/sx.png\',\n-    },\n-    u\'sy\': {\n-        u\'name\': \'Syrian Arab Republic\',\n-        u\'flag\': u\'/++resource++country-flags/sy.gif\',\n-    },\n-    u\'sz\': {\n-        u\'name\': \'Swaziland\',\n-        u\'flag\': u\'/++resource++country-flags/sz.gif\',\n-    },\n-    u\'tc\': {\n-        u\'name\': \'Turks and Caicos Islands\',\n-        u\'flag\': u\'/++resource++country-flags/tc.gif\',\n-    },\n-    u\'td\': {u\'name\': \'Chad\', u\'flag\': u\'/++resource++country-flags/td.gif\'},\n-    u\'tf\': {\n-        u\'name\': \'French Southern Territories\',\n-        u\'flag\': u\'/++resource++country-flags/tf.gif\',\n-    },\n-    u\'tg\': {u\'name\': \'Togo\', u\'flag\': u\'/++resource++country-flags/tg.gif\'},\n-    u\'th\': {\n-        u\'name\': \'Thailand\',\n-        u\'flag\': u\'/++resource++country-flags/th.gif\',\n-    },\n-    u\'tj\': {\n-        u\'name\': \'Tajikistan\',\n-        u\'flag\': u\'/++resource++country-flags/tj.gif\',\n-    },\n-    u\'tk\': {u\'name\': \'Tokelau\', u\'flag\': u\'/++resource++country-flags/tk.gif\'},\n-    u\'tl\': {\n-        u\'name\': \'Timor-Leste\',\n-        u\'flag\': u\'/++resource++country-flags/tl.gif\',\n-    },\n-    u\'tm\': {\n-        u\'name\': \'Turkmenistan\',\n-        u\'flag\': u\'/++resource++country-flags/tm.gif\',\n-    },\n-    u\'tn\': {u\'name\': \'Tunisia\', u\'flag\': u\'/++resource++country-flags/tn.gif\'},\n-    u\'to\': {u\'name\': \'Tonga\', u\'flag\': u\'/++resource++country-flags/to.gif\'},\n-    u\'tr\': {u\'name\': \'Turkey\', u\'flag\': u\'/++resource++country-flags/tr.gif\'},\n-    u\'tt\': {\n-        u\'name\': \'Trinidad and Tobago\',\n-        u\'flag\': u\'/++resource++country-flags/tt.gif\',\n-    },\n-    u\'tv\': {u\'name\': \'Tuvalu\', u\'flag\': u\'/++resource++country-flags/tv.gif\'},\n-    u\'tw\': {u\'name\': \'Taiwan\', u\'flag\': u\'/++resource++country-flags/tw.gif\'},\n-    u\'tz\': {\n-        u\'name\': \'Tanzania United Republic of\',\n-        u\'flag\': u\'/++resource++country-flags/tz.gif\',\n-    },\n-    u\'ua\': {u\'name\': \'Ukraine\', u\'flag\': u\'/++resource++country-flags/ua.gif\'},\n-    u\'ug\': {u\'name\': \'Uganda\', u\'flag\': u\'/++resource++country-flags/ug.gif\'},\n-    u\'um\': {\n-        u\'name\': \'United States Minor Outlying Islands\',\n-        u\'flag\': u\'/++resource++country-flags/um.gif\',\n-    },\n-    u\'us\': {\n-        u\'name\': \'United States\',\n-        u\'flag\': u\'/++resource++country-flags/us.gif\',\n-    },\n-    u\'uy\': {u\'name\': \'Uruguay\', u\'flag\': u\'/++resource++country-flags/uy.gif\'},\n-    u\'uz\': {\n-        u\'name\': \'Uzbekistan\',\n-        u\'flag\': u\'/++resource++country-flags/uz.gif\',\n-    },\n-    u\'va\': {\n-        u\'name\': \'Holy See (Vatican City State)\',\n-        u\'flag\': u\'/++resource++country-flags/va.gif\',\n-    },\n-    u\'vc\': {\n-        u\'name\': \'Saint Vincent and the Grenadines\',\n-        u\'flag\': u\'/++resource++country-flags/vc.gif\',\n-    },\n-    u\'ve\': {\n-        u\'name\': \'Venezuela\',\n-        u\'flag\': u\'/++resource++country-flags/ve.gif\',\n-    },\n-    u\'vg\': {\n-        u\'name\': \'Virgin Islands British\',\n-        u\'flag\': u\'/++resource++country-flags/vg.gif\',\n-    },\n-    u\'vi\': {\n-        u\'name\': \'Virgin Islands U.S.\',\n-        u\'flag\': u\'/++resource++country-flags/vi.gif\',\n-    },\n-    u\'vn\': {\n-        u\'name\': \'Viet Nam\',\n-        u\'flag\': u\'/++resource++country-flags/vn.gif\',\n-    },\n-    u\'vu\': {u\'name\': \'Vanuatu\', u\'flag\': u\'/++resource++country-flags/vu.gif\'},\n-    u\'wf\': {\n-        u\'name\': \'Wallis and Futuna\',\n-        u\'flag\': u\'/++resource++country-flags/wf.gif\',\n-    },\n-    u\'ws\': {u\'name\': \'Samoa\', u\'flag\': u\'/++resource++country-flags/ws.gif\'},\n-    u\'ye\': {u\'name\': \'Yemen\', u\'flag\': u\'/++resource++country-flags/ye.gif\'},\n-    u\'yt\': {u\'name\': \'Mayotte\', u\'flag\': u\'/++resource++country-flags/yt.gif\'},\n-    u\'za\': {\n-        u\'name\': \'South Africa\',\n-        u\'flag\': u\'/++resource++country-flags/za.gif\',\n-    },\n-    u\'zm\': {u\'name\': \'Zambia\', u\'flag\': u\'/++resource++country-flags/zm.gif\'},\n-    u\'zw\': {\n-        u\'name\': \'Zimbabwe\',\n-        u\'flag\': u\'/++resource++country-flags/zw.gif\',\n-    },\n-    u\'xk\': {u\'name\': \'Kosovo\', u\'flag\': u\'/++resource++country-flags/xk.gif\'},\n+    "ad": {"name": "Andorra", "flag": "/++resource++country-flags/ad.gif"},\n+    "ae": {\n+        "name": "United Arab Emirates",\n+        "flag": "/++resource++country-flags/ae.gif",\n+    },\n+    "af": {\n+        "name": "Afghanistan",\n+        "flag": "/++resource++country-flags/af.gif",\n+    },\n+    "ag": {\n+        "name": "Antigua and Barbuda",\n+        "flag": "/++resource++country-flags/ag.gif",\n+    },\n+    "ai": {\n+        "name": "Anguilla",\n+        "flag": "/++resource++country-flags/ai.gif",\n+    },\n+    "al": {"name": "Albania", "flag": "/++resource++country-flags/al.gif"},\n+    "am": {"name": "Armenia", "flag": "/++resource++country-flags/am.gif"},\n+    "an": {\n+        "name": "Netherlands Antilles",\n+        "flag": "/++resource++country-flags/an.gif",\n+    },\n+    "ao": {"name": "Angola", "flag": "/++resource++country-flags/ao.gif"},\n+    "aq": {\n+        "name": "Antarctica",\n+        "flag": "/++resource++country-flags/aq.gif",\n+    },\n+    "ar": {\n+        "name": "Argentina",\n+        "flag": "/++resource++country-flags/ar.gif",\n+    },\n+    "as": {\n+        "name": "American Samoa",\n+        "flag": "/++resource++country-flags/as.gif",\n+    },\n+    "at": {"name": "Austria", "flag": "/++resource++country-flags/at.gif"},\n+    "au": {\n+        "name": "Australia",\n+        "flag": "/++resource++country-flags/au.gif",\n+    },\n+    "aw": {"name": "Aruba", "flag": "/++resource++country-flags/aw.gif"},\n+    "ax": {\n+        "name": "Oland Islands",\n+        "flag": "/++resource++country-flags/ax.gif",\n+    },\n+    "az": {\n+        "name": "Azerbaijan",\n+        "flag": "/++resource++country-flags/az.gif",\n+    },\n+    "ba": {\n+        "name": "Bosnia and Herzegovina",\n+        "flag": "/++resource++country-flags/ba.gif",\n+    },\n+    "bb": {\n+        "name": "Barbados",\n+        "flag": "/++resource++country-flags/bb.gif",\n+    },\n+    "bd": {\n+        "name": "Bangladesh",\n+        "flag": "/++resource++country-flags/bd.gif",\n+    },\n+    "be": {"name": "Belgium", "flag": "/++resource++country-flags/be.gif"},\n+    "bf": {\n+        "name": "Burkina Faso",\n+        "flag": "/++resource++country-flags/bf.gif",\n+    },\n+    "bg": {\n+        "name": "Bulgaria",\n+        "flag": "/++resource++country-flags/bg.gif",\n+    },\n+    "bh": {"name": "Bahrain", "flag": "/++resource++country-flags/bh.gif"},\n+    "bi": {"name": "Burundi", "flag": "/++resource++country-flags/bi.gif"},\n+    "bj": {"name": "Benin", "flag": "/++resource++country-flags/bj.gif"},\n+    "bl": {\n+        "name": "Saint Barth\xc3\xa9lemy",\n+        "flag": "/++resource++country-flags/bl.gif",\n+    },\n+    "bm": {"name": "Bermuda", "flag": "/++resource++country-flags/bm.gif"},\n+    "bn": {\n+        "name": "Brunei Darussalam",\n+        "flag": "/++resource++country-flags/bn.gif",\n+    },\n+    "bo": {"name": "Bolivia", "flag": "/++resource++country-flags/bo.gif"},\n+    "bq": {\n+        "name": "Bonaire, Sint Eustatius and Saba",\n+        "flag": "/++resource++country-flags/bq.gif",\n+    },\n+    "br": {"name": "Brazil", "flag": "/++resource++country-flags/br.gif"},\n+    "bs": {"name": "Bahamas", "flag": "/++resource++country-flags/bs.gif"},\n+    "bt": {"name": "Bhutan", "flag": "/++resource++country-flags/bt.gif"},\n+    "bv": {\n+        "name": "Bouvet Island",\n+        "flag": "/++resource++country-flags/bv.gif",\n+    },\n+    "bw": {\n+        "name": "Botswana",\n+        "flag": "/++resource++country-flags/bw.gif",\n+    },\n+    "by": {"name": "Belarus", "flag": "/++resource++country-flags/by.gif"},\n+    "bz": {"name": "Belize", "flag": "/++resource++country-flags/bz.gif"},\n+    "ca": {"name": "Canada", "flag": "/++resource++country-flags/ca.gif"},\n+    "cc": {\n+        "name": "Cocos (Keeling) Islands",\n+        "flag": "/++resource++country-flags/cc.gif",\n+    },\n+    "cd": {\n+        "name": "Congo The Democratic Republic of",\n+        "flag": "/++resource++country-flags/cd.gif",\n+    },\n+    "cf": {\n+        "name": "Central African Republic",\n+        "flag": "/++resource++country-flags/cf.gif",\n+    },\n+    "cg": {"name": "Congo", "flag": "/++resource++country-flags/cg.gif"},\n+    "ch": {\n+        "name": "Switzerland",\n+        "flag": "/++resource++country-flags/ch.gif",\n+    },\n+    "ci": {\n+        "name": "Cote d\'Ivoire",\n+        "flag": "/++resource++country-flags/ci.gif",\n+    },\n+    "ck": {\n+        "name": "Cook Islands",\n+        "flag": "/++resource++country-flags/ck.gif",\n+    },\n+    "cl": {"name": "Chile", "flag": "/++resource++country-flags/cl.gif"},\n+    "cm": {\n+        "name": "Cameroon",\n+        "flag": "/++resource++country-flags/cm.gif",\n+    },\n+    "cn": {"name": "China", "flag": "/++resource++country-flags/cn.gif"},\n+    "co": {\n+        "name": "Colombia",\n+        "flag": "/++resource++country-flags/co.gif",\n+    },\n+    "cr": {\n+        "name": "Costa Rica",\n+        "flag": "/++resource++country-flags/cr.gif",\n+    },\n+    "cs": {\n+        "name": "Serbia and Montenegro",\n+        "flag": "/++resource++country-flags/cs.gif",\n+    },\n+    "cu": {"name": "Cuba", "flag": "/++resource++country-flags/cu.gif"},\n+    "cv": {\n+        "name": "Cape Verde",\n+        "flag": "/++resource++country-flags/cv.gif",\n+    },\n+    "cw": {"name": "Cura\xc3\xa7ao", "flag": "/++resource++country-flags/cw.png"},\n+    "cx": {\n+        "name": "Christmas Island",\n+        "flag": "/++resource++country-flags/cx.gif",\n+    },\n+    "cy": {"name": "Cyprus", "flag": "/++resource++country-flags/cy.gif"},\n+    "cz": {\n+        "name": "Czech Republic",\n+        "flag": "/++resource++country-flags/cz.gif",\n+    },\n+    "de": {"name": "Germany", "flag": "/++resource++country-flags/de.gif"},\n+    "dj": {\n+        "name": "Djibouti",\n+        "flag": "/++resource++country-flags/dj.gif",\n+    },\n+    "dk": {"name": "Denmark", "flag": "/++resource++country-flags/dk.gif"},\n+    "dm": {\n+        "name": "Dominica",\n+        "flag": "/++resource++country-flags/dm.gif",\n+    },\n+    "do": {\n+        "name": "Dominican Republic",\n+        "flag": "/++resource++country-flags/do.gif",\n+    },\n+    "dz": {"name": "Algeria", "flag": "/++resource++country-flags/dz.gif"},\n+    "ec": {"name": "Ecuador", "flag": "/++resource++country-flags/ec.gif"},\n+    "ee": {"name": "Estonia", "flag": "/++resource++country-flags/ee.gif"},\n+    "eg": {"name": "Egypt", "flag": "/++resource++country-flags/eg.gif"},\n+    "eh": {\n+        "name": "Western Sahara",\n+        "flag": "/++resource++country-flags/eh.gif",\n+    },\n+    "er": {"name": "Eritrea", "flag": "/++resource++country-flags/er.gif"},\n+    "es": {"name": "Spain", "flag": "/++resource++country-flags/es.gif"},\n+    "et": {\n+        "name": "Ethiopia",\n+        "flag": "/++resource++country-flags/et.gif",\n+    },\n+    "fi": {"name": "Finland", "flag": "/++resource++country-flags/fi.gif"},\n+    "fj": {"name": "Fiji", "flag": "/++resource++country-flags/fj.gif"},\n+    "fk": {\n+        "name": "Falkland Islands (Malvinas)",\n+        "flag": "/++resource++country-flags/fk.gif",\n+    },\n+    "fm": {\n+        "name": "Micronesia Federated States of",\n+        "flag": "/++resource++country-flags/fm.gif",\n+    },\n+    "fo": {\n+        "name": "Faroe Islands",\n+        "flag": "/++resource++country-flags/fo.gif",\n+    },\n+    "fr": {"name": "France", "flag": "/++resource++country-flags/fr.gif"},\n+    "ga": {"name": "Gabon", "flag": "/++resource++country-flags/ga.gif"},\n+    "gb": {\n+        "name": "United Kingdom",\n+        "flag": "/++resource++country-flags/gb.gif",\n+    },\n+    "gd": {"name": "Grenada", "flag": "/++resource++country-flags/gd.gif"},\n+    "ge": {"name": "Georgia", "flag": "/++resource++country-flags/ge.gif"},\n+    "gf": {\n+        "name": "French Guiana",\n+        "flag": "/++resource++country-flags/gf.gif",\n+    },\n+    "gg": {\n+        "name": "Guernsey",\n+        "flag": "/++resource++country-flags/gg.gif",\n+    },\n+    "gh": {"name": "Ghana", "flag": "/++resource++country-flags/gh.gif"},\n+    "gi": {\n+        "name": "Gibraltar",\n+        "flag": "/++resource++country-flags/gi.gif",\n+    },\n+    "gl": {\n+        "name": "Greenland",\n+        "flag": "/++resource++country-flags/gl.gif",\n+    },\n+    "gm": {"name": "Gambia", "flag": "/++resource++country-flags/gm.gif"},\n+    "gn": {"name": "Guinea", "flag": "/++resource++country-flags/gn.gif"},\n+    "gp": {\n+        "name": "Guadeloupe",\n+        "flag": "/++resource++country-flags/gp.gif",\n+    },\n+    "gq": {\n+        "name": "Equatorial Guinea",\n+        "flag": "/++resource++country-flags/gq.gif",\n+    },\n+    "gr": {"name": "Greece", "flag": "/++resource++country-flags/gr.gif"},\n+    "gs": {\n+        "name": "South Georgia and the South Sandwich Islands",\n+        "flag": "/++resource++country-flags/gs.gif",\n+    },\n+    "gt": {\n+        "name": "Guatemala",\n+        "flag": "/++resource++country-flags/gt.gif",\n+    },\n+    "gu": {"name": "Guam", "flag": "/++resource++country-flags/gu.gif"},\n+    "gw": {\n+        "name": "Guinea-Bissau",\n+        "flag": "/++resource++country-flags/gw.gif",\n+    },\n+    "gy": {"name": "Guyana", "flag": "/++resource++country-flags/gy.gif"},\n+    "hk": {\n+        "name": "Hong Kong",\n+        "flag": "/++resource++country-flags/hk.gif",\n+    },\n+    "hm": {\n+        "name": "Heard Island and McDonald Islands",\n+        "flag": "/++resource++country-flags/hm.gif",\n+    },\n+    "hn": {\n+        "name": "Honduras",\n+        "flag": "/++resource++country-flags/hn.gif",\n+    },\n+    "hr": {"name": "Croatia", "flag": "/++resource++country-flags/hr.gif"},\n+    "ht": {"name": "Haiti", "flag": "/++resource++country-flags/ht.gif"},\n+    "hu": {"name": "Hungary", "flag": "/++resource++country-flags/hu.gif"},\n+    "id": {\n+        "name": "Indonesia",\n+        "flag": "/++resource++country-flags/id.gif",\n+    },\n+    "ie": {"name": "Ireland", "flag": "/++resource++country-flags/ie.gif"},\n+    "il": {"name": "Israel", "flag": "/++resource++country-flags/il.gif"},\n+    "im": {\n+        "name": "Isle of Man",\n+        "flag": "/++resource++country-flags/im.gif",\n+    },\n+    "in": {"name": "India", "flag": "/++resource++country-flags/in.gif"},\n+    "io": {\n+        "name": "British Indian Ocean Territory",\n+        "flag": "/++resource++country-flags/io.gif",\n+    },\n+    "iq": {"name": "Iraq", "flag": "/++resource++country-flags/iq.gif"},\n+    "ir": {\n+        "name": "Iran Islamic Republic of",\n+        "flag": "/++resource++country-flags/ir.gif",\n+    },\n+    "is": {"name": "Iceland", "flag": "/++resource++country-flags/is.gif"},\n+    "it": {"name": "Italy", "flag": "/++resource++country-flags/it.gif"},\n+    "je": {"name": "Jersey", "flag": "/++resource++country-flags/je.gif"},\n+    "jm": {"name": "Jamaica", "flag": "/++resource++country-flags/jm.gif"},\n+    "jo": {"name": "Jordan", "flag": "/++resource++country-flags/jo.gif"},\n+    "jp": {"name": "Japan", "flag": "/++resource++country-flags/jp.gif"},\n+    "ke": {"name": "Kenya", "flag": "/++resource++country-flags/ke.gif"},\n+    "kg": {\n+        "name": "Kyrgyzstan",\n+        "flag": "/++resource++country-flags/kg.gif",\n+    },\n+    "kh": {\n+        "name": "Cambodia",\n+        "flag": "/++resource++country-flags/kh.gif",\n+    },\n+    "ki": {\n+        "name": "Kiribati",\n+        "flag": "/++resource++country-flags/ki.gif",\n+    },\n+    "km": {"name": "Comoros", "flag": "/++resource++country-flags/km.gif"},\n+    "kn": {\n+        "name": "Saint Kitts and Nevis",\n+        "flag": "/++resource++country-flags/kn.gif",\n+    },\n+    "kp": {\n+        "name": "Korea Democratic People\'s Republic of",\n+        "flag": "/++resource++country-flags/kp.gif",\n+    },\n+    "kr": {\n+        "name": "Korea Republic of",\n+        "flag": "/++resource++country-flags/kr.gif",\n+    },\n+    "kw": {"name": "Kuwait", "flag": "/++resource++country-flags/kw.gif"},\n+    "ky": {\n+        "name": "Cayman Islands",\n+        "flag": "/++resource++country-flags/ky.gif",\n+    },\n+    "kz": {\n+        "name": "Kazakhstan",\n+        "flag": "/++resource++country-flags/kz.gif",\n+    },\n+    "la": {\n+        "name": "Lao People\'s Democratic Republic",\n+        "flag": "/++resource++country-flags/la.gif",\n+    },\n+    "lb": {"name": "Lebanon", "flag": "/++resource++country-flags/lb.gif"},\n+    "lc": {\n+        "name": "Saint Lucia",\n+        "flag": "/++resource++country-flags/lc.gif",\n+    },\n+    "li": {\n+        "name": "Liechtenstein",\n+        "flag": "/++resource++country-flags/li.gif",\n+    },\n+    "lk": {\n+        "name": "Sri Lanka",\n+        "flag": "/++resource++country-flags/lk.gif",\n+    },\n+    "lr": {"name": "Liberia", "flag": "/++resource++country-flags/lr.gif"},\n+    "ls": {"name": "Lesotho", "flag": "/++resource++country-flags/ls.gif"},\n+    "lt": {\n+        "name": "Lithuania",\n+        "flag": "/++resource++country-flags/lt.gif",\n+    },\n+    "lu": {\n+        "name": "Luxembourg",\n+        "flag": "/++resource++country-flags/lu.gif",\n+    },\n+    "lv": {"name": "Latvia", "flag": "/++resource++country-flags/lv.gif"},\n+    "ly": {\n+        "name": "Libyan Arab Jamahiriya",\n+        "flag": "/++resource++country-flags/ly.gif",\n+    },\n+    "ma": {"name": "Morocco", "flag": "/++resource++country-flags/ma.gif"},\n+    "mc": {"name": "Monaco", "flag": "/++resource++country-flags/mc.gif"},\n+    "md": {\n+        "name": "Moldova Republic of",\n+        "flag": "/++resource++country-flags/md.gif",\n+    },\n+    "me": {\n+        "name": "Montenegro",\n+        "flag": "/++resource++country-flags/me.gif",\n+    },\n+    "mf": {\n+        "name": "Saint Martin (French part)",\n+        "flag": "/++resource++country-flags/mf.png",\n+    },\n+    "mg": {\n+        "name": "Madagascar",\n+        "flag": "/++resource++country-flags/mg.gif",\n+    },\n+    "mh": {\n+        "name": "Marshall Islands",\n+        "flag": "/++resource++country-flags/mh.gif",\n+    },\n+    "mk": {\n+        "name": "Macedonia the former Yugoslavian Republic of",\n+        "flag": "/++resource++country-flags/mk.gif",\n+    },\n+    "ml": {"name": "Mali", "flag": "/++resource++country-flags/ml.gif"},\n+    "mm": {"name": "Myanmar", "flag": "/++resource++country-flags/mm.gif"},\n+    "mn": {\n+        "name": "Mongolia",\n+        "flag": "/++resource++country-flags/mn.gif",\n+    },\n+    "mo": {"name": "Macao", "flag": "/++resource++country-flags/mo.gif"},\n+    "mp": {\n+        "name": "Northern Mariana Islands",\n+        "flag": "/++resource++country-flags/mp.gif",\n+    },\n+    "mq": {\n+        "name": "Martinique",\n+        "flag": "/++resource++country-flags/mq.gif",\n+    },\n+    "mr": {\n+        "name": "Mauritania",\n+        "flag": "/++resource++country-flags/mr.gif",\n+    },\n+    "ms": {\n+        "name": "Montserrat",\n+        "flag": "/++resource++country-flags/ms.gif",\n+    },\n+    "mt": {"name": "Malta", "flag": "/++resource++country-flags/mt.gif"},\n+    "mu": {\n+        "name": "Mauritius",\n+        "flag": "/++resource++country-flags/mu.gif",\n+    },\n+    "mv": {\n+        "name": "Maldives",\n+        "flag": "/++resource++country-flags/mv.gif",\n+    },\n+    "mw": {"name": "Malawi", "flag": "/++resource++country-flags/mw.gif"},\n+    "mx": {"name": "Mexico", "flag": "/++resource++country-flags/mx.gif"},\n+    "my": {\n+        "name": "Malaysia",\n+        "flag": "/++resource++country-flags/my.gif",\n+    },\n+    "mz": {\n+        "name": "Mozambique",\n+        "flag": "/++resource++country-flags/mz.gif",\n+    },\n+    "na": {"name": "Namibia", "flag": "/++resource++country-flags/na.gif"},\n+    "nc": {\n+        "name": "New Caledonia",\n+        "flag": "/++resource++country-flags/nc.gif",\n+    },\n+    "ne": {"name": "Niger", "flag": "/++resource++country-flags/ne.gif"},\n+    "nf": {\n+        "name": "Norfolk Island",\n+        "flag": "/++resource++country-flags/nf.gif",\n+    },\n+    "ng": {"name": "Nigeria", "flag": "/++resource++country-flags/ng.gif"},\n+    "ni": {\n+        "name": "Nicaragua",\n+        "flag": "/++resource++country-flags/ni.gif",\n+    },\n+    "nl": {\n+        "name": "Netherlands",\n+        "flag": "/++resource++country-flags/nl.gif",\n+    },\n+    "no": {"name": "Norway", "flag": "/++resource++country-flags/no.gif"},\n+    "np": {"name": "Nepal", "flag": "/++resource++country-flags/np.gif"},\n+    "nr": {"name": "Nauru", "flag": "/++resource++country-flags/nr.gif"},\n+    "nu": {"name": "Niue", "flag": "/++resource++country-flags/nu.gif"},\n+    "nz": {\n+        "name": "New Zealand",\n+        "flag": "/++resource++country-flags/nz.gif",\n+    },\n+    "om": {"name": "Oman", "flag": "/++resource++country-flags/om.gif"},\n+    "pa": {"name": "Panama", "flag": "/++resource++country-flags/pa.gif"},\n+    "pe": {"name": "Peru", "flag": "/++resource++country-flags/pe.gif"},\n+    "pf": {\n+        "name": "French Polynesia",\n+        "flag": "/++resource++country-flags/pf.gif",\n+    },\n+    "pg": {\n+        "name": "Papua New Guinea",\n+        "flag": "/++resource++country-flags/pg.gif",\n+    },\n+    "ph": {\n+        "name": "Philippines",\n+        "flag": "/++resource++country-flags/ph.gif",\n+    },\n+    "pk": {\n+        "name": "Pakistan",\n+        "flag": "/++resource++country-flags/pk.gif",\n+    },\n+    "pl": {"name": "Poland", "flag": "/++resource++country-flags/pl.gif"},\n+    "pm": {\n+        "name": "Saint Pierre and Miquelon",\n+        "flag": "/++resource++country-flags/pm.gif",\n+    },\n+    "pn": {\n+        "name": "Pitcairn",\n+        "flag": "/++resource++country-flags/pn.gif",\n+    },\n+    "pr": {\n+        "name": "Puerto Rico",\n+        "flag": "/++resource++country-flags/pr.gif",\n+    },\n+    "ps": {\n+        "name": "Palestinian Territory occupied",\n+        "flag": "/++resource++country-flags/ps.gif",\n+    },\n+    "pt": {\n+        "name": "Portugal",\n+        "flag": "/++resource++country-flags/pt.gif",\n+    },\n+    "pw": {"name": "Palau", "flag": "/++resource++country-flags/pw.gif"},\n+    "py": {\n+        "name": "Paraguay",\n+        "flag": "/++resource++country-flags/py.gif",\n+    },\n+    "qa": {"name": "Qatar", "flag": "/++resource++country-flags/qa.gif"},\n+    "re": {"name": "Reunion", "flag": "/++resource++country-flags/re.gif"},\n+    "ro": {"name": "Romania", "flag": "/++resource++country-flags/ro.gif"},\n+    "rs": {"name": "Serbia", "flag": "/++resource++country-flags/rs.gif"},\n+    "ru": {\n+        "name": "Russian Federation",\n+        "flag": "/++resource++country-flags/ru.gif",\n+    },\n+    "rw": {"name": "Rwanda", "flag": "/++resource++country-flags/rw.gif"},\n+    "sa": {\n+        "name": "Saudi Arabia",\n+        "flag": "/++resource++country-flags/sa.gif",\n+    },\n+    "sb": {\n+        "name": "Solomon Islands",\n+        "flag": "/++resource++country-flags/sb.gif",\n+    },\n+    "sc": {\n+        "name": "Seychelles",\n+        "flag": "/++resource++country-flags/sc.gif",\n+    },\n+    "sd": {"name": "Sudan", "flag": "/++resource++country-flags/sd.gif"},\n+    "se": {"name": "Sweden", "flag": "/++resource++country-flags/se.gif"},\n+    "sg": {\n+        "name": "Singapore",\n+        "flag": "/++resource++country-flags/sg.gif",\n+    },\n+    "sh": {\n+        "name": "Saint Helena",\n+        "flag": "/++resource++country-flags/sh.gif",\n+    },\n+    "si": {\n+        "name": "Slovenia",\n+        "flag": "/++resource++country-flags/si.gif",\n+    },\n+    "sj": {\n+        "name": "Svalbard and Jan Mayen",\n+        "flag": "/++resource++country-flags/sj.gif",\n+    },\n+    "sk": {\n+        "name": "Slovakia",\n+        "flag": "/++resource++country-flags/sk.gif",\n+    },\n+    "sl": {\n+        "name": "Sierra Leone",\n+        "flag": "/++resource++country-flags/sl.gif",\n+    },\n+    "sm": {\n+        "name": "San Marino",\n+        "flag": "/++resource++country-flags/sm.gif",\n+    },\n+    "sn": {"name": "Senegal", "flag": "/++resource++country-flags/sn.gif"},\n+    "so": {"name": "Somalia", "flag": "/++resource++country-flags/so.gif"},\n+    "sr": {\n+        "name": "Suriname",\n+        "flag": "/++resource++country-flags/sr.gif",\n+    },\n+    "ss": {\n+        "name": "South Sudan",\n+        "flag": "/++resource++country-flags/ss.png",\n+    },\n+    "st": {\n+        "name": "Sao Tome and Principe",\n+        "flag": "/++resource++country-flags/st.gif",\n+    },\n+    "sv": {\n+        "name": "El Salvador",\n+        "flag": "/++resource++country-flags/sv.gif",\n+    },\n+    "sx": {\n+        "name": "Sint Maarten (Dutch part)",\n+        "flag": "/++resource++country-flags/sx.png",\n+    },\n+    "sy": {\n+        "name": "Syrian Arab Republic",\n+        "flag": "/++resource++country-flags/sy.gif",\n+    },\n+    "sz": {\n+        "name": "Swaziland",\n+        "flag": "/++resource++country-flags/sz.gif",\n+    },\n+    "tc": {\n+        "name": "Turks and Caicos Islands",\n+        "flag": "/++resource++country-flags/tc.gif",\n+    },\n+    "td": {"name": "Chad", "flag": "/++resource++country-flags/td.gif"},\n+    "tf": {\n+        "name": "French Southern Territories",\n+        "flag": "/++resource++country-flags/tf.gif",\n+    },\n+    "tg": {"name": "Togo", "flag": "/++resource++country-flags/tg.gif"},\n+    "th": {\n+        "name": "Thailand",\n+        "flag": "/++resource++country-flags/th.gif",\n+    },\n+    "tj": {\n+        "name": "Tajikistan",\n+        "flag": "/++resource++country-flags/tj.gif",\n+    },\n+    "tk": {"name": "Tokelau", "flag": "/++resource++country-flags/tk.gif"},\n+    "tl": {\n+        "name": "Timor-Leste",\n+        "flag": "/++resource++country-flags/tl.gif",\n+    },\n+    "tm": {\n+        "name": "Turkmenistan",\n+        "flag": "/++resource++country-flags/tm.gif",\n+    },\n+    "tn": {"name": "Tunisia", "flag": "/++resource++country-flags/tn.gif"},\n+    "to": {"name": "Tonga", "flag": "/++resource++country-flags/to.gif"},\n+    "tr": {"name": "Turkey", "flag": "/++resource++country-flags/tr.gif"},\n+    "tt": {\n+        "name": "Trinidad and Tobago",\n+        "flag": "/++resource++country-flags/tt.gif",\n+    },\n+    "tv": {"name": "Tuvalu", "flag": "/++resource++country-flags/tv.gif"},\n+    "tw": {"name": "Taiwan", "flag": "/++resource++country-flags/tw.gif"},\n+    "tz": {\n+        "name": "Tanzania United Republic of",\n+        "flag": "/++resource++country-flags/tz.gif",\n+    },\n+    "ua": {"name": "Ukraine", "flag": "/++resource++country-flags/ua.gif"},\n+    "ug": {"name": "Uganda", "flag": "/++resource++country-flags/ug.gif"},\n+    "um": {\n+        "name": "United States Minor Outlying Islands",\n+        "flag": "/++resource++country-flags/um.gif",\n+    },\n+    "us": {\n+        "name": "United States",\n+        "flag": "/++resource++country-flags/us.gif",\n+    },\n+    "uy": {"name": "Uruguay", "flag": "/++resource++country-flags/uy.gif"},\n+    "uz": {\n+        "name": "Uzbekistan",\n+        "flag": "/++resource++country-flags/uz.gif",\n+    },\n+    "va": {\n+        "name": "Holy See (Vatican City State)",\n+        "flag": "/++resource++country-flags/va.gif",\n+    },\n+    "vc": {\n+        "name": "Saint Vincent and the Grenadines",\n+        "flag": "/++resource++country-flags/vc.gif",\n+    },\n+    "ve": {\n+        "name": "Venezuela",\n+        "flag": "/++resource++country-flags/ve.gif",\n+    },\n+    "vg": {\n+        "name": "Virgin Islands British",\n+        "flag": "/++resource++country-flags/vg.gif",\n+    },\n+    "vi": {\n+        "name": "Virgin Islands U.S.",\n+        "flag": "/++resource++country-flags/vi.gif",\n+    },\n+    "vn": {\n+        "name": "Viet Nam",\n+        "flag": "/++resource++country-flags/vn.gif",\n+    },\n+    "vu": {"name": "Vanuatu", "flag": "/++resource++country-flags/vu.gif"},\n+    "wf": {\n+        "name": "Wallis and Futuna",\n+        "flag": "/++resource++country-flags/wf.gif",\n+    },\n+    "ws": {"name": "Samoa", "flag": "/++resource++country-flags/ws.gif"},\n+    "ye": {"name": "Yemen", "flag": "/++resource++country-flags/ye.gif"},\n+    "yt": {"name": "Mayotte", "flag": "/++resource++country-flags/yt.gif"},\n+    "za": {\n+        "name": "South Africa",\n+        "flag": "/++resource++country-flags/za.gif",\n+    },\n+    "zm": {"name": "Zambia", "flag": "/++resource++country-flags/zm.gif"},\n+    "zw": {\n+        "name": "Zimbabwe",\n+        "flag": "/++resource++country-flags/zw.gif",\n+    },\n+    "xk": {"name": "Kosovo", "flag": "/++resource++country-flags/xk.gif"},\n }\n \n # convert the utf-8 encoded values to unicode\n for code in _countrylist:\n     value = _countrylist[code]\n-    if u\'name\' in value:\n-        if six.PY3:\n-            value[u\'name\'] = value[u\'name\']\n-        else:\n-            value[u\'name\'] = unicode(value[u\'name\'], \'utf-8\')\n+    if "name" in value:\n+        value["name"] = value["name"]\ndiff --git a/plone/i18n/locales/interfaces.py b/plone/i18n/locales/interfaces.py\nindex f1f58b2..e827328 100644\n--- a/plone/i18n/locales/interfaces.py\n+++ b/plone/i18n/locales/interfaces.py\n@@ -1,7 +1,4 @@\n-# -*- coding: utf-8 -*-\n-from zope.i18n.interfaces import (\n-    ILanguageAvailability as IBaseLanguageAvailability,\n-)\n+from zope.i18n.interfaces import ILanguageAvailability as IBaseLanguageAvailability\n from zope.interface import Interface\n \n \n@@ -9,44 +6,36 @@ class ICcTLDInformation(Interface):\n     """A list of country code top level domains their relevant languages."""\n \n     def getAvailableTLDs():\n-        """Return a sequence of country code top level domains.\n-        """\n+        """Return a sequence of country code top level domains."""\n \n     def getTLDs():\n-        """Return a sequence of ccTLDs and their languages.\n-        """\n+        """Return a sequence of ccTLDs and their languages."""\n \n     def getLanguagesForTLD(tld):\n-        """Return the relevant languages for a top level domain.\n-        """\n+        """Return the relevant languages for a top level domain."""\n \n \n class ICountryAvailability(Interface):\n     """A list of available coutries."""\n \n     def getAvailableCountries():\n-        """Return a sequence of country tags for available countries.\n-        """\n+        """Return a sequence of country tags for available countries."""\n \n     def getCountries():\n-        """Return a sequence of Country objects for available countries.\n-        """\n+        """Return a sequence of Country objects for available countries."""\n \n     def getCountryListing():\n-        """Return a sequence of country code and country name tuples.\n-        """\n+        """Return a sequence of country code and country name tuples."""\n \n \n class ILanguageAvailability(IBaseLanguageAvailability):\n     """A list of available languages."""\n \n     def getLanguages(combined=False):\n-        """Return a sequence of Language objects for available languages.\n-        """\n+        """Return a sequence of Language objects for available languages."""\n \n     def getLanguageListing(combined=False):\n-        """Return a sequence of language code and language name tuples.\n-        """\n+        """Return a sequence of language code and language name tuples."""\n \n \n class IContentLanguageAvailability(ILanguageAvailability):\n@@ -61,13 +50,11 @@ class IModifiableLanguageAvailability(ILanguageAvailability):\n     """A modifiable list of available languages."""\n \n     def setAvailableLanguages(languages, combined=False):\n-        """Set a list of available language tags.\n-        """\n+        """Set a list of available language tags."""\n \n \n class IModifiableCountryAvailability(ICountryAvailability):\n     """A modifiable list of available countries."""\n \n     def setAvailableCountries(countries):\n-        """Set a list of available country tags.\n-        """\n+        """Set a list of available country tags."""\ndiff --git a/plone/i18n/locales/languages.py b/plone/i18n/locales/languages.py\nindex 0ffec69..ea0b7ec 100644\n--- a/plone/i18n/locales/languages.py\n+++ b/plone/i18n/locales/languages.py\n@@ -1,46 +1,38 @@\n-# -*- coding: UTF-8 -*-\n from plone.i18n.locales.interfaces import IContentLanguageAvailability\n from plone.i18n.locales.interfaces import ILanguageAvailability\n from plone.i18n.locales.interfaces import IMetadataLanguageAvailability\n from zope.interface import implementer\n \n-import six\n-\n \n @implementer(ILanguageAvailability)\n-class LanguageAvailability(object):\n-    """A list of available languages.\n-    """\n+class LanguageAvailability:\n+    """A list of available languages."""\n \n     def getAvailableLanguages(self, combined=False):\n-        """Return a sequence of language tags for available languages.\n-        """\n+        """Return a sequence of language tags for available languages."""\n         languages = list(_languagelist.keys())\n         if combined:\n             languages.extend(list(_combinedlanguagelist.keys()))\n         return languages\n \n     def getLanguages(self, combined=False):\n-        """Return a sequence of Language objects for available languages.\n-        """\n+        """Return a sequence of Language objects for available languages."""\n         languages = _languagelist.copy()\n         if combined:\n             languages.update(_combinedlanguagelist.copy())\n         return languages\n \n     def getLanguageListing(self, combined=False):\n-        """Return a sequence of language code and language name tuples.\n-        """\n+        """Return a sequence of language code and language name tuples."""\n         languages = _languagelist.copy()\n         if combined:\n             languages.update(_combinedlanguagelist.copy())\n-        return [(code, languages[code][u\'name\']) for code in languages]\n+        return [(code, languages[code]["name"]) for code in languages]\n \n \n @implementer(IContentLanguageAvailability)\n class ContentLanguageAvailability(LanguageAvailability):\n-    """A list of available content languages.\n-    """\n+    """A list of available content languages."""\n \n \n contentlanguages = ContentLanguageAvailability()\n@@ -48,8 +40,7 @@ class ContentLanguageAvailability(LanguageAvailability):\n \n @implementer(IMetadataLanguageAvailability)\n class MetadataLanguageAvailability(LanguageAvailability):\n-    """A list of available metadata languages.\n-    """\n+    """A list of available metadata languages."""\n \n \n metadatalanguages = MetadataLanguageAvailability()\n@@ -66,1446 +57,1434 @@ class MetadataLanguageAvailability(LanguageAvailability):\n # even tough these have later been deprecated from the standard.\n \n _languagelist = {\n-    u\'aa\': {\n-        u\'native\': \'\xd0\xbc\xd0\xb0\xd0\xb3I\xd0\xb0\xd1\x80\xd1\x83\xd0\xbb \xd0\xbc\xd0\xb0\xd1\x86I\',\n-        u\'name\': \'Afar\',\n-        u\'flag\': u\'/++resource++country-flags/dj.gif\',\n-    },\n-    u\'ab\': {\n-        u\'native\': \'\xd0\xb1\xd1\x8b\xd0\xb7\xd1\x88\xd3\x99\xd0\xb0\',\n-        u\'name\': \'Abkhazian\',\n-        u\'flag\': u\'/++resource++country-flags/ge.gif\',\n-    },\n-    u\'ae\': {u\'native\': \'avesta\', u\'name\': \'Avestan\'},\n-    u\'af\': {u\'native\': \'Afrikaans\', u\'name\': \'Afrikaans\'},\n-    u\'ak\': {u\'native\': \'Akan\', u\'name\': \'Akan\'},\n-    u\'am\': {u\'native\': \'\xe1\x8a\xa0\xe1\x88\x9b\xe1\x88\xad\xe1\x8a\x9b\', u\'name\': \'Amharic\'},\n-    u\'an\': {u\'native\': \'aragon\xc3\xa9s\', u\'name\': \'Aragonese\'},\n-    u\'ar\': {\n-        u\'native\': \'\xd8\xa7\xd9\x84\xd8\xb9\xd8\xb1\xd8\xa8\xd9\x8a\xd8\xa9\',\n-        u\'name\': \'Arabic\',\n-        u\'flag\': \'/++resource++language-flags/ar.gif\',\n-    },\n-    u\'as\': {u\'native\': \'\xe0\xa6\x85\xe0\xa6\xb8\xe0\xa6\xae\xe0\xa6\xbf\xe0\xa7\x9f\xe0\xa6\xbe\', u\'name\': \'Assamese\'},\n-    u\'ay\': {u\'native\': \'Aymara\', u\'name\': \'Aymara\'},\n-    u\'az\': {\n-        u\'native\': \'Az\xc9\x99ri T\xc3\xbcrk\xc3\xa7\xc9\x99si\',\n-        u\'name\': \'Azerbaijani\',\n-        u\'flag\': u\'/++resource++country-flags/az.gif\',\n-    },\n-    u\'ba\': {u\'native\': \'Bashkir\', u\'name\': \'Bashkir\'},\n-    u\'be\': {\n-        u\'native\': \'\xd0\x91\xd0\xb5\xd0\xbb\xd0\xb0\xd1\x80\xd1\x83\xd1\x81\xd0\xba\xd1\x96\',\n-        u\'name\': \'Belarussian\',\n-        u\'flag\': u\'/++resource++country-flags/by.gif\',\n-    },\n-    u\'bg\': {\n-        u\'native\': \'\xd0\x91\xd1\x8a\xd0\xbb\xd0\xb3\xd0\xb0\xd1\x80\xd1\x81\xd0\xba\xd0\xb8\',\n-        u\'name\': \'Bulgarian\',\n-        u\'flag\': u\'/++resource++country-flags/bg.gif\',\n-    },\n-    u\'bh\': {u\'native\': \'Bihari\', u\'name\': \'Bihari\'},\n-    u\'bi\': {u\'native\': \'Bislama\', u\'name\': \'Bislama\'},\n-    u\'bm\': {u\'native\': \'bamanankan\', u\'name\': \'Bambara\'},\n-    u\'bn\': {\n-        u\'native\': \'\xe0\xa6\xac\xe0\xa6\xbe\xe0\xa6\x82\xe0\xa6\xb2\xe0\xa6\xbe\',\n-        u\'name\': \'Bengali\',\n-        u\'flag\': u\'/++resource++country-flags/bd.gif\',\n-    },\n-    u\'bo\': {u\'native\': \'\xe0\xbd\x96\xe0\xbd\xbc\xe0\xbd\x91\xe0\xbc\x8b\xe0\xbd\xa6\xe0\xbe\x90\xe0\xbd\x91\xe0\xbc\x8b\', u\'name\': \'Tibetan\'},\n-    u\'br\': {u\'native\': \'brezhoneg\', u\'name\': \'Breton\'},\n-    u\'bs\': {\n-        u\'native\': \'Bosanski\',\n-        u\'name\': \'Bosnian\',\n-        u\'flag\': u\'/++resource++country-flags/ba.gif\',\n-    },\n-    u\'ca\': {\n-        u\'native\': \'Catal\xc3\xa0\',\n-        u\'name\': \'Catalan\',\n-        u\'flag\': u\'/++resource++language-flags/ca.gif\',\n-    },\n-    u\'ce\': {u\'native\': \'\xd0\xbd\xd0\xbe\xd1\x85\xd1\x87\xd0\xb8\xd0\xb9\xd0\xbd \xd0\xbc\xd0\xbe\xd1\x82\xd1\x82\', u\'name\': \'Chechen\'},\n-    u\'ch\': {u\'native\': \'Chamoru\', u\'name\': \'Chamorro\'},\n-    u\'co\': {u\'native\': \'Corsu\', u\'name\': \'Corsican\'},\n-    u\'cr\': {u\'native\': \'\xe1\x93\x80\xe1\x90\xa6\xe1\x90\x83\xe1\x94\xad\xe1\x90\x8d\xe1\x90\x8f\xe1\x90\xa3\', u\'name\': \'Cree\'},\n-    u\'cs\': {\n-        u\'native\': \'\xc4\x8ce\xc5\xa1tina\',\n-        u\'name\': \'Czech\',\n-        u\'flag\': u\'/++resource++country-flags/cz.gif\',\n-    },\n-    u\'cu\': {u\'native\': \'\xd1\xa9\xd0\xb7\xd1\x8b\xd0\xba\xd1\x8a \xd1\x81\xd0\xbb\xd0\xbe\xd0\xb2\xd1\xa3\xd0\xbd\xd1\x8c\xd1\x81\xd0\xba\xd1\x8a\', u\'name\': \'Old Church Slavonic\'},\n-    u\'cv\': {u\'native\': \'\xd1\x87\xd3\x91\xd0\xb2\xd0\xb0\xd1\x88 \xd1\x87\xd3\x97\xd0\xbb\xd1\x85\xd0\xb8\', u\'name\': \'Chuvash\'},\n-    u\'cy\': {\n-        u\'native\': \'Cymraeg\',\n-        u\'name\': \'Welsh\',\n-        u\'flag\': \'/++resource++language-flags/cy.gif\',\n-    },\n-    u\'da\': {\n-        u\'native\': \'Dansk\',\n-        u\'name\': \'Danish\',\n-        u\'flag\': u\'/++resource++country-flags/dk.gif\',\n-    },\n-    u\'de\': {\n-        u\'native\': \'Deutsch\',\n-        u\'name\': \'German\',\n-        u\'flag\': u\'/++resource++country-flags/de.gif\',\n-    },\n-    u\'dv\': {u\'native\': \'Divehi\', u\'name\': \'Maldivian\'},\n-    u\'dz\': {u\'native\': \'Bhutani\', u\'name\': \'Indian Bhutani\'},\n-    u\'ee\': {u\'native\': \'E\xca\x8begbe\', u\'name\': \'Ewe\'},\n-    u\'el\': {\n-        u\'native\': \'\xce\x95\xce\xbb\xce\xbb\xce\xb7\xce\xbd\xce\xb9\xce\xba\xce\xac\',\n-        u\'name\': \'Greek\',\n-        u\'flag\': u\'/++resource++country-flags/gr.gif\',\n-    },\n-    u\'en\': {\n-        u\'native\': \'English\',\n-        u\'name\': \'English\',\n-        u\'flag\': u\'/++resource++country-flags/gb.gif\',\n-    },\n-    u\'eo\': {\n-        u\'native\': \'Esperanto\',\n-        u\'name\': \'Esperanto\',\n-        u\'flag\': \'/++resource++language-flags/eo.gif\',\n-    },\n-    u\'es\': {\n-        u\'native\': \'Espa\xc3\xb1ol\',\n-        u\'name\': \'Spanish\',\n-        u\'flag\': u\'/++resource++country-flags/es.gif\',\n-    },\n-    u\'et\': {\n-        u\'native\': \'Eesti\',\n-        u\'name\': \'Estonian\',\n-        u\'flag\': u\'/++resource++country-flags/ee.gif\',\n-    },\n-    u\'eu\': {\n-        u\'native\': \'Euskara\',\n-        u\'name\': \'Basque\',\n-        u\'flag\': \'/++resource++language-flags/eu.gif\',\n-    },\n-    u\'fa\': {u\'native\': \'\xd9\x81\xd8\xa7\xd8\xb1\xd8\xb3\xdb\x8c\', u\'name\': \'Persian\'},\n-    u\'ff\': {u\'native\': \'Fulfulde\', u\'name\': \'Fula\'},\n-    u\'fi\': {\n-        u\'native\': \'Suomi\',\n-        u\'name\': \'Finnish\',\n-        u\'flag\': u\'/++resource++country-flags/fi.gif\',\n-    },\n-    u\'fj\': {\n-        u\'native\': \'Fiji\',\n-        u\'name\': \'Fiji\',\n-        u\'flag\': u\'/++resource++country-flags/fj.gif\',\n-    },\n-    u\'fo\': {\n-        u\'native\': \'F\xc3\xb8royska\',\n-        u\'name\': \'Faroese\',\n-        u\'flag\': u\'/++resource++country-flags/fo.gif\',\n-    },\n-    u\'fr\': {\n-        u\'native\': \'Fran\xc3\xa7ais\',\n-        u\'name\': \'French\',\n-        u\'flag\': u\'/++resource++country-flags/fr.gif\',\n-    },\n-    u\'fy\': {u\'native\': \'Frysk\', u\'name\': \'Frisian\'},\n-    u\'ga\': {u\'native\': \'Gaeilge\', u\'name\': \'Irish Gaelic\'},\n-    u\'gd\': {u\'native\': \'G\xc3\xa0idhlig\', u\'name\': \'Scottish Gaelic\'},\n-    u\'gl\': {u\'native\': \'Galego\', u\'name\': \'Galician\'},\n-    u\'gn\': {u\'native\': \'Guarani\', u\'name\': \'Guarani\'},\n-    u\'gu\': {u\'native\': \'\xe0\xaa\x97\xe0\xab\x81\xe0\xaa\x9c\xe0\xaa\xb0\xe0\xaa\xbe\xe0\xaa\xa4\xe0\xab\x80\', u\'name\': \'Gujarati\'},\n-    u\'gv\': {u\'native\': \'Gaelg\', u\'name\': \'Manx Gaelic\'},\n-    u\'ha\': {u\'native\': \'\xd9\x87\xd9\x8e\xd9\x88\xd9\x8f\xd8\xb3\', u\'name\': \'Hausa\'},\n-    u\'he\': {\n-        u\'native\': \'\xd7\xa2\xd7\x91\xd7\xa8\xd7\x99\xd7\xaa\',\n-        u\'name\': \'Hebrew\',\n-        u\'flag\': u\'/++resource++country-flags/il.gif\',\n-    },\n-    u\'hi\': {\n-        u\'native\': \'\xe0\xa4\xb9\xe0\xa4\xbf\xe0\xa4\x82\xe0\xa4\xa6\xe0\xa5\x80\',\n-        u\'name\': \'Hindi\',\n-        u\'flag\': u\'/++resource++country-flags/in.gif\',\n-    },\n-    u\'ho\': {u\'native\': \'Hiri Motu\', u\'name\': \'Hiri Motu\'},\n-    u\'hr\': {\n-        u\'native\': \'Hrvatski\',\n-        u\'name\': \'Croatian\',\n-        u\'flag\': u\'/++resource++country-flags/hr.gif\',\n-    },\n-    u\'ht\': {u\'native\': \'Krey\xc3\xb2l ayisyen\', u\'name\': \'Haitian\'},\n-    u\'hu\': {\n-        u\'native\': \'Magyar\',\n-        u\'name\': \'Hungarian\',\n-        u\'flag\': u\'/++resource++country-flags/hu.gif\',\n-    },\n-    u\'hy\': {\n-        u\'native\': \'\xd5\x80\xd5\xa1\xd5\xb5\xd5\xa5\xd6\x80\xd5\xa7\xd5\xb6\',\n-        u\'name\': \'Armenian\',\n-        u\'flag\': u\'/++resource++country-flags/am.gif\',\n-    },\n-    u\'hz\': {u\'native\': \'Otjiherero\', u\'name\': \'Herero\'},\n-    u\'ia\': {u\'native\': \'Interlingua\', u\'name\': \'Interlingua\'},\n-    u\'id\': {\n-        u\'native\': \'Bahasa Indonesia\',\n-        u\'name\': \'Indonesian\',\n-        u\'flag\': u\'/++resource++country-flags/id.gif\',\n-    },\n-    u\'ie\': {u\'native\': \'Interlingue\', u\'name\': \'Interlingue\'},\n-    u\'ig\': {u\'native\': \'As\xe1\xbb\xa5s\xe1\xbb\xa5 Igbo\', u\'name\': \'Igbo\'},\n-    u\'ii\': {u\'native\': \'Nuosu\', u\'name\': \'Nuosu\'},\n-    u\'ik\': {u\'native\': \'I\xc3\xb1upiaq\', u\'name\': \'Inupiak\'},\n-    u\'io\': {u\'native\': \'Ido\', u\'name\': \'Ido\'},\n-    u\'is\': {\n-        u\'native\': \'\xc3\x8dslenska\',\n-        u\'name\': \'Icelandic\',\n-        u\'flag\': u\'/++resource++country-flags/is.gif\',\n-    },\n-    u\'it\': {\n-        u\'native\': \'Italiano\',\n-        u\'name\': \'Italian\',\n-        u\'flag\': u\'/++resource++country-flags/it.gif\',\n-    },\n-    u\'iu\': {u\'native\': \'\xe1\x90\x83\xe1\x93\x84\xe1\x92\x83\xe1\x91\x8e\xe1\x91\x90\xe1\x91\xa6\', u\'name\': \'Inuktitut\'},\n-    u\'ja\': {\n-        u\'native\': \'\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e\',\n-        u\'name\': \'Japanese\',\n-        u\'flag\': u\'/++resource++country-flags/jp.gif\',\n-    },\n-    u\'jv\': {u\'native\': \'Javanese\', u\'name\': \'basa Jawa\'},\n-    u\'ka\': {\n-        u\'native\': \'\xe1\x83\xa5\xe1\x83\x90\xe1\x83\xa0\xe1\x83\x97\xe1\x83\xa3\xe1\x83\x9a\xe1\x83\x98\',\n-        u\'name\': \'Georgian\',\n-        u\'flag\': u\'/++resource++country-flags/ge.gif\',\n-    },\n-    u\'kg\': {u\'native\': \'KiKongo\', u\'name\': \'Kongo\'},\n-    u\'ki\': {u\'native\': \'G\xc4\xa9k\xc5\xa9y\xc5\xa9\', u\'name\': \'Kikuyu\'},\n-    u\'kj\': {u\'native\': \'Kuanyama\', u\'name\': \'Kwanyama\'},\n-    u\'kk\': {\n-        u\'native\': \'\xef\xbb\x97\xef\xba\x8e\xef\xba\xaf\xef\xba\x8d\xef\xbb\x97\xef\xba\xb8\xef\xba\x8e\',\n-        u\'name\': \'Kazakh\',\n-        u\'flag\': u\'/++resource++country-flags/kz.gif\',\n-    },\n-    u\'kl\': {\n-        u\'native\': \'Greenlandic\',\n-        u\'name\': \'Greenlandic\',\n-        u\'flag\': u\'/++resource++country-flags/gl.gif\',\n-    },\n-    u\'km\': {\n-        u\'native\': \'\xe1\x9e\x81\xe1\x9f\x92\xe1\x9e\x98\xe1\x9f\x82\xe1\x9e\x9a\',\n-        u\'name\': \'Cambodian/Khmer\',\n-        u\'flag\': u\'/++resource++country-flags/kh.gif\',\n-    },\n-    u\'kn\': {\n-        u\'native\': \'\xe0\xb2\x95\xe0\xb2\xa8\xe0\xb3\x8d\xe0\xb2\xa8\xe0\xb2\xa1\',\n-        u\'name\': \'Kannada\',\n-        u\'flag\': u\'/++resource++country-flags/in.gif\',\n-    },\n-    u\'ko\': {\n-        u\'native\': \'\xed\x95\x9c\xea\xb5\xad\xec\x96\xb4\',\n-        u\'name\': \'Korean\',\n-        u\'flag\': u\'/++resource++country-flags/kr.gif\',\n-    },\n-    u\'kr\': {u\'native\': \'Kanuri\', u\'name\': \'Kanuri\'},\n-    u\'ks\': {\n-        u\'native\': \'\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xbd\xe0\xa4\xb6\xe0\xa5\x81\xe0\xa4\xb0\',\n-        u\'name\': \'Kashmiri\',\n-        u\'flag\': u\'/++resource++country-flags/in.gif\',\n-    },\n-    u\'ku\': {u\'native\': \'Kurd\xc3\xad\', u\'name\': \'Kurdish\'},\n-    u\'kv\': {u\'native\': \'\xd0\xba\xd0\xbe\xd0\xbc\xd0\xb8 \xd0\xba\xd1\x8b\xd0\xb2\', u\'name\': \'Komi\'},\n-    u\'kw\': {u\'native\': \'Kernewek\', u\'name\': \'Cornish\'},\n-    u\'ky\': {u\'native\': \'\xd0\x9a\xd1\x8b\xd1\x80\xd0\xb3\xd1\x8b\xd0\xb7\', u\'name\': \'Kirghiz\'},\n-    u\'la\': {\n-        u\'native\': \'Latin\',\n-        u\'name\': \'Latin\',\n-        u\'flag\': u\'/++resource++country-flags/va.gif\',\n-    },\n-    u\'lb\': {\n-        u\'native\': \'L\xc3\xabtzebuergesch\',\n-        u\'name\': \'Luxemburgish\',\n-        u\'flag\': u\'/++resource++country-flags/lu.gif\',\n-    },\n-    u\'lg\': {u\'native\': \'Luganda\', u\'name\': \'Ganda\'},\n-    u\'li\': {u\'native\': \'Limburgs\', u\'name\': \'Limburgish\'},\n-    u\'ln\': {u\'native\': \'Lingala\', u\'name\': \'Lingala\'},\n-    u\'lo\': {\n-        u\'native\': \'\xe0\xba\x9e\xe0\xba\xb2\xe0\xba\xaa\xe0\xba\xb2\xe0\xba\xa5\xe0\xba\xb2\xe0\xba\xa7\',\n-        u\'name\': \'Laotian\',\n-        u\'flag\': u\'/++resource++country-flags/la.gif\',\n-    },\n-    u\'lt\': {\n-        u\'native\': \'Lietuvi\xc5\xb3\',\n-        u\'name\': \'Lithuanian\',\n-        u\'flag\': u\'/++resource++country-flags/lt.gif\',\n-    },\n-    u\'lu\': {u\'native\': \'Tshiluba\', u\'name\': \'Luba-Katanga\'},\n-    u\'lv\': {\n-        u\'native\': \'Latvie\xc5\xa1u\',\n-        u\'name\': \'Latvian\',\n-        u\'flag\': u\'/++resource++country-flags/lv.gif\',\n-    },\n-    u\'mg\': {\n-        u\'native\': \'Malagasy\',\n-        u\'name\': \'Madagascarian\',\n-        u\'flag\': u\'/++resource++country-flags/mg.gif\',\n-    },\n-    u\'mh\': {u\'native\': \'Kajin M\xcc\xa7aje\xc4\xbc\', u\'name\': \'Marshallese\'},\n-    u\'mi\': {u\'native\': \'Maori\', u\'name\': \'Maori\'},\n-    u\'mk\': {\n-        u\'native\': \'\xd0\x9c\xd0\xb0\xd0\xba\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8\',\n-        u\'name\': \'Macedonian\',\n-        u\'flag\': u\'/++resource++country-flags/mk.gif\',\n-    },\n-    u\'ml\': {u\'native\': \'\xe0\xb4\xae\xe0\xb4\xb2\xe0\xb4\xaf\xe0\xb4\xbe\xe0\xb4\xb3\xe0\xb4\x82\', u\'name\': \'Malayalam\'},\n-    u\'mn\': {\n-        u\'native\': \'\xd0\x9c\xd0\xbe\xd0\xbd\xd0\xb3\xd0\xbe\xd0\xbb\',\n-        u\'name\': \'Mongolian\',\n-        u\'flag\': u\'/++resource++country-flags/mn.gif\',\n-    },\n-    u\'mo\': {\n-        u\'native\': \'Moldavian\',\n-        u\'name\': \'Moldavian\',\n-        u\'flag\': u\'/++resource++country-flags/md.gif\',\n-    },\n-    u\'mr\': {u\'native\': \'\xe0\xa4\xae\xe0\xa4\xb0\xe0\xa4\xbe\xe0\xa4\xa0\xe0\xa5\x80\', u\'name\': \'Marathi\'},\n-    u\'ms\': {u\'native\': \'Bahasa Melayu\', u\'name\': \'Malay\'},\n-    u\'mt\': {\n-        u\'native\': \'Malti\',\n-        u\'name\': \'Maltese\',\n-        u\'flag\': u\'/++resource++country-flags/mt.gif\',\n-    },\n-    u\'my\': {u\'native\': \'Burmese\', u\'name\': \'Burmese\'},\n-    u\'na\': {\n-        u\'native\': \'Nauru\',\n-        u\'name\': \'Nauruan\',\n-        u\'flag\': u\'/++resource++country-flags/nr.gif\',\n-    },\n-    u\'nb\': {u\'native\': \'Norsk bokm\xc3\xa5l\', u\'name\': \'Norwegian Bokm\xc3\xa5l\'},\n-    u\'nd\': {u\'native\': \'Ndebele (North)\', u\'name\': \'Ndebele (North)\'},\n-    u\'ne\': {u\'native\': \'\xe0\xa4\xa8\xe0\xa5\x87\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb2\xe0\xa5\x80\', u\'name\': \'Nepali\'},\n-    u\'ng\': {u\'native\': \'Owambo\', u\'name\': \'Ndonga\'},\n-    u\'nl\': {\n-        u\'native\': \'Nederlands\',\n-        u\'name\': \'Dutch\',\n-        u\'flag\': u\'/++resource++country-flags/nl.gif\',\n-    },\n-    u\'nn\': {\n-        u\'native\': \'Nynorsk\',\n-        u\'name\': \'Nynorsk\',\n-        u\'flag\': u\'/++resource++country-flags/no.gif\',\n-    },\n-    u\'no\': {\n-        u\'native\': \'Norsk\',\n-        u\'name\': \'Norwegian\',\n-        u\'flag\': u\'/++resource++country-flags/no.gif\',\n-    },\n-    u\'nr\': {u\'native\': \'IsiNdebele\', u\'name\': \'Ndebele (South)\'},\n-    u\'nv\': {u\'native\': \'Din\xc3\xa9 bizaad\', u\'name\': \'Navajo\'},\n-    u\'ny\': {u\'native\': \'chiChe\xc5\xb5a\', u\'name\': \'Chichewa\'},\n-    u\'oc\': {u\'native\': \'Occitan\', u\'name\': \'Occitan\'},\n-    u\'oj\': {u\'native\': \'\xe1\x90\x8a\xe1\x93\x82\xe1\x94\x91\xe1\x93\x88\xe1\x90\xaf\xe1\x92\xa7\xe1\x90\x8e\xe1\x93\x90\', u\'name\': \'Ojibwe\'},\n-    u\'om\': {u\'native\': \'Oromo\', u\'name\': \'Oromo\'},\n-    u\'or\': {u\'native\': \'\xe0\xac\x93\xe0\xad\x9c\xe0\xac\xbf\xe0\xac\x86\', u\'name\': \'Oriya\'},\n-    u\'os\': {u\'native\': \'\xd0\xb8\xd1\x80\xd0\xbe\xd0\xbd \xc3\xa6\xd0\xb2\xd0\xb7\xd0\xb0\xd0\xb3\', u\'name\': \'Ossetian\'},\n-    u\'pa\': {u\'native\': \'\xe0\xa8\xaa\xe0\xa9\xb0\xe0\xa8\x9c\xe0\xa8\xbe\xe0\xa8\xac\xe0\xa9\x80\', u\'name\': \'Punjabi\'},\n-    u\'pi\': {u\'native\': \'\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb4\xe0\xa4\xbf\', u\'name\': \'P\xc4\x81li\'},\n-    u\'pl\': {\n-        u\'native\': \'Polski\',\n-        u\'name\': \'Polish\',\n-        u\'flag\': u\'/++resource++country-flags/pl.gif\',\n-    },\n-    u\'ps\': {u\'native\': \'\xd9\xbe\xda\x9a\xd8\xaa\xd9\x88\', u\'name\': \'Pashto\'},\n-    u\'pt\': {\n-        u\'native\': \'Portugu\xc3\xaas\',\n-        u\'name\': \'Portuguese\',\n-        u\'flag\': u\'/++resource++country-flags/pt.gif\',\n-    },\n-    u\'qu\': {u\'native\': \'Quechua\', u\'name\': \'Quechua\'},\n-    u\'rm\': {u\'native\': \'Rhaeto-Romance\', u\'name\': \'Rhaeto-Romance\'},\n-    u\'rn\': {u\'native\': \'Kirundi\', u\'name\': \'Kirundi\'},\n-    u\'ro\': {\n-        u\'native\': \'Rom\xc3\xa2n\xc4\x83\',\n-        u\'name\': \'Romanian\',\n-        u\'flag\': u\'/++resource++country-flags/ro.gif\',\n-    },\n-    u\'ru\': {\n-        u\'native\': \'\xd0\xa0\xd1\x83\xd1\x81\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9\',\n-        u\'name\': \'Russian\',\n-        u\'flag\': u\'/++resource++country-flags/ru.gif\',\n-    },\n-    u\'rw\': {u\'native\': \'Kinyarwanda\', u\'name\': \'Kinyarwanda\'},\n-    u\'sa\': {u\'native\': \'\xe0\xa4\xb8\xe0\xa4\x82\xe0\xa4\xb8\xe0\xa5\x8d\xe0\xa4\x95\xe0\xa5\x83\xe0\xa4\xa4\', u\'name\': \'Sanskrit\'},\n-    u\'sc\': {u\'native\': \'sardu\', u\'name\': \'Sardinian\'},\n-    u\'sd\': {\n-        u\'native\': \'Sindhi\',\n-        u\'name\': \'Sindhi\',\n-        u\'flag\': u\'/++resource++country-flags/pk.gif\',\n-    },\n-    u\'se\': {u\'native\': \'Northern S\xc3\xa1mi\', u\'name\': \'Northern S\xc3\xa1mi\'},\n-    u\'sg\': {\n-        u\'native\': \'Sangho\',\n-        u\'name\': \'Sangho\',\n-        u\'flag\': u\'/++resource++country-flags/cf.gif\',\n-    },\n-    u\'sh\': {u\'native\': \'Serbo-Croatian\', u\'name\': \'Serbo-Croatian\'},\n-    u\'si\': {u\'native\': \'Singhalese\', u\'name\': \'Singhalese\'},\n-    u\'sk\': {\n-        u\'native\': \'Sloven\xc4\x8dina\',\n-        u\'name\': \'Slovak\',\n-        u\'flag\': u\'/++resource++country-flags/sk.gif\',\n-    },\n-    u\'sl\': {\n-        u\'native\': \'Sloven\xc5\xa1\xc4\x8dina\',\n-        u\'name\': \'Slovenian\',\n-        u\'flag\': u\'/++resource++country-flags/si.gif\',\n-    },\n-    u\'sm\': {u\'native\': \'Samoan\', u\'name\': \'Samoan\'},\n-    u\'sn\': {u\'native\': \'Shona\', u\'name\': \'Shona\'},\n-    u\'so\': {\n-        u\'native\': \'Somali\',\n-        u\'name\': \'Somali\',\n-        u\'flag\': u\'/++resource++country-flags/so.gif\',\n-    },\n-    u\'sq\': {\n-        u\'native\': \'Shqip\',\n-        u\'name\': \'Albanian\',\n-        u\'flag\': u\'/++resource++country-flags/al.gif\',\n-    },\n-    u\'sr\': {\n-        u\'native\': \'\xd1\x81\xd1\x80\xd0\xbf\xd1\x81\xd0\xba\xd0\xb8\',\n-        u\'name\': \'Serbian\',\n-        u\'flag\': u\'/++resource++country-flags/cs.gif\',\n-    },\n-    u\'ss\': {u\'native\': \'SiSwati\', u\'name\': \'Swati\'},\n-    u\'st\': {u\'native\': \'Sesotho\', u\'name\': \'Southern Sotho\'},\n-    u\'su\': {\n-        u\'native\': \'Sudanese\',\n-        u\'name\': \'Sudanese\',\n-        u\'flag\': u\'/++resource++country-flags/sd.gif\',\n-    },\n-    u\'sv\': {\n-        u\'native\': \'Svenska\',\n-        u\'name\': \'Swedish\',\n-        u\'flag\': u\'/++resource++country-flags/se.gif\',\n-    },\n-    u\'sw\': {u\'native\': \'Kiswahili\', u\'name\': \'Swahili\'},\n-    u\'ta\': {u\'native\': \'\xe0\xae\xa4\xe0\xae\xae\xe0\xae\xbf\xe0\xae\xb4\', u\'name\': \'Tamil\'},\n-    u\'te\': {u\'native\': \'\xe0\xb0\xa4\xe0\xb1\x86\xe0\xb0\xb2\xe0\xb1\x81\xe0\xb0\x97\xe0\xb1\x81\', u\'name\': \'Telugu\'},\n-    u\'tg\': {\n-        u\'native\': \'\xd0\xa2\xd0\xbe\xd2\xb7\xd0\xb8\xd0\xba\xd0\xb8\',\n-        u\'name\': \'Tadjik\',\n-        u\'flag\': u\'/++resource++country-flags/tj.gif\',\n-    },\n-    u\'th\': {\n-        u\'native\': \'\xe0\xb9\x84\xe0\xb8\x97\xe0\xb8\xa2\',\n-        u\'name\': \'Thai\',\n-        u\'flag\': u\'/++resource++country-flags/th.gif\',\n-    },\n-    u\'ti\': {u\'native\': \'\xe1\x89\xb5\xe1\x8c\x8d\xe1\x88\xad\xe1\x8a\x9b\', u\'name\': \'Tigrinya\'},\n-    u\'tk\': {\n-        u\'native\': \'\xd1\x82\xd2\xaf\xd1\x80\xd0\xbam\xd0\xb5\xd0\xbd\xd1\x87\xd0\xb5\',\n-        u\'name\': \'Turkmen\',\n-        u\'flag\': u\'/++resource++country-flags/tm.gif\',\n-    },\n-    u\'tl\': {u\'native\': \'Tagalog\', u\'name\': \'Tagalog\'},\n-    u\'tn\': {\n-        u\'native\': \'Setswana\',\n-        u\'name\': \'Tswana\',\n-        u\'flag\': u\'/++resource++country-flags/bw.gif\',\n-    },\n-    u\'to\': {u\'native\': \'Tonga\', u\'name\': \'Tonga\'},\n-    u\'tr\': {\n-        u\'native\': \'T\xc3\xbcrk\xc3\xa7e\',\n-        u\'name\': \'Turkish\',\n-        u\'flag\': u\'/++resource++country-flags/tr.gif\',\n-    },\n-    u\'ts\': {u\'native\': \'Xitsonga\', u\'name\': \'Tsonga\'},\n-    u\'tt\': {u\'native\': \'\xd1\x82\xd0\xb0\xd1\x82\xd0\xb0\xd1\x80\xd1\x87\xd0\xb0\', u\'name\': \'Tatar\'},\n-    u\'tw\': {u\'native\': \'Twi\', u\'name\': \'Twi\'},\n-    u\'ty\': {u\'native\': \'Reo Tahiti\', u\'name\': \'Tahitian\'},\n-    u\'ug\': {u\'native\': \'Uigur\', u\'name\': \'Uigur\'},\n-    u\'uk\': {\n-        u\'native\': \'\xd0\xa3\xd0\xba\xd1\x80\xd0\xb0\xd1\x97\xd0\xbd\xd1\x81\xd1\x8c\xd0\xba\xd0\xb0\',\n-        u\'name\': \'Ukrainian\',\n-        u\'flag\': u\'/++resource++country-flags/ua.gif\',\n-    },\n-    u\'ur\': {u\'native\': \'\xd8\xa7\xd8\xb1\xd8\xaf\xd9\x88\', u\'name\': \'Urdu\'},\n-    u\'uz\': {\n-        u\'native\': \'\xd0\x8e\xd0\xb7\xd0\xb1\xd0\xb5\xd0\xba\xd1\x87\xd0\xb0\',\n-        u\'name\': \'Uzbek\',\n-        u\'flag\': u\'/++resource++country-flags/uz.gif\',\n-    },\n-    u\'ve\': {u\'native\': \'Tshiven\xe1\xb8\x93a\', u\'name\': \'Venda\'},\n-    u\'vi\': {\n-        u\'native\': \'Ti\xe1\xba\xbfng Vi\xe1\xbb\x87t\',\n-        u\'name\': \'Vietnamese\',\n-        u\'flag\': u\'/++resource++country-flags/vn.gif\',\n-    },\n-    u\'vk\': {u\'native\': \'Ovalingo\', u\'name\': \'Viking\'},\n-    u\'vo\': {u\'native\': \'Volap\xc3\xbck\', u\'name\': \'Volap\xc3\xbck\'},\n-    u\'wa\': {u\'native\': \'Walon\', u\'name\': \'Walloon\'},\n-    u\'wo\': {u\'native\': \'Wolof\', u\'name\': \'Wolof\'},\n-    u\'xh\': {u\'native\': \'IsiXhosa\', u\'name\': \'Xhosa\'},\n-    u\'yi\': {\n-        u\'native\': \'\xd7\xb2\xd6\xb4\xd7\x93\xd7\x99\xd7\xa9\',\n-        u\'name\': \'Yiddish\',\n-        u\'flag\': u\'/++resource++country-flags/il.gif\',\n-    },\n-    u\'yo\': {u\'native\': \'Yor\xc3\xb9b\xc3\xa1\', u\'name\': \'Yorouba\'},\n-    u\'za\': {u\'native\': \'Zhuang\', u\'name\': \'Zhuang\'},\n-    u\'zh\': {\n-        u\'native\': \'\xe4\xb8\xad\xe6\x96\x87\',\n-        u\'name\': \'Chinese\',\n-        u\'flag\': u\'/++resource++country-flags/cn.gif\',\n-    },\n-    u\'zu\': {\n-        u\'native\': \'IsiZulu\',\n-        u\'name\': \'Zulu\',\n-        u\'flag\': u\'/++resource++country-flags/za.gif\',\n+    "aa": {\n+        "native": "\xd0\xbc\xd0\xb0\xd0\xb3I\xd0\xb0\xd1\x80\xd1\x83\xd0\xbb \xd0\xbc\xd0\xb0\xd1\x86I",\n+        "name": "Afar",\n+        "flag": "/++resource++country-flags/dj.gif",\n+    },\n+    "ab": {\n+        "native": "\xd0\xb1\xd1\x8b\xd0\xb7\xd1\x88\xd3\x99\xd0\xb0",\n+        "name": "Abkhazian",\n+        "flag": "/++resource++country-flags/ge.gif",\n+    },\n+    "ae": {"native": "avesta", "name": "Avestan"},\n+    "af": {"native": "Afrikaans", "name": "Afrikaans"},\n+    "ak": {"native": "Akan", "name": "Akan"},\n+    "am": {"native": "\xe1\x8a\xa0\xe1\x88\x9b\xe1\x88\xad\xe1\x8a\x9b", "name": "Amharic"},\n+    "an": {"native": "aragon\xc3\xa9s", "name": "Aragonese"},\n+    "ar": {\n+        "native": "\xd8\xa7\xd9\x84\xd8\xb9\xd8\xb1\xd8\xa8\xd9\x8a\xd8\xa9",\n+        "name": "Arabic",\n+        "flag": "/++resource++language-flags/ar.gif",\n+    },\n+    "as": {"native": "\xe0\xa6\x85\xe0\xa6\xb8\xe0\xa6\xae\xe0\xa6\xbf\xe0\xa7\x9f\xe0\xa6\xbe", "name": "Assamese"},\n+    "ay": {"native": "Aymara", "name": "Aymara"},\n+    "az": {\n+        "native": "Az\xc9\x99ri T\xc3\xbcrk\xc3\xa7\xc9\x99si",\n+        "name": "Azerbaijani",\n+        "flag": "/++resource++country-flags/az.gif",\n+    },\n+    "ba": {"native": "Bashkir", "name": "Bashkir"},\n+    "be": {\n+        "native": "\xd0\x91\xd0\xb5\xd0\xbb\xd0\xb0\xd1\x80\xd1\x83\xd1\x81\xd0\xba\xd1\x96",\n+        "name": "Belarussian",\n+        "flag": "/++resource++country-flags/by.gif",\n+    },\n+    "bg": {\n+        "native": "\xd0\x91\xd1\x8a\xd0\xbb\xd0\xb3\xd0\xb0\xd1\x80\xd1\x81\xd0\xba\xd0\xb8",\n+        "name": "Bulgarian",\n+        "flag": "/++resource++country-flags/bg.gif",\n+    },\n+    "bh": {"native": "Bihari", "name": "Bihari"},\n+    "bi": {"native": "Bislama", "name": "Bislama"},\n+    "bm": {"native": "bamanankan", "name": "Bambara"},\n+    "bn": {\n+        "native": "\xe0\xa6\xac\xe0\xa6\xbe\xe0\xa6\x82\xe0\xa6\xb2\xe0\xa6\xbe",\n+        "name": "Bengali",\n+        "flag": "/++resource++country-flags/bd.gif",\n+    },\n+    "bo": {"native": "\xe0\xbd\x96\xe0\xbd\xbc\xe0\xbd\x91\xe0\xbc\x8b\xe0\xbd\xa6\xe0\xbe\x90\xe0\xbd\x91\xe0\xbc\x8b", "name": "Tibetan"},\n+    "br": {"native": "brezhoneg", "name": "Breton"},\n+    "bs": {\n+        "native": "Bosanski",\n+        "name": "Bosnian",\n+        "flag": "/++resource++country-flags/ba.gif",\n+    },\n+    "ca": {\n+        "native": "Catal\xc3\xa0",\n+        "name": "Catalan",\n+        "flag": "/++resource++language-flags/ca.gif",\n+    },\n+    "ce": {"native": "\xd0\xbd\xd0\xbe\xd1\x85\xd1\x87\xd0\xb8\xd0\xb9\xd0\xbd \xd0\xbc\xd0\xbe\xd1\x82\xd1\x82", "name": "Chechen"},\n+    "ch": {"native": "Chamoru", "name": "Chamorro"},\n+    "co": {"native": "Corsu", "name": "Corsican"},\n+    "cr": {"native": "\xe1\x93\x80\xe1\x90\xa6\xe1\x90\x83\xe1\x94\xad\xe1\x90\x8d\xe1\x90\x8f\xe1\x90\xa3", "name": "Cree"},\n+    "cs": {\n+        "native": "\xc4\x8ce\xc5\xa1tina",\n+        "name": "Czech",\n+        "flag": "/++resource++country-flags/cz.gif",\n+    },\n+    "cu": {"native": "\xd1\xa9\xd0\xb7\xd1\x8b\xd0\xba\xd1\x8a \xd1\x81\xd0\xbb\xd0\xbe\xd0\xb2\xd1\xa3\xd0\xbd\xd1\x8c\xd1\x81\xd0\xba\xd1\x8a", "name": "Old Church Slavonic"},\n+    "cv": {"native": "\xd1\x87\xd3\x91\xd0\xb2\xd0\xb0\xd1\x88 \xd1\x87\xd3\x97\xd0\xbb\xd1\x85\xd0\xb8", "name": "Chuvash"},\n+    "cy": {\n+        "native": "Cymraeg",\n+        "name": "Welsh",\n+        "flag": "/++resource++language-flags/cy.gif",\n+    },\n+    "da": {\n+        "native": "Dansk",\n+        "name": "Danish",\n+        "flag": "/++resource++country-flags/dk.gif",\n+    },\n+    "de": {\n+        "native": "Deutsch",\n+        "name": "German",\n+        "flag": "/++resource++country-flags/de.gif",\n+    },\n+    "dv": {"native": "Divehi", "name": "Maldivian"},\n+    "dz": {"native": "Bhutani", "name": "Indian Bhutani"},\n+    "ee": {"native": "E\xca\x8begbe", "name": "Ewe"},\n+    "el": {\n+        "native": "\xce\x95\xce\xbb\xce\xbb\xce\xb7\xce\xbd\xce\xb9\xce\xba\xce\xac",\n+        "name": "Greek",\n+        "flag": "/++resource++country-flags/gr.gif",\n+    },\n+    "en": {\n+        "native": "English",\n+        "name": "English",\n+        "flag": "/++resource++country-flags/gb.gif",\n+    },\n+    "eo": {\n+        "native": "Esperanto",\n+        "name": "Esperanto",\n+        "flag": "/++resource++language-flags/eo.gif",\n+    },\n+    "es": {\n+        "native": "Espa\xc3\xb1ol",\n+        "name": "Spanish",\n+        "flag": "/++resource++country-flags/es.gif",\n+    },\n+    "et": {\n+        "native": "Eesti",\n+        "name": "Estonian",\n+        "flag": "/++resource++country-flags/ee.gif",\n+    },\n+    "eu": {\n+        "native": "Euskara",\n+        "name": "Basque",\n+        "flag": "/++resource++language-flags/eu.gif",\n+    },\n+    "fa": {"native": "\xd9\x81\xd8\xa7\xd8\xb1\xd8\xb3\xdb\x8c", "name": "Persian"},\n+    "ff": {"native": "Fulfulde", "name": "Fula"},\n+    "fi": {\n+        "native": "Suomi",\n+        "name": "Finnish",\n+        "flag": "/++resource++country-flags/fi.gif",\n+    },\n+    "fj": {\n+        "native": "Fiji",\n+        "name": "Fiji",\n+        "flag": "/++resource++country-flags/fj.gif",\n+    },\n+    "fo": {\n+        "native": "F\xc3\xb8royska",\n+        "name": "Faroese",\n+        "flag": "/++resource++country-flags/fo.gif",\n+    },\n+    "fr": {\n+        "native": "Fran\xc3\xa7ais",\n+        "name": "French",\n+        "flag": "/++resource++country-flags/fr.gif",\n+    },\n+    "fy": {"native": "Frysk", "name": "Frisian"},\n+    "ga": {"native": "Gaeilge", "name": "Irish Gaelic"},\n+    "gd": {"native": "G\xc3\xa0idhlig", "name": "Scottish Gaelic"},\n+    "gl": {"native": "Galego", "name": "Galician"},\n+    "gn": {"native": "Guarani", "name": "Guarani"},\n+    "gu": {"native": "\xe0\xaa\x97\xe0\xab\x81\xe0\xaa\x9c\xe0\xaa\xb0\xe0\xaa\xbe\xe0\xaa\xa4\xe0\xab\x80", "name": "Gujarati"},\n+    "gv": {"native": "Gaelg", "name": "Manx Gaelic"},\n+    "ha": {"native": "\xd9\x87\xd9\x8e\xd9\x88\xd9\x8f\xd8\xb3", "name": "Hausa"},\n+    "he": {\n+        "native": "\xd7\xa2\xd7\x91\xd7\xa8\xd7\x99\xd7\xaa",\n+        "name": "Hebrew",\n+        "flag": "/++resource++country-flags/il.gif",\n+    },\n+    "hi": {\n+        "native": "\xe0\xa4\xb9\xe0\xa4\xbf\xe0\xa4\x82\xe0\xa4\xa6\xe0\xa5\x80",\n+        "name": "Hindi",\n+        "flag": "/++resource++country-flags/in.gif",\n+    },\n+    "ho": {"native": "Hiri Motu", "name": "Hiri Motu"},\n+    "hr": {\n+        "native": "Hrvatski",\n+        "name": "Croatian",\n+        "flag": "/++resource++country-flags/hr.gif",\n+    },\n+    "ht": {"native": "Krey\xc3\xb2l ayisyen", "name": "Haitian"},\n+    "hu": {\n+        "native": "Magyar",\n+        "name": "Hungarian",\n+        "flag": "/++resource++country-flags/hu.gif",\n+    },\n+    "hy": {\n+        "native": "\xd5\x80\xd5\xa1\xd5\xb5\xd5\xa5\xd6\x80\xd5\xa7\xd5\xb6",\n+        "name": "Armenian",\n+        "flag": "/++resource++country-flags/am.gif",\n+    },\n+    "hz": {"native": "Otjiherero", "name": "Herero"},\n+    "ia": {"native": "Interlingua", "name": "Interlingua"},\n+    "id": {\n+        "native": "Bahasa Indonesia",\n+        "name": "Indonesian",\n+        "flag": "/++resource++country-flags/id.gif",\n+    },\n+    "ie": {"native": "Interlingue", "name": "Interlingue"},\n+    "ig": {"native": "As\xe1\xbb\xa5s\xe1\xbb\xa5 Igbo", "name": "Igbo"},\n+    "ii": {"native": "Nuosu", "name": "Nuosu"},\n+    "ik": {"native": "I\xc3\xb1upiaq", "name": "Inupiak"},\n+    "io": {"native": "Ido", "name": "Ido"},\n+    "is": {\n+        "native": "\xc3\x8dslenska",\n+        "name": "Icelandic",\n+        "flag": "/++resource++country-flags/is.gif",\n+    },\n+    "it": {\n+        "native": "Italiano",\n+        "name": "Italian",\n+        "flag": "/++resource++country-flags/it.gif",\n+    },\n+    "iu": {"native": "\xe1\x90\x83\xe1\x93\x84\xe1\x92\x83\xe1\x91\x8e\xe1\x91\x90\xe1\x91\xa6", "name": "Inuktitut"},\n+    "ja": {\n+        "native": "\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e",\n+        "name": "Japanese",\n+        "flag": "/++resource++country-flags/jp.gif",\n+    },\n+    "jv": {"native": "Javanese", "name": "basa Jawa"},\n+    "ka": {\n+        "native": "\xe1\x83\xa5\xe1\x83\x90\xe1\x83\xa0\xe1\x83\x97\xe1\x83\xa3\xe1\x83\x9a\xe1\x83\x98",\n+        "name": "Georgian",\n+        "flag": "/++resource++country-flags/ge.gif",\n+    },\n+    "kg": {"native": "KiKongo", "name": "Kongo"},\n+    "ki": {"native": "G\xc4\xa9k\xc5\xa9y\xc5\xa9", "name": "Kikuyu"},\n+    "kj": {"native": "Kuanyama", "name": "Kwanyama"},\n+    "kk": {\n+        "native": "\xef\xbb\x97\xef\xba\x8e\xef\xba\xaf\xef\xba\x8d\xef\xbb\x97\xef\xba\xb8\xef\xba\x8e",\n+        "name": "Kazakh",\n+        "flag": "/++resource++country-flags/kz.gif",\n+    },\n+    "kl": {\n+        "native": "Greenlandic",\n+        "name": "Greenlandic",\n+        "flag": "/++resource++country-flags/gl.gif",\n+    },\n+    "km": {\n+        "native": "\xe1\x9e\x81\xe1\x9f\x92\xe1\x9e\x98\xe1\x9f\x82\xe1\x9e\x9a",\n+        "name": "Cambodian/Khmer",\n+        "flag": "/++resource++country-flags/kh.gif",\n+    },\n+    "kn": {\n+        "native": "\xe0\xb2\x95\xe0\xb2\xa8\xe0\xb3\x8d\xe0\xb2\xa8\xe0\xb2\xa1",\n+        "name": "Kannada",\n+        "flag": "/++resource++country-flags/in.gif",\n+    },\n+    "ko": {\n+        "native": "\xed\x95\x9c\xea\xb5\xad\xec\x96\xb4",\n+        "name": "Korean",\n+        "flag": "/++resource++country-flags/kr.gif",\n+    },\n+    "kr": {"native": "Kanuri", "name": "Kanuri"},\n+    "ks": {\n+        "native": "\xe0\xa4\x95\xe0\xa4\xbe\xe0\xa4\xbd\xe0\xa4\xb6\xe0\xa5\x81\xe0\xa4\xb0",\n+        "name": "Kashmiri",\n+        "flag": "/++resource++country-flags/in.gif",\n+    },\n+    "ku": {"native": "Kurd\xc3\xad", "name": "Kurdish"},\n+    "kv": {"native": "\xd0\xba\xd0\xbe\xd0\xbc\xd0\xb8 \xd0\xba\xd1\x8b\xd0\xb2", "name": "Komi"},\n+    "kw": {"native": "Kernewek", "name": "Cornish"},\n+    "ky": {"native": "\xd0\x9a\xd1\x8b\xd1\x80\xd0\xb3\xd1\x8b\xd0\xb7", "name": "Kirghiz"},\n+    "la": {\n+        "native": "Latin",\n+        "name": "Latin",\n+        "flag": "/++resource++country-flags/va.gif",\n+    },\n+    "lb": {\n+        "native": "L\xc3\xabtzebuergesch",\n+        "name": "Luxemburgish",\n+        "flag": "/++resource++country-flags/lu.gif",\n+    },\n+    "lg": {"native": "Luganda", "name": "Ganda"},\n+    "li": {"native": "Limburgs", "name": "Limburgish"},\n+    "ln": {"native": "Lingala", "name": "Lingala"},\n+    "lo": {\n+        "native": "\xe0\xba\x9e\xe0\xba\xb2\xe0\xba\xaa\xe0\xba\xb2\xe0\xba\xa5\xe0\xba\xb2\xe0\xba\xa7",\n+        "name": "Laotian",\n+        "flag": "/++resource++country-flags/la.gif",\n+    },\n+    "lt": {\n+        "native": "Lietuvi\xc5\xb3",\n+        "name": "Lithuanian",\n+        "flag": "/++resource++country-flags/lt.gif",\n+    },\n+    "lu": {"native": "Tshiluba", "name": "Luba-Katanga"},\n+    "lv": {\n+        "native": "Latvie\xc5\xa1u",\n+        "name": "Latvian",\n+        "flag": "/++resource++country-flags/lv.gif",\n+    },\n+    "mg": {\n+        "native": "Malagasy",\n+        "name": "Madagascarian",\n+        "flag": "/++resource++country-flags/mg.gif",\n+    },\n+    "mh": {"native": "Kajin M\xcc\xa7aje\xc4\xbc", "name": "Marshallese"},\n+    "mi": {"native": "Maori", "name": "Maori"},\n+    "mk": {\n+        "native": "\xd0\x9c\xd0\xb0\xd0\xba\xd0\xb5\xd0\xb4\xd0\xbe\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8",\n+        "name": "Macedonian",\n+        "flag": "/++resource++country-flags/mk.gif",\n+    },\n+    "ml": {"native": "\xe0\xb4\xae\xe0\xb4\xb2\xe0\xb4\xaf\xe0\xb4\xbe\xe0\xb4\xb3\xe0\xb4\x82", "name": "Malayalam"},\n+    "mn": {\n+        "native": "\xd0\x9c\xd0\xbe\xd0\xbd\xd0\xb3\xd0\xbe\xd0\xbb",\n+        "name": "Mongolian",\n+        "flag": "/++resource++country-flags/mn.gif",\n+    },\n+    "mo": {\n+        "native": "Moldavian",\n+        "name": "Moldavian",\n+        "flag": "/++resource++country-flags/md.gif",\n+    },\n+    "mr": {"native": "\xe0\xa4\xae\xe0\xa4\xb0\xe0\xa4\xbe\xe0\xa4\xa0\xe0\xa5\x80", "name": "Marathi"},\n+    "ms": {"native": "Bahasa Melayu", "name": "Malay"},\n+    "mt": {\n+        "native": "Malti",\n+        "name": "Maltese",\n+        "flag": "/++resource++country-flags/mt.gif",\n+    },\n+    "my": {"native": "Burmese", "name": "Burmese"},\n+    "na": {\n+        "native": "Nauru",\n+        "name": "Nauruan",\n+        "flag": "/++resource++country-flags/nr.gif",\n+    },\n+    "nb": {"native": "Norsk bokm\xc3\xa5l", "name": "Norwegian Bokm\xc3\xa5l"},\n+    "nd": {"native": "Ndebele (North)", "name": "Ndebele (North)"},\n+    "ne": {"native": "\xe0\xa4\xa8\xe0\xa5\x87\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb2\xe0\xa5\x80", "name": "Nepali"},\n+    "ng": {"native": "Owambo", "name": "Ndonga"},\n+    "nl": {\n+        "native": "Nederlands",\n+        "name": "Dutch",\n+        "flag": "/++resource++country-flags/nl.gif",\n+    },\n+    "nn": {\n+        "native": "Nynorsk",\n+        "name": "Nynorsk",\n+        "flag": "/++resource++country-flags/no.gif",\n+    },\n+    "no": {\n+        "native": "Norsk",\n+        "name": "Norwegian",\n+        "flag": "/++resource++country-flags/no.gif",\n+    },\n+    "nr": {"native": "IsiNdebele", "name": "Ndebele (South)"},\n+    "nv": {"native": "Din\xc3\xa9 bizaad", "name": "Navajo"},\n+    "ny": {"native": "chiChe\xc5\xb5a", "name": "Chichewa"},\n+    "oc": {"native": "Occitan", "name": "Occitan"},\n+    "oj": {"native": "\xe1\x90\x8a\xe1\x93\x82\xe1\x94\x91\xe1\x93\x88\xe1\x90\xaf\xe1\x92\xa7\xe1\x90\x8e\xe1\x93\x90", "name": "Ojibwe"},\n+    "om": {"native": "Oromo", "name": "Oromo"},\n+    "or": {"native": "\xe0\xac\x93\xe0\xad\x9c\xe0\xac\xbf\xe0\xac\x86", "name": "Oriya"},\n+    "os": {"native": "\xd0\xb8\xd1\x80\xd0\xbe\xd0\xbd \xc3\xa6\xd0\xb2\xd0\xb7\xd0\xb0\xd0\xb3", "name": "Ossetian"},\n+    "pa": {"native": "\xe0\xa8\xaa\xe0\xa9\xb0\xe0\xa8\x9c\xe0\xa8\xbe\xe0\xa8\xac\xe0\xa9\x80", "name": "Punjabi"},\n+    "pi": {"native": "\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xb4\xe0\xa4\xbf", "name": "P\xc4\x81li"},\n+    "pl": {\n+        "native": "Polski",\n+        "name": "Polish",\n+        "flag": "/++resource++country-flags/pl.gif",\n+    },\n+    "ps": {"native": "\xd9\xbe\xda\x9a\xd8\xaa\xd9\x88", "name": "Pashto"},\n+    "pt": {\n+        "native": "Portugu\xc3\xaas",\n+        "name": "Portuguese",\n+        "flag": "/++resource++country-flags/pt.gif",\n+    },\n+    "qu": {"native": "Quechua", "name": "Quechua"},\n+    "rm": {"native": "Rhaeto-Romance", "name": "Rhaeto-Romance"},\n+    "rn": {"native": "Kirundi", "name": "Kirundi"},\n+    "ro": {\n+        "native": "Rom\xc3\xa2n\xc4\x83",\n+        "name": "Romanian",\n+        "flag": "/++resource++country-flags/ro.gif",\n+    },\n+    "ru": {\n+        "native": "\xd0\xa0\xd1\x83\xd1\x81\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9",\n+        "name": "Russian",\n+        "flag": "/++resource++country-flags/ru.gif",\n+    },\n+    "rw": {"native": "Kinyarwanda", "name": "Kinyarwanda"},\n+    "sa": {"native": "\xe0\xa4\xb8\xe0\xa4\x82\xe0\xa4\xb8\xe0\xa5\x8d\xe0\xa4\x95\xe0\xa5\x83\xe0\xa4\xa4", "name": "Sanskrit"},\n+    "sc": {"native": "sardu", "name": "Sardinian"},\n+    "sd": {\n+        "native": "Sindhi",\n+        "name": "Sindhi",\n+        "flag": "/++resource++country-flags/pk.gif",\n+    },\n+    "se": {"native": "Northern S\xc3\xa1mi", "name": "Northern S\xc3\xa1mi"},\n+    "sg": {\n+        "native": "Sangho",\n+        "name": "Sangho",\n+        "flag": "/++resource++country-flags/cf.gif",\n+    },\n+    "sh": {"native": "Serbo-Croatian", "name": "Serbo-Croatian"},\n+    "si": {"native": "Singhalese", "name": "Singhalese"},\n+    "sk": {\n+        "native": "Sloven\xc4\x8dina",\n+        "name": "Slovak",\n+        "flag": "/++resource++country-flags/sk.gif",\n+    },\n+    "sl": {\n+        "native": "Sloven\xc5\xa1\xc4\x8dina",\n+        "name": "Slovenian",\n+        "flag": "/++resource++country-flags/si.gif",\n+    },\n+    "sm": {"native": "Samoan", "name": "Samoan"},\n+    "sn": {"native": "Shona", "name": "Shona"},\n+    "so": {\n+        "native": "Somali",\n+        "name": "Somali",\n+        "flag": "/++resource++country-flags/so.gif",\n+    },\n+    "sq": {\n+        "native": "Shqip",\n+        "name": "Albanian",\n+        "flag": "/++resource++country-flags/al.gif",\n+    },\n+    "sr": {\n+        "native": "\xd1\x81\xd1\x80\xd0\xbf\xd1\x81\xd0\xba\xd0\xb8",\n+        "name": "Serbian",\n+        "flag": "/++resource++country-flags/cs.gif",\n+    },\n+    "ss": {"native": "SiSwati", "name": "Swati"},\n+    "st": {"native": "Sesotho", "name": "Southern Sotho"},\n+    "su": {\n+        "native": "Sudanese",\n+        "name": "Sudanese",\n+        "flag": "/++resource++country-flags/sd.gif",\n+    },\n+    "sv": {\n+        "native": "Svenska",\n+        "name": "Swedish",\n+        "flag": "/++resource++country-flags/se.gif",\n+    },\n+    "sw": {"native": "Kiswahili", "name": "Swahili"},\n+    "ta": {"native": "\xe0\xae\xa4\xe0\xae\xae\xe0\xae\xbf\xe0\xae\xb4", "name": "Tamil"},\n+    "te": {"native": "\xe0\xb0\xa4\xe0\xb1\x86\xe0\xb0\xb2\xe0\xb1\x81\xe0\xb0\x97\xe0\xb1\x81", "name": "Telugu"},\n+    "tg": {\n+        "native": "\xd0\xa2\xd0\xbe\xd2\xb7\xd0\xb8\xd0\xba\xd0\xb8",\n+        "name": "Tadjik",\n+        "flag": "/++resource++country-flags/tj.gif",\n+    },\n+    "th": {\n+        "native": "\xe0\xb9\x84\xe0\xb8\x97\xe0\xb8\xa2",\n+        "name": "Thai",\n+        "flag": "/++resource++country-flags/th.gif",\n+    },\n+    "ti": {"native": "\xe1\x89\xb5\xe1\x8c\x8d\xe1\x88\xad\xe1\x8a\x9b", "name": "Tigrinya"},\n+    "tk": {\n+        "native": "\xd1\x82\xd2\xaf\xd1\x80\xd0\xbam\xd0\xb5\xd0\xbd\xd1\x87\xd0\xb5",\n+        "name": "Turkmen",\n+        "flag": "/++resource++country-flags/tm.gif",\n+    },\n+    "tl": {"native": "Tagalog", "name": "Tagalog"},\n+    "tn": {\n+        "native": "Setswana",\n+        "name": "Tswana",\n+        "flag": "/++resource++country-flags/bw.gif",\n+    },\n+    "to": {"native": "Tonga", "name": "Tonga"},\n+    "tr": {\n+        "native": "T\xc3\xbcrk\xc3\xa7e",\n+        "name": "Turkish",\n+        "flag": "/++resource++country-flags/tr.gif",\n+    },\n+    "ts": {"native": "Xitsonga", "name": "Tsonga"},\n+    "tt": {"native": "\xd1\x82\xd0\xb0\xd1\x82\xd0\xb0\xd1\x80\xd1\x87\xd0\xb0", "name": "Tatar"},\n+    "tw": {"native": "Twi", "name": "Twi"},\n+    "ty": {"native": "Reo Tahiti", "name": "Tahitian"},\n+    "ug": {"native": "Uigur", "name": "Uigur"},\n+    "uk": {\n+        "native": "\xd0\xa3\xd0\xba\xd1\x80\xd0\xb0\xd1\x97\xd0\xbd\xd1\x81\xd1\x8c\xd0\xba\xd0\xb0",\n+        "name": "Ukrainian",\n+        "flag": "/++resource++country-flags/ua.gif",\n+    },\n+    "ur": {"native": "\xd8\xa7\xd8\xb1\xd8\xaf\xd9\x88", "name": "Urdu"},\n+    "uz": {\n+        "native": "\xd0\x8e\xd0\xb7\xd0\xb1\xd0\xb5\xd0\xba\xd1\x87\xd0\xb0",\n+        "name": "Uzbek",\n+        "flag": "/++resource++country-flags/uz.gif",\n+    },\n+    "ve": {"native": "Tshiven\xe1\xb8\x93a", "name": "Venda"},\n+    "vi": {\n+        "native": "Ti\xe1\xba\xbfng Vi\xe1\xbb\x87t",\n+        "name": "Vietnamese",\n+        "flag": "/++resource++country-flags/vn.gif",\n+    },\n+    "vk": {"native": "Ovalingo", "name": "Viking"},\n+    "vo": {"native": "Volap\xc3\xbck", "name": "Volap\xc3\xbck"},\n+    "wa": {"native": "Walon", "name": "Walloon"},\n+    "wo": {"native": "Wolof", "name": "Wolof"},\n+    "xh": {"native": "IsiXhosa", "name": "Xhosa"},\n+    "yi": {\n+        "native": "\xd7\xb2\xd6\xb4\xd7\x93\xd7\x99\xd7\xa9",\n+        "name": "Yiddish",\n+        "flag": "/++resource++country-flags/il.gif",\n+    },\n+    "yo": {"native": "Yor\xc3\xb9b\xc3\xa1", "name": "Yorouba"},\n+    "za": {"native": "Zhuang", "name": "Zhuang"},\n+    "zh": {\n+        "native": "\xe4\xb8\xad\xe6\x96\x87",\n+        "name": "Chinese",\n+        "flag": "/++resource++country-flags/cn.gif",\n+    },\n+    "zu": {\n+        "native": "IsiZulu",\n+        "name": "Zulu",\n+        "flag": "/++resource++country-flags/za.gif",\n     },\n }\n \n # convert the utf-8 encoded values to unicode\n for code in _languagelist:\n     value = _languagelist[code]\n-    if u\'name\' in value:\n-        if six.PY3:\n-            value[u\'name\'] = value[u\'name\']\n-        else:\n-            value[u\'name\'] = unicode(value[u\'name\'], \'utf-8\')\n-    if u\'native\' in value:\n-        if six.PY3:\n-            value[u\'native\'] = value[u\'native\']\n-        else:\n-            value[u\'native\'] = unicode(value[u\'native\'], \'utf-8\')\n+    if "name" in value:\n+        value["name"] = value["name"]\n+    if "native" in value:\n+        value["native"] = value["native"]\n \n _combinedlanguagelist = {\n-    u\'ar-ae\': {\n-        u\'name\': \'Arabic (United Arab Emirates)\',\n-        u\'flag\': u\'/++resource++country-flags/ae.gif\',\n+    "ar-ae": {\n+        "name": "Arabic (United Arab Emirates)",\n+        "flag": "/++resource++country-flags/ae.gif",\n     },\n-    u\'ar-bh\': {\n-        u\'name\': \'Arabic (Bahrain)\',\n-        u\'flag\': u\'/++resource++country-flags/bh.gif\',\n+    "ar-bh": {\n+        "name": "Arabic (Bahrain)",\n+        "flag": "/++resource++country-flags/bh.gif",\n     },\n-    u\'ar-dz\': {\n-        u\'name\': \'Arabic (Algeria)\',\n-        u\'flag\': u\'/++resource++country-flags/dz.gif\',\n-    },\n-    u\'ar-eg\': {\n-        u\'name\': \'Arabic (Egypt)\',\n-        u\'flag\': u\'/++resource++country-flags/eg.gif\',\n-    },\n-    u\'ar-il\': {\n-        u\'name\': \'Arabic (Israel)\',\n-        u\'flag\': u\'/++resource++country-flags/il.gif\',\n-    },\n-    u\'ar-iq\': {\n-        u\'name\': \'Arabic (Iraq)\',\n-        u\'flag\': u\'/++resource++country-flags/iq.gif\',\n-    },\n-    u\'ar-jo\': {\n-        u\'name\': \'Arabic (Jordan)\',\n-        u\'flag\': u\'/++resource++country-flags/jo.gif\',\n-    },\n-    u\'ar-kw\': {\n-        u\'name\': \'Arabic (Kuwait)\',\n-        u\'flag\': u\'/++resource++country-flags/kw.gif\',\n-    },\n-    u\'ar-lb\': {\n-        u\'name\': \'Arabic (Lebanon)\',\n-        u\'flag\': u\'/++resource++country-flags/lb.gif\',\n-    },\n-    u\'ar-ly\': {\n-        u\'name\': \'Arabic (Libya)\',\n-        u\'flag\': u\'/++resource++country-flags/ly.gif\',\n-    },\n-    u\'ar-ma\': {\n-        u\'name\': \'Arabic (Morocco)\',\n-        u\'flag\': u\'/++resource++country-flags/ma.gif\',\n-    },\n-    u\'ar-mr\': {\n-        u\'name\': \'Arabic (Mauritania)\',\n-        u\'flag\': u\'/++resource++country-flags/mr.gif\',\n-    },\n-    u\'ar-om\': {\n-        u\'name\': \'Arabic (Oman)\',\n-        u\'flag\': u\'/++resource++country-flags/om.gif\',\n-    },\n-    u\'ar-ps\': {\n-        u\'name\': \'Arabic (Palestinian West Bank and Gaza)\',\n-        u\'flag\': u\'/++resource++country-flags/ps.gif\',\n-    },\n-    u\'ar-qa\': {\n-        u\'name\': \'Arabic (Qatar)\',\n-        u\'flag\': u\'/++resource++country-flags/qa.gif\',\n-    },\n-    u\'ar-sa\': {\n-        u\'name\': \'Arabic (Saudi Arabia)\',\n-        u\'flag\': u\'/++resource++country-flags/sa.gif\',\n-    },\n-    u\'ar-sd\': {\n-        u\'name\': \'Arabic (Sudan)\',\n-        u\'flag\': u\'/++resource++country-flags/ly.gif\',\n-    },\n-    u\'ar-so\': {\n-        u\'name\': \'Arabic (Somalia)\',\n-        u\'flag\': u\'/++resource++country-flags/so.gif\',\n-    },\n-    u\'ar-sy\': {\n-        u\'name\': \'Arabic (Syria)\',\n-        u\'flag\': u\'/++resource++country-flags/sy.gif\',\n-    },\n-    u\'ar-td\': {\n-        u\'name\': \'Arabic (Chad)\',\n-        u\'flag\': u\'/++resource++country-flags/td.gif\',\n-    },\n-    u\'ar-tn\': {\n-        u\'name\': \'Arabic (Tunisia)\',\n-        u\'flag\': u\'/++resource++country-flags/ly.gif\',\n-    },\n-    u\'ar-ye\': {\n-        u\'name\': \'Arabic (Yemen)\',\n-        u\'flag\': u\'/++resource++country-flags/ye.gif\',\n-    },\n-    u\'bn-bd\': {\n-        u\'name\': \'Bengali (Bangladesh)\',\n-        u\'flag\': u\'/++resource++country-flags/bd.gif\',\n-    },\n-    u\'bn-in\': {\n-        u\'name\': \'Bengali (India)\',\n-        u\'flag\': u\'/++resource++country-flags/in.gif\',\n-    },\n-    u\'bn-sg\': {\n-        u\'name\': \'Bengali (Singapore)\',\n-        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n-    },\n-    u\'ch-gu\': {\n-        u\'name\': \'Chamorro (Guam)\',\n-        u\'flag\': u\'/++resource++country-flags/gu.gif\',\n+    "ar-dz": {\n+        "name": "Arabic (Algeria)",\n+        "flag": "/++resource++country-flags/dz.gif",\n+    },\n+    "ar-eg": {\n+        "name": "Arabic (Egypt)",\n+        "flag": "/++resource++country-flags/eg.gif",\n+    },\n+    "ar-il": {\n+        "name": "Arabic (Israel)",\n+        "flag": "/++resource++country-flags/il.gif",\n+    },\n+    "ar-iq": {\n+        "name": "Arabic (Iraq)",\n+        "flag": "/++resource++country-flags/iq.gif",\n+    },\n+    "ar-jo": {\n+        "name": "Arabic (Jordan)",\n+        "flag": "/++resource++country-flags/jo.gif",\n+    },\n+    "ar-kw": {\n+        "name": "Arabic (Kuwait)",\n+        "flag": "/++resource++country-flags/kw.gif",\n+    },\n+    "ar-lb": {\n+        "name": "Arabic (Lebanon)",\n+        "flag": "/++resource++country-flags/lb.gif",\n+    },\n+    "ar-ly": {\n+        "name": "Arabic (Libya)",\n+        "flag": "/++resource++country-flags/ly.gif",\n+    },\n+    "ar-ma": {\n+        "name": "Arabic (Morocco)",\n+        "flag": "/++resource++country-flags/ma.gif",\n+    },\n+    "ar-mr": {\n+        "name": "Arabic (Mauritania)",\n+        "flag": "/++resource++country-flags/mr.gif",\n+    },\n+    "ar-om": {\n+        "name": "Arabic (Oman)",\n+        "flag": "/++resource++country-flags/om.gif",\n+    },\n+    "ar-ps": {\n+        "name": "Arabic (Palestinian West Bank and Gaza)",\n+        "flag": "/++resource++country-flags/ps.gif",\n+    },\n+    "ar-qa": {\n+        "name": "Arabic (Qatar)",\n+        "flag": "/++resource++country-flags/qa.gif",\n+    },\n+    "ar-sa": {\n+        "name": "Arabic (Saudi Arabia)",\n+        "flag": "/++resource++country-flags/sa.gif",\n+    },\n+    "ar-sd": {\n+        "name": "Arabic (Sudan)",\n+        "flag": "/++resource++country-flags/ly.gif",\n+    },\n+    "ar-so": {\n+        "name": "Arabic (Somalia)",\n+        "flag": "/++resource++country-flags/so.gif",\n+    },\n+    "ar-sy": {\n+        "name": "Arabic (Syria)",\n+        "flag": "/++resource++country-flags/sy.gif",\n+    },\n+    "ar-td": {\n+        "name": "Arabic (Chad)",\n+        "flag": "/++resource++country-flags/td.gif",\n+    },\n+    "ar-tn": {\n+        "name": "Arabic (Tunisia)",\n+        "flag": "/++resource++country-flags/ly.gif",\n+    },\n+    "ar-ye": {\n+        "name": "Arabic (Yemen)",\n+        "flag": "/++resource++country-flags/ye.gif",\n+    },\n+    "bn-bd": {\n+        "name": "Bengali (Bangladesh)",\n+        "flag": "/++resource++country-flags/bd.gif",\n+    },\n+    "bn-in": {\n+        "name": "Bengali (India)",\n+        "flag": "/++resource++country-flags/in.gif",\n+    },\n+    "bn-sg": {\n+        "name": "Bengali (Singapore)",\n+        "flag": "/++resource++country-flags/sg.gif",\n+    },\n+    "ch-gu": {\n+        "name": "Chamorro (Guam)",\n+        "flag": "/++resource++country-flags/gu.gif",\n     },\n-    u\'ch-mp\': {\n-        u\'name\': \'Chamorro (Northern Mariana Islands)\',\n-        u\'flag\': u\'/++resource++country-flags/mp.gif\',\n+    "ch-mp": {\n+        "name": "Chamorro (Northern Mariana Islands)",\n+        "flag": "/++resource++country-flags/mp.gif",\n     },\n-    u\'cs-cz\': {\n-        u\'name\': \'Czech (Czech republic)\',\n-        u\'native\': \'\xc4\x8ce\xc5\xa1tina (\xc4\x8cesk\xc3\xa1 republika)\',\n-        u\'flag\': u\'/++resource++country-flags/cz.gif\',\n-    },\n-    u\'da-dk\': {\n-        u\'name\': \'Danish (Denmark)\',\n-        u\'flag\': u\'/++resource++country-flags/dk.gif\',\n-    },\n-    u\'da-gl\': {\n-        u\'name\': \'Danish (Greenland)\',\n-        u\'flag\': u\'/++resource++country-flags/gl.gif\',\n-    },\n-    u\'de-at\': {\n-        u\'name\': \'German (Austria)\',\n-        u\'native\': \'Deutsch (\xc3\x96sterreich)\',\n-        u\'flag\': u\'/++resource++country-flags/at.gif\',\n+    "cs-cz": {\n+        "name": "Czech (Czech republic)",\n+        "native": "\xc4\x8ce\xc5\xa1tina (\xc4\x8cesk\xc3\xa1 republika)",\n+        "flag": "/++resource++country-flags/cz.gif",\n+    },\n+    "da-dk": {\n+        "name": "Danish (Denmark)",\n+        "flag": "/++resource++country-flags/dk.gif",\n+    },\n+    "da-gl": {\n+        "name": "Danish (Greenland)",\n+        "flag": "/++resource++country-flags/gl.gif",\n+    },\n+    "de-at": {\n+        "name": "German (Austria)",\n+        "native": "Deutsch (\xc3\x96sterreich)",\n+        "flag": "/++resource++country-flags/at.gif",\n     },\n-    u\'de-be\': {\n-        u\'name\': \'German (Belgium)\',\n-        u\'flag\': u\'/++resource++country-flags/de.gif\',\n+    "de-be": {\n+        "name": "German (Belgium)",\n+        "flag": "/++resource++country-flags/de.gif",\n     },\n-    u\'de-ch\': {\n-        u\'name\': \'German (Switzerland)\',\n-        u\'flag\': u\'/++resource++country-flags/ch.gif\',\n+    "de-ch": {\n+        "name": "German (Switzerland)",\n+        "flag": "/++resource++country-flags/ch.gif",\n     },\n-    u\'de-de\': {\n-        u\'name\': \'German (Germany)\',\n-        u\'flag\': u\'/++resource++country-flags/de.gif\',\n+    "de-de": {\n+        "name": "German (Germany)",\n+        "flag": "/++resource++country-flags/de.gif",\n     },\n-    u\'de-dk\': {\n-        u\'name\': \'German (Denmark)\',\n-        u\'flag\': u\'/++resource++country-flags/de.gif\',\n+    "de-dk": {\n+        "name": "German (Denmark)",\n+        "flag": "/++resource++country-flags/de.gif",\n     },\n-    u\'de-li\': {\n-        u\'name\': \'German (Liechtenstein)\',\n-        u\'flag\': u\'/++resource++country-flags/li.gif\',\n+    "de-li": {\n+        "name": "German (Liechtenstein)",\n+        "flag": "/++resource++country-flags/li.gif",\n     },\n-    u\'de-lu\': {\n-        u\'name\': \'German (Luxembourg)\',\n-        u\'flag\': u\'/++resource++country-flags/de.gif\',\n+    "de-lu": {\n+        "name": "German (Luxembourg)",\n+        "flag": "/++resource++country-flags/de.gif",\n     },\n-    u\'el-cy\': {\n-        u\'name\': \'Greek (Cyprus)\',\n-        u\'flag\': u\'/++resource++country-flags/cy.gif\',\n+    "el-cy": {\n+        "name": "Greek (Cyprus)",\n+        "flag": "/++resource++country-flags/cy.gif",\n     },\n-    u\'el-gr\': {\n-        u\'name\': \'Greek (Greece)\',\n-        u\'flag\': u\'/++resource++country-flags/gr.gif\',\n+    "el-gr": {\n+        "name": "Greek (Greece)",\n+        "flag": "/++resource++country-flags/gr.gif",\n     },\n-    u\'en-ag\': {\n-        u\'name\': \'English (Antigua and Barbuda)\',\n-        u\'flag\': u\'/++resource++country-flags/ag.gif\',\n+    "en-ag": {\n+        "name": "English (Antigua and Barbuda)",\n+        "flag": "/++resource++country-flags/ag.gif",\n     },\n-    u\'en-ai\': {\n-        u\'name\': \'English (Anguilla)\',\n-        u\'flag\': u\'/++resource++country-flags/ai.gif\',\n+    "en-ai": {\n+        "name": "English (Anguilla)",\n+        "flag": "/++resource++country-flags/ai.gif",\n     },\n-    u\'en-as\': {\n-        u\'name\': \'English (American Samoa)\',\n-        u\'flag\': u\'/++resource++country-flags/as.gif\',\n+    "en-as": {\n+        "name": "English (American Samoa)",\n+        "flag": "/++resource++country-flags/as.gif",\n     },\n-    u\'en-au\': {\n-        u\'name\': \'English (Australia)\',\n-        u\'flag\': u\'/++resource++country-flags/au.gif\',\n+    "en-au": {\n+        "name": "English (Australia)",\n+        "flag": "/++resource++country-flags/au.gif",\n     },\n-    u\'en-bb\': {\n-        u\'name\': \'English (Barbados)\',\n-        u\'flag\': u\'/++resource++country-flags/bb.gif\',\n+    "en-bb": {\n+        "name": "English (Barbados)",\n+        "flag": "/++resource++country-flags/bb.gif",\n     },\n-    u\'en-bm\': {\n-        u\'name\': \'English (Bermuda)\',\n-        u\'flag\': u\'/++resource++country-flags/bm.gif\',\n+    "en-bm": {\n+        "name": "English (Bermuda)",\n+        "flag": "/++resource++country-flags/bm.gif",\n     },\n-    u\'en-bn\': {\n-        u\'name\': \'English (Brunei)\',\n-        u\'flag\': u\'/++resource++country-flags/bn.gif\',\n+    "en-bn": {\n+        "name": "English (Brunei)",\n+        "flag": "/++resource++country-flags/bn.gif",\n     },\n-    u\'en-bs\': {\n-        u\'name\': \'English (Bahamas)\',\n-        u\'flag\': u\'/++resource++country-flags/bs.gif\',\n+    "en-bs": {\n+        "name": "English (Bahamas)",\n+        "flag": "/++resource++country-flags/bs.gif",\n     },\n-    u\'en-bw\': {\n-        u\'name\': \'English (Botswana)\',\n-        u\'flag\': u\'/++resource++country-flags/bw.gif\',\n+    "en-bw": {\n+        "name": "English (Botswana)",\n+        "flag": "/++resource++country-flags/bw.gif",\n     },\n-    u\'en-bz\': {\n-        u\'name\': \'English (Belize)\',\n-        u\'flag\': u\'/++resource++country-flags/bz.gif\',\n+    "en-bz": {\n+        "name": "English (Belize)",\n+        "flag": "/++resource++country-flags/bz.gif",\n     },\n-    u\'en-ca\': {\n-        u\'name\': \'English (Canada)\',\n-        u\'flag\': u\'/++resource++country-flags/ca.gif\',\n+    "en-ca": {\n+        "name": "English (Canada)",\n+        "flag": "/++resource++country-flags/ca.gif",\n     },\n-    u\'en-ck\': {\n-        u\'name\': \'English (Cook Islands)\',\n-        u\'flag\': u\'/++resource++country-flags/ck.gif\',\n+    "en-ck": {\n+        "name": "English (Cook Islands)",\n+        "flag": "/++resource++country-flags/ck.gif",\n     },\n-    u\'en-cm\': {\n-        u\'name\': \'English (Cameroon)\',\n-        u\'flag\': u\'/++resource++country-flags/cm.gif\',\n+    "en-cm": {\n+        "name": "English (Cameroon)",\n+        "flag": "/++resource++country-flags/cm.gif",\n     },\n-    u\'en-dm\': {\n-        u\'name\': \'English (Dominica)\',\n-        u\'flag\': u\'/++resource++country-flags/dm.gif\',\n+    "en-dm": {\n+        "name": "English (Dominica)",\n+        "flag": "/++resource++country-flags/dm.gif",\n     },\n-    u\'en-er\': {\n-        u\'name\': \'English (Eritrea)\',\n-        u\'flag\': u\'/++resource++country-flags/er.gif\',\n+    "en-er": {\n+        "name": "English (Eritrea)",\n+        "flag": "/++resource++country-flags/er.gif",\n     },\n-    u\'en-et\': {\n-        u\'name\': \'English (Ethiopia)\',\n-        u\'flag\': u\'/++resource++country-flags/et.gif\',\n+    "en-et": {\n+        "name": "English (Ethiopia)",\n+        "flag": "/++resource++country-flags/et.gif",\n     },\n-    u\'en-fj\': {\n-        u\'name\': \'English (Fiji)\',\n-        u\'flag\': u\'/++resource++country-flags/fj.gif\',\n+    "en-fj": {\n+        "name": "English (Fiji)",\n+        "flag": "/++resource++country-flags/fj.gif",\n     },\n-    u\'en-fk\': {\n-        u\'name\': \'English (Falkland Islands)\',\n-        u\'flag\': u\'/++resource++country-flags/fk.gif\',\n+    "en-fk": {\n+        "name": "English (Falkland Islands)",\n+        "flag": "/++resource++country-flags/fk.gif",\n     },\n-    u\'en-fm\': {\n-        u\'name\': \'English (Micronesia)\',\n-        u\'flag\': u\'/++resource++country-flags/fm.gif\',\n+    "en-fm": {\n+        "name": "English (Micronesia)",\n+        "flag": "/++resource++country-flags/fm.gif",\n     },\n-    u\'en-gb\': {\n-        u\'name\': \'English (United Kingdom)\',\n-        u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+    "en-gb": {\n+        "name": "English (United Kingdom)",\n+        "flag": "/++resource++country-flags/gb.gif",\n     },\n-    u\'en-gd\': {\n-        u\'name\': \'English (Grenada)\',\n-        u\'flag\': u\'/++resource++country-flags/gd.gif\',\n+    "en-gd": {\n+        "name": "English (Grenada)",\n+        "flag": "/++resource++country-flags/gd.gif",\n     },\n-    u\'en-gh\': {\n-        u\'name\': \'English (Ghana)\',\n-        u\'flag\': u\'/++resource++country-flags/gh.gif\',\n+    "en-gh": {\n+        "name": "English (Ghana)",\n+        "flag": "/++resource++country-flags/gh.gif",\n     },\n-    u\'en-gi\': {\n-        u\'name\': \'English (Gibraltar)\',\n-        u\'flag\': u\'/++resource++country-flags/gi.gif\',\n+    "en-gi": {\n+        "name": "English (Gibraltar)",\n+        "flag": "/++resource++country-flags/gi.gif",\n     },\n-    u\'en-gm\': {\n-        u\'name\': \'English (Gambia)\',\n-        u\'flag\': u\'/++resource++country-flags/gm.gif\',\n+    "en-gm": {\n+        "name": "English (Gambia)",\n+        "flag": "/++resource++country-flags/gm.gif",\n     },\n-    u\'en-gu\': {\n-        u\'name\': \'English (Guam)\',\n-        u\'flag\': u\'/++resource++country-flags/gu.gif\',\n+    "en-gu": {\n+        "name": "English (Guam)",\n+        "flag": "/++resource++country-flags/gu.gif",\n     },\n-    u\'en-gy\': {\n-        u\'name\': \'English (Guyana)\',\n-        u\'flag\': u\'/++resource++country-flags/gy.gif\',\n+    "en-gy": {\n+        "name": "English (Guyana)",\n+        "flag": "/++resource++country-flags/gy.gif",\n     },\n-    u\'en-ie\': {\n-        u\'name\': \'English (Ireland)\',\n-        u\'flag\': u\'/++resource++country-flags/ie.gif\',\n+    "en-ie": {\n+        "name": "English (Ireland)",\n+        "flag": "/++resource++country-flags/ie.gif",\n     },\n-    u\'en-il\': {\n-        u\'name\': \'English (Israel)\',\n-        u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+    "en-il": {\n+        "name": "English (Israel)",\n+        "flag": "/++resource++country-flags/gb.gif",\n     },\n-    u\'en-io\': {\n-        u\'name\': \'English (British Indian Ocean Territory)\',\n-        u\'flag\': u\'/++resource++country-flags/io.gif\',\n+    "en-io": {\n+        "name": "English (British Indian Ocean Territory)",\n+        "flag": "/++resource++country-flags/io.gif",\n     },\n-    u\'en-jm\': {\n-        u\'name\': \'English (Jamaica)\',\n-        u\'flag\': u\'/++resource++country-flags/jm.gif\',\n+    "en-jm": {\n+        "name": "English (Jamaica)",\n+        "flag": "/++resource++country-flags/jm.gif",\n     },\n-    u\'en-ke\': {\n-        u\'name\': \'English (Kenya)\',\n-        u\'flag\': u\'/++resource++country-flags/ke.gif\',\n+    "en-ke": {\n+        "name": "English (Kenya)",\n+        "flag": "/++resource++country-flags/ke.gif",\n     },\n-    u\'en-ki\': {\n-        u\'name\': \'English (Kiribati)\',\n-        u\'flag\': u\'/++resource++country-flags/ki.gif\',\n+    "en-ki": {\n+        "name": "English (Kiribati)",\n+        "flag": "/++resource++country-flags/ki.gif",\n     },\n-    u\'en-kn\': {\n-        u\'name\': \'English (St. Kitts-Nevis)\',\n-        u\'flag\': u\'/++resource++country-flags/kn.gif\',\n+    "en-kn": {\n+        "name": "English (St. Kitts-Nevis)",\n+        "flag": "/++resource++country-flags/kn.gif",\n     },\n-    u\'en-ky\': {\n-        u\'name\': \'English (Cayman Islands)\',\n-        u\'flag\': u\'/++resource++country-flags/ky.gif\',\n+    "en-ky": {\n+        "name": "English (Cayman Islands)",\n+        "flag": "/++resource++country-flags/ky.gif",\n     },\n-    u\'en-lc\': {\n-        u\'name\': \'English (St. Lucia)\',\n-        u\'flag\': u\'/++resource++country-flags/lc.gif\',\n+    "en-lc": {\n+        "name": "English (St. Lucia)",\n+        "flag": "/++resource++country-flags/lc.gif",\n     },\n-    u\'en-lr\': {\n-        u\'name\': \'English (Liberia)\',\n-        u\'flag\': u\'/++resource++country-flags/lr.gif\',\n+    "en-lr": {\n+        "name": "English (Liberia)",\n+        "flag": "/++resource++country-flags/lr.gif",\n     },\n-    u\'en-ls\': {\n-        u\'name\': \'English (Lesotho)\',\n-        u\'flag\': u\'/++resource++country-flags/ls.gif\',\n+    "en-ls": {\n+        "name": "English (Lesotho)",\n+        "flag": "/++resource++country-flags/ls.gif",\n     },\n-    u\'en-mp\': {\n-        u\'name\': \'English (Northern Mariana Islands)\',\n-        u\'flag\': u\'/++resource++country-flags/mp.gif\',\n+    "en-mp": {\n+        "name": "English (Northern Mariana Islands)",\n+        "flag": "/++resource++country-flags/mp.gif",\n     },\n-    u\'en-ms\': {\n-        u\'name\': \'English (Montserrat)\',\n-        u\'flag\': u\'/++resource++country-flags/ms.gif\',\n+    "en-ms": {\n+        "name": "English (Montserrat)",\n+        "flag": "/++resource++country-flags/ms.gif",\n     },\n-    u\'en-mt\': {\n-        u\'name\': \'English (Malta)\',\n-        u\'flag\': u\'/++resource++country-flags/mt.gif\',\n+    "en-mt": {\n+        "name": "English (Malta)",\n+        "flag": "/++resource++country-flags/mt.gif",\n     },\n-    u\'en-mu\': {\n-        u\'name\': \'English (Mauritius)\',\n-        u\'flag\': u\'/++resource++country-flags/mu.gif\',\n+    "en-mu": {\n+        "name": "English (Mauritius)",\n+        "flag": "/++resource++country-flags/mu.gif",\n     },\n-    u\'en-mw\': {\n-        u\'name\': \'English (Malawi)\',\n-        u\'flag\': u\'/++resource++country-flags/mw.gif\',\n+    "en-mw": {\n+        "name": "English (Malawi)",\n+        "flag": "/++resource++country-flags/mw.gif",\n     },\n-    u\'en-na\': {\n-        u\'name\': \'English (Namibia)\',\n-        u\'flag\': u\'/++resource++country-flags/na.gif\',\n+    "en-na": {\n+        "name": "English (Namibia)",\n+        "flag": "/++resource++country-flags/na.gif",\n     },\n-    u\'en-nf\': {\n-        u\'name\': \'English (Norfolk Island)\',\n-        u\'flag\': u\'/++resource++country-flags/nf.gif\',\n+    "en-nf": {\n+        "name": "English (Norfolk Island)",\n+        "flag": "/++resource++country-flags/nf.gif",\n     },\n-    u\'en-ng\': {\n-        u\'name\': \'English (Nigeria)\',\n-        u\'flag\': u\'/++resource++country-flags/ng.gif\',\n+    "en-ng": {\n+        "name": "English (Nigeria)",\n+        "flag": "/++resource++country-flags/ng.gif",\n     },\n-    u\'en-nr\': {\n-        u\'name\': \'English (Nauru)\',\n-        u\'flag\': u\'/++resource++country-flags/nr.gif\',\n+    "en-nr": {\n+        "name": "English (Nauru)",\n+        "flag": "/++resource++country-flags/nr.gif",\n     },\n-    u\'en-nu\': {\n-        u\'name\': \'English (Niue)\',\n-        u\'flag\': u\'/++resource++country-flags/nu.gif\',\n+    "en-nu": {\n+        "name": "English (Niue)",\n+        "flag": "/++resource++country-flags/nu.gif",\n     },\n-    u\'en-nz\': {\n-        u\'name\': \'English (New Zealand)\',\n-        u\'flag\': u\'/++resource++country-flags/nz.gif\',\n+    "en-nz": {\n+        "name": "English (New Zealand)",\n+        "flag": "/++resource++country-flags/nz.gif",\n     },\n-    u\'en-pg\': {\n-        u\'name\': \'English (Papua New Guinea)\',\n-        u\'flag\': u\'/++resource++country-flags/pg.gif\',\n+    "en-pg": {\n+        "name": "English (Papua New Guinea)",\n+        "flag": "/++resource++country-flags/pg.gif",\n     },\n-    u\'en-ph\': {\n-        u\'name\': \'English (Philippines)\',\n-        u\'flag\': u\'/++resource++country-flags/ph.gif\',\n+    "en-ph": {\n+        "name": "English (Philippines)",\n+        "flag": "/++resource++country-flags/ph.gif",\n     },\n-    u\'en-pk\': {\n-        u\'name\': \'English (Pakistan)\',\n-        u\'flag\': u\'/++resource++country-flags/pk.gif\',\n+    "en-pk": {\n+        "name": "English (Pakistan)",\n+        "flag": "/++resource++country-flags/pk.gif",\n     },\n-    u\'en-pn\': {\n-        u\'name\': \'English (Pitcairn)\',\n-        u\'flag\': u\'/++resource++country-flags/pn.gif\',\n+    "en-pn": {\n+        "name": "English (Pitcairn)",\n+        "flag": "/++resource++country-flags/pn.gif",\n     },\n-    u\'en-pr\': {\n-        u\'name\': \'English (Puerto Rico)\',\n-        u\'flag\': u\'/++resource++country-flags/pr.gif\',\n+    "en-pr": {\n+        "name": "English (Puerto Rico)",\n+        "flag": "/++resource++country-flags/pr.gif",\n     },\n-    u\'en-pw\': {\n-        u\'name\': \'English (Palau)\',\n-        u\'flag\': u\'/++resource++country-flags/pw.gif\',\n+    "en-pw": {\n+        "name": "English (Palau)",\n+        "flag": "/++resource++country-flags/pw.gif",\n     },\n-    u\'en-rw\': {\n-        u\'name\': \'English (Rwanda)\',\n-        u\'flag\': u\'/++resource++country-flags/rw.gif\',\n+    "en-rw": {\n+        "name": "English (Rwanda)",\n+        "flag": "/++resource++country-flags/rw.gif",\n     },\n-    u\'en-sb\': {\n-        u\'name\': \'English (Solomon Islands)\',\n-        u\'flag\': u\'/++resource++country-flags/sb.gif\',\n+    "en-sb": {\n+        "name": "English (Solomon Islands)",\n+        "flag": "/++resource++country-flags/sb.gif",\n     },\n-    u\'en-sc\': {\n-        u\'name\': \'English (Seychelles)\',\n-        u\'flag\': u\'/++resource++country-flags/sc.gif\',\n+    "en-sc": {\n+        "name": "English (Seychelles)",\n+        "flag": "/++resource++country-flags/sc.gif",\n     },\n-    u\'en-sg\': {\n-        u\'name\': \'English (Singapore)\',\n-        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n+    "en-sg": {\n+        "name": "English (Singapore)",\n+        "flag": "/++resource++country-flags/sg.gif",\n     },\n-    u\'en-sh\': {\n-        u\'name\': \'English (St. Helena)\',\n-        u\'flag\': u\'/++resource++country-flags/sh.gif\',\n+    "en-sh": {\n+        "name": "English (St. Helena)",\n+        "flag": "/++resource++country-flags/sh.gif",\n     },\n-    u\'en-sl\': {\n-        u\'name\': \'English (Sierra Leone)\',\n-        u\'flag\': u\'/++resource++country-flags/sl.gif\',\n+    "en-sl": {\n+        "name": "English (Sierra Leone)",\n+        "flag": "/++resource++country-flags/sl.gif",\n     },\n-    u\'en-so\': {\n-        u\'name\': \'English (Somalia)\',\n-        u\'flag\': u\'/++resource++country-flags/so.gif\',\n+    "en-so": {\n+        "name": "English (Somalia)",\n+        "flag": "/++resource++country-flags/so.gif",\n     },\n-    u\'en-sz\': {\n-        u\'name\': \'English (Swaziland)\',\n-        u\'flag\': u\'/++resource++country-flags/sz.gif\',\n+    "en-sz": {\n+        "name": "English (Swaziland)",\n+        "flag": "/++resource++country-flags/sz.gif",\n     },\n-    u\'en-tc\': {\n-        u\'name\': \'English (Turks and Caicos Islands)\',\n-        u\'flag\': u\'/++resource++country-flags/tc.gif\',\n+    "en-tc": {\n+        "name": "English (Turks and Caicos Islands)",\n+        "flag": "/++resource++country-flags/tc.gif",\n     },\n-    u\'en-tk\': {\n-        u\'name\': \'English (Tokelau)\',\n-        u\'flag\': u\'/++resource++country-flags/tk.gif\',\n+    "en-tk": {\n+        "name": "English (Tokelau)",\n+        "flag": "/++resource++country-flags/tk.gif",\n     },\n-    u\'en-to\': {\n-        u\'name\': \'English (Tonga)\',\n-        u\'flag\': u\'/++resource++country-flags/to.gif\',\n+    "en-to": {\n+        "name": "English (Tonga)",\n+        "flag": "/++resource++country-flags/to.gif",\n     },\n-    u\'en-tt\': {\n-        u\'name\': \'English (Trinidad and Tobago)\',\n-        u\'flag\': u\'/++resource++country-flags/tt.gif\',\n+    "en-tt": {\n+        "name": "English (Trinidad and Tobago)",\n+        "flag": "/++resource++country-flags/tt.gif",\n     },\n-    u\'en-ug\': {\n-        u\'name\': \'English (Uganda)\',\n-        u\'flag\': u\'/++resource++country-flags/ug.gif\',\n+    "en-ug": {\n+        "name": "English (Uganda)",\n+        "flag": "/++resource++country-flags/ug.gif",\n     },\n-    u\'en-us\': {\n-        u\'name\': \'English (USA)\',\n-        u\'flag\': u\'/++resource++country-flags/us.gif\',\n+    "en-us": {\n+        "name": "English (USA)",\n+        "flag": "/++resource++country-flags/us.gif",\n     },\n-    u\'en-vc\': {\n-        u\'name\': \'English (St. Vincent and the Grenadi)\',\n-        u\'flag\': u\'/++resource++country-flags/vc.gif\',\n+    "en-vc": {\n+        "name": "English (St. Vincent and the Grenadi)",\n+        "flag": "/++resource++country-flags/vc.gif",\n     },\n-    u\'en-vg\': {\n-        u\'name\': \'English (British Virgin Islands)\',\n-        u\'flag\': u\'/++resource++country-flags/vg.gif\',\n+    "en-vg": {\n+        "name": "English (British Virgin Islands)",\n+        "flag": "/++resource++country-flags/vg.gif",\n     },\n-    u\'en-vi\': {\n-        u\'name\': \'English (U.S. Virgin Islands)\',\n-        u\'flag\': u\'/++resource++country-flags/vi.gif\',\n+    "en-vi": {\n+        "name": "English (U.S. Virgin Islands)",\n+        "flag": "/++resource++country-flags/vi.gif",\n     },\n-    u\'en-vu\': {\n-        u\'name\': \'English (Vanuatu)\',\n-        u\'flag\': u\'/++resource++country-flags/vu.gif\',\n+    "en-vu": {\n+        "name": "English (Vanuatu)",\n+        "flag": "/++resource++country-flags/vu.gif",\n     },\n-    u\'en-ws\': {\n-        u\'name\': \'English (Western Samoa)\',\n-        u\'flag\': u\'/++resource++country-flags/ws.gif\',\n+    "en-ws": {\n+        "name": "English (Western Samoa)",\n+        "flag": "/++resource++country-flags/ws.gif",\n     },\n-    u\'en-za\': {\n-        u\'name\': \'English (South Africa)\',\n-        u\'flag\': u\'/++resource++country-flags/za.gif\',\n+    "en-za": {\n+        "name": "English (South Africa)",\n+        "flag": "/++resource++country-flags/za.gif",\n     },\n-    u\'en-zm\': {\n-        u\'name\': \'English (Zambia)\',\n-        u\'flag\': u\'/++resource++country-flags/zm.gif\',\n+    "en-zm": {\n+        "name": "English (Zambia)",\n+        "flag": "/++resource++country-flags/zm.gif",\n     },\n-    u\'en-zw\': {\n-        u\'name\': \'English (Zimbabwe)\',\n-        u\'flag\': u\'/++resource++country-flags/zw.gif\',\n+    "en-zw": {\n+        "name": "English (Zimbabwe)",\n+        "flag": "/++resource++country-flags/zw.gif",\n     },\n-    u\'es-ar\': {\n-        u\'name\': \'Spanish (Argentina)\',\n-        u\'flag\': u\'/++resource++country-flags/ar.gif\',\n+    "es-ar": {\n+        "name": "Spanish (Argentina)",\n+        "flag": "/++resource++country-flags/ar.gif",\n     },\n-    u\'es-bo\': {\n-        u\'name\': \'Spanish (Bolivia)\',\n-        u\'flag\': u\'/++resource++country-flags/bo.gif\',\n+    "es-bo": {\n+        "name": "Spanish (Bolivia)",\n+        "flag": "/++resource++country-flags/bo.gif",\n     },\n-    u\'es-cl\': {\n-        u\'name\': \'Spanish (Chile)\',\n-        u\'flag\': u\'/++resource++country-flags/cl.gif\',\n+    "es-cl": {\n+        "name": "Spanish (Chile)",\n+        "flag": "/++resource++country-flags/cl.gif",\n     },\n-    u\'es-co\': {\n-        u\'name\': \'Spanish (Colombia)\',\n-        u\'flag\': u\'/++resource++country-flags/co.gif\',\n+    "es-co": {\n+        "name": "Spanish (Colombia)",\n+        "flag": "/++resource++country-flags/co.gif",\n     },\n-    u\'es-cr\': {\n-        u\'name\': \'Spanish (Costa Rica)\',\n-        u\'flag\': u\'/++resource++country-flags/cr.gif\',\n+    "es-cr": {\n+        "name": "Spanish (Costa Rica)",\n+        "flag": "/++resource++country-flags/cr.gif",\n     },\n-    u\'es-cu\': {\n-        u\'name\': \'Spanish (Cuba)\',\n-        u\'flag\': u\'/++resource++country-flags/cu.gif\',\n+    "es-cu": {\n+        "name": "Spanish (Cuba)",\n+        "flag": "/++resource++country-flags/cu.gif",\n     },\n-    u\'es-do\': {\n-        u\'name\': \'Spanish (Dominican Republic)\',\n-        u\'flag\': u\'/++resource++country-flags/do.gif\',\n+    "es-do": {\n+        "name": "Spanish (Dominican Republic)",\n+        "flag": "/++resource++country-flags/do.gif",\n     },\n-    u\'es-ec\': {\n-        u\'name\': \'Spanish (Ecuador)\',\n-        u\'flag\': u\'/++resource++country-flags/ec.gif\',\n+    "es-ec": {\n+        "name": "Spanish (Ecuador)",\n+        "flag": "/++resource++country-flags/ec.gif",\n     },\n-    u\'es-es\': {\n-        u\'name\': \'Spanish (Spain)\',\n-        u\'flag\': u\'/++resource++country-flags/es.gif\',\n+    "es-es": {\n+        "name": "Spanish (Spain)",\n+        "flag": "/++resource++country-flags/es.gif",\n     },\n-    u\'es-gq\': {\n-        u\'name\': \'Spanish (Equatorial Guinea)\',\n-        u\'flag\': u\'/++resource++country-flags/gq.gif\',\n+    "es-gq": {\n+        "name": "Spanish (Equatorial Guinea)",\n+        "flag": "/++resource++country-flags/gq.gif",\n     },\n-    u\'es-gt\': {\n-        u\'name\': \'Spanish (Guatemala)\',\n-        u\'flag\': u\'/++resource++country-flags/gt.gif\',\n+    "es-gt": {\n+        "name": "Spanish (Guatemala)",\n+        "flag": "/++resource++country-flags/gt.gif",\n     },\n-    u\'es-hn\': {\n-        u\'name\': \'Spanish (Honduras)\',\n-        u\'flag\': u\'/++resource++country-flags/hn.gif\',\n+    "es-hn": {\n+        "name": "Spanish (Honduras)",\n+        "flag": "/++resource++country-flags/hn.gif",\n     },\n-    u\'es-mx\': {\n-        u\'name\': \'Spanish (Mexico)\',\n-        u\'flag\': u\'/++resource++country-flags/mx.gif\',\n+    "es-mx": {\n+        "name": "Spanish (Mexico)",\n+        "flag": "/++resource++country-flags/mx.gif",\n     },\n-    u\'es-ni\': {\n-        u\'name\': \'Spanish (Nicaragua)\',\n-        u\'flag\': u\'/++resource++country-flags/ni.gif\',\n+    "es-ni": {\n+        "name": "Spanish (Nicaragua)",\n+        "flag": "/++resource++country-flags/ni.gif",\n     },\n-    u\'es-pa\': {\n-        u\'name\': \'Spanish (Panama)\',\n-        u\'flag\': u\'/++resource++country-flags/pa.gif\',\n+    "es-pa": {\n+        "name": "Spanish (Panama)",\n+        "flag": "/++resource++country-flags/pa.gif",\n     },\n-    u\'es-pe\': {\n-        u\'name\': \'Spanish (Peru)\',\n-        u\'flag\': u\'/++resource++country-flags/pe.gif\',\n+    "es-pe": {\n+        "name": "Spanish (Peru)",\n+        "flag": "/++resource++country-flags/pe.gif",\n     },\n-    u\'es-pr\': {\n-        u\'name\': \'Spanish (Puerto Rico)\',\n-        u\'flag\': u\'/++resource++country-flags/pr.gif\',\n+    "es-pr": {\n+        "name": "Spanish (Puerto Rico)",\n+        "flag": "/++resource++country-flags/pr.gif",\n     },\n-    u\'es-py\': {\n-        u\'name\': \'Spanish (Paraguay)\',\n-        u\'flag\': u\'/++resource++country-flags/py.gif\',\n+    "es-py": {\n+        "name": "Spanish (Paraguay)",\n+        "flag": "/++resource++country-flags/py.gif",\n     },\n-    u\'es-sv\': {\n-        u\'name\': \'Spanish (El Salvador)\',\n-        u\'flag\': u\'/++resource++country-flags/sv.gif\',\n+    "es-sv": {\n+        "name": "Spanish (El Salvador)",\n+        "flag": "/++resource++country-flags/sv.gif",\n     },\n-    u\'es-us\': {\n-        u\'name\': \'Spanish (USA)\',\n-        u\'flag\': u\'/++resource++country-flags/us.gif\',\n+    "es-us": {\n+        "name": "Spanish (USA)",\n+        "flag": "/++resource++country-flags/us.gif",\n     },\n-    u\'es-uy\': {\n-        u\'name\': \'Spanish (Uruguay)\',\n-        u\'flag\': u\'/++resource++country-flags/uy.gif\',\n+    "es-uy": {\n+        "name": "Spanish (Uruguay)",\n+        "flag": "/++resource++country-flags/uy.gif",\n     },\n-    u\'es-ve\': {\n-        u\'name\': \'Spanish (Venezuela)\',\n-        u\'flag\': u\'/++resource++country-flags/ve.gif\',\n+    "es-ve": {\n+        "name": "Spanish (Venezuela)",\n+        "flag": "/++resource++country-flags/ve.gif",\n     },\n-    u\'fr-ad\': {\n-        u\'name\': \'French (Andorra)\',\n-        u\'flag\': u\'/++resource++country-flags/ad.gif\',\n+    "fr-ad": {\n+        "name": "French (Andorra)",\n+        "flag": "/++resource++country-flags/ad.gif",\n     },\n-    u\'fr-be\': {\n-        u\'name\': \'French (Belgium)\',\n-        u\'flag\': u\'/++resource++country-flags/be.gif\',\n+    "fr-be": {\n+        "name": "French (Belgium)",\n+        "flag": "/++resource++country-flags/be.gif",\n     },\n-    u\'fr-bf\': {\n-        u\'name\': \'French (Burkina Faso)\',\n-        u\'flag\': u\'/++resource++country-flags/bf.gif\',\n+    "fr-bf": {\n+        "name": "French (Burkina Faso)",\n+        "flag": "/++resource++country-flags/bf.gif",\n     },\n-    u\'fr-bi\': {\n-        u\'name\': \'French (Burundi)\',\n-        u\'flag\': u\'/++resource++country-flags/bi.gif\',\n+    "fr-bi": {\n+        "name": "French (Burundi)",\n+        "flag": "/++resource++country-flags/bi.gif",\n     },\n-    u\'fr-bj\': {\n-        u\'name\': \'French (Benin)\',\n-        u\'flag\': u\'/++resource++country-flags/bj.gif\',\n+    "fr-bj": {\n+        "name": "French (Benin)",\n+        "flag": "/++resource++country-flags/bj.gif",\n     },\n-    u\'fr-ca\': {\n-        u\'name\': \'French (Canada)\',\n-        u\'flag\': u\'/++resource++country-flags/ca.gif\',\n+    "fr-ca": {\n+        "name": "French (Canada)",\n+        "flag": "/++resource++country-flags/ca.gif",\n     },\n-    u\'fr-cd\': {\n-        u\'name\': \'French (Democratic Republic of Congo)\',\n-        u\'flag\': u\'/++resource++country-flags/cd.gif\',\n+    "fr-cd": {\n+        "name": "French (Democratic Republic of Congo)",\n+        "flag": "/++resource++country-flags/cd.gif",\n     },\n-    u\'fr-cf\': {\n-        u\'name\': \'French (Central African Republic)\',\n-        u\'flag\': u\'/++resource++country-flags/cf.gif\',\n+    "fr-cf": {\n+        "name": "French (Central African Republic)",\n+        "flag": "/++resource++country-flags/cf.gif",\n     },\n-    u\'fr-cg\': {\n-        u\'name\': \'French (Congo)\',\n-        u\'flag\': u\'/++resource++country-flags/cg.gif\',\n+    "fr-cg": {\n+        "name": "French (Congo)",\n+        "flag": "/++resource++country-flags/cg.gif",\n     },\n-    u\'fr-ch\': {\n-        u\'name\': \'French (Switzerland)\',\n-        u\'flag\': u\'/++resource++country-flags/ch.gif\',\n+    "fr-ch": {\n+        "name": "French (Switzerland)",\n+        "flag": "/++resource++country-flags/ch.gif",\n     },\n-    u\'fr-ci\': {\n-        u\'name\': \'French (Cote d\\\'Ivoire)\',\n-        u\'flag\': u\'/++resource++country-flags/ci.gif\',\n+    "fr-ci": {\n+        "name": "French (Cote d\'Ivoire)",\n+        "flag": "/++resource++country-flags/ci.gif",\n     },\n-    u\'fr-cm\': {\n-        u\'name\': \'French (Cameroon)\',\n-        u\'flag\': u\'/++resource++country-flags/cm.gif\',\n+    "fr-cm": {\n+        "name": "French (Cameroon)",\n+        "flag": "/++resource++country-flags/cm.gif",\n     },\n-    u\'fr-dj\': {\n-        u\'name\': \'French (Djibouti)\',\n-        u\'flag\': u\'/++resource++country-flags/dj.gif\',\n+    "fr-dj": {\n+        "name": "French (Djibouti)",\n+        "flag": "/++resource++country-flags/dj.gif",\n     },\n-    u\'fr-fr\': {\n-        u\'name\': \'French (France)\',\n-        u\'flag\': u\'/++resource++country-flags/fr.gif\',\n+    "fr-fr": {\n+        "name": "French (France)",\n+        "flag": "/++resource++country-flags/fr.gif",\n     },\n-    u\'fr-ga\': {\n-        u\'name\': \'French (Gabon)\',\n-        u\'flag\': u\'/++resource++country-flags/ga.gif\',\n+    "fr-ga": {\n+        "name": "French (Gabon)",\n+        "flag": "/++resource++country-flags/ga.gif",\n     },\n-    u\'fr-gb\': {\n-        u\'name\': \'French (United Kingdom)\',\n-        u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+    "fr-gb": {\n+        "name": "French (United Kingdom)",\n+        "flag": "/++resource++country-flags/gb.gif",\n     },\n-    u\'fr-gf\': {\n-        u\'name\': \'French (French Guiana)\',\n-        u\'flag\': u\'/++resource++country-flags/gf.gif\',\n+    "fr-gf": {\n+        "name": "French (French Guiana)",\n+        "flag": "/++resource++country-flags/gf.gif",\n     },\n-    u\'fr-gn\': {\n-        u\'name\': \'French (Guinea)\',\n-        u\'flag\': u\'/++resource++country-flags/gn.gif\',\n+    "fr-gn": {\n+        "name": "French (Guinea)",\n+        "flag": "/++resource++country-flags/gn.gif",\n     },\n-    u\'fr-gp\': {\n-        u\'name\': \'French (Guadeloupe)\',\n-        u\'flag\': u\'/++resource++country-flags/gp.gif\',\n+    "fr-gp": {\n+        "name": "French (Guadeloupe)",\n+        "flag": "/++resource++country-flags/gp.gif",\n     },\n-    u\'fr-ht\': {\n-        u\'name\': \'French (Haiti)\',\n-        u\'flag\': u\'/++resource++country-flags/ht.gif\',\n+    "fr-ht": {\n+        "name": "French (Haiti)",\n+        "flag": "/++resource++country-flags/ht.gif",\n     },\n-    u\'fr-it\': {\n-        u\'name\': \'French (Italy)\',\n-        u\'flag\': u\'/++resource++country-flags/it.gif\',\n+    "fr-it": {\n+        "name": "French (Italy)",\n+        "flag": "/++resource++country-flags/it.gif",\n     },\n-    u\'fr-km\': {\n-        u\'name\': \'French (Comoros Islands)\',\n-        u\'flag\': u\'/++resource++country-flags/km.gif\',\n+    "fr-km": {\n+        "name": "French (Comoros Islands)",\n+        "flag": "/++resource++country-flags/km.gif",\n     },\n-    u\'fr-lb\': {\n-        u\'name\': \'French (Lebanon)\',\n-        u\'flag\': u\'/++resource++country-flags/lb.gif\',\n+    "fr-lb": {\n+        "name": "French (Lebanon)",\n+        "flag": "/++resource++country-flags/lb.gif",\n     },\n-    u\'fr-lu\': {\n-        u\'name\': \'French (Luxembourg)\',\n-        u\'flag\': u\'/++resource++country-flags/lu.gif\',\n+    "fr-lu": {\n+        "name": "French (Luxembourg)",\n+        "flag": "/++resource++country-flags/lu.gif",\n     },\n-    u\'fr-mc\': {\n-        u\'name\': \'French (Monaco)\',\n-        u\'flag\': u\'/++resource++country-flags/mc.gif\',\n+    "fr-mc": {\n+        "name": "French (Monaco)",\n+        "flag": "/++resource++country-flags/mc.gif",\n     },\n-    u\'fr-mg\': {\n-        u\'name\': \'French (Madagascar)\',\n-        u\'flag\': u\'/++resource++country-flags/mg.gif\',\n+    "fr-mg": {\n+        "name": "French (Madagascar)",\n+        "flag": "/++resource++country-flags/mg.gif",\n     },\n-    u\'fr-ml\': {\n-        u\'name\': \'French (Mali)\',\n-        u\'flag\': u\'/++resource++country-flags/ml.gif\',\n+    "fr-ml": {\n+        "name": "French (Mali)",\n+        "flag": "/++resource++country-flags/ml.gif",\n     },\n-    u\'fr-mq\': {\n-        u\'name\': \'French (Martinique)\',\n-        u\'flag\': u\'/++resource++country-flags/mq.gif\',\n+    "fr-mq": {\n+        "name": "French (Martinique)",\n+        "flag": "/++resource++country-flags/mq.gif",\n     },\n-    u\'fr-nc\': {\n-        u\'name\': \'French (New Caledonia)\',\n-        u\'flag\': u\'/++resource++country-flags/nc.gif\',\n+    "fr-nc": {\n+        "name": "French (New Caledonia)",\n+        "flag": "/++resource++country-flags/nc.gif",\n     },\n-    u\'fr-pf\': {\n-        u\'name\': \'French (French Polynesia)\',\n-        u\'flag\': u\'/++resource++country-flags/pf.gif\',\n+    "fr-pf": {\n+        "name": "French (French Polynesia)",\n+        "flag": "/++resource++country-flags/pf.gif",\n     },\n-    u\'fr-pm\': {\n-        u\'name\': \'French (St. Pierre and Miquelon)\',\n-        u\'flag\': u\'/++resource++country-flags/pm.gif\',\n+    "fr-pm": {\n+        "name": "French (St. Pierre and Miquelon)",\n+        "flag": "/++resource++country-flags/pm.gif",\n     },\n-    u\'fr-re\': {\n-        u\'name\': \'French (Reunion)\',\n-        u\'flag\': u\'/++resource++country-flags/re.gif\',\n+    "fr-re": {\n+        "name": "French (Reunion)",\n+        "flag": "/++resource++country-flags/re.gif",\n     },\n-    u\'fr-rw\': {\n-        u\'name\': \'French (Rwanda)\',\n-        u\'flag\': u\'/++resource++country-flags/rw.gif\',\n+    "fr-rw": {\n+        "name": "French (Rwanda)",\n+        "flag": "/++resource++country-flags/rw.gif",\n     },\n-    u\'fr-sc\': {\n-        u\'name\': \'French (Seychelles)\',\n-        u\'flag\': u\'/++resource++country-flags/sc.gif\',\n+    "fr-sc": {\n+        "name": "French (Seychelles)",\n+        "flag": "/++resource++country-flags/sc.gif",\n     },\n-    u\'fr-td\': {\n-        u\'name\': \'French (Chad)\',\n-        u\'flag\': u\'/++resource++country-flags/td.gif\',\n+    "fr-td": {\n+        "name": "French (Chad)",\n+        "flag": "/++resource++country-flags/td.gif",\n     },\n-    u\'fr-tg\': {\n-        u\'name\': \'French (Togo)\',\n-        u\'flag\': u\'/++resource++country-flags/tg.gif\',\n+    "fr-tg": {\n+        "name": "French (Togo)",\n+        "flag": "/++resource++country-flags/tg.gif",\n     },\n-    u\'fr-vu\': {\n-        u\'name\': \'French (Vanuatu)\',\n-        u\'flag\': u\'/++resource++country-flags/vu.gif\',\n+    "fr-vu": {\n+        "name": "French (Vanuatu)",\n+        "flag": "/++resource++country-flags/vu.gif",\n     },\n-    u\'fr-wf\': {\n-        u\'name\': \'French (Wallis and Futuna)\',\n-        u\'flag\': u\'/++resource++country-flags/wf.gif\',\n+    "fr-wf": {\n+        "name": "French (Wallis and Futuna)",\n+        "flag": "/++resource++country-flags/wf.gif",\n     },\n-    u\'fr-yt\': {\n-        u\'name\': \'French (Mayotte)\',\n-        u\'flag\': u\'/++resource++country-flags/yt.gif\',\n+    "fr-yt": {\n+        "name": "French (Mayotte)",\n+        "flag": "/++resource++country-flags/yt.gif",\n     },\n-    u\'hr-ba\': {\n-        u\'name\': \'Croatian (Bosnia-Herzegovina)\',\n-        u\'flag\': u\'/++resource++country-flags/ba.gif\',\n+    "hr-ba": {\n+        "name": "Croatian (Bosnia-Herzegovina)",\n+        "flag": "/++resource++country-flags/ba.gif",\n     },\n-    u\'hr-hr\': {\n-        u\'name\': \'Croatian (Croatia)\',\n-        u\'flag\': u\'/++resource++country-flags/hr.gif\',\n-    },\n-    u\'hu-hu\': {\n-        u\'name\': \'Hungarian (Hungary)\',\n-        u\'flag\': u\'/++resource++country-flags/hu.gif\',\n-    },\n-    u\'hu-si\': {\n-        u\'name\': \'Hungarian (Slovenia)\',\n-        u\'flag\': u\'/++resource++country-flags/hu.gif\',\n-    },\n-    u\'it-ch\': {\n-        u\'name\': \'Italian (Switzerland)\',\n-        u\'flag\': u\'/++resource++country-flags/it.gif\',\n-    },\n-    u\'it-hr\': {\n-        u\'name\': \'Italian (Croatia)\',\n-        u\'flag\': u\'/++resource++country-flags/it.gif\',\n-    },\n-    u\'it-it\': {\n-        u\'name\': \'Italian (Italy)\',\n-        u\'flag\': u\'/++resource++country-flags/it.gif\',\n-    },\n-    u\'it-si\': {\n-        u\'name\': \'Italian (Slovenia)\',\n-        u\'flag\': u\'/++resource++country-flags/it.gif\',\n-    },\n-    u\'it-sm\': {\n-        u\'name\': \'Italian (San Marino)\',\n-        u\'flag\': u\'/++resource++country-flags/sm.gif\',\n-    },\n-    u\'ko-kp\': {\n-        u\'name\': \'Korean (Korea, North)\',\n-        u\'flag\': u\'/++resource++country-flags/kp.gif\',\n-    },\n-    u\'ko-kr\': {\n-        u\'name\': \'Korean (Korea, South)\',\n-        u\'flag\': u\'/++resource++country-flags/kr.gif\',\n-    },\n-    u\'ln-cd\': {\n-        u\'name\': \'Lingala (Democratic Republic of Congo)\',\n-        u\'flag\': u\'/++resource++country-flags/cd.gif\',\n-    },\n-    u\'ln-cg\': {\n-        u\'name\': \'Lingala (Congo)\',\n-        u\'flag\': u\'/++resource++country-flags/cg.gif\',\n-    },\n-    u\'ms-bn\': {\n-        u\'name\': \'Malay (Brunei)\',\n-        u\'flag\': u\'/++resource++country-flags/bn.gif\',\n-    },\n-    u\'ms-my\': {\n-        u\'name\': \'Malay (Malaysia)\',\n-        u\'flag\': u\'/++resource++country-flags/my.gif\',\n-    },\n-    u\'ms-sg\': {\n-        u\'name\': \'Malay (Singapore)\',\n-        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n-    },\n-    u\'nl-an\': {\n-        u\'name\': \'Dutch (Netherlands Antilles)\',\n-        u\'flag\': u\'/++resource++country-flags/an.gif\',\n-    },\n-    u\'nl-aw\': {\n-        u\'name\': \'Dutch (Aruba)\',\n-        u\'flag\': u\'/++resource++country-flags/aw.gif\',\n-    },\n-    u\'nl-be\': {\n-        u\'name\': \'Dutch (Belgium)\',\n-        u\'flag\': u\'/++resource++country-flags/be.gif\',\n-    },\n-    u\'nl-nl\': {\n-        u\'name\': \'Dutch (Netherlands)\',\n-        u\'flag\': u\'/++resource++country-flags/nl.gif\',\n-    },\n-    u\'nl-sr\': {\n-        u\'name\': \'Dutch (Suriname)\',\n-        u\'flag\': u\'/++resource++country-flags/sr.gif\',\n-    },\n-    u\'pt-ao\': {\n-        u\'name\': \'Portuguese (Angola)\',\n-        u\'native\': \'Portugu\xc3\xaas (Angola)\',\n-        u\'flag\': u\'/++resource++country-flags/ao.gif\',\n-    },\n-    u\'pt-br\': {\n-        u\'name\': \'Portuguese (Brazil)\',\n-        u\'native\': \'Portugu\xc3\xaas (Brasil)\',\n-        u\'flag\': u\'/++resource++country-flags/br.gif\',\n-    },\n-    u\'pt-cv\': {\n-        u\'name\': \'Portuguese (Ilhas Cabo Verde)\',\n-        u\'native\': \'Portugu\xc3\xaas (Cabo Verde)\',\n-        u\'flag\': u\'/++resource++country-flags/cv.gif\',\n-    },\n-    u\'pt-gw\': {\n-        u\'name\': \'Portuguese (Guin\xc3\xa9-Bissau)\',\n-        u\'native\': \'Portugu\xc3\xaas (Guin\xc3\xa9-Bissau)\',\n-        u\'flag\': u\'/++resource++country-flags/gw.gif\',\n-    },\n-    u\'pt-mz\': {\n-        u\'name\': \'Portuguese (Mo\xc3\xa7ambique)\',\n-        u\'native\': \'Portugu\xc3\xaas (Mo\xc3\xa7ambique)\',\n-        u\'flag\': u\'/++resource++country-flags/mz.gif\',\n-    },\n-    u\'pt-pt\': {\n-        u\'name\': \'Portuguese (Portugal)\',\n-        u\'native\': \'Portugu\xc3\xaas (Portugal)\',\n-        u\'flag\': u\'/++resource++country-flags/pt.gif\',\n-    },\n-    u\'pt-st\': {\n-        u\'name\': \'Portuguese (S\xc3\xa3o Tom\xc3\xa9 e Pr\xc3\xadncipe)\',\n-        u\'native\': \'Portugu\xc3\xaas (S\xc3\xa3o Tom\xc3\xa9 e Pr\xc3\xadncipe)\',\n-        u\'flag\': u\'/++resource++country-flags/st.gif\',\n-    },\n-    u\'sd-in\': {\n-        u\'name\': \'Sindhi (India)\',\n-        u\'flag\': u\'/++resource++country-flags/in.gif\',\n-    },\n-    u\'sd-pk\': {\n-        u\'name\': \'Sindhi (Pakistan)\',\n-        u\'flag\': u\'/++resource++country-flags/pk.gif\',\n-    },\n-    u\'sr-ba\': {\n-        u\'name\': \'Serbian (Bosnia-Herzegovina)\',\n-        u\'flag\': u\'/++resource++country-flags/ba.gif\',\n-    },\n-    u\'ss-sz\': {\n-        u\'name\': \'Swati (Swaziland)\',\n-        u\'flag\': u\'/++resource++country-flags/sz.gif\',\n-    },\n-    u\'ss-za\': {\n-        u\'name\': \'Swati (South Africa)\',\n-        u\'flag\': u\'/++resource++country-flags/za.gif\',\n-    },\n-    u\'sv-fi\': {\n-        u\'name\': \'Swedish (Finland)\',\n-        u\'flag\': u\'/++resource++country-flags/se.gif\',\n-    },\n-    u\'sv-se\': {\n-        u\'name\': \'Swedish (Sweden)\',\n-        u\'flag\': u\'/++resource++country-flags/se.gif\',\n-    },\n-    u\'sw-ke\': {\n-        u\'name\': \'Swahili (Kenya)\',\n-        u\'flag\': u\'/++resource++country-flags/ke.gif\',\n-    },\n-    u\'sw-tz\': {\n-        u\'name\': \'Swahili (Tanzania)\',\n-        u\'flag\': u\'/++resource++country-flags/tz.gif\',\n-    },\n-    u\'ta-in\': {\n-        u\'name\': \'Tamil (India)\',\n-        u\'flag\': u\'/++resource++country-flags/in.gif\',\n-    },\n-    u\'ta-sg\': {\n-        u\'name\': \'Tamil (Singapore)\',\n-        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n-    },\n-    u\'tn-bw\': {\n-        u\'name\': \'Tswana (Botswana)\',\n-        u\'flag\': u\'/++resource++country-flags/bw.gif\',\n-    },\n-    u\'tn-za\': {\n-        u\'name\': \'Tswana (South Africa)\',\n-        u\'flag\': u\'/++resource++country-flags/za.gif\',\n-    },\n-    u\'tr-bg\': {\n-        u\'name\': \'Turkish (Bulgaria)\',\n-        u\'flag\': u\'/++resource++country-flags/tr.gif\',\n-    },\n-    u\'tr-cy\': {\n-        u\'name\': \'Turkish (Cyprus)\',\n-        u\'flag\': u\'/++resource++country-flags/tr.gif\',\n-    },\n-    u\'tr-tr\': {\n-        u\'name\': \'Turkish (Turkey)\',\n-        u\'flag\': u\'/++resource++country-flags/tr.gif\',\n-    },\n-    u\'ur-in\': {\n-        u\'name\': \'Urdu (India)\',\n-        u\'flag\': u\'/++resource++country-flags/in.gif\',\n-    },\n-    u\'ur-pk\': {\n-        u\'name\': \'Urdu (Pakistan)\',\n-        u\'flag\': u\'/++resource++country-flags/pk.gif\',\n-    },\n-    u\'zh-cn\': {\n-        u\'name\': \'Chinese (China)\',\n-        u\'native\': \'\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87(\xe4\xb8\xad\xe5\x9b\xbd)\',\n-        u\'flag\': u\'/++resource++country-flags/cn.gif\',\n-    },\n-    u\'zh-hk\': {\n-        u\'name\': \'Chinese (Hongkong)\',\n-        u\'native\': \'\xe7\xb9\x81\xe9\xab\x94\xe4\xb8\xad\xe6\x96\x87(\xe9\xa6\x99\xe6\xb8\xaf)\',\n-        u\'flag\': u\'/++resource++country-flags/hk.gif\',\n-    },\n-    u\'zh-sg\': {\n-        u\'name\': \'Chinese (Singapore)\',\n-        u\'native\': \'\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87(\xe6\x96\xb0\xe5\x8a\xa0\xe5\x9d\xa1)\',\n-        u\'flag\': u\'/++resource++country-flags/sg.gif\',\n-    },\n-    u\'zh-tw\': {\n-        u\'name\': \'Chinese (Taiwan)\',\n-        u\'native\': \'\xe7\xb9\x81\xe9\xab\x94\xe4\xb8\xad\xe6\x96\x87(\xe8\x87\xba\xe7\x81\xa3)\',\n-        u\'flag\': u\'/++resource++country-flags/tw.gif\',\n+    "hr-hr": {\n+        "name": "Croatian (Croatia)",\n+        "flag": "/++resource++country-flags/hr.gif",\n+    },\n+    "hu-hu": {\n+        "name": "Hungarian (Hungary)",\n+        "flag": "/++resource++country-flags/hu.gif",\n+    },\n+    "hu-si": {\n+        "name": "Hungarian (Slovenia)",\n+        "flag": "/++resource++country-flags/hu.gif",\n+    },\n+    "it-ch": {\n+        "name": "Italian (Switzerland)",\n+        "flag": "/++resource++country-flags/it.gif",\n+    },\n+    "it-hr": {\n+        "name": "Italian (Croatia)",\n+        "flag": "/++resource++country-flags/it.gif",\n+    },\n+    "it-it": {\n+        "name": "Italian (Italy)",\n+        "flag": "/++resource++country-flags/it.gif",\n+    },\n+    "it-si": {\n+        "name": "Italian (Slovenia)",\n+        "flag": "/++resource++country-flags/it.gif",\n+    },\n+    "it-sm": {\n+        "name": "Italian (San Marino)",\n+        "flag": "/++resource++country-flags/sm.gif",\n+    },\n+    "ko-kp": {\n+        "name": "Korean (Korea, North)",\n+        "flag": "/++resource++country-flags/kp.gif",\n+    },\n+    "ko-kr": {\n+        "name": "Korean (Korea, South)",\n+        "flag": "/++resource++country-flags/kr.gif",\n+    },\n+    "ln-cd": {\n+        "name": "Lingala (Democratic Republic of Congo)",\n+        "flag": "/++resource++country-flags/cd.gif",\n+    },\n+    "ln-cg": {\n+        "name": "Lingala (Congo)",\n+        "flag": "/++resource++country-flags/cg.gif",\n+    },\n+    "ms-bn": {\n+        "name": "Malay (Brunei)",\n+        "flag": "/++resource++country-flags/bn.gif",\n+    },\n+    "ms-my": {\n+        "name": "Malay (Malaysia)",\n+        "flag": "/++resource++country-flags/my.gif",\n+    },\n+    "ms-sg": {\n+        "name": "Malay (Singapore)",\n+        "flag": "/++resource++country-flags/sg.gif",\n+    },\n+    "nl-an": {\n+        "name": "Dutch (Netherlands Antilles)",\n+        "flag": "/++resource++country-flags/an.gif",\n+    },\n+    "nl-aw": {\n+        "name": "Dutch (Aruba)",\n+        "flag": "/++resource++country-flags/aw.gif",\n+    },\n+    "nl-be": {\n+        "name": "Dutch (Belgium)",\n+        "flag": "/++resource++country-flags/be.gif",\n+    },\n+    "nl-nl": {\n+        "name": "Dutch (Netherlands)",\n+        "flag": "/++resource++country-flags/nl.gif",\n+    },\n+    "nl-sr": {\n+        "name": "Dutch (Suriname)",\n+        "flag": "/++resource++country-flags/sr.gif",\n+    },\n+    "pt-ao": {\n+        "name": "Portuguese (Angola)",\n+        "native": "Portugu\xc3\xaas (Angola)",\n+        "flag": "/++resource++country-flags/ao.gif",\n+    },\n+    "pt-br": {\n+        "name": "Portuguese (Brazil)",\n+        "native": "Portugu\xc3\xaas (Brasil)",\n+        "flag": "/++resource++country-flags/br.gif",\n+    },\n+    "pt-cv": {\n+        "name": "Portuguese (Ilhas Cabo Verde)",\n+        "native": "Portugu\xc3\xaas (Cabo Verde)",\n+        "flag": "/++resource++country-flags/cv.gif",\n+    },\n+    "pt-gw": {\n+        "name": "Portuguese (Guin\xc3\xa9-Bissau)",\n+        "native": "Portugu\xc3\xaas (Guin\xc3\xa9-Bissau)",\n+        "flag": "/++resource++country-flags/gw.gif",\n+    },\n+    "pt-mz": {\n+        "name": "Portuguese (Mo\xc3\xa7ambique)",\n+        "native": "Portugu\xc3\xaas (Mo\xc3\xa7ambique)",\n+        "flag": "/++resource++country-flags/mz.gif",\n+    },\n+    "pt-pt": {\n+        "name": "Portuguese (Portugal)",\n+        "native": "Portugu\xc3\xaas (Portugal)",\n+        "flag": "/++resource++country-flags/pt.gif",\n+    },\n+    "pt-st": {\n+        "name": "Portuguese (S\xc3\xa3o Tom\xc3\xa9 e Pr\xc3\xadncipe)",\n+        "native": "Portugu\xc3\xaas (S\xc3\xa3o Tom\xc3\xa9 e Pr\xc3\xadncipe)",\n+        "flag": "/++resource++country-flags/st.gif",\n+    },\n+    "sd-in": {\n+        "name": "Sindhi (India)",\n+        "flag": "/++resource++country-flags/in.gif",\n+    },\n+    "sd-pk": {\n+        "name": "Sindhi (Pakistan)",\n+        "flag": "/++resource++country-flags/pk.gif",\n+    },\n+    "sr-ba": {\n+        "name": "Serbian (Bosnia-Herzegovina)",\n+        "flag": "/++resource++country-flags/ba.gif",\n+    },\n+    "ss-sz": {\n+        "name": "Swati (Swaziland)",\n+        "flag": "/++resource++country-flags/sz.gif",\n+    },\n+    "ss-za": {\n+        "name": "Swati (South Africa)",\n+        "flag": "/++resource++country-flags/za.gif",\n+    },\n+    "sv-fi": {\n+        "name": "Swedish (Finland)",\n+        "flag": "/++resource++country-flags/se.gif",\n+    },\n+    "sv-se": {\n+        "name": "Swedish (Sweden)",\n+        "flag": "/++resource++country-flags/se.gif",\n+    },\n+    "sw-ke": {\n+        "name": "Swahili (Kenya)",\n+        "flag": "/++resource++country-flags/ke.gif",\n+    },\n+    "sw-tz": {\n+        "name": "Swahili (Tanzania)",\n+        "flag": "/++resource++country-flags/tz.gif",\n+    },\n+    "ta-in": {\n+        "name": "Tamil (India)",\n+        "flag": "/++resource++country-flags/in.gif",\n+    },\n+    "ta-sg": {\n+        "name": "Tamil (Singapore)",\n+        "flag": "/++resource++country-flags/sg.gif",\n+    },\n+    "tn-bw": {\n+        "name": "Tswana (Botswana)",\n+        "flag": "/++resource++country-flags/bw.gif",\n+    },\n+    "tn-za": {\n+        "name": "Tswana (South Africa)",\n+        "flag": "/++resource++country-flags/za.gif",\n+    },\n+    "tr-bg": {\n+        "name": "Turkish (Bulgaria)",\n+        "flag": "/++resource++country-flags/tr.gif",\n+    },\n+    "tr-cy": {\n+        "name": "Turkish (Cyprus)",\n+        "flag": "/++resource++country-flags/tr.gif",\n+    },\n+    "tr-tr": {\n+        "name": "Turkish (Turkey)",\n+        "flag": "/++resource++country-flags/tr.gif",\n+    },\n+    "ur-in": {\n+        "name": "Urdu (India)",\n+        "flag": "/++resource++country-flags/in.gif",\n+    },\n+    "ur-pk": {\n+        "name": "Urdu (Pakistan)",\n+        "flag": "/++resource++country-flags/pk.gif",\n+    },\n+    "zh-cn": {\n+        "name": "Chinese (China)",\n+        "native": "\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87(\xe4\xb8\xad\xe5\x9b\xbd)",\n+        "flag": "/++resource++country-flags/cn.gif",\n+    },\n+    "zh-hk": {\n+        "name": "Chinese (Hongkong)",\n+        "native": "\xe7\xb9\x81\xe9\xab\x94\xe4\xb8\xad\xe6\x96\x87(\xe9\xa6\x99\xe6\xb8\xaf)",\n+        "flag": "/++resource++country-flags/hk.gif",\n+    },\n+    "zh-sg": {\n+        "name": "Chinese (Singapore)",\n+        "native": "\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87(\xe6\x96\xb0\xe5\x8a\xa0\xe5\x9d\xa1)",\n+        "flag": "/++resource++country-flags/sg.gif",\n+    },\n+    "zh-tw": {\n+        "name": "Chinese (Taiwan)",\n+        "native": "\xe7\xb9\x81\xe9\xab\x94\xe4\xb8\xad\xe6\x96\x87(\xe8\x87\xba\xe7\x81\xa3)",\n+        "flag": "/++resource++country-flags/tw.gif",\n     },\n }\n \n # convert the utf-8 encoded values to unicode\n for code in _combinedlanguagelist:\n     value = _combinedlanguagelist[code]\n-    if u\'name\' in value:\n-        if six.PY3:\n-            value[u\'name\'] = value[u\'name\']\n-        else:\n-            value[u\'name\'] = unicode(value[u\'name\'], \'utf-8\')\n-    if u\'native\' in value:\n-        if six.PY3:\n-            value[u\'native\'] = value[u\'native\']\n-        else:\n-            value[u\'native\'] = unicode(value[u\'native\'], \'utf-8\')\n+    if "name" in value:\n+        value["name"] = value["name"]\n+    if "native" in value:\n+        value["native"] = value["native"]\ndiff --git a/plone/i18n/locales/tests/__init__.py b/plone/i18n/locales/tests/__init__.py\nindex ec51c5a..792d600 100644\n--- a/plone/i18n/locales/tests/__init__.py\n+++ b/plone/i18n/locales/tests/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/i18n/locales/tests/base.py b/plone/i18n/locales/tests/base.py\nindex 2523647..f7a3539 100644\n--- a/plone/i18n/locales/tests/base.py\n+++ b/plone/i18n/locales/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.configuration.xmlconfig import XMLConfig\n \n \n@@ -8,15 +7,15 @@ def setUp():\n     setUp()\n     import zope.component\n \n-    XMLConfig(\'meta.zcml\', zope.component)()\n+    XMLConfig("meta.zcml", zope.component)()\n \n     import zope.browserresource\n \n-    XMLConfig(\'meta.zcml\', zope.browserresource)()\n+    XMLConfig("meta.zcml", zope.browserresource)()\n \n     import plone.i18n.locales\n \n-    XMLConfig(\'configure.zcml\', plone.i18n.locales)()\n+    XMLConfig("configure.zcml", plone.i18n.locales)()\n \n \n def tearDown():\ndiff --git a/plone/i18n/locales/tests/test_cctlds.py b/plone/i18n/locales/tests/test_cctlds.py\nindex 1a38f86..0a82b80 100644\n--- a/plone/i18n/locales/tests/test_cctlds.py\n+++ b/plone/i18n/locales/tests/test_cctlds.py\n@@ -1,5 +1,3 @@\n-# -*- coding: UTF-8 -*-\n-\n import unittest\n \n \n@@ -21,9 +19,9 @@ def _makeOne(self):\n         return queryUtility(ICcTLDInformation)\n \n     def test_interface(self):\n-        from zope.interface.verify import verifyClass\n-        from plone.i18n.locales.interfaces import ICcTLDInformation\n         from plone.i18n.locales.cctld import CcTLDInformation\n+        from plone.i18n.locales.interfaces import ICcTLDInformation\n+        from zope.interface.verify import verifyClass\n \n         self.assertTrue(verifyClass(ICcTLDInformation, CcTLDInformation))\n \n@@ -31,7 +29,7 @@ def test_get_available(self):\n         util = self._makeOne()\n         tlds = util.getAvailableTLDs()\n         self.assertTrue(len(tlds) > 200)\n-        self.assertIn(u"nl", tlds)\n+        self.assertIn("nl", tlds)\n \n     def test_get(self):\n         util = self._makeOne()\n@@ -40,5 +38,5 @@ def test_get(self):\n \n     def test_get_languages_for(self):\n         util = self._makeOne()\n-        self.assertEqual(util.getLanguagesForTLD(u"nl"), [u"nl"])\n-        self.assertEqual(util.getLanguagesForTLD(u"be"), [u"nl", u"fr"])\n+        self.assertEqual(util.getLanguagesForTLD("nl"), ["nl"])\n+        self.assertEqual(util.getLanguagesForTLD("be"), ["nl", "fr"])\ndiff --git a/plone/i18n/locales/tests/test_countries.py b/plone/i18n/locales/tests/test_countries.py\nindex 12ac5ef..37b046f 100644\n--- a/plone/i18n/locales/tests/test_countries.py\n+++ b/plone/i18n/locales/tests/test_countries.py\n@@ -1,5 +1,3 @@\n-# -*- coding: UTF-8 -*-\n-\n import unittest\n \n \n@@ -15,15 +13,15 @@ def tearDown(self):\n         tearDown()\n \n     def _makeOne(self):\n-        from zope.component import queryUtility\n         from plone.i18n.locales.interfaces import ICountryAvailability\n+        from zope.component import queryUtility\n \n         return queryUtility(ICountryAvailability)\n \n     def test_interface(self):\n-        from zope.interface.verify import verifyClass\n-        from plone.i18n.locales.interfaces import ICountryAvailability\n         from plone.i18n.locales.countries import CountryAvailability\n+        from plone.i18n.locales.interfaces import ICountryAvailability\n+        from zope.interface.verify import verifyClass\n \n         self.assertTrue(verifyClass(ICountryAvailability, CountryAvailability))\n \n@@ -31,22 +29,22 @@ def test_get_available(self):\n         util = self._makeOne()\n         countrycodes = util.getAvailableCountries()\n         self.assertTrue(len(countrycodes) > 200)\n-        self.assertIn(u"de", countrycodes)\n+        self.assertIn("de", countrycodes)\n \n     def test_get_countries(self):\n         util = self._makeOne()\n         countries = util.getCountries()\n         self.assertTrue(len(countries) > 200)\n-        self.assert_(u"de" in countries)\n-        de = countries[u"de"]\n-        self.assertEqual(de[u"name"], u"Germany")\n-        self.assertEqual(de[u"flag"], u"/++resource++country-flags/de.gif")\n+        self.assertIn("de", countries)\n+        de = countries["de"]\n+        self.assertEqual(de["name"], "Germany")\n+        self.assertEqual(de["flag"], "/++resource++country-flags/de.gif")\n \n     def test_get_country_listing(self):\n         util = self._makeOne()\n         countries = util.getCountryListing()\n         self.assertTrue(len(countries) > 200)\n-        self.assertIn((u"de", u"Germany"), countries)\n+        self.assertIn(("de", "Germany"), countries)\n \n     def test_reservations(self):\n         # our list has historically contained some reservations, which\n@@ -54,5 +52,5 @@ def test_reservations(self):\n         # breaking content based on these\n         from plone.i18n.locales.countries import _countrylist\n \n-        self.assertIn(u"an", _countrylist)\n-        self.assertIn(u"cs", _countrylist)\n+        self.assertIn("an", _countrylist)\n+        self.assertIn("cs", _countrylist)\ndiff --git a/plone/i18n/locales/tests/test_languages.py b/plone/i18n/locales/tests/test_languages.py\nindex 0d2fafe..cadf9e5 100644\n--- a/plone/i18n/locales/tests/test_languages.py\n+++ b/plone/i18n/locales/tests/test_languages.py\n@@ -1,15 +1,13 @@\n-# -*- coding: UTF-8 -*-\n-\n import unittest\n \n \n class TestInterfaces(unittest.TestCase):\n     def test_interface(self):\n-        from zope.interface.verify import verifyClass\n         from plone.i18n.locales.interfaces import ILanguageAvailability\n         from plone.i18n.locales.languages import LanguageAvailability\n+        from zope.interface.verify import verifyClass\n \n-        self.assert_(verifyClass(ILanguageAvailability, LanguageAvailability))\n+        self.assertTrue(verifyClass(ILanguageAvailability, LanguageAvailability))\n \n \n class TestDeprecatedLanguages(unittest.TestCase):\n@@ -18,11 +16,11 @@ def test_deprecated(self):\n         # want to break existing content based on it\n         from plone.i18n.locales.languages import _languagelist\n \n-        self.assertIn(u"mo", _languagelist)\n-        self.assertIn(u"sh", _languagelist)\n+        self.assertIn("mo", _languagelist)\n+        self.assertIn("sh", _languagelist)\n \n \n-class BaseTestCase(object):\n+class BaseTestCase:\n     def setUp(self):\n         from .base import setUp\n \n@@ -45,47 +43,47 @@ def test_get_available(self):\n         util = self._makeOne()\n         languagecodes = util.getAvailableLanguages()\n         self.assertTrue(len(languagecodes) > 100)\n-        self.assertIn(u"de", languagecodes)\n-        self.assertNotIn(u"pt-br", languagecodes)\n+        self.assertIn("de", languagecodes)\n+        self.assertNotIn("pt-br", languagecodes)\n \n     def test_get_available_combined(self):\n         util = self._makeOne()\n         languagecodes = util.getAvailableLanguages(combined=True)\n         self.assertTrue(len(languagecodes) > 300)\n-        self.assertIn(u"de", languagecodes)\n-        self.assertIn(u"pt-br", languagecodes)\n+        self.assertIn("de", languagecodes)\n+        self.assertIn("pt-br", languagecodes)\n \n     def test_get_languages(self):\n         util = self._makeOne()\n         languages = util.getLanguages()\n         self.assertTrue(len(languages) > 100)\n-        self.assertIn(u"de", languages)\n-        self.assertNotIn(u"pt-br", languages)\n-        de = languages[u"de"]\n-        self.assertEqual(de[u"name"], u"German")\n-        self.assertEqual(de[u"native"], u"Deutsch")\n-        self.assertEqual(de[u"flag"], u"/++resource++country-flags/de.gif")\n+        self.assertIn("de", languages)\n+        self.assertNotIn("pt-br", languages)\n+        de = languages["de"]\n+        self.assertEqual(de["name"], "German")\n+        self.assertEqual(de["native"], "Deutsch")\n+        self.assertEqual(de["flag"], "/++resource++country-flags/de.gif")\n \n     def test_get_languages_combined(self):\n         util = self._makeOne()\n         languages = util.getLanguages(combined=True)\n         self.assertTrue(len(languages) > 300)\n-        self.assertIn(u"de", languages)\n-        self.assertIn(u"pt-br", languages)\n-        self.assertEqual(languages[u"de"][u"name"], u"German")\n-        self.assertEqual(languages[u"pt-br"][u"name"], u"Portuguese (Brazil)")\n+        self.assertIn("de", languages)\n+        self.assertIn("pt-br", languages)\n+        self.assertEqual(languages["de"]["name"], "German")\n+        self.assertEqual(languages["pt-br"]["name"], "Portuguese (Brazil)")\n \n     def test_get_language_listing(self):\n         util = self._makeOne()\n         languages = util.getLanguageListing()\n         self.assertTrue(len(languages) > 100)\n-        self.assertIn((u"de", u"German"), languages)\n+        self.assertIn(("de", "German"), languages)\n \n \n class TestContentLanguageAvailability(BaseTestCase, unittest.TestCase):\n     def _makeOne(self):\n-        from zope.component import queryUtility\n         from plone.i18n.locales.interfaces import IContentLanguageAvailability\n+        from zope.component import queryUtility\n \n         return queryUtility(IContentLanguageAvailability)\n \n@@ -94,16 +92,14 @@ def test_interface(self):\n         from plone.i18n.locales.languages import ContentLanguageAvailability\n \n         self.assertTrue(\n-            self._verify(\n-                IContentLanguageAvailability, ContentLanguageAvailability\n-            )\n+            self._verify(IContentLanguageAvailability, ContentLanguageAvailability)\n         )\n \n \n class TestMetadataLanguageAvailability(BaseTestCase, unittest.TestCase):\n     def _makeOne(self):\n-        from zope.component import queryUtility\n         from plone.i18n.locales.interfaces import IMetadataLanguageAvailability\n+        from zope.component import queryUtility\n \n         return queryUtility(IMetadataLanguageAvailability)\n \n@@ -112,7 +108,5 @@ def test_interface(self):\n         from plone.i18n.locales.languages import MetadataLanguageAvailability\n \n         self.assertTrue(\n-            self._verify(\n-                IMetadataLanguageAvailability, MetadataLanguageAvailability\n-            )\n+            self._verify(IMetadataLanguageAvailability, MetadataLanguageAvailability)\n         )\ndiff --git a/plone/i18n/negotiate/negotiate.py b/plone/i18n/negotiate/negotiate.py\nindex 74ee6b2..1d56fdb 100644\n--- a/plone/i18n/negotiate/negotiate.py\n+++ b/plone/i18n/negotiate/negotiate.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.i18n.interfaces import ILanguageUtility\n from plone.i18n.interfaces import INegotiateLanguage\n from zope.component import getUtility\n@@ -6,7 +5,7 @@\n \n \n @implementer(INegotiateLanguage)\n-class NegotiateLanguage(object):\n+class NegotiateLanguage:\n     """Perform default language negotiation"""\n \n     def __init__(self, site, request):\n@@ -33,11 +32,9 @@ def __init__(self, site, request):\n \n         if useCookie and not (authOnly and tool.isAnonymousUser()):\n             # If we are using the cookie stuff we provide the setter here\n-            set_language = request.get(\'set_language\', None)\n+            set_language = request.get("set_language", None)\n             if set_language:\n-                langsCookie = tool.setLanguageCookie(\n-                    set_language, request=request\n-                )\n+                langsCookie = tool.setLanguageCookie(set_language, request=request)\n             else:\n                 # Get from cookie\n                 langsCookie = tool.getLanguageCookie(request)\ndiff --git a/plone/i18n/negotiate/ptsnegotiator.py b/plone/i18n/negotiate/ptsnegotiator.py\nindex 8c4f17a..a380d02 100644\n--- a/plone/i18n/negotiate/ptsnegotiator.py\n+++ b/plone/i18n/negotiate/ptsnegotiator.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.i18n.interfaces import IUserPreferredLanguages\n from zope.interface import implementer\n \n@@ -11,34 +10,32 @@\n _langPrefsRegistry = {}\n \n \n-def getAcceptedHelper(self, request, kind=\'language\'):\n+def getAcceptedHelper(self, request, kind="language"):\n     """this is patched on prefs classes which don\'t define the getAccepted\n     classes but define the deprecated getPreferredLanguages method"""\n     return self.getPreferredLanguages()\n \n \n-def registerLangPrefsMethod(prefs, kind=\'language\'):\n+def registerLangPrefsMethod(prefs, kind="language"):\n     # check for correct format of prefs\n     if not isinstance(prefs, dict):\n-        prefs = {\'klass\': prefs, \'priority\': 0}\n+        prefs = {"klass": prefs, "priority": 0}\n     # add chain for kind\n     if kind not in _langPrefsRegistry:\n         _langPrefsRegistry[kind] = []\n     # backwards compatibilty monkey patch\n-    if not hasattr(prefs[\'klass\'], \'getAccepted\'):\n-        prefs[\'klass\'].getAccepted = getAcceptedHelper\n+    if not hasattr(prefs["klass"], "getAccepted"):\n+        prefs["klass"].getAccepted = getAcceptedHelper\n     # add this pref helper\n     _langPrefsRegistry[kind].append(prefs)\n     # sort by priority\n-    _langPrefsRegistry[kind].sort(\n-        key=operator.itemgetter(\'priority\'), reverse=True\n-    )\n+    _langPrefsRegistry[kind].sort(key=operator.itemgetter("priority"), reverse=True)\n \n \n-def getLangPrefs(env, kind=\'language\'):\n+def getLangPrefs(env, kind="language"):\n     """get higest prio method for kind"""\n     for pref in _langPrefsRegistry[kind]:\n-        handler = pref[\'klass\'](env)\n+        handler = pref["klass"](env)\n         accepted = handler.getAccepted(env, kind)\n         if accepted:\n             return accepted\n@@ -47,7 +44,7 @@ def getLangPrefs(env, kind=\'language\'):\n \n def lang_normalize(lang):\n     """filter"""\n-    return lang.replace(\'_\', \'-\')\n+    return lang.replace("_", "-")\n \n \n def str_lower(aString):\n@@ -62,11 +59,11 @@ def str_strip(aString):\n \n def type_accepted(available, preferred):\n     # ex: preferred is text/* and available is text/html\n-    av = available.split(\'/\')\n-    pr = preferred.split(\'/\')\n+    av = available.split("/")\n+    pr = preferred.split("/")\n     if len(av) < 2 or len(pr) < 2:\n         return False\n-    return pr[1] == \'*\' and pr[0] == av[0]\n+    return pr[1] == "*" and pr[0] == av[0]\n \n \n def lang_accepted(available, preferred):\n@@ -78,43 +75,43 @@ def _false(*a, **kw):\n     pass\n \n \n-class BrowserAccept(object):\n+class BrowserAccept:\n \n     filters = {\n-        \'content-type\': (str_lower,),\n-        \'language\': (str_lower, lang_normalize, str_strip),\n+        "content-type": (str_lower,),\n+        "language": (str_lower, lang_normalize, str_strip),\n     }\n \n     def __init__(self, request):\n         pass\n \n-    def getAccepted(self, request, kind=\'content-type\'):\n-        custom_name = (\'user_%s\' % kind).lower()\n-        if kind == \'content-type\':\n-            header_name = (\'HTTP_ACCEPT\').upper()\n+    def getAccepted(self, request, kind="content-type"):\n+        custom_name = ("user_%s" % kind).lower()\n+        if kind == "content-type":\n+            header_name = ("HTTP_ACCEPT").upper()\n         else:\n-            header_name = (\'HTTP_ACCEPT_%s\' % kind).upper()\n+            header_name = ("HTTP_ACCEPT_%s" % kind).upper()\n \n-        user_accepts = request.get(custom_name, \'\')\n-        http_accepts = request.get(header_name, \'\')\n+        user_accepts = request.get(custom_name, "")\n+        http_accepts = request.get(header_name, "")\n \n         if (\n             user_accepts\n             and http_accepts\n-            and user_accepts == request.cookies.get(\'custom_name\')\n+            and user_accepts == request.cookies.get("custom_name")\n         ):\n-            user_accepts = [a.strip() for a in user_accepts.split(\',\')]\n-            http_accepts = [a.strip() for a in http_accepts.split(\',\')]\n+            user_accepts = [a.strip() for a in user_accepts.split(",")]\n+            http_accepts = [a.strip() for a in http_accepts.split(",")]\n             for l in user_accepts:\n                 if l not in http_accepts:\n                     req_accepts = user_accepts + http_accepts\n                     break\n                 else:\n                     # user_accepts is a subset of http_accepts\n-                    request.RESPONSE.expireCookie(\'custom_name\', path=\'/\')\n+                    request.RESPONSE.expireCookie("custom_name", path="/")\n                     req_accepts = http_accepts\n         else:\n-            req_accepts = (user_accepts + \',\' + http_accepts).split(\',\')\n+            req_accepts = (user_accepts + "," + http_accepts).split(",")\n \n         accepts = []\n         i = 0\n@@ -129,14 +126,14 @@ def getAccepted(self, request, kind=\'content-type\'):\n             for normalizer in filters:\n                 accept = normalizer(accept)\n             if accept:\n-                ll = accept.split(\';\', 2)\n+                ll = accept.split(";", 2)\n                 quality = []\n \n                 if len(ll) == 2:\n                     try:\n                         q = l[1]\n-                        if q.startswith(\'q=\'):\n-                            q = q.split(\'=\', 2)[1]\n+                        if q.startswith("q="):\n+                            q = q.split("=", 2)[1]\n                             quality = float(q)\n                     except Exception:\n                         pass\n@@ -154,16 +151,16 @@ def getAccepted(self, request, kind=\'content-type\'):\n         return [a[1] for a in accepts]\n \n \n-class CookieAccept(object):\n+class CookieAccept:\n     filters = (str_lower, lang_normalize, str_strip)\n \n     def __init__(self, request):\n         pass\n \n-    def getAccepted(self, request, kind=\'language\'):\n-        if not hasattr(request, \'cookies\'):\n+    def getAccepted(self, request, kind="language"):\n+        if not hasattr(request, "cookies"):\n             return ()\n-        language = request.cookies.get(\'pts_language\', None)\n+        language = request.cookies.get("pts_language", None)\n         if language:\n             if isinstance(language, tuple):\n                 return language\n@@ -185,7 +182,7 @@ def setCookieLanguage(request, lang, REQUEST=None):\n     if isinstance(lang, tuple):\n         lang = lang[1]\n     lang = str_lower(lang_normalize(lang))\n-    request.RESPONSE.setCookie(\'pts_language\', lang)\n+    request.RESPONSE.setCookie("pts_language", lang)\n     if REQUEST:\n         REQUEST.RESPONSE.redirect(REQUEST.URL0)\n     else:\n@@ -195,18 +192,16 @@ def setCookieLanguage(request, lang, REQUEST=None):\n # higher number = higher priority\n # if a acceptor returns a false value (() or None) then the next acceptor\n # in the chain is queried\n-registerLangPrefsMethod({\'klass\': BrowserAccept, \'priority\': 10}, \'language\')\n-registerLangPrefsMethod({\'klass\': CookieAccept, \'priority\': 40}, \'language\')\n-registerLangPrefsMethod(\n-    {\'klass\': BrowserAccept, \'priority\': 10}, \'content-type\'\n-)\n+registerLangPrefsMethod({"klass": BrowserAccept, "priority": 10}, "language")\n+registerLangPrefsMethod({"klass": CookieAccept, "priority": 40}, "language")\n+registerLangPrefsMethod({"klass": BrowserAccept, "priority": 10}, "content-type")\n \n \n-class Negotiator(object):\n+class Negotiator:\n \n-    tests = {\'content-type\': type_accepted, \'language\': lang_accepted}\n+    tests = {"content-type": type_accepted, "language": lang_accepted}\n \n-    def negotiate(self, choices, request, kind=\'content-type\'):\n+    def negotiate(self, choices, request, kind="content-type"):\n         choices = tuple(choices)\n         return self._negotiate(choices, request, kind)\n \n@@ -225,21 +220,21 @@ def _negotiate(self, choices, request, kind):\n \n     # backwards compatibility... should be deprecated\n     def getLanguage(self, langs, request):\n-        return self.negotiate(langs, request, \'language\')\n+        return self.negotiate(langs, request, "language")\n \n     def getLanguages(self, request):\n-        return getLangPrefs(request, \'language\')\n+        return getLangPrefs(request, "language")\n \n \n negotiator = Negotiator()\n \n \n def negotiate(langs, request):\n-    return negotiator.negotiate(langs, request, \'language\')\n+    return negotiator.negotiate(langs, request, "language")\n \n \n @implementer(IUserPreferredLanguages)\n-class PTSLanguages(object):\n+class PTSLanguages:\n     """Languages adapter that chooses languages for the zope.i18n machinery.\n \n     This used to be part of Products.Five.i18n.\ndiff --git a/plone/i18n/normalizer/__init__.py b/plone/i18n/normalizer/__init__.py\nindex 821d036..ca90554 100644\n--- a/plone/i18n/normalizer/__init__.py\n+++ b/plone/i18n/normalizer/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.i18n.normalizer.base import baseNormalize\n from plone.i18n.normalizer.interfaces import IFileNameNormalizer\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n@@ -18,7 +17,7 @@\n MULTIPLE_DASHES_REGEX = re.compile(r"\\-+")\n EXTRA_DASHES_REGEX = re.compile(r"(^\\-+)|(\\-+$)")\n UNDERSCORE_START_REGEX = re.compile(r"(^_+)(.*)$")\n-LOCALE_SPLIT_REGEX = re.compile(r\'[_-]\')\n+LOCALE_SPLIT_REGEX = re.compile(r"[_-]")\n # Define static constraints\n MAX_LENGTH = 50\n MAX_FILENAME_LENGTH = 1023\n@@ -30,7 +29,7 @@ def cropName(base, maxLength=MAX_LENGTH):\n \n     index = baseLength\n     while index > maxLength:\n-        index = base.rfind(\'-\', 0, index)\n+        index = base.rfind("-", 0, index)\n \n     if index == -1 and baseLength > maxLength:\n         base = base[:maxLength]\n@@ -42,7 +41,7 @@ def cropName(base, maxLength=MAX_LENGTH):\n \n \n @implementer(IIDNormalizer)\n-class IDNormalizer(object):\n+class IDNormalizer:\n     """\n     This normalizer can normalize any unicode string and returns a\n     version that only contains of ASCII characters allowed in a typical\n@@ -80,16 +79,16 @@ def normalize(self, text, locale=None, max_length=MAX_LENGTH):\n         # lowercase text\n         text = text.lower()\n \n-        text = IGNORE_REGEX.sub(\'\', text)\n-        text = NON_WORD_REGEX.sub(\'-\', text)\n-        text = MULTIPLE_DASHES_REGEX.sub(\'-\', text)\n-        text = EXTRA_DASHES_REGEX.sub(\'\', text)\n+        text = IGNORE_REGEX.sub("", text)\n+        text = NON_WORD_REGEX.sub("-", text)\n+        text = MULTIPLE_DASHES_REGEX.sub("-", text)\n+        text = EXTRA_DASHES_REGEX.sub("", text)\n \n         return cropName(text, maxLength=max_length)\n \n \n @implementer(IFileNameNormalizer)\n-class FileNameNormalizer(object):\n+class FileNameNormalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters allowed in a file name.\n@@ -129,28 +128,28 @@ def normalize(self, text, locale=None, max_length=MAX_FILENAME_LENGTH):\n             text = m.groups()[1]\n \n         base = text\n-        ext = \'\'\n+        ext = ""\n \n         m = FILENAME_REGEX.match(text)\n         if m is not None:\n             base = m.groups()[0]\n             ext = m.groups()[1]\n \n-        base = IGNORE_REGEX.sub(\'\', base)\n-        base = DANGEROUS_CHARS_REGEX.sub(\'-\', base)\n-        base = EXTRA_DASHES_REGEX.sub(\'\', base)\n-        base = MULTIPLE_DASHES_REGEX.sub(\'-\', base)\n+        base = IGNORE_REGEX.sub("", base)\n+        base = DANGEROUS_CHARS_REGEX.sub("-", base)\n+        base = EXTRA_DASHES_REGEX.sub("", base)\n+        base = MULTIPLE_DASHES_REGEX.sub("-", base)\n \n         base = cropName(base, maxLength=max_length)\n \n-        if ext != \'\':\n-            base = base + \'.\' + ext\n+        if ext != "":\n+            base = base + "." + ext\n \n         return base\n \n \n @implementer(IURLNormalizer)\n-class URLNormalizer(object):\n+class URLNormalizer:\n     """\n     This normalizer can normalize any unicode string and returns a URL-safe\n     version that only contains of ASCII characters allowed in a URL.\n@@ -190,23 +189,23 @@ def normalize(self, text, locale=None, max_length=MAX_URL_LENGTH):\n \n         # lowercase text\n         base = text.lower()\n-        ext = \'\'\n+        ext = ""\n \n         m = FILENAME_REGEX.match(base)\n         if m is not None:\n             base = m.groups()[0]\n             ext = m.groups()[1]\n \n-        base = IGNORE_REGEX.sub(\'\', base)\n-        base = NON_WORD_REGEX.sub(\'-\', base)\n-        base = URL_DANGEROUS_CHARS_REGEX.sub(\'-\', base)\n-        base = EXTRA_DASHES_REGEX.sub(\'\', base)\n-        base = MULTIPLE_DASHES_REGEX.sub(\'-\', base)\n+        base = IGNORE_REGEX.sub("", base)\n+        base = NON_WORD_REGEX.sub("-", base)\n+        base = URL_DANGEROUS_CHARS_REGEX.sub("-", base)\n+        base = EXTRA_DASHES_REGEX.sub("", base)\n+        base = MULTIPLE_DASHES_REGEX.sub("-", base)\n \n         base = cropName(base, maxLength=max_length)\n \n-        if ext != \'\':\n-            base = base + \'.\' + ext\n+        if ext != "":\n+            base = base + "." + ext\n \n         return base\n \ndiff --git a/plone/i18n/normalizer/adapters.py b/plone/i18n/normalizer/adapters.py\nindex 14010ce..211881d 100644\n--- a/plone/i18n/normalizer/adapters.py\n+++ b/plone/i18n/normalizer/adapters.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.i18n.normalizer.interfaces import IFileNameNormalizer\n from plone.i18n.normalizer.interfaces import IURLNormalizer\n from plone.i18n.normalizer.interfaces import IUserPreferredFileNameNormalizer\n@@ -9,7 +8,7 @@\n \n \n @implementer(IUserPreferredFileNameNormalizer)\n-class UserPreferredFileNameNormalizer(object):\n+class UserPreferredFileNameNormalizer:\n     """\n     An adapter for the HTTPRequest to provide user preferred language\n     dependent normalization.\n@@ -38,7 +37,7 @@ def normalize(self, text):\n \n \n @implementer(IUserPreferredURLNormalizer)\n-class UserPreferredURLNormalizer(object):\n+class UserPreferredURLNormalizer:\n     """\n     An adapter for the HTTPRequest to provide user preferred language\n     dependent normalization.\ndiff --git a/plone/i18n/normalizer/base.py b/plone/i18n/normalizer/base.py\nindex 09c8ca3..8216f27 100644\n--- a/plone/i18n/normalizer/base.py\n+++ b/plone/i18n/normalizer/base.py\n@@ -1,21 +1,12 @@\n-# -*- coding: utf-8 -*-\n-from unicodedata import decomposition\n-from unicodedata import normalize\n+from unidecode import unidecode\n \n-import six\n import string\n \n \n # On OpenBSD string.whitespace has a non-standard implementation\n # See http://dev.plone.org/plone/ticket/4704 for details\n-whitespace = \'\'.join([c for c in string.whitespace if ord(c) < 128])\n-allowed = (\n-    string.ascii_letters + string.digits + string.punctuation + whitespace\n-)\n-\n-CHAR = {}\n-NULLMAP = [\'\' * 0x100]\n-UNIDECODE_LIMIT = 0x0530\n+whitespace = "".join([c for c in string.whitespace if ord(c) < 128])\n+allowed = string.ascii_letters + string.digits + string.punctuation + whitespace\n \n \n def mapUnicode(text, mapping=()):\n@@ -23,7 +14,7 @@ def mapUnicode(text, mapping=()):\n     This method is used for replacement of special characters found in a\n     mapping before baseNormalize is applied.\n     """\n-    res = u\'\'\n+    res = ""\n     for ch in text:\n         ordinal = ord(ch)\n         if ordinal in mapping:\n@@ -38,74 +29,26 @@ def mapUnicode(text, mapping=()):\n \n def baseNormalize(text):\n     """\n-    This method is used for normalization of unicode characters to the base ASCII\n-    letters. Output is ASCII encoded string (or char) with only ASCII letters,\n-    digits, punctuation and whitespace characters. Case is preserved.\n+    This method is used for normalization of unicode characters to the base\n+    ASCII letters.\n+    Output is a native string with only ASCII letters, digits, punctuation\n+    and whitespace characters. Case is preserved.\n \n       >>> baseNormalize(123)\n       \'123\'\n \n       >>> baseNormalize(u\'a\\u0fff\')\n-      \'afff\'\n+      \'a\'\n \n       >>> baseNormalize(u"foo\\N{LATIN CAPITAL LETTER I WITH CARON}")\n       \'fooI\'\n \n       >>> baseNormalize(u"\\u5317\\u4EB0")\n-      \'53174eb0\'\n+      \'Bei Jing\'\n     """\n-    if not isinstance(text, six.string_types):\n+    if not isinstance(text, str):\n         # This most surely ends up in something the user does not expect\n         # to see. But at least it does not break.\n-        return repr(text)\n-\n-    text = text.strip()\n-\n-    res = []\n-    for ch in text:\n-        if ch in allowed:\n-            # ASCII chars, digits etc. stay untouched\n-            res.append(ch)\n-        else:\n-            ordinal = ord(ch)\n-            if ordinal < UNIDECODE_LIMIT:\n-                h = ordinal >> 8\n-                l = ordinal & 0xFF\n-\n-                c = CHAR.get(h, None)\n-\n-                if c == None:\n-                    try:\n-                        mod = __import__(\n-                            \'unidecode.x%02x\' % (h), [], [], [\'data\']\n-                        )\n-                    except ImportError:\n-                        CHAR[h] = NULLMAP\n-                        res.append(\'\')\n-                        continue\n-\n-                    CHAR[h] = mod.data\n-\n-                    try:\n-                        res.append(mod.data[l])\n-                    except IndexError:\n-                        res.append(\'\')\n-                else:\n-                    try:\n-                        res.append(c[l])\n-                    except IndexError:\n-                        res.append(\'\')\n-\n-            elif decomposition(ch):\n-                normalized = normalize(\'NFKD\', ch).strip()\n-                # string may contain non-letter chars too. Remove them\n-                # string may result to more than one char\n-                res.append(\'\'.join([c for c in normalized if c in allowed]))\n-\n-            else:\n-                # hex string instead of unknown char\n-                res.append("%x" % ordinal)\n-\n-    if six.PY2:\n-        return \'\'.join(res).encode(\'ascii\')\n-    return \'\'.join(res)\n+        text = repr(text)\n+    text = unidecode(text).strip()\n+    return "".join(filter(lambda c: c in allowed, text))\ndiff --git a/plone/i18n/normalizer/bg.py b/plone/i18n/normalizer/bg.py\nindex c1bfd10..97bf74c 100644\n--- a/plone/i18n/normalizer/bg.py\n+++ b/plone/i18n/normalizer/bg.py\n@@ -1,5 +1,3 @@\n-# -*- coding: UTF-8 -*-\n-\n from plone.i18n.normalizer.base import mapUnicode\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n@@ -7,71 +5,71 @@\n \n # Bulgarian character mapping\n mapping = {\n-    1040: \'A\',\n-    1041: \'B\',\n-    1042: \'V\',\n-    1043: \'G\',\n-    1044: \'D\',\n-    1045: \'E\',\n-    1046: \'ZH\',\n-    1047: \'Z\',\n-    1048: \'I\',\n-    1049: \'Y\',\n-    1050: \'K\',\n-    1051: \'L\',\n-    1052: \'M\',\n-    1053: \'N\',\n-    1054: \'O\',\n-    1055: \'P\',\n-    1056: \'R\',\n-    1057: \'S\',\n-    1058: \'T\',\n-    1059: \'U\',\n-    1060: \'F\',\n-    1061: \'H\',\n-    1062: \'TS\',\n-    1063: \'CH\',\n-    1064: \'SH\',\n-    1065: \'SHT\',\n-    1066: \'A\',\n-    1068: \'Y\',\n-    1070: \'YU\',\n-    1071: \'YA\',\n-    1072: \'a\',\n-    1073: \'b\',\n-    1074: \'v\',\n-    1075: \'g\',\n-    1076: \'d\',\n-    1077: \'e\',\n-    1078: \'zh\',\n-    1079: \'z\',\n-    1080: \'i\',\n-    1081: \'y\',\n-    1082: \'k\',\n-    1083: \'l\',\n-    1084: \'m\',\n-    1085: \'n\',\n-    1086: \'o\',\n-    1087: \'p\',\n-    1088: \'r\',\n-    1089: \'s\',\n-    1090: \'t\',\n-    1091: \'u\',\n-    1092: \'f\',\n-    1093: \'h\',\n-    1094: \'ts\',\n-    1095: \'ch\',\n-    1096: \'sh\',\n-    1097: \'sht\',\n-    1098: \'a\',\n-    1100: \'y\',\n-    1102: \'yu\',\n-    1103: \'ya\',\n+    1040: "A",\n+    1041: "B",\n+    1042: "V",\n+    1043: "G",\n+    1044: "D",\n+    1045: "E",\n+    1046: "ZH",\n+    1047: "Z",\n+    1048: "I",\n+    1049: "Y",\n+    1050: "K",\n+    1051: "L",\n+    1052: "M",\n+    1053: "N",\n+    1054: "O",\n+    1055: "P",\n+    1056: "R",\n+    1057: "S",\n+    1058: "T",\n+    1059: "U",\n+    1060: "F",\n+    1061: "H",\n+    1062: "TS",\n+    1063: "CH",\n+    1064: "SH",\n+    1065: "SHT",\n+    1066: "A",\n+    1068: "Y",\n+    1070: "YU",\n+    1071: "YA",\n+    1072: "a",\n+    1073: "b",\n+    1074: "v",\n+    1075: "g",\n+    1076: "d",\n+    1077: "e",\n+    1078: "zh",\n+    1079: "z",\n+    1080: "i",\n+    1081: "y",\n+    1082: "k",\n+    1083: "l",\n+    1084: "m",\n+    1085: "n",\n+    1086: "o",\n+    1087: "p",\n+    1088: "r",\n+    1089: "s",\n+    1090: "t",\n+    1091: "u",\n+    1092: "f",\n+    1093: "h",\n+    1094: "ts",\n+    1095: "ch",\n+    1096: "sh",\n+    1097: "sht",\n+    1098: "a",\n+    1100: "y",\n+    1102: "yu",\n+    1103: "ya",\n }\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/normalizer/de.py b/plone/i18n/normalizer/de.py\nindex 43c87a8..7aa0e51 100644\n--- a/plone/i18n/normalizer/de.py\n+++ b/plone/i18n/normalizer/de.py\n@@ -1,5 +1,3 @@\n-# -*- coding: UTF-8 -*-\n-\n from plone.i18n.normalizer.base import mapUnicode\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n@@ -17,28 +15,28 @@\n #     8364: Euro sign\n \n mapping = {\n-    196: \'AE\',\n-    198: \'AE\',\n-    214: \'OE\',\n-    220: \'UE\',\n-    223: \'ss\',\n-    224: \'a\',\n-    228: \'ae\',\n-    230: \'ae\',\n-    246: \'oe\',\n-    252: \'ue\',\n-    8222: \'-\',\n-    8220: \'-\',\n-    8218: \'-\',\n-    8216: \'-\',\n-    8211: \'-\',\n-    167: \'-\',\n-    8364: \'euro\',\n+    196: "AE",\n+    198: "AE",\n+    214: "OE",\n+    220: "UE",\n+    223: "ss",\n+    224: "a",\n+    228: "ae",\n+    230: "ae",\n+    246: "oe",\n+    252: "ue",\n+    8222: "-",\n+    8220: "-",\n+    8218: "-",\n+    8216: "-",\n+    8211: "-",\n+    167: "-",\n+    8364: "euro",\n }\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/normalizer/el.py b/plone/i18n/normalizer/el.py\nindex b280419..1c23159 100644\n--- a/plone/i18n/normalizer/el.py\n+++ b/plone/i18n/normalizer/el.py\n@@ -1,5 +1,3 @@\n-# -*- coding: UTF-8 -*-\n-\n from plone.i18n.normalizer.base import mapUnicode\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n@@ -7,80 +5,80 @@\n \n # Greek character mapping\n mapping = {\n-    902: \'A\',\n-    904: \'E\',\n-    905: \'H\',\n-    906: \'I\',\n-    908: \'O\',\n-    910: \'Y\',\n-    911: \'O\',\n-    912: \'i\',\n-    913: \'A\',\n-    914: \'B\',\n-    915: \'G\',\n-    916: \'D\',\n-    917: \'E\',\n-    918: \'Z\',\n-    919: \'I\',\n-    920: \'Th\',\n-    921: \'I\',\n-    922: \'K\',\n-    923: \'L\',\n-    924: \'M\',\n-    925: \'N\',\n-    926: \'Ks\',\n-    927: \'O\',\n-    928: \'P\',\n-    929: \'R\',\n-    931: \'S\',\n-    932: \'T\',\n-    933: \'Y\',\n-    934: \'F\',\n-    935: \'Ch\',\n-    936: \'Ps\',\n-    937: \'O\',\n-    938: \'I\',\n-    939: \'Y\',\n-    940: \'a\',\n-    941: \'e\',\n-    942: \'i\',\n-    943: \'i\',\n-    944: \'y\',\n-    945: \'a\',\n-    946: \'b\',\n-    947: \'g\',\n-    948: \'d\',\n-    949: \'e\',\n-    950: \'z\',\n-    951: \'i\',\n-    952: \'th\',\n-    953: \'i\',\n-    954: \'k\',\n-    955: \'l\',\n-    956: \'m\',\n-    957: \'n\',\n-    958: \'ks\',\n-    959: \'o\',\n-    960: \'p\',\n-    961: \'r\',\n-    962: \'s\',\n-    963: \'s\',\n-    964: \'t\',\n-    965: \'y\',\n-    966: \'f\',\n-    967: \'ch\',\n-    968: \'ps\',\n-    969: \'o\',\n-    970: \'i\',\n-    971: \'y\',\n-    972: \'o\',\n-    973: \'y\',\n-    974: \'o\',\n+    902: "A",\n+    904: "E",\n+    905: "H",\n+    906: "I",\n+    908: "O",\n+    910: "Y",\n+    911: "O",\n+    912: "i",\n+    913: "A",\n+    914: "B",\n+    915: "G",\n+    916: "D",\n+    917: "E",\n+    918: "Z",\n+    919: "I",\n+    920: "Th",\n+    921: "I",\n+    922: "K",\n+    923: "L",\n+    924: "M",\n+    925: "N",\n+    926: "Ks",\n+    927: "O",\n+    928: "P",\n+    929: "R",\n+    931: "S",\n+    932: "T",\n+    933: "Y",\n+    934: "F",\n+    935: "Ch",\n+    936: "Ps",\n+    937: "O",\n+    938: "I",\n+    939: "Y",\n+    940: "a",\n+    941: "e",\n+    942: "i",\n+    943: "i",\n+    944: "y",\n+    945: "a",\n+    946: "b",\n+    947: "g",\n+    948: "d",\n+    949: "e",\n+    950: "z",\n+    951: "i",\n+    952: "th",\n+    953: "i",\n+    954: "k",\n+    955: "l",\n+    956: "m",\n+    957: "n",\n+    958: "ks",\n+    959: "o",\n+    960: "p",\n+    961: "r",\n+    962: "s",\n+    963: "s",\n+    964: "t",\n+    965: "y",\n+    966: "f",\n+    967: "ch",\n+    968: "ps",\n+    969: "o",\n+    970: "i",\n+    971: "y",\n+    972: "o",\n+    973: "y",\n+    974: "o",\n }\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/normalizer/es.py b/plone/i18n/normalizer/es.py\nindex 9ccf4c1..7e2c167 100644\n--- a/plone/i18n/normalizer/es.py\n+++ b/plone/i18n/normalizer/es.py\n@@ -1,5 +1,3 @@\n-# -*- coding: UTF-8 -*-\n-\n from plone.i18n.normalizer.base import mapUnicode\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n@@ -7,36 +5,36 @@\n \n # Spanish character mapping\n mapping = {\n-    192: u\'A\',\n-    193: u\'A\',\n-    200: u\'E\',\n-    201: u\'E\',\n-    204: u\'I\',\n-    205: u\'I\',\n-    210: u\'O\',\n-    211: u\'O\',\n-    217: u\'U\',\n-    218: u\'U\',\n-    220: u\'U\',\n-    209: u\'N\',\n-    199: u\'C\',\n-    224: u\'a\',\n-    225: u\'a\',\n-    232: u\'e\',\n-    233: u\'e\',\n-    236: u\'i\',\n-    237: u\'i\',\n-    242: u\'o\',\n-    243: u\'o\',\n-    249: u\'u\',\n-    250: u\'u\',\n-    241: u\'n\',\n-    231: u\'c\',\n+    192: "A",\n+    193: "A",\n+    200: "E",\n+    201: "E",\n+    204: "I",\n+    205: "I",\n+    210: "O",\n+    211: "O",\n+    217: "U",\n+    218: "U",\n+    220: "U",\n+    209: "N",\n+    199: "C",\n+    224: "a",\n+    225: "a",\n+    232: "e",\n+    233: "e",\n+    236: "i",\n+    237: "i",\n+    242: "o",\n+    243: "o",\n+    249: "u",\n+    250: "u",\n+    241: "n",\n+    231: "c",\n }\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/normalizer/fr.py b/plone/i18n/normalizer/fr.py\nindex 006a385..775d021 100644\n--- a/plone/i18n/normalizer/fr.py\n+++ b/plone/i18n/normalizer/fr.py\n@@ -1,16 +1,14 @@\n-# -*- coding: UTF-8 -*-\n-\n from plone.i18n.normalizer.base import mapUnicode\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n \n \n # French character mapping\n-mapping = {339: \'oe\'}\n+mapping = {339: "oe"}\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/normalizer/interfaces.py b/plone/i18n/normalizer/interfaces.py\nindex dcd3779..78384ba 100644\n--- a/plone/i18n/normalizer/interfaces.py\n+++ b/plone/i18n/normalizer/interfaces.py\n@@ -1,46 +1,45 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \n class INormalizer(Interface):\n     """A normalizer can normalize any unicode text string according to a\n-       specific ruleset implemented in the normalizer itself.\n+    specific ruleset implemented in the normalizer itself.\n     """\n \n     def normalize(text, locale=None, max_length=None):\n         """The normalize method takes and input unicode text and an optional\n-           locale string and returns a normalized version of the text.\n-           If the locale is not None the ouput might differ dependent on the\n-           locale. The max_length argument allows you to override the default\n-           values used by the normalizers on a case-by-case basis.\n+        locale string and returns a normalized version of the text.\n+        If the locale is not None the ouput might differ dependent on the\n+        locale. The max_length argument allows you to override the default\n+        values used by the normalizers on a case-by-case basis.\n         """\n \n \n class IIDNormalizer(INormalizer):\n     """An ID normalizer can normalize any unicode string and returns a\n-       version that only contains of ASCII characters allowed in a typical\n-       scripting or programming language id, such as CSS class names or Python\n-       variable names for example.\n+    version that only contains of ASCII characters allowed in a typical\n+    scripting or programming language id, such as CSS class names or Python\n+    variable names for example.\n     """\n \n \n class IFileNameNormalizer(INormalizer):\n     """An file name normalizer can normalize any unicode string and returns a\n-       version that only contains of ASCII characters allowed in a URL while\n-       still preserving whitespace and upper and lower case.\n+    version that only contains of ASCII characters allowed in a URL while\n+    still preserving whitespace and upper and lower case.\n     """\n \n \n class IURLNormalizer(INormalizer):\n     """An URL normalizer can normalize any unicode string and returns a\n-       URL-safe version that only contains of ASCII characters allowed in a\n-       URL.\n+    URL-safe version that only contains of ASCII characters allowed in a\n+    URL.\n     """\n \n \n class IUserPreferredNormalizer(Interface):\n     """An adapter for the HTTPRequest to provide user preferred language\n-       dependent normalization.\n+    dependent normalization.\n     """\n \n     def normalize(text):\n@@ -49,11 +48,11 @@ def normalize(text):\n \n class IUserPreferredFileNameNormalizer(IUserPreferredNormalizer):\n     """An adapter for the HTTPRequest to provide user preferred language\n-       dependent normalization, based on an file name normalizer.\n+    dependent normalization, based on an file name normalizer.\n     """\n \n \n class IUserPreferredURLNormalizer(IUserPreferredNormalizer):\n     """An adapter for the HTTPRequest to provide user preferred language\n-       dependent normalization, based on an URL normalizer.\n+    dependent normalization, based on an URL normalizer.\n     """\ndiff --git a/plone/i18n/normalizer/ja.py b/plone/i18n/normalizer/ja.py\nindex 5c99efc..6242e17 100644\n--- a/plone/i18n/normalizer/ja.py\n+++ b/plone/i18n/normalizer/ja.py\n@@ -1,8 +1,6 @@\n-# -*- coding: UTF-8 -*-\n from plone.i18n.normalizer.base import allowed\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n-import six\n \n \n MAX_LENGTH = 6\n@@ -31,14 +29,11 @@ def ja_normalize(text, max_length=MAX_LENGTH):\n         exchanged = text\n     else:\n         exchanged = "".join(_gethashed(text, max_length))\n-    if six.PY2:\n-        return exchanged.encode(\'ascii\')\n-    else:\n-        return exchanged\n+    return exchanged\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/normalizer/pl.py b/plone/i18n/normalizer/pl.py\nindex b5c72d1..6aba3c7 100644\n--- a/plone/i18n/normalizer/pl.py\n+++ b/plone/i18n/normalizer/pl.py\n@@ -1,15 +1,14 @@\n-# -*- coding: UTF-8 -*-\n from plone.i18n.normalizer.base import mapUnicode\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n \n \n # Polish character mapping\n-mapping = {321: \'L\', 322: \'l\'}\n+mapping = {321: "L", 322: "l"}\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/normalizer/pt.py b/plone/i18n/normalizer/pt.py\nindex 14006d0..8ae80e1 100644\n--- a/plone/i18n/normalizer/pt.py\n+++ b/plone/i18n/normalizer/pt.py\n@@ -1,4 +1,3 @@\n-# -*- coding: UTF-8 -*-\n from plone.i18n.normalizer.base import mapUnicode\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n@@ -6,37 +5,37 @@\n \n # Portuguese character mapping\n mapping = {\n-    192: u\'A\',\n-    193: u\'A\',\n-    194: u\'A\',\n-    195: u\'A\',\n-    201: u\'E\',\n-    202: u\'E\',\n-    205: u\'I\',\n-    211: u\'O\',\n-    212: u\'O\',\n-    213: u\'O\',\n-    218: u\'U\',\n-    220: u\'U\',\n-    199: u\'C\',\n-    224: u\'a\',\n-    225: u\'a\',\n-    226: u\'a\',\n-    227: u\'a\',\n-    233: u\'e\',\n-    234: u\'e\',\n-    237: u\'i\',\n-    243: u\'o\',\n-    244: u\'o\',\n-    245: u\'o\',\n-    250: u\'u\',\n-    252: u\'u\',\n-    231: u\'c\',\n+    192: "A",\n+    193: "A",\n+    194: "A",\n+    195: "A",\n+    201: "E",\n+    202: "E",\n+    205: "I",\n+    211: "O",\n+    212: "O",\n+    213: "O",\n+    218: "U",\n+    220: "U",\n+    199: "C",\n+    224: "a",\n+    225: "a",\n+    226: "a",\n+    227: "a",\n+    233: "e",\n+    234: "e",\n+    237: "i",\n+    243: "o",\n+    244: "o",\n+    245: "o",\n+    250: "u",\n+    252: "u",\n+    231: "c",\n }\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/normalizer/ru.py b/plone/i18n/normalizer/ru.py\nindex 1d35782..cad6cca 100644\n--- a/plone/i18n/normalizer/ru.py\n+++ b/plone/i18n/normalizer/ru.py\n@@ -1,4 +1,3 @@\n-# -*- coding: UTF-8 -*-\n from plone.i18n.normalizer.base import mapUnicode\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n@@ -6,77 +5,77 @@\n \n # Russian character mapping\n mapping = {\n-    1081: \'i\',\n-    1049: \'I\',\n-    1094: \'c\',\n-    1062: \'C\',\n-    1091: \'u\',\n-    1059: \'U\',\n-    1082: \'k\',\n-    1050: \'K\',\n-    1077: \'e\',\n-    1045: \'E\',\n-    1085: \'n\',\n-    1053: \'N\',\n-    1075: \'g\',\n-    1043: \'G\',\n-    1096: \'sh\',\n-    1064: \'SH\',\n-    1097: \'sch\',\n-    1065: \'SCH\',\n-    1079: \'z\',\n-    1047: \'Z\',\n-    1093: \'h\',\n-    1061: \'H\',\n-    1098: \'\',\n-    1066: \'\',\n-    1092: \'f\',\n-    1060: \'F\',\n-    1099: \'y\',\n-    1067: \'Y\',\n-    1074: \'v\',\n-    1042: \'V\',\n-    1072: \'a\',\n-    1040: \'A\',\n-    1087: \'p\',\n-    1055: \'P\',\n-    1088: \'r\',\n-    1056: \'R\',\n-    1086: \'o\',\n-    1054: \'O\',\n-    1083: \'l\',\n-    1051: \'L\',\n-    1076: \'d\',\n-    1044: \'D\',\n-    1078: \'zh\',\n-    1046: \'ZH\',\n-    1101: \'e\',\n-    1069: \'E\',\n-    1103: \'ya\',\n-    1071: \'YA\',\n-    1095: \'ch\',\n-    1063: \'CH\',\n-    1089: \'s\',\n-    1057: \'S\',\n-    1084: \'m\',\n-    1052: \'M\',\n-    1080: \'i\',\n-    1048: \'I\',\n-    1090: \'t\',\n-    1058: \'T\',\n-    1100: \'\',\n-    1068: \'\',\n-    1073: \'b\',\n-    1041: \'B\',\n-    1102: \'yu\',\n-    1070: \'YU\',\n-    1105: \'yo\',\n-    1025: \'YO\',\n+    1081: "i",\n+    1049: "I",\n+    1094: "c",\n+    1062: "C",\n+    1091: "u",\n+    1059: "U",\n+    1082: "k",\n+    1050: "K",\n+    1077: "e",\n+    1045: "E",\n+    1085: "n",\n+    1053: "N",\n+    1075: "g",\n+    1043: "G",\n+    1096: "sh",\n+    1064: "SH",\n+    1097: "sch",\n+    1065: "SCH",\n+    1079: "z",\n+    1047: "Z",\n+    1093: "h",\n+    1061: "H",\n+    1098: "",\n+    1066: "",\n+    1092: "f",\n+    1060: "F",\n+    1099: "y",\n+    1067: "Y",\n+    1074: "v",\n+    1042: "V",\n+    1072: "a",\n+    1040: "A",\n+    1087: "p",\n+    1055: "P",\n+    1088: "r",\n+    1056: "R",\n+    1086: "o",\n+    1054: "O",\n+    1083: "l",\n+    1051: "L",\n+    1076: "d",\n+    1044: "D",\n+    1078: "zh",\n+    1046: "ZH",\n+    1101: "e",\n+    1069: "E",\n+    1103: "ya",\n+    1071: "YA",\n+    1095: "ch",\n+    1063: "CH",\n+    1089: "s",\n+    1057: "S",\n+    1084: "m",\n+    1052: "M",\n+    1080: "i",\n+    1048: "I",\n+    1090: "t",\n+    1058: "T",\n+    1100: "",\n+    1068: "",\n+    1073: "b",\n+    1041: "B",\n+    1102: "yu",\n+    1070: "YU",\n+    1105: "yo",\n+    1025: "YO",\n }\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/normalizer/tests/__init__.py b/plone/i18n/normalizer/tests/__init__.py\nindex ec51c5a..792d600 100644\n--- a/plone/i18n/normalizer/tests/__init__.py\n+++ b/plone/i18n/normalizer/tests/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/i18n/normalizer/tests/base.py b/plone/i18n/normalizer/tests/base.py\nindex aaebc04..9b22c60 100644\n--- a/plone/i18n/normalizer/tests/base.py\n+++ b/plone/i18n/normalizer/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.configuration.xmlconfig import XMLConfig\n \n \ndiff --git a/plone/i18n/normalizer/tests/test_adapters.py b/plone/i18n/normalizer/tests/test_adapters.py\nindex d15aaca..b5c339b 100644\n--- a/plone/i18n/normalizer/tests/test_adapters.py\n+++ b/plone/i18n/normalizer/tests/test_adapters.py\n@@ -1,9 +1,7 @@\n-# -*- coding: utf-8 -*-\n-\n import unittest\n \n \n-class BaseTestCase(object):\n+class BaseTestCase:\n     def setUp(self):\n         from .base import setUp\n \n@@ -26,40 +24,31 @@ def _makeOne(self, lang):\n \n class TestFileNameNormalizer(BaseTestCase, unittest.TestCase):\n     def _getTargetClass(self):\n-        from plone.i18n.normalizer.adapters import (\n-            UserPreferredFileNameNormalizer,\n-        )\n+        from plone.i18n.normalizer.adapters import UserPreferredFileNameNormalizer\n \n         return UserPreferredFileNameNormalizer\n \n     def test_german(self):\n         norm = self._makeOne("de")\n-        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n+        self.assertEqual(norm.normalize("simpleandsafe"), "simpleandsafe")\n \n-        self.assertEqual(\n-            norm.normalize(u"text with uml\xc3\xa4ut"), u"text with umlaeut"\n-        )\n+        self.assertEqual(norm.normalize("text with uml\xc3\xa4ut"), "text with umlaeut")\n \n     def test_german_country(self):\n         norm = self._makeOne("de-DE")\n-        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n+        self.assertEqual(norm.normalize("simpleandsafe"), "simpleandsafe")\n \n-        self.assertEqual(\n-            norm.normalize(u"text with uml\xc3\xa4ut"), u"text with umlaeut"\n-        )\n+        self.assertEqual(norm.normalize("text with uml\xc3\xa4ut"), "text with umlaeut")\n \n     def test_english(self):\n         norm = self._makeOne("en")\n-        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n-\n-        self.assertEqual(\n-            norm.normalize(u"text with uml\xc3\xa4ut"), u"text with umlaut"\n-        )\n+        self.assertEqual(norm.normalize("simpleandsafe"), "simpleandsafe")\n+        self.assertEqual(norm.normalize("text with uml\xc3\xa4ut"), "text with umlaut")\n \n     def test_spanish(self):\n         norm = self._makeOne("es")\n-        self.assertEqual(norm.normalize(u"simpleandsafe"), "simpleandsafe")\n-        self.assertEqual(norm.normalize(u"text with e\xc3\xb1e"), u"text with ene")\n+        self.assertEqual(norm.normalize("simpleandsafe"), "simpleandsafe")\n+        self.assertEqual(norm.normalize("text with e\xc3\xb1e"), "text with ene")\n \n \n class TestUrlNormalizer(BaseTestCase, unittest.TestCase):\n@@ -70,30 +59,24 @@ def _getTargetClass(self):\n \n     def test_german(self):\n         norm = self._makeOne("de")\n-        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n+        self.assertEqual(norm.normalize("simpleandsafe"), "simpleandsafe")\n \n-        self.assertEqual(\n-            norm.normalize(u"text with uml\xc3\xa4ut"), u"text-with-umlaeut"\n-        )\n+        self.assertEqual(norm.normalize("text with uml\xc3\xa4ut"), "text-with-umlaeut")\n \n     def test_german_country(self):\n         norm = self._makeOne("de-DE")\n-        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n+        self.assertEqual(norm.normalize("simpleandsafe"), "simpleandsafe")\n \n-        self.assertEqual(\n-            norm.normalize(u"text with uml\xc3\xa4ut"), u"text-with-umlaeut"\n-        )\n+        self.assertEqual(norm.normalize("text with uml\xc3\xa4ut"), "text-with-umlaeut")\n \n     def test_english(self):\n         norm = self._makeOne("en")\n-        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n+        self.assertEqual(norm.normalize("simpleandsafe"), "simpleandsafe")\n \n-        self.assertEqual(\n-            norm.normalize(u"text with uml\xc3\xa4ut"), u"text-with-umlaut"\n-        )\n+        self.assertEqual(norm.normalize("text with uml\xc3\xa4ut"), "text-with-umlaut")\n \n     def test_spanish(self):\n         norm = self._makeOne("es")\n-        self.assertEqual(norm.normalize(u"simpleandsafe"), u"simpleandsafe")\n+        self.assertEqual(norm.normalize("simpleandsafe"), "simpleandsafe")\n \n-        self.assertEqual(norm.normalize(u"text with e\xc3\xb1e"), u"text-with-ene")\n+        self.assertEqual(norm.normalize("text with e\xc3\xb1e"), "text-with-ene")\ndiff --git a/plone/i18n/normalizer/tests/test_normalizer.py b/plone/i18n/normalizer/tests/test_normalizer.py\nindex 93b0f6c..802a1c9 100644\n--- a/plone/i18n/normalizer/tests/test_normalizer.py\n+++ b/plone/i18n/normalizer/tests/test_normalizer.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from .base import setUp as configurationSetUp\n from .base import tearDown\n from doctest import DocTestSuite\n@@ -9,65 +7,58 @@\n from zope.component import queryUtility\n \n import doctest\n-import six\n import unittest\n \n \n-def utf8unicode(value):\n-    if six.PY2:\n-        return unicode(value, "utf-8")\n-    return value\n-\n-\n def testIDNormalizer():\n     """\n-      >>> util = queryUtility(IIDNormalizer)\n-      >>> util\n-      <plone.i18n.normalizer.IDNormalizer object at ...>\n+    >>> util = queryUtility(IIDNormalizer)\n+    >>> util\n+    <plone.i18n.normalizer.IDNormalizer object at ...>\n \n-      >>> util.normalize(u\'simpleandsafe\')\n-      \'simpleandsafe\'\n+    >>> util.normalize(\'simpleandsafe\')\n+    \'simpleandsafe\'\n \n-      >>> util.normalize(u\' Whitespace and capital Letters  \')\n-      \'whitespace-and-capital-letters\'\n+    >>> util.normalize(\' Whitespace and capital Letters  \')\n+    \'whitespace-and-capital-letters\'\n \n-      >>> util.normalize(u">here\'s another!")\n-      \'heres-another\'\n+    >>> util.normalize(u">here\'s another!")\n+    \'heres-another\'\n \n-      >>> util.normalize(u">>>here\'!--s yet another!!!")\n-      \'here-s-yet-another\'\n+    >>> util.normalize(u">>>here\'!--s yet another!!!")\n+    \'here-s-yet-another\'\n \n-      >>> util.normalize(utf8unicode("uml\xc3\xa4ut.doc"))\n-      \'umlaut-doc\'\n+    >>> util.normalize("uml\xc3\xa4ut.doc")\n+    \'umlaut-doc\'\n \n-      >>> from plone.i18n.normalizer import MAX_LENGTH\n+    >>> from plone.i18n.normalizer import MAX_LENGTH\n \n-      >>> testString = u"thissentenceiswaytolongtobecroppedwithoutcuttedbythenormalizemethodbecauseithasnoplacetocrop"\n-      >>> util.normalize(testString)\n-      \'thissentenceiswaytolongtobecroppedwithoutcuttedbyt\'\n-      >>> len(util.normalize(testString)) == MAX_LENGTH\n-      True\n+    >>> testString = u"thissentenceiswaytolongtobecroppedwithoutcuttedbythenormalizemethodbecauseithasnoplacetocrop"\n+    >>> util.normalize(testString)\n+    \'thissentenceiswaytolongtobecroppedwithoutcuttedbyt\'\n+    >>> len(util.normalize(testString)) == MAX_LENGTH\n+    True\n \n-      >>> testString = u"thissentenceisacropped-by-the-normalize-method-because-it-has-many-places-to-crop"\n-      >>> util.normalize(testString)\n-      \'thissentenceisacropped-by-the-normalize-method\'\n-      >>> len(util.normalize(testString)) <= MAX_LENGTH\n-      True\n+    >>> testString = u"thissentenceisacropped-by-the-normalize-method-because-it-has-many-places-to-crop"\n+    >>> util.normalize(testString)\n+    \'thissentenceisacropped-by-the-normalize-method\'\n+    >>> len(util.normalize(testString)) <= MAX_LENGTH\n+    True\n \n-      >>> testString = u"this-sentence-is-way-to-long-but-can-be-cropped-by-the-normalize-method-because-it-has-many-places-to-crop"\n-      >>> util.normalize(testString)\n-      \'this-sentence-is-way-to-long-but-can-be-cropped-by\'\n-      >>> len(util.normalize(testString)) <= MAX_LENGTH\n-      True\n+    >>> testString = u"this-sentence-is-way-to-long-but-can-be-cropped-by-the-normalize-method-because-it-has-many-places-to-crop"\n+    >>> util.normalize(testString)\n+    \'this-sentence-is-way-to-long-but-can-be-cropped-by\'\n+    >>> len(util.normalize(testString)) <= MAX_LENGTH\n+    True\n \n-      >>> util.normalize(u"rest `n` peace")\n-      \'rest-n-peace\'\n+    >>> util.normalize(u"rest `n` peace")\n+    \'rest-n-peace\'\n \n-      >>> util.normalize(u"short-hello-version", max_length=10)\n-      \'short\'\n+    >>> util.normalize(u"short-hello-version", max_length=10)\n+    \'short\'\n \n-      >>> util.normalize(u"short-hello-version", max_length=15)\n-      \'short-hello\'\n+    >>> util.normalize(u"short-hello-version", max_length=15)\n+    \'short-hello\'\n     """\n \n \n@@ -85,22 +76,22 @@ def testLocaleAwareIDNormalizer():\n       >>> sm = getSiteManager()\n       >>> sm.registerUtility(de_util, IIDNormalizer, name=\'de\')\n \n-      >>> util.normalize(u\'simpleandsafe\', locale=\'de\')\n+      >>> util.normalize(\'simpleandsafe\', locale=\'de\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de\')\n+      >>> util.normalize(\'text with uml\xc3\xa4ut\', locale=\'de\')\n       \'text-with-umlaeut\'\n \n     Make sure we get the de normalizer as there\'s no special one for de-DE\n     registered.\n \n-      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de-DE\')\n+      >>> util.normalize(\'text with uml\xc3\xa4ut\', locale=\'de-DE\')\n       \'text-with-umlaeut\'\n \n-      >>> util.normalize(u\'simpleandsafe\', locale=\'pt-BR\')\n+      >>> util.normalize(\'simpleandsafe\', locale=\'pt-BR\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(u\'simpleandsafe\', locale=\'sr@Latn\')\n+      >>> util.normalize(\'simpleandsafe\', locale=\'sr@Latn\')\n       \'simpleandsafe\'\n \n       >>> util.normalize(u"short-hello-version", locale=\'de-DE\', max_length=10)\n@@ -112,7 +103,7 @@ def testLocaleAwareIDNormalizer():\n     Make sure we also handle POSIX-format locale identifiers,\n     for backwards-compatibility with an earlier version of plone.i18n.\n \n-      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de_DE\')\n+      >>> util.normalize(\'text with uml\xc3\xa4ut\', locale=\'de_DE\')\n       \'text-with-umlaeut\'\n \n     """\n@@ -120,45 +111,45 @@ def testLocaleAwareIDNormalizer():\n \n def testFileNameNormalizer():\n     """\n-      >>> util = queryUtility(IFileNameNormalizer)\n-      >>> util\n-      <plone.i18n.normalizer.FileNameNormalizer object at ...>\n+    >>> util = queryUtility(IFileNameNormalizer)\n+    >>> util\n+    <plone.i18n.normalizer.FileNameNormalizer object at ...>\n \n-      >>> util.normalize(u\'simpleandsafe\')\n-      \'simpleandsafe\'\n+    >>> util.normalize(\'simpleandsafe\')\n+    \'simpleandsafe\'\n \n-      >>> util.normalize(u\' Whitespace and capital Letters  \')\n-      \'Whitespace and capital Letters\'\n+    >>> util.normalize(\' Whitespace and capital Letters  \')\n+    \'Whitespace and capital Letters\'\n \n-      >>> util.normalize(u">here\'s another!")\n-      \'heres another\'\n+    >>> util.normalize(u">here\'s another!")\n+    \'heres another\'\n \n-      >>> util.normalize(u">>>here\'!--s yet another!!!")\n-      \'here-s yet another\'\n+    >>> util.normalize(u">>>here\'!--s yet another!!!")\n+    \'here-s yet another\'\n \n-      >>> util.normalize(u"{[(me too)]}")\n-      \'me too\'\n+    >>> util.normalize(u"{[(me too)]}")\n+    \'me too\'\n \n-      >>> util.normalize("pseudo_filename,pot,#1.doc")\n-      \'pseudo_filename-pot-#1.doc\'\n+    >>> util.normalize("pseudo_filename,pot,#1.doc")\n+    \'pseudo_filename-pot-#1.doc\'\n \n-      >>> util.normalize(utf8unicode("uml\xc3\xa4ut.doc"))\n-      \'umlaut.doc\'\n+    >>> util.normalize("uml\xc3\xa4ut.doc")\n+    \'umlaut.doc\'\n \n-      >>> len(util.normalize(u\'aa\' * 2000))\n-      1023\n+    >>> len(util.normalize(\'aa\' * 2000))\n+    1023\n \n-      >>> util.normalize(u"rest `n` peace")\n-      \'rest -n- peace\'\n+    >>> util.normalize(u"rest `n` peace")\n+    \'rest -n- peace\'\n \n-      >>> util.normalize(u"short-hello-version", max_length=10)\n-      \'short\'\n+    >>> util.normalize(u"short-hello-version", max_length=10)\n+    \'short\'\n \n-      >>> util.normalize(u"_some_cameras_are_evil")\n-      \'some_cameras_are_evil\'\n+    >>> util.normalize(u"_some_cameras_are_evil")\n+    \'some_cameras_are_evil\'\n \n-      >>> util.normalize(u"____my_new_file")\n-      \'my_new_file\'\n+    >>> util.normalize(u"____my_new_file")\n+    \'my_new_file\'\n     """\n \n \n@@ -168,22 +159,22 @@ def testLocaleAwareFileNameNormalizer():\n       >>> util\n       <plone.i18n.normalizer.FileNameNormalizer object at ...>\n \n-      >>> util.normalize(u\'simpleandsafe\', locale=\'de\')\n+      >>> util.normalize(\'simpleandsafe\', locale=\'de\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de\')\n+      >>> util.normalize(\'text with uml\xc3\xa4ut\', locale=\'de\')\n       \'text with umlaeut\'\n \n     Make sure we get the de normalizer as there\'s no special one for de-DE\n     registered.\n \n-      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de-DE\')\n+      >>> util.normalize(\'text with uml\xc3\xa4ut\', locale=\'de-DE\')\n       \'text with umlaeut\'\n \n-      >>> util.normalize(u\'simpleandsafe\', locale=\'pt-BR\')\n+      >>> util.normalize(\'simpleandsafe\', locale=\'pt-BR\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(u\'simpleandsafe\', locale=\'sr@Latn\')\n+      >>> util.normalize(\'simpleandsafe\', locale=\'sr@Latn\')\n       \'simpleandsafe\'\n \n       >>> util.normalize(u"short-hello-version", locale=\'de-DE\', max_length=10)\n@@ -195,7 +186,7 @@ def testLocaleAwareFileNameNormalizer():\n     Make sure we also handle POSIX-format locale identifiers,\n     for backwards-compatibility with an earlier version of plone.i18n.\n \n-      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de_DE\')\n+      >>> util.normalize(\'text with uml\xc3\xa4ut\', locale=\'de_DE\')\n       \'text with umlaeut\'\n \n     """\n@@ -203,53 +194,53 @@ def testLocaleAwareFileNameNormalizer():\n \n def testURLNormalizer():\n     """\n-      >>> util = queryUtility(IURLNormalizer)\n-      >>> util\n-      <plone.i18n.normalizer.URLNormalizer object at ...>\n+    >>> util = queryUtility(IURLNormalizer)\n+    >>> util\n+    <plone.i18n.normalizer.URLNormalizer object at ...>\n \n-      >>> util.normalize(u\'simpleandsafe\')\n-      \'simpleandsafe\'\n+    >>> util.normalize(\'simpleandsafe\')\n+    \'simpleandsafe\'\n \n-      >>> util.normalize(u\' Whitespace and capital Letters  \')\n-      \'whitespace-and-capital-letters\'\n+    >>> util.normalize(\' Whitespace and capital Letters  \')\n+    \'whitespace-and-capital-letters\'\n \n-      >>> util.normalize(u">here\'s another!")\n-      \'heres-another\'\n+    >>> util.normalize(u">here\'s another!")\n+    \'heres-another\'\n \n-      >>> util.normalize(u">>>here\'!--s yet another!!!")\n-      \'here-s-yet-another\'\n+    >>> util.normalize(u">>>here\'!--s yet another!!!")\n+    \'here-s-yet-another\'\n \n-      >>> util.normalize(u"Doe, Joe")\n-      \'doe-joe\'\n+    >>> util.normalize(u"Doe, Joe")\n+    \'doe-joe\'\n \n-      >>> util.normalize(utf8unicode("uml\xc3\xa4ut.doc"))\n-      \'umlaut.doc\'\n+    >>> util.normalize("uml\xc3\xa4ut.doc")\n+    \'umlaut.doc\'\n \n-      >>> util.normalize(\'quote "this"!\')\n-      \'quote-this\'\n+    >>> util.normalize(\'quote "this"!\')\n+    \'quote-this\'\n \n-      >>> util.normalize("quote \'this\'!")\n-      \'quote-this\'\n+    >>> util.normalize("quote \'this\'!")\n+    \'quote-this\'\n \n-      >>> util.normalize("I\'m not a FILE.txt")\n-      \'im-not-a-file.txt\'\n+    >>> util.normalize("I\'m not a FILE.txt")\n+    \'im-not-a-file.txt\'\n \n-      >>> util.normalize("I\'m a big file.TXT")\n-      \'im-a-big-file.txt\'\n+    >>> util.normalize("I\'m a big file.TXT")\n+    \'im-a-big-file.txt\'\n \n-      >>> util.normalize(u"rest `n` peace")\n-      \'rest-n-peace\'\n+    >>> util.normalize(u"rest `n` peace")\n+    \'rest-n-peace\'\n \n-      >>> len(util.normalize(u\'aa\' * 2000))\n-      255\n+    >>> len(util.normalize(\'aa\' * 2000))\n+    255\n \n-      >>> util.normalize(u"short-hello-version", max_length=10)\n-      \'short\'\n+    >>> util.normalize(u"short-hello-version", max_length=10)\n+    \'short\'\n \n-      Leading underscores are forbidden by zope, so this\n-      normalizer should strip it\n-      >>> util.normalize(u\'_awesome.txt\')\n-      \'awesome.txt\'\n+    Leading underscores are forbidden by zope, so this\n+    normalizer should strip it\n+    >>> util.normalize(\'_awesome.txt\')\n+    \'awesome.txt\'\n     """\n \n \n@@ -259,22 +250,22 @@ def testLocaleAwareURLNormalizer():\n       >>> util\n       <plone.i18n.normalizer.URLNormalizer object at ...>\n \n-      >>> util.normalize(u\'simpleandsafe\', locale=\'de\')\n+      >>> util.normalize(\'simpleandsafe\', locale=\'de\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de\')\n+      >>> util.normalize(\'text with uml\xc3\xa4ut\', locale=\'de\')\n       \'text-with-umlaeut\'\n \n     Make sure we get the de normalizer as there\'s no special one for de-DE\n     registered.\n \n-      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de-DE\')\n+      >>> util.normalize(\'text with uml\xc3\xa4ut\', locale=\'de-DE\')\n       \'text-with-umlaeut\'\n \n-      >>> util.normalize(u\'simpleandsafe\', locale=\'pt-BR\')\n+      >>> util.normalize(\'simpleandsafe\', locale=\'pt-BR\')\n       \'simpleandsafe\'\n \n-      >>> util.normalize(u\'simpleandsafe\', locale=\'sr@Latn\')\n+      >>> util.normalize(\'simpleandsafe\', locale=\'sr@Latn\')\n       \'simpleandsafe\'\n \n       >>> util.normalize(u"short-hello-version", locale=\'de-DE\', max_length=10)\n@@ -283,7 +274,7 @@ def testLocaleAwareURLNormalizer():\n     Make sure we also handle POSIX-format locale identifiers,\n     for backwards-compatibility with an earlier version of plone.i18n.\n \n-      >>> util.normalize(utf8unicode(\'text with uml\xc3\xa4ut\'), locale=\'de_DE\')\n+      >>> util.normalize(\'text with uml\xc3\xa4ut\', locale=\'de_DE\')\n       \'text-with-umlaeut\'\n \n     """\ndiff --git a/plone/i18n/normalizer/tr.py b/plone/i18n/normalizer/tr.py\nindex b9310ef..58e4ca3 100644\n--- a/plone/i18n/normalizer/tr.py\n+++ b/plone/i18n/normalizer/tr.py\n@@ -1,16 +1,14 @@\n-# -*- coding: UTF-8 -*-\n-\n from plone.i18n.normalizer.base import mapUnicode\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n \n \n # Turkish character mapping\n-mapping = {286: \'G\', 287: \'g\', 304: \'I\', 305: \'i\', 350: \'S\', 351: \'s\'}\n+mapping = {286: "G", 287: "g", 304: "I", 305: "i", 350: "S", 351: "s"}\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/normalizer/uk.py b/plone/i18n/normalizer/uk.py\nindex 3ed6dfc..9f306ea 100644\n--- a/plone/i18n/normalizer/uk.py\n+++ b/plone/i18n/normalizer/uk.py\n@@ -1,4 +1,3 @@\n-# -*- coding: UTF-8 -*-\n from plone.i18n.normalizer.base import mapUnicode\n from plone.i18n.normalizer.interfaces import INormalizer\n from zope.interface import implementer\n@@ -6,77 +5,77 @@\n \n # Ukrainian character mapping (according to BGN/PCGN romanization system)\n mapping = {\n-    0x0410: u\'A\',\n-    0x0430: u\'a\',\n-    0x0411: u\'B\',\n-    0x0431: u\'b\',\n-    0x0412: u\'V\',\n-    0x0432: u\'v\',\n-    0x0413: u\'H\',\n-    0x0433: u\'h\',\n-    0x0490: u\'G\',\n-    0x0491: u\'g\',\n-    0x0414: u\'D\',\n-    0x0434: u\'d\',\n-    0x0415: u\'E\',\n-    0x0435: u\'e\',\n-    0x0404: u\'YE\',\n-    0x0454: u\'ye\',\n-    0x0416: u\'ZH\',\n-    0x0436: u\'zh\',\n-    0x0417: u\'Z\',\n-    0x0437: u\'z\',\n-    0x0418: u\'Y\',\n-    0x0438: u\'y\',\n-    0x0406: u\'I\',\n-    0x0456: u\'i\',\n-    0x0407: u\'YI\',\n-    0x0457: u\'yi\',\n-    0x0419: u\'Y\',\n-    0x0439: u\'y\',\n-    0x041A: u\'K\',\n-    0x043A: u\'k\',\n-    0x041B: u\'L\',\n-    0x043B: u\'l\',\n-    0x041C: u\'M\',\n-    0x043C: u\'m\',\n-    0x041D: u\'N\',\n-    0x043D: u\'n\',\n-    0x041E: u\'O\',\n-    0x043E: u\'o\',\n-    0x041F: u\'P\',\n-    0x043F: u\'p\',\n-    0x0420: u\'R\',\n-    0x0440: u\'r\',\n-    0x0421: u\'S\',\n-    0x0441: u\'s\',\n-    0x0422: u\'T\',\n-    0x0442: u\'t\',\n-    0x0423: u\'U\',\n-    0x0443: u\'u\',\n-    0x0424: u\'F\',\n-    0x0444: u\'f\',\n-    0x0425: u\'KH\',\n-    0x0445: u\'kh\',\n-    0x0426: u\'TS\',\n-    0x0446: u\'ts\',\n-    0x0427: u\'CH\',\n-    0x0447: u\'ch\',\n-    0x0428: u\'SH\',\n-    0x0448: u\'sh\',\n-    0x0429: u\'SHCH\',\n-    0x0449: u\'shch\',\n-    0x042C: u\'\',\n-    0x044C: u\'\',\n-    0x042E: u\'YU\',\n-    0x044E: u\'yu\',\n-    0x042F: u\'YA\',\n-    0x044F: u\'ya\',\n+    0x0410: "A",\n+    0x0430: "a",\n+    0x0411: "B",\n+    0x0431: "b",\n+    0x0412: "V",\n+    0x0432: "v",\n+    0x0413: "H",\n+    0x0433: "h",\n+    0x0490: "G",\n+    0x0491: "g",\n+    0x0414: "D",\n+    0x0434: "d",\n+    0x0415: "E",\n+    0x0435: "e",\n+    0x0404: "YE",\n+    0x0454: "ye",\n+    0x0416: "ZH",\n+    0x0436: "zh",\n+    0x0417: "Z",\n+    0x0437: "z",\n+    0x0418: "Y",\n+    0x0438: "y",\n+    0x0406: "I",\n+    0x0456: "i",\n+    0x0407: "YI",\n+    0x0457: "yi",\n+    0x0419: "Y",\n+    0x0439: "y",\n+    0x041A: "K",\n+    0x043A: "k",\n+    0x041B: "L",\n+    0x043B: "l",\n+    0x041C: "M",\n+    0x043C: "m",\n+    0x041D: "N",\n+    0x043D: "n",\n+    0x041E: "O",\n+    0x043E: "o",\n+    0x041F: "P",\n+    0x043F: "p",\n+    0x0420: "R",\n+    0x0440: "r",\n+    0x0421: "S",\n+    0x0441: "s",\n+    0x0422: "T",\n+    0x0442: "t",\n+    0x0423: "U",\n+    0x0443: "u",\n+    0x0424: "F",\n+    0x0444: "f",\n+    0x0425: "KH",\n+    0x0445: "kh",\n+    0x0426: "TS",\n+    0x0446: "ts",\n+    0x0427: "CH",\n+    0x0447: "ch",\n+    0x0428: "SH",\n+    0x0448: "sh",\n+    0x0429: "SHCH",\n+    0x0449: "shch",\n+    0x042C: "",\n+    0x044C: "",\n+    0x042E: "YU",\n+    0x044E: "yu",\n+    0x042F: "YA",\n+    0x044F: "ya",\n }\n \n \n @implementer(INormalizer)\n-class Normalizer(object):\n+class Normalizer:\n     """\n     This normalizer can normalize any unicode string and returns a version\n     that only contains of ASCII characters.\ndiff --git a/plone/i18n/tests/__init__.py b/plone/i18n/tests/__init__.py\nindex ec51c5a..792d600 100644\n--- a/plone/i18n/tests/__init__.py\n+++ b/plone/i18n/tests/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/plone/i18n/tests/base.py b/plone/i18n/tests/base.py\nindex f34ee74..241ce11 100644\n--- a/plone/i18n/tests/base.py\n+++ b/plone/i18n/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app import testing\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import bbb\n@@ -11,10 +10,9 @@ class PloneI18nLayer(PloneSandboxLayer):\n     defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n-        import plone.i18n\n-\n         # Needed to have ILanguage adapter for dx\n         import plone.app.multilingual\n+        import plone.i18n\n \n         self.loadZCML(package=plone.i18n)\n         self.loadZCML(package=plone.app.multilingual)\n@@ -22,17 +20,15 @@ def setUpZope(self, app, configurationContext):\n \n PLT_FIXTURE = PloneI18nLayer()\n PLT_FUNCTIONAL_TESTING = testing.FunctionalTesting(\n-    bases=(PLT_FIXTURE,), name=\'Plonei18nTestCase:Functional\'\n+    bases=(PLT_FIXTURE,), name="Plonei18nTestCase:Functional"\n )\n \n \n class TestCase(bbb.PloneTestCase):\n-    """Simple test case\n-    """\n+    """Simple test case"""\n \n     layer = PLT_FUNCTIONAL_TESTING\n \n \n class FunctionalTestCase(TestCase):\n-    """Simple test case for functional tests\n-    """\n+    """Simple test case for functional tests"""\ndiff --git a/plone/i18n/tests/test_languageutility.py b/plone/i18n/tests/test_languageutility.py\nindex e7b71dc..119b3ae 100644\n--- a/plone/i18n/tests/test_languageutility.py\n+++ b/plone/i18n/tests/test_languageutility.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.i18n.interfaces import ILanguageSchema\n@@ -27,43 +26,33 @@ def testLanguageSettings(self):\n         self.settings.available_languages = supportedLanguages\n         self.settings.use_combined_language_codes = False\n         self.assertEqual(self.ltool.getDefaultLanguage(), defaultLanguage)\n-        self.assertEqual(\n-            self.ltool.getSupportedLanguages(), supportedLanguages\n-        )\n+        self.assertEqual(self.ltool.getSupportedLanguages(), supportedLanguages)\n \n     def testSupportedLanguages(self):\n         defaultLanguage = "de"\n         supportedLanguages = ["en", "de", "no"]\n         self.settings.available_languages = supportedLanguages\n         self.settings.default_language = defaultLanguage\n-        self.assertEqual(\n-            self.ltool.getSupportedLanguages(), supportedLanguages\n-        )\n+        self.assertEqual(self.ltool.getSupportedLanguages(), supportedLanguages)\n \n         self.ltool.removeSupportedLanguages(supportedLanguages)\n         self.assertEqual(self.ltool.getSupportedLanguages(), [])\n \n         for lang in supportedLanguages:\n             self.ltool.addSupportedLanguage(lang)\n-        self.assertEqual(\n-            self.ltool.getSupportedLanguages(), supportedLanguages\n-        )\n+        self.assertEqual(self.ltool.getSupportedLanguages(), supportedLanguages)\n \n     def testDefaultLanguage(self):\n         supportedLanguages = ["de", "no"]\n         self.settings.available_languages = supportedLanguages\n         self.ltool.setDefaultLanguage("no")\n-        self.assertEqual(\n-            self.ltool.getSupportedLanguages(), supportedLanguages\n-        )\n+        self.assertEqual(self.ltool.getSupportedLanguages(), supportedLanguages)\n         self.assertEqual(self.ltool.getDefaultLanguage(), "no")\n \n         # default not in supported languages, should set to first supported\n         self.ltool.setDefaultLanguage("nl")\n \n-        self.assertEqual(\n-            self.ltool.getSupportedLanguages(), supportedLanguages\n-        )\n+        self.assertEqual(self.ltool.getSupportedLanguages(), supportedLanguages)\n         self.assertEqual(self.ltool.getDefaultLanguage(), "de")\n \n     def testAvailableLanguage(self):\ndiff --git a/plone/i18n/tests/test_negotiation.py b/plone/i18n/tests/test_negotiation.py\nindex ce0670c..ca88212 100644\n--- a/plone/i18n/tests/test_negotiation.py\n+++ b/plone/i18n/tests/test_negotiation.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n@@ -13,7 +12,7 @@\n \n class LanguageNegotiationTestCase(base.FunctionalTestCase):\n     def afterSetUp(self):\n-        self.basic_auth = "%s:%s" % (TEST_USER_NAME, TEST_USER_PASSWORD)\n+        self.basic_auth = f"{TEST_USER_NAME}:{TEST_USER_PASSWORD}"\n         self.portal_path = self.portal.absolute_url(1)\n         self.tool = getToolByName(self.portal, "portal_languages")\n         self.settings = getUtility(IRegistry).forInterface(\n@@ -138,16 +137,14 @@ def testContentObject(self):\n         ILanguage(doc).set_language("nl")\n         self.assertEqual(doc.Language(), "nl")\n         docpath = "/".join(doc.getPhysicalPath())\n-        response = self.publish(\n-            docpath, self.basic_auth, env={"PATH_INFO": docpath}\n-        )\n+        response = self.publish(docpath, self.basic_auth, env={"PATH_INFO": docpath})\n         self.checkLanguage(response, "nl")\n \n     def testContentObjectVHMPortal(self):\n         adding = self.app.manage_addProduct["SiteAccess"]\n         adding.manage_addVirtualHostMonster("VHM")\n         vhmBasePath = (\n-            "/VirtualHostBase/http/example.org:80/{0}/"\n+            "/VirtualHostBase/http/example.org:80/{}/"\n             "VirtualHostRoot/".format(self.portal.getId())\n         )\n         self.layer["portal"].invokeFactory("Folder", "sub")\n@@ -165,7 +162,7 @@ def testContentObjectVHMPortalVHSubpath(self):\n         adding = self.app.manage_addProduct["SiteAccess"]\n         adding.manage_addVirtualHostMonster("VHM")\n         vhmBasePath = (\n-            "/VirtualHostBase/http/example.org:80/{0}/VirtualHostRoot/"\n+            "/VirtualHostBase/http/example.org:80/{}/VirtualHostRoot/"\n             "_vh_one/_vh_two/".format(self.portal.getId())\n         )\n \n@@ -185,7 +182,7 @@ def testContentObjectVHMFolder(self):\n         adding.manage_addVirtualHostMonster("VHM")\n \n         folder_path = "/".join(self.layer["portal"].getPhysicalPath())\n-        vhmBasePath = "/VirtualHostBase/http/example.org:80{0}/VirtualHostRoot/".format(\n+        vhmBasePath = "/VirtualHostBase/http/example.org:80{}/VirtualHostRoot/".format(\n             folder_path\n         )\n         self.layer["portal"].invokeFactory("Folder", "sub")\n@@ -196,7 +193,7 @@ def testContentObjectVHMFolder(self):\n         doc.setLanguage("nl")\n         self.assertEqual(doc.Language(), "nl")\n         docpath = "/".join(doc.getPhysicalPath())\n-        docpath = docpath[len(folder_path) + 1:]\n+        docpath = docpath[len(folder_path) + 1 :]\n \n         response = self.publish(\n             vhmBasePath + docpath, self.basic_auth, env={"diazo.off": "1"}\ndiff --git a/plone/i18n/utility.py b/plone/i18n/utility.py\nindex 2782311..d852041 100644\n--- a/plone/i18n/utility.py\n+++ b/plone/i18n/utility.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl import getSecurityManager\n from operator import itemgetter\n+from plone.i18n.interfaces import ILanguageSchema\n from plone.i18n.interfaces import ILanguageUtility\n from plone.i18n.interfaces import INegotiateLanguage\n-from plone.i18n.interfaces import ILanguageSchema\n from plone.i18n.locales.interfaces import ICcTLDInformation\n from plone.i18n.locales.interfaces import IContentLanguageAvailability\n from plone.i18n.locales.interfaces import ICountryAvailability\n@@ -21,7 +20,7 @@\n from zope.interface import implementer\n \n \n-class LanguageBinding(object):\n+class LanguageBinding:\n     """Helper which holding language infos in request."""\n \n     security = ClassSecurityInfo()\n@@ -65,24 +64,21 @@ def setLanguageBinding(request):\n \n \n def onRequest(object, event):\n-    """Set Language headers in the request.\n-    """\n+    """Set Language headers in the request."""\n     request = event.request\n \n     return setLanguageBinding(request)\n \n \n @implementer(ILanguageUtility)\n-class LanguageUtility(object):\n+class LanguageUtility:\n \n     # resources that must not use language specific URLs\n     exclude_paths = frozenset(\n         ("portal_css", "portal_javascripts", "portal_kss", "portal_factory")\n     )\n \n-    exclude_exts = frozenset(\n-        ("css", "js", "kss", "xml", "gif", "jpg", "png", "jpeg")\n-    )\n+    exclude_exts = frozenset(("css", "js", "kss", "xml", "gif", "jpg", "png", "jpeg"))\n \n     @property\n     def settings(self):\n@@ -112,12 +108,11 @@ def listSupportedLanguages(self):\n         available = self.getAvailableLanguages()\n         for i in self.supported_langs:\n             if available.get(i):\n-                r.append((i, available[i][u"name"]))\n+                r.append((i, available[i]["name"]))\n         return r\n \n     def getAvailableLanguages(self):\n-        """Returns the dictionary of available languages.\n-        """\n+        """Returns the dictionary of available languages."""\n         util = queryUtility(IContentLanguageAvailability)\n         if self.settings.use_combined_language_codes:\n             languages = util.getLanguages(combined=True)\n@@ -144,13 +139,13 @@ def listAvailableLanguageInformation(self):\n         new_langs = []\n         for lang in langs:\n             # add language-code to dict\n-            langs[lang][u"code"] = lang\n+            langs[lang]["code"] = lang\n             # flatten outer dict to list to make it sortable\n             new_langs.append(langs[lang])\n         new_langs.sort(\n             lambda x, y: cmp(\n-                x.get(u"native", x.get(u"name")),\n-                y.get(u"native", y.get(u"name")),\n+                x.get("native", x.get("name")),\n+                y.get("native", y.get("name")),\n             )\n         )\n         return new_langs\n@@ -190,14 +185,14 @@ def getNameForLanguageCode(self, langCode):\n         """Returns the name for a language code."""\n         info = self.getAvailableLanguageInformation().get(langCode, None)\n         if info is not None:\n-            return info.get(u"name", None)\n+            return info.get("name", None)\n         return None\n \n     def getFlagForLanguageCode(self, langCode):\n         """Returns the name of the flag for a language code."""\n         info = self.getAvailableLanguageInformation().get(langCode, None)\n         if info is not None:\n-            return info.get(u"flag", None)\n+            return info.get("flag", None)\n         return None\n \n     def addSupportedLanguage(self, langCode):\n@@ -276,9 +271,7 @@ def getContentLanguage(self, request):\n \n             # Now check if we need to exclude from using language specific path\n             # See https://dev.plone.org/ticket/11263\n-            if bool(\n-                [1 for p in self.exclude_paths if p in contentpath]\n-            ) or bool(\n+            if bool([1 for p in self.exclude_paths if p in contentpath]) or bool(\n                 [1 for p in self.exclude_exts if contentpath[0].endswith(p)]\n             ):\n                 return None\n@@ -436,14 +429,11 @@ def showSelector(self):\n         """Returns True if the selector viewlet should be shown."""\n         return self.settings.always_show_selector or (\n             self.settings.use_cookie_negotiation\n-            and not (\n-                self.settings.authenticated_users_only\n-                and self.isAnonymousUser()\n-            )\n+            and not (self.settings.authenticated_users_only and self.isAnonymousUser())\n         )\n \n \n-class PrefsForPTS(object):\n+class PrefsForPTS:\n     """A preference to hook into PTS."""\n \n     def __init__(self, context):\ndiff --git a/pyproject.toml b/pyproject.toml\nindex cb1bf7a..05b615d 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,7 +1,3 @@\n-[tool.black]\n-line-length = 79\n-skip-string-normalization = true\n-\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\ndiff --git a/setup.cfg b/setup.cfg\nindex 52002d1..203ab46 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -6,16 +6,11 @@ ignore =\n     .gitattributes\n \n [isort]\n-# for details see\n-# http://docs.plone.org/develop/styleguide/python.html#grouping-and-sorting\n+# black compatible Plone isort rules:\n+profile = black\n force_alphabetical_sort = True\n force_single_line = True\n lines_after_imports = 2\n-line_length = 79\n-not_skip = __init__.py\n-use_parentheses = True\n-multi_line_output = 3\n-include_trailing_comma = True\n \n [zest.releaser]\n create-wheel = yes\ndiff --git a/setup.py b/setup.py\nindex 6446c93..8f5c026 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,64 +1,62 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n-version = \'4.0.7.dev0\'\n+\n+version = "5.0.0.dev0"\n \n setup(\n-    name=\'plone.i18n\',\n+    name="plone.i18n",\n     version=version,\n     description="Advanced i18n/l10n features",\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope2",\n         "Framework :: Zope :: 4",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n     ],\n-    keywords=\'i18n l10n Plone\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.i18n\',\n-    license=\'GPL version 2\',\n+    keywords="i18n l10n Plone",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.i18n",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'AccessControl\',\n-        \'Products.CMFCore\',\n-        \'plone.supermodel\',\n-        \'setuptools\',\n-        \'six\',\n-        \'Unidecode\',\n-        \'ZODB\',\n-        \'zope.component\',\n-        \'zope.i18n\',\n-        \'zope.i18nmessageid\',\n-        \'zope.interface\',\n-        \'zope.publisher\',\n-        \'zope.schema\',\n-        \'zope.globalrequest\',\n-        \'Zope\',\n+        "AccessControl",\n+        "Products.CMFCore",\n+        "plone.supermodel",\n+        "setuptools",\n+        "Unidecode>=1.0.22",\n+        "ZODB",\n+        "zope.component",\n+        "zope.i18n",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "zope.publisher",\n+        "zope.schema",\n+        "zope.globalrequest",\n+        "Zope",\n     ],\n     extras_require=dict(\n         test=[\n-            \'plone.app.contenttypes\',\n-            \'plone.app.testing\',\n-            \'plone.registry\',\n-            \'zope.browserresource\',\n-            \'zope.component [zcml]\',\n-            \'zope.configuration\',\n-            \'zope.testing\',\n+            "plone.app.contenttypes",\n+            "plone.app.testing",\n+            "plone.registry",\n+            "zope.browserresource",\n+            "zope.component [zcml]",\n+            "zope.configuration",\n+            "zope.testing",\n         ],\n     ),\n )\n'

