Repository: plone.app.layout


Branch: refs/heads/master
Date: 2021-12-05T15:08:17+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/23671661cc27c81a0a31741160729dea7e8a51eb

Global section viewlet: Catalog based navigation.

Show the global sections also if navigation contains items but tabs are empty.
This allows for disabling portal tabs rendering and constructing the navigation only from the catalog query.

Files changed:
A news/273-1.feature
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/sections.pt
M plone/app/layout/viewlets/tests/test_common.py

b'diff --git a/news/273-1.feature b/news/273-1.feature\nnew file mode 100644\nindex 00000000..8439c2aa\n--- /dev/null\n+++ b/news/273-1.feature\n@@ -0,0 +1,4 @@\n+Global section viewlet: Catalog based navigation.\n+Show the global sections also if navigation contains items but tabs are empty.\n+This allows for disabling portal tabs rendering and constructing the navigation only from the catalog query.\n+[thet]\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex a17cff4c..aa0152ee 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -275,7 +275,8 @@ def current_language(self):\n     def navtree(self):\n         ret = defaultdict(list)\n         navtree_path = self.navtree_path\n-        for tab in self.portal_tabs:\n+        portal_tabs = self.portal_tabs\n+        for tab in portal_tabs:\n             entry = tab.copy()\n             entry.update(\n                 {\n@@ -333,7 +334,7 @@ def navtree(self):\n         for brain in brains:\n             brain_path = brain.getPath()\n             brain_parent_path = brain_path.rpartition("/")[0]\n-            if brain_parent_path == navtree_path:\n+            if portal_tabs and brain_parent_path == navtree_path:\n                 # This should be already provided by the portal_tabs_view\n                 continue\n             if brain.exclude_from_nav and not context_path.startswith(brain_path):\ndiff --git a/plone/app/layout/viewlets/sections.pt b/plone/app/layout/viewlets/sections.pt\nindex 33beae4f..7c402ac8 100644\n--- a/plone/app/layout/viewlets/sections.pt\n+++ b/plone/app/layout/viewlets/sections.pt\n@@ -2,8 +2,7 @@\n      xmlns:tal="http://xml.zope.org/namespaces/tal"\n      xmlns:metal="http://xml.zope.org/namespaces/metal"\n      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-     tal:define="portal_tabs python:view.portal_tabs"\n-     tal:condition="portal_tabs"\n+     tal:condition="python:view.navtree"\n      i18n:domain="plone">\n \n   <nav class="navbar navbar-expand-md navbar-dark bg-primary pat-navigationmarker" id="portal-globalnav-wrapper">\ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex 477f45b7..51fd17e8 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -524,6 +524,21 @@ def test_generate_tabs_exclude_from_nav(self):\n             ["/plone/excluded-folder/sub-folder"],\n         )\n \n+    def test_generate_tabs__no_portal_tabs(self):\n+        """Test for constructing the navigation purely out of a catalog query\n+        and not using portal tabs at all."""\n+\n+        class CustomGlobalSectionsViewlet(GlobalSectionsViewlet):\n+            portal_tabs = []\n+\n+        self.portal.invokeFactory("Folder", id="folder1", title="Folder 1")\n+\n+        nav = CustomGlobalSectionsViewlet(self.portal, self.request.clone(), None)\n+        navtree = nav.navtree\n+\n+        self.assertEqual(navtree["/plone"][0]["id"], "Members")\n+        self.assertEqual(navtree["/plone"][1]["id"], "folder1")\n+\n \n class TestTitleEscape(ViewletsFunctionalTestCase):\n     """Test that the title in the global sections viewlet is escaped.\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2021-12-05T15:08:17+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/4c0c7ebcb0ec50691c8940b97caea225e66935c9

Global sections viewlet: Customize entries and query

Also allow customizing the tabs entries and the navigation query along with the other navigation entries.

Files changed:
A news/273-2.feature
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/tests/test_common.py

b'diff --git a/news/273-2.feature b/news/273-2.feature\nnew file mode 100644\nindex 00000000..0453b4f0\n--- /dev/null\n+++ b/news/273-2.feature\n@@ -0,0 +1,3 @@\n+Global sections viewlet: Customize entries and query.\n+Also allow customizing the tabs entries and the navigation query along with the other navigation entries.\n+[thet]\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex aa0152ee..323f80cf 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -296,6 +296,7 @@ def navtree(self):\n                 )\n \n             entry["title"] = safe_unicode(entry["title"])\n+            self.customize_tab(entry, tab)\n             ret[navtree_path].append(entry)\n \n         if not self.settings.generate_tabs:\n@@ -325,6 +326,7 @@ def navtree(self):\n             query["exclude_from_nav"] = False\n \n         context_path = "/".join(self.context.getPhysicalPath())\n+        self.customize_query(query)\n         portal_catalog = getToolByName(self.context, "portal_catalog")\n         brains = portal_catalog.searchResults(**query)\n \n@@ -353,10 +355,19 @@ def navtree(self):\n             }\n             self.customize_entry(entry, brain)\n             ret[brain_parent_path].append(entry)\n+\n         return ret\n \n+    def customize_query(self, query):\n+        """Helper to customize the catalog query."""\n+        pass\n+\n+    def customize_tab(self, entry, tab):\n+        """Helper to add custom entry keys/values."""\n+        pass\n+\n     def customize_entry(self, entry, brain):\n-        """a little helper to add custom entry keys/values."""\n+        """Helper to add custom entry keys/values."""\n         pass\n \n     def render_item(self, item, path):\ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex 51fd17e8..f4dfda53 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -539,6 +539,62 @@ class CustomGlobalSectionsViewlet(GlobalSectionsViewlet):\n         self.assertEqual(navtree["/plone"][0]["id"], "Members")\n         self.assertEqual(navtree["/plone"][1]["id"], "folder1")\n \n+    def test_customize_tabs(self):\n+        """Test for constructing the navigation purely out of a catalog query\n+        and not using portal tabs at all."""\n+        self.registry["plone.generate_tabs"] = False\n+\n+        class CustomGlobalSectionsViewlet(GlobalSectionsViewlet):\n+            def customize_tab(self, entry, tab):\n+                entry["title"] = "Homepage"\n+                return entry\n+\n+        nav = CustomGlobalSectionsViewlet(self.portal, self.request.clone(), None)\n+        navtree = nav.navtree\n+\n+        self.assertEqual(navtree["/plone"][0]["title"], "Homepage")\n+\n+    def test_customize_entry(self):\n+        """Test for constructing the navigation purely out of a catalog query\n+        and not using portal tabs at all."""\n+\n+        class CustomGlobalSectionsViewlet(GlobalSectionsViewlet):\n+            portal_tabs = []\n+\n+            def customize_entry(self, entry, brain):\n+                entry["title"] = "OKAY"\n+                return entry\n+\n+        self.portal.invokeFactory("Folder", id="folder1", title="Folder 1")\n+\n+        nav = CustomGlobalSectionsViewlet(self.portal, self.request.clone(), None)\n+        navtree = nav.navtree\n+\n+        self.assertEqual(navtree["/plone"][0]["title"], "OKAY")\n+        self.assertEqual(navtree["/plone"][1]["title"], "OKAY")\n+\n+    def test_customize_query(self):\n+        """Test for constructing the navigation purely out of a catalog query\n+        and not using portal tabs at all."""\n+\n+        class CustomGlobalSectionsViewlet(GlobalSectionsViewlet):\n+            portal_tabs = []\n+\n+            def customize_query(self, query):\n+                query["id"] = "folder1"\n+                return query\n+\n+        self.portal.invokeFactory(\n+            "Folder", id="folder1", title="Folder 1", language="sl"\n+        )\n+        self.portal.invokeFactory("Folder", id="folder2", title="Folder 2")\n+\n+        nav = CustomGlobalSectionsViewlet(self.portal, self.request.clone(), None)\n+        navtree = nav.navtree\n+\n+        self.assertEqual(len(navtree["/plone"]), 1)\n+        self.assertEqual(navtree["/plone"][0]["title"], "Folder 1")\n+\n \n class TestTitleEscape(ViewletsFunctionalTestCase):\n     """Test that the title in the global sections viewlet is escaped.\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2021-12-05T15:08:17+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/bfc6952a8108a89afe6c4abfd8eebb993f726ef9

Global sections viewlet: Factor out types_using_view

Factor out types_using_view so that this method can be re-used, e.g. in a subclass with a customize_entry method.

Files changed:
A news/273-3.feature
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/tests/test_common.py

b'diff --git a/news/273-3.feature b/news/273-3.feature\nnew file mode 100644\nindex 00000000..ce4b019f\n--- /dev/null\n+++ b/news/273-3.feature\n@@ -0,0 +1,3 @@\n+Global sections viewlet: Factor out types_using_view.\n+Factor out types_using_view so that this method can be re-used, e.g. in a subclass with a customize_entry method.\n+[thet]\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex 323f80cf..9b91fab4 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -270,6 +270,13 @@ def current_language(self):\n             or self.language_settings.default_language\n         )\n \n+    @property\n+    @memoize_contextless\n+    def types_using_view(self):\n+        registry = getUtility(IRegistry)\n+        types_using_view = registry.get("plone.types_use_view_action_in_listings", [])\n+        return types_using_view\n+\n     @property\n     @memoize\n     def navtree(self):\n@@ -330,9 +337,7 @@ def navtree(self):\n         portal_catalog = getToolByName(self.context, "portal_catalog")\n         brains = portal_catalog.searchResults(**query)\n \n-        registry = getUtility(IRegistry)\n-        types_using_view = registry.get("plone.types_use_view_action_in_listings", [])\n-\n+        types_using_view = self.types_using_view\n         for brain in brains:\n             brain_path = brain.getPath()\n             brain_parent_path = brain_path.rpartition("/")[0]\ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex f4dfda53..3915e73a 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -595,6 +595,27 @@ def customize_query(self, query):\n         self.assertEqual(len(navtree["/plone"]), 1)\n         self.assertEqual(navtree["/plone"][0]["title"], "Folder 1")\n \n+    def test_types_using_view(self):\n+        """Test for constructing the navigation purely out of a catalog query\n+        and not using portal tabs at all."""\n+\n+        class CustomGlobalSectionsViewlet(GlobalSectionsViewlet):\n+            portal_tabs = []\n+            types_using_view = ["Folder"]\n+\n+        self.portal.invokeFactory("Folder", id="folder1", title="Folder 1")\n+\n+        nav = CustomGlobalSectionsViewlet(self.portal, self.request.clone(), None)\n+        navtree = nav.navtree\n+\n+        self.assertListEqual(nav.types_using_view, ["Folder"])\n+        self.assertEqual(\n+            navtree["/plone"][0]["url"], "http://nohost/plone/Members/view"\n+        )\n+        self.assertEqual(\n+            navtree["/plone"][1]["url"], "http://nohost/plone/folder1/view"\n+        )\n+\n \n class TestTitleEscape(ViewletsFunctionalTestCase):\n     """Test that the title in the global sections viewlet is escaped.\n'

