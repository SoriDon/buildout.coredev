Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-11-06T11:59:24+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/db3d449b0d6be6d1a925ad87d752310b3cedca0f

The class TestBaseNavTree is not used anymore

The class TestBaseNavTree is not used anymore and its tests are not run.
It is still assuming that the configuration is stored in the
portal_properties tool, while it is in the registry since quite some
time.

Another step towards #125

Files changed:
M CHANGES.rst
M Products/CMFPlone/tests/testNavigationView.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 0aeee92a23..c3b5a8a6bc 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -18,7 +18,7 @@ Changelog\n Bug fixes:\n \n \n-- Deprecate the portal_properties tool (#125)\n+- Deprecate the portal_properties tool, remove obsolete code (#125)\n - Require Python 3.8 or higher.  [maurits] (#3635)\n - Actually load theme-specified styles CSS in TinyMCE. [Rudd-O] (#3638)\n - Minor visual fixes in admin UI [jensens] (#3640)\ndiff --git a/Products/CMFPlone/tests/testNavigationView.py b/Products/CMFPlone/tests/testNavigationView.py\nindex d7db6964c9..77500d052a 100644\n--- a/Products/CMFPlone/tests/testNavigationView.py\n+++ b/Products/CMFPlone/tests/testNavigationView.py\n@@ -6,333 +6,16 @@\n from Products.CMFPlone.browser.navigation import CatalogNavigationTabs\n from Products.CMFPlone.browser.navigation import CatalogSiteMap\n from Products.CMFPlone.browser.navigation import PhysicalNavigationBreadcrumbs\n-from Products.CMFPlone.tests import dummy\n from Products.CMFPlone.tests import PloneTestCase\n from Products.CMFPlone.tests.utils import folder_position\n from Products.CMFPlone.tests.utils import validateCSSIdentifier\n from zope.component import getUtility\n from zope.interface import directlyProvides\n \n-import random\n-import string\n-\n \n portal_name = PloneTestCase.portal_name\n \n \n-class TestBaseNavTree(PloneTestCase.PloneTestCase):\n-    """Tests for the navigation tree . This base test is a little geared toward\n-       a catalog based implementation for now.\n-    """\n-\n-    view_class = None\n-\n-    def afterSetUp(self):\n-        self.request = self.app.REQUEST\n-        self.populateSite()\n-        self.setupAuthenticator()\n-        registry = getUtility(IRegistry)\n-        self.navigation_settings = registry.forInterface(\n-            INavigationSchema,\n-            prefix=\'plone\'\n-        )\n-\n-    def populateSite(self):\n-        self.setRoles([\'Manager\'])\n-        self.portal.invokeFactory(\'Document\', \'doc1\')\n-        self.portal.invokeFactory(\'Document\', \'doc2\')\n-        self.portal.invokeFactory(\'Document\', \'doc3\')\n-        self.portal.invokeFactory(\'Folder\', \'folder1\')\n-        self.portal.invokeFactory(\'Link\', \'link1\')\n-        self.portal.link1.remoteUrl = \'http://plone.org\'\n-        self.portal.link1.reindexObject()\n-        folder1 = getattr(self.portal, \'folder1\')\n-        folder1.invokeFactory(\'Document\', \'doc11\')\n-        folder1.invokeFactory(\'Document\', \'doc12\')\n-        folder1.invokeFactory(\'Document\', \'doc13\')\n-        self.portal.invokeFactory(\'Folder\', \'folder2\')\n-        folder2 = getattr(self.portal, \'folder2\')\n-        folder2.invokeFactory(\'Document\', \'doc21\')\n-        folder2.invokeFactory(\'Document\', \'doc22\')\n-        folder2.invokeFactory(\'Document\', \'doc23\')\n-        folder2.invokeFactory(\'File\', \'file21\')\n-        self.setRoles([\'Member\'])\n-\n-    def testCreateNavTree(self):\n-        # See if we can create one at all\n-        view = self.view_class(self.portal, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertTrue(\'children\' in tree)\n-\n-    def testCreateNavTreeCurrentItem(self):\n-        # With the context set to folder2 it should return a dict with\n-        # currentItem set to True\n-        view = self.view_class(self.portal.folder2, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'currentItem\'], True)\n-\n-    def testNavTreeExcludesItemsWithExcludeProperty(self):\n-        # Make sure that items witht he exclude_from_nav property set get\n-        # no_display set to True\n-        self.portal.folder2.exclude_from_nav = True\n-        self.portal.folder2.reindexObject()\n-        view = self.view_class(self.portal.folder1.doc11, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        for c in tree[\'children\']:\n-            if c[\'item\'].getPath() == \'/plone/folder2\':\n-                self.fail()\n-\n-    def testShowAllParentsOverridesNavTreeExcludesItemsWithExcludeProp(self):\n-        # Make sure excluded items are not included in the navtree\n-        self.portal.folder2.exclude_from_nav = True\n-        self.portal.folder2.reindexObject()\n-        self.navigation_settings.show_excluded_items = True\n-\n-        view = self.view_class(self.portal.folder2.doc21, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        found = False\n-        for c in tree[\'children\']:\n-            if c[\'item\'].getPath() == \'/plone/folder2\':\n-                found = True\n-                break\n-        self.assertTrue(found)\n-\n-    def testNavTreeExcludesDefaultPage(self):\n-        # Make sure that items which are the default page are excluded\n-        self.portal.folder2.setDefaultPage(\'doc21\')\n-        view = self.view_class(self.portal.folder1.doc11, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        # Ensure that our \'doc21\' default page is not in the tree.\n-        self.assertEqual(\n-            [c for c in tree[\'children\'][-1][\'children\']\n-             if c[\'item\'].getPath()[-5:] == \'doc21\'],\n-            []\n-        )\n-\n-    def testCreateNavTreeWithLink(self):\n-        # BBB getRemoteURL deprecated, remove in Plone 4\n-        view = self.view_class(self.portal, self.request)\n-        tree = view.navigationTree()\n-        for child in tree[\'children\']:\n-            if child[\'portal_type\'] != \'Link\':\n-                self.assertFalse(child[\'item\'].getRemoteUrl)\n-            if child[\'Title\'] == \'link1\':\n-                self.assertEqual(\n-                    child[\'item\'].getRemoteUrl,\n-                    \'http://plone.org\'\n-                )\n-\n-    def testNonStructuralFolderHidesChildren(self):\n-        # Make sure NonStructuralFolders act as if parent_types_not_to_query\n-        # is set.\n-        f = dummy.NonStructuralFolder(\'ns_folder\')\n-        self.folder._setObject(\'ns_folder\', f)\n-        self.portal.portal_catalog.reindexObject(self.folder.ns_folder)\n-        self.portal.portal_catalog.reindexObject(self.folder)\n-        self.navigation_settings.root = \'/Members/test_user_1_\'\n-        view = self.view_class(self.folder.ns_folder, self.request)\n-        tree = view.navigationTree()\n-        self.assertEqual(\n-            tree[\'children\'][0][\'item\'].getPath(),\n-            \'/plone/Members/test_user_1_/ns_folder\'\n-        )\n-        self.assertEqual(len(tree[\'children\'][0][\'children\']), 0)\n-\n-    def testTopLevel(self):\n-        ntp = self.portal.portal_properties.navtree_properties\n-        ntp.manage_changeProperties(topLevel=1)\n-        view = self.view_class(self.portal.folder2.file21, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(\n-            tree[\'children\'][-1][\'item\'].getPath(),\n-            \'/plone/folder2/file21\'\n-        )\n-\n-    def testTopLevelWithContextAboveLevel(self):\n-        ntp = self.portal.portal_properties.navtree_properties\n-        ntp.manage_changeProperties(topLevel=1)\n-        view = self.view_class(self.portal, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 0)\n-\n-    def testTopLevelTooDeep(self):\n-        ntp = self.portal.portal_properties.navtree_properties\n-        ntp.manage_changeProperties(topLevel=5)\n-        view = self.view_class(self.portal, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 0)\n-\n-    def testTopLevelWithNavigationRoot(self):\n-        self.portal.folder2.invokeFactory(\'Folder\', \'folder21\')\n-        self.portal.folder2.folder21.invokeFactory(\'Document\', \'doc211\')\n-        self.navigation_settings.root = \'/folder2\'\n-        ntp = self.portal.portal_properties.navtree_properties\n-        ntp.manage_changeProperties(topLevel=1)\n-        view = self.view_class(self.portal.folder2.folder21, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 1)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(),\n-                         \'/plone/folder2/folder21/doc211\')\n-\n-    def testTopLevelWithPortalFactory(self):\n-        cid = \'\'.join(\n-            [random.choice(string.ascii_lowercase) for x in range(10)]\n-        )\n-        typeName = \'Document\'\n-        newObject = self.portal.folder1.restrictedTraverse(\n-            \'portal_factory/\' + typeName + \'/\' + cid)\n-        # Will raise a KeyError unless bug is fixed\n-        view = self.view_class(newObject, self.request)\n-        view.navigationTree()\n-\n-    def testShowAllParentsOverridesBottomLevel(self):\n-        ntp = self.portal.portal_properties.navtree_properties\n-        ntp.manage_changeProperties(bottomLevel=1)\n-        view = self.view_class(self.portal.folder2.file21, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        # Note: showAllParents makes sure we actually return items on the,\n-        # path to the context, but the portlet will not display anything\n-        # below bottomLevel.\n-        self.assertEqual(tree[\'children\'][-1][\'item\'].getPath(),\n-                         \'/plone/folder2\')\n-        self.assertEqual(len(tree[\'children\'][-1][\'children\']), 1)\n-        self.assertEqual(tree[\'children\'][-1][\'children\'][0][\'item\'].getPath(),\n-                         \'/plone/folder2/file21\')\n-\n-    def testBottomLevelStopsAtFolder(self):\n-        ntp = self.portal.portal_properties.navtree_properties\n-        ntp.manage_changeProperties(bottomLevel=1)\n-        view = self.view_class(self.portal.folder2, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'item\'].getPath(),\n-                         \'/plone/folder2\')\n-        self.assertEqual(len(tree[\'children\'][-1][\'children\']), 0)\n-\n-    def testNoRootSet(self):\n-        self.navigation_settings.root = \'\'\n-        view = self.view_class(self.portal.folder2.file21, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'item\'].getPath(),\n-                         \'/plone/folder2\')\n-\n-    def testRootIsPortal(self):\n-        self.navigation_settings.root = \'/\'\n-        view = self.view_class(self.portal.folder2.file21, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'item\'].getPath(),\n-                         \'/plone/folder2\')\n-\n-    def testRootIsNotPortal(self):\n-        self.navigation_settings.root = \'/folder2\'\n-        view = self.view_class(self.portal.folder2.file21, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(),\n-                         \'/plone/folder2/doc21\')\n-\n-    def testRootDoesNotExist(self):\n-        self.navigation_settings.root = \'/dodo\'\n-        view = self.view_class(self.portal.folder2.file21, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(tree.get(\'item\', None), None)\n-        self.assertEqual(len(tree[\'children\']), 0)\n-\n-    def testAboveRoot(self):\n-        self.navigation_settings.root = \'/folder2\'\n-        view = self.view_class(self.portal, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(\n-            tree[\'children\'][0][\'item\'].getPath(),\n-            \'/plone/folder2/doc21\'\n-        )\n-\n-    def testOutsideRoot(self):\n-        self.navigation_settings.root = \'/folder2\'\n-        view = self.view_class(self.portal.folder1, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(\n-            tree[\'children\'][0][\'item\'].getPath(),\n-            \'/plone/folder2/doc21\'\n-        )\n-\n-    def testRootIsCurrent(self):\n-        view = self.view_class(self.portal.folder2,\n-                               self.request,\n-                               currentFolderOnly=True)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(\n-            tree[\'children\'][0][\'item\'].getPath(),\n-            \'/plone/folder2/doc21\'\n-        )\n-\n-    def testCustomQuery(self):\n-        # Try a custom query script for the navtree that returns only published\n-        # objects\n-        self.portal._delObject(\'Members\')\n-        self.portal._delObject(\'news\')\n-        self.portal._delObject(\'events\')\n-        workflow = self.portal.portal_workflow\n-        factory = self.portal.manage_addProduct[\'PythonScripts\']\n-        factory.manage_addPythonScript(\'getCustomNavQuery\')\n-        script = self.portal.getCustomNavQuery\n-        script.ZPythonScript_edit(\'\', \'return {"review_state":"published"}\')\n-        self.assertEqual(self.portal.getCustomNavQuery(),\n-                         {"review_state": "published"})\n-        view = self.view_class(self.portal.folder2, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertTrue(\'children\' in tree)\n-        # Should only contain current object\n-        self.assertEqual(len(tree[\'children\']), 1)\n-        # change workflow for folder1\n-        workflow.doActionFor(self.portal.folder1, \'publish\')\n-        self.portal.folder1.reindexObject()\n-        view = self.view_class(self.portal.folder2, self.request)\n-        tree = view.navigationTree()\n-        # Should only contain current object and published folder\n-        self.assertEqual(len(tree[\'children\']), 2)\n-\n-    def testStateFiltering(self):\n-        # Test Navtree workflow state filtering\n-        self.portal._delObject(\'Members\')\n-        self.portal._delObject(\'news\')\n-        self.portal._delObject(\'events\')\n-        workflow = self.portal.portal_workflow\n-\n-        self.navigation_settings.workflow_states_to_show = (\'published\',)\n-        self.navigation_settings.filter_on_workflow = True\n-        view = self.view_class(self.portal.folder2, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertTrue(\'children\' in tree)\n-        # Should only contain current object\n-        self.assertEqual(len(tree[\'children\']), 1)\n-        # change workflow for folder1\n-        workflow.doActionFor(self.portal.folder1, \'publish\')\n-        self.portal.folder1.reindexObject()\n-        view = self.view_class(self.portal.folder2, self.request)\n-        tree = view.navigationTree()\n-        # Should only contain current object and published folder\n-        self.assertEqual(len(tree[\'children\']), 2)\n-\n-\n class TestSiteMap(PloneTestCase.PloneTestCase):\n     """Tests for the sitemap view implementations. This base test is a little\n         geared toward a catalog based implementation for now.\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-11-07T09:31:44+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/d5142944f9c47ddeecd37c2248aba10fced4090d

Merge pull request #3671 from plone/remove-unused-code

The class TestBaseNavTree is not used anymore

Files changed:
M CHANGES.rst
M Products/CMFPlone/tests/testNavigationView.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 0aeee92a23..c3b5a8a6bc 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -18,7 +18,7 @@ Changelog\n Bug fixes:\n \n \n-- Deprecate the portal_properties tool (#125)\n+- Deprecate the portal_properties tool, remove obsolete code (#125)\n - Require Python 3.8 or higher.  [maurits] (#3635)\n - Actually load theme-specified styles CSS in TinyMCE. [Rudd-O] (#3638)\n - Minor visual fixes in admin UI [jensens] (#3640)\ndiff --git a/Products/CMFPlone/tests/testNavigationView.py b/Products/CMFPlone/tests/testNavigationView.py\nindex d7db6964c9..77500d052a 100644\n--- a/Products/CMFPlone/tests/testNavigationView.py\n+++ b/Products/CMFPlone/tests/testNavigationView.py\n@@ -6,333 +6,16 @@\n from Products.CMFPlone.browser.navigation import CatalogNavigationTabs\n from Products.CMFPlone.browser.navigation import CatalogSiteMap\n from Products.CMFPlone.browser.navigation import PhysicalNavigationBreadcrumbs\n-from Products.CMFPlone.tests import dummy\n from Products.CMFPlone.tests import PloneTestCase\n from Products.CMFPlone.tests.utils import folder_position\n from Products.CMFPlone.tests.utils import validateCSSIdentifier\n from zope.component import getUtility\n from zope.interface import directlyProvides\n \n-import random\n-import string\n-\n \n portal_name = PloneTestCase.portal_name\n \n \n-class TestBaseNavTree(PloneTestCase.PloneTestCase):\n-    """Tests for the navigation tree . This base test is a little geared toward\n-       a catalog based implementation for now.\n-    """\n-\n-    view_class = None\n-\n-    def afterSetUp(self):\n-        self.request = self.app.REQUEST\n-        self.populateSite()\n-        self.setupAuthenticator()\n-        registry = getUtility(IRegistry)\n-        self.navigation_settings = registry.forInterface(\n-            INavigationSchema,\n-            prefix=\'plone\'\n-        )\n-\n-    def populateSite(self):\n-        self.setRoles([\'Manager\'])\n-        self.portal.invokeFactory(\'Document\', \'doc1\')\n-        self.portal.invokeFactory(\'Document\', \'doc2\')\n-        self.portal.invokeFactory(\'Document\', \'doc3\')\n-        self.portal.invokeFactory(\'Folder\', \'folder1\')\n-        self.portal.invokeFactory(\'Link\', \'link1\')\n-        self.portal.link1.remoteUrl = \'http://plone.org\'\n-        self.portal.link1.reindexObject()\n-        folder1 = getattr(self.portal, \'folder1\')\n-        folder1.invokeFactory(\'Document\', \'doc11\')\n-        folder1.invokeFactory(\'Document\', \'doc12\')\n-        folder1.invokeFactory(\'Document\', \'doc13\')\n-        self.portal.invokeFactory(\'Folder\', \'folder2\')\n-        folder2 = getattr(self.portal, \'folder2\')\n-        folder2.invokeFactory(\'Document\', \'doc21\')\n-        folder2.invokeFactory(\'Document\', \'doc22\')\n-        folder2.invokeFactory(\'Document\', \'doc23\')\n-        folder2.invokeFactory(\'File\', \'file21\')\n-        self.setRoles([\'Member\'])\n-\n-    def testCreateNavTree(self):\n-        # See if we can create one at all\n-        view = self.view_class(self.portal, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertTrue(\'children\' in tree)\n-\n-    def testCreateNavTreeCurrentItem(self):\n-        # With the context set to folder2 it should return a dict with\n-        # currentItem set to True\n-        view = self.view_class(self.portal.folder2, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'currentItem\'], True)\n-\n-    def testNavTreeExcludesItemsWithExcludeProperty(self):\n-        # Make sure that items witht he exclude_from_nav property set get\n-        # no_display set to True\n-        self.portal.folder2.exclude_from_nav = True\n-        self.portal.folder2.reindexObject()\n-        view = self.view_class(self.portal.folder1.doc11, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        for c in tree[\'children\']:\n-            if c[\'item\'].getPath() == \'/plone/folder2\':\n-                self.fail()\n-\n-    def testShowAllParentsOverridesNavTreeExcludesItemsWithExcludeProp(self):\n-        # Make sure excluded items are not included in the navtree\n-        self.portal.folder2.exclude_from_nav = True\n-        self.portal.folder2.reindexObject()\n-        self.navigation_settings.show_excluded_items = True\n-\n-        view = self.view_class(self.portal.folder2.doc21, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        found = False\n-        for c in tree[\'children\']:\n-            if c[\'item\'].getPath() == \'/plone/folder2\':\n-                found = True\n-                break\n-        self.assertTrue(found)\n-\n-    def testNavTreeExcludesDefaultPage(self):\n-        # Make sure that items which are the default page are excluded\n-        self.portal.folder2.setDefaultPage(\'doc21\')\n-        view = self.view_class(self.portal.folder1.doc11, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        # Ensure that our \'doc21\' default page is not in the tree.\n-        self.assertEqual(\n-            [c for c in tree[\'children\'][-1][\'children\']\n-             if c[\'item\'].getPath()[-5:] == \'doc21\'],\n-            []\n-        )\n-\n-    def testCreateNavTreeWithLink(self):\n-        # BBB getRemoteURL deprecated, remove in Plone 4\n-        view = self.view_class(self.portal, self.request)\n-        tree = view.navigationTree()\n-        for child in tree[\'children\']:\n-            if child[\'portal_type\'] != \'Link\':\n-                self.assertFalse(child[\'item\'].getRemoteUrl)\n-            if child[\'Title\'] == \'link1\':\n-                self.assertEqual(\n-                    child[\'item\'].getRemoteUrl,\n-                    \'http://plone.org\'\n-                )\n-\n-    def testNonStructuralFolderHidesChildren(self):\n-        # Make sure NonStructuralFolders act as if parent_types_not_to_query\n-        # is set.\n-        f = dummy.NonStructuralFolder(\'ns_folder\')\n-        self.folder._setObject(\'ns_folder\', f)\n-        self.portal.portal_catalog.reindexObject(self.folder.ns_folder)\n-        self.portal.portal_catalog.reindexObject(self.folder)\n-        self.navigation_settings.root = \'/Members/test_user_1_\'\n-        view = self.view_class(self.folder.ns_folder, self.request)\n-        tree = view.navigationTree()\n-        self.assertEqual(\n-            tree[\'children\'][0][\'item\'].getPath(),\n-            \'/plone/Members/test_user_1_/ns_folder\'\n-        )\n-        self.assertEqual(len(tree[\'children\'][0][\'children\']), 0)\n-\n-    def testTopLevel(self):\n-        ntp = self.portal.portal_properties.navtree_properties\n-        ntp.manage_changeProperties(topLevel=1)\n-        view = self.view_class(self.portal.folder2.file21, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(\n-            tree[\'children\'][-1][\'item\'].getPath(),\n-            \'/plone/folder2/file21\'\n-        )\n-\n-    def testTopLevelWithContextAboveLevel(self):\n-        ntp = self.portal.portal_properties.navtree_properties\n-        ntp.manage_changeProperties(topLevel=1)\n-        view = self.view_class(self.portal, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 0)\n-\n-    def testTopLevelTooDeep(self):\n-        ntp = self.portal.portal_properties.navtree_properties\n-        ntp.manage_changeProperties(topLevel=5)\n-        view = self.view_class(self.portal, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 0)\n-\n-    def testTopLevelWithNavigationRoot(self):\n-        self.portal.folder2.invokeFactory(\'Folder\', \'folder21\')\n-        self.portal.folder2.folder21.invokeFactory(\'Document\', \'doc211\')\n-        self.navigation_settings.root = \'/folder2\'\n-        ntp = self.portal.portal_properties.navtree_properties\n-        ntp.manage_changeProperties(topLevel=1)\n-        view = self.view_class(self.portal.folder2.folder21, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(len(tree[\'children\']), 1)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(),\n-                         \'/plone/folder2/folder21/doc211\')\n-\n-    def testTopLevelWithPortalFactory(self):\n-        cid = \'\'.join(\n-            [random.choice(string.ascii_lowercase) for x in range(10)]\n-        )\n-        typeName = \'Document\'\n-        newObject = self.portal.folder1.restrictedTraverse(\n-            \'portal_factory/\' + typeName + \'/\' + cid)\n-        # Will raise a KeyError unless bug is fixed\n-        view = self.view_class(newObject, self.request)\n-        view.navigationTree()\n-\n-    def testShowAllParentsOverridesBottomLevel(self):\n-        ntp = self.portal.portal_properties.navtree_properties\n-        ntp.manage_changeProperties(bottomLevel=1)\n-        view = self.view_class(self.portal.folder2.file21, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        # Note: showAllParents makes sure we actually return items on the,\n-        # path to the context, but the portlet will not display anything\n-        # below bottomLevel.\n-        self.assertEqual(tree[\'children\'][-1][\'item\'].getPath(),\n-                         \'/plone/folder2\')\n-        self.assertEqual(len(tree[\'children\'][-1][\'children\']), 1)\n-        self.assertEqual(tree[\'children\'][-1][\'children\'][0][\'item\'].getPath(),\n-                         \'/plone/folder2/file21\')\n-\n-    def testBottomLevelStopsAtFolder(self):\n-        ntp = self.portal.portal_properties.navtree_properties\n-        ntp.manage_changeProperties(bottomLevel=1)\n-        view = self.view_class(self.portal.folder2, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'item\'].getPath(),\n-                         \'/plone/folder2\')\n-        self.assertEqual(len(tree[\'children\'][-1][\'children\']), 0)\n-\n-    def testNoRootSet(self):\n-        self.navigation_settings.root = \'\'\n-        view = self.view_class(self.portal.folder2.file21, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'item\'].getPath(),\n-                         \'/plone/folder2\')\n-\n-    def testRootIsPortal(self):\n-        self.navigation_settings.root = \'/\'\n-        view = self.view_class(self.portal.folder2.file21, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][-1][\'item\'].getPath(),\n-                         \'/plone/folder2\')\n-\n-    def testRootIsNotPortal(self):\n-        self.navigation_settings.root = \'/folder2\'\n-        view = self.view_class(self.portal.folder2.file21, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(tree[\'children\'][0][\'item\'].getPath(),\n-                         \'/plone/folder2/doc21\')\n-\n-    def testRootDoesNotExist(self):\n-        self.navigation_settings.root = \'/dodo\'\n-        view = self.view_class(self.portal.folder2.file21, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(tree.get(\'item\', None), None)\n-        self.assertEqual(len(tree[\'children\']), 0)\n-\n-    def testAboveRoot(self):\n-        self.navigation_settings.root = \'/folder2\'\n-        view = self.view_class(self.portal, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(\n-            tree[\'children\'][0][\'item\'].getPath(),\n-            \'/plone/folder2/doc21\'\n-        )\n-\n-    def testOutsideRoot(self):\n-        self.navigation_settings.root = \'/folder2\'\n-        view = self.view_class(self.portal.folder1, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(\n-            tree[\'children\'][0][\'item\'].getPath(),\n-            \'/plone/folder2/doc21\'\n-        )\n-\n-    def testRootIsCurrent(self):\n-        view = self.view_class(self.portal.folder2,\n-                               self.request,\n-                               currentFolderOnly=True)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertEqual(\n-            tree[\'children\'][0][\'item\'].getPath(),\n-            \'/plone/folder2/doc21\'\n-        )\n-\n-    def testCustomQuery(self):\n-        # Try a custom query script for the navtree that returns only published\n-        # objects\n-        self.portal._delObject(\'Members\')\n-        self.portal._delObject(\'news\')\n-        self.portal._delObject(\'events\')\n-        workflow = self.portal.portal_workflow\n-        factory = self.portal.manage_addProduct[\'PythonScripts\']\n-        factory.manage_addPythonScript(\'getCustomNavQuery\')\n-        script = self.portal.getCustomNavQuery\n-        script.ZPythonScript_edit(\'\', \'return {"review_state":"published"}\')\n-        self.assertEqual(self.portal.getCustomNavQuery(),\n-                         {"review_state": "published"})\n-        view = self.view_class(self.portal.folder2, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertTrue(\'children\' in tree)\n-        # Should only contain current object\n-        self.assertEqual(len(tree[\'children\']), 1)\n-        # change workflow for folder1\n-        workflow.doActionFor(self.portal.folder1, \'publish\')\n-        self.portal.folder1.reindexObject()\n-        view = self.view_class(self.portal.folder2, self.request)\n-        tree = view.navigationTree()\n-        # Should only contain current object and published folder\n-        self.assertEqual(len(tree[\'children\']), 2)\n-\n-    def testStateFiltering(self):\n-        # Test Navtree workflow state filtering\n-        self.portal._delObject(\'Members\')\n-        self.portal._delObject(\'news\')\n-        self.portal._delObject(\'events\')\n-        workflow = self.portal.portal_workflow\n-\n-        self.navigation_settings.workflow_states_to_show = (\'published\',)\n-        self.navigation_settings.filter_on_workflow = True\n-        view = self.view_class(self.portal.folder2, self.request)\n-        tree = view.navigationTree()\n-        self.assertTrue(tree)\n-        self.assertTrue(\'children\' in tree)\n-        # Should only contain current object\n-        self.assertEqual(len(tree[\'children\']), 1)\n-        # change workflow for folder1\n-        workflow.doActionFor(self.portal.folder1, \'publish\')\n-        self.portal.folder1.reindexObject()\n-        view = self.view_class(self.portal.folder2, self.request)\n-        tree = view.navigationTree()\n-        # Should only contain current object and published folder\n-        self.assertEqual(len(tree[\'children\']), 2)\n-\n-\n class TestSiteMap(PloneTestCase.PloneTestCase):\n     """Tests for the sitemap view implementations. This base test is a little\n         geared toward a catalog based implementation for now.\n'

