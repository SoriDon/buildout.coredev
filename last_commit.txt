Repository: plone.scale


Branch: refs/heads/master
Date: 2022-07-09T20:55:33-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.scale/commit/b78c35cc2b1ffddcb610f26ed774a5176d467a62

Make sure get_or_generate stores scales with the same uid

Files changed:
A news/60.bugfix
M plone/scale/storage.py
M plone/scale/tests/test_storage.py

b'diff --git a/news/60.bugfix b/news/60.bugfix\nnew file mode 100644\nindex 0000000..c8324e9\n--- /dev/null\n+++ b/news/60.bugfix\n@@ -0,0 +1,5 @@\n+* Fix to ensure that when a scale that was registered using `pre_scale` is\n+  later actually generated by `get_or_generate`, it is stored with the same\n+  uid as the placeholder info that was stored by `pre_scale`. This avoids\n+  an issue where the same scale was generated repeatedly.\n+  [davisagli]\ndiff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex 60bf8a3..fd3fca0 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -267,7 +267,7 @@ def pre_scale(self, **parameters):\n         logger.debug(f"Pre scale returns new {info}")\n         return info\n \n-    def generate_scale(self, **parameters):\n+    def generate_scale(self, uid=None, **parameters):\n         logger.debug("Generating scale...")\n         scaling_factory = IImageScaleFactory(self.context, None)\n         if scaling_factory is None:\n@@ -282,7 +282,8 @@ def generate_scale(self, **parameters):\n         self._cleanup(fieldname=fieldname)\n         data, format_, dimensions = result\n         width, height = dimensions\n-        uid = self.hash_key(**parameters)\n+        if uid is None:\n+            uid = self.hash_key(**parameters)\n         key = self.hash(**parameters)\n         info = dict(\n             uid=uid,\n@@ -331,7 +332,7 @@ def get_or_generate(self, name):\n         # This scale has not been generated yet.\n         # Get the parameters used when pre-registering this scale.\n         parameters = self.unhash(info["key"])\n-        return self.generate_scale(**parameters)\n+        return self.generate_scale(uid=name, **parameters)\n \n     def _cleanup(self, fieldname=None):\n         storage = self.storage\ndiff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py\nindex 9ac541e..4456878 100644\n--- a/plone/scale/tests/test_storage.py\n+++ b/plone/scale/tests/test_storage.py\n@@ -152,6 +152,19 @@ def test_get_or_generate(self):\n         self.assertEqual(real["height"], 23)\n         self.assertEqual(real["mimetype"], "image/png")\n \n+    def test_get_or_generate__stable_uid(self):\n+        # When get_or_generate actually generates the scale,\n+        # it should store it with the same uid that was used\n+        # to find the placeholder info, even if the field\n+        # has been modified or a modified time is not available\n+        self._provide_dummy_scale_adapter()\n+        storage = self.storage\n+        scale = storage.pre_scale(width=50, height=80)\n+        uid = scale["uid"]\n+        storage.modified = lambda: 100\n+        real = storage.get_or_generate(uid)\n+        self.assertEqual(real["uid"], uid)\n+\n     def testScaleForExistingScale(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-07-11T10:35:40+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/71d6d6c8ae6aec3476c90f11651dca62d4de34d1

Merge pull request #61 from plone/fix-scale-uid

Make sure get_or_generate stores scales with the same uid

Files changed:
A news/60.bugfix
M plone/scale/storage.py
M plone/scale/tests/test_storage.py

b'diff --git a/news/60.bugfix b/news/60.bugfix\nnew file mode 100644\nindex 0000000..c8324e9\n--- /dev/null\n+++ b/news/60.bugfix\n@@ -0,0 +1,5 @@\n+* Fix to ensure that when a scale that was registered using `pre_scale` is\n+  later actually generated by `get_or_generate`, it is stored with the same\n+  uid as the placeholder info that was stored by `pre_scale`. This avoids\n+  an issue where the same scale was generated repeatedly.\n+  [davisagli]\ndiff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex 60bf8a3..fd3fca0 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -267,7 +267,7 @@ def pre_scale(self, **parameters):\n         logger.debug(f"Pre scale returns new {info}")\n         return info\n \n-    def generate_scale(self, **parameters):\n+    def generate_scale(self, uid=None, **parameters):\n         logger.debug("Generating scale...")\n         scaling_factory = IImageScaleFactory(self.context, None)\n         if scaling_factory is None:\n@@ -282,7 +282,8 @@ def generate_scale(self, **parameters):\n         self._cleanup(fieldname=fieldname)\n         data, format_, dimensions = result\n         width, height = dimensions\n-        uid = self.hash_key(**parameters)\n+        if uid is None:\n+            uid = self.hash_key(**parameters)\n         key = self.hash(**parameters)\n         info = dict(\n             uid=uid,\n@@ -331,7 +332,7 @@ def get_or_generate(self, name):\n         # This scale has not been generated yet.\n         # Get the parameters used when pre-registering this scale.\n         parameters = self.unhash(info["key"])\n-        return self.generate_scale(**parameters)\n+        return self.generate_scale(uid=name, **parameters)\n \n     def _cleanup(self, fieldname=None):\n         storage = self.storage\ndiff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py\nindex 9ac541e..4456878 100644\n--- a/plone/scale/tests/test_storage.py\n+++ b/plone/scale/tests/test_storage.py\n@@ -152,6 +152,19 @@ def test_get_or_generate(self):\n         self.assertEqual(real["height"], 23)\n         self.assertEqual(real["mimetype"], "image/png")\n \n+    def test_get_or_generate__stable_uid(self):\n+        # When get_or_generate actually generates the scale,\n+        # it should store it with the same uid that was used\n+        # to find the placeholder info, even if the field\n+        # has been modified or a modified time is not available\n+        self._provide_dummy_scale_adapter()\n+        storage = self.storage\n+        scale = storage.pre_scale(width=50, height=80)\n+        uid = scale["uid"]\n+        storage.modified = lambda: 100\n+        real = storage.get_or_generate(uid)\n+        self.assertEqual(real["uid"], uid)\n+\n     def testScaleForExistingScale(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n'

