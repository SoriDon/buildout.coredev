Repository: plone.app.event


Branch: refs/heads/master
Date: 2021-11-18T17:20:21+01:00
Author: petschki (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.event/commit/2ec5e87c8d22aee9c8c50be15a833de982e5b84b

Update pattern_options for end date

Files changed:
M plone/app/event/dx/behaviors.py

b'diff --git a/plone/app/event/dx/behaviors.py b/plone/app/event/dx/behaviors.py\nindex c361c6df..1fb32f22 100644\n--- a/plone/app/event/dx/behaviors.py\n+++ b/plone/app/event/dx/behaviors.py\n@@ -107,7 +107,12 @@ class IEventBasic(model.Schema, IDXEvent):\n         \'end\',\n         DatetimeFieldWidget,\n         default_timezone=default_timezone,\n-        klass=u\'event_end\'\n+        klass=u\'event_end\',\n+        pattern_options={\n+            "behavior": "styled",\n+            "after": "input.event_end",\n+            "offset-days": "0.125",\n+        },\n     )\n \n     whole_day = schema.Bool(\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2021-11-18T17:20:21+01:00
Author: petschki (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.event/commit/10e8da95372920779762c8f813ffb8dd0b985ccb

add changenote

Files changed:
A news/346.feature

b'diff --git a/news/346.feature b/news/346.feature\nnew file mode 100644\nindex 00000000..394c801b\n--- /dev/null\n+++ b/news/346.feature\n@@ -0,0 +1,3 @@\n+Use patternlib `pat-datetime-picker` for datetime fields\n+in combination with its `after` option\n+[petschki]\n\\ No newline at end of file\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2022-01-19T10:50:12+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.event/commit/f7acf658a7a3be46718c47afe12b07006cb0aa07

fix tests

Files changed:
M plone/app/event/tests/test_dx_behaviors.py

b'diff --git a/plone/app/event/tests/test_dx_behaviors.py b/plone/app/event/tests/test_dx_behaviors.py\nindex 7aa9d8bc..955347a4 100644\n--- a/plone/app/event/tests/test_dx_behaviors.py\n+++ b/plone/app/event/tests/test_dx_behaviors.py\n@@ -170,10 +170,10 @@ def test_edit_context(self):\n         ).value = "TestEvent"\n \n         self.browser.getControl(\n-            name=\'form.widgets.IEventBasic.start\').value = "2014-03-30 03:51"\n+            name=\'form.widgets.IEventBasic.start\').value = "2014-03-30T03:51"\n \n         self.browser.getControl(\n-            name=\'form.widgets.IEventBasic.end\').value = "2014-03-30 04:51"\n+            name=\'form.widgets.IEventBasic.end\').value = "2014-03-30T04:51"\n \n         self.browser.getControl(\'Save\').click()\n \n@@ -190,10 +190,10 @@ def test_edit_context(self):\n         self.browser.open(\'%s/@@edit\' % testevent.absolute_url())\n \n         self.browser.getControl(\n-            name=\'form.widgets.IEventBasic.start\').value = "2014-03-31 03:51"\n+            name=\'form.widgets.IEventBasic.start\').value = "2014-03-31T03:51"\n \n         self.browser.getControl(\n-            name=\'form.widgets.IEventBasic.end\').value = "2014-03-31 04:51"\n+            name=\'form.widgets.IEventBasic.end\').value = "2014-03-31T04:51"\n \n         self.browser.getControl(\'Save\').click()\n \n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2022-01-28T16:47:22+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.event/commit/db6919dfaa8d878a61ff1592b4f679fd12e4663c

remove old event js (will be moved to mockup)

Files changed:
D plone/app/event/browser/resources/event.js
D plone/app/event/profiles/default/registry.xml

b'diff --git a/plone/app/event/browser/resources/event.js b/plone/app/event/browser/resources/event.js\ndeleted file mode 100644\nindex 8abc6f52..00000000\n--- a/plone/app/event/browser/resources/event.js\n+++ /dev/null\n@@ -1,262 +0,0 @@\n-/* jslint browser: true */\n-/* globals require */\n-\n-(function($) {\n-\n-  var eventedit = {\n-\n-    start_end_delta: 1 / 24, // Delta in days\n-\n-    // DOM ELEMENTS\n-    $start_input: undefined,\n-    $start_container: undefined,\n-    $pickadate_starttime: undefined,\n-    $end_input: undefined,\n-    $end_container: undefined,\n-    $pickadate_endtime: undefined,\n-    $whole_day_input: undefined,\n-    $open_end_input: undefined,\n-\n-    get_dom_element: function (sel, $container) {\n-      /* Try to get the DOM element from a selector and return it or return undefined.\n-       * */\n-      var $el;\n-      if ($container) {\n-        $el = $(sel, $container);\n-      } else {\n-        $el = $(sel);\n-      }\n-      return $el.length ? $el : undefined;\n-    },\n-\n-    getDateTime: function (datetimewidget) {\n-      var date, time, datetime, set_time;\n-      date = $(\'input[name="_submit"]:first\', datetimewidget).prop(\'value\');\n-      if (!date) {\n-        return;\n-      }\n-      date = date.split(\'-\');\n-      time = $(\'input[name="_submit"]:last\', datetimewidget).prop(\'value\');\n-      if (!time) {\n-        // can happen with optional start/end dates without default values.\n-        set_time = true;\n-        time = \'00:00\';\n-      }\n-      time = time.split(\':\');\n-\n-      // We can\'t just parse the ``date + \'T\' + time`` string, because of\n-      // Chromium bug: https://code.google.com/p/chromium/issues/detail?id=145198\n-      // When passing date and time components, the passed date/time is\n-      // interpreted as local time and not UTC.\n-      datetime = new Date(\n-        parseInt(date[0], 10),\n-        parseInt(date[1], 10) - 1, // you know, javascript\'s month index starts with 0\n-        parseInt(date[2], 10),\n-        parseInt(time[0], 10),\n-        parseInt(time[1], 10)\n-      );\n-      if (set_time) {\n-        // we have a date but no time?! set it.\n-        $(\'.pattern-pickadate-time\', datetimewidget)\n-          .pickatime(\'picker\')\n-          .set(\'select\', datetime);\n-      }\n-      return datetime;\n-    },\n-\n-    initStartEndDelta: function (start_container, end_container) {\n-      var start_datetime = this.getDateTime(start_container);\n-      var end_datetime = this.getDateTime(end_container);\n-\n-      if (!start_datetime || !end_datetime) {\n-        return;\n-      }\n-\n-      // delta in days\n-      this.start_end_delta = (end_datetime - start_datetime) / 1000 / 60;\n-    },\n-\n-    updateEndDate: function (start_container, end_container) {\n-      var start_date = this.getDateTime(start_container);\n-      if (!start_date) {\n-        return;\n-      }\n-\n-      var new_end_date = new Date(start_date);\n-      new_end_date.setMinutes(start_date.getMinutes() + this.start_end_delta);\n-\n-      $(\'.pattern-pickadate-date\', end_container)\n-        .pickadate(\'picker\')\n-        .set(\'select\', new_end_date);\n-      $(\'.pattern-pickadate-time\', end_container)\n-        .pickatime(\'picker\')\n-        .set(\'select\', new_end_date);\n-    },\n-\n-    validateEndDate: function (start_container, end_container) {\n-      var start_datetime = this.getDateTime(start_container);\n-      var end_datetime = this.getDateTime(end_container);\n-      if (!start_datetime || !end_datetime) {\n-        return;\n-      }\n-\n-      if (end_datetime < start_datetime) {\n-        start_container.addClass(\'error\');\n-      } else {\n-        end_container.removeClass(\'error\');\n-      }\n-    },\n-\n-    show_hide_widget: function (widget, hide, fade) {\n-      var $widget = $(widget);\n-      if (hide === true) {\n-        if (fade === true) {\n-          $widget.fadeOut();\n-        } else {\n-          $widget.hide();\n-        }\n-      } else {\n-        if (fade === true) {\n-          $widget.fadeIn();\n-        } else {\n-          $widget.show();\n-        }\n-      }\n-    },\n-\n-    event_listing_calendar_init: function (cal) {\n-      // Dateinput selector for event_listing view\n-      if ($().dateinput && cal.length > 0) {\n-        var get_req_param, val;\n-        get_req_param = function(name) {\n-          // http://stackoverflow.com/questions/831030/how-to-get-get-request-parameters-in-javascript\n-          if (\n-            name ===\n-            new RegExp(\'[?&]\' + encodeURIComponent(name) + \'=([^&]*)\').exec(\n-              window.location.search\n-            )\n-          ) {\n-            return decodeURIComponent(name[1]);\n-          }\n-        };\n-        // Preselect current date, if exists\n-        val = get_req_param(\'date\');\n-        if (val === undefined) {\n-          val = new Date();\n-        } else {\n-          val = new Date(val);\n-        }\n-        cal\n-          .dateinput({\n-            selectors: true,\n-            trigger: true,\n-            format: \'yyyy-mm-dd\',\n-            yearRange: [-10, 10],\n-            firstDay: 1,\n-            value: val,\n-            change: function() {\n-              var value = this.getValue(\'yyyy-mm-dd\');\n-              window.location.href = \'event_listing?mode=day&date=\' + value;\n-            }\n-          })\n-          .unbind(\'change\')\n-          .bind(\'onShow\', function() {\n-            var trigger_offset = $(this).next().offset();\n-            $(this).data(\'dateinput\').getCalendar().offset({\n-              top: trigger_offset.top + 20,\n-              left: trigger_offset.left\n-            });\n-          });\n-      }\n-    },\n-\n-    initilize_event: function () {\n-\n-      var $start_container = this.$start_container,\n-          $end_container = this.$end_container,\n-          $pickadate_starttime = this.$pickadate_starttime,\n-          $pickadate_endtime = this.$pickadate_endtime,\n-          $open_end_input = this.$open_end_input,\n-          $whole_day_input = this.$whole_day_input;\n-\n-      // WHOLE DAY INIT\n-      if ($whole_day_input.length > 0) {\n-        $whole_day_input.bind(\'change\', function(e) {\n-          this.show_hide_widget($pickadate_starttime, e.target.checked, true);\n-          this.show_hide_widget($pickadate_endtime, e.target.checked, true);\n-        }.bind(this));\n-        this.show_hide_widget(\n-          $pickadate_starttime,\n-          $whole_day_input.get(0).checked,\n-          false\n-        );\n-        this.show_hide_widget(\n-          $pickadate_endtime,\n-          $whole_day_input.get(0).checked,\n-          false\n-        );\n-      }\n-\n-      // OPEN END INIT\n-      if ($open_end_input.length > 0) {\n-        $open_end_input.bind(\'change\', function(e) {\n-          this.show_hide_widget($end_container, e.target.checked, true);\n-        }.bind(this));\n-        this.show_hide_widget($end_container, $open_end_input.get(0).checked, false);\n-      }\n-\n-      // START/END SETTING/VALIDATION\n-      $start_container.on(\'focus\', \'.picker__input\', function() {\n-        this.initStartEndDelta($start_container, $end_container);\n-      }.bind(this));\n-      $start_container.on(\'change\', \'.picker__input\', function() {\n-        this.updateEndDate($start_container, $end_container);\n-      }.bind(this));\n-      \n-      $end_container.on(\'focus\', \'.picker__input\', function() {\n-        this.initStartEndDelta($start_container, $end_container);\n-      }.bind(this));\n-      $end_container.on(\'change\', \'.picker__input\', function() {\n-        this.validateEndDate($start_container, $end_container);\n-      }.bind(this));\n-\n-    },\n-  \n-  };\n-\n-  $(document).ready(function() {\n-\n-    eventedit.$start_input = eventedit.get_dom_element(\'form input.event_start\');\n-    if (!eventedit.$start_input) {\n-      // Not an event edit form.\n-      return;\n-    }\n-    eventedit.$end_input = eventedit.get_dom_element(\'form input.event_end\');\n-    if (!eventedit.$end_input) {\n-      // Not an event edit form.\n-      return;\n-    }\n-\n-    eventedit.$start_container = eventedit.$start_input.closest(\'div\');\n-    eventedit.$end_container   = eventedit.$end_input.closest(\'div\');\n-    eventedit.$whole_day_input = eventedit.get_dom_element(\'form input.event_whole_day\');\n-    eventedit.$open_end_input  = eventedit.get_dom_element(\'form input.event_open_end\');\n-\n-    var interval = setInterval(function() {\n-      eventedit.$pickadate_starttime = !eventedit.$pickadate_starttime && eventedit.get_dom_element(\'.pattern-pickadate-time-wrapper\', eventedit.$start_container);\n-      eventedit.$pickadate_endtime   = !eventedit.$pickadate_endtime   && eventedit.get_dom_element(\'.pattern-pickadate-time-wrapper\', eventedit.$end_container);\n-\n-      if (\n-        eventedit.$pickadate_starttime &&\n-        eventedit.$pickadate_endtime\n-      ) {\n-        clearInterval(interval);\n-        eventedit.initilize_event();\n-      }\n-    }, 100);\n-\n-    // EVENT LISTING CALENDAR POPUP\n-    eventedit.event_listing_calendar_init($(\'#event_listing_calendar\'));\n-\n-  });\n-})(jQuery);\ndiff --git a/plone/app/event/profiles/default/registry.xml b/plone/app/event/profiles/default/registry.xml\ndeleted file mode 100644\nindex d61b9cdd..00000000\n--- a/plone/app/event/profiles/default/registry.xml\n+++ /dev/null\n@@ -1,16 +0,0 @@\n-<?xml version="1.0"?>\n-<registry>\n-\n-  <records prefix="plone.resources/plone-app-event"\n-            interface=\'Products.CMFPlone.interfaces.IResourceRegistry\'>\n-      <value key="js">++plone++plone.app.event/event.js</value>\n-  </records>\n-  <records prefix="plone.bundles/plone-legacy"\n-            interface=\'Products.CMFPlone.interfaces.IBundleRegistry\'>\n-    <value key="resources" purge="false">\n-      <element>plone-app-event</element>\n-    </value>\n-    <value key="last_compilation"></value>\n-  </records>\n-\n-</registry>\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2022-01-28T20:04:05+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.event/commit/ed59dc525f66fba0dafa485f94515a30cb04af86

Revert "remove old event js (will be moved to mockup)"

This reverts commit db6919dfaa8d878a61ff1592b4f679fd12e4663c.

Files changed:
A plone/app/event/browser/resources/event.js
A plone/app/event/profiles/default/registry.xml

b'diff --git a/plone/app/event/browser/resources/event.js b/plone/app/event/browser/resources/event.js\nnew file mode 100644\nindex 00000000..8abc6f52\n--- /dev/null\n+++ b/plone/app/event/browser/resources/event.js\n@@ -0,0 +1,262 @@\n+/* jslint browser: true */\n+/* globals require */\n+\n+(function($) {\n+\n+  var eventedit = {\n+\n+    start_end_delta: 1 / 24, // Delta in days\n+\n+    // DOM ELEMENTS\n+    $start_input: undefined,\n+    $start_container: undefined,\n+    $pickadate_starttime: undefined,\n+    $end_input: undefined,\n+    $end_container: undefined,\n+    $pickadate_endtime: undefined,\n+    $whole_day_input: undefined,\n+    $open_end_input: undefined,\n+\n+    get_dom_element: function (sel, $container) {\n+      /* Try to get the DOM element from a selector and return it or return undefined.\n+       * */\n+      var $el;\n+      if ($container) {\n+        $el = $(sel, $container);\n+      } else {\n+        $el = $(sel);\n+      }\n+      return $el.length ? $el : undefined;\n+    },\n+\n+    getDateTime: function (datetimewidget) {\n+      var date, time, datetime, set_time;\n+      date = $(\'input[name="_submit"]:first\', datetimewidget).prop(\'value\');\n+      if (!date) {\n+        return;\n+      }\n+      date = date.split(\'-\');\n+      time = $(\'input[name="_submit"]:last\', datetimewidget).prop(\'value\');\n+      if (!time) {\n+        // can happen with optional start/end dates without default values.\n+        set_time = true;\n+        time = \'00:00\';\n+      }\n+      time = time.split(\':\');\n+\n+      // We can\'t just parse the ``date + \'T\' + time`` string, because of\n+      // Chromium bug: https://code.google.com/p/chromium/issues/detail?id=145198\n+      // When passing date and time components, the passed date/time is\n+      // interpreted as local time and not UTC.\n+      datetime = new Date(\n+        parseInt(date[0], 10),\n+        parseInt(date[1], 10) - 1, // you know, javascript\'s month index starts with 0\n+        parseInt(date[2], 10),\n+        parseInt(time[0], 10),\n+        parseInt(time[1], 10)\n+      );\n+      if (set_time) {\n+        // we have a date but no time?! set it.\n+        $(\'.pattern-pickadate-time\', datetimewidget)\n+          .pickatime(\'picker\')\n+          .set(\'select\', datetime);\n+      }\n+      return datetime;\n+    },\n+\n+    initStartEndDelta: function (start_container, end_container) {\n+      var start_datetime = this.getDateTime(start_container);\n+      var end_datetime = this.getDateTime(end_container);\n+\n+      if (!start_datetime || !end_datetime) {\n+        return;\n+      }\n+\n+      // delta in days\n+      this.start_end_delta = (end_datetime - start_datetime) / 1000 / 60;\n+    },\n+\n+    updateEndDate: function (start_container, end_container) {\n+      var start_date = this.getDateTime(start_container);\n+      if (!start_date) {\n+        return;\n+      }\n+\n+      var new_end_date = new Date(start_date);\n+      new_end_date.setMinutes(start_date.getMinutes() + this.start_end_delta);\n+\n+      $(\'.pattern-pickadate-date\', end_container)\n+        .pickadate(\'picker\')\n+        .set(\'select\', new_end_date);\n+      $(\'.pattern-pickadate-time\', end_container)\n+        .pickatime(\'picker\')\n+        .set(\'select\', new_end_date);\n+    },\n+\n+    validateEndDate: function (start_container, end_container) {\n+      var start_datetime = this.getDateTime(start_container);\n+      var end_datetime = this.getDateTime(end_container);\n+      if (!start_datetime || !end_datetime) {\n+        return;\n+      }\n+\n+      if (end_datetime < start_datetime) {\n+        start_container.addClass(\'error\');\n+      } else {\n+        end_container.removeClass(\'error\');\n+      }\n+    },\n+\n+    show_hide_widget: function (widget, hide, fade) {\n+      var $widget = $(widget);\n+      if (hide === true) {\n+        if (fade === true) {\n+          $widget.fadeOut();\n+        } else {\n+          $widget.hide();\n+        }\n+      } else {\n+        if (fade === true) {\n+          $widget.fadeIn();\n+        } else {\n+          $widget.show();\n+        }\n+      }\n+    },\n+\n+    event_listing_calendar_init: function (cal) {\n+      // Dateinput selector for event_listing view\n+      if ($().dateinput && cal.length > 0) {\n+        var get_req_param, val;\n+        get_req_param = function(name) {\n+          // http://stackoverflow.com/questions/831030/how-to-get-get-request-parameters-in-javascript\n+          if (\n+            name ===\n+            new RegExp(\'[?&]\' + encodeURIComponent(name) + \'=([^&]*)\').exec(\n+              window.location.search\n+            )\n+          ) {\n+            return decodeURIComponent(name[1]);\n+          }\n+        };\n+        // Preselect current date, if exists\n+        val = get_req_param(\'date\');\n+        if (val === undefined) {\n+          val = new Date();\n+        } else {\n+          val = new Date(val);\n+        }\n+        cal\n+          .dateinput({\n+            selectors: true,\n+            trigger: true,\n+            format: \'yyyy-mm-dd\',\n+            yearRange: [-10, 10],\n+            firstDay: 1,\n+            value: val,\n+            change: function() {\n+              var value = this.getValue(\'yyyy-mm-dd\');\n+              window.location.href = \'event_listing?mode=day&date=\' + value;\n+            }\n+          })\n+          .unbind(\'change\')\n+          .bind(\'onShow\', function() {\n+            var trigger_offset = $(this).next().offset();\n+            $(this).data(\'dateinput\').getCalendar().offset({\n+              top: trigger_offset.top + 20,\n+              left: trigger_offset.left\n+            });\n+          });\n+      }\n+    },\n+\n+    initilize_event: function () {\n+\n+      var $start_container = this.$start_container,\n+          $end_container = this.$end_container,\n+          $pickadate_starttime = this.$pickadate_starttime,\n+          $pickadate_endtime = this.$pickadate_endtime,\n+          $open_end_input = this.$open_end_input,\n+          $whole_day_input = this.$whole_day_input;\n+\n+      // WHOLE DAY INIT\n+      if ($whole_day_input.length > 0) {\n+        $whole_day_input.bind(\'change\', function(e) {\n+          this.show_hide_widget($pickadate_starttime, e.target.checked, true);\n+          this.show_hide_widget($pickadate_endtime, e.target.checked, true);\n+        }.bind(this));\n+        this.show_hide_widget(\n+          $pickadate_starttime,\n+          $whole_day_input.get(0).checked,\n+          false\n+        );\n+        this.show_hide_widget(\n+          $pickadate_endtime,\n+          $whole_day_input.get(0).checked,\n+          false\n+        );\n+      }\n+\n+      // OPEN END INIT\n+      if ($open_end_input.length > 0) {\n+        $open_end_input.bind(\'change\', function(e) {\n+          this.show_hide_widget($end_container, e.target.checked, true);\n+        }.bind(this));\n+        this.show_hide_widget($end_container, $open_end_input.get(0).checked, false);\n+      }\n+\n+      // START/END SETTING/VALIDATION\n+      $start_container.on(\'focus\', \'.picker__input\', function() {\n+        this.initStartEndDelta($start_container, $end_container);\n+      }.bind(this));\n+      $start_container.on(\'change\', \'.picker__input\', function() {\n+        this.updateEndDate($start_container, $end_container);\n+      }.bind(this));\n+      \n+      $end_container.on(\'focus\', \'.picker__input\', function() {\n+        this.initStartEndDelta($start_container, $end_container);\n+      }.bind(this));\n+      $end_container.on(\'change\', \'.picker__input\', function() {\n+        this.validateEndDate($start_container, $end_container);\n+      }.bind(this));\n+\n+    },\n+  \n+  };\n+\n+  $(document).ready(function() {\n+\n+    eventedit.$start_input = eventedit.get_dom_element(\'form input.event_start\');\n+    if (!eventedit.$start_input) {\n+      // Not an event edit form.\n+      return;\n+    }\n+    eventedit.$end_input = eventedit.get_dom_element(\'form input.event_end\');\n+    if (!eventedit.$end_input) {\n+      // Not an event edit form.\n+      return;\n+    }\n+\n+    eventedit.$start_container = eventedit.$start_input.closest(\'div\');\n+    eventedit.$end_container   = eventedit.$end_input.closest(\'div\');\n+    eventedit.$whole_day_input = eventedit.get_dom_element(\'form input.event_whole_day\');\n+    eventedit.$open_end_input  = eventedit.get_dom_element(\'form input.event_open_end\');\n+\n+    var interval = setInterval(function() {\n+      eventedit.$pickadate_starttime = !eventedit.$pickadate_starttime && eventedit.get_dom_element(\'.pattern-pickadate-time-wrapper\', eventedit.$start_container);\n+      eventedit.$pickadate_endtime   = !eventedit.$pickadate_endtime   && eventedit.get_dom_element(\'.pattern-pickadate-time-wrapper\', eventedit.$end_container);\n+\n+      if (\n+        eventedit.$pickadate_starttime &&\n+        eventedit.$pickadate_endtime\n+      ) {\n+        clearInterval(interval);\n+        eventedit.initilize_event();\n+      }\n+    }, 100);\n+\n+    // EVENT LISTING CALENDAR POPUP\n+    eventedit.event_listing_calendar_init($(\'#event_listing_calendar\'));\n+\n+  });\n+})(jQuery);\ndiff --git a/plone/app/event/profiles/default/registry.xml b/plone/app/event/profiles/default/registry.xml\nnew file mode 100644\nindex 00000000..d61b9cdd\n--- /dev/null\n+++ b/plone/app/event/profiles/default/registry.xml\n@@ -0,0 +1,16 @@\n+<?xml version="1.0"?>\n+<registry>\n+\n+  <records prefix="plone.resources/plone-app-event"\n+            interface=\'Products.CMFPlone.interfaces.IResourceRegistry\'>\n+      <value key="js">++plone++plone.app.event/event.js</value>\n+  </records>\n+  <records prefix="plone.bundles/plone-legacy"\n+            interface=\'Products.CMFPlone.interfaces.IBundleRegistry\'>\n+    <value key="resources" purge="false">\n+      <element>plone-app-event</element>\n+    </value>\n+    <value key="last_compilation"></value>\n+  </records>\n+\n+</registry>\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2022-03-24T15:24:59+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/c5217c9bdb36c97bdadf4a2ed18ab0acac6f211b

Merge pull request #346 from plone/es6-patternslib-options

Update pattern_options for end date

Files changed:
A news/346.feature
M plone/app/event/dx/behaviors.py
M plone/app/event/tests/test_dx_behaviors.py

b'diff --git a/news/346.feature b/news/346.feature\nnew file mode 100644\nindex 00000000..394c801b\n--- /dev/null\n+++ b/news/346.feature\n@@ -0,0 +1,3 @@\n+Use patternlib `pat-datetime-picker` for datetime fields\n+in combination with its `after` option\n+[petschki]\n\\ No newline at end of file\ndiff --git a/plone/app/event/dx/behaviors.py b/plone/app/event/dx/behaviors.py\nindex c361c6df..1fb32f22 100644\n--- a/plone/app/event/dx/behaviors.py\n+++ b/plone/app/event/dx/behaviors.py\n@@ -107,7 +107,12 @@ class IEventBasic(model.Schema, IDXEvent):\n         \'end\',\n         DatetimeFieldWidget,\n         default_timezone=default_timezone,\n-        klass=u\'event_end\'\n+        klass=u\'event_end\',\n+        pattern_options={\n+            "behavior": "styled",\n+            "after": "input.event_end",\n+            "offset-days": "0.125",\n+        },\n     )\n \n     whole_day = schema.Bool(\ndiff --git a/plone/app/event/tests/test_dx_behaviors.py b/plone/app/event/tests/test_dx_behaviors.py\nindex 7aa9d8bc..955347a4 100644\n--- a/plone/app/event/tests/test_dx_behaviors.py\n+++ b/plone/app/event/tests/test_dx_behaviors.py\n@@ -170,10 +170,10 @@ def test_edit_context(self):\n         ).value = "TestEvent"\n \n         self.browser.getControl(\n-            name=\'form.widgets.IEventBasic.start\').value = "2014-03-30 03:51"\n+            name=\'form.widgets.IEventBasic.start\').value = "2014-03-30T03:51"\n \n         self.browser.getControl(\n-            name=\'form.widgets.IEventBasic.end\').value = "2014-03-30 04:51"\n+            name=\'form.widgets.IEventBasic.end\').value = "2014-03-30T04:51"\n \n         self.browser.getControl(\'Save\').click()\n \n@@ -190,10 +190,10 @@ def test_edit_context(self):\n         self.browser.open(\'%s/@@edit\' % testevent.absolute_url())\n \n         self.browser.getControl(\n-            name=\'form.widgets.IEventBasic.start\').value = "2014-03-31 03:51"\n+            name=\'form.widgets.IEventBasic.start\').value = "2014-03-31T03:51"\n \n         self.browser.getControl(\n-            name=\'form.widgets.IEventBasic.end\').value = "2014-03-31 04:51"\n+            name=\'form.widgets.IEventBasic.end\').value = "2014-03-31T04:51"\n \n         self.browser.getControl(\'Save\').click()\n \n'

