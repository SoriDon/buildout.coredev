Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-02-25T02:36:30+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.theming/commit/2a084833a909b6caa7534692514d86a7749f80c4

Import more from plone.base.

Files changed:
A news/1.bugfix
M src/plone/app/theming/browser/controlpanel.py
M src/plone/app/theming/utils.py

b"diff --git a/news/1.bugfix b/news/1.bugfix\nnew file mode 100644\nindex 00000000..ddc1109e\n--- /dev/null\n+++ b/news/1.bugfix\n@@ -0,0 +1 @@\n+Import more from plone.base. [maurits]\ndiff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py\nindex f264e336..3accee05 100644\n--- a/src/plone/app/theming/browser/controlpanel.py\n+++ b/src/plone/app/theming/browser/controlpanel.py\n@@ -19,8 +19,8 @@\n from plone.registry.interfaces import IRegistry\n from plone.resource.utils import queryResourceDirectory\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import safe_nativestring\n-from Products.CMFPlone.interfaces import ILinkSchema\n+from plone.base.utils import safe_text\n+from plone.base.interfaces import ILinkSchema\n from Products.statusmessages.interfaces import IStatusMessage\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n@@ -64,7 +64,7 @@ def hostname_blacklist(self):\n         hostname_blacklist = self.request.get('hostnameBlacklist', [])\n         if six.PY2:\n             return hostname_blacklist\n-        return [safe_nativestring(host) for host in hostname_blacklist]\n+        return [safe_text(host) for host in hostname_blacklist]\n \n     def __call__(self):\n         self.pskin = getToolByName(self.context, 'portal_skins')\ndiff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py\nindex d58355c9..3acd1f6b 100644\n--- a/src/plone/app/theming/utils.py\n+++ b/src/plone/app/theming/utils.py\n@@ -23,8 +23,8 @@\n from plone.subrequest import subrequest\n from Products.CMFCore.interfaces import IContentish\n from Products.CMFCore.interfaces import ISiteRoot\n-from Products.CMFPlone.utils import safe_encode\n-from Products.CMFPlone.utils import safe_unicode\n+from plone.base.utils import safe_bytes\n+from plone.base.utils import safe_text\n from Products.PageTemplates.Expressions import getEngine\n from six.moves.urllib.parse import urlsplit\n from zope.component import getUtility\n@@ -437,7 +437,7 @@ def getAvailableThemes():\n     for theme in resources:\n         themes.append(getTheme(theme['name'], theme))\n \n-    themes.sort(key=lambda x: safe_unicode(x.title))\n+    themes.sort(key=lambda x: safe_text(x.title))\n     return themes\n \n def getThemeResources(format, defaults=None, filter=None, manifestFilename=MANIFEST_FILENAME):\n@@ -614,7 +614,7 @@ def createThemeFromTemplate(title, description, baseOn='template'):\n                 data = fp.read()\n             finally:\n                 fp.close()\n-            manifest.read_string(safe_unicode(data))\n+            manifest.read_string(safe_text(data))\n \n     if not manifest.has_section('theme'):\n         manifest.add_section('theme')\n@@ -659,7 +659,7 @@ def createThemeFromTemplate(title, description, baseOn='template'):\n     tempfile.seek(0)\n     data = tempfile.read()\n     tempfile.close()\n-    manifestContents = six.BytesIO(safe_encode(data))\n+    manifestContents = six.BytesIO(safe_bytes(data))\n \n     target.writeFile(MANIFEST_FILENAME, manifestContents)\n     return themeName\n"

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-02-25T02:37:35+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.theming/commit/a7511fa65f16ca35076638af76c0b2fb217b6f47

pyupgrade

Files changed:
M setup.py
M src/plone/__init__.py
M src/plone/app/__init__.py
M src/plone/app/theming/__init__.py
M src/plone/app/theming/browser/__init__.py
M src/plone/app/theming/browser/controlpanel.py
M src/plone/app/theming/browser/custom_css.py
M src/plone/app/theming/browser/help.py
M src/plone/app/theming/browser/themefile.py
M src/plone/app/theming/events.py
M src/plone/app/theming/exportimport/handler.py
M src/plone/app/theming/header.py
M src/plone/app/theming/interfaces.py
M src/plone/app/theming/plugins/__init__.py
M src/plone/app/theming/plugins/hooks.py
M src/plone/app/theming/plugins/utils.py
M src/plone/app/theming/policy.py
M src/plone/app/theming/testing.py
M src/plone/app/theming/tests/test_controlpanel.py
M src/plone/app/theming/tests/test_exportimport.py
M src/plone/app/theming/tests/test_policy.py
M src/plone/app/theming/tests/test_transform.py
M src/plone/app/theming/tests/test_utils.py
M src/plone/app/theming/theme.py
M src/plone/app/theming/transform.py
M src/plone/app/theming/traversal.py
M src/plone/app/theming/upgrade.py
M src/plone/app/theming/utils.py
M src/plone/app/theming/zmi.py

b'diff --git a/setup.py b/setup.py\nindex 5e53534c..c6d0be5e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex 68c04af4..de40ea7c 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/src/plone/app/__init__.py b/src/plone/app/__init__.py\nindex 68c04af4..de40ea7c 100644\n--- a/src/plone/app/__init__.py\n+++ b/src/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/src/plone/app/theming/__init__.py b/src/plone/app/theming/__init__.py\nindex a3022e6b..694ea023 100644\n--- a/src/plone/app/theming/__init__.py\n+++ b/src/plone/app/theming/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # make this a namespace packages (plone.app.theming.plugins is an\n # extensible python namespace\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/src/plone/app/theming/browser/__init__.py b/src/plone/app/theming/browser/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/src/plone/app/theming/browser/__init__.py\n+++ b/src/plone/app/theming/browser/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py\nindex 3accee05..c911fcc4 100644\n--- a/src/plone/app/theming/browser/controlpanel.py\n+++ b/src/plone/app/theming/browser/controlpanel.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from datetime import datetime\n from plone.app.theming.interfaces import _\n@@ -45,7 +44,7 @@\n \n \n def authorize(context, request):\n-    authenticator = getMultiAdapter((context, request), name=u"authenticator")\n+    authenticator = getMultiAdapter((context, request), name="authenticator")\n     if not authenticator.verify():\n         raise Unauthorized\n \n@@ -127,8 +126,8 @@ def update(self):\n         form = self.request.form\n \n         if \'form.button.Cancel\' in form:\n-            IStatusMessage(self.request).add(_(u"Changes cancelled"))\n-            self.redirect("{0}/@@overview-controlpanel".format(self.site_url))\n+            IStatusMessage(self.request).add(_("Changes cancelled"))\n+            self.redirect("{}/@@overview-controlpanel".format(self.site_url))\n             return False\n \n         if \'form.button.Enable\' in form:\n@@ -148,8 +147,8 @@ def update(self):\n                 self.request\n             ).add(\n                 _(\n-                    u"Theme enabled. Note that this control panel page is "\n-                    u"never themed."\n+                    "Theme enabled. Note that this control panel page is "\n+                    "never themed."\n                 )\n             )\n             self._setup()\n@@ -167,7 +166,7 @@ def update(self):\n             applyTheme(None)\n             self.theme_settings.enabled = False\n \n-            IStatusMessage(self.request).add(_(u"Theme disabled."))\n+            IStatusMessage(self.request).add(_("Theme disabled."))\n             self._setup()\n             return True\n \n@@ -193,8 +192,8 @@ def update(self):\n                 except ValueError:\n                     message = _(\n                         \'error_invalid_parameter_expressions\',\n-                        default=u"Please ensure you enter one expression per "\n-                                u"line, in the format <name> = <expression>."\n+                        default="Please ensure you enter one expression per "\n+                                "line, in the format <name> = <expression>."\n                     )\n                     self.errors[\'parameterExpressions\'] = message\n \n@@ -230,12 +229,12 @@ def update(self):\n                 if extLinksOpenInNewWindow is not None:\n                     self.ext_links_open_new_window = extLinksOpenInNewWindow\n \n-                IStatusMessage(self.request).add(_(u"Changes saved"))\n+                IStatusMessage(self.request).add(_("Changes saved"))\n                 self._setup()\n                 return True\n             else:\n                 IStatusMessage(self.request).add(\n-                    _(u"There were errors"), \'error\'\n+                    _("There were errors"), \'error\'\n                 )\n                 self.redirectToFieldset(\'advanced\')\n                 return False\n@@ -256,7 +255,7 @@ def update(self):\n                 logger.exception("Could not read zip file")\n                 self.errors[\'themeArchive\'] = _(\n                     \'error_invalid_zip\',\n-                    default=u"The uploaded file is not a valid Zip archive"\n+                    default="The uploaded file is not a valid Zip archive"\n                 )\n \n             if themeZip:\n@@ -267,8 +266,8 @@ def update(self):\n                     logger.warn(str(e))\n                     self.errors[\'themeArchive\'] = _(\n                         \'error_no_rules_file\',\n-                        u"The uploaded file does not contain a valid theme "\n-                        u"archive."\n+                        "The uploaded file does not contain a valid theme "\n+                        "archive."\n                     )\n                 else:\n \n@@ -279,9 +278,9 @@ def update(self):\n                         if not replaceExisting:\n                             self.errors[\'themeArchive\'] = _(\n                                 \'error_already_installed\',\n-                                u"This theme is already installed. Select "\n-                                u"\'Replace existing theme\' and re-upload to "\n-                                u"replace it."\n+                                "This theme is already installed. Select "\n+                                "\'Replace existing theme\' and re-upload to "\n+                                "replace it."\n                             )\n                         else:\n                             del themeContainer[themeData.__name__]\n@@ -298,7 +297,7 @@ def update(self):\n                 )\n                 if themeDirectory is not None:\n                     # If we don\'t have a rules file, use the template\n-                    if themeData.rules == u"/++{0:s}++{1:s}/{2:s}".format(\n+                    if themeData.rules == "/++{:s}++{:s}/{:s}".format(\n                         THEME_RESOURCE_NAME,\n                         themeData.__name__,\n                         RULE_FILENAME,\n@@ -315,10 +314,10 @@ def update(self):\n                         if not themeDirectory.isFile(DEFAULT_THEME_FILENAME):\n                             IStatusMessage(self.request).add(\n                                 _(\n-                                    u"A boilerplate rules.xml was added to "\n-                                    u"your theme, but no index.html file "\n-                                    u"found. Update rules.xml to reference "\n-                                    u"the current theme file."\n+                                    "A boilerplate rules.xml was added to "\n+                                    "your theme, but no index.html file "\n+                                    "found. Update rules.xml to reference "\n+                                    "the current theme file."\n                                 ),\n                                 \'warning\',\n                             )\n@@ -339,14 +338,14 @@ def update(self):\n \n             if not self.errors:\n                 self.redirect(\n-                    "{0}/@@theming-controlpanel".format(\n+                    "{}/@@theming-controlpanel".format(\n                         self.site_url,\n                     )\n                 )\n                 return False\n             else:\n                 IStatusMessage(self.request).add(\n-                    _(u"There were errors"),\n+                    _("There were errors"),\n                     "error"\n                 )\n \n@@ -362,7 +361,7 @@ def update(self):\n             for theme in toDelete:\n                 del themeDirectory[theme]\n \n-            IStatusMessage(self.request).add(_(u"Theme deleted"), \'info\')\n+            IStatusMessage(self.request).add(_("Theme deleted"), \'info\')\n \n             self._setup()\n             return True\n@@ -417,7 +416,7 @@ def themeList(self):\n \n             previewUrl = "++resource++plone.app.theming/defaultPreview.png"\n             if theme.preview:\n-                previewUrl = "++theme++{0:s}/{1:s}".format(\n+                previewUrl = "++theme++{:s}/{:s}".format(\n                     theme.__name__,\n                     theme.preview,\n                 )\n@@ -428,7 +427,7 @@ def themeList(self):\n                 \'description\': theme.description,\n                 \'override\': override,\n                 \'editable\': theme.__name__ in zodbNames,\n-                \'preview\': "{0}/{1}".format(self.site_url, previewUrl),\n+                \'preview\': "{}/{}".format(self.site_url, previewUrl),\n                 \'selected\': theme.__name__ == self.selectedTheme,\n             }\n             if theme.__name__ == self.selectedTheme:\n@@ -446,7 +445,7 @@ def themeList(self):\n \n     def redirectToFieldset(self, fieldset):\n         self.redirect(\n-            "{0}/{1}#fieldsetlegend-{2}".format(\n+            "{}/{}#fieldsetlegend-{}".format(\n                 self.site_url,\n                 self.__name__,\n                 fieldset\ndiff --git a/src/plone/app/theming/browser/custom_css.py b/src/plone/app/theming/browser/custom_css.py\nindex fae71653..1e99dc1b 100644\n--- a/src/plone/app/theming/browser/custom_css.py\n+++ b/src/plone/app/theming/browser/custom_css.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.theming.interfaces import IThemeSettings\n from plone.registry.interfaces import IRegistry\n from Products.Five.browser import BrowserView\ndiff --git a/src/plone/app/theming/browser/help.py b/src/plone/app/theming/browser/help.py\nindex 713557ac..b2ffbb08 100644\n--- a/src/plone/app/theming/browser/help.py\n+++ b/src/plone/app/theming/browser/help.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.publisher.browser import BrowserView\n \n import docutils.core\n@@ -17,4 +16,4 @@ def __call__(self):\n             writer_name=\'html\'\n         )\n         html = parts[\'body_pre_docinfo\'] + parts[\'fragment\']\n-        return """<div class="content">{0:s}</div>""".format(html)\n+        return """<div class="content">{:s}</div>""".format(html)\ndiff --git a/src/plone/app/theming/browser/themefile.py b/src/plone/app/theming/browser/themefile.py\nindex 5ef3d5d0..ac1f6a62 100644\n--- a/src/plone/app/theming/browser/themefile.py\n+++ b/src/plone/app/theming/browser/themefile.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.resource.directory import PersistentResourceDirectory\n from Products.Five.browser import BrowserView\n \ndiff --git a/src/plone/app/theming/events.py b/src/plone/app/theming/events.py\nindex 6cee90cd..27d09b42 100644\n--- a/src/plone/app/theming/events.py\n+++ b/src/plone/app/theming/events.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.app.theming.interfaces import IThemeAppliedEvent\n from zope.interface import implementer\n \n \n @implementer(IThemeAppliedEvent)\n-class ThemeAppliedEvent(object):\n+class ThemeAppliedEvent:\n \n     def __init__(self, theme):\n         self.theme = theme\ndiff --git a/src/plone/app/theming/exportimport/handler.py b/src/plone/app/theming/exportimport/handler.py\nindex 83f8b2f3..26eca2e8 100644\n--- a/src/plone/app/theming/exportimport/handler.py\n+++ b/src/plone/app/theming/exportimport/handler.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from lxml import etree\n from plone.app.theming.interfaces import IThemeSettings\n from plone.app.theming.utils import applyTheme\n@@ -33,10 +32,10 @@ def importTheme(context):\n                 break\n \n         if themeInfo is None:\n-            raise ValueError("Theme {0:s} is not available".format(themeName))\n+            raise ValueError("Theme {:s} is not available".format(themeName))\n \n         applyTheme(themeInfo)\n-        logger.info(\'Theme {0:s} applied\'.format(themeName))\n+        logger.info(\'Theme {:s} applied\'.format(themeName))\n \n     # enable/disable theme\n     themeEnabled = tree.find("enabled")\n@@ -54,5 +53,5 @@ def importTheme(context):\n         logger.info(\'Theme disabled\')\n     else:\n         raise ValueError(\n-            "{0:s} is not a valid value for <enabled />".format(themeEnabled)\n+            "{:s} is not a valid value for <enabled />".format(themeEnabled)\n         )\ndiff --git a/src/plone/app/theming/header.py b/src/plone/app/theming/header.py\nindex 35ba2c93..edd4fd9e 100644\n--- a/src/plone/app/theming/header.py\n+++ b/src/plone/app/theming/header.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.theming.utils import isThemeEnabled\n \n \ndiff --git a/src/plone/app/theming/interfaces.py b/src/plone/app/theming/interfaces.py\nindex 44a8fd50..7a95ac2b 100644\n--- a/src/plone/app/theming/interfaces.py\n+++ b/src/plone/app/theming/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from datetime import datetime\n from plone.resource.manifest import ManifestFormat\n from zope import schema\n@@ -7,7 +6,7 @@\n from zope.interface import Interface\n \n \n-_ = MessageFactory(u"plone")\n+_ = MessageFactory("plone")\n \n THEME_RESOURCE_NAME = \'theme\'\n RULE_FILENAME = \'rules.xml\'\n@@ -35,43 +34,43 @@ class ITheme(Interface):\n     """\n \n     __name__ = schema.TextLine(\n-        title=_(u"Name"),\n+        title=_("Name"),\n     )\n \n     rules = schema.TextLine(\n-        title=_(u"Path to rules"),\n+        title=_("Path to rules"),\n     )\n \n     title = schema.TextLine(\n-        title=_(u"Title"),\n+        title=_("Title"),\n         required=False,\n     )\n \n     description = schema.TextLine(\n-        title=_(u"Description"),\n+        title=_("Description"),\n         required=False,\n     )\n \n     absolutePrefix = schema.TextLine(\n-        title=_(u"Absolute prefix"),\n+        title=_("Absolute prefix"),\n         required=False,\n     )\n \n     parameterExpressions = schema.Dict(\n-        title=_(u"Parameter expressions"),\n+        title=_("Parameter expressions"),\n         key_type=schema.TextLine(),\n         value_type=schema.TextLine(),\n         required=False,\n     )\n \n     doctype = schema.ASCIILine(\n-        title=_(u"Doctype"),\n+        title=_("Doctype"),\n         required=False,\n         default="",\n     )\n \n     preview = schema.ASCIILine(\n-        title=_(u"Preview image"),\n+        title=_("Preview image"),\n         required=False,\n     )\n \n@@ -81,65 +80,65 @@ class IThemeSettings(Interface):\n     """\n \n     enabled = schema.Bool(\n-        title=_(\'enabled\', u"Enabled"),\n+        title=_(\'enabled\', "Enabled"),\n         description=_(\n             \'enable_theme_globally\',\n-            u"Use this option to enable or disable the theme globally. "\n-            u"Note that the options will also affect whether the theme "\n-            u"is used when this option is enabled."\n+            "Use this option to enable or disable the theme globally. "\n+            "Note that the options will also affect whether the theme "\n+            "is used when this option is enabled."\n         ),\n         required=True,\n         default=False,\n     )\n \n     currentTheme = schema.TextLine(\n-        title=_(\'current_theme\', u"Current theme"),\n+        title=_(\'current_theme\', "Current theme"),\n         description=_(\n             \'current_theme_description\',\n-            u"The name of the current theme, i.e. the one applied most "\n-            u"recently."),\n+            "The name of the current theme, i.e. the one applied most "\n+            "recently."),\n         required=True,\n     )\n \n     rules = schema.TextLine(\n-        title=_(\'rules_file\', u"Rules file"),\n+        title=_(\'rules_file\', "Rules file"),\n         description=_(\n             \'rules_file_path\',\n-            u"File path to the rules file"\n+            "File path to the rules file"\n         ),\n         required=False,\n     )\n \n     absolutePrefix = schema.TextLine(\n-        title=_(\'absolute_url_prefix\', u"Absolute URL prefix"),\n+        title=_(\'absolute_url_prefix\', "Absolute URL prefix"),\n         description=_(\n             \'convert_relative_url\',\n-            u"Convert relative URLs in the theme file to absolute paths "\n-            u"using this prefix."\n+            "Convert relative URLs in the theme file to absolute paths "\n+            "using this prefix."\n         ),\n         required=False,\n     )\n \n     readNetwork = schema.Bool(\n-        title=_(\'readNetwork\', u"Read network"),\n+        title=_(\'readNetwork\', "Read network"),\n         description=_(\n             \'network_urls_allowed\',\n-            u"If enabled, network (http, https) urls are allowed in "\n-            u"the rules file and this config."\n+            "If enabled, network (http, https) urls are allowed in "\n+            "the rules file and this config."\n         ),\n         required=True,\n         default=False,\n     )\n \n     hostnameBlacklist = schema.List(\n-        title=_(\'hostname_blacklist\', u"Unthemed host names"),\n+        title=_(\'hostname_blacklist\', "Unthemed host names"),\n         description=_(\n             \'hostname_blacklist_description\',\n-            u"If there are hostnames that you do not want to be themed, you "\n-            u"can list them here. This is useful during theme development, "\n-            u"so that you can compare the themed and unthemed sites. In some "\n-            u"cases, you may also want to provided an unthemed host alias for "\n-            u"content administrators to be able to use \'plain\' Plone."\n+            "If there are hostnames that you do not want to be themed, you "\n+            "can list them here. This is useful during theme development, "\n+            "so that you can compare the themed and unthemed sites. In some "\n+            "cases, you may also want to provided an unthemed host alias for "\n+            "content administrators to be able to use \'plain\' Plone."\n         ),\n         value_type=schema.TextLine(),\n         required=False,\n@@ -147,15 +146,15 @@ class IThemeSettings(Interface):\n     )\n \n     parameterExpressions = schema.Dict(\n-        title=_(\'parameter_expressions\', u"Parameter expressions"),\n+        title=_(\'parameter_expressions\', "Parameter expressions"),\n         description=_(\n             \'parameter_expressions_description\',\n-            u"You can define parameters here, which will be passed to the "\n-            u"compiled theme. In your rules file, you can refer to a "\n-            u"parameter by $name. Parameters are defined using TALES "\n-            u"expressions, which should evaluate to a string, a number, a "\n-            u"boolean or None. Available variables are `context`, `request`, "\n-            u"`portal`, `portal_state`,  and `context_state`."\n+            "You can define parameters here, which will be passed to the "\n+            "compiled theme. In your rules file, you can refer to a "\n+            "parameter by $name. Parameters are defined using TALES "\n+            "expressions, which should evaluate to a string, a number, a "\n+            "boolean or None. Available variables are `context`, `request`, "\n+            "`portal`, `portal_state`,  and `context_state`."\n         ),\n         key_type=schema.ASCIILine(),\n         value_type=schema.ASCIILine(),\n@@ -164,12 +163,12 @@ class IThemeSettings(Interface):\n     )\n \n     doctype = schema.ASCIILine(\n-        title=_(\'doctype\', u"Doctype"),\n+        title=_(\'doctype\', "Doctype"),\n         description=_(\n             \'doctype_description\',\n-            u\'You can specify a Doctype string which will be set on the \'\n-            u\'for example "<!DOCTYPE html>". If left blank the default XHTML \'\n-            u\'1.0 transitional Doctype or that set in the Diazo theme is used.\'\n+            \'You can specify a Doctype string which will be set on the \'\n+            \'for example "<!DOCTYPE html>". If left blank the default XHTML \'\n+            \'1.0 transitional Doctype or that set in the Diazo theme is used.\'\n         ),\n         required=False,\n         default="",\n@@ -178,29 +177,29 @@ class IThemeSettings(Interface):\n     custom_css = schema.SourceText(\n         title=_(\n             \'label_custom_css\',\n-            u\'Custom CSS\',\n+            \'Custom CSS\',\n         ),\n         description=_(\n             \'help_custom_css\',\n-            u\'Define your own custom CSS in the field below. This is a good \'\n-            u\'place for quick customizations of things like colors and the \'\n-            u\'toolbar. Definitions here will override previously defined CSS \'\n-            u\'of Plone. Please use this only for small customizations, as it \'\n-            u\'is hard to keep track of changes here. For bigger changes you most \'\n-            u\'likely want to customize a full theme and make your changes \'\n-            u\'there.\',\n+            \'Define your own custom CSS in the field below. This is a good \'\n+            \'place for quick customizations of things like colors and the \'\n+            \'toolbar. Definitions here will override previously defined CSS \'\n+            \'of Plone. Please use this only for small customizations, as it \'\n+            \'is hard to keep track of changes here. For bigger changes you most \'\n+            \'likely want to customize a full theme and make your changes \'\n+            \'there.\',\n         ),\n-        default=u"",\n+        default="",\n         required=False,\n     )\n \n     custom_css_timestamp = schema.Datetime(\n         title=_(\n-            u\'Custom CSS Timestamp\',\n+            \'Custom CSS Timestamp\',\n         ),\n         description=_(\n-            u\'Time stamp when the custom CSS was changed. \'\n-            u\'Used to generate custom.css with timestamp in URL.\',\n+            \'Time stamp when the custom CSS was changed. \'\n+            \'Used to generate custom.css with timestamp in URL.\',\n         ),\n         defaultFactory=get_default_custom_css_timestamp,\n         required=False,\n@@ -233,8 +232,8 @@ class IThemePlugin(Interface):\n     """\n \n     dependencies = schema.Tuple(\n-        title=_(u"Dependencies"),\n-        description=_(u"Plugins on which this plugin depends"),\n+        title=_("Dependencies"),\n+        description=_("Plugins on which this plugin depends"),\n         value_type=schema.ASCIILine(),\n     )\n \ndiff --git a/src/plone/app/theming/plugins/__init__.py b/src/plone/app/theming/plugins/__init__.py\nindex 68c04af4..de40ea7c 100644\n--- a/src/plone/app/theming/plugins/__init__.py\n+++ b/src/plone/app/theming/plugins/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/src/plone/app/theming/plugins/hooks.py b/src/plone/app/theming/plugins/hooks.py\nindex 2744e43f..46c81fc9 100644\n--- a/src/plone/app/theming/plugins/hooks.py\n+++ b/src/plone/app/theming/plugins/hooks.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.theming.interfaces import THEME_RESOURCE_NAME\n from plone.app.theming.plugins.utils import getPlugins\n from plone.app.theming.plugins.utils import getPluginSettings\ndiff --git a/src/plone/app/theming/plugins/utils.py b/src/plone/app/theming/plugins/utils.py\nindex 2fa3d265..3a794f76 100644\n--- a/src/plone/app/theming/plugins/utils.py\n+++ b/src/plone/app/theming/plugins/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.theming.interfaces import IThemePlugin\n from plone.app.theming.interfaces import THEME_RESOURCE_NAME\n from plone.memoize.ram import cache\n@@ -52,7 +51,7 @@ def sortDependencies(plugins):\n \n     if waiting:\n         raise ValueError(\n-            "Could not resolve dependencies for: {0:s}".format(waiting)\n+            "Could not resolve dependencies for: {:s}".format(waiting)\n         )\n \n \n@@ -86,14 +85,7 @@ def getPluginSettings(themeDirectory, plugins=None):\n         parser = SafeConfigParser()\n         fp = themeDirectory.openFile(MANIFEST_FILENAME)\n         try:\n-            if six.PY2:\n-                if hasattr(parser, "read_file"):\n-                    # backports.configparser\n-                    parser.read_file(fp)\n-                else:\n-                    parser.readfp(fp)\n-            else:\n-                parser.read_string(fp.read().decode())\n+            parser.read_string(fp.read().decode())\n             for section in parser.sections():\n                 manifestContents[section] = {}\n                 for name, value in parser.items(section):\n@@ -107,7 +99,7 @@ def getPluginSettings(themeDirectory, plugins=None):\n     pluginSettings = {}\n     for name, plugin in plugins:\n         pluginSettings[name] = manifestContents.get(\n-            "{0:s}:{1:s}".format(THEME_RESOURCE_NAME, name),\n+            "{:s}:{:s}".format(THEME_RESOURCE_NAME, name),\n             {}\n         )\n     return pluginSettings\ndiff --git a/src/plone/app/theming/policy.py b/src/plone/app/theming/policy.py\nindex 37c983bd..7c411bc7 100644\n--- a/src/plone/app/theming/policy.py\n+++ b/src/plone/app/theming/policy.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from App.config import getConfiguration\n from logging import getLogger\n from plone.app.theming import utils\n@@ -24,7 +23,7 @@ def invalidateCache(settings, event):\n \n \n @implementer(IThemingPolicy)\n-class ThemingPolicy(object):\n+class ThemingPolicy:\n \n     def __init__(self, request):\n         """Adapt IRequest.\n@@ -115,7 +114,7 @@ def getCache(self, theme=None):\n     def getCacheKey(self, theme=None):\n         if not theme:\n             theme = self.getCurrentTheme()\n-        key = "%s::%s" % (getSite().absolute_url(), theme)\n+        key = "{}::{}".format(getSite().absolute_url(), theme)\n         return key\n \n     def getCacheStorage(self):\n@@ -176,7 +175,7 @@ def set_theme(self, themeName, themeObj):\n         cache.updateTheme(themeObj)\n \n \n-class ThemeCache(object):\n+class ThemeCache:\n     """Simple cache for the transform and theme\n     """\n \ndiff --git a/src/plone/app/theming/testing.py b/src/plone/app/theming/testing.py\nindex ef1fb6fd..9b230cff 100644\n--- a/src/plone/app/theming/testing.py\n+++ b/src/plone/app/theming/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import applyProfile\n from plone.app.testing import PloneSandboxLayer\ndiff --git a/src/plone/app/theming/tests/test_controlpanel.py b/src/plone/app/theming/tests/test_controlpanel.py\nindex ce0f5a41..04eea577 100644\n--- a/src/plone/app/theming/tests/test_controlpanel.py\n+++ b/src/plone/app/theming/tests/test_controlpanel.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\ndiff --git a/src/plone/app/theming/tests/test_exportimport.py b/src/plone/app/theming/tests/test_exportimport.py\nindex d0a93bd5..10ee8bb3 100644\n--- a/src/plone/app/theming/tests/test_exportimport.py\n+++ b/src/plone/app/theming/tests/test_exportimport.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.theming.testing import THEMING_INTEGRATION_TESTING\n \n import unittest\n@@ -16,7 +15,7 @@ def test_import_filesystem(self):\n         from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.exportimport.handler import importTheme\n \n-        class FauxContext(object):\n+        class FauxContext:\n \n             def getLogger(self, name):\n                 import logging\n@@ -51,7 +50,7 @@ def test_import_no_file(self):\n         from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.exportimport.handler import importTheme\n \n-        class FauxContext(object):\n+        class FauxContext:\n \n             def getLogger(self, name):\n                 import logging\n@@ -76,7 +75,7 @@ def readDataFile(self, name):\n     def test_import_not_found(self):\n         from plone.app.theming.exportimport.handler import importTheme\n \n-        class FauxContext(object):\n+        class FauxContext:\n \n             def getLogger(self, name):\n                 import logging\n@@ -96,7 +95,7 @@ def test_import_enable(self):\n         from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.exportimport.handler import importTheme\n \n-        class FauxContext(object):\n+        class FauxContext:\n \n             def getLogger(self, name):\n                 import logging\n@@ -121,7 +120,7 @@ def test_import_disable(self):\n         from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.exportimport.handler import importTheme\n \n-        class FauxContext(object):\n+        class FauxContext:\n \n             def getLogger(self, name):\n                 import logging\ndiff --git a/src/plone/app/theming/tests/test_policy.py b/src/plone/app/theming/tests/test_policy.py\nindex a3d79830..324b3baf 100644\n--- a/src/plone/app/theming/tests/test_policy.py\n+++ b/src/plone/app/theming/tests/test_policy.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING\n from plone.app.theming.utils import theming_policy\n from plone.registry.interfaces import IRegistry\n@@ -31,15 +30,15 @@ def test_getSettings(self):\n         policy = theming_policy(request)\n         settings = policy.getSettings()\n         self.assertEqual(settings.currentTheme,\n-                         u\'barceloneta\')\n+                         \'barceloneta\')\n         self.assertEqual(settings.rules,\n-                         u\'/++theme++barceloneta/rules.xml\')\n+                         \'/++theme++barceloneta/rules.xml\')\n \n     def test_getCurrentTheme(self):\n         request = self.layer[\'request\']\n         policy = theming_policy(request)\n         self.assertEqual(policy.getCurrentTheme(),\n-                         u\'barceloneta\')\n+                         \'barceloneta\')\n \n     def test_isThemeEnabled(self):\n         request = self.layer[\'request\']\n@@ -65,7 +64,7 @@ def test_getCacheKey(self):\n         request = self.layer[\'request\']\n         policy = theming_policy(request)\n         self.assertEqual(policy.getCacheKey(),\n-                         u\'http://nohost/plone::barceloneta\')\n+                         \'http://nohost/plone::barceloneta\')\n \n     def test_getCacheStorage(self):\n         request = self.layer[\'request\']\n@@ -75,7 +74,7 @@ def test_getCacheStorage(self):\n         storage = policy.getCacheStorage()\n         self.assertEqual(\n             [(k, v) for (k, v) in storage.items() if k != \'mtime\'],\n-            [(u\'http://nohost/plone::barceloneta\', cache)])\n+            [(\'http://nohost/plone::barceloneta\', cache)])\n \n     def test_caching(self):\n         """roundtrip"""\n@@ -86,9 +85,9 @@ def test_caching(self):\n         storage = policy.getCacheStorage()\n         self.assertEqual(\n             [(k, v) for (k, v) in storage.items() if k != \'mtime\'],\n-            [(u\'http://nohost/plone::barceloneta\', cache)])\n+            [(\'http://nohost/plone::barceloneta\', cache)])\n         self.assertEqual(cache.themeObj, theme)\n-        policy.set_theme(u\'barceloneta\', \'faketheme\')\n+        policy.set_theme(\'barceloneta\', \'faketheme\')\n         self.assertEqual(policy.get_theme(), \'faketheme\')\n         policy.invalidateCache()\n         self.assertEqual(list(policy.getCacheStorage().keys()), [\'mtime\'])\n@@ -104,7 +103,7 @@ def test_invalidateCache_locally(self):\n         storage = policy.getCacheStorage()\n         self.assertEqual(\n             [(k, v) for (k, v) in storage.items() if k != \'mtime\'],\n-            [(u\'http://nohost/plone::barceloneta\', cache)])\n+            [(\'http://nohost/plone::barceloneta\', cache)])\n         shared_mtime_1 = policy._get_shared_invalidation()\n         policy.invalidateCache()\n         shared_mtime_2 = policy._get_shared_invalidation()\n@@ -118,7 +117,7 @@ def test_invalidateCache_threaded(self):\n         storage = policy.getCacheStorage()\n         self.assertEqual(\n             [(k, v) for (k, v) in storage.items() if k != \'mtime\'],\n-            [(u\'http://nohost/plone::barceloneta\', cache)])\n+            [(\'http://nohost/plone::barceloneta\', cache)])\n         shared_mtime_1 = policy._get_shared_invalidation()\n \n         def invalidate(registry):\ndiff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py\nindex aafd71bf..33ba3f84 100644\n--- a/src/plone/app/theming/tests/test_transform.py\n+++ b/src/plone/app/theming/tests/test_transform.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from App.config import getConfiguration\n from diazo.compiler import compile_theme\n from lxml import etree\n@@ -18,7 +17,7 @@\n from Products.CMFCore.Expression import Expression\n from Products.CMFCore.Expression import getExprContext\n from Products.CMFCore.utils import getToolByName\n-from six.moves.urllib.error import HTTPError\n+from urllib.error import HTTPError\n from zope.component import getUtility\n \n import os.path\n@@ -39,7 +38,7 @@ def setUp(self):\n         self.settings = getUtility(IRegistry).forInterface(IThemeSettings)\n \n         self.settings.enabled = False\n-        self.settings.rules = u\'python://plone.app.theming/tests/rules.xml\'\n+        self.settings.rules = \'python://plone.app.theming/tests/rules.xml\'\n         self.settings.parameterExpressions = {\n             \'stringParam\': \'string:string param value\',\n             \'boolParam\': \'python:False\',\n@@ -130,15 +129,15 @@ def test_theme_enabled_resource_directory(self):\n         applyTheme(theme)\n         self.assertEqual(\n             self.settings.rules,\n-            u\'/++theme++plone.app.theming.tests/rules.xml\'\n+            \'/++theme++plone.app.theming.tests/rules.xml\'\n         )\n         self.assertEqual(\n             self.settings.currentTheme,\n-            u"plone.app.theming.tests"\n+            "plone.app.theming.tests"\n         )\n         self.assertEqual(\n             self.settings.doctype,\n-            u"<!DOCTYPE html>"\n+            "<!DOCTYPE html>"\n         )\n         transaction.commit()\n \n@@ -155,7 +154,7 @@ def test_theme_enabled_resource_directory(self):\n         self.assertTrue("This is the theme" in browser.contents)\n \n         # Doctype\n-        self.assertTrue(re.match("<!DOCTYPE html>\\s+<html", browser.contents))\n+        self.assertTrue(re.match(r"<!DOCTYPE html>\\s+<html", browser.contents))\n \n     def test_theme_enabled_query_string_off_switch(self):\n         app = self.layer[\'app\']\n@@ -217,9 +216,9 @@ def test_python_resolver(self):\n         parser = etree.HTMLParser()\n         parser.resolvers.add(PythonResolver())\n         theme = resolvePythonURL(\n-            u\'python://plone.app.theming.tests/theme.html\'\n+            \'python://plone.app.theming.tests/theme.html\'\n         )\n-        rules = resolvePythonURL(u\'python://plone.app.theming/tests/rules.xml\')\n+        rules = resolvePythonURL(\'python://plone.app.theming/tests/rules.xml\')\n         compile_theme(rules, theme, parser=parser)\n \n     def test_theme_stored_in_plone_site(self):\n@@ -234,7 +233,7 @@ def test_theme_stored_in_plone_site(self):\n             portal.manage_addDTMLMethod(\'theme.html\', file=theme_contents)\n \n         # These paths should be relative to the Plone site root\n-        self.settings.rules = u\'/rules.xml\'\n+        self.settings.rules = \'/rules.xml\'\n         self.settings.enabled = True\n \n         transaction.commit()\n@@ -263,7 +262,7 @@ def test_theme_stored_in_plone_site_works_with_virtual_host(self):\n             portal.manage_addDTMLMethod(\'theme.html\', file=theme_contents)\n \n         # These paths should be relative to the Plone site root\n-        self.settings.rules = u\'/rules.xml\'\n+        self.settings.rules = \'/rules.xml\'\n         self.settings.enabled = True\n \n         from Products.SiteAccess import VirtualHostMonster\n@@ -276,7 +275,7 @@ def test_theme_stored_in_plone_site_works_with_virtual_host(self):\n         suffix = portalURL.split(\'/\')[-1]\n \n         vhostURL = (\n-            "{0:s}/VirtualHostBase/http/example.org:80/{1:s}/VirtualHostRoot"\n+            "{:s}/VirtualHostBase/http/example.org:80/{:s}/VirtualHostRoot"\n             "/_vh_fizz/_vh_buzz/_vh_fizzbuzz/".format(prefix, suffix)\n         )\n \n@@ -311,7 +310,7 @@ def test_absolutePrefix_enabled_uri(self):\n         portal = self.layer[\'portal\']\n \n         self.settings.enabled = True\n-        self.settings.absolutePrefix = u\'http://example.com\'\n+        self.settings.absolutePrefix = \'http://example.com\'\n \n         transaction.commit()\n \n@@ -328,7 +327,7 @@ def test_absolutePrefix_enabled_path(self):\n         portal = self.layer[\'portal\']\n \n         self.settings.enabled = True\n-        self.settings.absolutePrefix = u\'/foo\'\n+        self.settings.absolutePrefix = \'/foo\'\n \n         transaction.commit()\n \n@@ -350,14 +349,14 @@ def test_absolutePrefix_enabled_path_vhosting(self):\n         transaction.commit()\n \n         self.settings.enabled = True\n-        self.settings.absolutePrefix = u\'/foo\'\n+        self.settings.absolutePrefix = \'/foo\'\n \n         portalURL = portal.absolute_url()\n         prefix = \'/\'.join(portalURL.split(\'/\')[:-1])\n         suffix = portalURL.split(\'/\')[-1]\n \n         vhostURL = (\n-            "{0:s}/VirtualHostBase/http/example.org:80/{1:s}/VirtualHostRoot"\n+            "{:s}/VirtualHostBase/http/example.org:80/{:s}/VirtualHostRoot"\n             "/_vh_fizz/_vh_buzz/_vh_fizzbuzz/".format(prefix, suffix)\n         )\n \n@@ -377,7 +376,7 @@ def test_theme_installed_invalid_config(self):\n         portal = self.layer[\'portal\']\n \n         self.settings.enabled = True\n-        self.settings.rules = u"invalid"\n+        self.settings.rules = "invalid"\n \n         transaction.commit()\n \n@@ -529,7 +528,7 @@ def test_theme_different_path(self):\n         portal = self.layer[\'portal\']\n \n         setRoles(portal, TEST_USER_ID, (\'Manager\',))\n-        portal.invokeFactory(\'Folder\', \'news\', title=u"News")\n+        portal.invokeFactory(\'Folder\', \'news\', title="News")\n         wftool = getToolByName(portal, "portal_workflow")\n         wftool.doActionFor(portal.news, action=\'publish\')\n         setRoles(portal, TEST_USER_ID, (\'Member\',))\n@@ -566,7 +565,7 @@ def test_theme_params(self):\n         portal = self.layer[\'portal\']\n \n         self.settings.enabled = True\n-        self.settings.rules = u\'python://plone.app.theming/tests/paramrules.xml\'  # noqa\n+        self.settings.rules = \'python://plone.app.theming/tests/paramrules.xml\'  # noqa\n         self.settings.parameterExpressions = {\n             \'stringParam\': \'string:string param value\',\n             \'boolParam\': \'python:False\',\n@@ -623,7 +622,7 @@ def test_theme_for_404(self):\n         browser.addHeader(\'Accept\', \'text/html\')\n         error = None\n         try:\n-            browser.open(\'{0:s}/404_page\'.format(portal.absolute_url()))\n+            browser.open(\'{:s}/404_page\'.format(portal.absolute_url()))\n         except HTTPError as e:\n             error = e\n         self.assertEqual(error.code, 404)\n@@ -636,7 +635,7 @@ def test_theme_params_on_404(self):\n         portal = self.layer[\'portal\']\n \n         self.settings.enabled = True\n-        self.settings.rules = u\'python://plone.app.theming/tests/paramrules.xml\'  # noqa\n+        self.settings.rules = \'python://plone.app.theming/tests/paramrules.xml\'  # noqa\n         self.settings.parameterExpressions = {\n             \'stringParam\': \'string:string param value\',\n             \'boolParam\': \'python:False\',\n@@ -650,7 +649,7 @@ def test_theme_params_on_404(self):\n         browser.addHeader(\'Accept\', \'text/html\')\n         error = None\n         try:\n-            browser.open(\'{0:s}/404_page\'.format(portal.absolute_url()))\n+            browser.open(\'{:s}/404_page\'.format(portal.absolute_url()))\n         except HTTPError as e:\n             error = e\n         self.assertEqual(error.code, 404)\n@@ -699,7 +698,7 @@ def test_navroot_params_on_404_widget_in_path(self):\n         error = None\n         try:\n             browser.open(\n-                \'{0:s}/widget/oauth_login/info.txt\'.format(\n+                \'{:s}/widget/oauth_login/info.txt\'.format(\n                     portal[\'subfolder\'].absolute_url()\n                 )\n             )\n@@ -783,7 +782,7 @@ def test_includes(self):\n             portal[\'subfolder\'].manage_addDTMLMethod(\'alpha\', file=two)\n \n         # Set up transformation\n-        self.settings.rules = u\'python://plone.app.theming/tests/includes.xml\'\n+        self.settings.rules = \'python://plone.app.theming/tests/includes.xml\'\n         self.settings.enabled = True\n \n         transaction.commit()\n@@ -824,7 +823,7 @@ def test_include_non_ascii(self):\n             portal.manage_addDTMLMethod(\'french\', file=french)\n \n         # Set up transformation\n-        self.settings.rules = u\'python://plone.app.theming/tests/nonascii.xml\'\n+        self.settings.rules = \'python://plone.app.theming/tests/nonascii.xml\'\n         self.settings.enabled = True\n \n         transaction.commit()\n@@ -837,10 +836,7 @@ def test_include_non_ascii(self):\n \n         browser.open(portal.absolute_url())\n         # browser.contents is always string.  On Py 2 this means bytes, on Py 3 text.\n-        if six.PY2:\n-            self.assertIn(b\'<div id="content">Actualit\\xc3\\xa9s</div>\', browser.contents)\n-        else:\n-            self.assertIn(u\'<div id="content">Actualit\\xe9s</div>\', browser.contents)\n+        self.assertIn(\'<div id="content">Actualit\\xe9s</div>\', browser.contents)\n \n     def test_css_js_includes(self):\n \n@@ -848,7 +844,7 @@ def test_css_js_includes(self):\n         portal = self.layer[\'portal\']\n \n         self.settings.enabled = True\n-        self.settings.rules = u\'/++theme++plone.app.theming.tests/css-js.xml\'\n+        self.settings.rules = \'/++theme++plone.app.theming.tests/css-js.xml\'\n         transaction.commit()\n \n         browser = Browser(app)\n@@ -870,17 +866,14 @@ def test_non_ascii_includes(self):\n         portal = self.layer[\'portal\']\n \n         self.settings.enabled = True\n-        self.settings.rules = u\'/++theme++plone.app.theming.tests/nonascii.xml\'\n+        self.settings.rules = \'/++theme++plone.app.theming.tests/nonascii.xml\'\n         transaction.commit()\n \n         browser = Browser(app)\n         browser.open(portal.absolute_url())\n \n         # browser.contents is always string.  On Py 2 this means bytes, on Py 3 text.\n-        if six.PY2:\n-            self.assertIn(b\'<div>N\\xc3\\xbamero uno</div>\', browser.contents)\n-        else:\n-            self.assertIn(u\'<div>N\\xfamero uno</div>\', browser.contents)\n+        self.assertIn(\'<div>N\\xfamero uno</div>\', browser.contents)\n \n \n     def test_theme_enabled_query_string_debug_switch(self):\ndiff --git a/src/plone/app/theming/tests/test_utils.py b/src/plone/app/theming/tests/test_utils.py\nindex 2924f7a0..740c08ff 100644\n--- a/src/plone/app/theming/tests/test_utils.py\n+++ b/src/plone/app/theming/tests/test_utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING\n from plone.app.theming.testing import THEMING_INTEGRATION_TESTING\n from plone.app.theming.utils import applyTheme\n@@ -27,7 +26,7 @@\n </rules>\n """\n # The theme will contain a message:\n-MESSAGE = u"Hello from a temporary directory."\n+MESSAGE = "Hello from a temporary directory."\n # We have a sample theme file here:\n HERE = os.path.dirname(__file__)\n PACKAGE_THEME_FILENAME = "package_theme.txt"\n@@ -145,8 +144,8 @@ def test_applyTheme_None(self):\n \n         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\n \n-        settings.rules = u"/++theme++foo/rules.xml"\n-        settings.absolutePrefix = u"/++theme++foo"\n+        settings.rules = "/++theme++foo/rules.xml"\n+        settings.absolutePrefix = "/++theme++foo"\n         settings.parameterExpressions = {}\n \n         applyTheme(None)\n@@ -165,7 +164,7 @@ def test_isThemeEnabled(self):\n \n         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\n         settings.enabled = True\n-        settings.rules = u"/++theme++foo/rules.xml"\n+        settings.rules = "/++theme++foo/rules.xml"\n \n         request = self.layer[\'request\']\n \n@@ -181,7 +180,7 @@ def test_isThemeEnabled_blacklist(self):\n \n         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\n         settings.enabled = True\n-        settings.rules = u"/++theme++foo/rules.xml"\n+        settings.rules = "/++theme++foo/rules.xml"\n \n         request = self.layer[\'request\']\n         request.set(\'BASE1\', \'http://nohost/path/to/site\')\n@@ -207,11 +206,11 @@ def test_createThemeFromTemplate(self):\n         self.assertTrue(title in titles)\n \n         theme = getTheme(themeName)\n-        expected_prefix = u"/++%s++%s" % (THEME_RESOURCE_NAME,\n+        expected_prefix = "/++{}++{}".format(THEME_RESOURCE_NAME,\n                                           title.replace(" ", "-"))\n         self.assertEqual(theme.absolutePrefix, expected_prefix)\n \n-        expected_rules = u"/++%s++%s/%s" % (THEME_RESOURCE_NAME,\n+        expected_rules = "/++{}++{}/{}".format(THEME_RESOURCE_NAME,\n                                             title.replace(" ", "-"),\n                                             RULE_FILENAME)\n         self.assertEqual(theme.rules, expected_rules)\n@@ -230,11 +229,11 @@ def test_createThemeFromTemplate_custom_prefix(self):\n         self.assertTrue(title in titles)\n \n         theme = getTheme(themeName)\n-        expected_prefix = u"/++%s++%s" % (THEME_RESOURCE_NAME,\n+        expected_prefix = "/++{}++{}".format(THEME_RESOURCE_NAME,\n                                           title.replace(" ", "-"))\n         self.assertEqual(theme.absolutePrefix, expected_prefix)\n \n-        expected_rules = u"/++%s++%s/%s" % (THEME_RESOURCE_NAME,\n+        expected_rules = "/++{}++{}/{}".format(THEME_RESOURCE_NAME,\n                                             title.replace(" ", "-"),\n                                             RULE_FILENAME)\n         self.assertEqual(theme.rules, expected_rules)\n@@ -242,14 +241,14 @@ def test_createThemeFromTemplate_custom_prefix(self):\n         self.assertEqual(theme.enabled_bundles, [\'plone\'])\n         self.assertEqual(theme.disabled_bundles, [\'foobar\'])\n \n-        expected_dev_css = u"/++%s++%s/css/barceloneta.css" % (\n+        expected_dev_css = "/++{}++{}/css/barceloneta.css".format(\n             THEME_RESOURCE_NAME, title.replace(" ", "-"))\n-        expected_prod_css = u"/++%s++%s/css/barceloneta.min.css" % (\n+        expected_prod_css = "/++{}++{}/css/barceloneta.min.css".format(\n             THEME_RESOURCE_NAME, title.replace(" ", "-"))\n-        expected_tinymce_content_css = u"/++%s++%s/css/barceloneta.min.css" % (\n+        expected_tinymce_content_css = "/++{}++{}/css/barceloneta.min.css".format(\n             THEME_RESOURCE_NAME, title.replace(" ", "-"))\n         expected_tinymce_styles_css = (\n-            u"/++%s++%s/css/custom-format-styles.css" % (\n+            "/++{}++{}/css/custom-format-styles.css".format(\n                 THEME_RESOURCE_NAME, title.replace(" ", "-"))\n         )\n         self.assertEqual(theme.development_css, expected_dev_css)\n@@ -257,9 +256,9 @@ def test_createThemeFromTemplate_custom_prefix(self):\n         self.assertEqual(theme.tinymce_content_css, expected_tinymce_content_css)\n         self.assertEqual(theme.tinymce_styles_css, expected_tinymce_styles_css)\n \n-        expected_dev_js = u"/++%s++%s/script.js" % (\n+        expected_dev_js = "/++{}++{}/script.js".format(\n             THEME_RESOURCE_NAME, title.replace(" ", "-"))\n-        expected_prod_js = u"/++%s++%s/script.min.js" % (\n+        expected_prod_js = "/++{}++{}/script.min.js".format(\n             THEME_RESOURCE_NAME, title.replace(" ", "-"))\n         self.assertEqual(theme.development_js, expected_dev_js)\n         self.assertEqual(theme.production_js, expected_prod_js)\n@@ -278,11 +277,11 @@ def test_createThemeFromTemplate_rel_path(self):\n         self.assertTrue(title in titles)\n \n         theme = getTheme(themeName)\n-        expected_prefix = u"/++%s++%s" % (THEME_RESOURCE_NAME,\n+        expected_prefix = "/++{}++{}".format(THEME_RESOURCE_NAME,\n                                           title.replace(" ", "-"))\n         self.assertEqual(theme.absolutePrefix, expected_prefix)\n \n-        expected_rules = u"/++%s++%s/%s" % (THEME_RESOURCE_NAME,\n+        expected_rules = "/++{}++{}/{}".format(THEME_RESOURCE_NAME,\n                                            title.replace(" ", "-"),\n                                            RULE_FILENAME)\n         self.assertEqual(theme.rules, expected_rules)\n@@ -290,14 +289,14 @@ def test_createThemeFromTemplate_rel_path(self):\n         self.assertEqual(theme.enabled_bundles, [\'plone\'])\n         self.assertEqual(theme.disabled_bundles, [\'foobar\'])\n \n-        expected_dev_css = u"++%s++%s/css/barceloneta.css" % (\n+        expected_dev_css = "++{}++{}/css/barceloneta.css".format(\n             THEME_RESOURCE_NAME, title.replace(" ", "-"))\n-        expected_prod_css = u"++%s++%s/css/barceloneta.min.css" % (\n+        expected_prod_css = "++{}++{}/css/barceloneta.min.css".format(\n             THEME_RESOURCE_NAME, title.replace(" ", "-"))\n-        expected_tinymce_content_css = u"++%s++%s/css/barceloneta.min.css" % (\n+        expected_tinymce_content_css = "++{}++{}/css/barceloneta.min.css".format(\n             THEME_RESOURCE_NAME, title.replace(" ", "-"))\n         expected_tinymce_styles_css = (\n-            u"++%s++%s/css/custom-format-styles.css" % (\n+            "++{}++{}/css/custom-format-styles.css".format(\n                 THEME_RESOURCE_NAME, title.replace(" ", "-"))\n         )\n         self.assertEqual(theme.development_css, expected_dev_css)\n@@ -305,9 +304,9 @@ def test_createThemeFromTemplate_rel_path(self):\n         self.assertEqual(theme.tinymce_content_css, expected_tinymce_content_css)\n         self.assertEqual(theme.tinymce_styles_css, expected_tinymce_styles_css)\n \n-        expected_dev_js = u"++%s++%s/script.js" % (\n+        expected_dev_js = "++{}++{}/script.js".format(\n             THEME_RESOURCE_NAME, title.replace(" ", "-"))\n-        expected_prod_js = u"++%s++%s/script.min.js" % (\n+        expected_prod_js = "++{}++{}/script.min.js".format(\n             THEME_RESOURCE_NAME, title.replace(" ", "-"))\n         self.assertEqual(theme.development_js, expected_dev_js)\n         self.assertEqual(theme.production_js, expected_prod_js)\n@@ -320,17 +319,17 @@ def test_createThemeFromTemplate_ja_str_title(self):\n             createThemeFromTemplate(title, description,\n                                             baseOn="another-theme")\n         except UnicodeEncodeError:\n-            self.fail(msg=u"Unicode Encode Error")\n+            self.fail(msg="Unicode Encode Error")\n \n     def test_createThemeFromTemplate_ja_unicode_title(self):\n         from plone.app.theming.utils import createThemeFromTemplate\n-        title = u"copy of test theme by \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e"\n-        description = u"test theme by \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e"\n+        title = "copy of test theme by \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e"\n+        description = "test theme by \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e"\n         try:\n             createThemeFromTemplate(title, description,\n                                             baseOn="another-theme")\n         except UnicodeEncodeError:\n-            self.fail(msg=u"Unicode Encode Error")\n+            self.fail(msg="Unicode Encode Error")\n \n \n class TestUnit(unittest.TestCase):\n@@ -348,7 +347,7 @@ def test_extractThemeInfo_default_rules(self):\n             theme = extractThemeInfo(zf)\n \n             self.assertEqual(theme.__name__, \'default_rules\')\n-            self.assertEqual(theme.rules, u\'/++theme++default_rules/rules.xml\')\n+            self.assertEqual(theme.rules, \'/++theme++default_rules/rules.xml\')\n             self.assertEqual(theme.absolutePrefix, \'/++theme++default_rules\')\n \n     def test_extractThemeInfo_manifest_rules(self):\n@@ -371,7 +370,7 @@ def test_extractThemeInfo_manifest_prefix(self):\n             self.assertEqual(theme.__name__, \'manifest_prefix\')\n             self.assertEqual(\n                 theme.rules,\n-                u\'/++theme++manifest_prefix/rules.xml\'\n+                \'/++theme++manifest_prefix/rules.xml\'\n             )\n             self.assertEqual(theme.absolutePrefix, \'/foo\')\n             self.assertEqual(theme.title,  \'Test theme\')\n@@ -385,7 +384,7 @@ def test_extractThemeInfo_manifest_default_rules(self):\n             self.assertEqual(theme.__name__, \'manifest_default_rules\')\n             self.assertEqual(\n                 theme.rules,\n-                u\'/++theme++manifest_default_rules/rules.xml\'\n+                \'/++theme++manifest_default_rules/rules.xml\'\n             )\n             self.assertEqual(\n                 theme.absolutePrefix,\n@@ -402,7 +401,7 @@ def test_extractThemeInfo_manifest_preview(self):\n             self.assertEqual(theme.__name__, \'manifest_preview\')\n             self.assertEqual(\n                 theme.rules,\n-                u\'/++theme++manifest_preview/rules.xml\'\n+                \'/++theme++manifest_preview/rules.xml\'\n             )\n             self.assertEqual(\n                 theme.absolutePrefix,\n@@ -442,7 +441,7 @@ def test_extractThemeInfo_ignores_dotfiles_resource_forks(self):\n             theme = extractThemeInfo(zf)\n \n             self.assertEqual(theme.__name__, \'default_rules\')\n-            self.assertEqual(theme.rules, u\'/++theme++default_rules/rules.xml\')\n+            self.assertEqual(theme.rules, \'/++theme++default_rules/rules.xml\')\n             self.assertEqual(theme.absolutePrefix, \'/++theme++default_rules\')\n \n     def test_extractThemeInfo_with_subdirectories(self):\n@@ -454,7 +453,7 @@ def test_extractThemeInfo_with_subdirectories(self):\n             self.assertEqual(theme.__name__, \'subdirectories\')\n             self.assertEqual(\n                 theme.rules,\n-                u\'/++theme++subdirectories/rules.xml\'\n+                \'/++theme++subdirectories/rules.xml\'\n             )\n             self.assertEqual(theme.absolutePrefix, \'/++theme++subdirectories\')\n \n@@ -478,7 +477,7 @@ def get_admin_browser(self):\n         browser.handleErrors = False\n         browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            "Basic {}:{}".format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n         )\n         return browser\n \ndiff --git a/src/plone/app/theming/theme.py b/src/plone/app/theming/theme.py\nindex 9d955397..db15be41 100644\n--- a/src/plone/app/theming/theme.py\n+++ b/src/plone/app/theming/theme.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.app.theming.interfaces import ITheme\n from zope.interface import implementer\n \n \n @implementer(ITheme)\n-class Theme(object):\n+class Theme:\n     """A theme, loaded from a resource directory\n     """\n \n@@ -46,4 +45,4 @@ def __init__(\n         self.tinymce_styles_css = tinymce_styles_css\n \n     def __repr__(self):\n-        return \'<Theme "{0:s}">\'.format(self.__name__)\n+        return \'<Theme "{:s}">\'.format(self.__name__)\ndiff --git a/src/plone/app/theming/transform.py b/src/plone/app/theming/transform.py\nindex 9a09dd42..4adecb2f 100644\n--- a/src/plone/app/theming/transform.py\n+++ b/src/plone/app/theming/transform.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from App.config import getConfiguration\n from lxml import etree\n from os import environ\n@@ -26,7 +25,7 @@\n \n @implementer(ITransform)\n @adapter(Interface, IThemingLayer)\n-class ThemeTransform(object):\n+class ThemeTransform:\n     """Late stage in the 8000\'s transform chain. When plone.app.blocks is\n     used, we can benefit from lxml parsing having taken place already.\n     """\ndiff --git a/src/plone/app/theming/traversal.py b/src/plone/app/theming/traversal.py\nindex 996eef63..21b8793a 100644\n--- a/src/plone/app/theming/traversal.py\n+++ b/src/plone/app/theming/traversal.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.theming.interfaces import THEME_RESOURCE_NAME\n from plone.app.theming.utils import theming_policy\n from plone.resource.traversal import ResourceTraverser\ndiff --git a/src/plone/app/theming/upgrade.py b/src/plone/app/theming/upgrade.py\nindex 8bbed906..c136e2e0 100644\n--- a/src/plone/app/theming/upgrade.py\n+++ b/src/plone/app/theming/upgrade.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n \n \ndiff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py\nindex 3acd1f6b..86bec056 100644\n--- a/src/plone/app/theming/utils.py\n+++ b/src/plone/app/theming/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from diazo.compiler import compile_theme\n from diazo.compiler import quote_param\n from lxml import etree\n@@ -26,7 +25,7 @@\n from plone.base.utils import safe_bytes\n from plone.base.utils import safe_text\n from Products.PageTemplates.Expressions import getEngine\n-from six.moves.urllib.parse import urlsplit\n+from urllib.parse import urlsplit\n from zope.component import getUtility\n from zope.component import queryMultiAdapter\n from zope.globalrequest import getRequest\n@@ -52,7 +51,7 @@\n \n \n @implementer(INoRequest)\n-class NoRequest(object):\n+class NoRequest:\n     """Fallback to enable querying for the policy adapter\n     even in the absence of a proper IRequest."""\n \n@@ -169,7 +168,7 @@ def resolve(self, system_url, public_id, context):\n \n         context = findContext(request)\n         portalState = queryMultiAdapter(\n-            (context, request), name=u"plone_portal_state")\n+            (context, request), name="plone_portal_state")\n \n         if portalState is None:\n             root = None\n@@ -182,14 +181,14 @@ def resolve(self, system_url, public_id, context):\n             if len(context_path) == 0:\n                 system_url = \'/\' + system_url\n             else:\n-                system_url = \'/{0:s}/{1:s}\'.format(\n+                system_url = \'/{:s}/{:s}\'.format(\n                     \'/\'.join(context_path),\n                     system_url\n                 )\n \n         response = subrequest(system_url, root=root)\n         if response.status != 200:\n-            LOGGER.error("Couldn\'t resolve {0:s}".format(system_url))\n+            LOGGER.error("Couldn\'t resolve {:s}".format(system_url))\n             return None\n         result = response.getBody()\n         content_type = response.headers.get(\'content-type\')\n@@ -231,7 +230,7 @@ def getPortal():\n     context = findContext(request)\n     portalState = queryMultiAdapter(\n         (context, request),\n-        name=u"plone_portal_state"\n+        name="plone_portal_state"\n     )\n     if portalState is None:\n         return None\n@@ -306,9 +305,9 @@ def createExpressionContext(context, request):\n     """\n \n     contextState = queryMultiAdapter(\n-        (context, request), name=u"plone_context_state")\n+        (context, request), name="plone_context_state")\n     portalState = queryMultiAdapter(\n-        (context, request), name=u"plone_portal_state")\n+        (context, request), name="plone_portal_state")\n \n     data = {\n         \'context\': context,\n@@ -355,11 +354,11 @@ def extractThemeInfo(zipfile, checkRules=True):\n         if checkRules:\n             try:\n                 zipfile.getinfo(\n-                    "{0:s}/{1:s}".format(name, RULE_FILENAME)\n+                    "{:s}/{:s}".format(name, RULE_FILENAME)\n                 )\n             except KeyError:\n                 raise ValueError("Could not find theme name and rules file")\n-        rules = u"/++{0:s}++{1:s}/{0:s}".format(\n+        rules = "/++{0:s}++{1:s}/{0:s}".format(\n             THEME_RESOURCE_NAME,\n             name,\n             RULE_FILENAME\n@@ -384,14 +383,14 @@ def getTheme(name, manifest=None, resources=None):\n     description = manifest.get(\'description\', None)\n     rules = manifest.get(\'rules\', None)\n     if rules is None:\n-        rules = u"/++{0:s}++{1:s}/{2:s}".format(\n+        rules = "/++{:s}++{:s}/{:s}".format(\n             THEME_RESOURCE_NAME,\n             name,\n             RULE_FILENAME,\n         )\n     prefix = manifest.get(\'prefix\', None)\n     if prefix is None:\n-        prefix = u"/++{0:s}++{1:s}".format(THEME_RESOURCE_NAME, name)\n+        prefix = "/++{:s}++{:s}".format(THEME_RESOURCE_NAME, name)\n     params = manifest.get(\'parameters\', None) or {}\n     doctype = manifest.get(\'doctype\', None) or ""\n     preview = manifest.get(\'preview\', None)\n@@ -405,9 +404,9 @@ def getTheme(name, manifest=None, resources=None):\n     production_js = manifest.get(\'production-js\', None) or \'\'\n     tinymce_content_css = manifest.get(\'tinymce-content-css\', None) or \'\'\n     tinymce_styles_css = manifest.get(\'tinymce-styles-css\', None) or \'\'\n-    if isinstance(rules, six.binary_type):\n+    if isinstance(rules, bytes):\n         rules = rules.decode(\'utf-8\')\n-    if isinstance(prefix, six.binary_type):\n+    if isinstance(prefix, bytes):\n         prefix = prefix.decode(\'utf-8\')\n     return Theme(\n         name,\n@@ -538,13 +537,13 @@ def applyTheme(theme):\n \n     else:\n \n-        if not isinstance(theme.rules, six.text_type):\n+        if not isinstance(theme.rules, str):\n             theme.rules = theme.rules.decode(\'utf-8\')\n \n-        if not isinstance(theme.absolutePrefix, six.text_type):\n+        if not isinstance(theme.absolutePrefix, str):\n             theme.absolutePrefix = theme.absolutePrefix.decode(\'utf-8\')\n \n-        if not isinstance(theme.__name__, six.text_type):\n+        if not isinstance(theme.__name__, str):\n             theme.__name__ = theme.__name__.decode(\'utf-8\')\n \n         settings.currentTheme = theme.__name__\n@@ -579,10 +578,10 @@ def createThemeFromTemplate(title, description, baseOn=\'template\'):\n \n     source = queryResourceDirectory(THEME_RESOURCE_NAME, baseOn)\n     if source is None:\n-        raise KeyError("Theme {0:s} not found".format(baseOn))\n+        raise KeyError("Theme {:s} not found".format(baseOn))\n \n     themeName = getUtility(IURLNormalizer).normalize(title)\n-    if six.PY2 and isinstance(themeName, six.text_type):\n+    if six.PY2 and isinstance(themeName, str):\n         themeName = themeName.encode(\'utf-8\')\n \n     resources = getOrCreatePersistentResourceDirectory()\n@@ -595,45 +594,33 @@ def createThemeFromTemplate(title, description, baseOn=\'template\'):\n     manifest = SafeConfigParser()\n \n     if MANIFEST_FILENAME in target:\n-        if six.PY2:\n-            fp = target.openFile(MANIFEST_FILENAME)\n-            try:\n-                if hasattr(manifest, "read_file"):\n-                    # backports.configparser\n-                    manifest.read_file(fp)\n-                else:\n-                    manifest.readfp(fp)\n-            finally:\n-                fp.close()\n-\n-        else:\n-            # configparser can only read/write text\n-            # but in py3 plone.resource objects are BytesIO objects.\n-            fp = target.openFile(MANIFEST_FILENAME)\n-            try:\n-                data = fp.read()\n-            finally:\n-                fp.close()\n-            manifest.read_string(safe_text(data))\n+        # configparser can only read/write text\n+        # but in py3 plone.resource objects are BytesIO objects.\n+        fp = target.openFile(MANIFEST_FILENAME)\n+        try:\n+            data = fp.read()\n+        finally:\n+            fp.close()\n+        manifest.read_string(safe_text(data))\n \n     if not manifest.has_section(\'theme\'):\n         manifest.add_section(\'theme\')\n \n-    if six.PY2 and isinstance(title, six.text_type):\n+    if six.PY2 and isinstance(title, str):\n         title = title.encode(\'utf-8\')\n-    if six.PY2 and isinstance(description, six.text_type):\n+    if six.PY2 and isinstance(description, str):\n         description = description.encode(\'utf-8\')\n     manifest.set(\'theme\', \'title\', title)\n     manifest.set(\'theme\', \'description\', description)\n \n     if manifest.has_option(\'theme\', \'prefix\'):\n-        prefix = u"/++%s++%s" % (THEME_RESOURCE_NAME, themeName)\n+        prefix = "/++{}++{}".format(THEME_RESOURCE_NAME, themeName)\n         manifest.set(\'theme\', \'prefix\', prefix)\n \n     if manifest.has_option(\'theme\', \'rules\'):\n         rule = manifest.get(\'theme\', \'rules\')\n         rule_file_name = rule.split(\'/\')[-1]  # extract real rules file name\n-        rules = u"/++%s++%s/%s" % (THEME_RESOURCE_NAME, themeName,\n+        rules = "/++{}++{}/{}".format(THEME_RESOURCE_NAME, themeName,\n                                    rule_file_name)\n         manifest.set(\'theme\', \'rules\', rules)\n \n@@ -645,10 +632,10 @@ def createThemeFromTemplate(title, description, baseOn=\'template\'):\n         val = manifest.get(\'theme\', var_path)\n         if not val:\n             continue\n-        template_prefix = \'++%s++%s/\' % (THEME_RESOURCE_NAME, baseOn)\n+        template_prefix = \'++{}++{}/\'.format(THEME_RESOURCE_NAME, baseOn)\n         if template_prefix in val:\n             # okay, fix\n-            val = val.replace(template_prefix, \'++%s++%s/\' % (THEME_RESOURCE_NAME, themeName))\n+            val = val.replace(template_prefix, \'++{}++{}/\'.format(THEME_RESOURCE_NAME, themeName))\n             manifest.set(\'theme\', var_path, val)\n \n     # plone.resource uses OFS.File which is a BytesIO objects\n@@ -709,7 +696,7 @@ def compileThemeTransform(\n \n     if absolutePrefix:\n         absolutePrefix = expandAbsolutePrefix(absolutePrefix)\n-    params = set([\'url\', \'base\', \'path\', \'scheme\', \'host\'])\n+    params = {\'url\', \'base\', \'path\', \'scheme\', \'host\'}\n     params.update(parameterExpressions.keys())\n     xslParams = {k: \'\' for k in params}\n \ndiff --git a/src/plone/app/theming/zmi.py b/src/plone/app/theming/zmi.py\nindex 72859e6d..1973ff63 100644\n--- a/src/plone/app/theming/zmi.py\n+++ b/src/plone/app/theming/zmi.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from App.special_dtml import DTMLFile\n from zope.globalrequest import getRequest\n \n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-02-25T02:38:10+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.theming/commit/e25f6b53d9b8bd7866c03d02436e496882436440

pyupgrade --py38-plus

Files changed:
M src/plone/app/theming/browser/controlpanel.py
M src/plone/app/theming/browser/help.py
M src/plone/app/theming/exportimport/handler.py
M src/plone/app/theming/plugins/utils.py
M src/plone/app/theming/policy.py
M src/plone/app/theming/tests/test_transform.py
M src/plone/app/theming/tests/test_utils.py
M src/plone/app/theming/theme.py
M src/plone/app/theming/utils.py

b'diff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py\nindex c911fcc..56e34bf 100644\n--- a/src/plone/app/theming/browser/controlpanel.py\n+++ b/src/plone/app/theming/browser/controlpanel.py\n@@ -127,7 +127,7 @@ def update(self):\n \n         if \'form.button.Cancel\' in form:\n             IStatusMessage(self.request).add(_("Changes cancelled"))\n-            self.redirect("{}/@@overview-controlpanel".format(self.site_url))\n+            self.redirect(f"{self.site_url}/@@overview-controlpanel")\n             return False\n \n         if \'form.button.Enable\' in form:\n@@ -427,7 +427,7 @@ def themeList(self):\n                 \'description\': theme.description,\n                 \'override\': override,\n                 \'editable\': theme.__name__ in zodbNames,\n-                \'preview\': "{}/{}".format(self.site_url, previewUrl),\n+                \'preview\': f"{self.site_url}/{previewUrl}",\n                 \'selected\': theme.__name__ == self.selectedTheme,\n             }\n             if theme.__name__ == self.selectedTheme:\ndiff --git a/src/plone/app/theming/browser/help.py b/src/plone/app/theming/browser/help.py\nindex b2ffbb0..7536c8b 100644\n--- a/src/plone/app/theming/browser/help.py\n+++ b/src/plone/app/theming/browser/help.py\n@@ -16,4 +16,4 @@ def __call__(self):\n             writer_name=\'html\'\n         )\n         html = parts[\'body_pre_docinfo\'] + parts[\'fragment\']\n-        return """<div class="content">{:s}</div>""".format(html)\n+        return f"""<div class="content">{html:s}</div>"""\ndiff --git a/src/plone/app/theming/exportimport/handler.py b/src/plone/app/theming/exportimport/handler.py\nindex 26eca2e..834d0c5 100644\n--- a/src/plone/app/theming/exportimport/handler.py\n+++ b/src/plone/app/theming/exportimport/handler.py\n@@ -32,10 +32,10 @@ def importTheme(context):\n                 break\n \n         if themeInfo is None:\n-            raise ValueError("Theme {:s} is not available".format(themeName))\n+            raise ValueError(f"Theme {themeName:s} is not available")\n \n         applyTheme(themeInfo)\n-        logger.info(\'Theme {:s} applied\'.format(themeName))\n+        logger.info(f\'Theme {themeName:s} applied\')\n \n     # enable/disable theme\n     themeEnabled = tree.find("enabled")\n@@ -53,5 +53,5 @@ def importTheme(context):\n         logger.info(\'Theme disabled\')\n     else:\n         raise ValueError(\n-            "{:s} is not a valid value for <enabled />".format(themeEnabled)\n+            f"{themeEnabled:s} is not a valid value for <enabled />"\n         )\ndiff --git a/src/plone/app/theming/plugins/utils.py b/src/plone/app/theming/plugins/utils.py\nindex 3a794f7..a0906d8 100644\n--- a/src/plone/app/theming/plugins/utils.py\n+++ b/src/plone/app/theming/plugins/utils.py\n@@ -51,7 +51,7 @@ def sortDependencies(plugins):\n \n     if waiting:\n         raise ValueError(\n-            "Could not resolve dependencies for: {:s}".format(waiting)\n+            f"Could not resolve dependencies for: {waiting:s}"\n         )\n \n \n@@ -99,7 +99,7 @@ def getPluginSettings(themeDirectory, plugins=None):\n     pluginSettings = {}\n     for name, plugin in plugins:\n         pluginSettings[name] = manifestContents.get(\n-            "{:s}:{:s}".format(THEME_RESOURCE_NAME, name),\n+            f"{THEME_RESOURCE_NAME:s}:{name:s}",\n             {}\n         )\n     return pluginSettings\ndiff --git a/src/plone/app/theming/policy.py b/src/plone/app/theming/policy.py\nindex 7c411bc..89d7eed 100644\n--- a/src/plone/app/theming/policy.py\n+++ b/src/plone/app/theming/policy.py\n@@ -114,7 +114,7 @@ def getCache(self, theme=None):\n     def getCacheKey(self, theme=None):\n         if not theme:\n             theme = self.getCurrentTheme()\n-        key = "{}::{}".format(getSite().absolute_url(), theme)\n+        key = f"{getSite().absolute_url()}::{theme}"\n         return key\n \n     def getCacheStorage(self):\ndiff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py\nindex 33ba3f8..8a94c28 100644\n--- a/src/plone/app/theming/tests/test_transform.py\n+++ b/src/plone/app/theming/tests/test_transform.py\n@@ -622,7 +622,7 @@ def test_theme_for_404(self):\n         browser.addHeader(\'Accept\', \'text/html\')\n         error = None\n         try:\n-            browser.open(\'{:s}/404_page\'.format(portal.absolute_url()))\n+            browser.open(f\'{portal.absolute_url():s}/404_page\')\n         except HTTPError as e:\n             error = e\n         self.assertEqual(error.code, 404)\n@@ -649,7 +649,7 @@ def test_theme_params_on_404(self):\n         browser.addHeader(\'Accept\', \'text/html\')\n         error = None\n         try:\n-            browser.open(\'{:s}/404_page\'.format(portal.absolute_url()))\n+            browser.open(f\'{portal.absolute_url():s}/404_page\')\n         except HTTPError as e:\n             error = e\n         self.assertEqual(error.code, 404)\ndiff --git a/src/plone/app/theming/tests/test_utils.py b/src/plone/app/theming/tests/test_utils.py\nindex 740c08f..a5ec632 100644\n--- a/src/plone/app/theming/tests/test_utils.py\n+++ b/src/plone/app/theming/tests/test_utils.py\n@@ -477,7 +477,7 @@ def get_admin_browser(self):\n         browser.handleErrors = False\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}",\n         )\n         return browser\n \ndiff --git a/src/plone/app/theming/theme.py b/src/plone/app/theming/theme.py\nindex db15be4..f18be8e 100644\n--- a/src/plone/app/theming/theme.py\n+++ b/src/plone/app/theming/theme.py\n@@ -45,4 +45,4 @@ def __init__(\n         self.tinymce_styles_css = tinymce_styles_css\n \n     def __repr__(self):\n-        return \'<Theme "{:s}">\'.format(self.__name__)\n+        return f\'<Theme "{self.__name__:s}">\'\ndiff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py\nindex 86bec05..07a6cb3 100644\n--- a/src/plone/app/theming/utils.py\n+++ b/src/plone/app/theming/utils.py\n@@ -188,7 +188,7 @@ def resolve(self, system_url, public_id, context):\n \n         response = subrequest(system_url, root=root)\n         if response.status != 200:\n-            LOGGER.error("Couldn\'t resolve {:s}".format(system_url))\n+            LOGGER.error(f"Couldn\'t resolve {system_url:s}")\n             return None\n         result = response.getBody()\n         content_type = response.headers.get(\'content-type\')\n@@ -354,7 +354,7 @@ def extractThemeInfo(zipfile, checkRules=True):\n         if checkRules:\n             try:\n                 zipfile.getinfo(\n-                    "{:s}/{:s}".format(name, RULE_FILENAME)\n+                    f"{name:s}/{RULE_FILENAME:s}"\n                 )\n             except KeyError:\n                 raise ValueError("Could not find theme name and rules file")\n@@ -390,7 +390,7 @@ def getTheme(name, manifest=None, resources=None):\n         )\n     prefix = manifest.get(\'prefix\', None)\n     if prefix is None:\n-        prefix = "/++{:s}++{:s}".format(THEME_RESOURCE_NAME, name)\n+        prefix = f"/++{THEME_RESOURCE_NAME:s}++{name:s}"\n     params = manifest.get(\'parameters\', None) or {}\n     doctype = manifest.get(\'doctype\', None) or ""\n     preview = manifest.get(\'preview\', None)\n@@ -578,7 +578,7 @@ def createThemeFromTemplate(title, description, baseOn=\'template\'):\n \n     source = queryResourceDirectory(THEME_RESOURCE_NAME, baseOn)\n     if source is None:\n-        raise KeyError("Theme {:s} not found".format(baseOn))\n+        raise KeyError(f"Theme {baseOn:s} not found")\n \n     themeName = getUtility(IURLNormalizer).normalize(title)\n     if six.PY2 and isinstance(themeName, str):\n@@ -614,7 +614,7 @@ def createThemeFromTemplate(title, description, baseOn=\'template\'):\n     manifest.set(\'theme\', \'description\', description)\n \n     if manifest.has_option(\'theme\', \'prefix\'):\n-        prefix = "/++{}++{}".format(THEME_RESOURCE_NAME, themeName)\n+        prefix = f"/++{THEME_RESOURCE_NAME}++{themeName}"\n         manifest.set(\'theme\', \'prefix\', prefix)\n \n     if manifest.has_option(\'theme\', \'rules\'):\n@@ -632,10 +632,10 @@ def createThemeFromTemplate(title, description, baseOn=\'template\'):\n         val = manifest.get(\'theme\', var_path)\n         if not val:\n             continue\n-        template_prefix = \'++{}++{}/\'.format(THEME_RESOURCE_NAME, baseOn)\n+        template_prefix = f\'++{THEME_RESOURCE_NAME}++{baseOn}/\'\n         if template_prefix in val:\n             # okay, fix\n-            val = val.replace(template_prefix, \'++{}++{}/\'.format(THEME_RESOURCE_NAME, themeName))\n+            val = val.replace(template_prefix, f\'++{THEME_RESOURCE_NAME}++{themeName}/\')\n             manifest.set(\'theme\', var_path, val)\n \n     # plone.resource uses OFS.File which is a BytesIO objects\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-02-25T02:46:56+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.theming/commit/ace43da3eb8cbe50de9c4b3233559195fdeae453

Removed six.

Files changed:
M setup.py
M src/plone/app/theming/browser/controlpanel.py
M src/plone/app/theming/plugins/utils.py
M src/plone/app/theming/tests/test_transform.py
M src/plone/app/theming/traversal.py
M src/plone/app/theming/utils.py

b'diff --git a/setup.py b/setup.py\nindex c6d0be5..5089bac 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -64,7 +64,6 @@\n         \'repoze.xmliter>=0.3\',\n         \'roman\',\n         \'setuptools\',\n-        \'six\',\n         \'zope.traversing\',\n     ],\n     extras_require={\ndiff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py\nindex 56e34bf..cb3261c 100644\n--- a/src/plone/app/theming/browser/controlpanel.py\n+++ b/src/plone/app/theming/browser/controlpanel.py\n@@ -28,7 +28,6 @@\n from zope.schema.interfaces import IVocabularyFactory\n \n import logging\n-import six\n import zipfile\n \n \n@@ -61,8 +60,6 @@ def site_url(self):\n     @property\n     def hostname_blacklist(self):\n         hostname_blacklist = self.request.get(\'hostnameBlacklist\', [])\n-        if six.PY2:\n-            return hostname_blacklist\n         return [safe_text(host) for host in hostname_blacklist]\n \n     def __call__(self):\n@@ -221,8 +218,6 @@ def update(self):\n \n                 # Theme base settings\n                 if themeBase is not None:\n-                    if six.PY2:\n-                        themeBase = themeBase.encode(\'utf-8\')\n                     self.pskin.default_skin = themeBase\n                 if markSpecialLinks is not None:\n                     self.mark_special_links = markSpecialLinks\ndiff --git a/src/plone/app/theming/plugins/utils.py b/src/plone/app/theming/plugins/utils.py\nindex a0906d8..d4ad152 100644\n--- a/src/plone/app/theming/plugins/utils.py\n+++ b/src/plone/app/theming/plugins/utils.py\n@@ -1,21 +1,10 @@\n+from configparser import ConfigParser\n from plone.app.theming.interfaces import IThemePlugin\n from plone.app.theming.interfaces import THEME_RESOURCE_NAME\n from plone.memoize.ram import cache\n from plone.resource.manifest import MANIFEST_FILENAME\n from zope.component import getUtilitiesFor\n \n-import six\n-\n-try:\n-    # Python 3.  Watch out for DeprecationWarning:\n-    # The SafeConfigParser class has been renamed to ConfigParser in\n-    # Python 3.2. This alias will be removed in future versions.\n-    # Use ConfigParser directly instead.\n-    from configparser import ConfigParser as SafeConfigParser\n-except ImportError:\n-    # Python 2\n-    from ConfigParser import SafeConfigParser\n-\n \n def pluginsCacheKey(fun):\n     return len(list(getUtilitiesFor(IThemePlugin)))\n@@ -82,7 +71,7 @@ def getPluginSettings(themeDirectory, plugins=None):\n     manifestContents = {}\n \n     if themeDirectory.isFile(MANIFEST_FILENAME):\n-        parser = SafeConfigParser()\n+        parser = ConfigParser()\n         fp = themeDirectory.openFile(MANIFEST_FILENAME)\n         try:\n             parser.read_string(fp.read().decode())\ndiff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py\nindex 8a94c28..37d8cde 100644\n--- a/src/plone/app/theming/tests/test_transform.py\n+++ b/src/plone/app/theming/tests/test_transform.py\n@@ -22,7 +22,6 @@\n \n import os.path\n import re\n-import six\n import transaction\n import unittest\n \ndiff --git a/src/plone/app/theming/traversal.py b/src/plone/app/theming/traversal.py\nindex 21b8793..bf76f6a 100644\n--- a/src/plone/app/theming/traversal.py\n+++ b/src/plone/app/theming/traversal.py\n@@ -2,7 +2,7 @@\n from plone.app.theming.utils import theming_policy\n from plone.resource.traversal import ResourceTraverser\n from plone.resource.utils import queryResourceDirectory\n-from six.moves import urllib\n+from urllib.parse import quote\n from zExceptions import NotFound\n \n \n@@ -26,7 +26,7 @@ def traverse(self, name, remaining):\n             name = self.current_theme()\n \n         # Note: also fixes possible unicode problems\n-        name = urllib.parse.quote(name)\n+        name = quote(name)\n \n         res = queryResourceDirectory(self.name, name)\n         if res is not None:\ndiff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py\nindex 07a6cb3..a5acb1b 100644\n--- a/src/plone/app/theming/utils.py\n+++ b/src/plone/app/theming/utils.py\n@@ -1,5 +1,8 @@\n+from configparser import ConfigParser\n from diazo.compiler import compile_theme\n from diazo.compiler import quote_param\n+from io import BytesIO\n+from io import StringIO\n from lxml import etree\n from plone.app.theming.interfaces import INoRequest\n from plone.app.theming.interfaces import IThemingPolicy\n@@ -34,17 +37,7 @@\n import logging\n import os\n import pkg_resources\n-import six\n \n-try:\n-    # Python 3.  Watch out for DeprecationWarning:\n-    # The SafeConfigParser class has been renamed to ConfigParser in\n-    # Python 3.2. This alias will be removed in future versions.\n-    # Use ConfigParser directly instead.\n-    from configparser import ConfigParser as SafeConfigParser\n-except ImportError:\n-    # Python 2\n-    from ConfigParser import SafeConfigParser\n \n \n LOGGER = logging.getLogger(\'plone.app.theming\')\n@@ -201,7 +194,7 @@ def resolve(self, system_url, public_id, context):\n             # e.g. charset=utf-8\n             encoding = encoding.split(\'=\', 1)[1].strip()\n         result = result.decode(encoding)\n-        if six.PY2 or content_type == \'text/html\':\n+        if content_type == \'text/html\':\n             # Note: at first the xmlcharrefreplace was only done on Python 2,\n             # but Python 3 needs it as well, but only for html.\n             # See https://github.com/plone/Products.CMFPlone/issues/3068\n@@ -581,9 +574,6 @@ def createThemeFromTemplate(title, description, baseOn=\'template\'):\n         raise KeyError(f"Theme {baseOn:s} not found")\n \n     themeName = getUtility(IURLNormalizer).normalize(title)\n-    if six.PY2 and isinstance(themeName, str):\n-        themeName = themeName.encode(\'utf-8\')\n-\n     resources = getOrCreatePersistentResourceDirectory()\n \n     resources.makeDirectory(themeName)\n@@ -591,7 +581,7 @@ def createThemeFromTemplate(title, description, baseOn=\'template\'):\n \n     cloneResourceDirectory(source, target)\n \n-    manifest = SafeConfigParser()\n+    manifest = ConfigParser()\n \n     if MANIFEST_FILENAME in target:\n         # configparser can only read/write text\n@@ -606,10 +596,6 @@ def createThemeFromTemplate(title, description, baseOn=\'template\'):\n     if not manifest.has_section(\'theme\'):\n         manifest.add_section(\'theme\')\n \n-    if six.PY2 and isinstance(title, str):\n-        title = title.encode(\'utf-8\')\n-    if six.PY2 and isinstance(description, str):\n-        description = description.encode(\'utf-8\')\n     manifest.set(\'theme\', \'title\', title)\n     manifest.set(\'theme\', \'description\', description)\n \n@@ -641,12 +627,12 @@ def createThemeFromTemplate(title, description, baseOn=\'template\'):\n     # plone.resource uses OFS.File which is a BytesIO objects\n     # but configparser can only deal with text (StringIO).\n     # So we need to do this stupid dance to write manifest.cfg\n-    tempfile = six.StringIO()\n+    tempfile = StringIO()\n     manifest.write(tempfile)\n     tempfile.seek(0)\n     data = tempfile.read()\n     tempfile.close()\n-    manifestContents = six.BytesIO(safe_bytes(data))\n+    manifestContents = BytesIO(safe_bytes(data))\n \n     target.writeFile(MANIFEST_FILENAME, manifestContents)\n     return themeName\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-02-25T02:47:53+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.theming/commit/861e7d69f6419f27d201107fe33b3f27074ce950

Removed compatibility code for Zope 4: processInputs.

Files changed:
M src/plone/app/theming/browser/controlpanel.py

b"diff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py\nindex cb3261c..6c0ac4a 100644\n--- a/src/plone/app/theming/browser/controlpanel.py\n+++ b/src/plone/app/theming/browser/controlpanel.py\n@@ -31,14 +31,6 @@\n import zipfile\n \n \n-try:\n-    # Zope 4\n-    from Products.Five.browser.decode import processInputs\n-except ImportError:\n-    # Zope 5\n-    processInputs = None\n-\n-\n logger = logging.getLogger('plone.app.theming')\n \n \n@@ -116,8 +108,6 @@ def set_ext_links_open_new_window(self, value):\n \n     def update(self):\n         # XXX: complexity too high: refactoring needed\n-        if processInputs is not None:\n-            processInputs(self.request)\n         self._setup()\n         self.errors = {}\n         form = self.request.form\n"

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-02-25T02:48:57+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.theming/commit/f46d8d92f79e9bca66a22e6517b7e11f4a61fe51

We can use plone.testing.zope instead of z2.

Files changed:
M src/plone/app/theming/tests/test_controlpanel.py
M src/plone/app/theming/tests/test_transform.py

b'diff --git a/src/plone/app/theming/tests/test_controlpanel.py b/src/plone/app/theming/tests/test_controlpanel.py\nindex 04eea57..be30e89 100644\n--- a/src/plone/app/theming/tests/test_controlpanel.py\n+++ b/src/plone/app/theming/tests/test_controlpanel.py\n@@ -3,7 +3,7 @@\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n \n import unittest\n \ndiff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py\nindex 37d8cde..65ad719 100644\n--- a/src/plone/app/theming/tests/test_transform.py\n+++ b/src/plone/app/theming/tests/test_transform.py\n@@ -13,7 +13,7 @@\n from plone.app.theming.utils import PythonResolver\n from plone.app.theming.utils import resolvePythonURL\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from Products.CMFCore.Expression import Expression\n from Products.CMFCore.Expression import getExprContext\n from Products.CMFCore.utils import getToolByName\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-02-25T02:53:29+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.theming/commit/fedcad6ad156f2aad6ef3a4faa312ae702cb8bee

Removed unused rules variable redifinition.

It gave a flake8 error:
F523 '...'.format(...) has unused arguments at position(s): 2
But nothing was ever done with the variable at this point, so I removed it.

Files changed:
M src/plone/app/theming/utils.py

b'diff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py\nindex a5acb1b..9abb15a 100644\n--- a/src/plone/app/theming/utils.py\n+++ b/src/plone/app/theming/utils.py\n@@ -351,11 +351,6 @@ def extractThemeInfo(zipfile, checkRules=True):\n                 )\n             except KeyError:\n                 raise ValueError("Could not find theme name and rules file")\n-        rules = "/++{0:s}++{1:s}/{0:s}".format(\n-            THEME_RESOURCE_NAME,\n-            name,\n-            RULE_FILENAME\n-        )\n     return getTheme(name, manifest)\n \n \n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-02-25T02:56:50+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.theming/commit/22246fe275302f28d2dc19957376a4ca7e34b20e

Updated news snippet.

Files changed:
M news/1.bugfix

b'diff --git a/news/1.bugfix b/news/1.bugfix\nindex ddc1109..bf31498 100644\n--- a/news/1.bugfix\n+++ b/news/1.bugfix\n@@ -1 +1,3 @@\n-Import more from plone.base. [maurits]\n+Import more from plone.base.\n+Removed compatibility code for Python 2 and Zope 4.\n+[maurits]\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2023-02-25T09:43:08+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/840ed85daa72af2e679cf6b5a5d6872132bd7c67

Merge pull request #215 from plone/maurits-plone-base

Use plone base more, remove Python 2 and Zope 4 support

Files changed:
A news/1.bugfix
M setup.py
M src/plone/__init__.py
M src/plone/app/__init__.py
M src/plone/app/theming/__init__.py
M src/plone/app/theming/browser/__init__.py
M src/plone/app/theming/browser/controlpanel.py
M src/plone/app/theming/browser/custom_css.py
M src/plone/app/theming/browser/help.py
M src/plone/app/theming/browser/themefile.py
M src/plone/app/theming/events.py
M src/plone/app/theming/exportimport/handler.py
M src/plone/app/theming/header.py
M src/plone/app/theming/interfaces.py
M src/plone/app/theming/plugins/__init__.py
M src/plone/app/theming/plugins/hooks.py
M src/plone/app/theming/plugins/utils.py
M src/plone/app/theming/policy.py
M src/plone/app/theming/testing.py
M src/plone/app/theming/tests/test_controlpanel.py
M src/plone/app/theming/tests/test_exportimport.py
M src/plone/app/theming/tests/test_policy.py
M src/plone/app/theming/tests/test_transform.py
M src/plone/app/theming/tests/test_utils.py
M src/plone/app/theming/theme.py
M src/plone/app/theming/transform.py
M src/plone/app/theming/traversal.py
M src/plone/app/theming/upgrade.py
M src/plone/app/theming/utils.py
M src/plone/app/theming/zmi.py

b'diff --git a/news/1.bugfix b/news/1.bugfix\nnew file mode 100644\nindex 00000000..bf31498a\n--- /dev/null\n+++ b/news/1.bugfix\n@@ -0,0 +1,3 @@\n+Import more from plone.base.\n+Removed compatibility code for Python 2 and Zope 4.\n+[maurits]\ndiff --git a/setup.py b/setup.py\nindex 5e53534c..5089bacf 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n@@ -65,7 +64,6 @@\n         \'repoze.xmliter>=0.3\',\n         \'roman\',\n         \'setuptools\',\n-        \'six\',\n         \'zope.traversing\',\n     ],\n     extras_require={\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex 68c04af4..de40ea7c 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/src/plone/app/__init__.py b/src/plone/app/__init__.py\nindex 68c04af4..de40ea7c 100644\n--- a/src/plone/app/__init__.py\n+++ b/src/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/src/plone/app/theming/__init__.py b/src/plone/app/theming/__init__.py\nindex a3022e6b..694ea023 100644\n--- a/src/plone/app/theming/__init__.py\n+++ b/src/plone/app/theming/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # make this a namespace packages (plone.app.theming.plugins is an\n # extensible python namespace\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/src/plone/app/theming/browser/__init__.py b/src/plone/app/theming/browser/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/src/plone/app/theming/browser/__init__.py\n+++ b/src/plone/app/theming/browser/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py\nindex f264e336..6c0ac4a8 100644\n--- a/src/plone/app/theming/browser/controlpanel.py\n+++ b/src/plone/app/theming/browser/controlpanel.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from datetime import datetime\n from plone.app.theming.interfaces import _\n@@ -19,8 +18,8 @@\n from plone.registry.interfaces import IRegistry\n from plone.resource.utils import queryResourceDirectory\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.utils import safe_nativestring\n-from Products.CMFPlone.interfaces import ILinkSchema\n+from plone.base.utils import safe_text\n+from plone.base.interfaces import ILinkSchema\n from Products.statusmessages.interfaces import IStatusMessage\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n@@ -29,23 +28,14 @@\n from zope.schema.interfaces import IVocabularyFactory\n \n import logging\n-import six\n import zipfile\n \n \n-try:\n-    # Zope 4\n-    from Products.Five.browser.decode import processInputs\n-except ImportError:\n-    # Zope 5\n-    processInputs = None\n-\n-\n logger = logging.getLogger(\'plone.app.theming\')\n \n \n def authorize(context, request):\n-    authenticator = getMultiAdapter((context, request), name=u"authenticator")\n+    authenticator = getMultiAdapter((context, request), name="authenticator")\n     if not authenticator.verify():\n         raise Unauthorized\n \n@@ -62,9 +52,7 @@ def site_url(self):\n     @property\n     def hostname_blacklist(self):\n         hostname_blacklist = self.request.get(\'hostnameBlacklist\', [])\n-        if six.PY2:\n-            return hostname_blacklist\n-        return [safe_nativestring(host) for host in hostname_blacklist]\n+        return [safe_text(host) for host in hostname_blacklist]\n \n     def __call__(self):\n         self.pskin = getToolByName(self.context, \'portal_skins\')\n@@ -120,15 +108,13 @@ def set_ext_links_open_new_window(self, value):\n \n     def update(self):\n         # XXX: complexity too high: refactoring needed\n-        if processInputs is not None:\n-            processInputs(self.request)\n         self._setup()\n         self.errors = {}\n         form = self.request.form\n \n         if \'form.button.Cancel\' in form:\n-            IStatusMessage(self.request).add(_(u"Changes cancelled"))\n-            self.redirect("{0}/@@overview-controlpanel".format(self.site_url))\n+            IStatusMessage(self.request).add(_("Changes cancelled"))\n+            self.redirect(f"{self.site_url}/@@overview-controlpanel")\n             return False\n \n         if \'form.button.Enable\' in form:\n@@ -148,8 +134,8 @@ def update(self):\n                 self.request\n             ).add(\n                 _(\n-                    u"Theme enabled. Note that this control panel page is "\n-                    u"never themed."\n+                    "Theme enabled. Note that this control panel page is "\n+                    "never themed."\n                 )\n             )\n             self._setup()\n@@ -167,7 +153,7 @@ def update(self):\n             applyTheme(None)\n             self.theme_settings.enabled = False\n \n-            IStatusMessage(self.request).add(_(u"Theme disabled."))\n+            IStatusMessage(self.request).add(_("Theme disabled."))\n             self._setup()\n             return True\n \n@@ -193,8 +179,8 @@ def update(self):\n                 except ValueError:\n                     message = _(\n                         \'error_invalid_parameter_expressions\',\n-                        default=u"Please ensure you enter one expression per "\n-                                u"line, in the format <name> = <expression>."\n+                        default="Please ensure you enter one expression per "\n+                                "line, in the format <name> = <expression>."\n                     )\n                     self.errors[\'parameterExpressions\'] = message\n \n@@ -222,20 +208,18 @@ def update(self):\n \n                 # Theme base settings\n                 if themeBase is not None:\n-                    if six.PY2:\n-                        themeBase = themeBase.encode(\'utf-8\')\n                     self.pskin.default_skin = themeBase\n                 if markSpecialLinks is not None:\n                     self.mark_special_links = markSpecialLinks\n                 if extLinksOpenInNewWindow is not None:\n                     self.ext_links_open_new_window = extLinksOpenInNewWindow\n \n-                IStatusMessage(self.request).add(_(u"Changes saved"))\n+                IStatusMessage(self.request).add(_("Changes saved"))\n                 self._setup()\n                 return True\n             else:\n                 IStatusMessage(self.request).add(\n-                    _(u"There were errors"), \'error\'\n+                    _("There were errors"), \'error\'\n                 )\n                 self.redirectToFieldset(\'advanced\')\n                 return False\n@@ -256,7 +240,7 @@ def update(self):\n                 logger.exception("Could not read zip file")\n                 self.errors[\'themeArchive\'] = _(\n                     \'error_invalid_zip\',\n-                    default=u"The uploaded file is not a valid Zip archive"\n+                    default="The uploaded file is not a valid Zip archive"\n                 )\n \n             if themeZip:\n@@ -267,8 +251,8 @@ def update(self):\n                     logger.warn(str(e))\n                     self.errors[\'themeArchive\'] = _(\n                         \'error_no_rules_file\',\n-                        u"The uploaded file does not contain a valid theme "\n-                        u"archive."\n+                        "The uploaded file does not contain a valid theme "\n+                        "archive."\n                     )\n                 else:\n \n@@ -279,9 +263,9 @@ def update(self):\n                         if not replaceExisting:\n                             self.errors[\'themeArchive\'] = _(\n                                 \'error_already_installed\',\n-                                u"This theme is already installed. Select "\n-                                u"\'Replace existing theme\' and re-upload to "\n-                                u"replace it."\n+                                "This theme is already installed. Select "\n+                                "\'Replace existing theme\' and re-upload to "\n+                                "replace it."\n                             )\n                         else:\n                             del themeContainer[themeData.__name__]\n@@ -298,7 +282,7 @@ def update(self):\n                 )\n                 if themeDirectory is not None:\n                     # If we don\'t have a rules file, use the template\n-                    if themeData.rules == u"/++{0:s}++{1:s}/{2:s}".format(\n+                    if themeData.rules == "/++{:s}++{:s}/{:s}".format(\n                         THEME_RESOURCE_NAME,\n                         themeData.__name__,\n                         RULE_FILENAME,\n@@ -315,10 +299,10 @@ def update(self):\n                         if not themeDirectory.isFile(DEFAULT_THEME_FILENAME):\n                             IStatusMessage(self.request).add(\n                                 _(\n-                                    u"A boilerplate rules.xml was added to "\n-                                    u"your theme, but no index.html file "\n-                                    u"found. Update rules.xml to reference "\n-                                    u"the current theme file."\n+                                    "A boilerplate rules.xml was added to "\n+                                    "your theme, but no index.html file "\n+                                    "found. Update rules.xml to reference "\n+                                    "the current theme file."\n                                 ),\n                                 \'warning\',\n                             )\n@@ -339,14 +323,14 @@ def update(self):\n \n             if not self.errors:\n                 self.redirect(\n-                    "{0}/@@theming-controlpanel".format(\n+                    "{}/@@theming-controlpanel".format(\n                         self.site_url,\n                     )\n                 )\n                 return False\n             else:\n                 IStatusMessage(self.request).add(\n-                    _(u"There were errors"),\n+                    _("There were errors"),\n                     "error"\n                 )\n \n@@ -362,7 +346,7 @@ def update(self):\n             for theme in toDelete:\n                 del themeDirectory[theme]\n \n-            IStatusMessage(self.request).add(_(u"Theme deleted"), \'info\')\n+            IStatusMessage(self.request).add(_("Theme deleted"), \'info\')\n \n             self._setup()\n             return True\n@@ -417,7 +401,7 @@ def themeList(self):\n \n             previewUrl = "++resource++plone.app.theming/defaultPreview.png"\n             if theme.preview:\n-                previewUrl = "++theme++{0:s}/{1:s}".format(\n+                previewUrl = "++theme++{:s}/{:s}".format(\n                     theme.__name__,\n                     theme.preview,\n                 )\n@@ -428,7 +412,7 @@ def themeList(self):\n                 \'description\': theme.description,\n                 \'override\': override,\n                 \'editable\': theme.__name__ in zodbNames,\n-                \'preview\': "{0}/{1}".format(self.site_url, previewUrl),\n+                \'preview\': f"{self.site_url}/{previewUrl}",\n                 \'selected\': theme.__name__ == self.selectedTheme,\n             }\n             if theme.__name__ == self.selectedTheme:\n@@ -446,7 +430,7 @@ def themeList(self):\n \n     def redirectToFieldset(self, fieldset):\n         self.redirect(\n-            "{0}/{1}#fieldsetlegend-{2}".format(\n+            "{}/{}#fieldsetlegend-{}".format(\n                 self.site_url,\n                 self.__name__,\n                 fieldset\ndiff --git a/src/plone/app/theming/browser/custom_css.py b/src/plone/app/theming/browser/custom_css.py\nindex fae71653..1e99dc1b 100644\n--- a/src/plone/app/theming/browser/custom_css.py\n+++ b/src/plone/app/theming/browser/custom_css.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.theming.interfaces import IThemeSettings\n from plone.registry.interfaces import IRegistry\n from Products.Five.browser import BrowserView\ndiff --git a/src/plone/app/theming/browser/help.py b/src/plone/app/theming/browser/help.py\nindex 713557ac..7536c8ba 100644\n--- a/src/plone/app/theming/browser/help.py\n+++ b/src/plone/app/theming/browser/help.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.publisher.browser import BrowserView\n \n import docutils.core\n@@ -17,4 +16,4 @@ def __call__(self):\n             writer_name=\'html\'\n         )\n         html = parts[\'body_pre_docinfo\'] + parts[\'fragment\']\n-        return """<div class="content">{0:s}</div>""".format(html)\n+        return f"""<div class="content">{html:s}</div>"""\ndiff --git a/src/plone/app/theming/browser/themefile.py b/src/plone/app/theming/browser/themefile.py\nindex 5ef3d5d0..ac1f6a62 100644\n--- a/src/plone/app/theming/browser/themefile.py\n+++ b/src/plone/app/theming/browser/themefile.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.resource.directory import PersistentResourceDirectory\n from Products.Five.browser import BrowserView\n \ndiff --git a/src/plone/app/theming/events.py b/src/plone/app/theming/events.py\nindex 6cee90cd..27d09b42 100644\n--- a/src/plone/app/theming/events.py\n+++ b/src/plone/app/theming/events.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.app.theming.interfaces import IThemeAppliedEvent\n from zope.interface import implementer\n \n \n @implementer(IThemeAppliedEvent)\n-class ThemeAppliedEvent(object):\n+class ThemeAppliedEvent:\n \n     def __init__(self, theme):\n         self.theme = theme\ndiff --git a/src/plone/app/theming/exportimport/handler.py b/src/plone/app/theming/exportimport/handler.py\nindex 83f8b2f3..834d0c50 100644\n--- a/src/plone/app/theming/exportimport/handler.py\n+++ b/src/plone/app/theming/exportimport/handler.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from lxml import etree\n from plone.app.theming.interfaces import IThemeSettings\n from plone.app.theming.utils import applyTheme\n@@ -33,10 +32,10 @@ def importTheme(context):\n                 break\n \n         if themeInfo is None:\n-            raise ValueError("Theme {0:s} is not available".format(themeName))\n+            raise ValueError(f"Theme {themeName:s} is not available")\n \n         applyTheme(themeInfo)\n-        logger.info(\'Theme {0:s} applied\'.format(themeName))\n+        logger.info(f\'Theme {themeName:s} applied\')\n \n     # enable/disable theme\n     themeEnabled = tree.find("enabled")\n@@ -54,5 +53,5 @@ def importTheme(context):\n         logger.info(\'Theme disabled\')\n     else:\n         raise ValueError(\n-            "{0:s} is not a valid value for <enabled />".format(themeEnabled)\n+            f"{themeEnabled:s} is not a valid value for <enabled />"\n         )\ndiff --git a/src/plone/app/theming/header.py b/src/plone/app/theming/header.py\nindex 35ba2c93..edd4fd9e 100644\n--- a/src/plone/app/theming/header.py\n+++ b/src/plone/app/theming/header.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.theming.utils import isThemeEnabled\n \n \ndiff --git a/src/plone/app/theming/interfaces.py b/src/plone/app/theming/interfaces.py\nindex 44a8fd50..7a95ac2b 100644\n--- a/src/plone/app/theming/interfaces.py\n+++ b/src/plone/app/theming/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from datetime import datetime\n from plone.resource.manifest import ManifestFormat\n from zope import schema\n@@ -7,7 +6,7 @@\n from zope.interface import Interface\n \n \n-_ = MessageFactory(u"plone")\n+_ = MessageFactory("plone")\n \n THEME_RESOURCE_NAME = \'theme\'\n RULE_FILENAME = \'rules.xml\'\n@@ -35,43 +34,43 @@ class ITheme(Interface):\n     """\n \n     __name__ = schema.TextLine(\n-        title=_(u"Name"),\n+        title=_("Name"),\n     )\n \n     rules = schema.TextLine(\n-        title=_(u"Path to rules"),\n+        title=_("Path to rules"),\n     )\n \n     title = schema.TextLine(\n-        title=_(u"Title"),\n+        title=_("Title"),\n         required=False,\n     )\n \n     description = schema.TextLine(\n-        title=_(u"Description"),\n+        title=_("Description"),\n         required=False,\n     )\n \n     absolutePrefix = schema.TextLine(\n-        title=_(u"Absolute prefix"),\n+        title=_("Absolute prefix"),\n         required=False,\n     )\n \n     parameterExpressions = schema.Dict(\n-        title=_(u"Parameter expressions"),\n+        title=_("Parameter expressions"),\n         key_type=schema.TextLine(),\n         value_type=schema.TextLine(),\n         required=False,\n     )\n \n     doctype = schema.ASCIILine(\n-        title=_(u"Doctype"),\n+        title=_("Doctype"),\n         required=False,\n         default="",\n     )\n \n     preview = schema.ASCIILine(\n-        title=_(u"Preview image"),\n+        title=_("Preview image"),\n         required=False,\n     )\n \n@@ -81,65 +80,65 @@ class IThemeSettings(Interface):\n     """\n \n     enabled = schema.Bool(\n-        title=_(\'enabled\', u"Enabled"),\n+        title=_(\'enabled\', "Enabled"),\n         description=_(\n             \'enable_theme_globally\',\n-            u"Use this option to enable or disable the theme globally. "\n-            u"Note that the options will also affect whether the theme "\n-            u"is used when this option is enabled."\n+            "Use this option to enable or disable the theme globally. "\n+            "Note that the options will also affect whether the theme "\n+            "is used when this option is enabled."\n         ),\n         required=True,\n         default=False,\n     )\n \n     currentTheme = schema.TextLine(\n-        title=_(\'current_theme\', u"Current theme"),\n+        title=_(\'current_theme\', "Current theme"),\n         description=_(\n             \'current_theme_description\',\n-            u"The name of the current theme, i.e. the one applied most "\n-            u"recently."),\n+            "The name of the current theme, i.e. the one applied most "\n+            "recently."),\n         required=True,\n     )\n \n     rules = schema.TextLine(\n-        title=_(\'rules_file\', u"Rules file"),\n+        title=_(\'rules_file\', "Rules file"),\n         description=_(\n             \'rules_file_path\',\n-            u"File path to the rules file"\n+            "File path to the rules file"\n         ),\n         required=False,\n     )\n \n     absolutePrefix = schema.TextLine(\n-        title=_(\'absolute_url_prefix\', u"Absolute URL prefix"),\n+        title=_(\'absolute_url_prefix\', "Absolute URL prefix"),\n         description=_(\n             \'convert_relative_url\',\n-            u"Convert relative URLs in the theme file to absolute paths "\n-            u"using this prefix."\n+            "Convert relative URLs in the theme file to absolute paths "\n+            "using this prefix."\n         ),\n         required=False,\n     )\n \n     readNetwork = schema.Bool(\n-        title=_(\'readNetwork\', u"Read network"),\n+        title=_(\'readNetwork\', "Read network"),\n         description=_(\n             \'network_urls_allowed\',\n-            u"If enabled, network (http, https) urls are allowed in "\n-            u"the rules file and this config."\n+            "If enabled, network (http, https) urls are allowed in "\n+            "the rules file and this config."\n         ),\n         required=True,\n         default=False,\n     )\n \n     hostnameBlacklist = schema.List(\n-        title=_(\'hostname_blacklist\', u"Unthemed host names"),\n+        title=_(\'hostname_blacklist\', "Unthemed host names"),\n         description=_(\n             \'hostname_blacklist_description\',\n-            u"If there are hostnames that you do not want to be themed, you "\n-            u"can list them here. This is useful during theme development, "\n-            u"so that you can compare the themed and unthemed sites. In some "\n-            u"cases, you may also want to provided an unthemed host alias for "\n-            u"content administrators to be able to use \'plain\' Plone."\n+            "If there are hostnames that you do not want to be themed, you "\n+            "can list them here. This is useful during theme development, "\n+            "so that you can compare the themed and unthemed sites. In some "\n+            "cases, you may also want to provided an unthemed host alias for "\n+            "content administrators to be able to use \'plain\' Plone."\n         ),\n         value_type=schema.TextLine(),\n         required=False,\n@@ -147,15 +146,15 @@ class IThemeSettings(Interface):\n     )\n \n     parameterExpressions = schema.Dict(\n-        title=_(\'parameter_expressions\', u"Parameter expressions"),\n+        title=_(\'parameter_expressions\', "Parameter expressions"),\n         description=_(\n             \'parameter_expressions_description\',\n-            u"You can define parameters here, which will be passed to the "\n-            u"compiled theme. In your rules file, you can refer to a "\n-            u"parameter by $name. Parameters are defined using TALES "\n-            u"expressions, which should evaluate to a string, a number, a "\n-            u"boolean or None. Available variables are `context`, `request`, "\n-            u"`portal`, `portal_state`,  and `context_state`."\n+            "You can define parameters here, which will be passed to the "\n+            "compiled theme. In your rules file, you can refer to a "\n+            "parameter by $name. Parameters are defined using TALES "\n+            "expressions, which should evaluate to a string, a number, a "\n+            "boolean or None. Available variables are `context`, `request`, "\n+            "`portal`, `portal_state`,  and `context_state`."\n         ),\n         key_type=schema.ASCIILine(),\n         value_type=schema.ASCIILine(),\n@@ -164,12 +163,12 @@ class IThemeSettings(Interface):\n     )\n \n     doctype = schema.ASCIILine(\n-        title=_(\'doctype\', u"Doctype"),\n+        title=_(\'doctype\', "Doctype"),\n         description=_(\n             \'doctype_description\',\n-            u\'You can specify a Doctype string which will be set on the \'\n-            u\'for example "<!DOCTYPE html>". If left blank the default XHTML \'\n-            u\'1.0 transitional Doctype or that set in the Diazo theme is used.\'\n+            \'You can specify a Doctype string which will be set on the \'\n+            \'for example "<!DOCTYPE html>". If left blank the default XHTML \'\n+            \'1.0 transitional Doctype or that set in the Diazo theme is used.\'\n         ),\n         required=False,\n         default="",\n@@ -178,29 +177,29 @@ class IThemeSettings(Interface):\n     custom_css = schema.SourceText(\n         title=_(\n             \'label_custom_css\',\n-            u\'Custom CSS\',\n+            \'Custom CSS\',\n         ),\n         description=_(\n             \'help_custom_css\',\n-            u\'Define your own custom CSS in the field below. This is a good \'\n-            u\'place for quick customizations of things like colors and the \'\n-            u\'toolbar. Definitions here will override previously defined CSS \'\n-            u\'of Plone. Please use this only for small customizations, as it \'\n-            u\'is hard to keep track of changes here. For bigger changes you most \'\n-            u\'likely want to customize a full theme and make your changes \'\n-            u\'there.\',\n+            \'Define your own custom CSS in the field below. This is a good \'\n+            \'place for quick customizations of things like colors and the \'\n+            \'toolbar. Definitions here will override previously defined CSS \'\n+            \'of Plone. Please use this only for small customizations, as it \'\n+            \'is hard to keep track of changes here. For bigger changes you most \'\n+            \'likely want to customize a full theme and make your changes \'\n+            \'there.\',\n         ),\n-        default=u"",\n+        default="",\n         required=False,\n     )\n \n     custom_css_timestamp = schema.Datetime(\n         title=_(\n-            u\'Custom CSS Timestamp\',\n+            \'Custom CSS Timestamp\',\n         ),\n         description=_(\n-            u\'Time stamp when the custom CSS was changed. \'\n-            u\'Used to generate custom.css with timestamp in URL.\',\n+            \'Time stamp when the custom CSS was changed. \'\n+            \'Used to generate custom.css with timestamp in URL.\',\n         ),\n         defaultFactory=get_default_custom_css_timestamp,\n         required=False,\n@@ -233,8 +232,8 @@ class IThemePlugin(Interface):\n     """\n \n     dependencies = schema.Tuple(\n-        title=_(u"Dependencies"),\n-        description=_(u"Plugins on which this plugin depends"),\n+        title=_("Dependencies"),\n+        description=_("Plugins on which this plugin depends"),\n         value_type=schema.ASCIILine(),\n     )\n \ndiff --git a/src/plone/app/theming/plugins/__init__.py b/src/plone/app/theming/plugins/__init__.py\nindex 68c04af4..de40ea7c 100644\n--- a/src/plone/app/theming/plugins/__init__.py\n+++ b/src/plone/app/theming/plugins/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/src/plone/app/theming/plugins/hooks.py b/src/plone/app/theming/plugins/hooks.py\nindex 2744e43f..46c81fc9 100644\n--- a/src/plone/app/theming/plugins/hooks.py\n+++ b/src/plone/app/theming/plugins/hooks.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.theming.interfaces import THEME_RESOURCE_NAME\n from plone.app.theming.plugins.utils import getPlugins\n from plone.app.theming.plugins.utils import getPluginSettings\ndiff --git a/src/plone/app/theming/plugins/utils.py b/src/plone/app/theming/plugins/utils.py\nindex 2fa3d265..d4ad1523 100644\n--- a/src/plone/app/theming/plugins/utils.py\n+++ b/src/plone/app/theming/plugins/utils.py\n@@ -1,22 +1,10 @@\n-# -*- coding: utf-8 -*-\n+from configparser import ConfigParser\n from plone.app.theming.interfaces import IThemePlugin\n from plone.app.theming.interfaces import THEME_RESOURCE_NAME\n from plone.memoize.ram import cache\n from plone.resource.manifest import MANIFEST_FILENAME\n from zope.component import getUtilitiesFor\n \n-import six\n-\n-try:\n-    # Python 3.  Watch out for DeprecationWarning:\n-    # The SafeConfigParser class has been renamed to ConfigParser in\n-    # Python 3.2. This alias will be removed in future versions.\n-    # Use ConfigParser directly instead.\n-    from configparser import ConfigParser as SafeConfigParser\n-except ImportError:\n-    # Python 2\n-    from ConfigParser import SafeConfigParser\n-\n \n def pluginsCacheKey(fun):\n     return len(list(getUtilitiesFor(IThemePlugin)))\n@@ -52,7 +40,7 @@ def sortDependencies(plugins):\n \n     if waiting:\n         raise ValueError(\n-            "Could not resolve dependencies for: {0:s}".format(waiting)\n+            f"Could not resolve dependencies for: {waiting:s}"\n         )\n \n \n@@ -83,17 +71,10 @@ def getPluginSettings(themeDirectory, plugins=None):\n     manifestContents = {}\n \n     if themeDirectory.isFile(MANIFEST_FILENAME):\n-        parser = SafeConfigParser()\n+        parser = ConfigParser()\n         fp = themeDirectory.openFile(MANIFEST_FILENAME)\n         try:\n-            if six.PY2:\n-                if hasattr(parser, "read_file"):\n-                    # backports.configparser\n-                    parser.read_file(fp)\n-                else:\n-                    parser.readfp(fp)\n-            else:\n-                parser.read_string(fp.read().decode())\n+            parser.read_string(fp.read().decode())\n             for section in parser.sections():\n                 manifestContents[section] = {}\n                 for name, value in parser.items(section):\n@@ -107,7 +88,7 @@ def getPluginSettings(themeDirectory, plugins=None):\n     pluginSettings = {}\n     for name, plugin in plugins:\n         pluginSettings[name] = manifestContents.get(\n-            "{0:s}:{1:s}".format(THEME_RESOURCE_NAME, name),\n+            f"{THEME_RESOURCE_NAME:s}:{name:s}",\n             {}\n         )\n     return pluginSettings\ndiff --git a/src/plone/app/theming/policy.py b/src/plone/app/theming/policy.py\nindex 37c983bd..89d7eedc 100644\n--- a/src/plone/app/theming/policy.py\n+++ b/src/plone/app/theming/policy.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from App.config import getConfiguration\n from logging import getLogger\n from plone.app.theming import utils\n@@ -24,7 +23,7 @@ def invalidateCache(settings, event):\n \n \n @implementer(IThemingPolicy)\n-class ThemingPolicy(object):\n+class ThemingPolicy:\n \n     def __init__(self, request):\n         """Adapt IRequest.\n@@ -115,7 +114,7 @@ def getCache(self, theme=None):\n     def getCacheKey(self, theme=None):\n         if not theme:\n             theme = self.getCurrentTheme()\n-        key = "%s::%s" % (getSite().absolute_url(), theme)\n+        key = f"{getSite().absolute_url()}::{theme}"\n         return key\n \n     def getCacheStorage(self):\n@@ -176,7 +175,7 @@ def set_theme(self, themeName, themeObj):\n         cache.updateTheme(themeObj)\n \n \n-class ThemeCache(object):\n+class ThemeCache:\n     """Simple cache for the transform and theme\n     """\n \ndiff --git a/src/plone/app/theming/testing.py b/src/plone/app/theming/testing.py\nindex ef1fb6fd..9b230cff 100644\n--- a/src/plone/app/theming/testing.py\n+++ b/src/plone/app/theming/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import applyProfile\n from plone.app.testing import PloneSandboxLayer\ndiff --git a/src/plone/app/theming/tests/test_controlpanel.py b/src/plone/app/theming/tests/test_controlpanel.py\nindex ce0f5a41..be30e893 100644\n--- a/src/plone/app/theming/tests/test_controlpanel.py\n+++ b/src/plone/app/theming/tests/test_controlpanel.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n \n import unittest\n \ndiff --git a/src/plone/app/theming/tests/test_exportimport.py b/src/plone/app/theming/tests/test_exportimport.py\nindex d0a93bd5..10ee8bb3 100644\n--- a/src/plone/app/theming/tests/test_exportimport.py\n+++ b/src/plone/app/theming/tests/test_exportimport.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.theming.testing import THEMING_INTEGRATION_TESTING\n \n import unittest\n@@ -16,7 +15,7 @@ def test_import_filesystem(self):\n         from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.exportimport.handler import importTheme\n \n-        class FauxContext(object):\n+        class FauxContext:\n \n             def getLogger(self, name):\n                 import logging\n@@ -51,7 +50,7 @@ def test_import_no_file(self):\n         from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.exportimport.handler import importTheme\n \n-        class FauxContext(object):\n+        class FauxContext:\n \n             def getLogger(self, name):\n                 import logging\n@@ -76,7 +75,7 @@ def readDataFile(self, name):\n     def test_import_not_found(self):\n         from plone.app.theming.exportimport.handler import importTheme\n \n-        class FauxContext(object):\n+        class FauxContext:\n \n             def getLogger(self, name):\n                 import logging\n@@ -96,7 +95,7 @@ def test_import_enable(self):\n         from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.exportimport.handler import importTheme\n \n-        class FauxContext(object):\n+        class FauxContext:\n \n             def getLogger(self, name):\n                 import logging\n@@ -121,7 +120,7 @@ def test_import_disable(self):\n         from plone.app.theming.interfaces import IThemeSettings\n         from plone.app.theming.exportimport.handler import importTheme\n \n-        class FauxContext(object):\n+        class FauxContext:\n \n             def getLogger(self, name):\n                 import logging\ndiff --git a/src/plone/app/theming/tests/test_policy.py b/src/plone/app/theming/tests/test_policy.py\nindex a3d79830..324b3baf 100644\n--- a/src/plone/app/theming/tests/test_policy.py\n+++ b/src/plone/app/theming/tests/test_policy.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING\n from plone.app.theming.utils import theming_policy\n from plone.registry.interfaces import IRegistry\n@@ -31,15 +30,15 @@ def test_getSettings(self):\n         policy = theming_policy(request)\n         settings = policy.getSettings()\n         self.assertEqual(settings.currentTheme,\n-                         u\'barceloneta\')\n+                         \'barceloneta\')\n         self.assertEqual(settings.rules,\n-                         u\'/++theme++barceloneta/rules.xml\')\n+                         \'/++theme++barceloneta/rules.xml\')\n \n     def test_getCurrentTheme(self):\n         request = self.layer[\'request\']\n         policy = theming_policy(request)\n         self.assertEqual(policy.getCurrentTheme(),\n-                         u\'barceloneta\')\n+                         \'barceloneta\')\n \n     def test_isThemeEnabled(self):\n         request = self.layer[\'request\']\n@@ -65,7 +64,7 @@ def test_getCacheKey(self):\n         request = self.layer[\'request\']\n         policy = theming_policy(request)\n         self.assertEqual(policy.getCacheKey(),\n-                         u\'http://nohost/plone::barceloneta\')\n+                         \'http://nohost/plone::barceloneta\')\n \n     def test_getCacheStorage(self):\n         request = self.layer[\'request\']\n@@ -75,7 +74,7 @@ def test_getCacheStorage(self):\n         storage = policy.getCacheStorage()\n         self.assertEqual(\n             [(k, v) for (k, v) in storage.items() if k != \'mtime\'],\n-            [(u\'http://nohost/plone::barceloneta\', cache)])\n+            [(\'http://nohost/plone::barceloneta\', cache)])\n \n     def test_caching(self):\n         """roundtrip"""\n@@ -86,9 +85,9 @@ def test_caching(self):\n         storage = policy.getCacheStorage()\n         self.assertEqual(\n             [(k, v) for (k, v) in storage.items() if k != \'mtime\'],\n-            [(u\'http://nohost/plone::barceloneta\', cache)])\n+            [(\'http://nohost/plone::barceloneta\', cache)])\n         self.assertEqual(cache.themeObj, theme)\n-        policy.set_theme(u\'barceloneta\', \'faketheme\')\n+        policy.set_theme(\'barceloneta\', \'faketheme\')\n         self.assertEqual(policy.get_theme(), \'faketheme\')\n         policy.invalidateCache()\n         self.assertEqual(list(policy.getCacheStorage().keys()), [\'mtime\'])\n@@ -104,7 +103,7 @@ def test_invalidateCache_locally(self):\n         storage = policy.getCacheStorage()\n         self.assertEqual(\n             [(k, v) for (k, v) in storage.items() if k != \'mtime\'],\n-            [(u\'http://nohost/plone::barceloneta\', cache)])\n+            [(\'http://nohost/plone::barceloneta\', cache)])\n         shared_mtime_1 = policy._get_shared_invalidation()\n         policy.invalidateCache()\n         shared_mtime_2 = policy._get_shared_invalidation()\n@@ -118,7 +117,7 @@ def test_invalidateCache_threaded(self):\n         storage = policy.getCacheStorage()\n         self.assertEqual(\n             [(k, v) for (k, v) in storage.items() if k != \'mtime\'],\n-            [(u\'http://nohost/plone::barceloneta\', cache)])\n+            [(\'http://nohost/plone::barceloneta\', cache)])\n         shared_mtime_1 = policy._get_shared_invalidation()\n \n         def invalidate(registry):\ndiff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py\nindex aafd71bf..65ad719e 100644\n--- a/src/plone/app/theming/tests/test_transform.py\n+++ b/src/plone/app/theming/tests/test_transform.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from App.config import getConfiguration\n from diazo.compiler import compile_theme\n from lxml import etree\n@@ -14,16 +13,15 @@\n from plone.app.theming.utils import PythonResolver\n from plone.app.theming.utils import resolvePythonURL\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from Products.CMFCore.Expression import Expression\n from Products.CMFCore.Expression import getExprContext\n from Products.CMFCore.utils import getToolByName\n-from six.moves.urllib.error import HTTPError\n+from urllib.error import HTTPError\n from zope.component import getUtility\n \n import os.path\n import re\n-import six\n import transaction\n import unittest\n \n@@ -39,7 +37,7 @@ def setUp(self):\n         self.settings = getUtility(IRegistry).forInterface(IThemeSettings)\n \n         self.settings.enabled = False\n-        self.settings.rules = u\'python://plone.app.theming/tests/rules.xml\'\n+        self.settings.rules = \'python://plone.app.theming/tests/rules.xml\'\n         self.settings.parameterExpressions = {\n             \'stringParam\': \'string:string param value\',\n             \'boolParam\': \'python:False\',\n@@ -130,15 +128,15 @@ def test_theme_enabled_resource_directory(self):\n         applyTheme(theme)\n         self.assertEqual(\n             self.settings.rules,\n-            u\'/++theme++plone.app.theming.tests/rules.xml\'\n+            \'/++theme++plone.app.theming.tests/rules.xml\'\n         )\n         self.assertEqual(\n             self.settings.currentTheme,\n-            u"plone.app.theming.tests"\n+            "plone.app.theming.tests"\n         )\n         self.assertEqual(\n             self.settings.doctype,\n-            u"<!DOCTYPE html>"\n+            "<!DOCTYPE html>"\n         )\n         transaction.commit()\n \n@@ -155,7 +153,7 @@ def test_theme_enabled_resource_directory(self):\n         self.assertTrue("This is the theme" in browser.contents)\n \n         # Doctype\n-        self.assertTrue(re.match("<!DOCTYPE html>\\s+<html", browser.contents))\n+        self.assertTrue(re.match(r"<!DOCTYPE html>\\s+<html", browser.contents))\n \n     def test_theme_enabled_query_string_off_switch(self):\n         app = self.layer[\'app\']\n@@ -217,9 +215,9 @@ def test_python_resolver(self):\n         parser = etree.HTMLParser()\n         parser.resolvers.add(PythonResolver())\n         theme = resolvePythonURL(\n-            u\'python://plone.app.theming.tests/theme.html\'\n+            \'python://plone.app.theming.tests/theme.html\'\n         )\n-        rules = resolvePythonURL(u\'python://plone.app.theming/tests/rules.xml\')\n+        rules = resolvePythonURL(\'python://plone.app.theming/tests/rules.xml\')\n         compile_theme(rules, theme, parser=parser)\n \n     def test_theme_stored_in_plone_site(self):\n@@ -234,7 +232,7 @@ def test_theme_stored_in_plone_site(self):\n             portal.manage_addDTMLMethod(\'theme.html\', file=theme_contents)\n \n         # These paths should be relative to the Plone site root\n-        self.settings.rules = u\'/rules.xml\'\n+        self.settings.rules = \'/rules.xml\'\n         self.settings.enabled = True\n \n         transaction.commit()\n@@ -263,7 +261,7 @@ def test_theme_stored_in_plone_site_works_with_virtual_host(self):\n             portal.manage_addDTMLMethod(\'theme.html\', file=theme_contents)\n \n         # These paths should be relative to the Plone site root\n-        self.settings.rules = u\'/rules.xml\'\n+        self.settings.rules = \'/rules.xml\'\n         self.settings.enabled = True\n \n         from Products.SiteAccess import VirtualHostMonster\n@@ -276,7 +274,7 @@ def test_theme_stored_in_plone_site_works_with_virtual_host(self):\n         suffix = portalURL.split(\'/\')[-1]\n \n         vhostURL = (\n-            "{0:s}/VirtualHostBase/http/example.org:80/{1:s}/VirtualHostRoot"\n+            "{:s}/VirtualHostBase/http/example.org:80/{:s}/VirtualHostRoot"\n             "/_vh_fizz/_vh_buzz/_vh_fizzbuzz/".format(prefix, suffix)\n         )\n \n@@ -311,7 +309,7 @@ def test_absolutePrefix_enabled_uri(self):\n         portal = self.layer[\'portal\']\n \n         self.settings.enabled = True\n-        self.settings.absolutePrefix = u\'http://example.com\'\n+        self.settings.absolutePrefix = \'http://example.com\'\n \n         transaction.commit()\n \n@@ -328,7 +326,7 @@ def test_absolutePrefix_enabled_path(self):\n         portal = self.layer[\'portal\']\n \n         self.settings.enabled = True\n-        self.settings.absolutePrefix = u\'/foo\'\n+        self.settings.absolutePrefix = \'/foo\'\n \n         transaction.commit()\n \n@@ -350,14 +348,14 @@ def test_absolutePrefix_enabled_path_vhosting(self):\n         transaction.commit()\n \n         self.settings.enabled = True\n-        self.settings.absolutePrefix = u\'/foo\'\n+        self.settings.absolutePrefix = \'/foo\'\n \n         portalURL = portal.absolute_url()\n         prefix = \'/\'.join(portalURL.split(\'/\')[:-1])\n         suffix = portalURL.split(\'/\')[-1]\n \n         vhostURL = (\n-            "{0:s}/VirtualHostBase/http/example.org:80/{1:s}/VirtualHostRoot"\n+            "{:s}/VirtualHostBase/http/example.org:80/{:s}/VirtualHostRoot"\n             "/_vh_fizz/_vh_buzz/_vh_fizzbuzz/".format(prefix, suffix)\n         )\n \n@@ -377,7 +375,7 @@ def test_theme_installed_invalid_config(self):\n         portal = self.layer[\'portal\']\n \n         self.settings.enabled = True\n-        self.settings.rules = u"invalid"\n+        self.settings.rules = "invalid"\n \n         transaction.commit()\n \n@@ -529,7 +527,7 @@ def test_theme_different_path(self):\n         portal = self.layer[\'portal\']\n \n         setRoles(portal, TEST_USER_ID, (\'Manager\',))\n-        portal.invokeFactory(\'Folder\', \'news\', title=u"News")\n+        portal.invokeFactory(\'Folder\', \'news\', title="News")\n         wftool = getToolByName(portal, "portal_workflow")\n         wftool.doActionFor(portal.news, action=\'publish\')\n         setRoles(portal, TEST_USER_ID, (\'Member\',))\n@@ -566,7 +564,7 @@ def test_theme_params(self):\n         portal = self.layer[\'portal\']\n \n         self.settings.enabled = True\n-        self.settings.rules = u\'python://plone.app.theming/tests/paramrules.xml\'  # noqa\n+        self.settings.rules = \'python://plone.app.theming/tests/paramrules.xml\'  # noqa\n         self.settings.parameterExpressions = {\n             \'stringParam\': \'string:string param value\',\n             \'boolParam\': \'python:False\',\n@@ -623,7 +621,7 @@ def test_theme_for_404(self):\n         browser.addHeader(\'Accept\', \'text/html\')\n         error = None\n         try:\n-            browser.open(\'{0:s}/404_page\'.format(portal.absolute_url()))\n+            browser.open(f\'{portal.absolute_url():s}/404_page\')\n         except HTTPError as e:\n             error = e\n         self.assertEqual(error.code, 404)\n@@ -636,7 +634,7 @@ def test_theme_params_on_404(self):\n         portal = self.layer[\'portal\']\n \n         self.settings.enabled = True\n-        self.settings.rules = u\'python://plone.app.theming/tests/paramrules.xml\'  # noqa\n+        self.settings.rules = \'python://plone.app.theming/tests/paramrules.xml\'  # noqa\n         self.settings.parameterExpressions = {\n             \'stringParam\': \'string:string param value\',\n             \'boolParam\': \'python:False\',\n@@ -650,7 +648,7 @@ def test_theme_params_on_404(self):\n         browser.addHeader(\'Accept\', \'text/html\')\n         error = None\n         try:\n-            browser.open(\'{0:s}/404_page\'.format(portal.absolute_url()))\n+            browser.open(f\'{portal.absolute_url():s}/404_page\')\n         except HTTPError as e:\n             error = e\n         self.assertEqual(error.code, 404)\n@@ -699,7 +697,7 @@ def test_navroot_params_on_404_widget_in_path(self):\n         error = None\n         try:\n             browser.open(\n-                \'{0:s}/widget/oauth_login/info.txt\'.format(\n+                \'{:s}/widget/oauth_login/info.txt\'.format(\n                     portal[\'subfolder\'].absolute_url()\n                 )\n             )\n@@ -783,7 +781,7 @@ def test_includes(self):\n             portal[\'subfolder\'].manage_addDTMLMethod(\'alpha\', file=two)\n \n         # Set up transformation\n-        self.settings.rules = u\'python://plone.app.theming/tests/includes.xml\'\n+        self.settings.rules = \'python://plone.app.theming/tests/includes.xml\'\n         self.settings.enabled = True\n \n         transaction.commit()\n@@ -824,7 +822,7 @@ def test_include_non_ascii(self):\n             portal.manage_addDTMLMethod(\'french\', file=french)\n \n         # Set up transformation\n-        self.settings.rules = u\'python://plone.app.theming/tests/nonascii.xml\'\n+        self.settings.rules = \'python://plone.app.theming/tests/nonascii.xml\'\n         self.settings.enabled = True\n \n         transaction.commit()\n@@ -837,10 +835,7 @@ def test_include_non_ascii(self):\n \n         browser.open(portal.absolute_url())\n         # browser.contents is always string.  On Py 2 this means bytes, on Py 3 text.\n-        if six.PY2:\n-            self.assertIn(b\'<div id="content">Actualit\\xc3\\xa9s</div>\', browser.contents)\n-        else:\n-            self.assertIn(u\'<div id="content">Actualit\\xe9s</div>\', browser.contents)\n+        self.assertIn(\'<div id="content">Actualit\\xe9s</div>\', browser.contents)\n \n     def test_css_js_includes(self):\n \n@@ -848,7 +843,7 @@ def test_css_js_includes(self):\n         portal = self.layer[\'portal\']\n \n         self.settings.enabled = True\n-        self.settings.rules = u\'/++theme++plone.app.theming.tests/css-js.xml\'\n+        self.settings.rules = \'/++theme++plone.app.theming.tests/css-js.xml\'\n         transaction.commit()\n \n         browser = Browser(app)\n@@ -870,17 +865,14 @@ def test_non_ascii_includes(self):\n         portal = self.layer[\'portal\']\n \n         self.settings.enabled = True\n-        self.settings.rules = u\'/++theme++plone.app.theming.tests/nonascii.xml\'\n+        self.settings.rules = \'/++theme++plone.app.theming.tests/nonascii.xml\'\n         transaction.commit()\n \n         browser = Browser(app)\n         browser.open(portal.absolute_url())\n \n         # browser.contents is always string.  On Py 2 this means bytes, on Py 3 text.\n-        if six.PY2:\n-            self.assertIn(b\'<div>N\\xc3\\xbamero uno</div>\', browser.contents)\n-        else:\n-            self.assertIn(u\'<div>N\\xfamero uno</div>\', browser.contents)\n+        self.assertIn(\'<div>N\\xfamero uno</div>\', browser.contents)\n \n \n     def test_theme_enabled_query_string_debug_switch(self):\ndiff --git a/src/plone/app/theming/tests/test_utils.py b/src/plone/app/theming/tests/test_utils.py\nindex 2924f7a0..a5ec6320 100644\n--- a/src/plone/app/theming/tests/test_utils.py\n+++ b/src/plone/app/theming/tests/test_utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING\n from plone.app.theming.testing import THEMING_INTEGRATION_TESTING\n from plone.app.theming.utils import applyTheme\n@@ -27,7 +26,7 @@\n </rules>\n """\n # The theme will contain a message:\n-MESSAGE = u"Hello from a temporary directory."\n+MESSAGE = "Hello from a temporary directory."\n # We have a sample theme file here:\n HERE = os.path.dirname(__file__)\n PACKAGE_THEME_FILENAME = "package_theme.txt"\n@@ -145,8 +144,8 @@ def test_applyTheme_None(self):\n \n         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\n \n-        settings.rules = u"/++theme++foo/rules.xml"\n-        settings.absolutePrefix = u"/++theme++foo"\n+        settings.rules = "/++theme++foo/rules.xml"\n+        settings.absolutePrefix = "/++theme++foo"\n         settings.parameterExpressions = {}\n \n         applyTheme(None)\n@@ -165,7 +164,7 @@ def test_isThemeEnabled(self):\n \n         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\n         settings.enabled = True\n-        settings.rules = u"/++theme++foo/rules.xml"\n+        settings.rules = "/++theme++foo/rules.xml"\n \n         request = self.layer[\'request\']\n \n@@ -181,7 +180,7 @@ def test_isThemeEnabled_blacklist(self):\n \n         settings = getUtility(IRegistry).forInterface(IThemeSettings, False)\n         settings.enabled = True\n-        settings.rules = u"/++theme++foo/rules.xml"\n+        settings.rules = "/++theme++foo/rules.xml"\n \n         request = self.layer[\'request\']\n         request.set(\'BASE1\', \'http://nohost/path/to/site\')\n@@ -207,11 +206,11 @@ def test_createThemeFromTemplate(self):\n         self.assertTrue(title in titles)\n \n         theme = getTheme(themeName)\n-        expected_prefix = u"/++%s++%s" % (THEME_RESOURCE_NAME,\n+        expected_prefix = "/++{}++{}".format(THEME_RESOURCE_NAME,\n                                           title.replace(" ", "-"))\n         self.assertEqual(theme.absolutePrefix, expected_prefix)\n \n-        expected_rules = u"/++%s++%s/%s" % (THEME_RESOURCE_NAME,\n+        expected_rules = "/++{}++{}/{}".format(THEME_RESOURCE_NAME,\n                                             title.replace(" ", "-"),\n                                             RULE_FILENAME)\n         self.assertEqual(theme.rules, expected_rules)\n@@ -230,11 +229,11 @@ def test_createThemeFromTemplate_custom_prefix(self):\n         self.assertTrue(title in titles)\n \n         theme = getTheme(themeName)\n-        expected_prefix = u"/++%s++%s" % (THEME_RESOURCE_NAME,\n+        expected_prefix = "/++{}++{}".format(THEME_RESOURCE_NAME,\n                                           title.replace(" ", "-"))\n         self.assertEqual(theme.absolutePrefix, expected_prefix)\n \n-        expected_rules = u"/++%s++%s/%s" % (THEME_RESOURCE_NAME,\n+        expected_rules = "/++{}++{}/{}".format(THEME_RESOURCE_NAME,\n                                             title.replace(" ", "-"),\n                                             RULE_FILENAME)\n         self.assertEqual(theme.rules, expected_rules)\n@@ -242,14 +241,14 @@ def test_createThemeFromTemplate_custom_prefix(self):\n         self.assertEqual(theme.enabled_bundles, [\'plone\'])\n         self.assertEqual(theme.disabled_bundles, [\'foobar\'])\n \n-        expected_dev_css = u"/++%s++%s/css/barceloneta.css" % (\n+        expected_dev_css = "/++{}++{}/css/barceloneta.css".format(\n             THEME_RESOURCE_NAME, title.replace(" ", "-"))\n-        expected_prod_css = u"/++%s++%s/css/barceloneta.min.css" % (\n+        expected_prod_css = "/++{}++{}/css/barceloneta.min.css".format(\n             THEME_RESOURCE_NAME, title.replace(" ", "-"))\n-        expected_tinymce_content_css = u"/++%s++%s/css/barceloneta.min.css" % (\n+        expected_tinymce_content_css = "/++{}++{}/css/barceloneta.min.css".format(\n             THEME_RESOURCE_NAME, title.replace(" ", "-"))\n         expected_tinymce_styles_css = (\n-            u"/++%s++%s/css/custom-format-styles.css" % (\n+            "/++{}++{}/css/custom-format-styles.css".format(\n                 THEME_RESOURCE_NAME, title.replace(" ", "-"))\n         )\n         self.assertEqual(theme.development_css, expected_dev_css)\n@@ -257,9 +256,9 @@ def test_createThemeFromTemplate_custom_prefix(self):\n         self.assertEqual(theme.tinymce_content_css, expected_tinymce_content_css)\n         self.assertEqual(theme.tinymce_styles_css, expected_tinymce_styles_css)\n \n-        expected_dev_js = u"/++%s++%s/script.js" % (\n+        expected_dev_js = "/++{}++{}/script.js".format(\n             THEME_RESOURCE_NAME, title.replace(" ", "-"))\n-        expected_prod_js = u"/++%s++%s/script.min.js" % (\n+        expected_prod_js = "/++{}++{}/script.min.js".format(\n             THEME_RESOURCE_NAME, title.replace(" ", "-"))\n         self.assertEqual(theme.development_js, expected_dev_js)\n         self.assertEqual(theme.production_js, expected_prod_js)\n@@ -278,11 +277,11 @@ def test_createThemeFromTemplate_rel_path(self):\n         self.assertTrue(title in titles)\n \n         theme = getTheme(themeName)\n-        expected_prefix = u"/++%s++%s" % (THEME_RESOURCE_NAME,\n+        expected_prefix = "/++{}++{}".format(THEME_RESOURCE_NAME,\n                                           title.replace(" ", "-"))\n         self.assertEqual(theme.absolutePrefix, expected_prefix)\n \n-        expected_rules = u"/++%s++%s/%s" % (THEME_RESOURCE_NAME,\n+        expected_rules = "/++{}++{}/{}".format(THEME_RESOURCE_NAME,\n                                            title.replace(" ", "-"),\n                                            RULE_FILENAME)\n         self.assertEqual(theme.rules, expected_rules)\n@@ -290,14 +289,14 @@ def test_createThemeFromTemplate_rel_path(self):\n         self.assertEqual(theme.enabled_bundles, [\'plone\'])\n         self.assertEqual(theme.disabled_bundles, [\'foobar\'])\n \n-        expected_dev_css = u"++%s++%s/css/barceloneta.css" % (\n+        expected_dev_css = "++{}++{}/css/barceloneta.css".format(\n             THEME_RESOURCE_NAME, title.replace(" ", "-"))\n-        expected_prod_css = u"++%s++%s/css/barceloneta.min.css" % (\n+        expected_prod_css = "++{}++{}/css/barceloneta.min.css".format(\n             THEME_RESOURCE_NAME, title.replace(" ", "-"))\n-        expected_tinymce_content_css = u"++%s++%s/css/barceloneta.min.css" % (\n+        expected_tinymce_content_css = "++{}++{}/css/barceloneta.min.css".format(\n             THEME_RESOURCE_NAME, title.replace(" ", "-"))\n         expected_tinymce_styles_css = (\n-            u"++%s++%s/css/custom-format-styles.css" % (\n+            "++{}++{}/css/custom-format-styles.css".format(\n                 THEME_RESOURCE_NAME, title.replace(" ", "-"))\n         )\n         self.assertEqual(theme.development_css, expected_dev_css)\n@@ -305,9 +304,9 @@ def test_createThemeFromTemplate_rel_path(self):\n         self.assertEqual(theme.tinymce_content_css, expected_tinymce_content_css)\n         self.assertEqual(theme.tinymce_styles_css, expected_tinymce_styles_css)\n \n-        expected_dev_js = u"++%s++%s/script.js" % (\n+        expected_dev_js = "++{}++{}/script.js".format(\n             THEME_RESOURCE_NAME, title.replace(" ", "-"))\n-        expected_prod_js = u"++%s++%s/script.min.js" % (\n+        expected_prod_js = "++{}++{}/script.min.js".format(\n             THEME_RESOURCE_NAME, title.replace(" ", "-"))\n         self.assertEqual(theme.development_js, expected_dev_js)\n         self.assertEqual(theme.production_js, expected_prod_js)\n@@ -320,17 +319,17 @@ def test_createThemeFromTemplate_ja_str_title(self):\n             createThemeFromTemplate(title, description,\n                                             baseOn="another-theme")\n         except UnicodeEncodeError:\n-            self.fail(msg=u"Unicode Encode Error")\n+            self.fail(msg="Unicode Encode Error")\n \n     def test_createThemeFromTemplate_ja_unicode_title(self):\n         from plone.app.theming.utils import createThemeFromTemplate\n-        title = u"copy of test theme by \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e"\n-        description = u"test theme by \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e"\n+        title = "copy of test theme by \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e"\n+        description = "test theme by \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e"\n         try:\n             createThemeFromTemplate(title, description,\n                                             baseOn="another-theme")\n         except UnicodeEncodeError:\n-            self.fail(msg=u"Unicode Encode Error")\n+            self.fail(msg="Unicode Encode Error")\n \n \n class TestUnit(unittest.TestCase):\n@@ -348,7 +347,7 @@ def test_extractThemeInfo_default_rules(self):\n             theme = extractThemeInfo(zf)\n \n             self.assertEqual(theme.__name__, \'default_rules\')\n-            self.assertEqual(theme.rules, u\'/++theme++default_rules/rules.xml\')\n+            self.assertEqual(theme.rules, \'/++theme++default_rules/rules.xml\')\n             self.assertEqual(theme.absolutePrefix, \'/++theme++default_rules\')\n \n     def test_extractThemeInfo_manifest_rules(self):\n@@ -371,7 +370,7 @@ def test_extractThemeInfo_manifest_prefix(self):\n             self.assertEqual(theme.__name__, \'manifest_prefix\')\n             self.assertEqual(\n                 theme.rules,\n-                u\'/++theme++manifest_prefix/rules.xml\'\n+                \'/++theme++manifest_prefix/rules.xml\'\n             )\n             self.assertEqual(theme.absolutePrefix, \'/foo\')\n             self.assertEqual(theme.title,  \'Test theme\')\n@@ -385,7 +384,7 @@ def test_extractThemeInfo_manifest_default_rules(self):\n             self.assertEqual(theme.__name__, \'manifest_default_rules\')\n             self.assertEqual(\n                 theme.rules,\n-                u\'/++theme++manifest_default_rules/rules.xml\'\n+                \'/++theme++manifest_default_rules/rules.xml\'\n             )\n             self.assertEqual(\n                 theme.absolutePrefix,\n@@ -402,7 +401,7 @@ def test_extractThemeInfo_manifest_preview(self):\n             self.assertEqual(theme.__name__, \'manifest_preview\')\n             self.assertEqual(\n                 theme.rules,\n-                u\'/++theme++manifest_preview/rules.xml\'\n+                \'/++theme++manifest_preview/rules.xml\'\n             )\n             self.assertEqual(\n                 theme.absolutePrefix,\n@@ -442,7 +441,7 @@ def test_extractThemeInfo_ignores_dotfiles_resource_forks(self):\n             theme = extractThemeInfo(zf)\n \n             self.assertEqual(theme.__name__, \'default_rules\')\n-            self.assertEqual(theme.rules, u\'/++theme++default_rules/rules.xml\')\n+            self.assertEqual(theme.rules, \'/++theme++default_rules/rules.xml\')\n             self.assertEqual(theme.absolutePrefix, \'/++theme++default_rules\')\n \n     def test_extractThemeInfo_with_subdirectories(self):\n@@ -454,7 +453,7 @@ def test_extractThemeInfo_with_subdirectories(self):\n             self.assertEqual(theme.__name__, \'subdirectories\')\n             self.assertEqual(\n                 theme.rules,\n-                u\'/++theme++subdirectories/rules.xml\'\n+                \'/++theme++subdirectories/rules.xml\'\n             )\n             self.assertEqual(theme.absolutePrefix, \'/++theme++subdirectories\')\n \n@@ -478,7 +477,7 @@ def get_admin_browser(self):\n         browser.handleErrors = False\n         browser.addHeader(\n             "Authorization",\n-            "Basic {0}:{1}".format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}",\n         )\n         return browser\n \ndiff --git a/src/plone/app/theming/theme.py b/src/plone/app/theming/theme.py\nindex 9d955397..f18be8e4 100644\n--- a/src/plone/app/theming/theme.py\n+++ b/src/plone/app/theming/theme.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.app.theming.interfaces import ITheme\n from zope.interface import implementer\n \n \n @implementer(ITheme)\n-class Theme(object):\n+class Theme:\n     """A theme, loaded from a resource directory\n     """\n \n@@ -46,4 +45,4 @@ def __init__(\n         self.tinymce_styles_css = tinymce_styles_css\n \n     def __repr__(self):\n-        return \'<Theme "{0:s}">\'.format(self.__name__)\n+        return f\'<Theme "{self.__name__:s}">\'\ndiff --git a/src/plone/app/theming/transform.py b/src/plone/app/theming/transform.py\nindex 9a09dd42..4adecb2f 100644\n--- a/src/plone/app/theming/transform.py\n+++ b/src/plone/app/theming/transform.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from App.config import getConfiguration\n from lxml import etree\n from os import environ\n@@ -26,7 +25,7 @@\n \n @implementer(ITransform)\n @adapter(Interface, IThemingLayer)\n-class ThemeTransform(object):\n+class ThemeTransform:\n     """Late stage in the 8000\'s transform chain. When plone.app.blocks is\n     used, we can benefit from lxml parsing having taken place already.\n     """\ndiff --git a/src/plone/app/theming/traversal.py b/src/plone/app/theming/traversal.py\nindex 996eef63..bf76f6a5 100644\n--- a/src/plone/app/theming/traversal.py\n+++ b/src/plone/app/theming/traversal.py\n@@ -1,9 +1,8 @@\n-# -*- coding: utf-8 -*-\n from plone.app.theming.interfaces import THEME_RESOURCE_NAME\n from plone.app.theming.utils import theming_policy\n from plone.resource.traversal import ResourceTraverser\n from plone.resource.utils import queryResourceDirectory\n-from six.moves import urllib\n+from urllib.parse import quote\n from zExceptions import NotFound\n \n \n@@ -27,7 +26,7 @@ def traverse(self, name, remaining):\n             name = self.current_theme()\n \n         # Note: also fixes possible unicode problems\n-        name = urllib.parse.quote(name)\n+        name = quote(name)\n \n         res = queryResourceDirectory(self.name, name)\n         if res is not None:\ndiff --git a/src/plone/app/theming/upgrade.py b/src/plone/app/theming/upgrade.py\nindex 8bbed906..c136e2e0 100644\n--- a/src/plone/app/theming/upgrade.py\n+++ b/src/plone/app/theming/upgrade.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n \n \ndiff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py\nindex d58355c9..9abb15a5 100644\n--- a/src/plone/app/theming/utils.py\n+++ b/src/plone/app/theming/utils.py\n@@ -1,6 +1,8 @@\n-# -*- coding: utf-8 -*-\n+from configparser import ConfigParser\n from diazo.compiler import compile_theme\n from diazo.compiler import quote_param\n+from io import BytesIO\n+from io import StringIO\n from lxml import etree\n from plone.app.theming.interfaces import INoRequest\n from plone.app.theming.interfaces import IThemingPolicy\n@@ -23,10 +25,10 @@\n from plone.subrequest import subrequest\n from Products.CMFCore.interfaces import IContentish\n from Products.CMFCore.interfaces import ISiteRoot\n-from Products.CMFPlone.utils import safe_encode\n-from Products.CMFPlone.utils import safe_unicode\n+from plone.base.utils import safe_bytes\n+from plone.base.utils import safe_text\n from Products.PageTemplates.Expressions import getEngine\n-from six.moves.urllib.parse import urlsplit\n+from urllib.parse import urlsplit\n from zope.component import getUtility\n from zope.component import queryMultiAdapter\n from zope.globalrequest import getRequest\n@@ -35,24 +37,14 @@\n import logging\n import os\n import pkg_resources\n-import six\n \n-try:\n-    # Python 3.  Watch out for DeprecationWarning:\n-    # The SafeConfigParser class has been renamed to ConfigParser in\n-    # Python 3.2. This alias will be removed in future versions.\n-    # Use ConfigParser directly instead.\n-    from configparser import ConfigParser as SafeConfigParser\n-except ImportError:\n-    # Python 2\n-    from ConfigParser import SafeConfigParser\n \n \n LOGGER = logging.getLogger(\'plone.app.theming\')\n \n \n @implementer(INoRequest)\n-class NoRequest(object):\n+class NoRequest:\n     """Fallback to enable querying for the policy adapter\n     even in the absence of a proper IRequest."""\n \n@@ -169,7 +161,7 @@ def resolve(self, system_url, public_id, context):\n \n         context = findContext(request)\n         portalState = queryMultiAdapter(\n-            (context, request), name=u"plone_portal_state")\n+            (context, request), name="plone_portal_state")\n \n         if portalState is None:\n             root = None\n@@ -182,14 +174,14 @@ def resolve(self, system_url, public_id, context):\n             if len(context_path) == 0:\n                 system_url = \'/\' + system_url\n             else:\n-                system_url = \'/{0:s}/{1:s}\'.format(\n+                system_url = \'/{:s}/{:s}\'.format(\n                     \'/\'.join(context_path),\n                     system_url\n                 )\n \n         response = subrequest(system_url, root=root)\n         if response.status != 200:\n-            LOGGER.error("Couldn\'t resolve {0:s}".format(system_url))\n+            LOGGER.error(f"Couldn\'t resolve {system_url:s}")\n             return None\n         result = response.getBody()\n         content_type = response.headers.get(\'content-type\')\n@@ -202,7 +194,7 @@ def resolve(self, system_url, public_id, context):\n             # e.g. charset=utf-8\n             encoding = encoding.split(\'=\', 1)[1].strip()\n         result = result.decode(encoding)\n-        if six.PY2 or content_type == \'text/html\':\n+        if content_type == \'text/html\':\n             # Note: at first the xmlcharrefreplace was only done on Python 2,\n             # but Python 3 needs it as well, but only for html.\n             # See https://github.com/plone/Products.CMFPlone/issues/3068\n@@ -231,7 +223,7 @@ def getPortal():\n     context = findContext(request)\n     portalState = queryMultiAdapter(\n         (context, request),\n-        name=u"plone_portal_state"\n+        name="plone_portal_state"\n     )\n     if portalState is None:\n         return None\n@@ -306,9 +298,9 @@ def createExpressionContext(context, request):\n     """\n \n     contextState = queryMultiAdapter(\n-        (context, request), name=u"plone_context_state")\n+        (context, request), name="plone_context_state")\n     portalState = queryMultiAdapter(\n-        (context, request), name=u"plone_portal_state")\n+        (context, request), name="plone_portal_state")\n \n     data = {\n         \'context\': context,\n@@ -355,15 +347,10 @@ def extractThemeInfo(zipfile, checkRules=True):\n         if checkRules:\n             try:\n                 zipfile.getinfo(\n-                    "{0:s}/{1:s}".format(name, RULE_FILENAME)\n+                    f"{name:s}/{RULE_FILENAME:s}"\n                 )\n             except KeyError:\n                 raise ValueError("Could not find theme name and rules file")\n-        rules = u"/++{0:s}++{1:s}/{0:s}".format(\n-            THEME_RESOURCE_NAME,\n-            name,\n-            RULE_FILENAME\n-        )\n     return getTheme(name, manifest)\n \n \n@@ -384,14 +371,14 @@ def getTheme(name, manifest=None, resources=None):\n     description = manifest.get(\'description\', None)\n     rules = manifest.get(\'rules\', None)\n     if rules is None:\n-        rules = u"/++{0:s}++{1:s}/{2:s}".format(\n+        rules = "/++{:s}++{:s}/{:s}".format(\n             THEME_RESOURCE_NAME,\n             name,\n             RULE_FILENAME,\n         )\n     prefix = manifest.get(\'prefix\', None)\n     if prefix is None:\n-        prefix = u"/++{0:s}++{1:s}".format(THEME_RESOURCE_NAME, name)\n+        prefix = f"/++{THEME_RESOURCE_NAME:s}++{name:s}"\n     params = manifest.get(\'parameters\', None) or {}\n     doctype = manifest.get(\'doctype\', None) or ""\n     preview = manifest.get(\'preview\', None)\n@@ -405,9 +392,9 @@ def getTheme(name, manifest=None, resources=None):\n     production_js = manifest.get(\'production-js\', None) or \'\'\n     tinymce_content_css = manifest.get(\'tinymce-content-css\', None) or \'\'\n     tinymce_styles_css = manifest.get(\'tinymce-styles-css\', None) or \'\'\n-    if isinstance(rules, six.binary_type):\n+    if isinstance(rules, bytes):\n         rules = rules.decode(\'utf-8\')\n-    if isinstance(prefix, six.binary_type):\n+    if isinstance(prefix, bytes):\n         prefix = prefix.decode(\'utf-8\')\n     return Theme(\n         name,\n@@ -437,7 +424,7 @@ def getAvailableThemes():\n     for theme in resources:\n         themes.append(getTheme(theme[\'name\'], theme))\n \n-    themes.sort(key=lambda x: safe_unicode(x.title))\n+    themes.sort(key=lambda x: safe_text(x.title))\n     return themes\n \n def getThemeResources(format, defaults=None, filter=None, manifestFilename=MANIFEST_FILENAME):\n@@ -538,13 +525,13 @@ def applyTheme(theme):\n \n     else:\n \n-        if not isinstance(theme.rules, six.text_type):\n+        if not isinstance(theme.rules, str):\n             theme.rules = theme.rules.decode(\'utf-8\')\n \n-        if not isinstance(theme.absolutePrefix, six.text_type):\n+        if not isinstance(theme.absolutePrefix, str):\n             theme.absolutePrefix = theme.absolutePrefix.decode(\'utf-8\')\n \n-        if not isinstance(theme.__name__, six.text_type):\n+        if not isinstance(theme.__name__, str):\n             theme.__name__ = theme.__name__.decode(\'utf-8\')\n \n         settings.currentTheme = theme.__name__\n@@ -579,12 +566,9 @@ def createThemeFromTemplate(title, description, baseOn=\'template\'):\n \n     source = queryResourceDirectory(THEME_RESOURCE_NAME, baseOn)\n     if source is None:\n-        raise KeyError("Theme {0:s} not found".format(baseOn))\n+        raise KeyError(f"Theme {baseOn:s} not found")\n \n     themeName = getUtility(IURLNormalizer).normalize(title)\n-    if six.PY2 and isinstance(themeName, six.text_type):\n-        themeName = themeName.encode(\'utf-8\')\n-\n     resources = getOrCreatePersistentResourceDirectory()\n \n     resources.makeDirectory(themeName)\n@@ -592,48 +576,32 @@ def createThemeFromTemplate(title, description, baseOn=\'template\'):\n \n     cloneResourceDirectory(source, target)\n \n-    manifest = SafeConfigParser()\n+    manifest = ConfigParser()\n \n     if MANIFEST_FILENAME in target:\n-        if six.PY2:\n-            fp = target.openFile(MANIFEST_FILENAME)\n-            try:\n-                if hasattr(manifest, "read_file"):\n-                    # backports.configparser\n-                    manifest.read_file(fp)\n-                else:\n-                    manifest.readfp(fp)\n-            finally:\n-                fp.close()\n-\n-        else:\n-            # configparser can only read/write text\n-            # but in py3 plone.resource objects are BytesIO objects.\n-            fp = target.openFile(MANIFEST_FILENAME)\n-            try:\n-                data = fp.read()\n-            finally:\n-                fp.close()\n-            manifest.read_string(safe_unicode(data))\n+        # configparser can only read/write text\n+        # but in py3 plone.resource objects are BytesIO objects.\n+        fp = target.openFile(MANIFEST_FILENAME)\n+        try:\n+            data = fp.read()\n+        finally:\n+            fp.close()\n+        manifest.read_string(safe_text(data))\n \n     if not manifest.has_section(\'theme\'):\n         manifest.add_section(\'theme\')\n \n-    if six.PY2 and isinstance(title, six.text_type):\n-        title = title.encode(\'utf-8\')\n-    if six.PY2 and isinstance(description, six.text_type):\n-        description = description.encode(\'utf-8\')\n     manifest.set(\'theme\', \'title\', title)\n     manifest.set(\'theme\', \'description\', description)\n \n     if manifest.has_option(\'theme\', \'prefix\'):\n-        prefix = u"/++%s++%s" % (THEME_RESOURCE_NAME, themeName)\n+        prefix = f"/++{THEME_RESOURCE_NAME}++{themeName}"\n         manifest.set(\'theme\', \'prefix\', prefix)\n \n     if manifest.has_option(\'theme\', \'rules\'):\n         rule = manifest.get(\'theme\', \'rules\')\n         rule_file_name = rule.split(\'/\')[-1]  # extract real rules file name\n-        rules = u"/++%s++%s/%s" % (THEME_RESOURCE_NAME, themeName,\n+        rules = "/++{}++{}/{}".format(THEME_RESOURCE_NAME, themeName,\n                                    rule_file_name)\n         manifest.set(\'theme\', \'rules\', rules)\n \n@@ -645,21 +613,21 @@ def createThemeFromTemplate(title, description, baseOn=\'template\'):\n         val = manifest.get(\'theme\', var_path)\n         if not val:\n             continue\n-        template_prefix = \'++%s++%s/\' % (THEME_RESOURCE_NAME, baseOn)\n+        template_prefix = f\'++{THEME_RESOURCE_NAME}++{baseOn}/\'\n         if template_prefix in val:\n             # okay, fix\n-            val = val.replace(template_prefix, \'++%s++%s/\' % (THEME_RESOURCE_NAME, themeName))\n+            val = val.replace(template_prefix, f\'++{THEME_RESOURCE_NAME}++{themeName}/\')\n             manifest.set(\'theme\', var_path, val)\n \n     # plone.resource uses OFS.File which is a BytesIO objects\n     # but configparser can only deal with text (StringIO).\n     # So we need to do this stupid dance to write manifest.cfg\n-    tempfile = six.StringIO()\n+    tempfile = StringIO()\n     manifest.write(tempfile)\n     tempfile.seek(0)\n     data = tempfile.read()\n     tempfile.close()\n-    manifestContents = six.BytesIO(safe_encode(data))\n+    manifestContents = BytesIO(safe_bytes(data))\n \n     target.writeFile(MANIFEST_FILENAME, manifestContents)\n     return themeName\n@@ -709,7 +677,7 @@ def compileThemeTransform(\n \n     if absolutePrefix:\n         absolutePrefix = expandAbsolutePrefix(absolutePrefix)\n-    params = set([\'url\', \'base\', \'path\', \'scheme\', \'host\'])\n+    params = {\'url\', \'base\', \'path\', \'scheme\', \'host\'}\n     params.update(parameterExpressions.keys())\n     xslParams = {k: \'\' for k in params}\n \ndiff --git a/src/plone/app/theming/zmi.py b/src/plone/app/theming/zmi.py\nindex 72859e6d..1973ff63 100644\n--- a/src/plone/app/theming/zmi.py\n+++ b/src/plone/app/theming/zmi.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from App.special_dtml import DTMLFile\n from zope.globalrequest import getRequest\n \n'

