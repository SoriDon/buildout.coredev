Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2018-11-10T10:30:47+09:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/71b97367d72368071728964b57a5f5766ba9ac64

Pass wsgi flag to ctl script instead of guessing based on presence of ZServer

Files changed:
M src/plone/recipe/zope2instance/ctl.py
M src/plone/recipe/zope2instance/recipe.py
M src/plone/recipe/zope2instance/tests/test_wsgischema.py

b'diff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py\nindex 5ad92ec..c333207 100644\n--- a/src/plone/recipe/zope2instance/ctl.py\n+++ b/src/plone/recipe/zope2instance/ctl.py\n@@ -61,21 +61,8 @@\n         \'ERROR: You are not member of the "Administrators" group, \'\n         \'or you have not run the shell as Administrator.\')\n \n-try:\n-    import ZServer  # noqa\n-    HAS_ZSERVER = True\n-except ImportError:\n-    HAS_ZSERVER = False\n \n-if HAS_ZSERVER:\n-    from ZServer.Zope2.Startup.options import ZopeOptions\n-else:\n-    class ZopeOptions(ZDOptions):\n-        schemadir = os.path.dirname(os.path.abspath(__file__))\n-        schemafile = \'wsgischema.xml\'\n-\n-\n-class ZopeCtlOptions(ZopeOptions, ZDCtlOptions):\n+class ZopeCtlOptions(ZDCtlOptions):\n     # Zope controller options.\n     #\n     # After initialization, this should look very much like a\n@@ -101,14 +88,17 @@ class ZopeCtlOptions(ZopeOptions, ZDCtlOptions):\n     logsectionname = None\n \n     def __init__(self):\n-        ZopeOptions.__init__(self)\n+        # Can\'t use super because our base class is a old-style class\n+        # in Python 2\n+        self.ZopeOptions = self.__class__.__bases__[-1]\n+        self.ZopeOptions.__init__(self)\n         ZDCtlOptions.__init__(self)\n         self.add("interactive", None, "i", "interactive", flag=1)\n         self.add("default_to_interactive", "runner.default_to_interactive",\n                  default=1)\n \n     def realize(self, *args, **kw):\n-        ZopeOptions.realize(self, *args, **kw)\n+        self.ZopeOptions.realize(self, *args, **kw)\n         # Additional checking of user option; set uid and gid\n         if self.user is not None:\n             import pwd\n@@ -174,6 +164,24 @@ def _conditional_load(self):\n             resource.close()\n \n \n+try:\n+    import ZServer  # noqa\n+    HAS_ZSERVER = True\n+except ImportError:\n+    HAS_ZSERVER = False\n+else:\n+    from ZServer.Zope2.Startup.options import ZopeOptions\n+\n+    class ZServerCtlOptions(ZopeCtlOptions, ZopeOptions):\n+        schemadir = ZopeOptions.schemadir\n+        schemafile = ZopeOptions.schemafile\n+\n+\n+class WSGICtlOptions(ZopeCtlOptions, ZDOptions):\n+    schemadir = os.path.dirname(os.path.abspath(__file__))\n+    schemafile = \'wsgischema.xml\'\n+\n+\n class ZopeCmd(ZDCmd):\n \n     _exitstatus = 0\n@@ -630,16 +638,16 @@ def get_startup_cmd(self, python, more, pyflags=""):\n         # will act as escapes.  Use r\'\' instead.\n         # Also, don\'t forget that \'python\'\n         # may have spaces and needs to be quoted.\n-        if HAS_ZSERVER:\n+        if self.options.wsgi:\n             cmd = (\n-                "from Zope2 import configure; "\n-                "configure(r\'%s\'); "\n+                "from Zope2.Startup.run import configure_wsgi; "\n+                "configure_wsgi(r\'%s\'); "\n                 "import Zope2; app=Zope2.app(); "\n             )\n         else:\n             cmd = (\n-                "from Zope2.Startup.run import configure_wsgi; "\n-                "configure_wsgi(r\'%s\'); "\n+                "from Zope2 import configure; "\n+                "configure(r\'%s\'); "\n                 "import Zope2; app=Zope2.app(); "\n             )\n         cmdline = (\n@@ -794,7 +802,7 @@ def do_foreground(self, arg, debug=True):\n         local_additions = []\n \n         if debug:\n-            if HAS_ZSERVER and not program.count(\'-X\'):\n+            if not self.options.wsgi and not program.count(\'-X\'):\n                 local_additions += [\'-X\']\n             if not program.count(\'debug-mode=on\'):\n                 local_additions += [\'debug-mode=on\']\n@@ -855,10 +863,14 @@ def main(args=None):\n     """Customized entry point for launching Zope without forking other processes\n     """\n \n-    options = ZopeCtlOptions()\n+    if \'--wsgi\' in args:\n+        options = WSGICtlOptions()\n+    else:\n+        options = ZServerCtlOptions()\n     options.add(name="no_request", short="R", long="no-request", flag=1)\n     options.add(name="no_login", short="L", long="no-login", flag=1)\n     options.add(name="object_path", short="O:", long="object-path=")\n+    options.add(name="wsgi", short=\'w\', long=\'wsgi\', flag=1)\n     # Realize arguments and set documentation which is used in the -h option\n     options.realize(args, doc=__doc__)\n \n@@ -866,20 +878,20 @@ def main(args=None):\n     options.interpreter = os.path.join(options.directory, \'bin\', \'interpreter\')\n     if sys.platform == \'win32\':\n         options.interpreter += \'-script.py\'\n-    if HAS_ZSERVER:\n-        from ZServer.Zope2.Startup import run\n-        script = os.path.join(os.path.dirname(run.__file__), \'run.py\')\n-        options.program = [\n-            options.python, options.interpreter, script, \'-C\',\n-            options.configfile\n-        ]\n-    else:\n+    if options.wsgi:\n         from Zope2.Startup import serve\n         script = os.path.join(os.path.dirname(serve.__file__), \'serve.py\')\n         wsgi_ini = os.path.join(options.directory, \'etc\', \'wsgi.ini\')\n         options.program = [\n             options.python, options.interpreter, script, wsgi_ini\n         ]\n+    else:\n+        from ZServer.Zope2.Startup import run\n+        script = os.path.join(os.path.dirname(run.__file__), \'run.py\')\n+        options.program = [\n+            options.python, options.interpreter, script, \'-C\',\n+            options.configfile\n+        ]\n \n     c = ZopeCmd(options)\n \ndiff --git a/src/plone/recipe/zope2instance/recipe.py b/src/plone/recipe/zope2instance/recipe.py\nindex 01dd096..d8a0d94 100644\n--- a/src/plone/recipe/zope2instance/recipe.py\n+++ b/src/plone/recipe/zope2instance/recipe.py\n@@ -648,6 +648,8 @@ def __repr__(self):\n         arguments = ["-C", zope_conf_path, \'-p\', program_path]\n         if zopectl_umask:\n             arguments.extend(["--umask", int(zopectl_umask, 8)])\n+        if self.wsgi:\n+            arguments.append("--wsgi")\n         script_arguments = (\'\\n        \' + repr(arguments) +\n                             \'\\n        + sys.argv[1:]\')\n \n@@ -1066,7 +1068,6 @@ def render_file_storage(self, file_storage, blob_storage,\n %(port_base)s\n %(effective_user)s\n %(environment_vars)s\n-%(deprecation_warnings)s\n \n %(mailinglogger_import)s\n \ndiff --git a/src/plone/recipe/zope2instance/tests/test_wsgischema.py b/src/plone/recipe/zope2instance/tests/test_wsgischema.py\nindex cef8fdf..44cb947 100644\n--- a/src/plone/recipe/zope2instance/tests/test_wsgischema.py\n+++ b/src/plone/recipe/zope2instance/tests/test_wsgischema.py\n@@ -12,7 +12,7 @@\n #\n ##############################################################################\n \n-from plone.recipe.zope2instance.ctl import ZopeCtlOptions\n+from plone.recipe.zope2instance.ctl import WSGICtlOptions\n import os\n import tempfile\n import unittest\n@@ -32,7 +32,7 @@\n def getSchema():\n     global _SCHEMA\n     if not _SCHEMA:\n-        opts = ZopeCtlOptions()\n+        opts = WSGICtlOptions()\n         opts.load_schema()\n         _SCHEMA = opts.schema\n     return _SCHEMA\n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2018-11-10T10:34:40+09:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/b066acecf9839fde8fc61d2d36c32408ede0b230

changelog

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 2b8e48a..9621d6a 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,9 +14,16 @@ New features:\n \n Bug fixes:\n \n+- Fixed serving Plone with WSGI when ZServer is also installed on Python 2.\n+  [davisagli]\n+\n - Remove `path` option from zope.conf generated when using WSGI as it is no longer understood.\n   [icemac]\n \n+- Remove `deprecation-warnings` option from zope.conf generated\n+  when using WSGI as it is no longer understood.\n+  [davisagli]\n+\n \n 6.0.0 (2018-11-08)\n ------------------\n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2018-11-10T11:27:38+09:00
Author: David Glick (davisagli) <dglick@salesforce.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/0dbd873cf60fd7ba13594bc4a6d322920f45184c

Merge pull request #54 from plone/fix-wsgi-option

Pass wsgi flag to ctl script instead of guessing based on presence of ZServer

Files changed:
M CHANGES.rst
M src/plone/recipe/zope2instance/ctl.py
M src/plone/recipe/zope2instance/recipe.py
M src/plone/recipe/zope2instance/tests/test_wsgischema.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 2b8e48a..9621d6a 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,9 +14,16 @@ New features:\n \n Bug fixes:\n \n+- Fixed serving Plone with WSGI when ZServer is also installed on Python 2.\n+  [davisagli]\n+\n - Remove `path` option from zope.conf generated when using WSGI as it is no longer understood.\n   [icemac]\n \n+- Remove `deprecation-warnings` option from zope.conf generated\n+  when using WSGI as it is no longer understood.\n+  [davisagli]\n+\n \n 6.0.0 (2018-11-08)\n ------------------\ndiff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py\nindex 5ad92ec..c333207 100644\n--- a/src/plone/recipe/zope2instance/ctl.py\n+++ b/src/plone/recipe/zope2instance/ctl.py\n@@ -61,21 +61,8 @@\n         \'ERROR: You are not member of the "Administrators" group, \'\n         \'or you have not run the shell as Administrator.\')\n \n-try:\n-    import ZServer  # noqa\n-    HAS_ZSERVER = True\n-except ImportError:\n-    HAS_ZSERVER = False\n \n-if HAS_ZSERVER:\n-    from ZServer.Zope2.Startup.options import ZopeOptions\n-else:\n-    class ZopeOptions(ZDOptions):\n-        schemadir = os.path.dirname(os.path.abspath(__file__))\n-        schemafile = \'wsgischema.xml\'\n-\n-\n-class ZopeCtlOptions(ZopeOptions, ZDCtlOptions):\n+class ZopeCtlOptions(ZDCtlOptions):\n     # Zope controller options.\n     #\n     # After initialization, this should look very much like a\n@@ -101,14 +88,17 @@ class ZopeCtlOptions(ZopeOptions, ZDCtlOptions):\n     logsectionname = None\n \n     def __init__(self):\n-        ZopeOptions.__init__(self)\n+        # Can\'t use super because our base class is a old-style class\n+        # in Python 2\n+        self.ZopeOptions = self.__class__.__bases__[-1]\n+        self.ZopeOptions.__init__(self)\n         ZDCtlOptions.__init__(self)\n         self.add("interactive", None, "i", "interactive", flag=1)\n         self.add("default_to_interactive", "runner.default_to_interactive",\n                  default=1)\n \n     def realize(self, *args, **kw):\n-        ZopeOptions.realize(self, *args, **kw)\n+        self.ZopeOptions.realize(self, *args, **kw)\n         # Additional checking of user option; set uid and gid\n         if self.user is not None:\n             import pwd\n@@ -174,6 +164,24 @@ def _conditional_load(self):\n             resource.close()\n \n \n+try:\n+    import ZServer  # noqa\n+    HAS_ZSERVER = True\n+except ImportError:\n+    HAS_ZSERVER = False\n+else:\n+    from ZServer.Zope2.Startup.options import ZopeOptions\n+\n+    class ZServerCtlOptions(ZopeCtlOptions, ZopeOptions):\n+        schemadir = ZopeOptions.schemadir\n+        schemafile = ZopeOptions.schemafile\n+\n+\n+class WSGICtlOptions(ZopeCtlOptions, ZDOptions):\n+    schemadir = os.path.dirname(os.path.abspath(__file__))\n+    schemafile = \'wsgischema.xml\'\n+\n+\n class ZopeCmd(ZDCmd):\n \n     _exitstatus = 0\n@@ -630,16 +638,16 @@ def get_startup_cmd(self, python, more, pyflags=""):\n         # will act as escapes.  Use r\'\' instead.\n         # Also, don\'t forget that \'python\'\n         # may have spaces and needs to be quoted.\n-        if HAS_ZSERVER:\n+        if self.options.wsgi:\n             cmd = (\n-                "from Zope2 import configure; "\n-                "configure(r\'%s\'); "\n+                "from Zope2.Startup.run import configure_wsgi; "\n+                "configure_wsgi(r\'%s\'); "\n                 "import Zope2; app=Zope2.app(); "\n             )\n         else:\n             cmd = (\n-                "from Zope2.Startup.run import configure_wsgi; "\n-                "configure_wsgi(r\'%s\'); "\n+                "from Zope2 import configure; "\n+                "configure(r\'%s\'); "\n                 "import Zope2; app=Zope2.app(); "\n             )\n         cmdline = (\n@@ -794,7 +802,7 @@ def do_foreground(self, arg, debug=True):\n         local_additions = []\n \n         if debug:\n-            if HAS_ZSERVER and not program.count(\'-X\'):\n+            if not self.options.wsgi and not program.count(\'-X\'):\n                 local_additions += [\'-X\']\n             if not program.count(\'debug-mode=on\'):\n                 local_additions += [\'debug-mode=on\']\n@@ -855,10 +863,14 @@ def main(args=None):\n     """Customized entry point for launching Zope without forking other processes\n     """\n \n-    options = ZopeCtlOptions()\n+    if \'--wsgi\' in args:\n+        options = WSGICtlOptions()\n+    else:\n+        options = ZServerCtlOptions()\n     options.add(name="no_request", short="R", long="no-request", flag=1)\n     options.add(name="no_login", short="L", long="no-login", flag=1)\n     options.add(name="object_path", short="O:", long="object-path=")\n+    options.add(name="wsgi", short=\'w\', long=\'wsgi\', flag=1)\n     # Realize arguments and set documentation which is used in the -h option\n     options.realize(args, doc=__doc__)\n \n@@ -866,20 +878,20 @@ def main(args=None):\n     options.interpreter = os.path.join(options.directory, \'bin\', \'interpreter\')\n     if sys.platform == \'win32\':\n         options.interpreter += \'-script.py\'\n-    if HAS_ZSERVER:\n-        from ZServer.Zope2.Startup import run\n-        script = os.path.join(os.path.dirname(run.__file__), \'run.py\')\n-        options.program = [\n-            options.python, options.interpreter, script, \'-C\',\n-            options.configfile\n-        ]\n-    else:\n+    if options.wsgi:\n         from Zope2.Startup import serve\n         script = os.path.join(os.path.dirname(serve.__file__), \'serve.py\')\n         wsgi_ini = os.path.join(options.directory, \'etc\', \'wsgi.ini\')\n         options.program = [\n             options.python, options.interpreter, script, wsgi_ini\n         ]\n+    else:\n+        from ZServer.Zope2.Startup import run\n+        script = os.path.join(os.path.dirname(run.__file__), \'run.py\')\n+        options.program = [\n+            options.python, options.interpreter, script, \'-C\',\n+            options.configfile\n+        ]\n \n     c = ZopeCmd(options)\n \ndiff --git a/src/plone/recipe/zope2instance/recipe.py b/src/plone/recipe/zope2instance/recipe.py\nindex 01dd096..d8a0d94 100644\n--- a/src/plone/recipe/zope2instance/recipe.py\n+++ b/src/plone/recipe/zope2instance/recipe.py\n@@ -648,6 +648,8 @@ def __repr__(self):\n         arguments = ["-C", zope_conf_path, \'-p\', program_path]\n         if zopectl_umask:\n             arguments.extend(["--umask", int(zopectl_umask, 8)])\n+        if self.wsgi:\n+            arguments.append("--wsgi")\n         script_arguments = (\'\\n        \' + repr(arguments) +\n                             \'\\n        + sys.argv[1:]\')\n \n@@ -1066,7 +1068,6 @@ def render_file_storage(self, file_storage, blob_storage,\n %(port_base)s\n %(effective_user)s\n %(environment_vars)s\n-%(deprecation_warnings)s\n \n %(mailinglogger_import)s\n \ndiff --git a/src/plone/recipe/zope2instance/tests/test_wsgischema.py b/src/plone/recipe/zope2instance/tests/test_wsgischema.py\nindex cef8fdf..44cb947 100644\n--- a/src/plone/recipe/zope2instance/tests/test_wsgischema.py\n+++ b/src/plone/recipe/zope2instance/tests/test_wsgischema.py\n@@ -12,7 +12,7 @@\n #\n ##############################################################################\n \n-from plone.recipe.zope2instance.ctl import ZopeCtlOptions\n+from plone.recipe.zope2instance.ctl import WSGICtlOptions\n import os\n import tempfile\n import unittest\n@@ -32,7 +32,7 @@\n def getSchema():\n     global _SCHEMA\n     if not _SCHEMA:\n-        opts = ZopeCtlOptions()\n+        opts = WSGICtlOptions()\n         opts.load_schema()\n         _SCHEMA = opts.schema\n     return _SCHEMA\n'

