Repository: plone.app.content


Branch: refs/heads/master
Date: 2022-11-17T23:33:48+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.content/commit/59f4c2c9fe78cf451f6aa16c672c523a3c96a346

Redirect to /view after publishing File or Image.

This is when they have a workflow.
Fixes https://github.com/plone/Products.CMFPlone/issues/3676

Files changed:
A news/3676.bugfix
A plone/app/content/tests/image.png
M plone/app/content/browser/content_status_modify.py
M plone/app/content/tests/test_content_status_modify.py

b'diff --git a/news/3676.bugfix b/news/3676.bugfix\nnew file mode 100644\nindex 00000000..8b295735\n--- /dev/null\n+++ b/news/3676.bugfix\n@@ -0,0 +1 @@\n+Redirect to ``/view`` after publishing File or Image when they have a workflow.  [maurits]\ndiff --git a/plone/app/content/browser/content_status_modify.py b/plone/app/content/browser/content_status_modify.py\nindex 3a111e31..ae64bbe1 100644\n--- a/plone/app/content/browser/content_status_modify.py\n+++ b/plone/app/content/browser/content_status_modify.py\n@@ -6,11 +6,13 @@\n from plone.base.defaultpage import check_default_page_via_view\n from plone.base.utils import transaction_note\n from plone.protect import CheckAuthenticator\n+from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.Five import BrowserView\n from Products.statusmessages.interfaces import IStatusMessage\n from ZODB.POSException import ConflictError\n from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class ContentStatusModifyView(BrowserView):\n@@ -144,7 +146,13 @@ def __call__(\n                 pass\n \n         IStatusMessage(self.request).add(_("Item state changed."))\n-        return self.request.response.redirect(context.absolute_url())\n+        registry = getUtility(IRegistry)\n+        url = context.absolute_url()\n+        if context.portal_type in registry.get(\n+            "plone.types_use_view_action_in_listings", ()\n+        ):\n+            url += "/view"\n+        return self.request.response.redirect(url)\n \n     def editContent(self, obj, effective, expiry):\n         kwargs = {}\ndiff --git a/plone/app/content/tests/image.png b/plone/app/content/tests/image.png\nnew file mode 100644\nindex 00000000..4c109bab\nBinary files /dev/null and b/plone/app/content/tests/image.png differ\ndiff --git a/plone/app/content/tests/test_content_status_modify.py b/plone/app/content/tests/test_content_status_modify.py\nindex 6095a4b4..e1e782e0 100644\n--- a/plone/app/content/tests/test_content_status_modify.py\n+++ b/plone/app/content/tests/test_content_status_modify.py\n@@ -1,15 +1,22 @@\n+from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n from plone.app.testing import login\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.base.utils import is_expired\n+from plone.namedfile.file import NamedBlobFile\n+from plone.namedfile.file import NamedBlobImage\n+from plone.testing.zope import Browser\n from zope.component import getMultiAdapter\n \n+import os\n+import transaction\n import unittest\n \n \n-class TestContentStatusModify(unittest.TestCase):\n+class TestContentStatusModifyIntegration(unittest.TestCase):\n     """The the content_status_modify view.\n \n     Until and including Plone 5.2, this was a skin script in Products.CMFPlone.\n@@ -114,3 +121,61 @@ def testEditorCanSubmitButNotPublish(self):\n         self.assertEqual(\n             self.workflow.getInfoFor(self.folder.d2, "review_state"), "pending"\n         )\n+\n+\n+class TestContentStatusModifyFunctional(unittest.TestCase):\n+\n+    layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        login(self.portal, TEST_USER_NAME)\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+        # Set workflow for files and images.\n+        wf_tool = self.portal.portal_workflow\n+        wf_tool.setChainForPortalTypes(["File"], "simple_publication_workflow")\n+        wf_tool.setChainForPortalTypes(["Image"], "simple_publication_workflow")\n+\n+        # Create content.\n+        filename = os.path.join(os.path.dirname(__file__), "image.png")\n+        with open(filename, "rb") as f:\n+            FILE_DATA = f.read()\n+        self.portal.invokeFactory("Document", id="d1", title="Doc 1")\n+        self.portal.invokeFactory(\n+            "File",\n+            id="f1",\n+            title="File 1",\n+            file=NamedBlobFile(data=FILE_DATA, filename="image.png"),\n+        )\n+        self.portal.invokeFactory(\n+            "Image",\n+            id="i1",\n+            title="Image 1",\n+            image=NamedBlobImage(data=FILE_DATA, filename="image.png"),\n+        )\n+        self.portal_url = self.portal.absolute_url()\n+        transaction.commit()\n+\n+        # Setup the test browser.\n+        self.browser = Browser(self.layer["app"])\n+        self.browser.handleErrors = False\n+        self.browser.raiseHttpErrors = False\n+        self.browser.addHeader(\n+            "Authorization", f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}"\n+        )\n+\n+    def test_history_doc(self):\n+        self.browser.open(f"{self.portal_url}/d1/content_status_history")\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, f"{self.portal_url}/d1")\n+\n+    def test_history_file(self):\n+        self.browser.open(f"{self.portal_url}/f1/content_status_history")\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, f"{self.portal_url}/f1/view")\n+\n+    def test_history_image(self):\n+        self.browser.open(f"{self.portal_url}/i1/content_status_history")\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, f"{self.portal_url}/i1/view")\n'

Repository: plone.app.content


Branch: refs/heads/master
Date: 2022-11-18T09:26:53+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.content/commit/71e117bb8e8c4e1ff0e866f9ba7113ace8dbcac6

Merge pull request #258 from plone/maurits-issue-3676-publish-file-image-workflow

Redirect to /view after publishing File or Image.

Files changed:
A news/3676.bugfix
A plone/app/content/tests/image.png
M plone/app/content/browser/content_status_modify.py
M plone/app/content/tests/test_content_status_modify.py

b'diff --git a/news/3676.bugfix b/news/3676.bugfix\nnew file mode 100644\nindex 00000000..8b295735\n--- /dev/null\n+++ b/news/3676.bugfix\n@@ -0,0 +1 @@\n+Redirect to ``/view`` after publishing File or Image when they have a workflow.  [maurits]\ndiff --git a/plone/app/content/browser/content_status_modify.py b/plone/app/content/browser/content_status_modify.py\nindex 3a111e31..ae64bbe1 100644\n--- a/plone/app/content/browser/content_status_modify.py\n+++ b/plone/app/content/browser/content_status_modify.py\n@@ -6,11 +6,13 @@\n from plone.base.defaultpage import check_default_page_via_view\n from plone.base.utils import transaction_note\n from plone.protect import CheckAuthenticator\n+from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.Five import BrowserView\n from Products.statusmessages.interfaces import IStatusMessage\n from ZODB.POSException import ConflictError\n from zope.component import getMultiAdapter\n+from zope.component import getUtility\n \n \n class ContentStatusModifyView(BrowserView):\n@@ -144,7 +146,13 @@ def __call__(\n                 pass\n \n         IStatusMessage(self.request).add(_("Item state changed."))\n-        return self.request.response.redirect(context.absolute_url())\n+        registry = getUtility(IRegistry)\n+        url = context.absolute_url()\n+        if context.portal_type in registry.get(\n+            "plone.types_use_view_action_in_listings", ()\n+        ):\n+            url += "/view"\n+        return self.request.response.redirect(url)\n \n     def editContent(self, obj, effective, expiry):\n         kwargs = {}\ndiff --git a/plone/app/content/tests/image.png b/plone/app/content/tests/image.png\nnew file mode 100644\nindex 00000000..4c109bab\nBinary files /dev/null and b/plone/app/content/tests/image.png differ\ndiff --git a/plone/app/content/tests/test_content_status_modify.py b/plone/app/content/tests/test_content_status_modify.py\nindex 6095a4b4..e1e782e0 100644\n--- a/plone/app/content/tests/test_content_status_modify.py\n+++ b/plone/app/content/tests/test_content_status_modify.py\n@@ -1,15 +1,22 @@\n+from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n from plone.app.testing import login\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.base.utils import is_expired\n+from plone.namedfile.file import NamedBlobFile\n+from plone.namedfile.file import NamedBlobImage\n+from plone.testing.zope import Browser\n from zope.component import getMultiAdapter\n \n+import os\n+import transaction\n import unittest\n \n \n-class TestContentStatusModify(unittest.TestCase):\n+class TestContentStatusModifyIntegration(unittest.TestCase):\n     """The the content_status_modify view.\n \n     Until and including Plone 5.2, this was a skin script in Products.CMFPlone.\n@@ -114,3 +121,61 @@ def testEditorCanSubmitButNotPublish(self):\n         self.assertEqual(\n             self.workflow.getInfoFor(self.folder.d2, "review_state"), "pending"\n         )\n+\n+\n+class TestContentStatusModifyFunctional(unittest.TestCase):\n+\n+    layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        login(self.portal, TEST_USER_NAME)\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+        # Set workflow for files and images.\n+        wf_tool = self.portal.portal_workflow\n+        wf_tool.setChainForPortalTypes(["File"], "simple_publication_workflow")\n+        wf_tool.setChainForPortalTypes(["Image"], "simple_publication_workflow")\n+\n+        # Create content.\n+        filename = os.path.join(os.path.dirname(__file__), "image.png")\n+        with open(filename, "rb") as f:\n+            FILE_DATA = f.read()\n+        self.portal.invokeFactory("Document", id="d1", title="Doc 1")\n+        self.portal.invokeFactory(\n+            "File",\n+            id="f1",\n+            title="File 1",\n+            file=NamedBlobFile(data=FILE_DATA, filename="image.png"),\n+        )\n+        self.portal.invokeFactory(\n+            "Image",\n+            id="i1",\n+            title="Image 1",\n+            image=NamedBlobImage(data=FILE_DATA, filename="image.png"),\n+        )\n+        self.portal_url = self.portal.absolute_url()\n+        transaction.commit()\n+\n+        # Setup the test browser.\n+        self.browser = Browser(self.layer["app"])\n+        self.browser.handleErrors = False\n+        self.browser.raiseHttpErrors = False\n+        self.browser.addHeader(\n+            "Authorization", f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}"\n+        )\n+\n+    def test_history_doc(self):\n+        self.browser.open(f"{self.portal_url}/d1/content_status_history")\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, f"{self.portal_url}/d1")\n+\n+    def test_history_file(self):\n+        self.browser.open(f"{self.portal_url}/f1/content_status_history")\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, f"{self.portal_url}/f1/view")\n+\n+    def test_history_image(self):\n+        self.browser.open(f"{self.portal_url}/i1/content_status_history")\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, f"{self.portal_url}/i1/view")\n'

