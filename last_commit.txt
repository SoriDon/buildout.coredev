Repository: plone.app.mosaic


Branch: refs/heads/es6
Date: 2022-06-15T13:04:42+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.mosaic/commit/24aa806b28efa24afda5552b15624e79d661dadf

update make system to latest

Files changed:
A mx.ini
M Makefile
M instance.yaml
D sources.ini

b'diff --git a/Makefile b/Makefile\nindex e2529f6c..2b09600e 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -35,21 +35,20 @@ endif\n # adjust to your project needs\n PROJECT_NAME=plone.app.mosaic\n IMAGE_NAME=${PROJECT_NAME}\n-CONSTRAINTS_IN=constraints.txt\n-CONSTRAINTS_IN=constraints.txt\n-CONSTRAINTS_MXDEV=constraints-mxdev.txt\n+CONSTRAINTS=constraints.txt\n PIP_REQUIREMENTS_IN_FILE=requirements.txt\n ADDONBASE=./\n ADDONFOLDER=${ADDONBASE}src/\n-INSTANCE_YAML=instance.yaml\n-INSTANCE_FOLDER=instance\n+# it is possible to define an alternative YAML file for the the instance.set default i\n+INSTANCE_YAML?=instance.yaml\n+INSTANCE_FOLDER?=instance\n \n PIP_PARAMS= --pre\n \n ##############################################################################\n # targets and prerequisites\n # target has to be one file, otherwise step gets executes for each file separate\n-PREPARE_PREREQUISITES=${PIP_REQUIREMENTS_IN_FILE} ${CONSTRAINTS_IN} sources.ini ${ADDONBASE}setup.py\n+PREPARE_PREREQUISITES=${PIP_REQUIREMENTS_IN_FILE} ${CONSTRAINTS} mx.ini ${ADDONBASE}setup.cfg\n PREPARE_TARGET=requirements-mxdev.txt\n INSTALL_PREREQUSISTES=${PREPARE_TARGET}\n INSTALL_TARGET=.installed.txt\n@@ -72,8 +71,8 @@ help: ## This help message\n \t@echo "${OK_COLOR}This is the Makefile for ${WARN_COLOR}${PROJECT_NAME}${NO_COLOR}"\n \t@echo\n \t@echo "${WARN_COLOR}Additional parameters:${NO_COLOR}"\n-\t@echo "${MARK_COLOR}PYTHON${NO_COLOR}:       python interpreter to be used (default: python3)"\n-\t@echo "${MARK_COLOR}VENV${NO_COLOR}:        [on|off] wether to create a Python virtual environment or not (default: off)"\n+\t@echo "${MARK_COLOR}PYTHON${NO_COLOR}:      Python interpreter to be used (default: python3)"\n+\t@echo "${MARK_COLOR}VENV${NO_COLOR}:        [on|off] wether to create a Python virtual environment or not (default: on)"s\n \t@echo "${MARK_COLOR}VENV_FOLDER${NO_COLOR}: location of the virtual environment (default: ./venv)"\n \t@echo\n \t@echo "${WARN_COLOR}Targets:${NO_COLOR}"\n@@ -82,7 +81,7 @@ help: ## This help message\n ##############################################################################\n # targets and prerequisites\n # target has to be one file, otherwise step gets executes for each file separate\n-PREPARE_PREREQUISITES=${PIP_REQUIREMENTS_IN_FILE} ${CONSTRAINTS_IN} sources.ini ${ADDONBASE}setup.cfg\n+PREPARE_PREREQUISITES=${PIP_REQUIREMENTS_IN_FILE} ${CONSTRAINTS} mx.ini ${ADDONBASE}setup.cfg\n PREPARE_TARGET=requirements-mxdev.txt\n INSTALL_PREREQUSISTES=${PREPARE_TARGET}\n INSTALL_TARGET=.installed.txt\n@@ -103,7 +102,7 @@ ${SENTINEL}:\n # PYTHON, VENV, PIP\n # venv and pybin\n PYTHON?=python3\n-VENV?=off\n+VENV?=on\n ifeq ("${VENV}", "on")\n \tVENV_FOLDER?=./venv\n \tPYBIN=${VENV_FOLDER}/bin/\n@@ -140,7 +139,7 @@ endif\n \t@touch ${VENV_SENTINEL}\n \n PIP_SENTINEL=${SENTINELFOLDER}pip.sentinel\n-${PIP_SENTINEL}: ${VENV_SENTINEL} ${CONSTRAINTS_IN} ${SENTINEL}\n+${PIP_SENTINEL}: ${VENV_SENTINEL} ${CONSTRAINTS} ${SENTINEL}\n \t@echo "$(OK_COLOR)Install pip$(NO_COLOR)"\n \t@${PYBIN}pip install -U "pip>=22.0.2" wheel setuptools\n \t@touch ${PIP_SENTINEL}\n@@ -151,7 +150,7 @@ ${PIP_SENTINEL}: ${VENV_SENTINEL} ${CONSTRAINTS_IN} ${SENTINEL}\n MXDEV_SENTINEL=${SENTINELFOLDER}pip-mxdev.sentinel\n ${MXDEV_SENTINEL}: ${PIP_SENTINEL}\n \t@echo "$(OK_COLOR)Install mxdev$(NO_COLOR)"\n-\t@${PYBIN}pip install "mxdev>=2.1.0" libvcs==0.11.1\n+\t@${PYBIN}pip install "mxdev==2.1.0" "libvcs==0.11.1"\n \t@touch ${MXDEV_SENTINEL}\n \n .PHONY: prepare\n@@ -162,7 +161,7 @@ ${PREPARE_PREREQUISITES}:\n \n ${PREPARE_TARGET}: ${MXDEV_SENTINEL} ${PREPARE_PREREQUISITES}\n \t@echo "$(OK_COLOR)Prepare sources and dependencies$(NO_COLOR)"\n-\t@${PYBIN}mxdev -c sources.ini\n+\t@${PYBIN}mxdev -c mx.ini\n \n .PHONY: install\n install: ${INSTALL_TARGET} ## pip install all dependencies and scripts\n@@ -178,7 +177,7 @@ ${INSTALL_TARGET}: ${PREPARE_TARGET}\n COOKIECUTTER_SENTINEL=${SENTINELFOLDER}pip-cookiecutter.sentinel\n ${COOKIECUTTER_SENTINEL}:\n \t@echo "$(OK_COLOR)Install cookiecutter$(NO_COLOR)"\n-\t@${PYBIN}pip install git+https://github.com/cookiecutter/cookiecutter.git#egg=cookiecutter\n+\t@${PYBIN}pip install "cookiecutter>=2.1.1"\n \t@touch ${COOKIECUTTER_SENTINEL}\n \n ${INSTANCE_YAML}:\n@@ -187,27 +186,29 @@ ${INSTANCE_YAML}:\n .PHONY: instance\n instance: ${INSTANCE_TARGET} ## create configuration for an zope (plone) instance\n \n-${INSTANCE_TARGET}: ${INSTANCE_PREREQUISITES} ${COOKIECUTTER_SENTINEL}\n-\t@echo "$(OK_COLOR)Create Plone/Zope configuration$(NO_COLOR)"\n-\t@${PYBIN}cookiecutter -f --no-input --config-file ${INSTANCE_YAML} https://github.com/bluedynamics/cookiecutter-zope-instance\n+${INSTANCE_TARGET}: ${INSTANCE_PREREQUISITES} ${COOKIECUTTER_SENTINEL} ${INSTANCE_YAML}\n+\t@echo "$(OK_COLOR)Create Plone/Zope configuration from ${INSTANCE_YAML} at ${INSTANCE_FOLDER}$(NO_COLOR)"\n+\t@${PYBIN}cookiecutter -f --no-input --config-file ${INSTANCE_YAML} https://github.com/plone/cookiecutter-zope-instance\n+\n+\n ##############################################################################\n # TESTING\n \n TESTRUNNER_SENTINEL=${SENTINELFOLDER}pip-testrunner.sentinel\n ${TESTRUNNER_SENTINEL}: ${PIP_SENTINEL}\n \t@echo "$(OK_COLOR)Install zope.testrunner$(NO_COLOR)"\n-\t@${PYBIN}pip install -c ${CONSTRAINTS_MXDEV} zope.testrunner\n+\t@${PYBIN}pip install zope.testrunner\n \t@touch ${TESTRUNNER_SENTINEL}\n \n .PHONY: test\n test: ${TEST_PREREQUISITES} ${TESTRUNNER_SENTINEL} ## run tests\n \t@echo "$(OK_COLOR)Run addon tests$(NO_COLOR)"\n-\t@${PYBIN}zope-testrunner --all --auto-color --auto-progress --test-path=${ADDONFOLDER}\n+\t@${PYBIN}zope-testrunner --auto-color --auto-progress --test-path=${ADDONFOLDER}\n \n .PHONY: test-ignore-warnings\n-test-ignore-warnings: ${TEST_PREREQUISITES} ${TESTRUNNER_SENTINEL}  ## run tests (hide warnins)\n+test-ignore-warnings: ${TEST_PREREQUISITES} ${TESTRUNNER_SENTINEL}  ## run tests (hide warnings)\n \t@echo "$(OK_COLOR)Run addon tests$(NO_COLOR)"\n-\t@PYTHONWARNINGS=ignore ${PYBIN}zope-testrunner --all --auto-color --auto-progress --test-path=${ADDONFOLDER}\n+\t@PYTHONWARNINGS=ignore ${PYBIN}zope-testrunner --auto-color --auto-progress --test-path=${ADDONFOLDER}\n \n ##############################################################################\n # CODE FORMATTING\n@@ -215,19 +216,19 @@ test-ignore-warnings: ${TEST_PREREQUISITES} ${TESTRUNNER_SENTINEL}  ## run tests\n BLACK_SENTINEL=${SENTINELFOLDER}pip-black.sentinel\n ${BLACK_SENTINEL}: ${PREPARE_TARGET}\n \t@echo "$(OK_COLOR)Install black$(NO_COLOR)"\n-\t@${PYBIN}pip install -c ${CONSTRAINTS_MXDEV} black\n+\t@${PYBIN}pip install black\n \t@touch ${BLACK_SENTINEL}\n \n ISORT_SENTINEL=${SENTINELFOLDER}pip-isort.sentinel\n ${ISORT_SENTINEL}: ${PREPARE_TARGET}\n \t@echo "$(OK_COLOR)Install isort$(NO_COLOR)"\n-\t@${PYBIN}pip install -c ${CONSTRAINTS_MXDEV} isort\n+\t@${PYBIN}pip install isort\n \t@touch ${ISORT_SENTINEL}\n \n ZPRETTY_SENTINEL=${SENTINELFOLDER}pip-zpretty.sentinel\n ${ZPRETTY_SENTINEL}: ${PREPARE_TARGET}\n \t@echo "$(OK_COLOR)Install zpretty$(NO_COLOR)"\n-\t@${PYBIN}pip install -c ${CONSTRAINTS_MXDEV} "zpretty>=2.2.0"\n+\t@${PYBIN}pip install "zpretty>=2.2.0"\n \t@touch ${ZPRETTY_SENTINEL}\n \n .PHONY: apply-style-black\n@@ -246,8 +247,8 @@ apply-style-zpretty: ${ZPRETTY_SENTINEL}   ## apply/format code style zpretty (t\n \t@find ${ADDONFOLDER} -name \'*.zcml\' -exec ${PYBIN}zpretty -iz {} +\n \t@find ${ADDONFOLDER} -name "*.xml"|grep -v locales|xargs ${PYBIN}zpretty -ix\n \n-.PHONY: style ## apply code styles black, isort and NOT (!) zpretty\n-style: apply-style-black apply-style-isort\n+.PHONY: style ## apply code styles black, isort and zpretty\n+style: apply-style-black apply-style-isort apply-style-zpretty\n \n .PHONY: format ## alias for "style"\n FORMATTING: style\n@@ -259,17 +260,17 @@ lint-black: ${BLACK_SENTINEL}  ## lint code-style black (to Python files)\n \n .PHONY: lint-isort\n lint-isort: ${ISORT_SENTINEL} ## lint code-style isort (sorted imports in Python files)\n-\t@echo "$(OK_COLOR)Apply style isort rules to code in ${ADDONFOLDER}/*$(NO_COLOR)"\n+\t@echo "$(OK_COLOR)Lint style isort rules to code in ${ADDONFOLDER}/*$(NO_COLOR)"\n \t@${PYBIN}isort --check-only ${ADDONFOLDER}\n \n .PHONY: lint-zpretty\n lint-zpretty: ${ZPRETTY_SENTINEL}   ## lint code-style zpretty (to XML/ZCML files)\n-\t@echo "$(OK_COLOR)Apply style zpretty rules to code in ${ADDONFOLDER}/*$(NO_COLOR)"\n+\t@echo "$(OK_COLOR)Lint style zpretty rules to code in ${ADDONFOLDER}/*$(NO_COLOR)"\n \t@find ${ADDONFOLDER} -name \'*.zcml\' -exec ${PYBIN}zpretty --check -z {} +\n-\t@find ${ADDONFOLDER} -name \'*.xml\'|grep -v locales|xargs zpretty --check -x\n+\t@find ${ADDONFOLDER} -name \'*.xml\'|grep -v locales|xargs ${PYBIN}zpretty --check -x\n \n-.PHONY: lint ## lint all: check if complies with code-styles black, isort and NOT (!) zpretty\n-lint: lint-black lint-isort\n+.PHONY: lint ## lint all: check if complies with code-styles black, isort and zpretty\n+lint: lint-black lint-isort lint-zpretty\n \n ##############################################################################\n # RUN\n@@ -293,57 +294,19 @@ endif\n .PHONY: clean-pyc\n clean-pyc: ## remove Python file artifacts\n \t@echo "$(OK_COLOR)Remove Python file artifacts (like byte-code) of code in current directory.$(NO_COLOR)"\n-\tfind . -name \'*.py[c|o]\' -delete\n-\tfind . -name \'*.mo\' -delete\n+\tfind . -name \'*.pyc\' -exec rm -f {} +\n+\tfind . -name \'*.pyo\' -exec rm -f {} +\n \tfind . -name \'*~\' -exec rm -f {} +\n \tfind . -name \'__pycache__\' -exec rm -fr {} +\n \n .PHONY: clean-make\n clean-make:  ## remove make artifact\t@echo "$(OK_COLOR)Remove Plone/Zope configuration (keeps data) and sentinel files.$(NO_COLOR)"\n-\trm -rf ${INSTALL_PREREQUSISTES} ${INSTANCE_TARGET} ${SENTINELFOLDER}\n+\trm -rf ${INSTALL_PREREQUSISTES} ${INSTANCE_TARGET} ${SENTINELFOLDER} constraints-mxdev.txt\n \n .PHONY: clean-instance\n clean-instance:  ## remove instance configuration (keeps data)\n \t@echo "$(OK_COLOR)Remove Plone/Zope configuration (keeps data) and sentinel files.$(NO_COLOR)"\n \trm -f ${INSTANCE_TARGET}\n \n-.PHONY: clean-resources\n-clean-resources:  ## clean npm packages\n-\t@echo "$(OK_COLOR)Remove npm packages.$(NO_COLOR)"\n-\trm -rf node_modules/\n-\n-.PHONY: clean-tests\n-clean-tests:  ## clean test output\n-\t@echo "$(OK_COLOR)Remove test output files.$(NO_COLOR)"\n-\trm -rf robot_* test_*\n-\n .PHONY: clean\n-clean:  clean-venv clean-pyc clean-make clean-instance clean-resources clean-tests   ## clean all (except local database and pip installed packages)\n-\n-##############################################################################\n-# DOCKER/CONTAINER\n-\n-# this needs a Dockerfile, which is not provided by plone-kickstarter\n-.PHONY: build-image\n-build-image:  ## Build Docker Image\n-ifneq ("$(wildcard Dockerfile)", "")\n-\t@docker build . -t $(IMAGE_NAME) -f Dockerfile\n-else\n-\t@echo "$(ERROR_COLOR)A \'Dockerfile\' is required to build an image.$(NO_COLOR)"\n-endif\n-\n-\n-YARN   ?= npx yarn\n-\n-\n-.PHONY:\n-watch:\n-\t$(YARN) run watch:webpack\n-\n-\n-.PHONY:\n-bundle:\n-\t$(YARN) run build\n-\n-\n-#\n+clean:  clean-venv clean-pyc clean-make clean-instance   ## clean all (except local database and pip installed packages)\ndiff --git a/instance.yaml b/instance.yaml\nindex 75a35ed4..452649fd 100644\n--- a/instance.yaml\n+++ b/instance.yaml\n@@ -9,7 +9,7 @@\n # read also README_MAKE.md in this folder\n #\n default_context:\n-    wsgi_http_listen: localhost:8080\n+    wsgi_listen: localhost:8080\n     initial_user_name: admin\n     initial_user_password: admin\n     load_zcml:\ndiff --git a/sources.ini b/mx.ini\nsimilarity index 100%\nrename from sources.ini\nrename to mx.ini\n'

