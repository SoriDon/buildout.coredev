Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2022-09-15T20:58:32-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/Products.PlonePAS/commit/e743cfad722379350ac4836d0ec3044f99be329f

Increase the minimum password length to 8 characters

Files changed:
A news/69.feature
M src/Products/PlonePAS/plugins/passwordpolicy.py

b'diff --git a/news/69.feature b/news/69.feature\nnew file mode 100644\nindex 00000000..ad7789d7\n--- /dev/null\n+++ b/news/69.feature\n@@ -0,0 +1 @@\n+- Increase the minimum password length to 8 characters. [davisagli]\n\\ No newline at end of file\ndiff --git a/src/Products/PlonePAS/plugins/passwordpolicy.py b/src/Products/PlonePAS/plugins/passwordpolicy.py\nindex 2a50f29a..5162b2c4 100644\n--- a/src/Products/PlonePAS/plugins/passwordpolicy.py\n+++ b/src/Products/PlonePAS/plugins/passwordpolicy.py\n@@ -35,14 +35,16 @@ def manage_addPasswordPolicyPlugin(\n \n @implementer(IValidationPlugin)\n class PasswordPolicyPlugin(BasePlugin):\n-    """Simple Password Policy to ensure password is 5 chars long."""\n+    """Simple Password Policy to enforce a minimum password length."""\n \n     meta_type = "Default Plone Password Policy"\n \n     security = ClassSecurityInfo()\n \n+    min_chars = 8\n+\n     def __init__(self, id, title=""):\n-        """Create a default plone password policy to ensure 5 char passwords"""\n+        """Create a default plone password policy"""\n         self.id = id\n         self.title = title\n \n@@ -56,12 +58,23 @@ def validateUserInfo(self, user, set_id, set_info):\n         if password is None:\n             return []\n         elif password == "":\n-            return [{"id": "password", "error": _("Minimum 5 characters.")}]\n-        elif len(password) < 5:\n             return [\n                 {\n                     "id": "password",\n-                    "error": _("Your password must contain at least 5 characters."),\n+                    "error": _(\n+                        "Minimum ${min_chars} characters.",\n+                        mapping={"min_chars": str(self.min_chars)},\n+                    ),\n+                }\n+            ]\n+        elif len(password) < self.min_chars:\n+            return [\n+                {\n+                    "id": "password",\n+                    "error": _(\n+                        "Your password must contain at least ${min_chars} characters.",\n+                        mapping={"min_chars": str(self.min_chars)},\n+                    ),\n                 }\n             ]\n         else:\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2022-09-18T19:22:02-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/Products.PlonePAS/commit/488cf53ebaa7f7e8465afccd2f016eb7c1426e9f

fix tests

Files changed:
M src/Products/PlonePAS/tests/test_membershiptool.py

b'diff --git a/src/Products/PlonePAS/tests/test_membershiptool.py b/src/Products/PlonePAS/tests/test_membershiptool.py\nindex ca8593a6..766a1f4e 100644\n--- a/src/Products/PlonePAS/tests/test_membershiptool.py\n+++ b/src/Products/PlonePAS/tests/test_membershiptool.py\n@@ -197,7 +197,7 @@ def test_interface(self):\n         verifyClass(IMembershipTool, MembershipTool)\n \n     def addMember(self, username, fullname, email, roles, last_login_time):\n-        self.membership.addMember(username, "secret", roles, [])\n+        self.membership.addMember(username, TEST_USER_PASSWORD, roles, [])\n         member = self.membership.getMemberById(username)\n         member.setMemberProperties(\n             {\n@@ -273,7 +273,7 @@ def testCannotChangeOtherMemberPortrait(self):\n         # another member.\n         setRoles(self.portal, TEST_USER_ID, ["Member"])\n         image = self.makeRealImage()\n-        self.membership.addMember("joe", "secret", ["Member"], [])\n+        self.membership.addMember("joe", TEST_USER_PASSWORD, ["Member"], [])\n         self.assertRaises(\n             Unauthorized, self.membership.changeMemberPortrait, image, "joe"\n         )\n@@ -282,7 +282,7 @@ def testChangeMemberPortraitAsManager(self):\n         # Managers should be able to change the portrait of another\n         # member.\n         image = self.makeRealImage()\n-        self.membership.addMember("joe", "secret", ["Member"], [])\n+        self.membership.addMember("joe", TEST_USER_PASSWORD, ["Member"], [])\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         # This should not raise Unauthorized:\n         self.membership.changeMemberPortrait(image, "joe")\n@@ -305,7 +305,7 @@ def testCannotDeleteOtherPersonalPortrait(self):\n         # A normal member should not be able to delete the portrait of\n         # another member.\n         image = self.makeRealImage()\n-        self.membership.addMember("joe", "secret", ["Member"], [])\n+        self.membership.addMember("joe", TEST_USER_PASSWORD, ["Member"], [])\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.membership.changeMemberPortrait(image, "joe")\n         setRoles(self.portal, TEST_USER_ID, ["Member"])\n@@ -315,7 +315,7 @@ def testDeleteOtherPersonalPortraitAsManager(self):\n         # Managers should be able to change the portrait of another\n         # member.\n         image = self.makeRealImage()\n-        self.membership.addMember("joe", "secret", ["Member"], [])\n+        self.membership.addMember("joe", TEST_USER_PASSWORD, ["Member"], [])\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.membership.changeMemberPortrait(image, "joe")\n         self.membership.deletePersonalPortrait("joe")\n@@ -337,7 +337,7 @@ def testPortraitForNonStandardUserId(self):\n         user_id = "bob-jones+test@example.org"\n         safe_id = self.membership._getSafeMemberId(user_id)\n         self.assertEqual(safe_id, "bob--jones-2Btest-40example.org")\n-        self.membership.addMember(user_id, "secret", ["Member"], [])\n+        self.membership.addMember(user_id, TEST_USER_PASSWORD, ["Member"], [])\n         login(self.portal, user_id)\n \n         # Should return the default portrait\n@@ -410,28 +410,19 @@ def testListMemberIdsSkipsGroups(self):\n \n     def testCurrentPassword(self):\n         # Password checking should work\n-        self.assertTrue(self.membership.testCurrentPassword("secret"))\n-        self.assertFalse(self.membership.testCurrentPassword("geheim"))\n+        self.assertTrue(self.membership.testCurrentPassword(TEST_USER_PASSWORD))\n+        self.assertFalse(self.membership.testCurrentPassword("newpassword"))\n \n     def testSetPassword(self):\n         # Password should be changed\n-        self.membership.setPassword("geheim")\n-        self.assertTrue(self.membership.testCurrentPassword("geheim"))\n+        self.membership.setPassword("newpassword")\n+        self.assertTrue(self.membership.testCurrentPassword("newpassword"))\n \n     def testSetPasswordIfAnonymous(self):\n         # Anonymous should not be able to change password\n         logout()\n-        try:\n-            self.membership.setPassword("geheim")\n-        except BadRequest:\n-            import sys\n-\n-            e, v, tb = sys.exc_info()\n-            del tb\n-            if str(v) == "Not logged in.":\n-                pass\n-            else:\n-                raise\n+        with self.assertRaises(BadRequest, msg="Not logged in."):\n+            self.membership.setPassword("newpassword")\n \n     def testSetPasswordAndKeepGroups(self):\n         # Password should be changed and user must not change group membership\n@@ -443,7 +434,7 @@ def testSetPasswordAndKeepGroups(self):\n         group.addMember(TEST_USER_ID)\n         login(self.portal, TEST_USER_NAME)  # Back to normal\n         ugroups = self.portal.acl_users.getUserById(TEST_USER_ID).getGroups()\n-        self.membership.setPassword("geheim")\n+        self.membership.setPassword("newpassword")\n         t_groups = self.portal.acl_users.getUserById(TEST_USER_ID).getGroups()\n         self.assertTrue(t_groups == ugroups)\n \n@@ -695,7 +686,7 @@ def got_credentials_updated_event(event):\n         gsm = getGlobalSiteManager()\n         gsm.registerHandler(got_credentials_updated_event)\n \n-        self.assertTrue(self.membership.testCurrentPassword("secret"))\n+        self.assertTrue(self.membership.testCurrentPassword(TEST_USER_PASSWORD))\n         self.assertFalse(self.membership.testCurrentPassword("whoknows"))\n         login(self.portal, TEST_USER_NAME)  # Back to normal\n         self.membership.setPassword("guessagain")\n'

Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2022-09-19T11:16:13+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.PlonePAS/commit/1e3e11fd685f1dcca04177b95f29c92bc75c35a7

Merge pull request #69 from plone/pw-length

Increase the minimum password length to 8 characters

Files changed:
A news/69.feature
M src/Products/PlonePAS/plugins/passwordpolicy.py
M src/Products/PlonePAS/tests/test_membershiptool.py

b'diff --git a/news/69.feature b/news/69.feature\nnew file mode 100644\nindex 00000000..ad7789d7\n--- /dev/null\n+++ b/news/69.feature\n@@ -0,0 +1 @@\n+- Increase the minimum password length to 8 characters. [davisagli]\n\\ No newline at end of file\ndiff --git a/src/Products/PlonePAS/plugins/passwordpolicy.py b/src/Products/PlonePAS/plugins/passwordpolicy.py\nindex 2a50f29a..5162b2c4 100644\n--- a/src/Products/PlonePAS/plugins/passwordpolicy.py\n+++ b/src/Products/PlonePAS/plugins/passwordpolicy.py\n@@ -35,14 +35,16 @@ def manage_addPasswordPolicyPlugin(\n \n @implementer(IValidationPlugin)\n class PasswordPolicyPlugin(BasePlugin):\n-    """Simple Password Policy to ensure password is 5 chars long."""\n+    """Simple Password Policy to enforce a minimum password length."""\n \n     meta_type = "Default Plone Password Policy"\n \n     security = ClassSecurityInfo()\n \n+    min_chars = 8\n+\n     def __init__(self, id, title=""):\n-        """Create a default plone password policy to ensure 5 char passwords"""\n+        """Create a default plone password policy"""\n         self.id = id\n         self.title = title\n \n@@ -56,12 +58,23 @@ def validateUserInfo(self, user, set_id, set_info):\n         if password is None:\n             return []\n         elif password == "":\n-            return [{"id": "password", "error": _("Minimum 5 characters.")}]\n-        elif len(password) < 5:\n             return [\n                 {\n                     "id": "password",\n-                    "error": _("Your password must contain at least 5 characters."),\n+                    "error": _(\n+                        "Minimum ${min_chars} characters.",\n+                        mapping={"min_chars": str(self.min_chars)},\n+                    ),\n+                }\n+            ]\n+        elif len(password) < self.min_chars:\n+            return [\n+                {\n+                    "id": "password",\n+                    "error": _(\n+                        "Your password must contain at least ${min_chars} characters.",\n+                        mapping={"min_chars": str(self.min_chars)},\n+                    ),\n                 }\n             ]\n         else:\ndiff --git a/src/Products/PlonePAS/tests/test_membershiptool.py b/src/Products/PlonePAS/tests/test_membershiptool.py\nindex ca8593a6..766a1f4e 100644\n--- a/src/Products/PlonePAS/tests/test_membershiptool.py\n+++ b/src/Products/PlonePAS/tests/test_membershiptool.py\n@@ -197,7 +197,7 @@ def test_interface(self):\n         verifyClass(IMembershipTool, MembershipTool)\n \n     def addMember(self, username, fullname, email, roles, last_login_time):\n-        self.membership.addMember(username, "secret", roles, [])\n+        self.membership.addMember(username, TEST_USER_PASSWORD, roles, [])\n         member = self.membership.getMemberById(username)\n         member.setMemberProperties(\n             {\n@@ -273,7 +273,7 @@ def testCannotChangeOtherMemberPortrait(self):\n         # another member.\n         setRoles(self.portal, TEST_USER_ID, ["Member"])\n         image = self.makeRealImage()\n-        self.membership.addMember("joe", "secret", ["Member"], [])\n+        self.membership.addMember("joe", TEST_USER_PASSWORD, ["Member"], [])\n         self.assertRaises(\n             Unauthorized, self.membership.changeMemberPortrait, image, "joe"\n         )\n@@ -282,7 +282,7 @@ def testChangeMemberPortraitAsManager(self):\n         # Managers should be able to change the portrait of another\n         # member.\n         image = self.makeRealImage()\n-        self.membership.addMember("joe", "secret", ["Member"], [])\n+        self.membership.addMember("joe", TEST_USER_PASSWORD, ["Member"], [])\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         # This should not raise Unauthorized:\n         self.membership.changeMemberPortrait(image, "joe")\n@@ -305,7 +305,7 @@ def testCannotDeleteOtherPersonalPortrait(self):\n         # A normal member should not be able to delete the portrait of\n         # another member.\n         image = self.makeRealImage()\n-        self.membership.addMember("joe", "secret", ["Member"], [])\n+        self.membership.addMember("joe", TEST_USER_PASSWORD, ["Member"], [])\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.membership.changeMemberPortrait(image, "joe")\n         setRoles(self.portal, TEST_USER_ID, ["Member"])\n@@ -315,7 +315,7 @@ def testDeleteOtherPersonalPortraitAsManager(self):\n         # Managers should be able to change the portrait of another\n         # member.\n         image = self.makeRealImage()\n-        self.membership.addMember("joe", "secret", ["Member"], [])\n+        self.membership.addMember("joe", TEST_USER_PASSWORD, ["Member"], [])\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         self.membership.changeMemberPortrait(image, "joe")\n         self.membership.deletePersonalPortrait("joe")\n@@ -337,7 +337,7 @@ def testPortraitForNonStandardUserId(self):\n         user_id = "bob-jones+test@example.org"\n         safe_id = self.membership._getSafeMemberId(user_id)\n         self.assertEqual(safe_id, "bob--jones-2Btest-40example.org")\n-        self.membership.addMember(user_id, "secret", ["Member"], [])\n+        self.membership.addMember(user_id, TEST_USER_PASSWORD, ["Member"], [])\n         login(self.portal, user_id)\n \n         # Should return the default portrait\n@@ -410,28 +410,19 @@ def testListMemberIdsSkipsGroups(self):\n \n     def testCurrentPassword(self):\n         # Password checking should work\n-        self.assertTrue(self.membership.testCurrentPassword("secret"))\n-        self.assertFalse(self.membership.testCurrentPassword("geheim"))\n+        self.assertTrue(self.membership.testCurrentPassword(TEST_USER_PASSWORD))\n+        self.assertFalse(self.membership.testCurrentPassword("newpassword"))\n \n     def testSetPassword(self):\n         # Password should be changed\n-        self.membership.setPassword("geheim")\n-        self.assertTrue(self.membership.testCurrentPassword("geheim"))\n+        self.membership.setPassword("newpassword")\n+        self.assertTrue(self.membership.testCurrentPassword("newpassword"))\n \n     def testSetPasswordIfAnonymous(self):\n         # Anonymous should not be able to change password\n         logout()\n-        try:\n-            self.membership.setPassword("geheim")\n-        except BadRequest:\n-            import sys\n-\n-            e, v, tb = sys.exc_info()\n-            del tb\n-            if str(v) == "Not logged in.":\n-                pass\n-            else:\n-                raise\n+        with self.assertRaises(BadRequest, msg="Not logged in."):\n+            self.membership.setPassword("newpassword")\n \n     def testSetPasswordAndKeepGroups(self):\n         # Password should be changed and user must not change group membership\n@@ -443,7 +434,7 @@ def testSetPasswordAndKeepGroups(self):\n         group.addMember(TEST_USER_ID)\n         login(self.portal, TEST_USER_NAME)  # Back to normal\n         ugroups = self.portal.acl_users.getUserById(TEST_USER_ID).getGroups()\n-        self.membership.setPassword("geheim")\n+        self.membership.setPassword("newpassword")\n         t_groups = self.portal.acl_users.getUserById(TEST_USER_ID).getGroups()\n         self.assertTrue(t_groups == ugroups)\n \n@@ -695,7 +686,7 @@ def got_credentials_updated_event(event):\n         gsm = getGlobalSiteManager()\n         gsm.registerHandler(got_credentials_updated_event)\n \n-        self.assertTrue(self.membership.testCurrentPassword("secret"))\n+        self.assertTrue(self.membership.testCurrentPassword(TEST_USER_PASSWORD))\n         self.assertFalse(self.membership.testCurrentPassword("whoknows"))\n         login(self.portal, TEST_USER_NAME)  # Back to normal\n         self.membership.setPassword("guessagain")\n'

