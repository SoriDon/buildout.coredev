Repository: archetypes.schemaextender


Branch: refs/heads/master
Date: 2018-10-17T10:44:34+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/archetypes.schemaextender/commit/ef6fb6a454f391157bdaed71d2324a645278ee6b

Switch to new TestCase using AT after PloneTestcase is now DX.

Files changed:
M CHANGES.rst
M archetypes/schemaextender/tests/base.py
M archetypes/schemaextender/tests/testIntegration.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex b354161..0c09c9d 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,8 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n-\n+- Switch to new TestCase using AT after PloneTestcase is now DX.\n+  [pbauer]\n \n 2.1.8 (2018-01-30)\n ------------------\ndiff --git a/archetypes/schemaextender/tests/base.py b/archetypes/schemaextender/tests/base.py\nindex 48f7344..9756667 100644\n--- a/archetypes/schemaextender/tests/base.py\n+++ b/archetypes/schemaextender/tests/base.py\n@@ -4,7 +4,7 @@\n from zope.component import getGlobalSiteManager\n from archetypes.schemaextender.extender import instanceSchemaFactory\n from archetypes.schemaextender.interfaces import IExtensible\n-from plone.app.testing.bbb import PloneTestCase\n+from plone.app.testing.bbb_at import PloneTestCase\n from Products.Archetypes.public import BaseObject\n \n \ndiff --git a/archetypes/schemaextender/tests/testIntegration.py b/archetypes/schemaextender/tests/testIntegration.py\nindex 199f888..97c1e72 100644\n--- a/archetypes/schemaextender/tests/testIntegration.py\n+++ b/archetypes/schemaextender/tests/testIntegration.py\n@@ -3,7 +3,7 @@\n \n from zope.component import testing\n from plone.testing import layered\n-from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING\n+from plone.app.testing.bbb_at import PTC_FUNCTIONAL_TESTING\n \n \n def test_suite():\n'

Repository: archetypes.schemaextender


Branch: refs/heads/master
Date: 2018-10-17T10:44:34+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/archetypes.schemaextender/commit/3c6bde8fb55c56ecba7a61c887f4a0c9e1e0d773

wip: fix test

Files changed:
M archetypes/schemaextender/usage.txt

b"diff --git a/archetypes/schemaextender/usage.txt b/archetypes/schemaextender/usage.txt\nindex 1c7c119..0e1042d 100644\n--- a/archetypes/schemaextender/usage.txt\n+++ b/archetypes/schemaextender/usage.txt\n@@ -253,10 +253,10 @@ test.\n     >>> browser.addHeader('Authorization',\n     ...                   'Basic %s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD))\n \n+    >>> browser.handleErrors = False\n     >>> browser.open(folder_url)\n     >>> browser.getLink('Add new').click()\n     >>> browser.getControl('Page').click()\n-    >>> browser.handleErrors = False\n     >>> browser.getControl('Add').click()\n \n Now we are on the edit page. Let's find and set some values, as well as\n"

Repository: archetypes.schemaextender


Branch: refs/heads/master
Date: 2018-10-17T10:44:34+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/archetypes.schemaextender/commit/7222a199371f12ca31f72ea138b8fc32f95dc855

Use p.a.testing.push/popGlobalRegistry

Instead of trying own cleanup and leaking stuff afterwads.
Also did a cleanup while at it.

Files changed:
M archetypes/schemaextender/tests/__init__.py
M archetypes/schemaextender/tests/base.py
M archetypes/schemaextender/tests/mocks.py
M archetypes/schemaextender/tests/testAccessor.py
M archetypes/schemaextender/tests/testIntegration.py
M archetypes/schemaextender/tests/testOrdering.py
M archetypes/schemaextender/tests/testSchemaFactory.py

b'diff --git a/archetypes/schemaextender/tests/__init__.py b/archetypes/schemaextender/tests/__init__.py\nindex 792d600..ec51c5a 100644\n--- a/archetypes/schemaextender/tests/__init__.py\n+++ b/archetypes/schemaextender/tests/__init__.py\n@@ -1 +1,2 @@\n+# -*- coding: utf-8 -*-\n #\ndiff --git a/archetypes/schemaextender/tests/base.py b/archetypes/schemaextender/tests/base.py\nindex 9756667..bd85190 100644\n--- a/archetypes/schemaextender/tests/base.py\n+++ b/archetypes/schemaextender/tests/base.py\n@@ -1,11 +1,13 @@\n-import unittest\n-from zope.interface import implementer\n-from zope.component import provideAdapter\n-from zope.component import getGlobalSiteManager\n+# -*- coding: utf-8 -*-\n from archetypes.schemaextender.extender import instanceSchemaFactory\n from archetypes.schemaextender.interfaces import IExtensible\n from plone.app.testing.bbb_at import PloneTestCase\n+from plone.testing import zca\n from Products.Archetypes.public import BaseObject\n+from zope.component import provideAdapter\n+from zope.interface import implementer\n+\n+import unittest\n \n \n class ASTestCase(PloneTestCase):\n@@ -18,17 +20,10 @@ class ExtensibleType(BaseObject):\n \n \n class TestCase(unittest.TestCase):\n-\n     def setUp(self):\n-        self._adapters=[]\n-        self.provideAdapter(instanceSchemaFactory)\n-        self.instance=ExtensibleType("id")\n+        zca.pushGlobalRegistry()\n+        provideAdapter(instanceSchemaFactory)\n+        self.instance = ExtensibleType("id")\n \n     def tearDown(self):\n-        sm=getGlobalSiteManager()\n-        for (args, kwargs) in self._adapters:\n-            sm.unregisterAdapter(*args, **kwargs)\n-\n-    def provideAdapter(self, *args, **kwargs):\n-        provideAdapter(*args, **kwargs)\n-        self._adapters.append((args, kwargs))\n+        zca.popGlobalRegistry()\ndiff --git a/archetypes/schemaextender/tests/mocks.py b/archetypes/schemaextender/tests/mocks.py\nindex 2dd206a..a45c1ca 100644\n--- a/archetypes/schemaextender/tests/mocks.py\n+++ b/archetypes/schemaextender/tests/mocks.py\n@@ -1,14 +1,15 @@\n-from zope.interface import Interface\n+# -*- coding: utf-8 -*-\n+from archetypes.schemaextender.interfaces import IOrderableSchemaExtender\n+from archetypes.schemaextender.interfaces import ISchemaExtender\n+from archetypes.schemaextender.interfaces import ISchemaModifier\n+from archetypes.schemaextender.tests.base import ExtensibleType\n+from Products.Archetypes.interfaces.field import IField\n+from zope.component import adapts\n from zope.interface import implementer\n from zope.interface import implementer_only\n from zope.interface import implements\n+from zope.interface import Interface\n from zope.interface.interfaces import IInterface\n-from zope.component import adapts\n-from archetypes.schemaextender.tests.base import ExtensibleType\n-from archetypes.schemaextender.interfaces import ISchemaExtender\n-from archetypes.schemaextender.interfaces import IOrderableSchemaExtender\n-from archetypes.schemaextender.interfaces import ISchemaModifier\n-from Products.Archetypes.interfaces.field import IField\n \n \n class IHighlighted(Interface):\n@@ -37,17 +38,17 @@ def getOrder(self, original):\n         """"Overly complex logic: put our fields first."""\n         if not self.fields:\n             return original\n-        toadd=[]\n+        toadd = []\n         for field in self.fields:\n-            field=field.getName()\n+            field = field.getName()\n             try:\n-                index=original["default"].index(field)\n+                index = original["default"].index(field)\n             except ValueError:\n                 continue\n             del original["default"][index]\n             toadd.append(field)\n \n-        original["default"]=toadd + original["default"]\n+        original["default"] = toadd + original["default"]\n         return original\n \n \n@@ -70,8 +71,8 @@ class MockField:\n     type = "mock"\n \n     def __init__(self, name="MockField", schemata="default"):\n-        self.name=name\n-        self.schemata=schemata\n+        self.name = name\n+        self.schemata = schemata\n \n     def toString(self):\n         return "MockField"\ndiff --git a/archetypes/schemaextender/tests/testAccessor.py b/archetypes/schemaextender/tests/testAccessor.py\nindex afaa756..5791f9e 100644\n--- a/archetypes/schemaextender/tests/testAccessor.py\n+++ b/archetypes/schemaextender/tests/testAccessor.py\n@@ -1,10 +1,16 @@\n-from zope.interface import Interface, implementer, classImplements\n-from zope.component import adapts, provideAdapter\n-from Products.Archetypes.atapi import ComputedField, StringField, StringWidget\n-from Products.ATContentTypes.content.document import ATDocument\n-from archetypes.schemaextender.interfaces import ISchemaExtender\n+# -*- coding: utf-8 -*-\n from archetypes.schemaextender.field import ExtensionField\n+from archetypes.schemaextender.interfaces import ISchemaExtender\n from archetypes.schemaextender.tests.base import ASTestCase as TestCase\n+from Products.Archetypes.atapi import ComputedField\n+from Products.Archetypes.atapi import StringField\n+from Products.Archetypes.atapi import StringWidget\n+from Products.ATContentTypes.content.document import ATDocument\n+from zope.component import adapter\n+from zope.component import provideAdapter\n+from zope.interface import classImplements\n+from zope.interface import implementer\n+from zope.interface import Interface\n \n \n class IFoo(Interface):\n@@ -20,19 +26,23 @@ class ExtendedComputedField(ExtensionField, ComputedField):\n \n \n @implementer(ISchemaExtender)\n+@adapter(IFoo)\n class Extender(object):\n-    adapts(IFoo)\n \n     fields = [\n-        FooField(\'foo\',\n-            widget = StringWidget(label=\'foo\', description=\'foo!\')),\n-        FooField(\'bar\',\n-            index_method = \'title_or_id\',\n-            widget = StringWidget(label=\'bar\', description=\'bar!\')),\n-        FooField(\'hmm\',\n-            index_method = lambda: \'hmm\',\n-            widget = StringWidget(label=\'hmm\', description=\'hmm!\')),\n-        ExtendedComputedField(\'ho\', expression = \'"I compute ho"\'), ]\n+        FooField(\'foo\', widget=StringWidget(label=\'foo\', description=\'foo!\')),\n+        FooField(\n+            \'bar\',\n+            index_method=\'title_or_id\',\n+            widget=StringWidget(label=\'bar\', description=\'bar!\'),\n+        ),\n+        FooField(\n+            \'hmm\',\n+            index_method=lambda: \'hmm\',\n+            widget=StringWidget(label=\'hmm\', description=\'hmm!\'),\n+        ),\n+        ExtendedComputedField(\'ho\', expression=\'"I compute ho"\'),\n+    ]\n \n     def __init__(self, context):\n         self.context = context\n@@ -42,7 +52,6 @@ def getFields(self):\n \n \n class AccessorTests(TestCase):\n-\n     def afterSetUp(self):\n         classImplements(ATDocument, IFoo)\n         provideAdapter(Extender, name=u\'foo\')\ndiff --git a/archetypes/schemaextender/tests/testIntegration.py b/archetypes/schemaextender/tests/testIntegration.py\nindex 97c1e72..b77cbc8 100644\n--- a/archetypes/schemaextender/tests/testIntegration.py\n+++ b/archetypes/schemaextender/tests/testIntegration.py\n@@ -1,17 +1,25 @@\n-import doctest\n+# -*- coding: utf-8 -*-\n+from plone.app.testing.bbb_at import PTC_FUNCTIONAL_TESTING\n+from plone.testing import layered\n from unittest import TestSuite\n-\n from zope.component import testing\n-from plone.testing import layered\n-from plone.app.testing.bbb_at import PTC_FUNCTIONAL_TESTING\n+\n+import doctest\n \n \n def test_suite():\n-    return TestSuite([\n-        doctest.DocTestSuite(\n-            module=\'archetypes.schemaextender.extender\',\n-            setUp=testing.setUp, tearDown=testing.tearDown),\n-\n-        layered(doctest.DocFileSuite(\n-            \'usage.txt\', package=\'archetypes.schemaextender\',\n-            ), layer=PTC_FUNCTIONAL_TESTING), ])\n+    return TestSuite(\n+        [\n+            doctest.DocTestSuite(\n+                module=\'archetypes.schemaextender.extender\',\n+                setUp=testing.setUp,\n+                tearDown=testing.tearDown,\n+            ),\n+            layered(\n+                doctest.DocFileSuite(\n+                    \'usage.txt\', package=\'archetypes.schemaextender\'\n+                ),\n+                layer=PTC_FUNCTIONAL_TESTING,\n+            ),\n+        ]\n+    )\ndiff --git a/archetypes/schemaextender/tests/testOrdering.py b/archetypes/schemaextender/tests/testOrdering.py\nindex 1c51a8e..341263e 100644\n--- a/archetypes/schemaextender/tests/testOrdering.py\n+++ b/archetypes/schemaextender/tests/testOrdering.py\n@@ -1,14 +1,15 @@\n-import unittest\n-from Products.Archetypes.public import Schema\n-from Products.Archetypes.public import ManagedSchema\n-from Products.Archetypes.utils import OrderedDict\n+# -*- coding: utf-8 -*-\n from archetypes.schemaextender.extender import get_schema_order\n from archetypes.schemaextender.extender import set_schema_order\n from archetypes.schemaextender.tests.mocks import MockField\n+from Products.Archetypes.public import ManagedSchema\n+from Products.Archetypes.public import Schema\n+from Products.Archetypes.utils import OrderedDict\n \n+import unittest\n \n-class GetSchemaOrderTests(unittest.TestCase):\n \n+class GetSchemaOrderTests(unittest.TestCase):\n     def testEmptySchema(self):\n         schema = Schema()\n         self.assertEqual(get_schema_order(schema), {})\n@@ -39,7 +40,6 @@ def testFieldOrdering(self):\n \n \n class SetSchemaOrderTests(unittest.TestCase):\n-\n     def testEmptySchema(self):\n         schema = Schema()\n         before = schema.signature()\ndiff --git a/archetypes/schemaextender/tests/testSchemaFactory.py b/archetypes/schemaextender/tests/testSchemaFactory.py\nindex bf7f9e8..b4fe247 100644\n--- a/archetypes/schemaextender/tests/testSchemaFactory.py\n+++ b/archetypes/schemaextender/tests/testSchemaFactory.py\n@@ -1,22 +1,22 @@\n+# -*- coding: utf-8 -*-\n from archetypes.schemaextender.extender import instanceSchemaFactory\n from archetypes.schemaextender.tests.base import TestCase\n from archetypes.schemaextender.tests.mocks import Extender\n-from archetypes.schemaextender.tests.mocks import OrderableExtender\n from archetypes.schemaextender.tests.mocks import MockField\n+from archetypes.schemaextender.tests.mocks import OrderableExtender\n+from zope.component import provideAdapter\n \n \n class NonExtenderTests(TestCase):\n-\n     def testNoExtenderMeansNoChanges(self):\n         schema = instanceSchemaFactory(self.instance)\n         self.assertTrue(schema is self.instance.schema)\n \n \n class ExtenderTests(TestCase):\n-\n     def setUp(self):\n         TestCase.setUp(self)\n-        self.provideAdapter(Extender, name=u"atse.tests.extender")\n+        provideAdapter(Extender, name=u"atse.tests.extender")\n         Extender.fields = []\n \n     def testNopExtender(self):\n@@ -35,10 +35,9 @@ def testExtendTwiceCreateOnce(self):\n \n \n class OrderableExtenderTests(ExtenderTests):\n-\n     def setUp(self):\n         TestCase.setUp(self)\n-        self.provideAdapter(OrderableExtender, name=u"atse.tests.extender")\n+        provideAdapter(OrderableExtender, name=u"atse.tests.extender")\n         Extender.fields = []\n \n     def testFieldOrder(self):\n'

Repository: archetypes.schemaextender


Branch: refs/heads/master
Date: 2018-10-17T10:44:34+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/archetypes.schemaextender/commit/1300f60584d645f93fe44cc79a4b7ffaed4e0455

try to fix layer leaking 'ho'

Files changed:
M archetypes/schemaextender/tests/base.py

b'diff --git a/archetypes/schemaextender/tests/base.py b/archetypes/schemaextender/tests/base.py\nindex bd85190..9cfca40 100644\n--- a/archetypes/schemaextender/tests/base.py\n+++ b/archetypes/schemaextender/tests/base.py\n@@ -20,10 +20,9 @@ class ExtensibleType(BaseObject):\n \n \n class TestCase(unittest.TestCase):\n+\n+    layer = zca.UNIT_TESTING\n+\n     def setUp(self):\n-        zca.pushGlobalRegistry()\n         provideAdapter(instanceSchemaFactory)\n         self.instance = ExtensibleType("id")\n-\n-    def tearDown(self):\n-        zca.popGlobalRegistry()\n'

Repository: archetypes.schemaextender


Branch: refs/heads/master
Date: 2018-10-17T10:44:34+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/archetypes.schemaextender/commit/2d15d84c1a29f90698753a920ff2f6fdebf5591d

use zca.UNIT_TESTING

Files changed:
M archetypes/schemaextender/tests/testAccessor.py
M archetypes/schemaextender/tests/testIntegration.py

b"diff --git a/archetypes/schemaextender/tests/testAccessor.py b/archetypes/schemaextender/tests/testAccessor.py\nindex 5791f9e..4bf819b 100644\n--- a/archetypes/schemaextender/tests/testAccessor.py\n+++ b/archetypes/schemaextender/tests/testAccessor.py\n@@ -1,7 +1,8 @@\n # -*- coding: utf-8 -*-\n from archetypes.schemaextender.field import ExtensionField\n from archetypes.schemaextender.interfaces import ISchemaExtender\n-from archetypes.schemaextender.tests.base import ASTestCase as TestCase\n+from archetypes.schemaextender.tests.base import ASTestCase\n+from plone.testing import zca\n from Products.Archetypes.atapi import ComputedField\n from Products.Archetypes.atapi import StringField\n from Products.Archetypes.atapi import StringWidget\n@@ -51,11 +52,16 @@ def getFields(self):\n         return self.fields\n \n \n-class AccessorTests(TestCase):\n+class AccessorTests(ASTestCase):\n+\n     def afterSetUp(self):\n+        zca.pushGlobalRegistry()\n         classImplements(ATDocument, IFoo)\n         provideAdapter(Extender, name=u'foo')\n \n+    def beforeTearDown(self):\n+        zca.popGlobalRegistry()\n+\n     def testDefaultIndexAccessor(self):\n         doc = self.folder[self.folder.invokeFactory('Document', 'doc', foo=23)]\n         field = doc.getField('foo')\ndiff --git a/archetypes/schemaextender/tests/testIntegration.py b/archetypes/schemaextender/tests/testIntegration.py\nindex b77cbc8..617f6b7 100644\n--- a/archetypes/schemaextender/tests/testIntegration.py\n+++ b/archetypes/schemaextender/tests/testIntegration.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.app.testing.bbb_at import PTC_FUNCTIONAL_TESTING\n from plone.testing import layered\n+from plone.testing import zca\n from unittest import TestSuite\n from zope.component import testing\n \n@@ -10,10 +11,13 @@\n def test_suite():\n     return TestSuite(\n         [\n-            doctest.DocTestSuite(\n-                module='archetypes.schemaextender.extender',\n-                setUp=testing.setUp,\n-                tearDown=testing.tearDown,\n+            layered(\n+                doctest.DocTestSuite(\n+                    module='archetypes.schemaextender.extender',\n+                    setUp=testing.setUp,\n+                    tearDown=testing.tearDown,\n+                ),\n+                layer=zca.UNIT_TESTING,\n             ),\n             layered(\n                 doctest.DocFileSuite(\n"

Repository: archetypes.schemaextender


Branch: refs/heads/master
Date: 2018-10-17T10:44:34+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/archetypes.schemaextender/commit/5a489fab28bddaf9ff0910a527f5bb47357bc7ea

dont leak extender adapter

Files changed:
M archetypes/schemaextender/tests/testAccessor.py

b"diff --git a/archetypes/schemaextender/tests/testAccessor.py b/archetypes/schemaextender/tests/testAccessor.py\nindex 4bf819b..cfd5d58 100644\n--- a/archetypes/schemaextender/tests/testAccessor.py\n+++ b/archetypes/schemaextender/tests/testAccessor.py\n@@ -54,31 +54,31 @@ def getFields(self):\n \n class AccessorTests(ASTestCase):\n \n-    def afterSetUp(self):\n-        zca.pushGlobalRegistry()\n+    def testDefaultIndexAccessor(self):\n         classImplements(ATDocument, IFoo)\n         provideAdapter(Extender, name=u'foo')\n-\n-    def beforeTearDown(self):\n-        zca.popGlobalRegistry()\n-\n-    def testDefaultIndexAccessor(self):\n         doc = self.folder[self.folder.invokeFactory('Document', 'doc', foo=23)]\n         field = doc.getField('foo')\n         self.assertEqual(field.getIndexAccessor(doc)(), 23)\n \n     def testNamedIndexAccessor(self):\n+        classImplements(ATDocument, IFoo)\n+        provideAdapter(Extender, name=u'foo')\n         doc = self.folder[self.folder.invokeFactory('Document', 'doc', bar=23)]\n         field = doc.getField('bar')\n         self.assertEqual(field.getAccessor(doc)(), 23)\n         self.assertEqual(field.getIndexAccessor(doc)(), 'doc')\n \n     def testInvalidIndexAccessor(self):\n+        classImplements(ATDocument, IFoo)\n+        provideAdapter(Extender, name=u'foo')\n         doc = self.folder[self.folder.invokeFactory('Document', 'doc', hmm=23)]\n         field = doc.getField('hmm')\n         self.assertRaises(ValueError, field.getIndexAccessor, doc)\n \n     def testComputedField(self):\n+        classImplements(ATDocument, IFoo)\n+        provideAdapter(Extender, name=u'foo')\n         doc = self.folder[self.folder.invokeFactory('Document', 'doc')]\n         field = doc.getField('ho')\n         self.assertEqual(field.getAccessor(doc)(), 'I compute ho')\n"

Repository: archetypes.schemaextender


Branch: refs/heads/master
Date: 2018-10-17T10:44:34+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/archetypes.schemaextender/commit/3319551fe410dd29d4daca245acb103930f5fb8f

fix extender adapter leaking

and cleanup code

Files changed:
M archetypes/schemaextender/tests/base.py
M archetypes/schemaextender/tests/testAccessor.py

b'diff --git a/archetypes/schemaextender/tests/base.py b/archetypes/schemaextender/tests/base.py\nindex 9cfca40..1fda924 100644\n--- a/archetypes/schemaextender/tests/base.py\n+++ b/archetypes/schemaextender/tests/base.py\n@@ -12,6 +12,7 @@\n \n class ASTestCase(PloneTestCase):\n     """ Base class for testing archetypes.schemaextender """\n+    layer = zca.UNIT_TESTING\n \n \n @implementer(IExtensible)\ndiff --git a/archetypes/schemaextender/tests/testAccessor.py b/archetypes/schemaextender/tests/testAccessor.py\nindex cfd5d58..2015472 100644\n--- a/archetypes/schemaextender/tests/testAccessor.py\n+++ b/archetypes/schemaextender/tests/testAccessor.py\n@@ -54,31 +54,27 @@ def getFields(self):\n \n class AccessorTests(ASTestCase):\n \n-    def testDefaultIndexAccessor(self):\n+    def afterSetUp(self):\n         classImplements(ATDocument, IFoo)\n         provideAdapter(Extender, name=u\'foo\')\n+\n+    def testDefaultIndexAccessor(self):\n         doc = self.folder[self.folder.invokeFactory(\'Document\', \'doc\', foo=23)]\n         field = doc.getField(\'foo\')\n         self.assertEqual(field.getIndexAccessor(doc)(), 23)\n \n     def testNamedIndexAccessor(self):\n-        classImplements(ATDocument, IFoo)\n-        provideAdapter(Extender, name=u\'foo\')\n         doc = self.folder[self.folder.invokeFactory(\'Document\', \'doc\', bar=23)]\n         field = doc.getField(\'bar\')\n         self.assertEqual(field.getAccessor(doc)(), 23)\n         self.assertEqual(field.getIndexAccessor(doc)(), \'doc\')\n \n     def testInvalidIndexAccessor(self):\n-        classImplements(ATDocument, IFoo)\n-        provideAdapter(Extender, name=u\'foo\')\n         doc = self.folder[self.folder.invokeFactory(\'Document\', \'doc\', hmm=23)]\n         field = doc.getField(\'hmm\')\n         self.assertRaises(ValueError, field.getIndexAccessor, doc)\n \n     def testComputedField(self):\n-        classImplements(ATDocument, IFoo)\n-        provideAdapter(Extender, name=u\'foo\')\n         doc = self.folder[self.folder.invokeFactory(\'Document\', \'doc\')]\n         field = doc.getField(\'ho\')\n         self.assertEqual(field.getAccessor(doc)(), \'I compute ho\')\n'

Repository: archetypes.schemaextender


Branch: refs/heads/master
Date: 2018-10-17T10:44:34+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/archetypes.schemaextender/commit/b7453eb9ffaf7c0193be2f47fba9b1a18272fb77

remove layer and manually push/pop global registry

Files changed:
M archetypes/schemaextender/tests/base.py

b'diff --git a/archetypes/schemaextender/tests/base.py b/archetypes/schemaextender/tests/base.py\nindex 1fda924..65b8d25 100644\n--- a/archetypes/schemaextender/tests/base.py\n+++ b/archetypes/schemaextender/tests/base.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from archetypes.schemaextender.extender import instanceSchemaFactory\n from archetypes.schemaextender.interfaces import IExtensible\n+from plone.app.testing import helpers\n from plone.app.testing.bbb_at import PloneTestCase\n from plone.testing import zca\n from Products.Archetypes.public import BaseObject\n@@ -11,8 +12,16 @@\n \n \n class ASTestCase(PloneTestCase):\n-    """ Base class for testing archetypes.schemaextender """\n-    layer = zca.UNIT_TESTING\n+    """ Base class for testing archetypes.schemaextender\n+        we manually push and pop global registry here to avoid\n+        leaking extended fields into other testcases\n+    """\n+\n+    def beforeSetUp(self):\n+        helpers.pushGlobalRegistry(self.layer[\'portal\'])\n+\n+    def afterTearDown(self):\n+        helpers.popGlobalRegistry(self.layer[\'portal\'])\n \n \n @implementer(IExtensible)\n'

Repository: archetypes.schemaextender


Branch: refs/heads/master
Date: 2018-10-17T10:45:46+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/archetypes.schemaextender/commit/44c6fc3ba2e6efaf1b2eaedd76ccbd15a79f7702

Merge pull request #5 from plone/testlayer

Switch to new TestCase using AT after PloneTestcase is now DX.

Files changed:
M CHANGES.rst
M archetypes/schemaextender/tests/__init__.py
M archetypes/schemaextender/tests/base.py
M archetypes/schemaextender/tests/mocks.py
M archetypes/schemaextender/tests/testAccessor.py
M archetypes/schemaextender/tests/testIntegration.py
M archetypes/schemaextender/tests/testOrdering.py
M archetypes/schemaextender/tests/testSchemaFactory.py
M archetypes/schemaextender/usage.txt

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex b354161..0c09c9d 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,8 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n-\n+- Switch to new TestCase using AT after PloneTestcase is now DX.\n+  [pbauer]\n \n 2.1.8 (2018-01-30)\n ------------------\ndiff --git a/archetypes/schemaextender/tests/__init__.py b/archetypes/schemaextender/tests/__init__.py\nindex 792d600..ec51c5a 100644\n--- a/archetypes/schemaextender/tests/__init__.py\n+++ b/archetypes/schemaextender/tests/__init__.py\n@@ -1 +1,2 @@\n+# -*- coding: utf-8 -*-\n #\ndiff --git a/archetypes/schemaextender/tests/base.py b/archetypes/schemaextender/tests/base.py\nindex 48f7344..65b8d25 100644\n--- a/archetypes/schemaextender/tests/base.py\n+++ b/archetypes/schemaextender/tests/base.py\n@@ -1,15 +1,27 @@\n-import unittest\n-from zope.interface import implementer\n-from zope.component import provideAdapter\n-from zope.component import getGlobalSiteManager\n+# -*- coding: utf-8 -*-\n from archetypes.schemaextender.extender import instanceSchemaFactory\n from archetypes.schemaextender.interfaces import IExtensible\n-from plone.app.testing.bbb import PloneTestCase\n+from plone.app.testing import helpers\n+from plone.app.testing.bbb_at import PloneTestCase\n+from plone.testing import zca\n from Products.Archetypes.public import BaseObject\n+from zope.component import provideAdapter\n+from zope.interface import implementer\n+\n+import unittest\n \n \n class ASTestCase(PloneTestCase):\n-    """ Base class for testing archetypes.schemaextender """\n+    """ Base class for testing archetypes.schemaextender\n+        we manually push and pop global registry here to avoid\n+        leaking extended fields into other testcases\n+    """\n+\n+    def beforeSetUp(self):\n+        helpers.pushGlobalRegistry(self.layer[\'portal\'])\n+\n+    def afterTearDown(self):\n+        helpers.popGlobalRegistry(self.layer[\'portal\'])\n \n \n @implementer(IExtensible)\n@@ -19,16 +31,8 @@ class ExtensibleType(BaseObject):\n \n class TestCase(unittest.TestCase):\n \n+    layer = zca.UNIT_TESTING\n+\n     def setUp(self):\n-        self._adapters=[]\n-        self.provideAdapter(instanceSchemaFactory)\n-        self.instance=ExtensibleType("id")\n-\n-    def tearDown(self):\n-        sm=getGlobalSiteManager()\n-        for (args, kwargs) in self._adapters:\n-            sm.unregisterAdapter(*args, **kwargs)\n-\n-    def provideAdapter(self, *args, **kwargs):\n-        provideAdapter(*args, **kwargs)\n-        self._adapters.append((args, kwargs))\n+        provideAdapter(instanceSchemaFactory)\n+        self.instance = ExtensibleType("id")\ndiff --git a/archetypes/schemaextender/tests/mocks.py b/archetypes/schemaextender/tests/mocks.py\nindex 2dd206a..a45c1ca 100644\n--- a/archetypes/schemaextender/tests/mocks.py\n+++ b/archetypes/schemaextender/tests/mocks.py\n@@ -1,14 +1,15 @@\n-from zope.interface import Interface\n+# -*- coding: utf-8 -*-\n+from archetypes.schemaextender.interfaces import IOrderableSchemaExtender\n+from archetypes.schemaextender.interfaces import ISchemaExtender\n+from archetypes.schemaextender.interfaces import ISchemaModifier\n+from archetypes.schemaextender.tests.base import ExtensibleType\n+from Products.Archetypes.interfaces.field import IField\n+from zope.component import adapts\n from zope.interface import implementer\n from zope.interface import implementer_only\n from zope.interface import implements\n+from zope.interface import Interface\n from zope.interface.interfaces import IInterface\n-from zope.component import adapts\n-from archetypes.schemaextender.tests.base import ExtensibleType\n-from archetypes.schemaextender.interfaces import ISchemaExtender\n-from archetypes.schemaextender.interfaces import IOrderableSchemaExtender\n-from archetypes.schemaextender.interfaces import ISchemaModifier\n-from Products.Archetypes.interfaces.field import IField\n \n \n class IHighlighted(Interface):\n@@ -37,17 +38,17 @@ def getOrder(self, original):\n         """"Overly complex logic: put our fields first."""\n         if not self.fields:\n             return original\n-        toadd=[]\n+        toadd = []\n         for field in self.fields:\n-            field=field.getName()\n+            field = field.getName()\n             try:\n-                index=original["default"].index(field)\n+                index = original["default"].index(field)\n             except ValueError:\n                 continue\n             del original["default"][index]\n             toadd.append(field)\n \n-        original["default"]=toadd + original["default"]\n+        original["default"] = toadd + original["default"]\n         return original\n \n \n@@ -70,8 +71,8 @@ class MockField:\n     type = "mock"\n \n     def __init__(self, name="MockField", schemata="default"):\n-        self.name=name\n-        self.schemata=schemata\n+        self.name = name\n+        self.schemata = schemata\n \n     def toString(self):\n         return "MockField"\ndiff --git a/archetypes/schemaextender/tests/testAccessor.py b/archetypes/schemaextender/tests/testAccessor.py\nindex afaa756..2015472 100644\n--- a/archetypes/schemaextender/tests/testAccessor.py\n+++ b/archetypes/schemaextender/tests/testAccessor.py\n@@ -1,10 +1,17 @@\n-from zope.interface import Interface, implementer, classImplements\n-from zope.component import adapts, provideAdapter\n-from Products.Archetypes.atapi import ComputedField, StringField, StringWidget\n-from Products.ATContentTypes.content.document import ATDocument\n-from archetypes.schemaextender.interfaces import ISchemaExtender\n+# -*- coding: utf-8 -*-\n from archetypes.schemaextender.field import ExtensionField\n-from archetypes.schemaextender.tests.base import ASTestCase as TestCase\n+from archetypes.schemaextender.interfaces import ISchemaExtender\n+from archetypes.schemaextender.tests.base import ASTestCase\n+from plone.testing import zca\n+from Products.Archetypes.atapi import ComputedField\n+from Products.Archetypes.atapi import StringField\n+from Products.Archetypes.atapi import StringWidget\n+from Products.ATContentTypes.content.document import ATDocument\n+from zope.component import adapter\n+from zope.component import provideAdapter\n+from zope.interface import classImplements\n+from zope.interface import implementer\n+from zope.interface import Interface\n \n \n class IFoo(Interface):\n@@ -20,19 +27,23 @@ class ExtendedComputedField(ExtensionField, ComputedField):\n \n \n @implementer(ISchemaExtender)\n+@adapter(IFoo)\n class Extender(object):\n-    adapts(IFoo)\n \n     fields = [\n-        FooField(\'foo\',\n-            widget = StringWidget(label=\'foo\', description=\'foo!\')),\n-        FooField(\'bar\',\n-            index_method = \'title_or_id\',\n-            widget = StringWidget(label=\'bar\', description=\'bar!\')),\n-        FooField(\'hmm\',\n-            index_method = lambda: \'hmm\',\n-            widget = StringWidget(label=\'hmm\', description=\'hmm!\')),\n-        ExtendedComputedField(\'ho\', expression = \'"I compute ho"\'), ]\n+        FooField(\'foo\', widget=StringWidget(label=\'foo\', description=\'foo!\')),\n+        FooField(\n+            \'bar\',\n+            index_method=\'title_or_id\',\n+            widget=StringWidget(label=\'bar\', description=\'bar!\'),\n+        ),\n+        FooField(\n+            \'hmm\',\n+            index_method=lambda: \'hmm\',\n+            widget=StringWidget(label=\'hmm\', description=\'hmm!\'),\n+        ),\n+        ExtendedComputedField(\'ho\', expression=\'"I compute ho"\'),\n+    ]\n \n     def __init__(self, context):\n         self.context = context\n@@ -41,7 +52,7 @@ def getFields(self):\n         return self.fields\n \n \n-class AccessorTests(TestCase):\n+class AccessorTests(ASTestCase):\n \n     def afterSetUp(self):\n         classImplements(ATDocument, IFoo)\ndiff --git a/archetypes/schemaextender/tests/testIntegration.py b/archetypes/schemaextender/tests/testIntegration.py\nindex 199f888..617f6b7 100644\n--- a/archetypes/schemaextender/tests/testIntegration.py\n+++ b/archetypes/schemaextender/tests/testIntegration.py\n@@ -1,17 +1,29 @@\n-import doctest\n+# -*- coding: utf-8 -*-\n+from plone.app.testing.bbb_at import PTC_FUNCTIONAL_TESTING\n+from plone.testing import layered\n+from plone.testing import zca\n from unittest import TestSuite\n-\n from zope.component import testing\n-from plone.testing import layered\n-from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING\n \n+import doctest\n \n-def test_suite():\n-    return TestSuite([\n-        doctest.DocTestSuite(\n-            module=\'archetypes.schemaextender.extender\',\n-            setUp=testing.setUp, tearDown=testing.tearDown),\n \n-        layered(doctest.DocFileSuite(\n-            \'usage.txt\', package=\'archetypes.schemaextender\',\n-            ), layer=PTC_FUNCTIONAL_TESTING), ])\n+def test_suite():\n+    return TestSuite(\n+        [\n+            layered(\n+                doctest.DocTestSuite(\n+                    module=\'archetypes.schemaextender.extender\',\n+                    setUp=testing.setUp,\n+                    tearDown=testing.tearDown,\n+                ),\n+                layer=zca.UNIT_TESTING,\n+            ),\n+            layered(\n+                doctest.DocFileSuite(\n+                    \'usage.txt\', package=\'archetypes.schemaextender\'\n+                ),\n+                layer=PTC_FUNCTIONAL_TESTING,\n+            ),\n+        ]\n+    )\ndiff --git a/archetypes/schemaextender/tests/testOrdering.py b/archetypes/schemaextender/tests/testOrdering.py\nindex 1c51a8e..341263e 100644\n--- a/archetypes/schemaextender/tests/testOrdering.py\n+++ b/archetypes/schemaextender/tests/testOrdering.py\n@@ -1,14 +1,15 @@\n-import unittest\n-from Products.Archetypes.public import Schema\n-from Products.Archetypes.public import ManagedSchema\n-from Products.Archetypes.utils import OrderedDict\n+# -*- coding: utf-8 -*-\n from archetypes.schemaextender.extender import get_schema_order\n from archetypes.schemaextender.extender import set_schema_order\n from archetypes.schemaextender.tests.mocks import MockField\n+from Products.Archetypes.public import ManagedSchema\n+from Products.Archetypes.public import Schema\n+from Products.Archetypes.utils import OrderedDict\n \n+import unittest\n \n-class GetSchemaOrderTests(unittest.TestCase):\n \n+class GetSchemaOrderTests(unittest.TestCase):\n     def testEmptySchema(self):\n         schema = Schema()\n         self.assertEqual(get_schema_order(schema), {})\n@@ -39,7 +40,6 @@ def testFieldOrdering(self):\n \n \n class SetSchemaOrderTests(unittest.TestCase):\n-\n     def testEmptySchema(self):\n         schema = Schema()\n         before = schema.signature()\ndiff --git a/archetypes/schemaextender/tests/testSchemaFactory.py b/archetypes/schemaextender/tests/testSchemaFactory.py\nindex bf7f9e8..b4fe247 100644\n--- a/archetypes/schemaextender/tests/testSchemaFactory.py\n+++ b/archetypes/schemaextender/tests/testSchemaFactory.py\n@@ -1,22 +1,22 @@\n+# -*- coding: utf-8 -*-\n from archetypes.schemaextender.extender import instanceSchemaFactory\n from archetypes.schemaextender.tests.base import TestCase\n from archetypes.schemaextender.tests.mocks import Extender\n-from archetypes.schemaextender.tests.mocks import OrderableExtender\n from archetypes.schemaextender.tests.mocks import MockField\n+from archetypes.schemaextender.tests.mocks import OrderableExtender\n+from zope.component import provideAdapter\n \n \n class NonExtenderTests(TestCase):\n-\n     def testNoExtenderMeansNoChanges(self):\n         schema = instanceSchemaFactory(self.instance)\n         self.assertTrue(schema is self.instance.schema)\n \n \n class ExtenderTests(TestCase):\n-\n     def setUp(self):\n         TestCase.setUp(self)\n-        self.provideAdapter(Extender, name=u"atse.tests.extender")\n+        provideAdapter(Extender, name=u"atse.tests.extender")\n         Extender.fields = []\n \n     def testNopExtender(self):\n@@ -35,10 +35,9 @@ def testExtendTwiceCreateOnce(self):\n \n \n class OrderableExtenderTests(ExtenderTests):\n-\n     def setUp(self):\n         TestCase.setUp(self)\n-        self.provideAdapter(OrderableExtender, name=u"atse.tests.extender")\n+        provideAdapter(OrderableExtender, name=u"atse.tests.extender")\n         Extender.fields = []\n \n     def testFieldOrder(self):\ndiff --git a/archetypes/schemaextender/usage.txt b/archetypes/schemaextender/usage.txt\nindex 1c7c119..0e1042d 100644\n--- a/archetypes/schemaextender/usage.txt\n+++ b/archetypes/schemaextender/usage.txt\n@@ -253,10 +253,10 @@ test.\n     >>> browser.addHeader(\'Authorization\',\n     ...                   \'Basic %s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD))\n \n+    >>> browser.handleErrors = False\n     >>> browser.open(folder_url)\n     >>> browser.getLink(\'Add new\').click()\n     >>> browser.getControl(\'Page\').click()\n-    >>> browser.handleErrors = False\n     >>> browser.getControl(\'Add\').click()\n \n Now we are on the edit page. Let\'s find and set some values, as well as\n'

