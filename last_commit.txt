Repository: plone.app.caching


Branch: refs/heads/master
Date: 2022-04-04T16:32:36-03:00
Author: Érico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/08858c2e79fcc03665a805d026751cd249e1ccdc

Add Github actions to this repo

Files changed:
A .github/workflows/black.yml
A .github/workflows/pyroma.yml
A .github/workflows/tests.yml
A .github/workflows/zpretty.yml

b'diff --git a/.github/workflows/black.yml b/.github/workflows/black.yml\nnew file mode 100644\nindex 0000000..61a8597\n--- /dev/null\n+++ b/.github/workflows/black.yml\n@@ -0,0 +1,35 @@\n+name: Black\n+on: [push]\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        python-version: [3.8]\n+\n+    steps:\n+      # git checkout\n+      - uses: actions/checkout@v2\n+\n+      # python setup\n+      - name: Set up Python ${{ matrix.python-version }}\n+        uses: actions/setup-python@v1\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+\n+      # python cache\n+      - uses: actions/cache@v1\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n+          restore-keys: |\n+            ${{ runner.os }}-pip-\n+\n+      # install black\n+      - name: install black\n+        run: pip install black\n+\n+      # run black\n+      - name: run black\n+        run: black plone/ --check --diff\ndiff --git a/.github/workflows/pyroma.yml b/.github/workflows/pyroma.yml\nnew file mode 100644\nindex 0000000..bbad3c2\n--- /dev/null\n+++ b/.github/workflows/pyroma.yml\n@@ -0,0 +1,35 @@\n+name: Pyroma\n+on: [push]\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        python-version: [3.8]\n+\n+    steps:\n+      # git checkout\n+      - uses: actions/checkout@v2\n+\n+      # python setup\n+      - name: Set up Python ${{ matrix.python-version }}\n+        uses: actions/setup-python@v1\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+\n+      # python cache\n+      - uses: actions/cache@v1\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n+          restore-keys: |\n+            ${{ runner.os }}-pip-\n+\n+      # install pyroma\n+      - name: install pyroma\n+        run: pip install pyroma\n+\n+      # run pyroma\n+      - name: run pyroma\n+        run: pyroma -n 10 -d .\ndiff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nnew file mode 100644\nindex 0000000..dc2521b\n--- /dev/null\n+++ b/.github/workflows/tests.yml\n@@ -0,0 +1,34 @@\n+name: Tests\n+on: [push]\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        python: [3.7, 3.8, 3.9]\n+        plone: ["6.0.0a3", "5.2-latest"]\n+        exclude:\n+          - plone: "5.2-latest"\n+            python: 3.9\n+\n+    steps:\n+      # git checkout\n+      - uses: actions/checkout@v2\n+\n+      - name: Setup Plone ${{ matrix.plone }} with Python ${{ matrix.python }}\n+        id: setup\n+        uses: plone/setup-plone@v1.0.0\n+        with:\n+          python-version: ${{ matrix.python }}\n+          plone-version: ${{ matrix.plone }}\n+\n+      # Install plone.volto with test extras\n+      - name: Install plone.volto\n+        run: |\n+          pip install ".[test]"\n+\n+      # test\n+      - name: test\n+        run: |\n+          zope-testrunner --auto-color --auto-progress --test-path .\ndiff --git a/.github/workflows/zpretty.yml b/.github/workflows/zpretty.yml\nnew file mode 100644\nindex 0000000..5051f1c\n--- /dev/null\n+++ b/.github/workflows/zpretty.yml\n@@ -0,0 +1,40 @@\n+name: zpretty\n+on: [push]\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        python-version: [3.8]\n+\n+    steps:\n+      # git checkout\n+      - uses: actions/checkout@v2\n+\n+      # python setup\n+      - name: Set up Python ${{ matrix.python-version }}\n+        uses: actions/setup-python@v1\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+\n+      # python cache\n+      - uses: actions/cache@v1\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n+          restore-keys: |\n+            ${{ runner.os }}-pip-\n+\n+      # install zpretty\n+      - name: install zpretty\n+        run: pip install zpretty\n+\n+      # run zpretty\n+      - name: run zpretty\n+        run: find plone -name \'*.zcml\' | xargs zpretty -i\n+\n+      # XXX: this doesn\'t work on gh actions (https://github.com/plone/plone.restapi/pull/1119/checks?check_run_id=2686474411)\n+      # run git diff\n+      - name: run git diff\n+        run: git diff --exit-code\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2022-04-04T16:35:35-03:00
Author: Érico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/f1a0f7c067c77d4c424f0ace66b4b55eefc64f33

Apply black

Files changed:
M plone/app/caching/browser/controlpanel.py
M plone/app/caching/browser/edit.py
M plone/app/caching/operations/default.py
M plone/app/caching/operations/etags.py
M plone/app/caching/operations/utils.py
M plone/app/caching/tests/test_integration.py
M plone/app/caching/tests/test_operation_default.py
M plone/app/caching/tests/test_operation_parameters.py
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py
M plone/app/caching/tests/test_purge.py
M plone/app/caching/tests/test_utils.py

b'diff --git a/plone/app/caching/browser/controlpanel.py b/plone/app/caching/browser/controlpanel.py\nindex fb49cba..3543097 100644\n--- a/plone/app/caching/browser/controlpanel.py\n+++ b/plone/app/caching/browser/controlpanel.py\n@@ -159,9 +159,7 @@ def update(self):\n                 self.processSave()\n             elif "form.button.Cancel" in self.request.form:\n                 self.request.response.redirect(\n-                    "{}/@@overview-controlpanel".format(\n-                        self.context.absolute_url(),\n-                    ),\n+                    f"{self.context.absolute_url()}/@@overview-controlpanel",\n                 )\n \n     def processSave(self):\n@@ -209,18 +207,20 @@ def processSave(self):\n                     continue\n \n                 if contentType in contentTypeRulesetMapping:\n+                    error_content_type = self.contentTypesLookup.get(\n+                        contentType,\n+                        {},\n+                    ).get(\n+                        "title",\n+                        contentType,\n+                    )\n+                    error_ruleset = contentTypeRulesetMapping[contentType]\n                     self.errors.setdefault("contenttypes", {},)[ruleset] = _(\n-                        "Content type ${contentType} is already mapped to "\n+                        "Content type ${error_content_type} is already mapped to "\n                         "the rule ${ruleset}.",\n                         mapping={\n-                            "contentType": self.contentTypesLookup.get(\n-                                contentType,\n-                                {},\n-                            ).get(\n-                                "title",\n-                                contentType,\n-                            ),\n-                            "ruleset": contentTypeRulesetMapping[contentType],\n+                            "contentType": error_content_type,\n+                            "ruleset": error_ruleset,\n                         },\n                     )\n                 else:\n@@ -470,13 +470,7 @@ def hasGlobalOptions(self, operationType):\n             return False\n \n         for option in options:\n-            if (\n-                "{}.{}".format(\n-                    prefix,\n-                    option,\n-                )\n-                in self.registry\n-            ):\n+            if f"{prefix}.{option}" in self.registry:\n                 return True\n \n         return False\n@@ -520,9 +514,8 @@ def processImport(self):\n \n         # Create a snapshot\n         if snapshot:\n-            snapshotId = "plone.app.caching.beforeimport.{}".format(\n-                datetime.datetime.now().isoformat().replace(":", ".")\n-            )\n+            snapshot_date = datetime.datetime.now().isoformat().replace(":", ".")\n+            snapshotId = f"plone.app.caching.beforeimport.{snapshot_date}"\n             portal_setup.createSnapshot(snapshotId)\n \n         # Import the new profile\ndiff --git a/plone/app/caching/browser/edit.py b/plone/app/caching/browser/edit.py\nindex dc26e08..da3bf84 100644\n--- a/plone/app/caching/browser/edit.py\n+++ b/plone/app/caching/browser/edit.py\n@@ -97,11 +97,7 @@ def update(self):\n             fieldName = f"{prefix}.{option}"\n \n             if self.rulesetName:\n-                rulesetFieldName = "{}.{}.{}".format(\n-                    prefix,\n-                    self.rulesetName,\n-                    option,\n-                )\n+                rulesetFieldName = f"{prefix}.{self.rulesetName}.{option}"\n \n                 if rulesetFieldName in self.registry.records:\n                     newField = self.cloneField(\n@@ -150,21 +146,14 @@ def getContent(self):\n         options = self.operation.options\n \n         for option in options:\n-            recordName = "{}.{}".format(\n-                prefix,\n-                option,\n-            )\n+            recordName = f"{prefix}.{option}"\n \n             # If a ruleset-specific record does not exist, we can fall back on\n             # a global record, since the per-ruleset records will be created\n             # as necessary in applyChanges()\n \n             if self.rulesetName:\n-                rulesetRecordName = "{}.{}.{}".format(\n-                    prefix,\n-                    self.rulesetName,\n-                    option,\n-                )\n+                rulesetRecordName = f"{prefix}.{self.rulesetName}.{option}"\n \n                 if rulesetRecordName in self.registry.records:\n                     context[rulesetRecordName] = self.registry[rulesetRecordName]\n@@ -256,9 +245,7 @@ def save(self, action):\n         self.applyChanges(data)\n         IStatusMessage(self.request).addStatusMessage(_("Changes saved."), "info")\n         self.request.response.redirect(\n-            "{}/@@caching-controlpanel#detailed-settings".format(\n-                self.context.absolute_url(),\n-            ),\n+            f"{self.context.absolute_url()}/@@caching-controlpanel#detailed-settings",\n         )\n         return ""\n \n@@ -266,19 +253,14 @@ def save(self, action):\n     def cancel(self, action):\n         IStatusMessage(self.request).addStatusMessage(_("Edit cancelled."), type="info")\n         self.request.response.redirect(\n-            "{}/@@caching-controlpanel#detailed-settings".format(\n-                self.context.absolute_url(),\n-            ),\n+            f"{self.context.absolute_url()}/@@caching-controlpanel#detailed-settings"\n         )\n         return ""\n \n     @button.buttonAndHandler(_("Delete settings (use defaults)"), name="clear")\n     def clear(self, action):\n         for key in self.getContent().keys():\n-            key_suffix = "{}.{}.".format(\n-                self.operation.prefix,\n-                self.rulesetName,\n-            )\n+            key_suffix = f"{self.operation.prefix}.{self.rulesetName}."\n             assert key.startswith(key_suffix)\n \n             if key in self.registry.records:\n@@ -288,8 +270,6 @@ def clear(self, action):\n             _("Ruleset-specific settings removed."), type="info"\n         )\n         self.request.response.redirect(\n-            "{}/@@caching-controlpanel#detailed-settings".format(\n-                self.context.absolute_url(),\n-            ),\n+            f"{self.context.absolute_url()}/@@caching-controlpanel#detailed-settings",\n         )\n         return ""\ndiff --git a/plone/app/caching/operations/default.py b/plone/app/caching/operations/default.py\nindex 06a04eb..d3fbbbb 100644\n--- a/plone/app/caching/operations/default.py\n+++ b/plone/app/caching/operations/default.py\n@@ -181,7 +181,7 @@ def modifyResponse(self, rulename, response, class_=None):\n         if cacheStop(self.request, rulename):\n             # only stop with etags if configured\n             if etags:\n-                etag = "{}{}".format(time.time(), random.randint(0, 1000))\n+                etag = f"{time.time()}{random.randint(0, 1000)}"\n                 return setCacheHeaders(\n                     self.published,\n                     self.request,\n@@ -330,15 +330,15 @@ class StrongCaching(BaseCaching):\n class TerseCaching(BaseCaching):\n     """Terse caching operation."""\n \n-    title = _(u"Terse caching")\n+    title = _("Terse caching")\n     description = _(\n-        u"Cache in browser (default: 10s) and proxy (default: 1 min). "\n-        u"Keep very short in cache to buffer hi-load scenarios ",\n-        u"Use for very dynamic content, like collecting data from "\n-        u"the whole portal. "\n-        u"Temporary outdated is less important than performance."\n-        u"Reduce in-cache time to just 3-10 seconds to only buffer peak load "\n-        u"if behind a proxy",\n+        "Cache in browser (default: 10s) and proxy (default: 1 min). "\n+        "Keep very short in cache to buffer hi-load scenarios ",\n+        "Use for very dynamic content, like collecting data from "\n+        "the whole portal. "\n+        "Temporary outdated is less important than performance."\n+        "Reduce in-cache time to just 3-10 seconds to only buffer peak load "\n+        "if behind a proxy",\n     )\n     prefix = "plone.app.caching.terseCaching"\n     sort = 4\ndiff --git a/plone/app/caching/operations/etags.py b/plone/app/caching/operations/etags.py\nindex 1faa8e7..0cbf70a 100644\n--- a/plone/app/caching/operations/etags.py\n+++ b/plone/app/caching/operations/etags.py\n@@ -13,13 +13,16 @@\n from zope.interface import implementer\n from zope.interface import Interface\n \n+\n try:\n     from Products.CMFPlone.resources.utils import get_override_directory\n     from Products.CMFPlone.resources.utils import PRODUCTION_RESOURCE_DIRECTORY\n except ImportError:\n     # Plone < 6\n     from Products.CMFPlone.resources.browser.combine import get_override_directory\n-    from Products.CMFPlone.resources.browser.combine import PRODUCTION_RESOURCE_DIRECTORY\n+    from Products.CMFPlone.resources.browser.combine import (\n+        PRODUCTION_RESOURCE_DIRECTORY,\n+    )\n \n import random\n import time\n@@ -213,7 +216,7 @@ def __call__(self):\n             return None\n         if bool(tool.isAnonymousUser()):\n             return None\n-        return "{}{}".format(time.time(), random.randint(0, 1000))\n+        return f"{time.time()}{random.randint(0, 1000)}"\n \n \n @implementer(IETagValue)\ndiff --git a/plone/app/caching/operations/utils.py b/plone/app/caching/operations/utils.py\nindex c8a500f..274233b 100644\n--- a/plone/app/caching/operations/utils.py\n+++ b/plone/app/caching/operations/utils.py\n@@ -746,12 +746,10 @@ def getRAMCacheKey(request, etag=None, lastModified=None):\n     optional but in most cases that are worth caching in RAM, the etag\n     is needed to ensure the key changes when the resource view changes.\n     """\n-\n-    resourceKey = "{}{}?{}".format(\n-        request.get("SERVER_URL", ""),\n-        request.get("PATH_INFO", ""),\n-        request.get("QUERY_STRING", ""),\n-    )\n+    server_url = request.get("SERVER_URL", "")\n+    path_info = request.get("PATH_INFO", "")\n+    query_string = request.get("QUERY_STRING", "")\n+    resourceKey = f"{server_url}{path_info}?{query_string}"\n     if etag:\n         resourceKey = "|" + etag + "||" + resourceKey\n     if lastModified:\ndiff --git a/plone/app/caching/tests/test_integration.py b/plone/app/caching/tests/test_integration.py\nindex f3fc8f2..10d134f 100644\n--- a/plone/app/caching/tests/test_integration.py\n+++ b/plone/app/caching/tests/test_integration.py\n@@ -80,10 +80,7 @@ def test_controlpanel(self):\n         browser.handleErrors = False\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                SITE_OWNER_NAME,\n-                SITE_OWNER_PASSWORD,\n-            ),\n+            f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}",\n         )\n \n         browser.open(f"{self.portal.absolute_url()}/@@caching-controlpanel")  # noqa\n@@ -198,11 +195,9 @@ def test_auto_purge_content_types(self):\n         self.cachePurgingSettings.enabled = False\n         self.cachePurgingSettings.cachingProxies = ()\n         self.ploneCacheSettings.purgedContentTypes = ()\n-\n-        editURL = "{}/edit?_authenticator={}".format(\n-            self.portal["d1"].absolute_url(),\n-            getToken(TEST_USER_NAME),\n-        )\n+        url = self.portal["d1"].absolute_url()\n+        token = getToken(TEST_USER_NAME)\n+        editURL = f"{url}/edit?_authenticator={token}"\n \n         import transaction\n \n@@ -212,10 +207,7 @@ def test_auto_purge_content_types(self):\n         browser.handleErrors = False\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n \n         browser.open(editURL)\ndiff --git a/plone/app/caching/tests/test_operation_default.py b/plone/app/caching/tests/test_operation_default.py\nindex 5783983..0b75a0b 100644\n--- a/plone/app/caching/tests/test_operation_default.py\n+++ b/plone/app/caching/tests/test_operation_default.py\n@@ -60,13 +60,10 @@ def test_last_modified_no_etags(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(\n-            "{}/++add++Document".format(self.portal["f1"].absolute_url()),\n+            f"{self.portal[\'f1\'].absolute_url()}/++add++Document",\n         )\n         browser.getControl(\n             name="form.widgets.IDublinCore.title"\n@@ -79,11 +76,9 @@ def test_last_modified_no_etags(self):\n         import transaction\n \n         transaction.commit()\n-        browser.open(\n-            "{}/dummy-content/edit?_authenticator={}".format(\n-                self.portal["f1"].absolute_url(), getToken(TEST_USER_NAME)\n-            )\n-        )\n+        url = self.portal["f1"].absolute_url()\n+        token = getToken(TEST_USER_NAME)\n+        browser.open(f"{url}/dummy-content/edit?_authenticator={token}")\n         browser.getControl(\n             name="form.widgets.IDublinCore.title"\n         ).value = "dummy content"\ndiff --git a/plone/app/caching/tests/test_operation_parameters.py b/plone/app/caching/tests/test_operation_parameters.py\nindex 24afb30..3b989f0 100644\n--- a/plone/app/caching/tests/test_operation_parameters.py\n+++ b/plone/app/caching/tests/test_operation_parameters.py\n@@ -108,10 +108,7 @@ def test_anon_only(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal["f1"]["d1"].absolute_url())\n         self.assertEqual("plone.content.itemView", browser.headers["X-Cache-Rule"])\n@@ -152,10 +149,7 @@ def test_anon_only(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal["f1"]["d1"].absolute_url())\n         self.assertEqual("plone.content.itemView", browser.headers["X-Cache-Rule"])\ndiff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py\nindex 254dcc8..b2ff4a6 100644\n--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py\n@@ -118,10 +118,7 @@ def test_composite_viewsxx(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal["f1"].absolute_url())\n         self.assertEqual("plone.content.folderView", browser.headers["X-Cache-Rule"])\n@@ -133,8 +130,7 @@ def test_composite_viewsxx(self):\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n         self.assertEqual(\n-            \'"|test_user_1_|%d|en|%s|0|0|"\'\n-            % (catalog.getCounter(), skins_tool.default_skin),\n+            f\'"|test_user_1_|{catalog.getCounter()}|en|{skins_tool.default_skin}|0|0|"\',\n             normalize_etag(browser.headers["ETag"]),\n         )\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n@@ -151,8 +147,7 @@ def test_composite_viewsxx(self):\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n         self.assertEqual(\n-            \'"|test_user_1_|%d|en|%s|0|1|"\'\n-            % (catalog.getCounter(), skins_tool.default_skin),\n+            f\'"|test_user_1_|{catalog.getCounter()}|en|{skins_tool.default_skin}|0|1|"\',\n             normalize_etag(browser.headers["ETag"]),\n         )\n \n@@ -161,10 +156,7 @@ def test_composite_viewsxx(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal["f1"]["d1"].absolute_url())\n         self.assertIn(testText, browser.contents)\n@@ -177,8 +169,7 @@ def test_composite_viewsxx(self):\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n         self.assertEqual(\n-            \'"|test_user_1_|%d|en|%s|0|"\'\n-            % (catalog.getCounter(), skins_tool.default_skin),\n+            f\'"|test_user_1_|{catalog.getCounter()}|en|{skins_tool.default_skin}|0|"\',\n             normalize_etag(browser.headers["ETag"]),\n         )\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n@@ -187,10 +178,7 @@ def test_composite_viewsxx(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal["f1"]["d1"].absolute_url())\n         self.assertEqual("plone.content.itemView", browser.headers["X-Cache-Rule"])\n@@ -207,10 +195,7 @@ def test_composite_viewsxx(self):\n         browser.raiseHttpErrors = False  # we really do want to see the 304\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.addHeader("If-None-Match", etag)\n         browser.open(self.portal["f1"]["d1"].absolute_url())\n@@ -232,7 +217,7 @@ def test_composite_viewsxx(self):\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n         self.assertEqual(\n-            \'"||%d|en|%s|0|0|"\' % (catalog.getCounter(), skins_tool.default_skin),\n+            f\'"||{catalog.getCounter()}|en|{skins_tool.default_skin}|0|0|"\',\n             normalize_etag(browser.headers["ETag"]),\n         )\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n@@ -251,7 +236,7 @@ def test_composite_viewsxx(self):\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n         self.assertEqual(\n-            \'"||%d|en|%s|0|"\' % (catalog.getCounter(), skins_tool.default_skin),\n+            f\'"||{catalog.getCounter()}|en|{skins_tool.default_skin}|0|"\',\n             normalize_etag(browser.headers["ETag"]),\n         )\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n@@ -274,7 +259,7 @@ def test_composite_viewsxx(self):\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n         self.assertEqual(\n-            \'"||%d|en|%s|0|"\' % (catalog.getCounter(), skins_tool.default_skin),\n+            f\'"||{catalog.getCounter()}|en|{skins_tool.default_skin}|0|"\',\n             normalize_etag(browser.headers["ETag"]),\n         )\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n@@ -348,10 +333,7 @@ def test_content_feeds(self):\n             "max-age=0, s-maxage=86400, must-revalidate",\n             browser.headers["Cache-Control"],\n         )\n-        tag = \'"||{}|en|{}"\'.format(\n-            catalog.getCounter(),\n-            skins_tool.default_skin,\n-        )\n+        tag = f\'"||{catalog.getCounter()}|en|{skins_tool.default_skin}"\'\n         self.assertEqual(tag, browser.headers["ETag"])\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -373,10 +355,7 @@ def test_content_feeds(self):\n             "max-age=0, s-maxage=86400, must-revalidate",\n             browser.headers["Cache-Control"],\n         )\n-        tag = \'"||{}|en|{}"\'.format(\n-            catalog.getCounter(),\n-            skins_tool.default_skin,\n-        )\n+        tag = f\'"||{catalog.getCounter()}|en|{skins_tool.default_skin}"\'\n         self.assertEqual(tag, browser.headers["ETag"])\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -399,10 +378,7 @@ def test_content_feeds(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal.absolute_url() + "/RSS")\n         self.assertEqual("plone.content.feed", browser.headers["X-Cache-Rule"])\n@@ -413,10 +389,7 @@ def test_content_feeds(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = \'"|test_user_1_|{}|en|{}"\'.format(\n-            catalog.getCounter(),\n-            skins_tool.default_skin,\n-        )\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{skins_tool.default_skin}"\'\n         self.assertEqual(tag, browser.headers["ETag"])\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -424,10 +397,7 @@ def test_content_feeds(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal.absolute_url() + "/RSS")\n         self.assertEqual("plone.content.feed", browser.headers["X-Cache-Rule"])\n@@ -462,10 +432,7 @@ def test_content_files(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                SITE_OWNER_NAME,\n-                SITE_OWNER_PASSWORD,\n-            ),\n+            f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}",\n         )\n         browser.open(self.portal["f1"]["i1"].absolute_url())\n         self.assertEqual("plone.content.file", browser.headers["X-Cache-Rule"])\n@@ -487,10 +454,7 @@ def test_content_files(self):\n         browser.handleErrors = False\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                SITE_OWNER_NAME,\n-                SITE_OWNER_PASSWORD,\n-            ),\n+            f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}",\n         )\n         browser.open(self.portal["f1"]["i1"].absolute_url() + "/@@images/image/preview")\n         self.assertEqual("plone.content.file", browser.headers["X-Cache-Rule"])\n@@ -676,15 +640,15 @@ def setUp(self):\n         setRoles(self.portal, TEST_USER_ID, ("Manager",))\n \n         self.portal.invokeFactory("Folder", "f1")\n-        self.portal["f1"].title = u"Folder one"\n+        self.portal["f1"].title = "Folder one"\n         self.portal.portal_workflow.doActionFor(self.portal["f1"], "publish")\n \n         self.portal["f1"].invokeFactory("Folder", "f2")\n-        self.portal["f1"]["f2"].title = u"Folder one sub one"\n+        self.portal["f1"]["f2"].title = "Folder one sub one"\n         self.portal.portal_workflow.doActionFor(self.portal["f1"]["f2"], "publish")\n \n         self.portal.invokeFactory("Collection", "c")\n-        self.portal["c"].title = u"A Collection"\n+        self.portal["c"].title = "A Collection"\n         self.portal.portal_workflow.doActionFor(self.portal["c"], "publish")\n \n         transaction.commit()\ndiff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py\nindex c59e14e..0032d55 100644\n--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py\n@@ -102,10 +102,7 @@ def test_composite_views(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal["f1"].absolute_url())\n         self.assertEqual("plone.content.folderView", browser.headers["X-Cache-Rule"])\n@@ -116,10 +113,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = \'"|test_user_1_|{0}|en|{1}|0|0|"\'.format(\n-            catalog.getCounter(),\n-            default_skin,\n-        )\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|0|"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -134,10 +128,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = \'"|test_user_1_|{0}|en|{1}|0|1|"\'.format(\n-            catalog.getCounter(),\n-            default_skin,\n-        )\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|1|"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n \n         # Request the authenticated page\n@@ -145,10 +136,7 @@ def test_composite_views(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal["f1"]["d1"].absolute_url())\n         self.assertIn(testText, browser.contents)\n@@ -160,10 +148,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = \'"|test_user_1_|{0}|en|{1}|0|"\'.format(\n-            catalog.getCounter(),\n-            default_skin,\n-        )\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -171,10 +156,7 @@ def test_composite_views(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal["f1"]["d1"].absolute_url())\n         self.assertEqual("plone.content.itemView", browser.headers["X-Cache-Rule"])\n@@ -191,10 +173,7 @@ def test_composite_views(self):\n         browser.raiseHttpErrors = False  # we really do want to see the 304\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.addHeader("If-None-Match", etag)\n         browser.open(self.portal["f1"]["d1"].absolute_url())\n@@ -214,7 +193,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = \'"||{0}|en|{1}|0|0|"\'.format(catalog.getCounter(), default_skin)\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|0|"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -231,7 +210,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = \'"||{0}|en|{1}|0|"\'.format(catalog.getCounter(), default_skin)\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -252,7 +231,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = \'"||{0}|en|{1}|0|"\'.format(catalog.getCounter(), default_skin)\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -364,10 +343,7 @@ def test_content_feeds(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal.absolute_url() + "/RSS")\n         self.assertEqual("plone.content.feed", browser.headers["X-Cache-Rule"])\n@@ -388,10 +364,7 @@ def test_content_feeds(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal.absolute_url() + "/RSS")\n         self.assertEqual("plone.content.feed", browser.headers["X-Cache-Rule"])\ndiff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py\nindex d5900ee..3b433a1 100644\n--- a/plone/app/caching/tests/test_purge.py\n+++ b/plone/app/caching/tests/test_purge.py\n@@ -384,7 +384,6 @@ def test_scale_purge_paths_image(self):\n         paths = [x for x in purge.getRelativePaths()]\n         [self.assertIn(j, paths) for j in scalepaths]\n \n-\n     def test_scale_purge_paths_page(self):\n         prefix = "/".join(self.page.getPhysicalPath())\n         purge = ScalesPurgePaths(self.page)\n@@ -396,7 +395,6 @@ def test_scale_purge_paths_page(self):\n         paths = [x for x in purge.getRelativePaths()]\n         [self.assertIn(j, paths) for j in scalepaths]\n \n-\n     def test_scale_purge_paths_unicode(self):\n         purge = ScalesPurgePaths(self.file)\n         expected = [\ndiff --git a/plone/app/caching/tests/test_utils.py b/plone/app/caching/tests/test_utils.py\nindex d0637c5..0b36c3d 100644\n--- a/plone/app/caching/tests/test_utils.py\n+++ b/plone/app/caching/tests/test_utils.py\n@@ -21,7 +21,7 @@\n \n \n TEST_TIMEZONE = "Europe/Vienna"\n-TEST_IMAGE = pkg_resources.resource_filename(u"plone.app.caching.tests", u"test.gif")\n+TEST_IMAGE = pkg_resources.resource_filename("plone.app.caching.tests", "test.gif")\n \n \n def stable_now():\n@@ -39,7 +39,8 @@ def normalize_etag(value):\n     last = split_value.pop()\n     if str(date.today().year) in last:\n         # yes, this is time based, remove it\n-        return "|".join(split_value)\n+        value = "|".join(split_value)\n+        return f\'{value}|"\'\n     # return original\n     return value\n \n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2022-04-04T16:36:18-03:00
Author: Érico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/5a87811c649f57319993291146fccc720451e980

Fix test_formatDateTime_naive when run in a timezone with dst enabled for 2010-11-24

Files changed:
M plone/app/caching/tests/__init__.py
M plone/app/caching/tests/test_operation_utils.py

b'diff --git a/plone/app/caching/tests/__init__.py b/plone/app/caching/tests/__init__.py\nindex e69de29..838acf8 100644\n--- a/plone/app/caching/tests/__init__.py\n+++ b/plone/app/caching/tests/__init__.py\n@@ -0,0 +1,29 @@\n+import os\n+import time\n+\n+\n+class TZEnvContext:\n+    def __init__(self, tzval):\n+        self.tzval = tzval\n+        self._old_tz = None\n+\n+    def get_current_tz(self):\n+        return os.environ.get("TZ", None)\n+\n+    def set_current_tz(self, tzval):\n+        if tzval is None and "TZ" in os.environ:\n+            del os.environ["TZ"]\n+        else:\n+            os.environ["TZ"] = tzval\n+\n+        time.tzset()\n+\n+    def __enter__(self):\n+        self._old_tz = self.get_current_tz()\n+        self.set_current_tz(self.tzval)\n+\n+    def __exit__(self, type, value, traceback):\n+        if self._old_tz is not None:\n+            self.set_current_tz(self._old_tz)\n+\n+        self._old_tz = None\ndiff --git a/plone/app/caching/tests/test_operation_utils.py b/plone/app/caching/tests/test_operation_utils.py\nindex 8d72a1f..1f5dffb 100644\n--- a/plone/app/caching/tests/test_operation_utils.py\n+++ b/plone/app/caching/tests/test_operation_utils.py\n@@ -1,5 +1,6 @@\n from io import StringIO\n from OFS.SimpleItem import SimpleItem\n+from plone.app.caching.tests import TZEnvContext\n from plone.memoize.interfaces import ICacheChooser\n from plone.testing.zca import UNIT_TESTING\n from Products.CMFCore.interfaces import IContentish\n@@ -911,19 +912,22 @@ def test_formatDateTime_local(self):\n     def test_formatDateTime_naive(self):\n         from plone.app.caching.operations.utils import formatDateTime\n \n-        dt = datetime.datetime(2010, 11, 24, 3, 4, 5, 6)\n-        inGMT = formatDateTime(dt)\n-\n-        # Who knows what your local timezone is :-)\n-        self.assertTrue(inGMT.endswith(" GMT"))\n-        self.assertIn("Nov 2010", inGMT)\n-\n-        # Can\'t compare offset aware and naive\n-        p = dateutil.parser.parse(inGMT).astimezone(dateutil.tz.tzlocal())\n-        self.assertEqual(\n-            (2010, 11, 24, 3, 4, 5),\n-            (p.year, p.month, p.day, p.hour, p.minute, p.second),\n-        )\n+        # We force CET, otherwise this test fails in regions with\n+        # dst enabled in November, 2010\n+        with TZEnvContext("CET"):\n+            dt = datetime.datetime(2010, 11, 24, 3, 4, 5, 6)\n+            inGMT = formatDateTime(dt)\n+\n+            # Who knows what your local timezone is :-)\n+            self.assertTrue(inGMT.endswith(" GMT"))\n+            self.assertIn("Nov 2010", inGMT)\n+\n+            # Can\'t compare offset aware and naive\n+            p = dateutil.parser.parse(inGMT).astimezone(dateutil.tz.tzlocal())\n+            self.assertEqual(\n+                (2010, 11, 24, 3, 4, 5),\n+                (p.year, p.month, p.day, p.hour, p.minute, p.second),\n+            )\n \n     # parseDateTime()\n \n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2022-04-04T16:40:14-03:00
Author: Érico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/6907973fb6bb087fac2d5a22fe321a81591d6b34

Apply zpretty to zcml and xml files

Files changed:
M .github/workflows/zpretty.yml
M plone/app/caching/browser/configure.zcml
M plone/app/caching/caching.zcml
M plone/app/caching/configure.zcml
M plone/app/caching/operations/configure.zcml
M plone/app/caching/profiles.zcml
M plone/app/caching/profiles/default/controlpanel.xml
M plone/app/caching/profiles/default/metadata.xml
M plone/app/caching/profiles/default/registry.xml
M plone/app/caching/profiles/default/registry/generic.xml
M plone/app/caching/profiles/default/registry/moderate.xml
M plone/app/caching/profiles/default/registry/strong.xml
M plone/app/caching/profiles/default/registry/terse.xml
M plone/app/caching/profiles/default/registry/weak.xml
M plone/app/caching/profiles/v2/registry/terse.xml
M plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml
M plone/app/caching/profiles/with-caching-proxy/registry.xml
M plone/app/caching/profiles/without-caching-proxy/registry.xml

b'diff --git a/.github/workflows/zpretty.yml b/.github/workflows/zpretty.yml\nindex 5051f1c..7370f55 100644\n--- a/.github/workflows/zpretty.yml\n+++ b/.github/workflows/zpretty.yml\n@@ -30,11 +30,8 @@ jobs:\n       - name: install zpretty\n         run: pip install zpretty\n \n-      # run zpretty\n-      - name: run zpretty\n-        run: find plone -name \'*.zcml\' | xargs zpretty -i\n+      - name: run zpretty for zcml\n+        run: find plone -name \'*.zcml\' | xargs zpretty -z --check\n \n-      # XXX: this doesn\'t work on gh actions (https://github.com/plone/plone.restapi/pull/1119/checks?check_run_id=2686474411)\n-      # run git diff\n-      - name: run git diff\n-        run: git diff --exit-code\n+      - name: run zpretty for xml\n+        run: find plone -name \'*.xml\' | xargs zpretty -x --check\ndiff --git a/plone/app/caching/browser/configure.zcml b/plone/app/caching/browser/configure.zcml\nindex 88c36ad..c9cb415 100644\n--- a/plone/app/caching/browser/configure.zcml\n+++ b/plone/app/caching/browser/configure.zcml\n@@ -1,43 +1,44 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-    <browser:page\n-        name="caching-controlpanel"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n-        class=".controlpanel.ControlPanel"\n-        template="controlpanel.pt"\n-        permission="cmf.ManagePortal"\n-        />\n+  <browser:page\n+      name="caching-controlpanel"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      class=".controlpanel.ControlPanel"\n+      template="controlpanel.pt"\n+      permission="cmf.ManagePortal"\n+      />\n \n-    <browser:page\n-        name="caching-controlpanel-import"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n-        class=".controlpanel.Import"\n-        template="import.pt"\n-        permission="cmf.ManagePortal"\n-        />\n+  <browser:page\n+      name="caching-controlpanel-import"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      class=".controlpanel.Import"\n+      template="import.pt"\n+      permission="cmf.ManagePortal"\n+      />\n \n-    <browser:page\n-        name="caching-controlpanel-purge"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n-        class=".controlpanel.Purge"\n-        template="purge.pt"\n-        permission="cmf.ManagePortal"\n-        />\n+  <browser:page\n+      name="caching-controlpanel-purge"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      class=".controlpanel.Purge"\n+      template="purge.pt"\n+      permission="cmf.ManagePortal"\n+      />\n \n-    <browser:page\n-        name="caching-controlpanel-ramcache"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n-        class=".controlpanel.RAMCache"\n-        template="ramcache.pt"\n-        permission="cmf.ManagePortal"\n-        />\n+  <browser:page\n+      name="caching-controlpanel-ramcache"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      class=".controlpanel.RAMCache"\n+      template="ramcache.pt"\n+      permission="cmf.ManagePortal"\n+      />\n \n-    <browser:resource\n-        name="plone.app.caching.gif"\n-        image="plone.app.caching.gif"\n-        />\n+  <browser:resource\n+      name="plone.app.caching.gif"\n+      image="plone.app.caching.gif"\n+      />\n \n </configure>\ndiff --git a/plone/app/caching/caching.zcml b/plone/app/caching/caching.zcml\nindex 97c9546..e081d57 100644\n--- a/plone/app/caching/caching.zcml\n+++ b/plone/app/caching/caching.zcml\n@@ -1,139 +1,197 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:cache="http://namespaces.zope.org/cache"\n+    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-    <!-- Out-of-the-box cache profiles\n+  <!-- Out-of-the-box cache profiles\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n \n-    <genericsetup:registerProfile\n-        name="with-caching-proxy"\n-        title="With caching proxy"\n-        description="Settings useful for setups with a caching proxy such as Squid or Varnish"\n-        directory="profiles/with-caching-proxy"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        for="plone.app.caching.interfaces.ICacheProfiles"\n-        />\n+  <genericsetup:registerProfile\n+      name="with-caching-proxy"\n+      title="With caching proxy"\n+      description="Settings useful for setups with a caching proxy such as Squid or Varnish"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      for="plone.app.caching.interfaces.ICacheProfiles"\n+      directory="profiles/with-caching-proxy"\n+      />\n+\n+  <genericsetup:registerProfile\n+      name="without-caching-proxy"\n+      title="Without caching proxy"\n+      description="Settings useful for setups without a caching proxy such as Squid or Varnish"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      for="plone.app.caching.interfaces.ICacheProfiles"\n+      directory="profiles/without-caching-proxy"\n+      />\n+\n+  <genericsetup:registerProfile\n+      name="with-caching-proxy-splitviews"\n+      title="With caching proxy (and split-view caching)"\n+      description="An example profile for a caching proxy setup with split-view caching enabled."\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      for="plone.app.caching.interfaces.ICacheProfiles"\n+      directory="profiles/with-caching-proxy-splitviews"\n+      />\n+\n+  <!-- Default caching ruleset types\n+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n \n-    <genericsetup:registerProfile\n-        name="without-caching-proxy"\n-        title="Without caching proxy"\n-        description="Settings useful for setups without a caching proxy such as Squid or Varnish"\n-        directory="profiles/without-caching-proxy"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        for="plone.app.caching.interfaces.ICacheProfiles"\n-        />\n+  <cache:rulesetType\n+      name="plone.resource"\n+      title="File and image resources"\n+      description="Includes images and files created or customised through the ZMI, those exposed in the portal_skins tool, and images registered in resource directories on the filesystem."\n+      />\n+\n+  <cache:rulesetType\n+      name="plone.stableResource"\n+      title="Stable file and image resources"\n+      description="These are resources which can be cached \'forever\'. Normally this means that if the object does change, its URL changes too."\n+      />\n+\n+  <cache:rulesetType\n+      name="plone.content.file"\n+      title="Content files and images"\n+      description="Includes files and images in content space."\n+      />\n+\n+  <cache:rulesetType\n+      name="plone.content.itemView"\n+      title="Content item view"\n+      description="A public-facing view for a content item that is not a folder or container for other items"\n+      />\n+\n+  <cache:rulesetType\n+      name="plone.content.folderView"\n+      title="Content folder view"\n+      description="A public-facing view for a content item that is a folder or container for other items"\n+      />\n+\n+  <cache:rulesetType\n+      name="plone.content.feed"\n+      title="Content feed"\n+      description="A dynamic feed, e.g. using RSS or ATOM"\n+      />\n+\n+  <cache:rulesetType\n+      name="plone.content.dynamic"\n+      title="Dynamic views, like collections, searches, ..."\n+      description="A public-facing view for a contents that is collected dynamically from the whole site."\n+      />\n+\n+  <!-- Default caching ruleset assignments\n+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n \n-    <genericsetup:registerProfile\n-        name="with-caching-proxy-splitviews"\n-        title="With caching proxy (and split-view caching)"\n-        description="An example profile for a caching proxy setup with split-view caching enabled."\n-        directory="profiles/with-caching-proxy-splitviews"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        for="plone.app.caching.interfaces.ICacheProfiles"\n+  <!-- CMF filesystem (skin layer) files and images -->\n+  <cache:ruleset\n+      for="Products.CMFCore.FSFile.FSFile"\n+      ruleset="plone.resource"\n+      />\n+  <cache:ruleset\n+      for="Products.CMFCore.FSImage.FSImage"\n+      ruleset="plone.resource"\n+      />\n+\n+  <!-- OFS (in-ZODB) files, images -->\n+  <cache:ruleset\n+      for="OFS.Image.File"\n+      ruleset="plone.resource"\n+      />\n+\n+  <!-- Automatically purge these always -->\n+  <class class="OFS.Image.File">\n+    <implements interface="z3c.caching.interfaces.IPurgeable" />\n+  </class>\n+\n+\n+  <!-- Zope resources (including those in resource directories) -->\n+  <cache:ruleset\n+      for="zope.browserresource.interfaces.IResource"\n+      ruleset="plone.resource"\n+      />\n+\n+  <!-- These rely on the ContentItemLookup delegation -->\n+  <cache:ruleset\n+      for="plone.dexterity.interfaces.IDexterityItem"\n+      ruleset="plone.content.itemView"\n+      />\n+  <cache:ruleset\n+      for="plone.dexterity.interfaces.IDexterityContainer"\n+      ruleset="plone.content.folderView"\n+      />\n+\n+\n+  <!-- These rely on the ContentItemLookup delegation -->\n+  <cache:ruleset\n+      for="plone.namedfile.browser.Download"\n+      ruleset="plone.content.file"\n+      />\n+  <cache:ruleset\n+      for="plone.namedfile.scaling.ImageScale"\n+      ruleset="plone.content.file"\n+      />\n+\n+  <!-- plone.restapi content -->\n+  <configure zcml:condition="installed plone.restapi">\n+\n+    <include package="plone.restapi" />\n+\n+    <cache:ruleset\n+        for="plone.restapi.services.discussion.conversation.CommentsGet"\n+        ruleset="plone.content.itemView"\n         />\n \n-    <!-- Default caching ruleset types\n-         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n-\n-    <cache:rulesetType\n-        name="plone.resource"\n-        title="File and image resources"\n-        description="Includes images and files created or customised through the ZMI, those exposed in the portal_skins tool, and images registered in resource directories on the filesystem."\n+    <cache:ruleset\n+        for="plone.restapi.services.actions.get.ActionsGet"\n+        ruleset="plone.content.dynamic"\n         />\n-\n-    <cache:rulesetType\n-        name="plone.stableResource"\n-        title="Stable file and image resources"\n-        description="These are resources which can be cached \'forever\'. Normally this means that if the object does change, its URL changes too."\n+    <cache:ruleset\n+        for="plone.restapi.services.breadcrumbs.get.BreadcrumbsGet"\n+        ruleset="plone.content.dynamic"\n         />\n-\n-    <cache:rulesetType\n-        name="plone.content.file"\n-        title="Content files and images"\n-        description="Includes files and images in content space."\n+    <cache:ruleset\n+        for="plone.restapi.services.content.get.ContentGet"\n+        ruleset="plone.content.dynamic"\n         />\n-\n-    <cache:rulesetType\n-        name="plone.content.itemView"\n-        title="Content item view"\n-        description="A public-facing view for a content item that is not a folder or container for other items"\n+    <cache:ruleset\n+        for="plone.restapi.services.multilingual.pam.TranslationInfo"\n+        ruleset="plone.content.dynamic"\n         />\n-\n-    <cache:rulesetType\n-        name="plone.content.folderView"\n-        title="Content folder view"\n-        description="A public-facing view for a content item that is a folder or container for other items"\n+    <cache:ruleset\n+        for="plone.restapi.services.navigation.get.NavigationGet"\n+        ruleset="plone.content.dynamic"\n         />\n-\n-    <cache:rulesetType\n-        name="plone.content.feed"\n-        title="Content feed"\n-        description="A dynamic feed, e.g. using RSS or ATOM"\n+    <cache:ruleset\n+        for="plone.restapi.services.querystring.get.QuerystringGet"\n+        ruleset="plone.content.dynamic"\n         />\n-\n-    <cache:rulesetType\n-        name="plone.content.dynamic"\n-        title="Dynamic views, like collections, searches, ..."\n-        description="A public-facing view for a contents that is collected dynamically from the whole site."\n+    <cache:ruleset\n+        for="plone.restapi.services.search.get.SearchGet"\n+        ruleset="plone.content.dynamic"\n         />\n \n-    <!-- Default caching ruleset assignments\n-         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n-\n-    <!-- CMF filesystem (skin layer) files and images -->\n-    <cache:ruleset ruleset="plone.resource" for="Products.CMFCore.FSFile.FSFile" />\n-    <cache:ruleset ruleset="plone.resource" for="Products.CMFCore.FSImage.FSImage" />\n-\n-    <!-- OFS (in-ZODB) files, images -->\n-    <cache:ruleset ruleset="plone.resource" for="OFS.Image.File" />\n-\n-    <!-- Automatically purge these always -->\n-    <class class="OFS.Image.File">\n-        <implements interface="z3c.caching.interfaces.IPurgeable" />\n-    </class>\n-\n-\n-    <!-- Zope resources (including those in resource directories) -->\n-    <cache:ruleset ruleset="plone.resource" for="zope.browserresource.interfaces.IResource" />\n-\n-    <!-- These rely on the ContentItemLookup delegation -->\n-    <cache:ruleset ruleset="plone.content.itemView"   for="plone.dexterity.interfaces.IDexterityItem" />\n-    <cache:ruleset ruleset="plone.content.folderView" for="plone.dexterity.interfaces.IDexterityContainer" />\n-\n-\n-    <!-- These rely on the ContentItemLookup delegation -->\n-    <cache:ruleset ruleset="plone.content.file"   for="plone.namedfile.browser.Download" />\n-    <cache:ruleset ruleset="plone.content.file" for="plone.namedfile.scaling.ImageScale" />\n-\n-    <!-- plone.restapi content -->\n-    <configure zcml:condition="installed plone.restapi">\n-\n-        <include package="plone.restapi" />\n-\n-        <cache:ruleset ruleset="plone.content.itemView" for="plone.restapi.services.discussion.conversation.CommentsGet" />\n-\n-        <cache:ruleset ruleset="plone.content.dynamic" for="plone.restapi.services.actions.get.ActionsGet" />\n-        <cache:ruleset ruleset="plone.content.dynamic" for="plone.restapi.services.breadcrumbs.get.BreadcrumbsGet" />\n-        <cache:ruleset ruleset="plone.content.dynamic" for="plone.restapi.services.content.get.ContentGet" />\n-        <cache:ruleset ruleset="plone.content.dynamic" for="plone.restapi.services.multilingual.pam.TranslationInfo" />\n-        <cache:ruleset ruleset="plone.content.dynamic" for="plone.restapi.services.navigation.get.NavigationGet" />\n-        <cache:ruleset ruleset="plone.content.dynamic" for="plone.restapi.services.querystring.get.QuerystringGet" />\n-        <cache:ruleset ruleset="plone.content.dynamic" for="plone.restapi.services.search.get.SearchGet" />\n-\n-    </configure>\n+  </configure>\n \n-    <!-- Paths to purge -->\n+  <!-- Paths to purge -->\n \n-    <!-- Standard CMF content -->\n-    <adapter factory=".purge.ContentPurgePaths" name="plone.content" />\n+  <!-- Standard CMF content -->\n+  <adapter\n+      factory=".purge.ContentPurgePaths"\n+      name="plone.content"\n+      />\n \n-    <!-- Discussion items -->\n-    <adapter factory=".purge.DiscussionItemPurgePaths" name="plone.discussion" />\n+  <!-- Discussion items -->\n+  <adapter\n+      factory=".purge.DiscussionItemPurgePaths"\n+      name="plone.discussion"\n+      />\n \n-    <!-- Image scales & file download paths -->\n-    <adapter factory=".purge.ScalesPurgePaths" name="plone.files" />\n+  <!-- Image scales & file download paths -->\n+  <adapter\n+      factory=".purge.ScalesPurgePaths"\n+      name="plone.files"\n+      />\n \n </configure>\ndiff --git a/plone/app/caching/configure.zcml b/plone/app/caching/configure.zcml\nindex 9f9b1fc..c2e13fe 100644\n--- a/plone/app/caching/configure.zcml\n+++ b/plone/app/caching/configure.zcml\n@@ -1,49 +1,55 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n-    i18n_domain="plone">\n-\n-    <include package="z3c.zcmlhook" file="meta.zcml" />\n-\n-    <include package="plone.caching" />\n-    <include package="plone.cachepurging" />\n-    <include package="plone.app.registry" />\n-    <include package="plone.memoize" />\n-    <include package="plone.protect" />\n-\n-    <include package=".browser" />\n-    <include package=".operations" />\n-    <include file="profiles.zcml" />\n-\n-    <zcml:customAction\n-        handler=".setuphandlers.enableExplicitMode"\n-        order="1000000"\n-        />\n-\n-    <!-- Default caching configuration -->\n-    <include file="caching.zcml" />\n-\n-    <!-- Lookup for content item views and page template resources -->\n-    <adapter\n-        for="zope.publisher.interfaces.browser.IBrowserView *"\n-        factory=".lookup.ContentItemLookup"\n-        />\n-    <adapter\n-        for="zope.pagetemplate.interfaces.IPageTemplate *"\n-        factory=".lookup.ContentItemLookup"\n-        />\n-\n-    <!-- Purging -->\n-    <subscriber handler=".purge.purgeOnModified" />\n-    <subscriber handler=".purge.purgeOnMovedOrRemoved" />\n-\n-    <!-- ILastModified adapters -->\n-    <adapter factory=".lastmodified.PageTemplateDelegateLastModified" />\n-    <adapter factory=".lastmodified.FSPageTemplateDelegateLastModified" />\n-    <adapter factory=".lastmodified.OFSFileLastModified" />\n-    <adapter factory=".lastmodified.FSObjectLastModified" />\n-    <adapter factory=".lastmodified.CatalogableDublinCoreLastModified" />\n-    <adapter factory=".lastmodified.DCTimesLastModified" />\n-    <adapter factory=".lastmodified.ResourceLastModified" />\n+    i18n_domain="plone"\n+    >\n+\n+  <include\n+      package="z3c.zcmlhook"\n+      file="meta.zcml"\n+      />\n+\n+  <include package="plone.caching" />\n+  <include package="plone.cachepurging" />\n+  <include package="plone.app.registry" />\n+  <include package="plone.memoize" />\n+  <include package="plone.protect" />\n+\n+  <include package=".browser" />\n+  <include package=".operations" />\n+  <include file="profiles.zcml" />\n+\n+  <zcml:customAction\n+      handler=".setuphandlers.enableExplicitMode"\n+      order="1000000"\n+      />\n+\n+  <!-- Default caching configuration -->\n+  <include file="caching.zcml" />\n+\n+  <!-- Lookup for content item views and page template resources -->\n+  <adapter\n+      factory=".lookup.ContentItemLookup"\n+      for="zope.publisher.interfaces.browser.IBrowserView\n+           *"\n+      />\n+  <adapter\n+      factory=".lookup.ContentItemLookup"\n+      for="zope.pagetemplate.interfaces.IPageTemplate\n+           *"\n+      />\n+\n+  <!-- Purging -->\n+  <subscriber handler=".purge.purgeOnModified" />\n+  <subscriber handler=".purge.purgeOnMovedOrRemoved" />\n+\n+  <!-- ILastModified adapters -->\n+  <adapter factory=".lastmodified.PageTemplateDelegateLastModified" />\n+  <adapter factory=".lastmodified.FSPageTemplateDelegateLastModified" />\n+  <adapter factory=".lastmodified.OFSFileLastModified" />\n+  <adapter factory=".lastmodified.FSObjectLastModified" />\n+  <adapter factory=".lastmodified.CatalogableDublinCoreLastModified" />\n+  <adapter factory=".lastmodified.DCTimesLastModified" />\n+  <adapter factory=".lastmodified.ResourceLastModified" />\n \n </configure>\ndiff --git a/plone/app/caching/operations/configure.zcml b/plone/app/caching/operations/configure.zcml\nindex a142fe3..f07de6f 100644\n--- a/plone/app/caching/operations/configure.zcml\n+++ b/plone/app/caching/operations/configure.zcml\n@@ -1,49 +1,119 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n-    i18n_domain="plone.app.caching">\n+    i18n_domain="plone.app.caching"\n+    >\n \n-    <include package="plone.caching" />\n-    <include package="plone.app.registry" />\n+  <include package="plone.caching" />\n+  <include package="plone.app.registry" />\n \n-    <!-- Caching operations\n+  <!-- Caching operations\n          ~~~~~~~~~~~~~~~~~~ -->\n \n-    <adapter   factory=".default.StrongCaching"         name="plone.app.caching.strongCaching" />\n-    <utility component=".default.StrongCaching"         name="plone.app.caching.strongCaching" />\n+  <adapter\n+      factory=".default.StrongCaching"\n+      name="plone.app.caching.strongCaching"\n+      />\n+  <utility\n+      name="plone.app.caching.strongCaching"\n+      component=".default.StrongCaching"\n+      />\n \n-    <adapter   factory=".default.ModerateCaching"       name="plone.app.caching.moderateCaching" />\n-    <utility component=".default.ModerateCaching"       name="plone.app.caching.moderateCaching" />\n+  <adapter\n+      factory=".default.ModerateCaching"\n+      name="plone.app.caching.moderateCaching"\n+      />\n+  <utility\n+      name="plone.app.caching.moderateCaching"\n+      component=".default.ModerateCaching"\n+      />\n \n-    <adapter   factory=".default.WeakCaching"           name="plone.app.caching.weakCaching" />\n-    <utility component=".default.WeakCaching"           name="plone.app.caching.weakCaching" />\n+  <adapter\n+      factory=".default.WeakCaching"\n+      name="plone.app.caching.weakCaching"\n+      />\n+  <utility\n+      name="plone.app.caching.weakCaching"\n+      component=".default.WeakCaching"\n+      />\n \n-    <adapter   factory=".default.TerseCaching"          name="plone.app.caching.terseCaching" />\n-    <utility component=".default.TerseCaching"          name="plone.app.caching.terseCaching" />\n+  <adapter\n+      factory=".default.TerseCaching"\n+      name="plone.app.caching.terseCaching"\n+      />\n+  <utility\n+      name="plone.app.caching.terseCaching"\n+      component=".default.TerseCaching"\n+      />\n \n-    <adapter   factory=".default.NoCaching"             name="plone.app.caching.noCaching" />\n-    <utility component=".default.NoCaching"             name="plone.app.caching.noCaching" />\n+  <adapter\n+      factory=".default.NoCaching"\n+      name="plone.app.caching.noCaching"\n+      />\n+  <utility\n+      name="plone.app.caching.noCaching"\n+      component=".default.NoCaching"\n+      />\n \n-    <!-- Uncomment to show the "Generic caching" in the UI (also see profiles/default/registry/generic.xml)\n+  <!-- Uncomment to show the "Generic caching" in the UI (also see profiles/default/registry/generic.xml)\n     <adapter   factory=".default.BaseCaching"           name="plone.app.caching.baseCaching" />\n     <utility component=".default.BaseCaching"           name="plone.app.caching.baseCaching" />\n     -->\n \n-    <!-- RAM cache storage: a transformation at the very end of the chain -->\n-    <adapter factory=".ramcache.Store"                  name="plone.app.caching.operations.ramcache" />\n-\n-    <!-- ETag components -->\n-    <adapter factory=".etags.UserID"                    name="userid" />\n-    <adapter factory=".etags.Roles"                     name="roles" />\n-    <adapter factory=".etags.Language"                  name="language" />\n-    <adapter factory=".etags.UserLanguage"              name="userLanguage" />\n-    <adapter factory=".etags.LastModified"              name="lastModified" />\n-    <adapter factory=".etags.CatalogCounter"            name="catalogCounter" />\n-    <adapter factory=".etags.ObjectLocked"              name="locked" />\n-    <adapter factory=".etags.Skin"                      name="skin" />\n-    <adapter factory=".etags.ResourceRegistries"        name="resourceRegistries" />\n-    <adapter factory=".etags.AnonymousOrRandom"         name="anonymousOrRandom" />\n-    <adapter factory=".etags.CopyCookie"                name="copy" />\n-    <adapter factory=".etags.Layout"                    name="layout" />\n+  <!-- RAM cache storage: a transformation at the very end of the chain -->\n+  <adapter\n+      factory=".ramcache.Store"\n+      name="plone.app.caching.operations.ramcache"\n+      />\n+\n+  <!-- ETag components -->\n+  <adapter\n+      factory=".etags.UserID"\n+      name="userid"\n+      />\n+  <adapter\n+      factory=".etags.Roles"\n+      name="roles"\n+      />\n+  <adapter\n+      factory=".etags.Language"\n+      name="language"\n+      />\n+  <adapter\n+      factory=".etags.UserLanguage"\n+      name="userLanguage"\n+      />\n+  <adapter\n+      factory=".etags.LastModified"\n+      name="lastModified"\n+      />\n+  <adapter\n+      factory=".etags.CatalogCounter"\n+      name="catalogCounter"\n+      />\n+  <adapter\n+      factory=".etags.ObjectLocked"\n+      name="locked"\n+      />\n+  <adapter\n+      factory=".etags.Skin"\n+      name="skin"\n+      />\n+  <adapter\n+      factory=".etags.ResourceRegistries"\n+      name="resourceRegistries"\n+      />\n+  <adapter\n+      factory=".etags.AnonymousOrRandom"\n+      name="anonymousOrRandom"\n+      />\n+  <adapter\n+      factory=".etags.CopyCookie"\n+      name="copy"\n+      />\n+  <adapter\n+      factory=".etags.Layout"\n+      name="layout"\n+      />\n \n </configure>\ndiff --git a/plone/app/caching/profiles.zcml b/plone/app/caching/profiles.zcml\nindex 6840eab..a8d1d3f 100644\n--- a/plone/app/caching/profiles.zcml\n+++ b/plone/app/caching/profiles.zcml\n@@ -1,49 +1,52 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-    <genericsetup:registerProfile\n-        name="default"\n-        title="HTTP caching support"\n-        directory="profiles/default"\n-        description="Installs plone.app.caching"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        />\n+  <genericsetup:registerProfile\n+      name="default"\n+      title="HTTP caching support"\n+      description="Installs plone.app.caching"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/default"\n+      />\n+\n+  <genericsetup:registerProfile\n+      name="v2"\n+      title="Upgrade plone.app.caching to v2 with terse caching"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"\n+      directory="profiles/default"\n+      />\n+\n+  <genericsetup:importStep\n+      name="plone.app.caching"\n+      title="Plone caching - additional installation steps"\n+      description="Imperative configuration for plone.app.caching"\n+      handler=".setuphandlers.importVarious"\n+      />\n \n-    <genericsetup:registerProfile\n-        name="v2"\n+  <genericsetup:upgradeSteps\n+      profile="plone.app.caching:default"\n+      source="1"\n+      destination="2"\n+      >\n+    <genericsetup:upgradeDepends\n         title="Upgrade plone.app.caching to v2 with terse caching"\n-        directory="profiles/default"\n-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n+        import_profile="plone.app.caching:v2"\n         />\n+  </genericsetup:upgradeSteps>\n \n-    <genericsetup:importStep\n-        name="plone.app.caching"\n-        title="Plone caching - additional installation steps"\n-        description="Imperative configuration for plone.app.caching"\n-        handler=".setuphandlers.importVarious"\n+  <genericsetup:upgradeSteps\n+      profile="plone.app.caching:default"\n+      source="2"\n+      destination="3"\n+      >\n+    <genericsetup:upgradeDepends\n+        title="Upgrade plone.app.caching icon"\n+        import_steps="controlpanel"\n         />\n-\n-    <genericsetup:upgradeSteps\n-        source="1"\n-        destination="2"\n-        profile="plone.app.caching:default">\n-        <genericsetup:upgradeDepends\n-            title="Upgrade plone.app.caching to v2 with terse caching"\n-            import_profile="plone.app.caching:v2"\n-            />\n-    </genericsetup:upgradeSteps>\n-\n-   <genericsetup:upgradeSteps\n-        source="2"\n-        destination="3"\n-        profile="plone.app.caching:default">\n-        <genericsetup:upgradeDepends\n-            title="Upgrade plone.app.caching icon"\n-            import_steps="controlpanel"\n-            />\n-    </genericsetup:upgradeSteps>\n+  </genericsetup:upgradeSteps>\n \n </configure>\ndiff --git a/plone/app/caching/profiles/default/controlpanel.xml b/plone/app/caching/profiles/default/controlpanel.xml\nindex 184245c..b7f67cf 100644\n--- a/plone/app/caching/profiles/default/controlpanel.xml\n+++ b/plone/app/caching/profiles/default/controlpanel.xml\n@@ -1,20 +1,20 @@\n <?xml version="1.0"?>\n-<object\n-    name="portal_controlpanel"\n-    xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-    i18n:domain="plone">\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        name="portal_controlpanel"\n+        i18n:domain="plone"\n+>\n \n-    <configlet\n-        title="Caching"\n-        action_id="plone.app.caching"\n-        appId="plone.app.caching"\n-        category="plone-advanced"\n-        condition_expr=""\n-        icon_expr="string:speedometer2"\n-        url_expr="string:${portal_url}/@@caching-controlpanel"\n-        visible="True"\n-        i18n:attributes="title">\n-            <permission>Manage portal</permission>\n- </configlet>\n+  <configlet action_id="plone.app.caching"\n+             appId="plone.app.caching"\n+             category="plone-advanced"\n+             condition_expr=""\n+             icon_expr="string:speedometer2"\n+             title="Caching"\n+             url_expr="string:${portal_url}/@@caching-controlpanel"\n+             visible="True"\n+             i18n:attributes="title"\n+  >\n+    <permission>Manage portal</permission>\n+  </configlet>\n \n </object>\ndiff --git a/plone/app/caching/profiles/default/metadata.xml b/plone/app/caching/profiles/default/metadata.xml\nindex 8260341..226b480 100644\n--- a/plone/app/caching/profiles/default/metadata.xml\n+++ b/plone/app/caching/profiles/default/metadata.xml\n@@ -1,6 +1,6 @@\n <metadata>\n-    <version>3</version>\n-    <dependencies>\n-        <dependency>profile-plone.app.registry:default</dependency>\n-    </dependencies>\n+  <version>3</version>\n+  <dependencies>\n+    <dependency>profile-plone.app.registry:default</dependency>\n+  </dependencies>\n </metadata>\ndiff --git a/plone/app/caching/profiles/default/registry.xml b/plone/app/caching/profiles/default/registry.xml\nindex 6dbbf1c..63957df 100644\n--- a/plone/app/caching/profiles/default/registry.xml\n+++ b/plone/app/caching/profiles/default/registry.xml\n@@ -1,52 +1,52 @@\n <registry>\n \n-    <!-- Basic cache settings from plone.caching -->\n-    <records interface="plone.caching.interfaces.ICacheSettings" />\n+  <!-- Basic cache settings from plone.caching -->\n+  <records interface="plone.caching.interfaces.ICacheSettings" />\n \n-    <!-- Purge settings -->\n-    <records interface="plone.cachepurging.interfaces.ICachePurgingSettings" />\n+  <!-- Purge settings -->\n+  <records interface="plone.cachepurging.interfaces.ICachePurgingSettings" />\n \n-    <!-- Plone-specific settings from this package -->\n-    <records interface="plone.app.caching.interfaces.IPloneCacheSettings" />\n+  <!-- Plone-specific settings from this package -->\n+  <records interface="plone.app.caching.interfaces.IPloneCacheSettings" />\n \n-    <!-- Default content type/template mappings\n+  <!-- Default content type/template mappings\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n \n \n-    <record name="plone.app.caching.interfaces.IPloneCacheSettings.templateRulesetMapping">\n-        <value purge="False">\n-          <element key="search_rss">plone.content.feed</element>\n-          <element key="RSS">plone.content.feed</element>\n-          <element key="atom.xml">plone.content.feed</element>\n-          <element key="rss.xml">plone.content.feed</element>\n-          <element key="itunes.xml">plone.content.feed</element>\n-          <element key="sitemap">plone.content.itemView</element>\n-          <element key="accessibility-info">plone.content.itemView</element>\n-          <element key="file_view">plone.content.itemView</element>\n-          <element key="image_view">plone.content.itemView</element>\n-          <element key="image_view_fullscreen">plone.content.itemView</element>\n-        </value>\n-    </record>\n-\n-    <record name="plone.app.caching.interfaces.IPloneCacheSettings.purgedContentTypes">\n-        <value purge="False">\n-          <element>File</element>\n-          <element>Image</element>\n-          <element>News Item</element>\n-        </value>\n-    </record>\n-\n-    <!-- Settings for default operations\n+  <record name="plone.app.caching.interfaces.IPloneCacheSettings.templateRulesetMapping">\n+    <value purge="False">\n+      <element key="search_rss">plone.content.feed</element>\n+      <element key="RSS">plone.content.feed</element>\n+      <element key="atom.xml">plone.content.feed</element>\n+      <element key="rss.xml">plone.content.feed</element>\n+      <element key="itunes.xml">plone.content.feed</element>\n+      <element key="sitemap">plone.content.itemView</element>\n+      <element key="accessibility-info">plone.content.itemView</element>\n+      <element key="file_view">plone.content.itemView</element>\n+      <element key="image_view">plone.content.itemView</element>\n+      <element key="image_view_fullscreen">plone.content.itemView</element>\n+    </value>\n+  </record>\n+\n+  <record name="plone.app.caching.interfaces.IPloneCacheSettings.purgedContentTypes">\n+    <value purge="False">\n+      <element>File</element>\n+      <element>Image</element>\n+      <element>News Item</element>\n+    </value>\n+  </record>\n+\n+  <!-- Settings for default operations\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n \n-    <!-- Chain -->\n-    <record name="plone.caching.operations.chain.operations">\n-        <field type="plone.registry.field.List">\n-            <title>Operations</title>\n-            <description>A list of operations to call, in order</description>\n-            <value_type type="plone.registry.field.DottedName" />\n-        </field>\n-        <value></value>\n-    </record>\n+  <!-- Chain -->\n+  <record name="plone.caching.operations.chain.operations">\n+    <field type="plone.registry.field.List">\n+      <title>Operations</title>\n+      <description>A list of operations to call, in order</description>\n+      <value_type type="plone.registry.field.DottedName" />\n+    </field>\n+    <value />\n+  </record>\n \n </registry>\ndiff --git a/plone/app/caching/profiles/default/registry/generic.xml b/plone/app/caching/profiles/default/registry/generic.xml\nindex 8c5bfd2..96f9668 100644\n--- a/plone/app/caching/profiles/default/registry/generic.xml\n+++ b/plone/app/caching/profiles/default/registry/generic.xml\n@@ -1,5 +1,5 @@\n <registry>\n-    <!-- Uncomment if showing "Generic caching" in the UI.\n+  <!-- Uncomment if showing "Generic caching" in the UI.\n          Also see operations/configure.zcml\n \n     <record name="plone.app.caching.baseCaching.maxage">\ndiff --git a/plone/app/caching/profiles/default/registry/moderate.xml b/plone/app/caching/profiles/default/registry/moderate.xml\nindex ed68cb0..9efc138 100644\n--- a/plone/app/caching/profiles/default/registry/moderate.xml\n+++ b/plone/app/caching/profiles/default/registry/moderate.xml\n@@ -1,53 +1,53 @@\n <registry>\n-    <!-- Moderate caching -->\n-    <record name="plone.app.caching.moderateCaching.smaxage">\n-        <field type="plone.registry.field.Int">\n-            <title>Shared maximum age</title>\n-            <description>Time (in seconds) to cache the response in the caching proxy</description>\n-            <required>False</required>\n-        </field>\n-        <value>86400</value>\n-    </record>\n-    <record name="plone.app.caching.moderateCaching.etags">\n-        <field type="plone.registry.field.Tuple">\n-            <title>ETags</title>\n-            <description>A list of ETag component names to include</description>\n-            <value_type type="plone.registry.field.ASCIILine" />\n-            <required>False</required>\n-        </field>\n-        <value>\n-        </value>\n-    </record>\n-    <record name="plone.app.caching.moderateCaching.lastModified">\n-        <field type="plone.registry.field.Bool">\n-            <title>Last-modified validation</title>\n-            <description>Turn on Last-Modified headers</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-    <record name="plone.app.caching.moderateCaching.ramCache">\n-        <field type="plone.registry.field.Bool">\n-            <title>RAM cache</title>\n-            <description>Turn on caching in Zope memory</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-    <record name="plone.app.caching.moderateCaching.vary">\n-        <field type="plone.registry.field.ASCIILine">\n-            <title>Vary</title>\n-            <description>Name(s) of HTTP headers that must match for the caching proxy to return a cached response</description>\n-            <required>False</required>\n-        </field>\n-        <value></value>\n-    </record>\n-    <record name="plone.app.caching.moderateCaching.anonOnly">\n-        <field type="plone.registry.field.Bool">\n-            <title>Only cache for anonymous users</title>\n-            <description>Ensure logging users always get a fresh page. Note that if you are caching pages in a proxy cache, you\'ll still need to use a Vary response header to keep anonymous and authenticated content separate.</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n+  <!-- Moderate caching -->\n+  <record name="plone.app.caching.moderateCaching.smaxage">\n+    <field type="plone.registry.field.Int">\n+      <title>Shared maximum age</title>\n+      <description>Time (in seconds) to cache the response in the caching proxy</description>\n+      <required>False</required>\n+    </field>\n+    <value>86400</value>\n+  </record>\n+  <record name="plone.app.caching.moderateCaching.etags">\n+    <field type="plone.registry.field.Tuple">\n+      <title>ETags</title>\n+      <description>A list of ETag component names to include</description>\n+      <value_type type="plone.registry.field.ASCIILine" />\n+      <required>False</required>\n+    </field>\n+    <value>\n+    </value>\n+  </record>\n+  <record name="plone.app.caching.moderateCaching.lastModified">\n+    <field type="plone.registry.field.Bool">\n+      <title>Last-modified validation</title>\n+      <description>Turn on Last-Modified headers</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n+  <record name="plone.app.caching.moderateCaching.ramCache">\n+    <field type="plone.registry.field.Bool">\n+      <title>RAM cache</title>\n+      <description>Turn on caching in Zope memory</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n+  <record name="plone.app.caching.moderateCaching.vary">\n+    <field type="plone.registry.field.ASCIILine">\n+      <title>Vary</title>\n+      <description>Name(s) of HTTP headers that must match for the caching proxy to return a cached response</description>\n+      <required>False</required>\n+    </field>\n+    <value />\n+  </record>\n+  <record name="plone.app.caching.moderateCaching.anonOnly">\n+    <field type="plone.registry.field.Bool">\n+      <title>Only cache for anonymous users</title>\n+      <description>Ensure logging users always get a fresh page. Note that if you are caching pages in a proxy cache, you\'ll still need to use a Vary response header to keep anonymous and authenticated content separate.</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n </registry>\ndiff --git a/plone/app/caching/profiles/default/registry/strong.xml b/plone/app/caching/profiles/default/registry/strong.xml\nindex c7e4df9..059d3e2 100644\n--- a/plone/app/caching/profiles/default/registry/strong.xml\n+++ b/plone/app/caching/profiles/default/registry/strong.xml\n@@ -1,61 +1,61 @@\n <registry>\n-    <!-- Strong caching -->\n-    <record name="plone.app.caching.strongCaching.maxage">\n-        <field type="plone.registry.field.Int">\n-            <title>Maximum age</title>\n-            <description>Time (in seconds) to cache the response in the browser or caching proxy</description>\n-            <required>False</required>\n-        </field>\n-        <value>86400</value>\n-    </record>\n-    <record name="plone.app.caching.strongCaching.smaxage">\n-        <field type="plone.registry.field.Int">\n-            <title>Shared maximum age</title>\n-            <description>Time (in seconds) to cache the response in the caching proxy. Leave blank to use value from "Maximum age" field.</description>\n-            <required>False</required>\n-        </field>\n-        <value></value>\n-    </record>\n-    <record name="plone.app.caching.strongCaching.etags">\n-        <field type="plone.registry.field.Tuple">\n-            <title>ETags</title>\n-            <description>A list of ETag component names to include</description>\n-            <value_type type="plone.registry.field.ASCIILine" />\n-            <required>False</required>\n-        </field>\n-        <value>\n-        </value>\n-    </record>\n-    <record name="plone.app.caching.strongCaching.lastModified">\n-        <field type="plone.registry.field.Bool">\n-            <title>Last-modified validation</title>\n-            <description>Turn on Last-Modified headers</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-    <record name="plone.app.caching.strongCaching.ramCache">\n-        <field type="plone.registry.field.Bool">\n-            <title>RAM cache</title>\n-            <description>Turn on caching in Zope memory</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-    <record name="plone.app.caching.strongCaching.vary">\n-        <field type="plone.registry.field.ASCIILine">\n-            <title>Vary</title>\n-            <description>Name(s) of HTTP headers that must match for the caching proxy to return a cached response</description>\n-            <required>False</required>\n-        </field>\n-        <value></value>\n-    </record>\n-    <record name="plone.app.caching.strongCaching.anonOnly">\n-        <field type="plone.registry.field.Bool">\n-            <title>Only cache for anonymous users</title>\n-            <description>Ensure logging users always get a fresh page. Note that if you are caching pages in a proxy cache, you\'ll still need to use a Vary response header to keep anonymous and authenticated content separate.</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n+  <!-- Strong caching -->\n+  <record name="plone.app.caching.strongCaching.maxage">\n+    <field type="plone.registry.field.Int">\n+      <title>Maximum age</title>\n+      <description>Time (in seconds) to cache the response in the browser or caching proxy</description>\n+      <required>False</required>\n+    </field>\n+    <value>86400</value>\n+  </record>\n+  <record name="plone.app.caching.strongCaching.smaxage">\n+    <field type="plone.registry.field.Int">\n+      <title>Shared maximum age</title>\n+      <description>Time (in seconds) to cache the response in the caching proxy. Leave blank to use value from "Maximum age" field.</description>\n+      <required>False</required>\n+    </field>\n+    <value />\n+  </record>\n+  <record name="plone.app.caching.strongCaching.etags">\n+    <field type="plone.registry.field.Tuple">\n+      <title>ETags</title>\n+      <description>A list of ETag component names to include</description>\n+      <value_type type="plone.registry.field.ASCIILine" />\n+      <required>False</required>\n+    </field>\n+    <value>\n+    </value>\n+  </record>\n+  <record name="plone.app.caching.strongCaching.lastModified">\n+    <field type="plone.registry.field.Bool">\n+      <title>Last-modified validation</title>\n+      <description>Turn on Last-Modified headers</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n+  <record name="plone.app.caching.strongCaching.ramCache">\n+    <field type="plone.registry.field.Bool">\n+      <title>RAM cache</title>\n+      <description>Turn on caching in Zope memory</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n+  <record name="plone.app.caching.strongCaching.vary">\n+    <field type="plone.registry.field.ASCIILine">\n+      <title>Vary</title>\n+      <description>Name(s) of HTTP headers that must match for the caching proxy to return a cached response</description>\n+      <required>False</required>\n+    </field>\n+    <value />\n+  </record>\n+  <record name="plone.app.caching.strongCaching.anonOnly">\n+    <field type="plone.registry.field.Bool">\n+      <title>Only cache for anonymous users</title>\n+      <description>Ensure logging users always get a fresh page. Note that if you are caching pages in a proxy cache, you\'ll still need to use a Vary response header to keep anonymous and authenticated content separate.</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n </registry>\ndiff --git a/plone/app/caching/profiles/default/registry/terse.xml b/plone/app/caching/profiles/default/registry/terse.xml\nindex adae5bb..fd2674e 100644\n--- a/plone/app/caching/profiles/default/registry/terse.xml\n+++ b/plone/app/caching/profiles/default/registry/terse.xml\n@@ -1,61 +1,61 @@\n <registry>\n-    <!-- Terse caching -->\n-    <record name="plone.app.caching.terseCaching.maxage">\n-        <field type="plone.registry.field.Int">\n-            <title>Maximum age</title>\n-            <description>Time (in seconds) to cache the response in the browser</description>\n-            <required>False</required>\n-        </field>\n-        <value>10</value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.smaxage">\n-        <field type="plone.registry.field.Int">\n-            <title>Shared maximum age</title>\n-            <description>Time (in seconds) to cache the response in the caching proxy</description>\n-            <required>False</required>\n-        </field>\n-        <value>60</value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.etags">\n-        <field type="plone.registry.field.Tuple">\n-            <title>ETags</title>\n-            <description>A list of ETag component names to include</description>\n-            <value_type type="plone.registry.field.ASCIILine" />\n-            <required>False</required>\n-        </field>\n-        <value>\n-        </value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.lastModified">\n-        <field type="plone.registry.field.Bool">\n-            <title>Last-modified validation</title>\n-            <description>Turn on Last-Modified headers</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.ramCache">\n-        <field type="plone.registry.field.Bool">\n-            <title>RAM cache</title>\n-            <description>Turn on caching in Zope memory</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.vary">\n-        <field type="plone.registry.field.ASCIILine">\n-            <title>Vary</title>\n-            <description>Name(s) of HTTP headers that must match for the caching proxy to return a cached response</description>\n-            <required>False</required>\n-        </field>\n-        <value></value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.anonOnly">\n-        <field type="plone.registry.field.Bool">\n-            <title>Only cache for anonymous users</title>\n-            <description>Ensure logging users always get a fresh page. Note that if you are caching pages in a proxy cache, you\'ll still need to use a Vary response header to keep anonymous and authenticated content separate.</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n+  <!-- Terse caching -->\n+  <record name="plone.app.caching.terseCaching.maxage">\n+    <field type="plone.registry.field.Int">\n+      <title>Maximum age</title>\n+      <description>Time (in seconds) to cache the response in the browser</description>\n+      <required>False</required>\n+    </field>\n+    <value>10</value>\n+  </record>\n+  <record name="plone.app.caching.terseCaching.smaxage">\n+    <field type="plone.registry.field.Int">\n+      <title>Shared maximum age</title>\n+      <description>Time (in seconds) to cache the response in the caching proxy</description>\n+      <required>False</required>\n+    </field>\n+    <value>60</value>\n+  </record>\n+  <record name="plone.app.caching.terseCaching.etags">\n+    <field type="plone.registry.field.Tuple">\n+      <title>ETags</title>\n+      <description>A list of ETag component names to include</description>\n+      <value_type type="plone.registry.field.ASCIILine" />\n+      <required>False</required>\n+    </field>\n+    <value>\n+    </value>\n+  </record>\n+  <record name="plone.app.caching.terseCaching.lastModified">\n+    <field type="plone.registry.field.Bool">\n+      <title>Last-modified validation</title>\n+      <description>Turn on Last-Modified headers</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n+  <record name="plone.app.caching.terseCaching.ramCache">\n+    <field type="plone.registry.field.Bool">\n+      <title>RAM cache</title>\n+      <description>Turn on caching in Zope memory</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n+  <record name="plone.app.caching.terseCaching.vary">\n+    <field type="plone.registry.field.ASCIILine">\n+      <title>Vary</title>\n+      <description>Name(s) of HTTP headers that must match for the caching proxy to return a cached response</description>\n+      <required>False</required>\n+    </field>\n+    <value />\n+  </record>\n+  <record name="plone.app.caching.terseCaching.anonOnly">\n+    <field type="plone.registry.field.Bool">\n+      <title>Only cache for anonymous users</title>\n+      <description>Ensure logging users always get a fresh page. Note that if you are caching pages in a proxy cache, you\'ll still need to use a Vary response header to keep anonymous and authenticated content separate.</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n </registry>\ndiff --git a/plone/app/caching/profiles/default/registry/weak.xml b/plone/app/caching/profiles/default/registry/weak.xml\nindex 674f819..3512f0c 100644\n--- a/plone/app/caching/profiles/default/registry/weak.xml\n+++ b/plone/app/caching/profiles/default/registry/weak.xml\n@@ -1,45 +1,45 @@\n <registry>\n-    <!-- Weak caching -->\n-    <record name="plone.app.caching.weakCaching.etags">\n-        <field type="plone.registry.field.Tuple">\n-            <title>ETags</title>\n-            <description>A list of ETag component names to include</description>\n-            <value_type type="plone.registry.field.ASCIILine" />\n-            <required>False</required>\n-        </field>\n-        <value>\n-        </value>\n-    </record>\n-    <record name="plone.app.caching.weakCaching.lastModified">\n-        <field type="plone.registry.field.Bool">\n-            <title>Last-modified validation</title>\n-            <description>Turn on Last-Modified headers</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-    <record name="plone.app.caching.weakCaching.ramCache">\n-        <field type="plone.registry.field.Bool">\n-            <title>RAM cache</title>\n-            <description>Turn on caching in Zope memory</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-    <record name="plone.app.caching.weakCaching.vary">\n-        <field type="plone.registry.field.ASCIILine">\n-            <title>Vary</title>\n-            <description>Name(s) of HTTP headers that must match for the caching proxy to return a cached response</description>\n-            <required>False</required>\n-        </field>\n-        <value></value>\n-    </record>\n-    <record name="plone.app.caching.weakCaching.anonOnly">\n-        <field type="plone.registry.field.Bool">\n-            <title>Only cache for anonymous users</title>\n-            <description>Ensure logging users always get a fresh page. Note that if you are caching pages in a proxy cache, you\'ll still need to use a Vary response header to keep anonymous and authenticated content separate.</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n+  <!-- Weak caching -->\n+  <record name="plone.app.caching.weakCaching.etags">\n+    <field type="plone.registry.field.Tuple">\n+      <title>ETags</title>\n+      <description>A list of ETag component names to include</description>\n+      <value_type type="plone.registry.field.ASCIILine" />\n+      <required>False</required>\n+    </field>\n+    <value>\n+    </value>\n+  </record>\n+  <record name="plone.app.caching.weakCaching.lastModified">\n+    <field type="plone.registry.field.Bool">\n+      <title>Last-modified validation</title>\n+      <description>Turn on Last-Modified headers</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n+  <record name="plone.app.caching.weakCaching.ramCache">\n+    <field type="plone.registry.field.Bool">\n+      <title>RAM cache</title>\n+      <description>Turn on caching in Zope memory</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n+  <record name="plone.app.caching.weakCaching.vary">\n+    <field type="plone.registry.field.ASCIILine">\n+      <title>Vary</title>\n+      <description>Name(s) of HTTP headers that must match for the caching proxy to return a cached response</description>\n+      <required>False</required>\n+    </field>\n+    <value />\n+  </record>\n+  <record name="plone.app.caching.weakCaching.anonOnly">\n+    <field type="plone.registry.field.Bool">\n+      <title>Only cache for anonymous users</title>\n+      <description>Ensure logging users always get a fresh page. Note that if you are caching pages in a proxy cache, you\'ll still need to use a Vary response header to keep anonymous and authenticated content separate.</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n </registry>\ndiff --git a/plone/app/caching/profiles/v2/registry/terse.xml b/plone/app/caching/profiles/v2/registry/terse.xml\nindex adae5bb..fd2674e 100644\n--- a/plone/app/caching/profiles/v2/registry/terse.xml\n+++ b/plone/app/caching/profiles/v2/registry/terse.xml\n@@ -1,61 +1,61 @@\n <registry>\n-    <!-- Terse caching -->\n-    <record name="plone.app.caching.terseCaching.maxage">\n-        <field type="plone.registry.field.Int">\n-            <title>Maximum age</title>\n-            <description>Time (in seconds) to cache the response in the browser</description>\n-            <required>False</required>\n-        </field>\n-        <value>10</value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.smaxage">\n-        <field type="plone.registry.field.Int">\n-            <title>Shared maximum age</title>\n-            <description>Time (in seconds) to cache the response in the caching proxy</description>\n-            <required>False</required>\n-        </field>\n-        <value>60</value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.etags">\n-        <field type="plone.registry.field.Tuple">\n-            <title>ETags</title>\n-            <description>A list of ETag component names to include</description>\n-            <value_type type="plone.registry.field.ASCIILine" />\n-            <required>False</required>\n-        </field>\n-        <value>\n-        </value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.lastModified">\n-        <field type="plone.registry.field.Bool">\n-            <title>Last-modified validation</title>\n-            <description>Turn on Last-Modified headers</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.ramCache">\n-        <field type="plone.registry.field.Bool">\n-            <title>RAM cache</title>\n-            <description>Turn on caching in Zope memory</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.vary">\n-        <field type="plone.registry.field.ASCIILine">\n-            <title>Vary</title>\n-            <description>Name(s) of HTTP headers that must match for the caching proxy to return a cached response</description>\n-            <required>False</required>\n-        </field>\n-        <value></value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.anonOnly">\n-        <field type="plone.registry.field.Bool">\n-            <title>Only cache for anonymous users</title>\n-            <description>Ensure logging users always get a fresh page. Note that if you are caching pages in a proxy cache, you\'ll still need to use a Vary response header to keep anonymous and authenticated content separate.</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n+  <!-- Terse caching -->\n+  <record name="plone.app.caching.terseCaching.maxage">\n+    <field type="plone.registry.field.Int">\n+      <title>Maximum age</title>\n+      <description>Time (in seconds) to cache the response in the browser</description>\n+      <required>False</required>\n+    </field>\n+    <value>10</value>\n+  </record>\n+  <record name="plone.app.caching.terseCaching.smaxage">\n+    <field type="plone.registry.field.Int">\n+      <title>Shared maximum age</title>\n+      <description>Time (in seconds) to cache the response in the caching proxy</description>\n+      <required>False</required>\n+    </field>\n+    <value>60</value>\n+  </record>\n+  <record name="plone.app.caching.terseCaching.etags">\n+    <field type="plone.registry.field.Tuple">\n+      <title>ETags</title>\n+      <description>A list of ETag component names to include</description>\n+      <value_type type="plone.registry.field.ASCIILine" />\n+      <required>False</required>\n+    </field>\n+    <value>\n+    </value>\n+  </record>\n+  <record name="plone.app.caching.terseCaching.lastModified">\n+    <field type="plone.registry.field.Bool">\n+      <title>Last-modified validation</title>\n+      <description>Turn on Last-Modified headers</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n+  <record name="plone.app.caching.terseCaching.ramCache">\n+    <field type="plone.registry.field.Bool">\n+      <title>RAM cache</title>\n+      <description>Turn on caching in Zope memory</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n+  <record name="plone.app.caching.terseCaching.vary">\n+    <field type="plone.registry.field.ASCIILine">\n+      <title>Vary</title>\n+      <description>Name(s) of HTTP headers that must match for the caching proxy to return a cached response</description>\n+      <required>False</required>\n+    </field>\n+    <value />\n+  </record>\n+  <record name="plone.app.caching.terseCaching.anonOnly">\n+    <field type="plone.registry.field.Bool">\n+      <title>Only cache for anonymous users</title>\n+      <description>Ensure logging users always get a fresh page. Note that if you are caching pages in a proxy cache, you\'ll still need to use a Vary response header to keep anonymous and authenticated content separate.</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n </registry>\ndiff --git a/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml b/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml\nindex e1b93a3..718d54e 100644\n--- a/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml\n+++ b/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml\n@@ -14,143 +14,143 @@\n \n   <!-- plone.content.itemView -->\n   <record name="plone.app.caching.moderateCaching.plone.content.itemView.etags">\n-      <field ref="plone.app.caching.moderateCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-          <element>locked</element>\n-          <element>resourceRegistries</element>\n-      </value>\n+    <field ref="plone.app.caching.moderateCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+      <element>locked</element>\n+      <element>resourceRegistries</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.itemView.ramCache">\n-      <field ref="plone.app.caching.moderateCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.moderateCaching.ramCache" />\n+    <value>True</value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.itemView.smaxage">\n-      <field ref="plone.app.caching.moderateCaching.smaxage" />\n-      <value>3600</value>\n+    <field ref="plone.app.caching.moderateCaching.smaxage" />\n+    <value>3600</value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.itemView.vary">\n-      <field ref="plone.app.caching.moderateCaching.vary" />\n-      <value>X-Anonymous</value>\n+    <field ref="plone.app.caching.moderateCaching.vary" />\n+    <value>X-Anonymous</value>\n   </record>\n \n \n \n   <!-- plone.content.folderView -->\n   <record name="plone.app.caching.moderateCaching.plone.content.folderView.etags">\n-      <field ref="plone.app.caching.moderateCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-          <element>locked</element>\n-          <element>copy</element>\n-          <element>resourceRegistries</element>\n-      </value>\n+    <field ref="plone.app.caching.moderateCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+      <element>locked</element>\n+      <element>copy</element>\n+      <element>resourceRegistries</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.folderView.ramCache">\n-      <field ref="plone.app.caching.moderateCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.moderateCaching.ramCache" />\n+    <value>True</value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.folderView.smaxage">\n-      <field ref="plone.app.caching.moderateCaching.smaxage" />\n-      <value>3600</value>\n+    <field ref="plone.app.caching.moderateCaching.smaxage" />\n+    <value>3600</value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.folderView.vary">\n-      <field ref="plone.app.caching.moderateCaching.vary" />\n-      <value>X-Anonymous</value>\n+    <field ref="plone.app.caching.moderateCaching.vary" />\n+    <value>X-Anonymous</value>\n   </record>\n \n \n   <!-- plone.content.dynamic -->\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.etags">\n-      <field ref="plone.app.caching.terseCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-          <element>locked</element>\n-          <element>copy</element>\n-      </value>\n+    <field ref="plone.app.caching.terseCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+      <element>locked</element>\n+      <element>copy</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.ramCache">\n-      <field ref="plone.app.caching.terseCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.terseCaching.ramCache" />\n+    <value>True</value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.vary">\n-      <field ref="plone.app.caching.terseCaching.vary" />\n-      <value>Accept</value>\n+    <field ref="plone.app.caching.terseCaching.vary" />\n+    <value>Accept</value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.maxage">\n-      <field ref="plone.app.caching.terseCaching.maxage" />\n-      <value>0</value>\n+    <field ref="plone.app.caching.terseCaching.maxage" />\n+    <value>0</value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.smaxage">\n-      <field ref="plone.app.caching.terseCaching.smaxage" />\n-      <value>0</value>\n+    <field ref="plone.app.caching.terseCaching.smaxage" />\n+    <value>0</value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.vary">\n-      <field ref="plone.app.caching.terseCaching.vary" />\n-      <value>X-Anonymous, Accept</value>\n+    <field ref="plone.app.caching.terseCaching.vary" />\n+    <value>X-Anonymous, Accept</value>\n   </record>\n \n \n   <!-- plone.content.feed -->\n   <record name="plone.app.caching.moderateCaching.plone.content.feed.smaxage">\n-      <field ref="plone.app.caching.moderateCaching.smaxage" />\n-      <value>86400</value>\n+    <field ref="plone.app.caching.moderateCaching.smaxage" />\n+    <value>86400</value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.feed.etags">\n-      <field ref="plone.app.caching.moderateCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-      </value>\n+    <field ref="plone.app.caching.moderateCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.feed.ramCache">\n-      <field ref="plone.app.caching.moderateCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.moderateCaching.ramCache" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.content.file -->\n   <record name="plone.app.caching.moderateCaching.plone.content.file.smaxage">\n-      <field ref="plone.app.caching.moderateCaching.smaxage" />\n-      <value>86400</value>\n+    <field ref="plone.app.caching.moderateCaching.smaxage" />\n+    <value>86400</value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.file.lastModified">\n-      <field ref="plone.app.caching.moderateCaching.lastModified" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.moderateCaching.lastModified" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.resource-->\n   <record name="plone.app.caching.strongCaching.plone.resource.maxage">\n-      <field ref="plone.app.caching.strongCaching.maxage" />\n-      <value>86400</value>\n+    <field ref="plone.app.caching.strongCaching.maxage" />\n+    <value>86400</value>\n   </record>\n   <record name="plone.app.caching.strongCaching.plone.resource.lastModified">\n-      <field ref="plone.app.caching.strongCaching.lastModified" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.strongCaching.lastModified" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.stableResource-->\n   <record name="plone.app.caching.strongCaching.plone.stableResource.maxage">\n-      <field ref="plone.app.caching.strongCaching.maxage" />\n-      <value>31536000</value>\n+    <field ref="plone.app.caching.strongCaching.maxage" />\n+    <value>31536000</value>\n   </record>\n   <record name="plone.app.caching.strongCaching.plone.stableResource.lastModified">\n-      <field ref="plone.app.caching.strongCaching.lastModified" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.strongCaching.lastModified" />\n+    <value>True</value>\n   </record>\n \n \n-</registry>\n\\ No newline at end of file\n+</registry>\ndiff --git a/plone/app/caching/profiles/with-caching-proxy/registry.xml b/plone/app/caching/profiles/with-caching-proxy/registry.xml\nindex c3f9e3e..c258850 100644\n--- a/plone/app/caching/profiles/with-caching-proxy/registry.xml\n+++ b/plone/app/caching/profiles/with-caching-proxy/registry.xml\n@@ -15,121 +15,121 @@\n \n   <!-- plone.content.itemView -->\n   <record name="plone.app.caching.weakCaching.plone.content.itemView.etags">\n-      <field ref="plone.app.caching.weakCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-          <element>locked</element>\n-          <element>resourceRegistries</element>\n-      </value>\n+    <field ref="plone.app.caching.weakCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+      <element>locked</element>\n+      <element>resourceRegistries</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.itemView.ramCache">\n-      <field ref="plone.app.caching.weakCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.weakCaching.ramCache" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.content.folderView -->\n   <record name="plone.app.caching.weakCaching.plone.content.folderView.etags">\n-      <field ref="plone.app.caching.weakCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-          <element>locked</element>\n-          <element>copy</element>\n-          <element>resourceRegistries</element>\n-      </value>\n+    <field ref="plone.app.caching.weakCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+      <element>locked</element>\n+      <element>copy</element>\n+      <element>resourceRegistries</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.folderView.ramCache">\n-      <field ref="plone.app.caching.weakCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.weakCaching.ramCache" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.content.dynamic -->\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.etags">\n-      <field ref="plone.app.caching.terseCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-          <element>locked</element>\n-          <element>copy</element>\n-      </value>\n+    <field ref="plone.app.caching.terseCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+      <element>locked</element>\n+      <element>copy</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.ramCache">\n-      <field ref="plone.app.caching.terseCaching.ramCache" />\n-      <value>False</value>\n+    <field ref="plone.app.caching.terseCaching.ramCache" />\n+    <value>False</value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.vary">\n-      <field ref="plone.app.caching.terseCaching.vary" />\n-      <value>Accept</value>\n+    <field ref="plone.app.caching.terseCaching.vary" />\n+    <value>Accept</value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.maxage">\n-      <field ref="plone.app.caching.terseCaching.maxage" />\n-      <value>10</value>\n+    <field ref="plone.app.caching.terseCaching.maxage" />\n+    <value>10</value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.smaxage">\n-      <field ref="plone.app.caching.terseCaching.smaxage" />\n-      <value>60</value>\n+    <field ref="plone.app.caching.terseCaching.smaxage" />\n+    <value>60</value>\n   </record>\n \n \n   <!-- plone.content.feed -->\n   <record name="plone.app.caching.moderateCaching.plone.content.feed.smaxage">\n-      <field ref="plone.app.caching.moderateCaching.smaxage" />\n-      <value>86400</value>\n+    <field ref="plone.app.caching.moderateCaching.smaxage" />\n+    <value>86400</value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.feed.etags">\n-      <field ref="plone.app.caching.moderateCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-      </value>\n+    <field ref="plone.app.caching.moderateCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.feed.ramCache">\n-      <field ref="plone.app.caching.moderateCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.moderateCaching.ramCache" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.content.file -->\n   <record name="plone.app.caching.moderateCaching.plone.content.file.smaxage">\n-      <field ref="plone.app.caching.moderateCaching.smaxage" />\n-      <value>86400</value>\n+    <field ref="plone.app.caching.moderateCaching.smaxage" />\n+    <value>86400</value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.file.lastModified">\n-      <field ref="plone.app.caching.moderateCaching.lastModified" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.moderateCaching.lastModified" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.resource-->\n   <record name="plone.app.caching.strongCaching.plone.resource.maxage">\n-      <field ref="plone.app.caching.strongCaching.maxage" />\n-      <value>86400</value>\n+    <field ref="plone.app.caching.strongCaching.maxage" />\n+    <value>86400</value>\n   </record>\n   <record name="plone.app.caching.strongCaching.plone.resource.lastModified">\n-      <field ref="plone.app.caching.strongCaching.lastModified" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.strongCaching.lastModified" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.stableResource-->\n   <record name="plone.app.caching.strongCaching.plone.stableResource.maxage">\n-      <field ref="plone.app.caching.strongCaching.maxage" />\n-      <value>31536000</value>\n+    <field ref="plone.app.caching.strongCaching.maxage" />\n+    <value>31536000</value>\n   </record>\n   <record name="plone.app.caching.strongCaching.plone.stableResource.lastModified">\n-      <field ref="plone.app.caching.strongCaching.lastModified" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.strongCaching.lastModified" />\n+    <value>True</value>\n   </record>\n \n \ndiff --git a/plone/app/caching/profiles/without-caching-proxy/registry.xml b/plone/app/caching/profiles/without-caching-proxy/registry.xml\nindex 6b89d42..bb58175 100644\n--- a/plone/app/caching/profiles/without-caching-proxy/registry.xml\n+++ b/plone/app/caching/profiles/without-caching-proxy/registry.xml\n@@ -15,114 +15,114 @@\n \n   <!-- plone.content.itemView -->\n   <record name="plone.app.caching.weakCaching.plone.content.itemView.etags">\n-      <field ref="plone.app.caching.weakCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-          <element>locked</element>\n-          <element>resourceRegistries</element>\n-      </value>\n+    <field ref="plone.app.caching.weakCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+      <element>locked</element>\n+      <element>resourceRegistries</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.itemView.ramCache">\n-      <field ref="plone.app.caching.weakCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.weakCaching.ramCache" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.content.folderView -->\n   <record name="plone.app.caching.weakCaching.plone.content.folderView.etags">\n-      <field ref="plone.app.caching.weakCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-          <element>locked</element>\n-          <element>copy</element>\n-          <element>resourceRegistries</element>\n-      </value>\n+    <field ref="plone.app.caching.weakCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+      <element>locked</element>\n+      <element>copy</element>\n+      <element>resourceRegistries</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.folderView.ramCache">\n-      <field ref="plone.app.caching.weakCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.weakCaching.ramCache" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.content.dynamic -->\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.etags">\n-      <field ref="plone.app.caching.terseCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-          <element>locked</element>\n-          <element>copy</element>\n-      </value>\n+    <field ref="plone.app.caching.terseCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+      <element>locked</element>\n+      <element>copy</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.ramCache">\n-      <field ref="plone.app.caching.terseCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.terseCaching.ramCache" />\n+    <value>True</value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.vary">\n-      <field ref="plone.app.caching.terseCaching.vary" />\n-      <value>Accept</value>\n+    <field ref="plone.app.caching.terseCaching.vary" />\n+    <value>Accept</value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.maxage">\n-      <field ref="plone.app.caching.terseCaching.maxage" />\n-      <value>10</value>\n+    <field ref="plone.app.caching.terseCaching.maxage" />\n+    <value>10</value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.smaxage">\n-      <field ref="plone.app.caching.terseCaching.smaxage" />\n-      <value>0</value>\n+    <field ref="plone.app.caching.terseCaching.smaxage" />\n+    <value>0</value>\n   </record>\n \n \n   <!-- plone.content.feed -->\n   <record name="plone.app.caching.weakCaching.plone.content.feed.etags">\n-      <field ref="plone.app.caching.weakCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-      </value>\n+    <field ref="plone.app.caching.weakCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.feed.ramCache">\n-      <field ref="plone.app.caching.weakCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.weakCaching.ramCache" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.content.file -->\n   <record name="plone.app.caching.weakCaching.plone.content.file.lastModified">\n-      <field ref="plone.app.caching.weakCaching.lastModified" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.weakCaching.lastModified" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.resource-->\n   <record name="plone.app.caching.strongCaching.plone.resource.maxage">\n-      <field ref="plone.app.caching.strongCaching.maxage" />\n-      <value>86400</value>\n+    <field ref="plone.app.caching.strongCaching.maxage" />\n+    <value>86400</value>\n   </record>\n   <record name="plone.app.caching.strongCaching.plone.resource.lastModified">\n-      <field ref="plone.app.caching.strongCaching.lastModified" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.strongCaching.lastModified" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.stableResource-->\n   <record name="plone.app.caching.strongCaching.plone.stableResource.maxage">\n-      <field ref="plone.app.caching.strongCaching.maxage" />\n-      <value>31536000</value>\n+    <field ref="plone.app.caching.strongCaching.maxage" />\n+    <value>31536000</value>\n   </record>\n   <record name="plone.app.caching.strongCaching.plone.stableResource.lastModified">\n-      <field ref="plone.app.caching.strongCaching.lastModified" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.strongCaching.lastModified" />\n+    <value>True</value>\n   </record>\n \n \n-</registry>\n\\ No newline at end of file\n+</registry>\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2022-04-04T16:45:18-03:00
Author: Érico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/bd0fdf29ab4b3afdbeb8153de0c1b48127dc6d7b

Update changelog

Files changed:
A news/94.bugfix

b'diff --git a/news/94.bugfix b/news/94.bugfix\nnew file mode 100644\nindex 0000000..c50c958\n--- /dev/null\n+++ b/news/94.bugfix\n@@ -0,0 +1 @@\n+Apply black to the codebase, format it to be Python 3 only\n\\ No newline at end of file\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2022-04-05T00:25:01+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/38079551718b954e57c80ad79524393c88d5d14d

Merge pull request #95 from plone/issue-94-python3

Reformat codebase

Files changed:
A .github/workflows/black.yml
A .github/workflows/pyroma.yml
A .github/workflows/tests.yml
A .github/workflows/zpretty.yml
A news/94.bugfix
M plone/app/caching/browser/configure.zcml
M plone/app/caching/browser/controlpanel.py
M plone/app/caching/browser/edit.py
M plone/app/caching/caching.zcml
M plone/app/caching/configure.zcml
M plone/app/caching/operations/configure.zcml
M plone/app/caching/operations/default.py
M plone/app/caching/operations/etags.py
M plone/app/caching/operations/utils.py
M plone/app/caching/profiles.zcml
M plone/app/caching/profiles/default/controlpanel.xml
M plone/app/caching/profiles/default/metadata.xml
M plone/app/caching/profiles/default/registry.xml
M plone/app/caching/profiles/default/registry/generic.xml
M plone/app/caching/profiles/default/registry/moderate.xml
M plone/app/caching/profiles/default/registry/strong.xml
M plone/app/caching/profiles/default/registry/terse.xml
M plone/app/caching/profiles/default/registry/weak.xml
M plone/app/caching/profiles/v2/registry/terse.xml
M plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml
M plone/app/caching/profiles/with-caching-proxy/registry.xml
M plone/app/caching/profiles/without-caching-proxy/registry.xml
M plone/app/caching/tests/__init__.py
M plone/app/caching/tests/test_integration.py
M plone/app/caching/tests/test_operation_default.py
M plone/app/caching/tests/test_operation_parameters.py
M plone/app/caching/tests/test_operation_utils.py
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py
M plone/app/caching/tests/test_purge.py
M plone/app/caching/tests/test_utils.py

b'diff --git a/.github/workflows/black.yml b/.github/workflows/black.yml\nnew file mode 100644\nindex 0000000..61a8597\n--- /dev/null\n+++ b/.github/workflows/black.yml\n@@ -0,0 +1,35 @@\n+name: Black\n+on: [push]\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        python-version: [3.8]\n+\n+    steps:\n+      # git checkout\n+      - uses: actions/checkout@v2\n+\n+      # python setup\n+      - name: Set up Python ${{ matrix.python-version }}\n+        uses: actions/setup-python@v1\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+\n+      # python cache\n+      - uses: actions/cache@v1\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n+          restore-keys: |\n+            ${{ runner.os }}-pip-\n+\n+      # install black\n+      - name: install black\n+        run: pip install black\n+\n+      # run black\n+      - name: run black\n+        run: black plone/ --check --diff\ndiff --git a/.github/workflows/pyroma.yml b/.github/workflows/pyroma.yml\nnew file mode 100644\nindex 0000000..bbad3c2\n--- /dev/null\n+++ b/.github/workflows/pyroma.yml\n@@ -0,0 +1,35 @@\n+name: Pyroma\n+on: [push]\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        python-version: [3.8]\n+\n+    steps:\n+      # git checkout\n+      - uses: actions/checkout@v2\n+\n+      # python setup\n+      - name: Set up Python ${{ matrix.python-version }}\n+        uses: actions/setup-python@v1\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+\n+      # python cache\n+      - uses: actions/cache@v1\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n+          restore-keys: |\n+            ${{ runner.os }}-pip-\n+\n+      # install pyroma\n+      - name: install pyroma\n+        run: pip install pyroma\n+\n+      # run pyroma\n+      - name: run pyroma\n+        run: pyroma -n 10 -d .\ndiff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nnew file mode 100644\nindex 0000000..dc2521b\n--- /dev/null\n+++ b/.github/workflows/tests.yml\n@@ -0,0 +1,34 @@\n+name: Tests\n+on: [push]\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        python: [3.7, 3.8, 3.9]\n+        plone: ["6.0.0a3", "5.2-latest"]\n+        exclude:\n+          - plone: "5.2-latest"\n+            python: 3.9\n+\n+    steps:\n+      # git checkout\n+      - uses: actions/checkout@v2\n+\n+      - name: Setup Plone ${{ matrix.plone }} with Python ${{ matrix.python }}\n+        id: setup\n+        uses: plone/setup-plone@v1.0.0\n+        with:\n+          python-version: ${{ matrix.python }}\n+          plone-version: ${{ matrix.plone }}\n+\n+      # Install plone.volto with test extras\n+      - name: Install plone.volto\n+        run: |\n+          pip install ".[test]"\n+\n+      # test\n+      - name: test\n+        run: |\n+          zope-testrunner --auto-color --auto-progress --test-path .\ndiff --git a/.github/workflows/zpretty.yml b/.github/workflows/zpretty.yml\nnew file mode 100644\nindex 0000000..7370f55\n--- /dev/null\n+++ b/.github/workflows/zpretty.yml\n@@ -0,0 +1,37 @@\n+name: zpretty\n+on: [push]\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        python-version: [3.8]\n+\n+    steps:\n+      # git checkout\n+      - uses: actions/checkout@v2\n+\n+      # python setup\n+      - name: Set up Python ${{ matrix.python-version }}\n+        uses: actions/setup-python@v1\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+\n+      # python cache\n+      - uses: actions/cache@v1\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n+          restore-keys: |\n+            ${{ runner.os }}-pip-\n+\n+      # install zpretty\n+      - name: install zpretty\n+        run: pip install zpretty\n+\n+      - name: run zpretty for zcml\n+        run: find plone -name \'*.zcml\' | xargs zpretty -z --check\n+\n+      - name: run zpretty for xml\n+        run: find plone -name \'*.xml\' | xargs zpretty -x --check\ndiff --git a/news/94.bugfix b/news/94.bugfix\nnew file mode 100644\nindex 0000000..c50c958\n--- /dev/null\n+++ b/news/94.bugfix\n@@ -0,0 +1 @@\n+Apply black to the codebase, format it to be Python 3 only\n\\ No newline at end of file\ndiff --git a/plone/app/caching/browser/configure.zcml b/plone/app/caching/browser/configure.zcml\nindex 88c36ad..c9cb415 100644\n--- a/plone/app/caching/browser/configure.zcml\n+++ b/plone/app/caching/browser/configure.zcml\n@@ -1,43 +1,44 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-    <browser:page\n-        name="caching-controlpanel"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n-        class=".controlpanel.ControlPanel"\n-        template="controlpanel.pt"\n-        permission="cmf.ManagePortal"\n-        />\n+  <browser:page\n+      name="caching-controlpanel"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      class=".controlpanel.ControlPanel"\n+      template="controlpanel.pt"\n+      permission="cmf.ManagePortal"\n+      />\n \n-    <browser:page\n-        name="caching-controlpanel-import"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n-        class=".controlpanel.Import"\n-        template="import.pt"\n-        permission="cmf.ManagePortal"\n-        />\n+  <browser:page\n+      name="caching-controlpanel-import"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      class=".controlpanel.Import"\n+      template="import.pt"\n+      permission="cmf.ManagePortal"\n+      />\n \n-    <browser:page\n-        name="caching-controlpanel-purge"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n-        class=".controlpanel.Purge"\n-        template="purge.pt"\n-        permission="cmf.ManagePortal"\n-        />\n+  <browser:page\n+      name="caching-controlpanel-purge"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      class=".controlpanel.Purge"\n+      template="purge.pt"\n+      permission="cmf.ManagePortal"\n+      />\n \n-    <browser:page\n-        name="caching-controlpanel-ramcache"\n-        for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n-        class=".controlpanel.RAMCache"\n-        template="ramcache.pt"\n-        permission="cmf.ManagePortal"\n-        />\n+  <browser:page\n+      name="caching-controlpanel-ramcache"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      class=".controlpanel.RAMCache"\n+      template="ramcache.pt"\n+      permission="cmf.ManagePortal"\n+      />\n \n-    <browser:resource\n-        name="plone.app.caching.gif"\n-        image="plone.app.caching.gif"\n-        />\n+  <browser:resource\n+      name="plone.app.caching.gif"\n+      image="plone.app.caching.gif"\n+      />\n \n </configure>\ndiff --git a/plone/app/caching/browser/controlpanel.py b/plone/app/caching/browser/controlpanel.py\nindex fb49cba..3543097 100644\n--- a/plone/app/caching/browser/controlpanel.py\n+++ b/plone/app/caching/browser/controlpanel.py\n@@ -159,9 +159,7 @@ def update(self):\n                 self.processSave()\n             elif "form.button.Cancel" in self.request.form:\n                 self.request.response.redirect(\n-                    "{}/@@overview-controlpanel".format(\n-                        self.context.absolute_url(),\n-                    ),\n+                    f"{self.context.absolute_url()}/@@overview-controlpanel",\n                 )\n \n     def processSave(self):\n@@ -209,18 +207,20 @@ def processSave(self):\n                     continue\n \n                 if contentType in contentTypeRulesetMapping:\n+                    error_content_type = self.contentTypesLookup.get(\n+                        contentType,\n+                        {},\n+                    ).get(\n+                        "title",\n+                        contentType,\n+                    )\n+                    error_ruleset = contentTypeRulesetMapping[contentType]\n                     self.errors.setdefault("contenttypes", {},)[ruleset] = _(\n-                        "Content type ${contentType} is already mapped to "\n+                        "Content type ${error_content_type} is already mapped to "\n                         "the rule ${ruleset}.",\n                         mapping={\n-                            "contentType": self.contentTypesLookup.get(\n-                                contentType,\n-                                {},\n-                            ).get(\n-                                "title",\n-                                contentType,\n-                            ),\n-                            "ruleset": contentTypeRulesetMapping[contentType],\n+                            "contentType": error_content_type,\n+                            "ruleset": error_ruleset,\n                         },\n                     )\n                 else:\n@@ -470,13 +470,7 @@ def hasGlobalOptions(self, operationType):\n             return False\n \n         for option in options:\n-            if (\n-                "{}.{}".format(\n-                    prefix,\n-                    option,\n-                )\n-                in self.registry\n-            ):\n+            if f"{prefix}.{option}" in self.registry:\n                 return True\n \n         return False\n@@ -520,9 +514,8 @@ def processImport(self):\n \n         # Create a snapshot\n         if snapshot:\n-            snapshotId = "plone.app.caching.beforeimport.{}".format(\n-                datetime.datetime.now().isoformat().replace(":", ".")\n-            )\n+            snapshot_date = datetime.datetime.now().isoformat().replace(":", ".")\n+            snapshotId = f"plone.app.caching.beforeimport.{snapshot_date}"\n             portal_setup.createSnapshot(snapshotId)\n \n         # Import the new profile\ndiff --git a/plone/app/caching/browser/edit.py b/plone/app/caching/browser/edit.py\nindex dc26e08..da3bf84 100644\n--- a/plone/app/caching/browser/edit.py\n+++ b/plone/app/caching/browser/edit.py\n@@ -97,11 +97,7 @@ def update(self):\n             fieldName = f"{prefix}.{option}"\n \n             if self.rulesetName:\n-                rulesetFieldName = "{}.{}.{}".format(\n-                    prefix,\n-                    self.rulesetName,\n-                    option,\n-                )\n+                rulesetFieldName = f"{prefix}.{self.rulesetName}.{option}"\n \n                 if rulesetFieldName in self.registry.records:\n                     newField = self.cloneField(\n@@ -150,21 +146,14 @@ def getContent(self):\n         options = self.operation.options\n \n         for option in options:\n-            recordName = "{}.{}".format(\n-                prefix,\n-                option,\n-            )\n+            recordName = f"{prefix}.{option}"\n \n             # If a ruleset-specific record does not exist, we can fall back on\n             # a global record, since the per-ruleset records will be created\n             # as necessary in applyChanges()\n \n             if self.rulesetName:\n-                rulesetRecordName = "{}.{}.{}".format(\n-                    prefix,\n-                    self.rulesetName,\n-                    option,\n-                )\n+                rulesetRecordName = f"{prefix}.{self.rulesetName}.{option}"\n \n                 if rulesetRecordName in self.registry.records:\n                     context[rulesetRecordName] = self.registry[rulesetRecordName]\n@@ -256,9 +245,7 @@ def save(self, action):\n         self.applyChanges(data)\n         IStatusMessage(self.request).addStatusMessage(_("Changes saved."), "info")\n         self.request.response.redirect(\n-            "{}/@@caching-controlpanel#detailed-settings".format(\n-                self.context.absolute_url(),\n-            ),\n+            f"{self.context.absolute_url()}/@@caching-controlpanel#detailed-settings",\n         )\n         return ""\n \n@@ -266,19 +253,14 @@ def save(self, action):\n     def cancel(self, action):\n         IStatusMessage(self.request).addStatusMessage(_("Edit cancelled."), type="info")\n         self.request.response.redirect(\n-            "{}/@@caching-controlpanel#detailed-settings".format(\n-                self.context.absolute_url(),\n-            ),\n+            f"{self.context.absolute_url()}/@@caching-controlpanel#detailed-settings"\n         )\n         return ""\n \n     @button.buttonAndHandler(_("Delete settings (use defaults)"), name="clear")\n     def clear(self, action):\n         for key in self.getContent().keys():\n-            key_suffix = "{}.{}.".format(\n-                self.operation.prefix,\n-                self.rulesetName,\n-            )\n+            key_suffix = f"{self.operation.prefix}.{self.rulesetName}."\n             assert key.startswith(key_suffix)\n \n             if key in self.registry.records:\n@@ -288,8 +270,6 @@ def clear(self, action):\n             _("Ruleset-specific settings removed."), type="info"\n         )\n         self.request.response.redirect(\n-            "{}/@@caching-controlpanel#detailed-settings".format(\n-                self.context.absolute_url(),\n-            ),\n+            f"{self.context.absolute_url()}/@@caching-controlpanel#detailed-settings",\n         )\n         return ""\ndiff --git a/plone/app/caching/caching.zcml b/plone/app/caching/caching.zcml\nindex 97c9546..e081d57 100644\n--- a/plone/app/caching/caching.zcml\n+++ b/plone/app/caching/caching.zcml\n@@ -1,139 +1,197 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:cache="http://namespaces.zope.org/cache"\n+    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-    <!-- Out-of-the-box cache profiles\n+  <!-- Out-of-the-box cache profiles\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n \n-    <genericsetup:registerProfile\n-        name="with-caching-proxy"\n-        title="With caching proxy"\n-        description="Settings useful for setups with a caching proxy such as Squid or Varnish"\n-        directory="profiles/with-caching-proxy"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        for="plone.app.caching.interfaces.ICacheProfiles"\n-        />\n+  <genericsetup:registerProfile\n+      name="with-caching-proxy"\n+      title="With caching proxy"\n+      description="Settings useful for setups with a caching proxy such as Squid or Varnish"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      for="plone.app.caching.interfaces.ICacheProfiles"\n+      directory="profiles/with-caching-proxy"\n+      />\n+\n+  <genericsetup:registerProfile\n+      name="without-caching-proxy"\n+      title="Without caching proxy"\n+      description="Settings useful for setups without a caching proxy such as Squid or Varnish"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      for="plone.app.caching.interfaces.ICacheProfiles"\n+      directory="profiles/without-caching-proxy"\n+      />\n+\n+  <genericsetup:registerProfile\n+      name="with-caching-proxy-splitviews"\n+      title="With caching proxy (and split-view caching)"\n+      description="An example profile for a caching proxy setup with split-view caching enabled."\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      for="plone.app.caching.interfaces.ICacheProfiles"\n+      directory="profiles/with-caching-proxy-splitviews"\n+      />\n+\n+  <!-- Default caching ruleset types\n+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n \n-    <genericsetup:registerProfile\n-        name="without-caching-proxy"\n-        title="Without caching proxy"\n-        description="Settings useful for setups without a caching proxy such as Squid or Varnish"\n-        directory="profiles/without-caching-proxy"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        for="plone.app.caching.interfaces.ICacheProfiles"\n-        />\n+  <cache:rulesetType\n+      name="plone.resource"\n+      title="File and image resources"\n+      description="Includes images and files created or customised through the ZMI, those exposed in the portal_skins tool, and images registered in resource directories on the filesystem."\n+      />\n+\n+  <cache:rulesetType\n+      name="plone.stableResource"\n+      title="Stable file and image resources"\n+      description="These are resources which can be cached \'forever\'. Normally this means that if the object does change, its URL changes too."\n+      />\n+\n+  <cache:rulesetType\n+      name="plone.content.file"\n+      title="Content files and images"\n+      description="Includes files and images in content space."\n+      />\n+\n+  <cache:rulesetType\n+      name="plone.content.itemView"\n+      title="Content item view"\n+      description="A public-facing view for a content item that is not a folder or container for other items"\n+      />\n+\n+  <cache:rulesetType\n+      name="plone.content.folderView"\n+      title="Content folder view"\n+      description="A public-facing view for a content item that is a folder or container for other items"\n+      />\n+\n+  <cache:rulesetType\n+      name="plone.content.feed"\n+      title="Content feed"\n+      description="A dynamic feed, e.g. using RSS or ATOM"\n+      />\n+\n+  <cache:rulesetType\n+      name="plone.content.dynamic"\n+      title="Dynamic views, like collections, searches, ..."\n+      description="A public-facing view for a contents that is collected dynamically from the whole site."\n+      />\n+\n+  <!-- Default caching ruleset assignments\n+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n \n-    <genericsetup:registerProfile\n-        name="with-caching-proxy-splitviews"\n-        title="With caching proxy (and split-view caching)"\n-        description="An example profile for a caching proxy setup with split-view caching enabled."\n-        directory="profiles/with-caching-proxy-splitviews"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        for="plone.app.caching.interfaces.ICacheProfiles"\n+  <!-- CMF filesystem (skin layer) files and images -->\n+  <cache:ruleset\n+      for="Products.CMFCore.FSFile.FSFile"\n+      ruleset="plone.resource"\n+      />\n+  <cache:ruleset\n+      for="Products.CMFCore.FSImage.FSImage"\n+      ruleset="plone.resource"\n+      />\n+\n+  <!-- OFS (in-ZODB) files, images -->\n+  <cache:ruleset\n+      for="OFS.Image.File"\n+      ruleset="plone.resource"\n+      />\n+\n+  <!-- Automatically purge these always -->\n+  <class class="OFS.Image.File">\n+    <implements interface="z3c.caching.interfaces.IPurgeable" />\n+  </class>\n+\n+\n+  <!-- Zope resources (including those in resource directories) -->\n+  <cache:ruleset\n+      for="zope.browserresource.interfaces.IResource"\n+      ruleset="plone.resource"\n+      />\n+\n+  <!-- These rely on the ContentItemLookup delegation -->\n+  <cache:ruleset\n+      for="plone.dexterity.interfaces.IDexterityItem"\n+      ruleset="plone.content.itemView"\n+      />\n+  <cache:ruleset\n+      for="plone.dexterity.interfaces.IDexterityContainer"\n+      ruleset="plone.content.folderView"\n+      />\n+\n+\n+  <!-- These rely on the ContentItemLookup delegation -->\n+  <cache:ruleset\n+      for="plone.namedfile.browser.Download"\n+      ruleset="plone.content.file"\n+      />\n+  <cache:ruleset\n+      for="plone.namedfile.scaling.ImageScale"\n+      ruleset="plone.content.file"\n+      />\n+\n+  <!-- plone.restapi content -->\n+  <configure zcml:condition="installed plone.restapi">\n+\n+    <include package="plone.restapi" />\n+\n+    <cache:ruleset\n+        for="plone.restapi.services.discussion.conversation.CommentsGet"\n+        ruleset="plone.content.itemView"\n         />\n \n-    <!-- Default caching ruleset types\n-         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n-\n-    <cache:rulesetType\n-        name="plone.resource"\n-        title="File and image resources"\n-        description="Includes images and files created or customised through the ZMI, those exposed in the portal_skins tool, and images registered in resource directories on the filesystem."\n+    <cache:ruleset\n+        for="plone.restapi.services.actions.get.ActionsGet"\n+        ruleset="plone.content.dynamic"\n         />\n-\n-    <cache:rulesetType\n-        name="plone.stableResource"\n-        title="Stable file and image resources"\n-        description="These are resources which can be cached \'forever\'. Normally this means that if the object does change, its URL changes too."\n+    <cache:ruleset\n+        for="plone.restapi.services.breadcrumbs.get.BreadcrumbsGet"\n+        ruleset="plone.content.dynamic"\n         />\n-\n-    <cache:rulesetType\n-        name="plone.content.file"\n-        title="Content files and images"\n-        description="Includes files and images in content space."\n+    <cache:ruleset\n+        for="plone.restapi.services.content.get.ContentGet"\n+        ruleset="plone.content.dynamic"\n         />\n-\n-    <cache:rulesetType\n-        name="plone.content.itemView"\n-        title="Content item view"\n-        description="A public-facing view for a content item that is not a folder or container for other items"\n+    <cache:ruleset\n+        for="plone.restapi.services.multilingual.pam.TranslationInfo"\n+        ruleset="plone.content.dynamic"\n         />\n-\n-    <cache:rulesetType\n-        name="plone.content.folderView"\n-        title="Content folder view"\n-        description="A public-facing view for a content item that is a folder or container for other items"\n+    <cache:ruleset\n+        for="plone.restapi.services.navigation.get.NavigationGet"\n+        ruleset="plone.content.dynamic"\n         />\n-\n-    <cache:rulesetType\n-        name="plone.content.feed"\n-        title="Content feed"\n-        description="A dynamic feed, e.g. using RSS or ATOM"\n+    <cache:ruleset\n+        for="plone.restapi.services.querystring.get.QuerystringGet"\n+        ruleset="plone.content.dynamic"\n         />\n-\n-    <cache:rulesetType\n-        name="plone.content.dynamic"\n-        title="Dynamic views, like collections, searches, ..."\n-        description="A public-facing view for a contents that is collected dynamically from the whole site."\n+    <cache:ruleset\n+        for="plone.restapi.services.search.get.SearchGet"\n+        ruleset="plone.content.dynamic"\n         />\n \n-    <!-- Default caching ruleset assignments\n-         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n-\n-    <!-- CMF filesystem (skin layer) files and images -->\n-    <cache:ruleset ruleset="plone.resource" for="Products.CMFCore.FSFile.FSFile" />\n-    <cache:ruleset ruleset="plone.resource" for="Products.CMFCore.FSImage.FSImage" />\n-\n-    <!-- OFS (in-ZODB) files, images -->\n-    <cache:ruleset ruleset="plone.resource" for="OFS.Image.File" />\n-\n-    <!-- Automatically purge these always -->\n-    <class class="OFS.Image.File">\n-        <implements interface="z3c.caching.interfaces.IPurgeable" />\n-    </class>\n-\n-\n-    <!-- Zope resources (including those in resource directories) -->\n-    <cache:ruleset ruleset="plone.resource" for="zope.browserresource.interfaces.IResource" />\n-\n-    <!-- These rely on the ContentItemLookup delegation -->\n-    <cache:ruleset ruleset="plone.content.itemView"   for="plone.dexterity.interfaces.IDexterityItem" />\n-    <cache:ruleset ruleset="plone.content.folderView" for="plone.dexterity.interfaces.IDexterityContainer" />\n-\n-\n-    <!-- These rely on the ContentItemLookup delegation -->\n-    <cache:ruleset ruleset="plone.content.file"   for="plone.namedfile.browser.Download" />\n-    <cache:ruleset ruleset="plone.content.file" for="plone.namedfile.scaling.ImageScale" />\n-\n-    <!-- plone.restapi content -->\n-    <configure zcml:condition="installed plone.restapi">\n-\n-        <include package="plone.restapi" />\n-\n-        <cache:ruleset ruleset="plone.content.itemView" for="plone.restapi.services.discussion.conversation.CommentsGet" />\n-\n-        <cache:ruleset ruleset="plone.content.dynamic" for="plone.restapi.services.actions.get.ActionsGet" />\n-        <cache:ruleset ruleset="plone.content.dynamic" for="plone.restapi.services.breadcrumbs.get.BreadcrumbsGet" />\n-        <cache:ruleset ruleset="plone.content.dynamic" for="plone.restapi.services.content.get.ContentGet" />\n-        <cache:ruleset ruleset="plone.content.dynamic" for="plone.restapi.services.multilingual.pam.TranslationInfo" />\n-        <cache:ruleset ruleset="plone.content.dynamic" for="plone.restapi.services.navigation.get.NavigationGet" />\n-        <cache:ruleset ruleset="plone.content.dynamic" for="plone.restapi.services.querystring.get.QuerystringGet" />\n-        <cache:ruleset ruleset="plone.content.dynamic" for="plone.restapi.services.search.get.SearchGet" />\n-\n-    </configure>\n+  </configure>\n \n-    <!-- Paths to purge -->\n+  <!-- Paths to purge -->\n \n-    <!-- Standard CMF content -->\n-    <adapter factory=".purge.ContentPurgePaths" name="plone.content" />\n+  <!-- Standard CMF content -->\n+  <adapter\n+      factory=".purge.ContentPurgePaths"\n+      name="plone.content"\n+      />\n \n-    <!-- Discussion items -->\n-    <adapter factory=".purge.DiscussionItemPurgePaths" name="plone.discussion" />\n+  <!-- Discussion items -->\n+  <adapter\n+      factory=".purge.DiscussionItemPurgePaths"\n+      name="plone.discussion"\n+      />\n \n-    <!-- Image scales & file download paths -->\n-    <adapter factory=".purge.ScalesPurgePaths" name="plone.files" />\n+  <!-- Image scales & file download paths -->\n+  <adapter\n+      factory=".purge.ScalesPurgePaths"\n+      name="plone.files"\n+      />\n \n </configure>\ndiff --git a/plone/app/caching/configure.zcml b/plone/app/caching/configure.zcml\nindex 9f9b1fc..c2e13fe 100644\n--- a/plone/app/caching/configure.zcml\n+++ b/plone/app/caching/configure.zcml\n@@ -1,49 +1,55 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n-    i18n_domain="plone">\n-\n-    <include package="z3c.zcmlhook" file="meta.zcml" />\n-\n-    <include package="plone.caching" />\n-    <include package="plone.cachepurging" />\n-    <include package="plone.app.registry" />\n-    <include package="plone.memoize" />\n-    <include package="plone.protect" />\n-\n-    <include package=".browser" />\n-    <include package=".operations" />\n-    <include file="profiles.zcml" />\n-\n-    <zcml:customAction\n-        handler=".setuphandlers.enableExplicitMode"\n-        order="1000000"\n-        />\n-\n-    <!-- Default caching configuration -->\n-    <include file="caching.zcml" />\n-\n-    <!-- Lookup for content item views and page template resources -->\n-    <adapter\n-        for="zope.publisher.interfaces.browser.IBrowserView *"\n-        factory=".lookup.ContentItemLookup"\n-        />\n-    <adapter\n-        for="zope.pagetemplate.interfaces.IPageTemplate *"\n-        factory=".lookup.ContentItemLookup"\n-        />\n-\n-    <!-- Purging -->\n-    <subscriber handler=".purge.purgeOnModified" />\n-    <subscriber handler=".purge.purgeOnMovedOrRemoved" />\n-\n-    <!-- ILastModified adapters -->\n-    <adapter factory=".lastmodified.PageTemplateDelegateLastModified" />\n-    <adapter factory=".lastmodified.FSPageTemplateDelegateLastModified" />\n-    <adapter factory=".lastmodified.OFSFileLastModified" />\n-    <adapter factory=".lastmodified.FSObjectLastModified" />\n-    <adapter factory=".lastmodified.CatalogableDublinCoreLastModified" />\n-    <adapter factory=".lastmodified.DCTimesLastModified" />\n-    <adapter factory=".lastmodified.ResourceLastModified" />\n+    i18n_domain="plone"\n+    >\n+\n+  <include\n+      package="z3c.zcmlhook"\n+      file="meta.zcml"\n+      />\n+\n+  <include package="plone.caching" />\n+  <include package="plone.cachepurging" />\n+  <include package="plone.app.registry" />\n+  <include package="plone.memoize" />\n+  <include package="plone.protect" />\n+\n+  <include package=".browser" />\n+  <include package=".operations" />\n+  <include file="profiles.zcml" />\n+\n+  <zcml:customAction\n+      handler=".setuphandlers.enableExplicitMode"\n+      order="1000000"\n+      />\n+\n+  <!-- Default caching configuration -->\n+  <include file="caching.zcml" />\n+\n+  <!-- Lookup for content item views and page template resources -->\n+  <adapter\n+      factory=".lookup.ContentItemLookup"\n+      for="zope.publisher.interfaces.browser.IBrowserView\n+           *"\n+      />\n+  <adapter\n+      factory=".lookup.ContentItemLookup"\n+      for="zope.pagetemplate.interfaces.IPageTemplate\n+           *"\n+      />\n+\n+  <!-- Purging -->\n+  <subscriber handler=".purge.purgeOnModified" />\n+  <subscriber handler=".purge.purgeOnMovedOrRemoved" />\n+\n+  <!-- ILastModified adapters -->\n+  <adapter factory=".lastmodified.PageTemplateDelegateLastModified" />\n+  <adapter factory=".lastmodified.FSPageTemplateDelegateLastModified" />\n+  <adapter factory=".lastmodified.OFSFileLastModified" />\n+  <adapter factory=".lastmodified.FSObjectLastModified" />\n+  <adapter factory=".lastmodified.CatalogableDublinCoreLastModified" />\n+  <adapter factory=".lastmodified.DCTimesLastModified" />\n+  <adapter factory=".lastmodified.ResourceLastModified" />\n \n </configure>\ndiff --git a/plone/app/caching/operations/configure.zcml b/plone/app/caching/operations/configure.zcml\nindex a142fe3..f07de6f 100644\n--- a/plone/app/caching/operations/configure.zcml\n+++ b/plone/app/caching/operations/configure.zcml\n@@ -1,49 +1,119 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n-    i18n_domain="plone.app.caching">\n+    i18n_domain="plone.app.caching"\n+    >\n \n-    <include package="plone.caching" />\n-    <include package="plone.app.registry" />\n+  <include package="plone.caching" />\n+  <include package="plone.app.registry" />\n \n-    <!-- Caching operations\n+  <!-- Caching operations\n          ~~~~~~~~~~~~~~~~~~ -->\n \n-    <adapter   factory=".default.StrongCaching"         name="plone.app.caching.strongCaching" />\n-    <utility component=".default.StrongCaching"         name="plone.app.caching.strongCaching" />\n+  <adapter\n+      factory=".default.StrongCaching"\n+      name="plone.app.caching.strongCaching"\n+      />\n+  <utility\n+      name="plone.app.caching.strongCaching"\n+      component=".default.StrongCaching"\n+      />\n \n-    <adapter   factory=".default.ModerateCaching"       name="plone.app.caching.moderateCaching" />\n-    <utility component=".default.ModerateCaching"       name="plone.app.caching.moderateCaching" />\n+  <adapter\n+      factory=".default.ModerateCaching"\n+      name="plone.app.caching.moderateCaching"\n+      />\n+  <utility\n+      name="plone.app.caching.moderateCaching"\n+      component=".default.ModerateCaching"\n+      />\n \n-    <adapter   factory=".default.WeakCaching"           name="plone.app.caching.weakCaching" />\n-    <utility component=".default.WeakCaching"           name="plone.app.caching.weakCaching" />\n+  <adapter\n+      factory=".default.WeakCaching"\n+      name="plone.app.caching.weakCaching"\n+      />\n+  <utility\n+      name="plone.app.caching.weakCaching"\n+      component=".default.WeakCaching"\n+      />\n \n-    <adapter   factory=".default.TerseCaching"          name="plone.app.caching.terseCaching" />\n-    <utility component=".default.TerseCaching"          name="plone.app.caching.terseCaching" />\n+  <adapter\n+      factory=".default.TerseCaching"\n+      name="plone.app.caching.terseCaching"\n+      />\n+  <utility\n+      name="plone.app.caching.terseCaching"\n+      component=".default.TerseCaching"\n+      />\n \n-    <adapter   factory=".default.NoCaching"             name="plone.app.caching.noCaching" />\n-    <utility component=".default.NoCaching"             name="plone.app.caching.noCaching" />\n+  <adapter\n+      factory=".default.NoCaching"\n+      name="plone.app.caching.noCaching"\n+      />\n+  <utility\n+      name="plone.app.caching.noCaching"\n+      component=".default.NoCaching"\n+      />\n \n-    <!-- Uncomment to show the "Generic caching" in the UI (also see profiles/default/registry/generic.xml)\n+  <!-- Uncomment to show the "Generic caching" in the UI (also see profiles/default/registry/generic.xml)\n     <adapter   factory=".default.BaseCaching"           name="plone.app.caching.baseCaching" />\n     <utility component=".default.BaseCaching"           name="plone.app.caching.baseCaching" />\n     -->\n \n-    <!-- RAM cache storage: a transformation at the very end of the chain -->\n-    <adapter factory=".ramcache.Store"                  name="plone.app.caching.operations.ramcache" />\n-\n-    <!-- ETag components -->\n-    <adapter factory=".etags.UserID"                    name="userid" />\n-    <adapter factory=".etags.Roles"                     name="roles" />\n-    <adapter factory=".etags.Language"                  name="language" />\n-    <adapter factory=".etags.UserLanguage"              name="userLanguage" />\n-    <adapter factory=".etags.LastModified"              name="lastModified" />\n-    <adapter factory=".etags.CatalogCounter"            name="catalogCounter" />\n-    <adapter factory=".etags.ObjectLocked"              name="locked" />\n-    <adapter factory=".etags.Skin"                      name="skin" />\n-    <adapter factory=".etags.ResourceRegistries"        name="resourceRegistries" />\n-    <adapter factory=".etags.AnonymousOrRandom"         name="anonymousOrRandom" />\n-    <adapter factory=".etags.CopyCookie"                name="copy" />\n-    <adapter factory=".etags.Layout"                    name="layout" />\n+  <!-- RAM cache storage: a transformation at the very end of the chain -->\n+  <adapter\n+      factory=".ramcache.Store"\n+      name="plone.app.caching.operations.ramcache"\n+      />\n+\n+  <!-- ETag components -->\n+  <adapter\n+      factory=".etags.UserID"\n+      name="userid"\n+      />\n+  <adapter\n+      factory=".etags.Roles"\n+      name="roles"\n+      />\n+  <adapter\n+      factory=".etags.Language"\n+      name="language"\n+      />\n+  <adapter\n+      factory=".etags.UserLanguage"\n+      name="userLanguage"\n+      />\n+  <adapter\n+      factory=".etags.LastModified"\n+      name="lastModified"\n+      />\n+  <adapter\n+      factory=".etags.CatalogCounter"\n+      name="catalogCounter"\n+      />\n+  <adapter\n+      factory=".etags.ObjectLocked"\n+      name="locked"\n+      />\n+  <adapter\n+      factory=".etags.Skin"\n+      name="skin"\n+      />\n+  <adapter\n+      factory=".etags.ResourceRegistries"\n+      name="resourceRegistries"\n+      />\n+  <adapter\n+      factory=".etags.AnonymousOrRandom"\n+      name="anonymousOrRandom"\n+      />\n+  <adapter\n+      factory=".etags.CopyCookie"\n+      name="copy"\n+      />\n+  <adapter\n+      factory=".etags.Layout"\n+      name="layout"\n+      />\n \n </configure>\ndiff --git a/plone/app/caching/operations/default.py b/plone/app/caching/operations/default.py\nindex 06a04eb..d3fbbbb 100644\n--- a/plone/app/caching/operations/default.py\n+++ b/plone/app/caching/operations/default.py\n@@ -181,7 +181,7 @@ def modifyResponse(self, rulename, response, class_=None):\n         if cacheStop(self.request, rulename):\n             # only stop with etags if configured\n             if etags:\n-                etag = "{}{}".format(time.time(), random.randint(0, 1000))\n+                etag = f"{time.time()}{random.randint(0, 1000)}"\n                 return setCacheHeaders(\n                     self.published,\n                     self.request,\n@@ -330,15 +330,15 @@ class StrongCaching(BaseCaching):\n class TerseCaching(BaseCaching):\n     """Terse caching operation."""\n \n-    title = _(u"Terse caching")\n+    title = _("Terse caching")\n     description = _(\n-        u"Cache in browser (default: 10s) and proxy (default: 1 min). "\n-        u"Keep very short in cache to buffer hi-load scenarios ",\n-        u"Use for very dynamic content, like collecting data from "\n-        u"the whole portal. "\n-        u"Temporary outdated is less important than performance."\n-        u"Reduce in-cache time to just 3-10 seconds to only buffer peak load "\n-        u"if behind a proxy",\n+        "Cache in browser (default: 10s) and proxy (default: 1 min). "\n+        "Keep very short in cache to buffer hi-load scenarios ",\n+        "Use for very dynamic content, like collecting data from "\n+        "the whole portal. "\n+        "Temporary outdated is less important than performance."\n+        "Reduce in-cache time to just 3-10 seconds to only buffer peak load "\n+        "if behind a proxy",\n     )\n     prefix = "plone.app.caching.terseCaching"\n     sort = 4\ndiff --git a/plone/app/caching/operations/etags.py b/plone/app/caching/operations/etags.py\nindex 1faa8e7..0cbf70a 100644\n--- a/plone/app/caching/operations/etags.py\n+++ b/plone/app/caching/operations/etags.py\n@@ -13,13 +13,16 @@\n from zope.interface import implementer\n from zope.interface import Interface\n \n+\n try:\n     from Products.CMFPlone.resources.utils import get_override_directory\n     from Products.CMFPlone.resources.utils import PRODUCTION_RESOURCE_DIRECTORY\n except ImportError:\n     # Plone < 6\n     from Products.CMFPlone.resources.browser.combine import get_override_directory\n-    from Products.CMFPlone.resources.browser.combine import PRODUCTION_RESOURCE_DIRECTORY\n+    from Products.CMFPlone.resources.browser.combine import (\n+        PRODUCTION_RESOURCE_DIRECTORY,\n+    )\n \n import random\n import time\n@@ -213,7 +216,7 @@ def __call__(self):\n             return None\n         if bool(tool.isAnonymousUser()):\n             return None\n-        return "{}{}".format(time.time(), random.randint(0, 1000))\n+        return f"{time.time()}{random.randint(0, 1000)}"\n \n \n @implementer(IETagValue)\ndiff --git a/plone/app/caching/operations/utils.py b/plone/app/caching/operations/utils.py\nindex c8a500f..274233b 100644\n--- a/plone/app/caching/operations/utils.py\n+++ b/plone/app/caching/operations/utils.py\n@@ -746,12 +746,10 @@ def getRAMCacheKey(request, etag=None, lastModified=None):\n     optional but in most cases that are worth caching in RAM, the etag\n     is needed to ensure the key changes when the resource view changes.\n     """\n-\n-    resourceKey = "{}{}?{}".format(\n-        request.get("SERVER_URL", ""),\n-        request.get("PATH_INFO", ""),\n-        request.get("QUERY_STRING", ""),\n-    )\n+    server_url = request.get("SERVER_URL", "")\n+    path_info = request.get("PATH_INFO", "")\n+    query_string = request.get("QUERY_STRING", "")\n+    resourceKey = f"{server_url}{path_info}?{query_string}"\n     if etag:\n         resourceKey = "|" + etag + "||" + resourceKey\n     if lastModified:\ndiff --git a/plone/app/caching/profiles.zcml b/plone/app/caching/profiles.zcml\nindex 6840eab..a8d1d3f 100644\n--- a/plone/app/caching/profiles.zcml\n+++ b/plone/app/caching/profiles.zcml\n@@ -1,49 +1,52 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-    <genericsetup:registerProfile\n-        name="default"\n-        title="HTTP caching support"\n-        directory="profiles/default"\n-        description="Installs plone.app.caching"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        />\n+  <genericsetup:registerProfile\n+      name="default"\n+      title="HTTP caching support"\n+      description="Installs plone.app.caching"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/default"\n+      />\n+\n+  <genericsetup:registerProfile\n+      name="v2"\n+      title="Upgrade plone.app.caching to v2 with terse caching"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"\n+      directory="profiles/default"\n+      />\n+\n+  <genericsetup:importStep\n+      name="plone.app.caching"\n+      title="Plone caching - additional installation steps"\n+      description="Imperative configuration for plone.app.caching"\n+      handler=".setuphandlers.importVarious"\n+      />\n \n-    <genericsetup:registerProfile\n-        name="v2"\n+  <genericsetup:upgradeSteps\n+      profile="plone.app.caching:default"\n+      source="1"\n+      destination="2"\n+      >\n+    <genericsetup:upgradeDepends\n         title="Upgrade plone.app.caching to v2 with terse caching"\n-        directory="profiles/default"\n-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n+        import_profile="plone.app.caching:v2"\n         />\n+  </genericsetup:upgradeSteps>\n \n-    <genericsetup:importStep\n-        name="plone.app.caching"\n-        title="Plone caching - additional installation steps"\n-        description="Imperative configuration for plone.app.caching"\n-        handler=".setuphandlers.importVarious"\n+  <genericsetup:upgradeSteps\n+      profile="plone.app.caching:default"\n+      source="2"\n+      destination="3"\n+      >\n+    <genericsetup:upgradeDepends\n+        title="Upgrade plone.app.caching icon"\n+        import_steps="controlpanel"\n         />\n-\n-    <genericsetup:upgradeSteps\n-        source="1"\n-        destination="2"\n-        profile="plone.app.caching:default">\n-        <genericsetup:upgradeDepends\n-            title="Upgrade plone.app.caching to v2 with terse caching"\n-            import_profile="plone.app.caching:v2"\n-            />\n-    </genericsetup:upgradeSteps>\n-\n-   <genericsetup:upgradeSteps\n-        source="2"\n-        destination="3"\n-        profile="plone.app.caching:default">\n-        <genericsetup:upgradeDepends\n-            title="Upgrade plone.app.caching icon"\n-            import_steps="controlpanel"\n-            />\n-    </genericsetup:upgradeSteps>\n+  </genericsetup:upgradeSteps>\n \n </configure>\ndiff --git a/plone/app/caching/profiles/default/controlpanel.xml b/plone/app/caching/profiles/default/controlpanel.xml\nindex 184245c..b7f67cf 100644\n--- a/plone/app/caching/profiles/default/controlpanel.xml\n+++ b/plone/app/caching/profiles/default/controlpanel.xml\n@@ -1,20 +1,20 @@\n <?xml version="1.0"?>\n-<object\n-    name="portal_controlpanel"\n-    xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-    i18n:domain="plone">\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        name="portal_controlpanel"\n+        i18n:domain="plone"\n+>\n \n-    <configlet\n-        title="Caching"\n-        action_id="plone.app.caching"\n-        appId="plone.app.caching"\n-        category="plone-advanced"\n-        condition_expr=""\n-        icon_expr="string:speedometer2"\n-        url_expr="string:${portal_url}/@@caching-controlpanel"\n-        visible="True"\n-        i18n:attributes="title">\n-            <permission>Manage portal</permission>\n- </configlet>\n+  <configlet action_id="plone.app.caching"\n+             appId="plone.app.caching"\n+             category="plone-advanced"\n+             condition_expr=""\n+             icon_expr="string:speedometer2"\n+             title="Caching"\n+             url_expr="string:${portal_url}/@@caching-controlpanel"\n+             visible="True"\n+             i18n:attributes="title"\n+  >\n+    <permission>Manage portal</permission>\n+  </configlet>\n \n </object>\ndiff --git a/plone/app/caching/profiles/default/metadata.xml b/plone/app/caching/profiles/default/metadata.xml\nindex 8260341..226b480 100644\n--- a/plone/app/caching/profiles/default/metadata.xml\n+++ b/plone/app/caching/profiles/default/metadata.xml\n@@ -1,6 +1,6 @@\n <metadata>\n-    <version>3</version>\n-    <dependencies>\n-        <dependency>profile-plone.app.registry:default</dependency>\n-    </dependencies>\n+  <version>3</version>\n+  <dependencies>\n+    <dependency>profile-plone.app.registry:default</dependency>\n+  </dependencies>\n </metadata>\ndiff --git a/plone/app/caching/profiles/default/registry.xml b/plone/app/caching/profiles/default/registry.xml\nindex 6dbbf1c..63957df 100644\n--- a/plone/app/caching/profiles/default/registry.xml\n+++ b/plone/app/caching/profiles/default/registry.xml\n@@ -1,52 +1,52 @@\n <registry>\n \n-    <!-- Basic cache settings from plone.caching -->\n-    <records interface="plone.caching.interfaces.ICacheSettings" />\n+  <!-- Basic cache settings from plone.caching -->\n+  <records interface="plone.caching.interfaces.ICacheSettings" />\n \n-    <!-- Purge settings -->\n-    <records interface="plone.cachepurging.interfaces.ICachePurgingSettings" />\n+  <!-- Purge settings -->\n+  <records interface="plone.cachepurging.interfaces.ICachePurgingSettings" />\n \n-    <!-- Plone-specific settings from this package -->\n-    <records interface="plone.app.caching.interfaces.IPloneCacheSettings" />\n+  <!-- Plone-specific settings from this package -->\n+  <records interface="plone.app.caching.interfaces.IPloneCacheSettings" />\n \n-    <!-- Default content type/template mappings\n+  <!-- Default content type/template mappings\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n \n \n-    <record name="plone.app.caching.interfaces.IPloneCacheSettings.templateRulesetMapping">\n-        <value purge="False">\n-          <element key="search_rss">plone.content.feed</element>\n-          <element key="RSS">plone.content.feed</element>\n-          <element key="atom.xml">plone.content.feed</element>\n-          <element key="rss.xml">plone.content.feed</element>\n-          <element key="itunes.xml">plone.content.feed</element>\n-          <element key="sitemap">plone.content.itemView</element>\n-          <element key="accessibility-info">plone.content.itemView</element>\n-          <element key="file_view">plone.content.itemView</element>\n-          <element key="image_view">plone.content.itemView</element>\n-          <element key="image_view_fullscreen">plone.content.itemView</element>\n-        </value>\n-    </record>\n-\n-    <record name="plone.app.caching.interfaces.IPloneCacheSettings.purgedContentTypes">\n-        <value purge="False">\n-          <element>File</element>\n-          <element>Image</element>\n-          <element>News Item</element>\n-        </value>\n-    </record>\n-\n-    <!-- Settings for default operations\n+  <record name="plone.app.caching.interfaces.IPloneCacheSettings.templateRulesetMapping">\n+    <value purge="False">\n+      <element key="search_rss">plone.content.feed</element>\n+      <element key="RSS">plone.content.feed</element>\n+      <element key="atom.xml">plone.content.feed</element>\n+      <element key="rss.xml">plone.content.feed</element>\n+      <element key="itunes.xml">plone.content.feed</element>\n+      <element key="sitemap">plone.content.itemView</element>\n+      <element key="accessibility-info">plone.content.itemView</element>\n+      <element key="file_view">plone.content.itemView</element>\n+      <element key="image_view">plone.content.itemView</element>\n+      <element key="image_view_fullscreen">plone.content.itemView</element>\n+    </value>\n+  </record>\n+\n+  <record name="plone.app.caching.interfaces.IPloneCacheSettings.purgedContentTypes">\n+    <value purge="False">\n+      <element>File</element>\n+      <element>Image</element>\n+      <element>News Item</element>\n+    </value>\n+  </record>\n+\n+  <!-- Settings for default operations\n          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->\n \n-    <!-- Chain -->\n-    <record name="plone.caching.operations.chain.operations">\n-        <field type="plone.registry.field.List">\n-            <title>Operations</title>\n-            <description>A list of operations to call, in order</description>\n-            <value_type type="plone.registry.field.DottedName" />\n-        </field>\n-        <value></value>\n-    </record>\n+  <!-- Chain -->\n+  <record name="plone.caching.operations.chain.operations">\n+    <field type="plone.registry.field.List">\n+      <title>Operations</title>\n+      <description>A list of operations to call, in order</description>\n+      <value_type type="plone.registry.field.DottedName" />\n+    </field>\n+    <value />\n+  </record>\n \n </registry>\ndiff --git a/plone/app/caching/profiles/default/registry/generic.xml b/plone/app/caching/profiles/default/registry/generic.xml\nindex 8c5bfd2..96f9668 100644\n--- a/plone/app/caching/profiles/default/registry/generic.xml\n+++ b/plone/app/caching/profiles/default/registry/generic.xml\n@@ -1,5 +1,5 @@\n <registry>\n-    <!-- Uncomment if showing "Generic caching" in the UI.\n+  <!-- Uncomment if showing "Generic caching" in the UI.\n          Also see operations/configure.zcml\n \n     <record name="plone.app.caching.baseCaching.maxage">\ndiff --git a/plone/app/caching/profiles/default/registry/moderate.xml b/plone/app/caching/profiles/default/registry/moderate.xml\nindex ed68cb0..9efc138 100644\n--- a/plone/app/caching/profiles/default/registry/moderate.xml\n+++ b/plone/app/caching/profiles/default/registry/moderate.xml\n@@ -1,53 +1,53 @@\n <registry>\n-    <!-- Moderate caching -->\n-    <record name="plone.app.caching.moderateCaching.smaxage">\n-        <field type="plone.registry.field.Int">\n-            <title>Shared maximum age</title>\n-            <description>Time (in seconds) to cache the response in the caching proxy</description>\n-            <required>False</required>\n-        </field>\n-        <value>86400</value>\n-    </record>\n-    <record name="plone.app.caching.moderateCaching.etags">\n-        <field type="plone.registry.field.Tuple">\n-            <title>ETags</title>\n-            <description>A list of ETag component names to include</description>\n-            <value_type type="plone.registry.field.ASCIILine" />\n-            <required>False</required>\n-        </field>\n-        <value>\n-        </value>\n-    </record>\n-    <record name="plone.app.caching.moderateCaching.lastModified">\n-        <field type="plone.registry.field.Bool">\n-            <title>Last-modified validation</title>\n-            <description>Turn on Last-Modified headers</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-    <record name="plone.app.caching.moderateCaching.ramCache">\n-        <field type="plone.registry.field.Bool">\n-            <title>RAM cache</title>\n-            <description>Turn on caching in Zope memory</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-    <record name="plone.app.caching.moderateCaching.vary">\n-        <field type="plone.registry.field.ASCIILine">\n-            <title>Vary</title>\n-            <description>Name(s) of HTTP headers that must match for the caching proxy to return a cached response</description>\n-            <required>False</required>\n-        </field>\n-        <value></value>\n-    </record>\n-    <record name="plone.app.caching.moderateCaching.anonOnly">\n-        <field type="plone.registry.field.Bool">\n-            <title>Only cache for anonymous users</title>\n-            <description>Ensure logging users always get a fresh page. Note that if you are caching pages in a proxy cache, you\'ll still need to use a Vary response header to keep anonymous and authenticated content separate.</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n+  <!-- Moderate caching -->\n+  <record name="plone.app.caching.moderateCaching.smaxage">\n+    <field type="plone.registry.field.Int">\n+      <title>Shared maximum age</title>\n+      <description>Time (in seconds) to cache the response in the caching proxy</description>\n+      <required>False</required>\n+    </field>\n+    <value>86400</value>\n+  </record>\n+  <record name="plone.app.caching.moderateCaching.etags">\n+    <field type="plone.registry.field.Tuple">\n+      <title>ETags</title>\n+      <description>A list of ETag component names to include</description>\n+      <value_type type="plone.registry.field.ASCIILine" />\n+      <required>False</required>\n+    </field>\n+    <value>\n+    </value>\n+  </record>\n+  <record name="plone.app.caching.moderateCaching.lastModified">\n+    <field type="plone.registry.field.Bool">\n+      <title>Last-modified validation</title>\n+      <description>Turn on Last-Modified headers</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n+  <record name="plone.app.caching.moderateCaching.ramCache">\n+    <field type="plone.registry.field.Bool">\n+      <title>RAM cache</title>\n+      <description>Turn on caching in Zope memory</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n+  <record name="plone.app.caching.moderateCaching.vary">\n+    <field type="plone.registry.field.ASCIILine">\n+      <title>Vary</title>\n+      <description>Name(s) of HTTP headers that must match for the caching proxy to return a cached response</description>\n+      <required>False</required>\n+    </field>\n+    <value />\n+  </record>\n+  <record name="plone.app.caching.moderateCaching.anonOnly">\n+    <field type="plone.registry.field.Bool">\n+      <title>Only cache for anonymous users</title>\n+      <description>Ensure logging users always get a fresh page. Note that if you are caching pages in a proxy cache, you\'ll still need to use a Vary response header to keep anonymous and authenticated content separate.</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n </registry>\ndiff --git a/plone/app/caching/profiles/default/registry/strong.xml b/plone/app/caching/profiles/default/registry/strong.xml\nindex c7e4df9..059d3e2 100644\n--- a/plone/app/caching/profiles/default/registry/strong.xml\n+++ b/plone/app/caching/profiles/default/registry/strong.xml\n@@ -1,61 +1,61 @@\n <registry>\n-    <!-- Strong caching -->\n-    <record name="plone.app.caching.strongCaching.maxage">\n-        <field type="plone.registry.field.Int">\n-            <title>Maximum age</title>\n-            <description>Time (in seconds) to cache the response in the browser or caching proxy</description>\n-            <required>False</required>\n-        </field>\n-        <value>86400</value>\n-    </record>\n-    <record name="plone.app.caching.strongCaching.smaxage">\n-        <field type="plone.registry.field.Int">\n-            <title>Shared maximum age</title>\n-            <description>Time (in seconds) to cache the response in the caching proxy. Leave blank to use value from "Maximum age" field.</description>\n-            <required>False</required>\n-        </field>\n-        <value></value>\n-    </record>\n-    <record name="plone.app.caching.strongCaching.etags">\n-        <field type="plone.registry.field.Tuple">\n-            <title>ETags</title>\n-            <description>A list of ETag component names to include</description>\n-            <value_type type="plone.registry.field.ASCIILine" />\n-            <required>False</required>\n-        </field>\n-        <value>\n-        </value>\n-    </record>\n-    <record name="plone.app.caching.strongCaching.lastModified">\n-        <field type="plone.registry.field.Bool">\n-            <title>Last-modified validation</title>\n-            <description>Turn on Last-Modified headers</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-    <record name="plone.app.caching.strongCaching.ramCache">\n-        <field type="plone.registry.field.Bool">\n-            <title>RAM cache</title>\n-            <description>Turn on caching in Zope memory</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-    <record name="plone.app.caching.strongCaching.vary">\n-        <field type="plone.registry.field.ASCIILine">\n-            <title>Vary</title>\n-            <description>Name(s) of HTTP headers that must match for the caching proxy to return a cached response</description>\n-            <required>False</required>\n-        </field>\n-        <value></value>\n-    </record>\n-    <record name="plone.app.caching.strongCaching.anonOnly">\n-        <field type="plone.registry.field.Bool">\n-            <title>Only cache for anonymous users</title>\n-            <description>Ensure logging users always get a fresh page. Note that if you are caching pages in a proxy cache, you\'ll still need to use a Vary response header to keep anonymous and authenticated content separate.</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n+  <!-- Strong caching -->\n+  <record name="plone.app.caching.strongCaching.maxage">\n+    <field type="plone.registry.field.Int">\n+      <title>Maximum age</title>\n+      <description>Time (in seconds) to cache the response in the browser or caching proxy</description>\n+      <required>False</required>\n+    </field>\n+    <value>86400</value>\n+  </record>\n+  <record name="plone.app.caching.strongCaching.smaxage">\n+    <field type="plone.registry.field.Int">\n+      <title>Shared maximum age</title>\n+      <description>Time (in seconds) to cache the response in the caching proxy. Leave blank to use value from "Maximum age" field.</description>\n+      <required>False</required>\n+    </field>\n+    <value />\n+  </record>\n+  <record name="plone.app.caching.strongCaching.etags">\n+    <field type="plone.registry.field.Tuple">\n+      <title>ETags</title>\n+      <description>A list of ETag component names to include</description>\n+      <value_type type="plone.registry.field.ASCIILine" />\n+      <required>False</required>\n+    </field>\n+    <value>\n+    </value>\n+  </record>\n+  <record name="plone.app.caching.strongCaching.lastModified">\n+    <field type="plone.registry.field.Bool">\n+      <title>Last-modified validation</title>\n+      <description>Turn on Last-Modified headers</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n+  <record name="plone.app.caching.strongCaching.ramCache">\n+    <field type="plone.registry.field.Bool">\n+      <title>RAM cache</title>\n+      <description>Turn on caching in Zope memory</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n+  <record name="plone.app.caching.strongCaching.vary">\n+    <field type="plone.registry.field.ASCIILine">\n+      <title>Vary</title>\n+      <description>Name(s) of HTTP headers that must match for the caching proxy to return a cached response</description>\n+      <required>False</required>\n+    </field>\n+    <value />\n+  </record>\n+  <record name="plone.app.caching.strongCaching.anonOnly">\n+    <field type="plone.registry.field.Bool">\n+      <title>Only cache for anonymous users</title>\n+      <description>Ensure logging users always get a fresh page. Note that if you are caching pages in a proxy cache, you\'ll still need to use a Vary response header to keep anonymous and authenticated content separate.</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n </registry>\ndiff --git a/plone/app/caching/profiles/default/registry/terse.xml b/plone/app/caching/profiles/default/registry/terse.xml\nindex adae5bb..fd2674e 100644\n--- a/plone/app/caching/profiles/default/registry/terse.xml\n+++ b/plone/app/caching/profiles/default/registry/terse.xml\n@@ -1,61 +1,61 @@\n <registry>\n-    <!-- Terse caching -->\n-    <record name="plone.app.caching.terseCaching.maxage">\n-        <field type="plone.registry.field.Int">\n-            <title>Maximum age</title>\n-            <description>Time (in seconds) to cache the response in the browser</description>\n-            <required>False</required>\n-        </field>\n-        <value>10</value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.smaxage">\n-        <field type="plone.registry.field.Int">\n-            <title>Shared maximum age</title>\n-            <description>Time (in seconds) to cache the response in the caching proxy</description>\n-            <required>False</required>\n-        </field>\n-        <value>60</value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.etags">\n-        <field type="plone.registry.field.Tuple">\n-            <title>ETags</title>\n-            <description>A list of ETag component names to include</description>\n-            <value_type type="plone.registry.field.ASCIILine" />\n-            <required>False</required>\n-        </field>\n-        <value>\n-        </value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.lastModified">\n-        <field type="plone.registry.field.Bool">\n-            <title>Last-modified validation</title>\n-            <description>Turn on Last-Modified headers</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.ramCache">\n-        <field type="plone.registry.field.Bool">\n-            <title>RAM cache</title>\n-            <description>Turn on caching in Zope memory</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.vary">\n-        <field type="plone.registry.field.ASCIILine">\n-            <title>Vary</title>\n-            <description>Name(s) of HTTP headers that must match for the caching proxy to return a cached response</description>\n-            <required>False</required>\n-        </field>\n-        <value></value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.anonOnly">\n-        <field type="plone.registry.field.Bool">\n-            <title>Only cache for anonymous users</title>\n-            <description>Ensure logging users always get a fresh page. Note that if you are caching pages in a proxy cache, you\'ll still need to use a Vary response header to keep anonymous and authenticated content separate.</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n+  <!-- Terse caching -->\n+  <record name="plone.app.caching.terseCaching.maxage">\n+    <field type="plone.registry.field.Int">\n+      <title>Maximum age</title>\n+      <description>Time (in seconds) to cache the response in the browser</description>\n+      <required>False</required>\n+    </field>\n+    <value>10</value>\n+  </record>\n+  <record name="plone.app.caching.terseCaching.smaxage">\n+    <field type="plone.registry.field.Int">\n+      <title>Shared maximum age</title>\n+      <description>Time (in seconds) to cache the response in the caching proxy</description>\n+      <required>False</required>\n+    </field>\n+    <value>60</value>\n+  </record>\n+  <record name="plone.app.caching.terseCaching.etags">\n+    <field type="plone.registry.field.Tuple">\n+      <title>ETags</title>\n+      <description>A list of ETag component names to include</description>\n+      <value_type type="plone.registry.field.ASCIILine" />\n+      <required>False</required>\n+    </field>\n+    <value>\n+    </value>\n+  </record>\n+  <record name="plone.app.caching.terseCaching.lastModified">\n+    <field type="plone.registry.field.Bool">\n+      <title>Last-modified validation</title>\n+      <description>Turn on Last-Modified headers</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n+  <record name="plone.app.caching.terseCaching.ramCache">\n+    <field type="plone.registry.field.Bool">\n+      <title>RAM cache</title>\n+      <description>Turn on caching in Zope memory</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n+  <record name="plone.app.caching.terseCaching.vary">\n+    <field type="plone.registry.field.ASCIILine">\n+      <title>Vary</title>\n+      <description>Name(s) of HTTP headers that must match for the caching proxy to return a cached response</description>\n+      <required>False</required>\n+    </field>\n+    <value />\n+  </record>\n+  <record name="plone.app.caching.terseCaching.anonOnly">\n+    <field type="plone.registry.field.Bool">\n+      <title>Only cache for anonymous users</title>\n+      <description>Ensure logging users always get a fresh page. Note that if you are caching pages in a proxy cache, you\'ll still need to use a Vary response header to keep anonymous and authenticated content separate.</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n </registry>\ndiff --git a/plone/app/caching/profiles/default/registry/weak.xml b/plone/app/caching/profiles/default/registry/weak.xml\nindex 674f819..3512f0c 100644\n--- a/plone/app/caching/profiles/default/registry/weak.xml\n+++ b/plone/app/caching/profiles/default/registry/weak.xml\n@@ -1,45 +1,45 @@\n <registry>\n-    <!-- Weak caching -->\n-    <record name="plone.app.caching.weakCaching.etags">\n-        <field type="plone.registry.field.Tuple">\n-            <title>ETags</title>\n-            <description>A list of ETag component names to include</description>\n-            <value_type type="plone.registry.field.ASCIILine" />\n-            <required>False</required>\n-        </field>\n-        <value>\n-        </value>\n-    </record>\n-    <record name="plone.app.caching.weakCaching.lastModified">\n-        <field type="plone.registry.field.Bool">\n-            <title>Last-modified validation</title>\n-            <description>Turn on Last-Modified headers</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-    <record name="plone.app.caching.weakCaching.ramCache">\n-        <field type="plone.registry.field.Bool">\n-            <title>RAM cache</title>\n-            <description>Turn on caching in Zope memory</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-    <record name="plone.app.caching.weakCaching.vary">\n-        <field type="plone.registry.field.ASCIILine">\n-            <title>Vary</title>\n-            <description>Name(s) of HTTP headers that must match for the caching proxy to return a cached response</description>\n-            <required>False</required>\n-        </field>\n-        <value></value>\n-    </record>\n-    <record name="plone.app.caching.weakCaching.anonOnly">\n-        <field type="plone.registry.field.Bool">\n-            <title>Only cache for anonymous users</title>\n-            <description>Ensure logging users always get a fresh page. Note that if you are caching pages in a proxy cache, you\'ll still need to use a Vary response header to keep anonymous and authenticated content separate.</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n+  <!-- Weak caching -->\n+  <record name="plone.app.caching.weakCaching.etags">\n+    <field type="plone.registry.field.Tuple">\n+      <title>ETags</title>\n+      <description>A list of ETag component names to include</description>\n+      <value_type type="plone.registry.field.ASCIILine" />\n+      <required>False</required>\n+    </field>\n+    <value>\n+    </value>\n+  </record>\n+  <record name="plone.app.caching.weakCaching.lastModified">\n+    <field type="plone.registry.field.Bool">\n+      <title>Last-modified validation</title>\n+      <description>Turn on Last-Modified headers</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n+  <record name="plone.app.caching.weakCaching.ramCache">\n+    <field type="plone.registry.field.Bool">\n+      <title>RAM cache</title>\n+      <description>Turn on caching in Zope memory</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n+  <record name="plone.app.caching.weakCaching.vary">\n+    <field type="plone.registry.field.ASCIILine">\n+      <title>Vary</title>\n+      <description>Name(s) of HTTP headers that must match for the caching proxy to return a cached response</description>\n+      <required>False</required>\n+    </field>\n+    <value />\n+  </record>\n+  <record name="plone.app.caching.weakCaching.anonOnly">\n+    <field type="plone.registry.field.Bool">\n+      <title>Only cache for anonymous users</title>\n+      <description>Ensure logging users always get a fresh page. Note that if you are caching pages in a proxy cache, you\'ll still need to use a Vary response header to keep anonymous and authenticated content separate.</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n </registry>\ndiff --git a/plone/app/caching/profiles/v2/registry/terse.xml b/plone/app/caching/profiles/v2/registry/terse.xml\nindex adae5bb..fd2674e 100644\n--- a/plone/app/caching/profiles/v2/registry/terse.xml\n+++ b/plone/app/caching/profiles/v2/registry/terse.xml\n@@ -1,61 +1,61 @@\n <registry>\n-    <!-- Terse caching -->\n-    <record name="plone.app.caching.terseCaching.maxage">\n-        <field type="plone.registry.field.Int">\n-            <title>Maximum age</title>\n-            <description>Time (in seconds) to cache the response in the browser</description>\n-            <required>False</required>\n-        </field>\n-        <value>10</value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.smaxage">\n-        <field type="plone.registry.field.Int">\n-            <title>Shared maximum age</title>\n-            <description>Time (in seconds) to cache the response in the caching proxy</description>\n-            <required>False</required>\n-        </field>\n-        <value>60</value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.etags">\n-        <field type="plone.registry.field.Tuple">\n-            <title>ETags</title>\n-            <description>A list of ETag component names to include</description>\n-            <value_type type="plone.registry.field.ASCIILine" />\n-            <required>False</required>\n-        </field>\n-        <value>\n-        </value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.lastModified">\n-        <field type="plone.registry.field.Bool">\n-            <title>Last-modified validation</title>\n-            <description>Turn on Last-Modified headers</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.ramCache">\n-        <field type="plone.registry.field.Bool">\n-            <title>RAM cache</title>\n-            <description>Turn on caching in Zope memory</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.vary">\n-        <field type="plone.registry.field.ASCIILine">\n-            <title>Vary</title>\n-            <description>Name(s) of HTTP headers that must match for the caching proxy to return a cached response</description>\n-            <required>False</required>\n-        </field>\n-        <value></value>\n-    </record>\n-    <record name="plone.app.caching.terseCaching.anonOnly">\n-        <field type="plone.registry.field.Bool">\n-            <title>Only cache for anonymous users</title>\n-            <description>Ensure logging users always get a fresh page. Note that if you are caching pages in a proxy cache, you\'ll still need to use a Vary response header to keep anonymous and authenticated content separate.</description>\n-            <required>False</required>\n-        </field>\n-        <value>False</value>\n-    </record>\n+  <!-- Terse caching -->\n+  <record name="plone.app.caching.terseCaching.maxage">\n+    <field type="plone.registry.field.Int">\n+      <title>Maximum age</title>\n+      <description>Time (in seconds) to cache the response in the browser</description>\n+      <required>False</required>\n+    </field>\n+    <value>10</value>\n+  </record>\n+  <record name="plone.app.caching.terseCaching.smaxage">\n+    <field type="plone.registry.field.Int">\n+      <title>Shared maximum age</title>\n+      <description>Time (in seconds) to cache the response in the caching proxy</description>\n+      <required>False</required>\n+    </field>\n+    <value>60</value>\n+  </record>\n+  <record name="plone.app.caching.terseCaching.etags">\n+    <field type="plone.registry.field.Tuple">\n+      <title>ETags</title>\n+      <description>A list of ETag component names to include</description>\n+      <value_type type="plone.registry.field.ASCIILine" />\n+      <required>False</required>\n+    </field>\n+    <value>\n+    </value>\n+  </record>\n+  <record name="plone.app.caching.terseCaching.lastModified">\n+    <field type="plone.registry.field.Bool">\n+      <title>Last-modified validation</title>\n+      <description>Turn on Last-Modified headers</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n+  <record name="plone.app.caching.terseCaching.ramCache">\n+    <field type="plone.registry.field.Bool">\n+      <title>RAM cache</title>\n+      <description>Turn on caching in Zope memory</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n+  <record name="plone.app.caching.terseCaching.vary">\n+    <field type="plone.registry.field.ASCIILine">\n+      <title>Vary</title>\n+      <description>Name(s) of HTTP headers that must match for the caching proxy to return a cached response</description>\n+      <required>False</required>\n+    </field>\n+    <value />\n+  </record>\n+  <record name="plone.app.caching.terseCaching.anonOnly">\n+    <field type="plone.registry.field.Bool">\n+      <title>Only cache for anonymous users</title>\n+      <description>Ensure logging users always get a fresh page. Note that if you are caching pages in a proxy cache, you\'ll still need to use a Vary response header to keep anonymous and authenticated content separate.</description>\n+      <required>False</required>\n+    </field>\n+    <value>False</value>\n+  </record>\n </registry>\ndiff --git a/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml b/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml\nindex e1b93a3..718d54e 100644\n--- a/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml\n+++ b/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml\n@@ -14,143 +14,143 @@\n \n   <!-- plone.content.itemView -->\n   <record name="plone.app.caching.moderateCaching.plone.content.itemView.etags">\n-      <field ref="plone.app.caching.moderateCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-          <element>locked</element>\n-          <element>resourceRegistries</element>\n-      </value>\n+    <field ref="plone.app.caching.moderateCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+      <element>locked</element>\n+      <element>resourceRegistries</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.itemView.ramCache">\n-      <field ref="plone.app.caching.moderateCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.moderateCaching.ramCache" />\n+    <value>True</value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.itemView.smaxage">\n-      <field ref="plone.app.caching.moderateCaching.smaxage" />\n-      <value>3600</value>\n+    <field ref="plone.app.caching.moderateCaching.smaxage" />\n+    <value>3600</value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.itemView.vary">\n-      <field ref="plone.app.caching.moderateCaching.vary" />\n-      <value>X-Anonymous</value>\n+    <field ref="plone.app.caching.moderateCaching.vary" />\n+    <value>X-Anonymous</value>\n   </record>\n \n \n \n   <!-- plone.content.folderView -->\n   <record name="plone.app.caching.moderateCaching.plone.content.folderView.etags">\n-      <field ref="plone.app.caching.moderateCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-          <element>locked</element>\n-          <element>copy</element>\n-          <element>resourceRegistries</element>\n-      </value>\n+    <field ref="plone.app.caching.moderateCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+      <element>locked</element>\n+      <element>copy</element>\n+      <element>resourceRegistries</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.folderView.ramCache">\n-      <field ref="plone.app.caching.moderateCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.moderateCaching.ramCache" />\n+    <value>True</value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.folderView.smaxage">\n-      <field ref="plone.app.caching.moderateCaching.smaxage" />\n-      <value>3600</value>\n+    <field ref="plone.app.caching.moderateCaching.smaxage" />\n+    <value>3600</value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.folderView.vary">\n-      <field ref="plone.app.caching.moderateCaching.vary" />\n-      <value>X-Anonymous</value>\n+    <field ref="plone.app.caching.moderateCaching.vary" />\n+    <value>X-Anonymous</value>\n   </record>\n \n \n   <!-- plone.content.dynamic -->\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.etags">\n-      <field ref="plone.app.caching.terseCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-          <element>locked</element>\n-          <element>copy</element>\n-      </value>\n+    <field ref="plone.app.caching.terseCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+      <element>locked</element>\n+      <element>copy</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.ramCache">\n-      <field ref="plone.app.caching.terseCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.terseCaching.ramCache" />\n+    <value>True</value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.vary">\n-      <field ref="plone.app.caching.terseCaching.vary" />\n-      <value>Accept</value>\n+    <field ref="plone.app.caching.terseCaching.vary" />\n+    <value>Accept</value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.maxage">\n-      <field ref="plone.app.caching.terseCaching.maxage" />\n-      <value>0</value>\n+    <field ref="plone.app.caching.terseCaching.maxage" />\n+    <value>0</value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.smaxage">\n-      <field ref="plone.app.caching.terseCaching.smaxage" />\n-      <value>0</value>\n+    <field ref="plone.app.caching.terseCaching.smaxage" />\n+    <value>0</value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.vary">\n-      <field ref="plone.app.caching.terseCaching.vary" />\n-      <value>X-Anonymous, Accept</value>\n+    <field ref="plone.app.caching.terseCaching.vary" />\n+    <value>X-Anonymous, Accept</value>\n   </record>\n \n \n   <!-- plone.content.feed -->\n   <record name="plone.app.caching.moderateCaching.plone.content.feed.smaxage">\n-      <field ref="plone.app.caching.moderateCaching.smaxage" />\n-      <value>86400</value>\n+    <field ref="plone.app.caching.moderateCaching.smaxage" />\n+    <value>86400</value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.feed.etags">\n-      <field ref="plone.app.caching.moderateCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-      </value>\n+    <field ref="plone.app.caching.moderateCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.feed.ramCache">\n-      <field ref="plone.app.caching.moderateCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.moderateCaching.ramCache" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.content.file -->\n   <record name="plone.app.caching.moderateCaching.plone.content.file.smaxage">\n-      <field ref="plone.app.caching.moderateCaching.smaxage" />\n-      <value>86400</value>\n+    <field ref="plone.app.caching.moderateCaching.smaxage" />\n+    <value>86400</value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.file.lastModified">\n-      <field ref="plone.app.caching.moderateCaching.lastModified" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.moderateCaching.lastModified" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.resource-->\n   <record name="plone.app.caching.strongCaching.plone.resource.maxage">\n-      <field ref="plone.app.caching.strongCaching.maxage" />\n-      <value>86400</value>\n+    <field ref="plone.app.caching.strongCaching.maxage" />\n+    <value>86400</value>\n   </record>\n   <record name="plone.app.caching.strongCaching.plone.resource.lastModified">\n-      <field ref="plone.app.caching.strongCaching.lastModified" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.strongCaching.lastModified" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.stableResource-->\n   <record name="plone.app.caching.strongCaching.plone.stableResource.maxage">\n-      <field ref="plone.app.caching.strongCaching.maxage" />\n-      <value>31536000</value>\n+    <field ref="plone.app.caching.strongCaching.maxage" />\n+    <value>31536000</value>\n   </record>\n   <record name="plone.app.caching.strongCaching.plone.stableResource.lastModified">\n-      <field ref="plone.app.caching.strongCaching.lastModified" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.strongCaching.lastModified" />\n+    <value>True</value>\n   </record>\n \n \n-</registry>\n\\ No newline at end of file\n+</registry>\ndiff --git a/plone/app/caching/profiles/with-caching-proxy/registry.xml b/plone/app/caching/profiles/with-caching-proxy/registry.xml\nindex c3f9e3e..c258850 100644\n--- a/plone/app/caching/profiles/with-caching-proxy/registry.xml\n+++ b/plone/app/caching/profiles/with-caching-proxy/registry.xml\n@@ -15,121 +15,121 @@\n \n   <!-- plone.content.itemView -->\n   <record name="plone.app.caching.weakCaching.plone.content.itemView.etags">\n-      <field ref="plone.app.caching.weakCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-          <element>locked</element>\n-          <element>resourceRegistries</element>\n-      </value>\n+    <field ref="plone.app.caching.weakCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+      <element>locked</element>\n+      <element>resourceRegistries</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.itemView.ramCache">\n-      <field ref="plone.app.caching.weakCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.weakCaching.ramCache" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.content.folderView -->\n   <record name="plone.app.caching.weakCaching.plone.content.folderView.etags">\n-      <field ref="plone.app.caching.weakCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-          <element>locked</element>\n-          <element>copy</element>\n-          <element>resourceRegistries</element>\n-      </value>\n+    <field ref="plone.app.caching.weakCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+      <element>locked</element>\n+      <element>copy</element>\n+      <element>resourceRegistries</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.folderView.ramCache">\n-      <field ref="plone.app.caching.weakCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.weakCaching.ramCache" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.content.dynamic -->\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.etags">\n-      <field ref="plone.app.caching.terseCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-          <element>locked</element>\n-          <element>copy</element>\n-      </value>\n+    <field ref="plone.app.caching.terseCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+      <element>locked</element>\n+      <element>copy</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.ramCache">\n-      <field ref="plone.app.caching.terseCaching.ramCache" />\n-      <value>False</value>\n+    <field ref="plone.app.caching.terseCaching.ramCache" />\n+    <value>False</value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.vary">\n-      <field ref="plone.app.caching.terseCaching.vary" />\n-      <value>Accept</value>\n+    <field ref="plone.app.caching.terseCaching.vary" />\n+    <value>Accept</value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.maxage">\n-      <field ref="plone.app.caching.terseCaching.maxage" />\n-      <value>10</value>\n+    <field ref="plone.app.caching.terseCaching.maxage" />\n+    <value>10</value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.smaxage">\n-      <field ref="plone.app.caching.terseCaching.smaxage" />\n-      <value>60</value>\n+    <field ref="plone.app.caching.terseCaching.smaxage" />\n+    <value>60</value>\n   </record>\n \n \n   <!-- plone.content.feed -->\n   <record name="plone.app.caching.moderateCaching.plone.content.feed.smaxage">\n-      <field ref="plone.app.caching.moderateCaching.smaxage" />\n-      <value>86400</value>\n+    <field ref="plone.app.caching.moderateCaching.smaxage" />\n+    <value>86400</value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.feed.etags">\n-      <field ref="plone.app.caching.moderateCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-      </value>\n+    <field ref="plone.app.caching.moderateCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.feed.ramCache">\n-      <field ref="plone.app.caching.moderateCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.moderateCaching.ramCache" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.content.file -->\n   <record name="plone.app.caching.moderateCaching.plone.content.file.smaxage">\n-      <field ref="plone.app.caching.moderateCaching.smaxage" />\n-      <value>86400</value>\n+    <field ref="plone.app.caching.moderateCaching.smaxage" />\n+    <value>86400</value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.file.lastModified">\n-      <field ref="plone.app.caching.moderateCaching.lastModified" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.moderateCaching.lastModified" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.resource-->\n   <record name="plone.app.caching.strongCaching.plone.resource.maxage">\n-      <field ref="plone.app.caching.strongCaching.maxage" />\n-      <value>86400</value>\n+    <field ref="plone.app.caching.strongCaching.maxage" />\n+    <value>86400</value>\n   </record>\n   <record name="plone.app.caching.strongCaching.plone.resource.lastModified">\n-      <field ref="plone.app.caching.strongCaching.lastModified" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.strongCaching.lastModified" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.stableResource-->\n   <record name="plone.app.caching.strongCaching.plone.stableResource.maxage">\n-      <field ref="plone.app.caching.strongCaching.maxage" />\n-      <value>31536000</value>\n+    <field ref="plone.app.caching.strongCaching.maxage" />\n+    <value>31536000</value>\n   </record>\n   <record name="plone.app.caching.strongCaching.plone.stableResource.lastModified">\n-      <field ref="plone.app.caching.strongCaching.lastModified" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.strongCaching.lastModified" />\n+    <value>True</value>\n   </record>\n \n \ndiff --git a/plone/app/caching/profiles/without-caching-proxy/registry.xml b/plone/app/caching/profiles/without-caching-proxy/registry.xml\nindex 6b89d42..bb58175 100644\n--- a/plone/app/caching/profiles/without-caching-proxy/registry.xml\n+++ b/plone/app/caching/profiles/without-caching-proxy/registry.xml\n@@ -15,114 +15,114 @@\n \n   <!-- plone.content.itemView -->\n   <record name="plone.app.caching.weakCaching.plone.content.itemView.etags">\n-      <field ref="plone.app.caching.weakCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-          <element>locked</element>\n-          <element>resourceRegistries</element>\n-      </value>\n+    <field ref="plone.app.caching.weakCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+      <element>locked</element>\n+      <element>resourceRegistries</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.itemView.ramCache">\n-      <field ref="plone.app.caching.weakCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.weakCaching.ramCache" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.content.folderView -->\n   <record name="plone.app.caching.weakCaching.plone.content.folderView.etags">\n-      <field ref="plone.app.caching.weakCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-          <element>locked</element>\n-          <element>copy</element>\n-          <element>resourceRegistries</element>\n-      </value>\n+    <field ref="plone.app.caching.weakCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+      <element>locked</element>\n+      <element>copy</element>\n+      <element>resourceRegistries</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.folderView.ramCache">\n-      <field ref="plone.app.caching.weakCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.weakCaching.ramCache" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.content.dynamic -->\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.etags">\n-      <field ref="plone.app.caching.terseCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-          <element>locked</element>\n-          <element>copy</element>\n-      </value>\n+    <field ref="plone.app.caching.terseCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+      <element>locked</element>\n+      <element>copy</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.ramCache">\n-      <field ref="plone.app.caching.terseCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.terseCaching.ramCache" />\n+    <value>True</value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.vary">\n-      <field ref="plone.app.caching.terseCaching.vary" />\n-      <value>Accept</value>\n+    <field ref="plone.app.caching.terseCaching.vary" />\n+    <value>Accept</value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.maxage">\n-      <field ref="plone.app.caching.terseCaching.maxage" />\n-      <value>10</value>\n+    <field ref="plone.app.caching.terseCaching.maxage" />\n+    <value>10</value>\n   </record>\n   <record name="plone.app.caching.terseCaching.plone.content.dynamic.smaxage">\n-      <field ref="plone.app.caching.terseCaching.smaxage" />\n-      <value>0</value>\n+    <field ref="plone.app.caching.terseCaching.smaxage" />\n+    <value>0</value>\n   </record>\n \n \n   <!-- plone.content.feed -->\n   <record name="plone.app.caching.weakCaching.plone.content.feed.etags">\n-      <field ref="plone.app.caching.weakCaching.etags" />\n-      <value>\n-          <element>userid</element>\n-          <element>catalogCounter</element>\n-          <element>userLanguage</element>\n-          <element>skin</element>\n-      </value>\n+    <field ref="plone.app.caching.weakCaching.etags" />\n+    <value>\n+      <element>userid</element>\n+      <element>catalogCounter</element>\n+      <element>userLanguage</element>\n+      <element>skin</element>\n+    </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.feed.ramCache">\n-      <field ref="plone.app.caching.weakCaching.ramCache" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.weakCaching.ramCache" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.content.file -->\n   <record name="plone.app.caching.weakCaching.plone.content.file.lastModified">\n-      <field ref="plone.app.caching.weakCaching.lastModified" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.weakCaching.lastModified" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.resource-->\n   <record name="plone.app.caching.strongCaching.plone.resource.maxage">\n-      <field ref="plone.app.caching.strongCaching.maxage" />\n-      <value>86400</value>\n+    <field ref="plone.app.caching.strongCaching.maxage" />\n+    <value>86400</value>\n   </record>\n   <record name="plone.app.caching.strongCaching.plone.resource.lastModified">\n-      <field ref="plone.app.caching.strongCaching.lastModified" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.strongCaching.lastModified" />\n+    <value>True</value>\n   </record>\n \n \n   <!-- plone.stableResource-->\n   <record name="plone.app.caching.strongCaching.plone.stableResource.maxage">\n-      <field ref="plone.app.caching.strongCaching.maxage" />\n-      <value>31536000</value>\n+    <field ref="plone.app.caching.strongCaching.maxage" />\n+    <value>31536000</value>\n   </record>\n   <record name="plone.app.caching.strongCaching.plone.stableResource.lastModified">\n-      <field ref="plone.app.caching.strongCaching.lastModified" />\n-      <value>True</value>\n+    <field ref="plone.app.caching.strongCaching.lastModified" />\n+    <value>True</value>\n   </record>\n \n \n-</registry>\n\\ No newline at end of file\n+</registry>\ndiff --git a/plone/app/caching/tests/__init__.py b/plone/app/caching/tests/__init__.py\nindex e69de29..838acf8 100644\n--- a/plone/app/caching/tests/__init__.py\n+++ b/plone/app/caching/tests/__init__.py\n@@ -0,0 +1,29 @@\n+import os\n+import time\n+\n+\n+class TZEnvContext:\n+    def __init__(self, tzval):\n+        self.tzval = tzval\n+        self._old_tz = None\n+\n+    def get_current_tz(self):\n+        return os.environ.get("TZ", None)\n+\n+    def set_current_tz(self, tzval):\n+        if tzval is None and "TZ" in os.environ:\n+            del os.environ["TZ"]\n+        else:\n+            os.environ["TZ"] = tzval\n+\n+        time.tzset()\n+\n+    def __enter__(self):\n+        self._old_tz = self.get_current_tz()\n+        self.set_current_tz(self.tzval)\n+\n+    def __exit__(self, type, value, traceback):\n+        if self._old_tz is not None:\n+            self.set_current_tz(self._old_tz)\n+\n+        self._old_tz = None\ndiff --git a/plone/app/caching/tests/test_integration.py b/plone/app/caching/tests/test_integration.py\nindex f3fc8f2..10d134f 100644\n--- a/plone/app/caching/tests/test_integration.py\n+++ b/plone/app/caching/tests/test_integration.py\n@@ -80,10 +80,7 @@ def test_controlpanel(self):\n         browser.handleErrors = False\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                SITE_OWNER_NAME,\n-                SITE_OWNER_PASSWORD,\n-            ),\n+            f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}",\n         )\n \n         browser.open(f"{self.portal.absolute_url()}/@@caching-controlpanel")  # noqa\n@@ -198,11 +195,9 @@ def test_auto_purge_content_types(self):\n         self.cachePurgingSettings.enabled = False\n         self.cachePurgingSettings.cachingProxies = ()\n         self.ploneCacheSettings.purgedContentTypes = ()\n-\n-        editURL = "{}/edit?_authenticator={}".format(\n-            self.portal["d1"].absolute_url(),\n-            getToken(TEST_USER_NAME),\n-        )\n+        url = self.portal["d1"].absolute_url()\n+        token = getToken(TEST_USER_NAME)\n+        editURL = f"{url}/edit?_authenticator={token}"\n \n         import transaction\n \n@@ -212,10 +207,7 @@ def test_auto_purge_content_types(self):\n         browser.handleErrors = False\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n \n         browser.open(editURL)\ndiff --git a/plone/app/caching/tests/test_operation_default.py b/plone/app/caching/tests/test_operation_default.py\nindex 5783983..0b75a0b 100644\n--- a/plone/app/caching/tests/test_operation_default.py\n+++ b/plone/app/caching/tests/test_operation_default.py\n@@ -60,13 +60,10 @@ def test_last_modified_no_etags(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(\n-            "{}/++add++Document".format(self.portal["f1"].absolute_url()),\n+            f"{self.portal[\'f1\'].absolute_url()}/++add++Document",\n         )\n         browser.getControl(\n             name="form.widgets.IDublinCore.title"\n@@ -79,11 +76,9 @@ def test_last_modified_no_etags(self):\n         import transaction\n \n         transaction.commit()\n-        browser.open(\n-            "{}/dummy-content/edit?_authenticator={}".format(\n-                self.portal["f1"].absolute_url(), getToken(TEST_USER_NAME)\n-            )\n-        )\n+        url = self.portal["f1"].absolute_url()\n+        token = getToken(TEST_USER_NAME)\n+        browser.open(f"{url}/dummy-content/edit?_authenticator={token}")\n         browser.getControl(\n             name="form.widgets.IDublinCore.title"\n         ).value = "dummy content"\ndiff --git a/plone/app/caching/tests/test_operation_parameters.py b/plone/app/caching/tests/test_operation_parameters.py\nindex 24afb30..3b989f0 100644\n--- a/plone/app/caching/tests/test_operation_parameters.py\n+++ b/plone/app/caching/tests/test_operation_parameters.py\n@@ -108,10 +108,7 @@ def test_anon_only(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal["f1"]["d1"].absolute_url())\n         self.assertEqual("plone.content.itemView", browser.headers["X-Cache-Rule"])\n@@ -152,10 +149,7 @@ def test_anon_only(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal["f1"]["d1"].absolute_url())\n         self.assertEqual("plone.content.itemView", browser.headers["X-Cache-Rule"])\ndiff --git a/plone/app/caching/tests/test_operation_utils.py b/plone/app/caching/tests/test_operation_utils.py\nindex 8d72a1f..1f5dffb 100644\n--- a/plone/app/caching/tests/test_operation_utils.py\n+++ b/plone/app/caching/tests/test_operation_utils.py\n@@ -1,5 +1,6 @@\n from io import StringIO\n from OFS.SimpleItem import SimpleItem\n+from plone.app.caching.tests import TZEnvContext\n from plone.memoize.interfaces import ICacheChooser\n from plone.testing.zca import UNIT_TESTING\n from Products.CMFCore.interfaces import IContentish\n@@ -911,19 +912,22 @@ def test_formatDateTime_local(self):\n     def test_formatDateTime_naive(self):\n         from plone.app.caching.operations.utils import formatDateTime\n \n-        dt = datetime.datetime(2010, 11, 24, 3, 4, 5, 6)\n-        inGMT = formatDateTime(dt)\n-\n-        # Who knows what your local timezone is :-)\n-        self.assertTrue(inGMT.endswith(" GMT"))\n-        self.assertIn("Nov 2010", inGMT)\n-\n-        # Can\'t compare offset aware and naive\n-        p = dateutil.parser.parse(inGMT).astimezone(dateutil.tz.tzlocal())\n-        self.assertEqual(\n-            (2010, 11, 24, 3, 4, 5),\n-            (p.year, p.month, p.day, p.hour, p.minute, p.second),\n-        )\n+        # We force CET, otherwise this test fails in regions with\n+        # dst enabled in November, 2010\n+        with TZEnvContext("CET"):\n+            dt = datetime.datetime(2010, 11, 24, 3, 4, 5, 6)\n+            inGMT = formatDateTime(dt)\n+\n+            # Who knows what your local timezone is :-)\n+            self.assertTrue(inGMT.endswith(" GMT"))\n+            self.assertIn("Nov 2010", inGMT)\n+\n+            # Can\'t compare offset aware and naive\n+            p = dateutil.parser.parse(inGMT).astimezone(dateutil.tz.tzlocal())\n+            self.assertEqual(\n+                (2010, 11, 24, 3, 4, 5),\n+                (p.year, p.month, p.day, p.hour, p.minute, p.second),\n+            )\n \n     # parseDateTime()\n \ndiff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py\nindex 254dcc8..b2ff4a6 100644\n--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py\n@@ -118,10 +118,7 @@ def test_composite_viewsxx(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal["f1"].absolute_url())\n         self.assertEqual("plone.content.folderView", browser.headers["X-Cache-Rule"])\n@@ -133,8 +130,7 @@ def test_composite_viewsxx(self):\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n         self.assertEqual(\n-            \'"|test_user_1_|%d|en|%s|0|0|"\'\n-            % (catalog.getCounter(), skins_tool.default_skin),\n+            f\'"|test_user_1_|{catalog.getCounter()}|en|{skins_tool.default_skin}|0|0|"\',\n             normalize_etag(browser.headers["ETag"]),\n         )\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n@@ -151,8 +147,7 @@ def test_composite_viewsxx(self):\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n         self.assertEqual(\n-            \'"|test_user_1_|%d|en|%s|0|1|"\'\n-            % (catalog.getCounter(), skins_tool.default_skin),\n+            f\'"|test_user_1_|{catalog.getCounter()}|en|{skins_tool.default_skin}|0|1|"\',\n             normalize_etag(browser.headers["ETag"]),\n         )\n \n@@ -161,10 +156,7 @@ def test_composite_viewsxx(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal["f1"]["d1"].absolute_url())\n         self.assertIn(testText, browser.contents)\n@@ -177,8 +169,7 @@ def test_composite_viewsxx(self):\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n         self.assertEqual(\n-            \'"|test_user_1_|%d|en|%s|0|"\'\n-            % (catalog.getCounter(), skins_tool.default_skin),\n+            f\'"|test_user_1_|{catalog.getCounter()}|en|{skins_tool.default_skin}|0|"\',\n             normalize_etag(browser.headers["ETag"]),\n         )\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n@@ -187,10 +178,7 @@ def test_composite_viewsxx(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal["f1"]["d1"].absolute_url())\n         self.assertEqual("plone.content.itemView", browser.headers["X-Cache-Rule"])\n@@ -207,10 +195,7 @@ def test_composite_viewsxx(self):\n         browser.raiseHttpErrors = False  # we really do want to see the 304\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.addHeader("If-None-Match", etag)\n         browser.open(self.portal["f1"]["d1"].absolute_url())\n@@ -232,7 +217,7 @@ def test_composite_viewsxx(self):\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n         self.assertEqual(\n-            \'"||%d|en|%s|0|0|"\' % (catalog.getCounter(), skins_tool.default_skin),\n+            f\'"||{catalog.getCounter()}|en|{skins_tool.default_skin}|0|0|"\',\n             normalize_etag(browser.headers["ETag"]),\n         )\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n@@ -251,7 +236,7 @@ def test_composite_viewsxx(self):\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n         self.assertEqual(\n-            \'"||%d|en|%s|0|"\' % (catalog.getCounter(), skins_tool.default_skin),\n+            f\'"||{catalog.getCounter()}|en|{skins_tool.default_skin}|0|"\',\n             normalize_etag(browser.headers["ETag"]),\n         )\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n@@ -274,7 +259,7 @@ def test_composite_viewsxx(self):\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n         self.assertEqual(\n-            \'"||%d|en|%s|0|"\' % (catalog.getCounter(), skins_tool.default_skin),\n+            f\'"||{catalog.getCounter()}|en|{skins_tool.default_skin}|0|"\',\n             normalize_etag(browser.headers["ETag"]),\n         )\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n@@ -348,10 +333,7 @@ def test_content_feeds(self):\n             "max-age=0, s-maxage=86400, must-revalidate",\n             browser.headers["Cache-Control"],\n         )\n-        tag = \'"||{}|en|{}"\'.format(\n-            catalog.getCounter(),\n-            skins_tool.default_skin,\n-        )\n+        tag = f\'"||{catalog.getCounter()}|en|{skins_tool.default_skin}"\'\n         self.assertEqual(tag, browser.headers["ETag"])\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -373,10 +355,7 @@ def test_content_feeds(self):\n             "max-age=0, s-maxage=86400, must-revalidate",\n             browser.headers["Cache-Control"],\n         )\n-        tag = \'"||{}|en|{}"\'.format(\n-            catalog.getCounter(),\n-            skins_tool.default_skin,\n-        )\n+        tag = f\'"||{catalog.getCounter()}|en|{skins_tool.default_skin}"\'\n         self.assertEqual(tag, browser.headers["ETag"])\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -399,10 +378,7 @@ def test_content_feeds(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal.absolute_url() + "/RSS")\n         self.assertEqual("plone.content.feed", browser.headers["X-Cache-Rule"])\n@@ -413,10 +389,7 @@ def test_content_feeds(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = \'"|test_user_1_|{}|en|{}"\'.format(\n-            catalog.getCounter(),\n-            skins_tool.default_skin,\n-        )\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{skins_tool.default_skin}"\'\n         self.assertEqual(tag, browser.headers["ETag"])\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -424,10 +397,7 @@ def test_content_feeds(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal.absolute_url() + "/RSS")\n         self.assertEqual("plone.content.feed", browser.headers["X-Cache-Rule"])\n@@ -462,10 +432,7 @@ def test_content_files(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                SITE_OWNER_NAME,\n-                SITE_OWNER_PASSWORD,\n-            ),\n+            f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}",\n         )\n         browser.open(self.portal["f1"]["i1"].absolute_url())\n         self.assertEqual("plone.content.file", browser.headers["X-Cache-Rule"])\n@@ -487,10 +454,7 @@ def test_content_files(self):\n         browser.handleErrors = False\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                SITE_OWNER_NAME,\n-                SITE_OWNER_PASSWORD,\n-            ),\n+            f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}",\n         )\n         browser.open(self.portal["f1"]["i1"].absolute_url() + "/@@images/image/preview")\n         self.assertEqual("plone.content.file", browser.headers["X-Cache-Rule"])\n@@ -676,15 +640,15 @@ def setUp(self):\n         setRoles(self.portal, TEST_USER_ID, ("Manager",))\n \n         self.portal.invokeFactory("Folder", "f1")\n-        self.portal["f1"].title = u"Folder one"\n+        self.portal["f1"].title = "Folder one"\n         self.portal.portal_workflow.doActionFor(self.portal["f1"], "publish")\n \n         self.portal["f1"].invokeFactory("Folder", "f2")\n-        self.portal["f1"]["f2"].title = u"Folder one sub one"\n+        self.portal["f1"]["f2"].title = "Folder one sub one"\n         self.portal.portal_workflow.doActionFor(self.portal["f1"]["f2"], "publish")\n \n         self.portal.invokeFactory("Collection", "c")\n-        self.portal["c"].title = u"A Collection"\n+        self.portal["c"].title = "A Collection"\n         self.portal.portal_workflow.doActionFor(self.portal["c"], "publish")\n \n         transaction.commit()\ndiff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py\nindex c59e14e..0032d55 100644\n--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py\n@@ -102,10 +102,7 @@ def test_composite_views(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal["f1"].absolute_url())\n         self.assertEqual("plone.content.folderView", browser.headers["X-Cache-Rule"])\n@@ -116,10 +113,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = \'"|test_user_1_|{0}|en|{1}|0|0|"\'.format(\n-            catalog.getCounter(),\n-            default_skin,\n-        )\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|0|"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -134,10 +128,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = \'"|test_user_1_|{0}|en|{1}|0|1|"\'.format(\n-            catalog.getCounter(),\n-            default_skin,\n-        )\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|1|"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n \n         # Request the authenticated page\n@@ -145,10 +136,7 @@ def test_composite_views(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal["f1"]["d1"].absolute_url())\n         self.assertIn(testText, browser.contents)\n@@ -160,10 +148,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = \'"|test_user_1_|{0}|en|{1}|0|"\'.format(\n-            catalog.getCounter(),\n-            default_skin,\n-        )\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -171,10 +156,7 @@ def test_composite_views(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal["f1"]["d1"].absolute_url())\n         self.assertEqual("plone.content.itemView", browser.headers["X-Cache-Rule"])\n@@ -191,10 +173,7 @@ def test_composite_views(self):\n         browser.raiseHttpErrors = False  # we really do want to see the 304\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.addHeader("If-None-Match", etag)\n         browser.open(self.portal["f1"]["d1"].absolute_url())\n@@ -214,7 +193,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = \'"||{0}|en|{1}|0|0|"\'.format(catalog.getCounter(), default_skin)\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|0|"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -231,7 +210,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = \'"||{0}|en|{1}|0|"\'.format(catalog.getCounter(), default_skin)\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -252,7 +231,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = \'"||{0}|en|{1}|0|"\'.format(catalog.getCounter(), default_skin)\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -364,10 +343,7 @@ def test_content_feeds(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal.absolute_url() + "/RSS")\n         self.assertEqual("plone.content.feed", browser.headers["X-Cache-Rule"])\n@@ -388,10 +364,7 @@ def test_content_feeds(self):\n         browser = Browser(self.app)\n         browser.addHeader(\n             "Authorization",\n-            "Basic {}:{}".format(\n-                TEST_USER_NAME,\n-                TEST_USER_PASSWORD,\n-            ),\n+            f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}",\n         )\n         browser.open(self.portal.absolute_url() + "/RSS")\n         self.assertEqual("plone.content.feed", browser.headers["X-Cache-Rule"])\ndiff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py\nindex d5900ee..3b433a1 100644\n--- a/plone/app/caching/tests/test_purge.py\n+++ b/plone/app/caching/tests/test_purge.py\n@@ -384,7 +384,6 @@ def test_scale_purge_paths_image(self):\n         paths = [x for x in purge.getRelativePaths()]\n         [self.assertIn(j, paths) for j in scalepaths]\n \n-\n     def test_scale_purge_paths_page(self):\n         prefix = "/".join(self.page.getPhysicalPath())\n         purge = ScalesPurgePaths(self.page)\n@@ -396,7 +395,6 @@ def test_scale_purge_paths_page(self):\n         paths = [x for x in purge.getRelativePaths()]\n         [self.assertIn(j, paths) for j in scalepaths]\n \n-\n     def test_scale_purge_paths_unicode(self):\n         purge = ScalesPurgePaths(self.file)\n         expected = [\ndiff --git a/plone/app/caching/tests/test_utils.py b/plone/app/caching/tests/test_utils.py\nindex d0637c5..0b36c3d 100644\n--- a/plone/app/caching/tests/test_utils.py\n+++ b/plone/app/caching/tests/test_utils.py\n@@ -21,7 +21,7 @@\n \n \n TEST_TIMEZONE = "Europe/Vienna"\n-TEST_IMAGE = pkg_resources.resource_filename(u"plone.app.caching.tests", u"test.gif")\n+TEST_IMAGE = pkg_resources.resource_filename("plone.app.caching.tests", "test.gif")\n \n \n def stable_now():\n@@ -39,7 +39,8 @@ def normalize_etag(value):\n     last = split_value.pop()\n     if str(date.today().year) in last:\n         # yes, this is time based, remove it\n-        return "|".join(split_value)\n+        value = "|".join(split_value)\n+        return f\'{value}|"\'\n     # return original\n     return value\n \n'

