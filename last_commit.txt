Repository: plone.app.content


Branch: refs/heads/master
Date: 2018-10-05T20:56:59+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.content/commit/ff973c6b107ad8ec170ba8832022463b7eba4e14

fix indentation and dome formating

Files changed:
M plone/app/content/browser/content_status_history.py

b'diff --git a/plone/app/content/browser/content_status_history.py b/plone/app/content/browser/content_status_history.py\nindex 3b51696..3b2ee7d 100644\n--- a/plone/app/content/browser/content_status_history.py\n+++ b/plone/app/content/browser/content_status_history.py\n@@ -17,25 +17,25 @@ class IContentStatusHistoryDates(Interface):\n     """\n \n     effective_date = Datetime(\n-        title=_(u"label_effective_date",\n-                default=u"Publishing Date"),\n+        title=_(u"label_effective_date", default=u"Publishing Date"),\n         description=_(\n             u"help_effective_date",\n             default=u"The date when the item will be published. If no "\n-                    u"date is selected the item will be published immediately."\n+            u"date is selected the item will be published immediately.",\n         ),\n-        required=False)\n+        required=False,\n+    )\n \n     expiration_date = Datetime(\n-        title=_(u"label_expiration_date",\n-                default=u"Expiration Date"),\n+        title=_(u"label_expiration_date", default=u"Expiration Date"),\n         description=_(\n             u"help_expiration_date",\n             default=u"The date when the item expires. This will automatically "\n-                    u"make the item invisible for others at the given date. "\n-                    u"If no date is chosen, it will never expire."\n-            ),\n-        required=False)\n+            u"make the item invisible for others at the given date. "\n+            u"If no date is chosen, it will never expire.",\n+        ),\n+        required=False,\n+    )\n \n \n class ContentStatusHistoryDatesForm(form.Form):\n@@ -63,32 +63,45 @@ def __init__(self, context, request):\n         self.plone_utils = getToolByName(context, \'plone_utils\')\n         self.errors = {}\n \n-    def __call__(self, workflow_action=None, paths=[], comment="",\n-                 effective_date=None, expiration_date=None,\n-                 include_children=False, *args):\n+    def __call__(\n+        self,\n+        workflow_action=None,\n+        paths=[],\n+        comment="",\n+        effective_date=None,\n+        expiration_date=None,\n+        include_children=False,\n+        *args\n+    ):\n \n         data = self.dates_form.extractData()\n-        if self.request.get(\'form.widgets.effective_date-calendar\', None) \\\n-           and data:\n+        if (\n+            self.request.get(\'form.widgets.effective_date-calendar\', None)\n+            and data\n+        ):\n             effective_date = data[0][\'effective_date\'].strftime(\n                 "%Y-%m-%d %H:%M"\n             )\n \n-        if self.request.get(\'form.widgets.expiration_date-calendar\', None) \\\n-           and data:\n+        if (\n+            self.request.get(\'form.widgets.expiration_date-calendar\', None)\n+            and data\n+        ):\n             expiration_date = data[0][\'expiration_date\'].strftime(\n                 "%Y-%m-%d %H:%M"\n             )\n \n         if self.request.get(\'form.button.Cancel\', None):\n             return self.request.RESPONSE.redirect(\n-                "%s/view" % self.context.absolute_url())\n+                "%s/view" % self.context.absolute_url()\n+            )\n \n         if self.request.get(\'form.submitted\', None):\n             self.validate(workflow_action=workflow_action, paths=paths)\n             if self.errors:\n                 self.plone_utils.addPortalMessage(\n-                    _(u\'Please correct the indicated errors.\'), \'error\')\n+                    _(u\'Please correct the indicated errors.\'), \'error\'\n+                )\n                 return self.template()\n \n         if self.request.get(\'form.button.Publish\', None):\n@@ -96,7 +109,8 @@ def __call__(self, workflow_action=None, paths=[], comment="",\n                 workflow_action=workflow_action,\n                 comment=comment,\n                 effective_date=effective_date,\n-                expiration_date=expiration_date)\n+                expiration_date=expiration_date,\n+            )\n \n         if self.request.get(\'form.button.FolderPublish\', None):\n             self.context.restrictedTraverse(\'folder_publish\')(\n@@ -105,18 +119,19 @@ def __call__(self, workflow_action=None, paths=[], comment="",\n                 comment=comment,\n                 expiration_date=expiration_date,\n                 effective_date=effective_date,\n-                include_children=include_children)\n+                include_children=include_children,\n+            )\n \n         return self.template()\n \n     def validate(self, workflow_action=None, paths=[]):\n         if workflow_action is None:\n             self.errors[\'workflow_action\'] = _(\n-                u\'You must select a publishing action.\')\n+                u\'You must select a publishing action.\'\n+            )\n \n         if not paths:\n-            self.errors[\'paths\'] = _(\n-                u\'You must select content to change.\')\n+            self.errors[\'paths\'] = _(u\'You must select content to change.\')\n             # If there are no paths, it\'s mostly a mistake\n             # Set paths using orgi_paths, otherwise users are getting confused\n             orig_paths = self.request.get(\'orig_paths\')\n@@ -139,5 +154,5 @@ def redirect_to_referrer(self):\n     def isExpired(self, content):\n         return isExpired(content)\n \n-      def human_readable_size(self, size):\n+    def human_readable_size(self, size):\n         return human_readable_size(size)\n'

