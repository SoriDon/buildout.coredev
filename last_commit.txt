Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-10-22T18:01:31-04:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/e53f0e1d16412eb653e200b4a65c1ceb9663f62e

remove skins/plone_scripts/formatColumns.py

Files changed:
M Products/CMFPlone/tests/testSecurity.py
D Products/CMFPlone/skins/plone_scripts/formatColumns.py

diff --git a/Products/CMFPlone/skins/plone_scripts/formatColumns.py b/Products/CMFPlone/skins/plone_scripts/formatColumns.py
deleted file mode 100644
index bd8e741..0000000
--- a/Products/CMFPlone/skins/plone_scripts/formatColumns.py
+++ /dev/null
@@ -1,27 +0,0 @@
-##parameters=items,columns=3
-##title=format a list of items into columns for better display
-
-# returns a list of lists of items
-
-from zExceptions import Forbidden
-if container.REQUEST.get('PUBLISHED') is script:
-    raise Forbidden('Script may not be published.')
-
-rows = []
-
-i = 0
-l = len(items)
-
-while 1:
-    col = []
-    for n in range(columns):
-        if i >= l:
-            col.append(None)
-        else:
-            col.append(items[i])
-            i = i + 1
-    rows.append(list(col))
-    if i >= l:
-        break
-
-return rows
diff --git a/Products/CMFPlone/tests/testSecurity.py b/Products/CMFPlone/tests/testSecurity.py
index 502c8d2..c2268b4 100644
--- a/Products/CMFPlone/tests/testSecurity.py
+++ b/Products/CMFPlone/tests/testSecurity.py
@@ -185,9 +185,14 @@ def test_utranslate(self):
     def test_createObject(self):
         res = self.publish('/plone/createObject?type_name=File&id=${foo}')
         self.assertEqual(302, res.status)
-        self.assertTrue(res.headers['location'].startswith(
-            'http://nohost/plone/portal_factory/File/${foo}/edit?_authenticator='))
+        self.assertTrue(
+            res.headers['location'].startswith(
+                'http://nohost/plone/portal_factory/File/${foo}/'
+                'edit?_authenticator='
+            )
+        )
 
     def test_formatColumns(self):
+        # formatColumns is unused and was removed
         res = self.publish('/plone/formatColumns?items:list=')
-        self.assertEqual(403, res.status)
+        self.assertIn(res.status, [403, 404])


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-10-22T18:08:13-04:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/c1dec72c7f64cb3def67e858410a9beba22c0f89

remove skins/plone_scripts/getSelectableViews.py

Files changed:
M Products/CMFPlone/tests/testBrowserDefaultScripts.py
D Products/CMFPlone/skins/plone_scripts/getSelectableViews.py

diff --git a/Products/CMFPlone/skins/plone_scripts/getSelectableViews.py b/Products/CMFPlone/skins/plone_scripts/getSelectableViews.py
deleted file mode 100644
index 5a54cd4..0000000
--- a/Products/CMFPlone/skins/plone_scripts/getSelectableViews.py
+++ /dev/null
@@ -1,24 +0,0 @@
-## Script (Python) "getSelectableViews"
-##title=Get the view templates available from IBrowserDefault on the context
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=
-
-if not context.canSetLayout():
-    return None
-
-# If there is only one template to select and we can't set a default page,
-# it's not interesting to show the menu, so return None
-try:
-    layouts = context.getAvailableLayouts()
-except AttributeError:
-    # Might happen if FTI has not been migrated
-    layouts = ()
-
-if len(layouts) <= 1 and not context.canSetDefaultPage():
-    return None
-else:
-    return layouts
diff --git a/Products/CMFPlone/tests/testBrowserDefaultScripts.py b/Products/CMFPlone/tests/testBrowserDefaultScripts.py
index 9090e3e..c1d6fde 100644
--- a/Products/CMFPlone/tests/testBrowserDefaultScripts.py
+++ b/Products/CMFPlone/tests/testBrowserDefaultScripts.py
@@ -16,20 +16,6 @@ def testHasIndexHtml(self):
                                   title='Test index')
         self.assertTrue(self.folder.hasIndexHtml())
 
-    def testGetSelectableViewsWithViews(self):
-        # Assume folders have at least two possible views to chose from
-        views = [v[0] for v in self.folder.getSelectableViews()]
-        self.assertTrue(views)
-        self.assertTrue('folder_listing' in views)
-        self.assertTrue('atct_album_view' in views)
-
-    def testGetSelectableViewsWithoutViews(self):
-        # Assume documents have only one view
-        self.folder.invokeFactory('Document', 'test',
-                                  title='Test default page')
-        doc = getattr(self.folder, 'test')
-        self.assertFalse(doc.getSelectableViews())
-
     def testSetDefaultPageWithoutPage(self):
         # Make sure we can't define a default page if no object in folder
         self.assertTrue(self.folder.canSelectDefaultPage())


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-10-22T18:14:18-04:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/198559ff31df499df90dc500912a27d548f04481

remove skins/plone_scripts/hasIndexHtml.py

Files changed:
M Products/CMFPlone/tests/testBrowserDefaultScripts.py
D Products/CMFPlone/skins/plone_scripts/hasIndexHtml.py

diff --git a/Products/CMFPlone/skins/plone_scripts/hasIndexHtml.py b/Products/CMFPlone/skins/plone_scripts/hasIndexHtml.py
deleted file mode 100644
index b4f686e..0000000
--- a/Products/CMFPlone/skins/plone_scripts/hasIndexHtml.py
+++ /dev/null
@@ -1,21 +0,0 @@
-## Script (Python) "hasIndexHtml"
-##title=Find out if this folder has an index_html page
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=
-
-from AccessControl import Unauthorized
-from Products.CMFPlone.utils import base_hasattr
-
-# It's silly but because this is often called on the parent folder, we must
-# ensure we have permission.
-try:
-    if not context.isPrincipiaFolderish:
-        return False
-except Unauthorized:
-    return False
-
-return 'index_html' in context
diff --git a/Products/CMFPlone/tests/testBrowserDefaultScripts.py b/Products/CMFPlone/tests/testBrowserDefaultScripts.py
index c1d6fde..3af67b2 100644
--- a/Products/CMFPlone/tests/testBrowserDefaultScripts.py
+++ b/Products/CMFPlone/tests/testBrowserDefaultScripts.py
@@ -5,17 +5,6 @@
 class TestBrowserDefaultScripts(PloneTestCase):
     """Tests the browser default and folder-default page scripts"""
 
-    def testNoIndexHtml(self):
-        # A folder shouldn't have an index_html object at instantiation time
-        self.assertFalse(self.folder.hasIndexHtml())
-
-    def testHasIndexHtml(self):
-        # Make sure we can determine if a container contains a index_html
-        # object
-        self.folder.invokeFactory('Document', 'index_html',
-                                  title='Test index')
-        self.assertTrue(self.folder.hasIndexHtml())
-
     def testSetDefaultPageWithoutPage(self):
         # Make sure we can't define a default page if no object in folder
         self.assertTrue(self.folder.canSelectDefaultPage())


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-10-22T18:16:23-04:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/53a47d20de88585385759bab4c2c6d3c82b8c3e0

remove skins/plone_scripts/navigationParent.py

Files changed:
D Products/CMFPlone/skins/plone_scripts/navigationParent.py
D Products/CMFPlone/tests/testNavigationParent.py

diff --git a/Products/CMFPlone/skins/plone_scripts/navigationParent.py b/Products/CMFPlone/skins/plone_scripts/navigationParent.py
deleted file mode 100644
index 1906341..0000000
--- a/Products/CMFPlone/skins/plone_scripts/navigationParent.py
+++ /dev/null
@@ -1,81 +0,0 @@
-## Script (Python) "navigationParent"
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=obj=None,templateId=None,fallThroughDefaultPage=True,checkPermissions=[]
-##title=Returns the appropriate url for the parent object
-
-# - If obj is given, use this as the object to find the parent of, else
-# use the context.
-#
-# - If fallThroughDefaultPage is set to True (default), then if obj/context is
-# the default page (index_html or default_page) of its parent folder, get the
-# parent of that folder. If you intend to link straight to the returned value
-# this is probably what you want - else Zope will show the parent object, which
-# will in turn show obj again (as it is the default page). However, if you
-# intend to append a page template to the link, set this to false to get the
-# "real" parent. folder_contents does this.
-#
-# - If you want to make sure that the current user has permissions other than
-# "View" on the parent object, pass these in as a list in checkPermissions.
-# folder_contents uses this to check the "List folder contents" permission,
-# for example.
-#
-# - templateId is for historical reasons, ignored
-#
-# Returns the absolute url to the parent object, or None if it cannot be
-# found or accessed
-
-from ZODB.POSException import ConflictError
-from Products.CMFCore.utils import getToolByName, getUtilityByInterfaceName
-from AccessControl import Unauthorized
-
-portal = getUtilityByInterfaceName('Products.CMFCore.interfaces.ISiteRoot')
-plone_utils = getToolByName(context, 'plone_utils')
-portal_membership = getToolByName(context, 'portal_membership')
-
-if obj is None:
-    obj = context
-
-checkPermission = portal_membership.checkPermission
-
-if fallThroughDefaultPage:
-    # In the case that we have an index_html inside and index_html,
-    # we actually need to go the ultimate non-default parent
-    try:
-        while obj is not None and plone_utils.isDefaultPage(obj):
-            obj = obj.aq_parent
-    except Unauthorized:
-        return None
-
-# Abort if we are at the root of the portal
-if obj.getPhysicalPath() == portal.getPhysicalPath():
-    return None
-
-# Get the parent. If we can't get it (unauthorized), use the portal
-try:
-    parent = obj.aq_parent
-except ConflictError:
-    raise
-except:
-    return None
-
-# We may get an unauthorized exception if we're not allowed to access#
-# the parent. In this case, return None
-try:
-    if getattr(parent, 'getId', None) is None or \
-           parent.getId() == 'talkback':
-        # Skip any Z3 views that may be in the acq tree;
-        # Skip past the talkback container if that's where we are
-        parent = parent.aq_parent
-
-    for perm in checkPermissions:
-        if not checkPermission(perm, parent):
-            return None
-
-    return parent.absolute_url()
-
-except Unauthorized:
-    return None
diff --git a/Products/CMFPlone/tests/testNavigationParent.py b/Products/CMFPlone/tests/testNavigationParent.py
deleted file mode 100644
index 046a25a..0000000
--- a/Products/CMFPlone/tests/testNavigationParent.py
+++ /dev/null
@@ -1,120 +0,0 @@
-# -*- coding: utf-8 -*-
-from Products.CMFPlone.tests import PloneTestCase
-
-
-class TestNavigationParent(PloneTestCase.PloneTestCase):
-
-    def afterSetUp(self):
-        self.folder.invokeFactory('Folder', 'f1', title='Folder 1')
-        self.f1 = getattr(self.folder, 'f1')
-        self.f1.invokeFactory('Folder', 'f2', title='Folder 2')
-        self.f2 = getattr(self.f1, 'f2')
-
-    def testPortalRoot(self):
-        self.assertTrue(self.portal.navigationParent() is None)
-
-    def testFolderInPortal(self):
-        self.setRoles(['Manager'])
-        self.portal.invokeFactory('Folder', 'pf', title='portal folder')
-        pf = getattr(self.portal, 'pf')
-        self.assertEqual(pf.navigationParent(), self.portal.absolute_url())
-
-    def testFolderInFolder(self):
-        self.assertEqual(self.f2.navigationParent(), self.f1.absolute_url())
-
-    def testDocumentInFolder(self):
-        self.f1.invokeFactory('Document', 'd1', title='Document 1')
-        d1 = getattr(self.f1, 'd1')
-        self.assertEqual(d1.navigationParent(), self.f1.absolute_url())
-
-    # Standard behaviour for default_page/index_html - go up two levels,
-    # since going to parent will just end you up at the same object again
-
-    def testIndexHtmlInFolder(self):
-        self.f2.invokeFactory('Document', 'index_html', title='Document 1')
-        d1 = getattr(self.f2, 'index_html')
-        self.assertEqual(d1.navigationParent(), self.f1.absolute_url())
-
-    def testDefaultPageInFolder(self):
-        self.f2.invokeFactory('Document', 'd1', title='Document 1')
-        d1 = getattr(self.f2, 'd1')
-        self.f2.setDefaultPage('d1')
-        self.assertEqual(d1.navigationParent(), self.f1.absolute_url())
-
-    def testFolderishIndexHtmlInFolder(self):
-        self.f2.invokeFactory('Folder', 'index_html', title='Index folder')
-        ih = getattr(self.f2, 'index_html')
-        self.assertEqual(ih.navigationParent(), self.f1.absolute_url())
-
-    def testFolderishDefaultPageInFolder(self):
-        self.f1.setDefaultPage('f2')
-        self.assertEqual(self.f2.navigationParent(),
-                         self.folder.absolute_url())
-
-    # Optional behaviour - don't fall through, go straight to parent.
-    # This is what we do on folder_contents, for example. It's only sensible
-    # if you intend to link/redirect to an object + a page template
-
-    def testNoFallThroughIndexHtmlInFolder(self):
-        self.f2.invokeFactory('Document', 'index_html', title='Document 1')
-        d1 = getattr(self.f2, 'index_html')
-        self.assertEqual(d1.navigationParent(fallThroughDefaultPage=False),
-                         self.f2.absolute_url())
-
-    def testNoFallThroughDefaultPageInFolder(self):
-        self.f2.invokeFactory('Document', 'd1', title='Document 1')
-        d1 = getattr(self.f2, 'd1')
-        self.f2.setDefaultPage('d1')
-        self.assertEqual(d1.navigationParent(fallThroughDefaultPage=False),
-                         self.f2.absolute_url())
-
-    def testNoFallThroughFolderishIndexHtmlInFolder(self):
-        self.f2.invokeFactory('Folder', 'index_html', title='Index folder')
-        ih = getattr(self.f2, 'index_html')
-        self.assertEqual(ih.navigationParent(fallThroughDefaultPage=False),
-                         self.f2.absolute_url())
-
-    def testNoFallThroughFolderishDefaultPageInFolder(self):
-        self.f1.setDefaultPage('f2')
-        self.assertEqual(self.f2.navigationParent(
-            fallThroughDefaultPage=False),
-            self.f1.absolute_url())
-
-    # Very special case - if you have an index_html inside an index_html...
-    def testRecursiveDefaultPage(self):
-        self.f1.setDefaultPage('f2')
-        self.f2.invokeFactory('Folder', 'index_html',
-                              title='index index index')
-        ih = getattr(self.f2, 'index_html')
-        self.assertEqual(ih.navigationParent(), self.folder.absolute_url())
-
-    # Permission checks on parent
-
-    def testNoParentViewPermission(self):
-        self.setRoles(['Manager'])
-        self.portal.invokeFactory('Folder', 'pf', title='portal folder')
-        pf = getattr(self.portal, 'pf')
-        pf.invokeFactory('Folder', 'lf', title='listable folder')
-        lf = getattr(pf, 'lf')
-        pf.manage_permission('List folder contents', ['Manager'], 0)
-        pf.manage_permission('View', ['Manager'], 0)
-        lf.manage_permission('List folder contents',
-                             ['Member', 'Manager', 'Owner'], 0)
-        lf.manage_permission('View', ['Member', 'Manager', 'Owner'], 0)
-        self.setRoles(['Member'])
-
-        self.assertTrue(lf.navigationParent() is None)
-
-    def testNoParentListPermissions(self):
-        self.setRoles(['Manager'])
-        self.portal.invokeFactory('Folder', 'pf', title='portal folder')
-        pf = getattr(self.portal, 'pf')
-        pf.invokeFactory('Folder', 'lf', title='listable folder')
-        lf = getattr(pf, 'lf')
-        pf.manage_permission('List folder contents', ['Manager'], 0)
-        lf.manage_permission('List folder contents',
-                             ['Member', 'Manager', 'Owner'], 0)
-        self.setRoles(['Member'])
-
-        self.assertTrue(lf.navigationParent(
-            checkPermissions=['List folder contents']) is None)


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-10-22T18:30:51-04:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/06ae8ebeeb8bc961065f04838caa45e189c2eb78

remove skins/plone_scripts/returnNone.py

Files changed:
M Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.pt
M Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.py
D Products/CMFPlone/skins/plone_scripts/returnNone.py

diff --git a/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.pt b/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.pt
index 9f422e8..135c9fa 100644
--- a/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.pt
+++ b/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.pt
@@ -82,8 +82,7 @@
                 method="post"
                 class="pat-formunloadalert pat-formautofocus"
                 tal:attributes="action string:$portal_url/$template_id"
-                tal:define="targetobject context/portal_groupdata;
-                            targetGetProperty nocall:view/group/getProperty | nocall:context/returnNone;">
+                tal:define="targetobject context/portal_groupdata;">
 
               <fieldset>
                   <div class="field" metal:define-slot="name">
@@ -107,7 +106,7 @@
                       <div class="field"
                            tal:define="id property/id;
                                        type property/type;
-                                       propertyvalue python:targetGetProperty(id, None);">
+                                       propertyvalue python:view.get_group_property(id);">
 
                       <label for="value"
                               tal:attributes="for id"
diff --git a/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.py b/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.py
index 5733b45..b52256e 100644
--- a/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.py
+++ b/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.py
@@ -10,6 +10,12 @@
 
 class GroupDetailsControlPanel(UsersGroupsControlPanelView):
 
+    def get_group_property(self, prop_id):
+        try:
+            self.group.getProperty(prop_id, None)
+        except AttributeError:
+            pass
+
     def __call__(self):
         context = aq_inner(self.context)
 
@@ -47,8 +53,11 @@ def __call__(self):
                                               description=description,
                                               REQUEST=self.request)
                 if not success:
-                    msg = _(u'Could not add group ${name}, perhaps a user or group with '
-                            u'this name already exists.', mapping={u'name': addname})
+                    msg = _(
+                        u'Could not add group ${name}, perhaps a user or '
+                        u'group with this name already exists.',
+                        mapping={u'name': addname}
+                    )
                     IStatusMessage(self.request).add(msg, 'error')
                     return self.index()
 
diff --git a/Products/CMFPlone/skins/plone_scripts/returnNone.py b/Products/CMFPlone/skins/plone_scripts/returnNone.py
deleted file mode 100644
index 00700b5..0000000
--- a/Products/CMFPlone/skins/plone_scripts/returnNone.py
+++ /dev/null
@@ -1,12 +0,0 @@
-## Script (Python) "returnNone"
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=*args,**kw
-##title=Return None
-
-# a simple script to give back 'None'. Useful to masqurade as some other method
-# that doesn't really exist, but must be callable.
-return None


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-10-22T18:34:09-04:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/1077bed4dd888fa49fbb70152f0c84b135eff5dc

remove Products/CMFPlone/skins/plone_scripts/sortObjects.py

Files changed:
D Products/CMFPlone/skins/plone_scripts/sortObjects.py
D Products/CMFPlone/tests/testSortObjects.py

diff --git a/Products/CMFPlone/skins/plone_scripts/sortObjects.py b/Products/CMFPlone/skins/plone_scripts/sortObjects.py
deleted file mode 100644
index 7f710b6..0000000
--- a/Products/CMFPlone/skins/plone_scripts/sortObjects.py
+++ /dev/null
@@ -1,21 +0,0 @@
-## Script (Python) "sortObject"
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=contents, method='title_or_id'
-##title=sorts and pre-filters objects
-
-
-def get_sortable(o):
-    val = getattr(o, method)()
-    try:
-        val = val.lower()
-    except AttributeError:
-        pass
-    return val
-
-aux = [(get_sortable(o), o) for o in contents]
-aux.sort()
-return [x[1] for x in aux]
diff --git a/Products/CMFPlone/tests/testSortObjects.py b/Products/CMFPlone/tests/testSortObjects.py
deleted file mode 100644
index 15d642c..0000000
--- a/Products/CMFPlone/tests/testSortObjects.py
+++ /dev/null
@@ -1,37 +0,0 @@
-# -*- coding: utf-8 -*-
-# Tests the sortObjects script
-
-from Products.CMFPlone.tests import PloneTestCase
-from Products.CMFPlone.tests import dummy
-
-
-class TestSortObjects(PloneTestCase.PloneTestCase):
-
-    def afterSetUp(self):
-        self.items = [
-            dummy.Item('d', 'fred'),
-            dummy.Item('c', 'wilma'),
-            dummy.Item('b', 'barney'),
-            dummy.Item('a', 'betty'),
-        ]
-        self.items2 = [
-            dummy.Item('D', 'Fred'),
-            dummy.Item('c', 'Wilma'),
-            dummy.Item('B', 'barney'),
-            dummy.Item('a', 'betty'),
-        ]
-
-    def testSortObjectsDefault(self):
-        # Sorts by title_or_id by default
-        sorted = self.portal.sortObjects(self.items)
-        self.assertEqual([x.getId() for x in sorted], ['b', 'a', 'd', 'c'])
-
-    def testSortObjectById(self):
-        # Sorts by passed in method
-        sorted = self.portal.sortObjects(self.items, 'getId')
-        self.assertEqual([x.getId() for x in sorted], ['a', 'b', 'c', 'd'])
-
-    def testSortObjectsIsCaseInsensitive(self):
-        # Sorts by passed in method
-        sorted = self.portal.sortObjects(self.items2, 'getId')
-        self.assertEqual([x.getId() for x in sorted], ['a', 'B', 'c', 'D'])


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-10-23T00:03:07-04:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/28c9618516651d24f088a77744b4e7a945e9a459

document chnages

Files changed:
M CHANGES.rst
M Products/CMFPlone/tests/scripts.txt

diff --git a/CHANGES.rst b/CHANGES.rst
index 202c698..da5a102 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -26,11 +26,16 @@ Breaking changes:
     - ``add_ext_editor.py``
     - ``author_find_content.py``
     - ``create_query_string.py``
+    - ``formatColumns.py`` with tests
     - ``getGlobalPortalRoles.py``
     - ``getPopupScript.py``
     - ``getPortalTypeList.py``
     - ``getPortalTypes.py``
+    - ``getSelectableViews.py`` with tests
+    - ``hasIndexHtml.py`` with tests
+    - ``navigationParent.py`` with test
     - ``plone_log.py``
+    - ``returnNone.py`` with occurence refactored
     - ``sort_modified_ascending.py``
 
 New features:
diff --git a/Products/CMFPlone/tests/scripts.txt b/Products/CMFPlone/tests/scripts.txt
index 6379c0d..1070655 100644
--- a/Products/CMFPlone/tests/scripts.txt
+++ b/Products/CMFPlone/tests/scripts.txt
@@ -4,14 +4,6 @@ Test for scripts
 This test suite tests various python scripts. Ultimately these tests should be
 doctests provided directly in the implementation (as utilities for example).
 
-Tests for returnNone.py
------------------------
-
-This should be self-explanatory:
-
-  >>> self.portal.returnNone() is None
-  True
-
 Tests for reverseList.py
 ------------------------
 


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-10-23T00:14:25-04:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/2a87d2e099220574c8b41717ddaad06b9d5549cb

remove reverseList.py with test

Files changed:
M CHANGES.rst
M Products/CMFPlone/tests/scripts.txt
D Products/CMFPlone/skins/plone_scripts/reverseList.py

diff --git a/CHANGES.rst b/CHANGES.rst
index da5a102..8c09928 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -36,6 +36,7 @@ Breaking changes:
     - ``navigationParent.py`` with test
     - ``plone_log.py``
     - ``returnNone.py`` with occurence refactored
+    - ``reverseList.py`` with test
     - ``sort_modified_ascending.py``
 
 New features:
diff --git a/Products/CMFPlone/skins/plone_scripts/reverseList.py b/Products/CMFPlone/skins/plone_scripts/reverseList.py
deleted file mode 100644
index 31ac5e7..0000000
--- a/Products/CMFPlone/skins/plone_scripts/reverseList.py
+++ /dev/null
@@ -1,18 +0,0 @@
-## Script (Python) "reverseList.py $Revision$"
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=aList
-##title=Reverse A List or Tuple and Return it
-
-myList = []
-
-try:
-    myList = list(aList)[:]
-    myList.reverse()
-except TypeError:
-    pass
-
-return myList
diff --git a/Products/CMFPlone/tests/scripts.txt b/Products/CMFPlone/tests/scripts.txt
index 1070655..6de87a8 100644
--- a/Products/CMFPlone/tests/scripts.txt
+++ b/Products/CMFPlone/tests/scripts.txt
@@ -4,18 +4,6 @@ Test for scripts
 This test suite tests various python scripts. Ultimately these tests should be
 doctests provided directly in the implementation (as utilities for example).
 
-Tests for reverseList.py
-------------------------
-
-Test with a list:
-
-  >>> self.portal.reverseList([1, 2, 3])
-  [3, 2, 1]
-
-Test with a dict:
-
-  >>> self.portal.reverseList((1, 2, 3))
-  [3, 2, 1]
 
 Tests for unique.py
 -------------------


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-10-23T00:39:35-04:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/8d77887aae4ebbcb1880598c1bff9aa7a6ada0f6

remove skins/plone_scripts/getAllowedTypes.py and skins/plone_scripts/getNotAddableTypes.py

Files changed:
M CHANGES.rst
D Products/CMFPlone/skins/plone_scripts/getAllowedTypes.py
D Products/CMFPlone/skins/plone_scripts/getNotAddableTypes.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 8c09928..dccdf30 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -27,7 +27,9 @@ Breaking changes:
     - ``author_find_content.py``
     - ``create_query_string.py``
     - ``formatColumns.py`` with tests
+    - ``getAllowedTypes.py``
     - ``getGlobalPortalRoles.py``
+    - ``getNotAddableTypes.py``
     - ``getPopupScript.py``
     - ``getPortalTypeList.py``
     - ``getPortalTypes.py``
diff --git a/Products/CMFPlone/skins/plone_scripts/getAllowedTypes.py b/Products/CMFPlone/skins/plone_scripts/getAllowedTypes.py
deleted file mode 100644
index d729c7a..0000000
--- a/Products/CMFPlone/skins/plone_scripts/getAllowedTypes.py
+++ /dev/null
@@ -1,13 +0,0 @@
-## Script (Python) "hasAllowedTypes"
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=
-##title=Return a list of the content types allowed here filtered by getNotAddableTypes
-
-filterOut = context.getNotAddableTypes()
-types = context.sortObjects(context.allowedContentTypes())
-
-return [ctype for ctype in types if ctype.getId() not in filterOut]
diff --git a/Products/CMFPlone/skins/plone_scripts/getNotAddableTypes.py b/Products/CMFPlone/skins/plone_scripts/getNotAddableTypes.py
deleted file mode 100644
index 790fc65..0000000
--- a/Products/CMFPlone/skins/plone_scripts/getNotAddableTypes.py
+++ /dev/null
@@ -1,12 +0,0 @@
-## Script (Python) "getNotAddableTypes"
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=
-##title=
-
-# customize this script to filter addable portal types based on
-# context, the current user or other criteria
-return ()


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-10-23T03:36:22-04:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/ef4fb807ad3df469deab51d4b4abc49ba8c6f793

Merge pull request #1807 from plone/get-rif-of-plone_scripts-2

Get rid of plone scripts 2

Files changed:
M CHANGES.rst
M Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.pt
M Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.py
M Products/CMFPlone/tests/scripts.txt
M Products/CMFPlone/tests/testBrowserDefaultScripts.py
M Products/CMFPlone/tests/testSecurity.py
D Products/CMFPlone/skins/plone_scripts/formatColumns.py
D Products/CMFPlone/skins/plone_scripts/getAllowedTypes.py
D Products/CMFPlone/skins/plone_scripts/getNotAddableTypes.py
D Products/CMFPlone/skins/plone_scripts/getSelectableViews.py
D Products/CMFPlone/skins/plone_scripts/hasIndexHtml.py
D Products/CMFPlone/skins/plone_scripts/navigationParent.py
D Products/CMFPlone/skins/plone_scripts/returnNone.py
D Products/CMFPlone/skins/plone_scripts/reverseList.py
D Products/CMFPlone/skins/plone_scripts/sortObjects.py
D Products/CMFPlone/tests/testNavigationParent.py
D Products/CMFPlone/tests/testSortObjects.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 72ee76e..8bc22c8 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -26,11 +26,19 @@ Breaking changes:
     - ``add_ext_editor.py``
     - ``author_find_content.py``
     - ``create_query_string.py``
+    - ``formatColumns.py`` with tests
+    - ``getAllowedTypes.py``
     - ``getGlobalPortalRoles.py``
+    - ``getNotAddableTypes.py``
     - ``getPopupScript.py``
     - ``getPortalTypeList.py``
     - ``getPortalTypes.py``
+    - ``getSelectableViews.py`` with tests
+    - ``hasIndexHtml.py`` with tests
+    - ``navigationParent.py`` with test
     - ``plone_log.py``
+    - ``returnNone.py`` with occurence refactored
+    - ``reverseList.py`` with test
     - ``sort_modified_ascending.py``
 
 New features:
diff --git a/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.pt b/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.pt
index 9f422e8..135c9fa 100644
--- a/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.pt
+++ b/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.pt
@@ -82,8 +82,7 @@
                 method="post"
                 class="pat-formunloadalert pat-formautofocus"
                 tal:attributes="action string:$portal_url/$template_id"
-                tal:define="targetobject context/portal_groupdata;
-                            targetGetProperty nocall:view/group/getProperty | nocall:context/returnNone;">
+                tal:define="targetobject context/portal_groupdata;">
 
               <fieldset>
                   <div class="field" metal:define-slot="name">
@@ -107,7 +106,7 @@
                       <div class="field"
                            tal:define="id property/id;
                                        type property/type;
-                                       propertyvalue python:targetGetProperty(id, None);">
+                                       propertyvalue python:view.get_group_property(id);">
 
                       <label for="value"
                               tal:attributes="for id"
diff --git a/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.py b/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.py
index 5733b45..b52256e 100644
--- a/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.py
+++ b/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.py
@@ -10,6 +10,12 @@
 
 class GroupDetailsControlPanel(UsersGroupsControlPanelView):
 
+    def get_group_property(self, prop_id):
+        try:
+            self.group.getProperty(prop_id, None)
+        except AttributeError:
+            pass
+
     def __call__(self):
         context = aq_inner(self.context)
 
@@ -47,8 +53,11 @@ def __call__(self):
                                               description=description,
                                               REQUEST=self.request)
                 if not success:
-                    msg = _(u'Could not add group ${name}, perhaps a user or group with '
-                            u'this name already exists.', mapping={u'name': addname})
+                    msg = _(
+                        u'Could not add group ${name}, perhaps a user or '
+                        u'group with this name already exists.',
+                        mapping={u'name': addname}
+                    )
                     IStatusMessage(self.request).add(msg, 'error')
                     return self.index()
 
diff --git a/Products/CMFPlone/skins/plone_scripts/formatColumns.py b/Products/CMFPlone/skins/plone_scripts/formatColumns.py
deleted file mode 100644
index bd8e741..0000000
--- a/Products/CMFPlone/skins/plone_scripts/formatColumns.py
+++ /dev/null
@@ -1,27 +0,0 @@
-##parameters=items,columns=3
-##title=format a list of items into columns for better display
-
-# returns a list of lists of items
-
-from zExceptions import Forbidden
-if container.REQUEST.get('PUBLISHED') is script:
-    raise Forbidden('Script may not be published.')
-
-rows = []
-
-i = 0
-l = len(items)
-
-while 1:
-    col = []
-    for n in range(columns):
-        if i >= l:
-            col.append(None)
-        else:
-            col.append(items[i])
-            i = i + 1
-    rows.append(list(col))
-    if i >= l:
-        break
-
-return rows
diff --git a/Products/CMFPlone/skins/plone_scripts/getAllowedTypes.py b/Products/CMFPlone/skins/plone_scripts/getAllowedTypes.py
deleted file mode 100644
index d729c7a..0000000
--- a/Products/CMFPlone/skins/plone_scripts/getAllowedTypes.py
+++ /dev/null
@@ -1,13 +0,0 @@
-## Script (Python) "hasAllowedTypes"
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=
-##title=Return a list of the content types allowed here filtered by getNotAddableTypes
-
-filterOut = context.getNotAddableTypes()
-types = context.sortObjects(context.allowedContentTypes())
-
-return [ctype for ctype in types if ctype.getId() not in filterOut]
diff --git a/Products/CMFPlone/skins/plone_scripts/getNotAddableTypes.py b/Products/CMFPlone/skins/plone_scripts/getNotAddableTypes.py
deleted file mode 100644
index 790fc65..0000000
--- a/Products/CMFPlone/skins/plone_scripts/getNotAddableTypes.py
+++ /dev/null
@@ -1,12 +0,0 @@
-## Script (Python) "getNotAddableTypes"
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=
-##title=
-
-# customize this script to filter addable portal types based on
-# context, the current user or other criteria
-return ()
diff --git a/Products/CMFPlone/skins/plone_scripts/getSelectableViews.py b/Products/CMFPlone/skins/plone_scripts/getSelectableViews.py
deleted file mode 100644
index 5a54cd4..0000000
--- a/Products/CMFPlone/skins/plone_scripts/getSelectableViews.py
+++ /dev/null
@@ -1,24 +0,0 @@
-## Script (Python) "getSelectableViews"
-##title=Get the view templates available from IBrowserDefault on the context
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=
-
-if not context.canSetLayout():
-    return None
-
-# If there is only one template to select and we can't set a default page,
-# it's not interesting to show the menu, so return None
-try:
-    layouts = context.getAvailableLayouts()
-except AttributeError:
-    # Might happen if FTI has not been migrated
-    layouts = ()
-
-if len(layouts) <= 1 and not context.canSetDefaultPage():
-    return None
-else:
-    return layouts
diff --git a/Products/CMFPlone/skins/plone_scripts/hasIndexHtml.py b/Products/CMFPlone/skins/plone_scripts/hasIndexHtml.py
deleted file mode 100644
index b4f686e..0000000
--- a/Products/CMFPlone/skins/plone_scripts/hasIndexHtml.py
+++ /dev/null
@@ -1,21 +0,0 @@
-## Script (Python) "hasIndexHtml"
-##title=Find out if this folder has an index_html page
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=
-
-from AccessControl import Unauthorized
-from Products.CMFPlone.utils import base_hasattr
-
-# It's silly but because this is often called on the parent folder, we must
-# ensure we have permission.
-try:
-    if not context.isPrincipiaFolderish:
-        return False
-except Unauthorized:
-    return False
-
-return 'index_html' in context
diff --git a/Products/CMFPlone/skins/plone_scripts/navigationParent.py b/Products/CMFPlone/skins/plone_scripts/navigationParent.py
deleted file mode 100644
index 1906341..0000000
--- a/Products/CMFPlone/skins/plone_scripts/navigationParent.py
+++ /dev/null
@@ -1,81 +0,0 @@
-## Script (Python) "navigationParent"
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=obj=None,templateId=None,fallThroughDefaultPage=True,checkPermissions=[]
-##title=Returns the appropriate url for the parent object
-
-# - If obj is given, use this as the object to find the parent of, else
-# use the context.
-#
-# - If fallThroughDefaultPage is set to True (default), then if obj/context is
-# the default page (index_html or default_page) of its parent folder, get the
-# parent of that folder. If you intend to link straight to the returned value
-# this is probably what you want - else Zope will show the parent object, which
-# will in turn show obj again (as it is the default page). However, if you
-# intend to append a page template to the link, set this to false to get the
-# "real" parent. folder_contents does this.
-#
-# - If you want to make sure that the current user has permissions other than
-# "View" on the parent object, pass these in as a list in checkPermissions.
-# folder_contents uses this to check the "List folder contents" permission,
-# for example.
-#
-# - templateId is for historical reasons, ignored
-#
-# Returns the absolute url to the parent object, or None if it cannot be
-# found or accessed
-
-from ZODB.POSException import ConflictError
-from Products.CMFCore.utils import getToolByName, getUtilityByInterfaceName
-from AccessControl import Unauthorized
-
-portal = getUtilityByInterfaceName('Products.CMFCore.interfaces.ISiteRoot')
-plone_utils = getToolByName(context, 'plone_utils')
-portal_membership = getToolByName(context, 'portal_membership')
-
-if obj is None:
-    obj = context
-
-checkPermission = portal_membership.checkPermission
-
-if fallThroughDefaultPage:
-    # In the case that we have an index_html inside and index_html,
-    # we actually need to go the ultimate non-default parent
-    try:
-        while obj is not None and plone_utils.isDefaultPage(obj):
-            obj = obj.aq_parent
-    except Unauthorized:
-        return None
-
-# Abort if we are at the root of the portal
-if obj.getPhysicalPath() == portal.getPhysicalPath():
-    return None
-
-# Get the parent. If we can't get it (unauthorized), use the portal
-try:
-    parent = obj.aq_parent
-except ConflictError:
-    raise
-except:
-    return None
-
-# We may get an unauthorized exception if we're not allowed to access#
-# the parent. In this case, return None
-try:
-    if getattr(parent, 'getId', None) is None or \
-           parent.getId() == 'talkback':
-        # Skip any Z3 views that may be in the acq tree;
-        # Skip past the talkback container if that's where we are
-        parent = parent.aq_parent
-
-    for perm in checkPermissions:
-        if not checkPermission(perm, parent):
-            return None
-
-    return parent.absolute_url()
-
-except Unauthorized:
-    return None
diff --git a/Products/CMFPlone/skins/plone_scripts/returnNone.py b/Products/CMFPlone/skins/plone_scripts/returnNone.py
deleted file mode 100644
index 00700b5..0000000
--- a/Products/CMFPlone/skins/plone_scripts/returnNone.py
+++ /dev/null
@@ -1,12 +0,0 @@
-## Script (Python) "returnNone"
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=*args,**kw
-##title=Return None
-
-# a simple script to give back 'None'. Useful to masqurade as some other method
-# that doesn't really exist, but must be callable.
-return None
diff --git a/Products/CMFPlone/skins/plone_scripts/reverseList.py b/Products/CMFPlone/skins/plone_scripts/reverseList.py
deleted file mode 100644
index 31ac5e7..0000000
--- a/Products/CMFPlone/skins/plone_scripts/reverseList.py
+++ /dev/null
@@ -1,18 +0,0 @@
-## Script (Python) "reverseList.py $Revision$"
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=aList
-##title=Reverse A List or Tuple and Return it
-
-myList = []
-
-try:
-    myList = list(aList)[:]
-    myList.reverse()
-except TypeError:
-    pass
-
-return myList
diff --git a/Products/CMFPlone/skins/plone_scripts/sortObjects.py b/Products/CMFPlone/skins/plone_scripts/sortObjects.py
deleted file mode 100644
index 7f710b6..0000000
--- a/Products/CMFPlone/skins/plone_scripts/sortObjects.py
+++ /dev/null
@@ -1,21 +0,0 @@
-## Script (Python) "sortObject"
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=contents, method='title_or_id'
-##title=sorts and pre-filters objects
-
-
-def get_sortable(o):
-    val = getattr(o, method)()
-    try:
-        val = val.lower()
-    except AttributeError:
-        pass
-    return val
-
-aux = [(get_sortable(o), o) for o in contents]
-aux.sort()
-return [x[1] for x in aux]
diff --git a/Products/CMFPlone/tests/scripts.txt b/Products/CMFPlone/tests/scripts.txt
index 6379c0d..6de87a8 100644
--- a/Products/CMFPlone/tests/scripts.txt
+++ b/Products/CMFPlone/tests/scripts.txt
@@ -4,26 +4,6 @@ Test for scripts
 This test suite tests various python scripts. Ultimately these tests should be
 doctests provided directly in the implementation (as utilities for example).
 
-Tests for returnNone.py
------------------------
-
-This should be self-explanatory:
-
-  >>> self.portal.returnNone() is None
-  True
-
-Tests for reverseList.py
-------------------------
-
-Test with a list:
-
-  >>> self.portal.reverseList([1, 2, 3])
-  [3, 2, 1]
-
-Test with a dict:
-
-  >>> self.portal.reverseList((1, 2, 3))
-  [3, 2, 1]
 
 Tests for unique.py
 -------------------
diff --git a/Products/CMFPlone/tests/testBrowserDefaultScripts.py b/Products/CMFPlone/tests/testBrowserDefaultScripts.py
index 9090e3e..3af67b2 100644
--- a/Products/CMFPlone/tests/testBrowserDefaultScripts.py
+++ b/Products/CMFPlone/tests/testBrowserDefaultScripts.py
@@ -5,31 +5,6 @@
 class TestBrowserDefaultScripts(PloneTestCase):
     """Tests the browser default and folder-default page scripts"""
 
-    def testNoIndexHtml(self):
-        # A folder shouldn't have an index_html object at instantiation time
-        self.assertFalse(self.folder.hasIndexHtml())
-
-    def testHasIndexHtml(self):
-        # Make sure we can determine if a container contains a index_html
-        # object
-        self.folder.invokeFactory('Document', 'index_html',
-                                  title='Test index')
-        self.assertTrue(self.folder.hasIndexHtml())
-
-    def testGetSelectableViewsWithViews(self):
-        # Assume folders have at least two possible views to chose from
-        views = [v[0] for v in self.folder.getSelectableViews()]
-        self.assertTrue(views)
-        self.assertTrue('folder_listing' in views)
-        self.assertTrue('atct_album_view' in views)
-
-    def testGetSelectableViewsWithoutViews(self):
-        # Assume documents have only one view
-        self.folder.invokeFactory('Document', 'test',
-                                  title='Test default page')
-        doc = getattr(self.folder, 'test')
-        self.assertFalse(doc.getSelectableViews())
-
     def testSetDefaultPageWithoutPage(self):
         # Make sure we can't define a default page if no object in folder
         self.assertTrue(self.folder.canSelectDefaultPage())
diff --git a/Products/CMFPlone/tests/testNavigationParent.py b/Products/CMFPlone/tests/testNavigationParent.py
deleted file mode 100644
index 046a25a..0000000
--- a/Products/CMFPlone/tests/testNavigationParent.py
+++ /dev/null
@@ -1,120 +0,0 @@
-# -*- coding: utf-8 -*-
-from Products.CMFPlone.tests import PloneTestCase
-
-
-class TestNavigationParent(PloneTestCase.PloneTestCase):
-
-    def afterSetUp(self):
-        self.folder.invokeFactory('Folder', 'f1', title='Folder 1')
-        self.f1 = getattr(self.folder, 'f1')
-        self.f1.invokeFactory('Folder', 'f2', title='Folder 2')
-        self.f2 = getattr(self.f1, 'f2')
-
-    def testPortalRoot(self):
-        self.assertTrue(self.portal.navigationParent() is None)
-
-    def testFolderInPortal(self):
-        self.setRoles(['Manager'])
-        self.portal.invokeFactory('Folder', 'pf', title='portal folder')
-        pf = getattr(self.portal, 'pf')
-        self.assertEqual(pf.navigationParent(), self.portal.absolute_url())
-
-    def testFolderInFolder(self):
-        self.assertEqual(self.f2.navigationParent(), self.f1.absolute_url())
-
-    def testDocumentInFolder(self):
-        self.f1.invokeFactory('Document', 'd1', title='Document 1')
-        d1 = getattr(self.f1, 'd1')
-        self.assertEqual(d1.navigationParent(), self.f1.absolute_url())
-
-    # Standard behaviour for default_page/index_html - go up two levels,
-    # since going to parent will just end you up at the same object again
-
-    def testIndexHtmlInFolder(self):
-        self.f2.invokeFactory('Document', 'index_html', title='Document 1')
-        d1 = getattr(self.f2, 'index_html')
-        self.assertEqual(d1.navigationParent(), self.f1.absolute_url())
-
-    def testDefaultPageInFolder(self):
-        self.f2.invokeFactory('Document', 'd1', title='Document 1')
-        d1 = getattr(self.f2, 'd1')
-        self.f2.setDefaultPage('d1')
-        self.assertEqual(d1.navigationParent(), self.f1.absolute_url())
-
-    def testFolderishIndexHtmlInFolder(self):
-        self.f2.invokeFactory('Folder', 'index_html', title='Index folder')
-        ih = getattr(self.f2, 'index_html')
-        self.assertEqual(ih.navigationParent(), self.f1.absolute_url())
-
-    def testFolderishDefaultPageInFolder(self):
-        self.f1.setDefaultPage('f2')
-        self.assertEqual(self.f2.navigationParent(),
-                         self.folder.absolute_url())
-
-    # Optional behaviour - don't fall through, go straight to parent.
-    # This is what we do on folder_contents, for example. It's only sensible
-    # if you intend to link/redirect to an object + a page template
-
-    def testNoFallThroughIndexHtmlInFolder(self):
-        self.f2.invokeFactory('Document', 'index_html', title='Document 1')
-        d1 = getattr(self.f2, 'index_html')
-        self.assertEqual(d1.navigationParent(fallThroughDefaultPage=False),
-                         self.f2.absolute_url())
-
-    def testNoFallThroughDefaultPageInFolder(self):
-        self.f2.invokeFactory('Document', 'd1', title='Document 1')
-        d1 = getattr(self.f2, 'd1')
-        self.f2.setDefaultPage('d1')
-        self.assertEqual(d1.navigationParent(fallThroughDefaultPage=False),
-                         self.f2.absolute_url())
-
-    def testNoFallThroughFolderishIndexHtmlInFolder(self):
-        self.f2.invokeFactory('Folder', 'index_html', title='Index folder')
-        ih = getattr(self.f2, 'index_html')
-        self.assertEqual(ih.navigationParent(fallThroughDefaultPage=False),
-                         self.f2.absolute_url())
-
-    def testNoFallThroughFolderishDefaultPageInFolder(self):
-        self.f1.setDefaultPage('f2')
-        self.assertEqual(self.f2.navigationParent(
-            fallThroughDefaultPage=False),
-            self.f1.absolute_url())
-
-    # Very special case - if you have an index_html inside an index_html...
-    def testRecursiveDefaultPage(self):
-        self.f1.setDefaultPage('f2')
-        self.f2.invokeFactory('Folder', 'index_html',
-                              title='index index index')
-        ih = getattr(self.f2, 'index_html')
-        self.assertEqual(ih.navigationParent(), self.folder.absolute_url())
-
-    # Permission checks on parent
-
-    def testNoParentViewPermission(self):
-        self.setRoles(['Manager'])
-        self.portal.invokeFactory('Folder', 'pf', title='portal folder')
-        pf = getattr(self.portal, 'pf')
-        pf.invokeFactory('Folder', 'lf', title='listable folder')
-        lf = getattr(pf, 'lf')
-        pf.manage_permission('List folder contents', ['Manager'], 0)
-        pf.manage_permission('View', ['Manager'], 0)
-        lf.manage_permission('List folder contents',
-                             ['Member', 'Manager', 'Owner'], 0)
-        lf.manage_permission('View', ['Member', 'Manager', 'Owner'], 0)
-        self.setRoles(['Member'])
-
-        self.assertTrue(lf.navigationParent() is None)
-
-    def testNoParentListPermissions(self):
-        self.setRoles(['Manager'])
-        self.portal.invokeFactory('Folder', 'pf', title='portal folder')
-        pf = getattr(self.portal, 'pf')
-        pf.invokeFactory('Folder', 'lf', title='listable folder')
-        lf = getattr(pf, 'lf')
-        pf.manage_permission('List folder contents', ['Manager'], 0)
-        lf.manage_permission('List folder contents',
-                             ['Member', 'Manager', 'Owner'], 0)
-        self.setRoles(['Member'])
-
-        self.assertTrue(lf.navigationParent(
-            checkPermissions=['List folder contents']) is None)
diff --git a/Products/CMFPlone/tests/testSecurity.py b/Products/CMFPlone/tests/testSecurity.py
index 502c8d2..c2268b4 100644
--- a/Products/CMFPlone/tests/testSecurity.py
+++ b/Products/CMFPlone/tests/testSecurity.py
@@ -185,9 +185,14 @@ def test_utranslate(self):
     def test_createObject(self):
         res = self.publish('/plone/createObject?type_name=File&id=${foo}')
         self.assertEqual(302, res.status)
-        self.assertTrue(res.headers['location'].startswith(
-            'http://nohost/plone/portal_factory/File/${foo}/edit?_authenticator='))
+        self.assertTrue(
+            res.headers['location'].startswith(
+                'http://nohost/plone/portal_factory/File/${foo}/'
+                'edit?_authenticator='
+            )
+        )
 
     def test_formatColumns(self):
+        # formatColumns is unused and was removed
         res = self.publish('/plone/formatColumns?items:list=')
-        self.assertEqual(403, res.status)
+        self.assertIn(res.status, [403, 404])
diff --git a/Products/CMFPlone/tests/testSortObjects.py b/Products/CMFPlone/tests/testSortObjects.py
deleted file mode 100644
index 15d642c..0000000
--- a/Products/CMFPlone/tests/testSortObjects.py
+++ /dev/null
@@ -1,37 +0,0 @@
-# -*- coding: utf-8 -*-
-# Tests the sortObjects script
-
-from Products.CMFPlone.tests import PloneTestCase
-from Products.CMFPlone.tests import dummy
-
-
-class TestSortObjects(PloneTestCase.PloneTestCase):
-
-    def afterSetUp(self):
-        self.items = [
-            dummy.Item('d', 'fred'),
-            dummy.Item('c', 'wilma'),
-            dummy.Item('b', 'barney'),
-            dummy.Item('a', 'betty'),
-        ]
-        self.items2 = [
-            dummy.Item('D', 'Fred'),
-            dummy.Item('c', 'Wilma'),
-            dummy.Item('B', 'barney'),
-            dummy.Item('a', 'betty'),
-        ]
-
-    def testSortObjectsDefault(self):
-        # Sorts by title_or_id by default
-        sorted = self.portal.sortObjects(self.items)
-        self.assertEqual([x.getId() for x in sorted], ['b', 'a', 'd', 'c'])
-
-    def testSortObjectById(self):
-        # Sorts by passed in method
-        sorted = self.portal.sortObjects(self.items, 'getId')
-        self.assertEqual([x.getId() for x in sorted], ['a', 'b', 'c', 'd'])
-
-    def testSortObjectsIsCaseInsensitive(self):
-        # Sorts by passed in method
-        sorted = self.portal.sortObjects(self.items2, 'getId')
-        self.assertEqual([x.getId() for x in sorted], ['a', 'B', 'c', 'D'])


