Repository: plone.staticresources


Branch: refs/heads/master
Date: 2019-06-18T17:43:18+02:00
Author: Davi Lima (davilima6) <davilima6@gmail.com>
Commit: https://github.com/plone/plone.staticresources/commit/c3af8f3b6a6358f46d1bafdf970665fa8aa4caf3

Add information about entry points; also improve text to be more compact

Files changed:
M README.rst

b'diff --git a/README.rst b/README.rst\nindex 1917f8f..d659b2a 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -2,20 +2,20 @@\n plone.staticresources\n =====================\n \n-Static JS and CSS resources for Plone.\n+This add-on contains all static JavaScript and CSS resources used by Plone.\n \n-\n-This add-on contains all JavaScript and CSS resources used by Plone.\n-\n-Prior to Plone 5.2, they were located in ``static/`` directory of ``Products.CMFPlone`` package.\n-\n-Due to the specific tooling and workflows used to build frontend resources, and also the different maintenance and release needs of ``Products.CMFPlone`` itself, Plone static resources are now distributed in this package.\n-For a complete list of reasons, read the `PLIP 1653 <https://github.com/plone/Products.CMFPlone/issues/1653>`_.\n+Between Plone 5.0 and 5.1 these resources were located in ``static/``\n+directory of ``Products.CMFPlone`` package. Starting with Plone 5.2 they\'re\n+distributed in this independent package due to the specific tooling and\n+workflows used to build frontend resources and also the different maintenance\n+and release needs of ``Products.CMFPlone``. For a complete list of reasons,\n+read `PLIP 1653 <https://github.com/plone/Products.CMFPlone/issues/1653>`_.\n \n .. note::\n-\n-  A note on yarn: we require the use of yarn, because it supports installing packages in a custom named directory, which npm does not (even using ``--prefix``, ``node_modules`` is hardcoded).\n-  Our package directory is located at: ``src/plone/staticresources/static/components``.\n+  A note on ``yarn``: we require the use of yarn, because it supports\n+  installing packages in a custom named directory, which npm does not (even\n+  using ``--prefix``, ``node_modules`` is hardcoded). Our package directory is\n+  located at: ``src/plone/staticresources/static/components``.\n \n \n Target audience\n@@ -23,57 +23,199 @@ Target audience\n \n This documentation aims at:\n \n-Integrators and Developers\n-^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-Who want to customize or maintain the front end of a Plone site for their customers:\n+- **Theme Authors:** who want to change the look and feel of a Plone site and\n+  need to:\n \n-- upgrade existing versions or install new ``npm`` packages.\n+  - understand how to correctly bundle changes made into existing or new\n+    frontend code\n \n-- integrate new JavaScript/CSS behavior, eventually wrapped in a ``pattern`` for optimal integration and reuse within Plone front end ecosystem.\n+- **Integrators and Developers:** who want to customize or maintain the front\n+  end of a Plone site for their customers:\n \n+  - upgrade existing versions or install new ``npm`` packages.\n \n-Themer authors\n-^^^^^^^^^^^^^^\n+  - integrate new JavaScript/CSS behavior, eventually wrapped in a ``pattern``\n+    for optimal integration and reuse within Plone front end ecosystem.\n \n-Who want to change the look and feel of a Plone site and need to:\n+- **Plone Core Developers:** who want to fix Plone bugs or enhance this add-on\n \n-- understand how to correctly bundle changes from existing or new frontend code.\n \n+Compiling bundles\n+-----------------\n \n-Plone Core Developers\n-^^^^^^^^^^^^^^^^^^^^^\n+The front end resources in this package should be updated with the script\n+called ``plone-compile-resources``, available in the ``bin`` directory of a\n+default Plone buildout installation. This script compiles the final CSS and JS\n+resources that will be served to end users.\n \n-Who want to help enhance this add-on itself.\n+Building the ``plone`` bundle::\n \n+  ./bin/plone-compile-resources -b plone\n \n-Compiling bundles\n------------------\n+Building the ``plone-logged-in`` bundle::\n \n-The default Plone buildout configuration adds an executable in ``./bin/plone-compile-resources``.\n-This script generates compiled bundles (normal, minified and respective maps) in ``plone/staticresources/static/`` or whereever the ``csscompilation`` and ``jscompilation`` attributes of the bundle registration in the resource registry points to.\n+  ./bin/plone-compile-resources -b plone-logged-in\n \n .. note::\n+  You can see all the options of this executable by running\n+  ``./bin/plone-compile-resources --help``\n \n-  You can see all the options of this executable by running ``./bin/plone-compile-resources --help``\n+Resources, Bundles, Patterns and the Resource Registry\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+The ``plone-compile-resources`` script collects Resources from source packages\n+(e.g. ``mockup``) and compiles them in ``plone/staticresources/static/`` into\n+minified versions with source maps and, for JavaScript only, also into an\n+unminified version. The output directory is configurable by using\n+``csscompilation`` and ``jscompilation`` attributes of the bundle registration.\n \n-Building the ``plone`` bundle::\n+Bundles are groups of resources. By default Plone comes configured to serve two\n+main bundles:\n \n-  ./bin/plone-compile-resources -b plone\n+- ``plone``: containing JS and CSS used for anonymous visitors\n+- ``plone-logged-in``: with additional resources for authenticated visitors,\n+  e.g. for editor and management user interfaces\n \n+Finally Plone encapsulates most of its CSS and JS into units called Patterns\n+that live in the ``mockup`` package. Although Patterns provide their own\n+registered Resources, those are not registered to Plone main bundles. Instead,\n+they are imported through native LESS and Require JS "entry points" that live\n+in ``plone.staticresource``:\n \n-Building the ``plone-logged-in`` bundle::\n+- `plone/staticresources/static/plone.js <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone.js>`_\n+- `plone/staticresources/static/plone.less <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone.less>`_\n+- `plone/staticresources/static/plone-logged-in.js <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone-logged-in.js>`_\n+- `plone/staticresources/static/plone-logged-in.less <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone-logged-in.less>`_\n \n-  ./bin/plone-compile-resources -b plone-logged-in\n+When editing a pattern (e.g. in ``mockup`` package), it\'s important to know for\n+which bundle it\'s registered, which can be done by checking where it\'s imported\n+in the entry points above. The bundle name will be useful as parameter for\n+``plone-compile-resources`` script.\n+\n+.. note::\n+  Patterns are also available as independent resources in ``Resource\n+  Registries`` control panel but they are not registered to default Plone\n+  bundles, which instead use the entry point approach. Pattern\'s resources may be\n+  useful if needed to be injected in specific views.\n+\n+In production mode, Plone will serve static resources in URLs similar to:\n+\n+- http://localhost:8080/++plone++static/++unique++TIMESTAMP/plone-compiled.min.js\n+- http://localhost:8080/++plone++static/++unique++TIMESTAMP/plone-compiled.css\n+- http://localhost:8080/++plone++static/++unique++TIMESTAMP/plone-logged-in-compiled.min.js\n+- http://localhost:8080/++plone++static/++unique++TIMESTAMP/plone-logged-in-compiled.css\n+\n+If Plone is configured to serve singles files, URLs will be similar to:\n+\n+- http://localhost:8080//++plone++production/++unique++TIMESTAMP/default.js\n+- http://localhost:8080//++plone++production/++unique++TIMESTAMP/default.css\n+\n+In development mode, Plone will omit timestamp from path and serve fresh copies\n+of the resources of the selected bundle(s). Those are compiled in-browser,\n+on the fly for each page load and requested through XHR requests to URLs like:\n+\n+- http://localhost:8080/++resource++plone.js\n+- http://localhost:8080/++plone++static/plone.less\n+- http://localhost:8080/++resource++plone-logged-in.js\n+- http://localhost:8080/++plone++static/plone-logged-in.less\n+\n+These entry points will then cause Patterns themselves to be loaded, through\n+in-browser XHR requests to URLs like:\n+\n+- http://localhost:8080/Plone/++resource++mockup/livesearch/pattern.js\n+- http://localhost:8080/Plone/++resource++mockup/livesearch/pattern.livesearch.less\n+\n+\n+Development mode\n+^^^^^^^^^^^^^^^^\n+\n+When fixing Plone bugs or improving functionality:\n+\n+- Dependencies upgrades (e.g. ``moment.js``) should be done in ``mockup`` and\n+  after the PR is merged, propagated here (i.e. static resources needs to be\n+  recompiled)\n+- Likewise, CSS and JS should be developed not in ``plone.staticresources`` but\n+  in their own package\'s source (for instance, in ``mockup``)\n+- To see the new changes in the browser, enable ``Development Mode`` in\n+  ``Resource Registries`` control panel. Next the desired bundle (that contains\n+  the modified files) must be set to either "Develop JavaScript", "Develop CSS"\n+  or both. This causes each of the bundle resources to be served individually,\n+  easing development. In this case, bundle resources are served from the source\n+  package (e.g. ``mockup``) instead of ``plone.staticresources``.\n+- To identify which bundle contains the modified resource, see section\n+  "Entry Points" below. Keep in mind the more bundles selected for development\n+  mode the slower are page reloads, so it\'s recommended to select only what\'s\n+  being developed.\n+- Alternatively you may run ``./bin/plone-compile-resources`` between changes\n+  and avoid Development Mode\'s in-browser compilation (fastest browser loading\n+  time).\n+\n+\n+Entry Points\n+------------\n+\n+The current list of registered patterns for each entry point is available in:\n+\n+- `plone/staticresources/static/plone.js <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone.js>`_\n+- `plone/staticresources/static/plone.less <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone.less>`_\n+- `plone/staticresources/static/plone-logged-in.js <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone-logged-in.js>`_\n+- `plone/staticresources/static/plone-logged-in.less <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone-logged-in.less>`_\n+\n+Here\'s a snapshot:\n+\n+For anonymous users\n+^^^^^^^^^^^^^^^^^^^\n+\n++---------------------------------------+------------------------------------+\n+| JS                                    | LESS                               |\n++=======================================+====================================+\n+| - jquery                              | - mockup-patterns-autotoc          |\n+| - pat-registry                        | - mockup-patterns-livesearch       |\n+| - mockup-patterns-base                | - mockup-patterns-markspeciallinks |\n+| - mockup-patterns-autotoc             | - mockup-patterns-modal            |\n+| - mockup-patterns-contentloader       | - mockup-patterns-pickadate        |\n+| - mockup-patterns-cookietrigger       | - mockup-patterns-select2          |\n+| - mockup-patterns-formautofocus       |                                    |\n+| - mockup-patterns-formunloadalert     |                                    |\n+| - mockup-patterns-livesearch          |                                    |\n+| - mockup-patterns-markspeciallinks    |                                    |\n+| - mockup-patterns-modal               |                                    |\n+| - mockup-patterns-moment              |                                    |\n+| - mockup-patterns-pickadate           |                                    |\n+| - mockup-patterns-navigationmarker    |                                    |\n+| - mockup-patterns-preventdoublesubmit |                                    |\n+| - mockup-patterns-select2             |                                    |\n+| - bootstrap-collapse                  |                                    |\n+| - bootstrap-dropdown                  |                                    |\n+| - bootstrap-tooltip                   |                                    |\n++---------------------------------------+------------------------------------+\n+\n+For logged-in users\n+^^^^^^^^^^^^^^^^^^^\n+\n++--------------------------------------------+--------------------------------+\n+| JS                                         | LESS                           |\n++============================================+================================+\n+| - mockup-patterns-inlinevalidation         | - mockup-patterns-querystring  |\n+| - mockup-patterns-querystring              | - mockup-patterns-recurrence   |\n+| - mockup-patterns-recurrence               | - mockup-patterns-relateditems |\n+| - mockup-patterns-relateditems             | - mockup-patterns-structure    |\n+| - mockup-patterns-structure                | - mockup-patterns-tinymce      |\n+| - mockup-patterns-structureupdater         | - mockup-patterns-upload       |\n+| - mockup-patterns-textareamimetypeselector | - plone-patterns-toolbar       |\n+| - mockup-patterns-tinymce                  |                                |\n+| - plone-patterns-portletmanager            |                                |\n+| - plone-patterns-toolbar                   |                                |\n++--------------------------------------------+--------------------------------+\n \n \n Developing patterns\n -------------------\n \n-All JavaScript code in this package is downloaded via ``yarn`` into ``src/plone/staticresources/static/components``.\n-Nothing in that directory should be manually edited.\n-If you need to fix something, do it in the original repository and eventually upgrade its version (next section).\n+All JavaScript code in this package is downloaded via ``yarn`` into\n+``src/plone/staticresources/static/components``. Nothing in that directory\n+should be manually edited. If you need to fix something, do it in the original\n+repository and eventually upgrade its version (next section).\n \n For Mockup, the original repository is: https://github.com/plone/mockup/\n \n@@ -83,27 +225,36 @@ For Patternslib, visit: http://github.com/patternslib/Patterns\n How to upgrade the resources in this package\n --------------------------------------------\n \n-- Increase ``npm`` package versions in ``package.json``, in sections ``dependencies`` or ``devDependencies``.\n+1. Increase ``npm`` package versions in ``package.json``, in sections\n+   ``dependencies`` or ``devDependencies``.\n \n-- Run ``yarn upgrade`` (cannot be ``npm``).\n+2. Run ``yarn upgrade`` (cannot be ``npm``)\n \n-- Run ``./bin/plone-compile-resources -b plone``, ``./bin/plone-compile-resources -b plone-logged-in`` or whatever bundle you are going to build in your buildout\'s root directory.\n+3. Run ``./bin/plone-compile-resources -b plone`` or\n+   ``./bin/plone-compile-resources -b plone-logged-in`` (whichever bundle\n+   you need to re-build).\n \n-- Increase the ``last_compilation`` date in ``src/plone/staticresources/profiles/default/registry/bundles.xml``.\n+4. Increase the ``last_compilation`` date in\n+   ``src/plone/staticresources/profiles/default/registry/bundles.xml``.\n \n-- Submit a PR and run the tests on Jenkins.\n+5. Submit a PR and run the tests on Jenkins.\n \n \n How to generate the ``plone-compile-resources`` script\n ------------------------------------------------------\n \n-The ``plone-compile-resources`` script can be used to compile bundles from the command line.\n-In short, the script starts up a Plone instance, reads the resources and bundles configured in the registry and compiles a JS/CSS bundle based on that configuration. See ``plone-compile-resources --help`` for more information.\n+The ``plone-compile-resources`` script can be used to compile bundles from the\n+command line. In short, the script starts up a Plone instance, reads the\n+resources and bundles configured in the registry and compiles a JS/CSS bundle\n+based on that configuration. See ``plone-compile-resources --help`` for more\n+information.\n \n-When using buildout, ``plone-compile-resources`` script is automatically generated.\n-If you use a custom buildout, you might need to add something similar to:\n+When using buildout, ``plone-compile-resources`` script is automatically\n+generated. If you use a custom buildout, you might need to add something\n+similar to:\n \n .. code-block:: ini\n+\n   [buildout]\n   parts =\n     # ...\n@@ -125,75 +276,50 @@ If you use a custom buildout, you might need to add something similar to:\n What has changed since Plone 5.1\n --------------------------------\n \n-- All static resources - bundle resources, compiled bundles, external packages - from ``Products.CMFPlone.static`` have been moved here.\n-\n-- The bundle and resource registrations from ``Products.CMFPlone``\'s ``dependencies`` profile have also been moved here.\n-\n-- The ``plone-compile-resources`` script has been moved here.\n-\n-- The ``thememapper`` bundle from ``plone.app.theming`` has been moved here.\n-\n-- The ``plone.resourceeditor`` bundle from ``plone.resourceeditor`` package has been moved here.\n-\n-- The ``toolbar`` pattern from ``Products.CMFPlone.static.toolbar`` has been moved to ``mockup`` package.\n-\n+- The ``toolbar`` pattern from ``Products.CMFPlone.static.toolbar`` has been\n+  moved to ``mockup`` package.\n - ``mockup`` package now uses npm registry and yarn instead of bower.\n \n+Besides the following has been moved in here:\n \n-The resource registry and it\'s production and development modes\n----------------------------------------------------------------\n-\n-The files in  the directory ``plone/staticresources/static/`` are served by Plone.\n-In production mode Plone will combine the bundles (if configured) into single files.\n-The URLs will be similar to:\n+- All static resources from ``Products.CMFPlone.static``: bundle resources,\n+  compiled bundles, external packages\n+- Bundle and resource registrations from ``Products.CMFPlone``\'s\n+  ``dependencies`` profile\n+- ``plone-compile-resources`` script\n+- ``thememapper`` bundle from ``plone.app.theming``\n+- ``plone.resourceeditor`` bundle from ``plone.resourceeditor``\n \n-- http://localhost:8080//++plone++production/++unique++2019-01-08%2006%3A53%3A49.000248/default.js\n-- http://localhost:8080//++plone++production/++unique++2019-01-08%2006%3A53%3A49.000248/default.css\n \n+More on the Resource Registry and its modes\n+-------------------------------------------\n \n-In development mode all bundles are served separately as non-compiled versions.\n-The URLs will be similar to:\n-\n-\n-- http://localhost:8080/++resource++plone.js\n-- http://localhost:8080/++resource++plone-logged-in.js\n-- http://localhost:8080/++plone++static/plone.less\n-- http://localhost:8080//++plone++static/plone-logged-in.less\n-\n-\n-If you set the resource registry to development mode you can set "Develop JavaScript" and "Develop CSS" for individual bundles.\n-Then each of the bundle resources are served individually, which makes it easy to develop on Mockup.\n-In this case, the bundle resources are served from the Mockup package instead of plone.staticresources.\n-The URLs will be similar to:\n-\n-http://localhost:8080/Plone/++resource++mockup/livesearch/pattern.js\n-http://localhost:8080/Plone/++resource++mockup/livesearch/pattern.livesearch.less\n-\n-Have a look on how plone.staticresources and mockup register their resources:\n+Have a look on how ``plone.staticresources`` and ``mockup`` register their\n+resources:\n \n In ZCML:\n \n-https://github.com/plone/mockup/blob/master/mockup/configure.zcml\n-https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/configure.zcml\n+- https://github.com/plone/mockup/blob/master/mockup/configure.zcml\n+- https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/configure.zcml\n \n In the resource registry:\n \n-https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/profiles/default/registry/bundles.xml\n-https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/profiles/default/registry/resources.xml\n-\n+- https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/profiles/default/registry/bundles.xml\n+- https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/profiles/default/registry/resources.xml\n \n For more information on the Plone resource registry see the documentation at:\n \n-https://docs.plone.org/adapt-and-extend/theming/resourceregistry.html\n+- https://docs.plone.org/adapt-and-extend/theming/resourceregistry.html\n \n \n Warning\n -------\n \n-If you update ``r.js`` or ``less``, you willl need to manually re-apply a patch that gives us cache busting resource downloads so we can build through the web. See:\n+If you update ``r.js`` or ``less``, you will need to manually re-apply a patch\n+that gives us cache busting resource downloads so we can build through the web.\n+See:\n \n - https://github.com/plone/Products.CMFPlone/commit/2d3865805efc6b72dce236eb68e502d8c57717b6\n-\n - https://github.com/plone/Products.CMFPlone/commit/bd1f9ba99d1ad40bb7fe1c00eaa32b8884aae5e2\n \n \n'

Repository: plone.staticresources


Branch: refs/heads/master
Date: 2019-06-18T17:52:51+02:00
Author: Davi Lima (davilima6) <davilima6@gmail.com>
Commit: https://github.com/plone/plone.staticresources/commit/95680853805b0cb91274f6803240203e3d7dcad3

Rewrap lines to 120 chars max

Recommended max is 130 but 120 is a more common default, including in Prettier

Files changed:
M README.rst

b'diff --git a/README.rst b/README.rst\nindex d659b2a..9ae4b86 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -4,18 +4,15 @@ plone.staticresources\n \n This add-on contains all static JavaScript and CSS resources used by Plone.\n \n-Between Plone 5.0 and 5.1 these resources were located in ``static/``\n-directory of ``Products.CMFPlone`` package. Starting with Plone 5.2 they\'re\n-distributed in this independent package due to the specific tooling and\n-workflows used to build frontend resources and also the different maintenance\n-and release needs of ``Products.CMFPlone``. For a complete list of reasons,\n-read `PLIP 1653 <https://github.com/plone/Products.CMFPlone/issues/1653>`_.\n+Between Plone 5.0 and 5.1 these resources were located in ``static/`` directory of ``Products.CMFPlone`` package.\n+Starting with Plone 5.2 they\'re distributed in this independent package due to the specific tooling and workflows used\n+to build frontend resources and also the different maintenance and release needs of ``Products.CMFPlone``. For a\n+complete list of reasons, read `PLIP 1653 <https://github.com/plone/Products.CMFPlone/issues/1653>`_.\n \n .. note::\n-  A note on ``yarn``: we require the use of yarn, because it supports\n-  installing packages in a custom named directory, which npm does not (even\n-  using ``--prefix``, ``node_modules`` is hardcoded). Our package directory is\n-  located at: ``src/plone/staticresources/static/components``.\n+  A note on ``yarn``: we require the use of yarn, because it supports installing packages in a custom named directory,\n+  which npm does not (even using ``--prefix``, ``node_modules`` is hardcoded). Our package directory is located at:\n+  ``src/plone/staticresources/static/components``.\n \n \n Target audience\n@@ -23,30 +20,26 @@ Target audience\n \n This documentation aims at:\n \n-- **Theme Authors:** who want to change the look and feel of a Plone site and\n-  need to:\n+- **Theme Authors:** who want to change the look and feel of a Plone site and need to:\n \n-  - understand how to correctly bundle changes made into existing or new\n-    frontend code\n+  - understand how to correctly bundle changes made into existing or new frontend code\n \n-- **Integrators and Developers:** who want to customize or maintain the front\n-  end of a Plone site for their customers:\n+- **Integrators and Developers:** who want to customize or maintain the front end of a Plone site for their customers:\n \n   - upgrade existing versions or install new ``npm`` packages.\n \n-  - integrate new JavaScript/CSS behavior, eventually wrapped in a ``pattern``\n-    for optimal integration and reuse within Plone front end ecosystem.\n+  - integrate new JavaScript/CSS behavior, eventually wrapped in a ``pattern`` for optimal integration and reuse within\n+    Plone front end ecosystem.\n \n - **Plone Core Developers:** who want to fix Plone bugs or enhance this add-on\n \n \n-Compiling bundles\n+Compiling Bundles\n -----------------\n \n-The front end resources in this package should be updated with the script\n-called ``plone-compile-resources``, available in the ``bin`` directory of a\n-default Plone buildout installation. This script compiles the final CSS and JS\n-resources that will be served to end users.\n+The front end resources in this package should be updated with the script called ``plone-compile-resources``, available\n+in the ``bin`` directory of a default Plone buildout installation. This script compiles the final CSS and JS resources\n+that will be served to end users.\n \n Building the ``plone`` bundle::\n \n@@ -57,46 +50,42 @@ Building the ``plone-logged-in`` bundle::\n   ./bin/plone-compile-resources -b plone-logged-in\n \n .. note::\n-  You can see all the options of this executable by running\n-  ``./bin/plone-compile-resources --help``\n+  You can see all the options of this executable by running ``./bin/plone-compile-resources --help``\n \n Resources, Bundles, Patterns and the Resource Registry\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-The ``plone-compile-resources`` script collects Resources from source packages\n-(e.g. ``mockup``) and compiles them in ``plone/staticresources/static/`` into\n-minified versions with source maps and, for JavaScript only, also into an\n-unminified version. The output directory is configurable by using\n-``csscompilation`` and ``jscompilation`` attributes of the bundle registration.\n-\n-Bundles are groups of resources. By default Plone comes configured to serve two\n-main bundles:\n-\n-- ``plone``: containing JS and CSS used for anonymous visitors\n-- ``plone-logged-in``: with additional resources for authenticated visitors,\n-  e.g. for editor and management user interfaces\n-\n-Finally Plone encapsulates most of its CSS and JS into units called Patterns\n-that live in the ``mockup`` package. Although Patterns provide their own\n-registered Resources, those are not registered to Plone main bundles. Instead,\n-they are imported through native LESS and Require JS "entry points" that live\n-in ``plone.staticresource``:\n-\n-- `plone/staticresources/static/plone.js <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone.js>`_\n-- `plone/staticresources/static/plone.less <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone.less>`_\n-- `plone/staticresources/static/plone-logged-in.js <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone-logged-in.js>`_\n-- `plone/staticresources/static/plone-logged-in.less <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone-logged-in.less>`_\n-\n-When editing a pattern (e.g. in ``mockup`` package), it\'s important to know for\n-which bundle it\'s registered, which can be done by checking where it\'s imported\n-in the entry points above. The bundle name will be useful as parameter for\n+The ``plone-compile-resources`` script collects Resources from source packages (e.g. ``mockup``) and compiles them in\n+``plone/staticresources/static/`` into minified versions with source maps and, for JavaScript only, also into an\n+unminified version. The output directory is configurable by using ``csscompilation`` and ``jscompilation`` attributes of\n+the bundle registration.\n+\n+Bundles are groups of resources. By default Plone comes configured to serve two main bundles:\n+\n+- ``plone``: containing JS and CSS used for anonymous visitors - ``plone-logged-in``: with additional resources for\n+  authenticated visitors, e.g. for editor and management user interfaces\n+\n+Finally Plone encapsulates most of its CSS and JS into units called Patterns that live in the ``mockup`` package.\n+Although Patterns provide their own registered Resources, those are not registered to Plone main bundles. Instead, they\n+are imported through native LESS and Require JS "entry points" that live in ``plone.staticresource``:\n+\n+- `plone/staticresources/static/plone.js\n+  <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone.js>`_\n+- `plone/staticresources/static/plone.less\n+  <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone.less>`_\n+- `plone/staticresources/static/plone-logged-in.js\n+  <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone-logged-in.js>`_\n+- `plone/staticresources/static/plone-logged-in.less\n+  <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone-logged-in.less>`_\n+\n+When editing a pattern (e.g. in ``mockup`` package), it\'s important to know for which bundle it\'s registered, which can\n+be done by checking where it\'s imported in the entry points above. The bundle name will be useful as parameter for\n ``plone-compile-resources`` script.\n \n .. note::\n-  Patterns are also available as independent resources in ``Resource\n-  Registries`` control panel but they are not registered to default Plone\n-  bundles, which instead use the entry point approach. Pattern\'s resources may be\n-  useful if needed to be injected in specific views.\n+  Patterns are also available as independent resources in ``Resource Registries`` control panel but they are not\n+  registered to default Plone bundles, which instead use the entry point approach. Pattern\'s resources may be useful if\n+  needed to be injected in specific views.\n \n In production mode, Plone will serve static resources in URLs similar to:\n \n@@ -110,17 +99,15 @@ If Plone is configured to serve singles files, URLs will be similar to:\n - http://localhost:8080//++plone++production/++unique++TIMESTAMP/default.js\n - http://localhost:8080//++plone++production/++unique++TIMESTAMP/default.css\n \n-In development mode, Plone will omit timestamp from path and serve fresh copies\n-of the resources of the selected bundle(s). Those are compiled in-browser,\n-on the fly for each page load and requested through XHR requests to URLs like:\n+In development mode, Plone will omit timestamp from path and serve fresh copies of the resources of the selected\n+bundle(s). Those are compiled in-browser, on the fly for each page load and requested through XHR requests to URLs like:\n \n - http://localhost:8080/++resource++plone.js\n - http://localhost:8080/++plone++static/plone.less\n - http://localhost:8080/++resource++plone-logged-in.js\n - http://localhost:8080/++plone++static/plone-logged-in.less\n \n-These entry points will then cause Patterns themselves to be loaded, through\n-in-browser XHR requests to URLs like:\n+These entry points will then cause Patterns themselves to be loaded, through in-browser XHR requests to URLs like:\n \n - http://localhost:8080/Plone/++resource++mockup/livesearch/pattern.js\n - http://localhost:8080/Plone/++resource++mockup/livesearch/pattern.livesearch.less\n@@ -131,24 +118,19 @@ Development mode\n \n When fixing Plone bugs or improving functionality:\n \n-- Dependencies upgrades (e.g. ``moment.js``) should be done in ``mockup`` and\n-  after the PR is merged, propagated here (i.e. static resources needs to be\n-  recompiled)\n-- Likewise, CSS and JS should be developed not in ``plone.staticresources`` but\n-  in their own package\'s source (for instance, in ``mockup``)\n-- To see the new changes in the browser, enable ``Development Mode`` in\n-  ``Resource Registries`` control panel. Next the desired bundle (that contains\n-  the modified files) must be set to either "Develop JavaScript", "Develop CSS"\n-  or both. This causes each of the bundle resources to be served individually,\n-  easing development. In this case, bundle resources are served from the source\n-  package (e.g. ``mockup``) instead of ``plone.staticresources``.\n+- Dependencies upgrades (e.g. ``moment.js``) should be done in ``mockup`` and after the PR is merged, propagated here\n+  (i.e. static resources needs to be recompiled)\n+- Likewise, CSS and JS should be developed not in ``plone.staticresources`` but in their own package\'s source (for\n+  instance, in ``mockup``)\n+- To see the new changes in the browser, enable ``Development Mode`` in ``Resource Registries`` control panel. Next the\n+  desired bundle (that contains the modified files) must be set to either "Develop JavaScript", "Develop CSS" or both.\n+  This causes each of the bundle resources to be served individually, easing development. In this case, bundle\n+  resources are served from the source package (e.g. ``mockup``) instead of ``plone.staticresources``.\n - To identify which bundle contains the modified resource, see section\n-  "Entry Points" below. Keep in mind the more bundles selected for development\n-  mode the slower are page reloads, so it\'s recommended to select only what\'s\n-  being developed.\n+  "Entry Points" below. Keep in mind the more bundles selected for development mode the slower are page reloads, so\n+  it\'s recommended to select only what\'s being developed.\n - Alternatively you may run ``./bin/plone-compile-resources`` between changes\n-  and avoid Development Mode\'s in-browser compilation (fastest browser loading\n-  time).\n+  and avoid Development Mode\'s in-browser compilation (fastest browser loading time).\n \n \n Entry Points\n@@ -156,10 +138,14 @@ Entry Points\n \n The current list of registered patterns for each entry point is available in:\n \n-- `plone/staticresources/static/plone.js <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone.js>`_\n-- `plone/staticresources/static/plone.less <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone.less>`_\n-- `plone/staticresources/static/plone-logged-in.js <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone-logged-in.js>`_\n-- `plone/staticresources/static/plone-logged-in.less <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone-logged-in.less>`_\n+- `plone/staticresources/static/plone.js\n+  <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone.js>`_\n+- `plone/staticresources/static/plone.less\n+  <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone.less>`_\n+- `plone/staticresources/static/plone-logged-in.js\n+  <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone-logged-in.js>`_\n+- `plone/staticresources/static/plone-logged-in.less\n+  <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone-logged-in.less>`_\n \n Here\'s a snapshot:\n \n@@ -208,14 +194,12 @@ For logged-in users\n | - plone-patterns-toolbar                   |                                |\n +--------------------------------------------+--------------------------------+\n \n-\n Developing patterns\n -------------------\n \n-All JavaScript code in this package is downloaded via ``yarn`` into\n-``src/plone/staticresources/static/components``. Nothing in that directory\n-should be manually edited. If you need to fix something, do it in the original\n-repository and eventually upgrade its version (next section).\n+All JavaScript code in this package is downloaded via ``yarn`` into ``src/plone/staticresources/static/components``.\n+Nothing in that directory should be manually edited. If you need to fix something, do it in the original repository and\n+eventually upgrade its version (next section).\n \n For Mockup, the original repository is: https://github.com/plone/mockup/\n \n@@ -225,17 +209,14 @@ For Patternslib, visit: http://github.com/patternslib/Patterns\n How to upgrade the resources in this package\n --------------------------------------------\n \n-1. Increase ``npm`` package versions in ``package.json``, in sections\n-   ``dependencies`` or ``devDependencies``.\n+1. Increase ``npm`` package versions in ``package.json``, in sections ``dependencies`` or ``devDependencies``.\n \n 2. Run ``yarn upgrade`` (cannot be ``npm``)\n \n 3. Run ``./bin/plone-compile-resources -b plone`` or\n-   ``./bin/plone-compile-resources -b plone-logged-in`` (whichever bundle\n-   you need to re-build).\n+``./bin/plone-compile-resources -b plone-logged-in`` (whichever bundle you need to re-build).\n \n-4. Increase the ``last_compilation`` date in\n-   ``src/plone/staticresources/profiles/default/registry/bundles.xml``.\n+4. Increase the ``last_compilation`` date in ``src/plone/staticresources/profiles/default/registry/bundles.xml``.\n \n 5. Submit a PR and run the tests on Jenkins.\n \n@@ -243,15 +224,12 @@ How to upgrade the resources in this package\n How to generate the ``plone-compile-resources`` script\n ------------------------------------------------------\n \n-The ``plone-compile-resources`` script can be used to compile bundles from the\n-command line. In short, the script starts up a Plone instance, reads the\n-resources and bundles configured in the registry and compiles a JS/CSS bundle\n-based on that configuration. See ``plone-compile-resources --help`` for more\n-information.\n+The ``plone-compile-resources`` script can be used to compile bundles from the command line. In short, the script starts\n+up a Plone instance, reads the resources and bundles configured in the registry and compiles a JS/CSS bundle based on\n+that configuration. See ``plone-compile-resources --help`` for more information.\n \n-When using buildout, ``plone-compile-resources`` script is automatically\n-generated. If you use a custom buildout, you might need to add something\n-similar to:\n+When using buildout, ``plone-compile-resources`` script is automatically generated. If you use a custom buildout, you\n+might need to add something similar to:\n \n .. code-block:: ini\n \n@@ -276,16 +254,13 @@ similar to:\n What has changed since Plone 5.1\n --------------------------------\n \n-- The ``toolbar`` pattern from ``Products.CMFPlone.static.toolbar`` has been\n-  moved to ``mockup`` package.\n+- The ``toolbar`` pattern from ``Products.CMFPlone.static.toolbar`` has been moved to ``mockup`` package.\n - ``mockup`` package now uses npm registry and yarn instead of bower.\n \n Besides the following has been moved in here:\n \n-- All static resources from ``Products.CMFPlone.static``: bundle resources,\n-  compiled bundles, external packages\n-- Bundle and resource registrations from ``Products.CMFPlone``\'s\n-  ``dependencies`` profile\n+- All static resources from ``Products.CMFPlone.static``: bundle resources, compiled bundles, external packages\n+- Bundle and resource registrations from ``Products.CMFPlone``\'s ``dependencies`` profile\n - ``plone-compile-resources`` script\n - ``thememapper`` bundle from ``plone.app.theming``\n - ``plone.resourceeditor`` bundle from ``plone.resourceeditor``\n@@ -294,8 +269,7 @@ Besides the following has been moved in here:\n More on the Resource Registry and its modes\n -------------------------------------------\n \n-Have a look on how ``plone.staticresources`` and ``mockup`` register their\n-resources:\n+Have a look on how ``plone.staticresources`` and ``mockup`` register their resources:\n \n In ZCML:\n \n@@ -315,9 +289,8 @@ For more information on the Plone resource registry see the documentation at:\n Warning\n -------\n \n-If you update ``r.js`` or ``less``, you will need to manually re-apply a patch\n-that gives us cache busting resource downloads so we can build through the web.\n-See:\n+If you update ``r.js`` or ``less``, you will need to manually re-apply a patch that gives us cache busting resource\n+downloads so we can build through the web. See:\n \n - https://github.com/plone/Products.CMFPlone/commit/2d3865805efc6b72dce236eb68e502d8c57717b6\n - https://github.com/plone/Products.CMFPlone/commit/bd1f9ba99d1ad40bb7fe1c00eaa32b8884aae5e2\n'

Repository: plone.staticresources


Branch: refs/heads/master
Date: 2019-06-18T19:33:05+02:00
Author: Davi Lima (davilima6) <davilima6@gmail.com>
Commit: https://github.com/plone/plone.staticresources/commit/0fd7012ed5ab5d68260d059bfb483ef49b774731

Reorder sections to prioritise the workflow (how to bring changes from mockup to plone.staticresources)

Files changed:
M README.rst

b'diff --git a/README.rst b/README.rst\nindex 9ae4b86..f2bfb7c 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -4,16 +4,6 @@ plone.staticresources\n \n This add-on contains all static JavaScript and CSS resources used by Plone.\n \n-Between Plone 5.0 and 5.1 these resources were located in ``static/`` directory of ``Products.CMFPlone`` package.\n-Starting with Plone 5.2 they\'re distributed in this independent package due to the specific tooling and workflows used\n-to build frontend resources and also the different maintenance and release needs of ``Products.CMFPlone``. For a\n-complete list of reasons, read `PLIP 1653 <https://github.com/plone/Products.CMFPlone/issues/1653>`_.\n-\n-.. note::\n-  A note on ``yarn``: we require the use of yarn, because it supports installing packages in a custom named directory,\n-  which npm does not (even using ``--prefix``, ``node_modules`` is hardcoded). Our package directory is located at:\n-  ``src/plone/staticresources/static/components``.\n-\n \n Target audience\n ---------------\n@@ -22,7 +12,7 @@ This documentation aims at:\n \n - **Theme Authors:** who want to change the look and feel of a Plone site and need to:\n \n-  - understand how to correctly bundle changes made into existing or new frontend code\n+  - understand how to correctly bundle changes made into existing or new frontend code.\n \n - **Integrators and Developers:** who want to customize or maintain the front end of a Plone site for their customers:\n \n@@ -31,7 +21,50 @@ This documentation aims at:\n   - integrate new JavaScript/CSS behavior, eventually wrapped in a ``pattern`` for optimal integration and reuse within\n     Plone front end ecosystem.\n \n-- **Plone Core Developers:** who want to fix Plone bugs or enhance this add-on\n+- **Plone Core Developers:** who want to fix Plone bugs or enhance this add-on.\n+\n+\n+How to upgrade the resources in this package\n+--------------------------------------------\n+\n+1. Increase ``npm`` package versions in ``package.json``, in sections ``dependencies`` or ``devDependencies``.\n+\n+2. Run ``yarn upgrade`` (important: cannot be ``npm``)\n+\n+3. Run ``./bin/plone-compile-resources -b plone`` or ``./bin/plone-compile-resources -b plone-logged-in`` (whichever\n+   bundle you need to re-build).\n+\n+4. Increase the ``last_compilation`` date in ``src/plone/staticresources/profiles/default/registry/bundles.xml``.\n+\n+5. Submit a PR and run the tests on Jenkins.\n+\n+\n+What has changed\n+----------------\n+\n+Between Plone 5.0 and 5.1 these resources were located in ``static/`` directory of ``Products.CMFPlone`` package.\n+Starting with Plone 5.2 they\'re distributed in this independent package due to the specific tooling and workflows used\n+to build frontend resources and also the different maintenance and release needs of ``Products.CMFPlone``. For a\n+complete list of reasons, read `PLIP 1653 <https://github.com/plone/Products.CMFPlone/issues/1653>`_.\n+\n+.. note::\n+  A note on ``yarn``: we require the use of yarn, because it supports installing packages in a custom named directory,\n+  which npm does not (even using ``--prefix``, ``node_modules`` is hardcoded). Our package directory is located at:\n+  ``src/plone/staticresources/static/components``.\n+\n+Changes since Plone 5.1.x\n+^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+- The ``toolbar`` pattern from ``Products.CMFPlone.static.toolbar`` has been moved to ``mockup`` package.\n+- ``mockup`` package now uses ``npm``\'s registry and ``yarn`` instead of ``bower``.\n+\n+Besides the following has been moved in here:\n+\n+- All static Resources from ``Products.CMFPlone.static``: bundle resources, compiled bundles, external packages\n+- Bundle and Resource registrations from ``Products.CMFPlone``\'s ``dependencies`` profile\n+- ``plone-compile-resources`` script\n+- ``thememapper`` bundle from ``plone.app.theming``\n+- ``plone.resourceeditor`` bundle from ``plone.resourceeditor``\n \n \n Compiling Bundles\n@@ -52,13 +85,14 @@ Building the ``plone-logged-in`` bundle::\n .. note::\n   You can see all the options of this executable by running ``./bin/plone-compile-resources --help``\n \n+\n Resources, Bundles, Patterns and the Resource Registry\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n The ``plone-compile-resources`` script collects Resources from source packages (e.g. ``mockup``) and compiles them in\n ``plone/staticresources/static/`` into minified versions with source maps and, for JavaScript only, also into an\n-unminified version. The output directory is configurable by using ``csscompilation`` and ``jscompilation`` attributes of\n-the bundle registration.\n+un-minified version. The output directory is configurable by using ``csscompilation`` and ``jscompilation`` attributes\n+of the bundle registration.\n \n Bundles are groups of resources. By default Plone comes configured to serve two main bundles:\n \n@@ -87,33 +121,37 @@ be done by checking where it\'s imported in the entry points above. The bundle na\n   registered to default Plone bundles, which instead use the entry point approach. Pattern\'s resources may be useful if\n   needed to be injected in specific views.\n \n-In production mode, Plone will serve static resources in URLs similar to:\n-\n-- http://localhost:8080/++plone++static/++unique++TIMESTAMP/plone-compiled.min.js\n-- http://localhost:8080/++plone++static/++unique++TIMESTAMP/plone-compiled.css\n-- http://localhost:8080/++plone++static/++unique++TIMESTAMP/plone-logged-in-compiled.min.js\n-- http://localhost:8080/++plone++static/++unique++TIMESTAMP/plone-logged-in-compiled.css\n-\n-If Plone is configured to serve singles files, URLs will be similar to:\n+In production mode (``./bin/instance start``), since version 5.1, Plone is configured to serve Aggregate Bundles,\n+single files to minimize network requests (`aggregate bundles\n+<https://docs.plone.org/adapt-and-extend/theming/resourceregistry.html#resource-bundle-aggregation>`_).\n+In that case final production resource URLs will be similar to:\n \n - http://localhost:8080//++plone++production/++unique++TIMESTAMP/default.js\n - http://localhost:8080//++plone++production/++unique++TIMESTAMP/default.css\n \n-In development mode, Plone will omit timestamp from path and serve fresh copies of the resources of the selected\n-bundle(s). Those are compiled in-browser, on the fly for each page load and requested through XHR requests to URLs like:\n+If you enable Development Mode for JavaScript and CSS in Resource Registries control panel, Plone will omit timestamp\n+from path and serve fresh copies of the resources of the selected bundle(s). Those are compiled in-browser, on the fly\n+for each page load and requested by XHR requests to URLs like:\n \n - http://localhost:8080/++resource++plone.js\n - http://localhost:8080/++plone++static/plone.less\n - http://localhost:8080/++resource++plone-logged-in.js\n - http://localhost:8080/++plone++static/plone-logged-in.less\n \n-These entry points will then cause Patterns themselves to be loaded, through in-browser XHR requests to URLs like:\n+These entry points will then cause Patterns themselves to be loaded through in-browser XHR requests to URLs like:\n \n - http://localhost:8080/Plone/++resource++mockup/livesearch/pattern.js\n - http://localhost:8080/Plone/++resource++mockup/livesearch/pattern.livesearch.less\n \n+If you do enable Development Mode, and yet do not select any bundles, Plone serves static resources in URLs similar to:\n+\n+- http://localhost:8080/++plone++static/++unique++TIMESTAMP/plone-compiled.min.js\n+- http://localhost:8080/++plone++static/++unique++TIMESTAMP/plone-compiled.css\n+- http://localhost:8080/++plone++static/++unique++TIMESTAMP/plone-logged-in-compiled.min.js\n+- http://localhost:8080/++plone++static/++unique++TIMESTAMP/plone-logged-in-compiled.css\n+\n \n-Development mode\n+Development tips\n ^^^^^^^^^^^^^^^^\n \n When fixing Plone bugs or improving functionality:\n@@ -126,15 +164,15 @@ When fixing Plone bugs or improving functionality:\n   desired bundle (that contains the modified files) must be set to either "Develop JavaScript", "Develop CSS" or both.\n   This causes each of the bundle resources to be served individually, easing development. In this case, bundle\n   resources are served from the source package (e.g. ``mockup``) instead of ``plone.staticresources``.\n-- To identify which bundle contains the modified resource, see section\n-  "Entry Points" below. Keep in mind the more bundles selected for development mode the slower are page reloads, so\n-  it\'s recommended to select only what\'s being developed.\n-- Alternatively you may run ``./bin/plone-compile-resources`` between changes\n-  and avoid Development Mode\'s in-browser compilation (fastest browser loading time).\n+- To identify which bundle contains the modified resource, see section "Entry Points" below. Keep in mind the more\n+  bundles selected for development mode the slower are page reloads, so it\'s recommended to select only what\'s being\n+  developed.\n+- Alternatively you may run ``./bin/plone-compile-resources`` between changes and avoid Development Mode\'s in-browser\n+  compilation (fastest browser loading time).\n \n \n Entry Points\n-------------\n+^^^^^^^^^^^^\n \n The current list of registered patterns for each entry point is available in:\n \n@@ -150,7 +188,7 @@ The current list of registered patterns for each entry point is available in:\n Here\'s a snapshot:\n \n For anonymous users\n-^^^^^^^^^^^^^^^^^^^\n+~~~~~~~~~~~~~~~~~~~\n \n +---------------------------------------+------------------------------------+\n | JS                                    | LESS                               |\n@@ -177,7 +215,7 @@ For anonymous users\n +---------------------------------------+------------------------------------+\n \n For logged-in users\n-^^^^^^^^^^^^^^^^^^^\n+~~~~~~~~~~~~~~~~~~~\n \n +--------------------------------------------+--------------------------------+\n | JS                                         | LESS                           |\n@@ -206,23 +244,8 @@ For Mockup, the original repository is: https://github.com/plone/mockup/\n For Patternslib, visit: http://github.com/patternslib/Patterns\n \n \n-How to upgrade the resources in this package\n---------------------------------------------\n-\n-1. Increase ``npm`` package versions in ``package.json``, in sections ``dependencies`` or ``devDependencies``.\n-\n-2. Run ``yarn upgrade`` (cannot be ``npm``)\n-\n-3. Run ``./bin/plone-compile-resources -b plone`` or\n-``./bin/plone-compile-resources -b plone-logged-in`` (whichever bundle you need to re-build).\n-\n-4. Increase the ``last_compilation`` date in ``src/plone/staticresources/profiles/default/registry/bundles.xml``.\n-\n-5. Submit a PR and run the tests on Jenkins.\n-\n-\n-How to generate the ``plone-compile-resources`` script\n-------------------------------------------------------\n+Generating the ``plone-compile-resources`` script\n+-------------------------------------------------\n \n The ``plone-compile-resources`` script can be used to compile bundles from the command line. In short, the script starts\n up a Plone instance, reads the resources and bundles configured in the registry and compiles a JS/CSS bundle based on\n@@ -251,23 +274,8 @@ might need to add something similar to:\n       plone-compile-resources\n \n \n-What has changed since Plone 5.1\n---------------------------------\n-\n-- The ``toolbar`` pattern from ``Products.CMFPlone.static.toolbar`` has been moved to ``mockup`` package.\n-- ``mockup`` package now uses npm registry and yarn instead of bower.\n-\n-Besides the following has been moved in here:\n-\n-- All static resources from ``Products.CMFPlone.static``: bundle resources, compiled bundles, external packages\n-- Bundle and resource registrations from ``Products.CMFPlone``\'s ``dependencies`` profile\n-- ``plone-compile-resources`` script\n-- ``thememapper`` bundle from ``plone.app.theming``\n-- ``plone.resourceeditor`` bundle from ``plone.resourceeditor``\n-\n-\n More on the Resource Registry and its modes\n--------------------------------------------\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n Have a look on how ``plone.staticresources`` and ``mockup`` register their resources:\n \n'

Repository: plone.staticresources


Branch: refs/heads/master
Date: 2019-06-19T15:06:32+02:00
Author: Davi Lima (davilima6) <davilima6@gmail.com>
Commit: https://github.com/plone/plone.staticresources/commit/a2511777faf5d60801b863d9585b5b976102f8bd

Fix Documentation Linting guidelines

Files changed:
M README.rst

b'diff --git a/README.rst b/README.rst\nindex f2bfb7c..3d4b801 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -18,8 +18,7 @@ This documentation aims at:\n \n   - upgrade existing versions or install new ``npm`` packages.\n \n-  - integrate new JavaScript/CSS behavior, eventually wrapped in a ``pattern`` for optimal integration and reuse within\n-    Plone front end ecosystem.\n+  - integrate new JavaScript/CSS behavior, eventually wrapped in a ``pattern`` for optimal integration and reuse within Plone front end ecosystem.\n \n - **Plone Core Developers:** who want to fix Plone bugs or enhance this add-on.\n \n@@ -27,36 +26,33 @@ This documentation aims at:\n How to upgrade the resources in this package\n --------------------------------------------\n \n-1. Increase ``npm`` package versions in ``package.json``, in sections ``dependencies`` or ``devDependencies``.\n+1. Increase Npm package versions in ``package.json``, in sections ``dependencies`` or ``devDependencies``.\n \n 2. Run ``yarn upgrade`` (important: cannot be ``npm``)\n \n-3. Run ``./bin/plone-compile-resources -b plone`` or ``./bin/plone-compile-resources -b plone-logged-in`` (whichever\n-   bundle you need to re-build).\n+3. Run ``./bin/plone-compile-resources -b plone`` or ``./bin/plone-compile-resources -b plone-logged-in`` (whichever bundle you need to re-build).\n \n 4. Increase the ``last_compilation`` date in ``src/plone/staticresources/profiles/default/registry/bundles.xml``.\n \n-5. Submit a PR and run the tests on Jenkins.\n+5. Submit a Pull Request and run the tests on Jenkins.\n \n \n What has changed\n ----------------\n \n Between Plone 5.0 and 5.1 these resources were located in ``static/`` directory of ``Products.CMFPlone`` package.\n-Starting with Plone 5.2 they\'re distributed in this independent package due to the specific tooling and workflows used\n-to build frontend resources and also the different maintenance and release needs of ``Products.CMFPlone``. For a\n-complete list of reasons, read `PLIP 1653 <https://github.com/plone/Products.CMFPlone/issues/1653>`_.\n+Starting with Plone 5.2 they are distributed in this independent package due to the specific tooling and workflows used to build frontend resources and also the different maintenance and release needs of ``Products.CMFPlone``.\n+For a complete list of reasons, read `PLIP 1653 <https://github.com/plone/Products.CMFPlone/issues/1653>`_.\n \n .. note::\n-  A note on ``yarn``: we require the use of yarn, because it supports installing packages in a custom named directory,\n-  which npm does not (even using ``--prefix``, ``node_modules`` is hardcoded). Our package directory is located at:\n-  ``src/plone/staticresources/static/components``.\n+  A note on Yarn: we require the use of Yarn because it supports installing packages in a custom named directory, which Npm does not (even using ``--prefix``, ``node_modules`` is hardcoded).\n+  Our package directory is located at: ``src/plone/staticresources/static/components``.\n \n Changes since Plone 5.1.x\n ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n - The ``toolbar`` pattern from ``Products.CMFPlone.static.toolbar`` has been moved to ``mockup`` package.\n-- ``mockup`` package now uses ``npm``\'s registry and ``yarn`` instead of ``bower``.\n+- ``mockup`` package now uses Npm\'s registry and Yarn instead of Bower.\n \n Besides the following has been moved in here:\n \n@@ -70,9 +66,8 @@ Besides the following has been moved in here:\n Compiling Bundles\n -----------------\n \n-The front end resources in this package should be updated with the script called ``plone-compile-resources``, available\n-in the ``bin`` directory of a default Plone buildout installation. This script compiles the final CSS and JS resources\n-that will be served to end users.\n+The front end resources in this package should be updated with the script called ``plone-compile-resources``, available in the ``bin`` directory of a default Plone buildout installation.\n+This script compiles the final CSS and JS resources that will be served to end users.\n \n Building the ``plone`` bundle::\n \n@@ -83,25 +78,23 @@ Building the ``plone-logged-in`` bundle::\n   ./bin/plone-compile-resources -b plone-logged-in\n \n .. note::\n-  You can see all the options of this executable by running ``./bin/plone-compile-resources --help``\n+  You can see all the options of this executable by running ``./bin/plone-compile-resources --help``.\n \n \n Resources, Bundles, Patterns and the Resource Registry\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-The ``plone-compile-resources`` script collects Resources from source packages (e.g. ``mockup``) and compiles them in\n-``plone/staticresources/static/`` into minified versions with source maps and, for JavaScript only, also into an\n-un-minified version. The output directory is configurable by using ``csscompilation`` and ``jscompilation`` attributes\n-of the bundle registration.\n+The ``plone-compile-resources`` script collects Resources from source packages (e.g. ``mockup``) and compiles them in ``plone/staticresources/static/`` into minified versions with source maps and, for JavaScript only, also into an un-minified version.\n+The output directory is configurable by using ``csscompilation`` and ``jscompilation`` attributes of the bundle registration.\n \n Bundles are groups of resources. By default Plone comes configured to serve two main bundles:\n \n-- ``plone``: containing JS and CSS used for anonymous visitors - ``plone-logged-in``: with additional resources for\n-  authenticated visitors, e.g. for editor and management user interfaces\n+- ``plone``: containing JS and CSS used for anonymous visitors\n+- ``plone-logged-in``: with additional resources for authenticated visitors, e.g. for editor and management user interfaces\n \n Finally Plone encapsulates most of its CSS and JS into units called Patterns that live in the ``mockup`` package.\n-Although Patterns provide their own registered Resources, those are not registered to Plone main bundles. Instead, they\n-are imported through native LESS and Require JS "entry points" that live in ``plone.staticresource``:\n+Although Patterns provide their own registered Resources, those are not registered to Plone main bundles.\n+Instead, they are imported through native LESS and Require JS "entry points" that live in ``plone.staticresource``:\n \n - `plone/staticresources/static/plone.js\n   <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone.js>`_\n@@ -112,26 +105,21 @@ are imported through native LESS and Require JS "entry points" that live in ``pl\n - `plone/staticresources/static/plone-logged-in.less\n   <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone-logged-in.less>`_\n \n-When editing a pattern (e.g. in ``mockup`` package), it\'s important to know for which bundle it\'s registered, which can\n-be done by checking where it\'s imported in the entry points above. The bundle name will be useful as parameter for\n-``plone-compile-resources`` script.\n+When editing a pattern (e.g. in ``mockup`` package), it is important to know for which bundle it is registered, which can be done by checking where it is imported in the entry points above.\n+The bundle name will be useful as parameter for ``plone-compile-resources`` script.\n \n .. note::\n-  Patterns are also available as independent resources in ``Resource Registries`` control panel but they are not\n-  registered to default Plone bundles, which instead use the entry point approach. Pattern\'s resources may be useful if\n-  needed to be injected in specific views.\n+  Patterns are also available as independent resources in :guilabel:`&Resource Registries` control panel but they are not registered to default Plone bundles, which instead use the entry point approach.\n+  Pattern\'s resources may be useful if needed to be injected in specific views.\n \n-In production mode (``./bin/instance start``), since version 5.1, Plone is configured to serve Aggregate Bundles,\n-single files to minimize network requests (`aggregate bundles\n-<https://docs.plone.org/adapt-and-extend/theming/resourceregistry.html#resource-bundle-aggregation>`_).\n+In production mode (``./bin/instance start``), since version 5.1, Plone is configured to serve Aggregate Bundles, single files to minimize network requests (`aggregate bundles <https://docs.plone.org/adapt-and-extend/theming/resourceregistry.html#resource-bundle-aggregation>`_).\n In that case final production resource URLs will be similar to:\n \n - http://localhost:8080//++plone++production/++unique++TIMESTAMP/default.js\n - http://localhost:8080//++plone++production/++unique++TIMESTAMP/default.css\n \n-If you enable Development Mode for JavaScript and CSS in Resource Registries control panel, Plone will omit timestamp\n-from path and serve fresh copies of the resources of the selected bundle(s). Those are compiled in-browser, on the fly\n-for each page load and requested by XHR requests to URLs like:\n+If you enable :guilabel:`&Development Mode` for JavaScript and CSS in :guilabel:`&Resource Registries` control panel, Plone will omit timestamp from path and serve fresh copies of the resources of the selected bundle(s).\n+Those are compiled in-browser, on the fly for each page load and requested by XHR requests to URLs like:\n \n - http://localhost:8080/++resource++plone.js\n - http://localhost:8080/++plone++static/plone.less\n@@ -156,19 +144,15 @@ Development tips\n \n When fixing Plone bugs or improving functionality:\n \n-- Dependencies upgrades (e.g. ``moment.js``) should be done in ``mockup`` and after the PR is merged, propagated here\n-  (i.e. static resources needs to be recompiled)\n-- Likewise, CSS and JS should be developed not in ``plone.staticresources`` but in their own package\'s source (for\n-  instance, in ``mockup``)\n-- To see the new changes in the browser, enable ``Development Mode`` in ``Resource Registries`` control panel. Next the\n-  desired bundle (that contains the modified files) must be set to either "Develop JavaScript", "Develop CSS" or both.\n-  This causes each of the bundle resources to be served individually, easing development. In this case, bundle\n-  resources are served from the source package (e.g. ``mockup``) instead of ``plone.staticresources``.\n-- To identify which bundle contains the modified resource, see section "Entry Points" below. Keep in mind the more\n-  bundles selected for development mode the slower are page reloads, so it\'s recommended to select only what\'s being\n-  developed.\n-- Alternatively you may run ``./bin/plone-compile-resources`` between changes and avoid Development Mode\'s in-browser\n-  compilation (fastest browser loading time).\n+- Dependencies upgrades (e.g. ``moment.js``) should be done in ``mockup`` and after the PR is merged, propagated here (i.e. static resources needs to be recompiled)\n+- Likewise, CSS and JS should be developed not in ``plone.staticresources`` but in their own package\'s source (for instance, in ``mockup``)\n+- To see the new changes in the browser, enable :guilabel:`&Development Mode` in :guilabel:`&Resource Registries` control panel.\n+  Next the desired bundle (that contains the modified files) must be set to either "Develop JavaScript", "Develop CSS" or both.\n+  This causes each of the bundle resources to be served individually, easing development.\n+  In this case, bundle resources are served from the source package (e.g. ``mockup``) instead of ``plone.staticresources``.\n+- To identify which bundle contains the modified resource, see section "Entry Points" below.\n+  Keep in mind the more bundles selected for development mode the slower are page reloads, so it is recommended to select only what is being developed.\n+- Alternatively you may run ``./bin/plone-compile-resources`` between changes and avoid :guilabel:`&Development Mode`\'s in-browser compilation (fastest browser loading time).\n \n \n Entry Points\n@@ -236,8 +220,8 @@ Developing patterns\n -------------------\n \n All JavaScript code in this package is downloaded via ``yarn`` into ``src/plone/staticresources/static/components``.\n-Nothing in that directory should be manually edited. If you need to fix something, do it in the original repository and\n-eventually upgrade its version (next section).\n+Nothing in that directory should be manually edited.\n+If you need to fix something, do it in the original repository and eventually upgrade its version (next section).\n \n For Mockup, the original repository is: https://github.com/plone/mockup/\n \n@@ -247,12 +231,12 @@ For Patternslib, visit: http://github.com/patternslib/Patterns\n Generating the ``plone-compile-resources`` script\n -------------------------------------------------\n \n-The ``plone-compile-resources`` script can be used to compile bundles from the command line. In short, the script starts\n-up a Plone instance, reads the resources and bundles configured in the registry and compiles a JS/CSS bundle based on\n-that configuration. See ``plone-compile-resources --help`` for more information.\n+The ``plone-compile-resources`` script can be used to compile bundles from the command line.\n+In short, the script starts up a Plone instance, reads the resources and bundles configured in the registry and compiles a JS/CSS bundle based on that configuration.\n+See ``plone-compile-resources --help`` for more information.\n \n-When using buildout, ``plone-compile-resources`` script is automatically generated. If you use a custom buildout, you\n-might need to add something similar to:\n+When using buildout, ``plone-compile-resources`` script is automatically generated.\n+If you use a custom buildout, you might need to add something similar to:\n \n .. code-block:: ini\n \n@@ -297,8 +281,8 @@ For more information on the Plone resource registry see the documentation at:\n Warning\n -------\n \n-If you update ``r.js`` or ``less``, you will need to manually re-apply a patch that gives us cache busting resource\n-downloads so we can build through the web. See:\n+If you update ``r.js`` or ``less``, you will need to manually re-apply a patch that gives us cache busting resource downloads so we can build through the web.\n+See:\n \n - https://github.com/plone/Products.CMFPlone/commit/2d3865805efc6b72dce236eb68e502d8c57717b6\n - https://github.com/plone/Products.CMFPlone/commit/bd1f9ba99d1ad40bb7fe1c00eaa32b8884aae5e2\n'

Repository: plone.staticresources


Branch: refs/heads/master
Date: 2019-06-19T15:22:05+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.staticresources/commit/a67dad36c9f71b14d018a2baed5a2236c310af45

Merge pull request #29 from plone/improve_docs

Improve docs: add information about entry points

Files changed:
M README.rst

b'diff --git a/README.rst b/README.rst\nindex 1917f8f..3d4b801 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -2,108 +2,244 @@\n plone.staticresources\n =====================\n \n-Static JS and CSS resources for Plone.\n+This add-on contains all static JavaScript and CSS resources used by Plone.\n \n \n-This add-on contains all JavaScript and CSS resources used by Plone.\n+Target audience\n+---------------\n \n-Prior to Plone 5.2, they were located in ``static/`` directory of ``Products.CMFPlone`` package.\n+This documentation aims at:\n \n-Due to the specific tooling and workflows used to build frontend resources, and also the different maintenance and release needs of ``Products.CMFPlone`` itself, Plone static resources are now distributed in this package.\n-For a complete list of reasons, read the `PLIP 1653 <https://github.com/plone/Products.CMFPlone/issues/1653>`_.\n+- **Theme Authors:** who want to change the look and feel of a Plone site and need to:\n \n-.. note::\n+  - understand how to correctly bundle changes made into existing or new frontend code.\n \n-  A note on yarn: we require the use of yarn, because it supports installing packages in a custom named directory, which npm does not (even using ``--prefix``, ``node_modules`` is hardcoded).\n-  Our package directory is located at: ``src/plone/staticresources/static/components``.\n+- **Integrators and Developers:** who want to customize or maintain the front end of a Plone site for their customers:\n \n+  - upgrade existing versions or install new ``npm`` packages.\n \n-Target audience\n----------------\n+  - integrate new JavaScript/CSS behavior, eventually wrapped in a ``pattern`` for optimal integration and reuse within Plone front end ecosystem.\n+\n+- **Plone Core Developers:** who want to fix Plone bugs or enhance this add-on.\n \n-This documentation aims at:\n \n-Integrators and Developers\n-^^^^^^^^^^^^^^^^^^^^^^^^^^\n+How to upgrade the resources in this package\n+--------------------------------------------\n \n-Who want to customize or maintain the front end of a Plone site for their customers:\n+1. Increase Npm package versions in ``package.json``, in sections ``dependencies`` or ``devDependencies``.\n \n-- upgrade existing versions or install new ``npm`` packages.\n+2. Run ``yarn upgrade`` (important: cannot be ``npm``)\n \n-- integrate new JavaScript/CSS behavior, eventually wrapped in a ``pattern`` for optimal integration and reuse within Plone front end ecosystem.\n+3. Run ``./bin/plone-compile-resources -b plone`` or ``./bin/plone-compile-resources -b plone-logged-in`` (whichever bundle you need to re-build).\n \n+4. Increase the ``last_compilation`` date in ``src/plone/staticresources/profiles/default/registry/bundles.xml``.\n \n-Themer authors\n-^^^^^^^^^^^^^^\n+5. Submit a Pull Request and run the tests on Jenkins.\n \n-Who want to change the look and feel of a Plone site and need to:\n \n-- understand how to correctly bundle changes from existing or new frontend code.\n+What has changed\n+----------------\n \n+Between Plone 5.0 and 5.1 these resources were located in ``static/`` directory of ``Products.CMFPlone`` package.\n+Starting with Plone 5.2 they are distributed in this independent package due to the specific tooling and workflows used to build frontend resources and also the different maintenance and release needs of ``Products.CMFPlone``.\n+For a complete list of reasons, read `PLIP 1653 <https://github.com/plone/Products.CMFPlone/issues/1653>`_.\n \n-Plone Core Developers\n-^^^^^^^^^^^^^^^^^^^^^\n+.. note::\n+  A note on Yarn: we require the use of Yarn because it supports installing packages in a custom named directory, which Npm does not (even using ``--prefix``, ``node_modules`` is hardcoded).\n+  Our package directory is located at: ``src/plone/staticresources/static/components``.\n \n-Who want to help enhance this add-on itself.\n+Changes since Plone 5.1.x\n+^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+- The ``toolbar`` pattern from ``Products.CMFPlone.static.toolbar`` has been moved to ``mockup`` package.\n+- ``mockup`` package now uses Npm\'s registry and Yarn instead of Bower.\n \n-Compiling bundles\n------------------\n+Besides the following has been moved in here:\n \n-The default Plone buildout configuration adds an executable in ``./bin/plone-compile-resources``.\n-This script generates compiled bundles (normal, minified and respective maps) in ``plone/staticresources/static/`` or whereever the ``csscompilation`` and ``jscompilation`` attributes of the bundle registration in the resource registry points to.\n+- All static Resources from ``Products.CMFPlone.static``: bundle resources, compiled bundles, external packages\n+- Bundle and Resource registrations from ``Products.CMFPlone``\'s ``dependencies`` profile\n+- ``plone-compile-resources`` script\n+- ``thememapper`` bundle from ``plone.app.theming``\n+- ``plone.resourceeditor`` bundle from ``plone.resourceeditor``\n \n-.. note::\n \n-  You can see all the options of this executable by running ``./bin/plone-compile-resources --help``\n+Compiling Bundles\n+-----------------\n \n+The front end resources in this package should be updated with the script called ``plone-compile-resources``, available in the ``bin`` directory of a default Plone buildout installation.\n+This script compiles the final CSS and JS resources that will be served to end users.\n \n Building the ``plone`` bundle::\n \n   ./bin/plone-compile-resources -b plone\n \n-\n Building the ``plone-logged-in`` bundle::\n \n   ./bin/plone-compile-resources -b plone-logged-in\n \n+.. note::\n+  You can see all the options of this executable by running ``./bin/plone-compile-resources --help``.\n \n-Developing patterns\n--------------------\n \n-All JavaScript code in this package is downloaded via ``yarn`` into ``src/plone/staticresources/static/components``.\n-Nothing in that directory should be manually edited.\n-If you need to fix something, do it in the original repository and eventually upgrade its version (next section).\n+Resources, Bundles, Patterns and the Resource Registry\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-For Mockup, the original repository is: https://github.com/plone/mockup/\n+The ``plone-compile-resources`` script collects Resources from source packages (e.g. ``mockup``) and compiles them in ``plone/staticresources/static/`` into minified versions with source maps and, for JavaScript only, also into an un-minified version.\n+The output directory is configurable by using ``csscompilation`` and ``jscompilation`` attributes of the bundle registration.\n \n-For Patternslib, visit: http://github.com/patternslib/Patterns\n+Bundles are groups of resources. By default Plone comes configured to serve two main bundles:\n \n+- ``plone``: containing JS and CSS used for anonymous visitors\n+- ``plone-logged-in``: with additional resources for authenticated visitors, e.g. for editor and management user interfaces\n \n-How to upgrade the resources in this package\n---------------------------------------------\n+Finally Plone encapsulates most of its CSS and JS into units called Patterns that live in the ``mockup`` package.\n+Although Patterns provide their own registered Resources, those are not registered to Plone main bundles.\n+Instead, they are imported through native LESS and Require JS "entry points" that live in ``plone.staticresource``:\n+\n+- `plone/staticresources/static/plone.js\n+  <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone.js>`_\n+- `plone/staticresources/static/plone.less\n+  <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone.less>`_\n+- `plone/staticresources/static/plone-logged-in.js\n+  <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone-logged-in.js>`_\n+- `plone/staticresources/static/plone-logged-in.less\n+  <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone-logged-in.less>`_\n+\n+When editing a pattern (e.g. in ``mockup`` package), it is important to know for which bundle it is registered, which can be done by checking where it is imported in the entry points above.\n+The bundle name will be useful as parameter for ``plone-compile-resources`` script.\n+\n+.. note::\n+  Patterns are also available as independent resources in :guilabel:`&Resource Registries` control panel but they are not registered to default Plone bundles, which instead use the entry point approach.\n+  Pattern\'s resources may be useful if needed to be injected in specific views.\n+\n+In production mode (``./bin/instance start``), since version 5.1, Plone is configured to serve Aggregate Bundles, single files to minimize network requests (`aggregate bundles <https://docs.plone.org/adapt-and-extend/theming/resourceregistry.html#resource-bundle-aggregation>`_).\n+In that case final production resource URLs will be similar to:\n+\n+- http://localhost:8080//++plone++production/++unique++TIMESTAMP/default.js\n+- http://localhost:8080//++plone++production/++unique++TIMESTAMP/default.css\n+\n+If you enable :guilabel:`&Development Mode` for JavaScript and CSS in :guilabel:`&Resource Registries` control panel, Plone will omit timestamp from path and serve fresh copies of the resources of the selected bundle(s).\n+Those are compiled in-browser, on the fly for each page load and requested by XHR requests to URLs like:\n \n-- Increase ``npm`` package versions in ``package.json``, in sections ``dependencies`` or ``devDependencies``.\n+- http://localhost:8080/++resource++plone.js\n+- http://localhost:8080/++plone++static/plone.less\n+- http://localhost:8080/++resource++plone-logged-in.js\n+- http://localhost:8080/++plone++static/plone-logged-in.less\n+\n+These entry points will then cause Patterns themselves to be loaded through in-browser XHR requests to URLs like:\n+\n+- http://localhost:8080/Plone/++resource++mockup/livesearch/pattern.js\n+- http://localhost:8080/Plone/++resource++mockup/livesearch/pattern.livesearch.less\n+\n+If you do enable Development Mode, and yet do not select any bundles, Plone serves static resources in URLs similar to:\n+\n+- http://localhost:8080/++plone++static/++unique++TIMESTAMP/plone-compiled.min.js\n+- http://localhost:8080/++plone++static/++unique++TIMESTAMP/plone-compiled.css\n+- http://localhost:8080/++plone++static/++unique++TIMESTAMP/plone-logged-in-compiled.min.js\n+- http://localhost:8080/++plone++static/++unique++TIMESTAMP/plone-logged-in-compiled.css\n+\n+\n+Development tips\n+^^^^^^^^^^^^^^^^\n+\n+When fixing Plone bugs or improving functionality:\n+\n+- Dependencies upgrades (e.g. ``moment.js``) should be done in ``mockup`` and after the PR is merged, propagated here (i.e. static resources needs to be recompiled)\n+- Likewise, CSS and JS should be developed not in ``plone.staticresources`` but in their own package\'s source (for instance, in ``mockup``)\n+- To see the new changes in the browser, enable :guilabel:`&Development Mode` in :guilabel:`&Resource Registries` control panel.\n+  Next the desired bundle (that contains the modified files) must be set to either "Develop JavaScript", "Develop CSS" or both.\n+  This causes each of the bundle resources to be served individually, easing development.\n+  In this case, bundle resources are served from the source package (e.g. ``mockup``) instead of ``plone.staticresources``.\n+- To identify which bundle contains the modified resource, see section "Entry Points" below.\n+  Keep in mind the more bundles selected for development mode the slower are page reloads, so it is recommended to select only what is being developed.\n+- Alternatively you may run ``./bin/plone-compile-resources`` between changes and avoid :guilabel:`&Development Mode`\'s in-browser compilation (fastest browser loading time).\n+\n+\n+Entry Points\n+^^^^^^^^^^^^\n+\n+The current list of registered patterns for each entry point is available in:\n+\n+- `plone/staticresources/static/plone.js\n+  <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone.js>`_\n+- `plone/staticresources/static/plone.less\n+  <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone.less>`_\n+- `plone/staticresources/static/plone-logged-in.js\n+  <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone-logged-in.js>`_\n+- `plone/staticresources/static/plone-logged-in.less\n+  <https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/static/plone-logged-in.less>`_\n+\n+Here\'s a snapshot:\n+\n+For anonymous users\n+~~~~~~~~~~~~~~~~~~~\n+\n++---------------------------------------+------------------------------------+\n+| JS                                    | LESS                               |\n++=======================================+====================================+\n+| - jquery                              | - mockup-patterns-autotoc          |\n+| - pat-registry                        | - mockup-patterns-livesearch       |\n+| - mockup-patterns-base                | - mockup-patterns-markspeciallinks |\n+| - mockup-patterns-autotoc             | - mockup-patterns-modal            |\n+| - mockup-patterns-contentloader       | - mockup-patterns-pickadate        |\n+| - mockup-patterns-cookietrigger       | - mockup-patterns-select2          |\n+| - mockup-patterns-formautofocus       |                                    |\n+| - mockup-patterns-formunloadalert     |                                    |\n+| - mockup-patterns-livesearch          |                                    |\n+| - mockup-patterns-markspeciallinks    |                                    |\n+| - mockup-patterns-modal               |                                    |\n+| - mockup-patterns-moment              |                                    |\n+| - mockup-patterns-pickadate           |                                    |\n+| - mockup-patterns-navigationmarker    |                                    |\n+| - mockup-patterns-preventdoublesubmit |                                    |\n+| - mockup-patterns-select2             |                                    |\n+| - bootstrap-collapse                  |                                    |\n+| - bootstrap-dropdown                  |                                    |\n+| - bootstrap-tooltip                   |                                    |\n++---------------------------------------+------------------------------------+\n+\n+For logged-in users\n+~~~~~~~~~~~~~~~~~~~\n+\n++--------------------------------------------+--------------------------------+\n+| JS                                         | LESS                           |\n++============================================+================================+\n+| - mockup-patterns-inlinevalidation         | - mockup-patterns-querystring  |\n+| - mockup-patterns-querystring              | - mockup-patterns-recurrence   |\n+| - mockup-patterns-recurrence               | - mockup-patterns-relateditems |\n+| - mockup-patterns-relateditems             | - mockup-patterns-structure    |\n+| - mockup-patterns-structure                | - mockup-patterns-tinymce      |\n+| - mockup-patterns-structureupdater         | - mockup-patterns-upload       |\n+| - mockup-patterns-textareamimetypeselector | - plone-patterns-toolbar       |\n+| - mockup-patterns-tinymce                  |                                |\n+| - plone-patterns-portletmanager            |                                |\n+| - plone-patterns-toolbar                   |                                |\n++--------------------------------------------+--------------------------------+\n \n-- Run ``yarn upgrade`` (cannot be ``npm``).\n+Developing patterns\n+-------------------\n \n-- Run ``./bin/plone-compile-resources -b plone``, ``./bin/plone-compile-resources -b plone-logged-in`` or whatever bundle you are going to build in your buildout\'s root directory.\n+All JavaScript code in this package is downloaded via ``yarn`` into ``src/plone/staticresources/static/components``.\n+Nothing in that directory should be manually edited.\n+If you need to fix something, do it in the original repository and eventually upgrade its version (next section).\n \n-- Increase the ``last_compilation`` date in ``src/plone/staticresources/profiles/default/registry/bundles.xml``.\n+For Mockup, the original repository is: https://github.com/plone/mockup/\n \n-- Submit a PR and run the tests on Jenkins.\n+For Patternslib, visit: http://github.com/patternslib/Patterns\n \n \n-How to generate the ``plone-compile-resources`` script\n-------------------------------------------------------\n+Generating the ``plone-compile-resources`` script\n+-------------------------------------------------\n \n The ``plone-compile-resources`` script can be used to compile bundles from the command line.\n-In short, the script starts up a Plone instance, reads the resources and bundles configured in the registry and compiles a JS/CSS bundle based on that configuration. See ``plone-compile-resources --help`` for more information.\n+In short, the script starts up a Plone instance, reads the resources and bundles configured in the registry and compiles a JS/CSS bundle based on that configuration.\n+See ``plone-compile-resources --help`` for more information.\n \n When using buildout, ``plone-compile-resources`` script is automatically generated.\n If you use a custom buildout, you might need to add something similar to:\n \n .. code-block:: ini\n+\n   [buildout]\n   parts =\n     # ...\n@@ -122,78 +258,33 @@ If you use a custom buildout, you might need to add something similar to:\n       plone-compile-resources\n \n \n-What has changed since Plone 5.1\n---------------------------------\n-\n-- All static resources - bundle resources, compiled bundles, external packages - from ``Products.CMFPlone.static`` have been moved here.\n-\n-- The bundle and resource registrations from ``Products.CMFPlone``\'s ``dependencies`` profile have also been moved here.\n-\n-- The ``plone-compile-resources`` script has been moved here.\n-\n-- The ``thememapper`` bundle from ``plone.app.theming`` has been moved here.\n-\n-- The ``plone.resourceeditor`` bundle from ``plone.resourceeditor`` package has been moved here.\n-\n-- The ``toolbar`` pattern from ``Products.CMFPlone.static.toolbar`` has been moved to ``mockup`` package.\n+More on the Resource Registry and its modes\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-- ``mockup`` package now uses npm registry and yarn instead of bower.\n-\n-\n-The resource registry and it\'s production and development modes\n----------------------------------------------------------------\n-\n-The files in  the directory ``plone/staticresources/static/`` are served by Plone.\n-In production mode Plone will combine the bundles (if configured) into single files.\n-The URLs will be similar to:\n-\n-- http://localhost:8080//++plone++production/++unique++2019-01-08%2006%3A53%3A49.000248/default.js\n-- http://localhost:8080//++plone++production/++unique++2019-01-08%2006%3A53%3A49.000248/default.css\n-\n-\n-In development mode all bundles are served separately as non-compiled versions.\n-The URLs will be similar to:\n-\n-\n-- http://localhost:8080/++resource++plone.js\n-- http://localhost:8080/++resource++plone-logged-in.js\n-- http://localhost:8080/++plone++static/plone.less\n-- http://localhost:8080//++plone++static/plone-logged-in.less\n-\n-\n-If you set the resource registry to development mode you can set "Develop JavaScript" and "Develop CSS" for individual bundles.\n-Then each of the bundle resources are served individually, which makes it easy to develop on Mockup.\n-In this case, the bundle resources are served from the Mockup package instead of plone.staticresources.\n-The URLs will be similar to:\n-\n-http://localhost:8080/Plone/++resource++mockup/livesearch/pattern.js\n-http://localhost:8080/Plone/++resource++mockup/livesearch/pattern.livesearch.less\n-\n-Have a look on how plone.staticresources and mockup register their resources:\n+Have a look on how ``plone.staticresources`` and ``mockup`` register their resources:\n \n In ZCML:\n \n-https://github.com/plone/mockup/blob/master/mockup/configure.zcml\n-https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/configure.zcml\n+- https://github.com/plone/mockup/blob/master/mockup/configure.zcml\n+- https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/configure.zcml\n \n In the resource registry:\n \n-https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/profiles/default/registry/bundles.xml\n-https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/profiles/default/registry/resources.xml\n-\n+- https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/profiles/default/registry/bundles.xml\n+- https://github.com/plone/plone.staticresources/blob/master/src/plone/staticresources/profiles/default/registry/resources.xml\n \n For more information on the Plone resource registry see the documentation at:\n \n-https://docs.plone.org/adapt-and-extend/theming/resourceregistry.html\n+- https://docs.plone.org/adapt-and-extend/theming/resourceregistry.html\n \n \n Warning\n -------\n \n-If you update ``r.js`` or ``less``, you willl need to manually re-apply a patch that gives us cache busting resource downloads so we can build through the web. See:\n+If you update ``r.js`` or ``less``, you will need to manually re-apply a patch that gives us cache busting resource downloads so we can build through the web.\n+See:\n \n - https://github.com/plone/Products.CMFPlone/commit/2d3865805efc6b72dce236eb68e502d8c57717b6\n-\n - https://github.com/plone/Products.CMFPlone/commit/bd1f9ba99d1ad40bb7fe1c00eaa32b8884aae5e2\n \n \n'

