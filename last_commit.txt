Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2022-04-06T17:18:18+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/cb1de7d74eb1a4888a0a32e39e3366cab5901c00

cleanup aftermath of #3395 + isort/black

Files changed:
M plone/app/contenttypes/browser/folder.py
M plone/app/contenttypes/browser/link_redirect_view.py
M setup.cfg

b'diff --git a/plone/app/contenttypes/browser/folder.py b/plone/app/contenttypes/browser/folder.py\nindex 644bd468..982de4d1 100644\n--- a/plone/app/contenttypes/browser/folder.py\n+++ b/plone/app/contenttypes/browser/folder.py\n@@ -1,16 +1,16 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from plone.app.contenttypes import _\n from plone.app.contenttypes.behaviors.leadimage import ILeadImage\n-from plone.app.vocabularies.metadatafields import get_field_label\n from plone.app.contenttypes.interfaces import IFolder\n from plone.app.contenttypes.interfaces import IImage\n+from plone.app.vocabularies.metadatafields import get_field_label\n+from plone.base.batch import Batch\n+from plone.base.interfaces import ISecuritySchema\n+from plone.base.interfaces import ISiteSchema\n from plone.event.interfaces import IEvent\n from plone.memoize.view import memoize\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISiteSchema\n-from Products.CMFPlone.PloneBatch import Batch\n from Products.CMFPlone.utils import safe_callable\n from Products.Five import BrowserView\n from zope.component import getMultiAdapter\n@@ -20,13 +20,6 @@\n import random\n \n \n-HAS_SECURITY_SETTINGS = True\n-try:\n-    from Products.CMFPlone.interfaces import ISecuritySchema\n-except ImportError:\n-    HAS_SECURITY_SETTINGS = False\n-\n-\n class FolderView(BrowserView):\n \n     text_class = None\n@@ -38,8 +31,7 @@ class FolderView(BrowserView):\n     def plone_view(self):\n         if not self._plone_view:\n             self._plone_view = getMultiAdapter(\n-                (self.context, self.request),\n-                name=u\'plone\'\n+                (self.context, self.request), name=u"plone"\n             )\n         return self._plone_view\n \n@@ -47,8 +39,7 @@ def plone_view(self):\n     def portal_state(self):\n         if not self._portal_state:\n             self._portal_state = getMultiAdapter(\n-                (self.context, self.request),\n-                name=u\'plone_portal_state\'\n+                (self.context, self.request), name=u"plone_portal_state"\n             )\n         return self._portal_state\n \n@@ -56,20 +47,22 @@ def portal_state(self):\n     def pas_member(self):\n         if not self._pas_member:\n             self._pas_member = getMultiAdapter(\n-                (self.context, self.request),\n-                name=u\'pas_member\'\n+                (self.context, self.request), name=u"pas_member"\n             )\n         return self._pas_member\n \n     @property\n     def b_size(self):\n-        b_size = getattr(self.request, \'b_size\', None)\\\n-            or getattr(self.request, \'limit_display\', None) or 20\n+        b_size = (\n+            getattr(self.request, "b_size", None)\n+            or getattr(self.request, "limit_display", None)\n+            or 20\n+        )\n         return int(b_size)\n \n     @property\n     def b_start(self):\n-        b_start = getattr(self.request, \'b_start\', None) or 0\n+        b_start = getattr(self.request, "b_start", None) or 0\n         return int(b_start)\n \n     def results(self, **kwargs):\n@@ -85,28 +78,22 @@ def results(self, **kwargs):\n                 sequence.\n         """\n         # Extra filter\n-        kwargs.update(self.request.get(\'contentFilter\', {}))\n-        if \'object_provides\' not in kwargs:  # object_provides is more specific\n-            kwargs.setdefault(\'portal_type\', self.friendly_types)\n-        kwargs.setdefault(\'batch\', True)\n-        kwargs.setdefault(\'b_size\', self.b_size)\n-        kwargs.setdefault(\'b_start\', self.b_start)\n-        kwargs.setdefault(\'orphan\', 1)\n-\n-        listing = aq_inner(self.context).restrictedTraverse(\n-            \'@@folderListing\', None)\n+        kwargs.update(self.request.get("contentFilter", {}))\n+        if "object_provides" not in kwargs:  # object_provides is more specific\n+            kwargs.setdefault("portal_type", self.friendly_types)\n+        kwargs.setdefault("batch", True)\n+        kwargs.setdefault("b_size", self.b_size)\n+        kwargs.setdefault("b_start", self.b_start)\n+        kwargs.setdefault("orphan", 1)\n+\n+        listing = aq_inner(self.context).restrictedTraverse("@@folderListing", None)\n         if listing is None:\n             return []\n         results = listing(**kwargs)\n         return results\n \n     def batch(self):\n-        batch = Batch(\n-            self.results(),\n-            size=self.b_size,\n-            start=self.b_start,\n-            orphan=1\n-        )\n+        batch = Batch(self.results(), size=self.b_size, start=self.b_start, orphan=1)\n         return batch\n \n     def normalizeString(self, text):\n@@ -130,116 +117,106 @@ def navigation_root_url(self):\n     @property\n     def use_view_action(self):\n         registry = getUtility(IRegistry)\n-        return registry.get(\'plone.types_use_view_action_in_listings\', [])\n+        return registry.get("plone.types_use_view_action_in_listings", [])\n \n     @property\n     def show_about(self):\n-        if not HAS_SECURITY_SETTINGS:\n-            # BBB\n-            site_props = self.context.restrictedTraverse(\n-                \'portal_properties\').site_properties\n-            show_about = getattr(site_props, \'allowAnonymousViewAbout\', False)\n-        else:\n-            registry = getUtility(IRegistry)\n-            settings = registry.forInterface(ISecuritySchema, prefix=\'plone\')\n-            show_about = getattr(settings, \'allow_anon_views_about\', False)\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ISecuritySchema, prefix="plone")\n+        show_about = getattr(settings, "allow_anon_views_about", False)\n         return show_about or not self.isAnon\n \n     @property\n     def text(self):\n-        textfield = getattr(aq_base(self.context), \'text\', None)\n-        text = textfield.output_relative_to(self.context)\\\n-            if getattr(textfield, \'output_relative_to\', None)\\\n+        textfield = getattr(aq_base(self.context), "text", None)\n+        text = (\n+            textfield.output_relative_to(self.context)\n+            if getattr(textfield, "output_relative_to", None)\n             else None\n+        )\n         if text:\n-            self.text_class = \'stx\' if textfield.mimeType in (\n-                \'text/structured\', \'text/x-rst\', \'text/restructured\'\n-            ) else \'plain\'\n+            self.text_class = (\n+                "stx"\n+                if textfield.mimeType\n+                in ("text/structured", "text/x-rst", "text/restructured")\n+                else "plain"\n+            )\n         return text\n \n     @property\n     def tabular_fields(self):\n         ret = []\n-        ret.append(\'Title\')\n+        ret.append("Title")\n         if self.show_about:\n-            ret.append(\'Creator\')\n-        ret.append(\'Type\')\n+            ret.append("Creator")\n+        ret.append("Type")\n         if self.show_about:\n-            ret.append(\'ModificationDate\')\n+            ret.append("ModificationDate")\n         return ret\n \n     def tabular_field_label(self, field):\n         """Return the internationalized label (Message object) corresponding\n-           to the field.\n+        to the field.\n         """\n         return get_field_label(field)\n \n     def tabular_fielddata(self, item, fieldname):\n-        value = getattr(item, fieldname, \'\')\n+        value = getattr(item, fieldname, "")\n         if safe_callable(value):\n             value = value()\n         if fieldname in [\n-                \'CreationDate\',\n-                \'ModificationDate\',\n-                \'Date\',\n-                \'EffectiveDate\',\n-                \'ExpirationDate\',\n-                \'effective\',\n-                \'expires\',\n-                \'start\',\n-                \'end\',\n-                \'created\',\n-                \'modified\',\n-                \'last_comment_date\']:\n+            "CreationDate",\n+            "ModificationDate",\n+            "Date",\n+            "EffectiveDate",\n+            "ExpirationDate",\n+            "effective",\n+            "expires",\n+            "start",\n+            "end",\n+            "created",\n+            "modified",\n+            "last_comment_date",\n+        ]:\n             value = self.toLocalizedTime(value, long_format=1)\n \n         return {\n             # \'title\': _(fieldname, default=fieldname),\n-            \'value\': value\n+            "value": value\n         }\n \n     def is_event(self, obj):\n-        if getattr(obj, \'getObject\', False):\n+        if getattr(obj, "getObject", False):\n             obj = obj.getObject()\n         return IEvent.providedBy(obj)\n \n     def formatted_date(self, item):\n         provider = getMultiAdapter(\n-            (self.context, self.request, self),\n-            IContentProvider, name=\'formatted_date\'\n+            (self.context, self.request, self), IContentProvider, name="formatted_date"\n         )\n         return provider(item)\n \n     @property\n     @memoize\n     def album_images(self):\n-        """Get all images within this folder.\n-        """\n+        """Get all images within this folder."""\n         provides = [\n             IImage.__identifier__,\n             ILeadImage.__identifier__,\n         ]\n-        images = self.results(\n-            batch=False,\n-            object_provides=provides\n-        )\n+        images = self.results(batch=False, object_provides=provides)\n         return images\n \n     @property\n     @memoize\n     def album_folders(self):\n-        """Get all folders within this folder.\n-        """\n-        images = self.results(\n-            batch=False,\n-            object_provides=IFolder.__identifier__\n-        )\n+        """Get all folders within this folder."""\n+        images = self.results(batch=False, object_provides=IFolder.__identifier__)\n         return images\n \n     @property\n     def album_random_image(self):\n-        """Get random image from this folder.\n-        """\n+        """Get random image from this folder."""\n         img = None\n         images = self.album_images\n         if images:\n@@ -248,59 +225,55 @@ def album_random_image(self):\n \n     @property\n     def album_number_images(self):\n-        """Get number of images from this folder.\n-        """\n+        """Get number of images from this folder."""\n         images = self.album_images\n         return len(images)\n \n     @property\n     def no_items_message(self):\n         return _(\n-            \'description_no_items_in_folder\',\n-            default=u\'There are currently no items in this folder.\'\n+            "description_no_items_in_folder",\n+            default=u"There are currently no items in this folder.",\n         )\n \n     @memoize\n     def get_thumb_scale_table(self):\n-        if getattr(self.context, \'suppress_thumbs\', False):\n+        if getattr(self.context, "suppress_thumbs", False):\n             return None\n-        thsize = getattr(self.context, \'thumb_scale_table\', None)\n+        thsize = getattr(self.context, "thumb_scale_table", None)\n         if thsize:\n             return thsize\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix=\'plone\', check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         if settings.no_thumbs_tables:\n             return None\n         return settings.thumb_scale_table\n \n     @memoize\n     def get_thumb_scale_list(self):\n-        if getattr(self.context, \'suppress_thumbs\', False):\n+        if getattr(self.context, "suppress_thumbs", False):\n             return None\n-        thsize = getattr(self.context, \'thumb_scale_list\', None)\n+        thsize = getattr(self.context, "thumb_scale_list", None)\n         if thsize:\n             return thsize\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix=\'plone\', check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         if settings.no_thumbs_lists:\n             return None\n         return settings.thumb_scale_listing\n \n     @memoize\n     def get_thumb_scale_summary(self):\n-        if getattr(self.context, \'suppress_thumbs\', False):\n+        if getattr(self.context, "suppress_thumbs", False):\n             return None\n-        thsize = getattr(self.context, \'thumb_scale_summary\', None)\n+        thsize = getattr(self.context, "thumb_scale_summary", None)\n         if thsize:\n             return thsize\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix=\'plone\', check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         if settings.no_thumbs_summary:\n             return None\n         return settings.thumb_scale_summary\n \n     def show_icons(self):\n-        return not getattr(self.context, \'suppress_icons\', False)\n+        return not getattr(self.context, "suppress_icons", False)\ndiff --git a/plone/app/contenttypes/browser/link_redirect_view.py b/plone/app/contenttypes/browser/link_redirect_view.py\nindex a3a6c0c6..9f15a725 100644\n--- a/plone/app/contenttypes/browser/link_redirect_view.py\n+++ b/plone/app/contenttypes/browser/link_redirect_view.py\n@@ -1,36 +1,33 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.utils import replace_link_variables_by_paths\n from plone.app.uuid.utils import uuidToObject\n+from plone.base.interfaces import ITypesSchema\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import ITypesSchema\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from urllib.parse import urlparse\n from zope.component import getUtility\n \n-import six\n-\n \n # links starting with these URL scheme should not be redirected to\n NON_REDIRECTABLE_URL_SCHEMES = [\n-    \'mailto:\',\n-    \'tel:\',\n-    \'callto:\',  # nonstandard according to RFC 3966. used for skype.\n-    \'webdav:\',\n-    \'caldav:\'\n+    "mailto:",\n+    "tel:",\n+    "callto:",  # nonstandard according to RFC 3966. used for skype.\n+    "webdav:",\n+    "caldav:",\n ]\n \n # links starting with these URL scheme should not be resolved to paths\n NON_RESOLVABLE_URL_SCHEMES = NON_REDIRECTABLE_URL_SCHEMES + [\n-    \'file:\',\n-    \'ftp:\',\n+    "file:",\n+    "ftp:",\n ]\n \n \n class LinkRedirectView(BrowserView):\n \n-    index = ViewPageTemplateFile(\'templates/link.pt\')\n+    index = ViewPageTemplateFile("templates/link.pt")\n \n     def _url_uses_scheme(self, schemes, url=None):\n         url = url or self.context.remoteUrl.strip()\n@@ -41,67 +38,61 @@ def _url_uses_scheme(self, schemes, url=None):\n \n     def __call__(self):\n         """Redirect to the Link target URL, if and only if:\n-         - redirect_links property is enabled in\n-           configuration registry\n-         - the link is of a redirectable type (no mailto:, etc)\n-         - AND current user doesn\'t have permission to edit the Link"""\n+        - redirect_links property is enabled in\n+          configuration registry\n+        - the link is of a redirectable type (no mailto:, etc)\n+        - AND current user doesn\'t have permission to edit the Link"""\n         context = self.context\n-        mtool = getToolByName(context, \'portal_membership\')\n+        mtool = getToolByName(context, "portal_membership")\n \n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ITypesSchema, prefix=\'plone\')\n+        settings = registry.forInterface(ITypesSchema, prefix="plone")\n         redirect_links = settings.redirect_links\n \n-        can_edit = mtool.checkPermission(\'Modify portal content\', context)\n-        redirect_links = redirect_links\\\n-            and not self._url_uses_scheme(NON_REDIRECTABLE_URL_SCHEMES)\n+        can_edit = mtool.checkPermission("Modify portal content", context)\n+        redirect_links = redirect_links and not self._url_uses_scheme(\n+            NON_REDIRECTABLE_URL_SCHEMES\n+        )\n \n         if redirect_links and not can_edit:\n-            target_url = self.absolute_target_url()\n-            if six.PY2:\n-                target_url = target_url.encode(\'utf-8\')\n-            return self.request.RESPONSE.redirect(target_url)\n-        else:\n-            return self.index()\n+            return self.request.RESPONSE.redirect(self.absolute_target_url())\n+        return self.index()\n \n     def url(self):\n-        """Returns the url with link variables replaced.\n-        """\n+        """Returns the url with link variables replaced."""\n         url = replace_link_variables_by_paths(\n-            self.context,\n-            self.context.remoteUrl.strip()\n+            self.context, self.context.remoteUrl.strip()\n         )\n         return url\n \n     def display_link(self):\n-        """Format the url for display\n-        """\n+        """Format the url for display"""\n \n         url = self.url()\n-        if \'resolveuid\' in url:\n-            uid = url.split(\'/\')[-1]\n+        if "resolveuid" in url:\n+            uid = url.split("/")[-1]\n             obj = uuidToObject(uid)\n             if obj:\n                 title = obj.Title()\n-                meta = \'/\'.join(obj.getPhysicalPath()[2:])\n-                if not meta.startswith(\'/\'):\n-                    meta = \'/\' + meta\n+                meta = "/".join(obj.getPhysicalPath()[2:])\n+                if not meta.startswith("/"):\n+                    meta = "/" + meta\n                 return {\n-                    \'title\': title,\n-                    \'meta\': meta,\n+                    "title": title,\n+                    "meta": meta,\n                 }\n \n         parsed = urlparse(url)\n-        if parsed.scheme == \'mailto\':\n+        if parsed.scheme == "mailto":\n             return {\n-                \'title\': parsed.path,\n-                \'meta\': \'\',\n+                "title": parsed.path,\n+                "meta": "",\n             }\n \n         return {\n-                \'title\': url,\n-                \'meta\': \'\',\n-            }\n+            "title": url,\n+            "meta": "",\n+        }\n \n     def absolute_target_url(self):\n         """Compute the absolute target URL."""\n@@ -111,19 +102,14 @@ def absolute_target_url(self):\n             # For non http/https url schemes, there is no path to resolve.\n             return url\n \n-        if url.startswith(\'.\'):\n+        if url.startswith("."):\n             # we just need to adapt ../relative/links, /absolute/ones work\n             # anyway -> this requires relative links to start with ./ or\n             # ../\n-            context_state = self.context.restrictedTraverse(\n-                \'@@plone_context_state\'\n-            )\n-            url = \'/\'.join([\n-                context_state.canonical_object_url(),\n-                url\n-            ])\n+            context_state = self.context.restrictedTraverse("@@plone_context_state")\n+            url = "/".join([context_state.canonical_object_url(), url])\n         else:\n-            if not url.startswith((\'http://\', \'https://\')):\n-                url = self.request[\'SERVER_URL\'] + url\n+            if not url.startswith(("http://", "https://")):\n+                url = self.request["SERVER_URL"] + url\n \n         return url\ndiff --git a/setup.cfg b/setup.cfg\nindex e015a683..c180b433 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -11,3 +11,10 @@ ignore =\n \n [bdist_wheel]\n universal = 1\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2022-04-06T17:20:01+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/e7052bc3db001f9e9aa6b9f758ef2a9c44176a3b

newsfile

Files changed:
A news/639.bugfix

b'diff --git a/news/639.bugfix b/news/639.bugfix\nnew file mode 100644\nindex 00000000..6106d39f\n--- /dev/null\n+++ b/news/639.bugfix\n@@ -0,0 +1,2 @@\n+Aftermath of PLIP 3395 + isort/black on these files.\n+[jensens]\n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2022-04-06T21:48:42+02:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/0b9f90d43d106aa9c7c2039ccc6c06a88238b411

Merge pull request #639 from plone/cleanup-3395

cleanup aftermath of #3395 + isort/black

Files changed:
A news/639.bugfix
M plone/app/contenttypes/browser/folder.py
M plone/app/contenttypes/browser/link_redirect_view.py
M setup.cfg

b'diff --git a/news/639.bugfix b/news/639.bugfix\nnew file mode 100644\nindex 00000000..6106d39f\n--- /dev/null\n+++ b/news/639.bugfix\n@@ -0,0 +1,2 @@\n+Aftermath of PLIP 3395 + isort/black on these files.\n+[jensens]\ndiff --git a/plone/app/contenttypes/browser/folder.py b/plone/app/contenttypes/browser/folder.py\nindex 644bd468..982de4d1 100644\n--- a/plone/app/contenttypes/browser/folder.py\n+++ b/plone/app/contenttypes/browser/folder.py\n@@ -1,16 +1,16 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from plone.app.contenttypes import _\n from plone.app.contenttypes.behaviors.leadimage import ILeadImage\n-from plone.app.vocabularies.metadatafields import get_field_label\n from plone.app.contenttypes.interfaces import IFolder\n from plone.app.contenttypes.interfaces import IImage\n+from plone.app.vocabularies.metadatafields import get_field_label\n+from plone.base.batch import Batch\n+from plone.base.interfaces import ISecuritySchema\n+from plone.base.interfaces import ISiteSchema\n from plone.event.interfaces import IEvent\n from plone.memoize.view import memoize\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ISiteSchema\n-from Products.CMFPlone.PloneBatch import Batch\n from Products.CMFPlone.utils import safe_callable\n from Products.Five import BrowserView\n from zope.component import getMultiAdapter\n@@ -20,13 +20,6 @@\n import random\n \n \n-HAS_SECURITY_SETTINGS = True\n-try:\n-    from Products.CMFPlone.interfaces import ISecuritySchema\n-except ImportError:\n-    HAS_SECURITY_SETTINGS = False\n-\n-\n class FolderView(BrowserView):\n \n     text_class = None\n@@ -38,8 +31,7 @@ class FolderView(BrowserView):\n     def plone_view(self):\n         if not self._plone_view:\n             self._plone_view = getMultiAdapter(\n-                (self.context, self.request),\n-                name=u\'plone\'\n+                (self.context, self.request), name=u"plone"\n             )\n         return self._plone_view\n \n@@ -47,8 +39,7 @@ def plone_view(self):\n     def portal_state(self):\n         if not self._portal_state:\n             self._portal_state = getMultiAdapter(\n-                (self.context, self.request),\n-                name=u\'plone_portal_state\'\n+                (self.context, self.request), name=u"plone_portal_state"\n             )\n         return self._portal_state\n \n@@ -56,20 +47,22 @@ def portal_state(self):\n     def pas_member(self):\n         if not self._pas_member:\n             self._pas_member = getMultiAdapter(\n-                (self.context, self.request),\n-                name=u\'pas_member\'\n+                (self.context, self.request), name=u"pas_member"\n             )\n         return self._pas_member\n \n     @property\n     def b_size(self):\n-        b_size = getattr(self.request, \'b_size\', None)\\\n-            or getattr(self.request, \'limit_display\', None) or 20\n+        b_size = (\n+            getattr(self.request, "b_size", None)\n+            or getattr(self.request, "limit_display", None)\n+            or 20\n+        )\n         return int(b_size)\n \n     @property\n     def b_start(self):\n-        b_start = getattr(self.request, \'b_start\', None) or 0\n+        b_start = getattr(self.request, "b_start", None) or 0\n         return int(b_start)\n \n     def results(self, **kwargs):\n@@ -85,28 +78,22 @@ def results(self, **kwargs):\n                 sequence.\n         """\n         # Extra filter\n-        kwargs.update(self.request.get(\'contentFilter\', {}))\n-        if \'object_provides\' not in kwargs:  # object_provides is more specific\n-            kwargs.setdefault(\'portal_type\', self.friendly_types)\n-        kwargs.setdefault(\'batch\', True)\n-        kwargs.setdefault(\'b_size\', self.b_size)\n-        kwargs.setdefault(\'b_start\', self.b_start)\n-        kwargs.setdefault(\'orphan\', 1)\n-\n-        listing = aq_inner(self.context).restrictedTraverse(\n-            \'@@folderListing\', None)\n+        kwargs.update(self.request.get("contentFilter", {}))\n+        if "object_provides" not in kwargs:  # object_provides is more specific\n+            kwargs.setdefault("portal_type", self.friendly_types)\n+        kwargs.setdefault("batch", True)\n+        kwargs.setdefault("b_size", self.b_size)\n+        kwargs.setdefault("b_start", self.b_start)\n+        kwargs.setdefault("orphan", 1)\n+\n+        listing = aq_inner(self.context).restrictedTraverse("@@folderListing", None)\n         if listing is None:\n             return []\n         results = listing(**kwargs)\n         return results\n \n     def batch(self):\n-        batch = Batch(\n-            self.results(),\n-            size=self.b_size,\n-            start=self.b_start,\n-            orphan=1\n-        )\n+        batch = Batch(self.results(), size=self.b_size, start=self.b_start, orphan=1)\n         return batch\n \n     def normalizeString(self, text):\n@@ -130,116 +117,106 @@ def navigation_root_url(self):\n     @property\n     def use_view_action(self):\n         registry = getUtility(IRegistry)\n-        return registry.get(\'plone.types_use_view_action_in_listings\', [])\n+        return registry.get("plone.types_use_view_action_in_listings", [])\n \n     @property\n     def show_about(self):\n-        if not HAS_SECURITY_SETTINGS:\n-            # BBB\n-            site_props = self.context.restrictedTraverse(\n-                \'portal_properties\').site_properties\n-            show_about = getattr(site_props, \'allowAnonymousViewAbout\', False)\n-        else:\n-            registry = getUtility(IRegistry)\n-            settings = registry.forInterface(ISecuritySchema, prefix=\'plone\')\n-            show_about = getattr(settings, \'allow_anon_views_about\', False)\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ISecuritySchema, prefix="plone")\n+        show_about = getattr(settings, "allow_anon_views_about", False)\n         return show_about or not self.isAnon\n \n     @property\n     def text(self):\n-        textfield = getattr(aq_base(self.context), \'text\', None)\n-        text = textfield.output_relative_to(self.context)\\\n-            if getattr(textfield, \'output_relative_to\', None)\\\n+        textfield = getattr(aq_base(self.context), "text", None)\n+        text = (\n+            textfield.output_relative_to(self.context)\n+            if getattr(textfield, "output_relative_to", None)\n             else None\n+        )\n         if text:\n-            self.text_class = \'stx\' if textfield.mimeType in (\n-                \'text/structured\', \'text/x-rst\', \'text/restructured\'\n-            ) else \'plain\'\n+            self.text_class = (\n+                "stx"\n+                if textfield.mimeType\n+                in ("text/structured", "text/x-rst", "text/restructured")\n+                else "plain"\n+            )\n         return text\n \n     @property\n     def tabular_fields(self):\n         ret = []\n-        ret.append(\'Title\')\n+        ret.append("Title")\n         if self.show_about:\n-            ret.append(\'Creator\')\n-        ret.append(\'Type\')\n+            ret.append("Creator")\n+        ret.append("Type")\n         if self.show_about:\n-            ret.append(\'ModificationDate\')\n+            ret.append("ModificationDate")\n         return ret\n \n     def tabular_field_label(self, field):\n         """Return the internationalized label (Message object) corresponding\n-           to the field.\n+        to the field.\n         """\n         return get_field_label(field)\n \n     def tabular_fielddata(self, item, fieldname):\n-        value = getattr(item, fieldname, \'\')\n+        value = getattr(item, fieldname, "")\n         if safe_callable(value):\n             value = value()\n         if fieldname in [\n-                \'CreationDate\',\n-                \'ModificationDate\',\n-                \'Date\',\n-                \'EffectiveDate\',\n-                \'ExpirationDate\',\n-                \'effective\',\n-                \'expires\',\n-                \'start\',\n-                \'end\',\n-                \'created\',\n-                \'modified\',\n-                \'last_comment_date\']:\n+            "CreationDate",\n+            "ModificationDate",\n+            "Date",\n+            "EffectiveDate",\n+            "ExpirationDate",\n+            "effective",\n+            "expires",\n+            "start",\n+            "end",\n+            "created",\n+            "modified",\n+            "last_comment_date",\n+        ]:\n             value = self.toLocalizedTime(value, long_format=1)\n \n         return {\n             # \'title\': _(fieldname, default=fieldname),\n-            \'value\': value\n+            "value": value\n         }\n \n     def is_event(self, obj):\n-        if getattr(obj, \'getObject\', False):\n+        if getattr(obj, "getObject", False):\n             obj = obj.getObject()\n         return IEvent.providedBy(obj)\n \n     def formatted_date(self, item):\n         provider = getMultiAdapter(\n-            (self.context, self.request, self),\n-            IContentProvider, name=\'formatted_date\'\n+            (self.context, self.request, self), IContentProvider, name="formatted_date"\n         )\n         return provider(item)\n \n     @property\n     @memoize\n     def album_images(self):\n-        """Get all images within this folder.\n-        """\n+        """Get all images within this folder."""\n         provides = [\n             IImage.__identifier__,\n             ILeadImage.__identifier__,\n         ]\n-        images = self.results(\n-            batch=False,\n-            object_provides=provides\n-        )\n+        images = self.results(batch=False, object_provides=provides)\n         return images\n \n     @property\n     @memoize\n     def album_folders(self):\n-        """Get all folders within this folder.\n-        """\n-        images = self.results(\n-            batch=False,\n-            object_provides=IFolder.__identifier__\n-        )\n+        """Get all folders within this folder."""\n+        images = self.results(batch=False, object_provides=IFolder.__identifier__)\n         return images\n \n     @property\n     def album_random_image(self):\n-        """Get random image from this folder.\n-        """\n+        """Get random image from this folder."""\n         img = None\n         images = self.album_images\n         if images:\n@@ -248,59 +225,55 @@ def album_random_image(self):\n \n     @property\n     def album_number_images(self):\n-        """Get number of images from this folder.\n-        """\n+        """Get number of images from this folder."""\n         images = self.album_images\n         return len(images)\n \n     @property\n     def no_items_message(self):\n         return _(\n-            \'description_no_items_in_folder\',\n-            default=u\'There are currently no items in this folder.\'\n+            "description_no_items_in_folder",\n+            default=u"There are currently no items in this folder.",\n         )\n \n     @memoize\n     def get_thumb_scale_table(self):\n-        if getattr(self.context, \'suppress_thumbs\', False):\n+        if getattr(self.context, "suppress_thumbs", False):\n             return None\n-        thsize = getattr(self.context, \'thumb_scale_table\', None)\n+        thsize = getattr(self.context, "thumb_scale_table", None)\n         if thsize:\n             return thsize\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix=\'plone\', check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         if settings.no_thumbs_tables:\n             return None\n         return settings.thumb_scale_table\n \n     @memoize\n     def get_thumb_scale_list(self):\n-        if getattr(self.context, \'suppress_thumbs\', False):\n+        if getattr(self.context, "suppress_thumbs", False):\n             return None\n-        thsize = getattr(self.context, \'thumb_scale_list\', None)\n+        thsize = getattr(self.context, "thumb_scale_list", None)\n         if thsize:\n             return thsize\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix=\'plone\', check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         if settings.no_thumbs_lists:\n             return None\n         return settings.thumb_scale_listing\n \n     @memoize\n     def get_thumb_scale_summary(self):\n-        if getattr(self.context, \'suppress_thumbs\', False):\n+        if getattr(self.context, "suppress_thumbs", False):\n             return None\n-        thsize = getattr(self.context, \'thumb_scale_summary\', None)\n+        thsize = getattr(self.context, "thumb_scale_summary", None)\n         if thsize:\n             return thsize\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            ISiteSchema, prefix=\'plone\', check=False)\n+        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n         if settings.no_thumbs_summary:\n             return None\n         return settings.thumb_scale_summary\n \n     def show_icons(self):\n-        return not getattr(self.context, \'suppress_icons\', False)\n+        return not getattr(self.context, "suppress_icons", False)\ndiff --git a/plone/app/contenttypes/browser/link_redirect_view.py b/plone/app/contenttypes/browser/link_redirect_view.py\nindex a3a6c0c6..9f15a725 100644\n--- a/plone/app/contenttypes/browser/link_redirect_view.py\n+++ b/plone/app/contenttypes/browser/link_redirect_view.py\n@@ -1,36 +1,33 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.utils import replace_link_variables_by_paths\n from plone.app.uuid.utils import uuidToObject\n+from plone.base.interfaces import ITypesSchema\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import ITypesSchema\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from urllib.parse import urlparse\n from zope.component import getUtility\n \n-import six\n-\n \n # links starting with these URL scheme should not be redirected to\n NON_REDIRECTABLE_URL_SCHEMES = [\n-    \'mailto:\',\n-    \'tel:\',\n-    \'callto:\',  # nonstandard according to RFC 3966. used for skype.\n-    \'webdav:\',\n-    \'caldav:\'\n+    "mailto:",\n+    "tel:",\n+    "callto:",  # nonstandard according to RFC 3966. used for skype.\n+    "webdav:",\n+    "caldav:",\n ]\n \n # links starting with these URL scheme should not be resolved to paths\n NON_RESOLVABLE_URL_SCHEMES = NON_REDIRECTABLE_URL_SCHEMES + [\n-    \'file:\',\n-    \'ftp:\',\n+    "file:",\n+    "ftp:",\n ]\n \n \n class LinkRedirectView(BrowserView):\n \n-    index = ViewPageTemplateFile(\'templates/link.pt\')\n+    index = ViewPageTemplateFile("templates/link.pt")\n \n     def _url_uses_scheme(self, schemes, url=None):\n         url = url or self.context.remoteUrl.strip()\n@@ -41,67 +38,61 @@ def _url_uses_scheme(self, schemes, url=None):\n \n     def __call__(self):\n         """Redirect to the Link target URL, if and only if:\n-         - redirect_links property is enabled in\n-           configuration registry\n-         - the link is of a redirectable type (no mailto:, etc)\n-         - AND current user doesn\'t have permission to edit the Link"""\n+        - redirect_links property is enabled in\n+          configuration registry\n+        - the link is of a redirectable type (no mailto:, etc)\n+        - AND current user doesn\'t have permission to edit the Link"""\n         context = self.context\n-        mtool = getToolByName(context, \'portal_membership\')\n+        mtool = getToolByName(context, "portal_membership")\n \n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ITypesSchema, prefix=\'plone\')\n+        settings = registry.forInterface(ITypesSchema, prefix="plone")\n         redirect_links = settings.redirect_links\n \n-        can_edit = mtool.checkPermission(\'Modify portal content\', context)\n-        redirect_links = redirect_links\\\n-            and not self._url_uses_scheme(NON_REDIRECTABLE_URL_SCHEMES)\n+        can_edit = mtool.checkPermission("Modify portal content", context)\n+        redirect_links = redirect_links and not self._url_uses_scheme(\n+            NON_REDIRECTABLE_URL_SCHEMES\n+        )\n \n         if redirect_links and not can_edit:\n-            target_url = self.absolute_target_url()\n-            if six.PY2:\n-                target_url = target_url.encode(\'utf-8\')\n-            return self.request.RESPONSE.redirect(target_url)\n-        else:\n-            return self.index()\n+            return self.request.RESPONSE.redirect(self.absolute_target_url())\n+        return self.index()\n \n     def url(self):\n-        """Returns the url with link variables replaced.\n-        """\n+        """Returns the url with link variables replaced."""\n         url = replace_link_variables_by_paths(\n-            self.context,\n-            self.context.remoteUrl.strip()\n+            self.context, self.context.remoteUrl.strip()\n         )\n         return url\n \n     def display_link(self):\n-        """Format the url for display\n-        """\n+        """Format the url for display"""\n \n         url = self.url()\n-        if \'resolveuid\' in url:\n-            uid = url.split(\'/\')[-1]\n+        if "resolveuid" in url:\n+            uid = url.split("/")[-1]\n             obj = uuidToObject(uid)\n             if obj:\n                 title = obj.Title()\n-                meta = \'/\'.join(obj.getPhysicalPath()[2:])\n-                if not meta.startswith(\'/\'):\n-                    meta = \'/\' + meta\n+                meta = "/".join(obj.getPhysicalPath()[2:])\n+                if not meta.startswith("/"):\n+                    meta = "/" + meta\n                 return {\n-                    \'title\': title,\n-                    \'meta\': meta,\n+                    "title": title,\n+                    "meta": meta,\n                 }\n \n         parsed = urlparse(url)\n-        if parsed.scheme == \'mailto\':\n+        if parsed.scheme == "mailto":\n             return {\n-                \'title\': parsed.path,\n-                \'meta\': \'\',\n+                "title": parsed.path,\n+                "meta": "",\n             }\n \n         return {\n-                \'title\': url,\n-                \'meta\': \'\',\n-            }\n+            "title": url,\n+            "meta": "",\n+        }\n \n     def absolute_target_url(self):\n         """Compute the absolute target URL."""\n@@ -111,19 +102,14 @@ def absolute_target_url(self):\n             # For non http/https url schemes, there is no path to resolve.\n             return url\n \n-        if url.startswith(\'.\'):\n+        if url.startswith("."):\n             # we just need to adapt ../relative/links, /absolute/ones work\n             # anyway -> this requires relative links to start with ./ or\n             # ../\n-            context_state = self.context.restrictedTraverse(\n-                \'@@plone_context_state\'\n-            )\n-            url = \'/\'.join([\n-                context_state.canonical_object_url(),\n-                url\n-            ])\n+            context_state = self.context.restrictedTraverse("@@plone_context_state")\n+            url = "/".join([context_state.canonical_object_url(), url])\n         else:\n-            if not url.startswith((\'http://\', \'https://\')):\n-                url = self.request[\'SERVER_URL\'] + url\n+            if not url.startswith(("http://", "https://")):\n+                url = self.request["SERVER_URL"] + url\n \n         return url\ndiff --git a/setup.cfg b/setup.cfg\nindex e015a683..c180b433 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -11,3 +11,10 @@ ignore =\n \n [bdist_wheel]\n universal = 1\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n'

