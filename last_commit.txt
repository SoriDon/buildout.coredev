Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-10-04T14:23:31+02:00
Author: Katja S端ss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/Products.CMFPlone/commit/058cf598a732e23d98713a2f0df128c9925a71b3

bug fix test_groups_modify_roles

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py

b"diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\nindex ee099614d..7154b872b 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\n@@ -297,7 +297,7 @@ def test_groups_modify_roles(self):\n         # Check that role is not selected yet and then select it and apply it.\n         form = self.browser.getForm(id='groups_search')\n         ctrl = form._form.get('group_group1:list', index=1)\n-        self.assertEqual(ctrl._value, 'Site Administrator')\n+        self.assertEqual(ctrl._value, 'Contributor')\n         self.assertFalse(ctrl.checked)\n         ctrl.checked = True\n         self.browser.getControl('Save').click()\n@@ -305,7 +305,7 @@ def test_groups_modify_roles(self):\n         # Check that role is now selected\n         form = self.browser.getForm(id='groups_search')\n         ctrl = form._form.get('group_group1:list', index=1)\n-        self.assertEqual(ctrl._value, 'Site Administrator')\n+        self.assertEqual(ctrl._value, 'Contributor')\n         self.assertTrue(ctrl.checked)\n \n     def test_groups_delete_group(self):\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-10-04T14:28:06+02:00
Author: Katja S端ss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/Products.CMFPlone/commit/aaca3e6aeaa8ec60c9da6b6048b77f695776fa03

Merge branch 'master' into remove-legacy-resource-registries

Files changed:
M CHANGES.rst
D Products/CMFPlone/skins/plone_scripts/enableHTTPCompression.py
D Products/CMFPlone/skins/plone_scripts/redirectToReferrer.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 9e08546b3..061fcbc95 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -17,6 +17,12 @@ Breaking changes:\n \n - Removed getObjectsFromPathList.py skin script. #1801\n   [reinhardt]\n+  \n+- Removed redirectToReferrer.py skin script. #1801\n+  [tlotze]\n+\n+- Removed enableHTTPCompression.py skin script. #1801\n+  [tlotze]\n \n - Removed setAuthCookie.py skin script. #1801\n   [tlotze]\ndiff --git a/Products/CMFPlone/skins/plone_scripts/enableHTTPCompression.py b/Products/CMFPlone/skins/plone_scripts/enableHTTPCompression.py\ndeleted file mode 100644\nindex d53764e63..000000000\n--- a/Products/CMFPlone/skins/plone_scripts/enableHTTPCompression.py\n+++ /dev/null\n@@ -1,25 +0,0 @@\n-## Script (Python) "enableHTTPCompression"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=request=None, force=0, debug=0, enable=0\n-##title=Enable zlib based HTTP compression\n-\n-# force: force http compression even if the browser doesn\'t send an accept\n-# debug: return compression state (0: no, 1: yes, 2: force)\n-\n-if not enable:\n-    if debug:\n-        return \'<!-- compression status: disabled -->\'\n-    else:\n-        return\n-\n-if request is None:\n-    request = context.REQUEST\n-\n-result = request.RESPONSE.enableHTTPCompression(REQUEST=request, force=force)\n-\n-if debug:\n-    return \'<!-- compression status: %s -->\' % result\ndiff --git a/Products/CMFPlone/skins/plone_scripts/redirectToReferrer.py b/Products/CMFPlone/skins/plone_scripts/redirectToReferrer.py\ndeleted file mode 100644\nindex 9bd9b0916..000000000\n--- a/Products/CMFPlone/skins/plone_scripts/redirectToReferrer.py\n+++ /dev/null\n@@ -1,17 +0,0 @@\n-## Script (Python) "redirectToReferrer"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=message\n-##title=Redirect to Referrer with message\n-\n-request = context.REQUEST\n-referer = request.get(\'HTTP_REFERER\', \'\')\n-query_pos = referer.find(\'?\')\n-if query_pos != -1:\n-    target_url = referer[:referer.find(\'?\')]\n-else:\n-    target_url = referer\n-return request.RESPONSE.redirect(target_url)\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-10-04T17:30:52+02:00
Author: Katja S端ss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/Products.CMFPlone/commit/effed948dfc8da91a8595758af4725c2bae3c2b1

Merge branch 'master' into remove-legacy-resource-registries

Files changed:
M CHANGES.rst
M Products/CMFPlone/profiles/default/rolemap.xml
M Products/CMFPlone/tests/testSiteAdminRole.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 061fcbc95..a592b0367 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -27,6 +27,9 @@ Breaking changes:\n - Removed setAuthCookie.py skin script. #1801\n   [tlotze]\n \n+- Stop configuring \'View History\' permission which was removed from Zope.\n+  [davisagli]\n+\n New features:\n \n - Factored out human_readable_size method for replacing getObjSize.py. #1801\ndiff --git a/Products/CMFPlone/profiles/default/rolemap.xml b/Products/CMFPlone/profiles/default/rolemap.xml\nindex 03b69f586..54dd70182 100644\n--- a/Products/CMFPlone/profiles/default/rolemap.xml\n+++ b/Products/CMFPlone/profiles/default/rolemap.xml\n@@ -132,9 +132,6 @@\n       <role name="Member"/>\n       <role name="Owner"/>\n     </permission>\n-    <permission name="View History" acquire="True">\n-      <role name="Site Administrator"/>\n-    </permission>\n     <permission name="View management screens"\n                 acquire="True">\n       <role name="Manager"/>\ndiff --git a/Products/CMFPlone/tests/testSiteAdminRole.py b/Products/CMFPlone/tests/testSiteAdminRole.py\nindex b09e97958..218eafcdd 100644\n--- a/Products/CMFPlone/tests/testSiteAdminRole.py\n+++ b/Products/CMFPlone/tests/testSiteAdminRole.py\n@@ -196,7 +196,6 @@ def testExpectedPermissions(self):\n             \'Reply to item\':                                            0,\n             \'View\':                                                     1,\n             \'View Groups\':                                              1,\n-            \'View History\':                                             1,\n             \'View management screens\':                                  0,\n             \'WebDAV Lock items\':                                        1,\n             \'WebDAV Unlock items\':                                      1,\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-10-05T10:44:06+02:00
Author: Katja S端ss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/Products.CMFPlone/commit/6d14fcdb7baafb3533e65990971525abf6112f38

remove legacy resource registries

Files changed:
M Products/CMFPlone/exportimport/configure.zcml
M Products/CMFPlone/resources/configure.zcml
D Products/CMFPlone/resources/exportimport/configure.zcml
D Products/CMFPlone/resources/exportimport/cssregistry.py
D Products/CMFPlone/resources/exportimport/jsregistry.py
D Products/CMFPlone/resources/viewlets/__init__.py
D Products/CMFPlone/resources/viewlets/registries.py
D Products/CMFPlone/resources/viewlets/settings.py

b'diff --git a/Products/CMFPlone/exportimport/configure.zcml b/Products/CMFPlone/exportimport/configure.zcml\nindex 9f2601191..15c6ed355 100644\n--- a/Products/CMFPlone/exportimport/configure.zcml\n+++ b/Products/CMFPlone/exportimport/configure.zcml\n@@ -14,28 +14,6 @@\n     <depends name="typeinfo"/>\n   </genericsetup:importStep>\n \n-  <genericsetup:importStep\n-      name="cssregistry"\n-      title="Stylesheet registry"\n-      description="Import stylesheet registry"\n-      handler="Products.CMFPlone.resources.exportimport.cssregistry.importCSSRegistry">\n-    <depends name="skins"/>\n-    <depends name="componentregistry"/>\n-    <depends name="plone.app.registry"/>\n-    <depends name="toolset"/>\n-  </genericsetup:importStep>\n-\n-  <genericsetup:importStep\n-      name="jsregistry"\n-      title="Javascript registry"\n-      description="Import javascript registry"\n-      handler="Products.CMFPlone.resources.exportimport.jsregistry.importJSRegistry">\n-    <depends name="skins"/>\n-    <depends name="componentregistry"/>\n-    <depends name="plone.app.registry"/>\n-    <depends name="toolset"/>\n-  </genericsetup:importStep>\n-\n   <genericsetup:importStep\n       name="viewlets"\n       title="Viewlet Settings"\ndiff --git a/Products/CMFPlone/resources/configure.zcml b/Products/CMFPlone/resources/configure.zcml\nindex 474e56ef0..0bec1224e 100644\n--- a/Products/CMFPlone/resources/configure.zcml\n+++ b/Products/CMFPlone/resources/configure.zcml\n@@ -3,6 +3,5 @@\n     i18n_domain="plone.registry">\n \n     <include package=".browser" />\n-    <include package=".exportimport" />\n \n </configure>\ndiff --git a/Products/CMFPlone/resources/exportimport/configure.zcml b/Products/CMFPlone/resources/exportimport/configure.zcml\ndeleted file mode 100644\nindex 400fed6a1..000000000\n--- a/Products/CMFPlone/resources/exportimport/configure.zcml\n+++ /dev/null\n@@ -1,19 +0,0 @@\n-<configure\n-    xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone">\n-\n-  <adapter\n-      factory=".jsregistry.JSRegistryNodeAdapter"\n-      provides="Products.GenericSetup.interfaces.IBody"\n-      for="Products.ResourceRegistries.interfaces.IJSRegistry\n-           Products.GenericSetup.interfaces.ISetupEnviron"\n-      />\n-\n-  <adapter\n-      factory=".cssregistry.CSSRegistryNodeAdapter"\n-      provides="Products.GenericSetup.interfaces.IBody"\n-      for="Products.ResourceRegistries.interfaces.ICSSRegistry\n-           Products.GenericSetup.interfaces.ISetupEnviron"\n-      />\n-\n-</configure>\ndiff --git a/Products/CMFPlone/resources/exportimport/cssregistry.py b/Products/CMFPlone/resources/exportimport/cssregistry.py\ndeleted file mode 100644\nindex d4fa172c4..000000000\n--- a/Products/CMFPlone/resources/exportimport/cssregistry.py\n+++ /dev/null\n@@ -1,29 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from Products.CMFPlone.resources.exportimport.resourceregistry import importResRegistry\n-from Products.CMFPlone.resources.exportimport.resourceregistry import ResourceRegistryNodeAdapter\n-from Products.ResourceRegistries.interfaces import ICSSRegistry\n-\n-\n-_FILENAME = \'cssregistry.xml\'\n-_REG_ID = \'portal_css\'\n-_REG_TITLE = \'Stylesheet registry\'\n-\n-\n-def importCSSRegistry(context):\n-    """\n-    Import CSS registry.\n-    """\n-    return importResRegistry(context, _REG_ID, _REG_TITLE, _FILENAME)\n-\n-\n-class CSSRegistryNodeAdapter(ResourceRegistryNodeAdapter):\n-\n-    """\n-    Node im- and exporter for CSSRegistry.\n-    """\n-\n-    __used_for__ = ICSSRegistry\n-    registry_id = _REG_ID\n-    resource_type = \'stylesheet\'\n-    register_method = \'registerStylesheet\'\n-    update_method = \'updateStylesheet\'\ndiff --git a/Products/CMFPlone/resources/exportimport/jsregistry.py b/Products/CMFPlone/resources/exportimport/jsregistry.py\ndeleted file mode 100644\nindex e11966c99..000000000\n--- a/Products/CMFPlone/resources/exportimport/jsregistry.py\n+++ /dev/null\n@@ -1,31 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from Products.ResourceRegistries.interfaces import IJSRegistry\n-from .resourceregistry import importResRegistry\n-from .resourceregistry import ResourceRegistryNodeAdapter\n-\n-\n-_FILENAME = \'jsregistry.xml\'\n-_REG_ID = \'portal_javascripts\'\n-_REG_TITLE = \'Javascript registry\'\n-\n-\n-def importJSRegistry(context):\n-    """Import javascript registry.\n-    """\n-    return importResRegistry(context, _REG_ID, _REG_TITLE, _FILENAME)\n-\n-\n-class JSRegistryNodeAdapter(ResourceRegistryNodeAdapter):\n-    """Node im- and exporter for JSRegistry.\n-    """\n-\n-    __used_for__ = IJSRegistry\n-    registry_id = _REG_ID\n-    resource_type = \'javascript\'\n-    register_method = \'registerScript\'\n-    update_method = \'updateScript\'\n-\n-    # We already have jQuery, blacklist legacy installs of plone.app.jquery js\n-    resource_blacklist = set((\n-        "++resource++plone.app.jquery.js",\n-    ))\ndiff --git a/Products/CMFPlone/resources/viewlets/__init__.py b/Products/CMFPlone/resources/viewlets/__init__.py\ndeleted file mode 100644\nindex 31d2aad4b..000000000\n--- a/Products/CMFPlone/resources/viewlets/__init__.py\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from Products.ResourceRegistries.interfaces.registries import ICookedFile\n-from Products.ResourceRegistries.interfaces.registries import ICSSRegistry\n-from Products.ResourceRegistries.interfaces.registries import IJSRegistry\n-from Products.ResourceRegistries.interfaces.registries import IKSSRegistry\n-from Products.ResourceRegistries.interfaces.registries import IResourceProvider\n-from Products.ResourceRegistries.interfaces.registries import IResourceRegistry\n-from Products.ResourceRegistries.interfaces.settings import IResourceRegistriesSettings\n-from Products.ResourceRegistries.interfaces.viewletmanagers import IHtmlHeadScripts\n-from Products.ResourceRegistries.interfaces.viewletmanagers import IHtmlHeadStyles\ndiff --git a/Products/CMFPlone/resources/viewlets/registries.py b/Products/CMFPlone/resources/viewlets/registries.py\ndeleted file mode 100644\nindex 89a0ca60d..000000000\n--- a/Products/CMFPlone/resources/viewlets/registries.py\n+++ /dev/null\n@@ -1,160 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import Attribute\n-from zope.interface import Interface\n-\n-\n-class ICookedFile(Interface):\n-    """Marker interface for file objects created on the fly for\n-    concatenated resources.\n-    """\n-\n-\n-class IResourceProvider(Interface):\n-    """A provider of resources.\n-\n-    Register a named adapter from the particular resource registry object\n-    to this interface to provide resources from locations other than the\n-    main persistent registry.\n-    """\n-\n-    def getResources(self):\n-        """Get a list of available Resource objects\n-        """\n-\n-\n-class IResourceRegistry(Interface):\n-    """A tool for registering and evaluating resource linkage."""\n-\n-    def registerResource(id, expression=\'\', enabled=1):\n-        """Register a resource."""\n-\n-    def getEvaluatedResources(context):\n-        """Get the evaluated resource links and inline styles appropriate\n-        to the context for rendering.\n-        """\n-\n-    def unregisterResource(id):\n-        """Unregister a registered resource."""\n-\n-    def getResource(id):\n-        """Get resource object by id.\n-\n-        If any property of the resource is changed, then cookResources of the\n-        registry must be called."""\n-\n-    def renameResource(old_id, new_id):\n-        """Change the id of a registered resource."""\n-\n-    def moveResource(id, position):\n-        """Move a registered resource to the given position."""\n-\n-    def getResourcePosition(id):\n-        """Get the position (order) of a resource given its id."""\n-\n-    def moveResourceUp(id, steps=1, REQUEST=None):\n-        """Move the resource up \'steps\' number of steps."""\n-\n-    def moveResourceDown(id, steps=1, REQUEST=None):\n-        """Move the resource down \'steps\' number of steps."""\n-\n-    def moveResourceToTop(id, REQUEST=None):\n-        """Move the resource to the first position."""\n-\n-    def moveResourceToBottom(id, REQUEST=None):\n-        """Move the resource to the last position."""\n-\n-    def moveResourceBefore(id, dest_id, REQUEST=None):\n-        """Move the resource before the resource with dest_id."""\n-\n-    def moveResourceAfter(id, dest_id, REQUEST=None):\n-        """Move the resource after the resource with dest_id."""\n-\n-    def getResourceIds():\n-        """Return the ids of all resources."""\n-\n-    def getResources():\n-        """Get the resource objects.\n-\n-        For use in management screens.\n-        """\n-\n-\n-class ICSSRegistry(Interface):\n-    """A tool for registering and evaluating stylesheet linkage."""\n-\n-    id = Attribute(\'id\',\n-                   """ The tool\'s ID.\n-\n-                   o Must be set to \'portal_css\'.\n-                   """)\n-\n-    def registerStylesheet(id, expression=\'\', media=\'screen\', rel=\'stylesheet\',\n-                           rendering=\'link\', enabled=1):\n-        """Register a stylesheet."""\n-\n-    def manage_addStylesheet(\n-            id,\n-            expression=\'\',\n-            media=\'screen\',\n-            rel=\'stylesheet\',\n-            rendering=\'link\',\n-            enabled=True,\n-            REQUEST=None):\n-        """Add stylesheet from a ZMI form."""\n-\n-    def manage_removeStylesheet(id, REQUEST=None):\n-        """Remove stylesheet from the ZMI."""\n-\n-    def manage_saveStylesheets(REQUEST=None):\n-        """Save stylesheet data from form submission."""\n-\n-\n-class IKSSRegistry(Interface):\n-    """A tool for registering and evaluating kineticstylesheet linkage."""\n-\n-    id = Attribute(\'id\',\n-                   """ The tool\'s ID.\n-\n-                   o Must be set to \'portal_kss\'.\n-                   """)\n-\n-    def registerKineticStylesheet(id, expression=\'\', enabled=1):\n-        """Register a kineticstylesheet."""\n-\n-    def manage_addKineticStylesheet(id, expression=\'\',\n-                                    enabled=True, REQUEST=None):\n-        """Add kineticstylesheet from a ZMI form."""\n-\n-    def manage_removeKineticStylesheet(id, REQUEST=None):\n-        """Remove kineticstylesheet from the ZMI."""\n-\n-    def manage_saveKineticStylesheets(REQUEST=None):\n-        """Save kineticstylesheet data from form submission."""\n-\n-\n-class IJSRegistry(Interface):\n-\n-    """A tool for registering and evaluating script linkage."""\n-\n-    id = Attribute(\'id\',\n-                   """ The tool\'s ID.\n-\n-                   o Must be set to \'portal_javascripts\'.\n-                   """)\n-\n-    def registerScript(id, expression=\'\', inline=False, enabled=True):\n-        """Register a script."""\n-\n-    def manage_saveScripts(REQUEST=None):\n-        """Save script data from form submission."""\n-\n-    def manage_addScript(\n-            id,\n-            expression=\'\',\n-            inline=False,\n-            enabled=True,\n-            REQUEST=None):\n-        """Add script from a ZMI form."""\n-\n-    def manage_removeScript(id, REQUEST=None):\n-        """Remove script via the ZMI."""\ndiff --git a/Products/CMFPlone/resources/viewlets/settings.py b/Products/CMFPlone/resources/viewlets/settings.py\ndeleted file mode 100644\nindex 6ebf27c30..000000000\n--- a/Products/CMFPlone/resources/viewlets/settings.py\n+++ /dev/null\n@@ -1,19 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from zope import schema\n-from zope.i18nmessageid import MessageFactory\n-from zope.interface import Interface\n-\n-\n-_ = MessageFactory(\'plone\')\n-\n-\n-class IResourceRegistriesSettings(Interface):\n-    """Settings stored in portal_registry\n-    """\n-\n-    resourceBundlesForThemes = schema.Dict(\n-        title=_(u"Resource bundles for themes"),\n-        description=_(u"Maps skin names to lists of resource bundle names"),\n-        key_type=schema.ASCIILine(),\n-        value_type=schema.List(value_type=schema.ASCIILine())\n-    )\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-10-05T11:59:18+02:00
Author: Katja S端ss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/Products.CMFPlone/commit/d316fa7ac0c067745ade198e578143cd8f718b7c

Merge branch 'master' into remove-legacy-resource-registries

Files changed:


b''

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-10-05T12:01:13+02:00
Author: Katja S端ss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/Products.CMFPlone/commit/a079cd83ca6e1a9a1a8c65046478f3c0f3191b49

bug fix test Role controlpanel usergroups

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py

b"diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\nindex 7154b872b..ee099614d 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\n@@ -297,7 +297,7 @@ def test_groups_modify_roles(self):\n         # Check that role is not selected yet and then select it and apply it.\n         form = self.browser.getForm(id='groups_search')\n         ctrl = form._form.get('group_group1:list', index=1)\n-        self.assertEqual(ctrl._value, 'Contributor')\n+        self.assertEqual(ctrl._value, 'Site Administrator')\n         self.assertFalse(ctrl.checked)\n         ctrl.checked = True\n         self.browser.getControl('Save').click()\n@@ -305,7 +305,7 @@ def test_groups_modify_roles(self):\n         # Check that role is now selected\n         form = self.browser.getForm(id='groups_search')\n         ctrl = form._form.get('group_group1:list', index=1)\n-        self.assertEqual(ctrl._value, 'Contributor')\n+        self.assertEqual(ctrl._value, 'Site Administrator')\n         self.assertTrue(ctrl.checked)\n \n     def test_groups_delete_group(self):\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-10-05T12:23:09+02:00
Author: Katja S端ss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/Products.CMFPlone/commit/0dad48cfed2ff8d67e2a9688e40f937d0339d50e

change log entry

Files changed:
M CHANGES.rst

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex a592b0367..cb66c7023 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -17,7 +17,7 @@ Breaking changes:\n \n - Removed getObjectsFromPathList.py skin script. #1801\n   [reinhardt]\n-  \n+\n - Removed redirectToReferrer.py skin script. #1801\n   [tlotze]\n \n@@ -30,6 +30,9 @@ Breaking changes:\n - Stop configuring 'View History' permission which was removed from Zope.\n   [davisagli]\n \n+- Remove legacy resource registries portal_css and portal_javascripts\n+  [ksuess]\n+\n New features:\n \n - Factored out human_readable_size method for replacing getObjSize.py. #1801\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-10-05T21:05:26+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/f2794b829c035074587081ecb31f83d61388b3bf

Merge branch 'master' into remove-legacy-resource-registries

Files changed:
M CHANGES.rst
M Products/CMFPlone/static/patterns/toolbar/src/css/toolbar.plone.less
M Products/CMFPlone/tests/test_utils.py
D Products/CMFPlone/skins/plone_scripts/getObjSize.py
D Products/CMFPlone/skins/plone_scripts/my_worklist.py
D Products/CMFPlone/tests/testGetObjectSize.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex cb66c7023..581872b8b 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -15,6 +15,9 @@ Breaking changes:\n   which is a backward compatibilit package only, or also update to not depend on it anymore.\n   [jensens]\n \n+- Removed my_worklist.py skin script. #1801\n+  [reinhardt]\n+  \n - Removed getObjectsFromPathList.py skin script. #1801\n   [reinhardt]\n \n@@ -35,7 +38,8 @@ Breaking changes:\n \n New features:\n \n-- Factored out human_readable_size method for replacing getObjSize.py. #1801\n+- Factored out human_readable_size method for replacing getObjSize.py;\n+  removed getObjSize.py. #1801\n   [reinhardt]\n \n - Update TinyMCE to 4.7.13\n@@ -61,7 +65,10 @@ New features:\n \n Bug fixes:\n \n-- Fix toolbar menu on mobile #2333.\n+-- Fix wrong CSS property to allow correct word-break.\n+  [tmassman]\n+\n+ Fix toolbar menu on mobile #2333.\n   [tmassman]\n \n - Removed the ``raiseUnauthorized`` skin script.\ndiff --git a/Products/CMFPlone/skins/plone_scripts/getObjSize.py b/Products/CMFPlone/skins/plone_scripts/getObjSize.py\ndeleted file mode 100644\nindex 7504970f0..000000000\n--- a/Products/CMFPlone/skins/plone_scripts/getObjSize.py\n+++ /dev/null\n@@ -1,52 +0,0 @@\n-## Script (Python) "getObjSize"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=obj=None, size=None\n-##title=\n-\n-from Products.CMFPlone.utils import base_hasattr\n-\n-if obj is None:\n-    obj = context\n-\n-const = {\'KB\': 1024,\n-         \'MB\': 1024 * 1024,\n-         \'GB\': 1024 * 1024 * 1024}\n-order = (\'GB\', \'MB\', \'KB\')\n-smaller = order[-1]\n-\n-# allow arbitrary sizes to be passed through,\n-# if there is no size, but there is an object\n-# look up the object, this maintains backwards\n-# compatibility\n-if size is None and base_hasattr(obj, \'get_size\'):\n-    size = obj.get_size()\n-\n-# if the size is a float, then make it an int\n-# happens for large files\n-try:\n-    size = int(size)\n-except (ValueError, TypeError):\n-    pass\n-\n-if not size:\n-    return \'0 %s\' % smaller\n-\n-try:\n-    integer_types = (int, long)\n-except NameError:\n-    # Python 3\n-    integer_types = (int, )\n-\n-if isinstance(size, integer_types):\n-    if size < const[smaller]:\n-        return \'1 %s\' % smaller\n-    for c in order:\n-        if size / const[c] > 0:\n-            break\n-    return \'%.1f %s\' % (float(size / float(const[c])), c)\n-\n-return size\ndiff --git a/Products/CMFPlone/skins/plone_scripts/my_worklist.py b/Products/CMFPlone/skins/plone_scripts/my_worklist.py\ndeleted file mode 100644\nindex 6d48de349..000000000\n--- a/Products/CMFPlone/skins/plone_scripts/my_worklist.py\n+++ /dev/null\n@@ -1,6 +0,0 @@\n-##parameters=\n-\n-if context.portal_membership.isAnonymousUser():\n-    return []\n-\n-return context.portal_workflow.getWorklistsResults()\ndiff --git a/Products/CMFPlone/static/patterns/toolbar/src/css/toolbar.plone.less b/Products/CMFPlone/static/patterns/toolbar/src/css/toolbar.plone.less\nindex 7975bc641..a938a4fe3 100644\n--- a/Products/CMFPlone/static/patterns/toolbar/src/css/toolbar.plone.less\n+++ b/Products/CMFPlone/static/patterns/toolbar/src/css/toolbar.plone.less\n@@ -12,9 +12,10 @@\n   left: 0;\n   width: @plone-left-toolbar;\n   height: 100%;\n-  hyphens: auto;\n   color: @plone-toolbar-text-color;\n   background: @plone-toolbar-bg;\n+  word-wrap: break-word;\n+  hyphens: auto;\n \n   a {\n     display: block;\n@@ -507,9 +508,8 @@\n \n   nav > ul a > span + span {\n     width: @plone-left-toolbar-expanded - 40px;\n+    max-width: @plone-left-toolbar-expanded - 40px;  // needed fixed size for word-wrap to work properly.\n     text-align: left;\n-    word-wrap: break-word;\n-    word-break: break-word;\n     background: none;\n   }\n \ndiff --git a/Products/CMFPlone/tests/testGetObjectSize.py b/Products/CMFPlone/tests/testGetObjectSize.py\ndeleted file mode 100644\nindex 579f08129..000000000\n--- a/Products/CMFPlone/tests/testGetObjectSize.py\n+++ /dev/null\n@@ -1,75 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from Products.CMFPlone.tests import PloneTestCase\n-from Products.CMFPlone.tests import dummy\n-\n-\n-class TestGetObjSize(PloneTestCase.PloneTestCase):\n-\n-    def testZeroInt(self):\n-        self.assertEqual(self.portal.getObjSize(None, 0), "0 KB")\n-\n-    def testBInt(self):\n-        self.assertEqual(self.portal.getObjSize(None, 234), "1 KB")\n-\n-    def testKBInt(self):\n-        self.assertEqual(self.portal.getObjSize(None, 5678), "5.5 KB")\n-\n-    def testMBInt(self):\n-        self.assertEqual(self.portal.getObjSize(None, 3307520), "3.2 MB")\n-\n-    def testGBInt(self):\n-        self.assertEqual(self.portal.getObjSize(None, 7564738298), "7.0 GB")\n-\n-    def testZeroFloat(self):\n-        self.assertEqual(self.portal.getObjSize(None, 0.0), "0 KB")\n-\n-    def testBFloat(self):\n-        self.assertEqual(self.portal.getObjSize(None, 234.5), "1 KB")\n-\n-    def testKBFloat(self):\n-        self.assertEqual(self.portal.getObjSize(None, 5678.5), "5.5 KB")\n-\n-    def testMBFloat(self):\n-        self.assertEqual(self.portal.getObjSize(None, 3307520.5), "3.2 MB")\n-\n-    def testGBFloat(self):\n-        self.assertEqual(self.portal.getObjSize(None, 7564738298.5), "7.0 GB")\n-\n-    def testNone(self):\n-        self.assertEqual(self.portal.getObjSize(None, None), "0 KB")\n-\n-    def testEmptyString(self):\n-        self.assertEqual(self.portal.getObjSize(None, \'\'), "0 KB")\n-\n-    def testNonIntString(self):\n-        self.assertEqual(self.portal.getObjSize(None, \'barney\'), \'barney\')\n-\n-\n-class TestGetObjSizedItem(PloneTestCase.PloneTestCase):\n-\n-    def afterSetUp(self):\n-        self.ob = dummy.SizedItem()\n-\n-    def testZero(self):\n-        self.ob.set_size(0)\n-        self.assertEqual(self.portal.getObjSize(self.ob), \'0 KB\')\n-\n-    def testBInt(self):\n-        self.ob.set_size(884)\n-        self.assertEqual(self.portal.getObjSize(self.ob), \'1 KB\')\n-\n-    def testKBInt(self):\n-        self.ob.set_size(1348)\n-        self.assertEqual(self.portal.getObjSize(self.ob), \'1.3 KB\')\n-\n-    def testMBInt(self):\n-        self.ob.set_size(1024 * 1024 + 1024 * 687)\n-        self.assertEqual(self.portal.getObjSize(self.ob), \'1.7 MB\')\n-\n-    def testGBInt(self):\n-        self.ob.set_size(1024 * 1024 * 1024 + 1024 * 1024 * 107)\n-        self.assertEqual(self.portal.getObjSize(self.ob), \'1.1 GB\')\n-\n-    def testGBFloat(self):\n-        self.ob.set_size(float(1024 * 1024 * 1024 + 1024 * 1024 * 107))\n-        self.assertEqual(self.portal.getObjSize(self.ob), \'1.1 GB\')\ndiff --git a/Products/CMFPlone/tests/test_utils.py b/Products/CMFPlone/tests/test_utils.py\nindex e258ab0c6..061081605 100644\n--- a/Products/CMFPlone/tests/test_utils.py\n+++ b/Products/CMFPlone/tests/test_utils.py\n@@ -147,7 +147,7 @@ def physicalPathFromURL(self, url):\n         ctx.vh_root = \'/approot/PloneSite/folder/SubSite\'\n         self.assertEqual(get_top_site_from_url(ctx, req).id, \'SubSite\')\n \n-    def test_human_readable_size(self):\n+    def test_human_readable_size_int(self):\n         from Products.CMFPlone.utils import human_readable_size\n \n         self.assertEqual(human_readable_size(0), \'0 KB\')\n@@ -165,6 +165,31 @@ def test_human_readable_size(self):\n         size *= 1024\n         self.assertEqual(human_readable_size(size), \'1536.0 GB\')\n \n+    def test_human_readable_size_float(self):\n+        from Products.CMFPlone.utils import human_readable_size\n+\n+        self.assertEqual(human_readable_size(0.), \'0 KB\')\n+        self.assertEqual(human_readable_size(1.), \'1 KB\')\n+        size = 1000.\n+        self.assertEqual(human_readable_size(size), \'1 KB\')\n+        size += 24.\n+        self.assertEqual(human_readable_size(size), \'1.0 KB\')\n+        size += 512.\n+        self.assertEqual(human_readable_size(size), \'1.5 KB\')\n+        size *= 1024.\n+        self.assertEqual(human_readable_size(size), \'1.5 MB\')\n+        size *= 1024.\n+        self.assertEqual(human_readable_size(size), \'1.5 GB\')\n+        size *= 1024.\n+        self.assertEqual(human_readable_size(size), \'1536.0 GB\')\n+\n+    def test_human_readable_size_special(self):\n+        from Products.CMFPlone.utils import human_readable_size\n+\n+        self.assertEqual(human_readable_size(None), \'0 KB\')\n+        self.assertEqual(human_readable_size(\'\'), \'0 KB\')\n+        self.assertEqual(human_readable_size(\'barney\'), \'barney\')\n+\n \n class LogoTests(PloneTestCase.PloneTestCase):\n \n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-10-23T11:16:53+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/20259d16067788addb417c420fa4bc0565431f6f

Merge branch 'master' into remove-legacy-resource-registries

Files changed:
A Products/CMFPlone/tests/test_nogopip.py
M CHANGES.rst
M Products/CMFPlone/ActionsTool.py
M Products/CMFPlone/CatalogTool.py
M Products/CMFPlone/DublinCore.py
M Products/CMFPlone/MigrationTool.py
M Products/CMFPlone/PasswordResetTool.py
M Products/CMFPlone/PloneBaseTool.py
M Products/CMFPlone/PloneControlPanel.py
M Products/CMFPlone/PloneFolder.py
M Products/CMFPlone/PloneTool.py
M Products/CMFPlone/Portal.py
M Products/CMFPlone/PropertiesTool.py
M Products/CMFPlone/RegistrationTool.py
M Products/CMFPlone/SkinsTool.py
M Products/CMFPlone/TranslationServiceTool.py
M Products/CMFPlone/TypesTool.py
M Products/CMFPlone/URLTool.py
M Products/CMFPlone/UnicodeSplitter/splitter.py
M Products/CMFPlone/WorkflowTool.py
M Products/CMFPlone/__init__.py
M Products/CMFPlone/browser/login/login_help.py
M Products/CMFPlone/browser/login/password_reset.py
M Products/CMFPlone/browser/search.py
M Products/CMFPlone/browser/syndication/adapters.py
M Products/CMFPlone/configure.zcml
M Products/CMFPlone/controlpanel/README.rst
M Products/CMFPlone/controlpanel/bbb/site.py
M Products/CMFPlone/controlpanel/browser/resourceregistry.py
M Products/CMFPlone/controlpanel/browser/usergroups_groupmembership.py
M Products/CMFPlone/controlpanel/browser/usergroups_usermembership.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_filter_adapter.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_mail_adapter.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_maintenance_adapter.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_markup_adapter.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_navigation_adapter.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_search_adapter.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_security_adapter.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_site_adapter.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_editing.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_filter.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_installer.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_mail.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_markup.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_navigation.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_search.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_security.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_site.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_syndication.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_types.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_events.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_usergroups.py
M Products/CMFPlone/controlpanel/tests/test_doctests.py
M Products/CMFPlone/exportimport/tests/testControlPanel.py
M Products/CMFPlone/exportimport/tests/testPropertiesTool.py
M Products/CMFPlone/factory.py
M Products/CMFPlone/interfaces/controlpanel.py
M Products/CMFPlone/patches/__init__.py
M Products/CMFPlone/patches/addzmiplonesite.py
M Products/CMFPlone/patches/unicodehacks.py
M Products/CMFPlone/patterns/tinymce.py
M Products/CMFPlone/resources/browser/combine.py
M Products/CMFPlone/resources/browser/cook.py
M Products/CMFPlone/resources/browser/resource.py
M Products/CMFPlone/resources/exportimport/bundles.py
M Products/CMFPlone/skins/plone_scripts/queryCatalog.py
M Products/CMFPlone/skins/plone_scripts/unique.py
M Products/CMFPlone/static/components/ace-builds/src/snippets/io.js
M Products/CMFPlone/testing.py
M Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt
M Products/CMFPlone/tests/LoginAndLogout.rst
M Products/CMFPlone/tests/PloneTestCase.py
M Products/CMFPlone/tests/base_tag_not_present.txt
M Products/CMFPlone/tests/browser.txt
M Products/CMFPlone/tests/browser_collection_views.txt
M Products/CMFPlone/tests/csrf.txt
M Products/CMFPlone/tests/dummy.py
M Products/CMFPlone/tests/emaillogin.rst
M Products/CMFPlone/tests/link_redirect_view.txt
M Products/CMFPlone/tests/mails.txt
M Products/CMFPlone/tests/pwreset_browser.rst
M Products/CMFPlone/tests/redirection.txt
M Products/CMFPlone/tests/robot/test_controlpanel_actions.robot
M Products/CMFPlone/tests/scripts.txt
M Products/CMFPlone/tests/search_form.rst
M Products/CMFPlone/tests/testActionsTool.py
M Products/CMFPlone/tests/testBatch.py
M Products/CMFPlone/tests/testBrowserAdmin.py
M Products/CMFPlone/tests/testBrowserDefault.py
M Products/CMFPlone/tests/testCSRFProtection.py
M Products/CMFPlone/tests/testCSSandJSRegistry.py
M Products/CMFPlone/tests/testCatalogTool.py
M Products/CMFPlone/tests/testCheckId.py
M Products/CMFPlone/tests/testContentPublishing.py
M Products/CMFPlone/tests/testContentSecurity.py
M Products/CMFPlone/tests/testContentTypeScripts.py
M Products/CMFPlone/tests/testControlPanel.py
M Products/CMFPlone/tests/testControlPanelScripts.py
M Products/CMFPlone/tests/testCookieAuth.py
M Products/CMFPlone/tests/testCutPasteSecurity.py
M Products/CMFPlone/tests/testDateTimeIntegration.py
M Products/CMFPlone/tests/testExternalEditorEnabled.py
M Products/CMFPlone/tests/testIImagingSchema.py
M Products/CMFPlone/tests/testInterfaces.py
M Products/CMFPlone/tests/testMigrationTool.py
M Products/CMFPlone/tests/testNavTree.py
M Products/CMFPlone/tests/testNavigationView.py
M Products/CMFPlone/tests/testNextPrevious.py
M Products/CMFPlone/tests/testPloneFolder.py
M Products/CMFPlone/tests/testPloneTestCase.py
M Products/CMFPlone/tests/testPloneTool.py
M Products/CMFPlone/tests/testPloneView.py
M Products/CMFPlone/tests/testPortalCreation.py
M Products/CMFPlone/tests/testQueryCatalog.py
M Products/CMFPlone/tests/testResourceRegistries.py
M Products/CMFPlone/tests/testRestrictedAcquisition.py
M Products/CMFPlone/tests/testSearch.py
M Products/CMFPlone/tests/testSecurity.py
M Products/CMFPlone/tests/testSecurityDeclarations.py
M Products/CMFPlone/tests/testSiteAdminRole.py
M Products/CMFPlone/tests/testSyndication.py
M Products/CMFPlone/tests/testUnicodeSplitter.py
M Products/CMFPlone/tests/testUserFolderBasics.py
M Products/CMFPlone/tests/testWebDAV.py
M Products/CMFPlone/tests/test_doctests.py
M Products/CMFPlone/tests/test_functional.py
M Products/CMFPlone/tests/test_login_help.py
M Products/CMFPlone/tests/test_login_logout.py
M Products/CMFPlone/tests/test_mails.py
M Products/CMFPlone/tests/test_metabundles.py
M Products/CMFPlone/tests/test_okay.py
M Products/CMFPlone/tests/test_passwordreset.py
M Products/CMFPlone/tests/test_patternsettings.py
M Products/CMFPlone/tests/test_redirect_after_login.py
M Products/CMFPlone/tests/test_safe_formatter.py
M Products/CMFPlone/tests/test_sitelogo.py
M Products/CMFPlone/tests/test_sitemap.py
M Products/CMFPlone/tests/test_utils.py
M Products/CMFPlone/tests/test_z3c_form_widgets.py
M Products/CMFPlone/utils.py
M setup.py
D Products/CMFPlone/skins/plone_scripts/check_id.py
D Products/CMFPlone/skins/plone_scripts/check_id.py.metadata
D Products/CMFPlone/skins/plone_scripts/isExpired.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 581872b8b..3ab206f5f 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -12,15 +12,22 @@ Breaking changes:\n \n - Remove all dependencies on plone.app.controlpanel.\n   Third party code need either to depend on plone.app.controlpanel 4.0,\n-  which is a backward compatibilit package only, or also update to not depend on it anymore.\n+  which is a backward compatibility package only, or also update to not depend on it anymore.\n   [jensens]\n \n+- Removed check_id.py skin script.  Replaced with utils.check_id function.\n+  #1801 and #2582.\n+  [maurits]\n+\n - Removed my_worklist.py skin script. #1801\n   [reinhardt]\n-  \n+\n - Removed getObjectsFromPathList.py skin script. #1801\n   [reinhardt]\n \n+- Removed isExpired.py skin script. #1801\n+  [reinhardt]\n+  \n - Removed redirectToReferrer.py skin script. #1801\n   [tlotze]\n \n@@ -65,6 +72,18 @@ New features:\n \n Bug fixes:\n \n+- remove plone.app.folder dependency\n+  [petschki]\n+  \n+- move GopipIndex Class to plone.folder\n+  [petschki]\n+\n+- Fixed getObjSize indexer for Python 3. #2526\n+  [reinhardt]\n+- Fix toolbar menu on mobile #2333.\n+- make groups_modify_roles test more robust.\n+  [tschorr]\n+\n -- Fix wrong CSS property to allow correct word-break.\n   [tmassman]\n \n@@ -279,3 +298,6 @@ Bug Fixes:\n \n - Remove depricated ``type`` attribute from ``script`` and ``link`` tags.\n   [newbazz]\n+\n+- Render tinymce attributes correctly in Python3.\n+  [sallner]\ndiff --git a/Products/CMFPlone/ActionsTool.py b/Products/CMFPlone/ActionsTool.py\nindex b33e7c210..140bd81b5 100644\n--- a/Products/CMFPlone/ActionsTool.py\n+++ b/Products/CMFPlone/ActionsTool.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from Products.CMFCore.ActionInformation import ActionInfo\n from Products.CMFCore.ActionsTool import ActionsTool as BaseTool\n from Products.CMFCore.interfaces import IActionProvider\ndiff --git a/Products/CMFPlone/CatalogTool.py b/Products/CMFPlone/CatalogTool.py\nindex 743d29aeb..20d8fb7f2 100644\n--- a/Products/CMFPlone/CatalogTool.py\n+++ b/Products/CMFPlone/CatalogTool.py\n@@ -6,7 +6,7 @@\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from BTrees.Length import Length\n from DateTime import DateTime\n@@ -72,9 +72,6 @@\n     \'OFS.interfaces.ITraversable\',\n     \'OFS.interfaces.IZopeObject\',\n     \'persistent.interfaces.IPersistent\',\n-    \'plone.app.folder.bbb.IArchivable\',\n-    \'plone.app.folder.bbb.IPhotoAlbumAble\',\n-    \'plone.app.folder.folder.IATUnifiedFolder\',\n     \'plone.app.imaging.interfaces.IBaseObject\',\n     \'plone.app.iterate.interfaces.IIterateAware\',\n     \'plone.app.kss.interfaces.IPortalObject\',\n@@ -200,7 +197,9 @@ def sortable_title(obj):\n                 start = sortabletitle[:(MAX_SORTABLE_TITLE - 13)]\n                 end = sortabletitle[-10:]\n                 sortabletitle = start + \'...\' + end\n-            return sortabletitle.encode(\'utf-8\')\n+            if six.PY2:\n+                return sortabletitle.encode(\'utf-8\')\n+            return sortabletitle\n     return \'\'\n \n \n@@ -392,7 +391,8 @@ def allow_inactive(self, query_kw):\n         objs = []\n         site = getSite()\n         for path in list(paths):\n-            path = path.encode(\'utf-8\')  # paths must not be unicode\n+            if six.PY2:\n+                path = path.encode(\'utf-8\')  # paths must not be unicode\n             try:\n                 site_path = \'/\'.join(site.getPhysicalPath())\n                 parts = path[len(site_path) + 1:].split(\'/\')\n@@ -467,27 +467,23 @@ def clearFindAndRebuild(self):\n         # Empties catalog, then finds all contentish objects (i.e. objects\n         # with an indexObject method), and reindexes them.\n         # This may take a long time.\n+        idxs = list(self.indexes())\n \n         def indexObject(obj, path):\n-            if (base_hasattr(obj, \'indexObject\') and\n-                    safe_callable(obj.indexObject)):\n+            if (base_hasattr(obj, \'reindexObject\') and\n+                    safe_callable(obj.reindexObject)):\n                 try:\n-                    obj.indexObject()\n-\n+                    self.reindexObject(obj, idxs=idxs)\n                     # index conversions from plone.app.discussion\n                     annotions = IAnnotations(obj)\n-                    catalog = getToolByName(obj, "portal_catalog")\n                     if DISCUSSION_ANNOTATION_KEY in annotions:\n                         conversation = annotions[DISCUSSION_ANNOTATION_KEY]\n                         conversation = conversation.__of__(obj)\n                         for comment in conversation.getComments():\n                             try:\n-                                if catalog:\n-                                    catalog.indexObject(comment)\n+                                self.indexObject(comment, idxs=idxs)\n                             except StopIteration:  # pragma: no cover\n                                 pass\n-\n-\n                 except TypeError:\n                     # Catalogs have \'indexObject\' as well, but they\n                     # take different args, and will fail\ndiff --git a/Products/CMFPlone/DublinCore.py b/Products/CMFPlone/DublinCore.py\nindex ed419a550..c22c51599 100644\n--- a/Products/CMFPlone/DublinCore.py\n+++ b/Products/CMFPlone/DublinCore.py\n@@ -16,7 +16,7 @@\n from AccessControl.SecurityInfo import ClassSecurityInfo\n from AccessControl.SecurityManagement import getSecurityManager\n from Acquisition import aq_base\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from DateTime.DateTime import DateTime\n from OFS.PropertyManager import PropertyManager\ndiff --git a/Products/CMFPlone/MigrationTool.py b/Products/CMFPlone/MigrationTool.py\nindex 7fa607623..8b4cf341e 100644\n--- a/Products/CMFPlone/MigrationTool.py\n+++ b/Products/CMFPlone/MigrationTool.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl.requestmethod import postonly\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.config import getConfiguration\n from OFS.SimpleItem import SimpleItem\n from Products.CMFCore.permissions import ManagePortal\ndiff --git a/Products/CMFPlone/PasswordResetTool.py b/Products/CMFPlone/PasswordResetTool.py\nindex d1c0267c8..d8c57eea2 100644\n--- a/Products/CMFPlone/PasswordResetTool.py\n+++ b/Products/CMFPlone/PasswordResetTool.py\n@@ -6,7 +6,7 @@\n """\n from AccessControl import ClassSecurityInfo\n from AccessControl import ModuleSecurityInfo\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from BTrees.OOBTree import OOBTree\n from OFS.SimpleItem import SimpleItem\n from plone.registry.interfaces import IRegistry\ndiff --git a/Products/CMFPlone/PloneBaseTool.py b/Products/CMFPlone/PloneBaseTool.py\nindex 63ca0f6bd..84b1823ef 100644\n--- a/Products/CMFPlone/PloneBaseTool.py\n+++ b/Products/CMFPlone/PloneBaseTool.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from AccessControl import ClassSecurityInfo\n from Products.CMFPlone.interfaces import IPloneBaseTool\n from Acquisition import aq_base\ndiff --git a/Products/CMFPlone/PloneControlPanel.py b/Products/CMFPlone/PloneControlPanel.py\nindex 23695612b..87131b9b9 100644\n--- a/Products/CMFPlone/PloneControlPanel.py\n+++ b/Products/CMFPlone/PloneControlPanel.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from OFS.Folder import Folder\n from OFS.PropertyManager import PropertyManager\ndiff --git a/Products/CMFPlone/PloneFolder.py b/Products/CMFPlone/PloneFolder.py\nindex 76fae9553..d1f97f764 100644\n--- a/Products/CMFPlone/PloneFolder.py\n+++ b/Products/CMFPlone/PloneFolder.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from plone.memoize import view\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from zExceptions import NotFound\n from Acquisition import aq_base\n from Acquisition import aq_inner\ndiff --git a/Products/CMFPlone/PloneTool.py b/Products/CMFPlone/PloneTool.py\nindex 341d0087c..bbe7db721 100644\n--- a/Products/CMFPlone/PloneTool.py\n+++ b/Products/CMFPlone/PloneTool.py\n@@ -6,7 +6,7 @@\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from ComputedAttribute import ComputedAttribute\n from DateTime import DateTime\n from email.utils import getaddresses\ndiff --git a/Products/CMFPlone/Portal.py b/Products/CMFPlone/Portal.py\nindex 974e02bfc..245cfbc0b 100644\n--- a/Products/CMFPlone/Portal.py\n+++ b/Products/CMFPlone/Portal.py\n@@ -3,7 +3,7 @@\n from AccessControl import Permissions\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from ComputedAttribute import ComputedAttribute\n from plone.i18n.locales.interfaces import IMetadataLanguageAvailability\n from Products.CMFCore import permissions\ndiff --git a/Products/CMFPlone/PropertiesTool.py b/Products/CMFPlone/PropertiesTool.py\nindex dc116421f..6412b6b85 100644\n--- a/Products/CMFPlone/PropertiesTool.py\n+++ b/Products/CMFPlone/PropertiesTool.py\n@@ -5,7 +5,7 @@\n \n from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n from OFS.Folder import Folder\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from App.special_dtml import DTMLFile\n from zope.interface import implementer\n \ndiff --git a/Products/CMFPlone/RegistrationTool.py b/Products/CMFPlone/RegistrationTool.py\nindex c0f3ac3b8..d2465d0e9 100644\n--- a/Products/CMFPlone/RegistrationTool.py\n+++ b/Products/CMFPlone/RegistrationTool.py\n@@ -1,11 +1,13 @@\n # -*- coding: utf-8 -*-\n-from AccessControl import ClassSecurityInfo, Unauthorized\n+from AccessControl import ClassSecurityInfo\n from AccessControl import getSecurityManager\n+from AccessControl import Unauthorized\n+from AccessControl.class_init import InitializeClass\n from AccessControl.requestmethod import postonly\n from AccessControl.SecurityManagement import newSecurityManager\n from AccessControl.SecurityManagement import setSecurityManager\n-from Acquisition import aq_base, aq_chain\n-from App.class_init import InitializeClass\n+from Acquisition import aq_base\n+from Acquisition import aq_chain\n from email import message_from_string\n from hashlib import md5\n from plone.registry.interfaces import IRegistry\n@@ -14,23 +16,25 @@\n from Products.CMFCore.RegistrationTool import RegistrationTool as BaseTool\n from Products.CMFCore.utils import _checkPermission\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.interfaces import ISecuritySchema\n from Products.CMFPlone.permissions import ManagePortal\n from Products.CMFPlone.PloneBaseTool import PloneBaseTool\n from Products.CMFPlone.PloneTool import EMAIL_RE\n-from Products.CMFPlone import PloneMessageFactory as _\n-from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService\n+from Products.PluggableAuthService.interfaces.authservice import IPluggableAuthService  # noqa: E501\n from Products.PluggableAuthService.interfaces.plugins import IValidationPlugin\n from Products.PluggableAuthService.permissions import SetOwnPassword\n-from smtplib import SMTPException, SMTPRecipientsRefused\n-from zope.component import getUtility\n+from smtplib import SMTPException\n+from smtplib import SMTPRecipientsRefused\n from zope.component import getMultiAdapter\n+from zope.component import getUtility\n from zope.schema import ValidationError\n \n import random\n import re\n import six\n \n+\n # - remove \'1\', \'l\', and \'I\' to avoid confusion\n # - remove \'0\', \'O\', and \'Q\' to avoid confusion\n # - remove vowels to avoid spelling words\n@@ -47,6 +51,7 @@ def getValidPasswordChars():\n         password_chars.append(chr(ord(\'0\') + i))\n     return password_chars\n \n+\n password_chars = getValidPasswordChars()\n \n \n@@ -108,7 +113,10 @@ def __init__(self):\n \n     def _md5base(self):\n         if self._v_md5base is None:\n-            self._v_md5base = md5(self.md5key)\n+            key = self.md5key\n+            if not isinstance(key, six.binary_type):\n+                key = key.encode()\n+            self._v_md5base = md5(key)\n         return self._v_md5base\n \n     def _getValidEmailAddress(self, member):\n@@ -141,6 +149,8 @@ def getPassword(self, length=5, s=None):\n                 password += password_chars[random.randint(0, nchars - 1)]\n             return password\n         else:\n+            if not isinstance(s, six.binary_type):\n+                s = s.encode()\n             m = self._md5base().copy()\n             m.update(s)\n             d = m.digest()  # compute md5(md5key + s)\n@@ -148,7 +158,10 @@ def getPassword(self, length=5, s=None):\n             password = \'\'\n             nchars = len(password_chars)\n             for i in range(0, length):\n-                password += password_chars[ord(d[i]) % nchars]\n+                if six.PY2:\n+                    password += password_chars[ord(d[i]) % nchars]\n+                else:\n+                    password += password_chars[d[i] % nchars]\n             return password\n \n     security.declarePublic(\'isValidEmail\')\n@@ -376,7 +389,7 @@ def mailPassword(self, login, REQUEST, immediate=False):\n             password=member.getPassword(), charset=encoding)\n         # The mail headers are not properly encoded we need to extract\n         # them and let MailHost manage the encoding.\n-        if isinstance(mail_text, six.text_type):\n+        if six.PY2 and isinstance(mail_text, six.text_type):\n             mail_text = mail_text.encode(encoding)\n         message_obj = message_from_string(mail_text.strip())\n         subject = message_obj[\'Subject\']\n@@ -431,7 +444,7 @@ def registeredNotify(self, new_member_id):\n \n         # The mail headers are not properly encoded we need to extract\n         # them and let MailHost manage the encoding.\n-        if isinstance(mail_text, six.text_type):\n+        if six.PY2 and isinstance(mail_text, six.text_type):\n             mail_text = mail_text.encode(encoding)\n         message_obj = message_from_string(mail_text.strip())\n         subject = message_obj[\'Subject\']\ndiff --git a/Products/CMFPlone/SkinsTool.py b/Products/CMFPlone/SkinsTool.py\nindex 6fd5f2010..b34927f70 100644\n--- a/Products/CMFPlone/SkinsTool.py\n+++ b/Products/CMFPlone/SkinsTool.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.SkinsTool import SkinsTool as BaseTool\n from Products.ResourceRegistries.tools.BaseRegistry import \\\ndiff --git a/Products/CMFPlone/TranslationServiceTool.py b/Products/CMFPlone/TranslationServiceTool.py\nindex 0493a0d57..986a8f0f3 100644\n--- a/Products/CMFPlone/TranslationServiceTool.py\n+++ b/Products/CMFPlone/TranslationServiceTool.py\n@@ -6,7 +6,7 @@\n \n from AccessControl import ClassSecurityInfo\n from Acquisition import aq_get\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from .i18nl10n import monthname_english\n from .i18nl10n import monthname_msgid\n from .i18nl10n import monthname_msgid_abbr\ndiff --git a/Products/CMFPlone/TypesTool.py b/Products/CMFPlone/TypesTool.py\nindex 963f5f58a..5b2aa5794 100644\n--- a/Products/CMFPlone/TypesTool.py\n+++ b/Products/CMFPlone/TypesTool.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n \n from Products.CMFCore.ActionInformation import ActionInfo\n from Products.CMFCore.interfaces import IAction\ndiff --git a/Products/CMFPlone/URLTool.py b/Products/CMFPlone/URLTool.py\nindex c7aa0c9b9..187c49d98 100644\n--- a/Products/CMFPlone/URLTool.py\n+++ b/Products/CMFPlone/URLTool.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from Acquisition import aq_parent, aq_inner\n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from plone.registry.interfaces import IRegistry\n from posixpath import normpath\n from Products.CMFCore.interfaces import ISiteRoot\ndiff --git a/Products/CMFPlone/UnicodeSplitter/splitter.py b/Products/CMFPlone/UnicodeSplitter/splitter.py\nindex 72f3ce898..46ed70ece 100644\n--- a/Products/CMFPlone/UnicodeSplitter/splitter.py\n+++ b/Products/CMFPlone/UnicodeSplitter/splitter.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n #!/usr/bin/env python\n # -*- coding: utf-8 -*-\n """\n@@ -6,19 +5,21 @@\n \n Created by Mikio Hokari, CMScom and Manabu Terada, CMScom on 2009-09-30.\n """\n-import unicodedata\n-\n-from zope.interface import implementer\n-\n+from plone.i18n.normalizer.base import baseNormalize\n+from Products.CMFPlone.UnicodeSplitter.config import pattern\n+from Products.CMFPlone.UnicodeSplitter.config import pattern_g\n+from Products.CMFPlone.UnicodeSplitter.config import rx_all\n+from Products.CMFPlone.UnicodeSplitter.config import rx_L\n+from Products.CMFPlone.UnicodeSplitter.config import rx_U\n+from Products.CMFPlone.UnicodeSplitter.config import rxGlob_L\n+from Products.CMFPlone.UnicodeSplitter.config import rxGlob_U\n from Products.ZCTextIndex.interfaces import ISplitter\n from Products.ZCTextIndex.PipelineFactory import element_factory\n-\n-from Products.CMFPlone.UnicodeSplitter.config import rx_U, rxGlob_U, \\\n-    rx_L, rxGlob_L, rx_all, pattern, pattern_g\n-from plone.i18n.normalizer.base import baseNormalize\n from six.moves import range\n+from zope.interface import implementer\n \n import six\n+import unicodedata\n \n \n def bigram(u, limit=1):\n@@ -151,9 +152,13 @@ def process_post_glob(self, lst):\n         """\n         return [process_str_post(s) for s in lst]\n \n+\n try:\n-    element_factory.registerFactory(\'Word Splitter\',\n-                                    \'Unicode Whitespace splitter\', Splitter)\n+    element_factory.registerFactory(\n+        \'Word Splitter\',\n+        \'Unicode Whitespace splitter\',\n+        Splitter,\n+    )\n except ValueError:\n     # In case the splitter is already registered, ValueError is raised\n     pass\n@@ -169,7 +174,7 @@ def process(self, lst):\n             # non-unicode text.\n             try:\n                 if not isinstance(s, six.text_type):\n-                    s = six.text_type(s, enc)\n+                    s = s.decode(enc)\n             except (UnicodeDecodeError, TypeError):\n                 result.append(s.lower())\n             else:\n@@ -177,9 +182,13 @@ def process(self, lst):\n \n         return result\n \n+\n try:\n-    element_factory.registerFactory(\'Case Normalizer\',\n-                                    \'Unicode Case Normalizer\', CaseNormalizer)\n+    element_factory.registerFactory(\n+        \'Case Normalizer\',\n+        \'Unicode Case Normalizer\',\n+        CaseNormalizer,\n+    )\n except ValueError:\n     # In case the normalizer is already registered, ValueError is raised\n     pass\n@@ -193,7 +202,7 @@ def process(self, lst):\n         for s in lst:\n             try:\n                 if not isinstance(s, six.text_type):\n-                    s = six.text_type(s, enc)\n+                    s = s.decode(enc)\n             except (UnicodeDecodeError, TypeError):\n                 pass\n \n@@ -207,9 +216,13 @@ def process(self, lst):\n \n         return result\n \n+\n try:\n-    element_factory.registerFactory(\'Case Normalizer\',\n-                                    \'Unicode Ignoring Accents Case Normalizer\', I18NNormalizer)\n+    element_factory.registerFactory(\n+        \'Case Normalizer\',\n+        \'Unicode Ignoring Accents Case Normalizer\',\n+        I18NNormalizer,\n+    )\n except ValueError:\n     # In case the normalizer is already registered, ValueError is raised\n     pass\ndiff --git a/Products/CMFPlone/WorkflowTool.py b/Products/CMFPlone/WorkflowTool.py\nindex a94ce4359..f777b58c6 100644\n--- a/Products/CMFPlone/WorkflowTool.py\n+++ b/Products/CMFPlone/WorkflowTool.py\n@@ -7,7 +7,7 @@\n from ZODB.POSException import ConflictError\n from Acquisition import aq_base\n \n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from AccessControl import getSecurityManager, ClassSecurityInfo\n from Products.CMFCore.permissions import ManagePortal\n from Products.DCWorkflow.Transitions import TRIGGER_USER_ACTION\n@@ -246,8 +246,7 @@ def getWorklistsResults(self):\n                                 objects_by_path[absurl] = (o.modified(), o)\n \n         results = objects_by_path.values()\n-        results.sort()\n-        return tuple([obj[1] for obj in results])\n+        return tuple([obj[1] for obj in sorted(results)])\n \n     security.declareProtected(ManagePortal, \'getChainForPortalType\')\n \ndiff --git a/Products/CMFPlone/__init__.py b/Products/CMFPlone/__init__.py\nindex d200ff111..da9bd44fc 100644\n--- a/Products/CMFPlone/__init__.py\n+++ b/Products/CMFPlone/__init__.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from App.ImageFile import ImageFile\n import os\n+import six\n import sys\n import pkg_resources\n \n@@ -69,8 +70,9 @@ def initialize(context):\n     this_module.Batch = Batch\n \n     ModuleSecurityInfo(\'StringIO\').declarePublic(\'StringIO\')\n-    from six import StringIO\n-    allow_class(StringIO)\n+    if six.PY2:\n+        from six import StringIO\n+        allow_class(StringIO)\n \n     # Make Unauthorized importable TTW\n     ModuleSecurityInfo(\'AccessControl\').declarePublic(\'Unauthorized\')\n@@ -191,7 +193,7 @@ def initialize(context):\n         constructors=(zmi_constructor, ),\n     )\n \n-    from plone.app.folder import nogopip\n+    from plone.folder import nogopip\n     context.registerClass(\n         nogopip.GopipIndex,\n         permission=\'Add Pluggable Index\',\ndiff --git a/Products/CMFPlone/browser/login/login_help.py b/Products/CMFPlone/browser/login/login_help.py\nindex f2b561760..ddbb40484 100644\n--- a/Products/CMFPlone/browser/login/login_help.py\n+++ b/Products/CMFPlone/browser/login/login_help.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from email import message_from_string\n-from email.Header import Header\n+from email.header import Header\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n@@ -22,6 +22,7 @@\n from zope.interface import implementer\n \n import logging\n+import six\n \n \n SEND_USERNAME_TEMPLATE = _(u"mailtemplate_username_info", default=u"""From: {encoded_mail_sender}\n@@ -155,7 +156,7 @@ def send_username(self, portal, userinfo):\n         )\n         # The mail headers are not properly encoded we need to extract\n         # them and let MailHost manage the encoding.\n-        if isinstance(mail_text, unicode):\n+        if six.PY2 and isinstance(mail_text, six.text_type):\n             mail_text = mail_text.encode(encoding)\n         message_obj = message_from_string(mail_text.strip())\n         subject = message_obj[\'Subject\']\ndiff --git a/Products/CMFPlone/browser/login/password_reset.py b/Products/CMFPlone/browser/login/password_reset.py\nindex 2cfc7d1ec..3567823e1 100644\n--- a/Products/CMFPlone/browser/login/password_reset.py\n+++ b/Products/CMFPlone/browser/login/password_reset.py\n@@ -39,7 +39,7 @@ def encoded_mail_sender(self):\n         mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n         from_ = mail_settings.email_from_name\n         mail = mail_settings.email_from_address\n-        return \'"%s" <%s>\' % (self.encode_mail_header(from_), mail)\n+        return \'"%s" <%s>\' % (self.encode_mail_header(from_).encode(), mail)\n \n     def registered_notify_subject(self):\n         portal_name = self.portal_state().portal_title()\ndiff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py\nindex 6e006d075..fa6e582ca 100644\n--- a/Products/CMFPlone/browser/search.py\n+++ b/Products/CMFPlone/browser/search.py\n@@ -21,7 +21,9 @@\n \n # We should accept both a simple space, unicode u\'\\u0020 but also a\n # multi-space, so called \'waji-kankaku\', unicode u\'\\u3000\'\n-MULTISPACE = u\'\\u3000\'.encode(\'utf-8\')\n+MULTISPACE = u\'\\u3000\'\n+if six.PY2:\n+    MULTISPACE = u\'\\u3000\'.encode(\'utf-8\')\n BAD_CHARS = (\'?\', \'-\', \'+\', \'*\', MULTISPACE)\n EVER = DateTime(\'1970-01-03\')\n \ndiff --git a/Products/CMFPlone/browser/syndication/adapters.py b/Products/CMFPlone/browser/syndication/adapters.py\nindex c2024ee41..3fe7a09aa 100644\n--- a/Products/CMFPlone/browser/syndication/adapters.py\n+++ b/Products/CMFPlone/browser/syndication/adapters.py\n@@ -304,9 +304,9 @@ def __init__(self, context, feed):\n             try:\n                 primary = IPrimaryFieldInfo(self.context, None)\n                 if (INamedField.providedBy(primary.field)\n-                        and hasattr(primary.field, \'getSize\')\n-                        and primary.field.getSize() > 0):\n-                    self.file = primary.field\n+                        and hasattr(primary.value, \'getSize\')\n+                        and primary.value.getSize() > 0):\n+                    self.file = primary.value\n                     self.field_name = primary.fieldname\n             except TypeError:\n                 pass\ndiff --git a/Products/CMFPlone/configure.zcml b/Products/CMFPlone/configure.zcml\nindex 0cdd0666a..97b3b3484 100644\n--- a/Products/CMFPlone/configure.zcml\n+++ b/Products/CMFPlone/configure.zcml\n@@ -14,7 +14,6 @@\n   <include package="plone.app.contenttypes" />\n   <include package="plone.app.customerize" />\n   <include package="plone.app.discussion" />\n-  <include package="plone.app.folder" />\n   <include package="plone.app.i18n" />\n   <include package="plone.app.layout" />\n   <include package="plone.app.linkintegrity" />\ndiff --git a/Products/CMFPlone/controlpanel/README.rst b/Products/CMFPlone/controlpanel/README.rst\nindex 822167665..d00fd7da4 100644\n--- a/Products/CMFPlone/controlpanel/README.rst\n+++ b/Products/CMFPlone/controlpanel/README.rst\n@@ -41,8 +41,8 @@ Editing Control Panel\n   >>> from Products.CMFPlone.interfaces import IEditingSchema\n   >>> editing_settings = registry.forInterface(IEditingSchema, prefix=\'plone\')\n \n-  >>> editing_settings.default_editor\n-  u\'TinyMCE\'\n+  >>> editing_settings.default_editor == u\'TinyMCE\'\n+  True\n \n   >>> editing_settings.ext_editor\n   False\n@@ -154,8 +154,8 @@ Site Control Panel\n   >>> from Products.CMFPlone.interfaces import ISiteSchema\n   >>> site_settings = registry.forInterface(ISiteSchema, prefix=\'plone\')\n \n-  >>> site_settings.site_title\n-  u\'Plone site\'\n+  >>> site_settings.site_title == u\'Plone site\'\n+  True\n \n   >>> site_settings.exposeDCMetaTags\n   False\n@@ -163,8 +163,8 @@ Site Control Panel\n   >>> site_settings.enable_sitemap\n   False\n \n-  >>> site_settings.webstats_js\n-  u\'\'\n+  >>> site_settings.webstats_js == u\'\'\n+  True\n \n \n Overview Control Panel\n@@ -182,11 +182,12 @@ Markup Control Panel\n   >>> from Products.CMFPlone.interfaces import IMarkupSchema\n   >>> markup_settings = registry.forInterface(IMarkupSchema, prefix=\'plone\')\n \n-  >>> markup_settings.default_type\n-  u\'text/html\'\n+  >>> markup_settings.default_type == u\'text/html\'\n+  True\n+\n \n-  >>> markup_settings.allowed_types\n-  (\'text/html\', \'text/x-web-textile\')\n+  >>> markup_settings.allowed_types == (u\'text/html\', u\'text/x-web-textile\')\n+  True\n \n \n User and Groups Control Panel\ndiff --git a/Products/CMFPlone/controlpanel/bbb/site.py b/Products/CMFPlone/controlpanel/bbb/site.py\nindex 56fcbc532..dbb1770e6 100644\n--- a/Products/CMFPlone/controlpanel/bbb/site.py\n+++ b/Products/CMFPlone/controlpanel/bbb/site.py\n@@ -7,6 +7,8 @@\n from zope.component import getUtility\n from zope.interface import implementer\n \n+import six\n+\n \n @implementer(ISiteSchema)\n class SiteControlPanelAdapter(object):\n@@ -21,7 +23,7 @@ def get_site_title(self):\n         return self.settings.site_title\n \n     def set_site_title(self, value):\n-        if isinstance(value, str):\n+        if six.PY2 and isinstance(value, six.binary_type):\n             value = value.decode(\'utf-8\')\n         self.settings.site_title = value\n \n@@ -29,7 +31,7 @@ def get_webstats_js(self):\n         return self.settings.webstats_js\n \n     def set_webstats_js(self, value):\n-        if isinstance(value, str):\n+        if six.PY2 and isinstance(value, six.binary_type):\n             value = value.decode(\'utf-8\')\n         self.settings.webstats_js = value\n \ndiff --git a/Products/CMFPlone/controlpanel/browser/resourceregistry.py b/Products/CMFPlone/controlpanel/browser/resourceregistry.py\nindex e24e6a830..9d502889c 100644\n--- a/Products/CMFPlone/controlpanel/browser/resourceregistry.py\n+++ b/Products/CMFPlone/controlpanel/browser/resourceregistry.py\n@@ -48,12 +48,12 @@ def updateRecordFromDict(record, data):\n         if name in data:\n             # almost all string data needs to be str, not unicode\n             val = data[name]\n-            if isinstance(val, six.text_type):\n+            if six.PY2 and isinstance(val, six.text_type):\n                 val = val.encode(\'utf-8\')\n             if isinstance(val, list):\n                 newval = []\n                 for item in val:\n-                    if isinstance(item, six.text_type):\n+                    if six.PY2 and isinstance(item, six.text_type):\n                         item = item.encode(\'utf-8\')\n                     newval.append(item)\n                 val = newval\n@@ -359,8 +359,10 @@ def save_less_build(self):\n     def save_less_variables(self):\n         data = {}\n         for key, val in json.loads(self.request.form.get(\'data\')).items():\n-            # need to convert to str: unicode\n-            data[key.encode(\'utf8\')] = val\n+            if six.PY2 and isinstance(key, six.text_type):\n+                # need to convert to str: unicode\n+                key = key.encode(\'utf8\')\n+            data[key] = val\n         self.registry[\'plone.lessvariables\'] = data\n         return json.dumps({\n             \'success\': True\n@@ -369,8 +371,10 @@ def save_less_variables(self):\n     def save_pattern_options(self):\n         data = {}\n         for key, val in json.loads(self.request.form.get(\'data\')).items():\n-            # need to convert to str: unicode\n-            data[key.encode(\'utf8\')] = val\n+            if six.PY2 and isinstance(key, six.text_type):\n+                # need to convert to str: unicode\n+                key = key.encode(\'utf8\')\n+            data[key] = val\n         self.registry[\'plone.patternoptions\'] = data\n         return json.dumps({\n             \'success\': True\ndiff --git a/Products/CMFPlone/controlpanel/browser/usergroups_groupmembership.py b/Products/CMFPlone/controlpanel/browser/usergroups_groupmembership.py\nindex 33578d5a2..d41793362 100644\n--- a/Products/CMFPlone/controlpanel/browser/usergroups_groupmembership.py\n+++ b/Products/CMFPlone/controlpanel/browser/usergroups_groupmembership.py\n@@ -92,7 +92,7 @@ def getMembers(self):\n             \'fullname\') is not None and normalizeString(x.getProperty(\'fullname\')) or \'\')\n \n         mergedResults = groupResults + userResults\n-        return filter(None, mergedResults)\n+        return [i for i in mergedResults if i]\n \n     def getPotentialMembers(self, searchString):\n         ignoredUsersGroups = [\ndiff --git a/Products/CMFPlone/controlpanel/browser/usergroups_usermembership.py b/Products/CMFPlone/controlpanel/browser/usergroups_usermembership.py\nindex d0818d7a9..8424b41e5 100644\n--- a/Products/CMFPlone/controlpanel/browser/usergroups_usermembership.py\n+++ b/Products/CMFPlone/controlpanel/browser/usergroups_usermembership.py\n@@ -62,7 +62,7 @@ def getGroups(self):\n             m) for m in self.gtool.getGroupsForPrincipal(self.member)]\n         groupResults.sort(key=lambda x: x is not None and normalizeString(\n             x.getGroupTitleOrName()))\n-        return filter(None, groupResults)\n+        return [i for i in groupResults if i]\n \n     def getPotentialGroups(self, searchString):\n         ignoredGroups = [x.id for x in self.getGroups() if x is not None]\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_filter_adapter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_filter_adapter.py\nindex 523d1271c..065239c7c 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_filter_adapter.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_filter_adapter.py\n@@ -25,35 +25,35 @@ def test_adapter_lookup(self):\n \n     def test_get_nasty_tags(self):\n         self.settings.nasty_tags = [u\'foo\', u\'bar\']\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, IFilterSchema).nasty_tags,\n             [u\'foo\', u\'bar\']\n         )\n \n     def test_set_nasty_tags(self):\n         getAdapter(self.portal, IFilterSchema).nasty_tags = [u\'foo\', u\'bar\']\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.nasty_tags,\n             [u\'foo\', u\'bar\']\n         )\n \n     def test_get_valid_tags(self):\n         self.settings.valid_tags = [u\'foo\', u\'bar\']\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, IFilterSchema).valid_tags,\n             [u\'foo\', u\'bar\']\n         )\n \n     def test_set_valid_tags(self):\n         getAdapter(self.portal, IFilterSchema).valid_tags = [u\'foo\', u\'bar\']\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.valid_tags,\n             [u\'foo\', u\'bar\']\n         )\n \n     def test_get_custom_attributes(self):\n         self.settings.custom_attributes = [u\'foo\', u\'bar\']\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, IFilterSchema).custom_attributes,\n             [u\'foo\', u\'bar\']\n         )\n@@ -62,7 +62,7 @@ def test_set_custom_attributes(self):\n         getAdapter(self.portal, IFilterSchema).custom_attributes = [\n             u\'foo\', u\'bar\'\n         ]\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.custom_attributes,\n             [u\'foo\', u\'bar\']\n         )\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py\nindex 216d76ab3..dba3de5e3 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_language_adapter.py\n@@ -32,18 +32,18 @@ def test_get_default_language(self):\n             \'en\'\n         )\n         self.settings.default_language = \'de\'\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, ILanguageSchema).default_language,\n             \'de\'\n         )\n \n     def test_set_default_language(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.default_language,\n             \'en\'\n         )\n         getAdapter(self.portal, ILanguageSchema).default_language = \'de\'\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.default_language,\n             \'de\'\n         )\n@@ -54,19 +54,19 @@ def test_get_available_languages(self):\n             [\'en\']\n         )\n         self.settings.available_languages = [\'en\', \'de\']\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, ILanguageSchema).available_languages,\n             [\'en\', \'de\']\n         )\n \n     def test_set_available_languages(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.available_languages,\n             [\'en\']\n         )\n         getAdapter(self.portal, ILanguageSchema).available_languages = [\n             \'de\', \'en\']\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.available_languages,\n             [\'de\', \'en\']\n         )\n@@ -78,20 +78,20 @@ def test_get_use_combined_language_codes(self):\n             True\n         )\n         self.settings.use_combined_language_codes = False\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(\n                 self.portal, ILanguageSchema).use_combined_language_codes,\n             False\n         )\n \n     def test_set_use_combined_language_codes(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.use_combined_language_codes,\n             True\n         )\n         getAdapter(\n             self.portal, ILanguageSchema).use_combined_language_codes = False\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.use_combined_language_codes,\n             False\n         )\n@@ -103,19 +103,19 @@ def test_get_display_flags(self):\n             False\n         )\n         self.settings.display_flags = True\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, ILanguageSchema).display_flags,\n             True\n         )\n \n     def test_set_display_flags(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.display_flags,\n             False\n         )\n         getAdapter(\n             self.portal, ILanguageSchema).display_flags = True\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.display_flags,\n             True\n         )\n@@ -127,19 +127,19 @@ def test_get_use_content_negotiation(self):\n             False\n         )\n         self.settings.use_content_negotiation = True\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, ILanguageSchema).use_content_negotiation,\n             True\n         )\n \n     def test_set_use_content_negotiation(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.use_content_negotiation,\n             False\n         )\n         getAdapter(\n             self.portal, ILanguageSchema).use_content_negotiation = True\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.use_content_negotiation,\n             True\n         )\n@@ -151,19 +151,19 @@ def test_get_use_path_negotiation(self):\n             False\n         )\n         self.settings.use_path_negotiation = True\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, ILanguageSchema).use_path_negotiation,\n             True\n         )\n \n     def test_set_use_path_negotiation(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.use_path_negotiation,\n             False\n         )\n         getAdapter(\n             self.portal, ILanguageSchema).use_path_negotiation = True\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.use_path_negotiation,\n             True\n         )\n@@ -175,19 +175,19 @@ def test_get_use_cookie_negotiation(self):\n             False\n         )\n         self.settings.use_cookie_negotiation = True\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, ILanguageSchema).use_cookie_negotiation,\n             True\n         )\n \n     def test_set_use_cookie_negotiation(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.use_cookie_negotiation,\n             False\n         )\n         getAdapter(\n             self.portal, ILanguageSchema).use_cookie_negotiation = True\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.use_cookie_negotiation,\n             True\n         )\n@@ -199,19 +199,19 @@ def test_get_authenticated_users_only(self):\n             False\n         )\n         self.settings.authenticated_users_only = True\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, ILanguageSchema).authenticated_users_only,\n             True\n         )\n \n     def test_set_authenticated_users_only(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.authenticated_users_only,\n             False\n         )\n         getAdapter(\n             self.portal, ILanguageSchema).authenticated_users_only = True\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.authenticated_users_only,\n             True\n         )\n@@ -223,19 +223,19 @@ def test_get_set_cookie_always(self):\n             False\n         )\n         self.settings.set_cookie_always = True\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, ILanguageSchema).set_cookie_always,\n             True\n         )\n \n     def test_set_set_cookie_always(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.set_cookie_always,\n             False\n         )\n         getAdapter(\n             self.portal, ILanguageSchema).set_cookie_always = True\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.set_cookie_always,\n             True\n         )\n@@ -247,19 +247,19 @@ def test_get_use_subdomain_negotiation(self):\n             False\n         )\n         self.settings.use_subdomain_negotiation = True\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, ILanguageSchema).use_subdomain_negotiation,\n             True\n         )\n \n     def test_set_use_subdomain_negotiation(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.use_subdomain_negotiation,\n             False\n         )\n         getAdapter(\n             self.portal, ILanguageSchema).use_subdomain_negotiation = True\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.use_subdomain_negotiation,\n             True\n         )\n@@ -271,19 +271,19 @@ def test_get_use_cctld_negotiation(self):\n             False\n         )\n         self.settings.use_cctld_negotiation = True\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, ILanguageSchema).use_cctld_negotiation,\n             True\n         )\n \n     def test_set_use_cctld_negotiation(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.use_cctld_negotiation,\n             False\n         )\n         getAdapter(\n             self.portal, ILanguageSchema).use_cctld_negotiation = True\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.use_cctld_negotiation,\n             True\n         )\n@@ -295,19 +295,19 @@ def test_get_use_request_negotiation(self):\n             False\n         )\n         self.settings.use_request_negotiation = True\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, ILanguageSchema).use_request_negotiation,\n             True\n         )\n \n     def test_set_use_request_negotiation(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.use_request_negotiation,\n             False\n         )\n         getAdapter(\n             self.portal, ILanguageSchema).use_request_negotiation = True\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.use_request_negotiation,\n             True\n         )\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_mail_adapter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_mail_adapter.py\nindex ed79a8c10..b7ed5249a 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_mail_adapter.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_mail_adapter.py\n@@ -31,18 +31,18 @@ def test_get_smtp_host(self):\n             u\'localhost\'\n         )\n         self.mail_settings.smtp_host = u\'example.com\'\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, IMailSchema).smtp_host,\n             u\'example.com\'\n         )\n \n     def test_set_smtp_host(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.mail_settings.smtp_host,\n             u\'localhost\'\n         )\n         getAdapter(self.portal, IMailSchema).smtp_host = u\'example.com\'\n-        self.assertEquals(\n+        self.assertEqual(\n             self.mail_settings.smtp_host,\n             u\'example.com\'\n         )\n@@ -53,18 +53,18 @@ def test_get_smtp_port(self):\n             25\n         )\n         self.mail_settings.smtp_port = 88\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, IMailSchema).smtp_port,\n             88\n         )\n \n     def test_set_smtp_port(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.mail_settings.smtp_port,\n             25\n         )\n         getAdapter(self.portal, IMailSchema).smtp_port = 88\n-        self.assertEquals(\n+        self.assertEqual(\n             self.mail_settings.smtp_port,\n             88\n         )\n@@ -75,18 +75,18 @@ def test_get_smtp_userid(self):\n             None\n         )\n         self.mail_settings.smtp_userid = u\'john@example.com\'\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, IMailSchema).smtp_userid,\n             u\'john@example.com\'\n         )\n \n     def test_set_smtp_userid(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.mail_settings.smtp_userid,\n             None\n         )\n         getAdapter(self.portal, IMailSchema).smtp_userid = u\'john@example.com\'\n-        self.assertEquals(\n+        self.assertEqual(\n             self.mail_settings.smtp_userid,\n             u\'john@example.com\'\n         )\n@@ -97,18 +97,18 @@ def test_get_smtp_pass(self):\n             None\n         )\n         self.mail_settings.smtp_pass = u\'secret\'\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, IMailSchema).smtp_pass,\n             u\'secret\'\n         )\n \n     def test_set_smtp_pass(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.mail_settings.smtp_pass,\n             None\n         )\n         getAdapter(self.portal, IMailSchema).smtp_pass = u\'secret\'\n-        self.assertEquals(\n+        self.assertEqual(\n             self.mail_settings.smtp_pass,\n             u\'secret\'\n         )\n@@ -119,18 +119,18 @@ def test_get_email_from_name(self):\n             None\n         )\n         self.mail_settings.email_from_name = u\'John\'\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, IMailSchema).email_from_name,\n             u\'John\'\n         )\n \n     def test_set_email_from_name(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.mail_settings.email_from_name,\n             None\n         )\n         getAdapter(self.portal, IMailSchema).email_from_name = u\'John\'\n-        self.assertEquals(\n+        self.assertEqual(\n             self.mail_settings.email_from_name,\n             u\'John\'\n         )\n@@ -141,19 +141,19 @@ def test_get_email_from_address(self):\n             None\n         )\n         self.mail_settings.email_from_address = \'john@example.com\'\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, IMailSchema).email_from_address,\n             \'john@example.com\'\n         )\n \n     def test_set_email_from_address(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.mail_settings.email_from_address,\n             None\n         )\n         getAdapter(self.portal, IMailSchema).email_from_address = \\\n             \'john@example.com\'\n-        self.assertEquals(\n+        self.assertEqual(\n             self.mail_settings.email_from_address,\n             \'john@example.com\'\n         )\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_maintenance_adapter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_maintenance_adapter.py\nindex 9d1c3b48d..aeeced792 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_maintenance_adapter.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_maintenance_adapter.py\n@@ -32,18 +32,18 @@ def test_get_days(self):\n             7\n         )\n         self.maintenance_settings.days = 4\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, IMaintenanceSchema).days,\n             4\n         )\n \n     def test_set_days(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.maintenance_settings.days,\n             7\n         )\n         getAdapter(self.portal, IMaintenanceSchema).days = 4\n-        self.assertEquals(\n+        self.assertEqual(\n             self.maintenance_settings.days,\n             4\n         )\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_markup_adapter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_markup_adapter.py\nindex 0ff5dd790..11c26953c 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_markup_adapter.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_markup_adapter.py\n@@ -24,21 +24,21 @@ def test_adapter_lookup(self):\n \n     def test_get_default_type(self):\n         self.settings.default_type = \'text/plain\'\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, IMarkupSchema).default_type,\n             \'text/plain\'\n         )\n \n     def test_set_default_type(self):\n         getAdapter(self.portal, IMarkupSchema).default_type = \'text/plain\'  # noqa\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.default_type,\n             \'text/plain\'\n         )\n \n     def test_get_allowed_types(self):\n         self.settings.allowed_types = (\'text/plain\', \'text/x-web-textile\')\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, IMarkupSchema).allowed_types,\n             (\'text/plain\', \'text/x-web-textile\')\n         )\n@@ -46,7 +46,7 @@ def test_get_allowed_types(self):\n     def test_set_allowed_types(self):\n         getAdapter(self.portal, IMarkupSchema).allowed_types =\\\n             (\'text/plain\', \'text/x-web-textile\')\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.allowed_types,\n             (\'text/plain\', \'text/x-web-textile\')\n         )\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_navigation_adapter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_navigation_adapter.py\nindex cc5dcf698..f75651acd 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_navigation_adapter.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_navigation_adapter.py\n@@ -29,18 +29,18 @@ def test_get_generate_tabs(self):\n             True\n         )\n         self.navigation_settings.generate_tabs = False\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, INavigationSchema).generate_tabs,\n             False\n         )\n \n     def test_set_generate_tabs(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.navigation_settings.generate_tabs,\n             True\n         )\n         getAdapter(self.portal, INavigationSchema).generate_tabs = False\n-        self.assertEquals(\n+        self.assertEqual(\n             self.navigation_settings.generate_tabs,\n             False\n         )\n@@ -51,18 +51,18 @@ def test_get_nonfolderish_tabs(self):\n             True\n         )\n         self.navigation_settings.nonfolderish_tabs = False\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, INavigationSchema).nonfolderish_tabs,\n             False\n         )\n \n     def test_set_nonfolderish_tabs(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.navigation_settings.nonfolderish_tabs,\n             True\n         )\n         getAdapter(self.portal, INavigationSchema).nonfolderish_tabs = False\n-        self.assertEquals(\n+        self.assertEqual(\n             self.navigation_settings.nonfolderish_tabs,\n             False\n         )\n@@ -90,7 +90,7 @@ def test_get_filter_on_workflow(self):\n             False\n         )\n         self.navigation_settings.filter_on_workflow = True\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, INavigationSchema).filter_on_workflow,\n             True\n         )\n@@ -113,7 +113,7 @@ def test_get_workflow_states_to_show(self):\n         )\n \n         self.navigation_settings.workflow_states_to_show = (\'private\',)\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, INavigationSchema).workflow_states_to_show,\n             (\'private\',)\n         )\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_search_adapter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_search_adapter.py\nindex fc72fa662..b88a3d2b8 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_search_adapter.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_search_adapter.py\n@@ -29,18 +29,18 @@ def test_get_enable_livesearch(self):\n             True\n         )\n         self.search_settings.enable_livesearch = False\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, ISearchSchema).enable_livesearch,\n             False\n         )\n \n     def test_set_enable_livesearch(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.search_settings.enable_livesearch,\n             True\n         )\n         getAdapter(self.portal, ISearchSchema).enable_livesearch = False\n-        self.assertEquals(\n+        self.assertEqual(\n             self.search_settings.enable_livesearch,\n             False\n         )\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_security_adapter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_security_adapter.py\nindex 3cd96c648..5146caf15 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_security_adapter.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_security_adapter.py\n@@ -23,109 +23,109 @@ def test_adapter_lookup(self):\n         self.assertTrue(getAdapter(self.portal, ISecuritySchema))\n \n     def test_get_enable_self_reg_setting(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.security_settings.enable_self_reg,\n             False\n         )\n \n     def test_set_enable_self_reg_setting(self):\n         self.security_settings.enable_self_reg = False\n-        self.assertEquals(\n+        self.assertEqual(\n             self.security_settings.enable_self_reg,\n             False\n         )\n         self.security_settings.enable_self_reg = True\n-        self.assertEquals(\n+        self.assertEqual(\n             self.security_settings.enable_self_reg,\n             True\n         )\n \n     def test_get_enable_user_pwd_choice_setting(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.security_settings.enable_user_pwd_choice,\n             False\n         )\n \n     def test_set_enable_user_pwd_choice_setting(self):\n         self.security_settings.enable_user_pwd_choice = False\n-        self.assertEquals(\n+        self.assertEqual(\n             self.security_settings.enable_user_pwd_choice,\n             False\n         )\n         self.security_settings.enable_user_pwd_choice = True\n-        self.assertEquals(\n+        self.assertEqual(\n             self.security_settings.enable_user_pwd_choice,\n             True\n         )\n \n     def test_get_enable_user_folders_setting(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.security_settings.enable_user_folders,\n             False\n         )\n \n     def test_set_enable_user_folders_setting(self):\n         self.security_settings.enable_user_folders = False\n-        self.assertEquals(\n+        self.assertEqual(\n             self.security_settings.enable_user_folders,\n             False\n         )\n         self.security_settings.enable_user_folders = True\n-        self.assertEquals(\n+        self.assertEqual(\n             self.security_settings.enable_user_folders,\n             True\n         )\n \n     def test_get_allow_anon_views_about_setting(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.security_settings.allow_anon_views_about,\n             False\n         )\n \n     def test_set_allow_anon_views_about_setting(self):\n         self.security_settings.allow_anon_views_about = False\n-        self.assertEquals(\n+        self.assertEqual(\n             self.security_settings.allow_anon_views_about,\n             False\n         )\n         self.security_settings.allow_anon_views_about = True\n-        self.assertEquals(\n+        self.assertEqual(\n             self.security_settings.allow_anon_views_about,\n             True\n         )\n \n     def test_get_use_email_as_login_setting(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.security_settings.use_email_as_login,\n             False\n         )\n \n     def test_set_use_email_as_login_setting(self):\n         self.security_settings.use_email_as_login = False\n-        self.assertEquals(\n+        self.assertEqual(\n             self.security_settings.use_email_as_login,\n             False\n         )\n         self.security_settings.use_email_as_login = True\n-        self.assertEquals(\n+        self.assertEqual(\n             self.security_settings.use_email_as_login,\n             True\n         )\n \n     def test_get_use_uuid_as_userid_setting(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.security_settings.use_uuid_as_userid,\n             False\n         )\n \n     def test_set_use_uuid_as_userid_setting(self):\n         self.security_settings.use_uuid_as_userid = False\n-        self.assertEquals(\n+        self.assertEqual(\n             self.security_settings.use_uuid_as_userid,\n             False\n         )\n         self.security_settings.use_uuid_as_userid = True\n-        self.assertEquals(\n+        self.assertEqual(\n             self.security_settings.use_uuid_as_userid,\n             True\n         )\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_site_adapter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_site_adapter.py\nindex 71a706c04..867d4fcf7 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_site_adapter.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_bbb_site_adapter.py\n@@ -25,42 +25,42 @@ def test_adapter_lookup(self):\n \n     def test_get_site_title(self):\n         self.settings.site_title = u\'Great Site\'\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, ISiteSchema).site_title,\n             u\'Great Site\'\n         )\n \n     def test_set_site_title(self):\n         getAdapter(self.portal, ISiteSchema).site_title = u\'Good Site\'\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.site_title,\n             u\'Good Site\'\n         )\n \n     def test_set_site_title_string(self):\n         getAdapter(self.portal, ISiteSchema).site_title = \'Good Site\'\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.site_title,\n             u\'Good Site\'\n         )\n \n     def test_get_webstats_js(self):\n         self.settings.webstats_js = u\'Script Tag\'\n-        self.assertEquals(\n+        self.assertEqual(\n             getAdapter(self.portal, ISiteSchema).webstats_js,\n             u\'Script Tag\'\n         )\n \n     def test_set_webstats_js(self):\n         getAdapter(self.portal, ISiteSchema).webstats_js = u\'Script Tag\'\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.webstats_js,\n             u\'Script Tag\'\n         )\n \n     def test_set_webstats_js_string(self):\n         getAdapter(self.portal, ISiteSchema).webstats_js = \'Script Tag\'\n-        self.assertEquals(\n+        self.assertEqual(\n             self.settings.webstats_js,\n             u\'Script Tag\'\n         )\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_editing.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_editing.py\nindex 4bd3ef334..85ef148f5 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_editing.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_editing.py\n@@ -5,7 +5,7 @@\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from zope.component import getUtility\n import unittest\n \ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_filter.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_filter.py\nindex 3447a581d..4378a0a29 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_filter.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_filter.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IFilterSchema\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n@@ -103,6 +103,6 @@ def test_nasty_tags(self):\n         good_html = \'<p><a href="http://example.com">harmless link</a></p>\'\n         ds = datastream(\'dummy_name\')\n         self.assertEqual(\n-            str(self.safe_html.convert(good_html, ds)),\n+            self.safe_html.convert(good_html, ds).getData(),\n             \'<p/>\'\n         )\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_installer.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_installer.py\nindex b87bbb828..d848db60c 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_installer.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_installer.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n from zope.component import getMultiAdapter\n \ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py\nindex 0d4ebe38a..586b24833 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_language.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n \n from zope.component import getMultiAdapter\n from zope.component import getUtility\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_mail.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_mail.py\nindex 083d955ed..105481e89 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_mail.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_mail.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n \n from zope.component import getMultiAdapter\n from zope.component import getUtility\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\nindex 69d9d48f5..82d0d9f68 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\n@@ -2,7 +2,7 @@\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n import unittest\n from App.ApplicationManager import ApplicationManager\n from pkg_resources import get_distribution\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_markup.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_markup.py\nindex fed1518ea..ded537d22 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_markup.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_markup.py\n@@ -3,7 +3,7 @@\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n import unittest\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_navigation.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_navigation.py\nindex 1fa6375bd..0236a3f87 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_navigation.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_navigation.py\n@@ -3,7 +3,7 @@\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n import unittest\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_search.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_search.py\nindex 54a59b445..721d2d7fa 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_search.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_search.py\n@@ -3,7 +3,7 @@\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n import unittest\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_security.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_security.py\nindex f7848380a..da811174c 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_security.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_security.py\n@@ -4,7 +4,7 @@\n     PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from zope.component import getUtility\n \n import unittest\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_site.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_site.py\nindex 131acaef2..b4050c341 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_site.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_site.py\n@@ -1,23 +1,24 @@\n # -*- coding: utf-8 -*-\n from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from Products.CMFPlone.interfaces import ISiteSchema\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n-from six import StringIO\n+from six import BytesIO\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n import unittest\n \n # Red pixel with filename pixel.png\n-SITE_LOGO_BASE64 = \'filenameb64:cGl4ZWwucG5n;datab64:iVBORw0KGgoAAAANSUhEUgAA\'\\\n-                   \'AAEAAAABCAIAAACQd1PeAAAADElEQVQI12P4z8AAAAMBAQAY3Y2wAAAAA\'\\\n-                   \'ElFTkSuQmCC\'\n-SITE_LOGO_HEX = \'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00\\x01\\x00\\x00\'\\\n-                \'\\x00\\x01\\x08\\x02\\x00\\x00\\x00\\x90wS\\xde\\x00\\x00\\x00\\x0cIDAT\'\\\n-                \'\\x08\\xd7c\\xf8\\xcf\\xc0\\x00\\x00\\x03\\x01\\x01\\x00\\x18\\xdd\\x8d\'\\\n-                \'\\xb0\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82\'\n+SITE_LOGO_BASE64 = b\'filenameb64:cGl4ZWwucG5n;datab64:iVBORw0KGgoAAAANSUhEUgA\'\\\n+                   b\'AAAEAAAABCAIAAACQd1PeAAAADElEQVQI12P4z8AAAAMBAQAY3Y2wAAA\'\\\n+                   b\'AAElFTkSuQmCC\'\n+\n+SITE_LOGO_HEX = b\'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00\\x01\\x00\\x00\'\\\n+                b\'\\x00\\x01\\x08\\x02\\x00\\x00\\x00\\x90wS\\xde\\x00\\x00\\x00\\x0cIDAT\'\\\n+                b\'\\x08\\xd7c\\xf8\\xcf\\xc0\\x00\\x00\\x03\\x01\\x01\\x00\\x18\\xdd\\x8d\'\\\n+                b\'\\xb0\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82\'\n \n \n class SiteControlPanelFunctionalTest(unittest.TestCase):\n@@ -98,7 +99,7 @@ def test_site_logo_is_stored_in_registry(self):\n         self.browser.open(\n             "%s/@@site-controlpanel" % self.portal_url)\n         ctrl = self.browser.getControl(name="form.widgets.site_logo")\n-        ctrl.add_file(StringIO(SITE_LOGO_HEX), \'image/png\', \'pixel.png\')\n+        ctrl.add_file(BytesIO(SITE_LOGO_HEX), \'image/png\', \'pixel.png\')\n         self.browser.getControl(\'Save\').click()\n \n         registry = getUtility(IRegistry)\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_syndication.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_syndication.py\nindex 109e319af..eb3476674 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_syndication.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_syndication.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n from zope.component import getMultiAdapter\n import transaction\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_types.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_types.py\nindex 71c9eaa66..64c555970 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_types.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_types.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n import unittest\n \n \n@@ -54,7 +54,7 @@ def test_standard_type_allow_commenting(self):\n         self.browser.getForm(action=self.types_url).submit()\n         self.assertIn(\'Globally addable\', self.browser.contents)\n         self.assertIn(\'Allow comments\', self.browser.contents)\n-        self.assertEquals(\n+        self.assertEqual(\n             self.browser.getControl(\'Allow comments\').selected,\n             True\n         )\n@@ -84,7 +84,7 @@ def test_standard_types_redirect_links(self):\n         self.assertTrue(\n             \'Redirect immediately to link target\' in self.browser.contents\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             self.browser.getControl(\n                 \'Redirect immediately to link target\').selected,\n             True\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\nindex ee099614d..6376fadd8 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD\n from Products.CMFCore.utils import getToolByName\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from Products.CMFPlone.utils import normalizeString\n \n from Products.CMFPlone.testing import \\\n@@ -296,16 +296,19 @@ def test_groups_modify_roles(self):\n \n         # Check that role is not selected yet and then select it and apply it.\n         form = self.browser.getForm(id=\'groups_search\')\n-        ctrl = form._form.get(\'group_group1:list\', index=1)\n-        self.assertEqual(ctrl._value, \'Site Administrator\')\n-        self.assertFalse(ctrl.checked)\n-        ctrl.checked = True\n+        ctrls = form._form.fields.get(\'group_group1:list\')\n+        roles = [ctrl._value for ctrl in ctrls]\n+        expected = \'Site Administrator\'\n+        self.assertIn(expected, roles)\n+        idx = roles.index(expected)\n+        self.assertFalse(ctrls[idx].checked)\n+        ctrls[idx].checked = True\n         self.browser.getControl(\'Save\').click()\n \n         # Check that role is now selected\n         form = self.browser.getForm(id=\'groups_search\')\n-        ctrl = form._form.get(\'group_group1:list\', index=1)\n-        self.assertEqual(ctrl._value, \'Site Administrator\')\n+        ctrl = form._form.get(\'group_group1:list\', index=idx)\n+        self.assertEqual(ctrl._value, expected)\n         self.assertTrue(ctrl.checked)\n \n     def test_groups_delete_group(self):\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py\nindex efedfbbda..ad873ffc6 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups_siteadmin_role.py\n@@ -1,62 +1,56 @@\n # -*- coding: utf-8 -*-\n-"""This test has been moved over to CMFPlone from plone.app.controlpanel.\n-   It has been cleaned up a bit. Though, it still is kind of messy because it\n-   comes with its own test fixture. Would be nice to refactor that to use the\n-   CMFPlone fixture at some point.\n-"""\n-from plone.app import testing\n-from plone.app.testing.bbb import PloneTestCase as FunctionalTestCase\n-from plone.app.testing.bbb import PloneTestCaseFixture\n-from plone.protect.authenticator import createToken\n+from plone.app.testing import login\n+from plone.app.testing import setRoles\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_PASSWORD\n+from plone.testing.zope import Browser\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n from six import StringIO\n from six.moves.urllib.parse import urlencode\n \n import re\n+import six\n import transaction\n+import unittest\n+import zExceptions\n \n \n-class ControlPanelFixture(PloneTestCaseFixture):\n+class TestSiteAdministratorRoleFunctional(unittest.TestCase):\n \n-    def setUpPloneSite(self, portal):\n-        super(ControlPanelFixture, self).setUpPloneSite(portal)\n-        portal.acl_users.userFolderAddUser(\'root\', \'secret\', [\'Manager\'], [])\n+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n \n+    def _generateUsers(self):\n+        rtool = getToolByName(self.portal, \'portal_registration\')\n+        rtool.addMember(\'DIispfuF\', \'secret\', [\'Member\'], [])\n+        rtool.addMember(\'siteadmin\', \'secret\', [\'Site Administrator\'], [])\n+        rtool.addMember(\'root\', \'secret\', [\'Manager\'], [])\n \n-CP_FIXTURE = ControlPanelFixture()\n-CP_FUNCTIONAL_LAYER = testing.FunctionalTesting(\n-    bases=(CP_FIXTURE,), name=\'ControlPanel:Functional\')\n-\n-\n-class UserGroupsControlPanelTestCase(FunctionalTestCase):\n-    """user/groups-specific test case"""\n-\n-    layer = CP_FUNCTIONAL_LAYER\n-\n-    def afterSetUp(self):\n-        super(UserGroupsControlPanelTestCase, self).afterSetUp()\n-        members = [\n-            {\n-                \'username\': \'DIispfuF\',\n-                \'fullname\': \'Kevin Hughes\',\n-                \'email\': \'DIispfuF@example.com\'\n-            },\n-        ]\n-        regtool = getToolByName(self.portal, \'portal_registration\')\n-        for member in members:\n-            regtool.addMember(\n-                member[\'username\'],\n-                \'somepassword\',\n-                properties=member\n-            )\n+    def setUp(self):\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+        self.portal_url = self.portal.absolute_url()\n+        self.usergroups_url = "%s/@@usergroup-userprefs" % self.portal_url\n+        self.groups_url = "%s/@@usergroup-groupprefs" % self.portal_url\n+        self._generateUsers()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         transaction.commit()\n \n+        self.browser = Browser(self.app)\n+        self.browser.handleErrors = False\n+        self.browser.addHeader(\n+            \'Authorization\',\n+            \'Basic %s:%s\' % (TEST_USER_ID, TEST_USER_PASSWORD,)\n+        )\n+        self.normal_user = \'DIispfuF\'\n \n-class TestSiteAdministratorRoleFunctional(UserGroupsControlPanelTestCase):\n-\n-    def _getauth(self, userName):\n-        self.login(userName)\n-        return createToken()\n+    def _get_authenticator(self, browser=None):\n+        if not browser:\n+            browser = self.browser\n+        return browser.getControl(name=\'_authenticator\').value\n \n     def _simplify_white_space(self, text):\n         """For easier testing we replace all white space with one space.\n@@ -73,166 +67,160 @@ def _simplify_white_space(self, text):\n \n           <p id="foo">Bar</p>\n         """\n-        text = re.sub(\'\\s*<\\s*\', \'<\', text)\n-        text = re.sub(\'\\s*>\\s*\', \'>\', text)\n-        text = re.sub(\'\\s+\', \' \', text)\n+        text = re.sub(r\'\\s*<\\s*\', \'<\', text)\n+        text = re.sub(r\'\\s*>\\s*\', \'>\', text)\n+        text = re.sub(r\'\\s+\', \' \', text)\n         return text\n \n-    def afterSetUp(self):\n-        super(TestSiteAdministratorRoleFunctional, self).afterSetUp()\n-\n-        # add a user with the Site Administrator role\n-        self.portal.portal_membership.addMember(\n-            \'siteadmin\',\n-            \'secret\',\n-            [\'Site Administrator\'],\n-            []\n-        )\n-\n-        self.manager_token = self._getauth(\'root\')\n-        self.siteadmin_token = self._getauth(\'siteadmin\')\n-\n-        self.normal_user = \'DIispfuF\'\n-\n     def testControlPanelOverview(self):\n         # make sure we can view the Site Setup page,\n         # at both old and new URLs\n-        res = self.publish(\n-            \'/plone/plone_control_panel\', \'siteadmin:secret\')\n-        self.assertEqual(200, res.status)\n-        res = self.publish(\n-            \'/plone/@@overview-controlpanel\', \'siteadmin:secret\'\n-        )\n-        self.assertEqual(200, res.status)\n+        view = self.portal.restrictedTraverse(\'plone_control_panel\')\n+        self.assertTrue(view())\n+        view = self.portal.restrictedTraverse(\'overview-controlpanel\')\n+        self.assertTrue(view())\n \n     def testUserManagerRoleCheckboxIsDisabledForNonManagers(self):\n-        res = self.publish(\n-            \'/plone/@@usergroup-userprefs\', basic=\'siteadmin:secret\'\n-        )\n-        contents = res.getOutput()\n+        login(self.portal, \'siteadmin\')\n+        view = self.portal.restrictedTraverse(\'@@usergroup-userprefs\')\n+        contents = view()\n         self.assertTrue(\'<input type="checkbox" class="noborder" \'\n                         \'name="users.roles:list:records" value="Manager" \'\n                         \'disabled="disabled" />\' in contents)\n \n     def testManagerCanDelegateManagerRoleForUsers(self):\n         # a user with the Manager role can grant the Manager role\n+        self.browser.addHeader(\n+            \'Authorization\',\n+            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+        )\n+        self.browser.open(self.usergroups_url)\n         form = {\n-            \'_authenticator\': self.manager_token,\n+            \'_authenticator\': self._get_authenticator(),\n             \'users.id:records\': self.normal_user,\n             \'users.roles:list:records\': \'Manager\',\n             \'form.button.Modify\': \'Save\',\n             \'form.submitted\': 1,\n         }\n-        post_data = StringIO(urlencode(form))\n-        res = self.publish(\'/plone/@@usergroup-userprefs\',\n-                           request_method=\'POST\', stdin=post_data,\n-                           basic=\'root:secret\')\n-        self.assertEqual(200, res.status)\n+        post_data = urlencode(form)\n+        self.browser.post(self.usergroups_url, post_data)\n+        self.assertIn(\'Status: 200\', str(self.browser.headers))\n+\n         roles = self.portal.acl_users.getUserById(self.normal_user).getRoles()\n         self.assertEqual([\'Manager\', \'Authenticated\'], roles)\n \n     def testNonManagersCannotDelegateManagerRoleForUsers(self):\n         # a user without the Manager role cannot delegate the Manager role\n+        self.browser.addHeader(\n+            \'Authorization\', \'Basic siteadmin:secret\')\n+        self.browser.open(self.usergroups_url)\n         form = {\n-            \'_authenticator\': self.siteadmin_token,\n+            \'_authenticator\': self._get_authenticator(),\n             \'users.id:records\': self.normal_user,\n             \'users.roles:list:records\': \'Manager\',\n             \'form.button.Modify\': \'Save\',\n             \'form.submitted\': 1,\n         }\n-        post_data = StringIO(urlencode(form))\n-        res = self.publish(\'/plone/@@usergroup-userprefs\',\n-                           request_method=\'POST\', stdin=post_data,\n-                           basic=\'siteadmin:secret\')\n-        self.assertEqual(403, res.status)\n+        post_data = urlencode(form)\n+        with self.assertRaises(zExceptions.Forbidden):\n+            self.browser.post(self.usergroups_url, post_data)\n         roles = self.portal.acl_users.getUserById(self.normal_user).getRoles()\n         self.assertEqual([\'Member\', \'Authenticated\'], roles)\n \n     def testNonManagersCanEditOtherRolesOfUsersWithManagerRole(self):\n         roles = self.portal.acl_users.getUserById(\'root\').getRoles()\n         self.assertEqual([\'Manager\', \'Authenticated\'], roles)\n+        self.browser.addHeader(\n+            \'Authorization\', \'Basic siteadmin:secret\')\n+        self.browser.open(self.usergroups_url)\n         form = {\n-            \'_authenticator\': self.siteadmin_token,\n+            \'_authenticator\': self._get_authenticator(),\n             \'users.id:records\': \'root\',\n             \'users.roles:list:records\': (\'Member\', \'Manager\'),\n             \'form.button.Modify\': \'Save\',\n             \'form.submitted\': 1,\n         }\n-        post_data = StringIO(urlencode(form, doseq=True))\n-        res = self.publish(\'/plone/@@usergroup-userprefs\',\n-                           request_method=\'POST\', stdin=post_data,\n-                           basic=\'siteadmin:secret\')\n-        self.assertEqual(200, res.status)\n+        post_data = urlencode(form, doseq=True)\n+        self.browser.post(self.usergroups_url, post_data)\n         roles = self.portal.acl_users.getUserById(\'root\').getRoles()\n-        self.assertEqual([\'Member\', \'Manager\', \'Authenticated\'], roles)\n+        self.assertEqual([\'Authenticated\', \'Manager\', \'Member\'], sorted(roles))\n \n     def testGroupManagerRoleCheckboxIsDisabledForNonManagers(self):\n-        res = self.publish(\n-            \'/plone/@@usergroup-groupprefs\',\n-            basic=\'siteadmin:secret\'\n-        )\n-        contents = self._simplify_white_space(res.getOutput())\n+        self.browser.addHeader(\n+            \'Authorization\', \'Basic siteadmin:secret\')\n+        self.browser.open(self.groups_url)\n+        contents = self._simplify_white_space(self.browser.contents)\n         self.assertTrue(\'<input type="checkbox" class="noborder" \'\n                         \'name="group_Reviewers:list" value="Manager" \'\n                         \'disabled="disabled" />\' in contents)\n \n     def testManagerCanDelegateManagerRoleForGroups(self):\n         # a user with the Manager role can grant the Manager role\n+        roles = self.portal.acl_users.getGroupById(\'Reviewers\').getRoles()\n+        self.assertEqual([\'Reviewer\', \'Authenticated\'], roles)\n+        self.browser.addHeader(\n+            \'Authorization\',\n+            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)\n+        )\n+        self.browser.open(self.groups_url)\n         form = {\n-            \'_authenticator\': self.manager_token,\n+            \'_authenticator\': self._get_authenticator(),\n             \'group_Reviewers:list\': (\'\', \'Manager\'),\n             \'form.button.Modify\': \'Save\',\n             \'form.submitted\': 1,\n         }\n-        post_data = StringIO(urlencode(form, doseq=True))\n-        res = self.publish(\'/plone/@@usergroup-groupprefs\',\n-                           request_method=\'POST\', stdin=post_data,\n-                           basic=\'root:secret\')\n-        self.assertEqual(200, res.status)\n+        post_data = urlencode(form, doseq=True)\n+        self.browser.post(self.groups_url, post_data)\n         roles = self.portal.acl_users.getGroupById(\'Reviewers\').getRoles()\n         self.assertEqual([\'Manager\', \'Authenticated\'], roles)\n \n     def testNonManagersCannotDelegateManagerRoleForGroups(self):\n         # a user without the Manager role cannot delegate the Manager role\n+        self.browser.addHeader(\n+            \'Authorization\', \'Basic siteadmin:secret\')\n+\n+        self.browser.open(self.groups_url)\n         form = {\n-            \'_authenticator\': self.siteadmin_token,\n+            \'_authenticator\': self._get_authenticator(),\n             \'group_Reviewers:list\': (\'\', \'Manager\'),\n             \'form.button.Modify\': \'Save\',\n             \'form.submitted\': 1,\n         }\n-        post_data = StringIO(urlencode(form, doseq=True))\n-        res = self.publish(\'/plone/@@usergroup-groupprefs\',\n-                           request_method=\'POST\', stdin=post_data,\n-                           basic=\'siteadmin:secret\')\n-        self.assertEqual(403, res.status)\n+        post_data = urlencode(form, doseq=True)\n+        with self.assertRaises(zExceptions.Forbidden):\n+            self.browser.post(self.groups_url, post_data)\n+        # self.assertEqual(403, res.status)\n         roles = self.portal.acl_users.getGroupById(\'Reviewers\').getRoles()\n         self.assertEqual([\'Reviewer\', \'Authenticated\'], roles)\n \n     def testNonManagersCanEditOtherRolesOfGroupsWithManagerRole(self):\n+        self.browser.addHeader(\n+            \'Authorization\', \'Basic siteadmin:secret\')\n+\n         roles = self.portal.acl_users.getUserById(\'root\').getRoles()\n         self.assertEqual([\'Manager\', \'Authenticated\'], roles)\n+        self.browser.open(self.groups_url)\n         form = {\n-            \'_authenticator\': self.siteadmin_token,\n+            \'_authenticator\': self._get_authenticator(),\n             \'group_Administrators:list\': (\'\', \'Member\', \'Manager\'),\n             \'form.button.Modify\': \'Save\',\n             \'form.submitted\': 1,\n         }\n-        post_data = StringIO(urlencode(form, doseq=True))\n-        res = self.publish(\'/plone/@@usergroup-groupprefs\',\n-                           request_method=\'POST\', stdin=post_data,\n-                           basic=\'siteadmin:secret\')\n-        self.assertEqual(200, res.status)\n+        post_data = urlencode(form, doseq=True)\n+        self.browser.post(self.groups_url, post_data)\n+        # self.assertEqual(200, res.status)\n         roles = self.portal.acl_users.getGroupById(\'Administrators\').getRoles()\n-        self.assertEqual([\'Member\', \'Manager\', \'Authenticated\'], roles)\n+        self.assertEqual([\'Authenticated\', \'Manager\', \'Member\'], sorted(roles))\n \n     def test_usergroup_usermembership_blocks_escalation(self):\n+        self.browser.addHeader(\n+            \'Authorization\', \'Basic siteadmin:secret\')\n+\n         # groups granting the Manager role shouldn\'t show as a valid option to\n         # add\n-        res = self.publish(\n-            \'/plone/@@usergroup-usermembership?userid=%s\' % self.normal_user,\n-            basic=\'siteadmin:secret\'\n-        )\n-        contents = self._simplify_white_space(res.getOutput())\n+        self.browser.open(\n+            self.portal_url + \'/@@usergroup-usermembership?userid=%s\' % self.normal_user)\n+        contents = self._simplify_white_space(self.browser.contents)\n         self.assertTrue(\n             \'<input type="checkbox" class="noborder" name="add:list" \'\n             \'value="Administrators" disabled="disabled" />\' in contents\n@@ -240,60 +228,61 @@ def test_usergroup_usermembership_blocks_escalation(self):\n \n         # and should not be addable\n         form = {\n-            \'_authenticator\': self.siteadmin_token,\n+            \'_authenticator\': self._get_authenticator(),\n             \'add:list\': \'Administrators\',\n             \'form.submitted\': 1,\n         }\n-        post_data = StringIO(urlencode(form))\n-        res = self.publish(\n-            \'/plone/@@usergroup-usermembership?userid=%s\' % self.normal_user,\n-            request_method=\'POST\', stdin=post_data,\n-            basic=\'siteadmin:secret\'\n-        )\n-        self.assertEqual(403, res.status)\n+        post_data = urlencode(form)\n+        with self.assertRaises(zExceptions.Forbidden):\n+            self.browser.open(\n+                self.portal_url + \'/@@usergroup-usermembership?userid=%s\' % self.normal_user, post_data\n+            )\n+        # self.assertEqual(403, res.status)\n         roles = self.portal.acl_users.getUserById(self.normal_user).getRoles()\n         self.assertEqual([\'Member\', \'Authenticated\'], roles)\n \n     def test_usergroup_groupmembership_blocks_escalation(self):\n         # should not show section to add users for groups granting the Manager\n         # role\n-        res = self.publish(\n-            \'/plone/@@usergroup-groupmembership?groupname=Administrators\',\n-            basic=\'siteadmin:secret\'\n+        self.browser.addHeader(\n+            \'Authorization\', \'Basic siteadmin:secret\')\n+\n+        self.browser.open(\n+            self.portal_url + \'/@@usergroup-groupmembership?groupname=Administrators\'\n         )\n-        contents = self._simplify_white_space(res.getOutput())\n+        contents = self._simplify_white_space(self.browser.contents)\n         self.assertFalse(\'Search for new group members\' in contents)\n \n         # and should not be addable if we try to force it\n         form = {\n-            \'_authenticator\': self.siteadmin_token,\n+            \'_authenticator\': self._get_authenticator(),\n             \'add:list\': self.normal_user,\n             \'form.submitted\': 1,\n         }\n-        post_data = StringIO(urlencode(form))\n-        res = self.publish(\n-            \'/plone/@@usergroup-groupmembership?groupname=Administrators\',\n-            request_method=\'POST\', stdin=post_data,\n-            basic=\'siteadmin:secret\'\n-        )\n-        self.assertEqual(403, res.status)\n+        post_data = urlencode(form)\n+        with self.assertRaises(zExceptions.Forbidden):\n+            self.browser.post(\n+                self.portal_url + \'/@@usergroup-groupmembership?groupname=Administrators\', post_data\n+            )\n+        # self.assertEqual(403, res.status)\n         roles = self.portal.acl_users.getUserById(self.normal_user).getRoles()\n         self.assertEqual([\'Member\', \'Authenticated\'], roles)\n \n     def test_user_registration_form_blocks_escalation(self):\n         # groups granting the Manager role should not be available for\n         # selection\n-        res = self.publish(\'/plone/@@new-user\', basic=\'siteadmin:secret\')\n-        contents = self._simplify_white_space(res.getOutput())\n+        self.browser.addHeader(\n+            \'Authorization\', \'Basic siteadmin:secret\')\n+        self.browser.open(self.portal_url + \'/@@new-user\')\n+        contents = self._simplify_white_space(self.browser.contents)\n         self.assertFalse(\n             \'<input class="label checkboxType" id="form.groups.0" \'\n             \'name="form.groups" type="checkbox" value="Administrators \'\n             \'(Administrators)" />\' in contents\n         )\n-\n         # and should not be getting that roles if we try to force it\n         form = {\n-            \'_authenticator\': self.siteadmin_token,\n+            \'_authenticator\': self._get_authenticator(),\n             \'form.widgets.username\': \'newuser\',\n             \'form.widgets.email\': \'newuser@example.com\',\n             \'form.widgets.password\': \'secret\',\n@@ -302,11 +291,8 @@ def test_user_registration_form_blocks_escalation(self):\n             \'form.widgets.groups-empty-marker\': \'1\',\n             \'form.buttons.register\': \'Register\',\n         }\n-        post_data = StringIO(urlencode(form))\n-        res = self.publish(\'/plone/@@new-user\',\n-                           request_method=\'POST\', stdin=post_data,\n-                           basic=\'siteadmin:secret\')\n-        self.assertNotEqual(200, res.status)\n+        post_data = urlencode(form)\n+        self.browser.post(self.portal_url + \'/@@new-user\', post_data)\n         self.assertEqual(\n             [\'Member\', \'Authenticated\'],\n             self.portal.acl_users.getUserById(\'newuser\').getRoles())\n@@ -314,37 +300,38 @@ def test_user_registration_form_blocks_escalation(self):\n     def test_users_overview_blocks_deleting_managers(self):\n         # a user without the Manager role cannot delete a user with the\n         # Manager role\n-        res = self.publish(\'/plone/@@usergroup-userprefs\',\n-                           basic=\'siteadmin:secret\')\n-        contents = self._simplify_white_space(res.getOutput())\n+        self.browser.addHeader(\n+            \'Authorization\', \'Basic siteadmin:secret\')\n+\n+        self.browser.open(self.usergroups_url)\n+        contents = self._simplify_white_space(self.browser.contents)\n         self.assertTrue(\n             \'<input type="checkbox" class="noborder notify" \'\n             \'name="delete:list" value="root" disabled="disabled" />\'\n             in contents)\n \n         form = {\n-            \'_authenticator\': self.siteadmin_token,\n+            \'_authenticator\': self._get_authenticator(),\n             \'users.id:records\': \'root\',\n             \'delete:list\': \'root\',\n             \'form.button.Modify\': \'Save\',\n             \'form.submitted\': 1,\n         }\n-        post_data = StringIO(urlencode(form))\n-        res = self.publish(\'/plone/@@usergroup-userprefs\',\n-                           request_method=\'POST\', stdin=post_data,\n-                           basic=\'siteadmin:secret\')\n-        self.assertEqual(403, res.status)\n+        post_data = urlencode(form)\n+        with self.assertRaises(zExceptions.Forbidden):\n+            self.browser.post(self.usergroups_url, post_data)\n+        # self.assertEqual(403, res.status)\n         user = self.portal.acl_users.getUserById(\'root\')\n         self.assertTrue(user is not None)\n \n     def test_groups_overview_blocks_deleting_managers(self):\n         # a user without the Manager role cannot delete a group with the\n         # Manager role\n-        res = self.publish(\n-            \'/plone/@@usergroup-groupprefs\',\n-            basic=\'siteadmin:secret\'\n-        )\n-        contents = self._simplify_white_space(res.getOutput())\n+        self.browser.addHeader(\n+            \'Authorization\', \'Basic siteadmin:secret\')\n+\n+        self.browser.open(self.groups_url)\n+        contents = self._simplify_white_space(self.browser.contents)\n         self.assertTrue(\n             \'<input type="checkbox" class="noborder notify" \'\n             \'name="delete:list" value="Administrators" disabled="disabled" />\'\n@@ -352,15 +339,14 @@ def test_groups_overview_blocks_deleting_managers(self):\n         )\n \n         form = {\n-            \'_authenticator\': self.siteadmin_token,\n+            \'_authenticator\': self._get_authenticator(),\n             \'delete:list\': \'Administrators\',\n             \'form.button.Modify\': \'Save\',\n             \'form.submitted\': 1,\n         }\n-        post_data = StringIO(urlencode(form))\n-        res = self.publish(\'/plone/@@usergroup-groupprefs\',\n-                           request_method=\'POST\', stdin=post_data,\n-                           basic=\'siteadmin:secret\')\n-        self.assertEqual(403, res.status)\n+        post_data = urlencode(form)\n+        with self.assertRaises(zExceptions.Forbidden):\n+            self.browser.post(self.groups_url, post_data)\n+        # self.assertEqual(403, res.status)\n         group = self.portal.acl_users.getGroupById(\'Administrators\')\n         self.assertTrue(group is not None)\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_events.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_events.py\nindex da1d67bef..e89ed55fa 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_events.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_events.py\n@@ -114,21 +114,21 @@ def test_handle_use_email_as_login_condition_check(self):\n         self._create_user(user_id=\'joe\', email=\'joe@test.com\')\n         pas = getToolByName(self.portal, \'acl_users\')\n \n-        self.assertEquals(len(pas.searchUsers(name=\'joe@test.com\')), 0)\n+        self.assertEqual(len(pas.searchUsers(name=\'joe@test.com\')), 0)\n         self.security_settings.use_uuid_as_userid = True\n-        self.assertEquals(len(pas.searchUsers(name=\'joe@test.com\')), 0)\n+        self.assertEqual(len(pas.searchUsers(name=\'joe@test.com\')), 0)\n \n     def test_handle_use_email_as_login_enabled(self):\n         self._create_user(user_id=\'joe\', email=\'joe@test.com\')\n         pas = getToolByName(self.portal, \'acl_users\')\n \n-        self.assertEquals(len(pas.searchUsers(name=\'joe@test.com\')), 0)\n-        self.assertEquals(len(pas.searchUsers(name=\'joe\')), 1)\n+        self.assertEqual(len(pas.searchUsers(name=\'joe@test.com\')), 0)\n+        self.assertEqual(len(pas.searchUsers(name=\'joe\')), 1)\n \n         # if we enable use_email_as_login, login name should be migrated\n         # to email\n         self.security_settings.use_email_as_login = True\n-        self.assertEquals(len(pas.searchUsers(name=\'joe@test.com\')), 1)\n+        self.assertEqual(len(pas.searchUsers(name=\'joe@test.com\')), 1)\n \n     def test_handle_use_email_as_login_disabled(self):\n         self._create_user(user_id=\'joe\', email=\'joe@test.com\')\n@@ -138,5 +138,5 @@ def test_handle_use_email_as_login_disabled(self):\n         # should be migrated back to user id\n         self.security_settings.use_email_as_login = True\n         self.security_settings.use_email_as_login = False\n-        self.assertEquals(len(pas.searchUsers(name=\'joe@test.com\')), 0)\n-        self.assertEquals(len(pas.searchUsers(name=\'joe\')), 1)\n+        self.assertEqual(len(pas.searchUsers(name=\'joe@test.com\')), 0)\n+        self.assertEqual(len(pas.searchUsers(name=\'joe\')), 1)\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_usergroups.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_usergroups.py\nindex c05e0ae67..498ce5afa 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_usergroups.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_usergroups.py\n@@ -1,15 +1,12 @@\n # -*- coding: utf-8 -*-\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IUserGroupsSettingsSchema\n-import unittest\n-\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from plone.registry.interfaces import IRegistry\n-\n-from Products.CMFCore.utils import getToolByName\n \n-from Products.CMFPlone.testing import \\\n-    PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+import unittest\n \n \n class TypesRegistryIntegrationTest(unittest.TestCase):\n@@ -24,19 +21,24 @@ def setUp(self):\n         self.request = self.layer[\'request\']\n         registry = getUtility(IRegistry)\n         self.settings = registry.forInterface(\n-            IUserGroupsSettingsSchema, prefix="plone")\n+            IUserGroupsSettingsSchema, prefix="plone"\n+        )\n \n     def test_usergroups_controlpanel_view(self):\n-        view = getMultiAdapter((self.portal, self.portal.REQUEST),\n-                               name="usergroup-controlpanel")\n+        view = getMultiAdapter(\n+            (self.portal, self.portal.REQUEST), name="usergroup-controlpanel"\n+        )\n         self.assertTrue(view())\n \n     def test_usergroups_in_controlpanel(self):\n         self.controlpanel = getToolByName(self.portal, "portal_controlpanel")\n-        self.assertTrue(\'UsersGroups\' in [\n-            a.getAction(self)[\'id\']\n-            for a in self.controlpanel.listActions()\n-        ])\n+        self.assertTrue(\n+            \'UsersGroups\'\n+            in [\n+                a.getAction(self)[\'id\']\n+                for a in self.controlpanel.listActions()\n+            ]\n+        )\n \n     def test_many_groups_setting(self):\n         self.assertTrue(hasattr(self.settings, \'many_groups\'))\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_doctests.py b/Products/CMFPlone/controlpanel/tests/test_doctests.py\nindex a48df3aa9..65ef940a6 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_doctests.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_doctests.py\n@@ -1,10 +1,22 @@\n # -*- coding: utf-8 -*-\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n from plone.testing import layered\n+\n import doctest\n+import re\n+import six\n import unittest\n \n \n+class Py23DocChecker(doctest.OutputChecker):\n+\n+    def check_output(self, want, got, optionflags):\n+        if not six.PY2:\n+            want = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n+            want = re.sub(\'u"(.*?)"\', \'"\\\\1"\', want)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n+\n tests = (\'../README.rst\',)\n \n \n@@ -12,7 +24,11 @@ def test_suite():\n     return unittest.TestSuite(\n         [\n             layered(\n-                doctest.DocFileSuite(f, optionflags=doctest.ELLIPSIS),\n+                doctest.DocFileSuite(\n+                    f,\n+                    optionflags=doctest.ELLIPSIS,\n+                    checker=Py23DocChecker(),\n+                ),\n                 layer=PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n             )\n             for f in tests\ndiff --git a/Products/CMFPlone/exportimport/tests/testControlPanel.py b/Products/CMFPlone/exportimport/tests/testControlPanel.py\nindex fd8d6bcde..c8cec8e80 100644\n--- a/Products/CMFPlone/exportimport/tests/testControlPanel.py\n+++ b/Products/CMFPlone/exportimport/tests/testControlPanel.py\n@@ -6,7 +6,7 @@\n from zope.component import provideUtility\n from zope.component import provideAdapter\n \n-_CONTROLPANEL_XML = """\\\n+_CONTROLPANEL_XML = b"""\\\n <?xml version="1.0" encoding="utf-8"?>\n <object name="portal_controlpanel" meta_type="Plone Control Panel Tool">\n  <configlet title="Add/Remove Products" action_id="QuickInstaller"\ndiff --git a/Products/CMFPlone/exportimport/tests/testPropertiesTool.py b/Products/CMFPlone/exportimport/tests/testPropertiesTool.py\nindex 7e6e3601c..0d185ef41 100644\n--- a/Products/CMFPlone/exportimport/tests/testPropertiesTool.py\n+++ b/Products/CMFPlone/exportimport/tests/testPropertiesTool.py\n@@ -4,7 +4,7 @@\n from Products.CMFPlone.PropertiesTool import SimpleItemWithProperties\n from zope.component import provideAdapter\n \n-_PROPERTYSHEET_XML = """\\\n+_PROPERTYSHEET_XML = b"""\\\n <?xml version="1.0" encoding="utf-8"?>\n <object name="site_properties" meta_type="Plone Property Sheet">\n  <property name="title">Site wide properties</property>\n@@ -13,7 +13,7 @@\n </object>\n """\n \n-_PROPERTIESTOOL_XML = """\\\n+_PROPERTIESTOOL_XML = b"""\\\n <?xml version="1.0" encoding="utf-8"?>\n <object name="portal_properties" meta_type="Plone Properties Tool">\n  <object name="site_properties" meta_type="Plone Property Sheet">\ndiff --git a/Products/CMFPlone/factory.py b/Products/CMFPlone/factory.py\nindex c052e3b6a..c7bf9ea89 100644\n--- a/Products/CMFPlone/factory.py\n+++ b/Products/CMFPlone/factory.py\n@@ -45,7 +45,6 @@ def getNonInstallableProducts(self):\n             \'plone.app.dexterity\',\n             \'plone.app.discussion\',\n             \'plone.app.event\',\n-            \'plone.app.folder\',\n             \'plone.app.imaging\',\n             \'plone.app.intid\',\n             \'plone.app.linkintegrity\',\n@@ -100,7 +99,6 @@ def getNonInstallableProfiles(self):\n                 u\'plone.app.dexterity:default\',\n                 u\'plone.app.discussion:default\',\n                 u\'plone.app.event:default\',\n-                u\'plone.app.folder:default\',\n                 u\'plone.app.imaging:default\',\n                 u\'plone.app.linkintegrity:default\',\n                 u\'plone.app.registry:default\',\ndiff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py\nindex b3359b94c..4313503a6 100644\n--- a/Products/CMFPlone/interfaces/controlpanel.py\n+++ b/Products/CMFPlone/interfaces/controlpanel.py\n@@ -1149,7 +1149,7 @@ class ISiteSchema(Interface):\n             u\'browsers and in syndication feeds.\'),\n         default=u\'Plone site\')\n \n-    site_logo = schema.ASCII(\n+    site_logo = schema.Bytes(\n         title=_(u\'Site Logo\'),\n         description=_(u\'This shows a custom logo on your site.\'),\n         required=False,\ndiff --git a/Products/CMFPlone/patches/__init__.py b/Products/CMFPlone/patches/__init__.py\nindex 723985be7..8800e0bb3 100644\n--- a/Products/CMFPlone/patches/__init__.py\n+++ b/Products/CMFPlone/patches/__init__.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n-from . import addzmiplonesite          # Add an explicit link to add a new Plone\n+# FIXME: This no longer works with the new ZMI\n+# from . import addzmiplonesite          # Add an explicit link to add a new Plone\n # site to the ZMI for faster access\n \n from . import addzmisecuritywarning    # Add a warning to the ZMI security tab\ndiff --git a/Products/CMFPlone/patches/addzmiplonesite.py b/Products/CMFPlone/patches/addzmiplonesite.py\nindex 73659ee20..264167ac5 100644\n--- a/Products/CMFPlone/patches/addzmiplonesite.py\n+++ b/Products/CMFPlone/patches/addzmiplonesite.py\n@@ -1,6 +1,8 @@\n # -*- coding: utf-8 -*-\n from OFS.ObjectManager import ObjectManager\n \n+# FIXME: This no longer works with the new ZMI\n+\n ADD_PLONE_SITE_HTML = \'\'\'\n <dtml-if "_.len(this().getPhysicalPath()) == 1 or this().meta_type == \'Folder\' and \'PloneSite\' not in [o.__class__.__name__ for o in this().aq_chain]">\n   <!-- Add Plone site action-->\ndiff --git a/Products/CMFPlone/patches/unicodehacks.py b/Products/CMFPlone/patches/unicodehacks.py\nindex 246de93fb..86f69540d 100644\n--- a/Products/CMFPlone/patches/unicodehacks.py\n+++ b/Products/CMFPlone/patches/unicodehacks.py\n@@ -3,7 +3,7 @@\n \n \n def _unicode_replace(structure):\n-    if isinstance(structure, str):\n+    if isinstance(structure, six.binary_type):\n         text = structure.decode(\'utf-8\', \'replace\')\n     else:\n         text = six.text_type(structure)\ndiff --git a/Products/CMFPlone/patterns/tinymce.py b/Products/CMFPlone/patterns/tinymce.py\nindex d3592cf30..7283055d0 100644\n--- a/Products/CMFPlone/patterns/tinymce.py\n+++ b/Products/CMFPlone/patterns/tinymce.py\n@@ -7,6 +7,7 @@\n from Products.CMFPlone.interfaces import IFilterSchema\n from Products.CMFPlone.interfaces import ITinyMCESchema\n from Products.CMFPlone.utils import get_portal\n+from Products.CMFPlone.utils import safe_unicode\n from zope.component import getUtility\n \n import json\n@@ -210,7 +211,8 @@ def get_tiny_config(self):\n             valid_tags = self.filter_settings.valid_tags\n             nasty_tags = self.filter_settings.nasty_tags\n             custom_attributes = self.filter_settings.custom_attributes\n-            safe_attributes = [attr.decode() for attr in html.defs.safe_attrs]\n+            safe_attributes = [\n+                safe_unicode(attr) for attr in html.defs.safe_attrs]\n             valid_attributes = safe_attributes + custom_attributes\n             # valid_elements : \'a[href|target=_blank],strong/b,div[align],br\'\n             tiny_valid_elements = []\ndiff --git a/Products/CMFPlone/resources/browser/combine.py b/Products/CMFPlone/resources/browser/combine.py\nindex 0a6171b3b..47fc59802 100644\n--- a/Products/CMFPlone/resources/browser/combine.py\n+++ b/Products/CMFPlone/resources/browser/combine.py\n@@ -1,18 +1,19 @@\n # -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from datetime import datetime\n+from io import BytesIO\n from plone.registry.interfaces import IRegistry\n from plone.resource.file import FilesystemFile\n from plone.resource.interfaces import IResourceDirectory\n from Products.CMFPlone.interfaces import IBundleRegistry\n from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME  # noqa\n-from six import StringIO\n from zExceptions import NotFound\n from zope.component import getUtility\n from zope.component import queryUtility\n \n import logging\n import re\n+import six\n \n \n PRODUCTION_RESOURCE_DIRECTORY = \'production\'\n@@ -31,6 +32,8 @@ def get_production_resource_directory():\n     if \'timestamp.txt\' not in production_folder:\n         return \'%s/++unique++1\' % PRODUCTION_RESOURCE_DIRECTORY\n     timestamp = production_folder.readFile(\'timestamp.txt\')\n+    if not six.PY2 and isinstance(timestamp, six.binary_type):\n+        timestamp = timestamp.decode()\n     return \'%s/++unique++%s\' % (\n         PRODUCTION_RESOURCE_DIRECTORY, timestamp)\n \n@@ -109,9 +112,11 @@ def write_js(context, folder, meta_bundle):\n                 continue\n             resources.append(resource)\n \n-    fi = StringIO()\n+    fi = BytesIO()\n     for script in resources:\n-        fi.write(script + \'\\n\')\n+        if not isinstance(script, six.binary_type):\n+            script = script.encode()\n+        fi.write((script + b\'\\n\'))\n     folder.writeFile(meta_bundle + \'.js\', fi)\n \n \n@@ -133,15 +138,19 @@ def write_css(context, folder, meta_bundle):\n             # Process relative urls:\n             # we prefix with current resource path any url not starting with\n             # \'/\' or http: or data:\n+            if not isinstance(path, six.binary_type):\n+                path = path.encode()\n             css = re.sub(\n-                r"""(url\\([\'"]?(?![\'"]?([a-z]+:|\\/)))""",\n-                r\'\\1%s/\' % path,\n+                br"""(url\\([\'"]?(?![\'"]?([a-z]+:|\\/)))""",\n+                br\'\\1%s/\' % path,\n                 css)\n             resources.append(css)\n \n-    fi = StringIO()\n+    fi = BytesIO()\n     for script in resources:\n-        fi.write(script + \'\\n\')\n+        if not isinstance(script, six.binary_type):\n+            script = script.encode()\n+        fi.write((script + b\'\\n\'))\n     folder.writeFile(meta_bundle + \'.css\', fi)\n \n \n@@ -161,8 +170,8 @@ def combine_bundles(context):\n     production_folder = container[PRODUCTION_RESOURCE_DIRECTORY]\n \n     # store timestamp\n-    fi = StringIO()\n-    fi.write(datetime.now().isoformat())\n+    fi = BytesIO()\n+    fi.write(datetime.now().isoformat().encode())\n     production_folder.writeFile(\'timestamp.txt\', fi)\n \n     # generate new combined bundles\ndiff --git a/Products/CMFPlone/resources/browser/cook.py b/Products/CMFPlone/resources/browser/cook.py\nindex c885df657..c239277ef 100644\n--- a/Products/CMFPlone/resources/browser/cook.py\n+++ b/Products/CMFPlone/resources/browser/cook.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from datetime import datetime\n+from io import BytesIO\n from plone.protect.interfaces import IDisableCSRFProtection\n from plone.registry.interfaces import IRegistry\n from plone.resource.interfaces import IResourceDirectory\n@@ -9,7 +10,6 @@\n from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME  # noqa\n from Products.CMFPlone.resources.browser.combine import combine_bundles\n from scss import Compiler\n-from six import StringIO\n from slimit import minify\n from zExceptions import NotFound\n from zope.component import getUtility\n@@ -18,6 +18,7 @@\n from zope.interface import alsoProvides\n \n import logging\n+import six\n \n \n logger = logging.getLogger(\'Products.CMFPlone\')\n@@ -95,6 +96,8 @@ def cookWhenChangingSettings(context, bundle=None):\n                     css = response.getBody()\n                     if css_resource[-8:] != \'.min.css\':\n                         css = css_compiler.compile_string(css)\n+                    if not isinstance(css, six.text_type):\n+                        css = css.decode(\'utf8\')\n                     cooked_css += u\'\\n/* Resource: {0} */\\n{1}\\n\'.format(\n                         css_resource,\n                         css\n@@ -104,7 +107,7 @@ def cookWhenChangingSettings(context, bundle=None):\n                         u\'\\n/* Could not find resource: {0} */\\n\\n\'.format(\n                             css_resource\n                         )\n-                    logger.warn(\'Could not find resource: %s\' , css_resource)\n+                    logger.warn(\'Could not find resource: %s\', css_resource)\n         if not resource.js or not js_path:\n             continue\n         js_url = siteUrl + \'/\' + resource.js\n@@ -113,6 +116,8 @@ def cookWhenChangingSettings(context, bundle=None):\n             js = response.getBody()\n             try:\n                 logger.info(\'Cooking js %s\', resource.js)\n+                if not isinstance(js, six.text_type):\n+                    js = js.decode(\'utf8\')\n                 cooked_js += \'\\n/* resource: {0} */\\n{1}\'.format(\n                     resource.js,\n                     js if \'.min.js\' == resource.js[-7:] else\n@@ -145,11 +150,11 @@ def _write_resource(resource_path, cooked_string):\n         resource_name, resource_filepath = resource_path.split(\'/\', 1)\n         if resource_name not in container:\n             container.makeDirectory(resource_name)\n-        if not isinstance(cooked_string, str):  # handle Error of OFS.Image\n+        if not isinstance(cooked_string, six.binary_type):  # handle Error of OFS.Image  # noqa: E501\n             cooked_string = cooked_string.encode(\'ascii\', errors=\'ignore\')\n         try:\n             folder = container[resource_name]\n-            fi = StringIO(cooked_string)\n+            fi = BytesIO(cooked_string)\n             folder.writeFile(resource_filepath, fi)\n             logger.info(\'Writing cooked resource: %s\', resource_path)\n         except NotFound:\ndiff --git a/Products/CMFPlone/resources/browser/resource.py b/Products/CMFPlone/resources/browser/resource.py\nindex f74e60e46..7d3bb2a4e 100644\n--- a/Products/CMFPlone/resources/browser/resource.py\n+++ b/Products/CMFPlone/resources/browser/resource.py\n@@ -213,7 +213,7 @@ def ordered_bundles_result(self, production=False):\n         # We need to check all dependencies\n         while len(depends_on) > 0:\n             found = False\n-            for key, bundles_to_add in depends_on.items():\n+            for key, bundles_to_add in list(depends_on.items()):\n                 if key not in inserted:\n                     continue\n                 found = True\ndiff --git a/Products/CMFPlone/resources/exportimport/bundles.py b/Products/CMFPlone/resources/exportimport/bundles.py\nindex c5c78cd33..9396b1c16 100644\n--- a/Products/CMFPlone/resources/exportimport/bundles.py\n+++ b/Products/CMFPlone/resources/exportimport/bundles.py\n@@ -6,7 +6,6 @@\n \n \n def combine(context):\n-\n     logger = context.getLogger(\'bundles\')\n     registry = queryUtility(IRegistry)\n \n@@ -22,7 +21,7 @@ def combine(context):\n     found = False\n     for filepath in filepaths:\n         body = context.readDataFile(filepath)\n-        if body is not None and \'IBundleRegistry\' in body:\n+        if body is not None and b\'IBundleRegistry\' in body:\n             found = True\n             break\n     if not found:\ndiff --git a/Products/CMFPlone/skins/plone_scripts/check_id.py b/Products/CMFPlone/skins/plone_scripts/check_id.py\ndeleted file mode 100644\nindex 48406ce11..000000000\n--- a/Products/CMFPlone/skins/plone_scripts/check_id.py\n+++ /dev/null\n@@ -1,199 +0,0 @@\n-## Script (Python) "check_id"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=id=None,required=0,alternative_id=None,contained_by=None\n-##title=Check an id\'s validity\n-\n-"""\n-This script tests an id to make sure it is valid.\n-\n-Returns an error message if the id is bad or None if the id is good.\n-Parameters are as follows:\n-\n-    id - the id to check\n-\n-    required - if False, id can be the empty string\n-\n-    alternative_id - an alternative value to use for the id\n-    if the id is empty or autogenerated\n-\n-Note: The reason the id is included is to handle id error messages for such\n-objects as files and images that supply an alternative id when an id is auto-\n-generated. If you say "There is already an item with this name in this folder"\n-for an image that has the Name field populated with an autogenerated id,\n-it can cause some confusion; since the real problem is the name of\n-the image file name, not in the name of the autogenerated id.\n-"""\n-\n-from AccessControl import Unauthorized\n-from ZODB.POSException import ConflictError\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.utils import base_hasattr\n-\n-# http://dev.plone.org/plone/ticket/10518#comment:7\n-ts = getToolByName(context, \'translation_service\')\n-\n-\n-def xlate(message):\n-    return ts.translate(message, context=context.REQUEST)\n-\n-\n-# if an alternative id has been supplied, see if we need to use it\n-if alternative_id and not id:\n-    id = alternative_id\n-\n-# make sure we have an id if one is required\n-if not id:\n-    if required:\n-        return _(u\'Please enter a name.\')\n-\n-    # Id is not required and no alternative was specified, so assume the\n-    # object\'s id will be context.getId(). We still should check to make sure\n-    # context.getId() is OK to handle the case of pre-created objects\n-    # constructed via portal_factory.  The main potential problem is an id\n-    # collision, e.g. if portal_factory autogenerates an id that already\n-    # exists.\n-\n-    id = context.getId()\n-\n-#\n-# do basic id validation\n-#\n-\n-# check for reserved names\n-if id in (\'login\', \'layout\', \'plone\', \'zip\', \'properties\', ):\n-    return xlate(\n-        _(u\'${name} is reserved.\',\n-          mapping={\'name\': id}))\n-\n-# check for bad characters\n-plone_utils = getToolByName(container, \'plone_utils\', None)\n-if plone_utils is not None:\n-    bad_chars = plone_utils.bad_chars(id)\n-    if len(bad_chars) > 0:\n-        bad_chars = \'\'.join(bad_chars).decode(\'utf-8\')\n-        decoded_id = id.decode(\'utf-8\')\n-        return xlate(\n-            _(u\'${name} is not a legal name. The following characters are \'\n-              u\'invalid: ${characters}\',\n-              mapping={u\'name\': decoded_id, u\'characters\': bad_chars}))\n-\n-# check for a catalog index\n-portal_catalog = getToolByName(container, \'portal_catalog\', None)\n-if portal_catalog is not None:\n-    try:\n-        if id in portal_catalog.indexes() + portal_catalog.schema():\n-            return xlate(\n-                _(u\'${name} is reserved.\',\n-                  mapping={u\'name\': id}))\n-    except Unauthorized:\n-        # ignore if we don\'t have permission; will get picked up at the end\n-        pass\n-\n-# id is good; decide if we should check for id collisions\n-portal_factory = getToolByName(container, \'portal_factory\', None)\n-if contained_by is not None:\n-    # always check for collisions if a container was passed\n-    checkForCollision = True\n-elif portal_factory is not None and portal_factory.isTemporary(context):\n-    # always check for collisions if we are creating a new object\n-    checkForCollision = True\n-    try:\n-        # XXX this can\'t really be necessary, can it!?\n-        contained_by = context.aq_inner.aq_parent.aq_parent.aq_parent\n-    except Unauthorized:\n-        pass\n-else:\n-    # if we have an existing object, only check for collisions\n-    # if we are changing the id\n-    checkForCollision = (context.getId() != id)\n-\n-# check for id collisions\n-if checkForCollision:\n-    # handles two use cases:\n-    # 1. object has not yet been created and we don\'t know where it will be\n-    # 2. object has been created and checking validity of id within container\n-    if contained_by is None:\n-        try:\n-            contained_by = context.getParentNode()\n-        except Unauthorized:\n-            return  # nothing we can do\n-\n-    # Check for an existing object.\n-    if id in contained_by:\n-        try:\n-            existing_obj = getattr(contained_by, id, None)\n-            if base_hasattr(existing_obj, \'portal_type\'):\n-                return xlate(\n-                    _(u\'There is already an item named ${name} in this \'\n-                      u\'folder.\',\n-                      mapping={u\'name\': id}))\n-        except Unauthorized:\n-            # we can\'t access the object: safe to assume we can\'t replace it\n-            return xlate(\n-                _(u\'There is already an item named ${name} in this folder.\',\n-                  mapping={u\'name\': id}))\n-\n-    if base_hasattr(contained_by, \'checkIdAvailable\'):\n-        try:\n-            if not contained_by.checkIdAvailable(id):\n-                return xlate(\n-                    _(u\'${name} is reserved.\',\n-                      mapping={u\'name\': id}))\n-        except Unauthorized:\n-            pass  # ignore if we don\'t have permission\n-\n-    # containers may implement this hook to further restrict ids\n-    if base_hasattr(contained_by, \'checkValidId\'):\n-        try:\n-            contained_by.checkValidId(id)\n-        except Unauthorized:\n-            raise\n-        except ConflictError:\n-            raise\n-        except:\n-            return xlate(\n-                _(u\'${name} is reserved.\',\n-                  mapping={u\'name\': id}))\n-\n-    # make sure we don\'t collide with any parent method aliases\n-    portal_types = getToolByName(context, \'portal_types\', None)\n-    if plone_utils is not None and portal_types is not None:\n-        parentFti = portal_types.getTypeInfo(contained_by)\n-        if parentFti is not None:\n-            aliases = plone_utils.getMethodAliases(parentFti)\n-            if aliases is not None:\n-                if id in aliases.keys():\n-                    return xlate(\n-                        _(u\'${name} is reserved.\',\n-                          mapping={u\'name\': id}))\n-\n-    # Lastly, we want to disallow the id of any of the tools in the portal\n-    # root, as well as any object that can be acquired via portal_skins.\n-    # However, we do want to allow overriding of *content* in the object\'s\n-    # parent path, including the portal root.\n-\n-    if id != \'index_html\':  # always allow index_html\n-        portal = context.portal_url.getPortalObject()\n-        if id not in portal.contentIds():  # can override root *content*\n-            try:\n-                # it is allowed to give an object the same id as another\n-                # container in it\'s acquisition path as long as the\n-                # object is outside the portal\n-                outsideportal = getattr(portal.aq_parent, id, None)\n-                insideportal = getattr(portal, id, None)\n-                if (insideportal is not None\n-                        and outsideportal is not None\n-                        and outsideportal.aq_base == insideportal.aq_base):\n-                    return\n-                # but not other things\n-                if getattr(portal, id, None) is not None:\n-                    return xlate(\n-                        _(u\'${name} is reserved.\',\n-                          mapping={u\'name\': id}))\n-            except Unauthorized:\n-                pass  # ignore if we don\'t have permission\ndiff --git a/Products/CMFPlone/skins/plone_scripts/check_id.py.metadata b/Products/CMFPlone/skins/plone_scripts/check_id.py.metadata\ndeleted file mode 100644\nindex 3b7f5db21..000000000\n--- a/Products/CMFPlone/skins/plone_scripts/check_id.py.metadata\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-[default]\n-proxy = Manager, Owner, Authenticated, Anonymous\ndiff --git a/Products/CMFPlone/skins/plone_scripts/isExpired.py b/Products/CMFPlone/skins/plone_scripts/isExpired.py\ndeleted file mode 100644\nindex 9e68f7df3..000000000\n--- a/Products/CMFPlone/skins/plone_scripts/isExpired.py\n+++ /dev/null\n@@ -1,15 +0,0 @@\n-## Script (Python) "isExpired"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=content=None\n-##title=Find out if the object is expired\n-\n-from Products.CMFPlone.utils import isExpired\n-\n-if not content:\n-    content = context\n-\n-return isExpired(content)\ndiff --git a/Products/CMFPlone/skins/plone_scripts/queryCatalog.py b/Products/CMFPlone/skins/plone_scripts/queryCatalog.py\nindex cb3a0510f..18681b053 100644\n--- a/Products/CMFPlone/skins/plone_scripts/queryCatalog.py\n+++ b/Products/CMFPlone/skins/plone_scripts/queryCatalog.py\n@@ -22,10 +22,16 @@\n if REQUEST is None:\n     REQUEST = context.REQUEST\n \n-# See http://dev.plone.org/plone/ticket/9422 for\n-# an explanation of \'\\u3000\'\n-multispace = u\'\\u3000\'.encode(\'utf-8\')\n-\n+# We should accept both a simple space, unicode u\'\\u0020 but also a\n+# multi-space, so called \'waji-kankaku\', unicode u\'\\u3000\'\n+# Stupid hack to find py-version since importing six or sys is forbidden.\n+try:\n+    # PY2\n+    u\'foo\'.decode(\'utf8\')\n+    multispace = u\'\\u3000\'.encode(\'utf-8\')\n+except AttributeError:\n+    # PY3\n+    multispace = u\'\\u3000\'\n \n def quotestring(s):\n     return \'"%s"\' % s\n@@ -38,7 +44,7 @@ def quotequery(s):\n         terms = s.split()\n     except ConflictError:\n         raise\n-    except:\n+    except Exception:\n         return s\n     tokens = (\'OR\', \'AND\', \'NOT\')\n     s_tokens = (\'OR\', \'AND\')\n@@ -104,7 +110,8 @@ def rootAtNavigationRoot(query):\n         else:\n             query[k] = v\n \n-for k, v in second_pass.items():\n+for k in second_pass.keys():\n+    v = second_pass[k]\n     qs = query.get(k)\n     if qs is None:\n         continue\ndiff --git a/Products/CMFPlone/skins/plone_scripts/unique.py b/Products/CMFPlone/skins/plone_scripts/unique.py\nindex 3786cdb37..ade6dbbc5 100644\n--- a/Products/CMFPlone/skins/plone_scripts/unique.py\n+++ b/Products/CMFPlone/skins/plone_scripts/unique.py\n@@ -44,7 +44,9 @@\n except TypeError:\n     del u  # move on to the next method\n else:\n-    return u.keys()\n+    u = list(u)\n+    u.sort()\n+    return u\n \n # We can\'t hash all the elements.  Second fastest is to sort,\n # which brings the equal elements together; then duplicates are\ndiff --git a/Products/CMFPlone/static/components/ace-builds/src/snippets/io.js b/Products/CMFPlone/static/components/ace-builds/src/snippets/io.js\nindex 743b5d2a1..51c216e16 100644\n--- a/Products/CMFPlone/static/components/ace-builds/src/snippets/io.js\n+++ b/Products/CMFPlone/static/components/ace-builds/src/snippets/io.js\n@@ -3,8 +3,8 @@ define("ace/snippets/io",["require","exports","module"], function(require, expor\n \n exports.snippets = [\n     {\n-        "content": "assertEquals(${1:expected}, ${2:expr})",\n-        "name": "assertEquals",\n+        "content": "assertEqual(${1:expected}, ${2:expr})",\n+        "name": "assertEqual",\n         "scope": "io",\n         "tabTrigger": "ae"\n     },\ndiff --git a/Products/CMFPlone/testing.py b/Products/CMFPlone/testing.py\nindex ebdbf93f3..b7f96ed80 100644\n--- a/Products/CMFPlone/testing.py\n+++ b/Products/CMFPlone/testing.py\n@@ -11,7 +11,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing.layers import FunctionalTesting\n from plone.app.testing.layers import IntegrationTesting\n-from plone.testing import z2\n+from plone.testing import zope\n from Products.CMFPlone.tests.robot.robot_setup import CMFPloneRemoteKeywords\n from Products.CMFPlone.tests.utils import MockMailHost\n from Products.MailHost.interfaces import IMailHost\n@@ -103,7 +103,7 @@ def tearDownPloneSite(self, portal):\n     bases=(\n         PRODUCTS_CMFPLONE_FIXTURE,\n         PRODUCTS_CMFPLONE_ROBOT_REMOTE_LIBRARY_FIXTURE,\n-        z2.ZSERVER_FIXTURE\n+        zope.WSGI_SERVER_FIXTURE\n     ),\n     name="CMFPloneLayer:Acceptance"\n )\ndiff --git a/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt b/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt\nindex abd67864d..bf0d378c5 100644\n--- a/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt\n+++ b/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt\n@@ -3,7 +3,7 @@ Adding, Editing, Moving and Deleting a Document\n \n Does what the title says, really.  Plus some assertions.\n \n-    >>> from plone.testing.z2 import Browser\n+    >>> from plone.testing.zope import Browser\n     >>> from plone.app.testing import SITE_OWNER_NAME\n     >>> from plone.app.testing import SITE_OWNER_PASSWORD\n     >>> app = layer[\'app\']\n@@ -116,7 +116,7 @@ We make sure the language is English at the beginning:\n \n And the content language is set to the default:\n \n-    >>> browser.headers.dict[\'content-language\']\n+    >>> browser.headers.get(\'content-language\')\n     \'en\'\n \n Now set the language to German:\n@@ -131,7 +131,7 @@ Now set the language to German:\n \n Make sure the content language was updated:\n \n-    >>> browser.headers.dict[\'content-language\']\n+    >>> browser.headers.get(\'content-language\')\n     \'de\'\n \n Cut and paste Document\ndiff --git a/Products/CMFPlone/tests/LoginAndLogout.rst b/Products/CMFPlone/tests/LoginAndLogout.rst\nindex b8df8bd25..0245fc5a1 100644\n--- a/Products/CMFPlone/tests/LoginAndLogout.rst\n+++ b/Products/CMFPlone/tests/LoginAndLogout.rst\n@@ -4,9 +4,9 @@ Logging in and out\n A very simple and underdocumented testbrowser test.  This is all about\n logging in and out.\n \n-    >>> from plone.testing.z2 import Browser\n-    >>> from plone.testing.z2 import login\n-    >>> from plone.testing.z2 import logout\n+    >>> from plone.testing.zope import Browser\n+    >>> from plone.testing.zope import login\n+    >>> from plone.testing.zope import logout\n     >>> from plone.app.testing import setRoles\n     >>> from plone.app.testing import SITE_OWNER_NAME\n     >>> from plone.app.testing import TEST_USER_ID\ndiff --git a/Products/CMFPlone/tests/PloneTestCase.py b/Products/CMFPlone/tests/PloneTestCase.py\nindex 7118b2b30..027cda1f2 100644\n--- a/Products/CMFPlone/tests/PloneTestCase.py\n+++ b/Products/CMFPlone/tests/PloneTestCase.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from plone.app.testing.bbb import PloneTestCase\n from plone.app.testing import PLONE_SITE_ID as portal_name\n from plone.app.testing import TEST_USER_ID as default_user\ndiff --git a/Products/CMFPlone/tests/base_tag_not_present.txt b/Products/CMFPlone/tests/base_tag_not_present.txt\nindex 428235f8d..786e5cec3 100644\n--- a/Products/CMFPlone/tests/base_tag_not_present.txt\n+++ b/Products/CMFPlone/tests/base_tag_not_present.txt\n@@ -4,7 +4,7 @@ Base Tag Not Present\n PLIP #13705 removed the <base> tag from rendered templates, here we\'ll check\n that in fact is not being injected in some other way.\n \n-  >>> from plone.testing.z2 import Browser\n+  >>> from plone.testing.zope import Browser\n   >>> from plone.app.testing import SITE_OWNER_NAME\n   >>> from plone.app.testing import SITE_OWNER_PASSWORD\n   >>> app = layer[\'app\']\ndiff --git a/Products/CMFPlone/tests/browser.txt b/Products/CMFPlone/tests/browser.txt\nindex f69a56e88..4e5bacb2b 100644\n--- a/Products/CMFPlone/tests/browser.txt\n+++ b/Products/CMFPlone/tests/browser.txt\n@@ -2,7 +2,7 @@ Browser tests\n =============\n Test the presence of the "title" tag in html page\n \n-    >>> from plone.testing.z2 import Browser\n+    >>> from plone.testing.zope import Browser\n     >>> from plone.app.testing import SITE_OWNER_NAME\n     >>> from plone.app.testing import SITE_OWNER_PASSWORD\n     >>> from plone.app.testing import TEST_USER_NAME\ndiff --git a/Products/CMFPlone/tests/browser_collection_views.txt b/Products/CMFPlone/tests/browser_collection_views.txt\nindex 263f12361..1410ef838 100644\n--- a/Products/CMFPlone/tests/browser_collection_views.txt\n+++ b/Products/CMFPlone/tests/browser_collection_views.txt\n@@ -9,7 +9,7 @@ summary_view (Summary view)\n full_view (All content)\n tabular_view (Tabular view)\n \n-    >>> from plone.testing.z2 import Browser\n+    >>> from plone.testing.zope import Browser\n     >>> from plone.app.testing import SITE_OWNER_NAME\n     >>> from plone.app.testing import SITE_OWNER_PASSWORD\n     >>> app = layer[\'app\']\ndiff --git a/Products/CMFPlone/tests/csrf.txt b/Products/CMFPlone/tests/csrf.txt\nindex 9d7a74b0d..c70b7ea65 100644\n--- a/Products/CMFPlone/tests/csrf.txt\n+++ b/Products/CMFPlone/tests/csrf.txt\n@@ -36,7 +36,7 @@ So first we need a logged in user with manager rights:\n   >>> from plone.app.testing import SITE_OWNER_PASSWORD\n   >>> from plone.app.testing import TEST_USER_NAME\n   >>> from plone.app.testing import TEST_USER_PASSWORD\n-  >>> from plone.testing.z2 import Browser\n+  >>> from plone.testing.zope import Browser\n   >>> browser = Browser(app)\n   >>> browser.handleErrors = False\n   >>> browser.open(\'http://nohost/plone/login_form\')\n@@ -84,7 +84,7 @@ unsuspectingly even clicks the button presented:\n   >>> browser.open(\'http://nohost/plone/@@new-user\', data)\n   Traceback (most recent call last):\n   ...\n-  Forbidden: Form authenticator is invalid.\n+  zExceptions.Forbidden: Form authenticator is invalid.\n   >>> bool(portal.acl_users.getUser(\'john\'))\n   False\n \n@@ -138,7 +138,7 @@ existing invalid, in which case submitting should yield an error:\n   >>> browser.getControl(\'Save\').click()\n   Traceback (most recent call last):\n   ...\n-  Forbidden: Form authenticator is invalid.\n+  zExceptions.Forbidden: Form authenticator is invalid.\n \n Next up is the password form.  Well, technically an attacker would need to\n know the current passwort to exploit this, but we\'ll check nevertheless:\n@@ -161,7 +161,7 @@ know the current passwort to exploit this, but we\'ll check nevertheless:\n   >>> browser.getControl(\'Change Password\').click()\n   Traceback (most recent call last):\n   ...\n-  Forbidden: Form authenticator is invalid.\n+  zExceptions.Forbidden: Form authenticator is invalid.\n   >>> browser.open(\'http://nohost/plone/logout\')\n \n On the admin side of things there\'s also the user preferences\n@@ -185,7 +185,7 @@ as its z3cform the portrait gets always modified because is IObject:\n   >>> browser.getControl(\'Save\').click()\n   Traceback (most recent call last):\n   ...\n-  Forbidden: Form authenticator is invalid.\n+  zExceptions.Forbidden: Form authenticator is invalid.\n \n \n More tests: Managing Users & Groups\n@@ -223,7 +223,7 @@ anymore (which at the same time tests the security control panel):\n   >>> browser.getControl(\'Save\').click()\n   Traceback (most recent call last):\n   ...\n-  Forbidden: Form authenticator is invalid.\n+  zExceptions.Forbidden: Form authenticator is invalid.\n \n Let\'s also try adding that user to a group:\n \n@@ -245,7 +245,7 @@ Let\'s also try adding that user to a group:\n   >>> browser.getControl(\'Add user to selected groups\').click()\n   Traceback (most recent call last):\n   ...\n-  Forbidden: Form authenticator is invalid.\n+  zExceptions.Forbidden: Form authenticator is invalid.\n \n There\'s an alternative way to adding a user to a group in which the group in\n question is selected first and the user can then be added via the "Group\n@@ -272,7 +272,7 @@ Members" tab:\n   >>> browser.getControl(\'Add selected groups and users to this group\').click()\n   Traceback (most recent call last):\n   ...\n-  Forbidden: Form authenticator is invalid.\n+  zExceptions.Forbidden: Form authenticator is invalid.\n \n \n More tests: Object Actions\n@@ -300,7 +300,7 @@ Now rename\n   >>> browser.getControl(name=\'form.buttons.Rename\').click()\n   Traceback (most recent call last):\n   ...\n-  Forbidden: Form authenticator is invalid.\n+  zExceptions.Forbidden: Form authenticator is invalid.\n \n   >>> browser.open(\'http://nohost/plone/a-folder/\')\n   >>> browser.getLink(\'Rename\').click()\n@@ -324,7 +324,7 @@ Now rename\n   >>> browser.getControl(\'Save\').click()\n   Traceback (most recent call last):\n   ...\n-  Forbidden\n+  zExceptions.Forbidden\n \n   >>> browser.getLink(\'Sharing\').click()\n   >>> browser.getControl(name=\'entries.role_Editor:records\').value = [\'True\']\n@@ -346,7 +346,7 @@ And finally removing the item again:\n   >>> browser.getControl(\'Delete\').click()\n   Traceback (most recent call last):\n   ...\n-  Forbidden: Form authenticator is invalid.\n+  zExceptions.Forbidden: Form authenticator is invalid.\n \n   >>> browser.reload()\n   >>> browser.getControl(\'Delete\').click()\n@@ -393,7 +393,7 @@ publishing process can be protected, though, so let\'s try this instead:\n   >>> browser.getControl(\'Save\').click()\n   Traceback (most recent call last):\n   ...\n-  Forbidden: Form authenticator is invalid.\n+  zExceptions.Forbidden: Form authenticator is invalid.\n \n \n More tests: Plone Control Panel\n@@ -419,7 +419,7 @@ so testing one of them already makes sure the protection works in most cases:\n browser.getControl(\'Save\').click()\n Traceback (most recent call last):\n ...\n-Forbidden: Form authenticator is invalid.\n+zExceptions.Forbidden: Form authenticator is invalid.\n \n Exceptions to the rule is the "Maintenance" configlet, which is tested\n separately. The "Maintenance" configlet has some special security\n@@ -428,9 +428,9 @@ limitations, which is why we need to log in as the portal owner first:\n   >>> app_browser = Browser(app)\n   >>> app_browser.handleErrors = False\n   >>> app.acl_users.userFolderAddUser(\'app\', \'secret\', [\'Manager\'], [])\n-  >>> from plone.testing import z2\n-  >>> z2.logout()\n-  >>> z2.login(app[\'acl_users\'], \'app\')\n+  >>> from plone.testing import zope\n+  >>> zope.logout()\n+  >>> zope.login(app[\'acl_users\'], \'app\')\n   >>> import transaction; transaction.commit()\n   >>> app_browser.addHeader(\'Authorization\', \'Basic app:secret\')\n   >>> app_browser.open(\'http://nohost/plone/@@overview-controlpanel\')\n@@ -440,4 +440,4 @@ limitations, which is why we need to log in as the portal owner first:\n   >>> app_browser.getControl(\'Shut down\').click()\n   Traceback (most recent call last):\n   ...\n-  Forbidden: Form authenticator is invalid.\n+  zExceptions.Forbidden: Form authenticator is invalid.\ndiff --git a/Products/CMFPlone/tests/dummy.py b/Products/CMFPlone/tests/dummy.py\nindex 31841fccd..0ce801116 100644\n--- a/Products/CMFPlone/tests/dummy.py\n+++ b/Products/CMFPlone/tests/dummy.py\n@@ -8,6 +8,7 @@\n from Products.CMFPlone.interfaces import INonStructuralFolder\n from Products.CMFPlone.interfaces import IWorkflowChain\n from six import StringIO\n+from six import BytesIO\n from zope.interface import implementer\n from zope.interface import Interface\n from ZPublisher.HTTPRequest import FileUpload\n@@ -15,11 +16,12 @@\n import os\n \n \n-TEXT = \'file data\'\n+TEXT = b\'file data\'\n UTEXT = u\'file data\'\n-GIF = open(os.path.join(os.path.dirname(__file__),\n-                        os.pardir,\n-                        \'tool.gif\')).read()\n+GIF_FILE = os.path.join(\n+    os.path.dirname(__file__), os.pardir, \'tool.gif\')\n+with open(GIF_FILE, \'rb\') as f:\n+    GIF = f.read()\n \n \n class Dummy:\n@@ -84,7 +86,7 @@ def __init__(self, filename=None, data=None, headers=None):\n             self.data = data\n         if headers is not None:\n             self.headers = headers\n-        self.file = StringIO(self.data)\n+        self.file = BytesIO(self.data)\n \n     def seek(self, *args):\n         pass\ndiff --git a/Products/CMFPlone/tests/emaillogin.rst b/Products/CMFPlone/tests/emaillogin.rst\nindex 3be215f64..94d414b1d 100644\n--- a/Products/CMFPlone/tests/emaillogin.rst\n+++ b/Products/CMFPlone/tests/emaillogin.rst\n@@ -8,7 +8,7 @@ unique across the site.\n \n Some bootstrapping::\n \n-    >>> from plone.testing.z2 import Browser\n+    >>> from plone.testing.zope import Browser\n     >>> app = layer[\'app\']\n     >>> portal = layer[\'portal\']\n     >>> browser = Browser(app)\n@@ -232,8 +232,8 @@ Now get the link::\n \n     >>> import quopri\n     >>> msg = quopri.decodestring(msg)\n-    >>> url_index = msg.index(\'http://nohost/plone/passwordreset/\')\n-    >>> address = msg[url_index:].split()[0]\n+    >>> url_index = msg.index(b\'http://nohost/plone/passwordreset/\')\n+    >>> address = msg[url_index:].split()[0].decode()\n \n Now that we have the address, we will reset our password::\n \n@@ -279,8 +279,8 @@ The email is sent to the correct email address::\n Now get the link::\n \n     >>> msg = quopri.decodestring(msg)\n-    >>> url_index = msg.index(\'http://nohost/plone/passwordreset/\')\n-    >>> address = msg[url_index:].split()[0]\n+    >>> url_index = msg.index(b\'http://nohost/plone/passwordreset/\')\n+    >>> address = msg[url_index:].split()[0].decode()\n \n Now that we have the address, we will reset our password::\n \ndiff --git a/Products/CMFPlone/tests/link_redirect_view.txt b/Products/CMFPlone/tests/link_redirect_view.txt\nindex ab0394e86..0ea493add 100644\n--- a/Products/CMFPlone/tests/link_redirect_view.txt\n+++ b/Products/CMFPlone/tests/link_redirect_view.txt\n@@ -24,7 +24,7 @@ First create a demo link::\n Now let\'s visit the link in the test browser.  Nothing should happen, because\n the \'redirect_links\' property is on by default::\n \n-  >>> from plone.testing.z2 import Browser\n+  >>> from plone.testing.zope import Browser\n   >>> from plone.app.testing import SITE_OWNER_NAME\n   >>> from plone.app.testing import SITE_OWNER_PASSWORD\n   >>> browser = Browser(app)\ndiff --git a/Products/CMFPlone/tests/mails.txt b/Products/CMFPlone/tests/mails.txt\nindex 1fad80d5e..8cd6665a8 100644\n--- a/Products/CMFPlone/tests/mails.txt\n+++ b/Products/CMFPlone/tests/mails.txt\n@@ -3,7 +3,7 @@ Mail related functional tests\n \n Some initial setup:\n \n-  >>> from plone.testing.z2 import Browser\n+  >>> from plone.testing.zope import Browser\n   >>> app = layer[\'app\']\n   >>> browser = Browser(app)\n \n@@ -19,10 +19,10 @@ Now fill in the form:\n \n   >>> form = browser.getForm(id=\'form\')\n \n-  >>> form.getControl(name=\'form.widgets.sender_fullname\').value = \'T\\xc3\\xa4st user\'\n+  >>> form.getControl(name=\'form.widgets.sender_fullname\').value = \'T\xc3\xa4st user\'\n   >>> form.getControl(name=\'form.widgets.sender_from_address\').value = \'test@plone.test\'\n-  >>> form.getControl(name=\'form.widgets.subject\').value = \'Some t\\xc3\\xa4st subject.\'\n-  >>> form.getControl(name=\'form.widgets.message\').value = \'Another t\\xc3\\xa4st message.\'\n+  >>> form.getControl(name=\'form.widgets.subject\').value = \'Some t\xc3\xa4st subject.\'\n+  >>> form.getControl(name=\'form.widgets.message\').value = \'Another t\xc3\xa4st message.\'\n \n And submit it:\n \n@@ -60,7 +60,7 @@ We expect the headers to be properly header encoded (7-bit):\n \n The output should be encoded in a reasonable manner (in this case\n quoted-printable).  There may be some small differences in where\n-exactly the lines are cut off, depending on whether you use five.pt \n+exactly the lines are cut off, depending on whether you use five.pt\n (in Zope 2.13) or not, so we turn the message into one line first:\n \n   >>> msg.replace(\'=\\n\', \'\').replace(\'\\n\', \' \')\n@@ -70,5 +70,5 @@ We can also decode the string, though we should still be careful about\n lines ending in different spots:\n \n   >>> import quopri\n-  >>> quopri.decodestring(msg).replace(\'\\n\', \' \')\n-  \'...Another t\\xc3\\xa4st message...You are receiving this mail because T\\xc3\\xa4st user test@plone.test...is sending feedback about the site you administer at...\'\n+  >>> quopri.decodestring(msg).replace(b\'\\n\', b\' \')\n+  b\'...Another t\\xc3\\xa4st message...You are receiving this mail because T\\xc3\\xa4st user test@plone.test...is sending feedback about the site you administer at...\'\ndiff --git a/Products/CMFPlone/tests/pwreset_browser.rst b/Products/CMFPlone/tests/pwreset_browser.rst\nindex f8187f877..5ba07c7bc 100644\n--- a/Products/CMFPlone/tests/pwreset_browser.rst\n+++ b/Products/CMFPlone/tests/pwreset_browser.rst\n@@ -8,7 +8,7 @@ Note that our usage of testbrowser is unusual and inconsistent, mostly\n because Plone forms have inconsistencies and because testbrowser makes\n assumptions that are not true for Plone forms.\n \n-  >>> from plone.testing.z2 import Browser\n+  >>> from plone.testing.zope import Browser\n   >>> from plone.app.testing import TEST_USER_NAME, TEST_USER_PASSWORD\n   >>> browser = Browser(layer[\'app\'])\n   >>> from plone.registry.interfaces import IRegistry\n@@ -196,18 +196,18 @@ then we extract the address that lets us reset our password:\n \n   >>> import quopri\n   >>> msg = quopri.decodestring(msg)\n-  >>> "To: jsmith@example.com" in msg\n+  >>> b"To: jsmith@example.com" in msg\n   True\n-  >>> "The site administrator asks you to reset your password for \'jsmith\' userid" in msg\n+  >>> b"The site administrator asks you to reset your password for \'jsmith\' userid" in msg\n   False\n-  >>> please_visit_text = "The following link will take you to a page where you can reset your password for Plone site site:"\n+  >>> please_visit_text = b"The following link will take you to a page where you can reset your password for Plone site site:"\n   >>> please_visit_text in msg\n   True\n   >>> url_index = msg.index(please_visit_text) + len(please_visit_text)\n-  >>> address = msg[url_index:].strip().split()[0]\n+  >>> address = msg[url_index:].strip().split()[0].decode()\n   >>> address # doctest: +ELLIPSIS\n-  \'http://nohost/plone/passwordreset/...\'\n-  >>> "If you didn\'t expect to receive this email" in msg\n+  u\'http://nohost/plone/passwordreset/...\'\n+  >>> b"If you didn\'t expect to receive this email" in msg\n   True\n \n Now that we have the address, we will reset our password:\n@@ -336,12 +336,12 @@ We should have received an e-mail at this point:\n   2\n   >>> import quopri\n   >>> msg = quopri.decodestring(str(mailhost.messages[-1]))\n-  >>> "The site administrator asks you to reset your password for \'wsmith\' userid" in msg\n+  >>> b"The site administrator asks you to reset your password for \'wsmith\' userid" in msg\n   True\n-  >>> please_visit_text = "The following link will take you to a page where you can reset your password for Plone site site:"\n+  >>> please_visit_text = b"The following link will take you to a page where you can reset your password for Plone site site:"\n   >>> please_visit_text in msg\n   True\n-  >>> "If you didn\'t expect to receive this email" in msg\n+  >>> b"If you didn\'t expect to receive this email" in msg\n   False\n \n \n@@ -408,9 +408,9 @@ then we extract the address that lets us reset our password:\n   >>> message["To"]\n   \'bsmith@example.com\'\n   >>> msgtext = quopri.decodestring(message.get_payload())\n-  >>> "Please activate it by visiting" in msgtext\n+  >>> b"Please activate it by visiting" in msgtext\n   True\n-  >>> address = re.search(\'(http://nohost/plone/passwordreset/[a-z0-9]+\\?userid=[\\w]*)\\s\', msgtext).groups()[0]\n+  >>> address = re.search(b\'(http://nohost/plone/passwordreset/[a-z0-9]+\\?userid=[\\w]*)\\s\', msgtext).groups()[0].decode()\n \n Now that we have the address, we will reset our password:\n \n@@ -491,9 +491,9 @@ then we extract the address that lets us reset our password:\n   >>> message["To"]\n   \'wwwsmith@example.com\'\n   >>> msgtext = quopri.decodestring(message.get_payload())\n-  >>> "Please activate it by visiting" in msgtext\n+  >>> b"Please activate it by visiting" in msgtext\n   True\n-  >>> address = re.search(\'(http://nohost/plone/passwordreset/[a-z0-9]+\\?userid=[\\w]*)\\s\', msgtext).groups()[0]\n+  >>> address = re.search(b\'(http://nohost/plone/passwordreset/[a-z0-9]+\\?userid=[\\w]*)\\s\', msgtext).groups()[0].decode()\n \n Now that we have the address, we will reset our password:\n \ndiff --git a/Products/CMFPlone/tests/redirection.txt b/Products/CMFPlone/tests/redirection.txt\nindex bfc8335b4..1b181ba3f 100644\n--- a/Products/CMFPlone/tests/redirection.txt\n+++ b/Products/CMFPlone/tests/redirection.txt\n@@ -11,7 +11,7 @@ getTypeInfo.\n \n We test this by starting up a test browser:\n \n-    >>> from plone.testing.z2 import Browser\n+    >>> from plone.testing.zope import Browser\n     >>> app = layer[\'app\']\n     >>> browser = Browser(app)\n \n@@ -30,11 +30,11 @@ And this flag does not, so it should raise a 404:\n \n But it should not give an error while rendering the default error page:\n \n-  >>> "the following error occurred while attempting to render the standard error message" in browser.contents\n+  >>> b"the following error occurred while attempting to render the standard error message" in browser.contents\n   False\n \n As it is an image, it should return a JSON message\n-  >>> \'{"error_type": "NotFound"}\' in browser.contents\n+  >>> b\'{"error_type": "NotFound"}\' in browser.contents\n   True\n \n A non-existing page would return a human readable error page\ndiff --git a/Products/CMFPlone/tests/robot/test_controlpanel_actions.robot b/Products/CMFPlone/tests/robot/test_controlpanel_actions.robot\nindex 1cd2e5f3f..4a302f030 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_actions.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_actions.robot\n@@ -59,7 +59,7 @@ Scenario: Delete an action in Actions Control Panel\n # --- GIVEN ------------------------------------------------------------------\n \n a logged-in administrator\n-  Enable autologin as   Manager\n+  Enable autologin as  Manager\n \n the actions control panel\n   Go to  ${PLONE_URL}/@@actions-controlpanel\ndiff --git a/Products/CMFPlone/tests/scripts.txt b/Products/CMFPlone/tests/scripts.txt\nindex 4664722bb..182b0127b 100644\n--- a/Products/CMFPlone/tests/scripts.txt\n+++ b/Products/CMFPlone/tests/scripts.txt\n@@ -16,8 +16,8 @@ Test a list of numbers which contains duplicates:\n \n Test a string sequence:\n \n-  >>> portal.unique(\'abcabc\')\n-  [\'a\', \'c\', \'b\']\n+  >>> portal.unique(\'abcabc\') == [\'a\', \'b\', \'c\']\n+  True\n \n And finally a tuple of lists:\n \ndiff --git a/Products/CMFPlone/tests/search_form.rst b/Products/CMFPlone/tests/search_form.rst\nindex c9de81faf..466e1a97c 100644\n--- a/Products/CMFPlone/tests/search_form.rst\n+++ b/Products/CMFPlone/tests/search_form.rst\n@@ -24,7 +24,7 @@ Check the member\'s properties\n Now we test the members\' search form\n \n     >>> import transaction; transaction.commit()\n-    >>> from plone.testing.z2 import Browser\n+    >>> from plone.testing.zope import Browser\n     >>> browser = Browser(app)\n     >>> portal_url = portal.absolute_url()\n     >>> logout_url = portal_url + \'/logout\'\ndiff --git a/Products/CMFPlone/tests/testActionsTool.py b/Products/CMFPlone/tests/testActionsTool.py\nindex 842cbbf01..6a44881d9 100644\n--- a/Products/CMFPlone/tests/testActionsTool.py\n+++ b/Products/CMFPlone/tests/testActionsTool.py\n@@ -1,13 +1,14 @@\n # -*- coding: utf-8 -*-\n-from plone.app.testing.bbb import PloneTestCase\n-\n-from traceback import format_exception\n-from zope.i18nmessageid.message import Message\n-\n from Acquisition import Explicit\n from OFS.SimpleItem import Item\n-from Products.CMFCore.ActionInformation import ActionInfo\n+from plone.app.testing import login\n from Products.CMFCore.ActionInformation import Action\n+from Products.CMFCore.ActionInformation import ActionInfo\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+from traceback import format_exception\n+from zope.i18nmessageid.message import Message\n+\n+import unittest\n \n \n class ExplicitItem(Item, Explicit):\n@@ -16,11 +17,16 @@ class ExplicitItem(Item, Explicit):\n     meta_type = \'Dummy Item\'\n \n \n-class TestActionsTool(PloneTestCase):\n+class TestActionsTool(unittest.TestCase):\n+\n+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.actions = self.portal.portal_actions\n         self.portal.acl_users._doAddUser(\'user1\', \'secret\', [\'Member\'], [])\n+        self.portal.invokeFactory(\'Folder\', \'f1\')\n+        self.folder = self.portal[\'f1\']\n \n     def fail_tb(self, msg):\n         """ special fail for capturing errors """\n@@ -86,8 +92,7 @@ def testDocumentActionsPermissionBug(self):\n         actions = self.actions.listFilteredActionsFor(self.folder)\n         match = [a for a in actions[\'document_actions\'] if a[\'id\'] == \'foo\']\n         self.assertTrue(match)\n-        self.portal.portal_workflow.doActionFor(self.folder, \'hide\')\n-        self.login(\'user1\')\n+        login(self.portal, \'user1\')\n         actions = self.actions.listFilteredActionsFor(self.folder)\n         match = [a for a in actions.get(\'document_actions\', [])\n                  if a[\'id\'] == \'foo\']\ndiff --git a/Products/CMFPlone/tests/testBatch.py b/Products/CMFPlone/tests/testBatch.py\nindex 8b317b7e6..47e2fed3f 100644\n--- a/Products/CMFPlone/tests/testBatch.py\n+++ b/Products/CMFPlone/tests/testBatch.py\n@@ -1,10 +1,12 @@\n # -*- coding: utf-8 -*-\n-from plone.app.testing.bbb import PloneTestCase\n from Products.CMFPlone.PloneBatch import Batch\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n from Products.ZCatalog.Lazy import LazyMap\n \n+import unittest\n \n-class TestBatch(PloneTestCase):\n+\n+class TestBatch(unittest.TestCase):\n \n     def test_batch_no_lazy(self):\n         batch = Batch(range(100), size=10, start=10)\n@@ -22,26 +24,42 @@ def get(key):\n \n         self.assertEqual(batch.numpages, 10)\n         self.assertEqual(batch.pagenumber, 9)\n-        self.assertEqual(batch.navlist, [6, 7, 8, 9, 10])\n+        self.assertEqual(batch.navlist, range(6, 11))\n         self.assertEqual(batch.leapback, [])\n-        self.assertEqual(batch.prevlist, [6, 7, 8])\n+        self.assertEqual(batch.prevlist, range(6, 9))\n         self.assertEqual(batch.previous.length, 10)\n         self.assertEqual(batch.next.length, 5)\n         self.assertEqual(batch.pageurl({}), \'b_start:int=80\')\n-        self.assertEqual(\n-            batch.prevurls({}),\n-            [(6, \'b_start:int=50\'), (7, \'b_start:int=60\'),\n-             (8, \'b_start:int=70\')])\n-        self.assertEqual(batch.nexturls({}), [(10, \'b_start:int=90\')])\n+        self.assertListEqual(\n+            list(batch.prevurls({})),\n+            [\n+                (6, \'b_start:int=50\'),\n+                (7, \'b_start:int=60\'),\n+                (8, \'b_start:int=70\'),\n+            ]\n+        )\n+        self.assertListEqual(\n+            list(batch.nexturls({})),\n+            [(10, \'b_start:int=90\')],\n+        )\n \n-    def test_batch_brains(self):\n-        self.loginAsPortalOwner()\n-        portal = self.portal\n \n-        for obj_id in [\'%stest\' % chr(c) for c in range(97, 123)]:\n+class TestBatchIntegration(unittest.TestCase):\n+\n+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+\n+    def test_batch_brains(self):\n+        portal = self.layer[\'portal\']\n+        obj_ids = [\'%stest\' % chr(c) for c in range(97, 123)]\n+        for obj_id in obj_ids:\n             portal.invokeFactory(\'Document\', obj_id)\n \n         brains = portal.portal_catalog.searchResults(portal_type=\'Document\',\n                                                      sort_on=\'id\')\n-        batch = Batch(brains, size=10, start=10)\n-        self.assertEqual(batch[0].id, \'jtest\')\n+        for start in (0, 1, 2, 10):\n+            batch = Batch(brains, size=0, start=start)\n+            self.assertEqual(\n+                batch[0].id,\n+                obj_ids[start],\n+                \'Failing test for start value: {}\'.format(start)\n+            )\ndiff --git a/Products/CMFPlone/tests/testBrowserAdmin.py b/Products/CMFPlone/tests/testBrowserAdmin.py\nindex 7c816b39e..5c806f7de 100644\n--- a/Products/CMFPlone/tests/testBrowserAdmin.py\n+++ b/Products/CMFPlone/tests/testBrowserAdmin.py\n@@ -1,27 +1,32 @@\n # -*- coding: utf-8 -*-\n-from AccessControl import getSecurityManager\n-from AccessControl import Permissions\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n-from Products.CMFCore.permissions import AddPortalContent\n-from Products.CMFCore.permissions import ModifyPortalContent\n-from Products.CMFPlone.tests import PloneTestCase\n-from Products.PluggableAuthService.interfaces.plugins import IChallengePlugin\n+from plone.testing.zope import Browser\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+from zope.testbrowser.browser import HostNotAllowed\n \n-import os\n+import unittest\n \n \n-class TestPloneRootLoginURL(PloneTestCase.FunctionalTestCase):\n+class TestPloneRootLoginURL(unittest.TestCase):\n \n-    def test_normal_redirect(self):\n-        url = \'@@plone-root-login?came_from=%s\' % self.portal.absolute_url()\n-        response = self.publish(\n-            url,\n-            basic=\'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-            handle_errors=False,\n+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.app = self.layer[\'app\']\n+        self.browser = Browser(self.app)\n+        self.browser.handleErrors = False\n+        self.browser.addHeader(\n+            \'Authorization\',\n+            \'Basic %s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n         )\n-        self.assertNotEqual(response.headers.get(\'location\'), None)\n-        self.assertEqual(response.headers.get(\'location\'),\n+\n+    def test_normal_redirect(self):\n+        url = \'/@@plone-root-login?came_from=%s\' % self.portal.absolute_url()\n+        self.browser.open(self.app.absolute_url() + url)\n+        self.assertNotEqual(self.browser.url, None)\n+        self.assertEqual(self.browser.url,\n                          self.portal.absolute_url())\n \n     def test_attacker_redirect(self):\n@@ -31,13 +36,5 @@ def test_attacker_redirect(self):\n         )\n         for attacker in attackers:\n             url = \'@@plone-root-login?came_from=%s\' % attacker\n-            response = self.publish(\n-                url,\n-                basic=\'%s:%s\' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n-                handle_errors=False,\n-            )\n-            self.assertNotEqual(response.headers.get(\'location\'), None)\n-            self.assertNotEqual(response.headers.get(\'location\'), attacker)\n-            # Whatever the url is, it starts with the Zope root url.\n-            self.assertTrue(response.headers.get(\'location\').startswith(\n-                self.app.absolute_url()), response.headers.get(\'location\'))\n+            with self.assertRaises(HostNotAllowed):\n+                self.browser.open(self.app.absolute_url() + url)\ndiff --git a/Products/CMFPlone/tests/testBrowserDefault.py b/Products/CMFPlone/tests/testBrowserDefault.py\nindex fbf4baabf..335eb8873 100644\n--- a/Products/CMFPlone/tests/testBrowserDefault.py\n+++ b/Products/CMFPlone/tests/testBrowserDefault.py\n@@ -6,21 +6,23 @@\n from plone.app.testing import setRoles\n from plone.namedfile.file import NamedBlobFile\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n from Products.CMFPlone.utils import _createObjectByType\n+from Products.CMFPlone.utils import safe_nativestring\n from Products.CMFPlone.PloneFolder import ReplaceableWrapper\n from zope.component import getUtility\n+\n import difflib\n import re\n import transaction\n import unittest\n \n-RE_REMOVE_DOCCONT = re.compile(\'\\s*href="http://.*?#content"\')\n-RE_REMOVE_SKIPNAV = re.compile(\'\\s*href="http://.*?#portal-globalnav-wrapper"\')\n-RE_REMOVE_TABS = re.compile(\'<div id="portal-header".*?</nav>\', re.S)\n-RE_REMOVE_AUTH = re.compile(\'\\_authenticator\\=.*?\\"\', re.S)\n+RE_REMOVE_DOCCONT = re.compile(r\'\\s*href="http://.*?#content"\')\n+RE_REMOVE_SKIPNAV = re.compile(r\'\\s*href="http://.*?#portal-globalnav-wrapper"\')\n+RE_REMOVE_TABS = re.compile(r\'<div id="portal-header".*?</nav>\', re.S)\n+RE_REMOVE_AUTH = re.compile(r\'\\_authenticator\\=.*?\\"\', re.S)\n \n \n class TestPloneToolBrowserDefault(unittest.TestCase):\n@@ -79,7 +81,8 @@ def compareLayoutVsView(self, obj, path="", viewaction=None):\n         transaction.commit()\n \n         self.browser.open(obj.absolute_url() + path)\n-        body = self.browser.contents.decode(\'utf8\')\n+        body = safe_nativestring(self.browser.contents)\n+        resolved = safe_nativestring(resolved)\n \n         # request/ACTUAL_URL is fubar in tests, remove lines that depend on it\n         resolved = RE_REMOVE_DOCCONT.sub(\'\', resolved)\n@@ -161,7 +164,8 @@ def testBrowserDefaultMixinFileViewMethodGetsTemplate(self):\n \n     def testBrowserDefaultMixinFileDumpsContent(self):\n         self.browser.open(self.portal.file.absolute_url())\n-        self.assertEqual(self.browser.contents, self.portal.file.file.data)\n+        data = self.portal.file.file.data\n+        self.assertEqual(self.browser.contents.encode(\'utf8\'), data)\n \n     # Ensure index_html acquisition and replaceablewrapper\n \ndiff --git a/Products/CMFPlone/tests/testCSRFProtection.py b/Products/CMFPlone/tests/testCSRFProtection.py\nindex 92b4180d5..de3116eb1 100644\n--- a/Products/CMFPlone/tests/testCSRFProtection.py\n+++ b/Products/CMFPlone/tests/testCSRFProtection.py\n@@ -5,7 +5,7 @@\n from plone.app.testing.bbb import PloneTestCase\n from plone.keyring.interfaces import IKeyManager\n from plone.protect.authenticator import AuthenticatorView\n-from six import StringIO\n+from six import BytesIO\n from zope.component import queryUtility\n \n \n@@ -20,7 +20,7 @@ def test_KeyManager(self):\n     def checkAuthenticator(self, path, query=\'\', status=200):\n         credentials = \'%s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD)\n         path = \'/\' + self.portal.absolute_url(relative=True) + path\n-        data = StringIO(query)\n+        data = BytesIO(query.encode(\'utf8\'))\n         # without authenticator...\n         response = self.publish(path=path, basic=credentials, env={},\n                                 request_method=\'POST\', stdin=data)\n@@ -28,7 +28,8 @@ def checkAuthenticator(self, path, query=\'\', status=200):\n         # with authenticator...\n         tag = AuthenticatorView(\'context\', \'request\').authenticator()\n         token = tag.split(\'"\')[5]\n-        data = StringIO(query + \'&_authenticator=%s\' % token)\n+        query = query + \'&_authenticator=%s\' % token\n+        data = BytesIO(query.encode(\'utf8\'))\n         response = self.publish(path=path, basic=credentials, env={},\n                                 request_method=\'POST\', stdin=data)\n         self.assertEqual(response.getStatus(), status)\ndiff --git a/Products/CMFPlone/tests/testCSSandJSRegistry.py b/Products/CMFPlone/tests/testCSSandJSRegistry.py\nindex cfb8d4c55..d8c249fbc 100644\n--- a/Products/CMFPlone/tests/testCSSandJSRegistry.py\n+++ b/Products/CMFPlone/tests/testCSSandJSRegistry.py\n@@ -46,7 +46,7 @@ def testBundleIsInstalled(self):\n     def testJSIsInsertedInPage(self):\n         self.registry[\'plone.resources.development\'] = True\n         self.registry[\'plone.bundles/plone.develop_css\'] = True\n-        page = self.portal.index_html()\n+        page = self.portal.view()\n         self.assertTrue(\'++plone++static/plone.less\' in page)\n \n \n@@ -70,5 +70,5 @@ def testDefaultJSIsInstalled(self):\n     def testJSIsInsertedInPage(self):\n         self.registry[\'plone.resources.development\'] = True\n         self.registry[\'plone.bundles/plone.develop_javascript\'] = True\n-        page = self.portal.index_html()\n+        page = self.portal.view()\n         self.assertTrue(\'++resource++plone.js\' in page)\ndiff --git a/Products/CMFPlone/tests/testCatalogTool.py b/Products/CMFPlone/tests/testCatalogTool.py\nindex fdf695cc8..5f491ef7e 100644\n--- a/Products/CMFPlone/tests/testCatalogTool.py\n+++ b/Products/CMFPlone/tests/testCatalogTool.py\n@@ -6,6 +6,8 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n+from plone.app.textfield import RichTextValue\n+from plone.dexterity.content import CEILING_DATE\n from plone.indexer.wrapper import IndexableObjectWrapper\n from plone.uuid.interfaces import IAttributeUUID\n from plone.uuid.interfaces import IUUID\n@@ -102,10 +104,10 @@ def testEffectiveIsDateIndex(self):\n         self.assertEqual(self.catalog.Indexes[\'effective\'].__class__.__name__,\n                          \'DateIndex\')\n \n-    def testEndIsDateIndex(self):\n-        # end should be a DateIndex\n+    def testEndIsDateRecurringIndex(self):\n+        # end should be a DateRecurringIndex\n         self.assertEqual(self.catalog.Indexes[\'end\'].__class__.__name__,\n-                         \'DateIndex\')\n+                         \'DateRecurringIndex\')\n \n     def testExpiresIsDateIndex(self):\n         # expires should be a DateIndex\n@@ -117,10 +119,10 @@ def testModifiedIsDateIndex(self):\n         self.assertEqual(self.catalog.Indexes[\'modified\'].__class__.__name__,\n                          \'DateIndex\')\n \n-    def testStartIsDateIndex(self):\n-        # start should be a DateIndex\n+    def testStartIsDateRecurringIndex(self):\n+        # start should be a DateRecurringIndex\n         self.assertEqual(self.catalog.Indexes[\'start\'].__class__.__name__,\n-                         \'DateIndex\')\n+                         \'DateRecurringIndex\')\n \n     def testEffectiveRangeIsDateRangeIndex(self):\n         # effectiveRange should be a DateRangeIndex\n@@ -334,7 +336,8 @@ def testClearFindAndRebuildAddsMissingContent(self):\n     def testClearFindAndRebuildKeepsModificationDate(self):\n         # Index the doc for consistency\n         self.catalog.indexObject(self.folder.doc)\n-        self.folder.doc.setModificationDate(DateTime(0))\n+        self.folder.doc.modification_date = DateTime(0)\n+        # FIXME: Index the doc for consistency\n         self.catalog.clearFindAndRebuild()\n         self.assertEqual(self.folder.doc.modified(), DateTime(0))\n         self.assertEqual(len(self.catalog(modified=DateTime(0))), 1)\n@@ -497,11 +500,18 @@ def testSearchIgnoreAccents(self):\n         """PLIP 12110\n         """\n         self.folder.invokeFactory(\n-            \'Document\', id=\'docwithaccents-1\', text=\'Econom\xc3\xa9trie\', title=\'foo\')\n+            \'Document\',\n+            id=\'docwithaccents-1\',\n+            text=RichTextValue(\'Econom\xc3\xa9trie\', \'text/html\', \'text/x-html-safe\'),\n+            title=\'foo\')\n         self.folder.invokeFactory(\n-            \'Document\', id=\'docwithaccents-2\', text=\'\xc3\x89conom\xc3\xa9trie\')\n+            \'Document\',\n+            id=\'docwithaccents-2\',\n+            text=RichTextValue(\'\xc3\x89conom\xc3\xa9trie\', \'text/html\', \'text/x-html-safe\'))\n         self.folder.invokeFactory(\n-            \'Document\', id=\'docwithout-accents\', text=\'ECONOMETRIE\')\n+            \'Document\',\n+            id=\'docwithout-accents\',\n+            text=RichTextValue(\'ECONOMETRIE\', \'text/html\', \'text/x-html-safe\'))\n \n         self.assertEqual(len(self.catalog(SearchableText=\'\xc3\x89conom\xc3\xa9trie\')), 3)\n         self.assertEqual(len(self.catalog(SearchableText=\'Econom\xc3\xa9trie\')), 3)\n@@ -522,18 +532,18 @@ class TestCatalogSorting(PloneTestCase):\n     def afterSetUp(self):\n         self.catalog = self.portal.portal_catalog\n \n-        self.folder.invokeFactory(\'Document\', id=\'doc\', text=\'foo\')\n+        self.folder.invokeFactory(\'Document\', id=\'doc\', text=RichTextValue(\'foo\', \'text/html\', \'text/x-html-safe\'))\n         self.folder.doc.setTitle(\'12 Document 25\')\n-        self.folder.invokeFactory(\'Document\', id=\'doc2\', text=\'foo\')\n+        self.folder.invokeFactory(\'Document\', id=\'doc2\', text=RichTextValue(\'foo\', \'text/html\', \'text/x-html-safe\'))\n         self.folder.doc2.setTitle(\'3 Document 4\')\n-        self.folder.invokeFactory(\'Document\', id=\'doc3\', text=\'foo\')\n+        self.folder.invokeFactory(\'Document\', id=\'doc3\', text=RichTextValue(\'foo\', \'text/html\', \'text/x-html-safe\'))\n         self.folder.doc3.setTitle(\'12 Document 4\')\n \n-        self.folder.invokeFactory(\'Document\', id=\'doc4\', text=\'bar\')\n+        self.folder.invokeFactory(\'Document\', id=\'doc4\', text=RichTextValue(\'bar\', \'text/html\', \'text/x-html-safe\'))\n         self.folder.doc4.setTitle(\'document 12\')\n-        self.folder.invokeFactory(\'Document\', id=\'doc5\', text=\'bar\')\n+        self.folder.invokeFactory(\'Document\', id=\'doc5\', text=RichTextValue(\'bar\', \'text/html\', \'text/x-html-safe\'))\n         self.folder.doc5.setTitle(\'Document 2\')\n-        self.folder.invokeFactory(\'Document\', id=\'doc6\', text=\'bar\')\n+        self.folder.invokeFactory(\'Document\', id=\'doc6\', text=RichTextValue(\'bar\', \'text/html\', \'text/x-html-safe\'))\n         self.folder.doc6.setTitle(\'DOCUMENT 4\')\n         self.folder.doc.reindexObject()\n         self.folder.doc2.reindexObject()\n@@ -575,9 +585,9 @@ def testSortableTitleOutput(self):\n     def testSortableNonASCIITitles(self):\n         # test a utf-8 encoded string gets properly unicode converted\n         # sort must ignore accents\n-        title = \'La Pe\\xc3\\xb1a\'\n+        title = b\'La Pe\\xc3\\xb1a\'\n         doc = self.folder.doc\n-        doc.setTitle(title)\n+        doc.title = title.decode(\'utf-8\')\n         wrapped = IndexableObjectWrapper(doc, self.portal.portal_catalog)\n         self.assertEqual(wrapped.sortable_title, \'la pena\')\n \n@@ -991,9 +1001,6 @@ def assertResults(self, result, expect):\n         rhs.sort()\n         self.assertEqual(lhs, rhs)\n \n-    def testCeilingPatch(self):\n-        self.assertEqual(self.folder.doc.expires(), DateTime(2500, 0))\n-\n     def testSearchResults(self):\n         res = self.catalog.searchResults()\n         self.assertResults(res, base_content)\n@@ -1296,13 +1303,20 @@ def test_provided(self):\n         self.assertTrue(IIndexableObjectWrapper.providedBy(w))\n         self.assertTrue(IContentish.providedBy(w))\n \n-    def test_getObjSize(self):\n+    def test_getObjSize_KB(self):\n         from Products.CMFPlone.CatalogTool import getObjSize\n         get_size = getObjSize.callable\n-        self.doc.setText(u\'a\' * 1000)\n+        self.doc.text = RichTextValue(\'a\' * 1000)\n         self.doc.reindexObject()\n         self.assertEqual(get_size(self.doc), \'1 KB\')\n \n+    def test_getObjSize_MB(self):\n+        from Products.CMFPlone.CatalogTool import getObjSize\n+        get_size = getObjSize.callable\n+        self.doc.text = RichTextValue(\'a\' * 6000000)\n+        self.doc.reindexObject()\n+        self.assertEqual(get_size(self.doc), \'5.7 MB\')\n+\n     def test_uuid(self):\n         alsoProvides(self.doc, IAttributeUUID)\n         notify(ObjectCreatedEvent(self.doc))\n@@ -1313,17 +1327,6 @@ def test_uuid(self):\n         self.assertTrue(uuid == wrapped.UID)\n \n \n-class TestMetadata(PloneTestCase):\n-\n-    def testLocationAddedToMetdata(self):\n-        self.folder.invokeFactory(\n-            \'Document\', \'doc\', title=\'document\', location="foobar")\n-        doc = self.folder.doc\n-        catalog = self.portal.portal_catalog\n-        brain = catalog(UID=doc.UID())[0]\n-        self.assertEqual(brain.location, doc.getLocation())\n-\n-\n class TestObjectProvidedIndexExtender(unittest.TestCase):\n \n     def _index(self, object):\ndiff --git a/Products/CMFPlone/tests/testCheckId.py b/Products/CMFPlone/tests/testCheckId.py\nindex 9e961a369..c811b21c9 100644\n--- a/Products/CMFPlone/tests/testCheckId.py\n+++ b/Products/CMFPlone/tests/testCheckId.py\n@@ -3,6 +3,7 @@\n from plone.app.testing.bbb import PloneTestCase\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.tests import dummy\n+from Products.CMFPlone.utils import check_id\n from ZODB.POSException import ConflictError\n \n \n@@ -48,29 +49,29 @@ def testValidPortalTypeNameButNotAutoGeneratedId(self):\n class TestCheckId(PloneTestCase):\n \n     def testGoodId(self):\n-        r = self.folder.check_id(\'foo\')\n+        r = check_id(self.folder, \'foo\')\n         self.assertEqual(r, None)   # success\n \n     def testEmptyId(self):\n-        r = self.folder.check_id(\'\')\n+        r = check_id(self.folder, \'\')\n         self.assertEqual(r, None)   # success\n \n     def testRequiredId(self):\n-        r = self.folder.check_id(\'\', required=1)\n+        r = check_id(self.folder, \'\', required=1)\n         self.assertEqual(r, u\'Please enter a name.\')\n \n     def testAlternativeId(self):\n-        r = self.folder.check_id(\'\', alternative_id=\'foo\')\n+        r = check_id(self.folder, \'\', alternative_id=\'foo\')\n         self.assertEqual(r, None)   # success\n \n     def testBadId(self):\n         # See https://github.com/zopefoundation/Zope/pull/181\n-        r = self.folder.check_id(\'=\')\n+        r = check_id(self.folder, \'=\')\n         self.assertEqual(r, None)\n \n     def testDecodeId(self):\n         # See https://github.com/zopefoundation/Zope/pull/181\n-        r = self.folder.check_id(\'\\xc3\\xa4\')\n+        r = check_id(self.folder, \'\\xc3\\xa4\')\n         self.assertEqual(r, None)\n \n     def testCatalogIndex(self):\n@@ -81,7 +82,7 @@ def testCatalogIndex(self):\n                                         self.portal.portal_catalog),\n                         \'Expected permission "Search ZCatalog"\')\n \n-        r = self.folder.check_id(\'created\')\n+        r = check_id(self.folder, \'created\')\n         self.assertEqual(r, u\'created is reserved.\')\n \n     def testCatalogMetadata(self):\n@@ -89,80 +90,83 @@ def testCatalogMetadata(self):\n         portal_catalog.addColumn(\'new_metadata\')\n         self.assertTrue(\'new_metadata\' in portal_catalog.schema())\n         self.assertFalse(\'new_metadata\' in portal_catalog.indexes())\n-        r = self.folder.check_id(\'new_metadata\')\n+        r = check_id(self.folder, \'new_metadata\')\n         self.assertEqual(r, u\'new_metadata is reserved.\')\n \n     def testCollision(self):\n         self.folder.invokeFactory(\'Document\', id=\'foo\')\n         self.folder.invokeFactory(\'Document\', id=\'bar\')\n-        r = self.folder.foo.check_id(\'bar\')\n+        r = check_id(self.folder.foo, \'bar\')\n         self.assertEqual(r, u\'There is already an item named bar in this \'\n                             u\'folder.\')\n \n-    def testTempObjectCollision(self):\n-        foo = self.folder.restrictedTraverse(\'portal_factory/Document/foo\')\n-        self.folder._setObject(\'bar\', dummy.Item(\'bar\'))\n-        r = foo.check_id(\'bar\')\n-        self.assertEqual(r, u\'bar is reserved.\')\n+    # def testTempObjectCollision(self):\n+    #     # foo = self.folder.restrictedTraverse(\'portal_factory/Document/foo\')\n+    #     from plone.dexterity.utils import createContent\n+    #     foo = createContent(\'Document\', id=\'foo\')\n+    #     self.folder._setObject(\'bar\', dummy.Item(\'bar\'))\n+    #     r = check_id(foo, \'bar\')\n+    #     self.assertEqual(r, u\'bar is reserved.\')\n \n     def testReservedId(self):\n         self.folder._setObject(\'foo\', dummy.Item(\'foo\'))\n-        r = self.folder.foo.check_id(\'portal_catalog\')\n+        r = check_id(self.folder.foo, \'portal_catalog\')\n         self.assertEqual(r, u\'portal_catalog is reserved.\')\n \n     def testHiddenObjectId(self):\n         # If a parallel object is not in content-space, should get \'reserved\'\n         # instead of \'taken\'\n-        r = self.folder.check_id(\'portal_skins\')\n+        r = check_id(self.folder, \'portal_skins\')\n         self.assertEqual(r, u\'portal_skins is reserved.\')\n \n     def testCanOverrideParentNames(self):\n         self.folder.invokeFactory(\'Document\', id=\'item1\')\n         self.folder.invokeFactory(\'Folder\', id=\'folder1\')\n         self.folder.invokeFactory(\'Document\', id=\'foo\')\n-        r = self.folder.folder1.foo.check_id(\'item1\')\n+        r = check_id(self.folder.folder1.foo, \'item1\')\n         self.assertEqual(r, None)\n \n     def testInvalidId(self):\n         self.folder._setObject(\'foo\', dummy.Item(\'foo\'))\n-        r = self.folder.foo.check_id(\'_foo\')\n+        r = check_id(self.folder.foo, \'_foo\')\n         self.assertEqual(r, u\'_foo is reserved.\')\n \n     def testContainerHook(self):\n         # Container may have a checkValidId method; make sure it is called\n         self.folder._setObject(\'checkValidId\', dummy.Raiser(dummy.Error))\n         self.folder._setObject(\'foo\', dummy.Item(\'foo\'))\n-        r = self.folder.foo.check_id(\'whatever\')\n+        r = check_id(self.folder.foo, \'whatever\')\n         self.assertEqual(r, u\'whatever is reserved.\')\n \n     def testContainerHookRaisesUnauthorized(self):\n         # check_id should not swallow Unauthorized errors raised by hook\n         self.folder._setObject(\'checkValidId\', dummy.Raiser(Unauthorized))\n         self.folder._setObject(\'foo\', dummy.Item(\'foo\'))\n-        self.assertRaises(Unauthorized, self.folder.foo.check_id, \'whatever\')\n+        self.assertRaises(Unauthorized, check_id(self.folder.foo), \'whatever\')\n \n     def testContainerHookRaisesConflictError(self):\n         # check_id should not swallow ConflictErrors raised by hook\n         self.folder._setObject(\'checkValidId\', dummy.Raiser(ConflictError))\n         self.folder._setObject(\'foo\', dummy.Item(\'foo\'))\n-        self.assertRaises(ConflictError, self.folder.foo.check_id, \'whatever\')\n+        self.assertRaises(ConflictError, check_id(self.folder.foo), \'whatever\')\n \n     def testMissingUtils(self):\n         # check_id should not bomb out if the plone_utils tool is missing\n         self.portal._delObject(\'plone_utils\')\n-        r = self.folder.check_id(\'foo\')\n+        r = check_id(self.folder, \'foo\')\n         self.assertEqual(r, None)   # success\n \n     def testMissingCatalog(self):\n         # check_id should not bomb out if the portal_catalog tool is missing\n         self.portal._delObject(\'portal_catalog\')\n-        r = self.folder.check_id(\'foo\')\n+        r = check_id(self.folder, \'foo\')\n         self.assertEqual(r, None)   # success\n \n     def testMissingFactory(self):\n         # check_id should not bomb out if the portal_factory tool is missing\n-        self.portal._delObject(\'portal_factory\')\n-        r = self.folder.check_id(\'foo\')\n+        if \'portal_factory\' in self.portal:\n+            self.portal._delObject(\'portal_factory\')\n+        r = check_id(self.folder, \'foo\')\n         self.assertEqual(r, None)   # success\n \n     def testCatalogIndexSkipped(self):\n@@ -171,20 +175,25 @@ def testCatalogIndexSkipped(self):\n         self.portal.manage_permission(\'Search ZCatalog\', [\'Manager\'],\n                                       acquire=0)\n \n-        r = self.folder.check_id(\'created\')\n+        r = check_id(self.folder, \'created\')\n         # But now the final hasattr check picks this up\n         self.assertEqual(r, u\'created is reserved.\')\n \n-    def testCollisionSkipped(self):\n-        # Note that check is skipped when we don\'t have\n+    def testCollisionNotSkipped(self):\n+        # Note that the existing object check is done, even when we don\'t have\n         # the "Access contents information" permission.\n+        # This used to be the other way around.  The reason got lost.\n+        # Probably this was because the permission was checked automatically\n+        # because check_id was a skin script.  Since Plone 5.2 it is a\n+        # function which cannot be accessed from the web or templates,\n+        # so the permission test seems unneeded.\n         self.folder.manage_permission(\'Access contents information\', [],\n                                       acquire=0)\n \n         self.folder._setObject(\'foo\', dummy.Item(\'foo\'))\n         self.folder._setObject(\'bar\', dummy.Item(\'bar\'))\n-        r = self.folder.foo.check_id(\'bar\')\n-        self.assertEqual(r, None)   # success\n+        r = check_id(self.folder.foo, \'bar\')\n+        self.assertEqual(r, u\'bar is reserved.\')\n \n     def testReservedIdSkipped(self):\n         # This check is picked up by the checkIdAvailable, unless we don\'t have\n@@ -193,7 +202,7 @@ def testReservedIdSkipped(self):\n         self.folder.manage_permission(\'Add portal content\', [], acquire=0)\n \n         self.folder._setObject(\'foo\', dummy.Item(\'foo\'))\n-        r = self.folder.foo.check_id(\'portal_catalog\')\n+        r = check_id(self.folder.foo, \'portal_catalog\')\n         self.assertEqual(r, u\'portal_catalog is reserved.\')\n \n     def testInvalidIdSkipped(self):\n@@ -202,7 +211,7 @@ def testInvalidIdSkipped(self):\n         self.folder.manage_permission(\'Add portal content\', [], acquire=0)\n \n         self.folder._setObject(\'foo\', dummy.Item(\'foo\'))\n-        r = self.folder.foo.check_id(\'_foo\')\n+        r = check_id(self.folder.foo, \'_foo\')\n         self.assertEqual(r, None)   # success\n \n     def testParentMethodAliasDisallowed(self):\n@@ -213,7 +222,7 @@ def testParentMethodAliasDisallowed(self):\n \n         self.folder._setObject(\'foo\', dummy.Item(\'foo\'))\n         for alias in self.folder.getTypeInfo().getMethodAliases().keys():\n-            r = self.folder.foo.check_id(alias)\n+            r = check_id(self.folder.foo, alias)\n             self.assertEqual(r, u\'%s is reserved.\' % alias)\n \n     def testCheckingMethodAliasesOnPortalRoot(self):\n@@ -225,15 +234,6 @@ def testCheckingMethodAliasesOnPortalRoot(self):\n         # Should not raise: Before we were using obj.getTypeInfo(), which is\n         # not defined on the portal root.\n         try:\n-            self.portal.check_id(\'foo\')\n+            check_id(self.portal, \'foo\')\n         except AttributeError as e:\n             self.fail(e)\n-\n-    def testProxyRoles(self):\n-        # Proxy roles should cover missing view permission for all but the\n-        # most unusual workflows.\n-        proxy_roles = self.folder.check_id._proxy_roles\n-        self.assertTrue(\'Manager\' in proxy_roles)\n-        self.assertTrue(\'Owner\' in proxy_roles)\n-        self.assertTrue(\'Authenticated\' in proxy_roles)\n-        self.assertTrue(\'Anonymous\' in proxy_roles)\ndiff --git a/Products/CMFPlone/tests/testContentPublishing.py b/Products/CMFPlone/tests/testContentPublishing.py\nindex 30838929a..aedf3afe0 100644\n--- a/Products/CMFPlone/tests/testContentPublishing.py\n+++ b/Products/CMFPlone/tests/testContentPublishing.py\n@@ -3,6 +3,7 @@\n # code inspired by Ween\n \n from Products.CMFPlone.tests.PloneTestCase import PloneTestCase\n+from Products.CMFPlone.utils import isExpired\n \n text = """I lick my brain in silence\n Rather squeeze my head instead\n@@ -119,7 +120,7 @@ def testPublishingSubobjectsAndExpireThem(self):\n                   self.folder.f1.f2):\n             self.assertEqual(self.workflow.getInfoFor(o, \'review_state\'),\n                              \'published\')\n-            self.assertTrue(self.portal.isExpired(o))\n+            self.assertTrue(isExpired(o))\n \n     def testPublishingWithoutSubobjects(self):\n         self.setRoles([\'Manager\'])  # Make sure we can publish directly\n@@ -180,7 +181,7 @@ def testPublishingDefaultPageWhenFolderCannotBePublished(self):\n             self.workflow.getInfoFor(self.folder.d1, \'review_state\'),\n             \'published\')\n \n-    # test setting effective/expiration date and isExpired script\n+    # test setting effective/expiration date and isExpired method\n \n     def testIsExpiredWithExplicitExpiredContent(self):\n         self.setRoles([\'Manager\'])\n@@ -188,24 +189,10 @@ def testIsExpiredWithExplicitExpiredContent(self):\n         self.folder.d1.content_status_modify(workflow_action=\'publish\',\n                                              effective_date=\'1/1/2001\',\n                                              expiration_date=\'1/2/2001\')\n-        self.assertTrue(self.portal.isExpired(self.folder.d1))\n-\n-    def testIsExpiredWithImplicitExpiredContent(self):\n-        self.setRoles([\'Manager\'])\n-        self.folder.invokeFactory(\'Document\', id=\'d1\', title=\'Doc 1\')\n-        self.folder.d1.content_status_modify(workflow_action=\'publish\',\n-                                             effective_date=\'1/1/2001\',\n-                                             expiration_date=\'1/2/2001\')\n-        self.assertTrue(self.folder.d1.isExpired())\n+        self.assertTrue(isExpired(self.folder.d1))\n \n     def testIsExpiredWithExplicitNonExpiredContent(self):\n         self.setRoles([\'Manager\'])\n         self.folder.invokeFactory(\'Document\', id=\'d1\', title=\'Doc 1\')\n         self.folder.d1.content_status_modify(workflow_action=\'publish\')\n-        self.assertFalse(self.portal.isExpired(self.folder.d1))\n-\n-    def testIsExpiredWithImplicitNonExpiredContent(self):\n-        self.setRoles([\'Manager\'])\n-        self.folder.invokeFactory(\'Document\', id=\'d1\', title=\'Doc 1\')\n-        self.folder.d1.content_status_modify(workflow_action=\'publish\')\n-        self.assertFalse(self.folder.d1.isExpired())\n+        self.assertFalse(isExpired(self.folder.d1))\ndiff --git a/Products/CMFPlone/tests/testContentSecurity.py b/Products/CMFPlone/tests/testContentSecurity.py\nindex 8c4f00477..7a64fd2db 100644\n--- a/Products/CMFPlone/tests/testContentSecurity.py\n+++ b/Products/CMFPlone/tests/testContentSecurity.py\n@@ -2,7 +2,7 @@\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n from Products.CMFPlone.tests.PloneTestCase import PloneTestCase\n-\n+from zExceptions.unauthorized import Unauthorized as zUnauthorized\n \n class TestContentSecurity(PloneTestCase):\n \n@@ -25,12 +25,13 @@ def testCreateMemberContent(self):\n     def testCreateOtherMemberContentFails(self):\n         self.login(\'user1\')\n         folder = self.membership.getHomeFolder(\'user2\')\n-        self.assertRaises(ValueError, folder.invokeFactory, \'Document\', \'new\')\n+        with self.assertRaises(zUnauthorized):\n+            folder.invokeFactory(\'Document\', \'new\')\n \n     def testCreateRootContentFails(self):\n         self.login(\'user1\')\n-        self.assertRaises(Unauthorized, self.portal.invokeFactory,\n-                          \'Document\', \'new\')\n+        with self.assertRaises(Unauthorized):\n+            self.portal.invokeFactory(\'Document\', \'new\')\n \n     def testDeleteMemberContent(self):\n         self.login(\'user1\')\n@@ -46,7 +47,8 @@ def testDeleteOtherMemberContent(self):\n \n         self.login(\'user2\')\n         folder = self.membership.getHomeFolder(\'user1\')\n-        self.assertRaises(Unauthorized, folder.manage_delObjects, [\'new\'])\n+        with self.assertRaises(zUnauthorized):\n+            folder.manage_delObjects([\'new\'])\n \n     def testCreateWithLocalRole(self):\n         self.login(\'user1\')\n@@ -74,8 +76,8 @@ def testCreateFailsWithLocalRoleBlocked(self):\n \n         self.login(\'user2\')\n         # This should now raise ValueError\n-        self.assertRaises(ValueError, folder.subfolder.invokeFactory,\n-                          \'Document\', \'new\')\n+        with self.assertRaises(zUnauthorized):\n+            folder.subfolder.invokeFactory(\'Document\', \'new\')\n \n     def testCreateSucceedsWithLocalRoleBlockedInParentButAssingedInSubFolder(self):\n         # Make sure that blocking a acquisition in a folder does not interfere\n@@ -111,7 +113,7 @@ def testViewAllowedOnContentInAcquisitionBlockedFolder(self):\n         subfolder.new.manage_addLocalRoles(\'user2\', (\'Member\',))\n         self.login(\'user2\')\n         # This should not raise Unauthorized\n-        subfolder.new.base_view()\n+        subfolder.new.view()\n \n     def testViewAllowedOnContentInPrivateFolder(self):\n         self.login(\'user1\')\n@@ -123,10 +125,10 @@ def testViewAllowedOnContentInPrivateFolder(self):\n         doc.manage_addLocalRoles(\'user2\', (\'Owner\',))\n         self.login(\'user2\')\n         # This should not raise Unauthorized\n-        doc.base_view()\n+        doc.view()\n         # Neither should anonymous\n         self.logout()\n-        doc.base_view()\n+        doc.view()\n \n     def testViewAllowedOnContentInAcquisitionBlockedFolderWithCustomWorkflow(self):\n         # Another test for http://dev.plone.org/plone/ticket/4055\n@@ -165,7 +167,7 @@ def testViewAllowedOnContentInAcquisitionBlockedFolderWithCustomWorkflow(self):\n         # This shouldn\'t either, but strangely it never does even if the script\n         # below, which is called in here, does.  What is wrong here?\n         try:\n-            subfolder.new.base_view()\n+            subfolder.new.view()\n         except Unauthorized:\n             self.fail("Could not access base_view on \'new\'")\n         # This should not raise Unauthorized\ndiff --git a/Products/CMFPlone/tests/testContentTypeScripts.py b/Products/CMFPlone/tests/testContentTypeScripts.py\nindex 4131c6bd4..ced3e7d5d 100644\n--- a/Products/CMFPlone/tests/testContentTypeScripts.py\n+++ b/Products/CMFPlone/tests/testContentTypeScripts.py\n@@ -1,7 +1,13 @@\n # -*- coding: utf-8 -*-\n+from datetime import datetime\n+from plone.app.textfield import RichTextValue\n+from plone.namedfile.file import NamedFile\n+from plone.namedfile.file import NamedImage\n from Products.CMFPlone.tests import PloneTestCase\n from Products.CMFPlone.tests import dummy\n \n+import six\n+\n AddPortalTopics = \'Add portal topics\'\n \n \n@@ -17,28 +23,31 @@ def getPermissionsOfRole(self, role):\n         return [p[\'name\'] for p in perms if p[\'selected\']]\n \n     def testDocumentCreate(self):\n-        self.folder.invokeFactory(\'Document\', id=\'doc\', text=\'data\')\n-        self.assertEqual(self.folder.doc.EditableBody(), \'data\')\n-        self.assertEqual(self.folder.doc.Format(), \'text/plain\')\n+        self.folder.invokeFactory(\n+            \'Document\', id=\'doc\', text=RichTextValue(u\'data\'))\n+        self.assertEqual(self.folder.doc.text.raw, \'data\')\n+        self.assertEqual(self.folder.doc.Format(), \'text/html\')\n \n     def testEventCreate(self):\n         self.folder.invokeFactory(\'Event\', id=\'event\',\n                                   title=\'Foo\',\n-                                  start_date=\'2003-09-18\',\n-                                  end_date=\'2003-09-19\')\n+                                  start=datetime(year=2003, month=9, day=18),\n+                                  end=datetime(year=2003, month=9, day=19))\n         self.assertEqual(self.folder.event.Title(), \'Foo\')\n-        self.assertTrue(self.folder.event.start().ISO8601()\n+        self.assertTrue(self.folder.event.start.isoformat()\n                             .startswith(\'2003-09-18T00:00:00\'))\n-        self.assertTrue(self.folder.event.end().ISO8601()\n+        self.assertTrue(self.folder.event.end.isoformat()\n                             .startswith(\'2003-09-19T00:00:00\'))\n \n     def testFileCreate(self):\n-        self.folder.invokeFactory(\'File\', id=\'file\', file=dummy.File())\n-        self.assertEqual(str(self.folder.file), dummy.TEXT)\n+        self.folder.invokeFactory(\n+            \'File\', id=\'file\', file=NamedFile(dummy.File()))\n+        self.assertEqual(self.folder.file.file.data, dummy.TEXT)\n \n     def testImageCreate(self):\n-        self.folder.invokeFactory(\'Image\', id=\'image\', file=dummy.Image())\n-        self.assertEqual(str(self.folder.image.data), dummy.GIF)\n+        self.folder.invokeFactory(\n+            \'Image\', id=\'image\', image=NamedImage(dummy.Image()))\n+        self.assertEqual(self.folder.image.image.data, dummy.GIF)\n \n     def testFolderCreate(self):\n         self.folder.invokeFactory(\'Folder\', id=\'folder\', title=\'Foo\',\n@@ -48,14 +57,14 @@ def testFolderCreate(self):\n \n     def testLinkCreate(self):\n         self.folder.invokeFactory(\'Link\', id=\'link\',\n-                                  remote_url=\'http://foo.com\', title=\'Foo\')\n+                                  remoteUrl=\'http://foo.com\', title=\'Foo\')\n         self.assertEqual(self.folder.link.Title(), \'Foo\')\n-        self.assertEqual(self.folder.link.getRemoteUrl(), \'http://foo.com\')\n+        self.assertEqual(self.folder.link.remoteUrl, \'http://foo.com\')\n \n     def testNewsItemCreate(self):\n         self.folder.invokeFactory(\'News Item\', id=\'newsitem\',\n-                                  text=\'data\', title=\'Foo\')\n-        self.assertEqual(self.folder.newsitem.EditableBody(), \'data\')\n+                                  text=RichTextValue(u\'data\'), title=\'Foo\')\n+        self.assertEqual(self.folder.newsitem.text.raw, \'data\')\n         self.assertEqual(self.folder.newsitem.Title(), \'Foo\')\n \n     # Bug tests\n@@ -76,42 +85,46 @@ class TestFileURL(PloneTestCase.PloneTestCase):\n \n     def testFileURLWithHost(self):\n         self.folder.invokeFactory(\'Link\', id=\'link\',\n-                                  remote_url=\'file://foo.com/baz.txt\')\n-        self.assertEqual(self.folder.link.getRemoteUrl(),\n+                                  remoteUrl=\'file://foo.com/baz.txt\')\n+        self.assertEqual(self.folder.link.remoteUrl,\n                          \'file://foo.com/baz.txt\')\n \n     def testFileURLNoHost(self):\n         self.folder.invokeFactory(\'Link\', id=\'link\',\n-                                  remote_url=\'file:///foo.txt\')\n-        self.assertEqual(self.folder.link.getRemoteUrl(), \'file:///foo.txt\')\n-\n-    def testFileURLFourSlash(self):\n-        self.folder.invokeFactory(\'Link\', id=\'link\',\n-                                  remote_url=\'file:////foo.com/baz.txt\')\n-        # See urlparse.urlparse()\n-        self.assertEqual(self.folder.link.getRemoteUrl(),\n-                         \'file://foo.com/baz.txt\')\n-\n-    def testFileURLFiveSlash(self):\n-        self.folder.invokeFactory(\'Link\', id=\'link\',\n-                                  remote_url=\'file://///foo.com/baz.txt\')\n-        # See urlparse.urlparse()\n-        self.assertEqual(self.folder.link.getRemoteUrl(),\n-                         \'file:///foo.com/baz.txt\')\n-\n-    def testFileURLSixSlash(self):\n-        self.folder.invokeFactory(\'Link\', id=\'link\',\n-                                  remote_url=\'file://////foo.com/baz.txt\')\n-        # See urlparse.urlparse()\n-        self.assertEqual(self.folder.link.getRemoteUrl(),\n-                         \'file:////foo.com/baz.txt\')\n+                                  remoteUrl=\'file:///foo.txt\')\n+        self.assertEqual(self.folder.link.remoteUrl, \'file:///foo.txt\')\n+\n+    # DX does not pass url trough urlparse/urlunparse like setRemoteUrl does.\n+    # def testFileURLFourSlash(self):\n+    #     self.folder.invokeFactory(\'Link\', id=\'link\',\n+    #                               remoteUrl=\'file:////foo.com/baz.txt\')\n+    #     # See urlparse.urlparse()\n+    #     self.assertEqual(self.folder.link.remoteUrl,\n+    #                      \'file://foo.com/baz.txt\')\n+\n+    # def testFileURLFiveSlash(self):\n+    #     self.folder.invokeFactory(\'Link\', id=\'link\',\n+    #                               remoteUrl=\'file://///foo.com/baz.txt\')\n+    #     # See urlparse.urlparse()\n+    #     self.assertEqual(self.folder.link.remoteUrl,\n+    #                      \'file:///foo.com/baz.txt\')\n+\n+    # def testFileURLSixSlash(self):\n+    #     self.folder.invokeFactory(\'Link\', id=\'link\',\n+    #                               remoteUrl=\'file://////foo.com/baz.txt\')\n+    #     # See urlparse.urlparse()\n+    #     self.assertEqual(self.folder.link.remoteUrl,\n+    #                      \'file:////foo.com/baz.txt\')\n \n \n class TestImageProps(PloneTestCase.PloneTestCase):\n \n     def testImageComputedProps(self):\n         from OFS.Image import Image\n-        tag = Image.tag.im_func\n+        if six.PY2:\n+            tag = Image.tag.im_func\n+        else:\n+            tag = Image.tag\n         kw = {\'_title\': \'some title\',\n               \'_alt\': \'alt tag\',\n               \'height\': 100,\ndiff --git a/Products/CMFPlone/tests/testControlPanel.py b/Products/CMFPlone/tests/testControlPanel.py\nindex 2ddb80bba..bea2c7b31 100644\n--- a/Products/CMFPlone/tests/testControlPanel.py\n+++ b/Products/CMFPlone/tests/testControlPanel.py\n@@ -1,11 +1,15 @@\n # -*- coding: utf-8 -*-\n-from plone.app.testing.bbb import PloneTestCase\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n \n+import unittest\n \n-class TestControlPanel(PloneTestCase):\n \n-    def afterSetUp(self):\n-        self.controlpanel = self.portal.portal_controlpanel\n+class TestControlPanel(unittest.TestCase):\n+\n+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.controlpanel = self.layer[\'portal\'].portal_controlpanel\n \n         # get the expected default groups and configlets\n         self.groups = [\'Plone\', \'Products\']\ndiff --git a/Products/CMFPlone/tests/testControlPanelScripts.py b/Products/CMFPlone/tests/testControlPanelScripts.py\nindex 8c91d22be..ca047c6b9 100644\n--- a/Products/CMFPlone/tests/testControlPanelScripts.py\n+++ b/Products/CMFPlone/tests/testControlPanelScripts.py\n@@ -5,35 +5,32 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n from Products.CMFPlone.tests.PloneTestCase import PloneTestCase\n from zExceptions import Forbidden\n \n+import unittest\n \n-class TestPrefsUserManage(PloneTestCase):\n \n-    def afterSetUp(self):\n+class TestPrefsUserManage(unittest.TestCase):\n+\n+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         self.membership = self.portal.portal_membership\n         self.membership.memberareaCreationFlag = 0\n-        self.setupAuthenticator()\n-\n-    def addMember(self, username, fullname, email, roles, last_login_time):\n-        self.membership.addMember(username, \'secret\', roles, [])\n-        member = self.membership.getMemberById(username)\n-        member.setMemberProperties({\n-            \'fullname\': fullname,\n-            \'email\': email,\n-            \'last_login_time\': DateTime(last_login_time), })\n+        # self.setupAuthenticator()\n \n     def test_ploneChangePasswordPostOnly(self):\n-        self.login(TEST_USER_NAME)\n-        self.setRequestMethod(\'GET\')\n-        self.assertRaises(\n-            Forbidden,\n-            self.portal.plone_change_password,\n-            current=TEST_USER_PASSWORD,\n-            password=TEST_USER_PASSWORD,\n-            password_confirm=TEST_USER_PASSWORD\n-        )\n+        # self.login(TEST_USER_NAME)\n+        self.layer[\'request\'].method = \'GET\'\n+        with self.assertRaises(Forbidden):\n+            self.portal.plone_change_password(\n+                current=TEST_USER_PASSWORD,\n+                password=TEST_USER_PASSWORD,\n+                password_confirm=TEST_USER_PASSWORD,\n+            )\n \n \n class TestAccessControlPanelScripts(PloneTestCase):\ndiff --git a/Products/CMFPlone/tests/testCookieAuth.py b/Products/CMFPlone/tests/testCookieAuth.py\nindex 3d52893fe..9be55ad09 100644\n--- a/Products/CMFPlone/tests/testCookieAuth.py\n+++ b/Products/CMFPlone/tests/testCookieAuth.py\n@@ -2,7 +2,7 @@\n from plone.app.testing import logout\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n \n import base64\n@@ -18,7 +18,7 @@ def setUp(self):\n         self.folder = self.portal[\'test-folder\']\n         self.browser = Browser(self.layer[\'app\'])\n         self.auth_info = \'%s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD)\n-        self.cookie = base64.encodestring(self.auth_info)[:-1]\n+        self.cookie = base64.encodestring(self.auth_info.encode(\'utf8\'))[:-1]\n         self.folder.manage_permission(\'View\', [\'Manager\'], acquire=0)\n         logout()\n \ndiff --git a/Products/CMFPlone/tests/testCutPasteSecurity.py b/Products/CMFPlone/tests/testCutPasteSecurity.py\nindex 2ea65fc8e..d651481b0 100644\n--- a/Products/CMFPlone/tests/testCutPasteSecurity.py\n+++ b/Products/CMFPlone/tests/testCutPasteSecurity.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n+from OFS.CopySupport import CopyError\n from Products.CMFPlone.tests.PloneTestCase import PloneTestCase\n from Products.CMFCore.interfaces import IContentish\n from zope.component import provideHandler, getGlobalSiteManager\n@@ -39,8 +40,8 @@ def testRenameOtherMemberContentFails(self):\n \n         self.login(\'user2\')\n         folder = self.membership.getHomeFolder(\'user1\')\n-        self.assertRaises(Unauthorized, folder.manage_renameObject,\n-                          \'testrename\', \'bad\')\n+        with self.assertRaises(CopyError):\n+            folder.manage_renameObject(\'testrename\', \'bad\')\n \n     def testCopyMemberContent(self):\n         self.login(\'user1\')\ndiff --git a/Products/CMFPlone/tests/testDateTimeIntegration.py b/Products/CMFPlone/tests/testDateTimeIntegration.py\nindex b266731d8..616fccabd 100644\n--- a/Products/CMFPlone/tests/testDateTimeIntegration.py\n+++ b/Products/CMFPlone/tests/testDateTimeIntegration.py\n@@ -11,6 +11,8 @@\n \n from Products.CMFPlone.tests.PloneTestCase import PloneTestCase\n from DateTime import DateTime\n+from zope.event import notify\n+from zope.lifecycleevent import ObjectModifiedEvent\n \n \n class DateTimeTests(PloneTestCase):\n@@ -18,7 +20,7 @@ class DateTimeTests(PloneTestCase):\n     def testModificationDate(self):\n         obj = self.folder\n         before = DateTime()\n-        obj.processForm(values=dict(Description=\'foo!\'))\n+        notify(ObjectModifiedEvent(obj))\n         after = DateTime()\n         modified = obj.ModificationDate()   # the string representation...\n         modified = DateTime(modified)       # is usually parsed again in Plone\n@@ -39,7 +41,7 @@ def testEffectiveDate(self):\n         date = DateTime() + 365             # expire one year from today\n         date = DateTime(date.ISO8601())     # but strip off milliseconds\n         obj.setEffectiveDate(date)\n-        obj.processForm(values=dict(Description=\'foo!\'))\n+        notify(ObjectModifiedEvent(obj))\n         effective = obj.EffectiveDate()     # the string representation...\n         effective = DateTime(effective)     # is usually parsed again in Plone\n         self.assertTrue(date.equalTo(effective), (date, effective))\n@@ -49,7 +51,7 @@ def testExpirationDate(self):\n         date = DateTime() + 365             # expire one year from today\n         date = DateTime(date.ISO8601())     # but strip off milliseconds\n         obj.setExpirationDate(date)\n-        obj.processForm(values=dict(Description=\'foo!\'))\n+        notify(ObjectModifiedEvent(obj))\n         expired = obj.ExpirationDate()      # the string representation...\n         expired = DateTime(expired)         # is usually parsed again in Plone\n         self.assertTrue(date.equalTo(expired), (date, expired))\ndiff --git a/Products/CMFPlone/tests/testExternalEditorEnabled.py b/Products/CMFPlone/tests/testExternalEditorEnabled.py\nindex 912171bb3..bcbeaeab0 100644\n--- a/Products/CMFPlone/tests/testExternalEditorEnabled.py\n+++ b/Products/CMFPlone/tests/testExternalEditorEnabled.py\n@@ -1,7 +1,16 @@\n # -*- coding: utf-8 -*-\n+import unittest\n from Products.CMFPlone.tests import PloneTestCase\n \n+try:\n+    import Products.ExternalEditor\n+except ImportError:\n+    HAS_EXTERNAL_EDITOR = False\n+else:\n+    HAS_EXTERNAL_EDITOR = True\n \n+\n+@unittest.skipIf(not HAS_EXTERNAL_EDITOR, \'requires Products.ExternalEditor\')\n class TestExternalEditorEnabled(PloneTestCase.PloneTestCase):\n     \'\'\'Tests the externalEditorEnabled script\'\'\'\n \ndiff --git a/Products/CMFPlone/tests/testIImagingSchema.py b/Products/CMFPlone/tests/testIImagingSchema.py\nindex e45a964cf..3a9e707da 100644\n--- a/Products/CMFPlone/tests/testIImagingSchema.py\n+++ b/Products/CMFPlone/tests/testIImagingSchema.py\n@@ -1,22 +1,26 @@\n # -*- coding: utf-8 -*-\n-from plone.app.testing.bbb import PloneTestCase\n-from Products.CMFPlone.interfaces.controlpanel import IImagingSchema\n+from plone.app.testing import PLONE_INTEGRATION_TESTING\n from plone.registry.interfaces import IRegistry\n+from Products.CMFPlone.interfaces.controlpanel import IImagingSchema\n from zope.component import getUtility\n \n+import unittest\n+\n+\n+class TestImagingSchemaTool(unittest.TestCase):\n \n-class TestImagingSchemaTool(PloneTestCase):\n+    layer = PLONE_INTEGRATION_TESTING\n \n-  def test_AllowedSizes(self):\n-      registry = getUtility(IRegistry)\n-      imaging_settings = registry.forInterface(IImagingSchema, prefix=\'plone\')\n+    def test_AllowedSizes(self):\n+        registry = getUtility(IRegistry)\n+        imaging_settings = registry.forInterface(IImagingSchema, prefix=\'plone\')\n \n-      # Ensure we can save the defaults back to the registry\n-      imaging_settings.allowed_sizes = imaging_settings.allowed_sizes\n+        # Ensure we can save the defaults back to the registry\n+        imaging_settings.allowed_sizes = imaging_settings.allowed_sizes\n \n-      # Add a new image scale\n-      sizes = imaging_settings.allowed_sizes\n-      imaging_settings.allowed_sizes = sizes + [u"larger 800:800"]\n+        # Add a new image scale\n+        sizes = imaging_settings.allowed_sizes\n+        imaging_settings.allowed_sizes = sizes + [u"larger 800:800"]\n \n-      # Set back to original\n-      imaging_settings.allowed_sizes = sizes\n+        # Set back to original\n+        imaging_settings.allowed_sizes = sizes\ndiff --git a/Products/CMFPlone/tests/testInterfaces.py b/Products/CMFPlone/tests/testInterfaces.py\nindex 55a77b314..53e6009e3 100644\n--- a/Products/CMFPlone/tests/testInterfaces.py\n+++ b/Products/CMFPlone/tests/testInterfaces.py\n@@ -1,36 +1,39 @@\n # -*- coding: utf-8 -*-\n-from unittest import TestCase\n-\n-from types import TupleType, TypeType, ClassType\n-from zope.interface.interface import InterfaceClass\n from ExtensionClass import ExtensionClass\n-\n-from zope.interface import implementedBy, providedBy\n-\n from Products.CMFPlone.ActionsTool import ActionsTool\n from Products.CMFPlone.CatalogTool import CatalogTool\n from Products.CMFPlone.MigrationTool import MigrationTool\n-from Products.CMFPlone.PloneControlPanel \\\n-    import PloneControlPanel, PloneConfiglet\n-from Products.CMFPlone.PloneFolder \\\n-    import OrderedContainer, BasePloneFolder, PloneFolder\n+from Products.CMFPlone.PloneControlPanel import PloneConfiglet\n+from Products.CMFPlone.PloneControlPanel import PloneControlPanel\n+from Products.CMFPlone.PloneFolder import BasePloneFolder\n+from Products.CMFPlone.PloneFolder import OrderedContainer\n+from Products.CMFPlone.PloneFolder import PloneFolder\n from Products.CMFPlone.PloneTool import PloneTool\n from Products.CMFPlone.Portal import PloneSite\n-from Products.CMFPlone.PropertiesTool \\\n-    import PropertiesTool, SimpleItemWithProperties\n+from Products.CMFPlone.PropertiesTool import PropertiesTool\n+from Products.CMFPlone.PropertiesTool import SimpleItemWithProperties\n from Products.CMFPlone.QuickInstallerTool import QuickInstallerTool\n from Products.CMFPlone.RegistrationTool import RegistrationTool\n from Products.CMFPlone.SkinsTool import SkinsTool\n from Products.CMFPlone.TypesTool import TypesTool\n from Products.CMFPlone.URLTool import URLTool\n from Products.CMFPlone.WorkflowTool import WorkflowTool\n+from unittest import TestCase\n+from zope.interface import implementedBy, providedBy\n+from zope.interface.interface import InterfaceClass\n+\n+# for Python 2\n+try:\n+    from types import ClassType\n+except ImportError:\n+    ClassType = None\n \n \n def className(klass):\n     """ get the short class name """\n-    if not isinstance(klass, (TypeType, ClassType,\n+    if not isinstance(klass, (type, ClassType,\n                               ExtensionClass, InterfaceClass)):\n-        # Looks like an instance, get it\'s class.\n+        # Looks like an instance, get its class.\n         if hasattr(klass, \'__class__\'):\n             klass = klass.__class__\n     return klass.__name__\n@@ -79,7 +82,7 @@ def interfaceImplementedByInstanceOf(self, klass, interface):\n         try:\n             verifyClass(interface, klass)\n         except (BrokenImplementation, DoesNotImplement,\n-                BrokenMethodImplementation), errmsg:\n+                BrokenMethodImplementation) as errmsg:\n             self.fail(\'The class %s does not implement %s correctly: \\n%s\'\n                       % (dottedName(klass), dottedName(interface), errmsg))\n \n@@ -99,7 +102,7 @@ def interfaceImplementedBy(self, instance, interface):\n             verifyObject(interface, instance)\n         except (BrokenImplementation,\n                 DoesNotImplement,\n-                BrokenMethodImplementation), errmsg:\n+                BrokenMethodImplementation) as errmsg:\n             self.fail(\n                 \'The instance of %s does not implement %s correctly: \\n%s\'\n                 % (dottedName(instance), dottedName(interface), errmsg))\n@@ -114,7 +117,7 @@ def getImplementsOf(self, instance):\n \n     def doesImplementByInstanceOf(self, klass, interfaces):\n         """ make sure that the klass implements at least these interfaces"""\n-        if type(interfaces) is not TupleType:\n+        if type(interfaces) is not tuple:\n             interfaces = (interfaces)\n         impl = self.getImplementsOfInstanceOf(klass)\n         for interface in interfaces:\n@@ -125,7 +128,7 @@ def doesImplementByInstanceOf(self, klass, interfaces):\n \n     def doesImplementBy(self, instance, interfaces):\n         """ make sure that the klass implements at least these interfaces"""\n-        if type(interfaces) is not TupleType:\n+        if type(interfaces) is not tuple:\n             interfaces = (interfaces)\n         impl = self.getImplementsOf(instance)\n         for interface in interfaces:\n@@ -185,7 +188,7 @@ def interfaceImplementedBy(self, klass, interface):\n         try:\n             verifyClass(interface, klass)\n         except (BrokenImplementation, DoesNotImplement,\n-                BrokenMethodImplementation), errmsg:\n+                BrokenMethodImplementation) as errmsg:\n             self.fail(\'The class %s does not implement %s correctly: \\n%s\'\n                       % (dottedName(klass), dottedName(interface), errmsg))\n \n@@ -204,7 +207,7 @@ def interfaceProvidedBy(self, instance, interface):\n         try:\n             verifyObject(interface, instance)\n         except (BrokenImplementation, DoesNotImplement,\n-                BrokenMethodImplementation), errmsg:\n+                BrokenMethodImplementation) as errmsg:\n             self.fail(\'The instance of %s does not provide %s correctly: \\n%s\'\n                       % (dottedName(instance), dottedName(interface), errmsg))\n \ndiff --git a/Products/CMFPlone/tests/testMigrationTool.py b/Products/CMFPlone/tests/testMigrationTool.py\nindex 10ed4ed92..d2a31abe2 100644\n--- a/Products/CMFPlone/tests/testMigrationTool.py\n+++ b/Products/CMFPlone/tests/testMigrationTool.py\n@@ -105,7 +105,7 @@ def failing_upgrade(context):\n \n         # Register a too new upgrade.\n         fs_version = self.migration.getFileSystemVersion()\n-        new_version = unicode(int(fs_version) + 1)\n+        new_version = str(int(fs_version) + 1)\n         new_step = UpgradeStep(\n             \'Too new upgrade\', _DEFAULT_PROFILE,\n             fs_version, new_version,\ndiff --git a/Products/CMFPlone/tests/testNavTree.py b/Products/CMFPlone/tests/testNavTree.py\nindex 9b3ff5cb2..43add6460 100644\n--- a/Products/CMFPlone/tests/testNavTree.py\n+++ b/Products/CMFPlone/tests/testNavTree.py\n@@ -63,7 +63,7 @@ def populateSite(self):\n         self.portal.invokeFactory(\'Document\', \'doc3\')\n         self.portal.invokeFactory(\'Folder\', \'folder1\')\n         self.portal.invokeFactory(\'Link\', \'link1\')\n-        self.portal.link1.setRemoteUrl(\'http://plone.org\')\n+        self.portal.link1.remoteUrl = \'http://plone.org\'\n         self.portal.link1.reindexObject()\n         folder1 = getattr(self.portal, \'folder1\')\n         folder1.invokeFactory(\'Document\', \'doc11\')\ndiff --git a/Products/CMFPlone/tests/testNavigationView.py b/Products/CMFPlone/tests/testNavigationView.py\nindex 35ee18d86..3108e4417 100644\n--- a/Products/CMFPlone/tests/testNavigationView.py\n+++ b/Products/CMFPlone/tests/testNavigationView.py\n@@ -41,7 +41,7 @@ def populateSite(self):\n         self.portal.invokeFactory(\'Document\', \'doc3\')\n         self.portal.invokeFactory(\'Folder\', \'folder1\')\n         self.portal.invokeFactory(\'Link\', \'link1\')\n-        self.portal.link1.setRemoteUrl(\'http://plone.org\')\n+        self.portal.link1.remoteUrl = \'http://plone.org\'\n         self.portal.link1.reindexObject()\n         folder1 = getattr(self.portal, \'folder1\')\n         folder1.invokeFactory(\'Document\', \'doc11\')\n@@ -73,7 +73,7 @@ def testCreateNavTreeCurrentItem(self):\n     def testNavTreeExcludesItemsWithExcludeProperty(self):\n         # Make sure that items witht he exclude_from_nav property set get\n         # no_display set to True\n-        self.portal.folder2.setExcludeFromNav(True)\n+        self.portal.folder2.exclude_from_nav = True\n         self.portal.folder2.reindexObject()\n         view = self.view_class(self.portal.folder1.doc11, self.request)\n         tree = view.navigationTree()\n@@ -84,7 +84,7 @@ def testNavTreeExcludesItemsWithExcludeProperty(self):\n \n     def testShowAllParentsOverridesNavTreeExcludesItemsWithExcludeProp(self):\n         # Make sure excluded items are not included in the navtree\n-        self.portal.folder2.setExcludeFromNav(True)\n+        self.portal.folder2.exclude_from_nav = True\n         self.portal.folder2.reindexObject()\n         self.navigation_settings.show_excluded_items = True\n \n@@ -352,7 +352,7 @@ def populateSite(self):\n         self.portal.invokeFactory(\'Document\', \'doc3\')\n         self.portal.invokeFactory(\'Folder\', \'folder1\')\n         self.portal.invokeFactory(\'Link\', \'link1\')\n-        self.portal.link1.setRemoteUrl(\'http://plone.org\')\n+        self.portal.link1.remoteUrl = \'http://plone.org\'\n         self.portal.link1.reindexObject()\n         folder1 = getattr(self.portal, \'folder1\')\n         folder1.invokeFactory(\'Document\', \'doc11\')\n@@ -595,7 +595,7 @@ def testTabsExcludeItemsWithExcludeProperty(self):\n         view = self.view_class(self.portal, self.request)\n         tabs = view.topLevelTabs(actions=[])\n         orig_len = len(tabs)\n-        self.portal.folder2.setExcludeFromNav(True)\n+        self.portal.folder2.exclude_from_nav = True\n         self.portal.folder2.reindexObject()\n         view = self.view_class(self.portal, self.request)\n         tabs = view.topLevelTabs(actions=[])\n@@ -663,7 +663,7 @@ def testPortalTabsNotIncludeViewNamesInCSSid(self):\n     def testLinkRemoteUrlsUsedUnlessLinkCreator(self):\n         self.setRoles([\'Manager\'])\n         self.portal.invokeFactory(\'Link\', \'link1\')\n-        self.portal.link1.setRemoteUrl(\'http://plone.org\')\n+        self.portal.link1.remoteUrl = \'http://plone.org\'\n         self.portal.link1.reindexObject()\n         view = self.view_class(self.portal, self.request)\n         tabs = view.topLevelTabs(actions=[])\n@@ -740,10 +740,12 @@ def testBreadcrumbsStopAtNavigationRoot(self):\n \n \n class TestCatalogBreadCrumbs(TestBaseBreadCrumbs):\n+\n     view_class = CatalogNavigationBreadcrumbs\n \n \n class TestPhysicalBreadCrumbs(TestBaseBreadCrumbs):\n+\n     view_class = PhysicalNavigationBreadcrumbs\n \n     def testBreadcrumbsFilterByInterface(self):\ndiff --git a/Products/CMFPlone/tests/testNextPrevious.py b/Products/CMFPlone/tests/testNextPrevious.py\nindex 4287e4137..e74ed9b76 100644\n--- a/Products/CMFPlone/tests/testNextPrevious.py\n+++ b/Products/CMFPlone/tests/testNextPrevious.py\n@@ -16,7 +16,7 @@ def populateSite(self):\n         self.portal.invokeFactory(\'Document\', \'doc3\')\n         self.portal.invokeFactory(\'Folder\', \'folder1\')\n         self.portal.invokeFactory(\'Link\', \'link1\')\n-        self.portal.link1.setRemoteUrl(\'http://plone.org\')\n+        self.portal.link1.remoteUrl = \'http://plone.org\'\n         self.portal.link1.reindexObject()\n         folder1 = getattr(self.portal, \'folder1\')\n         folder1.invokeFactory(\'Document\', \'doc11\')\n@@ -40,7 +40,7 @@ def testNextPreviousEnablingOnCreation(self):\n \n         # first the field on the atfolder direct, to get sure the field is\n         # there\n-        enabled = self.folder.case.getNextPreviousEnabled()\n+        enabled = self.folder.case.nextPreviousEnabled\n         self.assertFalse(enabled)\n \n         # secoundly we test if the adapter provides the isNextPreviousEnabled()\n@@ -57,7 +57,7 @@ def testNextPreviousViewDisabled(self):\n \n     def testNextPreviousViewEnabled(self):\n         # set the parent folder "getNextPreviousEnabled" to true\n-        self.portal.folder1.setNextPreviousEnabled(True)\n+        self.portal.folder1.nextPreviousEnabled = True\n \n         # clear request memos\n         view = self.portal.folder1.doc12.restrictedTraverse(\ndiff --git a/Products/CMFPlone/tests/testPloneFolder.py b/Products/CMFPlone/tests/testPloneFolder.py\nindex e3e9afddf..a10c05d24 100644\n--- a/Products/CMFPlone/tests/testPloneFolder.py\n+++ b/Products/CMFPlone/tests/testPloneFolder.py\n@@ -8,6 +8,7 @@\n from Products.CMFCore.permissions import DeleteObjects\n \n from zExceptions import BadRequest\n+from zExceptions.unauthorized import Unauthorized as zUnauthorized\n \n \n class TestPloneFolder(PloneTestCase.PloneTestCase):\n@@ -148,7 +149,7 @@ def testManageDelObjectsIfSub1Denied(self):\n         # Should NOT be able to delete sub1 due to permission checks in\n         # Archetypes.BaseFolder.manage_delObjects().\n         self.sub1.manage_permission(DeleteObjects, [\'Manager\'], acquire=0)\n-        self.assertRaises(Unauthorized, self.folder.manage_delObjects, \'sub1\')\n+        self.assertRaises(zUnauthorized, self.folder.manage_delObjects, \'sub1\')\n \n     def testManageDelObjectsIfSub2Denied(self):\n         # We are able to delete sub1 if sub2 is denied\n@@ -173,4 +174,4 @@ def testManageDelObjectsIfSub1Denied(self):\n         # Should be able to delete sub1 as the portal does not implement\n         # additional permission checks.\n         self.sub1.manage_permission(DeleteObjects, [\'Manager\'], acquire=0)\n-        self.assertRaises(Unauthorized, self.portal.manage_delObjects, \'sub1\')\n+        self.assertRaises(zUnauthorized, self.portal.manage_delObjects, \'sub1\')\ndiff --git a/Products/CMFPlone/tests/testPloneTestCase.py b/Products/CMFPlone/tests/testPloneTestCase.py\nindex 4713ec332..280d827c6 100644\n--- a/Products/CMFPlone/tests/testPloneTestCase.py\n+++ b/Products/CMFPlone/tests/testPloneTestCase.py\n@@ -37,9 +37,3 @@ def testRetractDocument(self):\n         self.assertEqual(\n             self.workflow.getInfoFor(self.folder.new, \'review_state\'),\n             \'visible\')\n-\n-    def testEditDocument(self):\n-        self.folder.invokeFactory(\'Document\', id=\'new\')\n-        self.assertEqual(self.folder.new.EditableBody(), \'\')\n-        self.folder.new.edit(\'plain\', \'data\', file=\'\', safety_belt=\'\')\n-        self.assertEqual(self.folder.new.EditableBody(), \'data\')\ndiff --git a/Products/CMFPlone/tests/testPloneTool.py b/Products/CMFPlone/tests/testPloneTool.py\nindex 63ef2fffc..683df9e89 100644\n--- a/Products/CMFPlone/tests/testPloneTool.py\n+++ b/Products/CMFPlone/tests/testPloneTool.py\n@@ -6,7 +6,6 @@\n from Products.CMFPlone.interfaces import IReorderedEvent\n from Products.CMFPlone.interfaces import ISearchSchema\n from Products.CMFPlone.tests import PloneTestCase\n-from Products.CMFPlone.tests import dummy\n from zope.component import getGlobalSiteManager\n from zope.component import getUtility\n from zope.interface import Interface\n@@ -90,35 +89,6 @@ def testvalidateEmailAddresses(self):\n         for address in invalidInputs:\n             self.assertFalse(val(address), \'%s should fail\' % address)\n \n-    def testEditFormatMetadataOfFile(self):\n-        # Test fix for http://dev.plone.org/plone/ticket/1323\n-        self.folder.invokeFactory(\'File\', id=\'file\')\n-        self.folder.file.edit(file=dummy.File(\'foo.zip\'))\n-        self.assertEqual(self.folder.file.Format(), \'application/zip\')\n-        self.assertEqual(self.folder.file.getFile().content_type,\n-                         \'application/zip\')\n-        # Changing the format should be reflected in content_type property\n-        self.utils.editMetadata(self.folder.file, format=\'image/gif\')\n-        self.assertEqual(self.folder.file.Format(), \'image/gif\')\n-        self.assertEqual(self.folder.file.getFile().content_type, \'image/gif\')\n-\n-    def testEditFormatMetadataOfImage(self):\n-        # Test fix for http://dev.plone.org/plone/ticket/1323\n-        self.folder.invokeFactory(\'Image\', id=\'image\')\n-        self.folder.image.edit(file=dummy.Image(\'foo.zip\'))\n-        self.assertEqual(self.folder.image.Format(), \'application/zip\')\n-        self.assertEqual(\n-            \'application/zip\',\n-            self.folder.image.getImage().content_type\n-        )\n-        # Changing the format should be reflected in content_type property\n-        self.utils.editMetadata(self.folder.image, format=\'image/gif\')\n-        self.assertEqual(self.folder.image.Format(), \'image/gif\')\n-        self.assertEqual(\n-            \'image/gif\',\n-            self.folder.image.getImage().content_type\n-        )\n-\n     def testNormalizeStringPunctuation(self):\n         # Punctuation and spacing is removed and replaced by \'-\'\n         self.assertEqual(self.utils.normalizeString("a string with spaces"),\n@@ -366,21 +336,21 @@ def testClearContributors(self):\n \n     def testSetFormat(self):\n         self.assertEqual(self.doc.Format(), \'text/html\')\n-        self.assertEqual(self.doc.text_format, \'text/html\')\n+        self.assertEqual(self.doc.format, \'text/html\')\n         self.utils.editMetadata(self.doc, format=\'text/x-rst\')\n+        self.assertEqual(self.doc.format, \'text/x-rst\')\n         self.assertEqual(self.doc.Format(), \'text/x-rst\')\n-        self.assertEqual(self.doc.text_format, \'text/x-rst\')\n \n     def testClearFormat(self):\n         self.utils.editMetadata(self.doc, format=\'text/x-rst\')\n+        self.assertEqual(self.doc.format, \'text/x-rst\')\n         self.assertEqual(self.doc.Format(), \'text/x-rst\')\n-        self.assertEqual(self.doc.text_format, \'text/x-rst\')\n         self.utils.editMetadata(self.doc, format=\'\')\n-        self.assertEqual(self.doc.Format(), \'text/html\')\n-        self.assertEqual(self.doc.text_format, \'text/html\')\n+        self.assertEqual(self.doc.Format(), \'\')\n+        self.assertEqual(self.doc.format, \'\')\n \n     def testSetLanguage(self):\n-        self.assertEqual(self.doc.Language(), \'en\')\n+        self.assertEqual(self.doc.Language(), \'\')\n         self.utils.editMetadata(self.doc, language=\'de\')\n         self.assertEqual(self.doc.Language(), \'de\')\n \n@@ -611,7 +581,9 @@ def test_pretty_title_or_id_returns_id(self):\n     def test_pretty_title_or_id_when_autogenerated(self):\n         self.setRoles([\'Manager\', \'Member\'])\n         self.folder.setTitle(\'\')\n-        self.folder.setId(\'folder.2004-11-09.0123456789\')\n+        self.folder.__parent__.manage_renameObject(\n+            self.folder.id, \'folder.2004-11-09.0123456789\')\n+        self.folder.reindexObject()\n         self.assertEqual(self.utils.pretty_title_or_id(self.folder),\n                          self.utils.getEmptyTitle())\n         self.assertEqual(self.utils.pretty_title_or_id(self.folder, \'Marker\'),\n@@ -631,8 +603,10 @@ def test_pretty_title_or_id_works_with_method_that_needs_context(self):\n     def test_pretty_title_or_id_on_catalog_brain(self):\n         cat = self.portal.portal_catalog\n         self.setRoles([\'Manager\', \'Member\'])\n-        self.folder.edit(title=\'My pretty title\', subject=\'foobar\')\n-        results = cat(Subject=\'foobar\')\n+        self.folder.title = u\'My pretty title\'\n+        self.folder.subject = (u\'foobar\',)\n+        self.folder.reindexObject()\n+        results = cat(Subject=u\'foobar\')\n         self.assertEqual(len(results), 1)\n         self.assertEqual(self.utils.pretty_title_or_id(results[0]),\n                          \'My pretty title\')\n@@ -640,8 +614,10 @@ def test_pretty_title_or_id_on_catalog_brain(self):\n     def test_pretty_title_or_id_on_catalog_brain_returns_id(self):\n         cat = self.portal.portal_catalog\n         self.setRoles([\'Manager\', \'Member\'])\n-        self.folder.edit(title=\'\', subject=\'foobar\')\n-        results = cat(Subject=\'foobar\')\n+        self.folder.title = u\'\'\n+        self.folder.subject = (u\'foobar\',)\n+        self.folder.reindexObject()\n+        results = cat(Subject=u\'foobar\')\n         self.assertEqual(len(results), 1)\n         self.assertEqual(self.utils.pretty_title_or_id(results[0]),\n                          self.folder.getId())\n@@ -649,9 +625,12 @@ def test_pretty_title_or_id_on_catalog_brain_returns_id(self):\n     def test_pretty_title_or_id_on_catalog_brain_autogenerated(self):\n         cat = self.portal.portal_catalog\n         self.setRoles([\'Manager\', \'Member\'])\n-        self.folder.edit(id=\'folder.2004-11-09.0123456789\',\n-                         title=\'\', subject=\'foobar\')\n-        results = cat(Subject=\'foobar\')\n+        self.folder.__parent__.manage_renameObject(\n+            self.folder.id, \'folder.2004-11-09.0123456789\')\n+        self.folder.title = u\'\'\n+        self.folder.subject = (u\'foobar\',)\n+        self.folder.reindexObject()\n+        results = cat(Subject=u\'foobar\')\n         self.assertEqual(len(results), 1)\n         self.assertEqual(self.utils.pretty_title_or_id(results[0], \'Marker\'),\n                          \'Marker\')\n@@ -662,7 +641,9 @@ def test_pretty_title_or_id_on_catalog_brain_no_title(self):\n         # Remove Title from catalog metadata to simulate a catalog with no\n         # Title metadata and similar pathological cases.\n         cat.delColumn(\'Title\')\n-        self.folder.edit(title=\'\', subject=\'foobar\')\n+        self.folder.title = u\'\'\n+        self.folder.subject = (\'foobar\',)\n+        self.folder.reindexObject()\n         results = cat(Subject=\'foobar\')\n         self.assertEqual(len(results), 1)\n         # Give the portal a title because this is what will show up on\ndiff --git a/Products/CMFPlone/tests/testPloneView.py b/Products/CMFPlone/tests/testPloneView.py\nindex 88ed8dadf..896bcbd64 100644\n--- a/Products/CMFPlone/tests/testPloneView.py\n+++ b/Products/CMFPlone/tests/testPloneView.py\n@@ -25,7 +25,7 @@ def testToLocalizedTime(self):\n     def testToLocalizedSize(self):\n         tolocalsize = self.view.toLocalizedSize\n         value = tolocalsize(3322)\n-        self.assertEquals(value, \'3 KB\')\n+        self.assertEqual(value, \'3 KB\')\n \n     def testIsStructuralFolderWithNonFolder(self):\n         i = dummy.Item()\n@@ -136,16 +136,18 @@ def testGetCurrentFolder(self):\n \n     def testCropText(self):\n         view = Plone(self.portal, self.app.REQUEST)\n-        self.assertEqual(view.cropText(\'Hello world\', 7), \'Hello ...\')\n-        self.assertEqual(view.cropText(\'Hello world\', 99), \'Hello world\')\n-        self.assertEqual(view.cropText(\'Hello world\', 10), \'Hello worl...\')\n+        self.assertEqual(view.cropText(b\'Hello world\', 7), b\'Hello ...\')\n+        self.assertEqual(view.cropText(u\'Hello world\', 7), u\'Hello ...\')\n+        self.assertEqual(view.cropText(b\'Hello world\', 10), b\'Hello worl...\')\n         self.assertEqual(view.cropText(u\'Hello world\', 10), u\'Hello worl...\')\n+        self.assertEqual(view.cropText(b\'Hello world\', 99), b\'Hello world\')\n+        self.assertEqual(view.cropText(u\'Hello world\', 99), u\'Hello world\')\n         self.assertEqual(\n             view.cropText(u\'Koko\\u0159\\xedn\', 5), u\'Koko\\u0159...\')\n         # Test utf encoded string Kokorin with \'r\' and \'i\' accented\n         # Must return 6 characters, because 5th character is two byte\n         text = u\'Koko\\u0159\\xedn\'.encode(\'utf8\')\n-        self.assertEqual(view.cropText(text, 5), \'Koko\\xc5\\x99...\')\n+        self.assertEqual(view.cropText(text, 5), b\'Koko\\xc5\\x99...\')\n \n     def testSiteEncoding(self):\n         view = Plone(self.portal, self.app.REQUEST)\ndiff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py\nindex f233e59d7..5aa1d6b1b 100644\n--- a/Products/CMFPlone/tests/testPortalCreation.py\n+++ b/Products/CMFPlone/tests/testPortalCreation.py\n@@ -1,19 +1,11 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFPlone.tests import PloneTestCase\n-from Products.CMFPlone.tests import dummy\n-\n-from zope.component import getGlobalSiteManager\n-from zope.component import getSiteManager\n-from zope.component import getMultiAdapter\n-from zope.component import getUtility\n-from zope.component import queryUtility\n-from zope.component.interfaces import IComponentLookup\n-from zope.component.interfaces import IComponentRegistry\n-from zope.location.interfaces import ISite\n-from zope.site.hooks import setSite, clearSite\n-\n from Acquisition import aq_base\n-\n+from plone.portlets.constants import CONTEXT_CATEGORY as CONTEXT_PORTLETS\n+from plone.portlets.interfaces import ILocalPortletAssignmentManager\n+from plone.portlets.interfaces import IPortletAssignmentMapping\n+from plone.portlets.interfaces import IPortletManager\n+from plone.protect import createToken\n+from plone.registry.interfaces import IRegistry\n from Products.CMFCore.CachingPolicyManager import CachingPolicyManager\n from Products.CMFCore.permissions import AccessInactivePortalContent\n from Products.CMFCore.utils import getToolByName\n@@ -22,25 +14,29 @@\n from Products.CMFPlone.interfaces import IFilterSchema\n from Products.CMFPlone.interfaces import INavigationSchema\n from Products.CMFPlone.interfaces import ISearchSchema\n-from Products.CMFPlone.UnicodeSplitter import Splitter, I18NNormalizer\n+from Products.CMFPlone.tests import dummy\n+from Products.CMFPlone.tests import PloneTestCase\n+from Products.CMFPlone.UnicodeSplitter import I18NNormalizer\n+from Products.CMFPlone.UnicodeSplitter import Splitter\n from Products.GenericSetup.browser.manage import ExportStepsView\n from Products.GenericSetup.browser.manage import ImportStepsView\n-\n-from Products.StandardCacheManagers.AcceleratedHTTPCacheManager import \\\n+from Products.StandardCacheManagers.AcceleratedHTTPCacheManager import (\n     AcceleratedHTTPCacheManager\n-from Products.StandardCacheManagers.RAMCacheManager import \\\n-    RAMCacheManager\n-\n-from plone.portlets.interfaces import IPortletAssignmentMapping\n-from plone.portlets.interfaces import IPortletManager\n-from plone.portlets.interfaces import ILocalPortletAssignmentManager\n-from plone.portlets.constants import CONTEXT_CATEGORY as CONTEXT_PORTLETS\n-from plone.protect import createToken\n-from plone.registry.interfaces import IRegistry\n+)\n+from Products.StandardCacheManagers.RAMCacheManager import RAMCacheManager\n+from zope.component import getGlobalSiteManager\n+from zope.component import getMultiAdapter\n+from zope.component import getSiteManager\n+from zope.component import getUtility\n+from zope.component import queryUtility\n+from zope.component.interfaces import IComponentLookup\n+from zope.component.interfaces import IComponentRegistry\n+from zope.location.interfaces import ISite\n+from zope.site.hooks import clearSite\n+from zope.site.hooks import setSite\n \n \n class TestPortalCreation(PloneTestCase.PloneTestCase):\n-\n     def afterSetUp(self):\n         self.membership = self.portal.portal_membership\n         self.workflow = self.portal.portal_workflow\n@@ -51,7 +47,6 @@ def afterSetUp(self):\n         self.memberdata = self.portal.portal_memberdata\n         self.catalog = self.portal.portal_catalog\n         self.groups = self.portal.portal_groups\n-        self.factory = self.portal.portal_factory\n         self.skins = self.portal.portal_skins\n         self.transforms = self.portal.portal_transforms\n         self.javascripts = self.portal.portal_javascripts\n@@ -78,27 +73,25 @@ def testPloneSkins(self):\n         # Plone skins should have been set up\n         self.assertTrue(hasattr(self.folder, \'logo.png\'))\n \n-    def testDefaultSkin(self):\n-        # index_html should render\n-        self.portal.index_html()\n-\n     def testNoIndexHtmlDocument(self):\n         # The portal should not contain an index_html Document\n         self.assertFalse(\'index_html\' in self.portal)\n \n     def testCanViewManagementScreen(self):\n         # Make sure the ZMI management screen works\n+        self.setRoles([\'Manager\'])\n         self.portal.manage_main()\n \n     def testWorkflowIsActionProvider(self):\n         # The workflow tool is one of the last remaining action providers.\n         self.assertTrue(\n-            \'portal_workflow\' in self.actions.listActionProviders())\n+            \'portal_workflow\' in self.actions.listActionProviders()\n+        )\n \n     def testMembersFolderMetaType(self):\n-        # Members folder should have meta_type \'ATFolder\'\n+        # Members folder should have meta_type \'Dexterity Container\'\n         members = self.membership.getMembersFolder()\n-        self.assertEqual(members.meta_type, \'ATFolder\')\n+        self.assertEqual(members.meta_type, \'Dexterity Container\')\n \n     def testMembersFolderPortalType(self):\n         # Members folder should have portal_type \'Folder\'\n@@ -142,22 +135,6 @@ def testFolderEditActionHasEditTitle(self):\n         else:\n             self.fail("Folder has no \'edit\' action")\n \n-    def testFolderHasFolderListingAction(self):\n-        # Folders should have a \'folderlisting\' action\n-        folder = self.types.getTypeInfo(\'Folder\')\n-        for action in folder._cloneActions():\n-            if action.id == \'folderlisting\':\n-                break\n-        else:\n-            self.fail("Folder has no \'folderlisting\' action")\n-\n-    def testImagePatch(self):\n-        # Is it ok to remove the imagePatch? Probably not as we\n-        # don\'t want the border attribute ...\n-        self.folder.invokeFactory(\'Image\', id=\'foo\', file=dummy.Image())\n-        endswith = \' alt="" title="" height="16" width="16" />\'\n-        self.assertEqual(self.folder.foo.tag()[-len(endswith):], endswith)\n-\n     def testNoPortalFormTool(self):\n         # portal_form should have been removed\n         self.assertFalse(\'portal_form\' in self.portal)\n@@ -180,18 +157,28 @@ def testFormToolTipsProperty(self):\n \n     def testNavTreeProperties(self):\n         # navtree_properties should contain the new properties\n-        self.assertFalse(self.properties.navtree_properties.hasProperty(\n-            \'parentMetaTypesNotToQuery\'))\n         self.assertFalse(\n-            self.properties.navtree_properties.hasProperty(\'sitemapDepth\'))\n+            self.properties.navtree_properties.hasProperty(\n+                \'parentMetaTypesNotToQuery\'\n+            )\n+        )\n         self.assertFalse(\n-            self.properties.navtree_properties.hasProperty(\'showAllParents\'))\n+            self.properties.navtree_properties.hasProperty(\'sitemapDepth\')\n+        )\n+        self.assertFalse(\n+            self.properties.navtree_properties.hasProperty(\'showAllParents\')\n+        )\n         self.assertFalse(\n-            self.properties.navtree_properties.hasProperty(\'metaTypesNotToList\'))  # noqa\n+            self.properties.navtree_properties.hasProperty(\n+                \'metaTypesNotToList\'\n+            )\n+        )  # noqa\n         self.assertFalse(\n-            self.properties.navtree_properties.hasProperty(\'sortAttribute\'))\n+            self.properties.navtree_properties.hasProperty(\'sortAttribute\')\n+        )\n         self.assertFalse(\n-            self.properties.navtree_properties.hasProperty(\'sortOrder\'))\n+            self.properties.navtree_properties.hasProperty(\'sortOrder\')\n+        )\n \n         registry = getUtility(IRegistry)\n         self.assertTrue(\'plone.workflow_states_to_show\' in registry)\n@@ -252,7 +239,8 @@ def testNoNewsAction(self):\n     def testNewsTopicIsIndexed(self):\n         # News (smart) folder should be cataloged\n         res = self.catalog(\n-            path={\'query\': \'/plone/news/aggregator\', \'depth\': 0})\n+            path={\'query\': \'/plone/news/aggregator\', \'depth\': 0}\n+        )\n         self.assertEqual(len(res), 1)\n         self.assertEqual(res[0].getId, \'aggregator\')\n         self.assertEqual(res[0].Title, \'News\')\n@@ -261,7 +249,8 @@ def testNewsTopicIsIndexed(self):\n     def testEventsTopicIsIndexed(self):\n         # Events (smart) folder should be cataloged\n         res = self.catalog(\n-            path={\'query\': \'/plone/events/aggregator\', \'depth\': 0})\n+            path={\'query\': \'/plone/events/aggregator\', \'depth\': 0}\n+        )\n         self.assertEqual(len(res), 1)\n         self.assertEqual(res[0].getId, \'aggregator\')\n         self.assertEqual(res[0].Title, \'Events\')\n@@ -269,8 +258,7 @@ def testEventsTopicIsIndexed(self):\n \n     def testNewsFolderIsIndexed(self):\n         # News folder should be cataloged\n-        res = self.catalog(\n-            path={\'query\': \'/plone/news\', \'depth\': 0})\n+        res = self.catalog(path={\'query\': \'/plone/news\', \'depth\': 0})\n         self.assertEqual(len(res), 1)\n         self.assertEqual(res[0].getId, \'news\')\n         self.assertEqual(res[0].Title, \'News\')\n@@ -278,8 +266,7 @@ def testNewsFolderIsIndexed(self):\n \n     def testEventsFolderIsIndexed(self):\n         # Events folder should be cataloged\n-        res = self.catalog(\n-            path={\'query\': \'/plone/events\', \'depth\': 0})\n+        res = self.catalog(path={\'query\': \'/plone/events\', \'depth\': 0})\n         self.assertEqual(len(res), 1)\n         self.assertEqual(res[0].getId, \'events\')\n         self.assertEqual(res[0].Title, \'Events\')\n@@ -291,10 +278,7 @@ def testNewsFolder(self):\n         self.assertEqual(folder.portal_type, \'Folder\')\n         self.assertEqual(folder._ordering, \'unordered\')\n         self.assertEqual(folder.getDefaultPage(), \'aggregator\')\n-        self.assertEqual(folder.getRawLocallyAllowedTypes(), (\'News Item\',))\n-        self.assertEqual(folder.getRawImmediatelyAddableTypes(),\n-                         (\'News Item\',))\n-        self.assertEqual(folder.checkCreationFlag(), False)\n+        self.assertEqual(folder.immediately_addable_types, [\'News Item\'])\n \n     def testEventsFolder(self):\n         self.assertTrue(\'events\' in self.portal.objectIds())\n@@ -302,46 +286,61 @@ def testEventsFolder(self):\n         self.assertEqual(folder.portal_type, \'Folder\')\n         self.assertEqual(folder._ordering, \'unordered\')\n         self.assertEqual(folder.getDefaultPage(), \'aggregator\')\n-        self.assertEqual(folder.getRawLocallyAllowedTypes(), (\'Event\',))\n-        self.assertEqual(folder.getRawImmediatelyAddableTypes(), (\'Event\',))\n-        self.assertEqual(folder.checkCreationFlag(), False)\n+        self.assertEqual(folder.immediately_addable_types, [\'Event\'])\n \n     def testNewsCollection(self):\n         # News collection is in place as default view and has a criterion to\n         # show only News Items, and uses the folder_summary_view.\n-        self.assertEqual([\'aggregator\'],\n-                         [i for i in self.portal.news.objectIds()])\n+        self.assertEqual(\n+            [\'aggregator\'], [i for i in self.portal.news.objectIds()]\n+        )\n         collection = getattr(self.portal.news, \'aggregator\')\n         self.assertEqual(collection._getPortalTypeName(), \'Collection\')\n         query = collection.query\n-        self.assertTrue({\'i\': \'portal_type\',\n-                         \'o\': \'plone.app.querystring.operation.selection.any\',\n-                         \'v\': [\'News Item\']} in query)\n-        self.assertTrue({\'i\': \'review_state\',\n-                         \'o\': \'plone.app.querystring.operation.selection.any\',\n-                         \'v\': [\'published\']} in query)\n-        self.assertEqual(collection.getLayout(), \'folder_summary_view\')\n-        self.assertEqual(collection.checkCreationFlag(), False)\n+        self.assertTrue(\n+            {\n+                \'i\': \'portal_type\',\n+                \'o\': \'plone.app.querystring.operation.selection.any\',\n+                \'v\': [\'News Item\'],\n+            }\n+            in query\n+        )\n+        self.assertTrue(\n+            {\n+                \'i\': \'review_state\',\n+                \'o\': \'plone.app.querystring.operation.selection.any\',\n+                \'v\': [\'published\'],\n+            }\n+            in query\n+        )\n+        self.assertEqual(collection.getLayout(), \'summary_view\')\n \n     def testEventsCollection(self):\n         # Events collection is in place as default view and has criterion to\n         # show only future Events Items.\n-        self.assertEqual([\'aggregator\'],\n-                         [i for i in self.portal.events.objectIds()])\n+        self.assertEqual(\n+            [\'aggregator\'], [i for i in self.portal.events.objectIds()]\n+        )\n         collection = getattr(self.portal.events, \'aggregator\')\n         self.assertEqual(collection._getPortalTypeName(), \'Collection\')\n         query = collection.query\n-        self.assertTrue({\'i\': \'portal_type\',\n-                         \'o\': \'plone.app.querystring.operation.selection.any\',\n-                         \'v\': [\'Event\']} in query)\n-        self.assertTrue({\'i\': \'review_state\',\n-                         \'o\': \'plone.app.querystring.operation.selection.any\',\n-                         \'v\': [\'published\']} in query)\n-        self.assertTrue({\n-            \'i\': \'start\',\n-            \'o\': \'plone.app.querystring.operation.date.afterToday\',\n-            \'v\': \'\'} in query)\n-        self.assertEqual(collection.checkCreationFlag(), False)\n+        self.assertTrue(\n+            {\n+                \'i\': \'portal_type\',\n+                \'o\': \'plone.app.querystring.operation.selection.any\',\n+                \'v\': [\'Event\'],\n+            }\n+            in query\n+        )\n+        self.assertTrue(\n+            {\n+                \'i\': \'review_state\',\n+                \'o\': \'plone.app.querystring.operation.selection.any\',\n+                \'v\': [\'published\'],\n+            }\n+            in query\n+        )\n+        self.assertEqual(collection.getLayout(), \'event_listing\')\n \n     def testObjectButtonActions(self):\n         self.setRoles([\'Manager\', \'Member\'])\n@@ -360,33 +359,26 @@ def testDefaultGroupsAdded(self):\n         self.assertTrue(\'Administrators\' in self.groups.listGroupIds())\n         self.assertTrue(\'Reviewers\' in self.groups.listGroupIds())\n \n-    def testDefaultTypesInPortalFactory(self):\n-        types = self.factory.getFactoryTypes().keys()\n-        for metaType in (\'Document\', \'Event\', \'File\', \'Folder\', \'Image\',\n-                         \'Folder\', \'Link\', \'News Item\',\n-                         \'Topic\'):\n-            self.assertTrue(metaType in types)\n-\n     def testGenerateTabsSiteProperty(self):\n         # The generate_tabs site property should be emtpy\n         registry = getUtility(IRegistry)\n         navigation_settings = registry.forInterface(\n-            INavigationSchema,\n-            prefix="plone"\n+            INavigationSchema, prefix="plone"\n         )\n         self.assertTrue(\'plone.generate_tabs\' in registry)\n         self.assertTrue(navigation_settings.generate_tabs)\n \n     def testSelectableViewsOnFolder(self):\n         views = self.portal.portal_types.Folder.getAvailableViewMethods(None)\n-        self.assertTrue(\'folder_listing\' in views)\n-        self.assertTrue(\'atct_album_view\' in views)\n+        self.assertTrue(\'listing_view\' in views)\n+        self.assertTrue(\'album_view\' in views)\n \n     def testSelectableViewsOnTopic(self):\n-        views = self.portal.portal_types.Topic.getAvailableViewMethods(None)\n-        self.assertTrue(\'folder_listing\' in views)\n-        self.assertTrue(\'atct_album_view\' in views)\n-        self.assertTrue(\'atct_topic_view\' in views)\n+        views = self.portal.portal_types.Collection.getAvailableViewMethods(\n+            None\n+        )\n+        self.assertTrue(\'listing_view\' in views)\n+        self.assertTrue(\'album_view\' in views)\n \n     def testLocationMemberdataProperty(self):\n         # portal_memberdata should have a location property\n@@ -412,18 +404,9 @@ def testSiteSetupActionIsPresent(self):\n         actions = self.actions.listActions()\n         self.assertEqual(\n             [x.title for x in actions if x.title == \'Site Setup\'],\n-            [u\'Site Setup\']\n+            [u\'Site Setup\'],\n         )\n \n-    def testFolderlistingAction(self):\n-        # Make sure the folderlisting action of a Folder is /view, to ensure\n-        # that the layout template will be resolved\n-        # (see PloneTool.browserDefault)\n-        self.assertEqual(\n-            self.types[\'Folder\'].getActionObject(\'folder/folderlisting\')\n-                .getActionExpression(),\n-            \'string:${folder_url}/view\')\n-\n     def testEnableLivesearchProperty(self):\n         # registry should have enable_livesearch property\n         registry = getUtility(IRegistry)\n@@ -445,8 +428,9 @@ def testTTWLockableProperty(self):\n     def testPortalFTIIsDynamicFTI(self):\n         # Plone Site FTI should be a DynamicView FTI\n         fti = self.portal.getTypeInfo()\n-        self.assertEqual(fti.meta_type,\n-                         \'Factory-based Type Information with dynamic views\')\n+        self.assertEqual(\n+            fti.meta_type, \'Factory-based Type Information with dynamic views\'\n+        )\n \n     def testPloneSiteFTIHasMethodAliases(self):\n         # Should add method aliases to the Plone Site FTI\n@@ -465,8 +449,9 @@ def testSiteActions(self):\n         atool = self.actions\n         self.assertFalse(atool.getActionInfo(\'site_actions/sitemap\') is None)\n         self.assertFalse(atool.getActionInfo(\'site_actions/contact\') is None)\n-        self.assertFalse(atool.getActionInfo(\n-            \'site_actions/accessibility\') is None)\n+        self.assertFalse(\n+            atool.getActionInfo(\'site_actions/accessibility\') is None\n+        )\n \n     def testSetupAction(self):\n         self.setRoles([\'Manager\', \'Member\'])\n@@ -475,8 +460,17 @@ def testSetupAction(self):\n \n     def testTypesHaveSelectedLayoutViewAction(self):\n         # Should add method aliases to the Plone Site FTI\n-        types = (\'Document\', \'Event\', \'File\', \'Folder\', \'Image\', \'Link\',\n-                 \'News Item\', \'Topic\', \'Plone Site\')\n+        types = (\n+            \'Document\',\n+            \'Event\',\n+            \'File\',\n+            \'Folder\',\n+            \'Image\',\n+            \'Link\',\n+            \'News Item\',\n+            \'Collection\',\n+            \'Plone Site\',\n+        )\n         for typeName in types:\n             fti = getattr(self.types, typeName)\n             aliases = fti.getMethodAliases()\n@@ -486,11 +480,14 @@ def testPortalUsesMethodAliases(self):\n         fti = self.portal.getTypeInfo()\n         for action in fti.listActions():\n             if action.getId() == \'edit\':\n-                self.assertEqual(action.getActionExpression(),\n-                                 \'string:${object_url}/edit\')\n+                self.assertEqual(\n+                    action.getActionExpression(), \'string:${object_url}/edit\'\n+                )\n             if action.getId() == \'sharing\':\n-                self.assertEqual(action.getActionExpression(),\n-                                 \'string:${object_url}/sharing\')\n+                self.assertEqual(\n+                    action.getActionExpression(),\n+                    \'string:${object_url}/sharing\',\n+                )\n \n     def testNavigationAndSearchPanelsInstalled(self):\n         # Navigation and search panels should be installed\n@@ -504,35 +501,43 @@ def testNavigationAndSearchPanelsInstalled(self):\n         self.assertTrue(haveSearch and haveNavigation)\n \n     def testOwnerHasAccessInactivePermission(self):\n-        permission_on_role = [p for p in self.portal.permissionsOfRole(\'Owner\')\n-                              if p[\'name\'] == AccessInactivePortalContent][0]\n+        permission_on_role = [\n+            p\n+            for p in self.portal.permissionsOfRole(\'Owner\')\n+            if p[\'name\'] == AccessInactivePortalContent\n+        ][0]\n         self.assertTrue(permission_on_role[\'selected\'])\n         cur_perms = self.portal.permission_settings(\n-            AccessInactivePortalContent)[0]\n+            AccessInactivePortalContent\n+        )[0]\n         self.assertTrue(cur_perms[\'acquire\'])\n \n     def testSyndicationEnabledByDefault(self):\n         syn = getMultiAdapter(\n-            (self.portal, self.portal.REQUEST),\n-            name="syndication-util")\n+            (self.portal, self.portal.REQUEST), name="syndication-util"\n+        )\n         self.assertTrue(syn.site_enabled())\n \n+    # FIXME: Syndication is not enabled by default in DX\n     def testSyndicationEnabledOnNewsAndEvents(self):\n         syn = getMultiAdapter(\n             (self.portal.news.aggregator, self.portal.REQUEST),\n-            name="syndication-util")\n-        self.assertTrue(syn.context_enabled())\n+            name="syndication-util",\n+        )\n+        self.assertFalse(syn.context_enabled())\n         syn = getMultiAdapter(\n             (self.portal.events.aggregator, self.portal.REQUEST),\n-            name="syndication-util")\n-        self.assertTrue(syn.context_enabled())\n+            name="syndication-util",\n+        )\n+        self.assertFalse(syn.context_enabled())\n \n     def testSyndicationTabDisabled(self):\n         # Syndication tab should be disabled by default\n         for action in self.actions.listActions():\n             if action.getId() == \'syndication\' and action.visible:\n                 self.fail(\n-                    "Actions tool still has visible \'syndication\' action")\n+                    "Actions tool still has visible \'syndication\' action"\n+                )\n \n     def testObjectButtonActionsInvisibleOnPortalRoot(self):\n         # only a manager would have proper permissions\n@@ -558,8 +563,10 @@ def testObjectButtonActionsOnDefaultDocumentDoNotApplyToParent(self):\n         self.assertEqual(len(buttons), 4)\n         urls = [a[\'url\'] for a in buttons]\n         for url in urls:\n-            self.assertFalse(\'index_html\' not in url,\n-                             \'Action wrongly applied to parent object %s\' % url)  # noqa\n+            self.assertFalse(\n+                \'index_html\' not in url,\n+                \'Action wrongly applied to parent object %s\' % url,\n+            )  # noqa\n \n     def testObjectButtonActionsPerformCorrectAction(self):\n         # only a manager would have proper permissions\n@@ -569,18 +576,24 @@ def testObjectButtonActionsPerformCorrectAction(self):\n         buttons = acts[\'object_buttons\']\n         self.assertEqual(len(buttons), 4)\n         # special case for delete which needs a confirmation form\n-        urls = [(a[\'id\'], a[\'url\']) for a in buttons\n-                if a[\'id\'] not in (\'delete\',)]\n+        urls = [\n+            (a[\'id\'], a[\'url\']) for a in buttons if a[\'id\'] not in (\'delete\',)\n+        ]\n         for url in urls:\n             # ensure that e.g. the \'copy\' url contains object_copy\n-            self.assertTrue(\'object_\' + url[0] in url[1],\n-                            "%s does not perform the expected object_%s action"\n-                            % (url[0], url[0]))\n-\n-        delete_action = [(a[\'id\'], a[\'url\']) for a in buttons\n-                         if a[\'id\'] == \'delete\'][0]\n-        self.assertTrue(\'delete_confirmation\' in delete_action[1],\n-                        "object_delete does not use the confirmation form")\n+            self.assertTrue(\n+                \'object_\' + url[0] in url[1],\n+                "%s does not perform the expected object_%s action"\n+                % (url[0], url[0]),\n+            )\n+\n+        delete_action = [\n+            (a[\'id\'], a[\'url\']) for a in buttons if a[\'id\'] == \'delete\'\n+        ][0]\n+        self.assertTrue(\n+            \'delete_confirmation\' in delete_action[1],\n+            "object_delete does not use the confirmation form",\n+        )\n \n     def testObjectButtonActionsInExpectedOrder(self):\n         # The object buttons need to be in a standardized order\n@@ -589,57 +602,63 @@ def testObjectButtonActionsInExpectedOrder(self):\n         self.folder.cb_dataValid = True\n         acts = self.actions.listFilteredActionsFor(self.folder)\n         buttons = acts[\'object_buttons\']\n-        self.assertEqual(len(buttons), 5)\n+        self.assertEqual(len(buttons), 6)\n         ids = [(a[\'id\']) for a in buttons]\n-        self.assertEqual(ids, [\'cut\', \'copy\', \'paste\', \'delete\', \'rename\', ])\n+        self.assertEqual(\n+            ids,\n+            [\'cut\', \'copy\', \'paste\', \'delete\', \'rename\', \'ical_import_enable\'],\n+        )\n \n     def testCustomSkinFolderExists(self):\n         # the custom skin needs to be created\n         self.assertTrue(\'custom\' in self.skins)\n \n     def testCustomSkinFolderComesFirst(self):\n-        firstInDefaultSkin = (\n-            self.skins.getSkinPath(\'Plone Default\').split(\',\')[0])\n+        firstInDefaultSkin = self.skins.getSkinPath(\'Plone Default\').split(\n+            \',\'\n+        )[0]\n         self.assertEqual(\n-            firstInDefaultSkin, \'custom\',\n+            firstInDefaultSkin,\n+            \'custom\',\n             "The \'custom\' layer was not the first in the Plone Default skin. "\n-            "It was %r." % firstInDefaultSkin)\n+            "It was %r." % firstInDefaultSkin,\n+        )\n \n     def testMemberHasViewGroupsPermission(self):\n         # Member should be granted the \'View Groups\' permission\n-        member_has_permission = [p for p in\n-                                 self.portal.permissionsOfRole(\'Member\')\n-                                 if p[\'name\'] == \'View Groups\'][0]\n+        member_has_permission = [\n+            p\n+            for p in self.portal.permissionsOfRole(\'Member\')\n+            if p[\'name\'] == \'View Groups\'\n+        ][0]\n         self.assertTrue(member_has_permission[\'selected\'])\n \n     def testDiscussionItemWorkflow(self):\n         # By default the discussion item has the comment_one_state_workflow\n         self.assertEqual(\n             self.workflow.getChainForPortalType(\'Discussion Item\'),\n-            (\'comment_one_state_workflow\',))\n+            (\'comment_one_state_workflow\',),\n+        )\n \n     def testFolderHasFolderListingView(self):\n         # Folder type should allow \'folder_listing\'\n-        self.assertTrue(\'folder_listing\' in self.types.Folder.view_methods)\n+        self.assertTrue(\'listing_view\' in self.types.Folder.view_methods)\n \n     def testFolderHasSummaryView(self):\n         # Folder type should allow \'folder_summary_view\'\n-        self.assertTrue(\n-            \'folder_summary_view\' in self.types.Folder.view_methods)\n+        self.assertTrue(\'summary_view\' in self.types.Folder.view_methods)\n \n     def testFolderHasTabularView(self):\n         # Folder type should allow \'folder_tabular_view\'\n-        self.assertTrue(\n-            \'folder_tabular_view\' in self.types.Folder.view_methods)\n+        self.assertTrue(\'tabular_view\' in self.types.Folder.view_methods)\n \n     def testFolderHasAlbumView(self):\n         # Folder type should allow \'atct_album_view\'\n-        self.assertTrue(\'atct_album_view\' in self.types.Folder.view_methods)\n+        self.assertTrue(\'album_view\' in self.types.Folder.view_methods)\n \n     def testConfigurableSafeHtmlTransform(self):\n         registry = getUtility(IRegistry)\n-        settings = registry.forInterface(\n-            IFilterSchema, prefix="plone")\n+        settings = registry.forInterface(IFilterSchema, prefix="plone")\n         # The safe_html transformation should be configurable\n         try:\n             settings.disable_filtering\n@@ -662,8 +681,10 @@ def testCacheManagers(self):\n     def testHomeActionUsesView(self):\n         actions = self.actions.listActions()\n         homeAction = [x for x in actions if x.id == \'index_html\'][0]\n-        self.assertEqual(homeAction.getInfoData()[0][\'url\'].text,\n-                         \'string:${globals_view/navigationRootUrl}\')\n+        self.assertEqual(\n+            homeAction.getInfoData()[0][\'url\'].text,\n+            \'string:${globals_view/navigationRootUrl}\',\n+        )\n \n     def testPloneLexicon(self):\n         # Plone lexicon should use new splitter and case normalizer\n@@ -739,33 +760,47 @@ def testUtilityRegistration(self):\n \n     def testPortletManagersInstalled(self):\n         sm = getSiteManager(self.portal)\n-        registrations = [r.name for r in sm.registeredUtilities()\n-                         if IPortletManager == r.provided]\n-        self.assertEqual([\'plone.dashboard1\', \'plone.dashboard2\',\n-                          \'plone.dashboard3\', \'plone.dashboard4\',\n-                          \'plone.footerportlets\',\n-                          \'plone.leftcolumn\', \'plone.rightcolumn\'],\n-                         sorted(registrations))\n+        registrations = [\n+            r.name\n+            for r in sm.registeredUtilities()\n+            if IPortletManager == r.provided\n+        ]\n+        self.assertEqual(\n+            [\n+                \'plone.dashboard1\',\n+                \'plone.dashboard2\',\n+                \'plone.dashboard3\',\n+                \'plone.dashboard4\',\n+                \'plone.footerportlets\',\n+                \'plone.leftcolumn\',\n+                \'plone.rightcolumn\',\n+            ],\n+            sorted(registrations),\n+        )\n \n     def testPortletAssignmentsAtRoot(self):\n         leftColumn = getUtility(IPortletManager, name=u\'plone.leftcolumn\')\n         rightColumn = getUtility(IPortletManager, name=u\'plone.rightcolumn\')\n \n-        left = getMultiAdapter((self.portal, leftColumn,),\n-                               IPortletAssignmentMapping)\n-        right = getMultiAdapter((self.portal, rightColumn,),\n-                                IPortletAssignmentMapping)\n+        left = getMultiAdapter(\n+            (self.portal, leftColumn), IPortletAssignmentMapping\n+        )\n+        right = getMultiAdapter(\n+            (self.portal, rightColumn), IPortletAssignmentMapping\n+        )\n \n         self.assertEqual(len(left), 1)\n-        self.assertEqual(len(right), 0)\n+        self.assertEqual(len(right), 2)\n \n     def testPortletBlockingForMembersFolder(self):\n         members = self.portal.Members\n         rightColumn = getUtility(IPortletManager, name=u\'plone.rightcolumn\')\n-        portletAssignments = getMultiAdapter((members, rightColumn,),\n-                                             ILocalPortletAssignmentManager)\n+        portletAssignments = getMultiAdapter(\n+            (members, rightColumn), ILocalPortletAssignmentManager\n+        )\n         self.assertEqual(\n-            True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))\n+            True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS)\n+        )\n \n     def testAddablePortletsInColumns(self):\n         for name in (u\'plone.leftcolumn\', u\'plone.rightcolumn\'):\n@@ -774,73 +809,113 @@ def testAddablePortletsInColumns(self):\n                 p.addview for p in column.getAddablePortletTypes()\n             ]\n             addable_types.sort()\n-            self.assertEqual([\n-                \'plone.portlet.collection.Collection\',\n-                \'plone.portlet.static.Static\',\n-                \'portlets.Actions\',\n-                \'portlets.Classic\',\n-                \'portlets.Login\',\n-                \'portlets.Navigation\',\n-                \'portlets.News\',\n-                \'portlets.Recent\',\n-                \'portlets.Review\',\n-                \'portlets.Search\',\n-                \'portlets.rss\'], addable_types)\n+            self.assertEqual(\n+                [\n+                    \'plone.portlet.collection.Collection\',\n+                    \'plone.portlet.static.Static\',\n+                    \'portlets.Actions\',\n+                    \'portlets.Calendar\',\n+                    \'portlets.Classic\',\n+                    \'portlets.Events\',\n+                    \'portlets.Login\',\n+                    \'portlets.Navigation\',\n+                    \'portlets.News\',\n+                    \'portlets.Recent\',\n+                    \'portlets.Review\',\n+                    \'portlets.Search\',\n+                    \'portlets.rss\',\n+                ],\n+                addable_types,\n+            )\n \n     def testAddablePortletsInDashboard(self):\n-        for name in (\'plone.dashboard1\', \'plone.dashboard2\',\n-                     \'plone.dashboard3\', \'plone.dashboard4\'):\n+        for name in (\n+            \'plone.dashboard1\',\n+            \'plone.dashboard2\',\n+            \'plone.dashboard3\',\n+            \'plone.dashboard4\',\n+        ):\n             column = getUtility(IPortletManager, name=name)\n             addable_types = [\n                 p.addview for p in column.getAddablePortletTypes()\n             ]\n             addable_types.sort()\n-            self.assertEqual([\n-                \'plone.portlet.collection.Collection\',\n-                \'plone.portlet.static.Static\',\n-                \'portlets.Actions\',\n-                \'portlets.Classic\',\n-                \'portlets.News\',\n-                \'portlets.Recent\',\n-                \'portlets.Review\',\n-                \'portlets.Search\',\n-                \'portlets.rss\'\n-            ], addable_types)\n+            self.assertEqual(\n+                [\n+                    \'plone.portlet.collection.Collection\',\n+                    \'plone.portlet.static.Static\',\n+                    \'portlets.Actions\',\n+                    \'portlets.Calendar\',\n+                    \'portlets.Classic\',\n+                    \'portlets.Events\',\n+                    \'portlets.News\',\n+                    \'portlets.Recent\',\n+                    \'portlets.Review\',\n+                    \'portlets.Search\',\n+                    \'portlets.rss\',\n+                ],\n+                addable_types,\n+            )\n \n     def testReaderEditorRoles(self):\n         self.assertTrue(\'Reader\' in self.portal.valid_roles())\n         self.assertTrue(\'Editor\' in self.portal.valid_roles())\n-        self.assertTrue(\'Reader\' in self.portal.acl_users.portal_role_manager\n-                                        .listRoleIds())\n-        self.assertTrue(\'Editor\' in self.portal.acl_users.portal_role_manager\n-                                        .listRoleIds())\n-        self.assertTrue(\'View\' in\n-                        [r[\'name\'] for r in\n-                            self.portal.permissionsOfRole(\'Reader\')\n-                            if r[\'selected\']])\n-        self.assertTrue(\'Modify portal content\' in\n-                        [r[\'name\'] for r in\n-                            self.portal.permissionsOfRole(\'Editor\')\n-                            if r[\'selected\']])\n+        self.assertTrue(\n+            \'Reader\' in self.portal.acl_users.portal_role_manager.listRoleIds()\n+        )\n+        self.assertTrue(\n+            \'Editor\' in self.portal.acl_users.portal_role_manager.listRoleIds()\n+        )\n+        self.assertTrue(\n+            \'View\'\n+            in [\n+                r[\'name\']\n+                for r in self.portal.permissionsOfRole(\'Reader\')\n+                if r[\'selected\']\n+            ]\n+        )\n+        self.assertTrue(\n+            \'Modify portal content\'\n+            in [\n+                r[\'name\']\n+                for r in self.portal.permissionsOfRole(\'Editor\')\n+                if r[\'selected\']\n+            ]\n+        )\n \n     def testWorkflowsInstalled(self):\n-        for wf in [\'intranet_workflow\', \'intranet_folder_workflow\',\n-                   \'one_state_workflow\', \'simple_publication_workflow\']:\n+        for wf in [\n+            \'intranet_workflow\',\n+            \'intranet_folder_workflow\',\n+            \'one_state_workflow\',\n+            \'simple_publication_workflow\',\n+        ]:\n             self.assertTrue(wf in self.portal.portal_workflow)\n \n     def testAddPermisssionsGivenToContributorRole(self):\n         self.assertTrue(\'Contributor\' in self.portal.valid_roles())\n-        self.assertTrue(\'Contributor\' in self.portal.acl_users\n-                        .portal_role_manager.listRoleIds())\n-        for p in [\'Add portal content\', \'Add portal folders\',\n-                  \'ATContentTypes: Add Document\',\n-                  \'ATContentTypes: Add Event\', \'ATContentTypes: Add File\',\n-                  \'ATContentTypes: Add Folder\',\n-                  \'ATContentTypes: Add Link\',\n-                  \'ATContentTypes: Add News Item\', ]:\n-            self.assertTrue(p in [r[\'name\'] for r in\n-                                  self.portal.permissionsOfRole(\'Contributor\')\n-                                  if r[\'selected\']])\n+        self.assertTrue(\n+            \'Contributor\'\n+            in self.portal.acl_users.portal_role_manager.listRoleIds()\n+        )\n+        for p in [\n+            \'Add portal content\',\n+            \'Add portal folders\',\n+            \'plone.app.contenttypes: Add Document\',\n+            \'plone.app.contenttypes: Add Event\',\n+            \'plone.app.contenttypes: Add File\',\n+            \'plone.app.contenttypes: Add Folder\',\n+            \'plone.app.contenttypes: Add Link\',\n+            \'plone.app.contenttypes: Add News Item\',\n+        ]:\n+            self.assertTrue(\n+                p\n+                in [\n+                    r[\'name\']\n+                    for r in self.portal.permissionsOfRole(\'Contributor\')\n+                    if r[\'selected\']\n+                ]\n+            )\n \n     def testSharingAction(self):\n         # Should be in portal_actions\n@@ -848,20 +923,30 @@ def testSharingAction(self):\n \n         # Should not be in any of the default FTIs\n         for fti in self.types.values():\n-            self.assertFalse(\'local_roles\' in [\n-                             a.id for a in fti.listActions()])\n+            self.assertFalse(\n+                \'local_roles\' in [a.id for a in fti.listActions()]\n+            )\n \n     def testSecondaryEditorPermissionsGivenToEditorRole(self):\n-        for p in [\'Manage properties\', \'Modify view template\',\n-                  \'Request review\']:\n-            self.assertTrue(p in [r[\'name\'] for r in\n-                                  self.portal.permissionsOfRole(\'Editor\')\n-                                  if r[\'selected\']])\n+        for p in [\n+            \'Manage properties\',\n+            \'Modify view template\',\n+            \'Request review\',\n+        ]:\n+            self.assertTrue(\n+                p\n+                in [\n+                    r[\'name\']\n+                    for r in self.portal.permissionsOfRole(\'Editor\')\n+                    if r[\'selected\']\n+                ]\n+            )\n \n     def testNonFolderishTabsProperty(self):\n         registry = getUtility(IRegistry)\n-        navigation_settings = registry.forInterface(INavigationSchema,\n-                                                    prefix="plone")\n+        navigation_settings = registry.forInterface(\n+            INavigationSchema, prefix="plone"\n+        )\n         self.assertEqual(True, navigation_settings.nonfolderish_tabs)\n \n     def testNoDoubleGenericSetupImportSteps(self):\n@@ -882,7 +967,6 @@ def testNoInvalidGenericSetupExportSteps(self):\n \n \n class TestPortalBugs(PloneTestCase.PloneTestCase):\n-\n     def afterSetUp(self):\n         self.membership = self.portal.portal_membership\n         self.catalog = self.portal.portal_catalog\n@@ -909,7 +993,6 @@ def testFinalStepsWithMembersFolderDeleted(self):\n \n \n class TestManagementPageCharset(PloneTestCase.PloneTestCase):\n-\n     def afterSetUp(self):\n         self.properties = self.portal.portal_properties\n \n@@ -920,7 +1003,6 @@ def testManagementPageCharset(self):\n \n \n class TestAddPloneSite(PloneTestCase.PloneTestCase):\n-\n     def afterSetUp(self):\n         self.request = self.app.REQUEST\n \ndiff --git a/Products/CMFPlone/tests/testQueryCatalog.py b/Products/CMFPlone/tests/testQueryCatalog.py\nindex 6944bf183..f1ebac999 100644\n--- a/Products/CMFPlone/tests/testQueryCatalog.py\n+++ b/Products/CMFPlone/tests/testQueryCatalog.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n # Test queryCatalog and plone search forms\n+from plone.app.textfield.value import RichTextValue\n from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.interfaces import INavigationSchema\n from Products.CMFPlone.interfaces import ISearchSchema\n@@ -240,7 +241,8 @@ class TestQueryCatalogParseError(PloneTestCase.PloneTestCase):\n     """\n \n     def afterSetUp(self):\n-        self.folder.invokeFactory(\'Document\', id=\'doc\', text=\'foo bar baz\')\n+        self.folder.invokeFactory(\n+            \'Document\', id=\'doc\', text=RichTextValue(u\'foo bar baz\'))\n \n     def testSearchableText(self):\n         request = {\'SearchableText\': \'foo\'}\ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex 72c7e4218..582b97f44 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -62,14 +62,14 @@ def test_cooking_resources(self):\n                 self.portal.absolute_url()\n             )\n         )\n-        self.assertTrue(\'alert("Hi!");alert("Ho!");\' in resp_js.getBody())\n+        self.assertIn(b\'alert("Hi!");alert("Ho!");\', resp_js.getBody())\n \n         resp_css = subrequest(\n             \'{0}/++plone++static/foobar-compiled.css\'.format(\n                 self.portal.absolute_url()\n             )\n         )\n-        self.assertTrue(\'body{color:blue}\' in resp_css.getBody())\n+        self.assertIn(b\'body{color:blue}\', resp_css.getBody())\n \n     def test_dont_minify_already_minified(self):\n         registry = getUtility(IRegistry)\n@@ -95,8 +95,8 @@ def test_dont_minify_already_minified(self):\n         container = persistent_directory[OVERRIDE_RESOURCE_DIRECTORY_NAME]\n         container.makeDirectory(\'static\')\n         directory = container[\'static\']\n-        directory.writeFile(\'foobar.min.js\', \'alert("Hi!");\\n\\nalert("Ho!");\')\n-        directory.writeFile(\'foobar.min.css\', \'body {\\ncolor: blue;\\n}\')\n+        directory.writeFile(\'foobar.min.js\', b\'alert("Hi!");\\n\\nalert("Ho!");\')\n+        directory.writeFile(\'foobar.min.css\', b\'body {\\ncolor: blue;\\n}\')\n \n         cookWhenChangingSettings(self.portal, bundle)\n \n@@ -105,14 +105,14 @@ def test_dont_minify_already_minified(self):\n                 self.portal.absolute_url()\n             )\n         )\n-        self.assertTrue(\'alert("Hi!");\\n\\nalert("Ho!");\' in resp_js.getBody())\n+        self.assertIn(b\'alert("Hi!");\\n\\nalert("Ho!");\', resp_js.getBody())\n \n         resp_css = subrequest(\n             \'{0}/++plone++static/foobar-compiled.css\'.format(\n                 self.portal.absolute_url()\n             )\n         )\n-        self.assertTrue(\'body {\\ncolor: blue;\\n}\' in resp_css.getBody())\n+        self.assertIn(b\'body {\\ncolor: blue;\\n}\', resp_css.getBody())\n \n     def test_cook_only_css(self):\n         registry = getUtility(IRegistry)\n@@ -146,7 +146,7 @@ def test_cook_only_css(self):\n                 self.portal.absolute_url()\n             )\n         )\n-        self.assertTrue(\'body {\\ncolor: red;\\n}\' in resp_css.getBody())\n+        self.assertIn(b\'body {\\ncolor: red;\\n}\', resp_css.getBody())\n \n     def test_cooking_missing(self):\n         registry = getUtility(IRegistry)\n@@ -171,7 +171,7 @@ def test_cooking_missing(self):\n                 self.portal.absolute_url()\n             )\n         )\n-        self.assertTrue(\'Could not find resource\' in resp.getBody())\n+        self.assertIn(b\'Could not find resource\', resp.getBody())\n \n     def test_error(self):\n         registry = getUtility(IRegistry)\n@@ -204,7 +204,7 @@ def test_error(self):\n                 self.portal.absolute_url()\n             )\n         )\n-        self.assertTrue(\'error cooking\' in resp.getBody())\n+        self.assertIn(b\'error cooking\', resp.getBody())\n \n \n class TestResourceNodeImporter(PloneTestCase.PloneTestCase):\n@@ -241,14 +241,15 @@ def _get_resource_dom(self, name=\'++resource++/resource.js\',\n \n     def test_resource_blacklist(self):\n         # Ensure that blacklisted resources aren\'t imported\n-        importer = self._get_importer(set((\'++resource++/bad_resource.js\',)))\n+        importer = self._get_importer({\'++resource++/bad_resource.js\'})\n         dom = self._get_resource_dom("++resource++/bad_resource.js")\n         importer._importNode(dom.documentElement)\n         js_files = [x.js for x in self._get_resources().values()]\n-        self.assertTrue("++resource++/bad_resource.js" not in js_files)\n-        self.assertTrue(\n-            "resource-bad_resource-js" not in\n-            self._get_legacy_bundle().resources)\n+        self.assertNotIn("++resource++/bad_resource.js", js_files)\n+        self.assertNotIn(\n+            "resource-bad_resource-js",\n+            self._get_legacy_bundle().resources,\n+        )\n \n     def test_resource_no_blacklist(self):\n         importer = self._get_importer()\n@@ -264,10 +265,10 @@ def test_insert_again(self):\n         dom = self._get_resource_dom()\n         num_resources = self._get_legacy_bundle().resources[:]\n         importer._importNode(dom.documentElement)\n-        self.assertEquals(len(num_resources) + 1,\n+        self.assertEqual(len(num_resources) + 1,\n                           len(self._get_legacy_bundle().resources))\n         importer._importNode(dom.documentElement)\n-        self.assertEquals(len(num_resources) + 1,\n+        self.assertEqual(len(num_resources) + 1,\n                           len(self._get_legacy_bundle().resources))\n \n     def test_remove(self):\n@@ -284,9 +285,9 @@ def test_remove(self):\n         dom = self._get_resource_dom(remove=True)\n         importer._importNode(dom.documentElement)\n \n-        self.assertEquals(len(resources) - 1,\n+        self.assertEqual(len(resources) - 1,\n                           len(self._get_legacy_bundle().resources))\n-        self.assertEquals(len(js_files) - 1,\n+        self.assertEqual(len(js_files) - 1,\n                           len([x.js for x in self._get_resources().values()]))\n \n     def test_insert_after(self):\n@@ -347,9 +348,9 @@ def test_be_able_to_disable_but_not_remove(self):\n         dom = self._get_resource_dom(enabled=False)\n         importer._importNode(dom.documentElement)\n \n-        self.assertEquals(len(resources) - 1,\n+        self.assertEqual(len(resources) - 1,\n                           len(self._get_legacy_bundle().resources))\n-        self.assertEquals(len(js_files),\n+        self.assertEqual(len(js_files),\n                           len([x.js for x in self._get_resources().values()]))\n \n \n@@ -368,7 +369,7 @@ def test_save_override_file(self):\n         mng = OverrideFolderManager(self.portal)\n         mng.save_file(\'foo/bar.css\', \'foobar\')\n         value = self.portal.restrictedTraverse(\'++plone++foo/bar.css\')\n-        self.assertEquals(str(value), \'foobar\')\n+        self.assertEqual(value.data, b\'foobar\')\n \n     def test_override_rewrite_links(self):\n         req = self.layer[\'request\']\n@@ -386,7 +387,7 @@ def test_override_rewrite_links(self):\n }""" % {\'site_url\': self.portal.absolute_url()}\n         mng.save_file(\'foo/bar.css\', css)\n         value = self.portal.restrictedTraverse(\'++plone++foo/bar.css\')\n-        match = """\n+        match = b"""\n .foo {\n     background-image: url("../foobar.css");\n }\n@@ -396,14 +397,14 @@ def test_override_rewrite_links(self):\n .foobar {\n     background-image: url("../foo/bar/foobar.css");\n }"""\n-        self.assertEquals(str(value), match)\n+        self.assertEqual(value.data, match)\n \n     def test_get_require_js_config_uses_stub_modules(self):\n         view = ResourceRegistryControlPanelView(\n             self.portal, self.layer[\'request\'])\n         self.layer[\'request\'].form[\'bundle\'] = \'plone-logged-in\'\n         config = json.loads(view.js_build_config())\n-        self.assertEquals(config[\'paths\'][\'jquery\'], \'empty:\')\n+        self.assertEqual(config[\'paths\'][\'jquery\'], \'empty:\')\n \n \n class DummyResource(object):\n@@ -575,7 +576,7 @@ def test_remove_bundle_on_request_with_subrequest(self):\n         scripts.update()\n         results = scripts.scripts()\n         self.assertEqual(\n-            filter(lambda it: \'foo\' in it[\'src\'], results),\n+            [i for i in results if \'foo\' in i[\'src\']],\n             []\n         )\n \n@@ -618,12 +619,12 @@ def test_add_resource_on_request_with_subrequest(self):\n         styles = StylesView(self.layer[\'portal\'], subreq, None)\n         styles.update()\n         results = styles.styles()\n-        self.assertEqual(\n-            filter(lambda it: \'foo\' in it[\'src\'], results)[0],\n-            {\n+        self.assertListEqual(\n+            list(filter(lambda it: \'foo\' in it[\'src\'], results)),\n+            [{\n                 \'src\': \'http://nohost/plone/++resource++foo.css\',\n                 \'conditionalcomment\': \'\',\n                 \'rel\': \'stylesheet\',\n                 \'bundle\': \'none\',\n-            }\n+            }]\n         )\ndiff --git a/Products/CMFPlone/tests/testRestrictedAcquisition.py b/Products/CMFPlone/tests/testRestrictedAcquisition.py\nindex bd807e526..d243d3156 100644\n--- a/Products/CMFPlone/tests/testRestrictedAcquisition.py\n+++ b/Products/CMFPlone/tests/testRestrictedAcquisition.py\n@@ -11,7 +11,7 @@\n \n from Products.CMFPlone.tests import PloneTestCase\n \n-from App.class_init import InitializeClass\n+from AccessControl.class_init import InitializeClass\n from AccessControl import ClassSecurityInfo\n from OFS.SimpleItem import SimpleItem\n \ndiff --git a/Products/CMFPlone/tests/testSearch.py b/Products/CMFPlone/tests/testSearch.py\nindex 96bc561e5..25a584d4e 100644\n--- a/Products/CMFPlone/tests/testSearch.py\n+++ b/Products/CMFPlone/tests/testSearch.py\n@@ -15,6 +15,7 @@\n from Products.CMFPlone.interfaces import ISearchSchema\n \n from plone.app.contentlisting.interfaces import IContentListing\n+from plone.app.textfield import RichTextValue\n \n from zope.configuration import xmlconfig\n from zope.interface import alsoProvides\n@@ -58,19 +59,19 @@ def setUpZope(self, app, configurationContext):\n         import plone.app.contentlisting\n         xmlconfig.file(\'configure.zcml\',\n                        plone.app.contentlisting, context=configurationContext)\n-        z2.installProduct(app, \'Products.ATContentTypes\')\n \n     def setUpPloneSite(self, portal):\n         # Install into Plone site using portal_setup\n         if \'Document\' not in portal.portal_types:\n-            applyProfile(portal, \'Products.ATContentTypes:default\')\n+            applyProfile(portal, \'plone.app.contenttypes:default\')\n         setRoles(portal, TEST_USER_ID, [\'Manager\'])\n         login(portal, TEST_USER_NAME)\n         for i in range(0, 12):\n             portal.invokeFactory(\n                 \'Document\',\n                 \'my-page\' + str(i),\n-                text=\'spam spam ham eggs\'\n+                text=RichTextValue(\n+                    u\'spam spam ham eggs\', \'text/html\', \'text/x-html-safe\'),\n             )\n             # Sleep before creating the next one, otherwise ordering by date is\n             # not deterministic.\ndiff --git a/Products/CMFPlone/tests/testSecurity.py b/Products/CMFPlone/tests/testSecurity.py\nindex 8eb2c843c..45ae14539 100644\n--- a/Products/CMFPlone/tests/testSecurity.py\n+++ b/Products/CMFPlone/tests/testSecurity.py\n@@ -57,7 +57,7 @@ class TestAttackVectorsFunctional(PloneTestCase):\n     def test_gtbn_funcglobals(self):\n         from Products.CMFPlone.utils import getToolByName\n         try:\n-            getToolByName(self.assertTrue, \'func_globals\')[\'__builtins__\']\n+            getToolByName(self.assertTrue, \'__globals__\')[\'__builtins__\']\n         except TypeError:\n             pass\n         else:\n@@ -97,6 +97,7 @@ def _get_authenticator(self, basic=None):\n             return m.group(1)\n         return \'\'\n \n+    @unittest.skip(\'Delete after move to ATContentTypes\')\n     def test_gtbn_faux_archetypes_tool(self):\n         from Products.CMFCore.utils import FauxArchetypeTool\n         from Products.CMFPlone.utils import getToolByName\n@@ -123,6 +124,7 @@ def test_resolve_url(self):\n         res = self.publish("/plone/uid_catalog/resolve_url?path=/evil")\n         self.assertEqual(404, res.status)\n \n+    @unittest.skip(\'Delete after move to ATContentTypes\')\n     def test_at_download(self):\n         self.setRoles([\'Manager\'])\n         self.portal.portal_workflow.setChainForPortalTypes(\n@@ -140,6 +142,7 @@ def test_at_download(self):\n         self.assertTrue(res.headers[\'location\'].startswith(\n             \'http://nohost/plone/acl_users/credentials_cookie_auth/require_login\'))\n \n+    @unittest.skip(\'Delete after move to ATContentTypes\')\n     def test_ftp(self):\n         self.setRoles([\'Manager\', \'Owner\'])\n         self.portal.REQUEST.PARENTS = [self.app]\n@@ -155,6 +158,7 @@ def test_atat_does_not_return_anything(self):\n         res = self.publish(\'/plone/@@\')\n         self.assertEqual(404, res.status)\n \n+    @unittest.skip(\'Delete after move to ATContentTypes\')\n     def test_go_back(self):\n         res = self.publish(\n             \'/plone/front-page/go_back?last_referer=http://${request}\',\n@@ -183,6 +187,7 @@ def test_utranslate(self):\n         res = self.publish(\'/plone/utranslate?msgid=foo\')\n         self.assertEqual(403, res.status)\n \n+    @unittest.skip(\'Delete after move to ATContentTypes\')\n     def test_createObject(self):\n         res = self.publish(\'/plone/createObject?type_name=File&id=${foo}\')\n         self.assertEqual(302, res.status)\ndiff --git a/Products/CMFPlone/tests/testSecurityDeclarations.py b/Products/CMFPlone/tests/testSecurityDeclarations.py\nindex ecae44889..c2678d668 100644\n--- a/Products/CMFPlone/tests/testSecurityDeclarations.py\n+++ b/Products/CMFPlone/tests/testSecurityDeclarations.py\n@@ -9,23 +9,23 @@\n from ZODB.POSException import ConflictError\n from Products.ZCTextIndex.ParseTree import ParseError\n from OFS.CopySupport import CopyError\n-from plone.testing import z2\n+from plone.testing import zope\n from unittest import TestCase\n \n \n class RestrictedPythonTest(TestCase):\n \n-    layer = z2.ZSERVER\n+    layer = zope.WSGI_SERVER\n \n     def setUp(self):\n         self.app = self.layer[\'app\']\n         self.folder = self.app\n-        z2.installProduct(self.app, \'Products.PythonScripts\')\n-        z2.installProduct(self.app, \'Products.CMFPlone\')\n+        zope.installProduct(self.app, \'Products.PythonScripts\')\n+        zope.installProduct(self.app, \'Products.CMFPlone\')\n \n     def tearDown(self):\n-        z2.uninstallProduct(self.app, \'Products.CMFPlone\')\n-        z2.uninstallProduct(self.app, \'Products.PythonScripts\')\n+        zope.uninstallProduct(self.app, \'Products.CMFPlone\')\n+        zope.uninstallProduct(self.app, \'Products.PythonScripts\')\n \n     def addPS(self, id, params=\'\', body=\'\'):\n         factory = self.folder.manage_addProduct[\'PythonScripts\']\n@@ -180,9 +180,12 @@ def testAccess_ConflictError(self):\n                    \'print(ZODB.POSException.ConflictError)\')\n \n     def testRaise_ConflictError(self):\n-        self.assertRaises(ConflictError,\n-                          self.check, \'from ZODB.POSException import ConflictError;\'\n-                          \'raise ConflictError\')\n+        self.assertRaises(\n+            ConflictError,\n+            self.check,\n+            \'from ZODB.POSException import ConflictError;\'\n+            \'raise ConflictError\',\n+        )\n \n     def testCatch_ConflictErrorRaisedByRestrictedCode(self):\n         try:\n@@ -389,15 +392,6 @@ def test_sendto_script_failes(self):\n             pass\n \n \n-class TestSkinSecurity(PloneTestCase.PloneTestCase):\n-\n-    def test_OwnerCanViewConstrainTypesForm(self):\n-        try:\n-            self.folder.restrictedTraverse(\'folder_constraintypes_form\')\n-        except Unauthorized:\n-            self.fail("Owner could not access folder_constraintypes_form")\n-\n-\n class TestNavtreeSecurity(PloneTestCase.PloneTestCase, RestrictedPythonTest):\n \n     def testNavtreeStrategyBase(self):\ndiff --git a/Products/CMFPlone/tests/testSiteAdminRole.py b/Products/CMFPlone/tests/testSiteAdminRole.py\nindex 218eafcdd..e514a9943 100644\n--- a/Products/CMFPlone/tests/testSiteAdminRole.py\n+++ b/Products/CMFPlone/tests/testSiteAdminRole.py\n@@ -17,30 +17,6 @@ def testExpectedPermissions(self):\n         # assigned to the Site Administrator role (whether inherited from the\n         # Zope application, or specified in the portal rolemap).\n         expected = {\n-            \'ATContentTypes Topic: Add ATBooleanCriterion\':             1,\n-            \'ATContentTypes Topic: Add ATCurrentAuthorCriterion\':       1,\n-            \'ATContentTypes Topic: Add ATDateCriteria\':                 1,\n-            \'ATContentTypes Topic: Add ATDateRangeCriterion\':           1,\n-            \'ATContentTypes Topic: Add ATListCriterion\':                1,\n-            \'ATContentTypes Topic: Add ATPathCriterion\':                1,\n-            \'ATContentTypes Topic: Add ATPortalTypeCriterion\':          1,\n-            \'ATContentTypes Topic: Add ATReferenceCriterion\':           1,\n-            \'ATContentTypes Topic: Add ATRelativePathCriterion\':        1,\n-            \'ATContentTypes Topic: Add ATSelectionCriterion\':           1,\n-            \'ATContentTypes Topic: Add ATSimpleIntCriterion\':           1,\n-            \'ATContentTypes Topic: Add ATSimpleStringCriterion\':        1,\n-            \'ATContentTypes Topic: Add ATSortCriterion\':                1,\n-            \'ATContentTypes: Add Document\':                             1,\n-            \'ATContentTypes: Add Event\':                                1,\n-            \'ATContentTypes: Add File\':                                 1,\n-            # see p.a.folder.__init__ as to why AT Add Folder is disabled\n-            \'ATContentTypes: Add Folder\':                               0,\n-            \'ATContentTypes: Add Image\':                                1,\n-            \'ATContentTypes: Add Large Plone Folder\':                   1,\n-            \'ATContentTypes: Add Link\':                                 1,\n-            \'ATContentTypes: Add News Item\':                            1,\n-            \'ATContentTypes: Upload via url\':                           1,\n-            \'ATContentTypes: View history\':                             1,\n             \'Access contents information\':                              1,\n             \'Access inactive portal content\':                           1,\n             \'Add ATContentTypes tools\':                                 0,\n@@ -107,7 +83,6 @@ def testExpectedPermissions(self):\n             \'Add portal events\':                                        1,\n             \'Add portal folders\':                                       1,\n             \'Add portal member\':                                        1,\n-            \'Add portal topics\':                                        1,\n             \'Add secure MailHost objects\':                              0,\n             \'Allow sendto\':                                             1,\n             \'Archetypes Tests: Protected Type View\':                    0,\n@@ -134,7 +109,6 @@ def testExpectedPermissions(self):\n             \'Change configuration\':                                     0,\n             \'Change local roles\':                                       1,\n             \'Change permissions\':                                       0,\n-            \'Change portal topics\':                                     1,\n             \'Change proxy roles\':                                       0,\n             \'Content rules: Manage rules\':                              1,\n             \'Copy or Move\':                                             1,\n@@ -166,7 +140,6 @@ def testExpectedPermissions(self):\n             \'Manage repositories\':                                      0,\n             \'Manage users\':                                             0,\n             \'Modify Cookie Crumblers\':                                  0,\n-            \'Modify constrain types\':                                   1,\n             \'Modify portal content\':                                    1,\n             \'Modify view template\':                                     1,\n             \'Open/Close Database Connections\':                          0,\n@@ -189,8 +162,6 @@ def testExpectedPermissions(self):\n             \'Sharing page: Delegate roles\':                             1,\n             \'Take ownership\':                                           0,\n             \'Undo changes\':                                             1,\n-            \'Use Database Methods\':                                     1,\n-            \'Use external editor\':                                      1,\n             \'Use mailhost services\':                                    1,\n             \'Use version control\':                                      1,\n             \'Reply to item\':                                            0,\ndiff --git a/Products/CMFPlone/tests/testSyndication.py b/Products/CMFPlone/tests/testSyndication.py\nindex b3a9a9d98..185d8b534 100644\n--- a/Products/CMFPlone/tests/testSyndication.py\n+++ b/Products/CMFPlone/tests/testSyndication.py\n@@ -2,6 +2,7 @@\n import re\n from Products.CMFCore.utils import getToolByName\n from AccessControl import Unauthorized\n+from plone.app.textfield import RichTextValue\n from Products.CMFPlone.tests import PloneTestCase\n from Products.CMFPlone.interfaces.syndication import IFeedSettings\n from Products.CMFPlone.interfaces.syndication import ISiteSyndicationSettings\n@@ -9,7 +10,7 @@\n from zope.component import getUtility\n from zExceptions import NotFound\n from Products.CMFPlone.interfaces.syndication import IFeed\n-from Products.CMFPlone.browser.syndication.adapters import BaseItem\n+from Products.CMFPlone.browser.syndication.adapters import DexterityItem\n \n \n class BaseSyndicationTest(PloneTestCase.PloneTestCase):\n@@ -157,8 +158,10 @@ class TestSyndicationFeedAdapter(BaseSyndicationTest):\n     def afterSetUp(self):\n         super(TestSyndicationFeedAdapter, self).afterSetUp()\n         self.feed = IFeed(self.folder)\n-        self.feeddatadoc = BaseItem(self.doc1, self.feed)\n-        self.feeddatafile = BaseItem(self.file, self.feed)\n+        self.feeddatadoc = DexterityItem(self.doc1, self.feed)\n+        from plone.namedfile.file import NamedBlobFile\n+        self.file.file = NamedBlobFile(data=\'lorem\', filename=u\'string.txt\')\n+        self.feeddatafile = DexterityItem(self.file, self.feed)\n \n     def test_link_on_folder(self):\n         self.assertEqual(self.feed.link, self.folder.absolute_url())\n@@ -172,7 +175,7 @@ def test_link_on_document(self):\n \n     def test_link_on_default_page(self):\n         self.folder._setProperty(\'default_page\', \'doc2\')\n-        feeddatadoc2 = BaseItem(self.doc2, self.feed)\n+        feeddatadoc2 = DexterityItem(self.doc2, self.feed)\n         self.assertEqual(feeddatadoc2.link, self.folder.absolute_url())\n \n     def test_items(self):\n@@ -216,10 +219,10 @@ def afterSetUp(self):\n         self.news1 = self.folder.news1\n         self.news1.setTitle(\'News 1\')\n         self.news1.setDescription(\'The news item #1\')\n-        self.news1.setText(BODY_TEXT)\n+        self.news1.text = RichTextValue(BODY_TEXT, \'text/html\', \'text/html\')\n         self.news2 = self.folder.news2\n         self.news2.setTitle(\'News 2\')\n-        self.news2.setText(ROOTED_BODY_TEXT)\n+        self.news2.text = RichTextValue(ROOTED_BODY_TEXT, \'text/html\', \'text/html\')\n         # Enable syndication on folder\n         registry = getUtility(IRegistry)\n         self.site_settings = registry.forInterface(ISiteSyndicationSettings)\n@@ -247,7 +250,8 @@ def test_atom(self):\n                                                                                                        self.news2.UID(),\n                                                                                                        self.folder.absolute_url())\n         self.assertTrue(re.search(news2_feed, xml) is not None)\n-        self.assertFalse(re.search(ROOTED_BODY_TEXT, xml) is not None)\n+        # unlike AT DX does not tidy the output (see doTidy in ATContenTypes)\n+        self.assertTrue(re.search(ROOTED_BODY_TEXT, xml) is not None)\n         self.assertTrue(re.search(\'<h2>Header rooted</h2>\', xml) is not None)\n \n     def test_rss1(self):\n@@ -290,9 +294,9 @@ def afterSetUp(self):\n         self.folder.invokeFactory(\'File\', \'file\')\n         self.doc1 = self.folder.doc1\n         self.news1 = self.folder.news1\n-        self.news1.setText(BODY_TEXT)\n+        self.news1.text = RichTextValue(BODY_TEXT, \'text/html\', \'text/html\')\n         self.news2 = self.folder.news2\n-        self.news2.setText(ROOTED_BODY_TEXT)\n+        self.news2.text = RichTextValue(ROOTED_BODY_TEXT, \'text/html\', \'text/html\')\n         self.file = self.folder.file\n         # Enable syndication on folder\n         registry = getUtility(IRegistry)\ndiff --git a/Products/CMFPlone/tests/testUnicodeSplitter.py b/Products/CMFPlone/tests/testUnicodeSplitter.py\nindex 804f6abb7..fdfaf9ea5 100644\n--- a/Products/CMFPlone/tests/testUnicodeSplitter.py\n+++ b/Products/CMFPlone/tests/testUnicodeSplitter.py\n@@ -1,8 +1,11 @@\n # -*- coding: utf-8 -*-\n from OFS.metaconfigure import setDeprecatedManageAddDelete\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.textfield import RichTextValue\n from Products.CMFCore.tests.base.dummy import DummyContent\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.tests import PloneTestCase\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n # adding UnicodeSplitterPatcth\n from Products.CMFPlone.UnicodeSplitter import CaseNormalizer\n from Products.CMFPlone.UnicodeSplitter import process_str\n@@ -94,8 +97,10 @@ def testProcessLatin1(self):\n         # Test passes because plone_lexicon pipeline elements\n         # are coded defensively.\n         #\n-        input = ["\\xc4ffin foo"]\n-        output = ["\\xc4ffin", "foo"]\n+        u_input = [u"\\xc4ffin foo"]\n+        b_input = [t.encode(\'utf-8\') for t in u_input]\n+        u_output = [u"\\xc4ffin", u"foo"]\n+        b_output = [t.encode(\'utf-8\') for t in u_output]\n \n         # May still fail if none of the locales is available\n         saved = _setlocale(*LATIN1)\n@@ -103,10 +108,10 @@ def testProcessLatin1(self):\n             # If this test is failing, you probably just don\'t have\n             # the latin1 locales generated.  On Ubuntu, this worked:\n             #\n-            # $ sudo locale-gen en_US en_US.ISO-8859-1 en_US.ISO8859-15 en_GB.ISO8859-15 de_DE@euro fr_FR@euro nl_NL@euro\n+            # $ sudo locale-gen en_US en_US.ISO-8859-1 en_US.ISO8859-15 en_GB.ISO8859-15 de_DE@euro fr_FR@euro nl_NL@euro  # noqa: E501\n             #\n-            self.assertEqual(self.process(input), output)\n-            self.assertEqual(self.processGlob(input), output)\n+            self.assertEqual(self.process(b_input), b_output)\n+            self.assertEqual(self.processGlob(b_input), b_output)\n         finally:\n             _setlocale(saved)\n \n@@ -118,34 +123,40 @@ def setUp(self):\n         self.process = self.normalizer.process\n \n     def testNormalizeGerman(self):\n-        input = [u"\\xc4ffin"]\n-        output = [u"\\xe4ffin"]\n-        output = [t.encode(\'utf-8\') for t in output]\n-\n-        self.assertEqual(self.process(input), output)\n+        u_input = [u"\\xc4ffin"]\n+        b_input = [t.encode(\'utf-8\') for t in u_input]\n+        u_output = [u"\\xe4ffin"]\n+        b_output = [t.encode(\'utf-8\') for t in u_output]\n \n-        input = [t.encode(\'utf-8\') for t in input]\n-        self.assertEqual(self.process(input), output)\n+        self.assertEqual(self.process(u_input), b_output)\n+        self.assertEqual(self.process(b_input), b_output)\n \n     def testNormalizeLatin1(self):\n         #\n         # Test passes because plone_lexicon pipeline elements\n         # are coded defensively.\n         #\n-        input = ["\\xc4ffin"]\n-        output = ["\\xe4ffin"]\n+        u_input = [u"\\xc4ffin"]\n+        b_input = [t.encode(\'utf-8\') for t in u_input]\n+        u_output = [u"\\xe4ffin"]\n+        b_output = [t.encode(\'utf-8\') for t in u_output]\n \n         # May still fail if none of the locales is available\n         saved = _setlocale(*LATIN1)\n         try:\n-            self.assertEqual(self.process(input), output)\n+            self.assertEqual(self.process(b_input), b_output)\n         finally:\n             _setlocale(saved)\n \n \n-class TestQuery(PloneTestCase.PloneTestCase):\n+class TestQuery(unittest.TestCase):\n+\n+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.portal.invokeFactory(\'Folder\', \'folder1\')\n+        self.folder = self.portal[\'folder1\']\n         setDeprecatedManageAddDelete(DummyContent)\n         self.catalog = getToolByName(self.portal, \'portal_catalog\')\n         self.folder._setObject(\'doc1\',\n@@ -156,31 +167,31 @@ def afterSetUp(self):\n         self.doc2 = self.folder.doc2\n \n     def testQueryByUmlaut(self):\n-        self.doc1.SearchableText = \'\\303\\204ffin\'\n+        self.doc1.SearchableText = \'\xc3\x84ffin\'\n         self.catalog.indexObject(self.doc1)\n-        brains = self.catalog(SearchableText=\'\\303\\204ffin\')\n+        brains = self.catalog(SearchableText=\'\xc3\x84ffin\')\n         self.assertEqual(len(brains), 1)\n \n     def testQueryByUmlautLower(self):\n-        self.doc1.SearchableText = \'\\303\\204ffin\'\n+        self.doc1.SearchableText = \'\xc3\x84ffin\'\n         self.catalog.indexObject(self.doc1)\n-        brains = self.catalog(SearchableText=\'\\303\\244ffin\')\n+        brains = self.catalog(SearchableText=\'\xc3\xa4ffin\')\n         self.assertEqual(len(brains), 1)\n \n     def testQueryDifferentiatesUmlauts(self):\n-        self.doc1.SearchableText = \'\\303\\204ffin\'\n+        self.doc1.SearchableText = \'\xc3\x84ffin\'\n         self.catalog.indexObject(self.doc1)\n-        self.doc2.SearchableText = \'\\303\\226ffin\'\n+        self.doc2.SearchableText = \'\xc3\x96ffin\'\n         self.catalog.indexObject(self.doc2)\n-        brains = self.catalog(SearchableText=\'\\303\\226ffin\')\n+        brains = self.catalog(SearchableText=\'\xc3\x96ffin\')\n         self.assertEqual(len(brains), 1)\n \n     def testQueryDifferentiatesUmlautsLower(self):\n-        self.doc1.SearchableText = \'\\303\\204ffin\'\n+        self.doc1.SearchableText = \'\xc3\x84ffin\'\n         self.catalog.indexObject(self.doc1)\n-        self.doc2.SearchableText = \'\\303\\226ffin\'\n+        self.doc2.SearchableText = \'\xc3\x96ffin\'\n         self.catalog.indexObject(self.doc2)\n-        brains = self.catalog(SearchableText=\'\\303\\266ffin\')\n+        brains = self.catalog(SearchableText=\'\xc3\x96ffin\')\n         self.assertEqual(len(brains), 1)\n \n     def testQueryByLatin1(self):\n@@ -219,52 +230,53 @@ def testMixedModeQuery(self):\n         saved = _setlocale(*LATIN1)\n         try:\n             # Index Latin-1\n-            self.doc1.SearchableText = \'\\xc4ffin\'\n+            self.doc1.SearchableText = b\'\\xc4ffin\'.decode(\'latin1\')\n             self.catalog.indexObject(self.doc1)\n             # Query by UTF-8\n-            brains = self.catalog(SearchableText=\'\\303\\204ffin\')\n+            brains = self.catalog(\n+                SearchableText=b\'\\xc3\\x84ffin\'.decode(\'utf8\')\n+            )\n             self.assertEqual(len(brains), 1)\n         finally:\n             _setlocale(saved)\n \n     def testQueryByUnicode(self):\n-        self.doc1.SearchableText = \'\\303\\204ffin\'\n+        self.doc1.SearchableText = \'\xc3\x84ffin\'\n         self.catalog.indexObject(self.doc1)\n-        brains = self.catalog(SearchableText=u\'\\xc4ffin\')\n+        brains = self.catalog(SearchableText=u\'\xc3\x84ffin\')\n         self.assertEqual(len(brains), 1)\n \n     def testQueryByUnicodeLower(self):\n-        self.doc1.SearchableText = \'\\303\\204ffin\'\n+        self.doc1.SearchableText = \'\xc3\x84ffin\'\n         self.catalog.indexObject(self.doc1)\n-        brains = self.catalog(SearchableText=u\'\\xe4ffin\')\n+        brains = self.catalog(SearchableText=u\'\xc3\xa4ffin\')\n         self.assertEqual(len(brains), 1)\n \n     def testIndexUnicode(self):\n         self.doc1.SearchableText = u\'\\xc4ffin\'\n         self.catalog.indexObject(self.doc1)\n-        brains = self.catalog(SearchableText=\'\\303\\204ffin\')\n+        brains = self.catalog(SearchableText=\'\xc3\x84ffin\')\n         self.assertEqual(len(brains), 1)\n \n     def testIndexUnicodeLower(self):\n         self.doc1.SearchableText = u\'\\xc4ffin\'\n         self.catalog.indexObject(self.doc1)\n-        brains = self.catalog(SearchableText=\'\\303\\244ffin\')\n+        brains = self.catalog(SearchableText=\'\xc3\xa4ffin\')\n         self.assertEqual(len(brains), 1)\n \n \n-\n-\n class TestBigramFunctions(unittest.TestCase):\n \n     def test_process_str(self):\n         lsts = [\n-            ("\xe6\x97\xa5\xe6\x9c\xac", ["\xe6\x97\xa5\xe6\x9c\xac", "\xe6\x9c\xac"]),\n-            ("\xe6\x97\xa5", ["\xe6\x97\xa5"]),\n-            ("\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e", ["\xe6\x97\xa5\xe6\x9c\xac", "\xe6\x9c\xac\xe8\xaa\x9e", "\xe8\xaa\x9e"]),\n-            ("\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9epython", ["\xe6\x97\xa5\xe6\x9c\xac", "\xe6\x9c\xac\xe8\xaa\x9e", "\xe8\xaa\x9e", "python"]),\n-            ("\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e12345", ["\xe6\x97\xa5\xe6\x9c\xac", "\xe6\x9c\xac\xe8\xaa\x9e", "\xe8\xaa\x9e", "12345"]),\n+            ("\xe6\x97\xa5\xe6\x9c\xac", [u"\xe6\x97\xa5\xe6\x9c\xac", u"\xe6\x9c\xac"]),\n+            ("\xe6\x97\xa5", [u"\xe6\x97\xa5"]),\n+            ("\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e", [u"\xe6\x97\xa5\xe6\x9c\xac", u"\xe6\x9c\xac\xe8\xaa\x9e", u"\xe8\xaa\x9e"]),\n+            ("\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9epython", [u"\xe6\x97\xa5\xe6\x9c\xac", u"\xe6\x9c\xac\xe8\xaa\x9e", u"\xe8\xaa\x9e", u"python"]),\n+            ("\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e12345", [u"\xe6\x97\xa5\xe6\x9c\xac", u"\xe6\x9c\xac\xe8\xaa\x9e", u"\xe8\xaa\x9e", u"12345"]),\n         ]\n         for lst, rst in lsts:\n+            rst = [x.encode(\'utf8\') for x in rst]\n             self.assertEqual(rst, process_str(lst, "utf8"))\n \n     def test_process_unicode(self):\n@@ -281,12 +293,13 @@ def test_process_unicode(self):\n     def test_process_str_glob(self):\n         enc = "utf8"\n         lsts = [\n-            ("\xe6\x97\xa5\xe6\x9c\xac", ["\xe6\x97\xa5\xe6\x9c\xac"]),\n-            ("\xe6\x97\xa5", ["\xe6\x97\xa5*"]),\n-            ("\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e", ["\xe6\x97\xa5\xe6\x9c\xac", "\xe6\x9c\xac\xe8\xaa\x9e"]),\n-            ("\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9epython", ["\xe6\x97\xa5\xe6\x9c\xac", "\xe6\x9c\xac\xe8\xaa\x9e", "\xe8\xaa\x9e", "python"]),\n+            ("\xe6\x97\xa5\xe6\x9c\xac", [u"\xe6\x97\xa5\xe6\x9c\xac"]),\n+            ("\xe6\x97\xa5", [u"\xe6\x97\xa5*"]),\n+            ("\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e", [u"\xe6\x97\xa5\xe6\x9c\xac", u"\xe6\x9c\xac\xe8\xaa\x9e"]),\n+            ("\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9epython", [u"\xe6\x97\xa5\xe6\x9c\xac", u"\xe6\x9c\xac\xe8\xaa\x9e", u"\xe8\xaa\x9e", u"python"]),\n         ]\n         for lst, rst in lsts:\n+            rst = [x.encode(\'utf8\') for x in rst]\n             self.assertEqual(rst, process_str_glob(lst, enc))\n             for x, y in zip(rst, process_str_glob(lst, enc)):\n                 self.assertEqual(x, y)\n@@ -308,53 +321,62 @@ def test_process_unicode_glob(self):\n     def test_process_str_post(self):\n         enc = "utf8"\n         lsts = [\n-            ("\xe6\x97\xa5\xe6\x9c\xac", "\xe6\x97\xa5\xe6\x9c\xac"),\n-            ("\xe6\x97\xa5\xe6\x9c\xac*", "\xe6\x97\xa5\xe6\x9c\xac"),\n+            ("\xe6\x97\xa5\xe6\x9c\xac", u"\xe6\x97\xa5\xe6\x9c\xac"),\n+            ("\xe6\x97\xa5\xe6\x9c\xac*", u"\xe6\x97\xa5\xe6\x9c\xac"),\n         ]\n         for lst, rst in lsts:\n+            rst = rst.encode(\'utf8\')\n             self.assertEqual(rst, process_str_post(lst, enc))\n \n \n-class TestSearchingJapanese(PloneTestCase.PloneTestCase):\n+class TestSearchingJapanese(unittest.TestCase):\n     """Install Japanese test\n     """\n \n-    def afterSetUp(self):\n-        self.setRoles((\'Manager\', ))\n+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.portal.invokeFactory(\'Document\', \'doc1\')\n         self.doc1 = getattr(self.portal, \'doc1\')\n-        self.doc1.setTitle("Plone\xe3\x81\xaf\xe7\xb4\xa0\xe6\x99\xb4\xe3\x82\x89\xe3\x81\x97\xe3\x81\x84\xe3\x80\x82")\n-        self.doc1.setText("\xe3\x81\x93\xe3\x81\xae\xe3\x83\x9a\xe3\x83\xbc\xe3\x82\xb8\xe3\x81\xaf\xe4\xba\x88\xe6\x83\xb3\xe3\x81\x97\xe3\x81\xa6\xe3\x81\x84\xe3\x82\x8b\xe9\x80\x9a\xe3\x82\x8a\xe3\x80\x81\xe3\x83\x86\xe3\x82\xb9\xe3\x83\x88\xe3\x81\xa7\xe3\x81\x99\xe3\x80\x82 Pages Testing.")\n+        self.doc1.setTitle(u"Plone\xe3\x81\xaf\xe7\xb4\xa0\xe6\x99\xb4\xe3\x82\x89\xe3\x81\x97\xe3\x81\x84\xe3\x80\x82")\n+        text = u"\xe3\x81\x93\xe3\x81\xae\xe3\x83\x9a\xe3\x83\xbc\xe3\x82\xb8\xe3\x81\xaf\xe4\xba\x88\xe6\x83\xb3\xe3\x81\x97\xe3\x81\xa6\xe3\x81\x84\xe3\x82\x8b\xe9\x80\x9a\xe3\x82\x8a\xe3\x80\x81\xe3\x83\x86\xe3\x82\xb9\xe3\x83\x88\xe3\x81\xa7\xe3\x81\x99\xe3\x80\x82 Pages Testing."\n+        self.doc1.text = RichTextValue(text, \'text/html\', \'text/x-html-safe\')\n         self.doc1.reindexObject()\n \n     def testSearch(self):\n         catalog = getToolByName(self.portal, \'portal_catalog\')\n-        items1 = catalog(SearchableText="\xe4\xba\x88\xe6\x83\xb3")\n+        items1 = catalog(SearchableText=u"\xe4\xba\x88\xe6\x83\xb3")\n         self.assertEqual(len(items1), 1)\n-        items12 = catalog(SearchableText="\xe7\xb4\xa0\xe6\x99\xb4\xe3\x82\x89\xe3\x81\x97\xe3\x81\x84")\n+        items12 = catalog(SearchableText=u"\xe7\xb4\xa0\xe6\x99\xb4\xe3\x82\x89\xe3\x81\x97\xe3\x81\x84")\n         self.assertEqual(len(items12), 1)\n-        items13 = catalog(SearchableText="Pages")\n+        items13 = catalog(SearchableText=u"Pages")\n         self.assertEqual(len(items13), 1)\n-        items14 = catalog(SearchableText="\xe3\x83\x9a\xe3\x83\xbc\xe3\x82\xb8")\n+        items14 = catalog(SearchableText=u"\xe3\x83\x9a\xe3\x83\xbc\xe3\x82\xb8")\n         self.assertEqual(len(items14), 1)\n-        items15 = catalog(SearchableText="\xe4\xba\x88\xe6\x83\xb3*")\n+        items15 = catalog(SearchableText=u"\xe4\xba\x88\xe6\x83\xb3*")\n         self.assertEqual(len(items15), 1)\n         items16 = catalog(SearchableText=u"\xe4\xba\x88\xe6\x83\xb3")\n         self.assertEqual(len(items16), 1)\n         self.portal.manage_delObjects([\'doc1\'])\n-        items2 = catalog(SearchableText="\xe4\xba\x88\xe6\x83\xb3")\n+        items2 = catalog(SearchableText=u"\xe4\xba\x88\xe6\x83\xb3")\n         self.assertEqual(len(items2), 0)\n \n \n-class TestSearchingUnicodeJapanese(PloneTestCase.PloneTestCase):\n+class TestSearchingUnicodeJapanese(unittest.TestCase):\n     """ Install Unicode Japanese test """\n \n-    def afterSetUp(self):\n-        self.setRoles((\'Manager\',))\n+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.portal.invokeFactory(\'Document\', \'doc1\')\n         self.doc1 = getattr(self.portal, \'doc1\')\n         self.doc1.setTitle(u"Plone\xe3\x81\xaf\xe7\xb4\xa0\xe6\x99\xb4\xe3\x82\x89\xe3\x81\x97\xe3\x81\x84\xe3\x80\x82")\n-        self.doc1.setText(u"\xe3\x81\x93\xe3\x81\xae\xe3\x83\x9a\xe3\x83\xbc\xe3\x82\xb8\xe3\x81\xaf\xe4\xba\x88\xe6\x83\xb3\xe3\x81\x97\xe3\x81\xa6\xe3\x81\x84\xe3\x82\x8b\xe9\x80\x9a\xe3\x82\x8a\xe3\x80\x81\xe3\x83\x86\xe3\x82\xb9\xe3\x83\x88\xe3\x81\xa7\xe3\x81\x99\xe3\x80\x82 Pages Testing.")\n+        text = u"\xe3\x81\x93\xe3\x81\xae\xe3\x83\x9a\xe3\x83\xbc\xe3\x82\xb8\xe3\x81\xaf\xe4\xba\x88\xe6\x83\xb3\xe3\x81\x97\xe3\x81\xa6\xe3\x81\x84\xe3\x82\x8b\xe9\x80\x9a\xe3\x82\x8a\xe3\x80\x81\xe3\x83\x86\xe3\x82\xb9\xe3\x83\x88\xe3\x81\xa7\xe3\x81\x99\xe3\x80\x82 Pages Testing."\n+        self.doc1.text = RichTextValue(text, \'text/html\', \'text/x-html-safe\')\n         self.doc1.reindexObject()\n \n     def testSearch(self):\ndiff --git a/Products/CMFPlone/tests/testUserFolderBasics.py b/Products/CMFPlone/tests/testUserFolderBasics.py\nindex 941b495fe..119945e0f 100644\n--- a/Products/CMFPlone/tests/testUserFolderBasics.py\n+++ b/Products/CMFPlone/tests/testUserFolderBasics.py\n@@ -11,8 +11,8 @@\n from plone.app.testing import setRoles\n from plone.app.testing.bbb import _createMemberarea\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+from ZPublisher.utils import basic_auth_encode\n \n-import base64\n import unittest\n \n user_role = \'Member\'\n@@ -27,9 +27,7 @@ def setUp(self):\n         self.request = self.layer[\'request\']\n \n         self.uf = self.portal.acl_users\n-        self.basic = \\\n-            \'Basic %s\' % base64.encodestring(\n-                \'%s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD))\n+        self.basic = basic_auth_encode(TEST_USER_NAME, TEST_USER_PASSWORD)\n \n         _createMemberarea(self.portal, TEST_USER_ID)\n         self.folder = self.portal.portal_membership.getHomeFolder(TEST_USER_ID)\ndiff --git a/Products/CMFPlone/tests/testWebDAV.py b/Products/CMFPlone/tests/testWebDAV.py\nindex 536fb2012..c3b7db5d1 100644\n--- a/Products/CMFPlone/tests/testWebDAV.py\n+++ b/Products/CMFPlone/tests/testWebDAV.py\n@@ -4,9 +4,11 @@\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone import bbb\n from Products.CMFPlone.tests import dummy\n from Products.CMFPlone.tests import PloneTestCase\n-from six import StringIO\n+\n+import six\n \n \n html = """\\\n@@ -43,13 +45,13 @@ def testPUTDocument(self):\n         response = self.publish(self.folder_path + \'/new_html\',\n                                 env={\'CONTENT_TYPE\': \'text/html\'},\n                                 request_method=\'PUT\',\n-                                stdin=StringIO(html),\n+                                stdin=six.StringIO(html),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 201)\n         self.assertTrue(\'new_html\' in self.folder)\n         self.assertEqual(self.folder.new_html.portal_type, \'Document\')\n-        self.assertEqual(self.folder.new_html.EditableBody(), html)\n+        self.assertEqual(self.folder.new_html.text.raw, html)\n \n     def testPUTTextDocumentRSTNoContentType(self):\n         # Create a new document via FTP/DAV, some clients do not send\n@@ -57,13 +59,13 @@ def testPUTTextDocumentRSTNoContentType(self):\n         response = self.publish(self.folder_path + \'/test.rst\',\n                                 env={\'CONTENT_LENGTH\': \'0\'},\n                                 request_method=\'PUT\',\n-                                stdin=StringIO(),\n+                                stdin=six.StringIO(),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 201)\n         self.assertTrue(\'test.rst\' in self.folder)\n         self.assertEqual(self.folder[\'test.rst\'].portal_type, \'Document\')\n-        self.assertEqual(self.folder[\'test.rst\'].EditableBody(), \'\')\n+        self.assertIsNone(self.folder[\'test.rst\'].text)\n \n     def testPUTTextDocumentTXTNoContentType(self):\n         # Create a new document via FTP/DAV, some clients do not send\n@@ -71,13 +73,13 @@ def testPUTTextDocumentTXTNoContentType(self):\n         response = self.publish(self.folder_path + \'/test.txt\',\n                                 env={\'CONTENT_LENGTH\': \'0\'},\n                                 request_method=\'PUT\',\n-                                stdin=StringIO(),\n+                                stdin=six.StringIO(),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 201)\n         self.assertTrue(\'test.txt\' in self.folder)\n         self.assertEqual(self.folder[\'test.txt\'].portal_type, \'Document\')\n-        self.assertEqual(self.folder[\'test.txt\'].EditableBody(), \'\')\n+        self.assertIsNone(self.folder[\'test.txt\'].text)\n \n     def testPUTTextDocumentININoContentType(self):\n         # Create a new document via FTP/DAV, some clients do not send\n@@ -85,40 +87,40 @@ def testPUTTextDocumentININoContentType(self):\n         response = self.publish(self.folder_path + \'/test.ini\',\n                                 env={\'CONTENT_LENGTH\': \'0\'},\n                                 request_method=\'PUT\',\n-                                stdin=StringIO(),\n+                                stdin=six.StringIO(),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 201)\n         self.assertTrue(\'test.ini\' in self.folder)\n         self.assertEqual(self.folder[\'test.ini\'].portal_type, \'Document\')\n-        self.assertEqual(self.folder[\'test.ini\'].EditableBody(), \'\')\n+        self.assertIsNone(self.folder[\'test.ini\'].text)\n \n     def testPUTIndexHtmlDocument(self):\n         # Create an index_html document via FTP/DAV\n         response = self.publish(self.folder_path + \'/index_html\',\n                                 env={\'CONTENT_TYPE\': \'text/html\'},\n                                 request_method=\'PUT\',\n-                                stdin=StringIO(html),\n+                                stdin=six.StringIO(html),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 201)\n         self.assertTrue(\'index_html\' in self.folder)\n         self.assertEqual(self.folder.index_html.portal_type, \'Document\')\n-        self.assertEqual(self.folder.index_html.EditableBody(), html)\n-        self.assertEqual(self.folder._getOb(\'index_html\').EditableBody(), html)\n+        self.assertEqual(self.folder.index_html.text.raw, html)\n+        self.assertEqual(self.folder._getOb(\'index_html\').text.raw, html)\n \n     def testPUTImage(self):\n         # Create a new image via FTP/DAV\n         response = self.publish(self.folder_path + \'/new_image\',\n                                 env={\'CONTENT_TYPE\': \'image/gif\'},\n                                 request_method=\'PUT\',\n-                                stdin=StringIO(dummy.GIF),\n+                                stdin=six.StringIO(dummy.GIF),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 201)\n         self.assertTrue(\'new_image\' in self.folder)\n         self.assertEqual(self.folder.new_image.portal_type, \'Image\')\n-        self.assertEqual(str(self.folder.new_image.getImage().data), dummy.GIF)\n+        self.assertEqual(str(self.folder.new_image.image.data), dummy.GIF)\n \n     def testPUTImageGIFNoContentType(self):\n         # Create a new image via FTP/DAV, some clients do not send a\n@@ -129,13 +131,13 @@ def testPUTImageGIFNoContentType(self):\n         response = self.publish(self.folder_path + \'/test.gif\',\n                                 env={\'CONTENT_LENGTH\': len(dummy.GIF)},\n                                 request_method=\'PUT\',\n-                                stdin=StringIO(dummy.GIF),\n+                                stdin=six.StringIO(dummy.GIF),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 201)\n         self.assertTrue(\'test.gif\' in self.folder)\n         self.assertEqual(self.folder[\'test.gif\'].portal_type, \'Image\')\n-        self.assertEqual(str(self.folder[\'test.gif\'].getImage().data),\n+        self.assertEqual(str(self.folder[\'test.gif\'].image.data),\n                          dummy.GIF)\n \n     def testPUTImageJPGNoContentType(self):\n@@ -147,13 +149,13 @@ def testPUTImageJPGNoContentType(self):\n         response = self.publish(self.folder_path + \'/test.jpg\',\n                                 env={\'CONTENT_LENGTH\': len(dummy.GIF)},\n                                 request_method=\'PUT\',\n-                                stdin=StringIO(dummy.GIF),\n+                                stdin=six.StringIO(dummy.GIF),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 201)\n         self.assertTrue(\'test.jpg\' in self.folder)\n         self.assertEqual(self.folder[\'test.jpg\'].portal_type, \'Image\')\n-        self.assertEqual(str(self.folder[\'test.jpg\'].getImage().data),\n+        self.assertEqual(str(self.folder[\'test.jpg\'].image.data),\n                          dummy.GIF)\n \n     def testPUTImagePNGNoContentType(self):\n@@ -165,13 +167,13 @@ def testPUTImagePNGNoContentType(self):\n         response = self.publish(self.folder_path + \'/test.png\',\n                                 env={\'CONTENT_LENGTH\': len(dummy.GIF)},\n                                 request_method=\'PUT\',\n-                                stdin=StringIO(dummy.GIF),\n+                                stdin=six.StringIO(dummy.GIF),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 201)\n         self.assertTrue(\'test.png\' in self.folder)\n         self.assertEqual(self.folder[\'test.png\'].portal_type, \'Image\')\n-        self.assertEqual(str(self.folder[\'test.png\'].getImage().data),\n+        self.assertEqual(str(self.folder[\'test.png\'].image.data),\n                          dummy.GIF)\n \n     def testPUTImageTIFFNoContentType(self):\n@@ -183,13 +185,13 @@ def testPUTImageTIFFNoContentType(self):\n         response = self.publish(self.folder_path + \'/test.tiff\',\n                                 env={\'CONTENT_LENGTH\': len(dummy.GIF)},\n                                 request_method=\'PUT\',\n-                                stdin=StringIO(dummy.GIF),\n+                                stdin=six.StringIO(dummy.GIF),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 201)\n         self.assertTrue(\'test.tiff\' in self.folder)\n         self.assertEqual(self.folder[\'test.tiff\'].portal_type, \'Image\')\n-        self.assertEqual(str(self.folder[\'test.tiff\'].getImage().data),\n+        self.assertEqual(str(self.folder[\'test.tiff\'].image.data),\n                          dummy.GIF)\n \n     def testPUTImageICONoContentType(self):\n@@ -201,7 +203,7 @@ def testPUTImageICONoContentType(self):\n         response = self.publish(self.folder_path + \'/test.ico\',\n                                 env={\'CONTENT_LENGTH\': len(dummy.GIF)},\n                                 request_method=\'PUT\',\n-                                stdin=StringIO(dummy.GIF),\n+                                stdin=six.StringIO(dummy.GIF),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 201)\n@@ -211,7 +213,7 @@ def testPUTImageICONoContentType(self):\n             \'Image\',\n             \'If you are on a Mac and this fails, please see: \'\n             \'http://plone.org/documentation/error/unittest to fix.\')\n-        self.assertEqual(str(self.folder[\'test.ico\'].getImage().data),\n+        self.assertEqual(str(self.folder[\'test.ico\'].image.data),\n                          dummy.GIF)\n \n     def testPUTIndexHtmlImage(self):\n@@ -219,13 +221,13 @@ def testPUTIndexHtmlImage(self):\n         response = self.publish(self.folder_path + \'/index_html\',\n                                 env={\'CONTENT_TYPE\': \'image/gif\'},\n                                 request_method=\'PUT\',\n-                                stdin=StringIO(dummy.GIF),\n+                                stdin=six.StringIO(dummy.GIF),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 201)\n         self.assertTrue(\'index_html\' in self.folder)\n         self.assertEqual(self.folder.index_html.portal_type, \'Image\')\n-        self.assertEqual(str(self.folder.index_html.getImage().data),\n+        self.assertEqual(str(self.folder.index_html.image.data),\n                          dummy.GIF)\n \n     def testPUTDocumentIntoPortal(self):\n@@ -235,13 +237,13 @@ def testPUTDocumentIntoPortal(self):\n         response = self.publish(self.portal_path + \'/new_html\',\n                                 env={\'CONTENT_TYPE\': \'text/html\'},\n                                 request_method=\'PUT\',\n-                                stdin=StringIO(html),\n+                                stdin=six.StringIO(html),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 201)\n         self.assertTrue(\'new_html\' in self.portal)\n         self.assertEqual(self.portal.new_html.portal_type, \'Document\')\n-        self.assertEqual(self.portal.new_html.EditableBody(), html)\n+        self.assertEqual(self.portal.new_html.text.raw, html)\n \n     def testPUTIndexHtmlDocumentIntoPortal(self):\n         # Create an index_html document in the portal via FTP/DAV\n@@ -250,14 +252,14 @@ def testPUTIndexHtmlDocumentIntoPortal(self):\n         response = self.publish(self.portal_path + \'/index_html\',\n                                 env={\'CONTENT_TYPE\': \'text/html\'},\n                                 request_method=\'PUT\',\n-                                stdin=StringIO(html),\n+                                stdin=six.StringIO(html),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 201)\n         self.assertTrue(\'index_html\' in self.portal)\n         self.assertEqual(self.portal.index_html.portal_type, \'Document\')\n-        self.assertEqual(self.portal.index_html.EditableBody(), html)\n-        self.assertEqual(self.portal._getOb(\'index_html\').EditableBody(), html)\n+        self.assertEqual(self.portal.index_html.text.raw, html)\n+        self.assertEqual(self.portal._getOb(\'index_html\').text.raw, html)\n \n \n class TestPUTIndexHtml(PloneTestCase.PloneTestCase):\n@@ -291,13 +293,13 @@ def testPUTIndexHtml(self):\n             self.folder_path + \'/index_html\',\n             basic=self.basic_auth,\n             env={\'Content-Length\': self.length},\n-            stdin=StringIO(self.body),\n+            stdin=six.StringIO(self.body),\n             request_method=\'PUT\',\n             handle_errors=False)\n \n         self.assertEqual(response.getStatus(), 201)\n         self.assertTrue(\'index_html\' in self.folder)\n-        self.assertEqual(self.folder.index_html.meta_type, \'ATDocument\')\n+        self.assertEqual(self.folder.index_html.meta_type, \'Dexterity Item\')\n \n     def testPUTIndexHtmlIntoPortal(self):\n         # Create an index_html document in the portal via FTP/DAV\n@@ -310,13 +312,13 @@ def testPUTIndexHtmlIntoPortal(self):\n             self.portal_path + \'/index_html\',\n             basic=self.basic_auth,\n             env={\'Content-Length\': self.length},\n-            stdin=StringIO(self.body),\n+            stdin=six.StringIO(self.body),\n             request_method=\'PUT\',\n             handle_errors=False)\n \n         self.assertEqual(response.getStatus(), 201)\n         self.assertTrue(\'index_html\' in self.portal)\n-        self.assertEqual(self.portal.index_html.meta_type, \'ATDocument\')\n+        self.assertEqual(self.portal.index_html.meta_type, \'Dexterity Item\')\n \n \n class TestDAVOperations(PloneTestCase.FunctionalTestCase):\n@@ -337,7 +339,7 @@ def test_document_propfind_index_html_exist_folder(self):\n         response = self.publish(self.folder_path + \'/sub/index_html\',\n                                 request_method=\'PROPFIND\',\n                                 env={\'HTTP_DEPTH\': \'0\'},\n-                                stdin=StringIO(),\n+                                stdin=six.StringIO(),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 207, response.getBody())\n@@ -351,7 +353,7 @@ def test_document_propfind_index_html_non_exist_folder(self):\n         response = self.publish(self.folder_path + \'/sub/index_html\',\n                                 request_method=\'PROPFIND\',\n                                 env={\'HTTP_DEPTH\': \'0\'},\n-                                stdin=StringIO(),\n+                                stdin=six.StringIO(),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 404, response.getBody())\n@@ -366,7 +368,7 @@ def test_document_propfind_index_html_exist_portal(self):\n         response = self.publish(self.portal_path + \'/index_html\',\n                                 request_method=\'PROPFIND\',\n                                 env={\'HTTP_DEPTH\': \'0\'},\n-                                stdin=StringIO(),\n+                                stdin=six.StringIO(),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 207, response.getBody())\n@@ -382,7 +384,7 @@ def test_document_propfind_index_html_non_exist_portal(self):\n         response = self.publish(self.portal_path + \'/index_html\',\n                                 request_method=\'PROPFIND\',\n                                 env={\'HTTP_DEPTH\': \'0\'},\n-                                stdin=StringIO(),\n+                                stdin=six.StringIO(),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 404, response.getBody())\n@@ -397,7 +399,7 @@ def test_propfind_portal_root_index_html_exists(self):\n         response = self.publish(self.portal_path,\n                                 request_method=\'PROPFIND\',\n                                 env={\'HTTP_DEPTH\': \'0\'},\n-                                stdin=StringIO(),\n+                                stdin=six.StringIO(),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 207, response.getBody())\n@@ -412,7 +414,7 @@ def test_propfind_portal_root_index_html_not_exists(self):\n         response = self.publish(self.portal_path,\n                                 request_method=\'PROPFIND\',\n                                 env={\'HTTP_DEPTH\': \'0\'},\n-                                stdin=StringIO(),\n+                                stdin=six.StringIO(),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 207, response.getBody())\n@@ -427,7 +429,7 @@ def test_propfind_folder_index_html_exists(self):\n         response = self.publish(self.folder_path,\n                                 request_method=\'PROPFIND\',\n                                 env={\'HTTP_DEPTH\': \'0\'},\n-                                stdin=StringIO(),\n+                                stdin=six.StringIO(),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 207, response.getBody())\n@@ -442,7 +444,7 @@ def test_propfind_folder_index_html_not_exists(self):\n         response = self.publish(self.folder_path,\n                                 request_method=\'PROPFIND\',\n                                 env={\'HTTP_DEPTH\': \'0\'},\n-                                stdin=StringIO(),\n+                                stdin=six.StringIO(),\n                                 basic=self.basic_auth)\n \n         self.assertEqual(response.getStatus(), 207, response.getBody())\n@@ -450,10 +452,10 @@ def test_propfind_folder_index_html_not_exists(self):\n \n def test_suite():\n     from unittest import TestSuite, makeSuite\n-\n     suite = TestSuite()\n-    suite.addTest(makeSuite(TestDAVProperties))\n-    suite.addTest(makeSuite(TestPUTObjects))\n-    suite.addTest(makeSuite(TestPUTIndexHtml))\n-    suite.addTest(makeSuite(TestDAVOperations))\n+    if bbb.HAS_ZSERVER:\n+        suite.addTest(makeSuite(TestDAVProperties))\n+        suite.addTest(makeSuite(TestPUTObjects))\n+        suite.addTest(makeSuite(TestPUTIndexHtml))\n+        suite.addTest(makeSuite(TestDAVOperations))\n     return suite\ndiff --git a/Products/CMFPlone/tests/test_doctests.py b/Products/CMFPlone/tests/test_doctests.py\nindex 3bd19c47f..fec43823b 100644\n--- a/Products/CMFPlone/tests/test_doctests.py\n+++ b/Products/CMFPlone/tests/test_doctests.py\n@@ -1,15 +1,30 @@\n # -*- coding: utf-8 -*-\n-from doctest import DocTestSuite, DocFileSuite\n from unittest import TestSuite\n \n+import doctest\n+import re\n+import six\n+\n+\n+class Py23DocChecker(doctest.OutputChecker):\n+\n+    def check_output(self, want, got, optionflags):\n+        if not six.PY2:\n+            want = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n \n def test_suite():\n     suites = (\n-        DocFileSuite(\'messages.txt\', package=\'Products.CMFPlone.tests\'),\n-        DocTestSuite(\'Products.CMFPlone.i18nl10n\'),\n-        DocTestSuite(\'Products.CMFPlone.TranslationServiceTool\'),\n-        DocTestSuite(\'Products.CMFPlone.utils\'),\n-        DocTestSuite(\'Products.CMFPlone.workflow\'),\n+        doctest.DocFileSuite(\n+            \'messages.txt\',\n+            package=\'Products.CMFPlone.tests\',\n+            checker=Py23DocChecker(),\n+            ),\n+        doctest.DocTestSuite(\'Products.CMFPlone.i18nl10n\'),\n+        doctest.DocTestSuite(\'Products.CMFPlone.TranslationServiceTool\'),\n+        doctest.DocTestSuite(\'Products.CMFPlone.utils\'),\n+        doctest.DocTestSuite(\'Products.CMFPlone.workflow\'),\n     )\n \n     return TestSuite(suites)\ndiff --git a/Products/CMFPlone/tests/test_functional.py b/Products/CMFPlone/tests/test_functional.py\nindex 259970589..2360b4b29 100644\n--- a/Products/CMFPlone/tests/test_functional.py\n+++ b/Products/CMFPlone/tests/test_functional.py\n@@ -6,6 +6,8 @@\n import doctest\n import glob\n import os\n+import re\n+import six\n import unittest\n \n \n@@ -21,33 +23,62 @@\n OPTIONFLAGS = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)\n \n \n+class Py23DocChecker(doctest.OutputChecker):\n+\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            want = re.sub(\'zExceptions.Forbidden\', \'Forbidden\', want)\n+            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n+        else:\n+            want = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n+            # translate doctest exceptions\n+            for dotted in (\'urllib.error.HTTPError\', ):\n+                if dotted in got:\n+                    got = re.sub(\n+                        dotted,\n+                        dotted.rpartition(\'.\')[-1],\n+                        got,\n+                    )\n+\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n+\n def test_suite():\n     # Some files need to be tested with the standard functional layer.\n     ignored = UNITTESTS + CONTENT_TESTS\n     standard_filenames = [\n         filename for filename in\n         glob.glob(os.path.sep.join([os.path.dirname(__file__), \'*.txt\']))\n-        if os.path.basename(filename) not in ignored]\n-    suites = [layered(doctest.DocFileSuite(\n-              os.path.basename(filename),\n-              optionflags=OPTIONFLAGS,\n-              package=\'Products.CMFPlone.tests\',\n-              ), layer=PLONE_FUNCTIONAL_TESTING)\n-              for filename in standard_filenames]\n+        if os.path.basename(filename) not in ignored\n+    ]\n+    suites = [\n+        layered(\n+            doctest.DocFileSuite(\n+                os.path.basename(filename),\n+                optionflags=OPTIONFLAGS,\n+                package=\'Products.CMFPlone.tests\',\n+                checker=Py23DocChecker(),\n+            ),\n+            layer=PLONE_FUNCTIONAL_TESTING\n+        ) for filename in standard_filenames\n+    ]\n \n     # Other files need to be tested with the plone.app.contenttypes layer.\n     content_filenames = [\n         filename for filename in\n         glob.glob(os.path.sep.join([os.path.dirname(__file__), \'*.txt\']))\n-        if os.path.basename(filename) in CONTENT_TESTS]\n-    suites.extend(\n-        [layered(\n+        if os.path.basename(filename) in CONTENT_TESTS\n+    ]\n+    suites.extend([\n+        layered(\n             doctest.DocFileSuite(\n                 os.path.basename(filename),\n                 optionflags=OPTIONFLAGS,\n                 package=\'Products.CMFPlone.tests\',\n+                checker=Py23DocChecker(),\n             ),\n-            layer=PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING)\n-            for filename in content_filenames])\n+            layer=PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n+        ) for filename in content_filenames\n+    ])\n \n     return unittest.TestSuite(suites)\ndiff --git a/Products/CMFPlone/tests/test_login_help.py b/Products/CMFPlone/tests/test_login_help.py\nindex cac3add62..6aa9640a0 100644\n--- a/Products/CMFPlone/tests/test_login_help.py\n+++ b/Products/CMFPlone/tests/test_login_help.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from plone import api\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from Products.CMFPlone.browser.login.login_help import RequestResetPassword\n from Products.CMFPlone.browser.login.login_help import RequestUsername\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\ndiff --git a/Products/CMFPlone/tests/test_login_logout.py b/Products/CMFPlone/tests/test_login_logout.py\nindex 127ad3453..865fc046f 100644\n--- a/Products/CMFPlone/tests/test_login_logout.py\n+++ b/Products/CMFPlone/tests/test_login_logout.py\n@@ -3,7 +3,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n \n import transaction\ndiff --git a/Products/CMFPlone/tests/test_mails.py b/Products/CMFPlone/tests/test_mails.py\nindex e27ac1232..672a2f874 100644\n--- a/Products/CMFPlone/tests/test_mails.py\n+++ b/Products/CMFPlone/tests/test_mails.py\n@@ -9,6 +9,8 @@\n from zope.component import getUtility\n \n import doctest\n+import re\n+import six\n import unittest\n \n \n@@ -37,16 +39,27 @@ def setUpPloneSite(self, portal):\n )\n \n \n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n+        else:\n+            want = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+\n+\n def test_suite():\n     return unittest.TestSuite((\n         layered(doctest.DocFileSuite(\n             \'mails.txt\',\n             optionflags=OPTIONFLAGS,\n             package=\'Products.CMFPlone.tests\',\n+            checker=Py23DocChecker(),\n         ), layer=MOCK_MAILHOST_FUNCTIONAL_TESTING),\n         layered(doctest.DocFileSuite(\n             \'emaillogin.rst\',\n             optionflags=OPTIONFLAGS,\n             package=\'Products.CMFPlone.tests\',\n+            checker=Py23DocChecker(),\n         ), layer=MOCK_MAILHOST_FUNCTIONAL_TESTING),\n     ))\ndiff --git a/Products/CMFPlone/tests/test_metabundles.py b/Products/CMFPlone/tests/test_metabundles.py\nindex 038a4e2b9..bd12a3546 100644\n--- a/Products/CMFPlone/tests/test_metabundles.py\n+++ b/Products/CMFPlone/tests/test_metabundles.py\n@@ -3,15 +3,17 @@\n from Products.CMFPlone.interfaces.resources import (\n     OVERRIDE_RESOURCE_DIRECTORY_NAME,\n )\n-from Products.CMFPlone.tests.PloneTestCase import PloneTestCase\n from zope.component import getUtility\n \n from Products.CMFPlone.resources.browser.combine import (\n     PRODUCTION_RESOURCE_DIRECTORY,\n     combine_bundles,\n )\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n from Products.GenericSetup.tests import common\n \n+import unittest\n+\n \n class DummyImportContext(common.DummyImportContext):\n     # Copied from plone.app.registry tests.\n@@ -26,9 +28,12 @@ def isDirectory(self, path):\n         return path in self._directories\n \n \n-class ProductsCMFPloneSetupTest(PloneTestCase):\n+class ProductsCMFPloneSetupTest(unittest.TestCase):\n+\n+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n \n-    def afterSetUp(self):\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n         combine_bundles(self.portal)\n         persistent_directory = getUtility(\n             IResourceDirectory, name="persistent")\n@@ -36,7 +41,7 @@ def afterSetUp(self):\n         self.production_folder = container[PRODUCTION_RESOURCE_DIRECTORY]\n \n     def test_production_directory(self):\n-        self.assertEquals(\n+        self.assertEqual(\n             self.production_folder.listDirectory(),\n             [\n                 \'default.css\',\n@@ -49,7 +54,7 @@ def test_production_directory(self):\n \n     def test_default_js_bundle(self):\n         self.assertIn(\n-            "jQuery",\n+            b"jQuery",\n             self.production_folder.readFile(\'default.js\')\n         )\n \n@@ -62,7 +67,7 @@ def test_overrides(self):\n         static.writeFile(\'plone-legacy-compiled.js\', \'alert("Overrided legacy!");\')\n         combine_bundles(self.portal)\n         self.assertIn(\n-            \'alert("Overrided legacy!");\',\n+            b\'alert("Overrided legacy!");\',\n             self.production_folder.readFile(\'default.js\')\n         )\n \n@@ -74,9 +79,9 @@ def test_import(self):\n         # from Products.CMFPlone.resources.browser.combine import PRODUCTION_RESOURCE_DIRECTORY\n \n         # Prepare some registry xml files with or without the key IBundleRegistry.\n-        xml_with = \'<registry>with IBundleRegistry</registry>\'\n-        xml_without = \'<registry>without bundle registry</registry>\'\n-        xml_without2 = \'<registry>without bundle registry</registry>\'\n+        xml_with = b\'<registry>with IBundleRegistry</registry>\'\n+        xml_without = b\'<registry>without bundle registry</registry>\'\n+        xml_without2 = b\'<registry>without bundle registry</registry>\'\n         context = DummyImportContext(self.portal, purge=False)\n \n         def get_timestamp():\ndiff --git a/Products/CMFPlone/tests/test_nogopip.py b/Products/CMFPlone/tests/test_nogopip.py\nnew file mode 100644\nindex 000000000..5de41dea8\n--- /dev/null\n+++ b/Products/CMFPlone/tests/test_nogopip.py\n@@ -0,0 +1,47 @@\n+# -*- coding: utf-8 -*-\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+\n+import unittest\n+\n+\n+class NoGopipTests(unittest.TestCase):\n+\n+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+\n+        folder = self.portal[self.portal.invokeFactory(\'Folder\', \'foo\')]\n+        subfolder = folder[folder.invokeFactory(\'Folder\', \'sub\')]\n+        folder.invokeFactory(\'Document\', id=\'bar2\')\n+        folder.invokeFactory(\'Document\', id=\'bar1\')\n+        folder.invokeFactory(\'Document\', id=\'bar3\')\n+        folder.invokeFactory(\'Document\', id=\'bar4\')\n+        subfolder.invokeFactory(\'Document\', id=\'bar5\')\n+\n+    def query(self, **kw):\n+        return [brain.getId for brain in self.portal.portal_catalog(\n+            sort_on=\'getObjPositionInParent\', **kw)]\n+\n+    def testGetObjPositionInParentIndex(self):\n+        from plone.folder.nogopip import GopipIndex\n+        catalog = self.portal.portal_catalog\n+        self.failUnless(\'getObjPositionInParent\' in catalog.indexes())\n+        self.failUnless(\n+            isinstance(\n+                catalog.Indexes[\'getObjPositionInParent\'],\n+                GopipIndex\n+            )\n+        )\n+\n+    def testSearchOneFolder(self):\n+        ids = self.query(path=dict(query=\'/plone/foo\', depth=1))\n+        self.assertEqual(ids, [\'sub\', \'bar2\', \'bar1\', \'bar3\', \'bar4\'])\n+\n+    def testSortDocumentsInFolder(self):\n+        ids = self.query(path=dict(query=\'/plone/foo\', depth=1), Type=\'Page\')\n+        self.assertEqual(ids, [\'bar2\', \'bar1\', \'bar3\', \'bar4\'])\n+\n+    def testSortDocumentsInTree(self):\n+        ids = self.query(path=\'/plone/foo\', Type=\'Page\')\n+        self.assertEqual(ids, [\'bar5\', \'bar2\', \'bar1\', \'bar3\', \'bar4\'])\ndiff --git a/Products/CMFPlone/tests/test_okay.py b/Products/CMFPlone/tests/test_okay.py\nindex 0b701879c..567ed2681 100644\n--- a/Products/CMFPlone/tests/test_okay.py\n+++ b/Products/CMFPlone/tests/test_okay.py\n@@ -1,7 +1,8 @@\n # -*- coding: utf-8 -*-\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n \n+import six\n import unittest\n \n \n@@ -28,7 +29,10 @@ def test_okay_browser(self):\n         for url in urls:\n             browser.open(url)\n             self.assertEqual(browser.contents, u\'OK\')\n-            get_header = browser.headers.getheader\n+            if six.PY2:\n+                get_header = browser.headers.getheader\n+            else:\n+                get_header = browser.headers.get\n             self.assertEqual(\n                 get_header(\'Expires\'), \'Sat, 1 Jan 2000 00:00:00 GMT\')\n             self.assertEqual(\ndiff --git a/Products/CMFPlone/tests/test_passwordreset.py b/Products/CMFPlone/tests/test_passwordreset.py\nindex c8321218c..5bc66dd7d 100644\n--- a/Products/CMFPlone/tests/test_passwordreset.py\n+++ b/Products/CMFPlone/tests/test_passwordreset.py\n@@ -2,17 +2,28 @@\n PasswordResetTool doctests\n """\n \n+from plone.testing import layered\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n+\n import doctest\n+import re\n+import six\n import unittest\n \n-from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n-from plone.testing import layered\n+\n+OPTIONFLAGS = (\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE  # |\n+    #               doctest.REPORT_ONLY_FIRST_FAILURE\n+)\n \n \n-OPTIONFLAGS = (doctest.ELLIPSIS |\n-               doctest.NORMALIZE_WHITESPACE # |\n-#               doctest.REPORT_ONLY_FIRST_FAILURE\n-               )\n+class Py23DocChecker(doctest.OutputChecker):\n+    def check_output(self, want, got, optionflags):\n+        if six.PY2:\n+            want = re.sub("b\'(.*?)\'", "\'\\\\1\'", want)\n+        else:\n+            want = re.sub("u\'(.*?)\'", "\'\\\\1\'", want)\n+        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \n def test_suite():\n@@ -22,6 +33,7 @@ def test_suite():\n                 \'pwreset_browser.rst\',\n                 optionflags=OPTIONFLAGS,\n                 package=\'Products.CMFPlone.tests\',\n+                checker=Py23DocChecker(),\n             ),\n             layer=PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n         ),\ndiff --git a/Products/CMFPlone/tests/test_patternsettings.py b/Products/CMFPlone/tests/test_patternsettings.py\nindex 4c9eddd50..ffd54194b 100644\n--- a/Products/CMFPlone/tests/test_patternsettings.py\n+++ b/Products/CMFPlone/tests/test_patternsettings.py\n@@ -60,7 +60,7 @@ def setUp(self):\n     def testShouldReturnCorrectType(self):\n         settings = PatternsSettingsView(self.folder, self.layer[\'request\'])\n         result = settings()\n-        self.assertEquals(type(result), dict)\n+        self.assertEqual(type(result), dict)\n         for key, value in result.items():\n             self.assertTrue(isinstance(key, six.string_types))\n             self.assertTrue(isinstance(value, six.string_types))\n@@ -68,15 +68,15 @@ def testShouldReturnCorrectType(self):\n     def testFolderUrls(self):\n         settings = PatternsSettingsView(self.folder, self.layer[\'request\'])\n         result = settings()\n-        self.assertEquals(\n+        self.assertEqual(\n             result[\'data-base-url\'],\n             self.folder.absolute_url()\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             result[\'data-portal-url\'],\n             self.layer[\'portal\'].absolute_url()\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             result[\'data-view-url\'],\n             self.folder.absolute_url()\n         )\n@@ -86,12 +86,12 @@ def testFileUrls(self):\n         file_obj = self.folder[\'file1\']\n         settings = PatternsSettingsView(file_obj, self.layer[\'request\'])\n         result = settings()\n-        self.assertEquals(result[\'data-base-url\'], file_obj.absolute_url())\n-        self.assertEquals(\n+        self.assertEqual(result[\'data-base-url\'], file_obj.absolute_url())\n+        self.assertEqual(\n             result[\'data-portal-url\'],\n             self.layer[\'portal\'].absolute_url()\n         )\n-        self.assertEquals(\n+        self.assertEqual(\n             result[\'data-view-url\'],\n             file_obj.absolute_url() + \'/view\'\n         )\n@@ -104,4 +104,4 @@ def testPatternOptions(self):\n \n         settings = PatternsSettingsView(self.folder, self.layer[\'request\'])\n         result = settings()\n-        self.assertEquals(result[\'data-pat-foo\'], u\'{"foo": "bar"}\')\n+        self.assertEqual(result[\'data-pat-foo\'], u\'{"foo": "bar"}\')\ndiff --git a/Products/CMFPlone/tests/test_redirect_after_login.py b/Products/CMFPlone/tests/test_redirect_after_login.py\nindex 1fd3c4a32..56ef20b29 100644\n--- a/Products/CMFPlone/tests/test_redirect_after_login.py\n+++ b/Products/CMFPlone/tests/test_redirect_after_login.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from Products.CMFPlone.browser.login.login import LoginForm\n from Products.CMFPlone.interfaces import IInitialLogin\n from Products.CMFPlone.interfaces import IRedirectAfterLogin\ndiff --git a/Products/CMFPlone/tests/test_safe_formatter.py b/Products/CMFPlone/tests/test_safe_formatter.py\nindex 9fbe10056..d597f206c 100644\n--- a/Products/CMFPlone/tests/test_safe_formatter.py\n+++ b/Products/CMFPlone/tests/test_safe_formatter.py\n@@ -202,7 +202,7 @@ def test_access_to_private_content_not_allowed_in_any_way(self):\n \n         # attribute access\n         # If access to context.foobar.Title was allowed, it would still only\n-        # say \'bound method ATDocument.Title\', without giving the actual title,\n+        # say \'bound method DexterityContent.Title\', without giving the actual title,\n         # but there may be other attributes that give worse info.\n         pt = ZopePageTemplate(\n             \'mytemplate\', TEMPLATE %\n@@ -211,10 +211,13 @@ def test_access_to_private_content_not_allowed_in_any_way(self):\n         login(self.portal, TEST_USER_NAME)\n         # We replace ATDocument with Document to make the tests pass\n         # with ATContentTypes and plone.app.contenttypes.\n+        method_name = \'DexterityContent.Title\'\n+        if six.PY2:\n+            method_name = \'Document.Title\'\n         self.assertEqual(\n-            pt.pt_render().replace(\'ATDocument\', \'Document\'),\n-            \'<p>access <bound method Document.Title of \'\n-            \'<Document at /plone/foobar>></p>\')\n+            pt.pt_render(),\n+            u\'<p>access <bound method %s of \'\n+            u\'<Document at /plone/foobar>></p>\' % method_name)\n         logout()\n         self.assertRaises(Unauthorized, pt.pt_render)\n \n@@ -225,8 +228,8 @@ def test_access_to_private_content_not_allowed_in_any_way(self):\n         hack_pt(pt, context=self.portal)\n         login(self.portal, TEST_USER_NAME)\n         self.assertEqual(\n-            pt.pt_render().replace(\'ATDocument\', \'Document\'),\n-            \'<p><Document at foobar></p>\')\n+            pt.pt_render(),\n+            u\'<p><Document at foobar></p>\')\n         logout()\n         self.assertRaises(Unauthorized, pt.pt_render)\n \n@@ -238,7 +241,7 @@ def test_access_to_private_content_not_allowed_in_any_way(self):\n         hack_pt(pt, context=self.portal)\n         # If you have such a list, you *can* see an id.\n         self.assertEqual(\n-            pt.pt_render().replace(\'ATDocument\', \'Document\'),\n+            pt.pt_render(),\n             u\'<p>[<Document at /plone/foobar>]</p>\')\n         # But you cannot access an item.\n         pt = ZopePageTemplate(\n@@ -249,8 +252,8 @@ def test_access_to_private_content_not_allowed_in_any_way(self):\n         # except as authenticated user\n         login(self.portal, TEST_USER_NAME)\n         self.assertEqual(\n-            pt.pt_render().replace(\'ATDocument\', \'Document\'),\n-            \'<p><Document at foobar></p>\')\n+            pt.pt_render(),\n+            u\'<p><Document at foobar></p>\')\n \n     # Zope 3 templates are always file system templates.  So we actually have\n     # no problems allowing str.format there.\n@@ -347,7 +350,7 @@ def format(self, *args, **kwargs):\n             self.portal.evil = script\n             output = self.publish(\'/plone/evil\')\n             self.assertFalse(\n-                \'Products.CMFPlone.Portal.PloneSite\' in output.body)\n+                b\'Products.CMFPlone.Portal.PloneSite\' in output.body)\n \n     def test_cook_zope2_page_templates_bad_key_str(self):\n         from Products.PageTemplates.ZopePageTemplate import ZopePageTemplate\ndiff --git a/Products/CMFPlone/tests/test_sitelogo.py b/Products/CMFPlone/tests/test_sitelogo.py\nindex 14913ac43..9f216ca1e 100644\n--- a/Products/CMFPlone/tests/test_sitelogo.py\n+++ b/Products/CMFPlone/tests/test_sitelogo.py\n@@ -6,13 +6,14 @@\n import unittest\n \n # Red pixel with filename pixel.png\n-SITE_LOGO_BASE64 = \'filenameb64:cGl4ZWwucG5n;datab64:iVBORw0KGgoAAAANSUhEUgAA\'\\\n-                   \'AAEAAAABCAIAAACQd1PeAAAADElEQVQI12P4z8AAAAMBAQAY3Y2wAAAAA\'\\\n-                   \'ElFTkSuQmCC\'\n-SITE_LOGO_HEX = \'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00\\x01\\x00\\x00\'\\\n-                \'\\x00\\x01\\x08\\x02\\x00\\x00\\x00\\x90wS\\xde\\x00\\x00\\x00\\x0cIDAT\'\\\n-                \'\\x08\\xd7c\\xf8\\xcf\\xc0\\x00\\x00\\x03\\x01\\x01\\x00\\x18\\xdd\\x8d\'\\\n-                \'\\xb0\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82\'\n+SITE_LOGO_BASE64 = b\'filenameb64:cGl4ZWwucG5n;datab64:iVBORw0KGgoAAAANSUhEUgA\'\\\n+                   b\'AAAEAAAABCAIAAACQd1PeAAAADElEQVQI12P4z8AAAAMBAQAY3Y2wAAA\'\\\n+                   b\'AAElFTkSuQmCC\'\n+\n+SITE_LOGO_HEX = b\'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00\\x01\\x00\\x00\'\\\n+                b\'\\x00\\x01\\x08\\x02\\x00\\x00\\x00\\x90wS\\xde\\x00\\x00\\x00\\x0cIDAT\'\\\n+                b\'\\x08\\xd7c\\xf8\\xcf\\xc0\\x00\\x00\\x03\\x01\\x01\\x00\\x18\\xdd\\x8d\'\\\n+                b\'\\xb0\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82\'\n \n \n class SiteLogoFunctionalTest(unittest.TestCase):\ndiff --git a/Products/CMFPlone/tests/test_sitemap.py b/Products/CMFPlone/tests/test_sitemap.py\nindex 44ee583fe..44b37f7f0 100644\n--- a/Products/CMFPlone/tests/test_sitemap.py\n+++ b/Products/CMFPlone/tests/test_sitemap.py\n@@ -11,7 +11,7 @@\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n \n \n class ProductsCMFPloneSetupTest(unittest.TestCase):\ndiff --git a/Products/CMFPlone/tests/test_utils.py b/Products/CMFPlone/tests/test_utils.py\nindex 061081605..41a7a7ec8 100644\n--- a/Products/CMFPlone/tests/test_utils.py\n+++ b/Products/CMFPlone/tests/test_utils.py\n@@ -8,7 +8,7 @@\n from Products.CMFCore.tests.base.content import SIMPLE_XHTML\n from Products.CMFCore.tests.base.content import STX_WITH_HTML\n from Products.CMFPlone.interfaces import ISiteSchema\n-from Products.CMFPlone.tests import PloneTestCase\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n from zope.component import getUtility\n from zope.interface import alsoProvides\n from plone.subrequest.interfaces import ISubRequest\n@@ -16,9 +16,9 @@\n import unittest\n \n \n-SITE_LOGO_BASE64 = \'filenameb64:cGl4ZWwucG5n;datab64:iVBORw0KGgoAAAANSUhEUgAA\'\\\n-                   \'AAEAAAABCAIAAACQd1PeAAAADElEQVQI12P4z8AAAAMBAQAY3Y2wAAAAA\'\\\n-                   \'ElFTkSuQmCC\'\n+SITE_LOGO_BASE64 = b\'filenameb64:cGl4ZWwucG5n;datab64:iVBORw0KGgoAAAANSUhEUgA\'\\\n+                   b\'AAAEAAAABCAIAAACQd1PeAAAADElEQVQI12P4z8AAAAMBAQAY3Y2wAAA\'\\\n+                   b\'AAElFTkSuQmCC\'\n \n \n class DefaultUtilsTests(unittest.TestCase):\n@@ -41,10 +41,9 @@ def test_safe_encode(self):\n         """safe_encode should always encode unicode to the specified encoding.\n         """\n         from Products.CMFPlone.utils import safe_encode\n-        self.assertEqual(safe_encode(u\'sp\xc3\xa4m\'), \'sp\\xc3\\xa4m\')\n-        self.assertEqual(safe_encode(u\'sp\xc3\xa4m\', \'utf-8\'), \'sp\\xc3\\xa4m\')\n-        self.assertEqual(safe_encode(u\'sp\xc3\xa4m\', encoding=\'latin-1\'), \'sp\\xe4m\')\n-        self.assertEqual((\'spam\'), \'spam\')\n+        self.assertEqual(safe_encode(u\'sp\xc3\xa4m\'), b\'sp\\xc3\\xa4m\')\n+        self.assertEqual(safe_encode(u\'sp\xc3\xa4m\', \'utf-8\'), b\'sp\\xc3\\xa4m\')\n+        self.assertEqual(safe_encode(u\'sp\xc3\xa4m\', encoding=\'latin-1\'), b\'sp\\xe4m\')\n \n     def test_get_top_request(self):\n         """If in a subrequest, ``get_top_request`` should always return the top\n@@ -191,7 +190,9 @@ def test_human_readable_size_special(self):\n         self.assertEqual(human_readable_size(\'barney\'), \'barney\')\n \n \n-class LogoTests(PloneTestCase.PloneTestCase):\n+class LogoTests(unittest.TestCase):\n+\n+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n \n     def test_getSiteLogo_with_setting(self):\n         from Products.CMFPlone.utils import getSiteLogo\ndiff --git a/Products/CMFPlone/tests/test_z3c_form_widgets.py b/Products/CMFPlone/tests/test_z3c_form_widgets.py\nindex 32328fe3d..0535d3f95 100644\n--- a/Products/CMFPlone/tests/test_z3c_form_widgets.py\n+++ b/Products/CMFPlone/tests/test_z3c_form_widgets.py\n@@ -47,13 +47,13 @@ def test_regression(self):\n                 \'foo\': \'bar\'\n             })\n             wi.form = FakeForm()\n-            self.assertEquals(wi.ignoreRequest, False)\n+            self.assertEqual(wi.ignoreRequest, False)\n             # The SequenceWidget needs terms.  It will have terms=None,\n             # where the others have no terms attribute.\n             if getattr(wi, \'terms\', _marker) is None:\n                 wi.terms = self._terms()\n             wi.update()\n-            self.assertEquals(wi.ignoreRequest, False)\n+            self.assertEqual(wi.ignoreRequest, False)\n \n     def test_only_get_data_from_valid_request_method(self):\n         request = self.layer[\'request\']\n@@ -65,13 +65,13 @@ def test_only_get_data_from_valid_request_method(self):\n                 \'foobar\': self._attack\n             })\n             wi.form = FakeForm()\n-            self.assertEquals(wi.ignoreRequest, False)\n+            self.assertEqual(wi.ignoreRequest, False)\n             # The SequenceWidget needs terms.  It will have terms=None,\n             # where the others have no terms attribute.\n             if getattr(wi, \'terms\', _marker) is None:\n                 wi.terms = self._terms()\n             wi.update()\n-            self.assertEquals(wi.ignoreRequest, True)\n+            self.assertEqual(wi.ignoreRequest, True)\n \n     def test_explicitly_allow_data_from_invalid_request_method(self):\n         request = self.layer[\'request\']\n@@ -86,13 +86,13 @@ def test_explicitly_allow_data_from_invalid_request_method(self):\n             # Set attribute on form to explicitly allow prefill.\n             from Products.CMFPlone.patches.z3c_form import ALLOW_PREFILL\n             setattr(wi.form, ALLOW_PREFILL, True)\n-            self.assertEquals(wi.ignoreRequest, False)\n+            self.assertEqual(wi.ignoreRequest, False)\n             # The SequenceWidget needs terms.  It will have terms=None,\n             # where the others have no terms attribute.\n             if getattr(wi, \'terms\', _marker) is None:\n                 wi.terms = self._terms()\n             wi.update()\n-            self.assertEquals(wi.ignoreRequest, False)\n+            self.assertEqual(wi.ignoreRequest, False)\n \n     def test_only_get_data_from_valid_referrer(self):\n         # this handles the use case where hijacker gets user to click on\n@@ -108,10 +108,10 @@ def test_only_get_data_from_valid_referrer(self):\n             })\n             request.environ[\'HTTP_REFERER\'] = \'http://attacker.com\'\n             wi.form = FakeForm()\n-            self.assertEquals(wi.ignoreRequest, False)\n+            self.assertEqual(wi.ignoreRequest, False)\n             # The SequenceWidget needs terms.  It will have terms=None,\n             # where the others have no terms attribute.\n             if getattr(wi, \'terms\', _marker) is None:\n                 wi.terms = self._terms()\n             wi.update()\n-            self.assertEquals(wi.ignoreRequest, True)\n+            self.assertEqual(wi.ignoreRequest, True)\ndiff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py\nindex f0bdf9a79..0d932b6c5 100644\n--- a/Products/CMFPlone/utils.py\n+++ b/Products/CMFPlone/utils.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from __future__ import print_function\n from AccessControl import ClassSecurityInfo\n from AccessControl import getSecurityManager\n from AccessControl import ModuleSecurityInfo\n@@ -20,17 +21,19 @@\n from os.path import split\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.registry.interfaces import IRegistry\n+from Products.CMFCore.permissions import AddPortalContent\n from Products.CMFCore.permissions import ManageUsers\n from Products.CMFCore.utils import ToolInit as CMFCoreToolInit\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import bbb\n from Products.CMFPlone import PloneMessageFactory as _\n+from Products.CMFPlone import bbb\n from Products.CMFPlone.interfaces.controlpanel import IImagingSchema\n from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot\n from Products.CMFPlone.log import log\n from Products.CMFPlone.log import log_deprecated\n from Products.CMFPlone.log import log_exc\n from six.moves.urllib.parse import urlparse\n+from ZODB.POSException import ConflictError\n from zope import schema\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n@@ -54,6 +57,7 @@\n import warnings\n import zope.interface\n \n+\n try:\n     from types import ClassType\n except ImportError:\n@@ -232,7 +236,10 @@ def utf8_portal(context, str, errors=\'strict\'):\n def getEmptyTitle(context, translated=True):\n     """Returns string to be used for objects with no title or id"""\n     # The default is an extra fancy unicode elipsis\n-    empty = six.text_type(\'\\x5b\\xc2\\xb7\\xc2\\xb7\\xc2\\xb7\\x5d\', \'utf-8\')\n+    if six.PY2:\n+        empty = unicode(\'\\x5b\\xc2\\xb7\\xc2\\xb7\\xc2\\xb7\\x5d\', \'utf-8\')\n+    else:\n+        empty = b\'\\x5b\\xc2\\xb7\\xc2\\xb7\\xc2\\xb7\\x5d\'.decode(\'utf8\')\n     if translated:\n         if context is not None:\n             if not IBrowserRequest.providedBy(context):\n@@ -458,29 +465,41 @@ def safe_unicode(value, encoding=\'utf-8\'):\n     """Converts a value to unicode, even it is already a unicode string.\n \n         >>> from Products.CMFPlone.utils import safe_unicode\n-\n-        >>> safe_unicode(\'spam\')\n-        u\'spam\'\n-        >>> safe_unicode(u\'spam\')\n-        u\'spam\'\n-        >>> safe_unicode(u\'spam\'.encode(\'utf-8\'))\n-        u\'spam\'\n-        >>> safe_unicode(\'\\xc6\\xb5\')\n-        u\'\\u01b5\'\n-        >>> safe_unicode(u\'\\xc6\\xb5\'.encode(\'iso-8859-1\'))\n-        u\'\\u01b5\'\n-        >>> safe_unicode(\'\\xc6\\xb5\', encoding=\'ascii\')\n-        u\'\\u01b5\'\n-        >>> safe_unicode(1)\n-        1\n+        >>> test_bytes = u\'\\u01b5\'.encode(\'utf-8\')\n+        >>> safe_unicode(\'spam\') == u\'spam\'\n+        True\n+        >>> safe_unicode(b\'spam\') == u\'spam\'\n+        True\n+        >>> safe_unicode(u\'spam\') == u\'spam\'\n+        True\n+        >>> safe_unicode(u\'spam\'.encode(\'utf-8\')) == u\'spam\'\n+        True\n+        >>> safe_unicode(test_bytes) == u\'\\u01b5\'\n+        True\n+        >>> safe_unicode(u\'\\xc6\\xb5\'.encode(\'iso-8859-1\')) == u\'\\u01b5\'\n+        True\n+        >>> safe_unicode(test_bytes, encoding=\'ascii\') == u\'\\u01b5\'\n+        True\n+        >>> safe_unicode(1) == 1\n+        True\n         >>> print(safe_unicode(None))\n         None\n     """\n-    if isinstance(value, six.text_type):\n+    if six.PY2:\n+        if isinstance(value, unicode):\n+            return value\n+        elif isinstance(value, basestring):\n+            try:\n+                value = unicode(value, encoding)\n+            except (UnicodeDecodeError):\n+                value = value.decode(\'utf-8\', \'replace\')\n+        return value\n+\n+    if isinstance(value, str):\n         return value\n-    elif isinstance(value, six.string_types):\n+    elif isinstance(value, bytes):\n         try:\n-            value = six.text_type(value, encoding)\n+            value = str(value, encoding)\n         except (UnicodeDecodeError):\n             value = value.decode(\'utf-8\', \'replace\')\n     return value\n@@ -494,6 +513,16 @@ def safe_encode(value, encoding=\'utf-8\'):\n     return value\n \n \n+def safe_nativestring(value, encoding=\'utf-8\'):\n+    """Convert a value to str in py2 and to text in py3\n+    """\n+    if six.PY2 and isinstance(value, six.text_type):\n+        value = safe_encode(value, encoding)\n+    if not six.PY2 and isinstance(value, six.binary_type):\n+        value = safe_unicode(value, encoding)\n+    return value\n+\n+\n def tuplize(value):\n     if isinstance(value, tuple):\n         return value\n@@ -784,7 +813,10 @@ def get_top_site_from_url(context, request):\n         for idx in range(len(url_path)):\n             _path = \'/\'.join(url_path[:idx + 1]) or \'/\'\n             site_path = request.physicalPathFromURL(_path)\n-            site_path = safe_encode(\'/\'.join(site_path)) or \'/\'\n+            if six.PY2:\n+                site_path = safe_encode(\'/\'.join(site_path)) or \'/\'\n+            else:\n+                site_path = \'/\'.join(site_path) or \'/\'\n             _site = context.restrictedTraverse(site_path)\n             if ISite.providedBy(_site):\n                 break\n@@ -833,3 +865,216 @@ def human_readable_size(size):\n                 break\n         return \'%.1f %s\' % (float(size / float(SIZE_CONST[c])), c)\n     return size\n+\n+\n+def check_id(\n+        context, id=None, required=0, alternative_id=None, contained_by=None,\n+        **kwargs):\n+    """Test an id to make sure it is valid.\n+\n+    This used to be in Products/CMFPlone/skins/plone_scripts/check_id.py.\n+\n+    Returns an error message if the id is bad or None if the id is good.\n+    Parameters are as follows:\n+\n+        id - the id to check\n+\n+        required - if False, id can be the empty string\n+\n+        alternative_id - an alternative value to use for the id\n+        if the id is empty or autogenerated\n+\n+    Accept keyword arguments for compatibility with the fallback\n+    in Products.validation.\n+\n+    Note: The reason the id is included is to handle id error messages for\n+    such objects as files and images that supply an alternative id when an\n+    id is auto-generated.\n+    If you say "There is already an item with this name in this folder"\n+    for an image that has the Name field populated with an autogenerated id,\n+    it can cause some confusion; since the real problem is the name of\n+    the image file name, not in the name of the autogenerated id.\n+    """\n+    def xlate(message):\n+        ts = getToolByName(context, \'translation_service\', None)\n+        if ts is None:\n+            return message\n+        return ts.translate(message, context=context.REQUEST)\n+\n+    # if an alternative id has been supplied, see if we need to use it\n+    if alternative_id and not id:\n+        id = alternative_id\n+\n+    # make sure we have an id if one is required\n+    if not id:\n+        if required:\n+            return xlate(_(u\'Please enter a name.\'))\n+\n+        # Id is not required and no alternative was specified, so assume the\n+        # object\'s id will be context.getId(). We still should check to make\n+        # sure context.getId() is OK to handle the case of pre-created objects\n+        # constructed via portal_factory.  The main potential problem is an id\n+        # collision, e.g. if portal_factory autogenerates an id that already\n+        # exists.\n+\n+        id = context.getId()\n+\n+    #\n+    # do basic id validation\n+    #\n+\n+    # check for reserved names\n+    if id in (\'login\', \'layout\', \'plone\', \'zip\', \'properties\', ):\n+        return xlate(\n+            _(u\'${name} is reserved.\',\n+              mapping={\'name\': id}))\n+\n+    # check for bad characters\n+    plone_utils = getToolByName(context, \'plone_utils\', None)\n+    if plone_utils is not None:\n+        bad_chars = plone_utils.bad_chars(id)\n+        if len(bad_chars) > 0:\n+            bad_chars = \'\'.join(bad_chars).decode(\'utf-8\')\n+            decoded_id = id.decode(\'utf-8\')\n+            return xlate(\n+                _(u\'${name} is not a legal name. The following characters are \'\n+                  u\'invalid: ${characters}\',\n+                  mapping={u\'name\': decoded_id, u\'characters\': bad_chars}))\n+\n+    # check for a catalog index\n+    portal_catalog = getToolByName(context, \'portal_catalog\', None)\n+    if portal_catalog is not None:\n+        if id in list(portal_catalog.indexes()) + list(portal_catalog.schema()):\n+            return xlate(\n+                _(u\'${name} is reserved.\',\n+                  mapping={u\'name\': id}))\n+\n+    # id is good; decide if we should check for id collisions\n+    portal_factory = getToolByName(context, \'portal_factory\', None)\n+    if contained_by is not None:\n+        # Always check for collisions if a container was passed\n+        # via the contained_by parameter.\n+        checkForCollision = True\n+    elif portal_factory is not None and portal_factory.isTemporary(context):\n+        # always check for collisions if we are creating a new object\n+        checkForCollision = True\n+        # Climb the acquisition chain until you get at the real container.\n+        contained_by = aq_parent(aq_parent(aq_parent(aq_inner(context))))\n+    else:\n+        # if we have an existing object, only check for collisions\n+        # if we are changing the id\n+        checkForCollision = (context.getId() != id)\n+\n+    # check for id collisions\n+    if not checkForCollision:\n+        # We are done.\n+        return\n+    # handles two use cases:\n+    # 1. object has not yet been created and we don\'t know where it will be\n+    # 2. object has been created and checking validity of id within\n+    #    container\n+    if contained_by is None:\n+        try:\n+            contained_by = context.getParentNode()\n+        except Unauthorized:\n+            return  # nothing we can do\n+    try:\n+        result = _check_for_collision(contained_by, id, **kwargs)\n+    except Unauthorized:\n+        # There is a permission problem. Safe to assume we can\'t use this id.\n+        return xlate(\n+            _(u\'${name} is reserved.\',\n+              mapping={u\'name\': id}))\n+    if result is not None:\n+        result = xlate(result, )\n+    return result\n+\n+\n+def _check_for_collision(contained_by, id, **kwargs):\n+    """Check for collisions of an object id in a container.\n+\n+    Accept keyword arguments for compatibility with the fallback\n+    in Products.validation.\n+\n+    When this was still a Python skin script, some security checks\n+    would have been done automatically and caught by some\n+    \'except Unauthorized\' lines.  Now, in unrestricted Python\n+    code, we explicitly check.  But not all checks make sense.  If you don\'t\n+    have the \'Access contents information\' permission, theoretically\n+    you should not be able to check for an existing conflicting id,\n+    but it seems silly to then pretend that there is no conflict.\n+\n+    For safety, we let the check_id\n+    function do a try/except Unauthorized when calling us.\n+    """\n+    secman = getSecurityManager()\n+    # if not secman.checkPermission(\n+    #         \'Access contents information\', contained_by):\n+    #     # We cannot check.  Do not complain.\n+    #     return\n+\n+    # Check for an existing object.\n+    if id in contained_by:\n+        existing_obj = getattr(contained_by, id, None)\n+        if base_hasattr(existing_obj, \'portal_type\'):\n+            return _(\n+                u\'There is already an item named ${name} in this folder.\',\n+                mapping={u\'name\': id})\n+\n+    if base_hasattr(contained_by, \'checkIdAvailable\'):\n+        # This used to be called from the check_id skin script,\n+        # which would check the permission automatically,\n+        # and the code would catch the Unauthorized exception.\n+        if secman.checkPermission(AddPortalContent, contained_by):\n+            if not contained_by.checkIdAvailable(id):\n+                return _(u\'${name} is reserved.\', mapping={u\'name\': id})\n+\n+    # containers may implement this hook to further restrict ids\n+    if base_hasattr(contained_by, \'checkValidId\'):\n+        try:\n+            contained_by.checkValidId(id)\n+        except ConflictError:\n+            raise\n+        except:  # noqa: E722\n+            return _(u\'${name} is reserved.\', mapping={u\'name\': id})\n+\n+    # make sure we don\'t collide with any parent method aliases\n+    plone_utils = getToolByName(contained_by, \'plone_utils\', None)\n+    portal_types = getToolByName(contained_by, \'portal_types\', None)\n+    if plone_utils is not None and portal_types is not None:\n+        parentFti = portal_types.getTypeInfo(contained_by)\n+        if parentFti is not None:\n+            aliases = plone_utils.getMethodAliases(parentFti)\n+            if aliases is not None:\n+                if id in aliases.keys():\n+                    return _(u\'${name} is reserved.\', mapping={u\'name\': id})\n+\n+    # Lastly, we want to disallow the id of any of the tools in the portal\n+    # root, as well as any object that can be acquired via portal_skins.\n+    # However, we do want to allow overriding of *content* in the object\'s\n+    # parent path, including the portal root.\n+\n+    if id == \'index_html\':\n+        # always allow index_html\n+        return\n+    portal_url = getToolByName(contained_by, \'portal_url\', None)\n+    if portal_url is None:\n+        # Probably a test.\n+        # All other code needs the portal, so there is nothing left to check.\n+        return\n+    portal = portal_url.getPortalObject()\n+    if id in portal.contentIds():\n+        # Fine to use the same id as a *content* item from the root.\n+        return\n+    # It is allowed to give an object the same id as another\n+    # container in it\'s acquisition path as long as the\n+    # object is outside the portal.\n+    outsideportal = getattr(aq_parent(portal), id, None)\n+    insideportal = getattr(portal, id, None)\n+    if (insideportal is not None\n+            and outsideportal is not None\n+            and aq_base(outsideportal) == aq_base(insideportal)):\n+        return\n+    # but not other things\n+    if getattr(portal, id, None) is not None:\n+        return _(u\'${name} is reserved.\', mapping={u\'name\': id})\ndiff --git a/setup.py b/setup.py\nindex a01da7725..9f9f1067c 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,121 +1,9 @@\n+# -*- coding: utf-8 -*-\n from setuptools import setup\n from setuptools import find_packages\n \n-import sys\n-\n version = \'5.2a1.dev0\'\n \n-INSTALL_REQUIRES = [\n-    \'setuptools\',\n-    \'AccessControl >= 4.0b1\',\n-    \'Acquisition\',\n-    \'DateTime\',\n-    \'ExtensionClass\',\n-    \'Pillow\',\n-    \'Products.CMFCore\',\n-    \'Products.CMFDiffTool\',\n-    \'Products.CMFDynamicViewFTI\',\n-    \'Products.CMFEditions\',\n-    \'Products.CMFFormController\',\n-    \'Products.CMFQuickInstallerTool\',\n-    \'Products.CMFUid\',\n-    \'Products.DCWorkflow\',\n-    \'Products.ExtendedPathIndex\',\n-    \'Products.GenericSetup >= 2.0.dev0\',\n-    \'Products.MimetypesRegistry\',\n-    \'Products.PlonePAS\',\n-    \'Products.PluggableAuthService\',\n-    \'Products.PluginRegistry\',\n-    \'Products.PortalTransforms\',\n-    \'Products.ResourceRegistries\',\n-    \'Products.Sessions\',\n-    \'Products.SiteErrorLog\',\n-    \'Products.TemporaryFolder\',\n-    \'Products.contentmigration\',\n-    \'Products.statusmessages\',\n-    \'ZODB3\',\n-    \'Zope >= 4.0b2\',\n-    \'borg.localrole\',\n-    \'five.customerize\',\n-    \'five.localsitemanager\',\n-    \'mockup\',\n-    \'plone.api >= 1.4.4\',\n-    \'plone.app.content\',\n-    \'plone.app.contentlisting\',\n-    \'plone.app.contentmenu >= 1.1.6dev-r22380\',\n-    \'plone.app.contentrules\',\n-    \'plone.app.contenttypes\',\n-    \'plone.app.customerize\',\n-    \'plone.app.dexterity\',\n-    \'plone.app.discussion\',\n-    \'plone.app.folder\',\n-    \'plone.app.i18n\',\n-    \'plone.app.multilingual\',\n-    \'plone.app.layout >=1.1.7dev-r23744\',\n-    \'plone.app.linkintegrity >=1.0.3\',\n-    \'plone.app.locales\',\n-    \'plone.app.portlets\',\n-    \'plone.app.redirector\',\n-    \'plone.app.registry\',\n-    \'plone.app.theming\',\n-    \'plone.app.users\',\n-    \'plone.app.uuid\',\n-    \'plone.app.viewletmanager\',\n-    \'plone.app.vocabularies\',\n-    \'plone.app.workflow\',\n-    \'plone.batching\',\n-    \'plone.browserlayer >= 1.0rc4\',\n-    \'plone.contentrules\',\n-    \'plone.i18n\',\n-    \'plone.indexer\',\n-    \'plone.intelligenttext\',\n-    \'plone.locking\',\n-    \'plone.memoize\',\n-    \'plone.outputfilters\',\n-    \'plone.portlet.collection\',\n-    \'plone.portlet.static\',\n-    \'plone.portlets\',\n-    \'plone.protect >= 3.0.0a1\',\n-    \'plone.registry\',\n-    \'plone.schema\',\n-    \'plone.session\',\n-    \'plone.subrequest\',\n-    \'plone.theme\',\n-    \'plonetheme.barceloneta\',\n-    \'pyScss\',\n-    \'six\',\n-    \'slimit\',\n-    \'transaction\',\n-    \'z3c.autoinclude\',\n-    \'zope.app.locales >= 3.6.0\',\n-    \'zope.cachedescriptors\',\n-    \'zope.component\',\n-    \'zope.container\',\n-    \'zope.deferredimport\',\n-    \'zope.deprecation\',\n-    \'zope.dottedname\',\n-    \'zope.event\',\n-    \'zope.i18n\',\n-    \'zope.i18nmessageid\',\n-    \'zope.interface\',\n-    \'zope.location\',\n-    \'zope.pagetemplate\',\n-    \'zope.publisher\',\n-    \'zope.site\',\n-    \'zope.structuredtext\',\n-    \'zope.tal\',\n-    \'zope.tales\',\n-    \'zope.traversing\',\n-]\n-\n-PY2_ONLY = [\n-    \'Products.ExternalEditor\',\n-    \'ZServer\',\n-]\n-\n-if sys.version_info[0] == 2:\n-    INSTALL_REQUIRES += PY2_ONLY\n-\n setup(\n     name=\'Products.CMFPlone\',\n     version=version,\n@@ -125,29 +13,136 @@\n     classifiers=[\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.1",\n         "Framework :: Plone :: 5.2",\n-        "Framework :: Zope2",\n+        "Framework :: Zope",\n+        "Framework :: Zope :: 4",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n         "Topic :: Internet :: WWW/HTTP :: Dynamic Content",\n     ],\n-    keywords=\'Plone CMF python Zope\',\n+    keywords=\'Plone CMF Python Zope CMS Webapplication\',\n     author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'http://plone.org/\',\n+    author_email=\'releasemanager@plone.org\',\n+    url=\'https://plone.org\',\n     license=\'GPL version 2\',\n     packages=find_packages(),\n     namespace_packages=[\'Products\'],\n     include_package_data=True,\n     zip_safe=False,\n-    extras_require=dict(\n-        archetypes=[\n-            \'Products.ATContentTypes\',\n+    install_requires=[\n+        \'AccessControl >= 4.0b1\',\n+        \'Acquisition\',\n+        \'borg.localrole\',\n+        \'DateTime\',\n+        \'ExtensionClass\',\n+        \'five.customerize\',\n+        \'five.localsitemanager\',\n+        \'mockup\',\n+        \'Pillow\',\n+        \'plone.api >= 1.4.4\',\n+        \'plone.app.content\',\n+        \'plone.app.contentlisting\',\n+        \'plone.app.contentmenu >= 1.1.6dev-r22380\',\n+        \'plone.app.contentrules\',\n+        \'plone.app.contenttypes\',\n+        \'plone.app.customerize\',\n+        \'plone.app.dexterity\',\n+        \'plone.app.discussion\',\n+        \'plone.app.i18n\',\n+        \'plone.app.layout >=1.1.7dev-r23744\',\n+        \'plone.app.linkintegrity >=1.0.3\',\n+        \'plone.app.locales\',\n+        \'plone.app.multilingual\',\n+        \'plone.app.portlets\',\n+        \'plone.app.redirector\',\n+        \'plone.app.registry\',\n+        \'plone.app.theming\',\n+        \'plone.app.users\',\n+        \'plone.app.uuid\',\n+        \'plone.app.viewletmanager\',\n+        \'plone.app.vocabularies\',\n+        \'plone.app.workflow\',\n+        \'plone.batching\',\n+        \'plone.browserlayer >= 1.0rc4\',\n+        \'plone.contentrules\',\n+        \'plone.folder\',\n+        \'plone.i18n\',\n+        \'plone.indexer\',\n+        \'plone.intelligenttext\',\n+        \'plone.locking\',\n+        \'plone.memoize\',\n+        \'plone.outputfilters\',\n+        \'plone.portlet.collection\',\n+        \'plone.portlet.static\',\n+        \'plone.portlets\',\n+        \'plone.protect >= 3.0.0a1\',\n+        \'plone.registry\',\n+        \'plone.schema\',\n+        \'plone.session\',\n+        \'plone.subrequest\',\n+        \'plone.theme\',\n+        \'plonetheme.barceloneta\',\n+        \'Products.CMFCore\',\n+        \'Products.CMFDiffTool\',\n+        \'Products.CMFDynamicViewFTI\',\n+        \'Products.CMFEditions\',\n+        \'Products.CMFFormController\',\n+        \'Products.CMFQuickInstallerTool\',\n+        \'Products.CMFUid\',\n+        \'Products.DCWorkflow\',\n+        \'Products.ExtendedPathIndex\',\n+        \'Products.ExternalEditor ; python_version<"3"\',\n+        \'Products.GenericSetup >= 2.0.dev0\',\n+        \'Products.MimetypesRegistry\',\n+        \'Products.PlonePAS\',\n+        \'Products.PluggableAuthService\',\n+        \'Products.PluginRegistry\',\n+        \'Products.PortalTransforms\',\n+        \'Products.ResourceRegistries\',\n+        \'Products.Sessions\',\n+        \'Products.SiteErrorLog\',\n+        \'Products.statusmessages\',\n+        \'Products.TemporaryFolder\',\n+        \'pyScss\',\n+        \'setuptools>=36.2\',\n+        \'six\',\n+        \'slimit\',\n+        \'transaction\',\n+        \'z3c.autoinclude\',\n+        \'ZODB3\',\n+        \'Zope >= 4.0b5\',\n+        \'zope.app.locales >= 3.6.0\',\n+        \'zope.cachedescriptors\',\n+        \'zope.component\',\n+        \'zope.container\',\n+        \'zope.deferredimport\',\n+        \'zope.deprecation\',\n+        \'zope.dottedname\',\n+        \'zope.event\',\n+        \'zope.i18n\',\n+        \'zope.i18nmessageid\',\n+        \'zope.interface\',\n+        \'zope.location\',\n+        \'zope.pagetemplate\',\n+        \'zope.publisher\',\n+        \'zope.site\',\n+        \'zope.structuredtext\',\n+        \'zope.tal\',\n+        \'zope.tales\',\n+        \'zope.traversing\',\n+        \'ZServer ; python_version<"3"\',\n+    ],\n+    extras_require={\n+        \'archetypes\': [\n+            \'Products.ATContentTypes ; python_version<"3"\',\n+            \'archetypes.multilingual ; python_version<"3"\',\n+            \'plone.app.contenttypes[archetypes,atrefs] ; python_version<"3"\',\n         ],\n-        test=[\n+        \'test\': [\n             \'lxml\',\n             \'mock\',\n             \'plone.app.robotframework>0.9.16\',\n@@ -156,10 +151,9 @@\n             \'zope.globalrequest\',\n             \'zope.testing\',\n         ]\n-    ),\n-    install_requires=INSTALL_REQUIRES,\n+    },\n     entry_points="""\\\n       [console_scripts]\n       plone-compile-resources = Products.CMFPlone._scripts.compile_resources:main\n-      """\n+    """  # noqa\n )\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2018-10-23T13:36:39+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/52f11c86f9bc328f281ca2f187239f1f58355fc2

Merge pull request #2573 from plone/remove-legacy-resource-registries

Remove legacy resource registries

Files changed:
M CHANGES.rst
M Products/CMFPlone/exportimport/configure.zcml
M Products/CMFPlone/resources/configure.zcml
D Products/CMFPlone/resources/exportimport/configure.zcml
D Products/CMFPlone/resources/exportimport/cssregistry.py
D Products/CMFPlone/resources/exportimport/jsregistry.py
D Products/CMFPlone/resources/viewlets/__init__.py
D Products/CMFPlone/resources/viewlets/registries.py
D Products/CMFPlone/resources/viewlets/settings.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 1211088cd..3ab206f5f 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -12,7 +12,7 @@ Breaking changes:\n \n - Remove all dependencies on plone.app.controlpanel.\n   Third party code need either to depend on plone.app.controlpanel 4.0,\n-  which is a backward compatibilit package only, or also update to not depend on it anymore.\n+  which is a backward compatibility package only, or also update to not depend on it anymore.\n   [jensens]\n \n - Removed check_id.py skin script.  Replaced with utils.check_id function.\n@@ -40,6 +40,9 @@ Breaking changes:\n - Stop configuring \'View History\' permission which was removed from Zope.\n   [davisagli]\n \n+- Remove legacy resource registries portal_css and portal_javascripts\n+  [ksuess]\n+\n New features:\n \n - Factored out human_readable_size method for replacing getObjSize.py;\ndiff --git a/Products/CMFPlone/exportimport/configure.zcml b/Products/CMFPlone/exportimport/configure.zcml\nindex 9f2601191..15c6ed355 100644\n--- a/Products/CMFPlone/exportimport/configure.zcml\n+++ b/Products/CMFPlone/exportimport/configure.zcml\n@@ -14,28 +14,6 @@\n     <depends name="typeinfo"/>\n   </genericsetup:importStep>\n \n-  <genericsetup:importStep\n-      name="cssregistry"\n-      title="Stylesheet registry"\n-      description="Import stylesheet registry"\n-      handler="Products.CMFPlone.resources.exportimport.cssregistry.importCSSRegistry">\n-    <depends name="skins"/>\n-    <depends name="componentregistry"/>\n-    <depends name="plone.app.registry"/>\n-    <depends name="toolset"/>\n-  </genericsetup:importStep>\n-\n-  <genericsetup:importStep\n-      name="jsregistry"\n-      title="Javascript registry"\n-      description="Import javascript registry"\n-      handler="Products.CMFPlone.resources.exportimport.jsregistry.importJSRegistry">\n-    <depends name="skins"/>\n-    <depends name="componentregistry"/>\n-    <depends name="plone.app.registry"/>\n-    <depends name="toolset"/>\n-  </genericsetup:importStep>\n-\n   <genericsetup:importStep\n       name="viewlets"\n       title="Viewlet Settings"\ndiff --git a/Products/CMFPlone/resources/configure.zcml b/Products/CMFPlone/resources/configure.zcml\nindex 474e56ef0..0bec1224e 100644\n--- a/Products/CMFPlone/resources/configure.zcml\n+++ b/Products/CMFPlone/resources/configure.zcml\n@@ -3,6 +3,5 @@\n     i18n_domain="plone.registry">\n \n     <include package=".browser" />\n-    <include package=".exportimport" />\n \n </configure>\ndiff --git a/Products/CMFPlone/resources/exportimport/configure.zcml b/Products/CMFPlone/resources/exportimport/configure.zcml\ndeleted file mode 100644\nindex 400fed6a1..000000000\n--- a/Products/CMFPlone/resources/exportimport/configure.zcml\n+++ /dev/null\n@@ -1,19 +0,0 @@\n-<configure\n-    xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone">\n-\n-  <adapter\n-      factory=".jsregistry.JSRegistryNodeAdapter"\n-      provides="Products.GenericSetup.interfaces.IBody"\n-      for="Products.ResourceRegistries.interfaces.IJSRegistry\n-           Products.GenericSetup.interfaces.ISetupEnviron"\n-      />\n-\n-  <adapter\n-      factory=".cssregistry.CSSRegistryNodeAdapter"\n-      provides="Products.GenericSetup.interfaces.IBody"\n-      for="Products.ResourceRegistries.interfaces.ICSSRegistry\n-           Products.GenericSetup.interfaces.ISetupEnviron"\n-      />\n-\n-</configure>\ndiff --git a/Products/CMFPlone/resources/exportimport/cssregistry.py b/Products/CMFPlone/resources/exportimport/cssregistry.py\ndeleted file mode 100644\nindex d4fa172c4..000000000\n--- a/Products/CMFPlone/resources/exportimport/cssregistry.py\n+++ /dev/null\n@@ -1,29 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from Products.CMFPlone.resources.exportimport.resourceregistry import importResRegistry\n-from Products.CMFPlone.resources.exportimport.resourceregistry import ResourceRegistryNodeAdapter\n-from Products.ResourceRegistries.interfaces import ICSSRegistry\n-\n-\n-_FILENAME = \'cssregistry.xml\'\n-_REG_ID = \'portal_css\'\n-_REG_TITLE = \'Stylesheet registry\'\n-\n-\n-def importCSSRegistry(context):\n-    """\n-    Import CSS registry.\n-    """\n-    return importResRegistry(context, _REG_ID, _REG_TITLE, _FILENAME)\n-\n-\n-class CSSRegistryNodeAdapter(ResourceRegistryNodeAdapter):\n-\n-    """\n-    Node im- and exporter for CSSRegistry.\n-    """\n-\n-    __used_for__ = ICSSRegistry\n-    registry_id = _REG_ID\n-    resource_type = \'stylesheet\'\n-    register_method = \'registerStylesheet\'\n-    update_method = \'updateStylesheet\'\ndiff --git a/Products/CMFPlone/resources/exportimport/jsregistry.py b/Products/CMFPlone/resources/exportimport/jsregistry.py\ndeleted file mode 100644\nindex e11966c99..000000000\n--- a/Products/CMFPlone/resources/exportimport/jsregistry.py\n+++ /dev/null\n@@ -1,31 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from Products.ResourceRegistries.interfaces import IJSRegistry\n-from .resourceregistry import importResRegistry\n-from .resourceregistry import ResourceRegistryNodeAdapter\n-\n-\n-_FILENAME = \'jsregistry.xml\'\n-_REG_ID = \'portal_javascripts\'\n-_REG_TITLE = \'Javascript registry\'\n-\n-\n-def importJSRegistry(context):\n-    """Import javascript registry.\n-    """\n-    return importResRegistry(context, _REG_ID, _REG_TITLE, _FILENAME)\n-\n-\n-class JSRegistryNodeAdapter(ResourceRegistryNodeAdapter):\n-    """Node im- and exporter for JSRegistry.\n-    """\n-\n-    __used_for__ = IJSRegistry\n-    registry_id = _REG_ID\n-    resource_type = \'javascript\'\n-    register_method = \'registerScript\'\n-    update_method = \'updateScript\'\n-\n-    # We already have jQuery, blacklist legacy installs of plone.app.jquery js\n-    resource_blacklist = set((\n-        "++resource++plone.app.jquery.js",\n-    ))\ndiff --git a/Products/CMFPlone/resources/viewlets/__init__.py b/Products/CMFPlone/resources/viewlets/__init__.py\ndeleted file mode 100644\nindex 31d2aad4b..000000000\n--- a/Products/CMFPlone/resources/viewlets/__init__.py\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from Products.ResourceRegistries.interfaces.registries import ICookedFile\n-from Products.ResourceRegistries.interfaces.registries import ICSSRegistry\n-from Products.ResourceRegistries.interfaces.registries import IJSRegistry\n-from Products.ResourceRegistries.interfaces.registries import IKSSRegistry\n-from Products.ResourceRegistries.interfaces.registries import IResourceProvider\n-from Products.ResourceRegistries.interfaces.registries import IResourceRegistry\n-from Products.ResourceRegistries.interfaces.settings import IResourceRegistriesSettings\n-from Products.ResourceRegistries.interfaces.viewletmanagers import IHtmlHeadScripts\n-from Products.ResourceRegistries.interfaces.viewletmanagers import IHtmlHeadStyles\ndiff --git a/Products/CMFPlone/resources/viewlets/registries.py b/Products/CMFPlone/resources/viewlets/registries.py\ndeleted file mode 100644\nindex 89a0ca60d..000000000\n--- a/Products/CMFPlone/resources/viewlets/registries.py\n+++ /dev/null\n@@ -1,160 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from zope.interface import Attribute\n-from zope.interface import Interface\n-\n-\n-class ICookedFile(Interface):\n-    """Marker interface for file objects created on the fly for\n-    concatenated resources.\n-    """\n-\n-\n-class IResourceProvider(Interface):\n-    """A provider of resources.\n-\n-    Register a named adapter from the particular resource registry object\n-    to this interface to provide resources from locations other than the\n-    main persistent registry.\n-    """\n-\n-    def getResources(self):\n-        """Get a list of available Resource objects\n-        """\n-\n-\n-class IResourceRegistry(Interface):\n-    """A tool for registering and evaluating resource linkage."""\n-\n-    def registerResource(id, expression=\'\', enabled=1):\n-        """Register a resource."""\n-\n-    def getEvaluatedResources(context):\n-        """Get the evaluated resource links and inline styles appropriate\n-        to the context for rendering.\n-        """\n-\n-    def unregisterResource(id):\n-        """Unregister a registered resource."""\n-\n-    def getResource(id):\n-        """Get resource object by id.\n-\n-        If any property of the resource is changed, then cookResources of the\n-        registry must be called."""\n-\n-    def renameResource(old_id, new_id):\n-        """Change the id of a registered resource."""\n-\n-    def moveResource(id, position):\n-        """Move a registered resource to the given position."""\n-\n-    def getResourcePosition(id):\n-        """Get the position (order) of a resource given its id."""\n-\n-    def moveResourceUp(id, steps=1, REQUEST=None):\n-        """Move the resource up \'steps\' number of steps."""\n-\n-    def moveResourceDown(id, steps=1, REQUEST=None):\n-        """Move the resource down \'steps\' number of steps."""\n-\n-    def moveResourceToTop(id, REQUEST=None):\n-        """Move the resource to the first position."""\n-\n-    def moveResourceToBottom(id, REQUEST=None):\n-        """Move the resource to the last position."""\n-\n-    def moveResourceBefore(id, dest_id, REQUEST=None):\n-        """Move the resource before the resource with dest_id."""\n-\n-    def moveResourceAfter(id, dest_id, REQUEST=None):\n-        """Move the resource after the resource with dest_id."""\n-\n-    def getResourceIds():\n-        """Return the ids of all resources."""\n-\n-    def getResources():\n-        """Get the resource objects.\n-\n-        For use in management screens.\n-        """\n-\n-\n-class ICSSRegistry(Interface):\n-    """A tool for registering and evaluating stylesheet linkage."""\n-\n-    id = Attribute(\'id\',\n-                   """ The tool\'s ID.\n-\n-                   o Must be set to \'portal_css\'.\n-                   """)\n-\n-    def registerStylesheet(id, expression=\'\', media=\'screen\', rel=\'stylesheet\',\n-                           rendering=\'link\', enabled=1):\n-        """Register a stylesheet."""\n-\n-    def manage_addStylesheet(\n-            id,\n-            expression=\'\',\n-            media=\'screen\',\n-            rel=\'stylesheet\',\n-            rendering=\'link\',\n-            enabled=True,\n-            REQUEST=None):\n-        """Add stylesheet from a ZMI form."""\n-\n-    def manage_removeStylesheet(id, REQUEST=None):\n-        """Remove stylesheet from the ZMI."""\n-\n-    def manage_saveStylesheets(REQUEST=None):\n-        """Save stylesheet data from form submission."""\n-\n-\n-class IKSSRegistry(Interface):\n-    """A tool for registering and evaluating kineticstylesheet linkage."""\n-\n-    id = Attribute(\'id\',\n-                   """ The tool\'s ID.\n-\n-                   o Must be set to \'portal_kss\'.\n-                   """)\n-\n-    def registerKineticStylesheet(id, expression=\'\', enabled=1):\n-        """Register a kineticstylesheet."""\n-\n-    def manage_addKineticStylesheet(id, expression=\'\',\n-                                    enabled=True, REQUEST=None):\n-        """Add kineticstylesheet from a ZMI form."""\n-\n-    def manage_removeKineticStylesheet(id, REQUEST=None):\n-        """Remove kineticstylesheet from the ZMI."""\n-\n-    def manage_saveKineticStylesheets(REQUEST=None):\n-        """Save kineticstylesheet data from form submission."""\n-\n-\n-class IJSRegistry(Interface):\n-\n-    """A tool for registering and evaluating script linkage."""\n-\n-    id = Attribute(\'id\',\n-                   """ The tool\'s ID.\n-\n-                   o Must be set to \'portal_javascripts\'.\n-                   """)\n-\n-    def registerScript(id, expression=\'\', inline=False, enabled=True):\n-        """Register a script."""\n-\n-    def manage_saveScripts(REQUEST=None):\n-        """Save script data from form submission."""\n-\n-    def manage_addScript(\n-            id,\n-            expression=\'\',\n-            inline=False,\n-            enabled=True,\n-            REQUEST=None):\n-        """Add script from a ZMI form."""\n-\n-    def manage_removeScript(id, REQUEST=None):\n-        """Remove script via the ZMI."""\ndiff --git a/Products/CMFPlone/resources/viewlets/settings.py b/Products/CMFPlone/resources/viewlets/settings.py\ndeleted file mode 100644\nindex 6ebf27c30..000000000\n--- a/Products/CMFPlone/resources/viewlets/settings.py\n+++ /dev/null\n@@ -1,19 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from zope import schema\n-from zope.i18nmessageid import MessageFactory\n-from zope.interface import Interface\n-\n-\n-_ = MessageFactory(\'plone\')\n-\n-\n-class IResourceRegistriesSettings(Interface):\n-    """Settings stored in portal_registry\n-    """\n-\n-    resourceBundlesForThemes = schema.Dict(\n-        title=_(u"Resource bundles for themes"),\n-        description=_(u"Maps skin names to lists of resource bundle names"),\n-        key_type=schema.ASCIILine(),\n-        value_type=schema.List(value_type=schema.ASCIILine())\n-    )\n'

