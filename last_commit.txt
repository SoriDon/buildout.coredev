Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2022-05-09T20:35:58+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.app.robotframework/commit/1b01802b998012b3c6e345fa771313aa1c9ed163

Replace WSGI_SERVER_TEST_SCOPE_FIXTURE with WSGI_SERVER_SINGLE_THREADED_FIXTURE

Files changed:
M src/plone/app/robotframework/testing.py

b'diff --git a/src/plone/app/robotframework/testing.py b/src/plone/app/robotframework/testing.py\nindex 7f74208..7086070 100644\n--- a/src/plone/app/robotframework/testing.py\n+++ b/src/plone/app/robotframework/testing.py\n@@ -10,7 +10,6 @@\n from plone.app.robotframework.remote import RemoteLibraryLayer\n from plone.app.robotframework.server import Zope2ServerRemote\n from plone.app.robotframework.users import Users\n-from plone.app.robotframework.server import WAIT\n from plone.app.testing import applyProfile\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n@@ -23,6 +22,7 @@\n from plone.testing.zope import WSGI_SERVER_FIXTURE\n from Products.MailHost.interfaces import IMailHost\n from robot.libraries.BuiltIn import BuiltIn\n+from webtest.http import StopableWSGIServer\n from zope.component import getSiteManager\n from zope.configuration import xmlconfig\n \n@@ -283,45 +283,6 @@ def __nonzero__(x):\n     name="PloneRobot:Integration",\n )\n \n-\n-class WSGIServerTestScope(WSGIServer):\n-\n-    # Layer where WSGI server is shutdown on testTearDown to prevent requests\n-    # being processed between tests (which could lead to unexpected database\n-    # state).\n-\n-    # Still starts with WSGI server being started at first on suite setUp\n-    # for convenience and similar "RobotServer" experience to the default\n-    # layer.\n-\n-    bases = (PLONE_FIXTURE,)\n-\n-    def setUp(self):\n-        print(WAIT("WSGIServerTestScope:setUp"))\n-        super(WSGIServerTestScope, self).setUp()\n-\n-    def testSetUp(self):\n-        print(WAIT("WSGIServerTestScope:testSetUp"))\n-        if hasattr(self, "server") and self.server.was_shutdown:\n-            super(WSGIServerTestScope, self).setUp()\n-\n-    def tearDown(self):\n-        print(WAIT("WSGIServerTestScope:tearDown"))\n-        pass\n-\n-    def testTearDown(self):\n-        print(WAIT("WSGIServerTestScope:testTearDown"))\n-        super(WSGIServerTestScope, self).tearDown()\n-        # Try to wait until server no longer responds.\n-        if hasattr(self, "server"):\n-            for i in range(10):\n-                # There is implicit 0.3 second sleep per try.\n-                if not self.server.wait(0):\n-                    return\n-\n-\n-WSGI_SERVER_TEST_SCOPE_FIXTURE = WSGIServerTestScope()\n-\n PLONE_ROBOT_TESTING = FunctionalTesting(\n     bases=(\n         PLONE_ROBOT_FIXTURE,\n@@ -331,11 +292,38 @@ def testTearDown(self):\n     name="Plone:Robot",\n )\n \n+\n+class WSGIServerSingleThreaded(WSGIServer):\n+\n+    def setUpServer(self):\n+        """Create a single threaded WSGI server instance and save it in self.server.\n+        """\n+        app = self.make_wsgi_app()\n+        kwargs = {\'clear_untrusted_proxy_headers\': False,\n+                  \'threads\': 1}\n+        if self.host is not None:\n+            kwargs[\'host\'] = self.host\n+        if self.port is not None:\n+            kwargs[\'port\'] = int(self.port)\n+        self.server = StopableWSGIServer.create(app, **kwargs)\n+        # If we dynamically set the host/port, we want to reset it to localhost\n+        # Otherwise this will depend on, for example, the local network setup\n+        if self.host in (None, \'0.0.0.0\', \'127.0.0.1\', \'localhost\'):\n+            self.server.effective_host = \'localhost\'\n+        # Refresh the hostname and port in case we dynamically picked them\n+        self[\'host\'] = self.host = self.server.effective_host\n+        self[\'port\'] = self.port = int(self.server.effective_port)\n+\n+\n+\n+WSGI_SERVER_SINGLE_THREADED_FIXTURE = WSGIServerSingleThreaded()\n+\n+\n VOLTO_ROBOT_TESTING = FunctionalTesting(\n     bases=(\n         PLONE_ROBOT_FIXTURE,\n         REMOTE_LIBRARY_BUNDLE_FIXTURE,\n-        WSGI_SERVER_TEST_SCOPE_FIXTURE,\n+        WSGI_SERVER_SINGLE_THREADED_FIXTURE,\n     ),\n     name="Volto:Robot",\n )\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2022-05-09T20:36:04+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.app.robotframework/commit/a16031117f8f649b60ac98112fe61c7066eafba3

Revert 6ac8cddd635f8a7e7a5f5324f8990506a5fdb12f

Files changed:
M src/plone/app/robotframework/server.py

b'diff --git a/src/plone/app/robotframework/server.py b/src/plone/app/robotframework/server.py\nindex 4076ff9..0015186 100644\n--- a/src/plone/app/robotframework/server.py\n+++ b/src/plone/app/robotframework/server.py\n@@ -316,7 +316,6 @@ def zodb_setup(self, layer_dotted_name=None):\n         from zope.testrunner.runner import order_by_bases\n \n         layers = order_by_bases([self.zope_layer])\n-        print(WAIT(layers))\n         for layer in layers:\n             if hasattr(layer, "testSetUp"):\n                 if HAS_VERBOSE_CONSOLE:\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2022-05-09T20:36:05+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.app.robotframework/commit/4dda177ea6bba8807c9d71e18d7309d25a95bdbc

Add changelog entry

Files changed:
A news/133.bugfix

b'diff --git a/news/133.bugfix b/news/133.bugfix\nnew file mode 100644\nindex 0000000..a93d093\n--- /dev/null\n+++ b/news/133.bugfix\n@@ -0,0 +1,2 @@\n+Replace WSGI_SERVER_TEST_SCOPE_FIXTURE used in VOLTO_ROBOT_TESTING with WSGI_SERVER_SINGLE_THREADED_FIXTUREOLTO_ROBOT_TESTING.\n+[datakurre]\n'

Repository: plone.app.robotframework


Branch: refs/heads/master
Date: 2022-05-14T11:48:06+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.robotframework/commit/2c867317238ccff3369bcc3012211e400abfd007

Merge pull request #133 from plone/volto_3294

Replace WSGI_SERVER_TEST_SCOPE_FIXTURE with WSGI_SERVER_SINGLE_THREADâ€¦

Files changed:
A news/133.bugfix
M src/plone/app/robotframework/server.py
M src/plone/app/robotframework/testing.py

b'diff --git a/news/133.bugfix b/news/133.bugfix\nnew file mode 100644\nindex 0000000..a93d093\n--- /dev/null\n+++ b/news/133.bugfix\n@@ -0,0 +1,2 @@\n+Replace WSGI_SERVER_TEST_SCOPE_FIXTURE used in VOLTO_ROBOT_TESTING with WSGI_SERVER_SINGLE_THREADED_FIXTUREOLTO_ROBOT_TESTING.\n+[datakurre]\ndiff --git a/src/plone/app/robotframework/server.py b/src/plone/app/robotframework/server.py\nindex 4076ff9..0015186 100644\n--- a/src/plone/app/robotframework/server.py\n+++ b/src/plone/app/robotframework/server.py\n@@ -316,7 +316,6 @@ def zodb_setup(self, layer_dotted_name=None):\n         from zope.testrunner.runner import order_by_bases\n \n         layers = order_by_bases([self.zope_layer])\n-        print(WAIT(layers))\n         for layer in layers:\n             if hasattr(layer, "testSetUp"):\n                 if HAS_VERBOSE_CONSOLE:\ndiff --git a/src/plone/app/robotframework/testing.py b/src/plone/app/robotframework/testing.py\nindex 7f74208..7086070 100644\n--- a/src/plone/app/robotframework/testing.py\n+++ b/src/plone/app/robotframework/testing.py\n@@ -10,7 +10,6 @@\n from plone.app.robotframework.remote import RemoteLibraryLayer\n from plone.app.robotframework.server import Zope2ServerRemote\n from plone.app.robotframework.users import Users\n-from plone.app.robotframework.server import WAIT\n from plone.app.testing import applyProfile\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n@@ -23,6 +22,7 @@\n from plone.testing.zope import WSGI_SERVER_FIXTURE\n from Products.MailHost.interfaces import IMailHost\n from robot.libraries.BuiltIn import BuiltIn\n+from webtest.http import StopableWSGIServer\n from zope.component import getSiteManager\n from zope.configuration import xmlconfig\n \n@@ -283,45 +283,6 @@ def __nonzero__(x):\n     name="PloneRobot:Integration",\n )\n \n-\n-class WSGIServerTestScope(WSGIServer):\n-\n-    # Layer where WSGI server is shutdown on testTearDown to prevent requests\n-    # being processed between tests (which could lead to unexpected database\n-    # state).\n-\n-    # Still starts with WSGI server being started at first on suite setUp\n-    # for convenience and similar "RobotServer" experience to the default\n-    # layer.\n-\n-    bases = (PLONE_FIXTURE,)\n-\n-    def setUp(self):\n-        print(WAIT("WSGIServerTestScope:setUp"))\n-        super(WSGIServerTestScope, self).setUp()\n-\n-    def testSetUp(self):\n-        print(WAIT("WSGIServerTestScope:testSetUp"))\n-        if hasattr(self, "server") and self.server.was_shutdown:\n-            super(WSGIServerTestScope, self).setUp()\n-\n-    def tearDown(self):\n-        print(WAIT("WSGIServerTestScope:tearDown"))\n-        pass\n-\n-    def testTearDown(self):\n-        print(WAIT("WSGIServerTestScope:testTearDown"))\n-        super(WSGIServerTestScope, self).tearDown()\n-        # Try to wait until server no longer responds.\n-        if hasattr(self, "server"):\n-            for i in range(10):\n-                # There is implicit 0.3 second sleep per try.\n-                if not self.server.wait(0):\n-                    return\n-\n-\n-WSGI_SERVER_TEST_SCOPE_FIXTURE = WSGIServerTestScope()\n-\n PLONE_ROBOT_TESTING = FunctionalTesting(\n     bases=(\n         PLONE_ROBOT_FIXTURE,\n@@ -331,11 +292,38 @@ def testTearDown(self):\n     name="Plone:Robot",\n )\n \n+\n+class WSGIServerSingleThreaded(WSGIServer):\n+\n+    def setUpServer(self):\n+        """Create a single threaded WSGI server instance and save it in self.server.\n+        """\n+        app = self.make_wsgi_app()\n+        kwargs = {\'clear_untrusted_proxy_headers\': False,\n+                  \'threads\': 1}\n+        if self.host is not None:\n+            kwargs[\'host\'] = self.host\n+        if self.port is not None:\n+            kwargs[\'port\'] = int(self.port)\n+        self.server = StopableWSGIServer.create(app, **kwargs)\n+        # If we dynamically set the host/port, we want to reset it to localhost\n+        # Otherwise this will depend on, for example, the local network setup\n+        if self.host in (None, \'0.0.0.0\', \'127.0.0.1\', \'localhost\'):\n+            self.server.effective_host = \'localhost\'\n+        # Refresh the hostname and port in case we dynamically picked them\n+        self[\'host\'] = self.host = self.server.effective_host\n+        self[\'port\'] = self.port = int(self.server.effective_port)\n+\n+\n+\n+WSGI_SERVER_SINGLE_THREADED_FIXTURE = WSGIServerSingleThreaded()\n+\n+\n VOLTO_ROBOT_TESTING = FunctionalTesting(\n     bases=(\n         PLONE_ROBOT_FIXTURE,\n         REMOTE_LIBRARY_BUNDLE_FIXTURE,\n-        WSGI_SERVER_TEST_SCOPE_FIXTURE,\n+        WSGI_SERVER_SINGLE_THREADED_FIXTURE,\n     ),\n     name="Volto:Robot",\n )\n'

