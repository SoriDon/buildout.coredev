Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-19T14:10:06+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.restapi/commit/ef72d00cb39f11e1daa0b5decbf75735214f4dfd

Tests: patch unique url for scale in old or new way.

This is only in serializer tests for images.

uuid4 is only used until plone.scale 6.0.0a4.
https://github.com/plone/plone.scale/pull/57 introduces a new way.

We also patch the _modified_since method to always return True.
Otherwise you may get info from a different scale back, precisely because we give all scales the same "unique" id,
which then is of course no longer unique, making the logic unstable.
This is needed for the newer plone.scale versions, but should be perfectly fine for the older ones.

Files changed:
A news/57.bugfix
M src/plone/restapi/tests/helpers.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_serializer.py

b'diff --git a/news/57.bugfix b/news/57.bugfix\nnew file mode 100644\nindex 000000000..b11fd2500\n--- /dev/null\n+++ b/news/57.bugfix\n@@ -0,0 +1,3 @@\n+Tests: patch unique url for scale in old or new way.\n+This is only in serializer tests for images.\n+[maurits]\ndiff --git a/src/plone/restapi/tests/helpers.py b/src/plone/restapi/tests/helpers.py\nindex 5e6e64f92..dd01a6d51 100644\n--- a/src/plone/restapi/tests/helpers.py\n+++ b/src/plone/restapi/tests/helpers.py\n@@ -1,4 +1,7 @@\n+from contextlib import contextmanager\n+from plone.scale import storage\n from Products.CMFCore.utils import getToolByName\n+from unittest.mock import patch\n from urllib.parse import urlparse\n \n import quopri\n@@ -43,3 +46,30 @@ def ascii_token(text):\n     bytestring that is safe to use in term tokens.\n     """\n     return quopri.encodestring(text.encode("utf-8"))\n+\n+\n+@contextmanager\n+def patch_scale_uuid(value):\n+    """Patch plone.scale to use a hard coded value as unique id.\n+\n+    Until plone.scale 4.0.0a3 (2022-05-09) this goes via the uuid4 function.\n+    For later versions we need to patch the new hash_key method.\n+\n+    We also patch the _modified_since method to always return True.\n+    Otherwise you may get info from a different scale back,\n+    precisely because we give all scales the same "unique" id,\n+    which then is of course no longer unique, making the logic unstable.\n+    This is needed for the newer plone.scale versions,\n+    but should be perfectly fine for the older ones.\n+    """\n+    if hasattr(storage.AnnotationStorage, "hash_key"):\n+        to_patch = storage.AnnotationStorage\n+        name = "hash_key"\n+    else:\n+        to_patch = storage\n+        name = "uuid4"\n+    with patch.object(to_patch, name, return_value=value):\n+        with patch.object(\n+            storage.AnnotationStorage, "_modified_since", return_value=True\n+        ):\n+            yield\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex 61c335e57..3fcfcd125 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -13,10 +13,9 @@\n from plone.restapi.interfaces import IFieldSerializer\n from plone.restapi.serializer.dxfields import DefaultFieldSerializer\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n-from plone.scale import storage\n+from plone.restapi.tests.helpers import patch_scale_uuid\n from plone.uuid.interfaces import IUUID\n from unittest import TestCase\n-from unittest.mock import patch\n from z3c.form.interfaces import IDataManager\n from zope.component import getMultiAdapter\n from zope.interface.verify import verifyClass\n@@ -387,7 +386,8 @@ def test_namedimage_field_serialization_returns_dict_with_original_scale(self):\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         fn = "test_namedimage_field"\n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n+        scale_url_uuid = "uuid_1"\n+        with patch_scale_uuid(scale_url_uuid):\n             value = self.serialize(\n                 fn,\n                 NamedImage(\n@@ -396,7 +396,6 @@ def test_namedimage_field_serialization_returns_dict_with_original_scale(self):\n             )\n             self.assertTrue(isinstance(value, dict), "Not a <dict>")\n \n-            scale_url_uuid = "uuid_1"\n             obj_url = self.doc1.absolute_url()\n \n             # Original image is still a "scale"\n@@ -483,7 +482,8 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n         is returned as is and we need to check it, but the scales should be empty"""\n         image_data = b"INVALID IMAGE DATA"\n         fn = "test_namedimage_field"\n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n+        scale_url_uuid = "uuid_1"\n+        with patch_scale_uuid(scale_url_uuid):\n             value = self.serialize(\n                 fn,\n                 NamedImage(\n@@ -492,7 +492,6 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n             )\n \n         obj_url = self.doc1.absolute_url()\n-        scale_url_uuid = "uuid_1"\n         self.assertEqual(\n             {\n                 "content-type": "image/gif",\n@@ -514,7 +513,8 @@ def test_namedblobimage_field_serialization_returns_dict_with_original_scale(sel\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         fn = "test_namedblobimage_field"\n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n+        scale_url_uuid = "uuid_1"\n+        with patch_scale_uuid(scale_url_uuid):\n             value = self.serialize(\n                 fn,\n                 NamedBlobImage(\n@@ -523,7 +523,6 @@ def test_namedblobimage_field_serialization_returns_dict_with_original_scale(sel\n             )\n             self.assertTrue(isinstance(value, dict), "Not a <dict>")\n \n-            scale_url_uuid = "uuid_1"\n             obj_url = self.doc1.absolute_url()\n \n             # Original image is still a "scale"\n@@ -610,7 +609,8 @@ def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n         is returned as is and we need to check it, but the scales should be empty"""\n         image_data = b"INVALID IMAGE DATA"\n         fn = "test_namedblobimage_field"\n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n+        scale_url_uuid = "uuid_1"\n+        with patch_scale_uuid(scale_url_uuid):\n             value = self.serialize(\n                 fn,\n                 NamedBlobImage(\n@@ -619,7 +619,6 @@ def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n             )\n \n         obj_url = self.doc1.absolute_url()\n-        scale_url_uuid = "uuid_1"\n         self.assertEqual(\n             {\n                 "content-type": "image/gif",\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex 00718e519..ff9af6633 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -7,9 +7,8 @@\n from plone.namedfile.file import NamedFile\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n-from plone.scale import storage\n+from plone.restapi.tests.helpers import patch_scale_uuid\n from Products.CMFCore.utils import getToolByName\n-from unittest.mock import patch\n from zope.component import getMultiAdapter\n \n import json\n@@ -261,9 +260,9 @@ def test_serialize_image(self):\n \n         self.maxDiff = 99999\n \n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n+        scale_url_uuid = "uuid_1"\n+        with patch_scale_uuid(scale_url_uuid):\n             obj_url = self.portal.image1.absolute_url()\n-            scale_url_uuid = "uuid_1"\n             download_url = f"{obj_url}/@@images/{scale_url_uuid}.png"\n             scales = {\n                 "listing": {"download": download_url, "width": 16, "height": 4},\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-19T17:40:19+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.restapi/commit/32f85e53daccbca12437bfa60bc716ce740699e4

Missed a few patches for scale storage unique id.

Files changed:
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_services.py

b'diff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex ee4ff0f23..6f6a05ebf 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1,6 +1,5 @@\n from base64 import b64encode\n from datetime import datetime\n-from unittest.mock import patch\n from pkg_resources import resource_filename\n from plone import api\n from plone.app.discussion.interfaces import IConversation\n@@ -25,6 +24,7 @@\n from plone.restapi.testing import PLONE_RESTAPI_ITERATE_FUNCTIONAL_TESTING\n from plone.restapi.testing import register_static_uuid_utility\n from plone.restapi.testing import RelativeSession\n+from plone.restapi.tests.helpers import patch_scale_uuid\n from plone.restapi.tests.statictime import StaticTime\n from plone.scale import storage\n from plone.testing.z2 import Browser\n@@ -301,7 +301,8 @@ def test_documentation_news_item(self):\n         self.portal.newsitem.image_caption = "This is an image caption."\n         transaction.commit()\n \n-        with patch.object(storage, "uuid4", return_value="uuid1"):\n+        scale_url_uuid = "uuid1"\n+        with patch_scale_uuid(scale_url_uuid):\n             response = self.api_session.get(self.portal.newsitem.absolute_url())\n             save_request_and_response_for_docs("newsitem", response)\n \n@@ -349,7 +350,8 @@ def test_documentation_image(self):\n             data=image_data, contentType="image/png", filename="image.png"\n         )\n         transaction.commit()\n-        with patch.object(storage, "uuid4", return_value="uuid1"):\n+        scale_url_uuid = "uuid1"\n+        with patch_scale_uuid(scale_url_uuid):\n             response = self.api_session.get(self.portal.image.absolute_url())\n             save_request_and_response_for_docs("image", response)\n \ndiff --git a/src/plone/restapi/tests/test_services.py b/src/plone/restapi/tests/test_services.py\nindex 8e009f035..f3dffcf37 100644\n--- a/src/plone/restapi/tests/test_services.py\n+++ b/src/plone/restapi/tests/test_services.py\n@@ -1,4 +1,3 @@\n-from unittest.mock import patch\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -8,6 +7,7 @@\n from plone.namedfile.file import NamedBlobImage\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n+from plone.restapi.tests.helpers import patch_scale_uuid\n from plone.scale import storage\n from z3c.relationfield import RelationValue\n from zope.component import getUtility\n@@ -87,7 +87,8 @@ def test_get_news_item(self):\n         self.portal.news1.image_caption = "This is an image caption."\n         transaction.commit()\n \n-        with patch.object(storage, "uuid4", return_value="uuid1"):\n+        scale_url_uuid = "uuid1"\n+        with patch_scale_uuid(scale_url_uuid):\n             response = self.api_session.get(self.portal.news1.absolute_url())\n \n             self.assertEqual(response.status_code, 200)\n@@ -112,7 +113,7 @@ def test_get_news_item(self):\n                 "This is an image caption.", response.json()["image_caption"]\n             )\n             self.assertDictContainsSubset(\n-                {"download": self.portal_url + "/news1/@@images/uuid1.png"},  # noqa\n+                {"download": self.portal_url + f"/news1/@@images/{scale_url_uuid}.png"},\n                 response.json()["image"],\n             )\n \n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-23T12:16:57+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.restapi/commit/ef660fa30657ba884ce61397dd91adf94f5bb8ec

Removed unused storage imports from tests.

Files changed:
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_services.py

b'diff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 6f6a05ebf..3e7616ef5 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -26,7 +26,6 @@\n from plone.restapi.testing import RelativeSession\n from plone.restapi.tests.helpers import patch_scale_uuid\n from plone.restapi.tests.statictime import StaticTime\n-from plone.scale import storage\n from plone.testing.z2 import Browser\n from zope.component import createObject\n from zope.component import getUtility\ndiff --git a/src/plone/restapi/tests/test_services.py b/src/plone/restapi/tests/test_services.py\nindex f3dffcf37..dac51df7c 100644\n--- a/src/plone/restapi/tests/test_services.py\n+++ b/src/plone/restapi/tests/test_services.py\n@@ -8,7 +8,6 @@\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n from plone.restapi.tests.helpers import patch_scale_uuid\n-from plone.scale import storage\n from z3c.relationfield import RelationValue\n from zope.component import getUtility\n from zope.intid.interfaces import IIntIds\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-05-23T15:55:08+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/dbc47661196086b4c7345bc6bca117052f0263e1

Merge pull request #1433 from plone/maurits-fix-tests-pre-scale

Tests: patch unique url for scale in old or new way.

Files changed:
A news/57.bugfix
M src/plone/restapi/tests/helpers.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_serializer.py
M src/plone/restapi/tests/test_services.py

b'diff --git a/news/57.bugfix b/news/57.bugfix\nnew file mode 100644\nindex 000000000..b11fd2500\n--- /dev/null\n+++ b/news/57.bugfix\n@@ -0,0 +1,3 @@\n+Tests: patch unique url for scale in old or new way.\n+This is only in serializer tests for images.\n+[maurits]\ndiff --git a/src/plone/restapi/tests/helpers.py b/src/plone/restapi/tests/helpers.py\nindex 5e6e64f92..dd01a6d51 100644\n--- a/src/plone/restapi/tests/helpers.py\n+++ b/src/plone/restapi/tests/helpers.py\n@@ -1,4 +1,7 @@\n+from contextlib import contextmanager\n+from plone.scale import storage\n from Products.CMFCore.utils import getToolByName\n+from unittest.mock import patch\n from urllib.parse import urlparse\n \n import quopri\n@@ -43,3 +46,30 @@ def ascii_token(text):\n     bytestring that is safe to use in term tokens.\n     """\n     return quopri.encodestring(text.encode("utf-8"))\n+\n+\n+@contextmanager\n+def patch_scale_uuid(value):\n+    """Patch plone.scale to use a hard coded value as unique id.\n+\n+    Until plone.scale 4.0.0a3 (2022-05-09) this goes via the uuid4 function.\n+    For later versions we need to patch the new hash_key method.\n+\n+    We also patch the _modified_since method to always return True.\n+    Otherwise you may get info from a different scale back,\n+    precisely because we give all scales the same "unique" id,\n+    which then is of course no longer unique, making the logic unstable.\n+    This is needed for the newer plone.scale versions,\n+    but should be perfectly fine for the older ones.\n+    """\n+    if hasattr(storage.AnnotationStorage, "hash_key"):\n+        to_patch = storage.AnnotationStorage\n+        name = "hash_key"\n+    else:\n+        to_patch = storage\n+        name = "uuid4"\n+    with patch.object(to_patch, name, return_value=value):\n+        with patch.object(\n+            storage.AnnotationStorage, "_modified_since", return_value=True\n+        ):\n+            yield\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex ee4ff0f23..3e7616ef5 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1,6 +1,5 @@\n from base64 import b64encode\n from datetime import datetime\n-from unittest.mock import patch\n from pkg_resources import resource_filename\n from plone import api\n from plone.app.discussion.interfaces import IConversation\n@@ -25,8 +24,8 @@\n from plone.restapi.testing import PLONE_RESTAPI_ITERATE_FUNCTIONAL_TESTING\n from plone.restapi.testing import register_static_uuid_utility\n from plone.restapi.testing import RelativeSession\n+from plone.restapi.tests.helpers import patch_scale_uuid\n from plone.restapi.tests.statictime import StaticTime\n-from plone.scale import storage\n from plone.testing.z2 import Browser\n from zope.component import createObject\n from zope.component import getUtility\n@@ -301,7 +300,8 @@ def test_documentation_news_item(self):\n         self.portal.newsitem.image_caption = "This is an image caption."\n         transaction.commit()\n \n-        with patch.object(storage, "uuid4", return_value="uuid1"):\n+        scale_url_uuid = "uuid1"\n+        with patch_scale_uuid(scale_url_uuid):\n             response = self.api_session.get(self.portal.newsitem.absolute_url())\n             save_request_and_response_for_docs("newsitem", response)\n \n@@ -349,7 +349,8 @@ def test_documentation_image(self):\n             data=image_data, contentType="image/png", filename="image.png"\n         )\n         transaction.commit()\n-        with patch.object(storage, "uuid4", return_value="uuid1"):\n+        scale_url_uuid = "uuid1"\n+        with patch_scale_uuid(scale_url_uuid):\n             response = self.api_session.get(self.portal.image.absolute_url())\n             save_request_and_response_for_docs("image", response)\n \ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex 61c335e57..3fcfcd125 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -13,10 +13,9 @@\n from plone.restapi.interfaces import IFieldSerializer\n from plone.restapi.serializer.dxfields import DefaultFieldSerializer\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n-from plone.scale import storage\n+from plone.restapi.tests.helpers import patch_scale_uuid\n from plone.uuid.interfaces import IUUID\n from unittest import TestCase\n-from unittest.mock import patch\n from z3c.form.interfaces import IDataManager\n from zope.component import getMultiAdapter\n from zope.interface.verify import verifyClass\n@@ -387,7 +386,8 @@ def test_namedimage_field_serialization_returns_dict_with_original_scale(self):\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         fn = "test_namedimage_field"\n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n+        scale_url_uuid = "uuid_1"\n+        with patch_scale_uuid(scale_url_uuid):\n             value = self.serialize(\n                 fn,\n                 NamedImage(\n@@ -396,7 +396,6 @@ def test_namedimage_field_serialization_returns_dict_with_original_scale(self):\n             )\n             self.assertTrue(isinstance(value, dict), "Not a <dict>")\n \n-            scale_url_uuid = "uuid_1"\n             obj_url = self.doc1.absolute_url()\n \n             # Original image is still a "scale"\n@@ -483,7 +482,8 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n         is returned as is and we need to check it, but the scales should be empty"""\n         image_data = b"INVALID IMAGE DATA"\n         fn = "test_namedimage_field"\n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n+        scale_url_uuid = "uuid_1"\n+        with patch_scale_uuid(scale_url_uuid):\n             value = self.serialize(\n                 fn,\n                 NamedImage(\n@@ -492,7 +492,6 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n             )\n \n         obj_url = self.doc1.absolute_url()\n-        scale_url_uuid = "uuid_1"\n         self.assertEqual(\n             {\n                 "content-type": "image/gif",\n@@ -514,7 +513,8 @@ def test_namedblobimage_field_serialization_returns_dict_with_original_scale(sel\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n         fn = "test_namedblobimage_field"\n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n+        scale_url_uuid = "uuid_1"\n+        with patch_scale_uuid(scale_url_uuid):\n             value = self.serialize(\n                 fn,\n                 NamedBlobImage(\n@@ -523,7 +523,6 @@ def test_namedblobimage_field_serialization_returns_dict_with_original_scale(sel\n             )\n             self.assertTrue(isinstance(value, dict), "Not a <dict>")\n \n-            scale_url_uuid = "uuid_1"\n             obj_url = self.doc1.absolute_url()\n \n             # Original image is still a "scale"\n@@ -610,7 +609,8 @@ def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n         is returned as is and we need to check it, but the scales should be empty"""\n         image_data = b"INVALID IMAGE DATA"\n         fn = "test_namedblobimage_field"\n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n+        scale_url_uuid = "uuid_1"\n+        with patch_scale_uuid(scale_url_uuid):\n             value = self.serialize(\n                 fn,\n                 NamedBlobImage(\n@@ -619,7 +619,6 @@ def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n             )\n \n         obj_url = self.doc1.absolute_url()\n-        scale_url_uuid = "uuid_1"\n         self.assertEqual(\n             {\n                 "content-type": "image/gif",\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex 00718e519..ff9af6633 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -7,9 +7,8 @@\n from plone.namedfile.file import NamedFile\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n-from plone.scale import storage\n+from plone.restapi.tests.helpers import patch_scale_uuid\n from Products.CMFCore.utils import getToolByName\n-from unittest.mock import patch\n from zope.component import getMultiAdapter\n \n import json\n@@ -261,9 +260,9 @@ def test_serialize_image(self):\n \n         self.maxDiff = 99999\n \n-        with patch.object(storage, "uuid4", return_value="uuid_1"):\n+        scale_url_uuid = "uuid_1"\n+        with patch_scale_uuid(scale_url_uuid):\n             obj_url = self.portal.image1.absolute_url()\n-            scale_url_uuid = "uuid_1"\n             download_url = f"{obj_url}/@@images/{scale_url_uuid}.png"\n             scales = {\n                 "listing": {"download": download_url, "width": 16, "height": 4},\ndiff --git a/src/plone/restapi/tests/test_services.py b/src/plone/restapi/tests/test_services.py\nindex 8e009f035..dac51df7c 100644\n--- a/src/plone/restapi/tests/test_services.py\n+++ b/src/plone/restapi/tests/test_services.py\n@@ -1,4 +1,3 @@\n-from unittest.mock import patch\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -8,7 +7,7 @@\n from plone.namedfile.file import NamedBlobImage\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n-from plone.scale import storage\n+from plone.restapi.tests.helpers import patch_scale_uuid\n from z3c.relationfield import RelationValue\n from zope.component import getUtility\n from zope.intid.interfaces import IIntIds\n@@ -87,7 +86,8 @@ def test_get_news_item(self):\n         self.portal.news1.image_caption = "This is an image caption."\n         transaction.commit()\n \n-        with patch.object(storage, "uuid4", return_value="uuid1"):\n+        scale_url_uuid = "uuid1"\n+        with patch_scale_uuid(scale_url_uuid):\n             response = self.api_session.get(self.portal.news1.absolute_url())\n \n             self.assertEqual(response.status_code, 200)\n@@ -112,7 +112,7 @@ def test_get_news_item(self):\n                 "This is an image caption.", response.json()["image_caption"]\n             )\n             self.assertDictContainsSubset(\n-                {"download": self.portal_url + "/news1/@@images/uuid1.png"},  # noqa\n+                {"download": self.portal_url + f"/news1/@@images/{scale_url_uuid}.png"},\n                 response.json()["image"],\n             )\n \n'

