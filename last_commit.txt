Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-07-01T10:46:54+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/ab903884fff5c021a37982952b60686e94da95a1

Tests; fix AttributeError: 'Dummy' object has no attribute 'contentIds'.

In coredev, when you run `bin/test -u`, all is well.
When you run `bin/test -s plone.dexterity`, with or without `-u`, one test fails:

```
Error in test testAddContentToContainer_preserves_existing_id (plone.dexterity.tests.test_utils.TestUtils)
Traceback (most recent call last):
  File "/Users/maurits/.pyenv/versions/3.10.4/lib/python3.10/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/Users/maurits/.pyenv/versions/3.10.4/lib/python3.10/unittest/case.py", line 591, in run
    self._callTestMethod(testMethod)
  File "/Users/maurits/.pyenv/versions/3.10.4/lib/python3.10/unittest/case.py", line 549, in _callTestMethod
    method()
  File "/Users/maurits/community/plone-coredev/6.0/src/plone.dexterity/plone/dexterity/tests/test_utils.py", line 83, in testAddContentToContainer_preserves_existing_id
    item = addContentToContainer(container, item, checkConstraints=False)
  File "/Users/maurits/community/plone-coredev/6.0/src/plone.dexterity/plone/dexterity/utils.py", line 175, in addContentToContainer
    name = INameChooser(container).chooseName(name, object)
  File "/Users/maurits/community/plone-coredev/6.0/src/plone.app.content/plone/app/content/namechooser.py", line 55, in chooseName
    return self._findUniqueName(name, obj)
  File "/Users/maurits/community/plone-coredev/6.0/src/plone.app.content/plone/app/content/namechooser.py", line 64, in _findUniqueName
    if not check_id(name, required=1):
  File "/Users/maurits/community/plone-coredev/6.0/src/plone.app.content/plone/app/content/namechooser.py", line 104, in do_Plone_check
    return check_id(obj, newid, required=required, contained_by=parent)
  File "/Users/maurits/community/plone-coredev/6.0/src/plone.base/src/plone/base/utils.py", line 412, in check_id
    result = _check_for_collision(contained_by, id, **kwargs)
  File "/Users/maurits/community/plone-coredev/6.0/src/plone.base/src/plone/base/utils.py", line 476, in _check_for_collision
    if portal and cid in portal.contentIds():
AttributeError: 'Dummy' object has no attribute 'contentIds'
```

So the portal here is a Dummy from our tests.  No idea why there is a difference in how we run the tests, especially without layers.
Anyway, fixed by adding a `contentIds` method to our Dummy class, returning an empty list.

Files changed:
M plone/dexterity/tests/case.py

b'diff --git a/plone/dexterity/tests/case.py b/plone/dexterity/tests/case.py\nindex b98db41..fff2de5 100644\n--- a/plone/dexterity/tests/case.py\n+++ b/plone/dexterity/tests/case.py\n@@ -95,6 +95,10 @@ class Dummy(object):\n     def __init__(self, **kw):\n         self.__dict__.update(kw)\n \n+    def contentIds(self):\n+        # testAddContentToContainer_preserves_existing_id fails without this.\n+        return []\n+\n \n class ItemDummy(Dummy):\n     """Dummy objects with title getter and setter"""\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-07-01T11:27:00+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/79e127bd762c7b53081e26779d5d6387b233a0ea

Removed Plone 5.2 related classifiers.

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 666c086..cb6e82f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -32,18 +32,14 @@ def read(filename):\n     version=version,\n     description=short_description,\n     long_description=long_description,\n-    # Get more strings from\n-    # https://pypi.org/classifiers/\n+    # Get more strings from https://pypi.org/classifiers/\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-07-01T13:02:28+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/2825faaba3f48dcf56b0462780185fbfc0449bed

Add Makefile and code-analysis github action.

This uses the plone/code-quality docker image.  Really fast after the first run.
On Mac: `brew install --cask docker`, then start Docker Desktop, or have it start always in the background or something.

I made it easy: you can only do `make format` and `make lint`.
There is only one gh-actions job, which runs each linter in a separate step.

I did not want to create a pre-commit hook, but you could.

Files changed:
A .github/workflows/code-analysis.yml
A Makefile
M pyproject.toml

b'diff --git a/.github/workflows/code-analysis.yml b/.github/workflows/code-analysis.yml\nnew file mode 100644\nindex 0000000..d54242f\n--- /dev/null\n+++ b/.github/workflows/code-analysis.yml\n@@ -0,0 +1,50 @@\n+name: Code Analysis\n+on:\n+  push:\n+\n+jobs:\n+  code-analysis:\n+    name: Code analysis\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+      - name: Checkout codebase\n+        uses: actions/checkout@v2\n+\n+      - name: Run check isort\n+        uses: plone/code-analysis-action@v1\n+        with:\n+          check: \'isort\'\n+          path: |\n+            plone\n+            setup.py\n+\n+      - name: Run check black\n+        uses: plone/code-analysis-action@v1\n+        with:\n+          check: \'black\'\n+          path: |\n+            plone\n+            setup.py\n+\n+      - name: Run check flake8\n+        uses: plone/code-analysis-action@v1\n+        with:\n+          check: \'flake8\'\n+          path: |\n+            plone\n+            setup.py\n+\n+      - name: Run check pyroma\n+        uses: plone/code-analysis-action@v1\n+        with:\n+          check: \'pyroma\'\n+          path: |\n+            ./\n+\n+      - name: Run check zpretty\n+        uses: plone/code-analysis-action@v1\n+        with:\n+          check: \'zpretty\'\n+          path: |\n+            plone\ndiff --git a/Makefile b/Makefile\nnew file mode 100644\nindex 0000000..950cf2c\n--- /dev/null\n+++ b/Makefile\n@@ -0,0 +1,43 @@\n+### Defensive settings for make:\n+#     https://tech.davis-hansson.com/p/make/\n+SHELL:=bash\n+.ONESHELL:\n+.SHELLFLAGS:=-xeu -o pipefail -O inherit_errexit -c\n+.SILENT:\n+.DELETE_ON_ERROR:\n+MAKEFLAGS+=--warn-undefined-variables\n+MAKEFLAGS+=--no-builtin-rules\n+\n+# We like colors\n+# From: https://coderwall.com/p/izxssa/colored-makefile-for-golang-projects\n+RED=`tput setaf 1`\n+GREEN=`tput setaf 2`\n+RESET=`tput sgr0`\n+YELLOW=`tput setaf 3`\n+\n+CODE_QUALITY_VERSION=1.0.1\n+LINT=docker run --rm -v "$(PWD)":/github/workspace plone/code-quality:${CODE_QUALITY_VERSION} check\n+FORMAT=docker run --rm -v "$(PWD)":/github/workspace plone/code-quality:${CODE_QUALITY_VERSION} format\n+\n+PACKAGE_NAME=plone.dexterity\n+PACKAGE_PATH=plone/\n+CHECK_PATH=setup.py $(PACKAGE_PATH)\n+\n+# Add the following \'help\' target to your Makefile\n+# And add help text after each target name starting with \'\\#\\#\'\n+.PHONY: help\n+help: ## This help message\n+\t@grep -E \'^[a-zA-Z_-]+:.*?## .*$$\' $(MAKEFILE_LIST) | sort | awk \'BEGIN {FS = ":.*?## "}; {printf "\\033[36m%-30s\\033[0m %s\\n", $$1, $$2}\'\n+\n+.PHONY: format\n+format:  ## Format the codebase according to our standards\n+\t$(FORMAT) "$(CHECK_PATH)"\n+\n+.PHONY: lint\n+lint:  ## validate with isort, black, flake8, pyroma, zpretty\n+    # Would be nice to have a way to run all available checks, instead of specifying them here.\n+\t$(LINT) isort "$(CHECK_PATH)"\n+\t$(LINT) black "$(CHECK_PATH)"\n+\t$(LINT) flake8 "$(CHECK_PATH)"\n+\t$(LINT) pyroma .\n+\t$(LINT) zpretty "$(PACKAGE_PATH)"\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..b736348 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -18,3 +18,21 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[tool.isort]\n+profile = "black"\n+force_alphabetical_sort = true\n+force_single_line = true\n+lines_after_imports = 2\n+\n+[tool.flakeheaven.plugins]\n+# Disable some checks.\n+# - E501 line too long\n+#   flake8 is already testing this, with max-line-length=100000 in .flake8,\n+#   so pycodestyle should not test it.\n+# - W503 line break before binary operator\n+#   Outdated recommendation, see https://www.flake8rules.com/rules/W503.html\n+mccabe = ["+*"]\n+pycodestyle = ["+*", "-E501", "-W503"]\n+pyflakes = ["+*"]\n+pylint = ["+*"]\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-07-01T13:05:44+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/b8511931dee94d4bcae6ccdf0cc4081c1d0d8cf3

Ran 'make format'

Files changed:
M plone/dexterity/browser/add.py
M plone/dexterity/browser/base.py
M plone/dexterity/browser/configure.zcml
M plone/dexterity/browser/edit.py
M plone/dexterity/browser/fti.py
M plone/dexterity/configure.zcml
M plone/dexterity/content.py
M plone/dexterity/fti.py
M plone/dexterity/interfaces.py
M plone/dexterity/meta.zcml
M plone/dexterity/schema.py
M plone/dexterity/tests/case.py
M plone/dexterity/tests/schemata.py
M plone/dexterity/tests/test.xml
M plone/dexterity/tests/test_behavior.py
M plone/dexterity/tests/test_content.py
M plone/dexterity/tests/test_factory.py
M plone/dexterity/tests/test_fti.py
M plone/dexterity/tests/test_primary.py
M plone/dexterity/tests/test_schema.py
M plone/dexterity/tests/test_schema_cache.py
M plone/dexterity/tests/test_security.py
M plone/dexterity/tests/test_utils.py
M plone/dexterity/tests/test_views.py
M plone/dexterity/tests/test_webdav.py

b'diff --git a/plone/dexterity/browser/add.py b/plone/dexterity/browser/add.py\nindex 7308769..7700833 100644\n--- a/plone/dexterity/browser/add.py\n+++ b/plone/dexterity/browser/add.py\n@@ -37,7 +37,7 @@ class DefaultAddForm(DexterityExtensibleForm, form.AddForm):\n \n     portal_type = None\n     immediate_view = None\n-    success_message = _(u"Item created")\n+    success_message = _("Item created")\n \n     def __init__(self, context, request, ti=None):\n         super(DefaultAddForm, self).__init__(context, request)\n@@ -119,10 +119,10 @@ def handleAdd(self, action):\n             self._finishedAdd = True\n             IStatusMessage(self.request).addStatusMessage(self.success_message, "info")\n \n-    @button.buttonAndHandler(_(u"Cancel"), name="cancel")\n+    @button.buttonAndHandler(_("Cancel"), name="cancel")\n     def handleCancel(self, action):\n         IStatusMessage(self.request).addStatusMessage(\n-            _(u"Add New Item operation cancelled"), "info"\n+            _("Add New Item operation cancelled"), "info"\n         )\n         self.request.response.redirect(self.nextURL())\n         notify(AddCancelledEvent(self.context))\n@@ -153,7 +153,7 @@ def label(self):\n         portal_type = self.portal_type\n         fti = getUtility(IDexterityFTI, name=portal_type)\n         type_name = fti.Title()\n-        return _(u"Add ${name}", mapping={"name": type_name})\n+        return _("Add ${name}", mapping={"name": type_name})\n \n \n class DefaultAddView(layout.FormWrapper, BrowserPage):\ndiff --git a/plone/dexterity/browser/base.py b/plone/dexterity/browser/base.py\nindex 581c96d..1558516 100644\n--- a/plone/dexterity/browser/base.py\n+++ b/plone/dexterity/browser/base.py\n@@ -9,7 +9,7 @@\n class DexterityExtensibleForm(AutoExtensibleForm):\n     """Mixin class for Dexterity forms that support updatable fields"""\n \n-    default_fieldset_label = _("label_schema_default", default=u"Default")\n+    default_fieldset_label = _("label_schema_default", default="Default")\n \n     @property\n     def description(self):\ndiff --git a/plone/dexterity/browser/configure.zcml b/plone/dexterity/browser/configure.zcml\nindex b33c275..e532b17 100644\n--- a/plone/dexterity/browser/configure.zcml\n+++ b/plone/dexterity/browser/configure.zcml\n@@ -1,88 +1,89 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-    <!-- Standard view -->\n-    <browser:page\n-        for="..interfaces.IDexterityContent"\n-        name="view"\n-        class=".view.DefaultView"\n-        template="item.pt"\n-        permission="zope2.View"\n-        />\n+  <!-- Standard view -->\n+  <browser:page\n+      name="view"\n+      for="..interfaces.IDexterityContent"\n+      class=".view.DefaultView"\n+      template="item.pt"\n+      permission="zope2.View"\n+      />\n \n-    <!-- Content core views -->\n-    <!-- Note: the templaces are the same since the changes for\n+  <!-- Content core views -->\n+  <!-- Note: the templaces are the same since the changes for\n          https://github.com/plone/Products.CMFPlone/issues/3177\n          That may be okay: makes it easier to customize\n          only the template for items or for containers. -->\n-    <browser:page\n-        for="..interfaces.IDexterityItem"\n-        name="content-core"\n-        class=".view.DefaultView"\n-        template="itemcontentcore.pt"\n-        permission="zope2.View"\n-        />\n+  <browser:page\n+      name="content-core"\n+      for="..interfaces.IDexterityItem"\n+      class=".view.DefaultView"\n+      template="itemcontentcore.pt"\n+      permission="zope2.View"\n+      />\n \n-    <browser:page\n-        for="..interfaces.IDexterityContainer"\n-        name="content-core"\n-        class=".view.DefaultView"\n-        template="containercontentcore.pt"\n-        permission="zope2.View"\n-        />\n+  <browser:page\n+      name="content-core"\n+      for="..interfaces.IDexterityContainer"\n+      class=".view.DefaultView"\n+      template="containercontentcore.pt"\n+      permission="zope2.View"\n+      />\n \n-    <!-- Standard IPublishTraverse adapter -->\n-    <adapter factory=".traversal.DexterityPublishTraverse" />\n+  <!-- Standard IPublishTraverse adapter -->\n+  <adapter factory=".traversal.DexterityPublishTraverse" />\n \n-    <!-- Standard add view and form - invoked from ++add++ traverser -->\n-    <adapter\n-        for="Products.CMFCore.interfaces.IFolderish\n-             zope.publisher.interfaces.browser.IDefaultBrowserLayer\n-             ..interfaces.IDexterityFTI"\n-        provides="zope.publisher.interfaces.browser.IBrowserPage"\n-        factory=".add.DefaultAddView"\n+  <!-- Standard add view and form - invoked from ++add++ traverser -->\n+  <adapter\n+      factory=".add.DefaultAddView"\n+      provides="zope.publisher.interfaces.browser.IBrowserPage"\n+      for="Products.CMFCore.interfaces.IFolderish\n+           zope.publisher.interfaces.browser.IDefaultBrowserLayer\n+           ..interfaces.IDexterityFTI"\n+      />\n+  <class class=".add.DefaultAddView">\n+    <require\n+        permission="cmf.AddPortalContent"\n+        interface="zope.publisher.interfaces.browser.IBrowserPage"\n         />\n-    <class class=".add.DefaultAddView">\n-        <require\n-            permission="cmf.AddPortalContent"\n-            interface="zope.publisher.interfaces.browser.IBrowserPage"\n-            />\n-    </class>\n+  </class>\n \n-    <!-- Standard edit view -->\n-    <browser:page\n-        for="..interfaces.IDexterityContent"\n-        name="edit"\n-        class=".edit.DefaultEditView"\n-        permission="cmf.ModifyPortalContent"\n-        />\n+  <!-- Standard edit view -->\n+  <browser:page\n+      name="edit"\n+      for="..interfaces.IDexterityContent"\n+      class=".edit.DefaultEditView"\n+      permission="cmf.ModifyPortalContent"\n+      />\n \n-    <!-- FTI add form -->\n-    <browser:page\n-        for="zope.browser.interfaces.IAdding"\n-        name="plone.dexterity.fti"\n-        template="fti.pt"\n-        class=".fti.FTIAddView"\n-        permission="cmf.ManagePortal"\n-        />\n+  <!-- FTI add form -->\n+  <browser:page\n+      name="plone.dexterity.fti"\n+      for="zope.browser.interfaces.IAdding"\n+      class=".fti.FTIAddView"\n+      template="fti.pt"\n+      permission="cmf.ManagePortal"\n+      />\n \n-    <!-- Resources for icons -->\n+  <!-- Resources for icons -->\n \n-    <browser:resource\n-        name="plone.dexterity.item.gif"\n-        file="icons/item_icon.gif"\n-        />\n+  <browser:resource\n+      name="plone.dexterity.item.gif"\n+      file="icons/item_icon.gif"\n+      />\n \n-    <browser:resource\n-        name="plone.dexterity.container.gif"\n-        file="icons/container_icon.gif"\n-        />\n+  <browser:resource\n+      name="plone.dexterity.container.gif"\n+      file="icons/container_icon.gif"\n+      />\n \n-    <browser:resource\n-        name="plone.dexterity.fti.gif"\n-        file="icons/typeinfo.gif"\n-        />\n+  <browser:resource\n+      name="plone.dexterity.fti.gif"\n+      file="icons/typeinfo.gif"\n+      />\n \n </configure>\ndiff --git a/plone/dexterity/browser/edit.py b/plone/dexterity/browser/edit.py\nindex e3edcf8..1e5b4f8 100644\n--- a/plone/dexterity/browser/edit.py\n+++ b/plone/dexterity/browser/edit.py\n@@ -19,9 +19,9 @@\n \n class DefaultEditForm(DexterityExtensibleForm, form.EditForm):\n \n-    success_message = _(u"Changes saved")\n+    success_message = _("Changes saved")\n \n-    @button.buttonAndHandler(_(u"Save"), name="save")\n+    @button.buttonAndHandler(_("Save"), name="save")\n     def handleApply(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -32,9 +32,9 @@ def handleApply(self, action):\n         self.request.response.redirect(self.nextURL())\n         notify(EditFinishedEvent(self.context))\n \n-    @button.buttonAndHandler(_(u"Cancel"), name="cancel")\n+    @button.buttonAndHandler(_("Cancel"), name="cancel")\n     def handleCancel(self, action):\n-        IStatusMessage(self.request).addStatusMessage(_(u"Edit cancelled"), "info")\n+        IStatusMessage(self.request).addStatusMessage(_("Edit cancelled"), "info")\n         self.request.response.redirect(self.nextURL())\n         notify(EditCancelledEvent(self.context))\n \n@@ -74,7 +74,7 @@ def fti(self):\n     @property\n     def label(self):\n         type_name = self.fti.Title()\n-        return _(u"Edit ${name}", mapping={"name": type_name})\n+        return _("Edit ${name}", mapping={"name": type_name})\n \n \n DefaultEditView = layout.wrap_form(DefaultEditForm)\ndiff --git a/plone/dexterity/browser/fti.py b/plone/dexterity/browser/fti.py\nindex 72df006..35fe812 100644\n--- a/plone/dexterity/browser/fti.py\n+++ b/plone/dexterity/browser/fti.py\n@@ -7,4 +7,4 @@ class FTIAddView(FactoryTypeInformationAddView):\n     """Add view for the Dexterity FTI type"""\n \n     klass = DexterityFTI\n-    description = u"Factory Type Information for Dexterity Content Types"\n+    description = "Factory Type Information for Dexterity Content Types"\ndiff --git a/plone/dexterity/configure.zcml b/plone/dexterity/configure.zcml\nindex 1add73a..c720d02 100644\n--- a/plone/dexterity/configure.zcml\n+++ b/plone/dexterity/configure.zcml\n@@ -1,139 +1,140 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:i18n="http://namespaces.zope.org/i18n"\n     xmlns:five="http://namespaces.zope.org/five"\n-    i18n_domain="plone">\n-\n-    <include package="Products.CMFCore" />\n-\n-    <include package="plone.behavior" />\n-    <include package="plone.folder" />\n-    <include package="plone.supermodel" />\n-    <include package="plone.rfc822" />\n-    <include package="plone.uuid" />\n-    <include package="plone.z3cform" />\n-\n-    <include package=".browser" />\n-    <include package=".fti" />\n-\n-    <!-- Re-index content when it\'s modified -->\n-    <subscriber\n-        for=".interfaces.IDexterityContent\n-             zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n-        handler=".content.reindexOnModify"\n-        />\n-\n-    <!-- Support for dynamic schemata -->\n-\n-    <utility\n-        factory=".schema.DexteritySchemaPolicy"\n-        name="dexterity"\n-        />\n-\n-    <utility\n-        factory=".schema.SchemaModuleFactory"\n-        name="plone.dexterity.schema.generated"\n-        />\n-\n-    <!-- Schema cache -->\n-    <subscriber handler=".schema.invalidate_schema" />\n-\n-    <!-- Support for plone.behavior behaviors -->\n-    <adapter factory=".behavior.DexterityBehaviorAssignable" />\n-\n-    <!-- Register the content classes -->\n-    <five:registerClass\n-        class=".content.Item"\n-        meta_type="Dexterity Item"\n-        permission="cmf.AddPortalContent"\n-        icon="plone.dexterity.item.gif"\n-        />\n-    <class class=".content.Item" />\n-\n-    <five:registerClass\n-        class=".content.Container"\n-        meta_type="Dexterity Container"\n-        permission="cmf.AddPortalContent"\n-        icon="plone.dexterity.item.gif"\n-        />\n-    <class class=".content.Container" />\n-\n-    <!-- Register FTI class -->\n-    <five:registerClass\n-        class=".fti.DexterityFTI"\n-        meta_type="Dexterity FTI"\n-        addview="plone.dexterity.fti"\n-        permission="cmf.ManagePortal"\n-        icon="plone.dexterity.fti.gif"\n-        global="False"\n-        />\n-\n-    <!-- Register FTI add/remove/modify handlers -->\n-\n-    <subscriber\n-        for=".interfaces.IDexterityFTI\n-             zope.container.interfaces.IObjectAddedEvent"\n-        handler=".fti.ftiAdded"\n-        />\n-\n-    <subscriber\n-        for=".interfaces.IDexterityFTI\n-             zope.container.interfaces.IObjectRemovedEvent"\n-        handler=".fti.ftiRemoved"\n-        />\n-\n-    <subscriber\n-        for=".interfaces.IDexterityFTI\n-             zope.container.interfaces.IObjectMovedEvent"\n-        handler=".fti.ftiRenamed"\n-        />\n-\n-    <subscriber\n-        for=".interfaces.IDexterityFTI\n-             zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n-        handler=".fti.ftiModified"\n-        />\n-\n-    <!-- File representation (FTP/WebDAV support) -->\n-    <adapter factory=".filerepresentation.DefaultDirectoryFactory" />\n-    <adapter factory=".filerepresentation.DefaultFileFactory" />\n-\n-    <adapter\n-        provides="zope.filerepresentation.interfaces.IRawReadFile"\n-        factory=".filerepresentation.DefaultReadFile"\n-        />\n-    <adapter factory=".filerepresentation.DefaultWriteFile" />\n-\n-    <!-- GenericSetup structure import/export support -->\n-    <adapter\n-        factory=".exportimport.DexterityContentExporterImporter"\n-        provides="Products.GenericSetup.interfaces.IFilesystemImporter"\n-        for=".interfaces.IDexterityItem"\n-        />\n-    <adapter\n-        factory=".exportimport.DexterityContentExporterImporter"\n-        provides="Products.GenericSetup.interfaces.IFilesystemExporter"\n-        for=".interfaces.IDexterityItem"\n-        />\n-    <adapter\n-        factory=".exportimport.DexterityContentExporterImporter"\n-        provides="Products.GenericSetup.interfaces.IFilesystemImporter"\n-        for=".interfaces.IDexterityContainer"\n-        />\n-    <adapter\n-        factory=".exportimport.DexterityContentExporterImporter"\n-        provides="Products.GenericSetup.interfaces.IFilesystemExporter"\n-        for=".interfaces.IDexterityContainer"\n-        />\n-\n-    <!-- PrimaryFieldInfo -->\n-    <adapter factory=".primary.PrimaryFieldInfo"/>\n-\n-    <!-- ISized -->\n-    <adapter\n-        for="*"\n-        factory="zope.size.DefaultSized"\n-        provides="zope.size.interfaces.ISized"\n-        />\n+    xmlns:i18n="http://namespaces.zope.org/i18n"\n+    i18n_domain="plone"\n+    >\n+\n+  <include package="Products.CMFCore" />\n+\n+  <include package="plone.behavior" />\n+  <include package="plone.folder" />\n+  <include package="plone.supermodel" />\n+  <include package="plone.rfc822" />\n+  <include package="plone.uuid" />\n+  <include package="plone.z3cform" />\n+\n+  <include package=".browser" />\n+  <include package=".fti" />\n+\n+  <!-- Re-index content when it\'s modified -->\n+  <subscriber\n+      for=".interfaces.IDexterityContent\n+           zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n+      handler=".content.reindexOnModify"\n+      />\n+\n+  <!-- Support for dynamic schemata -->\n+\n+  <utility\n+      factory=".schema.DexteritySchemaPolicy"\n+      name="dexterity"\n+      />\n+\n+  <utility\n+      factory=".schema.SchemaModuleFactory"\n+      name="plone.dexterity.schema.generated"\n+      />\n+\n+  <!-- Schema cache -->\n+  <subscriber handler=".schema.invalidate_schema" />\n+\n+  <!-- Support for plone.behavior behaviors -->\n+  <adapter factory=".behavior.DexterityBehaviorAssignable" />\n+\n+  <!-- Register the content classes -->\n+  <five:registerClass\n+      class=".content.Item"\n+      permission="cmf.AddPortalContent"\n+      icon="plone.dexterity.item.gif"\n+      meta_type="Dexterity Item"\n+      />\n+  <class class=".content.Item" />\n+\n+  <five:registerClass\n+      class=".content.Container"\n+      permission="cmf.AddPortalContent"\n+      icon="plone.dexterity.item.gif"\n+      meta_type="Dexterity Container"\n+      />\n+  <class class=".content.Container" />\n+\n+  <!-- Register FTI class -->\n+  <five:registerClass\n+      class=".fti.DexterityFTI"\n+      permission="cmf.ManagePortal"\n+      addview="plone.dexterity.fti"\n+      global="False"\n+      icon="plone.dexterity.fti.gif"\n+      meta_type="Dexterity FTI"\n+      />\n+\n+  <!-- Register FTI add/remove/modify handlers -->\n+\n+  <subscriber\n+      for=".interfaces.IDexterityFTI\n+           zope.container.interfaces.IObjectAddedEvent"\n+      handler=".fti.ftiAdded"\n+      />\n+\n+  <subscriber\n+      for=".interfaces.IDexterityFTI\n+           zope.container.interfaces.IObjectRemovedEvent"\n+      handler=".fti.ftiRemoved"\n+      />\n+\n+  <subscriber\n+      for=".interfaces.IDexterityFTI\n+           zope.container.interfaces.IObjectMovedEvent"\n+      handler=".fti.ftiRenamed"\n+      />\n+\n+  <subscriber\n+      for=".interfaces.IDexterityFTI\n+           zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n+      handler=".fti.ftiModified"\n+      />\n+\n+  <!-- File representation (FTP/WebDAV support) -->\n+  <adapter factory=".filerepresentation.DefaultDirectoryFactory" />\n+  <adapter factory=".filerepresentation.DefaultFileFactory" />\n+\n+  <adapter\n+      factory=".filerepresentation.DefaultReadFile"\n+      provides="zope.filerepresentation.interfaces.IRawReadFile"\n+      />\n+  <adapter factory=".filerepresentation.DefaultWriteFile" />\n+\n+  <!-- GenericSetup structure import/export support -->\n+  <adapter\n+      factory=".exportimport.DexterityContentExporterImporter"\n+      provides="Products.GenericSetup.interfaces.IFilesystemImporter"\n+      for=".interfaces.IDexterityItem"\n+      />\n+  <adapter\n+      factory=".exportimport.DexterityContentExporterImporter"\n+      provides="Products.GenericSetup.interfaces.IFilesystemExporter"\n+      for=".interfaces.IDexterityItem"\n+      />\n+  <adapter\n+      factory=".exportimport.DexterityContentExporterImporter"\n+      provides="Products.GenericSetup.interfaces.IFilesystemImporter"\n+      for=".interfaces.IDexterityContainer"\n+      />\n+  <adapter\n+      factory=".exportimport.DexterityContentExporterImporter"\n+      provides="Products.GenericSetup.interfaces.IFilesystemExporter"\n+      for=".interfaces.IDexterityContainer"\n+      />\n+\n+  <!-- PrimaryFieldInfo -->\n+  <adapter factory=".primary.PrimaryFieldInfo" />\n+\n+  <!-- ISized -->\n+  <adapter\n+      factory="zope.size.DefaultSized"\n+      provides="zope.size.interfaces.ISized"\n+      for="*"\n+      />\n \n </configure>\ndiff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 3e5fd72..969fa9b 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -314,8 +314,8 @@ class DexterityContent(DAVResourceMixin, PortalContent, PropertyManager, Contain\n     # portal_type is set by the add view and/or factory\n     portal_type = None\n \n-    title = u""\n-    description = u""\n+    title = ""\n+    description = ""\n     subject = ()\n     creators = ()\n     contributors = ()\ndiff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex 16bcd1e..db13166 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -158,9 +158,9 @@ class DexterityFTI(base.DynamicViewTypeInformation):\n     <schema />\n </model>\n """\n-    model_file = u""\n-    schema = u""\n-    schema_policy = u"dexterity"\n+    model_file = ""\n+    schema = ""\n+    schema_policy = "dexterity"\n \n     def __init__(self, *args, **kwargs):\n         super(DexterityFTI, self).__init__(*args, **kwargs)\n@@ -265,7 +265,7 @@ def lookupSchema(self):\n                 schema = utils.resolveDottedName(self.schema)\n             except ImportError:\n                 logging.warning(\n-                    u"Dexterity type FTI %s: schema dotted name [%s] cannot be resolved."\n+                    "Dexterity type FTI %s: schema dotted name [%s] cannot be resolved."\n                     % (self.getId(), self.schema)\n                 )\n                 # fall through to return a fake class with no\n@@ -291,7 +291,7 @@ def lookupModel(self):\n \n         elif self.schema:\n             schema = self.lookupSchema()\n-            return Model({u"": schema})\n+            return Model({"": schema})\n \n         raise ValueError(\n             "Neither model source, nor model file, nor schema is specified in "\n@@ -363,8 +363,8 @@ def _absModelFile(self):\n         else:\n             if not os.path.isabs(model_file):\n                 raise ValueError(\n-                    u"Model file name %s is not an absolute path and does "\n-                    u"not contain a package name in %s"\n+                    "Model file name %s is not an absolute path and does "\n+                    "not contain a package name in %s"\n                     % (\n                         model_file,\n                         self.getId(),\n@@ -373,7 +373,7 @@ def _absModelFile(self):\n \n         if not os.path.isfile(model_file):\n             raise ValueError(\n-                u"Model file %s in %s cannot be found"\n+                "Model file %s in %s cannot be found"\n                 % (\n                     model_file,\n                     self.getId(),\ndiff --git a/plone/dexterity/interfaces.py b/plone/dexterity/interfaces.py\nindex cf5dc42..66977de 100644\n--- a/plone/dexterity/interfaces.py\n+++ b/plone/dexterity/interfaces.py\n@@ -47,47 +47,47 @@ def lookupModel():\n         """\n \n     add_permission = zope.schema.DottedName(\n-        title=u"Add permission",\n-        description=u"Zope 3 permission name for the permission required to "\n-        u"construct this content",\n+        title="Add permission",\n+        description="Zope 3 permission name for the permission required to "\n+        "construct this content",\n     )\n \n     behaviors = zope.schema.List(\n-        title=u"Behaviors",\n-        description=u"A list of behaviors that are enabled for this type. "\n-        u"See plone.behavior for more details.",\n-        value_type=zope.schema.DottedName(title=u"Behavior name"),\n+        title="Behaviors",\n+        description="A list of behaviors that are enabled for this type. "\n+        "See plone.behavior for more details.",\n+        value_type=zope.schema.DottedName(title="Behavior name"),\n     )\n \n     schema = zope.schema.DottedName(\n-        title=u"Schema interface",\n-        description=u"Dotted name to an interface describing the type. "\n-        u"This is not required if there is a model file or a "\n-        u"model source string containing an unnamed schema.",\n+        title="Schema interface",\n+        description="Dotted name to an interface describing the type. "\n+        "This is not required if there is a model file or a "\n+        "model source string containing an unnamed schema.",\n     )\n \n     model_source = zope.schema.Text(\n-        title=u"Model text",\n-        description=u"XML representation of the model for this type. "\n-        + u"If this is given, it will override any model_file.",\n+        title="Model text",\n+        description="XML representation of the model for this type. "\n+        + "If this is given, it will override any model_file.",\n     )\n \n     model_file = zope.schema.Text(\n-        title=u"Model file",\n-        description=u"A file that contains an XML model. "\n-        u"This may be an absolute path, or one relative to a "\n-        u"package, e.g. my.package:model.xml",\n+        title="Model file",\n+        description="A file that contains an XML model. "\n+        "This may be an absolute path, or one relative to a "\n+        "package, e.g. my.package:model.xml",\n     )\n \n     hasDynamicSchema = zope.schema.Bool(\n-        title=u"Whether or not the FTI uses a dynamic schema.", readonly=True\n+        title="Whether or not the FTI uses a dynamic schema.", readonly=True\n     )\n \n \n class IDexterityFTIModificationDescription(IModificationDescription):\n     """Descriptor passed with an IObjectModifiedEvent for a Dexterity FTI."""\n \n-    attribute = zope.schema.ASCII(title=u"Name of the attribute that was modified")\n+    attribute = zope.schema.ASCII(title="Name of the attribute that was modified")\n     oldValue = Attribute("Old value")\n \n \n@@ -101,7 +101,7 @@ class IDexterityFactory(IFactory):\n     """\n \n     portal_type = zope.schema.TextLine(\n-        title=u"Portal type name", description=u"The portal type this is an FTI for"\n+        title="Portal type name", description="The portal type this is an FTI for"\n     )\n \n \n@@ -118,7 +118,7 @@ class ISchemaInvalidatedEvent(Interface):\n     cache.\n     """\n \n-    portal_type = zope.schema.TextLine(title=u"FTI name", required=False)\n+    portal_type = zope.schema.TextLine(title="FTI name", required=False)\n \n \n # Content\ndiff --git a/plone/dexterity/meta.zcml b/plone/dexterity/meta.zcml\nindex f35d953..1a9bc51 100644\n--- a/plone/dexterity/meta.zcml\n+++ b/plone/dexterity/meta.zcml\n@@ -1,8 +1,12 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-    <!-- Include ZCML directive from plone.behavior -->\n-    <include package="plone.behavior" file="meta.zcml" />\n+  <!-- Include ZCML directive from plone.behavior -->\n+  <include\n+      package="plone.behavior"\n+      file="meta.zcml"\n+      />\n \n </configure>\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 182e755..02aa434 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -321,7 +321,7 @@ def split(self, s):\n         return [self.decode(a) for a in s.split("_0_")]\n \n \n-def portalTypeToSchemaName(portal_type, schema=u"", prefix=None, suffix=None):\n+def portalTypeToSchemaName(portal_type, schema="", prefix=None, suffix=None):\n     """Return a canonical interface name for a generated schema interface."""\n     if prefix is None:\n         siteroot = None\n@@ -350,7 +350,7 @@ def splitSchemaName(schemaName):\n     encoder = SchemaNameEncoder()\n     items = encoder.split(schemaName)\n     if len(items) == 2:\n-        return items[0], items[1], u""\n+        return items[0], items[1], ""\n     elif len(items) == 3:\n         return items[0], items[1], items[2]\n     else:\ndiff --git a/plone/dexterity/tests/case.py b/plone/dexterity/tests/case.py\nindex fff2de5..3939cff 100644\n--- a/plone/dexterity/tests/case.py\n+++ b/plone/dexterity/tests/case.py\n@@ -8,6 +8,7 @@\n import zope.component.testing\n import zope.globalrequest\n \n+\n try:\n     from unittest.mock import Mock\n except ImportError:\n@@ -38,11 +39,11 @@ def create_dummy(self, **kw):\n     # Help register mock components. The tear-down method will\n     # wipe the registry each time.\n \n-    def mock_utility(self, mock, provides, name=u""):\n+    def mock_utility(self, mock, provides, name=""):\n         """Register the mock as a utility providing the given interface"""\n         zope.component.provideUtility(provides=provides, component=mock, name=name)\n \n-    def mock_adapter(self, mock, provides, adapts, name=u""):\n+    def mock_adapter(self, mock, provides, adapts, name=""):\n         """Register the mock as an adapter providing the given interface\n         and adapting the given interface(s)\n         """\ndiff --git a/plone/dexterity/tests/schemata.py b/plone/dexterity/tests/schemata.py\nindex d9ff6be..7473382 100644\n--- a/plone/dexterity/tests/schemata.py\n+++ b/plone/dexterity/tests/schemata.py\n@@ -7,9 +7,9 @@\n class ITestSchema(Interface):\n     """Schema used for testing"""\n \n-    title = schema.TextLine(title=u"Title", description=u"Administrative title")\n+    title = schema.TextLine(title="Title", description="Administrative title")\n \n-    description = schema.Text(title=u"Description", required=False)\n+    description = schema.Text(title="Description", required=False)\n \n \n class ITaggedValueSchema(Interface):\ndiff --git a/plone/dexterity/tests/test.xml b/plone/dexterity/tests/test.xml\nindex 21edb44..8c31f84 100644\n--- a/plone/dexterity/tests/test.xml\n+++ b/plone/dexterity/tests/test.xml\n@@ -1,13 +1,17 @@\n <model xmlns="http://namespaces.plone.org/supermodel/schema">\n-    <schema>\n-        <field name="title" type="zope.schema.TextLine">\n-            <title>Title</title>\n-            <description>Title used in listings</description>\n-            <required>True</required>\n-        </field>\n-        <field name="description" type="zope.schema.Text">\n-            <title>Description</title>\n-            <required>False</required>\n-        </field>\n-    </schema>\n+  <schema>\n+    <field name="title"\n+           type="zope.schema.TextLine"\n+    >\n+      <title>Title</title>\n+      <description>Title used in listings</description>\n+      <required>True</required>\n+    </field>\n+    <field name="description"\n+           type="zope.schema.Text"\n+    >\n+      <title>Description</title>\n+      <required>False</required>\n+    </field>\n+  </schema>\n </model>\ndiff --git a/plone/dexterity/tests/test_behavior.py b/plone/dexterity/tests/test_behavior.py\nindex dcf3264..660dc98 100644\n--- a/plone/dexterity/tests/test_behavior.py\n+++ b/plone/dexterity/tests/test_behavior.py\n@@ -27,7 +27,7 @@ class TestBehavior(MockTestCase):\n     def test_supports(self):\n \n         # Context mock\n-        context_dummy = self.create_dummy(portal_type=u"testtype")\n+        context_dummy = self.create_dummy(portal_type="testtype")\n \n         # Behavior mock\n         behavior_dummy_1 = self.create_dummy(interface=IOne)\n@@ -36,9 +36,9 @@ def test_supports(self):\n         self.mock_utility(behavior_dummy_4, IBehavior, name=IFour.__identifier__)\n \n         # FTI mock\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.behaviors = [IOne.__identifier__, IFour.__identifier__]\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n         assignable = DexterityBehaviorAssignable(context_dummy)\n \n@@ -50,16 +50,16 @@ def test_supports(self):\n     def test_enumerate(self):\n \n         # Context mock\n-        context_dummy = self.create_dummy(portal_type=u"testtype")\n+        context_dummy = self.create_dummy(portal_type="testtype")\n \n         # Behavior mock\n         behavior_dummy = self.create_dummy()\n         self.mock_utility(behavior_dummy, IBehavior, name=IOne.__identifier__)\n \n         # FTI mock\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.behaviors = [IOne.__identifier__]\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n         assignable = DexterityBehaviorAssignable(context_dummy)\n \ndiff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex 205c6ac..8648900 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -22,9 +22,9 @@\n from zope.annotation.attribute import AttributeAnnotations\n from zope.component import getUtility\n from zope.component import provideAdapter\n+from zope.globalrequest import setRequest\n from zope.interface import alsoProvides\n from zope.interface import Interface\n-from zope.globalrequest import setRequest\n from zope.publisher.browser import TestRequest\n \n import six\n@@ -61,14 +61,14 @@ def register(self, obj):\n                 pass\n \n         # Dummy instance\n-        item = Item(id=u"id")\n-        item.portal_type = u"testtype"\n+        item = Item(id="id")\n+        item.portal_type = "testtype"\n         item._p_jar = FauxDataManager()\n \n         # Dummy schema\n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         class IMarker(Interface):\n             pass\n@@ -76,7 +76,7 @@ class IMarker(Interface):\n         # FTI mock\n         fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         self.assertFalse(ISchema.implementedBy(Item))\n@@ -117,22 +117,22 @@ def register(self, obj):\n                 pass\n \n         # Dummy instance\n-        item = MyItem(id=u"id")\n+        item = MyItem(id="id")\n         item.portal_type = "testtype"\n         item._p_jar = FauxDataManager()\n \n         # Dummy schema\n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         class IMarker(Interface):\n             pass\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         self.assertFalse(ISchema.implementedBy(MyItem))\n@@ -161,7 +161,7 @@ class MyItem(Item):\n             pass\n \n         # Dummy instance\n-        item = MyItem(id=u"id")\n+        item = MyItem(id="id")\n         item.portal_type = "testtype"\n \n         # Without a persistence jar, the _p_changed check doesn\'t work. In\n@@ -170,16 +170,16 @@ class MyItem(Item):\n \n         # Dummy schema\n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         class IMarker(Interface):\n             pass\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         self.assertFalse(ISchema.implementedBy(MyItem))\n@@ -222,7 +222,7 @@ def register(self, obj):\n                 pass\n \n         # Dummy instance\n-        item = MyItem(id=u"id")\n+        item = MyItem(id="id")\n         item.portal_type = "testtype"\n \n         # Without a persistence jar, the _p_changed check doesn\'t work. In\n@@ -231,8 +231,8 @@ def register(self, obj):\n \n         # Dummy schema\n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         # Schema is not implemented by class or provided by instance\n         self.assertFalse(ISchema.implementedBy(MyItem))\n@@ -246,23 +246,23 @@ class ISchema(Interface):\n         class IBehavior1(Interface):\n             pass\n \n-        behavior1 = BehaviorRegistration(u"Behavior1", "", IBehavior1, None, None)\n+        behavior1 = BehaviorRegistration("Behavior1", "", IBehavior1, None, None)\n         self.mock_utility(behavior1, IBehavior, name="behavior1")\n \n         class IBehavior2(Interface):\n-            baz = zope.schema.TextLine(title=u"baz", default=u"baz")\n+            baz = zope.schema.TextLine(title="baz", default="baz")\n \n         class IMarker2(Interface):\n             pass\n \n-        behavior2 = BehaviorRegistration(u"Behavior2", "", IBehavior2, IMarker2, None)\n+        behavior2 = BehaviorRegistration("Behavior2", "", IBehavior2, IMarker2, None)\n         self.mock_utility(behavior2, IBehavior, name="behavior2")\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         fti_mock.behaviors = ["behavior1", "behavior2"]\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         # start clean\n@@ -282,7 +282,7 @@ class IMarker2(Interface):\n         self.assertTrue(IMarker2.providedBy(item))\n \n         # Subtypes provide field defaults.\n-        self.assertEqual(u"baz", getattr(item, "baz", None))\n+        self.assertEqual("baz", getattr(item, "baz", None))\n \n         # We also need to ensure that the _v_ attribute doesn\'t hide any\n         # interface set directly on the instance with alsoProvides() or\n@@ -315,7 +315,7 @@ def register(self, obj):\n                 pass\n \n         # Dummy instance\n-        item = MyItem(id=u"id")\n+        item = MyItem(id="id")\n         item.portal_type = "testtype"\n \n         # Without a persistence jar, the _p_changed check doesn\'t work. In\n@@ -324,8 +324,8 @@ def register(self, obj):\n \n         # Dummy schema\n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         # Schema is not implemented by class or provided by instance\n         self.assertFalse(ISchema.implementedBy(MyItem))\n@@ -335,7 +335,7 @@ class ISchema(Interface):\n         class IBehavior1(Interface):\n             pass\n \n-        behavior1 = BehaviorRegistration(u"Behavior1", "", IBehavior1, None, None)\n+        behavior1 = BehaviorRegistration("Behavior1", "", IBehavior1, None, None)\n         self.mock_utility(behavior1, IBehavior, name="behavior1")\n \n         class IBehavior2(Interface):\n@@ -344,7 +344,7 @@ class IBehavior2(Interface):\n         class IMarker2(Interface):\n             pass\n \n-        behavior2 = BehaviorRegistration(u"Behavior2", "", IBehavior2, IMarker2, None)\n+        behavior2 = BehaviorRegistration("Behavior2", "", IBehavior2, IMarker2, None)\n         self.mock_utility(behavior2, IBehavior, name="behavior2")\n \n         class IBehavior3(Interface):\n@@ -353,7 +353,7 @@ class IBehavior3(Interface):\n         class IMarker3(Interface):\n             pass\n \n-        behavior3 = BehaviorRegistration(u"Behavior3", "", IBehavior3, IMarker3, None)\n+        behavior3 = BehaviorRegistration("Behavior3", "", IBehavior3, IMarker3, None)\n         self.mock_utility(behavior3, IBehavior, name="behavior3")\n \n         self.mock_adapter(\n@@ -361,9 +361,9 @@ class IMarker3(Interface):\n         )\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         # start clean\n@@ -407,102 +407,102 @@ class IMarker3(Interface):\n     def test_getattr_consults_schema_item(self):\n \n         content = Item()\n-        content.id = u"id"\n-        content.portal_type = u"testtype"\n+        content.id = "id"\n+        content.portal_type = "testtype"\n \n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         SCHEMA_CACHE.invalidate("testtype")\n \n-        self.assertEqual(u"foo_default", content.foo)\n+        self.assertEqual("foo_default", content.foo)\n         self.assertEqual(None, content.bar)\n-        self.assertEqual(u"id", content.id)\n+        self.assertEqual("id", content.id)\n         self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_consults_schema_container(self):\n \n         content = Container()\n-        content.id = u"id"\n-        content.portal_type = u"testtype"\n+        content.id = "id"\n+        content.portal_type = "testtype"\n \n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         SCHEMA_CACHE.invalidate("testtype")\n \n-        self.assertEqual(u"foo_default", content.foo)\n+        self.assertEqual("foo_default", content.foo)\n         self.assertEqual(None, content.bar)\n-        self.assertEqual(u"id", content.id)\n+        self.assertEqual("id", content.id)\n         self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_consults_schema_item_default_factory_with_context(self):\n \n         content = Item()\n-        content.id = u"id"\n-        content.portal_type = u"testtype"\n+        content.id = "id"\n+        content.portal_type = "testtype"\n \n         from zope.interface import provider\n         from zope.schema.interfaces import IContextAwareDefaultFactory\n \n         @provider(IContextAwareDefaultFactory)\n         def defaultFactory(context):\n-            return u"{0:s}_{1:s}".format(context.id, context.portal_type)\n+            return "{0:s}_{1:s}".format(context.id, context.portal_type)\n \n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", defaultFactory=defaultFactory)\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", defaultFactory=defaultFactory)\n+            bar = zope.schema.TextLine(title="bar")\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         SCHEMA_CACHE.invalidate("testtype")\n \n-        self.assertEqual(u"id_testtype", content.foo)\n+        self.assertEqual("id_testtype", content.foo)\n         self.assertEqual(None, content.bar)\n-        self.assertEqual(u"id", content.id)\n+        self.assertEqual("id", content.id)\n         self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_on_container_returns_children(self):\n \n         content = Container()\n-        content.id = u"id"\n-        content.portal_type = u"testtype"\n+        content.id = "id"\n+        content.portal_type = "testtype"\n \n         content["foo"] = Item("foo")\n         content["quux"] = Item("quux")\n \n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         SCHEMA_CACHE.invalidate("testtype")\n \n         # Schema field masks contained item\n-        self.assertEqual(u"foo_default", content.foo)\n+        self.assertEqual("foo_default", content.foo)\n \n         # But we can still obtain an item\n         self.assertTrue(isinstance(content["foo"], Item))\n@@ -544,19 +544,19 @@ def test_name_and_id_in_sync(self):\n         i = Item()\n         self.assertEqual("", i.id)\n         self.assertEqual("", i.getId())\n-        self.assertEqual(u"", i.__name__)\n+        self.assertEqual("", i.__name__)\n \n         i = Item()\n         i.id = "foo"\n         self.assertEqual("foo", i.id)\n         self.assertEqual("foo", i.getId())\n-        self.assertEqual(u"foo", i.__name__)\n+        self.assertEqual("foo", i.__name__)\n \n         i = Item()\n-        i.__name__ = u"foo"\n+        i.__name__ = "foo"\n         self.assertEqual("foo", i.id)\n         self.assertEqual("foo", i.getId())\n-        self.assertEqual(u"foo", i.__name__)\n+        self.assertEqual("foo", i.__name__)\n \n     def test_name_unicode_id_str(self):\n \n@@ -571,9 +571,9 @@ def test_name_unicode_id_str(self):\n         else:\n             i.__name__ = b"\\xc3\\xb8".decode("utf-8")\n \n-        i.__name__ = u"o"\n+        i.__name__ = "o"\n \n-        self.assertEqual(u"o", i.__name__)\n+        self.assertEqual("o", i.__name__)\n         self.assertEqual("o", i.id)\n         self.assertEqual("o", i.getId())\n \n@@ -592,10 +592,10 @@ def test_item_dublincore(self):\n         self.addCleanup(datetime_patcher.stop)\n \n         i = Item(\n-            title=u"Emperor Penguin",\n-            description=u"One of the most magnificent birds.",\n-            subject=u"Penguins",\n-            contributors=u"admin",\n+            title="Emperor Penguin",\n+            description="One of the most magnificent birds.",\n+            subject="Penguins",\n+            contributors="admin",\n             effective_date="08/20/2010",\n             expiration_date="07/09/2013",\n             format="text/plain",\n@@ -604,13 +604,13 @@ def test_item_dublincore(self):\n         )\n \n         summer_timezone = i.effective_date.timezone()\n-        self.assertEqual(i.title, u"Emperor Penguin")\n+        self.assertEqual(i.title, "Emperor Penguin")\n         self.assertEqual(i.Title(), "Emperor Penguin")\n-        self.assertEqual(i.description, u"One of the most magnificent birds.")\n+        self.assertEqual(i.description, "One of the most magnificent birds.")\n         self.assertEqual(i.Description(), "One of the most magnificent birds.")\n-        self.assertEqual(i.subject, (u"Penguins",))\n+        self.assertEqual(i.subject, ("Penguins",))\n         self.assertEqual(i.Subject(), ("Penguins",))\n-        self.assertEqual(i.contributors, (u"admin",))\n+        self.assertEqual(i.contributors, ("admin",))\n         self.assertEqual(i.listContributors(), ("admin",))\n         self.assertEqual(i.Contributors(), ("admin",))\n         self.assertEqual(i.format, "text/plain")\n@@ -648,10 +648,10 @@ def test_item_dublincore_date(self):\n         self.addCleanup(datetime_patcher.stop)\n \n         i = Item(\n-            title=u"Emperor Penguin",\n-            description=u"One of the most magnificent birds.",\n-            subject=u"Penguins",\n-            contributors=u"admin",\n+            title="Emperor Penguin",\n+            description="One of the most magnificent birds.",\n+            subject="Penguins",\n+            contributors="admin",\n             effective_date=date(2010, 8, 20),\n             expiration_date=date(2013, 7, 9),\n             format="text/plain",\n@@ -688,10 +688,10 @@ def test_item_dublincore_datetime(self):\n         mocked_datetime.return_value = DateTime(2014, 6, 1)\n         self.addCleanup(datetime_patcher.stop)\n         i = Item(\n-            title=u"Emperor Penguin",\n-            description=u"One of the most magnificent birds.",\n-            subject=u"Penguins",\n-            contributors=u"admin",\n+            title="Emperor Penguin",\n+            description="One of the most magnificent birds.",\n+            subject="Penguins",\n+            contributors="admin",\n             effective_date=datetime(2010, 8, 20, 12, 59, 59, 0, timezone("US/Eastern")),\n             expiration_date=datetime(2013, 7, 9, 12, 59, 59, 0, timezone("US/Eastern")),\n             format="text/plain",\n@@ -738,9 +738,9 @@ def mock_addCreator():\n \n     def test_item_addCreator(self):\n         i = Item()\n-        i.addCreator(u"harvey")\n-        self.assertEqual(i.creators, (u"harvey",))\n-        self.assertEqual(i.listCreators(), (u"harvey",))\n+        i.addCreator("harvey")\n+        self.assertEqual(i.creators, ("harvey",))\n+        self.assertEqual(i.listCreators(), ("harvey",))\n         self.assertEqual(i.Creator(), "harvey")\n \n     def test_item_Type(self):\n@@ -764,8 +764,8 @@ def test_item_init_nondc_kwargs(self):\n     def test_container_init_dublincore(self):\n         from DateTime.DateTime import DateTime\n \n-        c = Container(title=u"Test title", language="en", effective_date="2010-08-20")\n-        self.assertEqual(c.title, u"Test title")\n+        c = Container(title="Test title", language="en", effective_date="2010-08-20")\n+        self.assertEqual(c.title, "Test title")\n         self.assertEqual(c.language, "en")\n         self.assertTrue(isinstance(c.effective_date, DateTime))\n \n@@ -777,23 +777,23 @@ def test_setTitle_converts_to_unicode(self):\n         # fix http://code.google.com/p/dexterity/issues/detail?id=145\n         i = Item()\n         i.setTitle("\xc3\xa9")\n-        self.assertEqual(i.title, u"\xc3\xa9")\n-        i.setTitle(u"\xc3\xa9")\n-        self.assertEqual(i.title, u"\xc3\xa9")\n+        self.assertEqual(i.title, "\xc3\xa9")\n+        i.setTitle("\xc3\xa9")\n+        self.assertEqual(i.title, "\xc3\xa9")\n         c = Container()\n         c.setTitle("\xc3\xa9")\n-        self.assertEqual(c.title, u"\xc3\xa9")\n-        c.setTitle(u"\xc3\xa9")\n-        self.assertEqual(c.title, u"\xc3\xa9")\n+        self.assertEqual(c.title, "\xc3\xa9")\n+        c.setTitle("\xc3\xa9")\n+        self.assertEqual(c.title, "\xc3\xa9")\n \n     def test_Title_converts_to_utf8(self):\n         i = Item()\n-        i.title = u"\xc3\xa9"\n+        i.title = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", i.Title())\n         i.title = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", i.Title())\n         c = Container()\n-        c.title = u"\xc3\xa9"\n+        c.title = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", c.Title())\n         c.title = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", c.Title())\n@@ -806,14 +806,14 @@ def test_Title_handles_None(self):\n \n     def test_Creator_converts_to_utf8(self):\n         i = Item()\n-        i.creators = (u"\xc3\xa9",)\n+        i.creators = ("\xc3\xa9",)\n         self.assertEqual("\xc3\xa9", i.Creator())\n         i.creators = ("\xc3\xa9",)\n         self.assertEqual("\xc3\xa9", i.Creator())\n         c = Container()\n-        c.creators = (u"\xc3\xa9",)\n+        c.creators = ("\xc3\xa9",)\n         self.assertEqual("\xc3\xa9", c.Creator())\n-        self.assertEqual((u"\xc3\xa9",), c.creators)\n+        self.assertEqual(("\xc3\xa9",), c.creators)\n \n     def test_Creator_handles_None(self):\n         i = Item(creators=None)\n@@ -823,12 +823,12 @@ def test_Creator_handles_None(self):\n \n     def test_Description_converts_to_utf8(self):\n         i = Item()\n-        i.description = u"\xc3\xa9"\n+        i.description = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", i.Description())\n         i.description = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", i.Description())\n         c = Container()\n-        c.description = u"\xc3\xa9"\n+        c.description = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", c.Description())\n         c.description = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", c.Description())\n@@ -836,14 +836,14 @@ def test_Description_converts_to_utf8(self):\n     def test_setDescription_converts_to_unicode(self):\n         i = Item()\n         i.setDescription("\xc3\xa9")\n-        self.assertEqual(i.description, u"\xc3\xa9")\n-        i.setDescription(u"\xc3\xa9")\n-        self.assertEqual(i.description, u"\xc3\xa9")\n+        self.assertEqual(i.description, "\xc3\xa9")\n+        i.setDescription("\xc3\xa9")\n+        self.assertEqual(i.description, "\xc3\xa9")\n         c = Container()\n         c.setDescription("\xc3\xa9")\n-        self.assertEqual(c.description, u"\xc3\xa9")\n-        c.setDescription(u"\xc3\xa9")\n-        self.assertEqual(c.description, u"\xc3\xa9")\n+        self.assertEqual(c.description, "\xc3\xa9")\n+        c.setDescription("\xc3\xa9")\n+        self.assertEqual(c.description, "\xc3\xa9")\n \n     def test_Description_handles_None(self):\n         i = Item(description=None)\n@@ -853,17 +853,17 @@ def test_Description_handles_None(self):\n \n     def test_Description_removes_newlines(self):\n         i = Item()\n-        i.description = u"foo\\r\\nbar\\nbaz\\r"\n+        i.description = "foo\\r\\nbar\\nbaz\\r"\n         self.assertEqual("foo bar baz ", i.Description())\n \n     def test_Subject_converts_to_utf8(self):\n         i = Item()\n-        i.subject = (u"\xc3\xa9",)\n+        i.subject = ("\xc3\xa9",)\n         self.assertEqual(("\xc3\xa9",), i.Subject())\n         i.subject = ("\xc3\xa9",)\n         self.assertEqual(("\xc3\xa9",), i.Subject())\n         c = Container()\n-        c.subject = (u"\xc3\xa9",)\n+        c.subject = ("\xc3\xa9",)\n         self.assertEqual(("\xc3\xa9",), c.Subject())\n         c.subject = ("\xc3\xa9",)\n         self.assertEqual(("\xc3\xa9",), c.Subject())\n@@ -871,14 +871,14 @@ def test_Subject_converts_to_utf8(self):\n     def test_setSubject_converts_to_unicode(self):\n         i = Item()\n         i.setSubject(("\xc3\xa9",))\n-        self.assertEqual(i.subject, (u"\xc3\xa9",))\n-        i.setSubject((u"\xc3\xa9",))\n-        self.assertEqual(i.subject, (u"\xc3\xa9",))\n+        self.assertEqual(i.subject, ("\xc3\xa9",))\n+        i.setSubject(("\xc3\xa9",))\n+        self.assertEqual(i.subject, ("\xc3\xa9",))\n         c = Container()\n         c.setSubject(("\xc3\xa9",))\n-        self.assertEqual(c.subject, (u"\xc3\xa9",))\n-        c.setSubject((u"\xc3\xa9",))\n-        self.assertEqual(c.subject, (u"\xc3\xa9",))\n+        self.assertEqual(c.subject, ("\xc3\xa9",))\n+        c.setSubject(("\xc3\xa9",))\n+        self.assertEqual(c.subject, ("\xc3\xa9",))\n \n     def test_Subject_handles_None(self):\n         i = Item()\n@@ -903,26 +903,26 @@ def register(self, obj):\n                 pass\n \n         # Dummy instances\n-        foo = Item(id=u"foo")\n+        foo = Item(id="foo")\n         foo.portal_type = "testtype"\n         foo._p_jar = FauxDataManager()\n \n-        bar = Item(id=u"bar")\n+        bar = Item(id="bar")\n         bar.portal_type = "testtype"\n         bar._p_jar = FauxDataManager()\n \n-        baz = Container(id=u"baz")\n+        baz = Container(id="baz")\n         baz.portal_type = "testtype"\n         baz._p_jar = FauxDataManager()\n \n         # Dummy schema\n         class ISchema(Interface):\n-            listfield = zope.schema.List(title=u"listfield", default=[1, 2])\n+            listfield = zope.schema.List(title="listfield", default=[1, 2])\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # Ensure that the field of foo is not the same field, also attached to\n         # bar.\n@@ -966,20 +966,20 @@ def __init__(self, context):\n                 self.context = context\n \n             def allowedContentTypes(self):\n-                fti = getUtility(IDexterityFTI, name=u"testtype")\n+                fti = getUtility(IDexterityFTI, name="testtype")\n                 return [fti]\n \n         self.mock_adapter(DummyConstrainTypes, IConstrainTypes, (IDexterityContainer,))\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         folder = Container(id="testfolder")\n \n         self.assertEqual(folder.allowedContentTypes(), [fti_mock])\n         self.assertRaises(\n-            ValueError, folder.invokeFactory, u"disallowed_type", id="test"\n+            ValueError, folder.invokeFactory, "disallowed_type", id="test"\n         )\n \n     def test_verifyObjectPaste_paste_without_portal_type(self):\n@@ -1063,13 +1063,13 @@ class ITestBehavior(Interface):\n             DexterityBehaviorAssignable, IBehaviorAssignable, (IDexterityContent,)\n         )\n \n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ITest)\n         fti_mock.behaviors = ["test_behavior"]\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         behavior_reg = BehaviorRegistration(\n-            u"Test Behavior", "", ITestBehavior, ITestBehavior, None\n+            "Test Behavior", "", ITestBehavior, ITestBehavior, None\n         )\n         self.mock_utility(behavior_reg, IBehavior, name="test_behavior")\n \ndiff --git a/plone/dexterity/tests/test_factory.py b/plone/dexterity/tests/test_factory.py\nindex df35690..ee9bd17 100644\n--- a/plone/dexterity/tests/test_factory.py\n+++ b/plone/dexterity/tests/test_factory.py\n@@ -19,27 +19,27 @@ class IDummy(Interface):\n class TestFactory(MockTestCase):\n     def test_title(self):\n         fti_mock = Mock(spec=DexterityFTI, title="Mock type")\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         self.assertEqual("Mock type", factory.title)\n \n     def test_description(self):\n         fti_mock = Mock(spec=DexterityFTI, description="Mock type description")\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         self.assertEqual("Mock type description", factory.description)\n \n     def test_get_interfaces(self):\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.lookupSchema = Mock(return_value=IDummy)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         spec = factory.getInterfaces()\n \n-        self.assertEqual(u"testtype", spec.__name__)\n+        self.assertEqual("testtype", spec.__name__)\n         self.assertEqual([IDummy, Interface], list(spec.flattened()))\n \n     # We expect the following when creating an object from the factory:\n@@ -52,7 +52,7 @@ def test_get_interfaces(self):\n     def test_create_with_schema_already_provided_and_portal_type_set(self):\n \n         # Object returned by class\n-        obj_mock = Mock(portal_type=u"testtype")\n+        obj_mock = Mock(portal_type="testtype")\n \n         # Class set by factory\n         klass_mock = Mock(return_value=obj_mock)\n@@ -64,9 +64,9 @@ def test_create_with_schema_already_provided_and_portal_type_set(self):\n \n         # FTI\n         fti_mock = Mock(spec=DexterityFTI, klass="my.mocked.ContentTypeClass")\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         self.assertEqual(obj_mock, factory())\n \n     def test_create_sets_portal_type_if_not_set(self):\n@@ -85,11 +85,11 @@ def test_create_sets_portal_type_if_not_set(self):\n         # FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.klass = "my.mocked.ContentTypeClass"\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         self.assertEqual(obj_mock, factory())\n-        self.assertEqual(obj_mock.portal_type, u"testtype")\n+        self.assertEqual(obj_mock.portal_type, "testtype")\n \n     def test_create_sets_portal_type_if_wrong(self):\n \n@@ -107,16 +107,16 @@ def test_create_sets_portal_type_if_wrong(self):\n         # FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.klass = "my.mocked.ContentTypeClass"\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         self.assertEqual(obj_mock, factory())\n-        self.assertEqual(obj_mock.portal_type, u"testtype")\n+        self.assertEqual(obj_mock.portal_type, "testtype")\n \n     def test_create_initialises_schema_if_not_provided(self):\n \n         # Object returned by class\n-        obj_mock = Mock(portal_type=u"testtype")\n+        obj_mock = Mock(portal_type="testtype")\n \n         # Class set by factory\n         klass_mock = Mock(return_value=obj_mock)\n@@ -129,15 +129,15 @@ def test_create_initialises_schema_if_not_provided(self):\n         # FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.klass = "my.mocked.ContentTypeClass"\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         self.assertEqual(obj_mock, factory())\n \n     def test_factory_passes_args_and_kwargs(self):\n \n         # Object returned by class\n-        obj_mock = Mock(portal_type=u"testtype")\n+        obj_mock = Mock(portal_type="testtype")\n \n         # Class set by factory\n         klass_mock = Mock(return_value=obj_mock)\n@@ -150,8 +150,8 @@ def test_factory_passes_args_and_kwargs(self):\n         # FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.klass = "my.mocked.ContentTypeClass"\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n-        self.assertEqual(obj_mock, factory(u"id", title=u"title"))\n-        klass_mock.assert_called_once_with(u"id", title=u"title")\n+        factory = DexterityFactory(portal_type="testtype")\n+        self.assertEqual(obj_mock, factory("id", title="title"))\n+        klass_mock.assert_called_once_with("id", title="title")\ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex e207ad8..1810b8b 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -58,26 +58,26 @@ class DexterityMtimeFTI(DexterityFTI):\n \n class TestFTI(MockTestCase):\n     def test_factory_name_is_fti_id(self):\n-        fti = DexterityFTI(u"testtype")\n-        self.assertEqual(u"testtype", fti.getId())\n-        self.assertEqual(u"testtype", fti.factory)\n+        fti = DexterityFTI("testtype")\n+        self.assertEqual("testtype", fti.getId())\n+        self.assertEqual("testtype", fti.factory)\n \n     def test_hasDynamicSchema(self):\n-        fti = DexterityFTI(u"testtype")\n-        fti.schema = u"dummy.schema"\n+        fti = DexterityFTI("testtype")\n+        fti.schema = "dummy.schema"\n         self.assertEqual(False, fti.hasDynamicSchema)\n         fti.schema = None\n         self.assertEqual(True, fti.hasDynamicSchema)\n \n     def test_lookupSchema_with_concrete_schema(self):\n-        fti = DexterityFTI(u"testtype")\n-        fti.schema = u"plone.dexterity.tests.schemata.ITestSchema"\n+        fti = DexterityFTI("testtype")\n+        fti.schema = "plone.dexterity.tests.schemata.ITestSchema"\n         self.assertEqual(ITestSchema, fti.lookupSchema())\n         # second time uses _v attribute\n         self.assertEqual(ITestSchema, fti.lookupSchema())\n \n     def test_lookupSchema_with_dynamic_schema(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None  # use dynamic schema\n \n         portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n@@ -95,7 +95,7 @@ def test_lookupSchema_with_nonexistant_schema(self):\n         """Tests the case where a dexterity type is not removed cleanly\n         from the fti, but the code has been removed.\n         """\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = "model.wont.be.imported"\n         portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n         self.mock_utility(portal, ISiteRoot)\n@@ -105,7 +105,7 @@ def test_lookupSchema_with_nonexistant_schema(self):\n         delattr(plone.dexterity.schema.generated, schemaName)\n \n     def test_lookupModel_from_string(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = "<model />"\n         fti.model_file = None\n@@ -121,10 +121,10 @@ def test_lookupModel_from_string(self):\n \n     def test_lookupModel_from_file_with_package(self):\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = None\n-        fti.model_file = u"plone.dexterity.tests:test.xml"\n+        fti.model_file = "plone.dexterity.tests:test.xml"\n \n         model_dummy = Model()\n \n@@ -140,9 +140,7 @@ def test_lookupModel_from_file_with_package(self):\n \n         model = fti.lookupModel()\n         self.assertIs(model_dummy, model)\n-        loadFile_mock.assert_called_once_with(\n-            abs_file, reload=True, policy=u"dexterity"\n-        )\n+        loadFile_mock.assert_called_once_with(abs_file, reload=True, policy="dexterity")\n \n     def test_lookupModel_from_file_with_absolute_path(self):\n \n@@ -152,7 +150,7 @@ def test_lookupModel_from_file_with_absolute_path(self):\n             os.path.split(plone.dexterity.tests.__file__)[0], "test.xml"\n         )\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = None\n         fti.model_file = abs_file\n@@ -165,13 +163,11 @@ def test_lookupModel_from_file_with_absolute_path(self):\n \n         model = fti.lookupModel()\n         self.assertIs(model_dummy, model)\n-        loadFile_mock.assert_called_once_with(\n-            abs_file, reload=True, policy=u"dexterity"\n-        )\n+        loadFile_mock.assert_called_once_with(abs_file, reload=True, policy="dexterity")\n \n     def test_lookupModel_from_file_with_win32_absolute_path(self):\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = None\n         fti.model_file = r"C:\\models\\testmodel.xml"\n@@ -191,12 +187,12 @@ def test_lookupModel_from_file_with_win32_absolute_path(self):\n         model = fti.lookupModel()\n         self.assertIs(model_dummy, model)\n         loadFile_mock.assert_called_once_with(\n-            fti.model_file, reload=True, policy=u"dexterity"\n+            fti.model_file, reload=True, policy="dexterity"\n         )\n \n     def test_lookupModel_with_schema_only(self):\n-        fti = DexterityFTI(u"testtype")\n-        fti.schema = u"plone.dexterity.tests.schemata.ITestSchema"\n+        fti = DexterityFTI("testtype")\n+        fti.schema = "plone.dexterity.tests.schemata.ITestSchema"\n         fti.model_source = None\n         fti.model_file = None\n \n@@ -205,9 +201,9 @@ def test_lookupModel_with_schema_only(self):\n         self.assertEqual(ITestSchema, model.schema)\n \n     def test_lookupModel_from_string_with_schema(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         # effectively ignored:\n-        fti.schema = u"plone.dexterity.tests.schemata.ITestSchema"\n+        fti.schema = "plone.dexterity.tests.schemata.ITestSchema"\n         fti.model_source = "<model />"\n         fti.model_file = None\n \n@@ -220,10 +216,10 @@ def test_lookupModel_from_string_with_schema(self):\n         model = fti.lookupModel()\n         self.assertIs(model_dummy, model)\n         self.assertIs(ITestSchema, fti.lookupSchema())\n-        loadString_mock.assert_called_once_with(fti.model_source, policy=u"dexterity")\n+        loadString_mock.assert_called_once_with(fti.model_source, policy="dexterity")\n \n     def test_lookupModel_failure(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = None\n         fti.model_file = None\n@@ -231,9 +227,9 @@ def test_lookupModel_failure(self):\n         self.assertRaises(ValueError, fti.lookupModel)\n \n     def test_fires_modified_event_on_update_property_if_changed(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n \n-        fti.title = u"Old title"\n+        fti.title = "Old title"\n         fti.global_allow = False\n \n         from zope.event import notify\n@@ -250,7 +246,7 @@ def test_fires_modified_event_on_update_property_if_changed(self):\n         self.assertEqual(event.descriptions[0].oldValue, "Old title")\n \n     def test_fires_modified_event_on_change_props_per_changed_property(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.title = "Old title"\n         fti.allow_discussion = False\n         fti.global_allow = True\n@@ -266,7 +262,7 @@ def test_fires_modified_event_on_change_props_per_changed_property(self):\n         self.assertEqual(len(notify_mock.call_args_list), 2)\n \n     def test_checks_permission_in_is_construction_allowed_true(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.add_permission = "demo.Permission"\n         container_dummy = self.create_dummy()\n \n@@ -274,7 +270,7 @@ def test_checks_permission_in_is_construction_allowed_true(self):\n         permission_dummy.id = "demo.Permission"\n         permission_dummy.title = "Some add permission"\n \n-        self.mock_utility(permission_dummy, IPermission, name=u"demo.Permission")\n+        self.mock_utility(permission_dummy, IPermission, name="demo.Permission")\n \n         security_manager_mock = Mock()\n         security_manager_mock.checkPermission = Mock(return_value=True)\n@@ -288,7 +284,7 @@ def test_checks_permission_in_is_construction_allowed_true(self):\n         )\n \n     def test_checks_permission_in_is_construction_allowed_false(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.add_permission = "demo.Permission"\n         container_dummy = self.create_dummy()\n \n@@ -296,7 +292,7 @@ def test_checks_permission_in_is_construction_allowed_false(self):\n         permission_dummy.id = "demo.Permission"\n         permission_dummy.title = "Some add permission"\n \n-        self.mock_utility(permission_dummy, IPermission, name=u"demo.Permission")\n+        self.mock_utility(permission_dummy, IPermission, name="demo.Permission")\n \n         security_manager_mock = Mock()\n         security_manager_mock.checkPermission = Mock(return_value=False)\n@@ -310,28 +306,28 @@ def test_checks_permission_in_is_construction_allowed_false(self):\n         )\n \n     def test_no_permission_utility_means_no_construction(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.add_permission = "demo.Permission"  # not an IPermission utility\n         container_dummy = self.create_dummy()\n         self.assertEqual(False, fti.isConstructionAllowed(container_dummy))\n \n     def test_no_permission_means_no_construction(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.add_permission = None\n         container_dummy = self.create_dummy()\n         self.assertEqual(False, fti.isConstructionAllowed(container_dummy))\n \n     def test_add_view_url_set_on_creation(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         self.assertEqual("string:${folder_url}/++add++testtype", fti.add_view_expr)\n \n     def test_factory_set_on_creation(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         self.assertEqual("testtype", fti.factory)\n \n     def test_addview_and_factory_not_overridden_on_creation(self):\n         fti = DexterityFTI(\n-            u"testtype",\n+            "testtype",\n             add_view_expr="string:${folder_url}/@@my-addview",\n             factory="my.factory",\n         )\n@@ -339,20 +335,16 @@ def test_addview_and_factory_not_overridden_on_creation(self):\n         self.assertEqual("my.factory", fti.factory)\n \n     def test_meta_type(self):\n-        fti = DexterityFTI(\n-            u"testtype", klass="plone.dexterity.tests.test_fti.TestClass"\n-        )\n+        fti = DexterityFTI("testtype", klass="plone.dexterity.tests.test_fti.TestClass")\n         self.assertEqual(TestClass.meta_type, fti.Metatype())\n \n     def test_meta_type_change_class(self):\n-        fti = DexterityFTI(\n-            u"testtype", klass="plone.dexterity.tests.test_fti.TestClass"\n-        )\n+        fti = DexterityFTI("testtype", klass="plone.dexterity.tests.test_fti.TestClass")\n         fti._updateProperty("klass", "plone.dexterity.tests.test_fti.TestClass2")\n         self.assertEqual(TestClass2.meta_type, fti.Metatype())\n \n     def test_title_i18n(self):\n-        fti = DexterityFTI(u"testtype", title=b"t\\xc3\\xa9st")\n+        fti = DexterityFTI("testtype", title=b"t\\xc3\\xa9st")\n \n         # with no i18n domain, we get the UTF8-encoded title\n         self.assertEqual(b"t\\xc3\\xa9st".decode("utf8"), fti.Title())\n@@ -360,11 +352,11 @@ def test_title_i18n(self):\n         # with an i18n domain, we get a Message\n         fti.i18n_domain = "test"\n         msgid = fti.Title()\n-        self.assertEqual(u"t\\xe9st", msgid)\n+        self.assertEqual("t\\xe9st", msgid)\n         self.assertEqual("test", msgid.domain)\n \n     def test_description_i18n(self):\n-        fti = DexterityFTI(u"testtype", description=b"t\\xc3\\xa9st")\n+        fti = DexterityFTI("testtype", description=b"t\\xc3\\xa9st")\n \n         # with no i18n domain, we get the UTF8-encoded title\n         self.assertEqual(b"t\\xc3\\xa9st".decode("utf8"), fti.Description())\n@@ -372,7 +364,7 @@ def test_description_i18n(self):\n         # with an i18n domain, we get a Message\n         fti.i18n_domain = "test"\n         msgid = fti.Description()\n-        self.assertEqual(u"t\\xe9st", msgid)\n+        self.assertEqual("t\\xe9st", msgid)\n         self.assertEqual("test", msgid.domain)\n \n     def test_lookupModel_without_schema_policy(self):\n@@ -380,10 +372,10 @@ def test_lookupModel_without_schema_policy(self):\n         gsm.registerUtility(\n             DexteritySchemaPolicy(),\n             plone.supermodel.interfaces.ISchemaPolicy,\n-            name=u"dexterity",\n+            name="dexterity",\n         )\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = (\n             \'<model xmlns="http://namespaces.plone.org/\'\n@@ -402,17 +394,17 @@ def bases(self, schemaName, tree):\n         gsm = getGlobalSiteManager()\n         policy = TestSchemaPolicy()\n         gsm.registerUtility(\n-            policy, plone.supermodel.interfaces.ISchemaPolicy, name=u"test"\n+            policy, plone.supermodel.interfaces.ISchemaPolicy, name="test"\n         )\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = (\n             \'<model xmlns="http://namespaces.plone.org/\'\n             \'supermodel/schema"><schema/></model>\'\n         )\n         fti.model_file = None\n-        fti.schema_policy = u"test"\n+        fti.schema_policy = "test"\n \n         model = fti.lookupModel()\n         self.assertEqual(True, ITestInterface in model.schemata[""].__bases__)\n@@ -426,7 +418,7 @@ class TestFTIEvents(MockTestCase):\n     # components really do get added/removed (using passthrough).\n \n     def test_components_registered_on_add(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         container_dummy = self.create_dummy()\n \n@@ -461,7 +453,7 @@ def test_components_registered_on_add(self):\n         self.assertNotEqual(None, queryUtility(IFactory, name=portal_type))\n \n     def test_components_not_registered_on_add_if_exist(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         container_dummy = self.create_dummy()\n \n@@ -489,7 +481,7 @@ def test_components_not_registered_on_add_if_exist(self):\n         self.assertFalse(site_manager_mock.registerUtility.called)\n \n     def test_components_unregistered_on_delete(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         container_dummy = self.create_dummy()\n \n@@ -520,7 +512,7 @@ def test_components_unregistered_on_delete(self):\n     def test_components_unregistered_on_delete_does_not_error_with_no_components(\n         self,\n     ):  # noqa\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         container_dummy = self.create_dummy()\n \n@@ -545,7 +537,7 @@ def test_components_unregistered_on_delete_does_not_error_with_no_components(\n         )\n \n     def test_global_components_not_unregistered_on_delete(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         container_dummy = self.create_dummy()\n \n@@ -579,7 +571,7 @@ def test_global_components_not_unregistered_on_delete(self):\n         self.assertNotEqual(None, queryUtility(IFactory, name=portal_type))\n \n     def test_components_reregistered_on_rename(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         container_dummy = self.create_dummy()\n \n@@ -599,7 +591,7 @@ def test_components_reregistered_on_rename(self):\n         ftiRenamed(\n             fti,\n             ObjectMovedEvent(\n-                fti, container_dummy, fti.getId(), container_dummy, u"newtype"\n+                fti, container_dummy, fti.getId(), container_dummy, "newtype"\n             ),\n         )\n \n@@ -619,13 +611,13 @@ def test_components_reregistered_on_rename(self):\n         self.assertNotEqual(None, queryUtility(IFactory, name=portal_type))\n \n     def test_dynamic_schema_refreshed_on_modify_model_file(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         class INew(Interface):\n-            title = zope.schema.TextLine(title=u"title")\n+            title = zope.schema.TextLine(title="title")\n \n-        model_dummy = Model({u"": INew})\n+        model_dummy = Model({"": INew})\n \n         fti.lookupModel = Mock(return_value=model_dummy)\n         self.create_dummy()\n@@ -649,16 +641,16 @@ class IBlank1(Interface):\n         )\n \n         self.assertTrue("title" in IBlank1)\n-        self.assertTrue(IBlank1["title"].title == u"title")\n+        self.assertTrue(IBlank1["title"].title == "title")\n \n     def test_dynamic_schema_refreshed_on_modify_model_source(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         class INew(Interface):\n-            title = zope.schema.TextLine(title=u"title")\n+            title = zope.schema.TextLine(title="title")\n \n-        model_dummy = Model({u"": INew})\n+        model_dummy = Model({"": INew})\n \n         fti.lookupModel = Mock(return_value=model_dummy)\n         self.create_dummy()\n@@ -685,14 +677,14 @@ class IBlank2(Interface):\n         )\n \n         self.assertTrue("title" in IBlank2)\n-        self.assertTrue(IBlank2["title"].title == u"title")\n+        self.assertTrue(IBlank2["title"].title == "title")\n \n     def test_dynamic_schema_refreshed_on_modify_schema_policy(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         class INew(Interface):\n-            title = zope.schema.TextLine(title=u"title")\n+            title = zope.schema.TextLine(title="title")\n \n         class IBlank3(Interface):\n             pass\n@@ -704,7 +696,7 @@ def bases(self, schemaName, tree):\n         gsm = getGlobalSiteManager()\n         policy = TestSchemaPolicy()\n         gsm.registerUtility(\n-            policy, plone.supermodel.interfaces.ISchemaPolicy, name=u"test"\n+            policy, plone.supermodel.interfaces.ISchemaPolicy, name="test"\n         )\n \n         site_dummy = self.create_dummy(getPhysicalPath=lambda: ("", "siteid"))\n@@ -732,16 +724,16 @@ def bases(self, schemaName, tree):\n         self.assertIn(INew, updated.__bases__)\n \n     def test_concrete_schema_not_refreshed_on_modify_schema(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         class IBlank4(Interface):\n             pass\n \n         class INew(Interface):\n-            title = zope.schema.TextLine(title=u"title")\n+            title = zope.schema.TextLine(title="title")\n \n-        model_dummy = Model({u"": INew})\n+        model_dummy = Model({"": INew})\n         fti.lookupModel = Mock(return_value=model_dummy)\n \n         site_dummy = self.create_dummy(getPhysicalPath=lambda: ("", "siteid"))\n@@ -765,7 +757,7 @@ class INew(Interface):\n         self.assertFalse("title" in IBlank4)\n \n     def test_old_factory_unregistered_after_name_changed_if_dynamic(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         # Mock the lookup of the site and the site manager at the site root\n@@ -806,7 +798,7 @@ def test_old_factory_unregistered_after_name_changed_if_dynamic(self):\n         )\n \n     def test_new_factory_not_registered_after_name_changed_if_exists(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         # Mock the lookup of the site and the site manager at the site root\n@@ -835,7 +827,7 @@ def test_new_factory_not_registered_after_name_changed_if_exists(self):\n         self.assertFalse(site_manager_mock.registerUtility.called)\n \n     def test_old_factory_not_unregistered_if_not_created_by_dexterity(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         # Mock the lookup of the site and the site manager at the site root\n@@ -874,9 +866,9 @@ def test_old_factory_not_unregistered_if_not_created_by_dexterity(self):\n         )\n \n     def test_renamed_factory_not_unregistered_if_not_unique(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type, factory="common-factory")\n-        portal_type2 = u"testtype2"\n+        portal_type2 = "testtype2"\n         fti2 = DexterityFTI(portal_type2, factory="common-factory")\n \n         # Mock the lookup of the site and the site manager at the site root\n@@ -930,9 +922,9 @@ def test_renamed_factory_not_unregistered_if_not_unique(self):\n         )\n \n     def test_deleted_factory_not_unregistered_if_not_unique(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type, factory="common-factory")\n-        portal_type2 = u"testtype2"\n+        portal_type2 = "testtype2"\n         fti2 = DexterityFTI(portal_type2, factory="common-factory")\n         container_dummy = self.create_dummy()\n \n@@ -971,7 +963,7 @@ def test_deleted_factory_not_unregistered_if_not_unique(self):\n         # We shouldn\'t remove this since fti2 still uses it\n         # The type itself should be removed though\n         site_manager_mock.unregisterUtility.assert_called_once_with(\n-            provided=IDexterityFTI, name=u"testtype"\n+            provided=IDexterityFTI, name="testtype"\n         )\n \n     def test_loockup_schema_with_p_mtime_roundable(self):\n@@ -999,9 +991,9 @@ def test_fti_modified_with_p_mtime_roundable(self):\n         fti._p_mtime = 1637689348.9999528\n \n         class INew(Interface):\n-            title = zope.schema.TextLine(title=u"title")\n+            title = zope.schema.TextLine(title="title")\n \n-        model_dummy = Model({u"": INew})\n+        model_dummy = Model({"": INew})\n \n         fti.lookupModel = Mock(return_value=model_dummy)\n         self.create_dummy()\n@@ -1026,7 +1018,7 @@ class IBlank1(Interface):\n         )\n \n         self.assertTrue("title" in IBlank1)\n-        self.assertTrue(IBlank1["title"].title == u"title")\n+        self.assertTrue(IBlank1["title"].title == "title")\n \n         # cleanup\n         delattr(plone.dexterity.schema.generated, schemaName)\ndiff --git a/plone/dexterity/tests/test_primary.py b/plone/dexterity/tests/test_primary.py\nindex 403e038..e3e831c 100644\n--- a/plone/dexterity/tests/test_primary.py\n+++ b/plone/dexterity/tests/test_primary.py\n@@ -24,14 +24,14 @@ class ITest(Interface):\n \n         alsoProvides(ITest["body"], IPrimaryField)\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.lookupSchema = Mock(return_value=ITest)\n         fti.behaviors = []\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n         item = Item("item")\n         item.portal_type = "testtype"\n-        item.body = u"body text"\n+        item.body = "body text"\n \n         info = PrimaryFieldInfo(item)\n         assert info.fieldname == "body"\ndiff --git a/plone/dexterity/tests/test_schema.py b/plone/dexterity/tests/test_schema.py\nindex 35e90e9..a4a9b60 100644\n--- a/plone/dexterity/tests/test_schema.py\n+++ b/plone/dexterity/tests/test_schema.py\n@@ -40,14 +40,14 @@ def test_concrete_default_schema(self):\n \n         # Mock schema model\n         class IDummy(Interface):\n-            dummy = zope.schema.TextLine(title=u"Dummy")\n+            dummy = zope.schema.TextLine(title="Dummy")\n \n-        mock_model = Model({u"": IDummy})\n+        mock_model = Model({"": IDummy})\n \n         # Mock FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.lookupModel = Mock(return_value=mock_model)\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         factory = schema.SchemaModuleFactory()\n \n@@ -65,22 +65,22 @@ def test_named_schema(self):\n \n         # Mock schema model\n         class IDummy(Interface):\n-            dummy = zope.schema.TextLine(title=u"Dummy")\n+            dummy = zope.schema.TextLine(title="Dummy")\n \n         class INamedDummy(Interface):\n-            named = zope.schema.TextLine(title=u"Named")\n+            named = zope.schema.TextLine(title="Named")\n \n-        mock_model = Model({u"": IDummy, u"named": INamedDummy})\n+        mock_model = Model({"": IDummy, "named": INamedDummy})\n \n         # Mock FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.lookupModel = Mock(return_value=mock_model)\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         factory = schema.SchemaModuleFactory()\n \n         schemaName = schema.portalTypeToSchemaName(\n-            "testtype", schema=u"named", prefix="site"\n+            "testtype", schema="named", prefix="site"\n         )\n         klass = factory(schemaName, schema.generated)\n \n@@ -122,13 +122,13 @@ def test_transient_schema_made_concrete(self):\n         # Now register a mock FTI and try again\n \n         class IDummy(Interface):\n-            dummy = zope.schema.TextLine(title=u"Dummy")\n+            dummy = zope.schema.TextLine(title="Dummy")\n \n-        mock_model = Model({u"": IDummy})\n+        mock_model = Model({"": IDummy})\n \n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.lookupModel = Mock(return_value=mock_model)\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         klass = factory(schemaName, schema.generated)\n \n@@ -197,7 +197,7 @@ def test_splitSchemaName(self):\n         )\n \n     def test_invalidate_cache(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         SCHEMA_CACHE.get(portal_type)\n         SCHEMA_CACHE.behavior_schema_interfaces(fti)\ndiff --git a/plone/dexterity/tests/test_schema_cache.py b/plone/dexterity/tests/test_schema_cache.py\nindex 9f05432..286482a 100644\n--- a/plone/dexterity/tests/test_schema_cache.py\n+++ b/plone/dexterity/tests/test_schema_cache.py\n@@ -3,10 +3,11 @@\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import SCHEMA_CACHE\n-from zope.interface import Interface\n from zope.globalrequest import setRequest\n+from zope.interface import Interface\n from zope.publisher.browser import TestRequest\n \n+\n try:\n     from unittest.mock import Mock\n except ImportError:\n@@ -27,19 +28,19 @@ def test_repeated_get_lookup(self):\n         class ISchema(Interface):\n             pass\n \n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        schema1 = SCHEMA_CACHE.get(u"testtype")\n-        schema2 = SCHEMA_CACHE.get(u"testtype")\n+        schema1 = SCHEMA_CACHE.get("testtype")\n+        schema2 = SCHEMA_CACHE.get("testtype")\n \n         self.assertTrue(schema1 is schema2 is ISchema)\n \n     def test_repeated_behavior_registration_lookup(self):\n \n-        fti = DexterityFTI(u"testtype")\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        fti = DexterityFTI("testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n         # Mock a test behavior\n         class ITestBehavior(Interface):\n@@ -49,8 +50,8 @@ class ITestBehavior(Interface):\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior",\n-            description=u"Provides test behavior",\n+            title="Test Behavior",\n+            description="Provides test behavior",\n             interface=Interface,\n             marker=ITestBehavior,\n             factory=None,\n@@ -59,19 +60,19 @@ class ITestBehavior(Interface):\n \n         self.mock_utility(registration, IBehavior, ITestBehavior.__identifier__)\n \n-        r1 = SCHEMA_CACHE.behavior_registrations(u"testtype")\n-        r2 = SCHEMA_CACHE.behavior_registrations(u"testtype")\n+        r1 = SCHEMA_CACHE.behavior_registrations("testtype")\n+        r2 = SCHEMA_CACHE.behavior_registrations("testtype")\n \n         self.assertTrue(r1[0] is r2[0] is registration)\n \n     def test_unexistent_behaviors_lookup(self):\n-        fti = DexterityFTI(u"testtype")\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        fti = DexterityFTI("testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n         # Set an unregistered behavior\n         fti.behaviors = ["foo.bar"]\n \n         with patch("warnings.warn") as mock_warnings:\n-            SCHEMA_CACHE.behavior_registrations(u"testtype")\n+            SCHEMA_CACHE.behavior_registrations("testtype")\n             # Verify the warning has been issued\n             mock_warnings.assert_called_once_with(\n                 (\n@@ -84,8 +85,8 @@ def test_unexistent_behaviors_lookup(self):\n \n     def test_repeated_subtypes_lookup(self):\n \n-        fti = DexterityFTI(u"testtype")\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        fti = DexterityFTI("testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n         # Mock a test behavior\n         class ITestSchema(Interface):\n@@ -98,8 +99,8 @@ class ITestMarker(Interface):\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior",\n-            description=u"Provides test behavior",\n+            title="Test Behavior",\n+            description="Provides test behavior",\n             interface=ITestSchema,\n             marker=ITestMarker,\n             factory=None,\n@@ -108,8 +109,8 @@ class ITestMarker(Interface):\n \n         self.mock_utility(registration, IBehavior, ITestSchema.__identifier__)\n \n-        s1 = SCHEMA_CACHE.subtypes(u"testtype")\n-        s2 = SCHEMA_CACHE.subtypes(u"testtype")\n+        s1 = SCHEMA_CACHE.subtypes("testtype")\n+        s2 = SCHEMA_CACHE.subtypes("testtype")\n \n         self.assertTrue(s1[0] is s2[0] is ITestMarker)\n \n@@ -120,12 +121,12 @@ class ISchema1(Interface):\n         class ISchema2(Interface):\n             pass\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.lookupSchema = Mock(side_effect=[ISchema1, ISchema2])\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n-        schema1 = SCHEMA_CACHE.get(u"testtype")\n-        schema2 = SCHEMA_CACHE.get(u"testtype")\n+        schema1 = SCHEMA_CACHE.get("testtype")\n+        schema2 = SCHEMA_CACHE.get("testtype")\n \n         self.assertTrue(schema1 is schema2 and schema2 is ISchema1)\n \n@@ -136,13 +137,13 @@ class ISchema1(Interface):\n         class ISchema2(Interface):\n             pass\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.lookupSchema = Mock(side_effect=[ISchema1, ISchema2])\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n-        schema1 = SCHEMA_CACHE.get(u"testtype")\n-        SCHEMA_CACHE.invalidate(u"testtype")\n-        schema2 = SCHEMA_CACHE.get(u"testtype")\n+        schema1 = SCHEMA_CACHE.get("testtype")\n+        SCHEMA_CACHE.invalidate("testtype")\n+        schema2 = SCHEMA_CACHE.get("testtype")\n \n         self.assertTrue(schema1 is ISchema1)\n         self.assertTrue(schema2 is ISchema2)\n@@ -151,18 +152,18 @@ def test_none_not_cached(self):\n         class ISchema1(Interface):\n             pass\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.lookupSchema = Mock(side_effect=[None, ISchema1, ISchema1])\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n         SCHEMA_CACHE.invalidate("testtype")\n-        schema1 = SCHEMA_CACHE.get(u"testtype")\n+        schema1 = SCHEMA_CACHE.get("testtype")\n \n         SCHEMA_CACHE.invalidate("testtype")\n-        schema2 = SCHEMA_CACHE.get(u"testtype")\n+        schema2 = SCHEMA_CACHE.get("testtype")\n \n         SCHEMA_CACHE.invalidate("testtype")\n-        schema3 = SCHEMA_CACHE.get(u"testtype")\n+        schema3 = SCHEMA_CACHE.get("testtype")\n \n         self.assertTrue(schema1 is None)\n         self.assertTrue(schema2 is schema3 is ISchema1)\n@@ -171,17 +172,17 @@ def test_attribute_and_value_error_not_cached(self):\n         class ISchema1(Interface):\n             pass\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.lookupSchema = Mock(side_effect=[AttributeError, ValueError, ISchema1])\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n-        schema1 = SCHEMA_CACHE.get(u"testtype")\n+        schema1 = SCHEMA_CACHE.get("testtype")\n \n         SCHEMA_CACHE.invalidate("testtype")\n-        schema2 = SCHEMA_CACHE.get(u"testtype")\n+        schema2 = SCHEMA_CACHE.get("testtype")\n \n         SCHEMA_CACHE.invalidate("testtype")\n-        schema3 = SCHEMA_CACHE.get(u"testtype")\n+        schema3 = SCHEMA_CACHE.get("testtype")\n \n         self.assertTrue(schema1 is None)\n         self.assertTrue(schema2 is None)\n@@ -191,13 +192,13 @@ def test_unknown_type_not_cached(self):\n         class ISchema1(Interface):\n             pass\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.lookupSchema = Mock(return_value=ISchema1)\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n-        schema1 = SCHEMA_CACHE.get(u"othertype")\n-        schema2 = SCHEMA_CACHE.get(u"testtype")\n-        schema3 = SCHEMA_CACHE.get(u"testtype")\n+        schema1 = SCHEMA_CACHE.get("othertype")\n+        schema2 = SCHEMA_CACHE.get("testtype")\n+        schema3 = SCHEMA_CACHE.get("testtype")\n \n         self.assertTrue(schema1 is None)\n         self.assertTrue(schema2 is schema3 is ISchema1)\n@@ -206,20 +207,20 @@ def test_clear_all_caches(self):\n         class ISchema1(Interface):\n             pass\n \n-        fti1 = DexterityFTI(u"testtype")\n+        fti1 = DexterityFTI("testtype")\n         fti1.lookupSchema = Mock(return_value=ISchema1)\n-        self.mock_utility(fti1, IDexterityFTI, name=u"testtype1")\n+        self.mock_utility(fti1, IDexterityFTI, name="testtype1")\n \n-        fti2 = DexterityFTI(u"testtype")\n+        fti2 = DexterityFTI("testtype")\n         fti2.lookupSchema = Mock(return_value=ISchema1)\n-        self.mock_utility(fti2, IDexterityFTI, name=u"testtype2")\n+        self.mock_utility(fti2, IDexterityFTI, name="testtype2")\n \n         # reset schemacache counter\n         SCHEMA_CACHE.invalidations = 0\n \n         # fill cache should call lookupschema one time\n-        schema1 = SCHEMA_CACHE.get(u"testtype1")\n-        schema2 = SCHEMA_CACHE.get(u"testtype2")\n+        schema1 = SCHEMA_CACHE.get("testtype1")\n+        schema2 = SCHEMA_CACHE.get("testtype2")\n         self.assertTrue(schema1 is schema2 is ISchema1)\n \n         # clear\n@@ -230,6 +231,6 @@ class ISchema1(Interface):\n         # check invalidations\n \n         # fill cache again should call lookupschema one time\n-        schema1 = SCHEMA_CACHE.get(u"testtype1")\n-        schema2 = SCHEMA_CACHE.get(u"testtype2")\n+        schema1 = SCHEMA_CACHE.get("testtype1")\n+        schema2 = SCHEMA_CACHE.get("testtype2")\n         self.assertTrue(schema1 is schema2 is ISchema1)\ndiff --git a/plone/dexterity/tests/test_security.py b/plone/dexterity/tests/test_security.py\nindex acca24a..5c468d3 100644\n--- a/plone/dexterity/tests/test_security.py\n+++ b/plone/dexterity/tests/test_security.py\n@@ -6,12 +6,12 @@\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import SCHEMA_CACHE\n+from zope.globalrequest import setRequest\n from zope.interface import Interface\n from zope.interface import provider\n+from zope.publisher.browser import TestRequest\n from zope.security.interfaces import IPermission\n from zope.security.permission import Permission\n-from zope.globalrequest import setRequest\n-from zope.publisher.browser import TestRequest\n \n import zope.schema\n \n@@ -31,7 +31,7 @@ def test_item(self):\n \n         # Mock schema model\n         class ITestSchema(Interface):\n-            test = zope.schema.TextLine(title=u"Test")\n+            test = zope.schema.TextLine(title="Test")\n \n         ITestSchema.setTaggedValue(\n             READ_PERMISSIONS_KEY, dict(test="zope2.View", foo="foo.View")\n@@ -41,7 +41,7 @@ class ITestSchema(Interface):\n \n         @provider(IFormFieldProvider)\n         class ITestBehavior(Interface):\n-            test2 = zope.schema.TextLine(title=u"Test")\n+            test2 = zope.schema.TextLine(title="Test")\n \n         ITestBehavior.setTaggedValue(\n             READ_PERMISSIONS_KEY, dict(test2="zope2.View", foo2="foo.View")\n@@ -51,8 +51,8 @@ class ITestBehavior(Interface):\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior",\n-            description=u"Provides test behavior",\n+            title="Test Behavior",\n+            description="Provides test behavior",\n             interface=ITestBehavior,\n             marker=Interface,\n             factory=None,\n@@ -69,24 +69,20 @@ class ITestBehavior(Interface):\n         )\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.behaviors = ()\n         fti_mock.lookupSchema = Mock(return_value=ITestSchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Mock permissions\n-        self.mock_utility(\n-            Permission(u"zope2.View", u"View"), IPermission, u"zope2.View"\n-        )\n-        self.mock_utility(\n-            Permission(u"foo.View", u"View foo"), IPermission, u"foo.View"\n-        )\n+        self.mock_utility(Permission("zope2.View", "View"), IPermission, "zope2.View")\n+        self.mock_utility(Permission("foo.View", "View foo"), IPermission, "foo.View")\n \n         # Content item\n         item = Item("test")\n-        item.portal_type = u"testtype"\n-        item.test = u"foo"\n-        item.foo = u"bar"\n+        item.portal_type = "testtype"\n+        item.test = "foo"\n+        item.foo = "bar"\n \n         # mock security manager\n         security_manager_mock = Mock()\n@@ -97,21 +93,19 @@ class ITestBehavior(Interface):\n         # run 1: schema and no behavior access to schema protected attribute\n         security_manager_mock.checkPermission = Mock(return_value=False)\n         SCHEMA_CACHE.clear()\n-        self.assertFalse(\n-            item.__allow_access_to_unprotected_subobjects__("test", u"foo")\n-        )\n+        self.assertFalse(item.__allow_access_to_unprotected_subobjects__("test", "foo"))\n         security_manager_mock.checkPermission.assert_called_with("View", item)\n \n         # run 2: schema and no behavior access to known non schema attribute\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         SCHEMA_CACHE.clear()\n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", "bar"))\n         security_manager_mock.checkPermission.assert_called_with("View foo", item)\n \n         # run 3: schema and no behavior, unknown attributes are allowed\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", "stuff")\n         )\n \n         # run 4: schema and behavior\n@@ -119,7 +113,7 @@ class ITestBehavior(Interface):\n         fti_mock.behaviors = [ITestBehavior.__identifier__]\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("test2", u"foo2")\n+            item.__allow_access_to_unprotected_subobjects__("test2", "foo2")\n         )\n         security_manager_mock.checkPermission.assert_called_with("View", item)\n \n@@ -128,7 +122,7 @@ class ITestBehavior(Interface):\n         fti_mock.lookupSchema = Mock(return_value=None)\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("test2", u"foo2")\n+            item.__allow_access_to_unprotected_subobjects__("test2", "foo2")\n         )\n         security_manager_mock.checkPermission.assert_called_with("View", item)\n \n@@ -136,7 +130,7 @@ def test_container(self):\n \n         # Mock schema model\n         class ITestSchema(Interface):\n-            test = zope.schema.TextLine(title=u"Test")\n+            test = zope.schema.TextLine(title="Test")\n \n         ITestSchema.setTaggedValue(\n             READ_PERMISSIONS_KEY, dict(test="zope2.View", foo="foo.View")\n@@ -146,7 +140,7 @@ class ITestSchema(Interface):\n \n         @provider(IFormFieldProvider)\n         class ITestBehavior(Interface):\n-            test2 = zope.schema.TextLine(title=u"Test")\n+            test2 = zope.schema.TextLine(title="Test")\n \n         ITestBehavior.setTaggedValue(\n             READ_PERMISSIONS_KEY, dict(test2="zope2.View", foo2="foo.View")\n@@ -156,8 +150,8 @@ class ITestBehavior(Interface):\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior",\n-            description=u"Provides test behavior",\n+            title="Test Behavior",\n+            description="Provides test behavior",\n             interface=ITestBehavior,\n             marker=Interface,\n             factory=None,\n@@ -174,24 +168,20 @@ class ITestBehavior(Interface):\n         )\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ITestSchema)\n         fti_mock.behaviors = ()\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Mock permissions\n-        self.mock_utility(\n-            Permission(u"zope2.View", u"View"), IPermission, u"zope2.View"\n-        )\n-        self.mock_utility(\n-            Permission(u"foo.View", u"View foo"), IPermission, u"foo.View"\n-        )\n+        self.mock_utility(Permission("zope2.View", "View"), IPermission, "zope2.View")\n+        self.mock_utility(Permission("foo.View", "View foo"), IPermission, "foo.View")\n \n         # Content item\n         container = Container("test")\n-        container.portal_type = u"testtype"\n-        container.test = u"foo"\n-        container.foo = u"bar"\n+        container.portal_type = "testtype"\n+        container.test = "foo"\n+        container.foo = "bar"\n \n         # mock security manager\n         security_manager_mock = Mock()\n@@ -203,7 +193,7 @@ class ITestBehavior(Interface):\n         security_manager_mock.checkPermission = Mock(return_value=False)\n         SCHEMA_CACHE.clear()\n         self.assertFalse(\n-            container.__allow_access_to_unprotected_subobjects__("test", u"foo")\n+            container.__allow_access_to_unprotected_subobjects__("test", "foo")\n         )\n         security_manager_mock.checkPermission.assert_called_with("View", container)\n \n@@ -211,14 +201,14 @@ class ITestBehavior(Interface):\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            container.__allow_access_to_unprotected_subobjects__("foo", u"bar")\n+            container.__allow_access_to_unprotected_subobjects__("foo", "bar")\n         )\n         security_manager_mock.checkPermission.assert_called_with("View foo", container)\n \n         # run 3: schema and no behavior, unknown attributes are allowed\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            container.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n+            container.__allow_access_to_unprotected_subobjects__("random", "stuff")\n         )\n \n         # run 4: schema and behavior\n@@ -226,7 +216,7 @@ class ITestBehavior(Interface):\n         fti_mock.behaviors = [ITestBehavior.__identifier__]\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            container.__allow_access_to_unprotected_subobjects__("test2", u"foo2")\n+            container.__allow_access_to_unprotected_subobjects__("test2", "foo2")\n         )\n         security_manager_mock.checkPermission.assert_called_with("View", container)\n \n@@ -235,7 +225,7 @@ class ITestBehavior(Interface):\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            container.__allow_access_to_unprotected_subobjects__("test2", u"foo2")\n+            container.__allow_access_to_unprotected_subobjects__("test2", "foo2")\n         )\n         security_manager_mock.checkPermission.assert_called_with("View", container)\n \n@@ -243,56 +233,54 @@ def test_no_tagged_value(self):\n \n         # Mock schema model\n         class ITestSchema(Interface):\n-            test = zope.schema.TextLine(title=u"Test")\n+            test = zope.schema.TextLine(title="Test")\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ITestSchema)\n         fti_mock.behaviors = ()\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Content item\n         item = Item("test")\n-        item.portal_type = u"testtype"\n-        item.test = u"foo"\n-        item.foo = u"bar"\n+        item.portal_type = "testtype"\n+        item.test = "foo"\n+        item.foo = "bar"\n \n         SCHEMA_CACHE.clear()\n \n         # Everything allowed\n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", u"foo"))\n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", "foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", "bar"))\n \n         # Unknown attributes are allowed\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", "stuff")\n         )\n \n     def test_no_read_permission(self):\n \n         # Mock schema model\n         class ITestSchema(Interface):\n-            test = zope.schema.TextLine(title=u"Test")\n+            test = zope.schema.TextLine(title="Test")\n \n         ITestSchema.setTaggedValue(READ_PERMISSIONS_KEY, dict(foo="foo.View"))\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ITestSchema)\n         fti_mock.behaviors = ()\n \n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Mock permissions\n-        self.mock_utility(\n-            Permission(u"foo.View", u"View foo"), IPermission, u"foo.View"\n-        )\n+        self.mock_utility(Permission("foo.View", "View foo"), IPermission, "foo.View")\n \n         # Content item\n         item = Item("test")\n-        item.portal_type = u"testtype"\n-        item.test = u"foo"\n-        item.foo = u"bar"\n+        item.portal_type = "testtype"\n+        item.test = "foo"\n+        item.foo = "bar"\n \n         # Check permission\n         security_manager_mock = Mock()\n@@ -303,69 +291,69 @@ class ITestSchema(Interface):\n \n         SCHEMA_CACHE.clear()\n \n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", u"foo"))\n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", "foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", "bar"))\n \n         # Unknown attributes are allowed\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", "stuff")\n         )\n \n     def test_no_schema(self):\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=None)\n         fti_mock.behaviors = ()\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Content item\n         item = Item("test")\n-        item.portal_type = u"testtype"\n-        item.test = u"foo"\n-        item.foo = u"bar"\n+        item.portal_type = "testtype"\n+        item.test = "foo"\n+        item.foo = "bar"\n \n         SCHEMA_CACHE.clear()\n \n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", u"foo"))\n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", "foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", "bar"))\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", "stuff")\n         )\n \n     def test_schema_exception(self):\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(side_effect=AttributeError)\n         fti_mock.behaviors = ()\n \n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Content item\n         item = Item("test")\n-        item.portal_type = u"testtype"\n-        item.test = u"foo"\n-        item.foo = u"bar"\n+        item.portal_type = "testtype"\n+        item.test = "foo"\n+        item.foo = "bar"\n \n         SCHEMA_CACHE.clear()\n \n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", u"foo"))\n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", "foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", "bar"))\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", "stuff")\n         )\n \n     def test_empty_name(self):\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Content item\n         item = Item("test")\n-        item.portal_type = u"testtype"\n+        item.portal_type = "testtype"\n \n         SCHEMA_CACHE.clear()\n \n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("", u"foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("", "foo"))\ndiff --git a/plone/dexterity/tests/test_utils.py b/plone/dexterity/tests/test_utils.py\nindex 37a8296..0b6ff3c 100644\n--- a/plone/dexterity/tests/test_utils.py\n+++ b/plone/dexterity/tests/test_utils.py\n@@ -25,7 +25,7 @@ class IBehaviorSchema(Interface):\n             pass\n \n         behavior_mock = Mock()\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n \n         portal_type = "prefix_0_type_0_schema"\n         behavior_name = "behavior_0"\n@@ -54,7 +54,7 @@ def testAddContentToContainer_preserves_existing_id(self):\n         from plone.dexterity.content import Item\n \n         container = Container()\n-        container._ordering = u"unordered"\n+        container._ordering = "unordered"\n         # Allow anyone to access the contents information on the container.\n         # This allows to check for existing content with the same id.\n         container.manage_permission(\ndiff --git a/plone/dexterity/tests/test_views.py b/plone/dexterity/tests/test_views.py\nindex e27e728..b6373a5 100644\n--- a/plone/dexterity/tests/test_views.py\n+++ b/plone/dexterity/tests/test_views.py\n@@ -93,29 +93,29 @@ def enumerateBehaviors(self):\n class TestAddView(MockTestCase):\n     def test_addview_sets_form_portal_type(self):\n \n-        context = Container(u"container")\n+        context = Container("container")\n         request = TestRequest()\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n \n         addview = DefaultAddView(context, request, fti)\n \n-        self.assertEqual(u"testtype", addview.form_instance.portal_type)\n+        self.assertEqual("testtype", addview.form_instance.portal_type)\n \n     def test_form_create(self):\n \n         # Context and request\n-        context = Container(u"container")\n+        context = Container("container")\n         request = TestRequest()\n \n         # FTI - returns dummy factory name\n \n-        fti_mock = DexterityFTI(u"testtype")\n-        fti_mock.factory = u"testfactory"\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.factory = "testfactory"\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # The form we\'re testing\n         form = DefaultAddForm(context, request)\n-        form.portal_type = u"testtype"\n+        form.portal_type = "testtype"\n \n         class ISchema(Interface):\n             foo = schema.TextLine()\n@@ -126,7 +126,7 @@ class ISchema(Interface):\n \n         obj_dummy = Item(id="dummy")\n         alsoProvides(obj_dummy, ISchema)\n-        data_dummy = {u"foo": u"bar"}\n+        data_dummy = {"foo": "bar"}\n \n         from zope.component import createObject\n \n@@ -147,22 +147,22 @@ def test_add(self):\n         obj = Mock()\n         request = TestRequest()\n \n-        container._setObject = Mock(return_value=u"newid")\n+        container._setObject = Mock(return_value="newid")\n         container._getOb = Mock(return_value=obj)\n         container.absolute_url = Mock(return_value="http://nohost/plone/container")\n \n-        obj.id = u"newid"\n+        obj.id = "newid"\n         obj.portal_type = "testtype"\n \n         # New object\'s FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.isConstructionAllowed = Mock(return_value=True)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # Container FTI\n-        container_fti_mock = DexterityFTI(u"containertype")\n+        container_fti_mock = DexterityFTI("containertype")\n         container_fti_mock.allowType = Mock(return_value=True)\n-        self.mock_utility(container_fti_mock, IDexterityFTI, name=u"containertype")\n+        self.mock_utility(container_fti_mock, IDexterityFTI, name="containertype")\n \n         container.getTypeInfo = Mock(return_value=container_fti_mock)\n \n@@ -173,12 +173,12 @@ def __init__(self, context):\n                 pass\n \n             def chooseName(self, name, object):\n-                return u"newid"\n+                return "newid"\n \n         self.mock_adapter(NameChooser, INameChooser, (Interface,))\n \n         form = DefaultAddForm(container, request)\n-        form.portal_type = u"testtype"\n+        form.portal_type = "testtype"\n         form.add(obj)\n \n     def test_add_raises_unauthorized_if_construction_not_allowed(self):\n@@ -188,19 +188,19 @@ def test_add_raises_unauthorized_if_construction_not_allowed(self):\n         request = TestRequest()\n \n         # New object\'s FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.isConstructionAllowed = Mock(return_value=False)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # Container FTI\n-        container_fti_mock = DexterityFTI(u"containertype")\n-        self.mock_utility(container_fti_mock, IDexterityFTI, name=u"containertype")\n+        container_fti_mock = DexterityFTI("containertype")\n+        self.mock_utility(container_fti_mock, IDexterityFTI, name="containertype")\n \n         container.getTypeInfo = Mock(return_value=container_fti_mock)\n         obj.portal_type = "testtype"\n \n         form = DefaultAddForm(container, request)\n-        form.portal_type = u"testtype"\n+        form.portal_type = "testtype"\n \n         self.assertRaises(Unauthorized, form.add, obj)\n \n@@ -213,19 +213,19 @@ def test_add_raises_value_error_if_type_not_addable(self):\n         obj.portal_type = "testtype"\n \n         # New object\'s FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.isConstructionAllowed = Mock(return_value=True)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # Container FTI\n-        container_fti_mock = DexterityFTI(u"containertype")\n+        container_fti_mock = DexterityFTI("containertype")\n         container_fti_mock.allowType = Mock(return_value=False)\n-        self.mock_utility(container_fti_mock, IDexterityFTI, name=u"containertype")\n+        self.mock_utility(container_fti_mock, IDexterityFTI, name="containertype")\n \n         container.getTypeInfo = Mock(return_value=container_fti_mock)\n \n         form = DefaultAddForm(container, request)\n-        form.portal_type = u"testtype"\n+        form.portal_type = "testtype"\n \n         self.assertRaises(ValueError, form.add, obj)\n \n@@ -242,57 +242,57 @@ def test_label(self):\n \n         # FTI\n \n-        fti_mock = DexterityFTI(u"testtype")\n-        fti_mock.Title = Mock(return_value=u"Test title")\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.Title = Mock(return_value="Test title")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # Form\n \n         addform = DefaultAddForm(context_mock, request_mock)\n-        addform.portal_type = u"testtype"\n+        addform.portal_type = "testtype"\n \n         label = addform.label\n-        self.assertEqual(u"Add ${name}", six.text_type(label))\n-        self.assertEqual(u"Test title", label.mapping["name"])\n+        self.assertEqual("Add ${name}", six.text_type(label))\n+        self.assertEqual("Test title", label.mapping["name"])\n \n     def test_schema_lookup_add(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u"testtype")\n+        context_mock = self.create_dummy(portal_type="testtype")\n         request_mock = TestRequest()\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         fti_mock.behaviors = (\n             IBehaviorOne.__identifier__,\n             IBehaviorTwo.__identifier__,\n             IBehaviorThree.__identifier__,\n         )\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         from plone.behavior.interfaces import IBehavior\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 1",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 1",\n+            description="Provides test behavior",\n             interface=IBehaviorOne,\n             marker=None,\n             factory=None,\n         )\n         self.mock_utility(registration, IBehavior, IBehaviorOne.__identifier__)\n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 2",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 2",\n+            description="Provides test behavior",\n             interface=IBehaviorTwo,\n             marker=None,\n             factory=None,\n         )\n         self.mock_utility(registration, IBehavior, IBehaviorTwo.__identifier__)\n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 3",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 3",\n+            description="Provides test behavior",\n             interface=IBehaviorThree,\n             marker=None,\n             factory=None,\n@@ -301,7 +301,7 @@ def test_schema_lookup_add(self):\n \n         # Form\n         view = DefaultAddForm(context_mock, request_mock)\n-        view.portal_type = u"testtype"\n+        view.portal_type = "testtype"\n \n         self.assertEqual(ISchema, view.schema)\n \n@@ -319,15 +319,15 @@ def test_fires_add_begun_event(self):\n \n         # Context and request\n         context_mock = self.create_dummy(\n-            portal_type=u"testtype",\n+            portal_type="testtype",\n             allowedContentTypes=lambda: [self.create_dummy(getId=lambda: "testtype")],\n         )\n         request_mock = TestRequest()\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         self.mock_adapter(FieldWidgets, IWidgets, (Interface, Interface, Interface))\n \n@@ -350,14 +350,14 @@ def test_update_checks_allowed_types(self):\n \n         # Context and request\n         context_mock = self.create_dummy(\n-            portal_type=u"testtype", allowedContentTypes=lambda: []\n+            portal_type="testtype", allowedContentTypes=lambda: []\n         )\n         request_mock = TestRequest()\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         self.mock_adapter(FieldWidgets, IWidgets, (Interface, Interface, Interface))\n \n@@ -372,15 +372,15 @@ def test_update_ignores_type_check_if_security_check_deferred(self):\n \n         # Context and request\n         context_mock = self.create_dummy(\n-            portal_type=u"testtype", allowedContentTypes=lambda: []\n+            portal_type="testtype", allowedContentTypes=lambda: []\n         )\n         request_mock = TestRequest()\n         alsoProvides(request_mock, IDeferSecurityCheck)\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         self.mock_adapter(FieldWidgets, IWidgets, (Interface, Interface, Interface))\n \n@@ -397,7 +397,7 @@ def test_update_ignores_type_check_if_security_check_deferred(self):\n     def test_fires_add_cancelled_event(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u"testtype")\n+        context_mock = self.create_dummy(portal_type="testtype")\n         context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n         request_mock = TestRequest()\n \n@@ -435,24 +435,24 @@ def test_label(self):\n \n         # Context and request\n \n-        context_mock = self.create_dummy(portal_type=u"testtype")\n+        context_mock = self.create_dummy(portal_type="testtype")\n         request_mock = TestRequest()\n \n         # FTI\n \n-        fti_mock = DexterityFTI(u"testtype")\n-        fti_mock.Title = Mock(return_value=u"Test title")\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.Title = Mock(return_value="Test title")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # Form\n         editview = DefaultEditForm(context_mock, request_mock)\n \n         # emulate update()\n-        editview.portal_type = u"testtype"\n+        editview.portal_type = "testtype"\n \n         label = editview.label\n-        self.assertEqual(u"Edit ${name}", six.text_type(label))\n-        self.assertEqual(u"Test title", label.mapping["name"])\n+        self.assertEqual("Edit ${name}", six.text_type(label))\n+        self.assertEqual("Test title", label.mapping["name"])\n \n     def test_schema_lookup_edit(self):\n \n@@ -460,42 +460,42 @@ def test_schema_lookup_edit(self):\n         class IMarker(IDexterityContent):\n             pass\n \n-        context_mock = self.create_dummy(portal_type=u"testtype")\n+        context_mock = self.create_dummy(portal_type="testtype")\n         alsoProvides(context_mock, IMarker)\n         request_mock = TestRequest()\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         fti_mock.behaviors = (\n             IBehaviorOne.__identifier__,\n             IBehaviorTwo.__identifier__,\n             IBehaviorThree.__identifier__,\n         )\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         from plone.behavior.interfaces import IBehavior\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 1",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 1",\n+            description="Provides test behavior",\n             interface=IBehaviorOne,\n             marker=None,\n             factory=None,\n         )\n         self.mock_utility(registration, IBehavior, IBehaviorOne.__identifier__)\n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 2",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 2",\n+            description="Provides test behavior",\n             interface=IBehaviorTwo,\n             marker=None,\n             factory=None,\n         )\n         self.mock_utility(registration, IBehavior, IBehaviorTwo.__identifier__)\n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 3",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 3",\n+            description="Provides test behavior",\n             interface=IBehaviorThree,\n             marker=None,\n             factory=None,\n@@ -504,7 +504,7 @@ class IMarker(IDexterityContent):\n \n         # Form\n         view = DefaultEditForm(context_mock, request_mock)\n-        view.portal_type = u"testtype"\n+        view.portal_type = "testtype"\n \n         self.assertEqual(ISchema, view.schema)\n \n@@ -520,13 +520,13 @@ class IMarker(IDexterityContent):\n     def test_fires_edit_begun_event(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u"testtype")\n+        context_mock = self.create_dummy(portal_type="testtype")\n         request_mock = TestRequest()\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         self.mock_adapter(FieldWidgets, IWidgets, (Interface, Interface, Interface))\n         self.mock_adapter(Actions, IActions, (Interface, Interface, Interface))\n@@ -546,7 +546,7 @@ def test_fires_edit_begun_event(self):\n     def test_fires_edit_cancelled_event(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u"testtype", title=u"foo")\n+        context_mock = self.create_dummy(portal_type="testtype", title="foo")\n         context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n         request_mock = TestRequest()\n \n@@ -576,7 +576,7 @@ def addStatusMessage(self, msg, type=""):\n     def test_fires_edit_finished_event(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u"testtype", title=u"foo")\n+        context_mock = self.create_dummy(portal_type="testtype", title="foo")\n         context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n         request_mock = TestRequest()\n \n@@ -599,7 +599,7 @@ def addStatusMessage(self, msg, type=""):\n         # Form\n         view = DefaultEditForm(context_mock, request_mock)\n         view.widgets = Mock()\n-        view.widgets.extract = Mock(return_value=({"title": u"foo"}, []))\n+        view.widgets.extract = Mock(return_value=({"title": "foo"}, []))\n         view.applyChanges = Mock()\n         view.handleApply(view, {})\n \n@@ -614,42 +614,42 @@ def test_schema_lookup_default_view(self):\n         class IMarker(IDexterityContent):\n             pass\n \n-        context_mock = self.create_dummy(portal_type=u"testtype")\n+        context_mock = self.create_dummy(portal_type="testtype")\n         alsoProvides(context_mock, IMarker)\n         request_mock = TestRequest()\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         fti_mock.behaviors = (\n             IBehaviorOne.__identifier__,\n             IBehaviorTwo.__identifier__,\n             IBehaviorThree.__identifier__,\n         )\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         from plone.behavior.interfaces import IBehavior\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 1",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 1",\n+            description="Provides test behavior",\n             interface=IBehaviorOne,\n             marker=None,\n             factory=None,\n         )\n         self.mock_utility(registration, IBehavior, IBehaviorOne.__identifier__)\n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 2",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 2",\n+            description="Provides test behavior",\n             interface=IBehaviorTwo,\n             marker=None,\n             factory=None,\n         )\n         self.mock_utility(registration, IBehavior, IBehaviorTwo.__identifier__)\n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 3",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 3",\n+            description="Provides test behavior",\n             interface=IBehaviorThree,\n             marker=None,\n             factory=None,\n@@ -658,7 +658,7 @@ class IMarker(IDexterityContent):\n \n         # Form\n         view = DefaultView(context_mock, request_mock)\n-        view.portal_type = u"testtype"\n+        view.portal_type = "testtype"\n \n         self.assertEqual(ISchema, view.schema)\n \ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex b753f88..c16562e 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -553,8 +553,8 @@ def content_type(self):\n \n             result = response.getBody()\n             result = re.sub(\n-                br"<n:getlastmodified>.+</n:getlastmodified>",\n-                br"<n:getlastmodified>...</n:getlastmodified>",\n+                rb"<n:getlastmodified>.+</n:getlastmodified>",\n+                rb"<n:getlastmodified>...</n:getlastmodified>",\n                 result,\n             )\n             self.assertEqual(result.strip(), body.strip())\n@@ -887,7 +887,7 @@ def test_file_factory_factory_utility(self):\n             def factory(*args, **kwargs):\n                 return result_dummy\n \n-            self.mock_utility(factory, IFactory, name=u"childtype-factory")\n+            self.mock_utility(factory, IFactory, name="childtype-factory")\n \n             factory = DefaultFileFactory(container_mock)\n \n@@ -915,7 +915,7 @@ def test_file_factory_content_type_factory_utility(self):\n             def factory(*args, **kwargs):\n                 return Item(*args, **kwargs)\n \n-            self.mock_utility(factory, IFactory, name=u"childtype-factory")\n+            self.mock_utility(factory, IFactory, name="childtype-factory")\n \n             factory = DefaultFileFactory(container_mock)\n \n@@ -928,11 +928,11 @@ class ITest(Interface):\n                 pass\n \n             SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u"testtype")\n+            fti_mock = DexterityFTI("testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n             fti_mock.behaviors = []\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+            self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n             item = Item("item")\n             item.portal_type = "testtype"\n@@ -946,11 +946,11 @@ class ITest(Interface):\n                 title = schema.TextLine()\n \n             SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u"testtype")\n+            fti_mock = DexterityFTI("testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n             fti_mock.behaviors = []\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+            self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n             item = Item("item")\n             item.portal_type = "testtype"\n@@ -967,11 +967,11 @@ class ITest(Interface):\n             alsoProvides(ITest["body"], IPrimaryField)\n \n             SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u"testtype")\n+            fti_mock = DexterityFTI("testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n             fti_mock.behaviors = []\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+            self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n             item = Item("item")\n             item.portal_type = "testtype"\n@@ -990,10 +990,10 @@ class ITest(Interface):\n             alsoProvides(ITest["stuff"], IPrimaryField)\n \n             SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u"testtype")\n+            fti_mock = DexterityFTI("testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+            self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n             item = Item("item")\n             item.portal_type = "testtype"\n \n@@ -1029,11 +1029,11 @@ def enumerateBehaviors(self):\n                     yield MockBehavior(ITestAdditional)\n \n             SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u"testtype")\n+            fti_mock = DexterityFTI("testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n \n             self.mock_adapter(MockBehaviorAssignable, IBehaviorAssignable, (Item,))\n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+            self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n             item = Item("item")\n             item.portal_type = "testtype"\n \n@@ -1048,11 +1048,11 @@ class ITest(Interface):\n \n             alsoProvides(ITest["body"], IPrimaryField)\n \n-            fti_mock = DexterityFTI(u"testtype")\n+            fti_mock = DexterityFTI("testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n             fti_mock.behaviors = [ITestBehavior.__identifier__]\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+            self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n             item = Item("item")\n             item.portal_type = "testtype"\n@@ -1119,18 +1119,18 @@ class ITest(Interface):\n \n             alsoProvides(ITest["body"], IPrimaryField)\n \n-            fti_mock = DexterityFTI(u"testtype")\n+            fti_mock = DexterityFTI("testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n             fti_mock.behaviors = [ITestBehavior.__identifier__]\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+            self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n             item = Item("item")\n             item.portal_type = "testtype"\n-            item.title = u"Test title"\n+            item.title = "Test title"\n             item.foo = 10\n             item.bar = "xyz"\n-            item.body = u"<p>body</p>"\n+            item.body = "<p>body</p>"\n \n             writefile = DefaultWriteFile(item)\n \n@@ -1301,7 +1301,6 @@ def __browser_default__(self, request):\n                 traversal.browserDefault(request),\n             )\n \n-\n else:\n \n     class TestDummy(MockTestCase):\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-07-01T13:07:33+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/ca4a8df883cdf35e5e4159d206667279fafb6ebd

Removed BBB Py 2.7 import with bare except.

Files changed:
M plone/dexterity/filerepresentation.py

b'diff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex 58a0d84..d4a5f87 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -4,6 +4,7 @@\n from Acquisition import aq_base\n from Acquisition import Implicit\n from email.message import Message\n+from email.parser import BytesFeedParser\n from plone.dexterity import bbb\n from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n from plone.dexterity.interfaces import IDexterityContainer\n@@ -42,13 +43,6 @@\n     Resource = bbb.Resource\n \n \n-try:\n-    from email.parser import BytesFeedParser\n-except:\n-    # Python 2.7 compatibility\n-    from email.parser import FeedParser as BytesFeedParser\n-\n-\n class DAVResourceMixin(object):\n     """Mixin class for WebDAV resource support.\n \n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-07-01T13:12:52+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/67c95d914561cee787d3aafc174905eae7617f1b

Removed unused imports.

'make lint' now finishes without error.

Files changed:
M plone/dexterity/browser/edit.py
M plone/dexterity/schema.py
M plone/dexterity/tests/case.py
M plone/dexterity/tests/test_webdav.py

b'diff --git a/plone/dexterity/browser/edit.py b/plone/dexterity/browser/edit.py\nindex 1e5b4f8..c32d898 100644\n--- a/plone/dexterity/browser/edit.py\n+++ b/plone/dexterity/browser/edit.py\n@@ -8,7 +8,6 @@\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.registry.interfaces import IRegistry\n from plone.z3cform import layout\n-from Products.CMFCore.utils import getToolByName\n from Products.statusmessages.interfaces import IStatusMessage\n from z3c.form import button\n from z3c.form import form\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 02aa434..d372dc8 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -16,7 +16,6 @@\n from zope.component import getAllUtilitiesRegisteredFor\n from zope.component import getUtility\n from zope.component import queryUtility\n-from zope.component.hooks import getSite\n from zope.dottedname.resolve import resolve\n from zope.globalrequest import getRequest\n from zope.interface import alsoProvides\ndiff --git a/plone/dexterity/tests/case.py b/plone/dexterity/tests/case.py\nindex 3939cff..05d2417 100644\n--- a/plone/dexterity/tests/case.py\n+++ b/plone/dexterity/tests/case.py\n@@ -1,6 +1,4 @@\n # -*- coding: utf-8 -*-\n-from plone.dexterity.bbb import HAS_WEBDAV\n-\n import gc\n import six\n import unittest\ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex c16562e..fd6a9ef 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from .case import HAS_WEBDAV\n+from plone.dexterity.bbb import HAS_WEBDAV\n from .case import MockTestCase\n \n \n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-07-01T13:18:32+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/971009083c7a833edacb1b4a8778a995f00618cf

pyupgrade --py37-plus

Files changed:
M plone/__init__.py
M plone/dexterity/__init__.py
M plone/dexterity/bbb.py
M plone/dexterity/behavior.py
M plone/dexterity/browser/__init__.py
M plone/dexterity/browser/add.py
M plone/dexterity/browser/base.py
M plone/dexterity/browser/edit.py
M plone/dexterity/browser/fti.py
M plone/dexterity/browser/traversal.py
M plone/dexterity/browser/view.py
M plone/dexterity/content.py
M plone/dexterity/events.py
M plone/dexterity/exportimport.py
M plone/dexterity/factory.py
M plone/dexterity/filerepresentation.py
M plone/dexterity/fti.py
M plone/dexterity/i18n.py
M plone/dexterity/interfaces.py
M plone/dexterity/primary.py
M plone/dexterity/schema.py
M plone/dexterity/tests/__init__.py
M plone/dexterity/tests/case.py
M plone/dexterity/tests/schemata.py
M plone/dexterity/tests/test_behavior.py
M plone/dexterity/tests/test_content.py
M plone/dexterity/tests/test_content_integration.py
M plone/dexterity/tests/test_exportimport.py
M plone/dexterity/tests/test_factory.py
M plone/dexterity/tests/test_fti.py
M plone/dexterity/tests/test_primary.py
M plone/dexterity/tests/test_schema.py
M plone/dexterity/tests/test_schema_cache.py
M plone/dexterity/tests/test_security.py
M plone/dexterity/tests/test_synchronize.py
M plone/dexterity/tests/test_utils.py
M plone/dexterity/tests/test_views.py
M plone/dexterity/tests/test_webdav.py
M plone/dexterity/utils.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 03d08ff..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/dexterity/__init__.py b/plone/dexterity/__init__.py\nindex cfa51cd..1cbc5de 100644\n--- a/plone/dexterity/__init__.py\n+++ b/plone/dexterity/__init__.py\n@@ -1,3 +1,2 @@\n-# -*- coding: utf-8 -*-\n # Kick dynamic module factory\n from . import schema  # noqa\ndiff --git a/plone/dexterity/bbb.py b/plone/dexterity/bbb.py\nindex 9b3770e..e9983aa 100644\n--- a/plone/dexterity/bbb.py\n+++ b/plone/dexterity/bbb.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n import zope.deferredimport\n \n \n@@ -20,7 +19,7 @@\n NullResource = None\n \n \n-class Resource(object):\n+class Resource:\n     def dav__init(self, request, response):\n         pass\n \ndiff --git a/plone/dexterity/behavior.py b/plone/dexterity/behavior.py\nindex bf015f3..4521738 100644\n--- a/plone/dexterity/behavior.py\n+++ b/plone/dexterity/behavior.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.behavior.interfaces import IBehaviorAssignable\n from plone.dexterity.interfaces import IDexterityContent\n from plone.dexterity.schema import SCHEMA_CACHE\n@@ -8,7 +7,7 @@\n \n @implementer(IBehaviorAssignable)\n @adapter(IDexterityContent)\n-class DexterityBehaviorAssignable(object):\n+class DexterityBehaviorAssignable:\n     """Support plone.behavior behaviors stored in the FTI"""\n \n     def __init__(self, context):\n@@ -21,5 +20,4 @@ def supports(self, behavior_interface):\n         return False\n \n     def enumerateBehaviors(self):\n-        for behavior in SCHEMA_CACHE.behavior_registrations(self.context.portal_type):\n-            yield behavior\n+        yield from SCHEMA_CACHE.behavior_registrations(self.context.portal_type)\ndiff --git a/plone/dexterity/browser/__init__.py b/plone/dexterity/browser/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/dexterity/browser/__init__.py\n+++ b/plone/dexterity/browser/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/dexterity/browser/add.py b/plone/dexterity/browser/add.py\nindex 7700833..d29e14d 100644\n--- a/plone/dexterity/browser/add.py\n+++ b/plone/dexterity/browser/add.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition.interfaces import IAcquirer\n@@ -40,7 +39,7 @@ class DefaultAddForm(DexterityExtensibleForm, form.AddForm):\n     success_message = _("Item created")\n \n     def __init__(self, context, request, ti=None):\n-        super(DefaultAddForm, self).__init__(context, request)\n+        super().__init__(context, request)\n         if ti is not None:\n             self.ti = ti\n             self.portal_type = ti.getId()\n@@ -135,13 +134,13 @@ def update(self):\n                     "Subobject type disallowed by IConstrainTypes adapter: %s"\n                     % self.portal_type\n                 )\n-        super(DefaultAddForm, self).update()\n+        super().update()\n         # fire the edit begun only if no action was executed\n         if len(self.actions.executedActions) == 0:\n             notify(AddBegunEvent(self.context))\n \n     def updateActions(self):\n-        super(DefaultAddForm, self).updateActions()\n+        super().updateActions()\n         if "save" in self.actions:\n             self.actions["save"].addClass("context")\n \n@@ -168,7 +167,7 @@ class DefaultAddView(layout.FormWrapper, BrowserPage):\n     form = DefaultAddForm\n \n     def __init__(self, context, request, ti):\n-        super(DefaultAddView, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.ti = ti\n \n         # Set portal_type name on newly created form instance\ndiff --git a/plone/dexterity/browser/base.py b/plone/dexterity/browser/base.py\nindex 1558516..d057fed 100644\n--- a/plone/dexterity/browser/base.py\n+++ b/plone/dexterity/browser/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.autoform.form import AutoExtensibleForm\n from plone.dexterity.i18n import MessageFactory as _\n from plone.dexterity.interfaces import IDexterityFTI\ndiff --git a/plone/dexterity/browser/edit.py b/plone/dexterity/browser/edit.py\nindex c32d898..096819d 100644\n--- a/plone/dexterity/browser/edit.py\n+++ b/plone/dexterity/browser/edit.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity.browser.base import DexterityExtensibleForm\n from plone.dexterity.events import EditBegunEvent\n from plone.dexterity.events import EditCancelledEvent\n@@ -51,14 +50,14 @@ def nextURL(self):\n \n     def update(self):\n         self.portal_type = self.context.portal_type\n-        super(DefaultEditForm, self).update()\n+        super().update()\n \n         # fire the edit begun only if no action was executed\n         if len(self.actions.executedActions) == 0:\n             notify(EditBegunEvent(self.context))\n \n     def updateActions(self):\n-        super(DefaultEditForm, self).updateActions()\n+        super().updateActions()\n \n         if "save" in self.actions:\n             self.actions["save"].addClass("context")\ndiff --git a/plone/dexterity/browser/fti.py b/plone/dexterity/browser/fti.py\nindex 35fe812..93062f4 100644\n--- a/plone/dexterity/browser/fti.py\n+++ b/plone/dexterity/browser/fti.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity.fti import DexterityFTI\n from Products.CMFCore.browser.typeinfo import FactoryTypeInformationAddView\n \ndiff --git a/plone/dexterity/browser/traversal.py b/plone/dexterity/browser/traversal.py\nindex 0487ea5..02c70b1 100644\n--- a/plone/dexterity/browser/traversal.py\n+++ b/plone/dexterity/browser/traversal.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from Acquisition.interfaces import IAcquirer\n@@ -48,7 +47,7 @@ def publishTraverse(self, request, name):\n         ):\n             return FolderDataResource(DAV_FOLDER_DATA_ID, context).__of__(context)\n \n-        defaultTraversal = super(DexterityPublishTraverse, self).publishTraverse(\n+        defaultTraversal = super().publishTraverse(\n             request, name\n         )\n \n@@ -85,4 +84,4 @@ def browserDefault(self, request):\n         ):\n             return self.context, ()\n \n-        return super(DexterityPublishTraverse, self).browserDefault(request)\n+        return super().browserDefault(request)\ndiff --git a/plone/dexterity/browser/view.py b/plone/dexterity/browser/view.py\nindex deed522..ad90ac5 100644\n--- a/plone/dexterity/browser/view.py\n+++ b/plone/dexterity/browser/view.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.autoform.view import WidgetsView\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.utils import getAdditionalSchemata\ndiff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 969fa9b..be4d7fb 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl import getSecurityManager\n from AccessControl import Permissions as acpermissions\n@@ -233,7 +232,7 @@ def __call__(self, name, value):\n         return 0\n \n \n-class PasteBehaviourMixin(object):\n+class PasteBehaviourMixin:\n     def _notifyOfCopyTo(self, container, op=0):\n         """Keep Archetypes\' reference info internally when op == 1 (move)\n         because in those cases we need to keep Archetypes\' refeferences.\n@@ -270,7 +269,7 @@ def _verifyObjectPaste(self, obj, validate_src=True):\n         # Products.CMFCore.PortalFolder.PortalFolderBase (permission checks and\n         # allowed content types) to also ask the FTI if construction is\n         # allowed.\n-        super(PasteBehaviourMixin, self)._verifyObjectPaste(obj, validate_src)\n+        super()._verifyObjectPaste(obj, validate_src)\n         if validate_src:\n             portal_type = getattr(aq_base(obj), "portal_type", None)\n             if portal_type:\n@@ -287,7 +286,7 @@ def _getCopy(self, container):\n         # Copied from Products.Archetypes.Referenceable.Referenceable._getCopy\n         is_cp_flag = getattr(self, "_v_is_cp", None)\n         cp_refs_flag = getattr(self, "_v_cp_refs", None)\n-        ob = super(PasteBehaviourMixin, self)._getCopy(container)\n+        ob = super()._getCopy(container)\n         if is_cp_flag:\n             setattr(ob, "_v_is_cp", is_cp_flag)\n         if cp_refs_flag:\n@@ -416,7 +415,7 @@ def _get__name__(self):\n         return self.id\n \n     def _set__name__(self, value):\n-        if six.PY2 and isinstance(value, six.text_type):\n+        if six.PY2 and isinstance(value, str):\n             value = str(value)  # may throw, but id must be ASCII in py2\n         self.id = value\n \n@@ -463,7 +462,7 @@ def setModificationDate(self, modification_date=None):\n     @security.protected(permissions.View)\n     def Title(self):\n         # this is a CMF accessor, so should return utf8-encoded\n-        if six.PY2 and isinstance(self.title, six.text_type):\n+        if six.PY2 and isinstance(self.title, str):\n             return self.title.encode("utf-8")\n         return self.title or ""\n \n@@ -478,7 +477,7 @@ def Description(self):\n         value = value.replace("\\r\\n", " ").replace("\\r", " ").replace("\\n", " ")  # noqa\n \n         # this is a CMF accessor, so should return utf8-encoded\n-        if six.PY2 and isinstance(value, six.text_type):\n+        if six.PY2 and isinstance(value, str):\n             value = value.encode("utf-8")\n \n         return value\n@@ -658,21 +657,21 @@ def setDescription(self, description):\n     @security.protected(permissions.ModifyPortalContent)\n     def setCreators(self, creators):\n         # Set Dublin Core Creator elements - resource authors.\n-        if isinstance(creators, six.string_types):\n+        if isinstance(creators, str):\n             creators = [creators]\n         self.creators = tuple(safe_unicode(c.strip()) for c in creators)\n \n     @security.protected(permissions.ModifyPortalContent)\n     def setSubject(self, subject):\n         # Set Dublin Core Subject element - resource keywords.\n-        if isinstance(subject, six.string_types):\n+        if isinstance(subject, str):\n             subject = [subject]\n         self.subject = tuple(safe_unicode(s.strip()) for s in subject)\n \n     @security.protected(permissions.ModifyPortalContent)\n     def setContributors(self, contributors):\n         # Set Dublin Core Contributor elements - resource collaborators.\n-        if isinstance(contributors, six.string_types):\n+        if isinstance(contributors, str):\n             contributors = contributors.split(";")\n         self.contributors = tuple(safe_unicode(c.strip()) for c in contributors)\n \n@@ -785,7 +784,7 @@ def manage_delObjects(self, ids=None, REQUEST=None):\n         """\n         if ids is None:\n             ids = []\n-        if isinstance(ids, six.string_types):\n+        if isinstance(ids, str):\n             ids = [ids]\n         for id in ids:\n             item = self._getOb(id)\n@@ -793,7 +792,7 @@ def manage_delObjects(self, ids=None, REQUEST=None):\n                 permissions.DeleteObjects, item\n             ):\n                 raise Unauthorized("Do not have permissions to remove this object")\n-        return super(Container, self).manage_delObjects(ids, REQUEST=REQUEST)\n+        return super().manage_delObjects(ids, REQUEST=REQUEST)\n \n     # override PortalFolder\'s allowedContentTypes to respect IConstrainTypes\n     # adapters\n@@ -803,7 +802,7 @@ def allowedContentTypes(self, context=None):\n \n         constrains = IConstrainTypes(context, None)\n         if not constrains:\n-            return super(Container, self).allowedContentTypes()\n+            return super().allowedContentTypes()\n \n         return constrains.allowedContentTypes()\n \n@@ -827,7 +826,7 @@ def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):\n                     % type_name\n                 )\n \n-        return super(Container, self).invokeFactory(\n+        return super().invokeFactory(\n             type_name, id, RESPONSE, *args, **kw\n         )\n \ndiff --git a/plone/dexterity/events.py b/plone/dexterity/events.py\nindex 81e08bd..67932c9 100644\n--- a/plone/dexterity/events.py\n+++ b/plone/dexterity/events.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity import interfaces\n from zope.interface import implementer\n from zope.interface.interfaces import ObjectEvent\ndiff --git a/plone/dexterity/exportimport.py b/plone/dexterity/exportimport.py\nindex ee39472..8911b8c 100644\n--- a/plone/dexterity/exportimport.py\n+++ b/plone/dexterity/exportimport.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from csv import reader\n from csv import writer\n from Products.GenericSetup.content import _globtest\n@@ -47,7 +46,7 @@ def export(self, export_context, subdir, root=False):\n         context = self.context\n \n         if not root:\n-            subdir = "%s/%s" % (subdir, context.getId())\n+            subdir = "{}/{}".format(subdir, context.getId())\n \n         exportable = self.listExportableItems()\n \n@@ -89,7 +88,7 @@ def import_(self, import_context, subdir, root=False):\n         """See IFilesystemImporter."""\n         context = self.context\n         if not root:\n-            subdir = "%s/%s" % (subdir, context.getId())\n+            subdir = "{}/{}".format(subdir, context.getId())\n \n         data = import_context.readDataFile(".data", subdir)\n         if data is not None:\n@@ -139,7 +138,7 @@ def import_(self, import_context, subdir, root=False):\n                 if object is None:\n                     logger = import_context.getLogger("SFWA")\n                     logger.warning(\n-                        "Couldn\'t make instance: %s/%s" % (subdir, object_id)\n+                        "Couldn\'t make instance: {}/{}".format(subdir, object_id)\n                     )\n                     continue\n \ndiff --git a/plone/dexterity/factory.py b/plone/dexterity/factory.py\nindex e0d0d29..fc87b38 100644\n--- a/plone/dexterity/factory.py\n+++ b/plone/dexterity/factory.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from persistent import Persistent\n from plone.dexterity.interfaces import IDexterityFactory\n from plone.dexterity.interfaces import IDexterityFTI\n@@ -58,4 +57,4 @@ def getInterfaces(self):\n         return spec\n \n     def __repr__(self):\n-        return "<%s for %s>" % (self.__class__.__name__, self.portal_type)\n+        return "<{} for {}>".format(self.__class__.__name__, self.portal_type)\ndiff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex d4a5f87..3ea6075 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl.class_init import InitializeClass\n from Acquisition import aq_base\n@@ -43,7 +42,7 @@\n     Resource = bbb.Resource\n \n \n-class DAVResourceMixin(object):\n+class DAVResourceMixin:\n     """Mixin class for WebDAV resource support.\n \n     The main purpose of this class is to implement the Zope 2 WebDAV API to\n@@ -235,7 +234,7 @@ def listDAVObjects(self):\n         We add a non-folderish pseudo object which contains the "body" data\n         for this container.\n         """\n-        parentList = super(DAVCollectionMixin, self).listDAVObjects()\n+        parentList = super().listDAVObjects()\n         if not parentList:\n             parentList = []\n         else:\n@@ -329,7 +328,7 @@ def PROPFIND(self, REQUEST, RESPONSE):\n \n         Certain things may be acquired, notably .propertysheets\n         """\n-        return super(FolderDataResource, self).PROPFIND(REQUEST, RESPONSE)\n+        return super().PROPFIND(REQUEST, RESPONSE)\n \n     @security.protected(permissions.ModifyPortalContent)\n     def PROPPATCH(self, REQUEST, RESPONSE):\n@@ -338,7 +337,7 @@ def PROPPATCH(self, REQUEST, RESPONSE):\n \n         Certain things may be acquired, notably .propertysheets\n         """\n-        return super(FolderDataResource, self).PROPPATCH(REQUEST, RESPONSE)\n+        return super().PROPPATCH(REQUEST, RESPONSE)\n \n     @security.protected(permissions.ModifyPortalContent)\n     def LOCK(self, REQUEST, RESPONSE):\n@@ -395,7 +394,7 @@ def listDAVObjects(self):\n \n \n @implementer(IStreamIterator)\n-class StringStreamIterator(object):\n+class StringStreamIterator:\n     """Simple stream iterator to allow efficient data streaming."""\n \n     def __init__(self, data, size=None, chunk=1 << 16):\n@@ -436,7 +435,7 @@ def __len__(self):\n \n @implementer(IDirectoryFactory)\n @adapter(IDexterityContainer)\n-class DefaultDirectoryFactory(object):\n+class DefaultDirectoryFactory:\n     """Default directory factory, invoked when an FTP/WebDAV operation\n     attempts to create a new folder via a MKCOL request.\n \n@@ -452,7 +451,7 @@ def __call__(self, name):\n \n @implementer(IFileFactory)\n @adapter(IDexterityContainer)\n-class DefaultFileFactory(object):\n+class DefaultFileFactory:\n     """Default file factory, invoked when an FTP/WebDAV operation\n     attempts to create a new resource via a PUT request.\n \n@@ -534,7 +533,7 @@ def __call__(self, name, contentType, data):\n \n \n @implementer(IRawReadFile)\n-class ReadFileBase(object):\n+class ReadFileBase:\n     """Convenience base class for read files which delegate to another stream\n     type (e.g. a temporary file or StringIO)\n \n@@ -672,10 +671,7 @@ def _getStream(self):\n         # transaction is closed\n         message = self._getMessage()\n         out = tempfile.TemporaryFile(mode="w+b")\n-        if six.PY2:\n-            out.write(message.as_string())\n-        else:\n-            out.write(message.as_string().encode("utf-8"))\n+        out.write(message.as_string().encode("utf-8"))\n         self._size = out.tell()\n         out.seek(0)\n         return out\n@@ -686,7 +682,7 @@ def __next__(self):\n \n \n @implementer(IRawWriteFile)\n-class WriteFileBase(object):\n+class WriteFileBase:\n     """Convenience base class for write files which delegate to another\n     stream, e.g. a file or StringIO.\n \n@@ -748,7 +744,7 @@ def _getStream(self):\n \n @implementer(IRawWriteFile)\n @adapter(IDexterityContent)\n-class DefaultWriteFile(object):\n+class DefaultWriteFile:\n     """IRawWriteFile file adapter for Dexterity objects.\n \n     Uses RFC822 marshaler.\n@@ -818,7 +814,7 @@ def close(self):\n     def write(self, data):\n         if self._closed:\n             raise ValueError("File is closed")\n-        if isinstance(data, six.text_type):\n+        if isinstance(data, str):\n             data = data.encode()\n         self._written += len(data)\n         self._parser.feed(data)\ndiff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex db13166..ace851b 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from Acquisition import aq_base\n from plone.dexterity import utils\n@@ -51,7 +50,7 @@ def get_suffix(fti):\n \n \n @implementer(IDexterityFTIModificationDescription)\n-class DexterityFTIModificationDescription(object):\n+class DexterityFTIModificationDescription:\n     def __init__(self, attribute, oldValue):\n         self.attribute = attribute\n         self.oldValue = oldValue\n@@ -163,7 +162,7 @@ class DexterityFTI(base.DynamicViewTypeInformation):\n     schema_policy = "dexterity"\n \n     def __init__(self, *args, **kwargs):\n-        super(DexterityFTI, self).__init__(*args, **kwargs)\n+        super().__init__(*args, **kwargs)\n \n         if "aliases" not in kwargs:\n             self.setMethodAliases(self.default_aliases)\n@@ -215,13 +214,7 @@ def __init__(self, *args, **kwargs):\n \n     def Title(self):\n         if self.title and self.i18n_domain:\n-            if six.PY2:\n-                try:\n-                    return Message(self.title.decode("utf8"), self.i18n_domain)\n-                except UnicodeDecodeError:\n-                    return Message(self.title.decode("latin-1"), self.i18n_domain)\n-            else:\n-                return Message(self.title, self.i18n_domain)\n+            return Message(self.title, self.i18n_domain)\n         else:\n             if six.PY2:\n                 if self.title:\n@@ -231,13 +224,7 @@ def Title(self):\n \n     def Description(self):\n         if self.description and self.i18n_domain:\n-            if six.PY2:\n-                try:\n-                    return Message(self.description.decode("utf8"), self.i18n_domain)\n-                except UnicodeDecodeError:\n-                    return Message(self.description.decode("latin-1"), self.i18n_domain)\n-            else:\n-                return Message(self.description, self.i18n_domain)\n+            return Message(self.description, self.i18n_domain)\n         else:\n             if six.PY2 and self.description:\n                 return self.description.decode("utf8")\n@@ -311,7 +298,7 @@ def _updateProperty(self, id, value):\n         """\n \n         oldValue = getattr(self, id, None)\n-        super(DexterityFTI, self)._updateProperty(id, value)\n+        super()._updateProperty(id, value)\n         new_value = getattr(self, id, None)\n \n         if oldValue != new_value:\ndiff --git a/plone/dexterity/i18n.py b/plone/dexterity/i18n.py\nindex fe387f4..fa171bb 100644\n--- a/plone/dexterity/i18n.py\n+++ b/plone/dexterity/i18n.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n import zope.i18nmessageid\n \n \ndiff --git a/plone/dexterity/interfaces.py b/plone/dexterity/interfaces.py\nindex 66977de..b4e134c 100644\n--- a/plone/dexterity/interfaces.py\n+++ b/plone/dexterity/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.interfaces import ITypeInformation\n from zope.component.interfaces import IFactory\n from zope.interface import Attribute\ndiff --git a/plone/dexterity/primary.py b/plone/dexterity/primary.py\nindex 759d530..3e98ffe 100644\n--- a/plone/dexterity/primary.py\n+++ b/plone/dexterity/primary.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity.interfaces import IDexterityContent\n from plone.dexterity.utils import iterSchemata\n from plone.rfc822.interfaces import IPrimaryField\n@@ -10,7 +9,7 @@\n \n @implementer(IPrimaryFieldInfo)\n @adapter(IDexterityContent)\n-class PrimaryFieldInfo(object):\n+class PrimaryFieldInfo:\n     def __init__(self, context):\n         self.context = context\n         primary = None\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex d372dc8..f3747c5 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .interfaces import IContentType\n from .interfaces import IDexterityFTI\n from .interfaces import IDexteritySchema\n@@ -55,7 +54,7 @@ def invalidate_cache(fti):\n \n def lookup_fti(portal_type, cache=True):\n     # if its a string lookup fti\n-    if isinstance(portal_type, six.string_types):\n+    if isinstance(portal_type, str):\n         # looking up a utility is expensive, using the global request as\n         # cache is twice as fast\n         if cache:\n@@ -80,7 +79,7 @@ def lookup_fti(portal_type, cache=True):\n         return portal_type\n     raise ValueError(\n         "portal_type has to either string or IDexterityFTI instance but is "\n-        "{0!r}".format(portal_type)\n+        "{!r}".format(portal_type)\n     )\n \n \n@@ -117,7 +116,7 @@ def decorator(self, portal_type):\n     return decorator\n \n \n-class SchemaCache(object):\n+class SchemaCache:\n     """Simple schema cache for FTI based schema information.\n \n     This cache will store a Python object reference to the schema, as returned\n@@ -176,8 +175,8 @@ def behavior_registrations(self, fti):\n             if registration is None:\n                 # BBB - this case should be deprecated in v 3.0\n                 warnings.warn(\n-                    \'No behavior registration found for behavior named "{0}"\'\n-                    \' for factory "{1}"\'\n+                    \'No behavior registration found for behavior named "{}"\'\n+                    \' for factory "{}"\'\n                     " - trying deprecated fallback lookup (will be removed "\n                     \'in 3.0)..."\'.format(behavior_name, fti.getId()),\n                     DeprecationWarning,\n@@ -186,7 +185,7 @@ def behavior_registrations(self, fti):\n                     schema_interface = resolve(behavior_name)\n                 except (ValueError, ImportError):\n                     log.error(\n-                        "Error resolving behavior {0} for factory {1}".format(\n+                        "Error resolving behavior {} for factory {}".format(\n                             behavior_name, fti.getId()\n                         )\n                     )\n@@ -278,7 +277,7 @@ def modified(self, fti):\n \n \n @implementer(ISchemaInvalidatedEvent)\n-class SchemaInvalidatedEvent(object):\n+class SchemaInvalidatedEvent:\n     def __init__(self, portal_type):\n         self.portal_type = portal_type\n \n@@ -292,7 +291,7 @@ def invalidate_schema(event):\n \n \n # here starts the code dealing wih dynamic schemas.\n-class SchemaNameEncoder(object):\n+class SchemaNameEncoder:\n     """Schema name encoding"""\n \n     key = (\n@@ -358,7 +357,7 @@ def splitSchemaName(schemaName):\n \n # Dynamic module factory\n @implementer(IDynamicObjectFactory)\n-class SchemaModuleFactory(object):\n+class SchemaModuleFactory:\n     """Create dynamic schema interfaces on the fly"""\n \n     lock = RLock()\n@@ -422,7 +421,7 @@ def __call__(self, name, module):\n \n \n @implementer(ISchemaPolicy)\n-class DexteritySchemaPolicy(object):\n+class DexteritySchemaPolicy:\n     """Determines how and where imported dynamic interfaces are created.\n     Note that these schemata are never used directly. Rather, they are merged\n     into a schema with a proper name and module, either dynamically or\ndiff --git a/plone/dexterity/tests/__init__.py b/plone/dexterity/tests/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/dexterity/tests/__init__.py\n+++ b/plone/dexterity/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/dexterity/tests/case.py b/plone/dexterity/tests/case.py\nindex 05d2417..bb8c503 100644\n--- a/plone/dexterity/tests/case.py\n+++ b/plone/dexterity/tests/case.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n import gc\n import six\n import unittest\n@@ -10,7 +9,7 @@\n try:\n     from unittest.mock import Mock\n except ImportError:\n-    from mock import Mock\n+    from unittest.mock import Mock\n \n \n class MockTestCase(unittest.TestCase):\n@@ -88,7 +87,7 @@ def patch_global(self, orig, mock=None, **kw):\n         return mock\n \n \n-class Dummy(object):\n+class Dummy:\n     """Dummy object with arbitrary attributes"""\n \n     def __init__(self, **kw):\n@@ -120,6 +119,6 @@ def _global_replace(remove, install):\n     """Replace object \'remove\' with object \'install\' on all dictionaries."""\n     for referrer in gc.get_referrers(remove):\n         if type(referrer) is dict:\n-            for key, value in list(six.iteritems(referrer)):\n+            for key, value in list(referrer.items()):\n                 if value is remove:\n                     referrer[key] = install\ndiff --git a/plone/dexterity/tests/schemata.py b/plone/dexterity/tests/schemata.py\nindex 7473382..13db211 100644\n--- a/plone/dexterity/tests/schemata.py\n+++ b/plone/dexterity/tests/schemata.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.supermodel.interfaces import FILENAME_KEY\n from zope import schema\n from zope.interface import Interface\ndiff --git a/plone/dexterity/tests/test_behavior.py b/plone/dexterity/tests/test_behavior.py\nindex 660dc98..ee45d91 100644\n--- a/plone/dexterity/tests/test_behavior.py\n+++ b/plone/dexterity/tests/test_behavior.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.behavior.interfaces import IBehavior\n from plone.dexterity.behavior import DexterityBehaviorAssignable\ndiff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex 8648900..c385718 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from datetime import date\n from datetime import datetime\n@@ -34,12 +33,12 @@\n try:\n     from unittest.mock import Mock\n except ImportError:\n-    from mock import Mock\n+    from unittest.mock import Mock\n \n try:\n     from unittest.mock import patch\n except ImportError:\n-    from mock import patch\n+    from unittest.mock import patch\n \n \n class TestContent(MockTestCase):\n@@ -50,7 +49,7 @@ def setUp(self):\n         provideAdapter(AttributeAnnotations)\n \n     def test_provided_by_item(self):\n-        class FauxDataManager(object):\n+        class FauxDataManager:\n             def setstate(self, obj):\n                 pass\n \n@@ -106,7 +105,7 @@ def test_provided_by_subclass(self):\n         class MyItem(Item):\n             pass\n \n-        class FauxDataManager(object):\n+        class FauxDataManager:\n             def setstate(self, obj):\n                 pass\n \n@@ -211,7 +210,7 @@ class IMarkerCustom(Interface):\n             pass\n \n         # Fake data manager\n-        class FauxDataManager(object):\n+        class FauxDataManager:\n             def setstate(self, obj):\n                 pass\n \n@@ -304,7 +303,7 @@ class MyItem(Item):\n             pass\n \n         # Fake data manager\n-        class FauxDataManager(object):\n+        class FauxDataManager:\n             def setstate(self, obj):\n                 pass\n \n@@ -461,7 +460,7 @@ def test_getattr_consults_schema_item_default_factory_with_context(self):\n \n         @provider(IContextAwareDefaultFactory)\n         def defaultFactory(context):\n-            return "{0:s}_{1:s}".format(context.id, context.portal_type)\n+            return f"{context.id:s}_{context.portal_type:s}"\n \n         class ISchema(Interface):\n             foo = zope.schema.TextLine(title="foo", defaultFactory=defaultFactory)\n@@ -561,15 +560,7 @@ def test_name_and_id_in_sync(self):\n     def test_name_unicode_id_str(self):\n \n         i = Item()\n-        if six.PY2:\n-            try:\n-                i.__name__ = b"\\xc3\\xb8".decode("utf-8")\n-            except UnicodeEncodeError:\n-                pass\n-            else:\n-                self.fail()\n-        else:\n-            i.__name__ = b"\\xc3\\xb8".decode("utf-8")\n+        i.__name__ = b"\\xc3\\xb8".decode("utf-8")\n \n         i.__name__ = "o"\n \n@@ -577,7 +568,7 @@ def test_name_unicode_id_str(self):\n         self.assertEqual("o", i.id)\n         self.assertEqual("o", i.getId())\n \n-        self.assertTrue(isinstance(i.__name__, six.text_type))\n+        self.assertTrue(isinstance(i.__name__, str))\n         self.assertTrue(isinstance(i.id, str))\n         self.assertTrue(isinstance(i.getId(), str))\n \n@@ -747,7 +738,7 @@ def test_item_Type(self):\n         i = Item()\n \n         def mock_getTypeInfo():\n-            class TypeInfo(object):\n+            class TypeInfo:\n                 def Title(self):\n                     return "Foo"\n \n@@ -892,7 +883,7 @@ def test_field_default_independence(self):\n         # Ensure that fields using the default value aren\'t being assigned\n         # shallow copies.\n \n-        class FauxDataManager(object):\n+        class FauxDataManager:\n             def setstate(self, obj):\n                 pass\n \n@@ -961,7 +952,7 @@ def test_container_manage_delObjects(self):\n         item.__class__.__ac_permissions__ = perms_before\n \n     def test_iconstraintypes_adapter(self):\n-        class DummyConstrainTypes(object):\n+        class DummyConstrainTypes:\n             def __init__(self, context):\n                 self.context = context\n \ndiff --git a/plone/dexterity/tests/test_content_integration.py b/plone/dexterity/tests/test_content_integration.py\nindex 9291798..b095769 100644\n--- a/plone/dexterity/tests/test_content_integration.py\n+++ b/plone/dexterity/tests/test_content_integration.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.testing.zca import UNIT_TESTING\n \n import unittest\ndiff --git a/plone/dexterity/tests/test_exportimport.py b/plone/dexterity/tests/test_exportimport.py\nindex 97cd983..78f6fbe 100644\n--- a/plone/dexterity/tests/test_exportimport.py\n+++ b/plone/dexterity/tests/test_exportimport.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n import unittest\n \n \ndiff --git a/plone/dexterity/tests/test_factory.py b/plone/dexterity/tests/test_factory.py\nindex ee9bd17..137520e 100644\n--- a/plone/dexterity/tests/test_factory.py\n+++ b/plone/dexterity/tests/test_factory.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.dexterity.factory import DexterityFactory\n from plone.dexterity.fti import DexterityFTI\n@@ -9,7 +8,7 @@\n try:\n     from unittest.mock import Mock\n except ImportError:\n-    from mock import Mock\n+    from unittest.mock import Mock\n \n \n class IDummy(Interface):\ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex 1810b8b..92fcc90 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.dexterity.factory import DexterityFactory\n from plone.dexterity.fti import DexterityFTI\n@@ -35,14 +34,14 @@\n try:\n     from unittest.mock import Mock\n except ImportError:\n-    from mock import Mock\n+    from unittest.mock import Mock\n \n \n-class TestClass(object):\n+class TestClass:\n     meta_type = "Test Class"\n \n \n-class TestClass2(object):\n+class TestClass2:\n     meta_type = "Test Class 2"\n \n \ndiff --git a/plone/dexterity/tests/test_primary.py b/plone/dexterity/tests/test_primary.py\nindex e3e831c..ec1dceb 100644\n--- a/plone/dexterity/tests/test_primary.py\n+++ b/plone/dexterity/tests/test_primary.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.dexterity.content import Item\n from plone.dexterity.fti import DexterityFTI\n@@ -13,7 +12,7 @@\n try:\n     from unittest.mock import Mock\n except ImportError:\n-    from mock import Mock\n+    from unittest.mock import Mock\n \n \n class PrimaryFieldInfoTestCase(MockTestCase):\ndiff --git a/plone/dexterity/tests/test_schema.py b/plone/dexterity/tests/test_schema.py\nindex a4a9b60..6aec347 100644\n--- a/plone/dexterity/tests/test_schema.py\n+++ b/plone/dexterity/tests/test_schema.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.dexterity import schema\n from plone.dexterity.fti import DexterityFTI\n@@ -18,7 +17,7 @@\n try:\n     from unittest.mock import Mock\n except ImportError:\n-    from mock import Mock\n+    from unittest.mock import Mock\n \n \n class TestSchemaModuleFactory(MockTestCase):\ndiff --git a/plone/dexterity/tests/test_schema_cache.py b/plone/dexterity/tests/test_schema_cache.py\nindex 286482a..def78a9 100644\n--- a/plone/dexterity/tests/test_schema_cache.py\n+++ b/plone/dexterity/tests/test_schema_cache.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n@@ -11,12 +10,12 @@\n try:\n     from unittest.mock import Mock\n except ImportError:\n-    from mock import Mock\n+    from unittest.mock import Mock\n \n try:\n     from unittest.mock import patch\n except ImportError:\n-    from mock import patch\n+    from unittest.mock import patch\n \n \n class TestSchemaCache(MockTestCase):\ndiff --git a/plone/dexterity/tests/test_security.py b/plone/dexterity/tests/test_security.py\nindex 5c468d3..b6a5a84 100644\n--- a/plone/dexterity/tests/test_security.py\n+++ b/plone/dexterity/tests/test_security.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.autoform.interfaces import READ_PERMISSIONS_KEY\n from plone.dexterity.content import Container\n@@ -19,7 +18,7 @@\n try:\n     from unittest.mock import Mock\n except ImportError:\n-    from mock import Mock\n+    from unittest.mock import Mock\n \n \n class TestAttributeProtection(MockTestCase):\ndiff --git a/plone/dexterity/tests/test_synchronize.py b/plone/dexterity/tests/test_synchronize.py\nindex 48f946b..aa3db2d 100644\n--- a/plone/dexterity/tests/test_synchronize.py\n+++ b/plone/dexterity/tests/test_synchronize.py\n@@ -4,7 +4,7 @@\n import unittest\n \n \n-class StupidStack(object):\n+class StupidStack:\n \n     _elements = []  # not thread safe\n     _lock = Lock()\ndiff --git a/plone/dexterity/tests/test_utils.py b/plone/dexterity/tests/test_utils.py\nindex 0b6ff3c..da0469f 100644\n--- a/plone/dexterity/tests/test_utils.py\n+++ b/plone/dexterity/tests/test_utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.dexterity import utils\n from plone.dexterity.fti import DexterityFTI\n@@ -7,7 +6,7 @@\n try:\n     from unittest.mock import Mock\n except ImportError:\n-    from mock import Mock\n+    from unittest.mock import Mock\n \n \n class TestUtils(MockTestCase):\ndiff --git a/plone/dexterity/tests/test_views.py b/plone/dexterity/tests/test_views.py\nindex b6373a5..d3063de 100644\n--- a/plone/dexterity/tests/test_views.py\n+++ b/plone/dexterity/tests/test_views.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from AccessControl import Unauthorized\n from plone.autoform.interfaces import IFormFieldProvider\n@@ -43,7 +42,7 @@\n try:\n     from unittest.mock import Mock\n except ImportError:\n-    from mock import Mock\n+    from unittest.mock import Mock\n \n \n class TestRequest(TestRequestBase):\n@@ -76,7 +75,7 @@ class IBehaviorThree(Interface):\n \n @implementer(IBehaviorAssignable)\n @adapter(Interface)\n-class NoBehaviorAssignable(object):\n+class NoBehaviorAssignable:\n     # We will use this simple class to check that registering our own\n     # IBehaviorAssignable adapter has an effect.\n \n@@ -168,7 +167,7 @@ def test_add(self):\n \n         # Name chooser\n         @implementer(INameChooser)\n-        class NameChooser(object):\n+        class NameChooser:\n             def __init__(self, context):\n                 pass\n \n@@ -252,7 +251,7 @@ def test_label(self):\n         addform.portal_type = "testtype"\n \n         label = addform.label\n-        self.assertEqual("Add ${name}", six.text_type(label))\n+        self.assertEqual("Add ${name}", str(label))\n         self.assertEqual("Test title", label.mapping["name"])\n \n     def test_schema_lookup_add(self):\n@@ -403,7 +402,7 @@ def test_fires_add_cancelled_event(self):\n \n         # mock status message\n         @implementer(IStatusMessage)\n-        class StatusMessage(object):\n+        class StatusMessage:\n             def __init__(self, request):\n                 pass\n \n@@ -451,7 +450,7 @@ def test_label(self):\n         editview.portal_type = "testtype"\n \n         label = editview.label\n-        self.assertEqual("Edit ${name}", six.text_type(label))\n+        self.assertEqual("Edit ${name}", str(label))\n         self.assertEqual("Test title", label.mapping["name"])\n \n     def test_schema_lookup_edit(self):\n@@ -552,7 +551,7 @@ def test_fires_edit_cancelled_event(self):\n \n         # mock status message\n         @implementer(IStatusMessage)\n-        class StatusMessage(object):\n+        class StatusMessage:\n             def __init__(self, request):\n                 pass\n \n@@ -582,7 +581,7 @@ def test_fires_edit_finished_event(self):\n \n         # mock status message\n         @implementer(IStatusMessage)\n-        class StatusMessage(object):\n+        class StatusMessage:\n             def __init__(self, request):\n                 pass\n \ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex fd6a9ef..0e6609b 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity.bbb import HAS_WEBDAV\n from .case import MockTestCase\n \n@@ -51,13 +50,9 @@\n     try:\n         from unittest.mock import Mock\n     except ImportError:\n-        from mock import Mock\n+        from unittest.mock import Mock\n \n-    if six.PY2:\n-        # cope with upstream library changes in rendering the XML prolog\n-        XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8"?>\'\n-    else:\n-        XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8" ?>\'\n+    XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8" ?>\'\n \n     @provider(IFormFieldProvider)\n     class ITestBehavior(Interface):\n@@ -78,7 +73,7 @@ def test_get_size_no_adapter(self):\n             self.assertEqual(0, item.get_size())\n \n         def test_get_size_wrong_adapter(self):\n-            class SizedAdapter(object):\n+            class SizedAdapter:\n                 def __init__(self, context):\n                     self.context = context\n \n@@ -94,7 +89,7 @@ def sizeForDisplay(self):\n             self.assertEqual(0, item.get_size())\n \n         def test_get_size_right_adapter(self):\n-            class SizedAdapter(object):\n+            class SizedAdapter:\n                 def __init__(self, context):\n                     self.context = context\n \n@@ -116,7 +111,7 @@ def test_content_type_no_adapter(self):\n             self.assertEqual(None, item.Format())\n \n         def test_content_type_simple_adapter(self):\n-            class ReadFileAdapter(object):\n+            class ReadFileAdapter:\n                 def __init__(self, context):\n                     self.context = context\n \n@@ -135,7 +130,7 @@ def test_get_no_adapter(self):\n             self.assertEqual("", item.manage_DAVget())\n \n         def test_get_simple_adapter(self):\n-            class ReadFileAdapter(object):\n+            class ReadFileAdapter:\n                 def __init__(self, context):\n                     self.context = context\n \n@@ -162,7 +157,7 @@ def read(self, size=None):\n             self.assertEqual("10", request.response.getHeader("Content-Length"))\n \n         def test_get_minimal_adapter(self):\n-            class ReadFileAdapter(object):\n+            class ReadFileAdapter:\n                 def __init__(self, context):\n                     self.context = context\n \n@@ -188,7 +183,7 @@ def read(self, size=None):\n \n         def test_get_streaming(self):\n             @implementer(IStreamIterator)\n-            class ReadFileAdapter(object):\n+            class ReadFileAdapter:\n                 def __init__(self, context):\n                     self.context = context\n \n@@ -232,7 +227,7 @@ def test_put_no_body(self):\n             self.assertRaises(MethodNotAllowed, item.PUT)\n \n         def test_put_no_content_type_header(self):\n-            class WriteFile(object):\n+            class WriteFile:\n                 def __init__(self, context):\n                     self.context = context\n                     self._written = ""\n@@ -266,7 +261,7 @@ def factory(context):\n             self.assertEqual(True, adapterInstance._closed)\n \n         def test_put_with_content_type_header_no_charset(self):\n-            class WriteFile(object):\n+            class WriteFile:\n                 def __init__(self, context):\n                     self.context = context\n                     self._written = ""\n@@ -309,7 +304,7 @@ def handler(event):\n             self.assertEqual(1, len(events))\n \n         def test_put_with_content_type_header_and_charset(self):\n-            class WriteFile(object):\n+            class WriteFile:\n                 def __init__(self, context):\n                     self.context = context\n                     self._written = ""\n@@ -361,7 +356,7 @@ def test_mkcol_no_adapter(self):\n         def test_mkcol_simple_adapter(self):\n             created = []\n \n-            class DirectoryFactory(object):\n+            class DirectoryFactory:\n                 def __init__(self, context):\n                     self.context = context\n \n@@ -381,7 +376,7 @@ def test_put_factory_no_adapter(self):\n         def test_put_factory_simple_adapter(self):\n             instance = object()\n \n-            class FileFactory(object):\n+            class FileFactory:\n                 def __init__(self, context):\n                     self.context = context\n \n@@ -1017,11 +1012,11 @@ class ITestAdditional(Interface):\n             alsoProvides(ITestAdditional["stuff"], IPrimaryField)\n             alsoProvides(ITestAdditional, IFormFieldProvider)\n \n-            class MockBehavior(object):\n+            class MockBehavior:\n                 def __init__(self, iface):\n                     self.interface = iface\n \n-            class MockBehaviorAssignable(object):\n+            class MockBehaviorAssignable:\n                 def __init__(self, context):\n                     self.context = context\n \ndiff --git a/plone/dexterity/utils.py b/plone/dexterity/utils.py\nindex 745a394..e9a76e6 100644\n--- a/plone/dexterity/utils.py\n+++ b/plone/dexterity/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n from Acquisition import aq_inner\n@@ -55,8 +54,7 @@ def iterSchemataForType(portal_type):\n     main_schema = SCHEMA_CACHE.get(portal_type)\n     if main_schema:\n         yield main_schema\n-    for schema in getAdditionalSchemata(portal_type=portal_type):\n-        yield schema\n+    yield from getAdditionalSchemata(portal_type=portal_type)\n \n \n def iterSchemata(context):\n@@ -66,8 +64,7 @@ def iterSchemata(context):\n     main_schema = SCHEMA_CACHE.get(context.portal_type)\n     if main_schema:\n         yield main_schema\n-    for schema in getAdditionalSchemata(context=context):\n-        yield schema\n+    yield from getAdditionalSchemata(context=context)\n \n \n def getAdditionalSchemata(context=None, portal_type=None):\n@@ -189,13 +186,13 @@ def createContentInContainer(container, portal_type, checkConstraints=True, **kw\n \n \n def safe_utf8(st):\n-    if isinstance(st, six.text_type):\n+    if isinstance(st, str):\n         st = st.encode("utf8")\n     return st\n \n \n def safe_unicode(st):\n-    if isinstance(st, six.binary_type):\n+    if isinstance(st, bytes):\n         st = st.decode("utf8")\n     return st\n \ndiff --git a/setup.py b/setup.py\nindex cb6e82f..1e8b084 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-07-01T13:19:13+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/8bda96d957ed0958b98aba24a47b7c89067f1397

make format

Files changed:
M plone/dexterity/browser/traversal.py
M plone/dexterity/content.py
M plone/dexterity/tests/test_webdav.py

b"diff --git a/plone/dexterity/browser/traversal.py b/plone/dexterity/browser/traversal.py\nindex 02c70b1..a0123e1 100644\n--- a/plone/dexterity/browser/traversal.py\n+++ b/plone/dexterity/browser/traversal.py\n@@ -47,9 +47,7 @@ def publishTraverse(self, request, name):\n         ):\n             return FolderDataResource(DAV_FOLDER_DATA_ID, context).__of__(context)\n \n-        defaultTraversal = super().publishTraverse(\n-            request, name\n-        )\n+        defaultTraversal = super().publishTraverse(request, name)\n \n         # If this is a WebDAV PUT/PROPFIND/PROPPATCH request, don't acquire\n         # things. If we did, we couldn't create a new object with PUT, for\ndiff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex be4d7fb..9faa4f7 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -826,9 +826,7 @@ def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):\n                     % type_name\n                 )\n \n-        return super().invokeFactory(\n-            type_name, id, RESPONSE, *args, **kw\n-        )\n+        return super().invokeFactory(type_name, id, RESPONSE, *args, **kw)\n \n \n def reindexOnModify(content, event):\ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex 0e6609b..8f3eb27 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -1,5 +1,5 @@\n-from plone.dexterity.bbb import HAS_WEBDAV\n from .case import MockTestCase\n+from plone.dexterity.bbb import HAS_WEBDAV\n \n \n if HAS_WEBDAV:\n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-07-01T13:31:05+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/271e73e0685e0f799cbd8a74dc613f584d395aaf

Removed six and mock.

Files changed:
M plone/dexterity/content.py
M plone/dexterity/exportimport.py
M plone/dexterity/filerepresentation.py
M plone/dexterity/fti.py
M plone/dexterity/schema.py
M plone/dexterity/tests/case.py
M plone/dexterity/tests/test_content.py
M plone/dexterity/tests/test_factory.py
M plone/dexterity/tests/test_fti.py
M plone/dexterity/tests/test_primary.py
M plone/dexterity/tests/test_schema.py
M plone/dexterity/tests/test_schema_cache.py
M plone/dexterity/tests/test_security.py
M plone/dexterity/tests/test_utils.py
M plone/dexterity/tests/test_views.py
M plone/dexterity/tests/test_webdav.py
M plone/dexterity/utils.py
M setup.py

b'diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 9faa4f7..d4b3ffd 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -21,7 +21,6 @@\n from plone.dexterity.utils import datify\n from plone.dexterity.utils import iterSchemata\n from plone.dexterity.utils import safe_unicode\n-from plone.dexterity.utils import safe_utf8\n from plone.folder.ordered import CMFOrderedBTreeFolderBase\n from plone.uuid.interfaces import IAttributeUUID\n from plone.uuid.interfaces import IUUID\n@@ -49,7 +48,6 @@\n from zope.schema.interfaces import IContextAwareDefaultFactory\n from zope.security.interfaces import IPermission\n \n-import six\n import threading\n \n \n@@ -410,13 +408,9 @@ def __getattr__(self, name):\n     # that can\'t be encoded to ASCII will throw a UnicodeEncodeError\n \n     def _get__name__(self):\n-        if six.PY2:\n-            return safe_unicode(self.id)\n         return self.id\n \n     def _set__name__(self, value):\n-        if six.PY2 and isinstance(value, str):\n-            value = str(value)  # may throw, but id must be ASCII in py2\n         self.id = value\n \n     __name__ = property(_get__name__, _set__name__)\n@@ -461,9 +455,6 @@ def setModificationDate(self, modification_date=None):\n \n     @security.protected(permissions.View)\n     def Title(self):\n-        # this is a CMF accessor, so should return utf8-encoded\n-        if six.PY2 and isinstance(self.title, str):\n-            return self.title.encode("utf-8")\n         return self.title or ""\n \n     @security.protected(permissions.View)\n@@ -476,10 +467,6 @@ def Description(self):\n         # Remember: \\r\\n - Windows, \\r - OS X, \\n - Linux/Unix\n         value = value.replace("\\r\\n", " ").replace("\\r", " ").replace("\\n", " ")  # noqa\n \n-        # this is a CMF accessor, so should return utf8-encoded\n-        if six.PY2 and isinstance(value, str):\n-            value = value.encode("utf-8")\n-\n         return value\n \n     @security.protected(permissions.View)\n@@ -494,8 +481,6 @@ def listCreators(self):\n         # List Dublin Core Creator elements - resource authors.\n         if self.creators is None:\n             return ()\n-        if six.PY2:\n-            return tuple(safe_utf8(c) for c in self.creators)\n         return self.creators\n \n     @security.protected(permissions.View)\n@@ -509,8 +494,6 @@ def Subject(self):\n         # Dublin Core Subject element - resource keywords.\n         if self.subject is None:\n             return ()\n-        if six.PY2:\n-            return tuple(safe_utf8(s) for s in self.subject)\n         return tuple(self.subject)\n \n     @security.protected(permissions.View)\n@@ -521,8 +504,6 @@ def Publisher(self):\n     @security.protected(permissions.View)\n     def listContributors(self):\n         # Dublin Core Contributor elements - resource collaborators.\n-        if six.PY2:\n-            return tuple(safe_utf8(c) for c in self.contributors)\n         return tuple(self.contributors)\n \n     @security.protected(permissions.View)\n@@ -594,8 +575,6 @@ def Language(self):\n     @security.protected(permissions.View)\n     def Rights(self):\n         # Dublin Core Rights element - resource copyright.\n-        if six.PY2:\n-            return safe_utf8(self.rights)\n         return self.rights\n \n     # ICatalogableDublinCore\ndiff --git a/plone/dexterity/exportimport.py b/plone/dexterity/exportimport.py\nindex 8911b8c..70ccdfb 100644\n--- a/plone/dexterity/exportimport.py\n+++ b/plone/dexterity/exportimport.py\n@@ -1,5 +1,7 @@\n from csv import reader\n from csv import writer\n+from io import BytesIO\n+from io import StringIO\n from Products.GenericSetup.content import _globtest\n from Products.GenericSetup.content import FauxDAVRequest\n from Products.GenericSetup.content import FauxDAVResponse\n@@ -8,13 +10,9 @@\n from Products.GenericSetup.interfaces import IFilesystemExporter\n from Products.GenericSetup.interfaces import IFilesystemImporter\n from Products.GenericSetup.utils import _getDottedName\n-from six import BytesIO\n-from six import StringIO\n from zope.component import queryAdapter\n from zope.interface import implementer\n \n-import six\n-\n \n @implementer(IFilesystemExporter, IFilesystemImporter)\n class DexterityContentExporterImporter(FolderishExporterImporter):\n@@ -105,7 +103,7 @@ def import_(self, import_context, subdir, root=False):\n             preserve = []\n         else:\n             # Make sure ``preserve`` is a native string\n-            if six.PY3 and not isinstance(preserve, str):\n+            if not isinstance(preserve, str):\n                 preserve = preserve.decode("utf-8")\n             preserve = _globtest(preserve, prior)\n \n@@ -120,7 +118,7 @@ def import_(self, import_context, subdir, root=False):\n             return\n \n         dialect = "excel"\n-        if six.PY3 and not isinstance(objects, str):\n+        if not isinstance(objects, str):\n             objects = objects.decode("utf-8")\n         stream = StringIO(objects)\n \ndiff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex 3ea6075..d8418f8 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -32,7 +32,6 @@\n from zope.size.interfaces import ISized\n from ZPublisher.Iterators import IStreamIterator\n \n-import six\n import tempfile\n \n \ndiff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex ace851b..f4ec43b 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -26,24 +26,10 @@\n import logging\n import os.path\n import plone.dexterity.schema\n-import six\n \n \n def get_suffix(fti):\n     mtime = getattr(fti, "_p_mtime", None)\n-    # Python 2 rounds floats when we use the str function on them.\n-\n-    # Python 2:\n-    # >>> str(1637689348.9999528)\n-    # \'1637689349.0\'\n-\n-    # Python 3:\n-    # >>> str(1637689348.9999528)\n-    # \'1637689348.9999528\'\n-\n-    # This was causing the schema names in Python 2 to take an unexpected format,\n-    # causing errors.\n-    # So, we need to use the repr function, which doesn\'t round floats.\n     if mtime:\n         return repr(mtime)\n     return ""\n@@ -215,20 +201,12 @@ def __init__(self, *args, **kwargs):\n     def Title(self):\n         if self.title and self.i18n_domain:\n             return Message(self.title, self.i18n_domain)\n-        else:\n-            if six.PY2:\n-                if self.title:\n-                    return self.title.decode("utf8")\n-                return self.getId()\n-            return self.title or self.getId()\n+        return self.title or self.getId()\n \n     def Description(self):\n         if self.description and self.i18n_domain:\n             return Message(self.description, self.i18n_domain)\n-        else:\n-            if six.PY2 and self.description:\n-                return self.description.decode("utf8")\n-            return self.description\n+        return self.description\n \n     def Metatype(self):\n         if self.content_meta_type:\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex f3747c5..41a7468 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -23,7 +23,6 @@\n \n import functools\n import logging\n-import six\n import types\n import warnings\n \ndiff --git a/plone/dexterity/tests/case.py b/plone/dexterity/tests/case.py\nindex bb8c503..f4d026c 100644\n--- a/plone/dexterity/tests/case.py\n+++ b/plone/dexterity/tests/case.py\n@@ -1,17 +1,12 @@\n+from unittest.mock import Mock\n+\n import gc\n-import six\n import unittest\n import zope.component\n import zope.component.testing\n import zope.globalrequest\n \n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from unittest.mock import Mock\n-\n-\n class MockTestCase(unittest.TestCase):\n     """Base class for tests using mocks."""\n \ndiff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex c385718..3af3490 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -18,6 +18,8 @@\n from Products.CMFCore.interfaces import ITypesTool\n from Products.CMFPlone.interfaces import IConstrainTypes\n from pytz import timezone\n+from unittest.mock import Mock\n+from unittest.mock import patch\n from zope.annotation.attribute import AttributeAnnotations\n from zope.component import getUtility\n from zope.component import provideAdapter\n@@ -26,21 +28,9 @@\n from zope.interface import Interface\n from zope.publisher.browser import TestRequest\n \n-import six\n import zope.schema\n \n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from unittest.mock import Mock\n-\n-try:\n-    from unittest.mock import patch\n-except ImportError:\n-    from unittest.mock import patch\n-\n-\n class TestContent(MockTestCase):\n     def setUp(self):\n         setRequest(TestRequest())\ndiff --git a/plone/dexterity/tests/test_factory.py b/plone/dexterity/tests/test_factory.py\nindex 137520e..2db96df 100644\n--- a/plone/dexterity/tests/test_factory.py\n+++ b/plone/dexterity/tests/test_factory.py\n@@ -2,15 +2,10 @@\n from plone.dexterity.factory import DexterityFactory\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n+from unittest.mock import Mock\n from zope.interface import Interface\n \n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from unittest.mock import Mock\n-\n-\n class IDummy(Interface):\n     pass\n \ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex 92fcc90..dffa9e2 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -12,6 +12,7 @@\n from plone.dexterity.tests.schemata import ITestSchema\n from plone.supermodel.model import Model\n from Products.CMFCore.interfaces import ISiteRoot\n+from unittest.mock import Mock\n from zope.component import getGlobalSiteManager\n from zope.component import queryUtility\n from zope.component.hooks import setHooks\n@@ -31,12 +32,6 @@\n import zope.schema\n \n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from unittest.mock import Mock\n-\n-\n class TestClass:\n     meta_type = "Test Class"\n \ndiff --git a/plone/dexterity/tests/test_primary.py b/plone/dexterity/tests/test_primary.py\nindex ec1dceb..b3c10b1 100644\n--- a/plone/dexterity/tests/test_primary.py\n+++ b/plone/dexterity/tests/test_primary.py\n@@ -4,17 +4,12 @@\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.primary import PrimaryFieldInfo\n from plone.rfc822.interfaces import IPrimaryField\n+from unittest.mock import Mock\n from zope import schema\n from zope.interface import alsoProvides\n from zope.interface import Interface\n \n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from unittest.mock import Mock\n-\n-\n class PrimaryFieldInfoTestCase(MockTestCase):\n     def test_primary_field_info(self):\n         class ITest(Interface):\ndiff --git a/plone/dexterity/tests/test_schema.py b/plone/dexterity/tests/test_schema.py\nindex 6aec347..c0c6cb0 100644\n--- a/plone/dexterity/tests/test_schema.py\n+++ b/plone/dexterity/tests/test_schema.py\n@@ -8,18 +8,13 @@\n from plone.dexterity.schema import SCHEMA_CACHE\n from plone.supermodel.model import Model\n from Products.CMFCore.interfaces import ISiteRoot\n+from unittest.mock import Mock\n from zope.interface import Interface\n from zope.interface.interface import InterfaceClass\n \n import zope.schema\n \n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from unittest.mock import Mock\n-\n-\n class TestSchemaModuleFactory(MockTestCase):\n     def test_transient_schema(self):\n \ndiff --git a/plone/dexterity/tests/test_schema_cache.py b/plone/dexterity/tests/test_schema_cache.py\nindex def78a9..e466300 100644\n--- a/plone/dexterity/tests/test_schema_cache.py\n+++ b/plone/dexterity/tests/test_schema_cache.py\n@@ -2,22 +2,13 @@\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import SCHEMA_CACHE\n+from unittest.mock import Mock\n+from unittest.mock import patch\n from zope.globalrequest import setRequest\n from zope.interface import Interface\n from zope.publisher.browser import TestRequest\n \n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from unittest.mock import Mock\n-\n-try:\n-    from unittest.mock import patch\n-except ImportError:\n-    from unittest.mock import patch\n-\n-\n class TestSchemaCache(MockTestCase):\n     def setUp(self):\n         setRequest(TestRequest())\ndiff --git a/plone/dexterity/tests/test_security.py b/plone/dexterity/tests/test_security.py\nindex b6a5a84..6068921 100644\n--- a/plone/dexterity/tests/test_security.py\n+++ b/plone/dexterity/tests/test_security.py\n@@ -5,6 +5,7 @@\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import SCHEMA_CACHE\n+from unittest.mock import Mock\n from zope.globalrequest import setRequest\n from zope.interface import Interface\n from zope.interface import provider\n@@ -15,12 +16,6 @@\n import zope.schema\n \n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from unittest.mock import Mock\n-\n-\n class TestAttributeProtection(MockTestCase):\n     def setUp(self):\n         setRequest(TestRequest())\ndiff --git a/plone/dexterity/tests/test_utils.py b/plone/dexterity/tests/test_utils.py\nindex da0469f..d7904c1 100644\n--- a/plone/dexterity/tests/test_utils.py\n+++ b/plone/dexterity/tests/test_utils.py\n@@ -1,12 +1,7 @@\n from .case import MockTestCase\n from plone.dexterity import utils\n from plone.dexterity.fti import DexterityFTI\n-\n-\n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from unittest.mock import Mock\n+from unittest.mock import Mock\n \n \n class TestUtils(MockTestCase):\ndiff --git a/plone/dexterity/tests/test_views.py b/plone/dexterity/tests/test_views.py\nindex d3063de..441a92d 100644\n--- a/plone/dexterity/tests/test_views.py\n+++ b/plone/dexterity/tests/test_views.py\n@@ -20,6 +20,7 @@\n from plone.z3cform.interfaces import IDeferSecurityCheck\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.statusmessages.interfaces import IStatusMessage\n+from unittest.mock import Mock\n from z3c.form.action import Actions\n from z3c.form.datamanager import AttributeField\n from z3c.form.field import Fields\n@@ -36,14 +37,6 @@\n from zope.interface import provider\n from zope.publisher.browser import TestRequest as TestRequestBase\n \n-import six\n-\n-\n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from unittest.mock import Mock\n-\n \n class TestRequest(TestRequestBase):\n     """Zope 3\'s TestRequest doesn\'t support item assignment, but Zope 2\'s\ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex 8f3eb27..514d135 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -6,6 +6,7 @@\n \n     from .case import ItemDummy\n     from email.message import Message\n+    from io import StringIO\n     from OFS.Folder import Folder\n     from OFS.SimpleItem import SimpleItem\n     from plone.autoform.interfaces import IFormFieldProvider\n@@ -23,7 +24,7 @@\n     from plone.dexterity.interfaces import IDexterityFTI\n     from plone.dexterity.schema import SCHEMA_CACHE\n     from plone.rfc822.interfaces import IPrimaryField\n-    from six import StringIO\n+    from unittest.mock import Mock\n     from webdav.NullResource import NullResource\n     from zExceptions import Forbidden\n     from zExceptions import MethodNotAllowed\n@@ -45,12 +46,6 @@\n     from ZPublisher.Iterators import IStreamIterator\n \n     import re\n-    import six\n-\n-    try:\n-        from unittest.mock import Mock\n-    except ImportError:\n-        from unittest.mock import Mock\n \n     XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8" ?>\'\n \ndiff --git a/plone/dexterity/utils.py b/plone/dexterity/utils.py\nindex e9a76e6..deba0fa 100644\n--- a/plone/dexterity/utils.py\n+++ b/plone/dexterity/utils.py\n@@ -23,7 +23,6 @@\n \n import datetime\n import logging\n-import six\n \n \n deprecation.deprecated("SchemaNameEncoder", "moved to plone.dexterity.schema")\ndiff --git a/setup.py b/setup.py\nindex 1e8b084..7903bfa 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -68,7 +68,6 @@ def read(filename):\n         "Products.CMFDynamicViewFTI",\n         "Products.statusmessages",\n         "setuptools",\n-        "six",\n         "zope.annotation",\n         "zope.browser",\n         "zope.component",\n@@ -85,10 +84,5 @@ def read(filename):\n         "zope.size",\n         "Zope",\n     ],\n-    extras_require={\n-        "test": ["plone.testing", "Products.CMFPlone", "mock;python_version<\'3\'"]\n-    },\n-    entry_points="""\n-    # -*- Entry points: -*-\n-    """,\n+    extras_require={"test": ["plone.testing", "Products.CMFPlone"]},\n )\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-07-01T13:50:01+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/1d04c30ac43f5de08f6b1be5dbb8b258c9086ee6

HAS_WEBDAV is always True in Zope 5.

Removed the conditional code.
Removed `bbb.py`, which was only used internally.

Files changed:
M plone/dexterity/browser/traversal.py
M plone/dexterity/filerepresentation.py
M plone/dexterity/tests/test_webdav.py
D plone/dexterity/bbb.py

b'diff --git a/plone/dexterity/bbb.py b/plone/dexterity/bbb.py\ndeleted file mode 100644\nindex e9983aa..0000000\n--- a/plone/dexterity/bbb.py\n+++ /dev/null\n@@ -1,32 +0,0 @@\n-import zope.deferredimport\n-\n-\n-zope.deferredimport.initialize()\n-\n-\n-HAS_WEBDAV = True\n-try:\n-    import webdav as _  # noqa: F401\n-except ImportError:\n-    HAS_WEBDAV = False\n-\n-\n-zope.deferredimport.deprecated(\n-    "Import HAS_WEBDAV instead.", HAS_ZSERVER="plone.dexterity:bbb.HAS_WEBDAV"\n-)\n-\n-\n-NullResource = None\n-\n-\n-class Resource:\n-    def dav__init(self, request, response):\n-        pass\n-\n-    def dav__validate(self, object, methodname, REQUEST):\n-        pass\n-\n-    def dav__simpleifhandler(\n-        self, request, response, method="PUT", col=0, url=None, refresh=0\n-    ):\n-        pass\ndiff --git a/plone/dexterity/browser/traversal.py b/plone/dexterity/browser/traversal.py\nindex a0123e1..fa8f1cd 100644\n--- a/plone/dexterity/browser/traversal.py\n+++ b/plone/dexterity/browser/traversal.py\n@@ -1,10 +1,10 @@\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from Acquisition.interfaces import IAcquirer\n-from plone.dexterity import bbb\n from plone.dexterity.filerepresentation import FolderDataResource\n from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n from plone.dexterity.interfaces import IDexterityContent\n+from webdav.NullResource import NullResource\n from zope.component import adapter\n from zope.publisher.interfaces.browser import IBrowserRequest\n \n@@ -14,11 +14,6 @@\n except ImportError:\n     from ZPublisher.BaseRequest import DefaultPublishTraverse\n \n-if bbb.HAS_WEBDAV:\n-    from webdav.NullResource import NullResource\n-else:\n-    NullResource = bbb.NullResource\n-\n \n @adapter(IDexterityContent, IBrowserRequest)\n class DexterityPublishTraverse(DefaultPublishTraverse):\ndiff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex d8418f8..046e71d 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -4,7 +4,6 @@\n from Acquisition import Implicit\n from email.message import Message\n from email.parser import BytesFeedParser\n-from plone.dexterity import bbb\n from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n from plone.dexterity.interfaces import IDexterityContainer\n from plone.dexterity.interfaces import IDexterityContent\n@@ -15,6 +14,7 @@\n from plone.rfc822.interfaces import IPrimaryField\n from Products.CMFCore import permissions\n from Products.CMFCore.utils import getToolByName\n+from webdav.Resource import Resource\n from zExceptions import MethodNotAllowed\n from zExceptions import Unauthorized\n from zope.component import adapter\n@@ -35,12 +35,6 @@\n import tempfile\n \n \n-if bbb.HAS_WEBDAV:\n-    from webdav.Resource import Resource\n-else:\n-    Resource = bbb.Resource\n-\n-\n class DAVResourceMixin:\n     """Mixin class for WebDAV resource support.\n \ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex 514d135..1e3fb4b 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -1,511 +1,501 @@\n+from .case import ItemDummy\n from .case import MockTestCase\n-from plone.dexterity.bbb import HAS_WEBDAV\n-\n-\n-if HAS_WEBDAV:\n-\n-    from .case import ItemDummy\n-    from email.message import Message\n-    from io import StringIO\n-    from OFS.Folder import Folder\n-    from OFS.SimpleItem import SimpleItem\n-    from plone.autoform.interfaces import IFormFieldProvider\n-    from plone.behavior.interfaces import IBehaviorAssignable\n-    from plone.dexterity.browser.traversal import DexterityPublishTraverse\n-    from plone.dexterity.content import Container\n-    from plone.dexterity.content import Item\n-    from plone.dexterity.filerepresentation import DefaultDirectoryFactory\n-    from plone.dexterity.filerepresentation import DefaultFileFactory\n-    from plone.dexterity.filerepresentation import DefaultReadFile\n-    from plone.dexterity.filerepresentation import DefaultWriteFile\n-    from plone.dexterity.filerepresentation import FolderDataResource\n-    from plone.dexterity.fti import DexterityFTI\n-    from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n-    from plone.dexterity.interfaces import IDexterityFTI\n-    from plone.dexterity.schema import SCHEMA_CACHE\n-    from plone.rfc822.interfaces import IPrimaryField\n-    from unittest.mock import Mock\n-    from webdav.NullResource import NullResource\n-    from zExceptions import Forbidden\n-    from zExceptions import MethodNotAllowed\n-    from zExceptions import Unauthorized\n-    from zope import schema\n-    from zope.component.interfaces import IFactory\n-    from zope.filerepresentation.interfaces import IDirectoryFactory\n-    from zope.filerepresentation.interfaces import IFileFactory\n-    from zope.filerepresentation.interfaces import IRawReadFile\n-    from zope.filerepresentation.interfaces import IRawWriteFile\n-    from zope.interface import alsoProvides\n-    from zope.interface import implementer\n-    from zope.interface import Interface\n-    from zope.interface import provider\n-    from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n-    from zope.publisher.browser import TestRequest\n-    from zope.size.interfaces import ISized\n-    from ZPublisher.HTTPResponse import HTTPResponse\n-    from ZPublisher.Iterators import IStreamIterator\n+from email.message import Message\n+from io import StringIO\n+from OFS.Folder import Folder\n+from OFS.SimpleItem import SimpleItem\n+from plone.autoform.interfaces import IFormFieldProvider\n+from plone.behavior.interfaces import IBehaviorAssignable\n+from plone.dexterity.browser.traversal import DexterityPublishTraverse\n+from plone.dexterity.content import Container\n+from plone.dexterity.content import Item\n+from plone.dexterity.filerepresentation import DefaultDirectoryFactory\n+from plone.dexterity.filerepresentation import DefaultFileFactory\n+from plone.dexterity.filerepresentation import DefaultReadFile\n+from plone.dexterity.filerepresentation import DefaultWriteFile\n+from plone.dexterity.filerepresentation import FolderDataResource\n+from plone.dexterity.fti import DexterityFTI\n+from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n+from plone.dexterity.interfaces import IDexterityFTI\n+from plone.dexterity.schema import SCHEMA_CACHE\n+from plone.rfc822.interfaces import IPrimaryField\n+from unittest.mock import Mock\n+from webdav.NullResource import NullResource\n+from zExceptions import Forbidden\n+from zExceptions import MethodNotAllowed\n+from zExceptions import Unauthorized\n+from zope import schema\n+from zope.component.interfaces import IFactory\n+from zope.filerepresentation.interfaces import IDirectoryFactory\n+from zope.filerepresentation.interfaces import IFileFactory\n+from zope.filerepresentation.interfaces import IRawReadFile\n+from zope.filerepresentation.interfaces import IRawWriteFile\n+from zope.interface import alsoProvides\n+from zope.interface import implementer\n+from zope.interface import Interface\n+from zope.interface import provider\n+from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n+from zope.publisher.browser import TestRequest\n+from zope.size.interfaces import ISized\n+from ZPublisher.HTTPResponse import HTTPResponse\n+from ZPublisher.Iterators import IStreamIterator\n \n-    import re\n+import re\n \n-    XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8" ?>\'\n \n-    @provider(IFormFieldProvider)\n-    class ITestBehavior(Interface):\n-        foo = schema.Int()\n-        bar = schema.Bytes()\n+XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8" ?>\'\n \n-    class DAVTestRequest(TestRequest):\n \n-        get_header = TestRequest.getHeader\n+@provider(IFormFieldProvider)\n+class ITestBehavior(Interface):\n+    foo = schema.Int()\n+    bar = schema.Bytes()\n \n-        def _createResponse(self):\n-            return HTTPResponse()\n \n-    class TestWebZope2DAVAPI(MockTestCase):\n-        def test_get_size_no_adapter(self):\n-            item = Item("test")\n+class DAVTestRequest(TestRequest):\n \n-            self.assertEqual(0, item.get_size())\n+    get_header = TestRequest.getHeader\n \n-        def test_get_size_wrong_adapter(self):\n-            class SizedAdapter:\n-                def __init__(self, context):\n-                    self.context = context\n+    def _createResponse(self):\n+        return HTTPResponse()\n \n-                def sizeForSorting(self):\n-                    return "lines", 10\n \n-                def sizeForDisplay(self):\n-                    "10 lines"\n+class TestWebZope2DAVAPI(MockTestCase):\n+    def test_get_size_no_adapter(self):\n+        item = Item("test")\n \n-            self.mock_adapter(SizedAdapter, ISized, (Item,))\n-            item = Item("test")\n+        self.assertEqual(0, item.get_size())\n \n-            self.assertEqual(0, item.get_size())\n+    def test_get_size_wrong_adapter(self):\n+        class SizedAdapter:\n+            def __init__(self, context):\n+                self.context = context\n \n-        def test_get_size_right_adapter(self):\n-            class SizedAdapter:\n-                def __init__(self, context):\n-                    self.context = context\n+            def sizeForSorting(self):\n+                return "lines", 10\n \n-                def sizeForSorting(self):\n-                    return "bytes", 10\n+            def sizeForDisplay(self):\n+                "10 lines"\n \n-                def sizeForDisplay(self):\n-                    "10 bytes"\n+        self.mock_adapter(SizedAdapter, ISized, (Item,))\n+        item = Item("test")\n \n-            self.mock_adapter(SizedAdapter, ISized, (Item,))\n-            item = Item("test")\n+        self.assertEqual(0, item.get_size())\n \n-            self.assertEqual(10, item.get_size())\n+    def test_get_size_right_adapter(self):\n+        class SizedAdapter:\n+            def __init__(self, context):\n+                self.context = context\n \n-        def test_content_type_no_adapter(self):\n-            item = Item("test")\n+            def sizeForSorting(self):\n+                return "bytes", 10\n \n-            self.assertEqual(None, item.content_type())\n-            self.assertEqual(None, item.Format())\n+            def sizeForDisplay(self):\n+                "10 bytes"\n \n-        def test_content_type_simple_adapter(self):\n-            class ReadFileAdapter:\n-                def __init__(self, context):\n-                    self.context = context\n+        self.mock_adapter(SizedAdapter, ISized, (Item,))\n+        item = Item("test")\n \n-                mimeType = "text/foo"\n-                # others omitted\n+        self.assertEqual(10, item.get_size())\n \n-            self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n-            item = Item("test")\n+    def test_content_type_no_adapter(self):\n+        item = Item("test")\n \n-            self.assertEqual("text/foo", item.content_type())\n-            self.assertEqual("text/foo", item.Format())\n+        self.assertEqual(None, item.content_type())\n+        self.assertEqual(None, item.Format())\n \n-        def test_get_no_adapter(self):\n-            item = Item("test")\n+    def test_content_type_simple_adapter(self):\n+        class ReadFileAdapter:\n+            def __init__(self, context):\n+                self.context = context\n \n-            self.assertEqual("", item.manage_DAVget())\n+            mimeType = "text/foo"\n+            # others omitted\n \n-        def test_get_simple_adapter(self):\n-            class ReadFileAdapter:\n-                def __init__(self, context):\n-                    self.context = context\n+        self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n+        item = Item("test")\n \n-                mimeType = "text/foo"\n-                encoding = "latin1"\n+        self.assertEqual("text/foo", item.content_type())\n+        self.assertEqual("text/foo", item.Format())\n \n-                def size(self):\n-                    return 10\n+    def test_get_no_adapter(self):\n+        item = Item("test")\n \n-                def read(self, size=None):\n-                    return "1234567890"\n+        self.assertEqual("", item.manage_DAVget())\n \n-            self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n+    def test_get_simple_adapter(self):\n+        class ReadFileAdapter:\n+            def __init__(self, context):\n+                self.context = context\n \n-            request = DAVTestRequest()\n+            mimeType = "text/foo"\n+            encoding = "latin1"\n \n-            item = Item("item")\n-            item.REQUEST = request\n+            def size(self):\n+                return 10\n \n-            self.assertEqual("1234567890", item.manage_DAVget())\n-            self.assertEqual(\n-                \'text/foo; charset="latin1"\', request.response.getHeader("Content-Type")\n-            )\n-            self.assertEqual("10", request.response.getHeader("Content-Length"))\n+            def read(self, size=None):\n+                return "1234567890"\n \n-        def test_get_minimal_adapter(self):\n-            class ReadFileAdapter:\n-                def __init__(self, context):\n-                    self.context = context\n+        self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n \n-                mimeType = None\n-                encoding = None\n+        request = DAVTestRequest()\n \n-                def size(self):\n-                    return None\n+        item = Item("item")\n+        item.REQUEST = request\n \n-                def read(self, size=None):\n-                    return "1234567890"\n+        self.assertEqual("1234567890", item.manage_DAVget())\n+        self.assertEqual(\n+            \'text/foo; charset="latin1"\', request.response.getHeader("Content-Type")\n+        )\n+        self.assertEqual("10", request.response.getHeader("Content-Length"))\n \n-            self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n+    def test_get_minimal_adapter(self):\n+        class ReadFileAdapter:\n+            def __init__(self, context):\n+                self.context = context\n \n-            request = DAVTestRequest()\n+            mimeType = None\n+            encoding = None\n \n-            item = Item("item")\n-            item.REQUEST = request\n+            def size(self):\n+                return None\n \n-            self.assertEqual("1234567890", item.manage_DAVget())\n-            self.assertEqual(None, request.response.getHeader("Content-Type"))\n-            self.assertEqual(None, request.response.getHeader("Content-Length"))\n+            def read(self, size=None):\n+                return "1234567890"\n \n-        def test_get_streaming(self):\n-            @implementer(IStreamIterator)\n-            class ReadFileAdapter:\n-                def __init__(self, context):\n-                    self.context = context\n+        self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n \n-                mimeType = None\n-                encoding = None\n+        request = DAVTestRequest()\n \n-                def size(self):\n-                    return 10\n+        item = Item("item")\n+        item.REQUEST = request\n \n-                def read(self, size=None):\n-                    return "1234567890"\n+        self.assertEqual("1234567890", item.manage_DAVget())\n+        self.assertEqual(None, request.response.getHeader("Content-Type"))\n+        self.assertEqual(None, request.response.getHeader("Content-Length"))\n \n-            adapterInstance = ReadFileAdapter(None)\n+    def test_get_streaming(self):\n+        @implementer(IStreamIterator)\n+        class ReadFileAdapter:\n+            def __init__(self, context):\n+                self.context = context\n \n-            def factory(context):\n-                return adapterInstance\n+            mimeType = None\n+            encoding = None\n \n-            self.mock_adapter(factory, IRawReadFile, (Item,))\n+            def size(self):\n+                return 10\n \n-            request = DAVTestRequest()\n+            def read(self, size=None):\n+                return "1234567890"\n \n-            item = Item("item")\n-            item.REQUEST = request\n+        adapterInstance = ReadFileAdapter(None)\n \n-            self.assertEqual(adapterInstance, item.manage_DAVget())\n+        def factory(context):\n+            return adapterInstance\n \n-        def test_put_no_adapter(self):\n-            request = DAVTestRequest(environ={"BODYFILE": StringIO("")})\n+        self.mock_adapter(factory, IRawReadFile, (Item,))\n \n-            item = Item("item")\n-            item.REQUEST = request\n+        request = DAVTestRequest()\n \n-            self.assertRaises(MethodNotAllowed, item.PUT)\n+        item = Item("item")\n+        item.REQUEST = request\n \n-        def test_put_no_body(self):\n-            request = DAVTestRequest()\n+        self.assertEqual(adapterInstance, item.manage_DAVget())\n \n-            item = Item("item")\n-            item.REQUEST = request\n+    def test_put_no_adapter(self):\n+        request = DAVTestRequest(environ={"BODYFILE": StringIO("")})\n \n-            self.assertRaises(MethodNotAllowed, item.PUT)\n+        item = Item("item")\n+        item.REQUEST = request\n \n-        def test_put_no_content_type_header(self):\n-            class WriteFile:\n-                def __init__(self, context):\n-                    self.context = context\n-                    self._written = ""\n-                    self._closed = False\n+        self.assertRaises(MethodNotAllowed, item.PUT)\n \n-                mimeType = None\n-                encoding = None\n+    def test_put_no_body(self):\n+        request = DAVTestRequest()\n \n-                def write(self, data):\n-                    self._written += data\n+        item = Item("item")\n+        item.REQUEST = request\n \n-                def close(self):\n-                    self._closed = True\n+        self.assertRaises(MethodNotAllowed, item.PUT)\n \n-            adapterInstance = WriteFile(None)\n+    def test_put_no_content_type_header(self):\n+        class WriteFile:\n+            def __init__(self, context):\n+                self.context = context\n+                self._written = ""\n+                self._closed = False\n \n-            def factory(context):\n-                return adapterInstance\n+            mimeType = None\n+            encoding = None\n \n-            self.mock_adapter(factory, IRawWriteFile, (Item,))\n+            def write(self, data):\n+                self._written += data\n \n-            request = DAVTestRequest(environ={"BODYFILE": StringIO("data")})\n+            def close(self):\n+                self._closed = True\n \n-            item = Item("item")\n-            item.REQUEST = request\n+        adapterInstance = WriteFile(None)\n \n-            item.PUT()\n-            self.assertEqual(None, adapterInstance.mimeType)\n-            self.assertEqual(None, adapterInstance.encoding)\n-            self.assertEqual("data", adapterInstance._written)\n-            self.assertEqual(True, adapterInstance._closed)\n+        def factory(context):\n+            return adapterInstance\n \n-        def test_put_with_content_type_header_no_charset(self):\n-            class WriteFile:\n-                def __init__(self, context):\n-                    self.context = context\n-                    self._written = ""\n-                    self._closed = False\n+        self.mock_adapter(factory, IRawWriteFile, (Item,))\n \n-                mimeType = None\n-                encoding = None\n+        request = DAVTestRequest(environ={"BODYFILE": StringIO("data")})\n \n-                def write(self, data):\n-                    self._written += data\n+        item = Item("item")\n+        item.REQUEST = request\n \n-                def close(self):\n-                    self._closed = True\n+        item.PUT()\n+        self.assertEqual(None, adapterInstance.mimeType)\n+        self.assertEqual(None, adapterInstance.encoding)\n+        self.assertEqual("data", adapterInstance._written)\n+        self.assertEqual(True, adapterInstance._closed)\n \n-            adapterInstance = WriteFile(None)\n+    def test_put_with_content_type_header_no_charset(self):\n+        class WriteFile:\n+            def __init__(self, context):\n+                self.context = context\n+                self._written = ""\n+                self._closed = False\n \n-            def factory(context):\n-                return adapterInstance\n+            mimeType = None\n+            encoding = None\n \n-            events = []\n+            def write(self, data):\n+                self._written += data\n \n-            def handler(event):\n-                events.append(event)\n+            def close(self):\n+                self._closed = True\n \n-            self.mock_adapter(factory, IRawWriteFile, (Item,))\n-            self.mock_handler(handler, (IObjectModifiedEvent,))\n+        adapterInstance = WriteFile(None)\n \n-            request = DAVTestRequest(\n-                environ={"BODYFILE": StringIO("data"), "HTTP_CONTENT_TYPE": "text/foo"}\n-            )\n+        def factory(context):\n+            return adapterInstance\n \n-            item = Item("item")\n-            item.REQUEST = request\n+        events = []\n \n-            item.PUT()\n-            self.assertEqual("text/foo", adapterInstance.mimeType)\n-            self.assertEqual(None, adapterInstance.encoding)\n-            self.assertEqual("data", adapterInstance._written)\n-            self.assertEqual(True, adapterInstance._closed)\n-            self.assertEqual(1, len(events))\n+        def handler(event):\n+            events.append(event)\n \n-        def test_put_with_content_type_header_and_charset(self):\n-            class WriteFile:\n-                def __init__(self, context):\n-                    self.context = context\n-                    self._written = ""\n-                    self._closed = False\n+        self.mock_adapter(factory, IRawWriteFile, (Item,))\n+        self.mock_handler(handler, (IObjectModifiedEvent,))\n \n-                mimeType = None\n-                encoding = None\n+        request = DAVTestRequest(\n+            environ={"BODYFILE": StringIO("data"), "HTTP_CONTENT_TYPE": "text/foo"}\n+        )\n \n-                def write(self, data):\n-                    self._written += data\n+        item = Item("item")\n+        item.REQUEST = request\n \n-                def close(self):\n-                    self._closed = True\n+        item.PUT()\n+        self.assertEqual("text/foo", adapterInstance.mimeType)\n+        self.assertEqual(None, adapterInstance.encoding)\n+        self.assertEqual("data", adapterInstance._written)\n+        self.assertEqual(True, adapterInstance._closed)\n+        self.assertEqual(1, len(events))\n \n-            adapterInstance = WriteFile(None)\n+    def test_put_with_content_type_header_and_charset(self):\n+        class WriteFile:\n+            def __init__(self, context):\n+                self.context = context\n+                self._written = ""\n+                self._closed = False\n \n-            def factory(context):\n-                return adapterInstance\n+            mimeType = None\n+            encoding = None\n \n-            events = []\n+            def write(self, data):\n+                self._written += data\n \n-            def handler(event):\n-                events.append(event)\n+            def close(self):\n+                self._closed = True\n \n-            self.mock_adapter(factory, IRawWriteFile, (Item,))\n-            self.mock_handler(handler, (IObjectModifiedEvent,))\n+        adapterInstance = WriteFile(None)\n \n-            request = DAVTestRequest(\n-                environ={\n-                    "BODYFILE": StringIO("data"),\n-                    "HTTP_CONTENT_TYPE": \'text/foo; charset="latin1"\',\n-                }\n-            )\n+        def factory(context):\n+            return adapterInstance\n \n-            item = Item("item")\n-            item.REQUEST = request\n+        events = []\n \n-            item.PUT()\n-            self.assertEqual("text/foo", adapterInstance.mimeType)\n-            self.assertEqual("latin1", adapterInstance.encoding)\n-            self.assertEqual("data", adapterInstance._written)\n-            self.assertEqual(True, adapterInstance._closed)\n-            self.assertEqual(1, len(events))\n+        def handler(event):\n+            events.append(event)\n \n-        def test_mkcol_no_adapter(self):\n-            container = Container("container")\n-            self.assertRaises(MethodNotAllowed, container.MKCOL_handler, "test")\n+        self.mock_adapter(factory, IRawWriteFile, (Item,))\n+        self.mock_handler(handler, (IObjectModifiedEvent,))\n \n-        def test_mkcol_simple_adapter(self):\n-            created = []\n+        request = DAVTestRequest(\n+            environ={\n+                "BODYFILE": StringIO("data"),\n+                "HTTP_CONTENT_TYPE": \'text/foo; charset="latin1"\',\n+            }\n+        )\n \n-            class DirectoryFactory:\n-                def __init__(self, context):\n-                    self.context = context\n+        item = Item("item")\n+        item.REQUEST = request\n \n-                def __call__(self, id):\n-                    created.append(id)\n+        item.PUT()\n+        self.assertEqual("text/foo", adapterInstance.mimeType)\n+        self.assertEqual("latin1", adapterInstance.encoding)\n+        self.assertEqual("data", adapterInstance._written)\n+        self.assertEqual(True, adapterInstance._closed)\n+        self.assertEqual(1, len(events))\n \n-            self.mock_adapter(DirectoryFactory, IDirectoryFactory, (Container,))\n+    def test_mkcol_no_adapter(self):\n+        container = Container("container")\n+        self.assertRaises(MethodNotAllowed, container.MKCOL_handler, "test")\n \n-            container = Container("container")\n-            container.MKCOL_handler("test")\n-            self.assertEqual(["test"], created)\n+    def test_mkcol_simple_adapter(self):\n+        created = []\n \n-        def test_put_factory_no_adapter(self):\n-            container = Container("container")\n-            self.assertEqual(None, container.PUT_factory("test", "text/foo", "body"))\n+        class DirectoryFactory:\n+            def __init__(self, context):\n+                self.context = context\n \n-        def test_put_factory_simple_adapter(self):\n-            instance = object()\n+            def __call__(self, id):\n+                created.append(id)\n \n-            class FileFactory:\n-                def __init__(self, context):\n-                    self.context = context\n+        self.mock_adapter(DirectoryFactory, IDirectoryFactory, (Container,))\n \n-                def __call__(self, name, contentType, body):\n-                    return instance\n+        container = Container("container")\n+        container.MKCOL_handler("test")\n+        self.assertEqual(["test"], created)\n \n-            self.mock_adapter(FileFactory, IFileFactory, (Container,))\n-            container = Container("container")\n-            self.assertEqual(\n-                instance, container.PUT_factory("test", "text/foo", "body")\n-            )\n+    def test_put_factory_no_adapter(self):\n+        container = Container("container")\n+        self.assertEqual(None, container.PUT_factory("test", "text/foo", "body"))\n \n-        def test_list_without_items(self):\n-            class DummyContainer(Container):\n-                def listFolderContents(self, filter=None):\n-                    return []\n+    def test_put_factory_simple_adapter(self):\n+        instance = object()\n \n-            container = DummyContainer("container")\n+        class FileFactory:\n+            def __init__(self, context):\n+                self.context = context\n \n-            objects = container.listDAVObjects()\n-            self.assertEqual(1, len(objects))\n-            self.assertTrue(isinstance(objects[0], FolderDataResource))\n-            self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n-            self.assertEqual(container, objects[0].__parent__)\n+            def __call__(self, name, contentType, body):\n+                return instance\n \n-        def test_list_with_items(self):\n-            class DummyContainer(Container):\n-                def listFolderContents(self, filter=None):\n-                    return [Item("foo")]\n+        self.mock_adapter(FileFactory, IFileFactory, (Container,))\n+        container = Container("container")\n+        self.assertEqual(instance, container.PUT_factory("test", "text/foo", "body"))\n \n-            container = DummyContainer("container")\n+    def test_list_without_items(self):\n+        class DummyContainer(Container):\n+            def listFolderContents(self, filter=None):\n+                return []\n \n-            objects = container.listDAVObjects()\n-            self.assertEqual(2, len(objects))\n-            self.assertTrue(isinstance(objects[0], FolderDataResource))\n-            self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n-            self.assertEqual(container, objects[0].__parent__)\n-            self.assertEqual("foo", objects[1].getId())\n+        container = DummyContainer("container")\n \n-    class TestFolderDataResource(MockTestCase):\n-        def test_getId(self):\n-            container = Container("container")\n-            r = FolderDataResource("fdata", container)\n+        objects = container.listDAVObjects()\n+        self.assertEqual(1, len(objects))\n+        self.assertTrue(isinstance(objects[0], FolderDataResource))\n+        self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n+        self.assertEqual(container, objects[0].__parent__)\n \n-            self.assertEqual("fdata", r.getId())\n-            self.assertEqual(container, r.__parent__)\n-\n-        def test_HEAD(self):\n-            class TestContainer(Container):\n-                def get_size(self):\n-                    return 10\n-\n-                def content_type(self):\n-                    return "text/foo"\n-\n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n-\n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n-\n-            self.assertEqual(response, r.HEAD(request, request.response))\n-            self.assertEqual(200, response.getStatus())\n-            self.assertTrue(response.getHeader("Content-Type").startswith("text/foo"))\n-            self.assertEqual("10", response.getHeader("Content-Length"))\n-\n-        def test_OPTIONS(self):\n-            class TestContainer(Container):\n-                def get_size(self):\n-                    return 10\n-\n-                def content_type(self):\n-                    return "text/foo"\n+    def test_list_with_items(self):\n+        class DummyContainer(Container):\n+            def listFolderContents(self, filter=None):\n+                return [Item("foo")]\n \n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n-\n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n-\n-            self.assertEqual(response, r.OPTIONS(request, request.response))\n-            self.assertEqual(\n-                "GET, HEAD, POST, PUT, DELETE, OPTIONS, TRACE, PROPFIND, "\n-                "PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK",\n-                response.getHeader("Allow"),\n-            )\n-\n-        def test_TRACE(self):\n-            class TestContainer(Container):\n-                def get_size(self):\n-                    return 10\n-\n-                def content_type(self):\n-                    return "text/foo"\n-\n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n-\n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-\n-            self.assertRaises(MethodNotAllowed, r.TRACE, request, request.response)\n-\n-        def test_PROPFIND(self):\n-            class TestContainer(Container):\n-                def get_size(self):\n-                    return 10\n-\n-                def content_type(self):\n-                    return "text/foo"\n-\n-            container = TestContainer("container")\n-            container.manage_changeProperties(title="Container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n-\n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n-\n-            self.assertEqual(response, r.PROPFIND(request, response))\n-            self.assertEqual(\n-                \'text/xml; charset="utf-8"\', response.getHeader("Content-Type")\n-            )\n-            self.assertEqual(207, response.getStatus())\n-\n-            body = (\n-                XML_PROLOG\n-                + b"""\n+        container = DummyContainer("container")\n+\n+        objects = container.listDAVObjects()\n+        self.assertEqual(2, len(objects))\n+        self.assertTrue(isinstance(objects[0], FolderDataResource))\n+        self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n+        self.assertEqual(container, objects[0].__parent__)\n+        self.assertEqual("foo", objects[1].getId())\n+\n+\n+class TestFolderDataResource(MockTestCase):\n+    def test_getId(self):\n+        container = Container("container")\n+        r = FolderDataResource("fdata", container)\n+\n+        self.assertEqual("fdata", r.getId())\n+        self.assertEqual(container, r.__parent__)\n+\n+    def test_HEAD(self):\n+        class TestContainer(Container):\n+            def get_size(self):\n+                return 10\n+\n+            def content_type(self):\n+                return "text/foo"\n+\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n+\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n+\n+        self.assertEqual(response, r.HEAD(request, request.response))\n+        self.assertEqual(200, response.getStatus())\n+        self.assertTrue(response.getHeader("Content-Type").startswith("text/foo"))\n+        self.assertEqual("10", response.getHeader("Content-Length"))\n+\n+    def test_OPTIONS(self):\n+        class TestContainer(Container):\n+            def get_size(self):\n+                return 10\n+\n+            def content_type(self):\n+                return "text/foo"\n+\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n+\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n+\n+        self.assertEqual(response, r.OPTIONS(request, request.response))\n+        self.assertEqual(\n+            "GET, HEAD, POST, PUT, DELETE, OPTIONS, TRACE, PROPFIND, "\n+            "PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK",\n+            response.getHeader("Allow"),\n+        )\n+\n+    def test_TRACE(self):\n+        class TestContainer(Container):\n+            def get_size(self):\n+                return 10\n+\n+            def content_type(self):\n+                return "text/foo"\n+\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n+\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+\n+        self.assertRaises(MethodNotAllowed, r.TRACE, request, request.response)\n+\n+    def test_PROPFIND(self):\n+        class TestContainer(Container):\n+            def get_size(self):\n+                return 10\n+\n+            def content_type(self):\n+                return "text/foo"\n+\n+        container = TestContainer("container")\n+        container.manage_changeProperties(title="Container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n+\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n+\n+        self.assertEqual(response, r.PROPFIND(request, response))\n+        self.assertEqual(\n+            \'text/xml; charset="utf-8"\', response.getHeader("Content-Type")\n+        )\n+        self.assertEqual(207, response.getStatus())\n+\n+        body = (\n+            XML_PROLOG\n+            + b"""\n <d:multistatus xmlns:d="DAV:">\n <d:response>\n <d:href>/site/container</d:href>\n@@ -539,29 +529,29 @@ def content_type(self):\n </d:response>\n </d:multistatus>\n """\n-            )\n+        )\n \n-            result = response.getBody()\n-            result = re.sub(\n-                rb"<n:getlastmodified>.+</n:getlastmodified>",\n-                rb"<n:getlastmodified>...</n:getlastmodified>",\n-                result,\n-            )\n-            self.assertEqual(result.strip(), body.strip())\n+        result = response.getBody()\n+        result = re.sub(\n+            rb"<n:getlastmodified>.+</n:getlastmodified>",\n+            rb"<n:getlastmodified>...</n:getlastmodified>",\n+            result,\n+        )\n+        self.assertEqual(result.strip(), body.strip())\n \n-        def test_PROPPATCH(self):\n-            class TestContainer(Container):\n-                def get_size(self):\n-                    return 10\n+    def test_PROPPATCH(self):\n+        class TestContainer(Container):\n+            def get_size(self):\n+                return 10\n \n-                def content_type(self):\n-                    return "text/foo"\n+            def content_type(self):\n+                return "text/foo"\n \n-            container = TestContainer("container")\n-            container.manage_changeProperties(title="Container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        container = TestContainer("container")\n+        container.manage_changeProperties(title="Container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            requestBody = """\\\n+        requestBody = """\\\n <?xml version="1.0" encoding="utf-8" ?>\n <D:propertyupdate xmlns:D="DAV:"\n                   xmlns:n="http://www.zope.org/propsets/default">\n@@ -573,26 +563,26 @@ def content_type(self):\n </D:propertyupdate>\n """\n \n-            request = DAVTestRequest(\n-                environ={\n-                    "URL": "http://example.org/site/container",\n-                    "BODY": requestBody,\n-                }\n-            )\n-            response = request.response\n+        request = DAVTestRequest(\n+            environ={\n+                "URL": "http://example.org/site/container",\n+                "BODY": requestBody,\n+            }\n+        )\n+        response = request.response\n \n-            self.assertEqual(response, r.PROPPATCH(request, response))\n+        self.assertEqual(response, r.PROPPATCH(request, response))\n \n-            self.assertEqual("New title", container.getProperty("title"))\n+        self.assertEqual("New title", container.getProperty("title"))\n \n-            self.assertEqual(\n-                \'text/xml; charset="utf-8"\', response.getHeader("Content-Type")\n-            )\n-            self.assertEqual(207, response.getStatus())\n+        self.assertEqual(\n+            \'text/xml; charset="utf-8"\', response.getHeader("Content-Type")\n+        )\n+        self.assertEqual(207, response.getStatus())\n \n-            body = (\n-                XML_PROLOG\n-                + b"""\n+        body = (\n+            XML_PROLOG\n+            + b"""\n <d:multistatus xmlns:d="DAV:">\n <d:response>\n <d:href>http%3A//example.org/site/container</d:href>\n@@ -608,458 +598,437 @@ def content_type(self):\n </d:response>\n </d:multistatus>\n """\n-            )\n-\n-            result = response.getBody()\n-\n-            self.assertEqual(body.strip(), result.strip())\n-\n-        def test_LOCK(self):\n-            # Too much WebDAV magic - just test that it delegates correctly\n-            class TestContainer(Container):\n-                def LOCK(self, request, response):\n-                    self._locked = (\n-                        request,\n-                        response,\n-                    )\n-                    return response\n-\n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n-\n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n-\n-            self.assertEqual(response, r.LOCK(request, response))\n-            self.assertEqual((request, response), container._locked)\n+        )\n \n-        def test_UNLOCK(self):\n-            # Too much WebDAV magic - just test that it delegates correctly\n-            class TestContainer(Container):\n-                def UNLOCK(self, request, response):\n-                    self._unlocked = (\n-                        request,\n-                        response,\n-                    )\n-                    return response\n+        result = response.getBody()\n \n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        self.assertEqual(body.strip(), result.strip())\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n+    def test_LOCK(self):\n+        # Too much WebDAV magic - just test that it delegates correctly\n+        class TestContainer(Container):\n+            def LOCK(self, request, response):\n+                self._locked = (\n+                    request,\n+                    response,\n+                )\n+                return response\n \n-            self.assertEqual(response, r.UNLOCK(request, response))\n-            self.assertEqual((request, response), container._unlocked)\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-        def test_PUT(self):\n-            class TestContainer(Container):\n-                def PUT(self, request, response):\n-                    self._put = (\n-                        request,\n-                        response,\n-                    )\n-                    return response\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        self.assertEqual(response, r.LOCK(request, response))\n+        self.assertEqual((request, response), container._locked)\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n+    def test_UNLOCK(self):\n+        # Too much WebDAV magic - just test that it delegates correctly\n+        class TestContainer(Container):\n+            def UNLOCK(self, request, response):\n+                self._unlocked = (\n+                    request,\n+                    response,\n+                )\n+                return response\n \n-            self.assertEqual(response, r.PUT(request, response))\n-            self.assertEqual((request, response), container._put)\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-        def test_MKCOL(self):\n-            container = Container("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n+        self.assertEqual(response, r.UNLOCK(request, response))\n+        self.assertEqual((request, response), container._unlocked)\n \n-            self.assertRaises(MethodNotAllowed, r.MKCOL, request, response)\n+    def test_PUT(self):\n+        class TestContainer(Container):\n+            def PUT(self, request, response):\n+                self._put = (\n+                    request,\n+                    response,\n+                )\n+                return response\n \n-        def test_DELETE(self):\n-            container = Container("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            self.assertRaises(MethodNotAllowed, r.DELETE, request, response)\n+        self.assertEqual(response, r.PUT(request, response))\n+        self.assertEqual((request, response), container._put)\n \n-        def test_COPY(self):\n-            container = Container("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+    def test_MKCOL(self):\n+        container = Container("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            self.assertRaises(MethodNotAllowed, r.COPY, request, response)\n+        self.assertRaises(MethodNotAllowed, r.MKCOL, request, response)\n \n-        def test_MOVE(self):\n-            container = Container("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+    def test_DELETE(self):\n+        container = Container("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            self.assertRaises(MethodNotAllowed, r.MOVE, request, response)\n+        self.assertRaises(MethodNotAllowed, r.DELETE, request, response)\n \n-        def test_manage_DAVget(self):\n-            class TestContainer(Container):\n-                def manage_DAVget(self):\n-                    return "data"\n+    def test_COPY(self):\n+        container = Container("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            self.assertEqual("data", r.manage_DAVget())\n+        self.assertRaises(MethodNotAllowed, r.COPY, request, response)\n \n-        def test_manage_FTPget(self):\n-            class TestContainer(Container):\n-                def manage_FTPget(self):\n-                    return "data"\n+    def test_MOVE(self):\n+        container = Container("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            self.assertEqual("data", r.manage_FTPget())\n+        self.assertRaises(MethodNotAllowed, r.MOVE, request, response)\n \n-        def test_listDAVObjects(self):\n-            container = Container("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+    def test_manage_DAVget(self):\n+        class TestContainer(Container):\n+            def manage_DAVget(self):\n+                return "data"\n \n-            self.assertEqual([], r.listDAVObjects())\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-    class TestFileRepresentation(MockTestCase):\n-        def create_dummy(self, **kw):\n-            return ItemDummy(**kw)\n-\n-        def test_directory_factory(self):\n-            class TestContainer(Container):\n-                def manage_addFolder(self, name):\n-                    self._added = name\n+        self.assertEqual("data", r.manage_DAVget())\n \n-            container = TestContainer("container")\n-            factory = DefaultDirectoryFactory(container)\n+    def test_manage_FTPget(self):\n+        class TestContainer(Container):\n+            def manage_FTPget(self):\n+                return "data"\n \n-            factory("foo")\n-            self.assertEqual("foo", container._added)\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-        def test_file_factory_finder_cruft(self):\n-            container = Container("container")\n-            factory = DefaultFileFactory(container)\n+        self.assertEqual("data", r.manage_FTPget())\n \n-            self.assertRaises(\n-                Unauthorized, factory, ".DS_Store", "application/octet-stream", "xxx"\n-            )\n-            self.assertRaises(\n-                Unauthorized, factory, "._test", "application/octet-stream", "xxx"\n-            )\n-\n-        def test_file_factory_no_ctr(self):\n-            container = Container("container")\n-\n-            from Products.CMFCore.utils import getToolByName\n-\n-            self.patch_global(getToolByName, return_value=None)\n-\n-            factory = DefaultFileFactory(container)\n-\n-            self.assertEqual(None, factory("test.html", "text/html", "<html />"))\n-\n-        def test_file_factory_no_fti(self):\n-            container = Container("container")\n-\n-            ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value=None)\n-            self.mock_tool(ctr_mock, "content_type_registry")\n-\n-            factory = DefaultFileFactory(container)\n-\n-            self.assertEqual(None, factory("test.html", "text/html", "<html />"))\n-\n-        def test_file_factory_not_allowed(self):\n-            container = Container("container")\n-            container.portal_type = "containertype"\n-\n-            child_fti_mock = Mock()\n-            child_fti_mock.product = None\n-            container_fti_mock = Mock()\n-            container_fti_mock.allowType = Mock(return_value=False)\n-            ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value="childtype")\n-            pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n-            self.mock_tool(ctr_mock, "content_type_registry")\n-            self.mock_tool(pt_mock, "portal_types")\n-\n-            factory = DefaultFileFactory(container)\n-\n-            self.assertRaises(\n-                Unauthorized, factory, "test.html", "text/html", "<html />"\n-            )\n-\n-        def test_file_factory_construction_not_allowed(self):\n-            container = Container("container")\n-            container.portal_type = "containertype"\n-\n-            child_fti_mock = Mock()\n-            child_fti_mock.product = None\n-            child_fti_mock.isConstructionAllowed = Mock(return_value=False)\n-            container_fti_mock = Mock()\n-            container_fti_mock.allowType = Mock(return_value=True)\n-            ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value="childtype")\n-            pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n-            self.mock_tool(ctr_mock, "content_type_registry")\n-            self.mock_tool(pt_mock, "portal_types")\n-\n-            factory = DefaultFileFactory(container)\n-\n-            self.assertRaises(\n-                Unauthorized, factory, "test.html", "text/html", "<html />"\n-            )\n-\n-        def test_file_factory_factory_method(self):\n-            result_dummy = self.create_dummy()\n-            container_mock = Mock()\n-            container_mock.invokeFactory = Mock(return_value="test-1.html")\n-            container_mock._getOb = Mock(return_value=result_dummy)\n-            container_mock._delObject = Mock()\n-            child_fti_mock = Mock()\n-            child_fti_mock.product = "FooProduct"\n-            ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value="childtype")\n-            pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(return_value=child_fti_mock)\n-            self.mock_tool(ctr_mock, "content_type_registry")\n-            self.mock_tool(pt_mock, "portal_types")\n-\n-            factory = DefaultFileFactory(container_mock)\n-\n-            self.assertEqual(\n-                result_dummy, factory("test.html", "text/html", "<html />")\n-            )\n-\n-        def test_file_factory_factory_utility(self):\n-            result_dummy = self.create_dummy(id="test.html")\n-            container_mock = Mock()\n-            child_fti_mock = Mock()\n-            child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n-            child_fti_mock.product = None\n-            child_fti_mock.factory = "childtype-factory"\n-            container_fti_mock = Mock()\n-            container_fti_mock.allowType = Mock(return_value=True)\n-            ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value="childtype")\n-            pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n-            self.mock_tool(ctr_mock, "content_type_registry")\n-            self.mock_tool(pt_mock, "portal_types")\n+    def test_listDAVObjects(self):\n+        container = Container("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            def factory(*args, **kwargs):\n-                return result_dummy\n+        self.assertEqual([], r.listDAVObjects())\n \n-            self.mock_utility(factory, IFactory, name="childtype-factory")\n \n-            factory = DefaultFileFactory(container_mock)\n-\n-            self.assertEqual(\n-                result_dummy, factory("test.html", "text/html", "<html />")\n-            )\n-            self.assertEqual(result_dummy.Title(), "test.html")\n-\n-        def test_file_factory_content_type_factory_utility(self):\n-            container_mock = Mock()\n-            child_fti_mock = Mock()\n-            child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n-            child_fti_mock.getId = Mock(return_value="childtype")\n-            child_fti_mock.product = None\n-            child_fti_mock.factory = "childtype-factory"\n-            container_fti_mock = Mock()\n-            container_fti_mock.allowType = Mock(return_value=True)\n-            ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value="childtype")\n-            pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n-            self.mock_tool(ctr_mock, "content_type_registry")\n-            self.mock_tool(pt_mock, "portal_types")\n-\n-            def factory(*args, **kwargs):\n-                return Item(*args, **kwargs)\n-\n-            self.mock_utility(factory, IFactory, name="childtype-factory")\n+class TestFileRepresentation(MockTestCase):\n+    def create_dummy(self, **kw):\n+        return ItemDummy(**kw)\n \n-            factory = DefaultFileFactory(container_mock)\n+    def test_directory_factory(self):\n+        class TestContainer(Container):\n+            def manage_addFolder(self, name):\n+                self._added = name\n \n-            item = factory("test.html", "text/html", "<html />")\n+        container = TestContainer("container")\n+        factory = DefaultDirectoryFactory(container)\n \n-            self.assertEqual("test.html", item.id)\n-\n-        def test_readfile_mimetype_no_message_no_fields(self):\n-            class ITest(Interface):\n-                pass\n-\n-            SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI("testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n-            fti_mock.behaviors = []\n+        factory("foo")\n+        self.assertEqual("foo", container._added)\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n+    def test_file_factory_finder_cruft(self):\n+        container = Container("container")\n+        factory = DefaultFileFactory(container)\n \n-            item = Item("item")\n-            item.portal_type = "testtype"\n+        self.assertRaises(\n+            Unauthorized, factory, ".DS_Store", "application/octet-stream", "xxx"\n+        )\n+        self.assertRaises(\n+            Unauthorized, factory, "._test", "application/octet-stream", "xxx"\n+        )\n \n-            readfile = DefaultReadFile(item)\n+    def test_file_factory_no_ctr(self):\n+        container = Container("container")\n \n-            self.assertEqual("text/plain", readfile.mimeType)\n+        from Products.CMFCore.utils import getToolByName\n \n-        def test_readfile_mimetype_no_message_no_primary_field(self):\n-            class ITest(Interface):\n-                title = schema.TextLine()\n+        self.patch_global(getToolByName, return_value=None)\n \n-            SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI("testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n-            fti_mock.behaviors = []\n+        factory = DefaultFileFactory(container)\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n+        self.assertEqual(None, factory("test.html", "text/html", "<html />"))\n \n-            item = Item("item")\n-            item.portal_type = "testtype"\n+    def test_file_factory_no_fti(self):\n+        container = Container("container")\n \n-            readfile = DefaultReadFile(item)\n+        ctr_mock = Mock()\n+        ctr_mock.findTypeName = Mock(return_value=None)\n+        self.mock_tool(ctr_mock, "content_type_registry")\n \n-            self.assertEqual("text/plain", readfile.mimeType)\n+        factory = DefaultFileFactory(container)\n \n-        def test_readfile_mimetype_no_message_single_primary_field(self):\n-            class ITest(Interface):\n-                title = schema.TextLine()\n-                body = schema.Text()\n+        self.assertEqual(None, factory("test.html", "text/html", "<html />"))\n \n-            alsoProvides(ITest["body"], IPrimaryField)\n+    def test_file_factory_not_allowed(self):\n+        container = Container("container")\n+        container.portal_type = "containertype"\n \n-            SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI("testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n-            fti_mock.behaviors = []\n+        child_fti_mock = Mock()\n+        child_fti_mock.product = None\n+        container_fti_mock = Mock()\n+        container_fti_mock.allowType = Mock(return_value=False)\n+        ctr_mock = Mock()\n+        ctr_mock.findTypeName = Mock(return_value="childtype")\n+        pt_mock = Mock()\n+        pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n+        self.mock_tool(ctr_mock, "content_type_registry")\n+        self.mock_tool(pt_mock, "portal_types")\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n+        factory = DefaultFileFactory(container)\n \n-            item = Item("item")\n-            item.portal_type = "testtype"\n+        self.assertRaises(Unauthorized, factory, "test.html", "text/html", "<html />")\n \n-            readfile = DefaultReadFile(item)\n+    def test_file_factory_construction_not_allowed(self):\n+        container = Container("container")\n+        container.portal_type = "containertype"\n \n-            self.assertEqual("text/plain", readfile.mimeType)\n+        child_fti_mock = Mock()\n+        child_fti_mock.product = None\n+        child_fti_mock.isConstructionAllowed = Mock(return_value=False)\n+        container_fti_mock = Mock()\n+        container_fti_mock.allowType = Mock(return_value=True)\n+        ctr_mock = Mock()\n+        ctr_mock.findTypeName = Mock(return_value="childtype")\n+        pt_mock = Mock()\n+        pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n+        self.mock_tool(ctr_mock, "content_type_registry")\n+        self.mock_tool(pt_mock, "portal_types")\n \n-        def test_readfile_mimetype_no_message_multiple_primary_fields(self):\n-            class ITest(Interface):\n-                title = schema.TextLine()\n-                body = schema.Text()\n-                stuff = schema.Bytes()\n+        factory = DefaultFileFactory(container)\n+\n+        self.assertRaises(Unauthorized, factory, "test.html", "text/html", "<html />")\n \n-            alsoProvides(ITest["body"], IPrimaryField)\n-            alsoProvides(ITest["stuff"], IPrimaryField)\n+    def test_file_factory_factory_method(self):\n+        result_dummy = self.create_dummy()\n+        container_mock = Mock()\n+        container_mock.invokeFactory = Mock(return_value="test-1.html")\n+        container_mock._getOb = Mock(return_value=result_dummy)\n+        container_mock._delObject = Mock()\n+        child_fti_mock = Mock()\n+        child_fti_mock.product = "FooProduct"\n+        ctr_mock = Mock()\n+        ctr_mock.findTypeName = Mock(return_value="childtype")\n+        pt_mock = Mock()\n+        pt_mock.getTypeInfo = Mock(return_value=child_fti_mock)\n+        self.mock_tool(ctr_mock, "content_type_registry")\n+        self.mock_tool(pt_mock, "portal_types")\n+\n+        factory = DefaultFileFactory(container_mock)\n+\n+        self.assertEqual(result_dummy, factory("test.html", "text/html", "<html />"))\n+\n+    def test_file_factory_factory_utility(self):\n+        result_dummy = self.create_dummy(id="test.html")\n+        container_mock = Mock()\n+        child_fti_mock = Mock()\n+        child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n+        child_fti_mock.product = None\n+        child_fti_mock.factory = "childtype-factory"\n+        container_fti_mock = Mock()\n+        container_fti_mock.allowType = Mock(return_value=True)\n+        ctr_mock = Mock()\n+        ctr_mock.findTypeName = Mock(return_value="childtype")\n+        pt_mock = Mock()\n+        pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n+        self.mock_tool(ctr_mock, "content_type_registry")\n+        self.mock_tool(pt_mock, "portal_types")\n+\n+        def factory(*args, **kwargs):\n+            return result_dummy\n+\n+        self.mock_utility(factory, IFactory, name="childtype-factory")\n+\n+        factory = DefaultFileFactory(container_mock)\n+\n+        self.assertEqual(result_dummy, factory("test.html", "text/html", "<html />"))\n+        self.assertEqual(result_dummy.Title(), "test.html")\n+\n+    def test_file_factory_content_type_factory_utility(self):\n+        container_mock = Mock()\n+        child_fti_mock = Mock()\n+        child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n+        child_fti_mock.getId = Mock(return_value="childtype")\n+        child_fti_mock.product = None\n+        child_fti_mock.factory = "childtype-factory"\n+        container_fti_mock = Mock()\n+        container_fti_mock.allowType = Mock(return_value=True)\n+        ctr_mock = Mock()\n+        ctr_mock.findTypeName = Mock(return_value="childtype")\n+        pt_mock = Mock()\n+        pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n+        self.mock_tool(ctr_mock, "content_type_registry")\n+        self.mock_tool(pt_mock, "portal_types")\n+\n+        def factory(*args, **kwargs):\n+            return Item(*args, **kwargs)\n+\n+        self.mock_utility(factory, IFactory, name="childtype-factory")\n+\n+        factory = DefaultFileFactory(container_mock)\n+\n+        item = factory("test.html", "text/html", "<html />")\n+\n+        self.assertEqual("test.html", item.id)\n+\n+    def test_readfile_mimetype_no_message_no_fields(self):\n+        class ITest(Interface):\n+            pass\n+\n+        SCHEMA_CACHE.clear()\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n+        fti_mock.behaviors = []\n+\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n+\n+        item = Item("item")\n+        item.portal_type = "testtype"\n+\n+        readfile = DefaultReadFile(item)\n+\n+        self.assertEqual("text/plain", readfile.mimeType)\n+\n+    def test_readfile_mimetype_no_message_no_primary_field(self):\n+        class ITest(Interface):\n+            title = schema.TextLine()\n+\n+        SCHEMA_CACHE.clear()\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n+        fti_mock.behaviors = []\n+\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n+\n+        item = Item("item")\n+        item.portal_type = "testtype"\n+\n+        readfile = DefaultReadFile(item)\n+\n+        self.assertEqual("text/plain", readfile.mimeType)\n \n-            SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI("testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n+    def test_readfile_mimetype_no_message_single_primary_field(self):\n+        class ITest(Interface):\n+            title = schema.TextLine()\n+            body = schema.Text()\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n-            item = Item("item")\n-            item.portal_type = "testtype"\n+        alsoProvides(ITest["body"], IPrimaryField)\n \n-            readfile = DefaultReadFile(item)\n+        SCHEMA_CACHE.clear()\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n+        fti_mock.behaviors = []\n \n-            self.assertEqual("message/rfc822", readfile.mimeType)\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        def test_readfile_mimetype_additional_schemata(self):\n-            # This is mostly a test that utils.iterSchemata takes\n-            # IBehaviorAssignable into account.\n+        item = Item("item")\n+        item.portal_type = "testtype"\n \n-            class ITest(Interface):\n-                title = schema.TextLine()\n+        readfile = DefaultReadFile(item)\n \n-            class ITestAdditional(Interface):\n-                # Additional behavior on an item\n-                body = schema.Text()\n-                stuff = schema.Bytes()\n+        self.assertEqual("text/plain", readfile.mimeType)\n \n-            alsoProvides(ITestAdditional["body"], IPrimaryField)\n-            alsoProvides(ITestAdditional["stuff"], IPrimaryField)\n-            alsoProvides(ITestAdditional, IFormFieldProvider)\n+    def test_readfile_mimetype_no_message_multiple_primary_fields(self):\n+        class ITest(Interface):\n+            title = schema.TextLine()\n+            body = schema.Text()\n+            stuff = schema.Bytes()\n \n-            class MockBehavior:\n-                def __init__(self, iface):\n-                    self.interface = iface\n+        alsoProvides(ITest["body"], IPrimaryField)\n+        alsoProvides(ITest["stuff"], IPrimaryField)\n \n-            class MockBehaviorAssignable:\n-                def __init__(self, context):\n-                    self.context = context\n+        SCHEMA_CACHE.clear()\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n \n-                def enumerateBehaviors(self):\n-                    yield MockBehavior(ITestAdditional)\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n+        item = Item("item")\n+        item.portal_type = "testtype"\n \n-            SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI("testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n+        readfile = DefaultReadFile(item)\n \n-            self.mock_adapter(MockBehaviorAssignable, IBehaviorAssignable, (Item,))\n-            self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n-            item = Item("item")\n-            item.portal_type = "testtype"\n+        self.assertEqual("message/rfc822", readfile.mimeType)\n \n-            readfile = DefaultReadFile(item)\n+    def test_readfile_mimetype_additional_schemata(self):\n+        # This is mostly a test that utils.iterSchemata takes\n+        # IBehaviorAssignable into account.\n \n-            self.assertEqual("message/rfc822", readfile.mimeType)\n+        class ITest(Interface):\n+            title = schema.TextLine()\n \n-        def test_readfile_operations(self):\n-            class ITest(Interface):\n-                title = schema.TextLine()\n-                body = schema.Text()\n+        class ITestAdditional(Interface):\n+            # Additional behavior on an item\n+            body = schema.Text()\n+            stuff = schema.Bytes()\n \n-            alsoProvides(ITest["body"], IPrimaryField)\n+        alsoProvides(ITestAdditional["body"], IPrimaryField)\n+        alsoProvides(ITestAdditional["stuff"], IPrimaryField)\n+        alsoProvides(ITestAdditional, IFormFieldProvider)\n \n-            fti_mock = DexterityFTI("testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n-            fti_mock.behaviors = [ITestBehavior.__identifier__]\n+        class MockBehavior:\n+            def __init__(self, iface):\n+                self.interface = iface\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n+        class MockBehaviorAssignable:\n+            def __init__(self, context):\n+                self.context = context\n \n-            item = Item("item")\n-            item.portal_type = "testtype"\n+            def enumerateBehaviors(self):\n+                yield MockBehavior(ITestAdditional)\n \n-            readfile = DefaultReadFile(item)\n+        SCHEMA_CACHE.clear()\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n \n-            message = Message()\n-            message["title"] = "Test title"\n-            message["foo"] = "10"\n-            message["bar"] = "xyz"\n-            message.set_payload("<p>body</p>")\n+        self.mock_adapter(MockBehaviorAssignable, IBehaviorAssignable, (Item,))\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n+        item = Item("item")\n+        item.portal_type = "testtype"\n \n-            from plone.rfc822 import constructMessageFromSchemata\n+        readfile = DefaultReadFile(item)\n \n-            self.patch_global(constructMessageFromSchemata, return_value=message)\n+        self.assertEqual("message/rfc822", readfile.mimeType)\n \n-            body = b"""\\\n+    def test_readfile_operations(self):\n+        class ITest(Interface):\n+            title = schema.TextLine()\n+            body = schema.Text()\n+\n+        alsoProvides(ITest["body"], IPrimaryField)\n+\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n+        fti_mock.behaviors = [ITestBehavior.__identifier__]\n+\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n+\n+        item = Item("item")\n+        item.portal_type = "testtype"\n+\n+        readfile = DefaultReadFile(item)\n+\n+        message = Message()\n+        message["title"] = "Test title"\n+        message["foo"] = "10"\n+        message["bar"] = "xyz"\n+        message.set_payload("<p>body</p>")\n+\n+        from plone.rfc822 import constructMessageFromSchemata\n+\n+        self.patch_global(constructMessageFromSchemata, return_value=message)\n+\n+        body = b"""\\\n title: Test title\n foo: 10\n bar: xyz\n@@ -1067,64 +1036,64 @@ class ITest(Interface):\n \n <p>body</p>"""\n \n-            # iter\n-            # next\n+        # iter\n+        # next\n \n-            self.assertEqual(body, readfile.read())\n-            self.assertEqual(69, readfile.size())\n-            self.assertEqual("utf-8", readfile.encoding)\n-            self.assertEqual(None, readfile.name)\n-            self.assertEqual("text/plain", readfile.mimeType)\n+        self.assertEqual(body, readfile.read())\n+        self.assertEqual(69, readfile.size())\n+        self.assertEqual("utf-8", readfile.encoding)\n+        self.assertEqual(None, readfile.name)\n+        self.assertEqual("text/plain", readfile.mimeType)\n \n-            readfile.seek(2)\n-            self.assertEqual(2, readfile.tell())\n-            self.assertEqual(b"tl", readfile.read(2))\n-            self.assertEqual(4, readfile.tell())\n+        readfile.seek(2)\n+        self.assertEqual(2, readfile.tell())\n+        self.assertEqual(b"tl", readfile.read(2))\n+        self.assertEqual(4, readfile.tell())\n \n-            readfile.seek(0, 2)\n-            self.assertEqual(69, readfile.tell())\n+        readfile.seek(0, 2)\n+        self.assertEqual(69, readfile.tell())\n \n-            readfile.seek(0)\n-            self.assertEqual(b"foo: 10\\n", readfile.readlines()[1])\n+        readfile.seek(0)\n+        self.assertEqual(b"foo: 10\\n", readfile.readlines()[1])\n \n-            readfile.seek(0)\n-            self.assertEqual(b"foo: 10\\n", readfile.readlines(100)[1])\n+        readfile.seek(0)\n+        self.assertEqual(b"foo: 10\\n", readfile.readlines(100)[1])\n \n-            readfile.seek(0)\n-            self.assertEqual(b"title: Test title\\n", readfile.readline())\n+        readfile.seek(0)\n+        self.assertEqual(b"title: Test title\\n", readfile.readline())\n \n-            readfile.seek(0)\n-            self.assertEqual(b"title: Test title\\n", readfile.readline(100))\n+        readfile.seek(0)\n+        self.assertEqual(b"title: Test title\\n", readfile.readline(100))\n \n-            readfile.seek(0)\n-            self.assertEqual(b"foo: 10\\n", list(iter(readfile))[1])\n+        readfile.seek(0)\n+        self.assertEqual(b"foo: 10\\n", list(iter(readfile))[1])\n \n-            self.assertEqual(False, readfile.closed)\n-            readfile.close()\n+        self.assertEqual(False, readfile.closed)\n+        readfile.close()\n \n-        def test_writefile_file_operations(self):\n-            class ITest(Interface):\n-                title = schema.TextLine()\n-                body = schema.Text()\n+    def test_writefile_file_operations(self):\n+        class ITest(Interface):\n+            title = schema.TextLine()\n+            body = schema.Text()\n \n-            alsoProvides(ITest["body"], IPrimaryField)\n+        alsoProvides(ITest["body"], IPrimaryField)\n \n-            fti_mock = DexterityFTI("testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n-            fti_mock.behaviors = [ITestBehavior.__identifier__]\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n+        fti_mock.behaviors = [ITestBehavior.__identifier__]\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-            item = Item("item")\n-            item.portal_type = "testtype"\n-            item.title = "Test title"\n-            item.foo = 10\n-            item.bar = "xyz"\n-            item.body = "<p>body</p>"\n+        item = Item("item")\n+        item.portal_type = "testtype"\n+        item.title = "Test title"\n+        item.foo = 10\n+        item.bar = "xyz"\n+        item.body = "<p>body</p>"\n \n-            writefile = DefaultWriteFile(item)\n+        writefile = DefaultWriteFile(item)\n \n-            body = b"""\\\n+        body = b"""\\\n title: Test title\n foo: 10\n bar: xyz\n@@ -1132,167 +1101,162 @@ class ITest(Interface):\n \n <p>body</p>"""\n \n-            from plone.rfc822 import initializeObjectFromSchemata\n+        from plone.rfc822 import initializeObjectFromSchemata\n \n-            self.patch_global(initializeObjectFromSchemata)\n+        self.patch_global(initializeObjectFromSchemata)\n \n-            writefile.mimeType = "text/plain"\n-            self.assertEqual("text/plain", writefile.mimeType)\n+        writefile.mimeType = "text/plain"\n+        self.assertEqual("text/plain", writefile.mimeType)\n \n-            writefile.encoding = "latin1"\n-            self.assertEqual("latin1", writefile.encoding)\n+        writefile.encoding = "latin1"\n+        self.assertEqual("latin1", writefile.encoding)\n \n-            writefile.filename = "test.html"\n-            self.assertEqual("test.html", writefile.filename)\n+        writefile.filename = "test.html"\n+        self.assertEqual("test.html", writefile.filename)\n \n-            self.assertEqual(False, writefile.closed)\n-            self.assertEqual(0, writefile.tell())\n+        self.assertEqual(False, writefile.closed)\n+        self.assertEqual(0, writefile.tell())\n \n-            writefile.writelines(["one\\n", "two"])\n-            self.assertEqual(7, writefile.tell())\n+        writefile.writelines(["one\\n", "two"])\n+        self.assertEqual(7, writefile.tell())\n \n-            self.assertRaises(NotImplementedError, writefile.truncate)\n+        self.assertRaises(NotImplementedError, writefile.truncate)\n \n-            writefile.truncate(0)\n-            self.assertEqual(0, writefile.tell())\n+        writefile.truncate(0)\n+        self.assertEqual(0, writefile.tell())\n \n-            self.assertRaises(NotImplementedError, writefile.seek, 10)\n+        self.assertRaises(NotImplementedError, writefile.seek, 10)\n \n-            writefile.write(body[:10])\n-            writefile.write(body[10:])\n-            writefile.close()\n+        writefile.write(body[:10])\n+        writefile.write(body[10:])\n+        writefile.close()\n \n-            self.assertEqual(True, writefile.closed)\n-            self.assertEqual(69, writefile.tell())\n+        self.assertEqual(True, writefile.closed)\n+        self.assertEqual(69, writefile.tell())\n \n-    class TestDAVTraversal(MockTestCase):\n-        def test_no_acquire_dav(self):\n-            container = Container("container")\n \n-            outer = Folder("outer")\n-            outer._setOb("item", SimpleItem("item"))\n-            outer._setOb("container", container)\n+class TestDAVTraversal(MockTestCase):\n+    def test_no_acquire_dav(self):\n+        container = Container("container")\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://site/test", "REQUEST_METHOD": "PUT"}\n-            )\n-            request.maybe_webdav_client = True\n+        outer = Folder("outer")\n+        outer._setOb("item", SimpleItem("item"))\n+        outer._setOb("container", container)\n \n-            traversal = DexterityPublishTraverse(container.__of__(outer), request)\n+        request = DAVTestRequest(\n+            environ={"URL": "http://site/test", "REQUEST_METHOD": "PUT"}\n+        )\n+        request.maybe_webdav_client = True\n \n-            r = traversal.publishTraverse(request, "item")\n+        traversal = DexterityPublishTraverse(container.__of__(outer), request)\n \n-            self.assertTrue(isinstance(r, NullResource))\n-            self.assertEqual(container, r.aq_parent)\n+        r = traversal.publishTraverse(request, "item")\n \n-        def test_acquire_without_dav(self):\n-            container = Container("container")\n+        self.assertTrue(isinstance(r, NullResource))\n+        self.assertEqual(container, r.aq_parent)\n \n-            outer = Folder("outer")\n-            outer._setObject("item", SimpleItem("item"))\n-            outer._setOb("container", container)\n+    def test_acquire_without_dav(self):\n+        container = Container("container")\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://site/test", "REQUEST_METHOD": "GET"}\n-            )\n-            request.maybe_webdav_client = False\n+        outer = Folder("outer")\n+        outer._setObject("item", SimpleItem("item"))\n+        outer._setOb("container", container)\n \n-            traversal = DexterityPublishTraverse(container.__of__(outer), request)\n+        request = DAVTestRequest(\n+            environ={"URL": "http://site/test", "REQUEST_METHOD": "GET"}\n+        )\n+        request.maybe_webdav_client = False\n \n-            r = traversal.publishTraverse(request, "item")\n+        traversal = DexterityPublishTraverse(container.__of__(outer), request)\n \n-            self.assertEqual(r.aq_base, outer["item"].aq_base)\n-            self.assertEqual(container, r.aq_parent)\n+        r = traversal.publishTraverse(request, "item")\n \n-        def test_folder_data_traversal_dav(self):\n-            container = Container("test")\n-            request = DAVTestRequest(environ={"URL": "http://site/test"})\n-            request.maybe_webdav_client = True\n+        self.assertEqual(r.aq_base, outer["item"].aq_base)\n+        self.assertEqual(container, r.aq_parent)\n \n-            traversal = DexterityPublishTraverse(container, request)\n+    def test_folder_data_traversal_dav(self):\n+        container = Container("test")\n+        request = DAVTestRequest(environ={"URL": "http://site/test"})\n+        request.maybe_webdav_client = True\n \n-            r = traversal.publishTraverse(request, DAV_FOLDER_DATA_ID)\n+        traversal = DexterityPublishTraverse(container, request)\n \n-            self.assertEqual(DAV_FOLDER_DATA_ID, r.__name__)\n-            self.assertEqual(container, r.__parent__)\n-            self.assertEqual(container, r.aq_parent)\n+        r = traversal.publishTraverse(request, DAV_FOLDER_DATA_ID)\n \n-        def test_folder_data_traversal_without_dav(self):\n-            container = Container("test")\n-            request = DAVTestRequest(environ={"URL": "http://site/test"})\n-            request.maybe_webdav_client = False\n+        self.assertEqual(DAV_FOLDER_DATA_ID, r.__name__)\n+        self.assertEqual(container, r.__parent__)\n+        self.assertEqual(container, r.aq_parent)\n \n-            traversal = DexterityPublishTraverse(container, request)\n+    def test_folder_data_traversal_without_dav(self):\n+        container = Container("test")\n+        request = DAVTestRequest(environ={"URL": "http://site/test"})\n+        request.maybe_webdav_client = False\n \n-            self.assertRaises(\n-                Forbidden, traversal.publishTraverse, request, DAV_FOLDER_DATA_ID\n-            )\n+        traversal = DexterityPublishTraverse(container, request)\n \n-        def test_browser_default_dav(self):\n-            class TestContainer(Container):\n-                def __browser_default__(self, request):\n-                    return self, ("foo",)\n+        self.assertRaises(\n+            Forbidden, traversal.publishTraverse, request, DAV_FOLDER_DATA_ID\n+        )\n \n-            container = TestContainer("container")\n-            request = DAVTestRequest(\n-                environ={"URL": "http://site/test", "REQUEST_METHOD": "PROPFIND"}\n-            )\n-            request.maybe_webdav_client = True\n+    def test_browser_default_dav(self):\n+        class TestContainer(Container):\n+            def __browser_default__(self, request):\n+                return self, ("foo",)\n \n-            traversal = DexterityPublishTraverse(container, request)\n+        container = TestContainer("container")\n+        request = DAVTestRequest(\n+            environ={"URL": "http://site/test", "REQUEST_METHOD": "PROPFIND"}\n+        )\n+        request.maybe_webdav_client = True\n \n-            self.assertEqual(\n-                (\n-                    container,\n-                    (),\n-                ),\n-                traversal.browserDefault(request),\n-            )\n+        traversal = DexterityPublishTraverse(container, request)\n \n-        def test_browser_default_dav_get(self):\n-            class TestContainer(Container):\n-                def __browser_default__(self, request):\n-                    return self, ("foo",)\n+        self.assertEqual(\n+            (\n+                container,\n+                (),\n+            ),\n+            traversal.browserDefault(request),\n+        )\n \n-            container = TestContainer("container")\n-            request = DAVTestRequest(\n-                environ={"URL": "http://site/test", "REQUEST_METHOD": "GET"}\n-            )\n-            request.maybe_webdav_client = True\n+    def test_browser_default_dav_get(self):\n+        class TestContainer(Container):\n+            def __browser_default__(self, request):\n+                return self, ("foo",)\n \n-            traversal = DexterityPublishTraverse(container, request)\n+        container = TestContainer("container")\n+        request = DAVTestRequest(\n+            environ={"URL": "http://site/test", "REQUEST_METHOD": "GET"}\n+        )\n+        request.maybe_webdav_client = True\n \n-            self.assertEqual(\n-                (\n-                    container,\n-                    ("foo",),\n-                ),\n-                traversal.browserDefault(request),\n-            )\n+        traversal = DexterityPublishTraverse(container, request)\n \n-        def test_browser_default_without_dav(self):\n-            class TestContainer(Container):\n-                def __browser_default__(self, request):\n-                    return self, ("foo",)\n-\n-            container = TestContainer("container")\n-            request = DAVTestRequest(\n-                environ={"URL": "http://site/test", "REQUEST_METHOD": "PROPFIND"}\n-            )\n-            request.maybe_webdav_client = False\n-\n-            traversal = DexterityPublishTraverse(container, request)\n-\n-            self.assertEqual(\n-                (\n-                    container,\n-                    ("foo",),\n-                ),\n-                traversal.browserDefault(request),\n-            )\n-\n-else:\n-\n-    class TestDummy(MockTestCase):\n-        def test_dummy(self):\n-            pass\n+        self.assertEqual(\n+            (\n+                container,\n+                ("foo",),\n+            ),\n+            traversal.browserDefault(request),\n+        )\n+\n+    def test_browser_default_without_dav(self):\n+        class TestContainer(Container):\n+            def __browser_default__(self, request):\n+                return self, ("foo",)\n+\n+        container = TestContainer("container")\n+        request = DAVTestRequest(\n+            environ={"URL": "http://site/test", "REQUEST_METHOD": "PROPFIND"}\n+        )\n+        request.maybe_webdav_client = False\n+\n+        traversal = DexterityPublishTraverse(container, request)\n+\n+        self.assertEqual(\n+            (\n+                container,\n+                ("foo",),\n+            ),\n+            traversal.browserDefault(request),\n+        )\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-07-01T13:50:27+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/f91bb33bd3d7407e456892eb3891bd17f5278019

Removed conditional import of IContentType from zope.app.content.

Always use our own interface.

Files changed:
M plone/dexterity/interfaces.py

b'diff --git a/plone/dexterity/interfaces.py b/plone/dexterity/interfaces.py\nindex b4e134c..4dc07b1 100644\n--- a/plone/dexterity/interfaces.py\n+++ b/plone/dexterity/interfaces.py\n@@ -8,12 +8,9 @@\n import zope.schema\n \n \n-try:\n-    from zope.app.content import IContentType\n-except ImportError:\n+class IContentType(Interface):\n \n-    class IContentType(Interface):\n-        pass\n+    pass\n \n \n # id for pseudo-resource used to expose data for folderish items over WebDAV\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-07-01T13:52:13+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/b9ddfcbc43cc187228f97acf534cc8f749750240

Removed unneeded zope.location dependency.

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 7903bfa..8667f79 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -77,7 +77,6 @@ def read(filename):\n         "zope.filerepresentation>=3.6.0",\n         "zope.interface",\n         "zope.lifecycleevent",\n-        "zope.location",\n         "zope.publisher",\n         "zope.schema",\n         "zope.security",\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-07-01T13:54:41+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/abb9e38ec50a86374dc3be0fd8d0e593d89d2b7f

Require at least Python 3.7.

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 8667f79..a3724ab 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -47,12 +47,15 @@ def read(filename):\n     keywords="plone dexterity contenttypes",\n     author="Martin Aspeli",\n     author_email="optilude@gmail.com",\n-    url="https://pypi.org/project/plone.dexterity",\n+    maintainer="The Plone Release Team and Community",\n+    maintainer_email="releaseteam@plone.org",\n+    url="https://github.com/plone/plone.dexterity",\n     license="GPL version 2",\n     packages=find_packages(),\n     namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.7",\n     install_requires=[\n         "DateTime>=4.0.1",\n         "plone.alterego",\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-07-01T13:56:37+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/e8326a72ca3e0f686d2fae8b10b5aa748ab29c4e

Avoid DeprecationWarning for IConstrainTypes.

Files changed:
M plone/dexterity/content.py
M plone/dexterity/tests/test_content.py

b'diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex d4b3ffd..7ed1f04 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -10,6 +10,7 @@\n from OFS.SimpleItem import PathReprProvider\n from OFS.SimpleItem import SimpleItem\n from plone.autoform.interfaces import READ_PERMISSIONS_KEY\n+from plone.base.interfaces import IConstrainTypes\n from plone.behavior.interfaces import IBehaviorAssignable\n from plone.dexterity.filerepresentation import DAVCollectionMixin\n from plone.dexterity.filerepresentation import DAVResourceMixin\n@@ -33,7 +34,6 @@\n from Products.CMFCore.PortalContent import PortalContent\n from Products.CMFCore.PortalFolder import PortalFolderBase\n from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin\n-from Products.CMFPlone.interfaces import IConstrainTypes\n from zExceptions import Unauthorized\n from zope.annotation import IAttributeAnnotatable\n from zope.component import queryUtility\ndiff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex 3af3490..d4293a4 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -3,6 +3,7 @@\n from datetime import datetime\n from DateTime import DateTime\n from plone.autoform.interfaces import IFormFieldProvider\n+from plone.base.interfaces import IConstrainTypes\n from plone.behavior.interfaces import IBehavior\n from plone.behavior.interfaces import IBehaviorAssignable\n from plone.behavior.registration import BehaviorRegistration\n@@ -16,7 +17,6 @@\n from plone.dexterity.schema import SCHEMA_CACHE\n from plone.folder.default import DefaultOrdering\n from Products.CMFCore.interfaces import ITypesTool\n-from Products.CMFPlone.interfaces import IConstrainTypes\n from pytz import timezone\n from unittest.mock import Mock\n from unittest.mock import patch\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-07-01T14:14:27+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/b2edb91b276e4c9f9b8df7997380d884eb29aef8

Bootstrap 5 button classes in add/edit.

Files changed:
M plone/dexterity/browser/add.py
M plone/dexterity/browser/edit.py

b'diff --git a/plone/dexterity/browser/add.py b/plone/dexterity/browser/add.py\nindex d29e14d..3350bc0 100644\n--- a/plone/dexterity/browser/add.py\n+++ b/plone/dexterity/browser/add.py\n@@ -142,10 +142,10 @@ def update(self):\n     def updateActions(self):\n         super().updateActions()\n         if "save" in self.actions:\n-            self.actions["save"].addClass("context")\n+            self.actions["save"].addClass("success")\n \n         if "cancel" in self.actions:\n-            self.actions["cancel"].addClass("standalone")\n+            self.actions["cancel"].addClass("secondary")\n \n     @property\n     def label(self):\ndiff --git a/plone/dexterity/browser/edit.py b/plone/dexterity/browser/edit.py\nindex 096819d..79634ae 100644\n--- a/plone/dexterity/browser/edit.py\n+++ b/plone/dexterity/browser/edit.py\n@@ -60,10 +60,10 @@ def updateActions(self):\n         super().updateActions()\n \n         if "save" in self.actions:\n-            self.actions["save"].addClass("context")\n+            self.actions["save"].addClass("success")\n \n         if "cancel" in self.actions:\n-            self.actions["cancel"].addClass("standalone")\n+            self.actions["cancel"].addClass("secondary")\n \n     @property\n     def fti(self):\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-07-01T14:16:33+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/fca366d9627ebcee9aff3515bad0355c5788e568

add news snippets

Files changed:
A news/161.breaking.1
A news/161.breaking.2
A news/161.bugfix

b'diff --git a/news/161.breaking.1 b/news/161.breaking.1\nnew file mode 100644\nindex 00000000..b3bc122c\n--- /dev/null\n+++ b/news/161.breaking.1\n@@ -0,0 +1,2 @@\n+Python 3.7+ only, drop Python 2 support.\n+[jensens, maurits]\ndiff --git a/news/161.breaking.2 b/news/161.breaking.2\nnew file mode 100644\nindex 00000000..35ac7585\n--- /dev/null\n+++ b/news/161.breaking.2\n@@ -0,0 +1,2 @@\n+Remove long deprecated imports and fallbacks.\n+[jensens, maurits]\ndiff --git a/news/161.bugfix b/news/161.bugfix\nnew file mode 100644\nindex 00000000..1e2fd02a\n--- /dev/null\n+++ b/news/161.bugfix\n@@ -0,0 +1,2 @@\n+Use Bootstrap 5 classes for buttons.\n+[jensens]\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-07-01T23:30:05+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/6ab1f7ee9c5e5ca128452abc134fecb0c2ee9557

Merge pull request #168 from plone/maurits-modernize

Modernize, remove outdated code, add code-analysis checks

Files changed:
A .github/workflows/code-analysis.yml
A Makefile
A news/161.breaking.1
A news/161.breaking.2
A news/161.bugfix
M plone/__init__.py
M plone/dexterity/__init__.py
M plone/dexterity/behavior.py
M plone/dexterity/browser/__init__.py
M plone/dexterity/browser/add.py
M plone/dexterity/browser/base.py
M plone/dexterity/browser/configure.zcml
M plone/dexterity/browser/edit.py
M plone/dexterity/browser/fti.py
M plone/dexterity/browser/traversal.py
M plone/dexterity/browser/view.py
M plone/dexterity/configure.zcml
M plone/dexterity/content.py
M plone/dexterity/events.py
M plone/dexterity/exportimport.py
M plone/dexterity/factory.py
M plone/dexterity/filerepresentation.py
M plone/dexterity/fti.py
M plone/dexterity/i18n.py
M plone/dexterity/interfaces.py
M plone/dexterity/meta.zcml
M plone/dexterity/primary.py
M plone/dexterity/schema.py
M plone/dexterity/tests/__init__.py
M plone/dexterity/tests/case.py
M plone/dexterity/tests/schemata.py
M plone/dexterity/tests/test.xml
M plone/dexterity/tests/test_behavior.py
M plone/dexterity/tests/test_content.py
M plone/dexterity/tests/test_content_integration.py
M plone/dexterity/tests/test_exportimport.py
M plone/dexterity/tests/test_factory.py
M plone/dexterity/tests/test_fti.py
M plone/dexterity/tests/test_primary.py
M plone/dexterity/tests/test_schema.py
M plone/dexterity/tests/test_schema_cache.py
M plone/dexterity/tests/test_security.py
M plone/dexterity/tests/test_synchronize.py
M plone/dexterity/tests/test_utils.py
M plone/dexterity/tests/test_views.py
M plone/dexterity/tests/test_webdav.py
M plone/dexterity/utils.py
M pyproject.toml
M setup.py
D plone/dexterity/bbb.py

b'diff --git a/.github/workflows/code-analysis.yml b/.github/workflows/code-analysis.yml\nnew file mode 100644\nindex 00000000..d54242f1\n--- /dev/null\n+++ b/.github/workflows/code-analysis.yml\n@@ -0,0 +1,50 @@\n+name: Code Analysis\n+on:\n+  push:\n+\n+jobs:\n+  code-analysis:\n+    name: Code analysis\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+      - name: Checkout codebase\n+        uses: actions/checkout@v2\n+\n+      - name: Run check isort\n+        uses: plone/code-analysis-action@v1\n+        with:\n+          check: \'isort\'\n+          path: |\n+            plone\n+            setup.py\n+\n+      - name: Run check black\n+        uses: plone/code-analysis-action@v1\n+        with:\n+          check: \'black\'\n+          path: |\n+            plone\n+            setup.py\n+\n+      - name: Run check flake8\n+        uses: plone/code-analysis-action@v1\n+        with:\n+          check: \'flake8\'\n+          path: |\n+            plone\n+            setup.py\n+\n+      - name: Run check pyroma\n+        uses: plone/code-analysis-action@v1\n+        with:\n+          check: \'pyroma\'\n+          path: |\n+            ./\n+\n+      - name: Run check zpretty\n+        uses: plone/code-analysis-action@v1\n+        with:\n+          check: \'zpretty\'\n+          path: |\n+            plone\ndiff --git a/Makefile b/Makefile\nnew file mode 100644\nindex 00000000..950cf2c5\n--- /dev/null\n+++ b/Makefile\n@@ -0,0 +1,43 @@\n+### Defensive settings for make:\n+#     https://tech.davis-hansson.com/p/make/\n+SHELL:=bash\n+.ONESHELL:\n+.SHELLFLAGS:=-xeu -o pipefail -O inherit_errexit -c\n+.SILENT:\n+.DELETE_ON_ERROR:\n+MAKEFLAGS+=--warn-undefined-variables\n+MAKEFLAGS+=--no-builtin-rules\n+\n+# We like colors\n+# From: https://coderwall.com/p/izxssa/colored-makefile-for-golang-projects\n+RED=`tput setaf 1`\n+GREEN=`tput setaf 2`\n+RESET=`tput sgr0`\n+YELLOW=`tput setaf 3`\n+\n+CODE_QUALITY_VERSION=1.0.1\n+LINT=docker run --rm -v "$(PWD)":/github/workspace plone/code-quality:${CODE_QUALITY_VERSION} check\n+FORMAT=docker run --rm -v "$(PWD)":/github/workspace plone/code-quality:${CODE_QUALITY_VERSION} format\n+\n+PACKAGE_NAME=plone.dexterity\n+PACKAGE_PATH=plone/\n+CHECK_PATH=setup.py $(PACKAGE_PATH)\n+\n+# Add the following \'help\' target to your Makefile\n+# And add help text after each target name starting with \'\\#\\#\'\n+.PHONY: help\n+help: ## This help message\n+\t@grep -E \'^[a-zA-Z_-]+:.*?## .*$$\' $(MAKEFILE_LIST) | sort | awk \'BEGIN {FS = ":.*?## "}; {printf "\\033[36m%-30s\\033[0m %s\\n", $$1, $$2}\'\n+\n+.PHONY: format\n+format:  ## Format the codebase according to our standards\n+\t$(FORMAT) "$(CHECK_PATH)"\n+\n+.PHONY: lint\n+lint:  ## validate with isort, black, flake8, pyroma, zpretty\n+    # Would be nice to have a way to run all available checks, instead of specifying them here.\n+\t$(LINT) isort "$(CHECK_PATH)"\n+\t$(LINT) black "$(CHECK_PATH)"\n+\t$(LINT) flake8 "$(CHECK_PATH)"\n+\t$(LINT) pyroma .\n+\t$(LINT) zpretty "$(PACKAGE_PATH)"\ndiff --git a/news/161.breaking.1 b/news/161.breaking.1\nnew file mode 100644\nindex 00000000..b3bc122c\n--- /dev/null\n+++ b/news/161.breaking.1\n@@ -0,0 +1,2 @@\n+Python 3.7+ only, drop Python 2 support.\n+[jensens, maurits]\ndiff --git a/news/161.breaking.2 b/news/161.breaking.2\nnew file mode 100644\nindex 00000000..35ac7585\n--- /dev/null\n+++ b/news/161.breaking.2\n@@ -0,0 +1,2 @@\n+Remove long deprecated imports and fallbacks.\n+[jensens, maurits]\ndiff --git a/news/161.bugfix b/news/161.bugfix\nnew file mode 100644\nindex 00000000..1e2fd02a\n--- /dev/null\n+++ b/news/161.bugfix\n@@ -0,0 +1,2 @@\n+Use Bootstrap 5 classes for buttons.\n+[jensens]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 03d08ffd..5284146e 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/dexterity/__init__.py b/plone/dexterity/__init__.py\nindex cfa51cd4..1cbc5dec 100644\n--- a/plone/dexterity/__init__.py\n+++ b/plone/dexterity/__init__.py\n@@ -1,3 +1,2 @@\n-# -*- coding: utf-8 -*-\n # Kick dynamic module factory\n from . import schema  # noqa\ndiff --git a/plone/dexterity/bbb.py b/plone/dexterity/bbb.py\ndeleted file mode 100644\nindex 9b3770ec..00000000\n--- a/plone/dexterity/bbb.py\n+++ /dev/null\n@@ -1,33 +0,0 @@\n-# -*- coding: utf-8 -*-\n-import zope.deferredimport\n-\n-\n-zope.deferredimport.initialize()\n-\n-\n-HAS_WEBDAV = True\n-try:\n-    import webdav as _  # noqa: F401\n-except ImportError:\n-    HAS_WEBDAV = False\n-\n-\n-zope.deferredimport.deprecated(\n-    "Import HAS_WEBDAV instead.", HAS_ZSERVER="plone.dexterity:bbb.HAS_WEBDAV"\n-)\n-\n-\n-NullResource = None\n-\n-\n-class Resource(object):\n-    def dav__init(self, request, response):\n-        pass\n-\n-    def dav__validate(self, object, methodname, REQUEST):\n-        pass\n-\n-    def dav__simpleifhandler(\n-        self, request, response, method="PUT", col=0, url=None, refresh=0\n-    ):\n-        pass\ndiff --git a/plone/dexterity/behavior.py b/plone/dexterity/behavior.py\nindex bf015f3a..45217382 100644\n--- a/plone/dexterity/behavior.py\n+++ b/plone/dexterity/behavior.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.behavior.interfaces import IBehaviorAssignable\n from plone.dexterity.interfaces import IDexterityContent\n from plone.dexterity.schema import SCHEMA_CACHE\n@@ -8,7 +7,7 @@\n \n @implementer(IBehaviorAssignable)\n @adapter(IDexterityContent)\n-class DexterityBehaviorAssignable(object):\n+class DexterityBehaviorAssignable:\n     """Support plone.behavior behaviors stored in the FTI"""\n \n     def __init__(self, context):\n@@ -21,5 +20,4 @@ def supports(self, behavior_interface):\n         return False\n \n     def enumerateBehaviors(self):\n-        for behavior in SCHEMA_CACHE.behavior_registrations(self.context.portal_type):\n-            yield behavior\n+        yield from SCHEMA_CACHE.behavior_registrations(self.context.portal_type)\ndiff --git a/plone/dexterity/browser/__init__.py b/plone/dexterity/browser/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/dexterity/browser/__init__.py\n+++ b/plone/dexterity/browser/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/dexterity/browser/add.py b/plone/dexterity/browser/add.py\nindex 73087699..3350bc0d 100644\n--- a/plone/dexterity/browser/add.py\n+++ b/plone/dexterity/browser/add.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition.interfaces import IAcquirer\n@@ -37,10 +36,10 @@ class DefaultAddForm(DexterityExtensibleForm, form.AddForm):\n \n     portal_type = None\n     immediate_view = None\n-    success_message = _(u"Item created")\n+    success_message = _("Item created")\n \n     def __init__(self, context, request, ti=None):\n-        super(DefaultAddForm, self).__init__(context, request)\n+        super().__init__(context, request)\n         if ti is not None:\n             self.ti = ti\n             self.portal_type = ti.getId()\n@@ -119,10 +118,10 @@ def handleAdd(self, action):\n             self._finishedAdd = True\n             IStatusMessage(self.request).addStatusMessage(self.success_message, "info")\n \n-    @button.buttonAndHandler(_(u"Cancel"), name="cancel")\n+    @button.buttonAndHandler(_("Cancel"), name="cancel")\n     def handleCancel(self, action):\n         IStatusMessage(self.request).addStatusMessage(\n-            _(u"Add New Item operation cancelled"), "info"\n+            _("Add New Item operation cancelled"), "info"\n         )\n         self.request.response.redirect(self.nextURL())\n         notify(AddCancelledEvent(self.context))\n@@ -135,25 +134,25 @@ def update(self):\n                     "Subobject type disallowed by IConstrainTypes adapter: %s"\n                     % self.portal_type\n                 )\n-        super(DefaultAddForm, self).update()\n+        super().update()\n         # fire the edit begun only if no action was executed\n         if len(self.actions.executedActions) == 0:\n             notify(AddBegunEvent(self.context))\n \n     def updateActions(self):\n-        super(DefaultAddForm, self).updateActions()\n+        super().updateActions()\n         if "save" in self.actions:\n-            self.actions["save"].addClass("context")\n+            self.actions["save"].addClass("success")\n \n         if "cancel" in self.actions:\n-            self.actions["cancel"].addClass("standalone")\n+            self.actions["cancel"].addClass("secondary")\n \n     @property\n     def label(self):\n         portal_type = self.portal_type\n         fti = getUtility(IDexterityFTI, name=portal_type)\n         type_name = fti.Title()\n-        return _(u"Add ${name}", mapping={"name": type_name})\n+        return _("Add ${name}", mapping={"name": type_name})\n \n \n class DefaultAddView(layout.FormWrapper, BrowserPage):\n@@ -168,7 +167,7 @@ class DefaultAddView(layout.FormWrapper, BrowserPage):\n     form = DefaultAddForm\n \n     def __init__(self, context, request, ti):\n-        super(DefaultAddView, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.ti = ti\n \n         # Set portal_type name on newly created form instance\ndiff --git a/plone/dexterity/browser/base.py b/plone/dexterity/browser/base.py\nindex 581c96d3..d057fed6 100644\n--- a/plone/dexterity/browser/base.py\n+++ b/plone/dexterity/browser/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.autoform.form import AutoExtensibleForm\n from plone.dexterity.i18n import MessageFactory as _\n from plone.dexterity.interfaces import IDexterityFTI\n@@ -9,7 +8,7 @@\n class DexterityExtensibleForm(AutoExtensibleForm):\n     """Mixin class for Dexterity forms that support updatable fields"""\n \n-    default_fieldset_label = _("label_schema_default", default=u"Default")\n+    default_fieldset_label = _("label_schema_default", default="Default")\n \n     @property\n     def description(self):\ndiff --git a/plone/dexterity/browser/configure.zcml b/plone/dexterity/browser/configure.zcml\nindex b33c2754..e532b17e 100644\n--- a/plone/dexterity/browser/configure.zcml\n+++ b/plone/dexterity/browser/configure.zcml\n@@ -1,88 +1,89 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-    <!-- Standard view -->\n-    <browser:page\n-        for="..interfaces.IDexterityContent"\n-        name="view"\n-        class=".view.DefaultView"\n-        template="item.pt"\n-        permission="zope2.View"\n-        />\n+  <!-- Standard view -->\n+  <browser:page\n+      name="view"\n+      for="..interfaces.IDexterityContent"\n+      class=".view.DefaultView"\n+      template="item.pt"\n+      permission="zope2.View"\n+      />\n \n-    <!-- Content core views -->\n-    <!-- Note: the templaces are the same since the changes for\n+  <!-- Content core views -->\n+  <!-- Note: the templaces are the same since the changes for\n          https://github.com/plone/Products.CMFPlone/issues/3177\n          That may be okay: makes it easier to customize\n          only the template for items or for containers. -->\n-    <browser:page\n-        for="..interfaces.IDexterityItem"\n-        name="content-core"\n-        class=".view.DefaultView"\n-        template="itemcontentcore.pt"\n-        permission="zope2.View"\n-        />\n+  <browser:page\n+      name="content-core"\n+      for="..interfaces.IDexterityItem"\n+      class=".view.DefaultView"\n+      template="itemcontentcore.pt"\n+      permission="zope2.View"\n+      />\n \n-    <browser:page\n-        for="..interfaces.IDexterityContainer"\n-        name="content-core"\n-        class=".view.DefaultView"\n-        template="containercontentcore.pt"\n-        permission="zope2.View"\n-        />\n+  <browser:page\n+      name="content-core"\n+      for="..interfaces.IDexterityContainer"\n+      class=".view.DefaultView"\n+      template="containercontentcore.pt"\n+      permission="zope2.View"\n+      />\n \n-    <!-- Standard IPublishTraverse adapter -->\n-    <adapter factory=".traversal.DexterityPublishTraverse" />\n+  <!-- Standard IPublishTraverse adapter -->\n+  <adapter factory=".traversal.DexterityPublishTraverse" />\n \n-    <!-- Standard add view and form - invoked from ++add++ traverser -->\n-    <adapter\n-        for="Products.CMFCore.interfaces.IFolderish\n-             zope.publisher.interfaces.browser.IDefaultBrowserLayer\n-             ..interfaces.IDexterityFTI"\n-        provides="zope.publisher.interfaces.browser.IBrowserPage"\n-        factory=".add.DefaultAddView"\n+  <!-- Standard add view and form - invoked from ++add++ traverser -->\n+  <adapter\n+      factory=".add.DefaultAddView"\n+      provides="zope.publisher.interfaces.browser.IBrowserPage"\n+      for="Products.CMFCore.interfaces.IFolderish\n+           zope.publisher.interfaces.browser.IDefaultBrowserLayer\n+           ..interfaces.IDexterityFTI"\n+      />\n+  <class class=".add.DefaultAddView">\n+    <require\n+        permission="cmf.AddPortalContent"\n+        interface="zope.publisher.interfaces.browser.IBrowserPage"\n         />\n-    <class class=".add.DefaultAddView">\n-        <require\n-            permission="cmf.AddPortalContent"\n-            interface="zope.publisher.interfaces.browser.IBrowserPage"\n-            />\n-    </class>\n+  </class>\n \n-    <!-- Standard edit view -->\n-    <browser:page\n-        for="..interfaces.IDexterityContent"\n-        name="edit"\n-        class=".edit.DefaultEditView"\n-        permission="cmf.ModifyPortalContent"\n-        />\n+  <!-- Standard edit view -->\n+  <browser:page\n+      name="edit"\n+      for="..interfaces.IDexterityContent"\n+      class=".edit.DefaultEditView"\n+      permission="cmf.ModifyPortalContent"\n+      />\n \n-    <!-- FTI add form -->\n-    <browser:page\n-        for="zope.browser.interfaces.IAdding"\n-        name="plone.dexterity.fti"\n-        template="fti.pt"\n-        class=".fti.FTIAddView"\n-        permission="cmf.ManagePortal"\n-        />\n+  <!-- FTI add form -->\n+  <browser:page\n+      name="plone.dexterity.fti"\n+      for="zope.browser.interfaces.IAdding"\n+      class=".fti.FTIAddView"\n+      template="fti.pt"\n+      permission="cmf.ManagePortal"\n+      />\n \n-    <!-- Resources for icons -->\n+  <!-- Resources for icons -->\n \n-    <browser:resource\n-        name="plone.dexterity.item.gif"\n-        file="icons/item_icon.gif"\n-        />\n+  <browser:resource\n+      name="plone.dexterity.item.gif"\n+      file="icons/item_icon.gif"\n+      />\n \n-    <browser:resource\n-        name="plone.dexterity.container.gif"\n-        file="icons/container_icon.gif"\n-        />\n+  <browser:resource\n+      name="plone.dexterity.container.gif"\n+      file="icons/container_icon.gif"\n+      />\n \n-    <browser:resource\n-        name="plone.dexterity.fti.gif"\n-        file="icons/typeinfo.gif"\n-        />\n+  <browser:resource\n+      name="plone.dexterity.fti.gif"\n+      file="icons/typeinfo.gif"\n+      />\n \n </configure>\ndiff --git a/plone/dexterity/browser/edit.py b/plone/dexterity/browser/edit.py\nindex e3edcf8b..79634ae5 100644\n--- a/plone/dexterity/browser/edit.py\n+++ b/plone/dexterity/browser/edit.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity.browser.base import DexterityExtensibleForm\n from plone.dexterity.events import EditBegunEvent\n from plone.dexterity.events import EditCancelledEvent\n@@ -8,7 +7,6 @@\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.registry.interfaces import IRegistry\n from plone.z3cform import layout\n-from Products.CMFCore.utils import getToolByName\n from Products.statusmessages.interfaces import IStatusMessage\n from z3c.form import button\n from z3c.form import form\n@@ -19,9 +17,9 @@\n \n class DefaultEditForm(DexterityExtensibleForm, form.EditForm):\n \n-    success_message = _(u"Changes saved")\n+    success_message = _("Changes saved")\n \n-    @button.buttonAndHandler(_(u"Save"), name="save")\n+    @button.buttonAndHandler(_("Save"), name="save")\n     def handleApply(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -32,9 +30,9 @@ def handleApply(self, action):\n         self.request.response.redirect(self.nextURL())\n         notify(EditFinishedEvent(self.context))\n \n-    @button.buttonAndHandler(_(u"Cancel"), name="cancel")\n+    @button.buttonAndHandler(_("Cancel"), name="cancel")\n     def handleCancel(self, action):\n-        IStatusMessage(self.request).addStatusMessage(_(u"Edit cancelled"), "info")\n+        IStatusMessage(self.request).addStatusMessage(_("Edit cancelled"), "info")\n         self.request.response.redirect(self.nextURL())\n         notify(EditCancelledEvent(self.context))\n \n@@ -52,20 +50,20 @@ def nextURL(self):\n \n     def update(self):\n         self.portal_type = self.context.portal_type\n-        super(DefaultEditForm, self).update()\n+        super().update()\n \n         # fire the edit begun only if no action was executed\n         if len(self.actions.executedActions) == 0:\n             notify(EditBegunEvent(self.context))\n \n     def updateActions(self):\n-        super(DefaultEditForm, self).updateActions()\n+        super().updateActions()\n \n         if "save" in self.actions:\n-            self.actions["save"].addClass("context")\n+            self.actions["save"].addClass("success")\n \n         if "cancel" in self.actions:\n-            self.actions["cancel"].addClass("standalone")\n+            self.actions["cancel"].addClass("secondary")\n \n     @property\n     def fti(self):\n@@ -74,7 +72,7 @@ def fti(self):\n     @property\n     def label(self):\n         type_name = self.fti.Title()\n-        return _(u"Edit ${name}", mapping={"name": type_name})\n+        return _("Edit ${name}", mapping={"name": type_name})\n \n \n DefaultEditView = layout.wrap_form(DefaultEditForm)\ndiff --git a/plone/dexterity/browser/fti.py b/plone/dexterity/browser/fti.py\nindex 72df0061..93062f45 100644\n--- a/plone/dexterity/browser/fti.py\n+++ b/plone/dexterity/browser/fti.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity.fti import DexterityFTI\n from Products.CMFCore.browser.typeinfo import FactoryTypeInformationAddView\n \n@@ -7,4 +6,4 @@ class FTIAddView(FactoryTypeInformationAddView):\n     """Add view for the Dexterity FTI type"""\n \n     klass = DexterityFTI\n-    description = u"Factory Type Information for Dexterity Content Types"\n+    description = "Factory Type Information for Dexterity Content Types"\ndiff --git a/plone/dexterity/browser/traversal.py b/plone/dexterity/browser/traversal.py\nindex 0487ea5e..fa8f1cd5 100644\n--- a/plone/dexterity/browser/traversal.py\n+++ b/plone/dexterity/browser/traversal.py\n@@ -1,11 +1,10 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from Acquisition.interfaces import IAcquirer\n-from plone.dexterity import bbb\n from plone.dexterity.filerepresentation import FolderDataResource\n from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n from plone.dexterity.interfaces import IDexterityContent\n+from webdav.NullResource import NullResource\n from zope.component import adapter\n from zope.publisher.interfaces.browser import IBrowserRequest\n \n@@ -15,11 +14,6 @@\n except ImportError:\n     from ZPublisher.BaseRequest import DefaultPublishTraverse\n \n-if bbb.HAS_WEBDAV:\n-    from webdav.NullResource import NullResource\n-else:\n-    NullResource = bbb.NullResource\n-\n \n @adapter(IDexterityContent, IBrowserRequest)\n class DexterityPublishTraverse(DefaultPublishTraverse):\n@@ -48,9 +42,7 @@ def publishTraverse(self, request, name):\n         ):\n             return FolderDataResource(DAV_FOLDER_DATA_ID, context).__of__(context)\n \n-        defaultTraversal = super(DexterityPublishTraverse, self).publishTraverse(\n-            request, name\n-        )\n+        defaultTraversal = super().publishTraverse(request, name)\n \n         # If this is a WebDAV PUT/PROPFIND/PROPPATCH request, don\'t acquire\n         # things. If we did, we couldn\'t create a new object with PUT, for\n@@ -85,4 +77,4 @@ def browserDefault(self, request):\n         ):\n             return self.context, ()\n \n-        return super(DexterityPublishTraverse, self).browserDefault(request)\n+        return super().browserDefault(request)\ndiff --git a/plone/dexterity/browser/view.py b/plone/dexterity/browser/view.py\nindex deed5227..ad90ac5b 100644\n--- a/plone/dexterity/browser/view.py\n+++ b/plone/dexterity/browser/view.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.autoform.view import WidgetsView\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.utils import getAdditionalSchemata\ndiff --git a/plone/dexterity/configure.zcml b/plone/dexterity/configure.zcml\nindex 1add73a1..c720d027 100644\n--- a/plone/dexterity/configure.zcml\n+++ b/plone/dexterity/configure.zcml\n@@ -1,139 +1,140 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:i18n="http://namespaces.zope.org/i18n"\n     xmlns:five="http://namespaces.zope.org/five"\n-    i18n_domain="plone">\n-\n-    <include package="Products.CMFCore" />\n-\n-    <include package="plone.behavior" />\n-    <include package="plone.folder" />\n-    <include package="plone.supermodel" />\n-    <include package="plone.rfc822" />\n-    <include package="plone.uuid" />\n-    <include package="plone.z3cform" />\n-\n-    <include package=".browser" />\n-    <include package=".fti" />\n-\n-    <!-- Re-index content when it\'s modified -->\n-    <subscriber\n-        for=".interfaces.IDexterityContent\n-             zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n-        handler=".content.reindexOnModify"\n-        />\n-\n-    <!-- Support for dynamic schemata -->\n-\n-    <utility\n-        factory=".schema.DexteritySchemaPolicy"\n-        name="dexterity"\n-        />\n-\n-    <utility\n-        factory=".schema.SchemaModuleFactory"\n-        name="plone.dexterity.schema.generated"\n-        />\n-\n-    <!-- Schema cache -->\n-    <subscriber handler=".schema.invalidate_schema" />\n-\n-    <!-- Support for plone.behavior behaviors -->\n-    <adapter factory=".behavior.DexterityBehaviorAssignable" />\n-\n-    <!-- Register the content classes -->\n-    <five:registerClass\n-        class=".content.Item"\n-        meta_type="Dexterity Item"\n-        permission="cmf.AddPortalContent"\n-        icon="plone.dexterity.item.gif"\n-        />\n-    <class class=".content.Item" />\n-\n-    <five:registerClass\n-        class=".content.Container"\n-        meta_type="Dexterity Container"\n-        permission="cmf.AddPortalContent"\n-        icon="plone.dexterity.item.gif"\n-        />\n-    <class class=".content.Container" />\n-\n-    <!-- Register FTI class -->\n-    <five:registerClass\n-        class=".fti.DexterityFTI"\n-        meta_type="Dexterity FTI"\n-        addview="plone.dexterity.fti"\n-        permission="cmf.ManagePortal"\n-        icon="plone.dexterity.fti.gif"\n-        global="False"\n-        />\n-\n-    <!-- Register FTI add/remove/modify handlers -->\n-\n-    <subscriber\n-        for=".interfaces.IDexterityFTI\n-             zope.container.interfaces.IObjectAddedEvent"\n-        handler=".fti.ftiAdded"\n-        />\n-\n-    <subscriber\n-        for=".interfaces.IDexterityFTI\n-             zope.container.interfaces.IObjectRemovedEvent"\n-        handler=".fti.ftiRemoved"\n-        />\n-\n-    <subscriber\n-        for=".interfaces.IDexterityFTI\n-             zope.container.interfaces.IObjectMovedEvent"\n-        handler=".fti.ftiRenamed"\n-        />\n-\n-    <subscriber\n-        for=".interfaces.IDexterityFTI\n-             zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n-        handler=".fti.ftiModified"\n-        />\n-\n-    <!-- File representation (FTP/WebDAV support) -->\n-    <adapter factory=".filerepresentation.DefaultDirectoryFactory" />\n-    <adapter factory=".filerepresentation.DefaultFileFactory" />\n-\n-    <adapter\n-        provides="zope.filerepresentation.interfaces.IRawReadFile"\n-        factory=".filerepresentation.DefaultReadFile"\n-        />\n-    <adapter factory=".filerepresentation.DefaultWriteFile" />\n-\n-    <!-- GenericSetup structure import/export support -->\n-    <adapter\n-        factory=".exportimport.DexterityContentExporterImporter"\n-        provides="Products.GenericSetup.interfaces.IFilesystemImporter"\n-        for=".interfaces.IDexterityItem"\n-        />\n-    <adapter\n-        factory=".exportimport.DexterityContentExporterImporter"\n-        provides="Products.GenericSetup.interfaces.IFilesystemExporter"\n-        for=".interfaces.IDexterityItem"\n-        />\n-    <adapter\n-        factory=".exportimport.DexterityContentExporterImporter"\n-        provides="Products.GenericSetup.interfaces.IFilesystemImporter"\n-        for=".interfaces.IDexterityContainer"\n-        />\n-    <adapter\n-        factory=".exportimport.DexterityContentExporterImporter"\n-        provides="Products.GenericSetup.interfaces.IFilesystemExporter"\n-        for=".interfaces.IDexterityContainer"\n-        />\n-\n-    <!-- PrimaryFieldInfo -->\n-    <adapter factory=".primary.PrimaryFieldInfo"/>\n-\n-    <!-- ISized -->\n-    <adapter\n-        for="*"\n-        factory="zope.size.DefaultSized"\n-        provides="zope.size.interfaces.ISized"\n-        />\n+    xmlns:i18n="http://namespaces.zope.org/i18n"\n+    i18n_domain="plone"\n+    >\n+\n+  <include package="Products.CMFCore" />\n+\n+  <include package="plone.behavior" />\n+  <include package="plone.folder" />\n+  <include package="plone.supermodel" />\n+  <include package="plone.rfc822" />\n+  <include package="plone.uuid" />\n+  <include package="plone.z3cform" />\n+\n+  <include package=".browser" />\n+  <include package=".fti" />\n+\n+  <!-- Re-index content when it\'s modified -->\n+  <subscriber\n+      for=".interfaces.IDexterityContent\n+           zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n+      handler=".content.reindexOnModify"\n+      />\n+\n+  <!-- Support for dynamic schemata -->\n+\n+  <utility\n+      factory=".schema.DexteritySchemaPolicy"\n+      name="dexterity"\n+      />\n+\n+  <utility\n+      factory=".schema.SchemaModuleFactory"\n+      name="plone.dexterity.schema.generated"\n+      />\n+\n+  <!-- Schema cache -->\n+  <subscriber handler=".schema.invalidate_schema" />\n+\n+  <!-- Support for plone.behavior behaviors -->\n+  <adapter factory=".behavior.DexterityBehaviorAssignable" />\n+\n+  <!-- Register the content classes -->\n+  <five:registerClass\n+      class=".content.Item"\n+      permission="cmf.AddPortalContent"\n+      icon="plone.dexterity.item.gif"\n+      meta_type="Dexterity Item"\n+      />\n+  <class class=".content.Item" />\n+\n+  <five:registerClass\n+      class=".content.Container"\n+      permission="cmf.AddPortalContent"\n+      icon="plone.dexterity.item.gif"\n+      meta_type="Dexterity Container"\n+      />\n+  <class class=".content.Container" />\n+\n+  <!-- Register FTI class -->\n+  <five:registerClass\n+      class=".fti.DexterityFTI"\n+      permission="cmf.ManagePortal"\n+      addview="plone.dexterity.fti"\n+      global="False"\n+      icon="plone.dexterity.fti.gif"\n+      meta_type="Dexterity FTI"\n+      />\n+\n+  <!-- Register FTI add/remove/modify handlers -->\n+\n+  <subscriber\n+      for=".interfaces.IDexterityFTI\n+           zope.container.interfaces.IObjectAddedEvent"\n+      handler=".fti.ftiAdded"\n+      />\n+\n+  <subscriber\n+      for=".interfaces.IDexterityFTI\n+           zope.container.interfaces.IObjectRemovedEvent"\n+      handler=".fti.ftiRemoved"\n+      />\n+\n+  <subscriber\n+      for=".interfaces.IDexterityFTI\n+           zope.container.interfaces.IObjectMovedEvent"\n+      handler=".fti.ftiRenamed"\n+      />\n+\n+  <subscriber\n+      for=".interfaces.IDexterityFTI\n+           zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n+      handler=".fti.ftiModified"\n+      />\n+\n+  <!-- File representation (FTP/WebDAV support) -->\n+  <adapter factory=".filerepresentation.DefaultDirectoryFactory" />\n+  <adapter factory=".filerepresentation.DefaultFileFactory" />\n+\n+  <adapter\n+      factory=".filerepresentation.DefaultReadFile"\n+      provides="zope.filerepresentation.interfaces.IRawReadFile"\n+      />\n+  <adapter factory=".filerepresentation.DefaultWriteFile" />\n+\n+  <!-- GenericSetup structure import/export support -->\n+  <adapter\n+      factory=".exportimport.DexterityContentExporterImporter"\n+      provides="Products.GenericSetup.interfaces.IFilesystemImporter"\n+      for=".interfaces.IDexterityItem"\n+      />\n+  <adapter\n+      factory=".exportimport.DexterityContentExporterImporter"\n+      provides="Products.GenericSetup.interfaces.IFilesystemExporter"\n+      for=".interfaces.IDexterityItem"\n+      />\n+  <adapter\n+      factory=".exportimport.DexterityContentExporterImporter"\n+      provides="Products.GenericSetup.interfaces.IFilesystemImporter"\n+      for=".interfaces.IDexterityContainer"\n+      />\n+  <adapter\n+      factory=".exportimport.DexterityContentExporterImporter"\n+      provides="Products.GenericSetup.interfaces.IFilesystemExporter"\n+      for=".interfaces.IDexterityContainer"\n+      />\n+\n+  <!-- PrimaryFieldInfo -->\n+  <adapter factory=".primary.PrimaryFieldInfo" />\n+\n+  <!-- ISized -->\n+  <adapter\n+      factory="zope.size.DefaultSized"\n+      provides="zope.size.interfaces.ISized"\n+      for="*"\n+      />\n \n </configure>\ndiff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 3e5fd728..7ed1f04f 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl import getSecurityManager\n from AccessControl import Permissions as acpermissions\n@@ -11,6 +10,7 @@\n from OFS.SimpleItem import PathReprProvider\n from OFS.SimpleItem import SimpleItem\n from plone.autoform.interfaces import READ_PERMISSIONS_KEY\n+from plone.base.interfaces import IConstrainTypes\n from plone.behavior.interfaces import IBehaviorAssignable\n from plone.dexterity.filerepresentation import DAVCollectionMixin\n from plone.dexterity.filerepresentation import DAVResourceMixin\n@@ -22,7 +22,6 @@\n from plone.dexterity.utils import datify\n from plone.dexterity.utils import iterSchemata\n from plone.dexterity.utils import safe_unicode\n-from plone.dexterity.utils import safe_utf8\n from plone.folder.ordered import CMFOrderedBTreeFolderBase\n from plone.uuid.interfaces import IAttributeUUID\n from plone.uuid.interfaces import IUUID\n@@ -35,7 +34,6 @@\n from Products.CMFCore.PortalContent import PortalContent\n from Products.CMFCore.PortalFolder import PortalFolderBase\n from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin\n-from Products.CMFPlone.interfaces import IConstrainTypes\n from zExceptions import Unauthorized\n from zope.annotation import IAttributeAnnotatable\n from zope.component import queryUtility\n@@ -50,7 +48,6 @@\n from zope.schema.interfaces import IContextAwareDefaultFactory\n from zope.security.interfaces import IPermission\n \n-import six\n import threading\n \n \n@@ -233,7 +230,7 @@ def __call__(self, name, value):\n         return 0\n \n \n-class PasteBehaviourMixin(object):\n+class PasteBehaviourMixin:\n     def _notifyOfCopyTo(self, container, op=0):\n         """Keep Archetypes\' reference info internally when op == 1 (move)\n         because in those cases we need to keep Archetypes\' refeferences.\n@@ -270,7 +267,7 @@ def _verifyObjectPaste(self, obj, validate_src=True):\n         # Products.CMFCore.PortalFolder.PortalFolderBase (permission checks and\n         # allowed content types) to also ask the FTI if construction is\n         # allowed.\n-        super(PasteBehaviourMixin, self)._verifyObjectPaste(obj, validate_src)\n+        super()._verifyObjectPaste(obj, validate_src)\n         if validate_src:\n             portal_type = getattr(aq_base(obj), "portal_type", None)\n             if portal_type:\n@@ -287,7 +284,7 @@ def _getCopy(self, container):\n         # Copied from Products.Archetypes.Referenceable.Referenceable._getCopy\n         is_cp_flag = getattr(self, "_v_is_cp", None)\n         cp_refs_flag = getattr(self, "_v_cp_refs", None)\n-        ob = super(PasteBehaviourMixin, self)._getCopy(container)\n+        ob = super()._getCopy(container)\n         if is_cp_flag:\n             setattr(ob, "_v_is_cp", is_cp_flag)\n         if cp_refs_flag:\n@@ -314,8 +311,8 @@ class DexterityContent(DAVResourceMixin, PortalContent, PropertyManager, Contain\n     # portal_type is set by the add view and/or factory\n     portal_type = None\n \n-    title = u""\n-    description = u""\n+    title = ""\n+    description = ""\n     subject = ()\n     creators = ()\n     contributors = ()\n@@ -411,13 +408,9 @@ def __getattr__(self, name):\n     # that can\'t be encoded to ASCII will throw a UnicodeEncodeError\n \n     def _get__name__(self):\n-        if six.PY2:\n-            return safe_unicode(self.id)\n         return self.id\n \n     def _set__name__(self, value):\n-        if six.PY2 and isinstance(value, six.text_type):\n-            value = str(value)  # may throw, but id must be ASCII in py2\n         self.id = value\n \n     __name__ = property(_get__name__, _set__name__)\n@@ -462,9 +455,6 @@ def setModificationDate(self, modification_date=None):\n \n     @security.protected(permissions.View)\n     def Title(self):\n-        # this is a CMF accessor, so should return utf8-encoded\n-        if six.PY2 and isinstance(self.title, six.text_type):\n-            return self.title.encode("utf-8")\n         return self.title or ""\n \n     @security.protected(permissions.View)\n@@ -477,10 +467,6 @@ def Description(self):\n         # Remember: \\r\\n - Windows, \\r - OS X, \\n - Linux/Unix\n         value = value.replace("\\r\\n", " ").replace("\\r", " ").replace("\\n", " ")  # noqa\n \n-        # this is a CMF accessor, so should return utf8-encoded\n-        if six.PY2 and isinstance(value, six.text_type):\n-            value = value.encode("utf-8")\n-\n         return value\n \n     @security.protected(permissions.View)\n@@ -495,8 +481,6 @@ def listCreators(self):\n         # List Dublin Core Creator elements - resource authors.\n         if self.creators is None:\n             return ()\n-        if six.PY2:\n-            return tuple(safe_utf8(c) for c in self.creators)\n         return self.creators\n \n     @security.protected(permissions.View)\n@@ -510,8 +494,6 @@ def Subject(self):\n         # Dublin Core Subject element - resource keywords.\n         if self.subject is None:\n             return ()\n-        if six.PY2:\n-            return tuple(safe_utf8(s) for s in self.subject)\n         return tuple(self.subject)\n \n     @security.protected(permissions.View)\n@@ -522,8 +504,6 @@ def Publisher(self):\n     @security.protected(permissions.View)\n     def listContributors(self):\n         # Dublin Core Contributor elements - resource collaborators.\n-        if six.PY2:\n-            return tuple(safe_utf8(c) for c in self.contributors)\n         return tuple(self.contributors)\n \n     @security.protected(permissions.View)\n@@ -595,8 +575,6 @@ def Language(self):\n     @security.protected(permissions.View)\n     def Rights(self):\n         # Dublin Core Rights element - resource copyright.\n-        if six.PY2:\n-            return safe_utf8(self.rights)\n         return self.rights\n \n     # ICatalogableDublinCore\n@@ -658,21 +636,21 @@ def setDescription(self, description):\n     @security.protected(permissions.ModifyPortalContent)\n     def setCreators(self, creators):\n         # Set Dublin Core Creator elements - resource authors.\n-        if isinstance(creators, six.string_types):\n+        if isinstance(creators, str):\n             creators = [creators]\n         self.creators = tuple(safe_unicode(c.strip()) for c in creators)\n \n     @security.protected(permissions.ModifyPortalContent)\n     def setSubject(self, subject):\n         # Set Dublin Core Subject element - resource keywords.\n-        if isinstance(subject, six.string_types):\n+        if isinstance(subject, str):\n             subject = [subject]\n         self.subject = tuple(safe_unicode(s.strip()) for s in subject)\n \n     @security.protected(permissions.ModifyPortalContent)\n     def setContributors(self, contributors):\n         # Set Dublin Core Contributor elements - resource collaborators.\n-        if isinstance(contributors, six.string_types):\n+        if isinstance(contributors, str):\n             contributors = contributors.split(";")\n         self.contributors = tuple(safe_unicode(c.strip()) for c in contributors)\n \n@@ -785,7 +763,7 @@ def manage_delObjects(self, ids=None, REQUEST=None):\n         """\n         if ids is None:\n             ids = []\n-        if isinstance(ids, six.string_types):\n+        if isinstance(ids, str):\n             ids = [ids]\n         for id in ids:\n             item = self._getOb(id)\n@@ -793,7 +771,7 @@ def manage_delObjects(self, ids=None, REQUEST=None):\n                 permissions.DeleteObjects, item\n             ):\n                 raise Unauthorized("Do not have permissions to remove this object")\n-        return super(Container, self).manage_delObjects(ids, REQUEST=REQUEST)\n+        return super().manage_delObjects(ids, REQUEST=REQUEST)\n \n     # override PortalFolder\'s allowedContentTypes to respect IConstrainTypes\n     # adapters\n@@ -803,7 +781,7 @@ def allowedContentTypes(self, context=None):\n \n         constrains = IConstrainTypes(context, None)\n         if not constrains:\n-            return super(Container, self).allowedContentTypes()\n+            return super().allowedContentTypes()\n \n         return constrains.allowedContentTypes()\n \n@@ -827,9 +805,7 @@ def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):\n                     % type_name\n                 )\n \n-        return super(Container, self).invokeFactory(\n-            type_name, id, RESPONSE, *args, **kw\n-        )\n+        return super().invokeFactory(type_name, id, RESPONSE, *args, **kw)\n \n \n def reindexOnModify(content, event):\ndiff --git a/plone/dexterity/events.py b/plone/dexterity/events.py\nindex 81e08bd1..67932c9e 100644\n--- a/plone/dexterity/events.py\n+++ b/plone/dexterity/events.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity import interfaces\n from zope.interface import implementer\n from zope.interface.interfaces import ObjectEvent\ndiff --git a/plone/dexterity/exportimport.py b/plone/dexterity/exportimport.py\nindex ee39472c..70ccdfb3 100644\n--- a/plone/dexterity/exportimport.py\n+++ b/plone/dexterity/exportimport.py\n@@ -1,6 +1,7 @@\n-# -*- coding: utf-8 -*-\n from csv import reader\n from csv import writer\n+from io import BytesIO\n+from io import StringIO\n from Products.GenericSetup.content import _globtest\n from Products.GenericSetup.content import FauxDAVRequest\n from Products.GenericSetup.content import FauxDAVResponse\n@@ -9,13 +10,9 @@\n from Products.GenericSetup.interfaces import IFilesystemExporter\n from Products.GenericSetup.interfaces import IFilesystemImporter\n from Products.GenericSetup.utils import _getDottedName\n-from six import BytesIO\n-from six import StringIO\n from zope.component import queryAdapter\n from zope.interface import implementer\n \n-import six\n-\n \n @implementer(IFilesystemExporter, IFilesystemImporter)\n class DexterityContentExporterImporter(FolderishExporterImporter):\n@@ -47,7 +44,7 @@ def export(self, export_context, subdir, root=False):\n         context = self.context\n \n         if not root:\n-            subdir = "%s/%s" % (subdir, context.getId())\n+            subdir = "{}/{}".format(subdir, context.getId())\n \n         exportable = self.listExportableItems()\n \n@@ -89,7 +86,7 @@ def import_(self, import_context, subdir, root=False):\n         """See IFilesystemImporter."""\n         context = self.context\n         if not root:\n-            subdir = "%s/%s" % (subdir, context.getId())\n+            subdir = "{}/{}".format(subdir, context.getId())\n \n         data = import_context.readDataFile(".data", subdir)\n         if data is not None:\n@@ -106,7 +103,7 @@ def import_(self, import_context, subdir, root=False):\n             preserve = []\n         else:\n             # Make sure ``preserve`` is a native string\n-            if six.PY3 and not isinstance(preserve, str):\n+            if not isinstance(preserve, str):\n                 preserve = preserve.decode("utf-8")\n             preserve = _globtest(preserve, prior)\n \n@@ -121,7 +118,7 @@ def import_(self, import_context, subdir, root=False):\n             return\n \n         dialect = "excel"\n-        if six.PY3 and not isinstance(objects, str):\n+        if not isinstance(objects, str):\n             objects = objects.decode("utf-8")\n         stream = StringIO(objects)\n \n@@ -139,7 +136,7 @@ def import_(self, import_context, subdir, root=False):\n                 if object is None:\n                     logger = import_context.getLogger("SFWA")\n                     logger.warning(\n-                        "Couldn\'t make instance: %s/%s" % (subdir, object_id)\n+                        "Couldn\'t make instance: {}/{}".format(subdir, object_id)\n                     )\n                     continue\n \ndiff --git a/plone/dexterity/factory.py b/plone/dexterity/factory.py\nindex e0d0d29e..fc87b38e 100644\n--- a/plone/dexterity/factory.py\n+++ b/plone/dexterity/factory.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from persistent import Persistent\n from plone.dexterity.interfaces import IDexterityFactory\n from plone.dexterity.interfaces import IDexterityFTI\n@@ -58,4 +57,4 @@ def getInterfaces(self):\n         return spec\n \n     def __repr__(self):\n-        return "<%s for %s>" % (self.__class__.__name__, self.portal_type)\n+        return "<{} for {}>".format(self.__class__.__name__, self.portal_type)\ndiff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex 58a0d843..046e71d9 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl.class_init import InitializeClass\n from Acquisition import aq_base\n from Acquisition import Implicit\n from email.message import Message\n-from plone.dexterity import bbb\n+from email.parser import BytesFeedParser\n from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n from plone.dexterity.interfaces import IDexterityContainer\n from plone.dexterity.interfaces import IDexterityContent\n@@ -15,6 +14,7 @@\n from plone.rfc822.interfaces import IPrimaryField\n from Products.CMFCore import permissions\n from Products.CMFCore.utils import getToolByName\n+from webdav.Resource import Resource\n from zExceptions import MethodNotAllowed\n from zExceptions import Unauthorized\n from zope.component import adapter\n@@ -32,24 +32,10 @@\n from zope.size.interfaces import ISized\n from ZPublisher.Iterators import IStreamIterator\n \n-import six\n import tempfile\n \n \n-if bbb.HAS_WEBDAV:\n-    from webdav.Resource import Resource\n-else:\n-    Resource = bbb.Resource\n-\n-\n-try:\n-    from email.parser import BytesFeedParser\n-except:\n-    # Python 2.7 compatibility\n-    from email.parser import FeedParser as BytesFeedParser\n-\n-\n-class DAVResourceMixin(object):\n+class DAVResourceMixin:\n     """Mixin class for WebDAV resource support.\n \n     The main purpose of this class is to implement the Zope 2 WebDAV API to\n@@ -241,7 +227,7 @@ def listDAVObjects(self):\n         We add a non-folderish pseudo object which contains the "body" data\n         for this container.\n         """\n-        parentList = super(DAVCollectionMixin, self).listDAVObjects()\n+        parentList = super().listDAVObjects()\n         if not parentList:\n             parentList = []\n         else:\n@@ -335,7 +321,7 @@ def PROPFIND(self, REQUEST, RESPONSE):\n \n         Certain things may be acquired, notably .propertysheets\n         """\n-        return super(FolderDataResource, self).PROPFIND(REQUEST, RESPONSE)\n+        return super().PROPFIND(REQUEST, RESPONSE)\n \n     @security.protected(permissions.ModifyPortalContent)\n     def PROPPATCH(self, REQUEST, RESPONSE):\n@@ -344,7 +330,7 @@ def PROPPATCH(self, REQUEST, RESPONSE):\n \n         Certain things may be acquired, notably .propertysheets\n         """\n-        return super(FolderDataResource, self).PROPPATCH(REQUEST, RESPONSE)\n+        return super().PROPPATCH(REQUEST, RESPONSE)\n \n     @security.protected(permissions.ModifyPortalContent)\n     def LOCK(self, REQUEST, RESPONSE):\n@@ -401,7 +387,7 @@ def listDAVObjects(self):\n \n \n @implementer(IStreamIterator)\n-class StringStreamIterator(object):\n+class StringStreamIterator:\n     """Simple stream iterator to allow efficient data streaming."""\n \n     def __init__(self, data, size=None, chunk=1 << 16):\n@@ -442,7 +428,7 @@ def __len__(self):\n \n @implementer(IDirectoryFactory)\n @adapter(IDexterityContainer)\n-class DefaultDirectoryFactory(object):\n+class DefaultDirectoryFactory:\n     """Default directory factory, invoked when an FTP/WebDAV operation\n     attempts to create a new folder via a MKCOL request.\n \n@@ -458,7 +444,7 @@ def __call__(self, name):\n \n @implementer(IFileFactory)\n @adapter(IDexterityContainer)\n-class DefaultFileFactory(object):\n+class DefaultFileFactory:\n     """Default file factory, invoked when an FTP/WebDAV operation\n     attempts to create a new resource via a PUT request.\n \n@@ -540,7 +526,7 @@ def __call__(self, name, contentType, data):\n \n \n @implementer(IRawReadFile)\n-class ReadFileBase(object):\n+class ReadFileBase:\n     """Convenience base class for read files which delegate to another stream\n     type (e.g. a temporary file or StringIO)\n \n@@ -678,10 +664,7 @@ def _getStream(self):\n         # transaction is closed\n         message = self._getMessage()\n         out = tempfile.TemporaryFile(mode="w+b")\n-        if six.PY2:\n-            out.write(message.as_string())\n-        else:\n-            out.write(message.as_string().encode("utf-8"))\n+        out.write(message.as_string().encode("utf-8"))\n         self._size = out.tell()\n         out.seek(0)\n         return out\n@@ -692,7 +675,7 @@ def __next__(self):\n \n \n @implementer(IRawWriteFile)\n-class WriteFileBase(object):\n+class WriteFileBase:\n     """Convenience base class for write files which delegate to another\n     stream, e.g. a file or StringIO.\n \n@@ -754,7 +737,7 @@ def _getStream(self):\n \n @implementer(IRawWriteFile)\n @adapter(IDexterityContent)\n-class DefaultWriteFile(object):\n+class DefaultWriteFile:\n     """IRawWriteFile file adapter for Dexterity objects.\n \n     Uses RFC822 marshaler.\n@@ -824,7 +807,7 @@ def close(self):\n     def write(self, data):\n         if self._closed:\n             raise ValueError("File is closed")\n-        if isinstance(data, six.text_type):\n+        if isinstance(data, str):\n             data = data.encode()\n         self._written += len(data)\n         self._parser.feed(data)\ndiff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex 16bcd1e8..f4ec43bf 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from Acquisition import aq_base\n from plone.dexterity import utils\n@@ -27,31 +26,17 @@\n import logging\n import os.path\n import plone.dexterity.schema\n-import six\n \n \n def get_suffix(fti):\n     mtime = getattr(fti, "_p_mtime", None)\n-    # Python 2 rounds floats when we use the str function on them.\n-\n-    # Python 2:\n-    # >>> str(1637689348.9999528)\n-    # \'1637689349.0\'\n-\n-    # Python 3:\n-    # >>> str(1637689348.9999528)\n-    # \'1637689348.9999528\'\n-\n-    # This was causing the schema names in Python 2 to take an unexpected format,\n-    # causing errors.\n-    # So, we need to use the repr function, which doesn\'t round floats.\n     if mtime:\n         return repr(mtime)\n     return ""\n \n \n @implementer(IDexterityFTIModificationDescription)\n-class DexterityFTIModificationDescription(object):\n+class DexterityFTIModificationDescription:\n     def __init__(self, attribute, oldValue):\n         self.attribute = attribute\n         self.oldValue = oldValue\n@@ -158,12 +143,12 @@ class DexterityFTI(base.DynamicViewTypeInformation):\n     <schema />\n </model>\n """\n-    model_file = u""\n-    schema = u""\n-    schema_policy = u"dexterity"\n+    model_file = ""\n+    schema = ""\n+    schema_policy = "dexterity"\n \n     def __init__(self, *args, **kwargs):\n-        super(DexterityFTI, self).__init__(*args, **kwargs)\n+        super().__init__(*args, **kwargs)\n \n         if "aliases" not in kwargs:\n             self.setMethodAliases(self.default_aliases)\n@@ -215,33 +200,13 @@ def __init__(self, *args, **kwargs):\n \n     def Title(self):\n         if self.title and self.i18n_domain:\n-            if six.PY2:\n-                try:\n-                    return Message(self.title.decode("utf8"), self.i18n_domain)\n-                except UnicodeDecodeError:\n-                    return Message(self.title.decode("latin-1"), self.i18n_domain)\n-            else:\n-                return Message(self.title, self.i18n_domain)\n-        else:\n-            if six.PY2:\n-                if self.title:\n-                    return self.title.decode("utf8")\n-                return self.getId()\n-            return self.title or self.getId()\n+            return Message(self.title, self.i18n_domain)\n+        return self.title or self.getId()\n \n     def Description(self):\n         if self.description and self.i18n_domain:\n-            if six.PY2:\n-                try:\n-                    return Message(self.description.decode("utf8"), self.i18n_domain)\n-                except UnicodeDecodeError:\n-                    return Message(self.description.decode("latin-1"), self.i18n_domain)\n-            else:\n-                return Message(self.description, self.i18n_domain)\n-        else:\n-            if six.PY2 and self.description:\n-                return self.description.decode("utf8")\n-            return self.description\n+            return Message(self.description, self.i18n_domain)\n+        return self.description\n \n     def Metatype(self):\n         if self.content_meta_type:\n@@ -265,7 +230,7 @@ def lookupSchema(self):\n                 schema = utils.resolveDottedName(self.schema)\n             except ImportError:\n                 logging.warning(\n-                    u"Dexterity type FTI %s: schema dotted name [%s] cannot be resolved."\n+                    "Dexterity type FTI %s: schema dotted name [%s] cannot be resolved."\n                     % (self.getId(), self.schema)\n                 )\n                 # fall through to return a fake class with no\n@@ -291,7 +256,7 @@ def lookupModel(self):\n \n         elif self.schema:\n             schema = self.lookupSchema()\n-            return Model({u"": schema})\n+            return Model({"": schema})\n \n         raise ValueError(\n             "Neither model source, nor model file, nor schema is specified in "\n@@ -311,7 +276,7 @@ def _updateProperty(self, id, value):\n         """\n \n         oldValue = getattr(self, id, None)\n-        super(DexterityFTI, self)._updateProperty(id, value)\n+        super()._updateProperty(id, value)\n         new_value = getattr(self, id, None)\n \n         if oldValue != new_value:\n@@ -363,8 +328,8 @@ def _absModelFile(self):\n         else:\n             if not os.path.isabs(model_file):\n                 raise ValueError(\n-                    u"Model file name %s is not an absolute path and does "\n-                    u"not contain a package name in %s"\n+                    "Model file name %s is not an absolute path and does "\n+                    "not contain a package name in %s"\n                     % (\n                         model_file,\n                         self.getId(),\n@@ -373,7 +338,7 @@ def _absModelFile(self):\n \n         if not os.path.isfile(model_file):\n             raise ValueError(\n-                u"Model file %s in %s cannot be found"\n+                "Model file %s in %s cannot be found"\n                 % (\n                     model_file,\n                     self.getId(),\ndiff --git a/plone/dexterity/i18n.py b/plone/dexterity/i18n.py\nindex fe387f44..fa171bb4 100644\n--- a/plone/dexterity/i18n.py\n+++ b/plone/dexterity/i18n.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n import zope.i18nmessageid\n \n \ndiff --git a/plone/dexterity/interfaces.py b/plone/dexterity/interfaces.py\nindex cf5dc42c..4dc07b13 100644\n--- a/plone/dexterity/interfaces.py\n+++ b/plone/dexterity/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.interfaces import ITypeInformation\n from zope.component.interfaces import IFactory\n from zope.interface import Attribute\n@@ -9,12 +8,9 @@\n import zope.schema\n \n \n-try:\n-    from zope.app.content import IContentType\n-except ImportError:\n+class IContentType(Interface):\n \n-    class IContentType(Interface):\n-        pass\n+    pass\n \n \n # id for pseudo-resource used to expose data for folderish items over WebDAV\n@@ -47,47 +43,47 @@ def lookupModel():\n         """\n \n     add_permission = zope.schema.DottedName(\n-        title=u"Add permission",\n-        description=u"Zope 3 permission name for the permission required to "\n-        u"construct this content",\n+        title="Add permission",\n+        description="Zope 3 permission name for the permission required to "\n+        "construct this content",\n     )\n \n     behaviors = zope.schema.List(\n-        title=u"Behaviors",\n-        description=u"A list of behaviors that are enabled for this type. "\n-        u"See plone.behavior for more details.",\n-        value_type=zope.schema.DottedName(title=u"Behavior name"),\n+        title="Behaviors",\n+        description="A list of behaviors that are enabled for this type. "\n+        "See plone.behavior for more details.",\n+        value_type=zope.schema.DottedName(title="Behavior name"),\n     )\n \n     schema = zope.schema.DottedName(\n-        title=u"Schema interface",\n-        description=u"Dotted name to an interface describing the type. "\n-        u"This is not required if there is a model file or a "\n-        u"model source string containing an unnamed schema.",\n+        title="Schema interface",\n+        description="Dotted name to an interface describing the type. "\n+        "This is not required if there is a model file or a "\n+        "model source string containing an unnamed schema.",\n     )\n \n     model_source = zope.schema.Text(\n-        title=u"Model text",\n-        description=u"XML representation of the model for this type. "\n-        + u"If this is given, it will override any model_file.",\n+        title="Model text",\n+        description="XML representation of the model for this type. "\n+        + "If this is given, it will override any model_file.",\n     )\n \n     model_file = zope.schema.Text(\n-        title=u"Model file",\n-        description=u"A file that contains an XML model. "\n-        u"This may be an absolute path, or one relative to a "\n-        u"package, e.g. my.package:model.xml",\n+        title="Model file",\n+        description="A file that contains an XML model. "\n+        "This may be an absolute path, or one relative to a "\n+        "package, e.g. my.package:model.xml",\n     )\n \n     hasDynamicSchema = zope.schema.Bool(\n-        title=u"Whether or not the FTI uses a dynamic schema.", readonly=True\n+        title="Whether or not the FTI uses a dynamic schema.", readonly=True\n     )\n \n \n class IDexterityFTIModificationDescription(IModificationDescription):\n     """Descriptor passed with an IObjectModifiedEvent for a Dexterity FTI."""\n \n-    attribute = zope.schema.ASCII(title=u"Name of the attribute that was modified")\n+    attribute = zope.schema.ASCII(title="Name of the attribute that was modified")\n     oldValue = Attribute("Old value")\n \n \n@@ -101,7 +97,7 @@ class IDexterityFactory(IFactory):\n     """\n \n     portal_type = zope.schema.TextLine(\n-        title=u"Portal type name", description=u"The portal type this is an FTI for"\n+        title="Portal type name", description="The portal type this is an FTI for"\n     )\n \n \n@@ -118,7 +114,7 @@ class ISchemaInvalidatedEvent(Interface):\n     cache.\n     """\n \n-    portal_type = zope.schema.TextLine(title=u"FTI name", required=False)\n+    portal_type = zope.schema.TextLine(title="FTI name", required=False)\n \n \n # Content\ndiff --git a/plone/dexterity/meta.zcml b/plone/dexterity/meta.zcml\nindex f35d9532..1a9bc51a 100644\n--- a/plone/dexterity/meta.zcml\n+++ b/plone/dexterity/meta.zcml\n@@ -1,8 +1,12 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-    <!-- Include ZCML directive from plone.behavior -->\n-    <include package="plone.behavior" file="meta.zcml" />\n+  <!-- Include ZCML directive from plone.behavior -->\n+  <include\n+      package="plone.behavior"\n+      file="meta.zcml"\n+      />\n \n </configure>\ndiff --git a/plone/dexterity/primary.py b/plone/dexterity/primary.py\nindex 759d530e..3e98ffec 100644\n--- a/plone/dexterity/primary.py\n+++ b/plone/dexterity/primary.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity.interfaces import IDexterityContent\n from plone.dexterity.utils import iterSchemata\n from plone.rfc822.interfaces import IPrimaryField\n@@ -10,7 +9,7 @@\n \n @implementer(IPrimaryFieldInfo)\n @adapter(IDexterityContent)\n-class PrimaryFieldInfo(object):\n+class PrimaryFieldInfo:\n     def __init__(self, context):\n         self.context = context\n         primary = None\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 182e7556..41a74689 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .interfaces import IContentType\n from .interfaces import IDexterityFTI\n from .interfaces import IDexteritySchema\n@@ -16,7 +15,6 @@\n from zope.component import getAllUtilitiesRegisteredFor\n from zope.component import getUtility\n from zope.component import queryUtility\n-from zope.component.hooks import getSite\n from zope.dottedname.resolve import resolve\n from zope.globalrequest import getRequest\n from zope.interface import alsoProvides\n@@ -25,7 +23,6 @@\n \n import functools\n import logging\n-import six\n import types\n import warnings\n \n@@ -56,7 +53,7 @@ def invalidate_cache(fti):\n \n def lookup_fti(portal_type, cache=True):\n     # if its a string lookup fti\n-    if isinstance(portal_type, six.string_types):\n+    if isinstance(portal_type, str):\n         # looking up a utility is expensive, using the global request as\n         # cache is twice as fast\n         if cache:\n@@ -81,7 +78,7 @@ def lookup_fti(portal_type, cache=True):\n         return portal_type\n     raise ValueError(\n         "portal_type has to either string or IDexterityFTI instance but is "\n-        "{0!r}".format(portal_type)\n+        "{!r}".format(portal_type)\n     )\n \n \n@@ -118,7 +115,7 @@ def decorator(self, portal_type):\n     return decorator\n \n \n-class SchemaCache(object):\n+class SchemaCache:\n     """Simple schema cache for FTI based schema information.\n \n     This cache will store a Python object reference to the schema, as returned\n@@ -177,8 +174,8 @@ def behavior_registrations(self, fti):\n             if registration is None:\n                 # BBB - this case should be deprecated in v 3.0\n                 warnings.warn(\n-                    \'No behavior registration found for behavior named "{0}"\'\n-                    \' for factory "{1}"\'\n+                    \'No behavior registration found for behavior named "{}"\'\n+                    \' for factory "{}"\'\n                     " - trying deprecated fallback lookup (will be removed "\n                     \'in 3.0)..."\'.format(behavior_name, fti.getId()),\n                     DeprecationWarning,\n@@ -187,7 +184,7 @@ def behavior_registrations(self, fti):\n                     schema_interface = resolve(behavior_name)\n                 except (ValueError, ImportError):\n                     log.error(\n-                        "Error resolving behavior {0} for factory {1}".format(\n+                        "Error resolving behavior {} for factory {}".format(\n                             behavior_name, fti.getId()\n                         )\n                     )\n@@ -279,7 +276,7 @@ def modified(self, fti):\n \n \n @implementer(ISchemaInvalidatedEvent)\n-class SchemaInvalidatedEvent(object):\n+class SchemaInvalidatedEvent:\n     def __init__(self, portal_type):\n         self.portal_type = portal_type\n \n@@ -293,7 +290,7 @@ def invalidate_schema(event):\n \n \n # here starts the code dealing wih dynamic schemas.\n-class SchemaNameEncoder(object):\n+class SchemaNameEncoder:\n     """Schema name encoding"""\n \n     key = (\n@@ -321,7 +318,7 @@ def split(self, s):\n         return [self.decode(a) for a in s.split("_0_")]\n \n \n-def portalTypeToSchemaName(portal_type, schema=u"", prefix=None, suffix=None):\n+def portalTypeToSchemaName(portal_type, schema="", prefix=None, suffix=None):\n     """Return a canonical interface name for a generated schema interface."""\n     if prefix is None:\n         siteroot = None\n@@ -350,7 +347,7 @@ def splitSchemaName(schemaName):\n     encoder = SchemaNameEncoder()\n     items = encoder.split(schemaName)\n     if len(items) == 2:\n-        return items[0], items[1], u""\n+        return items[0], items[1], ""\n     elif len(items) == 3:\n         return items[0], items[1], items[2]\n     else:\n@@ -359,7 +356,7 @@ def splitSchemaName(schemaName):\n \n # Dynamic module factory\n @implementer(IDynamicObjectFactory)\n-class SchemaModuleFactory(object):\n+class SchemaModuleFactory:\n     """Create dynamic schema interfaces on the fly"""\n \n     lock = RLock()\n@@ -423,7 +420,7 @@ def __call__(self, name, module):\n \n \n @implementer(ISchemaPolicy)\n-class DexteritySchemaPolicy(object):\n+class DexteritySchemaPolicy:\n     """Determines how and where imported dynamic interfaces are created.\n     Note that these schemata are never used directly. Rather, they are merged\n     into a schema with a proper name and module, either dynamically or\ndiff --git a/plone/dexterity/tests/__init__.py b/plone/dexterity/tests/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/dexterity/tests/__init__.py\n+++ b/plone/dexterity/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/dexterity/tests/case.py b/plone/dexterity/tests/case.py\nindex b98db415..f4d026cd 100644\n--- a/plone/dexterity/tests/case.py\n+++ b/plone/dexterity/tests/case.py\n@@ -1,18 +1,11 @@\n-# -*- coding: utf-8 -*-\n-from plone.dexterity.bbb import HAS_WEBDAV\n+from unittest.mock import Mock\n \n import gc\n-import six\n import unittest\n import zope.component\n import zope.component.testing\n import zope.globalrequest\n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from mock import Mock\n-\n \n class MockTestCase(unittest.TestCase):\n     """Base class for tests using mocks."""\n@@ -38,11 +31,11 @@ def create_dummy(self, **kw):\n     # Help register mock components. The tear-down method will\n     # wipe the registry each time.\n \n-    def mock_utility(self, mock, provides, name=u""):\n+    def mock_utility(self, mock, provides, name=""):\n         """Register the mock as a utility providing the given interface"""\n         zope.component.provideUtility(provides=provides, component=mock, name=name)\n \n-    def mock_adapter(self, mock, provides, adapts, name=u""):\n+    def mock_adapter(self, mock, provides, adapts, name=""):\n         """Register the mock as an adapter providing the given interface\n         and adapting the given interface(s)\n         """\n@@ -89,12 +82,16 @@ def patch_global(self, orig, mock=None, **kw):\n         return mock\n \n \n-class Dummy(object):\n+class Dummy:\n     """Dummy object with arbitrary attributes"""\n \n     def __init__(self, **kw):\n         self.__dict__.update(kw)\n \n+    def contentIds(self):\n+        # testAddContentToContainer_preserves_existing_id fails without this.\n+        return []\n+\n \n class ItemDummy(Dummy):\n     """Dummy objects with title getter and setter"""\n@@ -117,6 +114,6 @@ def _global_replace(remove, install):\n     """Replace object \'remove\' with object \'install\' on all dictionaries."""\n     for referrer in gc.get_referrers(remove):\n         if type(referrer) is dict:\n-            for key, value in list(six.iteritems(referrer)):\n+            for key, value in list(referrer.items()):\n                 if value is remove:\n                     referrer[key] = install\ndiff --git a/plone/dexterity/tests/schemata.py b/plone/dexterity/tests/schemata.py\nindex d9ff6bed..13db211f 100644\n--- a/plone/dexterity/tests/schemata.py\n+++ b/plone/dexterity/tests/schemata.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.supermodel.interfaces import FILENAME_KEY\n from zope import schema\n from zope.interface import Interface\n@@ -7,9 +6,9 @@\n class ITestSchema(Interface):\n     """Schema used for testing"""\n \n-    title = schema.TextLine(title=u"Title", description=u"Administrative title")\n+    title = schema.TextLine(title="Title", description="Administrative title")\n \n-    description = schema.Text(title=u"Description", required=False)\n+    description = schema.Text(title="Description", required=False)\n \n \n class ITaggedValueSchema(Interface):\ndiff --git a/plone/dexterity/tests/test.xml b/plone/dexterity/tests/test.xml\nindex 21edb44c..8c31f84f 100644\n--- a/plone/dexterity/tests/test.xml\n+++ b/plone/dexterity/tests/test.xml\n@@ -1,13 +1,17 @@\n <model xmlns="http://namespaces.plone.org/supermodel/schema">\n-    <schema>\n-        <field name="title" type="zope.schema.TextLine">\n-            <title>Title</title>\n-            <description>Title used in listings</description>\n-            <required>True</required>\n-        </field>\n-        <field name="description" type="zope.schema.Text">\n-            <title>Description</title>\n-            <required>False</required>\n-        </field>\n-    </schema>\n+  <schema>\n+    <field name="title"\n+           type="zope.schema.TextLine"\n+    >\n+      <title>Title</title>\n+      <description>Title used in listings</description>\n+      <required>True</required>\n+    </field>\n+    <field name="description"\n+           type="zope.schema.Text"\n+    >\n+      <title>Description</title>\n+      <required>False</required>\n+    </field>\n+  </schema>\n </model>\ndiff --git a/plone/dexterity/tests/test_behavior.py b/plone/dexterity/tests/test_behavior.py\nindex dcf32641..ee45d913 100644\n--- a/plone/dexterity/tests/test_behavior.py\n+++ b/plone/dexterity/tests/test_behavior.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.behavior.interfaces import IBehavior\n from plone.dexterity.behavior import DexterityBehaviorAssignable\n@@ -27,7 +26,7 @@ class TestBehavior(MockTestCase):\n     def test_supports(self):\n \n         # Context mock\n-        context_dummy = self.create_dummy(portal_type=u"testtype")\n+        context_dummy = self.create_dummy(portal_type="testtype")\n \n         # Behavior mock\n         behavior_dummy_1 = self.create_dummy(interface=IOne)\n@@ -36,9 +35,9 @@ def test_supports(self):\n         self.mock_utility(behavior_dummy_4, IBehavior, name=IFour.__identifier__)\n \n         # FTI mock\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.behaviors = [IOne.__identifier__, IFour.__identifier__]\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n         assignable = DexterityBehaviorAssignable(context_dummy)\n \n@@ -50,16 +49,16 @@ def test_supports(self):\n     def test_enumerate(self):\n \n         # Context mock\n-        context_dummy = self.create_dummy(portal_type=u"testtype")\n+        context_dummy = self.create_dummy(portal_type="testtype")\n \n         # Behavior mock\n         behavior_dummy = self.create_dummy()\n         self.mock_utility(behavior_dummy, IBehavior, name=IOne.__identifier__)\n \n         # FTI mock\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.behaviors = [IOne.__identifier__]\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n         assignable = DexterityBehaviorAssignable(context_dummy)\n \ndiff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex 205c6ac7..d4293a44 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -1,9 +1,9 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from datetime import date\n from datetime import datetime\n from DateTime import DateTime\n from plone.autoform.interfaces import IFormFieldProvider\n+from plone.base.interfaces import IConstrainTypes\n from plone.behavior.interfaces import IBehavior\n from plone.behavior.interfaces import IBehaviorAssignable\n from plone.behavior.registration import BehaviorRegistration\n@@ -17,31 +17,20 @@\n from plone.dexterity.schema import SCHEMA_CACHE\n from plone.folder.default import DefaultOrdering\n from Products.CMFCore.interfaces import ITypesTool\n-from Products.CMFPlone.interfaces import IConstrainTypes\n from pytz import timezone\n+from unittest.mock import Mock\n+from unittest.mock import patch\n from zope.annotation.attribute import AttributeAnnotations\n from zope.component import getUtility\n from zope.component import provideAdapter\n+from zope.globalrequest import setRequest\n from zope.interface import alsoProvides\n from zope.interface import Interface\n-from zope.globalrequest import setRequest\n from zope.publisher.browser import TestRequest\n \n-import six\n import zope.schema\n \n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from mock import Mock\n-\n-try:\n-    from unittest.mock import patch\n-except ImportError:\n-    from mock import patch\n-\n-\n class TestContent(MockTestCase):\n     def setUp(self):\n         setRequest(TestRequest())\n@@ -50,7 +39,7 @@ def setUp(self):\n         provideAdapter(AttributeAnnotations)\n \n     def test_provided_by_item(self):\n-        class FauxDataManager(object):\n+        class FauxDataManager:\n             def setstate(self, obj):\n                 pass\n \n@@ -61,14 +50,14 @@ def register(self, obj):\n                 pass\n \n         # Dummy instance\n-        item = Item(id=u"id")\n-        item.portal_type = u"testtype"\n+        item = Item(id="id")\n+        item.portal_type = "testtype"\n         item._p_jar = FauxDataManager()\n \n         # Dummy schema\n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         class IMarker(Interface):\n             pass\n@@ -76,7 +65,7 @@ class IMarker(Interface):\n         # FTI mock\n         fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         self.assertFalse(ISchema.implementedBy(Item))\n@@ -106,7 +95,7 @@ def test_provided_by_subclass(self):\n         class MyItem(Item):\n             pass\n \n-        class FauxDataManager(object):\n+        class FauxDataManager:\n             def setstate(self, obj):\n                 pass\n \n@@ -117,22 +106,22 @@ def register(self, obj):\n                 pass\n \n         # Dummy instance\n-        item = MyItem(id=u"id")\n+        item = MyItem(id="id")\n         item.portal_type = "testtype"\n         item._p_jar = FauxDataManager()\n \n         # Dummy schema\n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         class IMarker(Interface):\n             pass\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         self.assertFalse(ISchema.implementedBy(MyItem))\n@@ -161,7 +150,7 @@ class MyItem(Item):\n             pass\n \n         # Dummy instance\n-        item = MyItem(id=u"id")\n+        item = MyItem(id="id")\n         item.portal_type = "testtype"\n \n         # Without a persistence jar, the _p_changed check doesn\'t work. In\n@@ -170,16 +159,16 @@ class MyItem(Item):\n \n         # Dummy schema\n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         class IMarker(Interface):\n             pass\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         self.assertFalse(ISchema.implementedBy(MyItem))\n@@ -211,7 +200,7 @@ class IMarkerCustom(Interface):\n             pass\n \n         # Fake data manager\n-        class FauxDataManager(object):\n+        class FauxDataManager:\n             def setstate(self, obj):\n                 pass\n \n@@ -222,7 +211,7 @@ def register(self, obj):\n                 pass\n \n         # Dummy instance\n-        item = MyItem(id=u"id")\n+        item = MyItem(id="id")\n         item.portal_type = "testtype"\n \n         # Without a persistence jar, the _p_changed check doesn\'t work. In\n@@ -231,8 +220,8 @@ def register(self, obj):\n \n         # Dummy schema\n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         # Schema is not implemented by class or provided by instance\n         self.assertFalse(ISchema.implementedBy(MyItem))\n@@ -246,23 +235,23 @@ class ISchema(Interface):\n         class IBehavior1(Interface):\n             pass\n \n-        behavior1 = BehaviorRegistration(u"Behavior1", "", IBehavior1, None, None)\n+        behavior1 = BehaviorRegistration("Behavior1", "", IBehavior1, None, None)\n         self.mock_utility(behavior1, IBehavior, name="behavior1")\n \n         class IBehavior2(Interface):\n-            baz = zope.schema.TextLine(title=u"baz", default=u"baz")\n+            baz = zope.schema.TextLine(title="baz", default="baz")\n \n         class IMarker2(Interface):\n             pass\n \n-        behavior2 = BehaviorRegistration(u"Behavior2", "", IBehavior2, IMarker2, None)\n+        behavior2 = BehaviorRegistration("Behavior2", "", IBehavior2, IMarker2, None)\n         self.mock_utility(behavior2, IBehavior, name="behavior2")\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         fti_mock.behaviors = ["behavior1", "behavior2"]\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         # start clean\n@@ -282,7 +271,7 @@ class IMarker2(Interface):\n         self.assertTrue(IMarker2.providedBy(item))\n \n         # Subtypes provide field defaults.\n-        self.assertEqual(u"baz", getattr(item, "baz", None))\n+        self.assertEqual("baz", getattr(item, "baz", None))\n \n         # We also need to ensure that the _v_ attribute doesn\'t hide any\n         # interface set directly on the instance with alsoProvides() or\n@@ -304,7 +293,7 @@ class MyItem(Item):\n             pass\n \n         # Fake data manager\n-        class FauxDataManager(object):\n+        class FauxDataManager:\n             def setstate(self, obj):\n                 pass\n \n@@ -315,7 +304,7 @@ def register(self, obj):\n                 pass\n \n         # Dummy instance\n-        item = MyItem(id=u"id")\n+        item = MyItem(id="id")\n         item.portal_type = "testtype"\n \n         # Without a persistence jar, the _p_changed check doesn\'t work. In\n@@ -324,8 +313,8 @@ def register(self, obj):\n \n         # Dummy schema\n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         # Schema is not implemented by class or provided by instance\n         self.assertFalse(ISchema.implementedBy(MyItem))\n@@ -335,7 +324,7 @@ class ISchema(Interface):\n         class IBehavior1(Interface):\n             pass\n \n-        behavior1 = BehaviorRegistration(u"Behavior1", "", IBehavior1, None, None)\n+        behavior1 = BehaviorRegistration("Behavior1", "", IBehavior1, None, None)\n         self.mock_utility(behavior1, IBehavior, name="behavior1")\n \n         class IBehavior2(Interface):\n@@ -344,7 +333,7 @@ class IBehavior2(Interface):\n         class IMarker2(Interface):\n             pass\n \n-        behavior2 = BehaviorRegistration(u"Behavior2", "", IBehavior2, IMarker2, None)\n+        behavior2 = BehaviorRegistration("Behavior2", "", IBehavior2, IMarker2, None)\n         self.mock_utility(behavior2, IBehavior, name="behavior2")\n \n         class IBehavior3(Interface):\n@@ -353,7 +342,7 @@ class IBehavior3(Interface):\n         class IMarker3(Interface):\n             pass\n \n-        behavior3 = BehaviorRegistration(u"Behavior3", "", IBehavior3, IMarker3, None)\n+        behavior3 = BehaviorRegistration("Behavior3", "", IBehavior3, IMarker3, None)\n         self.mock_utility(behavior3, IBehavior, name="behavior3")\n \n         self.mock_adapter(\n@@ -361,9 +350,9 @@ class IMarker3(Interface):\n         )\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         # start clean\n@@ -407,102 +396,102 @@ class IMarker3(Interface):\n     def test_getattr_consults_schema_item(self):\n \n         content = Item()\n-        content.id = u"id"\n-        content.portal_type = u"testtype"\n+        content.id = "id"\n+        content.portal_type = "testtype"\n \n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         SCHEMA_CACHE.invalidate("testtype")\n \n-        self.assertEqual(u"foo_default", content.foo)\n+        self.assertEqual("foo_default", content.foo)\n         self.assertEqual(None, content.bar)\n-        self.assertEqual(u"id", content.id)\n+        self.assertEqual("id", content.id)\n         self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_consults_schema_container(self):\n \n         content = Container()\n-        content.id = u"id"\n-        content.portal_type = u"testtype"\n+        content.id = "id"\n+        content.portal_type = "testtype"\n \n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         SCHEMA_CACHE.invalidate("testtype")\n \n-        self.assertEqual(u"foo_default", content.foo)\n+        self.assertEqual("foo_default", content.foo)\n         self.assertEqual(None, content.bar)\n-        self.assertEqual(u"id", content.id)\n+        self.assertEqual("id", content.id)\n         self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_consults_schema_item_default_factory_with_context(self):\n \n         content = Item()\n-        content.id = u"id"\n-        content.portal_type = u"testtype"\n+        content.id = "id"\n+        content.portal_type = "testtype"\n \n         from zope.interface import provider\n         from zope.schema.interfaces import IContextAwareDefaultFactory\n \n         @provider(IContextAwareDefaultFactory)\n         def defaultFactory(context):\n-            return u"{0:s}_{1:s}".format(context.id, context.portal_type)\n+            return f"{context.id:s}_{context.portal_type:s}"\n \n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", defaultFactory=defaultFactory)\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", defaultFactory=defaultFactory)\n+            bar = zope.schema.TextLine(title="bar")\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         SCHEMA_CACHE.invalidate("testtype")\n \n-        self.assertEqual(u"id_testtype", content.foo)\n+        self.assertEqual("id_testtype", content.foo)\n         self.assertEqual(None, content.bar)\n-        self.assertEqual(u"id", content.id)\n+        self.assertEqual("id", content.id)\n         self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_on_container_returns_children(self):\n \n         content = Container()\n-        content.id = u"id"\n-        content.portal_type = u"testtype"\n+        content.id = "id"\n+        content.portal_type = "testtype"\n \n         content["foo"] = Item("foo")\n         content["quux"] = Item("quux")\n \n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         SCHEMA_CACHE.invalidate("testtype")\n \n         # Schema field masks contained item\n-        self.assertEqual(u"foo_default", content.foo)\n+        self.assertEqual("foo_default", content.foo)\n \n         # But we can still obtain an item\n         self.assertTrue(isinstance(content["foo"], Item))\n@@ -544,40 +533,32 @@ def test_name_and_id_in_sync(self):\n         i = Item()\n         self.assertEqual("", i.id)\n         self.assertEqual("", i.getId())\n-        self.assertEqual(u"", i.__name__)\n+        self.assertEqual("", i.__name__)\n \n         i = Item()\n         i.id = "foo"\n         self.assertEqual("foo", i.id)\n         self.assertEqual("foo", i.getId())\n-        self.assertEqual(u"foo", i.__name__)\n+        self.assertEqual("foo", i.__name__)\n \n         i = Item()\n-        i.__name__ = u"foo"\n+        i.__name__ = "foo"\n         self.assertEqual("foo", i.id)\n         self.assertEqual("foo", i.getId())\n-        self.assertEqual(u"foo", i.__name__)\n+        self.assertEqual("foo", i.__name__)\n \n     def test_name_unicode_id_str(self):\n \n         i = Item()\n-        if six.PY2:\n-            try:\n-                i.__name__ = b"\\xc3\\xb8".decode("utf-8")\n-            except UnicodeEncodeError:\n-                pass\n-            else:\n-                self.fail()\n-        else:\n-            i.__name__ = b"\\xc3\\xb8".decode("utf-8")\n+        i.__name__ = b"\\xc3\\xb8".decode("utf-8")\n \n-        i.__name__ = u"o"\n+        i.__name__ = "o"\n \n-        self.assertEqual(u"o", i.__name__)\n+        self.assertEqual("o", i.__name__)\n         self.assertEqual("o", i.id)\n         self.assertEqual("o", i.getId())\n \n-        self.assertTrue(isinstance(i.__name__, six.text_type))\n+        self.assertTrue(isinstance(i.__name__, str))\n         self.assertTrue(isinstance(i.id, str))\n         self.assertTrue(isinstance(i.getId(), str))\n \n@@ -592,10 +573,10 @@ def test_item_dublincore(self):\n         self.addCleanup(datetime_patcher.stop)\n \n         i = Item(\n-            title=u"Emperor Penguin",\n-            description=u"One of the most magnificent birds.",\n-            subject=u"Penguins",\n-            contributors=u"admin",\n+            title="Emperor Penguin",\n+            description="One of the most magnificent birds.",\n+            subject="Penguins",\n+            contributors="admin",\n             effective_date="08/20/2010",\n             expiration_date="07/09/2013",\n             format="text/plain",\n@@ -604,13 +585,13 @@ def test_item_dublincore(self):\n         )\n \n         summer_timezone = i.effective_date.timezone()\n-        self.assertEqual(i.title, u"Emperor Penguin")\n+        self.assertEqual(i.title, "Emperor Penguin")\n         self.assertEqual(i.Title(), "Emperor Penguin")\n-        self.assertEqual(i.description, u"One of the most magnificent birds.")\n+        self.assertEqual(i.description, "One of the most magnificent birds.")\n         self.assertEqual(i.Description(), "One of the most magnificent birds.")\n-        self.assertEqual(i.subject, (u"Penguins",))\n+        self.assertEqual(i.subject, ("Penguins",))\n         self.assertEqual(i.Subject(), ("Penguins",))\n-        self.assertEqual(i.contributors, (u"admin",))\n+        self.assertEqual(i.contributors, ("admin",))\n         self.assertEqual(i.listContributors(), ("admin",))\n         self.assertEqual(i.Contributors(), ("admin",))\n         self.assertEqual(i.format, "text/plain")\n@@ -648,10 +629,10 @@ def test_item_dublincore_date(self):\n         self.addCleanup(datetime_patcher.stop)\n \n         i = Item(\n-            title=u"Emperor Penguin",\n-            description=u"One of the most magnificent birds.",\n-            subject=u"Penguins",\n-            contributors=u"admin",\n+            title="Emperor Penguin",\n+            description="One of the most magnificent birds.",\n+            subject="Penguins",\n+            contributors="admin",\n             effective_date=date(2010, 8, 20),\n             expiration_date=date(2013, 7, 9),\n             format="text/plain",\n@@ -688,10 +669,10 @@ def test_item_dublincore_datetime(self):\n         mocked_datetime.return_value = DateTime(2014, 6, 1)\n         self.addCleanup(datetime_patcher.stop)\n         i = Item(\n-            title=u"Emperor Penguin",\n-            description=u"One of the most magnificent birds.",\n-            subject=u"Penguins",\n-            contributors=u"admin",\n+            title="Emperor Penguin",\n+            description="One of the most magnificent birds.",\n+            subject="Penguins",\n+            contributors="admin",\n             effective_date=datetime(2010, 8, 20, 12, 59, 59, 0, timezone("US/Eastern")),\n             expiration_date=datetime(2013, 7, 9, 12, 59, 59, 0, timezone("US/Eastern")),\n             format="text/plain",\n@@ -738,16 +719,16 @@ def mock_addCreator():\n \n     def test_item_addCreator(self):\n         i = Item()\n-        i.addCreator(u"harvey")\n-        self.assertEqual(i.creators, (u"harvey",))\n-        self.assertEqual(i.listCreators(), (u"harvey",))\n+        i.addCreator("harvey")\n+        self.assertEqual(i.creators, ("harvey",))\n+        self.assertEqual(i.listCreators(), ("harvey",))\n         self.assertEqual(i.Creator(), "harvey")\n \n     def test_item_Type(self):\n         i = Item()\n \n         def mock_getTypeInfo():\n-            class TypeInfo(object):\n+            class TypeInfo:\n                 def Title(self):\n                     return "Foo"\n \n@@ -764,8 +745,8 @@ def test_item_init_nondc_kwargs(self):\n     def test_container_init_dublincore(self):\n         from DateTime.DateTime import DateTime\n \n-        c = Container(title=u"Test title", language="en", effective_date="2010-08-20")\n-        self.assertEqual(c.title, u"Test title")\n+        c = Container(title="Test title", language="en", effective_date="2010-08-20")\n+        self.assertEqual(c.title, "Test title")\n         self.assertEqual(c.language, "en")\n         self.assertTrue(isinstance(c.effective_date, DateTime))\n \n@@ -777,23 +758,23 @@ def test_setTitle_converts_to_unicode(self):\n         # fix http://code.google.com/p/dexterity/issues/detail?id=145\n         i = Item()\n         i.setTitle("\xc3\xa9")\n-        self.assertEqual(i.title, u"\xc3\xa9")\n-        i.setTitle(u"\xc3\xa9")\n-        self.assertEqual(i.title, u"\xc3\xa9")\n+        self.assertEqual(i.title, "\xc3\xa9")\n+        i.setTitle("\xc3\xa9")\n+        self.assertEqual(i.title, "\xc3\xa9")\n         c = Container()\n         c.setTitle("\xc3\xa9")\n-        self.assertEqual(c.title, u"\xc3\xa9")\n-        c.setTitle(u"\xc3\xa9")\n-        self.assertEqual(c.title, u"\xc3\xa9")\n+        self.assertEqual(c.title, "\xc3\xa9")\n+        c.setTitle("\xc3\xa9")\n+        self.assertEqual(c.title, "\xc3\xa9")\n \n     def test_Title_converts_to_utf8(self):\n         i = Item()\n-        i.title = u"\xc3\xa9"\n+        i.title = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", i.Title())\n         i.title = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", i.Title())\n         c = Container()\n-        c.title = u"\xc3\xa9"\n+        c.title = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", c.Title())\n         c.title = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", c.Title())\n@@ -806,14 +787,14 @@ def test_Title_handles_None(self):\n \n     def test_Creator_converts_to_utf8(self):\n         i = Item()\n-        i.creators = (u"\xc3\xa9",)\n+        i.creators = ("\xc3\xa9",)\n         self.assertEqual("\xc3\xa9", i.Creator())\n         i.creators = ("\xc3\xa9",)\n         self.assertEqual("\xc3\xa9", i.Creator())\n         c = Container()\n-        c.creators = (u"\xc3\xa9",)\n+        c.creators = ("\xc3\xa9",)\n         self.assertEqual("\xc3\xa9", c.Creator())\n-        self.assertEqual((u"\xc3\xa9",), c.creators)\n+        self.assertEqual(("\xc3\xa9",), c.creators)\n \n     def test_Creator_handles_None(self):\n         i = Item(creators=None)\n@@ -823,12 +804,12 @@ def test_Creator_handles_None(self):\n \n     def test_Description_converts_to_utf8(self):\n         i = Item()\n-        i.description = u"\xc3\xa9"\n+        i.description = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", i.Description())\n         i.description = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", i.Description())\n         c = Container()\n-        c.description = u"\xc3\xa9"\n+        c.description = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", c.Description())\n         c.description = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", c.Description())\n@@ -836,14 +817,14 @@ def test_Description_converts_to_utf8(self):\n     def test_setDescription_converts_to_unicode(self):\n         i = Item()\n         i.setDescription("\xc3\xa9")\n-        self.assertEqual(i.description, u"\xc3\xa9")\n-        i.setDescription(u"\xc3\xa9")\n-        self.assertEqual(i.description, u"\xc3\xa9")\n+        self.assertEqual(i.description, "\xc3\xa9")\n+        i.setDescription("\xc3\xa9")\n+        self.assertEqual(i.description, "\xc3\xa9")\n         c = Container()\n         c.setDescription("\xc3\xa9")\n-        self.assertEqual(c.description, u"\xc3\xa9")\n-        c.setDescription(u"\xc3\xa9")\n-        self.assertEqual(c.description, u"\xc3\xa9")\n+        self.assertEqual(c.description, "\xc3\xa9")\n+        c.setDescription("\xc3\xa9")\n+        self.assertEqual(c.description, "\xc3\xa9")\n \n     def test_Description_handles_None(self):\n         i = Item(description=None)\n@@ -853,17 +834,17 @@ def test_Description_handles_None(self):\n \n     def test_Description_removes_newlines(self):\n         i = Item()\n-        i.description = u"foo\\r\\nbar\\nbaz\\r"\n+        i.description = "foo\\r\\nbar\\nbaz\\r"\n         self.assertEqual("foo bar baz ", i.Description())\n \n     def test_Subject_converts_to_utf8(self):\n         i = Item()\n-        i.subject = (u"\xc3\xa9",)\n+        i.subject = ("\xc3\xa9",)\n         self.assertEqual(("\xc3\xa9",), i.Subject())\n         i.subject = ("\xc3\xa9",)\n         self.assertEqual(("\xc3\xa9",), i.Subject())\n         c = Container()\n-        c.subject = (u"\xc3\xa9",)\n+        c.subject = ("\xc3\xa9",)\n         self.assertEqual(("\xc3\xa9",), c.Subject())\n         c.subject = ("\xc3\xa9",)\n         self.assertEqual(("\xc3\xa9",), c.Subject())\n@@ -871,14 +852,14 @@ def test_Subject_converts_to_utf8(self):\n     def test_setSubject_converts_to_unicode(self):\n         i = Item()\n         i.setSubject(("\xc3\xa9",))\n-        self.assertEqual(i.subject, (u"\xc3\xa9",))\n-        i.setSubject((u"\xc3\xa9",))\n-        self.assertEqual(i.subject, (u"\xc3\xa9",))\n+        self.assertEqual(i.subject, ("\xc3\xa9",))\n+        i.setSubject(("\xc3\xa9",))\n+        self.assertEqual(i.subject, ("\xc3\xa9",))\n         c = Container()\n         c.setSubject(("\xc3\xa9",))\n-        self.assertEqual(c.subject, (u"\xc3\xa9",))\n-        c.setSubject((u"\xc3\xa9",))\n-        self.assertEqual(c.subject, (u"\xc3\xa9",))\n+        self.assertEqual(c.subject, ("\xc3\xa9",))\n+        c.setSubject(("\xc3\xa9",))\n+        self.assertEqual(c.subject, ("\xc3\xa9",))\n \n     def test_Subject_handles_None(self):\n         i = Item()\n@@ -892,7 +873,7 @@ def test_field_default_independence(self):\n         # Ensure that fields using the default value aren\'t being assigned\n         # shallow copies.\n \n-        class FauxDataManager(object):\n+        class FauxDataManager:\n             def setstate(self, obj):\n                 pass\n \n@@ -903,26 +884,26 @@ def register(self, obj):\n                 pass\n \n         # Dummy instances\n-        foo = Item(id=u"foo")\n+        foo = Item(id="foo")\n         foo.portal_type = "testtype"\n         foo._p_jar = FauxDataManager()\n \n-        bar = Item(id=u"bar")\n+        bar = Item(id="bar")\n         bar.portal_type = "testtype"\n         bar._p_jar = FauxDataManager()\n \n-        baz = Container(id=u"baz")\n+        baz = Container(id="baz")\n         baz.portal_type = "testtype"\n         baz._p_jar = FauxDataManager()\n \n         # Dummy schema\n         class ISchema(Interface):\n-            listfield = zope.schema.List(title=u"listfield", default=[1, 2])\n+            listfield = zope.schema.List(title="listfield", default=[1, 2])\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # Ensure that the field of foo is not the same field, also attached to\n         # bar.\n@@ -961,25 +942,25 @@ def test_container_manage_delObjects(self):\n         item.__class__.__ac_permissions__ = perms_before\n \n     def test_iconstraintypes_adapter(self):\n-        class DummyConstrainTypes(object):\n+        class DummyConstrainTypes:\n             def __init__(self, context):\n                 self.context = context\n \n             def allowedContentTypes(self):\n-                fti = getUtility(IDexterityFTI, name=u"testtype")\n+                fti = getUtility(IDexterityFTI, name="testtype")\n                 return [fti]\n \n         self.mock_adapter(DummyConstrainTypes, IConstrainTypes, (IDexterityContainer,))\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         folder = Container(id="testfolder")\n \n         self.assertEqual(folder.allowedContentTypes(), [fti_mock])\n         self.assertRaises(\n-            ValueError, folder.invokeFactory, u"disallowed_type", id="test"\n+            ValueError, folder.invokeFactory, "disallowed_type", id="test"\n         )\n \n     def test_verifyObjectPaste_paste_without_portal_type(self):\n@@ -1063,13 +1044,13 @@ class ITestBehavior(Interface):\n             DexterityBehaviorAssignable, IBehaviorAssignable, (IDexterityContent,)\n         )\n \n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ITest)\n         fti_mock.behaviors = ["test_behavior"]\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         behavior_reg = BehaviorRegistration(\n-            u"Test Behavior", "", ITestBehavior, ITestBehavior, None\n+            "Test Behavior", "", ITestBehavior, ITestBehavior, None\n         )\n         self.mock_utility(behavior_reg, IBehavior, name="test_behavior")\n \ndiff --git a/plone/dexterity/tests/test_content_integration.py b/plone/dexterity/tests/test_content_integration.py\nindex 9291798d..b095769b 100644\n--- a/plone/dexterity/tests/test_content_integration.py\n+++ b/plone/dexterity/tests/test_content_integration.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.testing.zca import UNIT_TESTING\n \n import unittest\ndiff --git a/plone/dexterity/tests/test_exportimport.py b/plone/dexterity/tests/test_exportimport.py\nindex 97cd983d..78f6fbe1 100644\n--- a/plone/dexterity/tests/test_exportimport.py\n+++ b/plone/dexterity/tests/test_exportimport.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n import unittest\n \n \ndiff --git a/plone/dexterity/tests/test_factory.py b/plone/dexterity/tests/test_factory.py\nindex df356903..2db96df9 100644\n--- a/plone/dexterity/tests/test_factory.py\n+++ b/plone/dexterity/tests/test_factory.py\n@@ -1,17 +1,11 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.dexterity.factory import DexterityFactory\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n+from unittest.mock import Mock\n from zope.interface import Interface\n \n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from mock import Mock\n-\n-\n class IDummy(Interface):\n     pass\n \n@@ -19,27 +13,27 @@ class IDummy(Interface):\n class TestFactory(MockTestCase):\n     def test_title(self):\n         fti_mock = Mock(spec=DexterityFTI, title="Mock type")\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         self.assertEqual("Mock type", factory.title)\n \n     def test_description(self):\n         fti_mock = Mock(spec=DexterityFTI, description="Mock type description")\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         self.assertEqual("Mock type description", factory.description)\n \n     def test_get_interfaces(self):\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.lookupSchema = Mock(return_value=IDummy)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         spec = factory.getInterfaces()\n \n-        self.assertEqual(u"testtype", spec.__name__)\n+        self.assertEqual("testtype", spec.__name__)\n         self.assertEqual([IDummy, Interface], list(spec.flattened()))\n \n     # We expect the following when creating an object from the factory:\n@@ -52,7 +46,7 @@ def test_get_interfaces(self):\n     def test_create_with_schema_already_provided_and_portal_type_set(self):\n \n         # Object returned by class\n-        obj_mock = Mock(portal_type=u"testtype")\n+        obj_mock = Mock(portal_type="testtype")\n \n         # Class set by factory\n         klass_mock = Mock(return_value=obj_mock)\n@@ -64,9 +58,9 @@ def test_create_with_schema_already_provided_and_portal_type_set(self):\n \n         # FTI\n         fti_mock = Mock(spec=DexterityFTI, klass="my.mocked.ContentTypeClass")\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         self.assertEqual(obj_mock, factory())\n \n     def test_create_sets_portal_type_if_not_set(self):\n@@ -85,11 +79,11 @@ def test_create_sets_portal_type_if_not_set(self):\n         # FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.klass = "my.mocked.ContentTypeClass"\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         self.assertEqual(obj_mock, factory())\n-        self.assertEqual(obj_mock.portal_type, u"testtype")\n+        self.assertEqual(obj_mock.portal_type, "testtype")\n \n     def test_create_sets_portal_type_if_wrong(self):\n \n@@ -107,16 +101,16 @@ def test_create_sets_portal_type_if_wrong(self):\n         # FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.klass = "my.mocked.ContentTypeClass"\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         self.assertEqual(obj_mock, factory())\n-        self.assertEqual(obj_mock.portal_type, u"testtype")\n+        self.assertEqual(obj_mock.portal_type, "testtype")\n \n     def test_create_initialises_schema_if_not_provided(self):\n \n         # Object returned by class\n-        obj_mock = Mock(portal_type=u"testtype")\n+        obj_mock = Mock(portal_type="testtype")\n \n         # Class set by factory\n         klass_mock = Mock(return_value=obj_mock)\n@@ -129,15 +123,15 @@ def test_create_initialises_schema_if_not_provided(self):\n         # FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.klass = "my.mocked.ContentTypeClass"\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         self.assertEqual(obj_mock, factory())\n \n     def test_factory_passes_args_and_kwargs(self):\n \n         # Object returned by class\n-        obj_mock = Mock(portal_type=u"testtype")\n+        obj_mock = Mock(portal_type="testtype")\n \n         # Class set by factory\n         klass_mock = Mock(return_value=obj_mock)\n@@ -150,8 +144,8 @@ def test_factory_passes_args_and_kwargs(self):\n         # FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.klass = "my.mocked.ContentTypeClass"\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n-        self.assertEqual(obj_mock, factory(u"id", title=u"title"))\n-        klass_mock.assert_called_once_with(u"id", title=u"title")\n+        factory = DexterityFactory(portal_type="testtype")\n+        self.assertEqual(obj_mock, factory("id", title="title"))\n+        klass_mock.assert_called_once_with("id", title="title")\ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex e207ad88..dffa9e22 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.dexterity.factory import DexterityFactory\n from plone.dexterity.fti import DexterityFTI\n@@ -13,6 +12,7 @@\n from plone.dexterity.tests.schemata import ITestSchema\n from plone.supermodel.model import Model\n from Products.CMFCore.interfaces import ISiteRoot\n+from unittest.mock import Mock\n from zope.component import getGlobalSiteManager\n from zope.component import queryUtility\n from zope.component.hooks import setHooks\n@@ -32,17 +32,11 @@\n import zope.schema\n \n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from mock import Mock\n-\n-\n-class TestClass(object):\n+class TestClass:\n     meta_type = "Test Class"\n \n \n-class TestClass2(object):\n+class TestClass2:\n     meta_type = "Test Class 2"\n \n \n@@ -58,26 +52,26 @@ class DexterityMtimeFTI(DexterityFTI):\n \n class TestFTI(MockTestCase):\n     def test_factory_name_is_fti_id(self):\n-        fti = DexterityFTI(u"testtype")\n-        self.assertEqual(u"testtype", fti.getId())\n-        self.assertEqual(u"testtype", fti.factory)\n+        fti = DexterityFTI("testtype")\n+        self.assertEqual("testtype", fti.getId())\n+        self.assertEqual("testtype", fti.factory)\n \n     def test_hasDynamicSchema(self):\n-        fti = DexterityFTI(u"testtype")\n-        fti.schema = u"dummy.schema"\n+        fti = DexterityFTI("testtype")\n+        fti.schema = "dummy.schema"\n         self.assertEqual(False, fti.hasDynamicSchema)\n         fti.schema = None\n         self.assertEqual(True, fti.hasDynamicSchema)\n \n     def test_lookupSchema_with_concrete_schema(self):\n-        fti = DexterityFTI(u"testtype")\n-        fti.schema = u"plone.dexterity.tests.schemata.ITestSchema"\n+        fti = DexterityFTI("testtype")\n+        fti.schema = "plone.dexterity.tests.schemata.ITestSchema"\n         self.assertEqual(ITestSchema, fti.lookupSchema())\n         # second time uses _v attribute\n         self.assertEqual(ITestSchema, fti.lookupSchema())\n \n     def test_lookupSchema_with_dynamic_schema(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None  # use dynamic schema\n \n         portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n@@ -95,7 +89,7 @@ def test_lookupSchema_with_nonexistant_schema(self):\n         """Tests the case where a dexterity type is not removed cleanly\n         from the fti, but the code has been removed.\n         """\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = "model.wont.be.imported"\n         portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n         self.mock_utility(portal, ISiteRoot)\n@@ -105,7 +99,7 @@ def test_lookupSchema_with_nonexistant_schema(self):\n         delattr(plone.dexterity.schema.generated, schemaName)\n \n     def test_lookupModel_from_string(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = "<model />"\n         fti.model_file = None\n@@ -121,10 +115,10 @@ def test_lookupModel_from_string(self):\n \n     def test_lookupModel_from_file_with_package(self):\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = None\n-        fti.model_file = u"plone.dexterity.tests:test.xml"\n+        fti.model_file = "plone.dexterity.tests:test.xml"\n \n         model_dummy = Model()\n \n@@ -140,9 +134,7 @@ def test_lookupModel_from_file_with_package(self):\n \n         model = fti.lookupModel()\n         self.assertIs(model_dummy, model)\n-        loadFile_mock.assert_called_once_with(\n-            abs_file, reload=True, policy=u"dexterity"\n-        )\n+        loadFile_mock.assert_called_once_with(abs_file, reload=True, policy="dexterity")\n \n     def test_lookupModel_from_file_with_absolute_path(self):\n \n@@ -152,7 +144,7 @@ def test_lookupModel_from_file_with_absolute_path(self):\n             os.path.split(plone.dexterity.tests.__file__)[0], "test.xml"\n         )\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = None\n         fti.model_file = abs_file\n@@ -165,13 +157,11 @@ def test_lookupModel_from_file_with_absolute_path(self):\n \n         model = fti.lookupModel()\n         self.assertIs(model_dummy, model)\n-        loadFile_mock.assert_called_once_with(\n-            abs_file, reload=True, policy=u"dexterity"\n-        )\n+        loadFile_mock.assert_called_once_with(abs_file, reload=True, policy="dexterity")\n \n     def test_lookupModel_from_file_with_win32_absolute_path(self):\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = None\n         fti.model_file = r"C:\\models\\testmodel.xml"\n@@ -191,12 +181,12 @@ def test_lookupModel_from_file_with_win32_absolute_path(self):\n         model = fti.lookupModel()\n         self.assertIs(model_dummy, model)\n         loadFile_mock.assert_called_once_with(\n-            fti.model_file, reload=True, policy=u"dexterity"\n+            fti.model_file, reload=True, policy="dexterity"\n         )\n \n     def test_lookupModel_with_schema_only(self):\n-        fti = DexterityFTI(u"testtype")\n-        fti.schema = u"plone.dexterity.tests.schemata.ITestSchema"\n+        fti = DexterityFTI("testtype")\n+        fti.schema = "plone.dexterity.tests.schemata.ITestSchema"\n         fti.model_source = None\n         fti.model_file = None\n \n@@ -205,9 +195,9 @@ def test_lookupModel_with_schema_only(self):\n         self.assertEqual(ITestSchema, model.schema)\n \n     def test_lookupModel_from_string_with_schema(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         # effectively ignored:\n-        fti.schema = u"plone.dexterity.tests.schemata.ITestSchema"\n+        fti.schema = "plone.dexterity.tests.schemata.ITestSchema"\n         fti.model_source = "<model />"\n         fti.model_file = None\n \n@@ -220,10 +210,10 @@ def test_lookupModel_from_string_with_schema(self):\n         model = fti.lookupModel()\n         self.assertIs(model_dummy, model)\n         self.assertIs(ITestSchema, fti.lookupSchema())\n-        loadString_mock.assert_called_once_with(fti.model_source, policy=u"dexterity")\n+        loadString_mock.assert_called_once_with(fti.model_source, policy="dexterity")\n \n     def test_lookupModel_failure(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = None\n         fti.model_file = None\n@@ -231,9 +221,9 @@ def test_lookupModel_failure(self):\n         self.assertRaises(ValueError, fti.lookupModel)\n \n     def test_fires_modified_event_on_update_property_if_changed(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n \n-        fti.title = u"Old title"\n+        fti.title = "Old title"\n         fti.global_allow = False\n \n         from zope.event import notify\n@@ -250,7 +240,7 @@ def test_fires_modified_event_on_update_property_if_changed(self):\n         self.assertEqual(event.descriptions[0].oldValue, "Old title")\n \n     def test_fires_modified_event_on_change_props_per_changed_property(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.title = "Old title"\n         fti.allow_discussion = False\n         fti.global_allow = True\n@@ -266,7 +256,7 @@ def test_fires_modified_event_on_change_props_per_changed_property(self):\n         self.assertEqual(len(notify_mock.call_args_list), 2)\n \n     def test_checks_permission_in_is_construction_allowed_true(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.add_permission = "demo.Permission"\n         container_dummy = self.create_dummy()\n \n@@ -274,7 +264,7 @@ def test_checks_permission_in_is_construction_allowed_true(self):\n         permission_dummy.id = "demo.Permission"\n         permission_dummy.title = "Some add permission"\n \n-        self.mock_utility(permission_dummy, IPermission, name=u"demo.Permission")\n+        self.mock_utility(permission_dummy, IPermission, name="demo.Permission")\n \n         security_manager_mock = Mock()\n         security_manager_mock.checkPermission = Mock(return_value=True)\n@@ -288,7 +278,7 @@ def test_checks_permission_in_is_construction_allowed_true(self):\n         )\n \n     def test_checks_permission_in_is_construction_allowed_false(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.add_permission = "demo.Permission"\n         container_dummy = self.create_dummy()\n \n@@ -296,7 +286,7 @@ def test_checks_permission_in_is_construction_allowed_false(self):\n         permission_dummy.id = "demo.Permission"\n         permission_dummy.title = "Some add permission"\n \n-        self.mock_utility(permission_dummy, IPermission, name=u"demo.Permission")\n+        self.mock_utility(permission_dummy, IPermission, name="demo.Permission")\n \n         security_manager_mock = Mock()\n         security_manager_mock.checkPermission = Mock(return_value=False)\n@@ -310,28 +300,28 @@ def test_checks_permission_in_is_construction_allowed_false(self):\n         )\n \n     def test_no_permission_utility_means_no_construction(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.add_permission = "demo.Permission"  # not an IPermission utility\n         container_dummy = self.create_dummy()\n         self.assertEqual(False, fti.isConstructionAllowed(container_dummy))\n \n     def test_no_permission_means_no_construction(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.add_permission = None\n         container_dummy = self.create_dummy()\n         self.assertEqual(False, fti.isConstructionAllowed(container_dummy))\n \n     def test_add_view_url_set_on_creation(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         self.assertEqual("string:${folder_url}/++add++testtype", fti.add_view_expr)\n \n     def test_factory_set_on_creation(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         self.assertEqual("testtype", fti.factory)\n \n     def test_addview_and_factory_not_overridden_on_creation(self):\n         fti = DexterityFTI(\n-            u"testtype",\n+            "testtype",\n             add_view_expr="string:${folder_url}/@@my-addview",\n             factory="my.factory",\n         )\n@@ -339,20 +329,16 @@ def test_addview_and_factory_not_overridden_on_creation(self):\n         self.assertEqual("my.factory", fti.factory)\n \n     def test_meta_type(self):\n-        fti = DexterityFTI(\n-            u"testtype", klass="plone.dexterity.tests.test_fti.TestClass"\n-        )\n+        fti = DexterityFTI("testtype", klass="plone.dexterity.tests.test_fti.TestClass")\n         self.assertEqual(TestClass.meta_type, fti.Metatype())\n \n     def test_meta_type_change_class(self):\n-        fti = DexterityFTI(\n-            u"testtype", klass="plone.dexterity.tests.test_fti.TestClass"\n-        )\n+        fti = DexterityFTI("testtype", klass="plone.dexterity.tests.test_fti.TestClass")\n         fti._updateProperty("klass", "plone.dexterity.tests.test_fti.TestClass2")\n         self.assertEqual(TestClass2.meta_type, fti.Metatype())\n \n     def test_title_i18n(self):\n-        fti = DexterityFTI(u"testtype", title=b"t\\xc3\\xa9st")\n+        fti = DexterityFTI("testtype", title=b"t\\xc3\\xa9st")\n \n         # with no i18n domain, we get the UTF8-encoded title\n         self.assertEqual(b"t\\xc3\\xa9st".decode("utf8"), fti.Title())\n@@ -360,11 +346,11 @@ def test_title_i18n(self):\n         # with an i18n domain, we get a Message\n         fti.i18n_domain = "test"\n         msgid = fti.Title()\n-        self.assertEqual(u"t\\xe9st", msgid)\n+        self.assertEqual("t\\xe9st", msgid)\n         self.assertEqual("test", msgid.domain)\n \n     def test_description_i18n(self):\n-        fti = DexterityFTI(u"testtype", description=b"t\\xc3\\xa9st")\n+        fti = DexterityFTI("testtype", description=b"t\\xc3\\xa9st")\n \n         # with no i18n domain, we get the UTF8-encoded title\n         self.assertEqual(b"t\\xc3\\xa9st".decode("utf8"), fti.Description())\n@@ -372,7 +358,7 @@ def test_description_i18n(self):\n         # with an i18n domain, we get a Message\n         fti.i18n_domain = "test"\n         msgid = fti.Description()\n-        self.assertEqual(u"t\\xe9st", msgid)\n+        self.assertEqual("t\\xe9st", msgid)\n         self.assertEqual("test", msgid.domain)\n \n     def test_lookupModel_without_schema_policy(self):\n@@ -380,10 +366,10 @@ def test_lookupModel_without_schema_policy(self):\n         gsm.registerUtility(\n             DexteritySchemaPolicy(),\n             plone.supermodel.interfaces.ISchemaPolicy,\n-            name=u"dexterity",\n+            name="dexterity",\n         )\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = (\n             \'<model xmlns="http://namespaces.plone.org/\'\n@@ -402,17 +388,17 @@ def bases(self, schemaName, tree):\n         gsm = getGlobalSiteManager()\n         policy = TestSchemaPolicy()\n         gsm.registerUtility(\n-            policy, plone.supermodel.interfaces.ISchemaPolicy, name=u"test"\n+            policy, plone.supermodel.interfaces.ISchemaPolicy, name="test"\n         )\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = (\n             \'<model xmlns="http://namespaces.plone.org/\'\n             \'supermodel/schema"><schema/></model>\'\n         )\n         fti.model_file = None\n-        fti.schema_policy = u"test"\n+        fti.schema_policy = "test"\n \n         model = fti.lookupModel()\n         self.assertEqual(True, ITestInterface in model.schemata[""].__bases__)\n@@ -426,7 +412,7 @@ class TestFTIEvents(MockTestCase):\n     # components really do get added/removed (using passthrough).\n \n     def test_components_registered_on_add(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         container_dummy = self.create_dummy()\n \n@@ -461,7 +447,7 @@ def test_components_registered_on_add(self):\n         self.assertNotEqual(None, queryUtility(IFactory, name=portal_type))\n \n     def test_components_not_registered_on_add_if_exist(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         container_dummy = self.create_dummy()\n \n@@ -489,7 +475,7 @@ def test_components_not_registered_on_add_if_exist(self):\n         self.assertFalse(site_manager_mock.registerUtility.called)\n \n     def test_components_unregistered_on_delete(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         container_dummy = self.create_dummy()\n \n@@ -520,7 +506,7 @@ def test_components_unregistered_on_delete(self):\n     def test_components_unregistered_on_delete_does_not_error_with_no_components(\n         self,\n     ):  # noqa\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         container_dummy = self.create_dummy()\n \n@@ -545,7 +531,7 @@ def test_components_unregistered_on_delete_does_not_error_with_no_components(\n         )\n \n     def test_global_components_not_unregistered_on_delete(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         container_dummy = self.create_dummy()\n \n@@ -579,7 +565,7 @@ def test_global_components_not_unregistered_on_delete(self):\n         self.assertNotEqual(None, queryUtility(IFactory, name=portal_type))\n \n     def test_components_reregistered_on_rename(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         container_dummy = self.create_dummy()\n \n@@ -599,7 +585,7 @@ def test_components_reregistered_on_rename(self):\n         ftiRenamed(\n             fti,\n             ObjectMovedEvent(\n-                fti, container_dummy, fti.getId(), container_dummy, u"newtype"\n+                fti, container_dummy, fti.getId(), container_dummy, "newtype"\n             ),\n         )\n \n@@ -619,13 +605,13 @@ def test_components_reregistered_on_rename(self):\n         self.assertNotEqual(None, queryUtility(IFactory, name=portal_type))\n \n     def test_dynamic_schema_refreshed_on_modify_model_file(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         class INew(Interface):\n-            title = zope.schema.TextLine(title=u"title")\n+            title = zope.schema.TextLine(title="title")\n \n-        model_dummy = Model({u"": INew})\n+        model_dummy = Model({"": INew})\n \n         fti.lookupModel = Mock(return_value=model_dummy)\n         self.create_dummy()\n@@ -649,16 +635,16 @@ class IBlank1(Interface):\n         )\n \n         self.assertTrue("title" in IBlank1)\n-        self.assertTrue(IBlank1["title"].title == u"title")\n+        self.assertTrue(IBlank1["title"].title == "title")\n \n     def test_dynamic_schema_refreshed_on_modify_model_source(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         class INew(Interface):\n-            title = zope.schema.TextLine(title=u"title")\n+            title = zope.schema.TextLine(title="title")\n \n-        model_dummy = Model({u"": INew})\n+        model_dummy = Model({"": INew})\n \n         fti.lookupModel = Mock(return_value=model_dummy)\n         self.create_dummy()\n@@ -685,14 +671,14 @@ class IBlank2(Interface):\n         )\n \n         self.assertTrue("title" in IBlank2)\n-        self.assertTrue(IBlank2["title"].title == u"title")\n+        self.assertTrue(IBlank2["title"].title == "title")\n \n     def test_dynamic_schema_refreshed_on_modify_schema_policy(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         class INew(Interface):\n-            title = zope.schema.TextLine(title=u"title")\n+            title = zope.schema.TextLine(title="title")\n \n         class IBlank3(Interface):\n             pass\n@@ -704,7 +690,7 @@ def bases(self, schemaName, tree):\n         gsm = getGlobalSiteManager()\n         policy = TestSchemaPolicy()\n         gsm.registerUtility(\n-            policy, plone.supermodel.interfaces.ISchemaPolicy, name=u"test"\n+            policy, plone.supermodel.interfaces.ISchemaPolicy, name="test"\n         )\n \n         site_dummy = self.create_dummy(getPhysicalPath=lambda: ("", "siteid"))\n@@ -732,16 +718,16 @@ def bases(self, schemaName, tree):\n         self.assertIn(INew, updated.__bases__)\n \n     def test_concrete_schema_not_refreshed_on_modify_schema(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         class IBlank4(Interface):\n             pass\n \n         class INew(Interface):\n-            title = zope.schema.TextLine(title=u"title")\n+            title = zope.schema.TextLine(title="title")\n \n-        model_dummy = Model({u"": INew})\n+        model_dummy = Model({"": INew})\n         fti.lookupModel = Mock(return_value=model_dummy)\n \n         site_dummy = self.create_dummy(getPhysicalPath=lambda: ("", "siteid"))\n@@ -765,7 +751,7 @@ class INew(Interface):\n         self.assertFalse("title" in IBlank4)\n \n     def test_old_factory_unregistered_after_name_changed_if_dynamic(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         # Mock the lookup of the site and the site manager at the site root\n@@ -806,7 +792,7 @@ def test_old_factory_unregistered_after_name_changed_if_dynamic(self):\n         )\n \n     def test_new_factory_not_registered_after_name_changed_if_exists(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         # Mock the lookup of the site and the site manager at the site root\n@@ -835,7 +821,7 @@ def test_new_factory_not_registered_after_name_changed_if_exists(self):\n         self.assertFalse(site_manager_mock.registerUtility.called)\n \n     def test_old_factory_not_unregistered_if_not_created_by_dexterity(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         # Mock the lookup of the site and the site manager at the site root\n@@ -874,9 +860,9 @@ def test_old_factory_not_unregistered_if_not_created_by_dexterity(self):\n         )\n \n     def test_renamed_factory_not_unregistered_if_not_unique(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type, factory="common-factory")\n-        portal_type2 = u"testtype2"\n+        portal_type2 = "testtype2"\n         fti2 = DexterityFTI(portal_type2, factory="common-factory")\n \n         # Mock the lookup of the site and the site manager at the site root\n@@ -930,9 +916,9 @@ def test_renamed_factory_not_unregistered_if_not_unique(self):\n         )\n \n     def test_deleted_factory_not_unregistered_if_not_unique(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type, factory="common-factory")\n-        portal_type2 = u"testtype2"\n+        portal_type2 = "testtype2"\n         fti2 = DexterityFTI(portal_type2, factory="common-factory")\n         container_dummy = self.create_dummy()\n \n@@ -971,7 +957,7 @@ def test_deleted_factory_not_unregistered_if_not_unique(self):\n         # We shouldn\'t remove this since fti2 still uses it\n         # The type itself should be removed though\n         site_manager_mock.unregisterUtility.assert_called_once_with(\n-            provided=IDexterityFTI, name=u"testtype"\n+            provided=IDexterityFTI, name="testtype"\n         )\n \n     def test_loockup_schema_with_p_mtime_roundable(self):\n@@ -999,9 +985,9 @@ def test_fti_modified_with_p_mtime_roundable(self):\n         fti._p_mtime = 1637689348.9999528\n \n         class INew(Interface):\n-            title = zope.schema.TextLine(title=u"title")\n+            title = zope.schema.TextLine(title="title")\n \n-        model_dummy = Model({u"": INew})\n+        model_dummy = Model({"": INew})\n \n         fti.lookupModel = Mock(return_value=model_dummy)\n         self.create_dummy()\n@@ -1026,7 +1012,7 @@ class IBlank1(Interface):\n         )\n \n         self.assertTrue("title" in IBlank1)\n-        self.assertTrue(IBlank1["title"].title == u"title")\n+        self.assertTrue(IBlank1["title"].title == "title")\n \n         # cleanup\n         delattr(plone.dexterity.schema.generated, schemaName)\ndiff --git a/plone/dexterity/tests/test_primary.py b/plone/dexterity/tests/test_primary.py\nindex 403e038d..b3c10b1d 100644\n--- a/plone/dexterity/tests/test_primary.py\n+++ b/plone/dexterity/tests/test_primary.py\n@@ -1,21 +1,15 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.dexterity.content import Item\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.primary import PrimaryFieldInfo\n from plone.rfc822.interfaces import IPrimaryField\n+from unittest.mock import Mock\n from zope import schema\n from zope.interface import alsoProvides\n from zope.interface import Interface\n \n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from mock import Mock\n-\n-\n class PrimaryFieldInfoTestCase(MockTestCase):\n     def test_primary_field_info(self):\n         class ITest(Interface):\n@@ -24,14 +18,14 @@ class ITest(Interface):\n \n         alsoProvides(ITest["body"], IPrimaryField)\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.lookupSchema = Mock(return_value=ITest)\n         fti.behaviors = []\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n         item = Item("item")\n         item.portal_type = "testtype"\n-        item.body = u"body text"\n+        item.body = "body text"\n \n         info = PrimaryFieldInfo(item)\n         assert info.fieldname == "body"\ndiff --git a/plone/dexterity/tests/test_schema.py b/plone/dexterity/tests/test_schema.py\nindex 35e90e97..c0c6cb00 100644\n--- a/plone/dexterity/tests/test_schema.py\n+++ b/plone/dexterity/tests/test_schema.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.dexterity import schema\n from plone.dexterity.fti import DexterityFTI\n@@ -9,18 +8,13 @@\n from plone.dexterity.schema import SCHEMA_CACHE\n from plone.supermodel.model import Model\n from Products.CMFCore.interfaces import ISiteRoot\n+from unittest.mock import Mock\n from zope.interface import Interface\n from zope.interface.interface import InterfaceClass\n \n import zope.schema\n \n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from mock import Mock\n-\n-\n class TestSchemaModuleFactory(MockTestCase):\n     def test_transient_schema(self):\n \n@@ -40,14 +34,14 @@ def test_concrete_default_schema(self):\n \n         # Mock schema model\n         class IDummy(Interface):\n-            dummy = zope.schema.TextLine(title=u"Dummy")\n+            dummy = zope.schema.TextLine(title="Dummy")\n \n-        mock_model = Model({u"": IDummy})\n+        mock_model = Model({"": IDummy})\n \n         # Mock FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.lookupModel = Mock(return_value=mock_model)\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         factory = schema.SchemaModuleFactory()\n \n@@ -65,22 +59,22 @@ def test_named_schema(self):\n \n         # Mock schema model\n         class IDummy(Interface):\n-            dummy = zope.schema.TextLine(title=u"Dummy")\n+            dummy = zope.schema.TextLine(title="Dummy")\n \n         class INamedDummy(Interface):\n-            named = zope.schema.TextLine(title=u"Named")\n+            named = zope.schema.TextLine(title="Named")\n \n-        mock_model = Model({u"": IDummy, u"named": INamedDummy})\n+        mock_model = Model({"": IDummy, "named": INamedDummy})\n \n         # Mock FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.lookupModel = Mock(return_value=mock_model)\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         factory = schema.SchemaModuleFactory()\n \n         schemaName = schema.portalTypeToSchemaName(\n-            "testtype", schema=u"named", prefix="site"\n+            "testtype", schema="named", prefix="site"\n         )\n         klass = factory(schemaName, schema.generated)\n \n@@ -122,13 +116,13 @@ def test_transient_schema_made_concrete(self):\n         # Now register a mock FTI and try again\n \n         class IDummy(Interface):\n-            dummy = zope.schema.TextLine(title=u"Dummy")\n+            dummy = zope.schema.TextLine(title="Dummy")\n \n-        mock_model = Model({u"": IDummy})\n+        mock_model = Model({"": IDummy})\n \n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.lookupModel = Mock(return_value=mock_model)\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         klass = factory(schemaName, schema.generated)\n \n@@ -197,7 +191,7 @@ def test_splitSchemaName(self):\n         )\n \n     def test_invalidate_cache(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         SCHEMA_CACHE.get(portal_type)\n         SCHEMA_CACHE.behavior_schema_interfaces(fti)\ndiff --git a/plone/dexterity/tests/test_schema_cache.py b/plone/dexterity/tests/test_schema_cache.py\nindex 9f054326..e4663005 100644\n--- a/plone/dexterity/tests/test_schema_cache.py\n+++ b/plone/dexterity/tests/test_schema_cache.py\n@@ -1,22 +1,13 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import SCHEMA_CACHE\n-from zope.interface import Interface\n+from unittest.mock import Mock\n+from unittest.mock import patch\n from zope.globalrequest import setRequest\n+from zope.interface import Interface\n from zope.publisher.browser import TestRequest\n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from mock import Mock\n-\n-try:\n-    from unittest.mock import patch\n-except ImportError:\n-    from mock import patch\n-\n \n class TestSchemaCache(MockTestCase):\n     def setUp(self):\n@@ -27,19 +18,19 @@ def test_repeated_get_lookup(self):\n         class ISchema(Interface):\n             pass\n \n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        schema1 = SCHEMA_CACHE.get(u"testtype")\n-        schema2 = SCHEMA_CACHE.get(u"testtype")\n+        schema1 = SCHEMA_CACHE.get("testtype")\n+        schema2 = SCHEMA_CACHE.get("testtype")\n \n         self.assertTrue(schema1 is schema2 is ISchema)\n \n     def test_repeated_behavior_registration_lookup(self):\n \n-        fti = DexterityFTI(u"testtype")\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        fti = DexterityFTI("testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n         # Mock a test behavior\n         class ITestBehavior(Interface):\n@@ -49,8 +40,8 @@ class ITestBehavior(Interface):\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior",\n-            description=u"Provides test behavior",\n+            title="Test Behavior",\n+            description="Provides test behavior",\n             interface=Interface,\n             marker=ITestBehavior,\n             factory=None,\n@@ -59,19 +50,19 @@ class ITestBehavior(Interface):\n \n         self.mock_utility(registration, IBehavior, ITestBehavior.__identifier__)\n \n-        r1 = SCHEMA_CACHE.behavior_registrations(u"testtype")\n-        r2 = SCHEMA_CACHE.behavior_registrations(u"testtype")\n+        r1 = SCHEMA_CACHE.behavior_registrations("testtype")\n+        r2 = SCHEMA_CACHE.behavior_registrations("testtype")\n \n         self.assertTrue(r1[0] is r2[0] is registration)\n \n     def test_unexistent_behaviors_lookup(self):\n-        fti = DexterityFTI(u"testtype")\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        fti = DexterityFTI("testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n         # Set an unregistered behavior\n         fti.behaviors = ["foo.bar"]\n \n         with patch("warnings.warn") as mock_warnings:\n-            SCHEMA_CACHE.behavior_registrations(u"testtype")\n+            SCHEMA_CACHE.behavior_registrations("testtype")\n             # Verify the warning has been issued\n             mock_warnings.assert_called_once_with(\n                 (\n@@ -84,8 +75,8 @@ def test_unexistent_behaviors_lookup(self):\n \n     def test_repeated_subtypes_lookup(self):\n \n-        fti = DexterityFTI(u"testtype")\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        fti = DexterityFTI("testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n         # Mock a test behavior\n         class ITestSchema(Interface):\n@@ -98,8 +89,8 @@ class ITestMarker(Interface):\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior",\n-            description=u"Provides test behavior",\n+            title="Test Behavior",\n+            description="Provides test behavior",\n             interface=ITestSchema,\n             marker=ITestMarker,\n             factory=None,\n@@ -108,8 +99,8 @@ class ITestMarker(Interface):\n \n         self.mock_utility(registration, IBehavior, ITestSchema.__identifier__)\n \n-        s1 = SCHEMA_CACHE.subtypes(u"testtype")\n-        s2 = SCHEMA_CACHE.subtypes(u"testtype")\n+        s1 = SCHEMA_CACHE.subtypes("testtype")\n+        s2 = SCHEMA_CACHE.subtypes("testtype")\n \n         self.assertTrue(s1[0] is s2[0] is ITestMarker)\n \n@@ -120,12 +111,12 @@ class ISchema1(Interface):\n         class ISchema2(Interface):\n             pass\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.lookupSchema = Mock(side_effect=[ISchema1, ISchema2])\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n-        schema1 = SCHEMA_CACHE.get(u"testtype")\n-        schema2 = SCHEMA_CACHE.get(u"testtype")\n+        schema1 = SCHEMA_CACHE.get("testtype")\n+        schema2 = SCHEMA_CACHE.get("testtype")\n \n         self.assertTrue(schema1 is schema2 and schema2 is ISchema1)\n \n@@ -136,13 +127,13 @@ class ISchema1(Interface):\n         class ISchema2(Interface):\n             pass\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.lookupSchema = Mock(side_effect=[ISchema1, ISchema2])\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n-        schema1 = SCHEMA_CACHE.get(u"testtype")\n-        SCHEMA_CACHE.invalidate(u"testtype")\n-        schema2 = SCHEMA_CACHE.get(u"testtype")\n+        schema1 = SCHEMA_CACHE.get("testtype")\n+        SCHEMA_CACHE.invalidate("testtype")\n+        schema2 = SCHEMA_CACHE.get("testtype")\n \n         self.assertTrue(schema1 is ISchema1)\n         self.assertTrue(schema2 is ISchema2)\n@@ -151,18 +142,18 @@ def test_none_not_cached(self):\n         class ISchema1(Interface):\n             pass\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.lookupSchema = Mock(side_effect=[None, ISchema1, ISchema1])\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n         SCHEMA_CACHE.invalidate("testtype")\n-        schema1 = SCHEMA_CACHE.get(u"testtype")\n+        schema1 = SCHEMA_CACHE.get("testtype")\n \n         SCHEMA_CACHE.invalidate("testtype")\n-        schema2 = SCHEMA_CACHE.get(u"testtype")\n+        schema2 = SCHEMA_CACHE.get("testtype")\n \n         SCHEMA_CACHE.invalidate("testtype")\n-        schema3 = SCHEMA_CACHE.get(u"testtype")\n+        schema3 = SCHEMA_CACHE.get("testtype")\n \n         self.assertTrue(schema1 is None)\n         self.assertTrue(schema2 is schema3 is ISchema1)\n@@ -171,17 +162,17 @@ def test_attribute_and_value_error_not_cached(self):\n         class ISchema1(Interface):\n             pass\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.lookupSchema = Mock(side_effect=[AttributeError, ValueError, ISchema1])\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n-        schema1 = SCHEMA_CACHE.get(u"testtype")\n+        schema1 = SCHEMA_CACHE.get("testtype")\n \n         SCHEMA_CACHE.invalidate("testtype")\n-        schema2 = SCHEMA_CACHE.get(u"testtype")\n+        schema2 = SCHEMA_CACHE.get("testtype")\n \n         SCHEMA_CACHE.invalidate("testtype")\n-        schema3 = SCHEMA_CACHE.get(u"testtype")\n+        schema3 = SCHEMA_CACHE.get("testtype")\n \n         self.assertTrue(schema1 is None)\n         self.assertTrue(schema2 is None)\n@@ -191,13 +182,13 @@ def test_unknown_type_not_cached(self):\n         class ISchema1(Interface):\n             pass\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.lookupSchema = Mock(return_value=ISchema1)\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n-        schema1 = SCHEMA_CACHE.get(u"othertype")\n-        schema2 = SCHEMA_CACHE.get(u"testtype")\n-        schema3 = SCHEMA_CACHE.get(u"testtype")\n+        schema1 = SCHEMA_CACHE.get("othertype")\n+        schema2 = SCHEMA_CACHE.get("testtype")\n+        schema3 = SCHEMA_CACHE.get("testtype")\n \n         self.assertTrue(schema1 is None)\n         self.assertTrue(schema2 is schema3 is ISchema1)\n@@ -206,20 +197,20 @@ def test_clear_all_caches(self):\n         class ISchema1(Interface):\n             pass\n \n-        fti1 = DexterityFTI(u"testtype")\n+        fti1 = DexterityFTI("testtype")\n         fti1.lookupSchema = Mock(return_value=ISchema1)\n-        self.mock_utility(fti1, IDexterityFTI, name=u"testtype1")\n+        self.mock_utility(fti1, IDexterityFTI, name="testtype1")\n \n-        fti2 = DexterityFTI(u"testtype")\n+        fti2 = DexterityFTI("testtype")\n         fti2.lookupSchema = Mock(return_value=ISchema1)\n-        self.mock_utility(fti2, IDexterityFTI, name=u"testtype2")\n+        self.mock_utility(fti2, IDexterityFTI, name="testtype2")\n \n         # reset schemacache counter\n         SCHEMA_CACHE.invalidations = 0\n \n         # fill cache should call lookupschema one time\n-        schema1 = SCHEMA_CACHE.get(u"testtype1")\n-        schema2 = SCHEMA_CACHE.get(u"testtype2")\n+        schema1 = SCHEMA_CACHE.get("testtype1")\n+        schema2 = SCHEMA_CACHE.get("testtype2")\n         self.assertTrue(schema1 is schema2 is ISchema1)\n \n         # clear\n@@ -230,6 +221,6 @@ class ISchema1(Interface):\n         # check invalidations\n \n         # fill cache again should call lookupschema one time\n-        schema1 = SCHEMA_CACHE.get(u"testtype1")\n-        schema2 = SCHEMA_CACHE.get(u"testtype2")\n+        schema1 = SCHEMA_CACHE.get("testtype1")\n+        schema2 = SCHEMA_CACHE.get("testtype2")\n         self.assertTrue(schema1 is schema2 is ISchema1)\ndiff --git a/plone/dexterity/tests/test_security.py b/plone/dexterity/tests/test_security.py\nindex acca24ac..60689219 100644\n--- a/plone/dexterity/tests/test_security.py\n+++ b/plone/dexterity/tests/test_security.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.autoform.interfaces import READ_PERMISSIONS_KEY\n from plone.dexterity.content import Container\n@@ -6,22 +5,17 @@\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import SCHEMA_CACHE\n+from unittest.mock import Mock\n+from zope.globalrequest import setRequest\n from zope.interface import Interface\n from zope.interface import provider\n+from zope.publisher.browser import TestRequest\n from zope.security.interfaces import IPermission\n from zope.security.permission import Permission\n-from zope.globalrequest import setRequest\n-from zope.publisher.browser import TestRequest\n \n import zope.schema\n \n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from mock import Mock\n-\n-\n class TestAttributeProtection(MockTestCase):\n     def setUp(self):\n         setRequest(TestRequest())\n@@ -31,7 +25,7 @@ def test_item(self):\n \n         # Mock schema model\n         class ITestSchema(Interface):\n-            test = zope.schema.TextLine(title=u"Test")\n+            test = zope.schema.TextLine(title="Test")\n \n         ITestSchema.setTaggedValue(\n             READ_PERMISSIONS_KEY, dict(test="zope2.View", foo="foo.View")\n@@ -41,7 +35,7 @@ class ITestSchema(Interface):\n \n         @provider(IFormFieldProvider)\n         class ITestBehavior(Interface):\n-            test2 = zope.schema.TextLine(title=u"Test")\n+            test2 = zope.schema.TextLine(title="Test")\n \n         ITestBehavior.setTaggedValue(\n             READ_PERMISSIONS_KEY, dict(test2="zope2.View", foo2="foo.View")\n@@ -51,8 +45,8 @@ class ITestBehavior(Interface):\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior",\n-            description=u"Provides test behavior",\n+            title="Test Behavior",\n+            description="Provides test behavior",\n             interface=ITestBehavior,\n             marker=Interface,\n             factory=None,\n@@ -69,24 +63,20 @@ class ITestBehavior(Interface):\n         )\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.behaviors = ()\n         fti_mock.lookupSchema = Mock(return_value=ITestSchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Mock permissions\n-        self.mock_utility(\n-            Permission(u"zope2.View", u"View"), IPermission, u"zope2.View"\n-        )\n-        self.mock_utility(\n-            Permission(u"foo.View", u"View foo"), IPermission, u"foo.View"\n-        )\n+        self.mock_utility(Permission("zope2.View", "View"), IPermission, "zope2.View")\n+        self.mock_utility(Permission("foo.View", "View foo"), IPermission, "foo.View")\n \n         # Content item\n         item = Item("test")\n-        item.portal_type = u"testtype"\n-        item.test = u"foo"\n-        item.foo = u"bar"\n+        item.portal_type = "testtype"\n+        item.test = "foo"\n+        item.foo = "bar"\n \n         # mock security manager\n         security_manager_mock = Mock()\n@@ -97,21 +87,19 @@ class ITestBehavior(Interface):\n         # run 1: schema and no behavior access to schema protected attribute\n         security_manager_mock.checkPermission = Mock(return_value=False)\n         SCHEMA_CACHE.clear()\n-        self.assertFalse(\n-            item.__allow_access_to_unprotected_subobjects__("test", u"foo")\n-        )\n+        self.assertFalse(item.__allow_access_to_unprotected_subobjects__("test", "foo"))\n         security_manager_mock.checkPermission.assert_called_with("View", item)\n \n         # run 2: schema and no behavior access to known non schema attribute\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         SCHEMA_CACHE.clear()\n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", "bar"))\n         security_manager_mock.checkPermission.assert_called_with("View foo", item)\n \n         # run 3: schema and no behavior, unknown attributes are allowed\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", "stuff")\n         )\n \n         # run 4: schema and behavior\n@@ -119,7 +107,7 @@ class ITestBehavior(Interface):\n         fti_mock.behaviors = [ITestBehavior.__identifier__]\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("test2", u"foo2")\n+            item.__allow_access_to_unprotected_subobjects__("test2", "foo2")\n         )\n         security_manager_mock.checkPermission.assert_called_with("View", item)\n \n@@ -128,7 +116,7 @@ class ITestBehavior(Interface):\n         fti_mock.lookupSchema = Mock(return_value=None)\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("test2", u"foo2")\n+            item.__allow_access_to_unprotected_subobjects__("test2", "foo2")\n         )\n         security_manager_mock.checkPermission.assert_called_with("View", item)\n \n@@ -136,7 +124,7 @@ def test_container(self):\n \n         # Mock schema model\n         class ITestSchema(Interface):\n-            test = zope.schema.TextLine(title=u"Test")\n+            test = zope.schema.TextLine(title="Test")\n \n         ITestSchema.setTaggedValue(\n             READ_PERMISSIONS_KEY, dict(test="zope2.View", foo="foo.View")\n@@ -146,7 +134,7 @@ class ITestSchema(Interface):\n \n         @provider(IFormFieldProvider)\n         class ITestBehavior(Interface):\n-            test2 = zope.schema.TextLine(title=u"Test")\n+            test2 = zope.schema.TextLine(title="Test")\n \n         ITestBehavior.setTaggedValue(\n             READ_PERMISSIONS_KEY, dict(test2="zope2.View", foo2="foo.View")\n@@ -156,8 +144,8 @@ class ITestBehavior(Interface):\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior",\n-            description=u"Provides test behavior",\n+            title="Test Behavior",\n+            description="Provides test behavior",\n             interface=ITestBehavior,\n             marker=Interface,\n             factory=None,\n@@ -174,24 +162,20 @@ class ITestBehavior(Interface):\n         )\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ITestSchema)\n         fti_mock.behaviors = ()\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Mock permissions\n-        self.mock_utility(\n-            Permission(u"zope2.View", u"View"), IPermission, u"zope2.View"\n-        )\n-        self.mock_utility(\n-            Permission(u"foo.View", u"View foo"), IPermission, u"foo.View"\n-        )\n+        self.mock_utility(Permission("zope2.View", "View"), IPermission, "zope2.View")\n+        self.mock_utility(Permission("foo.View", "View foo"), IPermission, "foo.View")\n \n         # Content item\n         container = Container("test")\n-        container.portal_type = u"testtype"\n-        container.test = u"foo"\n-        container.foo = u"bar"\n+        container.portal_type = "testtype"\n+        container.test = "foo"\n+        container.foo = "bar"\n \n         # mock security manager\n         security_manager_mock = Mock()\n@@ -203,7 +187,7 @@ class ITestBehavior(Interface):\n         security_manager_mock.checkPermission = Mock(return_value=False)\n         SCHEMA_CACHE.clear()\n         self.assertFalse(\n-            container.__allow_access_to_unprotected_subobjects__("test", u"foo")\n+            container.__allow_access_to_unprotected_subobjects__("test", "foo")\n         )\n         security_manager_mock.checkPermission.assert_called_with("View", container)\n \n@@ -211,14 +195,14 @@ class ITestBehavior(Interface):\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            container.__allow_access_to_unprotected_subobjects__("foo", u"bar")\n+            container.__allow_access_to_unprotected_subobjects__("foo", "bar")\n         )\n         security_manager_mock.checkPermission.assert_called_with("View foo", container)\n \n         # run 3: schema and no behavior, unknown attributes are allowed\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            container.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n+            container.__allow_access_to_unprotected_subobjects__("random", "stuff")\n         )\n \n         # run 4: schema and behavior\n@@ -226,7 +210,7 @@ class ITestBehavior(Interface):\n         fti_mock.behaviors = [ITestBehavior.__identifier__]\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            container.__allow_access_to_unprotected_subobjects__("test2", u"foo2")\n+            container.__allow_access_to_unprotected_subobjects__("test2", "foo2")\n         )\n         security_manager_mock.checkPermission.assert_called_with("View", container)\n \n@@ -235,7 +219,7 @@ class ITestBehavior(Interface):\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            container.__allow_access_to_unprotected_subobjects__("test2", u"foo2")\n+            container.__allow_access_to_unprotected_subobjects__("test2", "foo2")\n         )\n         security_manager_mock.checkPermission.assert_called_with("View", container)\n \n@@ -243,56 +227,54 @@ def test_no_tagged_value(self):\n \n         # Mock schema model\n         class ITestSchema(Interface):\n-            test = zope.schema.TextLine(title=u"Test")\n+            test = zope.schema.TextLine(title="Test")\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ITestSchema)\n         fti_mock.behaviors = ()\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Content item\n         item = Item("test")\n-        item.portal_type = u"testtype"\n-        item.test = u"foo"\n-        item.foo = u"bar"\n+        item.portal_type = "testtype"\n+        item.test = "foo"\n+        item.foo = "bar"\n \n         SCHEMA_CACHE.clear()\n \n         # Everything allowed\n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", u"foo"))\n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", "foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", "bar"))\n \n         # Unknown attributes are allowed\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", "stuff")\n         )\n \n     def test_no_read_permission(self):\n \n         # Mock schema model\n         class ITestSchema(Interface):\n-            test = zope.schema.TextLine(title=u"Test")\n+            test = zope.schema.TextLine(title="Test")\n \n         ITestSchema.setTaggedValue(READ_PERMISSIONS_KEY, dict(foo="foo.View"))\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ITestSchema)\n         fti_mock.behaviors = ()\n \n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Mock permissions\n-        self.mock_utility(\n-            Permission(u"foo.View", u"View foo"), IPermission, u"foo.View"\n-        )\n+        self.mock_utility(Permission("foo.View", "View foo"), IPermission, "foo.View")\n \n         # Content item\n         item = Item("test")\n-        item.portal_type = u"testtype"\n-        item.test = u"foo"\n-        item.foo = u"bar"\n+        item.portal_type = "testtype"\n+        item.test = "foo"\n+        item.foo = "bar"\n \n         # Check permission\n         security_manager_mock = Mock()\n@@ -303,69 +285,69 @@ class ITestSchema(Interface):\n \n         SCHEMA_CACHE.clear()\n \n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", u"foo"))\n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", "foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", "bar"))\n \n         # Unknown attributes are allowed\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", "stuff")\n         )\n \n     def test_no_schema(self):\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=None)\n         fti_mock.behaviors = ()\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Content item\n         item = Item("test")\n-        item.portal_type = u"testtype"\n-        item.test = u"foo"\n-        item.foo = u"bar"\n+        item.portal_type = "testtype"\n+        item.test = "foo"\n+        item.foo = "bar"\n \n         SCHEMA_CACHE.clear()\n \n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", u"foo"))\n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", "foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", "bar"))\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", "stuff")\n         )\n \n     def test_schema_exception(self):\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(side_effect=AttributeError)\n         fti_mock.behaviors = ()\n \n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Content item\n         item = Item("test")\n-        item.portal_type = u"testtype"\n-        item.test = u"foo"\n-        item.foo = u"bar"\n+        item.portal_type = "testtype"\n+        item.test = "foo"\n+        item.foo = "bar"\n \n         SCHEMA_CACHE.clear()\n \n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", u"foo"))\n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", "foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", "bar"))\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", "stuff")\n         )\n \n     def test_empty_name(self):\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Content item\n         item = Item("test")\n-        item.portal_type = u"testtype"\n+        item.portal_type = "testtype"\n \n         SCHEMA_CACHE.clear()\n \n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("", u"foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("", "foo"))\ndiff --git a/plone/dexterity/tests/test_synchronize.py b/plone/dexterity/tests/test_synchronize.py\nindex 48f946b2..aa3db2d5 100644\n--- a/plone/dexterity/tests/test_synchronize.py\n+++ b/plone/dexterity/tests/test_synchronize.py\n@@ -4,7 +4,7 @@\n import unittest\n \n \n-class StupidStack(object):\n+class StupidStack:\n \n     _elements = []  # not thread safe\n     _lock = Lock()\ndiff --git a/plone/dexterity/tests/test_utils.py b/plone/dexterity/tests/test_utils.py\nindex 37a82961..d7904c17 100644\n--- a/plone/dexterity/tests/test_utils.py\n+++ b/plone/dexterity/tests/test_utils.py\n@@ -1,13 +1,7 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.dexterity import utils\n from plone.dexterity.fti import DexterityFTI\n-\n-\n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from mock import Mock\n+from unittest.mock import Mock\n \n \n class TestUtils(MockTestCase):\n@@ -25,7 +19,7 @@ class IBehaviorSchema(Interface):\n             pass\n \n         behavior_mock = Mock()\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n \n         portal_type = "prefix_0_type_0_schema"\n         behavior_name = "behavior_0"\n@@ -54,7 +48,7 @@ def testAddContentToContainer_preserves_existing_id(self):\n         from plone.dexterity.content import Item\n \n         container = Container()\n-        container._ordering = u"unordered"\n+        container._ordering = "unordered"\n         # Allow anyone to access the contents information on the container.\n         # This allows to check for existing content with the same id.\n         container.manage_permission(\ndiff --git a/plone/dexterity/tests/test_views.py b/plone/dexterity/tests/test_views.py\nindex e27e7282..441a92db 100644\n--- a/plone/dexterity/tests/test_views.py\n+++ b/plone/dexterity/tests/test_views.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from AccessControl import Unauthorized\n from plone.autoform.interfaces import IFormFieldProvider\n@@ -21,6 +20,7 @@\n from plone.z3cform.interfaces import IDeferSecurityCheck\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.statusmessages.interfaces import IStatusMessage\n+from unittest.mock import Mock\n from z3c.form.action import Actions\n from z3c.form.datamanager import AttributeField\n from z3c.form.field import Fields\n@@ -37,14 +37,6 @@\n from zope.interface import provider\n from zope.publisher.browser import TestRequest as TestRequestBase\n \n-import six\n-\n-\n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from mock import Mock\n-\n \n class TestRequest(TestRequestBase):\n     """Zope 3\'s TestRequest doesn\'t support item assignment, but Zope 2\'s\n@@ -76,7 +68,7 @@ class IBehaviorThree(Interface):\n \n @implementer(IBehaviorAssignable)\n @adapter(Interface)\n-class NoBehaviorAssignable(object):\n+class NoBehaviorAssignable:\n     # We will use this simple class to check that registering our own\n     # IBehaviorAssignable adapter has an effect.\n \n@@ -93,29 +85,29 @@ def enumerateBehaviors(self):\n class TestAddView(MockTestCase):\n     def test_addview_sets_form_portal_type(self):\n \n-        context = Container(u"container")\n+        context = Container("container")\n         request = TestRequest()\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n \n         addview = DefaultAddView(context, request, fti)\n \n-        self.assertEqual(u"testtype", addview.form_instance.portal_type)\n+        self.assertEqual("testtype", addview.form_instance.portal_type)\n \n     def test_form_create(self):\n \n         # Context and request\n-        context = Container(u"container")\n+        context = Container("container")\n         request = TestRequest()\n \n         # FTI - returns dummy factory name\n \n-        fti_mock = DexterityFTI(u"testtype")\n-        fti_mock.factory = u"testfactory"\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.factory = "testfactory"\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # The form we\'re testing\n         form = DefaultAddForm(context, request)\n-        form.portal_type = u"testtype"\n+        form.portal_type = "testtype"\n \n         class ISchema(Interface):\n             foo = schema.TextLine()\n@@ -126,7 +118,7 @@ class ISchema(Interface):\n \n         obj_dummy = Item(id="dummy")\n         alsoProvides(obj_dummy, ISchema)\n-        data_dummy = {u"foo": u"bar"}\n+        data_dummy = {"foo": "bar"}\n \n         from zope.component import createObject\n \n@@ -147,38 +139,38 @@ def test_add(self):\n         obj = Mock()\n         request = TestRequest()\n \n-        container._setObject = Mock(return_value=u"newid")\n+        container._setObject = Mock(return_value="newid")\n         container._getOb = Mock(return_value=obj)\n         container.absolute_url = Mock(return_value="http://nohost/plone/container")\n \n-        obj.id = u"newid"\n+        obj.id = "newid"\n         obj.portal_type = "testtype"\n \n         # New object\'s FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.isConstructionAllowed = Mock(return_value=True)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # Container FTI\n-        container_fti_mock = DexterityFTI(u"containertype")\n+        container_fti_mock = DexterityFTI("containertype")\n         container_fti_mock.allowType = Mock(return_value=True)\n-        self.mock_utility(container_fti_mock, IDexterityFTI, name=u"containertype")\n+        self.mock_utility(container_fti_mock, IDexterityFTI, name="containertype")\n \n         container.getTypeInfo = Mock(return_value=container_fti_mock)\n \n         # Name chooser\n         @implementer(INameChooser)\n-        class NameChooser(object):\n+        class NameChooser:\n             def __init__(self, context):\n                 pass\n \n             def chooseName(self, name, object):\n-                return u"newid"\n+                return "newid"\n \n         self.mock_adapter(NameChooser, INameChooser, (Interface,))\n \n         form = DefaultAddForm(container, request)\n-        form.portal_type = u"testtype"\n+        form.portal_type = "testtype"\n         form.add(obj)\n \n     def test_add_raises_unauthorized_if_construction_not_allowed(self):\n@@ -188,19 +180,19 @@ def test_add_raises_unauthorized_if_construction_not_allowed(self):\n         request = TestRequest()\n \n         # New object\'s FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.isConstructionAllowed = Mock(return_value=False)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # Container FTI\n-        container_fti_mock = DexterityFTI(u"containertype")\n-        self.mock_utility(container_fti_mock, IDexterityFTI, name=u"containertype")\n+        container_fti_mock = DexterityFTI("containertype")\n+        self.mock_utility(container_fti_mock, IDexterityFTI, name="containertype")\n \n         container.getTypeInfo = Mock(return_value=container_fti_mock)\n         obj.portal_type = "testtype"\n \n         form = DefaultAddForm(container, request)\n-        form.portal_type = u"testtype"\n+        form.portal_type = "testtype"\n \n         self.assertRaises(Unauthorized, form.add, obj)\n \n@@ -213,19 +205,19 @@ def test_add_raises_value_error_if_type_not_addable(self):\n         obj.portal_type = "testtype"\n \n         # New object\'s FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.isConstructionAllowed = Mock(return_value=True)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # Container FTI\n-        container_fti_mock = DexterityFTI(u"containertype")\n+        container_fti_mock = DexterityFTI("containertype")\n         container_fti_mock.allowType = Mock(return_value=False)\n-        self.mock_utility(container_fti_mock, IDexterityFTI, name=u"containertype")\n+        self.mock_utility(container_fti_mock, IDexterityFTI, name="containertype")\n \n         container.getTypeInfo = Mock(return_value=container_fti_mock)\n \n         form = DefaultAddForm(container, request)\n-        form.portal_type = u"testtype"\n+        form.portal_type = "testtype"\n \n         self.assertRaises(ValueError, form.add, obj)\n \n@@ -242,57 +234,57 @@ def test_label(self):\n \n         # FTI\n \n-        fti_mock = DexterityFTI(u"testtype")\n-        fti_mock.Title = Mock(return_value=u"Test title")\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.Title = Mock(return_value="Test title")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # Form\n \n         addform = DefaultAddForm(context_mock, request_mock)\n-        addform.portal_type = u"testtype"\n+        addform.portal_type = "testtype"\n \n         label = addform.label\n-        self.assertEqual(u"Add ${name}", six.text_type(label))\n-        self.assertEqual(u"Test title", label.mapping["name"])\n+        self.assertEqual("Add ${name}", str(label))\n+        self.assertEqual("Test title", label.mapping["name"])\n \n     def test_schema_lookup_add(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u"testtype")\n+        context_mock = self.create_dummy(portal_type="testtype")\n         request_mock = TestRequest()\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         fti_mock.behaviors = (\n             IBehaviorOne.__identifier__,\n             IBehaviorTwo.__identifier__,\n             IBehaviorThree.__identifier__,\n         )\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         from plone.behavior.interfaces import IBehavior\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 1",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 1",\n+            description="Provides test behavior",\n             interface=IBehaviorOne,\n             marker=None,\n             factory=None,\n         )\n         self.mock_utility(registration, IBehavior, IBehaviorOne.__identifier__)\n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 2",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 2",\n+            description="Provides test behavior",\n             interface=IBehaviorTwo,\n             marker=None,\n             factory=None,\n         )\n         self.mock_utility(registration, IBehavior, IBehaviorTwo.__identifier__)\n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 3",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 3",\n+            description="Provides test behavior",\n             interface=IBehaviorThree,\n             marker=None,\n             factory=None,\n@@ -301,7 +293,7 @@ def test_schema_lookup_add(self):\n \n         # Form\n         view = DefaultAddForm(context_mock, request_mock)\n-        view.portal_type = u"testtype"\n+        view.portal_type = "testtype"\n \n         self.assertEqual(ISchema, view.schema)\n \n@@ -319,15 +311,15 @@ def test_fires_add_begun_event(self):\n \n         # Context and request\n         context_mock = self.create_dummy(\n-            portal_type=u"testtype",\n+            portal_type="testtype",\n             allowedContentTypes=lambda: [self.create_dummy(getId=lambda: "testtype")],\n         )\n         request_mock = TestRequest()\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         self.mock_adapter(FieldWidgets, IWidgets, (Interface, Interface, Interface))\n \n@@ -350,14 +342,14 @@ def test_update_checks_allowed_types(self):\n \n         # Context and request\n         context_mock = self.create_dummy(\n-            portal_type=u"testtype", allowedContentTypes=lambda: []\n+            portal_type="testtype", allowedContentTypes=lambda: []\n         )\n         request_mock = TestRequest()\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         self.mock_adapter(FieldWidgets, IWidgets, (Interface, Interface, Interface))\n \n@@ -372,15 +364,15 @@ def test_update_ignores_type_check_if_security_check_deferred(self):\n \n         # Context and request\n         context_mock = self.create_dummy(\n-            portal_type=u"testtype", allowedContentTypes=lambda: []\n+            portal_type="testtype", allowedContentTypes=lambda: []\n         )\n         request_mock = TestRequest()\n         alsoProvides(request_mock, IDeferSecurityCheck)\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         self.mock_adapter(FieldWidgets, IWidgets, (Interface, Interface, Interface))\n \n@@ -397,13 +389,13 @@ def test_update_ignores_type_check_if_security_check_deferred(self):\n     def test_fires_add_cancelled_event(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u"testtype")\n+        context_mock = self.create_dummy(portal_type="testtype")\n         context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n         request_mock = TestRequest()\n \n         # mock status message\n         @implementer(IStatusMessage)\n-        class StatusMessage(object):\n+        class StatusMessage:\n             def __init__(self, request):\n                 pass\n \n@@ -435,24 +427,24 @@ def test_label(self):\n \n         # Context and request\n \n-        context_mock = self.create_dummy(portal_type=u"testtype")\n+        context_mock = self.create_dummy(portal_type="testtype")\n         request_mock = TestRequest()\n \n         # FTI\n \n-        fti_mock = DexterityFTI(u"testtype")\n-        fti_mock.Title = Mock(return_value=u"Test title")\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.Title = Mock(return_value="Test title")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # Form\n         editview = DefaultEditForm(context_mock, request_mock)\n \n         # emulate update()\n-        editview.portal_type = u"testtype"\n+        editview.portal_type = "testtype"\n \n         label = editview.label\n-        self.assertEqual(u"Edit ${name}", six.text_type(label))\n-        self.assertEqual(u"Test title", label.mapping["name"])\n+        self.assertEqual("Edit ${name}", str(label))\n+        self.assertEqual("Test title", label.mapping["name"])\n \n     def test_schema_lookup_edit(self):\n \n@@ -460,42 +452,42 @@ def test_schema_lookup_edit(self):\n         class IMarker(IDexterityContent):\n             pass\n \n-        context_mock = self.create_dummy(portal_type=u"testtype")\n+        context_mock = self.create_dummy(portal_type="testtype")\n         alsoProvides(context_mock, IMarker)\n         request_mock = TestRequest()\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         fti_mock.behaviors = (\n             IBehaviorOne.__identifier__,\n             IBehaviorTwo.__identifier__,\n             IBehaviorThree.__identifier__,\n         )\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         from plone.behavior.interfaces import IBehavior\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 1",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 1",\n+            description="Provides test behavior",\n             interface=IBehaviorOne,\n             marker=None,\n             factory=None,\n         )\n         self.mock_utility(registration, IBehavior, IBehaviorOne.__identifier__)\n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 2",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 2",\n+            description="Provides test behavior",\n             interface=IBehaviorTwo,\n             marker=None,\n             factory=None,\n         )\n         self.mock_utility(registration, IBehavior, IBehaviorTwo.__identifier__)\n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 3",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 3",\n+            description="Provides test behavior",\n             interface=IBehaviorThree,\n             marker=None,\n             factory=None,\n@@ -504,7 +496,7 @@ class IMarker(IDexterityContent):\n \n         # Form\n         view = DefaultEditForm(context_mock, request_mock)\n-        view.portal_type = u"testtype"\n+        view.portal_type = "testtype"\n \n         self.assertEqual(ISchema, view.schema)\n \n@@ -520,13 +512,13 @@ class IMarker(IDexterityContent):\n     def test_fires_edit_begun_event(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u"testtype")\n+        context_mock = self.create_dummy(portal_type="testtype")\n         request_mock = TestRequest()\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         self.mock_adapter(FieldWidgets, IWidgets, (Interface, Interface, Interface))\n         self.mock_adapter(Actions, IActions, (Interface, Interface, Interface))\n@@ -546,13 +538,13 @@ def test_fires_edit_begun_event(self):\n     def test_fires_edit_cancelled_event(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u"testtype", title=u"foo")\n+        context_mock = self.create_dummy(portal_type="testtype", title="foo")\n         context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n         request_mock = TestRequest()\n \n         # mock status message\n         @implementer(IStatusMessage)\n-        class StatusMessage(object):\n+        class StatusMessage:\n             def __init__(self, request):\n                 pass\n \n@@ -576,13 +568,13 @@ def addStatusMessage(self, msg, type=""):\n     def test_fires_edit_finished_event(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u"testtype", title=u"foo")\n+        context_mock = self.create_dummy(portal_type="testtype", title="foo")\n         context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n         request_mock = TestRequest()\n \n         # mock status message\n         @implementer(IStatusMessage)\n-        class StatusMessage(object):\n+        class StatusMessage:\n             def __init__(self, request):\n                 pass\n \n@@ -599,7 +591,7 @@ def addStatusMessage(self, msg, type=""):\n         # Form\n         view = DefaultEditForm(context_mock, request_mock)\n         view.widgets = Mock()\n-        view.widgets.extract = Mock(return_value=({"title": u"foo"}, []))\n+        view.widgets.extract = Mock(return_value=({"title": "foo"}, []))\n         view.applyChanges = Mock()\n         view.handleApply(view, {})\n \n@@ -614,42 +606,42 @@ def test_schema_lookup_default_view(self):\n         class IMarker(IDexterityContent):\n             pass\n \n-        context_mock = self.create_dummy(portal_type=u"testtype")\n+        context_mock = self.create_dummy(portal_type="testtype")\n         alsoProvides(context_mock, IMarker)\n         request_mock = TestRequest()\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         fti_mock.behaviors = (\n             IBehaviorOne.__identifier__,\n             IBehaviorTwo.__identifier__,\n             IBehaviorThree.__identifier__,\n         )\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         from plone.behavior.interfaces import IBehavior\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 1",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 1",\n+            description="Provides test behavior",\n             interface=IBehaviorOne,\n             marker=None,\n             factory=None,\n         )\n         self.mock_utility(registration, IBehavior, IBehaviorOne.__identifier__)\n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 2",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 2",\n+            description="Provides test behavior",\n             interface=IBehaviorTwo,\n             marker=None,\n             factory=None,\n         )\n         self.mock_utility(registration, IBehavior, IBehaviorTwo.__identifier__)\n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 3",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 3",\n+            description="Provides test behavior",\n             interface=IBehaviorThree,\n             marker=None,\n             factory=None,\n@@ -658,7 +650,7 @@ class IMarker(IDexterityContent):\n \n         # Form\n         view = DefaultView(context_mock, request_mock)\n-        view.portal_type = u"testtype"\n+        view.portal_type = "testtype"\n \n         self.assertEqual(ISchema, view.schema)\n \ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex b753f886..1e3fb4b2 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -1,521 +1,501 @@\n-# -*- coding: utf-8 -*-\n-from .case import HAS_WEBDAV\n+from .case import ItemDummy\n from .case import MockTestCase\n+from email.message import Message\n+from io import StringIO\n+from OFS.Folder import Folder\n+from OFS.SimpleItem import SimpleItem\n+from plone.autoform.interfaces import IFormFieldProvider\n+from plone.behavior.interfaces import IBehaviorAssignable\n+from plone.dexterity.browser.traversal import DexterityPublishTraverse\n+from plone.dexterity.content import Container\n+from plone.dexterity.content import Item\n+from plone.dexterity.filerepresentation import DefaultDirectoryFactory\n+from plone.dexterity.filerepresentation import DefaultFileFactory\n+from plone.dexterity.filerepresentation import DefaultReadFile\n+from plone.dexterity.filerepresentation import DefaultWriteFile\n+from plone.dexterity.filerepresentation import FolderDataResource\n+from plone.dexterity.fti import DexterityFTI\n+from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n+from plone.dexterity.interfaces import IDexterityFTI\n+from plone.dexterity.schema import SCHEMA_CACHE\n+from plone.rfc822.interfaces import IPrimaryField\n+from unittest.mock import Mock\n+from webdav.NullResource import NullResource\n+from zExceptions import Forbidden\n+from zExceptions import MethodNotAllowed\n+from zExceptions import Unauthorized\n+from zope import schema\n+from zope.component.interfaces import IFactory\n+from zope.filerepresentation.interfaces import IDirectoryFactory\n+from zope.filerepresentation.interfaces import IFileFactory\n+from zope.filerepresentation.interfaces import IRawReadFile\n+from zope.filerepresentation.interfaces import IRawWriteFile\n+from zope.interface import alsoProvides\n+from zope.interface import implementer\n+from zope.interface import Interface\n+from zope.interface import provider\n+from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n+from zope.publisher.browser import TestRequest\n+from zope.size.interfaces import ISized\n+from ZPublisher.HTTPResponse import HTTPResponse\n+from ZPublisher.Iterators import IStreamIterator\n \n+import re\n \n-if HAS_WEBDAV:\n-\n-    from .case import ItemDummy\n-    from email.message import Message\n-    from OFS.Folder import Folder\n-    from OFS.SimpleItem import SimpleItem\n-    from plone.autoform.interfaces import IFormFieldProvider\n-    from plone.behavior.interfaces import IBehaviorAssignable\n-    from plone.dexterity.browser.traversal import DexterityPublishTraverse\n-    from plone.dexterity.content import Container\n-    from plone.dexterity.content import Item\n-    from plone.dexterity.filerepresentation import DefaultDirectoryFactory\n-    from plone.dexterity.filerepresentation import DefaultFileFactory\n-    from plone.dexterity.filerepresentation import DefaultReadFile\n-    from plone.dexterity.filerepresentation import DefaultWriteFile\n-    from plone.dexterity.filerepresentation import FolderDataResource\n-    from plone.dexterity.fti import DexterityFTI\n-    from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n-    from plone.dexterity.interfaces import IDexterityFTI\n-    from plone.dexterity.schema import SCHEMA_CACHE\n-    from plone.rfc822.interfaces import IPrimaryField\n-    from six import StringIO\n-    from webdav.NullResource import NullResource\n-    from zExceptions import Forbidden\n-    from zExceptions import MethodNotAllowed\n-    from zExceptions import Unauthorized\n-    from zope import schema\n-    from zope.component.interfaces import IFactory\n-    from zope.filerepresentation.interfaces import IDirectoryFactory\n-    from zope.filerepresentation.interfaces import IFileFactory\n-    from zope.filerepresentation.interfaces import IRawReadFile\n-    from zope.filerepresentation.interfaces import IRawWriteFile\n-    from zope.interface import alsoProvides\n-    from zope.interface import implementer\n-    from zope.interface import Interface\n-    from zope.interface import provider\n-    from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n-    from zope.publisher.browser import TestRequest\n-    from zope.size.interfaces import ISized\n-    from ZPublisher.HTTPResponse import HTTPResponse\n-    from ZPublisher.Iterators import IStreamIterator\n-\n-    import re\n-    import six\n-\n-    try:\n-        from unittest.mock import Mock\n-    except ImportError:\n-        from mock import Mock\n-\n-    if six.PY2:\n-        # cope with upstream library changes in rendering the XML prolog\n-        XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8"?>\'\n-    else:\n-        XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8" ?>\'\n-\n-    @provider(IFormFieldProvider)\n-    class ITestBehavior(Interface):\n-        foo = schema.Int()\n-        bar = schema.Bytes()\n-\n-    class DAVTestRequest(TestRequest):\n-\n-        get_header = TestRequest.getHeader\n-\n-        def _createResponse(self):\n-            return HTTPResponse()\n-\n-    class TestWebZope2DAVAPI(MockTestCase):\n-        def test_get_size_no_adapter(self):\n-            item = Item("test")\n \n-            self.assertEqual(0, item.get_size())\n+XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8" ?>\'\n \n-        def test_get_size_wrong_adapter(self):\n-            class SizedAdapter(object):\n-                def __init__(self, context):\n-                    self.context = context\n \n-                def sizeForSorting(self):\n-                    return "lines", 10\n+@provider(IFormFieldProvider)\n+class ITestBehavior(Interface):\n+    foo = schema.Int()\n+    bar = schema.Bytes()\n \n-                def sizeForDisplay(self):\n-                    "10 lines"\n \n-            self.mock_adapter(SizedAdapter, ISized, (Item,))\n-            item = Item("test")\n+class DAVTestRequest(TestRequest):\n \n-            self.assertEqual(0, item.get_size())\n+    get_header = TestRequest.getHeader\n \n-        def test_get_size_right_adapter(self):\n-            class SizedAdapter(object):\n-                def __init__(self, context):\n-                    self.context = context\n+    def _createResponse(self):\n+        return HTTPResponse()\n \n-                def sizeForSorting(self):\n-                    return "bytes", 10\n \n-                def sizeForDisplay(self):\n-                    "10 bytes"\n+class TestWebZope2DAVAPI(MockTestCase):\n+    def test_get_size_no_adapter(self):\n+        item = Item("test")\n \n-            self.mock_adapter(SizedAdapter, ISized, (Item,))\n-            item = Item("test")\n+        self.assertEqual(0, item.get_size())\n \n-            self.assertEqual(10, item.get_size())\n+    def test_get_size_wrong_adapter(self):\n+        class SizedAdapter:\n+            def __init__(self, context):\n+                self.context = context\n \n-        def test_content_type_no_adapter(self):\n-            item = Item("test")\n+            def sizeForSorting(self):\n+                return "lines", 10\n \n-            self.assertEqual(None, item.content_type())\n-            self.assertEqual(None, item.Format())\n+            def sizeForDisplay(self):\n+                "10 lines"\n \n-        def test_content_type_simple_adapter(self):\n-            class ReadFileAdapter(object):\n-                def __init__(self, context):\n-                    self.context = context\n+        self.mock_adapter(SizedAdapter, ISized, (Item,))\n+        item = Item("test")\n \n-                mimeType = "text/foo"\n-                # others omitted\n+        self.assertEqual(0, item.get_size())\n \n-            self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n-            item = Item("test")\n+    def test_get_size_right_adapter(self):\n+        class SizedAdapter:\n+            def __init__(self, context):\n+                self.context = context\n \n-            self.assertEqual("text/foo", item.content_type())\n-            self.assertEqual("text/foo", item.Format())\n+            def sizeForSorting(self):\n+                return "bytes", 10\n \n-        def test_get_no_adapter(self):\n-            item = Item("test")\n+            def sizeForDisplay(self):\n+                "10 bytes"\n \n-            self.assertEqual("", item.manage_DAVget())\n+        self.mock_adapter(SizedAdapter, ISized, (Item,))\n+        item = Item("test")\n \n-        def test_get_simple_adapter(self):\n-            class ReadFileAdapter(object):\n-                def __init__(self, context):\n-                    self.context = context\n+        self.assertEqual(10, item.get_size())\n \n-                mimeType = "text/foo"\n-                encoding = "latin1"\n+    def test_content_type_no_adapter(self):\n+        item = Item("test")\n \n-                def size(self):\n-                    return 10\n+        self.assertEqual(None, item.content_type())\n+        self.assertEqual(None, item.Format())\n \n-                def read(self, size=None):\n-                    return "1234567890"\n+    def test_content_type_simple_adapter(self):\n+        class ReadFileAdapter:\n+            def __init__(self, context):\n+                self.context = context\n \n-            self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n+            mimeType = "text/foo"\n+            # others omitted\n \n-            request = DAVTestRequest()\n+        self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n+        item = Item("test")\n \n-            item = Item("item")\n-            item.REQUEST = request\n+        self.assertEqual("text/foo", item.content_type())\n+        self.assertEqual("text/foo", item.Format())\n \n-            self.assertEqual("1234567890", item.manage_DAVget())\n-            self.assertEqual(\n-                \'text/foo; charset="latin1"\', request.response.getHeader("Content-Type")\n-            )\n-            self.assertEqual("10", request.response.getHeader("Content-Length"))\n+    def test_get_no_adapter(self):\n+        item = Item("test")\n \n-        def test_get_minimal_adapter(self):\n-            class ReadFileAdapter(object):\n-                def __init__(self, context):\n-                    self.context = context\n+        self.assertEqual("", item.manage_DAVget())\n \n-                mimeType = None\n-                encoding = None\n+    def test_get_simple_adapter(self):\n+        class ReadFileAdapter:\n+            def __init__(self, context):\n+                self.context = context\n \n-                def size(self):\n-                    return None\n+            mimeType = "text/foo"\n+            encoding = "latin1"\n \n-                def read(self, size=None):\n-                    return "1234567890"\n+            def size(self):\n+                return 10\n \n-            self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n+            def read(self, size=None):\n+                return "1234567890"\n \n-            request = DAVTestRequest()\n+        self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n \n-            item = Item("item")\n-            item.REQUEST = request\n+        request = DAVTestRequest()\n \n-            self.assertEqual("1234567890", item.manage_DAVget())\n-            self.assertEqual(None, request.response.getHeader("Content-Type"))\n-            self.assertEqual(None, request.response.getHeader("Content-Length"))\n+        item = Item("item")\n+        item.REQUEST = request\n \n-        def test_get_streaming(self):\n-            @implementer(IStreamIterator)\n-            class ReadFileAdapter(object):\n-                def __init__(self, context):\n-                    self.context = context\n+        self.assertEqual("1234567890", item.manage_DAVget())\n+        self.assertEqual(\n+            \'text/foo; charset="latin1"\', request.response.getHeader("Content-Type")\n+        )\n+        self.assertEqual("10", request.response.getHeader("Content-Length"))\n \n-                mimeType = None\n-                encoding = None\n+    def test_get_minimal_adapter(self):\n+        class ReadFileAdapter:\n+            def __init__(self, context):\n+                self.context = context\n \n-                def size(self):\n-                    return 10\n+            mimeType = None\n+            encoding = None\n \n-                def read(self, size=None):\n-                    return "1234567890"\n+            def size(self):\n+                return None\n \n-            adapterInstance = ReadFileAdapter(None)\n+            def read(self, size=None):\n+                return "1234567890"\n \n-            def factory(context):\n-                return adapterInstance\n+        self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n \n-            self.mock_adapter(factory, IRawReadFile, (Item,))\n+        request = DAVTestRequest()\n \n-            request = DAVTestRequest()\n+        item = Item("item")\n+        item.REQUEST = request\n \n-            item = Item("item")\n-            item.REQUEST = request\n+        self.assertEqual("1234567890", item.manage_DAVget())\n+        self.assertEqual(None, request.response.getHeader("Content-Type"))\n+        self.assertEqual(None, request.response.getHeader("Content-Length"))\n \n-            self.assertEqual(adapterInstance, item.manage_DAVget())\n+    def test_get_streaming(self):\n+        @implementer(IStreamIterator)\n+        class ReadFileAdapter:\n+            def __init__(self, context):\n+                self.context = context\n \n-        def test_put_no_adapter(self):\n-            request = DAVTestRequest(environ={"BODYFILE": StringIO("")})\n+            mimeType = None\n+            encoding = None\n \n-            item = Item("item")\n-            item.REQUEST = request\n+            def size(self):\n+                return 10\n \n-            self.assertRaises(MethodNotAllowed, item.PUT)\n+            def read(self, size=None):\n+                return "1234567890"\n \n-        def test_put_no_body(self):\n-            request = DAVTestRequest()\n+        adapterInstance = ReadFileAdapter(None)\n \n-            item = Item("item")\n-            item.REQUEST = request\n+        def factory(context):\n+            return adapterInstance\n \n-            self.assertRaises(MethodNotAllowed, item.PUT)\n+        self.mock_adapter(factory, IRawReadFile, (Item,))\n \n-        def test_put_no_content_type_header(self):\n-            class WriteFile(object):\n-                def __init__(self, context):\n-                    self.context = context\n-                    self._written = ""\n-                    self._closed = False\n+        request = DAVTestRequest()\n \n-                mimeType = None\n-                encoding = None\n+        item = Item("item")\n+        item.REQUEST = request\n \n-                def write(self, data):\n-                    self._written += data\n+        self.assertEqual(adapterInstance, item.manage_DAVget())\n \n-                def close(self):\n-                    self._closed = True\n+    def test_put_no_adapter(self):\n+        request = DAVTestRequest(environ={"BODYFILE": StringIO("")})\n \n-            adapterInstance = WriteFile(None)\n+        item = Item("item")\n+        item.REQUEST = request\n \n-            def factory(context):\n-                return adapterInstance\n+        self.assertRaises(MethodNotAllowed, item.PUT)\n \n-            self.mock_adapter(factory, IRawWriteFile, (Item,))\n+    def test_put_no_body(self):\n+        request = DAVTestRequest()\n \n-            request = DAVTestRequest(environ={"BODYFILE": StringIO("data")})\n+        item = Item("item")\n+        item.REQUEST = request\n \n-            item = Item("item")\n-            item.REQUEST = request\n+        self.assertRaises(MethodNotAllowed, item.PUT)\n \n-            item.PUT()\n-            self.assertEqual(None, adapterInstance.mimeType)\n-            self.assertEqual(None, adapterInstance.encoding)\n-            self.assertEqual("data", adapterInstance._written)\n-            self.assertEqual(True, adapterInstance._closed)\n+    def test_put_no_content_type_header(self):\n+        class WriteFile:\n+            def __init__(self, context):\n+                self.context = context\n+                self._written = ""\n+                self._closed = False\n \n-        def test_put_with_content_type_header_no_charset(self):\n-            class WriteFile(object):\n-                def __init__(self, context):\n-                    self.context = context\n-                    self._written = ""\n-                    self._closed = False\n+            mimeType = None\n+            encoding = None\n \n-                mimeType = None\n-                encoding = None\n+            def write(self, data):\n+                self._written += data\n \n-                def write(self, data):\n-                    self._written += data\n+            def close(self):\n+                self._closed = True\n \n-                def close(self):\n-                    self._closed = True\n+        adapterInstance = WriteFile(None)\n \n-            adapterInstance = WriteFile(None)\n+        def factory(context):\n+            return adapterInstance\n \n-            def factory(context):\n-                return adapterInstance\n+        self.mock_adapter(factory, IRawWriteFile, (Item,))\n \n-            events = []\n+        request = DAVTestRequest(environ={"BODYFILE": StringIO("data")})\n \n-            def handler(event):\n-                events.append(event)\n+        item = Item("item")\n+        item.REQUEST = request\n \n-            self.mock_adapter(factory, IRawWriteFile, (Item,))\n-            self.mock_handler(handler, (IObjectModifiedEvent,))\n+        item.PUT()\n+        self.assertEqual(None, adapterInstance.mimeType)\n+        self.assertEqual(None, adapterInstance.encoding)\n+        self.assertEqual("data", adapterInstance._written)\n+        self.assertEqual(True, adapterInstance._closed)\n \n-            request = DAVTestRequest(\n-                environ={"BODYFILE": StringIO("data"), "HTTP_CONTENT_TYPE": "text/foo"}\n-            )\n+    def test_put_with_content_type_header_no_charset(self):\n+        class WriteFile:\n+            def __init__(self, context):\n+                self.context = context\n+                self._written = ""\n+                self._closed = False\n \n-            item = Item("item")\n-            item.REQUEST = request\n+            mimeType = None\n+            encoding = None\n \n-            item.PUT()\n-            self.assertEqual("text/foo", adapterInstance.mimeType)\n-            self.assertEqual(None, adapterInstance.encoding)\n-            self.assertEqual("data", adapterInstance._written)\n-            self.assertEqual(True, adapterInstance._closed)\n-            self.assertEqual(1, len(events))\n+            def write(self, data):\n+                self._written += data\n \n-        def test_put_with_content_type_header_and_charset(self):\n-            class WriteFile(object):\n-                def __init__(self, context):\n-                    self.context = context\n-                    self._written = ""\n-                    self._closed = False\n+            def close(self):\n+                self._closed = True\n \n-                mimeType = None\n-                encoding = None\n+        adapterInstance = WriteFile(None)\n \n-                def write(self, data):\n-                    self._written += data\n+        def factory(context):\n+            return adapterInstance\n \n-                def close(self):\n-                    self._closed = True\n+        events = []\n \n-            adapterInstance = WriteFile(None)\n+        def handler(event):\n+            events.append(event)\n \n-            def factory(context):\n-                return adapterInstance\n+        self.mock_adapter(factory, IRawWriteFile, (Item,))\n+        self.mock_handler(handler, (IObjectModifiedEvent,))\n \n-            events = []\n+        request = DAVTestRequest(\n+            environ={"BODYFILE": StringIO("data"), "HTTP_CONTENT_TYPE": "text/foo"}\n+        )\n \n-            def handler(event):\n-                events.append(event)\n+        item = Item("item")\n+        item.REQUEST = request\n \n-            self.mock_adapter(factory, IRawWriteFile, (Item,))\n-            self.mock_handler(handler, (IObjectModifiedEvent,))\n+        item.PUT()\n+        self.assertEqual("text/foo", adapterInstance.mimeType)\n+        self.assertEqual(None, adapterInstance.encoding)\n+        self.assertEqual("data", adapterInstance._written)\n+        self.assertEqual(True, adapterInstance._closed)\n+        self.assertEqual(1, len(events))\n \n-            request = DAVTestRequest(\n-                environ={\n-                    "BODYFILE": StringIO("data"),\n-                    "HTTP_CONTENT_TYPE": \'text/foo; charset="latin1"\',\n-                }\n-            )\n+    def test_put_with_content_type_header_and_charset(self):\n+        class WriteFile:\n+            def __init__(self, context):\n+                self.context = context\n+                self._written = ""\n+                self._closed = False\n \n-            item = Item("item")\n-            item.REQUEST = request\n+            mimeType = None\n+            encoding = None\n \n-            item.PUT()\n-            self.assertEqual("text/foo", adapterInstance.mimeType)\n-            self.assertEqual("latin1", adapterInstance.encoding)\n-            self.assertEqual("data", adapterInstance._written)\n-            self.assertEqual(True, adapterInstance._closed)\n-            self.assertEqual(1, len(events))\n+            def write(self, data):\n+                self._written += data\n \n-        def test_mkcol_no_adapter(self):\n-            container = Container("container")\n-            self.assertRaises(MethodNotAllowed, container.MKCOL_handler, "test")\n+            def close(self):\n+                self._closed = True\n \n-        def test_mkcol_simple_adapter(self):\n-            created = []\n+        adapterInstance = WriteFile(None)\n \n-            class DirectoryFactory(object):\n-                def __init__(self, context):\n-                    self.context = context\n+        def factory(context):\n+            return adapterInstance\n \n-                def __call__(self, id):\n-                    created.append(id)\n+        events = []\n \n-            self.mock_adapter(DirectoryFactory, IDirectoryFactory, (Container,))\n+        def handler(event):\n+            events.append(event)\n \n-            container = Container("container")\n-            container.MKCOL_handler("test")\n-            self.assertEqual(["test"], created)\n+        self.mock_adapter(factory, IRawWriteFile, (Item,))\n+        self.mock_handler(handler, (IObjectModifiedEvent,))\n \n-        def test_put_factory_no_adapter(self):\n-            container = Container("container")\n-            self.assertEqual(None, container.PUT_factory("test", "text/foo", "body"))\n+        request = DAVTestRequest(\n+            environ={\n+                "BODYFILE": StringIO("data"),\n+                "HTTP_CONTENT_TYPE": \'text/foo; charset="latin1"\',\n+            }\n+        )\n \n-        def test_put_factory_simple_adapter(self):\n-            instance = object()\n+        item = Item("item")\n+        item.REQUEST = request\n \n-            class FileFactory(object):\n-                def __init__(self, context):\n-                    self.context = context\n+        item.PUT()\n+        self.assertEqual("text/foo", adapterInstance.mimeType)\n+        self.assertEqual("latin1", adapterInstance.encoding)\n+        self.assertEqual("data", adapterInstance._written)\n+        self.assertEqual(True, adapterInstance._closed)\n+        self.assertEqual(1, len(events))\n \n-                def __call__(self, name, contentType, body):\n-                    return instance\n+    def test_mkcol_no_adapter(self):\n+        container = Container("container")\n+        self.assertRaises(MethodNotAllowed, container.MKCOL_handler, "test")\n \n-            self.mock_adapter(FileFactory, IFileFactory, (Container,))\n-            container = Container("container")\n-            self.assertEqual(\n-                instance, container.PUT_factory("test", "text/foo", "body")\n-            )\n+    def test_mkcol_simple_adapter(self):\n+        created = []\n \n-        def test_list_without_items(self):\n-            class DummyContainer(Container):\n-                def listFolderContents(self, filter=None):\n-                    return []\n+        class DirectoryFactory:\n+            def __init__(self, context):\n+                self.context = context\n \n-            container = DummyContainer("container")\n+            def __call__(self, id):\n+                created.append(id)\n \n-            objects = container.listDAVObjects()\n-            self.assertEqual(1, len(objects))\n-            self.assertTrue(isinstance(objects[0], FolderDataResource))\n-            self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n-            self.assertEqual(container, objects[0].__parent__)\n+        self.mock_adapter(DirectoryFactory, IDirectoryFactory, (Container,))\n \n-        def test_list_with_items(self):\n-            class DummyContainer(Container):\n-                def listFolderContents(self, filter=None):\n-                    return [Item("foo")]\n+        container = Container("container")\n+        container.MKCOL_handler("test")\n+        self.assertEqual(["test"], created)\n \n-            container = DummyContainer("container")\n+    def test_put_factory_no_adapter(self):\n+        container = Container("container")\n+        self.assertEqual(None, container.PUT_factory("test", "text/foo", "body"))\n \n-            objects = container.listDAVObjects()\n-            self.assertEqual(2, len(objects))\n-            self.assertTrue(isinstance(objects[0], FolderDataResource))\n-            self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n-            self.assertEqual(container, objects[0].__parent__)\n-            self.assertEqual("foo", objects[1].getId())\n+    def test_put_factory_simple_adapter(self):\n+        instance = object()\n \n-    class TestFolderDataResource(MockTestCase):\n-        def test_getId(self):\n-            container = Container("container")\n-            r = FolderDataResource("fdata", container)\n+        class FileFactory:\n+            def __init__(self, context):\n+                self.context = context\n \n-            self.assertEqual("fdata", r.getId())\n-            self.assertEqual(container, r.__parent__)\n-\n-        def test_HEAD(self):\n-            class TestContainer(Container):\n-                def get_size(self):\n-                    return 10\n-\n-                def content_type(self):\n-                    return "text/foo"\n-\n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n-\n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n-\n-            self.assertEqual(response, r.HEAD(request, request.response))\n-            self.assertEqual(200, response.getStatus())\n-            self.assertTrue(response.getHeader("Content-Type").startswith("text/foo"))\n-            self.assertEqual("10", response.getHeader("Content-Length"))\n-\n-        def test_OPTIONS(self):\n-            class TestContainer(Container):\n-                def get_size(self):\n-                    return 10\n-\n-                def content_type(self):\n-                    return "text/foo"\n+            def __call__(self, name, contentType, body):\n+                return instance\n \n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n-\n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n-\n-            self.assertEqual(response, r.OPTIONS(request, request.response))\n-            self.assertEqual(\n-                "GET, HEAD, POST, PUT, DELETE, OPTIONS, TRACE, PROPFIND, "\n-                "PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK",\n-                response.getHeader("Allow"),\n-            )\n-\n-        def test_TRACE(self):\n-            class TestContainer(Container):\n-                def get_size(self):\n-                    return 10\n-\n-                def content_type(self):\n-                    return "text/foo"\n-\n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n-\n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-\n-            self.assertRaises(MethodNotAllowed, r.TRACE, request, request.response)\n-\n-        def test_PROPFIND(self):\n-            class TestContainer(Container):\n-                def get_size(self):\n-                    return 10\n-\n-                def content_type(self):\n-                    return "text/foo"\n-\n-            container = TestContainer("container")\n-            container.manage_changeProperties(title="Container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n-\n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n-\n-            self.assertEqual(response, r.PROPFIND(request, response))\n-            self.assertEqual(\n-                \'text/xml; charset="utf-8"\', response.getHeader("Content-Type")\n-            )\n-            self.assertEqual(207, response.getStatus())\n-\n-            body = (\n-                XML_PROLOG\n-                + b"""\n+        self.mock_adapter(FileFactory, IFileFactory, (Container,))\n+        container = Container("container")\n+        self.assertEqual(instance, container.PUT_factory("test", "text/foo", "body"))\n+\n+    def test_list_without_items(self):\n+        class DummyContainer(Container):\n+            def listFolderContents(self, filter=None):\n+                return []\n+\n+        container = DummyContainer("container")\n+\n+        objects = container.listDAVObjects()\n+        self.assertEqual(1, len(objects))\n+        self.assertTrue(isinstance(objects[0], FolderDataResource))\n+        self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n+        self.assertEqual(container, objects[0].__parent__)\n+\n+    def test_list_with_items(self):\n+        class DummyContainer(Container):\n+            def listFolderContents(self, filter=None):\n+                return [Item("foo")]\n+\n+        container = DummyContainer("container")\n+\n+        objects = container.listDAVObjects()\n+        self.assertEqual(2, len(objects))\n+        self.assertTrue(isinstance(objects[0], FolderDataResource))\n+        self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n+        self.assertEqual(container, objects[0].__parent__)\n+        self.assertEqual("foo", objects[1].getId())\n+\n+\n+class TestFolderDataResource(MockTestCase):\n+    def test_getId(self):\n+        container = Container("container")\n+        r = FolderDataResource("fdata", container)\n+\n+        self.assertEqual("fdata", r.getId())\n+        self.assertEqual(container, r.__parent__)\n+\n+    def test_HEAD(self):\n+        class TestContainer(Container):\n+            def get_size(self):\n+                return 10\n+\n+            def content_type(self):\n+                return "text/foo"\n+\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n+\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n+\n+        self.assertEqual(response, r.HEAD(request, request.response))\n+        self.assertEqual(200, response.getStatus())\n+        self.assertTrue(response.getHeader("Content-Type").startswith("text/foo"))\n+        self.assertEqual("10", response.getHeader("Content-Length"))\n+\n+    def test_OPTIONS(self):\n+        class TestContainer(Container):\n+            def get_size(self):\n+                return 10\n+\n+            def content_type(self):\n+                return "text/foo"\n+\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n+\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n+\n+        self.assertEqual(response, r.OPTIONS(request, request.response))\n+        self.assertEqual(\n+            "GET, HEAD, POST, PUT, DELETE, OPTIONS, TRACE, PROPFIND, "\n+            "PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK",\n+            response.getHeader("Allow"),\n+        )\n+\n+    def test_TRACE(self):\n+        class TestContainer(Container):\n+            def get_size(self):\n+                return 10\n+\n+            def content_type(self):\n+                return "text/foo"\n+\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n+\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+\n+        self.assertRaises(MethodNotAllowed, r.TRACE, request, request.response)\n+\n+    def test_PROPFIND(self):\n+        class TestContainer(Container):\n+            def get_size(self):\n+                return 10\n+\n+            def content_type(self):\n+                return "text/foo"\n+\n+        container = TestContainer("container")\n+        container.manage_changeProperties(title="Container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n+\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n+\n+        self.assertEqual(response, r.PROPFIND(request, response))\n+        self.assertEqual(\n+            \'text/xml; charset="utf-8"\', response.getHeader("Content-Type")\n+        )\n+        self.assertEqual(207, response.getStatus())\n+\n+        body = (\n+            XML_PROLOG\n+            + b"""\n <d:multistatus xmlns:d="DAV:">\n <d:response>\n <d:href>/site/container</d:href>\n@@ -549,29 +529,29 @@ def content_type(self):\n </d:response>\n </d:multistatus>\n """\n-            )\n+        )\n \n-            result = response.getBody()\n-            result = re.sub(\n-                br"<n:getlastmodified>.+</n:getlastmodified>",\n-                br"<n:getlastmodified>...</n:getlastmodified>",\n-                result,\n-            )\n-            self.assertEqual(result.strip(), body.strip())\n+        result = response.getBody()\n+        result = re.sub(\n+            rb"<n:getlastmodified>.+</n:getlastmodified>",\n+            rb"<n:getlastmodified>...</n:getlastmodified>",\n+            result,\n+        )\n+        self.assertEqual(result.strip(), body.strip())\n \n-        def test_PROPPATCH(self):\n-            class TestContainer(Container):\n-                def get_size(self):\n-                    return 10\n+    def test_PROPPATCH(self):\n+        class TestContainer(Container):\n+            def get_size(self):\n+                return 10\n \n-                def content_type(self):\n-                    return "text/foo"\n+            def content_type(self):\n+                return "text/foo"\n \n-            container = TestContainer("container")\n-            container.manage_changeProperties(title="Container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        container = TestContainer("container")\n+        container.manage_changeProperties(title="Container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            requestBody = """\\\n+        requestBody = """\\\n <?xml version="1.0" encoding="utf-8" ?>\n <D:propertyupdate xmlns:D="DAV:"\n                   xmlns:n="http://www.zope.org/propsets/default">\n@@ -583,26 +563,26 @@ def content_type(self):\n </D:propertyupdate>\n """\n \n-            request = DAVTestRequest(\n-                environ={\n-                    "URL": "http://example.org/site/container",\n-                    "BODY": requestBody,\n-                }\n-            )\n-            response = request.response\n+        request = DAVTestRequest(\n+            environ={\n+                "URL": "http://example.org/site/container",\n+                "BODY": requestBody,\n+            }\n+        )\n+        response = request.response\n \n-            self.assertEqual(response, r.PROPPATCH(request, response))\n+        self.assertEqual(response, r.PROPPATCH(request, response))\n \n-            self.assertEqual("New title", container.getProperty("title"))\n+        self.assertEqual("New title", container.getProperty("title"))\n \n-            self.assertEqual(\n-                \'text/xml; charset="utf-8"\', response.getHeader("Content-Type")\n-            )\n-            self.assertEqual(207, response.getStatus())\n+        self.assertEqual(\n+            \'text/xml; charset="utf-8"\', response.getHeader("Content-Type")\n+        )\n+        self.assertEqual(207, response.getStatus())\n \n-            body = (\n-                XML_PROLOG\n-                + b"""\n+        body = (\n+            XML_PROLOG\n+            + b"""\n <d:multistatus xmlns:d="DAV:">\n <d:response>\n <d:href>http%3A//example.org/site/container</d:href>\n@@ -618,523 +598,437 @@ def content_type(self):\n </d:response>\n </d:multistatus>\n """\n-            )\n-\n-            result = response.getBody()\n-\n-            self.assertEqual(body.strip(), result.strip())\n-\n-        def test_LOCK(self):\n-            # Too much WebDAV magic - just test that it delegates correctly\n-            class TestContainer(Container):\n-                def LOCK(self, request, response):\n-                    self._locked = (\n-                        request,\n-                        response,\n-                    )\n-                    return response\n-\n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n-\n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n-\n-            self.assertEqual(response, r.LOCK(request, response))\n-            self.assertEqual((request, response), container._locked)\n+        )\n \n-        def test_UNLOCK(self):\n-            # Too much WebDAV magic - just test that it delegates correctly\n-            class TestContainer(Container):\n-                def UNLOCK(self, request, response):\n-                    self._unlocked = (\n-                        request,\n-                        response,\n-                    )\n-                    return response\n+        result = response.getBody()\n \n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        self.assertEqual(body.strip(), result.strip())\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n+    def test_LOCK(self):\n+        # Too much WebDAV magic - just test that it delegates correctly\n+        class TestContainer(Container):\n+            def LOCK(self, request, response):\n+                self._locked = (\n+                    request,\n+                    response,\n+                )\n+                return response\n \n-            self.assertEqual(response, r.UNLOCK(request, response))\n-            self.assertEqual((request, response), container._unlocked)\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-        def test_PUT(self):\n-            class TestContainer(Container):\n-                def PUT(self, request, response):\n-                    self._put = (\n-                        request,\n-                        response,\n-                    )\n-                    return response\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        self.assertEqual(response, r.LOCK(request, response))\n+        self.assertEqual((request, response), container._locked)\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n+    def test_UNLOCK(self):\n+        # Too much WebDAV magic - just test that it delegates correctly\n+        class TestContainer(Container):\n+            def UNLOCK(self, request, response):\n+                self._unlocked = (\n+                    request,\n+                    response,\n+                )\n+                return response\n \n-            self.assertEqual(response, r.PUT(request, response))\n-            self.assertEqual((request, response), container._put)\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-        def test_MKCOL(self):\n-            container = Container("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n+        self.assertEqual(response, r.UNLOCK(request, response))\n+        self.assertEqual((request, response), container._unlocked)\n \n-            self.assertRaises(MethodNotAllowed, r.MKCOL, request, response)\n+    def test_PUT(self):\n+        class TestContainer(Container):\n+            def PUT(self, request, response):\n+                self._put = (\n+                    request,\n+                    response,\n+                )\n+                return response\n \n-        def test_DELETE(self):\n-            container = Container("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            self.assertRaises(MethodNotAllowed, r.DELETE, request, response)\n+        self.assertEqual(response, r.PUT(request, response))\n+        self.assertEqual((request, response), container._put)\n \n-        def test_COPY(self):\n-            container = Container("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+    def test_MKCOL(self):\n+        container = Container("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            self.assertRaises(MethodNotAllowed, r.COPY, request, response)\n+        self.assertRaises(MethodNotAllowed, r.MKCOL, request, response)\n \n-        def test_MOVE(self):\n-            container = Container("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+    def test_DELETE(self):\n+        container = Container("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            self.assertRaises(MethodNotAllowed, r.MOVE, request, response)\n+        self.assertRaises(MethodNotAllowed, r.DELETE, request, response)\n \n-        def test_manage_DAVget(self):\n-            class TestContainer(Container):\n-                def manage_DAVget(self):\n-                    return "data"\n+    def test_COPY(self):\n+        container = Container("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            self.assertEqual("data", r.manage_DAVget())\n+        self.assertRaises(MethodNotAllowed, r.COPY, request, response)\n \n-        def test_manage_FTPget(self):\n-            class TestContainer(Container):\n-                def manage_FTPget(self):\n-                    return "data"\n+    def test_MOVE(self):\n+        container = Container("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            self.assertEqual("data", r.manage_FTPget())\n+        self.assertRaises(MethodNotAllowed, r.MOVE, request, response)\n \n-        def test_listDAVObjects(self):\n-            container = Container("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+    def test_manage_DAVget(self):\n+        class TestContainer(Container):\n+            def manage_DAVget(self):\n+                return "data"\n \n-            self.assertEqual([], r.listDAVObjects())\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-    class TestFileRepresentation(MockTestCase):\n-        def create_dummy(self, **kw):\n-            return ItemDummy(**kw)\n-\n-        def test_directory_factory(self):\n-            class TestContainer(Container):\n-                def manage_addFolder(self, name):\n-                    self._added = name\n+        self.assertEqual("data", r.manage_DAVget())\n \n-            container = TestContainer("container")\n-            factory = DefaultDirectoryFactory(container)\n+    def test_manage_FTPget(self):\n+        class TestContainer(Container):\n+            def manage_FTPget(self):\n+                return "data"\n \n-            factory("foo")\n-            self.assertEqual("foo", container._added)\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-        def test_file_factory_finder_cruft(self):\n-            container = Container("container")\n-            factory = DefaultFileFactory(container)\n+        self.assertEqual("data", r.manage_FTPget())\n \n-            self.assertRaises(\n-                Unauthorized, factory, ".DS_Store", "application/octet-stream", "xxx"\n-            )\n-            self.assertRaises(\n-                Unauthorized, factory, "._test", "application/octet-stream", "xxx"\n-            )\n-\n-        def test_file_factory_no_ctr(self):\n-            container = Container("container")\n-\n-            from Products.CMFCore.utils import getToolByName\n-\n-            self.patch_global(getToolByName, return_value=None)\n-\n-            factory = DefaultFileFactory(container)\n-\n-            self.assertEqual(None, factory("test.html", "text/html", "<html />"))\n-\n-        def test_file_factory_no_fti(self):\n-            container = Container("container")\n-\n-            ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value=None)\n-            self.mock_tool(ctr_mock, "content_type_registry")\n-\n-            factory = DefaultFileFactory(container)\n-\n-            self.assertEqual(None, factory("test.html", "text/html", "<html />"))\n-\n-        def test_file_factory_not_allowed(self):\n-            container = Container("container")\n-            container.portal_type = "containertype"\n-\n-            child_fti_mock = Mock()\n-            child_fti_mock.product = None\n-            container_fti_mock = Mock()\n-            container_fti_mock.allowType = Mock(return_value=False)\n-            ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value="childtype")\n-            pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n-            self.mock_tool(ctr_mock, "content_type_registry")\n-            self.mock_tool(pt_mock, "portal_types")\n-\n-            factory = DefaultFileFactory(container)\n-\n-            self.assertRaises(\n-                Unauthorized, factory, "test.html", "text/html", "<html />"\n-            )\n-\n-        def test_file_factory_construction_not_allowed(self):\n-            container = Container("container")\n-            container.portal_type = "containertype"\n-\n-            child_fti_mock = Mock()\n-            child_fti_mock.product = None\n-            child_fti_mock.isConstructionAllowed = Mock(return_value=False)\n-            container_fti_mock = Mock()\n-            container_fti_mock.allowType = Mock(return_value=True)\n-            ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value="childtype")\n-            pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n-            self.mock_tool(ctr_mock, "content_type_registry")\n-            self.mock_tool(pt_mock, "portal_types")\n-\n-            factory = DefaultFileFactory(container)\n-\n-            self.assertRaises(\n-                Unauthorized, factory, "test.html", "text/html", "<html />"\n-            )\n-\n-        def test_file_factory_factory_method(self):\n-            result_dummy = self.create_dummy()\n-            container_mock = Mock()\n-            container_mock.invokeFactory = Mock(return_value="test-1.html")\n-            container_mock._getOb = Mock(return_value=result_dummy)\n-            container_mock._delObject = Mock()\n-            child_fti_mock = Mock()\n-            child_fti_mock.product = "FooProduct"\n-            ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value="childtype")\n-            pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(return_value=child_fti_mock)\n-            self.mock_tool(ctr_mock, "content_type_registry")\n-            self.mock_tool(pt_mock, "portal_types")\n-\n-            factory = DefaultFileFactory(container_mock)\n-\n-            self.assertEqual(\n-                result_dummy, factory("test.html", "text/html", "<html />")\n-            )\n-\n-        def test_file_factory_factory_utility(self):\n-            result_dummy = self.create_dummy(id="test.html")\n-            container_mock = Mock()\n-            child_fti_mock = Mock()\n-            child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n-            child_fti_mock.product = None\n-            child_fti_mock.factory = "childtype-factory"\n-            container_fti_mock = Mock()\n-            container_fti_mock.allowType = Mock(return_value=True)\n-            ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value="childtype")\n-            pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n-            self.mock_tool(ctr_mock, "content_type_registry")\n-            self.mock_tool(pt_mock, "portal_types")\n+    def test_listDAVObjects(self):\n+        container = Container("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            def factory(*args, **kwargs):\n-                return result_dummy\n+        self.assertEqual([], r.listDAVObjects())\n \n-            self.mock_utility(factory, IFactory, name=u"childtype-factory")\n \n-            factory = DefaultFileFactory(container_mock)\n-\n-            self.assertEqual(\n-                result_dummy, factory("test.html", "text/html", "<html />")\n-            )\n-            self.assertEqual(result_dummy.Title(), "test.html")\n-\n-        def test_file_factory_content_type_factory_utility(self):\n-            container_mock = Mock()\n-            child_fti_mock = Mock()\n-            child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n-            child_fti_mock.getId = Mock(return_value="childtype")\n-            child_fti_mock.product = None\n-            child_fti_mock.factory = "childtype-factory"\n-            container_fti_mock = Mock()\n-            container_fti_mock.allowType = Mock(return_value=True)\n-            ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value="childtype")\n-            pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n-            self.mock_tool(ctr_mock, "content_type_registry")\n-            self.mock_tool(pt_mock, "portal_types")\n-\n-            def factory(*args, **kwargs):\n-                return Item(*args, **kwargs)\n-\n-            self.mock_utility(factory, IFactory, name=u"childtype-factory")\n+class TestFileRepresentation(MockTestCase):\n+    def create_dummy(self, **kw):\n+        return ItemDummy(**kw)\n \n-            factory = DefaultFileFactory(container_mock)\n+    def test_directory_factory(self):\n+        class TestContainer(Container):\n+            def manage_addFolder(self, name):\n+                self._added = name\n \n-            item = factory("test.html", "text/html", "<html />")\n+        container = TestContainer("container")\n+        factory = DefaultDirectoryFactory(container)\n \n-            self.assertEqual("test.html", item.id)\n-\n-        def test_readfile_mimetype_no_message_no_fields(self):\n-            class ITest(Interface):\n-                pass\n-\n-            SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u"testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n-            fti_mock.behaviors = []\n+        factory("foo")\n+        self.assertEqual("foo", container._added)\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+    def test_file_factory_finder_cruft(self):\n+        container = Container("container")\n+        factory = DefaultFileFactory(container)\n \n-            item = Item("item")\n-            item.portal_type = "testtype"\n+        self.assertRaises(\n+            Unauthorized, factory, ".DS_Store", "application/octet-stream", "xxx"\n+        )\n+        self.assertRaises(\n+            Unauthorized, factory, "._test", "application/octet-stream", "xxx"\n+        )\n \n-            readfile = DefaultReadFile(item)\n+    def test_file_factory_no_ctr(self):\n+        container = Container("container")\n \n-            self.assertEqual("text/plain", readfile.mimeType)\n+        from Products.CMFCore.utils import getToolByName\n \n-        def test_readfile_mimetype_no_message_no_primary_field(self):\n-            class ITest(Interface):\n-                title = schema.TextLine()\n+        self.patch_global(getToolByName, return_value=None)\n \n-            SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u"testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n-            fti_mock.behaviors = []\n+        factory = DefaultFileFactory(container)\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.assertEqual(None, factory("test.html", "text/html", "<html />"))\n \n-            item = Item("item")\n-            item.portal_type = "testtype"\n+    def test_file_factory_no_fti(self):\n+        container = Container("container")\n \n-            readfile = DefaultReadFile(item)\n+        ctr_mock = Mock()\n+        ctr_mock.findTypeName = Mock(return_value=None)\n+        self.mock_tool(ctr_mock, "content_type_registry")\n \n-            self.assertEqual("text/plain", readfile.mimeType)\n+        factory = DefaultFileFactory(container)\n \n-        def test_readfile_mimetype_no_message_single_primary_field(self):\n-            class ITest(Interface):\n-                title = schema.TextLine()\n-                body = schema.Text()\n+        self.assertEqual(None, factory("test.html", "text/html", "<html />"))\n \n-            alsoProvides(ITest["body"], IPrimaryField)\n+    def test_file_factory_not_allowed(self):\n+        container = Container("container")\n+        container.portal_type = "containertype"\n \n-            SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u"testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n-            fti_mock.behaviors = []\n+        child_fti_mock = Mock()\n+        child_fti_mock.product = None\n+        container_fti_mock = Mock()\n+        container_fti_mock.allowType = Mock(return_value=False)\n+        ctr_mock = Mock()\n+        ctr_mock.findTypeName = Mock(return_value="childtype")\n+        pt_mock = Mock()\n+        pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n+        self.mock_tool(ctr_mock, "content_type_registry")\n+        self.mock_tool(pt_mock, "portal_types")\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        factory = DefaultFileFactory(container)\n \n-            item = Item("item")\n-            item.portal_type = "testtype"\n+        self.assertRaises(Unauthorized, factory, "test.html", "text/html", "<html />")\n \n-            readfile = DefaultReadFile(item)\n+    def test_file_factory_construction_not_allowed(self):\n+        container = Container("container")\n+        container.portal_type = "containertype"\n \n-            self.assertEqual("text/plain", readfile.mimeType)\n+        child_fti_mock = Mock()\n+        child_fti_mock.product = None\n+        child_fti_mock.isConstructionAllowed = Mock(return_value=False)\n+        container_fti_mock = Mock()\n+        container_fti_mock.allowType = Mock(return_value=True)\n+        ctr_mock = Mock()\n+        ctr_mock.findTypeName = Mock(return_value="childtype")\n+        pt_mock = Mock()\n+        pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n+        self.mock_tool(ctr_mock, "content_type_registry")\n+        self.mock_tool(pt_mock, "portal_types")\n \n-        def test_readfile_mimetype_no_message_multiple_primary_fields(self):\n-            class ITest(Interface):\n-                title = schema.TextLine()\n-                body = schema.Text()\n-                stuff = schema.Bytes()\n+        factory = DefaultFileFactory(container)\n+\n+        self.assertRaises(Unauthorized, factory, "test.html", "text/html", "<html />")\n \n-            alsoProvides(ITest["body"], IPrimaryField)\n-            alsoProvides(ITest["stuff"], IPrimaryField)\n+    def test_file_factory_factory_method(self):\n+        result_dummy = self.create_dummy()\n+        container_mock = Mock()\n+        container_mock.invokeFactory = Mock(return_value="test-1.html")\n+        container_mock._getOb = Mock(return_value=result_dummy)\n+        container_mock._delObject = Mock()\n+        child_fti_mock = Mock()\n+        child_fti_mock.product = "FooProduct"\n+        ctr_mock = Mock()\n+        ctr_mock.findTypeName = Mock(return_value="childtype")\n+        pt_mock = Mock()\n+        pt_mock.getTypeInfo = Mock(return_value=child_fti_mock)\n+        self.mock_tool(ctr_mock, "content_type_registry")\n+        self.mock_tool(pt_mock, "portal_types")\n+\n+        factory = DefaultFileFactory(container_mock)\n+\n+        self.assertEqual(result_dummy, factory("test.html", "text/html", "<html />"))\n+\n+    def test_file_factory_factory_utility(self):\n+        result_dummy = self.create_dummy(id="test.html")\n+        container_mock = Mock()\n+        child_fti_mock = Mock()\n+        child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n+        child_fti_mock.product = None\n+        child_fti_mock.factory = "childtype-factory"\n+        container_fti_mock = Mock()\n+        container_fti_mock.allowType = Mock(return_value=True)\n+        ctr_mock = Mock()\n+        ctr_mock.findTypeName = Mock(return_value="childtype")\n+        pt_mock = Mock()\n+        pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n+        self.mock_tool(ctr_mock, "content_type_registry")\n+        self.mock_tool(pt_mock, "portal_types")\n+\n+        def factory(*args, **kwargs):\n+            return result_dummy\n+\n+        self.mock_utility(factory, IFactory, name="childtype-factory")\n+\n+        factory = DefaultFileFactory(container_mock)\n+\n+        self.assertEqual(result_dummy, factory("test.html", "text/html", "<html />"))\n+        self.assertEqual(result_dummy.Title(), "test.html")\n+\n+    def test_file_factory_content_type_factory_utility(self):\n+        container_mock = Mock()\n+        child_fti_mock = Mock()\n+        child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n+        child_fti_mock.getId = Mock(return_value="childtype")\n+        child_fti_mock.product = None\n+        child_fti_mock.factory = "childtype-factory"\n+        container_fti_mock = Mock()\n+        container_fti_mock.allowType = Mock(return_value=True)\n+        ctr_mock = Mock()\n+        ctr_mock.findTypeName = Mock(return_value="childtype")\n+        pt_mock = Mock()\n+        pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n+        self.mock_tool(ctr_mock, "content_type_registry")\n+        self.mock_tool(pt_mock, "portal_types")\n+\n+        def factory(*args, **kwargs):\n+            return Item(*args, **kwargs)\n+\n+        self.mock_utility(factory, IFactory, name="childtype-factory")\n+\n+        factory = DefaultFileFactory(container_mock)\n+\n+        item = factory("test.html", "text/html", "<html />")\n+\n+        self.assertEqual("test.html", item.id)\n+\n+    def test_readfile_mimetype_no_message_no_fields(self):\n+        class ITest(Interface):\n+            pass\n \n-            SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u"testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n+        SCHEMA_CACHE.clear()\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n+        fti_mock.behaviors = []\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n-            item = Item("item")\n-            item.portal_type = "testtype"\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-            readfile = DefaultReadFile(item)\n+        item = Item("item")\n+        item.portal_type = "testtype"\n \n-            self.assertEqual("message/rfc822", readfile.mimeType)\n+        readfile = DefaultReadFile(item)\n \n-        def test_readfile_mimetype_additional_schemata(self):\n-            # This is mostly a test that utils.iterSchemata takes\n-            # IBehaviorAssignable into account.\n+        self.assertEqual("text/plain", readfile.mimeType)\n \n-            class ITest(Interface):\n-                title = schema.TextLine()\n+    def test_readfile_mimetype_no_message_no_primary_field(self):\n+        class ITest(Interface):\n+            title = schema.TextLine()\n \n-            class ITestAdditional(Interface):\n-                # Additional behavior on an item\n-                body = schema.Text()\n-                stuff = schema.Bytes()\n+        SCHEMA_CACHE.clear()\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n+        fti_mock.behaviors = []\n \n-            alsoProvides(ITestAdditional["body"], IPrimaryField)\n-            alsoProvides(ITestAdditional["stuff"], IPrimaryField)\n-            alsoProvides(ITestAdditional, IFormFieldProvider)\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-            class MockBehavior(object):\n-                def __init__(self, iface):\n-                    self.interface = iface\n+        item = Item("item")\n+        item.portal_type = "testtype"\n \n-            class MockBehaviorAssignable(object):\n-                def __init__(self, context):\n-                    self.context = context\n+        readfile = DefaultReadFile(item)\n \n-                def enumerateBehaviors(self):\n-                    yield MockBehavior(ITestAdditional)\n+        self.assertEqual("text/plain", readfile.mimeType)\n \n-            SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u"testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n+    def test_readfile_mimetype_no_message_single_primary_field(self):\n+        class ITest(Interface):\n+            title = schema.TextLine()\n+            body = schema.Text()\n \n-            self.mock_adapter(MockBehaviorAssignable, IBehaviorAssignable, (Item,))\n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n-            item = Item("item")\n-            item.portal_type = "testtype"\n+        alsoProvides(ITest["body"], IPrimaryField)\n \n-            readfile = DefaultReadFile(item)\n+        SCHEMA_CACHE.clear()\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n+        fti_mock.behaviors = []\n \n-            self.assertEqual("message/rfc822", readfile.mimeType)\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        def test_readfile_operations(self):\n-            class ITest(Interface):\n-                title = schema.TextLine()\n-                body = schema.Text()\n+        item = Item("item")\n+        item.portal_type = "testtype"\n \n-            alsoProvides(ITest["body"], IPrimaryField)\n+        readfile = DefaultReadFile(item)\n \n-            fti_mock = DexterityFTI(u"testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n-            fti_mock.behaviors = [ITestBehavior.__identifier__]\n+        self.assertEqual("text/plain", readfile.mimeType)\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+    def test_readfile_mimetype_no_message_multiple_primary_fields(self):\n+        class ITest(Interface):\n+            title = schema.TextLine()\n+            body = schema.Text()\n+            stuff = schema.Bytes()\n \n-            item = Item("item")\n-            item.portal_type = "testtype"\n+        alsoProvides(ITest["body"], IPrimaryField)\n+        alsoProvides(ITest["stuff"], IPrimaryField)\n \n-            readfile = DefaultReadFile(item)\n+        SCHEMA_CACHE.clear()\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n \n-            message = Message()\n-            message["title"] = "Test title"\n-            message["foo"] = "10"\n-            message["bar"] = "xyz"\n-            message.set_payload("<p>body</p>")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n+        item = Item("item")\n+        item.portal_type = "testtype"\n \n-            from plone.rfc822 import constructMessageFromSchemata\n+        readfile = DefaultReadFile(item)\n \n-            self.patch_global(constructMessageFromSchemata, return_value=message)\n+        self.assertEqual("message/rfc822", readfile.mimeType)\n \n-            body = b"""\\\n-title: Test title\n-foo: 10\n-bar: xyz\n-Portal-Type: testtype\n+    def test_readfile_mimetype_additional_schemata(self):\n+        # This is mostly a test that utils.iterSchemata takes\n+        # IBehaviorAssignable into account.\n \n-<p>body</p>"""\n+        class ITest(Interface):\n+            title = schema.TextLine()\n+\n+        class ITestAdditional(Interface):\n+            # Additional behavior on an item\n+            body = schema.Text()\n+            stuff = schema.Bytes()\n \n-            # iter\n-            # next\n+        alsoProvides(ITestAdditional["body"], IPrimaryField)\n+        alsoProvides(ITestAdditional["stuff"], IPrimaryField)\n+        alsoProvides(ITestAdditional, IFormFieldProvider)\n \n-            self.assertEqual(body, readfile.read())\n-            self.assertEqual(69, readfile.size())\n-            self.assertEqual("utf-8", readfile.encoding)\n-            self.assertEqual(None, readfile.name)\n-            self.assertEqual("text/plain", readfile.mimeType)\n+        class MockBehavior:\n+            def __init__(self, iface):\n+                self.interface = iface\n \n-            readfile.seek(2)\n-            self.assertEqual(2, readfile.tell())\n-            self.assertEqual(b"tl", readfile.read(2))\n-            self.assertEqual(4, readfile.tell())\n+        class MockBehaviorAssignable:\n+            def __init__(self, context):\n+                self.context = context\n \n-            readfile.seek(0, 2)\n-            self.assertEqual(69, readfile.tell())\n+            def enumerateBehaviors(self):\n+                yield MockBehavior(ITestAdditional)\n \n-            readfile.seek(0)\n-            self.assertEqual(b"foo: 10\\n", readfile.readlines()[1])\n+        SCHEMA_CACHE.clear()\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n \n-            readfile.seek(0)\n-            self.assertEqual(b"foo: 10\\n", readfile.readlines(100)[1])\n+        self.mock_adapter(MockBehaviorAssignable, IBehaviorAssignable, (Item,))\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n+        item = Item("item")\n+        item.portal_type = "testtype"\n \n-            readfile.seek(0)\n-            self.assertEqual(b"title: Test title\\n", readfile.readline())\n+        readfile = DefaultReadFile(item)\n \n-            readfile.seek(0)\n-            self.assertEqual(b"title: Test title\\n", readfile.readline(100))\n+        self.assertEqual("message/rfc822", readfile.mimeType)\n \n-            readfile.seek(0)\n-            self.assertEqual(b"foo: 10\\n", list(iter(readfile))[1])\n+    def test_readfile_operations(self):\n+        class ITest(Interface):\n+            title = schema.TextLine()\n+            body = schema.Text()\n \n-            self.assertEqual(False, readfile.closed)\n-            readfile.close()\n+        alsoProvides(ITest["body"], IPrimaryField)\n \n-        def test_writefile_file_operations(self):\n-            class ITest(Interface):\n-                title = schema.TextLine()\n-                body = schema.Text()\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n+        fti_mock.behaviors = [ITestBehavior.__identifier__]\n \n-            alsoProvides(ITest["body"], IPrimaryField)\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-            fti_mock = DexterityFTI(u"testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n-            fti_mock.behaviors = [ITestBehavior.__identifier__]\n+        item = Item("item")\n+        item.portal_type = "testtype"\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        readfile = DefaultReadFile(item)\n \n-            item = Item("item")\n-            item.portal_type = "testtype"\n-            item.title = u"Test title"\n-            item.foo = 10\n-            item.bar = "xyz"\n-            item.body = u"<p>body</p>"\n+        message = Message()\n+        message["title"] = "Test title"\n+        message["foo"] = "10"\n+        message["bar"] = "xyz"\n+        message.set_payload("<p>body</p>")\n \n-            writefile = DefaultWriteFile(item)\n+        from plone.rfc822 import constructMessageFromSchemata\n \n-            body = b"""\\\n+        self.patch_global(constructMessageFromSchemata, return_value=message)\n+\n+        body = b"""\\\n title: Test title\n foo: 10\n bar: xyz\n@@ -1142,168 +1036,227 @@ class ITest(Interface):\n \n <p>body</p>"""\n \n-            from plone.rfc822 import initializeObjectFromSchemata\n+        # iter\n+        # next\n+\n+        self.assertEqual(body, readfile.read())\n+        self.assertEqual(69, readfile.size())\n+        self.assertEqual("utf-8", readfile.encoding)\n+        self.assertEqual(None, readfile.name)\n+        self.assertEqual("text/plain", readfile.mimeType)\n+\n+        readfile.seek(2)\n+        self.assertEqual(2, readfile.tell())\n+        self.assertEqual(b"tl", readfile.read(2))\n+        self.assertEqual(4, readfile.tell())\n+\n+        readfile.seek(0, 2)\n+        self.assertEqual(69, readfile.tell())\n+\n+        readfile.seek(0)\n+        self.assertEqual(b"foo: 10\\n", readfile.readlines()[1])\n \n-            self.patch_global(initializeObjectFromSchemata)\n+        readfile.seek(0)\n+        self.assertEqual(b"foo: 10\\n", readfile.readlines(100)[1])\n \n-            writefile.mimeType = "text/plain"\n-            self.assertEqual("text/plain", writefile.mimeType)\n+        readfile.seek(0)\n+        self.assertEqual(b"title: Test title\\n", readfile.readline())\n \n-            writefile.encoding = "latin1"\n-            self.assertEqual("latin1", writefile.encoding)\n+        readfile.seek(0)\n+        self.assertEqual(b"title: Test title\\n", readfile.readline(100))\n \n-            writefile.filename = "test.html"\n-            self.assertEqual("test.html", writefile.filename)\n+        readfile.seek(0)\n+        self.assertEqual(b"foo: 10\\n", list(iter(readfile))[1])\n \n-            self.assertEqual(False, writefile.closed)\n-            self.assertEqual(0, writefile.tell())\n+        self.assertEqual(False, readfile.closed)\n+        readfile.close()\n \n-            writefile.writelines(["one\\n", "two"])\n-            self.assertEqual(7, writefile.tell())\n+    def test_writefile_file_operations(self):\n+        class ITest(Interface):\n+            title = schema.TextLine()\n+            body = schema.Text()\n \n-            self.assertRaises(NotImplementedError, writefile.truncate)\n+        alsoProvides(ITest["body"], IPrimaryField)\n \n-            writefile.truncate(0)\n-            self.assertEqual(0, writefile.tell())\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n+        fti_mock.behaviors = [ITestBehavior.__identifier__]\n \n-            self.assertRaises(NotImplementedError, writefile.seek, 10)\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-            writefile.write(body[:10])\n-            writefile.write(body[10:])\n-            writefile.close()\n+        item = Item("item")\n+        item.portal_type = "testtype"\n+        item.title = "Test title"\n+        item.foo = 10\n+        item.bar = "xyz"\n+        item.body = "<p>body</p>"\n \n-            self.assertEqual(True, writefile.closed)\n-            self.assertEqual(69, writefile.tell())\n+        writefile = DefaultWriteFile(item)\n \n-    class TestDAVTraversal(MockTestCase):\n-        def test_no_acquire_dav(self):\n-            container = Container("container")\n+        body = b"""\\\n+title: Test title\n+foo: 10\n+bar: xyz\n+Portal-Type: testtype\n \n-            outer = Folder("outer")\n-            outer._setOb("item", SimpleItem("item"))\n-            outer._setOb("container", container)\n+<p>body</p>"""\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://site/test", "REQUEST_METHOD": "PUT"}\n-            )\n-            request.maybe_webdav_client = True\n+        from plone.rfc822 import initializeObjectFromSchemata\n \n-            traversal = DexterityPublishTraverse(container.__of__(outer), request)\n+        self.patch_global(initializeObjectFromSchemata)\n \n-            r = traversal.publishTraverse(request, "item")\n+        writefile.mimeType = "text/plain"\n+        self.assertEqual("text/plain", writefile.mimeType)\n \n-            self.assertTrue(isinstance(r, NullResource))\n-            self.assertEqual(container, r.aq_parent)\n+        writefile.encoding = "latin1"\n+        self.assertEqual("latin1", writefile.encoding)\n \n-        def test_acquire_without_dav(self):\n-            container = Container("container")\n+        writefile.filename = "test.html"\n+        self.assertEqual("test.html", writefile.filename)\n \n-            outer = Folder("outer")\n-            outer._setObject("item", SimpleItem("item"))\n-            outer._setOb("container", container)\n+        self.assertEqual(False, writefile.closed)\n+        self.assertEqual(0, writefile.tell())\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://site/test", "REQUEST_METHOD": "GET"}\n-            )\n-            request.maybe_webdav_client = False\n+        writefile.writelines(["one\\n", "two"])\n+        self.assertEqual(7, writefile.tell())\n \n-            traversal = DexterityPublishTraverse(container.__of__(outer), request)\n+        self.assertRaises(NotImplementedError, writefile.truncate)\n \n-            r = traversal.publishTraverse(request, "item")\n+        writefile.truncate(0)\n+        self.assertEqual(0, writefile.tell())\n \n-            self.assertEqual(r.aq_base, outer["item"].aq_base)\n-            self.assertEqual(container, r.aq_parent)\n+        self.assertRaises(NotImplementedError, writefile.seek, 10)\n \n-        def test_folder_data_traversal_dav(self):\n-            container = Container("test")\n-            request = DAVTestRequest(environ={"URL": "http://site/test"})\n-            request.maybe_webdav_client = True\n+        writefile.write(body[:10])\n+        writefile.write(body[10:])\n+        writefile.close()\n \n-            traversal = DexterityPublishTraverse(container, request)\n+        self.assertEqual(True, writefile.closed)\n+        self.assertEqual(69, writefile.tell())\n \n-            r = traversal.publishTraverse(request, DAV_FOLDER_DATA_ID)\n \n-            self.assertEqual(DAV_FOLDER_DATA_ID, r.__name__)\n-            self.assertEqual(container, r.__parent__)\n-            self.assertEqual(container, r.aq_parent)\n+class TestDAVTraversal(MockTestCase):\n+    def test_no_acquire_dav(self):\n+        container = Container("container")\n \n-        def test_folder_data_traversal_without_dav(self):\n-            container = Container("test")\n-            request = DAVTestRequest(environ={"URL": "http://site/test"})\n-            request.maybe_webdav_client = False\n+        outer = Folder("outer")\n+        outer._setOb("item", SimpleItem("item"))\n+        outer._setOb("container", container)\n \n-            traversal = DexterityPublishTraverse(container, request)\n+        request = DAVTestRequest(\n+            environ={"URL": "http://site/test", "REQUEST_METHOD": "PUT"}\n+        )\n+        request.maybe_webdav_client = True\n \n-            self.assertRaises(\n-                Forbidden, traversal.publishTraverse, request, DAV_FOLDER_DATA_ID\n-            )\n+        traversal = DexterityPublishTraverse(container.__of__(outer), request)\n \n-        def test_browser_default_dav(self):\n-            class TestContainer(Container):\n-                def __browser_default__(self, request):\n-                    return self, ("foo",)\n+        r = traversal.publishTraverse(request, "item")\n \n-            container = TestContainer("container")\n-            request = DAVTestRequest(\n-                environ={"URL": "http://site/test", "REQUEST_METHOD": "PROPFIND"}\n-            )\n-            request.maybe_webdav_client = True\n+        self.assertTrue(isinstance(r, NullResource))\n+        self.assertEqual(container, r.aq_parent)\n \n-            traversal = DexterityPublishTraverse(container, request)\n+    def test_acquire_without_dav(self):\n+        container = Container("container")\n \n-            self.assertEqual(\n-                (\n-                    container,\n-                    (),\n-                ),\n-                traversal.browserDefault(request),\n-            )\n+        outer = Folder("outer")\n+        outer._setObject("item", SimpleItem("item"))\n+        outer._setOb("container", container)\n \n-        def test_browser_default_dav_get(self):\n-            class TestContainer(Container):\n-                def __browser_default__(self, request):\n-                    return self, ("foo",)\n+        request = DAVTestRequest(\n+            environ={"URL": "http://site/test", "REQUEST_METHOD": "GET"}\n+        )\n+        request.maybe_webdav_client = False\n \n-            container = TestContainer("container")\n-            request = DAVTestRequest(\n-                environ={"URL": "http://site/test", "REQUEST_METHOD": "GET"}\n-            )\n-            request.maybe_webdav_client = True\n+        traversal = DexterityPublishTraverse(container.__of__(outer), request)\n \n-            traversal = DexterityPublishTraverse(container, request)\n+        r = traversal.publishTraverse(request, "item")\n \n-            self.assertEqual(\n-                (\n-                    container,\n-                    ("foo",),\n-                ),\n-                traversal.browserDefault(request),\n-            )\n+        self.assertEqual(r.aq_base, outer["item"].aq_base)\n+        self.assertEqual(container, r.aq_parent)\n \n-        def test_browser_default_without_dav(self):\n-            class TestContainer(Container):\n-                def __browser_default__(self, request):\n-                    return self, ("foo",)\n+    def test_folder_data_traversal_dav(self):\n+        container = Container("test")\n+        request = DAVTestRequest(environ={"URL": "http://site/test"})\n+        request.maybe_webdav_client = True\n \n-            container = TestContainer("container")\n-            request = DAVTestRequest(\n-                environ={"URL": "http://site/test", "REQUEST_METHOD": "PROPFIND"}\n-            )\n-            request.maybe_webdav_client = False\n+        traversal = DexterityPublishTraverse(container, request)\n \n-            traversal = DexterityPublishTraverse(container, request)\n+        r = traversal.publishTraverse(request, DAV_FOLDER_DATA_ID)\n \n-            self.assertEqual(\n-                (\n-                    container,\n-                    ("foo",),\n-                ),\n-                traversal.browserDefault(request),\n-            )\n+        self.assertEqual(DAV_FOLDER_DATA_ID, r.__name__)\n+        self.assertEqual(container, r.__parent__)\n+        self.assertEqual(container, r.aq_parent)\n \n+    def test_folder_data_traversal_without_dav(self):\n+        container = Container("test")\n+        request = DAVTestRequest(environ={"URL": "http://site/test"})\n+        request.maybe_webdav_client = False\n \n-else:\n+        traversal = DexterityPublishTraverse(container, request)\n \n-    class TestDummy(MockTestCase):\n-        def test_dummy(self):\n-            pass\n+        self.assertRaises(\n+            Forbidden, traversal.publishTraverse, request, DAV_FOLDER_DATA_ID\n+        )\n+\n+    def test_browser_default_dav(self):\n+        class TestContainer(Container):\n+            def __browser_default__(self, request):\n+                return self, ("foo",)\n+\n+        container = TestContainer("container")\n+        request = DAVTestRequest(\n+            environ={"URL": "http://site/test", "REQUEST_METHOD": "PROPFIND"}\n+        )\n+        request.maybe_webdav_client = True\n+\n+        traversal = DexterityPublishTraverse(container, request)\n+\n+        self.assertEqual(\n+            (\n+                container,\n+                (),\n+            ),\n+            traversal.browserDefault(request),\n+        )\n+\n+    def test_browser_default_dav_get(self):\n+        class TestContainer(Container):\n+            def __browser_default__(self, request):\n+                return self, ("foo",)\n+\n+        container = TestContainer("container")\n+        request = DAVTestRequest(\n+            environ={"URL": "http://site/test", "REQUEST_METHOD": "GET"}\n+        )\n+        request.maybe_webdav_client = True\n+\n+        traversal = DexterityPublishTraverse(container, request)\n+\n+        self.assertEqual(\n+            (\n+                container,\n+                ("foo",),\n+            ),\n+            traversal.browserDefault(request),\n+        )\n+\n+    def test_browser_default_without_dav(self):\n+        class TestContainer(Container):\n+            def __browser_default__(self, request):\n+                return self, ("foo",)\n+\n+        container = TestContainer("container")\n+        request = DAVTestRequest(\n+            environ={"URL": "http://site/test", "REQUEST_METHOD": "PROPFIND"}\n+        )\n+        request.maybe_webdav_client = False\n+\n+        traversal = DexterityPublishTraverse(container, request)\n+\n+        self.assertEqual(\n+            (\n+                container,\n+                ("foo",),\n+            ),\n+            traversal.browserDefault(request),\n+        )\ndiff --git a/plone/dexterity/utils.py b/plone/dexterity/utils.py\nindex 745a3946..deba0fa3 100644\n--- a/plone/dexterity/utils.py\n+++ b/plone/dexterity/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n from Acquisition import aq_inner\n@@ -24,7 +23,6 @@\n \n import datetime\n import logging\n-import six\n \n \n deprecation.deprecated("SchemaNameEncoder", "moved to plone.dexterity.schema")\n@@ -55,8 +53,7 @@ def iterSchemataForType(portal_type):\n     main_schema = SCHEMA_CACHE.get(portal_type)\n     if main_schema:\n         yield main_schema\n-    for schema in getAdditionalSchemata(portal_type=portal_type):\n-        yield schema\n+    yield from getAdditionalSchemata(portal_type=portal_type)\n \n \n def iterSchemata(context):\n@@ -66,8 +63,7 @@ def iterSchemata(context):\n     main_schema = SCHEMA_CACHE.get(context.portal_type)\n     if main_schema:\n         yield main_schema\n-    for schema in getAdditionalSchemata(context=context):\n-        yield schema\n+    yield from getAdditionalSchemata(context=context)\n \n \n def getAdditionalSchemata(context=None, portal_type=None):\n@@ -189,13 +185,13 @@ def createContentInContainer(container, portal_type, checkConstraints=True, **kw\n \n \n def safe_utf8(st):\n-    if isinstance(st, six.text_type):\n+    if isinstance(st, str):\n         st = st.encode("utf8")\n     return st\n \n \n def safe_unicode(st):\n-    if isinstance(st, six.binary_type):\n+    if isinstance(st, bytes):\n         st = st.decode("utf8")\n     return st\n \ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615de..b7363480 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -18,3 +18,21 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[tool.isort]\n+profile = "black"\n+force_alphabetical_sort = true\n+force_single_line = true\n+lines_after_imports = 2\n+\n+[tool.flakeheaven.plugins]\n+# Disable some checks.\n+# - E501 line too long\n+#   flake8 is already testing this, with max-line-length=100000 in .flake8,\n+#   so pycodestyle should not test it.\n+# - W503 line break before binary operator\n+#   Outdated recommendation, see https://www.flake8rules.com/rules/W503.html\n+mccabe = ["+*"]\n+pycodestyle = ["+*", "-E501", "-W503"]\n+pyflakes = ["+*"]\n+pylint = ["+*"]\ndiff --git a/setup.py b/setup.py\nindex 666c0863..a3724aba 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n@@ -32,18 +31,14 @@ def read(filename):\n     version=version,\n     description=short_description,\n     long_description=long_description,\n-    # Get more strings from\n-    # https://pypi.org/classifiers/\n+    # Get more strings from https://pypi.org/classifiers/\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n@@ -52,12 +47,15 @@ def read(filename):\n     keywords="plone dexterity contenttypes",\n     author="Martin Aspeli",\n     author_email="optilude@gmail.com",\n-    url="https://pypi.org/project/plone.dexterity",\n+    maintainer="The Plone Release Team and Community",\n+    maintainer_email="releaseteam@plone.org",\n+    url="https://github.com/plone/plone.dexterity",\n     license="GPL version 2",\n     packages=find_packages(),\n     namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.7",\n     install_requires=[\n         "DateTime>=4.0.1",\n         "plone.alterego",\n@@ -73,7 +71,6 @@ def read(filename):\n         "Products.CMFDynamicViewFTI",\n         "Products.statusmessages",\n         "setuptools",\n-        "six",\n         "zope.annotation",\n         "zope.browser",\n         "zope.component",\n@@ -83,17 +80,11 @@ def read(filename):\n         "zope.filerepresentation>=3.6.0",\n         "zope.interface",\n         "zope.lifecycleevent",\n-        "zope.location",\n         "zope.publisher",\n         "zope.schema",\n         "zope.security",\n         "zope.size",\n         "Zope",\n     ],\n-    extras_require={\n-        "test": ["plone.testing", "Products.CMFPlone", "mock;python_version<\'3\'"]\n-    },\n-    entry_points="""\n-    # -*- Entry points: -*-\n-    """,\n+    extras_require={"test": ["plone.testing", "Products.CMFPlone"]},\n )\n'

