Repository: plone.app.caching


Branch: refs/heads/master
Date: 2019-02-05T20:17:55+01:00
Author: Katja Süss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.caching/commit/cd14b20a25a0c4ccfdbcc71bb490666bb194c2b9

Products.ResourceRegistries optional

Files changed:
M plone/app/caching/lastmodified.py

b'diff --git a/plone/app/caching/lastmodified.py b/plone/app/caching/lastmodified.py\nindex 4cdc998..38df50c 100644\n--- a/plone/app/caching/lastmodified.py\n+++ b/plone/app/caching/lastmodified.py\n@@ -7,8 +7,6 @@\n from Products.CMFCore.FSObject import FSObject\n from Products.CMFCore.FSPageTemplate import FSPageTemplate\n from Products.CMFCore.interfaces import ICatalogableDublinCore\n-from Products.ResourceRegistries.interfaces import ICookedFile\n-from Products.ResourceRegistries.interfaces import IResourceRegistry\n from z3c.caching.interfaces import ILastModified\n from zope.browserresource.interfaces import IResource\n from zope.component import adapter\n@@ -17,6 +15,13 @@\n from zope.pagetemplate.interfaces import IPageTemplate\n \n \n+try:\n+    from Products.ResourceRegistries.interfaces import ICookedFile\n+    from Products.ResourceRegistries.interfaces import IResourceRegistry\n+    HAVE_RESOURCE_REGISTRIES = True\n+except ImportError:\n+    HAVE_RESOURCE_REGISTRIES = False\n+\n try:\n     from zope.dublincore.interfaces import IDCTimes\n except ImportError:\n@@ -155,23 +160,25 @@ def __call__(self):\n             return datetime.fromtimestamp(lmt, tzlocal())\n \n \n-@implementer(ILastModified)\n-@adapter(ICookedFile)\n-class CookedFileLastModified(object):\n-    """ILastModified for Resource Registry `cooked` files\n-    """\n-\n-    def __init__(self, context):\n-        self.context = context\n-\n-    def __call__(self):\n-        registry = getContext(self.context, IResourceRegistry)\n-        if (\n-            registry is None or\n-            registry.getDebugMode() or\n-            not registry.isCacheable(self.context.__name__)\n-        ):\n-            return None\n-        mtime = getattr(registry.aq_base, \'_p_mtime\', None)\n-        if mtime is not None and mtime > 0:\n-            return datetime.fromtimestamp(mtime, tzlocal())\n+if HAVE_RESOURCE_REGISTRIES:\n+\n+    @implementer(ILastModified)\n+    @adapter(ICookedFile)\n+    class CookedFileLastModified(object):\n+        """ILastModified for Resource Registry `cooked` files\n+        """\n+\n+        def __init__(self, context):\n+            self.context = context\n+\n+        def __call__(self):\n+            registry = getContext(self.context, IResourceRegistry)\n+            if (\n+                registry is None or\n+                registry.getDebugMode() or\n+                not registry.isCacheable(self.context.__name__)\n+            ):\n+                return None\n+            mtime = getattr(registry.aq_base, \'_p_mtime\', None)\n+            if mtime is not None and mtime > 0:\n+                return datetime.fromtimestamp(mtime, tzlocal())\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2019-02-05T20:17:55+01:00
Author: Katja Süss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.caching/commit/79462e0dedd3f7317333a6c40bdbbab24a23079d

BBB marker

Files changed:
M plone/app/caching/lastmodified.py

b'diff --git a/plone/app/caching/lastmodified.py b/plone/app/caching/lastmodified.py\nindex 38df50c..f214e26 100644\n--- a/plone/app/caching/lastmodified.py\n+++ b/plone/app/caching/lastmodified.py\n@@ -14,7 +14,7 @@\n from zope.interface import Interface\n from zope.pagetemplate.interfaces import IPageTemplate\n \n-\n+# BBB resource registry of old type\n try:\n     from Products.ResourceRegistries.interfaces import ICookedFile\n     from Products.ResourceRegistries.interfaces import IResourceRegistry\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2019-02-05T20:17:55+01:00
Author: Katja Süss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.caching/commit/ac8fb3d257fd73fd1f60124f644a43911fc9db99

update of changes.rst

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex c652f58..1dfa380 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -17,6 +17,12 @@ Bug fixes:\n - Warn after save if caching was disabled while purging is still enabled.\n   [jensens]\n \n+Clean-up\n+\n+- Legacy code clean-up\n+Old type resource registry Products.ResourceRegistries made optional\n+[ksuess]\n+\n \n 1.2.22 (2018-09-23)\n -------------------\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2019-02-05T20:17:55+01:00
Author: Katja Süss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.caching/commit/13d89df2bcda377594220d59d3bff19d17a624d9

adapter of legacy ResourceRegistries made conditional

bug fix

Files changed:
M plone/app/caching/configure.zcml
M plone/app/caching/tests/test_profile_without_caching_proxy.py

b'diff --git a/plone/app/caching/configure.zcml b/plone/app/caching/configure.zcml\nindex 62df022..b5642d7 100644\n--- a/plone/app/caching/configure.zcml\n+++ b/plone/app/caching/configure.zcml\n@@ -61,6 +61,7 @@\n     <adapter factory=".lastmodified.CatalogableDublinCoreLastModified" />\n     <adapter factory=".lastmodified.DCTimesLastModified" />\n     <adapter factory=".lastmodified.ResourceLastModified" />\n-    <adapter factory=".lastmodified.CookedFileLastModified" />\n+    <adapter zcml:condition="installed some.package"\n+             factory=".lastmodified.CookedFileLastModified" />\n \n </configure>\ndiff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py\nindex e9a8634..0692758 100644\n--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py\n@@ -62,10 +62,6 @@ def setUp(self):\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n \n-        test_css = FSFile(\'test.css\', os.path.join(\n-            os.path.dirname(__file__), \'test.css\'))\n-        self.portal.portal_skins.custom._setOb(\'test.css\', test_css)\n-\n         setRequest(self.portal.REQUEST)\n \n         applyProfile(self.portal, \'plone.app.caching:without-caching-proxy\')\n@@ -124,7 +120,7 @@ def test_composite_views(self):\n         import transaction\n         transaction.commit()\n \n-        # Request the quthenticated folder\n+        # Request the authenticated folder\n         now = stable_now()\n         browser = Browser(self.app)\n         browser.addHeader(\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2019-02-05T20:17:56+01:00
Author: Katja Süss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.caching/commit/b18dedbe24658427799ef4909946971e6bb8e518

Handling of legacy resource registries Products.ResourceRegistries removed

no conditional handling

Files changed:
M CHANGES.rst
M docs/caching-proxies.rst
M docs/etags.rst
M plone/app/caching/caching.zcml
M plone/app/caching/configure.zcml
M plone/app/caching/lastmodified.py
M plone/app/caching/operations/configure.zcml
M plone/app/caching/operations/default.py
M plone/app/caching/operations/etags.py
M plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml
M plone/app/caching/profiles/with-caching-proxy/registry.xml
M plone/app/caching/profiles/without-caching-proxy/registry.xml
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 1dfa380..8da0012 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -20,7 +20,7 @@ Bug fixes:\n Clean-up\n \n - Legacy code clean-up\n-Old type resource registry Products.ResourceRegistries made optional\n+Handling of legacy resource registries Products.ResourceRegistries removed\n [ksuess]\n \n \ndiff --git a/docs/caching-proxies.rst b/docs/caching-proxies.rst\nindex c5fcdca..46abad8 100644\n--- a/docs/caching-proxies.rst\n+++ b/docs/caching-proxies.rst\n@@ -22,12 +22,7 @@ returned to a user, because the cache has not been updated since the item\n was modified. There are three general strategies for dealing with this:\n \n * Since resources are cached in the proxy based on their URL, you can\n-  "invalidate" the cached copy by changing an item\'s URL when it is updated.\n-  This is the approach taken by Plone\'s ResourceRegistries (``portal_css``,\n-  ``portal_javascript`` & co): in production mode, the links that are inserted\n-  into Plone\'s content pages for resource managed by ResourceRegistries\n-  contain a time-based token, which changes when the ResourceRegistries\n-  are updated. This approach has the benefit of also being able to\n+  "invalidate" the cached copy by changing an item\'s URL when it is updated. This approach has the benefit of also being able to\n   "invalidate" content stored in a user\'s browser cache.\n \n * All caching proxies support setting timeouts. This means that content may\n@@ -90,8 +85,7 @@ The default purge paths include:\n   ``Image`` types.\n \n Files and images created (or customised) in the ZMI are purged automatically\n-when modified. Files managed through the ResourceRegistries do not need\n-purging, since they have "stable" URLs. To purge Plone content when modified\n+when modified. To purge Plone content when modified\n (or removed), you must select the content types in the control panel. By\n default, only the ``File`` and ``Image`` types are purged.\n \ndiff --git a/docs/etags.rst b/docs/etags.rst\nindex 2799581..9b842c3 100644\n--- a/docs/etags.rst\n+++ b/docs/etags.rst\n@@ -42,11 +42,6 @@ The ETag names tokens supported by default are:\n * skin\n     The name of the current skin (theme)\n \n-* resourceRegistries\n-    A timestamp indicating the most recent last-modified date for all three\n-    Resource Registries. This is useful for avoiding requests for expired\n-    resources from cached pages.\n-\n It is possible to provide additional tokens by registering an ``IETagValue``\n adapter. This should be a named adapter on the published object (typically a\n view, file resource or Zope page template object) and request, with a unique\ndiff --git a/plone/app/caching/caching.zcml b/plone/app/caching/caching.zcml\nindex e81eed1..ecacf81 100644\n--- a/plone/app/caching/caching.zcml\n+++ b/plone/app/caching/caching.zcml\n@@ -100,13 +100,6 @@\n     <!-- Zope resources (including those in resource directories) -->\n     <cache:ruleset ruleset="plone.resource" for="zope.browserresource.interfaces.IResource" />\n \n-    <!-- Resources cooked in ResourceRegistries -->\n-    <configure zcml:condition="installed Products.ResourceRegistries">\n-\n-        <cache:ruleset ruleset="plone.stableResource" for="Products.ResourceRegistries.interfaces.ICookedFile" />\n-\n-    </configure>\n-\n     <!-- Standard Plone (non-blob) file and image content objects -->\n     <configure zcml:condition="installed Products.ATContentTypes">\n \ndiff --git a/plone/app/caching/configure.zcml b/plone/app/caching/configure.zcml\nindex b5642d7..65f8623 100644\n--- a/plone/app/caching/configure.zcml\n+++ b/plone/app/caching/configure.zcml\n@@ -61,7 +61,5 @@\n     <adapter factory=".lastmodified.CatalogableDublinCoreLastModified" />\n     <adapter factory=".lastmodified.DCTimesLastModified" />\n     <adapter factory=".lastmodified.ResourceLastModified" />\n-    <adapter zcml:condition="installed some.package"\n-             factory=".lastmodified.CookedFileLastModified" />\n \n </configure>\ndiff --git a/plone/app/caching/lastmodified.py b/plone/app/caching/lastmodified.py\nindex f214e26..dd97664 100644\n--- a/plone/app/caching/lastmodified.py\n+++ b/plone/app/caching/lastmodified.py\n@@ -14,13 +14,6 @@\n from zope.interface import Interface\n from zope.pagetemplate.interfaces import IPageTemplate\n \n-# BBB resource registry of old type\n-try:\n-    from Products.ResourceRegistries.interfaces import ICookedFile\n-    from Products.ResourceRegistries.interfaces import IResourceRegistry\n-    HAVE_RESOURCE_REGISTRIES = True\n-except ImportError:\n-    HAVE_RESOURCE_REGISTRIES = False\n \n try:\n     from zope.dublincore.interfaces import IDCTimes\n@@ -158,27 +151,3 @@ def __call__(self):\n         lmt = getattr(self.context.context, \'lmt\', None)\n         if lmt is not None:\n             return datetime.fromtimestamp(lmt, tzlocal())\n-\n-\n-if HAVE_RESOURCE_REGISTRIES:\n-\n-    @implementer(ILastModified)\n-    @adapter(ICookedFile)\n-    class CookedFileLastModified(object):\n-        """ILastModified for Resource Registry `cooked` files\n-        """\n-\n-        def __init__(self, context):\n-            self.context = context\n-\n-        def __call__(self):\n-            registry = getContext(self.context, IResourceRegistry)\n-            if (\n-                registry is None or\n-                registry.getDebugMode() or\n-                not registry.isCacheable(self.context.__name__)\n-            ):\n-                return None\n-            mtime = getattr(registry.aq_base, \'_p_mtime\', None)\n-            if mtime is not None and mtime > 0:\n-                return datetime.fromtimestamp(mtime, tzlocal())\ndiff --git a/plone/app/caching/operations/configure.zcml b/plone/app/caching/operations/configure.zcml\nindex 71251ab..d45a2e1 100644\n--- a/plone/app/caching/operations/configure.zcml\n+++ b/plone/app/caching/operations/configure.zcml\n@@ -45,7 +45,6 @@\n     <adapter factory=".etags.CatalogCounter"            name="catalogCounter" />\n     <adapter factory=".etags.ObjectLocked"              name="locked" />\n     <adapter factory=".etags.Skin"                      name="skin" />\n-    <adapter factory=".etags.ResourceRegistries"        name="resourceRegistries" />\n     <adapter factory=".etags.AnonymousOrRandom"         name="anonymousOrRandom" />\n     <adapter factory=".etags.CopyCookie"                name="copy" />\n \ndiff --git a/plone/app/caching/operations/default.py b/plone/app/caching/operations/default.py\nindex c87e117..54acab6 100644\n--- a/plone/app/caching/operations/default.py\n+++ b/plone/app/caching/operations/default.py\n@@ -26,14 +26,6 @@\n import time\n \n \n-try:\n-    from Products.ResourceRegistries.interfaces import ICookedFile\n-    from Products.ResourceRegistries.interfaces import IResourceRegistry\n-    HAVE_RESOURCE_REGISTRIES = True\n-except ImportError:\n-    HAVE_RESOURCE_REGISTRIES = False\n-\n-\n @implementer(ICachingOperation)\n @provider(ICachingOperationType)\n @adapter(Interface, Interface)\n@@ -299,35 +291,6 @@ class StrongCaching(BaseCaching):\n     lastModified = ramCache = anonOnly = False\n \n \n-if HAVE_RESOURCE_REGISTRIES:\n-\n-    @adapter(ICookedFile, IHTTPRequest)\n-    class ResourceRegistriesCaching(StrongCaching):\n-        """Override for StrongCaching which checks ResourceRegistries\n-        cacheability\n-        """\n-\n-        def interceptResponse(self, rulename, response):\n-            return super(\n-                ResourceRegistriesCaching,\n-                self,\n-            ).interceptResponse(rulename, response, class_=StrongCaching)\n-\n-        def modifyResponse(self, rulename, response):\n-            registry = getContext(self.published, IResourceRegistry)\n-\n-            if registry is not None:\n-                if (\n-                    registry.getDebugMode() or\n-                    not registry.isCacheable(self.published.__name__)\n-                ):\n-                    doNotCache(self.published, self.request, response)\n-                    return\n-\n-            super(ResourceRegistriesCaching, self).modifyResponse(\n-                rulename, response, class_=StrongCaching)\n-\n-\n @implementer(ICachingOperation)\n @provider(ICachingOperationType)\n @adapter(Interface, IHTTPRequest)\ndiff --git a/plone/app/caching/operations/etags.py b/plone/app/caching/operations/etags.py\nindex b7cc2a9..25934ac 100644\n--- a/plone/app/caching/operations/etags.py\n+++ b/plone/app/caching/operations/etags.py\n@@ -182,38 +182,6 @@ def __call__(self):\n         return portal_skins.getDefaultSkin()\n \n \n-@implementer(IETagValue)\n-@adapter(Interface, Interface)\n-class ResourceRegistries(object):\n-    """The ``resourceRegistries`` etag component, returning the most recent\n-    last modified timestamp from all three Resource Registries.  This is\n-    useful for avoiding requests for expired resources from cached pages.\n-    """\n-\n-    def __init__(self, published, request):\n-        self.published = published\n-        self.request = request\n-\n-    def __call__(self):\n-        context = getContext(self.published)\n-\n-        registries = []\n-        registries.append(getToolByName(context, \'portal_css\', None))\n-        registries.append(getToolByName(context, \'portal_javascripts\', None))\n-        registries.append(getToolByName(context, \'portal_kss\', None))\n-\n-        mtimes = []\n-        now = time.time()\n-        for registry in registries:\n-            mtime = now\n-            if registry is not None:\n-                mtime = getattr(registry.aq_base, \'_p_mtime\', now)\n-                mtimes.append(mtime)\n-\n-        mtimes.sort()\n-        return str(mtimes[-1])\n-\n-\n @implementer(IETagValue)\n @adapter(Interface, Interface)\n class AnonymousOrRandom(object):\ndiff --git a/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml b/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml\nindex 22943d7..3d32eb3 100644\n--- a/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml\n+++ b/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml\n@@ -21,7 +21,6 @@\n           <element>userLanguage</element>\n           <element>skin</element>\n           <element>locked</element>\n-          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.itemView.ramCache">\n@@ -49,7 +48,6 @@\n           <element>skin</element>\n           <element>locked</element>\n           <element>copy</element>\n-          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.folderView.ramCache">\n@@ -119,4 +117,4 @@\n   </record>\n \n \n-</registry>\n\\ No newline at end of file\n+</registry>\ndiff --git a/plone/app/caching/profiles/with-caching-proxy/registry.xml b/plone/app/caching/profiles/with-caching-proxy/registry.xml\nindex 0d30b49..56c2264 100644\n--- a/plone/app/caching/profiles/with-caching-proxy/registry.xml\n+++ b/plone/app/caching/profiles/with-caching-proxy/registry.xml\n@@ -21,7 +21,6 @@\n           <element>userLanguage</element>\n           <element>skin</element>\n           <element>locked</element>\n-          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.itemView.ramCache">\n@@ -40,7 +39,6 @@\n           <element>skin</element>\n           <element>locked</element>\n           <element>copy</element>\n-          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.folderView.ramCache">\ndiff --git a/plone/app/caching/profiles/without-caching-proxy/registry.xml b/plone/app/caching/profiles/without-caching-proxy/registry.xml\nindex bdbe9b4..3569909 100644\n--- a/plone/app/caching/profiles/without-caching-proxy/registry.xml\n+++ b/plone/app/caching/profiles/without-caching-proxy/registry.xml\n@@ -21,7 +21,6 @@\n           <element>userLanguage</element>\n           <element>skin</element>\n           <element>locked</element>\n-          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.itemView.ramCache">\n@@ -40,7 +39,6 @@\n           <element>skin</element>\n           <element>locked</element>\n           <element>copy</element>\n-          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.folderView.ramCache">\n@@ -94,4 +92,4 @@\n   </record>\n \n \n-</registry>\n\\ No newline at end of file\n+</registry>\ndiff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py\nindex b3897eb..320371d 100644\n--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py\n@@ -147,7 +147,7 @@ def test_composite_viewsxx(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"|test_user_1_|%d|en|%s|0|0\' % (catalog.getCounter(\n+        self.assertEqual(\'"|test_user_1_|%d|en|%s|0\' % (catalog.getCounter(\n         ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n@@ -162,7 +162,7 @@ def test_composite_viewsxx(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"|test_user_1_|%d|en|%s|0|1\' % (catalog.getCounter(\n+        self.assertEqual(\'"|test_user_1_|%d|en|%s|0\' % (catalog.getCounter(\n         ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n \n         # Request the authenticated page\n@@ -181,7 +181,7 @@ def test_composite_viewsxx(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"|test_user_1_|%d|en|%s|0\' % (catalog.getCounter(\n+        self.assertEqual(\'"|test_user_1_|%d|en|%s\' % (catalog.getCounter(\n         ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n@@ -227,7 +227,7 @@ def test_composite_viewsxx(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"||%d|en|%s|0|0\' % (catalog.getCounter(\n+        self.assertEqual(\'"||%d|en|%s|0\' % (catalog.getCounter(\n         ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n@@ -244,7 +244,7 @@ def test_composite_viewsxx(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"||%d|en|%s|0\' % (catalog.getCounter(\n+        self.assertEqual(\'"||%d|en|%s\' % (catalog.getCounter(\n         ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n@@ -264,7 +264,7 @@ def test_composite_viewsxx(self):\n         self.assertIn(testText, browser.contents)\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"||%d|en|%s|0\' % (catalog.getCounter(\n+        self.assertEqual(\'"||%d|en|%s\' % (catalog.getCounter(\n         ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\ndiff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py\nindex 0692758..d19db4e 100644\n--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py\n@@ -135,7 +135,7 @@ def test_composite_views(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"|test_user_1_|{0}|en|{1}|0|0\'.format(\n+        tag = \'"|test_user_1_|{0}|en|{1}|0\'.format(\n             catalog.getCounter(),\n             default_skin,\n         )\n@@ -153,7 +153,7 @@ def test_composite_views(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"|test_user_1_|{0}|en|{1}|0|1\'.format(\n+        tag = \'"|test_user_1_|{0}|en|{1}|0\'.format(\n             catalog.getCounter(),\n             default_skin,\n         )\n@@ -175,7 +175,7 @@ def test_composite_views(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"|test_user_1_|{0}|en|{1}|0\'.format(\n+        tag = \'"|test_user_1_|{0}|en|{1}\'.format(\n             catalog.getCounter(),\n             default_skin,\n         )\n@@ -223,7 +223,7 @@ def test_composite_views(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"||{0}|en|{1}|0|0\'.format(catalog.getCounter(), default_skin)\n+        tag = \'"||{0}|en|{1}|0\'.format(catalog.getCounter(), default_skin)\n         self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n@@ -240,7 +240,7 @@ def test_composite_views(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"||{0}|en|{1}|0\'.format(catalog.getCounter(), default_skin)\n+        tag = \'"||{0}|en|{1}\'.format(catalog.getCounter(), default_skin)\n         self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n@@ -260,7 +260,7 @@ def test_composite_views(self):\n         self.assertIn(testText, browser.contents)\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"||{0}|en|{1}|0\'.format(catalog.getCounter(), default_skin)\n+        tag = \'"||{0}|en|{1}\'.format(catalog.getCounter(), default_skin)\n         self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2019-02-05T21:07:47+01:00
Author: Katja Süss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.caching/commit/5871d1db55419a25cee8ddc80e9ffa4b2f0808bf

Removed legacy resource registries

Files changed:
A news/45.breaking
M plone/app/caching/operations/configure.zcml
M setup.py

b'diff --git a/news/45.breaking b/news/45.breaking\nnew file mode 100644\nindex 0000000..fac946a\n--- /dev/null\n+++ b/news/45.breaking\n@@ -0,0 +1 @@\n+Removed legacy resource registries [ksuess]\ndiff --git a/plone/app/caching/operations/configure.zcml b/plone/app/caching/operations/configure.zcml\nindex d45a2e1..348aa07 100644\n--- a/plone/app/caching/operations/configure.zcml\n+++ b/plone/app/caching/operations/configure.zcml\n@@ -26,13 +26,6 @@\n     <utility component=".default.BaseCaching"           name="plone.app.caching.baseCaching" />\n     -->\n \n-    <!-- Special handling for content in Plone\'s ResourceRegistries, if installed -->\n-    <adapter\n-        zcml:condition="installed Products.ResourceRegistries"\n-        factory=".default.ResourceRegistriesCaching"\n-        name="plone.app.caching.strongCaching"\n-        />\n-\n     <!-- RAM cache storage: a transformation at the very end of the chain -->\n     <adapter factory=".ramcache.Store"                  name="plone.app.caching.operations.ramcache" />\n \ndiff --git a/setup.py b/setup.py\nindex a0b6664..c0045de 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = \'1.2.24.dev0\'\n+version = \'2.0.dev0\'\n \n setup(\n     name=\'plone.app.caching\',\n@@ -14,8 +14,6 @@\n     classifiers=[\n         \'Environment :: Web Environment\',\n         \'Framework :: Plone\',\n-        \'Framework :: Plone :: 5.0\',\n-        \'Framework :: Plone :: 5.1\',\n         \'Framework :: Plone :: 5.2\',\n         \'Framework :: Zope2\',\n         \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2019-02-06T14:08:20+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/87de8036013be990cb50021d159eae7dc0a33249

Merge pull request #45 from plone/remove-legacy-resource-registries

Legacy resource registries made optional

Files changed:
A news/45.breaking
M CHANGES.rst
M docs/caching-proxies.rst
M docs/etags.rst
M plone/app/caching/caching.zcml
M plone/app/caching/configure.zcml
M plone/app/caching/lastmodified.py
M plone/app/caching/operations/configure.zcml
M plone/app/caching/operations/default.py
M plone/app/caching/operations/etags.py
M plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml
M plone/app/caching/profiles/with-caching-proxy/registry.xml
M plone/app/caching/profiles/without-caching-proxy/registry.xml
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex c652f58..8da0012 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -17,6 +17,12 @@ Bug fixes:\n - Warn after save if caching was disabled while purging is still enabled.\n   [jensens]\n \n+Clean-up\n+\n+- Legacy code clean-up\n+Handling of legacy resource registries Products.ResourceRegistries removed\n+[ksuess]\n+\n \n 1.2.22 (2018-09-23)\n -------------------\ndiff --git a/docs/caching-proxies.rst b/docs/caching-proxies.rst\nindex c5fcdca..46abad8 100644\n--- a/docs/caching-proxies.rst\n+++ b/docs/caching-proxies.rst\n@@ -22,12 +22,7 @@ returned to a user, because the cache has not been updated since the item\n was modified. There are three general strategies for dealing with this:\n \n * Since resources are cached in the proxy based on their URL, you can\n-  "invalidate" the cached copy by changing an item\'s URL when it is updated.\n-  This is the approach taken by Plone\'s ResourceRegistries (``portal_css``,\n-  ``portal_javascript`` & co): in production mode, the links that are inserted\n-  into Plone\'s content pages for resource managed by ResourceRegistries\n-  contain a time-based token, which changes when the ResourceRegistries\n-  are updated. This approach has the benefit of also being able to\n+  "invalidate" the cached copy by changing an item\'s URL when it is updated. This approach has the benefit of also being able to\n   "invalidate" content stored in a user\'s browser cache.\n \n * All caching proxies support setting timeouts. This means that content may\n@@ -90,8 +85,7 @@ The default purge paths include:\n   ``Image`` types.\n \n Files and images created (or customised) in the ZMI are purged automatically\n-when modified. Files managed through the ResourceRegistries do not need\n-purging, since they have "stable" URLs. To purge Plone content when modified\n+when modified. To purge Plone content when modified\n (or removed), you must select the content types in the control panel. By\n default, only the ``File`` and ``Image`` types are purged.\n \ndiff --git a/docs/etags.rst b/docs/etags.rst\nindex 2799581..9b842c3 100644\n--- a/docs/etags.rst\n+++ b/docs/etags.rst\n@@ -42,11 +42,6 @@ The ETag names tokens supported by default are:\n * skin\n     The name of the current skin (theme)\n \n-* resourceRegistries\n-    A timestamp indicating the most recent last-modified date for all three\n-    Resource Registries. This is useful for avoiding requests for expired\n-    resources from cached pages.\n-\n It is possible to provide additional tokens by registering an ``IETagValue``\n adapter. This should be a named adapter on the published object (typically a\n view, file resource or Zope page template object) and request, with a unique\ndiff --git a/news/45.breaking b/news/45.breaking\nnew file mode 100644\nindex 0000000..fac946a\n--- /dev/null\n+++ b/news/45.breaking\n@@ -0,0 +1 @@\n+Removed legacy resource registries [ksuess]\ndiff --git a/plone/app/caching/caching.zcml b/plone/app/caching/caching.zcml\nindex e81eed1..ecacf81 100644\n--- a/plone/app/caching/caching.zcml\n+++ b/plone/app/caching/caching.zcml\n@@ -100,13 +100,6 @@\n     <!-- Zope resources (including those in resource directories) -->\n     <cache:ruleset ruleset="plone.resource" for="zope.browserresource.interfaces.IResource" />\n \n-    <!-- Resources cooked in ResourceRegistries -->\n-    <configure zcml:condition="installed Products.ResourceRegistries">\n-\n-        <cache:ruleset ruleset="plone.stableResource" for="Products.ResourceRegistries.interfaces.ICookedFile" />\n-\n-    </configure>\n-\n     <!-- Standard Plone (non-blob) file and image content objects -->\n     <configure zcml:condition="installed Products.ATContentTypes">\n \ndiff --git a/plone/app/caching/configure.zcml b/plone/app/caching/configure.zcml\nindex 62df022..65f8623 100644\n--- a/plone/app/caching/configure.zcml\n+++ b/plone/app/caching/configure.zcml\n@@ -61,6 +61,5 @@\n     <adapter factory=".lastmodified.CatalogableDublinCoreLastModified" />\n     <adapter factory=".lastmodified.DCTimesLastModified" />\n     <adapter factory=".lastmodified.ResourceLastModified" />\n-    <adapter factory=".lastmodified.CookedFileLastModified" />\n \n </configure>\ndiff --git a/plone/app/caching/lastmodified.py b/plone/app/caching/lastmodified.py\nindex 4cdc998..dd97664 100644\n--- a/plone/app/caching/lastmodified.py\n+++ b/plone/app/caching/lastmodified.py\n@@ -7,8 +7,6 @@\n from Products.CMFCore.FSObject import FSObject\n from Products.CMFCore.FSPageTemplate import FSPageTemplate\n from Products.CMFCore.interfaces import ICatalogableDublinCore\n-from Products.ResourceRegistries.interfaces import ICookedFile\n-from Products.ResourceRegistries.interfaces import IResourceRegistry\n from z3c.caching.interfaces import ILastModified\n from zope.browserresource.interfaces import IResource\n from zope.component import adapter\n@@ -153,25 +151,3 @@ def __call__(self):\n         lmt = getattr(self.context.context, \'lmt\', None)\n         if lmt is not None:\n             return datetime.fromtimestamp(lmt, tzlocal())\n-\n-\n-@implementer(ILastModified)\n-@adapter(ICookedFile)\n-class CookedFileLastModified(object):\n-    """ILastModified for Resource Registry `cooked` files\n-    """\n-\n-    def __init__(self, context):\n-        self.context = context\n-\n-    def __call__(self):\n-        registry = getContext(self.context, IResourceRegistry)\n-        if (\n-            registry is None or\n-            registry.getDebugMode() or\n-            not registry.isCacheable(self.context.__name__)\n-        ):\n-            return None\n-        mtime = getattr(registry.aq_base, \'_p_mtime\', None)\n-        if mtime is not None and mtime > 0:\n-            return datetime.fromtimestamp(mtime, tzlocal())\ndiff --git a/plone/app/caching/operations/configure.zcml b/plone/app/caching/operations/configure.zcml\nindex 71251ab..348aa07 100644\n--- a/plone/app/caching/operations/configure.zcml\n+++ b/plone/app/caching/operations/configure.zcml\n@@ -26,13 +26,6 @@\n     <utility component=".default.BaseCaching"           name="plone.app.caching.baseCaching" />\n     -->\n \n-    <!-- Special handling for content in Plone\'s ResourceRegistries, if installed -->\n-    <adapter\n-        zcml:condition="installed Products.ResourceRegistries"\n-        factory=".default.ResourceRegistriesCaching"\n-        name="plone.app.caching.strongCaching"\n-        />\n-\n     <!-- RAM cache storage: a transformation at the very end of the chain -->\n     <adapter factory=".ramcache.Store"                  name="plone.app.caching.operations.ramcache" />\n \n@@ -45,7 +38,6 @@\n     <adapter factory=".etags.CatalogCounter"            name="catalogCounter" />\n     <adapter factory=".etags.ObjectLocked"              name="locked" />\n     <adapter factory=".etags.Skin"                      name="skin" />\n-    <adapter factory=".etags.ResourceRegistries"        name="resourceRegistries" />\n     <adapter factory=".etags.AnonymousOrRandom"         name="anonymousOrRandom" />\n     <adapter factory=".etags.CopyCookie"                name="copy" />\n \ndiff --git a/plone/app/caching/operations/default.py b/plone/app/caching/operations/default.py\nindex c87e117..54acab6 100644\n--- a/plone/app/caching/operations/default.py\n+++ b/plone/app/caching/operations/default.py\n@@ -26,14 +26,6 @@\n import time\n \n \n-try:\n-    from Products.ResourceRegistries.interfaces import ICookedFile\n-    from Products.ResourceRegistries.interfaces import IResourceRegistry\n-    HAVE_RESOURCE_REGISTRIES = True\n-except ImportError:\n-    HAVE_RESOURCE_REGISTRIES = False\n-\n-\n @implementer(ICachingOperation)\n @provider(ICachingOperationType)\n @adapter(Interface, Interface)\n@@ -299,35 +291,6 @@ class StrongCaching(BaseCaching):\n     lastModified = ramCache = anonOnly = False\n \n \n-if HAVE_RESOURCE_REGISTRIES:\n-\n-    @adapter(ICookedFile, IHTTPRequest)\n-    class ResourceRegistriesCaching(StrongCaching):\n-        """Override for StrongCaching which checks ResourceRegistries\n-        cacheability\n-        """\n-\n-        def interceptResponse(self, rulename, response):\n-            return super(\n-                ResourceRegistriesCaching,\n-                self,\n-            ).interceptResponse(rulename, response, class_=StrongCaching)\n-\n-        def modifyResponse(self, rulename, response):\n-            registry = getContext(self.published, IResourceRegistry)\n-\n-            if registry is not None:\n-                if (\n-                    registry.getDebugMode() or\n-                    not registry.isCacheable(self.published.__name__)\n-                ):\n-                    doNotCache(self.published, self.request, response)\n-                    return\n-\n-            super(ResourceRegistriesCaching, self).modifyResponse(\n-                rulename, response, class_=StrongCaching)\n-\n-\n @implementer(ICachingOperation)\n @provider(ICachingOperationType)\n @adapter(Interface, IHTTPRequest)\ndiff --git a/plone/app/caching/operations/etags.py b/plone/app/caching/operations/etags.py\nindex b7cc2a9..25934ac 100644\n--- a/plone/app/caching/operations/etags.py\n+++ b/plone/app/caching/operations/etags.py\n@@ -182,38 +182,6 @@ def __call__(self):\n         return portal_skins.getDefaultSkin()\n \n \n-@implementer(IETagValue)\n-@adapter(Interface, Interface)\n-class ResourceRegistries(object):\n-    """The ``resourceRegistries`` etag component, returning the most recent\n-    last modified timestamp from all three Resource Registries.  This is\n-    useful for avoiding requests for expired resources from cached pages.\n-    """\n-\n-    def __init__(self, published, request):\n-        self.published = published\n-        self.request = request\n-\n-    def __call__(self):\n-        context = getContext(self.published)\n-\n-        registries = []\n-        registries.append(getToolByName(context, \'portal_css\', None))\n-        registries.append(getToolByName(context, \'portal_javascripts\', None))\n-        registries.append(getToolByName(context, \'portal_kss\', None))\n-\n-        mtimes = []\n-        now = time.time()\n-        for registry in registries:\n-            mtime = now\n-            if registry is not None:\n-                mtime = getattr(registry.aq_base, \'_p_mtime\', now)\n-                mtimes.append(mtime)\n-\n-        mtimes.sort()\n-        return str(mtimes[-1])\n-\n-\n @implementer(IETagValue)\n @adapter(Interface, Interface)\n class AnonymousOrRandom(object):\ndiff --git a/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml b/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml\nindex 22943d7..3d32eb3 100644\n--- a/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml\n+++ b/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml\n@@ -21,7 +21,6 @@\n           <element>userLanguage</element>\n           <element>skin</element>\n           <element>locked</element>\n-          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.itemView.ramCache">\n@@ -49,7 +48,6 @@\n           <element>skin</element>\n           <element>locked</element>\n           <element>copy</element>\n-          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.folderView.ramCache">\n@@ -119,4 +117,4 @@\n   </record>\n \n \n-</registry>\n\\ No newline at end of file\n+</registry>\ndiff --git a/plone/app/caching/profiles/with-caching-proxy/registry.xml b/plone/app/caching/profiles/with-caching-proxy/registry.xml\nindex 0d30b49..56c2264 100644\n--- a/plone/app/caching/profiles/with-caching-proxy/registry.xml\n+++ b/plone/app/caching/profiles/with-caching-proxy/registry.xml\n@@ -21,7 +21,6 @@\n           <element>userLanguage</element>\n           <element>skin</element>\n           <element>locked</element>\n-          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.itemView.ramCache">\n@@ -40,7 +39,6 @@\n           <element>skin</element>\n           <element>locked</element>\n           <element>copy</element>\n-          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.folderView.ramCache">\ndiff --git a/plone/app/caching/profiles/without-caching-proxy/registry.xml b/plone/app/caching/profiles/without-caching-proxy/registry.xml\nindex bdbe9b4..3569909 100644\n--- a/plone/app/caching/profiles/without-caching-proxy/registry.xml\n+++ b/plone/app/caching/profiles/without-caching-proxy/registry.xml\n@@ -21,7 +21,6 @@\n           <element>userLanguage</element>\n           <element>skin</element>\n           <element>locked</element>\n-          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.itemView.ramCache">\n@@ -40,7 +39,6 @@\n           <element>skin</element>\n           <element>locked</element>\n           <element>copy</element>\n-          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.folderView.ramCache">\n@@ -94,4 +92,4 @@\n   </record>\n \n \n-</registry>\n\\ No newline at end of file\n+</registry>\ndiff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py\nindex b3897eb..320371d 100644\n--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py\n@@ -147,7 +147,7 @@ def test_composite_viewsxx(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"|test_user_1_|%d|en|%s|0|0\' % (catalog.getCounter(\n+        self.assertEqual(\'"|test_user_1_|%d|en|%s|0\' % (catalog.getCounter(\n         ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n@@ -162,7 +162,7 @@ def test_composite_viewsxx(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"|test_user_1_|%d|en|%s|0|1\' % (catalog.getCounter(\n+        self.assertEqual(\'"|test_user_1_|%d|en|%s|0\' % (catalog.getCounter(\n         ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n \n         # Request the authenticated page\n@@ -181,7 +181,7 @@ def test_composite_viewsxx(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"|test_user_1_|%d|en|%s|0\' % (catalog.getCounter(\n+        self.assertEqual(\'"|test_user_1_|%d|en|%s\' % (catalog.getCounter(\n         ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n@@ -227,7 +227,7 @@ def test_composite_viewsxx(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"||%d|en|%s|0|0\' % (catalog.getCounter(\n+        self.assertEqual(\'"||%d|en|%s|0\' % (catalog.getCounter(\n         ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n@@ -244,7 +244,7 @@ def test_composite_viewsxx(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"||%d|en|%s|0\' % (catalog.getCounter(\n+        self.assertEqual(\'"||%d|en|%s\' % (catalog.getCounter(\n         ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n@@ -264,7 +264,7 @@ def test_composite_viewsxx(self):\n         self.assertIn(testText, browser.contents)\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"||%d|en|%s|0\' % (catalog.getCounter(\n+        self.assertEqual(\'"||%d|en|%s\' % (catalog.getCounter(\n         ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\ndiff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py\nindex e9a8634..d19db4e 100644\n--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py\n@@ -62,10 +62,6 @@ def setUp(self):\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n \n-        test_css = FSFile(\'test.css\', os.path.join(\n-            os.path.dirname(__file__), \'test.css\'))\n-        self.portal.portal_skins.custom._setOb(\'test.css\', test_css)\n-\n         setRequest(self.portal.REQUEST)\n \n         applyProfile(self.portal, \'plone.app.caching:without-caching-proxy\')\n@@ -124,7 +120,7 @@ def test_composite_views(self):\n         import transaction\n         transaction.commit()\n \n-        # Request the quthenticated folder\n+        # Request the authenticated folder\n         now = stable_now()\n         browser = Browser(self.app)\n         browser.addHeader(\n@@ -139,7 +135,7 @@ def test_composite_views(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"|test_user_1_|{0}|en|{1}|0|0\'.format(\n+        tag = \'"|test_user_1_|{0}|en|{1}|0\'.format(\n             catalog.getCounter(),\n             default_skin,\n         )\n@@ -157,7 +153,7 @@ def test_composite_views(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"|test_user_1_|{0}|en|{1}|0|1\'.format(\n+        tag = \'"|test_user_1_|{0}|en|{1}|0\'.format(\n             catalog.getCounter(),\n             default_skin,\n         )\n@@ -179,7 +175,7 @@ def test_composite_views(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"|test_user_1_|{0}|en|{1}|0\'.format(\n+        tag = \'"|test_user_1_|{0}|en|{1}\'.format(\n             catalog.getCounter(),\n             default_skin,\n         )\n@@ -227,7 +223,7 @@ def test_composite_views(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"||{0}|en|{1}|0|0\'.format(catalog.getCounter(), default_skin)\n+        tag = \'"||{0}|en|{1}|0\'.format(catalog.getCounter(), default_skin)\n         self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n@@ -244,7 +240,7 @@ def test_composite_views(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"||{0}|en|{1}|0\'.format(catalog.getCounter(), default_skin)\n+        tag = \'"||{0}|en|{1}\'.format(catalog.getCounter(), default_skin)\n         self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n@@ -264,7 +260,7 @@ def test_composite_views(self):\n         self.assertIn(testText, browser.contents)\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"||{0}|en|{1}|0\'.format(catalog.getCounter(), default_skin)\n+        tag = \'"||{0}|en|{1}\'.format(catalog.getCounter(), default_skin)\n         self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\ndiff --git a/setup.py b/setup.py\nindex a0b6664..c0045de 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = \'1.2.24.dev0\'\n+version = \'2.0.dev0\'\n \n setup(\n     name=\'plone.app.caching\',\n@@ -14,8 +14,6 @@\n     classifiers=[\n         \'Environment :: Web Environment\',\n         \'Framework :: Plone\',\n-        \'Framework :: Plone :: 5.0\',\n-        \'Framework :: Plone :: 5.1\',\n         \'Framework :: Plone :: 5.2\',\n         \'Framework :: Zope2\',\n         \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n'

