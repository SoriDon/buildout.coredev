Repository: plone.memoize


Branch: refs/heads/master
Date: 2023-04-01T19:23:59+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/40e02f319e6c68210c240c498ae26c2ee0bbbaf9

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/93e1ab65.internal
M pyproject.toml
M setup.cfg
M tox.ini

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..7316575\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "93e1ab65"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..449e951\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/93e1ab65.internal b/news/93e1ab65.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/93e1ab65.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..9eb73f3 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex af1e6e3..111069a 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,29 +1,24 @@\n-[check-manifest]\n-ignore =\n-    *.cfg\n-    .coveragerc\n-    tox.ini\n-\n-[zest.releaser]\n-create-wheel = yes\n-extra-message = [ci skip]\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n-\n-[isort]\n-# for details see\n-# https://docs.plone.org/develop/styleguide/python.html#grouping-and-sorting\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n-line_length = 88\n-multi_line_output=3\n-include_trailing_comma=True\n-not_skip = __init__.py\n+universal = 0\n \n [flake8]\n-exclude = docs,*.egg.,omelette\n-max-complexity = 15\n-max-line-length = 88\n-inline-quotes = "\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\n+    .coveragerc\ndiff --git a/tox.ini b/tox.ini\nindex e769b8f..b563920 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,4 +1,6 @@\n [tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n envlist = py27,\n           py37,\n           py38,\n@@ -21,3 +23,46 @@ python =\n [testenv]\n commands = zope-testrunner --test-path=. {posargs:-vc}\n extras = test\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.memoize {posargs}\n+extras =\n+    test\n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2023-04-01T19:23:59+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/1f1670d95abfba9160385e212747226e8d93ec76

chore: pyupgrade

Files changed:
M plone/__init__.py
M plone/memoize/__init__.py
M plone/memoize/compress.py
M plone/memoize/forever.py
M plone/memoize/instance.py
M plone/memoize/interfaces.py
M plone/memoize/ram.py
M plone/memoize/request.py
M plone/memoize/tests.py
M plone/memoize/view.py
M plone/memoize/volatile.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 03d08ff..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/memoize/__init__.py b/plone/memoize/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/memoize/__init__.py\n+++ b/plone/memoize/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/memoize/compress.py b/plone/memoize/compress.py\nindex 82dc1be..06d9028 100644\n--- a/plone/memoize/compress.py\n+++ b/plone/memoize/compress.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """XHTML Compressor\n """\n \n@@ -22,7 +21,7 @@ def xhtml_compress(string):\n \n \n @implementer(IXHTMLCompressor)\n-class XHTMLSlimmer(object):\n+class XHTMLSlimmer:\n     def compress(self, string):\n         if SLIMMER:\n             return xhtml_slimmer(string)\ndiff --git a/plone/memoize/forever.py b/plone/memoize/forever.py\nindex 1c45edf..ce9ac51 100644\n--- a/plone/memoize/forever.py\n+++ b/plone/memoize/forever.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Memo decorators for globals - memoized values survive for as long as the\n process lives.\n \ndiff --git a/plone/memoize/instance.py b/plone/memoize/instance.py\nindex 32aa8c9..9c7e449 100644\n--- a/plone/memoize/instance.py\n+++ b/plone/memoize/instance.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Memo decorators for instances.\n \n Stores values in an attribute on the instance. See instance.rst.\n@@ -11,7 +10,7 @@\n _marker = object()\n \n \n-class Memojito(object):\n+class Memojito:\n     propname = "_memojito_"\n \n     def clear(self, inst):\ndiff --git a/plone/memoize/interfaces.py b/plone/memoize/interfaces.py\nindex 8c83bf2..2cf5c9e 100644\n--- a/plone/memoize/interfaces.py\n+++ b/plone/memoize/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/plone/memoize/ram.py b/plone/memoize/ram.py\nindex 80b71e0..4f3cd37 100644\n--- a/plone/memoize/ram.py\n+++ b/plone/memoize/ram.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """A cache decorator that uses RAMCache by default.\n """\n \n@@ -40,7 +39,7 @@ def __init__(self, client, globalkey=""):\n         self.globalkey = globalkey and "%s:" % globalkey\n \n     def _make_key(self, source):\n-        if issubclass(type(source), six.text_type):\n+        if issubclass(type(source), str):\n             source = source.encode("utf-8")\n         return sha1(source).hexdigest()\n \n@@ -62,7 +61,7 @@ def __init__(self, ramcache, globalkey=""):\n         self.globalkey = globalkey\n \n     def _make_key(self, source):\n-        if issubclass(type(source), six.text_type):\n+        if issubclass(type(source), str):\n             source = source.encode("utf-8")\n         return sha1(source).digest()\n \n@@ -87,7 +86,7 @@ def choose_cache(fun_name):\n \n \n def store_in_cache(fun, *args, **kwargs):\n-    key = "%s.%s" % (fun.__module__, fun.__name__)\n+    key = f"{fun.__module__}.{fun.__name__}"\n     cache_chooser = component.queryUtility(ICacheChooser)\n     if cache_chooser is not None:\n         return cache_chooser(key)\ndiff --git a/plone/memoize/request.py b/plone/memoize/request.py\nindex d554627..6339f88 100644\n--- a/plone/memoize/request.py\n+++ b/plone/memoize/request.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Memoize decorator for methods.\n \n Stores values in an annotation of the request.\n@@ -19,7 +18,7 @@\n _marker = object()\n \n \n-class RequestMemo(object):\n+class RequestMemo:\n \n     key = "plone.memoize_request"\n \ndiff --git a/plone/memoize/tests.py b/plone/memoize/tests.py\nindex 20d3ca4..d5dca29 100644\n--- a/plone/memoize/tests.py\n+++ b/plone/memoize/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.component.testing import setUp\n from zope.component.testing import tearDown\n from zope.configuration.xmlconfig import XMLConfig\ndiff --git a/plone/memoize/view.py b/plone/memoize/view.py\nindex 549df62..7d6954a 100644\n--- a/plone/memoize/view.py\n+++ b/plone/memoize/view.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Memoize decorator for views.\n \n Stores values in an annotation of the request. See view.rst.\n@@ -15,7 +14,7 @@ def getRequest():\n         return None\n \n \n-class ViewMemo(object):\n+class ViewMemo:\n \n     key = "plone.memoize"\n \ndiff --git a/plone/memoize/volatile.py b/plone/memoize/volatile.py\nindex d29a002..fc7cf77 100644\n--- a/plone/memoize/volatile.py\n+++ b/plone/memoize/volatile.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """A flexible caching decorator.\n \n This module provides a cache decorator `cache` that you can use to\n@@ -18,18 +17,18 @@ class CleanupDict(dict):\n     cleanup_period = 60 * 60 * 24 * 3  # 3 days\n \n     def __init__(self, cleanup_period=None):\n-        super(CleanupDict, self).__init__()\n+        super().__init__()\n         self._last_access = {}\n         if cleanup_period is not None:\n             self.cleanup_period = cleanup_period\n \n     def __getitem__(self, key):\n-        value = super(CleanupDict, self).__getitem__(key)\n+        value = super().__getitem__(key)\n         self._last_access[key] = time.time()\n         return value\n \n     def __setitem__(self, key, value):\n-        super(CleanupDict, self).__setitem__(key, value)\n+        super().__setitem__(key, value)\n         self._last_access[key] = time.time()\n         self._cleanup()\n \n@@ -39,7 +38,7 @@ def _cleanup(self):\n         for key, timestamp in list(self._last_access.items()):\n             if timestamp < okay:\n                 del self._last_access[key]\n-                super(CleanupDict, self).__delitem__(key)\n+                super().__delitem__(key)\n \n \n ATTR = "_v_memoize_cache"\n@@ -67,7 +66,7 @@ def replacement(*args, **kwargs):\n                 key = get_key(fun, *args, **kwargs)\n             except DontCache:\n                 return fun(*args, **kwargs)\n-            key = "%s.%s:%s" % (fun.__module__, fun.__name__, key)\n+            key = f"{fun.__module__}.{fun.__name__}:{key}"\n             cache = get_cache(fun, *args, **kwargs)\n             cached_value = cache.get(key, _marker)\n             if cached_value is _marker:\ndiff --git a/setup.py b/setup.py\nindex dd40aca..52ea08f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n@@ -11,7 +10,7 @@ def read(*rnames):\n \n version = "3.0.1.dev0"\n \n-long_description = u"\\n".join(\n+long_description = "\\n".join(\n     [read("README.rst"), read("plone", "memoize", "README.rst"), read("CHANGES.rst"),]\n )\n \n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2023-04-01T19:23:59+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/70f8345bff453ddf26f6e99d668542242000a3e6

chore: isort

Files changed:
M plone/memoize/request.py

b'diff --git a/plone/memoize/request.py b/plone/memoize/request.py\nindex 6339f88..4b78bfc 100644\n--- a/plone/memoize/request.py\n+++ b/plone/memoize/request.py\n@@ -8,6 +8,7 @@\n \n import inspect\n \n+\n try:\n     getargspec = inspect.getfullargspec\n except AttributeError:\n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2023-04-01T19:23:59+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/f8b0412a7db4a892247f041db4ea4834627d6fed

chore: black

Files changed:
M plone/memoize/request.py
M plone/memoize/view.py
M setup.py

b'diff --git a/plone/memoize/request.py b/plone/memoize/request.py\nindex 4b78bfc..05fe4df 100644\n--- a/plone/memoize/request.py\n+++ b/plone/memoize/request.py\n@@ -20,7 +20,6 @@\n \n \n class RequestMemo:\n-\n     key = "plone.memoize_request"\n \n     def __init__(self, arg=0):\n@@ -87,7 +86,6 @@ def _store_in_annotation(fun, *args, **kwargs):\n \n \n def cache(get_key, get_request="request"):\n-\n     return volatile.cache(get_key, get_cache=store_in_annotation_of(get_request))\n \n \ndiff --git a/plone/memoize/view.py b/plone/memoize/view.py\nindex 7d6954a..0fb372b 100644\n--- a/plone/memoize/view.py\n+++ b/plone/memoize/view.py\n@@ -15,7 +15,6 @@ def getRequest():\n \n \n class ViewMemo:\n-\n     key = "plone.memoize"\n \n     def memoize(self, func):\n@@ -62,7 +61,6 @@ def memogetter(*args, **kwargs):\n \n     def memoize_contextless(self, func):\n         def memogetter(*args, **kwargs):\n-\n             if args:\n                 instance = args[0]\n             else:\ndiff --git a/setup.py b/setup.py\nindex 52ea08f..d44a48b 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -11,7 +11,11 @@ def read(*rnames):\n version = "3.0.1.dev0"\n \n long_description = "\\n".join(\n-    [read("README.rst"), read("plone", "memoize", "README.rst"), read("CHANGES.rst"),]\n+    [\n+        read("README.rst"),\n+        read("plone", "memoize", "README.rst"),\n+        read("CHANGES.rst"),\n+    ]\n )\n \n \n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2023-04-01T19:23:59+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/6c65d32d255c64096ad2704be27cce7d44ce398e

chore: zptlint

Files changed:
M plone/memoize/configure.zcml

b'diff --git a/plone/memoize/configure.zcml b/plone/memoize/configure.zcml\nindex bc7166a..8329e1c 100644\n--- a/plone/memoize/configure.zcml\n+++ b/plone/memoize/configure.zcml\n@@ -1,11 +1,15 @@\n <configure xmlns="http://namespaces.zope.org/zope">\n \n-    <include package="zope.annotation" />\n+  <include package="zope.annotation" />\n \n-    <utility component=".ram.global_cache"\n-             provides="zope.ramcache.interfaces.ram.IRAMCache" />\n+  <utility\n+      provides="zope.ramcache.interfaces.ram.IRAMCache"\n+      component=".ram.global_cache"\n+      />\n \n-    <utility component=".ram.choose_cache"\n-             provides=".interfaces.ICacheChooser" />\n+  <utility\n+      provides=".interfaces.ICacheChooser"\n+      component=".ram.choose_cache"\n+      />\n \n </configure>\n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2023-04-01T19:23:59+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/d0f888da39d3229984bfde4eb571ab9677d613ed

feat: drop six dependency

Files changed:
M plone/memoize/ram.py
M setup.py

b'diff --git a/plone/memoize/ram.py b/plone/memoize/ram.py\nindex 4f3cd37..6812763 100644\n--- a/plone/memoize/ram.py\n+++ b/plone/memoize/ram.py\n@@ -9,8 +9,6 @@\n from zope.ramcache import ram\n from zope.ramcache.interfaces.ram import IRAMCache\n \n-import six\n-\n \n try:\n     import pickle  # Python 3\ndiff --git a/setup.py b/setup.py\nindex d44a48b..a3594c9 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -66,7 +66,6 @@ def read(*rnames):\n     ),\n     install_requires=[\n         "setuptools",\n-        "six",\n         "zope.annotation",\n         "zope.component",\n         "zope.interface",\n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2023-04-01T19:23:59+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/e46275d286c9de2831b48efb1add0233b21b28ad

feat: codespell

Files changed:
M plone/memoize/view.rst

b'diff --git a/plone/memoize/view.rst b/plone/memoize/view.rst\nindex e9ad76f..0060f2c 100644\n--- a/plone/memoize/view.rst\n+++ b/plone/memoize/view.rst\n@@ -227,7 +227,7 @@ The same is true for an adapter:\n     ...     def context_unaware_function(self):\n     ...         return self.msg\n \n-We now instatiate two objects:\n+We now instantiate two objects:\n     >>> instance1 = Adapter(Dummy())\n     >>> instance2 = Adapter(Dummy())\n     >>> instance1.context_aware_function()\n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2023-04-01T19:23:59+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/164e08bb14cf09509255d2f491ad6c533e6f37ae

feat: pyroma

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex a3594c9..fbe4002 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -55,6 +55,7 @@ def read(*rnames):\n     include_package_data=True,\n     zip_safe=False,\n     test_suite="plone.memoize.tests.test_suite",\n+    python_requires=">=3.8",\n     extras_require=dict(\n         test=[\n             "zope.configuration",\n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2023-04-01T19:36:05+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/283d29969a92d2ed2e3ded466a99e1987826ca67

feat: python 3 only

Files changed:
M .github/workflows/tests.yml
M setup.py
M tox.ini

b'diff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nindex dbcfe34..8c1d5bf 100644\n--- a/.github/workflows/tests.yml\n+++ b/.github/workflows/tests.yml\n@@ -11,7 +11,7 @@ jobs:\n     strategy:\n       fail-fast: false\n       matrix:\n-        python_version: ["2.7", "3.7", "3.8", "3.9", "3.10", "3.11", "pypy3.9"]\n+        python_version: ["3.8", "3.9", "3.10", "3.11", "pypy3.9"]\n     runs-on: ubuntu-latest\n     name: ${{ matrix.python_version }}\n     steps:\ndiff --git a/setup.py b/setup.py\nindex fbe4002..18e062f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -28,16 +28,12 @@ def read(*rnames):\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope :: 4",\n         "Framework :: Zope :: 5",\n         "License :: OSI Approved :: BSD License",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: 3.10",\ndiff --git a/tox.ini b/tox.ini\nindex b563920..89ec189 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,9 +1,7 @@\n [tox]\n # We need 4.4.0 for constrain_package_deps.\n min_version = 4.4.0\n-envlist = py27,\n-          py37,\n-          py38,\n+envlist = py38,\n           py39,\n           py310,\n           py311,\n@@ -12,8 +10,6 @@ envlist = py27,\n \n [gh-actions]\n python =\n-    2.7: py27\n-    3.7: py37\n     3.8: py38\n     3.9: py39\n     3.10: py310\n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2023-04-01T19:37:17+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/769e0294ef879313e6ba10093f97445992a91d24

feat: drop unused slimmer code

Files changed:
M plone/memoize/compress.py

b'diff --git a/plone/memoize/compress.py b/plone/memoize/compress.py\nindex 06d9028..160d4cf 100644\n--- a/plone/memoize/compress.py\n+++ b/plone/memoize/compress.py\n@@ -3,14 +3,6 @@\n \n from plone.memoize.interfaces import IXHTMLCompressor\n from zope.component import queryUtility\n-from zope.interface import implementer\n-\n-\n-SLIMMER = True\n-try:\n-    from slimmer import xhtml_slimmer\n-except ImportError:\n-    SLIMMER = False\n \n \n def xhtml_compress(string):\n@@ -18,14 +10,3 @@ def xhtml_compress(string):\n     if util is not None:\n         return util.compress(string)\n     return string\n-\n-\n-@implementer(IXHTMLCompressor)\n-class XHTMLSlimmer:\n-    def compress(self, string):\n-        if SLIMMER:\n-            return xhtml_slimmer(string)\n-        return string\n-\n-\n-xhtmlslimmer = XHTMLSlimmer()\n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2023-04-01T19:37:17+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/13d4336f4d23f79828edc5abcd238c1efa255e54

feat: drop python 2 imports

Files changed:
M plone/memoize/instance.rst
M plone/memoize/ram.py
M plone/memoize/view.py
M plone/memoize/view.rst

b'diff --git a/plone/memoize/instance.rst b/plone/memoize/instance.rst\nindex f05919d..5ebb059 100644\n--- a/plone/memoize/instance.rst\n+++ b/plone/memoize/instance.rst\n@@ -104,10 +104,7 @@ We can alter data underneath, but nothing changes::\n \n If we alter the signature, our msg is recalculated, but since mst.txt2 is a memo, only the values passed in change::\n \n-    >>> try:\n-    ...     from collections import OrderedDict\n-    ... except ImportError:\n-    ...     OrderedDict = dict\n+    >>> from collections import OrderedDict\n     >>> ins = OrderedDict([(\'tale\', \'told by idiot\'), (\'signify\', \'nothing\')])\n     >>> print(msg.getMsg(\'Bill F.\', **ins))\n     Bill F.: goodbye cruel world! tale--told by idiot signify--nothing\ndiff --git a/plone/memoize/ram.py b/plone/memoize/ram.py\nindex 6812763..f1a65b2 100644\n--- a/plone/memoize/ram.py\n+++ b/plone/memoize/ram.py\n@@ -9,11 +9,7 @@\n from zope.ramcache import ram\n from zope.ramcache.interfaces.ram import IRAMCache\n \n-\n-try:\n-    import pickle  # Python 3\n-except ImportError:\n-    import cPickle as pickle  # Python 2\n+import pickle\n \n \n global_cache = ram.RAMCache()\ndiff --git a/plone/memoize/view.py b/plone/memoize/view.py\nindex 0fb372b..a21e385 100644\n--- a/plone/memoize/view.py\n+++ b/plone/memoize/view.py\n@@ -4,14 +4,7 @@\n """\n from functools import wraps\n from zope.annotation.interfaces import IAnnotations\n-\n-\n-try:\n-    from zope.globalrequest import getRequest\n-except ImportError:\n-\n-    def getRequest():\n-        return None\n+from zope.globalrequest import getRequest\n \n \n class ViewMemo:\ndiff --git a/plone/memoize/view.rst b/plone/memoize/view.rst\nindex 0060f2c..45de49c 100644\n--- a/plone/memoize/view.rst\n+++ b/plone/memoize/view.rst\n@@ -100,10 +100,7 @@ We can alter data underneath, but nothing changes::\n \n If we alter the signature, our msg is recalculated::\n \n-    >>> try:\n-    ...     from collections import OrderedDict\n-    ... except ImportError:\n-    ...     OrderedDict = dict\n+    >>> from collections import OrderedDict\n     >>> ins = OrderedDict([(\'tale\', \'told by idiot\'), (\'signify\', \'nothing\')])\n     >>> print(msg.getMsg(\'Bill F.\', **ins))\n     Bill F.: sound and fury world! tale--told by idiot signify--nothing\n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2023-04-01T19:37:17+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/a8ee43898df7a7dc6d8c54e423fbb9fad4bb515b

feat: configure z3c.dependencychecker

Files changed:
M pyproject.toml

b"diff --git a/pyproject.toml b/pyproject.toml\nindex 9eb73f3..b371489 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -60,3 +60,4 @@ Zope = [\n   'Products.CMFDynamicViewFTI', 'zope.deprecation',\n ]\n python-dateutil = ['dateutil']\n+ignore-packages = ['zope.testing']\n"

Repository: plone.memoize


Branch: refs/heads/master
Date: 2023-04-01T19:37:17+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/e4318a8e4a89ea256360b54708b8d3aff2722656

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 18e062f..eeea7bc 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -57,7 +57,6 @@ def read(*rnames):\n             "zope.configuration",\n             "zope.globalrequest",\n             "zope.publisher",\n-            "zope.testrunner",\n             "zope.testing",\n         ],\n     ),\n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2023-04-01T19:40:19+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/90ef73326cbcf5f259ee53cf27bb6b7c3c908a33

fix(tox): install zope.testrunner for GHA

Files changed:
M tox.ini

b'diff --git a/tox.ini b/tox.ini\nindex 89ec189..8ffd3c0 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -17,6 +17,9 @@ python =\n     pypy3.9: pypy3\n \n [testenv]\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands = zope-testrunner --test-path=. {posargs:-vc}\n extras = test\n allowlist_externals =\n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2023-04-03T10:27:39+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.memoize/commit/e39cd040d3d62b8467c4ca93ba433c733a146da0

Configuring with plone/meta

Files changed:
M .gitignore
M .meta.toml
M setup.cfg
M tox.ini
D .coveragerc

b'diff --git a/.coveragerc b/.coveragerc\ndeleted file mode 100644\nindex 36be903..0000000\n--- a/.coveragerc\n+++ /dev/null\n@@ -1,6 +0,0 @@\n-[run]\n-branch = True\n-source = plone\n-\n-[report]\n-precision = 2\ndiff --git a/.gitignore b/.gitignore\nindex 485551b..c46958b 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -9,4 +9,5 @@ __pycache__\n .eggs\n .coverage\n coverage.xml\n+dependencies.svg\n /htmlcov\ndiff --git a/.meta.toml b/.meta.toml\nindex 7316575..70814db 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -2,4 +2,7 @@\n # https://github.com/plone/meta/tree/master/config/default\n [meta]\n template = "default"\n-commit-id = "93e1ab65"\n+commit-id = "5623f8b3"\n+\n+[dependencies]\n+ignores = "[\'zope.testing\']"\ndiff --git a/setup.cfg b/setup.cfg\nindex 111069a..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -21,4 +21,3 @@ ignore =\n     .meta.toml\n     .pre-commit-config.yaml\n     tox.ini\n-    .coveragerc\ndiff --git a/tox.ini b/tox.ini\nindex 8ffd3c0..a3a0f54 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,3 +1,6 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# Plus some manual settings: be careful not to lose those when reconfiguring!\n [tox]\n # We need 4.4.0 for constrain_package_deps.\n min_version = 4.4.0\n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2023-04-03T10:36:31+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.memoize/commit/a2ba755392b5bbe5e5d8e1113c6891ce3f532f5e

Merge pull request #29 from plone/config-with-default-template-6e0b2a46

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/93e1ab65.internal
M .github/workflows/tests.yml
M .gitignore
M plone/__init__.py
M plone/memoize/__init__.py
M plone/memoize/compress.py
M plone/memoize/configure.zcml
M plone/memoize/forever.py
M plone/memoize/instance.py
M plone/memoize/instance.rst
M plone/memoize/interfaces.py
M plone/memoize/ram.py
M plone/memoize/request.py
M plone/memoize/tests.py
M plone/memoize/view.py
M plone/memoize/view.rst
M plone/memoize/volatile.py
M pyproject.toml
M setup.cfg
M setup.py
M tox.ini
D .coveragerc

b'diff --git a/.coveragerc b/.coveragerc\ndeleted file mode 100644\nindex 36be903..0000000\n--- a/.coveragerc\n+++ /dev/null\n@@ -1,6 +0,0 @@\n-[run]\n-branch = True\n-source = plone\n-\n-[report]\n-precision = 2\ndiff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nindex dbcfe34..8c1d5bf 100644\n--- a/.github/workflows/tests.yml\n+++ b/.github/workflows/tests.yml\n@@ -11,7 +11,7 @@ jobs:\n     strategy:\n       fail-fast: false\n       matrix:\n-        python_version: ["2.7", "3.7", "3.8", "3.9", "3.10", "3.11", "pypy3.9"]\n+        python_version: ["3.8", "3.9", "3.10", "3.11", "pypy3.9"]\n     runs-on: ubuntu-latest\n     name: ${{ matrix.python_version }}\n     steps:\ndiff --git a/.gitignore b/.gitignore\nindex 485551b..c46958b 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -9,4 +9,5 @@ __pycache__\n .eggs\n .coverage\n coverage.xml\n+dependencies.svg\n /htmlcov\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..70814db\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,8 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "5623f8b3"\n+\n+[dependencies]\n+ignores = "[\'zope.testing\']"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..449e951\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.1.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.2\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/93e1ab65.internal b/news/93e1ab65.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/93e1ab65.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 03d08ff..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/memoize/__init__.py b/plone/memoize/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/memoize/__init__.py\n+++ b/plone/memoize/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/memoize/compress.py b/plone/memoize/compress.py\nindex 82dc1be..160d4cf 100644\n--- a/plone/memoize/compress.py\n+++ b/plone/memoize/compress.py\n@@ -1,17 +1,8 @@\n-# -*- coding: utf-8 -*-\n """XHTML Compressor\n """\n \n from plone.memoize.interfaces import IXHTMLCompressor\n from zope.component import queryUtility\n-from zope.interface import implementer\n-\n-\n-SLIMMER = True\n-try:\n-    from slimmer import xhtml_slimmer\n-except ImportError:\n-    SLIMMER = False\n \n \n def xhtml_compress(string):\n@@ -19,14 +10,3 @@ def xhtml_compress(string):\n     if util is not None:\n         return util.compress(string)\n     return string\n-\n-\n-@implementer(IXHTMLCompressor)\n-class XHTMLSlimmer(object):\n-    def compress(self, string):\n-        if SLIMMER:\n-            return xhtml_slimmer(string)\n-        return string\n-\n-\n-xhtmlslimmer = XHTMLSlimmer()\ndiff --git a/plone/memoize/configure.zcml b/plone/memoize/configure.zcml\nindex bc7166a..8329e1c 100644\n--- a/plone/memoize/configure.zcml\n+++ b/plone/memoize/configure.zcml\n@@ -1,11 +1,15 @@\n <configure xmlns="http://namespaces.zope.org/zope">\n \n-    <include package="zope.annotation" />\n+  <include package="zope.annotation" />\n \n-    <utility component=".ram.global_cache"\n-             provides="zope.ramcache.interfaces.ram.IRAMCache" />\n+  <utility\n+      provides="zope.ramcache.interfaces.ram.IRAMCache"\n+      component=".ram.global_cache"\n+      />\n \n-    <utility component=".ram.choose_cache"\n-             provides=".interfaces.ICacheChooser" />\n+  <utility\n+      provides=".interfaces.ICacheChooser"\n+      component=".ram.choose_cache"\n+      />\n \n </configure>\ndiff --git a/plone/memoize/forever.py b/plone/memoize/forever.py\nindex 1c45edf..ce9ac51 100644\n--- a/plone/memoize/forever.py\n+++ b/plone/memoize/forever.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Memo decorators for globals - memoized values survive for as long as the\n process lives.\n \ndiff --git a/plone/memoize/instance.py b/plone/memoize/instance.py\nindex 32aa8c9..9c7e449 100644\n--- a/plone/memoize/instance.py\n+++ b/plone/memoize/instance.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Memo decorators for instances.\n \n Stores values in an attribute on the instance. See instance.rst.\n@@ -11,7 +10,7 @@\n _marker = object()\n \n \n-class Memojito(object):\n+class Memojito:\n     propname = "_memojito_"\n \n     def clear(self, inst):\ndiff --git a/plone/memoize/instance.rst b/plone/memoize/instance.rst\nindex f05919d..5ebb059 100644\n--- a/plone/memoize/instance.rst\n+++ b/plone/memoize/instance.rst\n@@ -104,10 +104,7 @@ We can alter data underneath, but nothing changes::\n \n If we alter the signature, our msg is recalculated, but since mst.txt2 is a memo, only the values passed in change::\n \n-    >>> try:\n-    ...     from collections import OrderedDict\n-    ... except ImportError:\n-    ...     OrderedDict = dict\n+    >>> from collections import OrderedDict\n     >>> ins = OrderedDict([(\'tale\', \'told by idiot\'), (\'signify\', \'nothing\')])\n     >>> print(msg.getMsg(\'Bill F.\', **ins))\n     Bill F.: goodbye cruel world! tale--told by idiot signify--nothing\ndiff --git a/plone/memoize/interfaces.py b/plone/memoize/interfaces.py\nindex 8c83bf2..2cf5c9e 100644\n--- a/plone/memoize/interfaces.py\n+++ b/plone/memoize/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/plone/memoize/ram.py b/plone/memoize/ram.py\nindex 80b71e0..f1a65b2 100644\n--- a/plone/memoize/ram.py\n+++ b/plone/memoize/ram.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """A cache decorator that uses RAMCache by default.\n """\n \n@@ -10,13 +9,7 @@\n from zope.ramcache import ram\n from zope.ramcache.interfaces.ram import IRAMCache\n \n-import six\n-\n-\n-try:\n-    import pickle  # Python 3\n-except ImportError:\n-    import cPickle as pickle  # Python 2\n+import pickle\n \n \n global_cache = ram.RAMCache()\n@@ -40,7 +33,7 @@ def __init__(self, client, globalkey=""):\n         self.globalkey = globalkey and "%s:" % globalkey\n \n     def _make_key(self, source):\n-        if issubclass(type(source), six.text_type):\n+        if issubclass(type(source), str):\n             source = source.encode("utf-8")\n         return sha1(source).hexdigest()\n \n@@ -62,7 +55,7 @@ def __init__(self, ramcache, globalkey=""):\n         self.globalkey = globalkey\n \n     def _make_key(self, source):\n-        if issubclass(type(source), six.text_type):\n+        if issubclass(type(source), str):\n             source = source.encode("utf-8")\n         return sha1(source).digest()\n \n@@ -87,7 +80,7 @@ def choose_cache(fun_name):\n \n \n def store_in_cache(fun, *args, **kwargs):\n-    key = "%s.%s" % (fun.__module__, fun.__name__)\n+    key = f"{fun.__module__}.{fun.__name__}"\n     cache_chooser = component.queryUtility(ICacheChooser)\n     if cache_chooser is not None:\n         return cache_chooser(key)\ndiff --git a/plone/memoize/request.py b/plone/memoize/request.py\nindex d554627..05fe4df 100644\n--- a/plone/memoize/request.py\n+++ b/plone/memoize/request.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Memoize decorator for methods.\n \n Stores values in an annotation of the request.\n@@ -9,6 +8,7 @@\n \n import inspect\n \n+\n try:\n     getargspec = inspect.getfullargspec\n except AttributeError:\n@@ -19,8 +19,7 @@\n _marker = object()\n \n \n-class RequestMemo(object):\n-\n+class RequestMemo:\n     key = "plone.memoize_request"\n \n     def __init__(self, arg=0):\n@@ -87,7 +86,6 @@ def _store_in_annotation(fun, *args, **kwargs):\n \n \n def cache(get_key, get_request="request"):\n-\n     return volatile.cache(get_key, get_cache=store_in_annotation_of(get_request))\n \n \ndiff --git a/plone/memoize/tests.py b/plone/memoize/tests.py\nindex 20d3ca4..d5dca29 100644\n--- a/plone/memoize/tests.py\n+++ b/plone/memoize/tests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.component.testing import setUp\n from zope.component.testing import tearDown\n from zope.configuration.xmlconfig import XMLConfig\ndiff --git a/plone/memoize/view.py b/plone/memoize/view.py\nindex 549df62..a21e385 100644\n--- a/plone/memoize/view.py\n+++ b/plone/memoize/view.py\n@@ -1,22 +1,13 @@\n-# -*- coding: utf-8 -*-\n """Memoize decorator for views.\n \n Stores values in an annotation of the request. See view.rst.\n """\n from functools import wraps\n from zope.annotation.interfaces import IAnnotations\n+from zope.globalrequest import getRequest\n \n \n-try:\n-    from zope.globalrequest import getRequest\n-except ImportError:\n-\n-    def getRequest():\n-        return None\n-\n-\n-class ViewMemo(object):\n-\n+class ViewMemo:\n     key = "plone.memoize"\n \n     def memoize(self, func):\n@@ -63,7 +54,6 @@ def memogetter(*args, **kwargs):\n \n     def memoize_contextless(self, func):\n         def memogetter(*args, **kwargs):\n-\n             if args:\n                 instance = args[0]\n             else:\ndiff --git a/plone/memoize/view.rst b/plone/memoize/view.rst\nindex e9ad76f..45de49c 100644\n--- a/plone/memoize/view.rst\n+++ b/plone/memoize/view.rst\n@@ -100,10 +100,7 @@ We can alter data underneath, but nothing changes::\n \n If we alter the signature, our msg is recalculated::\n \n-    >>> try:\n-    ...     from collections import OrderedDict\n-    ... except ImportError:\n-    ...     OrderedDict = dict\n+    >>> from collections import OrderedDict\n     >>> ins = OrderedDict([(\'tale\', \'told by idiot\'), (\'signify\', \'nothing\')])\n     >>> print(msg.getMsg(\'Bill F.\', **ins))\n     Bill F.: sound and fury world! tale--told by idiot signify--nothing\n@@ -227,7 +224,7 @@ The same is true for an adapter:\n     ...     def context_unaware_function(self):\n     ...         return self.msg\n \n-We now instatiate two objects:\n+We now instantiate two objects:\n     >>> instance1 = Adapter(Dummy())\n     >>> instance2 = Adapter(Dummy())\n     >>> instance1.context_aware_function()\ndiff --git a/plone/memoize/volatile.py b/plone/memoize/volatile.py\nindex d29a002..fc7cf77 100644\n--- a/plone/memoize/volatile.py\n+++ b/plone/memoize/volatile.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """A flexible caching decorator.\n \n This module provides a cache decorator `cache` that you can use to\n@@ -18,18 +17,18 @@ class CleanupDict(dict):\n     cleanup_period = 60 * 60 * 24 * 3  # 3 days\n \n     def __init__(self, cleanup_period=None):\n-        super(CleanupDict, self).__init__()\n+        super().__init__()\n         self._last_access = {}\n         if cleanup_period is not None:\n             self.cleanup_period = cleanup_period\n \n     def __getitem__(self, key):\n-        value = super(CleanupDict, self).__getitem__(key)\n+        value = super().__getitem__(key)\n         self._last_access[key] = time.time()\n         return value\n \n     def __setitem__(self, key, value):\n-        super(CleanupDict, self).__setitem__(key, value)\n+        super().__setitem__(key, value)\n         self._last_access[key] = time.time()\n         self._cleanup()\n \n@@ -39,7 +38,7 @@ def _cleanup(self):\n         for key, timestamp in list(self._last_access.items()):\n             if timestamp < okay:\n                 del self._last_access[key]\n-                super(CleanupDict, self).__delitem__(key)\n+                super().__delitem__(key)\n \n \n ATTR = "_v_memoize_cache"\n@@ -67,7 +66,7 @@ def replacement(*args, **kwargs):\n                 key = get_key(fun, *args, **kwargs)\n             except DontCache:\n                 return fun(*args, **kwargs)\n-            key = "%s.%s:%s" % (fun.__module__, fun.__name__, key)\n+            key = f"{fun.__module__}.{fun.__name__}:{key}"\n             cache = get_cache(fun, *args, **kwargs)\n             cached_value = cache.get(key, _marker)\n             if cached_value is _marker:\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..b371489 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,44 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\n+ignore-packages = [\'zope.testing\']\ndiff --git a/setup.cfg b/setup.cfg\nindex af1e6e3..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,29 +1,23 @@\n-[check-manifest]\n-ignore =\n-    *.cfg\n-    .coveragerc\n-    tox.ini\n-\n-[zest.releaser]\n-create-wheel = yes\n-extra-message = [ci skip]\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n-\n-[isort]\n-# for details see\n-# https://docs.plone.org/develop/styleguide/python.html#grouping-and-sorting\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n-line_length = 88\n-multi_line_output=3\n-include_trailing_comma=True\n-not_skip = __init__.py\n+universal = 0\n \n [flake8]\n-exclude = docs,*.egg.,omelette\n-max-complexity = 15\n-max-line-length = 88\n-inline-quotes = "\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex dd40aca..eeea7bc 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n@@ -11,8 +10,12 @@ def read(*rnames):\n \n version = "3.0.1.dev0"\n \n-long_description = u"\\n".join(\n-    [read("README.rst"), read("plone", "memoize", "README.rst"), read("CHANGES.rst"),]\n+long_description = "\\n".join(\n+    [\n+        read("README.rst"),\n+        read("plone", "memoize", "README.rst"),\n+        read("CHANGES.rst"),\n+    ]\n )\n \n \n@@ -25,16 +28,12 @@ def read(*rnames):\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope :: 4",\n         "Framework :: Zope :: 5",\n         "License :: OSI Approved :: BSD License",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: 3.10",\n@@ -52,18 +51,17 @@ def read(*rnames):\n     include_package_data=True,\n     zip_safe=False,\n     test_suite="plone.memoize.tests.test_suite",\n+    python_requires=">=3.8",\n     extras_require=dict(\n         test=[\n             "zope.configuration",\n             "zope.globalrequest",\n             "zope.publisher",\n-            "zope.testrunner",\n             "zope.testing",\n         ],\n     ),\n     install_requires=[\n         "setuptools",\n-        "six",\n         "zope.annotation",\n         "zope.component",\n         "zope.interface",\ndiff --git a/tox.ini b/tox.ini\nindex e769b8f..a3a0f54 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,7 +1,10 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# Plus some manual settings: be careful not to lose those when reconfiguring!\n [tox]\n-envlist = py27,\n-          py37,\n-          py38,\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist = py38,\n           py39,\n           py310,\n           py311,\n@@ -10,8 +13,6 @@ envlist = py27,\n \n [gh-actions]\n python =\n-    2.7: py27\n-    3.7: py37\n     3.8: py38\n     3.9: py39\n     3.10: py310\n@@ -19,5 +20,51 @@ python =\n     pypy3.9: pypy3\n \n [testenv]\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands = zope-testrunner --test-path=. {posargs:-vc}\n extras = test\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.memoize {posargs}\n+extras =\n+    test\n'

