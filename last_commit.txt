Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-10-17T15:42:11+02:00
Author: Valentin Dumitru (valipod) <1492705+valipod@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/648f94f2653991d46d0f23bfd8feb20b4d18dadb

@rules endpoint #1411 (#1496)

* work in progress

* add/delete/update serivices

* remove unused import

* fix variable name

* some black formatting fixes

* return a message on add and update actions
add test_documentation

* black and flake8 fixes

* add news

* add http-examples

* return assignable_rules on get

* rename some classes and data keys in accordance to other similar objects

* get for the edit page of a rule

* some flake fixes

* some black fixes

* uncomment used import

* add plain id to serializer returned items

* have plain id on rule

* delete endpoint

* add rule endpoint

* add and delete conditions and rules

* flake8 fixes

* black fixes

* rule save
conditions/actions moveup/movedown
Rule apply on whole site

* single quotes will be the death of me

* further blacfixes

* edit existing conditions or rules

* single quotes will be the death of me

* Refactor add and update on rules
fixes and additions to the test_documentation

* Globally assign test rules in setUp

* remove unused imports

* refactor using queryMultiAdapter

* refactor using queryMultiAdapter

* black fix

* fix adding action to delete object
complete tests for POST, GET, PATCH and DELETE

* fix adding action to delete object
complete tests for POST, GET, PATCH and DELETE

* black fixes

* add docs (controlpanels.md and rules.md)

* black fixes

* replaced some types leftovers

* add get for conditions and actions

* remove some debugging code and typo fix

* add some new examples
update existing ones due tu code changes

* compatibility update with Plone 6.0.0a3

* treat situation when conditions/actions don't have an edit view

* fix in contolpanels.md

* fix in contolpanels.md

* revert workingcopy_baseline_get.resp to "standard"

* add test documentation fo rule conditions and actions move up/down

* add http examples for rule conditions and actions move up/down

* bugfix in test_documentation
move roles.md to docs/source/endpoints
delete old http-examples

* fix rules_add req/resp
add rules_delete req/resp

* fix rules_add req/resp
add rules_delete req/resp

* fix relative path in controlpanels.md
add examples in rules.md

* Update docs/source/endpoints/rules.md

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Update docs/source/endpoints/rules.md

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Update docs/source/endpoints/rules.md

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Update docs/source/endpoints/rules.md

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Update docs/source/endpoints/rules.md

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Update docs/source/endpoints/rules.md

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Update docs/source/endpoints/rules.md

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Update docs/source/endpoints/rules.md

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Update docs/source/endpoints/rules.md

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Update docs/source/endpoints/rules.md

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Update docs/source/endpoints/rules.md

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Update docs/source/endpoints/rules.md

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Update docs/source/endpoints/rules.md

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Update docs/source/endpoints/rules.md

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* fix indentation for html_meta keys

* renamed rules.md
added content-rules.md to the index.md

* fix rules_disable_apply_subfolders.req

* fix test_rules_disable_apply_subfolders

* Fix link to `content-rules`

* fix path

* change wording in the content-rules.md

* Update docs/source/endpoints/content-rules.md

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Update docs/source/endpoints/content-rules.md

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* fix test_rules_disable_apply_subfolders

* update rules_disable_apply_subfolders.req and resp

* Fix test to align with unreleased version of plone.restapi

* Update docs/source/endpoints/content-rules.md

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Add "content rule" and "trigger" terms and definitions to glossary

* Fix syntax

* Make documentation happy

Co-authored-by: Alin Voinea &lt;contact@avoinea.com&gt;
Co-authored-by: Andrei Grigore &lt;andrei.ggr@gmail.com&gt;
Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;
Co-authored-by: Víctor Fernández de Alba &lt;sneridagh@gmail.com&gt;
Co-authored-by: Timo Stollenwerk &lt;tisto@users.noreply.github.com&gt;

Files changed:
A docs/source/endpoints/content-rules.md
A news/1397.feature
A src/plone/restapi/controlpanels/rules.py
A src/plone/restapi/serializer/controlpanels/rules.py
A src/plone/restapi/services/rules/__init__.py
A src/plone/restapi/services/rules/add.py
A src/plone/restapi/services/rules/configure.zcml
A src/plone/restapi/services/rules/delete.py
A src/plone/restapi/services/rules/get.py
A src/plone/restapi/services/rules/update.py
A src/plone/restapi/tests/http-examples/controlpanels_delete_action_condition.req
A src/plone/restapi/tests/http-examples/controlpanels_delete_action_condition.resp
A src/plone/restapi/tests/http-examples/controlpanels_delete_rule.req
A src/plone/restapi/tests/http-examples/controlpanels_delete_rule.resp
A src/plone/restapi/tests/http-examples/controlpanels_delete_rule_condition.req
A src/plone/restapi/tests/http-examples/controlpanels_delete_rule_condition.resp
A src/plone/restapi/tests/http-examples/controlpanels_get_contentrules.req
A src/plone/restapi/tests/http-examples/controlpanels_get_contentrules.resp
A src/plone/restapi/tests/http-examples/controlpanels_get_rule.req
A src/plone/restapi/tests/http-examples/controlpanels_get_rule.resp
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_copy.req
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_copy.resp
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_logger.req
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_logger.resp
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_mail.req
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_mail.resp
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_move.req
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_move.resp
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_notify.req
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_notify.resp
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_transition.req
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_transition.resp
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_versioning.req
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_versioning.resp
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_fileextension.req
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_fileextension.resp
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_group.req
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_group.resp
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_portaltype.req
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_portaltype.resp
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_role.req
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_role.resp
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_tales.req
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_tales.resp
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_workflowstate.req
A src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_workflowstate.resp
A src/plone/restapi/tests/http-examples/controlpanels_patch_rule.req
A src/plone/restapi/tests/http-examples/controlpanels_patch_rule.resp
A src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_logger.req
A src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_logger.resp
A src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_move_down.req
A src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_move_down.resp
A src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_move_up.req
A src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_move_up.resp
A src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_move_down.req
A src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_move_down.resp
A src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_move_up.req
A src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_move_up.resp
A src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_portaltype.req
A src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_portaltype.resp
A src/plone/restapi/tests/http-examples/controlpanels_post_rule.req
A src/plone/restapi/tests/http-examples/controlpanels_post_rule.resp
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_copy.req
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_copy.resp
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_delete.req
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_delete.resp
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_logger.req
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_logger.resp
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_mail.req
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_mail.resp
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_move.req
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_move.resp
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_notify.req
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_notify.resp
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_transition.req
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_transition.resp
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_versioning.req
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_versioning.resp
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_fileextension.req
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_fileextension.resp
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_group.req
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_group.resp
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_portaltype.req
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_portaltype.resp
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_role.req
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_role.resp
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_tales.req
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_tales.resp
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_workflowstate.req
A src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_workflowstate.resp
A src/plone/restapi/tests/http-examples/rules_add.req
A src/plone/restapi/tests/http-examples/rules_add.resp
A src/plone/restapi/tests/http-examples/rules_apply_subfolders.req
A src/plone/restapi/tests/http-examples/rules_apply_subfolders.resp
A src/plone/restapi/tests/http-examples/rules_delete.req
A src/plone/restapi/tests/http-examples/rules_delete.resp
A src/plone/restapi/tests/http-examples/rules_disable.req
A src/plone/restapi/tests/http-examples/rules_disable.resp
A src/plone/restapi/tests/http-examples/rules_disable_apply_subfolders.req
A src/plone/restapi/tests/http-examples/rules_disable_apply_subfolders.resp
A src/plone/restapi/tests/http-examples/rules_enable.req
A src/plone/restapi/tests/http-examples/rules_enable.resp
A src/plone/restapi/tests/http-examples/rules_get.req
A src/plone/restapi/tests/http-examples/rules_get.resp
A src/plone/restapi/tests/http-examples/rules_move_down.req
A src/plone/restapi/tests/http-examples/rules_move_down.resp
A src/plone/restapi/tests/http-examples/rules_move_up.req
A src/plone/restapi/tests/http-examples/rules_move_up.resp
M docs/source/endpoints/controlpanels.md
M docs/source/endpoints/index.md
M src/plone/restapi/controlpanels/interfaces.py
M src/plone/restapi/serializer/controlpanels/configure.zcml
M src/plone/restapi/services/configure.zcml
M src/plone/restapi/services/controlpanels/configure.zcml
M src/plone/restapi/tests/http-examples/controlpanels_get.resp
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/docs/source/endpoints/content-rules.md b/docs/source/endpoints/content-rules.md\nnew file mode 100644\nindex 000000000..2f4a5a631\n--- /dev/null\n+++ b/docs/source/endpoints/content-rules.md\n@@ -0,0 +1,181 @@\n+---\n+myst:\n+  html_meta:\n+    "description": "Available content rules in a Plone site can be listed and queried by accessing the /@content-rules endpoint on any context. Access requires the ManageContentRules permission."\n+    "property=og:description": "Available content rules in a Plone site can be listed and queried by accessing the /@content-rules endpoint on any context. Access requires the ManageContentRules permission."\n+    "property=og:title": "Content Rules"\n+    "keywords": "Plone, plone.restapi, REST, API, ContentRules, Rules"\n+---\n+\n+(content-rules)=\n+\n+# Content Rules\n+\n+A content rule will automatically perform an action when a certain event, known as a {term}`trigger`, takes place.\n+\n+Content rules can perform routine tasks, including the following.\n+\n+-   Move content from one folder to another when that content item is published.\n+-   Send email when a content item is deleted.\n+-   Delete content after a certain date.\n+\n+```{seealso}\n+[Using Content Rules](https://docs.plone.org/working-with-content/managing-content/contentrules.html)\n+```\n+\n+```{note}\n+These docs are generated by code tests, therefore you will see some `test` rules appear here.\n+```\n+\n+Available content rules in a Plone site can be listed and queried by accessing the `/@content-rules` endpoint in any context.\n+Access requires the `ManageContentRules` permission.\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/rules_get.req\n+```\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/rules_get.resp\n+:language: http\n+```\n+\n+The API consumer can assign, unassign, enable, disable,\n+apply to subfolders, or disable apply to subfolders any of the rules available in the portal.\n+\n+| Verb    | URL              | Action                                             |\n+| ------- | ---------------- | -------------------------------------------------- |\n+| `POST`  | `/@content-rules/{rule-id}`| Add rule to context                                          |\n+| `GET`   | `/@content-rules/`         | Get acquired, assignable, and assigned rules                      |\n+| `PATCH` | `/@content-rules/` with RAW Body | enable or disable,\n+apply to subfolders or disable apply to subfolders, move down or move up |\n+| `DELETE`| `/@content-rules/` with RAW Body | Unassign rule on context                                  |\n+\n+\n+## Assigning a new Content rule with `POST`\n+\n+To assign a content rule to a context, send a `POST` request to the `<context>/@content-rules` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/rules_add.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/rules_add.resp\n+:language: http\n+```\n+\n+## Getting content rule for a context with `GET`\n+\n+To get content rules that are assigned, assignable, or acquired for a context, send a `GET`\n+request to the `<context>/@content-rules` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/rules_get.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/rules_get.resp\n+:language: http\n+```\n+\n+## Changing content rules for a context with `PATCH`\n+\n+To make changes on content rule assignments for a context, send a `PATCH`\n+request to the `<context>/@content-rules` endpoint:\n+\n+### Apply on subfolders\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/rules_apply_subfolders.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/rules_apply_subfolders.resp\n+:language: http\n+```\n+\n+### Disable apply on subfolders\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/rules_disable_apply_subfolders.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/rules_disable_apply_subfolders.resp\n+:language: http\n+```\n+\n+### Enable\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/rules_enable.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/rules_enable.resp\n+:language: http\n+```\n+\n+### Disable\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/rules_disable.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/rules_disable.resp\n+:language: http\n+```\n+\n+### Move up\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/rules_move_up.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/rules_move_up.resp\n+:language: http\n+```\n+\n+### Move down\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/rules_move_down.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/rules_move_down.resp\n+:language: http\n+```\n+\n+## Unassign content rules with `DELETE`\n+\n+To unassign content rules on a context, send a `DELETE` request to the `<context>/@content-rules` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/rules_delete.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/rules_delete.resp\n+:language: http\n+```\ndiff --git a/docs/source/endpoints/controlpanels.md b/docs/source/endpoints/controlpanels.md\nindex 1c7518f19..673e1cf5d 100644\n--- a/docs/source/endpoints/controlpanels.md\n+++ b/docs/source/endpoints/controlpanels.md\n@@ -195,3 +195,206 @@ Response:\n ```{literalinclude} ../../../src/plone/restapi/tests/http-examples/controlpanels_delete_dexterity_item.resp\n :language: http\n ```\n+\n+### Content rules\n+\n+`@controlpanels/content-rules` is a custom control panel endpoint that will allow you to add, remove, and configure available {doc}`content-rules`.\n+\n+| Verb     | URL                                         | Action                                    |\n+| -------- | ------------------------------------------- | ----------------------------------------- |\n+| `GET`    | `/@controlpanels/content-rules`             | List configurable content rules           |\n+| `POST`   | `/@controlpanels/content-rules`             | Creates a new content rule                |\n+| `GET`    | `/@controlpanels/content-rules/{rule-id}`   | Get the current state of the content rule |\n+| `PATCH`  | `/@controlpanels/content-rules/{rule-id}`   | Update the content rule details           |\n+| `DELETE` | `/@controlpanels/content-rules/{rule-id}`   | Remove the content rule                   |\n+\n+\n+#### Listing Content Rules\n+\n+To list the available content rules, send a `GET` request to `@controlpanels/content-rules`\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/controlpanels_get_contentrules.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/controlpanels_get_contentrules.resp\n+:language: http\n+```\n+\n+The following fields are returned:\n+\n+- `@id`: hypermedia link to the rule\n+- `id`: actual id of the content rule\n+- `assigned`: rule assigned or not\n+- `title`: title of the rule\n+- `description`: rule description\n+- `enabled`: rule is enabled or not\n+- `trigger`: triggering event\n+- `conditions`: conditions before triggering the rule\n+- `actions`: actions to take place\n+\n+\n+#### Creating a new Content rule with `POST`\n+\n+To create a new content rule, send a `POST` request to the `/@controlpanels/content-rules` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/controlpanels_post_rule.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/controlpanels_post_rule.resp\n+:language: http\n+```\n+\n+\n+#### Creating a new Condition on a Content rule with `POST`\n+\n+To create a new condition on a content rule, send a `POST` request to the\n+`/@controlpanels/content-rules/{rule-id}/condition` endpoint, specifying the\n+condition type in the payload:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_portaltype.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_portaltype.resp\n+:language: http\n+```\n+\n+\n+#### Creating a new Action on a Content rule with `POST`\n+\n+To create a new action on a content rule, send a `POST` request to the\n+`/@controlpanels/content-rules/{rule-id}/action` endpoint, specifying the\n+action type in the payload:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_logger.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_logger.resp\n+:language: http\n+```\n+\n+\n+#### Reading a Content rule with `GET`\n+\n+After a successful `POST`, access the content rule by sending a `GET` request to the endpoint `/@controlpanels/content-rules/{rule-id}`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/controlpanels_get_rule.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/controlpanels_get_rule.resp\n+:language: http\n+```\n+\n+\n+#### Updating a Content rule with `PATCH`\n+\n+To update an existing content rule, send a `PATCH` request to the server.\n+`PATCH` allows to provide just a subset of the resource, that is, the values you actually want to change:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/controlpanels_patch_rule.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/controlpanels_patch_rule.resp\n+:language: http\n+```\n+\n+#### Updating a Condition on a Content rule with `PATCH`\n+\n+To update an existing condition on a content rule, send a `PATCH` request to the server.\n+`PATCH` allows to provide just a subset of the resource, that is, the values you actually want to change:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_portaltype.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_portaltype.resp\n+:language: http\n+```\n+\n+### Updating an Action on a Content rule with `PATCH`\n+\n+To update an existing action on a content rule, send a `PATCH` request to the server.\n+`PATCH` allows to provide just a subset of the resource, that is, the values you actually want to change:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_logger.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_logger.resp\n+:language: http\n+```\n+\n+\n+#### Removing a Content rule with `DELETE`\n+\n+Delete an existing content rule by sending a `DELETE` request to the URL of an existing content rule:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/controlpanels_delete_rule.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/controlpanels_delete_rule.resp\n+:language: http\n+```\n+\n+#### Removing a Condition on a Content rule with `DELETE`\n+\n+Delete an existing condition from a content rule by sending a `DELETE` request to the URL of an existing content rule:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/controlpanels_delete_rule_condition.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/controlpanels_delete_rule_condition.resp\n+:language: http\n+```\n+\n+#### Removing an Action on a Content rule with `DELETE`\n+\n+Delete an existing action from a content rule by sending a `DELETE` request to the URL of an existing content rule:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/controlpanels_delete_rule_condition.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/controlpanels_delete_rule_condition.resp\n+:language: http\n+```\ndiff --git a/docs/source/endpoints/index.md b/docs/source/endpoints/index.md\nindex f6f525ef9..e3dbd57c4 100644\n--- a/docs/source/endpoints/index.md\n+++ b/docs/source/endpoints/index.md\n@@ -22,6 +22,7 @@ aliases\n breadcrumbs\n comments\n content-types\n+content-rules\n contextnavigation\n controlpanels\n copymove\ndiff --git a/news/1397.feature b/news/1397.feature\nnew file mode 100644\nindex 000000000..7b4598b8f\n--- /dev/null\n+++ b/news/1397.feature\n@@ -0,0 +1,2 @@\n+Added @rules endpoint with GET/POST/DELETE/PATCH\n+[valipod]\ndiff --git a/src/plone/restapi/controlpanels/interfaces.py b/src/plone/restapi/controlpanels/interfaces.py\nindex 32653dd98..61ba1a641 100644\n--- a/src/plone/restapi/controlpanels/interfaces.py\n+++ b/src/plone/restapi/controlpanels/interfaces.py\n@@ -28,3 +28,7 @@ def delete(names):\n \n class IDexterityTypesControlpanel(IControlpanel):\n     """Dexterity Types Control panel"""\n+\n+\n+class IContentRulesControlpanel(IControlpanel):\n+    """Content Rules Control panel"""\ndiff --git a/src/plone/restapi/controlpanels/rules.py b/src/plone/restapi/controlpanels/rules.py\nnew file mode 100644\nindex 000000000..15fb8b6f5\n--- /dev/null\n+++ b/src/plone/restapi/controlpanels/rules.py\n@@ -0,0 +1,151 @@\n+from zExceptions import BadRequest\n+from zope.component import adapter\n+from zope.component import queryMultiAdapter\n+from zope.interface import alsoProvides\n+from zope.interface import implementer\n+from zope.interface import Interface\n+from zope.publisher.interfaces.browser import IBrowserPublisher\n+from z3c.form import interfaces\n+from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.interfaces import IPloneRestapiLayer\n+from plone.restapi.controlpanels import RegistryConfigletPanel\n+from plone.restapi.controlpanels.interfaces import IContentRulesControlpanel\n+from plone.restapi.deserializer import json_body\n+import plone.protect.interfaces\n+\n+\n+@adapter(Interface, IPloneRestapiLayer)\n+@implementer(IContentRulesControlpanel, IBrowserPublisher)\n+class ContentRulesControlpanel(RegistryConfigletPanel):\n+    schema = Interface\n+    configlet_id = "ContentRules"\n+    configlet_category_id = "plone-content"\n+\n+    def publishTraverse(self, request, name):\n+\n+        return self.context.restrictedTraverse("++rule++" + name)\n+\n+    def add(self, names):\n+        data = json_body(self.request)\n+        rules = queryMultiAdapter((self.context, self.request), name="+rule")\n+        if len(names) == 0:\n+            view = queryMultiAdapter((rules, self.request), name="plone.ContentRule")\n+            form = view.form_instance\n+            form.update()\n+            title = data.get("title", None)\n+            if not title:\n+                raise BadRequest("Property \'title\' is required")\n+            widget = form.widgets["event"]\n+            data["event"] = interfaces.IDataConverter(widget).toFieldValue(\n+                [data["event"]]\n+            )\n+            if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+                alsoProvides(\n+                    self.request, plone.protect.interfaces.IDisableCSRFProtection\n+                )\n+            rule = form.create(data)\n+            form.add(rule)\n+        elif len(names) == 1:\n+            raise BadRequest("Rule id and condition or action are required")\n+        else:\n+            # we need to add a condition or action to the current rule\n+            name = names[0]\n+            extra = names[1]\n+            try:\n+                view_name = data.pop("type")\n+            except KeyError:\n+                raise BadRequest("%s type is required" % extra.title())\n+            rule = self.publishTraverse(self.request, name=name)\n+            extra_ob = self.context.restrictedTraverse(\n+                "++rule++" + name + "/+%s" % extra\n+            )\n+            view = queryMultiAdapter((extra_ob, self.request), name=view_name)\n+            if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+                alsoProvides(\n+                    self.request, plone.protect.interfaces.IDisableCSRFProtection\n+                )\n+            if view_name == "plone.actions.Delete":\n+                view()\n+            else:\n+                form = view.form_instance\n+                form.update()\n+                extra_ob = form.create(data)\n+                form.add(extra_ob)\n+        return self.get([rule.__name__])\n+\n+    def get(self, names):\n+        if len(names) == 1:\n+            context = self.publishTraverse(self.request, names[0])\n+            serializer = ISerializeToJson(self)\n+\n+            return serializer(context)\n+        else:\n+            # the get is for a condition or action\n+            fields = {}\n+            rule = self.publishTraverse(self.request, name=names[0])\n+            extras = getattr(rule, names[1] + "s")\n+            idx = int(names[2])\n+            extra_ob = extras[idx]\n+            view = queryMultiAdapter((extra_ob, self.request), name="edit")\n+            if view:\n+                view.form_instance.update()\n+                for field in view.form_instance.fields:\n+                    fields[field] = getattr(extra_ob, field)\n+                return fields\n+\n+    def update(self, names):\n+        data = json_body(self.request)\n+        name = names[0]\n+        rule = self.publishTraverse(self.request, name=name)\n+        manage_elements = queryMultiAdapter(\n+            (rule, self.request), name="manage-elements"\n+        )\n+        manage_elements.authorize = lambda: True\n+        move_action = data.get("form.button.Move")\n+        if len(names) == 1:\n+            # we are editing the rule\n+            if "form.button.ApplyOnWholeSite" in data:\n+                manage_elements.globally_assign()\n+            else:\n+                rule.title = data.get("title", rule.title)\n+                rule.description = data.get("description", rule.description)\n+                rule.stop = data.get("stopExecuting", False)\n+                rule.cascading = data.get("cascading", False)\n+                rule.enabled = data.get("enabled", False)\n+        elif len(names) == 2:\n+            raise BadRequest("%s and its index are required" % names[1].title())\n+        # we are editing a condition or action\n+        elif move_action:\n+            extras = getattr(rule, names[1] + "s")\n+            move_action = getattr(manage_elements, move_action)\n+            move_action(extras, int(names[2]))\n+        else:\n+            extras = getattr(rule, names[1] + "s")\n+            idx = int(names[2])\n+            extra_ob = extras[idx]\n+            view = queryMultiAdapter((extra_ob, self.request), name="edit")\n+            view.form_instance.update()\n+            view.form_instance.applyChanges(data)\n+\n+    def delete(self, names):\n+        if len(names) == 1:\n+            name = names[0]\n+            self.request["rule-id"] = name\n+\n+            cpanel = queryMultiAdapter(\n+                (self.context, self.request), name="rules-controlpanel"\n+            )\n+            # Disable CSRF protection\n+            # The "regular" way to force authorization was via the interface\n+            # IDisableCSRFProtection, but the plone.app.contentrules controlpanel\n+            # calls authorize directly, so we need to override that here\n+            cpanel.authorize = lambda: True\n+            cpanel.delete_rule()\n+        else:\n+            # we need to delete a condition or action from the current rule\n+            extra = names[1]\n+            if len(names) == 2:\n+                raise BadRequest("%s index is required" % extra.title())\n+            rule = self.publishTraverse(self.request, name=names[0])\n+            extras = getattr(rule, extra + "s")\n+            del extras[int(names[2])]\ndiff --git a/src/plone/restapi/serializer/controlpanels/configure.zcml b/src/plone/restapi/serializer/controlpanels/configure.zcml\nindex 4d3d5dc7a..55072e715 100644\n--- a/src/plone/restapi/serializer/controlpanels/configure.zcml\n+++ b/src/plone/restapi/serializer/controlpanels/configure.zcml\n@@ -6,5 +6,6 @@\n   <adapter factory=".ControlpanelSerializeToJson" />\n   <adapter factory=".ControlpanelSummarySerializeToJson" />\n   <adapter factory=".types.DexterityTypesControlpanelSerializeToJson" />\n+  <adapter factory=".rules.ContentRulesControlpanelSerializeToJson" />\n \n </configure>\ndiff --git a/src/plone/restapi/serializer/controlpanels/rules.py b/src/plone/restapi/serializer/controlpanels/rules.py\nnew file mode 100644\nindex 000000000..055956bc2\n--- /dev/null\n+++ b/src/plone/restapi/serializer/controlpanels/rules.py\n@@ -0,0 +1,61 @@\n+from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.controlpanels.interfaces import IContentRulesControlpanel\n+from plone.restapi.serializer.controlpanels import SERVICE_ID\n+from plone.restapi.serializer.controlpanels import ControlpanelSerializeToJson\n+from zope.component import adapter\n+from zope.component.hooks import getSite\n+from zope.component import queryMultiAdapter\n+from zope.interface import implementer\n+\n+\n+@implementer(ISerializeToJson)\n+@adapter(IContentRulesControlpanel)\n+class ContentRulesControlpanelSerializeToJson(ControlpanelSerializeToJson):\n+    def serialize_item(self, proxy):\n+        manage_elements = queryMultiAdapter(\n+            (proxy, self.controlpanel.request), name="manage-elements"\n+        )\n+        return {\n+            "@id": "{}/{}/{}/{}".format(\n+                self.controlpanel.context.absolute_url(),\n+                SERVICE_ID,\n+                self.controlpanel.__name__,\n+                proxy.__name__,\n+            ),\n+            "id": proxy.__name__,\n+            "title": proxy.title,\n+            "description": proxy.description,\n+            "group": self.controlpanel.group,\n+            "stop": proxy.stop,\n+            "cascading": proxy.cascading,\n+            "enabled": proxy.enabled,\n+            "event": manage_elements.rule_event(),\n+            "conditions": manage_elements.conditions(),\n+            "addable_conditions": manage_elements.addable_conditions(),\n+            "actions": manage_elements.actions(),\n+            "addable_actions": manage_elements.addable_actions(),\n+            "assignments": manage_elements.assignments(),\n+        }\n+\n+    def __call__(self, item=None):\n+        if item is not None:\n+            return self.serialize_item(item)\n+\n+        json = super().__call__()\n+        json["items"] = []\n+\n+        portal = getSite()\n+        portal_url = portal.absolute_url()\n+        context = self.controlpanel.context\n+        request = self.controlpanel.request\n+\n+        cpanel = queryMultiAdapter((context, request), name="rules-controlpanel")\n+        registeredRules = cpanel.registeredRules()\n+\n+        for rule in registeredRules:\n+            rule["@id"] = "{}/@controlpanels/content-rules/{}".format(\n+                portal_url, rule["id"]\n+            )\n+        json["items"].append(registeredRules)\n+\n+        return json\ndiff --git a/src/plone/restapi/services/configure.zcml b/src/plone/restapi/services/configure.zcml\nindex ac7a917d5..5b362e852 100644\n--- a/src/plone/restapi/services/configure.zcml\n+++ b/src/plone/restapi/services/configure.zcml\n@@ -31,6 +31,7 @@\n   <include package=".querystringsearch" />\n   <include package=".registry" />\n   <include package=".roles" />\n+  <include package=".rules" />\n   <include package=".search" />\n   <include package=".system" />\n   <include package=".sources" />\ndiff --git a/src/plone/restapi/services/controlpanels/configure.zcml b/src/plone/restapi/services/controlpanels/configure.zcml\nindex be384f87f..9b2ae006d 100644\n--- a/src/plone/restapi/services/controlpanels/configure.zcml\n+++ b/src/plone/restapi/services/controlpanels/configure.zcml\n@@ -55,6 +55,13 @@\n       name="dexterity-types"\n       />\n \n+  <!-- Rules Controlpanel -->\n+  <adapter\n+      factory="plone.restapi.controlpanels.rules.ContentRulesControlpanel"\n+      provides="plone.restapi.controlpanels.interfaces.IContentRulesControlpanel"\n+      name="content-rules"\n+      />\n+\n   <configure zcml:condition="have plone-5">\n \n     <!-- General -->\ndiff --git a/src/plone/restapi/services/rules/__init__.py b/src/plone/restapi/services/rules/__init__.py\nnew file mode 100644\nindex 000000000..e69de29bb\ndiff --git a/src/plone/restapi/services/rules/add.py b/src/plone/restapi/services/rules/add.py\nnew file mode 100644\nindex 000000000..59f279be4\n--- /dev/null\n+++ b/src/plone/restapi/services/rules/add.py\n@@ -0,0 +1,39 @@\n+from plone.restapi.services import Service\n+import plone.protect.interfaces\n+from zExceptions import BadRequest\n+from zope.interface import implementer\n+from zope.interface import alsoProvides\n+from zope.component import queryMultiAdapter\n+from zope.publisher.interfaces import IPublishTraverse\n+\n+\n+@implementer(IPublishTraverse)\n+class ContentRulesAdd(Service):\n+    """Adds content rules"""\n+\n+    def __init__(self, context, request):\n+        super().__init__(context, request)\n+        self.params = []\n+\n+    def publishTraverse(self, request, name):\n+        # Treat any path segments after /@content-rules as parameters\n+        self.params.append(name)\n+        return self\n+\n+    def reply(self):\n+\n+        if not self.params:\n+            raise BadRequest("Missing parameter rule_id")\n+\n+        # Disable CSRF protection\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        rule_id = self.params[0]\n+        self.request.form["form.button.AddAssignment"] = True\n+        self.request.form["rule_id"] = rule_id\n+        manage_assignments = queryMultiAdapter(\n+            (self.context, self.request), name="manage-content-rules"\n+        )\n+        manage_assignments()\n+        return {"message": "Successfully assigned the rule %s" % rule_id}\ndiff --git a/src/plone/restapi/services/rules/configure.zcml b/src/plone/restapi/services/rules/configure.zcml\nnew file mode 100644\nindex 000000000..cf75e59d7\n--- /dev/null\n+++ b/src/plone/restapi/services/rules/configure.zcml\n@@ -0,0 +1,38 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n+    >\n+\n+  <plone:service\n+      method="GET"\n+      factory=".get.ContentRulesGet"\n+      for="plone.contentrules.engine.interfaces.IRuleAssignable"\n+      permission="plone.app.contentrules.ManageContentRules"\n+      name="@content-rules"\n+      />\n+\n+  <plone:service\n+      method="POST"\n+      factory=".add.ContentRulesAdd"\n+      for="plone.contentrules.engine.interfaces.IRuleAssignable"\n+      permission="plone.app.contentrules.ManageContentRules"\n+      name="@content-rules"\n+      />\n+\n+  <plone:service\n+      method="PATCH"\n+      factory=".update.ContentRulesUpdate"\n+      for="plone.contentrules.engine.interfaces.IRuleAssignable"\n+      permission="plone.app.contentrules.ManageContentRules"\n+      name="@content-rules"\n+      />\n+\n+  <plone:service\n+      method="DELETE"\n+      factory=".delete.ContentRulesDelete"\n+      for="plone.contentrules.engine.interfaces.IRuleAssignable"\n+      permission="plone.app.contentrules.ManageContentRules"\n+      name="@content-rules"\n+      />\n+\n+</configure>\ndiff --git a/src/plone/restapi/services/rules/delete.py b/src/plone/restapi/services/rules/delete.py\nnew file mode 100644\nindex 000000000..60b506d01\n--- /dev/null\n+++ b/src/plone/restapi/services/rules/delete.py\n@@ -0,0 +1,29 @@\n+from plone.restapi.services import Service\n+import plone.protect.interfaces\n+from zExceptions import BadRequest\n+from zope.interface import alsoProvides\n+from zope.component import queryMultiAdapter\n+from plone.restapi.deserializer import json_body\n+\n+\n+class ContentRulesDelete(Service):\n+    """Delete content rules"""\n+\n+    def reply(self):\n+\n+        # Disable CSRF protection\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        data = json_body(self.request)\n+        rule_ids = data.get("rule_ids")\n+        if not rule_ids:\n+            raise BadRequest("Missing parameter rule_ids")\n+\n+        self.request.form["form.button.Delete"] = True\n+        self.request.form["rule_ids"] = rule_ids\n+        manage_assignments = queryMultiAdapter(\n+            (self.context, self.request), name="manage-content-rules"\n+        )\n+        manage_assignments()\n+        return self.reply_no_content()\ndiff --git a/src/plone/restapi/services/rules/get.py b/src/plone/restapi/services/rules/get.py\nnew file mode 100644\nindex 000000000..af8e9ec5c\n--- /dev/null\n+++ b/src/plone/restapi/services/rules/get.py\n@@ -0,0 +1,31 @@\n+from zope.component import queryMultiAdapter\n+from plone.restapi.services import Service\n+\n+\n+class ContentRulesGet(Service):\n+    """Publishes the content rules assigned or acquired by given context"""\n+\n+    def __init__(self, context, request):\n+        super().__init__(context, request)\n+        self.params = []\n+\n+    def publishTraverse(self, request, name):\n+        # Treat any path segments after /@content-rules as parameters\n+        self.params.append(name)\n+        return self\n+\n+    def reply(self):\n+        manage_assignments = queryMultiAdapter(\n+            (self.context, self.request), name="manage-content-rules"\n+        )\n+        acquired_rules = manage_assignments.acquired_rules()\n+        assigned_rules = manage_assignments.assigned_rules()\n+        assignable_rules = manage_assignments.assignable_rules()\n+\n+        return {\n+            "content-rules": {\n+                "acquired_rules": acquired_rules,\n+                "assigned_rules": assigned_rules,\n+                "assignable_rules": assignable_rules,\n+            }\n+        }\ndiff --git a/src/plone/restapi/services/rules/update.py b/src/plone/restapi/services/rules/update.py\nnew file mode 100644\nindex 000000000..5e92725e3\n--- /dev/null\n+++ b/src/plone/restapi/services/rules/update.py\n@@ -0,0 +1,49 @@\n+from plone.restapi.services import Service\n+import plone.protect.interfaces\n+from zope.interface import alsoProvides\n+from zope.component import queryMultiAdapter\n+from plone.restapi.deserializer import json_body\n+\n+\n+class ContentRulesUpdate(Service):\n+    """Update content rules"""\n+\n+    def reply(self):\n+\n+        # Disable CSRF protection\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        data = json_body(self.request)\n+        operation = data.get("operation", None)\n+        if operation:\n+            self.request.form["operation"] = operation\n+            message = "Successfully applied the %s" % operation\n+        rule_id = data.get("rule_id", None)\n+        if rule_id:\n+            self.request.form["rule_id"] = rule_id\n+        rule_ids = data.get("rule_ids", None)\n+        if rule_ids:\n+            self.request.form["rule_ids"] = rule_ids\n+        enable = data.get("form.button.Enable", None)\n+        if enable:\n+            self.request.form["form.button.Enable"] = enable\n+            message = "Successfully enabled rules %s" % rule_ids\n+        disable = data.get("form.button.Disable", None)\n+        if disable:\n+            self.request.form["form.button.Disable"] = disable\n+            message = "Successfully disabled rules %s" % rule_ids\n+        bubble = data.get("form.button.Bubble", None)\n+        if bubble:\n+            self.request.form["form.button.Bubble"] = bubble\n+            message = "Successfully applied %s to subfolders" % rule_ids\n+        no_bubble = data.get("form.button.NoBubble", None)\n+        if no_bubble:\n+            self.request.form["form.button.NoBubble"] = no_bubble\n+            message = "Disabled apply to subfolders for %s" % rule_ids\n+\n+        manage_assignments = queryMultiAdapter(\n+            (self.context, self.request), name="manage-content-rules"\n+        )\n+        manage_assignments()\n+        return {"message": message}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_delete_action_condition.req b/src/plone/restapi/tests/http-examples/controlpanels_delete_action_condition.req\nnew file mode 100644\nindex 000000000..c1e338dc8\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_delete_action_condition.req\n@@ -0,0 +1,3 @@\n+DELETE /plone/@controlpanels/content-rules/rule-3/action/0 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_delete_action_condition.resp b/src/plone/restapi/tests/http-examples/controlpanels_delete_action_condition.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_delete_action_condition.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_delete_rule.req b/src/plone/restapi/tests/http-examples/controlpanels_delete_rule.req\nnew file mode 100644\nindex 000000000..62f490f2f\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_delete_rule.req\n@@ -0,0 +1,3 @@\n+DELETE /plone/@controlpanels/content-rules/rule-3 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_delete_rule.resp b/src/plone/restapi/tests/http-examples/controlpanels_delete_rule.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_delete_rule.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_delete_rule_condition.req b/src/plone/restapi/tests/http-examples/controlpanels_delete_rule_condition.req\nnew file mode 100644\nindex 000000000..a0c7b5b15\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_delete_rule_condition.req\n@@ -0,0 +1,3 @@\n+DELETE /plone/@controlpanels/content-rules/rule-3/condition/0 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_delete_rule_condition.resp b/src/plone/restapi/tests/http-examples/controlpanels_delete_rule_condition.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_delete_rule_condition.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get.resp b/src/plone/restapi/tests/http-examples/controlpanels_get.resp\nindex 43fb2b2fd..2d6e11a1a 100644\n--- a/src/plone/restapi/tests/http-examples/controlpanels_get.resp\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get.resp\n@@ -37,6 +37,11 @@ Content-Type: application/json\n         "group": "General",\n         "title": "Social Media"\n     },\n+    {\n+        "@id": "http://localhost:55001/plone/@controlpanels/content-rules",\n+        "group": "Content",\n+        "title": "Content Rules"\n+    },\n     {\n         "@id": "http://localhost:55001/plone/@controlpanels/dexterity-types",\n         "group": "Content",\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_contentrules.req b/src/plone/restapi/tests/http-examples/controlpanels_get_contentrules.req\nnew file mode 100644\nindex 000000000..2ab64c788\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_contentrules.req\n@@ -0,0 +1,3 @@\n+GET /plone/@controlpanels/content-rules HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_contentrules.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_contentrules.resp\nnew file mode 100644\nindex 000000000..99adef8c6\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_contentrules.resp\n@@ -0,0 +1,39 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "@id": "http://localhost:55001/plone/@controlpanels/content-rules",\n+    "data": {},\n+    "group": "Content",\n+    "items": [\n+        [\n+            {\n+                "@id": "http://localhost:55001/plone/@controlpanels/content-rules/rule-1",\n+                "assigned": true,\n+                "description": "First rule added in the testing setup",\n+                "enabled": true,\n+                "id": "rule-1",\n+                "row_class": "trigger-icommentaddedevent state-enabled assignment-assigned",\n+                "title": "First test rule",\n+                "trigger": "Comment added"\n+            },\n+            {\n+                "@id": "http://localhost:55001/plone/@controlpanels/content-rules/rule-2",\n+                "assigned": true,\n+                "description": "Second rule added in the testing setup",\n+                "enabled": true,\n+                "id": "rule-2",\n+                "row_class": "trigger-icommentaddedevent state-enabled assignment-assigned",\n+                "title": "Second test rule",\n+                "trigger": "Comment added"\n+            }\n+        ]\n+    ],\n+    "schema": {\n+        "fieldsets": [],\n+        "properties": {},\n+        "required": [],\n+        "type": "object"\n+    },\n+    "title": "Content Rules"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule.req b/src/plone/restapi/tests/http-examples/controlpanels_get_rule.req\nnew file mode 100644\nindex 000000000..24d7a3341\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule.req\n@@ -0,0 +1,3 @@\n+GET /plone/@controlpanels/content-rules/rule-3 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_rule.resp\nnew file mode 100644\nindex 000000000..943c31512\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule.resp\n@@ -0,0 +1,219 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "@id": "http://localhost:55001/plone/@controlpanels/content-rules/rule-3",\n+    "actions": [\n+        {\n+            "description": "Log a particular event",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Log message text_contentrules_logger_message",\n+            "title": "Logger"\n+        },\n+        {\n+            "description": "Return a portal message to the user",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": false,\n+            "summary": "Notify with message Information",\n+            "title": "Notify user"\n+        },\n+        {\n+            "description": "Copy the triggering item to a specific folder",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++2/edit",\n+            "first": false,\n+            "idx": 2,\n+            "last": false,\n+            "summary": "Copy to folder /folder.",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "description": "Move the triggering item to a specific folder",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++3/edit",\n+            "first": false,\n+            "idx": 3,\n+            "last": false,\n+            "summary": "Move to folder /folder",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "description": "Delete the triggering item",\n+            "editview": null,\n+            "first": false,\n+            "idx": 4,\n+            "last": false,\n+            "summary": "Delete object",\n+            "title": "Delete object"\n+        },\n+        {\n+            "description": "Perform a workflow transition on the triggering object",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++5/edit",\n+            "first": false,\n+            "idx": 5,\n+            "last": false,\n+            "summary": "Execute transition hide",\n+            "title": "Transition workflow state"\n+        },\n+        {\n+            "description": "Send an email on the triggering object",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++6/edit",\n+            "first": false,\n+            "idx": 6,\n+            "last": false,\n+            "summary": "Email report to test@somethingelse.com",\n+            "title": "Send email"\n+        },\n+        {\n+            "description": "Store a new version of the object",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++7/edit",\n+            "first": false,\n+            "idx": 7,\n+            "last": true,\n+            "summary": "Versioning with comment Some comment",\n+            "title": "Version object"\n+        }\n+    ],\n+    "addable_actions": [\n+        {\n+            "addview": "plone.actions.Logger",\n+            "description": "Log a particular event",\n+            "title": "Logger"\n+        },\n+        {\n+            "addview": "plone.actions.Notify",\n+            "description": "Return a portal message to the user",\n+            "title": "Notify user"\n+        },\n+        {\n+            "addview": "plone.actions.Copy",\n+            "description": "Copy the triggering item to a specific folder",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Move",\n+            "description": "Move the triggering item to a specific folder",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Delete",\n+            "description": "Delete the triggering item",\n+            "title": "Delete object"\n+        },\n+        {\n+            "addview": "plone.actions.Workflow",\n+            "description": "Perform a workflow transition on the triggering object",\n+            "title": "Transition workflow state"\n+        },\n+        {\n+            "addview": "plone.actions.Mail",\n+            "description": "Send an email on the triggering object",\n+            "title": "Send email"\n+        },\n+        {\n+            "addview": "plone.actions.Versioning",\n+            "description": "Store a new version of the object",\n+            "title": "Version object"\n+        }\n+    ],\n+    "addable_conditions": [\n+        {\n+            "addview": "plone.conditions.PortalType",\n+            "description": "Apply only when the current content object is of a particular type",\n+            "title": "Content type"\n+        },\n+        {\n+            "addview": "plone.conditions.FileExtension",\n+            "description": "Apply only to a particular file extension",\n+            "title": "File Extension"\n+        },\n+        {\n+            "addview": "plone.conditions.WorkflowState",\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "addview": "plone.conditions.Group",\n+            "description": "Apply only when the current user is in the given group",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "addview": "plone.conditions.Role",\n+            "description": "Apply only when the current user has the given role",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "addview": "plone.conditions.TalesExpression",\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "assignments": [],\n+    "cascading": false,\n+    "conditions": [\n+        {\n+            "description": "Apply only when the current content object is of a particular type",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Content types are: Collection",\n+            "title": "Content type"\n+        },\n+        {\n+            "description": "Apply only to a particular file extension",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": false,\n+            "summary": "File extension is JPG",\n+            "title": "File Extension"\n+        },\n+        {\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++2/edit",\n+            "first": false,\n+            "idx": 2,\n+            "last": false,\n+            "summary": "Workflow states are: pending, private",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "description": "Apply only when the current user is in the given group",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++3/edit",\n+            "first": false,\n+            "idx": 3,\n+            "last": false,\n+            "summary": "Groups are: Administrators, Site Administrators",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "description": "Apply only when the current user has the given role",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++4/edit",\n+            "first": false,\n+            "idx": 4,\n+            "last": false,\n+            "summary": "Roles are: Anonymous, Authenticated",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++5/edit",\n+            "first": false,\n+            "idx": 5,\n+            "last": true,\n+            "summary": "TALES expression is: <tal:block content=\'string:\' />",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "description": "Third rule added in the testing setup",\n+    "enabled": true,\n+    "event": "Comment added",\n+    "group": "Content",\n+    "id": "rule-3",\n+    "stop": false,\n+    "title": "Third test rule"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_copy.req b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_copy.req\nnew file mode 100644\nindex 000000000..873afdda0\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_copy.req\n@@ -0,0 +1,3 @@\n+GET /plone/@controlpanels/content-rules/rule-3/action/2 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_copy.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_copy.resp\nnew file mode 100644\nindex 000000000..230ed5fc1\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_copy.resp\n@@ -0,0 +1,6 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "target_folder": "/folder"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_logger.req b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_logger.req\nnew file mode 100644\nindex 000000000..cd3100b9c\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_logger.req\n@@ -0,0 +1,3 @@\n+GET /plone/@controlpanels/content-rules/rule-3/action/0 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_logger.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_logger.resp\nnew file mode 100644\nindex 000000000..ea4a0145c\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_logger.resp\n@@ -0,0 +1,8 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "loggingLevel": "",\n+    "message": "text_contentrules_logger_message",\n+    "targetLogger": "Plone"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_mail.req b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_mail.req\nnew file mode 100644\nindex 000000000..679892cd0\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_mail.req\n@@ -0,0 +1,3 @@\n+GET /plone/@controlpanels/content-rules/rule-3/action/6 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_mail.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_mail.resp\nnew file mode 100644\nindex 000000000..f8752862f\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_mail.resp\n@@ -0,0 +1,10 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "exclude_actor": true,\n+    "message": "And the message body",\n+    "recipients": "test@somethingelse.com",\n+    "source": "noreply@something.com",\n+    "subject": "Email Subject"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_move.req b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_move.req\nnew file mode 100644\nindex 000000000..ce3003175\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_move.req\n@@ -0,0 +1,3 @@\n+GET /plone/@controlpanels/content-rules/rule-3/action/3 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_move.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_move.resp\nnew file mode 100644\nindex 000000000..230ed5fc1\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_move.resp\n@@ -0,0 +1,6 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "target_folder": "/folder"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_notify.req b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_notify.req\nnew file mode 100644\nindex 000000000..b71aa7cbc\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_notify.req\n@@ -0,0 +1,3 @@\n+GET /plone/@controlpanels/content-rules/rule-3/action/1 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_notify.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_notify.resp\nnew file mode 100644\nindex 000000000..97af910df\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_notify.resp\n@@ -0,0 +1,7 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "message": "Information",\n+    "message_type": "info"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_transition.req b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_transition.req\nnew file mode 100644\nindex 000000000..6a252d898\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_transition.req\n@@ -0,0 +1,3 @@\n+GET /plone/@controlpanels/content-rules/rule-3/action/5 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_transition.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_transition.resp\nnew file mode 100644\nindex 000000000..3ae843351\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_transition.resp\n@@ -0,0 +1,6 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "transition": "hide"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_versioning.req b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_versioning.req\nnew file mode 100644\nindex 000000000..1bb2fc877\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_versioning.req\n@@ -0,0 +1,3 @@\n+GET /plone/@controlpanels/content-rules/rule-3/action/7 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_versioning.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_versioning.resp\nnew file mode 100644\nindex 000000000..10c1a0442\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_action_versioning.resp\n@@ -0,0 +1,6 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "comment": "Some comment"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_fileextension.req b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_fileextension.req\nnew file mode 100644\nindex 000000000..d5b76418b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_fileextension.req\n@@ -0,0 +1,3 @@\n+GET /plone/@controlpanels/content-rules/rule-3/condition/1 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_fileextension.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_fileextension.resp\nnew file mode 100644\nindex 000000000..c3b82a882\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_fileextension.resp\n@@ -0,0 +1,6 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "file_extension": "JPG"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_group.req b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_group.req\nnew file mode 100644\nindex 000000000..7be2b64db\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_group.req\n@@ -0,0 +1,3 @@\n+GET /plone/@controlpanels/content-rules/rule-3/condition/3 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_group.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_group.resp\nnew file mode 100644\nindex 000000000..2899cd3aa\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_group.resp\n@@ -0,0 +1,9 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "group_names": [\n+        "Administrators",\n+        "Site Administrators"\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_portaltype.req b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_portaltype.req\nnew file mode 100644\nindex 000000000..0df6817f7\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_portaltype.req\n@@ -0,0 +1,3 @@\n+GET /plone/@controlpanels/content-rules/rule-3/condition/0 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_portaltype.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_portaltype.resp\nnew file mode 100644\nindex 000000000..e81dee974\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_portaltype.resp\n@@ -0,0 +1,9 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "check_types": [\n+        "Collection",\n+        "Comment"\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_role.req b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_role.req\nnew file mode 100644\nindex 000000000..ac0dea1c7\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_role.req\n@@ -0,0 +1,3 @@\n+GET /plone/@controlpanels/content-rules/rule-3/condition/4 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_role.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_role.resp\nnew file mode 100644\nindex 000000000..1bd894e0d\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_role.resp\n@@ -0,0 +1,9 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "role_names": [\n+        "Anonymous",\n+        "Authenticated"\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_tales.req b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_tales.req\nnew file mode 100644\nindex 000000000..241ae7b5e\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_tales.req\n@@ -0,0 +1,3 @@\n+GET /plone/@controlpanels/content-rules/rule-3/condition/5 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_tales.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_tales.resp\nnew file mode 100644\nindex 000000000..d06538a58\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_tales.resp\n@@ -0,0 +1,6 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "tales_expression": "<tal:block content=\'string:\' />"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_workflowstate.req b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_workflowstate.req\nnew file mode 100644\nindex 000000000..fb5d1b80f\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_workflowstate.req\n@@ -0,0 +1,3 @@\n+GET /plone/@controlpanels/content-rules/rule-3/condition/2 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_workflowstate.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_workflowstate.resp\nnew file mode 100644\nindex 000000000..61e6cc076\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_rule_condition_workflowstate.resp\n@@ -0,0 +1,9 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "wf_states": [\n+        "pending",\n+        "private"\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_patch_rule.req b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule.req\nnew file mode 100644\nindex 000000000..12461160e\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule.req\n@@ -0,0 +1,13 @@\n+PATCH /plone/@controlpanels/content-rules/rule-3 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "cascading": true,\n+    "description": "Third rule added in the testing setup (modified)",\n+    "enabled": false,\n+    "event": "Comment removed",\n+    "stop": true,\n+    "title": "Third test rule (modified)"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_patch_rule.resp b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_logger.req b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_logger.req\nnew file mode 100644\nindex 000000000..bf9d28cd0\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_logger.req\n@@ -0,0 +1,10 @@\n+PATCH /plone/@controlpanels/content-rules/rule-3/action/0 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "Level": "20",\n+    "message": "text_contentrules_logger_message",\n+    "targetLogger": "Plone6"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_logger.resp b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_logger.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_logger.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_move_down.req b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_move_down.req\nnew file mode 100644\nindex 000000000..3fdca722a\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_move_down.req\n@@ -0,0 +1,8 @@\n+PATCH /plone/@controlpanels/content-rules/rule-3/action/0 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "form.button.Move": "_move_down"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_move_down.resp b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_move_down.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_move_down.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_move_up.req b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_move_up.req\nnew file mode 100644\nindex 000000000..b635a66c2\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_move_up.req\n@@ -0,0 +1,8 @@\n+PATCH /plone/@controlpanels/content-rules/rule-3/action/1 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "form.button.Move": "_move_up"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_move_up.resp b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_move_up.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_action_move_up.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_move_down.req b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_move_down.req\nnew file mode 100644\nindex 000000000..ca69e62a9\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_move_down.req\n@@ -0,0 +1,8 @@\n+PATCH /plone/@controlpanels/content-rules/rule-3/condition/0 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "form.button.Move": "_move_down"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_move_down.resp b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_move_down.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_move_down.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_move_up.req b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_move_up.req\nnew file mode 100644\nindex 000000000..46518a5bd\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_move_up.req\n@@ -0,0 +1,8 @@\n+PATCH /plone/@controlpanels/content-rules/rule-3/condition/1 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "form.button.Move": "_move_up"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_move_up.resp b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_move_up.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_move_up.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_portaltype.req b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_portaltype.req\nnew file mode 100644\nindex 000000000..24d75de02\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_portaltype.req\n@@ -0,0 +1,10 @@\n+PATCH /plone/@controlpanels/content-rules/rule-3/condition/0 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "check_types": [\n+        "Collection"\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_portaltype.resp b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_portaltype.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_patch_rule_condition_portaltype.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule.req b/src/plone/restapi/tests/http-examples/controlpanels_post_rule.req\nnew file mode 100644\nindex 000000000..a2c7f70fe\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule.req\n@@ -0,0 +1,13 @@\n+POST /plone/@controlpanels/content-rules HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "cascading": false,\n+    "description": "Third rule added in the testing setup",\n+    "enabled": true,\n+    "event": "Comment added",\n+    "stop": false,\n+    "title": "Third test rule"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule.resp b/src/plone/restapi/tests/http-examples/controlpanels_post_rule.resp\nnew file mode 100644\nindex 000000000..09949916f\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule.resp\n@@ -0,0 +1,92 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/@controlpanels/content-rules/rule-3\n+\n+{\n+    "@id": "http://localhost:55001/plone/@controlpanels/content-rules/rule-3",\n+    "actions": [],\n+    "addable_actions": [\n+        {\n+            "addview": "plone.actions.Logger",\n+            "description": "Log a particular event",\n+            "title": "Logger"\n+        },\n+        {\n+            "addview": "plone.actions.Notify",\n+            "description": "Return a portal message to the user",\n+            "title": "Notify user"\n+        },\n+        {\n+            "addview": "plone.actions.Copy",\n+            "description": "Copy the triggering item to a specific folder",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Move",\n+            "description": "Move the triggering item to a specific folder",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Delete",\n+            "description": "Delete the triggering item",\n+            "title": "Delete object"\n+        },\n+        {\n+            "addview": "plone.actions.Workflow",\n+            "description": "Perform a workflow transition on the triggering object",\n+            "title": "Transition workflow state"\n+        },\n+        {\n+            "addview": "plone.actions.Mail",\n+            "description": "Send an email on the triggering object",\n+            "title": "Send email"\n+        },\n+        {\n+            "addview": "plone.actions.Versioning",\n+            "description": "Store a new version of the object",\n+            "title": "Version object"\n+        }\n+    ],\n+    "addable_conditions": [\n+        {\n+            "addview": "plone.conditions.PortalType",\n+            "description": "Apply only when the current content object is of a particular type",\n+            "title": "Content type"\n+        },\n+        {\n+            "addview": "plone.conditions.FileExtension",\n+            "description": "Apply only to a particular file extension",\n+            "title": "File Extension"\n+        },\n+        {\n+            "addview": "plone.conditions.WorkflowState",\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "addview": "plone.conditions.Group",\n+            "description": "Apply only when the current user is in the given group",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "addview": "plone.conditions.Role",\n+            "description": "Apply only when the current user has the given role",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "addview": "plone.conditions.TalesExpression",\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "assignments": [],\n+    "cascading": false,\n+    "conditions": [],\n+    "description": "Third rule added in the testing setup",\n+    "enabled": true,\n+    "event": "Comment added",\n+    "group": "Content",\n+    "id": "rule-3",\n+    "stop": false,\n+    "title": "Third test rule"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_copy.req b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_copy.req\nnew file mode 100644\nindex 000000000..f8540e0b8\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_copy.req\n@@ -0,0 +1,9 @@\n+POST /plone/@controlpanels/content-rules/rule-3/action HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "target_folder": "SomeUUID000000000000000000000001",\n+    "type": "plone.actions.Copy"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_copy.resp b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_copy.resp\nnew file mode 100644\nindex 000000000..11a69613c\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_copy.resp\n@@ -0,0 +1,175 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/@controlpanels/content-rules/rule-3\n+\n+{\n+    "@id": "http://localhost:55001/plone/@controlpanels/content-rules/rule-3",\n+    "actions": [\n+        {\n+            "description": "Log a particular event",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Log message ${message}",\n+            "title": "Logger"\n+        },\n+        {\n+            "description": "Return a portal message to the user",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": false,\n+            "summary": "Notify with message ${message}",\n+            "title": "Notify user"\n+        },\n+        {\n+            "description": "Copy the triggering item to a specific folder",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++2/edit",\n+            "first": false,\n+            "idx": 2,\n+            "last": true,\n+            "summary": "Copy to folder ${folder}.",\n+            "title": "Copy to folder"\n+        }\n+    ],\n+    "addable_actions": [\n+        {\n+            "addview": "plone.actions.Logger",\n+            "description": "Log a particular event",\n+            "title": "Logger"\n+        },\n+        {\n+            "addview": "plone.actions.Notify",\n+            "description": "Return a portal message to the user",\n+            "title": "Notify user"\n+        },\n+        {\n+            "addview": "plone.actions.Copy",\n+            "description": "Copy the triggering item to a specific folder",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Move",\n+            "description": "Move the triggering item to a specific folder",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Delete",\n+            "description": "Delete the triggering item",\n+            "title": "Delete object"\n+        },\n+        {\n+            "addview": "plone.actions.Workflow",\n+            "description": "Perform a workflow transition on the triggering object",\n+            "title": "Transition workflow state"\n+        },\n+        {\n+            "addview": "plone.actions.Mail",\n+            "description": "Send an email on the triggering object",\n+            "title": "Send email"\n+        },\n+        {\n+            "addview": "plone.actions.Versioning",\n+            "description": "Store a new version of the object",\n+            "title": "Version object"\n+        }\n+    ],\n+    "addable_conditions": [\n+        {\n+            "addview": "plone.conditions.PortalType",\n+            "description": "Apply only when the current content object is of a particular type",\n+            "title": "Content type"\n+        },\n+        {\n+            "addview": "plone.conditions.FileExtension",\n+            "description": "Apply only to a particular file extension",\n+            "title": "File Extension"\n+        },\n+        {\n+            "addview": "plone.conditions.WorkflowState",\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "addview": "plone.conditions.Group",\n+            "description": "Apply only when the current user is in the given group",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "addview": "plone.conditions.Role",\n+            "description": "Apply only when the current user has the given role",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "addview": "plone.conditions.TalesExpression",\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "assignments": [],\n+    "cascading": false,\n+    "conditions": [\n+        {\n+            "description": "Apply only when the current content object is of a particular type",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Content types are: ${names}",\n+            "title": "Content type"\n+        },\n+        {\n+            "description": "Apply only to a particular file extension",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": false,\n+            "summary": "File extension is ${ext}",\n+            "title": "File Extension"\n+        },\n+        {\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++2/edit",\n+            "first": false,\n+            "idx": 2,\n+            "last": false,\n+            "summary": "Workflow states are: ${states}",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "description": "Apply only when the current user is in the given group",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++3/edit",\n+            "first": false,\n+            "idx": 3,\n+            "last": false,\n+            "summary": "Groups are: ${names}",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "description": "Apply only when the current user has the given role",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++4/edit",\n+            "first": false,\n+            "idx": 4,\n+            "last": false,\n+            "summary": "Roles are: ${names}",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++5/edit",\n+            "first": false,\n+            "idx": 5,\n+            "last": true,\n+            "summary": "TALES expression is: ${tales_expression}",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "description": "Third rule added in the testing setup",\n+    "enabled": true,\n+    "event": "Comment added",\n+    "group": "Content",\n+    "id": "rule-3",\n+    "stop": false,\n+    "title": "Third test rule"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_delete.req b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_delete.req\nnew file mode 100644\nindex 000000000..d12b0a744\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_delete.req\n@@ -0,0 +1,8 @@\n+POST /plone/@controlpanels/content-rules/rule-3/action HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "type": "plone.actions.Delete"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_delete.resp b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_delete.resp\nnew file mode 100644\nindex 000000000..99b2bbe8a\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_delete.resp\n@@ -0,0 +1,193 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/@controlpanels/content-rules/rule-3\n+\n+{\n+    "@id": "http://localhost:55001/plone/@controlpanels/content-rules/rule-3",\n+    "actions": [\n+        {\n+            "description": "Log a particular event",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Log message ${message}",\n+            "title": "Logger"\n+        },\n+        {\n+            "description": "Return a portal message to the user",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": false,\n+            "summary": "Notify with message ${message}",\n+            "title": "Notify user"\n+        },\n+        {\n+            "description": "Copy the triggering item to a specific folder",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++2/edit",\n+            "first": false,\n+            "idx": 2,\n+            "last": false,\n+            "summary": "Copy to folder ${folder}.",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "description": "Move the triggering item to a specific folder",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++3/edit",\n+            "first": false,\n+            "idx": 3,\n+            "last": false,\n+            "summary": "Move to folder ${folder}",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "description": "Delete the triggering item",\n+            "editview": null,\n+            "first": false,\n+            "idx": 4,\n+            "last": true,\n+            "summary": "Delete object",\n+            "title": "Delete object"\n+        }\n+    ],\n+    "addable_actions": [\n+        {\n+            "addview": "plone.actions.Logger",\n+            "description": "Log a particular event",\n+            "title": "Logger"\n+        },\n+        {\n+            "addview": "plone.actions.Notify",\n+            "description": "Return a portal message to the user",\n+            "title": "Notify user"\n+        },\n+        {\n+            "addview": "plone.actions.Copy",\n+            "description": "Copy the triggering item to a specific folder",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Move",\n+            "description": "Move the triggering item to a specific folder",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Delete",\n+            "description": "Delete the triggering item",\n+            "title": "Delete object"\n+        },\n+        {\n+            "addview": "plone.actions.Workflow",\n+            "description": "Perform a workflow transition on the triggering object",\n+            "title": "Transition workflow state"\n+        },\n+        {\n+            "addview": "plone.actions.Mail",\n+            "description": "Send an email on the triggering object",\n+            "title": "Send email"\n+        },\n+        {\n+            "addview": "plone.actions.Versioning",\n+            "description": "Store a new version of the object",\n+            "title": "Version object"\n+        }\n+    ],\n+    "addable_conditions": [\n+        {\n+            "addview": "plone.conditions.PortalType",\n+            "description": "Apply only when the current content object is of a particular type",\n+            "title": "Content type"\n+        },\n+        {\n+            "addview": "plone.conditions.FileExtension",\n+            "description": "Apply only to a particular file extension",\n+            "title": "File Extension"\n+        },\n+        {\n+            "addview": "plone.conditions.WorkflowState",\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "addview": "plone.conditions.Group",\n+            "description": "Apply only when the current user is in the given group",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "addview": "plone.conditions.Role",\n+            "description": "Apply only when the current user has the given role",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "addview": "plone.conditions.TalesExpression",\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "assignments": [],\n+    "cascading": false,\n+    "conditions": [\n+        {\n+            "description": "Apply only when the current content object is of a particular type",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Content types are: ${names}",\n+            "title": "Content type"\n+        },\n+        {\n+            "description": "Apply only to a particular file extension",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": false,\n+            "summary": "File extension is ${ext}",\n+            "title": "File Extension"\n+        },\n+        {\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++2/edit",\n+            "first": false,\n+            "idx": 2,\n+            "last": false,\n+            "summary": "Workflow states are: ${states}",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "description": "Apply only when the current user is in the given group",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++3/edit",\n+            "first": false,\n+            "idx": 3,\n+            "last": false,\n+            "summary": "Groups are: ${names}",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "description": "Apply only when the current user has the given role",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++4/edit",\n+            "first": false,\n+            "idx": 4,\n+            "last": false,\n+            "summary": "Roles are: ${names}",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++5/edit",\n+            "first": false,\n+            "idx": 5,\n+            "last": true,\n+            "summary": "TALES expression is: ${tales_expression}",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "description": "Third rule added in the testing setup",\n+    "enabled": true,\n+    "event": "Comment added",\n+    "group": "Content",\n+    "id": "rule-3",\n+    "stop": false,\n+    "title": "Third test rule"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_logger.req b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_logger.req\nnew file mode 100644\nindex 000000000..29cb68823\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_logger.req\n@@ -0,0 +1,11 @@\n+POST /plone/@controlpanels/content-rules/rule-3/action HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "Level": "20",\n+    "message": "text_contentrules_logger_message",\n+    "targetLogger": "Plone",\n+    "type": "plone.actions.Logger"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_logger.resp b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_logger.resp\nnew file mode 100644\nindex 000000000..8099f8b50\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_logger.resp\n@@ -0,0 +1,157 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/@controlpanels/content-rules/rule-3\n+\n+{\n+    "@id": "http://localhost:55001/plone/@controlpanels/content-rules/rule-3",\n+    "actions": [\n+        {\n+            "description": "Log a particular event",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": true,\n+            "summary": "Log message ${message}",\n+            "title": "Logger"\n+        }\n+    ],\n+    "addable_actions": [\n+        {\n+            "addview": "plone.actions.Logger",\n+            "description": "Log a particular event",\n+            "title": "Logger"\n+        },\n+        {\n+            "addview": "plone.actions.Notify",\n+            "description": "Return a portal message to the user",\n+            "title": "Notify user"\n+        },\n+        {\n+            "addview": "plone.actions.Copy",\n+            "description": "Copy the triggering item to a specific folder",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Move",\n+            "description": "Move the triggering item to a specific folder",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Delete",\n+            "description": "Delete the triggering item",\n+            "title": "Delete object"\n+        },\n+        {\n+            "addview": "plone.actions.Workflow",\n+            "description": "Perform a workflow transition on the triggering object",\n+            "title": "Transition workflow state"\n+        },\n+        {\n+            "addview": "plone.actions.Mail",\n+            "description": "Send an email on the triggering object",\n+            "title": "Send email"\n+        },\n+        {\n+            "addview": "plone.actions.Versioning",\n+            "description": "Store a new version of the object",\n+            "title": "Version object"\n+        }\n+    ],\n+    "addable_conditions": [\n+        {\n+            "addview": "plone.conditions.PortalType",\n+            "description": "Apply only when the current content object is of a particular type",\n+            "title": "Content type"\n+        },\n+        {\n+            "addview": "plone.conditions.FileExtension",\n+            "description": "Apply only to a particular file extension",\n+            "title": "File Extension"\n+        },\n+        {\n+            "addview": "plone.conditions.WorkflowState",\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "addview": "plone.conditions.Group",\n+            "description": "Apply only when the current user is in the given group",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "addview": "plone.conditions.Role",\n+            "description": "Apply only when the current user has the given role",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "addview": "plone.conditions.TalesExpression",\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "assignments": [],\n+    "cascading": false,\n+    "conditions": [\n+        {\n+            "description": "Apply only when the current content object is of a particular type",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Content types are: ${names}",\n+            "title": "Content type"\n+        },\n+        {\n+            "description": "Apply only to a particular file extension",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": false,\n+            "summary": "File extension is ${ext}",\n+            "title": "File Extension"\n+        },\n+        {\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++2/edit",\n+            "first": false,\n+            "idx": 2,\n+            "last": false,\n+            "summary": "Workflow states are: ${states}",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "description": "Apply only when the current user is in the given group",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++3/edit",\n+            "first": false,\n+            "idx": 3,\n+            "last": false,\n+            "summary": "Groups are: ${names}",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "description": "Apply only when the current user has the given role",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++4/edit",\n+            "first": false,\n+            "idx": 4,\n+            "last": false,\n+            "summary": "Roles are: ${names}",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++5/edit",\n+            "first": false,\n+            "idx": 5,\n+            "last": true,\n+            "summary": "TALES expression is: ${tales_expression}",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "description": "Third rule added in the testing setup",\n+    "enabled": true,\n+    "event": "Comment added",\n+    "group": "Content",\n+    "id": "rule-3",\n+    "stop": false,\n+    "title": "Third test rule"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_mail.req b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_mail.req\nnew file mode 100644\nindex 000000000..39cee7ab8\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_mail.req\n@@ -0,0 +1,13 @@\n+POST /plone/@controlpanels/content-rules/rule-3/action HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "exclude_actor": true,\n+    "message": "And the message body",\n+    "recipients": "test@somethingelse.com",\n+    "source": "noreply@something.com",\n+    "subject": "Email Subject",\n+    "type": "plone.actions.Mail"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_mail.resp b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_mail.resp\nnew file mode 100644\nindex 000000000..ae1d1884f\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_mail.resp\n@@ -0,0 +1,211 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/@controlpanels/content-rules/rule-3\n+\n+{\n+    "@id": "http://localhost:55001/plone/@controlpanels/content-rules/rule-3",\n+    "actions": [\n+        {\n+            "description": "Log a particular event",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Log message ${message}",\n+            "title": "Logger"\n+        },\n+        {\n+            "description": "Return a portal message to the user",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": false,\n+            "summary": "Notify with message ${message}",\n+            "title": "Notify user"\n+        },\n+        {\n+            "description": "Copy the triggering item to a specific folder",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++2/edit",\n+            "first": false,\n+            "idx": 2,\n+            "last": false,\n+            "summary": "Copy to folder ${folder}.",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "description": "Move the triggering item to a specific folder",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++3/edit",\n+            "first": false,\n+            "idx": 3,\n+            "last": false,\n+            "summary": "Move to folder ${folder}",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "description": "Delete the triggering item",\n+            "editview": null,\n+            "first": false,\n+            "idx": 4,\n+            "last": false,\n+            "summary": "Delete object",\n+            "title": "Delete object"\n+        },\n+        {\n+            "description": "Perform a workflow transition on the triggering object",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++5/edit",\n+            "first": false,\n+            "idx": 5,\n+            "last": false,\n+            "summary": "Execute transition ${transition}",\n+            "title": "Transition workflow state"\n+        },\n+        {\n+            "description": "Send an email on the triggering object",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++6/edit",\n+            "first": false,\n+            "idx": 6,\n+            "last": true,\n+            "summary": "Email report to ${recipients}",\n+            "title": "Send email"\n+        }\n+    ],\n+    "addable_actions": [\n+        {\n+            "addview": "plone.actions.Logger",\n+            "description": "Log a particular event",\n+            "title": "Logger"\n+        },\n+        {\n+            "addview": "plone.actions.Notify",\n+            "description": "Return a portal message to the user",\n+            "title": "Notify user"\n+        },\n+        {\n+            "addview": "plone.actions.Copy",\n+            "description": "Copy the triggering item to a specific folder",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Move",\n+            "description": "Move the triggering item to a specific folder",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Delete",\n+            "description": "Delete the triggering item",\n+            "title": "Delete object"\n+        },\n+        {\n+            "addview": "plone.actions.Workflow",\n+            "description": "Perform a workflow transition on the triggering object",\n+            "title": "Transition workflow state"\n+        },\n+        {\n+            "addview": "plone.actions.Mail",\n+            "description": "Send an email on the triggering object",\n+            "title": "Send email"\n+        },\n+        {\n+            "addview": "plone.actions.Versioning",\n+            "description": "Store a new version of the object",\n+            "title": "Version object"\n+        }\n+    ],\n+    "addable_conditions": [\n+        {\n+            "addview": "plone.conditions.PortalType",\n+            "description": "Apply only when the current content object is of a particular type",\n+            "title": "Content type"\n+        },\n+        {\n+            "addview": "plone.conditions.FileExtension",\n+            "description": "Apply only to a particular file extension",\n+            "title": "File Extension"\n+        },\n+        {\n+            "addview": "plone.conditions.WorkflowState",\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "addview": "plone.conditions.Group",\n+            "description": "Apply only when the current user is in the given group",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "addview": "plone.conditions.Role",\n+            "description": "Apply only when the current user has the given role",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "addview": "plone.conditions.TalesExpression",\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "assignments": [],\n+    "cascading": false,\n+    "conditions": [\n+        {\n+            "description": "Apply only when the current content object is of a particular type",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Content types are: ${names}",\n+            "title": "Content type"\n+        },\n+        {\n+            "description": "Apply only to a particular file extension",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": false,\n+            "summary": "File extension is ${ext}",\n+            "title": "File Extension"\n+        },\n+        {\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++2/edit",\n+            "first": false,\n+            "idx": 2,\n+            "last": false,\n+            "summary": "Workflow states are: ${states}",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "description": "Apply only when the current user is in the given group",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++3/edit",\n+            "first": false,\n+            "idx": 3,\n+            "last": false,\n+            "summary": "Groups are: ${names}",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "description": "Apply only when the current user has the given role",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++4/edit",\n+            "first": false,\n+            "idx": 4,\n+            "last": false,\n+            "summary": "Roles are: ${names}",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++5/edit",\n+            "first": false,\n+            "idx": 5,\n+            "last": true,\n+            "summary": "TALES expression is: ${tales_expression}",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "description": "Third rule added in the testing setup",\n+    "enabled": true,\n+    "event": "Comment added",\n+    "group": "Content",\n+    "id": "rule-3",\n+    "stop": false,\n+    "title": "Third test rule"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_move.req b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_move.req\nnew file mode 100644\nindex 000000000..98bcf88dc\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_move.req\n@@ -0,0 +1,9 @@\n+POST /plone/@controlpanels/content-rules/rule-3/action HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "target_folder": "SomeUUID000000000000000000000001",\n+    "type": "plone.actions.Move"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_move.resp b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_move.resp\nnew file mode 100644\nindex 000000000..34a39e76f\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_move.resp\n@@ -0,0 +1,184 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/@controlpanels/content-rules/rule-3\n+\n+{\n+    "@id": "http://localhost:55001/plone/@controlpanels/content-rules/rule-3",\n+    "actions": [\n+        {\n+            "description": "Log a particular event",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Log message ${message}",\n+            "title": "Logger"\n+        },\n+        {\n+            "description": "Return a portal message to the user",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": false,\n+            "summary": "Notify with message ${message}",\n+            "title": "Notify user"\n+        },\n+        {\n+            "description": "Copy the triggering item to a specific folder",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++2/edit",\n+            "first": false,\n+            "idx": 2,\n+            "last": false,\n+            "summary": "Copy to folder ${folder}.",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "description": "Move the triggering item to a specific folder",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++3/edit",\n+            "first": false,\n+            "idx": 3,\n+            "last": true,\n+            "summary": "Move to folder ${folder}",\n+            "title": "Move to folder"\n+        }\n+    ],\n+    "addable_actions": [\n+        {\n+            "addview": "plone.actions.Logger",\n+            "description": "Log a particular event",\n+            "title": "Logger"\n+        },\n+        {\n+            "addview": "plone.actions.Notify",\n+            "description": "Return a portal message to the user",\n+            "title": "Notify user"\n+        },\n+        {\n+            "addview": "plone.actions.Copy",\n+            "description": "Copy the triggering item to a specific folder",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Move",\n+            "description": "Move the triggering item to a specific folder",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Delete",\n+            "description": "Delete the triggering item",\n+            "title": "Delete object"\n+        },\n+        {\n+            "addview": "plone.actions.Workflow",\n+            "description": "Perform a workflow transition on the triggering object",\n+            "title": "Transition workflow state"\n+        },\n+        {\n+            "addview": "plone.actions.Mail",\n+            "description": "Send an email on the triggering object",\n+            "title": "Send email"\n+        },\n+        {\n+            "addview": "plone.actions.Versioning",\n+            "description": "Store a new version of the object",\n+            "title": "Version object"\n+        }\n+    ],\n+    "addable_conditions": [\n+        {\n+            "addview": "plone.conditions.PortalType",\n+            "description": "Apply only when the current content object is of a particular type",\n+            "title": "Content type"\n+        },\n+        {\n+            "addview": "plone.conditions.FileExtension",\n+            "description": "Apply only to a particular file extension",\n+            "title": "File Extension"\n+        },\n+        {\n+            "addview": "plone.conditions.WorkflowState",\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "addview": "plone.conditions.Group",\n+            "description": "Apply only when the current user is in the given group",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "addview": "plone.conditions.Role",\n+            "description": "Apply only when the current user has the given role",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "addview": "plone.conditions.TalesExpression",\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "assignments": [],\n+    "cascading": false,\n+    "conditions": [\n+        {\n+            "description": "Apply only when the current content object is of a particular type",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Content types are: ${names}",\n+            "title": "Content type"\n+        },\n+        {\n+            "description": "Apply only to a particular file extension",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": false,\n+            "summary": "File extension is ${ext}",\n+            "title": "File Extension"\n+        },\n+        {\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++2/edit",\n+            "first": false,\n+            "idx": 2,\n+            "last": false,\n+            "summary": "Workflow states are: ${states}",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "description": "Apply only when the current user is in the given group",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++3/edit",\n+            "first": false,\n+            "idx": 3,\n+            "last": false,\n+            "summary": "Groups are: ${names}",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "description": "Apply only when the current user has the given role",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++4/edit",\n+            "first": false,\n+            "idx": 4,\n+            "last": false,\n+            "summary": "Roles are: ${names}",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++5/edit",\n+            "first": false,\n+            "idx": 5,\n+            "last": true,\n+            "summary": "TALES expression is: ${tales_expression}",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "description": "Third rule added in the testing setup",\n+    "enabled": true,\n+    "event": "Comment added",\n+    "group": "Content",\n+    "id": "rule-3",\n+    "stop": false,\n+    "title": "Third test rule"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_notify.req b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_notify.req\nnew file mode 100644\nindex 000000000..982fe8f59\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_notify.req\n@@ -0,0 +1,10 @@\n+POST /plone/@controlpanels/content-rules/rule-3/action HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "message": "Information",\n+    "message_type": "info",\n+    "type": "plone.actions.Notify"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_notify.resp b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_notify.resp\nnew file mode 100644\nindex 000000000..57ae9df9f\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_notify.resp\n@@ -0,0 +1,166 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/@controlpanels/content-rules/rule-3\n+\n+{\n+    "@id": "http://localhost:55001/plone/@controlpanels/content-rules/rule-3",\n+    "actions": [\n+        {\n+            "description": "Log a particular event",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Log message ${message}",\n+            "title": "Logger"\n+        },\n+        {\n+            "description": "Return a portal message to the user",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": true,\n+            "summary": "Notify with message ${message}",\n+            "title": "Notify user"\n+        }\n+    ],\n+    "addable_actions": [\n+        {\n+            "addview": "plone.actions.Logger",\n+            "description": "Log a particular event",\n+            "title": "Logger"\n+        },\n+        {\n+            "addview": "plone.actions.Notify",\n+            "description": "Return a portal message to the user",\n+            "title": "Notify user"\n+        },\n+        {\n+            "addview": "plone.actions.Copy",\n+            "description": "Copy the triggering item to a specific folder",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Move",\n+            "description": "Move the triggering item to a specific folder",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Delete",\n+            "description": "Delete the triggering item",\n+            "title": "Delete object"\n+        },\n+        {\n+            "addview": "plone.actions.Workflow",\n+            "description": "Perform a workflow transition on the triggering object",\n+            "title": "Transition workflow state"\n+        },\n+        {\n+            "addview": "plone.actions.Mail",\n+            "description": "Send an email on the triggering object",\n+            "title": "Send email"\n+        },\n+        {\n+            "addview": "plone.actions.Versioning",\n+            "description": "Store a new version of the object",\n+            "title": "Version object"\n+        }\n+    ],\n+    "addable_conditions": [\n+        {\n+            "addview": "plone.conditions.PortalType",\n+            "description": "Apply only when the current content object is of a particular type",\n+            "title": "Content type"\n+        },\n+        {\n+            "addview": "plone.conditions.FileExtension",\n+            "description": "Apply only to a particular file extension",\n+            "title": "File Extension"\n+        },\n+        {\n+            "addview": "plone.conditions.WorkflowState",\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "addview": "plone.conditions.Group",\n+            "description": "Apply only when the current user is in the given group",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "addview": "plone.conditions.Role",\n+            "description": "Apply only when the current user has the given role",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "addview": "plone.conditions.TalesExpression",\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "assignments": [],\n+    "cascading": false,\n+    "conditions": [\n+        {\n+            "description": "Apply only when the current content object is of a particular type",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Content types are: ${names}",\n+            "title": "Content type"\n+        },\n+        {\n+            "description": "Apply only to a particular file extension",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": false,\n+            "summary": "File extension is ${ext}",\n+            "title": "File Extension"\n+        },\n+        {\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++2/edit",\n+            "first": false,\n+            "idx": 2,\n+            "last": false,\n+            "summary": "Workflow states are: ${states}",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "description": "Apply only when the current user is in the given group",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++3/edit",\n+            "first": false,\n+            "idx": 3,\n+            "last": false,\n+            "summary": "Groups are: ${names}",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "description": "Apply only when the current user has the given role",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++4/edit",\n+            "first": false,\n+            "idx": 4,\n+            "last": false,\n+            "summary": "Roles are: ${names}",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++5/edit",\n+            "first": false,\n+            "idx": 5,\n+            "last": true,\n+            "summary": "TALES expression is: ${tales_expression}",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "description": "Third rule added in the testing setup",\n+    "enabled": true,\n+    "event": "Comment added",\n+    "group": "Content",\n+    "id": "rule-3",\n+    "stop": false,\n+    "title": "Third test rule"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_transition.req b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_transition.req\nnew file mode 100644\nindex 000000000..248d83a1c\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_transition.req\n@@ -0,0 +1,9 @@\n+POST /plone/@controlpanels/content-rules/rule-3/action HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "transition": "hide",\n+    "type": "plone.actions.Workflow"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_transition.resp b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_transition.resp\nnew file mode 100644\nindex 000000000..60aee6683\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_transition.resp\n@@ -0,0 +1,202 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/@controlpanels/content-rules/rule-3\n+\n+{\n+    "@id": "http://localhost:55001/plone/@controlpanels/content-rules/rule-3",\n+    "actions": [\n+        {\n+            "description": "Log a particular event",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Log message ${message}",\n+            "title": "Logger"\n+        },\n+        {\n+            "description": "Return a portal message to the user",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": false,\n+            "summary": "Notify with message ${message}",\n+            "title": "Notify user"\n+        },\n+        {\n+            "description": "Copy the triggering item to a specific folder",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++2/edit",\n+            "first": false,\n+            "idx": 2,\n+            "last": false,\n+            "summary": "Copy to folder ${folder}.",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "description": "Move the triggering item to a specific folder",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++3/edit",\n+            "first": false,\n+            "idx": 3,\n+            "last": false,\n+            "summary": "Move to folder ${folder}",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "description": "Delete the triggering item",\n+            "editview": null,\n+            "first": false,\n+            "idx": 4,\n+            "last": false,\n+            "summary": "Delete object",\n+            "title": "Delete object"\n+        },\n+        {\n+            "description": "Perform a workflow transition on the triggering object",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++5/edit",\n+            "first": false,\n+            "idx": 5,\n+            "last": true,\n+            "summary": "Execute transition ${transition}",\n+            "title": "Transition workflow state"\n+        }\n+    ],\n+    "addable_actions": [\n+        {\n+            "addview": "plone.actions.Logger",\n+            "description": "Log a particular event",\n+            "title": "Logger"\n+        },\n+        {\n+            "addview": "plone.actions.Notify",\n+            "description": "Return a portal message to the user",\n+            "title": "Notify user"\n+        },\n+        {\n+            "addview": "plone.actions.Copy",\n+            "description": "Copy the triggering item to a specific folder",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Move",\n+            "description": "Move the triggering item to a specific folder",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Delete",\n+            "description": "Delete the triggering item",\n+            "title": "Delete object"\n+        },\n+        {\n+            "addview": "plone.actions.Workflow",\n+            "description": "Perform a workflow transition on the triggering object",\n+            "title": "Transition workflow state"\n+        },\n+        {\n+            "addview": "plone.actions.Mail",\n+            "description": "Send an email on the triggering object",\n+            "title": "Send email"\n+        },\n+        {\n+            "addview": "plone.actions.Versioning",\n+            "description": "Store a new version of the object",\n+            "title": "Version object"\n+        }\n+    ],\n+    "addable_conditions": [\n+        {\n+            "addview": "plone.conditions.PortalType",\n+            "description": "Apply only when the current content object is of a particular type",\n+            "title": "Content type"\n+        },\n+        {\n+            "addview": "plone.conditions.FileExtension",\n+            "description": "Apply only to a particular file extension",\n+            "title": "File Extension"\n+        },\n+        {\n+            "addview": "plone.conditions.WorkflowState",\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "addview": "plone.conditions.Group",\n+            "description": "Apply only when the current user is in the given group",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "addview": "plone.conditions.Role",\n+            "description": "Apply only when the current user has the given role",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "addview": "plone.conditions.TalesExpression",\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "assignments": [],\n+    "cascading": false,\n+    "conditions": [\n+        {\n+            "description": "Apply only when the current content object is of a particular type",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Content types are: ${names}",\n+            "title": "Content type"\n+        },\n+        {\n+            "description": "Apply only to a particular file extension",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": false,\n+            "summary": "File extension is ${ext}",\n+            "title": "File Extension"\n+        },\n+        {\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++2/edit",\n+            "first": false,\n+            "idx": 2,\n+            "last": false,\n+            "summary": "Workflow states are: ${states}",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "description": "Apply only when the current user is in the given group",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++3/edit",\n+            "first": false,\n+            "idx": 3,\n+            "last": false,\n+            "summary": "Groups are: ${names}",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "description": "Apply only when the current user has the given role",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++4/edit",\n+            "first": false,\n+            "idx": 4,\n+            "last": false,\n+            "summary": "Roles are: ${names}",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++5/edit",\n+            "first": false,\n+            "idx": 5,\n+            "last": true,\n+            "summary": "TALES expression is: ${tales_expression}",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "description": "Third rule added in the testing setup",\n+    "enabled": true,\n+    "event": "Comment added",\n+    "group": "Content",\n+    "id": "rule-3",\n+    "stop": false,\n+    "title": "Third test rule"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_versioning.req b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_versioning.req\nnew file mode 100644\nindex 000000000..9cf6b5004\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_versioning.req\n@@ -0,0 +1,9 @@\n+POST /plone/@controlpanels/content-rules/rule-3/action HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "comment": "Some comment",\n+    "type": "plone.actions.Versioning"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_versioning.resp b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_versioning.resp\nnew file mode 100644\nindex 000000000..755670981\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_action_versioning.resp\n@@ -0,0 +1,220 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/@controlpanels/content-rules/rule-3\n+\n+{\n+    "@id": "http://localhost:55001/plone/@controlpanels/content-rules/rule-3",\n+    "actions": [\n+        {\n+            "description": "Log a particular event",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Log message ${message}",\n+            "title": "Logger"\n+        },\n+        {\n+            "description": "Return a portal message to the user",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": false,\n+            "summary": "Notify with message ${message}",\n+            "title": "Notify user"\n+        },\n+        {\n+            "description": "Copy the triggering item to a specific folder",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++2/edit",\n+            "first": false,\n+            "idx": 2,\n+            "last": false,\n+            "summary": "Copy to folder ${folder}.",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "description": "Move the triggering item to a specific folder",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++3/edit",\n+            "first": false,\n+            "idx": 3,\n+            "last": false,\n+            "summary": "Move to folder ${folder}",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "description": "Delete the triggering item",\n+            "editview": null,\n+            "first": false,\n+            "idx": 4,\n+            "last": false,\n+            "summary": "Delete object",\n+            "title": "Delete object"\n+        },\n+        {\n+            "description": "Perform a workflow transition on the triggering object",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++5/edit",\n+            "first": false,\n+            "idx": 5,\n+            "last": false,\n+            "summary": "Execute transition ${transition}",\n+            "title": "Transition workflow state"\n+        },\n+        {\n+            "description": "Send an email on the triggering object",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++6/edit",\n+            "first": false,\n+            "idx": 6,\n+            "last": false,\n+            "summary": "Email report to ${recipients}",\n+            "title": "Send email"\n+        },\n+        {\n+            "description": "Store a new version of the object",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++action++7/edit",\n+            "first": false,\n+            "idx": 7,\n+            "last": true,\n+            "summary": "Versioning with comment ${comment}",\n+            "title": "Version object"\n+        }\n+    ],\n+    "addable_actions": [\n+        {\n+            "addview": "plone.actions.Logger",\n+            "description": "Log a particular event",\n+            "title": "Logger"\n+        },\n+        {\n+            "addview": "plone.actions.Notify",\n+            "description": "Return a portal message to the user",\n+            "title": "Notify user"\n+        },\n+        {\n+            "addview": "plone.actions.Copy",\n+            "description": "Copy the triggering item to a specific folder",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Move",\n+            "description": "Move the triggering item to a specific folder",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Delete",\n+            "description": "Delete the triggering item",\n+            "title": "Delete object"\n+        },\n+        {\n+            "addview": "plone.actions.Workflow",\n+            "description": "Perform a workflow transition on the triggering object",\n+            "title": "Transition workflow state"\n+        },\n+        {\n+            "addview": "plone.actions.Mail",\n+            "description": "Send an email on the triggering object",\n+            "title": "Send email"\n+        },\n+        {\n+            "addview": "plone.actions.Versioning",\n+            "description": "Store a new version of the object",\n+            "title": "Version object"\n+        }\n+    ],\n+    "addable_conditions": [\n+        {\n+            "addview": "plone.conditions.PortalType",\n+            "description": "Apply only when the current content object is of a particular type",\n+            "title": "Content type"\n+        },\n+        {\n+            "addview": "plone.conditions.FileExtension",\n+            "description": "Apply only to a particular file extension",\n+            "title": "File Extension"\n+        },\n+        {\n+            "addview": "plone.conditions.WorkflowState",\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "addview": "plone.conditions.Group",\n+            "description": "Apply only when the current user is in the given group",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "addview": "plone.conditions.Role",\n+            "description": "Apply only when the current user has the given role",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "addview": "plone.conditions.TalesExpression",\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "assignments": [],\n+    "cascading": false,\n+    "conditions": [\n+        {\n+            "description": "Apply only when the current content object is of a particular type",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Content types are: ${names}",\n+            "title": "Content type"\n+        },\n+        {\n+            "description": "Apply only to a particular file extension",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": false,\n+            "summary": "File extension is ${ext}",\n+            "title": "File Extension"\n+        },\n+        {\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++2/edit",\n+            "first": false,\n+            "idx": 2,\n+            "last": false,\n+            "summary": "Workflow states are: ${states}",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "description": "Apply only when the current user is in the given group",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++3/edit",\n+            "first": false,\n+            "idx": 3,\n+            "last": false,\n+            "summary": "Groups are: ${names}",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "description": "Apply only when the current user has the given role",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++4/edit",\n+            "first": false,\n+            "idx": 4,\n+            "last": false,\n+            "summary": "Roles are: ${names}",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++5/edit",\n+            "first": false,\n+            "idx": 5,\n+            "last": true,\n+            "summary": "TALES expression is: ${tales_expression}",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "description": "Third rule added in the testing setup",\n+    "enabled": true,\n+    "event": "Comment added",\n+    "group": "Content",\n+    "id": "rule-3",\n+    "stop": false,\n+    "title": "Third test rule"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_fileextension.req b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_fileextension.req\nnew file mode 100644\nindex 000000000..8ed3a1f51\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_fileextension.req\n@@ -0,0 +1,9 @@\n+POST /plone/@controlpanels/content-rules/rule-3/condition HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "file_extension": "JPG",\n+    "type": "plone.conditions.FileExtension"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_fileextension.resp b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_fileextension.resp\nnew file mode 100644\nindex 000000000..d124c5c9a\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_fileextension.resp\n@@ -0,0 +1,111 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/@controlpanels/content-rules/rule-3\n+\n+{\n+    "@id": "http://localhost:55001/plone/@controlpanels/content-rules/rule-3",\n+    "actions": [],\n+    "addable_actions": [\n+        {\n+            "addview": "plone.actions.Logger",\n+            "description": "Log a particular event",\n+            "title": "Logger"\n+        },\n+        {\n+            "addview": "plone.actions.Notify",\n+            "description": "Return a portal message to the user",\n+            "title": "Notify user"\n+        },\n+        {\n+            "addview": "plone.actions.Copy",\n+            "description": "Copy the triggering item to a specific folder",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Move",\n+            "description": "Move the triggering item to a specific folder",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Delete",\n+            "description": "Delete the triggering item",\n+            "title": "Delete object"\n+        },\n+        {\n+            "addview": "plone.actions.Workflow",\n+            "description": "Perform a workflow transition on the triggering object",\n+            "title": "Transition workflow state"\n+        },\n+        {\n+            "addview": "plone.actions.Mail",\n+            "description": "Send an email on the triggering object",\n+            "title": "Send email"\n+        },\n+        {\n+            "addview": "plone.actions.Versioning",\n+            "description": "Store a new version of the object",\n+            "title": "Version object"\n+        }\n+    ],\n+    "addable_conditions": [\n+        {\n+            "addview": "plone.conditions.PortalType",\n+            "description": "Apply only when the current content object is of a particular type",\n+            "title": "Content type"\n+        },\n+        {\n+            "addview": "plone.conditions.FileExtension",\n+            "description": "Apply only to a particular file extension",\n+            "title": "File Extension"\n+        },\n+        {\n+            "addview": "plone.conditions.WorkflowState",\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "addview": "plone.conditions.Group",\n+            "description": "Apply only when the current user is in the given group",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "addview": "plone.conditions.Role",\n+            "description": "Apply only when the current user has the given role",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "addview": "plone.conditions.TalesExpression",\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "assignments": [],\n+    "cascading": false,\n+    "conditions": [\n+        {\n+            "description": "Apply only when the current content object is of a particular type",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Content types are: ${names}",\n+            "title": "Content type"\n+        },\n+        {\n+            "description": "Apply only to a particular file extension",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": true,\n+            "summary": "File extension is ${ext}",\n+            "title": "File Extension"\n+        }\n+    ],\n+    "description": "Third rule added in the testing setup",\n+    "enabled": true,\n+    "event": "Comment added",\n+    "group": "Content",\n+    "id": "rule-3",\n+    "stop": false,\n+    "title": "Third test rule"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_group.req b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_group.req\nnew file mode 100644\nindex 000000000..141e430f3\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_group.req\n@@ -0,0 +1,12 @@\n+POST /plone/@controlpanels/content-rules/rule-3/condition HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "group_names": [\n+        "Administrators",\n+        "Site Administrators"\n+    ],\n+    "type": "plone.conditions.Group"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_group.resp b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_group.resp\nnew file mode 100644\nindex 000000000..433c5c100\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_group.resp\n@@ -0,0 +1,129 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/@controlpanels/content-rules/rule-3\n+\n+{\n+    "@id": "http://localhost:55001/plone/@controlpanels/content-rules/rule-3",\n+    "actions": [],\n+    "addable_actions": [\n+        {\n+            "addview": "plone.actions.Logger",\n+            "description": "Log a particular event",\n+            "title": "Logger"\n+        },\n+        {\n+            "addview": "plone.actions.Notify",\n+            "description": "Return a portal message to the user",\n+            "title": "Notify user"\n+        },\n+        {\n+            "addview": "plone.actions.Copy",\n+            "description": "Copy the triggering item to a specific folder",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Move",\n+            "description": "Move the triggering item to a specific folder",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Delete",\n+            "description": "Delete the triggering item",\n+            "title": "Delete object"\n+        },\n+        {\n+            "addview": "plone.actions.Workflow",\n+            "description": "Perform a workflow transition on the triggering object",\n+            "title": "Transition workflow state"\n+        },\n+        {\n+            "addview": "plone.actions.Mail",\n+            "description": "Send an email on the triggering object",\n+            "title": "Send email"\n+        },\n+        {\n+            "addview": "plone.actions.Versioning",\n+            "description": "Store a new version of the object",\n+            "title": "Version object"\n+        }\n+    ],\n+    "addable_conditions": [\n+        {\n+            "addview": "plone.conditions.PortalType",\n+            "description": "Apply only when the current content object is of a particular type",\n+            "title": "Content type"\n+        },\n+        {\n+            "addview": "plone.conditions.FileExtension",\n+            "description": "Apply only to a particular file extension",\n+            "title": "File Extension"\n+        },\n+        {\n+            "addview": "plone.conditions.WorkflowState",\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "addview": "plone.conditions.Group",\n+            "description": "Apply only when the current user is in the given group",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "addview": "plone.conditions.Role",\n+            "description": "Apply only when the current user has the given role",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "addview": "plone.conditions.TalesExpression",\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "assignments": [],\n+    "cascading": false,\n+    "conditions": [\n+        {\n+            "description": "Apply only when the current content object is of a particular type",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Content types are: ${names}",\n+            "title": "Content type"\n+        },\n+        {\n+            "description": "Apply only to a particular file extension",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": false,\n+            "summary": "File extension is ${ext}",\n+            "title": "File Extension"\n+        },\n+        {\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++2/edit",\n+            "first": false,\n+            "idx": 2,\n+            "last": false,\n+            "summary": "Workflow states are: ${states}",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "description": "Apply only when the current user is in the given group",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++3/edit",\n+            "first": false,\n+            "idx": 3,\n+            "last": true,\n+            "summary": "Groups are: ${names}",\n+            "title": "User\'s group"\n+        }\n+    ],\n+    "description": "Third rule added in the testing setup",\n+    "enabled": true,\n+    "event": "Comment added",\n+    "group": "Content",\n+    "id": "rule-3",\n+    "stop": false,\n+    "title": "Third test rule"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_portaltype.req b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_portaltype.req\nnew file mode 100644\nindex 000000000..bfe24320a\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_portaltype.req\n@@ -0,0 +1,12 @@\n+POST /plone/@controlpanels/content-rules/rule-3/condition HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "check_types": [\n+        "Collection",\n+        "Comment"\n+    ],\n+    "type": "plone.conditions.PortalType"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_portaltype.resp b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_portaltype.resp\nnew file mode 100644\nindex 000000000..eb078be81\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_portaltype.resp\n@@ -0,0 +1,102 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/@controlpanels/content-rules/rule-3\n+\n+{\n+    "@id": "http://localhost:55001/plone/@controlpanels/content-rules/rule-3",\n+    "actions": [],\n+    "addable_actions": [\n+        {\n+            "addview": "plone.actions.Logger",\n+            "description": "Log a particular event",\n+            "title": "Logger"\n+        },\n+        {\n+            "addview": "plone.actions.Notify",\n+            "description": "Return a portal message to the user",\n+            "title": "Notify user"\n+        },\n+        {\n+            "addview": "plone.actions.Copy",\n+            "description": "Copy the triggering item to a specific folder",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Move",\n+            "description": "Move the triggering item to a specific folder",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Delete",\n+            "description": "Delete the triggering item",\n+            "title": "Delete object"\n+        },\n+        {\n+            "addview": "plone.actions.Workflow",\n+            "description": "Perform a workflow transition on the triggering object",\n+            "title": "Transition workflow state"\n+        },\n+        {\n+            "addview": "plone.actions.Mail",\n+            "description": "Send an email on the triggering object",\n+            "title": "Send email"\n+        },\n+        {\n+            "addview": "plone.actions.Versioning",\n+            "description": "Store a new version of the object",\n+            "title": "Version object"\n+        }\n+    ],\n+    "addable_conditions": [\n+        {\n+            "addview": "plone.conditions.PortalType",\n+            "description": "Apply only when the current content object is of a particular type",\n+            "title": "Content type"\n+        },\n+        {\n+            "addview": "plone.conditions.FileExtension",\n+            "description": "Apply only to a particular file extension",\n+            "title": "File Extension"\n+        },\n+        {\n+            "addview": "plone.conditions.WorkflowState",\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "addview": "plone.conditions.Group",\n+            "description": "Apply only when the current user is in the given group",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "addview": "plone.conditions.Role",\n+            "description": "Apply only when the current user has the given role",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "addview": "plone.conditions.TalesExpression",\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "assignments": [],\n+    "cascading": false,\n+    "conditions": [\n+        {\n+            "description": "Apply only when the current content object is of a particular type",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": true,\n+            "summary": "Content types are: ${names}",\n+            "title": "Content type"\n+        }\n+    ],\n+    "description": "Third rule added in the testing setup",\n+    "enabled": true,\n+    "event": "Comment added",\n+    "group": "Content",\n+    "id": "rule-3",\n+    "stop": false,\n+    "title": "Third test rule"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_role.req b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_role.req\nnew file mode 100644\nindex 000000000..720086692\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_role.req\n@@ -0,0 +1,12 @@\n+POST /plone/@controlpanels/content-rules/rule-3/condition HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "role_names": [\n+        "Anonymous",\n+        "Authenticated"\n+    ],\n+    "type": "plone.conditions.Role"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_role.resp b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_role.resp\nnew file mode 100644\nindex 000000000..d7f60e333\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_role.resp\n@@ -0,0 +1,138 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/@controlpanels/content-rules/rule-3\n+\n+{\n+    "@id": "http://localhost:55001/plone/@controlpanels/content-rules/rule-3",\n+    "actions": [],\n+    "addable_actions": [\n+        {\n+            "addview": "plone.actions.Logger",\n+            "description": "Log a particular event",\n+            "title": "Logger"\n+        },\n+        {\n+            "addview": "plone.actions.Notify",\n+            "description": "Return a portal message to the user",\n+            "title": "Notify user"\n+        },\n+        {\n+            "addview": "plone.actions.Copy",\n+            "description": "Copy the triggering item to a specific folder",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Move",\n+            "description": "Move the triggering item to a specific folder",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Delete",\n+            "description": "Delete the triggering item",\n+            "title": "Delete object"\n+        },\n+        {\n+            "addview": "plone.actions.Workflow",\n+            "description": "Perform a workflow transition on the triggering object",\n+            "title": "Transition workflow state"\n+        },\n+        {\n+            "addview": "plone.actions.Mail",\n+            "description": "Send an email on the triggering object",\n+            "title": "Send email"\n+        },\n+        {\n+            "addview": "plone.actions.Versioning",\n+            "description": "Store a new version of the object",\n+            "title": "Version object"\n+        }\n+    ],\n+    "addable_conditions": [\n+        {\n+            "addview": "plone.conditions.PortalType",\n+            "description": "Apply only when the current content object is of a particular type",\n+            "title": "Content type"\n+        },\n+        {\n+            "addview": "plone.conditions.FileExtension",\n+            "description": "Apply only to a particular file extension",\n+            "title": "File Extension"\n+        },\n+        {\n+            "addview": "plone.conditions.WorkflowState",\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "addview": "plone.conditions.Group",\n+            "description": "Apply only when the current user is in the given group",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "addview": "plone.conditions.Role",\n+            "description": "Apply only when the current user has the given role",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "addview": "plone.conditions.TalesExpression",\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "assignments": [],\n+    "cascading": false,\n+    "conditions": [\n+        {\n+            "description": "Apply only when the current content object is of a particular type",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Content types are: ${names}",\n+            "title": "Content type"\n+        },\n+        {\n+            "description": "Apply only to a particular file extension",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": false,\n+            "summary": "File extension is ${ext}",\n+            "title": "File Extension"\n+        },\n+        {\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++2/edit",\n+            "first": false,\n+            "idx": 2,\n+            "last": false,\n+            "summary": "Workflow states are: ${states}",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "description": "Apply only when the current user is in the given group",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++3/edit",\n+            "first": false,\n+            "idx": 3,\n+            "last": false,\n+            "summary": "Groups are: ${names}",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "description": "Apply only when the current user has the given role",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++4/edit",\n+            "first": false,\n+            "idx": 4,\n+            "last": true,\n+            "summary": "Roles are: ${names}",\n+            "title": "User\'s role"\n+        }\n+    ],\n+    "description": "Third rule added in the testing setup",\n+    "enabled": true,\n+    "event": "Comment added",\n+    "group": "Content",\n+    "id": "rule-3",\n+    "stop": false,\n+    "title": "Third test rule"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_tales.req b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_tales.req\nnew file mode 100644\nindex 000000000..aabc5c309\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_tales.req\n@@ -0,0 +1,9 @@\n+POST /plone/@controlpanels/content-rules/rule-3/condition HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "tales_expression": "<tal:block content=\'string:\' />",\n+    "type": "plone.conditions.TalesExpression"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_tales.resp b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_tales.resp\nnew file mode 100644\nindex 000000000..2c9721ae8\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_tales.resp\n@@ -0,0 +1,147 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/@controlpanels/content-rules/rule-3\n+\n+{\n+    "@id": "http://localhost:55001/plone/@controlpanels/content-rules/rule-3",\n+    "actions": [],\n+    "addable_actions": [\n+        {\n+            "addview": "plone.actions.Logger",\n+            "description": "Log a particular event",\n+            "title": "Logger"\n+        },\n+        {\n+            "addview": "plone.actions.Notify",\n+            "description": "Return a portal message to the user",\n+            "title": "Notify user"\n+        },\n+        {\n+            "addview": "plone.actions.Copy",\n+            "description": "Copy the triggering item to a specific folder",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Move",\n+            "description": "Move the triggering item to a specific folder",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Delete",\n+            "description": "Delete the triggering item",\n+            "title": "Delete object"\n+        },\n+        {\n+            "addview": "plone.actions.Workflow",\n+            "description": "Perform a workflow transition on the triggering object",\n+            "title": "Transition workflow state"\n+        },\n+        {\n+            "addview": "plone.actions.Mail",\n+            "description": "Send an email on the triggering object",\n+            "title": "Send email"\n+        },\n+        {\n+            "addview": "plone.actions.Versioning",\n+            "description": "Store a new version of the object",\n+            "title": "Version object"\n+        }\n+    ],\n+    "addable_conditions": [\n+        {\n+            "addview": "plone.conditions.PortalType",\n+            "description": "Apply only when the current content object is of a particular type",\n+            "title": "Content type"\n+        },\n+        {\n+            "addview": "plone.conditions.FileExtension",\n+            "description": "Apply only to a particular file extension",\n+            "title": "File Extension"\n+        },\n+        {\n+            "addview": "plone.conditions.WorkflowState",\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "addview": "plone.conditions.Group",\n+            "description": "Apply only when the current user is in the given group",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "addview": "plone.conditions.Role",\n+            "description": "Apply only when the current user has the given role",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "addview": "plone.conditions.TalesExpression",\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "assignments": [],\n+    "cascading": false,\n+    "conditions": [\n+        {\n+            "description": "Apply only when the current content object is of a particular type",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Content types are: ${names}",\n+            "title": "Content type"\n+        },\n+        {\n+            "description": "Apply only to a particular file extension",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": false,\n+            "summary": "File extension is ${ext}",\n+            "title": "File Extension"\n+        },\n+        {\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++2/edit",\n+            "first": false,\n+            "idx": 2,\n+            "last": false,\n+            "summary": "Workflow states are: ${states}",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "description": "Apply only when the current user is in the given group",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++3/edit",\n+            "first": false,\n+            "idx": 3,\n+            "last": false,\n+            "summary": "Groups are: ${names}",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "description": "Apply only when the current user has the given role",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++4/edit",\n+            "first": false,\n+            "idx": 4,\n+            "last": false,\n+            "summary": "Roles are: ${names}",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++5/edit",\n+            "first": false,\n+            "idx": 5,\n+            "last": true,\n+            "summary": "TALES expression is: ${tales_expression}",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "description": "Third rule added in the testing setup",\n+    "enabled": true,\n+    "event": "Comment added",\n+    "group": "Content",\n+    "id": "rule-3",\n+    "stop": false,\n+    "title": "Third test rule"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_workflowstate.req b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_workflowstate.req\nnew file mode 100644\nindex 000000000..e56f06792\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_workflowstate.req\n@@ -0,0 +1,12 @@\n+POST /plone/@controlpanels/content-rules/rule-3/condition HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "type": "plone.conditions.WorkflowState",\n+    "wf_states": [\n+        "pending",\n+        "private"\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_workflowstate.resp b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_workflowstate.resp\nnew file mode 100644\nindex 000000000..9209a4f4b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_rule_condition_workflowstate.resp\n@@ -0,0 +1,120 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/@controlpanels/content-rules/rule-3\n+\n+{\n+    "@id": "http://localhost:55001/plone/@controlpanels/content-rules/rule-3",\n+    "actions": [],\n+    "addable_actions": [\n+        {\n+            "addview": "plone.actions.Logger",\n+            "description": "Log a particular event",\n+            "title": "Logger"\n+        },\n+        {\n+            "addview": "plone.actions.Notify",\n+            "description": "Return a portal message to the user",\n+            "title": "Notify user"\n+        },\n+        {\n+            "addview": "plone.actions.Copy",\n+            "description": "Copy the triggering item to a specific folder",\n+            "title": "Copy to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Move",\n+            "description": "Move the triggering item to a specific folder",\n+            "title": "Move to folder"\n+        },\n+        {\n+            "addview": "plone.actions.Delete",\n+            "description": "Delete the triggering item",\n+            "title": "Delete object"\n+        },\n+        {\n+            "addview": "plone.actions.Workflow",\n+            "description": "Perform a workflow transition on the triggering object",\n+            "title": "Transition workflow state"\n+        },\n+        {\n+            "addview": "plone.actions.Mail",\n+            "description": "Send an email on the triggering object",\n+            "title": "Send email"\n+        },\n+        {\n+            "addview": "plone.actions.Versioning",\n+            "description": "Store a new version of the object",\n+            "title": "Version object"\n+        }\n+    ],\n+    "addable_conditions": [\n+        {\n+            "addview": "plone.conditions.PortalType",\n+            "description": "Apply only when the current content object is of a particular type",\n+            "title": "Content type"\n+        },\n+        {\n+            "addview": "plone.conditions.FileExtension",\n+            "description": "Apply only to a particular file extension",\n+            "title": "File Extension"\n+        },\n+        {\n+            "addview": "plone.conditions.WorkflowState",\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "title": "Workflow state"\n+        },\n+        {\n+            "addview": "plone.conditions.Group",\n+            "description": "Apply only when the current user is in the given group",\n+            "title": "User\'s group"\n+        },\n+        {\n+            "addview": "plone.conditions.Role",\n+            "description": "Apply only when the current user has the given role",\n+            "title": "User\'s role"\n+        },\n+        {\n+            "addview": "plone.conditions.TalesExpression",\n+            "description": "Apply only when the result of a TALES expression is True",\n+            "title": "TALES expression"\n+        }\n+    ],\n+    "assignments": [],\n+    "cascading": false,\n+    "conditions": [\n+        {\n+            "description": "Apply only when the current content object is of a particular type",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++0/edit",\n+            "first": true,\n+            "idx": 0,\n+            "last": false,\n+            "summary": "Content types are: ${names}",\n+            "title": "Content type"\n+        },\n+        {\n+            "description": "Apply only to a particular file extension",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++1/edit",\n+            "first": false,\n+            "idx": 1,\n+            "last": false,\n+            "summary": "File extension is ${ext}",\n+            "title": "File Extension"\n+        },\n+        {\n+            "description": "Apply only to a objects in a particular workflow state",\n+            "editview": "http://localhost:55001/plone/++rule++rule-3/++condition++2/edit",\n+            "first": false,\n+            "idx": 2,\n+            "last": true,\n+            "summary": "Workflow states are: ${states}",\n+            "title": "Workflow state"\n+        }\n+    ],\n+    "description": "Third rule added in the testing setup",\n+    "enabled": true,\n+    "event": "Comment added",\n+    "group": "Content",\n+    "id": "rule-3",\n+    "stop": false,\n+    "title": "Third test rule"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/rules_add.req b/src/plone/restapi/tests/http-examples/rules_add.req\nnew file mode 100644\nindex 000000000..855522180\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/rules_add.req\n@@ -0,0 +1,3 @@\n+POST /plone/@content-rules/rule-1 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\ndiff --git a/src/plone/restapi/tests/http-examples/rules_add.resp b/src/plone/restapi/tests/http-examples/rules_add.resp\nnew file mode 100644\nindex 000000000..0bd06a89a\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/rules_add.resp\n@@ -0,0 +1,6 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "message": "Successfully assigned the rule rule-1"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/rules_apply_subfolders.req b/src/plone/restapi/tests/http-examples/rules_apply_subfolders.req\nnew file mode 100644\nindex 000000000..d448b8d6e\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/rules_apply_subfolders.req\n@@ -0,0 +1,12 @@\n+PATCH /plone/@content-rules HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "form.button.Bubble": true,\n+    "rule_ids": [\n+        "rule-1",\n+        "rule-2"\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/rules_apply_subfolders.resp b/src/plone/restapi/tests/http-examples/rules_apply_subfolders.resp\nnew file mode 100644\nindex 000000000..66155ecc6\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/rules_apply_subfolders.resp\n@@ -0,0 +1,6 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "message": "Successfully applied [\'rule-1\', \'rule-2\'] to subfolders"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/rules_delete.req b/src/plone/restapi/tests/http-examples/rules_delete.req\nnew file mode 100644\nindex 000000000..278d2781d\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/rules_delete.req\n@@ -0,0 +1,10 @@\n+DELETE /plone/@content-rules HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "rule_ids": [\n+        "rule-1"\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/rules_delete.resp b/src/plone/restapi/tests/http-examples/rules_delete.resp\nnew file mode 100644\nindex 000000000..49e7d3080\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/rules_delete.resp\n@@ -0,0 +1,3 @@\n+HTTP/1.1 204 No Content\n+Content-Type: text/html;charset=utf-8\n+\ndiff --git a/src/plone/restapi/tests/http-examples/rules_disable.req b/src/plone/restapi/tests/http-examples/rules_disable.req\nnew file mode 100644\nindex 000000000..4ca3f632c\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/rules_disable.req\n@@ -0,0 +1,12 @@\n+PATCH /plone/@content-rules HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "form.button.Disable": true,\n+    "rule_ids": [\n+        "rule-1",\n+        "rule-2"\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/rules_disable.resp b/src/plone/restapi/tests/http-examples/rules_disable.resp\nnew file mode 100644\nindex 000000000..b41cf40d1\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/rules_disable.resp\n@@ -0,0 +1,6 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "message": "Successfully disabled rules [\'rule-1\', \'rule-2\']"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/rules_disable_apply_subfolders.req b/src/plone/restapi/tests/http-examples/rules_disable_apply_subfolders.req\nnew file mode 100644\nindex 000000000..0008dd1a9\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/rules_disable_apply_subfolders.req\n@@ -0,0 +1,12 @@\n+PATCH /plone/@content-rules HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "form.button.NoBubble": true,\n+    "rule_ids": [\n+        "rule-1",\n+        "rule-2"\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/rules_disable_apply_subfolders.resp b/src/plone/restapi/tests/http-examples/rules_disable_apply_subfolders.resp\nnew file mode 100644\nindex 000000000..aad07fa63\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/rules_disable_apply_subfolders.resp\n@@ -0,0 +1,6 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "message": "Disabled apply to subfolders for [\'rule-1\', \'rule-2\']"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/rules_enable.req b/src/plone/restapi/tests/http-examples/rules_enable.req\nnew file mode 100644\nindex 000000000..2c416b613\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/rules_enable.req\n@@ -0,0 +1,12 @@\n+PATCH /plone/@content-rules HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "form.button.Enable": true,\n+    "rule_ids": [\n+        "rule-1",\n+        "rule-2"\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/rules_enable.resp b/src/plone/restapi/tests/http-examples/rules_enable.resp\nnew file mode 100644\nindex 000000000..d709ed7e5\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/rules_enable.resp\n@@ -0,0 +1,6 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "message": "Successfully enabled rules [\'rule-1\', \'rule-2\']"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/rules_get.req b/src/plone/restapi/tests/http-examples/rules_get.req\nnew file mode 100644\nindex 000000000..37b4f62c6\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/rules_get.req\n@@ -0,0 +1,3 @@\n+GET /plone/@content-rules HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\ndiff --git a/src/plone/restapi/tests/http-examples/rules_get.resp b/src/plone/restapi/tests/http-examples/rules_get.resp\nnew file mode 100644\nindex 000000000..b506028ff\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/rules_get.resp\n@@ -0,0 +1,31 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "content-rules": {\n+        "acquired_rules": [],\n+        "assignable_rules": [],\n+        "assigned_rules": [\n+            {\n+                "bubbles": true,\n+                "description": "First rule added in the testing setup",\n+                "enabled": true,\n+                "global_enabled": true,\n+                "id": "rule-1",\n+                "title": "First test rule",\n+                "trigger": "Comment added",\n+                "url": "http://localhost:55001/plone/++rule++rule-1/@@manage-elements"\n+            },\n+            {\n+                "bubbles": true,\n+                "description": "Second rule added in the testing setup",\n+                "enabled": true,\n+                "global_enabled": true,\n+                "id": "rule-2",\n+                "title": "Second test rule",\n+                "trigger": "Comment added",\n+                "url": "http://localhost:55001/plone/++rule++rule-2/@@manage-elements"\n+            }\n+        ]\n+    }\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/rules_move_down.req b/src/plone/restapi/tests/http-examples/rules_move_down.req\nnew file mode 100644\nindex 000000000..481760123\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/rules_move_down.req\n@@ -0,0 +1,9 @@\n+PATCH /plone/@content-rules HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "operation": "move_down",\n+    "rule_id": "rule-1"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/rules_move_down.resp b/src/plone/restapi/tests/http-examples/rules_move_down.resp\nnew file mode 100644\nindex 000000000..3dedcccbf\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/rules_move_down.resp\n@@ -0,0 +1,6 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "message": "Successfully applied the move_down"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/rules_move_up.req b/src/plone/restapi/tests/http-examples/rules_move_up.req\nnew file mode 100644\nindex 000000000..a134f71b7\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/rules_move_up.req\n@@ -0,0 +1,9 @@\n+PATCH /plone/@content-rules HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46Y29ycmVjdCBob3JzZSBiYXR0ZXJ5IHN0YXBsZQ==\n+Content-Type: application/json\n+\n+{\n+    "operation": "move_up",\n+    "rule_id": "rule-2"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/rules_move_up.resp b/src/plone/restapi/tests/http-examples/rules_move_up.resp\nnew file mode 100644\nindex 000000000..408946648\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/rules_move_up.resp\n@@ -0,0 +1,6 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "message": "Successfully applied the move_up"\n+}\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex f58567580..05934d8ec 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -2,6 +2,8 @@\n from datetime import datetime\n from pkg_resources import resource_filename\n from plone import api\n+from plone.uuid.interfaces import IUUID\n+from plone.app.discussion.interfaces import ICommentAddedEvent\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IDiscussionSettings\n from plone.app.discussion.interfaces import IReplies\n@@ -29,6 +31,7 @@\n from plone.restapi.tests.statictime import StaticTime\n from plone.testing.z2 import Browser\n from zope.component import createObject\n+from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.component.hooks import getSite\n from zope.interface import alsoProvides\n@@ -2260,3 +2263,428 @@ def test_documentation_schema_user(self):\n         response = self.api_session.get("/@userschema")\n \n         save_request_and_response_for_docs("userschema", response)\n+\n+\n+class TestRules(TestDocumentationBase):\n+\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        super().setUp()\n+\n+        # Create two test rules and assign them globally\n+\n+        rules = getMultiAdapter((self.portal, self.request), name="+rule")\n+        add_form = getMultiAdapter((rules, self.request), name="plone.ContentRule")\n+        add_form.update()\n+        data = {\n+            "title": "First test rule",\n+            "description": "First rule added in the testing setup",\n+            "event": ICommentAddedEvent,\n+            "enabled": True,\n+            "stop": False,\n+            "cascading": False,\n+        }\n+        rule = add_form.form_instance.create(data)\n+        rules.add(rule)\n+        edit_form = getMultiAdapter((rule, self.request), name="manage-elements")\n+        edit_form.authorize = lambda: True\n+        edit_form.globally_assign()\n+        data = {\n+            "title": "Second test rule",\n+            "description": "Second rule added in the testing setup",\n+            "event": ICommentAddedEvent,\n+            "enabled": True,\n+            "stop": False,\n+            "cascading": False,\n+        }\n+        rule = add_form.form_instance.create(data)\n+        rules.add(rule)\n+        edit_form = getMultiAdapter((rule, self.request), name="manage-elements")\n+        edit_form.authorize = lambda: True\n+        edit_form.globally_assign()\n+\n+        # Create a folder for copy and move actions\n+        self.portal.invokeFactory("Folder", id="folder")\n+\n+        transaction.commit()\n+\n+    def tearDown(self):\n+        super().tearDown()\n+\n+    # Tests for the object rules\n+\n+    def test_rules_add(self):\n+        # Assign a rule\n+        url = "/@content-rules/rule-1"\n+        response = self.api_session.post(url)\n+        save_request_and_response_for_docs("rules_add", response)\n+\n+    def test_rules_get(self):\n+        # Get assigned rules\n+        url = "/@content-rules/rule-1"\n+        self.api_session.post(url)\n+        url = "/@content-rules"\n+        response = self.api_session.get(url)\n+        save_request_and_response_for_docs("rules_get", response)\n+\n+    def test_rules_delete(self):\n+        # Unassign a rule\n+        url = "/@content-rules/rule-1"\n+        self.api_session.post(url)\n+        payload = {"rule_ids": ["rule-1"]}\n+        url = "/@content-rules"\n+        response = self.api_session.delete(url, json=payload)\n+        save_request_and_response_for_docs("rules_delete", response)\n+\n+    def test_rules_move_up(self):\n+        # Move a rule up in the order\n+        url = "/@content-rules/rule-1"\n+        self.api_session.post(url)\n+        url = "/@content-rules/rule-2"\n+        self.api_session.post(url)\n+        url = "/@content-rules"\n+        payload = {"operation": "move_up", "rule_id": "rule-2"}\n+        response = self.api_session.patch(url, json=payload)\n+        save_request_and_response_for_docs("rules_move_up", response)\n+\n+    def test_rules_move_down(self):\n+        # Move a rule down in the order\n+        url = "/@content-rules/rule-1"\n+        self.api_session.post(url)\n+        url = "/@content-rules/rule-2"\n+        self.api_session.post(url)\n+        url = "/@content-rules"\n+        payload = {"operation": "move_down", "rule_id": "rule-1"}\n+        response = self.api_session.patch(url, json=payload)\n+        save_request_and_response_for_docs("rules_move_down", response)\n+\n+    def test_rules_enable(self):\n+        # Enable some rules\n+        url = "/@content-rules"\n+        self.api_session.post(url)\n+        payload = {"form.button.Enable": True, "rule_ids": ["rule-1", "rule-2"]}\n+        response = self.api_session.patch(url, json=payload)\n+        save_request_and_response_for_docs("rules_enable", response)\n+\n+    def test_rules_disable(self):\n+        # Disable some assigned rules\n+        url = "/@content-rules"\n+        self.api_session.post(url)\n+        payload = {"form.button.Disable": True, "rule_ids": ["rule-1", "rule-2"]}\n+        response = self.api_session.patch(url, json=payload)\n+        save_request_and_response_for_docs("rules_disable", response)\n+\n+    def test_rules_apply_subfolders(self):\n+        # Enable apply on subfolders\n+        url = "/@content-rules"\n+        self.api_session.post(url)\n+        payload = {"form.button.Bubble": True, "rule_ids": ["rule-1", "rule-2"]}\n+        response = self.api_session.patch(url, json=payload)\n+        save_request_and_response_for_docs("rules_apply_subfolders", response)\n+\n+    def test_rules_disable_apply_subfolders(self):\n+        # Disable apply on subfolders\n+        url = "/@content-rules"\n+        self.api_session.post(url)\n+        payload = {"form.button.NoBubble": True, "rule_ids": ["rule-1", "rule-2"]}\n+        response = self.api_session.patch(url, json=payload)\n+        save_request_and_response_for_docs("rules_disable_apply_subfolders", response)\n+\n+    # Tests for the rules controlpanel\n+\n+    def test_controlpanels_get_rules(self):\n+        # Get rules defined in controlpanel\n+        url = "/@controlpanels/content-rules"\n+        response = self.api_session.get(url)\n+        save_request_and_response_for_docs("controlpanels_get_contentrules", response)\n+\n+    def test_controlpanels_crud_rules(self):\n+        # POST\n+        url = "/@controlpanels/content-rules"\n+        payload = {\n+            "title": "Third test rule",\n+            "description": "Third rule added in the testing setup",\n+            "event": "Comment added",\n+            "enabled": True,\n+            "stop": False,\n+            "cascading": False,\n+        }\n+        response = self.api_session.post(url, json=payload)\n+        save_request_and_response_for_docs("controlpanels_post_rule", response)\n+\n+        # Conditions\n+        url = "/@controlpanels/content-rules/rule-3/condition"\n+        payload = {\n+            "check_types": ["Collection", "Comment"],\n+            "type": "plone.conditions.PortalType",\n+        }\n+        response = self.api_session.post(url, json=payload)\n+        save_request_and_response_for_docs(\n+            "controlpanels_post_rule_condition_portaltype", response\n+        )\n+        payload = {"file_extension": "JPG", "type": "plone.conditions.FileExtension"}\n+        response = self.api_session.post(url, json=payload)\n+        save_request_and_response_for_docs(\n+            "controlpanels_post_rule_condition_fileextension", response\n+        )\n+        payload = {\n+            "wf_states": ["pending", "private"],\n+            "type": "plone.conditions.WorkflowState",\n+        }\n+        response = self.api_session.post(url, json=payload)\n+        save_request_and_response_for_docs(\n+            "controlpanels_post_rule_condition_workflowstate", response\n+        )\n+        payload = {\n+            "group_names": ["Administrators", "Site Administrators"],\n+            "type": "plone.conditions.Group",\n+        }\n+        response = self.api_session.post(url, json=payload)\n+        save_request_and_response_for_docs(\n+            "controlpanels_post_rule_condition_group", response\n+        )\n+        payload = {\n+            "role_names": ["Anonymous", "Authenticated"],\n+            "type": "plone.conditions.Role",\n+        }\n+        response = self.api_session.post(url, json=payload)\n+        save_request_and_response_for_docs(\n+            "controlpanels_post_rule_condition_role", response\n+        )\n+        payload = {\n+            "tales_expression": "<tal:block content=\'string:\' />",\n+            "type": "plone.conditions.TalesExpression",\n+        }\n+        response = self.api_session.post(url, json=payload)\n+        save_request_and_response_for_docs(\n+            "controlpanels_post_rule_condition_tales", response\n+        )\n+\n+        # Actions\n+        url = "/@controlpanels/content-rules/rule-3/action"\n+        payload = {\n+            "targetLogger": "Plone",\n+            "Level": "20",\n+            "message": "text_contentrules_logger_message",\n+            "type": "plone.actions.Logger",\n+        }\n+        response = self.api_session.post(url, json=payload)\n+        save_request_and_response_for_docs(\n+            "controlpanels_post_rule_action_logger", response\n+        )\n+        payload = {\n+            "message": "Information",\n+            "message_type": "info",\n+            "type": "plone.actions.Notify",\n+        }\n+        response = self.api_session.post(url, json=payload)\n+        save_request_and_response_for_docs(\n+            "controlpanels_post_rule_action_notify", response\n+        )\n+        uuid = IUUID(self.portal.folder)\n+        payload = {"target_folder": uuid, "type": "plone.actions.Copy"}\n+        response = self.api_session.post(url, json=payload)\n+        save_request_and_response_for_docs(\n+            "controlpanels_post_rule_action_copy", response\n+        )\n+        payload = {"target_folder": uuid, "type": "plone.actions.Move"}\n+        response = self.api_session.post(url, json=payload)\n+        save_request_and_response_for_docs(\n+            "controlpanels_post_rule_action_move", response\n+        )\n+        payload = {"type": "plone.actions.Delete"}\n+        response = self.api_session.post(url, json=payload)\n+        save_request_and_response_for_docs(\n+            "controlpanels_post_rule_action_delete", response\n+        )\n+        payload = {"transition": "hide", "type": "plone.actions.Workflow"}\n+        response = self.api_session.post(url, json=payload)\n+        save_request_and_response_for_docs(\n+            "controlpanels_post_rule_action_transition", response\n+        )\n+        payload = {\n+            "subject": "Email Subject",\n+            "source": "noreply@something.com",\n+            "recipients": "test@somethingelse.com",\n+            "exclude_actor": True,\n+            "message": "And the message body",\n+            "type": "plone.actions.Mail",\n+        }\n+        response = self.api_session.post(url, json=payload)\n+        save_request_and_response_for_docs(\n+            "controlpanels_post_rule_action_mail", response\n+        )\n+        payload = {"comment": "Some comment", "type": "plone.actions.Versioning"}\n+        response = self.api_session.post(url, json=payload)\n+        save_request_and_response_for_docs(\n+            "controlpanels_post_rule_action_versioning", response\n+        )\n+\n+        # GET\n+        url = "/@controlpanels/content-rules/rule-3"\n+        response = self.api_session.get(url)\n+        save_request_and_response_for_docs("controlpanels_get_rule", response)\n+\n+        # get condition\n+        url = "/@controlpanels/content-rules/rule-3/condition/0"\n+        response = self.api_session.get(url)\n+        save_request_and_response_for_docs(\n+            "controlpanels_get_rule_condition_portaltype", response\n+        )\n+        url = "/@controlpanels/content-rules/rule-3/condition/1"\n+        response = self.api_session.get(url)\n+        save_request_and_response_for_docs(\n+            "controlpanels_get_rule_condition_fileextension", response\n+        )\n+        url = "/@controlpanels/content-rules/rule-3/condition/2"\n+        response = self.api_session.get(url)\n+        save_request_and_response_for_docs(\n+            "controlpanels_get_rule_condition_workflowstate", response\n+        )\n+        url = "/@controlpanels/content-rules/rule-3/condition/3"\n+        response = self.api_session.get(url)\n+        save_request_and_response_for_docs(\n+            "controlpanels_get_rule_condition_group", response\n+        )\n+        url = "/@controlpanels/content-rules/rule-3/condition/4"\n+        response = self.api_session.get(url)\n+        save_request_and_response_for_docs(\n+            "controlpanels_get_rule_condition_role", response\n+        )\n+        url = "/@controlpanels/content-rules/rule-3/condition/5"\n+        response = self.api_session.get(url)\n+        save_request_and_response_for_docs(\n+            "controlpanels_get_rule_condition_tales", response\n+        )\n+\n+        # get action\n+\n+        url = "/@controlpanels/content-rules/rule-3/action/0"\n+        response = self.api_session.get(url)\n+        save_request_and_response_for_docs(\n+            "controlpanels_get_rule_action_logger", response\n+        )\n+        url = "/@controlpanels/content-rules/rule-3/action/1"\n+        response = self.api_session.get(url)\n+        save_request_and_response_for_docs(\n+            "controlpanels_get_rule_action_notify", response\n+        )\n+        url = "/@controlpanels/content-rules/rule-3/action/2"\n+        response = self.api_session.get(url)\n+        save_request_and_response_for_docs(\n+            "controlpanels_get_rule_action_copy", response\n+        )\n+        url = "/@controlpanels/content-rules/rule-3/action/3"\n+        response = self.api_session.get(url)\n+        save_request_and_response_for_docs(\n+            "controlpanels_get_rule_action_move", response\n+        )\n+\n+        # delete action doesn\'t have any values to get\n+\n+        url = "/@controlpanels/content-rules/rule-3/action/5"\n+        response = self.api_session.get(url)\n+        save_request_and_response_for_docs(\n+            "controlpanels_get_rule_action_transition", response\n+        )\n+        url = "/@controlpanels/content-rules/rule-3/action/6"\n+        response = self.api_session.get(url)\n+        save_request_and_response_for_docs(\n+            "controlpanels_get_rule_action_mail", response\n+        )\n+        url = "/@controlpanels/content-rules/rule-3/action/7"\n+        response = self.api_session.get(url)\n+        save_request_and_response_for_docs(\n+            "controlpanels_get_rule_action_versioning", response\n+        )\n+\n+        # PATCH\n+        url = "/@controlpanels/content-rules/rule-3"\n+        payload = {\n+            "title": "Third test rule (modified)",\n+            "description": "Third rule added in the testing setup (modified)",\n+            "event": "Comment removed",\n+            "enabled": False,\n+            "stop": True,\n+            "cascading": True,\n+        }\n+        response = self.api_session.patch(url, json=payload)\n+        save_request_and_response_for_docs("controlpanels_patch_rule", response)\n+\n+        # Conditions\n+        url = "/@controlpanels/content-rules/rule-3/condition/0"\n+        payload = {\n+            "check_types": ["Collection"],\n+        }\n+        response = self.api_session.patch(url, json=payload)\n+        save_request_and_response_for_docs(\n+            "controlpanels_patch_rule_condition_portaltype", response\n+        )\n+\n+        # move\n+        # down\n+        url = "/@controlpanels/content-rules/rule-3/condition/0"\n+        payload = {\n+            "form.button.Move": "_move_down",\n+        }\n+        response = self.api_session.patch(url, json=payload)\n+        save_request_and_response_for_docs(\n+            "controlpanels_patch_rule_condition_move_down", response\n+        )\n+        # up\n+        url = "/@controlpanels/content-rules/rule-3/condition/1"\n+        payload = {\n+            "form.button.Move": "_move_up",\n+        }\n+        response = self.api_session.patch(url, json=payload)\n+        save_request_and_response_for_docs(\n+            "controlpanels_patch_rule_condition_move_up", response\n+        )\n+        # Actions\n+        url = "/@controlpanels/content-rules/rule-3/action/0"\n+        payload = {\n+            "targetLogger": "Plone6",\n+            "Level": "20",\n+            "message": "text_contentrules_logger_message",\n+        }\n+        response = self.api_session.patch(url, json=payload)\n+        save_request_and_response_for_docs(\n+            "controlpanels_patch_rule_action_logger", response\n+        )\n+        # move\n+        # down\n+        url = "/@controlpanels/content-rules/rule-3/action/0"\n+        payload = {\n+            "form.button.Move": "_move_down",\n+        }\n+        response = self.api_session.patch(url, json=payload)\n+        save_request_and_response_for_docs(\n+            "controlpanels_patch_rule_action_move_down", response\n+        )\n+        # up\n+        url = "/@controlpanels/content-rules/rule-3/action/1"\n+        payload = {\n+            "form.button.Move": "_move_up",\n+        }\n+        response = self.api_session.patch(url, json=payload)\n+        save_request_and_response_for_docs(\n+            "controlpanels_patch_rule_action_move_up", response\n+        )\n+\n+        # DELETE\n+        url = "/@controlpanels/content-rules/rule-3/condition/0"\n+        response = self.api_session.delete(url)\n+        save_request_and_response_for_docs(\n+            "controlpanels_delete_rule_condition", response\n+        )\n+\n+        url = "/@controlpanels/content-rules/rule-3/action/0"\n+        response = self.api_session.delete(url)\n+        save_request_and_response_for_docs(\n+            "controlpanels_delete_action_condition", response\n+        )\n+\n+        url = "/@controlpanels/content-rules/rule-3"\n+        response = self.api_session.delete(url)\n+        save_request_and_response_for_docs("controlpanels_delete_rule", response)\n'

