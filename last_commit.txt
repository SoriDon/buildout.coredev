Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-12-21T13:16:44+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/da74cdb0a0f476c65ef5f6d4dbe598fbf0b3aa0e

Add full support for fullobjects support for AT content types

Files changed:
M CHANGES.rst
M src/plone/restapi/serializer/atcollection.py
M src/plone/restapi/serializer/atcontent.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/test_content_get.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex e9c4b020..3a281af3 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,6 +4,11 @@ Changelog\n 3.5.1 (unreleased)\n ------------------\n \n+New Features:\n+\n+- Add full support for `fullobjects` support for AT content types.\n+  [sneridagh]\n+\n Bugfixes:\n \n - Standardize errors data structure of email-notification endpoint.\ndiff --git a/src/plone/restapi/serializer/atcollection.py b/src/plone/restapi/serializer/atcollection.py\nindex a7eb2e99..0540cac1 100644\n--- a/src/plone/restapi/serializer/atcollection.py\n+++ b/src/plone/restapi/serializer/atcollection.py\n@@ -14,7 +14,7 @@\n @adapter(ICollection, Interface)\n class SerializeCollectionToJson(SerializeToJson):\n \n-    def __call__(self, version=None):\n+    def __call__(self, version=None, include_items=True):\n         collection_metadata = super(\n             SerializeCollectionToJson, self).__call__(version=version)\n         results = self.context.results(batch=False)\ndiff --git a/src/plone/restapi/serializer/atcontent.py b/src/plone/restapi/serializer/atcontent.py\nindex 92219877..b493d9c0 100644\n--- a/src/plone/restapi/serializer/atcontent.py\n+++ b/src/plone/restapi/serializer/atcontent.py\n@@ -111,10 +111,17 @@ def __call__(self, version=None, include_items=True):\n             if batch.links:\n                 result[\'batching\'] = batch.links\n \n-            result[\'items\'] = [\n-                getMultiAdapter(\n-                    (brain, self.request), ISerializeToJsonSummary\n-                )()\n-                for brain in batch\n-            ]\n+            if \'fullobjects\' in list(self.request.form):\n+                result[\'items\'] = getMultiAdapter(\n+                    (brains, self.request),\n+                    ISerializeToJson\n+                )(fullobjects=True)[\'items\']\n+            else:\n+                result[\'items\'] = [\n+                    getMultiAdapter(\n+                        (brain, self.request),\n+                        ISerializeToJsonSummary\n+                    )()\n+                    for brain in batch\n+                ]\n         return result\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 4786c426..f2c0780e 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -284,6 +284,8 @@ def setUpZope(self, app, configurationContext):\n             z2.installProduct(app, \'plone.restapi\')\n \n         def setUpPloneSite(self, portal):\n+            portal.acl_users.userFolderAddUser(\n+                SITE_OWNER_NAME, SITE_OWNER_PASSWORD, [\'Manager\'], [])\n             set_supported_languages(portal)\n \n             if portal.portal_setup.profileExists(\ndiff --git a/src/plone/restapi/tests/test_content_get.py b/src/plone/restapi/tests/test_content_get.py\nindex 0a21824e..6dbc0802 100644\n--- a/src/plone/restapi/tests/test_content_get.py\n+++ b/src/plone/restapi/tests/test_content_get.py\n@@ -6,6 +6,7 @@\n from plone.app.testing import login\n from plone.app.testing import setRoles\n from plone.app.textfield.value import RichTextValue\n+from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from z3c.relationfield import RelationValue\n from zope.component import getUtility\n@@ -163,3 +164,107 @@ def test_get_content_includes_related_items(self):\n             }],\n             response.json()[\'relatedItems\']\n         )\n+\n+\n+class TestContentATGet(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        login(self.portal, SITE_OWNER_NAME)\n+        self.portal.invokeFactory(\n+            \'Folder\',\n+            id=\'folder1\',\n+            title=\'My Folder\'\n+        )\n+        self.portal.folder1.invokeFactory(\n+            \'Document\',\n+            id=\'doc1\',\n+            title=\'My Document\'\n+        )\n+        self.portal.folder1.doc1.setText(u"Lorem ipsum.")\n+        self.portal.folder1.invokeFactory(\n+            \'Folder\',\n+            id=\'folder2\',\n+            title=\'My Folder 2\'\n+        )\n+        self.portal.folder1.folder2.invokeFactory(\n+            \'Document\',\n+            id=\'doc2\',\n+            title=\'My Document 2\'\n+        )\n+        self.portal.folder1.invokeFactory(\n+            \'Collection\',\n+            id=\'collection\',\n+            title=\'My collection\'\n+        )\n+        wftool = getToolByName(self.portal, \'portal_workflow\')\n+        wftool.doActionFor(self.portal.folder1, \'publish\')\n+        wftool.doActionFor(self.portal.folder1.doc1, \'publish\')\n+        wftool.doActionFor(self.portal.folder1.folder2, \'publish\')\n+        wftool.doActionFor(self.portal.folder1.folder2.doc2, \'publish\')\n+        transaction.commit()\n+\n+    def test_get_content_returns_fullobjects(self):\n+        response = requests.get(\n+            self.portal.folder1.absolute_url() + \'?fullobjects\',\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(3, len(response.json()[\'items\']))\n+        self.assertTrue(\n+            \'title\' in list(response.json()[\'items\'][0])\n+        )\n+        self.assertTrue(\n+            \'description\' in list(response.json()[\'items\'][0])\n+        )\n+        self.assertTrue(\n+            \'text\' in list(response.json()[\'items\'][0])\n+        )\n+        self.assertEqual(\n+            {\n+                u\'data\': u\'<p>Lorem ipsum.</p>\',\n+                u\'content-type\': u\'text/html\',\n+            },\n+            response.json()[\'items\'][0].get(\'text\')\n+        )\n+\n+        # make sure the single document response is the same as the items\n+        response_doc = requests.get(\n+            self.portal.folder1.doc1.absolute_url(),\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+        self.assertEqual(\n+            response.json()[\'items\'][0],\n+            response_doc.json()\n+        )\n+\n+    def test_get_content_returns_fullobjects_correct_id(self):\n+        response = requests.get(\n+            self.portal.folder1.absolute_url() + \'?fullobjects\',\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(3, len(response.json()[\'items\']))\n+        self.assertEqual(response.json()[\'items\'][1][\'@id\'],\n+                         self.portal_url + u\'/folder1/folder2\')\n+\n+    def test_get_content_returns_fullobjects_non_recursive(self):\n+        response = requests.get(\n+            self.portal.folder1.absolute_url() + \'?fullobjects\',\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(3, len(response.json()[\'items\']))\n+        self.assertTrue(\'items\' not in response.json()[\'items\'][1])\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2018-12-21T15:57:22+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/823c1826ed8baf9f1b46f180aad6c8cbdd53e41b

Fix Plone 5.2 tests

Files changed:
M src/plone/restapi/tests/test_content_get.py

b"diff --git a/src/plone/restapi/tests/test_content_get.py b/src/plone/restapi/tests/test_content_get.py\nindex 6dbc0802..9de0256f 100644\n--- a/src/plone/restapi/tests/test_content_get.py\n+++ b/src/plone/restapi/tests/test_content_get.py\n@@ -171,7 +171,6 @@ class TestContentATGet(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.app = self.layer['app']\n         self.portal = self.layer['portal']\n         self.portal_url = self.portal.absolute_url()\n         setRoles(self.portal, TEST_USER_ID, ['Member'])\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-03-13T19:09:58+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/6f3293c4a72ef5ca0312381deeeb60182997847b

Merge branch 'master' into add-full-fullobjects-support-to-AT

* master: (88 commits)
  Back to development: 3.7.5
  Preparing release 3.7.4
  Try to fix Plone 5.2 build
  Fix a problem on ZCML loading depending on how the policy package is named, related to the load of permissions in control panels and multilingual.
  Back to development: 3.7.4
  Preparing release 3.7.3
  Re-add import sys to setup.py.
  Back to development: 3.7.3
  Preparing release 3.7.2
  add changenote
  Refactor TUS upload to satisfy max complexity
  Fix TUS upload events
  Fix changelog manually...after release.
  Back to development: 3.7.2
  Preparing release 3.7.1
  use environment-markers instead of python-logic
  news fragment
  Apparently we need to install towncrier explicitly to get the script.
  Fix py3 buildout by pinning setuptools to 40.6.3.
  Install zestreleaser.towncrier in the base buildout.
  ...

Files changed:
A news/.gitkeep
A pyproject.toml
M .travis.yml
M CHANGES.rst
M MANIFEST.in
M README.rst
M base.cfg
M performance.jmx
M plone-4.3.x-performance.cfg
M plone-4.3.x.cfg
M plone-5.0.x-performance.cfg
M plone-5.0.x.cfg
M plone-5.1.x-performance.cfg
M plone-5.1.x.cfg
M plone-5.2.x.cfg
M requirements.txt
M setup.py
M src/plone/restapi/deserializer/site.py
M src/plone/restapi/serializer/group.py
M src/plone/restapi/serializer/site.py
M src/plone/restapi/services/content/tus.py
M src/plone/restapi/services/controlpanels/configure.zcml
M src/plone/restapi/services/email_notification/post.py
M src/plone/restapi/services/multilingual/configure.zcml
M src/plone/restapi/services/workflow/configure.zcml
M src/plone/restapi/services/workflow/info.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/http-examples/groups.resp
M src/plone/restapi/tests/http-examples/groups_created.resp
M src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp
M src/plone/restapi/tests/http-examples/groups_get.resp
M src/plone/restapi/tests/http-examples/jwt_logged_in.resp
M src/plone/restapi/tests/http-examples/principals.resp
M src/plone/restapi/tests/http-examples/registry_get_list.resp
M src/plone/restapi/tests/http-examples/siteroot.resp
M src/plone/restapi/tests/test_atcontent_deserializer.py
M src/plone/restapi/tests/test_batching.py
M src/plone/restapi/tests/test_copymove.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxcontent_deserializer.py
M src/plone/restapi/tests/test_error_handling.py
M src/plone/restapi/tests/test_expansion.py
M src/plone/restapi/tests/test_locking.py
M src/plone/restapi/tests/test_permissions.py
M src/plone/restapi/tests/test_registry.py
M src/plone/restapi/tests/test_roles.py
M src/plone/restapi/tests/test_search.py
M src/plone/restapi/tests/test_serializer.py
M src/plone/restapi/tests/test_services.py
M src/plone/restapi/tests/test_services_actions.py
M src/plone/restapi/tests/test_services_breadcrumbs.py
M src/plone/restapi/tests/test_services_comments.py
M src/plone/restapi/tests/test_services_content.py
M src/plone/restapi/tests/test_services_controlpanels.py
M src/plone/restapi/tests/test_services_email_notification.py
M src/plone/restapi/tests/test_services_email_send.py
M src/plone/restapi/tests/test_services_groups.py
M src/plone/restapi/tests/test_services_history.py
M src/plone/restapi/tests/test_services_navigation.py
M src/plone/restapi/tests/test_services_principals.py
M src/plone/restapi/tests/test_services_tiles.py
M src/plone/restapi/tests/test_services_types.py
M src/plone/restapi/tests/test_services_users.py
M src/plone/restapi/tests/test_services_vocabularies.py
M src/plone/restapi/tests/test_site_deserializer.py
M src/plone/restapi/tests/test_tus.py
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/tests/test_workflow.py
M src/plone/restapi/types/utils.py
M versions.cfg

b'diff --git a/.travis.yml b/.travis.yml\nindex ef01483a..1285c66b 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -2,6 +2,7 @@ language: python\n python:\n   - "2.7"\n   - "3.6"\n+  - "3.7"\n dist: xenial\n sudo: required\n services:\n@@ -27,9 +28,12 @@ matrix:\n     env: PLONE_VERSION=5.2.x\n   - python: "3.6"\n     env: PLONE_VERSION=5.2.x\n+  - python: "3.7"\n+    env: PLONE_VERSION=5.2.x\n   exclude:\n   - python: "2.7"\n   - python: "3.6"\n+  - python: "3.7"\n before_install:\n   - mkdir -p $HOME/buildout-cache/{eggs,downloads}\n   - mkdir $HOME/.buildout\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 3a281af3..dcc5b914 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,7 +1,84 @@\n Changelog\n =========\n \n-3.5.1 (unreleased)\n+.. You should *NOT* be adding new change log entries to this file.\n+   You should create a file in the news directory instead.\n+   For helpful instructions, please see:\n+   https://github.com/plone/plone.releaser/blob/master/ADD-A-NEWS-ITEM.rst\n+\n+.. towncrier release notes start\n+\n+3.7.4 (2019-03-13)\n+------------------\n+\n+Bug fixes:\n+\n+- Fix a problem on ZCML loading depending on how the policy package is named,\n+  related to the load of permissions in control panels and multilingual.\n+  [sneridagh] (#526)\n+\n+\n+3.7.3 (2019-03-08)\n+------------------\n+\n+Bug fixes:\n+\n+- Use environment-markers instead of python-logic to specify dependencies for py2.\n+  [pbauer] (#688)\n+\n+\n+3.7.2 (2019-03-07)\n+------------------\n+\n+Bug fixes:\n+\n+- Fix TUS upload events `#689 <https://github.com/plone/plone.restapi/issues/689>`_.\n+  [buchi] (#689)\n+\n+\n+3.7.1 (2019-03-06)\n+------------------\n+\n+Bugfixes:\n+\n+- Fix release to not create universal (Python 2/3) wheels.\n+  [gforcada]\n+\n+- Install zestreleaser.towncrier in the buildout to the changelog is updated correctly. (#684)\n+  [maurits]\n+\n+\n+3.7.0 (2019-03-04)\n+------------------\n+\n+New Features:\n+\n+- Add group roles to @groups serializer\n+  [sneridagh]\n+\n+\n+3.6.0 (2019-02-16)\n+------------------\n+\n+New Features:\n+\n+- Enhance site root to serialize and deserialize \'tiles\' and \'tiles_layout\' attributes.\n+  [sneridagh]\n+\n+- Fix @workflow endpoint on site root to return an empty object instead of a 404.\n+  [sneridagh]\n+\n+\n+3.5.2 (2019-02-14)\n+------------------\n+\n+Bugfixes:\n+\n+- Fix serializing the Event type. This fixes https://github.com/plone/plone.restapi/issues/664.\n+  [davisagli, elioschmutz]\n+\n+\n+3.5.1 (2019-02-05)\n ------------------\n \n New Features:\n@@ -11,8 +88,9 @@ New Features:\n \n Bugfixes:\n \n-- Standardize errors data structure of email-notification endpoint.\n-  [cekk]\n+- Do not fail on serializing types with fields having non-parametrized widgets.\n+  Fixes issue `664 <https://github.com/plone/plone.restapi/issues/664>`_.\n+  [elioschmutz]\n \n \n 3.5.0 (2018-11-06)\ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex 49ee44d6..19c0b7e9 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -13,3 +13,6 @@ exclude Dockerfile\n exclude Makefile\n exclude bootstrap-buildout.py\n global-exclude *.pyc\n+include pyproject.toml\n+recursive-exclude news *\n+exclude news\ndiff --git a/README.rst b/README.rst\nindex 191924da..dd7af9ad 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -8,7 +8,7 @@\n    :target: https://landscape.io/github/plone/plone.restapi/master\n    :alt: Code Health\n \n-.. image:: https://readthedocs.org/projects/pip/badge/\n+.. image:: https://readthedocs.org/projects/pip/badge\n   :target: https://plonerestapi.readthedocs.org\n \n .. image:: https://img.shields.io/pypi/v/plone.restapi.svg\n@@ -36,11 +36,11 @@ http://plonedemo.kitconcept.com\n \n Example GET request on the portal root::\n \n-  $ curl -i http://plonedemo.kitconcept.com -H "Accept: application/json"\n+  $ curl -i https://plonedemo.kitconcept.com -H "Accept: application/json"\n \n Example POST request to create a new document::\n \n-  $ curl -i -X POST http://plonedemo.kitconcept.com -H "Accept: application/json" -H "Content-Type: application/json" --data-raw \'{"@type": "Document", "title": "My Document"}\' --user admin:admin\n+  $ curl -i -X POST https://plonedemo.kitconcept.com -H "Accept: application/json" -H "Content-Type: application/json" --data-raw \'{"@type": "Document", "title": "My Document"}\' --user admin:admin\n \n .. note:: You will need some kind of API browser application to explore the API. We recommend using `Postman <http://www.getpostman.com/>`_.\n \n@@ -66,7 +66,7 @@ Contribute\n \n - Issue Tracker: https://github.com/plone/plone.restapi/issues\n - Source Code: https://github.com/plone/plone.restapi\n-- Documentation: https://plonerestapi.readthedocs.io/en/latest/\n+- Documentation: https://plonerestapi.readthedocs.io/en/latest\n \n \n Examples\n@@ -75,19 +75,20 @@ Examples\n plone.restapi is used in production since the first alpha release.\n It can be seen in action at the following sites:\n \n-- Zeelandia.de: https://www.zeelandia.de/ (by kitconcept GmbH)\n-- VHS-Ehrenamtsportal: https://vhs-ehrenamtsportal.de/ (by kitconcept GmbH)\n-\n+- Zeelandia GmbH & Co. KG: https://www.zeelandia.de (by kitconcept GmbH)\n+- VHS-Ehrenamtsportal: https://vhs-ehrenamtsportal.de (by kitconcept GmbH)\n+- German Physical Society: https://www.dpg-physik.de (by kitconcept GmbH)\n+- Universitat Polit\xc3\xa8cnica de Catalunya: https://www.upc.edu (by kitconcept GmbH)\n \n Support\n =======\n \n If you are having issues, please let us know via the issue tracker.\n \n-If you required professional support, here is a list of Plone solution providers that contributed to plone.restapi:\n+If you required professional support, here is a list of Plone solution providers that contributed significantly to plone.restapi in the past:\n \n - kitconcept GmbH (Germany) https://kitconcept.com\n-- 4teamwork (Switzerland) https://www.4teamwork.ch/\n+- 4teamwork (Switzerland) https://www.4teamwork.ch\n - CodeSyntax (Spain) https://www.codesyntax.com/en\n \n \ndiff --git a/base.cfg b/base.cfg\nindex 204f586f..c75383a8 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -120,6 +120,8 @@ scripts = dependencychecker\n recipe = zc.recipe.egg\n eggs =\n     zest.releaser[recommended]\n+    zestreleaser.towncrier\n+    towncrier\n     readme\n     docutils\n \ndiff --git a/news/.gitkeep b/news/.gitkeep\nnew file mode 100644\nindex 00000000..e69de29b\ndiff --git a/performance.jmx b/performance.jmx\nindex ba8836f0..da5e981d 100644\n--- a/performance.jmx\n+++ b/performance.jmx\n@@ -1,5 +1,5 @@\n <?xml version="1.0" encoding="UTF-8"?>\n-<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n+<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">\n   <hashTree>\n     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="plone.restapi" enabled="true">\n       <stringProp name="TestPlan.comments"></stringProp>\n@@ -118,7 +118,7 @@\n \t&quot;@type&quot;: &quot;News Item&quot;, &#xd;\n \t&quot;title&quot;: &quot;My News Item&quot;,&#xd;\n \t&quot;image&quot;: {&#xd;\n-\t\t&quot;data&quot;: &quot;TG9yZW0gSXBzdW0uCg==&quot;,&#xd;\n+\t\t&quot;data&quot;: &quot;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&quot;,&#xd;\n \t\t&quot;encoding&quot;: &quot;base64&quot;,&#xd;\n \t\t&quot;filename&quot;: &quot;lorem.png&quot;,&#xd;\n \t\t&quot;content-type&quot;: &quot;image/png&quot;&#xd;\n@@ -279,7 +279,7 @@\n \t&quot;@type&quot;: &quot;Image&quot;, &#xd;\n \t&quot;title&quot;: &quot;My Image&quot;, &#xd;\n \t&quot;image&quot;: {&#xd;\n-\t\t&quot;data&quot;: &quot;TG9yZW0gSXBzdW0uCg==&quot;,&#xd;\n+\t\t&quot;data&quot;:&quot;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&quot;,&#xd;\n \t\t&quot;encoding&quot;: &quot;base64&quot;,&#xd;\n \t\t&quot;filename&quot;: &quot;lorem.png&quot;,&#xd;\n \t\t&quot;content-type&quot;: &quot;image/png&quot;&#xd;\n@@ -1372,9 +1372,5 @@\n         <hashTree/>\n       </hashTree>\n     </hashTree>\n-    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n-      <boolProp name="WorkBench.save">true</boolProp>\n-    </WorkBench>\n-    <hashTree/>\n   </hashTree>\n </jmeterTestPlan>\ndiff --git a/plone-4.3.x-performance.cfg b/plone-4.3.x-performance.cfg\nindex f6041153..23bce7b0 100644\n--- a/plone-4.3.x-performance.cfg\n+++ b/plone-4.3.x-performance.cfg\n@@ -1,6 +1,5 @@\n [buildout]\n-extends =\n-    plone-4.3.x.cfg\n+extends = plone-4.3.x.cfg\n parts += instance plonesite\n \n [instance]\ndiff --git a/plone-4.3.x.cfg b/plone-4.3.x.cfg\nindex fb06130a..7d6dd445 100644\n--- a/plone-4.3.x.cfg\n+++ b/plone-4.3.x.cfg\n@@ -6,4 +6,5 @@ extends =\n \n [versions]\n pytz = 2017.3\n+six = 1.11.0\n zope.interface = 4.1.0\ndiff --git a/plone-5.0.x-performance.cfg b/plone-5.0.x-performance.cfg\nindex 2cb2b8da..3cccb0fd 100644\n--- a/plone-5.0.x-performance.cfg\n+++ b/plone-5.0.x-performance.cfg\n@@ -1,6 +1,5 @@\n [buildout]\n-extends =\n-    plone-5.0.x.cfg\n+extends = plone-5.0.x.cfg\n parts += instance plonesite\n \n [instance]\ndiff --git a/plone-5.0.x.cfg b/plone-5.0.x.cfg\nindex 40b7613c..bc3c0932 100644\n--- a/plone-5.0.x.cfg\n+++ b/plone-5.0.x.cfg\n@@ -1,7 +1,7 @@\n [buildout]\n extends =\n     base.cfg\n-    http://dist.plone.org/release/5.0.8/versions.cfg\n+    http://dist.plone.org/release/5.0.10/versions.cfg\n     versions.cfg\n \n [versions]\ndiff --git a/plone-5.1.x-performance.cfg b/plone-5.1.x-performance.cfg\nindex ecbb9001..74e57fa5 100644\n--- a/plone-5.1.x-performance.cfg\n+++ b/plone-5.1.x-performance.cfg\n@@ -1,6 +1,5 @@\n [buildout]\n-extends =\n-    plone-5.1.x.cfg\n+extends = plone-5.1.x.cfg\n parts += instance plonesite\n \n [instance]\ndiff --git a/plone-5.1.x.cfg b/plone-5.1.x.cfg\nindex e716cb72..2fde6418 100644\n--- a/plone-5.1.x.cfg\n+++ b/plone-5.1.x.cfg\n@@ -1,5 +1,5 @@\n [buildout]\n extends =\n     base.cfg\n-    http://dist.plone.org/release/5.1.4/versions.cfg\n+    http://dist.plone.org/release/5.1.5/versions.cfg\n     versions.cfg\ndiff --git a/plone-5.2.x.cfg b/plone-5.2.x.cfg\nindex 7bb8c972..622ec121 100644\n--- a/plone-5.2.x.cfg\n+++ b/plone-5.2.x.cfg\n@@ -1,7 +1,7 @@\n [buildout]\n extends =\n     base.cfg\n-    http://dist.plone.org/release/5.2a1/versions.cfg\n+    http://dist.plone.org/release/5.2a2/versions.cfg\n find-links += http://dist.plone.org/thirdparty/\n versions=versions\n \ndiff --git a/pyproject.toml b/pyproject.toml\nnew file mode 100644\nindex 00000000..05b615de\n--- /dev/null\n+++ b/pyproject.toml\n@@ -0,0 +1,20 @@\n+[tool.towncrier]\n+filename = "CHANGES.rst"\n+directory = "news/"\n+title_format = "{version} ({project_date})"\n+underlines = ["-", ""]\n+\n+[[tool.towncrier.type]]\n+directory = "breaking"\n+name = "Breaking changes:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "feature"\n+name = "New features:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "bugfix"\n+name = "Bug fixes:"\n+showcontent = true\ndiff --git a/requirements.txt b/requirements.txt\nindex afc1b14d..ad0b8d39 100644\n--- a/requirements.txt\n+++ b/requirements.txt\n@@ -1,3 +1,3 @@\n # https://github.com/plone/buildout.coredev/blob/5.2/requirements.txt\n-setuptools==40.4.3\n+setuptools==40.6.3\n zc.buildout==2.12.2\ndiff --git a/setup.py b/setup.py\nindex a3d33318..2fd61d14 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n \n import sys\n \n-version = \'3.5.1-dev.0\'\n+version = \'3.7.5.dev0\'\n \n long_description = (\n     open(\'README.rst\').read() + \'\\n\' +\n@@ -22,21 +22,14 @@\n     \'freezegun\',\n     \'plone.tiles\',\n     \'mock\',\n+    \'archetypes.schemaextender ; python_version<"3"\',\n+    \'Products.Archetypes ; python_version<"3"\',\n+    \'Products.contentmigration ; python_version<"3"\',\n+    \'Products.ATContentTypes ; python_version<"3"\',\n+    \'plone.app.blob ; python_version<"3"\',\n+    \'plone.app.collection ; python_version<"3"\',\n ]\n \n-PY2_ONLY = [\n-    \'archetypes.schemaextender\',\n-    \'Products.Archetypes\',\n-    \'Products.contentmigration\',\n-    \'Products.ATContentTypes\',\n-    \'plone.app.blob\',\n-    \'plone.app.collection\',\n-]\n-\n-if sys.version_info[0] == 2:\n-    TEST_REQUIRES += PY2_ONLY\n-\n-\n setup(name=\'plone.restapi\',\n       version=version,\n       description="plone.restapi is a RESTful hypermedia API for Plone.",\n@@ -77,6 +70,7 @@\n           \'plone.schema >= 1.2.0\',  # new json field\n           \'PyJWT\',\n           \'pytz\',\n+          \'plone.app.controlpanel\'  # to remove in Plone 6.\n       ],\n       extras_require={\'test\': TEST_REQUIRES},\n       entry_points="""\ndiff --git a/src/plone/restapi/deserializer/site.py b/src/plone/restapi/deserializer/site.py\nindex 7b749383..949fd630 100644\n--- a/src/plone/restapi/deserializer/site.py\n+++ b/src/plone/restapi/deserializer/site.py\n@@ -8,6 +8,8 @@\n from plone.restapi.deserializer.mixins import OrderingMixin\n from zope.publisher.interfaces import IRequest\n \n+import json\n+\n \n @implementer(IDeserializeFromJson)\n @adapter(IPloneSiteRoot, IRequest)\n@@ -33,4 +35,23 @@ def __call__(self, validate_all=False):\n             data[\'ordering\'][\'subset_ids\'] = self.context.contentIds()\n         self.handle_ordering(data)\n \n+        # Volto Tiles on the Plone Site root faker\n+        if \'tiles\' in data:\n+            if not getattr(self.context, \'tiles\', False):\n+                self.context.manage_addProperty(\'tiles\', json.dumps(data[\'tiles\']), \'string\') # noqa\n+            else:\n+                self.context.manage_changeProperties(tiles=json.dumps(data[\'tiles\'])) # noqa\n+\n+        if \'tiles_layout\' in data:\n+            if not getattr(self.context, \'tiles_layout\', False):\n+                self.context.manage_addProperty(\'tiles_layout\', json.dumps(data[\'tiles_layout\']), \'string\') # noqa\n+            else:\n+                self.context.manage_changeProperties(tiles_layout=json.dumps(data[\'tiles_layout\'])) # noqa\n+\n+        if \'title\' in data:\n+            self.context.setTitle(data[\'title\'])\n+\n+        if \'description\' in data:\n+            self.context.manage_changeProperties(description=data[\'description\']) # noqa\n+\n         return self.context\ndiff --git a/src/plone/restapi/serializer/group.py b/src/plone/restapi/serializer/group.py\nindex ab60834f..a547787d 100644\n--- a/src/plone/restapi/serializer/group.py\n+++ b/src/plone/restapi/serializer/group.py\n@@ -28,6 +28,7 @@ def __call__(self):\n             \'email\': group.getProperty(\'email\'),\n             \'title\': group.getProperty(\'title\'),\n             \'description\': group.getProperty(\'description\'),\n+            \'roles\': group.getRoles(),\n         }\n \n \ndiff --git a/src/plone/restapi/serializer/site.py b/src/plone/restapi/serializer/site.py\nindex 9330ad27..41445a5c 100644\n--- a/src/plone/restapi/serializer/site.py\n+++ b/src/plone/restapi/serializer/site.py\n@@ -10,6 +10,8 @@\n from zope.interface import Interface\n from zope.interface import implementer\n \n+import json\n+\n \n @implementer(ISerializeToJson)\n @adapter(IPloneSiteRoot, Interface)\n@@ -44,7 +46,10 @@ def __call__(self, version=None):\n             \'@type\': \'Plone Site\',\n             \'title\': self.context.Title(),\n             \'parent\': {},\n-            \'is_folderish\': True\n+            \'is_folderish\': True,\n+            \'description\': self.context.description,\n+            \'tiles\': json.loads(getattr(self.context, \'tiles\', \'{}\')),\n+            \'tiles_layout\': json.loads(getattr(self.context, \'tiles_layout\', \'{}\')) # noqa\n         }\n \n         # Insert expandable elements\ndiff --git a/src/plone/restapi/services/content/tus.py b/src/plone/restapi/services/content/tus.py\nindex 49139a99..524e7c57 100644\n--- a/src/plone/restapi/services/content/tus.py\n+++ b/src/plone/restapi/services/content/tus.py\n@@ -1,7 +1,10 @@\n # -*- coding: utf-8 -*-\n+from Acquisition import aq_base\n+from Acquisition.interfaces import IAcquirer\n from AccessControl.SecurityManagement import getSecurityManager\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import base_hasattr\n+from Products.CMFPlone.utils import safe_hasattr\n from base64 import b64decode\n from email.utils import formatdate\n from fnmatch import fnmatch\n@@ -37,7 +40,7 @@ class UploadOptions(Service):\n \n     def reply(self):\n         for name, value in TUS_OPTIONS_RESPONSE_HEADERS.items():\n-                    self.request.response.setHeader(name, value)\n+            self.request.response.setHeader(name, value)\n         return super(UploadOptions, self).reply()\n \n \n@@ -217,62 +220,11 @@ def reply(self):\n         if hasattr(request_body, \'raw\'):  # Unwrap io.BufferedRandom\n             request_body = request_body.raw\n         tus_upload.write(request_body, offset)\n+        offset = tus_upload.offset()\n \n         if tus_upload.finished:\n-            offset = tus_upload.offset()\n-            filename = metadata.get(\'filename\', \'\')\n-            content_type = metadata.get(\'content-type\',\n-                                        \'application/octet-stream\')\n-            mode = metadata.get(\'mode\', \'create\')\n-            fieldname = metadata.get(\'fieldname\')\n-\n-            if mode == \'create\':\n-                type_ = metadata.get(\'@type\')\n-                if type_ is None:\n-                    ctr = getToolByName(self.context, \'content_type_registry\')\n-                    type_ = ctr.findTypeName(\n-                        filename.lower(), content_type, \'\') or \'File\'\n-\n-                obj = create(self.context, type_)\n-            else:\n-                obj = self.context\n-\n-            if not fieldname:\n-                info = IPrimaryFieldInfo(obj, None)\n-                if info is not None:\n-                    fieldname = info.fieldname\n-                elif base_hasattr(obj, \'getPrimaryField\'):\n-                    field = obj.getPrimaryField()\n-                    fieldname = field.getName()\n-\n-            if not fieldname:\n-                return self.error(\'Bad Request\', \'Fieldname required\', 400)\n-\n-            # Update field with file data\n-            deserializer = queryMultiAdapter(\n-                (obj, self.request), IDeserializeFromJson)\n-            if deserializer is None:\n-                return self.error(\n-                    \'Not Implemented\',\n-                    \'Cannot deserialize type {}\'.format(\n-                        obj.portal_type),\n-                    501)\n-            try:\n-                deserializer(data={fieldname: tus_upload})\n-            except DeserializationError as e:\n-                return self.error(\n-                    \'Deserialization Error\', str(e), 400)\n-\n-            if mode == \'create\':\n-                if not getattr(deserializer, \'notifies_create\', False):\n-                    notify(ObjectCreatedEvent(obj))\n-                obj = add(self.context, obj)\n-\n-            tus_upload.close()\n-            tus_upload.cleanup()\n-            self.request.response.setHeader(\'Location\', obj.absolute_url())\n+            self.create_or_modify_content(tus_upload)\n         else:\n-            offset = tus_upload.offset()\n             self.request.response.setHeader(\n                 \'Upload-Expires\', tus_upload.expires())\n \n@@ -281,6 +233,70 @@ def reply(self):\n         self.request.response.setStatus(204, lock=1)\n         return super(UploadPatch, self).reply()\n \n+    def create_or_modify_content(self, tus_upload):\n+        metadata = tus_upload.metadata()\n+        filename = metadata.get(\'filename\', \'\')\n+        content_type = metadata.get(\'content-type\',\n+                                    \'application/octet-stream\')\n+        mode = metadata.get(\'mode\', \'create\')\n+        fieldname = metadata.get(\'fieldname\')\n+\n+        if mode == \'create\':\n+            type_ = metadata.get(\'@type\')\n+            if type_ is None:\n+                ctr = getToolByName(self.context, \'content_type_registry\')\n+                type_ = ctr.findTypeName(\n+                    filename.lower(), content_type, \'\') or \'File\'\n+\n+            obj = create(self.context, type_)\n+        else:\n+            obj = self.context\n+\n+        if not fieldname:\n+            info = IPrimaryFieldInfo(obj, None)\n+            if info is not None:\n+                fieldname = info.fieldname\n+            elif base_hasattr(obj, \'getPrimaryField\'):\n+                field = obj.getPrimaryField()\n+                fieldname = field.getName()\n+\n+        if not fieldname:\n+            return self.error(\'Bad Request\', \'Fieldname required\', 400)\n+\n+        # Acquisition wrap temporarily for deserialization\n+        temporarily_wrapped = False\n+        if IAcquirer.providedBy(obj) and not safe_hasattr(obj, \'aq_base\'):\n+            obj = obj.__of__(self.context)\n+            temporarily_wrapped = True\n+\n+        # Update field with file data\n+        deserializer = queryMultiAdapter(\n+            (obj, self.request), IDeserializeFromJson)\n+        if deserializer is None:\n+            return self.error(\n+                \'Not Implemented\',\n+                \'Cannot deserialize type {}\'.format(\n+                    obj.portal_type),\n+                501)\n+        try:\n+            deserializer(\n+                data={fieldname: tus_upload}, create=mode == \'create\')\n+        except DeserializationError as e:\n+            return self.error(\n+                \'Deserialization Error\', str(e), 400)\n+\n+        if temporarily_wrapped:\n+            obj = aq_base(obj)\n+\n+        if mode == \'create\':\n+            if not getattr(deserializer, \'notifies_create\', False):\n+                notify(ObjectCreatedEvent(obj))\n+            obj = add(self.context, obj)\n+\n+        tus_upload.close()\n+        tus_upload.cleanup()\n+        self.request.response.setHeader(\'Location\', obj.absolute_url())\n+\n \n class TUSUpload(object):\n \ndiff --git a/src/plone/restapi/services/controlpanels/configure.zcml b/src/plone/restapi/services/controlpanels/configure.zcml\nindex cef57d10..de3fda6c 100644\n--- a/src/plone/restapi/services/controlpanels/configure.zcml\n+++ b/src/plone/restapi/services/controlpanels/configure.zcml\n@@ -2,6 +2,8 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:plone="http://namespaces.plone.org/plone">\n \n+  <include package="plone.app.controlpanel" file="permissions.zcml" />\n+\n   <plone:service\n     method="GET"\n     for="Products.CMFPlone.interfaces.IPloneSiteRoot"\ndiff --git a/src/plone/restapi/services/email_notification/post.py b/src/plone/restapi/services/email_notification/post.py\nindex 6c7681b9..3419e488 100644\n--- a/src/plone/restapi/services/email_notification/post.py\n+++ b/src/plone/restapi/services/email_notification/post.py\n@@ -1,8 +1,7 @@\n # -*- coding: utf-8 -*-\n-from plone.restapi.deserializer import json_body\n from plone.restapi.services import Service\n-from zExceptions import BadRequest\n from zope.component import getMultiAdapter\n+from plone.restapi.deserializer import json_body\n from zope.interface import alsoProvides\n \n import plone\n@@ -19,12 +18,18 @@ def reply(self):\n         subject = data.get(\'subject\', \'\')\n \n         if not sender_from_address or not message:\n-            raise BadRequest(\'Missing from or message parameters\')\n+            self.request.response.setStatus(400)\n+            return dict(error=dict(\n+                type=\'BadRequest\',\n+                message=\'Missing from or message parameters\'))\n \n         overview_controlpanel = getMultiAdapter((self.context, self.request),\n                                                 name=\'overview-controlpanel\')\n         if overview_controlpanel.mailhost_warning():\n-            raise BadRequest(\'MailHost is not configured.\')\n+            self.request.response.setStatus(400)\n+            return dict(error=dict(\n+                type=\'BadRequest\',\n+                message=\'MailHost is not configured.\'))\n \n         # Disable CSRF protection\n         if \'IDisableCSRFProtection\' in dir(plone.protect.interfaces):\n@@ -36,10 +41,10 @@ def reply(self):\n \n         contact_info_view.send_message(\n             dict(\n-                message=message,\n-                subject=subject,\n-                sender_from_address=sender_from_address,\n-                sender_fullname=sender_fullname\n+              message=message,\n+              subject=subject,\n+              sender_from_address=sender_from_address,\n+              sender_fullname=sender_fullname\n             )\n         )\n \ndiff --git a/src/plone/restapi/services/multilingual/configure.zcml b/src/plone/restapi/services/multilingual/configure.zcml\nindex 2c6dae1b..11fb18e1 100644\n--- a/src/plone/restapi/services/multilingual/configure.zcml\n+++ b/src/plone/restapi/services/multilingual/configure.zcml\n@@ -3,6 +3,8 @@\n     xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml">\n \n+    <include package="plone.app.multilingual" file="permissions.zcml"/>\n+\n     <adapter factory=".pam.Translations" name="translations"/>\n \n     <plone:service\ndiff --git a/src/plone/restapi/services/workflow/configure.zcml b/src/plone/restapi/services/workflow/configure.zcml\nindex e26831d0..6f77abef 100644\n--- a/src/plone/restapi/services/workflow/configure.zcml\n+++ b/src/plone/restapi/services/workflow/configure.zcml\n@@ -3,6 +3,14 @@\n     xmlns:plone="http://namespaces.plone.org/plone"\n     xmlns:zcml="http://namespaces.zope.org/zcml">\n \n+  <plone:service\n+    method="GET"\n+    name="@workflow"\n+    for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+    factory=".info.WorkflowInfoService"\n+    permission="zope2.View"\n+    />\n+\n   <plone:service\n     method="GET"\n     name="@workflow"\ndiff --git a/src/plone/restapi/services/workflow/info.py b/src/plone/restapi/services/workflow/info.py\nindex 25a2aa94..a4cb0e54 100644\n--- a/src/plone/restapi/services/workflow/info.py\n+++ b/src/plone/restapi/services/workflow/info.py\n@@ -2,6 +2,7 @@\n from Products.CMFCore.WorkflowCore import WorkflowException\n from Products.CMFCore.utils import getToolByName\n from Products.CMFCore.interfaces._content import IWorkflowAware\n+from Products.CMFPlone.interfaces import IPloneSiteRoot\n from plone.restapi.interfaces import IExpandableElement\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.services import Service\n@@ -28,6 +29,14 @@ def __call__(self, expand=False):\n         if not expand:\n             return result\n \n+        # Prevent 404 on site root on workflow request\n+        # Although 404 will be more semantic, for the sake of uniformity of the\n+        # API we fake the response to the endpoint by providing an empty\n+        # response instead of a 404.\n+        if IPloneSiteRoot.providedBy(self.context):\n+            result[\'workflow\'].update({\'history\': [], \'transitions\': []})\n+            return result\n+\n         wftool = getToolByName(self.context, \'portal_workflow\')\n         try:\n             history = wftool.getInfoFor(self.context, "review_history")\n@@ -69,6 +78,7 @@ def __call__(self, expand=False):\n class WorkflowInfoService(Service):\n     """Get workflow information\n     """\n+\n     def reply(self):\n         info = WorkflowInfo(self.context, self.request)\n         return info(expand=True)[\'workflow\']\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex f2c0780e..9ef7938f 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -23,6 +23,7 @@\n from plone.testing.layer import Layer\n from plone.uuid.interfaces import IUUIDGenerator\n from Products.CMFCore.utils import getToolByName\n+from requests.exceptions import ConnectionError\n from six.moves.urllib.parse import urljoin\n from six.moves.urllib.parse import urlparse\n from zope.component import getGlobalSiteManager\n@@ -358,7 +359,14 @@ def request(self, method, url, **kwargs):\n         if urlparse(url).scheme not in (\'http\', \'https\'):\n             url = url.lstrip(\'/\')\n             url = urljoin(self.__base_url, url)\n-        return super(RelativeSession, self).request(method, url, **kwargs)\n+        try:\n+            return super(RelativeSession, self).request(method, url, **kwargs)\n+        except ConnectionError:\n+            # On Jenkins we often get one ConnectionError in a seemingly\n+            # random test, mostly in test_documentation.py.\n+            # The server is still listening: the port is open.  We retry once.\n+            time.sleep(1)\n+            return super(RelativeSession, self).request(method, url, **kwargs)\n \n \n @implementer(IUUIDGenerator)\ndiff --git a/src/plone/restapi/tests/http-examples/groups.resp b/src/plone/restapi/tests/http-examples/groups.resp\nindex 4900bf9e..6f24788b 100644\n--- a/src/plone/restapi/tests/http-examples/groups.resp\n+++ b/src/plone/restapi/tests/http-examples/groups.resp\n@@ -8,6 +8,10 @@ Content-Type: application/json\n     "email": "", \n     "groupname": "Administrators", \n     "id": "Administrators", \n+    "roles": [\n+      "Manager", \n+      "Authenticated"\n+    ], \n     "title": "Administrators"\n   }, \n   {\n@@ -16,6 +20,10 @@ Content-Type: application/json\n     "email": "", \n     "groupname": "Reviewers", \n     "id": "Reviewers", \n+    "roles": [\n+      "Reviewer", \n+      "Authenticated"\n+    ], \n     "title": "Reviewers"\n   }, \n   {\n@@ -24,6 +32,10 @@ Content-Type: application/json\n     "email": "", \n     "groupname": "Site Administrators", \n     "id": "Site Administrators", \n+    "roles": [\n+      "Site Administrator", \n+      "Authenticated"\n+    ], \n     "title": "Site Administrators"\n   }, \n   {\n@@ -32,6 +44,9 @@ Content-Type: application/json\n     "email": "ploneteam@plone.org", \n     "groupname": "ploneteam", \n     "id": "ploneteam", \n+    "roles": [\n+      "Authenticated"\n+    ], \n     "title": "Plone Team"\n   }, \n   {\n@@ -40,6 +55,7 @@ Content-Type: application/json\n     "email": "", \n     "groupname": "AuthenticatedUsers", \n     "id": "AuthenticatedUsers", \n+    "roles": [], \n     "title": "Authenticated Users (Virtual Group)"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/groups_created.resp b/src/plone/restapi/tests/http-examples/groups_created.resp\nindex d7611e18..db08b74d 100644\n--- a/src/plone/restapi/tests/http-examples/groups_created.resp\n+++ b/src/plone/restapi/tests/http-examples/groups_created.resp\n@@ -8,6 +8,10 @@ Location: http://localhost:55001/plone/@groups/fwt\n   "email": "fwt@plone.org", \n   "groupname": "fwt", \n   "id": "fwt", \n+  "roles": [\n+    "Manager", \n+    "Authenticated"\n+  ], \n   "title": "Framework Team", \n   "users": {\n     "@id": "http://localhost:55001/plone/@groups", \ndiff --git a/src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp b/src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp\nindex d4358609..2932114e 100644\n--- a/src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp\n+++ b/src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp\n@@ -8,6 +8,9 @@ Content-Type: application/json\n     "email": "ploneteam@plone.org", \n     "groupname": "ploneteam", \n     "id": "ploneteam", \n+    "roles": [\n+      "Authenticated"\n+    ], \n     "title": "Plone Team"\n   }\n ]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/groups_get.resp b/src/plone/restapi/tests/http-examples/groups_get.resp\nindex 32616b25..656466e0 100644\n--- a/src/plone/restapi/tests/http-examples/groups_get.resp\n+++ b/src/plone/restapi/tests/http-examples/groups_get.resp\n@@ -7,6 +7,9 @@ Content-Type: application/json\n   "email": "ploneteam@plone.org", \n   "groupname": "ploneteam", \n   "id": "ploneteam", \n+  "roles": [\n+    "Authenticated"\n+  ], \n   "title": "Plone Team", \n   "users": {\n     "@id": "http://localhost:55001/plone/@groups/ploneteam", \ndiff --git a/src/plone/restapi/tests/http-examples/jwt_logged_in.resp b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\nindex 8ce3cff3..3dabbdc5 100644\n--- a/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\n+++ b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\n@@ -15,6 +15,7 @@ Content-Type: application/json\n   }, \n   "@id": "http://localhost:55001/plone/", \n   "@type": "Plone Site", \n+  "description": "", \n   "id": "plone", \n   "is_folderish": true, \n   "items": [\n@@ -28,5 +29,7 @@ Content-Type: application/json\n   ], \n   "items_total": 1, \n   "parent": {}, \n+  "tiles": {}, \n+  "tiles_layout": {}, \n   "title": "Plone site"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/principals.resp b/src/plone/restapi/tests/http-examples/principals.resp\nindex 6ca70dbb..ed94e761 100644\n--- a/src/plone/restapi/tests/http-examples/principals.resp\n+++ b/src/plone/restapi/tests/http-examples/principals.resp\n@@ -9,6 +9,9 @@ Content-Type: application/json\n       "email": "ploneteam@plone.org", \n       "groupname": "ploneteam", \n       "id": "ploneteam", \n+      "roles": [\n+        "Authenticated"\n+      ], \n       "title": "Plone Team"\n     }\n   ], \ndiff --git a/src/plone/restapi/tests/http-examples/registry_get_list.resp b/src/plone/restapi/tests/http-examples/registry_get_list.resp\nindex a72b47dc..f2bb5f51 100644\n--- a/src/plone/restapi/tests/http-examples/registry_get_list.resp\n+++ b/src/plone/restapi/tests/http-examples/registry_get_list.resp\n@@ -6,7 +6,7 @@ Content-Type: application/json\n   "batching": {\n     "@id": "http://localhost:55001/plone/@registry", \n     "first": "http://localhost:55001/plone/@registry?b_start=0", \n-    "last": "http://localhost:55001/plone/@registry?b_start=1650", \n+    "last": "http://localhost:55001/plone/@registry?b_start=1675", \n     "next": "http://localhost:55001/plone/@registry?b_start=25"\n   }, \n   "items": [\n@@ -495,5 +495,5 @@ Content-Type: application/json\n       "value": false\n     }\n   ], \n-  "items_total": 1673\n+  "items_total": 1683\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/siteroot.resp b/src/plone/restapi/tests/http-examples/siteroot.resp\nindex 0b2f0231..66922a5e 100644\n--- a/src/plone/restapi/tests/http-examples/siteroot.resp\n+++ b/src/plone/restapi/tests/http-examples/siteroot.resp\n@@ -15,6 +15,7 @@ Content-Type: application/json\n   }, \n   "@id": "http://localhost:55001/plone", \n   "@type": "Plone Site", \n+  "description": "", \n   "id": "plone", \n   "is_folderish": true, \n   "items": [\n@@ -28,5 +29,7 @@ Content-Type: application/json\n   ], \n   "items_total": 1, \n   "parent": {}, \n+  "tiles": {}, \n+  "tiles_layout": {}, \n   "title": "Plone site"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/test_atcontent_deserializer.py b/src/plone/restapi/tests/test_atcontent_deserializer.py\nindex 6be01743..92ae9b45 100644\n--- a/src/plone/restapi/tests/test_atcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_deserializer.py\n@@ -156,7 +156,7 @@ def __call__(self, request):\n \n     def test_set_layout(self):\n         current_layout = self.doc1.getLayout()\n-        self.assertNotEquals(current_layout, "my_new_layout")\n+        self.assertNotEqual(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n         self.assertEqual(\'my_new_layout\', self.doc1.getLayout())\n \ndiff --git a/src/plone/restapi/tests/test_batching.py b/src/plone/restapi/tests/test_batching.py\nindex f8e25bb3..7852d5d8 100644\n--- a/src/plone/restapi/tests/test_batching.py\n+++ b/src/plone/restapi/tests/test_batching.py\n@@ -35,6 +35,9 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def _create_doc(self, container, number):\n         createContentInContainer(\n             container, u\'DXTestDocument\',\ndiff --git a/src/plone/restapi/tests/test_copymove.py b/src/plone/restapi/tests/test_copymove.py\nindex 95f32042..6cc45052 100644\n--- a/src/plone/restapi/tests/test_copymove.py\n+++ b/src/plone/restapi/tests/test_copymove.py\n@@ -87,6 +87,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_copy_single_object(self):\n         response = self.api_session.post(\n             \'/@copy\',\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 89a2bbe8..a2ddbfc5 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -226,8 +226,10 @@ def create_folder(self):\n         return folder\n \n     def tearDown(self):\n+        self.api_session.close()\n         self.time_freezer.stop()\n         popGlobalRegistry(getSite())\n+        self.api_session.close()\n \n     def test_documentation_content_crud(self):\n         folder = self.create_folder()\n@@ -297,7 +299,6 @@ def test_documentation_news_item(self):\n             \'2016-01-21T02:14:48+00:00\')\n         self.portal.newsitem.modification_date = DateTime(\n             \'2016-01-21T02:24:11+00:00\')\n-        import transaction\n         transaction.commit()\n \n         with patch.object(storage, \'uuid4\', return_value=\'uuid1\'):\n@@ -315,7 +316,6 @@ def test_documentation_event(self):\n         self.portal.event.creation_date = DateTime(\'2016-01-21T03:14:48+00:00\')\n         self.portal.event.modification_date = DateTime(\n             \'2016-01-21T03:24:11+00:00\')\n-        import transaction\n         transaction.commit()\n         response = self.api_session.get(self.portal.event.absolute_url())\n         save_request_and_response_for_docs(\'event\', response)\n@@ -328,7 +328,6 @@ def test_documentation_link(self):\n         self.portal.link.creation_date = DateTime(\'2016-01-21T04:14:48+00:00\')\n         self.portal.link.modification_date = DateTime(\n             \'2016-01-21T04:24:11+00:00\')\n-        import transaction\n         transaction.commit()\n         response = self.api_session.get(self.portal.link.absolute_url())\n         save_request_and_response_for_docs(\'link\', response)\n@@ -350,7 +349,6 @@ def test_documentation_file(self):\n         self.portal.file.creation_date = DateTime(\'2016-01-21T05:14:48+00:00\')\n         self.portal.file.modification_date = DateTime(\n             \'2016-01-21T05:24:11+00:00\')\n-        import transaction\n         transaction.commit()\n         response = self.api_session.get(self.portal.file.absolute_url())\n         save_request_and_response_for_docs(\'file\', response)\n@@ -370,7 +368,6 @@ def test_documentation_image(self):\n         self.portal.image.creation_date = DateTime(\'2016-01-21T06:14:48+00:00\')\n         self.portal.image.modification_date = DateTime(\n             \'2016-01-21T06:24:11+00:00\')\n-        import transaction\n         transaction.commit()\n         with patch.object(storage, \'uuid4\', return_value=\'uuid1\'):\n             response = self.api_session.get(self.portal.image.absolute_url())\n@@ -378,7 +375,6 @@ def test_documentation_image(self):\n \n     def test_documentation_folder(self):\n         folder = self.create_folder()\n-        import transaction\n         transaction.commit()\n         response = self.api_session.get(folder.absolute_url())\n         save_request_and_response_for_docs(\'folder\', response)\n@@ -407,7 +403,6 @@ def test_documentation_collection(self):\n             \'2016-01-21T08:14:48+00:00\')\n         self.portal.collection.modification_date = DateTime(\n             \'2016-01-21T08:24:11+00:00\')\n-        import transaction\n         transaction.commit()\n         response = self.api_session.get(self.portal.collection.absolute_url())\n         save_request_and_response_for_docs(\'collection\', response)\n@@ -436,7 +431,6 @@ def test_documentation_search_options(self):\n             id=\'folder2\',\n             title=\'Folder 2\'\n         )\n-        import transaction\n         transaction.commit()\n         query = {\'sort_on\': \'path\',\n                  \'path.query\': \'/plone/folder1\',\n@@ -465,7 +459,6 @@ def test_documentation_search_multiple_paths(self):\n             id=\'doc2\',\n             title=\'Lorem Ipsum\'\n         )\n-        import transaction\n         transaction.commit()\n         query = {\'sort_on\': \'path\',\n                  \'path.query\': [\'/plone/folder1\', \'/plone/folder2\'],\n@@ -479,7 +472,6 @@ def test_documentation_search_metadata_fields(self):\n             id=\'doc1\',\n             title=\'Lorem Ipsum\'\n         )\n-        import transaction\n         transaction.commit()\n         query = {\'SearchableText\': \'lorem\',\n                  \'metadata_fields\': [\'modified\', \'created\']}\n@@ -492,7 +484,6 @@ def test_documentation_search_fullobjects(self):\n             id=\'doc1\',\n             title=\'Lorem Ipsum\'\n         )\n-        import transaction\n         transaction.commit()\n         query = {\'SearchableText\': \'lorem\',\n                  \'fullobjects\': 1}\n@@ -551,7 +542,6 @@ def test_documentation_jwt_login(self):\n         self.portal.acl_users.jwt_auth._secret = \'secret\'\n         self.portal.acl_users.jwt_auth.use_keyring = False\n         self.portal.acl_users.jwt_auth.token_timeout = 0\n-        import transaction\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n@@ -564,7 +554,6 @@ def test_documentation_jwt_logged_in(self):\n         self.portal.acl_users.jwt_auth.use_keyring = False\n         self.portal.acl_users.jwt_auth.token_timeout = 0\n         self.portal.acl_users.jwt_auth.store_tokens = True\n-        import transaction\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n@@ -580,7 +569,6 @@ def test_documentation_jwt_login_renew(self):\n         self.portal.acl_users.jwt_auth._secret = \'secret\'\n         self.portal.acl_users.jwt_auth.use_keyring = False\n         self.portal.acl_users.jwt_auth.token_timeout = 0\n-        import transaction\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n@@ -597,7 +585,6 @@ def test_documentation_jwt_logout(self):\n         self.portal.acl_users.jwt_auth.use_keyring = False\n         self.portal.acl_users.jwt_auth.token_timeout = 0\n         self.portal.acl_users.jwt_auth.store_tokens = True\n-        import transaction\n         transaction.commit()\n         self.api_session.auth = None\n         response = self.api_session.post(\n@@ -660,6 +647,7 @@ def test_documentation_users_as_anonymous(self):\n         response = logged_out_api_session.get(\'@users\')\n         save_request_and_response_for_docs(\'users_anonymous\', response)\n         self.assertEqual(response.status_code, 401)\n+        logged_out_api_session.close()\n \n     def test_documentations_users_as_unauthorized_user(self):\n         properties = {\n@@ -685,6 +673,7 @@ def test_documentations_users_as_unauthorized_user(self):\n         response = standard_api_session.get(\'@users\')\n         save_request_and_response_for_docs(\'users_unauthorized\', response)\n         self.assertEqual(response.status_code, 401)\n+        standard_api_session.close()\n \n     def test_documentation_users_get(self):\n         properties = {\n@@ -725,6 +714,7 @@ def test_documentation_users_anonymous_get(self):\n \n         response = logged_out_api_session.get(\'@users/noam\')\n         save_request_and_response_for_docs(\'users_anonymous_get\', response)\n+        logged_out_api_session.close()\n \n     def test_documentation_users_unauthorized_get(self):\n         properties = {\n@@ -757,6 +747,7 @@ def test_documentation_users_unauthorized_get(self):\n \n         response = logged_out_api_session.get(\'@users/noam\')\n         save_request_and_response_for_docs(\'users_unauthorized_get\', response)\n+        logged_out_api_session.close()\n \n     def test_documentation_users_authorized_get(self):\n         properties = {\n@@ -780,6 +771,7 @@ def test_documentation_users_authorized_get(self):\n         logged_out_api_session.auth = (\'noam\', \'secret\')\n         response = logged_out_api_session.get(\'@users/noam\')\n         save_request_and_response_for_docs(\'users_authorized_get\', response)\n+        logged_out_api_session.close()\n \n     def test_documentation_users_filtered_get(self):\n         properties = {\n@@ -1395,6 +1387,7 @@ def create_document(self):\n     def tearDown(self):\n         self.time_freezer.stop()\n         popGlobalRegistry(getSite())\n+        self.api_session.close()\n \n     def test_translate_messages_types(self):\n         response = self.api_session.get(\'/@types\')\n@@ -1455,6 +1448,7 @@ def setUp(self):\n \n     def tearDown(self):\n         self.time_freezer.stop()\n+        self.api_session.close()\n \n     def create_document_with_comments(self):\n         self.portal.invokeFactory(\'Document\', id=\'front-page\')\n@@ -1632,7 +1626,6 @@ def setUp(self):\n         )\n         self.es_content = self.portal[\'es\'].get(es_id)\n \n-        import transaction\n         transaction.commit()\n         self.browser = Browser(self.app)\n         self.browser.handleErrors = False\n@@ -1643,6 +1636,7 @@ def setUp(self):\n \n     def tearDown(self):\n         self.time_freezer.stop()\n+        self.api_session.close()\n \n     def test_documentation_translations_post(self):\n         response = self.api_session.post(\ndiff --git a/src/plone/restapi/tests/test_dxcontent_deserializer.py b/src/plone/restapi/tests/test_dxcontent_deserializer.py\nindex 6cd85ccd..b8def61d 100644\n--- a/src/plone/restapi/tests/test_dxcontent_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_deserializer.py\n@@ -210,7 +210,7 @@ def test_deserializer_sets_missing_value_on_required_field(self):\n \n     def test_set_layout(self):\n         current_layout = self.portal.doc1.getLayout()\n-        self.assertNotEquals(current_layout, "my_new_layout")\n+        self.assertNotEqual(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n         self.assertEqual(\'my_new_layout\', self.portal.doc1.getLayout())\n \ndiff --git a/src/plone/restapi/tests/test_error_handling.py b/src/plone/restapi/tests/test_error_handling.py\nindex 9cad014d..7cb02d73 100644\n--- a/src/plone/restapi/tests/test_error_handling.py\n+++ b/src/plone/restapi/tests/test_error_handling.py\n@@ -52,6 +52,9 @@ def setUp(self):\n         self.folder_url = self.folder.absolute_url()\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     @unittest.skip(\'Not working since we moved to plone.rest\')\n     def test_404_not_found(self):\n         response = self.api_session.get(\'non-existing-resource\')\ndiff --git a/src/plone/restapi/tests/test_expansion.py b/src/plone/restapi/tests/test_expansion.py\nindex 8bed02c9..de805d73 100644\n--- a/src/plone/restapi/tests/test_expansion.py\n+++ b/src/plone/restapi/tests/test_expansion.py\n@@ -120,6 +120,9 @@ def setUp(self):\n             title=u\'Some Folder\')\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_actions_is_expandable(self):\n         response = self.api_session.get(\'/folder\')\n \n@@ -331,6 +334,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_translations_is_expandable(self):\n         response = self.api_session.get(\'/en/test-document\')\n \ndiff --git a/src/plone/restapi/tests/test_locking.py b/src/plone/restapi/tests/test_locking.py\nindex 0e7b49fb..44e57653 100644\n--- a/src/plone/restapi/tests/test_locking.py\n+++ b/src/plone/restapi/tests/test_locking.py\n@@ -32,6 +32,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_lock_object(self):\n         response = self.api_session.post(\'/@lock\',)\n         transaction.commit()\ndiff --git a/src/plone/restapi/tests/test_permissions.py b/src/plone/restapi/tests/test_permissions.py\nindex 0bf9c634..84a94c9b 100644\n--- a/src/plone/restapi/tests/test_permissions.py\n+++ b/src/plone/restapi/tests/test_permissions.py\n@@ -24,6 +24,9 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (TEST_USER_NAME, TEST_USER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_anonymous_allowed_to_use_api_by_default(self):\n         setRoles(self.portal, TEST_USER_ID, [\'Anonymous\'])\n         transaction.commit()\ndiff --git a/src/plone/restapi/tests/test_registry.py b/src/plone/restapi/tests/test_registry.py\nindex bee9973c..7bb89ba9 100644\n--- a/src/plone/restapi/tests/test_registry.py\n+++ b/src/plone/restapi/tests/test_registry.py\n@@ -39,6 +39,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_registry_record(self):\n         response = self.api_session.get(\'/@registry/foo.bar\')\n \ndiff --git a/src/plone/restapi/tests/test_roles.py b/src/plone/restapi/tests/test_roles.py\nindex 05291d40..474dd4cc 100644\n--- a/src/plone/restapi/tests/test_roles.py\n+++ b/src/plone/restapi/tests/test_roles.py\n@@ -19,6 +19,9 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_roles_endpoint_lists_roles(self):\n         response = self.api_session.get(\'/@roles\')\n \ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex 942f9f8a..827d1526 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -102,6 +102,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_overall_response_format(self):\n         response = self.api_session.get(\'/@search\')\n \ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex e4c60772..6d1748e1 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -12,6 +12,7 @@\n from Products.CMFCore.utils import getToolByName\n from zope.component import getMultiAdapter\n \n+import json\n import os\n import unittest\n \n@@ -370,3 +371,52 @@ def test_serialize_to_json_collection(self):\n             ],\n             self.serialize(self.portal.collection1).get(\'items\')\n         )\n+\n+    def test_serialize_returns_site_root_common(self):\n+        self.assertIn(\n+            \'title\',\n+            self.serialize(self.portal),\n+        )\n+        self.assertIn(\n+            \'description\',\n+            self.serialize(self.portal)\n+        )\n+\n+    def test_serialize_returns_site_root_opt_in_tiles_not_present(self):\n+        self.assertEqual(\n+            self.serialize(self.portal)[\'tiles\'],\n+            {}\n+        )\n+        self.assertEqual(\n+            self.serialize(self.portal)[\'tiles_layout\'],\n+            {}\n+        )\n+\n+    def test_serialize_returns_site_root_opt_in_tiles_present(self):\n+        tiles = {\n+            "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n+                "@type": "description"\n+            },\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {\n+                "@type": "title"\n+            }\n+        }\n+        tiles_layout = {\n+            "items": [\n+                "07c273fc-8bfc-4e7d-a327-d513e5a945bb",\n+                "0358abe2-b4f1-463d-a279-a63ea80daf19"\n+            ]\n+        }\n+        self.portal.manage_addProperty(\n+            \'tiles\', json.dumps(tiles), \'string\')\n+        self.portal.manage_addProperty(\n+            \'tiles_layout\', json.dumps(tiles_layout), \'string\')\n+\n+        self.assertEqual(\n+            self.serialize(self.portal)[\'tiles\'],\n+            tiles\n+        )\n+        self.assertEqual(\n+            self.serialize(self.portal)[\'tiles_layout\'],\n+            tiles_layout\n+        )\ndiff --git a/src/plone/restapi/tests/test_services.py b/src/plone/restapi/tests/test_services.py\nindex 7e25c043..9a68830c 100644\n--- a/src/plone/restapi/tests/test_services.py\n+++ b/src/plone/restapi/tests/test_services.py\n@@ -33,6 +33,9 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_document(self):\n         self.portal.invokeFactory(\n             \'Document\',\ndiff --git a/src/plone/restapi/tests/test_services_actions.py b/src/plone/restapi/tests/test_services_actions.py\nindex 9c3332d5..e90688ce 100644\n--- a/src/plone/restapi/tests/test_services_actions.py\n+++ b/src/plone/restapi/tests/test_services_actions.py\n@@ -17,7 +17,7 @@\n TEST_CATEGORY_ID = \'testcategory\'\n \n \n-class TestRegistry(unittest.TestCase):\n+class TestActions(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n@@ -66,6 +66,10 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+        self.anon_api_session.close()\n+\n     def test_actions_all_categories(self):\n         response = self.api_session.get(\'/@actions\')\n \ndiff --git a/src/plone/restapi/tests/test_services_breadcrumbs.py b/src/plone/restapi/tests/test_services_breadcrumbs.py\nindex b65f6618..190e6a0d 100644\n--- a/src/plone/restapi/tests/test_services_breadcrumbs.py\n+++ b/src/plone/restapi/tests/test_services_breadcrumbs.py\n@@ -35,6 +35,9 @@ def setUp(self):\n             title=u\'A document\')\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_breadcrumbs(self):\n         response = self.api_session.get(\'/folder/doc1/@breadcrumbs\')\n \ndiff --git a/src/plone/restapi/tests/test_services_comments.py b/src/plone/restapi/tests/test_services_comments.py\nindex 67cc15a0..0eb86824 100644\n--- a/src/plone/restapi/tests/test_services_comments.py\n+++ b/src/plone/restapi/tests/test_services_comments.py\n@@ -55,6 +55,10 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+        self.user_session.close()\n+\n     def test_list_datastructure(self):\n         url = \'{}/@comments\'.format(self.doc.absolute_url())\n         response = self.api_session.get(url)\ndiff --git a/src/plone/restapi/tests/test_services_content.py b/src/plone/restapi/tests/test_services_content.py\nindex 3af4b406..54b12521 100644\n--- a/src/plone/restapi/tests/test_services_content.py\n+++ b/src/plone/restapi/tests/test_services_content.py\n@@ -34,6 +34,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_response(self):\n         response = self.api_session.get(self.doc.absolute_url())\n         self.assertIn(\'version\', response.json())\ndiff --git a/src/plone/restapi/tests/test_services_controlpanels.py b/src/plone/restapi/tests/test_services_controlpanels.py\nindex aed41985..4955e5da 100644\n--- a/src/plone/restapi/tests/test_services_controlpanels.py\n+++ b/src/plone/restapi/tests/test_services_controlpanels.py\n@@ -32,6 +32,9 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_listing(self):\n         # Do we get a list with at least one item?\n         response = self.api_session.get(\'/@controlpanels\')\ndiff --git a/src/plone/restapi/tests/test_services_email_notification.py b/src/plone/restapi/tests/test_services_email_notification.py\nindex 192f6d1b..9bd05135 100644\n--- a/src/plone/restapi/tests/test_services_email_notification.py\n+++ b/src/plone/restapi/tests/test_services_email_notification.py\n@@ -46,18 +46,8 @@ def setUp(self):\n \n         transaction.commit()\n \n-    def test_email_notification_missing_parameters(self):\n-        response = self.api_session.post(\n-            \'/@email-notification\',\n-            json={\n-                \'message\': \'Just want to say hi.\'\n-            })\n-        transaction.commit()\n-        self.assertEqual(response.status_code, 400)\n-        self.assertEqual(self.mailhost.messages, [])\n-        error = response.json()\n-        self.assertEqual(error[\'message\'],\n-                         \'Missing from or message parameters\')\n+    def tearDown(self):\n+        self.api_session.close()\n \n     def test_email_notification(self):\n         response = self.api_session.post(\ndiff --git a/src/plone/restapi/tests/test_services_email_send.py b/src/plone/restapi/tests/test_services_email_send.py\nindex 32efd9e8..9fe77368 100644\n--- a/src/plone/restapi/tests/test_services_email_send.py\n+++ b/src/plone/restapi/tests/test_services_email_send.py\n@@ -46,6 +46,10 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+        self.anon_api_session.close()\n+\n     def test_email_send(self):\n         response = self.api_session.post(\n             \'/@email-send\',\ndiff --git a/src/plone/restapi/tests/test_services_groups.py b/src/plone/restapi/tests/test_services_groups.py\nindex 59ebff50..d4735d86 100644\n--- a/src/plone/restapi/tests/test_services_groups.py\n+++ b/src/plone/restapi/tests/test_services_groups.py\n@@ -38,6 +38,9 @@ def setUp(self):\n                             description=properties[\'description\'])\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_list_groups(self):\n         response = self.api_session.get(\'/@groups\')\n \n@@ -59,6 +62,8 @@ def test_list_groups(self):\n         self.assertEqual(\'Plone Team\', ptgroup.get(\'title\'))\n         self.assertEqual(\'We are Plone\', ptgroup.get(\'description\'))\n \n+        self.assertEqual(ptgroup.get(\'roles\'), [\'Authenticated\'])\n+\n         # We don\'t want the group members listed in the overview as there\n         # might be loads.\n         self.assertTrue(\ndiff --git a/src/plone/restapi/tests/test_services_history.py b/src/plone/restapi/tests/test_services_history.py\nindex 7dbbd54e..0d262098 100644\n--- a/src/plone/restapi/tests/test_services_history.py\n+++ b/src/plone/restapi/tests/test_services_history.py\n@@ -40,6 +40,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_types(self):\n         # Check if we have all history types in our test setup\n         response = self.api_session.get(self.endpoint_url)\n@@ -165,6 +168,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_actions_are_translated(self):\n         url = self.doc.absolute_url() + \'/@history\'\n         response = self.api_session.get(url)\ndiff --git a/src/plone/restapi/tests/test_services_navigation.py b/src/plone/restapi/tests/test_services_navigation.py\nindex 4a25f850..e7c08903 100644\n--- a/src/plone/restapi/tests/test_services_navigation.py\n+++ b/src/plone/restapi/tests/test_services_navigation.py\n@@ -55,6 +55,9 @@ def setUp(self):\n             title=u\'A document\')\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_navigation_with_no_params_gets_only_top_level(self):\n         response = self.api_session.get(\'/folder/@navigation\')\n \ndiff --git a/src/plone/restapi/tests/test_services_principals.py b/src/plone/restapi/tests/test_services_principals.py\nindex 64e2d647..2aaaf608 100644\n--- a/src/plone/restapi/tests/test_services_principals.py\n+++ b/src/plone/restapi/tests/test_services_principals.py\n@@ -52,6 +52,9 @@ def setUp(self):\n                             description=properties[\'description\'])\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_principals(self):\n         response = self.api_session.get(\n             \'/@principals\',\ndiff --git a/src/plone/restapi/tests/test_services_tiles.py b/src/plone/restapi/tests/test_services_tiles.py\nindex 4efd6869..7e6adf17 100644\n--- a/src/plone/restapi/tests/test_services_tiles.py\n+++ b/src/plone/restapi/tests/test_services_tiles.py\n@@ -75,6 +75,9 @@ def setUp(self):\n         provideAdapter(SampleTile, (Interface, Interface),\n                        IBasicTile, name=u\'sample.tile\')\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_available_tiles(self):\n         response = self.api_session.get(\'/@tiles\')\n \ndiff --git a/src/plone/restapi/tests/test_services_types.py b/src/plone/restapi/tests/test_services_types.py\nindex 44b44e5e..bb83e4f1 100644\n--- a/src/plone/restapi/tests/test_services_types.py\n+++ b/src/plone/restapi/tests/test_services_types.py\n@@ -26,6 +26,9 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_types(self):\n         response = self.api_session.get(\n             \'{}/@types\'.format(self.portal.absolute_url())\n@@ -112,6 +115,11 @@ def test_file_type(self):\n         self.assertIn(\n             \'file.data\', response[\'properties\'][\'file\'][\'properties\'])\n \n+    def test_event_type(self):\n+        response = self.api_session.get(\'/@types/Event\')\n+        response = response.json()\n+        self.assertIn(\'title\', response[\'properties\'][\'start\'])\n+\n     def test_addable_types_for_non_manager_user(self):\n         user = api.user.create(\n             email=\'noam.chomsky@example.com\',\n@@ -184,6 +192,9 @@ def setUp(self):\n \n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_get_types_translated(self):\n         response = self.api_session.get(\n             \'{}/@types\'.format(self.portal.absolute_url())\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex fadf8007..92097918 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -67,6 +67,10 @@ def setUp(self):\n         )\n         transaction.commit()\n \n+    def tearDown(self):\n+        self.api_session.close()\n+        self.anon_api_session.close()\n+\n     def test_list_users(self):\n         response = self.api_session.get(\'/@users\')\n \n@@ -95,6 +99,7 @@ def test_list_users_without_being_manager(self):\n \n         response = noam_api_session.get(\'/@users\')\n         self.assertEqual(response.status_code, 401)\n+        noam_api_session.close()\n \n     def test_list_users_as_anonymous(self):\n \n@@ -343,6 +348,7 @@ def test_get_other_user_info_when_logged_in(self):\n \n         response = noam_api_session.get(\'/@users/otheruser\')\n         self.assertEqual(response.status_code, 401)\n+        noam_api_session.close()\n \n     def test_get_search_user_with_filter(self):\n         response = self.api_session.post(\n@@ -406,6 +412,7 @@ def test_get_search_user_with_filter_as_unauthorized_user(self):\n \n         response = noam_api_session.get(\'/@users\', params={\'query\': \'howa\'})\n         self.assertEqual(response.status_code, 401)\n+        noam_api_session.close()\n \n     def test_get_non_existing_user(self):\n         response = self.api_session.get(\'/@users/non-existing-user\')\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex f7c57563..25b6cf65 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -139,6 +139,7 @@ def test_context_vocabulary(self):\n             })\n \n     def tearDown(self):\n+        self.api_session.close()\n         gsm = getGlobalSiteManager()\n         gsm.unregisterUtility(provided=IVocabularyFactory,\n                               name=\'plone.restapi.tests.test_vocabulary\')\ndiff --git a/src/plone/restapi/tests/test_site_deserializer.py b/src/plone/restapi/tests/test_site_deserializer.py\nindex ad7f7c0c..4b7a81f0 100644\n--- a/src/plone/restapi/tests/test_site_deserializer.py\n+++ b/src/plone/restapi/tests/test_site_deserializer.py\n@@ -2,10 +2,11 @@\n from plone.restapi.interfaces import IDeserializeFromJson\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from plone.restapi.tests.mixin_ordering import OrderingMixin\n+from six.moves import range\n from zope.component import getMultiAdapter\n \n+import json\n import unittest\n-from six.moves import range\n \n \n class TestDXContentDeserializer(unittest.TestCase, OrderingMixin):\n@@ -35,6 +36,45 @@ def deserialize(self, body=\'{}\', validate_all=False, context=None):\n \n     def test_set_layout(self):\n         current_layout = self.portal.getLayout()\n-        self.assertNotEquals(current_layout, "my_new_layout")\n+        self.assertNotEqual(current_layout, "my_new_layout")\n         self.deserialize(body=\'{"layout": "my_new_layout"}\')\n         self.assertEqual(\'my_new_layout\', self.portal.getLayout())\n+\n+\n+class TestSiteRootDeserializer(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+\n+    def deserialize(self, body=\'{}\', validate_all=False, context=None):\n+        context = context or self.portal\n+        self.request[\'BODY\'] = body\n+        deserializer = getMultiAdapter((context, self.request),\n+                                       IDeserializeFromJson)\n+        return deserializer(validate_all=validate_all)\n+\n+    def test_opt_in_tiles_deserializer(self):\n+        tiles = {\n+            "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n+                "@type": "description"\n+            },\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {\n+                "@type": "title"\n+            }\n+        }\n+        tiles_layout = {\n+            "items": [\n+                "07c273fc-8bfc-4e7d-a327-d513e5a945bb",\n+                "0358abe2-b4f1-463d-a279-a63ea80daf19"\n+            ]\n+        }\n+\n+        self.deserialize(\n+            body=\'{{"tiles": {}, "tiles_layout": {}}}\'.format(\n+                json.dumps(tiles), json.dumps(tiles_layout)))\n+\n+        self.assertEqual(tiles, json.loads(self.portal.tiles))\n+        self.assertEqual(tiles_layout, json.loads(self.portal.tiles_layout))\ndiff --git a/src/plone/restapi/tests/test_tus.py b/src/plone/restapi/tests/test_tus.py\nindex 3879ca81..8a2eb839 100644\n--- a/src/plone/restapi/tests/test_tus.py\n+++ b/src/plone/restapi/tests/test_tus.py\n@@ -1,25 +1,29 @@\n # -*- coding: utf-8 -*-\n-from DateTime import DateTime\n-from six import BytesIO\n from base64 import b64encode\n+from DateTime import DateTime\n+from OFS.interfaces import IObjectWillBeAddedEvent\n from plone import api\n+from plone.app.testing import login\n+from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n from plone.rest.cors import CORSPolicy\n from plone.rest.interfaces import ICORSPolicy\n-from plone.restapi.services.content.tus import TUSUpload\n from plone.restapi import HAS_AT\n+from plone.restapi.services.content.tus import TUSUpload\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n+from six import BytesIO\n from zope.component import getGlobalSiteManager\n from zope.component import provideAdapter\n from zope.interface import Interface\n+from zope.lifecycleevent.interfaces import IObjectAddedEvent\n+from zope.lifecycleevent.interfaces import IObjectCreatedEvent\n+from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n from zope.publisher.interfaces.browser import IBrowserRequest\n \n import os\n@@ -399,7 +403,116 @@ def test_tus_can_replace_pdf_file(self):\n         self.assertEqual(UPLOAD_PDF_FILENAME, self.file.file.filename)\n         self.assertEqual(pdf_file_size, self.file.file.size)\n \n+    def test_create_with_tus_fires_proper_events(self):\n+        sm = getGlobalSiteManager()\n+        fired_events = []\n+\n+        def record_event(event):\n+            fired_events.append(event.__class__.__name__)\n+\n+        sm.registerHandler(record_event, (IObjectCreatedEvent,))\n+        sm.registerHandler(record_event, (IObjectWillBeAddedEvent,))\n+        sm.registerHandler(record_event, (IObjectAddedEvent,))\n+        sm.registerHandler(record_event, (IObjectModifiedEvent,))\n+\n+        # initialize the upload with POST\n+        pdf_file_path = os.path.join(os.path.dirname(__file__),\n+                                     UPLOAD_PDF_FILENAME)\n+        pdf_file_size = os.path.getsize(pdf_file_path)\n+        metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n+        response = self.api_session.post(\n+            self.upload_url,\n+            headers={\'Tus-Resumable\': \'1.0.0\',\n+                     \'Upload-Length\': str(pdf_file_size),\n+                     \'Upload-Metadata\': metadata}\n+        )\n+        self.assertEqual(response.status_code, 201)\n+        location = response.headers[\'Location\']\n+\n+        # upload the data with PATCH\n+        with open(pdf_file_path, \'rb\') as pdf_file:\n+            response = self.api_session.patch(\n+                location,\n+                headers={\n+                    \'Content-Type\': \'application/offset+octet-stream\',\n+                    \'Upload-Offset\': \'0\',\n+                    \'Tus-Resumable\': \'1.0.0\'\n+                },\n+                data=pdf_file)\n+        self.assertEqual(response.status_code, 204)\n+\n+        self.assertEqual(\n+            fired_events,\n+            [\n+                \'ObjectCreatedEvent\',\n+                \'ObjectWillBeAddedEvent\',\n+                \'ObjectAddedEvent\',\n+                \'ContainerModifiedEvent\',\n+            ])\n+\n+        sm.unregisterHandler(record_event, (IObjectCreatedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectWillBeAddedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectAddedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectModifiedEvent,))\n+\n+    def test_replace_with_tus_fires_proper_events(self):\n+        # Create a test file\n+        self.file = api.content.create(container=self.portal,\n+                                       type=\'File\',\n+                                       id=\'testfile\',\n+                                       title=\'Testfile\')\n+        transaction.commit()\n+\n+        sm = getGlobalSiteManager()\n+        fired_events = []\n+\n+        def record_event(event):\n+            fired_events.append(event.__class__.__name__)\n+\n+        sm.registerHandler(record_event, (IObjectCreatedEvent,))\n+        sm.registerHandler(record_event, (IObjectWillBeAddedEvent,))\n+        sm.registerHandler(record_event, (IObjectAddedEvent,))\n+        sm.registerHandler(record_event, (IObjectModifiedEvent,))\n+\n+        # initialize the upload with POST\n+        pdf_file_path = os.path.join(os.path.dirname(__file__),\n+                                     UPLOAD_PDF_FILENAME)\n+        pdf_file_size = os.path.getsize(pdf_file_path)\n+        metadata = _prepare_metadata(UPLOAD_PDF_FILENAME, UPLOAD_PDF_MIMETYPE)\n+        response = self.api_session.post(\n+            \'{}/@tus-replace\'.format(self.file.absolute_url()),\n+            headers={\'Tus-Resumable\': \'1.0.0\',\n+                     \'Upload-Length\': str(pdf_file_size),\n+                     \'Upload-Metadata\': metadata}\n+        )\n+        self.assertEqual(response.status_code, 201)\n+        location = response.headers[\'Location\']\n+\n+        # upload the data with PATCH\n+        with open(pdf_file_path, \'rb\') as pdf_file:\n+            response = self.api_session.patch(\n+                location,\n+                headers={\n+                    \'Content-Type\': \'application/offset+octet-stream\',\n+                    \'Upload-Offset\': \'0\',\n+                    \'Tus-Resumable\': \'1.0.0\'\n+                },\n+                data=pdf_file)\n+        self.assertEqual(response.status_code, 204)\n+\n+        self.assertEqual(\n+            fired_events,\n+            [\n+                \'ObjectModifiedEvent\',\n+            ])\n+\n+        sm.unregisterHandler(record_event, (IObjectCreatedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectWillBeAddedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectAddedEvent,))\n+        sm.unregisterHandler(record_event, (IObjectModifiedEvent,))\n+\n     def tearDown(self):\n+        self.api_session.close()\n         client_home = os.environ.get(\'CLIENT_HOME\')\n         tmp_dir = os.path.join(client_home, \'tus-uploads\')\n         if os.path.isdir(tmp_dir):\n@@ -471,6 +584,7 @@ def test_cors_preflight_for_head_contains_tus_headers(self):\n         self.assertIn(\'Tus-Extension\', response.headers)\n \n     def tearDown(self):\n+        self.api_session.close()\n         gsm = getGlobalSiteManager()\n         gsm.unregisterAdapter(\n             CORSTestPolicy, (Interface, IBrowserRequest), ICORSPolicy)\n@@ -607,6 +721,9 @@ def setUp(self):\n         self.api_session.headers.update({\'Accept\': \'application/json\'})\n         self.api_session.auth = (TEST_USER_NAME, TEST_USER_PASSWORD)\n \n+    def tearDown(self):\n+        self.api_session.close()\n+\n     def test_tus_can_upload_pdf_file(self):\n         # initialize the upload with POST\n         pdf_file_path = os.path.join(os.path.dirname(__file__),\ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex 1ed82b54..8c3a8d87 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -18,6 +18,7 @@\n from plone.restapi.types.utils import get_jsonschema_for_fti\n from plone.restapi.types.utils import get_jsonschema_for_portal_type\n from plone.restapi.types.utils import get_jsonschema_properties\n+from z3c.form.browser.text import TextWidget\n \n \n class IDummySchema(model.Schema):\n@@ -58,8 +59,14 @@ class ITaggedValuesSchema(model.Schema):\n         description=u"",\n     )\n \n-    another_field = schema.TextLine(title=u"Tagged Values widget params")\n-    form.widget(\'another_field\', a_param=\'some_value\')\n+    parametrized_widget_field = schema.TextLine(\n+        title=u"Parametrized widget field")\n+    form.widget(\'parametrized_widget_field\',\n+                a_param=\'some_value\', defaultFactory=lambda: \'Foo\')\n+\n+    not_parametrized_widget_field = schema.TextLine(\n+        title=u"No parametrized widget field")\n+    form.widget(not_parametrized_widget_field=TextWidget)\n \n \n class TestJsonSchemaUtils(TestCase):\n@@ -182,7 +189,33 @@ def test_get_jsonschema_with_widget_params(self):\n         )\n         self.assertEqual(\n             \'some_value\',\n-            jsonschema[\'properties\'][\'another_field\'][\'a_param\']\n+            jsonschema[\'properties\'][\'parametrized_widget_field\'][\'a_param\']\n+        )\n+\n+    def test_do_not_fail_with_non_parametrized_widget(self):\n+        ttool = getToolByName(self.portal, \'portal_types\')\n+        jsonschema = get_jsonschema_for_fti(\n+            ttool[\'TaggedDocument\'],\n+            self.portal,\n+            self.request\n+        )\n+        self.assertEqual(\n+            u\'No parametrized widget field\',\n+            jsonschema[\'properties\'][\'not_parametrized_widget_field\'][\'title\']\n+        )\n+\n+    def test_resolve_callable_widget_params(self):\n+        ttool = getToolByName(self.portal, \'portal_types\')\n+        jsonschema = get_jsonschema_for_fti(\n+            ttool[\'TaggedDocument\'],\n+            self.portal,\n+            self.request\n+        )\n+\n+        self.assertEqual(\n+            u\'Foo\',\n+            jsonschema[\'properties\'][\'parametrized_widget_field\'].get(\n+                \'defaultFactory\')\n         )\n \n \ndiff --git a/src/plone/restapi/tests/test_workflow.py b/src/plone/restapi/tests/test_workflow.py\nindex ba957e24..0f4d0558 100644\n--- a/src/plone/restapi/tests/test_workflow.py\n+++ b/src/plone/restapi/tests/test_workflow.py\n@@ -79,6 +79,14 @@ def test_expanded_workflow_info_in_content_serialization(self):\n         self.assertIn(\'transitions\', obj[\'@components\'][\'workflow\'])\n         self.assertIn(\'history\', obj[\'@components\'][\'workflow\'])\n \n+    def test_workflow_info_empty_on_siteroot(self):\n+        wfinfo = getMultiAdapter((self.portal, self.request),\n+                                 name=u\'GET_application_json_@workflow\')\n+        obj = wfinfo.reply()\n+\n+        self.assertEquals(obj[\'transitions\'], [])\n+        self.assertEquals(obj[\'history\'], [])\n+\n \n class TestWorkflowTransition(TestCase):\n \ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex 44e3b703..e2bc597a 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -16,6 +16,7 @@\n from collections import OrderedDict\n from copy import copy\n from plone.autoform.form import AutoExtensibleForm\n+from plone.autoform.interfaces import IParameterizedWidget\n from plone.autoform.interfaces import WIDGETS_KEY\n from plone.dexterity.utils import getAdditionalSchemata\n from plone.restapi.serializer.converters import json_compatible\n@@ -139,8 +140,11 @@ def get_tagged_values(schemas, key):\n         tagged_values = mergedTaggedValueDict(schema, key)\n         for field_name in schema:\n             widget = tagged_values.get(field_name)\n-            if widget and widget.params:\n-                params[field_name] = widget.params\n+            if IParameterizedWidget.providedBy(widget) and widget.params:\n+                params[field_name] = widget.params.copy()\n+                for k, v in params[field_name].items():\n+                    if callable(v):\n+                        params[field_name][k] = v()\n     return params\n \n \ndiff --git a/versions.cfg b/versions.cfg\nindex 027117cc..6df104e5 100644\n--- a/versions.cfg\n+++ b/versions.cfg\n@@ -27,9 +27,11 @@ Jinja2 = 2.10\n Babel = 2.5.1\n \n # Release\n-zest.releaser = 6.14.0\n-twine = 1.10.0\n+zest.releaser = 6.17.0\n+twine = 1.11.0\n requests = 2.18.4\n+towncrier = 19.2.0\n+zestreleaser.towncrier = 1.1.0\n \n # Tests\n collective.xmltestreport = 1.3.4\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-03-13T19:15:05+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/4684b93465840baccf314d89f8583b03ea8bbe99

Add support for 5.2

Files changed:
A news/698.feature
M CHANGES.rst
M src/plone/restapi/tests/test_content_get.py

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex dcc5b914..41c16e0d 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -81,11 +81,6 @@ Bugfixes:\n 3.5.1 (2019-02-05)\n ------------------\n \n-New Features:\n-\n-- Add full support for `fullobjects` support for AT content types.\n-  [sneridagh]\n-\n Bugfixes:\n \n - Do not fail on serializing types with fields having non-parametrized widgets.\ndiff --git a/news/698.feature b/news/698.feature\nnew file mode 100644\nindex 00000000..d04c1c4d\n--- /dev/null\n+++ b/news/698.feature\n@@ -0,0 +1,2 @@\n+- Add full support for `fullobjects` support for AT content types.\n+  [sneridagh]\ndiff --git a/src/plone/restapi/tests/test_content_get.py b/src/plone/restapi/tests/test_content_get.py\nindex 9de0256f..00723d62 100644\n--- a/src/plone/restapi/tests/test_content_get.py\n+++ b/src/plone/restapi/tests/test_content_get.py\n@@ -6,6 +6,7 @@\n from plone.app.testing import login\n from plone.app.testing import setRoles\n from plone.app.textfield.value import RichTextValue\n+from plone.restapi.testing import HAS_AT\n from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from z3c.relationfield import RelationValue\n@@ -22,6 +23,8 @@ class TestContentGet(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest('Skip tests if Archetypes is not present')\n         self.app = self.layer['app']\n         self.portal = self.layer['portal']\n         self.portal_url = self.portal.absolute_url()\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-03-13T20:16:03+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/982fe4de1d882c8a570c97551adb4aa14e9b1d92

Missing AT bail code

Files changed:
M src/plone/restapi/tests/test_content_get.py

b"diff --git a/src/plone/restapi/tests/test_content_get.py b/src/plone/restapi/tests/test_content_get.py\nindex 00723d62..9504a305 100644\n--- a/src/plone/restapi/tests/test_content_get.py\n+++ b/src/plone/restapi/tests/test_content_get.py\n@@ -174,6 +174,8 @@ class TestContentATGet(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest('Skip tests if Archetypes is not present')\n         self.portal = self.layer['portal']\n         self.portal_url = self.portal.absolute_url()\n         setRoles(self.portal, TEST_USER_ID, ['Member'])\n"

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-03-16T09:16:54+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/b6b60da2417ad5ae57843b6bc0fdcac47002aed8

Merge branch 'master' into add-full-fullobjects-support-to-AT

* master:
  Update plone-5.2.x.cfg
  Back to development: 3.7.6
  Preparing release 3.7.5
  Amend changelog entry for p.a.controlpanel fix.
  Better both clauses be exclusive
  Fix unbound prefix
  Fix 5.2 build by not including the deprecated package p.a.controlpanel
  Use Plone 5.2rc1-pending.

Files changed:
M CHANGES.rst
M plone-5.2.x.cfg
M setup.py
M src/plone/restapi/services/controlpanels/configure.zcml

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 41c16e0d..ed7d52c1 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,16 @@ Changelog\n \n .. towncrier release notes start\n \n+3.7.5 (2019-03-14)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Do not depend on the deprecated plone.app.controlpanel package.\n+  [sneridagh] (#696)\n+\n+\n 3.7.4 (2019-03-13)\n ------------------\n \ndiff --git a/plone-5.2.x.cfg b/plone-5.2.x.cfg\nindex 622ec121..94ef5e62 100644\n--- a/plone-5.2.x.cfg\n+++ b/plone-5.2.x.cfg\n@@ -1,7 +1,7 @@\n [buildout]\n extends =\n     base.cfg\n-    http://dist.plone.org/release/5.2a2/versions.cfg\n+    http://dist.plone.org/release/5.2rc1/versions.cfg\n find-links += http://dist.plone.org/thirdparty/\n versions=versions\n \ndiff --git a/setup.py b/setup.py\nindex 2fd61d14..0984fff3 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n \n import sys\n \n-version = \'3.7.5.dev0\'\n+version = \'3.7.6.dev0\'\n \n long_description = (\n     open(\'README.rst\').read() + \'\\n\' +\n@@ -70,7 +70,6 @@\n           \'plone.schema >= 1.2.0\',  # new json field\n           \'PyJWT\',\n           \'pytz\',\n-          \'plone.app.controlpanel\'  # to remove in Plone 6.\n       ],\n       extras_require={\'test\': TEST_REQUIRES},\n       entry_points="""\ndiff --git a/src/plone/restapi/services/controlpanels/configure.zcml b/src/plone/restapi/services/controlpanels/configure.zcml\nindex de3fda6c..718ea565 100644\n--- a/src/plone/restapi/services/controlpanels/configure.zcml\n+++ b/src/plone/restapi/services/controlpanels/configure.zcml\n@@ -1,8 +1,17 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:plone="http://namespaces.plone.org/plone">\n-\n-  <include package="plone.app.controlpanel" file="permissions.zcml" />\n+    xmlns:plone="http://namespaces.plone.org/plone"\n+    xmlns:zcml="http://namespaces.zope.org/zcml">\n+\n+  <include\n+    zcml:condition="not-installed plone.app.controlpanel"\n+    package="Products.CMFPlone.controlpanel"\n+    file="permissions.zcml" />\n+\n+  <include\n+    zcml:condition="installed plone.app.controlpanel"\n+    package="plone.app.controlpanel"\n+    file="permissions.zcml" />\n \n   <plone:service\n     method="GET"\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2019-04-18T09:30:32+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/3097a05a2cf44d1b799b55faa5384be2adae5de9

Merge pull request #649 from plone/add-full-fullobjects-support-to-AT

Add full support for fullobjects support for AT content types

Files changed:
A news/698.feature
M src/plone/restapi/serializer/atcollection.py
M src/plone/restapi/serializer/atcontent.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/test_content_get.py

b'diff --git a/news/698.feature b/news/698.feature\nnew file mode 100644\nindex 00000000..d04c1c4d\n--- /dev/null\n+++ b/news/698.feature\n@@ -0,0 +1,2 @@\n+- Add full support for `fullobjects` support for AT content types.\n+  [sneridagh]\ndiff --git a/src/plone/restapi/serializer/atcollection.py b/src/plone/restapi/serializer/atcollection.py\nindex a7eb2e99..0540cac1 100644\n--- a/src/plone/restapi/serializer/atcollection.py\n+++ b/src/plone/restapi/serializer/atcollection.py\n@@ -14,7 +14,7 @@\n @adapter(ICollection, Interface)\n class SerializeCollectionToJson(SerializeToJson):\n \n-    def __call__(self, version=None):\n+    def __call__(self, version=None, include_items=True):\n         collection_metadata = super(\n             SerializeCollectionToJson, self).__call__(version=version)\n         results = self.context.results(batch=False)\ndiff --git a/src/plone/restapi/serializer/atcontent.py b/src/plone/restapi/serializer/atcontent.py\nindex 92219877..b493d9c0 100644\n--- a/src/plone/restapi/serializer/atcontent.py\n+++ b/src/plone/restapi/serializer/atcontent.py\n@@ -111,10 +111,17 @@ def __call__(self, version=None, include_items=True):\n             if batch.links:\n                 result[\'batching\'] = batch.links\n \n-            result[\'items\'] = [\n-                getMultiAdapter(\n-                    (brain, self.request), ISerializeToJsonSummary\n-                )()\n-                for brain in batch\n-            ]\n+            if \'fullobjects\' in list(self.request.form):\n+                result[\'items\'] = getMultiAdapter(\n+                    (brains, self.request),\n+                    ISerializeToJson\n+                )(fullobjects=True)[\'items\']\n+            else:\n+                result[\'items\'] = [\n+                    getMultiAdapter(\n+                        (brain, self.request),\n+                        ISerializeToJsonSummary\n+                    )()\n+                    for brain in batch\n+                ]\n         return result\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex d2f984d5..16552218 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -293,6 +293,8 @@ def setUpZope(self, app, configurationContext):\n             z2.installProduct(app, \'plone.restapi\')\n \n         def setUpPloneSite(self, portal):\n+            portal.acl_users.userFolderAddUser(\n+                SITE_OWNER_NAME, SITE_OWNER_PASSWORD, [\'Manager\'], [])\n             set_supported_languages(portal)\n \n             if portal.portal_setup.profileExists(\ndiff --git a/src/plone/restapi/tests/test_content_get.py b/src/plone/restapi/tests/test_content_get.py\nindex 0a21824e..9504a305 100644\n--- a/src/plone/restapi/tests/test_content_get.py\n+++ b/src/plone/restapi/tests/test_content_get.py\n@@ -6,6 +6,8 @@\n from plone.app.testing import login\n from plone.app.testing import setRoles\n from plone.app.textfield.value import RichTextValue\n+from plone.restapi.testing import HAS_AT\n+from plone.restapi.testing import PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from z3c.relationfield import RelationValue\n from zope.component import getUtility\n@@ -21,6 +23,8 @@ class TestContentGet(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n         self.app = self.layer[\'app\']\n         self.portal = self.layer[\'portal\']\n         self.portal_url = self.portal.absolute_url()\n@@ -163,3 +167,108 @@ def test_get_content_includes_related_items(self):\n             }],\n             response.json()[\'relatedItems\']\n         )\n+\n+\n+class TestContentATGet(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        if not HAS_AT:\n+            raise unittest.SkipTest(\'Skip tests if Archetypes is not present\')\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, [\'Member\'])\n+        login(self.portal, SITE_OWNER_NAME)\n+        self.portal.invokeFactory(\n+            \'Folder\',\n+            id=\'folder1\',\n+            title=\'My Folder\'\n+        )\n+        self.portal.folder1.invokeFactory(\n+            \'Document\',\n+            id=\'doc1\',\n+            title=\'My Document\'\n+        )\n+        self.portal.folder1.doc1.setText(u"Lorem ipsum.")\n+        self.portal.folder1.invokeFactory(\n+            \'Folder\',\n+            id=\'folder2\',\n+            title=\'My Folder 2\'\n+        )\n+        self.portal.folder1.folder2.invokeFactory(\n+            \'Document\',\n+            id=\'doc2\',\n+            title=\'My Document 2\'\n+        )\n+        self.portal.folder1.invokeFactory(\n+            \'Collection\',\n+            id=\'collection\',\n+            title=\'My collection\'\n+        )\n+        wftool = getToolByName(self.portal, \'portal_workflow\')\n+        wftool.doActionFor(self.portal.folder1, \'publish\')\n+        wftool.doActionFor(self.portal.folder1.doc1, \'publish\')\n+        wftool.doActionFor(self.portal.folder1.folder2, \'publish\')\n+        wftool.doActionFor(self.portal.folder1.folder2.doc2, \'publish\')\n+        transaction.commit()\n+\n+    def test_get_content_returns_fullobjects(self):\n+        response = requests.get(\n+            self.portal.folder1.absolute_url() + \'?fullobjects\',\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(3, len(response.json()[\'items\']))\n+        self.assertTrue(\n+            \'title\' in list(response.json()[\'items\'][0])\n+        )\n+        self.assertTrue(\n+            \'description\' in list(response.json()[\'items\'][0])\n+        )\n+        self.assertTrue(\n+            \'text\' in list(response.json()[\'items\'][0])\n+        )\n+        self.assertEqual(\n+            {\n+                u\'data\': u\'<p>Lorem ipsum.</p>\',\n+                u\'content-type\': u\'text/html\',\n+            },\n+            response.json()[\'items\'][0].get(\'text\')\n+        )\n+\n+        # make sure the single document response is the same as the items\n+        response_doc = requests.get(\n+            self.portal.folder1.doc1.absolute_url(),\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+        self.assertEqual(\n+            response.json()[\'items\'][0],\n+            response_doc.json()\n+        )\n+\n+    def test_get_content_returns_fullobjects_correct_id(self):\n+        response = requests.get(\n+            self.portal.folder1.absolute_url() + \'?fullobjects\',\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(3, len(response.json()[\'items\']))\n+        self.assertEqual(response.json()[\'items\'][1][\'@id\'],\n+                         self.portal_url + u\'/folder1/folder2\')\n+\n+    def test_get_content_returns_fullobjects_non_recursive(self):\n+        response = requests.get(\n+            self.portal.folder1.absolute_url() + \'?fullobjects\',\n+            headers={\'Accept\': \'application/json\'},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(3, len(response.json()[\'items\']))\n+        self.assertTrue(\'items\' not in response.json()[\'items\'][1])\n'

