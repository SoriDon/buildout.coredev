Repository: plone.app.users


Branch: refs/heads/master
Date: 2023-04-07T20:04:48+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/8dc9682b201f31a7c6a479d8f5cb5015b4b77c91

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/434550cc.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 00000000..b4158b89\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 00000000..4eda434e\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "434550cc"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 00000000..fdafec1c\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/434550cc.internal b/news/434550cc.internal\nnew file mode 100644\nindex 00000000..c08f5399\n--- /dev/null\n+++ b/news/434550cc.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615de..9eb73f3c 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,43 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 526aeb28..0da8f8fb 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 00000000..999746d2\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.app.users {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.app.users {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2023-04-07T20:07:46+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/84d144e2f12c5c1d210e87feafbd3d7afd42805f

chore: pyupgrade

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/users/__init__.py
M plone/app/users/browser/__init__.py
M plone/app/users/browser/account.py
M plone/app/users/browser/interfaces.py
M plone/app/users/browser/membersearch.py
M plone/app/users/browser/passwordpanel.py
M plone/app/users/browser/personalpreferences.py
M plone/app/users/browser/register.py
M plone/app/users/browser/registered.py
M plone/app/users/browser/registersettingspanel.py
M plone/app/users/browser/schemaeditor.py
M plone/app/users/browser/userdatapanel.py
M plone/app/users/field_extender.py
M plone/app/users/schema.py
M plone/app/users/setuphandlers.py
M plone/app/users/testing.py
M plone/app/users/tests/__init__.py
M plone/app/users/tests/base.py
M plone/app/users/tests/test_account.py
M plone/app/users/tests/test_doctests.py
M plone/app/users/tests/test_exportimport.py
M plone/app/users/tests/test_loginname_generator.py
M plone/app/users/tests/test_member_search.py
M plone/app/users/tests/test_new_user.py
M plone/app/users/tests/test_pam.py
M plone/app/users/tests/test_robot.py
M plone/app/users/tests/test_schema_types.py
M plone/app/users/tests/test_user_data_panel.py
M plone/app/users/tests/test_userid_generator.py
M plone/app/users/upgrades.py
M plone/app/users/utils.py
M plone/app/users/vocabularies.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/plone/app/users/__init__.py b/plone/app/users/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/users/__init__.py\n+++ b/plone/app/users/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/users/browser/__init__.py b/plone/app/users/browser/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/users/browser/__init__.py\n+++ b/plone/app/users/browser/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/users/browser/account.py b/plone/app/users/browser/account.py\nindex 5b8522b..db48fae 100644\n--- a/plone/app/users/browser/account.py\n+++ b/plone/app/users/browser/account.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n from plone.app.layout.navigation.interfaces import INavigationRoot\n@@ -33,14 +32,14 @@\n \n MESSAGE_EMAIL_CANNOT_CHANGE = \\\n     _(\'message_email_cannot_change\',\n-      default=(u"Sorry, you are not allowed to "\n-               u"change your email address."))\n+      default=("Sorry, you are not allowed to "\n+               "change your email address."))\n \n MESSAGE_EMAIL_IN_USE = \\\n     _(\'message_email_in_use\',\n-      default=(u"The email address you selected is "\n-               u"already in use or is not valid as login "\n-               u"name. Please choose another."))\n+      default=("The email address you selected is "\n+               "already in use or is not valid as login "\n+               "name. Please choose another."))\n \n \n def getSchema(schema_interface, schema_adapter, form_name=None):\n@@ -86,7 +85,7 @@ def isDefaultPortrait(value, portal):\n     return aq_inner(value) == aq_inner(default_portrait_value)\n \n \n-class AccountPanelSchemaAdapter(object):\n+class AccountPanelSchemaAdapter:\n     """Data manager that gets and sets any property mentioned\n        in the schema to the property sheet\n     """\n@@ -134,7 +133,7 @@ def __setattr__(self, name, value):\n         if name not in self.schema or hasattr(self.__class__, name):\n             # Either not part of the schema or dealt with by an explicit\n             # property\n-            return super(AccountPanelSchemaAdapter, self).__setattr__(name,\n+            return super().__setattr__(name,\n                                                                       value)\n         if isinstance(value, NamedBlobImage):\n             # any image is stored as portrait\n@@ -264,7 +263,7 @@ def validate_email(self, action, data):\n                 if err_str:\n                     notifyWidgetActionExecutionError(action, \'email\', err_str)\n \n-    @button.buttonAndHandler(_(u\'Save\'))\n+    @button.buttonAndHandler(_(\'Save\'))\n     def handleSave(self, action):\n         CheckAuthenticator(self.request)\n         data, errors = self.extractData()\n@@ -288,16 +287,16 @@ def handleSave(self, action):\n         self.request.response.redirect(self.action())\n \n     def updateActions(self):\n-        super(AccountPanelForm, self).updateActions()\n+        super().updateActions()\n         if self.actions and \'save\' in self.actions:\n             self.actions[\'save\'].addClass(\'btn btn-primary\')\n \n-    @button.buttonAndHandler(_(u\'Cancel\'))\n+    @button.buttonAndHandler(_(\'Cancel\'))\n     def cancel(self, action):\n         IStatusMessage(self.request).addStatusMessage(_("Changes canceled."),\n                                                       type="info")\n         self.request.response.redirect(\n-            \'%s%s\' % (self.request[\'ACTUAL_URL\'], self.makeQuery())\n+            \'{}{}\'.format(self.request[\'ACTUAL_URL\'], self.makeQuery())\n         )\n \n     def _on_save(self, data=None):\n@@ -323,7 +322,7 @@ def _check_allowed(context, request, name):\n         if _check_allowed(context, self.request, \'personal-information\'):\n             tabs.append({\n                 \'title\': _(\'title_personal_information_form\',\n-                           u\'Personal Information\'),\n+                           \'Personal Information\'),\n                 \'url\': navigation_root_url + \'/@@personal-information\',\n                 \'selected\': (self.__name__ == \'personal-information\'),\n                 \'id\': \'user_data-personal-information\',\n@@ -331,7 +330,7 @@ def _check_allowed(context, request, name):\n \n         if _check_allowed(context, self.request, \'personal-preferences\'):\n             tabs.append({\n-                \'title\': _(u\'Personal Preferences\'),\n+                \'title\': _(\'Personal Preferences\'),\n                 \'url\': navigation_root_url + \'/@@personal-preferences\',\n                 \'selected\': (self.__name__ == \'personal-preferences\'),\n                 \'id\': \'user_data-personal-preferences\',\n@@ -340,7 +339,7 @@ def _check_allowed(context, request, name):\n         member = mt.getAuthenticatedMember()\n         if member.canPasswordSet():\n             tabs.append({\n-                \'title\': _(\'label_password\', u\'Password\'),\n+                \'title\': _(\'label_password\', \'Password\'),\n                 \'url\': navigation_root_url + \'/@@change-password\',\n                 \'selected\': (self.__name__ == \'change-password\'),\n                 \'id\': \'user_data-change-password\',\ndiff --git a/plone/app/users/browser/interfaces.py b/plone/app/users/browser/interfaces.py\nindex 59e5399..43e1935 100644\n--- a/plone/app/users/browser/interfaces.py\n+++ b/plone/app/users/browser/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFPlone.interfaces.controlpanel import IPloneControlPanelForm\n from zope.interface import Interface\n \ndiff --git a/plone/app/users/browser/membersearch.py b/plone/app/users/browser/membersearch.py\nindex 35b606b..8e29423 100644\n--- a/plone/app/users/browser/membersearch.py\n+++ b/plone/app/users/browser/membersearch.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.autoform.form import AutoExtensibleForm\n from plone.supermodel import model\n from Products.CMFPlone import PloneMessageFactory as _\n@@ -13,30 +12,30 @@ class IMemberSearchSchema(model.Schema):\n \n     model.fieldset(\n         \'extra\',\n-        label=_(u\'legend_member_search_criteria\',\n-                default=u\'User Search Criteria\'),\n+        label=_(\'legend_member_search_criteria\',\n+                default=\'User Search Criteria\'),\n         fields=[\'login\', \'email\', \'fullname\']\n     )\n \n     login = schema.TextLine(\n-        title=_(u\'label_name\', default=u\'Name\'),\n+        title=_(\'label_name\', default=\'Name\'),\n         description=_(\n-            u\'help_search_name\',\n-            default=u\'Find users whose login name contain\'),\n+            \'help_search_name\',\n+            default=\'Find users whose login name contain\'),\n         required=False,\n     )\n     email = schema.TextLine(\n-        title=_(u\'label_email\', default=u\'Email\'),\n+        title=_(\'label_email\', default=\'Email\'),\n         description=_(\n-            u\'help_search_email\',\n-            default=u\'Find users whose email address contain\'),\n+            \'help_search_email\',\n+            default=\'Find users whose email address contain\'),\n         required=False,\n     )\n     fullname = schema.TextLine(\n-        title=_(u\'label_fullname\', default=u\'Full Name\'),\n+        title=_(\'label_fullname\', default=\'Full Name\'),\n         description=_(\n-            u\'help_search_fullname\',\n-            default=u\'Find users whose full names contain\'),\n+            \'help_search_fullname\',\n+            default=\'Find users whose full names contain\'),\n         required=False,\n     )\n     # disabled: https://dev.plone.org/ticket/13862\n@@ -85,17 +84,17 @@ class MemberSearchForm(AutoExtensibleForm, form.Form):\n     schema = IMemberSearchSchema\n     ignoreContext = True\n \n-    label = _(u\'heading_member_search\', default=u\'Search for users\')\n-    description = _(u\'description_member_search\',\n-                    default=u\'This search form enables you to find users by \'\n-                            u\'specifying one or more search criteria.\')\n+    label = _(\'heading_member_search\', default=\'Search for users\')\n+    description = _(\'description_member_search\',\n+                    default=\'This search form enables you to find users by \'\n+                            \'specifying one or more search criteria.\')\n     template = ViewPageTemplateFile(\'membersearch_form.pt\')\n     enableCSRFProtection = True\n     formErrorsMessage = _(\'There were errors.\')\n \n     submitted = False\n \n-    @button.buttonAndHandler(_(u\'label_search\', default=u\'Search\'),\n+    @button.buttonAndHandler(_(\'label_search\', default=\'Search\'),\n                              name=\'search\')\n     def handleApply(self, action):\n         request = self.request\n@@ -110,4 +109,4 @@ def handleApply(self, action):\n \n             view = self.context.restrictedTraverse(\'@@pas_search\')\n             criteria = extractCriteriaFromRequest(self.request.form.copy())\n-            self.results = view.searchUsers(sort_by=u\'fullname\', **criteria)\n+            self.results = view.searchUsers(sort_by=\'fullname\', **criteria)\ndiff --git a/plone/app/users/browser/passwordpanel.py b/plone/app/users/browser/passwordpanel.py\nindex 7d6faa2..20b00ef 100644\n--- a/plone/app/users/browser/passwordpanel.py\n+++ b/plone/app/users/browser/passwordpanel.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.users.browser.account import AccountPanelForm\n from plone.app.users.utils import notifyWidgetActionExecutionError\n@@ -16,30 +15,30 @@ class IPasswordSchema(Interface):\n     """Provide schema for password form """\n \n     current_password = schema.Password(\n-        title=_(u\'label_current_password\', default=u\'Current password\'),\n+        title=_(\'label_current_password\', default=\'Current password\'),\n         description=_(\n-            u\'help_current_password\',\n-            default=u\'Enter your current password.\'),\n+            \'help_current_password\',\n+            default=\'Enter your current password.\'),\n         # constraint=checkCurrentPassword,\n     )\n \n     new_password = schema.Password(\n-        title=_(u\'label_new_password\', default=u\'New password\'),\n+        title=_(\'label_new_password\', default=\'New password\'),\n         description=_(\n-            u\'help_new_password\',\n-            default=u"Enter your new password."),\n+            \'help_new_password\',\n+            default="Enter your new password."),\n     )\n \n     new_password_ctl = schema.Password(\n-        title=_(u\'label_confirm_password\', default=u\'Confirm password\'),\n+        title=_(\'label_confirm_password\', default=\'Confirm password\'),\n         description=_(\n-            u\'help_confirm_password\',\n-            default=u"Re-enter the password. "\n-            u"Make sure the passwords are identical."),\n+            \'help_confirm_password\',\n+            default="Re-enter the password. "\n+            "Make sure the passwords are identical."),\n     )\n \n \n-class PasswordPanelAdapter(object):\n+class PasswordPanelAdapter:\n \n     def __init__(self, context):\n         self.context = getToolByName(context, \'portal_membership\')\n@@ -58,12 +57,12 @@ def get_dummy(self):\n class PasswordPanel(AccountPanelForm):\n     """Implementation of password reset form that uses z3c.form."""\n \n-    description = _(u"Change Password")\n-    form_name = _(u\'legend_password_details\', default=u\'Password Details\')\n+    description = _("Change Password")\n+    form_name = _(\'legend_password_details\', default=\'Password Details\')\n     schema = IPasswordSchema\n \n     def updateFields(self):\n-        super(PasswordPanel, self).updateFields()\n+        super().updateFields()\n         # Change the password description based on PAS Plugin The user needs a\n         # list of instructions on what kind of password is required.  We\'ll\n         # reuse password errors as instructions e.g. "Must contain a letter and\n@@ -72,7 +71,7 @@ def updateFields(self):\n         err_str = registration.testPasswordValidity(\'\')\n         if err_str:\n             msg = _(\n-                u\'Enter your new password. ${errors}\',\n+                \'Enter your new password. ${errors}\',\n                 mapping=dict(errors=err_str)\n             )\n             self.fields[\'new_password\'].field.description = msg\n@@ -85,12 +84,12 @@ def validate_password(self, action, data):\n         # check if password is correct\n         current_password = data.get(\'current_password\')\n         if current_password:\n-            if six.PY2 and isinstance(current_password, six.text_type):\n+            if six.PY2 and isinstance(current_password, str):\n                 current_password = current_password.encode(\'utf8\')\n \n             if not membertool.testCurrentPassword(current_password):\n                 # add error to current_password widget\n-                err_str = _(u"Incorrect value for current password")\n+                err_str = _("Incorrect value for current password")\n                 notifyWidgetActionExecutionError(action,\n                                                  \'current_password\', err_str)\n \n@@ -109,7 +108,7 @@ def validate_password(self, action, data):\n                                                  \'new_password_ctl\', err_str)\n \n     @button.buttonAndHandler(\n-        _(u\'label_change_password\', default=u\'Change Password\'),\n+        _(\'label_change_password\', default=\'Change Password\'),\n         name=\'reset_passwd\'\n     )\n     def action_reset_passwd(self, action):\n@@ -125,15 +124,15 @@ def action_reset_passwd(self, action):\n         membertool = getToolByName(self.context, \'portal_membership\')\n \n         password = data[\'new_password\']\n-        if six.PY2 and isinstance(password, six.text_type):\n+        if six.PY2 and isinstance(password, str):\n             password = password.encode(\'utf8\')\n \n         try:\n             membertool.setPassword(password, None, REQUEST=self.request)\n         except AttributeError:\n-            failMessage = _(u\'While changing your password an AttributeError \'\n-                            u\'occurred. This is usually caused by your user \'\n-                            u\'being defined outside the portal.\')\n+            failMessage = _(\'While changing your password an AttributeError \'\n+                            \'occurred. This is usually caused by your user \'\n+                            \'being defined outside the portal.\')\n \n             IStatusMessage(self.request).addStatusMessage(\n                 _(failMessage), type="error"\n@@ -145,10 +144,10 @@ def action_reset_passwd(self, action):\n         )\n \n     # hide inherited Save and Cancel buttons\n-    @button.buttonAndHandler(_(u\'Save\'), condition=lambda form: False)\n+    @button.buttonAndHandler(_(\'Save\'), condition=lambda form: False)\n     def handleSave(self, action):\n         pass\n \n-    @button.buttonAndHandler(_(u\'Cancel\'), condition=lambda form: False)\n+    @button.buttonAndHandler(_(\'Cancel\'), condition=lambda form: False)\n     def cancel(self, action):\n         pass\ndiff --git a/plone/app/users/browser/personalpreferences.py b/plone/app/users/browser/personalpreferences.py\nindex 9a9d866..74c16f7 100644\n--- a/plone/app/users/browser/personalpreferences.py\n+++ b/plone/app/users/browser/personalpreferences.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.users.browser.account import AccountPanelForm\n from plone.app.users.browser.account import AccountPanelSchemaAdapter\n from Products.CMFCore.utils import getToolByName\n@@ -28,33 +27,33 @@ class IPersonalPreferences(Interface):\n     """Provide schema for personalize form."""\n \n     wysiwyg_editor = Choice(\n-        title=_(u\'label_wysiwyg_editor\', default=u\'Wysiwyg editor\'),\n+        title=_(\'label_wysiwyg_editor\', default=\'Wysiwyg editor\'),\n         description=_(\n-            u\'help_wysiwyg_editor\',\n-            default=u\'Wysiwyg editor to use.\'\n+            \'help_wysiwyg_editor\',\n+            default=\'Wysiwyg editor to use.\'\n         ),\n         vocabulary="plone.app.vocabularies.AvailableEditors",\n         required=False,\n     )\n \n     language = Choice(\n-        title=_(u\'label_language\', default=u\'Language\'),\n-        description=_(u\'help_preferred_language\', u\'Your preferred language.\'),\n+        title=_(\'label_language\', default=\'Language\'),\n+        description=_(\'help_preferred_language\', \'Your preferred language.\'),\n         vocabulary="plone.app.vocabularies.AvailableContentLanguages",\n         required=False\n     )\n \n     if HAS_PAE and HAS_DT_VOCAB:\n         timezone = Choice(\n-            title=_(u\'label_timezone\', default=u\'Time zone\'),\n-            description=_(u\'help_timezone\', default=u\'Your time zone\'),\n+            title=_(\'label_timezone\', default=\'Time zone\'),\n+            description=_(\'help_timezone\', default=\'Your time zone\'),\n             vocabulary=\'plone.app.vocabularies.AvailableTimezones\',\n             required=False,\n         )\n     elif HAS_PAE:\n         timezone = Choice(\n-            title=_(u\'label_timezone\', default=u\'Time zone\'),\n-            description=_(u\'help_timezone\', default=u\'Your time zone\'),\n+            title=_(\'label_timezone\', default=\'Time zone\'),\n+            description=_(\'help_timezone\', default=\'Your time zone\'),\n             vocabulary=\'plone.app.vocabularies.Timezones\',\n             required=False,\n         )\n@@ -67,7 +66,7 @@ class PersonalPreferencesPanelAdapter(AccountPanelSchemaAdapter):\n class PersonalPreferencesPanel(AccountPanelForm):\n     """Implementation of personalize form that uses z3c.form."""\n \n-    form_name = _(u\'legend_personal_details\', u\'Personal Details\')\n+    form_name = _(\'legend_personal_details\', \'Personal Details\')\n     schema = IPersonalPreferences\n \n     @property\n@@ -77,32 +76,32 @@ def description(self):\n         if userid and (userid != mt.getAuthenticatedMember().getId()):\n             # editing someone else\'s profile\n             return _(\n-                u\'description_preferences_form_otheruser\',\n+                \'description_preferences_form_otheruser\',\n                 default=\'Personal settings for $name\',\n                 mapping={\'name\': userid}\n             )\n         else:\n             # editing my own profile\n             return _(\n-                u\'description_my_preferences\',\n+                \'description_my_preferences\',\n                 default=\'Your personal settings.\'\n             )\n \n     def updateWidgets(self):\n-        super(PersonalPreferencesPanel, self).updateWidgets()\n+        super().updateWidgets()\n \n         self.widgets[\'language\'].noValueMessage = _(\n-            u"vocabulary-missing-single-value-for-edit",\n-            u"Language neutral (site default)"\n+            "vocabulary-missing-single-value-for-edit",\n+            "Language neutral (site default)"\n         )\n         self.widgets[\'wysiwyg_editor\'].noValueMessage = _(\n-            u"vocabulary-available-editor-novalue",\n-            u"Use site default"\n+            "vocabulary-available-editor-novalue",\n+            "Use site default"\n         )\n \n     def __call__(self):\n         self.request.set(\'disable_border\', 1)\n-        return super(PersonalPreferencesPanel, self).__call__()\n+        return super().__call__()\n \n \n class PersonalPreferencesConfiglet(PersonalPreferencesPanel):\ndiff --git a/plone/app/users/browser/register.py b/plone/app/users/browser/register.py\nindex 67b9d4e..accf689 100644\n--- a/plone/app/users/browser/register.py\n+++ b/plone/app/users/browser/register.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from plone.app.users.browser.account import AccountPanelSchemaAdapter\n from plone.app.users.browser.account import getSchema\n@@ -53,8 +52,8 @@ def getRegisterSchema():\n \n class BaseRegistrationForm(AutoExtensibleForm, form.Form):\n     """Form to be used as base for Register and Add User forms."""\n-    label = u""\n-    description = u""\n+    label = ""\n+    description = ""\n     formErrorsMessage = _(\'There were errors.\')\n     ignoreContext = True\n     enableCSRFProtection = True\n@@ -75,7 +74,7 @@ def render(self):\n         if self._finishedRegister:\n             return self.context.unrestrictedTraverse(\'registered\')()\n \n-        return super(BaseRegistrationForm, self).render()\n+        return super().render()\n \n     def updateFields(self):\n         """Fields are dynamic in this form, to be able to handle\n@@ -86,22 +85,22 @@ def updateFields(self):\n \n         # Finally, let autoform process the schema and any FormExtenders do\n         # their thing\n-        super(BaseRegistrationForm, self).updateFields()\n+        super().updateFields()\n \n         if use_email_as_login:\n             self.fields[\'email\'].field.description = _(\n-                u\'help_email_creation_for_login\', default=u"Enter an email "\n+                \'help_email_creation_for_login\', default="Enter an email "\n                 "address. This will be your login name. We respect your "\n                 "privacy, and will not give the address away to any third "\n                 "parties or expose it anywhere.")\n             del self.fields[\'username\']\n         else:\n             self.fields[\'email\'].field.description = _(\n-                u\'help_email_creation\',\n-                default=u"Enter an email address. This is necessary in case "\n-                        u"the password is lost. We respect your privacy, and "\n-                        u"will not give the address away to any third parties "\n-                        u"or expose it anywhere."\n+                \'help_email_creation\',\n+                default="Enter an email address. This is necessary in case "\n+                        "the password is lost. We respect your privacy, and "\n+                        "will not give the address away to any third parties "\n+                        "or expose it anywhere."\n             )\n \n         # Change the password description based on PAS Plugin The user needs a\n@@ -113,14 +112,14 @@ def updateFields(self):\n             err_str = registration.testPasswordValidity(\'\')\n             if err_str:\n                 msg = _(\n-                    u\'help_password_creation_with_errors\',\n-                    default=u\'Enter your new password. ${errors}\',\n+                    \'help_password_creation_with_errors\',\n+                    default=\'Enter your new password. ${errors}\',\n                     mapping=dict(errors=err_str)\n                 )\n                 self.fields[\'password\'].field.description = msg\n \n     def updateActions(self):\n-        super(BaseRegistrationForm, self).updateActions()\n+        super().updateActions()\n         self.actions[\'register\'].addClass(\'btn-primary\')\n \n     def generate_user_id(self, data):\n@@ -299,7 +298,7 @@ def validate_registration(self, action, data):\n                 password = data.get(\'password\')\n                 password_ctl = data.get(\'password_ctl\')\n                 if password != password_ctl:\n-                    err_str = _(u\'Passwords do not match.\')\n+                    err_str = _(\'Passwords do not match.\')\n                     notifyWidgetActionExecutionError(action,\n                                                      \'password\', err_str)\n                     notifyWidgetActionExecutionError(action,\n@@ -346,7 +345,7 @@ def validate_registration(self, action, data):\n         if username_field not in error_keys:\n             # user id may not be the same as the portal id.\n             if user_id == portal.getId():\n-                err_str = _(u"This username is reserved. Please choose a "\n+                err_str = _("This username is reserved. Please choose a "\n                             "different name.")\n                 notifyWidgetActionExecutionError(action,\n                                                  username_field, err_str)\n@@ -354,7 +353,7 @@ def validate_registration(self, action, data):\n         # Check if user id is allowed by the member id pattern.\n         if username_field not in error_keys:\n             if not registration.isMemberIdAllowed(user_id):\n-                err_str = _(u"The login name you selected is already in use "\n+                err_str = _("The login name you selected is already in use "\n                             "or is not valid. Please choose another.")\n                 notifyWidgetActionExecutionError(action,\n                                                  username_field, err_str)\n@@ -365,7 +364,7 @@ def validate_registration(self, action, data):\n             pas = getToolByName(self, \'acl_users\')\n             results = pas.searchUsers(name=login_name, exact_match=True)\n             if results:\n-                err_str = _(u"The login name you selected is already in use "\n+                err_str = _("The login name you selected is already in use "\n                             "or is not valid. Please choose another.")\n                 notifyWidgetActionExecutionError(action,\n                                                  username_field, err_str)\n@@ -374,7 +373,7 @@ def validate_registration(self, action, data):\n             # Admin can either set a password or mail the user (or both).\n             if not (data[\'password\'] or data[\'mail_me\']):\n                 err_str = _(\'msg_no_password_no_mail_me\',\n-                            default=u"You must set a password or choose to "\n+                            default="You must set a password or choose to "\n                             "send an email.")\n \n                 # set error on password field\n@@ -382,7 +381,7 @@ def validate_registration(self, action, data):\n                 notifyWidgetActionExecutionError(action, \'mail_me\', err_str)\n \n     @button.buttonAndHandler(\n-        _(u\'label_register\', default=u\'Register\'), name=\'register\'\n+        _(\'label_register\', default=\'Register\'), name=\'register\'\n     )\n     def action_join(self, action):\n         data, errors = self.extractData()\n@@ -418,9 +417,9 @@ def handle_join_success(self, data):\n             # I have seen a unicode user id.  I cannot reproduce it, but\n             # let\'s make them strings, otherwise you run into trouble with\n             # plone.session when trying to login.\n-            if isinstance(user_id, six.text_type):\n+            if isinstance(user_id, str):\n                 user_id = user_id.encode(\'utf8\')\n-            if isinstance(login_name, six.text_type):\n+            if isinstance(login_name, str):\n                 login_name = login_name.encode(\'utf8\')\n \n         # Set the username for good measure, as some code may expect\n@@ -435,7 +434,7 @@ def handle_join_success(self, data):\n         self.request.form[\'form.username\'] = login_name\n \n         password = data.get(\'password\') or registration.generatePassword()\n-        if six.PY2 and isinstance(password, six.text_type):\n+        if six.PY2 and isinstance(password, str):\n             password = password.encode(\'utf8\')\n \n         try:\n@@ -488,22 +487,22 @@ def handle_join_success(self, data):\n                         [user_id], REQUEST=self.request)\n                     self._finishedRegister = False\n                     IStatusMessage(self.request).addStatusMessage(\n-                        _(u\'status_fatal_password_mail\',\n-                          default=u"Failed to create your account: we were "\n+                        _(\'status_fatal_password_mail\',\n+                          default="Failed to create your account: we were "\n                           "unable to send instructions for setting a password "\n                           "to your email address: ${address}",\n-                          mapping={u\'address\': data.get(\'email\', \'\')}),\n+                          mapping={\'address\': data.get(\'email\', \'\')}),\n                         type=\'error\')\n                 else:\n                     # This should only happen when an admin registers\n                     # a user.  The admin should have seen a warning\n                     # already, but we warn again for clarity.\n                     IStatusMessage(self.request).addStatusMessage(\n-                        _(u\'status_nonfatal_password_mail\',\n-                          default=u"This account has been created, but we "\n+                        _(\'status_nonfatal_password_mail\',\n+                          default="This account has been created, but we "\n                           "were unable to send instructions for setting a "\n                           "password to this email address: ${address}",\n-                          mapping={u\'address\': data.get(\'email\', \'\')}),\n+                          mapping={\'address\': data.get(\'email\', \'\')}),\n                         type=\'warning\')\n \n     def applyProperties(self, userid, data):\n@@ -544,8 +543,8 @@ def applyProperties(self, userid, data):\n class RegistrationForm(BaseRegistrationForm):\n     """Dynamically get fields from user data, through admin config settings.\n     """\n-    label = _(u\'heading_registration_form\', default=u\'Registration form\')\n-    description = u""\n+    label = _(\'heading_registration_form\', default=\'Registration form\')\n+    description = ""\n     template = ViewPageTemplateFile(\'register_form.pt\')\n \n     @property\n@@ -570,7 +569,7 @@ def updateFields(self):\n             # will never get displayed.\n             return\n \n-        super(RegistrationForm, self).updateFields()\n+        super().updateFields()\n         defaultFields = field.Fields(self.fields)\n \n         # Can the user actually set his/her own password?\n@@ -593,7 +592,7 @@ def updateWidgets(self):\n             # will never get displayed.\n             return\n \n-        super(RegistrationForm, self).updateWidgets()\n+        super().updateWidgets()\n         settings = self._get_security_settings()\n         if not settings.enable_user_pwd_choice:\n             # Show a message indicating that a password reset link\n@@ -602,22 +601,22 @@ def updateWidgets(self):\n             widget.mode = DISPLAY_MODE\n             widget.value = [\'selected\']\n             widget.label = _(\n-                u\'label_password_change_mail\',\n-                default=u"A URL will be generated and e-mailed to you; "\n-                        u"follow the link to reach a page where you can "\n-                        u"change your password and complete the registration "\n-                        u"process.")\n+                \'label_password_change_mail\',\n+                default="A URL will be generated and e-mailed to you; "\n+                        "follow the link to reach a page where you can "\n+                        "change your password and complete the registration "\n+                        "process.")\n             widget.terms = None\n             widget.updateTerms()\n \n \n class AddUserForm(BaseRegistrationForm):\n-    label = _(u\'heading_add_user_form\', default=u\'Add New User\')\n-    description = u""\n+    label = _(\'heading_add_user_form\', default=\'Add New User\')\n+    description = ""\n     template = ViewPageTemplateFile(\'newuser_form.pt\')\n \n     def updateFields(self):\n-        super(AddUserForm, self).updateFields()\n+        super().updateFields()\n         defaultFields = field.Fields(self.fields)\n \n         # The mail_me field needs special handling depending on the\n@@ -649,7 +648,7 @@ def updateFields(self):\n         self.fields = allFields\n \n     def updateWidgets(self):\n-        super(AddUserForm, self).updateWidgets()\n+        super().updateWidgets()\n \n         # set display mode for mail_me field if no mailhost is configured\n         portal = getUtility(ISiteRoot)\n@@ -662,17 +661,17 @@ def updateWidgets(self):\n             widget.mode = DISPLAY_MODE\n             widget.value = [\'selected\']\n             widget.label = _(\n-                u\'label_cant_mail_password_reset\',\n-                default=u"Normally we would offer to send the user an email "\n-                        u"with instructions to set a password on completion "\n-                        u"of this form. But this site does not have a valid "\n-                        u"email setup. You can fix this in the Mail settings."\n+                \'label_cant_mail_password_reset\',\n+                default="Normally we would offer to send the user an email "\n+                        "with instructions to set a password on completion "\n+                        "of this form. But this site does not have a valid "\n+                        "email setup. You can fix this in the Mail settings."\n             )\n             widget.terms = None\n             widget.updateTerms()\n \n     @button.buttonAndHandler(\n-        _(u\'label_register\', default=u\'Register\'), name=\'register\'\n+        _(\'label_register\', default=\'Register\'), name=\'register\'\n     )\n     def action_join(self, action):\n         data, errors = self.extractData()\n@@ -709,7 +708,7 @@ def action_join(self, action):\n             return\n \n         IStatusMessage(self.request).addStatusMessage(\n-            _(u"User added."), type=\'info\')\n+            _("User added."), type=\'info\')\n         self.request.response.redirect(\n             self.context.absolute_url() +\n             \'/@@usergroup-userprefs?searchstring=\' + user_id)\ndiff --git a/plone/app/users/browser/registered.py b/plone/app/users/browser/registered.py\nindex f4ca723..7d7cc7e 100644\n--- a/plone/app/users/browser/registered.py\n+++ b/plone/app/users/browser/registered.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n from Products.Five import BrowserView\n from zope.component import getMultiAdapter\ndiff --git a/plone/app/users/browser/registersettingspanel.py b/plone/app/users/browser/registersettingspanel.py\nindex ab80eee..07e93a3 100644\n--- a/plone/app/users/browser/registersettingspanel.py\n+++ b/plone/app/users/browser/registersettingspanel.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.users.schema import IRegistrationSettingsSchema\n from plone.protect import CheckAuthenticator\n from Products.CMFCore.utils import getToolByName\n@@ -13,8 +12,8 @@\n \n class RegistrationControlPanel(form.Form):\n     label = _("Users and Groups")\n-    description = _(u"Registration settings for this site.")\n-    form_name = _(u"Registration settings")\n+    description = _("Registration settings for this site.")\n+    form_name = _("Registration settings")\n     enableCSRFProtection = True\n \n     formErrorsMessage = _(\'There were errors.\')\n@@ -29,7 +28,7 @@ def getContent(self):\n             \'user_registration_fields\', [])}\n \n     @button.buttonAndHandler(\n-        _(u\'label_apply_changes\', default=u\'Apply changes\'),\n+        _(\'label_apply_changes\', default=\'Apply changes\'),\n         name=\'save\'\n     )\n     def action_save(self, action):\n@@ -69,7 +68,7 @@ def action_save(self, action):\n     #     self.request.response.redirect(url + \'/@@overview-controlpanel\')\n \n     def updateActions(self):\n-        super(RegistrationControlPanel, self).updateActions()\n+        super().updateActions()\n         if self.actions and \'save\' in self.actions:\n             self.actions[\'save\'].addclass(\'btn btn-primary\')\n \ndiff --git a/plone/app/users/browser/schemaeditor.py b/plone/app/users/browser/schemaeditor.py\nindex 5c7e304..219d7ff 100644\n--- a/plone/app/users/browser/schemaeditor.py\n+++ b/plone/app/users/browser/schemaeditor.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.users.schema import IRegisterSchema\n from plone.app.users.schema import IUserDataSchema\n from plone.app.users.schema import SCHEMA_ANNOTATION\n@@ -33,17 +32,17 @@\n SPLITTER = \'_//_\'\n \n ALLOWED_FIELDS = [\n-    u\'zope.schema._bootstrapfields.TextLine\',\n-    u\'zope.schema._bootstrapfields.Text\',\n-    u\'zope.schema._bootstrapfields.Bool\',\n-    u\'zope.schema._bootstrapfields.Int\',\n-    u\'zope.schema._field.Float\',\n-    u\'zope.schema._field.Set\',\n-    u\'zope.schema._field.Choice\',\n-    u\'zope.schema._field.Date\',\n-    u\'zope.schema._field.Datetime\',\n-    u\'plone.namedfile.field.NamedBlobImage\',\n-    u\'zope.schema._field.URI\',\n+    \'zope.schema._bootstrapfields.TextLine\',\n+    \'zope.schema._bootstrapfields.Text\',\n+    \'zope.schema._bootstrapfields.Bool\',\n+    \'zope.schema._bootstrapfields.Int\',\n+    \'zope.schema._field.Float\',\n+    \'zope.schema._field.Set\',\n+    \'zope.schema._field.Choice\',\n+    \'zope.schema._field.Date\',\n+    \'zope.schema._field.Datetime\',\n+    \'plone.namedfile.field.NamedBlobImage\',\n+    \'zope.schema._field.URI\',\n ]\n field_type_mapping = {\n     "ProtectedEmail": \'string\',\n@@ -95,7 +94,7 @@ class SchemaListingPage(FormWrapper):\n @implementer(IMemberSchemaContext)\n class MemberSchemaContext(SchemaContext):\n \n-    label = _(u"Edit Member Form Fields")\n+    label = _("Edit Member Form Fields")\n \n     def __init__(self, context, request):\n         self.fieldsWhichCannotBeDeleted = [\'fullname\', \'email\']\n@@ -104,11 +103,11 @@ def __init__(self, context, request):\n         self.allowedFields = ALLOWED_FIELDS\n \n         schema = getFromBaseSchema(IUserDataSchema)\n-        super(MemberSchemaContext, self).__init__(\n+        super().__init__(\n             schema,\n             request,\n             name=SCHEMATA_KEY,\n-            title=_(u"Member Fields"),\n+            title=_("Member Fields"),\n         )\n \n \n@@ -126,7 +125,7 @@ def applySchema(snew_schema):\n     # check if more than 2 image fields:\n     if snew_schema.count(\'NamedBlobImage\') > 1:\n         site.plone_utils.addPortalMessage(\n-            _(u\'One image field maximum.\'), \'error\')\n+            _(\'One image field maximum.\'), \'error\')\n         return\n \n     # store the current schema in the annotation\n@@ -143,7 +142,7 @@ def applySchema(snew_schema):\n             new_schema[field_id].__class__.__name__,\n             None)\n         if not field_type:\n-            log(\'Unsupported field: %s (%s)\' % (\n+            log(\'Unsupported field: {} ({})\'.format(\n                 field_id,\n                 new_schema[field_id].__class__.__name__))\n             continue\n@@ -182,7 +181,7 @@ def get_ttw_edited_schema():\n \n \n @implementer(IFieldMetadataHandler)\n-class UsersMetadataSchemaExporter(object):\n+class UsersMetadataSchemaExporter:\n     """Support the security: namespace in model definitions.\n     """\n     namespace = ns = USERS_NAMESPACE\n@@ -237,9 +236,9 @@ def serialize(self, value):\n         if isinstance(value, bool):\n             value = value and "bool:true" or "bool:false"\n         elif isinstance(value, (list, set, tuple)):\n-            value = u"%s:%s" % (type(value).__name__, SPLITTER.join(value))\n+            value = f"{type(value).__name__}:{SPLITTER.join(value)}"\n         elif value is not None:\n-            value = u"int:%s" % unicode(value)\n+            value = "int:%s" % unicode(value)\n         return value\n \n \n@@ -330,11 +329,11 @@ def getFromBaseSchema(baseSchema, form_name=None):\n \n \n def copySchemaAttrs(schema, form_name):\n-    return dict([\n-        (a, copy.deepcopy(schema[a]))\n+    return {\n+        a: copy.deepcopy(schema[a])\n         for a in schema\n         if field_in_form(schema[a], form_name)\n-    ])\n+    }\n \n \n default_fields = list(IUserDataSchema.names()) + list(IRegisterSchema.names())\ndiff --git a/plone/app/users/browser/userdatapanel.py b/plone/app/users/browser/userdatapanel.py\nindex aa762a3..c20d746 100644\n--- a/plone/app/users/browser/userdatapanel.py\n+++ b/plone/app/users/browser/userdatapanel.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.SecurityManagement import getSecurityManager\n from plone.app.users.browser.account import AccountPanelForm\n from plone.app.users.browser.account import AccountPanelSchemaAdapter\n@@ -59,7 +58,7 @@ def set_email(self, value):\n \n class UserDataPanel(AccountPanelForm):\n \n-    form_name = _(u\'User Data Form\')\n+    form_name = _(\'User Data Form\')\n     enableCSRFProtection = True\n \n     @property\n@@ -74,14 +73,14 @@ def description(self):\n         if userid and (userid != mt.getAuthenticatedMember().getId()):\n             # editing someone else\'s profile\n             return _(\n-                u\'description_personal_information_form_otheruser\',\n+                \'description_personal_information_form_otheruser\',\n                 default=\'Change personal information for $name\',\n                 mapping={\'name\': escape(userid)}\n             )\n         else:\n             # editing my own profile\n             return _(\n-                u\'description_personal_information_form\',\n+                \'description_personal_information_form\',\n                 default=\'Change your personal information\'\n             )\n \n@@ -92,12 +91,12 @@ def __call__(self):\n             if mt.getMemberById(userid) is None:\n                 raise NotFound(\'User does not exist.\')\n         self.request.set(\'disable_border\', 1)\n-        return super(UserDataPanel, self).__call__()\n+        return super().__call__()\n \n \n def getUserDataSchema():\n     portal = get_portal()\n-    form_name = u\'In User Profile\'\n+    form_name = \'In User Profile\'\n     if getSecurityManager().checkPermission(\'Manage portal\', portal):\n         form_name = None\n     schema = getSchema(IUserDataSchema, UserDataPanelAdapter, form_name=form_name)\ndiff --git a/plone/app/users/field_extender.py b/plone/app/users/field_extender.py\nindex 36156ae..4445913 100644\n--- a/plone/app/users/field_extender.py\n+++ b/plone/app/users/field_extender.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.users.browser.schemaeditor import USERS_NAMESPACE\n from plone.app.users.browser.schemaeditor import USERS_PREFIX\n from plone.autoform import directives as form\n@@ -16,18 +15,18 @@\n \n \n form_vocab = SimpleVocabulary([\n-    SimpleTerm(value=u\'On Registration\',\n-               title=u\'On Registration\'),\n-    SimpleTerm(value=u\'In User Profile\',\n-               title=u\'In User Profile\'),\n+    SimpleTerm(value=\'On Registration\',\n+               title=\'On Registration\'),\n+    SimpleTerm(value=\'In User Profile\',\n+               title=\'In User Profile\'),\n ])\n \n \n class IUserFormSelection(Interface):\n     form.widget(forms=CheckBoxFieldWidget)\n     forms = zope.schema.List(\n-        title=u"Where should this field be shown",\n-        description=u"Does not apply to username or to email fields",\n+        title="Where should this field be shown",\n+        description="Does not apply to username or to email fields",\n         required=True,\n         value_type=zope.schema.Choice(vocabulary=form_vocab),\n     )\n@@ -41,7 +40,7 @@ def get_user_addform_selection(schema_context):\n     return IUserFormSelection\n \n \n-class UserFormSelectionAdapter(object):\n+class UserFormSelectionAdapter:\n     adapts(IField)\n \n     def __init__(self, field):\n@@ -58,7 +57,7 @@ def _set_forms(self, value):\n \n \n @implementer(IFieldMetadataHandler)\n-class UserFormSelectionMetadata(object):\n+class UserFormSelectionMetadata:\n \n     namespace = USERS_NAMESPACE\n     prefix = USERS_PREFIX\ndiff --git a/plone/app/users/schema.py b/plone/app/users/schema.py\nindex a842b8c..367a3cc 100644\n--- a/plone/app/users/schema.py\n+++ b/plone/app/users/schema.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.formwidget.namedfile.widget import NamedImageWidget\n from plone.namedfile.interfaces import INamedImageField\n from plone.schema.email import Email\n@@ -51,7 +50,7 @@ class ProtectedEmail(Email):\n @implementer(IFieldFactory)\n class NotEditableFieldFactory(FieldFactory):\n \n-    title = _(u\'(protected)\')\n+    title = _(\'(protected)\')\n \n     def protected(self, field):\n         return True\n@@ -59,12 +58,12 @@ def protected(self, field):\n \n FullnameFieldFactory = NotEditableFieldFactory(\n     ProtectedTextLine,\n-    _(u\'label_full_name\', default=u\'Full Name\'),\n+    _(\'label_full_name\', default=\'Full Name\'),\n )\n \n EmailFieldFactory = NotEditableFieldFactory(\n     ProtectedEmail,\n-    _(u\'label_email\', default=u\'Email\'),\n+    _(\'label_email\', default=\'Email\'),\n )\n \n \n@@ -73,15 +72,15 @@ class IUserDataSchema(Interface):\n     """\n \n     fullname = ProtectedTextLine(\n-        title=_(u\'label_full_name\', default=u\'Full Name\'),\n-        description=_(u\'help_full_name_creation\',\n-                      default=u"Enter full name, e.g. John Smith."),\n+        title=_(\'label_full_name\', default=\'Full Name\'),\n+        description=_(\'help_full_name_creation\',\n+                      default="Enter full name, e.g. John Smith."),\n         required=False)\n \n     email = ProtectedEmail(\n-        title=_(u\'label_email\', default=u\'Email\'),\n-        description=u\'We will use this address if you need to recover your \'\n-                    u\'password\',\n+        title=_(\'label_email\', default=\'Email\'),\n+        description=\'We will use this address if you need to recover your \'\n+                    \'password\',\n         required=True,\n         constraint=checkEmailAddress,\n     )\n@@ -90,32 +89,32 @@ class IUserDataSchema(Interface):\n class IRegisterSchema(Interface):\n \n     username = schema.ASCIILine(\n-        title=_(u\'label_user_name\', default=u\'User Name\'),\n+        title=_(\'label_user_name\', default=\'User Name\'),\n         description=_(\n-            u\'help_user_name_creation_casesensitive\',\n-            default=u"Enter a user name, usually something like \'jsmith\'. "\n-                    u"No spaces or special characters. Usernames and "\n-                    u"passwords are case sensitive, make sure the caps lock "\n-                    u"key is not enabled. This is the name used to log in."\n+            \'help_user_name_creation_casesensitive\',\n+            default="Enter a user name, usually something like \'jsmith\'. "\n+                    "No spaces or special characters. Usernames and "\n+                    "passwords are case sensitive, make sure the caps lock "\n+                    "key is not enabled. This is the name used to log in."\n         )\n     )\n \n     password = schema.Password(\n-        title=_(u\'label_password\', default=u\'Password\'),\n-        description=_(u\'help_password_creation\',\n-                      default=u\'Enter your new password.\'))\n+        title=_(\'label_password\', default=\'Password\'),\n+        description=_(\'help_password_creation\',\n+                      default=\'Enter your new password.\'))\n \n     password_ctl = schema.Password(\n-        title=_(u\'label_confirm_password\',\n-                default=u\'Confirm password\'),\n-        description=_(u\'help_confirm_password\',\n-                      default=u"Re-enter the password. "\n+        title=_(\'label_confirm_password\',\n+                default=\'Confirm password\'),\n+        description=_(\'help_confirm_password\',\n+                      default="Re-enter the password. "\n                       "Make sure the passwords are identical."))\n \n     mail_me = schema.Bool(\n-        title=_(u\'label_mail_password\',\n-                default=u"Send a confirmation mail with a link to set the "\n-                u"password"),\n+        title=_(\'label_mail_password\',\n+                default="Send a confirmation mail with a link to set the "\n+                "password"),\n         required=False,\n         default=False)\n \n@@ -127,9 +126,9 @@ class ICombinedRegisterSchema(IRegisterSchema, IUserDataSchema):\n class IAddUserSchema(Interface):\n \n     groups = schema.List(\n-        title=_(u\'label_add_to_groups\',\n-                default=u\'Add to the following groups:\'),\n-        description=u\'\',\n+        title=_(\'label_add_to_groups\',\n+                default=\'Add to the following groups:\'),\n+        description=\'\',\n         required=False,\n         value_type=schema.Choice(vocabulary=\'plone.app.users.group_ids\'))\n \n@@ -151,11 +150,11 @@ def download_url(self):\n         if not userid:\n             return None\n \n-        url = super(PortraitWidget, self).download_url\n+        url = super().download_url\n         if not url:\n             return None\n \n-        return \'%s?%s\' % (url, make_query({\'userid\': userid}))\n+        return \'{}?{}\'.format(url, make_query({\'userid\': userid}))\n \n \n @implementer(IFieldWidget)\n@@ -168,17 +167,17 @@ class IRegistrationSettingsSchema(Interface):\n \n     user_registration_fields = schema.Tuple(\n         title=_(\n-            u\'title_user_registration_fields\',\n-            default=u\'User registration fields\'\n+            \'title_user_registration_fields\',\n+            default=\'User registration fields\'\n         ),\n         description=_(\n-            u"description_user_registration_fields",\n-            default=(u"Select the fields for the join form. Fields in the "\n-                     u"right box will be shown on the form, fields on the "\n-                     u"left are disabled. Use the left/right buttons to move "\n-                     u"a field from right to left (to disable it) and vice "\n-                     u"versa. Use the up/down buttons to change the order in "\n-                     u"which the fields appear on the form."),\n+            "description_user_registration_fields",\n+            default=("Select the fields for the join form. Fields in the "\n+                     "right box will be shown on the form, fields on the "\n+                     "left are disabled. Use the left/right buttons to move "\n+                     "a field from right to left (to disable it) and vice "\n+                     "versa. Use the up/down buttons to change the order in "\n+                     "which the fields appear on the form."),\n         ),\n         value_type=schema.Choice(\n             vocabulary=\'plone.app.users.user_registration_fields\'),\ndiff --git a/plone/app/users/setuphandlers.py b/plone/app/users/setuphandlers.py\nindex 3fd8b06..9a82740 100644\n--- a/plone/app/users/setuphandlers.py\n+++ b/plone/app/users/setuphandlers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFPlone.utils import safe_encode\n \n import logging\ndiff --git a/plone/app/users/testing.py b/plone/app/users/testing.py\nindex cef3a16..8061f5a 100644\n--- a/plone/app/users/testing.py\n+++ b/plone/app/users/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.robotframework.testing import REMOTE_LIBRARY_BUNDLE_FIXTURE\n from plone.app.testing import applyProfile\ndiff --git a/plone/app/users/tests/__init__.py b/plone/app/users/tests/__init__.py\nindex 40a96af..e69de29 100644\n--- a/plone/app/users/tests/__init__.py\n+++ b/plone/app/users/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py\nindex a309817..774ffc2 100644\n--- a/plone/app/users/tests/base.py\n+++ b/plone/app/users/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Base class for flexible user registration test cases.\n \n This is in a separate module because it\'s potentially useful to other\n@@ -77,7 +76,7 @@ def validateUserInfo(self, user, set_id, set_info):\n         if set_info and set_info.get(\'password\', None) is not None:\n             password = set_info[\'password\']\n             if password.count(\'dead\') or password == \'\':\n-                errors = [{\'id\': \'password\', \'error\': u\'Must not be dead\'}]\n+                errors = [{\'id\': \'password\', \'error\': \'Must not be dead\'}]\n             else:\n                 errors = []\n         return errors\n@@ -88,7 +87,7 @@ def validateUserInfo(self, user, set_id, set_info):\n def setMailHost():\n     registry = getUtility(IRegistry)\n     mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n-    mail_settings.smtp_host = u\'localhost\'\n+    mail_settings.smtp_host = \'localhost\'\n     mail_settings.email_from_address = \'admin@foo.com\'\n     commit()\n \n@@ -96,7 +95,7 @@ def setMailHost():\n def unsetMailHost():\n     registry = getUtility(IRegistry)\n     mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n-    mail_settings.smtp_host = u\'\'\n+    mail_settings.smtp_host = \'\'\n     mail_settings.email_from_address = \'\'\n     commit()\n \ndiff --git a/plone/app/users/tests/test_account.py b/plone/app/users/tests/test_account.py\nindex 7c3405b..b7b981e 100644\n--- a/plone/app/users/tests/test_account.py\n+++ b/plone/app/users/tests/test_account.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.interfaces import IMembershipTool\n from plone.app.users.browser.account import AccountPanelSchemaAdapter\n from plone.app.users.tests.base import BaseTestCase\n@@ -9,7 +8,7 @@\n \n \n @implementer(IMembershipTool)\n-class DummyPortalMembership(object):\n+class DummyPortalMembership:\n \n     def __init__(self, allowed):\n         self.allowed = allowed\ndiff --git a/plone/app/users/tests/test_doctests.py b/plone/app/users/tests/test_doctests.py\nindex 57bd419..c7865a6 100644\n--- a/plone/app/users/tests/test_doctests.py\n+++ b/plone/app/users/tests/test_doctests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n from plone.testing import layered\n \n@@ -33,7 +32,7 @@ def test_suite():\n     suite.addTests([\n         layered(\n             doctest.DocFileSuite(\n-                \'tests/{0}\'.format(test_file),\n+                f\'tests/{test_file}\',\n                 package=\'plone.app.users\',\n                 optionflags=optionflags,\n             ),\ndiff --git a/plone/app/users/tests/test_exportimport.py b/plone/app/users/tests/test_exportimport.py\nindex 81443d9..922c601 100644\n--- a/plone/app/users/tests/test_exportimport.py\n+++ b/plone/app/users/tests/test_exportimport.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.users.browser.userdatapanel import getUserDataSchema\n from plone.app.users.setuphandlers import export_schema\n from plone.app.users.setuphandlers import import_schema\n@@ -14,7 +13,7 @@\n class TestImport(BaseTestCase):\n \n     def setUp(self):\n-        super(TestImport, self).setUp()\n+        super().setUp()\n         xml = """<model xmlns:lingua="http://namespaces.plone.org/supermodel/lingua" xmlns:users="http://namespaces.plone.org/supermodel/users" xmlns:form="http://namespaces.plone.org/supermodel/form" xmlns:i18n="http://xml.zope.org/namespaces/i18n" xmlns:security="http://namespaces.plone.org/supermodel/security" xmlns:marshal="http://namespaces.plone.org/supermodel/marshal" xmlns="http://namespaces.plone.org/supermodel/schema" i18n:domain="plone">\n   <schema name="member-fields">\n     <field name="home_page" type="zope.schema.URI" users:forms="In User Profile">\ndiff --git a/plone/app/users/tests/test_loginname_generator.py b/plone/app/users/tests/test_loginname_generator.py\nindex 09d292e..9c74b42 100644\n--- a/plone/app/users/tests/test_loginname_generator.py\n+++ b/plone/app/users/tests/test_loginname_generator.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Note: test setup somehow fails when only tests from this file are run.\n from plone.app.users.browser.interfaces import ILoginNameGenerator\n from plone.app.users.browser.register import BaseRegistrationForm\ndiff --git a/plone/app/users/tests/test_member_search.py b/plone/app/users/tests/test_member_search.py\nindex c594a2c..68fafdb 100644\n--- a/plone/app/users/tests/test_member_search.py\n+++ b/plone/app/users/tests/test_member_search.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.users.browser.membersearch import extractCriteriaFromRequest\n \n import unittest\n@@ -8,12 +7,12 @@ class TestMemberSearch(unittest.TestCase):\n \n     def test_extract_criteria_from_request(self):\n         data = {\n-            \'_authenticator\': u\'ab4731...\',\n-            \'form.buttons.search\': u\'Search\',\n-            \'form.widgets.something\': u\'any form value\',\n+            \'_authenticator\': \'ab4731...\',\n+            \'form.buttons.search\': \'Search\',\n+            \'form.widgets.something\': \'any form value\',\n             \'form.widgets.roles-empty-marker\': True,\n         }\n \n         result = extractCriteriaFromRequest(data)\n \n-        self.assertEqual(result, {\'something\': u\'any form value\'})\n+        self.assertEqual(result, {\'something\': \'any form value\'})\ndiff --git a/plone/app/users/tests/test_new_user.py b/plone/app/users/tests/test_new_user.py\nindex 15a6ef6..54549cd 100644\n--- a/plone/app/users/tests/test_new_user.py\n+++ b/plone/app/users/tests/test_new_user.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.users.tests.base import BaseTestCase\n from plone.app.users.utils import uuid_userid_generator\n@@ -38,7 +37,7 @@ class TestGenerateUserIdLoginName(BaseTestCase):\n     """\n \n     def setUp(self):\n-        super(TestGenerateUserIdLoginName, self).setUp()\n+        super().setUp()\n         self.portal_url = self.portal.absolute_url()\n         self.portal.acl_users._doAddUser(\n             \'siteadmin\', TEST_USER_PASSWORD, [\'Site Administrator\'], []\n@@ -62,10 +61,10 @@ def test_uuid_disabled_email_as_login_disabled(self):\n \n         # user id should be set the same as user name\n         pas = getToolByName(self.portal, \'acl_users\')\n-        self.assertEquals(len(pas.searchUsers(name=\'newie\')), 1)\n+        self.assertEqual(len(pas.searchUsers(name=\'newie\')), 1)\n         user = pas.getUser(\'newie\')\n-        self.assertEquals(user.getId(), \'newie\')\n-        self.assertEquals(user.getUserName(), \'newie\')\n+        self.assertEqual(user.getId(), \'newie\')\n+        self.assertEqual(user.getUserName(), \'newie\')\n \n     def test_uuid_disabled_email_as_login_enabled_no_full_name(self):\n         self.security_settings.use_uuid_as_userid = False\n@@ -82,11 +81,11 @@ def test_uuid_disabled_email_as_login_enabled_no_full_name(self):\n         # Since full name is not provided, the user id is set based on the\n         # e-mail, the same as the user name.\n         pas = getToolByName(self.portal, \'acl_users\')\n-        self.assertEquals(len(pas.searchUsers(name=\'newuser@example.com\')), 1)\n-        self.assertEquals(len(pas.searchUsers(name=\'newuser@example.com\')), 1)\n+        self.assertEqual(len(pas.searchUsers(name=\'newuser@example.com\')), 1)\n+        self.assertEqual(len(pas.searchUsers(name=\'newuser@example.com\')), 1)\n         user = pas.getUser(\'newuser@example.com\')\n-        self.assertEquals(user.getId(), \'newuser@example.com\')\n-        self.assertEquals(user.getUserName(), \'newuser@example.com\')\n+        self.assertEqual(user.getId(), \'newuser@example.com\')\n+        self.assertEqual(user.getUserName(), \'newuser@example.com\')\n \n     def test_uuid_disabled_email_as_login_enabled_no_full_name_uppercase(self):\n         self.security_settings.use_uuid_as_userid = False\n@@ -102,11 +101,11 @@ def test_uuid_disabled_email_as_login_enabled_no_full_name_uppercase(self):\n \n         # the user id is set based on the e-mail, which should be lowercased\n         pas = getToolByName(self.portal, \'acl_users\')\n-        self.assertEquals(len(pas.searchUsers(name=\'newuser@example.com\')), 1)\n-        self.assertEquals(len(pas.searchUsers(name=\'NewUser@Example.Com\')), 1)\n+        self.assertEqual(len(pas.searchUsers(name=\'newuser@example.com\')), 1)\n+        self.assertEqual(len(pas.searchUsers(name=\'NewUser@Example.Com\')), 1)\n         user = pas.getUser(\'newuser@Example.Com\')\n-        self.assertEquals(user.getId(), \'newuser@example.com\')\n-        self.assertEquals(user.getUserName(), \'newuser@example.com\')\n+        self.assertEqual(user.getId(), \'newuser@example.com\')\n+        self.assertEqual(user.getUserName(), \'newuser@example.com\')\n \n     def test_uuid_disabled_email_as_login_enabled_has_full_name(self):\n         self.security_settings.use_uuid_as_userid = False\n@@ -124,11 +123,11 @@ def test_uuid_disabled_email_as_login_enabled_has_full_name(self):\n         # User id should be set based on the full name, user name should be\n         # set based on the e-mail.\n         pas = getToolByName(self.portal, \'acl_users\')\n-        self.assertEquals(len(pas.searchUsers(name=\'newuser@example.com\')), 1)\n-        self.assertEquals(len(pas.searchUsers(name=\'NewUser@Example.Com\')), 1)\n+        self.assertEqual(len(pas.searchUsers(name=\'newuser@example.com\')), 1)\n+        self.assertEqual(len(pas.searchUsers(name=\'NewUser@Example.Com\')), 1)\n         user = pas.getUser(\'newuser@Example.Com\')\n-        self.assertEquals(user.getId(), \'new-user\')\n-        self.assertEquals(user.getUserName(), \'newuser@example.com\')\n+        self.assertEqual(user.getId(), \'new-user\')\n+        self.assertEqual(user.getUserName(), \'newuser@example.com\')\n \n     def test_uuid_enabled_email_as_login_disabled(self):\n         self.security_settings.use_uuid_as_userid = True\n@@ -146,13 +145,13 @@ def test_uuid_enabled_email_as_login_disabled(self):\n \n         # uuid should be used for the user id\n         pas = getToolByName(self.portal, \'acl_users\')\n-        self.assertEquals(len(pas.searchUsers(name=\'newie\')), 1)\n+        self.assertEqual(len(pas.searchUsers(name=\'newie\')), 1)\n         user = pas.getUser(\'newie\')\n-        self.assertEquals(len(user.getId()), len(uuid_userid_generator()))\n-        self.assertNotEquals(user.getId(), \'newuser@example.com\')\n-        self.assertNotEquals(user.getId(), \'newie\')\n-        self.assertNotEquals(user.getId(), \'new-user\')\n-        self.assertEquals(user.getUserName(), \'newie\')\n+        self.assertEqual(len(user.getId()), len(uuid_userid_generator()))\n+        self.assertNotEqual(user.getId(), \'newuser@example.com\')\n+        self.assertNotEqual(user.getId(), \'newie\')\n+        self.assertNotEqual(user.getId(), \'new-user\')\n+        self.assertEqual(user.getUserName(), \'newie\')\n \n     def test_uuid_enabled_email_as_login_enabled(self):\n         self.security_settings.use_uuid_as_userid = True\n@@ -170,11 +169,11 @@ def test_uuid_enabled_email_as_login_enabled(self):\n         # uuid should be used for the user id, user name should be based on\n         # the e-mail\n         pas = getToolByName(self.portal, \'acl_users\')\n-        self.assertEquals(len(pas.searchUsers(name=\'newuser@example.com\')), 1)\n-        self.assertEquals(len(pas.searchUsers(name=\'NewUser@Example.Com\')), 1)\n+        self.assertEqual(len(pas.searchUsers(name=\'newuser@example.com\')), 1)\n+        self.assertEqual(len(pas.searchUsers(name=\'NewUser@Example.Com\')), 1)\n         user = pas.getUser(\'newuser@example.com\')\n-        self.assertEquals(len(user.getId()), len(uuid_userid_generator()))\n-        self.assertNotEquals(user.getId(), \'newuser@example.com\')\n-        self.assertNotEquals(user.getId(), \'newie\')\n-        self.assertNotEquals(user.getId(), \'new-user\')\n-        self.assertEquals(user.getUserName(), \'newuser@example.com\')\n+        self.assertEqual(len(user.getId()), len(uuid_userid_generator()))\n+        self.assertNotEqual(user.getId(), \'newuser@example.com\')\n+        self.assertNotEqual(user.getId(), \'newie\')\n+        self.assertNotEqual(user.getId(), \'new-user\')\n+        self.assertEqual(user.getUserName(), \'newuser@example.com\')\ndiff --git a/plone/app/users/tests/test_pam.py b/plone/app/users/tests/test_pam.py\nindex d1f4a95..05aba62 100644\n--- a/plone/app/users/tests/test_pam.py\n+++ b/plone/app/users/tests/test_pam.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual.browser.setup import SetupMultilingualSite\n from plone.app.testing import applyProfile\n from plone.app.testing import login\n@@ -43,7 +42,7 @@ class TestUserDataPanelWithPAM(unittest.TestCase):\n \n     def test_pam(self):\n         browser = z2.Browser(self.layer[\'app\'])\n-        browser.addHeader(\'Authorization\', \'Basic %s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD))\n+        browser.addHeader(\'Authorization\', f\'Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}\')\n         browser.open(\'http://nohost/plone/fr/@@personal-information\')\n         self.assertIn(\n             \'Saisissez votre nom complet, par exemple Jean Dupont.\',\ndiff --git a/plone/app/users/tests/test_robot.py b/plone/app/users/tests/test_robot.py\nindex 8d3ed58..5d4132d 100644\n--- a/plone/app/users/tests/test_robot.py\n+++ b/plone/app/users/tests/test_robot.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.users.testing import PLONE_APP_USERS_ACCEPTANCE_TESTING\n from plone.testing import layered\n \ndiff --git a/plone/app/users/tests/test_schema_types.py b/plone/app/users/tests/test_schema_types.py\nindex 73db37f..fabf3f2 100644\n--- a/plone/app/users/tests/test_schema_types.py\n+++ b/plone/app/users/tests/test_schema_types.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from pkg_resources import resource_stream\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -16,7 +15,7 @@\n class TestSchema(BaseTestCase):\n \n     def setUp(self):\n-        super(TestSchema, self).setUp()\n+        super().setUp()\n         xml = """<model xmlns:lingua="http://namespaces.plone.org/supermodel/lingua" xmlns:users="http://namespaces.plone.org/supermodel/users" xmlns:form="http://namespaces.plone.org/supermodel/form" xmlns:i18n="http://xml.zope.org/namespaces/i18n" xmlns:security="http://namespaces.plone.org/supermodel/security" xmlns:marshal="http://namespaces.plone.org/supermodel/marshal" xmlns="http://namespaces.plone.org/supermodel/schema" i18n:domain="plone">\n   <schema name="member-fields">\n     <field name="home_page" type="zope.schema.URI" users:forms="In User Profile">\ndiff --git a/plone/app/users/tests/test_user_data_panel.py b/plone/app/users/tests/test_user_data_panel.py\nindex 8e5f38d..7b64009 100644\n--- a/plone/app/users/tests/test_user_data_panel.py\n+++ b/plone/app/users/tests/test_user_data_panel.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import applyProfile\n from plone.app.users.browser.userdatapanel import UserDataPanel\n from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\ndiff --git a/plone/app/users/tests/test_userid_generator.py b/plone/app/users/tests/test_userid_generator.py\nindex 50ab33f..8db3c21 100644\n--- a/plone/app/users/tests/test_userid_generator.py\n+++ b/plone/app/users/tests/test_userid_generator.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Note: test setup somehow fails when only tests from this file are run.\n from plone.app.users.browser.interfaces import IUserIdGenerator\n from plone.app.users.browser.register import BaseRegistrationForm\ndiff --git a/plone/app/users/upgrades.py b/plone/app/users/upgrades.py\nindex a268934..d6b4feb 100644\n--- a/plone/app/users/upgrades.py\n+++ b/plone/app/users/upgrades.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.users.browser import schemaeditor\n from plone.namedfile.field import NamedBlobImage\n from plone.schemaeditor.interfaces import IEditableSchema\n@@ -21,7 +20,7 @@ def copySchemaAttrs(sch):\n     fields = {}\n     for id in sch:\n         field = copy.deepcopy(sch[id])\n-        field.forms_selection = [u\'In User Profile\']\n+        field.forms_selection = [\'In User Profile\']\n         fields[id] = field\n     return fields\n \n@@ -35,9 +34,9 @@ class IHomePageSchema(Interface):\n     """\n \n     home_page = schema.TextLine(\n-        title=_(u\'label_homepage\', default=u\'Home page\'),\n-        description=_(u\'help_homepage\',\n-                      default=u"The URL for your external home page, "\n+        title=_(\'label_homepage\', default=\'Home page\'),\n+        description=_(\'help_homepage\',\n+                      default="The URL for your external home page, "\n                       "if you have one."),\n         required=False)\n \n@@ -47,9 +46,9 @@ class IDescriptionSchema(Interface):\n     """\n \n     description = schema.Text(\n-        title=_(u\'label_biography\', default=u\'Biography\'),\n-        description=_(u\'help_biography\',\n-                      default=u"A short overview of who you are and what you "\n+        title=_(\'label_biography\', default=\'Biography\'),\n+        description=_(\'help_biography\',\n+                      default="A short overview of who you are and what you "\n                       "do. Will be displayed on your author page, linked "\n                       "from the items you create."),\n         required=False)\n@@ -60,9 +59,9 @@ class ILocationSchema(Interface):\n     """\n \n     location = schema.TextLine(\n-        title=_(u\'label_location\', default=u\'Location\'),\n-        description=_(u\'help_location\',\n-                      default=u"Your location - either city and "\n+        title=_(\'label_location\', default=\'Location\'),\n+        description=_(\'help_location\',\n+                      default="Your location - either city and "\n                       "country - or in a company setting, where "\n                       "your office is located."),\n         required=False)\n@@ -73,12 +72,12 @@ class IPortraitSchema(Interface):\n     """\n \n     portrait = NamedBlobImage(\n-        title=_(u\'label_portrait\', default=u\'Portrait\'),\n+        title=_(\'label_portrait\', default=\'Portrait\'),\n         description=_(\n-            u\'help_portrait\',\n-            default=u\'To add or change the portrait: click the "Browse" \'\n-                    u\'button; select a picture of yourself. Recommended \'\n-                    u\'image size is 75 pixels wide by 100 pixels tall.\'\n+            \'help_portrait\',\n+            default=\'To add or change the portrait: click the "Browse" \'\n+                    \'button; select a picture of yourself. Recommended \'\n+                    \'image size is 75 pixels wide by 100 pixels tall.\'\n         ),\n         required=False)\n \ndiff --git a/plone/app/users/utils.py b/plone/app/users/utils.py\nindex 2cdd427..363ac9e 100644\n--- a/plone/app/users/utils.py\n+++ b/plone/app/users/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.uuid.interfaces import IUUIDGenerator\n from z3c.form.action import ActionErrorOccurred\n from z3c.form.interfaces import WidgetActionExecutionError\ndiff --git a/plone/app/users/vocabularies.py b/plone/app/users/vocabularies.py\nindex 907097d..df933cb 100644\n--- a/plone/app/users/vocabularies.py\n+++ b/plone/app/users/vocabularies.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from .browser.schemaeditor import getFromBaseSchema\n from plone.app.users.schema import ICombinedRegisterSchema\n@@ -20,7 +19,7 @@\n \n \n @implementer(IVocabularyFactory)\n-class UserRegistrationFieldsVocabulary(object):\n+class UserRegistrationFieldsVocabulary:\n     """Returns list of fields available for registration form.\n \n     It gets fields from z3c.form adopted Registration form schema.\n@@ -65,7 +64,7 @@ def __call__(self, context):\n \n \n @implementer(IVocabularyFactory)\n-class GroupIdVocabulary(object):\n+class GroupIdVocabulary:\n     """\n     Return vocab of groups to add new user to.\n \n@@ -114,7 +113,7 @@ def __call__(self, context):\n \n             group_title = safe_unicode(g.getGroupTitleOrName())\n             if group_title != g.id:\n-                title = u\'%s (%s)\' % (group_title, g.id)\n+                title = f\'{group_title} ({g.id})\'\n             else:\n                 title = group_title\n             terms.append(SimpleTerm(g.id, g.id, title))\ndiff --git a/setup.py b/setup.py\nindex 8c74743..ac77604 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n version = \'3.0.2.dev0\'\n \n-long_description = u\'{0}\\n\\n{1}\'.format(\n+long_description = \'{}\\n\\n{}\'.format(\n     open(\'README.rst\').read(),\n     open(\'CHANGES.rst\').read()\n )\n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2023-04-07T20:08:07+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/4bbc0429094b0258b6fa5ce74afa2a802112d118

chore: isort

Files changed:
M plone/app/users/browser/account.py
M plone/app/users/browser/register.py
M plone/app/users/browser/userdatapanel.py
M plone/app/users/setuphandlers.py
M plone/app/users/tests/base.py
M plone/app/users/tests/test_account.py
M plone/app/users/tests/test_pam.py
M plone/app/users/tests/test_schema_types.py
M plone/app/users/vocabularies.py
M setup.py

b"diff --git a/plone/app/users/browser/account.py b/plone/app/users/browser/account.py\nindex db48fae..57a2a19 100644\n--- a/plone/app/users/browser/account.py\n+++ b/plone/app/users/browser/account.py\n@@ -5,6 +5,7 @@\n from plone.app.users.browser.schemaeditor import getFromBaseSchema\n from plone.app.users.utils import notifyWidgetActionExecutionError\n from plone.autoform.form import AutoExtensibleForm\n+from plone.base.interfaces import ISecuritySchema\n from plone.namedfile.file import NamedBlobImage\n from plone.protect import CheckAuthenticator\n from plone.registry.interfaces import IRegistry\n@@ -12,7 +13,6 @@\n from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.controlpanel.events import ConfigurationChangedEvent\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n-from plone.base.interfaces import ISecuritySchema\n from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.PlonePAS.tools.membership import default_portrait\ndiff --git a/plone/app/users/browser/register.py b/plone/app/users/browser/register.py\nindex accf689..51bd798 100644\n--- a/plone/app/users/browser/register.py\n+++ b/plone/app/users/browser/register.py\n@@ -9,14 +9,14 @@\n from plone.app.users.utils import notifyWidgetActionExecutionError\n from plone.app.users.utils import uuid_userid_generator\n from plone.autoform.form import AutoExtensibleForm\n+from plone.base.interfaces import ISecuritySchema\n+from plone.base.interfaces import IUserGroupsSettingsSchema\n from plone.protect import CheckAuthenticator\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n-from plone.base.interfaces import ISecuritySchema\n-from plone.base.interfaces import IUserGroupsSettingsSchema\n from Products.CMFPlone.utils import normalizeString\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\ndiff --git a/plone/app/users/browser/userdatapanel.py b/plone/app/users/browser/userdatapanel.py\nindex c20d746..5548e31 100644\n--- a/plone/app/users/browser/userdatapanel.py\n+++ b/plone/app/users/browser/userdatapanel.py\n@@ -3,16 +3,17 @@\n from plone.app.users.browser.account import AccountPanelSchemaAdapter\n from plone.app.users.browser.account import getSchema\n from plone.app.users.schema import IUserDataSchema\n+from plone.base.interfaces import ISecuritySchema\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n-from plone.base.interfaces import ISecuritySchema\n from Products.CMFPlone.utils import get_portal\n from Products.CMFPlone.utils import set_own_login_name\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zExceptions import NotFound\n from zope.component import getUtility\n \n+\n try:\n     from html import escape\n except ImportError:\ndiff --git a/plone/app/users/setuphandlers.py b/plone/app/users/setuphandlers.py\nindex 9a82740..358521e 100644\n--- a/plone/app/users/setuphandlers.py\n+++ b/plone/app/users/setuphandlers.py\n@@ -4,6 +4,7 @@\n import plone.app.users.browser.schemaeditor as ttw\n import six\n \n+\n logger = logging.getLogger('plone.app.users.setuphandlers')\n \n FILE = 'userschema.xml'\ndiff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py\nindex 774ffc2..d5766cd 100644\n--- a/plone/app/users/tests/base.py\n+++ b/plone/app/users/tests/base.py\n@@ -7,13 +7,13 @@\n from AccessControl.SecurityInfo import ClassSecurityInfo\n from Acquisition import aq_base\n from OFS.Cache import Cacheable\n-from plone.app.testing import setRoles\n from plone.app.testing import login\n+from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n+from plone.base.interfaces import ISecuritySchema\n from plone.registry.interfaces import IRegistry\n from plone.testing.z2 import Browser\n-from plone.base.interfaces import ISecuritySchema\n from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n from Products.CMFPlone.tests.utils import MockMailHost\n from Products.MailHost.interfaces import IMailHost\ndiff --git a/plone/app/users/tests/test_account.py b/plone/app/users/tests/test_account.py\nindex b7b981e..0f916bd 100644\n--- a/plone/app/users/tests/test_account.py\n+++ b/plone/app/users/tests/test_account.py\n@@ -1,9 +1,10 @@\n-from Products.CMFCore.interfaces import IMembershipTool\n from plone.app.users.browser.account import AccountPanelSchemaAdapter\n from plone.app.users.tests.base import BaseTestCase\n from plone.testing import z2\n-from zope.interface import implementer\n+from Products.CMFCore.interfaces import IMembershipTool\n from zope.component import provideUtility\n+from zope.interface import implementer\n+\n import unittest\n \n \ndiff --git a/plone/app/users/tests/test_pam.py b/plone/app/users/tests/test_pam.py\nindex 05aba62..56d8849 100644\n--- a/plone/app/users/tests/test_pam.py\n+++ b/plone/app/users/tests/test_pam.py\n@@ -3,7 +3,9 @@\n from plone.app.testing import login\n from plone.app.testing import PloneSandboxLayer\n from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, TEST_USER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.testing.layers import FunctionalTesting\n from plone.app.users.browser.userdatapanel import UserDataPanel\n from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\ndiff --git a/plone/app/users/tests/test_schema_types.py b/plone/app/users/tests/test_schema_types.py\nindex fabf3f2..d978bb2 100644\n--- a/plone/app/users/tests/test_schema_types.py\n+++ b/plone/app/users/tests/test_schema_types.py\n@@ -5,9 +5,9 @@\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.users.setuphandlers import import_schema\n+from plone.app.users.tests.base import BaseTestCase\n from plone.testing.z2 import Browser\n from Products.GenericSetup.tests.common import DummyImportContext\n-from plone.app.users.tests.base import BaseTestCase\n \n import transaction\n \n@@ -192,8 +192,8 @@ def test_regression_76_user_information(self):\n         self.assertEqual(self.browser.getControl('Age').value, '40')\n \n     def _enable_self_registration(self):\n-        from plone.registry.interfaces import IRegistry\n         from plone.base.interfaces import ISecuritySchema\n+        from plone.registry.interfaces import IRegistry\n         from zope.component import getUtility\n \n         self.portal.manage_permission('Add portal member', roles=['Anonymous'])\ndiff --git a/plone/app/users/vocabularies.py b/plone/app/users/vocabularies.py\nindex df933cb..863b289 100644\n--- a/plone/app/users/vocabularies.py\n+++ b/plone/app/users/vocabularies.py\n@@ -1,5 +1,5 @@\n-from AccessControl import getSecurityManager\n from .browser.schemaeditor import getFromBaseSchema\n+from AccessControl import getSecurityManager\n from plone.app.users.schema import ICombinedRegisterSchema\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.utils import getToolByName\ndiff --git a/setup.py b/setup.py\nindex ac77604..1b718c0 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,6 +1,7 @@\n from setuptools import find_packages\n from setuptools import setup\n \n+\n version = '3.0.2.dev0'\n \n long_description = '{}\\n\\n{}'.format(\n"

Repository: plone.app.users


Branch: refs/heads/master
Date: 2023-04-07T20:08:34+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/78b2baefdfef118966160c446f34e92cf5892888

chore: black

Files changed:
M plone/__init__.py
M plone/app/__init__.py
M plone/app/users/browser/account.py
M plone/app/users/browser/interfaces.py
M plone/app/users/browser/membersearch.py
M plone/app/users/browser/passwordpanel.py
M plone/app/users/browser/personalpreferences.py
M plone/app/users/browser/register.py
M plone/app/users/browser/registered.py
M plone/app/users/browser/registersettingspanel.py
M plone/app/users/browser/schemaeditor.py
M plone/app/users/browser/userdatapanel.py
M plone/app/users/field_extender.py
M plone/app/users/schema.py
M plone/app/users/setuphandlers.py
M plone/app/users/testing.py
M plone/app/users/tests/base.py
M plone/app/users/tests/test_account.py
M plone/app/users/tests/test_doctests.py
M plone/app/users/tests/test_exportimport.py
M plone/app/users/tests/test_loginname_generator.py
M plone/app/users/tests/test_member_search.py
M plone/app/users/tests/test_new_user.py
M plone/app/users/tests/test_pam.py
M plone/app/users/tests/test_robot.py
M plone/app/users/tests/test_schema_types.py
M plone/app/users/tests/test_user_data_panel.py
M plone/app/users/tests/test_userid_generator.py
M plone/app/users/upgrades.py
M plone/app/users/utils.py
M plone/app/users/vocabularies.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/users/browser/account.py b/plone/app/users/browser/account.py\nindex 57a2a19..f7ffea2 100644\n--- a/plone/app/users/browser/account.py\n+++ b/plone/app/users/browser/account.py\n@@ -30,16 +30,19 @@\n from ZTUtils import make_query\n \n \n-MESSAGE_EMAIL_CANNOT_CHANGE = \\\n-    _(\'message_email_cannot_change\',\n-      default=("Sorry, you are not allowed to "\n-               "change your email address."))\n+MESSAGE_EMAIL_CANNOT_CHANGE = _(\n+    "message_email_cannot_change",\n+    default=("Sorry, you are not allowed to " "change your email address."),\n+)\n \n-MESSAGE_EMAIL_IN_USE = \\\n-    _(\'message_email_in_use\',\n-      default=("The email address you selected is "\n-               "already in use or is not valid as login "\n-               "name. Please choose another."))\n+MESSAGE_EMAIL_IN_USE = _(\n+    "message_email_in_use",\n+    default=(\n+        "The email address you selected is "\n+        "already in use or is not valid as login "\n+        "name. Please choose another."\n+    ),\n+)\n \n \n def getSchema(schema_interface, schema_adapter, form_name=None):\n@@ -55,10 +58,7 @@ def getSchema(schema_interface, schema_adapter, form_name=None):\n     else:\n         schema = None\n     if schema is None:\n-        schema = getFromBaseSchema(\n-            schema_interface,\n-            form_name=form_name\n-        )\n+        schema = getFromBaseSchema(schema_interface, form_name=form_name)\n         # Unset all request attr names.\n         # We do not want other caches to linger.\n         # See https://github.com/plone/plone.app.users/issues/76\n@@ -87,23 +87,23 @@ def isDefaultPortrait(value, portal):\n \n class AccountPanelSchemaAdapter:\n     """Data manager that gets and sets any property mentioned\n-       in the schema to the property sheet\n+    in the schema to the property sheet\n     """\n+\n     context = None\n     schema = IAccountPanelForm\n \n     def __init__(self, context):\n-        mt = getToolByName(context, \'portal_membership\')\n-        userid = context.REQUEST.form.get(\'userid\')\n-        if (userid and mt.checkPermission(\'Plone Site Setup: Users and Groups\',\n-                                          context)):\n+        mt = getToolByName(context, "portal_membership")\n+        userid = context.REQUEST.form.get("userid")\n+        if userid and mt.checkPermission("Plone Site Setup: Users and Groups", context):\n             self.context = mt.getMemberById(userid)\n         else:\n             self.context = mt.getAuthenticatedMember()\n \n     def _getProperty(self, name):\n-        value = self.context.getProperty(name, \'\')\n-        if value == \'\':\n+        value = self.context.getProperty(name, "")\n+        if value == "":\n             value = None\n         if value:\n             # PlonePAS encodes all unicode coming from PropertySheets.\n@@ -115,9 +115,7 @@ def _setProperty(self, name, value):\n             value = list(value)\n         if value and isinstance(self.schema[name], schema.Choice):\n             value = str(value)\n-        return self.context.setMemberProperties(\n-            {name: value}, force_empty=True\n-        )\n+        return self.context.setMemberProperties({name: value}, force_empty=True)\n \n     def __getattr__(self, name):\n         if name in self.schema:\n@@ -133,8 +131,7 @@ def __setattr__(self, name, value):\n         if name not in self.schema or hasattr(self.__class__, name):\n             # Either not part of the schema or dealt with by an explicit\n             # property\n-            return super().__setattr__(name,\n-                                                                      value)\n+            return super().__setattr__(name, value)\n         if isinstance(value, NamedBlobImage):\n             # any image is stored as portrait\n             return self.set_portrait(value)\n@@ -143,19 +140,22 @@ def __setattr__(self, name, value):\n \n     @property\n     def portal(self):\n-        return getToolByName(self.context, \'portal_url\').getPortalObject()\n+        return getToolByName(self.context, "portal_url").getPortalObject()\n \n     def get_portrait(self):\n         """If user has default portrait, return none"""\n-        mt = getToolByName(self.context, \'portal_membership\')\n+        mt = getToolByName(self.context, "portal_membership")\n         value = mt.getPersonalPortrait(self.context.getId())\n         if isDefaultPortrait(value, self.portal):\n             return None\n-        return NamedBlobImage(value.data, contentType=value.content_type,\n-                              filename=getattr(value, \'filename\', None))\n+        return NamedBlobImage(\n+            value.data,\n+            contentType=value.content_type,\n+            filename=getattr(value, "filename", None),\n+        )\n \n     def set_portrait(self, value):\n-        mt = getToolByName(self.context, \'portal_membership\')\n+        mt = getToolByName(self.context, "portal_membership")\n         member_id = self.context.getId()\n         if value is None:\n             previous = mt.getPersonalPortrait(member_id)\n@@ -170,32 +170,33 @@ def set_portrait(self, value):\n \n     @property\n     def wysiwyg_editor(self):\n-        return self._getProperty(\'wysiwyg_editor\')\n+        return self._getProperty("wysiwyg_editor")\n \n     @wysiwyg_editor.setter\n     def wysiwyg_editor(self, value):\n         if value is None:\n             # set property that the site-default from the registry is used\n             # since both \'None\' and None result in plaintexteditor\n-            value = \'\'\n-        return self._setProperty(\'wysiwyg_editor\', value)\n+            value = ""\n+        return self._setProperty("wysiwyg_editor", value)\n \n     @property\n     def timezone(self):\n-        return self._getProperty(\'timezone\')\n+        return self._getProperty("timezone")\n \n     @timezone.setter\n     def timezone(self, value):\n         if value is None:\n-            value = \'\'\n-        return self._setProperty(\'timezone\', value)\n+            value = ""\n+        return self._setProperty("timezone", value)\n \n \n @implementer(IAccountPanelForm)\n class AccountPanelForm(AutoExtensibleForm, form.Form):\n     """A simple form to be used as a basis for account panel screens."""\n+\n     schema = IAccountPanelForm\n-    template = ViewPageTemplateFile(\'account-panel.pt\')\n+    template = ViewPageTemplateFile("account-panel.pt")\n     enableCSRFProtection = True\n \n     hidden_widgets = []\n@@ -204,14 +205,14 @@ class AccountPanelForm(AutoExtensibleForm, form.Form):\n \n     @lazy_property\n     def member(self):\n-        mtool = getToolByName(self.context, \'portal_membership\')\n-        if self.request.get(\'userid\'):\n-            return mtool.getMemberById(self.request.get(\'userid\'))\n+        mtool = getToolByName(self.context, "portal_membership")\n+        if self.request.get("userid"):\n+            return mtool.getMemberById(self.request.get("userid"))\n         return mtool.getAuthenticatedMember()\n \n     @property\n     def label(self):\n-        return self.member.getProperty(\'fullname\') or self.member.getUserName()\n+        return self.member.getProperty("fullname") or self.member.getUserName()\n \n     def _differentEmail(self, email):\n         """Check if the submitted form email address differs from the existing\n@@ -221,56 +222,51 @@ def _differentEmail(self, email):\n         else on the personalize form) or changing it back to your login name,\n         is fine.\n         """\n-        membership = getToolByName(self.context, \'portal_membership\')\n-        if self.request.get(\'userid\'):\n-            member = membership.getMemberById(self.request.get(\'userid\'))\n+        membership = getToolByName(self.context, "portal_membership")\n+        if self.request.get("userid"):\n+            member = membership.getMemberById(self.request.get("userid"))\n         else:\n             member = membership.getAuthenticatedMember()\n         return email not in (member.getId(), member.getUserName())\n \n     def makeQuery(self):\n-        userid = self.request.form.get(\'userid\', None)\n+        userid = self.request.form.get("userid", None)\n         if userid is not None:\n-            return \'?{}\'.format(make_query({\'userid\': userid}))\n-        return \'\'\n+            return "?{}".format(make_query({"userid": userid}))\n+        return ""\n \n     def action(self):\n         return self.request.getURL() + self.makeQuery()\n \n     def validate_email(self, action, data):\n         context = aq_inner(self.context)\n-        error_keys = [\n-            error.field.getName()\n-            for error\n-            in action.form.widgets.errors\n-        ]\n-        if \'email\' not in error_keys:\n-            registration = getToolByName(context, \'portal_registration\')\n+        error_keys = [error.field.getName() for error in action.form.widgets.errors]\n+        if "email" not in error_keys:\n+            registration = getToolByName(context, "portal_registration")\n             registry = getUtility(IRegistry)\n-            security_settings = registry.forInterface(\n-                ISecuritySchema, prefix="plone")\n+            security_settings = registry.forInterface(ISecuritySchema, prefix="plone")\n             if security_settings.use_email_as_login:\n-                err_str = \'\'\n+                err_str = ""\n                 try:\n-                    id_allowed = registration.isMemberIdAllowed(data[\'email\'])\n+                    id_allowed = registration.isMemberIdAllowed(data["email"])\n                 except Unauthorized:\n                     err_str = MESSAGE_EMAIL_CANNOT_CHANGE\n                 else:\n                     if not id_allowed:\n                         # only allow if unchanged\n-                        if self._differentEmail(data[\'email\']):\n+                        if self._differentEmail(data["email"]):\n                             err_str = MESSAGE_EMAIL_IN_USE\n                 if err_str:\n-                    notifyWidgetActionExecutionError(action, \'email\', err_str)\n+                    notifyWidgetActionExecutionError(action, "email", err_str)\n \n-    @button.buttonAndHandler(_(\'Save\'))\n+    @button.buttonAndHandler(_("Save"))\n     def handleSave(self, action):\n         CheckAuthenticator(self.request)\n         data, errors = self.extractData()\n \n         # Extra validation for email, when it is there.  email is not in the\n         # data when you are at the personal-preferences page.\n-        if \'email\' in data:\n+        if "email" in data:\n             self.validate_email(action, data)\n \n         if action.form.widgets.errors:\n@@ -278,70 +274,77 @@ def handleSave(self, action):\n             return\n         if self.applyChanges(data):\n             IStatusMessage(self.request).addStatusMessage(\n-                self.successMessage, type=\'info\')\n+                self.successMessage, type="info"\n+            )\n             notify(ConfigurationChangedEvent(self, data))\n             self._on_save(data)\n         else:\n             IStatusMessage(self.request).addStatusMessage(\n-                self.noChangesMessage, type=\'info\')\n+                self.noChangesMessage, type="info"\n+            )\n         self.request.response.redirect(self.action())\n \n     def updateActions(self):\n         super().updateActions()\n-        if self.actions and \'save\' in self.actions:\n-            self.actions[\'save\'].addClass(\'btn btn-primary\')\n+        if self.actions and "save" in self.actions:\n+            self.actions["save"].addClass("btn btn-primary")\n \n-    @button.buttonAndHandler(_(\'Cancel\'))\n+    @button.buttonAndHandler(_("Cancel"))\n     def cancel(self, action):\n-        IStatusMessage(self.request).addStatusMessage(_("Changes canceled."),\n-                                                      type="info")\n+        IStatusMessage(self.request).addStatusMessage(\n+            _("Changes canceled."), type="info"\n+        )\n         self.request.response.redirect(\n-            \'{}{}\'.format(self.request[\'ACTUAL_URL\'], self.makeQuery())\n+            "{}{}".format(self.request["ACTUAL_URL"], self.makeQuery())\n         )\n \n     def _on_save(self, data=None):\n         pass\n \n-    def prepareObjectTabs(self,\n-                          default_tab=\'view\',\n-                          sort_first=[\'folderContents\']):\n+    def prepareObjectTabs(self, default_tab="view", sort_first=["folderContents"]):\n         context = self.context\n-        mt = getToolByName(context, \'portal_membership\')\n+        mt = getToolByName(context, "portal_membership")\n         tabs = []\n         navigation_root_url = context.absolute_url()\n \n         def _check_allowed(context, request, name):\n-            """Check, if user has required permissions on view.\n-            """\n+            """Check, if user has required permissions on view."""\n             view = getMultiAdapter((context, request), name=name)\n             allowed = True\n             for perm in view.__ac_permissions__:\n                 allowed = allowed and mt.checkPermission(perm[0], context)\n             return allowed\n \n-        if _check_allowed(context, self.request, \'personal-information\'):\n-            tabs.append({\n-                \'title\': _(\'title_personal_information_form\',\n-                           \'Personal Information\'),\n-                \'url\': navigation_root_url + \'/@@personal-information\',\n-                \'selected\': (self.__name__ == \'personal-information\'),\n-                \'id\': \'user_data-personal-information\',\n-            })\n-\n-        if _check_allowed(context, self.request, \'personal-preferences\'):\n-            tabs.append({\n-                \'title\': _(\'Personal Preferences\'),\n-                \'url\': navigation_root_url + \'/@@personal-preferences\',\n-                \'selected\': (self.__name__ == \'personal-preferences\'),\n-                \'id\': \'user_data-personal-preferences\',\n-            })\n+        if _check_allowed(context, self.request, "personal-information"):\n+            tabs.append(\n+                {\n+                    "title": _(\n+                        "title_personal_information_form", "Personal Information"\n+                    ),\n+                    "url": navigation_root_url + "/@@personal-information",\n+                    "selected": (self.__name__ == "personal-information"),\n+                    "id": "user_data-personal-information",\n+                }\n+            )\n+\n+        if _check_allowed(context, self.request, "personal-preferences"):\n+            tabs.append(\n+                {\n+                    "title": _("Personal Preferences"),\n+                    "url": navigation_root_url + "/@@personal-preferences",\n+                    "selected": (self.__name__ == "personal-preferences"),\n+                    "id": "user_data-personal-preferences",\n+                }\n+            )\n \n         member = mt.getAuthenticatedMember()\n         if member.canPasswordSet():\n-            tabs.append({\n-                \'title\': _(\'label_password\', \'Password\'),\n-                \'url\': navigation_root_url + \'/@@change-password\',\n-                \'selected\': (self.__name__ == \'change-password\'),\n-                \'id\': \'user_data-change-password\',\n-            })\n+            tabs.append(\n+                {\n+                    "title": _("label_password", "Password"),\n+                    "url": navigation_root_url + "/@@change-password",\n+                    "selected": (self.__name__ == "change-password"),\n+                    "id": "user_data-change-password",\n+                }\n+            )\n         return tabs\ndiff --git a/plone/app/users/browser/interfaces.py b/plone/app/users/browser/interfaces.py\nindex 43e1935..9258469 100644\n--- a/plone/app/users/browser/interfaces.py\n+++ b/plone/app/users/browser/interfaces.py\n@@ -3,8 +3,7 @@\n \n \n class IAccountPanelForm(IPloneControlPanelForm):\n-    """Forms using plone.app.users\n-    """\n+    """Forms using plone.app.users"""\n \n     def _on_save():\n         """Callback mehod which can be implemented by control panels to\ndiff --git a/plone/app/users/browser/membersearch.py b/plone/app/users/browser/membersearch.py\nindex 8e29423..efd9837 100644\n--- a/plone/app/users/browser/membersearch.py\n+++ b/plone/app/users/browser/membersearch.py\n@@ -11,31 +11,30 @@ class IMemberSearchSchema(model.Schema):\n     """Provide schema for member search."""\n \n     model.fieldset(\n-        \'extra\',\n-        label=_(\'legend_member_search_criteria\',\n-                default=\'User Search Criteria\'),\n-        fields=[\'login\', \'email\', \'fullname\']\n+        "extra",\n+        label=_("legend_member_search_criteria", default="User Search Criteria"),\n+        fields=["login", "email", "fullname"],\n     )\n \n     login = schema.TextLine(\n-        title=_(\'label_name\', default=\'Name\'),\n+        title=_("label_name", default="Name"),\n         description=_(\n-            \'help_search_name\',\n-            default=\'Find users whose login name contain\'),\n+            "help_search_name", default="Find users whose login name contain"\n+        ),\n         required=False,\n     )\n     email = schema.TextLine(\n-        title=_(\'label_email\', default=\'Email\'),\n+        title=_("label_email", default="Email"),\n         description=_(\n-            \'help_search_email\',\n-            default=\'Find users whose email address contain\'),\n+            "help_search_email", default="Find users whose email address contain"\n+        ),\n         required=False,\n     )\n     fullname = schema.TextLine(\n-        title=_(\'label_fullname\', default=\'Full Name\'),\n+        title=_("label_fullname", default="Full Name"),\n         description=_(\n-            \'help_search_fullname\',\n-            default=\'Find users whose full names contain\'),\n+            "help_search_fullname", default="Find users whose full names contain"\n+        ),\n         required=False,\n     )\n     # disabled: https://dev.plone.org/ticket/13862\n@@ -60,16 +59,18 @@ def extractCriteriaFromRequest(criteria):\n     """Takes a dictionary of z3c.form data and sanitizes it to fit\n     for a pas member search.\n     """\n-    for key in [\'_authenticator\',\n-                \'form.buttons.search\',\n-                \'form.widgets.roles-empty-marker\', ]:\n+    for key in [\n+        "_authenticator",\n+        "form.buttons.search",\n+        "form.widgets.roles-empty-marker",\n+    ]:\n         if key in criteria:\n             del criteria[key]\n-    for (key, value) in list(criteria.items()):\n+    for key, value in list(criteria.items()):\n         if not value:\n             del criteria[key]\n         else:\n-            new_key = key.replace(\'form.widgets.\', \'\')\n+            new_key = key.replace("form.widgets.", "")\n             criteria[new_key] = value\n             del criteria[key]\n \n@@ -84,18 +85,19 @@ class MemberSearchForm(AutoExtensibleForm, form.Form):\n     schema = IMemberSearchSchema\n     ignoreContext = True\n \n-    label = _(\'heading_member_search\', default=\'Search for users\')\n-    description = _(\'description_member_search\',\n-                    default=\'This search form enables you to find users by \'\n-                            \'specifying one or more search criteria.\')\n-    template = ViewPageTemplateFile(\'membersearch_form.pt\')\n+    label = _("heading_member_search", default="Search for users")\n+    description = _(\n+        "description_member_search",\n+        default="This search form enables you to find users by "\n+        "specifying one or more search criteria.",\n+    )\n+    template = ViewPageTemplateFile("membersearch_form.pt")\n     enableCSRFProtection = True\n-    formErrorsMessage = _(\'There were errors.\')\n+    formErrorsMessage = _("There were errors.")\n \n     submitted = False\n \n-    @button.buttonAndHandler(_(\'label_search\', default=\'Search\'),\n-                             name=\'search\')\n+    @button.buttonAndHandler(_("label_search", default="Search"), name="search")\n     def handleApply(self, action):\n         request = self.request\n         data, errors = self.extractData()\n@@ -104,9 +106,9 @@ def handleApply(self, action):\n             self.status = self.formErrorsMessage\n             return\n \n-        if request.get(\'form.buttons.search\', None):\n+        if request.get("form.buttons.search", None):\n             self.submitted = True\n \n-            view = self.context.restrictedTraverse(\'@@pas_search\')\n+            view = self.context.restrictedTraverse("@@pas_search")\n             criteria = extractCriteriaFromRequest(self.request.form.copy())\n-            self.results = view.searchUsers(sort_by=\'fullname\', **criteria)\n+            self.results = view.searchUsers(sort_by="fullname", **criteria)\ndiff --git a/plone/app/users/browser/passwordpanel.py b/plone/app/users/browser/passwordpanel.py\nindex 20b00ef..b5997f6 100644\n--- a/plone/app/users/browser/passwordpanel.py\n+++ b/plone/app/users/browser/passwordpanel.py\n@@ -12,40 +12,35 @@\n \n \n class IPasswordSchema(Interface):\n-    """Provide schema for password form """\n+    """Provide schema for password form"""\n \n     current_password = schema.Password(\n-        title=_(\'label_current_password\', default=\'Current password\'),\n-        description=_(\n-            \'help_current_password\',\n-            default=\'Enter your current password.\'),\n+        title=_("label_current_password", default="Current password"),\n+        description=_("help_current_password", default="Enter your current password."),\n         # constraint=checkCurrentPassword,\n     )\n \n     new_password = schema.Password(\n-        title=_(\'label_new_password\', default=\'New password\'),\n-        description=_(\n-            \'help_new_password\',\n-            default="Enter your new password."),\n+        title=_("label_new_password", default="New password"),\n+        description=_("help_new_password", default="Enter your new password."),\n     )\n \n     new_password_ctl = schema.Password(\n-        title=_(\'label_confirm_password\', default=\'Confirm password\'),\n+        title=_("label_confirm_password", default="Confirm password"),\n         description=_(\n-            \'help_confirm_password\',\n-            default="Re-enter the password. "\n-            "Make sure the passwords are identical."),\n+            "help_confirm_password",\n+            default="Re-enter the password. " "Make sure the passwords are identical.",\n+        ),\n     )\n \n \n class PasswordPanelAdapter:\n-\n     def __init__(self, context):\n-        self.context = getToolByName(context, \'portal_membership\')\n+        self.context = getToolByName(context, "portal_membership")\n \n     def get_dummy(self):\n         """We don\'t actually need to \'get\' anything ..."""\n-        return \'\'\n+        return ""\n \n     current_password = property(get_dummy)\n \n@@ -58,7 +53,7 @@ class PasswordPanel(AccountPanelForm):\n     """Implementation of password reset form that uses z3c.form."""\n \n     description = _("Change Password")\n-    form_name = _(\'legend_password_details\', default=\'Password Details\')\n+    form_name = _("legend_password_details", default="Password Details")\n     schema = IPasswordSchema\n \n     def updateFields(self):\n@@ -67,49 +62,41 @@ def updateFields(self):\n         # list of instructions on what kind of password is required.  We\'ll\n         # reuse password errors as instructions e.g. "Must contain a letter and\n         # a number".  Assume PASPlugin errors are already translated\n-        registration = getToolByName(self.context, \'portal_registration\')\n-        err_str = registration.testPasswordValidity(\'\')\n+        registration = getToolByName(self.context, "portal_registration")\n+        err_str = registration.testPasswordValidity("")\n         if err_str:\n-            msg = _(\n-                \'Enter your new password. ${errors}\',\n-                mapping=dict(errors=err_str)\n-            )\n-            self.fields[\'new_password\'].field.description = msg\n+            msg = _("Enter your new password. ${errors}", mapping=dict(errors=err_str))\n+            self.fields["new_password"].field.description = msg\n \n     def validate_password(self, action, data):\n         context = aq_inner(self.context)\n-        registration = getToolByName(context, \'portal_registration\')\n-        membertool = getToolByName(context, \'portal_membership\')\n+        registration = getToolByName(context, "portal_registration")\n+        membertool = getToolByName(context, "portal_membership")\n \n         # check if password is correct\n-        current_password = data.get(\'current_password\')\n+        current_password = data.get("current_password")\n         if current_password:\n             if six.PY2 and isinstance(current_password, str):\n-                current_password = current_password.encode(\'utf8\')\n+                current_password = current_password.encode("utf8")\n \n             if not membertool.testCurrentPassword(current_password):\n                 # add error to current_password widget\n                 err_str = _("Incorrect value for current password")\n-                notifyWidgetActionExecutionError(action,\n-                                                 \'current_password\', err_str)\n+                notifyWidgetActionExecutionError(action, "current_password", err_str)\n \n         # check if passwords are same and valid according to plugin\n-        new_password = data.get(\'new_password\')\n-        new_password_ctl = data.get(\'new_password_ctl\')\n+        new_password = data.get("new_password")\n+        new_password_ctl = data.get("new_password_ctl")\n         if new_password and new_password_ctl:\n-            err_str = registration.testPasswordValidity(new_password,\n-                                                        new_password_ctl)\n+            err_str = registration.testPasswordValidity(new_password, new_password_ctl)\n \n             if err_str:\n                 # add error to new_password widget\n-                notifyWidgetActionExecutionError(action,\n-                                                 \'new_password\', err_str)\n-                notifyWidgetActionExecutionError(action,\n-                                                 \'new_password_ctl\', err_str)\n+                notifyWidgetActionExecutionError(action, "new_password", err_str)\n+                notifyWidgetActionExecutionError(action, "new_password_ctl", err_str)\n \n     @button.buttonAndHandler(\n-        _(\'label_change_password\', default=\'Change Password\'),\n-        name=\'reset_passwd\'\n+        _("label_change_password", default="Change Password"), name="reset_passwd"\n     )\n     def action_reset_passwd(self, action):\n         data, errors = self.extractData()\n@@ -121,22 +108,22 @@ def action_reset_passwd(self, action):\n             self.status = self.formErrorsMessage\n             return\n \n-        membertool = getToolByName(self.context, \'portal_membership\')\n+        membertool = getToolByName(self.context, "portal_membership")\n \n-        password = data[\'new_password\']\n+        password = data["new_password"]\n         if six.PY2 and isinstance(password, str):\n-            password = password.encode(\'utf8\')\n+            password = password.encode("utf8")\n \n         try:\n             membertool.setPassword(password, None, REQUEST=self.request)\n         except AttributeError:\n-            failMessage = _(\'While changing your password an AttributeError \'\n-                            \'occurred. This is usually caused by your user \'\n-                            \'being defined outside the portal.\')\n-\n-            IStatusMessage(self.request).addStatusMessage(\n-                _(failMessage), type="error"\n+            failMessage = _(\n+                "While changing your password an AttributeError "\n+                "occurred. This is usually caused by your user "\n+                "being defined outside the portal."\n             )\n+\n+            IStatusMessage(self.request).addStatusMessage(_(failMessage), type="error")\n             return\n \n         IStatusMessage(self.request).addStatusMessage(\n@@ -144,10 +131,10 @@ def action_reset_passwd(self, action):\n         )\n \n     # hide inherited Save and Cancel buttons\n-    @button.buttonAndHandler(_(\'Save\'), condition=lambda form: False)\n+    @button.buttonAndHandler(_("Save"), condition=lambda form: False)\n     def handleSave(self, action):\n         pass\n \n-    @button.buttonAndHandler(_(\'Cancel\'), condition=lambda form: False)\n+    @button.buttonAndHandler(_("Cancel"), condition=lambda form: False)\n     def cancel(self, action):\n         pass\ndiff --git a/plone/app/users/browser/personalpreferences.py b/plone/app/users/browser/personalpreferences.py\nindex 74c16f7..7f51318 100644\n--- a/plone/app/users/browser/personalpreferences.py\n+++ b/plone/app/users/browser/personalpreferences.py\n@@ -10,12 +10,14 @@\n \n try:\n     import plone.app.event  # noqa\n+\n     HAS_PAE = True\n except ImportError:\n     HAS_PAE = False\n \n try:\n     import plone.app.vocabularies.datetimerelated  # noqa\n+\n     HAS_DT_VOCAB = True\n except ImportError:\n     HAS_DT_VOCAB = False\n@@ -27,34 +29,31 @@ class IPersonalPreferences(Interface):\n     """Provide schema for personalize form."""\n \n     wysiwyg_editor = Choice(\n-        title=_(\'label_wysiwyg_editor\', default=\'Wysiwyg editor\'),\n-        description=_(\n-            \'help_wysiwyg_editor\',\n-            default=\'Wysiwyg editor to use.\'\n-        ),\n+        title=_("label_wysiwyg_editor", default="Wysiwyg editor"),\n+        description=_("help_wysiwyg_editor", default="Wysiwyg editor to use."),\n         vocabulary="plone.app.vocabularies.AvailableEditors",\n         required=False,\n     )\n \n     language = Choice(\n-        title=_(\'label_language\', default=\'Language\'),\n-        description=_(\'help_preferred_language\', \'Your preferred language.\'),\n+        title=_("label_language", default="Language"),\n+        description=_("help_preferred_language", "Your preferred language."),\n         vocabulary="plone.app.vocabularies.AvailableContentLanguages",\n-        required=False\n+        required=False,\n     )\n \n     if HAS_PAE and HAS_DT_VOCAB:\n         timezone = Choice(\n-            title=_(\'label_timezone\', default=\'Time zone\'),\n-            description=_(\'help_timezone\', default=\'Your time zone\'),\n-            vocabulary=\'plone.app.vocabularies.AvailableTimezones\',\n+            title=_("label_timezone", default="Time zone"),\n+            description=_("help_timezone", default="Your time zone"),\n+            vocabulary="plone.app.vocabularies.AvailableTimezones",\n             required=False,\n         )\n     elif HAS_PAE:\n         timezone = Choice(\n-            title=_(\'label_timezone\', default=\'Time zone\'),\n-            description=_(\'help_timezone\', default=\'Your time zone\'),\n-            vocabulary=\'plone.app.vocabularies.Timezones\',\n+            title=_("label_timezone", default="Time zone"),\n+            description=_("help_timezone", default="Your time zone"),\n+            vocabulary="plone.app.vocabularies.Timezones",\n             required=False,\n         )\n \n@@ -66,45 +65,42 @@ class PersonalPreferencesPanelAdapter(AccountPanelSchemaAdapter):\n class PersonalPreferencesPanel(AccountPanelForm):\n     """Implementation of personalize form that uses z3c.form."""\n \n-    form_name = _(\'legend_personal_details\', \'Personal Details\')\n+    form_name = _("legend_personal_details", "Personal Details")\n     schema = IPersonalPreferences\n \n     @property\n     def description(self):\n-        userid = self.request.form.get(\'userid\')\n-        mt = getToolByName(self.context, \'portal_membership\')\n+        userid = self.request.form.get("userid")\n+        mt = getToolByName(self.context, "portal_membership")\n         if userid and (userid != mt.getAuthenticatedMember().getId()):\n             # editing someone else\'s profile\n             return _(\n-                \'description_preferences_form_otheruser\',\n-                default=\'Personal settings for $name\',\n-                mapping={\'name\': userid}\n+                "description_preferences_form_otheruser",\n+                default="Personal settings for $name",\n+                mapping={"name": userid},\n             )\n         else:\n             # editing my own profile\n-            return _(\n-                \'description_my_preferences\',\n-                default=\'Your personal settings.\'\n-            )\n+            return _("description_my_preferences", default="Your personal settings.")\n \n     def updateWidgets(self):\n         super().updateWidgets()\n \n-        self.widgets[\'language\'].noValueMessage = _(\n+        self.widgets["language"].noValueMessage = _(\n             "vocabulary-missing-single-value-for-edit",\n-            "Language neutral (site default)"\n+            "Language neutral (site default)",\n         )\n-        self.widgets[\'wysiwyg_editor\'].noValueMessage = _(\n-            "vocabulary-available-editor-novalue",\n-            "Use site default"\n+        self.widgets["wysiwyg_editor"].noValueMessage = _(\n+            "vocabulary-available-editor-novalue", "Use site default"\n         )\n \n     def __call__(self):\n-        self.request.set(\'disable_border\', 1)\n+        self.request.set("disable_border", 1)\n         return super().__call__()\n \n \n class PersonalPreferencesConfiglet(PersonalPreferencesPanel):\n     """Control panel version of the personal preferences panel"""\n-    template = ViewPageTemplateFile(\'account-configlet.pt\')\n+\n+    template = ViewPageTemplateFile("account-configlet.pt")\n     tab = "userprefs"\ndiff --git a/plone/app/users/browser/register.py b/plone/app/users/browser/register.py\nindex 51bd798..b1523ed 100644\n--- a/plone/app/users/browser/register.py\n+++ b/plone/app/users/browser/register.py\n@@ -45,16 +45,17 @@ def getRegisterSchema():\n     schema = getSchema(\n         ICombinedRegisterSchema,\n         AccountPanelSchemaAdapter,\n-        form_name=\'On Registration\',\n+        form_name="On Registration",\n     )\n     return schema\n \n \n class BaseRegistrationForm(AutoExtensibleForm, form.Form):\n     """Form to be used as base for Register and Add User forms."""\n+\n     label = ""\n     description = ""\n-    formErrorsMessage = _(\'There were errors.\')\n+    formErrorsMessage = _("There were errors.")\n     ignoreContext = True\n     enableCSRFProtection = True\n \n@@ -72,7 +73,7 @@ def _get_security_settings(self):\n \n     def render(self):\n         if self._finishedRegister:\n-            return self.context.unrestrictedTraverse(\'registered\')()\n+            return self.context.unrestrictedTraverse("registered")()\n \n         return super().render()\n \n@@ -88,39 +89,41 @@ def updateFields(self):\n         super().updateFields()\n \n         if use_email_as_login:\n-            self.fields[\'email\'].field.description = _(\n-                \'help_email_creation_for_login\', default="Enter an email "\n+            self.fields["email"].field.description = _(\n+                "help_email_creation_for_login",\n+                default="Enter an email "\n                 "address. This will be your login name. We respect your "\n                 "privacy, and will not give the address away to any third "\n-                "parties or expose it anywhere.")\n-            del self.fields[\'username\']\n+                "parties or expose it anywhere.",\n+            )\n+            del self.fields["username"]\n         else:\n-            self.fields[\'email\'].field.description = _(\n-                \'help_email_creation\',\n+            self.fields["email"].field.description = _(\n+                "help_email_creation",\n                 default="Enter an email address. This is necessary in case "\n-                        "the password is lost. We respect your privacy, and "\n-                        "will not give the address away to any third parties "\n-                        "or expose it anywhere."\n+                "the password is lost. We respect your privacy, and "\n+                "will not give the address away to any third parties "\n+                "or expose it anywhere.",\n             )\n \n         # Change the password description based on PAS Plugin The user needs a\n         # list of instructions on what kind of password is required.  We\'ll\n         # reuse password errors as instructions e.g. "Must contain a letter and\n         # a number".  Assume PASPlugin errors are already translated\n-        if self.fields.get(\'password\', None):\n-            registration = getToolByName(self.context, \'portal_registration\')\n-            err_str = registration.testPasswordValidity(\'\')\n+        if self.fields.get("password", None):\n+            registration = getToolByName(self.context, "portal_registration")\n+            err_str = registration.testPasswordValidity("")\n             if err_str:\n                 msg = _(\n-                    \'help_password_creation_with_errors\',\n-                    default=\'Enter your new password. ${errors}\',\n-                    mapping=dict(errors=err_str)\n+                    "help_password_creation_with_errors",\n+                    default="Enter your new password. ${errors}",\n+                    mapping=dict(errors=err_str),\n                 )\n-                self.fields[\'password\'].field.description = msg\n+                self.fields["password"].field.description = msg\n \n     def updateActions(self):\n         super().updateActions()\n-        self.actions[\'register\'].addClass(\'btn-primary\')\n+        self.actions["register"].addClass("btn-primary")\n \n     def generate_user_id(self, data):\n         """Generate a user id from data.\n@@ -166,30 +169,30 @@ def generate_user_id(self, data):\n         if generator:\n             userid = generator(data)\n             if userid:\n-                data[\'user_id\'] = userid\n+                data["user_id"] = userid\n                 return userid\n \n         settings = self._get_security_settings()\n         if settings.use_uuid_as_userid:\n             userid = uuid_userid_generator()\n-            data[\'user_id\'] = userid\n+            data["user_id"] = userid\n             return userid\n \n         # We may have a username already.\n-        userid = data.get(\'username\')\n+        userid = data.get("username")\n         if userid:\n             # If we are not using email as login, then this user name is fine.\n             if not settings.use_email_as_login:\n-                data[\'user_id\'] = userid\n+                data["user_id"] = userid\n                 return userid\n \n         # First get a default value that we can return if we cannot\n         # find anything better.\n-        pas = getToolByName(self.context, \'acl_users\')\n-        email = pas.applyTransform(data.get(\'email\'))\n-        default = data.get(\'username\') or email or \'\'\n-        data[\'user_id\'] = default\n-        fullname = data.get(\'fullname\')\n+        pas = getToolByName(self.context, "acl_users")\n+        email = pas.applyTransform(data.get("email"))\n+        default = data.get("username") or email or ""\n+        data["user_id"] = default\n+        fullname = data.get("fullname")\n         if not fullname:\n             return default\n         userid = normalizeString(fullname)\n@@ -198,21 +201,21 @@ def generate_user_id(self, data):\n         # access an underscore attribute of the registration tool, so\n         # we take a precaution in case this is ever removed as an\n         # implementation detail.\n-        registration = getToolByName(self.context, \'portal_registration\')\n-        if hasattr(registration, \'_ALLOWED_MEMBER_ID_PATTERN\'):\n+        registration = getToolByName(self.context, "portal_registration")\n+        if hasattr(registration, "_ALLOWED_MEMBER_ID_PATTERN"):\n             if not registration._ALLOWED_MEMBER_ID_PATTERN.match(userid):\n                 # If \'bob-jones\' is not good then \'bob-jones-1\' will not\n                 # be good either.\n                 return default\n         if registration.isMemberIdAllowed(userid):\n-            data[\'user_id\'] = userid\n+            data["user_id"] = userid\n             return userid\n         # Try bob-jones-1, bob-jones-2, etc.\n         idx = 1\n         while idx <= RENAME_AFTER_CREATION_ATTEMPTS:\n             new_id = "%s-%d" % (userid, idx)\n             if registration.isMemberIdAllowed(new_id):\n-                data[\'user_id\'] = new_id\n+                data["user_id"] = new_id\n                 return new_id\n             idx += 1\n \n@@ -244,28 +247,28 @@ def generate_login_name(self, data):\n         When a login name is chosen, the \'login_name\' key of the data gets\n         set and the login name is returned.\n         """\n-        pas = getToolByName(self.context, \'acl_users\')\n+        pas = getToolByName(self.context, "acl_users")\n         generator = queryUtility(ILoginNameGenerator)\n         if generator:\n             login_name = generator(data)\n             if login_name:\n                 login_name = pas.applyTransform(login_name)\n-                data[\'login_name\'] = login_name\n+                data["login_name"] = login_name\n                 return login_name\n \n         # We may have a username already.\n-        login_name = data.get(\'username\')\n+        login_name = data.get("username")\n         login_name = pas.applyTransform(login_name)\n-        data[\'login_name\'] = login_name\n+        data["login_name"] = login_name\n         settings = self._get_security_settings()\n         # If we are not using email as login, then this user name is fine.\n         if not settings.use_email_as_login:\n             return login_name\n \n         # We use email as login.\n-        login_name = data.get(\'email\')\n+        login_name = data.get("email")\n         login_name = pas.applyTransform(login_name)\n-        data[\'login_name\'] = login_name\n+        data["login_name"] = login_name\n         return login_name\n \n     # Actions validators\n@@ -278,49 +281,42 @@ def validate_registration(self, action, data):\n         # CSRF protection\n         CheckAuthenticator(self.request)\n \n-        registration = getToolByName(self.context, \'portal_registration\')\n+        registration = getToolByName(self.context, "portal_registration")\n \n-        error_keys = [\n-            error.field.getName()\n-            for error\n-            in action.form.widgets.errors\n-        ]\n+        error_keys = [error.field.getName() for error in action.form.widgets.errors]\n \n         form_field_names = [f for f in self.fields]\n \n         portal = getUtility(ISiteRoot)\n \n         # passwords should match\n-        if \'password\' in form_field_names:\n-            assert \'password_ctl\' in form_field_names\n+        if "password" in form_field_names:\n+            assert "password_ctl" in form_field_names\n             # Skip this check if password fields already have an error\n-            if not (\'password\' in error_keys or \'password_ctl\' in error_keys):\n-                password = data.get(\'password\')\n-                password_ctl = data.get(\'password_ctl\')\n+            if not ("password" in error_keys or "password_ctl" in error_keys):\n+                password = data.get("password")\n+                password_ctl = data.get("password_ctl")\n                 if password != password_ctl:\n-                    err_str = _(\'Passwords do not match.\')\n-                    notifyWidgetActionExecutionError(action,\n-                                                     \'password\', err_str)\n-                    notifyWidgetActionExecutionError(action,\n-                                                     \'password_ctl\', err_str)\n+                    err_str = _("Passwords do not match.")\n+                    notifyWidgetActionExecutionError(action, "password", err_str)\n+                    notifyWidgetActionExecutionError(action, "password_ctl", err_str)\n \n         # Password field checked against RegistrationTool\n-        if \'password\' in form_field_names:\n+        if "password" in form_field_names:\n             # Skip this check if password fields already have an error\n-            if \'password\' not in error_keys:\n-                password = data.get(\'password\')\n+            if "password" not in error_keys:\n+                password = data.get("password")\n                 if password:\n                     # Use PAS to test validity\n                     err_str = registration.testPasswordValidity(password)\n                     if err_str:\n-                        notifyWidgetActionExecutionError(action,\n-                                                         \'password\', err_str)\n+                        notifyWidgetActionExecutionError(action, "password", err_str)\n \n         settings = self._get_security_settings()\n         if settings.use_email_as_login:\n-            username_field = \'email\'\n+            username_field = "email"\n         else:\n-            username_field = \'username\'\n+            username_field = "username"\n \n         # The term \'username\' is not clear.  It may be the user id or\n         # the login name.  So here we try to be explicit.\n@@ -345,44 +341,45 @@ def validate_registration(self, action, data):\n         if username_field not in error_keys:\n             # user id may not be the same as the portal id.\n             if user_id == portal.getId():\n-                err_str = _("This username is reserved. Please choose a "\n-                            "different name.")\n-                notifyWidgetActionExecutionError(action,\n-                                                 username_field, err_str)\n+                err_str = _(\n+                    "This username is reserved. Please choose a " "different name."\n+                )\n+                notifyWidgetActionExecutionError(action, username_field, err_str)\n \n         # Check if user id is allowed by the member id pattern.\n         if username_field not in error_keys:\n             if not registration.isMemberIdAllowed(user_id):\n-                err_str = _("The login name you selected is already in use "\n-                            "or is not valid. Please choose another.")\n-                notifyWidgetActionExecutionError(action,\n-                                                 username_field, err_str)\n+                err_str = _(\n+                    "The login name you selected is already in use "\n+                    "or is not valid. Please choose another."\n+                )\n+                notifyWidgetActionExecutionError(action, username_field, err_str)\n \n         if username_field not in error_keys:\n             # Check the uniqueness of the login name, not only when\n             # use_email_as_login is true, but always.\n-            pas = getToolByName(self, \'acl_users\')\n+            pas = getToolByName(self, "acl_users")\n             results = pas.searchUsers(name=login_name, exact_match=True)\n             if results:\n-                err_str = _("The login name you selected is already in use "\n-                            "or is not valid. Please choose another.")\n-                notifyWidgetActionExecutionError(action,\n-                                                 username_field, err_str)\n+                err_str = _(\n+                    "The login name you selected is already in use "\n+                    "or is not valid. Please choose another."\n+                )\n+                notifyWidgetActionExecutionError(action, username_field, err_str)\n \n-        if \'password\' in form_field_names and \'password\' not in error_keys:\n+        if "password" in form_field_names and "password" not in error_keys:\n             # Admin can either set a password or mail the user (or both).\n-            if not (data[\'password\'] or data[\'mail_me\']):\n-                err_str = _(\'msg_no_password_no_mail_me\',\n-                            default="You must set a password or choose to "\n-                            "send an email.")\n+            if not (data["password"] or data["mail_me"]):\n+                err_str = _(\n+                    "msg_no_password_no_mail_me",\n+                    default="You must set a password or choose to " "send an email.",\n+                )\n \n                 # set error on password field\n-                notifyWidgetActionExecutionError(action, \'password\', err_str)\n-                notifyWidgetActionExecutionError(action, \'mail_me\', err_str)\n+                notifyWidgetActionExecutionError(action, "password", err_str)\n+                notifyWidgetActionExecutionError(action, "mail_me", err_str)\n \n-    @button.buttonAndHandler(\n-        _(\'label_register\', default=\'Register\'), name=\'register\'\n-    )\n+    @button.buttonAndHandler(_("label_register", default="Register"), name="register")\n     def action_join(self, action):\n         data, errors = self.extractData()\n \n@@ -397,45 +394,45 @@ def action_join(self, action):\n \n         # XXX Return somewhere else, depending on what\n         # handle_join_success returns?\n-        came_from = self.request.form.get(\'came_from\')\n+        came_from = self.request.form.get("came_from")\n         if came_from:\n-            utool = getToolByName(self.context, \'portal_url\')\n+            utool = getToolByName(self.context, "portal_url")\n             if utool.isURLInPortal(came_from):\n                 self.request.response.redirect(came_from)\n-                return \'\'\n+                return ""\n \n     def handle_join_success(self, data):\n         # portal should be acquisition wrapped, this is needed for the schema\n         # adapter below\n-        portal = getToolByName(self.context, \'portal_url\').getPortalObject()\n-        registration = getToolByName(self.context, \'portal_registration\')\n+        portal = getToolByName(self.context, "portal_url").getPortalObject()\n+        registration = getToolByName(self.context, "portal_registration")\n \n         # user_id and login_name should be in the data, but let\'s be safe.\n-        user_id = data.get(\'user_id\', data.get(\'username\'))\n-        login_name = data.get(\'login_name\', data.get(\'username\'))\n+        user_id = data.get("user_id", data.get("username"))\n+        login_name = data.get("login_name", data.get("username"))\n         if six.PY2:\n             # I have seen a unicode user id.  I cannot reproduce it, but\n             # let\'s make them strings, otherwise you run into trouble with\n             # plone.session when trying to login.\n             if isinstance(user_id, str):\n-                user_id = user_id.encode(\'utf8\')\n+                user_id = user_id.encode("utf8")\n             if isinstance(login_name, str):\n-                login_name = login_name.encode(\'utf8\')\n+                login_name = login_name.encode("utf8")\n \n         # Set the username for good measure, as some code may expect\n         # it to exist and contain the user id.\n-        data[\'username\'] = user_id\n+        data["username"] = user_id\n \n         # The login name may already be in the form, but not\n         # necessarily, for example when using email as login.  This is\n         # at least needed for logging in immediately when password\n         # reset is bypassed.  We need the login name here, not the\n         # user id.\n-        self.request.form[\'form.username\'] = login_name\n+        self.request.form["form.username"] = login_name\n \n-        password = data.get(\'password\') or registration.generatePassword()\n+        password = data.get("password") or registration.generatePassword()\n         if six.PY2 and isinstance(password, str):\n-            password = password.encode(\'utf8\')\n+            password = password.encode("utf8")\n \n         try:\n             registration.addMember(user_id, password, REQUEST=self.request)\n@@ -448,7 +445,7 @@ def handle_join_success(self, data):\n         if user_id != login_name:\n             # The user id differs from the login name.  Set the login\n             # name correctly.\n-            pas = getToolByName(self.context, \'acl_users\')\n+            pas = getToolByName(self.context, "acl_users")\n             pas.updateLoginName(user_id, login_name)\n \n         # set member properties\n@@ -456,8 +453,9 @@ def handle_join_success(self, data):\n \n         settings = self._get_security_settings()\n         self._finishedRegister = True\n-        if data.get(\'mail_me\') or (not settings.enable_user_pwd_choice and\n-                                   not data.get(\'password\')):\n+        if data.get("mail_me") or (\n+            not settings.enable_user_pwd_choice and not data.get("password")\n+        ):\n             # We want to validate the email address (users cannot\n             # select their own passwords on the register form) or the\n             # admin has explicitly requested to send an email on the\n@@ -475,8 +473,9 @@ def handle_join_success(self, data):\n                 raise\n             except Exception as err:\n                 logging.exception(err)\n-                ctrlOverview = getMultiAdapter((portal, self.request),\n-                                               name=\'overview-controlpanel\')\n+                ctrlOverview = getMultiAdapter(\n+                    (portal, self.request), name="overview-controlpanel"\n+                )\n                 mail_settings_correct = not ctrlOverview.mailhost_warning()\n                 if mail_settings_correct:\n                     # The email settings are correct, so the most\n@@ -484,30 +483,37 @@ def handle_join_success(self, data):\n                     # address.  We remove the account:\n                     # Remove the account:\n                     self.context.acl_users.userFolderDelUsers(\n-                        [user_id], REQUEST=self.request)\n+                        [user_id], REQUEST=self.request\n+                    )\n                     self._finishedRegister = False\n                     IStatusMessage(self.request).addStatusMessage(\n-                        _(\'status_fatal_password_mail\',\n-                          default="Failed to create your account: we were "\n-                          "unable to send instructions for setting a password "\n-                          "to your email address: ${address}",\n-                          mapping={\'address\': data.get(\'email\', \'\')}),\n-                        type=\'error\')\n+                        _(\n+                            "status_fatal_password_mail",\n+                            default="Failed to create your account: we were "\n+                            "unable to send instructions for setting a password "\n+                            "to your email address: ${address}",\n+                            mapping={"address": data.get("email", "")},\n+                        ),\n+                        type="error",\n+                    )\n                 else:\n                     # This should only happen when an admin registers\n                     # a user.  The admin should have seen a warning\n                     # already, but we warn again for clarity.\n                     IStatusMessage(self.request).addStatusMessage(\n-                        _(\'status_nonfatal_password_mail\',\n-                          default="This account has been created, but we "\n-                          "were unable to send instructions for setting a "\n-                          "password to this email address: ${address}",\n-                          mapping={\'address\': data.get(\'email\', \'\')}),\n-                        type=\'warning\')\n+                        _(\n+                            "status_nonfatal_password_mail",\n+                            default="This account has been created, but we "\n+                            "were unable to send instructions for setting a "\n+                            "password to this email address: ${address}",\n+                            mapping={"address": data.get("email", "")},\n+                        ),\n+                        type="warning",\n+                    )\n \n     def applyProperties(self, userid, data):\n-        portal = getToolByName(self.context, \'portal_url\').getPortalObject()\n-        mt = getToolByName(self.context, \'portal_membership\')\n+        portal = getToolByName(self.context, "portal_url").getPortalObject()\n+        mt = getToolByName(self.context, "portal_membership")\n         member = mt.getMemberById(userid)\n \n         # cache adapters\n@@ -515,11 +521,10 @@ def applyProperties(self, userid, data):\n \n         # Set any fields that are simply properties for the new user, rather\n         # than fields to help create the new user\n-        register_fields = getFieldNames(IRegisterSchema) + \\\n-            getFieldNames(IAddUserSchema)\n+        register_fields = getFieldNames(IRegisterSchema) + getFieldNames(IAddUserSchema)\n         for k, value in data.items():\n             # skip fields not available in the schema\n-            if k in [\'login_name\', \'user_id\']:\n+            if k in ["login_name", "user_id"]:\n                 continue\n \n             # skip fields that are handled exclusively on user registration and\n@@ -541,27 +546,29 @@ def applyProperties(self, userid, data):\n \n \n class RegistrationForm(BaseRegistrationForm):\n-    """Dynamically get fields from user data, through admin config settings.\n-    """\n-    label = _(\'heading_registration_form\', default=\'Registration form\')\n+    """Dynamically get fields from user data, through admin config settings."""\n+\n+    label = _("heading_registration_form", default="Registration form")\n     description = ""\n-    template = ViewPageTemplateFile(\'register_form.pt\')\n+    template = ViewPageTemplateFile("register_form.pt")\n \n     @property\n     def showForm(self):\n         """The form should not be displayed to the user if the system is\n-           incapable of sending emails and email validation is switched on\n-           (users are not allowed to select their own passwords).\n+        incapable of sending emails and email validation is switched on\n+        (users are not allowed to select their own passwords).\n         """\n         portal = getUtility(ISiteRoot)\n-        ctrlOverview = getMultiAdapter((portal, self.request),\n-                                       name=\'overview-controlpanel\')\n+        ctrlOverview = getMultiAdapter(\n+            (portal, self.request), name="overview-controlpanel"\n+        )\n \n         settings = self._get_security_settings()\n         # hide form if mailhost_warning == True and\n         # enable_user_pwd_choice == False\n-        return not (ctrlOverview.mailhost_warning() and\n-                    not settings.enable_user_pwd_choice)\n+        return not (\n+            ctrlOverview.mailhost_warning() and not settings.enable_user_pwd_choice\n+        )\n \n     def updateFields(self):\n         if not self.showForm:\n@@ -576,13 +583,13 @@ def updateFields(self):\n         settings = self._get_security_settings()\n         if not settings.enable_user_pwd_choice:\n             # No? Remove the password fields.\n-            defaultFields = defaultFields.omit(\'password\', \'password_ctl\')\n+            defaultFields = defaultFields.omit("password", "password_ctl")\n         else:\n             # The portal is not interested in validating emails, and\n             # the user is not interested in getting an email with a\n             # link to set his password if he can set this password in\n             # the current form already.\n-            defaultFields = defaultFields.omit(\'mail_me\')\n+            defaultFields = defaultFields.omit("mail_me")\n \n         self.fields = defaultFields\n \n@@ -597,23 +604,24 @@ def updateWidgets(self):\n         if not settings.enable_user_pwd_choice:\n             # Show a message indicating that a password reset link\n             # will be mailed to the user.\n-            widget = self.widgets[\'mail_me\']\n+            widget = self.widgets["mail_me"]\n             widget.mode = DISPLAY_MODE\n-            widget.value = [\'selected\']\n+            widget.value = ["selected"]\n             widget.label = _(\n-                \'label_password_change_mail\',\n+                "label_password_change_mail",\n                 default="A URL will be generated and e-mailed to you; "\n-                        "follow the link to reach a page where you can "\n-                        "change your password and complete the registration "\n-                        "process.")\n+                "follow the link to reach a page where you can "\n+                "change your password and complete the registration "\n+                "process.",\n+            )\n             widget.terms = None\n             widget.updateTerms()\n \n \n class AddUserForm(BaseRegistrationForm):\n-    label = _(\'heading_add_user_form\', default=\'Add New User\')\n+    label = _("heading_add_user_form", default="Add New User")\n     description = ""\n-    template = ViewPageTemplateFile(\'newuser_form.pt\')\n+    template = ViewPageTemplateFile("newuser_form.pt")\n \n     def updateFields(self):\n         super().updateFields()\n@@ -623,26 +631,28 @@ def updateFields(self):\n         # enable_user_pwd_choice setting and on the correctness of the mail\n         # settings.\n         portal = getUtility(ISiteRoot)\n-        ctrlOverview = getMultiAdapter((portal, self.request),\n-                                       name=\'overview-controlpanel\')\n+        ctrlOverview = getMultiAdapter(\n+            (portal, self.request), name="overview-controlpanel"\n+        )\n         mail_settings_correct = not ctrlOverview.mailhost_warning()\n         if mail_settings_correct:\n             # Make the password fields optional: either specify a\n             # password or mail the user (or both).  The validation\n             # will check that at least one of the options is chosen.\n-            defaultFields[\'password\'].field.required = False\n-            defaultFields[\'password_ctl\'].field.required = False\n+            defaultFields["password"].field.required = False\n+            defaultFields["password_ctl"].field.required = False\n             settings = self._get_security_settings()\n-            defaultFields[\'mail_me\'].field.default =\\\n-                not settings.enable_user_pwd_choice\n+            defaultFields["mail_me"].field.default = not settings.enable_user_pwd_choice\n \n         # Append the manager-focused fields\n         registry = getUtility(IRegistry)\n-        user_group_settings = registry.forInterface(IUserGroupsSettingsSchema, prefix="plone")\n+        user_group_settings = registry.forInterface(\n+            IUserGroupsSettingsSchema, prefix="plone"\n+        )\n         many_groups = user_group_settings.many_groups\n         if not many_groups:\n             allFields = defaultFields + field.Fields(IAddUserSchema)\n-            allFields[\'groups\'].widgetFactory = CheckBoxFieldWidget\n+            allFields["groups"].widgetFactory = CheckBoxFieldWidget\n         else:\n             allFields = defaultFields\n         self.fields = allFields\n@@ -653,26 +663,24 @@ def updateWidgets(self):\n         # set display mode for mail_me field if no mailhost is configured\n         portal = getUtility(ISiteRoot)\n         ctrlOverview = getMultiAdapter(\n-            (portal, self.request), name=\'overview-controlpanel\'\n+            (portal, self.request), name="overview-controlpanel"\n         )\n         mail_settings_correct = not ctrlOverview.mailhost_warning()\n         if not mail_settings_correct:\n-            widget = self.widgets[\'mail_me\']\n+            widget = self.widgets["mail_me"]\n             widget.mode = DISPLAY_MODE\n-            widget.value = [\'selected\']\n+            widget.value = ["selected"]\n             widget.label = _(\n-                \'label_cant_mail_password_reset\',\n+                "label_cant_mail_password_reset",\n                 default="Normally we would offer to send the user an email "\n-                        "with instructions to set a password on completion "\n-                        "of this form. But this site does not have a valid "\n-                        "email setup. You can fix this in the Mail settings."\n+                "with instructions to set a password on completion "\n+                "of this form. But this site does not have a valid "\n+                "email setup. You can fix this in the Mail settings.",\n             )\n             widget.terms = None\n             widget.updateTerms()\n \n-    @button.buttonAndHandler(\n-        _(\'label_register\', default=\'Register\'), name=\'register\'\n-    )\n+    @button.buttonAndHandler(_("label_register", default="Register"), name="register")\n     def action_join(self, action):\n         data, errors = self.extractData()\n \n@@ -688,27 +696,27 @@ def action_join(self, action):\n         if not self._finishedRegister:\n             return\n \n-        portal_groups = getToolByName(self.context, \'portal_groups\')\n-        user_id = data[\'user_id\']\n+        portal_groups = getToolByName(self.context, "portal_groups")\n+        user_id = data["user_id"]\n         is_zope_manager = getSecurityManager().checkPermission(\n             ManagePortal,\n             self.context,\n         )\n         try:\n             # Add user to the selected group(s)\n-            if data.get(\'groups\', None) is not None:\n-                for groupname in data[\'groups\']:\n+            if data.get("groups", None) is not None:\n+                for groupname in data["groups"]:\n                     group = portal_groups.getGroupById(groupname)\n-                    if \'Manager\' in group.getRoles() and not is_zope_manager:\n+                    if "Manager" in group.getRoles() and not is_zope_manager:\n                         raise Forbidden\n-                    portal_groups.addPrincipalToGroup(user_id, groupname,\n-                                                      self.request)\n+                    portal_groups.addPrincipalToGroup(user_id, groupname, self.request)\n         except (AttributeError, ValueError) as err:\n             IStatusMessage(self.request).addStatusMessage(err, type="error")\n             return\n \n-        IStatusMessage(self.request).addStatusMessage(\n-            _("User added."), type=\'info\')\n+        IStatusMessage(self.request).addStatusMessage(_("User added."), type="info")\n         self.request.response.redirect(\n-            self.context.absolute_url() +\n-            \'/@@usergroup-userprefs?searchstring=\' + user_id)\n+            self.context.absolute_url()\n+            + "/@@usergroup-userprefs?searchstring="\n+            + user_id\n+        )\ndiff --git a/plone/app/users/browser/registered.py b/plone/app/users/browser/registered.py\nindex 7d7cc7e..bfc5c8b 100644\n--- a/plone/app/users/browser/registered.py\n+++ b/plone/app/users/browser/registered.py\n@@ -6,10 +6,9 @@\n \n \n class RegisteredView(BrowserView):\n-\n     def expire_date(self):\n-        ppr = getToolByName(self.context, \'portal_password_reset\')\n+        ppr = getToolByName(self.context, "portal_password_reset")\n         expire_length = datetime.timedelta(days=ppr.getExpirationTimeout())\n         expiration_date = datetime.datetime.now() + expire_length\n-        ploneview = getMultiAdapter((self.context, self.request), name=\'plone\')\n+        ploneview = getMultiAdapter((self.context, self.request), name="plone")\n         return ploneview.toLocalizedTime(expiration_date, long_format=1)\ndiff --git a/plone/app/users/browser/registersettingspanel.py b/plone/app/users/browser/registersettingspanel.py\nindex 07e93a3..7b9b4d6 100644\n--- a/plone/app/users/browser/registersettingspanel.py\n+++ b/plone/app/users/browser/registersettingspanel.py\n@@ -16,20 +16,22 @@ class RegistrationControlPanel(form.Form):\n     form_name = _("Registration settings")\n     enableCSRFProtection = True\n \n-    formErrorsMessage = _(\'There were errors.\')\n-    template = ViewPageTemplateFile(\'memberregistration.pt\')\n+    formErrorsMessage = _("There were errors.")\n+    template = ViewPageTemplateFile("memberregistration.pt")\n \n     fields = field.Fields(IRegistrationSettingsSchema)\n-    fields[\'user_registration_fields\'].widgetFactory = OrderedSelectFieldWidget\n+    fields["user_registration_fields"].widgetFactory = OrderedSelectFieldWidget\n \n     def getContent(self):\n         props = self.props()\n-        return {\'user_registration_fields\': props.getProperty(\n-            \'user_registration_fields\', [])}\n+        return {\n+            "user_registration_fields": props.getProperty(\n+                "user_registration_fields", []\n+            )\n+        }\n \n     @button.buttonAndHandler(\n-        _(\'label_apply_changes\', default=\'Apply changes\'),\n-        name=\'save\'\n+        _("label_apply_changes", default="Apply changes"), name="save"\n     )\n     def action_save(self, action):\n         # CSRF protection\n@@ -38,16 +40,18 @@ def action_save(self, action):\n         data, errors = self.extractData()\n         if errors:\n             IStatusMessage(self.request).addStatusMessage(\n-                self.formErrorsMessage, type=\'error\')\n+                self.formErrorsMessage, type="error"\n+            )\n             return\n \n         # save property\n-        if data[\'user_registration_fields\'] != \\\n-                self.getContent()[\'user_registration_fields\']:\n+        if (\n+            data["user_registration_fields"]\n+            != self.getContent()["user_registration_fields"]\n+        ):\n             props = self.props()\n             props._updateProperty(\n-                \'user_registration_fields\',\n-                data[\'user_registration_fields\']\n+                "user_registration_fields", data["user_registration_fields"]\n             )\n             msg = _("Changes saved.")\n         else:\n@@ -69,9 +73,9 @@ def action_save(self, action):\n \n     def updateActions(self):\n         super().updateActions()\n-        if self.actions and \'save\' in self.actions:\n-            self.actions[\'save\'].addclass(\'btn btn-primary\')\n+        if self.actions and "save" in self.actions:\n+            self.actions["save"].addclass("btn btn-primary")\n \n     def props(self):\n-        pprop = getToolByName(self.context, \'portal_properties\')\n+        pprop = getToolByName(self.context, "portal_properties")\n         return pprop.site_properties\ndiff --git a/plone/app/users/browser/schemaeditor.py b/plone/app/users/browser/schemaeditor.py\nindex 219d7ff..0d29a92 100644\n--- a/plone/app/users/browser/schemaeditor.py\n+++ b/plone/app/users/browser/schemaeditor.py\n@@ -27,52 +27,50 @@\n import re\n \n \n-USERS_NAMESPACE = \'http://namespaces.plone.org/supermodel/users\'\n-USERS_PREFIX = \'users\'\n-SPLITTER = \'_//_\'\n+USERS_NAMESPACE = "http://namespaces.plone.org/supermodel/users"\n+USERS_PREFIX = "users"\n+SPLITTER = "_//_"\n \n ALLOWED_FIELDS = [\n-    \'zope.schema._bootstrapfields.TextLine\',\n-    \'zope.schema._bootstrapfields.Text\',\n-    \'zope.schema._bootstrapfields.Bool\',\n-    \'zope.schema._bootstrapfields.Int\',\n-    \'zope.schema._field.Float\',\n-    \'zope.schema._field.Set\',\n-    \'zope.schema._field.Choice\',\n-    \'zope.schema._field.Date\',\n-    \'zope.schema._field.Datetime\',\n-    \'plone.namedfile.field.NamedBlobImage\',\n-    \'zope.schema._field.URI\',\n+    "zope.schema._bootstrapfields.TextLine",\n+    "zope.schema._bootstrapfields.Text",\n+    "zope.schema._bootstrapfields.Bool",\n+    "zope.schema._bootstrapfields.Int",\n+    "zope.schema._field.Float",\n+    "zope.schema._field.Set",\n+    "zope.schema._field.Choice",\n+    "zope.schema._field.Date",\n+    "zope.schema._field.Datetime",\n+    "plone.namedfile.field.NamedBlobImage",\n+    "zope.schema._field.URI",\n ]\n field_type_mapping = {\n-    "ProtectedEmail": \'string\',\n-    "ProtectedTextLine": \'string\',\n-    "TextLine": \'string\',\n-    "Text": \'text\',\n-    "Bool": \'boolean\',\n-    "Int": \'int\',\n-    "Float": \'float\',\n-    "Set": \'lines\',\n-    "Choice": \'string\',\n-    "Date": \'date\',\n-    "Datetime": \'date\',\n-    "NamedBlobImage": \'__portrait__\',\n-    "URI": \'text\',\n+    "ProtectedEmail": "string",\n+    "ProtectedTextLine": "string",\n+    "TextLine": "string",\n+    "Text": "text",\n+    "Bool": "boolean",\n+    "Int": "int",\n+    "Float": "float",\n+    "Set": "lines",\n+    "Choice": "string",\n+    "Date": "date",\n+    "Datetime": "date",\n+    "NamedBlobImage": "__portrait__",\n+    "URI": "text",\n }\n \n DEFAULT_VALUES = {\n-    \'text\': \'\',\n-    \'int\': 0,\n-    \'float\': 0.0,\n-    \'boolean\': False,\n+    "text": "",\n+    "int": 0,\n+    "float": 0.0,\n+    "boolean": False,\n }\n \n re_flags = re.S | re.U | re.X\n \n \n-def log(message,\n-        level=\'info\',\n-        id=\'plone.app.users.browser.schemaeditor\'):\n+def log(message, level="info", id="plone.app.users.browser.schemaeditor"):\n     logger = logging.getLogger(id)\n     getattr(logger, level)(message)\n \n@@ -86,18 +84,16 @@ class IMemberSchemaContext(Interface):\n \n \n class SchemaListingPage(FormWrapper):\n-\n     form = SchemaListing\n-    index = ViewPageTemplateFile(\'schema_layout.pt\')\n+    index = ViewPageTemplateFile("schema_layout.pt")\n \n \n @implementer(IMemberSchemaContext)\n class MemberSchemaContext(SchemaContext):\n-\n     label = _("Edit Member Form Fields")\n \n     def __init__(self, context, request):\n-        self.fieldsWhichCannotBeDeleted = [\'fullname\', \'email\']\n+        self.fieldsWhichCannotBeDeleted = ["fullname", "email"]\n         self.showSaveDefaults = False\n         self.enableFieldsets = False\n         self.allowedFields = ALLOWED_FIELDS\n@@ -123,9 +119,8 @@ def applySchema(snew_schema):\n     old_schema = get_ttw_edited_schema()\n \n     # check if more than 2 image fields:\n-    if snew_schema.count(\'NamedBlobImage\') > 1:\n-        site.plone_utils.addPortalMessage(\n-            _(\'One image field maximum.\'), \'error\')\n+    if snew_schema.count("NamedBlobImage") > 1:\n+        site.plone_utils.addPortalMessage(_("One image field maximum."), "error")\n         return\n \n     # store the current schema in the annotation\n@@ -139,31 +134,32 @@ def applySchema(snew_schema):\n     existing = pm.propertyIds()\n     for field_id in [a for a in new_schema]:\n         field_type = field_type_mapping.get(\n-            new_schema[field_id].__class__.__name__,\n-            None)\n+            new_schema[field_id].__class__.__name__, None\n+        )\n         if not field_type:\n-            log(\'Unsupported field: {} ({})\'.format(\n-                field_id,\n-                new_schema[field_id].__class__.__name__))\n+            log(\n+                "Unsupported field: {} ({})".format(\n+                    field_id, new_schema[field_id].__class__.__name__\n+                )\n+            )\n             continue\n-        if field_type == \'__portrait__\':\n+        if field_type == "__portrait__":\n             continue\n         if field_id in existing:\n             pm._delProperty(field_id)\n-        pm._setProperty(\n-            field_id,\n-            DEFAULT_VALUES.get(field_type, \'\'),\n-            field_type)\n+        pm._setProperty(field_id, DEFAULT_VALUES.get(field_type, ""), field_type)\n \n     if old_schema:\n-        to_remove = [field_id\n-                     for field_id in [a for a in old_schema]\n-                     if field_id not in [a for a in new_schema]]\n+        to_remove = [\n+            field_id\n+            for field_id in [a for a in old_schema]\n+            if field_id not in [a for a in new_schema]\n+        ]\n         for field_id in to_remove:\n             field_type = field_type_mapping.get(\n-                old_schema[field_id].__class__.__name__,\n-                None)\n-            if field_type == \'__portrait__\':\n+                old_schema[field_id].__class__.__name__, None\n+            )\n+            if field_type == "__portrait__":\n                 continue\n             pm._delProperty(field_id)\n \n@@ -175,27 +171,29 @@ def get_ttw_edited_schema():\n     if data:\n         ttwschema = load_ttw_schema(data)\n         if ttwschema is None:\n-            return \'\'\n+            return ""\n         return ttwschema\n-    return \'\'\n+    return ""\n \n \n @implementer(IFieldMetadataHandler)\n class UsersMetadataSchemaExporter:\n-    """Support the security: namespace in model definitions.\n-    """\n+    """Support the security: namespace in model definitions."""\n+\n     namespace = ns = USERS_NAMESPACE\n     prefix = USERS_PREFIX\n     if_attrs = (\n-        \'min\', \'max\', \'order\',\n-        \'min_length\', \'max_length\',\n-        \'required\',\n+        "min",\n+        "max",\n+        "order",\n+        "min_length",\n+        "max_length",\n+        "required",\n     )\n \n     def read(self, fieldNode, schema, field):\n         for attr in self.if_attrs:\n-            value = self.load(\n-                fieldNode.get(ns(attr, self.ns), None))\n+            value = self.load(fieldNode.get(ns(attr, self.ns), None))\n             if value is not None:\n                 setattr(field, attr, value)\n \n@@ -207,29 +205,29 @@ def write(self, fieldNode, schema, field):\n                 fieldNode.set(ns(attr, self.ns), v)\n \n     def load(self, value):\n-        listre = re.compile(\'(?P<type>list|set|tuple)\'\n-                            \':(?P<list>.*)\', re_flags)\n+        listre = re.compile("(?P<type>list|set|tuple)" ":(?P<list>.*)", re_flags)\n         ltypes = {\n-            \'list\': list,\n-            \'set\': set,\n-            \'tuple\': tuple,\n+            "list": list,\n+            "set": set,\n+            "tuple": tuple,\n         }\n         if isinstance(value, basestring):\n             listm = listre.search(value)\n             if value.startswith("int:"):\n-                value = int(value.split(\'int:\')[1])\n+                value = int(value.split("int:")[1])\n             elif listm:\n                 i = listm.groupdict()\n                 try:\n                     tp = i["type"]\n                     value = i["list"].split(SPLITTER)\n-                    if tp not in [\'list\']:\n+                    if tp not in ["list"]:\n                         value = ltypes[tp](value)\n                 except:\n                     value = []\n             else:\n-                value = {"bool:true": True,\n-                         "bool:false": False}.get(value.lower(), value)\n+                value = {"bool:true": True, "bool:false": False}.get(\n+                    value.lower(), value\n+                )\n         return value\n \n     def serialize(self, value):\n@@ -278,7 +276,7 @@ def get_schema(site=None):\n     if site is None:\n         site = get_portal()\n     annotations = IAnnotations(site)\n-    return annotations.get(SCHEMA_ANNOTATION, \'\')\n+    return annotations.get(SCHEMA_ANNOTATION, "")\n \n \n def set_schema(string, site=None):\n@@ -289,27 +287,20 @@ def set_schema(string, site=None):\n \n \n def invalidateSchemasInCache(portal):\n-\n     gsm = getGlobalSiteManager()\n \n-    schema = getattr(portal, \'_v_register_schema\', None)\n+    schema = getattr(portal, "_v_register_schema", None)\n     if schema is not None:\n         from .account import AccountPanelSchemaAdapter\n-        gsm.unregisterAdapter(\n-            AccountPanelSchemaAdapter,\n-            (IPloneSiteRoot,),\n-            schema\n-        )\n+\n+        gsm.unregisterAdapter(AccountPanelSchemaAdapter, (IPloneSiteRoot,), schema)\n     portal._v_register_schema = None\n \n-    schema = getattr(portal, \'_v_userdata_schema\', None)\n+    schema = getattr(portal, "_v_userdata_schema", None)\n     if schema is not None:\n         from .userdatapanel import UserDataPanelAdapter\n-        gsm.unregisterAdapter(\n-            UserDataPanelAdapter,\n-            (IPloneSiteRoot,),\n-            schema\n-        )\n+\n+        gsm.unregisterAdapter(UserDataPanelAdapter, (IPloneSiteRoot,), schema)\n     portal._v_userdata_schema = None\n \n     # kill volatile attributes in all threads\n@@ -321,9 +312,7 @@ def getFromBaseSchema(baseSchema, form_name=None):\n     ttwschema = get_ttw_edited_schema()\n     if ttwschema:\n         attrs.update(copySchemaAttrs(ttwschema, form_name))\n-    schema = SchemaClass(SCHEMATA_KEY,\n-                         bases=(baseSchema,),\n-                         attrs=attrs)\n+    schema = SchemaClass(SCHEMATA_KEY, bases=(baseSchema,), attrs=attrs)\n     finalizeSchemas(schema)\n     return schema\n \n@@ -344,5 +333,5 @@ def field_in_form(field, form_name=None):\n         return True\n     if field.__name__ in default_fields:\n         return True\n-    forms_selection = getattr(field, \'forms_selection\', [])\n+    forms_selection = getattr(field, "forms_selection", [])\n     return form_name in forms_selection\ndiff --git a/plone/app/users/browser/userdatapanel.py b/plone/app/users/browser/userdatapanel.py\nindex 5548e31..4c46b68 100644\n--- a/plone/app/users/browser/userdatapanel.py\n+++ b/plone/app/users/browser/userdatapanel.py\n@@ -21,45 +21,42 @@\n \n \n class UserDataPanelAdapter(AccountPanelSchemaAdapter):\n-    """One does not simply set portrait, email might be used to login with.\n-    """\n+    """One does not simply set portrait, email might be used to login with."""\n \n     @property\n     def schema(self):\n         # prevent infinite recursion when accessing the schema via bypassing\n         # __getattr__ of self\n         try:\n-            return object.__getattribute__(self, \'_schema\')\n+            return object.__getattribute__(self, "_schema")\n         except AttributeError:\n-            object.__setattr__(self, \'_schema\', getUserDataSchema())\n-        return object.__getattribute__(self, \'_schema\')\n+            object.__setattr__(self, "_schema", getUserDataSchema())\n+        return object.__getattribute__(self, "_schema")\n \n     @schema.setter\n     def schema(self, value):\n         self._schema = value\n \n     def get_email(self):\n-        return self._getProperty(\'email\')\n+        return self._getProperty("email")\n \n     def set_email(self, value):\n         registry = getUtility(IRegistry)\n-        security_settings = registry.forInterface(\n-            ISecuritySchema, prefix="plone")\n+        security_settings = registry.forInterface(ISecuritySchema, prefix="plone")\n         if security_settings.use_email_as_login:\n-            mt = getToolByName(self.context, \'portal_membership\')\n+            mt = getToolByName(self.context, "portal_membership")\n             if self.context.getId() == mt.getAuthenticatedMember().getId():\n                 set_own_login_name(self.context, value)\n             else:\n-                pas = getToolByName(self.context, \'acl_users\')\n+                pas = getToolByName(self.context, "acl_users")\n                 pas.updateLoginName(self.context.getId(), value)\n-        return self._setProperty(\'email\', value)\n+        return self._setProperty("email", value)\n \n     email = property(get_email, set_email)\n \n \n class UserDataPanel(AccountPanelForm):\n-\n-    form_name = _(\'User Data Form\')\n+    form_name = _("User Data Form")\n     enableCSRFProtection = True\n \n     @property\n@@ -69,36 +66,36 @@ def schema(self):\n \n     @property\n     def description(self):\n-        userid = self.request.form.get(\'userid\')\n-        mt = getToolByName(self.context, \'portal_membership\')\n+        userid = self.request.form.get("userid")\n+        mt = getToolByName(self.context, "portal_membership")\n         if userid and (userid != mt.getAuthenticatedMember().getId()):\n             # editing someone else\'s profile\n             return _(\n-                \'description_personal_information_form_otheruser\',\n-                default=\'Change personal information for $name\',\n-                mapping={\'name\': escape(userid)}\n+                "description_personal_information_form_otheruser",\n+                default="Change personal information for $name",\n+                mapping={"name": escape(userid)},\n             )\n         else:\n             # editing my own profile\n             return _(\n-                \'description_personal_information_form\',\n-                default=\'Change your personal information\'\n+                "description_personal_information_form",\n+                default="Change your personal information",\n             )\n \n     def __call__(self):\n-        userid = self.request.form.get(\'userid\')\n+        userid = self.request.form.get("userid")\n         if userid:\n-            mt = getToolByName(self.context, \'portal_membership\')\n+            mt = getToolByName(self.context, "portal_membership")\n             if mt.getMemberById(userid) is None:\n-                raise NotFound(\'User does not exist.\')\n-        self.request.set(\'disable_border\', 1)\n+                raise NotFound("User does not exist.")\n+        self.request.set("disable_border", 1)\n         return super().__call__()\n \n \n def getUserDataSchema():\n     portal = get_portal()\n-    form_name = \'In User Profile\'\n-    if getSecurityManager().checkPermission(\'Manage portal\', portal):\n+    form_name = "In User Profile"\n+    if getSecurityManager().checkPermission("Manage portal", portal):\n         form_name = None\n     schema = getSchema(IUserDataSchema, UserDataPanelAdapter, form_name=form_name)\n     return schema\n@@ -106,5 +103,6 @@ def getUserDataSchema():\n \n class UserDataConfiglet(UserDataPanel):\n     """Control panel version of the userdata panel"""\n-    template = ViewPageTemplateFile(\'account-configlet.pt\')\n+\n+    template = ViewPageTemplateFile("account-configlet.pt")\n     tab = "userdata"\ndiff --git a/plone/app/users/field_extender.py b/plone/app/users/field_extender.py\nindex 4445913..4bab68c 100644\n--- a/plone/app/users/field_extender.py\n+++ b/plone/app/users/field_extender.py\n@@ -14,12 +14,12 @@\n import zope.schema\n \n \n-form_vocab = SimpleVocabulary([\n-    SimpleTerm(value=\'On Registration\',\n-               title=\'On Registration\'),\n-    SimpleTerm(value=\'In User Profile\',\n-               title=\'In User Profile\'),\n-])\n+form_vocab = SimpleVocabulary(\n+    [\n+        SimpleTerm(value="On Registration", title="On Registration"),\n+        SimpleTerm(value="In User Profile", title="In User Profile"),\n+    ]\n+)\n \n \n class IUserFormSelection(Interface):\n@@ -47,7 +47,7 @@ def __init__(self, field):\n         self.field = field\n \n     def _get_forms(self):\n-        forms = getattr(self.field, \'forms_selection\', [])\n+        forms = getattr(self.field, "forms_selection", [])\n         return forms\n \n     def _set_forms(self, value):\n@@ -58,16 +58,15 @@ def _set_forms(self, value):\n \n @implementer(IFieldMetadataHandler)\n class UserFormSelectionMetadata:\n-\n     namespace = USERS_NAMESPACE\n     prefix = USERS_PREFIX\n \n     def read(self, fieldNode, schema, field):\n-        forms = fieldNode.get(ns(\'forms\', self.namespace))\n+        forms = fieldNode.get(ns("forms", self.namespace))\n         if forms:\n-            field.forms_selection = forms.split(\'|\')\n+            field.forms_selection = forms.split("|")\n \n     def write(self, fieldNode, schema, field):\n-        forms = getattr(field, \'forms_selection\', [])\n+        forms = getattr(field, "forms_selection", [])\n         if forms:\n-            fieldNode.set(ns(\'forms\', self.namespace), "|".join(forms))\n+            fieldNode.set(ns("forms", self.namespace), "|".join(forms))\ndiff --git a/plone/app/users/schema.py b/plone/app/users/schema.py\nindex 367a3cc..0bb71c8 100644\n--- a/plone/app/users/schema.py\n+++ b/plone/app/users/schema.py\n@@ -26,7 +26,7 @@\n def checkEmailAddress(value):\n     portal = getUtility(ISiteRoot)\n \n-    reg_tool = getToolByName(portal, \'portal_registration\')\n+    reg_tool = getToolByName(portal, "portal_registration")\n     if value and reg_tool.isValidEmail(value):\n         pass\n     else:\n@@ -36,21 +36,20 @@ def checkEmailAddress(value):\n \n \n class ProtectedTextLine(schema.TextLine):\n-    """ TextLine field which cannot be edited via shema editor\n-    """\n+    """TextLine field which cannot be edited via shema editor"""\n+\n     pass\n \n \n class ProtectedEmail(Email):\n-    """ Email field which cannot be edited via shema editor\n-    """\n+    """Email field which cannot be edited via shema editor"""\n+\n     pass\n \n \n @implementer(IFieldFactory)\n class NotEditableFieldFactory(FieldFactory):\n-\n-    title = _(\'(protected)\')\n+    title = _("(protected)")\n \n     def protected(self, field):\n         return True\n@@ -58,65 +57,67 @@ def protected(self, field):\n \n FullnameFieldFactory = NotEditableFieldFactory(\n     ProtectedTextLine,\n-    _(\'label_full_name\', default=\'Full Name\'),\n+    _("label_full_name", default="Full Name"),\n )\n \n EmailFieldFactory = NotEditableFieldFactory(\n     ProtectedEmail,\n-    _(\'label_email\', default=\'Email\'),\n+    _("label_email", default="Email"),\n )\n \n \n class IUserDataSchema(Interface):\n-    """\n-    """\n+    """ """\n \n     fullname = ProtectedTextLine(\n-        title=_(\'label_full_name\', default=\'Full Name\'),\n-        description=_(\'help_full_name_creation\',\n-                      default="Enter full name, e.g. John Smith."),\n-        required=False)\n+        title=_("label_full_name", default="Full Name"),\n+        description=_(\n+            "help_full_name_creation", default="Enter full name, e.g. John Smith."\n+        ),\n+        required=False,\n+    )\n \n     email = ProtectedEmail(\n-        title=_(\'label_email\', default=\'Email\'),\n-        description=\'We will use this address if you need to recover your \'\n-                    \'password\',\n+        title=_("label_email", default="Email"),\n+        description="We will use this address if you need to recover your " "password",\n         required=True,\n         constraint=checkEmailAddress,\n     )\n \n \n class IRegisterSchema(Interface):\n-\n     username = schema.ASCIILine(\n-        title=_(\'label_user_name\', default=\'User Name\'),\n+        title=_("label_user_name", default="User Name"),\n         description=_(\n-            \'help_user_name_creation_casesensitive\',\n+            "help_user_name_creation_casesensitive",\n             default="Enter a user name, usually something like \'jsmith\'. "\n-                    "No spaces or special characters. Usernames and "\n-                    "passwords are case sensitive, make sure the caps lock "\n-                    "key is not enabled. This is the name used to log in."\n-        )\n+            "No spaces or special characters. Usernames and "\n+            "passwords are case sensitive, make sure the caps lock "\n+            "key is not enabled. This is the name used to log in.",\n+        ),\n     )\n \n     password = schema.Password(\n-        title=_(\'label_password\', default=\'Password\'),\n-        description=_(\'help_password_creation\',\n-                      default=\'Enter your new password.\'))\n+        title=_("label_password", default="Password"),\n+        description=_("help_password_creation", default="Enter your new password."),\n+    )\n \n     password_ctl = schema.Password(\n-        title=_(\'label_confirm_password\',\n-                default=\'Confirm password\'),\n-        description=_(\'help_confirm_password\',\n-                      default="Re-enter the password. "\n-                      "Make sure the passwords are identical."))\n+        title=_("label_confirm_password", default="Confirm password"),\n+        description=_(\n+            "help_confirm_password",\n+            default="Re-enter the password. " "Make sure the passwords are identical.",\n+        ),\n+    )\n \n     mail_me = schema.Bool(\n-        title=_(\'label_mail_password\',\n-                default="Send a confirmation mail with a link to set the "\n-                "password"),\n+        title=_(\n+            "label_mail_password",\n+            default="Send a confirmation mail with a link to set the " "password",\n+        ),\n         required=False,\n-        default=False)\n+        default=False,\n+    )\n \n \n class ICombinedRegisterSchema(IRegisterSchema, IUserDataSchema):\n@@ -124,13 +125,12 @@ class ICombinedRegisterSchema(IRegisterSchema, IUserDataSchema):\n \n \n class IAddUserSchema(Interface):\n-\n     groups = schema.List(\n-        title=_(\'label_add_to_groups\',\n-                default=\'Add to the following groups:\'),\n-        description=\'\',\n+        title=_("label_add_to_groups", default="Add to the following groups:"),\n+        description="",\n         required=False,\n-        value_type=schema.Choice(vocabulary=\'plone.app.users.group_ids\'))\n+        value_type=schema.Choice(vocabulary="plone.app.users.group_ids"),\n+    )\n \n \n class PortraitWidget(NamedImageWidget):\n@@ -141,9 +141,9 @@ class PortraitWidget(NamedImageWidget):\n     #   another user\'s image does not work.\n     @property\n     def download_url(self):\n-        userid = self.request.form.get(\'userid\')\n+        userid = self.request.form.get("userid")\n         if not userid:\n-            mt = getToolByName(self.form.context, \'portal_membership\')\n+            mt = getToolByName(self.form.context, "portal_membership")\n             userid = mt.getAuthenticatedMember().getId()\n \n         # anonymous\n@@ -154,7 +154,7 @@ def download_url(self):\n         if not url:\n             return None\n \n-        return \'{}?{}\'.format(url, make_query({\'userid\': userid}))\n+        return "{}?{}".format(url, make_query({"userid": userid}))\n \n \n @implementer(IFieldWidget)\n@@ -164,26 +164,22 @@ def PortraitFieldWidget(field, request):\n \n \n class IRegistrationSettingsSchema(Interface):\n-\n     user_registration_fields = schema.Tuple(\n-        title=_(\n-            \'title_user_registration_fields\',\n-            default=\'User registration fields\'\n-        ),\n+        title=_("title_user_registration_fields", default="User registration fields"),\n         description=_(\n             "description_user_registration_fields",\n-            default=("Select the fields for the join form. Fields in the "\n-                     "right box will be shown on the form, fields on the "\n-                     "left are disabled. Use the left/right buttons to move "\n-                     "a field from right to left (to disable it) and vice "\n-                     "versa. Use the up/down buttons to change the order in "\n-                     "which the fields appear on the form."),\n+            default=(\n+                "Select the fields for the join form. Fields in the "\n+                "right box will be shown on the form, fields on the "\n+                "left are disabled. Use the left/right buttons to move "\n+                "a field from right to left (to disable it) and vice "\n+                "versa. Use the up/down buttons to change the order in "\n+                "which the fields appear on the form."\n+            ),\n         ),\n-        value_type=schema.Choice(\n-            vocabulary=\'plone.app.users.user_registration_fields\'),\n+        value_type=schema.Choice(vocabulary="plone.app.users.user_registration_fields"),\n     )\n \n \n class IUserSchemaProvider(Interface):\n-\n     pass\ndiff --git a/plone/app/users/setuphandlers.py b/plone/app/users/setuphandlers.py\nindex 358521e..ad42090 100644\n--- a/plone/app/users/setuphandlers.py\n+++ b/plone/app/users/setuphandlers.py\n@@ -5,26 +5,24 @@\n import six\n \n \n-logger = logging.getLogger(\'plone.app.users.setuphandlers\')\n+logger = logging.getLogger("plone.app.users.setuphandlers")\n \n-FILE = \'userschema.xml\'\n+FILE = "userschema.xml"\n \n \n def import_schema(context):\n-    """Import TTW Schema\n-    """\n+    """Import TTW Schema"""\n     data = context.readDataFile(FILE)\n     if data is None:\n         return\n     if six.PY3 and isinstance(data, bytes):\n-        data = data.decode(\'utf-8\')\n+        data = data.decode("utf-8")\n     ttw.applySchema(data)\n-    logger.info(\'Imported schema\')\n+    logger.info("Imported schema")\n \n \n def export_schema(context):\n-    """Export TTW schema\n-    """\n+    """Export TTW schema"""\n     schema = ttw.serialize_ttw_schema()\n-    context.writeDataFile(FILE, safe_encode(schema), \'text/xml\')\n-    logger.info(\'Exported schema\')\n+    context.writeDataFile(FILE, safe_encode(schema), "text/xml")\n+    logger.info("Exported schema")\ndiff --git a/plone/app/users/testing.py b/plone/app/users/testing.py\nindex 8061f5a..b97c87c 100644\n--- a/plone/app/users/testing.py\n+++ b/plone/app/users/testing.py\n@@ -10,7 +10,6 @@\n \n \n class PloneAppUsersLayer(PloneSandboxLayer):\n-\n     defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n@@ -20,7 +19,7 @@ def setUpZope(self, app, configurationContext):\n         self.loadZCML(package=plone.app.users)\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.app.users:default\')\n+        applyProfile(portal, "plone.app.users:default")\n \n \n PLONE_APP_USERS_FIXTURE = PloneAppUsersLayer()\n@@ -28,13 +27,13 @@ def setUpPloneSite(self, portal):\n \n PLONE_APP_USERS_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(PLONE_APP_USERS_FIXTURE,),\n-    name=\'PloneAppUsersLayer:IntegrationTesting\',\n+    name="PloneAppUsersLayer:IntegrationTesting",\n )\n \n \n PLONE_APP_USERS_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PLONE_APP_USERS_FIXTURE,),\n-    name=\'PloneAppUsersLayer:FunctionalTesting\',\n+    name="PloneAppUsersLayer:FunctionalTesting",\n )\n \n \n@@ -44,5 +43,5 @@ def setUpPloneSite(self, portal):\n         REMOTE_LIBRARY_BUNDLE_FIXTURE,\n         z2.ZSERVER_FIXTURE,\n     ),\n-    name=\'PloneAppUsersLayer:AcceptanceTesting\',\n+    name="PloneAppUsersLayer:AcceptanceTesting",\n )\ndiff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py\nindex d5766cd..2be60fa 100644\n--- a/plone/app/users/tests/base.py\n+++ b/plone/app/users/tests/base.py\n@@ -29,54 +29,55 @@\n \n \n class BaseTestCase(unittest.TestCase):\n-    """ base test case which adds amin user """\n+    """base test case which adds amin user"""\n \n     layer = PLONE_APP_USERS_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.portal.acl_users._doAddUser(\'admin\', TEST_USER_PASSWORD, [\'Manager\'], [])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.portal.acl_users._doAddUser("admin", TEST_USER_PASSWORD, ["Manager"], [])\n         set_mock_mailhost(self.portal)\n         self.membership = self.portal.portal_membership\n         self.security_settings = get_security_settings()\n \n-        self.browser = Browser(self.layer[\'app\'])\n-        self.request = self.layer[\'request\']\n+        self.browser = Browser(self.layer["app"])\n+        self.request = self.layer["request"]\n \n     def tearDown(self):\n-        login(self.portal, \'admin\')\n+        login(self.portal, "admin")\n         unset_mock_mailhost(self.portal)\n         pas_instance = self.portal.acl_users\n-        plugin = getattr(pas_instance, \'test\', None)\n+        plugin = getattr(pas_instance, "test", None)\n         if plugin is not None:\n-            plugins = pas_instance._getOb(\'plugins\')\n-            plugins.deactivatePlugin(IValidationPlugin, \'test\')\n+            plugins = pas_instance._getOb("plugins")\n+            plugins.deactivatePlugin(IValidationPlugin, "test")\n             # plugins.deactivatePlugin(IPropertiesPlugin, \'test\')\n-            pas_instance.manage_delObjects(\'test\')\n+            pas_instance.manage_delObjects("test")\n \n     def test_nothing(self):\n-        """ Add a dummy test here, so the base class \'passes\'. """\n+        """Add a dummy test here, so the base class \'passes\'."""\n+\n \n # Dummy password validation PAS plugin\n \n \n class DeadParrotPassword(BasePlugin, Cacheable):\n-    meta_type = \'Test Password Strength Plugin\'\n+    meta_type = "Test Password Strength Plugin"\n     security = ClassSecurityInfo()\n \n     def __init__(self, id, title=None):\n         self._id = self.id = id\n         self.title = title\n \n-    security.declarePrivate(\'validateUserInfo\')\n+    security.declarePrivate("validateUserInfo")\n \n     def validateUserInfo(self, user, set_id, set_info):\n         errors = []\n-        if set_info and set_info.get(\'password\', None) is not None:\n-            password = set_info[\'password\']\n-            if password.count(\'dead\') or password == \'\':\n-                errors = [{\'id\': \'password\', \'error\': \'Must not be dead\'}]\n+        if set_info and set_info.get("password", None) is not None:\n+            password = set_info["password"]\n+            if password.count("dead") or password == "":\n+                errors = [{"id": "password", "error": "Must not be dead"}]\n             else:\n                 errors = []\n         return errors\n@@ -84,41 +85,42 @@ def validateUserInfo(self, user, set_id, set_info):\n \n # Helper methods used in doctests\n \n+\n def setMailHost():\n     registry = getUtility(IRegistry)\n-    mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n-    mail_settings.smtp_host = \'localhost\'\n-    mail_settings.email_from_address = \'admin@foo.com\'\n+    mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n+    mail_settings.smtp_host = "localhost"\n+    mail_settings.email_from_address = "admin@foo.com"\n     commit()\n \n \n def unsetMailHost():\n     registry = getUtility(IRegistry)\n-    mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n-    mail_settings.smtp_host = \'\'\n-    mail_settings.email_from_address = \'\'\n+    mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n+    mail_settings.smtp_host = ""\n+    mail_settings.email_from_address = ""\n     commit()\n \n \n def activateDefaultPasswordPolicy(portal):\n     uf = portal.acl_users\n-    for policy in uf.objectIds([\'Default Plone Password Policy\']):\n+    for policy in uf.objectIds(["Default Plone Password Policy"]):\n         activatePluginInterfaces(portal, policy)\n \n \n def addParrotPasswordPolicy(portal):\n     # remove default policy\n     uf = portal.acl_users\n-    for policy in uf.objectIds([\'Default Plone Password Policy\']):\n+    for policy in uf.objectIds(["Default Plone Password Policy"]):\n         uf.plugins.deactivatePlugin(IValidationPlugin, policy)\n \n-    obj = DeadParrotPassword(\'test\')\n+    obj = DeadParrotPassword("test")\n     uf._setObject(obj.getId(), obj)\n     obj = uf[obj.getId()]\n     activatePluginInterfaces(portal, obj.getId())\n \n     # portal = getUtility(ISiteRoot)\n-    plugins = uf._getOb(\'plugins\')\n+    plugins = uf._getOb("plugins")\n     validators = plugins.listPlugins(IValidationPlugin)\n     assert validators\n     commit()\n@@ -134,7 +136,7 @@ def get_security_settings():\n \n def set_mock_mailhost(portal):\n     portal._original_MailHost = portal.MailHost\n-    portal.MailHost = mailhost = MockMailHost(\'MailHost\')\n+    portal.MailHost = mailhost = MockMailHost("MailHost")\n     sm = getSiteManager(context=portal)\n     sm.unregisterUtility(provided=IMailHost)\n     sm.registerUtility(mailhost, provided=IMailHost)\ndiff --git a/plone/app/users/tests/test_account.py b/plone/app/users/tests/test_account.py\nindex 0f916bd..8f15886 100644\n--- a/plone/app/users/tests/test_account.py\n+++ b/plone/app/users/tests/test_account.py\n@@ -10,7 +10,6 @@\n \n @implementer(IMembershipTool)\n class DummyPortalMembership:\n-\n     def __init__(self, allowed):\n         self.allowed = allowed\n \n@@ -18,7 +17,7 @@ def getMemberById(self, id):\n         return id\n \n     def getAuthenticatedMember(self):\n-        return \'(authenticated)\'\n+        return "(authenticated)"\n \n     def checkPermission(self, permission, context):\n         return self.allowed\n@@ -30,19 +29,19 @@ class TestAccountPanelSchemaAdapter(unittest.TestCase):\n     def test__init__no_userid(self):\n         """Should edit current user."""\n         provideUtility(DummyPortalMembership(False))\n-        adapter = AccountPanelSchemaAdapter(self.layer[\'request\'])\n-        self.assertEqual(\'(authenticated)\', adapter.context)\n+        adapter = AccountPanelSchemaAdapter(self.layer["request"])\n+        self.assertEqual("(authenticated)", adapter.context)\n \n     def test__init__userid_in_request_form_for_non_manager(self):\n         """Disallow for non-privileged users."""\n         provideUtility(DummyPortalMembership(False))\n-        self.layer[\'request\'].form[\'userid\'] = \'bob\'\n-        adapter = AccountPanelSchemaAdapter(self.layer[\'request\'])\n-        self.assertEqual(\'(authenticated)\', adapter.context)\n+        self.layer["request"].form["userid"] = "bob"\n+        adapter = AccountPanelSchemaAdapter(self.layer["request"])\n+        self.assertEqual("(authenticated)", adapter.context)\n \n     def test__init__userid_in_request_form_for_manager(self):\n         """Should allow for privileged users."""\n         provideUtility(DummyPortalMembership(True))\n-        self.layer[\'request\'].form[\'userid\'] = \'bob\'\n-        adapter = AccountPanelSchemaAdapter(self.layer[\'request\'])\n-        self.assertEqual(\'bob\', adapter.context)\n+        self.layer["request"].form["userid"] = "bob"\n+        adapter = AccountPanelSchemaAdapter(self.layer["request"])\n+        self.assertEqual("bob", adapter.context)\ndiff --git a/plone/app/users/tests/test_doctests.py b/plone/app/users/tests/test_doctests.py\nindex c7865a6..568b9ee 100644\n--- a/plone/app/users/tests/test_doctests.py\n+++ b/plone/app/users/tests/test_doctests.py\n@@ -6,38 +6,39 @@\n \n \n doc_tests = [\n-    \'duplicate_email.rst\',\n-    \'email_login.rst\',\n-    \'flexible_user_registration.rst\',\n-    \'forms_navigationroot.rst\',  # need to ask about content types layer\n-    \'member_search.rst\',\n-    \'registration_forms.rst\',  # working on it\n-    \'password.rst\',  # for later\n-    \'personal_preferences.rst\',\n-    \'personal_preferences_prefs_user_details.rst\',\n-    \'userdata.rst\',\n-    \'userdata_prefs_user_details.rst\',\n-    \'../vocabularies.py\',\n+    "duplicate_email.rst",\n+    "email_login.rst",\n+    "flexible_user_registration.rst",\n+    "forms_navigationroot.rst",  # need to ask about content types layer\n+    "member_search.rst",\n+    "registration_forms.rst",  # working on it\n+    "password.rst",  # for later\n+    "personal_preferences.rst",\n+    "personal_preferences_prefs_user_details.rst",\n+    "userdata.rst",\n+    "userdata_prefs_user_details.rst",\n+    "../vocabularies.py",\n ]\n \n optionflags = (\n-    doctest.ELLIPSIS |\n-    doctest.NORMALIZE_WHITESPACE |\n-    doctest.REPORT_ONLY_FIRST_FAILURE\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n )\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(\n-            doctest.DocFileSuite(\n-                f\'tests/{test_file}\',\n-                package=\'plone.app.users\',\n-                optionflags=optionflags,\n-            ),\n-            layer=PLONE_APP_USERS_FUNCTIONAL_TESTING)\n-        for test_file in doc_tests\n-    ])\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite(\n+                    f"tests/{test_file}",\n+                    package="plone.app.users",\n+                    optionflags=optionflags,\n+                ),\n+                layer=PLONE_APP_USERS_FUNCTIONAL_TESTING,\n+            )\n+            for test_file in doc_tests\n+        ]\n+    )\n \n     return suite\ndiff --git a/plone/app/users/tests/test_exportimport.py b/plone/app/users/tests/test_exportimport.py\nindex 922c601..6309f8d 100644\n--- a/plone/app/users/tests/test_exportimport.py\n+++ b/plone/app/users/tests/test_exportimport.py\n@@ -11,7 +11,6 @@\n \n \n class TestImport(BaseTestCase):\n-\n     def setUp(self):\n         super().setUp()\n         xml = """<model xmlns:lingua="http://namespaces.plone.org/supermodel/lingua" xmlns:users="http://namespaces.plone.org/supermodel/users" xmlns:form="http://namespaces.plone.org/supermodel/form" xmlns:i18n="http://xml.zope.org/namespaces/i18n" xmlns:security="http://namespaces.plone.org/supermodel/security" xmlns:marshal="http://namespaces.plone.org/supermodel/marshal" xmlns="http://namespaces.plone.org/supermodel/schema" i18n:domain="plone">\n@@ -98,7 +97,7 @@ def setUp(self):\n </model>\n """\n         context = DummyImportContext(self.portal, purge=False)\n-        context._files = {\'userschema.xml\': xml}\n+        context._files = {"userschema.xml": xml}\n         import_schema(context)\n \n     def test_import(self):\n@@ -107,65 +106,65 @@ def test_import(self):\n         member_properties = pm.propertyIds()\n \n         self.assertIn("home_page", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'home_page\'], schema.URI))\n+        self.assertTrue(isinstance(user_schema["home_page"], schema.URI))\n         self.assertIn("home_page", member_properties)\n-        self.assertEqual(pm.getPropertyType(\'home_page\'), \'text\')\n+        self.assertEqual(pm.getPropertyType("home_page"), "text")\n \n         self.assertIn("description", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'description\'], schema.Text))\n+        self.assertTrue(isinstance(user_schema["description"], schema.Text))\n         self.assertIn("description", member_properties)\n-        self.assertEqual(pm.getPropertyType(\'description\'), \'text\')\n+        self.assertEqual(pm.getPropertyType("description"), "text")\n \n         self.assertIn("location", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'location\'], schema.TextLine))\n+        self.assertTrue(isinstance(user_schema["location"], schema.TextLine))\n         self.assertIn("location", member_properties)\n-        self.assertEqual(pm.getPropertyType(\'location\'), \'string\')\n+        self.assertEqual(pm.getPropertyType("location"), "string")\n \n         self.assertIn("portrait", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'portrait\'], NamedBlobImage))\n+        self.assertTrue(isinstance(user_schema["portrait"], NamedBlobImage))\n         # image fields are not handled as memberdata property,\n         # it is handled directly in portal_membership\n         self.assertNotIn("portrait", member_properties)\n \n         self.assertIn("birthdate", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'birthdate\'], schema.Date))\n+        self.assertTrue(isinstance(user_schema["birthdate"], schema.Date))\n         self.assertIn("birthdate", member_properties)\n-        self.assertEqual(pm.getPropertyType(\'birthdate\'), \'date\')\n+        self.assertEqual(pm.getPropertyType("birthdate"), "date")\n \n         self.assertIn("another_date", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'another_date\'], schema.Datetime))\n+        self.assertTrue(isinstance(user_schema["another_date"], schema.Datetime))\n         self.assertIn("another_date", member_properties)\n-        self.assertEqual(pm.getPropertyType(\'another_date\'), \'date\')\n+        self.assertEqual(pm.getPropertyType("another_date"), "date")\n \n         self.assertIn("age", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'age\'], schema.Int))\n+        self.assertTrue(isinstance(user_schema["age"], schema.Int))\n         self.assertIn("age", member_properties)\n-        self.assertEqual(pm.getPropertyType(\'age\'), \'int\')\n+        self.assertEqual(pm.getPropertyType("age"), "int")\n \n         self.assertIn("department", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'department\'], schema.Choice))\n+        self.assertTrue(isinstance(user_schema["department"], schema.Choice))\n         self.assertIn("department", member_properties)\n-        self.assertEqual(pm.getPropertyType(\'department\'), \'string\')\n+        self.assertEqual(pm.getPropertyType("department"), "string")\n \n         self.assertIn("skills", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'skills\'], schema.Set))\n+        self.assertTrue(isinstance(user_schema["skills"], schema.Set))\n         self.assertIn("skills", member_properties)\n-        self.assertEqual(pm.getPropertyType(\'skills\'), \'lines\')\n+        self.assertEqual(pm.getPropertyType("skills"), "lines")\n \n         self.assertIn("pi", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'pi\'], schema.Float))\n+        self.assertTrue(isinstance(user_schema["pi"], schema.Float))\n         self.assertIn("pi", member_properties)\n-        self.assertEqual(pm.getPropertyType(\'pi\'), \'float\')\n+        self.assertEqual(pm.getPropertyType("pi"), "float")\n \n         self.assertIn("vegetarian", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'vegetarian\'], schema.Bool))\n+        self.assertTrue(isinstance(user_schema["vegetarian"], schema.Bool))\n         self.assertIn("vegetarian", member_properties)\n-        self.assertEqual(pm.getPropertyType(\'vegetarian\'), \'boolean\')\n+        self.assertEqual(pm.getPropertyType("vegetarian"), "boolean")\n \n     def test_export(self):\n         context = DummyExportContext(self.portal)\n         export_schema(context)\n-        self.assertEqual(\'userschema.xml\', context._wrote[0][0])\n+        self.assertEqual("userschema.xml", context._wrote[0][0])\n         self.assertIn(b\'field name="home_page"\', context._wrote[0][1])\n         self.assertIn(b\'field name="description"\', context._wrote[0][1])\n         self.assertIn(b\'field name="location"\', context._wrote[0][1])\ndiff --git a/plone/app/users/tests/test_loginname_generator.py b/plone/app/users/tests/test_loginname_generator.py\nindex 9c74b42..563bdf1 100644\n--- a/plone/app/users/tests/test_loginname_generator.py\n+++ b/plone/app/users/tests/test_loginname_generator.py\n@@ -6,20 +6,18 @@\n \n \n class TestGenerateLoginName(BaseTestCase):\n-\n     def test_custom_generator(self):\n         """Test if a custom login name generator overrides the default\n         behavior.\n         """\n         sm = getSiteManager(context=self.portal)\n         form = BaseRegistrationForm(self.portal, {})\n-        data = {\'useme\': \'me me me\', \'username\': \'frank\'}\n+        data = {"useme": "me me me", "username": "frank"}\n \n-        sm.registerUtility(\n-            lambda data: data[\'useme\'], provided=ILoginNameGenerator)\n+        sm.registerUtility(lambda data: data["useme"], provided=ILoginNameGenerator)\n \n-        self.assertEqual(form.generate_login_name(data), \'me me me\')\n-        self.assertEqual(data.get(\'login_name\'), \'me me me\')\n+        self.assertEqual(form.generate_login_name(data), "me me me")\n+        self.assertEqual(data.get("login_name"), "me me me")\n \n     def test_custom_generator_empty(self):\n         """Test that the username is used if a custom login name generator\n@@ -27,32 +25,31 @@ def test_custom_generator_empty(self):\n         """\n         sm = getSiteManager(context=self.portal)\n         form = BaseRegistrationForm(self.portal, {})\n-        data = {\'useme\': \'\', \'username\': \'Frank\'}\n+        data = {"useme": "", "username": "Frank"}\n \n-        sm.registerUtility(\n-            lambda data: data[\'useme\'], provided=ILoginNameGenerator)\n+        sm.registerUtility(lambda data: data["useme"], provided=ILoginNameGenerator)\n \n-        self.assertEqual(form.generate_login_name(data), \'Frank\')\n-        self.assertEqual(data.get(\'login_name\'), \'Frank\')\n+        self.assertEqual(form.generate_login_name(data), "Frank")\n+        self.assertEqual(data.get("login_name"), "Frank")\n \n     def test_use_email_as_login_disabled(self):\n         """Test generating user_id with no custom login name generator and\n         with the use_email_as_login security setting disabled.\n         """\n         form = BaseRegistrationForm(self.portal, {})\n-        data = {\'username\': \'Frank\'}\n+        data = {"username": "Frank"}\n         self.security_settings.use_email_as_login = False\n \n-        self.assertEqual(form.generate_login_name(data), \'Frank\')\n-        self.assertEqual(data.get(\'login_name\'), \'Frank\')\n+        self.assertEqual(form.generate_login_name(data), "Frank")\n+        self.assertEqual(data.get("login_name"), "Frank")\n \n     def test_use_email_as_login_enabled(self):\n         """Test generating user_id with no custom login name generator and\n         with the use_email_as_login security setting enabled.\n         """\n         form = BaseRegistrationForm(self.portal, {})\n-        data = {\'username\': \'Frank\', \'email\': \'Frank@Test.com\'}\n+        data = {"username": "Frank", "email": "Frank@Test.com"}\n         self.security_settings.use_email_as_login = True\n \n-        self.assertEqual(form.generate_login_name(data), \'frank@test.com\')\n-        self.assertEqual(data.get(\'login_name\'), \'frank@test.com\')\n+        self.assertEqual(form.generate_login_name(data), "frank@test.com")\n+        self.assertEqual(data.get("login_name"), "frank@test.com")\ndiff --git a/plone/app/users/tests/test_member_search.py b/plone/app/users/tests/test_member_search.py\nindex 68fafdb..84b119d 100644\n--- a/plone/app/users/tests/test_member_search.py\n+++ b/plone/app/users/tests/test_member_search.py\n@@ -4,15 +4,14 @@\n \n \n class TestMemberSearch(unittest.TestCase):\n-\n     def test_extract_criteria_from_request(self):\n         data = {\n-            \'_authenticator\': \'ab4731...\',\n-            \'form.buttons.search\': \'Search\',\n-            \'form.widgets.something\': \'any form value\',\n-            \'form.widgets.roles-empty-marker\': True,\n+            "_authenticator": "ab4731...",\n+            "form.buttons.search": "Search",\n+            "form.widgets.something": "any form value",\n+            "form.widgets.roles-empty-marker": True,\n         }\n \n         result = extractCriteriaFromRequest(data)\n \n-        self.assertEqual(result, {\'something\': \'any form value\'})\n+        self.assertEqual(result, {"something": "any form value"})\ndiff --git a/plone/app/users/tests/test_new_user.py b/plone/app/users/tests/test_new_user.py\nindex 54549cd..aab912c 100644\n--- a/plone/app/users/tests/test_new_user.py\n+++ b/plone/app/users/tests/test_new_user.py\n@@ -7,27 +7,26 @@\n \n \n class TestNewUser(BaseTestCase):\n-\n     def test_new_user_as_site_administrator(self):\n         self.portal.acl_users._doAddUser(\n-            \'siteadmin\', TEST_USER_PASSWORD, [\'Site Administrator\'], []\n+            "siteadmin", TEST_USER_PASSWORD, ["Site Administrator"], []\n         )\n         # make the user available\n         transaction.commit()\n \n-        self.browser.addHeader(\'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n-        self.browser.open(\'http://nohost/plone/new-user\')\n-        self.browser.getControl(\'User Name\').value = \'newuser\'\n-        self.browser.getControl(\'Email\').value = \'newuser@example.com\'\n-        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Confirm password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Site Administrators\').selected = True\n-        self.browser.getControl(\'Register\').click()\n+        self.browser.addHeader("Authorization", f"Basic siteadmin:{TEST_USER_PASSWORD}")\n+        self.browser.open("http://nohost/plone/new-user")\n+        self.browser.getControl("User Name").value = "newuser"\n+        self.browser.getControl("Email").value = "newuser@example.com"\n+        self.browser.getControl("Password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Confirm password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Site Administrators").selected = True\n+        self.browser.getControl("Register").click()\n \n         # make sure the new user is in the Site Administrators group\n         self.assertTrue(\n-            \'Site Administrator\' in\n-            self.portal.acl_users.getUserById(\'newuser\').getRoles()\n+            "Site Administrator"\n+            in self.portal.acl_users.getUserById("newuser").getRoles()\n         )\n \n \n@@ -40,10 +39,10 @@ def setUp(self):\n         super().setUp()\n         self.portal_url = self.portal.absolute_url()\n         self.portal.acl_users._doAddUser(\n-            \'siteadmin\', TEST_USER_PASSWORD, [\'Site Administrator\'], []\n+            "siteadmin", TEST_USER_PASSWORD, ["Site Administrator"], []\n         )\n         transaction.commit()\n-        self.browser.addHeader(\'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n+        self.browser.addHeader("Authorization", f"Basic siteadmin:{TEST_USER_PASSWORD}")\n \n     def test_uuid_disabled_email_as_login_disabled(self):\n         self.security_settings.use_uuid_as_userid = False\n@@ -51,20 +50,20 @@ def test_uuid_disabled_email_as_login_disabled(self):\n         transaction.commit()\n \n         # create a user\n-        self.browser.open(\'http://nohost/plone/@@new-user\')\n-        self.browser.getControl(\'Full Name\').value = \'New User\'\n-        self.browser.getControl(\'User Name\').value = \'newie\'\n-        self.browser.getControl(\'Email\').value = \'NewUser@Example.Com\'\n-        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Confirm password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Register\').click()\n+        self.browser.open("http://nohost/plone/@@new-user")\n+        self.browser.getControl("Full Name").value = "New User"\n+        self.browser.getControl("User Name").value = "newie"\n+        self.browser.getControl("Email").value = "NewUser@Example.Com"\n+        self.browser.getControl("Password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Confirm password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Register").click()\n \n         # user id should be set the same as user name\n-        pas = getToolByName(self.portal, \'acl_users\')\n-        self.assertEqual(len(pas.searchUsers(name=\'newie\')), 1)\n-        user = pas.getUser(\'newie\')\n-        self.assertEqual(user.getId(), \'newie\')\n-        self.assertEqual(user.getUserName(), \'newie\')\n+        pas = getToolByName(self.portal, "acl_users")\n+        self.assertEqual(len(pas.searchUsers(name="newie")), 1)\n+        user = pas.getUser("newie")\n+        self.assertEqual(user.getId(), "newie")\n+        self.assertEqual(user.getUserName(), "newie")\n \n     def test_uuid_disabled_email_as_login_enabled_no_full_name(self):\n         self.security_settings.use_uuid_as_userid = False\n@@ -72,20 +71,20 @@ def test_uuid_disabled_email_as_login_enabled_no_full_name(self):\n         transaction.commit()\n \n         # create a user\n-        self.browser.open(\'http://nohost/plone/@@new-user\')\n-        self.browser.getControl(\'Email\').value = \'newuser@example.com\'\n-        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Confirm password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Register\').click()\n+        self.browser.open("http://nohost/plone/@@new-user")\n+        self.browser.getControl("Email").value = "newuser@example.com"\n+        self.browser.getControl("Password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Confirm password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Register").click()\n \n         # Since full name is not provided, the user id is set based on the\n         # e-mail, the same as the user name.\n-        pas = getToolByName(self.portal, \'acl_users\')\n-        self.assertEqual(len(pas.searchUsers(name=\'newuser@example.com\')), 1)\n-        self.assertEqual(len(pas.searchUsers(name=\'newuser@example.com\')), 1)\n-        user = pas.getUser(\'newuser@example.com\')\n-        self.assertEqual(user.getId(), \'newuser@example.com\')\n-        self.assertEqual(user.getUserName(), \'newuser@example.com\')\n+        pas = getToolByName(self.portal, "acl_users")\n+        self.assertEqual(len(pas.searchUsers(name="newuser@example.com")), 1)\n+        self.assertEqual(len(pas.searchUsers(name="newuser@example.com")), 1)\n+        user = pas.getUser("newuser@example.com")\n+        self.assertEqual(user.getId(), "newuser@example.com")\n+        self.assertEqual(user.getUserName(), "newuser@example.com")\n \n     def test_uuid_disabled_email_as_login_enabled_no_full_name_uppercase(self):\n         self.security_settings.use_uuid_as_userid = False\n@@ -93,19 +92,19 @@ def test_uuid_disabled_email_as_login_enabled_no_full_name_uppercase(self):\n         transaction.commit()\n \n         # create a user\n-        self.browser.open(\'http://nohost/plone/@@new-user\')\n-        self.browser.getControl(\'Email\').value = \'NewUser@Example.Com\'\n-        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Confirm password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Register\').click()\n+        self.browser.open("http://nohost/plone/@@new-user")\n+        self.browser.getControl("Email").value = "NewUser@Example.Com"\n+        self.browser.getControl("Password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Confirm password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Register").click()\n \n         # the user id is set based on the e-mail, which should be lowercased\n-        pas = getToolByName(self.portal, \'acl_users\')\n-        self.assertEqual(len(pas.searchUsers(name=\'newuser@example.com\')), 1)\n-        self.assertEqual(len(pas.searchUsers(name=\'NewUser@Example.Com\')), 1)\n-        user = pas.getUser(\'newuser@Example.Com\')\n-        self.assertEqual(user.getId(), \'newuser@example.com\')\n-        self.assertEqual(user.getUserName(), \'newuser@example.com\')\n+        pas = getToolByName(self.portal, "acl_users")\n+        self.assertEqual(len(pas.searchUsers(name="newuser@example.com")), 1)\n+        self.assertEqual(len(pas.searchUsers(name="NewUser@Example.Com")), 1)\n+        user = pas.getUser("newuser@Example.Com")\n+        self.assertEqual(user.getId(), "newuser@example.com")\n+        self.assertEqual(user.getUserName(), "newuser@example.com")\n \n     def test_uuid_disabled_email_as_login_enabled_has_full_name(self):\n         self.security_settings.use_uuid_as_userid = False\n@@ -113,21 +112,21 @@ def test_uuid_disabled_email_as_login_enabled_has_full_name(self):\n         transaction.commit()\n \n         # create a user\n-        self.browser.open(\'http://nohost/plone/@@new-user\')\n-        self.browser.getControl(\'Full Name\').value = \'New User\'\n-        self.browser.getControl(\'Email\').value = \'NewUser@Example.Com\'\n-        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Confirm password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Register\').click()\n+        self.browser.open("http://nohost/plone/@@new-user")\n+        self.browser.getControl("Full Name").value = "New User"\n+        self.browser.getControl("Email").value = "NewUser@Example.Com"\n+        self.browser.getControl("Password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Confirm password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Register").click()\n \n         # User id should be set based on the full name, user name should be\n         # set based on the e-mail.\n-        pas = getToolByName(self.portal, \'acl_users\')\n-        self.assertEqual(len(pas.searchUsers(name=\'newuser@example.com\')), 1)\n-        self.assertEqual(len(pas.searchUsers(name=\'NewUser@Example.Com\')), 1)\n-        user = pas.getUser(\'newuser@Example.Com\')\n-        self.assertEqual(user.getId(), \'new-user\')\n-        self.assertEqual(user.getUserName(), \'newuser@example.com\')\n+        pas = getToolByName(self.portal, "acl_users")\n+        self.assertEqual(len(pas.searchUsers(name="newuser@example.com")), 1)\n+        self.assertEqual(len(pas.searchUsers(name="NewUser@Example.Com")), 1)\n+        user = pas.getUser("newuser@Example.Com")\n+        self.assertEqual(user.getId(), "new-user")\n+        self.assertEqual(user.getUserName(), "newuser@example.com")\n \n     def test_uuid_enabled_email_as_login_disabled(self):\n         self.security_settings.use_uuid_as_userid = True\n@@ -135,23 +134,23 @@ def test_uuid_enabled_email_as_login_disabled(self):\n         transaction.commit()\n \n         # create a user\n-        self.browser.open(\'http://nohost/plone/@@new-user\')\n-        self.browser.getControl(\'Full Name\').value = \'New User\'\n-        self.browser.getControl(\'User Name\').value = \'newie\'\n-        self.browser.getControl(\'Email\').value = \'NewUser@Example.Com\'\n-        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Confirm password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Register\').click()\n+        self.browser.open("http://nohost/plone/@@new-user")\n+        self.browser.getControl("Full Name").value = "New User"\n+        self.browser.getControl("User Name").value = "newie"\n+        self.browser.getControl("Email").value = "NewUser@Example.Com"\n+        self.browser.getControl("Password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Confirm password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Register").click()\n \n         # uuid should be used for the user id\n-        pas = getToolByName(self.portal, \'acl_users\')\n-        self.assertEqual(len(pas.searchUsers(name=\'newie\')), 1)\n-        user = pas.getUser(\'newie\')\n+        pas = getToolByName(self.portal, "acl_users")\n+        self.assertEqual(len(pas.searchUsers(name="newie")), 1)\n+        user = pas.getUser("newie")\n         self.assertEqual(len(user.getId()), len(uuid_userid_generator()))\n-        self.assertNotEqual(user.getId(), \'newuser@example.com\')\n-        self.assertNotEqual(user.getId(), \'newie\')\n-        self.assertNotEqual(user.getId(), \'new-user\')\n-        self.assertEqual(user.getUserName(), \'newie\')\n+        self.assertNotEqual(user.getId(), "newuser@example.com")\n+        self.assertNotEqual(user.getId(), "newie")\n+        self.assertNotEqual(user.getId(), "new-user")\n+        self.assertEqual(user.getUserName(), "newie")\n \n     def test_uuid_enabled_email_as_login_enabled(self):\n         self.security_settings.use_uuid_as_userid = True\n@@ -159,21 +158,21 @@ def test_uuid_enabled_email_as_login_enabled(self):\n         transaction.commit()\n \n         # create a user\n-        self.browser.open(\'http://nohost/plone/@@new-user\')\n-        self.browser.getControl(\'Full Name\').value = \'New User\'\n-        self.browser.getControl(\'Email\').value = \'NewUser@Example.Com\'\n-        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Confirm password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Register\').click()\n+        self.browser.open("http://nohost/plone/@@new-user")\n+        self.browser.getControl("Full Name").value = "New User"\n+        self.browser.getControl("Email").value = "NewUser@Example.Com"\n+        self.browser.getControl("Password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Confirm password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Register").click()\n \n         # uuid should be used for the user id, user name should be based on\n         # the e-mail\n-        pas = getToolByName(self.portal, \'acl_users\')\n-        self.assertEqual(len(pas.searchUsers(name=\'newuser@example.com\')), 1)\n-        self.assertEqual(len(pas.searchUsers(name=\'NewUser@Example.Com\')), 1)\n-        user = pas.getUser(\'newuser@example.com\')\n+        pas = getToolByName(self.portal, "acl_users")\n+        self.assertEqual(len(pas.searchUsers(name="newuser@example.com")), 1)\n+        self.assertEqual(len(pas.searchUsers(name="NewUser@Example.Com")), 1)\n+        user = pas.getUser("newuser@example.com")\n         self.assertEqual(len(user.getId()), len(uuid_userid_generator()))\n-        self.assertNotEqual(user.getId(), \'newuser@example.com\')\n-        self.assertNotEqual(user.getId(), \'newie\')\n-        self.assertNotEqual(user.getId(), \'new-user\')\n-        self.assertEqual(user.getUserName(), \'newuser@example.com\')\n+        self.assertNotEqual(user.getId(), "newuser@example.com")\n+        self.assertNotEqual(user.getId(), "newie")\n+        self.assertNotEqual(user.getId(), "new-user")\n+        self.assertEqual(user.getUserName(), "newuser@example.com")\ndiff --git a/plone/app/users/tests/test_pam.py b/plone/app/users/tests/test_pam.py\nindex 56d8849..3021bce 100644\n--- a/plone/app/users/tests/test_pam.py\n+++ b/plone/app/users/tests/test_pam.py\n@@ -19,14 +19,13 @@\n \n \n class WITHPAMLayer(PloneSandboxLayer):\n-\n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.app.multilingual:default\')\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        applyProfile(portal, "plone.app.multilingual:default")\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n         login(portal, TEST_USER_NAME)\n-        language_tool = getToolByName(portal, \'portal_languages\')\n-        language_tool.addSupportedLanguage(\'fr\')\n-        language_tool.addSupportedLanguage(\'it\')\n+        language_tool = getToolByName(portal, "portal_languages")\n+        language_tool.addSupportedLanguage("fr")\n+        language_tool.addSupportedLanguage("it")\n         setup_tool = SetupMultilingualSite()\n         setup_tool.setupSite(portal)\n \n@@ -34,19 +33,20 @@ def setUpPloneSite(self, portal):\n WITHPAM_FIXTURE = WITHPAMLayer()\n \n WITHPAM_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(WITHPAM_FIXTURE,),\n-    name="PloneAppUsersWithPAMLayer:Functional")\n+    bases=(WITHPAM_FIXTURE,), name="PloneAppUsersWithPAMLayer:Functional"\n+)\n \n \n class TestUserDataPanelWithPAM(unittest.TestCase):\n-\n     layer = WITHPAM_FUNCTIONAL_TESTING\n \n     def test_pam(self):\n-        browser = z2.Browser(self.layer[\'app\'])\n-        browser.addHeader(\'Authorization\', f\'Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}\')\n-        browser.open(\'http://nohost/plone/fr/@@personal-information\')\n+        browser = z2.Browser(self.layer["app"])\n+        browser.addHeader(\n+            "Authorization", f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}"\n+        )\n+        browser.open("http://nohost/plone/fr/@@personal-information")\n         self.assertIn(\n-            \'Saisissez votre nom complet, par exemple Jean Dupont.\',\n+            "Saisissez votre nom complet, par exemple Jean Dupont.",\n             browser.contents,\n         )\ndiff --git a/plone/app/users/tests/test_robot.py b/plone/app/users/tests/test_robot.py\nindex 5d4132d..f4f6a0a 100644\n--- a/plone/app/users/tests/test_robot.py\n+++ b/plone/app/users/tests/test_robot.py\n@@ -8,15 +8,14 @@\n \n def test_suite():\n     suite = unittest.TestSuite()\n-    for testfile in os.listdir(\n-            os.path.join(os.path.dirname(__file__), "acceptance")):\n+    for testfile in os.listdir(os.path.join(os.path.dirname(__file__), "acceptance")):\n         testfilepath = os.path.join("acceptance", testfile)\n-#        if not os.path.isdir(testfilepath) and testfile.endswith(\'.robot\'):\n-#            suite.addTests([\n-#                layered(\n-#                    robotsuite.RobotTestSuite(\n-#                        testfilepath,\n-#                        noncritical=[\'fixme\']),\n-#                    layer=PLONE_APP_USERS_ACCEPTANCE_TESTING),\n-#            ])\n+    #        if not os.path.isdir(testfilepath) and testfile.endswith(\'.robot\'):\n+    #            suite.addTests([\n+    #                layered(\n+    #                    robotsuite.RobotTestSuite(\n+    #                        testfilepath,\n+    #                        noncritical=[\'fixme\']),\n+    #                    layer=PLONE_APP_USERS_ACCEPTANCE_TESTING),\n+    #            ])\n     return suite\ndiff --git a/plone/app/users/tests/test_schema_types.py b/plone/app/users/tests/test_schema_types.py\nindex d978bb2..d943cdf 100644\n--- a/plone/app/users/tests/test_schema_types.py\n+++ b/plone/app/users/tests/test_schema_types.py\n@@ -13,7 +13,6 @@\n \n \n class TestSchema(BaseTestCase):\n-\n     def setUp(self):\n         super().setUp()\n         xml = """<model xmlns:lingua="http://namespaces.plone.org/supermodel/lingua" xmlns:users="http://namespaces.plone.org/supermodel/users" xmlns:form="http://namespaces.plone.org/supermodel/form" xmlns:i18n="http://xml.zope.org/namespaces/i18n" xmlns:security="http://namespaces.plone.org/supermodel/security" xmlns:marshal="http://namespaces.plone.org/supermodel/marshal" xmlns="http://namespaces.plone.org/supermodel/schema" i18n:domain="plone">\n@@ -100,62 +99,68 @@ def setUp(self):\n </model>\n """\n         context = DummyImportContext(self.portal, purge=False)\n-        context._files = {\'userschema.xml\': xml}\n+        context._files = {"userschema.xml": xml}\n         import_schema(context)\n         transaction.commit()\n \n-        self.browser = Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer["app"])\n         self.browser.handleErrors = False\n-        self.request = self.layer[\'request\']\n+        self.request = self.layer["request"]\n \n     def test_schema_types(self):\n-        self.browser.open(\'http://nohost/plone/\')\n-        self.browser.getLink(\'Log in\').click()\n-        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n-        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Log in\').click()\n+        self.browser.open("http://nohost/plone/")\n+        self.browser.getLink("Log in").click()\n+        self.browser.getControl("Login Name").value = TEST_USER_NAME\n+        self.browser.getControl("Password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Log in").click()\n         self.browser.open("http://nohost/plone/@@personal-information")\n-        self.browser.getControl(\'Full Name\').value = \'Isaac Newton\'\n-        self.browser.getControl(\'Email\').value = \'isaac@cambridge.com\'\n-        self.browser.getControl(\'Home Page\').value = \'http://gravity.org\'\n-        self.browser.getControl(\'Biography\').value = \'I like apples\'\n-        self.browser.getControl(\'Location\').value = \'Cambridge\'\n-        portrait_file = resource_stream("plone.app.users.tests", \'onepixel.jpg\')\n-        self.browser.getControl(name=\'form.widgets.portrait\').add_file(portrait_file, "image/jpg", "onepixel.# jpg")\n-        self.browser.getControl(\'Age\').value = \'40\'\n-        self.browser.getControl(\'Department\').value = [\'Marketing\', ]\n-        self.browser.getControl(\'Skills\').value = [\'Programming\', ]\n-        self.browser.getControl(\'Pi\').value = \'3.14\'\n-        self.browser.getControl(\'Vegetarian\').click()\n-        self.browser.getControl(\'Save\').click()\n+        self.browser.getControl("Full Name").value = "Isaac Newton"\n+        self.browser.getControl("Email").value = "isaac@cambridge.com"\n+        self.browser.getControl("Home Page").value = "http://gravity.org"\n+        self.browser.getControl("Biography").value = "I like apples"\n+        self.browser.getControl("Location").value = "Cambridge"\n+        portrait_file = resource_stream("plone.app.users.tests", "onepixel.jpg")\n+        self.browser.getControl(name="form.widgets.portrait").add_file(\n+            portrait_file, "image/jpg", "onepixel.# jpg"\n+        )\n+        self.browser.getControl("Age").value = "40"\n+        self.browser.getControl("Department").value = [\n+            "Marketing",\n+        ]\n+        self.browser.getControl("Skills").value = [\n+            "Programming",\n+        ]\n+        self.browser.getControl("Pi").value = "3.14"\n+        self.browser.getControl("Vegetarian").click()\n+        self.browser.getControl("Save").click()\n \n         transaction.commit()\n-        membership = self.layer[\'portal\'].portal_membership\n+        membership = self.layer["portal"].portal_membership\n         member = membership.getMemberById(TEST_USER_ID)\n-        self.assertTrue(isinstance(member.getProperty(\'fullname\'), str))\n-        self.assertEqual(member.getProperty(\'fullname\'), \'Isaac Newton\')\n-        self.assertTrue(isinstance(member.getProperty(\'email\'), str))\n-        self.assertEqual(member.getProperty(\'email\'), \'isaac@cambridge.com\')\n-        self.assertTrue(isinstance(member.getProperty(\'home_page\'), str))\n-        self.assertEqual(member.getProperty(\'home_page\'), \'http://gravity.org\')\n-        self.assertTrue(isinstance(member.getProperty(\'description\'), str))\n-        self.assertEqual(member.getProperty(\'description\'), \'I like apples\')\n-        self.assertTrue(isinstance(member.getProperty(\'location\'), str))\n-        portrait = self.layer[\'portal\'].portal_memberdata._getPortrait(TEST_USER_ID)\n-        self.assertEqual(portrait.content_type, \'image/jpeg\')\n+        self.assertTrue(isinstance(member.getProperty("fullname"), str))\n+        self.assertEqual(member.getProperty("fullname"), "Isaac Newton")\n+        self.assertTrue(isinstance(member.getProperty("email"), str))\n+        self.assertEqual(member.getProperty("email"), "isaac@cambridge.com")\n+        self.assertTrue(isinstance(member.getProperty("home_page"), str))\n+        self.assertEqual(member.getProperty("home_page"), "http://gravity.org")\n+        self.assertTrue(isinstance(member.getProperty("description"), str))\n+        self.assertEqual(member.getProperty("description"), "I like apples")\n+        self.assertTrue(isinstance(member.getProperty("location"), str))\n+        portrait = self.layer["portal"].portal_memberdata._getPortrait(TEST_USER_ID)\n+        self.assertEqual(portrait.content_type, "image/jpeg")\n         self.assertEqual(portrait.width, 1)\n         self.assertEqual(portrait.height, 1)\n-        self.assertEqual(member.getProperty(\'location\'), \'Cambridge\')\n-        self.assertTrue(isinstance(member.getProperty(\'age\'), int))\n-        self.assertEqual(member.getProperty(\'age\'), 40)\n-        self.assertTrue(isinstance(member.getProperty(\'department\'), str))\n-        self.assertEqual(member.getProperty(\'department\'), \'Marketing\')\n-        self.assertTrue(isinstance(member.getProperty(\'skills\'), tuple))\n-        self.assertEqual(member.getProperty(\'skills\'), (\'Programming\', ))\n-        self.assertTrue(isinstance(member.getProperty(\'pi\'), float))\n-        self.assertEqual(member.getProperty(\'pi\'), 3.14)\n-        self.assertTrue(isinstance(member.getProperty(\'vegetarian\'), bool))\n-        self.assertEqual(member.getProperty(\'vegetarian\'), True)\n+        self.assertEqual(member.getProperty("location"), "Cambridge")\n+        self.assertTrue(isinstance(member.getProperty("age"), int))\n+        self.assertEqual(member.getProperty("age"), 40)\n+        self.assertTrue(isinstance(member.getProperty("department"), str))\n+        self.assertEqual(member.getProperty("department"), "Marketing")\n+        self.assertTrue(isinstance(member.getProperty("skills"), tuple))\n+        self.assertEqual(member.getProperty("skills"), ("Programming",))\n+        self.assertTrue(isinstance(member.getProperty("pi"), float))\n+        self.assertEqual(member.getProperty("pi"), 3.14)\n+        self.assertTrue(isinstance(member.getProperty("vegetarian"), bool))\n+        self.assertEqual(member.getProperty("vegetarian"), True)\n \n     def test_regression_76_user_information(self):\n         # Test that issue 76 does not return: user info sometimes appears empty.\n@@ -163,40 +168,40 @@ def test_regression_76_user_information(self):\n         # Here we test as admin.\n         portal_url = self.portal.absolute_url()\n         self.browser.open(portal_url)\n-        self.browser.getLink(\'Log in\').click()\n-        self.browser.getControl(\'Login Name\').value = SITE_OWNER_NAME\n-        self.browser.getControl(\'Password\').value = SITE_OWNER_PASSWORD\n-        self.browser.getControl(\'Log in\').click()\n+        self.browser.getLink("Log in").click()\n+        self.browser.getControl("Login Name").value = SITE_OWNER_NAME\n+        self.browser.getControl("Password").value = SITE_OWNER_PASSWORD\n+        self.browser.getControl("Log in").click()\n \n         # Set information for the test user.\n         info_page = f"{portal_url}/@@user-information?userid={TEST_USER_ID}"\n         self.browser.open(info_page)\n-        self.browser.getControl(\'Full Name\').value = \'Isaac Newton\'\n-        self.browser.getControl(\'Email\').value = \'isaac@cambridge.com\'\n-        self.browser.getControl(\'Age\').value = \'40\'\n-        self.browser.getControl(\'Save\').click()\n+        self.browser.getControl("Full Name").value = "Isaac Newton"\n+        self.browser.getControl("Email").value = "isaac@cambridge.com"\n+        self.browser.getControl("Age").value = "40"\n+        self.browser.getControl("Save").click()\n \n         # Open the page again, check that the information is set.\n         self.browser.open(info_page)\n-        self.assertEqual(self.browser.getControl(\'Full Name\').value, \'Isaac Newton\')\n-        self.assertEqual(self.browser.getControl(\'Email\').value, \'isaac@cambridge.com\')\n-        self.assertEqual(self.browser.getControl(\'Age\').value, \'40\')\n+        self.assertEqual(self.browser.getControl("Full Name").value, "Isaac Newton")\n+        self.assertEqual(self.browser.getControl("Email").value, "isaac@cambridge.com")\n+        self.assertEqual(self.browser.getControl("Age").value, "40")\n \n         # Opening the new-user/register page used to be enough to trigger the problem.\n         self.browser.open(f"{portal_url}/@@new-user")\n \n         # Any next calls to the user or personal information pages would show empty.\n         self.browser.open(info_page)\n-        self.assertEqual(self.browser.getControl(\'Full Name\').value, \'Isaac Newton\')\n-        self.assertEqual(self.browser.getControl(\'Email\').value, \'isaac@cambridge.com\')\n-        self.assertEqual(self.browser.getControl(\'Age\').value, \'40\')\n+        self.assertEqual(self.browser.getControl("Full Name").value, "Isaac Newton")\n+        self.assertEqual(self.browser.getControl("Email").value, "isaac@cambridge.com")\n+        self.assertEqual(self.browser.getControl("Age").value, "40")\n \n     def _enable_self_registration(self):\n         from plone.base.interfaces import ISecuritySchema\n         from plone.registry.interfaces import IRegistry\n         from zope.component import getUtility\n \n-        self.portal.manage_permission(\'Add portal member\', roles=[\'Anonymous\'])\n+        self.portal.manage_permission("Add portal member", roles=["Anonymous"])\n         registry = getUtility(IRegistry)\n         security_settings = registry.forInterface(ISecuritySchema, prefix="plone")\n         security_settings.enable_user_pwd_choice = True\n@@ -208,24 +213,24 @@ def test_regression_76_personal_information(self):\n         # Here we test as user.\n         portal_url = self.portal.absolute_url()\n         self.browser.open(portal_url)\n-        self.browser.getLink(\'Log in\').click()\n-        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n-        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Log in\').click()\n+        self.browser.getLink("Log in").click()\n+        self.browser.getControl("Login Name").value = TEST_USER_NAME\n+        self.browser.getControl("Password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Log in").click()\n \n         # Set information for the test user.\n         info_page = f"{portal_url}/@@personal-information"\n         self.browser.open(info_page)\n-        self.browser.getControl(\'Full Name\').value = \'Isaac Newton\'\n-        self.browser.getControl(\'Email\').value = \'isaac@cambridge.com\'\n-        self.browser.getControl(\'Age\').value = \'40\'\n-        self.browser.getControl(\'Save\').click()\n+        self.browser.getControl("Full Name").value = "Isaac Newton"\n+        self.browser.getControl("Email").value = "isaac@cambridge.com"\n+        self.browser.getControl("Age").value = "40"\n+        self.browser.getControl("Save").click()\n \n         # Open the page again, check that the information is set.\n         self.browser.open(info_page)\n-        self.assertEqual(self.browser.getControl(\'Full Name\').value, \'Isaac Newton\')\n-        self.assertEqual(self.browser.getControl(\'Email\').value, \'isaac@cambridge.com\')\n-        self.assertEqual(self.browser.getControl(\'Age\').value, \'40\')\n+        self.assertEqual(self.browser.getControl("Full Name").value, "Isaac Newton")\n+        self.assertEqual(self.browser.getControl("Email").value, "isaac@cambridge.com")\n+        self.assertEqual(self.browser.getControl("Age").value, "40")\n \n         # Enable self registration.\n         self._enable_self_registration()\n@@ -235,16 +240,18 @@ def test_regression_76_personal_information(self):\n         self.browser.open(f"{portal_url}/@@logout")\n         self.browser.open(f"{portal_url}/@@register")\n         # Check that the registration page is loading correctly.\n-        self.assertNotIn("This site doesn\'t have a valid email setup", self.browser.contents)\n+        self.assertNotIn(\n+            "This site doesn\'t have a valid email setup", self.browser.contents\n+        )\n         self.assertIn("Enter your new password.", self.browser.contents)\n \n         self.browser.open(f"{portal_url}/@@login")\n-        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n-        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Log in\').click()\n+        self.browser.getControl("Login Name").value = TEST_USER_NAME\n+        self.browser.getControl("Password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Log in").click()\n \n         # Any next calls to the user or personal information pages would show empty.\n         self.browser.open(info_page)\n-        self.assertEqual(self.browser.getControl(\'Full Name\').value, \'Isaac Newton\')\n-        self.assertEqual(self.browser.getControl(\'Email\').value, \'isaac@cambridge.com\')\n-        self.assertEqual(self.browser.getControl(\'Age\').value, \'40\')\n+        self.assertEqual(self.browser.getControl("Full Name").value, "Isaac Newton")\n+        self.assertEqual(self.browser.getControl("Email").value, "isaac@cambridge.com")\n+        self.assertEqual(self.browser.getControl("Age").value, "40")\ndiff --git a/plone/app/users/tests/test_user_data_panel.py b/plone/app/users/tests/test_user_data_panel.py\nindex 7b64009..32fa24d 100644\n--- a/plone/app/users/tests/test_user_data_panel.py\n+++ b/plone/app/users/tests/test_user_data_panel.py\n@@ -7,26 +7,21 @@\n \n \n class TestUserDataPanel(BaseTestCase):\n-\n     def test_regression(self):\n-        portal = self.layer[\'portal\']\n-        request = self.layer[\'request\']\n-        request.form.update({\n-            \'userid\': \'admin\'\n-        })\n+        portal = self.layer["portal"]\n+        request = self.layer["request"]\n+        request.form.update({"userid": "admin"})\n         form = UserDataPanel(portal, request)\n         description = translate(form.description, context=request)\n-        self.assertTrue(\'admin\' in description)\n+        self.assertTrue("admin" in description)\n         # form can be called without raising exception.\n         self.assertTrue(form())\n \n     def test_escape_html(self):\n-        portal = self.layer[\'portal\']\n-        request = self.layer[\'request\']\n-        request.form.update({\n-            \'userid\': \'admin<script>alert("userid")</script>\'\n-        })\n+        portal = self.layer["portal"]\n+        request = self.layer["request"]\n+        request.form.update({"userid": \'admin<script>alert("userid")</script>\'})\n         form = UserDataPanel(portal, request)\n         description = translate(form.description, context=request)\n-        self.assertTrue(\'<script>\' not in description)\n+        self.assertTrue("<script>" not in description)\n         self.assertRaises(NotFound, form)\ndiff --git a/plone/app/users/tests/test_userid_generator.py b/plone/app/users/tests/test_userid_generator.py\nindex 8db3c21..43e2237 100644\n--- a/plone/app/users/tests/test_userid_generator.py\n+++ b/plone/app/users/tests/test_userid_generator.py\n@@ -7,28 +7,25 @@\n \n \n class TestGenerateUserId(BaseTestCase):\n-\n     def test_custom_generator(self):\n         """Test if a custom user id generator overrides the default\n         behavior.\n         """\n \n         def one_generator(data):\n-            return \'one\'\n+            return "one"\n \n         sm = getSiteManager(context=self.portal)\n         sm.registerUtility(one_generator, provided=IUserIdGenerator)\n         form = BaseRegistrationForm(self.portal, {})\n \n         data = {}\n-        self.assertEqual(form.generate_user_id(data), \'one\')\n-        self.assertEqual(data.get(\'user_id\'), \'one\')\n+        self.assertEqual(form.generate_user_id(data), "one")\n+        self.assertEqual(data.get("user_id"), "one")\n \n-        data = {\'username\': \'joe\',\n-                \'fullname\': \'Joe User\',\n-                \'email\': \'joe@example.org\'}\n-        self.assertEqual(form.generate_user_id(data), \'one\')\n-        self.assertEqual(data.get(\'user_id\'), \'one\')\n+        data = {"username": "joe", "fullname": "Joe User", "email": "joe@example.org"}\n+        self.assertEqual(form.generate_user_id(data), "one")\n+        self.assertEqual(data.get("user_id"), "one")\n \n     def test_default(self):\n         """Test generating user_id with no custom user id generator and\n@@ -36,72 +33,68 @@ def test_default(self):\n         """\n         form = BaseRegistrationForm(self.portal, {})\n         data = {}\n-        self.assertEqual(form.generate_user_id(data), \'\')\n-        self.assertEqual(data.get(\'user_id\'), \'\')\n+        self.assertEqual(form.generate_user_id(data), "")\n+        self.assertEqual(data.get("user_id"), "")\n \n         # An explicit username is taken by default.\n-        data = {\'username\': \'joe\',\n-                \'fullname\': \'Joe User\',\n-                \'email\': \'joe@example.org\'}\n-        self.assertEqual(form.generate_user_id(data), \'joe\')\n-        self.assertEqual(data.get(\'user_id\'), \'joe\')\n+        data = {"username": "joe", "fullname": "Joe User", "email": "joe@example.org"}\n+        self.assertEqual(form.generate_user_id(data), "joe")\n+        self.assertEqual(data.get("user_id"), "joe")\n \n         # When no username is there, we try a normalized fullname.\n-        data = {\'fullname\': \'Joe User\',\n-                \'email\': \'joe@example.org\'}\n-        self.assertEqual(form.generate_user_id(data), \'joe-user\')\n-        self.assertEqual(data.get(\'user_id\'), \'joe-user\')\n+        data = {"fullname": "Joe User", "email": "joe@example.org"}\n+        self.assertEqual(form.generate_user_id(data), "joe-user")\n+        self.assertEqual(data.get("user_id"), "joe-user")\n \n         # With no fullname, we take the email.\n-        data = {\'email\': \'Joe@example.org\'}\n-        self.assertEqual(form.generate_user_id(data), \'Joe@example.org\')\n-        self.assertEqual(data.get(\'user_id\'), \'Joe@example.org\')\n+        data = {"email": "Joe@example.org"}\n+        self.assertEqual(form.generate_user_id(data), "Joe@example.org")\n+        self.assertEqual(data.get("user_id"), "Joe@example.org")\n \n     def test_use_email_as_login_has_fullname(self):\n-        """"Test generating a user id if the use_email_as_login setting is\n+        """ "Test generating a user id if the use_email_as_login setting is\n         enabled and full name is provided.\n         """\n         self.security_settings.use_email_as_login = True\n         form = BaseRegistrationForm(self.portal, {})\n \n         data = {}\n-        self.assertEqual(form.generate_user_id(data), \'\')\n-        self.assertEqual(data.get(\'user_id\'), \'\')\n+        self.assertEqual(form.generate_user_id(data), "")\n+        self.assertEqual(data.get("user_id"), "")\n \n-        data = {\'fullname\': \'Joe User\',\n-                \'email\': \'joe@example.org\'}\n-        self.assertEqual(form.generate_user_id(data), \'joe-user\')\n-        self.assertEqual(data.get(\'user_id\'), \'joe-user\')\n+        data = {"fullname": "Joe User", "email": "joe@example.org"}\n+        self.assertEqual(form.generate_user_id(data), "joe-user")\n+        self.assertEqual(data.get("user_id"), "joe-user")\n \n     def test_use_email_as_login_no_fullname(self):\n-        """"Test generating a user id if the use_email_as_login setting is\n+        """ "Test generating a user id if the use_email_as_login setting is\n         enabled and full name is not provided.\n         """\n         self.security_settings.use_email_as_login = True\n         form = BaseRegistrationForm(self.portal, {})\n \n         data = {}\n-        self.assertEqual(form.generate_user_id(data), \'\')\n-        self.assertEqual(data.get(\'user_id\'), \'\')\n+        self.assertEqual(form.generate_user_id(data), "")\n+        self.assertEqual(data.get("user_id"), "")\n \n-        data = {\'email\': \'joe@example.org\'}\n-        self.assertEqual(form.generate_user_id(data), \'joe@example.org\')\n-        self.assertEqual(data.get(\'user_id\'), \'joe@example.org\')\n+        data = {"email": "joe@example.org"}\n+        self.assertEqual(form.generate_user_id(data), "joe@example.org")\n+        self.assertEqual(data.get("user_id"), "joe@example.org")\n \n     def test_use_email_as_login_no_fullname_uppercase_email(self):\n-        """"Test generating a user id if the use_email_as_login setting is\n+        """ "Test generating a user id if the use_email_as_login setting is\n         enabled and full name is not provided, with an uppercase e-mail.\n         """\n         self.security_settings.use_email_as_login = True\n         form = BaseRegistrationForm(self.portal, {})\n \n         data = {}\n-        self.assertEqual(form.generate_user_id(data), \'\')\n-        self.assertEqual(data.get(\'user_id\'), \'\')\n+        self.assertEqual(form.generate_user_id(data), "")\n+        self.assertEqual(data.get("user_id"), "")\n \n-        data = {\'email\': \'Joe@Example.org\'}\n-        self.assertEqual(form.generate_user_id(data), \'joe@example.org\')\n-        self.assertEqual(data.get(\'user_id\'), \'joe@example.org\')\n+        data = {"email": "Joe@Example.org"}\n+        self.assertEqual(form.generate_user_id(data), "joe@example.org")\n+        self.assertEqual(data.get("user_id"), "joe@example.org")\n \n     def test_use_uuid_as_userid_enabled(self):\n         """Test generating a user id if the use_uuid_as_userid setting is\n@@ -112,19 +105,15 @@ def test_use_uuid_as_userid_enabled(self):\n \n         data = {}\n         user_id = form.generate_user_id(data)\n-        self.assertEqual(data.get(\'user_id\'), user_id)\n-        self.assertEqual(len(data.get(\'user_id\')),\n-                         len(uuid_userid_generator()))\n+        self.assertEqual(data.get("user_id"), user_id)\n+        self.assertEqual(len(data.get("user_id")), len(uuid_userid_generator()))\n \n-        data = {\'username\': \'joe\',\n-                \'fullname\': \'Joe User\',\n-                \'email\': \'joe@example.org\'}\n+        data = {"username": "joe", "fullname": "Joe User", "email": "joe@example.org"}\n         user_id = form.generate_user_id(data)\n-        self.assertNotEqual(user_id, \'joe\')\n-        self.assertEqual(data.get(\'user_id\'), user_id)\n+        self.assertNotEqual(user_id, "joe")\n+        self.assertEqual(data.get("user_id"), user_id)\n         self.assertEqual(len(user_id), len(uuid_userid_generator()))\n \n         # Calling it twice should give a different result, as every\n         # call to the uuid generator should be unique.\n-        self.assertNotEqual(form.generate_user_id(data),\n-                            form.generate_user_id(data))\n+        self.assertNotEqual(form.generate_user_id(data), form.generate_user_id(data))\ndiff --git a/plone/app/users/upgrades.py b/plone/app/users/upgrades.py\nindex d6b4feb..92a0a4c 100644\n--- a/plone/app/users/upgrades.py\n+++ b/plone/app/users/upgrades.py\n@@ -20,7 +20,7 @@ def copySchemaAttrs(sch):\n     fields = {}\n     for id in sch:\n         field = copy.deepcopy(sch[id])\n-        field.forms_selection = [\'In User Profile\']\n+        field.forms_selection = ["In User Profile"]\n         fields[id] = field\n     return fields\n \n@@ -30,63 +30,68 @@ class IEmpty(Schema):\n \n \n class IHomePageSchema(Interface):\n-    """\n-    """\n+    """ """\n \n     home_page = schema.TextLine(\n-        title=_(\'label_homepage\', default=\'Home page\'),\n-        description=_(\'help_homepage\',\n-                      default="The URL for your external home page, "\n-                      "if you have one."),\n-        required=False)\n+        title=_("label_homepage", default="Home page"),\n+        description=_(\n+            "help_homepage",\n+            default="The URL for your external home page, " "if you have one.",\n+        ),\n+        required=False,\n+    )\n \n \n class IDescriptionSchema(Interface):\n-    """\n-    """\n+    """ """\n \n     description = schema.Text(\n-        title=_(\'label_biography\', default=\'Biography\'),\n-        description=_(\'help_biography\',\n-                      default="A short overview of who you are and what you "\n-                      "do. Will be displayed on your author page, linked "\n-                      "from the items you create."),\n-        required=False)\n+        title=_("label_biography", default="Biography"),\n+        description=_(\n+            "help_biography",\n+            default="A short overview of who you are and what you "\n+            "do. Will be displayed on your author page, linked "\n+            "from the items you create.",\n+        ),\n+        required=False,\n+    )\n \n \n class ILocationSchema(Interface):\n-    """\n-    """\n+    """ """\n \n     location = schema.TextLine(\n-        title=_(\'label_location\', default=\'Location\'),\n-        description=_(\'help_location\',\n-                      default="Your location - either city and "\n-                      "country - or in a company setting, where "\n-                      "your office is located."),\n-        required=False)\n+        title=_("label_location", default="Location"),\n+        description=_(\n+            "help_location",\n+            default="Your location - either city and "\n+            "country - or in a company setting, where "\n+            "your office is located.",\n+        ),\n+        required=False,\n+    )\n \n \n class IPortraitSchema(Interface):\n-    """\n-    """\n+    """ """\n \n     portrait = NamedBlobImage(\n-        title=_(\'label_portrait\', default=\'Portrait\'),\n+        title=_("label_portrait", default="Portrait"),\n         description=_(\n-            \'help_portrait\',\n+            "help_portrait",\n             default=\'To add or change the portrait: click the "Browse" \'\n-                    \'button; select a picture of yourself. Recommended \'\n-                    \'image size is 75 pixels wide by 100 pixels tall.\'\n+            "button; select a picture of yourself. Recommended "\n+            "image size is 75 pixels wide by 100 pixels tall.",\n         ),\n-        required=False)\n+        required=False,\n+    )\n \n \n def upgrade_to_ttw(context):\n     # the new default schema only contains fullname and email fields\n     # so we put the missing ones (home_page, description, location, portrait)\n     # into the ttw schema\n-    if schemaeditor.get_schema() == \'\':\n+    if schemaeditor.get_schema() == "":\n         finalizeSchemas(IEmpty)\n         current_ttw = IEditableSchema(IEmpty)\n     else:\n@@ -97,24 +102,23 @@ def upgrade_to_ttw(context):\n     pm = getToolByName(context, "portal_memberdata")\n     existing = pm.propertyIds()\n \n-    if \'home_page\' in existing and \'home_page\' not in current_fields:\n+    if "home_page" in existing and "home_page" not in current_fields:\n         attrs.update(copySchemaAttrs(IHomePageSchema))\n \n-    if \'description\' in existing and \'description\' not in current_fields:\n+    if "description" in existing and "description" not in current_fields:\n         attrs.update(copySchemaAttrs(IDescriptionSchema))\n \n-    if \'location\' in existing and \'location\' not in current_fields:\n+    if "location" in existing and "location" not in current_fields:\n         attrs.update(copySchemaAttrs(ILocationSchema))\n \n-    if \'portrait\' in existing and \'portrait\' not in current_fields:\n+    if "portrait" in existing and "portrait" not in current_fields:\n         attrs.update(copySchemaAttrs(IPortraitSchema))\n \n-    sch = SchemaClass(schemaeditor.SCHEMATA_KEY,\n-        bases=(current_ttw.schema,),\n-        attrs=attrs\n+    sch = SchemaClass(\n+        schemaeditor.SCHEMATA_KEY, bases=(current_ttw.schema,), attrs=attrs\n     )\n     finalizeSchemas(sch)\n \n     xml_model = schemaeditor.serialize_ttw_schema(sch)\n     schemaeditor.set_schema(xml_model)\n-    log.info(\'Old member fields migrated into TTW schema\')\n+    log.info("Old member fields migrated into TTW schema")\ndiff --git a/plone/app/users/utils.py b/plone/app/users/utils.py\nindex 363ac9e..9a6c0b4 100644\n--- a/plone/app/users/utils.py\n+++ b/plone/app/users/utils.py\n@@ -17,7 +17,6 @@ def uuid_userid_generator(data=None):\n def notifyWidgetActionExecutionError(action, widget, err_str):\n     zope.event.notify(\n         ActionErrorOccurred(\n-            action,\n-            WidgetActionExecutionError(widget, Invalid(err_str))\n+            action, WidgetActionExecutionError(widget, Invalid(err_str))\n         )\n     )\ndiff --git a/plone/app/users/vocabularies.py b/plone/app/users/vocabularies.py\nindex 863b289..fb82312 100644\n--- a/plone/app/users/vocabularies.py\n+++ b/plone/app/users/vocabularies.py\n@@ -15,7 +15,7 @@\n \n # Define constants from the Join schema that should be added to the\n # vocab of the join fields setting in usergroupssettings controlpanel.\n-JOIN_CONST = [\'username\', \'password\', \'email\', \'mail_me\']\n+JOIN_CONST = ["username", "password", "email", "mail_me"]\n \n \n @implementer(IVocabularyFactory)\n@@ -97,23 +97,22 @@ class GroupIdVocabulary:\n \n     def __call__(self, context):\n         site = get_portal()\n-        groups_tool = getToolByName(site, \'portal_groups\')\n-        is_zope_manager = getSecurityManager().checkPermission(\n-            ManagePortal, context)\n+        groups_tool = getToolByName(site, "portal_groups")\n+        is_zope_manager = getSecurityManager().checkPermission(ManagePortal, context)\n         groups = groups_tool.listGroups()\n \n         # Get group id, title tuples for each, omitting virtual group\n         # \'AuthenticatedUsers\'\n         terms = []\n         for g in groups:\n-            if g.id == \'AuthenticatedUsers\':\n+            if g.id == "AuthenticatedUsers":\n                 continue\n-            if \'Manager\' in g.getRoles() and not is_zope_manager:\n+            if "Manager" in g.getRoles() and not is_zope_manager:\n                 continue\n \n             group_title = safe_unicode(g.getGroupTitleOrName())\n             if group_title != g.id:\n-                title = f\'{group_title} ({g.id})\'\n+                title = f"{group_title} ({g.id})"\n             else:\n                 title = group_title\n             terms.append(SimpleTerm(g.id, g.id, title))\ndiff --git a/setup.py b/setup.py\nindex 1b718c0..a66d4cd 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,26 +2,25 @@\n from setuptools import setup\n \n \n-version = \'3.0.2.dev0\'\n+version = "3.0.2.dev0"\n \n-long_description = \'{}\\n\\n{}\'.format(\n-    open(\'README.rst\').read(),\n-    open(\'CHANGES.rst\').read()\n+long_description = "{}\\n\\n{}".format(\n+    open("README.rst").read(), open("CHANGES.rst").read()\n )\n \n extras_require = {\n-    \'test\': [\n-        \'Products.MailHost\',\n-        \'plone.app.testing\',\n-        \'plone.keyring\',\n+    "test": [\n+        "Products.MailHost",\n+        "plone.app.testing",\n+        "plone.keyring",\n     ]\n }\n \n setup(\n-    name=\'plone.app.users\',\n+    name="plone.app.users",\n     version=version,\n-    description=\'A package for all things users and groups related (specific \'\n-                \'to plone)\',\n+    description="A package for all things users and groups related (specific "\n+    "to plone)",\n     long_description=long_description,\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n@@ -38,38 +37,38 @@\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'Zope CMF Plone Users Groups\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.users\',\n-    license=\'GPL version 2\',\n+    keywords="Zope CMF Plone Users Groups",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.users",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     python_requires=">=3.8",\n     extras_require=extras_require,\n     install_requires=[\n-        \'AccessControl\',\n-        \'Acquisition\',\n-        \'Products.CMFCore\',\n-        \'Products.PlonePAS >= 5.0.1\',\n-        \'Products.statusmessages\',\n-        \'Zope2 >= 2.12.3\',\n-        \'plone.app.layout\',\n-        \'plone.autoform >= 1.2\',\n-        \'plone.formwidget.namedfile >= 1.0.3\',\n-        \'plone.namedfile\',\n-        \'plone.protect\',\n-        \'plone.schema\',\n-        \'plone.uuid\',\n-        \'setuptools\',\n-        \'six\',\n-        \'z3c.form\',\n-        \'zope.component\',\n-        \'zope.event\',\n-        \'zope.interface\',\n-        \'zope.schema\',\n+        "AccessControl",\n+        "Acquisition",\n+        "Products.CMFCore",\n+        "Products.PlonePAS >= 5.0.1",\n+        "Products.statusmessages",\n+        "Zope2 >= 2.12.3",\n+        "plone.app.layout",\n+        "plone.autoform >= 1.2",\n+        "plone.formwidget.namedfile >= 1.0.3",\n+        "plone.namedfile",\n+        "plone.protect",\n+        "plone.schema",\n+        "plone.uuid",\n+        "setuptools",\n+        "six",\n+        "z3c.form",\n+        "zope.component",\n+        "zope.event",\n+        "zope.interface",\n+        "zope.schema",\n     ],\n     entry_points="""\n     [z3c.autoinclude.plugin]\n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2023-04-07T20:09:04+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/5492ab54c7fc316b5720876d51d9d23f0a1afd69

chore: zpretty ZCML/XML

Files changed:
M plone/app/users/browser/configure.zcml
M plone/app/users/configure.zcml
M plone/app/users/profiles/default/metadata.xml
M plone/app/users/profiles/default/userschema.xml

b'diff --git a/plone/app/users/browser/configure.zcml b/plone/app/users/browser/configure.zcml\nindex 024f795f..b3534129 100644\n--- a/plone/app/users/browser/configure.zcml\n+++ b/plone/app/users/browser/configure.zcml\n@@ -2,10 +2,14 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n     xmlns:five="http://namespaces.zope.org/five"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n   <include package="plone.autoform" />\n-  <include package="Products.CMFPlone.controlpanel" file="permissions.zcml" />\n+  <include\n+      package="Products.CMFPlone.controlpanel"\n+      file="permissions.zcml"\n+      />\n \n   <browser:page\n       name="member-registration"\n@@ -75,14 +79,16 @@\n       name="member-fields"\n       for="*"\n       class=".schemaeditor.MemberSchemaContext"\n+      allowed_interface="OFS.interfaces.IItem"\n       permission="plone.app.controlpanel.UsersAndGroups"\n-      allowed_interface="OFS.interfaces.IItem" />\n+      />\n \n   <browser:page\n       name="edit"\n       for=".schemaeditor.IMemberSchemaContext"\n       class=".schemaeditor.SchemaListingPage"\n-      permission="zope2.View" />\n+      permission="zope2.View"\n+      />\n \n   <browser:page\n       name="member-search"\n@@ -92,15 +98,15 @@\n       />\n \n   <adapter\n+      factory=".personalpreferences.PersonalPreferencesPanelAdapter"\n       provides=".personalpreferences.IPersonalPreferences"\n       for="plone.app.layout.navigation.interfaces.INavigationRoot"\n-      factory=".personalpreferences.PersonalPreferencesPanelAdapter"\n       />\n \n   <adapter\n+      factory=".passwordpanel.PasswordPanelAdapter"\n       provides=".passwordpanel.IPasswordSchema"\n       for="plone.app.layout.navigation.interfaces.INavigationRoot"\n-      factory=".passwordpanel.PasswordPanelAdapter"\n       />\n \n   <subscriber\ndiff --git a/plone/app/users/configure.zcml b/plone/app/users/configure.zcml\nindex 8846fce8..720ad296 100644\n--- a/plone/app/users/configure.zcml\n+++ b/plone/app/users/configure.zcml\n@@ -1,21 +1,25 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone.app.users">\n+    i18n_domain="plone.app.users"\n+    >\n \n   <include package="plone.supermodel" />\n   <include package="plone.autoform" />\n   <include package="plone.namedfile" />\n   <include package="plone.schema" />\n   <include package="plone.formwidget.namedfile" />\n-  <include package="Products.CMFCore" file="permissions.zcml" />\n+  <include\n+      package="Products.CMFCore"\n+      file="permissions.zcml"\n+      />\n   <include package=".browser" />\n \n \n   <!-- utilities -->\n   <utility\n-      name=\'plone.app.users.forms\'\n       factory=".field_extender.UserFormSelectionMetadata"\n+      name="plone.app.users.forms"\n       />\n \n   <utility\n@@ -24,77 +28,79 @@\n       />\n \n   <utility\n-      name="plone.app.users.group_ids"\n       provides="zope.schema.interfaces.IVocabularyFactory"\n+      name="plone.app.users.group_ids"\n       component=".vocabularies.GroupIdVocabularyFactory"\n       />\n \n   <utility\n-      name="plone.app.users.schema.ProtectedTextLine"\n       provides="plone.schemaeditor.interfaces.IFieldFactory"\n+      name="plone.app.users.schema.ProtectedTextLine"\n       component=".schema.FullnameFieldFactory"\n       />\n \n   <utility\n-      name="plone.app.users.schema.ProtectedEmail"\n       provides="plone.schemaeditor.interfaces.IFieldFactory"\n+      name="plone.app.users.schema.ProtectedEmail"\n       component=".schema.EmailFieldFactory"\n       />\n \n \n   <!-- adapters -->\n   <adapter\n-      for="zope.schema.interfaces.IField"\n-      provides=".field_extender.IUserFormSelection"\n       factory=".field_extender.UserFormSelectionAdapter"\n+      provides=".field_extender.IUserFormSelection"\n+      for="zope.schema.interfaces.IField"\n       />\n \n   <adapter\n-      name=\'plone.app.users.userformselection\'\n+      factory=".field_extender.get_user_form_selection"\n+      provides="plone.schemaeditor.interfaces.IFieldEditorExtender"\n       for=".browser.schemaeditor.IMemberSchemaContext\n            zope.schema.interfaces.IField"\n-      provides="plone.schemaeditor.interfaces.IFieldEditorExtender"\n-      factory=".field_extender.get_user_form_selection"\n+      name="plone.app.users.userformselection"\n       />\n \n   <adapter\n-      name=\'plone.app.users.useraddformselection\'\n-      for=".browser.schemaeditor.IMemberSchemaContext"\n-      provides="plone.schemaeditor.interfaces.IFieldEditorExtender"\n       factory=".field_extender.get_user_addform_selection"\n+      provides="plone.schemaeditor.interfaces.IFieldEditorExtender"\n+      for=".browser.schemaeditor.IMemberSchemaContext"\n+      name="plone.app.users.useraddformselection"\n       />\n \n \n   <!-- generic setup -->\n   <genericsetup:registerProfile\n-      name=\'default\'\n-      title=\'Import User Data\'\n-      directory=\'profiles/default\'\n-      description=\'Import default schema\'\n-      provides=\'Products.GenericSetup.interfaces.EXTENSION\'\n+      name="default"\n+      title="Import User Data"\n+      description="Import default schema"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/default"\n       />\n \n   <genericsetup:exportStep\n       name="usersschema"\n       title="Export member custom TTW schema"\n       description="Export member custom TTW schema"\n-      handler="plone.app.users.setuphandlers.export_schema">\n-  </genericsetup:exportStep>\n+      handler="plone.app.users.setuphandlers.export_schema"\n+      >\n+</genericsetup:exportStep>\n \n   <genericsetup:importStep\n       name="usersschema"\n       title="Import member custom TTW schema"\n       description="Import member custom TTW schema"\n-      handler="plone.app.users.setuphandlers.import_schema">\n-  </genericsetup:importStep>\n+      handler="plone.app.users.setuphandlers.import_schema"\n+      >\n+</genericsetup:importStep>\n \n   <genericsetup:upgradeStep\n       title="Upgrade to TTW Schema editing for user information form"\n       description=""\n+      profile="plone.app.users:default"\n       source="*"\n       destination="1"\n       handler=".upgrades.upgrade_to_ttw"\n-      profile="plone.app.users:default"\n       />\n \n </configure>\ndiff --git a/plone/app/users/profiles/default/metadata.xml b/plone/app/users/profiles/default/metadata.xml\nindex 7f28c91b..08b37b63 100644\n--- a/plone/app/users/profiles/default/metadata.xml\n+++ b/plone/app/users/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n-    <version>1</version>\n+  <version>1</version>\n </metadata>\ndiff --git a/plone/app/users/profiles/default/userschema.xml b/plone/app/users/profiles/default/userschema.xml\nindex 4e3db91d..7a877624 100644\n--- a/plone/app/users/profiles/default/userschema.xml\n+++ b/plone/app/users/profiles/default/userschema.xml\n@@ -1,37 +1,46 @@\n+<?xml version="1.0" encoding="utf-8"?>\n <model xmlns="http://namespaces.plone.org/supermodel/schema"\n        xmlns:form="http://namespaces.plone.org/supermodel/form"\n-       xmlns:users="http://namespaces.plone.org/supermodel/users"\n        xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-       i18n:domain="plone">\n+       xmlns:users="http://namespaces.plone.org/supermodel/users"\n+       i18n:domain="plone"\n+>\n   <schema name="member-fields">\n-    <field name="home_page" type="zope.schema.URI"\n-      users:forms="In User Profile">\n+    <field name="home_page"\n+           type="zope.schema.URI"\n+           users:forms="In User Profile"\n+    >\n       <description i18n:translate="help_homepage">\n           The URL for your external home page, if you have one.\n       </description>\n       <required>False</required>\n       <title i18n:translate="label_homepage">Home page</title>\n     </field>\n-    <field name="description" type="zope.schema.Text"\n-      users:forms="In User Profile">\n+    <field name="description"\n+           type="zope.schema.Text"\n+           users:forms="In User Profile"\n+    >\n       <description i18n:translate="help_biography">\n           A short overview of who you are and what you do. Will be displayed on your author page, linked from the items you create.\n       </description>\n       <required>False</required>\n       <title i18n:translate="label_biography">Biography</title>\n     </field>\n-    <field name="location" type="zope.schema.TextLine"\n-      users:forms="In User Profile">\n+    <field name="location"\n+           type="zope.schema.TextLine"\n+           users:forms="In User Profile"\n+    >\n       <description i18n:translate="help_location">\n           Your location - either city and country - or in a company setting, where your office is located.\n       </description>\n       <required>False</required>\n       <title i18n:translate="label_location">Location</title>\n     </field>\n-    <field name="portrait"\n+    <field form:widget="plone.app.users.schema.PortraitFieldWidget"\n+           name="portrait"\n            type="plone.namedfile.field.NamedBlobImage"\n-           form:widget="plone.app.users.schema.PortraitFieldWidget"\n-           users:forms="In User Profile">\n+           users:forms="In User Profile"\n+    >\n       <description i18n:translate="help_portrait">\n           To add or change the portrait: click the "Browse" button; select a picture of yourself. Recommended image size is 75 pixels wide by 100 pixels tall.\n       </description>\n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2023-04-07T20:09:22+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/f24d59b8b3cd0c9b86628bb72ef9eb5d1af43d82

chore: zpretty PT

Files changed:
M plone/app/users/browser/account-configlet.pt
M plone/app/users/browser/account-panel.pt
M plone/app/users/browser/memberregistration.pt
M plone/app/users/browser/membersearch_form.pt
M plone/app/users/browser/newuser_form.pt
M plone/app/users/browser/register_form.pt
M plone/app/users/browser/registered.pt
M plone/app/users/browser/schema_layout.pt

b'diff --git a/plone/app/users/browser/account-configlet.pt b/plone/app/users/browser/account-configlet.pt\nindex 1ca590d..3c3c2fb 100644\n--- a/plone/app/users/browser/account-configlet.pt\n+++ b/plone/app/users/browser/account-configlet.pt\n@@ -1,49 +1,61 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       lang="en"\n       metal:use-macro="here/prefs_main_template/macros/master"\n-      i18n:domain="plone">\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n \n-<div metal:fill-slot="prefs_configlet_main">\n-  <header>\n-    <h1 class="documentFirstHeading"\n-        i18n:translate="">User Details</h1>\n-    <div>\n-      <a href="${portal_url}/@@usergroup-userprefs" i18n:translate="label_go_to_users" class="mt-n2">Up to List of Users</a>\n-    </div>\n-    <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n+  <div metal:fill-slot="prefs_configlet_main">\n+    <header>\n+      <h1 class="documentFirstHeading"\n+          i18n:translate=""\n+      >User Details</h1>\n+      <div>\n+        <a class="mt-n2"\n+           href="${portal_url}/@@usergroup-userprefs"\n+           i18n:translate="label_go_to_users"\n+        >Up to List of Users</a>\n+      </div>\n+      <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n       Portal status message\n-    </div>\n-  </header>\n-  <article id="content">\n-    <div id="content-core">\n-      <p class="lead mt-4">${python:view.description}</p>\n-      <nav class="nav nav-tabs mb-2"\n-            tal:define="userquery python:view.makeQuery()">\n-        <li class="nav-item">\n-          <a href="${portal_url}/@@user-information${userquery}"\n-              class="nav-link ${python:\'active\' if getattr(view, \'tab\', None)==\'userdata\' else \'\'}"\n-              i18n:translate="title_personal_information_form">Personal Information</a>\n-        </li>\n-        <li class="nav-item">\n-          <a href="${portal_url}/@@user-preferences${userquery}"\n-              class="nav-link ${python:\'active\' if getattr(view, \'tab\', None)==\'userprefs\' else \'\'}"\n-              i18n:translate="">Personal Preferences</a>\n-        </li>\n-        <li class="nav-item">\n-          <a href="${portal_url}/@@usergroup-usermembership${userquery}"\n-              class="nav-link"\n-              i18n:translate="label_group_memberships">Group Memberships</a>\n-        </li>\n-      </nav>\n-      <metal:b use-macro="context/@@ploneform-macros/titlelessform" />\n+      </div>\n+    </header>\n+    <article id="content">\n+      <div id="content-core">\n+        <p class="lead mt-4">${python:view.description}</p>\n+        <nav class="nav nav-tabs mb-2"\n+             tal:define="\n+               userquery python:view.makeQuery();\n+             "\n+        >\n+          <li class="nav-item">\n+            <a class="nav-link ${python:\'active\' if getattr(view, \'tab\', None)==\'userdata\' else \'\'}"\n+               href="${portal_url}/@@user-information${userquery}"\n+               i18n:translate="title_personal_information_form"\n+            >Personal Information</a>\n+          </li>\n+          <li class="nav-item">\n+            <a class="nav-link ${python:\'active\' if getattr(view, \'tab\', None)==\'userprefs\' else \'\'}"\n+               href="${portal_url}/@@user-preferences${userquery}"\n+               i18n:translate=""\n+            >Personal Preferences</a>\n+          </li>\n+          <li class="nav-item">\n+            <a class="nav-link"\n+               href="${portal_url}/@@usergroup-usermembership${userquery}"\n+               i18n:translate="label_group_memberships"\n+            >Group Memberships</a>\n+          </li>\n+        </nav>\n+        <metal:b use-macro="context/@@ploneform-macros/titlelessform" />\n \n-    </div>\n+      </div>\n \n-  </article>\n+    </article>\n \n-</div>\n+  </div>\n \n </html>\ndiff --git a/plone/app/users/browser/account-panel.pt b/plone/app/users/browser/account-panel.pt\nindex 9833934..ab4de86 100644\n--- a/plone/app/users/browser/account-panel.pt\n+++ b/plone/app/users/browser/account-panel.pt\n@@ -1,10 +1,10 @@\n-<html\n-    xmlns="http://www.w3.org/1999/xhtml"\n-    xmlns:metal="http://xml.zope.org/namespaces/metal"\n-    xmlns:tal="http://xml.zope.org/namespaces/tal"\n-    xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-    i18n:domain="plone"\n-    metal:use-macro="context/main_template/macros/master">\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      metal:use-macro="context/main_template/macros/master"\n+      i18n:domain="plone"\n+>\n \n   <metal:b fill-slot="content-title">\n     <h1 class="documentFirstHeading">${view/label}</h1>\n@@ -16,19 +16,25 @@\n \n   <metal:b fill-slot="content-core">\n     <div class="autotabs">\n-      <nav\n-          class="autotoc-nav mb-3"\n-          tal:define="view_actions view/prepareObjectTabs;">\n+      <nav class="autotoc-nav mb-3"\n+           tal:define="\n+             view_actions view/prepareObjectTabs;\n+           "\n+      >\n         <ul class="nav nav-tabs">\n-          <li\n-              class="nav-item"\n-              tal:repeat="action view_actions">\n-            <a\n-                id="contentview-${action/id}"\n-                href="${action/url}"\n-                tal:define="selected action/selected|nothing;"\n-                tal:attributes="class python:\'autotoc-level-1\' + (\' nav-link active\' if selected else \' nav-link\')"\n-                i18n:translate="">${action/title}</a>\n+          <li class="nav-item"\n+              tal:repeat="action view_actions"\n+          >\n+            <a id="contentview-${action/id}"\n+               href="${action/url}"\n+               tal:define="\n+                 selected action/selected|nothing;\n+               "\n+               tal:attributes="\n+                 class python:\'autotoc-level-1\' + (\' nav-link active\' if selected else \' nav-link\');\n+               "\n+               i18n:translate=""\n+            >${action/title}</a>\n           </li>\n         </ul>\n       </nav>\ndiff --git a/plone/app/users/browser/memberregistration.pt b/plone/app/users/browser/memberregistration.pt\nindex aa868c2..a2d21de 100644\n--- a/plone/app/users/browser/memberregistration.pt\n+++ b/plone/app/users/browser/memberregistration.pt\n@@ -1,49 +1,57 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      xml:lang="en" lang="en"\n+      lang="en"\n       metal:use-macro="context/prefs_main_template/macros/master"\n-      i18n:domain="plone">\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n \n-<body>\n+  <body>\n \n-<metal:main fill-slot="prefs_configlet_main">\n+    <metal:main fill-slot="prefs_configlet_main">\n \n-  <header>\n-    <h1 class="documentFirstHeading"\n-        i18n:translate="">Users and Groups</h1>\n+      <header>\n+        <h1 class="documentFirstHeading"\n+            i18n:translate=""\n+        >Users and Groups</h1>\n \n-    <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n+        <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n       Portal status message\n-    </div>\n+        </div>\n \n-    <ul class="nav nav-pills">\n-      <li class="nav-item">\n-        <a href="${portal_url}/@@usergroup-userprefs"\n-            class="nav-link active"\n-            i18n:translate="label_users">Users</a>\n-      </li>\n-      <li class="nav-item">\n-        <a href="${portal_url}/@@usergroup-groupprefs"\n-            class="nav-link"\n-            i18n:translate="label_groups">Groups</a>\n-      </li>\n-      <li class="nav-item">\n-        <a class="nav-link active"\n-            href="${portal_url}/@@usergroup-controlpanel"\n-            i18n:translate="label_usergroup_settings">Settings</a>\n-      </li>\n-      <li class="nav-item">\n-        <a href="${portal_url}/@@member-fields" class="nav-link"\n-            i18n:translate="label_member_fields">Member fields</a>\n-      </li>\n-    </ul>\n-  </header>\n-  <article id="content">\n-    <metal:b use-macro="context/@@ploneform-macros/titlelessform" />\n-  </article>\n+        <ul class="nav nav-pills">\n+          <li class="nav-item">\n+            <a class="nav-link active"\n+               href="${portal_url}/@@usergroup-userprefs"\n+               i18n:translate="label_users"\n+            >Users</a>\n+          </li>\n+          <li class="nav-item">\n+            <a class="nav-link"\n+               href="${portal_url}/@@usergroup-groupprefs"\n+               i18n:translate="label_groups"\n+            >Groups</a>\n+          </li>\n+          <li class="nav-item">\n+            <a class="nav-link active"\n+               href="${portal_url}/@@usergroup-controlpanel"\n+               i18n:translate="label_usergroup_settings"\n+            >Settings</a>\n+          </li>\n+          <li class="nav-item">\n+            <a class="nav-link"\n+               href="${portal_url}/@@member-fields"\n+               i18n:translate="label_member_fields"\n+            >Member fields</a>\n+          </li>\n+        </ul>\n+      </header>\n+      <article id="content">\n+        <metal:b use-macro="context/@@ploneform-macros/titlelessform" />\n+      </article>\n \n-</metal:main>\n-</body>\n+    </metal:main>\n+  </body>\n </html>\ndiff --git a/plone/app/users/browser/membersearch_form.pt b/plone/app/users/browser/membersearch_form.pt\nindex 89acbbe..79ead56 100644\n--- a/plone/app/users/browser/membersearch_form.pt\n+++ b/plone/app/users/browser/membersearch_form.pt\n@@ -1,87 +1,120 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n+      i18n:domain="plone"\n+>\n \n-<body>\n+  <body>\n     <metal:body fill-slot="body">\n \n-        <article id="content" tal:condition="not: view/submitted">\n-            <h1 class="documentFirstHeading"\n-                tal:content="view/label | nothing" />\n-            <div id="content-core">\n-                <metal:block use-macro="context/@@ploneform-macros/titlelessform" />\n-            </div>\n-        </article>\n-\n-        <tal:block condition="view/submitted">\n-          <article id="content"\n-               tal:define="listing_allowed python: checkPermission(\'List portal members\', here);\n-                           results python:listing_allowed and view.results;\n-                           Batch python:modules[\'Products.CMFPlone\'].Batch;\n-                           DateTime python:modules[\'DateTime\'].DateTime;\n-                           b_size python:12;b_start python:0;b_start request/b_start | b_start;">\n-            <h1 class="documentFirstHeading"\n-                i18n:translate="heading_search_results">Search results</h1>\n-\n-            <div id="content-core">\n-                <p tal:condition="not: listing_allowed"\n-                    i18n:translate="member_listing_not_allowed">\n+      <article id="content"\n+               tal:condition="not: view/submitted"\n+      >\n+        <h1 class="documentFirstHeading"\n+            tal:content="view/label | nothing"\n+        ></h1>\n+        <div id="content-core">\n+          <metal:block use-macro="context/@@ploneform-macros/titlelessform" />\n+        </div>\n+      </article>\n+\n+      <tal:block condition="view/submitted">\n+        <article id="content"\n+                 tal:define="\n+                   listing_allowed python: checkPermission(\'List portal members\', here);\n+                   results python:listing_allowed and view.results;\n+                   Batch python:modules[\'Products.CMFPlone\'].Batch;\n+                   DateTime python:modules[\'DateTime\'].DateTime;\n+                   b_size python:12;\n+                   b_start python:0;\n+                   b_start request/b_start | b_start;\n+                 "\n+        >\n+          <h1 class="documentFirstHeading"\n+              i18n:translate="heading_search_results"\n+          >Search results</h1>\n+\n+          <div id="content-core">\n+            <p tal:condition="not: listing_allowed"\n+               i18n:translate="member_listing_not_allowed"\n+            >\n                     You are not allowed to list portal members.\n-                </p>\n-\n-                <tal:block condition="python: results and listing_allowed">\n-                  <div tal:define="batch python:Batch(results, b_size, int(b_start), orphan=1)">\n-\n-                    <strong i18n:translate="batch_x_items_matching_your_criteria">\n-                        <span i18n:name="number" tal:omit-tag="" tal:content="python:len(results)">234</span> items matching your search terms.\n-                    </strong>\n-\n-                    <div metal:use-macro="here/batch_macros/macros/navigation"/>\n-\n-                    <div tal:define="pm context/@@plone_tools/membership;\n-                                     portal_url context/@@plone_portal_state/portal_url">\n-                     <metal:block tal:repeat="result batch">\n-                        <div class="card" tal:define="userid result/userid | nothing;\n-                                                      personal_info python:pm.getMemberInfo(userid) or {};\n-                                                      home python:pm.getHomeUrl(userid, verifyPermission=1);\n-                                                      portrait python:pm.getPersonalPortrait(userid);">\n-\n-                                <a href="#"\n-                                   tal:attributes="href python:home or \'%s/author/%s\' % (portal_url, userid)">\n-                                    <img src="defaultUser.png"\n-                                         alt=""\n-                                         border="0"\n-                                         width="75"\n-                                         height="100"\n-                                         tal:attributes="src portrait/absolute_url" />\n-                                    <br />\n-                                    <span tal:content="python:personal_info.get(\'fullname\', userid)">user id</span>\n-                                </a>\n-\n-                        </div>\n-                     </metal:block>\n+            </p>\n+\n+            <tal:block condition="python: results and listing_allowed">\n+              <div tal:define="\n+                     batch python:Batch(results, b_size, int(b_start), orphan=1);\n+                   ">\n+\n+                <strong i18n:translate="batch_x_items_matching_your_criteria">\n+                  <span tal:content="python:len(results)"\n+                        tal:omit-tag=""\n+                        i18n:name="number"\n+                  >234</span>\n+                   items matching your search terms.\n+                </strong>\n+\n+                <div metal:use-macro="here/batch_macros/macros/navigation"></div>\n+\n+                <div tal:define="\n+                       pm context/@@plone_tools/membership;\n+                       portal_url context/@@plone_portal_state/portal_url;\n+                     ">\n+                  <metal:block tal:repeat="result batch">\n+                    <div class="card"\n+                         tal:define="\n+                           userid result/userid | nothing;\n+                           personal_info python:pm.getMemberInfo(userid) or {};\n+                           home python:pm.getHomeUrl(userid, verifyPermission=1);\n+                           portrait python:pm.getPersonalPortrait(userid);\n+                         "\n+                    >\n+\n+                      <a href="#"\n+                         tal:attributes="\n+                           href python:home or \'%s/author/%s\' % (portal_url, userid);\n+                         "\n+                      >\n+                        <img alt=""\n+                             border="0"\n+                             height="100"\n+                             src="defaultUser.png"\n+                             width="75"\n+                             tal:attributes="\n+                               src portrait/absolute_url;\n+                             "\n+                        />\n+                        <br />\n+                        <span tal:content="python:personal_info.get(\'fullname\', userid)">user id</span>\n+                      </a>\n+\n                     </div>\n+                  </metal:block>\n+                </div>\n \n-                    <div class="visualClear" id="clear-space-before-navigation"><!-- --></div>\n+                <div class="visualClear"\n+                     id="clear-space-before-navigation"\n+                ><!-- --></div>\n \n-                    <div metal:use-macro="here/batch_macros/macros/navigation" />\n+                <div metal:use-macro="here/batch_macros/macros/navigation"></div>\n \n-                    <div class="visualClear" id="clear-space-after-navigation"><!-- --></div>\n+                <div class="visualClear"\n+                     id="clear-space-after-navigation"\n+                ><!-- --></div>\n \n-                  </div>\n-                </tal:block>\n+              </div>\n+            </tal:block>\n \n-                <div tal:condition="python: not results and listing_allowed">\n-                    <p><strong i18n:translate="description_no_results_found">No results were found.</strong></p>\n-                </div>\n+            <div tal:condition="python: not results and listing_allowed">\n+              <p><strong i18n:translate="description_no_results_found">No results were found.</strong></p>\n             </div>\n-          </article>\n-        </tal:block>\n+          </div>\n+        </article>\n+      </tal:block>\n \n \n     </metal:body>\n-</body>\n+  </body>\n </html>\ndiff --git a/plone/app/users/browser/newuser_form.pt b/plone/app/users/browser/newuser_form.pt\nindex 66ce0dd..41dd42b 100644\n--- a/plone/app/users/browser/newuser_form.pt\n+++ b/plone/app/users/browser/newuser_form.pt\n@@ -1,28 +1,33 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-<head>\n+      i18n:domain="plone"\n+>\n+  <head>\n     <metal:block fill-slot="top_slot"\n-                 tal:define="dummy python:request.set(\'disable_border\',1);\n-                             disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n-                             disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);" />\n-</head>\n+                 tal:define="\n+                   dummy python:request.set(\'disable_border\',1);\n+                   disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n+                   disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);\n+                 "\n+    />\n+  </head>\n \n-<body>\n+  <body>\n     <metal:body fill-slot="body">\n \n-        <article id="content">\n-            <h1 class="documentFirstHeading"\n-                tal:content="view/label | nothing" />\n-            <div id="content-core">\n-                <metal:block use-macro="context/@@ploneform-macros/titlelessform">\n-                </metal:block>\n-            </div>\n-        </article>\n+      <article id="content">\n+        <h1 class="documentFirstHeading"\n+            tal:content="view/label | nothing"\n+        ></h1>\n+        <div id="content-core">\n+          <metal:block use-macro="context/@@ploneform-macros/titlelessform">\n+          </metal:block>\n+        </div>\n+      </article>\n \n     </metal:body>\n-</body>\n+  </body>\n </html>\ndiff --git a/plone/app/users/browser/register_form.pt b/plone/app/users/browser/register_form.pt\nindex fd33f5d..384761c 100644\n--- a/plone/app/users/browser/register_form.pt\n+++ b/plone/app/users/browser/register_form.pt\n@@ -1,49 +1,61 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-\n-<body>\n-  <metal:main fill-slot="main">\n-  <metal:main-macro define-macro="main">\n-\n-    <article id="content" class="login-wrapper">\n-\n-    <div class="card">\n-        <div class="card-body">\n-\n-          <tal:mailhost tal:condition="view/showForm">\n-            <h1 class="card-title h5"\n-                tal:content="view/label | nothing" />\n-            <metal:block use-macro="context/@@ploneform-macros/titlelessform">\n-              <metal:bottom fill-slot="formbottom">\n-              <input tal:define="came_from request/form/came_from|nothing"\n-                  tal:condition="came_from"\n-                  type="hidden"\n-                  name="came_from"\n-                  tal:attributes="value came_from" />\n-              </metal:bottom>\n-            </metal:block>\n-          </tal:mailhost>\n-\n-          <tal:nomailhost tal:condition="not:view/showForm">\n-            <h1 class="card-title h5"\n-                i18n:translate=""\n-                tal:content="view/label" />\n-            <div class="documentDescription" i18n:translate="">\n+      i18n:domain="plone"\n+>\n+\n+  <body>\n+    <metal:main fill-slot="main">\n+      <metal:main-macro define-macro="main">\n+\n+        <article class="login-wrapper"\n+                 id="content"\n+        >\n+\n+          <div class="card">\n+            <div class="card-body">\n+\n+              <tal:mailhost tal:condition="view/showForm">\n+                <h1 class="card-title h5"\n+                    tal:content="view/label | nothing"\n+                ></h1>\n+                <metal:block use-macro="context/@@ploneform-macros/titlelessform">\n+                  <metal:bottom fill-slot="formbottom">\n+                    <input name="came_from"\n+                           type="hidden"\n+                           tal:define="\n+                             came_from request/form/came_from|nothing;\n+                           "\n+                           tal:condition="came_from"\n+                           tal:attributes="\n+                             value came_from;\n+                           "\n+                    />\n+                  </metal:bottom>\n+                </metal:block>\n+              </tal:mailhost>\n+\n+              <tal:nomailhost tal:condition="not:view/showForm">\n+                <h1 class="card-title h5"\n+                    tal:content="view/label"\n+                    i18n:translate=""\n+                ></h1>\n+                <div class="documentDescription"\n+                     i18n:translate=""\n+                >\n                 This site doesn\'t have a valid email setup, so you\n                 cannot register at this time.\n-            </div>\n-          </tal:nomailhost>\n+                </div>\n+              </tal:nomailhost>\n \n-        </div>\n-      </div>\n+            </div>\n+          </div>\n \n-    </article>\n+        </article>\n \n-  </metal:main-macro>\n-  </metal:main>\n-</body>\n+      </metal:main-macro>\n+    </metal:main>\n+  </body>\n </html>\ndiff --git a/plone/app/users/browser/registered.pt b/plone/app/users/browser/registered.pt\nindex 5402784..f2b63f7 100644\n--- a/plone/app/users/browser/registered.pt\n+++ b/plone/app/users/browser/registered.pt\n@@ -1,103 +1,157 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-<body>\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n+  <body>\n \n \n-<metal:main fill-slot="main"\n-     tal:define="auth nocall:context/acl_users/credentials_cookie_auth|nothing">\n+    <metal:main fill-slot="main"\n+                tal:define="\n+                  auth nocall:context/acl_users/credentials_cookie_auth|nothing;\n+                "\n+    >\n \n-    <div id="content-core" tal:condition="python: not auth" i18n:translate="registered_disabled">\n+      <div id="content-core"\n+           tal:condition="python: not auth"\n+           i18n:translate="registered_disabled"\n+      >\n            Cookie authentication has been disabled.\n-    </div>\n+      </div>\n \n-    <div tal:define="enable_user_pwd_choice python:context.portal_registry[\'plone.enable_user_pwd_choice\']"\n-         tal:omit-tag=""\n-         tal:condition="python: auth">\n+      <div tal:define="\n+             enable_user_pwd_choice python:context.portal_registry[\'plone.enable_user_pwd_choice\'];\n+           "\n+           tal:condition="python: auth"\n+           tal:omit-tag=""\n+      >\n \n         <h1 class="documentFirstHeading"\n-            i18n:translate="heading_welcome">\n+            i18n:translate="heading_welcome"\n+        >\n             Welcome!\n         </h1>\n \n-        <div class="documentDescription" i18n:translate="description_you_are_registered">\n+        <div class="documentDescription"\n+             i18n:translate="description_you_are_registered"\n+        >\n             You have been registered.\n         </div>\n \n         <div id="content-core">\n-            <p tal:condition="not: enable_user_pwd_choice"\n-               i18n:translate="description_password_reset_or_registered">\n+          <p tal:condition="not: enable_user_pwd_choice"\n+             i18n:translate="description_password_reset_or_registered"\n+          >\n                 You will receive an e-mail shortly containing a URL that will allow you to\n                 set your password. When you receive this e-mail, please follow the link to\n                 complete your registration process. NOTE: The password reset URL will expire\n-                on <span tal:replace="view/expire_date" i18n:name="time"/>. If your\n+                on\n+            <span tal:replace="view/expire_date"\n+                  i18n:name="time"\n+            ></span>. If your\n                 password reset request expires, you may use the "Forgot your password" link\n                 to generate another password reset request.\n-            </p>\n+          </p>\n \n-            <tal:block condition="enable_user_pwd_choice">\n-                <p i18n:translate="description_you_can_log_on_now">\n+          <tal:block condition="enable_user_pwd_choice">\n+            <p i18n:translate="description_you_can_log_on_now">\n                     Click the button to log in immediately.\n-                </p>\n+            </p>\n \n-                <div class="portalMessage error pat-cookietrigger" style="display:none">\n-                    <strong i18n:translate="">\n+            <div class="portalMessage error pat-cookietrigger"\n+                 style="display:none"\n+            >\n+              <strong i18n:translate="">\n                         Error\n-                    </strong>\n-                    <span tal:omit-tag=""\n-                        i18n:translate="enable_cookies_message_before_login">\n+              </strong>\n+              <span tal:omit-tag=""\n+                    i18n:translate="enable_cookies_message_before_login"\n+              >\n                         Cookies are not enabled. You must enable cookies before you can log in.\n-                    </span>\n-                </div>\n+              </span>\n+            </div>\n \n \n-                <form action=""\n-                      method="post"\n-                      tal:define="form request/form;\n-                                  username python: form.get(\'form.widgets.username\') or form.get(\'form.username\');\n-                                  password python: form.get(\'form.widgets.password\') or form.get(\'form.password\');\n-                                  ac_name auth/name_cookie|string:__ac_name;\n-                                  ac_password auth/pw_cookie|string:__ac_password;\n-                                  portal_url context/portal_url;"\n-                      tal:attributes="action python:\'%s/login_form\' % portal_url">\n+            <form action=""\n+                  method="post"\n+                  tal:define="\n+                    form request/form;\n+                    username python: form.get(\'form.widgets.username\') or form.get(\'form.username\');\n+                    password python: form.get(\'form.widgets.password\') or form.get(\'form.password\');\n+                    ac_name auth/name_cookie|string:__ac_name;\n+                    ac_password auth/pw_cookie|string:__ac_password;\n+                    portal_url context/portal_url;\n+                  "\n+                  tal:attributes="\n+                    action python:\'%s/login_form\' % portal_url;\n+                  "\n+            >\n \n-                     <input type="hidden" name="form.submitted" value="1" />\n-                     <input type="hidden" name="js_enabled" id="js_enabled" value="0" />\n-                     <input type="hidden" name="cookies_enabled" id="cookies_enabled" value="0" />\n-                     <input type="hidden" name="login_name" id="login_name" value="" />\n-                     <input type="hidden" name="pwd_empty" id="pwd_empty" value="0" />\n+              <input name="form.submitted"\n+                     type="hidden"\n+                     value="1"\n+              />\n+              <input id="js_enabled"\n+                     name="js_enabled"\n+                     type="hidden"\n+                     value="0"\n+              />\n+              <input id="cookies_enabled"\n+                     name="cookies_enabled"\n+                     type="hidden"\n+                     value="0"\n+              />\n+              <input id="login_name"\n+                     name="login_name"\n+                     type="hidden"\n+                     value=""\n+              />\n+              <input id="pwd_empty"\n+                     name="pwd_empty"\n+                     type="hidden"\n+                     value="0"\n+              />\n \n-                    <input type="hidden"\n-                           name="came_from"\n-                           value=""\n-                           tal:attributes="value request/came_from|nothing;" />\n-                    <input type="hidden"\n-                           name="ac_name"\n-                           value=""\n-                           tal:attributes="id ac_name;\n-                                           name ac_name;\n-                                           value username;" />\n-                    <input type="hidden"\n-                           name="ac_password"\n-                           value=""\n-                           tal:attributes="name ac_password;\n-                                           id ac_password;\n-                                           value password;" />\n-                    <input class="btn btn-secondary"\n-                           type="submit"\n-                           value="Log in"\n-                           name="buttons.login"\n-                           i18n:attributes="value label_log_in;"\n-                           />\n-                </form>\n-            </tal:block>\n+              <input name="came_from"\n+                     type="hidden"\n+                     value=""\n+                     tal:attributes="\n+                       value request/came_from|nothing;\n+                     "\n+              />\n+              <input name="ac_name"\n+                     type="hidden"\n+                     value=""\n+                     tal:attributes="\n+                       id ac_name;\n+                       name ac_name;\n+                       value username;\n+                     "\n+              />\n+              <input name="ac_password"\n+                     type="hidden"\n+                     value=""\n+                     tal:attributes="\n+                       name ac_password;\n+                       id ac_password;\n+                       value password;\n+                     "\n+              />\n+              <input class="btn btn-secondary"\n+                     name="buttons.login"\n+                     type="submit"\n+                     value="Log in"\n+                     i18n:attributes="value label_log_in;"\n+              />\n+            </form>\n+          </tal:block>\n         </div>\n \n-    </div>\n+      </div>\n \n-</metal:main>\n-</body>\n+    </metal:main>\n+  </body>\n </html>\ndiff --git a/plone/app/users/browser/schema_layout.pt b/plone/app/users/browser/schema_layout.pt\nindex 6547565..9c233ef 100644\n--- a/plone/app/users/browser/schema_layout.pt\n+++ b/plone/app/users/browser/schema_layout.pt\n@@ -1,54 +1,69 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       lang="en"\n       metal:use-macro="here/prefs_main_template/macros/master"\n-      i18n:domain="plone">\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n \n-<body>\n+  <body>\n \n-<div metal:fill-slot="prefs_configlet_main">\n+    <div metal:fill-slot="prefs_configlet_main">\n \n-  <a id="setup-link" class="link-parent"\n-     tal:attributes="href string:$portal_url/@@overview-controlpanel"\n-     i18n:translate="">\n+      <a class="link-parent"\n+         id="setup-link"\n+         tal:attributes="\n+           href string:$portal_url/@@overview-controlpanel;\n+         "\n+         i18n:translate=""\n+      >\n       Site Setup\n-  </a>\n+      </a>\n \n-  <h1 class="documentFirstHeading" i18n:translate="">Edit Member Form Fields</h1>\n+      <h1 class="documentFirstHeading"\n+          i18n:translate=""\n+      >Edit Member Form Fields</h1>\n \n-  <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n+      <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n     Portal status message\n-  </div>\n+      </div>\n \n-  <div id="content-core">\n+      <div id="content-core">\n \n         <ul class="nav nav-tabs">\n-            <li class="nav-item">\n-              <a class="nav-link"\n-                href="${portal_url}/@@usergroup-userprefs"\n-                i18n:translate="label_users">Users</a>\n-            </li>\n-            <li class="nav-item">\n-              <a href="${portal_url}/@@usergroup-groupprefs" class="nav-link"\n-                i18n:translate="label_groups">Groups</a>\n-            </li>\n-            <li class="nav-item">\n-              <a href="${portal_url}/@@usergroup-controlpanel" class="nav-link"\n-                i18n:translate="label_usergroup_settings">Settings</a>\n-            </li>\n-            <li class="nav-item">\n-              <a href="${portal_url}/@@member-fields" class="nav-link active"\n-                i18n:translate="label_member_fields">Member fields</a>\n-            </li>\n+          <li class="nav-item">\n+            <a class="nav-link"\n+               href="${portal_url}/@@usergroup-userprefs"\n+               i18n:translate="label_users"\n+            >Users</a>\n+          </li>\n+          <li class="nav-item">\n+            <a class="nav-link"\n+               href="${portal_url}/@@usergroup-groupprefs"\n+               i18n:translate="label_groups"\n+            >Groups</a>\n+          </li>\n+          <li class="nav-item">\n+            <a class="nav-link"\n+               href="${portal_url}/@@usergroup-controlpanel"\n+               i18n:translate="label_usergroup_settings"\n+            >Settings</a>\n+          </li>\n+          <li class="nav-item">\n+            <a class="nav-link active"\n+               href="${portal_url}/@@member-fields"\n+               i18n:translate="label_member_fields"\n+            >Member fields</a>\n+          </li>\n         </ul>\n \n-      <tal:block tal:replace="structure view/contents|view/render"/>\n+        <tal:block tal:replace="structure view/contents|view/render" />\n \n-  </div>\n+      </div>\n \n-</div>\n+    </div>\n \n-</body>\n+  </body>\n </html>\n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2023-04-08T17:11:18+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/8e37d5ac279238569f868f19455585eeb4e0e74b

feat: configure codespell

Files changed:
M pyproject.toml

b'diff --git a/pyproject.toml b/pyproject.toml\nindex 9eb73f3..517bc5b 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -60,3 +60,6 @@ Zope = [\n   \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n ]\n python-dateutil = [\'dateutil\']\n+\n+[tool.codespell]\n+ignore-words-list = "complet,exemple"\n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2023-04-08T17:11:18+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/d822bf9a80977b09030168819379f86dc86c01b6

feat: codespell

Files changed:
M CHANGES.rst
M plone/app/users/browser/interfaces.py
M plone/app/users/tests/forms_navigationroot.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex c035682..1a74fdf 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -472,7 +472,7 @@ Fixes:\n 2.0.3 (2014-04-19)\n ------------------\n \n-- Use correct timezone vocabulary in IPersonalPreferences schema. Wether\n+- Use correct timezone vocabulary in IPersonalPreferences schema. Whether\n   the newer plone.app.vocabularies, the older plone.app.event one or none at\n   all, depending on availability.\n   [thet]\ndiff --git a/plone/app/users/browser/interfaces.py b/plone/app/users/browser/interfaces.py\nindex 9258469..a93b2f9 100644\n--- a/plone/app/users/browser/interfaces.py\n+++ b/plone/app/users/browser/interfaces.py\n@@ -6,7 +6,7 @@ class IAccountPanelForm(IPloneControlPanelForm):\n     """Forms using plone.app.users"""\n \n     def _on_save():\n-        """Callback mehod which can be implemented by control panels to\n+        """Callback method which can be implemented by control panels to\n         react when the form is successfully saved. This avoids the need\n         to re-define actions only to do some additional notification or\n         configuration which cannot be handled by the normal schema adapter.\ndiff --git a/plone/app/users/tests/forms_navigationroot.rst b/plone/app/users/tests/forms_navigationroot.rst\nindex 03dbbcc..35de379 100644\n--- a/plone/app/users/tests/forms_navigationroot.rst\n+++ b/plone/app/users/tests/forms_navigationroot.rst\n@@ -49,7 +49,7 @@ same base class so if the fix works on one, it works on them all.\n     >>> browser.url\n     \'http://nohost/plone/@@personal-preferences\'\n \n-Check the existance and links for a standard site context (navigation root\n+Check the existence and links for a standard site context (navigation root\n is the Plone site itself since the marker interface isn\'t applied here\n yet).\n \n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2023-04-08T17:11:18+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/0278a26a8f8a457d290576a5a2f45d817bd4075f

feat: drop six

Files changed:
M plone/app/users/browser/passwordpanel.py
M plone/app/users/browser/register.py
M plone/app/users/setuphandlers.py
M setup.py

b'diff --git a/plone/app/users/browser/passwordpanel.py b/plone/app/users/browser/passwordpanel.py\nindex b5997f6..dab9639 100644\n--- a/plone/app/users/browser/passwordpanel.py\n+++ b/plone/app/users/browser/passwordpanel.py\n@@ -8,8 +8,6 @@\n from zope import schema\n from zope.interface import Interface\n \n-import six\n-\n \n class IPasswordSchema(Interface):\n     """Provide schema for password form"""\n@@ -76,9 +74,6 @@ def validate_password(self, action, data):\n         # check if password is correct\n         current_password = data.get("current_password")\n         if current_password:\n-            if six.PY2 and isinstance(current_password, str):\n-                current_password = current_password.encode("utf8")\n-\n             if not membertool.testCurrentPassword(current_password):\n                 # add error to current_password widget\n                 err_str = _("Incorrect value for current password")\n@@ -111,8 +106,6 @@ def action_reset_passwd(self, action):\n         membertool = getToolByName(self.context, "portal_membership")\n \n         password = data["new_password"]\n-        if six.PY2 and isinstance(password, str):\n-            password = password.encode("utf8")\n \n         try:\n             membertool.setPassword(password, None, REQUEST=self.request)\ndiff --git a/plone/app/users/browser/register.py b/plone/app/users/browser/register.py\nindex b1523ed..1c4b99a 100644\n--- a/plone/app/users/browser/register.py\n+++ b/plone/app/users/browser/register.py\n@@ -34,7 +34,6 @@\n from zope.schema import getFieldNames\n \n import logging\n-import six\n \n \n # Number of retries for creating a user id like bob-jones-42:\n@@ -410,14 +409,6 @@ def handle_join_success(self, data):\n         # user_id and login_name should be in the data, but let\'s be safe.\n         user_id = data.get("user_id", data.get("username"))\n         login_name = data.get("login_name", data.get("username"))\n-        if six.PY2:\n-            # I have seen a unicode user id.  I cannot reproduce it, but\n-            # let\'s make them strings, otherwise you run into trouble with\n-            # plone.session when trying to login.\n-            if isinstance(user_id, str):\n-                user_id = user_id.encode("utf8")\n-            if isinstance(login_name, str):\n-                login_name = login_name.encode("utf8")\n \n         # Set the username for good measure, as some code may expect\n         # it to exist and contain the user id.\n@@ -431,8 +422,6 @@ def handle_join_success(self, data):\n         self.request.form["form.username"] = login_name\n \n         password = data.get("password") or registration.generatePassword()\n-        if six.PY2 and isinstance(password, str):\n-            password = password.encode("utf8")\n \n         try:\n             registration.addMember(user_id, password, REQUEST=self.request)\ndiff --git a/plone/app/users/setuphandlers.py b/plone/app/users/setuphandlers.py\nindex ad42090..1c409d4 100644\n--- a/plone/app/users/setuphandlers.py\n+++ b/plone/app/users/setuphandlers.py\n@@ -2,7 +2,6 @@\n \n import logging\n import plone.app.users.browser.schemaeditor as ttw\n-import six\n \n \n logger = logging.getLogger("plone.app.users.setuphandlers")\n@@ -15,7 +14,7 @@ def import_schema(context):\n     data = context.readDataFile(FILE)\n     if data is None:\n         return\n-    if six.PY3 and isinstance(data, bytes):\n+    if isinstance(data, bytes):\n         data = data.decode("utf-8")\n     ttw.applySchema(data)\n     logger.info("Imported schema")\ndiff --git a/setup.py b/setup.py\nindex a66d4cd..31f5416 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -63,7 +63,6 @@\n         "plone.schema",\n         "plone.uuid",\n         "setuptools",\n-        "six",\n         "z3c.form",\n         "zope.component",\n         "zope.event",\n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2023-04-08T17:11:18+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/ae00fc338614ffbd3d66c7f7e42e53d47dee37df

cleanup: remove robot tests

According to the commit [1] they are since then (2015) in CMFPlone.

[1] https://github.com/plone/plone.app.users/commit/bfb58a0ecc76106810600091b70c3069019d2582

Files changed:
D plone/app/users/tests/acceptance/test_edit_user_schema.robot
D plone/app/users/tests/test_robot.py

b'diff --git a/plone/app/users/tests/acceptance/test_edit_user_schema.robot b/plone/app/users/tests/acceptance/test_edit_user_schema.robot\ndeleted file mode 100644\nindex ea219e51..00000000\n--- a/plone/app/users/tests/acceptance/test_edit_user_schema.robot\n+++ /dev/null\n@@ -1,211 +0,0 @@\n-*** Settings ***\n-\n-Resource  plone/app/robotframework/selenium.robot\n-Resource  plone/app/robotframework/keywords.robot\n-\n-Library  Remote  ${PLONE_URL}/RobotRemote\n-\n-Test Setup  Open test browser\n-Test Teardown  Close all browsers\n-\n-Suite setup  Set Selenium speed  0.5s\n-\n-*** Test Cases ***\n-\n-Manager can edit the user schema\n-    Given I\'m logged in as a \'Manager\'\n-     then I go to Member fields editor\n-     and I add a new Text line (String) field \'office_name\'\n-     and I do not see the \'office_name\' field in user form\n-     and I make \'office_name\' field appear In User Profile form\n-     and I see the \'office_name\' field in user form\n-     and I do not see the \'office_name\' field in registration form\n-     and I make \'office_name\' field appear On Registration form\n-     and I see the \'office_name\' field in registration form\n-     and I make the \'office_name\' field required\n-\n-Fields order is honored\n-    Given I\'m logged in as a \'Manager\'\n-     then I add a new Text line (String) field \'office_name\'\n-     and I make \'office_name\' field appear In User Profile form\n-     and I make \'office_name\' field appear On Registration form\n-     and I add a new Text line (String) field \'job_title\'\n-     and I make \'job_title\' field appear In User Profile form\n-     and I make \'job_title\' field appear On Registration form\n-     and \'office_name\' is before \'job_title\' in registration form\n-     and \'office_name\' is before \'job_title\' in user profile\n-\n-Requirement constraint is honored\n-    Given I\'m logged in as a \'Manager\'\n-     then I add a new Text line (String) field \'office_name\'\n-     and I make \'office_name\' field appear In User Profile form\n-     and \'office_name\' is not required\n-     and I add a new Integer field \'favorite_star_wars_episode\'\n-     and I make \'favorite_star_wars_episode\' field appear In User Profile form\n-     and \'favorite_star_wars_episode\' is not required\n-     and I make the \'office_name\' field required\n-     and \'office_name\' is required\n-\n-Type constraint is honored\n-    Given I\'m logged in as a \'Manager\'\n-     and I add a new Integer field \'favorite_star_wars_episode\'\n-     and I make \'favorite_star_wars_episode\' field appear In User Profile form\n-     and \'favorite_star_wars_episode\' cannot be IV\n-     and \'favorite_star_wars_episode\' can be 5\n-\n-Min/max constraint is honored\n-    Given I\'m logged in as a \'Manager\'\n-     and I add a new Integer field \'favorite_star_wars_episode\'\n-     and I make \'favorite_star_wars_episode\' field appear In User Profile form\n-     and I restrict \'favorite_star_wars_episode\' value to min 4 and max 6\n-     and value 3 is too small for \'favorite_star_wars_episode\'\n-     and value 10 is too big for \'favorite_star_wars_episode\'\n-     and \'favorite_star_wars_episode\' can be 5\n-\n-*** Keywords ***\n-\n-I\'m logged in as a \'${ROLE}\'\n-    Enable autologin as  ${ROLE}\n-\n-I go to Member fields editor\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link  link=Users and Groups\n-    Click link  link=Member fields\n-\n-I add a new ${field_type} field \'${field_id}\'\n-    Go to  ${PLONE_URL}/@@member-fields\n-    Wait Until Element Is visible  css=#add-field  timeout=5\n-    Click link   css=#add-field\n-    Wait Until Element Is visible  css=#add-field-form  timeout=5\n-    Input Text      css=#add-field-form #form-widgets-title     ${field_id}\n-    Input Text      css=#add-field-form #form-widgets-__name__  ${field_id}\n-    Select From List    css=#form-widgets-factory   ${field_type}\n-    Click button        css=.pattern-modal-buttons input#form-buttons-add\n-\n-I make \'${field_id}\' field appear ${FORM} form\n-    Go to  ${PLONE_URL}/@@member-fields\n-    Wait Until Element Is visible  css=div[data-field_id=\'${field_id}\']  timeout=5\n-    Click link      css=div[data-field_id=\'${field_id}\'] a.fieldSettings\n-    Wait Until Element Is visible  css=#edit-field-form  timeout=5\n-    Select Checkbox     css=#edit-field-form input[value=\'${FORM}\']\n-    Click button        css=.pattern-modal-buttons input#form-buttons-save\n-\n-I do not see the \'${field_id}\' field in user form\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click link    css=a[title=\'test_user_1_\']\n-    Element should not be visible  css=input#form-widgets-${field_id}\n-\n-I see the \'${field_id}\' field in user form\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click link    css=a[title=\'test_user_1_\']\n-    Element should be visible  css=input#form-widgets-${field_id}\n-\n-I do not see the \'${field_id}\' field in registration form\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click button    css=#add-new-user\n-    Wait Until Element Is visible   css=form.kssattr-formname-new-user\n-    Element should not be visible  css=input#form-widgets-${field_id}\n-\n-I see the \'${field_id}\' field in registration form\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click button    css=#add-new-user\n-    Wait Until Element Is visible   css=form.kssattr-formname-new-user\n-    Element should be visible  css=input#form-widgets-${field_id}\n-\n-I make the \'${field_id}\' field required\n-    Go to  ${PLONE_URL}/@@member-fields\n-    Wait Until Element Is visible  css=div[data-field_id=\'${field_id}\']  timeout=5\n-    Click link      css=div[data-field_id=\'${field_id}\'] a.fieldSettings\n-    Wait Until Element Is visible  css=#edit-field-form  timeout=5\n-    Select Checkbox     css=#form-widgets-required-0\n-    Click button        css=.pattern-modal-buttons input#form-buttons-save\n-\n-\'${field_1}\' is before \'${field_2}\' in registration form\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click button    css=#add-new-user\n-    Wait Until Element Is visible   css=form.kssattr-formname-new-user\n-    Element should be visible  css=#formfield-form-widgets-${field_1} + #formfield-form-widgets-${field_2}\n-\n-\'${field_1}\' is before \'${field_2}\' in user profile\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click link    css=a[title=\'test_user_1_\']\n-    Element should be visible  css=#formfield-form-widgets-${field_1} + #formfield-form-widgets-${field_2}\n-\n-\'${field_id}\' is not required\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click link      css=a[title=\'test_user_1_\']\n-    Input Text      css=#form-widgets-fullname  Isaac Newton\n-    Input Text      css=#form-widgets-email  isaac@plone.org\n-    Click button    css=#form-buttons-save\n-    Wait Until Element Is visible   css=.portalMessage\n-    Page should not contain    Required input is missing\n-\n-\'${field_id}\' is required\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click link      css=a[title=\'test_user_1_\']\n-    Input Text      css=#form-widgets-fullname  Isaac Newton\n-    Input Text      css=#form-widgets-email  isaac@plone.org\n-    Click button    css=#form-buttons-save\n-    Wait Until Element Is visible   css=.portalMessage\n-    Page should contain    Required input is missing\n-\n-I restrict \'${field_id}\' value to min ${min_val} and max ${max_val}\n-    Go to  ${PLONE_URL}/@@member-fields\n-    Wait Until Element Is visible  css=div[data-field_id=\'${field_id}\']  timeout=5\n-    Click link      css=div[data-field_id=\'${field_id}\'] a.fieldSettings\n-    Wait Until Element Is visible  css=#edit-field-form  timeout=5\n-    Input Text      css=#form-widgets-min  ${min_val}\n-    Input Text      css=#form-widgets-max  ${max_val}\n-    Click button        css=.pattern-modal-buttons input#form-buttons-save\n-\n-value ${value} is too small for \'${field_id}\'\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click link      css=a[title=\'test_user_1_\']\n-    Input Text      css=#form-widgets-fullname  Isaac Newton\n-    Input Text      css=#form-widgets-email  isaac@plone.org\n-    Input Text      css=#form-widgets-${field_id}  ${value}\n-    Click button    css=#form-buttons-save\n-    Wait Until Element Is visible   css=.portalMessage  timeout=5\n-    Page should contain    Value is too small\n-\n-value ${value} is too big for \'${field_id}\'\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click link      css=a[title=\'test_user_1_\']\n-    Input Text      css=#form-widgets-fullname  Isaac Newton\n-    Input Text      css=#form-widgets-email  isaac@plone.org\n-    Input Text      css=#form-widgets-${field_id}  ${value}\n-    Click button    css=#form-buttons-save\n-    Wait Until Element Is visible   css=.portalMessage  timeout=5\n-    Page should contain    Value is too big\n-\n-\'${field_id}\' can be ${value}\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click link      css=a[title=\'test_user_1_\']\n-    Input Text      css=#form-widgets-fullname  Isaac Newton\n-    Input Text      css=#form-widgets-email  isaac@plone.org\n-    Input Text      css=#form-widgets-${field_id}  ${value}\n-    Click button    css=#form-buttons-save\n-    Wait Until Element Is visible    css=.portalMessage  timeout=5\n-    Element should not be visible    css=.portalMessage.error\n-\n-\'${field_id}\' cannot be ${value}\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click link      css=a[title=\'test_user_1_\']\n-    Input Text      css=#form-widgets-fullname  Isaac Newton\n-    Input Text      css=#form-widgets-email  isaac@plone.org\n-    Input Text      css=#form-widgets-${field_id}  ${value}\n-    Click button    css=#form-buttons-save\n-    Wait Until Element Is visible   css=.portalMessage  timeout=5\n-    Element should be visible       css=.portalMessage.error\ndiff --git a/plone/app/users/tests/test_robot.py b/plone/app/users/tests/test_robot.py\ndeleted file mode 100644\nindex f4f6a0a3..00000000\n--- a/plone/app/users/tests/test_robot.py\n+++ /dev/null\n@@ -1,21 +0,0 @@\n-from plone.app.users.testing import PLONE_APP_USERS_ACCEPTANCE_TESTING\n-from plone.testing import layered\n-\n-import os\n-import robotsuite\n-import unittest\n-\n-\n-def test_suite():\n-    suite = unittest.TestSuite()\n-    for testfile in os.listdir(os.path.join(os.path.dirname(__file__), "acceptance")):\n-        testfilepath = os.path.join("acceptance", testfile)\n-    #        if not os.path.isdir(testfilepath) and testfile.endswith(\'.robot\'):\n-    #            suite.addTests([\n-    #                layered(\n-    #                    robotsuite.RobotTestSuite(\n-    #                        testfilepath,\n-    #                        noncritical=[\'fixme\']),\n-    #                    layer=PLONE_APP_USERS_ACCEPTANCE_TESTING),\n-    #            ])\n-    return suite\n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2023-04-08T17:11:18+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/ecbdb2729d20f62dbc2852ea411c56bc364090ca

feat: flake8

Files changed:
M plone/app/users/browser/schemaeditor.py
M plone/app/users/tests/base.py
M plone/app/users/tests/test_account.py
M plone/app/users/tests/test_exportimport.py
M plone/app/users/tests/test_pam.py
M plone/app/users/tests/test_user_data_panel.py

b'diff --git a/plone/app/users/browser/schemaeditor.py b/plone/app/users/browser/schemaeditor.py\nindex 0d29a92..9017f4a 100644\n--- a/plone/app/users/browser/schemaeditor.py\n+++ b/plone/app/users/browser/schemaeditor.py\n@@ -211,7 +211,7 @@ def load(self, value):\n             "set": set,\n             "tuple": tuple,\n         }\n-        if isinstance(value, basestring):\n+        if isinstance(value, str):\n             listm = listre.search(value)\n             if value.startswith("int:"):\n                 value = int(value.split("int:")[1])\n@@ -222,7 +222,7 @@ def load(self, value):\n                     value = i["list"].split(SPLITTER)\n                     if tp not in ["list"]:\n                         value = ltypes[tp](value)\n-                except:\n+                except Exception:\n                     value = []\n             else:\n                 value = {"bool:true": True, "bool:false": False}.get(\n@@ -236,7 +236,7 @@ def serialize(self, value):\n         elif isinstance(value, (list, set, tuple)):\n             value = f"{type(value).__name__}:{SPLITTER.join(value)}"\n         elif value is not None:\n-            value = "int:%s" % unicode(value)\n+            value = f"int:{value}"\n         return value\n \n \ndiff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py\nindex 2be60fa..688e106 100644\n--- a/plone/app/users/tests/base.py\n+++ b/plone/app/users/tests/base.py\n@@ -8,7 +8,6 @@\n from Acquisition import aq_base\n from OFS.Cache import Cacheable\n from plone.app.testing import login\n-from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n from plone.base.interfaces import ISecuritySchema\ndiff --git a/plone/app/users/tests/test_account.py b/plone/app/users/tests/test_account.py\nindex 8f15886..084d121 100644\n--- a/plone/app/users/tests/test_account.py\n+++ b/plone/app/users/tests/test_account.py\n@@ -1,5 +1,4 @@\n from plone.app.users.browser.account import AccountPanelSchemaAdapter\n-from plone.app.users.tests.base import BaseTestCase\n from plone.testing import z2\n from Products.CMFCore.interfaces import IMembershipTool\n from zope.component import provideUtility\ndiff --git a/plone/app/users/tests/test_exportimport.py b/plone/app/users/tests/test_exportimport.py\nindex 6309f8d..812fb4b 100644\n--- a/plone/app/users/tests/test_exportimport.py\n+++ b/plone/app/users/tests/test_exportimport.py\n@@ -1,7 +1,6 @@\n from plone.app.users.browser.userdatapanel import getUserDataSchema\n from plone.app.users.setuphandlers import export_schema\n from plone.app.users.setuphandlers import import_schema\n-from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n from plone.app.users.tests.base import BaseTestCase\n from plone.namedfile.field import NamedBlobImage\n from Products.CMFCore.utils import getToolByName\ndiff --git a/plone/app/users/tests/test_pam.py b/plone/app/users/tests/test_pam.py\nindex 3021bce..5e4a94b 100644\n--- a/plone/app/users/tests/test_pam.py\n+++ b/plone/app/users/tests/test_pam.py\n@@ -7,13 +7,8 @@\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.testing.layers import FunctionalTesting\n-from plone.app.users.browser.userdatapanel import UserDataPanel\n-from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n from plone.testing import z2\n from Products.CMFCore.utils import getToolByName\n-from transaction import commit\n-from zExceptions import NotFound\n-from zope.i18n import translate\n \n import unittest\n \ndiff --git a/plone/app/users/tests/test_user_data_panel.py b/plone/app/users/tests/test_user_data_panel.py\nindex 32fa24d..36b5a2c 100644\n--- a/plone/app/users/tests/test_user_data_panel.py\n+++ b/plone/app/users/tests/test_user_data_panel.py\n@@ -1,6 +1,4 @@\n-from plone.app.testing import applyProfile\n from plone.app.users.browser.userdatapanel import UserDataPanel\n-from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n from plone.app.users.tests.base import BaseTestCase\n from zExceptions import NotFound\n from zope.i18n import translate\n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2023-04-08T17:11:18+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/0ec47b4ee4b38a45f10f682cddd44e7457ca3f9a

feat: avoid CMFPlone usage

Files changed:
M plone/app/users/browser/account.py
M plone/app/users/browser/configure.zcml
M plone/app/users/browser/interfaces.py
M plone/app/users/browser/membersearch.py
M plone/app/users/browser/passwordpanel.py
M plone/app/users/browser/personalpreferences.py
M plone/app/users/browser/register.py
M plone/app/users/browser/registersettingspanel.py
M plone/app/users/browser/schemaeditor.py
M plone/app/users/browser/userdatapanel.py
M plone/app/users/schema.py
M plone/app/users/setuphandlers.py
M plone/app/users/tests/base.py
M plone/app/users/upgrades.py
M plone/app/users/vocabularies.py

b'diff --git a/plone/app/users/browser/account.py b/plone/app/users/browser/account.py\nindex f7ffea2..bf02d69 100644\n--- a/plone/app/users/browser/account.py\n+++ b/plone/app/users/browser/account.py\n@@ -5,15 +5,15 @@\n from plone.app.users.browser.schemaeditor import getFromBaseSchema\n from plone.app.users.utils import notifyWidgetActionExecutionError\n from plone.autoform.form import AutoExtensibleForm\n+from plone.base import PloneMessageFactory as _\n+from plone.base.interfaces import IPloneSiteRoot\n from plone.base.interfaces import ISecuritySchema\n+from plone.base.utils import safe_text\n from plone.namedfile.file import NamedBlobImage\n from plone.protect import CheckAuthenticator\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.controlpanel.events import ConfigurationChangedEvent\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n-from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.PlonePAS.tools.membership import default_portrait\n from Products.statusmessages.interfaces import IStatusMessage\n@@ -107,7 +107,7 @@ def _getProperty(self, name):\n             value = None\n         if value:\n             # PlonePAS encodes all unicode coming from PropertySheets.\n-            return safe_unicode(value)\n+            return safe_text(value)\n         return value\n \n     def _setProperty(self, name, value):\ndiff --git a/plone/app/users/browser/configure.zcml b/plone/app/users/browser/configure.zcml\nindex b353412..c02cf3f 100644\n--- a/plone/app/users/browser/configure.zcml\n+++ b/plone/app/users/browser/configure.zcml\n@@ -13,7 +13,7 @@\n \n   <browser:page\n       name="member-registration"\n-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      for="plone.base.interfaces.IPloneSiteRoot"\n       class=".registersettingspanel.RegistrationControlPanel"\n       permission="plone.app.controlpanel.UsersAndGroups"\n       />\ndiff --git a/plone/app/users/browser/interfaces.py b/plone/app/users/browser/interfaces.py\nindex a93b2f9..a16592d 100644\n--- a/plone/app/users/browser/interfaces.py\n+++ b/plone/app/users/browser/interfaces.py\n@@ -1,4 +1,4 @@\n-from Products.CMFPlone.interfaces.controlpanel import IPloneControlPanelForm\n+from plone.base.interfaces.controlpanel import IPloneControlPanelForm\n from zope.interface import Interface\n \n \ndiff --git a/plone/app/users/browser/membersearch.py b/plone/app/users/browser/membersearch.py\nindex efd9837..08d1bc2 100644\n--- a/plone/app/users/browser/membersearch.py\n+++ b/plone/app/users/browser/membersearch.py\n@@ -1,6 +1,6 @@\n from plone.autoform.form import AutoExtensibleForm\n+from plone.base import PloneMessageFactory as _\n from plone.supermodel import model\n-from Products.CMFPlone import PloneMessageFactory as _\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from z3c.form import button\n from z3c.form import form\ndiff --git a/plone/app/users/browser/passwordpanel.py b/plone/app/users/browser/passwordpanel.py\nindex dab9639..66bba35 100644\n--- a/plone/app/users/browser/passwordpanel.py\n+++ b/plone/app/users/browser/passwordpanel.py\n@@ -1,8 +1,8 @@\n from Acquisition import aq_inner\n from plone.app.users.browser.account import AccountPanelForm\n from plone.app.users.utils import notifyWidgetActionExecutionError\n+from plone.base import PloneMessageFactory as _\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n from Products.statusmessages.interfaces import IStatusMessage\n from z3c.form import button\n from zope import schema\ndiff --git a/plone/app/users/browser/personalpreferences.py b/plone/app/users/browser/personalpreferences.py\nindex 7f51318..4261dad 100644\n--- a/plone/app/users/browser/personalpreferences.py\n+++ b/plone/app/users/browser/personalpreferences.py\n@@ -1,8 +1,7 @@\n from plone.app.users.browser.account import AccountPanelForm\n from plone.app.users.browser.account import AccountPanelSchemaAdapter\n+from plone.base import PloneMessageFactory as _\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.utils import getFSVersionTuple\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.interface import Interface\n from zope.schema import Choice\n@@ -22,8 +21,6 @@\n except ImportError:\n     HAS_DT_VOCAB = False\n \n-PLONE5 = getFSVersionTuple()[0] >= 5\n-\n \n class IPersonalPreferences(Interface):\n     """Provide schema for personalize form."""\ndiff --git a/plone/app/users/browser/register.py b/plone/app/users/browser/register.py\nindex 1c4b99a..fe32a13 100644\n--- a/plone/app/users/browser/register.py\n+++ b/plone/app/users/browser/register.py\n@@ -9,15 +9,15 @@\n from plone.app.users.utils import notifyWidgetActionExecutionError\n from plone.app.users.utils import uuid_userid_generator\n from plone.autoform.form import AutoExtensibleForm\n+from plone.base import PloneMessageFactory as _\n from plone.base.interfaces import ISecuritySchema\n from plone.base.interfaces import IUserGroupsSettingsSchema\n+from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.protect import CheckAuthenticator\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.utils import normalizeString\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n from z3c.form import button\n@@ -194,7 +194,7 @@ def generate_user_id(self, data):\n         fullname = data.get("fullname")\n         if not fullname:\n             return default\n-        userid = normalizeString(fullname)\n+        userid = getUtility(IIDNormalizer).normalize(fullname)\n         # First check that this is a valid member id, regardless of\n         # whether a member with this id already exists or not.  We\n         # access an underscore attribute of the registration tool, so\ndiff --git a/plone/app/users/browser/registersettingspanel.py b/plone/app/users/browser/registersettingspanel.py\nindex 7b9b4d6..6aac69a 100644\n--- a/plone/app/users/browser/registersettingspanel.py\n+++ b/plone/app/users/browser/registersettingspanel.py\n@@ -1,7 +1,7 @@\n from plone.app.users.schema import IRegistrationSettingsSchema\n+from plone.base import PloneMessageFactory as _\n from plone.protect import CheckAuthenticator\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n from z3c.form import button\ndiff --git a/plone/app/users/browser/schemaeditor.py b/plone/app/users/browser/schemaeditor.py\nindex 9017f4a..9501acf 100644\n--- a/plone/app/users/browser/schemaeditor.py\n+++ b/plone/app/users/browser/schemaeditor.py\n@@ -2,6 +2,8 @@\n from plone.app.users.schema import IUserDataSchema\n from plone.app.users.schema import SCHEMA_ANNOTATION\n from plone.app.users.schema import SCHEMATA_KEY\n+from plone.base import PloneMessageFactory as _\n+from plone.base.interfaces import IPloneSiteRoot\n from plone.schemaeditor.browser.schema.listing import SchemaListing\n from plone.schemaeditor.browser.schema.traversal import SchemaContext\n from plone.supermodel import loadString\n@@ -13,8 +15,6 @@\n from plone.supermodel.utils import ns\n from plone.z3cform.layout import FormWrapper\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n from Products.CMFPlone.utils import get_portal\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.annotation.interfaces import IAnnotations\ndiff --git a/plone/app/users/browser/userdatapanel.py b/plone/app/users/browser/userdatapanel.py\nindex 4c46b68..785876e 100644\n--- a/plone/app/users/browser/userdatapanel.py\n+++ b/plone/app/users/browser/userdatapanel.py\n@@ -3,10 +3,10 @@\n from plone.app.users.browser.account import AccountPanelSchemaAdapter\n from plone.app.users.browser.account import getSchema\n from plone.app.users.schema import IUserDataSchema\n+from plone.base import PloneMessageFactory as _\n from plone.base.interfaces import ISecuritySchema\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.utils import get_portal\n from Products.CMFPlone.utils import set_own_login_name\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\ndiff --git a/plone/app/users/schema.py b/plone/app/users/schema.py\nindex 0bb71c8..67da6ae 100644\n--- a/plone/app/users/schema.py\n+++ b/plone/app/users/schema.py\n@@ -1,3 +1,4 @@\n+from plone.base import PloneMessageFactory as _\n from plone.formwidget.namedfile.widget import NamedImageWidget\n from plone.namedfile.interfaces import INamedImageField\n from plone.schema.email import Email\n@@ -5,7 +6,6 @@\n from plone.schemaeditor.interfaces import IFieldFactory\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.RegistrationTool import EmailAddressInvalid\n from z3c.form.interfaces import IFieldWidget\n from z3c.form.interfaces import IFormLayer\ndiff --git a/plone/app/users/setuphandlers.py b/plone/app/users/setuphandlers.py\nindex 1c409d4..3b999c4 100644\n--- a/plone/app/users/setuphandlers.py\n+++ b/plone/app/users/setuphandlers.py\n@@ -1,4 +1,4 @@\n-from Products.CMFPlone.utils import safe_encode\n+from plone.base.utils import safe_bytes\n \n import logging\n import plone.app.users.browser.schemaeditor as ttw\n@@ -23,5 +23,5 @@ def import_schema(context):\n def export_schema(context):\n     """Export TTW schema"""\n     schema = ttw.serialize_ttw_schema()\n-    context.writeDataFile(FILE, safe_encode(schema), "text/xml")\n+    context.writeDataFile(FILE, safe_bytes(schema), "text/xml")\n     logger.info("Exported schema")\ndiff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py\nindex 688e106..b059d13 100644\n--- a/plone/app/users/tests/base.py\n+++ b/plone/app/users/tests/base.py\n@@ -10,10 +10,10 @@\n from plone.app.testing import login\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n+from plone.base.interfaces import IMailSchema\n from plone.base.interfaces import ISecuritySchema\n from plone.registry.interfaces import IRegistry\n from plone.testing.z2 import Browser\n-from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n from Products.CMFPlone.tests.utils import MockMailHost\n from Products.MailHost.interfaces import IMailHost\n from Products.PlonePAS.setuphandlers import activatePluginInterfaces\ndiff --git a/plone/app/users/upgrades.py b/plone/app/users/upgrades.py\nindex 92a0a4c..2a64680 100644\n--- a/plone/app/users/upgrades.py\n+++ b/plone/app/users/upgrades.py\n@@ -1,11 +1,11 @@\n from plone.app.users.browser import schemaeditor\n+from plone.base import PloneMessageFactory as _\n from plone.namedfile.field import NamedBlobImage\n from plone.schemaeditor.interfaces import IEditableSchema\n from plone.supermodel.model import finalizeSchemas\n from plone.supermodel.model import Schema\n from plone.supermodel.model import SchemaClass\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n from zope import schema\n from zope.interface import Interface\n \ndiff --git a/plone/app/users/vocabularies.py b/plone/app/users/vocabularies.py\nindex fb82312..dd3d647 100644\n--- a/plone/app/users/vocabularies.py\n+++ b/plone/app/users/vocabularies.py\n@@ -1,11 +1,12 @@\n from .browser.schemaeditor import getFromBaseSchema\n from AccessControl import getSecurityManager\n from plone.app.users.schema import ICombinedRegisterSchema\n+from plone.base.utils import safe_text\n+from plone.i18n.normalizer.interfaces import IIDNormalizer\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import get_portal\n-from Products.CMFPlone.utils import normalizeString\n-from Products.CMFPlone.utils import safe_unicode\n+from zope.component import queryUtility\n from zope.interface import implementer\n from zope.schema import getFieldNames\n from zope.schema.interfaces import IVocabularyFactory\n@@ -110,7 +111,7 @@ def __call__(self, context):\n             if "Manager" in g.getRoles() and not is_zope_manager:\n                 continue\n \n-            group_title = safe_unicode(g.getGroupTitleOrName())\n+            group_title = safe_text(g.getGroupTitleOrName())\n             if group_title != g.id:\n                 title = f"{group_title} ({g.id})"\n             else:\n@@ -118,7 +119,8 @@ def __call__(self, context):\n             terms.append(SimpleTerm(g.id, g.id, title))\n \n         # Sort by title\n-        terms.sort(key=lambda x: normalizeString(x.title))\n+        utility = queryUtility(IIDNormalizer)\n+        terms.sort(key=lambda x: utility.normalize(x.title))\n         return SimpleVocabulary(terms)\n \n \n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2023-04-08T17:11:19+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/5d24096e082b7f343f8ef0c043b763fc9b1adfc1

feat: configure z3c.dependencychecker

Files changed:
M pyproject.toml

b'diff --git a/pyproject.toml b/pyproject.toml\nindex 517bc5b..d094650 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -60,6 +60,7 @@ Zope = [\n   \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n ]\n python-dateutil = [\'dateutil\']\n+ignore-packages = [\'Products.CMFPlone\']\n \n [tool.codespell]\n ignore-words-list = "complet,exemple"\n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2023-04-08T17:11:19+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/c531894f55a9f4f748a873929423943bedc9ac99

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 31f5416..dfd5ff7 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -11,8 +11,13 @@\n extras_require = {\n     "test": [\n         "Products.MailHost",\n+        "Products.PluggableAuthService",\n+        "plone.app.contenttypes[test]",\n+        "plone.app.multilingual",\n+        "plone.app.robotframework",\n         "plone.app.testing",\n         "plone.keyring",\n+        "plone.testing",\n     ]\n }\n \n@@ -49,21 +54,29 @@\n     python_requires=">=3.8",\n     extras_require=extras_require,\n     install_requires=[\n-        "AccessControl",\n         "Acquisition",\n-        "Products.CMFCore",\n+        "Products.GenericSetup",\n         "Products.PlonePAS >= 5.0.1",\n         "Products.statusmessages",\n-        "Zope2 >= 2.12.3",\n         "plone.app.layout",\n         "plone.autoform >= 1.2",\n+        "plone.app.event",\n+        "plone.app.vocabularies",\n+        "plone.base",\n         "plone.formwidget.namedfile >= 1.0.3",\n+        "plone.i18n",\n         "plone.namedfile",\n         "plone.protect",\n+        "plone.registry",\n         "plone.schema",\n+        "plone.schemaeditor",\n+        "plone.supermodel",\n         "plone.uuid",\n+        "plone.z3cform",\n         "setuptools",\n         "z3c.form",\n+        "zope.annotation",\n+        "zope.cachedescriptors",\n         "zope.component",\n         "zope.event",\n         "zope.interface",\n'

Repository: plone.app.users


Branch: refs/heads/master
Date: 2023-04-10T02:49:34+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.users/commit/45397ecc786dda20e6f1a57f443772f3bd395aec

Merge pull request #117 from plone/config-with-default-template-f6cea008

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/434550cc.internal
A tox.ini
M CHANGES.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/users/__init__.py
M plone/app/users/browser/__init__.py
M plone/app/users/browser/account-configlet.pt
M plone/app/users/browser/account-panel.pt
M plone/app/users/browser/account.py
M plone/app/users/browser/configure.zcml
M plone/app/users/browser/interfaces.py
M plone/app/users/browser/memberregistration.pt
M plone/app/users/browser/membersearch.py
M plone/app/users/browser/membersearch_form.pt
M plone/app/users/browser/newuser_form.pt
M plone/app/users/browser/passwordpanel.py
M plone/app/users/browser/personalpreferences.py
M plone/app/users/browser/register.py
M plone/app/users/browser/register_form.pt
M plone/app/users/browser/registered.pt
M plone/app/users/browser/registered.py
M plone/app/users/browser/registersettingspanel.py
M plone/app/users/browser/schema_layout.pt
M plone/app/users/browser/schemaeditor.py
M plone/app/users/browser/userdatapanel.py
M plone/app/users/configure.zcml
M plone/app/users/field_extender.py
M plone/app/users/profiles/default/metadata.xml
M plone/app/users/profiles/default/userschema.xml
M plone/app/users/schema.py
M plone/app/users/setuphandlers.py
M plone/app/users/testing.py
M plone/app/users/tests/__init__.py
M plone/app/users/tests/base.py
M plone/app/users/tests/forms_navigationroot.rst
M plone/app/users/tests/test_account.py
M plone/app/users/tests/test_doctests.py
M plone/app/users/tests/test_exportimport.py
M plone/app/users/tests/test_loginname_generator.py
M plone/app/users/tests/test_member_search.py
M plone/app/users/tests/test_new_user.py
M plone/app/users/tests/test_pam.py
M plone/app/users/tests/test_schema_types.py
M plone/app/users/tests/test_user_data_panel.py
M plone/app/users/tests/test_userid_generator.py
M plone/app/users/upgrades.py
M plone/app/users/utils.py
M plone/app/users/vocabularies.py
M pyproject.toml
M setup.cfg
M setup.py
D plone/app/users/tests/acceptance/test_edit_user_schema.robot
D plone/app/users/tests/test_robot.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 00000000..b4158b89\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 00000000..4eda434e\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "434550cc"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 00000000..fdafec1c\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex c035682f..1a74fdf6 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -472,7 +472,7 @@ Fixes:\n 2.0.3 (2014-04-19)\n ------------------\n \n-- Use correct timezone vocabulary in IPersonalPreferences schema. Wether\n+- Use correct timezone vocabulary in IPersonalPreferences schema. Whether\n   the newer plone.app.vocabularies, the older plone.app.event one or none at\n   all, depending on availability.\n   [thet]\ndiff --git a/news/434550cc.internal b/news/434550cc.internal\nnew file mode 100644\nindex 00000000..c08f5399\n--- /dev/null\n+++ b/news/434550cc.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af4..5284146e 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/__init__.py b/plone/app/__init__.py\nindex 68c04af4..5284146e 100644\n--- a/plone/app/__init__.py\n+++ b/plone/app/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/app/users/__init__.py b/plone/app/users/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/users/__init__.py\n+++ b/plone/app/users/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/users/browser/__init__.py b/plone/app/users/browser/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/users/browser/__init__.py\n+++ b/plone/app/users/browser/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/users/browser/account-configlet.pt b/plone/app/users/browser/account-configlet.pt\nindex 1ca590d5..3c3c2fb7 100644\n--- a/plone/app/users/browser/account-configlet.pt\n+++ b/plone/app/users/browser/account-configlet.pt\n@@ -1,49 +1,61 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       lang="en"\n       metal:use-macro="here/prefs_main_template/macros/master"\n-      i18n:domain="plone">\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n \n-<div metal:fill-slot="prefs_configlet_main">\n-  <header>\n-    <h1 class="documentFirstHeading"\n-        i18n:translate="">User Details</h1>\n-    <div>\n-      <a href="${portal_url}/@@usergroup-userprefs" i18n:translate="label_go_to_users" class="mt-n2">Up to List of Users</a>\n-    </div>\n-    <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n+  <div metal:fill-slot="prefs_configlet_main">\n+    <header>\n+      <h1 class="documentFirstHeading"\n+          i18n:translate=""\n+      >User Details</h1>\n+      <div>\n+        <a class="mt-n2"\n+           href="${portal_url}/@@usergroup-userprefs"\n+           i18n:translate="label_go_to_users"\n+        >Up to List of Users</a>\n+      </div>\n+      <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n       Portal status message\n-    </div>\n-  </header>\n-  <article id="content">\n-    <div id="content-core">\n-      <p class="lead mt-4">${python:view.description}</p>\n-      <nav class="nav nav-tabs mb-2"\n-            tal:define="userquery python:view.makeQuery()">\n-        <li class="nav-item">\n-          <a href="${portal_url}/@@user-information${userquery}"\n-              class="nav-link ${python:\'active\' if getattr(view, \'tab\', None)==\'userdata\' else \'\'}"\n-              i18n:translate="title_personal_information_form">Personal Information</a>\n-        </li>\n-        <li class="nav-item">\n-          <a href="${portal_url}/@@user-preferences${userquery}"\n-              class="nav-link ${python:\'active\' if getattr(view, \'tab\', None)==\'userprefs\' else \'\'}"\n-              i18n:translate="">Personal Preferences</a>\n-        </li>\n-        <li class="nav-item">\n-          <a href="${portal_url}/@@usergroup-usermembership${userquery}"\n-              class="nav-link"\n-              i18n:translate="label_group_memberships">Group Memberships</a>\n-        </li>\n-      </nav>\n-      <metal:b use-macro="context/@@ploneform-macros/titlelessform" />\n+      </div>\n+    </header>\n+    <article id="content">\n+      <div id="content-core">\n+        <p class="lead mt-4">${python:view.description}</p>\n+        <nav class="nav nav-tabs mb-2"\n+             tal:define="\n+               userquery python:view.makeQuery();\n+             "\n+        >\n+          <li class="nav-item">\n+            <a class="nav-link ${python:\'active\' if getattr(view, \'tab\', None)==\'userdata\' else \'\'}"\n+               href="${portal_url}/@@user-information${userquery}"\n+               i18n:translate="title_personal_information_form"\n+            >Personal Information</a>\n+          </li>\n+          <li class="nav-item">\n+            <a class="nav-link ${python:\'active\' if getattr(view, \'tab\', None)==\'userprefs\' else \'\'}"\n+               href="${portal_url}/@@user-preferences${userquery}"\n+               i18n:translate=""\n+            >Personal Preferences</a>\n+          </li>\n+          <li class="nav-item">\n+            <a class="nav-link"\n+               href="${portal_url}/@@usergroup-usermembership${userquery}"\n+               i18n:translate="label_group_memberships"\n+            >Group Memberships</a>\n+          </li>\n+        </nav>\n+        <metal:b use-macro="context/@@ploneform-macros/titlelessform" />\n \n-    </div>\n+      </div>\n \n-  </article>\n+    </article>\n \n-</div>\n+  </div>\n \n </html>\ndiff --git a/plone/app/users/browser/account-panel.pt b/plone/app/users/browser/account-panel.pt\nindex 9833934e..ab4de866 100644\n--- a/plone/app/users/browser/account-panel.pt\n+++ b/plone/app/users/browser/account-panel.pt\n@@ -1,10 +1,10 @@\n-<html\n-    xmlns="http://www.w3.org/1999/xhtml"\n-    xmlns:metal="http://xml.zope.org/namespaces/metal"\n-    xmlns:tal="http://xml.zope.org/namespaces/tal"\n-    xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-    i18n:domain="plone"\n-    metal:use-macro="context/main_template/macros/master">\n+<html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n+      metal:use-macro="context/main_template/macros/master"\n+      i18n:domain="plone"\n+>\n \n   <metal:b fill-slot="content-title">\n     <h1 class="documentFirstHeading">${view/label}</h1>\n@@ -16,19 +16,25 @@\n \n   <metal:b fill-slot="content-core">\n     <div class="autotabs">\n-      <nav\n-          class="autotoc-nav mb-3"\n-          tal:define="view_actions view/prepareObjectTabs;">\n+      <nav class="autotoc-nav mb-3"\n+           tal:define="\n+             view_actions view/prepareObjectTabs;\n+           "\n+      >\n         <ul class="nav nav-tabs">\n-          <li\n-              class="nav-item"\n-              tal:repeat="action view_actions">\n-            <a\n-                id="contentview-${action/id}"\n-                href="${action/url}"\n-                tal:define="selected action/selected|nothing;"\n-                tal:attributes="class python:\'autotoc-level-1\' + (\' nav-link active\' if selected else \' nav-link\')"\n-                i18n:translate="">${action/title}</a>\n+          <li class="nav-item"\n+              tal:repeat="action view_actions"\n+          >\n+            <a id="contentview-${action/id}"\n+               href="${action/url}"\n+               tal:define="\n+                 selected action/selected|nothing;\n+               "\n+               tal:attributes="\n+                 class python:\'autotoc-level-1\' + (\' nav-link active\' if selected else \' nav-link\');\n+               "\n+               i18n:translate=""\n+            >${action/title}</a>\n           </li>\n         </ul>\n       </nav>\ndiff --git a/plone/app/users/browser/account.py b/plone/app/users/browser/account.py\nindex 5b8522b6..bf02d69b 100644\n--- a/plone/app/users/browser/account.py\n+++ b/plone/app/users/browser/account.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n from plone.app.layout.navigation.interfaces import INavigationRoot\n@@ -6,15 +5,15 @@\n from plone.app.users.browser.schemaeditor import getFromBaseSchema\n from plone.app.users.utils import notifyWidgetActionExecutionError\n from plone.autoform.form import AutoExtensibleForm\n+from plone.base import PloneMessageFactory as _\n+from plone.base.interfaces import IPloneSiteRoot\n+from plone.base.interfaces import ISecuritySchema\n+from plone.base.utils import safe_text\n from plone.namedfile.file import NamedBlobImage\n from plone.protect import CheckAuthenticator\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.controlpanel.events import ConfigurationChangedEvent\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n-from plone.base.interfaces import ISecuritySchema\n-from Products.CMFPlone.utils import safe_unicode\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.PlonePAS.tools.membership import default_portrait\n from Products.statusmessages.interfaces import IStatusMessage\n@@ -31,16 +30,19 @@\n from ZTUtils import make_query\n \n \n-MESSAGE_EMAIL_CANNOT_CHANGE = \\\n-    _(\'message_email_cannot_change\',\n-      default=(u"Sorry, you are not allowed to "\n-               u"change your email address."))\n+MESSAGE_EMAIL_CANNOT_CHANGE = _(\n+    "message_email_cannot_change",\n+    default=("Sorry, you are not allowed to " "change your email address."),\n+)\n \n-MESSAGE_EMAIL_IN_USE = \\\n-    _(\'message_email_in_use\',\n-      default=(u"The email address you selected is "\n-               u"already in use or is not valid as login "\n-               u"name. Please choose another."))\n+MESSAGE_EMAIL_IN_USE = _(\n+    "message_email_in_use",\n+    default=(\n+        "The email address you selected is "\n+        "already in use or is not valid as login "\n+        "name. Please choose another."\n+    ),\n+)\n \n \n def getSchema(schema_interface, schema_adapter, form_name=None):\n@@ -56,10 +58,7 @@ def getSchema(schema_interface, schema_adapter, form_name=None):\n     else:\n         schema = None\n     if schema is None:\n-        schema = getFromBaseSchema(\n-            schema_interface,\n-            form_name=form_name\n-        )\n+        schema = getFromBaseSchema(schema_interface, form_name=form_name)\n         # Unset all request attr names.\n         # We do not want other caches to linger.\n         # See https://github.com/plone/plone.app.users/issues/76\n@@ -86,29 +85,29 @@ def isDefaultPortrait(value, portal):\n     return aq_inner(value) == aq_inner(default_portrait_value)\n \n \n-class AccountPanelSchemaAdapter(object):\n+class AccountPanelSchemaAdapter:\n     """Data manager that gets and sets any property mentioned\n-       in the schema to the property sheet\n+    in the schema to the property sheet\n     """\n+\n     context = None\n     schema = IAccountPanelForm\n \n     def __init__(self, context):\n-        mt = getToolByName(context, \'portal_membership\')\n-        userid = context.REQUEST.form.get(\'userid\')\n-        if (userid and mt.checkPermission(\'Plone Site Setup: Users and Groups\',\n-                                          context)):\n+        mt = getToolByName(context, "portal_membership")\n+        userid = context.REQUEST.form.get("userid")\n+        if userid and mt.checkPermission("Plone Site Setup: Users and Groups", context):\n             self.context = mt.getMemberById(userid)\n         else:\n             self.context = mt.getAuthenticatedMember()\n \n     def _getProperty(self, name):\n-        value = self.context.getProperty(name, \'\')\n-        if value == \'\':\n+        value = self.context.getProperty(name, "")\n+        if value == "":\n             value = None\n         if value:\n             # PlonePAS encodes all unicode coming from PropertySheets.\n-            return safe_unicode(value)\n+            return safe_text(value)\n         return value\n \n     def _setProperty(self, name, value):\n@@ -116,9 +115,7 @@ def _setProperty(self, name, value):\n             value = list(value)\n         if value and isinstance(self.schema[name], schema.Choice):\n             value = str(value)\n-        return self.context.setMemberProperties(\n-            {name: value}, force_empty=True\n-        )\n+        return self.context.setMemberProperties({name: value}, force_empty=True)\n \n     def __getattr__(self, name):\n         if name in self.schema:\n@@ -134,8 +131,7 @@ def __setattr__(self, name, value):\n         if name not in self.schema or hasattr(self.__class__, name):\n             # Either not part of the schema or dealt with by an explicit\n             # property\n-            return super(AccountPanelSchemaAdapter, self).__setattr__(name,\n-                                                                      value)\n+            return super().__setattr__(name, value)\n         if isinstance(value, NamedBlobImage):\n             # any image is stored as portrait\n             return self.set_portrait(value)\n@@ -144,19 +140,22 @@ def __setattr__(self, name, value):\n \n     @property\n     def portal(self):\n-        return getToolByName(self.context, \'portal_url\').getPortalObject()\n+        return getToolByName(self.context, "portal_url").getPortalObject()\n \n     def get_portrait(self):\n         """If user has default portrait, return none"""\n-        mt = getToolByName(self.context, \'portal_membership\')\n+        mt = getToolByName(self.context, "portal_membership")\n         value = mt.getPersonalPortrait(self.context.getId())\n         if isDefaultPortrait(value, self.portal):\n             return None\n-        return NamedBlobImage(value.data, contentType=value.content_type,\n-                              filename=getattr(value, \'filename\', None))\n+        return NamedBlobImage(\n+            value.data,\n+            contentType=value.content_type,\n+            filename=getattr(value, "filename", None),\n+        )\n \n     def set_portrait(self, value):\n-        mt = getToolByName(self.context, \'portal_membership\')\n+        mt = getToolByName(self.context, "portal_membership")\n         member_id = self.context.getId()\n         if value is None:\n             previous = mt.getPersonalPortrait(member_id)\n@@ -171,32 +170,33 @@ def set_portrait(self, value):\n \n     @property\n     def wysiwyg_editor(self):\n-        return self._getProperty(\'wysiwyg_editor\')\n+        return self._getProperty("wysiwyg_editor")\n \n     @wysiwyg_editor.setter\n     def wysiwyg_editor(self, value):\n         if value is None:\n             # set property that the site-default from the registry is used\n             # since both \'None\' and None result in plaintexteditor\n-            value = \'\'\n-        return self._setProperty(\'wysiwyg_editor\', value)\n+            value = ""\n+        return self._setProperty("wysiwyg_editor", value)\n \n     @property\n     def timezone(self):\n-        return self._getProperty(\'timezone\')\n+        return self._getProperty("timezone")\n \n     @timezone.setter\n     def timezone(self, value):\n         if value is None:\n-            value = \'\'\n-        return self._setProperty(\'timezone\', value)\n+            value = ""\n+        return self._setProperty("timezone", value)\n \n \n @implementer(IAccountPanelForm)\n class AccountPanelForm(AutoExtensibleForm, form.Form):\n     """A simple form to be used as a basis for account panel screens."""\n+\n     schema = IAccountPanelForm\n-    template = ViewPageTemplateFile(\'account-panel.pt\')\n+    template = ViewPageTemplateFile("account-panel.pt")\n     enableCSRFProtection = True\n \n     hidden_widgets = []\n@@ -205,14 +205,14 @@ class AccountPanelForm(AutoExtensibleForm, form.Form):\n \n     @lazy_property\n     def member(self):\n-        mtool = getToolByName(self.context, \'portal_membership\')\n-        if self.request.get(\'userid\'):\n-            return mtool.getMemberById(self.request.get(\'userid\'))\n+        mtool = getToolByName(self.context, "portal_membership")\n+        if self.request.get("userid"):\n+            return mtool.getMemberById(self.request.get("userid"))\n         return mtool.getAuthenticatedMember()\n \n     @property\n     def label(self):\n-        return self.member.getProperty(\'fullname\') or self.member.getUserName()\n+        return self.member.getProperty("fullname") or self.member.getUserName()\n \n     def _differentEmail(self, email):\n         """Check if the submitted form email address differs from the existing\n@@ -222,56 +222,51 @@ def _differentEmail(self, email):\n         else on the personalize form) or changing it back to your login name,\n         is fine.\n         """\n-        membership = getToolByName(self.context, \'portal_membership\')\n-        if self.request.get(\'userid\'):\n-            member = membership.getMemberById(self.request.get(\'userid\'))\n+        membership = getToolByName(self.context, "portal_membership")\n+        if self.request.get("userid"):\n+            member = membership.getMemberById(self.request.get("userid"))\n         else:\n             member = membership.getAuthenticatedMember()\n         return email not in (member.getId(), member.getUserName())\n \n     def makeQuery(self):\n-        userid = self.request.form.get(\'userid\', None)\n+        userid = self.request.form.get("userid", None)\n         if userid is not None:\n-            return \'?{}\'.format(make_query({\'userid\': userid}))\n-        return \'\'\n+            return "?{}".format(make_query({"userid": userid}))\n+        return ""\n \n     def action(self):\n         return self.request.getURL() + self.makeQuery()\n \n     def validate_email(self, action, data):\n         context = aq_inner(self.context)\n-        error_keys = [\n-            error.field.getName()\n-            for error\n-            in action.form.widgets.errors\n-        ]\n-        if \'email\' not in error_keys:\n-            registration = getToolByName(context, \'portal_registration\')\n+        error_keys = [error.field.getName() for error in action.form.widgets.errors]\n+        if "email" not in error_keys:\n+            registration = getToolByName(context, "portal_registration")\n             registry = getUtility(IRegistry)\n-            security_settings = registry.forInterface(\n-                ISecuritySchema, prefix="plone")\n+            security_settings = registry.forInterface(ISecuritySchema, prefix="plone")\n             if security_settings.use_email_as_login:\n-                err_str = \'\'\n+                err_str = ""\n                 try:\n-                    id_allowed = registration.isMemberIdAllowed(data[\'email\'])\n+                    id_allowed = registration.isMemberIdAllowed(data["email"])\n                 except Unauthorized:\n                     err_str = MESSAGE_EMAIL_CANNOT_CHANGE\n                 else:\n                     if not id_allowed:\n                         # only allow if unchanged\n-                        if self._differentEmail(data[\'email\']):\n+                        if self._differentEmail(data["email"]):\n                             err_str = MESSAGE_EMAIL_IN_USE\n                 if err_str:\n-                    notifyWidgetActionExecutionError(action, \'email\', err_str)\n+                    notifyWidgetActionExecutionError(action, "email", err_str)\n \n-    @button.buttonAndHandler(_(u\'Save\'))\n+    @button.buttonAndHandler(_("Save"))\n     def handleSave(self, action):\n         CheckAuthenticator(self.request)\n         data, errors = self.extractData()\n \n         # Extra validation for email, when it is there.  email is not in the\n         # data when you are at the personal-preferences page.\n-        if \'email\' in data:\n+        if "email" in data:\n             self.validate_email(action, data)\n \n         if action.form.widgets.errors:\n@@ -279,70 +274,77 @@ def handleSave(self, action):\n             return\n         if self.applyChanges(data):\n             IStatusMessage(self.request).addStatusMessage(\n-                self.successMessage, type=\'info\')\n+                self.successMessage, type="info"\n+            )\n             notify(ConfigurationChangedEvent(self, data))\n             self._on_save(data)\n         else:\n             IStatusMessage(self.request).addStatusMessage(\n-                self.noChangesMessage, type=\'info\')\n+                self.noChangesMessage, type="info"\n+            )\n         self.request.response.redirect(self.action())\n \n     def updateActions(self):\n-        super(AccountPanelForm, self).updateActions()\n-        if self.actions and \'save\' in self.actions:\n-            self.actions[\'save\'].addClass(\'btn btn-primary\')\n+        super().updateActions()\n+        if self.actions and "save" in self.actions:\n+            self.actions["save"].addClass("btn btn-primary")\n \n-    @button.buttonAndHandler(_(u\'Cancel\'))\n+    @button.buttonAndHandler(_("Cancel"))\n     def cancel(self, action):\n-        IStatusMessage(self.request).addStatusMessage(_("Changes canceled."),\n-                                                      type="info")\n+        IStatusMessage(self.request).addStatusMessage(\n+            _("Changes canceled."), type="info"\n+        )\n         self.request.response.redirect(\n-            \'%s%s\' % (self.request[\'ACTUAL_URL\'], self.makeQuery())\n+            "{}{}".format(self.request["ACTUAL_URL"], self.makeQuery())\n         )\n \n     def _on_save(self, data=None):\n         pass\n \n-    def prepareObjectTabs(self,\n-                          default_tab=\'view\',\n-                          sort_first=[\'folderContents\']):\n+    def prepareObjectTabs(self, default_tab="view", sort_first=["folderContents"]):\n         context = self.context\n-        mt = getToolByName(context, \'portal_membership\')\n+        mt = getToolByName(context, "portal_membership")\n         tabs = []\n         navigation_root_url = context.absolute_url()\n \n         def _check_allowed(context, request, name):\n-            """Check, if user has required permissions on view.\n-            """\n+            """Check, if user has required permissions on view."""\n             view = getMultiAdapter((context, request), name=name)\n             allowed = True\n             for perm in view.__ac_permissions__:\n                 allowed = allowed and mt.checkPermission(perm[0], context)\n             return allowed\n \n-        if _check_allowed(context, self.request, \'personal-information\'):\n-            tabs.append({\n-                \'title\': _(\'title_personal_information_form\',\n-                           u\'Personal Information\'),\n-                \'url\': navigation_root_url + \'/@@personal-information\',\n-                \'selected\': (self.__name__ == \'personal-information\'),\n-                \'id\': \'user_data-personal-information\',\n-            })\n-\n-        if _check_allowed(context, self.request, \'personal-preferences\'):\n-            tabs.append({\n-                \'title\': _(u\'Personal Preferences\'),\n-                \'url\': navigation_root_url + \'/@@personal-preferences\',\n-                \'selected\': (self.__name__ == \'personal-preferences\'),\n-                \'id\': \'user_data-personal-preferences\',\n-            })\n+        if _check_allowed(context, self.request, "personal-information"):\n+            tabs.append(\n+                {\n+                    "title": _(\n+                        "title_personal_information_form", "Personal Information"\n+                    ),\n+                    "url": navigation_root_url + "/@@personal-information",\n+                    "selected": (self.__name__ == "personal-information"),\n+                    "id": "user_data-personal-information",\n+                }\n+            )\n+\n+        if _check_allowed(context, self.request, "personal-preferences"):\n+            tabs.append(\n+                {\n+                    "title": _("Personal Preferences"),\n+                    "url": navigation_root_url + "/@@personal-preferences",\n+                    "selected": (self.__name__ == "personal-preferences"),\n+                    "id": "user_data-personal-preferences",\n+                }\n+            )\n \n         member = mt.getAuthenticatedMember()\n         if member.canPasswordSet():\n-            tabs.append({\n-                \'title\': _(\'label_password\', u\'Password\'),\n-                \'url\': navigation_root_url + \'/@@change-password\',\n-                \'selected\': (self.__name__ == \'change-password\'),\n-                \'id\': \'user_data-change-password\',\n-            })\n+            tabs.append(\n+                {\n+                    "title": _("label_password", "Password"),\n+                    "url": navigation_root_url + "/@@change-password",\n+                    "selected": (self.__name__ == "change-password"),\n+                    "id": "user_data-change-password",\n+                }\n+            )\n         return tabs\ndiff --git a/plone/app/users/browser/configure.zcml b/plone/app/users/browser/configure.zcml\nindex 024f795f..c02cf3fa 100644\n--- a/plone/app/users/browser/configure.zcml\n+++ b/plone/app/users/browser/configure.zcml\n@@ -2,14 +2,18 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n     xmlns:five="http://namespaces.zope.org/five"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n   <include package="plone.autoform" />\n-  <include package="Products.CMFPlone.controlpanel" file="permissions.zcml" />\n+  <include\n+      package="Products.CMFPlone.controlpanel"\n+      file="permissions.zcml"\n+      />\n \n   <browser:page\n       name="member-registration"\n-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      for="plone.base.interfaces.IPloneSiteRoot"\n       class=".registersettingspanel.RegistrationControlPanel"\n       permission="plone.app.controlpanel.UsersAndGroups"\n       />\n@@ -75,14 +79,16 @@\n       name="member-fields"\n       for="*"\n       class=".schemaeditor.MemberSchemaContext"\n+      allowed_interface="OFS.interfaces.IItem"\n       permission="plone.app.controlpanel.UsersAndGroups"\n-      allowed_interface="OFS.interfaces.IItem" />\n+      />\n \n   <browser:page\n       name="edit"\n       for=".schemaeditor.IMemberSchemaContext"\n       class=".schemaeditor.SchemaListingPage"\n-      permission="zope2.View" />\n+      permission="zope2.View"\n+      />\n \n   <browser:page\n       name="member-search"\n@@ -92,15 +98,15 @@\n       />\n \n   <adapter\n+      factory=".personalpreferences.PersonalPreferencesPanelAdapter"\n       provides=".personalpreferences.IPersonalPreferences"\n       for="plone.app.layout.navigation.interfaces.INavigationRoot"\n-      factory=".personalpreferences.PersonalPreferencesPanelAdapter"\n       />\n \n   <adapter\n+      factory=".passwordpanel.PasswordPanelAdapter"\n       provides=".passwordpanel.IPasswordSchema"\n       for="plone.app.layout.navigation.interfaces.INavigationRoot"\n-      factory=".passwordpanel.PasswordPanelAdapter"\n       />\n \n   <subscriber\ndiff --git a/plone/app/users/browser/interfaces.py b/plone/app/users/browser/interfaces.py\nindex 59e53995..a16592d3 100644\n--- a/plone/app/users/browser/interfaces.py\n+++ b/plone/app/users/browser/interfaces.py\n@@ -1,14 +1,12 @@\n-# -*- coding: utf-8 -*-\n-from Products.CMFPlone.interfaces.controlpanel import IPloneControlPanelForm\n+from plone.base.interfaces.controlpanel import IPloneControlPanelForm\n from zope.interface import Interface\n \n \n class IAccountPanelForm(IPloneControlPanelForm):\n-    """Forms using plone.app.users\n-    """\n+    """Forms using plone.app.users"""\n \n     def _on_save():\n-        """Callback mehod which can be implemented by control panels to\n+        """Callback method which can be implemented by control panels to\n         react when the form is successfully saved. This avoids the need\n         to re-define actions only to do some additional notification or\n         configuration which cannot be handled by the normal schema adapter.\ndiff --git a/plone/app/users/browser/memberregistration.pt b/plone/app/users/browser/memberregistration.pt\nindex aa868c28..a2d21dea 100644\n--- a/plone/app/users/browser/memberregistration.pt\n+++ b/plone/app/users/browser/memberregistration.pt\n@@ -1,49 +1,57 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      xml:lang="en" lang="en"\n+      lang="en"\n       metal:use-macro="context/prefs_main_template/macros/master"\n-      i18n:domain="plone">\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n \n-<body>\n+  <body>\n \n-<metal:main fill-slot="prefs_configlet_main">\n+    <metal:main fill-slot="prefs_configlet_main">\n \n-  <header>\n-    <h1 class="documentFirstHeading"\n-        i18n:translate="">Users and Groups</h1>\n+      <header>\n+        <h1 class="documentFirstHeading"\n+            i18n:translate=""\n+        >Users and Groups</h1>\n \n-    <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n+        <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n       Portal status message\n-    </div>\n+        </div>\n \n-    <ul class="nav nav-pills">\n-      <li class="nav-item">\n-        <a href="${portal_url}/@@usergroup-userprefs"\n-            class="nav-link active"\n-            i18n:translate="label_users">Users</a>\n-      </li>\n-      <li class="nav-item">\n-        <a href="${portal_url}/@@usergroup-groupprefs"\n-            class="nav-link"\n-            i18n:translate="label_groups">Groups</a>\n-      </li>\n-      <li class="nav-item">\n-        <a class="nav-link active"\n-            href="${portal_url}/@@usergroup-controlpanel"\n-            i18n:translate="label_usergroup_settings">Settings</a>\n-      </li>\n-      <li class="nav-item">\n-        <a href="${portal_url}/@@member-fields" class="nav-link"\n-            i18n:translate="label_member_fields">Member fields</a>\n-      </li>\n-    </ul>\n-  </header>\n-  <article id="content">\n-    <metal:b use-macro="context/@@ploneform-macros/titlelessform" />\n-  </article>\n+        <ul class="nav nav-pills">\n+          <li class="nav-item">\n+            <a class="nav-link active"\n+               href="${portal_url}/@@usergroup-userprefs"\n+               i18n:translate="label_users"\n+            >Users</a>\n+          </li>\n+          <li class="nav-item">\n+            <a class="nav-link"\n+               href="${portal_url}/@@usergroup-groupprefs"\n+               i18n:translate="label_groups"\n+            >Groups</a>\n+          </li>\n+          <li class="nav-item">\n+            <a class="nav-link active"\n+               href="${portal_url}/@@usergroup-controlpanel"\n+               i18n:translate="label_usergroup_settings"\n+            >Settings</a>\n+          </li>\n+          <li class="nav-item">\n+            <a class="nav-link"\n+               href="${portal_url}/@@member-fields"\n+               i18n:translate="label_member_fields"\n+            >Member fields</a>\n+          </li>\n+        </ul>\n+      </header>\n+      <article id="content">\n+        <metal:b use-macro="context/@@ploneform-macros/titlelessform" />\n+      </article>\n \n-</metal:main>\n-</body>\n+    </metal:main>\n+  </body>\n </html>\ndiff --git a/plone/app/users/browser/membersearch.py b/plone/app/users/browser/membersearch.py\nindex 35b606be..08d1bc23 100644\n--- a/plone/app/users/browser/membersearch.py\n+++ b/plone/app/users/browser/membersearch.py\n@@ -1,7 +1,6 @@\n-# -*- coding: utf-8 -*-\n from plone.autoform.form import AutoExtensibleForm\n+from plone.base import PloneMessageFactory as _\n from plone.supermodel import model\n-from Products.CMFPlone import PloneMessageFactory as _\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from z3c.form import button\n from z3c.form import form\n@@ -12,31 +11,30 @@ class IMemberSearchSchema(model.Schema):\n     """Provide schema for member search."""\n \n     model.fieldset(\n-        \'extra\',\n-        label=_(u\'legend_member_search_criteria\',\n-                default=u\'User Search Criteria\'),\n-        fields=[\'login\', \'email\', \'fullname\']\n+        "extra",\n+        label=_("legend_member_search_criteria", default="User Search Criteria"),\n+        fields=["login", "email", "fullname"],\n     )\n \n     login = schema.TextLine(\n-        title=_(u\'label_name\', default=u\'Name\'),\n+        title=_("label_name", default="Name"),\n         description=_(\n-            u\'help_search_name\',\n-            default=u\'Find users whose login name contain\'),\n+            "help_search_name", default="Find users whose login name contain"\n+        ),\n         required=False,\n     )\n     email = schema.TextLine(\n-        title=_(u\'label_email\', default=u\'Email\'),\n+        title=_("label_email", default="Email"),\n         description=_(\n-            u\'help_search_email\',\n-            default=u\'Find users whose email address contain\'),\n+            "help_search_email", default="Find users whose email address contain"\n+        ),\n         required=False,\n     )\n     fullname = schema.TextLine(\n-        title=_(u\'label_fullname\', default=u\'Full Name\'),\n+        title=_("label_fullname", default="Full Name"),\n         description=_(\n-            u\'help_search_fullname\',\n-            default=u\'Find users whose full names contain\'),\n+            "help_search_fullname", default="Find users whose full names contain"\n+        ),\n         required=False,\n     )\n     # disabled: https://dev.plone.org/ticket/13862\n@@ -61,16 +59,18 @@ def extractCriteriaFromRequest(criteria):\n     """Takes a dictionary of z3c.form data and sanitizes it to fit\n     for a pas member search.\n     """\n-    for key in [\'_authenticator\',\n-                \'form.buttons.search\',\n-                \'form.widgets.roles-empty-marker\', ]:\n+    for key in [\n+        "_authenticator",\n+        "form.buttons.search",\n+        "form.widgets.roles-empty-marker",\n+    ]:\n         if key in criteria:\n             del criteria[key]\n-    for (key, value) in list(criteria.items()):\n+    for key, value in list(criteria.items()):\n         if not value:\n             del criteria[key]\n         else:\n-            new_key = key.replace(\'form.widgets.\', \'\')\n+            new_key = key.replace("form.widgets.", "")\n             criteria[new_key] = value\n             del criteria[key]\n \n@@ -85,18 +85,19 @@ class MemberSearchForm(AutoExtensibleForm, form.Form):\n     schema = IMemberSearchSchema\n     ignoreContext = True\n \n-    label = _(u\'heading_member_search\', default=u\'Search for users\')\n-    description = _(u\'description_member_search\',\n-                    default=u\'This search form enables you to find users by \'\n-                            u\'specifying one or more search criteria.\')\n-    template = ViewPageTemplateFile(\'membersearch_form.pt\')\n+    label = _("heading_member_search", default="Search for users")\n+    description = _(\n+        "description_member_search",\n+        default="This search form enables you to find users by "\n+        "specifying one or more search criteria.",\n+    )\n+    template = ViewPageTemplateFile("membersearch_form.pt")\n     enableCSRFProtection = True\n-    formErrorsMessage = _(\'There were errors.\')\n+    formErrorsMessage = _("There were errors.")\n \n     submitted = False\n \n-    @button.buttonAndHandler(_(u\'label_search\', default=u\'Search\'),\n-                             name=\'search\')\n+    @button.buttonAndHandler(_("label_search", default="Search"), name="search")\n     def handleApply(self, action):\n         request = self.request\n         data, errors = self.extractData()\n@@ -105,9 +106,9 @@ def handleApply(self, action):\n             self.status = self.formErrorsMessage\n             return\n \n-        if request.get(\'form.buttons.search\', None):\n+        if request.get("form.buttons.search", None):\n             self.submitted = True\n \n-            view = self.context.restrictedTraverse(\'@@pas_search\')\n+            view = self.context.restrictedTraverse("@@pas_search")\n             criteria = extractCriteriaFromRequest(self.request.form.copy())\n-            self.results = view.searchUsers(sort_by=u\'fullname\', **criteria)\n+            self.results = view.searchUsers(sort_by="fullname", **criteria)\ndiff --git a/plone/app/users/browser/membersearch_form.pt b/plone/app/users/browser/membersearch_form.pt\nindex 89acbbee..79ead56a 100644\n--- a/plone/app/users/browser/membersearch_form.pt\n+++ b/plone/app/users/browser/membersearch_form.pt\n@@ -1,87 +1,120 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n+      i18n:domain="plone"\n+>\n \n-<body>\n+  <body>\n     <metal:body fill-slot="body">\n \n-        <article id="content" tal:condition="not: view/submitted">\n-            <h1 class="documentFirstHeading"\n-                tal:content="view/label | nothing" />\n-            <div id="content-core">\n-                <metal:block use-macro="context/@@ploneform-macros/titlelessform" />\n-            </div>\n-        </article>\n-\n-        <tal:block condition="view/submitted">\n-          <article id="content"\n-               tal:define="listing_allowed python: checkPermission(\'List portal members\', here);\n-                           results python:listing_allowed and view.results;\n-                           Batch python:modules[\'Products.CMFPlone\'].Batch;\n-                           DateTime python:modules[\'DateTime\'].DateTime;\n-                           b_size python:12;b_start python:0;b_start request/b_start | b_start;">\n-            <h1 class="documentFirstHeading"\n-                i18n:translate="heading_search_results">Search results</h1>\n-\n-            <div id="content-core">\n-                <p tal:condition="not: listing_allowed"\n-                    i18n:translate="member_listing_not_allowed">\n+      <article id="content"\n+               tal:condition="not: view/submitted"\n+      >\n+        <h1 class="documentFirstHeading"\n+            tal:content="view/label | nothing"\n+        ></h1>\n+        <div id="content-core">\n+          <metal:block use-macro="context/@@ploneform-macros/titlelessform" />\n+        </div>\n+      </article>\n+\n+      <tal:block condition="view/submitted">\n+        <article id="content"\n+                 tal:define="\n+                   listing_allowed python: checkPermission(\'List portal members\', here);\n+                   results python:listing_allowed and view.results;\n+                   Batch python:modules[\'Products.CMFPlone\'].Batch;\n+                   DateTime python:modules[\'DateTime\'].DateTime;\n+                   b_size python:12;\n+                   b_start python:0;\n+                   b_start request/b_start | b_start;\n+                 "\n+        >\n+          <h1 class="documentFirstHeading"\n+              i18n:translate="heading_search_results"\n+          >Search results</h1>\n+\n+          <div id="content-core">\n+            <p tal:condition="not: listing_allowed"\n+               i18n:translate="member_listing_not_allowed"\n+            >\n                     You are not allowed to list portal members.\n-                </p>\n-\n-                <tal:block condition="python: results and listing_allowed">\n-                  <div tal:define="batch python:Batch(results, b_size, int(b_start), orphan=1)">\n-\n-                    <strong i18n:translate="batch_x_items_matching_your_criteria">\n-                        <span i18n:name="number" tal:omit-tag="" tal:content="python:len(results)">234</span> items matching your search terms.\n-                    </strong>\n-\n-                    <div metal:use-macro="here/batch_macros/macros/navigation"/>\n-\n-                    <div tal:define="pm context/@@plone_tools/membership;\n-                                     portal_url context/@@plone_portal_state/portal_url">\n-                     <metal:block tal:repeat="result batch">\n-                        <div class="card" tal:define="userid result/userid | nothing;\n-                                                      personal_info python:pm.getMemberInfo(userid) or {};\n-                                                      home python:pm.getHomeUrl(userid, verifyPermission=1);\n-                                                      portrait python:pm.getPersonalPortrait(userid);">\n-\n-                                <a href="#"\n-                                   tal:attributes="href python:home or \'%s/author/%s\' % (portal_url, userid)">\n-                                    <img src="defaultUser.png"\n-                                         alt=""\n-                                         border="0"\n-                                         width="75"\n-                                         height="100"\n-                                         tal:attributes="src portrait/absolute_url" />\n-                                    <br />\n-                                    <span tal:content="python:personal_info.get(\'fullname\', userid)">user id</span>\n-                                </a>\n-\n-                        </div>\n-                     </metal:block>\n+            </p>\n+\n+            <tal:block condition="python: results and listing_allowed">\n+              <div tal:define="\n+                     batch python:Batch(results, b_size, int(b_start), orphan=1);\n+                   ">\n+\n+                <strong i18n:translate="batch_x_items_matching_your_criteria">\n+                  <span tal:content="python:len(results)"\n+                        tal:omit-tag=""\n+                        i18n:name="number"\n+                  >234</span>\n+                   items matching your search terms.\n+                </strong>\n+\n+                <div metal:use-macro="here/batch_macros/macros/navigation"></div>\n+\n+                <div tal:define="\n+                       pm context/@@plone_tools/membership;\n+                       portal_url context/@@plone_portal_state/portal_url;\n+                     ">\n+                  <metal:block tal:repeat="result batch">\n+                    <div class="card"\n+                         tal:define="\n+                           userid result/userid | nothing;\n+                           personal_info python:pm.getMemberInfo(userid) or {};\n+                           home python:pm.getHomeUrl(userid, verifyPermission=1);\n+                           portrait python:pm.getPersonalPortrait(userid);\n+                         "\n+                    >\n+\n+                      <a href="#"\n+                         tal:attributes="\n+                           href python:home or \'%s/author/%s\' % (portal_url, userid);\n+                         "\n+                      >\n+                        <img alt=""\n+                             border="0"\n+                             height="100"\n+                             src="defaultUser.png"\n+                             width="75"\n+                             tal:attributes="\n+                               src portrait/absolute_url;\n+                             "\n+                        />\n+                        <br />\n+                        <span tal:content="python:personal_info.get(\'fullname\', userid)">user id</span>\n+                      </a>\n+\n                     </div>\n+                  </metal:block>\n+                </div>\n \n-                    <div class="visualClear" id="clear-space-before-navigation"><!-- --></div>\n+                <div class="visualClear"\n+                     id="clear-space-before-navigation"\n+                ><!-- --></div>\n \n-                    <div metal:use-macro="here/batch_macros/macros/navigation" />\n+                <div metal:use-macro="here/batch_macros/macros/navigation"></div>\n \n-                    <div class="visualClear" id="clear-space-after-navigation"><!-- --></div>\n+                <div class="visualClear"\n+                     id="clear-space-after-navigation"\n+                ><!-- --></div>\n \n-                  </div>\n-                </tal:block>\n+              </div>\n+            </tal:block>\n \n-                <div tal:condition="python: not results and listing_allowed">\n-                    <p><strong i18n:translate="description_no_results_found">No results were found.</strong></p>\n-                </div>\n+            <div tal:condition="python: not results and listing_allowed">\n+              <p><strong i18n:translate="description_no_results_found">No results were found.</strong></p>\n             </div>\n-          </article>\n-        </tal:block>\n+          </div>\n+        </article>\n+      </tal:block>\n \n \n     </metal:body>\n-</body>\n+  </body>\n </html>\ndiff --git a/plone/app/users/browser/newuser_form.pt b/plone/app/users/browser/newuser_form.pt\nindex 66ce0dd9..41dd42b0 100644\n--- a/plone/app/users/browser/newuser_form.pt\n+++ b/plone/app/users/browser/newuser_form.pt\n@@ -1,28 +1,33 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-<head>\n+      i18n:domain="plone"\n+>\n+  <head>\n     <metal:block fill-slot="top_slot"\n-                 tal:define="dummy python:request.set(\'disable_border\',1);\n-                             disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n-                             disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);" />\n-</head>\n+                 tal:define="\n+                   dummy python:request.set(\'disable_border\',1);\n+                   disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n+                   disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);\n+                 "\n+    />\n+  </head>\n \n-<body>\n+  <body>\n     <metal:body fill-slot="body">\n \n-        <article id="content">\n-            <h1 class="documentFirstHeading"\n-                tal:content="view/label | nothing" />\n-            <div id="content-core">\n-                <metal:block use-macro="context/@@ploneform-macros/titlelessform">\n-                </metal:block>\n-            </div>\n-        </article>\n+      <article id="content">\n+        <h1 class="documentFirstHeading"\n+            tal:content="view/label | nothing"\n+        ></h1>\n+        <div id="content-core">\n+          <metal:block use-macro="context/@@ploneform-macros/titlelessform">\n+          </metal:block>\n+        </div>\n+      </article>\n \n     </metal:body>\n-</body>\n+  </body>\n </html>\ndiff --git a/plone/app/users/browser/passwordpanel.py b/plone/app/users/browser/passwordpanel.py\nindex 7d6faa23..66bba350 100644\n--- a/plone/app/users/browser/passwordpanel.py\n+++ b/plone/app/users/browser/passwordpanel.py\n@@ -1,52 +1,44 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from plone.app.users.browser.account import AccountPanelForm\n from plone.app.users.utils import notifyWidgetActionExecutionError\n+from plone.base import PloneMessageFactory as _\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n from Products.statusmessages.interfaces import IStatusMessage\n from z3c.form import button\n from zope import schema\n from zope.interface import Interface\n \n-import six\n-\n \n class IPasswordSchema(Interface):\n-    """Provide schema for password form """\n+    """Provide schema for password form"""\n \n     current_password = schema.Password(\n-        title=_(u\'label_current_password\', default=u\'Current password\'),\n-        description=_(\n-            u\'help_current_password\',\n-            default=u\'Enter your current password.\'),\n+        title=_("label_current_password", default="Current password"),\n+        description=_("help_current_password", default="Enter your current password."),\n         # constraint=checkCurrentPassword,\n     )\n \n     new_password = schema.Password(\n-        title=_(u\'label_new_password\', default=u\'New password\'),\n-        description=_(\n-            u\'help_new_password\',\n-            default=u"Enter your new password."),\n+        title=_("label_new_password", default="New password"),\n+        description=_("help_new_password", default="Enter your new password."),\n     )\n \n     new_password_ctl = schema.Password(\n-        title=_(u\'label_confirm_password\', default=u\'Confirm password\'),\n+        title=_("label_confirm_password", default="Confirm password"),\n         description=_(\n-            u\'help_confirm_password\',\n-            default=u"Re-enter the password. "\n-            u"Make sure the passwords are identical."),\n+            "help_confirm_password",\n+            default="Re-enter the password. " "Make sure the passwords are identical.",\n+        ),\n     )\n \n \n-class PasswordPanelAdapter(object):\n-\n+class PasswordPanelAdapter:\n     def __init__(self, context):\n-        self.context = getToolByName(context, \'portal_membership\')\n+        self.context = getToolByName(context, "portal_membership")\n \n     def get_dummy(self):\n         """We don\'t actually need to \'get\' anything ..."""\n-        return \'\'\n+        return ""\n \n     current_password = property(get_dummy)\n \n@@ -58,59 +50,48 @@ def get_dummy(self):\n class PasswordPanel(AccountPanelForm):\n     """Implementation of password reset form that uses z3c.form."""\n \n-    description = _(u"Change Password")\n-    form_name = _(u\'legend_password_details\', default=u\'Password Details\')\n+    description = _("Change Password")\n+    form_name = _("legend_password_details", default="Password Details")\n     schema = IPasswordSchema\n \n     def updateFields(self):\n-        super(PasswordPanel, self).updateFields()\n+        super().updateFields()\n         # Change the password description based on PAS Plugin The user needs a\n         # list of instructions on what kind of password is required.  We\'ll\n         # reuse password errors as instructions e.g. "Must contain a letter and\n         # a number".  Assume PASPlugin errors are already translated\n-        registration = getToolByName(self.context, \'portal_registration\')\n-        err_str = registration.testPasswordValidity(\'\')\n+        registration = getToolByName(self.context, "portal_registration")\n+        err_str = registration.testPasswordValidity("")\n         if err_str:\n-            msg = _(\n-                u\'Enter your new password. ${errors}\',\n-                mapping=dict(errors=err_str)\n-            )\n-            self.fields[\'new_password\'].field.description = msg\n+            msg = _("Enter your new password. ${errors}", mapping=dict(errors=err_str))\n+            self.fields["new_password"].field.description = msg\n \n     def validate_password(self, action, data):\n         context = aq_inner(self.context)\n-        registration = getToolByName(context, \'portal_registration\')\n-        membertool = getToolByName(context, \'portal_membership\')\n+        registration = getToolByName(context, "portal_registration")\n+        membertool = getToolByName(context, "portal_membership")\n \n         # check if password is correct\n-        current_password = data.get(\'current_password\')\n+        current_password = data.get("current_password")\n         if current_password:\n-            if six.PY2 and isinstance(current_password, six.text_type):\n-                current_password = current_password.encode(\'utf8\')\n-\n             if not membertool.testCurrentPassword(current_password):\n                 # add error to current_password widget\n-                err_str = _(u"Incorrect value for current password")\n-                notifyWidgetActionExecutionError(action,\n-                                                 \'current_password\', err_str)\n+                err_str = _("Incorrect value for current password")\n+                notifyWidgetActionExecutionError(action, "current_password", err_str)\n \n         # check if passwords are same and valid according to plugin\n-        new_password = data.get(\'new_password\')\n-        new_password_ctl = data.get(\'new_password_ctl\')\n+        new_password = data.get("new_password")\n+        new_password_ctl = data.get("new_password_ctl")\n         if new_password and new_password_ctl:\n-            err_str = registration.testPasswordValidity(new_password,\n-                                                        new_password_ctl)\n+            err_str = registration.testPasswordValidity(new_password, new_password_ctl)\n \n             if err_str:\n                 # add error to new_password widget\n-                notifyWidgetActionExecutionError(action,\n-                                                 \'new_password\', err_str)\n-                notifyWidgetActionExecutionError(action,\n-                                                 \'new_password_ctl\', err_str)\n+                notifyWidgetActionExecutionError(action, "new_password", err_str)\n+                notifyWidgetActionExecutionError(action, "new_password_ctl", err_str)\n \n     @button.buttonAndHandler(\n-        _(u\'label_change_password\', default=u\'Change Password\'),\n-        name=\'reset_passwd\'\n+        _("label_change_password", default="Change Password"), name="reset_passwd"\n     )\n     def action_reset_passwd(self, action):\n         data, errors = self.extractData()\n@@ -122,22 +103,20 @@ def action_reset_passwd(self, action):\n             self.status = self.formErrorsMessage\n             return\n \n-        membertool = getToolByName(self.context, \'portal_membership\')\n+        membertool = getToolByName(self.context, "portal_membership")\n \n-        password = data[\'new_password\']\n-        if six.PY2 and isinstance(password, six.text_type):\n-            password = password.encode(\'utf8\')\n+        password = data["new_password"]\n \n         try:\n             membertool.setPassword(password, None, REQUEST=self.request)\n         except AttributeError:\n-            failMessage = _(u\'While changing your password an AttributeError \'\n-                            u\'occurred. This is usually caused by your user \'\n-                            u\'being defined outside the portal.\')\n-\n-            IStatusMessage(self.request).addStatusMessage(\n-                _(failMessage), type="error"\n+            failMessage = _(\n+                "While changing your password an AttributeError "\n+                "occurred. This is usually caused by your user "\n+                "being defined outside the portal."\n             )\n+\n+            IStatusMessage(self.request).addStatusMessage(_(failMessage), type="error")\n             return\n \n         IStatusMessage(self.request).addStatusMessage(\n@@ -145,10 +124,10 @@ def action_reset_passwd(self, action):\n         )\n \n     # hide inherited Save and Cancel buttons\n-    @button.buttonAndHandler(_(u\'Save\'), condition=lambda form: False)\n+    @button.buttonAndHandler(_("Save"), condition=lambda form: False)\n     def handleSave(self, action):\n         pass\n \n-    @button.buttonAndHandler(_(u\'Cancel\'), condition=lambda form: False)\n+    @button.buttonAndHandler(_("Cancel"), condition=lambda form: False)\n     def cancel(self, action):\n         pass\ndiff --git a/plone/app/users/browser/personalpreferences.py b/plone/app/users/browser/personalpreferences.py\nindex 9a9d8664..4261dad0 100644\n--- a/plone/app/users/browser/personalpreferences.py\n+++ b/plone/app/users/browser/personalpreferences.py\n@@ -1,9 +1,7 @@\n-# -*- coding: utf-8 -*-\n from plone.app.users.browser.account import AccountPanelForm\n from plone.app.users.browser.account import AccountPanelSchemaAdapter\n+from plone.base import PloneMessageFactory as _\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.utils import getFSVersionTuple\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.interface import Interface\n from zope.schema import Choice\n@@ -11,51 +9,48 @@\n \n try:\n     import plone.app.event  # noqa\n+\n     HAS_PAE = True\n except ImportError:\n     HAS_PAE = False\n \n try:\n     import plone.app.vocabularies.datetimerelated  # noqa\n+\n     HAS_DT_VOCAB = True\n except ImportError:\n     HAS_DT_VOCAB = False\n \n-PLONE5 = getFSVersionTuple()[0] >= 5\n-\n \n class IPersonalPreferences(Interface):\n     """Provide schema for personalize form."""\n \n     wysiwyg_editor = Choice(\n-        title=_(u\'label_wysiwyg_editor\', default=u\'Wysiwyg editor\'),\n-        description=_(\n-            u\'help_wysiwyg_editor\',\n-            default=u\'Wysiwyg editor to use.\'\n-        ),\n+        title=_("label_wysiwyg_editor", default="Wysiwyg editor"),\n+        description=_("help_wysiwyg_editor", default="Wysiwyg editor to use."),\n         vocabulary="plone.app.vocabularies.AvailableEditors",\n         required=False,\n     )\n \n     language = Choice(\n-        title=_(u\'label_language\', default=u\'Language\'),\n-        description=_(u\'help_preferred_language\', u\'Your preferred language.\'),\n+        title=_("label_language", default="Language"),\n+        description=_("help_preferred_language", "Your preferred language."),\n         vocabulary="plone.app.vocabularies.AvailableContentLanguages",\n-        required=False\n+        required=False,\n     )\n \n     if HAS_PAE and HAS_DT_VOCAB:\n         timezone = Choice(\n-            title=_(u\'label_timezone\', default=u\'Time zone\'),\n-            description=_(u\'help_timezone\', default=u\'Your time zone\'),\n-            vocabulary=\'plone.app.vocabularies.AvailableTimezones\',\n+            title=_("label_timezone", default="Time zone"),\n+            description=_("help_timezone", default="Your time zone"),\n+            vocabulary="plone.app.vocabularies.AvailableTimezones",\n             required=False,\n         )\n     elif HAS_PAE:\n         timezone = Choice(\n-            title=_(u\'label_timezone\', default=u\'Time zone\'),\n-            description=_(u\'help_timezone\', default=u\'Your time zone\'),\n-            vocabulary=\'plone.app.vocabularies.Timezones\',\n+            title=_("label_timezone", default="Time zone"),\n+            description=_("help_timezone", default="Your time zone"),\n+            vocabulary="plone.app.vocabularies.Timezones",\n             required=False,\n         )\n \n@@ -67,45 +62,42 @@ class PersonalPreferencesPanelAdapter(AccountPanelSchemaAdapter):\n class PersonalPreferencesPanel(AccountPanelForm):\n     """Implementation of personalize form that uses z3c.form."""\n \n-    form_name = _(u\'legend_personal_details\', u\'Personal Details\')\n+    form_name = _("legend_personal_details", "Personal Details")\n     schema = IPersonalPreferences\n \n     @property\n     def description(self):\n-        userid = self.request.form.get(\'userid\')\n-        mt = getToolByName(self.context, \'portal_membership\')\n+        userid = self.request.form.get("userid")\n+        mt = getToolByName(self.context, "portal_membership")\n         if userid and (userid != mt.getAuthenticatedMember().getId()):\n             # editing someone else\'s profile\n             return _(\n-                u\'description_preferences_form_otheruser\',\n-                default=\'Personal settings for $name\',\n-                mapping={\'name\': userid}\n+                "description_preferences_form_otheruser",\n+                default="Personal settings for $name",\n+                mapping={"name": userid},\n             )\n         else:\n             # editing my own profile\n-            return _(\n-                u\'description_my_preferences\',\n-                default=\'Your personal settings.\'\n-            )\n+            return _("description_my_preferences", default="Your personal settings.")\n \n     def updateWidgets(self):\n-        super(PersonalPreferencesPanel, self).updateWidgets()\n+        super().updateWidgets()\n \n-        self.widgets[\'language\'].noValueMessage = _(\n-            u"vocabulary-missing-single-value-for-edit",\n-            u"Language neutral (site default)"\n+        self.widgets["language"].noValueMessage = _(\n+            "vocabulary-missing-single-value-for-edit",\n+            "Language neutral (site default)",\n         )\n-        self.widgets[\'wysiwyg_editor\'].noValueMessage = _(\n-            u"vocabulary-available-editor-novalue",\n-            u"Use site default"\n+        self.widgets["wysiwyg_editor"].noValueMessage = _(\n+            "vocabulary-available-editor-novalue", "Use site default"\n         )\n \n     def __call__(self):\n-        self.request.set(\'disable_border\', 1)\n-        return super(PersonalPreferencesPanel, self).__call__()\n+        self.request.set("disable_border", 1)\n+        return super().__call__()\n \n \n class PersonalPreferencesConfiglet(PersonalPreferencesPanel):\n     """Control panel version of the personal preferences panel"""\n-    template = ViewPageTemplateFile(\'account-configlet.pt\')\n+\n+    template = ViewPageTemplateFile("account-configlet.pt")\n     tab = "userprefs"\ndiff --git a/plone/app/users/browser/register.py b/plone/app/users/browser/register.py\nindex 67b9d4ed..fe32a139 100644\n--- a/plone/app/users/browser/register.py\n+++ b/plone/app/users/browser/register.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from plone.app.users.browser.account import AccountPanelSchemaAdapter\n from plone.app.users.browser.account import getSchema\n@@ -10,15 +9,15 @@\n from plone.app.users.utils import notifyWidgetActionExecutionError\n from plone.app.users.utils import uuid_userid_generator\n from plone.autoform.form import AutoExtensibleForm\n+from plone.base import PloneMessageFactory as _\n+from plone.base.interfaces import ISecuritySchema\n+from plone.base.interfaces import IUserGroupsSettingsSchema\n+from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.protect import CheckAuthenticator\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n-from plone.base.interfaces import ISecuritySchema\n-from plone.base.interfaces import IUserGroupsSettingsSchema\n-from Products.CMFPlone.utils import normalizeString\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n from z3c.form import button\n@@ -35,7 +34,6 @@\n from zope.schema import getFieldNames\n \n import logging\n-import six\n \n \n # Number of retries for creating a user id like bob-jones-42:\n@@ -46,16 +44,17 @@ def getRegisterSchema():\n     schema = getSchema(\n         ICombinedRegisterSchema,\n         AccountPanelSchemaAdapter,\n-        form_name=\'On Registration\',\n+        form_name="On Registration",\n     )\n     return schema\n \n \n class BaseRegistrationForm(AutoExtensibleForm, form.Form):\n     """Form to be used as base for Register and Add User forms."""\n-    label = u""\n-    description = u""\n-    formErrorsMessage = _(\'There were errors.\')\n+\n+    label = ""\n+    description = ""\n+    formErrorsMessage = _("There were errors.")\n     ignoreContext = True\n     enableCSRFProtection = True\n \n@@ -73,9 +72,9 @@ def _get_security_settings(self):\n \n     def render(self):\n         if self._finishedRegister:\n-            return self.context.unrestrictedTraverse(\'registered\')()\n+            return self.context.unrestrictedTraverse("registered")()\n \n-        return super(BaseRegistrationForm, self).render()\n+        return super().render()\n \n     def updateFields(self):\n         """Fields are dynamic in this form, to be able to handle\n@@ -86,42 +85,44 @@ def updateFields(self):\n \n         # Finally, let autoform process the schema and any FormExtenders do\n         # their thing\n-        super(BaseRegistrationForm, self).updateFields()\n+        super().updateFields()\n \n         if use_email_as_login:\n-            self.fields[\'email\'].field.description = _(\n-                u\'help_email_creation_for_login\', default=u"Enter an email "\n+            self.fields["email"].field.description = _(\n+                "help_email_creation_for_login",\n+                default="Enter an email "\n                 "address. This will be your login name. We respect your "\n                 "privacy, and will not give the address away to any third "\n-                "parties or expose it anywhere.")\n-            del self.fields[\'username\']\n+                "parties or expose it anywhere.",\n+            )\n+            del self.fields["username"]\n         else:\n-            self.fields[\'email\'].field.description = _(\n-                u\'help_email_creation\',\n-                default=u"Enter an email address. This is necessary in case "\n-                        u"the password is lost. We respect your privacy, and "\n-                        u"will not give the address away to any third parties "\n-                        u"or expose it anywhere."\n+            self.fields["email"].field.description = _(\n+                "help_email_creation",\n+                default="Enter an email address. This is necessary in case "\n+                "the password is lost. We respect your privacy, and "\n+                "will not give the address away to any third parties "\n+                "or expose it anywhere.",\n             )\n \n         # Change the password description based on PAS Plugin The user needs a\n         # list of instructions on what kind of password is required.  We\'ll\n         # reuse password errors as instructions e.g. "Must contain a letter and\n         # a number".  Assume PASPlugin errors are already translated\n-        if self.fields.get(\'password\', None):\n-            registration = getToolByName(self.context, \'portal_registration\')\n-            err_str = registration.testPasswordValidity(\'\')\n+        if self.fields.get("password", None):\n+            registration = getToolByName(self.context, "portal_registration")\n+            err_str = registration.testPasswordValidity("")\n             if err_str:\n                 msg = _(\n-                    u\'help_password_creation_with_errors\',\n-                    default=u\'Enter your new password. ${errors}\',\n-                    mapping=dict(errors=err_str)\n+                    "help_password_creation_with_errors",\n+                    default="Enter your new password. ${errors}",\n+                    mapping=dict(errors=err_str),\n                 )\n-                self.fields[\'password\'].field.description = msg\n+                self.fields["password"].field.description = msg\n \n     def updateActions(self):\n-        super(BaseRegistrationForm, self).updateActions()\n-        self.actions[\'register\'].addClass(\'btn-primary\')\n+        super().updateActions()\n+        self.actions["register"].addClass("btn-primary")\n \n     def generate_user_id(self, data):\n         """Generate a user id from data.\n@@ -167,53 +168,53 @@ def generate_user_id(self, data):\n         if generator:\n             userid = generator(data)\n             if userid:\n-                data[\'user_id\'] = userid\n+                data["user_id"] = userid\n                 return userid\n \n         settings = self._get_security_settings()\n         if settings.use_uuid_as_userid:\n             userid = uuid_userid_generator()\n-            data[\'user_id\'] = userid\n+            data["user_id"] = userid\n             return userid\n \n         # We may have a username already.\n-        userid = data.get(\'username\')\n+        userid = data.get("username")\n         if userid:\n             # If we are not using email as login, then this user name is fine.\n             if not settings.use_email_as_login:\n-                data[\'user_id\'] = userid\n+                data["user_id"] = userid\n                 return userid\n \n         # First get a default value that we can return if we cannot\n         # find anything better.\n-        pas = getToolByName(self.context, \'acl_users\')\n-        email = pas.applyTransform(data.get(\'email\'))\n-        default = data.get(\'username\') or email or \'\'\n-        data[\'user_id\'] = default\n-        fullname = data.get(\'fullname\')\n+        pas = getToolByName(self.context, "acl_users")\n+        email = pas.applyTransform(data.get("email"))\n+        default = data.get("username") or email or ""\n+        data["user_id"] = default\n+        fullname = data.get("fullname")\n         if not fullname:\n             return default\n-        userid = normalizeString(fullname)\n+        userid = getUtility(IIDNormalizer).normalize(fullname)\n         # First check that this is a valid member id, regardless of\n         # whether a member with this id already exists or not.  We\n         # access an underscore attribute of the registration tool, so\n         # we take a precaution in case this is ever removed as an\n         # implementation detail.\n-        registration = getToolByName(self.context, \'portal_registration\')\n-        if hasattr(registration, \'_ALLOWED_MEMBER_ID_PATTERN\'):\n+        registration = getToolByName(self.context, "portal_registration")\n+        if hasattr(registration, "_ALLOWED_MEMBER_ID_PATTERN"):\n             if not registration._ALLOWED_MEMBER_ID_PATTERN.match(userid):\n                 # If \'bob-jones\' is not good then \'bob-jones-1\' will not\n                 # be good either.\n                 return default\n         if registration.isMemberIdAllowed(userid):\n-            data[\'user_id\'] = userid\n+            data["user_id"] = userid\n             return userid\n         # Try bob-jones-1, bob-jones-2, etc.\n         idx = 1\n         while idx <= RENAME_AFTER_CREATION_ATTEMPTS:\n             new_id = "%s-%d" % (userid, idx)\n             if registration.isMemberIdAllowed(new_id):\n-                data[\'user_id\'] = new_id\n+                data["user_id"] = new_id\n                 return new_id\n             idx += 1\n \n@@ -245,28 +246,28 @@ def generate_login_name(self, data):\n         When a login name is chosen, the \'login_name\' key of the data gets\n         set and the login name is returned.\n         """\n-        pas = getToolByName(self.context, \'acl_users\')\n+        pas = getToolByName(self.context, "acl_users")\n         generator = queryUtility(ILoginNameGenerator)\n         if generator:\n             login_name = generator(data)\n             if login_name:\n                 login_name = pas.applyTransform(login_name)\n-                data[\'login_name\'] = login_name\n+                data["login_name"] = login_name\n                 return login_name\n \n         # We may have a username already.\n-        login_name = data.get(\'username\')\n+        login_name = data.get("username")\n         login_name = pas.applyTransform(login_name)\n-        data[\'login_name\'] = login_name\n+        data["login_name"] = login_name\n         settings = self._get_security_settings()\n         # If we are not using email as login, then this user name is fine.\n         if not settings.use_email_as_login:\n             return login_name\n \n         # We use email as login.\n-        login_name = data.get(\'email\')\n+        login_name = data.get("email")\n         login_name = pas.applyTransform(login_name)\n-        data[\'login_name\'] = login_name\n+        data["login_name"] = login_name\n         return login_name\n \n     # Actions validators\n@@ -279,49 +280,42 @@ def validate_registration(self, action, data):\n         # CSRF protection\n         CheckAuthenticator(self.request)\n \n-        registration = getToolByName(self.context, \'portal_registration\')\n+        registration = getToolByName(self.context, "portal_registration")\n \n-        error_keys = [\n-            error.field.getName()\n-            for error\n-            in action.form.widgets.errors\n-        ]\n+        error_keys = [error.field.getName() for error in action.form.widgets.errors]\n \n         form_field_names = [f for f in self.fields]\n \n         portal = getUtility(ISiteRoot)\n \n         # passwords should match\n-        if \'password\' in form_field_names:\n-            assert \'password_ctl\' in form_field_names\n+        if "password" in form_field_names:\n+            assert "password_ctl" in form_field_names\n             # Skip this check if password fields already have an error\n-            if not (\'password\' in error_keys or \'password_ctl\' in error_keys):\n-                password = data.get(\'password\')\n-                password_ctl = data.get(\'password_ctl\')\n+            if not ("password" in error_keys or "password_ctl" in error_keys):\n+                password = data.get("password")\n+                password_ctl = data.get("password_ctl")\n                 if password != password_ctl:\n-                    err_str = _(u\'Passwords do not match.\')\n-                    notifyWidgetActionExecutionError(action,\n-                                                     \'password\', err_str)\n-                    notifyWidgetActionExecutionError(action,\n-                                                     \'password_ctl\', err_str)\n+                    err_str = _("Passwords do not match.")\n+                    notifyWidgetActionExecutionError(action, "password", err_str)\n+                    notifyWidgetActionExecutionError(action, "password_ctl", err_str)\n \n         # Password field checked against RegistrationTool\n-        if \'password\' in form_field_names:\n+        if "password" in form_field_names:\n             # Skip this check if password fields already have an error\n-            if \'password\' not in error_keys:\n-                password = data.get(\'password\')\n+            if "password" not in error_keys:\n+                password = data.get("password")\n                 if password:\n                     # Use PAS to test validity\n                     err_str = registration.testPasswordValidity(password)\n                     if err_str:\n-                        notifyWidgetActionExecutionError(action,\n-                                                         \'password\', err_str)\n+                        notifyWidgetActionExecutionError(action, "password", err_str)\n \n         settings = self._get_security_settings()\n         if settings.use_email_as_login:\n-            username_field = \'email\'\n+            username_field = "email"\n         else:\n-            username_field = \'username\'\n+            username_field = "username"\n \n         # The term \'username\' is not clear.  It may be the user id or\n         # the login name.  So here we try to be explicit.\n@@ -346,44 +340,45 @@ def validate_registration(self, action, data):\n         if username_field not in error_keys:\n             # user id may not be the same as the portal id.\n             if user_id == portal.getId():\n-                err_str = _(u"This username is reserved. Please choose a "\n-                            "different name.")\n-                notifyWidgetActionExecutionError(action,\n-                                                 username_field, err_str)\n+                err_str = _(\n+                    "This username is reserved. Please choose a " "different name."\n+                )\n+                notifyWidgetActionExecutionError(action, username_field, err_str)\n \n         # Check if user id is allowed by the member id pattern.\n         if username_field not in error_keys:\n             if not registration.isMemberIdAllowed(user_id):\n-                err_str = _(u"The login name you selected is already in use "\n-                            "or is not valid. Please choose another.")\n-                notifyWidgetActionExecutionError(action,\n-                                                 username_field, err_str)\n+                err_str = _(\n+                    "The login name you selected is already in use "\n+                    "or is not valid. Please choose another."\n+                )\n+                notifyWidgetActionExecutionError(action, username_field, err_str)\n \n         if username_field not in error_keys:\n             # Check the uniqueness of the login name, not only when\n             # use_email_as_login is true, but always.\n-            pas = getToolByName(self, \'acl_users\')\n+            pas = getToolByName(self, "acl_users")\n             results = pas.searchUsers(name=login_name, exact_match=True)\n             if results:\n-                err_str = _(u"The login name you selected is already in use "\n-                            "or is not valid. Please choose another.")\n-                notifyWidgetActionExecutionError(action,\n-                                                 username_field, err_str)\n+                err_str = _(\n+                    "The login name you selected is already in use "\n+                    "or is not valid. Please choose another."\n+                )\n+                notifyWidgetActionExecutionError(action, username_field, err_str)\n \n-        if \'password\' in form_field_names and \'password\' not in error_keys:\n+        if "password" in form_field_names and "password" not in error_keys:\n             # Admin can either set a password or mail the user (or both).\n-            if not (data[\'password\'] or data[\'mail_me\']):\n-                err_str = _(\'msg_no_password_no_mail_me\',\n-                            default=u"You must set a password or choose to "\n-                            "send an email.")\n+            if not (data["password"] or data["mail_me"]):\n+                err_str = _(\n+                    "msg_no_password_no_mail_me",\n+                    default="You must set a password or choose to " "send an email.",\n+                )\n \n                 # set error on password field\n-                notifyWidgetActionExecutionError(action, \'password\', err_str)\n-                notifyWidgetActionExecutionError(action, \'mail_me\', err_str)\n+                notifyWidgetActionExecutionError(action, "password", err_str)\n+                notifyWidgetActionExecutionError(action, "mail_me", err_str)\n \n-    @button.buttonAndHandler(\n-        _(u\'label_register\', default=u\'Register\'), name=\'register\'\n-    )\n+    @button.buttonAndHandler(_("label_register", default="Register"), name="register")\n     def action_join(self, action):\n         data, errors = self.extractData()\n \n@@ -398,45 +393,35 @@ def action_join(self, action):\n \n         # XXX Return somewhere else, depending on what\n         # handle_join_success returns?\n-        came_from = self.request.form.get(\'came_from\')\n+        came_from = self.request.form.get("came_from")\n         if came_from:\n-            utool = getToolByName(self.context, \'portal_url\')\n+            utool = getToolByName(self.context, "portal_url")\n             if utool.isURLInPortal(came_from):\n                 self.request.response.redirect(came_from)\n-                return \'\'\n+                return ""\n \n     def handle_join_success(self, data):\n         # portal should be acquisition wrapped, this is needed for the schema\n         # adapter below\n-        portal = getToolByName(self.context, \'portal_url\').getPortalObject()\n-        registration = getToolByName(self.context, \'portal_registration\')\n+        portal = getToolByName(self.context, "portal_url").getPortalObject()\n+        registration = getToolByName(self.context, "portal_registration")\n \n         # user_id and login_name should be in the data, but let\'s be safe.\n-        user_id = data.get(\'user_id\', data.get(\'username\'))\n-        login_name = data.get(\'login_name\', data.get(\'username\'))\n-        if six.PY2:\n-            # I have seen a unicode user id.  I cannot reproduce it, but\n-            # let\'s make them strings, otherwise you run into trouble with\n-            # plone.session when trying to login.\n-            if isinstance(user_id, six.text_type):\n-                user_id = user_id.encode(\'utf8\')\n-            if isinstance(login_name, six.text_type):\n-                login_name = login_name.encode(\'utf8\')\n+        user_id = data.get("user_id", data.get("username"))\n+        login_name = data.get("login_name", data.get("username"))\n \n         # Set the username for good measure, as some code may expect\n         # it to exist and contain the user id.\n-        data[\'username\'] = user_id\n+        data["username"] = user_id\n \n         # The login name may already be in the form, but not\n         # necessarily, for example when using email as login.  This is\n         # at least needed for logging in immediately when password\n         # reset is bypassed.  We need the login name here, not the\n         # user id.\n-        self.request.form[\'form.username\'] = login_name\n+        self.request.form["form.username"] = login_name\n \n-        password = data.get(\'password\') or registration.generatePassword()\n-        if six.PY2 and isinstance(password, six.text_type):\n-            password = password.encode(\'utf8\')\n+        password = data.get("password") or registration.generatePassword()\n \n         try:\n             registration.addMember(user_id, password, REQUEST=self.request)\n@@ -449,7 +434,7 @@ def handle_join_success(self, data):\n         if user_id != login_name:\n             # The user id differs from the login name.  Set the login\n             # name correctly.\n-            pas = getToolByName(self.context, \'acl_users\')\n+            pas = getToolByName(self.context, "acl_users")\n             pas.updateLoginName(user_id, login_name)\n \n         # set member properties\n@@ -457,8 +442,9 @@ def handle_join_success(self, data):\n \n         settings = self._get_security_settings()\n         self._finishedRegister = True\n-        if data.get(\'mail_me\') or (not settings.enable_user_pwd_choice and\n-                                   not data.get(\'password\')):\n+        if data.get("mail_me") or (\n+            not settings.enable_user_pwd_choice and not data.get("password")\n+        ):\n             # We want to validate the email address (users cannot\n             # select their own passwords on the register form) or the\n             # admin has explicitly requested to send an email on the\n@@ -476,8 +462,9 @@ def handle_join_success(self, data):\n                 raise\n             except Exception as err:\n                 logging.exception(err)\n-                ctrlOverview = getMultiAdapter((portal, self.request),\n-                                               name=\'overview-controlpanel\')\n+                ctrlOverview = getMultiAdapter(\n+                    (portal, self.request), name="overview-controlpanel"\n+                )\n                 mail_settings_correct = not ctrlOverview.mailhost_warning()\n                 if mail_settings_correct:\n                     # The email settings are correct, so the most\n@@ -485,30 +472,37 @@ def handle_join_success(self, data):\n                     # address.  We remove the account:\n                     # Remove the account:\n                     self.context.acl_users.userFolderDelUsers(\n-                        [user_id], REQUEST=self.request)\n+                        [user_id], REQUEST=self.request\n+                    )\n                     self._finishedRegister = False\n                     IStatusMessage(self.request).addStatusMessage(\n-                        _(u\'status_fatal_password_mail\',\n-                          default=u"Failed to create your account: we were "\n-                          "unable to send instructions for setting a password "\n-                          "to your email address: ${address}",\n-                          mapping={u\'address\': data.get(\'email\', \'\')}),\n-                        type=\'error\')\n+                        _(\n+                            "status_fatal_password_mail",\n+                            default="Failed to create your account: we were "\n+                            "unable to send instructions for setting a password "\n+                            "to your email address: ${address}",\n+                            mapping={"address": data.get("email", "")},\n+                        ),\n+                        type="error",\n+                    )\n                 else:\n                     # This should only happen when an admin registers\n                     # a user.  The admin should have seen a warning\n                     # already, but we warn again for clarity.\n                     IStatusMessage(self.request).addStatusMessage(\n-                        _(u\'status_nonfatal_password_mail\',\n-                          default=u"This account has been created, but we "\n-                          "were unable to send instructions for setting a "\n-                          "password to this email address: ${address}",\n-                          mapping={u\'address\': data.get(\'email\', \'\')}),\n-                        type=\'warning\')\n+                        _(\n+                            "status_nonfatal_password_mail",\n+                            default="This account has been created, but we "\n+                            "were unable to send instructions for setting a "\n+                            "password to this email address: ${address}",\n+                            mapping={"address": data.get("email", "")},\n+                        ),\n+                        type="warning",\n+                    )\n \n     def applyProperties(self, userid, data):\n-        portal = getToolByName(self.context, \'portal_url\').getPortalObject()\n-        mt = getToolByName(self.context, \'portal_membership\')\n+        portal = getToolByName(self.context, "portal_url").getPortalObject()\n+        mt = getToolByName(self.context, "portal_membership")\n         member = mt.getMemberById(userid)\n \n         # cache adapters\n@@ -516,11 +510,10 @@ def applyProperties(self, userid, data):\n \n         # Set any fields that are simply properties for the new user, rather\n         # than fields to help create the new user\n-        register_fields = getFieldNames(IRegisterSchema) + \\\n-            getFieldNames(IAddUserSchema)\n+        register_fields = getFieldNames(IRegisterSchema) + getFieldNames(IAddUserSchema)\n         for k, value in data.items():\n             # skip fields not available in the schema\n-            if k in [\'login_name\', \'user_id\']:\n+            if k in ["login_name", "user_id"]:\n                 continue\n \n             # skip fields that are handled exclusively on user registration and\n@@ -542,27 +535,29 @@ def applyProperties(self, userid, data):\n \n \n class RegistrationForm(BaseRegistrationForm):\n-    """Dynamically get fields from user data, through admin config settings.\n-    """\n-    label = _(u\'heading_registration_form\', default=u\'Registration form\')\n-    description = u""\n-    template = ViewPageTemplateFile(\'register_form.pt\')\n+    """Dynamically get fields from user data, through admin config settings."""\n+\n+    label = _("heading_registration_form", default="Registration form")\n+    description = ""\n+    template = ViewPageTemplateFile("register_form.pt")\n \n     @property\n     def showForm(self):\n         """The form should not be displayed to the user if the system is\n-           incapable of sending emails and email validation is switched on\n-           (users are not allowed to select their own passwords).\n+        incapable of sending emails and email validation is switched on\n+        (users are not allowed to select their own passwords).\n         """\n         portal = getUtility(ISiteRoot)\n-        ctrlOverview = getMultiAdapter((portal, self.request),\n-                                       name=\'overview-controlpanel\')\n+        ctrlOverview = getMultiAdapter(\n+            (portal, self.request), name="overview-controlpanel"\n+        )\n \n         settings = self._get_security_settings()\n         # hide form if mailhost_warning == True and\n         # enable_user_pwd_choice == False\n-        return not (ctrlOverview.mailhost_warning() and\n-                    not settings.enable_user_pwd_choice)\n+        return not (\n+            ctrlOverview.mailhost_warning() and not settings.enable_user_pwd_choice\n+        )\n \n     def updateFields(self):\n         if not self.showForm:\n@@ -570,20 +565,20 @@ def updateFields(self):\n             # will never get displayed.\n             return\n \n-        super(RegistrationForm, self).updateFields()\n+        super().updateFields()\n         defaultFields = field.Fields(self.fields)\n \n         # Can the user actually set his/her own password?\n         settings = self._get_security_settings()\n         if not settings.enable_user_pwd_choice:\n             # No? Remove the password fields.\n-            defaultFields = defaultFields.omit(\'password\', \'password_ctl\')\n+            defaultFields = defaultFields.omit("password", "password_ctl")\n         else:\n             # The portal is not interested in validating emails, and\n             # the user is not interested in getting an email with a\n             # link to set his password if he can set this password in\n             # the current form already.\n-            defaultFields = defaultFields.omit(\'mail_me\')\n+            defaultFields = defaultFields.omit("mail_me")\n \n         self.fields = defaultFields\n \n@@ -593,87 +588,88 @@ def updateWidgets(self):\n             # will never get displayed.\n             return\n \n-        super(RegistrationForm, self).updateWidgets()\n+        super().updateWidgets()\n         settings = self._get_security_settings()\n         if not settings.enable_user_pwd_choice:\n             # Show a message indicating that a password reset link\n             # will be mailed to the user.\n-            widget = self.widgets[\'mail_me\']\n+            widget = self.widgets["mail_me"]\n             widget.mode = DISPLAY_MODE\n-            widget.value = [\'selected\']\n+            widget.value = ["selected"]\n             widget.label = _(\n-                u\'label_password_change_mail\',\n-                default=u"A URL will be generated and e-mailed to you; "\n-                        u"follow the link to reach a page where you can "\n-                        u"change your password and complete the registration "\n-                        u"process.")\n+                "label_password_change_mail",\n+                default="A URL will be generated and e-mailed to you; "\n+                "follow the link to reach a page where you can "\n+                "change your password and complete the registration "\n+                "process.",\n+            )\n             widget.terms = None\n             widget.updateTerms()\n \n \n class AddUserForm(BaseRegistrationForm):\n-    label = _(u\'heading_add_user_form\', default=u\'Add New User\')\n-    description = u""\n-    template = ViewPageTemplateFile(\'newuser_form.pt\')\n+    label = _("heading_add_user_form", default="Add New User")\n+    description = ""\n+    template = ViewPageTemplateFile("newuser_form.pt")\n \n     def updateFields(self):\n-        super(AddUserForm, self).updateFields()\n+        super().updateFields()\n         defaultFields = field.Fields(self.fields)\n \n         # The mail_me field needs special handling depending on the\n         # enable_user_pwd_choice setting and on the correctness of the mail\n         # settings.\n         portal = getUtility(ISiteRoot)\n-        ctrlOverview = getMultiAdapter((portal, self.request),\n-                                       name=\'overview-controlpanel\')\n+        ctrlOverview = getMultiAdapter(\n+            (portal, self.request), name="overview-controlpanel"\n+        )\n         mail_settings_correct = not ctrlOverview.mailhost_warning()\n         if mail_settings_correct:\n             # Make the password fields optional: either specify a\n             # password or mail the user (or both).  The validation\n             # will check that at least one of the options is chosen.\n-            defaultFields[\'password\'].field.required = False\n-            defaultFields[\'password_ctl\'].field.required = False\n+            defaultFields["password"].field.required = False\n+            defaultFields["password_ctl"].field.required = False\n             settings = self._get_security_settings()\n-            defaultFields[\'mail_me\'].field.default =\\\n-                not settings.enable_user_pwd_choice\n+            defaultFields["mail_me"].field.default = not settings.enable_user_pwd_choice\n \n         # Append the manager-focused fields\n         registry = getUtility(IRegistry)\n-        user_group_settings = registry.forInterface(IUserGroupsSettingsSchema, prefix="plone")\n+        user_group_settings = registry.forInterface(\n+            IUserGroupsSettingsSchema, prefix="plone"\n+        )\n         many_groups = user_group_settings.many_groups\n         if not many_groups:\n             allFields = defaultFields + field.Fields(IAddUserSchema)\n-            allFields[\'groups\'].widgetFactory = CheckBoxFieldWidget\n+            allFields["groups"].widgetFactory = CheckBoxFieldWidget\n         else:\n             allFields = defaultFields\n         self.fields = allFields\n \n     def updateWidgets(self):\n-        super(AddUserForm, self).updateWidgets()\n+        super().updateWidgets()\n \n         # set display mode for mail_me field if no mailhost is configured\n         portal = getUtility(ISiteRoot)\n         ctrlOverview = getMultiAdapter(\n-            (portal, self.request), name=\'overview-controlpanel\'\n+            (portal, self.request), name="overview-controlpanel"\n         )\n         mail_settings_correct = not ctrlOverview.mailhost_warning()\n         if not mail_settings_correct:\n-            widget = self.widgets[\'mail_me\']\n+            widget = self.widgets["mail_me"]\n             widget.mode = DISPLAY_MODE\n-            widget.value = [\'selected\']\n+            widget.value = ["selected"]\n             widget.label = _(\n-                u\'label_cant_mail_password_reset\',\n-                default=u"Normally we would offer to send the user an email "\n-                        u"with instructions to set a password on completion "\n-                        u"of this form. But this site does not have a valid "\n-                        u"email setup. You can fix this in the Mail settings."\n+                "label_cant_mail_password_reset",\n+                default="Normally we would offer to send the user an email "\n+                "with instructions to set a password on completion "\n+                "of this form. But this site does not have a valid "\n+                "email setup. You can fix this in the Mail settings.",\n             )\n             widget.terms = None\n             widget.updateTerms()\n \n-    @button.buttonAndHandler(\n-        _(u\'label_register\', default=u\'Register\'), name=\'register\'\n-    )\n+    @button.buttonAndHandler(_("label_register", default="Register"), name="register")\n     def action_join(self, action):\n         data, errors = self.extractData()\n \n@@ -689,27 +685,27 @@ def action_join(self, action):\n         if not self._finishedRegister:\n             return\n \n-        portal_groups = getToolByName(self.context, \'portal_groups\')\n-        user_id = data[\'user_id\']\n+        portal_groups = getToolByName(self.context, "portal_groups")\n+        user_id = data["user_id"]\n         is_zope_manager = getSecurityManager().checkPermission(\n             ManagePortal,\n             self.context,\n         )\n         try:\n             # Add user to the selected group(s)\n-            if data.get(\'groups\', None) is not None:\n-                for groupname in data[\'groups\']:\n+            if data.get("groups", None) is not None:\n+                for groupname in data["groups"]:\n                     group = portal_groups.getGroupById(groupname)\n-                    if \'Manager\' in group.getRoles() and not is_zope_manager:\n+                    if "Manager" in group.getRoles() and not is_zope_manager:\n                         raise Forbidden\n-                    portal_groups.addPrincipalToGroup(user_id, groupname,\n-                                                      self.request)\n+                    portal_groups.addPrincipalToGroup(user_id, groupname, self.request)\n         except (AttributeError, ValueError) as err:\n             IStatusMessage(self.request).addStatusMessage(err, type="error")\n             return\n \n-        IStatusMessage(self.request).addStatusMessage(\n-            _(u"User added."), type=\'info\')\n+        IStatusMessage(self.request).addStatusMessage(_("User added."), type="info")\n         self.request.response.redirect(\n-            self.context.absolute_url() +\n-            \'/@@usergroup-userprefs?searchstring=\' + user_id)\n+            self.context.absolute_url()\n+            + "/@@usergroup-userprefs?searchstring="\n+            + user_id\n+        )\ndiff --git a/plone/app/users/browser/register_form.pt b/plone/app/users/browser/register_form.pt\nindex fd33f5d9..384761c4 100644\n--- a/plone/app/users/browser/register_form.pt\n+++ b/plone/app/users/browser/register_form.pt\n@@ -1,49 +1,61 @@\n <html xmlns="http://www.w3.org/1999/xhtml"\n+      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-\n-<body>\n-  <metal:main fill-slot="main">\n-  <metal:main-macro define-macro="main">\n-\n-    <article id="content" class="login-wrapper">\n-\n-    <div class="card">\n-        <div class="card-body">\n-\n-          <tal:mailhost tal:condition="view/showForm">\n-            <h1 class="card-title h5"\n-                tal:content="view/label | nothing" />\n-            <metal:block use-macro="context/@@ploneform-macros/titlelessform">\n-              <metal:bottom fill-slot="formbottom">\n-              <input tal:define="came_from request/form/came_from|nothing"\n-                  tal:condition="came_from"\n-                  type="hidden"\n-                  name="came_from"\n-                  tal:attributes="value came_from" />\n-              </metal:bottom>\n-            </metal:block>\n-          </tal:mailhost>\n-\n-          <tal:nomailhost tal:condition="not:view/showForm">\n-            <h1 class="card-title h5"\n-                i18n:translate=""\n-                tal:content="view/label" />\n-            <div class="documentDescription" i18n:translate="">\n+      i18n:domain="plone"\n+>\n+\n+  <body>\n+    <metal:main fill-slot="main">\n+      <metal:main-macro define-macro="main">\n+\n+        <article class="login-wrapper"\n+                 id="content"\n+        >\n+\n+          <div class="card">\n+            <div class="card-body">\n+\n+              <tal:mailhost tal:condition="view/showForm">\n+                <h1 class="card-title h5"\n+                    tal:content="view/label | nothing"\n+                ></h1>\n+                <metal:block use-macro="context/@@ploneform-macros/titlelessform">\n+                  <metal:bottom fill-slot="formbottom">\n+                    <input name="came_from"\n+                           type="hidden"\n+                           tal:define="\n+                             came_from request/form/came_from|nothing;\n+                           "\n+                           tal:condition="came_from"\n+                           tal:attributes="\n+                             value came_from;\n+                           "\n+                    />\n+                  </metal:bottom>\n+                </metal:block>\n+              </tal:mailhost>\n+\n+              <tal:nomailhost tal:condition="not:view/showForm">\n+                <h1 class="card-title h5"\n+                    tal:content="view/label"\n+                    i18n:translate=""\n+                ></h1>\n+                <div class="documentDescription"\n+                     i18n:translate=""\n+                >\n                 This site doesn\'t have a valid email setup, so you\n                 cannot register at this time.\n-            </div>\n-          </tal:nomailhost>\n+                </div>\n+              </tal:nomailhost>\n \n-        </div>\n-      </div>\n+            </div>\n+          </div>\n \n-    </article>\n+        </article>\n \n-  </metal:main-macro>\n-  </metal:main>\n-</body>\n+      </metal:main-macro>\n+    </metal:main>\n+  </body>\n </html>\ndiff --git a/plone/app/users/browser/registered.pt b/plone/app/users/browser/registered.pt\nindex 5402784c..f2b63f7c 100644\n--- a/plone/app/users/browser/registered.pt\n+++ b/plone/app/users/browser/registered.pt\n@@ -1,103 +1,157 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-<body>\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n+  <body>\n \n \n-<metal:main fill-slot="main"\n-     tal:define="auth nocall:context/acl_users/credentials_cookie_auth|nothing">\n+    <metal:main fill-slot="main"\n+                tal:define="\n+                  auth nocall:context/acl_users/credentials_cookie_auth|nothing;\n+                "\n+    >\n \n-    <div id="content-core" tal:condition="python: not auth" i18n:translate="registered_disabled">\n+      <div id="content-core"\n+           tal:condition="python: not auth"\n+           i18n:translate="registered_disabled"\n+      >\n            Cookie authentication has been disabled.\n-    </div>\n+      </div>\n \n-    <div tal:define="enable_user_pwd_choice python:context.portal_registry[\'plone.enable_user_pwd_choice\']"\n-         tal:omit-tag=""\n-         tal:condition="python: auth">\n+      <div tal:define="\n+             enable_user_pwd_choice python:context.portal_registry[\'plone.enable_user_pwd_choice\'];\n+           "\n+           tal:condition="python: auth"\n+           tal:omit-tag=""\n+      >\n \n         <h1 class="documentFirstHeading"\n-            i18n:translate="heading_welcome">\n+            i18n:translate="heading_welcome"\n+        >\n             Welcome!\n         </h1>\n \n-        <div class="documentDescription" i18n:translate="description_you_are_registered">\n+        <div class="documentDescription"\n+             i18n:translate="description_you_are_registered"\n+        >\n             You have been registered.\n         </div>\n \n         <div id="content-core">\n-            <p tal:condition="not: enable_user_pwd_choice"\n-               i18n:translate="description_password_reset_or_registered">\n+          <p tal:condition="not: enable_user_pwd_choice"\n+             i18n:translate="description_password_reset_or_registered"\n+          >\n                 You will receive an e-mail shortly containing a URL that will allow you to\n                 set your password. When you receive this e-mail, please follow the link to\n                 complete your registration process. NOTE: The password reset URL will expire\n-                on <span tal:replace="view/expire_date" i18n:name="time"/>. If your\n+                on\n+            <span tal:replace="view/expire_date"\n+                  i18n:name="time"\n+            ></span>. If your\n                 password reset request expires, you may use the "Forgot your password" link\n                 to generate another password reset request.\n-            </p>\n+          </p>\n \n-            <tal:block condition="enable_user_pwd_choice">\n-                <p i18n:translate="description_you_can_log_on_now">\n+          <tal:block condition="enable_user_pwd_choice">\n+            <p i18n:translate="description_you_can_log_on_now">\n                     Click the button to log in immediately.\n-                </p>\n+            </p>\n \n-                <div class="portalMessage error pat-cookietrigger" style="display:none">\n-                    <strong i18n:translate="">\n+            <div class="portalMessage error pat-cookietrigger"\n+                 style="display:none"\n+            >\n+              <strong i18n:translate="">\n                         Error\n-                    </strong>\n-                    <span tal:omit-tag=""\n-                        i18n:translate="enable_cookies_message_before_login">\n+              </strong>\n+              <span tal:omit-tag=""\n+                    i18n:translate="enable_cookies_message_before_login"\n+              >\n                         Cookies are not enabled. You must enable cookies before you can log in.\n-                    </span>\n-                </div>\n+              </span>\n+            </div>\n \n \n-                <form action=""\n-                      method="post"\n-                      tal:define="form request/form;\n-                                  username python: form.get(\'form.widgets.username\') or form.get(\'form.username\');\n-                                  password python: form.get(\'form.widgets.password\') or form.get(\'form.password\');\n-                                  ac_name auth/name_cookie|string:__ac_name;\n-                                  ac_password auth/pw_cookie|string:__ac_password;\n-                                  portal_url context/portal_url;"\n-                      tal:attributes="action python:\'%s/login_form\' % portal_url">\n+            <form action=""\n+                  method="post"\n+                  tal:define="\n+                    form request/form;\n+                    username python: form.get(\'form.widgets.username\') or form.get(\'form.username\');\n+                    password python: form.get(\'form.widgets.password\') or form.get(\'form.password\');\n+                    ac_name auth/name_cookie|string:__ac_name;\n+                    ac_password auth/pw_cookie|string:__ac_password;\n+                    portal_url context/portal_url;\n+                  "\n+                  tal:attributes="\n+                    action python:\'%s/login_form\' % portal_url;\n+                  "\n+            >\n \n-                     <input type="hidden" name="form.submitted" value="1" />\n-                     <input type="hidden" name="js_enabled" id="js_enabled" value="0" />\n-                     <input type="hidden" name="cookies_enabled" id="cookies_enabled" value="0" />\n-                     <input type="hidden" name="login_name" id="login_name" value="" />\n-                     <input type="hidden" name="pwd_empty" id="pwd_empty" value="0" />\n+              <input name="form.submitted"\n+                     type="hidden"\n+                     value="1"\n+              />\n+              <input id="js_enabled"\n+                     name="js_enabled"\n+                     type="hidden"\n+                     value="0"\n+              />\n+              <input id="cookies_enabled"\n+                     name="cookies_enabled"\n+                     type="hidden"\n+                     value="0"\n+              />\n+              <input id="login_name"\n+                     name="login_name"\n+                     type="hidden"\n+                     value=""\n+              />\n+              <input id="pwd_empty"\n+                     name="pwd_empty"\n+                     type="hidden"\n+                     value="0"\n+              />\n \n-                    <input type="hidden"\n-                           name="came_from"\n-                           value=""\n-                           tal:attributes="value request/came_from|nothing;" />\n-                    <input type="hidden"\n-                           name="ac_name"\n-                           value=""\n-                           tal:attributes="id ac_name;\n-                                           name ac_name;\n-                                           value username;" />\n-                    <input type="hidden"\n-                           name="ac_password"\n-                           value=""\n-                           tal:attributes="name ac_password;\n-                                           id ac_password;\n-                                           value password;" />\n-                    <input class="btn btn-secondary"\n-                           type="submit"\n-                           value="Log in"\n-                           name="buttons.login"\n-                           i18n:attributes="value label_log_in;"\n-                           />\n-                </form>\n-            </tal:block>\n+              <input name="came_from"\n+                     type="hidden"\n+                     value=""\n+                     tal:attributes="\n+                       value request/came_from|nothing;\n+                     "\n+              />\n+              <input name="ac_name"\n+                     type="hidden"\n+                     value=""\n+                     tal:attributes="\n+                       id ac_name;\n+                       name ac_name;\n+                       value username;\n+                     "\n+              />\n+              <input name="ac_password"\n+                     type="hidden"\n+                     value=""\n+                     tal:attributes="\n+                       name ac_password;\n+                       id ac_password;\n+                       value password;\n+                     "\n+              />\n+              <input class="btn btn-secondary"\n+                     name="buttons.login"\n+                     type="submit"\n+                     value="Log in"\n+                     i18n:attributes="value label_log_in;"\n+              />\n+            </form>\n+          </tal:block>\n         </div>\n \n-    </div>\n+      </div>\n \n-</metal:main>\n-</body>\n+    </metal:main>\n+  </body>\n </html>\ndiff --git a/plone/app/users/browser/registered.py b/plone/app/users/browser/registered.py\nindex f4ca723f..bfc5c8b2 100644\n--- a/plone/app/users/browser/registered.py\n+++ b/plone/app/users/browser/registered.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n from Products.Five import BrowserView\n from zope.component import getMultiAdapter\n@@ -7,10 +6,9 @@\n \n \n class RegisteredView(BrowserView):\n-\n     def expire_date(self):\n-        ppr = getToolByName(self.context, \'portal_password_reset\')\n+        ppr = getToolByName(self.context, "portal_password_reset")\n         expire_length = datetime.timedelta(days=ppr.getExpirationTimeout())\n         expiration_date = datetime.datetime.now() + expire_length\n-        ploneview = getMultiAdapter((self.context, self.request), name=\'plone\')\n+        ploneview = getMultiAdapter((self.context, self.request), name="plone")\n         return ploneview.toLocalizedTime(expiration_date, long_format=1)\ndiff --git a/plone/app/users/browser/registersettingspanel.py b/plone/app/users/browser/registersettingspanel.py\nindex ab80eeec..6aac69a7 100644\n--- a/plone/app/users/browser/registersettingspanel.py\n+++ b/plone/app/users/browser/registersettingspanel.py\n@@ -1,8 +1,7 @@\n-# -*- coding: utf-8 -*-\n from plone.app.users.schema import IRegistrationSettingsSchema\n+from plone.base import PloneMessageFactory as _\n from plone.protect import CheckAuthenticator\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n from z3c.form import button\n@@ -13,24 +12,26 @@\n \n class RegistrationControlPanel(form.Form):\n     label = _("Users and Groups")\n-    description = _(u"Registration settings for this site.")\n-    form_name = _(u"Registration settings")\n+    description = _("Registration settings for this site.")\n+    form_name = _("Registration settings")\n     enableCSRFProtection = True\n \n-    formErrorsMessage = _(\'There were errors.\')\n-    template = ViewPageTemplateFile(\'memberregistration.pt\')\n+    formErrorsMessage = _("There were errors.")\n+    template = ViewPageTemplateFile("memberregistration.pt")\n \n     fields = field.Fields(IRegistrationSettingsSchema)\n-    fields[\'user_registration_fields\'].widgetFactory = OrderedSelectFieldWidget\n+    fields["user_registration_fields"].widgetFactory = OrderedSelectFieldWidget\n \n     def getContent(self):\n         props = self.props()\n-        return {\'user_registration_fields\': props.getProperty(\n-            \'user_registration_fields\', [])}\n+        return {\n+            "user_registration_fields": props.getProperty(\n+                "user_registration_fields", []\n+            )\n+        }\n \n     @button.buttonAndHandler(\n-        _(u\'label_apply_changes\', default=u\'Apply changes\'),\n-        name=\'save\'\n+        _("label_apply_changes", default="Apply changes"), name="save"\n     )\n     def action_save(self, action):\n         # CSRF protection\n@@ -39,16 +40,18 @@ def action_save(self, action):\n         data, errors = self.extractData()\n         if errors:\n             IStatusMessage(self.request).addStatusMessage(\n-                self.formErrorsMessage, type=\'error\')\n+                self.formErrorsMessage, type="error"\n+            )\n             return\n \n         # save property\n-        if data[\'user_registration_fields\'] != \\\n-                self.getContent()[\'user_registration_fields\']:\n+        if (\n+            data["user_registration_fields"]\n+            != self.getContent()["user_registration_fields"]\n+        ):\n             props = self.props()\n             props._updateProperty(\n-                \'user_registration_fields\',\n-                data[\'user_registration_fields\']\n+                "user_registration_fields", data["user_registration_fields"]\n             )\n             msg = _("Changes saved.")\n         else:\n@@ -69,10 +72,10 @@ def action_save(self, action):\n     #     self.request.response.redirect(url + \'/@@overview-controlpanel\')\n \n     def updateActions(self):\n-        super(RegistrationControlPanel, self).updateActions()\n-        if self.actions and \'save\' in self.actions:\n-            self.actions[\'save\'].addclass(\'btn btn-primary\')\n+        super().updateActions()\n+        if self.actions and "save" in self.actions:\n+            self.actions["save"].addclass("btn btn-primary")\n \n     def props(self):\n-        pprop = getToolByName(self.context, \'portal_properties\')\n+        pprop = getToolByName(self.context, "portal_properties")\n         return pprop.site_properties\ndiff --git a/plone/app/users/browser/schema_layout.pt b/plone/app/users/browser/schema_layout.pt\nindex 65475658..9c233efe 100644\n--- a/plone/app/users/browser/schema_layout.pt\n+++ b/plone/app/users/browser/schema_layout.pt\n@@ -1,54 +1,69 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       lang="en"\n       metal:use-macro="here/prefs_main_template/macros/master"\n-      i18n:domain="plone">\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n \n-<body>\n+  <body>\n \n-<div metal:fill-slot="prefs_configlet_main">\n+    <div metal:fill-slot="prefs_configlet_main">\n \n-  <a id="setup-link" class="link-parent"\n-     tal:attributes="href string:$portal_url/@@overview-controlpanel"\n-     i18n:translate="">\n+      <a class="link-parent"\n+         id="setup-link"\n+         tal:attributes="\n+           href string:$portal_url/@@overview-controlpanel;\n+         "\n+         i18n:translate=""\n+      >\n       Site Setup\n-  </a>\n+      </a>\n \n-  <h1 class="documentFirstHeading" i18n:translate="">Edit Member Form Fields</h1>\n+      <h1 class="documentFirstHeading"\n+          i18n:translate=""\n+      >Edit Member Form Fields</h1>\n \n-  <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n+      <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n     Portal status message\n-  </div>\n+      </div>\n \n-  <div id="content-core">\n+      <div id="content-core">\n \n         <ul class="nav nav-tabs">\n-            <li class="nav-item">\n-              <a class="nav-link"\n-                href="${portal_url}/@@usergroup-userprefs"\n-                i18n:translate="label_users">Users</a>\n-            </li>\n-            <li class="nav-item">\n-              <a href="${portal_url}/@@usergroup-groupprefs" class="nav-link"\n-                i18n:translate="label_groups">Groups</a>\n-            </li>\n-            <li class="nav-item">\n-              <a href="${portal_url}/@@usergroup-controlpanel" class="nav-link"\n-                i18n:translate="label_usergroup_settings">Settings</a>\n-            </li>\n-            <li class="nav-item">\n-              <a href="${portal_url}/@@member-fields" class="nav-link active"\n-                i18n:translate="label_member_fields">Member fields</a>\n-            </li>\n+          <li class="nav-item">\n+            <a class="nav-link"\n+               href="${portal_url}/@@usergroup-userprefs"\n+               i18n:translate="label_users"\n+            >Users</a>\n+          </li>\n+          <li class="nav-item">\n+            <a class="nav-link"\n+               href="${portal_url}/@@usergroup-groupprefs"\n+               i18n:translate="label_groups"\n+            >Groups</a>\n+          </li>\n+          <li class="nav-item">\n+            <a class="nav-link"\n+               href="${portal_url}/@@usergroup-controlpanel"\n+               i18n:translate="label_usergroup_settings"\n+            >Settings</a>\n+          </li>\n+          <li class="nav-item">\n+            <a class="nav-link active"\n+               href="${portal_url}/@@member-fields"\n+               i18n:translate="label_member_fields"\n+            >Member fields</a>\n+          </li>\n         </ul>\n \n-      <tal:block tal:replace="structure view/contents|view/render"/>\n+        <tal:block tal:replace="structure view/contents|view/render" />\n \n-  </div>\n+      </div>\n \n-</div>\n+    </div>\n \n-</body>\n+  </body>\n </html>\ndiff --git a/plone/app/users/browser/schemaeditor.py b/plone/app/users/browser/schemaeditor.py\nindex 5c7e304e..9501acfc 100644\n--- a/plone/app/users/browser/schemaeditor.py\n+++ b/plone/app/users/browser/schemaeditor.py\n@@ -1,8 +1,9 @@\n-# -*- coding: utf-8 -*-\n from plone.app.users.schema import IRegisterSchema\n from plone.app.users.schema import IUserDataSchema\n from plone.app.users.schema import SCHEMA_ANNOTATION\n from plone.app.users.schema import SCHEMATA_KEY\n+from plone.base import PloneMessageFactory as _\n+from plone.base.interfaces import IPloneSiteRoot\n from plone.schemaeditor.browser.schema.listing import SchemaListing\n from plone.schemaeditor.browser.schema.traversal import SchemaContext\n from plone.supermodel import loadString\n@@ -14,8 +15,6 @@\n from plone.supermodel.utils import ns\n from plone.z3cform.layout import FormWrapper\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n-from Products.CMFPlone.interfaces import IPloneSiteRoot\n from Products.CMFPlone.utils import get_portal\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zope.annotation.interfaces import IAnnotations\n@@ -28,52 +27,50 @@\n import re\n \n \n-USERS_NAMESPACE = \'http://namespaces.plone.org/supermodel/users\'\n-USERS_PREFIX = \'users\'\n-SPLITTER = \'_//_\'\n+USERS_NAMESPACE = "http://namespaces.plone.org/supermodel/users"\n+USERS_PREFIX = "users"\n+SPLITTER = "_//_"\n \n ALLOWED_FIELDS = [\n-    u\'zope.schema._bootstrapfields.TextLine\',\n-    u\'zope.schema._bootstrapfields.Text\',\n-    u\'zope.schema._bootstrapfields.Bool\',\n-    u\'zope.schema._bootstrapfields.Int\',\n-    u\'zope.schema._field.Float\',\n-    u\'zope.schema._field.Set\',\n-    u\'zope.schema._field.Choice\',\n-    u\'zope.schema._field.Date\',\n-    u\'zope.schema._field.Datetime\',\n-    u\'plone.namedfile.field.NamedBlobImage\',\n-    u\'zope.schema._field.URI\',\n+    "zope.schema._bootstrapfields.TextLine",\n+    "zope.schema._bootstrapfields.Text",\n+    "zope.schema._bootstrapfields.Bool",\n+    "zope.schema._bootstrapfields.Int",\n+    "zope.schema._field.Float",\n+    "zope.schema._field.Set",\n+    "zope.schema._field.Choice",\n+    "zope.schema._field.Date",\n+    "zope.schema._field.Datetime",\n+    "plone.namedfile.field.NamedBlobImage",\n+    "zope.schema._field.URI",\n ]\n field_type_mapping = {\n-    "ProtectedEmail": \'string\',\n-    "ProtectedTextLine": \'string\',\n-    "TextLine": \'string\',\n-    "Text": \'text\',\n-    "Bool": \'boolean\',\n-    "Int": \'int\',\n-    "Float": \'float\',\n-    "Set": \'lines\',\n-    "Choice": \'string\',\n-    "Date": \'date\',\n-    "Datetime": \'date\',\n-    "NamedBlobImage": \'__portrait__\',\n-    "URI": \'text\',\n+    "ProtectedEmail": "string",\n+    "ProtectedTextLine": "string",\n+    "TextLine": "string",\n+    "Text": "text",\n+    "Bool": "boolean",\n+    "Int": "int",\n+    "Float": "float",\n+    "Set": "lines",\n+    "Choice": "string",\n+    "Date": "date",\n+    "Datetime": "date",\n+    "NamedBlobImage": "__portrait__",\n+    "URI": "text",\n }\n \n DEFAULT_VALUES = {\n-    \'text\': \'\',\n-    \'int\': 0,\n-    \'float\': 0.0,\n-    \'boolean\': False,\n+    "text": "",\n+    "int": 0,\n+    "float": 0.0,\n+    "boolean": False,\n }\n \n re_flags = re.S | re.U | re.X\n \n \n-def log(message,\n-        level=\'info\',\n-        id=\'plone.app.users.browser.schemaeditor\'):\n+def log(message, level="info", id="plone.app.users.browser.schemaeditor"):\n     logger = logging.getLogger(id)\n     getattr(logger, level)(message)\n \n@@ -87,28 +84,26 @@ class IMemberSchemaContext(Interface):\n \n \n class SchemaListingPage(FormWrapper):\n-\n     form = SchemaListing\n-    index = ViewPageTemplateFile(\'schema_layout.pt\')\n+    index = ViewPageTemplateFile("schema_layout.pt")\n \n \n @implementer(IMemberSchemaContext)\n class MemberSchemaContext(SchemaContext):\n-\n-    label = _(u"Edit Member Form Fields")\n+    label = _("Edit Member Form Fields")\n \n     def __init__(self, context, request):\n-        self.fieldsWhichCannotBeDeleted = [\'fullname\', \'email\']\n+        self.fieldsWhichCannotBeDeleted = ["fullname", "email"]\n         self.showSaveDefaults = False\n         self.enableFieldsets = False\n         self.allowedFields = ALLOWED_FIELDS\n \n         schema = getFromBaseSchema(IUserDataSchema)\n-        super(MemberSchemaContext, self).__init__(\n+        super().__init__(\n             schema,\n             request,\n             name=SCHEMATA_KEY,\n-            title=_(u"Member Fields"),\n+            title=_("Member Fields"),\n         )\n \n \n@@ -124,9 +119,8 @@ def applySchema(snew_schema):\n     old_schema = get_ttw_edited_schema()\n \n     # check if more than 2 image fields:\n-    if snew_schema.count(\'NamedBlobImage\') > 1:\n-        site.plone_utils.addPortalMessage(\n-            _(u\'One image field maximum.\'), \'error\')\n+    if snew_schema.count("NamedBlobImage") > 1:\n+        site.plone_utils.addPortalMessage(_("One image field maximum."), "error")\n         return\n \n     # store the current schema in the annotation\n@@ -140,31 +134,32 @@ def applySchema(snew_schema):\n     existing = pm.propertyIds()\n     for field_id in [a for a in new_schema]:\n         field_type = field_type_mapping.get(\n-            new_schema[field_id].__class__.__name__,\n-            None)\n+            new_schema[field_id].__class__.__name__, None\n+        )\n         if not field_type:\n-            log(\'Unsupported field: %s (%s)\' % (\n-                field_id,\n-                new_schema[field_id].__class__.__name__))\n+            log(\n+                "Unsupported field: {} ({})".format(\n+                    field_id, new_schema[field_id].__class__.__name__\n+                )\n+            )\n             continue\n-        if field_type == \'__portrait__\':\n+        if field_type == "__portrait__":\n             continue\n         if field_id in existing:\n             pm._delProperty(field_id)\n-        pm._setProperty(\n-            field_id,\n-            DEFAULT_VALUES.get(field_type, \'\'),\n-            field_type)\n+        pm._setProperty(field_id, DEFAULT_VALUES.get(field_type, ""), field_type)\n \n     if old_schema:\n-        to_remove = [field_id\n-                     for field_id in [a for a in old_schema]\n-                     if field_id not in [a for a in new_schema]]\n+        to_remove = [\n+            field_id\n+            for field_id in [a for a in old_schema]\n+            if field_id not in [a for a in new_schema]\n+        ]\n         for field_id in to_remove:\n             field_type = field_type_mapping.get(\n-                old_schema[field_id].__class__.__name__,\n-                None)\n-            if field_type == \'__portrait__\':\n+                old_schema[field_id].__class__.__name__, None\n+            )\n+            if field_type == "__portrait__":\n                 continue\n             pm._delProperty(field_id)\n \n@@ -176,27 +171,29 @@ def get_ttw_edited_schema():\n     if data:\n         ttwschema = load_ttw_schema(data)\n         if ttwschema is None:\n-            return \'\'\n+            return ""\n         return ttwschema\n-    return \'\'\n+    return ""\n \n \n @implementer(IFieldMetadataHandler)\n-class UsersMetadataSchemaExporter(object):\n-    """Support the security: namespace in model definitions.\n-    """\n+class UsersMetadataSchemaExporter:\n+    """Support the security: namespace in model definitions."""\n+\n     namespace = ns = USERS_NAMESPACE\n     prefix = USERS_PREFIX\n     if_attrs = (\n-        \'min\', \'max\', \'order\',\n-        \'min_length\', \'max_length\',\n-        \'required\',\n+        "min",\n+        "max",\n+        "order",\n+        "min_length",\n+        "max_length",\n+        "required",\n     )\n \n     def read(self, fieldNode, schema, field):\n         for attr in self.if_attrs:\n-            value = self.load(\n-                fieldNode.get(ns(attr, self.ns), None))\n+            value = self.load(fieldNode.get(ns(attr, self.ns), None))\n             if value is not None:\n                 setattr(field, attr, value)\n \n@@ -208,38 +205,38 @@ def write(self, fieldNode, schema, field):\n                 fieldNode.set(ns(attr, self.ns), v)\n \n     def load(self, value):\n-        listre = re.compile(\'(?P<type>list|set|tuple)\'\n-                            \':(?P<list>.*)\', re_flags)\n+        listre = re.compile("(?P<type>list|set|tuple)" ":(?P<list>.*)", re_flags)\n         ltypes = {\n-            \'list\': list,\n-            \'set\': set,\n-            \'tuple\': tuple,\n+            "list": list,\n+            "set": set,\n+            "tuple": tuple,\n         }\n-        if isinstance(value, basestring):\n+        if isinstance(value, str):\n             listm = listre.search(value)\n             if value.startswith("int:"):\n-                value = int(value.split(\'int:\')[1])\n+                value = int(value.split("int:")[1])\n             elif listm:\n                 i = listm.groupdict()\n                 try:\n                     tp = i["type"]\n                     value = i["list"].split(SPLITTER)\n-                    if tp not in [\'list\']:\n+                    if tp not in ["list"]:\n                         value = ltypes[tp](value)\n-                except:\n+                except Exception:\n                     value = []\n             else:\n-                value = {"bool:true": True,\n-                         "bool:false": False}.get(value.lower(), value)\n+                value = {"bool:true": True, "bool:false": False}.get(\n+                    value.lower(), value\n+                )\n         return value\n \n     def serialize(self, value):\n         if isinstance(value, bool):\n             value = value and "bool:true" or "bool:false"\n         elif isinstance(value, (list, set, tuple)):\n-            value = u"%s:%s" % (type(value).__name__, SPLITTER.join(value))\n+            value = f"{type(value).__name__}:{SPLITTER.join(value)}"\n         elif value is not None:\n-            value = u"int:%s" % unicode(value)\n+            value = f"int:{value}"\n         return value\n \n \n@@ -279,7 +276,7 @@ def get_schema(site=None):\n     if site is None:\n         site = get_portal()\n     annotations = IAnnotations(site)\n-    return annotations.get(SCHEMA_ANNOTATION, \'\')\n+    return annotations.get(SCHEMA_ANNOTATION, "")\n \n \n def set_schema(string, site=None):\n@@ -290,27 +287,20 @@ def set_schema(string, site=None):\n \n \n def invalidateSchemasInCache(portal):\n-\n     gsm = getGlobalSiteManager()\n \n-    schema = getattr(portal, \'_v_register_schema\', None)\n+    schema = getattr(portal, "_v_register_schema", None)\n     if schema is not None:\n         from .account import AccountPanelSchemaAdapter\n-        gsm.unregisterAdapter(\n-            AccountPanelSchemaAdapter,\n-            (IPloneSiteRoot,),\n-            schema\n-        )\n+\n+        gsm.unregisterAdapter(AccountPanelSchemaAdapter, (IPloneSiteRoot,), schema)\n     portal._v_register_schema = None\n \n-    schema = getattr(portal, \'_v_userdata_schema\', None)\n+    schema = getattr(portal, "_v_userdata_schema", None)\n     if schema is not None:\n         from .userdatapanel import UserDataPanelAdapter\n-        gsm.unregisterAdapter(\n-            UserDataPanelAdapter,\n-            (IPloneSiteRoot,),\n-            schema\n-        )\n+\n+        gsm.unregisterAdapter(UserDataPanelAdapter, (IPloneSiteRoot,), schema)\n     portal._v_userdata_schema = None\n \n     # kill volatile attributes in all threads\n@@ -322,19 +312,17 @@ def getFromBaseSchema(baseSchema, form_name=None):\n     ttwschema = get_ttw_edited_schema()\n     if ttwschema:\n         attrs.update(copySchemaAttrs(ttwschema, form_name))\n-    schema = SchemaClass(SCHEMATA_KEY,\n-                         bases=(baseSchema,),\n-                         attrs=attrs)\n+    schema = SchemaClass(SCHEMATA_KEY, bases=(baseSchema,), attrs=attrs)\n     finalizeSchemas(schema)\n     return schema\n \n \n def copySchemaAttrs(schema, form_name):\n-    return dict([\n-        (a, copy.deepcopy(schema[a]))\n+    return {\n+        a: copy.deepcopy(schema[a])\n         for a in schema\n         if field_in_form(schema[a], form_name)\n-    ])\n+    }\n \n \n default_fields = list(IUserDataSchema.names()) + list(IRegisterSchema.names())\n@@ -345,5 +333,5 @@ def field_in_form(field, form_name=None):\n         return True\n     if field.__name__ in default_fields:\n         return True\n-    forms_selection = getattr(field, \'forms_selection\', [])\n+    forms_selection = getattr(field, "forms_selection", [])\n     return form_name in forms_selection\ndiff --git a/plone/app/users/browser/userdatapanel.py b/plone/app/users/browser/userdatapanel.py\nindex aa762a3d..785876e5 100644\n--- a/plone/app/users/browser/userdatapanel.py\n+++ b/plone/app/users/browser/userdatapanel.py\n@@ -1,19 +1,19 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.SecurityManagement import getSecurityManager\n from plone.app.users.browser.account import AccountPanelForm\n from plone.app.users.browser.account import AccountPanelSchemaAdapter\n from plone.app.users.browser.account import getSchema\n from plone.app.users.schema import IUserDataSchema\n+from plone.base import PloneMessageFactory as _\n+from plone.base.interfaces import ISecuritySchema\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n-from plone.base.interfaces import ISecuritySchema\n from Products.CMFPlone.utils import get_portal\n from Products.CMFPlone.utils import set_own_login_name\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zExceptions import NotFound\n from zope.component import getUtility\n \n+\n try:\n     from html import escape\n except ImportError:\n@@ -21,45 +21,42 @@\n \n \n class UserDataPanelAdapter(AccountPanelSchemaAdapter):\n-    """One does not simply set portrait, email might be used to login with.\n-    """\n+    """One does not simply set portrait, email might be used to login with."""\n \n     @property\n     def schema(self):\n         # prevent infinite recursion when accessing the schema via bypassing\n         # __getattr__ of self\n         try:\n-            return object.__getattribute__(self, \'_schema\')\n+            return object.__getattribute__(self, "_schema")\n         except AttributeError:\n-            object.__setattr__(self, \'_schema\', getUserDataSchema())\n-        return object.__getattribute__(self, \'_schema\')\n+            object.__setattr__(self, "_schema", getUserDataSchema())\n+        return object.__getattribute__(self, "_schema")\n \n     @schema.setter\n     def schema(self, value):\n         self._schema = value\n \n     def get_email(self):\n-        return self._getProperty(\'email\')\n+        return self._getProperty("email")\n \n     def set_email(self, value):\n         registry = getUtility(IRegistry)\n-        security_settings = registry.forInterface(\n-            ISecuritySchema, prefix="plone")\n+        security_settings = registry.forInterface(ISecuritySchema, prefix="plone")\n         if security_settings.use_email_as_login:\n-            mt = getToolByName(self.context, \'portal_membership\')\n+            mt = getToolByName(self.context, "portal_membership")\n             if self.context.getId() == mt.getAuthenticatedMember().getId():\n                 set_own_login_name(self.context, value)\n             else:\n-                pas = getToolByName(self.context, \'acl_users\')\n+                pas = getToolByName(self.context, "acl_users")\n                 pas.updateLoginName(self.context.getId(), value)\n-        return self._setProperty(\'email\', value)\n+        return self._setProperty("email", value)\n \n     email = property(get_email, set_email)\n \n \n class UserDataPanel(AccountPanelForm):\n-\n-    form_name = _(u\'User Data Form\')\n+    form_name = _("User Data Form")\n     enableCSRFProtection = True\n \n     @property\n@@ -69,36 +66,36 @@ def schema(self):\n \n     @property\n     def description(self):\n-        userid = self.request.form.get(\'userid\')\n-        mt = getToolByName(self.context, \'portal_membership\')\n+        userid = self.request.form.get("userid")\n+        mt = getToolByName(self.context, "portal_membership")\n         if userid and (userid != mt.getAuthenticatedMember().getId()):\n             # editing someone else\'s profile\n             return _(\n-                u\'description_personal_information_form_otheruser\',\n-                default=\'Change personal information for $name\',\n-                mapping={\'name\': escape(userid)}\n+                "description_personal_information_form_otheruser",\n+                default="Change personal information for $name",\n+                mapping={"name": escape(userid)},\n             )\n         else:\n             # editing my own profile\n             return _(\n-                u\'description_personal_information_form\',\n-                default=\'Change your personal information\'\n+                "description_personal_information_form",\n+                default="Change your personal information",\n             )\n \n     def __call__(self):\n-        userid = self.request.form.get(\'userid\')\n+        userid = self.request.form.get("userid")\n         if userid:\n-            mt = getToolByName(self.context, \'portal_membership\')\n+            mt = getToolByName(self.context, "portal_membership")\n             if mt.getMemberById(userid) is None:\n-                raise NotFound(\'User does not exist.\')\n-        self.request.set(\'disable_border\', 1)\n-        return super(UserDataPanel, self).__call__()\n+                raise NotFound("User does not exist.")\n+        self.request.set("disable_border", 1)\n+        return super().__call__()\n \n \n def getUserDataSchema():\n     portal = get_portal()\n-    form_name = u\'In User Profile\'\n-    if getSecurityManager().checkPermission(\'Manage portal\', portal):\n+    form_name = "In User Profile"\n+    if getSecurityManager().checkPermission("Manage portal", portal):\n         form_name = None\n     schema = getSchema(IUserDataSchema, UserDataPanelAdapter, form_name=form_name)\n     return schema\n@@ -106,5 +103,6 @@ def getUserDataSchema():\n \n class UserDataConfiglet(UserDataPanel):\n     """Control panel version of the userdata panel"""\n-    template = ViewPageTemplateFile(\'account-configlet.pt\')\n+\n+    template = ViewPageTemplateFile("account-configlet.pt")\n     tab = "userdata"\ndiff --git a/plone/app/users/configure.zcml b/plone/app/users/configure.zcml\nindex 8846fce8..720ad296 100644\n--- a/plone/app/users/configure.zcml\n+++ b/plone/app/users/configure.zcml\n@@ -1,21 +1,25 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone.app.users">\n+    i18n_domain="plone.app.users"\n+    >\n \n   <include package="plone.supermodel" />\n   <include package="plone.autoform" />\n   <include package="plone.namedfile" />\n   <include package="plone.schema" />\n   <include package="plone.formwidget.namedfile" />\n-  <include package="Products.CMFCore" file="permissions.zcml" />\n+  <include\n+      package="Products.CMFCore"\n+      file="permissions.zcml"\n+      />\n   <include package=".browser" />\n \n \n   <!-- utilities -->\n   <utility\n-      name=\'plone.app.users.forms\'\n       factory=".field_extender.UserFormSelectionMetadata"\n+      name="plone.app.users.forms"\n       />\n \n   <utility\n@@ -24,77 +28,79 @@\n       />\n \n   <utility\n-      name="plone.app.users.group_ids"\n       provides="zope.schema.interfaces.IVocabularyFactory"\n+      name="plone.app.users.group_ids"\n       component=".vocabularies.GroupIdVocabularyFactory"\n       />\n \n   <utility\n-      name="plone.app.users.schema.ProtectedTextLine"\n       provides="plone.schemaeditor.interfaces.IFieldFactory"\n+      name="plone.app.users.schema.ProtectedTextLine"\n       component=".schema.FullnameFieldFactory"\n       />\n \n   <utility\n-      name="plone.app.users.schema.ProtectedEmail"\n       provides="plone.schemaeditor.interfaces.IFieldFactory"\n+      name="plone.app.users.schema.ProtectedEmail"\n       component=".schema.EmailFieldFactory"\n       />\n \n \n   <!-- adapters -->\n   <adapter\n-      for="zope.schema.interfaces.IField"\n-      provides=".field_extender.IUserFormSelection"\n       factory=".field_extender.UserFormSelectionAdapter"\n+      provides=".field_extender.IUserFormSelection"\n+      for="zope.schema.interfaces.IField"\n       />\n \n   <adapter\n-      name=\'plone.app.users.userformselection\'\n+      factory=".field_extender.get_user_form_selection"\n+      provides="plone.schemaeditor.interfaces.IFieldEditorExtender"\n       for=".browser.schemaeditor.IMemberSchemaContext\n            zope.schema.interfaces.IField"\n-      provides="plone.schemaeditor.interfaces.IFieldEditorExtender"\n-      factory=".field_extender.get_user_form_selection"\n+      name="plone.app.users.userformselection"\n       />\n \n   <adapter\n-      name=\'plone.app.users.useraddformselection\'\n-      for=".browser.schemaeditor.IMemberSchemaContext"\n-      provides="plone.schemaeditor.interfaces.IFieldEditorExtender"\n       factory=".field_extender.get_user_addform_selection"\n+      provides="plone.schemaeditor.interfaces.IFieldEditorExtender"\n+      for=".browser.schemaeditor.IMemberSchemaContext"\n+      name="plone.app.users.useraddformselection"\n       />\n \n \n   <!-- generic setup -->\n   <genericsetup:registerProfile\n-      name=\'default\'\n-      title=\'Import User Data\'\n-      directory=\'profiles/default\'\n-      description=\'Import default schema\'\n-      provides=\'Products.GenericSetup.interfaces.EXTENSION\'\n+      name="default"\n+      title="Import User Data"\n+      description="Import default schema"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/default"\n       />\n \n   <genericsetup:exportStep\n       name="usersschema"\n       title="Export member custom TTW schema"\n       description="Export member custom TTW schema"\n-      handler="plone.app.users.setuphandlers.export_schema">\n-  </genericsetup:exportStep>\n+      handler="plone.app.users.setuphandlers.export_schema"\n+      >\n+</genericsetup:exportStep>\n \n   <genericsetup:importStep\n       name="usersschema"\n       title="Import member custom TTW schema"\n       description="Import member custom TTW schema"\n-      handler="plone.app.users.setuphandlers.import_schema">\n-  </genericsetup:importStep>\n+      handler="plone.app.users.setuphandlers.import_schema"\n+      >\n+</genericsetup:importStep>\n \n   <genericsetup:upgradeStep\n       title="Upgrade to TTW Schema editing for user information form"\n       description=""\n+      profile="plone.app.users:default"\n       source="*"\n       destination="1"\n       handler=".upgrades.upgrade_to_ttw"\n-      profile="plone.app.users:default"\n       />\n \n </configure>\ndiff --git a/plone/app/users/field_extender.py b/plone/app/users/field_extender.py\nindex 36156ae3..4bab68c2 100644\n--- a/plone/app/users/field_extender.py\n+++ b/plone/app/users/field_extender.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.users.browser.schemaeditor import USERS_NAMESPACE\n from plone.app.users.browser.schemaeditor import USERS_PREFIX\n from plone.autoform import directives as form\n@@ -15,19 +14,19 @@\n import zope.schema\n \n \n-form_vocab = SimpleVocabulary([\n-    SimpleTerm(value=u\'On Registration\',\n-               title=u\'On Registration\'),\n-    SimpleTerm(value=u\'In User Profile\',\n-               title=u\'In User Profile\'),\n-])\n+form_vocab = SimpleVocabulary(\n+    [\n+        SimpleTerm(value="On Registration", title="On Registration"),\n+        SimpleTerm(value="In User Profile", title="In User Profile"),\n+    ]\n+)\n \n \n class IUserFormSelection(Interface):\n     form.widget(forms=CheckBoxFieldWidget)\n     forms = zope.schema.List(\n-        title=u"Where should this field be shown",\n-        description=u"Does not apply to username or to email fields",\n+        title="Where should this field be shown",\n+        description="Does not apply to username or to email fields",\n         required=True,\n         value_type=zope.schema.Choice(vocabulary=form_vocab),\n     )\n@@ -41,14 +40,14 @@ def get_user_addform_selection(schema_context):\n     return IUserFormSelection\n \n \n-class UserFormSelectionAdapter(object):\n+class UserFormSelectionAdapter:\n     adapts(IField)\n \n     def __init__(self, field):\n         self.field = field\n \n     def _get_forms(self):\n-        forms = getattr(self.field, \'forms_selection\', [])\n+        forms = getattr(self.field, "forms_selection", [])\n         return forms\n \n     def _set_forms(self, value):\n@@ -58,17 +57,16 @@ def _set_forms(self, value):\n \n \n @implementer(IFieldMetadataHandler)\n-class UserFormSelectionMetadata(object):\n-\n+class UserFormSelectionMetadata:\n     namespace = USERS_NAMESPACE\n     prefix = USERS_PREFIX\n \n     def read(self, fieldNode, schema, field):\n-        forms = fieldNode.get(ns(\'forms\', self.namespace))\n+        forms = fieldNode.get(ns("forms", self.namespace))\n         if forms:\n-            field.forms_selection = forms.split(\'|\')\n+            field.forms_selection = forms.split("|")\n \n     def write(self, fieldNode, schema, field):\n-        forms = getattr(field, \'forms_selection\', [])\n+        forms = getattr(field, "forms_selection", [])\n         if forms:\n-            fieldNode.set(ns(\'forms\', self.namespace), "|".join(forms))\n+            fieldNode.set(ns("forms", self.namespace), "|".join(forms))\ndiff --git a/plone/app/users/profiles/default/metadata.xml b/plone/app/users/profiles/default/metadata.xml\nindex 7f28c91b..08b37b63 100644\n--- a/plone/app/users/profiles/default/metadata.xml\n+++ b/plone/app/users/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n-    <version>1</version>\n+  <version>1</version>\n </metadata>\ndiff --git a/plone/app/users/profiles/default/userschema.xml b/plone/app/users/profiles/default/userschema.xml\nindex 4e3db91d..7a877624 100644\n--- a/plone/app/users/profiles/default/userschema.xml\n+++ b/plone/app/users/profiles/default/userschema.xml\n@@ -1,37 +1,46 @@\n+<?xml version="1.0" encoding="utf-8"?>\n <model xmlns="http://namespaces.plone.org/supermodel/schema"\n        xmlns:form="http://namespaces.plone.org/supermodel/form"\n-       xmlns:users="http://namespaces.plone.org/supermodel/users"\n        xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-       i18n:domain="plone">\n+       xmlns:users="http://namespaces.plone.org/supermodel/users"\n+       i18n:domain="plone"\n+>\n   <schema name="member-fields">\n-    <field name="home_page" type="zope.schema.URI"\n-      users:forms="In User Profile">\n+    <field name="home_page"\n+           type="zope.schema.URI"\n+           users:forms="In User Profile"\n+    >\n       <description i18n:translate="help_homepage">\n           The URL for your external home page, if you have one.\n       </description>\n       <required>False</required>\n       <title i18n:translate="label_homepage">Home page</title>\n     </field>\n-    <field name="description" type="zope.schema.Text"\n-      users:forms="In User Profile">\n+    <field name="description"\n+           type="zope.schema.Text"\n+           users:forms="In User Profile"\n+    >\n       <description i18n:translate="help_biography">\n           A short overview of who you are and what you do. Will be displayed on your author page, linked from the items you create.\n       </description>\n       <required>False</required>\n       <title i18n:translate="label_biography">Biography</title>\n     </field>\n-    <field name="location" type="zope.schema.TextLine"\n-      users:forms="In User Profile">\n+    <field name="location"\n+           type="zope.schema.TextLine"\n+           users:forms="In User Profile"\n+    >\n       <description i18n:translate="help_location">\n           Your location - either city and country - or in a company setting, where your office is located.\n       </description>\n       <required>False</required>\n       <title i18n:translate="label_location">Location</title>\n     </field>\n-    <field name="portrait"\n+    <field form:widget="plone.app.users.schema.PortraitFieldWidget"\n+           name="portrait"\n            type="plone.namedfile.field.NamedBlobImage"\n-           form:widget="plone.app.users.schema.PortraitFieldWidget"\n-           users:forms="In User Profile">\n+           users:forms="In User Profile"\n+    >\n       <description i18n:translate="help_portrait">\n           To add or change the portrait: click the "Browse" button; select a picture of yourself. Recommended image size is 75 pixels wide by 100 pixels tall.\n       </description>\ndiff --git a/plone/app/users/schema.py b/plone/app/users/schema.py\nindex a842b8c8..67da6ae3 100644\n--- a/plone/app/users/schema.py\n+++ b/plone/app/users/schema.py\n@@ -1,4 +1,4 @@\n-# -*- coding: utf-8 -*-\n+from plone.base import PloneMessageFactory as _\n from plone.formwidget.namedfile.widget import NamedImageWidget\n from plone.namedfile.interfaces import INamedImageField\n from plone.schema.email import Email\n@@ -6,7 +6,6 @@\n from plone.schemaeditor.interfaces import IFieldFactory\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n from Products.CMFPlone.RegistrationTool import EmailAddressInvalid\n from z3c.form.interfaces import IFieldWidget\n from z3c.form.interfaces import IFormLayer\n@@ -27,7 +26,7 @@\n def checkEmailAddress(value):\n     portal = getUtility(ISiteRoot)\n \n-    reg_tool = getToolByName(portal, \'portal_registration\')\n+    reg_tool = getToolByName(portal, "portal_registration")\n     if value and reg_tool.isValidEmail(value):\n         pass\n     else:\n@@ -37,21 +36,20 @@ def checkEmailAddress(value):\n \n \n class ProtectedTextLine(schema.TextLine):\n-    """ TextLine field which cannot be edited via shema editor\n-    """\n+    """TextLine field which cannot be edited via shema editor"""\n+\n     pass\n \n \n class ProtectedEmail(Email):\n-    """ Email field which cannot be edited via shema editor\n-    """\n+    """Email field which cannot be edited via shema editor"""\n+\n     pass\n \n \n @implementer(IFieldFactory)\n class NotEditableFieldFactory(FieldFactory):\n-\n-    title = _(u\'(protected)\')\n+    title = _("(protected)")\n \n     def protected(self, field):\n         return True\n@@ -59,65 +57,67 @@ def protected(self, field):\n \n FullnameFieldFactory = NotEditableFieldFactory(\n     ProtectedTextLine,\n-    _(u\'label_full_name\', default=u\'Full Name\'),\n+    _("label_full_name", default="Full Name"),\n )\n \n EmailFieldFactory = NotEditableFieldFactory(\n     ProtectedEmail,\n-    _(u\'label_email\', default=u\'Email\'),\n+    _("label_email", default="Email"),\n )\n \n \n class IUserDataSchema(Interface):\n-    """\n-    """\n+    """ """\n \n     fullname = ProtectedTextLine(\n-        title=_(u\'label_full_name\', default=u\'Full Name\'),\n-        description=_(u\'help_full_name_creation\',\n-                      default=u"Enter full name, e.g. John Smith."),\n-        required=False)\n+        title=_("label_full_name", default="Full Name"),\n+        description=_(\n+            "help_full_name_creation", default="Enter full name, e.g. John Smith."\n+        ),\n+        required=False,\n+    )\n \n     email = ProtectedEmail(\n-        title=_(u\'label_email\', default=u\'Email\'),\n-        description=u\'We will use this address if you need to recover your \'\n-                    u\'password\',\n+        title=_("label_email", default="Email"),\n+        description="We will use this address if you need to recover your " "password",\n         required=True,\n         constraint=checkEmailAddress,\n     )\n \n \n class IRegisterSchema(Interface):\n-\n     username = schema.ASCIILine(\n-        title=_(u\'label_user_name\', default=u\'User Name\'),\n+        title=_("label_user_name", default="User Name"),\n         description=_(\n-            u\'help_user_name_creation_casesensitive\',\n-            default=u"Enter a user name, usually something like \'jsmith\'. "\n-                    u"No spaces or special characters. Usernames and "\n-                    u"passwords are case sensitive, make sure the caps lock "\n-                    u"key is not enabled. This is the name used to log in."\n-        )\n+            "help_user_name_creation_casesensitive",\n+            default="Enter a user name, usually something like \'jsmith\'. "\n+            "No spaces or special characters. Usernames and "\n+            "passwords are case sensitive, make sure the caps lock "\n+            "key is not enabled. This is the name used to log in.",\n+        ),\n     )\n \n     password = schema.Password(\n-        title=_(u\'label_password\', default=u\'Password\'),\n-        description=_(u\'help_password_creation\',\n-                      default=u\'Enter your new password.\'))\n+        title=_("label_password", default="Password"),\n+        description=_("help_password_creation", default="Enter your new password."),\n+    )\n \n     password_ctl = schema.Password(\n-        title=_(u\'label_confirm_password\',\n-                default=u\'Confirm password\'),\n-        description=_(u\'help_confirm_password\',\n-                      default=u"Re-enter the password. "\n-                      "Make sure the passwords are identical."))\n+        title=_("label_confirm_password", default="Confirm password"),\n+        description=_(\n+            "help_confirm_password",\n+            default="Re-enter the password. " "Make sure the passwords are identical.",\n+        ),\n+    )\n \n     mail_me = schema.Bool(\n-        title=_(u\'label_mail_password\',\n-                default=u"Send a confirmation mail with a link to set the "\n-                u"password"),\n+        title=_(\n+            "label_mail_password",\n+            default="Send a confirmation mail with a link to set the " "password",\n+        ),\n         required=False,\n-        default=False)\n+        default=False,\n+    )\n \n \n class ICombinedRegisterSchema(IRegisterSchema, IUserDataSchema):\n@@ -125,13 +125,12 @@ class ICombinedRegisterSchema(IRegisterSchema, IUserDataSchema):\n \n \n class IAddUserSchema(Interface):\n-\n     groups = schema.List(\n-        title=_(u\'label_add_to_groups\',\n-                default=u\'Add to the following groups:\'),\n-        description=u\'\',\n+        title=_("label_add_to_groups", default="Add to the following groups:"),\n+        description="",\n         required=False,\n-        value_type=schema.Choice(vocabulary=\'plone.app.users.group_ids\'))\n+        value_type=schema.Choice(vocabulary="plone.app.users.group_ids"),\n+    )\n \n \n class PortraitWidget(NamedImageWidget):\n@@ -142,20 +141,20 @@ class PortraitWidget(NamedImageWidget):\n     #   another user\'s image does not work.\n     @property\n     def download_url(self):\n-        userid = self.request.form.get(\'userid\')\n+        userid = self.request.form.get("userid")\n         if not userid:\n-            mt = getToolByName(self.form.context, \'portal_membership\')\n+            mt = getToolByName(self.form.context, "portal_membership")\n             userid = mt.getAuthenticatedMember().getId()\n \n         # anonymous\n         if not userid:\n             return None\n \n-        url = super(PortraitWidget, self).download_url\n+        url = super().download_url\n         if not url:\n             return None\n \n-        return \'%s?%s\' % (url, make_query({\'userid\': userid}))\n+        return "{}?{}".format(url, make_query({"userid": userid}))\n \n \n @implementer(IFieldWidget)\n@@ -165,26 +164,22 @@ def PortraitFieldWidget(field, request):\n \n \n class IRegistrationSettingsSchema(Interface):\n-\n     user_registration_fields = schema.Tuple(\n-        title=_(\n-            u\'title_user_registration_fields\',\n-            default=u\'User registration fields\'\n-        ),\n+        title=_("title_user_registration_fields", default="User registration fields"),\n         description=_(\n-            u"description_user_registration_fields",\n-            default=(u"Select the fields for the join form. Fields in the "\n-                     u"right box will be shown on the form, fields on the "\n-                     u"left are disabled. Use the left/right buttons to move "\n-                     u"a field from right to left (to disable it) and vice "\n-                     u"versa. Use the up/down buttons to change the order in "\n-                     u"which the fields appear on the form."),\n+            "description_user_registration_fields",\n+            default=(\n+                "Select the fields for the join form. Fields in the "\n+                "right box will be shown on the form, fields on the "\n+                "left are disabled. Use the left/right buttons to move "\n+                "a field from right to left (to disable it) and vice "\n+                "versa. Use the up/down buttons to change the order in "\n+                "which the fields appear on the form."\n+            ),\n         ),\n-        value_type=schema.Choice(\n-            vocabulary=\'plone.app.users.user_registration_fields\'),\n+        value_type=schema.Choice(vocabulary="plone.app.users.user_registration_fields"),\n     )\n \n \n class IUserSchemaProvider(Interface):\n-\n     pass\ndiff --git a/plone/app/users/setuphandlers.py b/plone/app/users/setuphandlers.py\nindex 3fd8b06f..3b999c44 100644\n--- a/plone/app/users/setuphandlers.py\n+++ b/plone/app/users/setuphandlers.py\n@@ -1,30 +1,27 @@\n-# -*- coding: utf-8 -*-\n-from Products.CMFPlone.utils import safe_encode\n+from plone.base.utils import safe_bytes\n \n import logging\n import plone.app.users.browser.schemaeditor as ttw\n-import six\n \n-logger = logging.getLogger(\'plone.app.users.setuphandlers\')\n \n-FILE = \'userschema.xml\'\n+logger = logging.getLogger("plone.app.users.setuphandlers")\n+\n+FILE = "userschema.xml"\n \n \n def import_schema(context):\n-    """Import TTW Schema\n-    """\n+    """Import TTW Schema"""\n     data = context.readDataFile(FILE)\n     if data is None:\n         return\n-    if six.PY3 and isinstance(data, bytes):\n-        data = data.decode(\'utf-8\')\n+    if isinstance(data, bytes):\n+        data = data.decode("utf-8")\n     ttw.applySchema(data)\n-    logger.info(\'Imported schema\')\n+    logger.info("Imported schema")\n \n \n def export_schema(context):\n-    """Export TTW schema\n-    """\n+    """Export TTW schema"""\n     schema = ttw.serialize_ttw_schema()\n-    context.writeDataFile(FILE, safe_encode(schema), \'text/xml\')\n-    logger.info(\'Exported schema\')\n+    context.writeDataFile(FILE, safe_bytes(schema), "text/xml")\n+    logger.info("Exported schema")\ndiff --git a/plone/app/users/testing.py b/plone/app/users/testing.py\nindex cef3a16c..b97c87ce 100644\n--- a/plone/app/users/testing.py\n+++ b/plone/app/users/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.robotframework.testing import REMOTE_LIBRARY_BUNDLE_FIXTURE\n from plone.app.testing import applyProfile\n@@ -11,7 +10,6 @@\n \n \n class PloneAppUsersLayer(PloneSandboxLayer):\n-\n     defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n@@ -21,7 +19,7 @@ def setUpZope(self, app, configurationContext):\n         self.loadZCML(package=plone.app.users)\n \n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.app.users:default\')\n+        applyProfile(portal, "plone.app.users:default")\n \n \n PLONE_APP_USERS_FIXTURE = PloneAppUsersLayer()\n@@ -29,13 +27,13 @@ def setUpPloneSite(self, portal):\n \n PLONE_APP_USERS_INTEGRATION_TESTING = IntegrationTesting(\n     bases=(PLONE_APP_USERS_FIXTURE,),\n-    name=\'PloneAppUsersLayer:IntegrationTesting\',\n+    name="PloneAppUsersLayer:IntegrationTesting",\n )\n \n \n PLONE_APP_USERS_FUNCTIONAL_TESTING = FunctionalTesting(\n     bases=(PLONE_APP_USERS_FIXTURE,),\n-    name=\'PloneAppUsersLayer:FunctionalTesting\',\n+    name="PloneAppUsersLayer:FunctionalTesting",\n )\n \n \n@@ -45,5 +43,5 @@ def setUpPloneSite(self, portal):\n         REMOTE_LIBRARY_BUNDLE_FIXTURE,\n         z2.ZSERVER_FIXTURE,\n     ),\n-    name=\'PloneAppUsersLayer:AcceptanceTesting\',\n+    name="PloneAppUsersLayer:AcceptanceTesting",\n )\ndiff --git a/plone/app/users/tests/__init__.py b/plone/app/users/tests/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/app/users/tests/__init__.py\n+++ b/plone/app/users/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/app/users/tests/acceptance/test_edit_user_schema.robot b/plone/app/users/tests/acceptance/test_edit_user_schema.robot\ndeleted file mode 100644\nindex ea219e51..00000000\n--- a/plone/app/users/tests/acceptance/test_edit_user_schema.robot\n+++ /dev/null\n@@ -1,211 +0,0 @@\n-*** Settings ***\n-\n-Resource  plone/app/robotframework/selenium.robot\n-Resource  plone/app/robotframework/keywords.robot\n-\n-Library  Remote  ${PLONE_URL}/RobotRemote\n-\n-Test Setup  Open test browser\n-Test Teardown  Close all browsers\n-\n-Suite setup  Set Selenium speed  0.5s\n-\n-*** Test Cases ***\n-\n-Manager can edit the user schema\n-    Given I\'m logged in as a \'Manager\'\n-     then I go to Member fields editor\n-     and I add a new Text line (String) field \'office_name\'\n-     and I do not see the \'office_name\' field in user form\n-     and I make \'office_name\' field appear In User Profile form\n-     and I see the \'office_name\' field in user form\n-     and I do not see the \'office_name\' field in registration form\n-     and I make \'office_name\' field appear On Registration form\n-     and I see the \'office_name\' field in registration form\n-     and I make the \'office_name\' field required\n-\n-Fields order is honored\n-    Given I\'m logged in as a \'Manager\'\n-     then I add a new Text line (String) field \'office_name\'\n-     and I make \'office_name\' field appear In User Profile form\n-     and I make \'office_name\' field appear On Registration form\n-     and I add a new Text line (String) field \'job_title\'\n-     and I make \'job_title\' field appear In User Profile form\n-     and I make \'job_title\' field appear On Registration form\n-     and \'office_name\' is before \'job_title\' in registration form\n-     and \'office_name\' is before \'job_title\' in user profile\n-\n-Requirement constraint is honored\n-    Given I\'m logged in as a \'Manager\'\n-     then I add a new Text line (String) field \'office_name\'\n-     and I make \'office_name\' field appear In User Profile form\n-     and \'office_name\' is not required\n-     and I add a new Integer field \'favorite_star_wars_episode\'\n-     and I make \'favorite_star_wars_episode\' field appear In User Profile form\n-     and \'favorite_star_wars_episode\' is not required\n-     and I make the \'office_name\' field required\n-     and \'office_name\' is required\n-\n-Type constraint is honored\n-    Given I\'m logged in as a \'Manager\'\n-     and I add a new Integer field \'favorite_star_wars_episode\'\n-     and I make \'favorite_star_wars_episode\' field appear In User Profile form\n-     and \'favorite_star_wars_episode\' cannot be IV\n-     and \'favorite_star_wars_episode\' can be 5\n-\n-Min/max constraint is honored\n-    Given I\'m logged in as a \'Manager\'\n-     and I add a new Integer field \'favorite_star_wars_episode\'\n-     and I make \'favorite_star_wars_episode\' field appear In User Profile form\n-     and I restrict \'favorite_star_wars_episode\' value to min 4 and max 6\n-     and value 3 is too small for \'favorite_star_wars_episode\'\n-     and value 10 is too big for \'favorite_star_wars_episode\'\n-     and \'favorite_star_wars_episode\' can be 5\n-\n-*** Keywords ***\n-\n-I\'m logged in as a \'${ROLE}\'\n-    Enable autologin as  ${ROLE}\n-\n-I go to Member fields editor\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link  link=Users and Groups\n-    Click link  link=Member fields\n-\n-I add a new ${field_type} field \'${field_id}\'\n-    Go to  ${PLONE_URL}/@@member-fields\n-    Wait Until Element Is visible  css=#add-field  timeout=5\n-    Click link   css=#add-field\n-    Wait Until Element Is visible  css=#add-field-form  timeout=5\n-    Input Text      css=#add-field-form #form-widgets-title     ${field_id}\n-    Input Text      css=#add-field-form #form-widgets-__name__  ${field_id}\n-    Select From List    css=#form-widgets-factory   ${field_type}\n-    Click button        css=.pattern-modal-buttons input#form-buttons-add\n-\n-I make \'${field_id}\' field appear ${FORM} form\n-    Go to  ${PLONE_URL}/@@member-fields\n-    Wait Until Element Is visible  css=div[data-field_id=\'${field_id}\']  timeout=5\n-    Click link      css=div[data-field_id=\'${field_id}\'] a.fieldSettings\n-    Wait Until Element Is visible  css=#edit-field-form  timeout=5\n-    Select Checkbox     css=#edit-field-form input[value=\'${FORM}\']\n-    Click button        css=.pattern-modal-buttons input#form-buttons-save\n-\n-I do not see the \'${field_id}\' field in user form\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click link    css=a[title=\'test_user_1_\']\n-    Element should not be visible  css=input#form-widgets-${field_id}\n-\n-I see the \'${field_id}\' field in user form\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click link    css=a[title=\'test_user_1_\']\n-    Element should be visible  css=input#form-widgets-${field_id}\n-\n-I do not see the \'${field_id}\' field in registration form\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click button    css=#add-new-user\n-    Wait Until Element Is visible   css=form.kssattr-formname-new-user\n-    Element should not be visible  css=input#form-widgets-${field_id}\n-\n-I see the \'${field_id}\' field in registration form\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click button    css=#add-new-user\n-    Wait Until Element Is visible   css=form.kssattr-formname-new-user\n-    Element should be visible  css=input#form-widgets-${field_id}\n-\n-I make the \'${field_id}\' field required\n-    Go to  ${PLONE_URL}/@@member-fields\n-    Wait Until Element Is visible  css=div[data-field_id=\'${field_id}\']  timeout=5\n-    Click link      css=div[data-field_id=\'${field_id}\'] a.fieldSettings\n-    Wait Until Element Is visible  css=#edit-field-form  timeout=5\n-    Select Checkbox     css=#form-widgets-required-0\n-    Click button        css=.pattern-modal-buttons input#form-buttons-save\n-\n-\'${field_1}\' is before \'${field_2}\' in registration form\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click button    css=#add-new-user\n-    Wait Until Element Is visible   css=form.kssattr-formname-new-user\n-    Element should be visible  css=#formfield-form-widgets-${field_1} + #formfield-form-widgets-${field_2}\n-\n-\'${field_1}\' is before \'${field_2}\' in user profile\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click link    css=a[title=\'test_user_1_\']\n-    Element should be visible  css=#formfield-form-widgets-${field_1} + #formfield-form-widgets-${field_2}\n-\n-\'${field_id}\' is not required\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click link      css=a[title=\'test_user_1_\']\n-    Input Text      css=#form-widgets-fullname  Isaac Newton\n-    Input Text      css=#form-widgets-email  isaac@plone.org\n-    Click button    css=#form-buttons-save\n-    Wait Until Element Is visible   css=.portalMessage\n-    Page should not contain    Required input is missing\n-\n-\'${field_id}\' is required\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click link      css=a[title=\'test_user_1_\']\n-    Input Text      css=#form-widgets-fullname  Isaac Newton\n-    Input Text      css=#form-widgets-email  isaac@plone.org\n-    Click button    css=#form-buttons-save\n-    Wait Until Element Is visible   css=.portalMessage\n-    Page should contain    Required input is missing\n-\n-I restrict \'${field_id}\' value to min ${min_val} and max ${max_val}\n-    Go to  ${PLONE_URL}/@@member-fields\n-    Wait Until Element Is visible  css=div[data-field_id=\'${field_id}\']  timeout=5\n-    Click link      css=div[data-field_id=\'${field_id}\'] a.fieldSettings\n-    Wait Until Element Is visible  css=#edit-field-form  timeout=5\n-    Input Text      css=#form-widgets-min  ${min_val}\n-    Input Text      css=#form-widgets-max  ${max_val}\n-    Click button        css=.pattern-modal-buttons input#form-buttons-save\n-\n-value ${value} is too small for \'${field_id}\'\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click link      css=a[title=\'test_user_1_\']\n-    Input Text      css=#form-widgets-fullname  Isaac Newton\n-    Input Text      css=#form-widgets-email  isaac@plone.org\n-    Input Text      css=#form-widgets-${field_id}  ${value}\n-    Click button    css=#form-buttons-save\n-    Wait Until Element Is visible   css=.portalMessage  timeout=5\n-    Page should contain    Value is too small\n-\n-value ${value} is too big for \'${field_id}\'\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click link      css=a[title=\'test_user_1_\']\n-    Input Text      css=#form-widgets-fullname  Isaac Newton\n-    Input Text      css=#form-widgets-email  isaac@plone.org\n-    Input Text      css=#form-widgets-${field_id}  ${value}\n-    Click button    css=#form-buttons-save\n-    Wait Until Element Is visible   css=.portalMessage  timeout=5\n-    Page should contain    Value is too big\n-\n-\'${field_id}\' can be ${value}\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click link      css=a[title=\'test_user_1_\']\n-    Input Text      css=#form-widgets-fullname  Isaac Newton\n-    Input Text      css=#form-widgets-email  isaac@plone.org\n-    Input Text      css=#form-widgets-${field_id}  ${value}\n-    Click button    css=#form-buttons-save\n-    Wait Until Element Is visible    css=.portalMessage  timeout=5\n-    Element should not be visible    css=.portalMessage.error\n-\n-\'${field_id}\' cannot be ${value}\n-    Go to  ${PLONE_URL}/@@overview-controlpanel\n-    Click link      link=Users and Groups\n-    Click link      css=a[title=\'test_user_1_\']\n-    Input Text      css=#form-widgets-fullname  Isaac Newton\n-    Input Text      css=#form-widgets-email  isaac@plone.org\n-    Input Text      css=#form-widgets-${field_id}  ${value}\n-    Click button    css=#form-buttons-save\n-    Wait Until Element Is visible   css=.portalMessage  timeout=5\n-    Element should be visible       css=.portalMessage.error\ndiff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py\nindex a3098170..b059d13f 100644\n--- a/plone/app/users/tests/base.py\n+++ b/plone/app/users/tests/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """Base class for flexible user registration test cases.\n \n This is in a separate module because it\'s potentially useful to other\n@@ -8,14 +7,13 @@\n from AccessControl.SecurityInfo import ClassSecurityInfo\n from Acquisition import aq_base\n from OFS.Cache import Cacheable\n-from plone.app.testing import setRoles\n from plone.app.testing import login\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n+from plone.base.interfaces import IMailSchema\n+from plone.base.interfaces import ISecuritySchema\n from plone.registry.interfaces import IRegistry\n from plone.testing.z2 import Browser\n-from plone.base.interfaces import ISecuritySchema\n-from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n from Products.CMFPlone.tests.utils import MockMailHost\n from Products.MailHost.interfaces import IMailHost\n from Products.PlonePAS.setuphandlers import activatePluginInterfaces\n@@ -30,54 +28,55 @@\n \n \n class BaseTestCase(unittest.TestCase):\n-    """ base test case which adds amin user """\n+    """base test case which adds amin user"""\n \n     layer = PLONE_APP_USERS_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        self.portal = self.layer[\'portal\']\n-        self.request = self.layer[\'request\']\n-        self.portal.acl_users._doAddUser(\'admin\', TEST_USER_PASSWORD, [\'Manager\'], [])\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.portal.acl_users._doAddUser("admin", TEST_USER_PASSWORD, ["Manager"], [])\n         set_mock_mailhost(self.portal)\n         self.membership = self.portal.portal_membership\n         self.security_settings = get_security_settings()\n \n-        self.browser = Browser(self.layer[\'app\'])\n-        self.request = self.layer[\'request\']\n+        self.browser = Browser(self.layer["app"])\n+        self.request = self.layer["request"]\n \n     def tearDown(self):\n-        login(self.portal, \'admin\')\n+        login(self.portal, "admin")\n         unset_mock_mailhost(self.portal)\n         pas_instance = self.portal.acl_users\n-        plugin = getattr(pas_instance, \'test\', None)\n+        plugin = getattr(pas_instance, "test", None)\n         if plugin is not None:\n-            plugins = pas_instance._getOb(\'plugins\')\n-            plugins.deactivatePlugin(IValidationPlugin, \'test\')\n+            plugins = pas_instance._getOb("plugins")\n+            plugins.deactivatePlugin(IValidationPlugin, "test")\n             # plugins.deactivatePlugin(IPropertiesPlugin, \'test\')\n-            pas_instance.manage_delObjects(\'test\')\n+            pas_instance.manage_delObjects("test")\n \n     def test_nothing(self):\n-        """ Add a dummy test here, so the base class \'passes\'. """\n+        """Add a dummy test here, so the base class \'passes\'."""\n+\n \n # Dummy password validation PAS plugin\n \n \n class DeadParrotPassword(BasePlugin, Cacheable):\n-    meta_type = \'Test Password Strength Plugin\'\n+    meta_type = "Test Password Strength Plugin"\n     security = ClassSecurityInfo()\n \n     def __init__(self, id, title=None):\n         self._id = self.id = id\n         self.title = title\n \n-    security.declarePrivate(\'validateUserInfo\')\n+    security.declarePrivate("validateUserInfo")\n \n     def validateUserInfo(self, user, set_id, set_info):\n         errors = []\n-        if set_info and set_info.get(\'password\', None) is not None:\n-            password = set_info[\'password\']\n-            if password.count(\'dead\') or password == \'\':\n-                errors = [{\'id\': \'password\', \'error\': u\'Must not be dead\'}]\n+        if set_info and set_info.get("password", None) is not None:\n+            password = set_info["password"]\n+            if password.count("dead") or password == "":\n+                errors = [{"id": "password", "error": "Must not be dead"}]\n             else:\n                 errors = []\n         return errors\n@@ -85,41 +84,42 @@ def validateUserInfo(self, user, set_id, set_info):\n \n # Helper methods used in doctests\n \n+\n def setMailHost():\n     registry = getUtility(IRegistry)\n-    mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n-    mail_settings.smtp_host = u\'localhost\'\n-    mail_settings.email_from_address = \'admin@foo.com\'\n+    mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n+    mail_settings.smtp_host = "localhost"\n+    mail_settings.email_from_address = "admin@foo.com"\n     commit()\n \n \n def unsetMailHost():\n     registry = getUtility(IRegistry)\n-    mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n-    mail_settings.smtp_host = u\'\'\n-    mail_settings.email_from_address = \'\'\n+    mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n+    mail_settings.smtp_host = ""\n+    mail_settings.email_from_address = ""\n     commit()\n \n \n def activateDefaultPasswordPolicy(portal):\n     uf = portal.acl_users\n-    for policy in uf.objectIds([\'Default Plone Password Policy\']):\n+    for policy in uf.objectIds(["Default Plone Password Policy"]):\n         activatePluginInterfaces(portal, policy)\n \n \n def addParrotPasswordPolicy(portal):\n     # remove default policy\n     uf = portal.acl_users\n-    for policy in uf.objectIds([\'Default Plone Password Policy\']):\n+    for policy in uf.objectIds(["Default Plone Password Policy"]):\n         uf.plugins.deactivatePlugin(IValidationPlugin, policy)\n \n-    obj = DeadParrotPassword(\'test\')\n+    obj = DeadParrotPassword("test")\n     uf._setObject(obj.getId(), obj)\n     obj = uf[obj.getId()]\n     activatePluginInterfaces(portal, obj.getId())\n \n     # portal = getUtility(ISiteRoot)\n-    plugins = uf._getOb(\'plugins\')\n+    plugins = uf._getOb("plugins")\n     validators = plugins.listPlugins(IValidationPlugin)\n     assert validators\n     commit()\n@@ -135,7 +135,7 @@ def get_security_settings():\n \n def set_mock_mailhost(portal):\n     portal._original_MailHost = portal.MailHost\n-    portal.MailHost = mailhost = MockMailHost(\'MailHost\')\n+    portal.MailHost = mailhost = MockMailHost("MailHost")\n     sm = getSiteManager(context=portal)\n     sm.unregisterUtility(provided=IMailHost)\n     sm.registerUtility(mailhost, provided=IMailHost)\ndiff --git a/plone/app/users/tests/forms_navigationroot.rst b/plone/app/users/tests/forms_navigationroot.rst\nindex 03dbbccf..35de379a 100644\n--- a/plone/app/users/tests/forms_navigationroot.rst\n+++ b/plone/app/users/tests/forms_navigationroot.rst\n@@ -49,7 +49,7 @@ same base class so if the fix works on one, it works on them all.\n     >>> browser.url\n     \'http://nohost/plone/@@personal-preferences\'\n \n-Check the existance and links for a standard site context (navigation root\n+Check the existence and links for a standard site context (navigation root\n is the Plone site itself since the marker interface isn\'t applied here\n yet).\n \ndiff --git a/plone/app/users/tests/test_account.py b/plone/app/users/tests/test_account.py\nindex 7c3405b7..084d121b 100644\n--- a/plone/app/users/tests/test_account.py\n+++ b/plone/app/users/tests/test_account.py\n@@ -1,16 +1,14 @@\n-# -*- coding: utf-8 -*-\n-from Products.CMFCore.interfaces import IMembershipTool\n from plone.app.users.browser.account import AccountPanelSchemaAdapter\n-from plone.app.users.tests.base import BaseTestCase\n from plone.testing import z2\n-from zope.interface import implementer\n+from Products.CMFCore.interfaces import IMembershipTool\n from zope.component import provideUtility\n+from zope.interface import implementer\n+\n import unittest\n \n \n @implementer(IMembershipTool)\n-class DummyPortalMembership(object):\n-\n+class DummyPortalMembership:\n     def __init__(self, allowed):\n         self.allowed = allowed\n \n@@ -18,7 +16,7 @@ def getMemberById(self, id):\n         return id\n \n     def getAuthenticatedMember(self):\n-        return \'(authenticated)\'\n+        return "(authenticated)"\n \n     def checkPermission(self, permission, context):\n         return self.allowed\n@@ -30,19 +28,19 @@ class TestAccountPanelSchemaAdapter(unittest.TestCase):\n     def test__init__no_userid(self):\n         """Should edit current user."""\n         provideUtility(DummyPortalMembership(False))\n-        adapter = AccountPanelSchemaAdapter(self.layer[\'request\'])\n-        self.assertEqual(\'(authenticated)\', adapter.context)\n+        adapter = AccountPanelSchemaAdapter(self.layer["request"])\n+        self.assertEqual("(authenticated)", adapter.context)\n \n     def test__init__userid_in_request_form_for_non_manager(self):\n         """Disallow for non-privileged users."""\n         provideUtility(DummyPortalMembership(False))\n-        self.layer[\'request\'].form[\'userid\'] = \'bob\'\n-        adapter = AccountPanelSchemaAdapter(self.layer[\'request\'])\n-        self.assertEqual(\'(authenticated)\', adapter.context)\n+        self.layer["request"].form["userid"] = "bob"\n+        adapter = AccountPanelSchemaAdapter(self.layer["request"])\n+        self.assertEqual("(authenticated)", adapter.context)\n \n     def test__init__userid_in_request_form_for_manager(self):\n         """Should allow for privileged users."""\n         provideUtility(DummyPortalMembership(True))\n-        self.layer[\'request\'].form[\'userid\'] = \'bob\'\n-        adapter = AccountPanelSchemaAdapter(self.layer[\'request\'])\n-        self.assertEqual(\'bob\', adapter.context)\n+        self.layer["request"].form["userid"] = "bob"\n+        adapter = AccountPanelSchemaAdapter(self.layer["request"])\n+        self.assertEqual("bob", adapter.context)\ndiff --git a/plone/app/users/tests/test_doctests.py b/plone/app/users/tests/test_doctests.py\nindex 57bd4194..568b9ee1 100644\n--- a/plone/app/users/tests/test_doctests.py\n+++ b/plone/app/users/tests/test_doctests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n from plone.testing import layered\n \n@@ -7,38 +6,39 @@\n \n \n doc_tests = [\n-    \'duplicate_email.rst\',\n-    \'email_login.rst\',\n-    \'flexible_user_registration.rst\',\n-    \'forms_navigationroot.rst\',  # need to ask about content types layer\n-    \'member_search.rst\',\n-    \'registration_forms.rst\',  # working on it\n-    \'password.rst\',  # for later\n-    \'personal_preferences.rst\',\n-    \'personal_preferences_prefs_user_details.rst\',\n-    \'userdata.rst\',\n-    \'userdata_prefs_user_details.rst\',\n-    \'../vocabularies.py\',\n+    "duplicate_email.rst",\n+    "email_login.rst",\n+    "flexible_user_registration.rst",\n+    "forms_navigationroot.rst",  # need to ask about content types layer\n+    "member_search.rst",\n+    "registration_forms.rst",  # working on it\n+    "password.rst",  # for later\n+    "personal_preferences.rst",\n+    "personal_preferences_prefs_user_details.rst",\n+    "userdata.rst",\n+    "userdata_prefs_user_details.rst",\n+    "../vocabularies.py",\n ]\n \n optionflags = (\n-    doctest.ELLIPSIS |\n-    doctest.NORMALIZE_WHITESPACE |\n-    doctest.REPORT_ONLY_FIRST_FAILURE\n+    doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_ONLY_FIRST_FAILURE\n )\n \n \n def test_suite():\n     suite = unittest.TestSuite()\n-    suite.addTests([\n-        layered(\n-            doctest.DocFileSuite(\n-                \'tests/{0}\'.format(test_file),\n-                package=\'plone.app.users\',\n-                optionflags=optionflags,\n-            ),\n-            layer=PLONE_APP_USERS_FUNCTIONAL_TESTING)\n-        for test_file in doc_tests\n-    ])\n+    suite.addTests(\n+        [\n+            layered(\n+                doctest.DocFileSuite(\n+                    f"tests/{test_file}",\n+                    package="plone.app.users",\n+                    optionflags=optionflags,\n+                ),\n+                layer=PLONE_APP_USERS_FUNCTIONAL_TESTING,\n+            )\n+            for test_file in doc_tests\n+        ]\n+    )\n \n     return suite\ndiff --git a/plone/app/users/tests/test_exportimport.py b/plone/app/users/tests/test_exportimport.py\nindex 81443d99..812fb4ba 100644\n--- a/plone/app/users/tests/test_exportimport.py\n+++ b/plone/app/users/tests/test_exportimport.py\n@@ -1,8 +1,6 @@\n-# -*- coding: utf-8 -*-\n from plone.app.users.browser.userdatapanel import getUserDataSchema\n from plone.app.users.setuphandlers import export_schema\n from plone.app.users.setuphandlers import import_schema\n-from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n from plone.app.users.tests.base import BaseTestCase\n from plone.namedfile.field import NamedBlobImage\n from Products.CMFCore.utils import getToolByName\n@@ -12,9 +10,8 @@\n \n \n class TestImport(BaseTestCase):\n-\n     def setUp(self):\n-        super(TestImport, self).setUp()\n+        super().setUp()\n         xml = """<model xmlns:lingua="http://namespaces.plone.org/supermodel/lingua" xmlns:users="http://namespaces.plone.org/supermodel/users" xmlns:form="http://namespaces.plone.org/supermodel/form" xmlns:i18n="http://xml.zope.org/namespaces/i18n" xmlns:security="http://namespaces.plone.org/supermodel/security" xmlns:marshal="http://namespaces.plone.org/supermodel/marshal" xmlns="http://namespaces.plone.org/supermodel/schema" i18n:domain="plone">\n   <schema name="member-fields">\n     <field name="home_page" type="zope.schema.URI" users:forms="In User Profile">\n@@ -99,7 +96,7 @@ def setUp(self):\n </model>\n """\n         context = DummyImportContext(self.portal, purge=False)\n-        context._files = {\'userschema.xml\': xml}\n+        context._files = {"userschema.xml": xml}\n         import_schema(context)\n \n     def test_import(self):\n@@ -108,65 +105,65 @@ def test_import(self):\n         member_properties = pm.propertyIds()\n \n         self.assertIn("home_page", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'home_page\'], schema.URI))\n+        self.assertTrue(isinstance(user_schema["home_page"], schema.URI))\n         self.assertIn("home_page", member_properties)\n-        self.assertEqual(pm.getPropertyType(\'home_page\'), \'text\')\n+        self.assertEqual(pm.getPropertyType("home_page"), "text")\n \n         self.assertIn("description", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'description\'], schema.Text))\n+        self.assertTrue(isinstance(user_schema["description"], schema.Text))\n         self.assertIn("description", member_properties)\n-        self.assertEqual(pm.getPropertyType(\'description\'), \'text\')\n+        self.assertEqual(pm.getPropertyType("description"), "text")\n \n         self.assertIn("location", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'location\'], schema.TextLine))\n+        self.assertTrue(isinstance(user_schema["location"], schema.TextLine))\n         self.assertIn("location", member_properties)\n-        self.assertEqual(pm.getPropertyType(\'location\'), \'string\')\n+        self.assertEqual(pm.getPropertyType("location"), "string")\n \n         self.assertIn("portrait", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'portrait\'], NamedBlobImage))\n+        self.assertTrue(isinstance(user_schema["portrait"], NamedBlobImage))\n         # image fields are not handled as memberdata property,\n         # it is handled directly in portal_membership\n         self.assertNotIn("portrait", member_properties)\n \n         self.assertIn("birthdate", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'birthdate\'], schema.Date))\n+        self.assertTrue(isinstance(user_schema["birthdate"], schema.Date))\n         self.assertIn("birthdate", member_properties)\n-        self.assertEqual(pm.getPropertyType(\'birthdate\'), \'date\')\n+        self.assertEqual(pm.getPropertyType("birthdate"), "date")\n \n         self.assertIn("another_date", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'another_date\'], schema.Datetime))\n+        self.assertTrue(isinstance(user_schema["another_date"], schema.Datetime))\n         self.assertIn("another_date", member_properties)\n-        self.assertEqual(pm.getPropertyType(\'another_date\'), \'date\')\n+        self.assertEqual(pm.getPropertyType("another_date"), "date")\n \n         self.assertIn("age", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'age\'], schema.Int))\n+        self.assertTrue(isinstance(user_schema["age"], schema.Int))\n         self.assertIn("age", member_properties)\n-        self.assertEqual(pm.getPropertyType(\'age\'), \'int\')\n+        self.assertEqual(pm.getPropertyType("age"), "int")\n \n         self.assertIn("department", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'department\'], schema.Choice))\n+        self.assertTrue(isinstance(user_schema["department"], schema.Choice))\n         self.assertIn("department", member_properties)\n-        self.assertEqual(pm.getPropertyType(\'department\'), \'string\')\n+        self.assertEqual(pm.getPropertyType("department"), "string")\n \n         self.assertIn("skills", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'skills\'], schema.Set))\n+        self.assertTrue(isinstance(user_schema["skills"], schema.Set))\n         self.assertIn("skills", member_properties)\n-        self.assertEqual(pm.getPropertyType(\'skills\'), \'lines\')\n+        self.assertEqual(pm.getPropertyType("skills"), "lines")\n \n         self.assertIn("pi", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'pi\'], schema.Float))\n+        self.assertTrue(isinstance(user_schema["pi"], schema.Float))\n         self.assertIn("pi", member_properties)\n-        self.assertEqual(pm.getPropertyType(\'pi\'), \'float\')\n+        self.assertEqual(pm.getPropertyType("pi"), "float")\n \n         self.assertIn("vegetarian", user_schema)\n-        self.assertTrue(isinstance(user_schema[\'vegetarian\'], schema.Bool))\n+        self.assertTrue(isinstance(user_schema["vegetarian"], schema.Bool))\n         self.assertIn("vegetarian", member_properties)\n-        self.assertEqual(pm.getPropertyType(\'vegetarian\'), \'boolean\')\n+        self.assertEqual(pm.getPropertyType("vegetarian"), "boolean")\n \n     def test_export(self):\n         context = DummyExportContext(self.portal)\n         export_schema(context)\n-        self.assertEqual(\'userschema.xml\', context._wrote[0][0])\n+        self.assertEqual("userschema.xml", context._wrote[0][0])\n         self.assertIn(b\'field name="home_page"\', context._wrote[0][1])\n         self.assertIn(b\'field name="description"\', context._wrote[0][1])\n         self.assertIn(b\'field name="location"\', context._wrote[0][1])\ndiff --git a/plone/app/users/tests/test_loginname_generator.py b/plone/app/users/tests/test_loginname_generator.py\nindex 09d292e8..563bdf1e 100644\n--- a/plone/app/users/tests/test_loginname_generator.py\n+++ b/plone/app/users/tests/test_loginname_generator.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Note: test setup somehow fails when only tests from this file are run.\n from plone.app.users.browser.interfaces import ILoginNameGenerator\n from plone.app.users.browser.register import BaseRegistrationForm\n@@ -7,20 +6,18 @@\n \n \n class TestGenerateLoginName(BaseTestCase):\n-\n     def test_custom_generator(self):\n         """Test if a custom login name generator overrides the default\n         behavior.\n         """\n         sm = getSiteManager(context=self.portal)\n         form = BaseRegistrationForm(self.portal, {})\n-        data = {\'useme\': \'me me me\', \'username\': \'frank\'}\n+        data = {"useme": "me me me", "username": "frank"}\n \n-        sm.registerUtility(\n-            lambda data: data[\'useme\'], provided=ILoginNameGenerator)\n+        sm.registerUtility(lambda data: data["useme"], provided=ILoginNameGenerator)\n \n-        self.assertEqual(form.generate_login_name(data), \'me me me\')\n-        self.assertEqual(data.get(\'login_name\'), \'me me me\')\n+        self.assertEqual(form.generate_login_name(data), "me me me")\n+        self.assertEqual(data.get("login_name"), "me me me")\n \n     def test_custom_generator_empty(self):\n         """Test that the username is used if a custom login name generator\n@@ -28,32 +25,31 @@ def test_custom_generator_empty(self):\n         """\n         sm = getSiteManager(context=self.portal)\n         form = BaseRegistrationForm(self.portal, {})\n-        data = {\'useme\': \'\', \'username\': \'Frank\'}\n+        data = {"useme": "", "username": "Frank"}\n \n-        sm.registerUtility(\n-            lambda data: data[\'useme\'], provided=ILoginNameGenerator)\n+        sm.registerUtility(lambda data: data["useme"], provided=ILoginNameGenerator)\n \n-        self.assertEqual(form.generate_login_name(data), \'Frank\')\n-        self.assertEqual(data.get(\'login_name\'), \'Frank\')\n+        self.assertEqual(form.generate_login_name(data), "Frank")\n+        self.assertEqual(data.get("login_name"), "Frank")\n \n     def test_use_email_as_login_disabled(self):\n         """Test generating user_id with no custom login name generator and\n         with the use_email_as_login security setting disabled.\n         """\n         form = BaseRegistrationForm(self.portal, {})\n-        data = {\'username\': \'Frank\'}\n+        data = {"username": "Frank"}\n         self.security_settings.use_email_as_login = False\n \n-        self.assertEqual(form.generate_login_name(data), \'Frank\')\n-        self.assertEqual(data.get(\'login_name\'), \'Frank\')\n+        self.assertEqual(form.generate_login_name(data), "Frank")\n+        self.assertEqual(data.get("login_name"), "Frank")\n \n     def test_use_email_as_login_enabled(self):\n         """Test generating user_id with no custom login name generator and\n         with the use_email_as_login security setting enabled.\n         """\n         form = BaseRegistrationForm(self.portal, {})\n-        data = {\'username\': \'Frank\', \'email\': \'Frank@Test.com\'}\n+        data = {"username": "Frank", "email": "Frank@Test.com"}\n         self.security_settings.use_email_as_login = True\n \n-        self.assertEqual(form.generate_login_name(data), \'frank@test.com\')\n-        self.assertEqual(data.get(\'login_name\'), \'frank@test.com\')\n+        self.assertEqual(form.generate_login_name(data), "frank@test.com")\n+        self.assertEqual(data.get("login_name"), "frank@test.com")\ndiff --git a/plone/app/users/tests/test_member_search.py b/plone/app/users/tests/test_member_search.py\nindex c594a2c6..84b119dd 100644\n--- a/plone/app/users/tests/test_member_search.py\n+++ b/plone/app/users/tests/test_member_search.py\n@@ -1,19 +1,17 @@\n-# -*- coding: utf-8 -*-\n from plone.app.users.browser.membersearch import extractCriteriaFromRequest\n \n import unittest\n \n \n class TestMemberSearch(unittest.TestCase):\n-\n     def test_extract_criteria_from_request(self):\n         data = {\n-            \'_authenticator\': u\'ab4731...\',\n-            \'form.buttons.search\': u\'Search\',\n-            \'form.widgets.something\': u\'any form value\',\n-            \'form.widgets.roles-empty-marker\': True,\n+            "_authenticator": "ab4731...",\n+            "form.buttons.search": "Search",\n+            "form.widgets.something": "any form value",\n+            "form.widgets.roles-empty-marker": True,\n         }\n \n         result = extractCriteriaFromRequest(data)\n \n-        self.assertEqual(result, {\'something\': u\'any form value\'})\n+        self.assertEqual(result, {"something": "any form value"})\ndiff --git a/plone/app/users/tests/test_new_user.py b/plone/app/users/tests/test_new_user.py\nindex 15a6ef6e..aab912cc 100644\n--- a/plone/app/users/tests/test_new_user.py\n+++ b/plone/app/users/tests/test_new_user.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.users.tests.base import BaseTestCase\n from plone.app.users.utils import uuid_userid_generator\n@@ -8,27 +7,26 @@\n \n \n class TestNewUser(BaseTestCase):\n-\n     def test_new_user_as_site_administrator(self):\n         self.portal.acl_users._doAddUser(\n-            \'siteadmin\', TEST_USER_PASSWORD, [\'Site Administrator\'], []\n+            "siteadmin", TEST_USER_PASSWORD, ["Site Administrator"], []\n         )\n         # make the user available\n         transaction.commit()\n \n-        self.browser.addHeader(\'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n-        self.browser.open(\'http://nohost/plone/new-user\')\n-        self.browser.getControl(\'User Name\').value = \'newuser\'\n-        self.browser.getControl(\'Email\').value = \'newuser@example.com\'\n-        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Confirm password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Site Administrators\').selected = True\n-        self.browser.getControl(\'Register\').click()\n+        self.browser.addHeader("Authorization", f"Basic siteadmin:{TEST_USER_PASSWORD}")\n+        self.browser.open("http://nohost/plone/new-user")\n+        self.browser.getControl("User Name").value = "newuser"\n+        self.browser.getControl("Email").value = "newuser@example.com"\n+        self.browser.getControl("Password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Confirm password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Site Administrators").selected = True\n+        self.browser.getControl("Register").click()\n \n         # make sure the new user is in the Site Administrators group\n         self.assertTrue(\n-            \'Site Administrator\' in\n-            self.portal.acl_users.getUserById(\'newuser\').getRoles()\n+            "Site Administrator"\n+            in self.portal.acl_users.getUserById("newuser").getRoles()\n         )\n \n \n@@ -38,13 +36,13 @@ class TestGenerateUserIdLoginName(BaseTestCase):\n     """\n \n     def setUp(self):\n-        super(TestGenerateUserIdLoginName, self).setUp()\n+        super().setUp()\n         self.portal_url = self.portal.absolute_url()\n         self.portal.acl_users._doAddUser(\n-            \'siteadmin\', TEST_USER_PASSWORD, [\'Site Administrator\'], []\n+            "siteadmin", TEST_USER_PASSWORD, ["Site Administrator"], []\n         )\n         transaction.commit()\n-        self.browser.addHeader(\'Authorization\', f\'Basic siteadmin:{TEST_USER_PASSWORD}\')\n+        self.browser.addHeader("Authorization", f"Basic siteadmin:{TEST_USER_PASSWORD}")\n \n     def test_uuid_disabled_email_as_login_disabled(self):\n         self.security_settings.use_uuid_as_userid = False\n@@ -52,20 +50,20 @@ def test_uuid_disabled_email_as_login_disabled(self):\n         transaction.commit()\n \n         # create a user\n-        self.browser.open(\'http://nohost/plone/@@new-user\')\n-        self.browser.getControl(\'Full Name\').value = \'New User\'\n-        self.browser.getControl(\'User Name\').value = \'newie\'\n-        self.browser.getControl(\'Email\').value = \'NewUser@Example.Com\'\n-        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Confirm password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Register\').click()\n+        self.browser.open("http://nohost/plone/@@new-user")\n+        self.browser.getControl("Full Name").value = "New User"\n+        self.browser.getControl("User Name").value = "newie"\n+        self.browser.getControl("Email").value = "NewUser@Example.Com"\n+        self.browser.getControl("Password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Confirm password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Register").click()\n \n         # user id should be set the same as user name\n-        pas = getToolByName(self.portal, \'acl_users\')\n-        self.assertEquals(len(pas.searchUsers(name=\'newie\')), 1)\n-        user = pas.getUser(\'newie\')\n-        self.assertEquals(user.getId(), \'newie\')\n-        self.assertEquals(user.getUserName(), \'newie\')\n+        pas = getToolByName(self.portal, "acl_users")\n+        self.assertEqual(len(pas.searchUsers(name="newie")), 1)\n+        user = pas.getUser("newie")\n+        self.assertEqual(user.getId(), "newie")\n+        self.assertEqual(user.getUserName(), "newie")\n \n     def test_uuid_disabled_email_as_login_enabled_no_full_name(self):\n         self.security_settings.use_uuid_as_userid = False\n@@ -73,20 +71,20 @@ def test_uuid_disabled_email_as_login_enabled_no_full_name(self):\n         transaction.commit()\n \n         # create a user\n-        self.browser.open(\'http://nohost/plone/@@new-user\')\n-        self.browser.getControl(\'Email\').value = \'newuser@example.com\'\n-        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Confirm password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Register\').click()\n+        self.browser.open("http://nohost/plone/@@new-user")\n+        self.browser.getControl("Email").value = "newuser@example.com"\n+        self.browser.getControl("Password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Confirm password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Register").click()\n \n         # Since full name is not provided, the user id is set based on the\n         # e-mail, the same as the user name.\n-        pas = getToolByName(self.portal, \'acl_users\')\n-        self.assertEquals(len(pas.searchUsers(name=\'newuser@example.com\')), 1)\n-        self.assertEquals(len(pas.searchUsers(name=\'newuser@example.com\')), 1)\n-        user = pas.getUser(\'newuser@example.com\')\n-        self.assertEquals(user.getId(), \'newuser@example.com\')\n-        self.assertEquals(user.getUserName(), \'newuser@example.com\')\n+        pas = getToolByName(self.portal, "acl_users")\n+        self.assertEqual(len(pas.searchUsers(name="newuser@example.com")), 1)\n+        self.assertEqual(len(pas.searchUsers(name="newuser@example.com")), 1)\n+        user = pas.getUser("newuser@example.com")\n+        self.assertEqual(user.getId(), "newuser@example.com")\n+        self.assertEqual(user.getUserName(), "newuser@example.com")\n \n     def test_uuid_disabled_email_as_login_enabled_no_full_name_uppercase(self):\n         self.security_settings.use_uuid_as_userid = False\n@@ -94,19 +92,19 @@ def test_uuid_disabled_email_as_login_enabled_no_full_name_uppercase(self):\n         transaction.commit()\n \n         # create a user\n-        self.browser.open(\'http://nohost/plone/@@new-user\')\n-        self.browser.getControl(\'Email\').value = \'NewUser@Example.Com\'\n-        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Confirm password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Register\').click()\n+        self.browser.open("http://nohost/plone/@@new-user")\n+        self.browser.getControl("Email").value = "NewUser@Example.Com"\n+        self.browser.getControl("Password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Confirm password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Register").click()\n \n         # the user id is set based on the e-mail, which should be lowercased\n-        pas = getToolByName(self.portal, \'acl_users\')\n-        self.assertEquals(len(pas.searchUsers(name=\'newuser@example.com\')), 1)\n-        self.assertEquals(len(pas.searchUsers(name=\'NewUser@Example.Com\')), 1)\n-        user = pas.getUser(\'newuser@Example.Com\')\n-        self.assertEquals(user.getId(), \'newuser@example.com\')\n-        self.assertEquals(user.getUserName(), \'newuser@example.com\')\n+        pas = getToolByName(self.portal, "acl_users")\n+        self.assertEqual(len(pas.searchUsers(name="newuser@example.com")), 1)\n+        self.assertEqual(len(pas.searchUsers(name="NewUser@Example.Com")), 1)\n+        user = pas.getUser("newuser@Example.Com")\n+        self.assertEqual(user.getId(), "newuser@example.com")\n+        self.assertEqual(user.getUserName(), "newuser@example.com")\n \n     def test_uuid_disabled_email_as_login_enabled_has_full_name(self):\n         self.security_settings.use_uuid_as_userid = False\n@@ -114,21 +112,21 @@ def test_uuid_disabled_email_as_login_enabled_has_full_name(self):\n         transaction.commit()\n \n         # create a user\n-        self.browser.open(\'http://nohost/plone/@@new-user\')\n-        self.browser.getControl(\'Full Name\').value = \'New User\'\n-        self.browser.getControl(\'Email\').value = \'NewUser@Example.Com\'\n-        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Confirm password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Register\').click()\n+        self.browser.open("http://nohost/plone/@@new-user")\n+        self.browser.getControl("Full Name").value = "New User"\n+        self.browser.getControl("Email").value = "NewUser@Example.Com"\n+        self.browser.getControl("Password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Confirm password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Register").click()\n \n         # User id should be set based on the full name, user name should be\n         # set based on the e-mail.\n-        pas = getToolByName(self.portal, \'acl_users\')\n-        self.assertEquals(len(pas.searchUsers(name=\'newuser@example.com\')), 1)\n-        self.assertEquals(len(pas.searchUsers(name=\'NewUser@Example.Com\')), 1)\n-        user = pas.getUser(\'newuser@Example.Com\')\n-        self.assertEquals(user.getId(), \'new-user\')\n-        self.assertEquals(user.getUserName(), \'newuser@example.com\')\n+        pas = getToolByName(self.portal, "acl_users")\n+        self.assertEqual(len(pas.searchUsers(name="newuser@example.com")), 1)\n+        self.assertEqual(len(pas.searchUsers(name="NewUser@Example.Com")), 1)\n+        user = pas.getUser("newuser@Example.Com")\n+        self.assertEqual(user.getId(), "new-user")\n+        self.assertEqual(user.getUserName(), "newuser@example.com")\n \n     def test_uuid_enabled_email_as_login_disabled(self):\n         self.security_settings.use_uuid_as_userid = True\n@@ -136,23 +134,23 @@ def test_uuid_enabled_email_as_login_disabled(self):\n         transaction.commit()\n \n         # create a user\n-        self.browser.open(\'http://nohost/plone/@@new-user\')\n-        self.browser.getControl(\'Full Name\').value = \'New User\'\n-        self.browser.getControl(\'User Name\').value = \'newie\'\n-        self.browser.getControl(\'Email\').value = \'NewUser@Example.Com\'\n-        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Confirm password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Register\').click()\n+        self.browser.open("http://nohost/plone/@@new-user")\n+        self.browser.getControl("Full Name").value = "New User"\n+        self.browser.getControl("User Name").value = "newie"\n+        self.browser.getControl("Email").value = "NewUser@Example.Com"\n+        self.browser.getControl("Password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Confirm password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Register").click()\n \n         # uuid should be used for the user id\n-        pas = getToolByName(self.portal, \'acl_users\')\n-        self.assertEquals(len(pas.searchUsers(name=\'newie\')), 1)\n-        user = pas.getUser(\'newie\')\n-        self.assertEquals(len(user.getId()), len(uuid_userid_generator()))\n-        self.assertNotEquals(user.getId(), \'newuser@example.com\')\n-        self.assertNotEquals(user.getId(), \'newie\')\n-        self.assertNotEquals(user.getId(), \'new-user\')\n-        self.assertEquals(user.getUserName(), \'newie\')\n+        pas = getToolByName(self.portal, "acl_users")\n+        self.assertEqual(len(pas.searchUsers(name="newie")), 1)\n+        user = pas.getUser("newie")\n+        self.assertEqual(len(user.getId()), len(uuid_userid_generator()))\n+        self.assertNotEqual(user.getId(), "newuser@example.com")\n+        self.assertNotEqual(user.getId(), "newie")\n+        self.assertNotEqual(user.getId(), "new-user")\n+        self.assertEqual(user.getUserName(), "newie")\n \n     def test_uuid_enabled_email_as_login_enabled(self):\n         self.security_settings.use_uuid_as_userid = True\n@@ -160,21 +158,21 @@ def test_uuid_enabled_email_as_login_enabled(self):\n         transaction.commit()\n \n         # create a user\n-        self.browser.open(\'http://nohost/plone/@@new-user\')\n-        self.browser.getControl(\'Full Name\').value = \'New User\'\n-        self.browser.getControl(\'Email\').value = \'NewUser@Example.Com\'\n-        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Confirm password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Register\').click()\n+        self.browser.open("http://nohost/plone/@@new-user")\n+        self.browser.getControl("Full Name").value = "New User"\n+        self.browser.getControl("Email").value = "NewUser@Example.Com"\n+        self.browser.getControl("Password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Confirm password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Register").click()\n \n         # uuid should be used for the user id, user name should be based on\n         # the e-mail\n-        pas = getToolByName(self.portal, \'acl_users\')\n-        self.assertEquals(len(pas.searchUsers(name=\'newuser@example.com\')), 1)\n-        self.assertEquals(len(pas.searchUsers(name=\'NewUser@Example.Com\')), 1)\n-        user = pas.getUser(\'newuser@example.com\')\n-        self.assertEquals(len(user.getId()), len(uuid_userid_generator()))\n-        self.assertNotEquals(user.getId(), \'newuser@example.com\')\n-        self.assertNotEquals(user.getId(), \'newie\')\n-        self.assertNotEquals(user.getId(), \'new-user\')\n-        self.assertEquals(user.getUserName(), \'newuser@example.com\')\n+        pas = getToolByName(self.portal, "acl_users")\n+        self.assertEqual(len(pas.searchUsers(name="newuser@example.com")), 1)\n+        self.assertEqual(len(pas.searchUsers(name="NewUser@Example.Com")), 1)\n+        user = pas.getUser("newuser@example.com")\n+        self.assertEqual(len(user.getId()), len(uuid_userid_generator()))\n+        self.assertNotEqual(user.getId(), "newuser@example.com")\n+        self.assertNotEqual(user.getId(), "newie")\n+        self.assertNotEqual(user.getId(), "new-user")\n+        self.assertEqual(user.getUserName(), "newuser@example.com")\ndiff --git a/plone/app/users/tests/test_pam.py b/plone/app/users/tests/test_pam.py\nindex d1f4a950..5e4a94b8 100644\n--- a/plone/app/users/tests/test_pam.py\n+++ b/plone/app/users/tests/test_pam.py\n@@ -1,31 +1,26 @@\n-# -*- coding: utf-8 -*-\n from plone.app.multilingual.browser.setup import SetupMultilingualSite\n from plone.app.testing import applyProfile\n from plone.app.testing import login\n from plone.app.testing import PloneSandboxLayer\n from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, TEST_USER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.testing.layers import FunctionalTesting\n-from plone.app.users.browser.userdatapanel import UserDataPanel\n-from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n from plone.testing import z2\n from Products.CMFCore.utils import getToolByName\n-from transaction import commit\n-from zExceptions import NotFound\n-from zope.i18n import translate\n \n import unittest\n \n \n class WITHPAMLayer(PloneSandboxLayer):\n-\n     def setUpPloneSite(self, portal):\n-        applyProfile(portal, \'plone.app.multilingual:default\')\n-        setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+        applyProfile(portal, "plone.app.multilingual:default")\n+        setRoles(portal, TEST_USER_ID, ["Manager"])\n         login(portal, TEST_USER_NAME)\n-        language_tool = getToolByName(portal, \'portal_languages\')\n-        language_tool.addSupportedLanguage(\'fr\')\n-        language_tool.addSupportedLanguage(\'it\')\n+        language_tool = getToolByName(portal, "portal_languages")\n+        language_tool.addSupportedLanguage("fr")\n+        language_tool.addSupportedLanguage("it")\n         setup_tool = SetupMultilingualSite()\n         setup_tool.setupSite(portal)\n \n@@ -33,19 +28,20 @@ def setUpPloneSite(self, portal):\n WITHPAM_FIXTURE = WITHPAMLayer()\n \n WITHPAM_FUNCTIONAL_TESTING = FunctionalTesting(\n-    bases=(WITHPAM_FIXTURE,),\n-    name="PloneAppUsersWithPAMLayer:Functional")\n+    bases=(WITHPAM_FIXTURE,), name="PloneAppUsersWithPAMLayer:Functional"\n+)\n \n \n class TestUserDataPanelWithPAM(unittest.TestCase):\n-\n     layer = WITHPAM_FUNCTIONAL_TESTING\n \n     def test_pam(self):\n-        browser = z2.Browser(self.layer[\'app\'])\n-        browser.addHeader(\'Authorization\', \'Basic %s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD))\n-        browser.open(\'http://nohost/plone/fr/@@personal-information\')\n+        browser = z2.Browser(self.layer["app"])\n+        browser.addHeader(\n+            "Authorization", f"Basic {TEST_USER_NAME}:{TEST_USER_PASSWORD}"\n+        )\n+        browser.open("http://nohost/plone/fr/@@personal-information")\n         self.assertIn(\n-            \'Saisissez votre nom complet, par exemple Jean Dupont.\',\n+            "Saisissez votre nom complet, par exemple Jean Dupont.",\n             browser.contents,\n         )\ndiff --git a/plone/app/users/tests/test_robot.py b/plone/app/users/tests/test_robot.py\ndeleted file mode 100644\nindex 8d3ed58f..00000000\n--- a/plone/app/users/tests/test_robot.py\n+++ /dev/null\n@@ -1,23 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.users.testing import PLONE_APP_USERS_ACCEPTANCE_TESTING\n-from plone.testing import layered\n-\n-import os\n-import robotsuite\n-import unittest\n-\n-\n-def test_suite():\n-    suite = unittest.TestSuite()\n-    for testfile in os.listdir(\n-            os.path.join(os.path.dirname(__file__), "acceptance")):\n-        testfilepath = os.path.join("acceptance", testfile)\n-#        if not os.path.isdir(testfilepath) and testfile.endswith(\'.robot\'):\n-#            suite.addTests([\n-#                layered(\n-#                    robotsuite.RobotTestSuite(\n-#                        testfilepath,\n-#                        noncritical=[\'fixme\']),\n-#                    layer=PLONE_APP_USERS_ACCEPTANCE_TESTING),\n-#            ])\n-    return suite\ndiff --git a/plone/app/users/tests/test_schema_types.py b/plone/app/users/tests/test_schema_types.py\nindex 73db37fd..d943cdf8 100644\n--- a/plone/app/users/tests/test_schema_types.py\n+++ b/plone/app/users/tests/test_schema_types.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from pkg_resources import resource_stream\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -6,17 +5,16 @@\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.app.users.setuphandlers import import_schema\n+from plone.app.users.tests.base import BaseTestCase\n from plone.testing.z2 import Browser\n from Products.GenericSetup.tests.common import DummyImportContext\n-from plone.app.users.tests.base import BaseTestCase\n \n import transaction\n \n \n class TestSchema(BaseTestCase):\n-\n     def setUp(self):\n-        super(TestSchema, self).setUp()\n+        super().setUp()\n         xml = """<model xmlns:lingua="http://namespaces.plone.org/supermodel/lingua" xmlns:users="http://namespaces.plone.org/supermodel/users" xmlns:form="http://namespaces.plone.org/supermodel/form" xmlns:i18n="http://xml.zope.org/namespaces/i18n" xmlns:security="http://namespaces.plone.org/supermodel/security" xmlns:marshal="http://namespaces.plone.org/supermodel/marshal" xmlns="http://namespaces.plone.org/supermodel/schema" i18n:domain="plone">\n   <schema name="member-fields">\n     <field name="home_page" type="zope.schema.URI" users:forms="In User Profile">\n@@ -101,62 +99,68 @@ def setUp(self):\n </model>\n """\n         context = DummyImportContext(self.portal, purge=False)\n-        context._files = {\'userschema.xml\': xml}\n+        context._files = {"userschema.xml": xml}\n         import_schema(context)\n         transaction.commit()\n \n-        self.browser = Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer["app"])\n         self.browser.handleErrors = False\n-        self.request = self.layer[\'request\']\n+        self.request = self.layer["request"]\n \n     def test_schema_types(self):\n-        self.browser.open(\'http://nohost/plone/\')\n-        self.browser.getLink(\'Log in\').click()\n-        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n-        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Log in\').click()\n+        self.browser.open("http://nohost/plone/")\n+        self.browser.getLink("Log in").click()\n+        self.browser.getControl("Login Name").value = TEST_USER_NAME\n+        self.browser.getControl("Password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Log in").click()\n         self.browser.open("http://nohost/plone/@@personal-information")\n-        self.browser.getControl(\'Full Name\').value = \'Isaac Newton\'\n-        self.browser.getControl(\'Email\').value = \'isaac@cambridge.com\'\n-        self.browser.getControl(\'Home Page\').value = \'http://gravity.org\'\n-        self.browser.getControl(\'Biography\').value = \'I like apples\'\n-        self.browser.getControl(\'Location\').value = \'Cambridge\'\n-        portrait_file = resource_stream("plone.app.users.tests", \'onepixel.jpg\')\n-        self.browser.getControl(name=\'form.widgets.portrait\').add_file(portrait_file, "image/jpg", "onepixel.# jpg")\n-        self.browser.getControl(\'Age\').value = \'40\'\n-        self.browser.getControl(\'Department\').value = [\'Marketing\', ]\n-        self.browser.getControl(\'Skills\').value = [\'Programming\', ]\n-        self.browser.getControl(\'Pi\').value = \'3.14\'\n-        self.browser.getControl(\'Vegetarian\').click()\n-        self.browser.getControl(\'Save\').click()\n+        self.browser.getControl("Full Name").value = "Isaac Newton"\n+        self.browser.getControl("Email").value = "isaac@cambridge.com"\n+        self.browser.getControl("Home Page").value = "http://gravity.org"\n+        self.browser.getControl("Biography").value = "I like apples"\n+        self.browser.getControl("Location").value = "Cambridge"\n+        portrait_file = resource_stream("plone.app.users.tests", "onepixel.jpg")\n+        self.browser.getControl(name="form.widgets.portrait").add_file(\n+            portrait_file, "image/jpg", "onepixel.# jpg"\n+        )\n+        self.browser.getControl("Age").value = "40"\n+        self.browser.getControl("Department").value = [\n+            "Marketing",\n+        ]\n+        self.browser.getControl("Skills").value = [\n+            "Programming",\n+        ]\n+        self.browser.getControl("Pi").value = "3.14"\n+        self.browser.getControl("Vegetarian").click()\n+        self.browser.getControl("Save").click()\n \n         transaction.commit()\n-        membership = self.layer[\'portal\'].portal_membership\n+        membership = self.layer["portal"].portal_membership\n         member = membership.getMemberById(TEST_USER_ID)\n-        self.assertTrue(isinstance(member.getProperty(\'fullname\'), str))\n-        self.assertEqual(member.getProperty(\'fullname\'), \'Isaac Newton\')\n-        self.assertTrue(isinstance(member.getProperty(\'email\'), str))\n-        self.assertEqual(member.getProperty(\'email\'), \'isaac@cambridge.com\')\n-        self.assertTrue(isinstance(member.getProperty(\'home_page\'), str))\n-        self.assertEqual(member.getProperty(\'home_page\'), \'http://gravity.org\')\n-        self.assertTrue(isinstance(member.getProperty(\'description\'), str))\n-        self.assertEqual(member.getProperty(\'description\'), \'I like apples\')\n-        self.assertTrue(isinstance(member.getProperty(\'location\'), str))\n-        portrait = self.layer[\'portal\'].portal_memberdata._getPortrait(TEST_USER_ID)\n-        self.assertEqual(portrait.content_type, \'image/jpeg\')\n+        self.assertTrue(isinstance(member.getProperty("fullname"), str))\n+        self.assertEqual(member.getProperty("fullname"), "Isaac Newton")\n+        self.assertTrue(isinstance(member.getProperty("email"), str))\n+        self.assertEqual(member.getProperty("email"), "isaac@cambridge.com")\n+        self.assertTrue(isinstance(member.getProperty("home_page"), str))\n+        self.assertEqual(member.getProperty("home_page"), "http://gravity.org")\n+        self.assertTrue(isinstance(member.getProperty("description"), str))\n+        self.assertEqual(member.getProperty("description"), "I like apples")\n+        self.assertTrue(isinstance(member.getProperty("location"), str))\n+        portrait = self.layer["portal"].portal_memberdata._getPortrait(TEST_USER_ID)\n+        self.assertEqual(portrait.content_type, "image/jpeg")\n         self.assertEqual(portrait.width, 1)\n         self.assertEqual(portrait.height, 1)\n-        self.assertEqual(member.getProperty(\'location\'), \'Cambridge\')\n-        self.assertTrue(isinstance(member.getProperty(\'age\'), int))\n-        self.assertEqual(member.getProperty(\'age\'), 40)\n-        self.assertTrue(isinstance(member.getProperty(\'department\'), str))\n-        self.assertEqual(member.getProperty(\'department\'), \'Marketing\')\n-        self.assertTrue(isinstance(member.getProperty(\'skills\'), tuple))\n-        self.assertEqual(member.getProperty(\'skills\'), (\'Programming\', ))\n-        self.assertTrue(isinstance(member.getProperty(\'pi\'), float))\n-        self.assertEqual(member.getProperty(\'pi\'), 3.14)\n-        self.assertTrue(isinstance(member.getProperty(\'vegetarian\'), bool))\n-        self.assertEqual(member.getProperty(\'vegetarian\'), True)\n+        self.assertEqual(member.getProperty("location"), "Cambridge")\n+        self.assertTrue(isinstance(member.getProperty("age"), int))\n+        self.assertEqual(member.getProperty("age"), 40)\n+        self.assertTrue(isinstance(member.getProperty("department"), str))\n+        self.assertEqual(member.getProperty("department"), "Marketing")\n+        self.assertTrue(isinstance(member.getProperty("skills"), tuple))\n+        self.assertEqual(member.getProperty("skills"), ("Programming",))\n+        self.assertTrue(isinstance(member.getProperty("pi"), float))\n+        self.assertEqual(member.getProperty("pi"), 3.14)\n+        self.assertTrue(isinstance(member.getProperty("vegetarian"), bool))\n+        self.assertEqual(member.getProperty("vegetarian"), True)\n \n     def test_regression_76_user_information(self):\n         # Test that issue 76 does not return: user info sometimes appears empty.\n@@ -164,40 +168,40 @@ def test_regression_76_user_information(self):\n         # Here we test as admin.\n         portal_url = self.portal.absolute_url()\n         self.browser.open(portal_url)\n-        self.browser.getLink(\'Log in\').click()\n-        self.browser.getControl(\'Login Name\').value = SITE_OWNER_NAME\n-        self.browser.getControl(\'Password\').value = SITE_OWNER_PASSWORD\n-        self.browser.getControl(\'Log in\').click()\n+        self.browser.getLink("Log in").click()\n+        self.browser.getControl("Login Name").value = SITE_OWNER_NAME\n+        self.browser.getControl("Password").value = SITE_OWNER_PASSWORD\n+        self.browser.getControl("Log in").click()\n \n         # Set information for the test user.\n         info_page = f"{portal_url}/@@user-information?userid={TEST_USER_ID}"\n         self.browser.open(info_page)\n-        self.browser.getControl(\'Full Name\').value = \'Isaac Newton\'\n-        self.browser.getControl(\'Email\').value = \'isaac@cambridge.com\'\n-        self.browser.getControl(\'Age\').value = \'40\'\n-        self.browser.getControl(\'Save\').click()\n+        self.browser.getControl("Full Name").value = "Isaac Newton"\n+        self.browser.getControl("Email").value = "isaac@cambridge.com"\n+        self.browser.getControl("Age").value = "40"\n+        self.browser.getControl("Save").click()\n \n         # Open the page again, check that the information is set.\n         self.browser.open(info_page)\n-        self.assertEqual(self.browser.getControl(\'Full Name\').value, \'Isaac Newton\')\n-        self.assertEqual(self.browser.getControl(\'Email\').value, \'isaac@cambridge.com\')\n-        self.assertEqual(self.browser.getControl(\'Age\').value, \'40\')\n+        self.assertEqual(self.browser.getControl("Full Name").value, "Isaac Newton")\n+        self.assertEqual(self.browser.getControl("Email").value, "isaac@cambridge.com")\n+        self.assertEqual(self.browser.getControl("Age").value, "40")\n \n         # Opening the new-user/register page used to be enough to trigger the problem.\n         self.browser.open(f"{portal_url}/@@new-user")\n \n         # Any next calls to the user or personal information pages would show empty.\n         self.browser.open(info_page)\n-        self.assertEqual(self.browser.getControl(\'Full Name\').value, \'Isaac Newton\')\n-        self.assertEqual(self.browser.getControl(\'Email\').value, \'isaac@cambridge.com\')\n-        self.assertEqual(self.browser.getControl(\'Age\').value, \'40\')\n+        self.assertEqual(self.browser.getControl("Full Name").value, "Isaac Newton")\n+        self.assertEqual(self.browser.getControl("Email").value, "isaac@cambridge.com")\n+        self.assertEqual(self.browser.getControl("Age").value, "40")\n \n     def _enable_self_registration(self):\n-        from plone.registry.interfaces import IRegistry\n         from plone.base.interfaces import ISecuritySchema\n+        from plone.registry.interfaces import IRegistry\n         from zope.component import getUtility\n \n-        self.portal.manage_permission(\'Add portal member\', roles=[\'Anonymous\'])\n+        self.portal.manage_permission("Add portal member", roles=["Anonymous"])\n         registry = getUtility(IRegistry)\n         security_settings = registry.forInterface(ISecuritySchema, prefix="plone")\n         security_settings.enable_user_pwd_choice = True\n@@ -209,24 +213,24 @@ def test_regression_76_personal_information(self):\n         # Here we test as user.\n         portal_url = self.portal.absolute_url()\n         self.browser.open(portal_url)\n-        self.browser.getLink(\'Log in\').click()\n-        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n-        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Log in\').click()\n+        self.browser.getLink("Log in").click()\n+        self.browser.getControl("Login Name").value = TEST_USER_NAME\n+        self.browser.getControl("Password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Log in").click()\n \n         # Set information for the test user.\n         info_page = f"{portal_url}/@@personal-information"\n         self.browser.open(info_page)\n-        self.browser.getControl(\'Full Name\').value = \'Isaac Newton\'\n-        self.browser.getControl(\'Email\').value = \'isaac@cambridge.com\'\n-        self.browser.getControl(\'Age\').value = \'40\'\n-        self.browser.getControl(\'Save\').click()\n+        self.browser.getControl("Full Name").value = "Isaac Newton"\n+        self.browser.getControl("Email").value = "isaac@cambridge.com"\n+        self.browser.getControl("Age").value = "40"\n+        self.browser.getControl("Save").click()\n \n         # Open the page again, check that the information is set.\n         self.browser.open(info_page)\n-        self.assertEqual(self.browser.getControl(\'Full Name\').value, \'Isaac Newton\')\n-        self.assertEqual(self.browser.getControl(\'Email\').value, \'isaac@cambridge.com\')\n-        self.assertEqual(self.browser.getControl(\'Age\').value, \'40\')\n+        self.assertEqual(self.browser.getControl("Full Name").value, "Isaac Newton")\n+        self.assertEqual(self.browser.getControl("Email").value, "isaac@cambridge.com")\n+        self.assertEqual(self.browser.getControl("Age").value, "40")\n \n         # Enable self registration.\n         self._enable_self_registration()\n@@ -236,16 +240,18 @@ def test_regression_76_personal_information(self):\n         self.browser.open(f"{portal_url}/@@logout")\n         self.browser.open(f"{portal_url}/@@register")\n         # Check that the registration page is loading correctly.\n-        self.assertNotIn("This site doesn\'t have a valid email setup", self.browser.contents)\n+        self.assertNotIn(\n+            "This site doesn\'t have a valid email setup", self.browser.contents\n+        )\n         self.assertIn("Enter your new password.", self.browser.contents)\n \n         self.browser.open(f"{portal_url}/@@login")\n-        self.browser.getControl(\'Login Name\').value = TEST_USER_NAME\n-        self.browser.getControl(\'Password\').value = TEST_USER_PASSWORD\n-        self.browser.getControl(\'Log in\').click()\n+        self.browser.getControl("Login Name").value = TEST_USER_NAME\n+        self.browser.getControl("Password").value = TEST_USER_PASSWORD\n+        self.browser.getControl("Log in").click()\n \n         # Any next calls to the user or personal information pages would show empty.\n         self.browser.open(info_page)\n-        self.assertEqual(self.browser.getControl(\'Full Name\').value, \'Isaac Newton\')\n-        self.assertEqual(self.browser.getControl(\'Email\').value, \'isaac@cambridge.com\')\n-        self.assertEqual(self.browser.getControl(\'Age\').value, \'40\')\n+        self.assertEqual(self.browser.getControl("Full Name").value, "Isaac Newton")\n+        self.assertEqual(self.browser.getControl("Email").value, "isaac@cambridge.com")\n+        self.assertEqual(self.browser.getControl("Age").value, "40")\ndiff --git a/plone/app/users/tests/test_user_data_panel.py b/plone/app/users/tests/test_user_data_panel.py\nindex 8e5f38db..36b5a2c6 100644\n--- a/plone/app/users/tests/test_user_data_panel.py\n+++ b/plone/app/users/tests/test_user_data_panel.py\n@@ -1,33 +1,25 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.testing import applyProfile\n from plone.app.users.browser.userdatapanel import UserDataPanel\n-from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING\n from plone.app.users.tests.base import BaseTestCase\n from zExceptions import NotFound\n from zope.i18n import translate\n \n \n class TestUserDataPanel(BaseTestCase):\n-\n     def test_regression(self):\n-        portal = self.layer[\'portal\']\n-        request = self.layer[\'request\']\n-        request.form.update({\n-            \'userid\': \'admin\'\n-        })\n+        portal = self.layer["portal"]\n+        request = self.layer["request"]\n+        request.form.update({"userid": "admin"})\n         form = UserDataPanel(portal, request)\n         description = translate(form.description, context=request)\n-        self.assertTrue(\'admin\' in description)\n+        self.assertTrue("admin" in description)\n         # form can be called without raising exception.\n         self.assertTrue(form())\n \n     def test_escape_html(self):\n-        portal = self.layer[\'portal\']\n-        request = self.layer[\'request\']\n-        request.form.update({\n-            \'userid\': \'admin<script>alert("userid")</script>\'\n-        })\n+        portal = self.layer["portal"]\n+        request = self.layer["request"]\n+        request.form.update({"userid": \'admin<script>alert("userid")</script>\'})\n         form = UserDataPanel(portal, request)\n         description = translate(form.description, context=request)\n-        self.assertTrue(\'<script>\' not in description)\n+        self.assertTrue("<script>" not in description)\n         self.assertRaises(NotFound, form)\ndiff --git a/plone/app/users/tests/test_userid_generator.py b/plone/app/users/tests/test_userid_generator.py\nindex 50ab33fb..43e22379 100644\n--- a/plone/app/users/tests/test_userid_generator.py\n+++ b/plone/app/users/tests/test_userid_generator.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Note: test setup somehow fails when only tests from this file are run.\n from plone.app.users.browser.interfaces import IUserIdGenerator\n from plone.app.users.browser.register import BaseRegistrationForm\n@@ -8,28 +7,25 @@\n \n \n class TestGenerateUserId(BaseTestCase):\n-\n     def test_custom_generator(self):\n         """Test if a custom user id generator overrides the default\n         behavior.\n         """\n \n         def one_generator(data):\n-            return \'one\'\n+            return "one"\n \n         sm = getSiteManager(context=self.portal)\n         sm.registerUtility(one_generator, provided=IUserIdGenerator)\n         form = BaseRegistrationForm(self.portal, {})\n \n         data = {}\n-        self.assertEqual(form.generate_user_id(data), \'one\')\n-        self.assertEqual(data.get(\'user_id\'), \'one\')\n+        self.assertEqual(form.generate_user_id(data), "one")\n+        self.assertEqual(data.get("user_id"), "one")\n \n-        data = {\'username\': \'joe\',\n-                \'fullname\': \'Joe User\',\n-                \'email\': \'joe@example.org\'}\n-        self.assertEqual(form.generate_user_id(data), \'one\')\n-        self.assertEqual(data.get(\'user_id\'), \'one\')\n+        data = {"username": "joe", "fullname": "Joe User", "email": "joe@example.org"}\n+        self.assertEqual(form.generate_user_id(data), "one")\n+        self.assertEqual(data.get("user_id"), "one")\n \n     def test_default(self):\n         """Test generating user_id with no custom user id generator and\n@@ -37,72 +33,68 @@ def test_default(self):\n         """\n         form = BaseRegistrationForm(self.portal, {})\n         data = {}\n-        self.assertEqual(form.generate_user_id(data), \'\')\n-        self.assertEqual(data.get(\'user_id\'), \'\')\n+        self.assertEqual(form.generate_user_id(data), "")\n+        self.assertEqual(data.get("user_id"), "")\n \n         # An explicit username is taken by default.\n-        data = {\'username\': \'joe\',\n-                \'fullname\': \'Joe User\',\n-                \'email\': \'joe@example.org\'}\n-        self.assertEqual(form.generate_user_id(data), \'joe\')\n-        self.assertEqual(data.get(\'user_id\'), \'joe\')\n+        data = {"username": "joe", "fullname": "Joe User", "email": "joe@example.org"}\n+        self.assertEqual(form.generate_user_id(data), "joe")\n+        self.assertEqual(data.get("user_id"), "joe")\n \n         # When no username is there, we try a normalized fullname.\n-        data = {\'fullname\': \'Joe User\',\n-                \'email\': \'joe@example.org\'}\n-        self.assertEqual(form.generate_user_id(data), \'joe-user\')\n-        self.assertEqual(data.get(\'user_id\'), \'joe-user\')\n+        data = {"fullname": "Joe User", "email": "joe@example.org"}\n+        self.assertEqual(form.generate_user_id(data), "joe-user")\n+        self.assertEqual(data.get("user_id"), "joe-user")\n \n         # With no fullname, we take the email.\n-        data = {\'email\': \'Joe@example.org\'}\n-        self.assertEqual(form.generate_user_id(data), \'Joe@example.org\')\n-        self.assertEqual(data.get(\'user_id\'), \'Joe@example.org\')\n+        data = {"email": "Joe@example.org"}\n+        self.assertEqual(form.generate_user_id(data), "Joe@example.org")\n+        self.assertEqual(data.get("user_id"), "Joe@example.org")\n \n     def test_use_email_as_login_has_fullname(self):\n-        """"Test generating a user id if the use_email_as_login setting is\n+        """ "Test generating a user id if the use_email_as_login setting is\n         enabled and full name is provided.\n         """\n         self.security_settings.use_email_as_login = True\n         form = BaseRegistrationForm(self.portal, {})\n \n         data = {}\n-        self.assertEqual(form.generate_user_id(data), \'\')\n-        self.assertEqual(data.get(\'user_id\'), \'\')\n+        self.assertEqual(form.generate_user_id(data), "")\n+        self.assertEqual(data.get("user_id"), "")\n \n-        data = {\'fullname\': \'Joe User\',\n-                \'email\': \'joe@example.org\'}\n-        self.assertEqual(form.generate_user_id(data), \'joe-user\')\n-        self.assertEqual(data.get(\'user_id\'), \'joe-user\')\n+        data = {"fullname": "Joe User", "email": "joe@example.org"}\n+        self.assertEqual(form.generate_user_id(data), "joe-user")\n+        self.assertEqual(data.get("user_id"), "joe-user")\n \n     def test_use_email_as_login_no_fullname(self):\n-        """"Test generating a user id if the use_email_as_login setting is\n+        """ "Test generating a user id if the use_email_as_login setting is\n         enabled and full name is not provided.\n         """\n         self.security_settings.use_email_as_login = True\n         form = BaseRegistrationForm(self.portal, {})\n \n         data = {}\n-        self.assertEqual(form.generate_user_id(data), \'\')\n-        self.assertEqual(data.get(\'user_id\'), \'\')\n+        self.assertEqual(form.generate_user_id(data), "")\n+        self.assertEqual(data.get("user_id"), "")\n \n-        data = {\'email\': \'joe@example.org\'}\n-        self.assertEqual(form.generate_user_id(data), \'joe@example.org\')\n-        self.assertEqual(data.get(\'user_id\'), \'joe@example.org\')\n+        data = {"email": "joe@example.org"}\n+        self.assertEqual(form.generate_user_id(data), "joe@example.org")\n+        self.assertEqual(data.get("user_id"), "joe@example.org")\n \n     def test_use_email_as_login_no_fullname_uppercase_email(self):\n-        """"Test generating a user id if the use_email_as_login setting is\n+        """ "Test generating a user id if the use_email_as_login setting is\n         enabled and full name is not provided, with an uppercase e-mail.\n         """\n         self.security_settings.use_email_as_login = True\n         form = BaseRegistrationForm(self.portal, {})\n \n         data = {}\n-        self.assertEqual(form.generate_user_id(data), \'\')\n-        self.assertEqual(data.get(\'user_id\'), \'\')\n+        self.assertEqual(form.generate_user_id(data), "")\n+        self.assertEqual(data.get("user_id"), "")\n \n-        data = {\'email\': \'Joe@Example.org\'}\n-        self.assertEqual(form.generate_user_id(data), \'joe@example.org\')\n-        self.assertEqual(data.get(\'user_id\'), \'joe@example.org\')\n+        data = {"email": "Joe@Example.org"}\n+        self.assertEqual(form.generate_user_id(data), "joe@example.org")\n+        self.assertEqual(data.get("user_id"), "joe@example.org")\n \n     def test_use_uuid_as_userid_enabled(self):\n         """Test generating a user id if the use_uuid_as_userid setting is\n@@ -113,19 +105,15 @@ def test_use_uuid_as_userid_enabled(self):\n \n         data = {}\n         user_id = form.generate_user_id(data)\n-        self.assertEqual(data.get(\'user_id\'), user_id)\n-        self.assertEqual(len(data.get(\'user_id\')),\n-                         len(uuid_userid_generator()))\n+        self.assertEqual(data.get("user_id"), user_id)\n+        self.assertEqual(len(data.get("user_id")), len(uuid_userid_generator()))\n \n-        data = {\'username\': \'joe\',\n-                \'fullname\': \'Joe User\',\n-                \'email\': \'joe@example.org\'}\n+        data = {"username": "joe", "fullname": "Joe User", "email": "joe@example.org"}\n         user_id = form.generate_user_id(data)\n-        self.assertNotEqual(user_id, \'joe\')\n-        self.assertEqual(data.get(\'user_id\'), user_id)\n+        self.assertNotEqual(user_id, "joe")\n+        self.assertEqual(data.get("user_id"), user_id)\n         self.assertEqual(len(user_id), len(uuid_userid_generator()))\n \n         # Calling it twice should give a different result, as every\n         # call to the uuid generator should be unique.\n-        self.assertNotEqual(form.generate_user_id(data),\n-                            form.generate_user_id(data))\n+        self.assertNotEqual(form.generate_user_id(data), form.generate_user_id(data))\ndiff --git a/plone/app/users/upgrades.py b/plone/app/users/upgrades.py\nindex a2689345..2a646801 100644\n--- a/plone/app/users/upgrades.py\n+++ b/plone/app/users/upgrades.py\n@@ -1,12 +1,11 @@\n-# -*- coding: utf-8 -*-\n from plone.app.users.browser import schemaeditor\n+from plone.base import PloneMessageFactory as _\n from plone.namedfile.field import NamedBlobImage\n from plone.schemaeditor.interfaces import IEditableSchema\n from plone.supermodel.model import finalizeSchemas\n from plone.supermodel.model import Schema\n from plone.supermodel.model import SchemaClass\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import PloneMessageFactory as _\n from zope import schema\n from zope.interface import Interface\n \n@@ -21,7 +20,7 @@ def copySchemaAttrs(sch):\n     fields = {}\n     for id in sch:\n         field = copy.deepcopy(sch[id])\n-        field.forms_selection = [u\'In User Profile\']\n+        field.forms_selection = ["In User Profile"]\n         fields[id] = field\n     return fields\n \n@@ -31,63 +30,68 @@ class IEmpty(Schema):\n \n \n class IHomePageSchema(Interface):\n-    """\n-    """\n+    """ """\n \n     home_page = schema.TextLine(\n-        title=_(u\'label_homepage\', default=u\'Home page\'),\n-        description=_(u\'help_homepage\',\n-                      default=u"The URL for your external home page, "\n-                      "if you have one."),\n-        required=False)\n+        title=_("label_homepage", default="Home page"),\n+        description=_(\n+            "help_homepage",\n+            default="The URL for your external home page, " "if you have one.",\n+        ),\n+        required=False,\n+    )\n \n \n class IDescriptionSchema(Interface):\n-    """\n-    """\n+    """ """\n \n     description = schema.Text(\n-        title=_(u\'label_biography\', default=u\'Biography\'),\n-        description=_(u\'help_biography\',\n-                      default=u"A short overview of who you are and what you "\n-                      "do. Will be displayed on your author page, linked "\n-                      "from the items you create."),\n-        required=False)\n+        title=_("label_biography", default="Biography"),\n+        description=_(\n+            "help_biography",\n+            default="A short overview of who you are and what you "\n+            "do. Will be displayed on your author page, linked "\n+            "from the items you create.",\n+        ),\n+        required=False,\n+    )\n \n \n class ILocationSchema(Interface):\n-    """\n-    """\n+    """ """\n \n     location = schema.TextLine(\n-        title=_(u\'label_location\', default=u\'Location\'),\n-        description=_(u\'help_location\',\n-                      default=u"Your location - either city and "\n-                      "country - or in a company setting, where "\n-                      "your office is located."),\n-        required=False)\n+        title=_("label_location", default="Location"),\n+        description=_(\n+            "help_location",\n+            default="Your location - either city and "\n+            "country - or in a company setting, where "\n+            "your office is located.",\n+        ),\n+        required=False,\n+    )\n \n \n class IPortraitSchema(Interface):\n-    """\n-    """\n+    """ """\n \n     portrait = NamedBlobImage(\n-        title=_(u\'label_portrait\', default=u\'Portrait\'),\n+        title=_("label_portrait", default="Portrait"),\n         description=_(\n-            u\'help_portrait\',\n-            default=u\'To add or change the portrait: click the "Browse" \'\n-                    u\'button; select a picture of yourself. Recommended \'\n-                    u\'image size is 75 pixels wide by 100 pixels tall.\'\n+            "help_portrait",\n+            default=\'To add or change the portrait: click the "Browse" \'\n+            "button; select a picture of yourself. Recommended "\n+            "image size is 75 pixels wide by 100 pixels tall.",\n         ),\n-        required=False)\n+        required=False,\n+    )\n \n \n def upgrade_to_ttw(context):\n     # the new default schema only contains fullname and email fields\n     # so we put the missing ones (home_page, description, location, portrait)\n     # into the ttw schema\n-    if schemaeditor.get_schema() == \'\':\n+    if schemaeditor.get_schema() == "":\n         finalizeSchemas(IEmpty)\n         current_ttw = IEditableSchema(IEmpty)\n     else:\n@@ -98,24 +102,23 @@ def upgrade_to_ttw(context):\n     pm = getToolByName(context, "portal_memberdata")\n     existing = pm.propertyIds()\n \n-    if \'home_page\' in existing and \'home_page\' not in current_fields:\n+    if "home_page" in existing and "home_page" not in current_fields:\n         attrs.update(copySchemaAttrs(IHomePageSchema))\n \n-    if \'description\' in existing and \'description\' not in current_fields:\n+    if "description" in existing and "description" not in current_fields:\n         attrs.update(copySchemaAttrs(IDescriptionSchema))\n \n-    if \'location\' in existing and \'location\' not in current_fields:\n+    if "location" in existing and "location" not in current_fields:\n         attrs.update(copySchemaAttrs(ILocationSchema))\n \n-    if \'portrait\' in existing and \'portrait\' not in current_fields:\n+    if "portrait" in existing and "portrait" not in current_fields:\n         attrs.update(copySchemaAttrs(IPortraitSchema))\n \n-    sch = SchemaClass(schemaeditor.SCHEMATA_KEY,\n-        bases=(current_ttw.schema,),\n-        attrs=attrs\n+    sch = SchemaClass(\n+        schemaeditor.SCHEMATA_KEY, bases=(current_ttw.schema,), attrs=attrs\n     )\n     finalizeSchemas(sch)\n \n     xml_model = schemaeditor.serialize_ttw_schema(sch)\n     schemaeditor.set_schema(xml_model)\n-    log.info(\'Old member fields migrated into TTW schema\')\n+    log.info("Old member fields migrated into TTW schema")\ndiff --git a/plone/app/users/utils.py b/plone/app/users/utils.py\nindex 2cdd4275..9a6c0b4d 100644\n--- a/plone/app/users/utils.py\n+++ b/plone/app/users/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.uuid.interfaces import IUUIDGenerator\n from z3c.form.action import ActionErrorOccurred\n from z3c.form.interfaces import WidgetActionExecutionError\n@@ -18,7 +17,6 @@ def uuid_userid_generator(data=None):\n def notifyWidgetActionExecutionError(action, widget, err_str):\n     zope.event.notify(\n         ActionErrorOccurred(\n-            action,\n-            WidgetActionExecutionError(widget, Invalid(err_str))\n+            action, WidgetActionExecutionError(widget, Invalid(err_str))\n         )\n     )\ndiff --git a/plone/app/users/vocabularies.py b/plone/app/users/vocabularies.py\nindex 907097dc..dd3d647d 100644\n--- a/plone/app/users/vocabularies.py\n+++ b/plone/app/users/vocabularies.py\n@@ -1,12 +1,12 @@\n-# -*- coding: utf-8 -*-\n-from AccessControl import getSecurityManager\n from .browser.schemaeditor import getFromBaseSchema\n+from AccessControl import getSecurityManager\n from plone.app.users.schema import ICombinedRegisterSchema\n+from plone.base.utils import safe_text\n+from plone.i18n.normalizer.interfaces import IIDNormalizer\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import get_portal\n-from Products.CMFPlone.utils import normalizeString\n-from Products.CMFPlone.utils import safe_unicode\n+from zope.component import queryUtility\n from zope.interface import implementer\n from zope.schema import getFieldNames\n from zope.schema.interfaces import IVocabularyFactory\n@@ -16,11 +16,11 @@\n \n # Define constants from the Join schema that should be added to the\n # vocab of the join fields setting in usergroupssettings controlpanel.\n-JOIN_CONST = [\'username\', \'password\', \'email\', \'mail_me\']\n+JOIN_CONST = ["username", "password", "email", "mail_me"]\n \n \n @implementer(IVocabularyFactory)\n-class UserRegistrationFieldsVocabulary(object):\n+class UserRegistrationFieldsVocabulary:\n     """Returns list of fields available for registration form.\n \n     It gets fields from z3c.form adopted Registration form schema.\n@@ -65,7 +65,7 @@ def __call__(self, context):\n \n \n @implementer(IVocabularyFactory)\n-class GroupIdVocabulary(object):\n+class GroupIdVocabulary:\n     """\n     Return vocab of groups to add new user to.\n \n@@ -98,29 +98,29 @@ class GroupIdVocabulary(object):\n \n     def __call__(self, context):\n         site = get_portal()\n-        groups_tool = getToolByName(site, \'portal_groups\')\n-        is_zope_manager = getSecurityManager().checkPermission(\n-            ManagePortal, context)\n+        groups_tool = getToolByName(site, "portal_groups")\n+        is_zope_manager = getSecurityManager().checkPermission(ManagePortal, context)\n         groups = groups_tool.listGroups()\n \n         # Get group id, title tuples for each, omitting virtual group\n         # \'AuthenticatedUsers\'\n         terms = []\n         for g in groups:\n-            if g.id == \'AuthenticatedUsers\':\n+            if g.id == "AuthenticatedUsers":\n                 continue\n-            if \'Manager\' in g.getRoles() and not is_zope_manager:\n+            if "Manager" in g.getRoles() and not is_zope_manager:\n                 continue\n \n-            group_title = safe_unicode(g.getGroupTitleOrName())\n+            group_title = safe_text(g.getGroupTitleOrName())\n             if group_title != g.id:\n-                title = u\'%s (%s)\' % (group_title, g.id)\n+                title = f"{group_title} ({g.id})"\n             else:\n                 title = group_title\n             terms.append(SimpleTerm(g.id, g.id, title))\n \n         # Sort by title\n-        terms.sort(key=lambda x: normalizeString(x.title))\n+        utility = queryUtility(IIDNormalizer)\n+        terms.sort(key=lambda x: utility.normalize(x.title))\n         return SimpleVocabulary(terms)\n \n \ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615de..d0946500 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,47 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # Zope dependencies\n+  \'Acquisition\', \'DateTime\', \'transaction\', \'zExceptions\', \'ZODB\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.deferredimport\', \'zope.event\',\n+  \'zope.exceptions\', \'zope.globalrequest\', \'zope.i18n\', \'zope.i18nmessageid\',\n+  \'zope.interface\', \'zope.lifecycleevent\', \'zope.location\', \'zope.publisher\',\n+  \'zope.schema\', \'zope.security\', \'zope.site\', \'zope.traversing\', \'AccessControl\',\n+]\n+\'plone.base\' = [\n+  \'AccessControl\', \'Products.BTreeFolder2\', \'Products.CMFCore\',\n+  \'Products.CMFDynamicViewFTI\', \'zope.deprecation\',\n+]\n+python-dateutil = [\'dateutil\']\n+ignore-packages = [\'Products.CMFPlone\']\n+\n+[tool.codespell]\n+ignore-words-list = "complet,exemple"\ndiff --git a/setup.cfg b/setup.cfg\nindex 526aeb28..0da8f8fb 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex 8c74743f..dfd5ff77 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,27 +1,31 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n-version = \'3.0.2.dev0\'\n \n-long_description = u\'{0}\\n\\n{1}\'.format(\n-    open(\'README.rst\').read(),\n-    open(\'CHANGES.rst\').read()\n+version = "3.0.2.dev0"\n+\n+long_description = "{}\\n\\n{}".format(\n+    open("README.rst").read(), open("CHANGES.rst").read()\n )\n \n extras_require = {\n-    \'test\': [\n-        \'Products.MailHost\',\n-        \'plone.app.testing\',\n-        \'plone.keyring\',\n+    "test": [\n+        "Products.MailHost",\n+        "Products.PluggableAuthService",\n+        "plone.app.contenttypes[test]",\n+        "plone.app.multilingual",\n+        "plone.app.robotframework",\n+        "plone.app.testing",\n+        "plone.keyring",\n+        "plone.testing",\n     ]\n }\n \n setup(\n-    name=\'plone.app.users\',\n+    name="plone.app.users",\n     version=version,\n-    description=\'A package for all things users and groups related (specific \'\n-                \'to plone)\',\n+    description="A package for all things users and groups related (specific "\n+    "to plone)",\n     long_description=long_description,\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n@@ -38,38 +42,45 @@\n         "Programming Language :: Python :: 3.10",\n         "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'Zope CMF Plone Users Groups\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.app.users\',\n-    license=\'GPL version 2\',\n+    keywords="Zope CMF Plone Users Groups",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.app.users",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\', \'plone.app\'],\n+    namespace_packages=["plone", "plone.app"],\n     include_package_data=True,\n     zip_safe=False,\n     python_requires=">=3.8",\n     extras_require=extras_require,\n     install_requires=[\n-        \'AccessControl\',\n-        \'Acquisition\',\n-        \'Products.CMFCore\',\n-        \'Products.PlonePAS >= 5.0.1\',\n-        \'Products.statusmessages\',\n-        \'Zope2 >= 2.12.3\',\n-        \'plone.app.layout\',\n-        \'plone.autoform >= 1.2\',\n-        \'plone.formwidget.namedfile >= 1.0.3\',\n-        \'plone.namedfile\',\n-        \'plone.protect\',\n-        \'plone.schema\',\n-        \'plone.uuid\',\n-        \'setuptools\',\n-        \'six\',\n-        \'z3c.form\',\n-        \'zope.component\',\n-        \'zope.event\',\n-        \'zope.interface\',\n-        \'zope.schema\',\n+        "Acquisition",\n+        "Products.GenericSetup",\n+        "Products.PlonePAS >= 5.0.1",\n+        "Products.statusmessages",\n+        "plone.app.layout",\n+        "plone.autoform >= 1.2",\n+        "plone.app.event",\n+        "plone.app.vocabularies",\n+        "plone.base",\n+        "plone.formwidget.namedfile >= 1.0.3",\n+        "plone.i18n",\n+        "plone.namedfile",\n+        "plone.protect",\n+        "plone.registry",\n+        "plone.schema",\n+        "plone.schemaeditor",\n+        "plone.supermodel",\n+        "plone.uuid",\n+        "plone.z3cform",\n+        "setuptools",\n+        "z3c.form",\n+        "zope.annotation",\n+        "zope.cachedescriptors",\n+        "zope.component",\n+        "zope.event",\n+        "zope.interface",\n+        "zope.schema",\n     ],\n     entry_points="""\n     [z3c.autoinclude.plugin]\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 00000000..999746d2\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.app.users {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.app.users {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

