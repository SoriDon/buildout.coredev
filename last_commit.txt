Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-10-23T15:46:58-07:00
Author: Jon Pentland (instification) <instification@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/6737fa0f317b65e1e32bf049df45084439d75403

Fix portrait endpoint for email address user id's (#1524)

* Create test to catch portrait error when user email login enabled

* Fix test

* Update tests to use plone user for portrait tests instead of zmi admin user

* Update @portrait endpoint to use sanitized id

* Add changelog

* refactor portrait url code to avoid using portal_memberdata.portraits. Use existing isDefaultPortrait code to check whether a custom portrait is uploaded.

* black/flake8 fixes

* Update portrait url for p.a.discussion endooints. Update tests

* Minor change to var name to reduce diff size

* fix tests

* update isDefaultPortrait method to correctly get/compare against the portal defaultUser image.

* Add test for default portrait (should return 404)

* black

* Update src/plone/restapi/tests/test_services_users.py

Co-authored-by: Timo Stollenwerk &lt;tisto@users.noreply.github.com&gt;
Co-authored-by: David Glick &lt;david@glicksoftware.com&gt;

Files changed:
A news/1524.bugfix
M src/plone/restapi/serializer/discussion.py
M src/plone/restapi/serializer/user.py
M src/plone/restapi/services/users/get.py
M src/plone/restapi/tests/http-examples/translated_messages_addons.resp
M src/plone/restapi/tests/test_comments.py
M src/plone/restapi/tests/test_services_users.py

b'diff --git a/news/1524.bugfix b/news/1524.bugfix\nnew file mode 100644\nindex 000000000..41a47faa9\n--- /dev/null\n+++ b/news/1524.bugfix\n@@ -0,0 +1 @@\n+Update @portrait endpoint to use sanitized user id [instification]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/serializer/discussion.py b/src/plone/restapi/serializer/discussion.py\nindex f66898f2a..958e0b199 100644\n--- a/src/plone/restapi/serializer/discussion.py\n+++ b/src/plone/restapi/serializer/discussion.py\n@@ -10,9 +10,12 @@\n from plone.restapi.services.discussion.utils import can_reply\n from plone.restapi.services.discussion.utils import delete_own_comment_allowed\n from plone.restapi.services.discussion.utils import edit_comment_allowed\n+from plone.restapi.services.users.get import getPortraitUrl\n+from plone.restapi.services.users.get import isDefaultPortrait\n from Products.CMFCore.utils import getToolByName\n from zope.component import adapter\n from zope.component import getMultiAdapter\n+from zope.component.hooks import getSite\n from zope.interface import implementer\n from zope.publisher.interfaces import IRequest\n \n@@ -104,8 +107,11 @@ def __call__(self, include_items=True):\n     def get_author_image(self, username=None):\n         if username is None:\n             return\n-        portal_membership = getToolByName(self.context, "portal_membership", None)\n-        image = portal_membership.getPersonalPortrait(username).absolute_url()\n-        if image.endswith("defaultUser.png"):\n-            return\n-        return image\n+        portal = getSite()\n+        portal_membership = getToolByName(portal, "portal_membership", None)\n+        image = portal_membership.getPersonalPortrait(username)\n+        if image and not isDefaultPortrait(image):\n+            # Despite being called username, it is actually a userid.\n+            # See https://github.com/plone/plone.app.discussion/blob/dd0255fd5db6662a1b1b4cb7046785038d0d6b71/plone/app/discussion/browser/comments.py#L211-L217\n+            user = portal_membership.getMemberById(username)\n+            return getPortraitUrl(user)\ndiff --git a/src/plone/restapi/serializer/user.py b/src/plone/restapi/serializer/user.py\nindex b02fdfe32..7e44e8d2f 100644\n--- a/src/plone/restapi/serializer/user.py\n+++ b/src/plone/restapi/serializer/user.py\n@@ -2,6 +2,7 @@\n from plone.restapi.batching import HypermediaBatch\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n+from plone.restapi.services.users.get import getPortraitUrl\n from plone.restapi.serializer.converters import json_compatible\n from Products.CMFCore.interfaces._tools import IMemberData\n from Products.CMFCore.utils import getToolByName\n@@ -39,13 +40,7 @@ def __call__(self):\n \n         for name in getFieldNames(schema):\n             if name == "portrait":\n-                membership = getToolByName(portal, "portal_membership")\n-                memberdata = getToolByName(portal, "portal_memberdata")\n-                safe_id = membership._getSafeMemberId(user.id)\n-                if safe_id in memberdata.portraits:\n-                    value = f"{portal.absolute_url()}/@portrait/{safe_id}"\n-                else:\n-                    value = None\n+                value = getPortraitUrl(user)\n             elif name == "pdelete":\n                 continue\n             else:\ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex 462c54536..60cc3aedf 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -9,6 +9,7 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import normalizeString\n from Products.PlonePAS.tools.membership import default_portrait\n+from Products.PlonePAS.utils import decleanId\n from urllib.parse import parse_qs\n from zExceptions import BadRequest\n from zope.component import getMultiAdapter\n@@ -21,9 +22,25 @@\n DEFAULT_SEARCH_RESULTS_LIMIT = 25\n \n \n-def isDefaultPortrait(value, portal):\n-    default_portrait_value = getattr(portal, default_portrait, None)\n-    return aq_inner(value) == aq_inner(default_portrait_value)\n+def getPortraitUrl(user):\n+    if not user:\n+        return\n+    portal = getSite()\n+    portal_membership = getToolByName(portal, "portal_membership")\n+    portrait = portal_membership.getPersonalPortrait(user.id)\n+    if portrait and not isDefaultPortrait(portrait):\n+        safe_id = portal_membership._getSafeMemberId(user.id)\n+        return f"{portal.absolute_url()}/@portrait/{safe_id}"\n+    return\n+\n+\n+def isDefaultPortrait(value):\n+    portal = getSite()\n+    default_portrait_value = portal.restrictedTraverse(default_portrait, None)\n+    return (\n+        aq_inner(value).getPhysicalPath()\n+        == aq_inner(default_portrait_value).getPhysicalPath()\n+    )\n \n \n @implementer(IPublishTraverse)\n@@ -222,16 +239,17 @@ def _get_user_id(self):\n     def render(self):\n         if len(self.params) == 1:\n             # Retrieve the user portrait\n-            portrait = self.portal_membership.getPersonalPortrait(self.params[0])\n+            user = decleanId(self.params[0])\n+            portrait = self.portal_membership.getPersonalPortrait(user)\n         elif len(self.params) == 0:\n             current_user_id = self.portal_membership.getAuthenticatedMember().getId()\n             portrait = self.portal_membership.getPersonalPortrait(current_user_id)\n         else:\n             raise Exception(\n-                "Must supply exactly zero (own portrait) or one parameter (user id)"\n+                "Must supply exactly zero (own portrait) or one parameter " "(user id)"\n             )\n-\n-        if isDefaultPortrait(portrait, self.portal):\n+        # User uploaded portraits have a meta_type of "Image"\n+        if not portrait or isDefaultPortrait(portrait):\n             self.request.response.setStatus(404)\n             return None\n \ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_addons.resp b/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\nindex 512f86a33..b310a87fd 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\n@@ -73,7 +73,7 @@ Content-Type: application/json\n                 "newVersion": "0006",\n                 "required": false\n             },\n-            "version": "8.30.1.dev0"\n+            "version": "8.31.1.dev0"\n         },\n         {\n             "@id": "http://localhost:55001/plone/@addons/plone.session",\ndiff --git a/src/plone/restapi/tests/test_comments.py b/src/plone/restapi/tests/test_comments.py\nindex 5ea9c5866..79e49dbb4 100644\n--- a/src/plone/restapi/tests/test_comments.py\n+++ b/src/plone/restapi/tests/test_comments.py\n@@ -111,7 +111,7 @@ def test_comment_with_author_image(self):\n \n         serializer = getMultiAdapter((self.comment, self.request), ISerializeToJson)\n         self.assertEqual(\n-            f"{self.portal_url}/portal_memberdata/portraits/test_user_1_",\n+            f"{self.portal_url}/@portrait/test_user_1_",\n             serializer().get("author_image"),\n         )\n \ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 23fbd8fc6..956ca1259 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -15,6 +15,7 @@\n from zope.component import getUtility\n \n import os\n+import re\n import transaction\n import unittest\n \n@@ -956,22 +957,24 @@ def test_add_user_no_roles_sets_member_as_sensible_default(self):\n     def test_get_own_user_portrait(self):\n         image = self.makeRealImage()\n         pm = api.portal.get_tool("portal_membership")\n-        pm.changeMemberPortrait(image, "admin")\n+        pm.changeMemberPortrait(image, "noam")\n         transaction.commit()\n \n-        response = self.api_session.get(\n+        self.assertEqual("noam", pm.getPersonalPortrait("noam").getId())\n+\n+        noam_api_session = RelativeSession(self.portal_url, test=self)\n+        noam_api_session.headers.update({"Accept": "application/json"})\n+        noam_api_session.auth = ("noam", "password")\n+\n+        response = noam_api_session.get(\n             "/@portrait",\n         )\n \n         self.assertEqual(200, response.status_code)\n         self.assertEqual(response.headers["Content-Type"], "image/gif")\n+        noam_api_session.close()\n \n     def test_get_own_user_portrait_logged_out(self):\n-        image = self.makeRealImage()\n-        pm = api.portal.get_tool("portal_membership")\n-        pm.changeMemberPortrait(image, "admin")\n-        transaction.commit()\n-\n         response = self.anon_api_session.get(\n             "/@portrait",\n         )\n@@ -980,7 +983,7 @@ def test_get_own_user_portrait_logged_out(self):\n \n     def test_get_user_portrait_not_set(self):\n         response = self.anon_api_session.get(\n-            "/@portrait/admin",\n+            "/@portrait/noam",\n         )\n \n         self.assertEqual(404, response.status_code)\n@@ -988,11 +991,11 @@ def test_get_user_portrait_not_set(self):\n     def test_get_user_portrait(self):\n         image = self.makeRealImage()\n         pm = api.portal.get_tool("portal_membership")\n-        pm.changeMemberPortrait(image, "admin")\n+        pm.changeMemberPortrait(image, "noam")\n         transaction.commit()\n \n         response = self.api_session.get(\n-            "/@portrait/admin",\n+            "/@portrait/noam",\n         )\n \n         self.assertEqual(200, response.status_code)\n@@ -1011,6 +1014,42 @@ def test_get_user_portrait_anonymous(self):\n         self.assertEqual(200, response.status_code)\n         self.assertEqual(response.headers["Content-Type"], "image/gif")\n \n+    def test_get_user_portrait_if_email_login_enabled(self):\n+        # enable use_email_as_login\n+        security_settings = getAdapter(self.portal, ISecuritySchema)\n+        security_settings.use_email_as_login = True\n+        transaction.commit()\n+\n+        response = self.api_session.post(\n+            "/@users",\n+            json={"email": "howard.zinn@example.com", "password": TEST_USER_PASSWORD},\n+        )\n+        transaction.commit()\n+\n+        image = self.makeRealImage()\n+        pm = api.portal.get_tool("portal_membership")\n+        pm.changeMemberPortrait(image, "howard.zinn@example.com")\n+        transaction.commit()\n+\n+        response = self.api_session.get("/@users/howard.zinn@example.com")\n+        self.assertEqual(200, response.status_code)\n+        portrait_url = response.json()["portrait"]\n+        urlre = re.match(r".*/@portrait/(.*)", portrait_url)\n+        portrait = urlre.group(1)\n+\n+        response = self.api_session.get(\n+            f"/@portrait/{portrait}",\n+        )\n+\n+        self.assertEqual(200, response.status_code)\n+        self.assertEqual(response.headers["Content-Type"], "image/gif")\n+\n+    def test_get_user_default_portrait(self):\n+        response = self.anon_api_session.get(\n+            "/@portrait/admin",\n+        )\n+        self.assertEqual(404, response.status_code)\n+\n     def test_user_with_datetime(self):\n         """test that when using a datetime field in the user schema\n         the endpoints works correctly\n'

