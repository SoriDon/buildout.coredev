Repository: plone.contentrules


Branch: refs/heads/master
Date: 2023-04-15T12:50:42+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.contentrules/commit/d4af2ca845ec293c129c4be4e296866e2a842e2e

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/5cc689e5.internal
A tox.ini
M pyproject.toml
M setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..1b2346d\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "5cc689e5"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/5cc689e5.internal b/news/5cc689e5.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/5cc689e5.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..92c3af9 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,64 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\', \'six\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..444911a\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.contentrules {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.contentrules {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

Repository: plone.contentrules


Branch: refs/heads/master
Date: 2023-04-15T12:53:59+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.contentrules/commit/f299555e977e8b2985212ffa7771dbc14fabfe7b

chore: pyupgrade

Files changed:
M plone/contentrules/engine/assignments.py
M plone/contentrules/engine/executor.py
M plone/contentrules/engine/interfaces.py
M plone/contentrules/rule/element.py
M plone/contentrules/rule/eventvocab.py
M plone/contentrules/rule/interfaces.py
M plone/contentrules/rule/metadirectives.py
M plone/contentrules/rule/rule.py
M plone/contentrules/rule/tests/elements.py

b'diff --git a/plone/contentrules/engine/assignments.py b/plone/contentrules/engine/assignments.py\nindex 87f779b..9aa668f 100644\n--- a/plone/contentrules/engine/assignments.py\n+++ b/plone/contentrules/engine/assignments.py\n@@ -40,7 +40,7 @@ class RuleAssignment(Contained, Persistent):\n     """\n \n     def __init__(self, ruleid, enabled=True, bubbles=False):\n-        super(RuleAssignment, self).__init__()\n+        super().__init__()\n         self.__name__ = ruleid\n         self.enabled = enabled\n         self.bubbles = bubbles\ndiff --git a/plone/contentrules/engine/executor.py b/plone/contentrules/engine/executor.py\nindex ba012fd..09d871f 100644\n--- a/plone/contentrules/engine/executor.py\n+++ b/plone/contentrules/engine/executor.py\n@@ -10,7 +10,7 @@\n from plone.contentrules.rule.interfaces import IExecutable\n \n @implementer(IRuleExecutor)\n-class RuleExecutor(object):\n+class RuleExecutor:\n     """An object that can execute rules in its context.\n     """\n     adapts(IRuleAssignable)\ndiff --git a/plone/contentrules/engine/interfaces.py b/plone/contentrules/engine/interfaces.py\nindex df9a8e3..40a318f 100644\n--- a/plone/contentrules/engine/interfaces.py\n+++ b/plone/contentrules/engine/interfaces.py\n@@ -20,7 +20,7 @@ class IRuleStorage(IOrderedContainer, IContainerNamesContainer):\n     """\n     contains(\'plone.contentrules.rule.interfaces.IRule\')\n \n-    active = schema.Bool(title=u"Rules in this storage are active")\n+    active = schema.Bool(title="Rules in this storage are active")\n \n class IRuleAssignable(IAttributeAnnotatable):\n     """Marker interface for objects that can be assigned rules\n@@ -30,10 +30,10 @@ class IRuleAssignment(IContained):\n     """An assignment of a rule to a context\n     """\n \n-    __name__ = schema.TextLine(title=u"The id of the rule")\n+    __name__ = schema.TextLine(title="The id of the rule")\n \n-    enabled = schema.Bool(title=u"Whether or not the rule is currently enabled")\n-    bubbles = schema.Bool(title=u"Whether or not the rule will apply to objects in subfolders")\n+    enabled = schema.Bool(title="Whether or not the rule is currently enabled")\n+    bubbles = schema.Bool(title="Whether or not the rule will apply to objects in subfolders")\n \n class IRuleAssignmentManager(IOrderedContainer):\n     """An object that is capable of being assigned rules.\ndiff --git a/plone/contentrules/rule/element.py b/plone/contentrules/rule/element.py\nindex a8744c0..2ca9276 100644\n--- a/plone/contentrules/rule/element.py\n+++ b/plone/contentrules/rule/element.py\n@@ -3,15 +3,15 @@\n from plone.contentrules.rule.interfaces import IRuleElement, IRuleCondition, IRuleAction\n \n @implementer(IRuleElement)\n-class RuleElement(object):\n+class RuleElement:\n     """A rule element.\n \n     Ordinarily, rule elements will be created via ZCML directives, which will\n     register them as utilities.\n     """\n \n-    title = u\'\'\n-    description = u\'\'\n+    title = \'\'\n+    description = \'\'\n     for_ = Interface\n     event = None\n     addview = None\ndiff --git a/plone/contentrules/rule/eventvocab.py b/plone/contentrules/rule/eventvocab.py\nindex 2776acf..70a03c0 100644\n--- a/plone/contentrules/rule/eventvocab.py\n+++ b/plone/contentrules/rule/eventvocab.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.contentrules.rule.interfaces import IRuleEventType\n from zope.componentvocabulary.vocabulary import UtilityVocabulary\n from zope.i18nmessageid import MessageFactory\n@@ -26,11 +25,11 @@ def __init__(self, context, **kw):\n         if kw:\n             self.nameOnly = bool(kw.get(\'nameOnly\', False))\n             interface = kw.get(\'interface\', Interface)\n-            if isinstance(interface, (six.string_types, six.text_type)):\n+            if isinstance(interface, ((str,), str)):\n                 interface = zope.component.getUtility(IInterface, interface)\n             self.interface = interface\n \n         utils = zope.component.getUtilitiesFor(self.interface, context)\n-        self._terms = dict(\n-            (name, SimpleTerm(self.nameOnly and name or util, name, _(name)))\n-            for name, util in utils)\n+        self._terms = {\n+            name: SimpleTerm(self.nameOnly and name or util, name, _(name))\n+            for name, util in utils}\ndiff --git a/plone/contentrules/rule/interfaces.py b/plone/contentrules/rule/interfaces.py\nindex bbc2df5..3bb0728 100644\n--- a/plone/contentrules/rule/interfaces.py\n+++ b/plone/contentrules/rule/interfaces.py\n@@ -18,12 +18,12 @@ class IRuleElementData(Interface):\n     or conditions).\n     """\n \n-    element = schema.ASCII(title=u"Rule element",\n-                              description=u"The name of the rule action or condition",\n+    element = schema.ASCII(title="Rule element",\n+                              description="The name of the rule action or condition",\n                               required=True)\n \n-    summary = schema.Text(title=u"Summary",\n-                          description=u"A human-readable description of this element as it is configured",\n+    summary = schema.Text(title="Summary",\n+                          description="A human-readable description of this element as it is configured",\n                           required=True)\n \n class IRuleElement(Interface):\n@@ -34,42 +34,42 @@ class IRuleElement(Interface):\n     IRuleExecuter\n     """\n     title = schema.TextLine(\n-        title = u\'Title\',\n+        title = \'Title\',\n         required = True)\n \n     description = schema.Text(\n-        title = u\'Description\',\n+        title = \'Description\',\n         required = False)\n \n     for_ = configuration_fields.GlobalInterface(\n-        title = u\'Available for\',\n-        description = u\'The interface this component is available for\',\n+        title = \'Available for\',\n+        description = \'The interface this component is available for\',\n         required = False)\n \n     event = configuration_fields.GlobalInterface(\n-        title = u\'Applicable event\',\n-        description = u\'The event that can trigger this element, None meaning \'\n+        title = \'Applicable event\',\n+        description = \'The event that can trigger this element, None meaning \'\n                        \'it is not event specific.\',\n         required = False)\n \n     addview = schema.TextLine(\n-        title = u\'Add view\',\n-        description = u\'The name of the add view\',\n+        title = \'Add view\',\n+        description = \'The name of the add view\',\n         required = True)\n \n     editview = schema.TextLine(\n-        title = u"Edit view",\n-        description = u"The name of the edit view",\n+        title = "Edit view",\n+        description = "The name of the edit view",\n         required = True)\n \n     schema = configuration_fields.GlobalInterface(\n-        title = u\'Schema\',\n-        description = u\'Schema interface for configuring the element\',\n+        title = \'Schema\',\n+        description = \'Schema interface for configuring the element\',\n         required = False)\n \n     factory = configuration_fields.GlobalInterface(\n-        title = u\'Factory\',\n-        description = u\'Callable which creates an instance of the element\',\n+        title = \'Factory\',\n+        description = \'Callable which creates an instance of the element\',\n         required = False)\n \n class IRuleCondition(IRuleElement):\n@@ -95,34 +95,34 @@ class IRuleConfiguration(Interface):\n     """Configurable options for a rule\n     """\n \n-    title = schema.TextLine(title = _(u\'Title\'),\n+    title = schema.TextLine(title = _(\'Title\'),\n                             description = _(\'description_contentrule_title\',\n-                                            default=u\'Please set a descriptive title for the rule.\'),\n+                                            default=\'Please set a descriptive title for the rule.\'),\n                             required = True)\n \n-    description = schema.Text(title = _(u\'Description\'),\n+    description = schema.Text(title = _(\'Description\'),\n                               description = _(\'contentrules_description_description\',\n-                                              default=u\'Enter a short description of the rule and its purpose.\'),\n+                                              default=\'Enter a short description of the rule and its purpose.\'),\n                               required = False)\n \n-    event = schema.Choice(title = _(u\'Triggering event\'),\n+    event = schema.Choice(title = _(\'Triggering event\'),\n                           description = _(\'contentrules_description_trigger\',\n-                                          default=u\'The rule will execute when the following event occurs.\'),\n+                                          default=\'The rule will execute when the following event occurs.\'),\n                           required = True,\n                           vocabulary="plone.contentrules.events")\n \n-    enabled = schema.Bool(title = _(u\'Enabled\'),\n-                          description = _(u\'Whether or not the rule is currently enabled\'),\n+    enabled = schema.Bool(title = _(\'Enabled\'),\n+                          description = _(\'Whether or not the rule is currently enabled\'),\n                           default = True,\n                           required = False)\n \n-    stop = schema.Bool(title = _(u"Stop executing rules"),\n-                       description = _(u"Whether or not execution of further rules should stop after this rule is executed"),\n+    stop = schema.Bool(title = _("Stop executing rules"),\n+                       description = _("Whether or not execution of further rules should stop after this rule is executed"),\n                        default = False,\n                        required = False)\n \n-    cascading = schema.Bool(title = _(u"Cascading rule"),\n-                       description = _(u"Whether or not other rules should be triggered by the actions launched by this rule. Activate this only if you are sure this won\'t create infinite loops."),\n+    cascading = schema.Bool(title = _("Cascading rule"),\n+                       description = _("Whether or not other rules should be triggered by the actions launched by this rule. Activate this only if you are sure this won\'t create infinite loops."),\n                        default = False,\n                        required = False)\n \n@@ -139,12 +139,12 @@ class IRule(IContained, IRuleConfiguration):\n     """\n \n \n-    conditions = schema.List(title = u\'Conditions\',\n-                             description = u\'The conditions of this rule\',\n+    conditions = schema.List(title = \'Conditions\',\n+                             description = \'The conditions of this rule\',\n                              required = True)\n \n-    actions = schema.List(title = u\'Actions\',\n-                          description = u\'The actions of this rule\',\n+    actions = schema.List(title = \'Actions\',\n+                          description = \'The actions of this rule\',\n                           required = True)\n \n \ndiff --git a/plone/contentrules/rule/metadirectives.py b/plone/contentrules/rule/metadirectives.py\nindex 28e265c..250dff5 100644\n--- a/plone/contentrules/rule/metadirectives.py\n+++ b/plone/contentrules/rule/metadirectives.py\n@@ -10,48 +10,48 @@ class IRuleElementDirective(Interface):\n     """\n \n     name = schema.TextLine(\n-        title=u"Name",\n-        description=u"A unique name for the element",\n+        title="Name",\n+        description="A unique name for the element",\n         required=True)\n \n     title = schema.TextLine(\n-        title=u"Title",\n-        description=u"A user-friendly title for the element",\n+        title="Title",\n+        description="A user-friendly title for the element",\n         required=True)\n \n     description = schema.Text(\n-        title=u"Description",\n-        description=u"A helpful description of the element",\n+        title="Description",\n+        description="A helpful description of the element",\n         required=False)\n \n     for_ = configuration_fields.GlobalInterface(\n-        title = u"Available for",\n-        description = u"The interface this element is available for",\n+        title = "Available for",\n+        description = "The interface this element is available for",\n         required = False)\n \n     event = configuration_fields.GlobalInterface(\n-        title = u"Event",\n-        description = u"The event this element is available for",\n+        title = "Event",\n+        description = "The event this element is available for",\n         required = False)\n \n     addview = schema.TextLine(\n-        title = u"Add view",\n-        description = u"Name of the add view",\n+        title = "Add view",\n+        description = "Name of the add view",\n         required = True)\n \n     editview = schema.TextLine(\n-        title = u"Edit view",\n-        description = u"Name of the edit view",\n+        title = "Edit view",\n+        description = "Name of the edit view",\n         required = False)\n \n     schema = configuration_fields.GlobalInterface(\n-        title = u"Schema",\n-        description = u"The schema interface for configuring the element",\n+        title = "Schema",\n+        description = "The schema interface for configuring the element",\n         required = False)\n \n     factory = configuration_fields.GlobalObject(\n-        title = u"Factory",\n-        description = u"A callable which can create the element",\n+        title = "Factory",\n+        description = "A callable which can create the element",\n         required = False)\n \n class IRuleActionDirective(IRuleElementDirective):\ndiff --git a/plone/contentrules/rule/rule.py b/plone/contentrules/rule/rule.py\nindex 714dcaa..e17dae5 100644\n--- a/plone/contentrules/rule/rule.py\n+++ b/plone/contentrules/rule/rule.py\n@@ -12,8 +12,8 @@ class Rule(Persistent):\n     """A rule.\n     """\n \n-    title = u\'\'\n-    description = u\'\'\n+    title = \'\'\n+    description = \'\'\n     event = None\n     enabled = True\n     stop = False\n@@ -27,7 +27,7 @@ def __init__(self):\n         self.actions = PersistentList()\n \n @implementer(IExecutable)\n-class RuleExecutable(object):\n+class RuleExecutable:\n     """An adapter capable of executing a rule\n     """\n     adapts(Interface, IRule, Interface)\ndiff --git a/plone/contentrules/rule/tests/elements.py b/plone/contentrules/rule/tests/elements.py\nindex 4661755..496f629 100644\n--- a/plone/contentrules/rule/tests/elements.py\n+++ b/plone/contentrules/rule/tests/elements.py\n@@ -7,21 +7,21 @@\n from plone.contentrules.rule.interfaces import IRuleElementData\n \n class ITestCondition(Interface):\n-    test = schema.TextLine(title=u"Test property")\n+    test = schema.TextLine(title="Test property")\n \n @implementer(ITestCondition, IRuleElementData)\n-class TestCondition(object):\n-    test = u""\n+class TestCondition:\n+    test = ""\n \n-    summary = u"Test condition"\n-    element = u"test.condition"\n+    summary = "Test condition"\n+    element = "test.condition"\n \n class ITestAction(Interface):\n-    test = schema.TextLine(title=u"Test property")\n+    test = schema.TextLine(title="Test property")\n \n @implementer(ITestAction, IRuleElementData)\n-class TestAction(object):\n-    test = u""\n+class TestAction:\n+    test = ""\n \n-    summary = u"Test action"\n-    element = u"test.action"\n+    summary = "Test action"\n+    element = "test.action"\n'

Repository: plone.contentrules


Branch: refs/heads/master
Date: 2023-04-15T12:54:22+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.contentrules/commit/886d6671c90d53203e19a454ebd9a9bc809e0a97

chore: isort

Files changed:
M plone/contentrules/__init__.py
M plone/contentrules/engine/assignments.py
M plone/contentrules/engine/executor.py
M plone/contentrules/engine/interfaces.py
M plone/contentrules/engine/storage.py
M plone/contentrules/engine/utils.py
M plone/contentrules/rule/element.py
M plone/contentrules/rule/eventvocab.py
M plone/contentrules/rule/interfaces.py
M plone/contentrules/rule/metaconfigure.py
M plone/contentrules/rule/metadirectives.py
M plone/contentrules/rule/rule.py
M plone/contentrules/rule/tests/elements.py
M plone/contentrules/tests.py
M setup.py

b'diff --git a/plone/contentrules/__init__.py b/plone/contentrules/__init__.py\nindex fcda357..38460eb 100644\n--- a/plone/contentrules/__init__.py\n+++ b/plone/contentrules/__init__.py\n@@ -1,3 +1,4 @@\n from zope.i18nmessageid import MessageFactory\n \n+\n PloneMessageFactory = MessageFactory(\'plone\')\ndiff --git a/plone/contentrules/engine/assignments.py b/plone/contentrules/engine/assignments.py\nindex 9aa668f..1e3f252 100644\n--- a/plone/contentrules/engine/assignments.py\n+++ b/plone/contentrules/engine/assignments.py\n@@ -1,20 +1,19 @@\n-from persistent import Persistent\n-\n+from BTrees.OOBTree import OOBTree\n from OFS.Uninstalled import BrokenClass\n+from persistent import Persistent\n+from plone.contentrules.engine.interfaces import IRuleAssignable\n+from plone.contentrules.engine.interfaces import IRuleAssignment\n+from plone.contentrules.engine.interfaces import IRuleAssignmentManager\n+from plone.contentrules.engine.interfaces import IRuleStorage\n from ZODB.broken import PersistentBroken\n-from zope.interface import implementer, implementer\n-from zope.component import adapter, queryUtility\n from zope.annotation.interfaces import IAnnotations\n-from zope.container.ordered import OrderedContainer\n+from zope.component import adapter\n+from zope.component import queryUtility\n from zope.container.contained import Contained\n from zope.container.interfaces import IObjectAddedEvent\n+from zope.container.ordered import OrderedContainer\n+from zope.interface import implementer\n \n-from plone.contentrules.engine.interfaces import IRuleStorage\n-from plone.contentrules.engine.interfaces import IRuleAssignable\n-from plone.contentrules.engine.interfaces import IRuleAssignment\n-from plone.contentrules.engine.interfaces import IRuleAssignmentManager\n-\n-from BTrees.OOBTree import OOBTree\n \n try:\n     from plone.protect.auto import safeWrite\ndiff --git a/plone/contentrules/engine/executor.py b/plone/contentrules/engine/executor.py\nindex 09d871f..734d75e 100644\n--- a/plone/contentrules/engine/executor.py\n+++ b/plone/contentrules/engine/executor.py\n@@ -1,13 +1,12 @@\n-from zope.interface import implementer\n-from zope.component import adapts, getMultiAdapter\n-\n-from plone.contentrules.engine.interfaces import IRuleExecutor\n from plone.contentrules.engine.interfaces import IRuleAssignable\n from plone.contentrules.engine.interfaces import IRuleAssignmentManager\n-\n+from plone.contentrules.engine.interfaces import IRuleExecutor\n from plone.contentrules.engine.interfaces import StopRule\n-\n from plone.contentrules.rule.interfaces import IExecutable\n+from zope.component import adapts\n+from zope.component import getMultiAdapter\n+from zope.interface import implementer\n+\n \n @implementer(IRuleExecutor)\n class RuleExecutor:\ndiff --git a/plone/contentrules/engine/interfaces.py b/plone/contentrules/engine/interfaces.py\nindex 40a318f..f44cf42 100644\n--- a/plone/contentrules/engine/interfaces.py\n+++ b/plone/contentrules/engine/interfaces.py\n@@ -1,12 +1,12 @@\n-from zope.interface import Interface, Attribute\n from zope import schema\n-\n+from zope.annotation.interfaces import IAttributeAnnotatable\n+from zope.container.constraints import contains\n from zope.container.interfaces import IContained\n-from zope.container.interfaces import IOrderedContainer\n from zope.container.interfaces import IContainerNamesContainer\n+from zope.container.interfaces import IOrderedContainer\n+from zope.interface import Attribute\n+from zope.interface import Interface\n \n-from zope.container.constraints import contains\n-from zope.annotation.interfaces import IAttributeAnnotatable\n \n class StopRule(Exception):\n     """An event that informs us that rule execution should be aborted.\ndiff --git a/plone/contentrules/engine/storage.py b/plone/contentrules/engine/storage.py\nindex 0105015..b272d56 100644\n--- a/plone/contentrules/engine/storage.py\n+++ b/plone/contentrules/engine/storage.py\n@@ -1,9 +1,8 @@\n-from zope.interface import implementer\n-from zope.container.ordered import OrderedContainer\n-\n+from BTrees.OOBTree import OOBTree\n from plone.contentrules.engine.interfaces import IRuleStorage\n+from zope.container.ordered import OrderedContainer\n+from zope.interface import implementer\n \n-from BTrees.OOBTree import OOBTree\n \n @implementer(IRuleStorage)\n class RuleStorage(OrderedContainer):\ndiff --git a/plone/contentrules/engine/utils.py b/plone/contentrules/engine/utils.py\nindex af1b17d..1c2137f 100644\n--- a/plone/contentrules/engine/utils.py\n+++ b/plone/contentrules/engine/utils.py\n@@ -1,5 +1,7 @@\n+from plone.contentrules.rule.interfaces import IRuleAction\n+from plone.contentrules.rule.interfaces import IRuleCondition\n from zope.component import getAllUtilitiesRegisteredFor\n-from plone.contentrules.rule.interfaces import IRuleCondition, IRuleAction\n+\n \n def getAvailableConditions(context, eventType):\n     conditions = getAllUtilitiesRegisteredFor(IRuleCondition)\ndiff --git a/plone/contentrules/rule/element.py b/plone/contentrules/rule/element.py\nindex 2ca9276..f971ee8 100644\n--- a/plone/contentrules/rule/element.py\n+++ b/plone/contentrules/rule/element.py\n@@ -1,6 +1,9 @@\n-from zope.interface import implementer, Interface\n+from plone.contentrules.rule.interfaces import IRuleAction\n+from plone.contentrules.rule.interfaces import IRuleCondition\n+from plone.contentrules.rule.interfaces import IRuleElement\n+from zope.interface import implementer\n+from zope.interface import Interface\n \n-from plone.contentrules.rule.interfaces import IRuleElement, IRuleCondition, IRuleAction\n \n @implementer(IRuleElement)\n class RuleElement:\ndiff --git a/plone/contentrules/rule/eventvocab.py b/plone/contentrules/rule/eventvocab.py\nindex 70a03c0..298c7a1 100644\n--- a/plone/contentrules/rule/eventvocab.py\n+++ b/plone/contentrules/rule/eventvocab.py\n@@ -1,7 +1,8 @@\n from plone.contentrules.rule.interfaces import IRuleEventType\n from zope.componentvocabulary.vocabulary import UtilityVocabulary\n from zope.i18nmessageid import MessageFactory\n-from zope.interface import Interface, provider\n+from zope.interface import Interface\n+from zope.interface import provider\n from zope.interface.interfaces import IInterface\n from zope.schema.interfaces import IVocabularyFactory\n from zope.schema.vocabulary import SimpleTerm\ndiff --git a/plone/contentrules/rule/interfaces.py b/plone/contentrules/rule/interfaces.py\nindex 3bb0728..7e9c823 100644\n--- a/plone/contentrules/rule/interfaces.py\n+++ b/plone/contentrules/rule/interfaces.py\n@@ -2,15 +2,12 @@\n """\n __docformat__ = \'restructuredtext\'\n \n-from zope.interface import Interface\n-from zope.interface.interfaces import IInterface\n-\n-from zope.container.interfaces import IContained\n-\n+from plone.contentrules import PloneMessageFactory as _\n from zope import schema\n from zope.configuration import fields as configuration_fields\n-\n-from plone.contentrules import PloneMessageFactory as _\n+from zope.container.interfaces import IContained\n+from zope.interface import Interface\n+from zope.interface.interfaces import IInterface\n \n \n class IRuleElementData(Interface):\ndiff --git a/plone/contentrules/rule/metaconfigure.py b/plone/contentrules/rule/metaconfigure.py\nindex 2f533f6..231d68c 100644\n--- a/plone/contentrules/rule/metaconfigure.py\n+++ b/plone/contentrules/rule/metaconfigure.py\n@@ -1,8 +1,10 @@\n+from plone.contentrules.rule.element import RuleAction\n+from plone.contentrules.rule.element import RuleCondition\n+from plone.contentrules.rule.interfaces import IRuleAction\n+from plone.contentrules.rule.interfaces import IRuleCondition\n from zope.component.zcml import utility\n from zope.interface import Interface\n \n-from plone.contentrules.rule.interfaces import IRuleCondition, IRuleAction\n-from plone.contentrules.rule.element import RuleCondition, RuleAction\n \n def ruleConditionDirective(_context, name, title, addview, editview=None,\n         description="", for_=Interface, event=Interface, schema=None, factory=None):\ndiff --git a/plone/contentrules/rule/metadirectives.py b/plone/contentrules/rule/metadirectives.py\nindex 250dff5..40b3c84 100644\n--- a/plone/contentrules/rule/metadirectives.py\n+++ b/plone/contentrules/rule/metadirectives.py\n@@ -1,7 +1,7 @@\n-from zope.interface import Interface\n-\n from zope import schema\n from zope.configuration import fields as configuration_fields\n+from zope.interface import Interface\n+\n \n class IRuleElementDirective(Interface):\n     """Directive which registers a new rule element.\ndiff --git a/plone/contentrules/rule/rule.py b/plone/contentrules/rule/rule.py\nindex e17dae5..3dde458 100644\n--- a/plone/contentrules/rule/rule.py\n+++ b/plone/contentrules/rule/rule.py\n@@ -1,11 +1,12 @@\n from persistent import Persistent\n from persistent.list import PersistentList\n-\n-from zope.interface import implementer, Interface\n-from zope.component import adapts, getMultiAdapter\n-\n-from plone.contentrules.rule.interfaces import IRule\n from plone.contentrules.rule.interfaces import IExecutable\n+from plone.contentrules.rule.interfaces import IRule\n+from zope.component import adapts\n+from zope.component import getMultiAdapter\n+from zope.interface import implementer\n+from zope.interface import Interface\n+\n \n @implementer(IRule)\n class Rule(Persistent):\ndiff --git a/plone/contentrules/rule/tests/elements.py b/plone/contentrules/rule/tests/elements.py\nindex 496f629..7cc0076 100644\n--- a/plone/contentrules/rule/tests/elements.py\n+++ b/plone/contentrules/rule/tests/elements.py\n@@ -1,10 +1,11 @@\n """Dummies used in ZCML tests\n """\n \n-from zope.interface import Interface, implementer\n+from plone.contentrules.rule.interfaces import IRuleElementData\n from zope import schema\n+from zope.interface import implementer\n+from zope.interface import Interface\n \n-from plone.contentrules.rule.interfaces import IRuleElementData\n \n class ITestCondition(Interface):\n     test = schema.TextLine(title="Test property")\ndiff --git a/plone/contentrules/tests.py b/plone/contentrules/tests.py\nindex 5f05b4f..5c8298b 100644\n--- a/plone/contentrules/tests.py\n+++ b/plone/contentrules/tests.py\n@@ -1,11 +1,12 @@\n+from zope.component.testing import PlacelessSetup as CAPlacelessSetup\n+from zope.configuration.xmlconfig import XMLConfig\n+from zope.container.testing import PlacelessSetup as ContainerPlacelessSetup\n+\n import doctest\n import re\n import six\n import unittest\n \n-from zope.component.testing import PlacelessSetup as CAPlacelessSetup\n-from zope.configuration.xmlconfig import XMLConfig\n-from zope.container.testing import PlacelessSetup as ContainerPlacelessSetup\n \n optionflags = doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS\n \ndiff --git a/setup.py b/setup.py\nindex 8f710fe..4d9f914 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,6 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n+\n \n version = \'2.1.4.dev0\'\n \n'

Repository: plone.contentrules


Branch: refs/heads/master
Date: 2023-04-15T12:54:59+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.contentrules/commit/672bb6238328fb01abfc70dabe05617288995388

chore: black

Files changed:
M plone/__init__.py
M plone/contentrules/__init__.py
M plone/contentrules/engine/assignments.py
M plone/contentrules/engine/executor.py
M plone/contentrules/engine/interfaces.py
M plone/contentrules/engine/storage.py
M plone/contentrules/engine/utils.py
M plone/contentrules/rule/element.py
M plone/contentrules/rule/eventvocab.py
M plone/contentrules/rule/interfaces.py
M plone/contentrules/rule/metaconfigure.py
M plone/contentrules/rule/metadirectives.py
M plone/contentrules/rule/rule.py
M plone/contentrules/rule/tests/elements.py
M plone/contentrules/tests.py
M setup.py

b'diff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/contentrules/__init__.py b/plone/contentrules/__init__.py\nindex 38460eb..0f4e045 100644\n--- a/plone/contentrules/__init__.py\n+++ b/plone/contentrules/__init__.py\n@@ -1,4 +1,4 @@\n from zope.i18nmessageid import MessageFactory\n \n \n-PloneMessageFactory = MessageFactory(\'plone\')\n+PloneMessageFactory = MessageFactory("plone")\ndiff --git a/plone/contentrules/engine/assignments.py b/plone/contentrules/engine/assignments.py\nindex 1e3f252..42149b7 100644\n--- a/plone/contentrules/engine/assignments.py\n+++ b/plone/contentrules/engine/assignments.py\n@@ -18,6 +18,7 @@\n try:\n     from plone.protect.auto import safeWrite\n except ImportError:\n+\n     def safeWrite(*args):\n         pass\n \n@@ -28,15 +29,16 @@ def check_rules_with_dotted_name_moved(rule):\n     Avoids any upgrade to fail when setup profile is re-imported.\n     """\n     if PersistentBroken in rule.event.__bases__ or BrokenClass in rule.event.__bases__:\n-        if rule.event.__name__ == \'IObjectAddedEvent\':\n+        if rule.event.__name__ == "IObjectAddedEvent":\n             rule.event = IObjectAddedEvent\n \n-KEY = \'plone.contentrules.localassignments\'\n+\n+KEY = "plone.contentrules.localassignments"\n+\n \n @implementer(IRuleAssignment)\n class RuleAssignment(Contained, Persistent):\n-    """An assignment of a rule to a context\n-    """\n+    """An assignment of a rule to a context"""\n \n     def __init__(self, ruleid, enabled=True, bubbles=False):\n         super().__init__()\n@@ -44,10 +46,10 @@ def __init__(self, ruleid, enabled=True, bubbles=False):\n         self.enabled = enabled\n         self.bubbles = bubbles\n \n+\n @implementer(IRuleAssignmentManager)\n class RuleAssignmentManager(OrderedContainer):\n-    """A context-specific container for rule assignments\n-    """\n+    """A context-specific container for rule assignments"""\n \n     def __init__(self):\n         # XXX: This depends on implementation detail in OrderedContainer,\n@@ -80,6 +82,7 @@ def getRules(self, event, bubbled=False):\n \n         return rules\n \n+\n @adapter(IRuleAssignable)\n @implementer(IRuleAssignmentManager)\n def ruleAssignmentManagerAdapterFactory(context):\ndiff --git a/plone/contentrules/engine/executor.py b/plone/contentrules/engine/executor.py\nindex 734d75e..b3aec27 100644\n--- a/plone/contentrules/engine/executor.py\n+++ b/plone/contentrules/engine/executor.py\n@@ -10,8 +10,8 @@\n \n @implementer(IRuleExecutor)\n class RuleExecutor:\n-    """An object that can execute rules in its context.\n-    """\n+    """An object that can execute rules in its context."""\n+\n     adapts(IRuleAssignable)\n \n     def __init__(self, context):\n@@ -29,7 +29,7 @@ def __call__(self, event, bubbled=False, rule_filter=None):\n                 # we store cascading option in the filter. if true, this will allow\n                 # rules to be executed because of the actions ran by this rule.\n                 if rule_filter is not None:\n-                    cascade_before = getattr(rule_filter, \'cascade\', False)\n+                    cascade_before = getattr(rule_filter, "cascade", False)\n                     rule_filter.cascade = rule.cascading\n \n                 executable = getMultiAdapter((self.context, rule, event), IExecutable)\ndiff --git a/plone/contentrules/engine/interfaces.py b/plone/contentrules/engine/interfaces.py\nindex f44cf42..53a5556 100644\n--- a/plone/contentrules/engine/interfaces.py\n+++ b/plone/contentrules/engine/interfaces.py\n@@ -9,31 +9,34 @@\n \n \n class StopRule(Exception):\n-    """An event that informs us that rule execution should be aborted.\n-    """\n+    """An event that informs us that rule execution should be aborted."""\n \n     def __init__(self, rule):\n         self.rule = rule\n \n+\n class IRuleStorage(IOrderedContainer, IContainerNamesContainer):\n-    """A storage for rules. This is registered as a local utility.\n-    """\n-    contains(\'plone.contentrules.rule.interfaces.IRule\')\n+    """A storage for rules. This is registered as a local utility."""\n+\n+    contains("plone.contentrules.rule.interfaces.IRule")\n \n     active = schema.Bool(title="Rules in this storage are active")\n \n+\n class IRuleAssignable(IAttributeAnnotatable):\n-    """Marker interface for objects that can be assigned rules\n-    """\n+    """Marker interface for objects that can be assigned rules"""\n+\n \n class IRuleAssignment(IContained):\n-    """An assignment of a rule to a context\n-    """\n+    """An assignment of a rule to a context"""\n \n     __name__ = schema.TextLine(title="The id of the rule")\n \n     enabled = schema.Bool(title="Whether or not the rule is currently enabled")\n-    bubbles = schema.Bool(title="Whether or not the rule will apply to objects in subfolders")\n+    bubbles = schema.Bool(\n+        title="Whether or not the rule will apply to objects in subfolders"\n+    )\n+\n \n class IRuleAssignmentManager(IOrderedContainer):\n     """An object that is capable of being assigned rules.\n@@ -48,6 +51,7 @@ def getRules(event, bubbled=False):\n         bubbleable will be returned.\n         """\n \n+\n class IRuleExecutor(Interface):\n     """An object that is capable of executing rules.\n \ndiff --git a/plone/contentrules/engine/storage.py b/plone/contentrules/engine/storage.py\nindex b272d56..0d78b19 100644\n--- a/plone/contentrules/engine/storage.py\n+++ b/plone/contentrules/engine/storage.py\n@@ -6,8 +6,7 @@\n \n @implementer(IRuleStorage)\n class RuleStorage(OrderedContainer):\n-    """A container for rules.\n-    """\n+    """A container for rules."""\n \n     active = True\n \ndiff --git a/plone/contentrules/engine/utils.py b/plone/contentrules/engine/utils.py\nindex 1c2137f..1fcd2ae 100644\n--- a/plone/contentrules/engine/utils.py\n+++ b/plone/contentrules/engine/utils.py\n@@ -5,22 +5,31 @@\n \n def getAvailableConditions(context, eventType):\n     conditions = getAllUtilitiesRegisteredFor(IRuleCondition)\n-    return [c for c in conditions if\n-                (c.event is None or eventType.isOrExtends(c.event)) and\n-                (c.for_ is None or c.for_.providedBy(context))]\n+    return [\n+        c\n+        for c in conditions\n+        if (c.event is None or eventType.isOrExtends(c.event))\n+        and (c.for_ is None or c.for_.providedBy(context))\n+    ]\n+\n \n def allAvailableConditions(eventType):\n     conditions = getAllUtilitiesRegisteredFor(IRuleCondition)\n-    return [c for c in conditions if\n-                (c.event is None or eventType.isOrExtends(c.event))]\n+    return [\n+        c for c in conditions if (c.event is None or eventType.isOrExtends(c.event))\n+    ]\n+\n \n def getAvailableActions(context, eventType):\n     actions = getAllUtilitiesRegisteredFor(IRuleAction)\n-    return [a for a in actions if\n-                (a.event is None or eventType.isOrExtends(a.event)) and\n-                (a.for_ is None or a.for_.providedBy(context))]\n+    return [\n+        a\n+        for a in actions\n+        if (a.event is None or eventType.isOrExtends(a.event))\n+        and (a.for_ is None or a.for_.providedBy(context))\n+    ]\n+\n \n def allAvailableActions(eventType):\n     actions = getAllUtilitiesRegisteredFor(IRuleAction)\n-    return [a for a in actions if\n-                (a.event is None or eventType.isOrExtends(a.event))]\n+    return [a for a in actions if (a.event is None or eventType.isOrExtends(a.event))]\ndiff --git a/plone/contentrules/rule/element.py b/plone/contentrules/rule/element.py\nindex f971ee8..4c41b1c 100644\n--- a/plone/contentrules/rule/element.py\n+++ b/plone/contentrules/rule/element.py\n@@ -13,8 +13,8 @@ class RuleElement:\n     register them as utilities.\n     """\n \n-    title = \'\'\n-    description = \'\'\n+    title = ""\n+    description = ""\n     for_ = Interface\n     event = None\n     addview = None\n@@ -22,6 +22,7 @@ class RuleElement:\n     schema = None\n     factory = None\n \n+\n @implementer(IRuleCondition)\n class RuleCondition(RuleElement):\n     """A rule condition.\n@@ -31,6 +32,7 @@ class RuleCondition(RuleElement):\n     of elements.\n     """\n \n+\n @implementer(IRuleAction)\n class RuleAction(RuleElement):\n     """A rule action.\ndiff --git a/plone/contentrules/rule/eventvocab.py b/plone/contentrules/rule/eventvocab.py\nindex 298c7a1..cdad93e 100644\n--- a/plone/contentrules/rule/eventvocab.py\n+++ b/plone/contentrules/rule/eventvocab.py\n@@ -11,7 +11,7 @@\n import zope.component\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n \n @provider(IVocabularyFactory)\n@@ -20,12 +20,13 @@ class EventTypesVocabulary(UtilityVocabulary):\n     attribute of an IRule.\n     An internationalized version of UtilityVocabulary\n     """\n+\n     interface = IRuleEventType\n \n     def __init__(self, context, **kw):\n         if kw:\n-            self.nameOnly = bool(kw.get(\'nameOnly\', False))\n-            interface = kw.get(\'interface\', Interface)\n+            self.nameOnly = bool(kw.get("nameOnly", False))\n+            interface = kw.get("interface", Interface)\n             if isinstance(interface, ((str,), str)):\n                 interface = zope.component.getUtility(IInterface, interface)\n             self.interface = interface\n@@ -33,4 +34,5 @@ def __init__(self, context, **kw):\n         utils = zope.component.getUtilitiesFor(self.interface, context)\n         self._terms = {\n             name: SimpleTerm(self.nameOnly and name or util, name, _(name))\n-            for name, util in utils}\n+            for name, util in utils\n+        }\ndiff --git a/plone/contentrules/rule/interfaces.py b/plone/contentrules/rule/interfaces.py\nindex 7e9c823..7c8f561 100644\n--- a/plone/contentrules/rule/interfaces.py\n+++ b/plone/contentrules/rule/interfaces.py\n@@ -1,6 +1,6 @@\n """\n """\n-__docformat__ = \'restructuredtext\'\n+__docformat__ = "restructuredtext"\n \n from plone.contentrules import PloneMessageFactory as _\n from zope import schema\n@@ -15,13 +15,18 @@ class IRuleElementData(Interface):\n     or conditions).\n     """\n \n-    element = schema.ASCII(title="Rule element",\n-                              description="The name of the rule action or condition",\n-                              required=True)\n+    element = schema.ASCII(\n+        title="Rule element",\n+        description="The name of the rule action or condition",\n+        required=True,\n+    )\n+\n+    summary = schema.Text(\n+        title="Summary",\n+        description="A human-readable description of this element as it is configured",\n+        required=True,\n+    )\n \n-    summary = schema.Text(title="Summary",\n-                          description="A human-readable description of this element as it is configured",\n-                          required=True)\n \n class IRuleElement(Interface):\n     """Base interface for rule elements (actions and conditions)\n@@ -30,44 +35,44 @@ class IRuleElement(Interface):\n     form a rule.Rules can be constructed by the user and invoked by the\n     IRuleExecuter\n     """\n-    title = schema.TextLine(\n-        title = \'Title\',\n-        required = True)\n \n-    description = schema.Text(\n-        title = \'Description\',\n-        required = False)\n+    title = schema.TextLine(title="Title", required=True)\n+\n+    description = schema.Text(title="Description", required=False)\n \n     for_ = configuration_fields.GlobalInterface(\n-        title = \'Available for\',\n-        description = \'The interface this component is available for\',\n-        required = False)\n+        title="Available for",\n+        description="The interface this component is available for",\n+        required=False,\n+    )\n \n     event = configuration_fields.GlobalInterface(\n-        title = \'Applicable event\',\n-        description = \'The event that can trigger this element, None meaning \'\n-                       \'it is not event specific.\',\n-        required = False)\n+        title="Applicable event",\n+        description="The event that can trigger this element, None meaning "\n+        "it is not event specific.",\n+        required=False,\n+    )\n \n     addview = schema.TextLine(\n-        title = \'Add view\',\n-        description = \'The name of the add view\',\n-        required = True)\n+        title="Add view", description="The name of the add view", required=True\n+    )\n \n     editview = schema.TextLine(\n-        title = "Edit view",\n-        description = "The name of the edit view",\n-        required = True)\n+        title="Edit view", description="The name of the edit view", required=True\n+    )\n \n     schema = configuration_fields.GlobalInterface(\n-        title = \'Schema\',\n-        description = \'Schema interface for configuring the element\',\n-        required = False)\n+        title="Schema",\n+        description="Schema interface for configuring the element",\n+        required=False,\n+    )\n \n     factory = configuration_fields.GlobalInterface(\n-        title = \'Factory\',\n-        description = \'Callable which creates an instance of the element\',\n-        required = False)\n+        title="Factory",\n+        description="Callable which creates an instance of the element",\n+        required=False,\n+    )\n+\n \n class IRuleCondition(IRuleElement):\n     """A condition of a rule\n@@ -76,6 +81,7 @@ class IRuleCondition(IRuleElement):\n     fail, the next element will be executed.\n     """\n \n+\n class IRuleAction(IRuleElement):\n     """An action executed as part of a rule.\n \n@@ -83,45 +89,68 @@ class IRuleAction(IRuleElement):\n     Once an action is finished, the next element will be executed.\n     """\n \n+\n class IRuleEventType(IInterface):\n     """Marker interface for event interfaces that can be used as the \'event\'\n     type of an IRule.\n     """\n \n-class IRuleConfiguration(Interface):\n-    """Configurable options for a rule\n-    """\n-\n-    title = schema.TextLine(title = _(\'Title\'),\n-                            description = _(\'description_contentrule_title\',\n-                                            default=\'Please set a descriptive title for the rule.\'),\n-                            required = True)\n-\n-    description = schema.Text(title = _(\'Description\'),\n-                              description = _(\'contentrules_description_description\',\n-                                              default=\'Enter a short description of the rule and its purpose.\'),\n-                              required = False)\n-\n-    event = schema.Choice(title = _(\'Triggering event\'),\n-                          description = _(\'contentrules_description_trigger\',\n-                                          default=\'The rule will execute when the following event occurs.\'),\n-                          required = True,\n-                          vocabulary="plone.contentrules.events")\n \n-    enabled = schema.Bool(title = _(\'Enabled\'),\n-                          description = _(\'Whether or not the rule is currently enabled\'),\n-                          default = True,\n-                          required = False)\n+class IRuleConfiguration(Interface):\n+    """Configurable options for a rule"""\n \n-    stop = schema.Bool(title = _("Stop executing rules"),\n-                       description = _("Whether or not execution of further rules should stop after this rule is executed"),\n-                       default = False,\n-                       required = False)\n+    title = schema.TextLine(\n+        title=_("Title"),\n+        description=_(\n+            "description_contentrule_title",\n+            default="Please set a descriptive title for the rule.",\n+        ),\n+        required=True,\n+    )\n \n-    cascading = schema.Bool(title = _("Cascading rule"),\n-                       description = _("Whether or not other rules should be triggered by the actions launched by this rule. Activate this only if you are sure this won\'t create infinite loops."),\n-                       default = False,\n-                       required = False)\n+    description = schema.Text(\n+        title=_("Description"),\n+        description=_(\n+            "contentrules_description_description",\n+            default="Enter a short description of the rule and its purpose.",\n+        ),\n+        required=False,\n+    )\n+\n+    event = schema.Choice(\n+        title=_("Triggering event"),\n+        description=_(\n+            "contentrules_description_trigger",\n+            default="The rule will execute when the following event occurs.",\n+        ),\n+        required=True,\n+        vocabulary="plone.contentrules.events",\n+    )\n+\n+    enabled = schema.Bool(\n+        title=_("Enabled"),\n+        description=_("Whether or not the rule is currently enabled"),\n+        default=True,\n+        required=False,\n+    )\n+\n+    stop = schema.Bool(\n+        title=_("Stop executing rules"),\n+        description=_(\n+            "Whether or not execution of further rules should stop after this rule is executed"\n+        ),\n+        default=False,\n+        required=False,\n+    )\n+\n+    cascading = schema.Bool(\n+        title=_("Cascading rule"),\n+        description=_(\n+            "Whether or not other rules should be triggered by the actions launched by this rule. Activate this only if you are sure this won\'t create infinite loops."\n+        ),\n+        default=False,\n+        required=False,\n+    )\n \n \n class IRule(IContained, IRuleConfiguration):\n@@ -135,14 +164,13 @@ class IRule(IContained, IRuleConfiguration):\n     When saved in a rule storage, it will be given a name.\n     """\n \n+    conditions = schema.List(\n+        title="Conditions", description="The conditions of this rule", required=True\n+    )\n \n-    conditions = schema.List(title = \'Conditions\',\n-                             description = \'The conditions of this rule\',\n-                             required = True)\n-\n-    actions = schema.List(title = \'Actions\',\n-                          description = \'The actions of this rule\',\n-                          required = True)\n+    actions = schema.List(\n+        title="Actions", description="The actions of this rule", required=True\n+    )\n \n \n class IExecutable(Interface):\ndiff --git a/plone/contentrules/rule/metaconfigure.py b/plone/contentrules/rule/metaconfigure.py\nindex 231d68c..1c7536c 100644\n--- a/plone/contentrules/rule/metaconfigure.py\n+++ b/plone/contentrules/rule/metaconfigure.py\n@@ -6,8 +6,18 @@\n from zope.interface import Interface\n \n \n-def ruleConditionDirective(_context, name, title, addview, editview=None,\n-        description="", for_=Interface, event=Interface, schema=None, factory=None):\n+def ruleConditionDirective(\n+    _context,\n+    name,\n+    title,\n+    addview,\n+    editview=None,\n+    description="",\n+    for_=Interface,\n+    event=Interface,\n+    schema=None,\n+    factory=None,\n+):\n     """Register a utility for IRuleCondition based on the parameters in the\n     zcml directive\n     """\n@@ -25,8 +35,18 @@ def ruleConditionDirective(_context, name, title, addview, editview=None,\n     utility(_context, provides=IRuleCondition, component=condition, name=name)\n \n \n-def ruleActionDirective(_context, name, title, addview, editview=None,\n-    description="", for_=Interface, event=Interface, schema=None, factory=None):\n+def ruleActionDirective(\n+    _context,\n+    name,\n+    title,\n+    addview,\n+    editview=None,\n+    description="",\n+    for_=Interface,\n+    event=Interface,\n+    schema=None,\n+    factory=None,\n+):\n     """Register a utility for IRuleAction based on the parameters in the\n     zcml directive\n     """\ndiff --git a/plone/contentrules/rule/metadirectives.py b/plone/contentrules/rule/metadirectives.py\nindex 40b3c84..7d42995 100644\n--- a/plone/contentrules/rule/metadirectives.py\n+++ b/plone/contentrules/rule/metadirectives.py\n@@ -10,54 +10,57 @@ class IRuleElementDirective(Interface):\n     """\n \n     name = schema.TextLine(\n-        title="Name",\n-        description="A unique name for the element",\n-        required=True)\n+        title="Name", description="A unique name for the element", required=True\n+    )\n \n     title = schema.TextLine(\n         title="Title",\n         description="A user-friendly title for the element",\n-        required=True)\n+        required=True,\n+    )\n \n     description = schema.Text(\n         title="Description",\n         description="A helpful description of the element",\n-        required=False)\n+        required=False,\n+    )\n \n     for_ = configuration_fields.GlobalInterface(\n-        title = "Available for",\n-        description = "The interface this element is available for",\n-        required = False)\n+        title="Available for",\n+        description="The interface this element is available for",\n+        required=False,\n+    )\n \n     event = configuration_fields.GlobalInterface(\n-        title = "Event",\n-        description = "The event this element is available for",\n-        required = False)\n+        title="Event",\n+        description="The event this element is available for",\n+        required=False,\n+    )\n \n     addview = schema.TextLine(\n-        title = "Add view",\n-        description = "Name of the add view",\n-        required = True)\n+        title="Add view", description="Name of the add view", required=True\n+    )\n \n     editview = schema.TextLine(\n-        title = "Edit view",\n-        description = "Name of the edit view",\n-        required = False)\n+        title="Edit view", description="Name of the edit view", required=False\n+    )\n \n     schema = configuration_fields.GlobalInterface(\n-        title = "Schema",\n-        description = "The schema interface for configuring the element",\n-        required = False)\n+        title="Schema",\n+        description="The schema interface for configuring the element",\n+        required=False,\n+    )\n \n     factory = configuration_fields.GlobalObject(\n-        title = "Factory",\n-        description = "A callable which can create the element",\n-        required = False)\n+        title="Factory",\n+        description="A callable which can create the element",\n+        required=False,\n+    )\n+\n \n class IRuleActionDirective(IRuleElementDirective):\n-    """An element directive describing what is logically an action element.\n-    """\n+    """An element directive describing what is logically an action element."""\n+\n \n class IRuleConditionDirective(IRuleElementDirective):\n-    """An element directive describing what is logically a condition element.\n-    """\n+    """An element directive describing what is logically a condition element."""\ndiff --git a/plone/contentrules/rule/rule.py b/plone/contentrules/rule/rule.py\nindex 3dde458..062af01 100644\n--- a/plone/contentrules/rule/rule.py\n+++ b/plone/contentrules/rule/rule.py\n@@ -10,11 +10,10 @@\n \n @implementer(IRule)\n class Rule(Persistent):\n-    """A rule.\n-    """\n+    """A rule."""\n \n-    title = \'\'\n-    description = \'\'\n+    title = ""\n+    description = ""\n     event = None\n     enabled = True\n     stop = False\n@@ -27,10 +26,11 @@ def __init__(self):\n         self.conditions = PersistentList()\n         self.actions = PersistentList()\n \n+\n @implementer(IExecutable)\n class RuleExecutable:\n-    """An adapter capable of executing a rule\n-    """\n+    """An adapter capable of executing a rule"""\n+\n     adapts(Interface, IRule, Interface)\n \n     def __init__(self, context, rule, event):\n@@ -40,11 +40,15 @@ def __init__(self, context, rule, event):\n \n     def __call__(self):\n         for condition in self.rule.conditions:\n-            executable = getMultiAdapter((self.context, condition, self.event), IExecutable)\n+            executable = getMultiAdapter(\n+                (self.context, condition, self.event), IExecutable\n+            )\n             if not executable():\n                 return False\n         for action in self.rule.actions:\n-            executable = getMultiAdapter((self.context, action, self.event), IExecutable)\n+            executable = getMultiAdapter(\n+                (self.context, action, self.event), IExecutable\n+            )\n             if not executable():\n                 return False\n         return True\ndiff --git a/plone/contentrules/rule/tests/elements.py b/plone/contentrules/rule/tests/elements.py\nindex 7cc0076..ae18933 100644\n--- a/plone/contentrules/rule/tests/elements.py\n+++ b/plone/contentrules/rule/tests/elements.py\n@@ -10,6 +10,7 @@\n class ITestCondition(Interface):\n     test = schema.TextLine(title="Test property")\n \n+\n @implementer(ITestCondition, IRuleElementData)\n class TestCondition:\n     test = ""\n@@ -17,9 +18,11 @@ class TestCondition:\n     summary = "Test condition"\n     element = "test.condition"\n \n+\n class ITestAction(Interface):\n     test = schema.TextLine(title="Test property")\n \n+\n @implementer(ITestAction, IRuleElementData)\n class TestAction:\n     test = ""\ndiff --git a/plone/contentrules/tests.py b/plone/contentrules/tests.py\nindex 5c8298b..7a12ef8 100644\n--- a/plone/contentrules/tests.py\n+++ b/plone/contentrules/tests.py\n@@ -12,7 +12,6 @@\n \n \n class Py23DocChecker(doctest.OutputChecker):\n-\n     def check_output(self, want, got, optionflags):\n         if six.PY2:\n             got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n@@ -20,21 +19,23 @@ def check_output(self, want, got, optionflags):\n \n \n class PlacelessSetup(CAPlacelessSetup, ContainerPlacelessSetup):\n-\n     def setUp(self, doctesttest=None):\n         CAPlacelessSetup.setUp(self)\n         ContainerPlacelessSetup.setUp(self)\n \n+\n ps = PlacelessSetup()\n \n \n def configurationSetUp(test):\n     ps.setUp()\n     import zope.component\n-    XMLConfig(\'meta.zcml\', zope.component)()\n+\n+    XMLConfig("meta.zcml", zope.component)()\n \n     import plone.contentrules\n-    XMLConfig(\'configure.zcml\', plone.contentrules)()\n+\n+    XMLConfig("configure.zcml", plone.contentrules)()\n \n \n def configurationTearDown(test):\n@@ -42,19 +43,21 @@ def configurationTearDown(test):\n \n \n def test_suite():\n-    return unittest.TestSuite((\n-        doctest.DocFileSuite(\n-            \'README.rst\',\n-            setUp=configurationSetUp,\n-            tearDown=configurationTearDown,\n-            optionflags=optionflags,\n-            checker=Py23DocChecker(),\n+    return unittest.TestSuite(\n+        (\n+            doctest.DocFileSuite(\n+                "README.rst",\n+                setUp=configurationSetUp,\n+                tearDown=configurationTearDown,\n+                optionflags=optionflags,\n+                checker=Py23DocChecker(),\n             ),\n-        doctest.DocFileSuite(\n-            \'zcml.rst\',\n-            setUp=configurationSetUp,\n-            tearDown=configurationTearDown,\n-            optionflags=optionflags,\n-            checker=Py23DocChecker(),\n+            doctest.DocFileSuite(\n+                "zcml.rst",\n+                setUp=configurationSetUp,\n+                tearDown=configurationTearDown,\n+                optionflags=optionflags,\n+                checker=Py23DocChecker(),\n             ),\n-        ))\n+        )\n+    )\ndiff --git a/setup.py b/setup.py\nindex 4d9f914..9b5f715 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,14 +2,13 @@\n from setuptools import setup\n \n \n-version = \'2.1.4.dev0\'\n+version = "2.1.4.dev0"\n \n setup(\n-    name=\'plone.contentrules\',\n+    name="plone.contentrules",\n     version=version,\n     description="Plone ContentRules Engine",\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n@@ -27,28 +26,28 @@\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n     ],\n-    keywords=\'Plone content rules events\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.contentrules\',\n-    license=\'GPL version 2\',\n+    keywords="Plone content rules events",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.contentrules",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-      \'setuptools\',\n-      \'six\',\n-      \'ZODB\',\n-      \'zope.annotation\',\n-      \'zope.component\',\n-      \'zope.componentvocabulary\',\n-      \'zope.configuration\',\n-      \'zope.container\',\n-      \'zope.i18nmessageid\',\n-      \'zope.interface\',\n-      \'zope.lifecycleevent\',\n-      \'zope.schema\',\n-      \'zope.testing\',\n+        "setuptools",\n+        "six",\n+        "ZODB",\n+        "zope.annotation",\n+        "zope.component",\n+        "zope.componentvocabulary",\n+        "zope.configuration",\n+        "zope.container",\n+        "zope.i18nmessageid",\n+        "zope.interface",\n+        "zope.lifecycleevent",\n+        "zope.schema",\n+        "zope.testing",\n     ],\n-    )\n+)\n'

Repository: plone.contentrules


Branch: refs/heads/master
Date: 2023-04-15T12:55:20+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.contentrules/commit/ecb5cf0758409acb0f3c15dd37d480dcd53900b0

chore: zpretty

Files changed:
M plone/contentrules/configure.zcml
M plone/contentrules/engine/configure.zcml
M plone/contentrules/meta.zcml
M plone/contentrules/rule/configure.zcml
M plone/contentrules/rule/meta.zcml

b'diff --git a/plone/contentrules/configure.zcml b/plone/contentrules/configure.zcml\nindex 80cc827..62a4f2c 100644\n--- a/plone/contentrules/configure.zcml\n+++ b/plone/contentrules/configure.zcml\n@@ -1,8 +1,8 @@\n <configure xmlns="http://namespaces.zope.org/zope">\n \n-    <include package="zope.annotation" />\n+  <include package="zope.annotation" />\n \n-    <include package=".engine" />\n-    <include package=".rule" />\n+  <include package=".engine" />\n+  <include package=".rule" />\n \n-</configure>\n\\ No newline at end of file\n+</configure>\ndiff --git a/plone/contentrules/engine/configure.zcml b/plone/contentrules/engine/configure.zcml\nindex 541c1c9..8849307 100644\n--- a/plone/contentrules/engine/configure.zcml\n+++ b/plone/contentrules/engine/configure.zcml\n@@ -1,6 +1,6 @@\n <configure xmlns="http://namespaces.zope.org/zope">\n \n-    <adapter factory=".assignments.ruleAssignmentManagerAdapterFactory" />\n-    <adapter factory=".executor.RuleExecutor" />\n+  <adapter factory=".assignments.ruleAssignmentManagerAdapterFactory" />\n+  <adapter factory=".executor.RuleExecutor" />\n \n </configure>\ndiff --git a/plone/contentrules/meta.zcml b/plone/contentrules/meta.zcml\nindex 9e0368b..3a9ffd8 100644\n--- a/plone/contentrules/meta.zcml\n+++ b/plone/contentrules/meta.zcml\n@@ -1,5 +1,8 @@\n <configure xmlns="http://namespaces.zope.org/zope">\n \n-    <include package=".rule" file="meta.zcml" />\n+  <include\n+      package=".rule"\n+      file="meta.zcml"\n+      />\n \n </configure>\ndiff --git a/plone/contentrules/rule/configure.zcml b/plone/contentrules/rule/configure.zcml\nindex ec59962..7367635 100644\n--- a/plone/contentrules/rule/configure.zcml\n+++ b/plone/contentrules/rule/configure.zcml\n@@ -1,12 +1,10 @@\n <configure xmlns="http://namespaces.zope.org/zope">\n \n-    <adapter\n-      factory=".rule.RuleExecutable"\n-      />\n+  <adapter factory=".rule.RuleExecutable" />\n \n-    <utility\n-      component=".eventvocab.EventTypesVocabulary"\n+  <utility\n       name="plone.contentrules.events"\n+      component=".eventvocab.EventTypesVocabulary"\n       />\n \n </configure>\ndiff --git a/plone/contentrules/rule/meta.zcml b/plone/contentrules/rule/meta.zcml\nindex f5d363a..5a70f41 100644\n--- a/plone/contentrules/rule/meta.zcml\n+++ b/plone/contentrules/rule/meta.zcml\n@@ -1,21 +1,22 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:meta="http://namespaces.zope.org/meta">\n+    xmlns:meta="http://namespaces.zope.org/meta"\n+    >\n \n-    <meta:directives namespace="http://namespaces.plone.org/plone">\n+  <meta:directives namespace="http://namespaces.plone.org/plone">\n \n-        <meta:directive\n-            name="ruleCondition"\n-            schema=".metadirectives.IRuleConditionDirective"\n-            handler=".metaconfigure.ruleConditionDirective"\n-            />\n+    <meta:directive\n+        name="ruleCondition"\n+        handler=".metaconfigure.ruleConditionDirective"\n+        schema=".metadirectives.IRuleConditionDirective"\n+        />\n \n-        <meta:directive\n-            name="ruleAction"\n-            schema=".metadirectives.IRuleActionDirective"\n-            handler=".metaconfigure.ruleActionDirective"\n-            />\n+    <meta:directive\n+        name="ruleAction"\n+        handler=".metaconfigure.ruleActionDirective"\n+        schema=".metadirectives.IRuleActionDirective"\n+        />\n \n-    </meta:directives>\n+  </meta:directives>\n \n </configure>\n'

Repository: plone.contentrules


Branch: refs/heads/master
Date: 2023-04-15T12:56:14+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.contentrules/commit/7eed764496f1f8ed96c7e666893636b72feea6ef

feat: pyroma

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 9b5f715..029f12d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -35,6 +35,7 @@\n     namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n         "setuptools",\n         "six",\n'

Repository: plone.contentrules


Branch: refs/heads/master
Date: 2023-04-15T12:56:43+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.contentrules/commit/070141907443b23c29ea7594c3fc67592aa9ff3b

feat: codespell

Files changed:
M plone/contentrules/engine/executor.py

b'diff --git a/plone/contentrules/engine/executor.py b/plone/contentrules/engine/executor.py\nindex b3aec27..a6f4d56 100644\n--- a/plone/contentrules/engine/executor.py\n+++ b/plone/contentrules/engine/executor.py\n@@ -22,7 +22,7 @@ def __call__(self, event, bubbled=False, rule_filter=None):\n         for rule in assignments.getRules(event, bubbled=bubbled):\n             # for each rule assigned in this context - bubbled means rule apply on subfolders\n             if rule_filter is None or rule_filter(self.context, rule, event) == True:\n-                # execute the rule if it is not filtered, for exemple,\n+                # execute the rule if it is not filtered, for example,\n                 # it has not been executed on the same content but from an other context\n                 # in the same request\n \n'

Repository: plone.contentrules


Branch: refs/heads/master
Date: 2023-04-15T12:58:55+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.contentrules/commit/57e29261e204fa187418ab01205f8180afa265f3

feat: drop six

Files changed:
M plone/contentrules/rule/eventvocab.py
M plone/contentrules/tests.py
M plone/contentrules/zcml.rst
M setup.py

b'diff --git a/plone/contentrules/rule/eventvocab.py b/plone/contentrules/rule/eventvocab.py\nindex cdad93e..cd77946 100644\n--- a/plone/contentrules/rule/eventvocab.py\n+++ b/plone/contentrules/rule/eventvocab.py\n@@ -7,7 +7,6 @@\n from zope.schema.interfaces import IVocabularyFactory\n from zope.schema.vocabulary import SimpleTerm\n \n-import six\n import zope.component\n \n \ndiff --git a/plone/contentrules/tests.py b/plone/contentrules/tests.py\nindex 7a12ef8..687cfa6 100644\n--- a/plone/contentrules/tests.py\n+++ b/plone/contentrules/tests.py\n@@ -3,21 +3,12 @@\n from zope.container.testing import PlacelessSetup as ContainerPlacelessSetup\n \n import doctest\n-import re\n-import six\n import unittest\n \n \n optionflags = doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS\n \n \n-class Py23DocChecker(doctest.OutputChecker):\n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n-\n-\n class PlacelessSetup(CAPlacelessSetup, ContainerPlacelessSetup):\n     def setUp(self, doctesttest=None):\n         CAPlacelessSetup.setUp(self)\n@@ -50,14 +41,12 @@ def test_suite():\n                 setUp=configurationSetUp,\n                 tearDown=configurationTearDown,\n                 optionflags=optionflags,\n-                checker=Py23DocChecker(),\n             ),\n             doctest.DocFileSuite(\n                 "zcml.rst",\n                 setUp=configurationSetUp,\n                 tearDown=configurationTearDown,\n                 optionflags=optionflags,\n-                checker=Py23DocChecker(),\n             ),\n         )\n     )\ndiff --git a/plone/contentrules/zcml.rst b/plone/contentrules/zcml.rst\nindex 308a2a3..9ca2b28 100644\n--- a/plone/contentrules/zcml.rst\n+++ b/plone/contentrules/zcml.rst\n@@ -46,8 +46,7 @@ Here is how we would register these in ZCML:\n     ... """\n \n     >>> from zope.configuration.xmlconfig import xmlconfig\n-    >>> import six\n-    >>> from six import StringIO\n+    >>> from io import StringIO\n \n First, we need to make sure the ZCML directives are defined:\n \ndiff --git a/setup.py b/setup.py\nindex 029f12d..398e4b8 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -38,7 +38,6 @@\n     python_requires=">=3.8",\n     install_requires=[\n         "setuptools",\n-        "six",\n         "ZODB",\n         "zope.annotation",\n         "zope.component",\n'

Repository: plone.contentrules


Branch: refs/heads/master
Date: 2023-04-15T13:00:57+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.contentrules/commit/20d7c8730318e4565207ed47c5eec69d76046bf6

feat: flake8

Files changed:
M plone/contentrules/engine/assignments.py
M plone/contentrules/engine/executor.py
M plone/contentrules/engine/interfaces.py

b'diff --git a/plone/contentrules/engine/assignments.py b/plone/contentrules/engine/assignments.py\nindex 42149b7..497faa3 100644\n--- a/plone/contentrules/engine/assignments.py\n+++ b/plone/contentrules/engine/assignments.py\n@@ -64,7 +64,7 @@ def getRules(self, event, bubbled=False):\n             for a in self.values():\n                 if not a.enabled:\n                     continue\n-                if not (bubbled == False or a.bubbles):\n+                if not (bubbled is False or a.bubbles):\n                     continue\n \n                 r = storage.get(a.__name__, None)\ndiff --git a/plone/contentrules/engine/executor.py b/plone/contentrules/engine/executor.py\nindex a6f4d56..cfe2e83 100644\n--- a/plone/contentrules/engine/executor.py\n+++ b/plone/contentrules/engine/executor.py\n@@ -21,7 +21,7 @@ def __call__(self, event, bubbled=False, rule_filter=None):\n         assignments = IRuleAssignmentManager(self.context)\n         for rule in assignments.getRules(event, bubbled=bubbled):\n             # for each rule assigned in this context - bubbled means rule apply on subfolders\n-            if rule_filter is None or rule_filter(self.context, rule, event) == True:\n+            if rule_filter is None or rule_filter(self.context, rule, event) is True:\n                 # execute the rule if it is not filtered, for example,\n                 # it has not been executed on the same content but from an other context\n                 # in the same request\ndiff --git a/plone/contentrules/engine/interfaces.py b/plone/contentrules/engine/interfaces.py\nindex 53a5556..f0067aa 100644\n--- a/plone/contentrules/engine/interfaces.py\n+++ b/plone/contentrules/engine/interfaces.py\n@@ -4,7 +4,6 @@\n from zope.container.interfaces import IContained\n from zope.container.interfaces import IContainerNamesContainer\n from zope.container.interfaces import IOrderedContainer\n-from zope.interface import Attribute\n from zope.interface import Interface\n \n \n'

Repository: plone.contentrules


Branch: refs/heads/master
Date: 2023-04-15T13:11:06+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.contentrules/commit/08c60fef3e9b508e064e668d7059d97f353ed15a

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 398e4b8..41945a5 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -38,16 +38,7 @@\n     python_requires=">=3.8",\n     install_requires=[\n         "setuptools",\n-        "ZODB",\n-        "zope.annotation",\n-        "zope.component",\n         "zope.componentvocabulary",\n-        "zope.configuration",\n-        "zope.container",\n-        "zope.i18nmessageid",\n-        "zope.interface",\n-        "zope.lifecycleevent",\n-        "zope.schema",\n-        "zope.testing",\n+        "Zope",\n     ],\n )\n'

Repository: plone.contentrules


Branch: refs/heads/master
Date: 2023-04-15T13:11:06+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.contentrules/commit/dd044946a64bf397a6b25b71f3e114d440a801bc

feat: ignore package

Files changed:
M .meta.toml
M pyproject.toml

b'diff --git a/.meta.toml b/.meta.toml\nindex 1b2346d..70f1fd4 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -3,3 +3,6 @@\n [meta]\n template = "default"\n commit-id = "5cc689e5"\n+\n+[dependencies]\n+ignores = "[\'plone.protect\']"\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 92c3af9..fed6bfa 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -81,3 +81,4 @@ Zope = [\n   \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n ]\n python-dateutil = [\'dateutil\']\n+ignore-packages = [\'plone.protect\']\n'

Repository: plone.contentrules


Branch: refs/heads/master
Date: 2023-04-15T13:19:13+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.contentrules/commit/6016f9ff6bf1edb83868d96792e072bf0f3cd708

chore: update trove classifiers

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 41945a5..568a323 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -13,18 +13,17 @@\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "Framework :: Zope2",\n         "Framework :: Zope :: 4",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n     ],\n     keywords="Plone content rules events",\n     author="Plone Foundation",\n'

Repository: plone.contentrules


Branch: refs/heads/master
Date: 2023-04-15T13:19:13+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.contentrules/commit/1e56ac3d4c4d50b4f6b21e08642b69c0dabee1b4

Add news entry

Files changed:
A news/1.bugfix

b'diff --git a/news/1.bugfix b/news/1.bugfix\nnew file mode 100644\nindex 0000000..71a5d74\n--- /dev/null\n+++ b/news/1.bugfix\n@@ -0,0 +1,2 @@\n+Drop python 2.7.\n+[gforcada]\n'

Repository: plone.contentrules


Branch: refs/heads/master
Date: 2023-04-17T18:07:18+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.contentrules/commit/59d0302533ae9c83525b8b16dae55abb2a71fbc0

Merge pull request #13 from plone/config-with-default-template-7cef0048

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/1.bugfix
A news/5cc689e5.internal
A tox.ini
M plone/__init__.py
M plone/contentrules/__init__.py
M plone/contentrules/configure.zcml
M plone/contentrules/engine/assignments.py
M plone/contentrules/engine/configure.zcml
M plone/contentrules/engine/executor.py
M plone/contentrules/engine/interfaces.py
M plone/contentrules/engine/storage.py
M plone/contentrules/engine/utils.py
M plone/contentrules/meta.zcml
M plone/contentrules/rule/configure.zcml
M plone/contentrules/rule/element.py
M plone/contentrules/rule/eventvocab.py
M plone/contentrules/rule/interfaces.py
M plone/contentrules/rule/meta.zcml
M plone/contentrules/rule/metaconfigure.py
M plone/contentrules/rule/metadirectives.py
M plone/contentrules/rule/rule.py
M plone/contentrules/rule/tests/elements.py
M plone/contentrules/tests.py
M plone/contentrules/zcml.rst
M pyproject.toml
M setup.cfg
M setup.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..70f1fd4\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,8 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "5cc689e5"\n+\n+[dependencies]\n+ignores = "[\'plone.protect\']"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/news/1.bugfix b/news/1.bugfix\nnew file mode 100644\nindex 0000000..71a5d74\n--- /dev/null\n+++ b/news/1.bugfix\n@@ -0,0 +1,2 @@\n+Drop python 2.7.\n+[gforcada]\ndiff --git a/news/5cc689e5.internal b/news/5cc689e5.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/5cc689e5.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex de40ea7..5284146 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/contentrules/__init__.py b/plone/contentrules/__init__.py\nindex fcda357..0f4e045 100644\n--- a/plone/contentrules/__init__.py\n+++ b/plone/contentrules/__init__.py\n@@ -1,3 +1,4 @@\n from zope.i18nmessageid import MessageFactory\n \n-PloneMessageFactory = MessageFactory(\'plone\')\n+\n+PloneMessageFactory = MessageFactory("plone")\ndiff --git a/plone/contentrules/configure.zcml b/plone/contentrules/configure.zcml\nindex 80cc827..62a4f2c 100644\n--- a/plone/contentrules/configure.zcml\n+++ b/plone/contentrules/configure.zcml\n@@ -1,8 +1,8 @@\n <configure xmlns="http://namespaces.zope.org/zope">\n \n-    <include package="zope.annotation" />\n+  <include package="zope.annotation" />\n \n-    <include package=".engine" />\n-    <include package=".rule" />\n+  <include package=".engine" />\n+  <include package=".rule" />\n \n-</configure>\n\\ No newline at end of file\n+</configure>\ndiff --git a/plone/contentrules/engine/assignments.py b/plone/contentrules/engine/assignments.py\nindex 87f779b..497faa3 100644\n--- a/plone/contentrules/engine/assignments.py\n+++ b/plone/contentrules/engine/assignments.py\n@@ -1,24 +1,24 @@\n-from persistent import Persistent\n-\n+from BTrees.OOBTree import OOBTree\n from OFS.Uninstalled import BrokenClass\n+from persistent import Persistent\n+from plone.contentrules.engine.interfaces import IRuleAssignable\n+from plone.contentrules.engine.interfaces import IRuleAssignment\n+from plone.contentrules.engine.interfaces import IRuleAssignmentManager\n+from plone.contentrules.engine.interfaces import IRuleStorage\n from ZODB.broken import PersistentBroken\n-from zope.interface import implementer, implementer\n-from zope.component import adapter, queryUtility\n from zope.annotation.interfaces import IAnnotations\n-from zope.container.ordered import OrderedContainer\n+from zope.component import adapter\n+from zope.component import queryUtility\n from zope.container.contained import Contained\n from zope.container.interfaces import IObjectAddedEvent\n+from zope.container.ordered import OrderedContainer\n+from zope.interface import implementer\n \n-from plone.contentrules.engine.interfaces import IRuleStorage\n-from plone.contentrules.engine.interfaces import IRuleAssignable\n-from plone.contentrules.engine.interfaces import IRuleAssignment\n-from plone.contentrules.engine.interfaces import IRuleAssignmentManager\n-\n-from BTrees.OOBTree import OOBTree\n \n try:\n     from plone.protect.auto import safeWrite\n except ImportError:\n+\n     def safeWrite(*args):\n         pass\n \n@@ -29,26 +29,27 @@ def check_rules_with_dotted_name_moved(rule):\n     Avoids any upgrade to fail when setup profile is re-imported.\n     """\n     if PersistentBroken in rule.event.__bases__ or BrokenClass in rule.event.__bases__:\n-        if rule.event.__name__ == \'IObjectAddedEvent\':\n+        if rule.event.__name__ == "IObjectAddedEvent":\n             rule.event = IObjectAddedEvent\n \n-KEY = \'plone.contentrules.localassignments\'\n+\n+KEY = "plone.contentrules.localassignments"\n+\n \n @implementer(IRuleAssignment)\n class RuleAssignment(Contained, Persistent):\n-    """An assignment of a rule to a context\n-    """\n+    """An assignment of a rule to a context"""\n \n     def __init__(self, ruleid, enabled=True, bubbles=False):\n-        super(RuleAssignment, self).__init__()\n+        super().__init__()\n         self.__name__ = ruleid\n         self.enabled = enabled\n         self.bubbles = bubbles\n \n+\n @implementer(IRuleAssignmentManager)\n class RuleAssignmentManager(OrderedContainer):\n-    """A context-specific container for rule assignments\n-    """\n+    """A context-specific container for rule assignments"""\n \n     def __init__(self):\n         # XXX: This depends on implementation detail in OrderedContainer,\n@@ -63,7 +64,7 @@ def getRules(self, event, bubbled=False):\n             for a in self.values():\n                 if not a.enabled:\n                     continue\n-                if not (bubbled == False or a.bubbles):\n+                if not (bubbled is False or a.bubbles):\n                     continue\n \n                 r = storage.get(a.__name__, None)\n@@ -81,6 +82,7 @@ def getRules(self, event, bubbled=False):\n \n         return rules\n \n+\n @adapter(IRuleAssignable)\n @implementer(IRuleAssignmentManager)\n def ruleAssignmentManagerAdapterFactory(context):\ndiff --git a/plone/contentrules/engine/configure.zcml b/plone/contentrules/engine/configure.zcml\nindex 541c1c9..8849307 100644\n--- a/plone/contentrules/engine/configure.zcml\n+++ b/plone/contentrules/engine/configure.zcml\n@@ -1,6 +1,6 @@\n <configure xmlns="http://namespaces.zope.org/zope">\n \n-    <adapter factory=".assignments.ruleAssignmentManagerAdapterFactory" />\n-    <adapter factory=".executor.RuleExecutor" />\n+  <adapter factory=".assignments.ruleAssignmentManagerAdapterFactory" />\n+  <adapter factory=".executor.RuleExecutor" />\n \n </configure>\ndiff --git a/plone/contentrules/engine/executor.py b/plone/contentrules/engine/executor.py\nindex ba012fd..cfe2e83 100644\n--- a/plone/contentrules/engine/executor.py\n+++ b/plone/contentrules/engine/executor.py\n@@ -1,18 +1,17 @@\n-from zope.interface import implementer\n-from zope.component import adapts, getMultiAdapter\n-\n-from plone.contentrules.engine.interfaces import IRuleExecutor\n from plone.contentrules.engine.interfaces import IRuleAssignable\n from plone.contentrules.engine.interfaces import IRuleAssignmentManager\n-\n+from plone.contentrules.engine.interfaces import IRuleExecutor\n from plone.contentrules.engine.interfaces import StopRule\n-\n from plone.contentrules.rule.interfaces import IExecutable\n+from zope.component import adapts\n+from zope.component import getMultiAdapter\n+from zope.interface import implementer\n+\n \n @implementer(IRuleExecutor)\n-class RuleExecutor(object):\n-    """An object that can execute rules in its context.\n-    """\n+class RuleExecutor:\n+    """An object that can execute rules in its context."""\n+\n     adapts(IRuleAssignable)\n \n     def __init__(self, context):\n@@ -22,15 +21,15 @@ def __call__(self, event, bubbled=False, rule_filter=None):\n         assignments = IRuleAssignmentManager(self.context)\n         for rule in assignments.getRules(event, bubbled=bubbled):\n             # for each rule assigned in this context - bubbled means rule apply on subfolders\n-            if rule_filter is None or rule_filter(self.context, rule, event) == True:\n-                # execute the rule if it is not filtered, for exemple,\n+            if rule_filter is None or rule_filter(self.context, rule, event) is True:\n+                # execute the rule if it is not filtered, for example,\n                 # it has not been executed on the same content but from an other context\n                 # in the same request\n \n                 # we store cascading option in the filter. if true, this will allow\n                 # rules to be executed because of the actions ran by this rule.\n                 if rule_filter is not None:\n-                    cascade_before = getattr(rule_filter, \'cascade\', False)\n+                    cascade_before = getattr(rule_filter, "cascade", False)\n                     rule_filter.cascade = rule.cascading\n \n                 executable = getMultiAdapter((self.context, rule, event), IExecutable)\ndiff --git a/plone/contentrules/engine/interfaces.py b/plone/contentrules/engine/interfaces.py\nindex df9a8e3..f0067aa 100644\n--- a/plone/contentrules/engine/interfaces.py\n+++ b/plone/contentrules/engine/interfaces.py\n@@ -1,39 +1,41 @@\n-from zope.interface import Interface, Attribute\n from zope import schema\n-\n+from zope.annotation.interfaces import IAttributeAnnotatable\n+from zope.container.constraints import contains\n from zope.container.interfaces import IContained\n-from zope.container.interfaces import IOrderedContainer\n from zope.container.interfaces import IContainerNamesContainer\n+from zope.container.interfaces import IOrderedContainer\n+from zope.interface import Interface\n \n-from zope.container.constraints import contains\n-from zope.annotation.interfaces import IAttributeAnnotatable\n \n class StopRule(Exception):\n-    """An event that informs us that rule execution should be aborted.\n-    """\n+    """An event that informs us that rule execution should be aborted."""\n \n     def __init__(self, rule):\n         self.rule = rule\n \n+\n class IRuleStorage(IOrderedContainer, IContainerNamesContainer):\n-    """A storage for rules. This is registered as a local utility.\n-    """\n-    contains(\'plone.contentrules.rule.interfaces.IRule\')\n+    """A storage for rules. This is registered as a local utility."""\n+\n+    contains("plone.contentrules.rule.interfaces.IRule")\n+\n+    active = schema.Bool(title="Rules in this storage are active")\n \n-    active = schema.Bool(title=u"Rules in this storage are active")\n \n class IRuleAssignable(IAttributeAnnotatable):\n-    """Marker interface for objects that can be assigned rules\n-    """\n+    """Marker interface for objects that can be assigned rules"""\n+\n \n class IRuleAssignment(IContained):\n-    """An assignment of a rule to a context\n-    """\n+    """An assignment of a rule to a context"""\n \n-    __name__ = schema.TextLine(title=u"The id of the rule")\n+    __name__ = schema.TextLine(title="The id of the rule")\n+\n+    enabled = schema.Bool(title="Whether or not the rule is currently enabled")\n+    bubbles = schema.Bool(\n+        title="Whether or not the rule will apply to objects in subfolders"\n+    )\n \n-    enabled = schema.Bool(title=u"Whether or not the rule is currently enabled")\n-    bubbles = schema.Bool(title=u"Whether or not the rule will apply to objects in subfolders")\n \n class IRuleAssignmentManager(IOrderedContainer):\n     """An object that is capable of being assigned rules.\n@@ -48,6 +50,7 @@ def getRules(event, bubbled=False):\n         bubbleable will be returned.\n         """\n \n+\n class IRuleExecutor(Interface):\n     """An object that is capable of executing rules.\n \ndiff --git a/plone/contentrules/engine/storage.py b/plone/contentrules/engine/storage.py\nindex 0105015..0d78b19 100644\n--- a/plone/contentrules/engine/storage.py\n+++ b/plone/contentrules/engine/storage.py\n@@ -1,14 +1,12 @@\n-from zope.interface import implementer\n-from zope.container.ordered import OrderedContainer\n-\n+from BTrees.OOBTree import OOBTree\n from plone.contentrules.engine.interfaces import IRuleStorage\n+from zope.container.ordered import OrderedContainer\n+from zope.interface import implementer\n \n-from BTrees.OOBTree import OOBTree\n \n @implementer(IRuleStorage)\n class RuleStorage(OrderedContainer):\n-    """A container for rules.\n-    """\n+    """A container for rules."""\n \n     active = True\n \ndiff --git a/plone/contentrules/engine/utils.py b/plone/contentrules/engine/utils.py\nindex af1b17d..1fcd2ae 100644\n--- a/plone/contentrules/engine/utils.py\n+++ b/plone/contentrules/engine/utils.py\n@@ -1,24 +1,35 @@\n+from plone.contentrules.rule.interfaces import IRuleAction\n+from plone.contentrules.rule.interfaces import IRuleCondition\n from zope.component import getAllUtilitiesRegisteredFor\n-from plone.contentrules.rule.interfaces import IRuleCondition, IRuleAction\n+\n \n def getAvailableConditions(context, eventType):\n     conditions = getAllUtilitiesRegisteredFor(IRuleCondition)\n-    return [c for c in conditions if\n-                (c.event is None or eventType.isOrExtends(c.event)) and\n-                (c.for_ is None or c.for_.providedBy(context))]\n+    return [\n+        c\n+        for c in conditions\n+        if (c.event is None or eventType.isOrExtends(c.event))\n+        and (c.for_ is None or c.for_.providedBy(context))\n+    ]\n+\n \n def allAvailableConditions(eventType):\n     conditions = getAllUtilitiesRegisteredFor(IRuleCondition)\n-    return [c for c in conditions if\n-                (c.event is None or eventType.isOrExtends(c.event))]\n+    return [\n+        c for c in conditions if (c.event is None or eventType.isOrExtends(c.event))\n+    ]\n+\n \n def getAvailableActions(context, eventType):\n     actions = getAllUtilitiesRegisteredFor(IRuleAction)\n-    return [a for a in actions if\n-                (a.event is None or eventType.isOrExtends(a.event)) and\n-                (a.for_ is None or a.for_.providedBy(context))]\n+    return [\n+        a\n+        for a in actions\n+        if (a.event is None or eventType.isOrExtends(a.event))\n+        and (a.for_ is None or a.for_.providedBy(context))\n+    ]\n+\n \n def allAvailableActions(eventType):\n     actions = getAllUtilitiesRegisteredFor(IRuleAction)\n-    return [a for a in actions if\n-                (a.event is None or eventType.isOrExtends(a.event))]\n+    return [a for a in actions if (a.event is None or eventType.isOrExtends(a.event))]\ndiff --git a/plone/contentrules/meta.zcml b/plone/contentrules/meta.zcml\nindex 9e0368b..3a9ffd8 100644\n--- a/plone/contentrules/meta.zcml\n+++ b/plone/contentrules/meta.zcml\n@@ -1,5 +1,8 @@\n <configure xmlns="http://namespaces.zope.org/zope">\n \n-    <include package=".rule" file="meta.zcml" />\n+  <include\n+      package=".rule"\n+      file="meta.zcml"\n+      />\n \n </configure>\ndiff --git a/plone/contentrules/rule/configure.zcml b/plone/contentrules/rule/configure.zcml\nindex ec59962..7367635 100644\n--- a/plone/contentrules/rule/configure.zcml\n+++ b/plone/contentrules/rule/configure.zcml\n@@ -1,12 +1,10 @@\n <configure xmlns="http://namespaces.zope.org/zope">\n \n-    <adapter\n-      factory=".rule.RuleExecutable"\n-      />\n+  <adapter factory=".rule.RuleExecutable" />\n \n-    <utility\n-      component=".eventvocab.EventTypesVocabulary"\n+  <utility\n       name="plone.contentrules.events"\n+      component=".eventvocab.EventTypesVocabulary"\n       />\n \n </configure>\ndiff --git a/plone/contentrules/rule/element.py b/plone/contentrules/rule/element.py\nindex a8744c0..4c41b1c 100644\n--- a/plone/contentrules/rule/element.py\n+++ b/plone/contentrules/rule/element.py\n@@ -1,17 +1,20 @@\n-from zope.interface import implementer, Interface\n+from plone.contentrules.rule.interfaces import IRuleAction\n+from plone.contentrules.rule.interfaces import IRuleCondition\n+from plone.contentrules.rule.interfaces import IRuleElement\n+from zope.interface import implementer\n+from zope.interface import Interface\n \n-from plone.contentrules.rule.interfaces import IRuleElement, IRuleCondition, IRuleAction\n \n @implementer(IRuleElement)\n-class RuleElement(object):\n+class RuleElement:\n     """A rule element.\n \n     Ordinarily, rule elements will be created via ZCML directives, which will\n     register them as utilities.\n     """\n \n-    title = u\'\'\n-    description = u\'\'\n+    title = ""\n+    description = ""\n     for_ = Interface\n     event = None\n     addview = None\n@@ -19,6 +22,7 @@ class RuleElement(object):\n     schema = None\n     factory = None\n \n+\n @implementer(IRuleCondition)\n class RuleCondition(RuleElement):\n     """A rule condition.\n@@ -28,6 +32,7 @@ class RuleCondition(RuleElement):\n     of elements.\n     """\n \n+\n @implementer(IRuleAction)\n class RuleAction(RuleElement):\n     """A rule action.\ndiff --git a/plone/contentrules/rule/eventvocab.py b/plone/contentrules/rule/eventvocab.py\nindex 2776acf..cd77946 100644\n--- a/plone/contentrules/rule/eventvocab.py\n+++ b/plone/contentrules/rule/eventvocab.py\n@@ -1,17 +1,16 @@\n-# -*- coding: utf-8 -*-\n from plone.contentrules.rule.interfaces import IRuleEventType\n from zope.componentvocabulary.vocabulary import UtilityVocabulary\n from zope.i18nmessageid import MessageFactory\n-from zope.interface import Interface, provider\n+from zope.interface import Interface\n+from zope.interface import provider\n from zope.interface.interfaces import IInterface\n from zope.schema.interfaces import IVocabularyFactory\n from zope.schema.vocabulary import SimpleTerm\n \n-import six\n import zope.component\n \n \n-_ = MessageFactory(\'plone\')\n+_ = MessageFactory("plone")\n \n \n @provider(IVocabularyFactory)\n@@ -20,17 +19,19 @@ class EventTypesVocabulary(UtilityVocabulary):\n     attribute of an IRule.\n     An internationalized version of UtilityVocabulary\n     """\n+\n     interface = IRuleEventType\n \n     def __init__(self, context, **kw):\n         if kw:\n-            self.nameOnly = bool(kw.get(\'nameOnly\', False))\n-            interface = kw.get(\'interface\', Interface)\n-            if isinstance(interface, (six.string_types, six.text_type)):\n+            self.nameOnly = bool(kw.get("nameOnly", False))\n+            interface = kw.get("interface", Interface)\n+            if isinstance(interface, ((str,), str)):\n                 interface = zope.component.getUtility(IInterface, interface)\n             self.interface = interface\n \n         utils = zope.component.getUtilitiesFor(self.interface, context)\n-        self._terms = dict(\n-            (name, SimpleTerm(self.nameOnly and name or util, name, _(name)))\n-            for name, util in utils)\n+        self._terms = {\n+            name: SimpleTerm(self.nameOnly and name or util, name, _(name))\n+            for name, util in utils\n+        }\ndiff --git a/plone/contentrules/rule/interfaces.py b/plone/contentrules/rule/interfaces.py\nindex bbc2df5..7c8f561 100644\n--- a/plone/contentrules/rule/interfaces.py\n+++ b/plone/contentrules/rule/interfaces.py\n@@ -1,16 +1,13 @@\n """\n """\n-__docformat__ = \'restructuredtext\'\n-\n-from zope.interface import Interface\n-from zope.interface.interfaces import IInterface\n-\n-from zope.container.interfaces import IContained\n+__docformat__ = "restructuredtext"\n \n+from plone.contentrules import PloneMessageFactory as _\n from zope import schema\n from zope.configuration import fields as configuration_fields\n-\n-from plone.contentrules import PloneMessageFactory as _\n+from zope.container.interfaces import IContained\n+from zope.interface import Interface\n+from zope.interface.interfaces import IInterface\n \n \n class IRuleElementData(Interface):\n@@ -18,13 +15,18 @@ class IRuleElementData(Interface):\n     or conditions).\n     """\n \n-    element = schema.ASCII(title=u"Rule element",\n-                              description=u"The name of the rule action or condition",\n-                              required=True)\n+    element = schema.ASCII(\n+        title="Rule element",\n+        description="The name of the rule action or condition",\n+        required=True,\n+    )\n+\n+    summary = schema.Text(\n+        title="Summary",\n+        description="A human-readable description of this element as it is configured",\n+        required=True,\n+    )\n \n-    summary = schema.Text(title=u"Summary",\n-                          description=u"A human-readable description of this element as it is configured",\n-                          required=True)\n \n class IRuleElement(Interface):\n     """Base interface for rule elements (actions and conditions)\n@@ -33,44 +35,44 @@ class IRuleElement(Interface):\n     form a rule.Rules can be constructed by the user and invoked by the\n     IRuleExecuter\n     """\n-    title = schema.TextLine(\n-        title = u\'Title\',\n-        required = True)\n \n-    description = schema.Text(\n-        title = u\'Description\',\n-        required = False)\n+    title = schema.TextLine(title="Title", required=True)\n+\n+    description = schema.Text(title="Description", required=False)\n \n     for_ = configuration_fields.GlobalInterface(\n-        title = u\'Available for\',\n-        description = u\'The interface this component is available for\',\n-        required = False)\n+        title="Available for",\n+        description="The interface this component is available for",\n+        required=False,\n+    )\n \n     event = configuration_fields.GlobalInterface(\n-        title = u\'Applicable event\',\n-        description = u\'The event that can trigger this element, None meaning \'\n-                       \'it is not event specific.\',\n-        required = False)\n+        title="Applicable event",\n+        description="The event that can trigger this element, None meaning "\n+        "it is not event specific.",\n+        required=False,\n+    )\n \n     addview = schema.TextLine(\n-        title = u\'Add view\',\n-        description = u\'The name of the add view\',\n-        required = True)\n+        title="Add view", description="The name of the add view", required=True\n+    )\n \n     editview = schema.TextLine(\n-        title = u"Edit view",\n-        description = u"The name of the edit view",\n-        required = True)\n+        title="Edit view", description="The name of the edit view", required=True\n+    )\n \n     schema = configuration_fields.GlobalInterface(\n-        title = u\'Schema\',\n-        description = u\'Schema interface for configuring the element\',\n-        required = False)\n+        title="Schema",\n+        description="Schema interface for configuring the element",\n+        required=False,\n+    )\n \n     factory = configuration_fields.GlobalInterface(\n-        title = u\'Factory\',\n-        description = u\'Callable which creates an instance of the element\',\n-        required = False)\n+        title="Factory",\n+        description="Callable which creates an instance of the element",\n+        required=False,\n+    )\n+\n \n class IRuleCondition(IRuleElement):\n     """A condition of a rule\n@@ -79,6 +81,7 @@ class IRuleCondition(IRuleElement):\n     fail, the next element will be executed.\n     """\n \n+\n class IRuleAction(IRuleElement):\n     """An action executed as part of a rule.\n \n@@ -86,45 +89,68 @@ class IRuleAction(IRuleElement):\n     Once an action is finished, the next element will be executed.\n     """\n \n+\n class IRuleEventType(IInterface):\n     """Marker interface for event interfaces that can be used as the \'event\'\n     type of an IRule.\n     """\n \n-class IRuleConfiguration(Interface):\n-    """Configurable options for a rule\n-    """\n-\n-    title = schema.TextLine(title = _(u\'Title\'),\n-                            description = _(\'description_contentrule_title\',\n-                                            default=u\'Please set a descriptive title for the rule.\'),\n-                            required = True)\n \n-    description = schema.Text(title = _(u\'Description\'),\n-                              description = _(\'contentrules_description_description\',\n-                                              default=u\'Enter a short description of the rule and its purpose.\'),\n-                              required = False)\n-\n-    event = schema.Choice(title = _(u\'Triggering event\'),\n-                          description = _(\'contentrules_description_trigger\',\n-                                          default=u\'The rule will execute when the following event occurs.\'),\n-                          required = True,\n-                          vocabulary="plone.contentrules.events")\n-\n-    enabled = schema.Bool(title = _(u\'Enabled\'),\n-                          description = _(u\'Whether or not the rule is currently enabled\'),\n-                          default = True,\n-                          required = False)\n+class IRuleConfiguration(Interface):\n+    """Configurable options for a rule"""\n \n-    stop = schema.Bool(title = _(u"Stop executing rules"),\n-                       description = _(u"Whether or not execution of further rules should stop after this rule is executed"),\n-                       default = False,\n-                       required = False)\n+    title = schema.TextLine(\n+        title=_("Title"),\n+        description=_(\n+            "description_contentrule_title",\n+            default="Please set a descriptive title for the rule.",\n+        ),\n+        required=True,\n+    )\n \n-    cascading = schema.Bool(title = _(u"Cascading rule"),\n-                       description = _(u"Whether or not other rules should be triggered by the actions launched by this rule. Activate this only if you are sure this won\'t create infinite loops."),\n-                       default = False,\n-                       required = False)\n+    description = schema.Text(\n+        title=_("Description"),\n+        description=_(\n+            "contentrules_description_description",\n+            default="Enter a short description of the rule and its purpose.",\n+        ),\n+        required=False,\n+    )\n+\n+    event = schema.Choice(\n+        title=_("Triggering event"),\n+        description=_(\n+            "contentrules_description_trigger",\n+            default="The rule will execute when the following event occurs.",\n+        ),\n+        required=True,\n+        vocabulary="plone.contentrules.events",\n+    )\n+\n+    enabled = schema.Bool(\n+        title=_("Enabled"),\n+        description=_("Whether or not the rule is currently enabled"),\n+        default=True,\n+        required=False,\n+    )\n+\n+    stop = schema.Bool(\n+        title=_("Stop executing rules"),\n+        description=_(\n+            "Whether or not execution of further rules should stop after this rule is executed"\n+        ),\n+        default=False,\n+        required=False,\n+    )\n+\n+    cascading = schema.Bool(\n+        title=_("Cascading rule"),\n+        description=_(\n+            "Whether or not other rules should be triggered by the actions launched by this rule. Activate this only if you are sure this won\'t create infinite loops."\n+        ),\n+        default=False,\n+        required=False,\n+    )\n \n \n class IRule(IContained, IRuleConfiguration):\n@@ -138,14 +164,13 @@ class IRule(IContained, IRuleConfiguration):\n     When saved in a rule storage, it will be given a name.\n     """\n \n+    conditions = schema.List(\n+        title="Conditions", description="The conditions of this rule", required=True\n+    )\n \n-    conditions = schema.List(title = u\'Conditions\',\n-                             description = u\'The conditions of this rule\',\n-                             required = True)\n-\n-    actions = schema.List(title = u\'Actions\',\n-                          description = u\'The actions of this rule\',\n-                          required = True)\n+    actions = schema.List(\n+        title="Actions", description="The actions of this rule", required=True\n+    )\n \n \n class IExecutable(Interface):\ndiff --git a/plone/contentrules/rule/meta.zcml b/plone/contentrules/rule/meta.zcml\nindex f5d363a..5a70f41 100644\n--- a/plone/contentrules/rule/meta.zcml\n+++ b/plone/contentrules/rule/meta.zcml\n@@ -1,21 +1,22 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:meta="http://namespaces.zope.org/meta">\n+    xmlns:meta="http://namespaces.zope.org/meta"\n+    >\n \n-    <meta:directives namespace="http://namespaces.plone.org/plone">\n+  <meta:directives namespace="http://namespaces.plone.org/plone">\n \n-        <meta:directive\n-            name="ruleCondition"\n-            schema=".metadirectives.IRuleConditionDirective"\n-            handler=".metaconfigure.ruleConditionDirective"\n-            />\n+    <meta:directive\n+        name="ruleCondition"\n+        handler=".metaconfigure.ruleConditionDirective"\n+        schema=".metadirectives.IRuleConditionDirective"\n+        />\n \n-        <meta:directive\n-            name="ruleAction"\n-            schema=".metadirectives.IRuleActionDirective"\n-            handler=".metaconfigure.ruleActionDirective"\n-            />\n+    <meta:directive\n+        name="ruleAction"\n+        handler=".metaconfigure.ruleActionDirective"\n+        schema=".metadirectives.IRuleActionDirective"\n+        />\n \n-    </meta:directives>\n+  </meta:directives>\n \n </configure>\ndiff --git a/plone/contentrules/rule/metaconfigure.py b/plone/contentrules/rule/metaconfigure.py\nindex 2f533f6..1c7536c 100644\n--- a/plone/contentrules/rule/metaconfigure.py\n+++ b/plone/contentrules/rule/metaconfigure.py\n@@ -1,11 +1,23 @@\n+from plone.contentrules.rule.element import RuleAction\n+from plone.contentrules.rule.element import RuleCondition\n+from plone.contentrules.rule.interfaces import IRuleAction\n+from plone.contentrules.rule.interfaces import IRuleCondition\n from zope.component.zcml import utility\n from zope.interface import Interface\n \n-from plone.contentrules.rule.interfaces import IRuleCondition, IRuleAction\n-from plone.contentrules.rule.element import RuleCondition, RuleAction\n \n-def ruleConditionDirective(_context, name, title, addview, editview=None,\n-        description="", for_=Interface, event=Interface, schema=None, factory=None):\n+def ruleConditionDirective(\n+    _context,\n+    name,\n+    title,\n+    addview,\n+    editview=None,\n+    description="",\n+    for_=Interface,\n+    event=Interface,\n+    schema=None,\n+    factory=None,\n+):\n     """Register a utility for IRuleCondition based on the parameters in the\n     zcml directive\n     """\n@@ -23,8 +35,18 @@ def ruleConditionDirective(_context, name, title, addview, editview=None,\n     utility(_context, provides=IRuleCondition, component=condition, name=name)\n \n \n-def ruleActionDirective(_context, name, title, addview, editview=None,\n-    description="", for_=Interface, event=Interface, schema=None, factory=None):\n+def ruleActionDirective(\n+    _context,\n+    name,\n+    title,\n+    addview,\n+    editview=None,\n+    description="",\n+    for_=Interface,\n+    event=Interface,\n+    schema=None,\n+    factory=None,\n+):\n     """Register a utility for IRuleAction based on the parameters in the\n     zcml directive\n     """\ndiff --git a/plone/contentrules/rule/metadirectives.py b/plone/contentrules/rule/metadirectives.py\nindex 28e265c..7d42995 100644\n--- a/plone/contentrules/rule/metadirectives.py\n+++ b/plone/contentrules/rule/metadirectives.py\n@@ -1,7 +1,7 @@\n-from zope.interface import Interface\n-\n from zope import schema\n from zope.configuration import fields as configuration_fields\n+from zope.interface import Interface\n+\n \n class IRuleElementDirective(Interface):\n     """Directive which registers a new rule element.\n@@ -10,54 +10,57 @@ class IRuleElementDirective(Interface):\n     """\n \n     name = schema.TextLine(\n-        title=u"Name",\n-        description=u"A unique name for the element",\n-        required=True)\n+        title="Name", description="A unique name for the element", required=True\n+    )\n \n     title = schema.TextLine(\n-        title=u"Title",\n-        description=u"A user-friendly title for the element",\n-        required=True)\n+        title="Title",\n+        description="A user-friendly title for the element",\n+        required=True,\n+    )\n \n     description = schema.Text(\n-        title=u"Description",\n-        description=u"A helpful description of the element",\n-        required=False)\n+        title="Description",\n+        description="A helpful description of the element",\n+        required=False,\n+    )\n \n     for_ = configuration_fields.GlobalInterface(\n-        title = u"Available for",\n-        description = u"The interface this element is available for",\n-        required = False)\n+        title="Available for",\n+        description="The interface this element is available for",\n+        required=False,\n+    )\n \n     event = configuration_fields.GlobalInterface(\n-        title = u"Event",\n-        description = u"The event this element is available for",\n-        required = False)\n+        title="Event",\n+        description="The event this element is available for",\n+        required=False,\n+    )\n \n     addview = schema.TextLine(\n-        title = u"Add view",\n-        description = u"Name of the add view",\n-        required = True)\n+        title="Add view", description="Name of the add view", required=True\n+    )\n \n     editview = schema.TextLine(\n-        title = u"Edit view",\n-        description = u"Name of the edit view",\n-        required = False)\n+        title="Edit view", description="Name of the edit view", required=False\n+    )\n \n     schema = configuration_fields.GlobalInterface(\n-        title = u"Schema",\n-        description = u"The schema interface for configuring the element",\n-        required = False)\n+        title="Schema",\n+        description="The schema interface for configuring the element",\n+        required=False,\n+    )\n \n     factory = configuration_fields.GlobalObject(\n-        title = u"Factory",\n-        description = u"A callable which can create the element",\n-        required = False)\n+        title="Factory",\n+        description="A callable which can create the element",\n+        required=False,\n+    )\n+\n \n class IRuleActionDirective(IRuleElementDirective):\n-    """An element directive describing what is logically an action element.\n-    """\n+    """An element directive describing what is logically an action element."""\n+\n \n class IRuleConditionDirective(IRuleElementDirective):\n-    """An element directive describing what is logically a condition element.\n-    """\n+    """An element directive describing what is logically a condition element."""\ndiff --git a/plone/contentrules/rule/rule.py b/plone/contentrules/rule/rule.py\nindex 714dcaa..062af01 100644\n--- a/plone/contentrules/rule/rule.py\n+++ b/plone/contentrules/rule/rule.py\n@@ -1,19 +1,19 @@\n from persistent import Persistent\n from persistent.list import PersistentList\n-\n-from zope.interface import implementer, Interface\n-from zope.component import adapts, getMultiAdapter\n-\n-from plone.contentrules.rule.interfaces import IRule\n from plone.contentrules.rule.interfaces import IExecutable\n+from plone.contentrules.rule.interfaces import IRule\n+from zope.component import adapts\n+from zope.component import getMultiAdapter\n+from zope.interface import implementer\n+from zope.interface import Interface\n+\n \n @implementer(IRule)\n class Rule(Persistent):\n-    """A rule.\n-    """\n+    """A rule."""\n \n-    title = u\'\'\n-    description = u\'\'\n+    title = ""\n+    description = ""\n     event = None\n     enabled = True\n     stop = False\n@@ -26,10 +26,11 @@ def __init__(self):\n         self.conditions = PersistentList()\n         self.actions = PersistentList()\n \n+\n @implementer(IExecutable)\n-class RuleExecutable(object):\n-    """An adapter capable of executing a rule\n-    """\n+class RuleExecutable:\n+    """An adapter capable of executing a rule"""\n+\n     adapts(Interface, IRule, Interface)\n \n     def __init__(self, context, rule, event):\n@@ -39,11 +40,15 @@ def __init__(self, context, rule, event):\n \n     def __call__(self):\n         for condition in self.rule.conditions:\n-            executable = getMultiAdapter((self.context, condition, self.event), IExecutable)\n+            executable = getMultiAdapter(\n+                (self.context, condition, self.event), IExecutable\n+            )\n             if not executable():\n                 return False\n         for action in self.rule.actions:\n-            executable = getMultiAdapter((self.context, action, self.event), IExecutable)\n+            executable = getMultiAdapter(\n+                (self.context, action, self.event), IExecutable\n+            )\n             if not executable():\n                 return False\n         return True\ndiff --git a/plone/contentrules/rule/tests/elements.py b/plone/contentrules/rule/tests/elements.py\nindex 4661755..ae18933 100644\n--- a/plone/contentrules/rule/tests/elements.py\n+++ b/plone/contentrules/rule/tests/elements.py\n@@ -1,27 +1,31 @@\n """Dummies used in ZCML tests\n """\n \n-from zope.interface import Interface, implementer\n+from plone.contentrules.rule.interfaces import IRuleElementData\n from zope import schema\n+from zope.interface import implementer\n+from zope.interface import Interface\n \n-from plone.contentrules.rule.interfaces import IRuleElementData\n \n class ITestCondition(Interface):\n-    test = schema.TextLine(title=u"Test property")\n+    test = schema.TextLine(title="Test property")\n+\n \n @implementer(ITestCondition, IRuleElementData)\n-class TestCondition(object):\n-    test = u""\n+class TestCondition:\n+    test = ""\n+\n+    summary = "Test condition"\n+    element = "test.condition"\n \n-    summary = u"Test condition"\n-    element = u"test.condition"\n \n class ITestAction(Interface):\n-    test = schema.TextLine(title=u"Test property")\n+    test = schema.TextLine(title="Test property")\n+\n \n @implementer(ITestAction, IRuleElementData)\n-class TestAction(object):\n-    test = u""\n+class TestAction:\n+    test = ""\n \n-    summary = u"Test action"\n-    element = u"test.action"\n+    summary = "Test action"\n+    element = "test.action"\ndiff --git a/plone/contentrules/tests.py b/plone/contentrules/tests.py\nindex 5f05b4f..687cfa6 100644\n--- a/plone/contentrules/tests.py\n+++ b/plone/contentrules/tests.py\n@@ -1,39 +1,32 @@\n-import doctest\n-import re\n-import six\n-import unittest\n-\n from zope.component.testing import PlacelessSetup as CAPlacelessSetup\n from zope.configuration.xmlconfig import XMLConfig\n from zope.container.testing import PlacelessSetup as ContainerPlacelessSetup\n \n-optionflags = doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS\n-\n+import doctest\n+import unittest\n \n-class Py23DocChecker(doctest.OutputChecker):\n \n-    def check_output(self, want, got, optionflags):\n-        if six.PY2:\n-            got = re.sub("u\'(.*?)\'", "\'\\\\1\'", got)\n-        return doctest.OutputChecker.check_output(self, want, got, optionflags)\n+optionflags = doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS\n \n \n class PlacelessSetup(CAPlacelessSetup, ContainerPlacelessSetup):\n-\n     def setUp(self, doctesttest=None):\n         CAPlacelessSetup.setUp(self)\n         ContainerPlacelessSetup.setUp(self)\n \n+\n ps = PlacelessSetup()\n \n \n def configurationSetUp(test):\n     ps.setUp()\n     import zope.component\n-    XMLConfig(\'meta.zcml\', zope.component)()\n+\n+    XMLConfig("meta.zcml", zope.component)()\n \n     import plone.contentrules\n-    XMLConfig(\'configure.zcml\', plone.contentrules)()\n+\n+    XMLConfig("configure.zcml", plone.contentrules)()\n \n \n def configurationTearDown(test):\n@@ -41,19 +34,19 @@ def configurationTearDown(test):\n \n \n def test_suite():\n-    return unittest.TestSuite((\n-        doctest.DocFileSuite(\n-            \'README.rst\',\n-            setUp=configurationSetUp,\n-            tearDown=configurationTearDown,\n-            optionflags=optionflags,\n-            checker=Py23DocChecker(),\n+    return unittest.TestSuite(\n+        (\n+            doctest.DocFileSuite(\n+                "README.rst",\n+                setUp=configurationSetUp,\n+                tearDown=configurationTearDown,\n+                optionflags=optionflags,\n             ),\n-        doctest.DocFileSuite(\n-            \'zcml.rst\',\n-            setUp=configurationSetUp,\n-            tearDown=configurationTearDown,\n-            optionflags=optionflags,\n-            checker=Py23DocChecker(),\n+            doctest.DocFileSuite(\n+                "zcml.rst",\n+                setUp=configurationSetUp,\n+                tearDown=configurationTearDown,\n+                optionflags=optionflags,\n             ),\n-        ))\n+        )\n+    )\ndiff --git a/plone/contentrules/zcml.rst b/plone/contentrules/zcml.rst\nindex 308a2a3..9ca2b28 100644\n--- a/plone/contentrules/zcml.rst\n+++ b/plone/contentrules/zcml.rst\n@@ -46,8 +46,7 @@ Here is how we would register these in ZCML:\n     ... """\n \n     >>> from zope.configuration.xmlconfig import xmlconfig\n-    >>> import six\n-    >>> from six import StringIO\n+    >>> from io import StringIO\n \n First, we need to make sure the ZCML directives are defined:\n \ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..fed6bfa 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,65 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\', \'six\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\n+ignore-packages = [\'plone.protect\']\ndiff --git a/setup.cfg b/setup.cfg\nindex 2a9acf1..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,23 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex 8f710fe..568a323 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,52 +1,43 @@\n-from setuptools import setup, find_packages\n+from setuptools import find_packages\n+from setuptools import setup\n \n-version = \'2.1.4.dev0\'\n+\n+version = "2.1.4.dev0"\n \n setup(\n-    name=\'plone.contentrules\',\n+    name="plone.contentrules",\n     version=version,\n     description="Plone ContentRules Engine",\n-    long_description=(open("README.rst").read() + "\\n" +\n-                      open("CHANGES.rst").read()),\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "Framework :: Zope2",\n         "Framework :: Zope :: 4",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Operating System :: OS Independent",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'Plone content rules events\',\n-    author=\'Plone Foundation\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/plone.contentrules\',\n-    license=\'GPL version 2\',\n+    keywords="Plone content rules events",\n+    author="Plone Foundation",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/plone.contentrules",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n-      \'setuptools\',\n-      \'six\',\n-      \'ZODB\',\n-      \'zope.annotation\',\n-      \'zope.component\',\n-      \'zope.componentvocabulary\',\n-      \'zope.configuration\',\n-      \'zope.container\',\n-      \'zope.i18nmessageid\',\n-      \'zope.interface\',\n-      \'zope.lifecycleevent\',\n-      \'zope.schema\',\n-      \'zope.testing\',\n+        "setuptools",\n+        "zope.componentvocabulary",\n+        "Zope",\n     ],\n-    )\n+)\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..444911a\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.contentrules {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s plone.contentrules {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

