Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2023-04-15T14:52:12+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/a3bc435f8bbafdbed3830fe891ee9bda248ac1ec

Configuring with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/5cc689e5.internal
A tox.ini
M pyproject.toml
M setup.cfg
D bootstrap.py

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..1b2346d\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "5cc689e5"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex 1a5e5d5..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,190 +0,0 @@\n-# -*- coding: utf-8 -*-\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-tmpeggs = tempfile.mkdtemp()\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep\n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n-\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--setuptools-version",\n-                  help="use a specific setuptools version")\n-\n-\n-options, args = parser.parse_args()\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    if options.allow_site_packages:\n-        import setuptools\n-        import pkg_resources\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-\n-if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n-\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-requirement = \'zc.buildout\'\n-version = options.version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        try:\n-            return not parsed_version.is_prerelease\n-        except AttributeError:\n-            # Older setuptools\n-            for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n-                    return False\n-            return True\n-\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/news/5cc689e5.internal b/news/5cc689e5.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/5cc689e5.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..92c3af9 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,64 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\', \'six\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex fb9aa04..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,16 +1,23 @@\n-[check-manifest]\n-ignore =\n-    *.cfg\n-    bootstrap.py\n-\n-[isort]\n-force_alphabetical_sort=True\n-force_single_line=True\n-lines_after_imports=2\n-line_length=200\n-not_skip=__init__.py\n-\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n \n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n \n-[bdist_wheel]\n-universal = 1\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..1dde591\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,68 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    format\n+    lint\n+    test\n+\n+[testenv]\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies and generate a graph out of them\n+deps =\n+    z3c.dependencychecker==2.11\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    dependencychecker\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s Products.MimetypesRegistry {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+usedevelop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir} -s Products.MimetypesRegistry {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2023-04-15T14:54:05+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/44c68513b951f74f34b6b53f294bb7a9d33e6397

chore: pyupgrade

Files changed:
M Products/MimetypesRegistry/MimeTypeItem.py
M Products/MimetypesRegistry/MimeTypesRegistry.py
M Products/MimetypesRegistry/__init__.py
M Products/MimetypesRegistry/common.py
M Products/MimetypesRegistry/encoding.py
M Products/MimetypesRegistry/interfaces.py
M Products/MimetypesRegistry/mime_types/__init__.py
M Products/MimetypesRegistry/mime_types/magic.py
M Products/MimetypesRegistry/mime_types/mtr_mimetypes.py
M Products/MimetypesRegistry/mime_types/py_mimetypes.py
M Products/MimetypesRegistry/mime_types/smi_mimetypes.py
M Products/MimetypesRegistry/mime_types/suppl_mimetypes.py
M Products/MimetypesRegistry/mime_types/windows_mimetypes.py
M Products/MimetypesRegistry/setuphandlers.py
M Products/MimetypesRegistry/testing.py
M Products/MimetypesRegistry/tests/test_encoding.py
M Products/MimetypesRegistry/tests/test_magic.py
M Products/MimetypesRegistry/tests/test_mimetypes.py
M Products/MimetypesRegistry/tests/utils.py
M Products/__init__.py
M setup.py

b'diff --git a/Products/MimetypesRegistry/MimeTypeItem.py b/Products/MimetypesRegistry/MimeTypeItem.py\nindex f45a64b..4a216bf 100644\n--- a/Products/MimetypesRegistry/MimeTypeItem.py\n+++ b/Products/MimetypesRegistry/MimeTypeItem.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from AccessControl import ClassSecurityInfo\n from Acquisition import Explicit\n from AccessControl.class_init import InitializeClass\n@@ -86,13 +84,13 @@ def edit(self, name, mimetypes, extensions, icon_path,\n         """edit this mime type"""\n         # if mimetypes and extensions are string instead of lists,\n         # split them on new lines\n-        if isinstance(mimetypes, six.string_types):\n+        if isinstance(mimetypes, str):\n             mimetypes = [mts.strip() for mts in mimetypes.split(\'\\n\')\n                          if mts.strip()]\n-        if isinstance(extensions, six.string_types):\n+        if isinstance(extensions, str):\n             extensions = [mts.strip() for mts in extensions.split(\'\\n\')\n                           if mts.strip()]\n-        if isinstance(globs, six.string_types):\n+        if isinstance(globs, str):\n             globs = [glob.strip() for glob in globs.split(\'\\n\')\n                      if glob.strip()]\n         self.__name__ = self.id = name\n@@ -115,7 +113,7 @@ def edit(self, name, mimetypes, extensions, icon_path,\n def guess_icon_path(mimetype, icons_dir=ICONS_DIR, icon_ext=\'png\'):\n     if mimetype.extensions:\n         for ext in mimetype.extensions:\n-            icon_path = \'%s.%s\' % (ext, icon_ext)\n+            icon_path = f\'{ext}.{icon_ext}\'\n             if os.path.exists(os.path.join(icons_dir, icon_path)):\n                 return PREFIX + icon_path\n     icon_path = \'%s.png\' % mimetype.major()\ndiff --git a/Products/MimetypesRegistry/MimeTypesRegistry.py b/Products/MimetypesRegistry/MimeTypesRegistry.py\nindex 6c92542..21264b9 100644\n--- a/Products/MimetypesRegistry/MimeTypesRegistry.py\n+++ b/Products/MimetypesRegistry/MimeTypesRegistry.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from Acquisition import aq_base\n from AccessControl.class_init import InitializeClass\n@@ -127,7 +126,7 @@ def register_mimetype(self, mt, mimetype):\n         if minor in group:\n             if group.get(minor) != mimetype:\n                 logger.warning(\n-                    \'Redefining mime type {0} ({1})\'.format(\n+                    \'Redefining mime type {} ({})\'.format(\n                         mt,\n                         mimetype.__class__\n                     )\n@@ -145,7 +144,7 @@ def register_extension(self, extension, mimetype):\n         if extension in self.extensions:\n             if self.extensions.get(extension) != mimetype:\n                 logger.warning(\n-                    \'Redefining extension {0} from {1} to {2}\'.format(\n+                    \'Redefining extension {} from {} to {}\'.format(\n                         extension,\n                         self.extensions[extension],\n                         mimetype\n@@ -171,7 +170,7 @@ def register_glob(self, glob, mimetype):\n             regex, mt = existing\n             if mt != mimetype:\n                 logger.warning(\n-                    \'Redefining glob {0} from {1} to {2}\'.format(\n+                    \'Redefining glob {} from {} to {}\'.format(\n                         glob,\n                         mt,\n                         mimetype\n@@ -344,8 +343,7 @@ def classify(self, data, mimetype=None, filename=None):\n                 failed = \'text/x-unknown-content-type\'\n                 filename = filename or \'\'\n                 data = data or \'\'\n-                if six.PY3:\n-                    data = data.encode()\n+                data = data.encode()\n                 ct, enc = guess_content_type(filename, data, None)\n                 if ct == failed:\n                     ct = \'text/plain\'\n@@ -383,7 +381,7 @@ def __call__(self, data, **kwargs):\n         # it is\n         mt = self.classify(data, mimetype=mimetype, filename=filename)\n \n-        if not mt.binary and not isinstance(data, six.text_type):\n+        if not mt.binary and not isinstance(data, str):\n             # if no encoding specified, try to guess it from data\n             if encoding is None:\n                 encoding = self.guess_encoding(data)\n@@ -398,12 +396,12 @@ def __call__(self, data, **kwargs):\n \n             try:\n                 try:\n-                    data = six.text_type(data, encoding, self.unicodePolicy)\n+                    data = str(data, encoding, self.unicodePolicy)\n                 except (ValueError, LookupError):\n                     # wrong unicodePolicy\n-                    data = six.text_type(data, encoding)\n+                    data = str(data, encoding)\n             except:\n-                data = six.text_type(data, self.fallbackEncoding)\n+                data = str(data, self.fallbackEncoding)\n \n         return (data, filename, aq_base(mt))\n \n@@ -413,7 +411,7 @@ def guess_encoding(self, data):\n \n         If no encoding can be guessed, fall back to utf-8.\n         """\n-        if isinstance(data, six.text_type):\n+        if isinstance(data, str):\n             # data maybe unicode but with another encoding specified\n             data = data.encode(\'UTF-8\')\n         encoding = guess_encoding(data)\ndiff --git a/Products/MimetypesRegistry/__init__.py b/Products/MimetypesRegistry/__init__.py\nindex 00adefe..80bdded 100644\n--- a/Products/MimetypesRegistry/__init__.py\n+++ b/Products/MimetypesRegistry/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl.SecurityInfo import allow_class\n from AccessControl.SecurityInfo import allow_module\n from Products.MimetypesRegistry import MimeTypesRegistry\ndiff --git a/Products/MimetypesRegistry/common.py b/Products/MimetypesRegistry/common.py\nindex 0d6eb33..6899267 100644\n--- a/Products/MimetypesRegistry/common.py\n+++ b/Products/MimetypesRegistry/common.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # this code is needed by Archetypes only\n import zope.deferredimport\n \ndiff --git a/Products/MimetypesRegistry/encoding.py b/Products/MimetypesRegistry/encoding.py\nindex da95771..2fd32ac 100644\n--- a/Products/MimetypesRegistry/encoding.py\n+++ b/Products/MimetypesRegistry/encoding.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n import encodings\n import re\n import six\n@@ -18,7 +17,7 @@ def guess_encoding(buffer):\n     encoding = _guess_encoding(buffer)\n     # step 1: if the encoding was detected, use the lower() because python\n     # is using lower case names for encodings\n-    if encoding and isinstance(encoding, six.string_types):\n+    if encoding and isinstance(encoding, str):\n         # encoding = encoding.lower()\n         pass\n     else:\n@@ -43,7 +42,7 @@ def _guess_encoding(buffer):\n \n     FIXME: it could be mime type driven but it seems less painful like that\n     """\n-    assert isinstance(buffer, type(\'\')), type(buffer)\n+    assert isinstance(buffer, str), type(buffer)\n     # default to ascii on empty buffer\n     if not buffer:\n         return \'ascii\'\ndiff --git a/Products/MimetypesRegistry/interfaces.py b/Products/MimetypesRegistry/interfaces.py\nindex a0ab663..a635f61 100644\n--- a/Products/MimetypesRegistry/interfaces.py\n+++ b/Products/MimetypesRegistry/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Interface\n \n \ndiff --git a/Products/MimetypesRegistry/mime_types/__init__.py b/Products/MimetypesRegistry/mime_types/__init__.py\nindex eccf174..2ea1524 100644\n--- a/Products/MimetypesRegistry/mime_types/__init__.py\n+++ b/Products/MimetypesRegistry/mime_types/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .mtr_mimetypes import *\n \n from . import mtr_mimetypes\ndiff --git a/Products/MimetypesRegistry/mime_types/magic.py b/Products/MimetypesRegistry/mime_types/magic.py\nindex d51a617..adf4297 100644\n--- a/Products/MimetypesRegistry/mime_types/magic.py\n+++ b/Products/MimetypesRegistry/mime_types/magic.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """\n magic.py\n \n@@ -314,7 +313,7 @@ def __init__(self, offset, t, op, value, msg, mask=None):\n         if t.count(\'&\') > 0:\n             mask = strToNum(t[t.index(\'&\') + 1:])\n             t = t[:t.index(\'&\')]\n-        if isinstance(offset, type(\'a\')):\n+        if isinstance(offset, str):\n             self.offset = strToNum(offset)\n         else:\n             self.offset = offset\ndiff --git a/Products/MimetypesRegistry/mime_types/mtr_mimetypes.py b/Products/MimetypesRegistry/mime_types/mtr_mimetypes.py\nindex 00507f1..f619282 100644\n--- a/Products/MimetypesRegistry/mime_types/mtr_mimetypes.py\n+++ b/Products/MimetypesRegistry/mime_types/mtr_mimetypes.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.MimetypesRegistry.interfaces import IClassifier\n from Products.MimetypesRegistry.MimeTypeItem import MimeTypeItem\n from zope.interface import implementer\ndiff --git a/Products/MimetypesRegistry/mime_types/py_mimetypes.py b/Products/MimetypesRegistry/mime_types/py_mimetypes.py\nindex 5cc874e..3a13290 100644\n--- a/Products/MimetypesRegistry/mime_types/py_mimetypes.py\n+++ b/Products/MimetypesRegistry/mime_types/py_mimetypes.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.MimetypesRegistry.interfaces import MimeTypeException\n from Products.MimetypesRegistry.MimeTypeItem import guess_icon_path\n from Products.MimetypesRegistry.MimeTypeItem import MimeTypeItem\ndiff --git a/Products/MimetypesRegistry/mime_types/smi_mimetypes.py b/Products/MimetypesRegistry/mime_types/smi_mimetypes.py\nindex 77399de..ede0777 100644\n--- a/Products/MimetypesRegistry/mime_types/smi_mimetypes.py\n+++ b/Products/MimetypesRegistry/mime_types/smi_mimetypes.py\n@@ -1,6 +1,5 @@\n-# -*- coding: utf-8 -*-\n-from six.moves.cPickle import dump\n-from six.moves.cPickle import load\n+from pickle import dump\n+from pickle import load\n from stat import ST_MTIME\n from xml.sax import parse\n from xml.sax.handler import ContentHandler\n@@ -55,7 +54,7 @@ def endElement(self, name):\n         if self.collect_comment and name in (\'comment\',):\n             self.collect_comment = False\n             lang = self.__comment_lang\n-            comment = u\'\'.join(self.__comment_buffer)\n+            comment = \'\'.join(self.__comment_buffer)\n             if not comment:\n                 comment = self.current[\'type\']\n             self.current[\'comments\'][lang] = comment\n@@ -77,7 +76,7 @@ def readSMIFile():\n     mtime = 0\n     try:\n         mtime = os.stat(SMI_FILE)[ST_MTIME]\n-    except (IOError, OSError):\n+    except OSError:\n         pass\n \n     if os.path.exists(SMI_COMPILED_FILE):\n@@ -87,7 +86,7 @@ def readSMIFile():\n         bin_mtime = 0\n         try:\n             bin_mtime = os.stat(SMI_COMPILED_FILE)[ST_MTIME]\n-        except (IOError, OSError):\n+        except OSError:\n             pass\n \n         if mtime <= bin_mtime:\n@@ -97,7 +96,7 @@ def readSMIFile():\n                 fd = open(SMI_COMPILED_FILE, \'rb\')\n                 result = load(fd)\n                 fd.close()\n-            except (IOError, OSError, EOFError):\n+            except (OSError, EOFError):\n                 pass\n \n             if result:\n@@ -109,7 +108,7 @@ def readSMIFile():\n         fd = open(SMI_COMPILED_FILE, \'wb\')\n         dump(result, fd, protocol=2)\n         fd.close()\n-    except (IOError, OSError):\n+    except OSError:\n         pass\n \n     return result\n@@ -136,7 +135,7 @@ def initialize(registry):\n             # malformed MIME type\n             continue\n \n-        name = str(res[\'comments\'].get(u\'en\', mt))\n+        name = str(res[\'comments\'].get(\'en\', mt))\n \n         # build a list of globs\n         globs = []\ndiff --git a/Products/MimetypesRegistry/mime_types/suppl_mimetypes.py b/Products/MimetypesRegistry/mime_types/suppl_mimetypes.py\nindex b67ebd2..b629b7f 100644\n--- a/Products/MimetypesRegistry/mime_types/suppl_mimetypes.py\n+++ b/Products/MimetypesRegistry/mime_types/suppl_mimetypes.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.MimetypesRegistry.interfaces import MimeTypeException\n from Products.MimetypesRegistry.MimeTypeItem import MimeTypeItem\n \ndiff --git a/Products/MimetypesRegistry/mime_types/windows_mimetypes.py b/Products/MimetypesRegistry/mime_types/windows_mimetypes.py\nindex 6322d14..283741c 100644\n--- a/Products/MimetypesRegistry/mime_types/windows_mimetypes.py\n+++ b/Products/MimetypesRegistry/mime_types/windows_mimetypes.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # Utilities for mime-types and the Windows registry.\n import six.moves.winreg\n import logging\n@@ -84,6 +83,6 @@ def initialize():\n     for mt in get_mime_types():\n         ext = get_ext_for_mimetype(mt)\n         desc = get_desc_for_mimetype(mt)\n-        print("%s (%s) - %s" % (mt.lower(), desc, ext))\n+        print(f"{mt.lower()} ({desc}) - {ext}")\n     import code\n     code.interact(local=locals())\ndiff --git a/Products/MimetypesRegistry/setuphandlers.py b/Products/MimetypesRegistry/setuphandlers.py\nindex 207ef44..1ff20c0 100644\n--- a/Products/MimetypesRegistry/setuphandlers.py\n+++ b/Products/MimetypesRegistry/setuphandlers.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n from Products.MimetypesRegistry.mime_types import smi_mimetypes\n \ndiff --git a/Products/MimetypesRegistry/testing.py b/Products/MimetypesRegistry/testing.py\nindex 7fe785e..1fccf81 100644\n--- a/Products/MimetypesRegistry/testing.py\n+++ b/Products/MimetypesRegistry/testing.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import applyProfile\n from plone.app.testing import IntegrationTesting\ndiff --git a/Products/MimetypesRegistry/tests/test_encoding.py b/Products/MimetypesRegistry/tests/test_encoding.py\nindex 01b9b22..c651a8e 100644\n--- a/Products/MimetypesRegistry/tests/test_encoding.py\n+++ b/Products/MimetypesRegistry/tests/test_encoding.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.MimetypesRegistry.encoding import guess_encoding\n from Products.MimetypesRegistry.testing import PRODUCTS_MIMETYPESREGISTRY_INTEGRATION_TESTING\n \ndiff --git a/Products/MimetypesRegistry/tests/test_magic.py b/Products/MimetypesRegistry/tests/test_magic.py\nindex c87ffce..de6168c 100644\n--- a/Products/MimetypesRegistry/tests/test_magic.py\n+++ b/Products/MimetypesRegistry/tests/test_magic.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.MimetypesRegistry.tests.utils import input_file_path\n from Products.CMFCore.utils import getToolByName\n from Products.MimetypesRegistry.mime_types.magic import guessMime\ndiff --git a/Products/MimetypesRegistry/tests/test_mimetypes.py b/Products/MimetypesRegistry/tests/test_mimetypes.py\nindex a5d1544..3e16f84 100644\n--- a/Products/MimetypesRegistry/tests/test_mimetypes.py\n+++ b/Products/MimetypesRegistry/tests/test_mimetypes.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.utils import getToolByName\n from Products.MimetypesRegistry.mime_types import application_octet_stream\n from Products.MimetypesRegistry.mime_types import text_plain\ndiff --git a/Products/MimetypesRegistry/tests/utils.py b/Products/MimetypesRegistry/tests/utils.py\nindex 205923f..69bb7db 100644\n--- a/Products/MimetypesRegistry/tests/utils.py\n+++ b/Products/MimetypesRegistry/tests/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from os.path import abspath\n from os.path import basename\n from os.path import dirname\ndiff --git a/Products/__init__.py b/Products/__init__.py\nindex 85880ef..f48ad10 100644\n--- a/Products/__init__.py\n+++ b/Products/__init__.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n     __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/setup.py b/setup.py\nindex 6043d38..946018d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2023-04-15T14:54:33+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/7f40505667c917b320d018872d7c2f0286e7c260

chore: isort

Files changed:
M Products/MimetypesRegistry/MimeTypeItem.py
M Products/MimetypesRegistry/MimeTypesRegistry.py
M Products/MimetypesRegistry/common.py
M Products/MimetypesRegistry/mime_types/__init__.py
M Products/MimetypesRegistry/mime_types/smi_mimetypes.py
M Products/MimetypesRegistry/mime_types/windows_mimetypes.py
M Products/MimetypesRegistry/tests/test_encoding.py
M Products/MimetypesRegistry/tests/test_magic.py
M Products/MimetypesRegistry/tests/test_mimetypes.py
M setup.py

b'diff --git a/Products/MimetypesRegistry/MimeTypeItem.py b/Products/MimetypesRegistry/MimeTypeItem.py\nindex 4a216bf..8ffd6be 100644\n--- a/Products/MimetypesRegistry/MimeTypeItem.py\n+++ b/Products/MimetypesRegistry/MimeTypeItem.py\n@@ -1,6 +1,6 @@\n from AccessControl import ClassSecurityInfo\n-from Acquisition import Explicit\n from AccessControl.class_init import InitializeClass\n+from Acquisition import Explicit\n from OFS.SimpleItem import Item\n from Persistence import Persistent\n from Products.CMFCore.permissions import ManagePortal\ndiff --git a/Products/MimetypesRegistry/MimeTypesRegistry.py b/Products/MimetypesRegistry/MimeTypesRegistry.py\nindex 21264b9..56b5c81 100644\n--- a/Products/MimetypesRegistry/MimeTypesRegistry.py\n+++ b/Products/MimetypesRegistry/MimeTypesRegistry.py\n@@ -1,6 +1,6 @@\n from AccessControl import ClassSecurityInfo\n-from Acquisition import aq_base\n from AccessControl.class_init import InitializeClass\n+from Acquisition import aq_base\n from BTrees.OOBTree import OOBTree\n from OFS.Folder import Folder\n from Persistence import PersistentMapping\ndiff --git a/Products/MimetypesRegistry/common.py b/Products/MimetypesRegistry/common.py\nindex 6899267..55387bc 100644\n--- a/Products/MimetypesRegistry/common.py\n+++ b/Products/MimetypesRegistry/common.py\n@@ -1,6 +1,7 @@\n # this code is needed by Archetypes only\n import zope.deferredimport\n \n+\n zope.deferredimport.initialize()\n zope.deferredimport.deprecated(\n     "Import from Products.MimetypesRegistry.interfaces instead",\ndiff --git a/Products/MimetypesRegistry/mime_types/__init__.py b/Products/MimetypesRegistry/mime_types/__init__.py\nindex 2ea1524..917c080 100644\n--- a/Products/MimetypesRegistry/mime_types/__init__.py\n+++ b/Products/MimetypesRegistry/mime_types/__init__.py\n@@ -1,9 +1,8 @@\n-from .mtr_mimetypes import *\n-\n from . import mtr_mimetypes\n from . import py_mimetypes\n from . import smi_mimetypes\n from . import suppl_mimetypes\n+from .mtr_mimetypes import *\n \n \n def initialize(registry):\ndiff --git a/Products/MimetypesRegistry/mime_types/smi_mimetypes.py b/Products/MimetypesRegistry/mime_types/smi_mimetypes.py\nindex ede0777..b6b080b 100644\n--- a/Products/MimetypesRegistry/mime_types/smi_mimetypes.py\n+++ b/Products/MimetypesRegistry/mime_types/smi_mimetypes.py\n@@ -121,6 +121,7 @@ def initialize(registry):\n     global mimetypes\n     from Products.MimetypesRegistry.interfaces import MimeTypeException\n     from Products.MimetypesRegistry.MimeTypeItem import MimeTypeItem\n+\n     # Find things that are not in the specially registered mimetypes\n     # and add them using some default policy, none of these will impl\n     # iclassifier\ndiff --git a/Products/MimetypesRegistry/mime_types/windows_mimetypes.py b/Products/MimetypesRegistry/mime_types/windows_mimetypes.py\nindex 283741c..4f4b22c 100644\n--- a/Products/MimetypesRegistry/mime_types/windows_mimetypes.py\n+++ b/Products/MimetypesRegistry/mime_types/windows_mimetypes.py\n@@ -1,7 +1,7 @@\n # Utilities for mime-types and the Windows registry.\n-import six.moves.winreg\n import logging\n import mimetypes\n+import six.moves.winreg\n import win32api\n import win32con\n \ndiff --git a/Products/MimetypesRegistry/tests/test_encoding.py b/Products/MimetypesRegistry/tests/test_encoding.py\nindex c651a8e..f48f48f 100644\n--- a/Products/MimetypesRegistry/tests/test_encoding.py\n+++ b/Products/MimetypesRegistry/tests/test_encoding.py\n@@ -1,5 +1,7 @@\n from Products.MimetypesRegistry.encoding import guess_encoding\n-from Products.MimetypesRegistry.testing import PRODUCTS_MIMETYPESREGISTRY_INTEGRATION_TESTING\n+from Products.MimetypesRegistry.testing import (\n+    PRODUCTS_MIMETYPESREGISTRY_INTEGRATION_TESTING,\n+)\n \n import unittest\n \ndiff --git a/Products/MimetypesRegistry/tests/test_magic.py b/Products/MimetypesRegistry/tests/test_magic.py\nindex de6168c..4c3e77d 100644\n--- a/Products/MimetypesRegistry/tests/test_magic.py\n+++ b/Products/MimetypesRegistry/tests/test_magic.py\n@@ -1,8 +1,10 @@\n-from Products.MimetypesRegistry.tests.utils import input_file_path\n from Products.CMFCore.utils import getToolByName\n from Products.MimetypesRegistry.mime_types.magic import guessMime\n-from Products.MimetypesRegistry.testing import PRODUCTS_MIMETYPESREGISTRY_INTEGRATION_TESTING\n from Products.MimetypesRegistry.MimeTypeItem import MimeTypeItem\n+from Products.MimetypesRegistry.testing import (\n+    PRODUCTS_MIMETYPESREGISTRY_INTEGRATION_TESTING,\n+)\n+from Products.MimetypesRegistry.tests.utils import input_file_path\n \n import unittest\n \ndiff --git a/Products/MimetypesRegistry/tests/test_mimetypes.py b/Products/MimetypesRegistry/tests/test_mimetypes.py\nindex 3e16f84..d4f5319 100644\n--- a/Products/MimetypesRegistry/tests/test_mimetypes.py\n+++ b/Products/MimetypesRegistry/tests/test_mimetypes.py\n@@ -2,7 +2,9 @@\n from Products.MimetypesRegistry.mime_types import application_octet_stream\n from Products.MimetypesRegistry.mime_types import text_plain\n from Products.MimetypesRegistry.mime_types import text_xml\n-from Products.MimetypesRegistry.testing import PRODUCTS_MIMETYPESREGISTRY_INTEGRATION_TESTING\n+from Products.MimetypesRegistry.testing import (\n+    PRODUCTS_MIMETYPESREGISTRY_INTEGRATION_TESTING,\n+)\n from Products.MimetypesRegistry.tests.utils import input_file_path\n \n import unittest\ndiff --git a/setup.py b/setup.py\nindex 946018d..691e27d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,6 +1,7 @@\n from setuptools import find_packages\n from setuptools import setup\n \n+\n version = \'2.1.10.dev0\'\n \n setup(\n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2023-04-15T14:55:27+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/e9601716ab4b5b5f077a0e6334192e1ff7a9e509

chore: black

Files changed:
M Products/MimetypesRegistry/MimeTypeItem.py
M Products/MimetypesRegistry/MimeTypesRegistry.py
M Products/MimetypesRegistry/__init__.py
M Products/MimetypesRegistry/common.py
M Products/MimetypesRegistry/encoding.py
M Products/MimetypesRegistry/interfaces.py
M Products/MimetypesRegistry/mime_types/magic.py
M Products/MimetypesRegistry/mime_types/mtr_mimetypes.py
M Products/MimetypesRegistry/mime_types/py_mimetypes.py
M Products/MimetypesRegistry/mime_types/smi_mimetypes.py
M Products/MimetypesRegistry/mime_types/suppl_mimetypes.py
M Products/MimetypesRegistry/mime_types/windows_mimetypes.py
M Products/MimetypesRegistry/setuphandlers.py
M Products/MimetypesRegistry/testing.py
M Products/MimetypesRegistry/tests/test_encoding.py
M Products/MimetypesRegistry/tests/test_magic.py
M Products/MimetypesRegistry/tests/test_mimetypes.py
M Products/MimetypesRegistry/tests/utils.py
M Products/__init__.py
M setup.py

b'Content containing PDF or PS header bytes cannot be rendered from this domain for security reasons.'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2023-04-15T14:55:40+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/69ff65602a3e3874d1afc6952b850c879c5608e0

chore: pyupgrade

Files changed:
M Products/MimetypesRegistry/MimeTypesRegistry.py

b'diff --git a/Products/MimetypesRegistry/MimeTypesRegistry.py b/Products/MimetypesRegistry/MimeTypesRegistry.py\nindex 601a6ea..9e6f136 100644\n--- a/Products/MimetypesRegistry/MimeTypesRegistry.py\n+++ b/Products/MimetypesRegistry/MimeTypesRegistry.py\n@@ -119,7 +119,7 @@ def register_mimetype(self, mt, mimetype):\n         if minor in group:\n             if group.get(minor) != mimetype:\n                 logger.warning(\n-                    "Redefining mime type {} ({})".format(mt, mimetype.__class__)\n+                    f"Redefining mime type {mt} ({mimetype.__class__})"\n                 )\n         group[minor] = mimetype\n \n@@ -158,7 +158,7 @@ def register_glob(self, glob, mimetype):\n             regex, mt = existing\n             if mt != mimetype:\n                 logger.warning(\n-                    "Redefining glob {} from {} to {}".format(glob, mt, mimetype)\n+                    f"Redefining glob {glob} from {mt} to {mimetype}"\n                 )\n         # we don\'t validate fmt yet, but its ["txt", "html"]\n         pattern = re.compile(fnmatch.translate(glob))\n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2023-04-15T14:55:54+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/b5ff4314c04e008c91ec9650e6a81218c5e7ffb1

chore: black

Files changed:
M Products/MimetypesRegistry/MimeTypesRegistry.py

b'diff --git a/Products/MimetypesRegistry/MimeTypesRegistry.py b/Products/MimetypesRegistry/MimeTypesRegistry.py\nindex 9e6f136..b18f6df 100644\n--- a/Products/MimetypesRegistry/MimeTypesRegistry.py\n+++ b/Products/MimetypesRegistry/MimeTypesRegistry.py\n@@ -118,9 +118,7 @@ def register_mimetype(self, mt, mimetype):\n         group = self._mimetypes.setdefault(major, PersistentMapping())\n         if minor in group:\n             if group.get(minor) != mimetype:\n-                logger.warning(\n-                    f"Redefining mime type {mt} ({mimetype.__class__})"\n-                )\n+                logger.warning(f"Redefining mime type {mt} ({mimetype.__class__})")\n         group[minor] = mimetype\n \n     @security.protected(ManagePortal)\n@@ -157,9 +155,7 @@ def register_glob(self, glob, mimetype):\n         if existing is not None:\n             regex, mt = existing\n             if mt != mimetype:\n-                logger.warning(\n-                    f"Redefining glob {glob} from {mt} to {mimetype}"\n-                )\n+                logger.warning(f"Redefining glob {glob} from {mt} to {mimetype}")\n         # we don\'t validate fmt yet, but its ["txt", "html"]\n         pattern = re.compile(fnmatch.translate(glob))\n         globs[glob] = (pattern, mimetype)\n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2023-04-15T15:05:30+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/5bb5a7a8acfe985b1fb495a1da513bf9d149f06a

fix: exclude freedesktop.org.xml

Files changed:
M .pre-commit-config.yaml

b'diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nindex fdafec1..b5bf859 100644\n--- a/.pre-commit-config.yaml\n+++ b/.pre-commit-config.yaml\n@@ -22,6 +22,7 @@ repos:\n     rev: 3.0.3\n     hooks:\n     -   id: zpretty\n+        exclude: Products/MimetypesRegistry/mime_types/freedesktop.org.xml\n -   repo: https://github.com/PyCQA/flake8\n     rev: 6.0.0\n     hooks:\n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2023-04-15T15:06:01+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/afb0418f40267d3a74e20165e714029f85a98ea3

chore: zpretty ZCML/XML

Files changed:
M Products/MimetypesRegistry/configure.zcml
M Products/MimetypesRegistry/profiles/default/componentregistry.xml
M Products/MimetypesRegistry/profiles/default/metadata.xml
M Products/MimetypesRegistry/profiles/default/toolset.xml

b'diff --git a/Products/MimetypesRegistry/configure.zcml b/Products/MimetypesRegistry/configure.zcml\nindex f24cd35..04165ab 100644\n--- a/Products/MimetypesRegistry/configure.zcml\n+++ b/Products/MimetypesRegistry/configure.zcml\n@@ -2,9 +2,10 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="Products.MimetypesRegistry">\n+    i18n_domain="Products.MimetypesRegistry"\n+    >\n \n- <browser:resourceDirectory\n+  <browser:resourceDirectory\n       name="mimetype.icons"\n       directory="icons"\n       />\n@@ -12,10 +13,10 @@\n   <genericsetup:registerProfile\n       name="MimetypesRegistry"\n       title="MimetypesRegistry"\n-      directory="profiles/default"\n       description="Extension profile for default MimetypesRegistry setup."\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n+      directory="profiles/default"\n       post_handler=".setuphandlers.post_install"\n-    />\n+      />\n \n </configure>\ndiff --git a/Products/MimetypesRegistry/profiles/default/componentregistry.xml b/Products/MimetypesRegistry/profiles/default/componentregistry.xml\nindex b92d45c..82c4e2b 100644\n--- a/Products/MimetypesRegistry/profiles/default/componentregistry.xml\n+++ b/Products/MimetypesRegistry/profiles/default/componentregistry.xml\n@@ -1,10 +1,9 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <componentregistry>\n-  <adapters/>\n+  <adapters />\n   <utilities>\n-    <utility\n-        interface="Products.MimetypesRegistry.interfaces.IMimetypesRegistryTool"\n-        object="mimetypes_registry"\n+    <utility interface="Products.MimetypesRegistry.interfaces.IMimetypesRegistryTool"\n+             object="mimetypes_registry"\n     />\n   </utilities>\n </componentregistry>\ndiff --git a/Products/MimetypesRegistry/profiles/default/metadata.xml b/Products/MimetypesRegistry/profiles/default/metadata.xml\nindex d02ea5c..58133d6 100644\n--- a/Products/MimetypesRegistry/profiles/default/metadata.xml\n+++ b/Products/MimetypesRegistry/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>2</version>\n </metadata>\ndiff --git a/Products/MimetypesRegistry/profiles/default/toolset.xml b/Products/MimetypesRegistry/profiles/default/toolset.xml\nindex 09ee68a..42c28ab 100644\n--- a/Products/MimetypesRegistry/profiles/default/toolset.xml\n+++ b/Products/MimetypesRegistry/profiles/default/toolset.xml\n@@ -1,7 +1,6 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <tool-setup>\n-  <required\n-      class="Products.MimetypesRegistry.MimeTypesRegistry.MimeTypesRegistry"\n-      tool_id="mimetypes_registry"\n+  <required class="Products.MimetypesRegistry.MimeTypesRegistry.MimeTypesRegistry"\n+            tool_id="mimetypes_registry"\n   />\n </tool-setup>\n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2023-04-15T15:06:05+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/a8f91e0297fe1b73adc14261a6523d0e8219c8eb

chore: zpretty PT

Files changed:
M Products/MimetypesRegistry/www/addMimeType.zpt
M Products/MimetypesRegistry/www/editMimeType.zpt
M Products/MimetypesRegistry/www/listMimeTypes.zpt

b'diff --git a/Products/MimetypesRegistry/www/addMimeType.zpt b/Products/MimetypesRegistry/www/addMimeType.zpt\nindex cc37210..5d6a9b3 100644\n--- a/Products/MimetypesRegistry/www/addMimeType.zpt\n+++ b/Products/MimetypesRegistry/www/addMimeType.zpt\n@@ -1,60 +1,82 @@\n <h1 tal:replace="structure here/manage_page_header|nothing">Header</h1>\n-<h2 tal:define="manage_tabs_message options/manage_tabs_message | nothing"\n-    tal:replace="structure here/manage_tabs">Tabs</h2>\n+<h2 tal:define="\n+      manage_tabs_message options/manage_tabs_message | nothing;\n+    "\n+    tal:replace="structure here/manage_tabs"\n+>Tabs</h2>\n \n \n-<form method="POST" action="manage_addMimeType"\n-      tal:attributes="action string:${here/absolute_url}/manage_addMimeType;">\n+<form action="manage_addMimeType"\n+      method="POST"\n+      tal:attributes="\n+        action string:${here/absolute_url}/manage_addMimeType;\n+      "\n+>\n   <div class="form-title">\n     Add a new mime type\n   </div>\n \n-  <div tal:define="status python:request.get(\'portal_status\', \'\')"\n+  <div class="error"\n+       tal:define="\n+         status python:request.get(\'portal_status\', \'\');\n+       "\n        tal:condition="status"\n-       class="error"\n        tal:content="status"\n-       />\n+  ></div>\n \n   <table width="50%">\n     <tr>\n       <td class="form-label">Name</td>\n       <td class="form-element">\n         <input name="id"\n-               tal:attributes="value python:request.get(\'id\', \'\');"/>\n+               tal:attributes="\n+                 value python:request.get(\'id\', \'\');\n+               "\n+        />\n       </td>\n-      </tr><tr>\n+    </tr><tr>\n       <td class="form-label">Icon path</td>\n       <td class="form-element">\n         <input name="icon_path"\n-               tal:attributes="value python:request.get(\'icon_path\', \'\');"/>\n+               tal:attributes="\n+                 value python:request.get(\'icon_path\', \'\');\n+               "\n+        />\n       </td>\n-      </tr><tr>\n+    </tr><tr>\n       <td class="form-label">Binary?\n       </td>\n       <td class="form-element">\n-        <input name="binary" type="checkbox"\n-               tal:attributes="value python:request.get(\'binary\', \'\');"/>\n+        <input name="binary"\n+               type="checkbox"\n+               tal:attributes="\n+                 value python:request.get(\'binary\', \'\');\n+               "\n+        />\n       </td>\n-      </tr><tr>\n+    </tr><tr>\n       <td class="form-label">Mime-types\n       </td>\n       <td class="form-element">\n         <textarea name="mimetypes:list"\n-                  tal:content="python:request.get(\'mimetypes\', \'\')"/>\n+                  tal:content="python:request.get(\'mimetypes\', \'\')"\n+        ></textarea>\n       </td>\n-      </tr><tr>\n+    </tr><tr>\n       <td class="form-label">Extensions\n       </td>\n       <td class="form-element">\n         <textarea name="extensions:list"\n-                  tal:content="python:request.get(\'extensions\', \'\')"/>\n+                  tal:content="python:request.get(\'extensions\', \'\')"\n+        ></textarea>\n       </td>\n     </tr><tr>\n       <td class="form-label">Globs\n       </td>\n       <td class="form-element">\n         <textarea name="globs:list"\n-                  tal:content="python:request.get(\'globs\', \'\')"/>\n+                  tal:content="python:request.get(\'globs\', \'\')"\n+        ></textarea>\n       </td>\n     </tr>\n   </table>\ndiff --git a/Products/MimetypesRegistry/www/editMimeType.zpt b/Products/MimetypesRegistry/www/editMimeType.zpt\nindex a771656..4893251 100644\n--- a/Products/MimetypesRegistry/www/editMimeType.zpt\n+++ b/Products/MimetypesRegistry/www/editMimeType.zpt\n@@ -1,69 +1,99 @@\n <h1 tal:replace="structure here/manage_page_header|nothing">Header</h1>\n-<h2 tal:define="manage_tabs_message options/manage_tabs_message | nothing"\n-    tal:replace="structure here/manage_tabs">Tabs</h2>\n+<h2 tal:define="\n+      manage_tabs_message options/manage_tabs_message | nothing;\n+    "\n+    tal:replace="structure here/manage_tabs"\n+>Tabs</h2>\n \n \n-<form method="POST" action=""\n-      tal:attributes="action string:${here/absolute_url}/manage_editMimeType;"\n-      tal:define="mt python:here.lookup(request.form.get(\'mt_name\'))[0]">\n+<form action=""\n+      method="POST"\n+      tal:define="\n+        mt python:here.lookup(request.form.get(\'mt_name\'))[0];\n+      "\n+      tal:attributes="\n+        action string:${here/absolute_url}/manage_editMimeType;\n+      "\n+>\n \n   <div class="form-title">\n-    Edit mime type <b tal:content="mt/name"/>.\n+    Edit mime type\n+    <b tal:content="mt/name"></b>.\n   </div>\n \n-  <div tal:define="status python:request.get(\'portal_status\', \'\')"\n+  <div class="error"\n+       tal:define="\n+         status python:request.get(\'portal_status\', \'\');\n+       "\n        tal:condition="status"\n-       class="error"\n        tal:content="status"\n-       />\n+  ></div>\n \n-  <input type="hidden" name="name" tal:attributes="value request/mt_name"/>\n+  <input name="name"\n+         type="hidden"\n+         tal:attributes="\n+           value request/mt_name;\n+         "\n+  />\n \n   <table width="50%">\n     <tr>\n       <td>Name</td>\n       <td>\n         <input name="new_name"\n-               tal:attributes="value python:request.get(\'new_name\', mt.name());"/>\n+               tal:attributes="\n+                 value python:request.get(\'new_name\', mt.name());\n+               "\n+        />\n       </td>\n-      </tr><tr>\n+    </tr><tr>\n       <td>Icon path</td>\n       <td>\n         <input name="icon_path"\n-               tal:attributes="value python:request.get(\'icon_path\', mt.icon_path);"/>\n+               tal:attributes="\n+                 value python:request.get(\'icon_path\', mt.icon_path);\n+               "\n+        />\n       </td>\n-      </tr><tr>\n+    </tr><tr>\n       <td>Binary?\n       </td>\n       <td>\n-        <input name="binary" type="checkbox"\n-               tal:attributes="checked python:request.get(\'binary\', mt.binary) and 1 or 0;"/>\n+        <input name="binary"\n+               type="checkbox"\n+               tal:attributes="\n+                 checked python:request.get(\'binary\', mt.binary) and 1 or 0;\n+               "\n+        />\n       </td>\n-      </tr><tr>\n+    </tr><tr>\n       <td>Mime-types\n       </td>\n       <td>\n         <textarea name="mimetypes"\n-                  tal:content="python:request.get(\'mimetypes\', \'\\n\'.join(mt.mimetypes))"/>\n+                  tal:content="python:request.get(\'mimetypes\', \'\\n\'.join(mt.mimetypes))"\n+        ></textarea>\n       </td>\n-      </tr><tr>\n+    </tr><tr>\n       <td>Extensions\n       </td>\n       <td>\n         <textarea name="extensions"\n-                  tal:content="python:request.get(\'extensions\', \'\\n\'.join(mt.extensions))"/>\n+                  tal:content="python:request.get(\'extensions\', \'\\n\'.join(mt.extensions))"\n+        ></textarea>\n       </td>\n-      </tr><tr>\n+    </tr><tr>\n       <td>Globs\n       </td>\n       <td>\n         <textarea name="globs"\n-                  tal:content="python:request.get(\'globs\', \'\\n\'.join(mt.globs))"/>\n+                  tal:content="python:request.get(\'globs\', \'\\n\'.join(mt.globs))"\n+        ></textarea>\n       </td>\n     </tr>\n   </table>\n \n-  <input type="submit"/>\n+  <input type="submit" />\n </form>\n \n <tal:footer tal:replace="structure here/manage_page_footer|nothing">footer</tal:footer>\ndiff --git a/Products/MimetypesRegistry/www/listMimeTypes.zpt b/Products/MimetypesRegistry/www/listMimeTypes.zpt\nindex 4508e87..c09c66a 100644\n--- a/Products/MimetypesRegistry/www/listMimeTypes.zpt\n+++ b/Products/MimetypesRegistry/www/listMimeTypes.zpt\n@@ -1,25 +1,42 @@\n <h1 tal:replace="structure here/manage_page_header|nothing">Header</h1>\n-<h2 tal:define="manage_tabs_message options/manage_tabs_message | nothing"\n-    tal:replace="structure here/manage_tabs">Tabs</h2>\n+<h2 tal:define="\n+      manage_tabs_message options/manage_tabs_message | nothing;\n+    "\n+    tal:replace="structure here/manage_tabs"\n+>Tabs</h2>\n \n-<tal:block tal:define="mimetypes here/list_mimetypes">\n+<tal:block tal:define="\n+             mimetypes here/list_mimetypes;\n+           ">\n \n   <div class="form-title">\n-    Registered MIME types (<span tal:replace="python:len(mimetypes)"/>).\n+    Registered MIME types (<span tal:replace="python:len(mimetypes)"></span>).\n   </div>\n \n   <div align="right">\n-    <form method="POST" action="manage_addMimeTypeForm">\n-      <input type="submit" value="Add a new MIME type"/>\n+    <form action="manage_addMimeTypeForm"\n+          method="POST"\n+    >\n+      <input type="submit"\n+             value="Add a new MIME type"\n+      />\n     </form>\n   </div>\n \n-  <div tal:define="status python:request.get(\'portal_status\', \'\')"\n-       tal:condition="status" class="error"\n-       tal:content="status" />\n+  <div class="error"\n+       tal:define="\n+         status python:request.get(\'portal_status\', \'\');\n+       "\n+       tal:condition="status"\n+       tal:content="status"\n+  ></div>\n \n-  <form method="POST" action="manage_delObjects"\n-        tal:define="dummy mimetypes/sort">\n+  <form action="manage_delObjects"\n+        method="POST"\n+        tal:define="\n+          dummy mimetypes/sort;\n+        "\n+  >\n \n     <table width="90%">\n       <tr class="form-label">\n@@ -30,28 +47,43 @@\n         <th>Binary?</th>\n       </tr>\n \n-      <tr class="form-element" tal:repeat="mt_id mimetypes">\n-        <tal:block tal:define="mt python:here.lookup(mt_id)[0];">\n+      <tr class="form-element"\n+          tal:repeat="mt_id mimetypes"\n+      >\n+        <tal:block tal:define="\n+                     mt python:here.lookup(mt_id)[0];\n+                   ">\n           <td>\n-            <input type="checkbox" name="ids:list"\n-                   tal:attributes="value mt/normalized"/>\n+            <input name="ids:list"\n+                   type="checkbox"\n+                   tal:attributes="\n+                     value mt/normalized;\n+                   "\n+            />\n           </td>\n           <td>\n-            <img tal:attributes="src string:${here/portal_url}/${mt/icon_path}"/>\n+            <img tal:attributes="\n+                   src string:${here/portal_url}/${mt/icon_path};\n+                 " />\n           </td>\n           <td>\n             <a tal:content="mt/name"\n-               tal:attributes="href string:${here/absolute_url}/manage_editMimeTypeForm?mt_name=${mt/urlsafe}"/>\n+               tal:attributes="\n+                 href string:${here/absolute_url}/manage_editMimeTypeForm?mt_name=${mt/urlsafe};\n+               "\n+            ></a>\n           </td>\n-          <td tal:content="python:\', \'.join(mt.mimetypes)"/>\n-          <td tal:content="python:\', \'.join(mt.extensions)"/>\n-          <td tal:content="python:\', \'.join(mt.globs)"/>\n-          <td tal:content="python: mt.binary and \'yes\' or \'no\'"/>\n+          <td tal:content="python:\', \'.join(mt.mimetypes)"></td>\n+          <td tal:content="python:\', \'.join(mt.extensions)"></td>\n+          <td tal:content="python:\', \'.join(mt.globs)"></td>\n+          <td tal:content="python: mt.binary and \'yes\' or \'no\'"></td>\n         </tal:block>\n       </tr>\n     </table>\n \n-    <input type="submit" value="Delete Selected Items" />\n+    <input type="submit"\n+           value="Delete Selected Items"\n+    />\n \n   </form>\n \n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2023-04-15T15:09:56+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/fe380fff3f9e833f44c092788400695aec0e1586

chore: update trove classifiers

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 2b25d9a..f38c581 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,15 +15,14 @@\n         "Framework :: Zope :: 4",\n         "Operating System :: OS Independent",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License (GPL)",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n     ],\n     keywords="Zope mimetype registry",\n     author="Benjamin Saller",\n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2023-04-15T15:10:02+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/1c435a3026bd5599adfc950eadb2ebf7e5b2fc52

feat: pyroma

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex f38c581..003ec3b 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -33,6 +33,7 @@\n     include_package_data=True,\n     license="GPL",\n     zip_safe=False,\n+    python_requires=">=3.8",\n     install_requires=[\n         "AccessControl>=3.0.0",\n         "Acquisition",\n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2023-04-15T15:18:05+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/a5dfd0d46910108458bf78eb2c7a881aa078c755

feat(codespell): ignore freedesktop.org.xml

Files changed:
M .pre-commit-config.yaml

b'diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nindex b5bf859..648f565 100644\n--- a/.pre-commit-config.yaml\n+++ b/.pre-commit-config.yaml\n@@ -33,6 +33,7 @@ repos:\n     -   id: codespell\n         additional_dependencies:\n           - tomli\n+        exclude: (freedesktop.org.xml|mime.types)\n -   repo: https://github.com/mgedmin/check-manifest\n     rev: "0.49"\n     hooks:\n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2023-04-15T15:45:17+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/8c68399ed29c10a3fc4690affae3d5d67f9d794a

feat: codespell

Files changed:
M CHANGES.rst
M Products/MimetypesRegistry/MimeTypesRegistry.py
M Products/MimetypesRegistry/mime_types/magic.py
M Products/MimetypesRegistry/tests/test_mimetypes.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex f7cf1b9..1cf0332 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -291,7 +291,7 @@ Fixes:\n   is reparsed each time as before.\n   [hannosch]\n \n-- Change some mimetypes returnd by guessMime to match the mimetypes\n+- Change some mimetypes returned by guessMime to match the mimetypes\n   registered in mtr (from freedesktop.org\'s mime database).\n   [csenger]\n \n@@ -496,7 +496,7 @@ Fixes:\n   [yenzenz]\n \n - added a method to detect mimetypes of zipped files,\n-  here specialy for OOo now all Openofice files and zip\n+  here specially for OOo now all Openoffice files and zip\n   files are detected properly.  my simple tests are working:\n   a OOo-Writer and a simpe zipfile are detected.\n   [yenzenz]\n@@ -602,7 +602,7 @@ Fixes:\n - Added text/x-html-safe mime type for new transformation\n   [tiran]\n \n-- Don\'t return acquisition wrapped mimetype items beause they may lead to\n+- Don\'t return acquisition wrapped mimetype items because they may lead to\n   memory leaks.\n   [tiran]\n \n@@ -613,7 +613,7 @@ Fixes:\n - Added text/wiki mime type\n   [tiran]\n \n-- Don\'t log redefine warning if the currrent and the new object are equal\n+- Don\'t log redefine warning if the current and the new object are equal\n   [tiran]\n \n - initialize() MTR on __setstate__ aka when the MTR is loaded from ZODB.\ndiff --git a/Products/MimetypesRegistry/MimeTypesRegistry.py b/Products/MimetypesRegistry/MimeTypesRegistry.py\nindex b18f6df..63047cd 100644\n--- a/Products/MimetypesRegistry/MimeTypesRegistry.py\n+++ b/Products/MimetypesRegistry/MimeTypesRegistry.py\n@@ -338,7 +338,7 @@ def classify(self, data, mimetype=None, filename=None):\n \n     def __call__(self, data, **kwargs):\n         """Return a triple (data, filename, mimetypeobject) given\n-        some raw data and optional paramters\n+        some raw data and optional parameters\n \n         method from the isourceAdapter interface\n         """\n@@ -457,7 +457,7 @@ def manage_editMimeType(\n \n \n def split(name):\n-    """split a mime type in a (major / minor) 2-uple"""\n+    """split a mime type in a (major / minor) 2-tuple"""\n     try:\n         major, minor = name.split("/", 1)\n     except:\ndiff --git a/Products/MimetypesRegistry/mime_types/magic.py b/Products/MimetypesRegistry/mime_types/magic.py\nindex dfc4373..afbbbbf 100644\n--- a/Products/MimetypesRegistry/mime_types/magic.py\n+++ b/Products/MimetypesRegistry/mime_types/magic.py\n@@ -29,10 +29,10 @@\n     [257, "string", "=", b"ustar\\040\\040\\0", "application/x-gtar"],\n     # the following detection of OOo is according to\n     # http://books.evc-cit.info/oobook/ch01.html\n-    # and some heuristics found in hexeditor. if theres a better way to detect,\n+    # and some heuristics found in hexeditor. if there is a better way to detect,\n     # we should replace the signatures below.\n     # best would to just read and evaluate the manifest file of the zip, but\n-    # the magic tests are running on the first 8kB, so we cant unzip the\n+    # the magic tests are running on the first 8kB, so we can\'t unzip the\n     # manifest in files >8kB.\n     [\n         30,\n@@ -324,7 +324,7 @@ def strToNum(n):\n \n class magicTest:\n     def __init__(self, offset, t, op, value, msg, mask=None):\n-        # XXX: ``mask`` not used inside this package. Check wether used from\n+        # XXX: ``mask`` not used inside this package. Check whether used from\n         #      outside somewhere in plone. If so, write test, else remove.\n         if t.count("&") > 0:\n             mask = strToNum(t[t.index("&") + 1 :])\n@@ -375,23 +375,23 @@ def compare(self, data):\n                     [c] = struct.unpack("c", d)\n                 data = s\n             elif self.type == "short":\n-                # XXX: not used inside this package. Check wether used from\n+                # XXX: not used inside this package. Check whether used from\n                 #      outside somewhere in plone. If so, write test, else remove.\n                 [data] = struct.unpack("h", data[self.offset : self.offset + 2])\n             elif self.type == "leshort":\n-                # XXX: not used inside this package. Check wether used from\n+                # XXX: not used inside this package. Check whether used from\n                 #      outside somewhere in plone. If so, write test, else remove.\n                 [data] = struct.unpack("<h", data[self.offset : self.offset + 2])\n             elif self.type == "beshort":\n-                # XXX: not used inside this package. Check wether used from\n+                # XXX: not used inside this package. Check whether used from\n                 #      outside somewhere in plone. If so, write test, else remove.\n                 [data] = struct.unpack(">H", data[self.offset : self.offset + 2])\n             elif self.type == "long":\n-                # XXX: not used inside this package. Check wether used from\n+                # XXX: not used inside this package. Check whether used from\n                 #      outside somewhere in plone. If so, write test, else remove.\n                 [data] = struct.unpack("l", data[self.offset : self.offset + 4])\n             elif self.type == "lelong":\n-                # XXX: not used inside this package. Check wether used from\n+                # XXX: not used inside this package. Check whether used from\n                 #      outside somewhere in plone. If so, write test, else remove.\n                 [data] = struct.unpack("<l", data[self.offset : self.offset + 4])\n             elif self.type == "belong":\ndiff --git a/Products/MimetypesRegistry/tests/test_mimetypes.py b/Products/MimetypesRegistry/tests/test_mimetypes.py\nindex 0960b06..1f55056 100644\n--- a/Products/MimetypesRegistry/tests/test_mimetypes.py\n+++ b/Products/MimetypesRegistry/tests/test_mimetypes.py\n@@ -156,7 +156,7 @@ def testLookup(self):\n \n     def testAdaptMt(self):\n         data, filename, mt = self.registry("bar", mimetype="text/xml")\n-        # this test that data has been adaped and file seeked to 0\n+        # this test that data has been adapted and file seeked to 0\n         self.assertEqual(data, "bar")\n         self.assertEqual(filename, None)\n         self.assertTrue(isinstance(mt, text_xml), str(mt))\n@@ -164,7 +164,7 @@ def testAdaptMt(self):\n     def testAdaptFile(self):\n         file = open(input_file_path("rest1.rst"))\n         data, filename, mt = self.registry(file)\n-        # this test that data has been adaped and file seeked to 0\n+        # this test that data has been adapted and file seeked to 0\n         self.assertEqual(data, file.read())\n         file.close()\n         self.assertEqual(filename, "rest1.rst")\n@@ -172,7 +172,7 @@ def testAdaptFile(self):\n \n     def testAdaptData(self):\n         data, filename, mt = self.registry("<?xml ?>")\n-        # this test that data has been adaped and file seeked to 0\n+        # this test that data has been adapted and file seeked to 0\n         self.assertEqual(data, "<?xml ?>")\n         self.assertEqual(filename, None)\n         self.assertTrue(isinstance(mt, text_xml), str(mt))\n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2023-04-15T15:45:18+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/cb43f5fbdfe7449afeca554cefe8e7105e54dbeb

fix: drop six

Files changed:
M Products/MimetypesRegistry/MimeTypeItem.py
M Products/MimetypesRegistry/MimeTypesRegistry.py
M Products/MimetypesRegistry/encoding.py
M Products/MimetypesRegistry/mime_types/magic.py
M Products/MimetypesRegistry/mime_types/windows_mimetypes.py
M setup.py

b'diff --git a/Products/MimetypesRegistry/MimeTypeItem.py b/Products/MimetypesRegistry/MimeTypeItem.py\nindex 57bb4b7..500275f 100644\n--- a/Products/MimetypesRegistry/MimeTypeItem.py\n+++ b/Products/MimetypesRegistry/MimeTypeItem.py\n@@ -5,11 +5,10 @@\n from Persistence import Persistent\n from Products.CMFCore.permissions import ManagePortal\n from Products.MimetypesRegistry.interfaces import IMimetype\n-from six.moves import urllib\n from zope.interface import implementer\n \n import os\n-import six\n+import urllib\n \n \n @implementer(IMimetype)\ndiff --git a/Products/MimetypesRegistry/MimeTypesRegistry.py b/Products/MimetypesRegistry/MimeTypesRegistry.py\nindex 63047cd..8cd308b 100644\n--- a/Products/MimetypesRegistry/MimeTypesRegistry.py\n+++ b/Products/MimetypesRegistry/MimeTypesRegistry.py\n@@ -26,7 +26,6 @@\n import logging\n import os\n import re\n-import six\n \n \n logger = logging.getLogger(__name__)\ndiff --git a/Products/MimetypesRegistry/encoding.py b/Products/MimetypesRegistry/encoding.py\nindex c47cab3..c5d441a 100644\n--- a/Products/MimetypesRegistry/encoding.py\n+++ b/Products/MimetypesRegistry/encoding.py\n@@ -1,6 +1,5 @@\n import encodings\n import re\n-import six\n \n \n EMACS_ENCODING_RGX = re.compile(r"[^#]*[#\\s]*-\\*-\\s*coding: ([^\\s]*)\\s*-\\*-\\s*")\ndiff --git a/Products/MimetypesRegistry/mime_types/magic.py b/Products/MimetypesRegistry/mime_types/magic.py\nindex afbbbbf..69b3487 100644\n--- a/Products/MimetypesRegistry/mime_types/magic.py\n+++ b/Products/MimetypesRegistry/mime_types/magic.py\n@@ -10,7 +10,6 @@\n """\n __version__ = "$Revision: 1.2 $"[11:-2]\n \n-import six\n import string\n import struct\n \n@@ -371,7 +370,7 @@ def compare(self, data):\n                         break\n                     s = s + c\n                     d = data[self.offset + i]\n-                    d = d if six.PY2 else bytes([d])\n+                    d = bytes([d])\n                     [c] = struct.unpack("c", d)\n                 data = s\n             elif self.type == "short":\ndiff --git a/Products/MimetypesRegistry/mime_types/windows_mimetypes.py b/Products/MimetypesRegistry/mime_types/windows_mimetypes.py\nindex a1ea3df..c709771 100644\n--- a/Products/MimetypesRegistry/mime_types/windows_mimetypes.py\n+++ b/Products/MimetypesRegistry/mime_types/windows_mimetypes.py\n@@ -1,7 +1,6 @@\n # Utilities for mime-types and the Windows registry.\n import logging\n import mimetypes\n-import six.moves.winreg\n import win32api\n import win32con\n \ndiff --git a/setup.py b/setup.py\nindex 003ec3b..cfd6696 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -39,7 +39,6 @@\n         "Acquisition",\n         "Products.CMFCore",\n         "setuptools",\n-        "six",\n         "zope.contenttype",\n         "zope.deferredimport",\n         "zope.interface",\n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2023-04-15T15:45:18+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/fe06e9f554b58c03b2dc69f1b1eda5630f5265a9

feat: flake8

Files changed:
M Products/MimetypesRegistry/MimeTypesRegistry.py
M Products/MimetypesRegistry/encoding.py
M Products/MimetypesRegistry/mime_types/__init__.py
M Products/MimetypesRegistry/mime_types/magic.py
M Products/MimetypesRegistry/mime_types/mtr_mimetypes.py

b'diff --git a/Products/MimetypesRegistry/MimeTypesRegistry.py b/Products/MimetypesRegistry/MimeTypesRegistry.py\nindex 8cd308b..1f5c4b5 100644\n--- a/Products/MimetypesRegistry/MimeTypesRegistry.py\n+++ b/Products/MimetypesRegistry/MimeTypesRegistry.py\n@@ -379,7 +379,7 @@ def __call__(self, data, **kwargs):\n                 except (ValueError, LookupError):\n                     # wrong unicodePolicy\n                     data = str(data, encoding)\n-            except:\n+            except Exception:\n                 data = str(data, self.fallbackEncoding)\n \n         return (data, filename, aq_base(mt))\n@@ -459,6 +459,6 @@ def split(name):\n     """split a mime type in a (major / minor) 2-tuple"""\n     try:\n         major, minor = name.split("/", 1)\n-    except:\n+    except Exception:\n         raise MimeTypeException("Malformed MIME type (%s)" % name)\n     return major, minor\ndiff --git a/Products/MimetypesRegistry/encoding.py b/Products/MimetypesRegistry/encoding.py\nindex c5d441a..e98767e 100644\n--- a/Products/MimetypesRegistry/encoding.py\n+++ b/Products/MimetypesRegistry/encoding.py\n@@ -25,7 +25,7 @@ def guess_encoding(buffer):\n     # if None is returned or an exception is raised the encoding is invalid\n     try:\n         result = encodings.search_function(encoding.lower())\n-    except:\n+    except Exception:\n         # XXX log\n         result = None\n \ndiff --git a/Products/MimetypesRegistry/mime_types/__init__.py b/Products/MimetypesRegistry/mime_types/__init__.py\nindex 917c080..69c0fa9 100644\n--- a/Products/MimetypesRegistry/mime_types/__init__.py\n+++ b/Products/MimetypesRegistry/mime_types/__init__.py\n@@ -2,7 +2,7 @@\n from . import py_mimetypes\n from . import smi_mimetypes\n from . import suppl_mimetypes\n-from .mtr_mimetypes import *\n+from .mtr_mimetypes import *  # noqa: F401,F403\n \n \n def initialize(registry):\ndiff --git a/Products/MimetypesRegistry/mime_types/magic.py b/Products/MimetypesRegistry/mime_types/magic.py\nindex 69b3487..e292164 100644\n--- a/Products/MimetypesRegistry/mime_types/magic.py\n+++ b/Products/MimetypesRegistry/mime_types/magic.py\n@@ -302,18 +302,18 @@ def strToNum(n):\n         # hex\n         n = n[2:].lower()\n         while len(n) > 0:\n-            l = n[len(n) - 1]\n-            val = val + string.hexdigits.index(l) * col\n+            char = n[len(n) - 1]\n+            val = val + string.hexdigits.index(char) * col\n             col = col * 16\n             n = n[: len(n) - 1]\n     elif n[0] == "\\\\":\n         # octal\n         n = n[1:]\n         while len(n) > 0:\n-            l = n[len(n) - 1]\n-            if ord(l) < 48 or ord(l) > 57:\n+            char = n[len(n) - 1]\n+            if ord(char) < 48 or ord(char) > 57:\n                 break\n-            val = val + int(l) * col\n+            val = val + int(char) * col\n             col = col * 8\n             n = n[: len(n) - 1]\n     else:\n@@ -397,7 +397,7 @@ def compare(self, data):\n                 [data] = struct.unpack(">l", data[self.offset : self.offset + 4])\n             else:\n                 pass\n-        except:\n+        except Exception:\n             return None\n \n         return self.test(data)\ndiff --git a/Products/MimetypesRegistry/mime_types/mtr_mimetypes.py b/Products/MimetypesRegistry/mime_types/mtr_mimetypes.py\nindex 84d9b37..126133b 100644\n--- a/Products/MimetypesRegistry/mime_types/mtr_mimetypes.py\n+++ b/Products/MimetypesRegistry/mime_types/mtr_mimetypes.py\n@@ -74,7 +74,6 @@ class text_xml(MimeTypeItem):\n \n     def classify(self, data):\n         pat = b"^\\\\s*<\\\\?xml.*\\\\?>" if isinstance(data, bytes) else "^\\\\s*<\\\\?xml.*\\\\?>"\n-        m = re.search(pat, data)\n         return 1 if re.search(pat, data) else None\n \n \n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2023-04-15T15:45:18+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/b369ddcd00d239789322a59d1dd501ba7b44e444

feat: declare dependencies

Files changed:
M pyproject.toml
M setup.py

b'diff --git a/pyproject.toml b/pyproject.toml\nindex 92c3af9..e4eafcf 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -81,3 +81,4 @@ Zope = [\n   \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n ]\n python-dateutil = [\'dateutil\']\n+pywin32 = [\'win32api\', \'win32con\']\ndiff --git a/setup.py b/setup.py\nindex cfd6696..a06f4b9 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -35,17 +35,13 @@\n     zip_safe=False,\n     python_requires=">=3.8",\n     install_requires=[\n-        "AccessControl>=3.0.0",\n-        "Acquisition",\n         "Products.CMFCore",\n         "setuptools",\n-        "zope.contenttype",\n-        "zope.deferredimport",\n-        "zope.interface",\n-        "Zope2",\n+        \'pywin32 ; platform_system=="Windows"\',\n     ],\n     extras_require=dict(\n         test=[\n+            "plone.app.contenttypes[test]",\n             "plone.app.testing",\n         ]\n     ),\n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2023-04-15T15:45:40+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/c4aa28fac26480534daaccac994f3ccacad799b6

Add news entry

Files changed:
A news/1.breaking

b'diff --git a/news/1.breaking b/news/1.breaking\nnew file mode 100644\nindex 0000000..174ecbf\n--- /dev/null\n+++ b/news/1.breaking\n@@ -0,0 +1,2 @@\n+Drop python 2.7 support.\n+[gforcada]\n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2023-04-17T18:17:23+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/0258d4dbabf0f2be3dc520a25bcce0ee0f03799b

Update setup.py

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex a06f4b9..bdfe928 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -11,8 +11,7 @@\n     long_description=open("README.rst").read() + "\\n" + open("CHANGES.rst").read(),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n-        "Framework :: Zope2",\n-        "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n         "Operating System :: OS Independent",\n         "Framework :: Plone",\n         "Framework :: Plone :: 6.0",\n'

Repository: Products.MimetypesRegistry


Branch: refs/heads/master
Date: 2023-04-17T18:17:54+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.MimetypesRegistry/commit/eff57031fd6cba322bb6ee02e3987bcbf56257b6

Merge pull request #22 from plone/config-with-default-template-367daa9f

Config with default template

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
A news/1.breaking
A news/5cc689e5.internal
A tox.ini
M CHANGES.rst
M Products/MimetypesRegistry/MimeTypeItem.py
M Products/MimetypesRegistry/MimeTypesRegistry.py
M Products/MimetypesRegistry/__init__.py
M Products/MimetypesRegistry/common.py
M Products/MimetypesRegistry/configure.zcml
M Products/MimetypesRegistry/encoding.py
M Products/MimetypesRegistry/interfaces.py
M Products/MimetypesRegistry/mime_types/__init__.py
M Products/MimetypesRegistry/mime_types/magic.py
M Products/MimetypesRegistry/mime_types/mtr_mimetypes.py
M Products/MimetypesRegistry/mime_types/py_mimetypes.py
M Products/MimetypesRegistry/mime_types/smi_mimetypes.py
M Products/MimetypesRegistry/mime_types/suppl_mimetypes.py
M Products/MimetypesRegistry/mime_types/windows_mimetypes.py
M Products/MimetypesRegistry/profiles/default/componentregistry.xml
M Products/MimetypesRegistry/profiles/default/metadata.xml
M Products/MimetypesRegistry/profiles/default/toolset.xml
M Products/MimetypesRegistry/setuphandlers.py
M Products/MimetypesRegistry/testing.py
M Products/MimetypesRegistry/tests/test_encoding.py
M Products/MimetypesRegistry/tests/test_magic.py
M Products/MimetypesRegistry/tests/test_mimetypes.py
M Products/MimetypesRegistry/tests/utils.py
M Products/MimetypesRegistry/www/addMimeType.zpt
M Products/MimetypesRegistry/www/editMimeType.zpt
M Products/MimetypesRegistry/www/listMimeTypes.zpt
M Products/__init__.py
M pyproject.toml
M setup.cfg
M setup.py
D bootstrap.py

b'Content containing PDF or PS header bytes cannot be rendered from this domain for security reasons.'

