Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2019-03-01T14:48:36+01:00
Author: Manuel Reinhardt (reinhardt) <reinhardt@syslab.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/42f7b2d0aee1fc244c8c50232cd2e58463b81a17

Detect whether a webdav request is RFC822 or pure payload and handle accordingly.
Refs https://github.com/plone/Products.CMFPlone/issues/2781

Files changed:
A news/2781.bugfix
M plone/app/contenttypes/content.py
M plone/app/contenttypes/tests/test_webdav.py

b'diff --git a/news/2781.bugfix b/news/2781.bugfix\nnew file mode 100644\nindex 00000000..38893bb8\n--- /dev/null\n+++ b/news/2781.bugfix\n@@ -0,0 +1 @@\n+Detect whether a webdav request is RFC822 or pure payload and handle accordingly.\ndiff --git a/plone/app/contenttypes/content.py b/plone/app/contenttypes/content.py\nindex b9068c88..66876535 100644\n--- a/plone/app/contenttypes/content.py\n+++ b/plone/app/contenttypes/content.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from email.feedparser import headerRE\n from plone.app.contenttypes.interfaces import ICollection\n from plone.app.contenttypes.interfaces import IDocument\n from plone.app.contenttypes.interfaces import IEvent\n@@ -96,16 +97,21 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n         request = REQUEST if REQUEST is not None else self.REQUEST\n         response = RESPONSE if RESPONSE is not None else request.response\n \n-        self.dav__init(request, response)\n-        self.dav__simpleifhandler(request, response, refresh=1)\n-\n         infile = request.get(\'BODYFILE\', None)\n-        filename = request[\'PATH_INFO\'].split(\'/\')[-1]\n-        self.file = NamedBlobFile(\n-            data=infile.read(), filename=six.text_type(filename))\n+        first_line = infile.readline()\n+        infile.seek(0)\n+        if not headerRE.match(first_line):\n+            self.dav__init(request, response)\n+            self.dav__simpleifhandler(request, response, refresh=1)\n+\n+            filename = request[\'PATH_INFO\'].split(\'/\')[-1]\n+            self.file = NamedBlobFile(\n+                data=infile.read(), filename=six.text_type(filename))\n \n-        modified(self)\n-        return response\n+            modified(self)\n+            return response\n+        else:\n+            return super(File, self).PUT(REQUEST=request, RESPONSE=response)\n \n     def get_size(self):\n         return getattr(self.file, \'size\', 0)\n@@ -130,16 +136,22 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n         request = REQUEST if REQUEST is not None else self.REQUEST\n         response = RESPONSE if RESPONSE is not None else request.response\n \n-        self.dav__init(request, response)\n-        self.dav__simpleifhandler(request, response, refresh=1)\n-\n         infile = request.get(\'BODYFILE\', None)\n-        filename = request[\'PATH_INFO\'].split(\'/\')[-1]\n-        self.image = NamedBlobImage(\n-            data=infile.read(), filename=six.text_type(filename))\n-\n-        modified(self)\n-        return response\n+        first_line = infile.readline()\n+        infile.seek(0)\n+        if not headerRE.match(first_line):\n+            self.dav__init(request, response)\n+            self.dav__simpleifhandler(request, response, refresh=1)\n+\n+            infile = request.get(\'BODYFILE\', None)\n+            filename = request[\'PATH_INFO\'].split(\'/\')[-1]\n+            self.image = NamedBlobImage(\n+                data=infile.read(), filename=six.text_type(filename))\n+\n+            modified(self)\n+            return response\n+        else:\n+            return super(Image, self).PUT(REQUEST=request, RESPONSE=response)\n \n     def get_size(self):\n         return getattr(self.image, \'size\', 0)\ndiff --git a/plone/app/contenttypes/tests/test_webdav.py b/plone/app/contenttypes/tests/test_webdav.py\nindex a4ee5d33..f372cefc 100644\n--- a/plone/app/contenttypes/tests/test_webdav.py\n+++ b/plone/app/contenttypes/tests/test_webdav.py\n@@ -2,6 +2,7 @@\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from six.moves import StringIO\n from zope.publisher.browser import TestRequest\n from ZPublisher.HTTPResponse import HTTPResponse\n \n@@ -59,3 +60,47 @@ def test_file_put(self):\n         self.assertEqual(self.file.file.filename, u\'file.pdf\')\n         self.assertEqual(self.file.get_size(), 8561)\n         self.assertEqual(self.file.content_type(), \'application/pdf\')\n+\n+    def test_image_put_rfc822(self):\n+        """Upload an image through webdav/rfc822."""\n+        filename = os.path.join(os.path.dirname(__file__), u\'image.jpg\')\n+        body = StringIO()\n+        body.write("""title: My image\n+Content-Type: image/jpeg\n+Content-Disposition: attachment; filename*="utf-8\'\'image.jpg"\n+Portal-Type: Image\n+\n+{body}""".format(body=open(filename, \'rb\').read())\n+        )\n+        body.seek(0)\n+        request = DAVTestRequest(environ={\n+            \'BODYFILE\': body,\n+            \'PATH_INFO\': \'/foo/bar/image.jpg\',\n+        })\n+        self.image.REQUEST = request\n+        self.image.PUT()\n+        self.assertEqual(self.image.image.filename, u\'image.jpg\')\n+        self.assertEqual(self.image.get_size(), 5131)\n+        self.assertEqual(self.image.content_type(), \'image/jpeg\')\n+\n+    def test_file_put_rfc822(self):\n+        """Upload a file through webdav/rfc822."""\n+        filename = os.path.join(os.path.dirname(__file__), u\'file.pdf\')\n+        body = StringIO()\n+        body.write("""title: My file\n+Content-Type: application/pdf\n+Content-Disposition: attachment; filename*="utf-8\'\'file.pdf"\n+Portal-Type: File\n+\n+{body}""".format(body=open(filename, \'rb\').read())\n+        )\n+        body.seek(0)\n+        request = DAVTestRequest(environ={\n+            \'BODYFILE\': body,\n+            \'PATH_INFO\': \'/foo/bar/file.pdf\',\n+        })\n+        self.file.REQUEST = request\n+        self.file.PUT()\n+        self.assertEqual(self.file.file.filename, u\'file.pdf\')\n+        self.assertEqual(self.file.get_size(), 8561)\n+        self.assertEqual(self.file.content_type(), \'application/pdf\')\n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2019-03-04T11:00:21+01:00
Author: Manuel Reinhardt (reinhardt) <reinhardt@syslab.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/f37751797147f55117e15e378bf2b2dbec769e4f

Tests: Use bytes to fake request body. #2781

Files changed:
M plone/app/contenttypes/tests/test_webdav.py

b'diff --git a/plone/app/contenttypes/tests/test_webdav.py b/plone/app/contenttypes/tests/test_webdav.py\nindex f372cefc..f330dbfe 100644\n--- a/plone/app/contenttypes/tests/test_webdav.py\n+++ b/plone/app/contenttypes/tests/test_webdav.py\n@@ -2,7 +2,7 @@\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n-from six.moves import StringIO\n+from io import BytesIO\n from zope.publisher.browser import TestRequest\n from ZPublisher.HTTPResponse import HTTPResponse\n \n@@ -64,13 +64,13 @@ def test_file_put(self):\n     def test_image_put_rfc822(self):\n         """Upload an image through webdav/rfc822."""\n         filename = os.path.join(os.path.dirname(__file__), u\'image.jpg\')\n-        body = StringIO()\n-        body.write("""title: My image\n+        body = BytesIO()\n+        body.write(b"""title: My image\n Content-Type: image/jpeg\n Content-Disposition: attachment; filename*="utf-8\'\'image.jpg"\n Portal-Type: Image\n \n-{body}""".format(body=open(filename, \'rb\').read())\n+""" + open(filename, \'rb\').read()\n         )\n         body.seek(0)\n         request = DAVTestRequest(environ={\n@@ -86,13 +86,13 @@ def test_image_put_rfc822(self):\n     def test_file_put_rfc822(self):\n         """Upload a file through webdav/rfc822."""\n         filename = os.path.join(os.path.dirname(__file__), u\'file.pdf\')\n-        body = StringIO()\n-        body.write("""title: My file\n+        body = BytesIO()\n+        body.write(b"""title: My file\n Content-Type: application/pdf\n Content-Disposition: attachment; filename*="utf-8\'\'file.pdf"\n Portal-Type: File\n \n-{body}""".format(body=open(filename, \'rb\').read())\n+""" + open(filename, \'rb\').read()\n         )\n         body.seek(0)\n         request = DAVTestRequest(environ={\n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2019-03-04T11:00:57+01:00
Author: Manuel Reinhardt (reinhardt) <reinhardt@syslab.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/ae17d46b9d44fc6d706e4661ca8031f30ad23116

DAV: match header RE against text, not bytes. #2781

Files changed:
M plone/app/contenttypes/content.py

b"diff --git a/plone/app/contenttypes/content.py b/plone/app/contenttypes/content.py\nindex 66876535..d191da2e 100644\n--- a/plone/app/contenttypes/content.py\n+++ b/plone/app/contenttypes/content.py\n@@ -12,6 +12,7 @@\n from plone.dexterity.content import Item\n from plone.namedfile.file import NamedBlobFile\n from plone.namedfile.file import NamedBlobImage\n+from Products.CMFPlone.utils import safe_text\n from zope.deprecation import deprecation\n from zope.interface import implementer\n from zope.lifecycleevent import modified\n@@ -100,7 +101,7 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n         infile = request.get('BODYFILE', None)\n         first_line = infile.readline()\n         infile.seek(0)\n-        if not headerRE.match(first_line):\n+        if not headerRE.match(safe_text(first_line)):\n             self.dav__init(request, response)\n             self.dav__simpleifhandler(request, response, refresh=1)\n \n@@ -139,7 +140,7 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n         infile = request.get('BODYFILE', None)\n         first_line = infile.readline()\n         infile.seek(0)\n-        if not headerRE.match(first_line):\n+        if not headerRE.match(safe_text(first_line)):\n             self.dav__init(request, response)\n             self.dav__simpleifhandler(request, response, refresh=1)\n \n"

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2019-03-04T11:10:39+01:00
Author: Manuel Reinhardt (reinhardt) <reinhardt@syslab.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/0cbee0fe52a9b58b710a763a73b6740e7d324fde

Tests: Skip RFC822 tests if there is no ZServer. #2781

Files changed:
M plone/app/contenttypes/tests/test_webdav.py

b'diff --git a/plone/app/contenttypes/tests/test_webdav.py b/plone/app/contenttypes/tests/test_webdav.py\nindex f330dbfe..6a19a0fd 100644\n--- a/plone/app/contenttypes/tests/test_webdav.py\n+++ b/plone/app/contenttypes/tests/test_webdav.py\n@@ -7,9 +7,17 @@\n from ZPublisher.HTTPResponse import HTTPResponse\n \n import os.path\n+import pkg_resources\n import unittest\n \n \n+HAS_ZSERVER = True\n+try:\n+    dist = pkg_resources.get_distribution(\'ZServer\')\n+except pkg_resources.DistributionNotFound:\n+    HAS_ZSERVER = False\n+\n+\n class DAVTestRequest(TestRequest):\n     """Mock webdav request."""\n \n@@ -61,6 +69,7 @@ def test_file_put(self):\n         self.assertEqual(self.file.get_size(), 8561)\n         self.assertEqual(self.file.content_type(), \'application/pdf\')\n \n+    @unittest.skipIf(not HAS_ZSERVER, \'RFC822 not supported without ZServer\')\n     def test_image_put_rfc822(self):\n         """Upload an image through webdav/rfc822."""\n         filename = os.path.join(os.path.dirname(__file__), u\'image.jpg\')\n@@ -83,6 +92,7 @@ def test_image_put_rfc822(self):\n         self.assertEqual(self.image.get_size(), 5131)\n         self.assertEqual(self.image.content_type(), \'image/jpeg\')\n \n+    @unittest.skipIf(not HAS_ZSERVER, \'RFC822 not supported without ZServer\')\n     def test_file_put_rfc822(self):\n         """Upload a file through webdav/rfc822."""\n         filename = os.path.join(os.path.dirname(__file__), u\'file.pdf\')\n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2019-03-08T10:21:18+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/864706e490993f32a809ff0290f2e3ebb19e539d

Merge pull request #513 from plone/2781-external-editor-fix

Bring back external editor support

Files changed:
A news/2781.bugfix
M plone/app/contenttypes/content.py
M plone/app/contenttypes/tests/test_webdav.py

b'diff --git a/news/2781.bugfix b/news/2781.bugfix\nnew file mode 100644\nindex 00000000..38893bb8\n--- /dev/null\n+++ b/news/2781.bugfix\n@@ -0,0 +1 @@\n+Detect whether a webdav request is RFC822 or pure payload and handle accordingly.\ndiff --git a/plone/app/contenttypes/content.py b/plone/app/contenttypes/content.py\nindex b9068c88..d191da2e 100644\n--- a/plone/app/contenttypes/content.py\n+++ b/plone/app/contenttypes/content.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from email.feedparser import headerRE\n from plone.app.contenttypes.interfaces import ICollection\n from plone.app.contenttypes.interfaces import IDocument\n from plone.app.contenttypes.interfaces import IEvent\n@@ -11,6 +12,7 @@\n from plone.dexterity.content import Item\n from plone.namedfile.file import NamedBlobFile\n from plone.namedfile.file import NamedBlobImage\n+from Products.CMFPlone.utils import safe_text\n from zope.deprecation import deprecation\n from zope.interface import implementer\n from zope.lifecycleevent import modified\n@@ -96,16 +98,21 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n         request = REQUEST if REQUEST is not None else self.REQUEST\n         response = RESPONSE if RESPONSE is not None else request.response\n \n-        self.dav__init(request, response)\n-        self.dav__simpleifhandler(request, response, refresh=1)\n-\n         infile = request.get(\'BODYFILE\', None)\n-        filename = request[\'PATH_INFO\'].split(\'/\')[-1]\n-        self.file = NamedBlobFile(\n-            data=infile.read(), filename=six.text_type(filename))\n+        first_line = infile.readline()\n+        infile.seek(0)\n+        if not headerRE.match(safe_text(first_line)):\n+            self.dav__init(request, response)\n+            self.dav__simpleifhandler(request, response, refresh=1)\n+\n+            filename = request[\'PATH_INFO\'].split(\'/\')[-1]\n+            self.file = NamedBlobFile(\n+                data=infile.read(), filename=six.text_type(filename))\n \n-        modified(self)\n-        return response\n+            modified(self)\n+            return response\n+        else:\n+            return super(File, self).PUT(REQUEST=request, RESPONSE=response)\n \n     def get_size(self):\n         return getattr(self.file, \'size\', 0)\n@@ -130,16 +137,22 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n         request = REQUEST if REQUEST is not None else self.REQUEST\n         response = RESPONSE if RESPONSE is not None else request.response\n \n-        self.dav__init(request, response)\n-        self.dav__simpleifhandler(request, response, refresh=1)\n-\n         infile = request.get(\'BODYFILE\', None)\n-        filename = request[\'PATH_INFO\'].split(\'/\')[-1]\n-        self.image = NamedBlobImage(\n-            data=infile.read(), filename=six.text_type(filename))\n-\n-        modified(self)\n-        return response\n+        first_line = infile.readline()\n+        infile.seek(0)\n+        if not headerRE.match(safe_text(first_line)):\n+            self.dav__init(request, response)\n+            self.dav__simpleifhandler(request, response, refresh=1)\n+\n+            infile = request.get(\'BODYFILE\', None)\n+            filename = request[\'PATH_INFO\'].split(\'/\')[-1]\n+            self.image = NamedBlobImage(\n+                data=infile.read(), filename=six.text_type(filename))\n+\n+            modified(self)\n+            return response\n+        else:\n+            return super(Image, self).PUT(REQUEST=request, RESPONSE=response)\n \n     def get_size(self):\n         return getattr(self.image, \'size\', 0)\ndiff --git a/plone/app/contenttypes/tests/test_webdav.py b/plone/app/contenttypes/tests/test_webdav.py\nindex a4ee5d33..6a19a0fd 100644\n--- a/plone/app/contenttypes/tests/test_webdav.py\n+++ b/plone/app/contenttypes/tests/test_webdav.py\n@@ -2,13 +2,22 @@\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n+from io import BytesIO\n from zope.publisher.browser import TestRequest\n from ZPublisher.HTTPResponse import HTTPResponse\n \n import os.path\n+import pkg_resources\n import unittest\n \n \n+HAS_ZSERVER = True\n+try:\n+    dist = pkg_resources.get_distribution(\'ZServer\')\n+except pkg_resources.DistributionNotFound:\n+    HAS_ZSERVER = False\n+\n+\n class DAVTestRequest(TestRequest):\n     """Mock webdav request."""\n \n@@ -59,3 +68,49 @@ def test_file_put(self):\n         self.assertEqual(self.file.file.filename, u\'file.pdf\')\n         self.assertEqual(self.file.get_size(), 8561)\n         self.assertEqual(self.file.content_type(), \'application/pdf\')\n+\n+    @unittest.skipIf(not HAS_ZSERVER, \'RFC822 not supported without ZServer\')\n+    def test_image_put_rfc822(self):\n+        """Upload an image through webdav/rfc822."""\n+        filename = os.path.join(os.path.dirname(__file__), u\'image.jpg\')\n+        body = BytesIO()\n+        body.write(b"""title: My image\n+Content-Type: image/jpeg\n+Content-Disposition: attachment; filename*="utf-8\'\'image.jpg"\n+Portal-Type: Image\n+\n+""" + open(filename, \'rb\').read()\n+        )\n+        body.seek(0)\n+        request = DAVTestRequest(environ={\n+            \'BODYFILE\': body,\n+            \'PATH_INFO\': \'/foo/bar/image.jpg\',\n+        })\n+        self.image.REQUEST = request\n+        self.image.PUT()\n+        self.assertEqual(self.image.image.filename, u\'image.jpg\')\n+        self.assertEqual(self.image.get_size(), 5131)\n+        self.assertEqual(self.image.content_type(), \'image/jpeg\')\n+\n+    @unittest.skipIf(not HAS_ZSERVER, \'RFC822 not supported without ZServer\')\n+    def test_file_put_rfc822(self):\n+        """Upload a file through webdav/rfc822."""\n+        filename = os.path.join(os.path.dirname(__file__), u\'file.pdf\')\n+        body = BytesIO()\n+        body.write(b"""title: My file\n+Content-Type: application/pdf\n+Content-Disposition: attachment; filename*="utf-8\'\'file.pdf"\n+Portal-Type: File\n+\n+""" + open(filename, \'rb\').read()\n+        )\n+        body.seek(0)\n+        request = DAVTestRequest(environ={\n+            \'BODYFILE\': body,\n+            \'PATH_INFO\': \'/foo/bar/file.pdf\',\n+        })\n+        self.file.REQUEST = request\n+        self.file.PUT()\n+        self.assertEqual(self.file.file.filename, u\'file.pdf\')\n+        self.assertEqual(self.file.get_size(), 8561)\n+        self.assertEqual(self.file.content_type(), \'application/pdf\')\n'

