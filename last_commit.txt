Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-08-18T16:10:15+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/4e855f728e543c9fe3c3a90620d0581e203b23ba

move getAllowedSizes + getQuality from CMFPlone.utils to here

Files changed:
A news/132.bugfix
M plone/namedfile/configure.zcml
M plone/namedfile/utils/__init__.py

b'diff --git a/news/132.bugfix b/news/132.bugfix\nnew file mode 100644\nindex 0000000..71c0179\n--- /dev/null\n+++ b/news/132.bugfix\n@@ -0,0 +1,2 @@\n+Move getAllowedSizes + getQuality from CMFPlone.utils to this package.\n+[jensens]\ndiff --git a/plone/namedfile/configure.zcml b/plone/namedfile/configure.zcml\nindex d33aa89..46d13b2 100644\n--- a/plone/namedfile/configure.zcml\n+++ b/plone/namedfile/configure.zcml\n@@ -27,4 +27,18 @@\n   <!-- This adapter is only needed and used on Plone 6.  -->\n   <adapter zcml:condition="installed plone.base" factory=".adapters.ImageFieldScales" />\n \n+  <!-- configure sizes lookup for IAvailableSizes -->\n+  <utility\n+      zcml:condition="have plone-60"\n+      component=".utils.getAllowedSizes"\n+      provides=".interfaces.IAvailableSizes"\n+      />\n+\n+  <!-- quality lookup for IScaledImageQuality from plone.scale, which itself has no ZCML-->\n+  <utility\n+      zcml:condition="have plone-60"\n+      component=".utils.getQuality"\n+      provides="plone.scale.interfaces.IScaledImageQuality"\n+      />\n+\n </configure>\ndiff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py\nindex 87d24f0..fcbe2c0 100644\n--- a/plone/namedfile/utils/__init__.py\n+++ b/plone/namedfile/utils/__init__.py\n@@ -337,3 +337,30 @@ def getHighPixelDensityScales():\n             {"scale": 3, "quality": settings.quality_3x},\n         ]\n     return []\n+\n+def getAllowedSizes():\n+    registry = queryUtility(IRegistry)\n+    if not registry:\n+        return None\n+    settings = registry.forInterface(\n+        IImagingSchema, prefix="plone", check=False)\n+    if not settings.allowed_sizes:\n+        return None\n+    sizes = {}\n+    for line in settings.allowed_sizes:\n+        line = line.strip()\n+        if line:\n+            name, width, height = pattern.match(line).groups()\n+            name = name.strip().replace(\' \', \'_\')\n+            sizes[name] = int(width), int(height)\n+    return sizes\n+\n+\n+def getQuality():\n+    registry = queryUtility(IRegistry)\n+    if registry:\n+        settings = registry.forInterface(\n+            IImagingSchema, prefix="plone", check=False)\n+        return settings.quality or QUALITY_DEFAULT\n+    return QUALITY_DEFAULT\n+\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-08-19T13:41:07+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/87826ca780515722ad0834d57c63cf5d55eacc3f

missing pattern

Files changed:
M plone/namedfile/utils/__init__.py

b"diff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py\nindex fcbe2c0..a747a6c 100644\n--- a/plone/namedfile/utils/__init__.py\n+++ b/plone/namedfile/utils/__init__.py\n@@ -17,8 +17,12 @@\n import os.path\n import piexif\n import PIL.Image\n+import re\n import struct\n \n+# image-scaling\n+QUALITY_DEFAULT = 88\n+pattern = re.compile(r'^(.*)\\s+(\\d+)\\s*:\\s*(\\d+)$')\n \n log = getLogger(__name__)\n \n"

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-08-19T14:39:17+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/b07158da7130126fa1c19e21e774e3853f42a137

Merge pull request #132 from plone/jensens-move-utils

move getAllowedSizes + getQuality from CMFPlone.utils to here

Files changed:
A news/132.bugfix
M plone/namedfile/configure.zcml
M plone/namedfile/utils/__init__.py

b'diff --git a/news/132.bugfix b/news/132.bugfix\nnew file mode 100644\nindex 0000000..71c0179\n--- /dev/null\n+++ b/news/132.bugfix\n@@ -0,0 +1,2 @@\n+Move getAllowedSizes + getQuality from CMFPlone.utils to this package.\n+[jensens]\ndiff --git a/plone/namedfile/configure.zcml b/plone/namedfile/configure.zcml\nindex d33aa89..46d13b2 100644\n--- a/plone/namedfile/configure.zcml\n+++ b/plone/namedfile/configure.zcml\n@@ -27,4 +27,18 @@\n   <!-- This adapter is only needed and used on Plone 6.  -->\n   <adapter zcml:condition="installed plone.base" factory=".adapters.ImageFieldScales" />\n \n+  <!-- configure sizes lookup for IAvailableSizes -->\n+  <utility\n+      zcml:condition="have plone-60"\n+      component=".utils.getAllowedSizes"\n+      provides=".interfaces.IAvailableSizes"\n+      />\n+\n+  <!-- quality lookup for IScaledImageQuality from plone.scale, which itself has no ZCML-->\n+  <utility\n+      zcml:condition="have plone-60"\n+      component=".utils.getQuality"\n+      provides="plone.scale.interfaces.IScaledImageQuality"\n+      />\n+\n </configure>\ndiff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py\nindex 87d24f0..a747a6c 100644\n--- a/plone/namedfile/utils/__init__.py\n+++ b/plone/namedfile/utils/__init__.py\n@@ -17,8 +17,12 @@\n import os.path\n import piexif\n import PIL.Image\n+import re\n import struct\n \n+# image-scaling\n+QUALITY_DEFAULT = 88\n+pattern = re.compile(r\'^(.*)\\s+(\\d+)\\s*:\\s*(\\d+)$\')\n \n log = getLogger(__name__)\n \n@@ -337,3 +341,30 @@ def getHighPixelDensityScales():\n             {"scale": 3, "quality": settings.quality_3x},\n         ]\n     return []\n+\n+def getAllowedSizes():\n+    registry = queryUtility(IRegistry)\n+    if not registry:\n+        return None\n+    settings = registry.forInterface(\n+        IImagingSchema, prefix="plone", check=False)\n+    if not settings.allowed_sizes:\n+        return None\n+    sizes = {}\n+    for line in settings.allowed_sizes:\n+        line = line.strip()\n+        if line:\n+            name, width, height = pattern.match(line).groups()\n+            name = name.strip().replace(\' \', \'_\')\n+            sizes[name] = int(width), int(height)\n+    return sizes\n+\n+\n+def getQuality():\n+    registry = queryUtility(IRegistry)\n+    if registry:\n+        settings = registry.forInterface(\n+            IImagingSchema, prefix="plone", check=False)\n+        return settings.quality or QUALITY_DEFAULT\n+    return QUALITY_DEFAULT\n+\n'

