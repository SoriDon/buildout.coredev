Repository: plone.app.layout


Branch: refs/heads/master
Date: 2021-12-06T09:19:51+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/7e2178d2ae11780d9211c71d8c97e4f81cd27620

Global sections viewlet performance optimizations:

- Remove pointless caching on types_using_view,
- Store settings in variable for multiple access, bypassing cache checks,
- Remove now pointless caching on settings property,
- Deprecate now unused navtree_depth property.

Files changed:
A news/275.feature
M plone/app/layout/viewlets/common.py

b'diff --git a/news/275.feature b/news/275.feature\nnew file mode 100644\nindex 00000000..dd427e5b\n--- /dev/null\n+++ b/news/275.feature\n@@ -0,0 +1,7 @@\n+Global sections viewlet performance optimizations:\n+\n+- Remove pointless caching on types_using_view,\n+- Store settings in variable for multiple access, bypassing cache checks,\n+- Remove now pointless caching on settings property,\n+- Deprecate now unused navtree_depth property.\n+[thet]\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex 9b91fab4..e436eeda 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -9,7 +9,6 @@\n from plone.app.layout.navigation.root import getNavigationRootObject\n from plone.i18n.interfaces import ILanguageSchema\n from plone.memoize.view import memoize\n-from plone.memoize.view import memoize_contextless\n from plone.protect.utils import addTokenToUrl\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n@@ -242,7 +241,6 @@ class GlobalSectionsViewlet(ViewletBase):\n     _subtree_markup_wrapper = u\'<ul class="has_subtree dropdown">{out}</ul>\'\n \n     @property\n-    @memoize_contextless\n     def settings(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(INavigationSchema, prefix="plone")\n@@ -259,6 +257,7 @@ def navtree_path(self):\n         return getNavigationRoot(self.context)\n \n     @property\n+    @deprecate("This property will be removed in Plone 6")\n     def navtree_depth(self):\n         return self.settings.navigation_depth\n \n@@ -271,7 +270,6 @@ def current_language(self):\n         )\n \n     @property\n-    @memoize_contextless\n     def types_using_view(self):\n         registry = getUtility(IRegistry)\n         types_using_view = registry.get("plone.types_use_view_action_in_listings", [])\n@@ -281,6 +279,7 @@ def types_using_view(self):\n     @memoize\n     def navtree(self):\n         ret = defaultdict(list)\n+        settings = self.settings\n         navtree_path = self.navtree_path\n         portal_tabs = self.portal_tabs\n         for tab in portal_tabs:\n@@ -306,30 +305,30 @@ def navtree(self):\n             self.customize_tab(entry, tab)\n             ret[navtree_path].append(entry)\n \n-        if not self.settings.generate_tabs:\n+        if not settings.generate_tabs:\n             return ret\n \n         query = {\n             "path": {\n                 "query": self.navtree_path,\n-                "depth": self.navtree_depth,\n+                "depth": settings.navigation_depth,\n             },\n-            "portal_type": {"query": self.settings.displayed_types},\n+            "portal_type": {"query": settings.displayed_types},\n             "Language": self.current_language,\n-            "sort_on": self.settings.sort_tabs_on,\n+            "sort_on": settings.sort_tabs_on,\n             "is_default_page": False,\n         }\n \n-        if self.settings.sort_tabs_reversed:\n+        if settings.sort_tabs_reversed:\n             query["sort_order"] = "reverse"\n \n-        if not self.settings.nonfolderish_tabs:\n+        if not settings.nonfolderish_tabs:\n             query["is_folderish"] = True\n \n-        if self.settings.filter_on_workflow:\n-            query["review_state"] = list(self.settings.workflow_states_to_show or ())\n+        if settings.filter_on_workflow:\n+            query["review_state"] = list(settings.workflow_states_to_show or ())\n \n-        if not self.settings.show_excluded_items:\n+        if not settings.show_excluded_items:\n             query["exclude_from_nav"] = False\n \n         context_path = "/".join(self.context.getPhysicalPath())\n'

