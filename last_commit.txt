Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-10-27T12:00:18+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/fcf093b8b7ff58e545e2617d81a3af063bfc8254

Adapt the tests for Plone 6

Adapt the tests to cope with the fact the since Plone 6 the Plone site
root is cataloged

Files changed:
A news/1251.bugfix
M src/plone/restapi/tests/test_blocks_searchable_text.py
M src/plone/restapi/tests/test_search.py
M src/plone/restapi/tests/test_serializer_catalog.py

b'diff --git a/news/1251.bugfix b/news/1251.bugfix\nnew file mode 100644\nindex 000000000..883c4f44c\n--- /dev/null\n+++ b/news/1251.bugfix\n@@ -0,0 +1 @@\n+Adapt the test to cope with the fact the since Plone 6 the Plone site root is cataloged [ale-rt]\ndiff --git a/src/plone/restapi/tests/test_blocks_searchable_text.py b/src/plone/restapi/tests/test_blocks_searchable_text.py\nindex 5404fe743..4e580aec8 100644\n--- a/src/plone/restapi/tests/test_blocks_searchable_text.py\n+++ b/src/plone/restapi/tests/test_blocks_searchable_text.py\n@@ -97,7 +97,11 @@ def test_search_text(self):\n         self.assertEqual(json_response["items_total"], 1)\n         self.assertEqual(json_response["items"][0]["Title"], "A document")\n \n-        query = {"SearchableText": "Plone", "metadata_fields": "Title"}\n+        query = {\n+            "SearchableText": "Plone",\n+            "metadata_fields": "Title",\n+            "portal_type": "Document",\n+        }\n         response = self.api_session.get("/@search", params=query)\n         json_response = response.json()\n         self.assertEqual(json_response["items_total"], 1)\n@@ -184,18 +188,30 @@ def test_index_searchableText_value(self):\n \n         self.assertEqual(response.status_code, 204)\n \n-        query = {"SearchableText": "Volto", "metadata_fields": "Title"}\n+        query = {\n+            "SearchableText": "Volto",\n+            "metadata_fields": "Title",\n+            "portal_type": "Document",\n+        }\n         response = self.api_session.get("/@search", params=query)\n         json_response = response.json()\n         self.assertEqual(json_response["items_total"], 0)\n \n-        query = {"SearchableText": "Plone", "metadata_fields": "Title"}\n+        query = {\n+            "SearchableText": "Plone",\n+            "metadata_fields": "Title",\n+            "portal_type": "Document",\n+        }\n         response = self.api_session.get("/@search", params=query)\n         json_response = response.json()\n         self.assertEqual(json_response["items_total"], 1)\n         self.assertEqual(json_response["items"][0]["Title"], "A document")\n \n-        query = {"SearchableText": "custom", "metadata_fields": "Title"}\n+        query = {\n+            "SearchableText": "custom",\n+            "metadata_fields": "Title",\n+            "portal_type": "Document",\n+        }\n         response = self.api_session.get("/@search", params=query)\n         json_response = response.json()\n         self.assertEqual(json_response["items_total"], 1)\ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex 38da0e31c..2a6438929 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -1,5 +1,7 @@\n from datetime import date\n from DateTime import DateTime\n+from pkg_resources import get_distribution\n+from pkg_resources import parse_version\n from plone import api\n from plone.app.discussion.interfaces import IDiscussionSettings\n from plone.app.layout.navigation.interfaces import INavigationRoot\n@@ -21,6 +23,13 @@\n import unittest\n \n \n+HAS_PLONE_6 = parse_version(\n+    get_distribution("Products.CMFPlone").version\n+) >= parse_version(\n+    "6.0.0a1"\n+)\n+\n+\n class TestSearchFunctional(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n@@ -620,7 +629,12 @@ def test_uuid_index_query(self):\n     def test_respect_access_inactive_permission(self):\n         # admin can see everything\n         response = self.api_session.get("/@search", params={}).json()\n-        self.assertEqual(response["items_total"], 6)\n+        if HAS_PLONE_6:\n+            # Since Plone 6 the Plone site is indexed ...\n+            self.assertEqual(response["items_total"], 7)\n+        else:\n+            # ... before it was not\n+            self.assertEqual(response["items_total"], 6)\n         response = self.api_session.get(\n             "/@search", params={"Title": "Lorem Ipsum"}\n         ).json()\n@@ -630,7 +644,12 @@ def test_respect_access_inactive_permission(self):\n         self.api_session.auth = ("editoruser", "secret")\n \n         response = self.api_session.get("/@search", params={}).json()\n-        self.assertEqual(response["items_total"], 3)\n+        if HAS_PLONE_6:\n+            # Since Plone 6 the Plone site is indexed ...\n+            self.assertEqual(response["items_total"], 4)\n+        else:\n+            # ... before it was not\n+            self.assertEqual(response["items_total"], 3)\n         response = self.api_session.get(\n             "/@search", params={"Title": "Lorem Ipsum"}\n         ).json()\n@@ -644,7 +663,12 @@ def test_respect_access_inactive_permission(self):\n \n         # \xc2\xa0portal-enabled Editor can see expired contents\n         response = self.api_session.get("/@search", params={}).json()\n-        self.assertEqual(response["items_total"], 6)\n+        if HAS_PLONE_6:\n+            # Since Plone 6 the Plone site is indexed ...\n+            self.assertEqual(response["items_total"], 7)\n+        else:\n+            # ... before it was not\n+            self.assertEqual(response["items_total"], 6)\n         response = self.api_session.get(\n             "/@search", params={"Title": "Lorem Ipsum"}\n         ).json()\n@@ -653,7 +677,12 @@ def test_respect_access_inactive_permission(self):\n         # local-enabled Editor can only access expired contents inside folder\n         self.api_session.auth = ("localeditor", "secret")\n         response = self.api_session.get("/@search", params={}).json()\n-        self.assertEqual(response["items_total"], 1)\n+        if HAS_PLONE_6:\n+            # Since Plone 6 the Plone site is indexed ...\n+            self.assertEqual(response["items_total"], 2)\n+        else:\n+            # ... before it was not\n+            self.assertEqual(response["items_total"], 1)\n         response = self.api_session.get(\n             "/@search", params={"path": "/plone/folder"}\n         ).json()\ndiff --git a/src/plone/restapi/tests/test_serializer_catalog.py b/src/plone/restapi/tests/test_serializer_catalog.py\nindex 0f9cf8afe..7815952b0 100644\n--- a/src/plone/restapi/tests/test_serializer_catalog.py\n+++ b/src/plone/restapi/tests/test_serializer_catalog.py\n@@ -1,4 +1,6 @@\n from DateTime import DateTime\n+from pkg_resources import get_distribution\n+from pkg_resources import parse_version\n from plone.dexterity.utils import createContentInContainer\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n@@ -10,6 +12,13 @@\n import unittest\n \n \n+HAS_PLONE_6 = parse_version(\n+    get_distribution("Products.CMFPlone").version\n+) >= parse_version(\n+    "6.0.0a1"\n+)\n+\n+\n class TestCatalogSerializers(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n@@ -43,11 +52,22 @@ def test_lazy_cat_serialization_empty_resultset(self):\n             {"@id": "http://nohost", "items": [], "items_total": 0}, results\n         )\n \n+    @unittest.skipUnless(HAS_PLONE_6, "Since Plone 6 the Plone site is indexed ...")\n     def test_lazy_map_serialization(self):\n         # Test serialization of a Products.ZCatalog.Lazy.LazyMap\n         lazy_map = self.catalog()\n         results = getMultiAdapter((lazy_map, self.request), ISerializeToJson)()\n \n+        self.assertDictContainsSubset({"@id": "http://nohost"}, results)\n+        self.assertDictContainsSubset({"items_total": 3}, results)\n+        self.assertEqual(3, len(results["items"]))\n+\n+    @unittest.skipIf(HAS_PLONE_6, "... before it was not")\n+    def test_lazy_map_serialization_plone5(self):\n+        # Test serialization of a Products.ZCatalog.Lazy.LazyMap\n+        lazy_map = self.catalog()\n+        results = getMultiAdapter((lazy_map, self.request), ISerializeToJson)()\n+\n         self.assertDictContainsSubset({"@id": "http://nohost"}, results)\n         self.assertDictContainsSubset({"items_total": 2}, results)\n         self.assertEqual(2, len(results["items"]))\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-10-30T12:05:47+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/27c59d32294ae9bf9842dc5dd939830b7a1fc003

Merge pull request #1251 from plone/portal-in-the-catalog

Adapt the tests for Plone 6

Files changed:
A news/1251.bugfix
M src/plone/restapi/tests/test_blocks_searchable_text.py
M src/plone/restapi/tests/test_search.py
M src/plone/restapi/tests/test_serializer_catalog.py

b'diff --git a/news/1251.bugfix b/news/1251.bugfix\nnew file mode 100644\nindex 000000000..883c4f44c\n--- /dev/null\n+++ b/news/1251.bugfix\n@@ -0,0 +1 @@\n+Adapt the test to cope with the fact the since Plone 6 the Plone site root is cataloged [ale-rt]\ndiff --git a/src/plone/restapi/tests/test_blocks_searchable_text.py b/src/plone/restapi/tests/test_blocks_searchable_text.py\nindex 5404fe743..4e580aec8 100644\n--- a/src/plone/restapi/tests/test_blocks_searchable_text.py\n+++ b/src/plone/restapi/tests/test_blocks_searchable_text.py\n@@ -97,7 +97,11 @@ def test_search_text(self):\n         self.assertEqual(json_response["items_total"], 1)\n         self.assertEqual(json_response["items"][0]["Title"], "A document")\n \n-        query = {"SearchableText": "Plone", "metadata_fields": "Title"}\n+        query = {\n+            "SearchableText": "Plone",\n+            "metadata_fields": "Title",\n+            "portal_type": "Document",\n+        }\n         response = self.api_session.get("/@search", params=query)\n         json_response = response.json()\n         self.assertEqual(json_response["items_total"], 1)\n@@ -184,18 +188,30 @@ def test_index_searchableText_value(self):\n \n         self.assertEqual(response.status_code, 204)\n \n-        query = {"SearchableText": "Volto", "metadata_fields": "Title"}\n+        query = {\n+            "SearchableText": "Volto",\n+            "metadata_fields": "Title",\n+            "portal_type": "Document",\n+        }\n         response = self.api_session.get("/@search", params=query)\n         json_response = response.json()\n         self.assertEqual(json_response["items_total"], 0)\n \n-        query = {"SearchableText": "Plone", "metadata_fields": "Title"}\n+        query = {\n+            "SearchableText": "Plone",\n+            "metadata_fields": "Title",\n+            "portal_type": "Document",\n+        }\n         response = self.api_session.get("/@search", params=query)\n         json_response = response.json()\n         self.assertEqual(json_response["items_total"], 1)\n         self.assertEqual(json_response["items"][0]["Title"], "A document")\n \n-        query = {"SearchableText": "custom", "metadata_fields": "Title"}\n+        query = {\n+            "SearchableText": "custom",\n+            "metadata_fields": "Title",\n+            "portal_type": "Document",\n+        }\n         response = self.api_session.get("/@search", params=query)\n         json_response = response.json()\n         self.assertEqual(json_response["items_total"], 1)\ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex 38da0e31c..2a6438929 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -1,5 +1,7 @@\n from datetime import date\n from DateTime import DateTime\n+from pkg_resources import get_distribution\n+from pkg_resources import parse_version\n from plone import api\n from plone.app.discussion.interfaces import IDiscussionSettings\n from plone.app.layout.navigation.interfaces import INavigationRoot\n@@ -21,6 +23,13 @@\n import unittest\n \n \n+HAS_PLONE_6 = parse_version(\n+    get_distribution("Products.CMFPlone").version\n+) >= parse_version(\n+    "6.0.0a1"\n+)\n+\n+\n class TestSearchFunctional(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n@@ -620,7 +629,12 @@ def test_uuid_index_query(self):\n     def test_respect_access_inactive_permission(self):\n         # admin can see everything\n         response = self.api_session.get("/@search", params={}).json()\n-        self.assertEqual(response["items_total"], 6)\n+        if HAS_PLONE_6:\n+            # Since Plone 6 the Plone site is indexed ...\n+            self.assertEqual(response["items_total"], 7)\n+        else:\n+            # ... before it was not\n+            self.assertEqual(response["items_total"], 6)\n         response = self.api_session.get(\n             "/@search", params={"Title": "Lorem Ipsum"}\n         ).json()\n@@ -630,7 +644,12 @@ def test_respect_access_inactive_permission(self):\n         self.api_session.auth = ("editoruser", "secret")\n \n         response = self.api_session.get("/@search", params={}).json()\n-        self.assertEqual(response["items_total"], 3)\n+        if HAS_PLONE_6:\n+            # Since Plone 6 the Plone site is indexed ...\n+            self.assertEqual(response["items_total"], 4)\n+        else:\n+            # ... before it was not\n+            self.assertEqual(response["items_total"], 3)\n         response = self.api_session.get(\n             "/@search", params={"Title": "Lorem Ipsum"}\n         ).json()\n@@ -644,7 +663,12 @@ def test_respect_access_inactive_permission(self):\n \n         # \xc2\xa0portal-enabled Editor can see expired contents\n         response = self.api_session.get("/@search", params={}).json()\n-        self.assertEqual(response["items_total"], 6)\n+        if HAS_PLONE_6:\n+            # Since Plone 6 the Plone site is indexed ...\n+            self.assertEqual(response["items_total"], 7)\n+        else:\n+            # ... before it was not\n+            self.assertEqual(response["items_total"], 6)\n         response = self.api_session.get(\n             "/@search", params={"Title": "Lorem Ipsum"}\n         ).json()\n@@ -653,7 +677,12 @@ def test_respect_access_inactive_permission(self):\n         # local-enabled Editor can only access expired contents inside folder\n         self.api_session.auth = ("localeditor", "secret")\n         response = self.api_session.get("/@search", params={}).json()\n-        self.assertEqual(response["items_total"], 1)\n+        if HAS_PLONE_6:\n+            # Since Plone 6 the Plone site is indexed ...\n+            self.assertEqual(response["items_total"], 2)\n+        else:\n+            # ... before it was not\n+            self.assertEqual(response["items_total"], 1)\n         response = self.api_session.get(\n             "/@search", params={"path": "/plone/folder"}\n         ).json()\ndiff --git a/src/plone/restapi/tests/test_serializer_catalog.py b/src/plone/restapi/tests/test_serializer_catalog.py\nindex 0f9cf8afe..7815952b0 100644\n--- a/src/plone/restapi/tests/test_serializer_catalog.py\n+++ b/src/plone/restapi/tests/test_serializer_catalog.py\n@@ -1,4 +1,6 @@\n from DateTime import DateTime\n+from pkg_resources import get_distribution\n+from pkg_resources import parse_version\n from plone.dexterity.utils import createContentInContainer\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n@@ -10,6 +12,13 @@\n import unittest\n \n \n+HAS_PLONE_6 = parse_version(\n+    get_distribution("Products.CMFPlone").version\n+) >= parse_version(\n+    "6.0.0a1"\n+)\n+\n+\n class TestCatalogSerializers(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n@@ -43,11 +52,22 @@ def test_lazy_cat_serialization_empty_resultset(self):\n             {"@id": "http://nohost", "items": [], "items_total": 0}, results\n         )\n \n+    @unittest.skipUnless(HAS_PLONE_6, "Since Plone 6 the Plone site is indexed ...")\n     def test_lazy_map_serialization(self):\n         # Test serialization of a Products.ZCatalog.Lazy.LazyMap\n         lazy_map = self.catalog()\n         results = getMultiAdapter((lazy_map, self.request), ISerializeToJson)()\n \n+        self.assertDictContainsSubset({"@id": "http://nohost"}, results)\n+        self.assertDictContainsSubset({"items_total": 3}, results)\n+        self.assertEqual(3, len(results["items"]))\n+\n+    @unittest.skipIf(HAS_PLONE_6, "... before it was not")\n+    def test_lazy_map_serialization_plone5(self):\n+        # Test serialization of a Products.ZCatalog.Lazy.LazyMap\n+        lazy_map = self.catalog()\n+        results = getMultiAdapter((lazy_map, self.request), ISerializeToJson)()\n+\n         self.assertDictContainsSubset({"@id": "http://nohost"}, results)\n         self.assertDictContainsSubset({"items_total": 2}, results)\n         self.assertEqual(2, len(results["items"]))\n'

