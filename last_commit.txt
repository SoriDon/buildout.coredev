Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2017-03-17T12:11:22+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/09214a6bb1ba726928332c37b093087dd4a471ef

Add new class form-view-name-VIEWNAME to form element

Files changed:
M CHANGES.rst
M plone/app/z3cform/templates/macros.pt
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 5d97cdc..51ccaa3 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,7 +1,7 @@
 Changelog
 =========
 
-2.2.2 (unreleased)
+2.3.0 (unreleased)
 ------------------
 
 Breaking changes:
@@ -10,7 +10,9 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Add new class ``form-view-name-VIEWNAME`` to form element indicating the view name w/o old kss prefix.
+  New class's replaces ``++`` in view by ``__`` in order to produce valid class (CSS selectable) names.
+  [jensens]
 
 Bug fixes:
 
diff --git a/plone/app/z3cform/templates/macros.pt b/plone/app/z3cform/templates/macros.pt
index 56cdb66..b5d36f1 100644
--- a/plone/app/z3cform/templates/macros.pt
+++ b/plone/app/z3cform/templates/macros.pt
@@ -61,10 +61,12 @@
                                   has_groups python:bool(groups);
                                   form_tabbing python:(has_groups and enable_form_tabbing) and 'enableFormTabbing pat-autotoc' or '';
                                   show_default_label python:has_groups and default_fieldset_label and len(view.widgets);
+                                  form_view_name_raw python:view.__name__ or request.getURL().split('/')[-1];
+                                  form_view_name python:'-'.join(['view', 'name'] + [x for x in form_view_name_raw.split('++') if x]);
                                   "
                       tal:attributes="action view/action|request/getURL;
                                       enctype view/enctype;
-                                      class python:'rowlike %s %s %s kssattr-formname-%s' % (unload_protection, form_tabbing, form_class, view.__name__ or request.getURL().split('/')[-1]);
+                                      class python:'rowlike {0} {1} {2} kssattr-formname-{3} {4}'.format(unload_protection, form_tabbing, form_class, form_view_name_raw, form_view_name);
                                       id view/id;
                                       method view/method|string:'post'
                                       ">
diff --git a/setup.py b/setup.py
index d9c4fcb..c5ef677 100644
--- a/setup.py
+++ b/setup.py
@@ -8,7 +8,7 @@ def read(*rnames):
     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()
 
 
-version = '2.2.2.dev0'
+version = '2.3.0.dev0'
 
 
 long_description = (


Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2017-03-17T12:11:22+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/29746bb9548bdc0e7d72c4f92c25590a980b6398

cleanup

Files changed:
M CHANGES.rst
M plone/app/z3cform/inline_validation.rst
M plone/app/z3cform/templates.py
M plone/app/z3cform/tests/example.py
M plone/app/z3cform/tests/test_objectsubform.py
M plone/app/z3cform/tests/test_utils.py
M plone/app/z3cform/tests/test_widget.py
M plone/app/z3cform/tests/test_widgets.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 51ccaa3..630572a 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -19,6 +19,9 @@ Bug fixes:
 - Catch TypeError occuring on conflicting subrequests in inline validation
   [tomgross]
 
+- Clean up: code-style, zca-decorators, replace lambda.
+  [jensens]
+
 
 2.2.1 (2017-02-12)
 ------------------
diff --git a/plone/app/z3cform/inline_validation.rst b/plone/app/z3cform/inline_validation.rst
index 95f4697..09bf41d 100644
--- a/plone/app/z3cform/inline_validation.rst
+++ b/plone/app/z3cform/inline_validation.rst
@@ -52,10 +52,10 @@ Then we create a simple z3c form
 Let's verify that worked:
 
     >>> from zope.component import getMultiAdapter
-    >>> from zope.interface import Interface, implements
+    >>> from zope.interface import Interface, implementer
     >>> from Acquisition import Implicit
-    >>> class Bar(Implicit):
-    ...     implements(Interface)
+    >>> @implementer(Interface)
+    ... class Bar(Implicit):
     ...     def restrictedTraverse(self, name):
     ...         # fake traversal to the form
     ...         if name.startswith('@@'):
diff --git a/plone/app/z3cform/templates.py b/plone/app/z3cform/templates.py
index bf4c820..55c455b 100644
--- a/plone/app/z3cform/templates.py
+++ b/plone/app/z3cform/templates.py
@@ -21,6 +21,7 @@ def path(filepart):
 # Override the layout wrapper view default template with a more Plone-looking
 # one
 
+
 layout_factory = plone.z3cform.templates.ZopeTwoFormTemplateFactory(
     path('layout.pt'),
     form=plone.z3cform.interfaces.IFormWrapper,
diff --git a/plone/app/z3cform/tests/example.py b/plone/app/z3cform/tests/example.py
index 8994390..3365f40 100644
--- a/plone/app/z3cform/tests/example.py
+++ b/plone/app/z3cform/tests/example.py
@@ -6,13 +6,13 @@
 from z3c.form import group
 from z3c.form.contentprovider import ContentProviders
 from z3c.form.interfaces import IFieldsAndContentProvidersForm
-from zope import interface
 from zope import schema
 from zope.contentprovider.provider import ContentProviderBase
-from zope.interface import implements
+from zope.interface import implementer
+from zope.interface import Interface
 
 
-class MySchema(interface.Interface):
+class MySchema(Interface):
     age = schema.Int(title=u'Age')
 
 
@@ -22,13 +22,13 @@ def render(self):
         return 'My test content provider'
 
 
+@implementer(IFieldsAndContentProvidersForm)
 class MyForm(form.Form):
-    implements(IFieldsAndContentProvidersForm)
     contentProviders = ContentProviders()
     contentProviders['myContentProvider'] = MyContentProvider
     # defining a contentProvider position is mandatory...
     contentProviders['myContentProvider'].position = 0
-    label = u"Please enter your age"
+    label = u'Please enter your age'
     ignoreContext = True  # don't use context to get widget data
 
     @button.buttonAndHandler(u'Apply')
@@ -40,8 +40,8 @@ class MyFormWrapper(FormWrapper):
     form = MyForm
 
 
-class MyGroupSchema(interface.Interface):
-    name = schema.TextLine(title=u"name")
+class MyGroupSchema(Interface):
+    name = schema.TextLine(title=u'name')
 
 
 class MyGroup(group.Group):
@@ -52,7 +52,7 @@ class MyGroup(group.Group):
 
 class MyGroupForm(group.GroupForm, form.Form):
     fields = field.Fields(MySchema)
-    label = u"Please enter your age and Name"
+    label = u'Please enter your age and Name'
     ignoreContext = True  # don't use context to get widget data
 
     groups = [MyGroup, ]
@@ -66,15 +66,15 @@ class MyGroupFormWrapper(FormWrapper):
     form = MyGroupForm
 
 
-class MyMultiSchema(interface.Interface):
-    ages = schema.Dict(title=u"ages",
-                       key_type=schema.TextLine(title=u"name"),
-                       value_type=schema.Int(title=u"age", default=38))
+class MyMultiSchema(Interface):
+    ages = schema.Dict(title=u'ages',
+                       key_type=schema.TextLine(title=u'name'),
+                       value_type=schema.Int(title=u'age', default=38))
 
 
 class MyMultiForm(form.Form):
     fields = field.Fields(MyMultiSchema)
-    label = u"Please enter the names and ages for each person"
+    label = u'Please enter the names and ages for each person'
     ignoreContext = True  # don't use context to get widget data
 
     @button.buttonAndHandler(u'Apply')
diff --git a/plone/app/z3cform/tests/test_objectsubform.py b/plone/app/z3cform/tests/test_objectsubform.py
index 2e049d7..dcfa049 100644
--- a/plone/app/z3cform/tests/test_objectsubform.py
+++ b/plone/app/z3cform/tests/test_objectsubform.py
@@ -7,23 +7,24 @@
 from z3c.form import field
 from z3c.form import form
 from z3c.form.object import registerFactoryAdapter
-from zope import interface
 from zope import publisher
 from zope import schema
 from zope.globalrequest import setRequest
+from zope.interface import implementer
+from zope.interface import Interface
 
 import unittest
 
 
-class ISubObject(interface.Interface):
+class ISubObject(Interface):
 
     title = schema.TextLine(
-        title=u"Subobject Title"
+        title=u'Subobject Title'
     )
 
 
+@implementer(ISubObject)
 class SubObject(object):
-    interface.implements(ISubObject)
 
     title = schema.fieldproperty.FieldProperty(ISubObject['title'])
 
@@ -34,19 +35,19 @@ def getId(self):
         return self.__name__ or ''
 
     def __repr__(self):
-        return "<SubObject title='{0:s}'>".format(self.title)
+        return '<SubObject title=\'{0:s}\'>'.format(self.title)
 
 
 registerFactoryAdapter(ISubObject, SubObject)
 
 
-class IComplexForm(interface.Interface):
+class IComplexForm(Interface):
 
     object_field = schema.List(
-        title=u"Object Field",
+        title=u'Object Field',
         required=False,
         value_type=schema.Object(
-            title=u"object",
+            title=u'object',
             schema=ISubObject
         )
     )
@@ -54,12 +55,13 @@ class IComplexForm(interface.Interface):
 
 class ComplexForm(form.Form):
     fields = field.Fields(IComplexForm)
-    label = u"Complex form"
+    label = u'Complex form'
     ignoreContext = True
 
 
+@implementer(IPloneFormLayer)
 class TestRequest(publisher.browser.TestRequest):
-    interface.implements(IPloneFormLayer)
+    pass
 
 
 class TestObjectSubForm(unittest.TestCase):
diff --git a/plone/app/z3cform/tests/test_utils.py b/plone/app/z3cform/tests/test_utils.py
index f5483d5..07a7c87 100644
--- a/plone/app/z3cform/tests/test_utils.py
+++ b/plone/app/z3cform/tests/test_utils.py
@@ -18,7 +18,7 @@ def test_simple(self):
     def test_simple_function(self):
         from plone.app.z3cform.utils import call_callables
 
-        test_in = lambda x: x
+        def test_in(x): return x
         test_compare = 'funny return value'
         test_out = call_callables(
             test_in,
diff --git a/plone/app/z3cform/tests/test_widget.py b/plone/app/z3cform/tests/test_widget.py
index 4569c28..7698977 100644
--- a/plone/app/z3cform/tests/test_widget.py
+++ b/plone/app/z3cform/tests/test_widget.py
@@ -1,15 +1,16 @@
 # -*- coding: utf-8 -*-
 from plone.app.z3cform.interfaces import IPloneFormLayer
 from plone.app.z3cform.wysiwyg.widget import WysiwygWidget
-from zope import interface
 from zope import publisher
 from zope.globalrequest import setRequest
+from zope.interface import implementer
 
 import unittest
 
 
+@implementer(IPloneFormLayer)
 class TestRequest(publisher.browser.TestRequest):
-    interface.implements(IPloneFormLayer)
+    pass
 
 
 class TestForm(object):
diff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py
index 61a3e01..b2935d6 100644
--- a/plone/app/z3cform/tests/test_widgets.py
+++ b/plone/app/z3cform/tests/test_widgets.py
@@ -17,7 +17,7 @@
 from zope.component.globalregistry import base
 from zope.globalrequest import setRequest
 from zope.interface import alsoProvides
-from zope.interface import implements
+from zope.interface import implementer
 from zope.interface import Interface
 from zope.publisher.browser import TestRequest as BaseTestRequest
 from zope.schema import BytesLine
@@ -37,8 +37,8 @@
 import unittest
 
 
+@implementer(IVocabularyFactory)
 class ExampleVocabulary(object):
-    implements(IVocabularyFactory)
 
     def __call__(self, context, query=None):
         items = [u'One', u'Two', u'Three']
@@ -1204,7 +1204,7 @@ def test_converter_List_of_Choice(self):
             List(value_type=TextLine()),
             List(value_type=BytesLine()),
             List(value_type=Choice(values=['one', 'two', 'three']))
-            )
+        )
         for field in fields:
             expected_value_type = getattr(field.value_type, '_type', unicode)
             if expected_value_type is None:
@@ -1224,7 +1224,7 @@ def test_converter_List_of_Choice(self):
             self.assertEqual(
                 type(converter.toFieldValue('id1;id2')[0]),
                 expected_value_type
-                )
+            )
 
     def test_fieldwidget(self):
         from plone.app.z3cform.widget import RelatedItemsWidget
@@ -1270,7 +1270,7 @@ def setUp(self):
         self.request = self.layer['request']
 
         class IWithText(Interface):
-            text = RichTextField(title=u"Text")
+            text = RichTextField(title=u'Text')
 
         self.field = IWithText['text']
 


Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2017-03-17T14:55:26+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/8ecd2042212dba027ef6edd86f57be69e92eaf05

corrected changelog

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 630572a..633acb2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,8 +10,8 @@ Breaking changes:
 
 New features:
 
-- Add new class ``form-view-name-VIEWNAME`` to form element indicating the view name w/o old kss prefix.
-  New class's replaces ``++`` in view by ``__`` in order to produce valid class (CSS selectable) names.
+- Add new class ``view-name-VIEWNAME`` to form element indicating the view name w/o old kss prefix.
+  New class's replaces ``++`` in view by ``-`` in order to produce valid class (CSS selectable) names.
   [jensens]
 
 Bug fixes:


Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2017-03-17T14:56:00+01:00
Author: agitator (agitator) <agitator@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/957aac870cd22bd706c6af17bed70288ccf37f4c

Merge pull request #63 from plone/jensens-formviewname

Add new class form-view-name-VIEWNAME to form element

Files changed:
M CHANGES.rst
M plone/app/z3cform/inline_validation.rst
M plone/app/z3cform/templates.py
M plone/app/z3cform/templates/macros.pt
M plone/app/z3cform/tests/example.py
M plone/app/z3cform/tests/test_objectsubform.py
M plone/app/z3cform/tests/test_utils.py
M plone/app/z3cform/tests/test_widget.py
M plone/app/z3cform/tests/test_widgets.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 5d97cdc..633acb2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,7 +1,7 @@
 Changelog
 =========
 
-2.2.2 (unreleased)
+2.3.0 (unreleased)
 ------------------
 
 Breaking changes:
@@ -10,13 +10,18 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Add new class ``view-name-VIEWNAME`` to form element indicating the view name w/o old kss prefix.
+  New class's replaces ``++`` in view by ``-`` in order to produce valid class (CSS selectable) names.
+  [jensens]
 
 Bug fixes:
 
 - Catch TypeError occuring on conflicting subrequests in inline validation
   [tomgross]
 
+- Clean up: code-style, zca-decorators, replace lambda.
+  [jensens]
+
 
 2.2.1 (2017-02-12)
 ------------------
diff --git a/plone/app/z3cform/inline_validation.rst b/plone/app/z3cform/inline_validation.rst
index 95f4697..09bf41d 100644
--- a/plone/app/z3cform/inline_validation.rst
+++ b/plone/app/z3cform/inline_validation.rst
@@ -52,10 +52,10 @@ Then we create a simple z3c form
 Let's verify that worked:
 
     >>> from zope.component import getMultiAdapter
-    >>> from zope.interface import Interface, implements
+    >>> from zope.interface import Interface, implementer
     >>> from Acquisition import Implicit
-    >>> class Bar(Implicit):
-    ...     implements(Interface)
+    >>> @implementer(Interface)
+    ... class Bar(Implicit):
     ...     def restrictedTraverse(self, name):
     ...         # fake traversal to the form
     ...         if name.startswith('@@'):
diff --git a/plone/app/z3cform/templates.py b/plone/app/z3cform/templates.py
index bf4c820..55c455b 100644
--- a/plone/app/z3cform/templates.py
+++ b/plone/app/z3cform/templates.py
@@ -21,6 +21,7 @@ def path(filepart):
 # Override the layout wrapper view default template with a more Plone-looking
 # one
 
+
 layout_factory = plone.z3cform.templates.ZopeTwoFormTemplateFactory(
     path('layout.pt'),
     form=plone.z3cform.interfaces.IFormWrapper,
diff --git a/plone/app/z3cform/templates/macros.pt b/plone/app/z3cform/templates/macros.pt
index 56cdb66..b5d36f1 100644
--- a/plone/app/z3cform/templates/macros.pt
+++ b/plone/app/z3cform/templates/macros.pt
@@ -61,10 +61,12 @@
                                   has_groups python:bool(groups);
                                   form_tabbing python:(has_groups and enable_form_tabbing) and 'enableFormTabbing pat-autotoc' or '';
                                   show_default_label python:has_groups and default_fieldset_label and len(view.widgets);
+                                  form_view_name_raw python:view.__name__ or request.getURL().split('/')[-1];
+                                  form_view_name python:'-'.join(['view', 'name'] + [x for x in form_view_name_raw.split('++') if x]);
                                   "
                       tal:attributes="action view/action|request/getURL;
                                       enctype view/enctype;
-                                      class python:'rowlike %s %s %s kssattr-formname-%s' % (unload_protection, form_tabbing, form_class, view.__name__ or request.getURL().split('/')[-1]);
+                                      class python:'rowlike {0} {1} {2} kssattr-formname-{3} {4}'.format(unload_protection, form_tabbing, form_class, form_view_name_raw, form_view_name);
                                       id view/id;
                                       method view/method|string:'post'
                                       ">
diff --git a/plone/app/z3cform/tests/example.py b/plone/app/z3cform/tests/example.py
index 8994390..3365f40 100644
--- a/plone/app/z3cform/tests/example.py
+++ b/plone/app/z3cform/tests/example.py
@@ -6,13 +6,13 @@
 from z3c.form import group
 from z3c.form.contentprovider import ContentProviders
 from z3c.form.interfaces import IFieldsAndContentProvidersForm
-from zope import interface
 from zope import schema
 from zope.contentprovider.provider import ContentProviderBase
-from zope.interface import implements
+from zope.interface import implementer
+from zope.interface import Interface
 
 
-class MySchema(interface.Interface):
+class MySchema(Interface):
     age = schema.Int(title=u'Age')
 
 
@@ -22,13 +22,13 @@ def render(self):
         return 'My test content provider'
 
 
+@implementer(IFieldsAndContentProvidersForm)
 class MyForm(form.Form):
-    implements(IFieldsAndContentProvidersForm)
     contentProviders = ContentProviders()
     contentProviders['myContentProvider'] = MyContentProvider
     # defining a contentProvider position is mandatory...
     contentProviders['myContentProvider'].position = 0
-    label = u"Please enter your age"
+    label = u'Please enter your age'
     ignoreContext = True  # don't use context to get widget data
 
     @button.buttonAndHandler(u'Apply')
@@ -40,8 +40,8 @@ class MyFormWrapper(FormWrapper):
     form = MyForm
 
 
-class MyGroupSchema(interface.Interface):
-    name = schema.TextLine(title=u"name")
+class MyGroupSchema(Interface):
+    name = schema.TextLine(title=u'name')
 
 
 class MyGroup(group.Group):
@@ -52,7 +52,7 @@ class MyGroup(group.Group):
 
 class MyGroupForm(group.GroupForm, form.Form):
     fields = field.Fields(MySchema)
-    label = u"Please enter your age and Name"
+    label = u'Please enter your age and Name'
     ignoreContext = True  # don't use context to get widget data
 
     groups = [MyGroup, ]
@@ -66,15 +66,15 @@ class MyGroupFormWrapper(FormWrapper):
     form = MyGroupForm
 
 
-class MyMultiSchema(interface.Interface):
-    ages = schema.Dict(title=u"ages",
-                       key_type=schema.TextLine(title=u"name"),
-                       value_type=schema.Int(title=u"age", default=38))
+class MyMultiSchema(Interface):
+    ages = schema.Dict(title=u'ages',
+                       key_type=schema.TextLine(title=u'name'),
+                       value_type=schema.Int(title=u'age', default=38))
 
 
 class MyMultiForm(form.Form):
     fields = field.Fields(MyMultiSchema)
-    label = u"Please enter the names and ages for each person"
+    label = u'Please enter the names and ages for each person'
     ignoreContext = True  # don't use context to get widget data
 
     @button.buttonAndHandler(u'Apply')
diff --git a/plone/app/z3cform/tests/test_objectsubform.py b/plone/app/z3cform/tests/test_objectsubform.py
index 2e049d7..dcfa049 100644
--- a/plone/app/z3cform/tests/test_objectsubform.py
+++ b/plone/app/z3cform/tests/test_objectsubform.py
@@ -7,23 +7,24 @@
 from z3c.form import field
 from z3c.form import form
 from z3c.form.object import registerFactoryAdapter
-from zope import interface
 from zope import publisher
 from zope import schema
 from zope.globalrequest import setRequest
+from zope.interface import implementer
+from zope.interface import Interface
 
 import unittest
 
 
-class ISubObject(interface.Interface):
+class ISubObject(Interface):
 
     title = schema.TextLine(
-        title=u"Subobject Title"
+        title=u'Subobject Title'
     )
 
 
+@implementer(ISubObject)
 class SubObject(object):
-    interface.implements(ISubObject)
 
     title = schema.fieldproperty.FieldProperty(ISubObject['title'])
 
@@ -34,19 +35,19 @@ def getId(self):
         return self.__name__ or ''
 
     def __repr__(self):
-        return "<SubObject title='{0:s}'>".format(self.title)
+        return '<SubObject title=\'{0:s}\'>'.format(self.title)
 
 
 registerFactoryAdapter(ISubObject, SubObject)
 
 
-class IComplexForm(interface.Interface):
+class IComplexForm(Interface):
 
     object_field = schema.List(
-        title=u"Object Field",
+        title=u'Object Field',
         required=False,
         value_type=schema.Object(
-            title=u"object",
+            title=u'object',
             schema=ISubObject
         )
     )
@@ -54,12 +55,13 @@ class IComplexForm(interface.Interface):
 
 class ComplexForm(form.Form):
     fields = field.Fields(IComplexForm)
-    label = u"Complex form"
+    label = u'Complex form'
     ignoreContext = True
 
 
+@implementer(IPloneFormLayer)
 class TestRequest(publisher.browser.TestRequest):
-    interface.implements(IPloneFormLayer)
+    pass
 
 
 class TestObjectSubForm(unittest.TestCase):
diff --git a/plone/app/z3cform/tests/test_utils.py b/plone/app/z3cform/tests/test_utils.py
index f5483d5..07a7c87 100644
--- a/plone/app/z3cform/tests/test_utils.py
+++ b/plone/app/z3cform/tests/test_utils.py
@@ -18,7 +18,7 @@ def test_simple(self):
     def test_simple_function(self):
         from plone.app.z3cform.utils import call_callables
 
-        test_in = lambda x: x
+        def test_in(x): return x
         test_compare = 'funny return value'
         test_out = call_callables(
             test_in,
diff --git a/plone/app/z3cform/tests/test_widget.py b/plone/app/z3cform/tests/test_widget.py
index 4569c28..7698977 100644
--- a/plone/app/z3cform/tests/test_widget.py
+++ b/plone/app/z3cform/tests/test_widget.py
@@ -1,15 +1,16 @@
 # -*- coding: utf-8 -*-
 from plone.app.z3cform.interfaces import IPloneFormLayer
 from plone.app.z3cform.wysiwyg.widget import WysiwygWidget
-from zope import interface
 from zope import publisher
 from zope.globalrequest import setRequest
+from zope.interface import implementer
 
 import unittest
 
 
+@implementer(IPloneFormLayer)
 class TestRequest(publisher.browser.TestRequest):
-    interface.implements(IPloneFormLayer)
+    pass
 
 
 class TestForm(object):
diff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py
index 61a3e01..b2935d6 100644
--- a/plone/app/z3cform/tests/test_widgets.py
+++ b/plone/app/z3cform/tests/test_widgets.py
@@ -17,7 +17,7 @@
 from zope.component.globalregistry import base
 from zope.globalrequest import setRequest
 from zope.interface import alsoProvides
-from zope.interface import implements
+from zope.interface import implementer
 from zope.interface import Interface
 from zope.publisher.browser import TestRequest as BaseTestRequest
 from zope.schema import BytesLine
@@ -37,8 +37,8 @@
 import unittest
 
 
+@implementer(IVocabularyFactory)
 class ExampleVocabulary(object):
-    implements(IVocabularyFactory)
 
     def __call__(self, context, query=None):
         items = [u'One', u'Two', u'Three']
@@ -1204,7 +1204,7 @@ def test_converter_List_of_Choice(self):
             List(value_type=TextLine()),
             List(value_type=BytesLine()),
             List(value_type=Choice(values=['one', 'two', 'three']))
-            )
+        )
         for field in fields:
             expected_value_type = getattr(field.value_type, '_type', unicode)
             if expected_value_type is None:
@@ -1224,7 +1224,7 @@ def test_converter_List_of_Choice(self):
             self.assertEqual(
                 type(converter.toFieldValue('id1;id2')[0]),
                 expected_value_type
-                )
+            )
 
     def test_fieldwidget(self):
         from plone.app.z3cform.widget import RelatedItemsWidget
@@ -1270,7 +1270,7 @@ def setUp(self):
         self.request = self.layer['request']
 
         class IWithText(Interface):
-            text = RichTextField(title=u"Text")
+            text = RichTextField(title=u'Text')
 
         self.field = IWithText['text']
 
diff --git a/setup.py b/setup.py
index d9c4fcb..c5ef677 100644
--- a/setup.py
+++ b/setup.py
@@ -8,7 +8,7 @@ def read(*rnames):
     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()
 
 
-version = '2.2.2.dev0'
+version = '2.3.0.dev0'
 
 
 long_description = (


