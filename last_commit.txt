Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-02-01T23:20:54Z
Author: Manuel Amador (Rudd-O) (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.app.layout/commit/c7020921072fdc96beff56ec341dbc0b0be17598

Correct favicon handling.

As per https://github.com/plone/Products.CMFPlone/pull/3418#issuecomment-1027118882

1. Remove alternate icon HTML, since we do not serve alternate icons,
since we do not actually provide the user with a mechanism to upload
alternate icons, and serving the default Plone icon as an alternate
would cause branding problems for site operators.
2. Hardcode icon URL to /favicon.ico, rooted in the site navigation
root, rather than the overall site root, as the icon serving is done per
site navigation root, not per site root.
3. Ignore file name uploaded by the uploader.  There was no point in
serving the file name, since the view that actually serves the data (in
CMFPlone) cannot "rename itself" according to the file name of the icon
that the user uploaded when he uploaded the custom icon.
4. Instead of informing the browser that the favicon is at /favicon or
/favicon.ico depending on whether the user has customized the favicon,
simply inform the browser that the favicon is at /favicon.ico, and the
CMFPlone view is in charge of serving the correct data to the user.

Files changed:
M plone/app/layout/links/favicon.pt
M plone/app/layout/links/viewlets.py

b'diff --git a/plone/app/layout/links/favicon.pt b/plone/app/layout/links/favicon.pt\nindex 0f45640f..73fd1472 100644\n--- a/plone/app/layout/links/favicon.pt\n+++ b/plone/app/layout/links/favicon.pt\n@@ -1,6 +1,5 @@\n-<tal:favicon define="portal_url view/site_url">\n+<tal:favicon>\n     <link rel="preload icon" type="${python: view.mimetype}"\n           tal:attributes="href python: view.favicon_path" />\n-    <link rel="alternate icon" type="image/x-icon">\n     <link rel="mask-icon" tal:attributes="href python: view.favicon_path" />\n </tal:favicon>\n\\ No newline at end of file\ndiff --git a/plone/app/layout/links/viewlets.py b/plone/app/layout/links/viewlets.py\nindex 3948ca77..db695acd 100644\n--- a/plone/app/layout/links/viewlets.py\n+++ b/plone/app/layout/links/viewlets.py\n@@ -45,19 +45,24 @@ class FaviconViewlet(ViewletBase):\n     def init_favicon(self) -> NoReturn:\n         registry = getUtility(IRegistry)\n         settings: ISiteSchema = registry.forInterface(ISiteSchema, prefix="plone")\n-\n-        self.mimetype: str = settings.site_favicon_mimetype\n-        filename: str = self.get_filename(settings)\n-        self.favicon_path: str = str(self.site_url) + \'/favicon\'\n-        if not filename:\n-            self.favicon_path += \'.ico\'\n-\n-    @staticmethod\n-    def get_filename(settings: ISiteSchema) -> str:\n-        if getattr(settings, \'site_favicon\', False):\n-            filename, data = b64decode_file(settings.site_favicon)\n-            return filename\n-        return None\n+        self.mimetype: str = getattr(\n+            settings, "site_favicon_mimetype", "image/vnd.microsoft.icon"\n+        )\n+        # The filename is *always* /favicon.ico, irrespective of the content type,\n+        # because:\n+        #\n+        # 1. Browsers obey the content type over the extension.\n+        # 2. The actual serving view URL for the favicon is always /favicon.ico,\n+        #    and this name cannot be overridden from here into the view registered\n+        #    on CMFPlone, where the *actual* serving of the data takes place.\n+        # 3. Even if we could somehow override the view, there is no easy way to\n+        #    register in CMFPlone a different browser view for every icon file\n+        #    name the user may decide to upload.\n+        # 4. In many cases client applications just hit /favicon.ico irrespective\n+        #    of what the HTML says (remember that this specific view is only\n+        #    responsible for generating the metadata that lets the browser know\n+        #    where to find the favicon URL).\n+        self.favicon_path: str = str(self.navigation_root_url) + "/favicon.ico"\n \n     def render(self) -> ViewPageTemplateFile:\n         self.init_favicon()\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-02-02T00:05:07Z
Author: Manuel Amador (Rudd-O) (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.app.layout/commit/506df7c324ed763984e579d2229901e8d33f8024

Make towncrier's day.

Files changed:
A news/290.bugfix

b'diff --git a/news/290.bugfix b/news/290.bugfix\nnew file mode 100644\nindex 00000000..f67b7545\n--- /dev/null\n+++ b/news/290.bugfix\n@@ -0,0 +1 @@\n+Correct favicon handling -- fix URL to navroot/favicon.ico and ignore uploader file name.\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-02-02T00:13:24Z
Author: Manuel Amador (Rudd-O) (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.app.layout/commit/62aeac3a132515577d1ae772ee03aca875c153aa

Correct MIME type for default icon type.

Files changed:
M plone/app/layout/favicon_handler.py
M plone/app/layout/links/tests/test_favicon_viewlet.py

b'diff --git a/plone/app/layout/favicon_handler.py b/plone/app/layout/favicon_handler.py\nindex 329d29b8..f6cc1f62 100644\n--- a/plone/app/layout/favicon_handler.py\n+++ b/plone/app/layout/favicon_handler.py\n@@ -15,5 +15,5 @@ def updateMimetype(settings: RecordsProxy, event: IRecordModifiedEvent=None):\n         return\n \n     filename, data = b64decode_file(event.newValue)\n-    mimetype = mimetypes.guess_type(filename)[0] if filename else \'image/x-icon\'\n+    mimetype = mimetypes.guess_type(filename)[0] if filename else \'image/vnd.microsoft.icon\'\n     settings.__registry__[\'plone.site_favicon_mimetype\'] = mimetype\ndiff --git a/plone/app/layout/links/tests/test_favicon_viewlet.py b/plone/app/layout/links/tests/test_favicon_viewlet.py\nindex eb5d7494..9cf85a16 100644\n--- a/plone/app/layout/links/tests/test_favicon_viewlet.py\n+++ b/plone/app/layout/links/tests/test_favicon_viewlet.py\n@@ -60,11 +60,11 @@ def test_FaviconViewlet_get_mimetype_ico(self):\n         encoded_data = b64encode_file(filename=filename, data=file_data)\n         settings.site_favicon = encoded_data\n         mimetype = settings.site_favicon_mimetype\n-        self.assertEqual(mimetype, \'image/x-icon\')\n+        self.assertEqual(mimetype, \'image/vnd.microsoft.icon\')\n \n     def test_FaviconViewlet_get_mimetype_none(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSchema, prefix="plone")\n         settings.site_favicon = None\n         mimetype = settings.site_favicon_mimetype\n-        self.assertEqual(mimetype, \'image/x-icon\')\n+        self.assertEqual(mimetype, \'image/vnd.microsoft.icon\')\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-02-02T00:32:42Z
Author: Manuel Amador (Rudd-O) (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.app.layout/commit/e1472a6af68aaada09571dec9077f52381ccc098

Preserve the file name cache-busting properties of customizable icons.

When an icon is customized, we can exploit the file name of the customized icon to provide for a cache bust effect -- the cache key (URL) of the favicon URL served to the browser via HTML will vary depending on the name of the uploaded favicon.

We, of course, still preserve full compatibility with direct /favicon.ico access.

Files changed:
M plone/app/layout/links/viewlets.py

b'diff --git a/plone/app/layout/links/viewlets.py b/plone/app/layout/links/viewlets.py\nindex db695acd..9cffa77d 100644\n--- a/plone/app/layout/links/viewlets.py\n+++ b/plone/app/layout/links/viewlets.py\n@@ -48,6 +48,11 @@ def init_favicon(self) -> NoReturn:\n         self.mimetype: str = getattr(\n             settings, "site_favicon_mimetype", "image/vnd.microsoft.icon"\n         )\n+        cachebust = ""\n+        if getattr(settings, "site_favicon", False):\n+            # The user has customized the favicon via the Site configlet.\n+            filename, unused_data = b64decode_file(settings.site_favicon)\n+            cachebust = "?name=" + filename\n         # The filename is *always* /favicon.ico, irrespective of the content type,\n         # because:\n         #\n@@ -62,7 +67,17 @@ def init_favicon(self) -> NoReturn:\n         #    of what the HTML says (remember that this specific view is only\n         #    responsible for generating the metadata that lets the browser know\n         #    where to find the favicon URL).\n-        self.favicon_path: str = str(self.navigation_root_url) + "/favicon.ico"\n+        #\n+        # However, to allow for users to change their favicons *and* bust their\n+        # proxy caches, we do use the favicon filename in the served favicon\n+        # URL.  This does not cover the case of RSS and podcast apps that access\n+        # /favicon.ico by custom instead of consulting the HTML, but at least\n+        # it covers pretty much every browser out there.\n+        self.favicon_path: str = "".join([\n+            str(self.navigation_root_url),\n+            "/favicon.ico",\n+            cachebust,\n+        ])\n \n     def render(self) -> ViewPageTemplateFile:\n         self.init_favicon()\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-02-02T00:36:59Z
Author: Manuel Amador (Rudd-O) (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.app.layout/commit/ef8a1e0a68b52f2e36e0365936bb1ae5c3912902

Amend the news file.

Files changed:
M news/290.bugfix

b'diff --git a/news/290.bugfix b/news/290.bugfix\nindex f67b7545..e42c91ca 100644\n--- a/news/290.bugfix\n+++ b/news/290.bugfix\n@@ -1 +1 @@\n-Correct favicon handling -- fix URL to navroot/favicon.ico and ignore uploader file name.\n+Correct favicon handling -- fix URL to navroot/favicon.ico and use customized icon file name as part of the proxy cache key.\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-02-03T15:41:55Z
Author: Rudd-O (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.app.layout/commit/694493b568292acd6ee393769f1bbac067502ed1

Update news/290.bugfix

Co-authored-by: Alessandro Pisa &lt;alessandro.pisa@gmail.com&gt;

Files changed:
M news/290.bugfix

b'diff --git a/news/290.bugfix b/news/290.bugfix\nindex e42c91ca..403fcf81 100644\n--- a/news/290.bugfix\n+++ b/news/290.bugfix\n@@ -1 +1 @@\n-Correct favicon handling -- fix URL to navroot/favicon.ico and use customized icon file name as part of the proxy cache key.\n+Correct favicon handling: fix URL to navroot/favicon.ico and use customized icon file name as part of the proxy cache key.\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-02-03T15:42:03Z
Author: Rudd-O (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.app.layout/commit/e6abb7830f210db820bea8d4404294e81acf6406

Update plone/app/layout/links/viewlets.py

Co-authored-by: Alessandro Pisa &lt;alessandro.pisa@gmail.com&gt;

Files changed:
M plone/app/layout/links/viewlets.py

b'diff --git a/plone/app/layout/links/viewlets.py b/plone/app/layout/links/viewlets.py\nindex 9cffa77d..1d4e94d9 100644\n--- a/plone/app/layout/links/viewlets.py\n+++ b/plone/app/layout/links/viewlets.py\n@@ -51,7 +51,8 @@ def init_favicon(self) -> NoReturn:\n         cachebust = ""\n         if getattr(settings, "site_favicon", False):\n             # The user has customized the favicon via the Site configlet.\n-            filename, unused_data = b64decode_file(settings.site_favicon)\n+            filename = b64decode_file(settings.site_favicon)[0]\n+            \n             cachebust = "?name=" + filename\n         # The filename is *always* /favicon.ico, irrespective of the content type,\n         # because:\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-02-03T15:42:18Z
Author: Rudd-O (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.app.layout/commit/df6d6e225a8acd23c6cda91144ae09f21fd9d7c0

Update plone/app/layout/links/viewlets.py

Co-authored-by: Alessandro Pisa &lt;alessandro.pisa@gmail.com&gt;

Files changed:
M plone/app/layout/links/viewlets.py

b'diff --git a/plone/app/layout/links/viewlets.py b/plone/app/layout/links/viewlets.py\nindex 1d4e94d9..8096e3df 100644\n--- a/plone/app/layout/links/viewlets.py\n+++ b/plone/app/layout/links/viewlets.py\n@@ -74,11 +74,7 @@ def init_favicon(self) -> NoReturn:\n         # URL.  This does not cover the case of RSS and podcast apps that access\n         # /favicon.ico by custom instead of consulting the HTML, but at least\n         # it covers pretty much every browser out there.\n-        self.favicon_path: str = "".join([\n-            str(self.navigation_root_url),\n-            "/favicon.ico",\n-            cachebust,\n-        ])\n+        self.favicon_path: str = f"{self.navigation_root_url}/favicon.ico{cachebust}"\n \n     def render(self) -> ViewPageTemplateFile:\n         self.init_favicon()\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-02-03T15:58:40Z
Author: Manuel Amador (Rudd-O) (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.app.layout/commit/9d58934d5e58d587f27b2a2fcaeef72299044b25

Override faulty MIME type.

Files changed:
M plone/app/layout/favicon_handler.py

b"diff --git a/plone/app/layout/favicon_handler.py b/plone/app/layout/favicon_handler.py\nindex f6cc1f62..5af3ca0c 100644\n--- a/plone/app/layout/favicon_handler.py\n+++ b/plone/app/layout/favicon_handler.py\n@@ -14,6 +14,10 @@ def updateMimetype(settings: RecordsProxy, event: IRecordModifiedEvent=None):\n     if event.record.fieldName != 'site_favicon' or not event.record.value:\n         return\n \n-    filename, data = b64decode_file(event.newValue)\n-    mimetype = mimetypes.guess_type(filename)[0] if filename else 'image/vnd.microsoft.icon'\n+    filename = b64decode_file(event.newValue)[0]\n+    mimetype = mimetypes.guess_type(filename)[0] if filename else None\n+    if mimetype in ('image/x-icon', None):\n+        # Override incorrect MIME type registered in both PIL and the\n+        # Products.MimetypesRegistry product.\n+        mimetype = 'image/vnd.microsoft.icon'\n     settings.__registry__['plone.site_favicon_mimetype'] = mimetype\n"

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-02-04T00:43:03Z
Author: Rudd-O (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.app.layout/commit/569d8f42bef1992d2c79ce584b6b7f0481892a24

Merge pull request #290 from Rudd-O/master

Correct favicon handling.

Files changed:
A news/290.bugfix
M plone/app/layout/favicon_handler.py
M plone/app/layout/links/favicon.pt
M plone/app/layout/links/tests/test_favicon_viewlet.py
M plone/app/layout/links/viewlets.py

b'diff --git a/news/290.bugfix b/news/290.bugfix\nnew file mode 100644\nindex 00000000..403fcf81\n--- /dev/null\n+++ b/news/290.bugfix\n@@ -0,0 +1 @@\n+Correct favicon handling: fix URL to navroot/favicon.ico and use customized icon file name as part of the proxy cache key.\ndiff --git a/plone/app/layout/favicon_handler.py b/plone/app/layout/favicon_handler.py\nindex 329d29b8..5af3ca0c 100644\n--- a/plone/app/layout/favicon_handler.py\n+++ b/plone/app/layout/favicon_handler.py\n@@ -14,6 +14,10 @@ def updateMimetype(settings: RecordsProxy, event: IRecordModifiedEvent=None):\n     if event.record.fieldName != \'site_favicon\' or not event.record.value:\n         return\n \n-    filename, data = b64decode_file(event.newValue)\n-    mimetype = mimetypes.guess_type(filename)[0] if filename else \'image/x-icon\'\n+    filename = b64decode_file(event.newValue)[0]\n+    mimetype = mimetypes.guess_type(filename)[0] if filename else None\n+    if mimetype in (\'image/x-icon\', None):\n+        # Override incorrect MIME type registered in both PIL and the\n+        # Products.MimetypesRegistry product.\n+        mimetype = \'image/vnd.microsoft.icon\'\n     settings.__registry__[\'plone.site_favicon_mimetype\'] = mimetype\ndiff --git a/plone/app/layout/links/favicon.pt b/plone/app/layout/links/favicon.pt\nindex 0f45640f..73fd1472 100644\n--- a/plone/app/layout/links/favicon.pt\n+++ b/plone/app/layout/links/favicon.pt\n@@ -1,6 +1,5 @@\n-<tal:favicon define="portal_url view/site_url">\n+<tal:favicon>\n     <link rel="preload icon" type="${python: view.mimetype}"\n           tal:attributes="href python: view.favicon_path" />\n-    <link rel="alternate icon" type="image/x-icon">\n     <link rel="mask-icon" tal:attributes="href python: view.favicon_path" />\n </tal:favicon>\n\\ No newline at end of file\ndiff --git a/plone/app/layout/links/tests/test_favicon_viewlet.py b/plone/app/layout/links/tests/test_favicon_viewlet.py\nindex eb5d7494..9cf85a16 100644\n--- a/plone/app/layout/links/tests/test_favicon_viewlet.py\n+++ b/plone/app/layout/links/tests/test_favicon_viewlet.py\n@@ -60,11 +60,11 @@ def test_FaviconViewlet_get_mimetype_ico(self):\n         encoded_data = b64encode_file(filename=filename, data=file_data)\n         settings.site_favicon = encoded_data\n         mimetype = settings.site_favicon_mimetype\n-        self.assertEqual(mimetype, \'image/x-icon\')\n+        self.assertEqual(mimetype, \'image/vnd.microsoft.icon\')\n \n     def test_FaviconViewlet_get_mimetype_none(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSchema, prefix="plone")\n         settings.site_favicon = None\n         mimetype = settings.site_favicon_mimetype\n-        self.assertEqual(mimetype, \'image/x-icon\')\n+        self.assertEqual(mimetype, \'image/vnd.microsoft.icon\')\ndiff --git a/plone/app/layout/links/viewlets.py b/plone/app/layout/links/viewlets.py\nindex 3948ca77..8096e3df 100644\n--- a/plone/app/layout/links/viewlets.py\n+++ b/plone/app/layout/links/viewlets.py\n@@ -45,19 +45,36 @@ class FaviconViewlet(ViewletBase):\n     def init_favicon(self) -> NoReturn:\n         registry = getUtility(IRegistry)\n         settings: ISiteSchema = registry.forInterface(ISiteSchema, prefix="plone")\n-\n-        self.mimetype: str = settings.site_favicon_mimetype\n-        filename: str = self.get_filename(settings)\n-        self.favicon_path: str = str(self.site_url) + \'/favicon\'\n-        if not filename:\n-            self.favicon_path += \'.ico\'\n-\n-    @staticmethod\n-    def get_filename(settings: ISiteSchema) -> str:\n-        if getattr(settings, \'site_favicon\', False):\n-            filename, data = b64decode_file(settings.site_favicon)\n-            return filename\n-        return None\n+        self.mimetype: str = getattr(\n+            settings, "site_favicon_mimetype", "image/vnd.microsoft.icon"\n+        )\n+        cachebust = ""\n+        if getattr(settings, "site_favicon", False):\n+            # The user has customized the favicon via the Site configlet.\n+            filename = b64decode_file(settings.site_favicon)[0]\n+            \n+            cachebust = "?name=" + filename\n+        # The filename is *always* /favicon.ico, irrespective of the content type,\n+        # because:\n+        #\n+        # 1. Browsers obey the content type over the extension.\n+        # 2. The actual serving view URL for the favicon is always /favicon.ico,\n+        #    and this name cannot be overridden from here into the view registered\n+        #    on CMFPlone, where the *actual* serving of the data takes place.\n+        # 3. Even if we could somehow override the view, there is no easy way to\n+        #    register in CMFPlone a different browser view for every icon file\n+        #    name the user may decide to upload.\n+        # 4. In many cases client applications just hit /favicon.ico irrespective\n+        #    of what the HTML says (remember that this specific view is only\n+        #    responsible for generating the metadata that lets the browser know\n+        #    where to find the favicon URL).\n+        #\n+        # However, to allow for users to change their favicons *and* bust their\n+        # proxy caches, we do use the favicon filename in the served favicon\n+        # URL.  This does not cover the case of RSS and podcast apps that access\n+        # /favicon.ico by custom instead of consulting the HTML, but at least\n+        # it covers pretty much every browser out there.\n+        self.favicon_path: str = f"{self.navigation_root_url}/favicon.ico{cachebust}"\n \n     def render(self) -> ViewPageTemplateFile:\n         self.init_favicon()\n'

