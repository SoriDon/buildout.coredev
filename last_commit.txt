Repository: Products.CMFFormController


Branch: refs/heads/master
Date: 2017-11-09T17:18:47+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFFormController/commit/b51fb48002bd75958819f7026400f9aacec57571

Migrate breaking tests to plone.app.testing. See https://github.com/plone/Products.CMFPlone/issues/2195.

Files changed:
M CHANGES.rst
M Products/CMFFormController/tests/testRedirectTo.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 7677d2b..85842bc 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -18,6 +18,9 @@ Bug fixes:
 - Fix import from Globals that was removed in Zope4
   [pbauer]
 
+- Migrate breaking tests to plone.app.testing (Fix https://github.com/plone/Products.CMFPlone/issues/2195)
+  [pbauer]
+
 
 3.1.3 (2016-09-07)
 ------------------
diff --git a/Products/CMFFormController/tests/testRedirectTo.py b/Products/CMFFormController/tests/testRedirectTo.py
index 63fc090..b969fad 100644
--- a/Products/CMFFormController/tests/testRedirectTo.py
+++ b/Products/CMFFormController/tests/testRedirectTo.py
@@ -1,101 +1,103 @@
-#
-# Test the RedirectTo action.
-#
-
+# -*- coding: utf-8 -*-
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
+from plone.app.testing import applyProfile
+from plone.app.testing import FunctionalTesting
+from plone.app.testing import PloneSandboxLayer
 from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import TEST_USER_PASSWORD
-from plone.app.testing.bbb import PloneTestCase
 from plone.protect import createToken
+from plone.testing.z2 import Browser
 
 import transaction
+import unittest
+
+import Products.CMFFormController
+
+
+class CMFFormControllerLayer(PloneSandboxLayer):
+
+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)
+
+    def setUpZope(self, app, configurationContext):
+        self.loadZCML(package=Products.CMFFormController)
+
+    def setUpPloneSite(self, portal):
+        applyProfile(portal, 'Products.CMFFormController:CMFFormController')
+
+
+CMFFORMCONTROLLER_FIXTURE = CMFFormControllerLayer()
+
+
+CMFFORMCONTROLLER_FUNCTIONAL_TESTING = FunctionalTesting(
+    bases=(CMFFORMCONTROLLER_FIXTURE,),
+    name='CMFFormControllerLayer:FunctionalTesting'
+)
 
 
-class TestRedirectToFunctional(PloneTestCase):
-    # Functional tests, using the folder_publish.cpy script from
-    # Products.CMFPlone, which could be persuaded to redirect to an external
-    # website, which is not what it is meant for.
+class TestRedirectToFunctional(unittest.TestCase):
 
-    def afterSetUp(self):
-        # Update settings.
-        # self.app = self.layer['app']
-        # self.portal = self.layer['portal']
-        # self.request = self.layer['request']
+    layer = CMFFORMCONTROLLER_FUNCTIONAL_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.portal_url = self.portal.absolute_url()
+        self.request = self.layer['request']
         setRoles(self.portal, TEST_USER_ID, ['Manager'])
         self.portal.portal_workflow.setChainForPortalTypes(
             ('Document',),
             ('simple_publication_workflow',))
-        # Create page.
+        # Create two pages.
         self.portal.invokeFactory(
             id='page',
             title='Page 1',
             type_name='Document'
         )
+        self.portal.invokeFactory(
+            id='front-page',
+            title='Frontpage',
+            type_name='Document'
+        )
         self.page = self.portal.page
-
-    def beforeTearDown(self):
-        # Weird that we have to remove this page manually.  Otherwise with the
-        # second test we get an error:
-        # BadRequest: The id "page" is invalid - it is already in use.
-        # Strangely this does not happen when you run
-        # bin/test -s Products.CMFFormController -m testRedirectTo
-        # which is the only test case that uses portal.page,
-        # and it does happen when you run all the tests:
-        # bin/test -s Products.CMFFormController
-        # We may want to switch to the real plone.app.testing
-        # instead of bbb.PloneTestCase.
-        self.portal._delObject('page')
         transaction.commit()
+        self.browser = Browser(self.layer['app'])
+        self.browser.handleErrors = False
+        self.browser.addHeader(
+            'Authorization', 'Basic {0}:{1}'.format(
+                TEST_USER_NAME, TEST_USER_PASSWORD))
 
     def test_regression(self):
         csrf_token = createToken()
-        env = {'HTTP_X_CSRF_TOKEN': csrf_token}
         target = 'front-page'
-        url = (
-            '%s/folder_publish'
-            '?workflow_action=publish'
-            '&paths=%s'
-            '&orig_template=%s') % (
-                '/'.join(self.portal.getPhysicalPath()),
-                '/'.join(self.page.getPhysicalPath()),
-                target
-        )
-        response = self.publish(
-            url,
-            basic='%s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD),
-            env=env,
-            extra={'orig_template': target,
-                   '_authenticator': csrf_token},
-            request_method='POST',
-            handle_errors=False,
-        )
-        self.assertNotEqual(response.headers.get('location'), None)
-        self.assertEqual(response.headers.get('location'),
-                         self.portal.absolute_url() + '/front-page')
+        path = '/'.join(self.page.getPhysicalPath())
+        data = 'workflow_action=publish&paths=%s&orig_template=%s&_authenticator=%s'  # noqa: E501
+        data = data % (path, target, csrf_token)
+        self.browser.post(self.portal_url + '/folder_publish', data)
+        # redirect to frontpage http://attacker.com
+        self.assertEqual(
+            self.browser.url, self.portal.absolute_url() + '/front-page')
 
     def test_attacker_redirect(self):
         csrf_token = createToken()
-        env = {'HTTP_X_CSRF_TOKEN': csrf_token}
         target = 'http://attacker.com'
-        url = (
-            '%s/folder_publish'
-            '?workflow_action=publish'
-            '&paths=%s'
-            '&orig_template=%s') % (
-                '/'.join(self.portal.getPhysicalPath()),
-                '/'.join(self.page.getPhysicalPath()),
-                target
-        )
-        response = self.publish(
-            url,
-            basic='%s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD),
-            env=env,
-            extra={'orig_template': target,
-                   '_authenticator': csrf_token},
-            request_method='POST',
-            handle_errors=False,
-        )
-        self.assertNotEqual(response.headers.get('location'), None)
-        self.assertNotEqual(response.headers.get('location'),
-                            'http://attacker.com')
+        path = '/'.join(self.page.getPhysicalPath())
+        data = 'workflow_action=publish&paths=%s&orig_template=%s&_authenticator=%s'  # noqa: E501
+        data = data % (path, target, csrf_token)
+        self.browser.post(self.portal_url + '/folder_publish', data)
+        # no redirect to http://attacker.com, instead to the portal
+        self.assertEqual(self.browser.url, self.portal.absolute_url())
+
+        # The same without the testbrowser
+        self.assertIsNone(self.request.response.headers.get('location'))
+        self.request.REQUEST_METHOD = 'POST'
+        self.request.form['workflow_action'] = 'publish'
+        self.request.form['paths'] = path
+        self.request.form['orig_template'] = target
+        self.request.form['_authenticator'] = csrf_token
+        view = self.portal.restrictedTraverse('folder_publish')
+        view()
+        # no redirect to http://attacker.com, instead to the portal
+        self.assertEqual(
+            self.request.response.headers.get('location'),
+            self.portal.absolute_url())
diff --git a/setup.py b/setup.py
index 1c4b192..26c3e2d 100644
--- a/setup.py
+++ b/setup.py
@@ -30,6 +30,7 @@
     extras_require=dict(
         test=[
             'plone.app.testing',
+            'plone.app.contenttypes',
         ]
     ),
     install_requires=[


Repository: Products.CMFFormController


Branch: refs/heads/master
Date: 2017-11-09T21:37:49+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFFormController/commit/c1109e5bdc86142f7184bfff318f4973ebf005d2

Merge pull request #14 from plone/migrate_breakting_tests

Migrate breaking tests to plone.app.testing

Files changed:
M CHANGES.rst
M Products/CMFFormController/tests/testRedirectTo.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 7677d2b..85842bc 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -18,6 +18,9 @@ Bug fixes:
 - Fix import from Globals that was removed in Zope4
   [pbauer]
 
+- Migrate breaking tests to plone.app.testing (Fix https://github.com/plone/Products.CMFPlone/issues/2195)
+  [pbauer]
+
 
 3.1.3 (2016-09-07)
 ------------------
diff --git a/Products/CMFFormController/tests/testRedirectTo.py b/Products/CMFFormController/tests/testRedirectTo.py
index 63fc090..b969fad 100644
--- a/Products/CMFFormController/tests/testRedirectTo.py
+++ b/Products/CMFFormController/tests/testRedirectTo.py
@@ -1,101 +1,103 @@
-#
-# Test the RedirectTo action.
-#
-
+# -*- coding: utf-8 -*-
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
+from plone.app.testing import applyProfile
+from plone.app.testing import FunctionalTesting
+from plone.app.testing import PloneSandboxLayer
 from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import TEST_USER_PASSWORD
-from plone.app.testing.bbb import PloneTestCase
 from plone.protect import createToken
+from plone.testing.z2 import Browser
 
 import transaction
+import unittest
+
+import Products.CMFFormController
+
+
+class CMFFormControllerLayer(PloneSandboxLayer):
+
+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)
+
+    def setUpZope(self, app, configurationContext):
+        self.loadZCML(package=Products.CMFFormController)
+
+    def setUpPloneSite(self, portal):
+        applyProfile(portal, 'Products.CMFFormController:CMFFormController')
+
+
+CMFFORMCONTROLLER_FIXTURE = CMFFormControllerLayer()
+
+
+CMFFORMCONTROLLER_FUNCTIONAL_TESTING = FunctionalTesting(
+    bases=(CMFFORMCONTROLLER_FIXTURE,),
+    name='CMFFormControllerLayer:FunctionalTesting'
+)
 
 
-class TestRedirectToFunctional(PloneTestCase):
-    # Functional tests, using the folder_publish.cpy script from
-    # Products.CMFPlone, which could be persuaded to redirect to an external
-    # website, which is not what it is meant for.
+class TestRedirectToFunctional(unittest.TestCase):
 
-    def afterSetUp(self):
-        # Update settings.
-        # self.app = self.layer['app']
-        # self.portal = self.layer['portal']
-        # self.request = self.layer['request']
+    layer = CMFFORMCONTROLLER_FUNCTIONAL_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.portal_url = self.portal.absolute_url()
+        self.request = self.layer['request']
         setRoles(self.portal, TEST_USER_ID, ['Manager'])
         self.portal.portal_workflow.setChainForPortalTypes(
             ('Document',),
             ('simple_publication_workflow',))
-        # Create page.
+        # Create two pages.
         self.portal.invokeFactory(
             id='page',
             title='Page 1',
             type_name='Document'
         )
+        self.portal.invokeFactory(
+            id='front-page',
+            title='Frontpage',
+            type_name='Document'
+        )
         self.page = self.portal.page
-
-    def beforeTearDown(self):
-        # Weird that we have to remove this page manually.  Otherwise with the
-        # second test we get an error:
-        # BadRequest: The id "page" is invalid - it is already in use.
-        # Strangely this does not happen when you run
-        # bin/test -s Products.CMFFormController -m testRedirectTo
-        # which is the only test case that uses portal.page,
-        # and it does happen when you run all the tests:
-        # bin/test -s Products.CMFFormController
-        # We may want to switch to the real plone.app.testing
-        # instead of bbb.PloneTestCase.
-        self.portal._delObject('page')
         transaction.commit()
+        self.browser = Browser(self.layer['app'])
+        self.browser.handleErrors = False
+        self.browser.addHeader(
+            'Authorization', 'Basic {0}:{1}'.format(
+                TEST_USER_NAME, TEST_USER_PASSWORD))
 
     def test_regression(self):
         csrf_token = createToken()
-        env = {'HTTP_X_CSRF_TOKEN': csrf_token}
         target = 'front-page'
-        url = (
-            '%s/folder_publish'
-            '?workflow_action=publish'
-            '&paths=%s'
-            '&orig_template=%s') % (
-                '/'.join(self.portal.getPhysicalPath()),
-                '/'.join(self.page.getPhysicalPath()),
-                target
-        )
-        response = self.publish(
-            url,
-            basic='%s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD),
-            env=env,
-            extra={'orig_template': target,
-                   '_authenticator': csrf_token},
-            request_method='POST',
-            handle_errors=False,
-        )
-        self.assertNotEqual(response.headers.get('location'), None)
-        self.assertEqual(response.headers.get('location'),
-                         self.portal.absolute_url() + '/front-page')
+        path = '/'.join(self.page.getPhysicalPath())
+        data = 'workflow_action=publish&paths=%s&orig_template=%s&_authenticator=%s'  # noqa: E501
+        data = data % (path, target, csrf_token)
+        self.browser.post(self.portal_url + '/folder_publish', data)
+        # redirect to frontpage http://attacker.com
+        self.assertEqual(
+            self.browser.url, self.portal.absolute_url() + '/front-page')
 
     def test_attacker_redirect(self):
         csrf_token = createToken()
-        env = {'HTTP_X_CSRF_TOKEN': csrf_token}
         target = 'http://attacker.com'
-        url = (
-            '%s/folder_publish'
-            '?workflow_action=publish'
-            '&paths=%s'
-            '&orig_template=%s') % (
-                '/'.join(self.portal.getPhysicalPath()),
-                '/'.join(self.page.getPhysicalPath()),
-                target
-        )
-        response = self.publish(
-            url,
-            basic='%s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD),
-            env=env,
-            extra={'orig_template': target,
-                   '_authenticator': csrf_token},
-            request_method='POST',
-            handle_errors=False,
-        )
-        self.assertNotEqual(response.headers.get('location'), None)
-        self.assertNotEqual(response.headers.get('location'),
-                            'http://attacker.com')
+        path = '/'.join(self.page.getPhysicalPath())
+        data = 'workflow_action=publish&paths=%s&orig_template=%s&_authenticator=%s'  # noqa: E501
+        data = data % (path, target, csrf_token)
+        self.browser.post(self.portal_url + '/folder_publish', data)
+        # no redirect to http://attacker.com, instead to the portal
+        self.assertEqual(self.browser.url, self.portal.absolute_url())
+
+        # The same without the testbrowser
+        self.assertIsNone(self.request.response.headers.get('location'))
+        self.request.REQUEST_METHOD = 'POST'
+        self.request.form['workflow_action'] = 'publish'
+        self.request.form['paths'] = path
+        self.request.form['orig_template'] = target
+        self.request.form['_authenticator'] = csrf_token
+        view = self.portal.restrictedTraverse('folder_publish')
+        view()
+        # no redirect to http://attacker.com, instead to the portal
+        self.assertEqual(
+            self.request.response.headers.get('location'),
+            self.portal.absolute_url())
diff --git a/setup.py b/setup.py
index 1c4b192..26c3e2d 100644
--- a/setup.py
+++ b/setup.py
@@ -30,6 +30,7 @@
     extras_require=dict(
         test=[
             'plone.app.testing',
+            'plone.app.contenttypes',
         ]
     ),
     install_requires=[


