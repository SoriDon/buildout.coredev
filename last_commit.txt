Repository: plone.scale


Branch: refs/heads/master
Date: 2022-05-16T09:04:22+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/3cdb40e81efb3ca1b1a753ce6e8e0842a0ec414e

Add tests for calculate_scaled_dimensions.

Doing this made me realize that we have broken image cropping.
What does cropping an image to 400x65536 mean?

Files changed:
M plone/scale/scale.py
M plone/scale/tests/test_scale.py

b'diff --git a/plone/scale/scale.py b/plone/scale/scale.py\nindex 0a42863..d9216bf 100644\n--- a/plone/scale/scale.py\n+++ b/plone/scale/scale.py\n@@ -342,13 +342,13 @@ def scalePILImage(image, width=None, height=None, mode="contain", direction=None\n \n     `contain`\n         Alternative spellings: `scale-crop-to-fit`, `down`.\n-        Starts by scaling the smallest dimension to the required\n+        Starts by scaling the relatively smallest dimension to the required\n         size and crops the other dimension if needed.\n \n     `cover`\n         Alternative spellings: `scale-crop-to-fill`, `up`.\n-        Starts by scaling the largest dimension up to the required size\n-        and crops the other dimension if needed.\n+        Scales the relatively largest dimension up to the required size.\n+        Despite the alternative spelling, I see no cropping happening.\n \n     `scale`\n         Alternative spellings: `keep`, `thumbnail`.\ndiff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py\nindex 2df62a3..dacd9c5 100644\n--- a/plone/scale/tests/test_scale.py\n+++ b/plone/scale/tests/test_scale.py\n@@ -1,9 +1,11 @@\n from io import BytesIO as StringIO\n+from plone.scale.scale import calculate_scaled_dimensions\n from plone.scale.scale import scaleImage\n from plone.scale.scale import scalePILImage\n from plone.scale.tests import TEST_DATA_LOCATION\n from unittest import TestCase\n \n+import functools\n import os.path\n import PIL.Image\n import PIL.ImageDraw\n@@ -326,6 +328,62 @@ def testDeprecations(self):\n             self.assertIs(w[0].category, DeprecationWarning)\n             self.assertIn("the \'direction\' option is deprecated", str(w[0].message))\n \n+    def test_calculate_scaled_dimensions_contain(self):\n+        """Test the calculate_scaled_dimensions function.\n+\n+        You pass it:\n+\n+            original_width, original_height, width, height\n+\n+        Plus an optional mode, by default "contain"`.\n+        Alternative spellings: `scale-crop-to-fit`, `down`.\n+        """\n+        calc = calculate_scaled_dimensions\n+        self.assertEqual(calc(1, 1, 1, 1), (1, 1))\n+        self.assertEqual(calc(10, 10, 1, 1), (1, 1))\n+        self.assertEqual(calc(1, 1, 10, 10), (10, 10))\n+        self.assertEqual(calc(10, 20, 10, 10), (10, 10))\n+        # Try the new preview scale.\n+        # This is defined as width 400 and a very large height.\n+        # That does not work at all for cropping.\n+        self.assertEqual(calc(10, 20, 400, 65536), (400, 400))\n+        self.assertEqual(calc(600, 300, 400, 65536), (400, 400))\n+        self.assertEqual(calc(600, 1200, 400, 65536), (400, 400))\n+\n+    def test_calculate_scaled_dimensions_cover(self):\n+        """Test calculate_scaled_dimensions function with mode "cover".\n+\n+        Alternative spellings: `scale-crop-to-fill`, `up`.\n+        Despite what you may think, this does not crop.\n+        """\n+        calc = functools.partial(calculate_scaled_dimensions, mode="cover")\n+        self.assertEqual(calc(1, 1, 1, 1), (1, 1))\n+        self.assertEqual(calc(10, 10, 1, 1), (1, 1))\n+        # Mode "cover" scales up:\n+        self.assertEqual(calc(1, 1, 10, 10), (10, 10))\n+        # If any cropping would happen, the next answer would be (10, 10):\n+        self.assertEqual(calc(10, 20, 10, 10), (5, 10))\n+        # Try the new preview scale:\n+        self.assertEqual(calc(10, 20, 400, 65536), (400, 800))\n+        self.assertEqual(calc(600, 300, 400, 65536), (400, 200))\n+        self.assertEqual(calc(600, 1200, 400, 65536), (400, 800))\n+\n+    def test_calculate_scaled_dimensions_scale(self):\n+        """Test calculate_scaled_dimensions function with mode "scale".\n+\n+        Alternative spellings: `keep`, `thumbnail`.\n+        """\n+        calc = functools.partial(calculate_scaled_dimensions, mode="scale")\n+        self.assertEqual(calc(1, 1, 1, 1), (1, 1))\n+        self.assertEqual(calc(10, 10, 1, 1), (1, 1))\n+        # Mode "scale" only scales down, not up:\n+        self.assertEqual(calc(1, 1, 10, 10), (1, 1))\n+        self.assertEqual(calc(10, 20, 10, 10), (5, 10))\n+        # Try the new preview scale:\n+        self.assertEqual(calc(10, 20, 400, 65536), (10, 20))\n+        self.assertEqual(calc(600, 300, 400, 65536), (400, 200))\n+        self.assertEqual(calc(600, 1200, 400, 65536), (400, 800))\n+\n \n def test_suite():\n     from unittest import defaultTestLoader\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-05-16T10:27:17+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/e47a2e9f392d02bb3050f7f435d0bab49baf2389

Fix cropping when the height is not limited.

Create a square then.
Fixes https://github.com/plone/plone.scale/issues/53

Files changed:
A news/53.bugfix
M plone/scale/scale.py
M plone/scale/tests/test_scale.py

b'diff --git a/news/53.bugfix b/news/53.bugfix\nnew file mode 100644\nindex 0000000..1b1dcd3\n--- /dev/null\n+++ b/news/53.bugfix\n@@ -0,0 +1,3 @@\n+Fix cropping when the height is not limited.\n+Create a square then.\n+[maurits]\ndiff --git a/plone/scale/scale.py b/plone/scale/scale.py\nindex d9216bf..4f3ca97 100644\n--- a/plone/scale/scale.py\n+++ b/plone/scale/scale.py\n@@ -13,6 +13,13 @@\n except AttributeError:\n     LANCZOS = PIL.Image.ANTIALIAS\n \n+# When height is given as one of these values,\n+# we do not limit the height, and only look at the width.\n+# Note: 2**16 = 65536, which is what you see in several Plone\n+# scale definitions.  A different idea was to use -1 here,\n+# so let\'s try have both.\n+NO_HEIGHT = (-1, 65536)\n+\n \n def none_as_int(the_int):\n     """For python 3 compatibility, to make int vs. none comparison possible\n@@ -173,7 +180,10 @@ def _calculate_all_dimensions(\n     final_width and final_height are the dimensions of the resulting image and\n     are always present.\n \n-    The other values are required for cropping and scaling."""\n+    The other values are required for cropping and scaling.\n+    """\n+    if height in NO_HEIGHT:\n+        height = None\n \n     if width is None and height is None:\n         raise ValueError("Either width or height need to be given.")\n@@ -217,6 +227,9 @@ def _calculate_all_dimensions(\n         return dimensions\n \n     # now for \'cover\' and \'contain\' scaling\n+    if mode == "contain" and height is None:\n+        # For cropping we need a height.\n+        height = width\n \n     # Determine scale factors needed\n     factor_height = factor_width = None\ndiff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py\nindex dacd9c5..7063d3e 100644\n--- a/plone/scale/tests/test_scale.py\n+++ b/plone/scale/tests/test_scale.py\n@@ -132,7 +132,7 @@ def testHugeScale(self):\n \n     def testCropPreWideScaleUnspecifiedHeight(self):\n         image = scaleImage(PNG, 400, None, "contain")\n-        self.assertEqual(image[2], (400, 490))\n+        self.assertEqual(image[2], (400, 400))\n \n     def testCropPreWideScale(self):\n         image = scaleImage(PNG, 400, 100, "contain")\n@@ -147,10 +147,10 @@ def testCropPreTallScale(self):\n         self.assertEqual(image[2], (100, 400))\n \n     def testRestrictWidthOnlyDownScaleNone(self):\n-        self.assertEqual(scaleImage(PNG, 42, None, "contain")[2], (42, 52))\n+        self.assertEqual(scaleImage(PNG, 42, None, "contain")[2], (42, 42))\n \n     def testRestrictWidthOnlyDownScaleZero(self):\n-        self.assertEqual(scaleImage(PNG, 42, 0, "contain")[2], (42, 52))\n+        self.assertEqual(scaleImage(PNG, 42, 0, "contain")[2], (42, 42))\n \n     def testRestrictHeightOnlyDownScaleNone(self):\n         self.assertEqual(scaleImage(PNG, None, 51, "contain")[2], (42, 51))\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-05-18T15:41:26+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/9f8111a7cf0d47a67f47d1625a08bdc4e82118d9

Not limited means: 65000 or larger, or zero or lower.

Files changed:
M news/53.bugfix
M plone/scale/scale.py
M plone/scale/tests/test_scale.py

b'diff --git a/news/53.bugfix b/news/53.bugfix\nindex 1b1dcd3..86e8462 100644\n--- a/news/53.bugfix\n+++ b/news/53.bugfix\n@@ -1,3 +1,4 @@\n Fix cropping when the height is not limited.\n Create a square then.\n+Not limited means: 65000 or larger, or zero or lower.\n [maurits]\ndiff --git a/plone/scale/scale.py b/plone/scale/scale.py\nindex 4f3ca97..1776b40 100644\n--- a/plone/scale/scale.py\n+++ b/plone/scale/scale.py\n@@ -13,12 +13,14 @@\n except AttributeError:\n     LANCZOS = PIL.Image.ANTIALIAS\n \n-# When height is given as one of these values,\n-# we do not limit the height, and only look at the width.\n-# Note: 2**16 = 65536, which is what you see in several Plone\n-# scale definitions.  A different idea was to use -1 here,\n-# so let\'s try have both.\n-NO_HEIGHT = (-1, 65536)\n+# When height is higher than this we do not limit the height, but only the width.\n+# Otherwise cropping does not make sense, and in a Pillow you may get an error.\n+# In a Pillow traceback I saw 65500 as maximum.\n+# Several Plone scale definitions have 65536 (2**16).\n+# So pick a number slightly lower for good measure.\n+# A different idea was to use -1 here, so we support this:\n+# a height of 0 or less is ignored.\n+MAX_HEIGHT = 65000\n \n \n def none_as_int(the_int):\n@@ -182,7 +184,7 @@ def _calculate_all_dimensions(\n \n     The other values are required for cropping and scaling.\n     """\n-    if height in NO_HEIGHT:\n+    if height is not None and (height >= MAX_HEIGHT or height <= 0):\n         height = None\n \n     if width is None and height is None:\ndiff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py\nindex 7063d3e..d620661 100644\n--- a/plone/scale/tests/test_scale.py\n+++ b/plone/scale/tests/test_scale.py\n@@ -127,8 +127,17 @@ def testNoStretchingDownScale(self):\n         self.assertEqual(scaleImage(PNG, 200, 103, "contain")[2], (200, 103))\n \n     def testHugeScale(self):\n-        # the image will be cropped, but not scaled\n-        self.assertEqual(scaleImage(PNG, 400, 99999, "contain")[2], (2, 103))\n+        # The image will be cropped, but not scaled.\n+        # If such a ridiculous height is given, we only look at the width.\n+        self.assertEqual(scaleImage(PNG, 400, 99999, "contain")[2], (400, 400))\n+\n+    def testZeroHeightScale(self):\n+        # In this case we only look at the width.\n+        self.assertEqual(scaleImage(PNG, 400, 0, "contain")[2], (400, 400))\n+\n+    def testNegativeHeightScale(self):\n+        # In this case we only look at the width.\n+        self.assertEqual(scaleImage(PNG, 400, -1, "contain")[2], (400, 400))\n \n     def testCropPreWideScaleUnspecifiedHeight(self):\n         image = scaleImage(PNG, 400, None, "contain")\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-05-20T17:32:45+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.scale/commit/6c58a56eff22929208f27d3a7840373d705c56ab

Merge pull request #54 from plone/maurits-cropping

Fix cropping when the height is not limited

Files changed:
A news/53.bugfix
M plone/scale/scale.py
M plone/scale/tests/test_scale.py

b'diff --git a/news/53.bugfix b/news/53.bugfix\nnew file mode 100644\nindex 0000000..86e8462\n--- /dev/null\n+++ b/news/53.bugfix\n@@ -0,0 +1,4 @@\n+Fix cropping when the height is not limited.\n+Create a square then.\n+Not limited means: 65000 or larger, or zero or lower.\n+[maurits]\ndiff --git a/plone/scale/scale.py b/plone/scale/scale.py\nindex 0a42863..1776b40 100644\n--- a/plone/scale/scale.py\n+++ b/plone/scale/scale.py\n@@ -13,6 +13,15 @@\n except AttributeError:\n     LANCZOS = PIL.Image.ANTIALIAS\n \n+# When height is higher than this we do not limit the height, but only the width.\n+# Otherwise cropping does not make sense, and in a Pillow you may get an error.\n+# In a Pillow traceback I saw 65500 as maximum.\n+# Several Plone scale definitions have 65536 (2**16).\n+# So pick a number slightly lower for good measure.\n+# A different idea was to use -1 here, so we support this:\n+# a height of 0 or less is ignored.\n+MAX_HEIGHT = 65000\n+\n \n def none_as_int(the_int):\n     """For python 3 compatibility, to make int vs. none comparison possible\n@@ -173,7 +182,10 @@ def _calculate_all_dimensions(\n     final_width and final_height are the dimensions of the resulting image and\n     are always present.\n \n-    The other values are required for cropping and scaling."""\n+    The other values are required for cropping and scaling.\n+    """\n+    if height is not None and (height >= MAX_HEIGHT or height <= 0):\n+        height = None\n \n     if width is None and height is None:\n         raise ValueError("Either width or height need to be given.")\n@@ -217,6 +229,9 @@ def _calculate_all_dimensions(\n         return dimensions\n \n     # now for \'cover\' and \'contain\' scaling\n+    if mode == "contain" and height is None:\n+        # For cropping we need a height.\n+        height = width\n \n     # Determine scale factors needed\n     factor_height = factor_width = None\n@@ -342,13 +357,13 @@ def scalePILImage(image, width=None, height=None, mode="contain", direction=None\n \n     `contain`\n         Alternative spellings: `scale-crop-to-fit`, `down`.\n-        Starts by scaling the smallest dimension to the required\n+        Starts by scaling the relatively smallest dimension to the required\n         size and crops the other dimension if needed.\n \n     `cover`\n         Alternative spellings: `scale-crop-to-fill`, `up`.\n-        Starts by scaling the largest dimension up to the required size\n-        and crops the other dimension if needed.\n+        Scales the relatively largest dimension up to the required size.\n+        Despite the alternative spelling, I see no cropping happening.\n \n     `scale`\n         Alternative spellings: `keep`, `thumbnail`.\ndiff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py\nindex 2df62a3..d620661 100644\n--- a/plone/scale/tests/test_scale.py\n+++ b/plone/scale/tests/test_scale.py\n@@ -1,9 +1,11 @@\n from io import BytesIO as StringIO\n+from plone.scale.scale import calculate_scaled_dimensions\n from plone.scale.scale import scaleImage\n from plone.scale.scale import scalePILImage\n from plone.scale.tests import TEST_DATA_LOCATION\n from unittest import TestCase\n \n+import functools\n import os.path\n import PIL.Image\n import PIL.ImageDraw\n@@ -125,12 +127,21 @@ def testNoStretchingDownScale(self):\n         self.assertEqual(scaleImage(PNG, 200, 103, "contain")[2], (200, 103))\n \n     def testHugeScale(self):\n-        # the image will be cropped, but not scaled\n-        self.assertEqual(scaleImage(PNG, 400, 99999, "contain")[2], (2, 103))\n+        # The image will be cropped, but not scaled.\n+        # If such a ridiculous height is given, we only look at the width.\n+        self.assertEqual(scaleImage(PNG, 400, 99999, "contain")[2], (400, 400))\n+\n+    def testZeroHeightScale(self):\n+        # In this case we only look at the width.\n+        self.assertEqual(scaleImage(PNG, 400, 0, "contain")[2], (400, 400))\n+\n+    def testNegativeHeightScale(self):\n+        # In this case we only look at the width.\n+        self.assertEqual(scaleImage(PNG, 400, -1, "contain")[2], (400, 400))\n \n     def testCropPreWideScaleUnspecifiedHeight(self):\n         image = scaleImage(PNG, 400, None, "contain")\n-        self.assertEqual(image[2], (400, 490))\n+        self.assertEqual(image[2], (400, 400))\n \n     def testCropPreWideScale(self):\n         image = scaleImage(PNG, 400, 100, "contain")\n@@ -145,10 +156,10 @@ def testCropPreTallScale(self):\n         self.assertEqual(image[2], (100, 400))\n \n     def testRestrictWidthOnlyDownScaleNone(self):\n-        self.assertEqual(scaleImage(PNG, 42, None, "contain")[2], (42, 52))\n+        self.assertEqual(scaleImage(PNG, 42, None, "contain")[2], (42, 42))\n \n     def testRestrictWidthOnlyDownScaleZero(self):\n-        self.assertEqual(scaleImage(PNG, 42, 0, "contain")[2], (42, 52))\n+        self.assertEqual(scaleImage(PNG, 42, 0, "contain")[2], (42, 42))\n \n     def testRestrictHeightOnlyDownScaleNone(self):\n         self.assertEqual(scaleImage(PNG, None, 51, "contain")[2], (42, 51))\n@@ -326,6 +337,62 @@ def testDeprecations(self):\n             self.assertIs(w[0].category, DeprecationWarning)\n             self.assertIn("the \'direction\' option is deprecated", str(w[0].message))\n \n+    def test_calculate_scaled_dimensions_contain(self):\n+        """Test the calculate_scaled_dimensions function.\n+\n+        You pass it:\n+\n+            original_width, original_height, width, height\n+\n+        Plus an optional mode, by default "contain"`.\n+        Alternative spellings: `scale-crop-to-fit`, `down`.\n+        """\n+        calc = calculate_scaled_dimensions\n+        self.assertEqual(calc(1, 1, 1, 1), (1, 1))\n+        self.assertEqual(calc(10, 10, 1, 1), (1, 1))\n+        self.assertEqual(calc(1, 1, 10, 10), (10, 10))\n+        self.assertEqual(calc(10, 20, 10, 10), (10, 10))\n+        # Try the new preview scale.\n+        # This is defined as width 400 and a very large height.\n+        # That does not work at all for cropping.\n+        self.assertEqual(calc(10, 20, 400, 65536), (400, 400))\n+        self.assertEqual(calc(600, 300, 400, 65536), (400, 400))\n+        self.assertEqual(calc(600, 1200, 400, 65536), (400, 400))\n+\n+    def test_calculate_scaled_dimensions_cover(self):\n+        """Test calculate_scaled_dimensions function with mode "cover".\n+\n+        Alternative spellings: `scale-crop-to-fill`, `up`.\n+        Despite what you may think, this does not crop.\n+        """\n+        calc = functools.partial(calculate_scaled_dimensions, mode="cover")\n+        self.assertEqual(calc(1, 1, 1, 1), (1, 1))\n+        self.assertEqual(calc(10, 10, 1, 1), (1, 1))\n+        # Mode "cover" scales up:\n+        self.assertEqual(calc(1, 1, 10, 10), (10, 10))\n+        # If any cropping would happen, the next answer would be (10, 10):\n+        self.assertEqual(calc(10, 20, 10, 10), (5, 10))\n+        # Try the new preview scale:\n+        self.assertEqual(calc(10, 20, 400, 65536), (400, 800))\n+        self.assertEqual(calc(600, 300, 400, 65536), (400, 200))\n+        self.assertEqual(calc(600, 1200, 400, 65536), (400, 800))\n+\n+    def test_calculate_scaled_dimensions_scale(self):\n+        """Test calculate_scaled_dimensions function with mode "scale".\n+\n+        Alternative spellings: `keep`, `thumbnail`.\n+        """\n+        calc = functools.partial(calculate_scaled_dimensions, mode="scale")\n+        self.assertEqual(calc(1, 1, 1, 1), (1, 1))\n+        self.assertEqual(calc(10, 10, 1, 1), (1, 1))\n+        # Mode "scale" only scales down, not up:\n+        self.assertEqual(calc(1, 1, 10, 10), (1, 1))\n+        self.assertEqual(calc(10, 20, 10, 10), (5, 10))\n+        # Try the new preview scale:\n+        self.assertEqual(calc(10, 20, 400, 65536), (10, 20))\n+        self.assertEqual(calc(600, 300, 400, 65536), (400, 200))\n+        self.assertEqual(calc(600, 1200, 400, 65536), (400, 800))\n+\n \n def test_suite():\n     from unittest import defaultTestLoader\n'

