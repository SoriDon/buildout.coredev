Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-04-18T00:13:53-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.restapi/commit/69d5934858907a19e7c8cd6db84eed61e46f60ac

Convert to MyST

Files changed:
A docs/source/_static/print.css
A docs/source/actions.md
A docs/source/addons.md
A docs/source/authentication.md
A docs/source/batching.md
A docs/source/blocks.md
A docs/source/breadcrumbs.md
A docs/source/comments.md
A docs/source/content-negotiation.md
A docs/source/content.md
A docs/source/contextnavigation.md
A docs/source/contributing.md
A docs/source/controlpanels.md
A docs/source/conventions.md
A docs/source/copymove.md
A docs/source/customization.md
A docs/source/database.md
A docs/source/email-notification.md
A docs/source/email-send.md
A docs/source/expansion.md
A docs/source/exploring.md
A docs/source/glossary.md
A docs/source/groups.md
A docs/source/history.md
A docs/source/http-status-codes.md
A docs/source/i18n.md
A docs/source/index.md
A docs/source/introduction.md
A docs/source/locking.md
A docs/source/navigation.md
A docs/source/plone-content.md
A docs/source/principals.md
A docs/source/querystring.md
A docs/source/querystringsearch.md
A docs/source/registry.md
A docs/source/roles.md
A docs/source/searching.md
A docs/source/serialization.md
A docs/source/sharing.md
A docs/source/system.md
A docs/source/tiles.md
A docs/source/translations.md
A docs/source/tusupload.md
A docs/source/types-schema.md
A docs/source/types.md
A docs/source/upgrade-guide.md
A docs/source/users.md
A docs/source/vocabularies.md
A docs/source/workflow.md
A docs/source/workingcopy.md
A ideas/actions.rst
A ideas/hydra-operations.rst
A ideas/hydra.rst
A ideas/item.rst
A ideas/plog2015.rst
A ideas/plone-conference-2014-open-space.rst
A ideas/toolbar.rst
A ideas/workflow.rst
M README.rst
M docs/source/_static/custom.css
M docs/source/conf.py
D docs/source/_static/placeholder.txt
D docs/source/actions.rst
D docs/source/addons.rst
D docs/source/authentication.rst
D docs/source/batching.rst
D docs/source/blocks.rst
D docs/source/breadcrumbs.rst
D docs/source/comments.rst
D docs/source/content-negotiation.rst
D docs/source/content.rst
D docs/source/contextnavigation.rst
D docs/source/contributing.rst
D docs/source/controlpanels.rst
D docs/source/conventions.rst
D docs/source/copymove.rst
D docs/source/customization.rst
D docs/source/database.rst
D docs/source/email-notification.rst
D docs/source/email-send.rst
D docs/source/expansion.rst
D docs/source/exploring.rst
D docs/source/glossary.rst
D docs/source/groups.rst
D docs/source/history.rst
D docs/source/http-status-codes.rst
D docs/source/i18n.rst
D docs/source/ideas/actions.rst
D docs/source/ideas/hydra-operations.rst
D docs/source/ideas/hydra.rst
D docs/source/ideas/item.rst
D docs/source/ideas/plog2015.rst
D docs/source/ideas/plone-conference-2014-open-space.rst
D docs/source/ideas/toolbar.rst
D docs/source/ideas/workflow.rst
D docs/source/index.rst
D docs/source/introduction.rst
D docs/source/locking.rst
D docs/source/navigation.rst
D docs/source/plone-content.rst
D docs/source/principals.rst
D docs/source/querystring.rst
D docs/source/querystringsearch.rst
D docs/source/registry.rst
D docs/source/roles.rst
D docs/source/searching.rst
D docs/source/serialization.rst
D docs/source/sharing.rst
D docs/source/system.rst
D docs/source/tiles.rst
D docs/source/translations.rst
D docs/source/tusupload.rst
D docs/source/types-schema.rst
D docs/source/types.rst
D docs/source/upgrade-guide.rst
D docs/source/users.rst
D docs/source/vocabularies.rst
D docs/source/workflow.rst
D docs/source/workingcopy.rst

b'diff --git a/README.rst b/README.rst\nindex ebc82fc39..caf827b3b 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -14,7 +14,7 @@\n Introduction\n ============\n \n-plone.restapi is a RESTful hypermedia API for Plone.\n+``plone.restapi`` is a RESTful hypermedia API for Plone.\n \n \n Documentation\n@@ -26,17 +26,17 @@ https://plonerestapi.readthedocs.io/en/latest/\n Getting started\n ===============\n \n-A live demo of Plone 5 with the latest plone.restapi release is available at:\n+A live demo of Plone 5 with the latest ``plone.restapi`` release is available at:\n \n https://plonedemo.kitconcept.com\n \n-Example GET request on the portal root\n+An example GET request on the portal root is the following.\n \n .. code-block:: shell\n \n    curl -i https://plonedemo.kitconcept.com -H "Accept: application/json"\n \n-Example POST request to create a new document\n+An example POST request to create a new document is the following.\n \n .. code-block:: shell\n \n@@ -51,17 +51,19 @@ Example POST request to create a new document\n Installation\n ============\n \n-Install plone.restapi by adding it to your buildout::\n+Install ``plone.restapi`` by adding it to your buildout.\n+\n+.. code-block:: ini\n \n     [buildout]\n \n-    ...\n+    # ...\n \n     eggs =\n         plone.restapi\n \n \n-and then running ``bin/buildout``\n+\xe2\x80\xa6and then running ``bin/buildout``.\n \n \n Contribute\n@@ -75,7 +77,7 @@ Contribute\n Examples\n ========\n \n-plone.restapi is used in production since the first alpha release.\n+``plone.restapi`` has been used in production since its first alpha release.\n It can be seen in action at the following sites:\n \n - Zeelandia GmbH & Co. KG: https://www.zeelandia.de (by kitconcept GmbH)\n@@ -83,12 +85,13 @@ It can be seen in action at the following sites:\n - German Physical Society: https://www.dpg-physik.de (by kitconcept GmbH)\n - Universitat Polit\xc3\xa8cnica de Catalunya: https://www.upc.edu/en (by kitconcept GmbH)\n \n+\n Support\n =======\n \n If you are having issues, please let us know via the `issue tracker <https://github.com/plone/plone.restapi/issues>`_.\n \n-If you required professional support, here is a list of Plone solution providers that contributed significantly to plone.restapi in the past:\n+If you require professional support, here is a list of Plone solution providers that contributed significantly to ``plone.restapi`` in the past.\n \n - `kitconcept GmbH <https://kitconcept.com>`_ (Germany)\n - `4teamwork <https://www.4teamwork.ch>`_ (Switzerland)\ndiff --git a/docs/source/_static/custom.css b/docs/source/_static/custom.css\nindex 8f78b4033..09d09e359 100644\n--- a/docs/source/_static/custom.css\n+++ b/docs/source/_static/custom.css\n@@ -1,57 +1,339 @@\n-.rst-content .menuselection {\n-    background-color: #f9ebb3;\n-    border: 1px solid #f0b37e;\n-    border-radius: 3px;\n-    padding: 1px 6px;\n+:root {\n+  /* Add Font Awesome 5 icon and color for `todo` */\n+  --pst-icon-clipboard-list: \'\\f46d\';\n+  --pst-icon-admonition-todo: var(--pst-icon-clipboard-list);\n+  --pst-color-admonition-todo:  161 , 46, 233;\n+  --target-color: #b9ee9e;\n+  --codeblock-color: #aad993;\n }\n \n-.rst-content .guilabel{\n-    border: 1px solid #777;\n-    background-color: #cee3fb;\n-    border-radius: 3px;\n-    padding: 1px 6px;\n+.visuallyhidden {\n+  display: none;\n }\n-.rst-content .toggle {\n-    background: none repeat scroll 0 0 #e7f2fa;\n-    padding: 12px;\n-    line-height: 24px;\n-    margin-bottom: 24px;\n+pre {\n+  border-radius: 0;\n+  background-color: white;\n+  box-shadow: none;\n+}\n+a,\n+a:visited,\n+main.bd-content #main-content a,\n+main.bd-content #main-content a:visited {\n+  color: #2980b9;\n+}\n+a:hover,\n+main.bd-content #main-content a:hover {\n+  color: #1a567e;\n+  text-decoration: none;\n+}\n+ul {\n+  list-style-type: square;\n+}\n+ul li > p {\n+  margin-bottom: 0.3rem;\n+}\n+ol li > p {\n+  margin-bottom: 0.3rem;\n+}\n+img{\n+  margin: 1rem 0;\n+}\n+figure img,\n+.figure img {\n+  box-shadow: 0 6px 24px 0 rgba(153,153,153,0.3);\n+}\n+.sidebar img.logo {\n+  box-shadow: none;\n+  width: 200px;\n+  margin-bottom: 1rem;\n+}\n+span.linenos {\n+  padding-right: 1em;\n+}\n+p.ploneorglink img {\n+  vertical-align: bottom;\n+}\n+dt:target,\n+span.highlighted,\n+ul.search li span.highlighted {\n+  background-color: var(--target-color);\n+}\n+\n+.bd-sidebar .nav ul {\n+  padding: 0 0 0 1rem;\n+}\n+.bd-sidebar .nav .toctree-checkbox ~ label i {\n+  transform: rotate(90deg);\n+}\n+.bd-sidebar .nav .toctree-checkbox:checked ~ label i {\n+  transform: rotate(0deg);\n+}\n+\n+.toctree-wrapper .caption {\n+  font-weight: bold;\n+  font-size: 1.2em;\n+  margin-top: 3rem;\n+}\n+.toctree-wrapper ul {\n+  list-style: none;\n+}\n+\n+section:not(#glossary) h1 ~ dl {\n+  display: grid;\n+  grid-template-columns: max-content auto;\n+}\n+section:not(#glossary) h1 ~ dl dd {\n+  margin-bottom: unset !important;\n+}\n+\n+div.section {\n+  margin-bottom: 5rem;\n+}\n+\n+/* admonitions */\n+.admonition {\n+  border-radius: 0;\n+  border: none;\n+  border-left: .2rem solid;\n+  border-left-color: rgba(var(--pst-color-admonition-default),1);\n+}\n+.admonition .admonition-title {\n+  margin-bottom: 1.5rem !important;\n+}\n+.admonition.toggle .admonition-title {\n+  cursor: pointer;\n+  display: flex;\n+}\n+.admonition.toggle .admonition-title::after {\n+  content: "\\f105";\n+  font-weight: 900;\n+  font-family: "Font Awesome 5 Free";\n+  margin-left: auto;\n+}\n+.admonition.toggle .admonition-title.open::after {\n+  content: "\\f107";\n+}\n+/* admonition `todo` */\n+.admonition.admonition-todo,\n+div.admonition.admonition-todo {\n+  border-color: rgba(var(--pst-color-admonition-todo),1);\n+}\n+.admonition.admonition-todo > .admonition-title,\n+div.admonition.admonition-todo > .admonition-title {\n+  background-color: rgba(var(--pst-color-admonition-todo),.1);\n+}\n+.admonition.admonition-todo > .admonition-title::before,\n+div.admonition.admonition-todo > .admonition-title::before {\n+  color: rgba(var(--pst-color-admonition-todo),1);\n+  content: var(--pst-icon-admonition-todo);\n+}\n+.admonition-github-only.admonition {\n+  display: none;\n+}\n+\n+\n+.topic {\n+  padding: 1.5em 1em .5em 1em;\n+}\n+.topic-title {\n+  font-weight: bold;\n+}\n+\n+\n+/* Bootstrap */\n+.btn-primary {\n+  color: #fff;\n+  background-color: #2980b9;\n+  border-color: #2980b9;\n+}\n+.btn-primary {\n+  background-color: #1f86ca;\n+  border-color: #2980b9;\n }\n \n-.rst-content .toggle .admonition-title {\n-    display: block;\n-    clear: both;\n-    cursor: pointer;\n+/* Search */\n+\n+/* Show search form. It is hidden by default. */\n+#search-documentation,\n+#search-documentation~form,\n+#search-documentation~p {\n+ display:block;\n+}\n+ul.search {\n+  margin-left: 0;\n+}\n+p.search-summary {\n+  margin: 1em 0 2rem 0;\n+}\n+#search-results ul {\n+  list-style-type: none;\n+  padding-left: 0;\n+}\n+#search-results ul li,\n+ul.search li {\n+  margin-bottom: 2rem;\n+  padding: 0;\n+  background-image: none;\n+  border-bottom: none;\n+}\n+#search-results ul li h3 {\n+  margin: 0.4rem 0 .5rem;\n+  font-size: 1.5rem;\n }\n+#search-results ul li .breadcrumbs {\n+  display: flex;\n+  flex-direction: row;\n+  flex-wrap: wrap;\n+}\n+#search-results ul li .breadcrumbs a {\n+  font-weight: normal;\n+}\n+#search-results ul li .breadcrumbs .lastbreadcrumb {\n+  white-space: nowrap;\n+  display: inline-block;\n+  max-width: 12rem;\n+  overflow: hidden;              /* "overflow"-Wert darf nicht "visible" sein */\n \n-.rst-content .toggle .admonition-title:after {\n-    content: " \xc3\xa2\xe2\x80\x93\xc2\xbc";\n+  text-overflow: ellipsis;\n+}\n+ul.search li p.context {\n+  margin-left: 0;\n }\n+.pathseparator {\n+  padding: 0 0.7rem;\n+}\n+\n \n-.rst-content .toggle .admonition-title.open:after {\n-    content: " \xc3\xa2\xe2\x80\x93\xc2\xb2";\n+/* submenu */\n+.bd-toc {\n+  box-shadow: 0 .2rem .5rem rgba(0,0,0,.05),0 0 .0625rem rgba(0,0,0,.1);\n }\n \n-.rst-content .toggle p:last-child {\n-    margin-bottom: 0;\n+/* extra sidebar */\n+div.sidebar:not(.margin){\n+  width: 40%;\n+  float: right;\n+  clear: right;\n+  margin: .3rem 0 .3rem 0.5em;\n+  padding: 2rem 0 1.5rem 1rem !important;\n+  background-color: rgba(var(--pst-color-admonition-note),.1);\n+  border: none;\n+  border-left: 8px rgba(var(--pst-color-admonition-default),1) solid;\n+  border-radius: .2rem;\n+  box-shadow: 0 .2rem .5rem rgba(0,0,0,.05),0 0 .0625rem rgba(0,0,0,.1);\n+}\n+\n+div.sidebar:not(.margin) .figure {\n+  margin-top: 0;\n+  padding-top: 0;\n+  margin-left: 0;\n+  padding-left: 0;\n+}\n+div.sidebar:not(.margin) img.logo {\n+  margin-top: 0;\n+  margin-bottom: .3rem;\n+}\n+div.sidebar:not(.margin) p {\n+  margin-bottom: 0;\n+}\n+div.sidebar:not(.margin) p.sidebar-title {\n+  display: none;\n+}\n+div.sidebar:not(.margin) div.topic {\n+  padding: .5em 0;\n+  background-color: transparent;\n+  border: none;\n+}\n+div.sidebar:not(.margin) pre {\n+  margin: .5em 0 1.5em 0;\n+}\n+div.sidebar:not(.margin) div[class*="highlight-"] {\n+  margin-right: .5em;\n+}\n+div.sidebar:not(.margin) .admonition {\n+  margin-right: .5em;\n+  background-color: #ffffff;\n+}\n+@media (min-width:768px) {\n+  div.sidebar:not(.margin) {\n+    width: 50%;\n+    margin-left: 1.5em;\n+    margin-right: -28%;\n+  }\n }\n \n-/* Support for "more Font-Awesome Icons" example    */\n-/* ################################################ */\n \n-.fa:before,\n-.icon:before {\n-    font-family: "FontAwesome";\n-    display: inline-block;\n-    font-style: normal;\n-    font-weight: normal;\n-    line-height: 1;\n-    text-decoration: inherit;\n-    padding-left: 0.2em;\n-    padding-right: 0.2em;\n+main.bd-content #main-content dl.simple dt {\n+  margin-top: .8em;\n+}\n+main.bd-content #main-content dl.simple dt:nth-of-type(1) {\n+  margin-top: 0;\n+}\n+main.bd-content #main-content dl.simple dd {\n+  margin-top: .8em;\n+}\n+main.bd-content #main-content dl.simple dt + dd {\n+  margin-top: 0;\n+}\n+\n+.prev-next-bottom {\n+  margin: 20px 0 30px 0;\n+}\n+.prev-next-bottom a.left-prev, .prev-next-bottom a.right-next {\n+  padding: 5px 10px;\n+  border: 1px solid rgba(0,0,0,.2);\n+  max-width: 45%;\n+  overflow-x: hidden;\n+  color: rgba(0,0,0,.65);\n+  border-radius: 10px;\n+}\n+\n+/* Local navigation */\n+li.nav-item.toc-entry {\n+  line-height: 1.25em;\n+  margin-bottom: 0.25em;\n+}\n+\n+span.guilabel, span.menuselection {\n+  border: none;\n+  background: #e7f2fa;\n+  border-radius: 4px;\n+  padding: 4px 5px;\n+  font-size: 90%;\n+  font-weight: bold;\n+  font-style: italic;\n+  white-space: nowrap;\n }\n \n-/*  Hint for providing the Unicode Value of an fa-icon in CSS as ASCII \n+\n+/*\n+ * extensions\n+ */\n+\n+/* definitions */\n+dl.py.function {\n+  margin-bottom: 5rem;\n+}\n+dl.py.function > dt {\n+  background-color: var(--codeblock-color);\n+  padding: 4px 5px;\n+}\n+dl.py.function > dt:target {\n+  background-color: var(--target-color);\n+}\n+dl.field-list > dt {\n+  padding-left: 0;\n+}\n+\n+/* code blocks */\n+div.viewcode-block:target {\n+  padding: 10px 10px;\n+  background-color: var(--codeblock-color);\n+  border-top: 1px solid var(--codeblock-color);\n+  border-bottom: 1px solid var(--codeblock-color);\n+}\n+\n+/*  Hint for providing the Unicode Value of an fa-icon in CSS as ASCII\n     replace the "&#x" part from the unicode HTML5 literal \n     displayed on the font-awesome website cheatsheet e.g. \n     http://fontawesome.io/cheatsheet/\n@@ -63,7 +345,6 @@\n         .fa-wrench:before {\n             content: "\\f0ad";\n         }\n-\n */\n \n .icon-wrench:before,\ndiff --git a/docs/source/_static/placeholder.txt b/docs/source/_static/placeholder.txt\ndeleted file mode 100644\nindex e69de29bb..000000000\ndiff --git a/docs/source/_static/print.css b/docs/source/_static/print.css\nnew file mode 100644\nindex 000000000..8dbc2d579\n--- /dev/null\n+++ b/docs/source/_static/print.css\n@@ -0,0 +1,3 @@\n+.tooltip {\n+  display: none;\n+}\ndiff --git a/docs/source/actions.md b/docs/source/actions.md\nnew file mode 100644\nindex 000000000..e36ed5d00\n--- /dev/null\n+++ b/docs/source/actions.md\n@@ -0,0 +1,31 @@\n+# Portal Actions\n+\n+Plone has the concept of configurable actions called `portal_actions`.\n+Each action defines an `id`, a `title`, the required permissions, and a condition that will be checked to decide whether the action will be available for a user.\n+Actions are sorted by categories.\n+\n+Actions can be used to build UI elements that adapt to the available actions.\n+An example is the Plone toolbar where the `object_tabs` (view, edit, folder contents, sharing) and the `user_actions` (login, logout, preferences) are used to display to the user only those actions that are allowed for the currently logged in user.\n+\n+The available actions for the currently logged in user can be retrieved by calling the `@actions` endpoint on a specific context.\n+This also works for unauthenticated users.\n+\n+\n+## Listing available actions\n+\n+To list the available actions, send a `GET` request to the `@actions` endpoint on a specific content object:\n+\n+```{eval-rst}\n+.. http:example:: curl httpie python-requests\n+   :request: ../../src/plone/restapi/tests/http-examples/actions_get.req\n+```\n+\n+The server will respond with a {term}`200 OK` status code.\n+The JSON response contains the available actions categories (object, object_buttons, user) on the top level.\n+Each category contains a list of the available actions in that category:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/actions_get.resp\n+:language: http\n+```\n+\n+If you want to limit the categories that are returned, pass one or more `categories:list` parameters, for example, `@action?categories:list=object&categories:list=user`.\ndiff --git a/docs/source/actions.rst b/docs/source/actions.rst\ndeleted file mode 100644\nindex 5305cc101..000000000\n--- a/docs/source/actions.rst\n+++ /dev/null\n@@ -1,34 +0,0 @@\n-Portal Actions\n-==============\n-\n-Plone has the concept of configurable actions (called "portal_actions").\n-Each actions defines an id, a title, the required\n-permissions and a condition that will be checked to decide if the action\n-will be available for a user.\n-Actions are sorted by categories.\n-\n-Actions can be used to build UI elements that adapt to the available actions.\n-An example is the Plone toolbar where the "object_tabs" (view, edit, folder contents, sharing)\n-and the "user_actions" (login, logout, preferences) are used to display the user only the actions that are allowed for the currently logged in user.\n-\n-The available actions for the currently logged in user can be retrieved\n-by calling the @actions endpoint on a specific context.\n-This also works for not authenticated users.\n-\n-Listing available actions\n--------------------------\n-\n-To list the available actions, send a GET request to the \'@actions\' endpoint on a specific content object:\n-\n-.. http:example:: curl httpie python-requests\n-   :request: ../../src/plone/restapi/tests/http-examples/actions_get.req\n-\n-The server will respond with a `200 OK` status code.\n-The JSON response contains the available actions categories (object, object_buttons, user) on the top level.\n-Each category contains a list of the available actions in that category:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/actions_get.resp\n-   :language: http\n-\n-If you want to limit the categories that are retured, pass one or more parameters\n-``categories:list``, i.e. ``@action?categories:list=object&categories:list=user``.\ndiff --git a/docs/source/addons.md b/docs/source/addons.md\nnew file mode 100644\nindex 000000000..cb5026127\n--- /dev/null\n+++ b/docs/source/addons.md\n@@ -0,0 +1,87 @@\n+# Add-ons\n+\n+Add-on product records can be addressed through the `@addons` endpoint in a Plone site.\n+In order to address a specific record, the profile ID has to be passed as a path segment, such as `/plone/@addons/plone.session`.\n+\n+Reading or writing add-ons metadata requires the `cmf.ManagePortal` permission.\n+\n+## Reading add-ons records\n+\n+Reading a single record:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/addons_get.req\n+```\n+\n+Example response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/addons_get.resp\n+:language: http\n+```\n+\n+## Listing add-ons records\n+\n+A list of all add-ons in the portal can be retrieved by sending a `GET` request to the `@addons` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/addons_get_list.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/addons_get_list.resp\n+:language: http\n+```\n+\n+The following fields are returned:\n+\n+- `@id`: hypermedia link to the control panel\n+- `id`: the name of the add-on package\n+- `title`: the friendly name of the add-on package\n+- `description`: description of the add-on\n+- `version`: the current version of the add-on\n+- `is_installed`: is the add-on installed?\n+- `has_uninstall_profile`: does the add-on have an uninstall profile?\n+\n+The query string parameter `upgradeable` is available in case you want to query only the add-ons that have an upgrade step pending.\n+\n+## Installing an add-on\n+\n+An individual add-on can be installed by issuing a `POST` to the given URL:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/addons_install.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/addons_install.resp\n+:language: http\n+```\n+\n+## Uninstalling an add-on\n+\n+An individual add-on can be uninstalled by issuing a `POST` to the given URL:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/addons_uninstall.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/addons_uninstall.resp\n+:language: http\n+```\n+\n+## Upgrading an add-on\n+\n+An individual add-on can be upgraded by issuing a `POST` to the given URL:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/addons_upgrade.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/addons_upgrade.resp\n+:language: http\n+```\ndiff --git a/docs/source/addons.rst b/docs/source/addons.rst\ndeleted file mode 100644\nindex 8e0931c33..000000000\n--- a/docs/source/addons.rst\n+++ /dev/null\n@@ -1,85 +0,0 @@\n-Add-ons\n-========\n-\n-Addon product records can be addressed through the ``@addons`` endpoint on the\n-Plone site. In order to address a specific record, the profile id has to be\n-passed as a path segment (e.g. `/plone/@addons/plone.session`).\n-\n-Reading or writing addons metadata require the ``cmf.ManagePortal``\n-permission.\n-\n-Reading add-ons records\n------------------------\n-\n-Reading a single record:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/addons_get.req\n-\n-Example Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/addons_get.resp\n-   :language: http\n-\n-\n-Listing add-ons records\n------------------------\n-\n-A list of all add-ons in the portal can be retrieved by\n-sending a GET request to the @addons endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/addons_get_list.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/addons_get_list.resp\n-   :language: http\n-\n-The following fields are returned:\n-\n-- @id: hypermedia link to the control panel\n-- id: the name of the add-on package\n-- title: the friendly name of the add-on package\n-- description: description of the add-on\n-- version: the current version of the add-on\n-- is_installed: is the add-on installed?\n-- has_uninstall_profile: does the add-on have an uninstall profile\n-\n-The querystring parameter ``upgradeable`` is available in case you want to query only the\n-addons that have an upgrade step pending.\n-\n-Installing an addon\n--------------------\n-\n-An individual addon can be installed by issuing a ``POST`` to the given URL:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/addons_install.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/addons_install.resp\n-   :language: http\n-\n-\n-Uninstalling an addon\n----------------------\n-\n-An individual addon can be uninstalled by issuing a ``POST`` to the given URL:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/addons_uninstall.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/addons_uninstall.resp\n-   :language: http\n-\n-\n-Upgrading an addon\n--------------------\n-\n-An individual addon can be upgraded by issuing a ``POST`` to the given URL:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/addons_upgrade.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/addons_upgrade.resp\n-   :language: http\ndiff --git a/docs/source/authentication.md b/docs/source/authentication.md\nnew file mode 100644\nindex 000000000..3603919d7\n--- /dev/null\n+++ b/docs/source/authentication.md\n@@ -0,0 +1,119 @@\n+# Authentication\n+\n+`plone.restapi` uses Plone PAS for authentication.\n+\n+That means that any authentication method supported by an installed PAS plugin should work, assuming it\'s an authentication method that makes sense to use with an API.\n+\n+For example, to authenticate using HTTP basic auth, you\'d set an `Authorization` header:\n+\n+```http\n+GET /Plone HTTP/1.1\n+Authorization: Basic Zm9vYmFyOmZvb2Jhcgo=\n+Accept: application/json\n+```\n+\n+HTTP client libraries usually contain helper functions to produce a proper `Authorization` header for you based on given credentials.\n+\n+Using the `requests` library, you would set up a session with basic authentication as follows:\n+\n+```python\n+import requests\n+\n+session = requests.Session()\n+session.auth = (\'username\', \'password\')\n+session.headers.update({\'Accept\': \'application/json\'})\n+\n+response = session.get(url)\n+```\n+\n+Or the same example using `curl`:\n+\n+```bash\n+curl -u username:password -H \'Accept:application/json\' $URL\n+```\n+\n+\n+## JSON Web Tokens (JWT)\n+\n+`plone.restapi` includes a Plone PAS plugin for authentication with JWT.\n+The plugin is installed automatically when installing the product.\n+\n+\n+### Acquiring a token (@login)\n+\n+A JWT token can be acquired by posting a user\'s credentials to the `@login` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/jwt_login.req\n+```\n+\n+The server responds with a JSON object containing the token:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/jwt_login.resp\n+:language: http\n+```\n+\n+\n+### Authenticating with a token\n+\n+The token can now be used in subsequent requests by including it in the `Authorization` header with the `Bearer` scheme:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/jwt_logged_in.req\n+```\n+\n+\n+### Renewing a token (@login-renew)\n+\n+By default, the token will expire after 12 hours, and thus must be renewed before expiration.\n+To renew the token, `POST` to the `@login-renew` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/jwt_login_renew.req\n+```\n+\n+The server returns a JSON object with a new token:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/jwt_login_renew.resp\n+:language: http\n+```\n+\n+\n+### Invalidating a token (@logout)\n+\n+The `@logout` endpoint can be used to invalidate tokens.\n+However by default tokens are not persisted on the server and thus can not be invalidated.\n+To enable token invaldiation, activate the `store_tokens` option in the PAS plugin.\n+If you need tokens that are valid indefinitely you should also disable the use of Plone\'s keyring in the PAS plugin (option `use_keyring`).\n+\n+The logout request must contain the existing token in the `Authorization` header:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/jwt_logout.req\n+```\n+\n+If invalidation succeeds, the server responds with an empty 204 response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/jwt_logout.resp\n+:language: http\n+```\n+\n+\n+## Permissions\n+\n+In order for a user to use the REST API, the `plone.restapi: Use REST API` permission is required.\n+\n+By default, installing the `plone.restapi:default` profile will assign this permission to the `Anonymous` role.\n+Everybody is allowed to use the REST API by default.\n+\n+If you wish to control in more detail which roles are allowed to use the REST API, please assign this permission accordingly.\n+\n+As well as the `plone.restapi: Use REST API` permission, some of the common Plone permissions are also required, depending on the particular service.\n+For example, retrieving a resource using `GET` will require `View`.\n+Adding an object using `POST` will require `Add portal content`.\n+\n+In order to modify or override this behavior, if your custom service class inherits from `plone.restapi.services.Service`, override the method `check_permission` and add your custom checks accordingly.\ndiff --git a/docs/source/authentication.rst b/docs/source/authentication.rst\ndeleted file mode 100644\nindex afada5bac..000000000\n--- a/docs/source/authentication.rst\n+++ /dev/null\n@@ -1,120 +0,0 @@\n-Authentication\n-==============\n-\n-``plone.restapi`` uses Plone PAS for Authentication.\n-\n-That means that any authentication method supported by an installed PAS Plugin should work, assuming it\'s an authentication method that makes sense to use with an API.\n-\n-For example, to authenticate using HTTP basic auth, you\'d set an ``Authorization`` header:\n-\n-.. code-block:: http\n-\n-  GET /Plone HTTP/1.1\n-  Authorization: Basic Zm9vYmFyOmZvb2Jhcgo=\n-  Accept: application/json\n-\n-HTTP client libraries usually contain helper functions to produce a proper ``Authorization`` header for you based on given credentials.\n-\n-Using the ``requests`` library, you\'d set up a session with basic auth like this:\n-\n-.. code-block:: python\n-\n-    import requests\n-\n-    session = requests.Session()\n-    session.auth = (\'username\', \'password\')\n-    session.headers.update({\'Accept\': \'application/json\'})\n-\n-    response = session.get(url)\n-\n-Or the same example using ``curl``:\n-\n-.. code-block:: bash\n-\n-    curl -u username:password -H \'Accept:application/json\' $URL\n-\n-\n-JSON Web Tokens (JWT)\n----------------------\n-\n-``plone.restapi`` includes a Plone PAS plugin for authentication with JWT. The\n-plugin is installed automatically when installing the product.\n-\n-Acquiring a token (@login)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-A JWT token can be acquired by posting a user\'s credentials to the ``@login``\n-endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/jwt_login.req\n-\n-The server responds with a JSON object containing the token.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/jwt_login.resp\n-   :language: http\n-\n-Authenticating with a token\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-The token can now be used in subsequent requests by including it in the\n-``Authorization`` header with the ``Bearer`` scheme:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/jwt_logged_in.req\n-\n-\n-Renewing a token (@login-renew)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-By default the token will expire after 12 hours and thus must be renewed before\n-expiration. To renew the token simply post to the ``@login-renew`` endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/jwt_login_renew.req\n-\n-The server returns a JSON object with a new token:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/jwt_login_renew.resp\n-   :language: http\n-\n-Invalidating a token (@logout)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-The ``@logout`` endpoint can be used to invalidate tokens. However by default\n-tokens are not persisted on the server and thus can not be invalidated. To enable\n-token invaldiation, activate the ``store_tokens`` option in the PAS plugin. If you\n-need tokens that are valid indefinitely you should also disable the use of Plone\'s\n-keyring in the PAS plugin (option ``use_keyring``).\n-\n-The logout request must contain the existing token in the ``Authorization`` header.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/jwt_logout.req\n-\n-If invalidation succeeds, the server responds with an empty 204 reponse:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/jwt_logout.resp\n-   :language: http\n-\n-Permissions\n------------\n-\n-In order for a user to use the REST API, the ``plone.restapi: Use REST API``\n-permission is required.\n-\n-By default, installing the ``plone.restapi:default`` profile will assign this\n-permission to the ``Anonymous`` role, so everybody is allowed to use the REST\n-API by default.\n-\n-If you wish to control in more detail which roles are allowed to use the REST\n-API, please assign this permission accordingly.\n-\n-As well as the ``plone.restapi: Use REST API`` permission some of the common\n-Plone permissions are also required, depending on the particular service.\n-For example, retrieving a resource using GET will require ``View``, adding an\n-object using POST will require ``Add portal content``, and so on.\n-\n-In order to modify/override this behavior, if your custom service class\n-inherits from ``plone.restapi.services.Service``, just override the method\n-``check_permission`` and add your custom checks accordingly.\ndiff --git a/docs/source/batching.md b/docs/source/batching.md\nnew file mode 100644\nindex 000000000..078ba16eb\n--- /dev/null\n+++ b/docs/source/batching.md\n@@ -0,0 +1,70 @@\n+# Batching\n+\n+Representations of collection-like resources are batched or paginated if the\n+size of the resultset exceeds the batching size:\n+\n+```json\n+{\n+  "@id": "http://.../folder/search",\n+  "batching": {\n+    "@id": "http://.../folder/search?b_size=10&b_start=20",\n+    "first": "http://.../plone/folder/search?b_size=10&b_start=0",\n+    "last": "http://.../plone/folder/search?b_size=10&b_start=170",\n+    "prev": "http://.../plone/folder/search?b_size=10&b_start=10",\n+    "next": "http://.../plone/folder/search?b_size=10&b_start=30"\n+  },\n+  "items": [\n+    "..."\n+  ],\n+  "items_total": 175\n+}\n+```\n+\n+If the entire resultset fits into a single batch page (as determined by\n+`b_size`), the top-level `batching` links will be omitted.\n+\n+\n+## Top-level attributes\n+\n+| Attribute     | Description                                                          |\n+| ------------- | -------------------------------------------------------------------- |\n+| `@id`         | Canonical base URL for the resource, without any batching parameters |\n+| `items`       | Current batch of items / members of the collection-like resource     |\n+| `items_total` | Total number of items                                                |\n+| `batching`    | Batching related navigation links (see below)                        |\n+\n+\n+## Batching links\n+\n+If, and only if, the result set has been batched over several pages, the response body will contain a top-level attribute `batching` which contains batching links.\n+These links that can be used to navigate batches in a hypermedia fashion:\n+\n+| Attribute | Description                                       |\n+| --------- | ------------------------------------------------- |\n+| `@id`     | Link to the current batch page                    |\n+| `first`   | Link to the first batch page                      |\n+| `prev`    | Link to the previous batch page (*if applicable*) |\n+| `next`    | Link to the next batch page (*if applicable*)     |\n+| `last`    | Link to the last batch page                       |\n+\n+\n+## Parameters\n+\n+Batching can be controlled with two query string parameters.\n+In order to address a specific batch page, the `b_start` parameter can be used to request a specific batch page, containing `b_size` items starting from `b_start`.\n+\n+| Parameter | Description                |\n+| --------- | -------------------------- |\n+| `b_size`  | Batch size (default is 25) |\n+| `b_start` | First item of the batch    |\n+\n+The following is a full example of a batched request and response:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/batching.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/batching.resp\n+:language: http\n+```\ndiff --git a/docs/source/batching.rst b/docs/source/batching.rst\ndeleted file mode 100644\nindex 7cc26257b..000000000\n--- a/docs/source/batching.rst\n+++ /dev/null\n@@ -1,86 +0,0 @@\n-Batching\n-========\n-\n-Representations of collection-like resources are batched / paginated if the\n-size of the resultset exceeds the batching size:\n-\n-.. code-block:: json\n-\n-    {\n-      "@id": "http://.../folder/search",\n-      "batching": {\n-        "@id": "http://.../folder/search?b_size=10&b_start=20",\n-        "first": "http://.../plone/folder/search?b_size=10&b_start=0",\n-        "last": "http://.../plone/folder/search?b_size=10&b_start=170",\n-        "prev": "http://.../plone/folder/search?b_size=10&b_start=10",\n-        "next": "http://.../plone/folder/search?b_size=10&b_start=30"\n-      },\n-      "items": [\n-        "..."\n-      ],\n-      "items_total": 175,\n-    }\n-\n-If the entire resulset fits into a single batch page (as determined by\n-``b_size``), the top-level ``batching`` links will be omitted.\n-\n-\n-Top-level attributes\n---------------------\n-\n-================ ===========================================================\n-Attribute        Description\n-================ ===========================================================\n-``@id``          Canonical base URL for the resource, without any\n-                 batching parameters\n-``items``        Current batch of items / members of the collection-like\n-                 resource\n-``items_total``  Total number of items\n-``batching``     Batching related navigation links (see below)\n-================ ===========================================================\n-\n-\n-Batching links\n---------------\n-\n-If, and only if, the resultset has been batched over several pages, the\n-response body will contain a top-level attribute ``batching`` that contains\n-batching links. These links that can be used to navigate batches in a\n-Hypermedia fashion:\n-\n-================ ===========================================================\n-Attribute        Description\n-================ ===========================================================\n-``@id``          Link to the current batch page\n-``first``        Link to the first batch page\n-``prev``         Link to the previous batch page (*if applicable*)\n-``next``         Link to the next batch page (*if applicable*)\n-``last``         Link to the last batch page\n-================ ===========================================================\n-\n-\n-\n-Parameters\n-----------\n-\n-Batching can be controlled with two query string parameters. In order to\n-address a specific batch page, the ``b_start`` parameter can be used to\n-request a specific batch page, containing ``b_size`` items starting from\n-``b_start``.\n-\n-================ ===========================================================\n-Parameter        Description\n-================ ===========================================================\n-``b_size``       Batch size (default is 25)\n-``b_start``      First item of the batch\n-================ ===========================================================\n-\n-\n-Full example of a batched request and response:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/batching.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/batching.resp\n-   :language: http\n-\ndiff --git a/docs/source/blocks.md b/docs/source/blocks.md\nnew file mode 100644\nindex 000000000..1946085c5\n--- /dev/null\n+++ b/docs/source/blocks.md\n@@ -0,0 +1,226 @@\n+# Volto Blocks support\n+\n+```{note}\n+The `plone.restapi` package gives support for Volto blocks providing a Dexterity behavior `plone.restapi.behaviors.IBlocks`.\n+It is used to enable Volto blocks in any content type.\n+Volto then renders the blocks engine for all the content types that have this behavior enabled.\n+```\n+\n+\n+## Retrieving blocks on a content object\n+\n+The `plone.restapi.behaviors.IBlocks` has two fields where existing blocks and their data are stored in the object (`blocks`).\n+The one where the current layout is stored (`blocks_layout`).\n+As they are fields in a Dexterity behavior, both fields will be returned in a `GET` request as attributes:\n+\n+```http\n+GET /plone/my-document HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+```\n+\n+The server responds with a `Status 200`, and lists all stored blocks on that content object:\n+\n+```http\n+GET /plone/my-document HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/my-document",\n+\n+  "...more response data...": "",\n+\n+  "blocks_layout": [\n+    "#title-1",\n+    "#description-1",\n+    "#image-1"\n+  ],\n+  "blocks": {\n+    "#title-1": {\n+      "@type": "title"\n+    },\n+    "#description-1": {\n+      "@type": "Description"\n+    },\n+    "#image-1": {\n+      "@type": "Image",\n+      "image": "<some random url>"\n+    }\n+  }\n+}\n+```\n+\n+`blocks` objects will contain the title metadata and the information required to render them.\n+\n+\n+## Adding blocks to an object\n+\n+Storing blocks is done via a default `PATCH` content operation:\n+\n+```http\n+PATCH /plone/my-document HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+  "blocks_layout": [\n+    "#title-1",\n+    "#description-1",\n+    "#image-1"\n+  ],\n+  "blocks": {\n+    "#title-1": {\n+      "@type": "title"\n+    },\n+    "#description-1": {\n+      "@type": "Description"\n+    },\n+    "#image-1": {\n+      "@type": "Image",\n+      "image": "<some random url>"\n+    }\n+  }\n+}\n+```\n+\n+\n+## Block serializers and deserializers\n+\n+Practical experience has shown that it is useful to transform, server-side, the value of block fields on inbound (deserialization) and also outbound (serialization) operations.\n+For example, HTML field values are cleaned up using `portal_transforms`.\n+Or paths in image blocks are transformed to use `resolveuid`.\n+\n+It is possible to influence the transformation of block values per block type.\n+For example, to tweak the value stored in an image type block, we can create a new subscriber as follows:\n+\n+```python\n+@implementer(IBlockFieldDeserializationTransformer)\n+@adapter(IBlocks, IBrowserRequest)\n+class ImageBlockDeserializeTransformer(object):\n+    order = 100\n+    block_type = \'image\'\n+\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def __call__(self, value):\n+        portal = getMultiAdapter(\n+            (self.context, self.request), name="plone_portal_state"\n+        ).portal()\n+        url = value.get(\'url\', \'\')\n+        deserialized_url = path2uid(\n+            context=self.context, portal=portal,\n+            href=url\n+        )\n+        value["url"] = deserialized_url\n+        return value\n+```\n+\n+Then register it as a subscription adapter:\n+\n+```xml\n+<subscriber factory=".blocks.ImageBlockDeserializeTransformer"\n+  provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"/>\n+```\n+\n+This would replace the `url` value to use `resolveuid` instead of hard coding the image path.\n+\n+The `block_type` attribute needs to match the `@type` field of the block value.\n+The `order` attribute is used in sorting the subscribers for the same field.\n+A lower number has higher precedence, that is, it is executed first.\n+\n+On the serialization path, a block value can be tweaked with a similar transformer\n+For example, on an imaginary database listing block type:\n+\n+```python\n+@implementer(IBlockFieldDeserializationTransformer)\n+@adapter(IBlocks, IBrowserRequest)\n+class DatabaseQueryDeserializeTransformer(object):\n+    order = 100\n+    block_type = \'database_listing\'\n+\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def __call__(self, value):\n+        value["items"] = db.query(value)  # pseudocode\n+        return value\n+```\n+\n+Then register it as a subscription adapter:\n+\n+```xml\n+<subscriber factory=".blocks.DatabaseQueryDeserializeTransformer"\n+  provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"/>\n+```\n+\n+\n+### Generic block transformers and smart fields\n+\n+You can create a block transformer that applies to all blocks by using `None` as the value for `block_type`.\n+The `order` field still applies, though.\n+The generic block transformers enable us to create **smart block fields**, which are handled differently.\n+For example, any internal link stored as `url` or `href` in a block value is converted (and stored) as a `resolveuid`-based URL, then resolved back to a full URL on block serialization.\n+\n+Another **smart field** is the `searchableText` field in a block value.\n+It needs to be a plain text value, and it will be used in the `SearchableText` value for the context item.\n+\n+If you need to store "subblocks" in a block value, you should use the `blocks` smart field (or `data.blocks`).\n+Doing so integrates those blocks with the transformers.\n+\n+\n+## `SearchableText` indexing for blocks\n+\n+As the main consumer of `plone.restapi`\'s blocks, this functionality is specific to Volto blocks.\n+By default, searchable text (for Plone\'s `SearchableText` index) is extracted from `text` blocks.\n+\n+To extract searchable text for other types of blocks, there are two approaches.\n+\n+\n+### Client side solution\n+\n+The block provides the data to be indexed in its `searchableText` attribute:\n+\n+```json\n+{\n+  "@type": "image",\n+  "align": "center",\n+  "alt": "Plone Conference 2021 logo",\n+  "searchableText": "Plone Conference 2021 logo",\n+  "size": "l",\n+  "url": "https://2021.ploneconf.org/images/logoandfamiliesalt.svg"\n+}\n+```\n+\n+This is the preferred solution.\n+\n+\n+### Server side solution\n+\n+For each new block, you need to write an adapter that will extract the searchable text from the block information:\n+\n+```python\n+@implementer(IBlockSearchableText)\n+@adapter(IBlocks, IBrowserRequest)\n+class ImageSearchableText(object):\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def __call__(self, block_value):\n+        return block_value[\'alt_text\']\n+```\n+\n+See `plone.restapi.interfaces.IBlockSearchableText` for details.\n+The `__call__` methods needs to return a string, for the text to be indexed.\n+\n+This adapter needs to be registered as a named adapter, where the name is the same as the block type (its `@type` property from the block value):\n+\n+```xml\n+<adapter name="image" factory=".indexers.ImageBlockSearchableText" />\n+```\ndiff --git a/docs/source/blocks.rst b/docs/source/blocks.rst\ndeleted file mode 100644\nindex 9133d66f8..000000000\n--- a/docs/source/blocks.rst\n+++ /dev/null\n@@ -1,223 +0,0 @@\n-Volto Blocks support\n-====================\n-\n-.. note::\n-  plone.restapi package gives support for Volto Blocks providing a Dexterity behavior ``plone.restapi.behaviors.IBlocks`` that it is used to enable Volto Blocks in any content type.\n-  Volto then renders the Blocks engine for all the content types that have this behavior enabled.\n-\n-Retrieving blocks on a content object\n--------------------------------------\n-\n-The ``plone.restapi.behaviors.IBlocks`` has two fields where existing blocks and their data are stored in the object (``blocks``) and the one where the current layout is stored (``blocks_layout``).\n-As they are fields in a Deterity behavior, both fields will be returned in a simple GET as attributes::\n-\n-  GET /plone/my-document HTTP/1.1\n-  Accept: application/json\n-  Authorization: Basic YWRtaW46c2VjcmV0\n-\n-The server responds with a ``Status 200`` and list all stored blocks on that content object::\n-\n-  GET /plone/my-document HTTP/1.1\n-  Accept: application/json\n-  Authorization: Basic YWRtaW46c2VjcmV0\n-  Content-Type: application/json\n-\n-  {\n-    "@id": "http://localhost:55001/plone/my-document",\n-    ...\n-    "blocks_layout": [\n-      "#title-1",\n-      "#description-1",\n-      "#image-1"\n-    ],\n-    "blocks": {\n-      "#title-1": {\n-        "@type": "title"\n-      },\n-      "#description-1": {\n-        "@type": "Description"\n-      },\n-      "#image-1": {\n-        "@type": "Image",\n-        "image": "<some random url>"\n-      }\n-    }\n-  }\n-\n-blocks objects will contain the tile metadata and the information to required to render them.\n-\n-\n-Adding blocks to an object\n---------------------------\n-\n-Storing blocks is done also via a default PATCH content operation::\n-\n-  PATCH /plone/my-document HTTP/1.1\n-  Accept: application/json\n-  Authorization: Basic YWRtaW46c2VjcmV0\n-  Content-Type: application/json\n-\n-  {\n-    "blocks_layout": [\n-      "#title-1",\n-      "#description-1",\n-      "#image-1"\n-    ],\n-    "blocks": {\n-      "#title-1": {\n-        "@type": "title"\n-      },\n-      "#description-1": {\n-        "@type": "Description"\n-      },\n-      "#image-1": {\n-        "@type": "Image",\n-        "image": "<some random url>"\n-      }\n-    }\n-  }\n-\n-Block serializers and deserializers\n------------------------------------\n-\n-Practical experience has shown that it is useful to transform, server-side, the\n-value of block fields on inbound (deserialization) and also outbound\n-(serialization) operations. For example, HTML field values are cleaned up using\n-``portal_transforms``, paths in Image blocks are transformed to use ``resolveuid``\n-and so on.\n-\n-It is possible to influence the transformation of block values per block type.\n-For example, to tweak the value stored in Image type block, we can create a\n-new subscriber like as follows.\n-\n-..  code-block:: python\n-\n-    @implementer(IBlockFieldDeserializationTransformer)\n-    @adapter(IBlocks, IBrowserRequest)\n-    class ImageBlockDeserializeTransformer(object):\n-        order = 100\n-        block_type = \'image\'\n-\n-        def __init__(self, context, request):\n-            self.context = context\n-            self.request = request\n-\n-        def __call__(self, value):\n-            portal = getMultiAdapter(\n-                (self.context, self.request), name="plone_portal_state"\n-            ).portal()\n-            url = value.get(\'url\', \'\')\n-            deserialized_url = path2uid(\n-                context=self.context, portal=portal,\n-                href=url\n-            )\n-            value["url"] = deserialized_url\n-            return value\n-\n-Then register it as a subscription adapter.\n-\n-..  code-block:: xml\n-\n-    <subscriber factory=".blocks.ImageBlockDeserializeTransformer"\n-      provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"/>\n-\n-This would replace the ``url`` value to use ``resolveuid`` instead of hardcoding\n-the image path.\n-\n-The ``block_type`` attribute needs to match the ``@type`` field of the block\n-value. The ``order`` attribute is used in sorting the subscribers for the same\n-field. Lower number has higher precedence (is executed first).\n-\n-On the serialization path, a block value can be tweaked with a similar\n-transformer, for example on an imaginary Database Listing block type.\n-\n-..  code-block:: python\n-\n-    @implementer(IBlockFieldDeserializationTransformer)\n-    @adapter(IBlocks, IBrowserRequest)\n-    class DatabaseQueryDeserializeTransformer(object):\n-        order = 100\n-        block_type = \'database_listing\'\n-\n-        def __init__(self, context, request):\n-            self.context = context\n-            self.request = request\n-\n-        def __call__(self, value):\n-            value["items"] = db.query(value)  # pseudocode\n-            return value\n-\n-Then register it as a subscription adapter.\n-\n-..  code-block:: xml\n-\n-    <subscriber factory=".blocks.DatabaseQueryDeserializeTransformer"\n-      provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"/>\n-\n-Generic block transformers and smart fields\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-You can create a block transformer that applies to all blocks, by using ``None``\n-as the value for ``block_type``. The ``order`` field still applies, though. Using\n-the generic block transfomers enables us to create **smart block fields**,\n-which are handled differently. For example, any internal link stored as ``url``\n-or ``href`` in a block value is converted (and stored) as a ``resolveuid``-based URL,\n-then resolved back to a full URL on block serialization.\n-\n-Another **smart field** is the ``searchableText`` field in a block value. It\n-needs to be a plain text value and it will be used in the ``SearchableText``\n-value for the context item.\n-\n-If you need to store "subblocks" in a block value, you should use the\n-``blocks`` smart field (or ``data.blocks``), doing so integrates those blocks\n-with the transfomers.\n-\n-``SearchableText`` indexing for blocks\n---------------------------------------\n-\n-As the main consumer of ``plone.restapi``\'s blocks, this functionality is specific to Volto blocks. By default searchable text (for Plone\'s ``SearchableText`` index) is extracted from ``text`` blocks.\n-\n-To extract searchable text for other types of blocks, there are two approaches.\n-\n-Client side solution\n-~~~~~~~~~~~~~~~~~~~~\n-\n-The block provides the data to be indexed in its ``searchableText`` attribute.\n-\n-..  code-block:: json\n-\n-    {\n-      "@type": "image",\n-      "align": "center",\n-      "alt": "Plone Conference 2021 logo",\n-      "searchableText": "Plone Conference 2021 logo",\n-      "size": "l",\n-      "url": "https://2021.ploneconf.org/images/logoandfamiliesalt.svg"\n-    }\n-\n-This is the preferred solution.\n-\n-Server side solution\n-~~~~~~~~~~~~~~~~~~~~\n-\n-For each new block, you need to write an adapter that will extract the searchable text from the block information.\n-\n-..  code-block:: python\n-\n-    @implementer(IBlockSearchableText)\n-    @adapter(IBlocks, IBrowserRequest)\n-    class ImageSearchableText(object):\n-        def __init__(self, context, request):\n-            self.context = context\n-            self.request = request\n-\n-        def __call__(self, block_value):\n-            return block_value[\'alt_text\']\n-\n-See ``plone.restapi.interfaces.IBlockSearchableText`` for details. The ``__call__`` methods needs to return a string, for the text to be indexed.\n-\n-This adapter needs to be registered as a named adapter, where the name is the same as the block type (its ``@type`` property from the block value).\n-\n-..  code-block:: xml\n-\n-    <adapter name="image" factory=".indexers.ImageBlockSearchableText" />\ndiff --git a/docs/source/breadcrumbs.md b/docs/source/breadcrumbs.md\nnew file mode 100644\nindex 000000000..ec32483de\n--- /dev/null\n+++ b/docs/source/breadcrumbs.md\n@@ -0,0 +1,16 @@\n+(breadcrumbs)=\n+\n+# Breadcrumbs\n+\n+Get the breadcrumbs for the current page:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/breadcrumbs.req\n+```\n+\n+Example response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/breadcrumbs.resp\n+:language: http\n+```\ndiff --git a/docs/source/breadcrumbs.rst b/docs/source/breadcrumbs.rst\ndeleted file mode 100644\nindex 36261da35..000000000\n--- a/docs/source/breadcrumbs.rst\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-.. _breadcrumbs:\n-\n-Breadcrumbs\n-===========\n-\n-Getting the breadcrumbs for the current page:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/breadcrumbs.req\n-\n-Example response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/breadcrumbs.resp\n-   :language: http\ndiff --git a/docs/source/comments.md b/docs/source/comments.md\nnew file mode 100644\nindex 000000000..09b0da0d4\n--- /dev/null\n+++ b/docs/source/comments.md\n@@ -0,0 +1,121 @@\n+# Comments\n+\n+Plone offers to users a feature to post comments on any content object with `plone.app.discussion`.\n+\n+Commenting can be enabled globally for specific content types and for single content objects.\n+\n+When commenting is enabled on your content object, you can retrieve a list of all existing comments, add new comments, reply to existing comments, or delete a comment.\n+\n+\n+## Listing Comments\n+\n+You can list the existing comment on a content object by sending a `GET` request to the URL of the content object and appending `/@comments`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/comments_get.req\n+```\n+\n+The server will respond with a `Status 200` and a batched list of all comments:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/comments_get.resp\n+:language: http\n+```\n+\n+The following fields are returned.\n+\n+- `@id`: Link to the current endpoint\n+- `items`: a list of comments for the current resource\n+- `items_total`: the total number of comments for the resource\n+- `batching`: batching information\n+\n+The `items` attribute returns a list of comments.\n+Each comment provides the following fields.\n+\n+- `@id`: hyperlink to the comment\n+- `@parent`: (optional) the parent comment\n+- `author_name`: the full name of the author of this comment\n+- `author_username`: the username of the author of this comment\n+- `comment_id`: the comment ID uniquely identifies the comment\n+- `in_reply_to`: the comment ID of the parent comment\n+- `creation_date`: when the comment was placed\n+- `modification_date`: when the comment was last updated\n+- `text`: contains a `mime-type` and `text` attribute with the text of the comment.\n+  Default `mime-type` is `text/plain`.\n+- `user_notification`: boolean value to indicate if the author of the comment requested notifications on replies\n+\n+\n+## Adding a Comment\n+\n+To add a new comment to a content object, send a `POST` request to the URL of the content object and append `/@comments` to the URL.\n+The body of the request needs to contain a JSON structure with a `text` attribute that contains the comment text:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/comments_add_root.req\n+```\n+\n+If the creation of the comment has been successful, the server will respond with a {term}`204 No Content` status and the URL of the newly created comment in the location header:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/comments_add_root.resp\n+:language: http\n+```\n+\n+\n+## Replying to a Comment\n+\n+To add a direct reply to an existing comment, send a `POST` request to the URL of the comment\n+ to which you want to reply.\n+The body of the request needs to contain a JSON structure with a `text` attribute that contains the comment text:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/comments_add_sub.req\n+```\n+\n+If the creation of the comment has been successful, the server will respond with a {term}`204 No Content` status and the URL of the newly created comment in the location header:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/comments_add_sub.resp\n+:language: http\n+```\n+\n+\n+## Updating a Comment\n+\n+```{note}\n+The permission to update a comment is, by default, only granted to the creater (owner role) of the comment.\n+```\n+\n+An existing comment can be updated by sending a `PATCH` request to the URL of the comment.\n+The request body needs to contain a JSON structure with at least a `text` attribute:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/comments_update.req\n+```\n+\n+The server will respond with a {term}`204 No Content` response and a location header with the comment URL when the comment has been updated successfully:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/comments_update.resp\n+:language: http\n+```\n+\n+\n+## Deleting a Comment\n+\n+An existing comment can be deleted by sending a `DELETE` request to the URL of the comment.\n+\n+```{note}\n+Deleting a comment will, by default, also delete all existing replies to that comment.\n+```\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+         :request: ../../src/plone/restapi/tests/http-examples/comments_delete.req\n+```\n+\n+When the comment has been deleted successfully, the server will respond with a {term}`204 No Content` response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/comments_delete.resp\n+:language: http\n+```\ndiff --git a/docs/source/comments.rst b/docs/source/comments.rst\ndeleted file mode 100644\nindex d43c34ae8..000000000\n--- a/docs/source/comments.rst\n+++ /dev/null\n@@ -1,101 +0,0 @@\n-Comments\n-========\n-\n-Plone offers users to post comments on any content object with plone.app.discussion.\n-\n-Commenting can be enabled globally, for specific content types and for single content objects.\n-\n-When commenting is enabled on your content object, you can retrieve a list of all existing comments, add new comments, reply to existing comments or delete a comment.\n-\n-Listing Comments\n-----------------\n-\n-You can list the existing comment on a content object by sending a GET request to the URL of the content object and appending \'/@comments\':\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/comments_get.req\n-\n-The server will respond with a `Status 200` and a batched list of all comments:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/comments_get.resp\n-   :language: http\n-\n-These following fields are returned:\n-\n-- @id: Link to the current endpoint\n-- items: a list of comments for the current resource\n-- items_total: the total number of comments for the resource\n-- batching: batching information\n-\n-The items attribute returns a list of comments, each comment provides the following fields:\n-\n-- @id: hyperlink to the comment\n-- @parent: (optional) the parent comment\n-- author_name: the full name of the author of this comment\n-- author_username: the username of the author of this comment\n-- comment_id: the comment ID uniquely identifies the comment\n-- in_reply_to: the comment ID of the parent comment\n-- creation_date: when the comment was placed\n-- modification_date: when the comment was last updated\n-- text: contains a \'mime-type\' and \'text\' attribute with the text of the comment. Default mime-type is \'text/plain\'.\n-- user_notification: boolean value to indicate if the author of the comment requested notifications on replies\n-\n-\n-Adding a Comment\n-----------------\n-\n-To add a new comment to a content object, send a POST request to the URL of the content object and append \'/@comments\' to the URL. The body of the request needs to contain a JSON structure with a \'text\' attribute that contains the comment text:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/comments_add_root.req\n-\n-If the creation of the comment has been successful, the server will respond with a :term:`204 No Content` status and the URL of the newly created comment in the location header:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/comments_add_root.resp\n-   :language: http\n-\n-\n-Replying to a Comment\n----------------------\n-\n-To add a direct reply to an existing comment, send a POST request to the URL of the comment you want to reply to. The body of the request needs to contain a JSON structure with a \'text\' attribute that contains the comment text:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/comments_add_sub.req\n-\n-If the creation of the comment has been successful, the server will respond with a :term:`204 No Content` status and the URL of the newly created comment in the location header:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/comments_add_sub.resp\n-   :language: http\n-\n-\n-Updating a Comment\n-------------------\n-\n-.. note:: The permission to update a comment is, by default, only granted to the creater (owner role) of the comment.\n-\n-An existing comment can be updated by sending a PATCH request to the URL of the comment. The request body needs to contain a JSON structure with at least a \'text\' attribute:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/comments_update.req\n-\n-The server will respond with a :term:`204 No Content` response and a location header with the comment URL when the comment has been updated successfully:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/comments_update.resp\n-   :language: http\n-\n-\n-Deleting a Comment\n-------------------\n-\n-An existing comment can be deleted by sending a DELETE request to the URL of the comment.\n-\n-.. note:: Deleting a comment will, by default, also delete all existing replies to that comment.\n-\n-..  http:example:: curl httpie python-requests\n-\t :request: ../../src/plone/restapi/tests/http-examples/comments_delete.req\n-\n-When the comment has been deleted successfully, the server will respond with a :term:`204 No Content` response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/comments_delete.resp\n-   :language: http\ndiff --git a/docs/source/conf.py b/docs/source/conf.py\nindex 707ff7023..02ad7b089 100644\n--- a/docs/source/conf.py\n+++ b/docs/source/conf.py\n@@ -43,6 +43,10 @@\n # Add any Sphinx extension module names here, as strings. They can be\n # extensions coming with Sphinx (named "sphinx.ext.*") or your custom ones.\n extensions = [\n+    "myst_parser",\n+    "sphinx.ext.intersphinx",\n+    "sphinx.ext.todo",\n+    "sphinx_copybutton",\n     "sphinxcontrib.httpdomain",\n     "sphinxcontrib.httpexample",\n ]\n@@ -64,10 +68,11 @@ def patch_pygments_to_highlight_jsonschema():\n \n \n # The suffix of source filenames.\n-source_suffix = ".rst"\n-# source_suffix = {\n-#     ".md": "markdown",\n-# }\n+# source_suffix = ".rst"\n+source_suffix = {\n+    ".md": "markdown",\n+    ".rst": "reStructuredText",\n+}\n \n \n # The master toctree document.\n@@ -86,7 +91,7 @@ def patch_pygments_to_highlight_jsonschema():\n # List of patterns, relative to source directory, that match files and\n # directories to ignore when looking for source files.\n # This pattern also affects html_static_path and html_extra_path.\n-exclude_patterns = ["*ideas/*"]\n+# exclude_patterns = ["*ideas/*"]\n \n # The reST default role (used for this markup: `text`) to use for all documents.\n # default_role = None\n@@ -287,9 +292,16 @@ def patch_pygments_to_highlight_jsonschema():\n     "linkify",  # Identify \xe2\x80\x9cbare\xe2\x80\x9d web URLs and add hyperlinks.\n     "colon_fence",  # You can also use ::: delimiters to denote code fences,\\\n                     #  instead of ```.\n+    "substitution",  # https://myst-parser.readthedocs.io/en/latest/syntax/optional.html#substitutions-with-jinja2\n ]\n \n-\n+myst_substitutions = {\n+    "postman_basic_auth": "![](_static/img/postman_basic_auth.png)",\n+    "postman_headers": "![](_static/img/postman_headers.png)",\n+    "postman_request": "![](_static/img/postman_request.png)",\n+    "postman_response": "![](_static/img/postman_response.png)",\n+    "postman_retain_headers": "![](_static/img/postman_retain_headers.png)",\n+}\n # -- Options for LaTeX output --------------------------------------------------\n \n latex_elements = {\ndiff --git a/docs/source/content-negotiation.md b/docs/source/content-negotiation.md\nnew file mode 100644\nindex 000000000..9f7390cd6\n--- /dev/null\n+++ b/docs/source/content-negotiation.md\n@@ -0,0 +1,22 @@\n+# Content Negotiation\n+\n+[Content negotiation](https://datatracker.ietf.org/doc/html/rfc7231#section-5.3) is a mechanism defined in the [HTTP specification](https://datatracker.ietf.org/doc/html/rfc7231) that makes it possible to serve different versions of a document (or more generally, a resource representation) at the same URI, so that user agents can specify which version fit their capabilities the best.\n+\n+The user agent (or the REST consumer) can ask for a specific representation by providing an `Accept` HTTP header that lists acceptable media types (e.g., JSON):\n+\n+```\n+GET /\n+Accept: application/json\n+```\n+\n+The server is then able to supply the version of the resource that best fits the user agent\'s needs.\n+This is reflected in the `Content-Type` header:\n+\n+```\n+HTTP 200 OK\n+Content-Type: application/json\n+\n+{\n+  \'data\': ...\n+}\n+```\ndiff --git a/docs/source/content-negotiation.rst b/docs/source/content-negotiation.rst\ndeleted file mode 100644\nindex ff232074e..000000000\n--- a/docs/source/content-negotiation.rst\n+++ /dev/null\n@@ -1,19 +0,0 @@\n-Content Negotiation\n-===================\n-\n-`Content negotiation <https://datatracker.ietf.org/doc/html/rfc7231#section-5.3>`_ is a mechanism defined in the `HTTP specification <https://datatracker.ietf.org/doc/html/rfc7231>`_ that makes it possible to serve different versions of a document (or more generally, a resource representation) at the same URI, so that user agents can specify which version fit their capabilities the best.\n-\n-The user agent (or the REST consumer) can ask for a specific representation by providing an Accept HTTP header that lists acceptable media types (e.g. JSON)::\n-\n-  GET /\n-  Accept: application/json\n-\n-The server is then able to supply the version of the resource that best fits the user agent\'s needs.\n-This is reflected in the Content-Type header::\n-\n-  HTTP 200 OK\n-  Content-Type: application/json\n-\n-  {\n-    \'data\': ...\n-  }\n\\ No newline at end of file\ndiff --git a/docs/source/content.md b/docs/source/content.md\nnew file mode 100644\nindex 000000000..813171f72\n--- /dev/null\n+++ b/docs/source/content.md\n@@ -0,0 +1,410 @@\n+# Content Manipulation\n+\n+`plone.restapi` does not only expose content objects via a RESTful API.\n+The API consumer can create, read, update, and delete a content object.\n+Those operations can be mapped to the HTTP verbs `POST` (Create), `GET` (Read), `PUT` (Update) and `DELETE` (Delete).\n+\n+Manipulating resources across the network using HTTP as an application protocol is one of core principles of the REST architectural pattern.\n+This allows us to interact with a specific resource in a standardized way.\n+\n+| Verb     | URL                      | Action                                    |\n+| -------- | ------------------------ | ----------------------------------------- |\n+| `POST`   | `/folder`                | Creates a new document within the folder  |\n+| `GET`    | `/folder/\\{document-id}` | Request the current state of the document |\n+| `PATCH`  | `/folder/\\{document-id}` | Update the document details               |\n+| `DELETE` | `/folder/\\{document-id}` | Remove the document                       |\n+\n+\n+## Creating a Resource with `POST`\n+\n+To create a new resource, we send a `POST` request to the resource container.\n+If we want to create a new document within an existing folder, we send a `POST` request to that folder:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/content_post.req\n+```\n+\n+By setting the `Accept` header, we tell the server that we would like to receive the response in the `application/json` representation format.\n+\n+The `Content-Type` header indicates that the body uses the `application/json` format.\n+\n+The request body contains the minimal necessary information needed to create a document (the type and the title).\n+You could set other properties, such as `description`, as well.\n+\n+A special property during content creation is `UID`\n+It requires the user to have the `Manage Portal` permission to set it.\n+Without the permission, the request will fail as `Unauthorized`.\n+\n+\n+### Successful Response (201 Created)\n+\n+If a resource has been created, the server responds with the {term}`201 Created` status code.\n+The `Location` header contains the URL of the newly created resource, and the resource representation is in the payload:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/content_post.resp\n+:language: http\n+```\n+\n+\n+### Unsuccessful Response (400 Bad Request)\n+\n+If the resource could not be created, for instance because the title was missing in the request, the server responds with {term}`400 Bad Request`:\n+\n+```\n+HTTP/1.1 400 Bad Request\n+Content-Type: application/json\n+\n+{\n+  \'message\': \'Required title field is missing\'\n+}\n+```\n+\n+The response body can contain information about why the request failed.\n+\n+\n+### Unsuccessful Response (500 Internal Server Error)\n+\n+If the server can not properly process a request, it responds with {term}`500 Internal Server Error`:\n+\n+```\n+HTTP/1.1 500 Internal Server Error\n+Content-Type: application/json\n+\n+{\n+  \'message\': \'Internal Server Error\'\n+}\n+```\n+\n+The response body can contain additional information, such as an error trace or a link to the documentation.\n+\n+\n+### Possible `POST` Responses\n+\n+Possible server responses for a `POST` request are:\n+\n+- {term}`201 Created` (Resource has been created successfully)\n+- {term}`400 Bad Request` (malformed request to the service)\n+- {term}`500 Internal Server Error` (server fault, can not recover internally)\n+\n+\n+### `POST` Implementation\n+\n+A pseudo-code example of the `POST` implementation on the server:\n+\n+```python\n+try:\n+    order = createOrder()\n+    if order == None:\n+        # Bad Request\n+        response.setStatus(400)\n+    else:\n+        # Created\n+        response.setStatus(201)\n+except:\n+    # Internal Server Error\n+    response.setStatus(500)\n+```\n+\n+```{todo}\n+Link to the real implementation...\n+```\n+\n+\n+## Reading a Resource with `GET`\n+\n+After a successful `POST`, we can access the resource by sending a `GET` request to the resource URL:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/content_get.req\n+```\n+\n+\n+### Successful Response (200 OK)\n+\n+If a resource has been retrieved successfully, the server responds with {term}`200 OK`:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/content_get.resp\n+:language: http\n+```\n+\n+For folderish types, their children are automatically included in the response as `items`.\n+To disable the inclusion, add the `GET` parameter `include_items=false` to the URL.\n+\n+By default, only basic metadata is included.\n+To include additional metadata, you can specify the names of the properties with the `metadata_fields` parameter.\n+See also {ref}`retrieving-additional-metadata`.\n+\n+The following example additionally retrieves the `UID` and `Creator`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/content_get_folder.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/content_get_folder.resp\n+:language: http\n+```\n+\n+```{note}\n+For folderish types, collections or search results, the results will be **batched** if the size of the resultset exceeds the batch size.\n+See {doc}`batching` for more details on how to work with batched results.\n+```\n+\n+\n+### Unsuccessful response (404 Not Found)\n+\n+If a resource cannot be found, the server will respond with {term}`404 Not Found`:\n+\n+```\n+HTTP/1.1 404 Not Found\n+Content-Type: application/json\n+\n+{\n+  \'error\': \'NotFound\'\n+}\n+```\n+\n+\n+### `GET` Implementation\n+\n+A pseudo-code example of the `GET` implementation on the server:\n+\n+```python\n+try:\n+    order = getOrder()\n+    if order == None:\n+        # Not Found\n+        response.setStatus(404)\n+    else:\n+        # OK\n+        response.setStatus(200)\n+except:\n+    # Internal Server Error\n+    response.setStatus(500)\n+```\n+\n+You can find implementation details in the [plone.restapi.services.content.add.FolderPost class](https://github.com/plone/plone.restapi/blob/dde57b88e0f1b5f5e9f04e6a21865bc0dde55b1c/src/plone/restapi/services/content/add.py#L35-L61).\n+\n+\n+### `GET` Responses\n+\n+Possible server responses for a `GET` request are:\n+\n+- {term}`200 OK`\n+- {term}`404 Not Found`\n+- {term}`500 Internal Server Error`\n+\n+\n+## Updating a Resource with `PATCH`\n+\n+To update an existing resource, we send a `PATCH` request to the server.\n+`PATCH` allows providing just a subset of the resource, such as the values you actually want to change.\n+\n+If you send the value `null` for a field, the field\'s content will be deleted, and the `missing_value` defined for the field in the schema will be set.\n+Note that this is not possible if the field is `required`, and it only works for Dexterity types, not Archetypes:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/content_patch.req\n+```\n+\n+\n+### Successful Response (204 No Content)\n+\n+A successful response to a `PATCH` request will be indicated by a {term}`204 No Content` response by default:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/content_patch.resp\n+:language: http\n+```\n+\n+\n+### Successful Response (200 OK)\n+\n+You can get the object representation by adding a `Prefer` header with a value of `return=representation` to the `PATCH` request.\n+In this case, the response will be a {term}`200 OK`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/content_patch_representation.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/content_patch_representation.resp\n+:language: http\n+```\n+\n+See the full specifications in [RFC 5789: `PATCH` Method for HTTP](https://datatracker.ietf.org/doc/html/rfc5789).\n+\n+\n+## Replacing a Resource with `PUT`\n+\n+```{note}\n+`PUT` is not implemented yet.\n+```\n+\n+To replace an existing resource, we send a `PUT` request to the server:\n+\n+```{todo}\n+Add example.\n+```\n+\n+In accordance with the HTTP specification, a successful `PUT` will not create a new resource or produce a new URL.\n+\n+`PUT` expects the entire resource representation to be supplied to the server, rather than just changes to the resource state.\n+This is usually not a problem since the consumer application requested the resource representation before a `PUT` anyways.\n+\n+When the `PUT` request is accepted and processed by the service, the consumer will receive a {term}`204 No Content` response ({term}`200 OK` would be a valid alternative).\n+\n+\n+### Successful Update (204 No Content)\n+\n+When a resource has been updated successfully, the server sends a {term}`204 No Content` response:\n+\n+```{todo}\n+Add example.\n+```\n+\n+\n+### Unsuccessful Update (409 Conflict)\n+\n+Sometimes requests fail due to incompatible changes.\n+The response body includes additional information about the problem:\n+\n+```{todo}\n+Add example.\n+```\n+\n+\n+### `PUT` Implementation\n+\n+A pseudo-code example of the `PUT` implementation on the server:\n+\n+```python\n+try:\n+    order = getOrder()\n+    if order:\n+        try:\n+            saveOrder()\n+        except conflict:\n+            response.setStatus(409)\n+        # OK\n+        response.setStatus(200)\n+    else:\n+        # Not Found\n+        response.setStatus(404)\n+except:\n+    # Internal Server Error\n+    response.setStatus(500)\n+```\n+\n+```{todo}\n+Link to the real implementation...\n+```\n+\n+\n+\n+### `PUT` Responses\n+\n+Possible server responses for a `PUT` request are:\n+\n+- {term}`200 OK`\n+- {term}`404 Not Found`\n+- {term}`409 Conflict`\n+- {term}`500 Internal Server Error`\n+\n+\n+### `POST` vs. `PUT`\n+\n+Using `POST` or `PUT` depend on the desired outcome.\n+\n+- Use `POST` to create a resource identified by a service-generated URI.\n+- Use `POST` to append a resource to a collection identified by a service-generated URI.\n+- Use `PUT` to overwrite a resource.\n+\n+This follows [RFC 7231: HTTP 1.1: `PUT` Method](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.4).\n+\n+\n+## Removing a Resource with `DELETE`\n+\n+We can delete an existing resource by sending a `DELETE` request:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/content_delete.req\n+```\n+\n+A successful response will be indicated by a {term}`204 No Content` response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/content_delete.resp\n+:language: http\n+```\n+\n+\n+### `DELETE` Implementation\n+\n+A pseudo-code example of the `DELETE` implementation on the server:\n+\n+```python\n+try:\n+    order = getOrder()\n+    if order:\n+        if can_delete(order):\n+            # No Content\n+            response.setStatus(204)\n+        else:\n+            # Not Allowed\n+            response.setStatus(405)\n+    else:\n+        # Not Found\n+        response.setStatus(404)\n+except:\n+    # Internal Server Error\n+    response.setStatus(500)\n+```\n+\n+```{todo}\n+Link to the real implementation...\n+```\n+\n+\n+\n+### `DELETE` Responses\n+\n+Possible responses to a `DELETE` request are:\n+\n+- {term}`204 No Content`\n+- {term}`404 Not Found` (if the resource does not exist)\n+- {term}`405 Method Not Allowed` (if deleting the resource is not allowed)\n+- {term}`500 Internal Server Error`\n+\n+\n+## Reordering sub resources\n+\n+The resources contained within a resource can be reordered using the `ordering` key with a `PATCH` request on the container.\n+\n+Use the `obj_id` subkey to specify which resource to reorder.\n+The subkey `delta` can be `top`, `bottom`, or a negative or positive integer for moving up or down.\n+\n+Reordering resources within a subset of resources can be done using the `subset_ids` subkey.\n+\n+A response of `400 BadRequest` with a message `Client/server ordering mismatch` will be returned if the value is not in the same order as server side.\n+\n+A response of `400 BadRequest` with a message `Content ordering is not supported by this resource` will be returned if the container does not support ordering:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/content_reorder.req\n+```\n+\n+To rearrange all items in a folderish context, use the `sort` key.\n+\n+The `on` subkey defines the catalog index to be sorted on.\n+The `order` subkey indicates either the `ascending` or `descending` order of items.\n+\n+A response `400 BadRequest` with a message `Content ordering is not supported by this resource` will be returned if the container does not support ordering:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/content_resort.req\n+```\ndiff --git a/docs/source/content.rst b/docs/source/content.rst\ndeleted file mode 100644\nindex c49970336..000000000\n--- a/docs/source/content.rst\n+++ /dev/null\n@@ -1,389 +0,0 @@\n-Content Manipulation\n-====================\n-\n-plone.restapi does not only expose content objects via a RESTful API. The API consumer can create, read, update, and delete a content object. Those operations can be mapped to the HTTP verbs POST (Create), GET (Read), PUT (Update) and DELETE (Delete).\n-\n-Manipulating resources across the network by using HTTP as an application protocol is one of core principles of the REST architectural pattern. This allows us to interact with a specific resource in a standardized way:\n-\n-======= ======================= ==============================================\n-Verb    URL                     Action\n-======= ======================= ==============================================\n-POST    /folder                 Creates a new document within the folder\n-GET     /folder/{document-id}   Request the current state of the document\n-PATCH   /folder/{document-id}   Update the document details\n-DELETE  /folder/{document-id}   Remove the document\n-======= ======================= ==============================================\n-\n-\n-Creating a Resource with POST\n------------------------------\n-\n-To create a new resource, we send a POST request to the resource container.\n-If we want to create a new document within an existing folder, we send a POST request to that folder:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/content_post.req\n-\n-By setting the \'Accept\' header, we tell the server that we would like to receive the response in the \'application/json\' representation format.\n-\n-The \'Content-Type\' header indicates that the body uses the \'application/json\' format.\n-\n-The request body contains the minimal necessary information needed to create a document (the type and the title).\n-You could set other properties, like "description" here as well.\n-\n-A special property during content creation is "UID", as it requires the user to have the *Manage Portal* permission to set it. Without the permission, the request will fail as Unauthorized.\n-\n-\n-Successful Response (201 Created)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-If a resource has been created, the server responds with the :term:`201 Created` status code.\n-The \'Location\' header contains the URL of the newly created resource and the resource representation in the payload:\n-\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_post.resp\n-   :language: http\n-\n-\n-Unsuccessful Response (400 Bad Request)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-If the resource could not be created, for instance because the title was missing in the request, the server responds with :term:`400 Bad Request`::\n-\n-  HTTP/1.1 400 Bad Request\n-  Content-Type: application/json\n-\n-  {\n-    \'message\': \'Required title field is missing\'\n-  }\n-\n-The response body can contain information about why the request failed.\n-\n-\n-Unsuccessful Response (500 Internal Server Error)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-If the server can not properly process a request, it responds with :term:`500 Internal Server Error`::\n-\n-  HTTP/1.1 500 Internal Server Error\n-  Content-Type: application/json\n-\n-  {\n-    \'message\': \'Internal Server Error\'\n-  }\n-\n-The response body can contain further information such as an error trace or a link to the documentation.\n-\n-\n-Possible POST Responses\n-^^^^^^^^^^^^^^^^^^^^^^^\n-\n-Possible server reponses for a POST request are:\n-\n-* :term:`201 Created` (Resource has been created successfully)\n-* :term:`400 Bad Request` (malformed request to the service)\n-* :term:`500 Internal Server Error` (server fault, can not recover internally)\n-\n-\n-POST Implementation\n-^^^^^^^^^^^^^^^^^^^\n-\n-A pseudo-code example of the POST implementation on the server::\n-\n-    try:\n-        order = createOrder()\n-        if order == None:\n-            # Bad Request\n-            response.setStatus(400)\n-        else:\n-            # Created\n-            response.setStatus(201)\n-    except:\n-        # Internal Server Error\n-        response.setStatus(500)\n-\n-TODO: Link to the real implementation...\n-[\n-\n-\n-Reading a Resource with GET\n----------------------------\n-\n-After a successful POST, we can access the resource by sending a GET request to the resource URL:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/content_get.req\n-\n-\n-Successful Response (200 OK)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-If a resource has been retrieved successfully, the server responds with :term:`200 OK`:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_get.resp\n-   :language: http\n-\n-\n-For folderish types, their childrens are automatically included in the response\n-as ``items``. To disable the inclusion, add the GET parameter ``include_items=false``\n-to the URL.\n-\n-By default only basic metadata is included. To include additional metadata,\n-you can specify the names of the properties with the ``metadata_fields`` parameter.\n-See also :ref:`retrieving-additional-metadata`.\n-\n-The following example additionaly retrieves the UID and Creator:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/content_get_folder.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_get_folder.resp\n-   :language: http\n-\n-.. note::\n-        For folderish types, collections or search results, the results will\n-        be **batched** if the size of the resultset exceeds the batch size.\n-        See :doc:`./batching` for more details on how to work with batched\n-        results.\n-\n-Unsuccessful response (404 Not Found)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-If a resource could not be found, the server will respond with :term:`404 Not Found`::\n-\n-  HTTP/1.1 404 Not Found\n-  Content-Type: application/json\n-\n-  {\n-    \'error\': \'NotFound\'\n-  }\n-\n-\n-GET Implementation\n-^^^^^^^^^^^^^^^^^^\n-\n-A pseudo-code example of the GET implementation on the server::\n-\n-    try:\n-        order = getOrder()\n-        if order == None:\n-            # Not Found\n-            response.setStatus(404)\n-        else:\n-            # OK\n-            response.setStatus(200)\n-    except:\n-        # Internal Server Error\n-        response.setStatus(500)\n-\n-You can find implementation details in the `plone.restapi.services.content.add.FolderPost class <https://github.com/plone/plone.restapi/blob/dde57b88e0f1b5f5e9f04e6a21865bc0dde55b1c/src/plone/restapi/services/content/add.py#L35-L61>`_\n-\n-\n-GET Responses\n-^^^^^^^^^^^^^\n-\n-Possible server reponses for a GET request are:\n-\n-* :term:`200 OK`\n-* :term:`404 Not Found`\n-* :term:`500 Internal Server Error`\n-\n-\n-Updating a Resource with PATCH\n-------------------------------\n-\n-To update an existing resource we send a PATCH request to the server.\n-PATCH allows to provide just a subset of the resource\n-(the values you actually want to change).\n-\n-If you send the value ``null`` for a field, the field\'s content will be\n-deleted and the ``missing_value`` defined for the field in the schema\n-will be set. Note that this is not possible if the field is ``required``,\n-and it only works for Dexterity types, not Archetypes:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/content_patch.req\n-\n-\n-Successful Response (204 No Content)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-A successful response to a PATCH request will be indicated by a :term:`204 No Content` response by default:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_patch.resp\n-   :language: http\n-\n-\n-Successful Response (200 OK)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-You can get the object representation by adding a `Prefer` header with a value of `return=representation` to the PATCH request.\n-In this case, the response will be a :term:`200 OK`:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/content_patch_representation.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_patch_representation.resp\n-   :language: http\n-\n-See for full specs the `RFC 5789: PATCH Method for HTTP <https://datatracker.ietf.org/doc/html/rfc5789>`_\n-\n-\n-Replacing a Resource with PUT\n------------------------------\n-\n-.. note::\n-\n-  PUT is not implemented yet.\n-\n-To replace an existing resource we send a PUT request to the server:\n-\n-TODO: Add example.\n-\n-In accordance with the HTTP specification, a successful PUT will not create a new resource or produce a new URL.\n-\n-PUT expects the entire resource representation to be supplied to the server, rather than just changes to the resource state.\n-This is usually not a problem since the consumer application requested the resource representation before a PUT anyways.\n-\n-When the PUT request is accepted and processed by the service, the consumer will receive a :term:`204 No Content` response (:term:`200 OK` would be a valid alternative).\n-\n-\n-Successful Update (204 No Content)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-When a resource has been updated successfully, the server sends a :term:`204 No Content` response:\n-\n-TODO: Add example.\n-\n-\n-Unsuccessful Update (409 Conflict)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-Sometimes requests fail due to incompatible changes.\n-The response body includes additional information about the problem.\n-\n-TODO: Add example.\n-\n-\n-PUT Implementation\n-^^^^^^^^^^^^^^^^^^\n-\n-A pseudo-code example of the PUT implementation on the server::\n-\n-    try:\n-        order = getOrder()\n-        if order:\n-            try:\n-                saveOrder()\n-            except conflict:\n-                response.setStatus(409)\n-            # OK\n-            response.setStatus(200)\n-        else:\n-            # Not Found\n-            response.setStatus(404)\n-    except:\n-        # Internal Server Error\n-        response.setStatus(500)\n-\n-TODO: Link to the real implementation...\n-\n-\n-PUT Responses\n-^^^^^^^^^^^^^\n-\n-Possible server reponses for a PUT request are:\n-\n-* :term:`200 OK`\n-* :term:`404 Not Found`\n-* :term:`409 Conflict`\n-* :term:`500 Internal Server Error`\n-\n-\n-POST vs. PUT\n-^^^^^^^^^^^^\n-\n-Difference between POST and PUT:\n-\n-  * Use POST to create a resource identified by a service-generated URI\n-  * Use POST to append a resource to a collection identified by a service-generated URI\n-  * Use PUT to overwrite a resource\n-\n-This follows `RFC 7231: HTTP 1.1: PUT Method <https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.4>`_.\n-\n-\n-Removing a Resource with DELETE\n--------------------------------\n-\n-We can delete an existing resource by sending a DELETE request:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/content_delete.req\n-\n-A successful response will be indicated by a :term:`204 No Content` response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_delete.resp\n-   :language: http\n-\n-\n-DELETE Implementation\n-^^^^^^^^^^^^^^^^^^^^^\n-\n-A pseudo-code example of the DELETE implementation on the server::\n-\n-    try:\n-        order = getOrder()\n-        if order:\n-            if can_delete(order):\n-                # No Content\n-                response.setStatus(204)\n-            else:\n-                # Not Allowed\n-                response.setStatus(405)\n-        else:\n-            # Not Found\n-            response.setStatus(404)\n-    except:\n-        # Internal Server Error\n-        response.setStatus(500)\n-\n-TODO: Link to the real implementation...\n-\n-\n-DELETE Responses\n-^^^^^^^^^^^^^^^^\n-\n-Possible responses to a delete request are:\n-\n-  * :term:`204 No Content`\n-  * :term:`404 Not Found` (if the resource does not exist)\n-  * :term:`405 Method Not Allowed` (if deleting the resource is not allowed)\n-  * :term:`500 Internal Server Error`\n-\n-\n-Reordering sub resources\n-------------------------\n-The resources contained within a resource can be reordered using the `ordering` key using a PATCH request on the container.\n-\n-Use the `obj_id` subkey to specify which resource to reorder.\n-The subkey `delta` can be \'top\', \'bottom\', or a negative or positive integer for moving up or down.\n-\n-Reordering resources within a subset of resources can be done using the `subset_ids` subkey.\n-\n-A response 400 BadRequest with a message \'Client/server ordering mismatch\' will be returned if the value is not in the same order as serverside.\n-\n-A response 400 BadRequest with a message \'Content ordering is not supported by this resource\' will be returned if the container does not support ordering.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/content_reorder.req\n-\n-To rearrange all items in a folderish context use the `sort` key.\n-\n-The `on` subkey defines the catalog index to be sorted on. The `order` subkey indicates \'ascending\' or \'descending\' order of items.\n-\n-A response 400 BadRequest with a message \'Content ordering is not supported by this resource\' will be returned if the container does not support ordering.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/content_resort.req\n-\n-\ndiff --git a/docs/source/contextnavigation.md b/docs/source/contextnavigation.md\nnew file mode 100644\nindex 000000000..e1089e79b\n--- /dev/null\n+++ b/docs/source/contextnavigation.md\n@@ -0,0 +1,40 @@\n+(contextnavigation)=\n+\n+# Context Navigation\n+\n+\n+## Top-Level Navigation\n+\n+Get the top-level navigation items:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/contextnavigation.req\n+```\n+\n+Example response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/contextnavigation.resp\n+:language: http\n+```\n+\n+The `@contextnavigation` endpoint uses the same semantics as the classic Plone navigation portlet, largely through reusing the same code.\n+Instead of storing the portlet configuration in a portlet assignment storage, you can pass these as\n+parameters to the service or expand the component.\n+\n+You can provide these parameters:\n+\n+- `name` - The title of the navigation tree.\n+- `root_path` - Root node path, can be "frontend path", derived from router\n+- `includeTop` - Bool. Include top nodeschema\n+- `currentFolderOnly` - Bool. Only show the contents of the current folder.\n+- `topLevel` - Int. Start level\n+- `bottomLevel` - Int. Navigation tree depth\n+- `no_icons` - Bool. Suppress Icons\n+- `thumb_scale` - String. Override thumb scale\n+- `no_thumbs` - Bool. Suppress thumbs\n+\n+You should prefix these parameters with `expand.contextnavigation.`\n+A request would look like the following:\n+\n+`http://localhost:55001/plone/?expand.contextnavigation.topLevel=1&expand.contextnavigation.name=Custom+name`\ndiff --git a/docs/source/contextnavigation.rst b/docs/source/contextnavigation.rst\ndeleted file mode 100644\nindex 3e863717f..000000000\n--- a/docs/source/contextnavigation.rst\n+++ /dev/null\n@@ -1,40 +0,0 @@\n-.. _contextnavigation:\n-\n-Context Navigation\n-==================\n-\n-Top-Level Navigation\n---------------------\n-\n-Getting the top navigation items:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/contextnavigation.req\n-\n-Example response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/contextnavigation.resp\n-   :language: http\n-\n-\n-The ``@contextnavigation`` endpoint uses the same semantics as the classic Plone navigation\n-portlet, largely through reusing the same code. Instead of storing the\n-"portlet" configuration in a portlet assignment storage, you can pass these as\n-parameters to the service or expand component.\n-\n-You can provide these parameters:\n-\n-- ``name`` - The title of the navigation tree.\n-- ``root_path`` - Root node path, can be "frontend path", derived from router\n-- ``includeTop`` - Bool, Include top nodeschema\n-- ``currentFolderOnly`` - Bool, Only show the contents of the current folder.\n-- ``topLevel`` - Int, Start level\n-- ``bottomLevel`` - Int, Navigation tree depth\n-- ``no_icons`` - Bool, Suppress Icons\n-- ``thumb_scale`` - String, Override thumb scale\n-- ``no_thumbs`` = Bool, Suppress thumbs\n-\n-You should prefix these parameters with ``expand.contextnavigation.``, so a request\n-would look like:\n-\n-``http://localhost:55001/plone/?expand.contextnavigation.topLevel=1&expand.contextnavigation.name=Custom+name``\ndiff --git a/docs/source/contributing.md b/docs/source/contributing.md\nnew file mode 100644\nindex 000000000..974251637\n--- /dev/null\n+++ b/docs/source/contributing.md\n@@ -0,0 +1,53 @@\n+# Contributing to plone.restapi\n+\n+\n+## Generating documentation examples\n+\n+This documentation includes examples of requests and responses (http, curl, httpie, and python-requests).\n+These examples are generated by the documentation tests in `test_documentation.py`.\n+To generate a new example, add a new test case to `test_documentation.py`, for example `test_documentation_search_fullobjects`, and run the test\n+\n+```shell\n+./bin/test -t test_documentation_search_fullobjects\n+```\n+\n+This generates the request and the response files in `tests/http-examples/`.\n+\n+Include them in the documentation using MyST syntax:\n+\n+````\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/search_fullobjects.req\n+\n+..  literalinclude:: ../../src/plone/restapi/tests/http-examples/search_fullobjects.resp\n+    :language: http\n+```\n+````\n+\n+Build the documentation locally to test the rendering by running `./bin/sphinxbuilder`.\n+Alternatively, you can use Makefile targets:\n+\n+\n+`docs-clean`\n+: Clean current and legacy docs build directories, and Python virtual environment\n+\n+`docs-html`\n+: Build HTML\n+\n+`docs-linkcheck`\n+: Run linkcheck\n+\n+`docs-linkcheckbroken`\n+: Run linkcheck and show only broken links\n+\n+`docs-livehtml`\n+: Rebuild Sphinx documentation on changes, with live-reload in the browser\n+\n+`docs-spellcheck`\n+: Run spellcheck\n+\n+`docs`\n+: Build Docs\n+ \n+Make sure you add and commit the generated files in `http-examples`.\ndiff --git a/docs/source/contributing.rst b/docs/source/contributing.rst\ndeleted file mode 100644\nindex e03d24d86..000000000\n--- a/docs/source/contributing.rst\n+++ /dev/null\n@@ -1,28 +0,0 @@\n-Contributing to plone.restapi\n-=============================\n-\n-Generating documentation examples\n----------------------------------\n-\n-This documentation includes examples of requests and responses (http, curl, httpie and python-requests).\n-These examples are generated by the documentation tests in ``test_documentation.py``.\n-To generate a new example, add a new test case to `test_documentation.py` - for example ``test_documentation_search_fullobjects``, and run the test:\n-\n-``./bin/test -t test_documentation_search_fullobjects``\n-\n-This generates the request and the response files in ``tests/http-examples/``.\n-\n-Include them in the documentation like this:\n-\n-.. code-block:: ReST\n-\n-    ..  http:example:: curl httpie python-requests\n-        :request: ../../src/plone/restapi/tests/http-examples/search_fullobjects.req\n-\n-    .. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_fullobjects.resp\n-       :language: http\n-\n-\n-Build the sphinx docs locally to test the rendering by running ``./bin/sphinxbuilder``.\n-\n-Make sure you add and commit the generated files in ``http-examples``.\ndiff --git a/docs/source/controlpanels.md b/docs/source/controlpanels.md\nnew file mode 100644\nindex 000000000..930ccb917\n--- /dev/null\n+++ b/docs/source/controlpanels.md\n@@ -0,0 +1,191 @@\n+# Control Panels\n+\n+Control panels in Plone allow you to configure the global site setup of a Plone site.\n+The `@controlpanels` endpoint in `plone.restapi` allows you to list all existing control panels in a Plone site, and to retrieve or edit the settings of a specific control panel.\n+\n+Most of the settings in the Plone control panels are based on `plone.registry` since Plone 5.x.\n+Therefore, you can also use the `@registry` endpoint to retrieve or manipulate site settings.\n+The `@controlpanels` endpoint is a more convenient way of accessing the settings, and makes it\n+easier to render control panels on the front-end.\n+\n+```{note}\n+The `@controlpanels` endpoint is currently only implemented for Plone 5.\n+```\n+\n+\n+## Listing Control Panels\n+\n+A list of all existing control panels in the portal can be retrieved by sending a `GET` request to the `@controlpanels` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/controlpanels_get.resp\n+:language: http\n+```\n+\n+The following fields are returned:\n+\n+- `@id`: hypermedia link to the control panel\n+- `title`: the title of the control panel\n+- `group`: the group in which the control panel should appear, for example, `General`, `Content`, `Users`, `Security`, `Advanced`, or `Add-on Configuration`.\n+\n+\n+## Retrieve a single Control Panel\n+\n+To retrieve a single control panel, send a `GET` request to the URL of the control panel:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get_item.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n+:language: http\n+```\n+\n+The following fields are returned:\n+\n+- `@id`: hypermedia link to the control panel\n+- `title`: title of the control panel\n+- `group`: group name of the control panel\n+- `schema`: JSON Schema of the control panel\n+- `data`: current values of the control panel\n+\n+\n+## Updating a Control Panel with `PATCH`\n+\n+To update the settings on a control panel, send a `PATCH` request to control panel resource:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_patch.req\n+```\n+\n+A successful response to a `PATCH` request will be indicated by a {term}`204 No Content` response:\n+\n+```http\n+HTTP/1.1 204 No Content\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/controlpanels_patch.resp\n+:language: http\n+```\n+\n+\n+## Control Panels not based on `plone.registry`\n+\n+Control panels which are not based on `plone.registry` have a custom `@controlpanels/:panel` endpoint implementation.\n+\n+\n+(dexterity-types)=\n+\n+### Dexterity Types\n+\n+`@controlpanels/dexterity-types` is a custom control panel endpoint that will allow you to add, remove, and configure available {ref}`types`.\n+\n+Reading or writing Dexterity content types require the `plone.schemaeditor.ManageSchemata` permission.\n+\n+| Verb     | URL                                         | Action                                    |\n+| -------- | ------------------------------------------- | ----------------------------------------- |\n+| `GET`    | `/@controlpanels/dexterity-types`           | List configurable content types           |\n+| `POST`   | `/@controlpanels/dexterity-types`           | Creates a new content type                |\n+| `GET`    | `/@controlpanels/dexterity-types/{type-id}` | Get the current state of the content type |\n+| `PATCH`  | `/@controlpanels/dexterity-types/{type-id}` | Update the content type details           |\n+| `DELETE` | `/@controlpanels/dexterity-types/{type-id}` | Remove the content type                       |\n+\n+\n+#### Listing Dexterity Content Types\n+\n+To list the available content types, send a `GET` request to `@controlpanels/dexterity-types`\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get_dexterity.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/controlpanels_get_dexterity.resp\n+:language: http\n+```\n+\n+The following fields are returned:\n+\n+- `@id`: hypermedia link to the control panel\n+- `title`: title of the control panel\n+- `group`: group name of the control panel\n+- `schema`: JSON Schema of the control panel\n+- `data`: current values of the control panel\n+- `items`: list of configurable content types\n+\n+\n+#### Creating a new Dexterity Type with `POST`\n+\n+To create a new content type, send a `POST` request to the `/@controlpanels/dexterity-types` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.resp\n+:language: http\n+```\n+\n+\n+#### Reading a Dexterity Type with `GET`\n+\n+After a successful `POST`, access the content type by sending a `GET` request to the endpoint `/@controlpanels/dexterity-types/{type-id}`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.resp\n+:language: http\n+```\n+\n+\n+#### Updating a Dexterity Type with `PATCH`\n+\n+To update an existing content type, send a `PATCH` request to the server.\n+`PATCH` allows to provide just a subset of the resource, that is, the values you actually want to change:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.resp\n+:language: http\n+```\n+\n+\n+#### Removing a Dexterity Type with `DELETE`\n+\n+Delete an existing content type by sending a `DELETE` request to the URL of an existing content type:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_delete_dexterity_item.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/controlpanels_delete_dexterity_item.resp\n+:language: http\n+```\ndiff --git a/docs/source/controlpanels.rst b/docs/source/controlpanels.rst\ndeleted file mode 100644\nindex aa39fda97..000000000\n--- a/docs/source/controlpanels.rst\n+++ /dev/null\n@@ -1,182 +0,0 @@\n-Control Panels\n-==============\n-\n-Control panels in Plone allow you to configure the global site setup of a\n-Plone site. The ``@controlpanels`` endpoint in plone.restapi allows you to list\n-all existing control panels in a Plone site and to retrieve or edit the\n-settings of a specific control panel.\n-\n-Most of the settings in the Plone control panels are based on plone.registry (since Plone 5.x). Therefore you can also use the ``@registry`` endpoint to\n-retrieve or manipulate site settings. The ``@controlpanels`` endpoint just gives\n-developers are more a convenience way of accessing the settings and makes it\n-easier to render control panels on the front-end.\n-\n-\n-.. note:: This is currently only implemented for Plone 5.\n-\n-\n-Listing Control Panels\n-----------------------\n-\n-A list of all existing control panels in the portal can be retrieved by\n-sending a GET request to the ``@controlpanels`` endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_get.resp\n-   :language: http\n-\n-The following fields are returned:\n-\n-- ``@id``: hypermedia link to the control panel\n-- ``title``: the title of the control panel\n-- ``group``: the group where the control panel should show up (e.g. General, Content, Users, Security, Advanced, Add-on Configuration)\n-\n-\n-Retrieve a single Control Panel\n--------------------------------\n-\n-To retrieve a single control panel, send a GET request to the URL of the\n-control panel:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get_item.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n-   :language: http\n-\n-\n-The following fields are returned:\n-\n-- ``@id``: hypermedia link to the control panel\n-- ``title``: title of the control panel\n-- ``group``: group name of the control panel\n-- ``schema``: JSON Schema of the control panel\n-- ``data``: current values of the control panel\n-\n-\n-Updating a Control Panel with PATCH\n------------------------------------\n-\n-To update the settings on a control panel send a PATCH request to control panel\n-resource:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_patch.req\n-\n-A successful response to a PATCH request will be indicated by a :term:`204 No Content` response:\n-\n-  HTTP/1.1 204 No Content\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_patch.resp\n-   :language: http\n-\n-\n-Control Panels not based on plone.registry\n-------------------------------------------\n-\n-Control panel which are not based on plone.registry have a custom ``@controlpanels/:panel`` endpoint implementation.\n-\n-.. _dexterity-types:\n-\n-Dexterity Types\n-^^^^^^^^^^^^^^^\n-\n-``@controlpanels/dexterity-types`` is a custom control panel endpoint, that will allow you to add, remove and configure available :ref:`types`\n-\n-Reading or writing Dexterity Content Types require the ``plone.schemaeditor.ManageSchemata`` permission.\n-\n-======= =============================================== ==============================================\n-Verb    URL                                             Action\n-======= =============================================== ==============================================\n-GET     ``/@controlpanels/dexterity-types``             List configurable content-types\n-POST    ``/@controlpanels/dexterity-types``             Creates a new content-type\n-GET     ``/@controlpanels/dexterity-types/{type-id}``   Get the current state of the content-type\n-PATCH   ``/@controlpanels/dexterity-types/{type-id}``   Update the content-type details\n-DELETE  ``/@controlpanels/dexterity-types/{type-id}``   Remove content-type\n-======= =============================================== ==============================================\n-\n-\n-Listing Dexterity Content Types\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-To list the available content-types send a GET request to ``@controlpanels/dexterity-types``\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get_dexterity.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_get_dexterity.resp\n-   :language: http\n-\n-The following fields are returned:\n-\n-- ``@id``: hypermedia link to the control panel\n-- ``title``: title of the control panel\n-- ``group``: group name of the control panel\n-- ``schema``: JSON Schema of the control panel\n-- ``data``: current values of the control panel\n-- ``items``: list of configurable content-types.\n-\n-\n-Creating a new Dexterity Type with POST\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-To create a new content-type, send a POST request to the ``/@controlpanels/dexterity-types`` endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.resp\n-   :language: http\n-\n-\n-Reading a Dexterity Type with GET\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-After a successful POST, access the content-type by sending a GET request to the ``/@controlpanels/dexterity-types/{type-id}``:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.resp\n-   :language: http\n-\n-\n-Updating a Dexterity Type with PATCH\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-To update an existing content-type we send a PATCH request to the server.\n-PATCH allows to provide just a subset of the resource (the values you actually want to change).\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.resp\n-   :language: http\n-\n-\n-Removing a Dexterity Type with DELETE\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-Delete an existing content-type by sending a DELETE request to the URL of an existing content-type:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_delete_dexterity_item.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_delete_dexterity_item.resp\n-   :language: http\ndiff --git a/docs/source/conventions.md b/docs/source/conventions.md\nnew file mode 100644\nindex 000000000..ec83d6399\n--- /dev/null\n+++ b/docs/source/conventions.md\n@@ -0,0 +1,168 @@\n+# Conventions\n+\n+\n+## Naming Convention for REST API Resources and Endpoints\n+\n+\n+### Nouns versus Verbs\n+\n+**Rule:** Use nouns to represent resources.\n+\n+**Do:**\n+\n+```text\n+/my-folder\n+/@registry\n+/@types\n+```\n+\n+**Don\'t:**\n+\n+```text\n+/createFolder\n+/deleteDocument\n+/updateEvent\n+```\n+\n+**Reason:**\n+\n+RESTful URIs should refer to a resource that is a thing (noun) instead of referring to an action (verb).\n+Nouns have properties, whereas verbs do not.\n+The REST architectural principle uses HTTP verbs to interact with resources.\n+\n+There is an exception to that rule.\n+Verbs can be used for specific actions or calculations, for example:\n+\n+```text\n+/login\n+/logout\n+/move-to\n+/reset-password\n+```\n+\n+### Singular versus Plural\n+\n+**Rule:** Use plural resources.\n+\n+**Do:**\n+\n+```text\n+/users\n+/users/21\n+```\n+\n+**Don\'t:**\n+\n+```text\n+/user\n+/user/21\n+```\n+\n+**Reason:**\n+\n+If you use singular for a collection-like resource\xe2\x80\x94such as `/user` to retrieve a list of all users\xe2\x80\x94it feels wrong.\n+Mixing singular and plural is confusing.\n+For example, using `/users` for retrieving users, and `/user/21` to retrieve a single user.\n+\n+\n+### Uppercase versus Lowercase\n+\n+**Rule:** Use lowercase letters in URIs.\n+\n+**Do:**\n+\n+```text\n+https://example.com/my-folder/my-document\n+```\n+\n+**Don\'t:**\n+\n+```text\n+https://example.com/My-Folder/My-Document\n+```\n+\n+**Reason:** RFC 3986 defines URIs as case-sensitive except for the scheme and host components.\n+\n+Those two URIs are equivalent:\n+\n+```text\n+https://example.org/my-folder/my-document\n+HTTPS://EXAMPLE.ORG/my-folder/my-document\n+```\n+\n+While this one is not equivalent to the two URIs above:\n+\n+```text\n+https://example.org/My-Folder/my-document\n+```\n+\n+To avoid confusion we always use lowercase letters in URIs.\n+\n+\n+## Naming Convention for attribute names in URIs\n+\n+**Rule:** Use hyphens (spinal case) to improve readability of URIs.\n+\n+**Do:**\n+\n+```text\n+/users/noam/reset-password\n+```\n+\n+**Don\'t:**\n+\n+```text\n+/users/noam/resetPassword\n+/users/noam/ResetPassword\n+/users/noam/reset_password\n+```\n+\n+**Reason:**\n+\n+Spinal case is easier to read and safer to use than camelCase.\n+URLs are case sensitive (RFC3986).\n+Plone uses spinal case for URL creation.\n+The page title "My page" becomes "my-page".\n+Mixed naming conventions in URLs would be confusing.\n+For example, `/my-folder/@send_url_to_user`, is confusing.\n+[Google recommends spinal-case in URLs](https://developers.google.com/search/docs/advanced/guidelines/url-structure) for better search engine optimization.\n+\n+**Discussion:**\n+\n+<https://github.com/plone/plone.restapi/issues/194>\n+\n+\n+## Naming Convention for attribute names in response body\n+\n+**Rule:** Use snake_case to reflect Python best practices.\n+\n+**Do:**\n+\n+```text\n+{\n+  translation_of: ...\n+}\n+```\n+\n+**Don\'t:**\n+\n+```text\n+{\n+  translationOf: ...,\n+  TranslationOf: ...,\n+}\n+```\n+\n+**Reason:**\n+\n+We map over Python attributes one-to-one whether they are snake case (modern Python and Plone, and Dexterity) or lowerCamelCase (Zope 2, Archetypes).\n+\n+\n+## Versioning\n+\n+Versioning APIs makes a lot of sense for public API services.\n+This is especially true when an API provider needs to ship different versions of the API at the same time.\n+Plone already has a way to version packages.\n+It currently does not make sense for us to expose that information via the API.\n+We will always just ship one version of the API at a time.\n+We are usually in full control over the backend and the frontend.\ndiff --git a/docs/source/conventions.rst b/docs/source/conventions.rst\ndeleted file mode 100644\nindex 1fa1ceb8c..000000000\n--- a/docs/source/conventions.rst\n+++ /dev/null\n@@ -1,146 +0,0 @@\n-Conventions\n-===========\n-\n-Naming Convention for REST API Resources/Endpoints\n---------------------------------------------------\n-\n-Nouns vs Verbs\n-^^^^^^^^^^^^^^\n-\n-Rule: Use nouns to represent resources.\n-\n-Do::\n-\n-  /my-folder\n-  /@registry\n-  /@types\n-\n-Don\'t::\n-\n-  /createFolder\n-  /deleteDocument\n-  /updateEvent\n-\n-Reason:\n-\n-RESTful URI should refer to a resource that is a thing (noun) instead of\n-referring to an action (verb) because nouns have properties as verbs do\n-not. The REST architectural principle uses HTTP verbs to interact with\n-resources.\n-\n-Though, there is an exception to that rule, verbs can be used for\n-specific actions or calculations, .e.g.::\n-\n-  /login\n-  /logout\n-  /move-to\n-  /reset-password\n-\n-\n-Singuar vs Plural\n-^^^^^^^^^^^^^^^^^^\n-\n-Rule: Use plural resources.\n-\n-Do::\n-\n-  /users\n-  /users/21\n-\n-Don\'t::\n-\n-  /user\n-  /user/21\n-\n-Reason:\n-\n-If you use singular for a collection like resource (e.g. "/user" to\n-retrieve a list of all users) it feels wrong. Mixing singular and plural\n-is confusing (e.g. user "/users" for retrieving users and "/user/21" to\n-retrieve a single user).\n-\n-\n-Upper vs. Lowercase\n-^^^^^^^^^^^^^^^^^^^\n-\n-Rule: Use lowercase letters in URIs.\n-\n-Do::\n-\n-  http://example.com/my-folder/my-document\n-\n-Don\'t::\n-\n-  http://example.com/My-Folder/My-Document\n-\n-Reason: RFC 3986 defines URIs as case-sensitive except for the scheme\n-and host components. e.g.\n-\n-Those two URIs are equivalent::\n-\n-    http://example.org/my-folder/my-document\n-    HTTP://EXAMPLE.ORG/my-folder/my-document\n-\n-While this one is not equivalent to the two URIs above::\n-\n-    http://example.org/My-Folder/my-document\n-\n-To avoid confusion we always use lowercase letters in URIs.\n-\n-\n-Naming Convention for attribute names in URIs\n----------------------------------------------\n-\n-Rule: Use hyphens (spinal case) to improve readability of URIs.\n-\n-Do::\n-\n-    /users/noam/reset-password\n-\n-Don\'t::\n-\n-    /users/noam/resetPassword\n-    /users/noam/ResetPassword\n-    /users/noam/reset_password\n-\n-Reason:\n-\n-Spinal case is better to read and safer to use than camelCase (URLs are case sensitive (RFC3986)).\n-Plone uses spinal case for URL creation (title "My page" becomes "my-page") and mixed naming conventions in URLs would be confusing (e.g. "/my-folder/@send_url_to_user").\n-Google recommends spinal-case in URLs for better SEO (https://developers.google.com/search/docs/advanced/guidelines/url-structure).\n-\n-Discussion:\n-\n-https://github.com/plone/plone.restapi/issues/194\n-\n-\n-Naming Convention for attribute names in response body\n-------------------------------------------------------\n-\n-Rule: Use snake_case to reflect Python best practices.\n-\n-Do::\n-\n-    {\n-      translation_of: ...\n-    }\n-\n-Don\'t::\n-\n-    {\n-      translationOf: ...,\n-      TranslationOf: ...,\n-    }\n-\n-Reason:\n-\n-We map over Python attributes 1:1 no matter if they are snake case (modern Python/Plone, Dexterity) of lowerCamelCase (Zope 2, Archetypes).\n-\n-\n-Versioning\n-----------\n-\n-Versioning APIs does make a lot of sense for public API services.\n-Especially if an API provider needs to ship different versions of the API at the same time.\n-Though, Plone already has a way to version packages and it currently does not make sense for us to expose that information via the API.\n-We will always just ship one version of the API at a time and we are usually in full control over the backend and the frontend.\ndiff --git a/docs/source/copymove.md b/docs/source/copymove.md\nnew file mode 100644\nindex 000000000..75e172605\n--- /dev/null\n+++ b/docs/source/copymove.md\n@@ -0,0 +1,51 @@\n+# Copy and Move\n+\n+\n+## Copying an object\n+\n+To copy a content object, send a `POST` request to the `/@copy` endpoint at the destination\'s URL with the source object specified in the request body.\n+The source object can be specified either by URL, path, UID or `intid`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/copy.req\n+```\n+\n+If the copy operation succeeds, the server will respond with status {term}`200 OK`, and return the new and old URL of the copied object:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/copy.resp\n+:language: http\n+```\n+\n+\n+## Moving an object\n+\n+To move a content object, send a `POST` request to the `/@move` endpoint at the destination\'s URL with the source object specified in the request body.\n+The source object can be specified either by URL, path, UID or `intid`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/move.req\n+```\n+\n+If the move operation succeeds, the server will respond with status {term}`200 OK`, and return the new and old URL of the moved object:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/move.resp\n+:language: http\n+```\n+\n+\n+## Copying or moving multiple objects\n+\n+Multiple objects can be moved or copied by giving a list of sources:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/copy_multiple.req\n+```\n+\n+If the operation succeeds, the server will respond with status {term}`200 OK`, and return the new and old URLs for each copied or moved object:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/copy_multiple.resp\n+:language: http\n+```\ndiff --git a/docs/source/copymove.rst b/docs/source/copymove.rst\ndeleted file mode 100644\nindex 9fd128681..000000000\n--- a/docs/source/copymove.rst\n+++ /dev/null\n@@ -1,51 +0,0 @@\n-Copy / Move\n-===========\n-\n-Copying an object\n------------------\n-\n-To copy a content object send a POST request to the ``/@copy`` endpoint at the\n-destinations url with the source object specified in the request body. The source\n-object can be specified either by url, path, UID or intid.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/copy.req\n-\n-If the copy operation succeeds, the server will respond with status 200 (OK) and return\n-the new and old url of the copied object.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/copy.resp\n-   :language: http\n-\n-\n-Moving an object\n-----------------\n-\n-To move a content object send a POST request to the ``/@move`` endpoint at the\n-destinations url with the source object specified in the request body. The source\n-object can be specified either by url, path, UID or intid.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/move.req\n-\n-If the move operation succeeds, the server will respond with status 200 (OK) and return\n-the new and old url of the moved object.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/move.resp\n-   :language: http\n-\n-\n-Copying/moving multiple objects\n--------------------------------\n-\n-Multiple objects can be moved/copied by giving a list of sources.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/copy_multiple.req\n-\n-If the operation succeeds, the server will respond with status 200 (OK) and return\n-the new and old urls for each copied/moved object.\n-\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/copy_multiple.resp\n-   :language: http\ndiff --git a/docs/source/customization.md b/docs/source/customization.md\nnew file mode 100644\nindex 000000000..6d107a873\n--- /dev/null\n+++ b/docs/source/customization.md\n@@ -0,0 +1,55 @@\n+# Customizing the API\n+\n+\n+## Content serialization\n+\n+\n+### Dexterity fields\n+\n+The API automatically converts all field values to JSON compatible data, whenever possible.\n+However, you might use fields which store data that cannot be automatically converted, or you might want to customize the representation of certain fields.\n+\n+For extending or changing the serialization of certain dexterity fields, you need to register an `IFieldSerializer` adapter.\n+\n+Example:\n+\n+```python\n+from plone.customfield.interfaces import ICustomField\n+from plone.dexterity.interfaces import IDexterityContent\n+from plone.restapi.interfaces import IFieldSerializer\n+from plone.restapi.serializer.converters import json_compatible\n+from plone.restapi.serializer.dxfields import DefaultFieldSerializer\n+from zope.component import adapter\n+from zope.interface import Interface\n+from zope.interface import implementer\n+\n+\n+@adapter(ICustomField, IDexterityContent, Interface)\n+@implementer(IFieldSerializer)\n+class CustomFieldSerializer(DefaultFieldSerializer):\n+\n+    def __call__(self):\n+        value = self.get_value()\n+        if value is not None:\n+            # Do custom serializing here, e.g.:\n+            value = value.output()\n+\n+        return json_compatible(value)\n+```\n+\n+Register the adapter in ZCML:\n+\n+```xml\n+<configure xmlns="http://namespaces.zope.org/zope">\n+\n+    <adapter factory=".serializer.CustomFieldSerializer" />\n+\n+</configure>\n+```\n+\n+The `json_compatible` function recursively converts the value to JSON compatible data, when possible.\n+When a value cannot be converted, a `TypeError` is raised.\n+It is recommended to pass all values through `json_compatible` in order to validate and convert them.\n+\n+For customizing a specific field instance, a named `IFieldSerializer` adapter can be registered.\n+The name may either be the full dotted name of the field, such as `plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation.exclude_from_nav`, or the shortname of the field, such as `exclude_from_nav`.\ndiff --git a/docs/source/customization.rst b/docs/source/customization.rst\ndeleted file mode 100644\nindex a16827f79..000000000\n--- a/docs/source/customization.rst\n+++ /dev/null\n@@ -1,59 +0,0 @@\n-Customizing the API\n-===================\n-\n-Content serialization\n----------------------\n-\n-Dexterity fields\n-^^^^^^^^^^^^^^^^\n-\n-The API automatically converts all field values to JSON compatible data, whenever possible.\n-However, you might use fields which store data that cannot be automatically converted, or you might want to customize the representation of certain fields.\n-\n-For extending or changing the serializing of certain dexterity fields you need to register an ``IFieldSerializer``-adapter.\n-\n-Example:\n-\n-.. code-block:: python\n-\n-    from plone.customfield.interfaces import ICustomField\n-    from plone.dexterity.interfaces import IDexterityContent\n-    from plone.restapi.interfaces import IFieldSerializer\n-    from plone.restapi.serializer.converters import json_compatible\n-    from plone.restapi.serializer.dxfields import DefaultFieldSerializer\n-    from zope.component import adapter\n-    from zope.interface import Interface\n-    from zope.interface import implementer\n-\n-\n-    @adapter(ICustomField, IDexterityContent, Interface)\n-    @implementer(IFieldSerializer)\n-    class CustomFieldSerializer(DefaultFieldSerializer):\n-\n-        def __call__(self):\n-            value = self.get_value()\n-            if value is not None:\n-                # Do custom serializing here, e.g.:\n-                value = value.output()\n-\n-            return json_compatible(value)\n-\n-\n-Register the adapter in ZCML:\n-\n-.. code-block:: xml\n-\n-    <configure xmlns="http://namespaces.zope.org/zope">\n-\n-        <adapter factory=".serializer.CustomFieldSerializer" />\n-\n-    </configure>\n-\n-\n-The ``json_compatible`` function recursively converts the value to JSON compatible data, when possible.\n-When a value cannot be converted, a ``TypeError`` is raised.\n-It is recommended to pass all values through ``json_compatible`` in order to validate and convert them.\n-\n-For customizing a specific field instance, a named ``IFieldSerializer`` adapter can be registered.\n-The name may either be the full dottedname of the field\n-(``plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation.exclude_from_nav``) or the shortname of the field (``exclude_from_nav``).\n\\ No newline at end of file\ndiff --git a/docs/source/database.md b/docs/source/database.md\nnew file mode 100644\nindex 000000000..b63c81d3a\n--- /dev/null\n+++ b/docs/source/database.md\n@@ -0,0 +1,45 @@\n+(database)=\n+\n+# Database\n+\n+The `@database` endpoint exposes system information about the Plone database (ZODB).\n+\n+Send a `GET` request to the `@database` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/database_get.req\n+```\n+\n+The response will contain the database information:\n+\n+```http\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@database",\n+  "cache_detail_length": [\n+    {\n+      "connection": "<Connection at 11238e150>",\n+      "ngsize": 393,\n+      "size": 862\n+    },\n+    {\n+      "connection": "<Connection at 112530c50>",\n+      "ngsize": 46,\n+      "size": 261\n+    }\n+  ],\n+  "cache_length": 439,\n+  "cache_length_bytes": 0,\n+  "cache_size": 400,\n+  "database_size": 230,\n+  "db_name": "FunctionalTest",\n+  "db_size": 92516\n+}\n+```\n+\n+```{note}\n+The system endpoint is protected by the `plone.app.controlpanel.Overview` permission that requires the Site Administrator or Manager role.\n+```\ndiff --git a/docs/source/database.rst b/docs/source/database.rst\ndeleted file mode 100644\nindex b66a29250..000000000\n--- a/docs/source/database.rst\n+++ /dev/null\n@@ -1,40 +0,0 @@\n-.. _database:\n-\n-Database\n-========\n-\n-The `@database` endpoint exposes system information about the Plone database (ZODB).\n-\n-Send a GET request to the `@database` endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/database_get.req\n-\n-The response will contain the database information::\n-\n-  HTTP/1.1 200 OK\n-  Content-Type: application/json\n-\n-  {\n-    "@id": "http://localhost:55001/plone/@database",\n-    "cache_detail_length": [\n-      {\n-        "connection": "<Connection at 11238e150>",\n-        "ngsize": 393,\n-        "size": 862\n-      },\n-      {\n-        "connection": "<Connection at 112530c50>",\n-        "ngsize": 46,\n-        "size": 261\n-      }\n-    ],\n-    "cache_length": 439,\n-    "cache_length_bytes": 0,\n-    "cache_size": 400,\n-    "database_size": 230,\n-    "db_name": "FunctionalTest",\n-    "db_size": 92516\n-  }\n-\n-.. note:: The system endpoint is protected by the ``plone.app.controlpanel.Overview`` permission that requires the site-administrator or manager role.\n\\ No newline at end of file\ndiff --git a/docs/source/email-notification.md b/docs/source/email-notification.md\nnew file mode 100644\nindex 000000000..baee55c19\n--- /dev/null\n+++ b/docs/source/email-notification.md\n@@ -0,0 +1,58 @@\n+# Email Notification\n+\n+\n+## Contact Site Owner (Contact Form)\n+\n+Plone allows the user to contact the site owner via a form on the website.\n+This makes sure the site owner does not have to expose their email addresses publicly.\n+At the same time, it allows the users to reach out to the site owners.\n+\n+To send an email notification to the site owner, send a `POST` request to the `/@email-notification` endpoint that is available on the site root:\n+\n+```\n+POST http://localhost:8080/Plone/@email-notification\n+Accept: application/json\n+Content-Type: application/json\n+\n+{\n+  "name": "John Doe",\n+  "from": "john@doe.com",\n+  "subject": "Hello!",\n+  "message": "Just want to say hi."\n+}\n+```\n+\n+The `from` and `message` fields are required.\n+The `subject` and `name` fields are optional.\n+\n+The server will respond with status {term}`204 No Content` when the email has been sent successfully:\n+\n+```http\n+HTTP/1.1 204 No Content\n+```\n+\n+## Contact Portal Users\n+\n+```{note}\n+This endpoint is NOT implemented yet.\n+```\n+\n+To send an email notification to another user of the portal, send a `POST` request to the `/@email-notification` endpoint on a particular user, for example, the admin user:\n+\n+```\n+POST http://localhost:8080/Plone/@users/admin/@email-notification\n+Accept: application/json\n+Content-Type: application/json\n+\n+{\n+  "name": "John Doe",\n+  "from": "john@doe.com",\n+  "subject": "Hello!",\n+  "message": "Just want to say hi."\n+}\n+```\n+\n+```{note}\n+When using "email as login", we strongly recommend to also enable the "Use UUID user ids" setting in the security control panel to obfuscate the email in the user endpoint URL.\n+Otherwise the `@users` endpoint will expose the email addresses of all your users.\n+```\ndiff --git a/docs/source/email-notification.rst b/docs/source/email-notification.rst\ndeleted file mode 100644\nindex 07848bd3d..000000000\n--- a/docs/source/email-notification.rst\n+++ /dev/null\n@@ -1,48 +0,0 @@\n-Email Notification\n-==================\n-\n-Contact Site Owner aka Contact Form\n------------------------------------\n-\n-Plone allows the user to contact the site owner via a form on the website.\n-This makes sure the site owner does not have to expose their email addresses publicly and at the same time allow the users to reach out to the site owners.\n-\n-To send an email notification to the site owner, send a POST request to the ``/@email-notification`` endpoint that is available on the site root::\n-\n-    POST http://localhost:8080/Plone/@email-notification\n-    Accept: application/json\n-    Content-Type: application/json\n-\n-    {\n-      \'name\': \'John Doe\',\n-      \'from\': \'john@doe.com\',\n-      \'subject\': \'Hello!\',\n-      \'message\': \'Just want to say hi.\'\n-    }\n-\n-The \'from\' and \'message\' fields are required. The \'subject\' and \'name\' fields are optional.\n-\n-The server will respond with status :term:`204 No Content` when the email has been sent successfully::\n-\n-    HTTP/1.1 204 No Content\n-\n-\n-Contact Portal Users\n---------------------\n-\n-.. note:: This endpoint is NOT implemented yet.\n-\n-To send an email notification to another user of the portal, send a POST request to the ``/@email-notification`` endpoint on a particular user (e.g. the admin user)::\n-\n-    POST http://localhost:8080/Plone/@users/admin/@email-notification\n-    Accept: application/json\n-    Content-Type: application/json\n-\n-    {\n-      \'name\': \'John Doe\',\n-      \'from\': \'john@doe.com\',\n-      \'subject\': \'Hello!\',\n-      \'message\': \'Just want to say hi.\'\n-    }\n-\n-.. note:: When using "email as login", we strongly recommend to also enable the "Use UUID user ids" setting in the security control panel, to obfuscate the email in the user endpoint URL. Otherwise the \'@users\' endpoint will expose the email addresses of all your users.\ndiff --git a/docs/source/email-send.md b/docs/source/email-send.md\nnew file mode 100644\nindex 000000000..661a52926\n--- /dev/null\n+++ b/docs/source/email-send.md\n@@ -0,0 +1,31 @@\n+# Email Send\n+\n+\n+## Send Mail to Arbitrary Addresses\n+\n+To send an email to an arbitrary email address, send a `POST` request to the `/@email-send` endpoint that is available on the site root:\n+\n+```\n+POST http://localhost:8080/Plone/@email-send\n+Accept: application/json\n+Content-Type: application/json\n+\n+{\n+  "name": "John Doe",\n+  "from": "john@doe.com",\n+  "to": "jane@doe.com",\n+  "subject": "Hello!",\n+  "message": "Just want to say hi."\n+}\n+```\n+\n+This endpoint is controlled via the `Use mailhost services` permission, the default one in Zope.\n+\n+The `to`, `from`, and `message` fields are required.\n+The `subject` and `name` fields are optional.\n+\n+The server will respond with status {term}`204 No Content` when the email has been sent successfully:\n+\n+```http\n+HTTP/1.1 204 No Content\n+```\ndiff --git a/docs/source/email-send.rst b/docs/source/email-send.rst\ndeleted file mode 100644\nindex a439dd0ea..000000000\n--- a/docs/source/email-send.rst\n+++ /dev/null\n@@ -1,27 +0,0 @@\n-Email Send\n-==========\n-\n-Send Mail to Arbitrary Addresses\n----------------------------------\n-\n-To send an email to an arbitrary e-mail address, send a POST request to the ``/@email-send`` endpoint that is available on the site root::\n-\n-    POST http://localhost:8080/Plone/@email-send\n-    Accept: application/json\n-    Content-Type: application/json\n-\n-    {\n-      \'name\': \'John Doe\',\n-      \'from\': \'john@doe.com\',\n-      \'to\': \'jane@doe.com\',\n-      \'subject\': \'Hello!\',\n-      \'message\': \'Just want to say hi.\'\n-    }\n-\n-This endpoint is controlled via the `Use mailhost services` permission, the default one in Zope.\n-\n-The \'to\', \'from\' and \'message\' fields are required. The \'subject\' and \'name\' fields are optional.\n-\n-The server will respond with status :term:`204 No Content` when the email has been sent successfully::\n-\n-    HTTP/1.1 204 No Content\ndiff --git a/docs/source/expansion.md b/docs/source/expansion.md\nnew file mode 100644\nindex 000000000..74ebe274e\n--- /dev/null\n+++ b/docs/source/expansion.md\n@@ -0,0 +1,85 @@\n+(expansion-label)=\n+\n+# Expansion\n+\n+Expansion is a mechanism in `plone.restapi` to embed additional "components"\xe2\x80\x94such as navigation, breadcrumbs, schema, or workflows\xe2\x80\x94within the main content response.\n+This helps the API consumers avoid unnecessary requests.\n+\n+Say you want to show a document in Plone together with the breadcrumbs and a workflow switcher.\n+Instead of doing three individual requests, you can expand the breadcrumbs and the workflow "components" within the document `GET` request.\n+\n+The list of expandable components is listed in the `@components` attribute in the response of any content `GET` request:\n+\n+```http\n+GET /plone/front-page HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+\n+{\n+  "@id": "http://localhost:55001/plone/front-page",\n+  "@type": "Document",\n+  "@components": [\n+    {\n+      "@id": "http://localhost:55001/plone/front-page/@actions"\n+    },\n+    {\n+      "@id": "http://localhost:55001/plone/front-page/@breadcrumbs"\n+    },\n+    {\n+      "@id": "http://localhost:55001/plone/front-page/@navigation"\n+    },\n+    {\n+      "@id": "http://localhost:55001/plone/front-page/@types"\n+    },\n+    {\n+      "@id": "http://localhost:55001/plone/front-page/@workflow"\n+    },\n+    {\n+      "more components": "..."\n+    }\n+  ],\n+  "UID": "1f699ffa110e45afb1ba502f75f7ec33",\n+  "title": "Welcome to Plone",\n+  "more attributes": "..."\n+}\n+```\n+\n+Request (unexpanded):\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/expansion.req\n+```\n+\n+Response (unexpanded):\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/expansion.resp\n+:language: http\n+```\n+\n+In order to expand and embed one or more components, use the `GET` parameter `expand`, and provide either a single component or a comma-separated list of the components you want to embed.\n+Say you want to expand the `breadcrumbs` component:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/expansion_expanded.req\n+```\n+\n+Response (breadcrumbs expanded):\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/expansion_expanded.resp\n+:language: http\n+```\n+\n+Here is an example of a request that expands all possible expansions:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/expansion_expanded_full.req\n+```\n+\n+And the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n+:language: http\n+```\ndiff --git a/docs/source/expansion.rst b/docs/source/expansion.rst\ndeleted file mode 100644\nindex ac2958d79..000000000\n--- a/docs/source/expansion.rst\n+++ /dev/null\n@@ -1,69 +0,0 @@\n-.. _`expansion name`: \n-\n-Expansion\n-=========\n-\n-Expansion is a mechanism in plone.restapi to embed additional "components",\n-such as navigation, breadcrumbs, schema, or workflow within the main content\n-response. This helps the API consumers to avoid unneccesary request.\n-\n-Say you want to show a document in Plone together with the breadcrumbs and a\n-workflow switcher. Instead of doing three individual requests, you can just\n-expand the breadcrumbs and the workflow "components" within the document GET\n-request.\n-\n-The list of expandable components is listed in the "@components" attribute\n-in the reponse of any content GET request::\n-\n-  GET /plone/front-page HTTP/1.1\n-  Accept: application/json\n-  Authorization: Basic YWRtaW46c2VjcmV0\n-\n-  {\n-    "@id": "http://localhost:55001/plone/front-page",\n-    "@type": "Document",\n-    "@components": [\n-        {"@id": "http://localhost:55001/plone/front-page/@actions"},\n-        {"@id": "http://localhost:55001/plone/front-page/@breadcrumbs"},\n-        {"@id": "http://localhost:55001/plone/front-page/@navigation"},\n-        {"@id": "http://localhost:55001/plone/front-page/@types"},\n-        {"@id": "http://localhost:55001/plone/front-page/@workflow"},\n-        ...\n-    },\n-    "UID": "1f699ffa110e45afb1ba502f75f7ec33",\n-    "title": "Welcome to Plone",\n-    ...\n-  }\n-\n-Request (unexpanded):\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/expansion.req\n-\n-Response (unexpanded):\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/expansion.resp\n-   :language: http\n-\n-In order to expand and embed one or more components, use the ``expand`` GET\n-parameter and provide either a single component or a comma-separated list\n-of the components you want to embed. Say you want to expand the ``breadcrumbs``\n-component:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/expansion_expanded.req\n-\n-Response (breadcrumbs expanded):\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/expansion_expanded.resp\n-   :language: http\n-\n-Here is an exaxmple of a request that expands all possible expansions:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/expansion_expanded_full.req\n-\n-And the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n-   :language: http\ndiff --git a/docs/source/exploring.md b/docs/source/exploring.md\nnew file mode 100644\nindex 000000000..0bf51eaf0\n--- /dev/null\n+++ b/docs/source/exploring.md\n@@ -0,0 +1,83 @@\n+---\n+substitutions:\n+  fawrench: |\n+    ```{raw} html\n+    <span class="fa fa-wrench" style="font-size: 1.6em;"></span>\n+    ```\n+---\n+\n+(exploring-api-postman-onboarding)=\n+\n+# Explore the API using Postman\n+\n+To discover the API interactively, using [Postman] is recommended:\n+\n+```{admonition} Note\n+The Chrome-Extension version of Postman is deprecated and it is recommended to use the native app available instead.\n+```\n+\n+\n+## Configuration\n+\n+To easily follow links returned by request based on the API,\n+\n+- go to the menu under the {{ fawrench }} wrench icon on the top right\n+- choose {guilabel}`Settings`\n+- activate the option {guilabel}`Retain headers on clicking on links` by selecting {guilabel}`ON`:\n+\n+{{ postman_retain_headers }}\n+\n+This option makes sure, once a {term}`HTTP-Header` is configured, that it will be reused during subsequent {term}`requests`, provided these are initiated by clicking on links resulting from the initial {term}`request`.\n+This way navigating the structure using the API becomes a snap.\n+\n+The option {guilabel}`Send anonymous usage data to Postman` should be deactivated by setting to {guilabel}`OFF`.\n+\n+## Usage\n+\n+Choose the suitable {term}`HTTP Verb` to be used for your request. This can be selected using the [Postman] {menuselection}`HTTP Verb -> GET` drop-down menu.\n+\n+Enter the {term}`Object URL` of the object that should be the target of a request into the {guilabel}`URL` field right to the {term}`HTTP Verb`:\n+\n+{{ postman_request }}\n+\n+Now set the appropriate HTTP headers.\n+\n+- the {term}`Authorization Header` for the authentication related to the right user\n+- the {term}`Accept Header` to initiate the right behaviour by the API related to this {term}`Request`.\n+\n+______________________________________________________________________\n+\n+To set the {term}`Authorization Header`, there is a reserved tab that is responsible to generate the final {term}`Header` based on the {term}`authentication method` with username and password.\n+\n+You have to select:\n+\n+- in the drop-down menu {menuselection}`Basic Auth ->` the term {term}`Basic Auth` as the authentication method, and\n+- a valid existing user with appropriate permissions.\n+\n+After providing these parameters you can create the resulting {term}`Authorization Header` and insert it into the prepared request by clicking on {guilabel}`Preview Request`.\n+\n+{{ postman_basic_auth }}\n+\n+______________________________________________________________________\n+\n+Under the {guilabel}`Headers` tab, you now need to insert in the {term}`Accept Header`  `application/json` as well:\n+\n+{{ postman_headers }}\n+\n+The request is now ready, and can be sent by clicking on the {guilabel}`Send` button.\n+\n+The {term}`Response` of the server is now displayed below the {term}`Request`.\n+You can follow the links on the `@id` attributes by clicking on them.\n+For every link [Postman] has prepared, another request sharing the same headers can be sent again by clicking on the {guilabel}`Send` button.\n+\n+{{ postman_response }}\n+\n+```{admonition} Conclusion\n+You can now explore the whole stucture of your application easily via the API using `GET` requests.\n+```\n+\n+(rest-api-onboarding-glossary)=\n+\n+% links\n+\n+[postman]: https://www.postman.com/\ndiff --git a/docs/source/exploring.rst b/docs/source/exploring.rst\ndeleted file mode 100644\nindex 3f4f05ce1..000000000\n--- a/docs/source/exploring.rst\n+++ /dev/null\n@@ -1,88 +0,0 @@\n-.. _exploring-api-postman-onboarding:\n-\n-Explore the API using Postman\n-=============================\n-\n-To discover the API interactively, using Postman_ is recommended.\n-\n-.. admonition:: Note\n-\n-    The Chrome-Extension version of Postman is deprecated and it is recommended to use the native app available instead.\n-\n-Configuration\n--------------\n-\n-To easily follow links returned by request based on the API, \n-\n-* go to the menu under the |fawrench| wrench icon on the top right\n-* choose :guilabel:`Settings` \n-* activate the option :guilabel:`Retain headers on clicking on links` by selecting :guilabel:`ON`:\n-\n-|postman-retain-headers|\n-\n-\n-This option makes sure, once a :term:`HTTP-Header` is configured, it will be reused during following :term:`requests` , if these are initiated by clicking on links resulting from the initial :term:`request`. This way navigating the structure using the API becomes a snap.\n-\n-The option :guilabel:`Send anonymous usage data to Postman` should be deactivated by setting to :guilabel:`OFF`.\n-\n-Usage\n------\n-\n-Choose the suitable :term:`HTTP Verb` to be used for your request. This can be selected using the Postman_ :menuselection:`HTTP Verb -> GET` drop-down menu. \n-\n-Enter the :term:`Object URL` of the object that should be the target of a request into the :guilabel:`URL` field right to the :term:`HTTP Verb`:\n-\n-|postman-request|\n-\n-\n-Now set the appropriate HTTP headers. \n-\n-* The :term:`Authorization Header` for the authentication related to the right user\n-* The :term:`Accept Header` to initiate the right behaviour by the API related to this :term:`Request`.\n-\n-----------\n-\n-To set the :term:`Authorization Header`, there is a reserved tab, that is responsible to generate the final :term:`Header` based on the :term:`authentication method` and username + password.\n-\n-You have to select\n-\n-* in the drop-down menu :menuselection:`Basic Auth ->` the term :term:`Basic Auth` as the authentication method\n-* A valid existing user with appropriate permissions \n-\n-After providing these parameters you can create the resulting :term:`Authorization Header` and insert it into the prepared request by clicking on :guilabel:`Preview Request`.\n-\n-|postman-basic-auth|\n-\n-----------\n-\n-Under the  :guilabel:`Headers` tab you now need to insert in the :term:`Accept Header`  application/json` header as well:\n-\n-|postman-headers|\n-\n-\n-The request is now ready and can be send by clicking on :guilabel:`Send` button.\n-\n-The :term:`Response` of the server is now displayed below the :term:`Request`. You can easily follow the links on the ``@id`` attributes by clicking on them. For every link Postman_ has prepared another request sharing the same headers that can be send again by licking on the  :guilabel:`Send` button.\n-\n-|postman-response|\n-\n-\n-.. admonition:: Conclusion\n-\n-    You can now explore the whole stucture of your application easily via the API using `GET` requests.\n-\n-.. _rest-api-onboarding-glossary:\n-\n-.. links\n-\n-.. _Postman: https://www.postman.com/\n-\n-.. |fawrench| raw:: html\n-\n-    <span class="fa fa-wrench" style="font-size: 1.6em;"></span>\n-\n-.. |postman-retain-headers| image:: ./_static/img/postman_retain_headers.png\n-.. |postman-request| image:: ./_static/img/postman_request.png\n-.. |postman-basic-auth| image:: ./_static/img/postman_basic_auth.png\n-.. |postman-headers| image:: ./_static/img/postman_headers.png\n-.. |postman-response| image:: ./_static/img/postman_response.png\ndiff --git a/docs/source/glossary.md b/docs/source/glossary.md\nnew file mode 100644\nindex 000000000..f99d17af8\n--- /dev/null\n+++ b/docs/source/glossary.md\n@@ -0,0 +1,47 @@\n+# Glossary\n+\n+```{glossary}\n+:sorted: true\n+\n+REST\n+    REST stands for [Representational State Transfer](https://en.wikipedia.org/wiki/Representational_state_transfer). It is a software architectural principle to create loosely coupled web APIs.\n+\n+workflow\n+    A concept in Plone (and other CMS\'s) whereby a content object can be in a number of states (private, public, etcetera) and uses transitions to change between them (e.g. "publish", "approve", "reject", "retract"). See the [Plone docs on Workflow](https://docs.plone.org/working-with-content/collaboration-and-workflow/)\n+\n+HTTP-Request\n+HTTP Request\n+Request\n+Requests\n+    The initial action performed by a web client to communicate with a server. The {term}`Request` is usually followed by a {term}`Response` by the server, either synchronous or asynchronous (which is more complex to handle on the user side)\n+\n+HTTP-Response\n+HTTP Response\n+Response\n+    Answer of or action by the server that is executed or send to the client after the {term}`Request` is processed.\n+\n+HTTP-Header\n+HTTP Header\n+Header\n+    The part of the communication of the client with the server that provides the initialisation of the communication of a {term}`Request`.\n+\n+HTTP-Verb\n+HTTP Verb\n+Verb\n+    One of the basic actions that can be requested to be executed by the server (on an object) based on the {term}`Request`.\n+\n+Object URL\n+    The target object of the {term}`Request`\n+\n+Authorization Header\n+    Part of the {term}`Request` that is responsible for the authentication related to the right user or service to ask for a {term}`Response`.\n+\n+Accept Header\n+    Part of the {term}`Request` that is responsible to define the expected type of data to be accepted by the client in the {term}`Response`.\n+\n+Authentication Method\n+    Access restriction provided by the connection chain to the server exposed to the client.\n+\n+Basic Auth\n+    A simple {term}`Authentication Method` referenced in the {term}`Authorization Header` that needs to be provided by the server.\n+```\ndiff --git a/docs/source/glossary.rst b/docs/source/glossary.rst\ndeleted file mode 100644\nindex 63632da8a..000000000\n--- a/docs/source/glossary.rst\n+++ /dev/null\n@@ -1,48 +0,0 @@\n-Glossary\n-========\n-\n-\n-.. glossary::\n-    :sorted:\n-\n-    REST\n-        REST stands for `Representational State Transfer <https://en.wikipedia.org/wiki/Representational_state_transfer>`_. It is a software architectural principle to create loosely coupled web APIs.\n-\n-    workflow\n-        A concept in Plone (and other CMS\'s) whereby a content object can be in a number of states (private, public, etcetera) and uses transitions to change between them (e.g. "publish", "approve", "reject", "retract"). See the `Plone docs on Workflow <https://docs.plone.org/working-with-content/collaboration-and-workflow/>`_\n-\n-    HTTP-Request\n-    HTTP Request\n-    Request\n-    Requests\n-        The initial action performed by a web client to communicate with a server. The :term:`Request` is usually followed by a :term:`Response` by the server, either synchronous or asynchronous (which is more complex to handle on the user side)\n-\n-    HTTP-Response\n-    HTTP Response\n-    Response\n-        Answer of or action by the server that is executed or send to the client after the :term:`Request` is processed. \n-\n-    HTTP-Header\n-    HTTP Header\n-    Header\n-        The part of the communication of the client with the server that provides the initialisation of the communication of a :Term:`Request`.\n-\n-    HTTP-Verb\n-    HTTP Verb\n-    Verb\n-        One of the basic actions that can be requested to be executed by the server (on an object) based on the :term:`Request`.\n-\n-    Object URL\n-        The target object of the :term:`Request`\n-\n-    Authorization Header\n-        Part of the :term:`Request` that is responsible for the authentication related to the right user or service to ask for a :term:`Response`.\n-\n-    Accept Header\n-        Part of the :term:`Request` that is responsible to define the expected type of data to be accepted by the client in the :term:`Response`.\n-\n-    Authentication Method\n-        Access restriction provided by the connection chain to the server exposed to the client.\n-\n-    Basic Auth\n-        A simple :term:`Authentication Method` referenced in the :term:`Authorization Header` that needs to be provided by the server.\ndiff --git a/docs/source/groups.md b/docs/source/groups.md\nnew file mode 100644\nindex 000000000..d476551c5\n--- /dev/null\n+++ b/docs/source/groups.md\n@@ -0,0 +1,110 @@\n+# Groups\n+\n+Available groups in a Plone site can be created, queried, updated, and deleted by interacting with the `/@groups` endpoint on the portal root.\n+This requires an authenticated user.\n+\n+\n+## List Groups\n+\n+To retrieve a list of all current groups in the portal, call the `/@groups` endpoint with a `GET` request:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/groups.req\n+```\n+\n+The server will respond with a list of all groups in the portal:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/groups.resp\n+:language: http\n+```\n+\n+The endpoint supports some basic filtering:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.req\n+```\n+\n+The server will respond with a list of the filtered groups in the portal where `groupname` starts with the value of the `query` parameter.\n+\n+The endpoint also takes a `limit` parameter.\n+Its default is a maximum of 25 groups at a time for performance reasons:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp\n+:language: http\n+```\n+\n+\n+## Create Group\n+\n+To create a new group, send a `POST` request to the global `/@groups` endpoint with a JSON representation of the group you want to create in the body:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/groups_created.req\n+```\n+\n+```{note}\n+By default, `groupname` is a required field.\n+```\n+\n+If the group has been created successfully, the server will respond with a status {term}`201 Created`. The `Location` header contains the URL of the newly created group, and the resource representation is in the payload:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/groups_created.resp\n+:language: http\n+```\n+\n+\n+## Read Group\n+\n+To retrieve all details for a particular group, send a `GET` request to the `/@groups` endpoint and append the group ID to the URL:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/groups_get.req\n+```\n+\n+The server will respond with a {term}`200 OK` status code and the JSON representation of the group in the body:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/groups_get.resp\n+:language: http\n+```\n+\n+Batching is supported for the `users` object.\n+\n+\n+## Update Group\n+\n+To update the settings of a group, send a `PATCH` request with the group details you want to amend to the URL of that particular group:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/groups_update.req\n+```\n+\n+```{note}\n+The `users` object is a mapping of a `user_id` and a boolean indicating adding or removing from the group.\n+```\n+\n+A successful response to a `PATCH` request will be indicated by a {term}`204 No Content` response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/groups_update.resp\n+:language: http\n+```\n+\n+\n+## Delete Group\n+\n+To delete a group, send a `DELETE` request to the `/@groups` endpoint and append the group id of the group you want to delete:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/groups_delete.req\n+```\n+\n+A successful response will be indicated by a {term}`204 No Content` response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/groups_delete.resp\n+:language: js\n+```\ndiff --git a/docs/source/groups.rst b/docs/source/groups.rst\ndeleted file mode 100644\nindex cf77173c8..000000000\n--- a/docs/source/groups.rst\n+++ /dev/null\n@@ -1,92 +0,0 @@\n-Groups\n-======\n-\n-Available groups in a Plone site can be created, queried, updated and deleted by interacting with the ``/@groups`` endpoint on portal root (requires an authenticated user):\n-\n-List Groups\n------------\n-\n-To retrieve a list of all current groups in the portal, call the ``/@groups`` endpoint with a ``GET`` request:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/groups.req\n-\n-The server will respond with a list of all groups in the portal:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/groups.resp\n-   :language: http\n-\n-The endpoint supports some basic filtering:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.req\n-\n-The server will respond with a list the filtered groups in the portal with groupname starts with the query.\n-\n-The endpoint also takes a ``limit`` parameter that defaults to a maximum of 25 groups at a time for performance reasons.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp\n-   :language: http\n-\n-\n-Create Group\n-------------\n-\n-To create a new group, send a ``POST`` request to the global ``/@groups`` endpoint with a JSON representation of the group you want to create in the body:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/groups_created.req\n-\n-.. note::\n-    By default, "groupname" is a required field.\n-\n-If the group has been created successfully, the server will respond with a status ``201 (Created)``. The ``Location`` header contains the URL of the newly created group and the resource representation in the payload:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/groups_created.resp\n-   :language: http\n-\n-\n-Read Group\n-----------\n-\n-To retrieve all details for a particular group, send a ``GET`` request to the ``/@groups`` endpoint and append the group id to the URL:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/groups_get.req\n-\n-The server will respond with a ``200 OK`` status code and the JSON representation of the group in the body:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/groups_get.resp\n-   :language: http\n-\n-Batching is supported for the \'users\' object.\n-\n-Update Group\n-------------\n-\n-To update the settings of a group, send a ``PATCH`` request with the group details you want to amend to the URL of that particular group:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/groups_update.req\n-\n-.. note::\n-        The \'users\' object is a mapping of a user_id and a boolean indicating adding or removing from the group.\n-\n-A successful response to a PATCH request will be indicated by a :term:`204 No Content` response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/groups_update.resp\n-   :language: http\n-\n-\n-Delete Group\n-------------\n-\n-To delete a group send a ``DELETE`` request to the ``/@groups`` endpoint and append the group id of the group you want to delete:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/groups_delete.req\n-\n-A successful response will be indicated by a :term:`204 No Content` response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/groups_delete.resp\n-   :language: js\ndiff --git a/docs/source/history.md b/docs/source/history.md\nnew file mode 100644\nindex 000000000..721dd9fdd\n--- /dev/null\n+++ b/docs/source/history.md\n@@ -0,0 +1,55 @@\n+# History\n+\n+The `@history` endpoint exposes history and versioning information on previous versions of the content.\n+Each change or workflow change on a content object or file is listed.\n+It also allows to revert to a previous version of the file.\n+\n+\n+## Listing the History of a Content Object\n+\n+Listing versions and history of a resource:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/history_get.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/history_get.resp\n+:language: http\n+```\n+\n+The following fields are returned:\n+\n+- `action`: the workflow transition id, `Edited` for versioning, or `Create` for initial state.\n+- `actor`: the user who performed the action. This contains a subobject with the details.\n+- `comments`: a changenote\n+- `@id`: link to the content endpoint of this specific version.\n+- `may_revert`: true if the user has permission to revert.\n+- `time`: when this action occured in ISO format.\n+- `transition_title`: the workflow transition\'s title, `Edited` for versioning, or `Create` for initial state.\n+- `type`: `workflow` for workflow changes, `versioning` for editing, or `null` for content creation.\n+- `version`: identifier for this specific version of the resource.\n+\n+\n+## Get a Historical Version\n+\n+Older versions of a resource can be retrieved by appending `version` to the `@history` endpoint URL:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/history_get_versioned.req\n+```\n+\n+\n+## Revert to a Historical Version\n+\n+Reverting to an older versions of a resource can be done by sending a `PATCH` request to the `@history` endpoint and appending the version you want to revert to:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/history_revert.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/history_revert.resp\n+:language: http\n+```\ndiff --git a/docs/source/history.rst b/docs/source/history.rst\ndeleted file mode 100644\nindex 97e510471..000000000\n--- a/docs/source/history.rst\n+++ /dev/null\n@@ -1,51 +0,0 @@\n-History\n-=======\n-\n-The @history endpoint exposes history and versioning information on previous\n-versions of the content. Each change or workflow change on a content object or file is listed. It also allows to revert to a previous version of the file.\n-\n-\n-Listing the History of a Content Object\n----------------------------------------\n-\n-Listing versions and history of a resource:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/history_get.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/history_get.resp\n-   :language: http\n-\n-This following fields are returned:\n-\n-- action: the workflow transition id, \'Edited\' for versioning, or \'Create\' for initial state.\n-- actor: the user who performed the action. This contains a subobject with the details.\n-- comments: a changenote\n-- @id: link to the content endpoint of this specific version.\n-- may_revert: true if the user has permission to revert.\n-- time: when this action occured in ISO format.\n-- transition_title: the workflow transition\'s title, \'Edited\' for versioning, or \'Create\' for initial state.\n-- type: \'workflow\' for workflow changes, \'versioning\' for editing, or null for content creation.\n-- version: identifier for this specific version of the resource.\n-\n-\n-Get a Historical Version\n-------------------------\n-\n-Older versions of a resource can be retrieved by appending `version` to the @history endpoint url.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/history_get_versioned.req\n-\n-\n-Revert to a Historical Version\n-------------------------------\n-\n-Reverting to an older versions of a resource can be done by sending a PATCH request to the @history endpoint and appending the version you want to revert\n-to.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/history_revert.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/history_revert.resp\n-   :language: http\ndiff --git a/docs/source/http-status-codes.md b/docs/source/http-status-codes.md\nnew file mode 100644\nindex 000000000..785282506\n--- /dev/null\n+++ b/docs/source/http-status-codes.md\n@@ -0,0 +1,52 @@\n+# HTTP Status Codes\n+\n+This is the list of HTTP status codes that are used in `plone.restapi`.\n+Here is a [full list of all HTTP status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes).\n+\n+```{glossary}\n+:sorted: true\n+\n+2xx Success\n+    This class of status codes indicates the action requested by the client was received, understood, accepted, and processed successfully.\n+\n+200 OK\n+    Standard response for successful HTTP requests.\n+    The actual response will depend on the request method used.\n+    In a `GET` request, the response will contain an entity corresponding to the requested resource.\n+    In a `POST` request, the response will contain an entity describing or containing the result of the action.\n+\n+201 Created\n+    The request has been fulfilled and resulted in a new resource being created.\n+\n+204 No Content\n+    The server successfully processed the request, but is not returning any content.\n+    Usually used as a response to a successful `DELETE` request.\n+\n+4xx Client Error\n+    The `4xx` class of status codes is intended for cases in which the client seems to have errored.\n+\n+400 Bad Request\n+    The server cannot or will not process the request due to something that is perceived to be a client error, such as malformed request syntax, invalid request message framing, or deceptive request routing.\n+\n+401 Unauthorized\n+    Similar to {term}`403 Forbidden`, but specifically for use when authentication is required and has failed or has not yet been provided.\n+    The response must include a `WWW-Authenticate` header field containing a challenge applicable to the requested resource.\n+\n+403 Forbidden\n+    The request was a valid request, but the server is refusing to respond to it.\n+    Unlike a {term}`401 Unauthorized` response, authenticating will make no difference.\n+\n+404 Not Found\n+    The requested resource could not be found but may be available again in the future.\n+    Subsequent requests by the client are permissible.\n+\n+405 Method Not Allowed\n+    A request method is not supported for the requested resource; for example, a `GET` request on a form which requires data to be presented via `POST`, or a `PUT` request on a read-only resource.\n+\n+409 Conflict\n+    Indicates that the request could not be processed because of conflict in the request, such as an edit conflict in the case of multiple updates.\n+\n+5xx Server Error\n+500 Internal Server Error\n+    The server failed to fulfill an apparently valid request.\n+```\ndiff --git a/docs/source/http-status-codes.rst b/docs/source/http-status-codes.rst\ndeleted file mode 100644\nindex 89d5570f0..000000000\n--- a/docs/source/http-status-codes.rst\n+++ /dev/null\n@@ -1,54 +0,0 @@\n-HTTP Status Codes\n-=================\n-\n-This is the list of status codes that are used in plone.restapi. Here is a `full list of all HTTP status codes <https://en.wikipedia.org/wiki/List_of_HTTP_status_codes>`_.\n-\n-\n-.. glossary::\n-    :sorted:\n-\n-    2xx Success\n-        This class of status codes indicates the action requested by the client was received, understood, accepted and processed successfully.\n-\n-    200 OK\n-        Standard response for successful HTTP requests.\n-        The actual response will depend on the request method used.\n-        In a GET request, the response will contain an entity corresponding to the requested resource.\n-        In a POST request, the response will contain an entity describing or containing the result of the action.\n-\n-    201 Created\n-        The request has been fulfilled and resulted in a new resource being created.\n-\n-    204 No Content\n-        The server successfully processed the request, but is not returning any content.\n-        Usually used as a response to a successful delete request.\n-\n-    4xx Client Error\n-        The 4xx class of status code is intended for cases in which the client seems to have errored.\n-\n-    400 Bad Request\n-        The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing)\n-\n-    401 Unauthorized\n-        Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided.\n-        The response must include a WWW-Authenticate header field containing a challenge applicable to the requested resource.\n-\n-    403 Forbidden\n-        The request was a valid request, but the server is refusing to respond to it.\n-        Unlike a 401 Unauthorized response, authenticating will make no difference.\n-\n-    404 Not Found\n-        The requested resource could not be found but may be available again in the future.\n-        Subsequent requests by the client are permissible.\n-\n-    405 Method Not Allowed\n-        A request method is not supported for the requested resource; for example, a GET request on a form which requires data to be presented via POST, or a PUT request on a read-only resource.\n-\n-    409 Conflict\n-        Indicates that the request could not be processed because of conflict in the request, such as an edit conflict in the case of multiple updates.\n-\n-    5xx Server Error\n-        The server failed to fulfill an apparently valid request.\n-\n-    500 Internal Server Error\n-        The server failed to fulfill an apparently valid request.\n\\ No newline at end of file\ndiff --git a/docs/source/i18n.md b/docs/source/i18n.md\nnew file mode 100644\nindex 000000000..6f9e6cbdd\n--- /dev/null\n+++ b/docs/source/i18n.md\n@@ -0,0 +1,77 @@\n+# i18n: internationalization of screen messages\n+\n+Plone already provides user-interface translations using the [`plone.app.locales`](https://pypi.org/project/plone.app.locales/) packages.\n+\n+In `plone.restapi`, we also use those translations where the end user needs to have those translated strings.\n+This way the front-end work is easier.\n+You directly get from the server everything you need, instead of needing to query yet another endpoint to get the translations.\n+\n+To do so, `plone.restapi` relies on Plone\'s language negotiation configuration, and lets Plone do the work of deciding in which language the messages should be shown.\n+\n+For the content of a multilingual site built using [`plone.app.multilingual`](https://pypi.org/project/plone.app.multilingual/), this is an easy task.\n+Plone is configured to display texts in the language of the content object.\n+There is no need to ask anything of the REST API.\n+\n+Nevertheless, when you want to query the Plone Site object of a multilingual site, or any other endpoint in a plain Plone site with multiple languages configured, you need to query the REST API for the language in which you want to have the messages.\n+Otherwise you will get the messages on the default language configured in Plone.\n+\n+To achieve that, the REST API requires the use of the `Accept-Language` HTTP header being passed with the required language code.\n+\n+You will also need to configure Plone to use browser request language negotiation.\n+To do so, you need to go the {guilabel}`Plone Control Panel`.\n+Go to the {guilabel}`Language Control Panel`.\n+Open the {guilabel}`Negotiation` configuration tab, and select the option {guilabel}`Use browser language request negotiation`.\n+\n+Using this option, we can get the translated content type titles:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_types.req\n+```\n+\n+\xe2\x80\xa6and the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/translated_messages_types.resp\n+:language: http\n+```\n+\n+All the field titles and descriptions will also be translated.\n+For instance for the `Folder` content type:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_types_folder.req\n+```\n+\n+\xe2\x80\xa6and the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n+:language: http\n+```\n+\n+In a given object, the workflow state and actions will be translated, too:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_object_workflow.req\n+```\n+\n+\xe2\x80\xa6and the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp\n+:language: http\n+```\n+\n+The same happens in the `@history` endpoint.\n+All the relevant messages will be shown translated:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_object_history.req\n+```\n+\n+\xe2\x80\xa6and the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/translated_messages_object_history.resp\n+:language: http\n+```\ndiff --git a/docs/source/i18n.rst b/docs/source/i18n.rst\ndeleted file mode 100644\nindex ae1fb13c6..000000000\n--- a/docs/source/i18n.rst\n+++ /dev/null\n@@ -1,80 +0,0 @@\n-i18n: internationalization of screen messages\n-=============================================\n-\n-Plone already provides user-interface translations using the `plone.app.locales`_\n-packages.\n-\n-In plone.restapi we also use those translations where the end user needs to have\n-those translated strings, this way the front-end work is easier, because you\n-directly get from the server everything you need, instead of needing to query\n-yet another endpoint to get the translations.\n-\n-To do so, plone.restapi relies on Plone\'s language-negotiation configuration and lets\n-Plone to do the work of deciding the language in which the messages should be shown.\n-\n-For the content of a multilingual site built using `plone.app.multilingual`_ this is\n-an easy task: Plone is configured to show in the language of the content-object, so\n-there is no need to ask anything to the REST API.\n-\n-Nevertheless, when you want to query the Plone Site object of a multilingual site, or\n-any other endpoint in a plain Plone site with multiple languages configured, you need\n-to query the REST API which language do you want to have the messages on, otherwise\n-you will get the messages on the default language configured in Plone.\n-\n-To achieve that, the REST API requires to use the ``Accept-Language`` HTTP header passing\n-as the value the code of the required language.\n-\n-You will also need to configure Plone to use the browser request language negotiation.\n-To do so, you need to go the Plone Control Panel, go to the Language Control Panel,\n-open the Negotiation configuration tab and select "Use browser language request\n-negotiation" option.\n-\n-Using this option we can get the content-type titles translated:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_types.req\n-\n-And the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translated_messages_types.resp\n-   :language: http\n-\n-\n-All the field titles and descriptions, will also be translated. For instance for the Folder\n-content type:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_types_folder.req\n-\n-And the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n-   :language: http\n-\n-\n-In a given object, the workflow state and actions will be translated too:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_object_workflow.req\n-\n-And the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp\n-   :language: http\n-\n-\n-The same happens in the `@history` endpoint, all the relevant messages, will\n-be shown translated:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_object_history.req\n-\n-And the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translated_messages_object_history.resp\n-   :language: http\n-\n-\n-\n-.. _`plone.app.locales`: https://pypi.org/project/plone.app.locales\n-.. _`plone.app.multilingual`: https://pypi.org/project/plone.app.multilingual\ndiff --git a/docs/source/index.md b/docs/source/index.md\nnew file mode 100644\nindex 000000000..5eedd5a33\n--- /dev/null\n+++ b/docs/source/index.md\n@@ -0,0 +1,75 @@\n+% plone.restapi documentation master file, created by\n+% sphinx-quickstart on Mon Apr 28 13:04:12 2014.\n+% You can adapt this file completely to your liking, but it should at least\n+% contain the root `toctree` directive.\n+\n+# REST API\n+\n+A RESTful API for Plone.\n+\n+```{toctree}\n+:caption: Table of Contents\n+:maxdepth: 2\n+\n+introduction\n+authentication\n+exploring\n+content\n+blocks\n+history\n+batching\n+addons\n+comments\n+copymove\n+expansion\n+actions\n+workflow\n+workingcopy\n+locking\n+sharing\n+registry\n+types\n+types-schema\n+users\n+groups\n+principals\n+roles\n+breadcrumbs\n+navigation\n+contextnavigation\n+serialization\n+searching\n+tusupload\n+vocabularies\n+controlpanels\n+tiles\n+querystring\n+querystringsearch\n+customization\n+conventions\n+translations\n+email-send\n+i18n\n+email-notification\n+system\n+database\n+upgrade-guide\n+contributing\n+```\n+\n+```{eval-rst}\n+.. include:: ../../README.rst\n+```\n+\n+\n+## Appendix and Glossary\n+\n+```{toctree}\n+http-status-codes\n+glossary\n+```\n+\n+\n+## Index\n+\n+- {ref}`genindex`\ndiff --git a/docs/source/index.rst b/docs/source/index.rst\ndeleted file mode 100644\nindex b686f3b60..000000000\n--- a/docs/source/index.rst\n+++ /dev/null\n@@ -1,79 +0,0 @@\n-.. plone.restapi documentation master file, created by\n-   sphinx-quickstart on Mon Apr 28 13:04:12 2014.\n-   You can adapt this file completely to your liking, but it should at least\n-   contain the root `toctree` directive.\n-\n-========\n-REST API\n-========\n-\n-A RESTful API for Plone.\n-\n-.. toctree::\n-   :caption: Table of Contents\n-   :hidden:\n-   :maxdepth: 1\n-\n-   introduction\n-\n-.. toctree::\n-   :hidden:\n-   :maxdepth: 2\n-\n-   authentication\n-   exploring\n-   content\n-   blocks\n-   history\n-   batching\n-   addons\n-   comments\n-   copymove\n-   expansion\n-   actions\n-   workflow\n-   workingcopy\n-   locking\n-   sharing\n-   registry\n-   types\n-   types-schema\n-   users\n-   groups\n-   principals\n-   roles\n-   breadcrumbs\n-   navigation\n-   contextnavigation\n-   serialization\n-   searching\n-   tusupload\n-   vocabularies\n-   controlpanels\n-   tiles\n-   querystring\n-   querystringsearch\n-   customization\n-   conventions\n-   translations\n-   email-send\n-   i18n\n-   email-notification\n-   upgrade-guide\n-   contributing\n-   system\n-   database\n-\n-.. include:: ../../README.rst\n-\n-\n-Appendix, Indices and tables\n-----------------------------\n-\n-.. toctree::\n-\n-   http-status-codes\n-   glossary\n-\n-* :ref:`genindex`\n-\ndiff --git a/docs/source/introduction.md b/docs/source/introduction.md\nnew file mode 100644\nindex 000000000..ddc592217\n--- /dev/null\n+++ b/docs/source/introduction.md\n@@ -0,0 +1,65 @@\n+# Introduction\n+\n+```{sidebar} API Browser Quick Guide\n+**It can make your life easier** if you use some kind of **API browser application** to **explore the API** when diving into this documentation.\n+\n+- We recommend to use the free [Postman](https://www.postman.com/) browser plugin.\n+- For easy onboarding take a look at **our {ref}`exploring-api-postman-onboarding` Quick Guide**.\n+```\n+\n+A hypermedia API provides an entry point to the API, which contains hyperlinks the clients can follow.\n+Just like a human user of a regular website, who knows the initial URL of a website and then follows hyperlinks to navigate through the site.\n+This has the advantage that the client only needs to understand how to detect and follow links.\n+The URLs (apart from the initial entry point) and other details of the API can change without breaking the client.\n+\n+The entry point to the Plone RESTful API is the portal root.\n+The client can ask for a {term}`REST` API response by setting the `"Accept"` HTTP header to `"application/json"`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/siteroot.req\n+```\n+\n+This uses so-called "content negotiation":\n+\n+```{toctree}\n+:maxdepth: 1\n+\n+More on Content Negotiation <content-negotiation>\n+```\n+\n+The server will then respond with the portal root in the JSON format:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/siteroot.resp\n+:language: http\n+```\n+\n+`@id` is a unique identifier for resources (IRIs).\n+The `@id` property can be used to navigate through the web API by following the links.\n+\n+`@type` sets the data type of a node or typed value\n+\n+`items` is a list that contains all objects within that resource.\n+\n+A client application can "follow" the links (by calling the @id property) to other resources.\n+This allows to build a losely coupled client that does not break if some of the URLs change, only the entry point of the entire API (in our case the portal root) needs to be known in advance.\n+\n+Another example, this time showing a request and response for a document.\n+Click on the buttons below to show the different syntaxes for the request:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/document.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/document.resp\n+:language: http\n+```\n+\n+And so on, see:\n+\n+```{toctree}\n+:maxdepth: 1\n+\n+Representation of all standard Plone content types <plone-content>\n+```\ndiff --git a/docs/source/introduction.rst b/docs/source/introduction.rst\ndeleted file mode 100644\nindex a7a36bf0b..000000000\n--- a/docs/source/introduction.rst\n+++ /dev/null\n@@ -1,58 +0,0 @@\n-Introduction\n-============\n-\n-.. sidebar:: API Browser Quick Guide\n-    :subtitle: **It can make your life easier** if you use some kind of **API browser application** to **explore the API** when diving into this documentation.\n-\n-    * We recommend to use the free `Postman <https://www.postman.com/>`_ browser plugin.\n-    * For easy onboarding take a look at **our** :ref:`exploring-api-postman-onboarding` **Quick-Guide**.\n-\n-A hypermedia API provides an entry point to the API, which contains hyperlinks the clients can follow.\n-Just like a human user of a regular website, who knows the initial URL of a website and then follows hyperlinks to navigate through the site.\n-This has the advantage that the client only needs to understand how to detect and follow links.\n-The URLs (apart from the inital entry point) and other details of the API can change without breaking the client.\n-\n-The entry point to the Plone RESTful API is the portal root.\n-The client can ask for a :term:`REST` API response by setting the ``\'Accept\'`` HTTP header to ``\'application/json\'``:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/siteroot.req\n-\n-\n-This uses so-called \'content negotiation\'\n-\n-  .. toctree::\n-   :maxdepth: 1\n-\n-    More on Content Negotiation <content-negotiation>\n-\n-The server will then respond with the portal root in the JSON format:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/siteroot.resp\n-   :language: http\n-\n-``@id`` is a unique identifier for resources (IRIs).\n-The ``@id`` property can be used to navigate through the web API by following the links.\n-\n-``@type`` sets the data type of a node or typed value\n-\n-``items`` is a list that contains all objects within that resource.\n-\n-A client application can "follow" the links (by calling the @id property) to other resources.\n-This allows to build a losely coupled client that does not break if some of the URLs change, only the entry point of the entire API (in our case the portal root) needs to be known in advance.\n-\n-Another example, this time showing a request and response for a document.\n-Click on the buttons below to show the different syntaxes for the request.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/document.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/document.resp\n-   :language: http\n-\n-And so on, see\n-\n-  .. toctree::\n-   :maxdepth: 1\n-\n-     Representation of all standard Plone contenttypes<plone-content>\n\\ No newline at end of file\ndiff --git a/docs/source/locking.md b/docs/source/locking.md\nnew file mode 100644\nindex 000000000..e9291f4b8\n--- /dev/null\n+++ b/docs/source/locking.md\n@@ -0,0 +1,130 @@\n+# Locking\n+\n+Locking is a mechanism to prevent users from accidentally overriding each other\'s changes.\n+\n+When a user edits a content object in Plone, the object is locked until the user hits the {guilabel}`Save` or {guilabel}`Cancel` button.\n+If a second user tries to edit the object at the same time, she will see a message that this object is locked.\n+\n+The API consumer can create, read, update, and delete a content-type lock.\n+\n+| Verb     | URL      | Action                                 |\n+| -------- | -------- | -------------------------------------- |\n+| `POST`   | `/@lock` | Lock an object                         |\n+| `GET`    | `/@lock` | Get information about the current lock |\n+| `PATCH`  | `/@lock` | Refresh existing lock                  |\n+| `DELETE` | `/@lock` | Unlock an object                       |\n+\n+\n+## Locking an object\n+\n+To lock an object, send a `POST` request to the `/@lock` endpoint that is available on any content object in Plone:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/lock.req\n+```\n+\n+If the lock operation succeeds, the server will respond with status {term}`200 OK` and return various information about the lock, including the lock token.\n+The token is needed in later requests to update the locked object:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/lock.resp\n+:language: http\n+```\n+\n+By default, locks are stealable.\n+That means that another user can unlock the object.\n+If you want to create a non-stealable lock, pass `"stealable": false` in the request body.\n+\n+To create a lock with a non-default timeout, you can pass the timeout value in seconds in the request body.\n+\n+The following example creates a non-stealable lock with a timeout of one hour:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.req\n+```\n+\n+The server responds with status {term}`200 OK` and returns the lock information:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp\n+:language: http\n+```\n+\n+\n+## Unlocking an object\n+\n+To unlock an object, send a `DELETE` request to the `/@lock` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/unlock.req\n+```\n+\n+The server responds with status {term}`200 OK` and returns the lock information:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/unlock.resp\n+:language: http\n+```\n+\n+To unlock an object locked by another user, send a force `DELETE` request to the `/@lock` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/unlock_force.req\n+```\n+\n+The server responds with status {term}`200 OK` and returns the lock information:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/unlock_force.resp\n+:language: http\n+```\n+\n+```{warning}\n+The `@unlock` endpoint is deprecated and will be removed in `plone.restapi` 9.0.\n+```\n+\n+\n+## Refreshing a lock\n+\n+An existing lock can be refreshed by sending a `PATCH` request to the `@lock` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/refresh_lock.req\n+```\n+\n+The server responds with status {term}`200 OK` and returns the lock information containing the updated creation time:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/refresh_lock.resp\n+:language: http\n+```\n+\n+```{warning}\n+The `@refresh-lock` endpoint is deprecated and will be removed in `plone.restapi` 9.0.\n+```\n+\n+\n+## Getting lock information\n+\n+To find out if an object is locked or to get information about the current lock, you can send a `GET` request to the `@lock` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/lock_get.req\n+```\n+\n+The server responds with status {term}`200 OK` and returns the information about the lock:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/lock_get.resp\n+:language: http\n+```\n+\n+\n+## Updating a locked object\n+\n+To update a locked object with a `PATCH` request, you have to provide the lock token with the `Lock-Token` header:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/lock_update.req\n+```\ndiff --git a/docs/source/locking.rst b/docs/source/locking.rst\ndeleted file mode 100644\nindex 3d1afe464..000000000\n--- a/docs/source/locking.rst\n+++ /dev/null\n@@ -1,117 +0,0 @@\n-Locking\n-=======\n-\n-Locking is a mechanism to prevent users from accidentially overriding each others changes.\n-\n-When a user edits a content object in Plone, the object is locked until the user hits the save or cancel button.\n-If a second user tries to edit the object at the same time, she will see a message that this object is locked.\n-\n-The API consumer can create, read, update, and delete a content-type lock.\n-\n-======= =============================================== =====================================================================\n-Verb    URL                                             Action\n-======= =============================================== =====================================================================\n-POST    ``/@lock``                                      Lock an object\n-GET     ``/@lock``                                      Get information about the current lock\n-PATCH   ``/@lock``                                      Refresh existing lock\n-DELETE  ``/@lock``                                      Unlock an object\n-======= =============================================== =====================================================================\n-\n-\n-Locking an object\n------------------\n-\n-To lock an object send a POST request to the ``/@lock`` endpoint that is available on any content object in Plone:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/lock.req\n-\n-If the lock operation succeeds, the server will respond with status :term:`200 OK` and return various information\n-about the lock including the lock token. The token is needed in later requests to update the locked object.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/lock.resp\n-   :language: http\n-\n-\n-By default, locks are stealable. That means that another user can unlock the object.\n-If you want to create a non-stealable lock, pass ``"stealable": false`` in the request body.\n-\n-To create a lock with a non-default timeout, you can pass the the timeout value in seconds in the request body.\n-\n-The following example creates a non-stealable lock with a timeout of 1h.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.req\n-\n-\n-The server responds with status :term:`200 OK` and returns the lock information.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp\n-   :language: http\n-\n-\n-Unlocking an object\n--------------------\n-\n-To unlock an object send a DELETE request to the ``/@lock`` endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/unlock.req\n-\n-The server responds with status :term:`200 OK` and returns the lock information.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/unlock.resp\n-   :language: http\n-\n-To unlock an object locked by another user send a force DELETE request to the ``/@lock`` endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/unlock_force.req\n-\n-The server responds with status :term:`200 OK` and returns the lock information.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/unlock_force.resp\n-   :language: http\n-\n-.. warning::\n-   The ``@unlock`` endpoint is deprecated and will be removed in plone.restapi 9.0.\n-\n-Refreshing a lock\n------------------\n-\n-An existing lock can be refreshed by sending a PATCH request to the ``@lock`` endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/refresh_lock.req\n-\n-The server responds with status :term:`200 OK` and returns the lock information containing the updated creation time.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/refresh_lock.resp\n-   :language: http\n-\n-.. warning::\n-   The ``@refresh-lock`` endpoint is deprecated and will be removed in plone.restapi 9.0.\n-\n-Getting lock information\n-------------------------\n-\n-To find out if an object is locked or to get information about the current lock\n-you can send a GET request to the ``@lock`` endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/lock_get.req\n-\n-The server responds with status :term:`200 OK` and returns the information about the lock.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/lock_get.resp\n-   :language: http\n-\n-\n-Updating a locked object\n-------------------------\n-\n-To update a locked object with a PATCH request, you have to provide the lock\n-token with the ``Lock-Token`` header.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/lock_update.req\ndiff --git a/docs/source/navigation.md b/docs/source/navigation.md\nnew file mode 100644\nindex 000000000..c96d002e6\n--- /dev/null\n+++ b/docs/source/navigation.md\n@@ -0,0 +1,35 @@\n+(navigation)=\n+\n+# Navigation\n+\n+\n+## Top-Level Navigation\n+\n+Get the top-level navigation items:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/navigation.req\n+```\n+\n+Example response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/navigation.resp\n+:language: http\n+```\n+\n+\n+## Navigation Tree\n+\n+Get the navigation item tree by providing a `expand.navigation.depth` parameter:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/navigation_tree.req\n+```\n+\n+Example response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/navigation_tree.resp\n+:language: http\n+```\ndiff --git a/docs/source/navigation.rst b/docs/source/navigation.rst\ndeleted file mode 100644\nindex 64ed697fb..000000000\n--- a/docs/source/navigation.rst\n+++ /dev/null\n@@ -1,31 +0,0 @@\n-.. _navigation:\n-\n-Navigation\n-==========\n-\n-Top-Level Navigation\n---------------------\n-\n-Getting the top navigation items:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/navigation.req\n-\n-Example response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/navigation.resp\n-   :language: http\n-\n-\n-Navigation Tree\n----------------\n-\n-Getting the navigation item tree providing a `expand.navigation.depth` parameter:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/navigation_tree.req\n-\n-Example response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/navigation_tree.resp\n-   :language: http\ndiff --git a/docs/source/plone-content.md b/docs/source/plone-content.md\nnew file mode 100644\nindex 000000000..24e491caf\n--- /dev/null\n+++ b/docs/source/plone-content.md\n@@ -0,0 +1,139 @@\n+# Plone Content\n+\n+How to get all standard Plone content representations.\n+The syntax is given in various tools.\n+Click on "curl", "http-request" or "python-requests" to see an example for those tools.\n+\n+```{note}\n+For folderish types, collections or search results, the results will be **batched** if the size of the resultset exceeds the batch size.\n+See {doc}`./batching` for more details on how to work with batched results.\n+```\n+\n+\n+## Plone Portal Root\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/siteroot.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/siteroot.resp\n+:language: http\n+```\n+\n+\n+## Plone Folder\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/folder.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/folder.resp\n+:language: http\n+```\n+\n+\n+## Plone Document\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/document.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/document.resp\n+:language: http\n+```\n+\n+\n+## News Item\n+\n+```{note}\n+Here we show `uuid1` as an example uid for all image scales because this documentation is autogenerated by the tests.\n+When running in a real application, these `uuid1` values will be exchanged by proper uuid4 values.\n+```\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/newsitem.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/newsitem.resp\n+:language: http\n+```\n+\n+\n+## Event\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/event.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/event.resp\n+:language: http\n+```\n+\n+\n+## Image\n+\n+```{note}\n+Here we show `uuid1` as an example uid for all image scales because this documentation is autogenerated by the tests.\n+When running in a real application, these `uuid1` values will be exchanged by proper uuid4 values.\n+```\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/image.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/image.resp\n+:language: http\n+```\n+\n+\n+## File\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/file.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/file.resp\n+:language: http\n+```\n+\n+\n+## Link\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/link.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/link.resp\n+:language: http\n+```\n+\n+\n+## Collection\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/collection.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/collection.resp\n+:language: http\n+```\n+\n+You can also get all the data for each of the items in a collection by appending the `?fullobjects` parameter to the query:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/collection_fullobjects.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/collection_fullobjects.resp\n+:language: http\n+```\ndiff --git a/docs/source/plone-content.rst b/docs/source/plone-content.rst\ndeleted file mode 100644\nindex ade916237..000000000\n--- a/docs/source/plone-content.rst\n+++ /dev/null\n@@ -1,122 +0,0 @@\n-Plone Content\n-=============\n-\n-How to get all standard Plone content representations.\n-The syntax is given in various tools, click on \'curl\', \'http-request\' or \'python-requests\' to see examples.\n-\n-.. note::\n-        For folderish types, collections or search results, the results will\n-        be **batched** if the size of the resultset exceeds the batch size.\n-        See :doc:`./batching` for more details on how to work with batched\n-        results.\n-\n-\n-Plone Portal Root:\n-------------------\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/siteroot.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/siteroot.resp\n-   :language: http\n-\n-\n-Plone Folder:\n--------------\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/folder.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/folder.resp\n-   :language: http\n-\n-\n-Plone Document:\n----------------\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/document.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/document.resp\n-   :language: http\n-\n-\n-News Item:\n-----------\n-\n-.. note::\n-    Here we show ``uuid1`` as an example uid for all image scales because this documentation\n-    is autogenerated by the tests. When running in a real application, these ``uuid1``\n-    values will be exchanged by proper uuid4 values.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/newsitem.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/newsitem.resp\n-   :language: http\n-\n-\n-Event:\n-------\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/event.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/event.resp\n-   :language: http\n-\n-\n-Image:\n-------\n-\n-.. note::\n-    Here we show ``uuid1`` as an example uid for all image scales because this documentation\n-    is autogenerated by the tests. When running in a real application, these ``uuid1``\n-    values will be exchanged by proper uuid4 values.\n-\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/image.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/image.resp\n-   :language: http\n-\n-\n-File:\n------\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/file.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/file.resp\n-   :language: http\n-\n-\n-Link:\n------\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/link.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/link.resp\n-   :language: http\n-\n-\n-Collection:\n------------\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/collection.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/collection.resp\n-   :language: http\n-\n-\n-You can also get all the data of each of the items of a collection, appending the `?fullobjects`\n-parameter to the query:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/collection_fullobjects.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/collection_fullobjects.resp\n-   :language: http\ndiff --git a/docs/source/principals.rst b/docs/source/principals.md\nsimilarity index 50%\nrename from docs/source/principals.rst\nrename to docs/source/principals.md\nindex ed3e2e1e3..cf952379d 100644\n--- a/docs/source/principals.rst\n+++ b/docs/source/principals.md\n@@ -1,19 +1,21 @@\n-Principals\n-==========\n+# Principals\n \n-This endpoint will search for all the available principals in the local PAS\n-plugins given a query string. We call a principal to any user or group in the\n-system (requires an authenticated user):\n+This endpoint will search for all the available principals in the local PAS plugins when given a query string.\n+We define a principal as any user or group in the system.\n+This endpoint requires an authenticated user.\n \n-Search Principals\n------------------\n \n-To retrieve a list of principals given a search string, call the ``/@principals`` endpoint with a GET request and a ``search`` query parameter:\n+## Search Principals\n \n+To retrieve a list of principals given a search string, call the `/@principals` endpoint with a `GET` request and a `search` query parameter:\n+\n+```{eval-rst}\n ..  http:example:: curl httpie python-requests\n     :request: ../../src/plone/restapi/tests/http-examples/principals.req\n+```\n \n The server will respond with a list of the users and groups in the portal that match the query string:\n \n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/principals.resp\n-   :language: http\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/principals.resp\n+:language: http\n+```\ndiff --git a/docs/source/querystring.md b/docs/source/querystring.md\nnew file mode 100644\nindex 000000000..174450391\n--- /dev/null\n+++ b/docs/source/querystring.md\n@@ -0,0 +1,32 @@\n+# Querystring\n+\n+The `@querystring` endpoint returns the `querystring` configuration of `plone.app.querystring`.\n+\n+Instead of simply exposing the `querystring` related `field` and `operation` entries from the registry, it serializes them in the same way that `p.a.querystring` does in its `@@querybuilderjsonconfig` view.\n+\n+This form is structured in a more convenient way for frontends to process:\n+\n+- *Vocabularies* will be resolved.\n+  Their values will be inlined in the `values` property.\n+- *Operations* will be inlined as well.\n+  The `operations` property will contain the list of operations as dotted names.\n+  The `operators` property will contain the full definition of each of those operations supported by that field.\n+- Indexes that are flagged as *sortable* are listed in a dedicated top-level property `sortable_indexes`.\n+\n+Available options for the querystring in a Plone site can be queried by interacting with the `/@querystring` endpoint on the portal root:\n+\n+\n+## Querystring Config\n+\n+To retrieve all `querystring` options in the portal, call the `/@querystring` endpoint with a `GET` request:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/querystring_get.req\n+```\n+\n+The server will respond with all `querystring` options in the portal:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/querystring_get.resp\n+:language: http\n+```\ndiff --git a/docs/source/querystring.rst b/docs/source/querystring.rst\ndeleted file mode 100644\nindex bf6d30982..000000000\n--- a/docs/source/querystring.rst\n+++ /dev/null\n@@ -1,33 +0,0 @@\n-Querystring\n-===========\n-\n-The ``@querystring`` endpoint returns the querystring config of ``plone.app.querystring``.\n-\n-Instead of simply exposing the querystring related ``field`` and ``operation``\n-entries from the registry, it serializes them the same way the\n-``@@querybuilderjsonconfig`` view from p.a.querystring does.\n-\n-This form is structured in a more conventient way for frontends to process:\n-\n-- **Vocabularies** will be resolved, and their values will be inlined in the\n-  ``values`` property\n-- **Operations** will be inlined as well. The ``operations`` property will contain\n-  the list of operations (dotted names), and the ``operators`` property will\n-  contain the full definition of each of those operations supported by that field.\n-- Indexes that are flagged as **sortable** are listed in a dedicated top-level property\n-  ``sortable_indexes``\n-\n-Available options for the querystring in a Plone site can be queried by interacting with the ``/@querystring`` endpoint on portal root:\n-\n-Querystring Config\n-------------------\n-\n-To retrieve all querystring options in the portal, call the ``/@querystring`` endpoint with a ``GET`` request:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/querystring_get.req\n-\n-The server will respond with all querystring options in the portal:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/querystring_get.resp\n-   :language: http\ndiff --git a/docs/source/querystringsearch.md b/docs/source/querystringsearch.md\nnew file mode 100644\nindex 000000000..1079a2a42\n--- /dev/null\n+++ b/docs/source/querystringsearch.md\n@@ -0,0 +1,525 @@\n+# Querystring Search\n+\n+The `@querystring-search` endpoint returns search results that can be filtered on search criteria.\n+\n+Call the `/@querystring-search` endpoint with a `POST` request and a query in the request body:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/querystringsearch_post.req\n+```\n+\n+The server will respond with the results that are filtered based on the query you provided:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/querystringsearch_post.resp\n+:language: http\n+```\n+\n+Parameters the endpoint will accept:\n+\n+- `query` - `plone.app.querystring` query, required\n+- `b_start` - integer, batch start\n+- `b_size` - integer, batch size\n+- `sort_on` - string, field that results will be sorted on\n+- `sort_order` - string, value must be either `ascending` or `descending`\n+- `limit` - integer, limits the number of returned results\n+- `fullobjects` - boolean, if `true` then return the full objects instead of just the summary serialization\n+\n+\n+## Parameters\n+\n+\n+### Batch Start (`b_start`)\n+\n+The `b_start` parameter defines the first item of the batch:\n+\n+```\n+{\n+  "b_start": "5",\n+  "query": [\n+    {\n+      \'i\': \'Title\',\n+      \'o\': \'plone.app.querystring.operation.string.is\',\n+      \'v\': \'Welcome to Plone\',\n+    }\n+  ]\n+}\n+```\n+\n+The `b_size` parameter is optional.\n+The default value is `0`.\n+\n+\n+### Batch Size (b_size)\n+\n+The `b_size` parameter defines the number of elements a single batch returns:\n+\n+```\n+{\n+  "b_size": "5",\n+  "query": [\n+    {\n+      \'i\': \'Title\',\n+      \'o\': \'plone.app.querystring.operation.string.is\',\n+      \'v\': \'Welcome to Plone\',\n+    }\n+  ]\n+}\n+```\n+\n+The parameter is optional.\n+The default value is `25`.\n+\n+\n+### Sort on\n+\n+The `sort_on` parameter defines the field that is used to sort the returned search results:\n+\n+```\n+{\n+  "sort_on": "sortable_title",\n+  "query": [\n+    {\n+      \'i\': \'Title\',\n+      \'o\': \'plone.app.querystring.operation.string.is\',\n+      \'v\': \'Welcome to Plone\',\n+    }\n+  ]\n+}\n+```\n+\n+The `sort_on` parameter is optional.\n+The default value is `None`.\n+\n+\n+### Sort Order\n+\n+The `sort_order` parameter defines the sort order when the `sort_on` field has been set:\n+\n+```\n+{\n+  "sort_on": "sortable_title",\n+  "sort_order": "reverse",\n+  "query": [\n+    {\n+      \'i\': \'Title\',\n+      \'o\': \'plone.app.querystring.operation.string.is\',\n+      \'v\': \'Welcome to Plone\',\n+    }\n+  ]\n+}\n+```\n+\n+The `sort_order` parameter is optional.\n+The default value is `ascending`.\n+\n+The sort_order can be either `ascending` or `descending`.\n+`ascending` means from A to Z for a text field.\n+`reverse` is an alias equivalent to `descending`.\n+\n+\n+### Limit\n+\n+Querystring `query` with a `limit` parameter:\n+\n+```\n+{\n+  "limit": "10",\n+  "query": [\n+    {\n+      \'i\': \'Title\',\n+      \'o\': \'plone.app.querystring.operation.string.is\',\n+      \'v\': \'Welcome to Plone\',\n+    }\n+  ]\n+}\n+```\n+\n+The `limit` parameter is optional.\n+The default value is `1000`.\n+\n+\n+### Query\n+\n+The `query` parameter is a list that contains an arbitrary number of `filters`:\n+\n+```\n+{\n+  "query": [\n+    {\n+      \'i\': \'Title\',\n+      \'o\': \'plone.app.querystring.operation.string.is\',\n+      \'v\': \'Welcome to Plone\',\n+    }\n+  ]\n+}\n+```\n+\n+A `filter` always contains three values:\n+\n+- `\xc3\xac`: The index of the filter (the name of the field to which this filter is applied).\n+- `o`: The operator of the filter. A full list can be found at <https://github.com/plone/plone.app.querystring/blob/master/plone/app/querystring/profiles/default/registry.xml>.\n+- `v`: The value of the filter. This depends highly on the index. For a text index, this is a string. For a date index, this might be a date range.\n+\n+The following types of filters are available:\n+\n+- Metadata filters\n+- Date filters\n+- Text Filters\n+\n+\n+#### Metadata Filters\n+\n+\n+##### Creator\n+\n+The `creator` of the content object.\n+\n+You can either set the currently logged in user:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"Creator",\n+      "o":"plone.app.querystring.operation.string.currentUser",\n+      "v":""\n+    }\n+  ],\n+}\n+```\n+\n+\xe2\x80\xa6or set a username:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"Creator",\n+      "o":"plone.app.querystring.operation.selection.any",\n+      "v":["noam"]\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Shortname\n+\n+`Shortname` is the ID of the object that is shown as the last part of the URL:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"getId",\n+      "o":"plone.app.querystring.operation.string.is",\n+      "v":"hero"\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Location\n+\n+`Location` is the path of the content object on the site.\n+You can either set three kind of paths.\n+\n+The absolute path from the portal root:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"path",\n+      "o":"plone.app.querystring.operation.string.absolutePath",\n+      "v":"/my-content-object"\n+    }\n+  ]\n+}\n+```\n+\n+The relative path from the current object:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"path",\n+      "o":"plone.app.querystring.operation.string.relativePath",\n+      "v":"../my-content-object"\n+    }\n+  ]\n+}\n+```\n+\n+The navigation path:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"path",\n+      "o":"plone.app.querystring.operation.string.path",\n+      "v":"/hero"\n+    }\n+  ]\n+}\n+```\n+\n+The computed path can be stored:\n+\n+```\n+{\n+  "query": [\n+    {\n+      \'i\': \'path\',\n+      \'o\': \'plone.app.querystring.operation.string.path\',\n+      \'v\': \'00000000000000001\',\n+    }\n+  ]\n+}\n+```\n+\n+The path can contain a depth parameter that is separated with `::`:\n+\n+```\n+{\n+  "query": [\n+    {\n+      \'i\': \'path\',\n+      \'o\': \'plone.app.querystring.operation.string.path\',\n+      \'v\': \'/my-content-object::2\',\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Type\n+\n+Filter by portal type:\n+\n+```\n+{\n+  "query": [\n+    {\n+      "i": "portal_type",\n+      "o": "plone.app.querystring.operation.selection.any",\n+      "v": ["Document"],\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Review State\n+\n+Filter results by review state:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"review_state",\n+      "o":"plone.app.querystring.operation.selection.any",\n+      "v":["published"]\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Show Inactive\n+\n+Show inactive will return content objects that is expired for a given role:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"show_inactive",\n+      "o":"plone.app.querystring.operation.string.showInactive",\n+      "v":["Owner"]\n+    }\n+  ]\n+}\n+```\n+\n+\n+#### Text Filters\n+\n+\n+##### Description\n+\n+Filter content that contains a term in the Description field:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"Description",\n+      "o":"plone.app.querystring.operation.string.contains",\n+      "v":"Noam"\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Searchable Text\n+\n+Filter content that contains a term in the SearchableText (all searchable fields in the catalog):\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"SearchableText",\n+      "o":"plone.app.querystring.operation.string.contains",\n+      "v":"Noam"\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Tag\n+\n+Filter by a tag (subjects field):\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"Subject",\n+      "o":"plone.app.querystring.operation.selection.any",\n+      "v":["Astrophysics"]\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Title\n+\n+Filter by exact Title match:\n+\n+```\n+"query": [\n+  {\n+    \'i\': \'Title\',\n+    \'o\': \'plone.app.querystring.operation.string.is\',\n+    \'v\': \'Welcome to Plone\',\n+  }\n+]\n+```\n+\n+\n+#### Date Filters\n+\n+\n+##### Creation Date\n+\n+Filter by creation date:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i": "created",\n+      "o": "plone.app.querystring.operation.date.lessThan",\n+      "v": "2021-11-11"\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Effective Date\n+\n+Filter by effective date:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i": "effective",\n+      "o": "plone.app.querystring.operation.date.largerThan",\n+      "v": "2021-11-11"\n+      }\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Event end date\n+\n+Filter by event end date:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i": "end",\n+      "o": "plone.app.querystring.operation.date.lessThan",\n+      "v":"2021-11-04"\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Event start date\n+\n+Filter by event start date:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i": "end",\n+      "o": "plone.app.querystring.operation.date.lessThan",\n+      "v":"2021-11-04"\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Expiration date\n+\n+Filter by expiration date:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i": "expires",\n+      "o": "plone.app.querystring.operation.date.largerThan",\n+      "v": "2021-11-11"\n+      }\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Modification date\n+\n+Filter by modification date:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i": "modified",\n+      "o": "plone.app.querystring.operation.date.largerThan",\n+      "v": "2021-11-11"\n+      }\n+    }\n+  ]\n+}\n+```\ndiff --git a/docs/source/querystringsearch.rst b/docs/source/querystringsearch.rst\ndeleted file mode 100644\nindex 48fc97862..000000000\n--- a/docs/source/querystringsearch.rst\n+++ /dev/null\n@@ -1,468 +0,0 @@\n-Querystring Search\n-==================\n-\n-The ``@querystring-search`` endpoint returns search results that can be filtered on search criteria.\n-\n-Call the ``/@querystring-search`` endpoint with a ``POST`` request and a query in the request body:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/querystringsearch_post.req\n-\n-The server will respond with the results that are filtered based on the query you provided:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/querystringsearch_post.resp\n-   :language: http\n-\n-Parameters the endpoint will accept:\n-\n-  - ``query`` (plone.app.querystring query, required)\n-  - ``b_start`` (integer, batch start)\n-  - ``b_size`` (integer, batch size)\n-  - ``sort_on`` (string, field that results will be sorted on)\n-  - ``sort_order`` : ``"ascending"``, ``"descending"`` (string)\n-  - ``limit`` (integer, limits the number of returned results)\n-  - ``fullobjects`` : ``"true"``, ``"false``" (boolean, if true the return the full objects instead of just the summary serialization)\n-\n-Parameters\n-----------\n-\n-Batch Start (b_start)\n-^^^^^^^^^^^^^^^^^^^^^\n-\n-The `b_start` parameter defines the first item of the batch::\n-\n-  {\n-    "b_start": "5",\n-    "query": [\n-      {\n-        \'i\': \'Title\',\n-        \'o\': \'plone.app.querystring.operation.string.is\',\n-        \'v\': \'Welcome to Plone\',\n-      }\n-    ]\n-  }\n-\n-\n-The `b_size` parameter is optional and the default value is `0`.\n-\n-Batch Size (b_size)\n-^^^^^^^^^^^^^^^^^^^\n-\n-The `b_size` parameter defines the number of elements a single batch returns:: \n-\n-  {\n-    "b_size": "5",\n-    "query": [\n-      {\n-        \'i\': \'Title\',\n-        \'o\': \'plone.app.querystring.operation.string.is\',\n-        \'v\': \'Welcome to Plone\',\n-      }\n-    ]\n-  }\n-\n-The parameter is optional. And the default value is `25`.\n-\n-\n-Sort on\n-^^^^^^^\n-\n-The `sort_on` parameter defines the field that is used to sort the returned search results::\n-\n-  {\n-    "sort_on": "sortable_title",\n-    "query": [\n-      {\n-        \'i\': \'Title\',\n-        \'o\': \'plone.app.querystring.operation.string.is\',\n-        \'v\': \'Welcome to Plone\',\n-      }\n-    ]\n-  }\n-\n-The `sort_on` parameter is optional. The default value is `None`.\n-\n-Sort Order\n-^^^^^^^^^^\n-\n-The `sort_order` parameter defines the sort order when the `sort_on` field has been set::\n-\n-  {\n-    "sort_on": "sortable_title",\n-    "sort_order": "reverse",\n-    "query": [\n-      {\n-        \'i\': \'Title\',\n-        \'o\': \'plone.app.querystring.operation.string.is\',\n-        \'v\': \'Welcome to Plone\',\n-      }\n-    ]\n-  }\n-\n-The `sort_order` parameter is optional. The default value is `ascending`.\n-\n-The sort_order can be either \xe2\x80\x98ascending\xe2\x80\x99 or \xe2\x80\x98descending\xe2\x80\x99, where \xe2\x80\x98ascending\xe2\x80\x99 means from A to Z for a text field. \xe2\x80\x98reverse\xe2\x80\x99 is an alias equivalent to \xe2\x80\x98descending\xe2\x80\x99.\n-\n-\n-Limit\n-^^^^^\n-\n-Querystring Query with limit parameter::\n-\n-  {\n-    "limit": "10",\n-    "query": [\n-      {\n-        \'i\': \'Title\',\n-        \'o\': \'plone.app.querystring.operation.string.is\',\n-        \'v\': \'Welcome to Plone\',\n-      }\n-    ]\n-  }\n-\n-The `limit` parameter is optional. The default value is `1000`.\n-\n-\n-Query\n------\n-\n-The `query` parameter is a list that contains an arbitrary number of `filters`::\n-\n-\n-  {\n-    "query": [\n-      {\n-        \'i\': \'Title\',\n-        \'o\': \'plone.app.querystring.operation.string.is\',\n-        \'v\': \'Welcome to Plone\',\n-      }\n-    ]\n-  }\n-\n-A `filter` always contains three values:\n-\n-* `\xc3\xac`: the index of the filter (the name of the field this filter is applied to)\n-* `o`: the operator of the filter (the operator, a full list can be found here: https://github.com/plone/plone.app.querystring/blob/master/plone/app/querystring/profiles/default/registry.xml)\n-* `v`: the value of the filter (this highly depends on the index, for a text index, this is a string, for a date index this might be a date range)\n-\n-The following type of filters are available:\n-\n-* Metadata filters\n-* Date filters\n-* Text Filters\n-\n-Metadata Filters\n-^^^^^^^^^^^^^^^^\n-\n-Creator\n-,,,,,,,\n-\n-The creator of the content object.\n-\n-You can either set the currently logged in user::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"Creator",\n-        "o":"plone.app.querystring.operation.string.currentUser",\n-        "v":""\n-      }\n-    ],\n-  }\n-\n-or set a username::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"Creator",\n-        "o":"plone.app.querystring.operation.selection.any",\n-        "v":["noam"]\n-      }\n-    ]\n-  }\n-\n-Shortname\n-\xc2\xb4\xc2\xb4\xc2\xb4\xc2\xb4\xc2\xb4\xc2\xb4\xc2\xb4\xc2\xb4\xc2\xb4\n-\n-Shortname (the id of the object that is shown as last part of the URL)::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"getId",\n-        "o":"plone.app.querystring.operation.string.is",\n-        "v":"hero"\n-      }\n-    ]\n-  }\n-\n-Location\n-,,,,,,,,\n-\n-Location is the path of the content object on the site. You can either set three kind of paths.\n-\n-The absolute path (from the portal root)::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"path",\n-        "o":"plone.app.querystring.operation.string.absolutePath",\n-        "v":"/my-content-object"\n-      }\n-    ]\n-  }\n-\n-The relative path (relative from the current object)::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"path",\n-        "o":"plone.app.querystring.operation.string.relativePath",\n-        "v":"../my-content-object"\n-      }\n-    ]\n-  }\n-\n-The navigation path::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"path",\n-        "o":"plone.app.querystring.operation.string.path",\n-        "v":"/hero"\n-      }\n-    ]\n-  }\n-\n-The path can be stored computed::\n-\n-  {\n-    "query": [\n-      {\n-        \'i\': \'path\',\n-        \'o\': \'plone.app.querystring.operation.string.path\',\n-        \'v\': \'00000000000000001\',\n-      }\n-    ]\n-  }\n-\n-The path can contain a depth parameter (that is separated with a "::")::\n-\n-  {\n-    "query": [\n-      {\n-        \'i\': \'path\',\n-        \'o\': \'plone.app.querystring.operation.string.path\',\n-        \'v\': \'/my-content-object::2\',\n-      }\n-    ]\n-  }\n-\n-Type\n-,,,,\n-\n-Filter by portal type::\n-\n-  {\n-    "query": [\n-      {\n-        "i": "portal_type",\n-        "o": "plone.app.querystring.operation.selection.any",\n-        "v": ["Document"],\n-      }\n-    ]\n-  }\n-\n-Review State\n-,,,,,,,,,,,,\n-\n-Filter results by review state::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"review_state",\n-        "o":"plone.app.querystring.operation.selection.any",\n-        "v":["published"]\n-      }\n-    ]\n-  }\n-\n-\n-Show Inactive\n-,,,,,,,,,,,,,\n-\n-Show inactive will return content objects that is expired for a given role::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"show_inactive",\n-        "o":"plone.app.querystring.operation.string.showInactive",\n-        "v":["Owner"]\n-      }\n-    ]\n-  }\n-\n-Text Filters\n-^^^^^^^^^^^^\n-\n-Description\n-,,,,,,,,,,,\n-\n-Filter content that contains a term in the Description field::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"Description",\n-        "o":"plone.app.querystring.operation.string.contains",\n-        "v":"Noam"\n-      }\n-    ]\n-  }\n-\n-Searchable Text\n-,,,,,,,,,,,,,,,\n-\n-Filter content that contains a term in the SearchableText (all searchable fields in the catalog)::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"SearchableText",\n-        "o":"plone.app.querystring.operation.string.contains",\n-        "v":"Noam"\n-      }\n-    ]\n-  }\n-\n-Tag\n-,,,\n-\n-Filter by a tag (subjects field)::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"Subject",\n-        "o":"plone.app.querystring.operation.selection.any",\n-        "v":["Astrophysics"]\n-      }\n-    ]\n-  }\n-\n-\n-Title\n-,,,,,\n-\n-Filter by exact Title match::\n-\n-  "query": [\n-    {\n-      \'i\': \'Title\',\n-      \'o\': \'plone.app.querystring.operation.string.is\',\n-      \'v\': \'Welcome to Plone\',\n-    }\n-  ]\n-\n-Date Filters\n-^^^^^^^^^^^^\n-\n-Creation Date\n-,,,,,,,,,,,,,\n-\n-Filter by creation date::\n-\n-  {\n-    "query":[\n-      {\n-        "i": "created",\n-        "o": "plone.app.querystring.operation.date.lessThan",\n-        "v": "2021-11-11"\n-      }\n-    ]\n-  }\n-\n-Effective Date\n-,,,,,,,,,,,,,,\n-\n-Filter by effective date::\n-\n-  {\n-    "query":[\n-      {\n-        "i": "effective",\n-        "o": "plone.app.querystring.operation.date.largerThan",\n-        "v": "2021-11-11"\n-        }\n-      }\n-    ]\n-  }\n-\n-Event end date\n-,,,,,,,,,,,,,,\n-\n-Filter by event end date::\n-\n-  {\n-    "query":[\n-      {\n-        "i": "end",\n-        "o": "plone.app.querystring.operation.date.lessThan",\n-        "v":"2021-11-04"\n-      }\n-    ]\n-  }\n-\n-Event start date\n-,,,,,,,,,,,,,,,,\n-\n-Filter by event start date::\n-\n-  {\n-    "query":[\n-      {\n-        "i": "end",\n-        "o": "plone.app.querystring.operation.date.lessThan",\n-        "v":"2021-11-04"\n-      }\n-    ]\n-  }\n-\n-Expiration date\n-,,,,,,,,,,,,,,,\n-\n-Filter by expiration date::\n-\n-  {\n-    "query":[\n-      {\n-        "i": "expires",\n-        "o": "plone.app.querystring.operation.date.largerThan",\n-        "v": "2021-11-11"\n-        }\n-      }\n-    ]\n-  }\n-\n-Modification date\n-,,,,,,,,,,,,,,,,,\n-\n-Filter by modification date::\n-\n-  {\n-    "query":[\n-      {\n-        "i": "modified",\n-        "o": "plone.app.querystring.operation.date.largerThan",\n-        "v": "2021-11-11"\n-        }\n-      }\n-    ]\n-  }\ndiff --git a/docs/source/registry.md b/docs/source/registry.md\nnew file mode 100644\nindex 000000000..b94e1a457\n--- /dev/null\n+++ b/docs/source/registry.md\n@@ -0,0 +1,60 @@\n+# Registry\n+\n+Registry records can be addressed through the `@registry` endpoint on the Plone site.\n+To address a specific record, the fully qualified dotted name of the registry record has to be passed as a path segment, for example, `/plone/@registy/my.record`.\n+\n+Reading or writing registry records require the `cmf.ManagePortal` permission.\n+\n+\n+## Reading registry records\n+\n+Reading a single record:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/registry_get.req\n+```\n+\n+Example response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/registry_get.resp\n+:language: http\n+```\n+\n+\n+## Listing registry records\n+\n+The registry records listing uses a batched method to access all registry records.\n+See {doc}`batching` for more details on how to work with batched results.\n+\n+The output record contains the following fields:\n+\n+- `name`: The record\'s fully qualified dotted name.\n+- `value`: The record\'s value. This is the same as `GET`ting `@registry/name`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/registry_get_list.req\n+```\n+\n+Example response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/registry_get_list.resp\n+:language: http\n+```\n+\n+\n+## Updating registry records\n+\n+Updating an existing record:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/registry_update.req\n+```\n+\n+Example response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/registry_update.resp\n+:language: http\n+```\ndiff --git a/docs/source/registry.rst b/docs/source/registry.rst\ndeleted file mode 100644\nindex 1e4dc1da4..000000000\n--- a/docs/source/registry.rst\n+++ /dev/null\n@@ -1,57 +0,0 @@\n-Registry\n-========\n-\n-Registry records can be addressed through the ``@registry`` endpoint on the\n-Plone site. In order to address a specific record, the fully qualified dotted\n-name of the registry record has to be passed as a path segment\n-(e.g. `/plone/@registy/my.record`).\n-\n-Reading or writing registry records require the ``cmf.ManagePortal``\n-permission.\n-\n-Reading registry records\n-------------------------\n-\n-Reading a single record:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/registry_get.req\n-\n-Example Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/registry_get.resp\n-   :language: http\n-\n-\n-Listing registry records\n-------------------------\n-\n-The registry records listing uses a batched method to access all registry records.\n-See :doc:`./batching` for more details on how to work with batched results.\n-\n-The output per record contains the following fields:\n-name: The record\'s fully qualified dotted name.\n-value: The record\'s value. This is the same as GETting `@registry/name`.\n-\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/registry_get_list.req\n-\n-Example Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/registry_get_list.resp\n-   :language: http\n-\n-\n-Updating registry records\n--------------------------\n-\n-Updating an existing record:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/registry_update.req\n-\n-Example Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/registry_update.resp\n-   :language: http\n\\ No newline at end of file\ndiff --git a/docs/source/roles.md b/docs/source/roles.md\nnew file mode 100644\nindex 000000000..bef2a6029\n--- /dev/null\n+++ b/docs/source/roles.md\n@@ -0,0 +1,22 @@\n+# Roles\n+\n+Available roles in a Plone site can be queried by interacting with the `/@roles` endpoint on the portal root.\n+This action requires an authenticated user.\n+\n+\n+## List Roles\n+\n+To retrieve a list of all roles in the portal, call the `/@roles` endpoint with a `GET` request:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/roles.req\n+```\n+\n+The server will respond with a list of all roles in the portal:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/roles.resp\n+:language: http\n+```\n+\n+The role `title` is the translated role title as displayed in Plone\'s {guilabel}`Users and Groups` control panel.\ndiff --git a/docs/source/roles.rst b/docs/source/roles.rst\ndeleted file mode 100644\nindex cef253192..000000000\n--- a/docs/source/roles.rst\n+++ /dev/null\n@@ -1,20 +0,0 @@\n-Roles\n-=====\n-\n-Available roles in a Plone site can be queried by interacting with the ``/@roles`` endpoint on portal root (requires an authenticated user):\n-\n-List Roles\n-----------\n-\n-To retrieve a list of all roles in the portal, call the ``/@roles`` endpoint with a ``GET`` request:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/roles.req\n-\n-The server will respond with a list of all roles in the portal:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/roles.resp\n-   :language: http\n-\n-The role ``title`` is the translated role title as displayed in Plone\'s\n-"Users and Groups" control panel.\n\\ No newline at end of file\ndiff --git a/docs/source/searching.md b/docs/source/searching.md\nnew file mode 100644\nindex 000000000..b06d0f6e0\n--- /dev/null\n+++ b/docs/source/searching.md\n@@ -0,0 +1,194 @@\n+# Search\n+\n+Content in a Plone site can be searched for by invoking the `/@search` endpoint in any context:\n+\n+```http\n+GET /plone/@search HTTP/1.1\n+Accept: application/json\n+```\n+\n+A search is *contextual* by default.\n+In other words, it is bound to a specific context\xe2\x80\x94a *collection* in HTTP REST terms\xe2\x80\x94and searches within that collection and any sub-collections.\n+\n+A Plone site is also a collection.\n+We therefore have a global search by invoking the `/@search` endpoint on the site root.\n+We also have contextual searches by invoking that endpoint on any other context.\n+All searches use the same pattern.\n+\n+In terms of the resulting catalog query, this means that, by default, a search will be constrained by the path to the context on which it is invoked, unless you explicitly supply your own `path` query.\n+\n+Search results are represented similar to collections:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/search.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/search.resp\n+:language: http\n+```\n+\n+The default representation for search results is a summary that contains only the most basic information.\n+In order to return specific metadata columns, see the documentation of the `metadata_fields` parameter below.\n+\n+```{note}\n+A search invoked on a container will by default *include that container itself* as part of the search results.\n+This is the same behavior as displayed by [ZCatalog](https://zope.readthedocs.io/en/latest/zopebook/SearchingZCatalog.html), which is used internally.\n+If you add the query string parameter `path.depth=1` to your search, you will only get the *immediate* children of the container, and the container itself won\'t be part of the results.\n+See the Plone documentation on [searching for content within a folder](https://docs.plone.org/develop/plone/searching_and_indexing/query.html#searching-for-content-within-a-folder)\n+for more details.\n+```\n+\n+```{note}\n+Search results will be *batched* if the size of the resultset exceeds the batch size.\n+See {doc}`batching` for more details on how to work with batched results.\n+```\n+\n+```{warning}\n+The `@@search` view or the Plone `LiveSearch` widget are coded in a way that the `SearchableText` parameter is expanded by including a `*` wildcard at the end.\n+This is done to also match the partial results of the beginning of search terms.\n+The `plone.restapi` `@search` endpoint will not do that for you.\n+You will have to add it if you want to keep this feature.\n+```\n+\n+\n+## Query format\n+\n+Queries and query-wide options, such as `sort_on`, are submitted as query string parameters to the `/@search` request:\n+\n+```http\n+GET /plone/@search?SearchableText=lorem HTTP/1.1\n+```\n+\n+This is nearly identical to the way that queries are passed to the Plone `@@search` browser view, with only a few minor differences.\n+\n+For general information on how to query the Plone catalog, please refer to the [Plone Documentation on Querying](https://docs.plone.org/develop/plone/searching_and_indexing/query.html).\n+\n+\n+### Query options\n+\n+In case you want to supply query options to a query against a particular index, you will need to flatten the corresponding query dictionary and use a dotted notation to indicate nesting.\n+\n+For example, to specify the `depth` query option for a path query, the original query as a Python dictionary would look like this:\n+\n+```\n+query = {"path": {"query": "/folder1",\n+                  "depth": 2}}\n+```\n+\n+This dictionary will need to be flattened in dotted notation to pass it into a query string:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/search_options.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/search_options.resp\n+:language: http\n+```\n+\n+Again this is very similar to how [Record Arguments](https://zope.readthedocs.io/en/latest/zdgbook/ObjectPublishing.html#an-aggregator-in-detail-the-record-argument) are parsed by ZPublisher, except that you can omit the `:record` suffix.\n+\n+\n+### Restricting search to multiple paths\n+\n+To restrict a search to multiple paths, the original query as a Python dictionary would look like this, with an optional `depth` and `sort_on`:\n+\n+```\n+query = {"path": {"query": ("/folder", "/folder2"),\n+                  "depth": 2},\n+         "sort_on": "path"}\n+```\n+\n+This dictionary will need to be flattened in dotted notation to pass it into a query string.\n+To specify multiple paths, repeat the query string parameter.\n+The `requests` module will automatically do this for you if you pass it a list of values for a query string parameter.\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/search_multiple_paths.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/search_multiple_paths.resp\n+:language: http\n+```\n+\n+\n+### Data types in queries\n+\n+Because HTTP query strings contain no information about data types, any query string parameter value ends up as a string in the Zope request.\n+This means that for value types that are not strings, these data types need to be reconstructed on the server side in `plone.restapi`.\n+\n+For most index types, their query values, and query options, `plone.restapi` can handle this for you.\n+If you pass it `path.query=foo&path.depth=1`, it has the necessary knowledge about the `ExtendedPathIndex`\'s options to turn the string `1` for the `depth` argument back into an integer before passing the query on to the catalog.\n+\n+However, certain index types, such as a `FieldIndex`, may take arbitrary data types as query values.\n+In that case, `plone.restapi` cannot know to what data type to cast your query value.\n+You will need to specify it using ZPublisher type hints:\n+\n+```http\n+GET /plone/@search?numeric_field:int=42 HTTP/1.1\n+Accept: application/json\n+```\n+\n+Please refer to the [Documentation on Argument Conversion in ZPublisher](https://zope.readthedocs.io/en/latest/zdgbook/ObjectPublishing.html#argument-conversion) for details.\n+\n+\n+(retrieving-additional-metadata)=\n+\n+## Retrieving additional metadata\n+\n+By default, the results are represented as summaries that contain only the most basic information about the items, such as their URL and title.\n+If you need to retrieve additional metadata columns, you can do so by specifying the additional column names in the `metadata_fields` parameter:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/search_metadata_fields.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/search_metadata_fields.resp\n+:language: http\n+```\n+\n+The metadata from those columns will then be included in the results.\n+To specify multiple columns, repeat the query string parameter once for every column name.\n+The `requests` module will automatically do this for you if you pass it a list of values for a query string parameter.\n+\n+To retrieve all metadata columns that the catalog knows about, use `metadata_fields=_all`.\n+\n+```{note}\n+There is a difference between the full set of fields contained in an object and the set of all possible metadata columns that can be specified with `metadata_fields`.\n+In other words, using `metadata_fields=_all` will produce objects with a set of fields that is generally smaller than the set of fields produced by `fullobjects` (see next section).\n+Briefly, the fields in `metadata_fields=_all` are a subset of `fullobjects`.\n+A consequence of this is that certain fields can not be specifed with `metadata_fields`.\n+Doing so will result in a TypeError `"No converter for making <...> JSON compatible."`\n+In [ZCatalog](https://zope.readthedocs.io/en/latest/zopebook/SearchingZCatalog.html) terms, this reflects the difference between *catalog brains* and objects that have been *woken up*.\n+```\n+\n+\n+## Retrieving full objects\n+\n+If the data provided as metadata is not enough, you can retrieve search results as full serialized objects equivalent to what the resource `GET` request would produce.\n+\n+You do so by specifying the `fullobjects` parameter:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/search_fullobjects.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/search_fullobjects.resp\n+:language: http\n+```\n+\n+```{warning}\n+Be aware that this might induce performance issues when retrieving a lot of resources.\n+Normally the search just serializes catalog brains, but with `fullobjects`, we wake up all the returned objects.\n+```\n+\n+\n+## Restrict search results to Plone\'s search settings\n+\n+By default, the search endpoint does not exclude any types from its results.\n+To allow the search to follow Plone\'s search settings schema, pass the `use_site_search_settings=1` to the `@search` endpoint request.\n+By doing this, the search results will be filtered based on the defined types to be searched, and will be sorted according to the default sorting order.\ndiff --git a/docs/source/searching.rst b/docs/source/searching.rst\ndeleted file mode 100644\nindex 0dc7b5145..000000000\n--- a/docs/source/searching.rst\n+++ /dev/null\n@@ -1,169 +0,0 @@\n-Search\n-======\n-\n-Content in a Plone site can be searched for by invoking the ``/@search`` endpoint on any context:\n-\n-.. code-block:: http\n-\n-    GET /plone/@search HTTP/1.1\n-    Accept: application/json\n-\n-A search is **contextual** by default, i.e. it is bound to a specific context (a *collection* in HTTP REST terms) and searches within that collection and any sub-collections.\n-\n-Since a Plone site is also a collection, we therefore have a global search (by invoking the ``/@search`` endpoint on the site root) and contextual searches (by invoking that endpoint on any other context) all using the same pattern.\n-\n-In terms of the resulting catalog query this means that, by default, a search will be constrained by the path to the context it\'s invoked on, unless you explicitly supply your own ``path`` query.\n-\n-Search results are represented similar to collections:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/search.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/search.resp\n-   :language: http\n-\n-The default representation for search results is a summary that contains only the most basic information.\n-In order to return specific metadata columns, see the documentation of the ``metadata_fields`` parameter below.\n-\n-.. note::\n-        A search invoked on a container will by default **include that container\n-        itself** as part of the search results. This is the same behavior as displayed by\n-        `ZCatalog <https://zope.readthedocs.io/en/latest/zopebook/SearchingZCatalog.html>`_, which is used internally.\n-        If you add the query string\n-        parameter ``path.depth=1`` to your search, you will only get **immediate**\n-        children of the container, and the container itself also won\'t be part\n-        of the results. See the Plone docs on\n-        `searching for content within a folder <https://docs.plone.org/develop/plone/searching_and_indexing/query.html#searching-for-content-within-a-folder>`_\n-        for more details.\n-\n-.. note::\n-        Search results will be **batched** if the size of the\n-        resultset exceeds the batch size. See :doc:`./batching` for more\n-        details on how to work with batched results.\n-\n-.. warning::\n-        The @@search view or the Plone LiveSearch widget are coded in a way that the SearchableText parameter is expanded by including a * wildcard at the end.\n-        This is done in order to match also the partial results of the beginning of a search term(s).\n-        The plone.restapi @search endpoint will not do that for you. You\'ll have to add it if you want to keep this feature.\n-\n-Query format\n-------------\n-\n-Queries and query-wide options (like ``sort_on``) are submitted as query string parameters to the ``/@search`` request:\n-\n-.. code-block:: http\n-\n-    GET /plone/@search?SearchableText=lorem HTTP/1.1\n-\n-This is nearly identical to the way that queries are passed to the Plone ``@@search`` browser view, with only a few minor differences.\n-\n-For general information on how to query the Plone catalog, please refer to the `Plone Documentation on Querying <https://docs.plone.org/develop/plone/searching_and_indexing/query.html>`_.\n-\n-Query options\n-^^^^^^^^^^^^^\n-\n-In case you want to supply query options to a query against a particular index, you\'ll need to flatten the corresponding query dictionary and use a dotted notation to indicate nesting.\n-\n-For example, to specify the ``depth`` query option for a path query, the original query as a Python dictionary would look like this::\n-\n-    query = {\'path\': {\'query\': \'/folder1\',\n-                      \'depth\': 2}}\n-\n-This dictionary will need to be flattened in dotted notation in order to pass it in a query string:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/search_options.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_options.resp\n-   :language: http\n-\n-Again, this is very similar to how `Record Arguments <https://zope.readthedocs.io/en/latest/zdgbook/ObjectPublishing.html#an-aggregator-in-detail-the-record-argument>`_ are parsed by ZPublisher, except that you can omit the ``:record`` suffix.\n-\n-\n-Restricting search to multiple paths\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-To restrict search to multiple paths, the original query as a Python dictionary would look like this (with an optional depth and sort_on)::\n-\n-    query = {\'path\': {\'query\': (\'/folder\', \'/folder2\'),\n-                      \'depth\': 2},\n-             \'sort_on\': \'path\'}\n-\n-This dictionary will need to be flattened in dotted notation in order to pass it in a query string. In order to specify multiple paths, simply repeat the query string parameter (the ``requests`` module will do this automatically for you if you pass it a list of values for a query string parameter).\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/search_multiple_paths.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_multiple_paths.resp\n-   :language: http\n-\n-\n-Data types in queries\n-^^^^^^^^^^^^^^^^^^^^^\n-\n-Because HTTP query strings contain no information about data types, any query string parameter value ends up as a string in the Zope request.\n-This means that for value types that aren\'t string these data types need to be reconstructed on the server side in plone.restapi.\n-\n-For most index types and their query values and query options plone.restapi can handle this for you.\n-If you pass it ``path.query=foo&path.depth=1``, it has the necessary knowledge about the ``ExtendedPathIndex``\'s options to turn the string ``1`` for the ``depth`` argument back into an integer before passing the query on to the catalog.\n-\n-However, certain index types (a ``FieldIndex`` for example) may take arbitrary data types as query values.\n-In that case, ``plone.restapi`` simply can\'t know what data type to cast your query value to and you\'ll need to specify it using ZPublisher type hints:\n-\n-.. code-block:: http\n-\n-    GET /plone/@search?numeric_field:int=42 HTTP/1.1\n-    Accept: application/json\n-\n-\n-Please refer to the `Documentation on Argument Conversion in ZPublisher <https://zope.readthedocs.io/en/latest/zdgbook/ObjectPublishing.html#argument-conversion>`_ for details.\n-\n-.. _retrieving-additional-metadata:\n-\n-Retrieving additional metadata\n-------------------------------\n-\n-By default, the results are represented as summaries that only contain the most basic information about the items, like their URL and title.\n-If you need to retrieve additional metadata columns, you can do so by specifying the additional column names in the ``metadata_fields`` parameter:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/search_metadata_fields.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_metadata_fields.resp\n-   :language: http\n-\n-The metadata from those columns will then be included in the results.\n-In order to specify multiple columns, simply repeat the query string parameter once for every column name (the ``requests`` module will do this automatically for you if you pass it a list of values for a query string parameter).\n-\n-In order to retrieve all metadata columns that the catalog knows about, use ``metadata_fields=_all``.\n-\n-.. note::\n-        There is a difference between the full set of fields contained in an object and the set of all possible metadata columns that can be specified with ``metadata_fields``.\n-        In other words, using ``metadata_fields=_all`` will produce objects with a set of fields that is generally smaller than the set of fields produced by ``fullobjects`` (see next section).\n-        Briefly, the fields in ``metadata_fields=_all`` are a subset of ``fullobjects``.\n-        A consequence of this is that certain fields can not be specifed with ``metadata_fields``.\n-        Doing so will result in a TypeError ``"No converter for making <...> JSON compatible."``\n-        In `ZCatalog <https://zope.readthedocs.io/en/latest/zopebook/SearchingZCatalog.html>`_ terms, this reflects the difference between *catalog brains* and objects that have been *woken up*.\n-\n-\n-Retrieving full objects\n------------------------\n-\n-If the data provided as metadata is not enough, you can retrieve search results as full serialized objects equivalent to what the resource GET request would produce.\n-\n-You do so by specifying the ``fullobjects`` parameter:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/search_fullobjects.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_fullobjects.resp\n-   :language: http\n-\n-.. warning::\n-\n-    Be aware that this might induce performance issues when retrieving a lot of resources. Normally the search just serializes catalog brains, but with ``fullobjects``, we wake up all the returned objects.\n-\n-\n-Restrict search results to Plone\'s search settings\n---------------------------------------------------\n-By default the search endpoint is not excluding any types from its results. To allow the search to follow Plone\'s search settings schema, pass the ``use_site_search_settings=1`` to the ``@search`` endpoint request. By doing this, the search results will be filtered based on the defined types to be searched and will be sorted according to the default sorting order.\ndiff --git a/docs/source/serialization.md b/docs/source/serialization.md\nnew file mode 100644\nindex 000000000..ae67b19b4\n--- /dev/null\n+++ b/docs/source/serialization.md\n@@ -0,0 +1,234 @@\n+# Serialization\n+\n+Throughout the REST API, content needs to be serialized and deserialized to and from JSON representations.\n+\n+In general, the format used for serializing content when reading from the API is the same as is used to submit content to the API for writing.\n+\n+\n+## Basic Types\n+\n+Basic Python data types that have a corresponding type in JSON, such as integers or strings, will be translated between the Python type and the respective JSON type.\n+\n+\n+## Dates and Times\n+\n+Since JSON does not have native support for dates and times, the Python and Zope `datetime` types will be serialized to an ISO 8601 date string.\n+\n+| Python                               | JSON                    |\n+| ------------------------------------ | ----------------------- |\n+| `time(19, 45, 55)`                   | `"19:45:55"`            |\n+| `date(2015, 11, 23)`                 | `"2015-11-23"`          |\n+| `datetime(2015, 11, 23, 19, 45, 55)` | `"2015-11-23T19:45:55"` |\n+| `DateTime("2015/11/23 19:45:55")`    | `"2015-11-23T19:45:55"` |\n+\n+\n+## RichText fields\n+\n+RichText fields will be serialized as follows:\n+\n+A `RichTextValue` such as the following:\n+\n+```python\n+RichTextValue(u\'<p>Hall\xc3\xb6chen</p>\',\n+              mimeType=\'text/html\',\n+              outputMimeType=\'text/html\')\n+```\n+\n+\xe2\x80\xa6will be serialized to:\n+\n+```json\n+{\n+  "data": "<p>Hall\\u00f6chen</p>",\n+  "content-type": "text/html",\n+  "encoding": "utf-8"\n+}\n+```\n+\n+\n+## File / Image Fields\n+\n+\n+### Download (serialization)\n+\n+For download, a file field will be serialized to a mapping that contains the file\'s most basic metadata, and a hyperlink that the client can follow to download the file:\n+\n+```json\n+{\n+  "...": "",\n+  "@type": "File",\n+  "title": "My file",\n+  "file": {\n+    "content-type": "application/pdf",\n+    "download": "http://localhost:55001/plone/file/@@download/file",\n+    "filename": "file.pdf",\n+    "size": 74429\n+  }\n+}\n+```\n+\n+That URL in the `download` property points to the regular Plone download view.\n+The client can send a `GET` request to that URL with an `Accept` header containing the MIME type indicated in the `content-type` property, and will get a response containing the file.\n+\n+Image fields are serialized in the same way, except that their serialization contains their `width` and `height`, and an additional property `scales` that contains a mapping with the available image scales.\n+Image URLs are created using the UID-based URL that changes each time the image is modified, allowing these URLs to be properly cached:\n+\n+```json\n+{\n+  "icon": {\n+    "download": "http://localhost:55001/plone/image/@@images/8eed3f80-5e1f-4115-85b8-650a10a6ca84.png",\n+    "height": 32,\n+    "width": 24\n+  },\n+  "large": {\n+    "download": "http://localhost:55001/plone/image/@@images/0d1824d1-2672-4b62-9277-aeb220d3bf15.png",\n+    "height": 768,\n+    "width": 576\n+  },\n+  "..." : {}\n+}\n+```\n+\n+### Upload (deserialization)\n+\n+For file or image fields, the client must provide the file\'s data as a mapping containing the file data and some additional metadata:\n+\n+- `data` - the base64-encoded contents of the file\n+- `encoding` - the encoding you used to encode the data, usually `base64`\n+- `content-type` - the MIME type of the file\n+- `filename` - the name of the file, including its extension\n+\n+```json\n+{\n+  "...": "",\n+  "@type": "File",\n+  "title": "My file",\n+  "file": {\n+    "data": "TG9yZW0gSXBzdW0uCg==",\n+    "encoding": "base64",\n+    "filename": "lorem.txt",\n+    "content-type": "text/plain"\n+  }\n+}\n+```\n+\n+\n+## Relations\n+\n+\n+### Serialization\n+\n+A `RelationValue` will be serialized to a short summary representation of the referenced object:\n+\n+```json\n+{\n+  "@id": "http://nohost/plone/doc1",\n+  "@type": "DXTestDocument",\n+  "title": "Document 1",\n+  "description": "Description"\n+}\n+```\n+\n+The `RelationList` containing that reference will be represented as a list in JSON.\n+\n+\n+### Deserialization\n+\n+In order to set a relation when creating or updating content, you can use one of several ways to specify relations:\n+\n+- UID\n+- path\n+- URL\n+- intid\n+\n+\n+Specify relations by UID:\n+\n+```json\n+{\n+  "relatedItems": [\n+    "158e5361282647e39bf0698fe238814b",\n+    "5597250bda4b41eab6ed37cd25fb0979"\n+  ]\n+}\n+```\n+\n+Specify relations by path:\n+\n+```json\n+{\n+  "relatedItems": ["/page1", "/page2"]\n+}\n+```\n+\n+Specify relations by URL:\n+\n+```json\n+{\n+  "relatedItems": [\n+    "http://localhost:8080/Plone/page1",\n+    "http://localhost:8080/Plone/page2"\n+  ]\n+}\n+```\n+\n+Specify relations by intid:\n+\n+```json\n+{\n+  "relatedItems": [347127075, 347127076]\n+}\n+```\n+\n+\n+## Next, Previous, and Parent Navigation\n+\n+The response body of a `GET` request contains three attributes that allow navigating to the parent and to the next and previous sibling in the container in which the current document is located.\n+\n+\n+### Parent\n+\n+The `parent` attribute points to the parent container of the current content object:\n+\n+```json\n+{\n+  "parent": {\n+    "@id": "http://nohost/plone/folder-with-items",\n+    "@type": "Folder",\n+    "title": "Folder with items",\n+    "description": "This is a folder with two documents"\n+  }\n+}\n+```\n+\n+\n+### Previous Item\n+\n+The `previous_item` attribute points to the sibling that is located before the current element in the parent container.\n+Plone uses the `getObjectPositionInParent` attribute to sort content objects within a folderish container:\n+\n+```json\n+{\n+  "previous_item": {\n+    "@id": "http://nohost/plone/folder-with-items/item-1",\n+    "@type": "Document",\n+    "title": "Item 1",\n+    "description": "This the previous item"\n+  }\n+}\n+```\n+\n+### Next Item\n+\n+The `next_item` attribute points to the sibling that is located after the current element in the parent container.\n+Plone uses the `getObjectPositionInParent` attribute to sort content objects within a folderish container):\n+\n+```json\n+{\n+  "next_item": {\n+    "@id": "http://nohost/plone/folder-with-items/item-2",\n+    "@type": "Document",\n+    "title": "Item 2",\n+    "description": "This the next item"\n+  }\n+}\n+```\ndiff --git a/docs/source/serialization.rst b/docs/source/serialization.rst\ndeleted file mode 100644\nindex bb6a1bc43..000000000\n--- a/docs/source/serialization.rst\n+++ /dev/null\n@@ -1,248 +0,0 @@\n-Serialization\n-=============\n-\n-Throughout the REST API, content needs to be serialized and deserialized to and from JSON representations.\n-\n-In general, the format used for serializing content when reading from the API is the same as is used to submit content to the API for writing.\n-\n-Basic Types\n------------\n-\n-Basic Python data types that have a corresponding type in JSON, like integers or strings, will simply be translated between the Python type and the respective JSON type.\n-\n-Dates and Times\n----------------\n-\n-Since JSON doesn\'t have native support for dates/times, the Python/Zope datetime types will be serialized to an ISO 8601 datestring.\n-\n-======================================= ======================================\n-Python                                  JSON\n-======================================= ======================================\n-``time(19, 45, 55)``                    ``\'19:45:55\'``\n-``date(2015, 11, 23)``                  ``\'2015-11-23\'``\n-``datetime(2015, 11, 23, 19, 45, 55)``  ``\'2015-11-23T19:45:55\'``\n-``DateTime(\'2015/11/23 19:45:55\')``     ``\'2015-11-23T19:45:55\'``\n-======================================= ======================================\n-\n-\n-RichText fields\n----------------\n-\n-RichText fields will be serialized as follows:\n-\n-A ``RichTextValue`` like\n-\n-.. code-block:: python\n-\n-    RichTextValue(u\'<p>Hall\xc3\xb6chen</p>\',\n-                  mimeType=\'text/html\',\n-                  outputMimeType=\'text/html\')\n-\n-will be serialized to\n-\n-.. code-block:: json\n-\n-    {\n-      "data": "<p>Hall\\u00f6chen</p>",\n-      "content-type": "text/html",\n-      "encoding": "utf-8"\n-    }\n-\n-File / Image Fields\n--------------------\n-\n-Download (serialization)\n-^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-For download, a file field will be serialized to a mapping that contains the\n-file\'s most basic metadata, and a hyperlink that the client can follow to\n-download the file:\n-\n-.. code-block:: json\n-\n-      {\n-        "...": "",\n-        "@type": "File",\n-        "title": "My file",\n-        "file": {\n-          "content-type": "application/pdf",\n-          "download": "http://localhost:55001/plone/file/@@download/file",\n-          "filename": "file.pdf",\n-          "size": 74429\n-        }\n-      }\n-\n-That URL in the ``download`` property points to the regular Plone download\n-view. The client can send a ``GET`` request to that URL with an ``Accept``\n-header containing the MIME type indicated in the ``content-type`` property,\n-and will get a response containing the file.\n-\n-Image fields are serialized in the same way, except that their serialization\n-contains their ``width`` and ``height``, and an additional property\n-``scales`` that contains a mapping with the available image scales.\n-Image URLs are created using the UID-based URL that changes each time the image\n-is modified, so these URLs can be properly cached:\n-\n-.. code-block:: json\n-\n-    {\n-      "icon": {\n-        "download": "http://localhost:55001/plone/image/@@images/8eed3f80-5e1f-4115-85b8-650a10a6ca84.png",\n-        "height": 32,\n-        "width": 24\n-      },\n-      "large": {\n-        "download": "http://localhost:55001/plone/image/@@images/0d1824d1-2672-4b62-9277-aeb220d3bf15.png",\n-        "height": 768,\n-        "width": 576\n-      },\n-      "..." : {}\n-    }\n-\n-\n-Upload (deserialization)\n-^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-For file or image fields, the client must provide the file\'s data as a mapping\n-containg the file data and some additional metadata:\n-\n-- ``data`` - the base64 encoded contents of the file\n-- ``encoding`` - the encoding you used to encode the data, so usually `base64`\n-- ``content-type`` - the MIME type of the file\n-- ``filename`` - the name of the file, including extension\n-\n-.. code-block:: json\n-\n-      {\n-        "...": "",\n-        "@type": "File",\n-        "title": "My file",\n-        "file": {\n-            "data": "TG9yZW0gSXBzdW0uCg==",\n-            "encoding": "base64",\n-            "filename": "lorem.txt",\n-            "content-type": "text/plain"}\n-      }\n-\n-\n-Relations\n----------\n-\n-Serialization\n-^^^^^^^^^^^^^\n-\n-A ``RelationValue`` will be serialized to a short summary representation of the referenced object:\n-\n-.. code-block:: json\n-\n-    {\n-      "@id": "http://nohost/plone/doc1",\n-      "@type": "DXTestDocument",\n-      "title": "Document 1",\n-      "description": "Description"\n-    }\n-\n-The ``RelationList`` containing that reference will be represended as a list in JSON.\n-\n-Deserialization\n-^^^^^^^^^^^^^^^\n-\n-In order to set a relation when creating or updating content, you can use one\n-of several ways to specify relations:\n-\n-- UID\n-- path\n-- URL\n-- intid\n-\n-Specify relations by UID:\n-\n-.. code-block:: json\n-\n-  {\n-    "relatedItems": [\n-      "158e5361282647e39bf0698fe238814b",\n-      "5597250bda4b41eab6ed37cd25fb0979"\n-    ]\n-  }\n-\n-Specify relations by path:\n-\n-.. code-block:: json\n-\n-  {\n-    "relatedItems": ["/page1", "/page2"]\n-  }\n-\n-Specify relations by URL:\n-\n-.. code-block:: json\n-\n-  {\n-    "relatedItems": [\n-      "http://localhost:8080/Plone/page1",\n-      "http://localhost:8080/Plone/page2"\n-    ]\n-  }\n-\n-Specify relations by intid:\n-\n-.. code-block:: json\n-\n-  {\n-    "relatedItems": [347127075, 347127076]\n-  }\n-\n-Next/Previous/Parent Navigation\n--------------------------------\n-\n-The response body of a GET request contains three attributes that allows navigating to the parent and the next and previous sibling in the container the current document is located.\n-\n-Parent\n-^^^^^^\n-\n-The "parent" attribute points to the parent container of the current content object.\n-\n-.. code-block:: json\n-\n-  {\n-    "parent": {\n-      "@id": "http://nohost/plone/folder-with-items", \n-      "@type": "Folder", \n-      "title": "Folder with items",\n-      "description": "This is a folder with two documents", \n-    }\n-  }\n-\n-Previous Item\n-^^^^^^^^^^^^^\n-\n-The "previous_item" attribute points to the sibling that is located before the current element in the parent container (Plone uses the getObjectPositionInParent attribute to sort content objects within a folderish container).\n-\n-.. code-block:: json\n-\n-  {\n-    "previous_item": {\n-      "@id": "http://nohost/plone/folder-with-items/item-1", \n-      "@type": "Document",\n-      "title": "Item 1",\n-      "description": "This the previous item"\n-    }\n-  }\n-\n-Next Item\n-^^^^^^^^^\n-\n-The "next_item" attribute points to the sibling that is located after the current element in the parent container (Plone uses the getObjectPositionInParent attribute to sort content objects within a folderish container).\n-\n-.. code-block:: json\n-\n-  {\n-    "next_item": {\n-      "@id": "http://nohost/plone/folder-with-items/item-2", \n-      "@type": "Document",\n-      "title": "Item 2",\n-      "description": "This the next item"\n-    }\n-  }\n-\ndiff --git a/docs/source/sharing.md b/docs/source/sharing.md\nnew file mode 100644\nindex 000000000..611c9911c\n--- /dev/null\n+++ b/docs/source/sharing.md\n@@ -0,0 +1,80 @@\n+(sharing)=\n+\n+# Sharing\n+\n+Plone comes with a sophisticated user management system that allows an administrator to assign users and groups with global roles and permissions.\n+Sometimes this in not enough though and you might want to give users the permission to access or edit a specific part of your website or a specific content object.\n+This is where local roles, located in the Plone {guilabel}`Sharing` tab, come in handy.\n+\n+\n+## Retrieving Local Roles\n+\n+In `plone.restapi`, the representation of any content object will include a hypermedia link to the local role and sharing information in the `sharing` attribute:\n+\n+```http\n+GET /plone/folder HTTP/1.1\n+Accept: application/json\n+```\n+\n+```\n+HTTP 200 OK\n+content-type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/folder",\n+  "@type": "Folder",\n+\n+  "more attributes": "...",\n+\n+  "sharing": {\n+    "@id": "http://localhost:55001/plone/folder/@sharing",\n+    "title": "Sharing",\n+  }\n+}\n+```\n+\n+The sharing information of a content object can also be directly accessed by appending `/@sharing` to the `GET` request to the URL of a content object.\n+For example, to access the sharing information for a top-level folder, do the following.\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/sharing_folder_get.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/sharing_folder_get.resp\n+:language: http\n+```\n+\n+The `available_roles` property contains the list of roles that can be managed via the sharing page.\n+It contains dictionaries with the role ID and its translated `title` as it appears on the sharing page.\n+\n+\n+## Searching for principals\n+\n+Users or groups without a sharing entry can be found by appending the argument `search` to the query string, in other words, `?search=admin`.\n+Global roles are marked with the string `global`.\n+Inherited roles are marked with the string `acquired`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/sharing_search.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/sharing_search.resp\n+:language: http\n+```\n+\n+\n+## Updating Local Roles\n+\n+You can update the sharing information by sending a `POST` request to the object URL and appending `/@sharing`, for example, `/plone/folder/@sharing`.\n+Say you want to give the `AuthenticatedUsers` group the `Reader` local role for a folder:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/sharing_folder_post.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/sharing_folder_post.resp\n+:language: http\n+```\ndiff --git a/docs/source/sharing.rst b/docs/source/sharing.rst\ndeleted file mode 100644\nindex d83b87b8a..000000000\n--- a/docs/source/sharing.rst\n+++ /dev/null\n@@ -1,69 +0,0 @@\n-.. _sharing:\n-\n-Sharing\n-=======\n-\n-Plone comes with a sophisticated user management system that allows to assign users and groups with global roles and permissions. Sometimes this in not enough though and you might want to give users the permission to access or edit a specific part of your website or a specific content object. This is where local roles (located in the Plone sharing tab) come in handy.\n-\n-\n-Retrieving Local Roles\n-----------------------\n-\n-In plone.restapi, the representation of any content object will include a hypermedia link to the local role / sharing information in the ``sharing`` attribute:\n-\n-.. code-block:: http\n-\n-  GET /plone/folder HTTP/1.1\n-  Accept: application/json\n-\n-.. code::\n-\n-  HTTP 200 OK\n-  content-type: application/json\n-\n-  {\n-    "@id": "http://localhost:55001/plone/folder",\n-    "@type": "Folder",\n-    ...\n-    "sharing": {\n-      "@id": "http://localhost:55001/plone/folder/@sharing",\n-      "title": "Sharing",\n-    }\n-  }\n-\n-The sharing information of a content object can also be directly accessed by appending ``/@sharing`` to the GET request to the URL of a content object. E.g. to access the sharing information for a top-level folder, do:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/sharing_folder_get.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/sharing_folder_get.resp\n-   :language: http\n-\n-The ``available_roles`` property contains the list of roles that can be\n-managed via the sharing page. It contains dictionaries with the role ID and\n-its translated ``title`` (as it appears on the sharing page).\n-\n-\n-Searching for principals\n-------------------------\n-\n-Users and/or groups without a sharing entry can be found by appending the argument ``search`` to the query string. ie ``?search=admin``.\n-Global roles are marked with the string ``"global"``. Inherited roles are marked with the string ``"acquired"``.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/sharing_search.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/sharing_search.resp\n-   :language: http\n-\n-\n-Updating Local Roles\n---------------------\n-\n-You can update the \'sharing\' information by sending a POST request to the object URL and appending ``/@sharing``, e.g. ``/plone/folder/@sharing``. E.g. say you want to give the ``AuthenticatedUsers`` group the ``Reader`` local role for a folder:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/sharing_folder_post.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/sharing_folder_post.resp\n-   :language: http\ndiff --git a/docs/source/system.md b/docs/source/system.md\nnew file mode 100644\nindex 000000000..d163df533\n--- /dev/null\n+++ b/docs/source/system.md\n@@ -0,0 +1,35 @@\n+(system)=\n+\n+# System\n+\n+The `@system` endpoint exposes system information about the Plone backend.\n+\n+Send a `GET` request to the `@system` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/system_get.req\n+```\n+\n+The response will contain the system information:\n+\n+```http\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@system",\n+  "cmf_version": "2.4.2",\n+  "debug_mode": "No",\n+  "pil_version": "6.2.1 (Pillow)",\n+  "plone_gs_metadata_version_file_system": "5208",\n+  "plone_gs_metadata_version_installed": "5208",\n+  "plone_version": "5.2.1",\n+  "python_version": "3.7.7 (default, Mar 10 2020, 15:43:33) \\n[Clang 11.0.0 (clang-1100.0.33.17)]",\n+  "zope_version": "4.1.3"\n+}\n+```\n+\n+```{note}\n+The system endpoint is protected by the `plone.app.controlpanel.Overview` permission that requires the Site Administrator or Manager role.\n+```\ndiff --git a/docs/source/system.rst b/docs/source/system.rst\ndeleted file mode 100644\nindex 9a0342894..000000000\n--- a/docs/source/system.rst\n+++ /dev/null\n@@ -1,31 +0,0 @@\n-.. _system:\n-\n-System\n-======\n-\n-The `@system` endpoint exposes system information about the Plone backend.\n-\n-Send a GET request to the `@system` endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/system_get.req\n-\n-The response will contain the system information::\n-\n-  HTTP/1.1 200 OK\n-  Content-Type: application/json\n-\n-  {\n-    "@id": "http://localhost:55001/plone/@system",\n-    "cmf_version": "2.4.2",\n-    "debug_mode": "No",\n-    "pil_version": "6.2.1 (Pillow)",\n-    "plone_gs_metadata_version_file_system": "5208",\n-    "plone_gs_metadata_version_installed": "5208",\n-    "plone_version": "5.2.1",\n-    "python_version": "3.7.7 (default, Mar 10 2020, 15:43:33) \\n[Clang 11.0.0 (clang-1100.0.33.17)]",\n-    "zope_version": "4.1.3"\n-  }\n-\n-\n-.. note:: The system endpoint is protected by the ``plone.app.controlpanel.Overview`` permission that requires the site-administrator or manager role.\n\\ No newline at end of file\ndiff --git a/docs/source/tiles.md b/docs/source/tiles.md\nnew file mode 100644\nindex 000000000..0d32a7aa9\n--- /dev/null\n+++ b/docs/source/tiles.md\n@@ -0,0 +1,85 @@\n+# Tiles\n+\n+```{warning}\n+The tiles endpoint is deprecated and will be removed in `plone.restapi` 9.\n+```\n+\n+```{note}\n+The tiles endpoint currently matches only partially, specifically the `GET` endpoints, the default Plone implementation.\n+```\n+\n+A tile in Plone is an HTML snippet that can contain arbitrary content, such as text, images, or videos.\n+\n+\n+## Listing available tiles\n+\n+```{note}\n+This endpoint currently does not return any data.\n+The functionality needs to be implemented.\n+```\n+\n+List all available tiles types by sending a `GET` request to the `@tiles` endpoint on the portal root:\n+\n+```\n+GET /plone/@tiles HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+```\n+\n+The server responds with a {term}`200 OK` status and lists all available tiles:\n+\n+```\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+[\n+  {\n+    "@id": "http://localhost:55001/plone/@tiles/title",\n+    "title": "Title tile",\n+    "description": "A field tile that will show the title of the content object",\n+  },\n+  {\n+    "@id": "http://localhost:55001/plone/@tiles/description",\n+    "title": "Description tile",\n+    "description": "A field tile that will show the description of the content object",\n+  },\n+]\n+```\n+\n+\n+## Retrieve JSON schema of an individual tile\n+\n+```{note}\n+This endpoint currently does not return any data.\n+The functionality needs to be implemented.\n+```\n+\n+Retrieve the JSON schema of a specific tile by calling the `@tiles` endpoint with the ID of the tile:\n+\n+```\n+GET /plone/@tiles/title HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+```\n+\n+The server responds with a JSON schema definition for that particular tile:\n+\n+```\n+HTTP/1.1 200 OK\n+Content-Type: application/json+schema\n+\n+{\n+  "properties": {\n+    "title": {\n+      "description": "",\n+      "title": "Title",\n+      "type": "string"\n+    },\n+    ...\n+  },\n+  "required": [\n+    "title",\n+  ],\n+  "title": "Title Tile",\n+  "type": "object"\n+}\n+```\ndiff --git a/docs/source/tiles.rst b/docs/source/tiles.rst\ndeleted file mode 100644\nindex cb3cde18d..000000000\n--- a/docs/source/tiles.rst\n+++ /dev/null\n@@ -1,74 +0,0 @@\n-Tiles\n-=====\n-\n-.. warning::\n-   The tiles endpoint is deprecated and will be removed in plone.restapi 9.\n-\n-.. note::\n-  The tiles endpoint currently match only partially (the GET endpoints) the default Plone implementation.\n-\n-A tile in Plone is an HTML snippet that can contain arbitrary content (e.g. text, images, videos).\n-\n-\n-Listing available tiles\n------------------------\n-\n-.. note::\n-  This endpoint currently does not return any data. The functionality needs to be implemented.\n-\n-List all available tiles type by sending a GET request to the @tiles endpoint on the portal root::\n-\n-  GET /plone/@tiles HTTP/1.1\n-  Accept: application/json\n-  Authorization: Basic YWRtaW46c2VjcmV0\n-\n-The server responds with a `Status 200` and list all available tiles::\n-\n-  HTTP/1.1 200 OK\n-  Content-Type: application/json\n-  [\n-    {\n-      "@id": "http://localhost:55001/plone/@tiles/title",\n-      "title": "Title tile",\n-      "description": "A field tile that will show the title of the content object",\n-    },\n-    {\n-      "@id": "http://localhost:55001/plone/@tiles/description",\n-      "title": "Description tile",\n-      "description": "A field tile that will show the description of the content object",\n-    },\n-  ]\n-\n-\n-Retrieve JSON schema of an individual tile\n-------------------------------------------\n-\n-.. note::\n-  This endpoint currently does not return any data. The functionality needs to be implemented.\n-\n-Retrieve the JSON schema of a specific tile by calling the \'@tiles\' endpoint with the id of the tile::\n-\n-  GET /plone/@tiles/title HTTP/1.1\n-  Accept: application/json\n-  Authorization: Basic YWRtaW46c2VjcmV0\n-\n-The server responds with a JSON schema definition for that particular tile::\n-\n-  HTTP/1.1 200 OK\n-  Content-Type: application/json+schema\n-\n-  {\n-    "properties": {\n-      "title": {\n-        "description": "",\n-        "title": "Title",\n-        "type": "string"\n-      },\n-      ...\n-    },\n-    "required": [\n-      "title",\n-    ],\n-    "title": "Title Tile",\n-    "type": "object"\n-  }\ndiff --git a/docs/source/translations.md b/docs/source/translations.md\nnew file mode 100644\nindex 000000000..8ae4ceb68\n--- /dev/null\n+++ b/docs/source/translations.md\n@@ -0,0 +1,121 @@\n+(translations)=\n+\n+# Translations\n+\n+```{note}\n+This is only available on Plone 5.\n+```\n+\n+Since Plone 5, the product [`plone.app.multilingual`](https://pypi.org/project/plone.app.multilingual/) is included in the base Plone installation.\n+It is not enabled by default.\n+\n+Site interface texts include the configuration menus, error messages, information messages, and other static text.\n+Multilingualism in Plone not only allows the managers of the site to configure the site interface texts to be in one language or another, but also to configure Plone to handle multilingual content.\n+To achieve that, Plone provides the user interface for managing content translations.\n+\n+You can get additional information about the multilingual capabilities of Plone in the [documentation](https://docs.plone.org/develop/plone/i18n/translating_content.html).\n+\n+In connection with those capabilities, `plone.restapi` provides a `@translations` endpoint to handle the translation information of the content objects.\n+\n+Once we have installed `plone.app.multilingual` and enabled more than one language, we can link two content items of different languages to be the translation of each other issuing a `POST` query to the `@translations` endpoint, including the `id` of the content to which it should be linked.\n+The `id` of the content must be a full URL of the content object:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translations_post.req\n+```\n+\n+```{note}\n+`id` is a required field, and needs to point to existing content on the site.\n+```\n+\n+The API will return a {term}`201 Created` response, if the linking was successful:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/translations_post.resp\n+:language: http\n+```\n+\n+We can also use the object\'s path to link the translation instead of the full URL:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples//translations_post_by_id.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples//translations_post_by_id.resp\n+:language: http\n+```\n+\n+We can also use the object\'s UID to link the translation:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples//translations_post_by_uid.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples//translations_post_by_id.resp\n+:language: http\n+```\n+\n+After linking the contents, we can get the list of the translations of that content item by issuing a `GET` request on the `@translations` endpoint of that content item:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translations_get.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/translations_get.resp\n+:language: http\n+```\n+\n+To unlink the content, issue a `DELETE` request on the `@translations` endpoint of the content item, and provide the language code you want to unlink:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translations_delete.req\n+```\n+\n+```{note}\n+`language` is a required field.\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/translations_delete.resp\n+:language: http\n+```\n+\n+\n+## Creating a translation from an existing content\n+\n+The `POST` content endpoint to a folder is also capable of linking this new content with an\n+exising translation using two parameters: `translationOf` and `language`.\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translations_link_on_post.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/translations_link_on_post.resp\n+:language: http\n+```\n+\n+\n+## Get location in the tree for new translations\n+\n+When you create a translation in Plone, there are policies in place for finding a suitable placement for it.\n+This endpoint returns the proper placement for the newly created translation:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translation_locator.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/translation_locator.resp\n+:language: http\n+```\n+\n+\n+## Expansion\n+\n+This endpoint can be used with the {doc}`expansion` mechanism which allows getting additional information about a content item in one query, avoiding unnecessary requests.\n+\n+If a simple `GET` request is done on the content item, a new entry will be shown on the `@components` entry, with the URL of the `@translations` endpoint:\ndiff --git a/docs/source/translations.rst b/docs/source/translations.rst\ndeleted file mode 100644\nindex 9ffaa4e39..000000000\n--- a/docs/source/translations.rst\n+++ /dev/null\n@@ -1,125 +0,0 @@\n-.. _`translations`:\n-\n-Translations\n-============\n-\n-.. note::\n-    This is only available on Plone 5.\n-\n-Since Plone 5 the product `plone.app.multilingual`_ is included in the base\n-Plone installation although it is not enabled by default.\n-\n-Multilingualism in Plone not only allows the managers of the site to configure\n-the site interface texts to be in one language or another (such as the\n-configuration menus, error messages, information messages or other static\n-text) but also to configure Plone to handle multilingual content. To achieve\n-that it provides the user interface for managing content translations.\n-\n-You can get additional information about the multilingual capabilities of Plone\n-in the `documentation`_.\n-\n-In connection with that capabilities, plone.restapi provides a `@translations`\n-endpoint to handle the translation information of the content objects.\n-\n-Once we have installed `plone.app.multilingual`_ and enabled more than one\n-language we can link two content-items of different languages to be the\n-translation of each other issuing a `POST` query to the `@translations`\n-endpoint including the `id` of the content which should be linked to. The\n-`id` of the content must be a full URL of the content object:\n-\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/translations_post.req\n-\n-\n-.. note::\n-    "id" is a required field and needs to point to an existing content on the site.\n-\n-The API will return a `201 Created` response if the linking was successful.\n-\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translations_post.resp\n-   :language: http\n-\n-\n-We can also use the object\'s path to link the translation instead of the full URL:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples//translations_post_by_id.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples//translations_post_by_id.resp\n-   :language: http\n-\n-\n-We can also use the object\'s UID to link the translation:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples//translations_post_by_uid.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples//translations_post_by_id.resp\n-   :language: http\n-\n-\n-After linking the contents we can get the list of the translations of that\n-content item by issuing a ``GET`` request on the `@translations` endpoint of\n-that content item.:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/translations_get.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translations_get.resp\n-   :language: http\n-\n-\n-To unlink the content, issue a ``DELETE`` request on the `@translations`\n-endpoint of the content item and provide the language code you want to unlink.:\n-\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/translations_delete.req\n-\n-.. note::\n-    "language" is a required field.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translations_delete.resp\n-   :language: http\n-\n-Creating a translation from an existing content\n------------------------------------------------\n-\n-The POST content endpoint to a folder is capable also of linking this new content with an\n-exising translation using two parameters: ``translationOf`` and ``language``.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/translations_link_on_post.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translations_link_on_post.resp\n-   :language: http\n-\n-Get location in the tree for new translations\n----------------------------------------------\n-\n-When you create a translation in Plone, there are policies in place for finding a suitable\n-placement for it. This endpoint returns the proper placement for the newly going to be\n-created translation.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/translation_locator.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translation_locator.resp\n-   :language: http\n-\n-Expansion\n----------\n-\n-This endpoint can be used with the :ref:`expansion name` mechanism which allows to get additional\n-information about a content item in one query, avoiding unnecesary requests.\n-\n-If a simple ``GET`` request is done on the content item, a new entry will be shown on the `@components`\n-entry with the URL of the `@translations` endpoint:\n-\n-\n-\n-.. _`plone.app.multilingual`: https://pypi.org/project/plone.app.multilingual/\n-.. _`Products.LinguaPlone`: https://pypi.python.org/pypi/Products.LinguaPlone.\n-.. _`documentation`: https://docs.plone.org/develop/plone/i18n/translating_content.html\ndiff --git a/docs/source/tusupload.md b/docs/source/tusupload.md\nnew file mode 100644\nindex 000000000..34629c946\n--- /dev/null\n+++ b/docs/source/tusupload.md\n@@ -0,0 +1,150 @@\n+# TUS resumable upload\n+\n+`plone.restapi` supports the [TUS Open Protocol](https://tus.io/) for resumable file uploads.\n+There is a `@tus-upload` endpoint to upload a file, and a `@tus-replace` endpoint to replace an existing file.\n+\n+\n+## Creating an Upload URL\n+\n+```{note}\n+`POST` requests to the `@tus-upload` endpoint are allowed on all `IFolderish` content types, for example, `Folder`.\n+```\n+\n+To create a new upload, send a `POST` request to the `@tus-upload` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/tusupload_post.req\n+```\n+\n+The server will return a temporary upload URL in the `Location` header of the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusupload_post.resp\n+:language: http\n+```\n+\n+The file can then be uploaded in the next step to that temporary URL.\n+\n+\n+## Uploading a File\n+\n+```{note}\n+PATCH requests to the `@tus-upload` endpoint are allowed on all IContentish content types.\n+```\n+\n+Once a temporary upload URL has been created, a client can send a `PATCH` request to upload a file.\n+The file content should be sent in the body of the request:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusupload_patch_finalized.req\n+:language: http\n+```\n+\n+When just a single file is uploaded at once, the server will respond with a {term}`204 No Content` response after a successful upload.\n+The HTTP `Location` header contains he URL of the newly created content object:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusupload_patch_finalized.resp\n+:language: http\n+```\n+\n+\n+## Partial Upload\n+\n+TUS allows partial upload of files.\n+A partial file is also uploaded by sending a `PATCH` request to the temporary URL:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusupload_patch.req\n+:language: http\n+```\n+\n+The server will also respond with a {term}`204 No content` response.\n+Though instead of providing the final file URL in the `Location` header, the server provides an updated `Upload-Offset` value, telling the client the new offset:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusupload_patch.resp\n+:language: http\n+```\n+\n+When the last partial file has been uploaded, the server will contain the final file URL in the `Location` header.\n+\n+## Replacing Existing Files\n+\n+TUS can also be used to replace an existing file by sending a `POST` request to the `@tus-replace` endpoint instead:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusreplace_post.req\n+:language: http\n+```\n+\n+The server will respond with a {term}`201 Created` status and return the URL of the temporarily created upload resource in the `Location` header of the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusupload_post.resp\n+:language: http\n+```\n+\n+The file can then be uploaded to that URL using the `PATCH` method in the same way as creating a new file:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusreplace_patch.req\n+:language: http\n+```\n+\n+The server will respond with a {term}`204 No Content` response and the final file URL in the HTTP `Location` header:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusreplace_patch.resp\n+:language: http\n+```\n+\n+\n+## Asking for the Current File Offset\n+\n+To ask the server for the current file offset, the client can send a `HEAD` request to the upload URL:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/tusupload_head.req\n+```\n+\n+The server will respond with a {term}`200 OK` status and the current file offset in the `Upload-Offset` header:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusupload_head.resp\n+:language: http\n+```\n+\n+\n+## Configuration and Options\n+\n+The current TUS configuration and a list of supported options can be retrieved sending an `OPTIONS` request to the `@tus-upload` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/tusupload_options.req\n+```\n+\n+The server will respond with a {term}`204 No content` status and HTTP headers containing information about the available extensions and the TUS version:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusupload_options.resp\n+:language: http\n+```\n+\n+\n+## CORS Configuration\n+\n+If you use CORS and want to make it work with TUS, you have to make sure the TUS-specific HTTP headers are allowed by your CORS policy:\n+\n+```xml\n+<plone:CORSPolicy\n+  allow_origin="http://localhost"\n+  allow_methods="DELETE,GET,OPTIONS,PATCH,POST,PUT"\n+  allow_credentials="true"\n+  allow_headers="Accept,Authorization,Origin,X-Requested-With,Content-Type,Upload-Length,Upload-Offset,Tus-Resumable,Upload-Metadata,Lock-Token"\n+  expose_headers="Upload-Offset,Location,Upload-Length,Tus-Version,Tus-Resumable,Tus-Max-Size,Tus-Extension,Upload-Metadata"\n+  max_age="3600"\n+  />\n+```\n+\n+See the `plone.rest` documentation for more information on how to configure CORS policies.\n+\n+See <https://tus.io/protocols/resumable-upload.html#headers> for a list and description of the individual headers.\n+\n+\n+## Temporary Upload Directory\n+\n+During upload, files are stored in a temporary directory that by default is located in the `CLIENT_HOME` directory.\n+If you are using a multi ZEO client setup without session stickiness you *must* configure this to a directory shared by all ZEO clients by setting the `TUS_TMP_FILE_DIR` environment variable, for example `TUS_TMP_FILE_DIR=/tmp/tus-uploads`.\ndiff --git a/docs/source/tusupload.rst b/docs/source/tusupload.rst\ndeleted file mode 100644\nindex 15457ec31..000000000\n--- a/docs/source/tusupload.rst\n+++ /dev/null\n@@ -1,143 +0,0 @@\n-TUS resumable upload\n-====================\n-\n-plone.restapi supports the `TUS Open Protocol <https://tus.io/>`_ for resumable file uploads.\n-There is a `@tus-upload` endpoint to upload a file and a `@tus-replace` endpoint to replace an existing file.\n-\n-\n-Creating an Upload URL\n-----------------------\n-\n-.. note:: POST requests to the `@tus-upload` endpoint are allowed on all IFolderish content types (e.g. Folder).\n-\n-To create a new upload, send a POST request to the `@tus-upload` endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/tusupload_post.req\n-\n-The server will return a temporary upload URL in the location header of the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_post.resp\n-   :language: http\n-\n-The file can then be uploaded in the next step to that temporary URL.\n-\n-\n-Uploading a File\n-----------------\n-\n-.. note:: PATCH requests to the `@tus-upload` endpoint are allowed on all IContentish content types.\n-\n-Once a temporary upload URL has been created, a client can send a PATCH request to upload a file. The file content should be send in the body of the request:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_patch_finalized.req\n-   :language: http\n-\n-When just a single file is uploaded at once, the server will respond with a `204: No Content` response after a successful upload.\n-The HTTP location header contains he URL of the newly created content object:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_patch_finalized.resp\n-   :language: http\n-\n-\n-Partial Upload\n---------------\n-\n-TUS allows partial upload of files.\n-A partial file is also uploaded by sending a PATCH request to the temporary URL:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_patch.req\n-   :language: http\n-\n-The server will also respond with a `204: No content` response.\n-Though, instead of providing the final file URL in the \'location\' header, the server provides an updated \'Upload-Offset\' value, to tell the client the new offset:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_patch.resp\n-   :language: http\n-\n-When the last partial file has been uploaded, the server will contain the final file URL in the \'location\' header.\n-\n-\n-Replacing Existing Files\n-------------------------\n-\n-TUS can also be used to replace an existing file by sending a POST request to the `@tus-replace` endpoint instead.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusreplace_post.req\n-   :language: http\n-\n-The server will respond with a `201: Created` status and return the URL of the temprorary created upload resource\n-in the location header of the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_post.resp\n-   :language: http\n-\n-The file can then be uploaded to that URL using the PATCH method in the same way as creating a new file:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusreplace_patch.req\n-   :language: http\n-\n-The server will respond with a `204: No Content` response and the final file URL in the HTTP location header:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusreplace_patch.resp\n-   :language: http\n-\n-\n-Asking for the Current File Offset\n-----------------------------------\n-\n-To ask the server for the current file offset, the client can send a HEAD request to the upload URL:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/tusupload_head.req\n-\n-The server will respond with a `200: Ok` status and the current file offset in the \'Upload-Offset\' header:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_head.resp\n-   :language: http\n-\n-\n-Configuration and Options\n--------------------------\n-\n-The current TUS configuration and a list of supported options can be retrieved sending an OPTIONS request to the `@tus-upload` endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/tusupload_options.req\n-\n-The server will respond with a `204: No content` status and HTTP headers containing information about the available extentions and the TUS version:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_options.resp\n-   :language: http\n-\n-\n-CORS Configuration\n-------------------\n-\n-If you use CORS and want to make it work with TUS, you have to make sure the TUS specific HTTP headers are allowed by your CORS policy.\n-\n-.. code-block:: xml\n-\n-  <plone:CORSPolicy\n-    allow_origin="http://localhost"\n-    allow_methods="DELETE,GET,OPTIONS,PATCH,POST,PUT"\n-    allow_credentials="true"\n-    allow_headers="Accept,Authorization,Origin,X-Requested-With,Content-Type,Upload-Length,Upload-Offset,Tus-Resumable,Upload-Metadata,Lock-Token"\n-    expose_headers="Upload-Offset,Location,Upload-Length,Tus-Version,Tus-Resumable,Tus-Max-Size,Tus-Extension,Upload-Metadata"\n-    max_age="3600"\n-    />\n-\n-See the plone.rest documentation for more information on how to configure CORS policies.\n-\n-See https://tus.io/protocols/resumable-upload.html#headers for a list and description of the individual headers.\n-\n-\n-Temporary Upload Directory\n---------------------------\n-\n-During upload files are stored in a temporary directory that by default is located in the `CLIENT_HOME` directory.\n-If you are using a multi ZEO client setup without session stickiness you *must* configure this to a directory shared\n-by all ZEO clients by setting the `TUS_TMP_FILE_DIR` environment variable. E.g. ``TUS_TMP_FILE_DIR=/tmp/tus-uploads``\n-\n-\n-\ndiff --git a/docs/source/types-schema.md b/docs/source/types-schema.md\nnew file mode 100644\nindex 000000000..ffaba84a0\n--- /dev/null\n+++ b/docs/source/types-schema.md\n@@ -0,0 +1,499 @@\n+(types-schema)=\n+\n+# Types Schema\n+\n+The following is a detailed list of all available [Zope Schema](https://zopeschema.readthedocs.io/en/latest/) field types and their corresponding representation as [JSON Schema](https://json-schema.org/).\n+\n+\n+## TextLine\n+\n+Zope Schema:\n+\n+```python\n+zope.schema.TextLine(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+    default=u\'foobar\'\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'string\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'default\': u\'foobar\',\n+}\n+```\n+\n+\n+## Text\n+\n+Zope Schema:\n+\n+```\n+zope.schema.Text(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+    default=u\'Lorem ipsum dolor sit amet\',\n+    min_length=10,\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'string\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'widget\': \'textarea\',\n+    \'default\': u\'Lorem ipsum dolor sit amet\',\n+    \'minLength\': 10,\n+}\n+```\n+\n+\n+## Bool\n+\n+Zope Schema:\n+\n+```\n+zope.schema.Bool(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+    default=False,\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'boolean\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'default\': False,\n+}\n+```\n+\n+\n+## Float\n+\n+Zope Schema:\n+\n+```\n+zope.schema.Float(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+    min=0.0,\n+    max=1.0,\n+    default=0.5,\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'minimum\': 0.0,\n+    \'maximum\': 1.0,\n+    \'type\': \'number\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'default\': 0.5,\n+}\n+```\n+\n+\n+## Decimal\n+\n+Zope Schema:\n+\n+```\n+zope.schema.Decimal(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+    min=Decimal(0),\n+    max=Decimal(1),\n+    default=Decimal(0.5),\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'minimum\': 0.0,\n+    \'maximum\': 1.0,\n+    \'type\': \'number\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'default\': 0.5,\n+},\n+```\n+\n+\n+## Int\n+\n+Zope Schema:\n+\n+```\n+zope.schema.Int(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+    min=0,\n+    max=100,\n+    default=50,\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'minimum\': 0,\n+    \'maximum\': 100,\n+    \'type\': \'integer\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'default\': 50,\n+}\n+```\n+\n+\n+## Choice\n+\n+Zope Schema:\n+\n+```\n+zope.schema.Choice(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+    vocabulary=self.dummy_vocabulary,\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'string\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'enum\': [\'foo\', \'bar\'],\n+    \'enumNames\': [\'Foo\', \'Bar\'],\n+    \'choices\': [(\'foo\', \'Foo\'), (\'bar\', \'Bar\')],\n+}\n+```\n+\n+\n+## List\n+\n+Zope Schema:\n+\n+```\n+zope.schema.List(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+    min_length=1,\n+    value_type=schema.TextLine(\n+        title=u\'Text\',\n+        description=u\'Text field\',\n+        default=u\'Default text\'\n+    ),\n+    default=[\'foobar\'],\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'array\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'default\': [\'foobar\'],\n+    \'minItems\': 1,\n+    \'uniqueItems\': False,\n+    \'additionalItems\': True,\n+    \'items\': {\n+        \'type\': \'string\',\n+        \'title\': u\'Text\',\n+        \'description\': u\'Text field\',\n+        \'default\': u\'Default text\',\n+    }\n+},\n+```\n+\n+\n+## Tuple\n+\n+Zope Schema:\n+\n+```\n+field = zope.schema.Tuple(\n+    title=u\'My field\',\n+    value_type=schema.Int(),\n+    default=(1, 2),\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'array\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'\',\n+    \'uniqueItems\': True,\n+    \'additionalItems\': True,\n+    \'items\': {\n+        \'title\': u\'\',\n+        \'description\': u\'\',\n+        \'type\': \'integer\',\n+    },\n+    \'default\': (1, 2),\n+}\n+```\n+\n+\n+## Set\n+\n+Zope Schema:\n+\n+```\n+field = zope.schema.Set(\n+    title=u\'My field\',\n+    value_type=schema.TextLine(),\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'array\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'\',\n+    \'uniqueItems\': True,\n+    \'additionalItems\': True,\n+    \'items\': {\n+        \'title\': u\'\',\n+        \'description\': u\'\',\n+        \'type\': \'string\',\n+    }\n+}\n+```\n+\n+\n+## List of Choices\n+\n+Zope Schema:\n+\n+```\n+field = zope.schema.List(\n+    title=u\'My field\',\n+    value_type=schema.Choice(\n+        vocabulary=self.dummy_vocabulary,\n+    ),\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'array\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'\',\n+    \'uniqueItems\': True,\n+    \'additionalItems\': True,\n+    \'items\': {\n+        \'title\': u\'\',\n+        \'description\': u\'\',\n+        \'type\': \'string\',\n+        \'enum\': [\'foo\', \'bar\'],\n+        \'enumNames\': [\'Foo\', \'Bar\'],\n+        \'choices\': [(\'foo\', \'Foo\'), (\'bar\', \'Bar\')],\n+    }\n+}\n+```\n+\n+\n+## Object\n+\n+Zope Schema:\n+\n+```\n+zope.schema.Object(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+    schema=IDummySchema,\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'object\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'properties\': {\n+        \'field1\': {\n+            \'title\': u\'Foo\',\n+            \'description\': u\'\',\n+            \'type\': \'boolean\'\n+        },\n+        \'field2\': {\n+            \'title\': u\'Bar\',\n+            \'description\': u\'\',\n+            \'type\': \'string\'\n+        },\n+    }\n+},\n+```\n+\n+\n+## RichText (`plone.app.textfield`)\n+\n+Zope Schema:\n+\n+```\n+from plone.app.textfield import RichText\n+field = RichText(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'string\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'widget\': \'richtext\',\n+}\n+```\n+\n+\n+## Date\n+\n+Zope Schema:\n+\n+```\n+zope.schema.Date(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+    default=date(2016, 1, 1),\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'string\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'default\': date(2016, 1, 1),\n+    \'widget\': u\'date\',\n+}\n+```\n+\n+\n+## DateTime\n+\n+Zope Schema:\n+\n+```\n+zope.schema.Datetime(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'string\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'widget\': u\'datetime\',\n+}\n+```\n+\n+\n+## Email\n+\n+Zope Schema:\n+\n+```\n+plone.schema.Email(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'string\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'widget\': u\'email\',\n+}\n+```\n+\n+\n+## Password\n+\n+Zope Schema:\n+\n+```\n+zope.schema.Password(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'string\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'widget\': u\'password\',\n+}\n+```\n+\n+\n+## URI\n+\n+Zope Schema:\n+\n+```\n+zope.schema.URI(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'string\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'widget\': u\'url\',\n+}\n+```\ndiff --git a/docs/source/types-schema.rst b/docs/source/types-schema.rst\ndeleted file mode 100644\nindex 44d614ea4..000000000\n--- a/docs/source/types-schema.rst\n+++ /dev/null\n@@ -1,445 +0,0 @@\n-.. _types-schema:\n-\n-Types Schema\n-============\n-\n-A detailed list of all available `Zope Schema <https://zopeschema.readthedocs.io/en/latest/>`_  field types and their corresponding representation as `JSON Schema <http://json-schema.org/>`_ .\n-\n-TextLine\n---------\n-\n-Zope Schema::\n-\n-    zope.schema.TextLine(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-        default=u\'foobar\'\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'string\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'default\': u\'foobar\',\n-    }\n-\n-\n-Text\n-----\n-\n-Zope Schema::\n-\n-    zope.schema.Text(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-        default=u\'Lorem ipsum dolor sit amet\',\n-        min_length=10,\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'string\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'widget\': \'textarea\',\n-        \'default\': u\'Lorem ipsum dolor sit amet\',\n-        \'minLength\': 10,\n-    }\n-\n-\n-Bool\n-----\n-\n-Zope Schema::\n-\n-    zope.schema.Bool(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-        default=False,\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'boolean\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'default\': False,\n-    }\n-\n-\n-Float\n------\n-\n-Zope Schema::\n-\n-    zope.schema.Float(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-        min=0.0,\n-        max=1.0,\n-        default=0.5,\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'minimum\': 0.0,\n-        \'maximum\': 1.0,\n-        \'type\': \'number\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'default\': 0.5,\n-    }\n-\n-\n-Decimal\n--------\n-\n-Zope Schema::\n-\n-    zope.schema.Decimal(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-        min=Decimal(0),\n-        max=Decimal(1),\n-        default=Decimal(0.5),\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'minimum\': 0.0,\n-        \'maximum\': 1.0,\n-        \'type\': \'number\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'default\': 0.5,\n-    },\n-\n-\n-Int\n----\n-\n-Zope Schema::\n-\n-    zope.schema.Int(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-        min=0,\n-        max=100,\n-        default=50,\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'minimum\': 0,\n-        \'maximum\': 100,\n-        \'type\': \'integer\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'default\': 50,\n-    }\n-\n-\n-Choice\n-------\n-\n-Zope Schema::\n-\n-    zope.schema.Choice(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-        vocabulary=self.dummy_vocabulary,\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'string\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'enum\': [\'foo\', \'bar\'],\n-        \'enumNames\': [\'Foo\', \'Bar\'],\n-        \'choices\': [(\'foo\', \'Foo\'), (\'bar\', \'Bar\')],\n-    }\n-\n-\n-List\n-----\n-\n-Zope Schema::\n-\n-    zope.schema.List(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-        min_length=1,\n-        value_type=schema.TextLine(\n-            title=u\'Text\',\n-            description=u\'Text field\',\n-            default=u\'Default text\'\n-        ),\n-        default=[\'foobar\'],\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'array\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'default\': [\'foobar\'],\n-        \'minItems\': 1,\n-        \'uniqueItems\': False,\n-        \'additionalItems\': True,\n-        \'items\': {\n-            \'type\': \'string\',\n-            \'title\': u\'Text\',\n-            \'description\': u\'Text field\',\n-            \'default\': u\'Default text\',\n-        }\n-    },\n-\n-\n-Tuple\n------\n-\n-Zope Schema::\n-\n-    field = zope.schema.Tuple(\n-        title=u\'My field\',\n-        value_type=schema.Int(),\n-        default=(1, 2),\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'array\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'\',\n-        \'uniqueItems\': True,\n-        \'additionalItems\': True,\n-        \'items\': {\n-            \'title\': u\'\',\n-            \'description\': u\'\',\n-            \'type\': \'integer\',\n-        },\n-        \'default\': (1, 2),\n-    }\n-\n-\n-Set\n----\n-\n-Zope Schema::\n-\n-    field = zope.schema.Set(\n-        title=u\'My field\',\n-        value_type=schema.TextLine(),\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'array\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'\',\n-        \'uniqueItems\': True,\n-        \'additionalItems\': True,\n-        \'items\': {\n-            \'title\': u\'\',\n-            \'description\': u\'\',\n-            \'type\': \'string\',\n-        }\n-    }\n-\n-\n-List of Choices\n----------------\n-\n-Zope Schema::\n-\n-    field = zope.schema.List(\n-        title=u\'My field\',\n-        value_type=schema.Choice(\n-            vocabulary=self.dummy_vocabulary,\n-        ),\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'array\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'\',\n-        \'uniqueItems\': True,\n-        \'additionalItems\': True,\n-        \'items\': {\n-            \'title\': u\'\',\n-            \'description\': u\'\',\n-            \'type\': \'string\',\n-            \'enum\': [\'foo\', \'bar\'],\n-            \'enumNames\': [\'Foo\', \'Bar\'],\n-            \'choices\': [(\'foo\', \'Foo\'), (\'bar\', \'Bar\')],\n-        }\n-    }\n-\n-\n-Object\n-------\n-\n-Zope Schema::\n-\n-    zope.schema.Object(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-        schema=IDummySchema,\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'object\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'properties\': {\n-            \'field1\': {\n-                \'title\': u\'Foo\',\n-                \'description\': u\'\',\n-                \'type\': \'boolean\'\n-            },\n-            \'field2\': {\n-                \'title\': u\'Bar\',\n-                \'description\': u\'\',\n-                \'type\': \'string\'\n-            },\n-        }\n-    },\n-\n-\n-RichText (plone.app.textfield)\n-------------------------------\n-\n-Zope Schema::\n-\n-    from plone.app.textfield import RichText\n-    field = RichText(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'string\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'widget\': \'richtext\',\n-    }\n-\n-\n-Date\n-----\n-\n-Zope Schema::\n-\n-    zope.schema.Date(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-        default=date(2016, 1, 1),\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'string\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'default\': date(2016, 1, 1),\n-        \'widget\': u\'date\',\n-    }\n-\n-\n-DateTime\n---------\n-\n-Zope Schema::\n-\n-    zope.schema.Datetime(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'string\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'widget\': u\'datetime\',\n-    }\n-\n-\n-Email\n------\n-\n-Zope Schema::\n-\n-    plone.schema.Email(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'string\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'widget\': u\'email\',\n-    }\n-\n-\n-Password\n---------\n-\n-Zope Schema::\n-\n-    zope.schema.Password(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'string\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'widget\': u\'password\',\n-    }\n-\n-\n-URI\n----\n-\n-Zope Schema::\n-\n-    zope.schema.URI(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'string\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'widget\': u\'url\',\n-    }\ndiff --git a/docs/source/types.md b/docs/source/types.md\nnew file mode 100644\nindex 000000000..75f2ed688\n--- /dev/null\n+++ b/docs/source/types.md\n@@ -0,0 +1,237 @@\n+(types)=\n+\n+# Types\n+\n+```{note}\n+These docs are generated by code tests, therefore you will see some `test` content types appear here.\n+```\n+\n+Available content types in a Plone site can be listed and queried by accessing the `/@types` endpoint on any context.\n+Access requires an authenticated user.\n+The `addable` key specifies if the content type can be added to the current context.\n+The `layouts` key specifies the defined views:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types.resp\n+:language: http\n+```\n+\n+The API consumer can create, read, update, and delete a content types schema.\n+\n+| Verb    | URL              | Action                                             |\n+| ------- | ---------------- | -------------------------------------------------- |\n+| `POST`  | `/@types/{type}` | Add field/fieldset to content type schema          |\n+| `GET`   | `/@types/{type}` | Get the schema of a content type                   |\n+| `PATCH` | `/@types/{type}` | Update existing schema fields/fieldsets properties |\n+| `PUT`   | `/@types/{type}` | Replace content-type schema                        |\n+\n+In addition to the above methods we can also do:\n+\n+| Verb     | URL                              | Action                            |\n+| -------- | -------------------------------- | --------------------------------- |\n+| `GET`    | `/@type/{type}/{field/fieldset}` | Get field/fieldset properties     |\n+| `PATCH`  | `/@type/{type}/{field/fieldset}` | Update field/fieldset properties  |\n+| `DELETE` | `/@type/{type}/{field/fieldset}` | Remove field/fieldset from schema |\n+\n+```{note}\n+Schema fields and fieldsets defined by [behaviors](https://docs.plone.org/external/plone.app.dexterity/docs/behaviors/index.html) are immutable and can NOT be changed via this RestAPI endpoint.\n+See {ref}`dexterity-types` control panel RestAPI endpoint for enabling and disabling behaviors.\n+```\n+\n+\n+## Add schema fieldset or field with `POST`\n+\n+To create a new *fieldset*, send a `POST` request to the `/@types/Document` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_post_fieldset.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_post_fieldset.resp\n+:language: http\n+```\n+\n+To create a new *field*, send a `POST` request to the `/@types/Document` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_post_field.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_post_field.resp\n+:language: http\n+```\n+\n+For a complete list of available field `@types`, you can access `/@vocabularies/Fields` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_fields.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/vocabularies_get_fields.resp\n+:language: http\n+```\n+\n+\n+## Get the schema with `GET`\n+\n+To get the schema of a content type, access the `/@types` endpoint with the name of the content type, for example, `plone/@types/Document`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document.resp\n+:language: http\n+```\n+\n+The content type schema uses the [JSON Schema](http://json-schema.org/) format.\n+The tagged values for the widgets are also exposed in the `properties` attribute of the schema.\n+\n+For `Choice` fields, their vocabulary or source will be linked to in a `vocabulary` or `querysource` property (one or the other, never both):\n+\n+- If a `querysource` property is included, that field is backed by an `IQuerysource`.\n+  In that case, the source\'s terms can\'t be enumerated.\n+  The terms need to be *queried* by issuing a request to the linked endpoint and including the user\'s search terms in the `?query=` parameter.\n+- If a `vocabulary` property is included, the field is backed by a vocabulary or another kind of iterable source.\n+  The terms can then be *enumerated* by issuing a request to the linked endpoint.\n+\n+See {ref}`vocabularies` for details on these endpoints.\n+\n+See {ref}`types-schema` for a detailed documentation about the available field types.\n+\n+To get one schema **fieldset** properties, access `@types/Document/{fieldset}` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_get_fieldset.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_get_fieldset.resp\n+:language: http\n+```\n+\n+To get one schema *field* properties, access `@types/Document/{field}` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_get_field.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_get_field.resp\n+:language: http\n+```\n+\n+\n+## Update schema with `PATCH`\n+\n+To update content type schema defaults, we send a `PATCH` request to the server.\n+`PATCH` allows to provide just a subset of the resource, that is, the values you actually want to change.\n+\n+To update one or more schema *field* properties:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_patch_properites.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_patch_properites.resp\n+:language: http\n+```\n+\n+To change one or more *fieldset* properties:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_patch_fieldsets.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_patch_fieldsets.resp\n+:language: http\n+```\n+\n+To update one *fieldset* settings, we can also send a `PATCH` request to `@types/Document/{fieldset}` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_patch_fieldset.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_patch_fieldset.resp\n+:language: http\n+```\n+\n+To update one *field* settings, we can also send a `PATCH` request to `@types/Document/{field}` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_patch_field.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_patch_field.resp\n+:language: http\n+```\n+\n+\n+## Update schema with `PUT`\n+\n+Use `PUT` when more changes are needed in one call, such as creating new fields or fieldsets, moving fields to a fieldset, removing multiple fields, and so on:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_put.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_put.resp\n+:language: http\n+```\n+\n+\n+## Removing schema field/fieldset with `DELETE`\n+\n+Delete an existing schema *field* by sending a `DELETE` request to the URL of an existing schema field:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_delete_field.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_delete_field.resp\n+:language: http\n+```\n+\n+Delete an existing schema *fieldset* by sending a `DELETE` request to the URL of an existing schema fieldset:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_delete_fieldset.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_delete_fieldset.resp\n+:language: http\n+```\ndiff --git a/docs/source/types.rst b/docs/source/types.rst\ndeleted file mode 100644\nindex 8451dc69a..000000000\n--- a/docs/source/types.rst\n+++ /dev/null\n@@ -1,204 +0,0 @@\n-.. _types:\n-\n-Types\n-=====\n-\n-.. note::\n-    These docs are generated by code tests, therefore you will see some \'test\' contenttypes appear here.\n-\n-Available content types in a Plone site can be listed and queried by accessing the ``/@types`` endpoint on any context (requires an authenticated user). The \'addable\' key specifies if the content type can be added to the current context. The \'layouts\' key specifies the defined views.\n-\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types.resp\n-   :language: http\n-\n-\n-The API consumer can create, read, update, and delete a content-types schema.\n-\n-======= =============================================== =====================================================================\n-Verb    URL                                             Action\n-======= =============================================== =====================================================================\n-POST    ``/@types/{type}``                              Add field/fieldset to content type schema\n-GET     ``/@types/{type}``                              Get the schema of a content type\n-PATCH   ``/@types/{type}``                              Update existing schema fields/fieldsets properties\n-PUT     ``/@types/{type}``                              Replace content-type schema\n-======= =============================================== =====================================================================\n-\n-In addition to the above methods we can also do:\n-\n-======= =============================================== =====================================================================\n-Verb    URL                                             Action\n-======= =============================================== =====================================================================\n-GET     ``/@type/{type}/{field/fieldset}``              Get field/fieldset properties\n-PATCH   ``/@type/{type}/{field/fieldset}``              Update field/fieldset properties\n-DELETE  ``/@type/{type}/{field/fieldset}``              Remove field/fieldset from schema\n-======= =============================================== =====================================================================\n-\n-.. note::\n-\n-  Schema fields/fieldsets defined by `behaviors <https://docs.plone.org/external/plone.app.dexterity/docs/behaviors/index.html>`_\n-  are immutable and can NOT be changed via this RestAPI endpoint. See :ref:`dexterity-types` controlpanel RestAPI endpoint\n-  for enabling/disabling behaviors.\n-\n-\n-Add schema fieldset/field with POST\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-To create a new **fieldset**, send a POST request to the ``/@types/Document`` endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_post_fieldset.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_post_fieldset.resp\n-   :language: http\n-\n-\n-To create a new **field**, send a POST request to the ``/@types/Document`` endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_post_field.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_post_field.resp\n-   :language: http\n-\n-For a complete list of available field **@types** you can access **/@vocabularies/Fields** endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_fields.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get_fields.resp\n-   :language: http\n-\n-Get the schema with GET\n-~~~~~~~~~~~~~~~~~~~~~~~\n-\n-To get the schema of a content type, access the ``/@types`` endpoint  with the name of the content type, e.g. ``plone/@types/Document``:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document.resp\n-   :language: http\n-\n-The content type schema uses the `JSON Schema <http://json-schema.org/>`_ format.\n-The tagged values for the widgets are also exposed in the the "properties" attribute of the schema.\n-\n-For ``Choice`` fields, their vocabulary or source will be linked to in a ``vocabulary`` or ``querysource`` property (one or the other, never both):\n-\n-\n-- If a ``querysource`` property is included, that field is backed by an ``IQuerysource``.\n-  In that case, the source\'s terms can\'t be enumerated, and the terms need to be **queried** by issuing a request to the linked endpoint and including the user\'s search terms in the ``?query=`` parameter.\n-- If a ``vocabulary`` property is included, the field is backed by a vocabulary or another kind of iterable source.\n-  The terms can then be **enumerated** by issuing a request to the linked endpoint.\n-\n-See :ref:`vocabularies` for details on these endpoints.\n-\n-See :ref:`types-schema` for a detailed documentation about the available field types.\n-\n-To get one schema **fieldset** properties, access ``@types/Document/{fieldset}`` endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_get_fieldset.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_get_fieldset.resp\n-   :language: http\n-\n-To get one schema **field** properties, access ``@types/Document/{field}`` endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_get_field.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_get_field.resp\n-   :language: http\n-\n-\n-Update schema with PATCH\n-~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-To update content type schema defaults we send a PATCH request to the server.\n-PATCH allows to provide just a subset of the resource (the values you actually want to change).\n-\n-To update one or more schema **field** properties:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_patch_properites.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_patch_properites.resp\n-   :language: http\n-\n-To change one or more **fieldsets** properties:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_patch_fieldsets.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_patch_fieldsets.resp\n-   :language: http\n-\n-\n-To update one **fieldset** settings, we can also send a PATCH request to ``@types/Document/{fieldset}`` endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_patch_fieldset.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_patch_fieldset.resp\n-   :language: http\n-\n-To update one **field** settings, we can also send a PATCH request to ``@types/Document/{field}`` endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_patch_field.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_patch_field.resp\n-   :language: http\n-\n-Update schema with PUT\n-~~~~~~~~~~~~~~~~~~~~~~\n-\n-Use PUT when more changes are needed in one call, like create new fields/fieldsets, move fields to fieldset, remove multiple fields, etc.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_put.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_put.resp\n-   :language: http\n-\n-Removing schema field/fieldset with DELETE\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-Delete an existing schema **field** by sending a DELETE request to the URL of an existing schema field:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_delete_field.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_delete_field.resp\n-   :language: http\n-\n-\n-Delete an existing schema **fieldset** by sending a DELETE request to the URL of an existing schema fieldset:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_delete_fieldset.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_delete_fieldset.resp\n-   :language: http\ndiff --git a/docs/source/upgrade-guide.md b/docs/source/upgrade-guide.md\nnew file mode 100644\nindex 000000000..388445c0c\n--- /dev/null\n+++ b/docs/source/upgrade-guide.md\n@@ -0,0 +1,829 @@\n+# Upgrade Guide\n+\n+This upgrade guide lists all breaking changes in `plone.restapi`.\n+It explains the steps that are needed to upgrade to the latest version.\n+\n+\n+## Upgrading to `plone.restapi` 7.x\n+\n+The navigation endpoint has been refactored.\n+Now its behavior is consistent regarding the `items` attribute.\n+Now the `items` attribute is present, even if the element of the tree does not have child elements, in which case it will be an empty array.\n+This might affect some logins via JavaScript, specifically if the condition is checking for the existence of the `items` attribute and expects it to be `undefined`.\n+\n+\n+## Upgrading to `plone.restapi` 6.x\n+\n+`plone.restapi` 6.0.0 removes the `IAPIRequest` marker interface (<https://github.com/plone/plone.restapi/pull/819>).\n+\n+It also ships with a fix that prevents converting bytestring IDs to Unicode IDs when reordering on Python 2 (<https://github.com/plone/plone.restapi/issues/827>).\n+\n+All versions before `plone.restapi` 6.0.0 are potentially affected by this issue.\n+\n+You may be affected by this issue and should run the fix if:\n+\n+- You used the `PATCH` "ordering" functionality of `plone.restapi`\n+- Were using Python 2 at that point\n+- Are seeing issues with `objectIds()` returning mixed string types\n+\n+If you need to fix object IDs, you can do one of the following:\n+\n+- Use the browser view `@@plone-restapi-upgrade-fix-ordering` as a Manager to fix all folderish content types in your Plone site.\n+- Run the helper function `ensure_child_ordering_object_ids_are_native_strings` from `plone.restapi.upgrades.ordering` for all affected objects.\n+  You could do this in a custom upgrade step implemented in your policy.\n+\n+We expect that most content actually will not be affected.\n+See <https://github.com/plone/plone.restapi/issues/827> for more details.\n+\n+\n+## Upgrading to `plone.restapi` 5.x\n+\n+`plone.restapi` 5.0.0 introduces the following breaking change:\n+\n+- Rename `tiles` behavior and fields to `blocks` migration step. [timo, sneridagh] (#821)\n+\n+The `tiles` field has been renamed to `blocks`, and the `tiles_layout` field to `blocks_layout`. This changes the response format from:\n+\n+```json\n+{\n+  "@id": "http://localhost:55001/plone/my-document",\n+  "\xe2\x80\xa6",\n+  "tiles_layout": [\n+    "#title-1",\n+    "#description-1",\n+    "#image-1"\n+  ],\n+  "tiles": {\n+    "\xe2\x80\xa6"\n+  }\n+}\n+```\n+\n+to:\n+\n+```json\n+{\n+  "@id": "http://localhost:55001/plone/my-document",\n+  "\xe2\x80\xa6",\n+  "blocks_layout": [\n+    "#title-1",\n+    "#description-1",\n+    "#image-1"\n+  ],\n+  "blocks": {\n+    "\xe2\x80\xa6"\n+  }\n+}\n+```\n+\n+This change affects the `GET`, `PATCH`, and `POST` formats.\n+It should only affect you if you use Volto.\n+\n+\n+## Upgrading to `plone.restapi` 4.x\n+\n+`plone.restapi` 4.0.0 introduces the following breaking changes:\n+\n+1.  Fields with vocabularies now return the `token` and `title` instead of the stored value.\n+2.  Choice and list fields return a hyperlink to a vocabulary instead of `choices`, `enum`, and `enumNames`.\n+3.  Serialize widget parameters into a `widgetOptions` object instead of adding them to the top level of the schema property.\n+4.  The vocabularies endpoint does no longer returns an `@id` for terms, the results are batched, and terms are now listed as `items` instead of `terms` to match other batched responses.\n+\n+\n+### Serialization and Deserialization of fields with vocabularies\n+\n+The serialization of fields with vocabularies, such as `Choice`, now return the `token` and the `title` of the vocabulary term instead of the stored value.\n+This is allows displaying the term `title` without additionally querying the vocabulary.\n+However it is necessary to adapt existing client implementations.\n+\n+The date and time control panel previously returned a number for the `first_weekday` property:\n+\n+```json\n+{\n+  "@id": "http://localhost:55001/plone/@controlpanels/date-and-time",\n+  "data": {\n+      "\xe2\x80\xa6",\n+      "first_weekday": 0,\n+      "\xe2\x80\xa6"\n+  },\n+  "\xe2\x80\xa6",\n+}\n+```\n+\n+Now it returns an object with a `token` and a `title`:\n+\n+```json\n+{\n+  "@id": "http://localhost:55001/plone/@controlpanels/date-and-time",\n+  "data": {\n+      "\xe2\x80\xa6",\n+      "first_weekday": {\n+          "title": "Monday",\n+          "token": "0"\n+      },\n+      "\xe2\x80\xa6"\n+  },\n+  "\xe2\x80\xa6"\n+}\n+```\n+\n+Deserialization accepts objects that contain a token, but also just the token or the value.\n+\n+However, it is highly recommended to always use the token, as vocabulary terms may contain values that are not JSON serializable.\n+\n+\n+### Choice and List fields return link to vocabulary instead of the values\n+\n+Choice and List fields using named vocabularies are now serialized with a `vocabulary` property, giving the URL of the `@vocabularies` endpoint for the vocabulary instead of including `choices`,\n+`enum`, and `enumNames` inline.\n+\n+Old Response:\n+\n+```json\n+"choices": [\n+    [\n+        "de",\n+        "Deutsch"\n+    ],\n+    [\n+        "en",\n+        "English"\n+    ]\n+],\n+"enum": [\n+  "de",\n+  "en",\n+],\n+"enumNames": [\n+  "Deutsch",\n+  "English",\n+]\n+```\n+\n+New response:\n+\n+```json\n+"vocabulary": {\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.CaptchaVocabulary"\n+},\n+```\n+\n+\n+### Serialize widget parameters into a `widgetOptions` object\n+\n+Serialize widget parameters into a `widgetOptions` object instead of adding them to the top level of the schema property.\n+\n+Old response:\n+\n+```json\n+"vocabulary": "plone.app.vocabularies.Users"\n+```\n+\n+New response:\n+\n+```json\n+"widgetOptions": {\n+  "pattern_options": {\n+    "recentlyUsed": true\n+  },\n+  "vocabulary": { "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users" }\n+}\n+```\n+\n+\n+### Example: Vocabularies Subjects Field\n+\n+The `subjects` field is now serialized as an `array` of `string` items using the `plone.app.vocabularies.Keywords` vocabulary.\n+\n+Old response:\n+\n+```json\n+"subjects": {\n+  "choices": ["\xe2\x80\xa6"],\n+  "enum": ["\xe2\x80\xa6"],\n+  "enumNames": ["\xe2\x80\xa6"]\n+},\n+"type": "string"\n+```\n+\n+New response:\n+\n+```json\n+"additionalItems": true,\n+"type": "array",\n+"uniqueItems": true,\n+"widgetOptions": {\n+  "vocabulary": {\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+  }\n+},\n+"items": {\n+  "description": "",\n+  "title": "",\n+  "type": "string"\n+}\n+```\n+\n+\n+### Example: Available Time Zones Field (vocabulary in `items`)\n+\n+Old response:\n+\n+```json\n+"available_timezones": {\n+  "additionalItems": true,\n+  "default": [],\n+  "description": "The timezones, which should be available for the portal. Can be set for users and events",\n+  "items": {\n+    "choices": [\n+      [\n+        "Africa/Abidjan",\n+        "Africa/Abidjan"\n+      ],\n+      [\n+        "Africa/Accra",\n+        "Africa/Accra"\n+      ],\n+      "\xe2\x80\xa6"\n+    ],\n+    "enum": [\n+      "\xe2\x80\xa6"\n+    ],\n+    "enumNames": [\n+      "\xe2\x80\xa6"\n+    ]\n+  },\n+  "title": "Available timezones",\n+  "type": "array",\n+  "uniqueItems": true\n+}\n+```\n+\n+New response:\n+\n+```json\n+"available_timezones": {\n+  "additionalItems": true,\n+  "default": [],\n+  "description": "The timezones, which should be available for the portal. Can be set for users and events",\n+  "items": {\n+    "description": "",\n+    "title": "",\n+    "type": "string",\n+    "vocabulary": {\n+      "@id": "http://localhost:8080/Plone/@vocabularies/plone.app.vocabularies.Timezones"\n+    }\n+  },\n+  "title": "Available timezones",\n+  "type": "array",\n+  "uniqueItems": true\n+},\n+```\n+\n+\n+### Example: Weekday Field (vocabulary in main property)\n+\n+Old response:\n+\n+```json\n+"first_weekday": {\n+  "choices": [\n+    [\n+      "0",\n+      "Monday"\n+    ],\n+    [\n+      "1",\n+      "Tuesday"\n+    ],\n+    [\n+      "2",\n+      "Wednesday"\n+    ],\n+    [\n+      "3",\n+      "Thursday"\n+    ],\n+    [\n+      "4",\n+      "Friday"\n+    ],\n+    [\n+      "5",\n+      "Saturday"\n+    ],\n+    [\n+      "6",\n+      "Sunday"\n+    ]\n+  ],\n+  "description": "First day in the week.",\n+  "enum": [\n+    "0",\n+    "1",\n+    "2",\n+    "3",\n+    "4",\n+    "5",\n+    "6"\n+  ],\n+  "enumNames": [\n+    "Monday",\n+    "Tuesday",\n+    "Wednesday",\n+    "Thursday",\n+    "Friday",\n+    "Saturday",\n+    "Sunday"\n+  ],\n+  "title": "First weekday",\n+  "type": "string"\n+},\n+```\n+\n+New response:\n+\n+```json\n+"first_weekday": {\n+  "description": "First day in the week.",\n+  "title": "First weekday",\n+  "type": "string",\n+  "vocabulary": {\n+    "@id": "http://localhost:8080/Plone/@vocabularies/plone.app.vocabularies.Weekdays"\n+  }\n+},\n+```\n+\n+\n+### Vocabularies Endpoint\n+\n+The vocabularies endpoint no longer returns an `@id` for terms.\n+\n+The results are batched, and terms are now listed as `items` instead of `terms` to match other batched responses.\n+\n+Batch size is 25 by default, but can be overridden using the `b_size` parameter.\n+\n+Old response:\n+\n+```json\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n+  "terms": [\n+    {\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Collection",\n+      "title": "Collection",\n+      "token": "Collection"\n+    },\n+    "\xe2\x80\xa6"\n+  ]\n+}\n+```\n+\n+New response:\n+\n+```json\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n+  "items": [\n+      {\n+        "title": "Collection",\n+        "token": "Collection"\n+      },\n+      "\xe2\x80\xa6"\n+  ],\n+  "items_total": 12\n+}\n+```\n+\n+\n+## Upgrading to `plone.restapi` 3.x\n+\n+\n+### Image scales\n+\n+Image download URLs and image scale URLs are created using the UID-based URL formats.\n+This allows Plone to create different URLs when the image changes, thus ensuring caches are updated.\n+\n+Old Response:\n+\n+```json\n+{\n+  "icon": {\n+    "download": "http://localhost:55001/plone/image/@@images/image/icon",\n+    "height": 32,\n+    "width": 24\n+  },\n+  "large": {\n+    "download": "http://localhost:55001/plone/image/@@images/image/large",\n+    "height": 768,\n+    "width": 576\n+  },\n+  "\xe2\x80\xa6"\n+}\n+```\n+\n+New Response:\n+\n+```json\n+{\n+  "icon": {\n+    "download": "http://localhost:55001/plone/image/@@images/8eed3f80-5e1f-4115-85b8-650a10a6ca84.png",\n+    "height": 32,\n+    "width": 24\n+  },\n+  "large": {\n+    "download": "http://localhost:55001/plone/image/@@images/0d1824d1-2672-4b62-9277-aeb220d3bf15.png",\n+    "height": 768,\n+    "width": 576\n+  },\n+  "\xe2\x80\xa6"\n+}\n+```\n+\n+\n+### `@sharing` endpoint\n+\n+The `available_roles` property in the response to a `GET` request to the `@sharing` endpoint has changed.\n+Instead of a flat list of strings, it now contains a list of dicts, with the role ID and their translated title.\n+\n+Old Response:\n+\n+```http\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "available_roles": [\n+    "Contributor",\n+    "Editor",\n+    "Reviewer",\n+    "Reader"\n+  ],\n+  "entries": [\n+      "..."\n+  ],\n+  "inherit": true\n+}\n+```\n+\n+New Response:\n+\n+```http\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "available_roles": [\n+    {\n+      "id": "Contributor",\n+      "title": "Can add"\n+    },\n+    {\n+      "id": "Editor",\n+      "title": "Can edit"\n+    },\n+    {\n+      "id": "Reader",\n+      "title": "Can view"\n+    },\n+    {\n+      "id": "Reviewer",\n+      "title": "Can review"\n+    }\n+  ],\n+  "entries": [\n+      "\xe2\x80\xa6"\n+  ],\n+  "inherit": true\n+}\n+```\n+\n+\n+### Custom Content Deserializers\n+\n+If you have implemented custom content deserializers, you have to handle the new `create` keyword in the `__call__` method, which determines if deserialization is performed during object creation or while updating an object.\n+\n+Deserializers should only fire an `IObjectModifiedEvent` event if an object has been updated. They should not fire it when a new object has been created.\n+\n+See [Dexterity content deserializer](https://github.com/plone/plone.restapi/blob/master/src/plone/restapi/deserializer/dxcontent.py) for an example.\n+\n+\n+## Upgrading to `plone.restapi` 2.x\n+\n+`plone.restapi` 2.0.0 converts all datetime, DateTime and time objects to UTC before serializing.\n+The translations endpoint becomes "expandable", which introduces the following breaking changes.\n+\n+\n+### Translations\n+\n+Previously when using the `@translations` endpoint in `plone.restapi` 1.x, the endpoint returned a `language` key with the content object\'s language and a `translations` key with all its translations.\n+\n+Now as the endpoint is expandable, we want the endpoint to behave like the other expandable endpoints.\n+As top level information, we only include the name of the endpoint on the `@id` attribute and the actual translations of the content object in an attribute called `items`.\n+\n+This means that now the JSON response to a `GET` request to the {ref}`translations` endpoint does not include the language of the actual content item, and the translations are now in an attribute called `items` instead of `translations`.\n+\n+Old response:\n+\n+```http\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/en/test-document",\n+  "language": "en",\n+  "translations": [\n+    {\n+      "@id": "http://localhost:55001/plone/es/test-document",\n+      "language": "es"\n+    }\n+  ]\n+}\n+```\n+\n+New response:\n+\n+```http\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/en/test-document/@translations",\n+  "items": [\n+    {\n+      "@id": "http://localhost:55001/plone/es/test-document",\n+      "language": "es"\n+    }\n+  ]\n+}\n+```\n+\n+\n+## Upgrading to `plone.restapi` 1.0b1\n+\n+In `plone.restapi` 1.0b1 the `url` attribute on the {ref}`navigation` and {ref}`breadcrumbs` endpoint was renamed to `@id` to be consistent with other links/URLs used in `plone.restapi`.\n+\n+The JSON response to a `GET` request to the {ref}`breadcrumbs` endpoint changed from using the `url` attribute for `items`:\n+\n+```http\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n+  "items": [\n+    {\n+      "title": "Welcome to Plone",\n+      "url": "http://localhost:55001/plone/front-page"\n+    }\n+  ]\n+}\n+```\n+\n+\xe2\x80\xa6to using the `@id` for the URL of `items`:\n+\n+```http\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n+  "items": [\n+    {\n+      "@id": "http://localhost:55001/plone/front-page",\n+      "title": "Welcome to Plone"\n+    }\n+  ]\n+}\n+```\n+\n+The JSON response to a `GET` request to the {ref}`navigation` endpoint changed from using the `url` attribute for `items`:\n+\n+```http\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/front-page/@navigation",\n+  "items": [\n+    {\n+      "title": "Home",\n+      "url": "http://localhost:55001/plone",\n+    },\n+    {\n+      "title": "Welcome to Plone",\n+      "url": "http://localhost:55001/plone/front-page"\n+    }\n+  ]\n+}\n+```\n+\n+to using the `@id` for the URL of `items`:\n+\n+```http\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/front-page/@navigation",\n+  "items": [\n+    {\n+      "@id": "http://localhost:55001/plone",\n+      "title": "Home"\n+    },\n+    {\n+      "@id": "http://localhost:55001/plone/front-page",\n+      "title": "Welcome to Plone"\n+    }\n+  ]\n+}\n+```\n+\n+The expansion mechanism is also affected by this change when {ref}`navigation` or {ref}`breadcrumbs` endpoints are expanded.\n+\n+From using `url` in the breadcrumb `items`:\n+\n+```json\n+{\n+  "@components": {\n+    "breadcrumbs": {\n+      "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n+      "items": [\n+        {\n+          "title": "Welcome to Plone",\n+          "url": "http://localhost:55001/plone/front-page"\n+        }\n+      ]\n+    },\n+    "navigation": {\n+      "@id": "http://localhost:55001/plone/front-page/@navigation",\n+      "items": [\n+        {\n+          "title": "Home",\n+          "url": "http://localhost:55001/plone",\n+        },\n+        {\n+          "title": "Welcome to Plone",\n+          "url": "http://localhost:55001/plone/front-page"\n+        }\n+      ]\n+    },\n+    "\xe2\x80\xa6"\n+}\n+```\n+\n+to using `@id` in the breadcrumb `items`:\n+\n+```json\n+{\n+  "@components": {\n+    "breadcrumbs": {\n+      "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n+      "items": [\n+        {\n+          "@id": "http://localhost:55001/plone/front-page",\n+          "title": "Welcome to Plone"\n+        }\n+      ]\n+    },\n+    "navigation": {\n+      "@id": "http://localhost:55001/plone/front-page/@navigation",\n+      "items": [\n+        {\n+          "@id": "http://localhost:55001/plone",\n+          "title": "Home"\n+        },\n+        {\n+          "@id": "http://localhost:55001/plone/front-page",\n+          "title": "Welcome to Plone"\n+        }\n+      ]\n+    },\n+    "\xe2\x80\xa6"\n+}\n+```\n+\n+Changelog:\n+\n+- Rename `url` attribute on navigation and breadcrumb to `@id`. [timo]\n+\n+Pull Request:\n+\n+- <https://github.com/plone/plone.restapi/pull/459>\n+\n+\n+## Upgrading to `plone.restapi` 1.0a25\n+\n+`plone.restapi` 1.0a25 introduced three breaking changes:\n+\n+- Remove `@components` navigation and breadcrumbs.\n+  Use top level `@navigation` and `@breadcrumb` endpoints instead. [timo]\n+- Remove `sharing` attributes from `GET` response. [timo, jaroel]\n+- Convert `richtext` using `.output_relative_to`.\n+  Direct conversion from `RichText` is no longer supported as we *always* need a context for the `ITransformer`. [jaroel]\n+\n+\n+### Remove @components endpoint\n+\n+`plone.restapi` 1.0a25 removed the `@components` endpoint which used to provide a {ref}`navigation` and a {ref}`breadcrumbs` endpoint.\n+\n+Instead of using `@components/navigation`:\n+\n+```\n+http://localhost:8080/Plone/@components/navigation\n+```\n+\n+Use just `@navigation`:\n+\n+```\n+http://localhost:8080/Plone/@navigation\n+```\n+\n+Instead of using `@components/breadcrumbs`:\n+\n+```\n+http://localhost:8080/Plone/@components/breadcrumbs\n+```\n+\n+Use just `@breadcrumbs`:\n+\n+```\n+http://localhost:8080/Plone/@breadcrumbs\n+```\n+\n+Changelog:\n+\n+- Remove `@components` navigation and breadcrumbs.\n+  Use top level `@navigation` and `@breadcrumb` endpoints instead. [timo]\n+\n+Pull Request:\n+\n+- <https://github.com/plone/plone.restapi/pull/425>\n+\n+\n+### Remove `sharing` attribute\n+\n+The `sharing` attribute was removed from all content `GET` responses:\n+\n+```json\n+"sharing": {\n+  "@id": "http://localhost:55001/plone/collection/@sharing",\n+  "title": "Sharing"\n+},\n+```\n+\n+Use the {ref}`sharing` endpoint that can be expanded instead.\n+\n+Changelog:\n+\n+- Remove `sharing` attributes from `GET` response. [timo, jaroel]\n+\n+Pull Request:\n+\n+- <https://github.com/plone/plone.restapi/commit/1b5e9e3a74df22e53b674849e27fa4b39b792b8c>\n+\n+\n+### Convert `richtext` using `.output_relative_to`\n+\n+Use `.output_relative_to` to convert `richtext`.\n+\n+Changelog:\n+\n+- Convert `richtext` using `.output_relative_to.`\n+  Direct conversion from `RichText` is no longer supported as we *always* need a context for the `ITransformer`. [jaroel]\n+\n+Pull Request:\n+\n+- <https://github.com/plone/plone.restapi/pull/428>\n+\n+\n+## Upgrading to `plone.restapi` 1.0a17\n+\n+`plone.restapi` 1.0a17 changed the serialization of the `richtext` "text" field for content objects from using `raw` (a Unicode string with the original input markup):\n+\n+```json\n+"text": {\n+  "content-type": "text/plain",\n+  "data": "Lorem ipsum",\n+  "encoding": "utf-8"\n+},\n+```\n+\n+to using `output` (a Unicode object representing the transformed output):\n+\n+```json\n+"text": {\n+  "content-type": "text/plain",\n+  "data": "<p>Lorem ipsum</p>",\n+  "encoding": "utf-8"\n+},\n+```\n+\n+Changelog:\n+\n+- Change `RichText` field value to use `output` instead of `raw` to fix inline paths.\n+  This fixes #302. [erral]\n+\n+Pull Request:\n+\n+- <https://github.com/plone/plone.restapi/pull/346>\ndiff --git a/docs/source/upgrade-guide.rst b/docs/source/upgrade-guide.rst\ndeleted file mode 100644\nindex dfc40643b..000000000\n--- a/docs/source/upgrade-guide.rst\n+++ /dev/null\n@@ -1,790 +0,0 @@\n-Upgrade Guide\n-=============\n-\n-This upgrade guide lists all breaking changes in plone.restapi and explains the necessary steps that are needed to upgrade to the lastest version.\n-\n-Upgrading to plone.restapi 7.x\n-------------------------------\n-\n-Navigation endpoint has been refactored, and now its behavior is consistent regarding the ``items`` attribute.\n-Now the ``items`` attribute is present even if the element of the tree does not have children elements.\n-This might effect to some login in JavaScript specially, if the condition is checking for the existance of the attribute and expect to be ``undefined``, since this change it will be an empty array.\n-\n-Upgrading to plone.restapi 6.x\n-------------------------------\n-\n-plone.restapi 6.0.0 removes the IAPIRequest marker interface (https://github.com/plone/plone.restapi/pull/819).\n-\n-It also ships with a fix that prevents converting bytestring ids to unicode ids when reordering on Python 2 (https://github.com/plone/plone.restapi/issues/827).\n-\n-All versions before plone.restapi 6.0.0 are potentially affected by this issue.\n-\n-You may be affected by this issue and should run the fix if:\n-\n-- You used the PATCH "ordering" functionality of plone.restapi\n-- Were using Python 2 at that point\n-- Are seeing issues with objectIds() returning mixed string types\n-\n-If you need to fix object ids you can do one of the following:\n-\n-- Use the browser-view ``@@plone-restapi-upgrade-fix-ordering`` as a "Manager"\n-  to fix all folderish content types in your Plone site.\n-- Run the helper function\n-  ``ensure_child_ordering_object_ids_are_native_strings``\n-  from ``plone.restapi.upgrades.ordering`` for all affected objects. You could\n-  do this in a custom upgrade-step implemented in your policy.\n-\n-We expect that most content won\'t actually be affected. See\n-https://github.com/plone/plone.restapi/issues/827 for more details.\n-\n-\n-Upgrading to plone.restapi 5.x\n-------------------------------\n-\n-plone.restapi 5.0.0 introduces the following breaking change:\n-\n-- Rename tiles behavior and fields to blocks, migration step. [timo, sneridagh] (#821)\n-\n-The "tiles" field has been renamed to "blocks" and the "tiles_layout" field to "blocks_layout". This changes the response format from::\n-\n-  {\n-    "@id": "http://localhost:55001/plone/my-document",\n-    ...\n-    "tiles_layout": [\n-      "#title-1",\n-      "#description-1",\n-      "#image-1"\n-    ],\n-    "tiles": {\n-      ...\n-    }\n-  }\n-\n-to::\n-\n-  {\n-    "@id": "http://localhost:55001/plone/my-document",\n-    ...\n-    "blocks_layout": [\n-      "#title-1",\n-      "#description-1",\n-      "#image-1"\n-    ],\n-    "blocks": {\n-      ...\n-    }\n-  }\n-\n-This change affects the GET, PATCH and POST formats. Though, it should only affect you if you use Volto.\n-\n-\n-Upgrading to plone.restapi 4.x\n-------------------------------\n-\n-plone.restapi 4.0.0 introduces the following breaking changes:\n-\n-1) Fields with vocabularies now return the ``token`` and ``title`` instead of the stored value.\n-2) Choice and list fields return a hyperlink to a vocabulary instead of ``choices``, ``enum``, and ``enumNames``.\n-3) Serialize widget parameters into a ``widgetOptions`` object instead of adding them to the top level of the schema property.\n-4) The vocabularies endpoint does no longer returns an ``@id`` for terms, the results are batched, and terms are now listed as ``items`` instead of ``terms`` to match other batched responses.\n-\n-\n-Serialization and Deserialization of fields with vocabularies\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-The serialization of fields with vocabularies (e.g. ``Choice``) now return the\n-`token` and the `title` of the vocabulary term instead of the stored value.\n-This is allows displaying the term (title) without additionally querying the\n-vocabulary. However it\'s necessary to adopt existing client implementations.\n-\n-The date and time controlpanel previously returned a number for the\n-``first_weekday`` property::\n-\n-  {\n-    "@id": "http://localhost:55001/plone/@controlpanels/date-and-time",\n-    "data": {\n-        ...\n-        "first_weekday": 0,\n-        ...\n-    }\n-    ...\n-  }\n-\n-Now it returns an object with a token and a title::\n-\n-  {\n-    "@id": "http://localhost:55001/plone/@controlpanels/date-and-time",\n-    "data": {\n-        ...\n-        "first_weekday": {\n-            "title": "Monday",\n-            "token": "0"\n-        },\n-        ...\n-    }\n-    ...\n-  }\n-\n-Deserialization accepts objects that contain a token, but also just the token\n-or the value.\n-\n-However it\'s highly recommended to always use the token as vocabulary terms\n-may contain values that are not JSON serializable.\n-\n-\n-Choice and List fields return link to vocabulary instead of the values\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-Choice and List fields using named vocabularies are now serialized\n-with a ``vocabulary`` property giving the URL of the ``@vocabularies``\n-endpoint for the vocabulary instead of including ``choices``,\n-``enum`` and ``enumNames`` inline.\n-\n-Old Response::\n-\n-    "choices": [\n-        [\n-            "de",\n-            "Deutsch"\n-        ],\n-        [\n-            "en",\n-            "English"\n-        ],\n-    ],\n-    "enum": [\n-      "de",\n-      "en",\n-    ],\n-    "enumNames": [\n-      "Deutsch",\n-      "English",\n-    ],\n-\n-New response::\n-\n-    "vocabulary": {\n-        "@id": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.CaptchaVocabulary"\n-    },\n-\n-Serialize widget parameters into a ``widgetOptions`` object\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-Serialize widget parameters into a ``widgetOptions`` object instead of adding them to the top level of the schema property.\n-\n-Old response::\n-\n-      "vocabulary": "plone.app.vocabularies.Users"\n-\n-New response::\n-\n-      "widgetOptions": {\n-        "pattern_options": {\n-          "recentlyUsed": true\n-        },\n-        "vocabulary": { "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users" }\n-      }\n-\n-\n-Example: Vocabularies Subjects Field\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-The ``subjects`` field is now serialized as an ``array``\n-of ``string`` items using the ``plone.app.vocabularies.Keywords`` vocabulary.\n-\n-Old response::\n-\n-    "subjects": {\n-      "choices": [...],\n-      "enum": [...],\n-      "enumNames": [...],\n-    }\n-    "type": "string"\n-\n-New response::\n-\n-    "additionalItems": true,\n-    "type": "array",\n-    "uniqueItems": true,\n-    "widgetOptions": {\n-        "vocabulary": {\n-          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n-      }\n-    },\n-    "items": {\n-      "description": "",\n-      "title": "",\n-      "type": "string"\n-    },\n-\n-Example: Available Time Zones Field (vocabulary in ``items``)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-Old response::\n-\n-    "available_timezones": {\n-      "additionalItems": true,\n-      "default": [],\n-      "description": "The timezones, which should be available for the portal. Can be set for users and events",\n-      "items": {\n-        "choices": [\n-          [\n-            "Africa/Abidjan",\n-            "Africa/Abidjan"\n-          ],\n-          [\n-            "Africa/Accra",\n-            "Africa/Accra"\n-          ],\n-          ...\n-        "enum": [\n-          ...\n-        ],\n-        "enumNames": [\n-          ...\n-        ]\n-      },\n-      title: "Available timezones",\n-      type: "array",\n-      uniqueItems: true,\n-    }\n-\n-New response::\n-\n-    "available_timezones": {\n-      "additionalItems": true,\n-      "default": [],\n-      "description": "The timezones, which should be available for the portal. Can be set for users and events",\n-      "items": {\n-        "description": "",\n-        "title": "",\n-        "type": "string",\n-        "vocabulary": {\n-          "@id": "http://localhost:8080/Plone/@vocabularies/plone.app.vocabularies.Timezones"\n-        }\n-      },\n-      "title": "Available timezones",\n-      "type": "array",\n-      "uniqueItems": true\n-    },\n-\n-Example: Weekday Field (vocabulary in main property)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-Old response::\n-\n-    "first_weekday": {\n-      "choices": [\n-        [\n-          "0",\n-          "Monday"\n-        ],\n-        [\n-          "1",\n-          "Tuesday"\n-        ],\n-        [\n-          "2",\n-          "Wednesday"\n-        ],\n-        [\n-          "3",\n-          "Thursday"\n-        ],\n-        [\n-          "4",\n-          "Friday"\n-        ],\n-        [\n-          "5",\n-          "Saturday"\n-        ],\n-        [\n-          "6",\n-          "Sunday"\n-        ]\n-      ],\n-      "description": "First day in the week.",\n-      "enum": [\n-        "0",\n-        "1",\n-        "2",\n-        "3",\n-        "4",\n-        "5",\n-        "6"\n-      ],\n-      "enumNames": [\n-        "Monday",\n-        "Tuesday",\n-        "Wednesday",\n-        "Thursday",\n-        "Friday",\n-        "Saturday",\n-        "Sunday"\n-      ],\n-      "title": "First weekday",\n-      "type": "string"\n-    },\n-\n-New response::\n-\n-    "first_weekday": {\n-      "description": "First day in the week.",\n-      "title": "First weekday",\n-      "type": "string",\n-      "vocabulary": {\n-        "@id": "http://localhost:8080/Plone/@vocabularies/plone.app.vocabularies.Weekdays"\n-      }\n-    },\n-\n-Vocabularies Endpoint\n-^^^^^^^^^^^^^^^^^^^^^\n-\n-The vocabularies endpoint does no longer returns an ``@id`` for terms.\n-\n-The results are batched, and terms are now listed as ``items`` instead of ``terms`` to match other batched responses.\n-\n-Batch size is 25 by default but can be overridden using the ``b_size`` parameter.\n-\n-Old response::\n-\n-    {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n-      "terms": [\n-        {\n-          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Collection",\n-          "title": "Collection",\n-          "token": "Collection"\n-        },\n-        ...\n-      ]\n-    }\n-\n-New response::\n-\n-    {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n-      "items": [\n-          {\n-            "title": "Collection",\n-            "token": "Collection"\n-          },\n-          ...\n-      ],\n-      "items_total": 12\n-    }\n-\n-\n-Upgrading to plone.restapi 3.x\n-------------------------------\n-\n-Image scales\n-^^^^^^^^^^^^\n-\n-Image download URLs and image scale URLs are created using the UID based url formats. This allows Plone to create different URLs when the image changes and thus ensuring caches are updated.\n-\n-Old Response::\n-\n-     {\n-       "icon": {\n-         "download": "http://localhost:55001/plone/image/@@images/image/icon",\n-         "height": 32,\n-         "width": 24\n-       },\n-       "large": {\n-         "download": "http://localhost:55001/plone/image/@@images/image/large",\n-         "height": 768,\n-         "width": 576\n-       },\n-       ...\n-      }\n-\n-New Response::\n-\n-     {\n-       "icon": {\n-         "download": "http://localhost:55001/plone/image/@@images/8eed3f80-5e1f-4115-85b8-650a10a6ca84.png",\n-         "height": 32,\n-         "width": 24\n-       },\n-       "large": {\n-         "download": "http://localhost:55001/plone/image/@@images/0d1824d1-2672-4b62-9277-aeb220d3bf15.png",\n-         "height": 768,\n-         "width": 576\n-       },\n-      ...\n-      }\n-\n-\n-@sharing endpoint\n-^^^^^^^^^^^^^^^^^\n-\n-The ``available_roles`` property in the response to a GET request to the\n-``@sharing`` endpoint has changed: Instead of a flat list of strings, it now\n-contains a list of dicts, with the role ID and their translated title:\n-\n-Old Response::\n-\n-  HTTP/1.1 200 OK\n-  Content-Type: application/json\n-\n-  {\n-    "available_roles": [\n-      "Contributor",\n-      "Editor",\n-      "Reviewer",\n-      "Reader"\n-    ],\n-    "entries": [\n-        "..."\n-    ],\n-    "inherit": true\n-  }\n-\n-\n-New Response::\n-\n-  HTTP/1.1 200 OK\n-  Content-Type: application/json\n-\n-  {\n-    "available_roles": [\n-      {\n-        "id": "Contributor",\n-        "title": "Can add"\n-      },\n-      {\n-        "id": "Editor",\n-        "title": "Can edit"\n-      },\n-      {\n-        "id": "Reader",\n-        "title": "Can view"\n-      },\n-      {\n-        "id": "Reviewer",\n-        "title": "Can review"\n-      }\n-    ],\n-    "entries": [\n-        "..."\n-    ],\n-    "inherit": true\n-  }\n-\n-\n-Custom Content Deserializers\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-If you have implemented custom content deserializers, you have to handle the\n-new ``create`` keyword in the ``__call__`` method, which determines if deserialization\n-is performed during object creation or while updating an object.\n-\n-Deserializers should only fire an ``IObjectModifiedEvent`` event if an object\n-has been updated. They should not fire it, when a new object has been created.\n-\n-See `Dexterity content deserializer <https://github.com/plone/plone.restapi/blob/master/src/plone/restapi/deserializer/dxcontent.py>`_ for an example.\n-\n-\n-Upgrading to plone.restapi 2.x\n-------------------------------\n-\n-plone.restapi 2.0.0 converts all datetime, DateTime and time to UTC before serializing.\n-The translations endpoint becomes "expandable", which introduces the following breaking changes.\n-\n-Translations\n-^^^^^^^^^^^^\n-\n-When using the `@translations` endpoint in plone.restapi 1.x, the endpoint returned a `language` key\n-with the content object\'s language and a `translations` key with all its translations.\n-\n-Now, as the endpoint is expandable we want the endpoint to behave like the other expandable endpoints.\n-As top level information we only include the name of the endpoint on the `@id` attribute and the actual\n-translations of the content object in an attribute called `items`.\n-\n-This means that now the JSON response to a GET request to the :ref:`translations` endpoint does not\n-include anymore the language of the actual content item and the translations in an attribute called\n-`items` instead of `translations`.\n-\n-Old response::\n-\n-  HTTP/1.1 200 OK\n-  Content-Type: application/json\n-\n-  {\n-    "@id": "http://localhost:55001/plone/en/test-document",\n-    "language": "en",\n-    "translations": [\n-      {\n-        "@id": "http://localhost:55001/plone/es/test-document",\n-        "language": "es"\n-      }\n-    ]\n-  }\n-\n-New response::\n-\n-  HTTP/1.1 200 OK\n-  Content-Type: application/json\n-\n-  {\n-    "@id": "http://localhost:55001/plone/en/test-document/@translations",\n-    "items": [\n-      {\n-        "@id": "http://localhost:55001/plone/es/test-document",\n-        "language": "es"\n-      }\n-    ]\n-  }\n-\n-\n-Upgrading to plone.restapi 1.0b1\n---------------------------------\n-\n-In plone.restapi 1.0b1 the \'url\' attribute on the :ref:`navigation` and :ref:`breadcrumbs` endpoint was renamed to \'@id\' to be consistent with other links/URLs used in\n-plone.restapi.\n-\n-The JSON response to a GET request to the :ref:`breadcrumbs` endpoint changed from using the \'url\' attribute for \'items\'::\n-\n-    HTTP/1.1 200 OK\n-    Content-Type: application/json\n-\n-    {\n-      "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n-      "items": [\n-        {\n-          "title": "Welcome to Plone",\n-          "url": "http://localhost:55001/plone/front-page"\n-        }\n-      ]\n-    }\n-\n-to using the \'@id\' for the URL of \'items\'::\n-\n-    HTTP/1.1 200 OK\n-    Content-Type: application/json\n-\n-    {\n-      "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n-      "items": [\n-        {\n-          "@id": "http://localhost:55001/plone/front-page",\n-          "title": "Welcome to Plone"\n-        }\n-      ]\n-    }\n-\n-The JSON response to a GET request to the :ref:`navigation` endpoint changed from using the \'url\' attribute for \'items\'::\n-\n-    HTTP/1.1 200 OK\n-    Content-Type: application/json\n-\n-    {\n-      "@id": "http://localhost:55001/plone/front-page/@navigation",\n-      "items": [\n-        {\n-          "title": "Home",\n-          "url": "http://localhost:55001/plone",\n-        },\n-        {\n-          "title": "Welcome to Plone",\n-          "url": "http://localhost:55001/plone/front-page"\n-        }\n-      ]\n-    }\n-\n-to using the \'@id\' for the URL of \'items\'::\n-\n-    HTTP/1.1 200 OK\n-    Content-Type: application/json\n-\n-    {\n-      "@id": "http://localhost:55001/plone/front-page/@navigation",\n-      "items": [\n-        {\n-          "@id": "http://localhost:55001/plone",\n-          "title": "Home"\n-        },\n-        {\n-          "@id": "http://localhost:55001/plone/front-page",\n-          "title": "Welcome to Plone"\n-        }\n-      ]\n-    }\n-\n-The expansion mechanism is also affected by this change when :ref:`navigation` or :ref:`breadcrumbs` endpoints are expanded.\n-\n-From using \'url\' in the breadcrumb \'items\'::\n-\n-    {\n-      "@components": {\n-        "breadcrumbs": {\n-          "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n-          "items": [\n-            {\n-              "title": "Welcome to Plone",\n-              "url": "http://localhost:55001/plone/front-page"\n-            }\n-          ]\n-        },\n-        "navigation": {\n-          "@id": "http://localhost:55001/plone/front-page/@navigation",\n-          "items": [\n-            {\n-              "title": "Home",\n-              "url": "http://localhost:55001/plone",\n-            },\n-            {\n-              "title": "Welcome to Plone",\n-              "url": "http://localhost:55001/plone/front-page"\n-            }\n-          ]\n-        },\n-        ...\n-    }\n-\n-to using \'@id\' in the breadcrumb \'items\'::\n-\n-    {\n-      "@components": {\n-        "breadcrumbs": {\n-          "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n-          "items": [\n-            {\n-              "@id": "http://localhost:55001/plone/front-page",\n-              "title": "Welcome to Plone"\n-            }\n-          ]\n-        },\n-        "navigation": {\n-          "@id": "http://localhost:55001/plone/front-page/@navigation",\n-          "items": [\n-            {\n-              "@id": "http://localhost:55001/plone",\n-              "title": "Home"\n-            },\n-            {\n-              "@id": "http://localhost:55001/plone/front-page",\n-              "title": "Welcome to Plone"\n-            }\n-          ]\n-        },\n-        ...\n-    }\n-\n-Changelog::\n-\n-- Rename \'url\' attribute on navigation / breadcrumb to \'@id\'. [timo]\n-\n-Pull Request:\n-\n-- https://github.com/plone/plone.restapi/pull/459\n-\n-\n-Upgrading to plone.restapi 1.0a25\n----------------------------------\n-\n-plone.restapi 1.0a25 introduced three breaking changes:\n-\n-- Remove @components navigation and breadcrumbs. Use top level @navigation and\n-  @breadcrumb endpoints instead. [timo]\n-\n-- Remove "sharing" attributes from GET response. [timo,jaroel]\n-\n-- Convert richtext using .output_relative_to. Direct conversion from RichText\n-  if no longer supported as we *always* need a context for the ITransformer. [jaroel]\n-\n-Remove @components endpoint\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-plone.restapi 1.0a25 removed the @components endpoint which used to provide a\n-:ref:`navigation` and a :ref:`breadcrumbs` endpoint.\n-\n-Instead of using "@components/navigation"::\n-\n-  http://localhost:8080/Plone/@components/navigation\n-\n-Use just "@navigation"::\n-\n-  http://localhost:8080/Plone/@navigation\n-\n-Instead of using "@components/breadcrumbs"::\n-\n-  http://localhost:8080/Plone/@components/breadcrumbs\n-\n-Use just "@breadcrumbs"::\n-\n-  http://localhost:8080/Plone/@breadcrumbs\n-\n-Changelog::\n-\n-- Remove @components navigation and breadcrumbs. Use top level @navigation and @breadcrumb endpoints instead. [timo]\n-\n-Pull Request:\n-\n-- https://github.com/plone/plone.restapi/pull/425\n-\n-\n-Remove "sharing" attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-The "sharing" attribute was removed from all content GET responses::\n-\n-  "sharing": {\n-    "@id": "http://localhost:55001/plone/collection/@sharing",\n-    "title": "Sharing"\n-  },\n-\n-Use the :ref:`sharing` endpoint that can be expanded instead.\n-\n-Changelog::\n-\n-- Remove "sharing" attributes from GET response. [timo,jaroel]\n-\n-Pull Request:\n-\n-- https://github.com/plone/plone.restapi/commit/1b5e9e3a74df22e53b674849e27fa4b39b792b8c\n-\n-\n-Convert richtext using .output_relative_to\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-Using ".output_relative_to" in the\n-\n-Changelog::\n-\n-- Convert richtext using .output_relative_to. Direct conversion from RichText if no longer supported as we *always* need a context for the ITransformer. [jaroel]\n-\n-Pull Request:\n-\n-https://github.com/plone/plone.restapi/pull/428\n-\n-\n-Upgrading to plone.restapi 1.0a17\n----------------------------------\n-\n-plone.restapi 1.0a17 changed the serialization of the rich-text "text" field for content objects from using \'raw\' (a unicode string with the original input markup)::\n-\n-  "text": {\n-    "content-type": "text/plain",\n-    "data": "Lorem ipsum",\n-    "encoding": "utf-8"\n-  },\n-\n-to using \'output\' (a unicode object representing the transformed output)::\n-\n-  "text": {\n-    "content-type": "text/plain",\n-    "data": "<p>Lorem ipsum</p>",\n-    "encoding": "utf-8"\n-  },\n-\n-Changelog::\n-\n-- Change RichText field value to use \'output\' instead of \'raw\' to fix inline paths. This fixes #302. [erral]\n-\n-Pull Request:\n-\n-https://github.com/plone/plone.restapi/pull/346\n-\ndiff --git a/docs/source/users.md b/docs/source/users.md\nnew file mode 100644\nindex 000000000..8b925f81a\n--- /dev/null\n+++ b/docs/source/users.md\n@@ -0,0 +1,288 @@\n+# Users\n+\n+Available users in a Plone site can be created, queried, updated, and deleted by interacting with the `/@users` endpoint on portal root.\n+This action requires an authenticated user:\n+\n+\n+## List Users\n+\n+To retrieve a list of all current users in the portal, call the `/@users` endpoint with a `GET` request:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users.req\n+```\n+\n+The server will respond with a list of all users in the portal:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users.resp\n+:language: http\n+```\n+\n+This only works for Manager users.\n+Anonymous users, or logged-in users without Manager rights, are not allowed to list users.\n+This is the example as an anonymous user:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_anonymous.req\n+```\n+\n+The server will return a {term}`401 Unauthorized` status code.\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_anonymous.resp\n+:language: http\n+```\n+\n+And this one as a user without the proper rights:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_unauthorized.req\n+```\n+\n+The server will return a {term}`401 Unauthorized` status code.\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_unauthorized.resp\n+:language: http\n+```\n+\n+The endpoint supports some basic filtering:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_filtered_by_username.req\n+```\n+\n+The server will respond with a list of the filtered users in the portal where the username starts with the `query` parameter\'s value:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n+:language: http\n+```\n+\n+The endpoint also takes a `limit` parameter.\n+Its default is a maximum of 25 users at a time for performance reasons.\n+\n+\n+## Create User\n+\n+To create a new user, send a `POST` request to the global `/@users` endpoint with a JSON representation of the user you want to create in the body:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_created.req\n+```\n+\n+```{note}\n+By default, `username`, and `password` are required fields.\n+If email login is enabled, `email` and `password` are required fields.\n+All other fields in the example are optional.\n+\n+The field `username` is *not allowed* when email login is *enabled*.\n+```\n+\n+If the user has been created successfully, the server will respond with a status {term}`201 Created`.\n+The `Location` header contains the URL of the newly created user, and the resource representation is in the payload:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_created.resp\n+:language: http\n+```\n+\n+If no roles have been specified, then a `Member` role is added as a sensible default.\n+\n+## Read User\n+\n+To retrieve all details for a particular user, send a `GET` request to the `/@users` endpoint and append the user ID to the URL:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_get.req\n+```\n+\n+The server will respond with a {term}`200 OK` status code and the JSON representation of the user in the body:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_get.resp\n+:language: http\n+```\n+\n+The key `roles` lists the globally defined roles for the user.\n+\n+Only users with Manager rights are allowed to get other users\' information:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_unauthorized_get.req\n+```\n+\n+If the user lacks these rights, the server will respond with a {term}`401 Unauthorized` status code:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_unauthorized_get.resp\n+:language: http\n+```\n+\n+Anonymous users are not allowed to get users\' information:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_anonymous_get.req\n+```\n+\n+If the user is anonymous, the server will respond with a {term}`401 Unauthorized` status code:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_anonymous_get.resp\n+:language: http\n+```\n+\n+But each user is allowed to get its own information:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_authorized_get.req\n+```\n+\n+In this case, the server will respond with a {term}`200 OK` status code and the JSON representation of the user in the body:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_authorized_get.resp\n+:language: http\n+```\n+\n+\n+## Update User\n+\n+To update the settings of a user, send a `PATCH` request with the user details you want to amend to the URL of that particular user.\n+For example, if you want to update the email address of the admin user, do the following:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_update.req\n+```\n+\n+A successful response to a `PATCH` request will be indicated by a {term}`204 No Content` response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_update.resp\n+:language: http\n+```\n+\n+```{note}\n+The `roles` object is a mapping of a role and a boolean indicating adding or removing.\n+```\n+\n+Any user is able to update their own properties and password (if allowed) by using the same request.\n+\n+The user portrait or avatar can also be updated using the same serialization as the file one:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_update_portrait.req\n+```\n+\n+A successful response to a `PATCH` request will be indicated by a {term}`204 No Content` response.\n+Then when requesting the user, the portrait URL should be on the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_update_portrait_get.resp\n+:language: http\n+```\n+\n+Adding the portrait via the `@user` endpoint does not scale its size because it is assumed that the frontend will take care of resizing or cropping.\n+If you still want Plone to take care of image scaling using the default Plone behavior for portraits, you have to add the `scale` attribute to the request:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_update_portrait_scale.req\n+```\n+\n+\n+## Delete User\n+\n+To delete a user, send a `DELETE` request to the `/@users` endpoint and append the user ID of the user you want to delete.\n+For example, to delete the user with the ID `johndoe`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_delete.req\n+```\n+\n+A successful response will be indicated by a {term}`204 No Content` response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_delete.resp\n+:language: http\n+```\n+\n+\n+## User registration\n+\n+Plone allows you to enable user self registration.\n+If it is enabled, then an anonymous user can register a new user using the user creation endpoint.\n+This new user will have the role `Member` by default, just the same as the Plone registration process.\n+\n+To create a new user, send a `POST` request to the `@users` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_add.req\n+```\n+\n+If the user should receive an email to set her password, you should pass `"sendPasswordReset": true` in the JSON body of the request.\n+Keep in mind that Plone will send a URL that points to the URL of the Plone site, which might just be your API endpoint.\n+\n+If the user has been created, the server will respond with a {term}`201 Created` response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_add.resp\n+:language: http\n+```\n+\n+\n+## Reset User Password\n+\n+Plone allows to reset a password for a user by sending a `POST` request to the user resource and appending `/reset-password` to the URL:\n+\n+```\n+POST /plone/@users/noam/reset-password HTTP/1.1\n+Host: localhost:8080\n+Accept: application/json\n+```\n+\n+The server will respond with a {term}`200 OK` response, and send an email to the user to reset her password.\n+\n+The token that is part of the reset URL in the email can be used to authorize setting a new password:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_reset.req\n+```\n+\n+\n+### Reset Own Password\n+\n+Plone also allows a user to reset her own password directly without sending an email.\n+The endpoint and the request is the same as above, but now the user can send both the old and new passwords in the payload:\n+\n+```\n+POST /plone/@users/noam/reset-password HTTP/1.1\n+Host: localhost:8080\n+Accept: application/json\n+Content-Type: application/json\n+\n+{\n+  \'old_password\': \'secret\',\n+  \'new_password\': \'verysecret\',\n+}\n+```\n+\n+The server will respond with a {term}`200 OK` response without sending an email.\n+\n+To set the password with the old password, you need either the `Set own password` or the `plone.app.controlpanel.UsersAndGroups` permission.\n+\n+If an API consumer tries to send a password in the payload that is not the same as the currently logged in user, the server will respond with a {term}`400 Bad Request` response.\n+\n+\n+### Return Values\n+\n+- {term}`200 OK`\n+- {term}`400 Bad Request`\n+- `403` (Unknown Token)\n+- `403` (Expired Token)\n+- `403` (Wrong user)\n+- `403` (Not allowed)\n+- `403` (Wrong password)\n+- {term}`500 Internal Server Error` (server fault, can not recover internally)\ndiff --git a/docs/source/users.rst b/docs/source/users.rst\ndeleted file mode 100644\nindex 92211c209..000000000\n--- a/docs/source/users.rst\n+++ /dev/null\n@@ -1,242 +0,0 @@\n-Users\n-=====\n-\n-Available users in a Plone site can be created, queried, updated and deleted by interacting with the ``/@users`` endpoint on portal root (requires an authenticated user):\n-\n-List Users\n-----------\n-\n-To retrieve a list of all current users in the portal, call the ``/@users`` endpoint with a ``GET`` request:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users.req\n-\n-The server will respond with a list of all users in the portal:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users.resp\n-   :language: http\n-\n-\n-This only works for Manager users, anonymous users or logged-in users without Manager rights are now allowed to list users. This is the example as an anonymous user:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_anonymous.req\n-\n-The server will return a 401 Unauthorized status code\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_anonymous.resp\n-   :language: http\n-\n-\n-And this one as an user without the proper rights:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_unauthorized.req\n-\n-The server will return a 401 Unauthorized status code\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_unauthorized.resp\n-   :language: http\n-\n-\n-The endpoint supports some basic filtering:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_filtered_by_username.req\n-\n-The server will respond with a list the filtered users in the portal with username starts with the query.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n-   :language: http\n-\n-The endpoint also takes a ``limit`` parameter that defaults to a maximum of 25 users at a time for performance reasons.\n-\n-\n-Create User\n------------\n-\n-To create a new user, send a ``POST`` request to the global ``/@users`` endpoint with a JSON representation of the user you want to create in the body:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_created.req\n-\n-\n-.. note::\n-    By default, "username", and "password" are required fields. If email login is enabled, "email" and "password" are required fields. All other fields in the example are optional.\n-\n-    The field "username" is **not allowed** when email login is *enabled*.\n-\n-If the user has been created successfully, the server will respond with a status 201 (Created). The ``Location`` header contains the URL of the newly created user and the resource representation in the payload:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_created.resp\n-   :language: http\n-\n-If no roles has been specified, then a default ``Member`` role is added as a sensible default.\n-\n-\n-Read User\n----------\n-\n-To retrieve all details for a particular user, send a ``GET`` request to the ``/@users`` endpoint and append the user id to the URL:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_get.req\n-\n-The server will respond with a 200 OK status code and the JSON representation of the user in the body:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_get.resp\n-   :language: http\n-\n-The key \'roles\' lists the globally defined roles for the user.\n-\n-Only users with Manager rights are allowed to get other users\' information:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_unauthorized_get.req\n-\n-If the user lacks this rights, the server will respond with a 401 Unauthorized status code:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_unauthorized_get.resp\n-   :language: http\n-\n-Also anonymous users are not allowed to get users\' information:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_anonymous_get.req\n-\n-If the user is an anonymous one, the server will respond with a 401 Unauthorized status code:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_anonymous_get.resp\n-   :language: http\n-\n-But each user is allowed to get its own information.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_authorized_get.req\n-\n-In this case, the server will respond with a 200 OK status code and the JSON respresentation of the user in the body:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_authorized_get.resp\n-   :language: http\n-\n-Update User\n------------\n-\n-To update the settings of a user, send a ``PATCH`` request with the user details you want to amend to the URL of that particular user, e.g. if you want to update the email address of the admin user to:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_update.req\n-\n-A successful response to a PATCH request will be indicated by a :term:`204 No Content` response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_update.resp\n-   :language: http\n-\n-.. note::\n-  The \'roles\' object is a mapping of a role and a boolean indicating adding or removing.\n-\n-Any user is able to update their own properties and password (if allowed) by using the same request.\n-\n-The user portrait/avatar can also be updated using the same serialization as the file one:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_update_portrait.req\n-\n-A successful response to a PATCH request will be indicated by a :term:`204 No Content` response.\n-Then asking for the user the portrait URL should be on the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_update_portrait_get.resp\n-   :language: http\n-\n-Adding the portrait via the @user endpoint does not scale it since it\'s assumed that the frontend will take care of it (resizing/cropping).\n-If you still want that Plone to take care of the scaling using the default Plone behavior for portraits, you have to add the ``scale`` attribute to the request:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_update_portrait_scale.req\n-\n-Delete User\n------------\n-\n-To delete a user send a ``DELETE`` request to the ``/@users`` endpoint and append the user id of the user you want to delete, e.g. to delete the user with the id johndoe:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_delete.req\n-\n-A successful response will be indicated by a :term:`204 No Content` response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_delete.resp\n-   :language: http\n-\n-\n-User registration\n------------------\n-\n-Plone allows you to enable the auto registration of users.\n-If it is enabled, then an anonymous user can register a new user using the user creation endpoint.\n-This new user will have the role ``Member`` by default as the Plone registration process also does.\n-\n-To create a new user send a POST request to the \'@users\' endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_add.req\n-\n-If the user should receive an email to set her password, you should pass \'sendPasswordReset": true\' in the JSON body of the request.\n-Keep in mind that Plone will send a URL that points to the URL of the Plone site, which might just be your API endpoint.\n-\n-If the user has been created, the server will respond with a :term:`201 Created` response:\n-\n-..  literalinclude:: ../../src/plone/restapi/tests/http-examples/users_add.resp\n-    :language: http\n-\n-\n-Reset User Password\n--------------------\n-\n-Plone allows to reset a password for a user by sending a POST request to the user resource and appending `/reset-password` to the URL::\n-\n-  POST /plone/@users/noam/reset-password HTTP/1.1\n-  Host: localhost:8080\n-  Accept: application/json\n-\n-The server will respond with a :term:`200 OK` response and send an email to the user to reset her password.\n-\n-The token that is part of the reset url in the email can be used to\n-authorize setting a new password:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_reset.req\n-\n-\n-Reset Own Password\n-^^^^^^^^^^^^^^^^^^\n-\n-Plone also allows a user to reset her own password directly without sending an email. The endpoint and the request is the same as above, but now the user can send the old password and the new password as payload::\n-\n-  POST /plone/@users/noam/reset-password HTTP/1.1\n-  Host: localhost:8080\n-  Accept: application/json\n-  Content-Type: application/json\n-\n-  {\n-    \'old_password\': \'secret\',\n-    \'new_password\': \'verysecret\',\n-  }\n-\n-The server will respond with a :term:`200 OK` response without sending an email.\n-\n-To set the password with the old password you need either the ``Set own password`` or the ``plone.app.controlpanel.UsersAndGroups`` permission.\n-\n-If an API consumer tries to send a password in the payload that is not the same as the currently logged in user, the server will respond with a :term:`400 Bad Request` response.\n-\n-\n-Return Values\n-^^^^^^^^^^^^^\n-\n-* :term:`200 OK`\n-* :term:`400 Bad Request`\n-* `403` (Unknown Token)\n-* `403` (Expired Token)\n-* `403` (Wrong user)\n-* `403` (Not allowed)\n-* `403` (Wrong password)\n-* :term:`500 Internal Server Error` (server fault, can not recover internally)\ndiff --git a/docs/source/vocabularies.md b/docs/source/vocabularies.md\nnew file mode 100644\nindex 000000000..0383d956e\n--- /dev/null\n+++ b/docs/source/vocabularies.md\n@@ -0,0 +1,227 @@\n+(vocabularies)=\n+\n+# Vocabularies and Sources\n+\n+Vocabularies are a set of allowed choices that back a particular field.\n+They contain so-called *terms* which represent those allowed choices.\n+Sources are similar, but are a more generic and dynamic concept.\n+\n+\n+## Concepts\n+\n+*Vocabularies* contain a list of terms.\n+These terms are usually tokenized, meaning that in addition to a term\'s value, it also has a `token`, which is a machine-friendly identifier for the term in 7-bit ASCII.\n+\n+```{note}\n+Since the underlying value of a term might not necessarily be serializable (it could be an arbitrary Python object), `plone.restapi` only exposes and accepts tokens.\n+It will transparently convert between tokens and values during serialization and deseralization.\n+For this reason, the following endpoints only support *tokenized* vocabularies and sources, and they do not expose the terms\' values.\n+```\n+\n+Terms can also have a `title`, which is intended to be the user-facing label for the term.\n+For vocabularies or sources whose terms are only tokenized but not titled, `plone.restapi` will fall back to using the token as the term title.\n+\n+*Sources* are similar to vocabularies, but they tend to be more dynamic in nature, and are often used for larger sets of terms.\n+They are also not registered with a global name like vocabularies, but are instead addressed via the field they are assigned to.\n+\n+*Query Sources* are sources that are capable of being queried or searched.\n+The source will then return only the subset of terms that match the query.\n+\n+The use of such a source is usually a strong indication that no attempt should be made to enumerate the full set of terms.\n+Instead, the source should only be queried, for example, by presenting the user with an autocomplete widget.\n+\n+Both vocabularies and sources can be context-sensitive.\n+This means that they take the context into account and their contents may therefore change depending on the context in which they are invoked.\n+\n+This section can only provide a basic overview of vocabularies and related concepts.\n+For a more in-depth explanation please refer to the [Plone documentation](https://docs.plone.org/develop/plone/forms/vocabularies.html).\n+\n+\n+## Endpoints overview\n+\n+In `plone.restapi` these three concepts are exposed through three separate endpoints, described in more detail below:\n+\n+- **`@vocabularies`**`/<vocab_name>`\n+- **`@sources`**`/<field_name>`\n+- **`@querysources`**`/<field_name>`**`?query=`**`<search_query>`\n+\n+While the `@vocabularies` and `@sources` endpoints allow *enumeration* of terms and optionally filter terms server-side, the `@querysources` endpoint *only* allows for searching the respective source.\n+\n+\n+## List all vocabularies\n+\n+```{eval-rst}\n+.. http:get:: (context)/@vocabularies\n+```\n+\n+To retrieve a list of all the available vocabularies, send a `GET` request to the `@vocabularies` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies.req\n+```\n+\n+The response will include a list with the URL (`@id`) and the names (`title`) of all the available vocabularies in Plone:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/vocabularies.resp\n+:language: http\n+```\n+\n+\n+## Get a vocabulary\n+\n+```{eval-rst}\n+.. http:get:: (context)/@vocabularies/(vocab_name)\n+```\n+\n+To enumerate the terms of a particular vocabulary, use the `@vocabularies` endpoint with the name of the vocabulary, for example `/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes`.\n+The endpoint can be used with the site root and content objects:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get.req\n+```\n+\n+The server will respond with a list of terms.\n+The title is purely for display purposes.\n+The token is what should be sent to the server to address that term.\n+\n+```{note}\n+Vocabulary terms will be *batched* if the size of the resultset exceeds the batch size.\n+See {doc}`batching` for more details on how to work with batched results.\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/vocabularies_get.resp\n+:language: http\n+```\n+\n+By default, the vocabularies are batched.\n+However, you can pass the parameter `b_size=-1` to force the endpoint to return all the terms, instead of a batched response.\n+\n+\n+### Filter Vocabularies\n+\n+```{eval-rst}\n+.. http:get:: (context)/@vocabularies/(vocab_name)?title=(filter_query)\n+```\n+\n+```{eval-rst}\n+.. http:get:: (context)/@vocabularies/(vocab_name)?token=(filter_query)\n+```\n+\n+```{eval-rst}\n+.. http:get:: (context)/@vocabularies/(vocab_name)?tokens=(filter_term1)&tokens=(filter_term2)&...\n+```\n+\n+Vocabulary terms can be filtered using the `title`, `token`, or `tokens` (array) parameter.\n+\n+Use the `title` parameter to filter vocabulary terms by title.\n+For example, search for all terms that contain the string `doc` in the title:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.resp\n+:language: http\n+```\n+\n+Use the `token` parameter to filter vocabulary terms by token.\n+This is useful when you have the `token`, and you need to retrieve the `title`.\n+For example, search for the term `doc` in the token:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp\n+:language: http\n+```\n+\n+```{note}\n+You must not filter by `title` and `token` at the same time.\n+The API returns a 400 response code if you do so.\n+```\n+\n+Use the `tokens` parameter to filter vocabulary terms by a list of tokens:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token_list.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token_list.resp\n+:language: http\n+```\n+\n+\n+## Get a source\n+\n+```{eval-rst}\n+.. http:get:: (context)/@sources/(field_name)\n+```\n+\n+To enumerate the terms of a field\'s source, use the `@sources` endpoint on a specific context, and pass the field name as a path parameter, for example, `/plone/doc/@sources/some_field`.\n+\n+Because sources are inherently tied to a specific field, this endpoint can only be invoked on content objects.\n+The source is addressed via the field name for which it is used, instead of a global name (which sources do not have).\n+\n+Otherwise, the endpoint behaves the same as the `@vocabularies` endpoint.\n+\n+Example:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/sources_get.req\n+```\n+\n+The server will respond with a list of terms.\n+The title is purely for display purposes.\n+The token is what should be sent to the server to address that term:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/sources_get.resp\n+:language: http\n+```\n+\n+```{note}\n+Technically there can be sources that are not iterable: ones that only implement `ISource`, but not `IIterableSource`.\n+These cannot be enumerated using the `@sources` endpoint.\n+It will respond with a corresponding error.\n+```\n+\n+\n+## Querying a query source\n+\n+```{eval-rst}\n+.. http:get:: (context)/@querysources/(field_name)?query=(search_query)\n+```\n+\n+Query sources\xe2\x80\x94sources that implement `IQuerySource`\xe2\x80\x94can be queried using this endpoint, by passing the search term in the `query` parameter.\n+This search term will be passed to the query source\'s `search()` method.\n+The source\'s results are returned.\n+\n+Example:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/querysources_get.req\n+```\n+\n+The server will respond with a list of terms.\n+The title is purely for display purposes.\n+The token is what should be sent to the server to address that term:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/querysources_get.resp\n+:language: http\n+```\n+\n+```{note}\n+Technically, even though sources that implement `IQuerySource` are required to implement `__iter__` as well when strictly following the interface interitance hierarchy, they usually are used in Plone in situations where their full contents should not or cannot be enumerated.\n+For example, imagine a source of all users, backed by a large LDAP.\n+\n+For this reason, `plone.restapi` takes the stance that the `IQuerySource` interface is a strong indication that this source should *only* be queried, and therefore does not support enumeration of terms via the `@querysources` endpoint.\n+\n+If the source does actually implement `IIterableSource` in addition to `IQuerySource`, it can still be enumerated via the `@sources` endpoint.\n+```\ndiff --git a/docs/source/vocabularies.rst b/docs/source/vocabularies.rst\ndeleted file mode 100644\nindex 7c1d820b9..000000000\n--- a/docs/source/vocabularies.rst\n+++ /dev/null\n@@ -1,181 +0,0 @@\n-.. _vocabularies:\n-\n-Vocabularies and Sources\n-========================\n-\n-Vocabularies are a set of allowed choices that back a particular field.\n-They contain so called *terms* which represent those allowed choices.\n-Sources are a similar, but are a more generic and dynamic concept.\n-\n-Concepts\n---------\n-\n-**Vocabularies** contain a list of terms.\n-These terms are usually tokenized, meaning that in addition to a term\'s value, it also has a ``token`` which is a machine-friendly identifier for the term (7bit ASCII).\n-\n-.. note::\n-    Since the underlying value of a term might not necessarily be serializable (it could be an arbitrary Python object), ``plone.restapi`` only exposes and accepts tokens, and will transparently convert between tokens and values during serialization / deseralization.\n-    For this reason, the following endpoints only support *tokenized* vocabularies / sources, and they do not expose the terms\' values.\n-\n-Terms can also have a ``title``, which is intended to be the user-facing label for the term.\n-For vocabularies or sources whose terms are only tokenized, but not titled, ``plone.restapi`` will fall back to using the token as the term title.\n-\n-**Sources** are similar to vocabularies, but they tend to be more dynamic in nature, and are often used for larger sets of terms.\n-They are also not registered with a global name like vocabularies, but are instead addressed via the field they are assigned to.\n-\n-**Query Sources** are sources that are capable of being queried / searched.\n-The source will then return only the subset of terms that match the query.\n-\n-The use of such a source is usually a strong indication that no attempt should be made to enumerate the full set of terms, but instead the source should only be queried, by presenting the user with an autocomplete widget for example.\n-\n-Both vocabularies and sources can be context-sensitive, meaning that they take the context into account and their contents may therefore change depending on the context they\'re invoked on.\n-\n-This section can only provide a basic overview of vocabularies and related concepts.\n-For a more in-depth explanation please refer to the `Plone documentation <https://docs.plone.org/develop/plone/forms/vocabularies.html>`_.\n-\n-Endpoints overview\n-------------------\n-\n-In ``plone.restapi`` these three concepts are exposed through three separate endpoints (described in more detail below):\n-\n-- **@vocabularies**/(vocab_name)\n-- **@sources**/(field_name)\n-- **@querysources**/(field_name) **?query=** (search_query)\n-\n-While the ``@vocabularies`` and ``@sources`` endpoints allow to *enumerate* terms (and optionally have terms filtered server-side), the ``@querysources`` endpoint **only** allows for searching the respective source.\n-\n-\n-List all vocabularies\n----------------------\n-\n-.. http:get:: (context)/@vocabularies\n-\n-To retrieve a list of all the available vocabularies, send a ``GET`` request to the ``@vocabularies`` endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/vocabularies.req\n-\n-The response will include a list with the URL (``@id``) and the names (``title``) of all the available vocabularies in Plone:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies.resp\n-   :language: http\n-\n-\n-Get a vocabulary\n-----------------\n-\n-.. http:get:: (context)/@vocabularies/(vocab_name)\n-\n-To enumerate the terms of a particular vocabulary, use the ``@vocabularies`` endpoint with the name of the vocabulary, e.g. ``/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes``.\n-The endpoint can be used with the site root and content objects.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get.req\n-\n-The server will respond with a list of terms.\n-The title is purely for display purposes.\n-The token is what should be sent to the server to address that term.\n-\n-.. note::\n-    Vocabulary terms will be **batched** if the size of the resultset exceeds the batch size.\n-    See :doc:`./batching` for more details on how to work with batched results.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get.resp\n-   :language: http\n-\n-By default, the vocabularies are batched. However, you can pass ``b_size=-1`` parameter to force the endpoint to return all the terms, not batched response.\n-\n-Filter Vocabularies\n-^^^^^^^^^^^^^^^^^^^\n-\n-.. http:get:: (context)/@vocabularies/(vocab_name)?title=(filter_query)\n-.. http:get:: (context)/@vocabularies/(vocab_name)?token=(filter_query)\n-.. http:get:: (context)/@vocabularies/(vocab_name)?tokens=(filter_term1)&tokens=(filter_term2)&...\n-\n-Vocabulary terms can be filtered using the ``title``, ``token`` or ``tokens`` (array) parameter.\n-\n-Use the ``title`` parameter to filter vocabulary terms by title.\n-E.g. search for all terms that contain the string ``doc`` in the title:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.resp\n-   :language: http\n-\n-Use the ``token`` parameter to filter vocabulary terms by token.\n-This is useful in case that you have the token and you need to retrieve the ``title``.\n-E.g. search the term ``doc`` in the token:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp\n-   :language: http\n-\n-.. note::\n-    You must not filter by title and token at the same time.\n-    The API returns a 400 response code if you do so.\n-\n-Use the ``tokens`` parameter to filter vocabulary terms by a list of tokens.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token_list.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token_list.resp\n-   :language: http\n-\n-Get a source\n-------------\n-\n-.. http:get:: (context)/@sources/(field_name)\n-\n-To enumerate the terms of a field\'s source, use the ``@sources`` endpoint on a specific context, and pass the field name as a path parameter, e.g. ``/plone/doc/@sources/some_field``.\n-\n-Because sources are inherently tied to a specific field, this endpoint can only be invoked on content objects, and the source is addressed via the field name its used for, instead of a global name (which sources don\'t have).\n-\n-Otherwise the endpoint behaves the same as the ``@vocabularies`` endpoint.\n-\n-Example:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/sources_get.req\n-\n-The server will respond with a list of terms.\n-The title is purely for display purposes.\n-The token is what should be sent to the server to address that term.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/sources_get.resp\n-   :language: http\n-\n-.. note::\n-    Technically there can be sources that are not iterable (ones that only implement ``ISource``, but not ``IIterableSource``).\n-    These cannot be enumerated using the ``@sources`` endpoint, and it will respond with a corresponding error.\n-\n-\n-Querying a query source\n------------------------\n-\n-.. http:get:: (context)/@querysources/(field_name)?query=(search_query)\n-\n-Query sources (sources implementing `IQuerySource`) can be queried using this endpoint, by passing the search term in the ``query`` parameter.\n-This search term will be passed to the query source\'s ``search()`` method, and the source\'s results are returned.\n-\n-Example:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/querysources_get.req\n-\n-The server will respond with a list of terms.\n-The title is purely for display purposes.\n-The token is what should be sent to the server to address that term.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/querysources_get.resp\n-   :language: http\n-\n-.. note::\n-    Even though technically sources that implement ``IQuerySource`` are required to implement ``__iter__`` as well (when strictly following the interface interitance hierarchy), they usually are used in Plone in situations where their full contents shouldn\'t or can\'t be enumerated (imagine a source of all users, backed by a large LDAP, for example).\n-\n-    For this reason, ``plone.restapi`` takes the stance that the ``IQuerySource`` interface is a strong indication that this source should **only** be queried, and therefore doesn\'t support enumeration of terms via the ``@querysources`` endpoint.\n-\n-    *(If the source does actually implement IIterableSource in addition to IQuerySource, it can still be enumerated via the @sources endpoint)*\ndiff --git a/docs/source/workflow.md b/docs/source/workflow.md\nnew file mode 100644\nindex 000000000..2475b2545\n--- /dev/null\n+++ b/docs/source/workflow.md\n@@ -0,0 +1,39 @@\n+# Workflow\n+\n+```{note}\n+Currently the workflow support is limited to executing transitions on content.\n+```\n+\n+In Plone, content almost always has a {term}`workflow` attached.\n+We can get the current state and history of an object by issuing a `GET` request for any context:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workflow_get.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/workflow_get.resp\n+:language: http\n+```\n+\n+Now if we want to change the state of the front page to publish, we would proceed by issuing a `POST` request to the given URL:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workflow_post.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/workflow_post.resp\n+:language: http\n+```\n+\n+We can also change the state recursively for all contained items, provide a comment, and set effective and expiration dates:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workflow_post_with_body.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/workflow_post_with_body.resp\n+:language: http\n+```\ndiff --git a/docs/source/workflow.rst b/docs/source/workflow.rst\ndeleted file mode 100644\nindex 3b336ff45..000000000\n--- a/docs/source/workflow.rst\n+++ /dev/null\n@@ -1,32 +0,0 @@\n-Workflow\n-========\n-\n-.. note::\n-   Currently the workflow support is limited to executing transitions on content.\n-\n-In Plone, content almost always has a :term:`workflow` attached.\n-We can get the current state and history of an object by issuing a ``GET`` request using on any context:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/workflow_get.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workflow_get.resp\n-   :language: http\n-\n-\n-Now, if we want to change the state of the front page to publish, we would proceed by issuing a ``POST`` request to the given URL:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/workflow_post.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workflow_post.resp\n-   :language: http\n-\n-\n-We can also also change the state recursively for all contained items, provide a comment and set effective and expiration dates:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/workflow_post_with_body.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workflow_post_with_body.resp\n-   :language: http\ndiff --git a/docs/source/workingcopy.md b/docs/source/workingcopy.md\nnew file mode 100644\nindex 000000000..95b75f86a\n--- /dev/null\n+++ b/docs/source/workingcopy.md\n@@ -0,0 +1,107 @@\n+# Working Copy\n+\n+```{note}\n+This is only available on Plone 5.\n+```\n+\n+Plone has a *working copy* feature provided by the core package `plone.app.iterate`.\n+It allows the users to create a working copy of a published or live content object, and work with it until it is ready to be published without having to edit the original object.\n+\n+This process has several steps in its life cycle.\n+\n+\n+## Create working copy (a.k.a., check-out)\n+\n+The user initiates the process and creates a working copy by checking out the content:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_post.req\n+```\n+\n+\xe2\x80\xa6and receives the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/workingcopy_post.resp\n+:language: http\n+```\n+\n+\n+## Get the working copy\n+\n+A working copy has been created and can be accessed querying the content:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_get.req\n+\n+```\n+\n+\xe2\x80\xa6and receives the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/workingcopy_get.resp\n+:language: http\n+```\n+\n+The `GET` content of any object also states the location of the working copy, if any, as `working_copy`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_baseline_get.req\n+\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp\n+:language: http\n+```\n+\n+The `GET` content of any a working copy also returns the original as `working_copy_of`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_wc_get.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/workingcopy_wc_get.resp\n+:language: http\n+```\n+\n+\n+## Check-in\n+\n+Once the user has finished editing the working copy and wants to update the original with the changes, they would check in the working copy:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_patch.req\n+\n+```\n+\n+\xe2\x80\xa6and receives the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/workingcopy_patch.resp\n+:language: http\n+```\n+\n+The working copy is deleted afterwards as a result of this process.\n+The `PATCH` can also be issued in the original (baseline) object.\n+\n+\n+## Delete the working copy (cancel check-out)\n+\n+If you want to cancel the check-out and delete the working copy (in both the original and\n+the working copy):\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_delete.req\n+\n+```\n+\n+and receives the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/workingcopy_delete.resp\n+:language: http\n+```\n+\n+When a working copy is deleted using the normal `DELETE` action, it also deletes the relation and cancels the check-out.\n+That is handled by `plone.app.iterate` internals.\ndiff --git a/docs/source/workingcopy.rst b/docs/source/workingcopy.rst\ndeleted file mode 100644\nindex 52ac68bba..000000000\n--- a/docs/source/workingcopy.rst\n+++ /dev/null\n@@ -1,91 +0,0 @@\n-Working Copy\n-============\n-\n-.. note::\n-    This is only available on Plone 5.\n-\n-Plone has the "Working copy" feature provided by the core package ``plone.app.iterate``.\n-It allows the users to create a working copy of a (published or live) content object and\n-work with it until it\'s ready to be published without having to edit the original object.\n-\n-This process has several steps of it\'s life cycle:\n-\n-Create working Copy (aka Check-out)\n------------------------------------\n-\n-The user initiates the process and creates a "working copy" by "checking out" the content:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_post.req\n-\n-and receives the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workingcopy_post.resp\n-   :language: http\n-\n-Get the working copy\n---------------------\n-\n-A working copy has been created and can be accessed querying the content:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_get.req\n-\n-\n-and receives the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workingcopy_get.resp\n-   :language: http\n-\n-the GET content of any object, also states the location of the working copy, if any (``working_copy``).\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_baseline_get.req\n-\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp\n-   :language: http\n-\n-the GET content of any a working copy also returns the original (``working_copy_of``):\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_wc_get.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workingcopy_wc_get.resp\n-   :language: http\n-\n-Check-in\n----------\n-\n-Once the user has finished editing the working copy and wants to update the original\n-with the changes in there, or "check-in" the working copy.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_patch.req\n-\n-\n-and receives the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workingcopy_patch.resp\n-   :language: http\n-\n-\n-The working copy is deleted afterwards as a result of this process. The PATCH can also be issued in the original (baseline) object.\n-\n-Delete the working copy (cancel check-out)\n-------------------------------------------\n-\n-If you want to cancel the checkout and delete the working copy (in both the original and\n-the working copy):\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_delete.req\n-\n-\n-and receives the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workingcopy_delete.resp\n-   :language: http\n-\n-When a working copy is deleted using the "normal" delete action, it also deletes the\n-relation and cancels the check-out, but that is handled by ``plone.app.iterate`` internals.\ndiff --git a/docs/source/ideas/actions.rst b/ideas/actions.rst\nsimilarity index 100%\nrename from docs/source/ideas/actions.rst\nrename to ideas/actions.rst\ndiff --git a/docs/source/ideas/hydra-operations.rst b/ideas/hydra-operations.rst\nsimilarity index 100%\nrename from docs/source/ideas/hydra-operations.rst\nrename to ideas/hydra-operations.rst\ndiff --git a/docs/source/ideas/hydra.rst b/ideas/hydra.rst\nsimilarity index 100%\nrename from docs/source/ideas/hydra.rst\nrename to ideas/hydra.rst\ndiff --git a/docs/source/ideas/item.rst b/ideas/item.rst\nsimilarity index 100%\nrename from docs/source/ideas/item.rst\nrename to ideas/item.rst\ndiff --git a/docs/source/ideas/plog2015.rst b/ideas/plog2015.rst\nsimilarity index 100%\nrename from docs/source/ideas/plog2015.rst\nrename to ideas/plog2015.rst\ndiff --git a/docs/source/ideas/plone-conference-2014-open-space.rst b/ideas/plone-conference-2014-open-space.rst\nsimilarity index 100%\nrename from docs/source/ideas/plone-conference-2014-open-space.rst\nrename to ideas/plone-conference-2014-open-space.rst\ndiff --git a/docs/source/ideas/toolbar.rst b/ideas/toolbar.rst\nsimilarity index 100%\nrename from docs/source/ideas/toolbar.rst\nrename to ideas/toolbar.rst\ndiff --git a/docs/source/ideas/workflow.rst b/ideas/workflow.rst\nsimilarity index 100%\nrename from docs/source/ideas/workflow.rst\nrename to ideas/workflow.rst\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-04-18T00:21:11-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.restapi/commit/264be7d9081e0fa964b15798834ac003b0029bd8

Add changelog entry

Files changed:
A news/1375.feature

b'diff --git a/news/1375.feature b/news/1375.feature\nnew file mode 100644\nindex 000000000..634321d15\n--- /dev/null\n+++ b/news/1375.feature\n@@ -0,0 +1 @@\n+Documentation was converted to MyST from reStructuredText. [stevepiercy]\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-04-18T03:08:29-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.restapi/commit/b51991a5307328fd0236a06d5193131925ea92f0

Working copy is available on Plone 5 or greater

Files changed:
M docs/source/workingcopy.md

b'diff --git a/docs/source/workingcopy.md b/docs/source/workingcopy.md\nindex 95b75f86a..87b0872be 100644\n--- a/docs/source/workingcopy.md\n+++ b/docs/source/workingcopy.md\n@@ -1,7 +1,7 @@\n # Working Copy\n \n ```{note}\n-This is only available on Plone 5.\n+This feature is available only on Plone 5 or greater.\n ```\n \n Plone has a *working copy* feature provided by the core package `plone.app.iterate`.\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-04-18T18:37:00-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.restapi/commit/54071a94b9ddee4895c6cfdc7bc6bfeda641ac5c

Simplify substitutions

Files changed:
M docs/source/conf.py
M docs/source/exploring.md

b'diff --git a/docs/source/conf.py b/docs/source/conf.py\nindex 02ad7b089..6f0de38d2 100644\n--- a/docs/source/conf.py\n+++ b/docs/source/conf.py\n@@ -301,7 +301,9 @@ def patch_pygments_to_highlight_jsonschema():\n     "postman_request": "![](_static/img/postman_request.png)",\n     "postman_response": "![](_static/img/postman_response.png)",\n     "postman_retain_headers": "![](_static/img/postman_retain_headers.png)",\n+    "fawrench": \'<span class="fa fa-wrench" style="font-size: 1.6em;"></span>\',\n }\n+\n # -- Options for LaTeX output --------------------------------------------------\n \n latex_elements = {\ndiff --git a/docs/source/exploring.md b/docs/source/exploring.md\nindex 0bf51eaf0..009555147 100644\n--- a/docs/source/exploring.md\n+++ b/docs/source/exploring.md\n@@ -1,11 +1,3 @@\n----\n-substitutions:\n-  fawrench: |\n-    ```{raw} html\n-    <span class="fa fa-wrench" style="font-size: 1.6em;"></span>\n-    ```\n----\n-\n (exploring-api-postman-onboarding)=\n \n # Explore the API using Postman\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-04-18T21:10:01-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.restapi/commit/fe01ed7b697ee16f0a6d2b233e98f8e8983c79c9

Resolve filepaths after moving to root of project

Files changed:
M ideas/hydra.rst
M ideas/workflow.rst

b'diff --git a/ideas/hydra.rst b/ideas/hydra.rst\nindex 979e68b17..642637585 100644\n--- a/ideas/hydra.rst\n+++ b/ideas/hydra.rst\n@@ -81,63 +81,63 @@ Implementation\n Plone Document:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../../../src/plone/restapi/tests/http-examples/document.req\n+    :request: ../src/plone/restapi/tests/http-examples/document.req\n \n-.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/document.resp\n+.. literalinclude:: ../src/plone/restapi/tests/http-examples/document.resp\n    :language: http\n \n Plone Folder:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../../../src/plone/restapi/tests/http-examples/folder.req\n+    :request: ../src/plone/restapi/tests/http-examples/folder.req\n \n-.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/folder.resp\n+.. literalinclude:: ../src/plone/restapi/tests/http-examples/folder.resp\n    :language: http\n \n Plone Portal Root:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../../../src/plone/restapi/tests/http-examples/siteroot.req\n+    :request: ../src/plone/restapi/tests/http-examples/siteroot.req\n \n-.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/siteroot.resp\n+.. literalinclude:: ../src/plone/restapi/tests/http-examples/siteroot.resp\n    :language: http\n \n Collection:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../../../src/plone/restapi/tests/http-examples/collection.req\n+    :request: ../src/plone/restapi/tests/http-examples/collection.req\n \n-.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/collection.resp\n+.. literalinclude:: ../src/plone/restapi/tests/http-examples/collection.resp\n    :language: http\n \n Plone Image:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../../../src/plone/restapi/tests/http-examples/image.req\n+    :request: ../src/plone/restapi/tests/http-examples/image.req\n \n-.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/image.resp\n+.. literalinclude:: ../src/plone/restapi/tests/http-examples/image.resp\n    :language: http\n \n File:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../../../src/plone/restapi/tests/http-examples/file.req\n+    :request: ../src/plone/restapi/tests/http-examples/file.req\n \n-.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/file.resp\n+.. literalinclude:: ../src/plone/restapi/tests/http-examples/file.resp\n    :language: http\n \n Link:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../../../src/plone/restapi/tests/http-examples/link.req\n+    :request: ../src/plone/restapi/tests/http-examples/link.req\n \n-.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/link.resp\n+.. literalinclude:: ../src/plone/restapi/tests/http-examples/link.resp\n    :language: http\n \n News Item:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../../../src/plone/restapi/tests/http-examples/newsitem.req\n+    :request: ../src/plone/restapi/tests/http-examples/newsitem.req\n \n-.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/newsitem.resp\n+.. literalinclude:: ../src/plone/restapi/tests/http-examples/newsitem.resp\n    :language: http\ndiff --git a/ideas/workflow.rst b/ideas/workflow.rst\nindex 6b3a11a3a..5e689262b 100644\n--- a/ideas/workflow.rst\n+++ b/ideas/workflow.rst\n@@ -1,5 +1,3 @@\n-.. include:: /alert-noindex.rst\n-\n ########\n Workflow\n ########\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-04-20T03:45:07-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.restapi/commit/c8ebd68ad993f674f4085e446b6b5829ae86fa10

Merge pull request #1375 from plone/convert-rst-to-myst

Convert documentation to MyST

Files changed:
A docs/source/_static/print.css
A docs/source/actions.md
A docs/source/addons.md
A docs/source/authentication.md
A docs/source/batching.md
A docs/source/blocks.md
A docs/source/breadcrumbs.md
A docs/source/comments.md
A docs/source/content-negotiation.md
A docs/source/content.md
A docs/source/contextnavigation.md
A docs/source/contributing.md
A docs/source/controlpanels.md
A docs/source/conventions.md
A docs/source/copymove.md
A docs/source/customization.md
A docs/source/database.md
A docs/source/email-notification.md
A docs/source/email-send.md
A docs/source/expansion.md
A docs/source/exploring.md
A docs/source/glossary.md
A docs/source/groups.md
A docs/source/history.md
A docs/source/http-status-codes.md
A docs/source/i18n.md
A docs/source/index.md
A docs/source/introduction.md
A docs/source/locking.md
A docs/source/navigation.md
A docs/source/plone-content.md
A docs/source/principals.md
A docs/source/querystring.md
A docs/source/querystringsearch.md
A docs/source/registry.md
A docs/source/roles.md
A docs/source/searching.md
A docs/source/serialization.md
A docs/source/sharing.md
A docs/source/system.md
A docs/source/tiles.md
A docs/source/translations.md
A docs/source/tusupload.md
A docs/source/types-schema.md
A docs/source/types.md
A docs/source/upgrade-guide.md
A docs/source/users.md
A docs/source/vocabularies.md
A docs/source/workflow.md
A docs/source/workingcopy.md
A ideas/actions.rst
A ideas/hydra-operations.rst
A ideas/hydra.rst
A ideas/item.rst
A ideas/plog2015.rst
A ideas/plone-conference-2014-open-space.rst
A ideas/toolbar.rst
A ideas/workflow.rst
A news/1375.feature
M README.rst
M docs/source/_static/custom.css
M docs/source/conf.py
D docs/source/_static/placeholder.txt
D docs/source/actions.rst
D docs/source/addons.rst
D docs/source/authentication.rst
D docs/source/batching.rst
D docs/source/blocks.rst
D docs/source/breadcrumbs.rst
D docs/source/comments.rst
D docs/source/content-negotiation.rst
D docs/source/content.rst
D docs/source/contextnavigation.rst
D docs/source/contributing.rst
D docs/source/controlpanels.rst
D docs/source/conventions.rst
D docs/source/copymove.rst
D docs/source/customization.rst
D docs/source/database.rst
D docs/source/email-notification.rst
D docs/source/email-send.rst
D docs/source/expansion.rst
D docs/source/exploring.rst
D docs/source/glossary.rst
D docs/source/groups.rst
D docs/source/history.rst
D docs/source/http-status-codes.rst
D docs/source/i18n.rst
D docs/source/ideas/actions.rst
D docs/source/ideas/hydra-operations.rst
D docs/source/ideas/hydra.rst
D docs/source/ideas/item.rst
D docs/source/ideas/plog2015.rst
D docs/source/ideas/plone-conference-2014-open-space.rst
D docs/source/ideas/toolbar.rst
D docs/source/ideas/workflow.rst
D docs/source/index.rst
D docs/source/introduction.rst
D docs/source/locking.rst
D docs/source/navigation.rst
D docs/source/plone-content.rst
D docs/source/principals.rst
D docs/source/querystring.rst
D docs/source/querystringsearch.rst
D docs/source/registry.rst
D docs/source/roles.rst
D docs/source/searching.rst
D docs/source/serialization.rst
D docs/source/sharing.rst
D docs/source/system.rst
D docs/source/tiles.rst
D docs/source/translations.rst
D docs/source/tusupload.rst
D docs/source/types-schema.rst
D docs/source/types.rst
D docs/source/upgrade-guide.rst
D docs/source/users.rst
D docs/source/vocabularies.rst
D docs/source/workflow.rst
D docs/source/workingcopy.rst

b'diff --git a/README.rst b/README.rst\nindex ebc82fc39..caf827b3b 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -14,7 +14,7 @@\n Introduction\n ============\n \n-plone.restapi is a RESTful hypermedia API for Plone.\n+``plone.restapi`` is a RESTful hypermedia API for Plone.\n \n \n Documentation\n@@ -26,17 +26,17 @@ https://plonerestapi.readthedocs.io/en/latest/\n Getting started\n ===============\n \n-A live demo of Plone 5 with the latest plone.restapi release is available at:\n+A live demo of Plone 5 with the latest ``plone.restapi`` release is available at:\n \n https://plonedemo.kitconcept.com\n \n-Example GET request on the portal root\n+An example GET request on the portal root is the following.\n \n .. code-block:: shell\n \n    curl -i https://plonedemo.kitconcept.com -H "Accept: application/json"\n \n-Example POST request to create a new document\n+An example POST request to create a new document is the following.\n \n .. code-block:: shell\n \n@@ -51,17 +51,19 @@ Example POST request to create a new document\n Installation\n ============\n \n-Install plone.restapi by adding it to your buildout::\n+Install ``plone.restapi`` by adding it to your buildout.\n+\n+.. code-block:: ini\n \n     [buildout]\n \n-    ...\n+    # ...\n \n     eggs =\n         plone.restapi\n \n \n-and then running ``bin/buildout``\n+\xe2\x80\xa6and then running ``bin/buildout``.\n \n \n Contribute\n@@ -75,7 +77,7 @@ Contribute\n Examples\n ========\n \n-plone.restapi is used in production since the first alpha release.\n+``plone.restapi`` has been used in production since its first alpha release.\n It can be seen in action at the following sites:\n \n - Zeelandia GmbH & Co. KG: https://www.zeelandia.de (by kitconcept GmbH)\n@@ -83,12 +85,13 @@ It can be seen in action at the following sites:\n - German Physical Society: https://www.dpg-physik.de (by kitconcept GmbH)\n - Universitat Polit\xc3\xa8cnica de Catalunya: https://www.upc.edu/en (by kitconcept GmbH)\n \n+\n Support\n =======\n \n If you are having issues, please let us know via the `issue tracker <https://github.com/plone/plone.restapi/issues>`_.\n \n-If you required professional support, here is a list of Plone solution providers that contributed significantly to plone.restapi in the past:\n+If you require professional support, here is a list of Plone solution providers that contributed significantly to ``plone.restapi`` in the past.\n \n - `kitconcept GmbH <https://kitconcept.com>`_ (Germany)\n - `4teamwork <https://www.4teamwork.ch>`_ (Switzerland)\ndiff --git a/docs/source/_static/custom.css b/docs/source/_static/custom.css\nindex 8f78b4033..09d09e359 100644\n--- a/docs/source/_static/custom.css\n+++ b/docs/source/_static/custom.css\n@@ -1,57 +1,339 @@\n-.rst-content .menuselection {\n-    background-color: #f9ebb3;\n-    border: 1px solid #f0b37e;\n-    border-radius: 3px;\n-    padding: 1px 6px;\n+:root {\n+  /* Add Font Awesome 5 icon and color for `todo` */\n+  --pst-icon-clipboard-list: \'\\f46d\';\n+  --pst-icon-admonition-todo: var(--pst-icon-clipboard-list);\n+  --pst-color-admonition-todo:  161 , 46, 233;\n+  --target-color: #b9ee9e;\n+  --codeblock-color: #aad993;\n }\n \n-.rst-content .guilabel{\n-    border: 1px solid #777;\n-    background-color: #cee3fb;\n-    border-radius: 3px;\n-    padding: 1px 6px;\n+.visuallyhidden {\n+  display: none;\n }\n-.rst-content .toggle {\n-    background: none repeat scroll 0 0 #e7f2fa;\n-    padding: 12px;\n-    line-height: 24px;\n-    margin-bottom: 24px;\n+pre {\n+  border-radius: 0;\n+  background-color: white;\n+  box-shadow: none;\n+}\n+a,\n+a:visited,\n+main.bd-content #main-content a,\n+main.bd-content #main-content a:visited {\n+  color: #2980b9;\n+}\n+a:hover,\n+main.bd-content #main-content a:hover {\n+  color: #1a567e;\n+  text-decoration: none;\n+}\n+ul {\n+  list-style-type: square;\n+}\n+ul li > p {\n+  margin-bottom: 0.3rem;\n+}\n+ol li > p {\n+  margin-bottom: 0.3rem;\n+}\n+img{\n+  margin: 1rem 0;\n+}\n+figure img,\n+.figure img {\n+  box-shadow: 0 6px 24px 0 rgba(153,153,153,0.3);\n+}\n+.sidebar img.logo {\n+  box-shadow: none;\n+  width: 200px;\n+  margin-bottom: 1rem;\n+}\n+span.linenos {\n+  padding-right: 1em;\n+}\n+p.ploneorglink img {\n+  vertical-align: bottom;\n+}\n+dt:target,\n+span.highlighted,\n+ul.search li span.highlighted {\n+  background-color: var(--target-color);\n+}\n+\n+.bd-sidebar .nav ul {\n+  padding: 0 0 0 1rem;\n+}\n+.bd-sidebar .nav .toctree-checkbox ~ label i {\n+  transform: rotate(90deg);\n+}\n+.bd-sidebar .nav .toctree-checkbox:checked ~ label i {\n+  transform: rotate(0deg);\n+}\n+\n+.toctree-wrapper .caption {\n+  font-weight: bold;\n+  font-size: 1.2em;\n+  margin-top: 3rem;\n+}\n+.toctree-wrapper ul {\n+  list-style: none;\n+}\n+\n+section:not(#glossary) h1 ~ dl {\n+  display: grid;\n+  grid-template-columns: max-content auto;\n+}\n+section:not(#glossary) h1 ~ dl dd {\n+  margin-bottom: unset !important;\n+}\n+\n+div.section {\n+  margin-bottom: 5rem;\n+}\n+\n+/* admonitions */\n+.admonition {\n+  border-radius: 0;\n+  border: none;\n+  border-left: .2rem solid;\n+  border-left-color: rgba(var(--pst-color-admonition-default),1);\n+}\n+.admonition .admonition-title {\n+  margin-bottom: 1.5rem !important;\n+}\n+.admonition.toggle .admonition-title {\n+  cursor: pointer;\n+  display: flex;\n+}\n+.admonition.toggle .admonition-title::after {\n+  content: "\\f105";\n+  font-weight: 900;\n+  font-family: "Font Awesome 5 Free";\n+  margin-left: auto;\n+}\n+.admonition.toggle .admonition-title.open::after {\n+  content: "\\f107";\n+}\n+/* admonition `todo` */\n+.admonition.admonition-todo,\n+div.admonition.admonition-todo {\n+  border-color: rgba(var(--pst-color-admonition-todo),1);\n+}\n+.admonition.admonition-todo > .admonition-title,\n+div.admonition.admonition-todo > .admonition-title {\n+  background-color: rgba(var(--pst-color-admonition-todo),.1);\n+}\n+.admonition.admonition-todo > .admonition-title::before,\n+div.admonition.admonition-todo > .admonition-title::before {\n+  color: rgba(var(--pst-color-admonition-todo),1);\n+  content: var(--pst-icon-admonition-todo);\n+}\n+.admonition-github-only.admonition {\n+  display: none;\n+}\n+\n+\n+.topic {\n+  padding: 1.5em 1em .5em 1em;\n+}\n+.topic-title {\n+  font-weight: bold;\n+}\n+\n+\n+/* Bootstrap */\n+.btn-primary {\n+  color: #fff;\n+  background-color: #2980b9;\n+  border-color: #2980b9;\n+}\n+.btn-primary {\n+  background-color: #1f86ca;\n+  border-color: #2980b9;\n }\n \n-.rst-content .toggle .admonition-title {\n-    display: block;\n-    clear: both;\n-    cursor: pointer;\n+/* Search */\n+\n+/* Show search form. It is hidden by default. */\n+#search-documentation,\n+#search-documentation~form,\n+#search-documentation~p {\n+ display:block;\n+}\n+ul.search {\n+  margin-left: 0;\n+}\n+p.search-summary {\n+  margin: 1em 0 2rem 0;\n+}\n+#search-results ul {\n+  list-style-type: none;\n+  padding-left: 0;\n+}\n+#search-results ul li,\n+ul.search li {\n+  margin-bottom: 2rem;\n+  padding: 0;\n+  background-image: none;\n+  border-bottom: none;\n+}\n+#search-results ul li h3 {\n+  margin: 0.4rem 0 .5rem;\n+  font-size: 1.5rem;\n }\n+#search-results ul li .breadcrumbs {\n+  display: flex;\n+  flex-direction: row;\n+  flex-wrap: wrap;\n+}\n+#search-results ul li .breadcrumbs a {\n+  font-weight: normal;\n+}\n+#search-results ul li .breadcrumbs .lastbreadcrumb {\n+  white-space: nowrap;\n+  display: inline-block;\n+  max-width: 12rem;\n+  overflow: hidden;              /* "overflow"-Wert darf nicht "visible" sein */\n \n-.rst-content .toggle .admonition-title:after {\n-    content: " \xc3\xa2\xe2\x80\x93\xc2\xbc";\n+  text-overflow: ellipsis;\n+}\n+ul.search li p.context {\n+  margin-left: 0;\n }\n+.pathseparator {\n+  padding: 0 0.7rem;\n+}\n+\n \n-.rst-content .toggle .admonition-title.open:after {\n-    content: " \xc3\xa2\xe2\x80\x93\xc2\xb2";\n+/* submenu */\n+.bd-toc {\n+  box-shadow: 0 .2rem .5rem rgba(0,0,0,.05),0 0 .0625rem rgba(0,0,0,.1);\n }\n \n-.rst-content .toggle p:last-child {\n-    margin-bottom: 0;\n+/* extra sidebar */\n+div.sidebar:not(.margin){\n+  width: 40%;\n+  float: right;\n+  clear: right;\n+  margin: .3rem 0 .3rem 0.5em;\n+  padding: 2rem 0 1.5rem 1rem !important;\n+  background-color: rgba(var(--pst-color-admonition-note),.1);\n+  border: none;\n+  border-left: 8px rgba(var(--pst-color-admonition-default),1) solid;\n+  border-radius: .2rem;\n+  box-shadow: 0 .2rem .5rem rgba(0,0,0,.05),0 0 .0625rem rgba(0,0,0,.1);\n+}\n+\n+div.sidebar:not(.margin) .figure {\n+  margin-top: 0;\n+  padding-top: 0;\n+  margin-left: 0;\n+  padding-left: 0;\n+}\n+div.sidebar:not(.margin) img.logo {\n+  margin-top: 0;\n+  margin-bottom: .3rem;\n+}\n+div.sidebar:not(.margin) p {\n+  margin-bottom: 0;\n+}\n+div.sidebar:not(.margin) p.sidebar-title {\n+  display: none;\n+}\n+div.sidebar:not(.margin) div.topic {\n+  padding: .5em 0;\n+  background-color: transparent;\n+  border: none;\n+}\n+div.sidebar:not(.margin) pre {\n+  margin: .5em 0 1.5em 0;\n+}\n+div.sidebar:not(.margin) div[class*="highlight-"] {\n+  margin-right: .5em;\n+}\n+div.sidebar:not(.margin) .admonition {\n+  margin-right: .5em;\n+  background-color: #ffffff;\n+}\n+@media (min-width:768px) {\n+  div.sidebar:not(.margin) {\n+    width: 50%;\n+    margin-left: 1.5em;\n+    margin-right: -28%;\n+  }\n }\n \n-/* Support for "more Font-Awesome Icons" example    */\n-/* ################################################ */\n \n-.fa:before,\n-.icon:before {\n-    font-family: "FontAwesome";\n-    display: inline-block;\n-    font-style: normal;\n-    font-weight: normal;\n-    line-height: 1;\n-    text-decoration: inherit;\n-    padding-left: 0.2em;\n-    padding-right: 0.2em;\n+main.bd-content #main-content dl.simple dt {\n+  margin-top: .8em;\n+}\n+main.bd-content #main-content dl.simple dt:nth-of-type(1) {\n+  margin-top: 0;\n+}\n+main.bd-content #main-content dl.simple dd {\n+  margin-top: .8em;\n+}\n+main.bd-content #main-content dl.simple dt + dd {\n+  margin-top: 0;\n+}\n+\n+.prev-next-bottom {\n+  margin: 20px 0 30px 0;\n+}\n+.prev-next-bottom a.left-prev, .prev-next-bottom a.right-next {\n+  padding: 5px 10px;\n+  border: 1px solid rgba(0,0,0,.2);\n+  max-width: 45%;\n+  overflow-x: hidden;\n+  color: rgba(0,0,0,.65);\n+  border-radius: 10px;\n+}\n+\n+/* Local navigation */\n+li.nav-item.toc-entry {\n+  line-height: 1.25em;\n+  margin-bottom: 0.25em;\n+}\n+\n+span.guilabel, span.menuselection {\n+  border: none;\n+  background: #e7f2fa;\n+  border-radius: 4px;\n+  padding: 4px 5px;\n+  font-size: 90%;\n+  font-weight: bold;\n+  font-style: italic;\n+  white-space: nowrap;\n }\n \n-/*  Hint for providing the Unicode Value of an fa-icon in CSS as ASCII \n+\n+/*\n+ * extensions\n+ */\n+\n+/* definitions */\n+dl.py.function {\n+  margin-bottom: 5rem;\n+}\n+dl.py.function > dt {\n+  background-color: var(--codeblock-color);\n+  padding: 4px 5px;\n+}\n+dl.py.function > dt:target {\n+  background-color: var(--target-color);\n+}\n+dl.field-list > dt {\n+  padding-left: 0;\n+}\n+\n+/* code blocks */\n+div.viewcode-block:target {\n+  padding: 10px 10px;\n+  background-color: var(--codeblock-color);\n+  border-top: 1px solid var(--codeblock-color);\n+  border-bottom: 1px solid var(--codeblock-color);\n+}\n+\n+/*  Hint for providing the Unicode Value of an fa-icon in CSS as ASCII\n     replace the "&#x" part from the unicode HTML5 literal \n     displayed on the font-awesome website cheatsheet e.g. \n     http://fontawesome.io/cheatsheet/\n@@ -63,7 +345,6 @@\n         .fa-wrench:before {\n             content: "\\f0ad";\n         }\n-\n */\n \n .icon-wrench:before,\ndiff --git a/docs/source/_static/placeholder.txt b/docs/source/_static/placeholder.txt\ndeleted file mode 100644\nindex e69de29bb..000000000\ndiff --git a/docs/source/_static/print.css b/docs/source/_static/print.css\nnew file mode 100644\nindex 000000000..8dbc2d579\n--- /dev/null\n+++ b/docs/source/_static/print.css\n@@ -0,0 +1,3 @@\n+.tooltip {\n+  display: none;\n+}\ndiff --git a/docs/source/actions.md b/docs/source/actions.md\nnew file mode 100644\nindex 000000000..e36ed5d00\n--- /dev/null\n+++ b/docs/source/actions.md\n@@ -0,0 +1,31 @@\n+# Portal Actions\n+\n+Plone has the concept of configurable actions called `portal_actions`.\n+Each action defines an `id`, a `title`, the required permissions, and a condition that will be checked to decide whether the action will be available for a user.\n+Actions are sorted by categories.\n+\n+Actions can be used to build UI elements that adapt to the available actions.\n+An example is the Plone toolbar where the `object_tabs` (view, edit, folder contents, sharing) and the `user_actions` (login, logout, preferences) are used to display to the user only those actions that are allowed for the currently logged in user.\n+\n+The available actions for the currently logged in user can be retrieved by calling the `@actions` endpoint on a specific context.\n+This also works for unauthenticated users.\n+\n+\n+## Listing available actions\n+\n+To list the available actions, send a `GET` request to the `@actions` endpoint on a specific content object:\n+\n+```{eval-rst}\n+.. http:example:: curl httpie python-requests\n+   :request: ../../src/plone/restapi/tests/http-examples/actions_get.req\n+```\n+\n+The server will respond with a {term}`200 OK` status code.\n+The JSON response contains the available actions categories (object, object_buttons, user) on the top level.\n+Each category contains a list of the available actions in that category:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/actions_get.resp\n+:language: http\n+```\n+\n+If you want to limit the categories that are returned, pass one or more `categories:list` parameters, for example, `@action?categories:list=object&categories:list=user`.\ndiff --git a/docs/source/actions.rst b/docs/source/actions.rst\ndeleted file mode 100644\nindex 5305cc101..000000000\n--- a/docs/source/actions.rst\n+++ /dev/null\n@@ -1,34 +0,0 @@\n-Portal Actions\n-==============\n-\n-Plone has the concept of configurable actions (called "portal_actions").\n-Each actions defines an id, a title, the required\n-permissions and a condition that will be checked to decide if the action\n-will be available for a user.\n-Actions are sorted by categories.\n-\n-Actions can be used to build UI elements that adapt to the available actions.\n-An example is the Plone toolbar where the "object_tabs" (view, edit, folder contents, sharing)\n-and the "user_actions" (login, logout, preferences) are used to display the user only the actions that are allowed for the currently logged in user.\n-\n-The available actions for the currently logged in user can be retrieved\n-by calling the @actions endpoint on a specific context.\n-This also works for not authenticated users.\n-\n-Listing available actions\n--------------------------\n-\n-To list the available actions, send a GET request to the \'@actions\' endpoint on a specific content object:\n-\n-.. http:example:: curl httpie python-requests\n-   :request: ../../src/plone/restapi/tests/http-examples/actions_get.req\n-\n-The server will respond with a `200 OK` status code.\n-The JSON response contains the available actions categories (object, object_buttons, user) on the top level.\n-Each category contains a list of the available actions in that category:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/actions_get.resp\n-   :language: http\n-\n-If you want to limit the categories that are retured, pass one or more parameters\n-``categories:list``, i.e. ``@action?categories:list=object&categories:list=user``.\ndiff --git a/docs/source/addons.md b/docs/source/addons.md\nnew file mode 100644\nindex 000000000..cb5026127\n--- /dev/null\n+++ b/docs/source/addons.md\n@@ -0,0 +1,87 @@\n+# Add-ons\n+\n+Add-on product records can be addressed through the `@addons` endpoint in a Plone site.\n+In order to address a specific record, the profile ID has to be passed as a path segment, such as `/plone/@addons/plone.session`.\n+\n+Reading or writing add-ons metadata requires the `cmf.ManagePortal` permission.\n+\n+## Reading add-ons records\n+\n+Reading a single record:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/addons_get.req\n+```\n+\n+Example response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/addons_get.resp\n+:language: http\n+```\n+\n+## Listing add-ons records\n+\n+A list of all add-ons in the portal can be retrieved by sending a `GET` request to the `@addons` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/addons_get_list.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/addons_get_list.resp\n+:language: http\n+```\n+\n+The following fields are returned:\n+\n+- `@id`: hypermedia link to the control panel\n+- `id`: the name of the add-on package\n+- `title`: the friendly name of the add-on package\n+- `description`: description of the add-on\n+- `version`: the current version of the add-on\n+- `is_installed`: is the add-on installed?\n+- `has_uninstall_profile`: does the add-on have an uninstall profile?\n+\n+The query string parameter `upgradeable` is available in case you want to query only the add-ons that have an upgrade step pending.\n+\n+## Installing an add-on\n+\n+An individual add-on can be installed by issuing a `POST` to the given URL:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/addons_install.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/addons_install.resp\n+:language: http\n+```\n+\n+## Uninstalling an add-on\n+\n+An individual add-on can be uninstalled by issuing a `POST` to the given URL:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/addons_uninstall.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/addons_uninstall.resp\n+:language: http\n+```\n+\n+## Upgrading an add-on\n+\n+An individual add-on can be upgraded by issuing a `POST` to the given URL:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/addons_upgrade.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/addons_upgrade.resp\n+:language: http\n+```\ndiff --git a/docs/source/addons.rst b/docs/source/addons.rst\ndeleted file mode 100644\nindex 8e0931c33..000000000\n--- a/docs/source/addons.rst\n+++ /dev/null\n@@ -1,85 +0,0 @@\n-Add-ons\n-========\n-\n-Addon product records can be addressed through the ``@addons`` endpoint on the\n-Plone site. In order to address a specific record, the profile id has to be\n-passed as a path segment (e.g. `/plone/@addons/plone.session`).\n-\n-Reading or writing addons metadata require the ``cmf.ManagePortal``\n-permission.\n-\n-Reading add-ons records\n------------------------\n-\n-Reading a single record:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/addons_get.req\n-\n-Example Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/addons_get.resp\n-   :language: http\n-\n-\n-Listing add-ons records\n------------------------\n-\n-A list of all add-ons in the portal can be retrieved by\n-sending a GET request to the @addons endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/addons_get_list.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/addons_get_list.resp\n-   :language: http\n-\n-The following fields are returned:\n-\n-- @id: hypermedia link to the control panel\n-- id: the name of the add-on package\n-- title: the friendly name of the add-on package\n-- description: description of the add-on\n-- version: the current version of the add-on\n-- is_installed: is the add-on installed?\n-- has_uninstall_profile: does the add-on have an uninstall profile\n-\n-The querystring parameter ``upgradeable`` is available in case you want to query only the\n-addons that have an upgrade step pending.\n-\n-Installing an addon\n--------------------\n-\n-An individual addon can be installed by issuing a ``POST`` to the given URL:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/addons_install.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/addons_install.resp\n-   :language: http\n-\n-\n-Uninstalling an addon\n----------------------\n-\n-An individual addon can be uninstalled by issuing a ``POST`` to the given URL:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/addons_uninstall.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/addons_uninstall.resp\n-   :language: http\n-\n-\n-Upgrading an addon\n--------------------\n-\n-An individual addon can be upgraded by issuing a ``POST`` to the given URL:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/addons_upgrade.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/addons_upgrade.resp\n-   :language: http\ndiff --git a/docs/source/authentication.md b/docs/source/authentication.md\nnew file mode 100644\nindex 000000000..3603919d7\n--- /dev/null\n+++ b/docs/source/authentication.md\n@@ -0,0 +1,119 @@\n+# Authentication\n+\n+`plone.restapi` uses Plone PAS for authentication.\n+\n+That means that any authentication method supported by an installed PAS plugin should work, assuming it\'s an authentication method that makes sense to use with an API.\n+\n+For example, to authenticate using HTTP basic auth, you\'d set an `Authorization` header:\n+\n+```http\n+GET /Plone HTTP/1.1\n+Authorization: Basic Zm9vYmFyOmZvb2Jhcgo=\n+Accept: application/json\n+```\n+\n+HTTP client libraries usually contain helper functions to produce a proper `Authorization` header for you based on given credentials.\n+\n+Using the `requests` library, you would set up a session with basic authentication as follows:\n+\n+```python\n+import requests\n+\n+session = requests.Session()\n+session.auth = (\'username\', \'password\')\n+session.headers.update({\'Accept\': \'application/json\'})\n+\n+response = session.get(url)\n+```\n+\n+Or the same example using `curl`:\n+\n+```bash\n+curl -u username:password -H \'Accept:application/json\' $URL\n+```\n+\n+\n+## JSON Web Tokens (JWT)\n+\n+`plone.restapi` includes a Plone PAS plugin for authentication with JWT.\n+The plugin is installed automatically when installing the product.\n+\n+\n+### Acquiring a token (@login)\n+\n+A JWT token can be acquired by posting a user\'s credentials to the `@login` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/jwt_login.req\n+```\n+\n+The server responds with a JSON object containing the token:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/jwt_login.resp\n+:language: http\n+```\n+\n+\n+### Authenticating with a token\n+\n+The token can now be used in subsequent requests by including it in the `Authorization` header with the `Bearer` scheme:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/jwt_logged_in.req\n+```\n+\n+\n+### Renewing a token (@login-renew)\n+\n+By default, the token will expire after 12 hours, and thus must be renewed before expiration.\n+To renew the token, `POST` to the `@login-renew` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/jwt_login_renew.req\n+```\n+\n+The server returns a JSON object with a new token:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/jwt_login_renew.resp\n+:language: http\n+```\n+\n+\n+### Invalidating a token (@logout)\n+\n+The `@logout` endpoint can be used to invalidate tokens.\n+However by default tokens are not persisted on the server and thus can not be invalidated.\n+To enable token invaldiation, activate the `store_tokens` option in the PAS plugin.\n+If you need tokens that are valid indefinitely you should also disable the use of Plone\'s keyring in the PAS plugin (option `use_keyring`).\n+\n+The logout request must contain the existing token in the `Authorization` header:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/jwt_logout.req\n+```\n+\n+If invalidation succeeds, the server responds with an empty 204 response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/jwt_logout.resp\n+:language: http\n+```\n+\n+\n+## Permissions\n+\n+In order for a user to use the REST API, the `plone.restapi: Use REST API` permission is required.\n+\n+By default, installing the `plone.restapi:default` profile will assign this permission to the `Anonymous` role.\n+Everybody is allowed to use the REST API by default.\n+\n+If you wish to control in more detail which roles are allowed to use the REST API, please assign this permission accordingly.\n+\n+As well as the `plone.restapi: Use REST API` permission, some of the common Plone permissions are also required, depending on the particular service.\n+For example, retrieving a resource using `GET` will require `View`.\n+Adding an object using `POST` will require `Add portal content`.\n+\n+In order to modify or override this behavior, if your custom service class inherits from `plone.restapi.services.Service`, override the method `check_permission` and add your custom checks accordingly.\ndiff --git a/docs/source/authentication.rst b/docs/source/authentication.rst\ndeleted file mode 100644\nindex afada5bac..000000000\n--- a/docs/source/authentication.rst\n+++ /dev/null\n@@ -1,120 +0,0 @@\n-Authentication\n-==============\n-\n-``plone.restapi`` uses Plone PAS for Authentication.\n-\n-That means that any authentication method supported by an installed PAS Plugin should work, assuming it\'s an authentication method that makes sense to use with an API.\n-\n-For example, to authenticate using HTTP basic auth, you\'d set an ``Authorization`` header:\n-\n-.. code-block:: http\n-\n-  GET /Plone HTTP/1.1\n-  Authorization: Basic Zm9vYmFyOmZvb2Jhcgo=\n-  Accept: application/json\n-\n-HTTP client libraries usually contain helper functions to produce a proper ``Authorization`` header for you based on given credentials.\n-\n-Using the ``requests`` library, you\'d set up a session with basic auth like this:\n-\n-.. code-block:: python\n-\n-    import requests\n-\n-    session = requests.Session()\n-    session.auth = (\'username\', \'password\')\n-    session.headers.update({\'Accept\': \'application/json\'})\n-\n-    response = session.get(url)\n-\n-Or the same example using ``curl``:\n-\n-.. code-block:: bash\n-\n-    curl -u username:password -H \'Accept:application/json\' $URL\n-\n-\n-JSON Web Tokens (JWT)\n----------------------\n-\n-``plone.restapi`` includes a Plone PAS plugin for authentication with JWT. The\n-plugin is installed automatically when installing the product.\n-\n-Acquiring a token (@login)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-A JWT token can be acquired by posting a user\'s credentials to the ``@login``\n-endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/jwt_login.req\n-\n-The server responds with a JSON object containing the token.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/jwt_login.resp\n-   :language: http\n-\n-Authenticating with a token\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-The token can now be used in subsequent requests by including it in the\n-``Authorization`` header with the ``Bearer`` scheme:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/jwt_logged_in.req\n-\n-\n-Renewing a token (@login-renew)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-By default the token will expire after 12 hours and thus must be renewed before\n-expiration. To renew the token simply post to the ``@login-renew`` endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/jwt_login_renew.req\n-\n-The server returns a JSON object with a new token:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/jwt_login_renew.resp\n-   :language: http\n-\n-Invalidating a token (@logout)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-The ``@logout`` endpoint can be used to invalidate tokens. However by default\n-tokens are not persisted on the server and thus can not be invalidated. To enable\n-token invaldiation, activate the ``store_tokens`` option in the PAS plugin. If you\n-need tokens that are valid indefinitely you should also disable the use of Plone\'s\n-keyring in the PAS plugin (option ``use_keyring``).\n-\n-The logout request must contain the existing token in the ``Authorization`` header.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/jwt_logout.req\n-\n-If invalidation succeeds, the server responds with an empty 204 reponse:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/jwt_logout.resp\n-   :language: http\n-\n-Permissions\n------------\n-\n-In order for a user to use the REST API, the ``plone.restapi: Use REST API``\n-permission is required.\n-\n-By default, installing the ``plone.restapi:default`` profile will assign this\n-permission to the ``Anonymous`` role, so everybody is allowed to use the REST\n-API by default.\n-\n-If you wish to control in more detail which roles are allowed to use the REST\n-API, please assign this permission accordingly.\n-\n-As well as the ``plone.restapi: Use REST API`` permission some of the common\n-Plone permissions are also required, depending on the particular service.\n-For example, retrieving a resource using GET will require ``View``, adding an\n-object using POST will require ``Add portal content``, and so on.\n-\n-In order to modify/override this behavior, if your custom service class\n-inherits from ``plone.restapi.services.Service``, just override the method\n-``check_permission`` and add your custom checks accordingly.\ndiff --git a/docs/source/batching.md b/docs/source/batching.md\nnew file mode 100644\nindex 000000000..078ba16eb\n--- /dev/null\n+++ b/docs/source/batching.md\n@@ -0,0 +1,70 @@\n+# Batching\n+\n+Representations of collection-like resources are batched or paginated if the\n+size of the resultset exceeds the batching size:\n+\n+```json\n+{\n+  "@id": "http://.../folder/search",\n+  "batching": {\n+    "@id": "http://.../folder/search?b_size=10&b_start=20",\n+    "first": "http://.../plone/folder/search?b_size=10&b_start=0",\n+    "last": "http://.../plone/folder/search?b_size=10&b_start=170",\n+    "prev": "http://.../plone/folder/search?b_size=10&b_start=10",\n+    "next": "http://.../plone/folder/search?b_size=10&b_start=30"\n+  },\n+  "items": [\n+    "..."\n+  ],\n+  "items_total": 175\n+}\n+```\n+\n+If the entire resultset fits into a single batch page (as determined by\n+`b_size`), the top-level `batching` links will be omitted.\n+\n+\n+## Top-level attributes\n+\n+| Attribute     | Description                                                          |\n+| ------------- | -------------------------------------------------------------------- |\n+| `@id`         | Canonical base URL for the resource, without any batching parameters |\n+| `items`       | Current batch of items / members of the collection-like resource     |\n+| `items_total` | Total number of items                                                |\n+| `batching`    | Batching related navigation links (see below)                        |\n+\n+\n+## Batching links\n+\n+If, and only if, the result set has been batched over several pages, the response body will contain a top-level attribute `batching` which contains batching links.\n+These links that can be used to navigate batches in a hypermedia fashion:\n+\n+| Attribute | Description                                       |\n+| --------- | ------------------------------------------------- |\n+| `@id`     | Link to the current batch page                    |\n+| `first`   | Link to the first batch page                      |\n+| `prev`    | Link to the previous batch page (*if applicable*) |\n+| `next`    | Link to the next batch page (*if applicable*)     |\n+| `last`    | Link to the last batch page                       |\n+\n+\n+## Parameters\n+\n+Batching can be controlled with two query string parameters.\n+In order to address a specific batch page, the `b_start` parameter can be used to request a specific batch page, containing `b_size` items starting from `b_start`.\n+\n+| Parameter | Description                |\n+| --------- | -------------------------- |\n+| `b_size`  | Batch size (default is 25) |\n+| `b_start` | First item of the batch    |\n+\n+The following is a full example of a batched request and response:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/batching.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/batching.resp\n+:language: http\n+```\ndiff --git a/docs/source/batching.rst b/docs/source/batching.rst\ndeleted file mode 100644\nindex 7cc26257b..000000000\n--- a/docs/source/batching.rst\n+++ /dev/null\n@@ -1,86 +0,0 @@\n-Batching\n-========\n-\n-Representations of collection-like resources are batched / paginated if the\n-size of the resultset exceeds the batching size:\n-\n-.. code-block:: json\n-\n-    {\n-      "@id": "http://.../folder/search",\n-      "batching": {\n-        "@id": "http://.../folder/search?b_size=10&b_start=20",\n-        "first": "http://.../plone/folder/search?b_size=10&b_start=0",\n-        "last": "http://.../plone/folder/search?b_size=10&b_start=170",\n-        "prev": "http://.../plone/folder/search?b_size=10&b_start=10",\n-        "next": "http://.../plone/folder/search?b_size=10&b_start=30"\n-      },\n-      "items": [\n-        "..."\n-      ],\n-      "items_total": 175,\n-    }\n-\n-If the entire resulset fits into a single batch page (as determined by\n-``b_size``), the top-level ``batching`` links will be omitted.\n-\n-\n-Top-level attributes\n---------------------\n-\n-================ ===========================================================\n-Attribute        Description\n-================ ===========================================================\n-``@id``          Canonical base URL for the resource, without any\n-                 batching parameters\n-``items``        Current batch of items / members of the collection-like\n-                 resource\n-``items_total``  Total number of items\n-``batching``     Batching related navigation links (see below)\n-================ ===========================================================\n-\n-\n-Batching links\n---------------\n-\n-If, and only if, the resultset has been batched over several pages, the\n-response body will contain a top-level attribute ``batching`` that contains\n-batching links. These links that can be used to navigate batches in a\n-Hypermedia fashion:\n-\n-================ ===========================================================\n-Attribute        Description\n-================ ===========================================================\n-``@id``          Link to the current batch page\n-``first``        Link to the first batch page\n-``prev``         Link to the previous batch page (*if applicable*)\n-``next``         Link to the next batch page (*if applicable*)\n-``last``         Link to the last batch page\n-================ ===========================================================\n-\n-\n-\n-Parameters\n-----------\n-\n-Batching can be controlled with two query string parameters. In order to\n-address a specific batch page, the ``b_start`` parameter can be used to\n-request a specific batch page, containing ``b_size`` items starting from\n-``b_start``.\n-\n-================ ===========================================================\n-Parameter        Description\n-================ ===========================================================\n-``b_size``       Batch size (default is 25)\n-``b_start``      First item of the batch\n-================ ===========================================================\n-\n-\n-Full example of a batched request and response:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/batching.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/batching.resp\n-   :language: http\n-\ndiff --git a/docs/source/blocks.md b/docs/source/blocks.md\nnew file mode 100644\nindex 000000000..1946085c5\n--- /dev/null\n+++ b/docs/source/blocks.md\n@@ -0,0 +1,226 @@\n+# Volto Blocks support\n+\n+```{note}\n+The `plone.restapi` package gives support for Volto blocks providing a Dexterity behavior `plone.restapi.behaviors.IBlocks`.\n+It is used to enable Volto blocks in any content type.\n+Volto then renders the blocks engine for all the content types that have this behavior enabled.\n+```\n+\n+\n+## Retrieving blocks on a content object\n+\n+The `plone.restapi.behaviors.IBlocks` has two fields where existing blocks and their data are stored in the object (`blocks`).\n+The one where the current layout is stored (`blocks_layout`).\n+As they are fields in a Dexterity behavior, both fields will be returned in a `GET` request as attributes:\n+\n+```http\n+GET /plone/my-document HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+```\n+\n+The server responds with a `Status 200`, and lists all stored blocks on that content object:\n+\n+```http\n+GET /plone/my-document HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/my-document",\n+\n+  "...more response data...": "",\n+\n+  "blocks_layout": [\n+    "#title-1",\n+    "#description-1",\n+    "#image-1"\n+  ],\n+  "blocks": {\n+    "#title-1": {\n+      "@type": "title"\n+    },\n+    "#description-1": {\n+      "@type": "Description"\n+    },\n+    "#image-1": {\n+      "@type": "Image",\n+      "image": "<some random url>"\n+    }\n+  }\n+}\n+```\n+\n+`blocks` objects will contain the title metadata and the information required to render them.\n+\n+\n+## Adding blocks to an object\n+\n+Storing blocks is done via a default `PATCH` content operation:\n+\n+```http\n+PATCH /plone/my-document HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+  "blocks_layout": [\n+    "#title-1",\n+    "#description-1",\n+    "#image-1"\n+  ],\n+  "blocks": {\n+    "#title-1": {\n+      "@type": "title"\n+    },\n+    "#description-1": {\n+      "@type": "Description"\n+    },\n+    "#image-1": {\n+      "@type": "Image",\n+      "image": "<some random url>"\n+    }\n+  }\n+}\n+```\n+\n+\n+## Block serializers and deserializers\n+\n+Practical experience has shown that it is useful to transform, server-side, the value of block fields on inbound (deserialization) and also outbound (serialization) operations.\n+For example, HTML field values are cleaned up using `portal_transforms`.\n+Or paths in image blocks are transformed to use `resolveuid`.\n+\n+It is possible to influence the transformation of block values per block type.\n+For example, to tweak the value stored in an image type block, we can create a new subscriber as follows:\n+\n+```python\n+@implementer(IBlockFieldDeserializationTransformer)\n+@adapter(IBlocks, IBrowserRequest)\n+class ImageBlockDeserializeTransformer(object):\n+    order = 100\n+    block_type = \'image\'\n+\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def __call__(self, value):\n+        portal = getMultiAdapter(\n+            (self.context, self.request), name="plone_portal_state"\n+        ).portal()\n+        url = value.get(\'url\', \'\')\n+        deserialized_url = path2uid(\n+            context=self.context, portal=portal,\n+            href=url\n+        )\n+        value["url"] = deserialized_url\n+        return value\n+```\n+\n+Then register it as a subscription adapter:\n+\n+```xml\n+<subscriber factory=".blocks.ImageBlockDeserializeTransformer"\n+  provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"/>\n+```\n+\n+This would replace the `url` value to use `resolveuid` instead of hard coding the image path.\n+\n+The `block_type` attribute needs to match the `@type` field of the block value.\n+The `order` attribute is used in sorting the subscribers for the same field.\n+A lower number has higher precedence, that is, it is executed first.\n+\n+On the serialization path, a block value can be tweaked with a similar transformer\n+For example, on an imaginary database listing block type:\n+\n+```python\n+@implementer(IBlockFieldDeserializationTransformer)\n+@adapter(IBlocks, IBrowserRequest)\n+class DatabaseQueryDeserializeTransformer(object):\n+    order = 100\n+    block_type = \'database_listing\'\n+\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def __call__(self, value):\n+        value["items"] = db.query(value)  # pseudocode\n+        return value\n+```\n+\n+Then register it as a subscription adapter:\n+\n+```xml\n+<subscriber factory=".blocks.DatabaseQueryDeserializeTransformer"\n+  provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"/>\n+```\n+\n+\n+### Generic block transformers and smart fields\n+\n+You can create a block transformer that applies to all blocks by using `None` as the value for `block_type`.\n+The `order` field still applies, though.\n+The generic block transformers enable us to create **smart block fields**, which are handled differently.\n+For example, any internal link stored as `url` or `href` in a block value is converted (and stored) as a `resolveuid`-based URL, then resolved back to a full URL on block serialization.\n+\n+Another **smart field** is the `searchableText` field in a block value.\n+It needs to be a plain text value, and it will be used in the `SearchableText` value for the context item.\n+\n+If you need to store "subblocks" in a block value, you should use the `blocks` smart field (or `data.blocks`).\n+Doing so integrates those blocks with the transformers.\n+\n+\n+## `SearchableText` indexing for blocks\n+\n+As the main consumer of `plone.restapi`\'s blocks, this functionality is specific to Volto blocks.\n+By default, searchable text (for Plone\'s `SearchableText` index) is extracted from `text` blocks.\n+\n+To extract searchable text for other types of blocks, there are two approaches.\n+\n+\n+### Client side solution\n+\n+The block provides the data to be indexed in its `searchableText` attribute:\n+\n+```json\n+{\n+  "@type": "image",\n+  "align": "center",\n+  "alt": "Plone Conference 2021 logo",\n+  "searchableText": "Plone Conference 2021 logo",\n+  "size": "l",\n+  "url": "https://2021.ploneconf.org/images/logoandfamiliesalt.svg"\n+}\n+```\n+\n+This is the preferred solution.\n+\n+\n+### Server side solution\n+\n+For each new block, you need to write an adapter that will extract the searchable text from the block information:\n+\n+```python\n+@implementer(IBlockSearchableText)\n+@adapter(IBlocks, IBrowserRequest)\n+class ImageSearchableText(object):\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def __call__(self, block_value):\n+        return block_value[\'alt_text\']\n+```\n+\n+See `plone.restapi.interfaces.IBlockSearchableText` for details.\n+The `__call__` methods needs to return a string, for the text to be indexed.\n+\n+This adapter needs to be registered as a named adapter, where the name is the same as the block type (its `@type` property from the block value):\n+\n+```xml\n+<adapter name="image" factory=".indexers.ImageBlockSearchableText" />\n+```\ndiff --git a/docs/source/blocks.rst b/docs/source/blocks.rst\ndeleted file mode 100644\nindex 9133d66f8..000000000\n--- a/docs/source/blocks.rst\n+++ /dev/null\n@@ -1,223 +0,0 @@\n-Volto Blocks support\n-====================\n-\n-.. note::\n-  plone.restapi package gives support for Volto Blocks providing a Dexterity behavior ``plone.restapi.behaviors.IBlocks`` that it is used to enable Volto Blocks in any content type.\n-  Volto then renders the Blocks engine for all the content types that have this behavior enabled.\n-\n-Retrieving blocks on a content object\n--------------------------------------\n-\n-The ``plone.restapi.behaviors.IBlocks`` has two fields where existing blocks and their data are stored in the object (``blocks``) and the one where the current layout is stored (``blocks_layout``).\n-As they are fields in a Deterity behavior, both fields will be returned in a simple GET as attributes::\n-\n-  GET /plone/my-document HTTP/1.1\n-  Accept: application/json\n-  Authorization: Basic YWRtaW46c2VjcmV0\n-\n-The server responds with a ``Status 200`` and list all stored blocks on that content object::\n-\n-  GET /plone/my-document HTTP/1.1\n-  Accept: application/json\n-  Authorization: Basic YWRtaW46c2VjcmV0\n-  Content-Type: application/json\n-\n-  {\n-    "@id": "http://localhost:55001/plone/my-document",\n-    ...\n-    "blocks_layout": [\n-      "#title-1",\n-      "#description-1",\n-      "#image-1"\n-    ],\n-    "blocks": {\n-      "#title-1": {\n-        "@type": "title"\n-      },\n-      "#description-1": {\n-        "@type": "Description"\n-      },\n-      "#image-1": {\n-        "@type": "Image",\n-        "image": "<some random url>"\n-      }\n-    }\n-  }\n-\n-blocks objects will contain the tile metadata and the information to required to render them.\n-\n-\n-Adding blocks to an object\n---------------------------\n-\n-Storing blocks is done also via a default PATCH content operation::\n-\n-  PATCH /plone/my-document HTTP/1.1\n-  Accept: application/json\n-  Authorization: Basic YWRtaW46c2VjcmV0\n-  Content-Type: application/json\n-\n-  {\n-    "blocks_layout": [\n-      "#title-1",\n-      "#description-1",\n-      "#image-1"\n-    ],\n-    "blocks": {\n-      "#title-1": {\n-        "@type": "title"\n-      },\n-      "#description-1": {\n-        "@type": "Description"\n-      },\n-      "#image-1": {\n-        "@type": "Image",\n-        "image": "<some random url>"\n-      }\n-    }\n-  }\n-\n-Block serializers and deserializers\n------------------------------------\n-\n-Practical experience has shown that it is useful to transform, server-side, the\n-value of block fields on inbound (deserialization) and also outbound\n-(serialization) operations. For example, HTML field values are cleaned up using\n-``portal_transforms``, paths in Image blocks are transformed to use ``resolveuid``\n-and so on.\n-\n-It is possible to influence the transformation of block values per block type.\n-For example, to tweak the value stored in Image type block, we can create a\n-new subscriber like as follows.\n-\n-..  code-block:: python\n-\n-    @implementer(IBlockFieldDeserializationTransformer)\n-    @adapter(IBlocks, IBrowserRequest)\n-    class ImageBlockDeserializeTransformer(object):\n-        order = 100\n-        block_type = \'image\'\n-\n-        def __init__(self, context, request):\n-            self.context = context\n-            self.request = request\n-\n-        def __call__(self, value):\n-            portal = getMultiAdapter(\n-                (self.context, self.request), name="plone_portal_state"\n-            ).portal()\n-            url = value.get(\'url\', \'\')\n-            deserialized_url = path2uid(\n-                context=self.context, portal=portal,\n-                href=url\n-            )\n-            value["url"] = deserialized_url\n-            return value\n-\n-Then register it as a subscription adapter.\n-\n-..  code-block:: xml\n-\n-    <subscriber factory=".blocks.ImageBlockDeserializeTransformer"\n-      provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"/>\n-\n-This would replace the ``url`` value to use ``resolveuid`` instead of hardcoding\n-the image path.\n-\n-The ``block_type`` attribute needs to match the ``@type`` field of the block\n-value. The ``order`` attribute is used in sorting the subscribers for the same\n-field. Lower number has higher precedence (is executed first).\n-\n-On the serialization path, a block value can be tweaked with a similar\n-transformer, for example on an imaginary Database Listing block type.\n-\n-..  code-block:: python\n-\n-    @implementer(IBlockFieldDeserializationTransformer)\n-    @adapter(IBlocks, IBrowserRequest)\n-    class DatabaseQueryDeserializeTransformer(object):\n-        order = 100\n-        block_type = \'database_listing\'\n-\n-        def __init__(self, context, request):\n-            self.context = context\n-            self.request = request\n-\n-        def __call__(self, value):\n-            value["items"] = db.query(value)  # pseudocode\n-            return value\n-\n-Then register it as a subscription adapter.\n-\n-..  code-block:: xml\n-\n-    <subscriber factory=".blocks.DatabaseQueryDeserializeTransformer"\n-      provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"/>\n-\n-Generic block transformers and smart fields\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-You can create a block transformer that applies to all blocks, by using ``None``\n-as the value for ``block_type``. The ``order`` field still applies, though. Using\n-the generic block transfomers enables us to create **smart block fields**,\n-which are handled differently. For example, any internal link stored as ``url``\n-or ``href`` in a block value is converted (and stored) as a ``resolveuid``-based URL,\n-then resolved back to a full URL on block serialization.\n-\n-Another **smart field** is the ``searchableText`` field in a block value. It\n-needs to be a plain text value and it will be used in the ``SearchableText``\n-value for the context item.\n-\n-If you need to store "subblocks" in a block value, you should use the\n-``blocks`` smart field (or ``data.blocks``), doing so integrates those blocks\n-with the transfomers.\n-\n-``SearchableText`` indexing for blocks\n---------------------------------------\n-\n-As the main consumer of ``plone.restapi``\'s blocks, this functionality is specific to Volto blocks. By default searchable text (for Plone\'s ``SearchableText`` index) is extracted from ``text`` blocks.\n-\n-To extract searchable text for other types of blocks, there are two approaches.\n-\n-Client side solution\n-~~~~~~~~~~~~~~~~~~~~\n-\n-The block provides the data to be indexed in its ``searchableText`` attribute.\n-\n-..  code-block:: json\n-\n-    {\n-      "@type": "image",\n-      "align": "center",\n-      "alt": "Plone Conference 2021 logo",\n-      "searchableText": "Plone Conference 2021 logo",\n-      "size": "l",\n-      "url": "https://2021.ploneconf.org/images/logoandfamiliesalt.svg"\n-    }\n-\n-This is the preferred solution.\n-\n-Server side solution\n-~~~~~~~~~~~~~~~~~~~~\n-\n-For each new block, you need to write an adapter that will extract the searchable text from the block information.\n-\n-..  code-block:: python\n-\n-    @implementer(IBlockSearchableText)\n-    @adapter(IBlocks, IBrowserRequest)\n-    class ImageSearchableText(object):\n-        def __init__(self, context, request):\n-            self.context = context\n-            self.request = request\n-\n-        def __call__(self, block_value):\n-            return block_value[\'alt_text\']\n-\n-See ``plone.restapi.interfaces.IBlockSearchableText`` for details. The ``__call__`` methods needs to return a string, for the text to be indexed.\n-\n-This adapter needs to be registered as a named adapter, where the name is the same as the block type (its ``@type`` property from the block value).\n-\n-..  code-block:: xml\n-\n-    <adapter name="image" factory=".indexers.ImageBlockSearchableText" />\ndiff --git a/docs/source/breadcrumbs.md b/docs/source/breadcrumbs.md\nnew file mode 100644\nindex 000000000..ec32483de\n--- /dev/null\n+++ b/docs/source/breadcrumbs.md\n@@ -0,0 +1,16 @@\n+(breadcrumbs)=\n+\n+# Breadcrumbs\n+\n+Get the breadcrumbs for the current page:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/breadcrumbs.req\n+```\n+\n+Example response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/breadcrumbs.resp\n+:language: http\n+```\ndiff --git a/docs/source/breadcrumbs.rst b/docs/source/breadcrumbs.rst\ndeleted file mode 100644\nindex 36261da35..000000000\n--- a/docs/source/breadcrumbs.rst\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-.. _breadcrumbs:\n-\n-Breadcrumbs\n-===========\n-\n-Getting the breadcrumbs for the current page:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/breadcrumbs.req\n-\n-Example response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/breadcrumbs.resp\n-   :language: http\ndiff --git a/docs/source/comments.md b/docs/source/comments.md\nnew file mode 100644\nindex 000000000..09b0da0d4\n--- /dev/null\n+++ b/docs/source/comments.md\n@@ -0,0 +1,121 @@\n+# Comments\n+\n+Plone offers to users a feature to post comments on any content object with `plone.app.discussion`.\n+\n+Commenting can be enabled globally for specific content types and for single content objects.\n+\n+When commenting is enabled on your content object, you can retrieve a list of all existing comments, add new comments, reply to existing comments, or delete a comment.\n+\n+\n+## Listing Comments\n+\n+You can list the existing comment on a content object by sending a `GET` request to the URL of the content object and appending `/@comments`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/comments_get.req\n+```\n+\n+The server will respond with a `Status 200` and a batched list of all comments:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/comments_get.resp\n+:language: http\n+```\n+\n+The following fields are returned.\n+\n+- `@id`: Link to the current endpoint\n+- `items`: a list of comments for the current resource\n+- `items_total`: the total number of comments for the resource\n+- `batching`: batching information\n+\n+The `items` attribute returns a list of comments.\n+Each comment provides the following fields.\n+\n+- `@id`: hyperlink to the comment\n+- `@parent`: (optional) the parent comment\n+- `author_name`: the full name of the author of this comment\n+- `author_username`: the username of the author of this comment\n+- `comment_id`: the comment ID uniquely identifies the comment\n+- `in_reply_to`: the comment ID of the parent comment\n+- `creation_date`: when the comment was placed\n+- `modification_date`: when the comment was last updated\n+- `text`: contains a `mime-type` and `text` attribute with the text of the comment.\n+  Default `mime-type` is `text/plain`.\n+- `user_notification`: boolean value to indicate if the author of the comment requested notifications on replies\n+\n+\n+## Adding a Comment\n+\n+To add a new comment to a content object, send a `POST` request to the URL of the content object and append `/@comments` to the URL.\n+The body of the request needs to contain a JSON structure with a `text` attribute that contains the comment text:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/comments_add_root.req\n+```\n+\n+If the creation of the comment has been successful, the server will respond with a {term}`204 No Content` status and the URL of the newly created comment in the location header:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/comments_add_root.resp\n+:language: http\n+```\n+\n+\n+## Replying to a Comment\n+\n+To add a direct reply to an existing comment, send a `POST` request to the URL of the comment\n+ to which you want to reply.\n+The body of the request needs to contain a JSON structure with a `text` attribute that contains the comment text:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/comments_add_sub.req\n+```\n+\n+If the creation of the comment has been successful, the server will respond with a {term}`204 No Content` status and the URL of the newly created comment in the location header:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/comments_add_sub.resp\n+:language: http\n+```\n+\n+\n+## Updating a Comment\n+\n+```{note}\n+The permission to update a comment is, by default, only granted to the creater (owner role) of the comment.\n+```\n+\n+An existing comment can be updated by sending a `PATCH` request to the URL of the comment.\n+The request body needs to contain a JSON structure with at least a `text` attribute:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/comments_update.req\n+```\n+\n+The server will respond with a {term}`204 No Content` response and a location header with the comment URL when the comment has been updated successfully:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/comments_update.resp\n+:language: http\n+```\n+\n+\n+## Deleting a Comment\n+\n+An existing comment can be deleted by sending a `DELETE` request to the URL of the comment.\n+\n+```{note}\n+Deleting a comment will, by default, also delete all existing replies to that comment.\n+```\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+         :request: ../../src/plone/restapi/tests/http-examples/comments_delete.req\n+```\n+\n+When the comment has been deleted successfully, the server will respond with a {term}`204 No Content` response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/comments_delete.resp\n+:language: http\n+```\ndiff --git a/docs/source/comments.rst b/docs/source/comments.rst\ndeleted file mode 100644\nindex d43c34ae8..000000000\n--- a/docs/source/comments.rst\n+++ /dev/null\n@@ -1,101 +0,0 @@\n-Comments\n-========\n-\n-Plone offers users to post comments on any content object with plone.app.discussion.\n-\n-Commenting can be enabled globally, for specific content types and for single content objects.\n-\n-When commenting is enabled on your content object, you can retrieve a list of all existing comments, add new comments, reply to existing comments or delete a comment.\n-\n-Listing Comments\n-----------------\n-\n-You can list the existing comment on a content object by sending a GET request to the URL of the content object and appending \'/@comments\':\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/comments_get.req\n-\n-The server will respond with a `Status 200` and a batched list of all comments:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/comments_get.resp\n-   :language: http\n-\n-These following fields are returned:\n-\n-- @id: Link to the current endpoint\n-- items: a list of comments for the current resource\n-- items_total: the total number of comments for the resource\n-- batching: batching information\n-\n-The items attribute returns a list of comments, each comment provides the following fields:\n-\n-- @id: hyperlink to the comment\n-- @parent: (optional) the parent comment\n-- author_name: the full name of the author of this comment\n-- author_username: the username of the author of this comment\n-- comment_id: the comment ID uniquely identifies the comment\n-- in_reply_to: the comment ID of the parent comment\n-- creation_date: when the comment was placed\n-- modification_date: when the comment was last updated\n-- text: contains a \'mime-type\' and \'text\' attribute with the text of the comment. Default mime-type is \'text/plain\'.\n-- user_notification: boolean value to indicate if the author of the comment requested notifications on replies\n-\n-\n-Adding a Comment\n-----------------\n-\n-To add a new comment to a content object, send a POST request to the URL of the content object and append \'/@comments\' to the URL. The body of the request needs to contain a JSON structure with a \'text\' attribute that contains the comment text:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/comments_add_root.req\n-\n-If the creation of the comment has been successful, the server will respond with a :term:`204 No Content` status and the URL of the newly created comment in the location header:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/comments_add_root.resp\n-   :language: http\n-\n-\n-Replying to a Comment\n----------------------\n-\n-To add a direct reply to an existing comment, send a POST request to the URL of the comment you want to reply to. The body of the request needs to contain a JSON structure with a \'text\' attribute that contains the comment text:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/comments_add_sub.req\n-\n-If the creation of the comment has been successful, the server will respond with a :term:`204 No Content` status and the URL of the newly created comment in the location header:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/comments_add_sub.resp\n-   :language: http\n-\n-\n-Updating a Comment\n-------------------\n-\n-.. note:: The permission to update a comment is, by default, only granted to the creater (owner role) of the comment.\n-\n-An existing comment can be updated by sending a PATCH request to the URL of the comment. The request body needs to contain a JSON structure with at least a \'text\' attribute:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/comments_update.req\n-\n-The server will respond with a :term:`204 No Content` response and a location header with the comment URL when the comment has been updated successfully:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/comments_update.resp\n-   :language: http\n-\n-\n-Deleting a Comment\n-------------------\n-\n-An existing comment can be deleted by sending a DELETE request to the URL of the comment.\n-\n-.. note:: Deleting a comment will, by default, also delete all existing replies to that comment.\n-\n-..  http:example:: curl httpie python-requests\n-\t :request: ../../src/plone/restapi/tests/http-examples/comments_delete.req\n-\n-When the comment has been deleted successfully, the server will respond with a :term:`204 No Content` response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/comments_delete.resp\n-   :language: http\ndiff --git a/docs/source/conf.py b/docs/source/conf.py\nindex 707ff7023..6f0de38d2 100644\n--- a/docs/source/conf.py\n+++ b/docs/source/conf.py\n@@ -43,6 +43,10 @@\n # Add any Sphinx extension module names here, as strings. They can be\n # extensions coming with Sphinx (named "sphinx.ext.*") or your custom ones.\n extensions = [\n+    "myst_parser",\n+    "sphinx.ext.intersphinx",\n+    "sphinx.ext.todo",\n+    "sphinx_copybutton",\n     "sphinxcontrib.httpdomain",\n     "sphinxcontrib.httpexample",\n ]\n@@ -64,10 +68,11 @@ def patch_pygments_to_highlight_jsonschema():\n \n \n # The suffix of source filenames.\n-source_suffix = ".rst"\n-# source_suffix = {\n-#     ".md": "markdown",\n-# }\n+# source_suffix = ".rst"\n+source_suffix = {\n+    ".md": "markdown",\n+    ".rst": "reStructuredText",\n+}\n \n \n # The master toctree document.\n@@ -86,7 +91,7 @@ def patch_pygments_to_highlight_jsonschema():\n # List of patterns, relative to source directory, that match files and\n # directories to ignore when looking for source files.\n # This pattern also affects html_static_path and html_extra_path.\n-exclude_patterns = ["*ideas/*"]\n+# exclude_patterns = ["*ideas/*"]\n \n # The reST default role (used for this markup: `text`) to use for all documents.\n # default_role = None\n@@ -287,8 +292,17 @@ def patch_pygments_to_highlight_jsonschema():\n     "linkify",  # Identify \xe2\x80\x9cbare\xe2\x80\x9d web URLs and add hyperlinks.\n     "colon_fence",  # You can also use ::: delimiters to denote code fences,\\\n                     #  instead of ```.\n+    "substitution",  # https://myst-parser.readthedocs.io/en/latest/syntax/optional.html#substitutions-with-jinja2\n ]\n \n+myst_substitutions = {\n+    "postman_basic_auth": "![](_static/img/postman_basic_auth.png)",\n+    "postman_headers": "![](_static/img/postman_headers.png)",\n+    "postman_request": "![](_static/img/postman_request.png)",\n+    "postman_response": "![](_static/img/postman_response.png)",\n+    "postman_retain_headers": "![](_static/img/postman_retain_headers.png)",\n+    "fawrench": \'<span class="fa fa-wrench" style="font-size: 1.6em;"></span>\',\n+}\n \n # -- Options for LaTeX output --------------------------------------------------\n \ndiff --git a/docs/source/content-negotiation.md b/docs/source/content-negotiation.md\nnew file mode 100644\nindex 000000000..9f7390cd6\n--- /dev/null\n+++ b/docs/source/content-negotiation.md\n@@ -0,0 +1,22 @@\n+# Content Negotiation\n+\n+[Content negotiation](https://datatracker.ietf.org/doc/html/rfc7231#section-5.3) is a mechanism defined in the [HTTP specification](https://datatracker.ietf.org/doc/html/rfc7231) that makes it possible to serve different versions of a document (or more generally, a resource representation) at the same URI, so that user agents can specify which version fit their capabilities the best.\n+\n+The user agent (or the REST consumer) can ask for a specific representation by providing an `Accept` HTTP header that lists acceptable media types (e.g., JSON):\n+\n+```\n+GET /\n+Accept: application/json\n+```\n+\n+The server is then able to supply the version of the resource that best fits the user agent\'s needs.\n+This is reflected in the `Content-Type` header:\n+\n+```\n+HTTP 200 OK\n+Content-Type: application/json\n+\n+{\n+  \'data\': ...\n+}\n+```\ndiff --git a/docs/source/content-negotiation.rst b/docs/source/content-negotiation.rst\ndeleted file mode 100644\nindex ff232074e..000000000\n--- a/docs/source/content-negotiation.rst\n+++ /dev/null\n@@ -1,19 +0,0 @@\n-Content Negotiation\n-===================\n-\n-`Content negotiation <https://datatracker.ietf.org/doc/html/rfc7231#section-5.3>`_ is a mechanism defined in the `HTTP specification <https://datatracker.ietf.org/doc/html/rfc7231>`_ that makes it possible to serve different versions of a document (or more generally, a resource representation) at the same URI, so that user agents can specify which version fit their capabilities the best.\n-\n-The user agent (or the REST consumer) can ask for a specific representation by providing an Accept HTTP header that lists acceptable media types (e.g. JSON)::\n-\n-  GET /\n-  Accept: application/json\n-\n-The server is then able to supply the version of the resource that best fits the user agent\'s needs.\n-This is reflected in the Content-Type header::\n-\n-  HTTP 200 OK\n-  Content-Type: application/json\n-\n-  {\n-    \'data\': ...\n-  }\n\\ No newline at end of file\ndiff --git a/docs/source/content.md b/docs/source/content.md\nnew file mode 100644\nindex 000000000..813171f72\n--- /dev/null\n+++ b/docs/source/content.md\n@@ -0,0 +1,410 @@\n+# Content Manipulation\n+\n+`plone.restapi` does not only expose content objects via a RESTful API.\n+The API consumer can create, read, update, and delete a content object.\n+Those operations can be mapped to the HTTP verbs `POST` (Create), `GET` (Read), `PUT` (Update) and `DELETE` (Delete).\n+\n+Manipulating resources across the network using HTTP as an application protocol is one of core principles of the REST architectural pattern.\n+This allows us to interact with a specific resource in a standardized way.\n+\n+| Verb     | URL                      | Action                                    |\n+| -------- | ------------------------ | ----------------------------------------- |\n+| `POST`   | `/folder`                | Creates a new document within the folder  |\n+| `GET`    | `/folder/\\{document-id}` | Request the current state of the document |\n+| `PATCH`  | `/folder/\\{document-id}` | Update the document details               |\n+| `DELETE` | `/folder/\\{document-id}` | Remove the document                       |\n+\n+\n+## Creating a Resource with `POST`\n+\n+To create a new resource, we send a `POST` request to the resource container.\n+If we want to create a new document within an existing folder, we send a `POST` request to that folder:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/content_post.req\n+```\n+\n+By setting the `Accept` header, we tell the server that we would like to receive the response in the `application/json` representation format.\n+\n+The `Content-Type` header indicates that the body uses the `application/json` format.\n+\n+The request body contains the minimal necessary information needed to create a document (the type and the title).\n+You could set other properties, such as `description`, as well.\n+\n+A special property during content creation is `UID`\n+It requires the user to have the `Manage Portal` permission to set it.\n+Without the permission, the request will fail as `Unauthorized`.\n+\n+\n+### Successful Response (201 Created)\n+\n+If a resource has been created, the server responds with the {term}`201 Created` status code.\n+The `Location` header contains the URL of the newly created resource, and the resource representation is in the payload:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/content_post.resp\n+:language: http\n+```\n+\n+\n+### Unsuccessful Response (400 Bad Request)\n+\n+If the resource could not be created, for instance because the title was missing in the request, the server responds with {term}`400 Bad Request`:\n+\n+```\n+HTTP/1.1 400 Bad Request\n+Content-Type: application/json\n+\n+{\n+  \'message\': \'Required title field is missing\'\n+}\n+```\n+\n+The response body can contain information about why the request failed.\n+\n+\n+### Unsuccessful Response (500 Internal Server Error)\n+\n+If the server can not properly process a request, it responds with {term}`500 Internal Server Error`:\n+\n+```\n+HTTP/1.1 500 Internal Server Error\n+Content-Type: application/json\n+\n+{\n+  \'message\': \'Internal Server Error\'\n+}\n+```\n+\n+The response body can contain additional information, such as an error trace or a link to the documentation.\n+\n+\n+### Possible `POST` Responses\n+\n+Possible server responses for a `POST` request are:\n+\n+- {term}`201 Created` (Resource has been created successfully)\n+- {term}`400 Bad Request` (malformed request to the service)\n+- {term}`500 Internal Server Error` (server fault, can not recover internally)\n+\n+\n+### `POST` Implementation\n+\n+A pseudo-code example of the `POST` implementation on the server:\n+\n+```python\n+try:\n+    order = createOrder()\n+    if order == None:\n+        # Bad Request\n+        response.setStatus(400)\n+    else:\n+        # Created\n+        response.setStatus(201)\n+except:\n+    # Internal Server Error\n+    response.setStatus(500)\n+```\n+\n+```{todo}\n+Link to the real implementation...\n+```\n+\n+\n+## Reading a Resource with `GET`\n+\n+After a successful `POST`, we can access the resource by sending a `GET` request to the resource URL:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/content_get.req\n+```\n+\n+\n+### Successful Response (200 OK)\n+\n+If a resource has been retrieved successfully, the server responds with {term}`200 OK`:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/content_get.resp\n+:language: http\n+```\n+\n+For folderish types, their children are automatically included in the response as `items`.\n+To disable the inclusion, add the `GET` parameter `include_items=false` to the URL.\n+\n+By default, only basic metadata is included.\n+To include additional metadata, you can specify the names of the properties with the `metadata_fields` parameter.\n+See also {ref}`retrieving-additional-metadata`.\n+\n+The following example additionally retrieves the `UID` and `Creator`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/content_get_folder.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/content_get_folder.resp\n+:language: http\n+```\n+\n+```{note}\n+For folderish types, collections or search results, the results will be **batched** if the size of the resultset exceeds the batch size.\n+See {doc}`batching` for more details on how to work with batched results.\n+```\n+\n+\n+### Unsuccessful response (404 Not Found)\n+\n+If a resource cannot be found, the server will respond with {term}`404 Not Found`:\n+\n+```\n+HTTP/1.1 404 Not Found\n+Content-Type: application/json\n+\n+{\n+  \'error\': \'NotFound\'\n+}\n+```\n+\n+\n+### `GET` Implementation\n+\n+A pseudo-code example of the `GET` implementation on the server:\n+\n+```python\n+try:\n+    order = getOrder()\n+    if order == None:\n+        # Not Found\n+        response.setStatus(404)\n+    else:\n+        # OK\n+        response.setStatus(200)\n+except:\n+    # Internal Server Error\n+    response.setStatus(500)\n+```\n+\n+You can find implementation details in the [plone.restapi.services.content.add.FolderPost class](https://github.com/plone/plone.restapi/blob/dde57b88e0f1b5f5e9f04e6a21865bc0dde55b1c/src/plone/restapi/services/content/add.py#L35-L61).\n+\n+\n+### `GET` Responses\n+\n+Possible server responses for a `GET` request are:\n+\n+- {term}`200 OK`\n+- {term}`404 Not Found`\n+- {term}`500 Internal Server Error`\n+\n+\n+## Updating a Resource with `PATCH`\n+\n+To update an existing resource, we send a `PATCH` request to the server.\n+`PATCH` allows providing just a subset of the resource, such as the values you actually want to change.\n+\n+If you send the value `null` for a field, the field\'s content will be deleted, and the `missing_value` defined for the field in the schema will be set.\n+Note that this is not possible if the field is `required`, and it only works for Dexterity types, not Archetypes:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/content_patch.req\n+```\n+\n+\n+### Successful Response (204 No Content)\n+\n+A successful response to a `PATCH` request will be indicated by a {term}`204 No Content` response by default:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/content_patch.resp\n+:language: http\n+```\n+\n+\n+### Successful Response (200 OK)\n+\n+You can get the object representation by adding a `Prefer` header with a value of `return=representation` to the `PATCH` request.\n+In this case, the response will be a {term}`200 OK`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/content_patch_representation.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/content_patch_representation.resp\n+:language: http\n+```\n+\n+See the full specifications in [RFC 5789: `PATCH` Method for HTTP](https://datatracker.ietf.org/doc/html/rfc5789).\n+\n+\n+## Replacing a Resource with `PUT`\n+\n+```{note}\n+`PUT` is not implemented yet.\n+```\n+\n+To replace an existing resource, we send a `PUT` request to the server:\n+\n+```{todo}\n+Add example.\n+```\n+\n+In accordance with the HTTP specification, a successful `PUT` will not create a new resource or produce a new URL.\n+\n+`PUT` expects the entire resource representation to be supplied to the server, rather than just changes to the resource state.\n+This is usually not a problem since the consumer application requested the resource representation before a `PUT` anyways.\n+\n+When the `PUT` request is accepted and processed by the service, the consumer will receive a {term}`204 No Content` response ({term}`200 OK` would be a valid alternative).\n+\n+\n+### Successful Update (204 No Content)\n+\n+When a resource has been updated successfully, the server sends a {term}`204 No Content` response:\n+\n+```{todo}\n+Add example.\n+```\n+\n+\n+### Unsuccessful Update (409 Conflict)\n+\n+Sometimes requests fail due to incompatible changes.\n+The response body includes additional information about the problem:\n+\n+```{todo}\n+Add example.\n+```\n+\n+\n+### `PUT` Implementation\n+\n+A pseudo-code example of the `PUT` implementation on the server:\n+\n+```python\n+try:\n+    order = getOrder()\n+    if order:\n+        try:\n+            saveOrder()\n+        except conflict:\n+            response.setStatus(409)\n+        # OK\n+        response.setStatus(200)\n+    else:\n+        # Not Found\n+        response.setStatus(404)\n+except:\n+    # Internal Server Error\n+    response.setStatus(500)\n+```\n+\n+```{todo}\n+Link to the real implementation...\n+```\n+\n+\n+\n+### `PUT` Responses\n+\n+Possible server responses for a `PUT` request are:\n+\n+- {term}`200 OK`\n+- {term}`404 Not Found`\n+- {term}`409 Conflict`\n+- {term}`500 Internal Server Error`\n+\n+\n+### `POST` vs. `PUT`\n+\n+Using `POST` or `PUT` depend on the desired outcome.\n+\n+- Use `POST` to create a resource identified by a service-generated URI.\n+- Use `POST` to append a resource to a collection identified by a service-generated URI.\n+- Use `PUT` to overwrite a resource.\n+\n+This follows [RFC 7231: HTTP 1.1: `PUT` Method](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.4).\n+\n+\n+## Removing a Resource with `DELETE`\n+\n+We can delete an existing resource by sending a `DELETE` request:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/content_delete.req\n+```\n+\n+A successful response will be indicated by a {term}`204 No Content` response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/content_delete.resp\n+:language: http\n+```\n+\n+\n+### `DELETE` Implementation\n+\n+A pseudo-code example of the `DELETE` implementation on the server:\n+\n+```python\n+try:\n+    order = getOrder()\n+    if order:\n+        if can_delete(order):\n+            # No Content\n+            response.setStatus(204)\n+        else:\n+            # Not Allowed\n+            response.setStatus(405)\n+    else:\n+        # Not Found\n+        response.setStatus(404)\n+except:\n+    # Internal Server Error\n+    response.setStatus(500)\n+```\n+\n+```{todo}\n+Link to the real implementation...\n+```\n+\n+\n+\n+### `DELETE` Responses\n+\n+Possible responses to a `DELETE` request are:\n+\n+- {term}`204 No Content`\n+- {term}`404 Not Found` (if the resource does not exist)\n+- {term}`405 Method Not Allowed` (if deleting the resource is not allowed)\n+- {term}`500 Internal Server Error`\n+\n+\n+## Reordering sub resources\n+\n+The resources contained within a resource can be reordered using the `ordering` key with a `PATCH` request on the container.\n+\n+Use the `obj_id` subkey to specify which resource to reorder.\n+The subkey `delta` can be `top`, `bottom`, or a negative or positive integer for moving up or down.\n+\n+Reordering resources within a subset of resources can be done using the `subset_ids` subkey.\n+\n+A response of `400 BadRequest` with a message `Client/server ordering mismatch` will be returned if the value is not in the same order as server side.\n+\n+A response of `400 BadRequest` with a message `Content ordering is not supported by this resource` will be returned if the container does not support ordering:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/content_reorder.req\n+```\n+\n+To rearrange all items in a folderish context, use the `sort` key.\n+\n+The `on` subkey defines the catalog index to be sorted on.\n+The `order` subkey indicates either the `ascending` or `descending` order of items.\n+\n+A response `400 BadRequest` with a message `Content ordering is not supported by this resource` will be returned if the container does not support ordering:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/content_resort.req\n+```\ndiff --git a/docs/source/content.rst b/docs/source/content.rst\ndeleted file mode 100644\nindex c49970336..000000000\n--- a/docs/source/content.rst\n+++ /dev/null\n@@ -1,389 +0,0 @@\n-Content Manipulation\n-====================\n-\n-plone.restapi does not only expose content objects via a RESTful API. The API consumer can create, read, update, and delete a content object. Those operations can be mapped to the HTTP verbs POST (Create), GET (Read), PUT (Update) and DELETE (Delete).\n-\n-Manipulating resources across the network by using HTTP as an application protocol is one of core principles of the REST architectural pattern. This allows us to interact with a specific resource in a standardized way:\n-\n-======= ======================= ==============================================\n-Verb    URL                     Action\n-======= ======================= ==============================================\n-POST    /folder                 Creates a new document within the folder\n-GET     /folder/{document-id}   Request the current state of the document\n-PATCH   /folder/{document-id}   Update the document details\n-DELETE  /folder/{document-id}   Remove the document\n-======= ======================= ==============================================\n-\n-\n-Creating a Resource with POST\n------------------------------\n-\n-To create a new resource, we send a POST request to the resource container.\n-If we want to create a new document within an existing folder, we send a POST request to that folder:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/content_post.req\n-\n-By setting the \'Accept\' header, we tell the server that we would like to receive the response in the \'application/json\' representation format.\n-\n-The \'Content-Type\' header indicates that the body uses the \'application/json\' format.\n-\n-The request body contains the minimal necessary information needed to create a document (the type and the title).\n-You could set other properties, like "description" here as well.\n-\n-A special property during content creation is "UID", as it requires the user to have the *Manage Portal* permission to set it. Without the permission, the request will fail as Unauthorized.\n-\n-\n-Successful Response (201 Created)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-If a resource has been created, the server responds with the :term:`201 Created` status code.\n-The \'Location\' header contains the URL of the newly created resource and the resource representation in the payload:\n-\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_post.resp\n-   :language: http\n-\n-\n-Unsuccessful Response (400 Bad Request)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-If the resource could not be created, for instance because the title was missing in the request, the server responds with :term:`400 Bad Request`::\n-\n-  HTTP/1.1 400 Bad Request\n-  Content-Type: application/json\n-\n-  {\n-    \'message\': \'Required title field is missing\'\n-  }\n-\n-The response body can contain information about why the request failed.\n-\n-\n-Unsuccessful Response (500 Internal Server Error)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-If the server can not properly process a request, it responds with :term:`500 Internal Server Error`::\n-\n-  HTTP/1.1 500 Internal Server Error\n-  Content-Type: application/json\n-\n-  {\n-    \'message\': \'Internal Server Error\'\n-  }\n-\n-The response body can contain further information such as an error trace or a link to the documentation.\n-\n-\n-Possible POST Responses\n-^^^^^^^^^^^^^^^^^^^^^^^\n-\n-Possible server reponses for a POST request are:\n-\n-* :term:`201 Created` (Resource has been created successfully)\n-* :term:`400 Bad Request` (malformed request to the service)\n-* :term:`500 Internal Server Error` (server fault, can not recover internally)\n-\n-\n-POST Implementation\n-^^^^^^^^^^^^^^^^^^^\n-\n-A pseudo-code example of the POST implementation on the server::\n-\n-    try:\n-        order = createOrder()\n-        if order == None:\n-            # Bad Request\n-            response.setStatus(400)\n-        else:\n-            # Created\n-            response.setStatus(201)\n-    except:\n-        # Internal Server Error\n-        response.setStatus(500)\n-\n-TODO: Link to the real implementation...\n-[\n-\n-\n-Reading a Resource with GET\n----------------------------\n-\n-After a successful POST, we can access the resource by sending a GET request to the resource URL:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/content_get.req\n-\n-\n-Successful Response (200 OK)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-If a resource has been retrieved successfully, the server responds with :term:`200 OK`:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_get.resp\n-   :language: http\n-\n-\n-For folderish types, their childrens are automatically included in the response\n-as ``items``. To disable the inclusion, add the GET parameter ``include_items=false``\n-to the URL.\n-\n-By default only basic metadata is included. To include additional metadata,\n-you can specify the names of the properties with the ``metadata_fields`` parameter.\n-See also :ref:`retrieving-additional-metadata`.\n-\n-The following example additionaly retrieves the UID and Creator:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/content_get_folder.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_get_folder.resp\n-   :language: http\n-\n-.. note::\n-        For folderish types, collections or search results, the results will\n-        be **batched** if the size of the resultset exceeds the batch size.\n-        See :doc:`./batching` for more details on how to work with batched\n-        results.\n-\n-Unsuccessful response (404 Not Found)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-If a resource could not be found, the server will respond with :term:`404 Not Found`::\n-\n-  HTTP/1.1 404 Not Found\n-  Content-Type: application/json\n-\n-  {\n-    \'error\': \'NotFound\'\n-  }\n-\n-\n-GET Implementation\n-^^^^^^^^^^^^^^^^^^\n-\n-A pseudo-code example of the GET implementation on the server::\n-\n-    try:\n-        order = getOrder()\n-        if order == None:\n-            # Not Found\n-            response.setStatus(404)\n-        else:\n-            # OK\n-            response.setStatus(200)\n-    except:\n-        # Internal Server Error\n-        response.setStatus(500)\n-\n-You can find implementation details in the `plone.restapi.services.content.add.FolderPost class <https://github.com/plone/plone.restapi/blob/dde57b88e0f1b5f5e9f04e6a21865bc0dde55b1c/src/plone/restapi/services/content/add.py#L35-L61>`_\n-\n-\n-GET Responses\n-^^^^^^^^^^^^^\n-\n-Possible server reponses for a GET request are:\n-\n-* :term:`200 OK`\n-* :term:`404 Not Found`\n-* :term:`500 Internal Server Error`\n-\n-\n-Updating a Resource with PATCH\n-------------------------------\n-\n-To update an existing resource we send a PATCH request to the server.\n-PATCH allows to provide just a subset of the resource\n-(the values you actually want to change).\n-\n-If you send the value ``null`` for a field, the field\'s content will be\n-deleted and the ``missing_value`` defined for the field in the schema\n-will be set. Note that this is not possible if the field is ``required``,\n-and it only works for Dexterity types, not Archetypes:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/content_patch.req\n-\n-\n-Successful Response (204 No Content)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-A successful response to a PATCH request will be indicated by a :term:`204 No Content` response by default:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_patch.resp\n-   :language: http\n-\n-\n-Successful Response (200 OK)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-You can get the object representation by adding a `Prefer` header with a value of `return=representation` to the PATCH request.\n-In this case, the response will be a :term:`200 OK`:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/content_patch_representation.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_patch_representation.resp\n-   :language: http\n-\n-See for full specs the `RFC 5789: PATCH Method for HTTP <https://datatracker.ietf.org/doc/html/rfc5789>`_\n-\n-\n-Replacing a Resource with PUT\n------------------------------\n-\n-.. note::\n-\n-  PUT is not implemented yet.\n-\n-To replace an existing resource we send a PUT request to the server:\n-\n-TODO: Add example.\n-\n-In accordance with the HTTP specification, a successful PUT will not create a new resource or produce a new URL.\n-\n-PUT expects the entire resource representation to be supplied to the server, rather than just changes to the resource state.\n-This is usually not a problem since the consumer application requested the resource representation before a PUT anyways.\n-\n-When the PUT request is accepted and processed by the service, the consumer will receive a :term:`204 No Content` response (:term:`200 OK` would be a valid alternative).\n-\n-\n-Successful Update (204 No Content)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-When a resource has been updated successfully, the server sends a :term:`204 No Content` response:\n-\n-TODO: Add example.\n-\n-\n-Unsuccessful Update (409 Conflict)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-Sometimes requests fail due to incompatible changes.\n-The response body includes additional information about the problem.\n-\n-TODO: Add example.\n-\n-\n-PUT Implementation\n-^^^^^^^^^^^^^^^^^^\n-\n-A pseudo-code example of the PUT implementation on the server::\n-\n-    try:\n-        order = getOrder()\n-        if order:\n-            try:\n-                saveOrder()\n-            except conflict:\n-                response.setStatus(409)\n-            # OK\n-            response.setStatus(200)\n-        else:\n-            # Not Found\n-            response.setStatus(404)\n-    except:\n-        # Internal Server Error\n-        response.setStatus(500)\n-\n-TODO: Link to the real implementation...\n-\n-\n-PUT Responses\n-^^^^^^^^^^^^^\n-\n-Possible server reponses for a PUT request are:\n-\n-* :term:`200 OK`\n-* :term:`404 Not Found`\n-* :term:`409 Conflict`\n-* :term:`500 Internal Server Error`\n-\n-\n-POST vs. PUT\n-^^^^^^^^^^^^\n-\n-Difference between POST and PUT:\n-\n-  * Use POST to create a resource identified by a service-generated URI\n-  * Use POST to append a resource to a collection identified by a service-generated URI\n-  * Use PUT to overwrite a resource\n-\n-This follows `RFC 7231: HTTP 1.1: PUT Method <https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.4>`_.\n-\n-\n-Removing a Resource with DELETE\n--------------------------------\n-\n-We can delete an existing resource by sending a DELETE request:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/content_delete.req\n-\n-A successful response will be indicated by a :term:`204 No Content` response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/content_delete.resp\n-   :language: http\n-\n-\n-DELETE Implementation\n-^^^^^^^^^^^^^^^^^^^^^\n-\n-A pseudo-code example of the DELETE implementation on the server::\n-\n-    try:\n-        order = getOrder()\n-        if order:\n-            if can_delete(order):\n-                # No Content\n-                response.setStatus(204)\n-            else:\n-                # Not Allowed\n-                response.setStatus(405)\n-        else:\n-            # Not Found\n-            response.setStatus(404)\n-    except:\n-        # Internal Server Error\n-        response.setStatus(500)\n-\n-TODO: Link to the real implementation...\n-\n-\n-DELETE Responses\n-^^^^^^^^^^^^^^^^\n-\n-Possible responses to a delete request are:\n-\n-  * :term:`204 No Content`\n-  * :term:`404 Not Found` (if the resource does not exist)\n-  * :term:`405 Method Not Allowed` (if deleting the resource is not allowed)\n-  * :term:`500 Internal Server Error`\n-\n-\n-Reordering sub resources\n-------------------------\n-The resources contained within a resource can be reordered using the `ordering` key using a PATCH request on the container.\n-\n-Use the `obj_id` subkey to specify which resource to reorder.\n-The subkey `delta` can be \'top\', \'bottom\', or a negative or positive integer for moving up or down.\n-\n-Reordering resources within a subset of resources can be done using the `subset_ids` subkey.\n-\n-A response 400 BadRequest with a message \'Client/server ordering mismatch\' will be returned if the value is not in the same order as serverside.\n-\n-A response 400 BadRequest with a message \'Content ordering is not supported by this resource\' will be returned if the container does not support ordering.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/content_reorder.req\n-\n-To rearrange all items in a folderish context use the `sort` key.\n-\n-The `on` subkey defines the catalog index to be sorted on. The `order` subkey indicates \'ascending\' or \'descending\' order of items.\n-\n-A response 400 BadRequest with a message \'Content ordering is not supported by this resource\' will be returned if the container does not support ordering.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/content_resort.req\n-\n-\ndiff --git a/docs/source/contextnavigation.md b/docs/source/contextnavigation.md\nnew file mode 100644\nindex 000000000..e1089e79b\n--- /dev/null\n+++ b/docs/source/contextnavigation.md\n@@ -0,0 +1,40 @@\n+(contextnavigation)=\n+\n+# Context Navigation\n+\n+\n+## Top-Level Navigation\n+\n+Get the top-level navigation items:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/contextnavigation.req\n+```\n+\n+Example response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/contextnavigation.resp\n+:language: http\n+```\n+\n+The `@contextnavigation` endpoint uses the same semantics as the classic Plone navigation portlet, largely through reusing the same code.\n+Instead of storing the portlet configuration in a portlet assignment storage, you can pass these as\n+parameters to the service or expand the component.\n+\n+You can provide these parameters:\n+\n+- `name` - The title of the navigation tree.\n+- `root_path` - Root node path, can be "frontend path", derived from router\n+- `includeTop` - Bool. Include top nodeschema\n+- `currentFolderOnly` - Bool. Only show the contents of the current folder.\n+- `topLevel` - Int. Start level\n+- `bottomLevel` - Int. Navigation tree depth\n+- `no_icons` - Bool. Suppress Icons\n+- `thumb_scale` - String. Override thumb scale\n+- `no_thumbs` - Bool. Suppress thumbs\n+\n+You should prefix these parameters with `expand.contextnavigation.`\n+A request would look like the following:\n+\n+`http://localhost:55001/plone/?expand.contextnavigation.topLevel=1&expand.contextnavigation.name=Custom+name`\ndiff --git a/docs/source/contextnavigation.rst b/docs/source/contextnavigation.rst\ndeleted file mode 100644\nindex 3e863717f..000000000\n--- a/docs/source/contextnavigation.rst\n+++ /dev/null\n@@ -1,40 +0,0 @@\n-.. _contextnavigation:\n-\n-Context Navigation\n-==================\n-\n-Top-Level Navigation\n---------------------\n-\n-Getting the top navigation items:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/contextnavigation.req\n-\n-Example response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/contextnavigation.resp\n-   :language: http\n-\n-\n-The ``@contextnavigation`` endpoint uses the same semantics as the classic Plone navigation\n-portlet, largely through reusing the same code. Instead of storing the\n-"portlet" configuration in a portlet assignment storage, you can pass these as\n-parameters to the service or expand component.\n-\n-You can provide these parameters:\n-\n-- ``name`` - The title of the navigation tree.\n-- ``root_path`` - Root node path, can be "frontend path", derived from router\n-- ``includeTop`` - Bool, Include top nodeschema\n-- ``currentFolderOnly`` - Bool, Only show the contents of the current folder.\n-- ``topLevel`` - Int, Start level\n-- ``bottomLevel`` - Int, Navigation tree depth\n-- ``no_icons`` - Bool, Suppress Icons\n-- ``thumb_scale`` - String, Override thumb scale\n-- ``no_thumbs`` = Bool, Suppress thumbs\n-\n-You should prefix these parameters with ``expand.contextnavigation.``, so a request\n-would look like:\n-\n-``http://localhost:55001/plone/?expand.contextnavigation.topLevel=1&expand.contextnavigation.name=Custom+name``\ndiff --git a/docs/source/contributing.md b/docs/source/contributing.md\nnew file mode 100644\nindex 000000000..974251637\n--- /dev/null\n+++ b/docs/source/contributing.md\n@@ -0,0 +1,53 @@\n+# Contributing to plone.restapi\n+\n+\n+## Generating documentation examples\n+\n+This documentation includes examples of requests and responses (http, curl, httpie, and python-requests).\n+These examples are generated by the documentation tests in `test_documentation.py`.\n+To generate a new example, add a new test case to `test_documentation.py`, for example `test_documentation_search_fullobjects`, and run the test\n+\n+```shell\n+./bin/test -t test_documentation_search_fullobjects\n+```\n+\n+This generates the request and the response files in `tests/http-examples/`.\n+\n+Include them in the documentation using MyST syntax:\n+\n+````\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/search_fullobjects.req\n+\n+..  literalinclude:: ../../src/plone/restapi/tests/http-examples/search_fullobjects.resp\n+    :language: http\n+```\n+````\n+\n+Build the documentation locally to test the rendering by running `./bin/sphinxbuilder`.\n+Alternatively, you can use Makefile targets:\n+\n+\n+`docs-clean`\n+: Clean current and legacy docs build directories, and Python virtual environment\n+\n+`docs-html`\n+: Build HTML\n+\n+`docs-linkcheck`\n+: Run linkcheck\n+\n+`docs-linkcheckbroken`\n+: Run linkcheck and show only broken links\n+\n+`docs-livehtml`\n+: Rebuild Sphinx documentation on changes, with live-reload in the browser\n+\n+`docs-spellcheck`\n+: Run spellcheck\n+\n+`docs`\n+: Build Docs\n+ \n+Make sure you add and commit the generated files in `http-examples`.\ndiff --git a/docs/source/contributing.rst b/docs/source/contributing.rst\ndeleted file mode 100644\nindex e03d24d86..000000000\n--- a/docs/source/contributing.rst\n+++ /dev/null\n@@ -1,28 +0,0 @@\n-Contributing to plone.restapi\n-=============================\n-\n-Generating documentation examples\n----------------------------------\n-\n-This documentation includes examples of requests and responses (http, curl, httpie and python-requests).\n-These examples are generated by the documentation tests in ``test_documentation.py``.\n-To generate a new example, add a new test case to `test_documentation.py` - for example ``test_documentation_search_fullobjects``, and run the test:\n-\n-``./bin/test -t test_documentation_search_fullobjects``\n-\n-This generates the request and the response files in ``tests/http-examples/``.\n-\n-Include them in the documentation like this:\n-\n-.. code-block:: ReST\n-\n-    ..  http:example:: curl httpie python-requests\n-        :request: ../../src/plone/restapi/tests/http-examples/search_fullobjects.req\n-\n-    .. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_fullobjects.resp\n-       :language: http\n-\n-\n-Build the sphinx docs locally to test the rendering by running ``./bin/sphinxbuilder``.\n-\n-Make sure you add and commit the generated files in ``http-examples``.\ndiff --git a/docs/source/controlpanels.md b/docs/source/controlpanels.md\nnew file mode 100644\nindex 000000000..930ccb917\n--- /dev/null\n+++ b/docs/source/controlpanels.md\n@@ -0,0 +1,191 @@\n+# Control Panels\n+\n+Control panels in Plone allow you to configure the global site setup of a Plone site.\n+The `@controlpanels` endpoint in `plone.restapi` allows you to list all existing control panels in a Plone site, and to retrieve or edit the settings of a specific control panel.\n+\n+Most of the settings in the Plone control panels are based on `plone.registry` since Plone 5.x.\n+Therefore, you can also use the `@registry` endpoint to retrieve or manipulate site settings.\n+The `@controlpanels` endpoint is a more convenient way of accessing the settings, and makes it\n+easier to render control panels on the front-end.\n+\n+```{note}\n+The `@controlpanels` endpoint is currently only implemented for Plone 5.\n+```\n+\n+\n+## Listing Control Panels\n+\n+A list of all existing control panels in the portal can be retrieved by sending a `GET` request to the `@controlpanels` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/controlpanels_get.resp\n+:language: http\n+```\n+\n+The following fields are returned:\n+\n+- `@id`: hypermedia link to the control panel\n+- `title`: the title of the control panel\n+- `group`: the group in which the control panel should appear, for example, `General`, `Content`, `Users`, `Security`, `Advanced`, or `Add-on Configuration`.\n+\n+\n+## Retrieve a single Control Panel\n+\n+To retrieve a single control panel, send a `GET` request to the URL of the control panel:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get_item.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n+:language: http\n+```\n+\n+The following fields are returned:\n+\n+- `@id`: hypermedia link to the control panel\n+- `title`: title of the control panel\n+- `group`: group name of the control panel\n+- `schema`: JSON Schema of the control panel\n+- `data`: current values of the control panel\n+\n+\n+## Updating a Control Panel with `PATCH`\n+\n+To update the settings on a control panel, send a `PATCH` request to control panel resource:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_patch.req\n+```\n+\n+A successful response to a `PATCH` request will be indicated by a {term}`204 No Content` response:\n+\n+```http\n+HTTP/1.1 204 No Content\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/controlpanels_patch.resp\n+:language: http\n+```\n+\n+\n+## Control Panels not based on `plone.registry`\n+\n+Control panels which are not based on `plone.registry` have a custom `@controlpanels/:panel` endpoint implementation.\n+\n+\n+(dexterity-types)=\n+\n+### Dexterity Types\n+\n+`@controlpanels/dexterity-types` is a custom control panel endpoint that will allow you to add, remove, and configure available {ref}`types`.\n+\n+Reading or writing Dexterity content types require the `plone.schemaeditor.ManageSchemata` permission.\n+\n+| Verb     | URL                                         | Action                                    |\n+| -------- | ------------------------------------------- | ----------------------------------------- |\n+| `GET`    | `/@controlpanels/dexterity-types`           | List configurable content types           |\n+| `POST`   | `/@controlpanels/dexterity-types`           | Creates a new content type                |\n+| `GET`    | `/@controlpanels/dexterity-types/{type-id}` | Get the current state of the content type |\n+| `PATCH`  | `/@controlpanels/dexterity-types/{type-id}` | Update the content type details           |\n+| `DELETE` | `/@controlpanels/dexterity-types/{type-id}` | Remove the content type                       |\n+\n+\n+#### Listing Dexterity Content Types\n+\n+To list the available content types, send a `GET` request to `@controlpanels/dexterity-types`\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get_dexterity.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/controlpanels_get_dexterity.resp\n+:language: http\n+```\n+\n+The following fields are returned:\n+\n+- `@id`: hypermedia link to the control panel\n+- `title`: title of the control panel\n+- `group`: group name of the control panel\n+- `schema`: JSON Schema of the control panel\n+- `data`: current values of the control panel\n+- `items`: list of configurable content types\n+\n+\n+#### Creating a new Dexterity Type with `POST`\n+\n+To create a new content type, send a `POST` request to the `/@controlpanels/dexterity-types` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.resp\n+:language: http\n+```\n+\n+\n+#### Reading a Dexterity Type with `GET`\n+\n+After a successful `POST`, access the content type by sending a `GET` request to the endpoint `/@controlpanels/dexterity-types/{type-id}`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.resp\n+:language: http\n+```\n+\n+\n+#### Updating a Dexterity Type with `PATCH`\n+\n+To update an existing content type, send a `PATCH` request to the server.\n+`PATCH` allows to provide just a subset of the resource, that is, the values you actually want to change:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.resp\n+:language: http\n+```\n+\n+\n+#### Removing a Dexterity Type with `DELETE`\n+\n+Delete an existing content type by sending a `DELETE` request to the URL of an existing content type:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_delete_dexterity_item.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/controlpanels_delete_dexterity_item.resp\n+:language: http\n+```\ndiff --git a/docs/source/controlpanels.rst b/docs/source/controlpanels.rst\ndeleted file mode 100644\nindex aa39fda97..000000000\n--- a/docs/source/controlpanels.rst\n+++ /dev/null\n@@ -1,182 +0,0 @@\n-Control Panels\n-==============\n-\n-Control panels in Plone allow you to configure the global site setup of a\n-Plone site. The ``@controlpanels`` endpoint in plone.restapi allows you to list\n-all existing control panels in a Plone site and to retrieve or edit the\n-settings of a specific control panel.\n-\n-Most of the settings in the Plone control panels are based on plone.registry (since Plone 5.x). Therefore you can also use the ``@registry`` endpoint to\n-retrieve or manipulate site settings. The ``@controlpanels`` endpoint just gives\n-developers are more a convenience way of accessing the settings and makes it\n-easier to render control panels on the front-end.\n-\n-\n-.. note:: This is currently only implemented for Plone 5.\n-\n-\n-Listing Control Panels\n-----------------------\n-\n-A list of all existing control panels in the portal can be retrieved by\n-sending a GET request to the ``@controlpanels`` endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_get.resp\n-   :language: http\n-\n-The following fields are returned:\n-\n-- ``@id``: hypermedia link to the control panel\n-- ``title``: the title of the control panel\n-- ``group``: the group where the control panel should show up (e.g. General, Content, Users, Security, Advanced, Add-on Configuration)\n-\n-\n-Retrieve a single Control Panel\n--------------------------------\n-\n-To retrieve a single control panel, send a GET request to the URL of the\n-control panel:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get_item.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n-   :language: http\n-\n-\n-The following fields are returned:\n-\n-- ``@id``: hypermedia link to the control panel\n-- ``title``: title of the control panel\n-- ``group``: group name of the control panel\n-- ``schema``: JSON Schema of the control panel\n-- ``data``: current values of the control panel\n-\n-\n-Updating a Control Panel with PATCH\n------------------------------------\n-\n-To update the settings on a control panel send a PATCH request to control panel\n-resource:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_patch.req\n-\n-A successful response to a PATCH request will be indicated by a :term:`204 No Content` response:\n-\n-  HTTP/1.1 204 No Content\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_patch.resp\n-   :language: http\n-\n-\n-Control Panels not based on plone.registry\n-------------------------------------------\n-\n-Control panel which are not based on plone.registry have a custom ``@controlpanels/:panel`` endpoint implementation.\n-\n-.. _dexterity-types:\n-\n-Dexterity Types\n-^^^^^^^^^^^^^^^\n-\n-``@controlpanels/dexterity-types`` is a custom control panel endpoint, that will allow you to add, remove and configure available :ref:`types`\n-\n-Reading or writing Dexterity Content Types require the ``plone.schemaeditor.ManageSchemata`` permission.\n-\n-======= =============================================== ==============================================\n-Verb    URL                                             Action\n-======= =============================================== ==============================================\n-GET     ``/@controlpanels/dexterity-types``             List configurable content-types\n-POST    ``/@controlpanels/dexterity-types``             Creates a new content-type\n-GET     ``/@controlpanels/dexterity-types/{type-id}``   Get the current state of the content-type\n-PATCH   ``/@controlpanels/dexterity-types/{type-id}``   Update the content-type details\n-DELETE  ``/@controlpanels/dexterity-types/{type-id}``   Remove content-type\n-======= =============================================== ==============================================\n-\n-\n-Listing Dexterity Content Types\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-To list the available content-types send a GET request to ``@controlpanels/dexterity-types``\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get_dexterity.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_get_dexterity.resp\n-   :language: http\n-\n-The following fields are returned:\n-\n-- ``@id``: hypermedia link to the control panel\n-- ``title``: title of the control panel\n-- ``group``: group name of the control panel\n-- ``schema``: JSON Schema of the control panel\n-- ``data``: current values of the control panel\n-- ``items``: list of configurable content-types.\n-\n-\n-Creating a new Dexterity Type with POST\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-To create a new content-type, send a POST request to the ``/@controlpanels/dexterity-types`` endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.resp\n-   :language: http\n-\n-\n-Reading a Dexterity Type with GET\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-After a successful POST, access the content-type by sending a GET request to the ``/@controlpanels/dexterity-types/{type-id}``:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.resp\n-   :language: http\n-\n-\n-Updating a Dexterity Type with PATCH\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-To update an existing content-type we send a PATCH request to the server.\n-PATCH allows to provide just a subset of the resource (the values you actually want to change).\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.resp\n-   :language: http\n-\n-\n-Removing a Dexterity Type with DELETE\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-Delete an existing content-type by sending a DELETE request to the URL of an existing content-type:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_delete_dexterity_item.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_delete_dexterity_item.resp\n-   :language: http\ndiff --git a/docs/source/conventions.md b/docs/source/conventions.md\nnew file mode 100644\nindex 000000000..ec83d6399\n--- /dev/null\n+++ b/docs/source/conventions.md\n@@ -0,0 +1,168 @@\n+# Conventions\n+\n+\n+## Naming Convention for REST API Resources and Endpoints\n+\n+\n+### Nouns versus Verbs\n+\n+**Rule:** Use nouns to represent resources.\n+\n+**Do:**\n+\n+```text\n+/my-folder\n+/@registry\n+/@types\n+```\n+\n+**Don\'t:**\n+\n+```text\n+/createFolder\n+/deleteDocument\n+/updateEvent\n+```\n+\n+**Reason:**\n+\n+RESTful URIs should refer to a resource that is a thing (noun) instead of referring to an action (verb).\n+Nouns have properties, whereas verbs do not.\n+The REST architectural principle uses HTTP verbs to interact with resources.\n+\n+There is an exception to that rule.\n+Verbs can be used for specific actions or calculations, for example:\n+\n+```text\n+/login\n+/logout\n+/move-to\n+/reset-password\n+```\n+\n+### Singular versus Plural\n+\n+**Rule:** Use plural resources.\n+\n+**Do:**\n+\n+```text\n+/users\n+/users/21\n+```\n+\n+**Don\'t:**\n+\n+```text\n+/user\n+/user/21\n+```\n+\n+**Reason:**\n+\n+If you use singular for a collection-like resource\xe2\x80\x94such as `/user` to retrieve a list of all users\xe2\x80\x94it feels wrong.\n+Mixing singular and plural is confusing.\n+For example, using `/users` for retrieving users, and `/user/21` to retrieve a single user.\n+\n+\n+### Uppercase versus Lowercase\n+\n+**Rule:** Use lowercase letters in URIs.\n+\n+**Do:**\n+\n+```text\n+https://example.com/my-folder/my-document\n+```\n+\n+**Don\'t:**\n+\n+```text\n+https://example.com/My-Folder/My-Document\n+```\n+\n+**Reason:** RFC 3986 defines URIs as case-sensitive except for the scheme and host components.\n+\n+Those two URIs are equivalent:\n+\n+```text\n+https://example.org/my-folder/my-document\n+HTTPS://EXAMPLE.ORG/my-folder/my-document\n+```\n+\n+While this one is not equivalent to the two URIs above:\n+\n+```text\n+https://example.org/My-Folder/my-document\n+```\n+\n+To avoid confusion we always use lowercase letters in URIs.\n+\n+\n+## Naming Convention for attribute names in URIs\n+\n+**Rule:** Use hyphens (spinal case) to improve readability of URIs.\n+\n+**Do:**\n+\n+```text\n+/users/noam/reset-password\n+```\n+\n+**Don\'t:**\n+\n+```text\n+/users/noam/resetPassword\n+/users/noam/ResetPassword\n+/users/noam/reset_password\n+```\n+\n+**Reason:**\n+\n+Spinal case is easier to read and safer to use than camelCase.\n+URLs are case sensitive (RFC3986).\n+Plone uses spinal case for URL creation.\n+The page title "My page" becomes "my-page".\n+Mixed naming conventions in URLs would be confusing.\n+For example, `/my-folder/@send_url_to_user`, is confusing.\n+[Google recommends spinal-case in URLs](https://developers.google.com/search/docs/advanced/guidelines/url-structure) for better search engine optimization.\n+\n+**Discussion:**\n+\n+<https://github.com/plone/plone.restapi/issues/194>\n+\n+\n+## Naming Convention for attribute names in response body\n+\n+**Rule:** Use snake_case to reflect Python best practices.\n+\n+**Do:**\n+\n+```text\n+{\n+  translation_of: ...\n+}\n+```\n+\n+**Don\'t:**\n+\n+```text\n+{\n+  translationOf: ...,\n+  TranslationOf: ...,\n+}\n+```\n+\n+**Reason:**\n+\n+We map over Python attributes one-to-one whether they are snake case (modern Python and Plone, and Dexterity) or lowerCamelCase (Zope 2, Archetypes).\n+\n+\n+## Versioning\n+\n+Versioning APIs makes a lot of sense for public API services.\n+This is especially true when an API provider needs to ship different versions of the API at the same time.\n+Plone already has a way to version packages.\n+It currently does not make sense for us to expose that information via the API.\n+We will always just ship one version of the API at a time.\n+We are usually in full control over the backend and the frontend.\ndiff --git a/docs/source/conventions.rst b/docs/source/conventions.rst\ndeleted file mode 100644\nindex 1fa1ceb8c..000000000\n--- a/docs/source/conventions.rst\n+++ /dev/null\n@@ -1,146 +0,0 @@\n-Conventions\n-===========\n-\n-Naming Convention for REST API Resources/Endpoints\n---------------------------------------------------\n-\n-Nouns vs Verbs\n-^^^^^^^^^^^^^^\n-\n-Rule: Use nouns to represent resources.\n-\n-Do::\n-\n-  /my-folder\n-  /@registry\n-  /@types\n-\n-Don\'t::\n-\n-  /createFolder\n-  /deleteDocument\n-  /updateEvent\n-\n-Reason:\n-\n-RESTful URI should refer to a resource that is a thing (noun) instead of\n-referring to an action (verb) because nouns have properties as verbs do\n-not. The REST architectural principle uses HTTP verbs to interact with\n-resources.\n-\n-Though, there is an exception to that rule, verbs can be used for\n-specific actions or calculations, .e.g.::\n-\n-  /login\n-  /logout\n-  /move-to\n-  /reset-password\n-\n-\n-Singuar vs Plural\n-^^^^^^^^^^^^^^^^^^\n-\n-Rule: Use plural resources.\n-\n-Do::\n-\n-  /users\n-  /users/21\n-\n-Don\'t::\n-\n-  /user\n-  /user/21\n-\n-Reason:\n-\n-If you use singular for a collection like resource (e.g. "/user" to\n-retrieve a list of all users) it feels wrong. Mixing singular and plural\n-is confusing (e.g. user "/users" for retrieving users and "/user/21" to\n-retrieve a single user).\n-\n-\n-Upper vs. Lowercase\n-^^^^^^^^^^^^^^^^^^^\n-\n-Rule: Use lowercase letters in URIs.\n-\n-Do::\n-\n-  http://example.com/my-folder/my-document\n-\n-Don\'t::\n-\n-  http://example.com/My-Folder/My-Document\n-\n-Reason: RFC 3986 defines URIs as case-sensitive except for the scheme\n-and host components. e.g.\n-\n-Those two URIs are equivalent::\n-\n-    http://example.org/my-folder/my-document\n-    HTTP://EXAMPLE.ORG/my-folder/my-document\n-\n-While this one is not equivalent to the two URIs above::\n-\n-    http://example.org/My-Folder/my-document\n-\n-To avoid confusion we always use lowercase letters in URIs.\n-\n-\n-Naming Convention for attribute names in URIs\n----------------------------------------------\n-\n-Rule: Use hyphens (spinal case) to improve readability of URIs.\n-\n-Do::\n-\n-    /users/noam/reset-password\n-\n-Don\'t::\n-\n-    /users/noam/resetPassword\n-    /users/noam/ResetPassword\n-    /users/noam/reset_password\n-\n-Reason:\n-\n-Spinal case is better to read and safer to use than camelCase (URLs are case sensitive (RFC3986)).\n-Plone uses spinal case for URL creation (title "My page" becomes "my-page") and mixed naming conventions in URLs would be confusing (e.g. "/my-folder/@send_url_to_user").\n-Google recommends spinal-case in URLs for better SEO (https://developers.google.com/search/docs/advanced/guidelines/url-structure).\n-\n-Discussion:\n-\n-https://github.com/plone/plone.restapi/issues/194\n-\n-\n-Naming Convention for attribute names in response body\n-------------------------------------------------------\n-\n-Rule: Use snake_case to reflect Python best practices.\n-\n-Do::\n-\n-    {\n-      translation_of: ...\n-    }\n-\n-Don\'t::\n-\n-    {\n-      translationOf: ...,\n-      TranslationOf: ...,\n-    }\n-\n-Reason:\n-\n-We map over Python attributes 1:1 no matter if they are snake case (modern Python/Plone, Dexterity) of lowerCamelCase (Zope 2, Archetypes).\n-\n-\n-Versioning\n-----------\n-\n-Versioning APIs does make a lot of sense for public API services.\n-Especially if an API provider needs to ship different versions of the API at the same time.\n-Though, Plone already has a way to version packages and it currently does not make sense for us to expose that information via the API.\n-We will always just ship one version of the API at a time and we are usually in full control over the backend and the frontend.\ndiff --git a/docs/source/copymove.md b/docs/source/copymove.md\nnew file mode 100644\nindex 000000000..75e172605\n--- /dev/null\n+++ b/docs/source/copymove.md\n@@ -0,0 +1,51 @@\n+# Copy and Move\n+\n+\n+## Copying an object\n+\n+To copy a content object, send a `POST` request to the `/@copy` endpoint at the destination\'s URL with the source object specified in the request body.\n+The source object can be specified either by URL, path, UID or `intid`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/copy.req\n+```\n+\n+If the copy operation succeeds, the server will respond with status {term}`200 OK`, and return the new and old URL of the copied object:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/copy.resp\n+:language: http\n+```\n+\n+\n+## Moving an object\n+\n+To move a content object, send a `POST` request to the `/@move` endpoint at the destination\'s URL with the source object specified in the request body.\n+The source object can be specified either by URL, path, UID or `intid`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/move.req\n+```\n+\n+If the move operation succeeds, the server will respond with status {term}`200 OK`, and return the new and old URL of the moved object:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/move.resp\n+:language: http\n+```\n+\n+\n+## Copying or moving multiple objects\n+\n+Multiple objects can be moved or copied by giving a list of sources:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/copy_multiple.req\n+```\n+\n+If the operation succeeds, the server will respond with status {term}`200 OK`, and return the new and old URLs for each copied or moved object:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/copy_multiple.resp\n+:language: http\n+```\ndiff --git a/docs/source/copymove.rst b/docs/source/copymove.rst\ndeleted file mode 100644\nindex 9fd128681..000000000\n--- a/docs/source/copymove.rst\n+++ /dev/null\n@@ -1,51 +0,0 @@\n-Copy / Move\n-===========\n-\n-Copying an object\n------------------\n-\n-To copy a content object send a POST request to the ``/@copy`` endpoint at the\n-destinations url with the source object specified in the request body. The source\n-object can be specified either by url, path, UID or intid.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/copy.req\n-\n-If the copy operation succeeds, the server will respond with status 200 (OK) and return\n-the new and old url of the copied object.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/copy.resp\n-   :language: http\n-\n-\n-Moving an object\n-----------------\n-\n-To move a content object send a POST request to the ``/@move`` endpoint at the\n-destinations url with the source object specified in the request body. The source\n-object can be specified either by url, path, UID or intid.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/move.req\n-\n-If the move operation succeeds, the server will respond with status 200 (OK) and return\n-the new and old url of the moved object.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/move.resp\n-   :language: http\n-\n-\n-Copying/moving multiple objects\n--------------------------------\n-\n-Multiple objects can be moved/copied by giving a list of sources.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/copy_multiple.req\n-\n-If the operation succeeds, the server will respond with status 200 (OK) and return\n-the new and old urls for each copied/moved object.\n-\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/copy_multiple.resp\n-   :language: http\ndiff --git a/docs/source/customization.md b/docs/source/customization.md\nnew file mode 100644\nindex 000000000..6d107a873\n--- /dev/null\n+++ b/docs/source/customization.md\n@@ -0,0 +1,55 @@\n+# Customizing the API\n+\n+\n+## Content serialization\n+\n+\n+### Dexterity fields\n+\n+The API automatically converts all field values to JSON compatible data, whenever possible.\n+However, you might use fields which store data that cannot be automatically converted, or you might want to customize the representation of certain fields.\n+\n+For extending or changing the serialization of certain dexterity fields, you need to register an `IFieldSerializer` adapter.\n+\n+Example:\n+\n+```python\n+from plone.customfield.interfaces import ICustomField\n+from plone.dexterity.interfaces import IDexterityContent\n+from plone.restapi.interfaces import IFieldSerializer\n+from plone.restapi.serializer.converters import json_compatible\n+from plone.restapi.serializer.dxfields import DefaultFieldSerializer\n+from zope.component import adapter\n+from zope.interface import Interface\n+from zope.interface import implementer\n+\n+\n+@adapter(ICustomField, IDexterityContent, Interface)\n+@implementer(IFieldSerializer)\n+class CustomFieldSerializer(DefaultFieldSerializer):\n+\n+    def __call__(self):\n+        value = self.get_value()\n+        if value is not None:\n+            # Do custom serializing here, e.g.:\n+            value = value.output()\n+\n+        return json_compatible(value)\n+```\n+\n+Register the adapter in ZCML:\n+\n+```xml\n+<configure xmlns="http://namespaces.zope.org/zope">\n+\n+    <adapter factory=".serializer.CustomFieldSerializer" />\n+\n+</configure>\n+```\n+\n+The `json_compatible` function recursively converts the value to JSON compatible data, when possible.\n+When a value cannot be converted, a `TypeError` is raised.\n+It is recommended to pass all values through `json_compatible` in order to validate and convert them.\n+\n+For customizing a specific field instance, a named `IFieldSerializer` adapter can be registered.\n+The name may either be the full dotted name of the field, such as `plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation.exclude_from_nav`, or the shortname of the field, such as `exclude_from_nav`.\ndiff --git a/docs/source/customization.rst b/docs/source/customization.rst\ndeleted file mode 100644\nindex a16827f79..000000000\n--- a/docs/source/customization.rst\n+++ /dev/null\n@@ -1,59 +0,0 @@\n-Customizing the API\n-===================\n-\n-Content serialization\n----------------------\n-\n-Dexterity fields\n-^^^^^^^^^^^^^^^^\n-\n-The API automatically converts all field values to JSON compatible data, whenever possible.\n-However, you might use fields which store data that cannot be automatically converted, or you might want to customize the representation of certain fields.\n-\n-For extending or changing the serializing of certain dexterity fields you need to register an ``IFieldSerializer``-adapter.\n-\n-Example:\n-\n-.. code-block:: python\n-\n-    from plone.customfield.interfaces import ICustomField\n-    from plone.dexterity.interfaces import IDexterityContent\n-    from plone.restapi.interfaces import IFieldSerializer\n-    from plone.restapi.serializer.converters import json_compatible\n-    from plone.restapi.serializer.dxfields import DefaultFieldSerializer\n-    from zope.component import adapter\n-    from zope.interface import Interface\n-    from zope.interface import implementer\n-\n-\n-    @adapter(ICustomField, IDexterityContent, Interface)\n-    @implementer(IFieldSerializer)\n-    class CustomFieldSerializer(DefaultFieldSerializer):\n-\n-        def __call__(self):\n-            value = self.get_value()\n-            if value is not None:\n-                # Do custom serializing here, e.g.:\n-                value = value.output()\n-\n-            return json_compatible(value)\n-\n-\n-Register the adapter in ZCML:\n-\n-.. code-block:: xml\n-\n-    <configure xmlns="http://namespaces.zope.org/zope">\n-\n-        <adapter factory=".serializer.CustomFieldSerializer" />\n-\n-    </configure>\n-\n-\n-The ``json_compatible`` function recursively converts the value to JSON compatible data, when possible.\n-When a value cannot be converted, a ``TypeError`` is raised.\n-It is recommended to pass all values through ``json_compatible`` in order to validate and convert them.\n-\n-For customizing a specific field instance, a named ``IFieldSerializer`` adapter can be registered.\n-The name may either be the full dottedname of the field\n-(``plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation.exclude_from_nav``) or the shortname of the field (``exclude_from_nav``).\n\\ No newline at end of file\ndiff --git a/docs/source/database.md b/docs/source/database.md\nnew file mode 100644\nindex 000000000..b63c81d3a\n--- /dev/null\n+++ b/docs/source/database.md\n@@ -0,0 +1,45 @@\n+(database)=\n+\n+# Database\n+\n+The `@database` endpoint exposes system information about the Plone database (ZODB).\n+\n+Send a `GET` request to the `@database` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/database_get.req\n+```\n+\n+The response will contain the database information:\n+\n+```http\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@database",\n+  "cache_detail_length": [\n+    {\n+      "connection": "<Connection at 11238e150>",\n+      "ngsize": 393,\n+      "size": 862\n+    },\n+    {\n+      "connection": "<Connection at 112530c50>",\n+      "ngsize": 46,\n+      "size": 261\n+    }\n+  ],\n+  "cache_length": 439,\n+  "cache_length_bytes": 0,\n+  "cache_size": 400,\n+  "database_size": 230,\n+  "db_name": "FunctionalTest",\n+  "db_size": 92516\n+}\n+```\n+\n+```{note}\n+The system endpoint is protected by the `plone.app.controlpanel.Overview` permission that requires the Site Administrator or Manager role.\n+```\ndiff --git a/docs/source/database.rst b/docs/source/database.rst\ndeleted file mode 100644\nindex b66a29250..000000000\n--- a/docs/source/database.rst\n+++ /dev/null\n@@ -1,40 +0,0 @@\n-.. _database:\n-\n-Database\n-========\n-\n-The `@database` endpoint exposes system information about the Plone database (ZODB).\n-\n-Send a GET request to the `@database` endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/database_get.req\n-\n-The response will contain the database information::\n-\n-  HTTP/1.1 200 OK\n-  Content-Type: application/json\n-\n-  {\n-    "@id": "http://localhost:55001/plone/@database",\n-    "cache_detail_length": [\n-      {\n-        "connection": "<Connection at 11238e150>",\n-        "ngsize": 393,\n-        "size": 862\n-      },\n-      {\n-        "connection": "<Connection at 112530c50>",\n-        "ngsize": 46,\n-        "size": 261\n-      }\n-    ],\n-    "cache_length": 439,\n-    "cache_length_bytes": 0,\n-    "cache_size": 400,\n-    "database_size": 230,\n-    "db_name": "FunctionalTest",\n-    "db_size": 92516\n-  }\n-\n-.. note:: The system endpoint is protected by the ``plone.app.controlpanel.Overview`` permission that requires the site-administrator or manager role.\n\\ No newline at end of file\ndiff --git a/docs/source/email-notification.md b/docs/source/email-notification.md\nnew file mode 100644\nindex 000000000..baee55c19\n--- /dev/null\n+++ b/docs/source/email-notification.md\n@@ -0,0 +1,58 @@\n+# Email Notification\n+\n+\n+## Contact Site Owner (Contact Form)\n+\n+Plone allows the user to contact the site owner via a form on the website.\n+This makes sure the site owner does not have to expose their email addresses publicly.\n+At the same time, it allows the users to reach out to the site owners.\n+\n+To send an email notification to the site owner, send a `POST` request to the `/@email-notification` endpoint that is available on the site root:\n+\n+```\n+POST http://localhost:8080/Plone/@email-notification\n+Accept: application/json\n+Content-Type: application/json\n+\n+{\n+  "name": "John Doe",\n+  "from": "john@doe.com",\n+  "subject": "Hello!",\n+  "message": "Just want to say hi."\n+}\n+```\n+\n+The `from` and `message` fields are required.\n+The `subject` and `name` fields are optional.\n+\n+The server will respond with status {term}`204 No Content` when the email has been sent successfully:\n+\n+```http\n+HTTP/1.1 204 No Content\n+```\n+\n+## Contact Portal Users\n+\n+```{note}\n+This endpoint is NOT implemented yet.\n+```\n+\n+To send an email notification to another user of the portal, send a `POST` request to the `/@email-notification` endpoint on a particular user, for example, the admin user:\n+\n+```\n+POST http://localhost:8080/Plone/@users/admin/@email-notification\n+Accept: application/json\n+Content-Type: application/json\n+\n+{\n+  "name": "John Doe",\n+  "from": "john@doe.com",\n+  "subject": "Hello!",\n+  "message": "Just want to say hi."\n+}\n+```\n+\n+```{note}\n+When using "email as login", we strongly recommend to also enable the "Use UUID user ids" setting in the security control panel to obfuscate the email in the user endpoint URL.\n+Otherwise the `@users` endpoint will expose the email addresses of all your users.\n+```\ndiff --git a/docs/source/email-notification.rst b/docs/source/email-notification.rst\ndeleted file mode 100644\nindex 07848bd3d..000000000\n--- a/docs/source/email-notification.rst\n+++ /dev/null\n@@ -1,48 +0,0 @@\n-Email Notification\n-==================\n-\n-Contact Site Owner aka Contact Form\n------------------------------------\n-\n-Plone allows the user to contact the site owner via a form on the website.\n-This makes sure the site owner does not have to expose their email addresses publicly and at the same time allow the users to reach out to the site owners.\n-\n-To send an email notification to the site owner, send a POST request to the ``/@email-notification`` endpoint that is available on the site root::\n-\n-    POST http://localhost:8080/Plone/@email-notification\n-    Accept: application/json\n-    Content-Type: application/json\n-\n-    {\n-      \'name\': \'John Doe\',\n-      \'from\': \'john@doe.com\',\n-      \'subject\': \'Hello!\',\n-      \'message\': \'Just want to say hi.\'\n-    }\n-\n-The \'from\' and \'message\' fields are required. The \'subject\' and \'name\' fields are optional.\n-\n-The server will respond with status :term:`204 No Content` when the email has been sent successfully::\n-\n-    HTTP/1.1 204 No Content\n-\n-\n-Contact Portal Users\n---------------------\n-\n-.. note:: This endpoint is NOT implemented yet.\n-\n-To send an email notification to another user of the portal, send a POST request to the ``/@email-notification`` endpoint on a particular user (e.g. the admin user)::\n-\n-    POST http://localhost:8080/Plone/@users/admin/@email-notification\n-    Accept: application/json\n-    Content-Type: application/json\n-\n-    {\n-      \'name\': \'John Doe\',\n-      \'from\': \'john@doe.com\',\n-      \'subject\': \'Hello!\',\n-      \'message\': \'Just want to say hi.\'\n-    }\n-\n-.. note:: When using "email as login", we strongly recommend to also enable the "Use UUID user ids" setting in the security control panel, to obfuscate the email in the user endpoint URL. Otherwise the \'@users\' endpoint will expose the email addresses of all your users.\ndiff --git a/docs/source/email-send.md b/docs/source/email-send.md\nnew file mode 100644\nindex 000000000..661a52926\n--- /dev/null\n+++ b/docs/source/email-send.md\n@@ -0,0 +1,31 @@\n+# Email Send\n+\n+\n+## Send Mail to Arbitrary Addresses\n+\n+To send an email to an arbitrary email address, send a `POST` request to the `/@email-send` endpoint that is available on the site root:\n+\n+```\n+POST http://localhost:8080/Plone/@email-send\n+Accept: application/json\n+Content-Type: application/json\n+\n+{\n+  "name": "John Doe",\n+  "from": "john@doe.com",\n+  "to": "jane@doe.com",\n+  "subject": "Hello!",\n+  "message": "Just want to say hi."\n+}\n+```\n+\n+This endpoint is controlled via the `Use mailhost services` permission, the default one in Zope.\n+\n+The `to`, `from`, and `message` fields are required.\n+The `subject` and `name` fields are optional.\n+\n+The server will respond with status {term}`204 No Content` when the email has been sent successfully:\n+\n+```http\n+HTTP/1.1 204 No Content\n+```\ndiff --git a/docs/source/email-send.rst b/docs/source/email-send.rst\ndeleted file mode 100644\nindex a439dd0ea..000000000\n--- a/docs/source/email-send.rst\n+++ /dev/null\n@@ -1,27 +0,0 @@\n-Email Send\n-==========\n-\n-Send Mail to Arbitrary Addresses\n----------------------------------\n-\n-To send an email to an arbitrary e-mail address, send a POST request to the ``/@email-send`` endpoint that is available on the site root::\n-\n-    POST http://localhost:8080/Plone/@email-send\n-    Accept: application/json\n-    Content-Type: application/json\n-\n-    {\n-      \'name\': \'John Doe\',\n-      \'from\': \'john@doe.com\',\n-      \'to\': \'jane@doe.com\',\n-      \'subject\': \'Hello!\',\n-      \'message\': \'Just want to say hi.\'\n-    }\n-\n-This endpoint is controlled via the `Use mailhost services` permission, the default one in Zope.\n-\n-The \'to\', \'from\' and \'message\' fields are required. The \'subject\' and \'name\' fields are optional.\n-\n-The server will respond with status :term:`204 No Content` when the email has been sent successfully::\n-\n-    HTTP/1.1 204 No Content\ndiff --git a/docs/source/expansion.md b/docs/source/expansion.md\nnew file mode 100644\nindex 000000000..74ebe274e\n--- /dev/null\n+++ b/docs/source/expansion.md\n@@ -0,0 +1,85 @@\n+(expansion-label)=\n+\n+# Expansion\n+\n+Expansion is a mechanism in `plone.restapi` to embed additional "components"\xe2\x80\x94such as navigation, breadcrumbs, schema, or workflows\xe2\x80\x94within the main content response.\n+This helps the API consumers avoid unnecessary requests.\n+\n+Say you want to show a document in Plone together with the breadcrumbs and a workflow switcher.\n+Instead of doing three individual requests, you can expand the breadcrumbs and the workflow "components" within the document `GET` request.\n+\n+The list of expandable components is listed in the `@components` attribute in the response of any content `GET` request:\n+\n+```http\n+GET /plone/front-page HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+\n+{\n+  "@id": "http://localhost:55001/plone/front-page",\n+  "@type": "Document",\n+  "@components": [\n+    {\n+      "@id": "http://localhost:55001/plone/front-page/@actions"\n+    },\n+    {\n+      "@id": "http://localhost:55001/plone/front-page/@breadcrumbs"\n+    },\n+    {\n+      "@id": "http://localhost:55001/plone/front-page/@navigation"\n+    },\n+    {\n+      "@id": "http://localhost:55001/plone/front-page/@types"\n+    },\n+    {\n+      "@id": "http://localhost:55001/plone/front-page/@workflow"\n+    },\n+    {\n+      "more components": "..."\n+    }\n+  ],\n+  "UID": "1f699ffa110e45afb1ba502f75f7ec33",\n+  "title": "Welcome to Plone",\n+  "more attributes": "..."\n+}\n+```\n+\n+Request (unexpanded):\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/expansion.req\n+```\n+\n+Response (unexpanded):\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/expansion.resp\n+:language: http\n+```\n+\n+In order to expand and embed one or more components, use the `GET` parameter `expand`, and provide either a single component or a comma-separated list of the components you want to embed.\n+Say you want to expand the `breadcrumbs` component:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/expansion_expanded.req\n+```\n+\n+Response (breadcrumbs expanded):\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/expansion_expanded.resp\n+:language: http\n+```\n+\n+Here is an example of a request that expands all possible expansions:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/expansion_expanded_full.req\n+```\n+\n+And the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n+:language: http\n+```\ndiff --git a/docs/source/expansion.rst b/docs/source/expansion.rst\ndeleted file mode 100644\nindex ac2958d79..000000000\n--- a/docs/source/expansion.rst\n+++ /dev/null\n@@ -1,69 +0,0 @@\n-.. _`expansion name`: \n-\n-Expansion\n-=========\n-\n-Expansion is a mechanism in plone.restapi to embed additional "components",\n-such as navigation, breadcrumbs, schema, or workflow within the main content\n-response. This helps the API consumers to avoid unneccesary request.\n-\n-Say you want to show a document in Plone together with the breadcrumbs and a\n-workflow switcher. Instead of doing three individual requests, you can just\n-expand the breadcrumbs and the workflow "components" within the document GET\n-request.\n-\n-The list of expandable components is listed in the "@components" attribute\n-in the reponse of any content GET request::\n-\n-  GET /plone/front-page HTTP/1.1\n-  Accept: application/json\n-  Authorization: Basic YWRtaW46c2VjcmV0\n-\n-  {\n-    "@id": "http://localhost:55001/plone/front-page",\n-    "@type": "Document",\n-    "@components": [\n-        {"@id": "http://localhost:55001/plone/front-page/@actions"},\n-        {"@id": "http://localhost:55001/plone/front-page/@breadcrumbs"},\n-        {"@id": "http://localhost:55001/plone/front-page/@navigation"},\n-        {"@id": "http://localhost:55001/plone/front-page/@types"},\n-        {"@id": "http://localhost:55001/plone/front-page/@workflow"},\n-        ...\n-    },\n-    "UID": "1f699ffa110e45afb1ba502f75f7ec33",\n-    "title": "Welcome to Plone",\n-    ...\n-  }\n-\n-Request (unexpanded):\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/expansion.req\n-\n-Response (unexpanded):\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/expansion.resp\n-   :language: http\n-\n-In order to expand and embed one or more components, use the ``expand`` GET\n-parameter and provide either a single component or a comma-separated list\n-of the components you want to embed. Say you want to expand the ``breadcrumbs``\n-component:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/expansion_expanded.req\n-\n-Response (breadcrumbs expanded):\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/expansion_expanded.resp\n-   :language: http\n-\n-Here is an exaxmple of a request that expands all possible expansions:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/expansion_expanded_full.req\n-\n-And the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n-   :language: http\ndiff --git a/docs/source/exploring.md b/docs/source/exploring.md\nnew file mode 100644\nindex 000000000..009555147\n--- /dev/null\n+++ b/docs/source/exploring.md\n@@ -0,0 +1,75 @@\n+(exploring-api-postman-onboarding)=\n+\n+# Explore the API using Postman\n+\n+To discover the API interactively, using [Postman] is recommended:\n+\n+```{admonition} Note\n+The Chrome-Extension version of Postman is deprecated and it is recommended to use the native app available instead.\n+```\n+\n+\n+## Configuration\n+\n+To easily follow links returned by request based on the API,\n+\n+- go to the menu under the {{ fawrench }} wrench icon on the top right\n+- choose {guilabel}`Settings`\n+- activate the option {guilabel}`Retain headers on clicking on links` by selecting {guilabel}`ON`:\n+\n+{{ postman_retain_headers }}\n+\n+This option makes sure, once a {term}`HTTP-Header` is configured, that it will be reused during subsequent {term}`requests`, provided these are initiated by clicking on links resulting from the initial {term}`request`.\n+This way navigating the structure using the API becomes a snap.\n+\n+The option {guilabel}`Send anonymous usage data to Postman` should be deactivated by setting to {guilabel}`OFF`.\n+\n+## Usage\n+\n+Choose the suitable {term}`HTTP Verb` to be used for your request. This can be selected using the [Postman] {menuselection}`HTTP Verb -> GET` drop-down menu.\n+\n+Enter the {term}`Object URL` of the object that should be the target of a request into the {guilabel}`URL` field right to the {term}`HTTP Verb`:\n+\n+{{ postman_request }}\n+\n+Now set the appropriate HTTP headers.\n+\n+- the {term}`Authorization Header` for the authentication related to the right user\n+- the {term}`Accept Header` to initiate the right behaviour by the API related to this {term}`Request`.\n+\n+______________________________________________________________________\n+\n+To set the {term}`Authorization Header`, there is a reserved tab that is responsible to generate the final {term}`Header` based on the {term}`authentication method` with username and password.\n+\n+You have to select:\n+\n+- in the drop-down menu {menuselection}`Basic Auth ->` the term {term}`Basic Auth` as the authentication method, and\n+- a valid existing user with appropriate permissions.\n+\n+After providing these parameters you can create the resulting {term}`Authorization Header` and insert it into the prepared request by clicking on {guilabel}`Preview Request`.\n+\n+{{ postman_basic_auth }}\n+\n+______________________________________________________________________\n+\n+Under the {guilabel}`Headers` tab, you now need to insert in the {term}`Accept Header`  `application/json` as well:\n+\n+{{ postman_headers }}\n+\n+The request is now ready, and can be sent by clicking on the {guilabel}`Send` button.\n+\n+The {term}`Response` of the server is now displayed below the {term}`Request`.\n+You can follow the links on the `@id` attributes by clicking on them.\n+For every link [Postman] has prepared, another request sharing the same headers can be sent again by clicking on the {guilabel}`Send` button.\n+\n+{{ postman_response }}\n+\n+```{admonition} Conclusion\n+You can now explore the whole stucture of your application easily via the API using `GET` requests.\n+```\n+\n+(rest-api-onboarding-glossary)=\n+\n+% links\n+\n+[postman]: https://www.postman.com/\ndiff --git a/docs/source/exploring.rst b/docs/source/exploring.rst\ndeleted file mode 100644\nindex 3f4f05ce1..000000000\n--- a/docs/source/exploring.rst\n+++ /dev/null\n@@ -1,88 +0,0 @@\n-.. _exploring-api-postman-onboarding:\n-\n-Explore the API using Postman\n-=============================\n-\n-To discover the API interactively, using Postman_ is recommended.\n-\n-.. admonition:: Note\n-\n-    The Chrome-Extension version of Postman is deprecated and it is recommended to use the native app available instead.\n-\n-Configuration\n--------------\n-\n-To easily follow links returned by request based on the API, \n-\n-* go to the menu under the |fawrench| wrench icon on the top right\n-* choose :guilabel:`Settings` \n-* activate the option :guilabel:`Retain headers on clicking on links` by selecting :guilabel:`ON`:\n-\n-|postman-retain-headers|\n-\n-\n-This option makes sure, once a :term:`HTTP-Header` is configured, it will be reused during following :term:`requests` , if these are initiated by clicking on links resulting from the initial :term:`request`. This way navigating the structure using the API becomes a snap.\n-\n-The option :guilabel:`Send anonymous usage data to Postman` should be deactivated by setting to :guilabel:`OFF`.\n-\n-Usage\n------\n-\n-Choose the suitable :term:`HTTP Verb` to be used for your request. This can be selected using the Postman_ :menuselection:`HTTP Verb -> GET` drop-down menu. \n-\n-Enter the :term:`Object URL` of the object that should be the target of a request into the :guilabel:`URL` field right to the :term:`HTTP Verb`:\n-\n-|postman-request|\n-\n-\n-Now set the appropriate HTTP headers. \n-\n-* The :term:`Authorization Header` for the authentication related to the right user\n-* The :term:`Accept Header` to initiate the right behaviour by the API related to this :term:`Request`.\n-\n-----------\n-\n-To set the :term:`Authorization Header`, there is a reserved tab, that is responsible to generate the final :term:`Header` based on the :term:`authentication method` and username + password.\n-\n-You have to select\n-\n-* in the drop-down menu :menuselection:`Basic Auth ->` the term :term:`Basic Auth` as the authentication method\n-* A valid existing user with appropriate permissions \n-\n-After providing these parameters you can create the resulting :term:`Authorization Header` and insert it into the prepared request by clicking on :guilabel:`Preview Request`.\n-\n-|postman-basic-auth|\n-\n-----------\n-\n-Under the  :guilabel:`Headers` tab you now need to insert in the :term:`Accept Header`  application/json` header as well:\n-\n-|postman-headers|\n-\n-\n-The request is now ready and can be send by clicking on :guilabel:`Send` button.\n-\n-The :term:`Response` of the server is now displayed below the :term:`Request`. You can easily follow the links on the ``@id`` attributes by clicking on them. For every link Postman_ has prepared another request sharing the same headers that can be send again by licking on the  :guilabel:`Send` button.\n-\n-|postman-response|\n-\n-\n-.. admonition:: Conclusion\n-\n-    You can now explore the whole stucture of your application easily via the API using `GET` requests.\n-\n-.. _rest-api-onboarding-glossary:\n-\n-.. links\n-\n-.. _Postman: https://www.postman.com/\n-\n-.. |fawrench| raw:: html\n-\n-    <span class="fa fa-wrench" style="font-size: 1.6em;"></span>\n-\n-.. |postman-retain-headers| image:: ./_static/img/postman_retain_headers.png\n-.. |postman-request| image:: ./_static/img/postman_request.png\n-.. |postman-basic-auth| image:: ./_static/img/postman_basic_auth.png\n-.. |postman-headers| image:: ./_static/img/postman_headers.png\n-.. |postman-response| image:: ./_static/img/postman_response.png\ndiff --git a/docs/source/glossary.md b/docs/source/glossary.md\nnew file mode 100644\nindex 000000000..f99d17af8\n--- /dev/null\n+++ b/docs/source/glossary.md\n@@ -0,0 +1,47 @@\n+# Glossary\n+\n+```{glossary}\n+:sorted: true\n+\n+REST\n+    REST stands for [Representational State Transfer](https://en.wikipedia.org/wiki/Representational_state_transfer). It is a software architectural principle to create loosely coupled web APIs.\n+\n+workflow\n+    A concept in Plone (and other CMS\'s) whereby a content object can be in a number of states (private, public, etcetera) and uses transitions to change between them (e.g. "publish", "approve", "reject", "retract"). See the [Plone docs on Workflow](https://docs.plone.org/working-with-content/collaboration-and-workflow/)\n+\n+HTTP-Request\n+HTTP Request\n+Request\n+Requests\n+    The initial action performed by a web client to communicate with a server. The {term}`Request` is usually followed by a {term}`Response` by the server, either synchronous or asynchronous (which is more complex to handle on the user side)\n+\n+HTTP-Response\n+HTTP Response\n+Response\n+    Answer of or action by the server that is executed or send to the client after the {term}`Request` is processed.\n+\n+HTTP-Header\n+HTTP Header\n+Header\n+    The part of the communication of the client with the server that provides the initialisation of the communication of a {term}`Request`.\n+\n+HTTP-Verb\n+HTTP Verb\n+Verb\n+    One of the basic actions that can be requested to be executed by the server (on an object) based on the {term}`Request`.\n+\n+Object URL\n+    The target object of the {term}`Request`\n+\n+Authorization Header\n+    Part of the {term}`Request` that is responsible for the authentication related to the right user or service to ask for a {term}`Response`.\n+\n+Accept Header\n+    Part of the {term}`Request` that is responsible to define the expected type of data to be accepted by the client in the {term}`Response`.\n+\n+Authentication Method\n+    Access restriction provided by the connection chain to the server exposed to the client.\n+\n+Basic Auth\n+    A simple {term}`Authentication Method` referenced in the {term}`Authorization Header` that needs to be provided by the server.\n+```\ndiff --git a/docs/source/glossary.rst b/docs/source/glossary.rst\ndeleted file mode 100644\nindex 63632da8a..000000000\n--- a/docs/source/glossary.rst\n+++ /dev/null\n@@ -1,48 +0,0 @@\n-Glossary\n-========\n-\n-\n-.. glossary::\n-    :sorted:\n-\n-    REST\n-        REST stands for `Representational State Transfer <https://en.wikipedia.org/wiki/Representational_state_transfer>`_. It is a software architectural principle to create loosely coupled web APIs.\n-\n-    workflow\n-        A concept in Plone (and other CMS\'s) whereby a content object can be in a number of states (private, public, etcetera) and uses transitions to change between them (e.g. "publish", "approve", "reject", "retract"). See the `Plone docs on Workflow <https://docs.plone.org/working-with-content/collaboration-and-workflow/>`_\n-\n-    HTTP-Request\n-    HTTP Request\n-    Request\n-    Requests\n-        The initial action performed by a web client to communicate with a server. The :term:`Request` is usually followed by a :term:`Response` by the server, either synchronous or asynchronous (which is more complex to handle on the user side)\n-\n-    HTTP-Response\n-    HTTP Response\n-    Response\n-        Answer of or action by the server that is executed or send to the client after the :term:`Request` is processed. \n-\n-    HTTP-Header\n-    HTTP Header\n-    Header\n-        The part of the communication of the client with the server that provides the initialisation of the communication of a :Term:`Request`.\n-\n-    HTTP-Verb\n-    HTTP Verb\n-    Verb\n-        One of the basic actions that can be requested to be executed by the server (on an object) based on the :term:`Request`.\n-\n-    Object URL\n-        The target object of the :term:`Request`\n-\n-    Authorization Header\n-        Part of the :term:`Request` that is responsible for the authentication related to the right user or service to ask for a :term:`Response`.\n-\n-    Accept Header\n-        Part of the :term:`Request` that is responsible to define the expected type of data to be accepted by the client in the :term:`Response`.\n-\n-    Authentication Method\n-        Access restriction provided by the connection chain to the server exposed to the client.\n-\n-    Basic Auth\n-        A simple :term:`Authentication Method` referenced in the :term:`Authorization Header` that needs to be provided by the server.\ndiff --git a/docs/source/groups.md b/docs/source/groups.md\nnew file mode 100644\nindex 000000000..d476551c5\n--- /dev/null\n+++ b/docs/source/groups.md\n@@ -0,0 +1,110 @@\n+# Groups\n+\n+Available groups in a Plone site can be created, queried, updated, and deleted by interacting with the `/@groups` endpoint on the portal root.\n+This requires an authenticated user.\n+\n+\n+## List Groups\n+\n+To retrieve a list of all current groups in the portal, call the `/@groups` endpoint with a `GET` request:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/groups.req\n+```\n+\n+The server will respond with a list of all groups in the portal:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/groups.resp\n+:language: http\n+```\n+\n+The endpoint supports some basic filtering:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.req\n+```\n+\n+The server will respond with a list of the filtered groups in the portal where `groupname` starts with the value of the `query` parameter.\n+\n+The endpoint also takes a `limit` parameter.\n+Its default is a maximum of 25 groups at a time for performance reasons:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp\n+:language: http\n+```\n+\n+\n+## Create Group\n+\n+To create a new group, send a `POST` request to the global `/@groups` endpoint with a JSON representation of the group you want to create in the body:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/groups_created.req\n+```\n+\n+```{note}\n+By default, `groupname` is a required field.\n+```\n+\n+If the group has been created successfully, the server will respond with a status {term}`201 Created`. The `Location` header contains the URL of the newly created group, and the resource representation is in the payload:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/groups_created.resp\n+:language: http\n+```\n+\n+\n+## Read Group\n+\n+To retrieve all details for a particular group, send a `GET` request to the `/@groups` endpoint and append the group ID to the URL:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/groups_get.req\n+```\n+\n+The server will respond with a {term}`200 OK` status code and the JSON representation of the group in the body:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/groups_get.resp\n+:language: http\n+```\n+\n+Batching is supported for the `users` object.\n+\n+\n+## Update Group\n+\n+To update the settings of a group, send a `PATCH` request with the group details you want to amend to the URL of that particular group:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/groups_update.req\n+```\n+\n+```{note}\n+The `users` object is a mapping of a `user_id` and a boolean indicating adding or removing from the group.\n+```\n+\n+A successful response to a `PATCH` request will be indicated by a {term}`204 No Content` response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/groups_update.resp\n+:language: http\n+```\n+\n+\n+## Delete Group\n+\n+To delete a group, send a `DELETE` request to the `/@groups` endpoint and append the group id of the group you want to delete:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/groups_delete.req\n+```\n+\n+A successful response will be indicated by a {term}`204 No Content` response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/groups_delete.resp\n+:language: js\n+```\ndiff --git a/docs/source/groups.rst b/docs/source/groups.rst\ndeleted file mode 100644\nindex cf77173c8..000000000\n--- a/docs/source/groups.rst\n+++ /dev/null\n@@ -1,92 +0,0 @@\n-Groups\n-======\n-\n-Available groups in a Plone site can be created, queried, updated and deleted by interacting with the ``/@groups`` endpoint on portal root (requires an authenticated user):\n-\n-List Groups\n------------\n-\n-To retrieve a list of all current groups in the portal, call the ``/@groups`` endpoint with a ``GET`` request:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/groups.req\n-\n-The server will respond with a list of all groups in the portal:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/groups.resp\n-   :language: http\n-\n-The endpoint supports some basic filtering:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.req\n-\n-The server will respond with a list the filtered groups in the portal with groupname starts with the query.\n-\n-The endpoint also takes a ``limit`` parameter that defaults to a maximum of 25 groups at a time for performance reasons.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/groups_filtered_by_groupname.resp\n-   :language: http\n-\n-\n-Create Group\n-------------\n-\n-To create a new group, send a ``POST`` request to the global ``/@groups`` endpoint with a JSON representation of the group you want to create in the body:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/groups_created.req\n-\n-.. note::\n-    By default, "groupname" is a required field.\n-\n-If the group has been created successfully, the server will respond with a status ``201 (Created)``. The ``Location`` header contains the URL of the newly created group and the resource representation in the payload:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/groups_created.resp\n-   :language: http\n-\n-\n-Read Group\n-----------\n-\n-To retrieve all details for a particular group, send a ``GET`` request to the ``/@groups`` endpoint and append the group id to the URL:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/groups_get.req\n-\n-The server will respond with a ``200 OK`` status code and the JSON representation of the group in the body:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/groups_get.resp\n-   :language: http\n-\n-Batching is supported for the \'users\' object.\n-\n-Update Group\n-------------\n-\n-To update the settings of a group, send a ``PATCH`` request with the group details you want to amend to the URL of that particular group:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/groups_update.req\n-\n-.. note::\n-        The \'users\' object is a mapping of a user_id and a boolean indicating adding or removing from the group.\n-\n-A successful response to a PATCH request will be indicated by a :term:`204 No Content` response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/groups_update.resp\n-   :language: http\n-\n-\n-Delete Group\n-------------\n-\n-To delete a group send a ``DELETE`` request to the ``/@groups`` endpoint and append the group id of the group you want to delete:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/groups_delete.req\n-\n-A successful response will be indicated by a :term:`204 No Content` response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/groups_delete.resp\n-   :language: js\ndiff --git a/docs/source/history.md b/docs/source/history.md\nnew file mode 100644\nindex 000000000..721dd9fdd\n--- /dev/null\n+++ b/docs/source/history.md\n@@ -0,0 +1,55 @@\n+# History\n+\n+The `@history` endpoint exposes history and versioning information on previous versions of the content.\n+Each change or workflow change on a content object or file is listed.\n+It also allows to revert to a previous version of the file.\n+\n+\n+## Listing the History of a Content Object\n+\n+Listing versions and history of a resource:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/history_get.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/history_get.resp\n+:language: http\n+```\n+\n+The following fields are returned:\n+\n+- `action`: the workflow transition id, `Edited` for versioning, or `Create` for initial state.\n+- `actor`: the user who performed the action. This contains a subobject with the details.\n+- `comments`: a changenote\n+- `@id`: link to the content endpoint of this specific version.\n+- `may_revert`: true if the user has permission to revert.\n+- `time`: when this action occured in ISO format.\n+- `transition_title`: the workflow transition\'s title, `Edited` for versioning, or `Create` for initial state.\n+- `type`: `workflow` for workflow changes, `versioning` for editing, or `null` for content creation.\n+- `version`: identifier for this specific version of the resource.\n+\n+\n+## Get a Historical Version\n+\n+Older versions of a resource can be retrieved by appending `version` to the `@history` endpoint URL:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/history_get_versioned.req\n+```\n+\n+\n+## Revert to a Historical Version\n+\n+Reverting to an older versions of a resource can be done by sending a `PATCH` request to the `@history` endpoint and appending the version you want to revert to:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/history_revert.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/history_revert.resp\n+:language: http\n+```\ndiff --git a/docs/source/history.rst b/docs/source/history.rst\ndeleted file mode 100644\nindex 97e510471..000000000\n--- a/docs/source/history.rst\n+++ /dev/null\n@@ -1,51 +0,0 @@\n-History\n-=======\n-\n-The @history endpoint exposes history and versioning information on previous\n-versions of the content. Each change or workflow change on a content object or file is listed. It also allows to revert to a previous version of the file.\n-\n-\n-Listing the History of a Content Object\n----------------------------------------\n-\n-Listing versions and history of a resource:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/history_get.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/history_get.resp\n-   :language: http\n-\n-This following fields are returned:\n-\n-- action: the workflow transition id, \'Edited\' for versioning, or \'Create\' for initial state.\n-- actor: the user who performed the action. This contains a subobject with the details.\n-- comments: a changenote\n-- @id: link to the content endpoint of this specific version.\n-- may_revert: true if the user has permission to revert.\n-- time: when this action occured in ISO format.\n-- transition_title: the workflow transition\'s title, \'Edited\' for versioning, or \'Create\' for initial state.\n-- type: \'workflow\' for workflow changes, \'versioning\' for editing, or null for content creation.\n-- version: identifier for this specific version of the resource.\n-\n-\n-Get a Historical Version\n-------------------------\n-\n-Older versions of a resource can be retrieved by appending `version` to the @history endpoint url.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/history_get_versioned.req\n-\n-\n-Revert to a Historical Version\n-------------------------------\n-\n-Reverting to an older versions of a resource can be done by sending a PATCH request to the @history endpoint and appending the version you want to revert\n-to.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/history_revert.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/history_revert.resp\n-   :language: http\ndiff --git a/docs/source/http-status-codes.md b/docs/source/http-status-codes.md\nnew file mode 100644\nindex 000000000..785282506\n--- /dev/null\n+++ b/docs/source/http-status-codes.md\n@@ -0,0 +1,52 @@\n+# HTTP Status Codes\n+\n+This is the list of HTTP status codes that are used in `plone.restapi`.\n+Here is a [full list of all HTTP status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes).\n+\n+```{glossary}\n+:sorted: true\n+\n+2xx Success\n+    This class of status codes indicates the action requested by the client was received, understood, accepted, and processed successfully.\n+\n+200 OK\n+    Standard response for successful HTTP requests.\n+    The actual response will depend on the request method used.\n+    In a `GET` request, the response will contain an entity corresponding to the requested resource.\n+    In a `POST` request, the response will contain an entity describing or containing the result of the action.\n+\n+201 Created\n+    The request has been fulfilled and resulted in a new resource being created.\n+\n+204 No Content\n+    The server successfully processed the request, but is not returning any content.\n+    Usually used as a response to a successful `DELETE` request.\n+\n+4xx Client Error\n+    The `4xx` class of status codes is intended for cases in which the client seems to have errored.\n+\n+400 Bad Request\n+    The server cannot or will not process the request due to something that is perceived to be a client error, such as malformed request syntax, invalid request message framing, or deceptive request routing.\n+\n+401 Unauthorized\n+    Similar to {term}`403 Forbidden`, but specifically for use when authentication is required and has failed or has not yet been provided.\n+    The response must include a `WWW-Authenticate` header field containing a challenge applicable to the requested resource.\n+\n+403 Forbidden\n+    The request was a valid request, but the server is refusing to respond to it.\n+    Unlike a {term}`401 Unauthorized` response, authenticating will make no difference.\n+\n+404 Not Found\n+    The requested resource could not be found but may be available again in the future.\n+    Subsequent requests by the client are permissible.\n+\n+405 Method Not Allowed\n+    A request method is not supported for the requested resource; for example, a `GET` request on a form which requires data to be presented via `POST`, or a `PUT` request on a read-only resource.\n+\n+409 Conflict\n+    Indicates that the request could not be processed because of conflict in the request, such as an edit conflict in the case of multiple updates.\n+\n+5xx Server Error\n+500 Internal Server Error\n+    The server failed to fulfill an apparently valid request.\n+```\ndiff --git a/docs/source/http-status-codes.rst b/docs/source/http-status-codes.rst\ndeleted file mode 100644\nindex 89d5570f0..000000000\n--- a/docs/source/http-status-codes.rst\n+++ /dev/null\n@@ -1,54 +0,0 @@\n-HTTP Status Codes\n-=================\n-\n-This is the list of status codes that are used in plone.restapi. Here is a `full list of all HTTP status codes <https://en.wikipedia.org/wiki/List_of_HTTP_status_codes>`_.\n-\n-\n-.. glossary::\n-    :sorted:\n-\n-    2xx Success\n-        This class of status codes indicates the action requested by the client was received, understood, accepted and processed successfully.\n-\n-    200 OK\n-        Standard response for successful HTTP requests.\n-        The actual response will depend on the request method used.\n-        In a GET request, the response will contain an entity corresponding to the requested resource.\n-        In a POST request, the response will contain an entity describing or containing the result of the action.\n-\n-    201 Created\n-        The request has been fulfilled and resulted in a new resource being created.\n-\n-    204 No Content\n-        The server successfully processed the request, but is not returning any content.\n-        Usually used as a response to a successful delete request.\n-\n-    4xx Client Error\n-        The 4xx class of status code is intended for cases in which the client seems to have errored.\n-\n-    400 Bad Request\n-        The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing)\n-\n-    401 Unauthorized\n-        Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided.\n-        The response must include a WWW-Authenticate header field containing a challenge applicable to the requested resource.\n-\n-    403 Forbidden\n-        The request was a valid request, but the server is refusing to respond to it.\n-        Unlike a 401 Unauthorized response, authenticating will make no difference.\n-\n-    404 Not Found\n-        The requested resource could not be found but may be available again in the future.\n-        Subsequent requests by the client are permissible.\n-\n-    405 Method Not Allowed\n-        A request method is not supported for the requested resource; for example, a GET request on a form which requires data to be presented via POST, or a PUT request on a read-only resource.\n-\n-    409 Conflict\n-        Indicates that the request could not be processed because of conflict in the request, such as an edit conflict in the case of multiple updates.\n-\n-    5xx Server Error\n-        The server failed to fulfill an apparently valid request.\n-\n-    500 Internal Server Error\n-        The server failed to fulfill an apparently valid request.\n\\ No newline at end of file\ndiff --git a/docs/source/i18n.md b/docs/source/i18n.md\nnew file mode 100644\nindex 000000000..6f9e6cbdd\n--- /dev/null\n+++ b/docs/source/i18n.md\n@@ -0,0 +1,77 @@\n+# i18n: internationalization of screen messages\n+\n+Plone already provides user-interface translations using the [`plone.app.locales`](https://pypi.org/project/plone.app.locales/) packages.\n+\n+In `plone.restapi`, we also use those translations where the end user needs to have those translated strings.\n+This way the front-end work is easier.\n+You directly get from the server everything you need, instead of needing to query yet another endpoint to get the translations.\n+\n+To do so, `plone.restapi` relies on Plone\'s language negotiation configuration, and lets Plone do the work of deciding in which language the messages should be shown.\n+\n+For the content of a multilingual site built using [`plone.app.multilingual`](https://pypi.org/project/plone.app.multilingual/), this is an easy task.\n+Plone is configured to display texts in the language of the content object.\n+There is no need to ask anything of the REST API.\n+\n+Nevertheless, when you want to query the Plone Site object of a multilingual site, or any other endpoint in a plain Plone site with multiple languages configured, you need to query the REST API for the language in which you want to have the messages.\n+Otherwise you will get the messages on the default language configured in Plone.\n+\n+To achieve that, the REST API requires the use of the `Accept-Language` HTTP header being passed with the required language code.\n+\n+You will also need to configure Plone to use browser request language negotiation.\n+To do so, you need to go the {guilabel}`Plone Control Panel`.\n+Go to the {guilabel}`Language Control Panel`.\n+Open the {guilabel}`Negotiation` configuration tab, and select the option {guilabel}`Use browser language request negotiation`.\n+\n+Using this option, we can get the translated content type titles:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_types.req\n+```\n+\n+\xe2\x80\xa6and the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/translated_messages_types.resp\n+:language: http\n+```\n+\n+All the field titles and descriptions will also be translated.\n+For instance for the `Folder` content type:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_types_folder.req\n+```\n+\n+\xe2\x80\xa6and the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n+:language: http\n+```\n+\n+In a given object, the workflow state and actions will be translated, too:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_object_workflow.req\n+```\n+\n+\xe2\x80\xa6and the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp\n+:language: http\n+```\n+\n+The same happens in the `@history` endpoint.\n+All the relevant messages will be shown translated:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_object_history.req\n+```\n+\n+\xe2\x80\xa6and the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/translated_messages_object_history.resp\n+:language: http\n+```\ndiff --git a/docs/source/i18n.rst b/docs/source/i18n.rst\ndeleted file mode 100644\nindex ae1fb13c6..000000000\n--- a/docs/source/i18n.rst\n+++ /dev/null\n@@ -1,80 +0,0 @@\n-i18n: internationalization of screen messages\n-=============================================\n-\n-Plone already provides user-interface translations using the `plone.app.locales`_\n-packages.\n-\n-In plone.restapi we also use those translations where the end user needs to have\n-those translated strings, this way the front-end work is easier, because you\n-directly get from the server everything you need, instead of needing to query\n-yet another endpoint to get the translations.\n-\n-To do so, plone.restapi relies on Plone\'s language-negotiation configuration and lets\n-Plone to do the work of deciding the language in which the messages should be shown.\n-\n-For the content of a multilingual site built using `plone.app.multilingual`_ this is\n-an easy task: Plone is configured to show in the language of the content-object, so\n-there is no need to ask anything to the REST API.\n-\n-Nevertheless, when you want to query the Plone Site object of a multilingual site, or\n-any other endpoint in a plain Plone site with multiple languages configured, you need\n-to query the REST API which language do you want to have the messages on, otherwise\n-you will get the messages on the default language configured in Plone.\n-\n-To achieve that, the REST API requires to use the ``Accept-Language`` HTTP header passing\n-as the value the code of the required language.\n-\n-You will also need to configure Plone to use the browser request language negotiation.\n-To do so, you need to go the Plone Control Panel, go to the Language Control Panel,\n-open the Negotiation configuration tab and select "Use browser language request\n-negotiation" option.\n-\n-Using this option we can get the content-type titles translated:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_types.req\n-\n-And the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translated_messages_types.resp\n-   :language: http\n-\n-\n-All the field titles and descriptions, will also be translated. For instance for the Folder\n-content type:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_types_folder.req\n-\n-And the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n-   :language: http\n-\n-\n-In a given object, the workflow state and actions will be translated too:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_object_workflow.req\n-\n-And the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translated_messages_object_workflow.resp\n-   :language: http\n-\n-\n-The same happens in the `@history` endpoint, all the relevant messages, will\n-be shown translated:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/translated_messages_object_history.req\n-\n-And the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translated_messages_object_history.resp\n-   :language: http\n-\n-\n-\n-.. _`plone.app.locales`: https://pypi.org/project/plone.app.locales\n-.. _`plone.app.multilingual`: https://pypi.org/project/plone.app.multilingual\ndiff --git a/docs/source/index.md b/docs/source/index.md\nnew file mode 100644\nindex 000000000..5eedd5a33\n--- /dev/null\n+++ b/docs/source/index.md\n@@ -0,0 +1,75 @@\n+% plone.restapi documentation master file, created by\n+% sphinx-quickstart on Mon Apr 28 13:04:12 2014.\n+% You can adapt this file completely to your liking, but it should at least\n+% contain the root `toctree` directive.\n+\n+# REST API\n+\n+A RESTful API for Plone.\n+\n+```{toctree}\n+:caption: Table of Contents\n+:maxdepth: 2\n+\n+introduction\n+authentication\n+exploring\n+content\n+blocks\n+history\n+batching\n+addons\n+comments\n+copymove\n+expansion\n+actions\n+workflow\n+workingcopy\n+locking\n+sharing\n+registry\n+types\n+types-schema\n+users\n+groups\n+principals\n+roles\n+breadcrumbs\n+navigation\n+contextnavigation\n+serialization\n+searching\n+tusupload\n+vocabularies\n+controlpanels\n+tiles\n+querystring\n+querystringsearch\n+customization\n+conventions\n+translations\n+email-send\n+i18n\n+email-notification\n+system\n+database\n+upgrade-guide\n+contributing\n+```\n+\n+```{eval-rst}\n+.. include:: ../../README.rst\n+```\n+\n+\n+## Appendix and Glossary\n+\n+```{toctree}\n+http-status-codes\n+glossary\n+```\n+\n+\n+## Index\n+\n+- {ref}`genindex`\ndiff --git a/docs/source/index.rst b/docs/source/index.rst\ndeleted file mode 100644\nindex b686f3b60..000000000\n--- a/docs/source/index.rst\n+++ /dev/null\n@@ -1,79 +0,0 @@\n-.. plone.restapi documentation master file, created by\n-   sphinx-quickstart on Mon Apr 28 13:04:12 2014.\n-   You can adapt this file completely to your liking, but it should at least\n-   contain the root `toctree` directive.\n-\n-========\n-REST API\n-========\n-\n-A RESTful API for Plone.\n-\n-.. toctree::\n-   :caption: Table of Contents\n-   :hidden:\n-   :maxdepth: 1\n-\n-   introduction\n-\n-.. toctree::\n-   :hidden:\n-   :maxdepth: 2\n-\n-   authentication\n-   exploring\n-   content\n-   blocks\n-   history\n-   batching\n-   addons\n-   comments\n-   copymove\n-   expansion\n-   actions\n-   workflow\n-   workingcopy\n-   locking\n-   sharing\n-   registry\n-   types\n-   types-schema\n-   users\n-   groups\n-   principals\n-   roles\n-   breadcrumbs\n-   navigation\n-   contextnavigation\n-   serialization\n-   searching\n-   tusupload\n-   vocabularies\n-   controlpanels\n-   tiles\n-   querystring\n-   querystringsearch\n-   customization\n-   conventions\n-   translations\n-   email-send\n-   i18n\n-   email-notification\n-   upgrade-guide\n-   contributing\n-   system\n-   database\n-\n-.. include:: ../../README.rst\n-\n-\n-Appendix, Indices and tables\n-----------------------------\n-\n-.. toctree::\n-\n-   http-status-codes\n-   glossary\n-\n-* :ref:`genindex`\n-\ndiff --git a/docs/source/introduction.md b/docs/source/introduction.md\nnew file mode 100644\nindex 000000000..ddc592217\n--- /dev/null\n+++ b/docs/source/introduction.md\n@@ -0,0 +1,65 @@\n+# Introduction\n+\n+```{sidebar} API Browser Quick Guide\n+**It can make your life easier** if you use some kind of **API browser application** to **explore the API** when diving into this documentation.\n+\n+- We recommend to use the free [Postman](https://www.postman.com/) browser plugin.\n+- For easy onboarding take a look at **our {ref}`exploring-api-postman-onboarding` Quick Guide**.\n+```\n+\n+A hypermedia API provides an entry point to the API, which contains hyperlinks the clients can follow.\n+Just like a human user of a regular website, who knows the initial URL of a website and then follows hyperlinks to navigate through the site.\n+This has the advantage that the client only needs to understand how to detect and follow links.\n+The URLs (apart from the initial entry point) and other details of the API can change without breaking the client.\n+\n+The entry point to the Plone RESTful API is the portal root.\n+The client can ask for a {term}`REST` API response by setting the `"Accept"` HTTP header to `"application/json"`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/siteroot.req\n+```\n+\n+This uses so-called "content negotiation":\n+\n+```{toctree}\n+:maxdepth: 1\n+\n+More on Content Negotiation <content-negotiation>\n+```\n+\n+The server will then respond with the portal root in the JSON format:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/siteroot.resp\n+:language: http\n+```\n+\n+`@id` is a unique identifier for resources (IRIs).\n+The `@id` property can be used to navigate through the web API by following the links.\n+\n+`@type` sets the data type of a node or typed value\n+\n+`items` is a list that contains all objects within that resource.\n+\n+A client application can "follow" the links (by calling the @id property) to other resources.\n+This allows to build a losely coupled client that does not break if some of the URLs change, only the entry point of the entire API (in our case the portal root) needs to be known in advance.\n+\n+Another example, this time showing a request and response for a document.\n+Click on the buttons below to show the different syntaxes for the request:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/document.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/document.resp\n+:language: http\n+```\n+\n+And so on, see:\n+\n+```{toctree}\n+:maxdepth: 1\n+\n+Representation of all standard Plone content types <plone-content>\n+```\ndiff --git a/docs/source/introduction.rst b/docs/source/introduction.rst\ndeleted file mode 100644\nindex a7a36bf0b..000000000\n--- a/docs/source/introduction.rst\n+++ /dev/null\n@@ -1,58 +0,0 @@\n-Introduction\n-============\n-\n-.. sidebar:: API Browser Quick Guide\n-    :subtitle: **It can make your life easier** if you use some kind of **API browser application** to **explore the API** when diving into this documentation.\n-\n-    * We recommend to use the free `Postman <https://www.postman.com/>`_ browser plugin.\n-    * For easy onboarding take a look at **our** :ref:`exploring-api-postman-onboarding` **Quick-Guide**.\n-\n-A hypermedia API provides an entry point to the API, which contains hyperlinks the clients can follow.\n-Just like a human user of a regular website, who knows the initial URL of a website and then follows hyperlinks to navigate through the site.\n-This has the advantage that the client only needs to understand how to detect and follow links.\n-The URLs (apart from the inital entry point) and other details of the API can change without breaking the client.\n-\n-The entry point to the Plone RESTful API is the portal root.\n-The client can ask for a :term:`REST` API response by setting the ``\'Accept\'`` HTTP header to ``\'application/json\'``:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/siteroot.req\n-\n-\n-This uses so-called \'content negotiation\'\n-\n-  .. toctree::\n-   :maxdepth: 1\n-\n-    More on Content Negotiation <content-negotiation>\n-\n-The server will then respond with the portal root in the JSON format:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/siteroot.resp\n-   :language: http\n-\n-``@id`` is a unique identifier for resources (IRIs).\n-The ``@id`` property can be used to navigate through the web API by following the links.\n-\n-``@type`` sets the data type of a node or typed value\n-\n-``items`` is a list that contains all objects within that resource.\n-\n-A client application can "follow" the links (by calling the @id property) to other resources.\n-This allows to build a losely coupled client that does not break if some of the URLs change, only the entry point of the entire API (in our case the portal root) needs to be known in advance.\n-\n-Another example, this time showing a request and response for a document.\n-Click on the buttons below to show the different syntaxes for the request.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/document.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/document.resp\n-   :language: http\n-\n-And so on, see\n-\n-  .. toctree::\n-   :maxdepth: 1\n-\n-     Representation of all standard Plone contenttypes<plone-content>\n\\ No newline at end of file\ndiff --git a/docs/source/locking.md b/docs/source/locking.md\nnew file mode 100644\nindex 000000000..e9291f4b8\n--- /dev/null\n+++ b/docs/source/locking.md\n@@ -0,0 +1,130 @@\n+# Locking\n+\n+Locking is a mechanism to prevent users from accidentally overriding each other\'s changes.\n+\n+When a user edits a content object in Plone, the object is locked until the user hits the {guilabel}`Save` or {guilabel}`Cancel` button.\n+If a second user tries to edit the object at the same time, she will see a message that this object is locked.\n+\n+The API consumer can create, read, update, and delete a content-type lock.\n+\n+| Verb     | URL      | Action                                 |\n+| -------- | -------- | -------------------------------------- |\n+| `POST`   | `/@lock` | Lock an object                         |\n+| `GET`    | `/@lock` | Get information about the current lock |\n+| `PATCH`  | `/@lock` | Refresh existing lock                  |\n+| `DELETE` | `/@lock` | Unlock an object                       |\n+\n+\n+## Locking an object\n+\n+To lock an object, send a `POST` request to the `/@lock` endpoint that is available on any content object in Plone:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/lock.req\n+```\n+\n+If the lock operation succeeds, the server will respond with status {term}`200 OK` and return various information about the lock, including the lock token.\n+The token is needed in later requests to update the locked object:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/lock.resp\n+:language: http\n+```\n+\n+By default, locks are stealable.\n+That means that another user can unlock the object.\n+If you want to create a non-stealable lock, pass `"stealable": false` in the request body.\n+\n+To create a lock with a non-default timeout, you can pass the timeout value in seconds in the request body.\n+\n+The following example creates a non-stealable lock with a timeout of one hour:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.req\n+```\n+\n+The server responds with status {term}`200 OK` and returns the lock information:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp\n+:language: http\n+```\n+\n+\n+## Unlocking an object\n+\n+To unlock an object, send a `DELETE` request to the `/@lock` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/unlock.req\n+```\n+\n+The server responds with status {term}`200 OK` and returns the lock information:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/unlock.resp\n+:language: http\n+```\n+\n+To unlock an object locked by another user, send a force `DELETE` request to the `/@lock` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/unlock_force.req\n+```\n+\n+The server responds with status {term}`200 OK` and returns the lock information:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/unlock_force.resp\n+:language: http\n+```\n+\n+```{warning}\n+The `@unlock` endpoint is deprecated and will be removed in `plone.restapi` 9.0.\n+```\n+\n+\n+## Refreshing a lock\n+\n+An existing lock can be refreshed by sending a `PATCH` request to the `@lock` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/refresh_lock.req\n+```\n+\n+The server responds with status {term}`200 OK` and returns the lock information containing the updated creation time:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/refresh_lock.resp\n+:language: http\n+```\n+\n+```{warning}\n+The `@refresh-lock` endpoint is deprecated and will be removed in `plone.restapi` 9.0.\n+```\n+\n+\n+## Getting lock information\n+\n+To find out if an object is locked or to get information about the current lock, you can send a `GET` request to the `@lock` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/lock_get.req\n+```\n+\n+The server responds with status {term}`200 OK` and returns the information about the lock:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/lock_get.resp\n+:language: http\n+```\n+\n+\n+## Updating a locked object\n+\n+To update a locked object with a `PATCH` request, you have to provide the lock token with the `Lock-Token` header:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/lock_update.req\n+```\ndiff --git a/docs/source/locking.rst b/docs/source/locking.rst\ndeleted file mode 100644\nindex 3d1afe464..000000000\n--- a/docs/source/locking.rst\n+++ /dev/null\n@@ -1,117 +0,0 @@\n-Locking\n-=======\n-\n-Locking is a mechanism to prevent users from accidentially overriding each others changes.\n-\n-When a user edits a content object in Plone, the object is locked until the user hits the save or cancel button.\n-If a second user tries to edit the object at the same time, she will see a message that this object is locked.\n-\n-The API consumer can create, read, update, and delete a content-type lock.\n-\n-======= =============================================== =====================================================================\n-Verb    URL                                             Action\n-======= =============================================== =====================================================================\n-POST    ``/@lock``                                      Lock an object\n-GET     ``/@lock``                                      Get information about the current lock\n-PATCH   ``/@lock``                                      Refresh existing lock\n-DELETE  ``/@lock``                                      Unlock an object\n-======= =============================================== =====================================================================\n-\n-\n-Locking an object\n------------------\n-\n-To lock an object send a POST request to the ``/@lock`` endpoint that is available on any content object in Plone:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/lock.req\n-\n-If the lock operation succeeds, the server will respond with status :term:`200 OK` and return various information\n-about the lock including the lock token. The token is needed in later requests to update the locked object.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/lock.resp\n-   :language: http\n-\n-\n-By default, locks are stealable. That means that another user can unlock the object.\n-If you want to create a non-stealable lock, pass ``"stealable": false`` in the request body.\n-\n-To create a lock with a non-default timeout, you can pass the the timeout value in seconds in the request body.\n-\n-The following example creates a non-stealable lock with a timeout of 1h.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.req\n-\n-\n-The server responds with status :term:`200 OK` and returns the lock information.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/lock_nonstealable_timeout.resp\n-   :language: http\n-\n-\n-Unlocking an object\n--------------------\n-\n-To unlock an object send a DELETE request to the ``/@lock`` endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/unlock.req\n-\n-The server responds with status :term:`200 OK` and returns the lock information.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/unlock.resp\n-   :language: http\n-\n-To unlock an object locked by another user send a force DELETE request to the ``/@lock`` endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/unlock_force.req\n-\n-The server responds with status :term:`200 OK` and returns the lock information.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/unlock_force.resp\n-   :language: http\n-\n-.. warning::\n-   The ``@unlock`` endpoint is deprecated and will be removed in plone.restapi 9.0.\n-\n-Refreshing a lock\n------------------\n-\n-An existing lock can be refreshed by sending a PATCH request to the ``@lock`` endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/refresh_lock.req\n-\n-The server responds with status :term:`200 OK` and returns the lock information containing the updated creation time.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/refresh_lock.resp\n-   :language: http\n-\n-.. warning::\n-   The ``@refresh-lock`` endpoint is deprecated and will be removed in plone.restapi 9.0.\n-\n-Getting lock information\n-------------------------\n-\n-To find out if an object is locked or to get information about the current lock\n-you can send a GET request to the ``@lock`` endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/lock_get.req\n-\n-The server responds with status :term:`200 OK` and returns the information about the lock.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/lock_get.resp\n-   :language: http\n-\n-\n-Updating a locked object\n-------------------------\n-\n-To update a locked object with a PATCH request, you have to provide the lock\n-token with the ``Lock-Token`` header.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/lock_update.req\ndiff --git a/docs/source/navigation.md b/docs/source/navigation.md\nnew file mode 100644\nindex 000000000..c96d002e6\n--- /dev/null\n+++ b/docs/source/navigation.md\n@@ -0,0 +1,35 @@\n+(navigation)=\n+\n+# Navigation\n+\n+\n+## Top-Level Navigation\n+\n+Get the top-level navigation items:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/navigation.req\n+```\n+\n+Example response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/navigation.resp\n+:language: http\n+```\n+\n+\n+## Navigation Tree\n+\n+Get the navigation item tree by providing a `expand.navigation.depth` parameter:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/navigation_tree.req\n+```\n+\n+Example response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/navigation_tree.resp\n+:language: http\n+```\ndiff --git a/docs/source/navigation.rst b/docs/source/navigation.rst\ndeleted file mode 100644\nindex 64ed697fb..000000000\n--- a/docs/source/navigation.rst\n+++ /dev/null\n@@ -1,31 +0,0 @@\n-.. _navigation:\n-\n-Navigation\n-==========\n-\n-Top-Level Navigation\n---------------------\n-\n-Getting the top navigation items:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/navigation.req\n-\n-Example response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/navigation.resp\n-   :language: http\n-\n-\n-Navigation Tree\n----------------\n-\n-Getting the navigation item tree providing a `expand.navigation.depth` parameter:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/navigation_tree.req\n-\n-Example response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/navigation_tree.resp\n-   :language: http\ndiff --git a/docs/source/plone-content.md b/docs/source/plone-content.md\nnew file mode 100644\nindex 000000000..24e491caf\n--- /dev/null\n+++ b/docs/source/plone-content.md\n@@ -0,0 +1,139 @@\n+# Plone Content\n+\n+How to get all standard Plone content representations.\n+The syntax is given in various tools.\n+Click on "curl", "http-request" or "python-requests" to see an example for those tools.\n+\n+```{note}\n+For folderish types, collections or search results, the results will be **batched** if the size of the resultset exceeds the batch size.\n+See {doc}`./batching` for more details on how to work with batched results.\n+```\n+\n+\n+## Plone Portal Root\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/siteroot.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/siteroot.resp\n+:language: http\n+```\n+\n+\n+## Plone Folder\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/folder.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/folder.resp\n+:language: http\n+```\n+\n+\n+## Plone Document\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/document.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/document.resp\n+:language: http\n+```\n+\n+\n+## News Item\n+\n+```{note}\n+Here we show `uuid1` as an example uid for all image scales because this documentation is autogenerated by the tests.\n+When running in a real application, these `uuid1` values will be exchanged by proper uuid4 values.\n+```\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/newsitem.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/newsitem.resp\n+:language: http\n+```\n+\n+\n+## Event\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/event.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/event.resp\n+:language: http\n+```\n+\n+\n+## Image\n+\n+```{note}\n+Here we show `uuid1` as an example uid for all image scales because this documentation is autogenerated by the tests.\n+When running in a real application, these `uuid1` values will be exchanged by proper uuid4 values.\n+```\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/image.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/image.resp\n+:language: http\n+```\n+\n+\n+## File\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/file.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/file.resp\n+:language: http\n+```\n+\n+\n+## Link\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/link.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/link.resp\n+:language: http\n+```\n+\n+\n+## Collection\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/collection.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/collection.resp\n+:language: http\n+```\n+\n+You can also get all the data for each of the items in a collection by appending the `?fullobjects` parameter to the query:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/collection_fullobjects.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/collection_fullobjects.resp\n+:language: http\n+```\ndiff --git a/docs/source/plone-content.rst b/docs/source/plone-content.rst\ndeleted file mode 100644\nindex ade916237..000000000\n--- a/docs/source/plone-content.rst\n+++ /dev/null\n@@ -1,122 +0,0 @@\n-Plone Content\n-=============\n-\n-How to get all standard Plone content representations.\n-The syntax is given in various tools, click on \'curl\', \'http-request\' or \'python-requests\' to see examples.\n-\n-.. note::\n-        For folderish types, collections or search results, the results will\n-        be **batched** if the size of the resultset exceeds the batch size.\n-        See :doc:`./batching` for more details on how to work with batched\n-        results.\n-\n-\n-Plone Portal Root:\n-------------------\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/siteroot.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/siteroot.resp\n-   :language: http\n-\n-\n-Plone Folder:\n--------------\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/folder.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/folder.resp\n-   :language: http\n-\n-\n-Plone Document:\n----------------\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/document.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/document.resp\n-   :language: http\n-\n-\n-News Item:\n-----------\n-\n-.. note::\n-    Here we show ``uuid1`` as an example uid for all image scales because this documentation\n-    is autogenerated by the tests. When running in a real application, these ``uuid1``\n-    values will be exchanged by proper uuid4 values.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/newsitem.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/newsitem.resp\n-   :language: http\n-\n-\n-Event:\n-------\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/event.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/event.resp\n-   :language: http\n-\n-\n-Image:\n-------\n-\n-.. note::\n-    Here we show ``uuid1`` as an example uid for all image scales because this documentation\n-    is autogenerated by the tests. When running in a real application, these ``uuid1``\n-    values will be exchanged by proper uuid4 values.\n-\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/image.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/image.resp\n-   :language: http\n-\n-\n-File:\n------\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/file.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/file.resp\n-   :language: http\n-\n-\n-Link:\n------\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/link.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/link.resp\n-   :language: http\n-\n-\n-Collection:\n------------\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/collection.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/collection.resp\n-   :language: http\n-\n-\n-You can also get all the data of each of the items of a collection, appending the `?fullobjects`\n-parameter to the query:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/collection_fullobjects.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/collection_fullobjects.resp\n-   :language: http\ndiff --git a/docs/source/principals.rst b/docs/source/principals.md\nsimilarity index 50%\nrename from docs/source/principals.rst\nrename to docs/source/principals.md\nindex ed3e2e1e3..cf952379d 100644\n--- a/docs/source/principals.rst\n+++ b/docs/source/principals.md\n@@ -1,19 +1,21 @@\n-Principals\n-==========\n+# Principals\n \n-This endpoint will search for all the available principals in the local PAS\n-plugins given a query string. We call a principal to any user or group in the\n-system (requires an authenticated user):\n+This endpoint will search for all the available principals in the local PAS plugins when given a query string.\n+We define a principal as any user or group in the system.\n+This endpoint requires an authenticated user.\n \n-Search Principals\n------------------\n \n-To retrieve a list of principals given a search string, call the ``/@principals`` endpoint with a GET request and a ``search`` query parameter:\n+## Search Principals\n \n+To retrieve a list of principals given a search string, call the `/@principals` endpoint with a `GET` request and a `search` query parameter:\n+\n+```{eval-rst}\n ..  http:example:: curl httpie python-requests\n     :request: ../../src/plone/restapi/tests/http-examples/principals.req\n+```\n \n The server will respond with a list of the users and groups in the portal that match the query string:\n \n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/principals.resp\n-   :language: http\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/principals.resp\n+:language: http\n+```\ndiff --git a/docs/source/querystring.md b/docs/source/querystring.md\nnew file mode 100644\nindex 000000000..174450391\n--- /dev/null\n+++ b/docs/source/querystring.md\n@@ -0,0 +1,32 @@\n+# Querystring\n+\n+The `@querystring` endpoint returns the `querystring` configuration of `plone.app.querystring`.\n+\n+Instead of simply exposing the `querystring` related `field` and `operation` entries from the registry, it serializes them in the same way that `p.a.querystring` does in its `@@querybuilderjsonconfig` view.\n+\n+This form is structured in a more convenient way for frontends to process:\n+\n+- *Vocabularies* will be resolved.\n+  Their values will be inlined in the `values` property.\n+- *Operations* will be inlined as well.\n+  The `operations` property will contain the list of operations as dotted names.\n+  The `operators` property will contain the full definition of each of those operations supported by that field.\n+- Indexes that are flagged as *sortable* are listed in a dedicated top-level property `sortable_indexes`.\n+\n+Available options for the querystring in a Plone site can be queried by interacting with the `/@querystring` endpoint on the portal root:\n+\n+\n+## Querystring Config\n+\n+To retrieve all `querystring` options in the portal, call the `/@querystring` endpoint with a `GET` request:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/querystring_get.req\n+```\n+\n+The server will respond with all `querystring` options in the portal:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/querystring_get.resp\n+:language: http\n+```\ndiff --git a/docs/source/querystring.rst b/docs/source/querystring.rst\ndeleted file mode 100644\nindex bf6d30982..000000000\n--- a/docs/source/querystring.rst\n+++ /dev/null\n@@ -1,33 +0,0 @@\n-Querystring\n-===========\n-\n-The ``@querystring`` endpoint returns the querystring config of ``plone.app.querystring``.\n-\n-Instead of simply exposing the querystring related ``field`` and ``operation``\n-entries from the registry, it serializes them the same way the\n-``@@querybuilderjsonconfig`` view from p.a.querystring does.\n-\n-This form is structured in a more conventient way for frontends to process:\n-\n-- **Vocabularies** will be resolved, and their values will be inlined in the\n-  ``values`` property\n-- **Operations** will be inlined as well. The ``operations`` property will contain\n-  the list of operations (dotted names), and the ``operators`` property will\n-  contain the full definition of each of those operations supported by that field.\n-- Indexes that are flagged as **sortable** are listed in a dedicated top-level property\n-  ``sortable_indexes``\n-\n-Available options for the querystring in a Plone site can be queried by interacting with the ``/@querystring`` endpoint on portal root:\n-\n-Querystring Config\n-------------------\n-\n-To retrieve all querystring options in the portal, call the ``/@querystring`` endpoint with a ``GET`` request:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/querystring_get.req\n-\n-The server will respond with all querystring options in the portal:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/querystring_get.resp\n-   :language: http\ndiff --git a/docs/source/querystringsearch.md b/docs/source/querystringsearch.md\nnew file mode 100644\nindex 000000000..1079a2a42\n--- /dev/null\n+++ b/docs/source/querystringsearch.md\n@@ -0,0 +1,525 @@\n+# Querystring Search\n+\n+The `@querystring-search` endpoint returns search results that can be filtered on search criteria.\n+\n+Call the `/@querystring-search` endpoint with a `POST` request and a query in the request body:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/querystringsearch_post.req\n+```\n+\n+The server will respond with the results that are filtered based on the query you provided:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/querystringsearch_post.resp\n+:language: http\n+```\n+\n+Parameters the endpoint will accept:\n+\n+- `query` - `plone.app.querystring` query, required\n+- `b_start` - integer, batch start\n+- `b_size` - integer, batch size\n+- `sort_on` - string, field that results will be sorted on\n+- `sort_order` - string, value must be either `ascending` or `descending`\n+- `limit` - integer, limits the number of returned results\n+- `fullobjects` - boolean, if `true` then return the full objects instead of just the summary serialization\n+\n+\n+## Parameters\n+\n+\n+### Batch Start (`b_start`)\n+\n+The `b_start` parameter defines the first item of the batch:\n+\n+```\n+{\n+  "b_start": "5",\n+  "query": [\n+    {\n+      \'i\': \'Title\',\n+      \'o\': \'plone.app.querystring.operation.string.is\',\n+      \'v\': \'Welcome to Plone\',\n+    }\n+  ]\n+}\n+```\n+\n+The `b_size` parameter is optional.\n+The default value is `0`.\n+\n+\n+### Batch Size (b_size)\n+\n+The `b_size` parameter defines the number of elements a single batch returns:\n+\n+```\n+{\n+  "b_size": "5",\n+  "query": [\n+    {\n+      \'i\': \'Title\',\n+      \'o\': \'plone.app.querystring.operation.string.is\',\n+      \'v\': \'Welcome to Plone\',\n+    }\n+  ]\n+}\n+```\n+\n+The parameter is optional.\n+The default value is `25`.\n+\n+\n+### Sort on\n+\n+The `sort_on` parameter defines the field that is used to sort the returned search results:\n+\n+```\n+{\n+  "sort_on": "sortable_title",\n+  "query": [\n+    {\n+      \'i\': \'Title\',\n+      \'o\': \'plone.app.querystring.operation.string.is\',\n+      \'v\': \'Welcome to Plone\',\n+    }\n+  ]\n+}\n+```\n+\n+The `sort_on` parameter is optional.\n+The default value is `None`.\n+\n+\n+### Sort Order\n+\n+The `sort_order` parameter defines the sort order when the `sort_on` field has been set:\n+\n+```\n+{\n+  "sort_on": "sortable_title",\n+  "sort_order": "reverse",\n+  "query": [\n+    {\n+      \'i\': \'Title\',\n+      \'o\': \'plone.app.querystring.operation.string.is\',\n+      \'v\': \'Welcome to Plone\',\n+    }\n+  ]\n+}\n+```\n+\n+The `sort_order` parameter is optional.\n+The default value is `ascending`.\n+\n+The sort_order can be either `ascending` or `descending`.\n+`ascending` means from A to Z for a text field.\n+`reverse` is an alias equivalent to `descending`.\n+\n+\n+### Limit\n+\n+Querystring `query` with a `limit` parameter:\n+\n+```\n+{\n+  "limit": "10",\n+  "query": [\n+    {\n+      \'i\': \'Title\',\n+      \'o\': \'plone.app.querystring.operation.string.is\',\n+      \'v\': \'Welcome to Plone\',\n+    }\n+  ]\n+}\n+```\n+\n+The `limit` parameter is optional.\n+The default value is `1000`.\n+\n+\n+### Query\n+\n+The `query` parameter is a list that contains an arbitrary number of `filters`:\n+\n+```\n+{\n+  "query": [\n+    {\n+      \'i\': \'Title\',\n+      \'o\': \'plone.app.querystring.operation.string.is\',\n+      \'v\': \'Welcome to Plone\',\n+    }\n+  ]\n+}\n+```\n+\n+A `filter` always contains three values:\n+\n+- `\xc3\xac`: The index of the filter (the name of the field to which this filter is applied).\n+- `o`: The operator of the filter. A full list can be found at <https://github.com/plone/plone.app.querystring/blob/master/plone/app/querystring/profiles/default/registry.xml>.\n+- `v`: The value of the filter. This depends highly on the index. For a text index, this is a string. For a date index, this might be a date range.\n+\n+The following types of filters are available:\n+\n+- Metadata filters\n+- Date filters\n+- Text Filters\n+\n+\n+#### Metadata Filters\n+\n+\n+##### Creator\n+\n+The `creator` of the content object.\n+\n+You can either set the currently logged in user:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"Creator",\n+      "o":"plone.app.querystring.operation.string.currentUser",\n+      "v":""\n+    }\n+  ],\n+}\n+```\n+\n+\xe2\x80\xa6or set a username:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"Creator",\n+      "o":"plone.app.querystring.operation.selection.any",\n+      "v":["noam"]\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Shortname\n+\n+`Shortname` is the ID of the object that is shown as the last part of the URL:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"getId",\n+      "o":"plone.app.querystring.operation.string.is",\n+      "v":"hero"\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Location\n+\n+`Location` is the path of the content object on the site.\n+You can either set three kind of paths.\n+\n+The absolute path from the portal root:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"path",\n+      "o":"plone.app.querystring.operation.string.absolutePath",\n+      "v":"/my-content-object"\n+    }\n+  ]\n+}\n+```\n+\n+The relative path from the current object:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"path",\n+      "o":"plone.app.querystring.operation.string.relativePath",\n+      "v":"../my-content-object"\n+    }\n+  ]\n+}\n+```\n+\n+The navigation path:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"path",\n+      "o":"plone.app.querystring.operation.string.path",\n+      "v":"/hero"\n+    }\n+  ]\n+}\n+```\n+\n+The computed path can be stored:\n+\n+```\n+{\n+  "query": [\n+    {\n+      \'i\': \'path\',\n+      \'o\': \'plone.app.querystring.operation.string.path\',\n+      \'v\': \'00000000000000001\',\n+    }\n+  ]\n+}\n+```\n+\n+The path can contain a depth parameter that is separated with `::`:\n+\n+```\n+{\n+  "query": [\n+    {\n+      \'i\': \'path\',\n+      \'o\': \'plone.app.querystring.operation.string.path\',\n+      \'v\': \'/my-content-object::2\',\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Type\n+\n+Filter by portal type:\n+\n+```\n+{\n+  "query": [\n+    {\n+      "i": "portal_type",\n+      "o": "plone.app.querystring.operation.selection.any",\n+      "v": ["Document"],\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Review State\n+\n+Filter results by review state:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"review_state",\n+      "o":"plone.app.querystring.operation.selection.any",\n+      "v":["published"]\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Show Inactive\n+\n+Show inactive will return content objects that is expired for a given role:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"show_inactive",\n+      "o":"plone.app.querystring.operation.string.showInactive",\n+      "v":["Owner"]\n+    }\n+  ]\n+}\n+```\n+\n+\n+#### Text Filters\n+\n+\n+##### Description\n+\n+Filter content that contains a term in the Description field:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"Description",\n+      "o":"plone.app.querystring.operation.string.contains",\n+      "v":"Noam"\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Searchable Text\n+\n+Filter content that contains a term in the SearchableText (all searchable fields in the catalog):\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"SearchableText",\n+      "o":"plone.app.querystring.operation.string.contains",\n+      "v":"Noam"\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Tag\n+\n+Filter by a tag (subjects field):\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i":"Subject",\n+      "o":"plone.app.querystring.operation.selection.any",\n+      "v":["Astrophysics"]\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Title\n+\n+Filter by exact Title match:\n+\n+```\n+"query": [\n+  {\n+    \'i\': \'Title\',\n+    \'o\': \'plone.app.querystring.operation.string.is\',\n+    \'v\': \'Welcome to Plone\',\n+  }\n+]\n+```\n+\n+\n+#### Date Filters\n+\n+\n+##### Creation Date\n+\n+Filter by creation date:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i": "created",\n+      "o": "plone.app.querystring.operation.date.lessThan",\n+      "v": "2021-11-11"\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Effective Date\n+\n+Filter by effective date:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i": "effective",\n+      "o": "plone.app.querystring.operation.date.largerThan",\n+      "v": "2021-11-11"\n+      }\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Event end date\n+\n+Filter by event end date:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i": "end",\n+      "o": "plone.app.querystring.operation.date.lessThan",\n+      "v":"2021-11-04"\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Event start date\n+\n+Filter by event start date:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i": "end",\n+      "o": "plone.app.querystring.operation.date.lessThan",\n+      "v":"2021-11-04"\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Expiration date\n+\n+Filter by expiration date:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i": "expires",\n+      "o": "plone.app.querystring.operation.date.largerThan",\n+      "v": "2021-11-11"\n+      }\n+    }\n+  ]\n+}\n+```\n+\n+\n+##### Modification date\n+\n+Filter by modification date:\n+\n+```\n+{\n+  "query":[\n+    {\n+      "i": "modified",\n+      "o": "plone.app.querystring.operation.date.largerThan",\n+      "v": "2021-11-11"\n+      }\n+    }\n+  ]\n+}\n+```\ndiff --git a/docs/source/querystringsearch.rst b/docs/source/querystringsearch.rst\ndeleted file mode 100644\nindex 48fc97862..000000000\n--- a/docs/source/querystringsearch.rst\n+++ /dev/null\n@@ -1,468 +0,0 @@\n-Querystring Search\n-==================\n-\n-The ``@querystring-search`` endpoint returns search results that can be filtered on search criteria.\n-\n-Call the ``/@querystring-search`` endpoint with a ``POST`` request and a query in the request body:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/querystringsearch_post.req\n-\n-The server will respond with the results that are filtered based on the query you provided:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/querystringsearch_post.resp\n-   :language: http\n-\n-Parameters the endpoint will accept:\n-\n-  - ``query`` (plone.app.querystring query, required)\n-  - ``b_start`` (integer, batch start)\n-  - ``b_size`` (integer, batch size)\n-  - ``sort_on`` (string, field that results will be sorted on)\n-  - ``sort_order`` : ``"ascending"``, ``"descending"`` (string)\n-  - ``limit`` (integer, limits the number of returned results)\n-  - ``fullobjects`` : ``"true"``, ``"false``" (boolean, if true the return the full objects instead of just the summary serialization)\n-\n-Parameters\n-----------\n-\n-Batch Start (b_start)\n-^^^^^^^^^^^^^^^^^^^^^\n-\n-The `b_start` parameter defines the first item of the batch::\n-\n-  {\n-    "b_start": "5",\n-    "query": [\n-      {\n-        \'i\': \'Title\',\n-        \'o\': \'plone.app.querystring.operation.string.is\',\n-        \'v\': \'Welcome to Plone\',\n-      }\n-    ]\n-  }\n-\n-\n-The `b_size` parameter is optional and the default value is `0`.\n-\n-Batch Size (b_size)\n-^^^^^^^^^^^^^^^^^^^\n-\n-The `b_size` parameter defines the number of elements a single batch returns:: \n-\n-  {\n-    "b_size": "5",\n-    "query": [\n-      {\n-        \'i\': \'Title\',\n-        \'o\': \'plone.app.querystring.operation.string.is\',\n-        \'v\': \'Welcome to Plone\',\n-      }\n-    ]\n-  }\n-\n-The parameter is optional. And the default value is `25`.\n-\n-\n-Sort on\n-^^^^^^^\n-\n-The `sort_on` parameter defines the field that is used to sort the returned search results::\n-\n-  {\n-    "sort_on": "sortable_title",\n-    "query": [\n-      {\n-        \'i\': \'Title\',\n-        \'o\': \'plone.app.querystring.operation.string.is\',\n-        \'v\': \'Welcome to Plone\',\n-      }\n-    ]\n-  }\n-\n-The `sort_on` parameter is optional. The default value is `None`.\n-\n-Sort Order\n-^^^^^^^^^^\n-\n-The `sort_order` parameter defines the sort order when the `sort_on` field has been set::\n-\n-  {\n-    "sort_on": "sortable_title",\n-    "sort_order": "reverse",\n-    "query": [\n-      {\n-        \'i\': \'Title\',\n-        \'o\': \'plone.app.querystring.operation.string.is\',\n-        \'v\': \'Welcome to Plone\',\n-      }\n-    ]\n-  }\n-\n-The `sort_order` parameter is optional. The default value is `ascending`.\n-\n-The sort_order can be either \xe2\x80\x98ascending\xe2\x80\x99 or \xe2\x80\x98descending\xe2\x80\x99, where \xe2\x80\x98ascending\xe2\x80\x99 means from A to Z for a text field. \xe2\x80\x98reverse\xe2\x80\x99 is an alias equivalent to \xe2\x80\x98descending\xe2\x80\x99.\n-\n-\n-Limit\n-^^^^^\n-\n-Querystring Query with limit parameter::\n-\n-  {\n-    "limit": "10",\n-    "query": [\n-      {\n-        \'i\': \'Title\',\n-        \'o\': \'plone.app.querystring.operation.string.is\',\n-        \'v\': \'Welcome to Plone\',\n-      }\n-    ]\n-  }\n-\n-The `limit` parameter is optional. The default value is `1000`.\n-\n-\n-Query\n------\n-\n-The `query` parameter is a list that contains an arbitrary number of `filters`::\n-\n-\n-  {\n-    "query": [\n-      {\n-        \'i\': \'Title\',\n-        \'o\': \'plone.app.querystring.operation.string.is\',\n-        \'v\': \'Welcome to Plone\',\n-      }\n-    ]\n-  }\n-\n-A `filter` always contains three values:\n-\n-* `\xc3\xac`: the index of the filter (the name of the field this filter is applied to)\n-* `o`: the operator of the filter (the operator, a full list can be found here: https://github.com/plone/plone.app.querystring/blob/master/plone/app/querystring/profiles/default/registry.xml)\n-* `v`: the value of the filter (this highly depends on the index, for a text index, this is a string, for a date index this might be a date range)\n-\n-The following type of filters are available:\n-\n-* Metadata filters\n-* Date filters\n-* Text Filters\n-\n-Metadata Filters\n-^^^^^^^^^^^^^^^^\n-\n-Creator\n-,,,,,,,\n-\n-The creator of the content object.\n-\n-You can either set the currently logged in user::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"Creator",\n-        "o":"plone.app.querystring.operation.string.currentUser",\n-        "v":""\n-      }\n-    ],\n-  }\n-\n-or set a username::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"Creator",\n-        "o":"plone.app.querystring.operation.selection.any",\n-        "v":["noam"]\n-      }\n-    ]\n-  }\n-\n-Shortname\n-\xc2\xb4\xc2\xb4\xc2\xb4\xc2\xb4\xc2\xb4\xc2\xb4\xc2\xb4\xc2\xb4\xc2\xb4\n-\n-Shortname (the id of the object that is shown as last part of the URL)::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"getId",\n-        "o":"plone.app.querystring.operation.string.is",\n-        "v":"hero"\n-      }\n-    ]\n-  }\n-\n-Location\n-,,,,,,,,\n-\n-Location is the path of the content object on the site. You can either set three kind of paths.\n-\n-The absolute path (from the portal root)::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"path",\n-        "o":"plone.app.querystring.operation.string.absolutePath",\n-        "v":"/my-content-object"\n-      }\n-    ]\n-  }\n-\n-The relative path (relative from the current object)::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"path",\n-        "o":"plone.app.querystring.operation.string.relativePath",\n-        "v":"../my-content-object"\n-      }\n-    ]\n-  }\n-\n-The navigation path::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"path",\n-        "o":"plone.app.querystring.operation.string.path",\n-        "v":"/hero"\n-      }\n-    ]\n-  }\n-\n-The path can be stored computed::\n-\n-  {\n-    "query": [\n-      {\n-        \'i\': \'path\',\n-        \'o\': \'plone.app.querystring.operation.string.path\',\n-        \'v\': \'00000000000000001\',\n-      }\n-    ]\n-  }\n-\n-The path can contain a depth parameter (that is separated with a "::")::\n-\n-  {\n-    "query": [\n-      {\n-        \'i\': \'path\',\n-        \'o\': \'plone.app.querystring.operation.string.path\',\n-        \'v\': \'/my-content-object::2\',\n-      }\n-    ]\n-  }\n-\n-Type\n-,,,,\n-\n-Filter by portal type::\n-\n-  {\n-    "query": [\n-      {\n-        "i": "portal_type",\n-        "o": "plone.app.querystring.operation.selection.any",\n-        "v": ["Document"],\n-      }\n-    ]\n-  }\n-\n-Review State\n-,,,,,,,,,,,,\n-\n-Filter results by review state::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"review_state",\n-        "o":"plone.app.querystring.operation.selection.any",\n-        "v":["published"]\n-      }\n-    ]\n-  }\n-\n-\n-Show Inactive\n-,,,,,,,,,,,,,\n-\n-Show inactive will return content objects that is expired for a given role::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"show_inactive",\n-        "o":"plone.app.querystring.operation.string.showInactive",\n-        "v":["Owner"]\n-      }\n-    ]\n-  }\n-\n-Text Filters\n-^^^^^^^^^^^^\n-\n-Description\n-,,,,,,,,,,,\n-\n-Filter content that contains a term in the Description field::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"Description",\n-        "o":"plone.app.querystring.operation.string.contains",\n-        "v":"Noam"\n-      }\n-    ]\n-  }\n-\n-Searchable Text\n-,,,,,,,,,,,,,,,\n-\n-Filter content that contains a term in the SearchableText (all searchable fields in the catalog)::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"SearchableText",\n-        "o":"plone.app.querystring.operation.string.contains",\n-        "v":"Noam"\n-      }\n-    ]\n-  }\n-\n-Tag\n-,,,\n-\n-Filter by a tag (subjects field)::\n-\n-  {\n-    "query":[\n-      {\n-        "i":"Subject",\n-        "o":"plone.app.querystring.operation.selection.any",\n-        "v":["Astrophysics"]\n-      }\n-    ]\n-  }\n-\n-\n-Title\n-,,,,,\n-\n-Filter by exact Title match::\n-\n-  "query": [\n-    {\n-      \'i\': \'Title\',\n-      \'o\': \'plone.app.querystring.operation.string.is\',\n-      \'v\': \'Welcome to Plone\',\n-    }\n-  ]\n-\n-Date Filters\n-^^^^^^^^^^^^\n-\n-Creation Date\n-,,,,,,,,,,,,,\n-\n-Filter by creation date::\n-\n-  {\n-    "query":[\n-      {\n-        "i": "created",\n-        "o": "plone.app.querystring.operation.date.lessThan",\n-        "v": "2021-11-11"\n-      }\n-    ]\n-  }\n-\n-Effective Date\n-,,,,,,,,,,,,,,\n-\n-Filter by effective date::\n-\n-  {\n-    "query":[\n-      {\n-        "i": "effective",\n-        "o": "plone.app.querystring.operation.date.largerThan",\n-        "v": "2021-11-11"\n-        }\n-      }\n-    ]\n-  }\n-\n-Event end date\n-,,,,,,,,,,,,,,\n-\n-Filter by event end date::\n-\n-  {\n-    "query":[\n-      {\n-        "i": "end",\n-        "o": "plone.app.querystring.operation.date.lessThan",\n-        "v":"2021-11-04"\n-      }\n-    ]\n-  }\n-\n-Event start date\n-,,,,,,,,,,,,,,,,\n-\n-Filter by event start date::\n-\n-  {\n-    "query":[\n-      {\n-        "i": "end",\n-        "o": "plone.app.querystring.operation.date.lessThan",\n-        "v":"2021-11-04"\n-      }\n-    ]\n-  }\n-\n-Expiration date\n-,,,,,,,,,,,,,,,\n-\n-Filter by expiration date::\n-\n-  {\n-    "query":[\n-      {\n-        "i": "expires",\n-        "o": "plone.app.querystring.operation.date.largerThan",\n-        "v": "2021-11-11"\n-        }\n-      }\n-    ]\n-  }\n-\n-Modification date\n-,,,,,,,,,,,,,,,,,\n-\n-Filter by modification date::\n-\n-  {\n-    "query":[\n-      {\n-        "i": "modified",\n-        "o": "plone.app.querystring.operation.date.largerThan",\n-        "v": "2021-11-11"\n-        }\n-      }\n-    ]\n-  }\ndiff --git a/docs/source/registry.md b/docs/source/registry.md\nnew file mode 100644\nindex 000000000..b94e1a457\n--- /dev/null\n+++ b/docs/source/registry.md\n@@ -0,0 +1,60 @@\n+# Registry\n+\n+Registry records can be addressed through the `@registry` endpoint on the Plone site.\n+To address a specific record, the fully qualified dotted name of the registry record has to be passed as a path segment, for example, `/plone/@registy/my.record`.\n+\n+Reading or writing registry records require the `cmf.ManagePortal` permission.\n+\n+\n+## Reading registry records\n+\n+Reading a single record:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/registry_get.req\n+```\n+\n+Example response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/registry_get.resp\n+:language: http\n+```\n+\n+\n+## Listing registry records\n+\n+The registry records listing uses a batched method to access all registry records.\n+See {doc}`batching` for more details on how to work with batched results.\n+\n+The output record contains the following fields:\n+\n+- `name`: The record\'s fully qualified dotted name.\n+- `value`: The record\'s value. This is the same as `GET`ting `@registry/name`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/registry_get_list.req\n+```\n+\n+Example response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/registry_get_list.resp\n+:language: http\n+```\n+\n+\n+## Updating registry records\n+\n+Updating an existing record:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/registry_update.req\n+```\n+\n+Example response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/registry_update.resp\n+:language: http\n+```\ndiff --git a/docs/source/registry.rst b/docs/source/registry.rst\ndeleted file mode 100644\nindex 1e4dc1da4..000000000\n--- a/docs/source/registry.rst\n+++ /dev/null\n@@ -1,57 +0,0 @@\n-Registry\n-========\n-\n-Registry records can be addressed through the ``@registry`` endpoint on the\n-Plone site. In order to address a specific record, the fully qualified dotted\n-name of the registry record has to be passed as a path segment\n-(e.g. `/plone/@registy/my.record`).\n-\n-Reading or writing registry records require the ``cmf.ManagePortal``\n-permission.\n-\n-Reading registry records\n-------------------------\n-\n-Reading a single record:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/registry_get.req\n-\n-Example Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/registry_get.resp\n-   :language: http\n-\n-\n-Listing registry records\n-------------------------\n-\n-The registry records listing uses a batched method to access all registry records.\n-See :doc:`./batching` for more details on how to work with batched results.\n-\n-The output per record contains the following fields:\n-name: The record\'s fully qualified dotted name.\n-value: The record\'s value. This is the same as GETting `@registry/name`.\n-\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/registry_get_list.req\n-\n-Example Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/registry_get_list.resp\n-   :language: http\n-\n-\n-Updating registry records\n--------------------------\n-\n-Updating an existing record:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/registry_update.req\n-\n-Example Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/registry_update.resp\n-   :language: http\n\\ No newline at end of file\ndiff --git a/docs/source/roles.md b/docs/source/roles.md\nnew file mode 100644\nindex 000000000..bef2a6029\n--- /dev/null\n+++ b/docs/source/roles.md\n@@ -0,0 +1,22 @@\n+# Roles\n+\n+Available roles in a Plone site can be queried by interacting with the `/@roles` endpoint on the portal root.\n+This action requires an authenticated user.\n+\n+\n+## List Roles\n+\n+To retrieve a list of all roles in the portal, call the `/@roles` endpoint with a `GET` request:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/roles.req\n+```\n+\n+The server will respond with a list of all roles in the portal:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/roles.resp\n+:language: http\n+```\n+\n+The role `title` is the translated role title as displayed in Plone\'s {guilabel}`Users and Groups` control panel.\ndiff --git a/docs/source/roles.rst b/docs/source/roles.rst\ndeleted file mode 100644\nindex cef253192..000000000\n--- a/docs/source/roles.rst\n+++ /dev/null\n@@ -1,20 +0,0 @@\n-Roles\n-=====\n-\n-Available roles in a Plone site can be queried by interacting with the ``/@roles`` endpoint on portal root (requires an authenticated user):\n-\n-List Roles\n-----------\n-\n-To retrieve a list of all roles in the portal, call the ``/@roles`` endpoint with a ``GET`` request:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/roles.req\n-\n-The server will respond with a list of all roles in the portal:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/roles.resp\n-   :language: http\n-\n-The role ``title`` is the translated role title as displayed in Plone\'s\n-"Users and Groups" control panel.\n\\ No newline at end of file\ndiff --git a/docs/source/searching.md b/docs/source/searching.md\nnew file mode 100644\nindex 000000000..b06d0f6e0\n--- /dev/null\n+++ b/docs/source/searching.md\n@@ -0,0 +1,194 @@\n+# Search\n+\n+Content in a Plone site can be searched for by invoking the `/@search` endpoint in any context:\n+\n+```http\n+GET /plone/@search HTTP/1.1\n+Accept: application/json\n+```\n+\n+A search is *contextual* by default.\n+In other words, it is bound to a specific context\xe2\x80\x94a *collection* in HTTP REST terms\xe2\x80\x94and searches within that collection and any sub-collections.\n+\n+A Plone site is also a collection.\n+We therefore have a global search by invoking the `/@search` endpoint on the site root.\n+We also have contextual searches by invoking that endpoint on any other context.\n+All searches use the same pattern.\n+\n+In terms of the resulting catalog query, this means that, by default, a search will be constrained by the path to the context on which it is invoked, unless you explicitly supply your own `path` query.\n+\n+Search results are represented similar to collections:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/search.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/search.resp\n+:language: http\n+```\n+\n+The default representation for search results is a summary that contains only the most basic information.\n+In order to return specific metadata columns, see the documentation of the `metadata_fields` parameter below.\n+\n+```{note}\n+A search invoked on a container will by default *include that container itself* as part of the search results.\n+This is the same behavior as displayed by [ZCatalog](https://zope.readthedocs.io/en/latest/zopebook/SearchingZCatalog.html), which is used internally.\n+If you add the query string parameter `path.depth=1` to your search, you will only get the *immediate* children of the container, and the container itself won\'t be part of the results.\n+See the Plone documentation on [searching for content within a folder](https://docs.plone.org/develop/plone/searching_and_indexing/query.html#searching-for-content-within-a-folder)\n+for more details.\n+```\n+\n+```{note}\n+Search results will be *batched* if the size of the resultset exceeds the batch size.\n+See {doc}`batching` for more details on how to work with batched results.\n+```\n+\n+```{warning}\n+The `@@search` view or the Plone `LiveSearch` widget are coded in a way that the `SearchableText` parameter is expanded by including a `*` wildcard at the end.\n+This is done to also match the partial results of the beginning of search terms.\n+The `plone.restapi` `@search` endpoint will not do that for you.\n+You will have to add it if you want to keep this feature.\n+```\n+\n+\n+## Query format\n+\n+Queries and query-wide options, such as `sort_on`, are submitted as query string parameters to the `/@search` request:\n+\n+```http\n+GET /plone/@search?SearchableText=lorem HTTP/1.1\n+```\n+\n+This is nearly identical to the way that queries are passed to the Plone `@@search` browser view, with only a few minor differences.\n+\n+For general information on how to query the Plone catalog, please refer to the [Plone Documentation on Querying](https://docs.plone.org/develop/plone/searching_and_indexing/query.html).\n+\n+\n+### Query options\n+\n+In case you want to supply query options to a query against a particular index, you will need to flatten the corresponding query dictionary and use a dotted notation to indicate nesting.\n+\n+For example, to specify the `depth` query option for a path query, the original query as a Python dictionary would look like this:\n+\n+```\n+query = {"path": {"query": "/folder1",\n+                  "depth": 2}}\n+```\n+\n+This dictionary will need to be flattened in dotted notation to pass it into a query string:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/search_options.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/search_options.resp\n+:language: http\n+```\n+\n+Again this is very similar to how [Record Arguments](https://zope.readthedocs.io/en/latest/zdgbook/ObjectPublishing.html#an-aggregator-in-detail-the-record-argument) are parsed by ZPublisher, except that you can omit the `:record` suffix.\n+\n+\n+### Restricting search to multiple paths\n+\n+To restrict a search to multiple paths, the original query as a Python dictionary would look like this, with an optional `depth` and `sort_on`:\n+\n+```\n+query = {"path": {"query": ("/folder", "/folder2"),\n+                  "depth": 2},\n+         "sort_on": "path"}\n+```\n+\n+This dictionary will need to be flattened in dotted notation to pass it into a query string.\n+To specify multiple paths, repeat the query string parameter.\n+The `requests` module will automatically do this for you if you pass it a list of values for a query string parameter.\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/search_multiple_paths.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/search_multiple_paths.resp\n+:language: http\n+```\n+\n+\n+### Data types in queries\n+\n+Because HTTP query strings contain no information about data types, any query string parameter value ends up as a string in the Zope request.\n+This means that for value types that are not strings, these data types need to be reconstructed on the server side in `plone.restapi`.\n+\n+For most index types, their query values, and query options, `plone.restapi` can handle this for you.\n+If you pass it `path.query=foo&path.depth=1`, it has the necessary knowledge about the `ExtendedPathIndex`\'s options to turn the string `1` for the `depth` argument back into an integer before passing the query on to the catalog.\n+\n+However, certain index types, such as a `FieldIndex`, may take arbitrary data types as query values.\n+In that case, `plone.restapi` cannot know to what data type to cast your query value.\n+You will need to specify it using ZPublisher type hints:\n+\n+```http\n+GET /plone/@search?numeric_field:int=42 HTTP/1.1\n+Accept: application/json\n+```\n+\n+Please refer to the [Documentation on Argument Conversion in ZPublisher](https://zope.readthedocs.io/en/latest/zdgbook/ObjectPublishing.html#argument-conversion) for details.\n+\n+\n+(retrieving-additional-metadata)=\n+\n+## Retrieving additional metadata\n+\n+By default, the results are represented as summaries that contain only the most basic information about the items, such as their URL and title.\n+If you need to retrieve additional metadata columns, you can do so by specifying the additional column names in the `metadata_fields` parameter:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/search_metadata_fields.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/search_metadata_fields.resp\n+:language: http\n+```\n+\n+The metadata from those columns will then be included in the results.\n+To specify multiple columns, repeat the query string parameter once for every column name.\n+The `requests` module will automatically do this for you if you pass it a list of values for a query string parameter.\n+\n+To retrieve all metadata columns that the catalog knows about, use `metadata_fields=_all`.\n+\n+```{note}\n+There is a difference between the full set of fields contained in an object and the set of all possible metadata columns that can be specified with `metadata_fields`.\n+In other words, using `metadata_fields=_all` will produce objects with a set of fields that is generally smaller than the set of fields produced by `fullobjects` (see next section).\n+Briefly, the fields in `metadata_fields=_all` are a subset of `fullobjects`.\n+A consequence of this is that certain fields can not be specifed with `metadata_fields`.\n+Doing so will result in a TypeError `"No converter for making <...> JSON compatible."`\n+In [ZCatalog](https://zope.readthedocs.io/en/latest/zopebook/SearchingZCatalog.html) terms, this reflects the difference between *catalog brains* and objects that have been *woken up*.\n+```\n+\n+\n+## Retrieving full objects\n+\n+If the data provided as metadata is not enough, you can retrieve search results as full serialized objects equivalent to what the resource `GET` request would produce.\n+\n+You do so by specifying the `fullobjects` parameter:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/search_fullobjects.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/search_fullobjects.resp\n+:language: http\n+```\n+\n+```{warning}\n+Be aware that this might induce performance issues when retrieving a lot of resources.\n+Normally the search just serializes catalog brains, but with `fullobjects`, we wake up all the returned objects.\n+```\n+\n+\n+## Restrict search results to Plone\'s search settings\n+\n+By default, the search endpoint does not exclude any types from its results.\n+To allow the search to follow Plone\'s search settings schema, pass the `use_site_search_settings=1` to the `@search` endpoint request.\n+By doing this, the search results will be filtered based on the defined types to be searched, and will be sorted according to the default sorting order.\ndiff --git a/docs/source/searching.rst b/docs/source/searching.rst\ndeleted file mode 100644\nindex 0dc7b5145..000000000\n--- a/docs/source/searching.rst\n+++ /dev/null\n@@ -1,169 +0,0 @@\n-Search\n-======\n-\n-Content in a Plone site can be searched for by invoking the ``/@search`` endpoint on any context:\n-\n-.. code-block:: http\n-\n-    GET /plone/@search HTTP/1.1\n-    Accept: application/json\n-\n-A search is **contextual** by default, i.e. it is bound to a specific context (a *collection* in HTTP REST terms) and searches within that collection and any sub-collections.\n-\n-Since a Plone site is also a collection, we therefore have a global search (by invoking the ``/@search`` endpoint on the site root) and contextual searches (by invoking that endpoint on any other context) all using the same pattern.\n-\n-In terms of the resulting catalog query this means that, by default, a search will be constrained by the path to the context it\'s invoked on, unless you explicitly supply your own ``path`` query.\n-\n-Search results are represented similar to collections:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/search.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/search.resp\n-   :language: http\n-\n-The default representation for search results is a summary that contains only the most basic information.\n-In order to return specific metadata columns, see the documentation of the ``metadata_fields`` parameter below.\n-\n-.. note::\n-        A search invoked on a container will by default **include that container\n-        itself** as part of the search results. This is the same behavior as displayed by\n-        `ZCatalog <https://zope.readthedocs.io/en/latest/zopebook/SearchingZCatalog.html>`_, which is used internally.\n-        If you add the query string\n-        parameter ``path.depth=1`` to your search, you will only get **immediate**\n-        children of the container, and the container itself also won\'t be part\n-        of the results. See the Plone docs on\n-        `searching for content within a folder <https://docs.plone.org/develop/plone/searching_and_indexing/query.html#searching-for-content-within-a-folder>`_\n-        for more details.\n-\n-.. note::\n-        Search results will be **batched** if the size of the\n-        resultset exceeds the batch size. See :doc:`./batching` for more\n-        details on how to work with batched results.\n-\n-.. warning::\n-        The @@search view or the Plone LiveSearch widget are coded in a way that the SearchableText parameter is expanded by including a * wildcard at the end.\n-        This is done in order to match also the partial results of the beginning of a search term(s).\n-        The plone.restapi @search endpoint will not do that for you. You\'ll have to add it if you want to keep this feature.\n-\n-Query format\n-------------\n-\n-Queries and query-wide options (like ``sort_on``) are submitted as query string parameters to the ``/@search`` request:\n-\n-.. code-block:: http\n-\n-    GET /plone/@search?SearchableText=lorem HTTP/1.1\n-\n-This is nearly identical to the way that queries are passed to the Plone ``@@search`` browser view, with only a few minor differences.\n-\n-For general information on how to query the Plone catalog, please refer to the `Plone Documentation on Querying <https://docs.plone.org/develop/plone/searching_and_indexing/query.html>`_.\n-\n-Query options\n-^^^^^^^^^^^^^\n-\n-In case you want to supply query options to a query against a particular index, you\'ll need to flatten the corresponding query dictionary and use a dotted notation to indicate nesting.\n-\n-For example, to specify the ``depth`` query option for a path query, the original query as a Python dictionary would look like this::\n-\n-    query = {\'path\': {\'query\': \'/folder1\',\n-                      \'depth\': 2}}\n-\n-This dictionary will need to be flattened in dotted notation in order to pass it in a query string:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/search_options.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_options.resp\n-   :language: http\n-\n-Again, this is very similar to how `Record Arguments <https://zope.readthedocs.io/en/latest/zdgbook/ObjectPublishing.html#an-aggregator-in-detail-the-record-argument>`_ are parsed by ZPublisher, except that you can omit the ``:record`` suffix.\n-\n-\n-Restricting search to multiple paths\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-To restrict search to multiple paths, the original query as a Python dictionary would look like this (with an optional depth and sort_on)::\n-\n-    query = {\'path\': {\'query\': (\'/folder\', \'/folder2\'),\n-                      \'depth\': 2},\n-             \'sort_on\': \'path\'}\n-\n-This dictionary will need to be flattened in dotted notation in order to pass it in a query string. In order to specify multiple paths, simply repeat the query string parameter (the ``requests`` module will do this automatically for you if you pass it a list of values for a query string parameter).\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/search_multiple_paths.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_multiple_paths.resp\n-   :language: http\n-\n-\n-Data types in queries\n-^^^^^^^^^^^^^^^^^^^^^\n-\n-Because HTTP query strings contain no information about data types, any query string parameter value ends up as a string in the Zope request.\n-This means that for value types that aren\'t string these data types need to be reconstructed on the server side in plone.restapi.\n-\n-For most index types and their query values and query options plone.restapi can handle this for you.\n-If you pass it ``path.query=foo&path.depth=1``, it has the necessary knowledge about the ``ExtendedPathIndex``\'s options to turn the string ``1`` for the ``depth`` argument back into an integer before passing the query on to the catalog.\n-\n-However, certain index types (a ``FieldIndex`` for example) may take arbitrary data types as query values.\n-In that case, ``plone.restapi`` simply can\'t know what data type to cast your query value to and you\'ll need to specify it using ZPublisher type hints:\n-\n-.. code-block:: http\n-\n-    GET /plone/@search?numeric_field:int=42 HTTP/1.1\n-    Accept: application/json\n-\n-\n-Please refer to the `Documentation on Argument Conversion in ZPublisher <https://zope.readthedocs.io/en/latest/zdgbook/ObjectPublishing.html#argument-conversion>`_ for details.\n-\n-.. _retrieving-additional-metadata:\n-\n-Retrieving additional metadata\n-------------------------------\n-\n-By default, the results are represented as summaries that only contain the most basic information about the items, like their URL and title.\n-If you need to retrieve additional metadata columns, you can do so by specifying the additional column names in the ``metadata_fields`` parameter:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/search_metadata_fields.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_metadata_fields.resp\n-   :language: http\n-\n-The metadata from those columns will then be included in the results.\n-In order to specify multiple columns, simply repeat the query string parameter once for every column name (the ``requests`` module will do this automatically for you if you pass it a list of values for a query string parameter).\n-\n-In order to retrieve all metadata columns that the catalog knows about, use ``metadata_fields=_all``.\n-\n-.. note::\n-        There is a difference between the full set of fields contained in an object and the set of all possible metadata columns that can be specified with ``metadata_fields``.\n-        In other words, using ``metadata_fields=_all`` will produce objects with a set of fields that is generally smaller than the set of fields produced by ``fullobjects`` (see next section).\n-        Briefly, the fields in ``metadata_fields=_all`` are a subset of ``fullobjects``.\n-        A consequence of this is that certain fields can not be specifed with ``metadata_fields``.\n-        Doing so will result in a TypeError ``"No converter for making <...> JSON compatible."``\n-        In `ZCatalog <https://zope.readthedocs.io/en/latest/zopebook/SearchingZCatalog.html>`_ terms, this reflects the difference between *catalog brains* and objects that have been *woken up*.\n-\n-\n-Retrieving full objects\n------------------------\n-\n-If the data provided as metadata is not enough, you can retrieve search results as full serialized objects equivalent to what the resource GET request would produce.\n-\n-You do so by specifying the ``fullobjects`` parameter:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/search_fullobjects.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_fullobjects.resp\n-   :language: http\n-\n-.. warning::\n-\n-    Be aware that this might induce performance issues when retrieving a lot of resources. Normally the search just serializes catalog brains, but with ``fullobjects``, we wake up all the returned objects.\n-\n-\n-Restrict search results to Plone\'s search settings\n---------------------------------------------------\n-By default the search endpoint is not excluding any types from its results. To allow the search to follow Plone\'s search settings schema, pass the ``use_site_search_settings=1`` to the ``@search`` endpoint request. By doing this, the search results will be filtered based on the defined types to be searched and will be sorted according to the default sorting order.\ndiff --git a/docs/source/serialization.md b/docs/source/serialization.md\nnew file mode 100644\nindex 000000000..ae67b19b4\n--- /dev/null\n+++ b/docs/source/serialization.md\n@@ -0,0 +1,234 @@\n+# Serialization\n+\n+Throughout the REST API, content needs to be serialized and deserialized to and from JSON representations.\n+\n+In general, the format used for serializing content when reading from the API is the same as is used to submit content to the API for writing.\n+\n+\n+## Basic Types\n+\n+Basic Python data types that have a corresponding type in JSON, such as integers or strings, will be translated between the Python type and the respective JSON type.\n+\n+\n+## Dates and Times\n+\n+Since JSON does not have native support for dates and times, the Python and Zope `datetime` types will be serialized to an ISO 8601 date string.\n+\n+| Python                               | JSON                    |\n+| ------------------------------------ | ----------------------- |\n+| `time(19, 45, 55)`                   | `"19:45:55"`            |\n+| `date(2015, 11, 23)`                 | `"2015-11-23"`          |\n+| `datetime(2015, 11, 23, 19, 45, 55)` | `"2015-11-23T19:45:55"` |\n+| `DateTime("2015/11/23 19:45:55")`    | `"2015-11-23T19:45:55"` |\n+\n+\n+## RichText fields\n+\n+RichText fields will be serialized as follows:\n+\n+A `RichTextValue` such as the following:\n+\n+```python\n+RichTextValue(u\'<p>Hall\xc3\xb6chen</p>\',\n+              mimeType=\'text/html\',\n+              outputMimeType=\'text/html\')\n+```\n+\n+\xe2\x80\xa6will be serialized to:\n+\n+```json\n+{\n+  "data": "<p>Hall\\u00f6chen</p>",\n+  "content-type": "text/html",\n+  "encoding": "utf-8"\n+}\n+```\n+\n+\n+## File / Image Fields\n+\n+\n+### Download (serialization)\n+\n+For download, a file field will be serialized to a mapping that contains the file\'s most basic metadata, and a hyperlink that the client can follow to download the file:\n+\n+```json\n+{\n+  "...": "",\n+  "@type": "File",\n+  "title": "My file",\n+  "file": {\n+    "content-type": "application/pdf",\n+    "download": "http://localhost:55001/plone/file/@@download/file",\n+    "filename": "file.pdf",\n+    "size": 74429\n+  }\n+}\n+```\n+\n+That URL in the `download` property points to the regular Plone download view.\n+The client can send a `GET` request to that URL with an `Accept` header containing the MIME type indicated in the `content-type` property, and will get a response containing the file.\n+\n+Image fields are serialized in the same way, except that their serialization contains their `width` and `height`, and an additional property `scales` that contains a mapping with the available image scales.\n+Image URLs are created using the UID-based URL that changes each time the image is modified, allowing these URLs to be properly cached:\n+\n+```json\n+{\n+  "icon": {\n+    "download": "http://localhost:55001/plone/image/@@images/8eed3f80-5e1f-4115-85b8-650a10a6ca84.png",\n+    "height": 32,\n+    "width": 24\n+  },\n+  "large": {\n+    "download": "http://localhost:55001/plone/image/@@images/0d1824d1-2672-4b62-9277-aeb220d3bf15.png",\n+    "height": 768,\n+    "width": 576\n+  },\n+  "..." : {}\n+}\n+```\n+\n+### Upload (deserialization)\n+\n+For file or image fields, the client must provide the file\'s data as a mapping containing the file data and some additional metadata:\n+\n+- `data` - the base64-encoded contents of the file\n+- `encoding` - the encoding you used to encode the data, usually `base64`\n+- `content-type` - the MIME type of the file\n+- `filename` - the name of the file, including its extension\n+\n+```json\n+{\n+  "...": "",\n+  "@type": "File",\n+  "title": "My file",\n+  "file": {\n+    "data": "TG9yZW0gSXBzdW0uCg==",\n+    "encoding": "base64",\n+    "filename": "lorem.txt",\n+    "content-type": "text/plain"\n+  }\n+}\n+```\n+\n+\n+## Relations\n+\n+\n+### Serialization\n+\n+A `RelationValue` will be serialized to a short summary representation of the referenced object:\n+\n+```json\n+{\n+  "@id": "http://nohost/plone/doc1",\n+  "@type": "DXTestDocument",\n+  "title": "Document 1",\n+  "description": "Description"\n+}\n+```\n+\n+The `RelationList` containing that reference will be represented as a list in JSON.\n+\n+\n+### Deserialization\n+\n+In order to set a relation when creating or updating content, you can use one of several ways to specify relations:\n+\n+- UID\n+- path\n+- URL\n+- intid\n+\n+\n+Specify relations by UID:\n+\n+```json\n+{\n+  "relatedItems": [\n+    "158e5361282647e39bf0698fe238814b",\n+    "5597250bda4b41eab6ed37cd25fb0979"\n+  ]\n+}\n+```\n+\n+Specify relations by path:\n+\n+```json\n+{\n+  "relatedItems": ["/page1", "/page2"]\n+}\n+```\n+\n+Specify relations by URL:\n+\n+```json\n+{\n+  "relatedItems": [\n+    "http://localhost:8080/Plone/page1",\n+    "http://localhost:8080/Plone/page2"\n+  ]\n+}\n+```\n+\n+Specify relations by intid:\n+\n+```json\n+{\n+  "relatedItems": [347127075, 347127076]\n+}\n+```\n+\n+\n+## Next, Previous, and Parent Navigation\n+\n+The response body of a `GET` request contains three attributes that allow navigating to the parent and to the next and previous sibling in the container in which the current document is located.\n+\n+\n+### Parent\n+\n+The `parent` attribute points to the parent container of the current content object:\n+\n+```json\n+{\n+  "parent": {\n+    "@id": "http://nohost/plone/folder-with-items",\n+    "@type": "Folder",\n+    "title": "Folder with items",\n+    "description": "This is a folder with two documents"\n+  }\n+}\n+```\n+\n+\n+### Previous Item\n+\n+The `previous_item` attribute points to the sibling that is located before the current element in the parent container.\n+Plone uses the `getObjectPositionInParent` attribute to sort content objects within a folderish container:\n+\n+```json\n+{\n+  "previous_item": {\n+    "@id": "http://nohost/plone/folder-with-items/item-1",\n+    "@type": "Document",\n+    "title": "Item 1",\n+    "description": "This the previous item"\n+  }\n+}\n+```\n+\n+### Next Item\n+\n+The `next_item` attribute points to the sibling that is located after the current element in the parent container.\n+Plone uses the `getObjectPositionInParent` attribute to sort content objects within a folderish container):\n+\n+```json\n+{\n+  "next_item": {\n+    "@id": "http://nohost/plone/folder-with-items/item-2",\n+    "@type": "Document",\n+    "title": "Item 2",\n+    "description": "This the next item"\n+  }\n+}\n+```\ndiff --git a/docs/source/serialization.rst b/docs/source/serialization.rst\ndeleted file mode 100644\nindex bb6a1bc43..000000000\n--- a/docs/source/serialization.rst\n+++ /dev/null\n@@ -1,248 +0,0 @@\n-Serialization\n-=============\n-\n-Throughout the REST API, content needs to be serialized and deserialized to and from JSON representations.\n-\n-In general, the format used for serializing content when reading from the API is the same as is used to submit content to the API for writing.\n-\n-Basic Types\n------------\n-\n-Basic Python data types that have a corresponding type in JSON, like integers or strings, will simply be translated between the Python type and the respective JSON type.\n-\n-Dates and Times\n----------------\n-\n-Since JSON doesn\'t have native support for dates/times, the Python/Zope datetime types will be serialized to an ISO 8601 datestring.\n-\n-======================================= ======================================\n-Python                                  JSON\n-======================================= ======================================\n-``time(19, 45, 55)``                    ``\'19:45:55\'``\n-``date(2015, 11, 23)``                  ``\'2015-11-23\'``\n-``datetime(2015, 11, 23, 19, 45, 55)``  ``\'2015-11-23T19:45:55\'``\n-``DateTime(\'2015/11/23 19:45:55\')``     ``\'2015-11-23T19:45:55\'``\n-======================================= ======================================\n-\n-\n-RichText fields\n----------------\n-\n-RichText fields will be serialized as follows:\n-\n-A ``RichTextValue`` like\n-\n-.. code-block:: python\n-\n-    RichTextValue(u\'<p>Hall\xc3\xb6chen</p>\',\n-                  mimeType=\'text/html\',\n-                  outputMimeType=\'text/html\')\n-\n-will be serialized to\n-\n-.. code-block:: json\n-\n-    {\n-      "data": "<p>Hall\\u00f6chen</p>",\n-      "content-type": "text/html",\n-      "encoding": "utf-8"\n-    }\n-\n-File / Image Fields\n--------------------\n-\n-Download (serialization)\n-^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-For download, a file field will be serialized to a mapping that contains the\n-file\'s most basic metadata, and a hyperlink that the client can follow to\n-download the file:\n-\n-.. code-block:: json\n-\n-      {\n-        "...": "",\n-        "@type": "File",\n-        "title": "My file",\n-        "file": {\n-          "content-type": "application/pdf",\n-          "download": "http://localhost:55001/plone/file/@@download/file",\n-          "filename": "file.pdf",\n-          "size": 74429\n-        }\n-      }\n-\n-That URL in the ``download`` property points to the regular Plone download\n-view. The client can send a ``GET`` request to that URL with an ``Accept``\n-header containing the MIME type indicated in the ``content-type`` property,\n-and will get a response containing the file.\n-\n-Image fields are serialized in the same way, except that their serialization\n-contains their ``width`` and ``height``, and an additional property\n-``scales`` that contains a mapping with the available image scales.\n-Image URLs are created using the UID-based URL that changes each time the image\n-is modified, so these URLs can be properly cached:\n-\n-.. code-block:: json\n-\n-    {\n-      "icon": {\n-        "download": "http://localhost:55001/plone/image/@@images/8eed3f80-5e1f-4115-85b8-650a10a6ca84.png",\n-        "height": 32,\n-        "width": 24\n-      },\n-      "large": {\n-        "download": "http://localhost:55001/plone/image/@@images/0d1824d1-2672-4b62-9277-aeb220d3bf15.png",\n-        "height": 768,\n-        "width": 576\n-      },\n-      "..." : {}\n-    }\n-\n-\n-Upload (deserialization)\n-^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-For file or image fields, the client must provide the file\'s data as a mapping\n-containg the file data and some additional metadata:\n-\n-- ``data`` - the base64 encoded contents of the file\n-- ``encoding`` - the encoding you used to encode the data, so usually `base64`\n-- ``content-type`` - the MIME type of the file\n-- ``filename`` - the name of the file, including extension\n-\n-.. code-block:: json\n-\n-      {\n-        "...": "",\n-        "@type": "File",\n-        "title": "My file",\n-        "file": {\n-            "data": "TG9yZW0gSXBzdW0uCg==",\n-            "encoding": "base64",\n-            "filename": "lorem.txt",\n-            "content-type": "text/plain"}\n-      }\n-\n-\n-Relations\n----------\n-\n-Serialization\n-^^^^^^^^^^^^^\n-\n-A ``RelationValue`` will be serialized to a short summary representation of the referenced object:\n-\n-.. code-block:: json\n-\n-    {\n-      "@id": "http://nohost/plone/doc1",\n-      "@type": "DXTestDocument",\n-      "title": "Document 1",\n-      "description": "Description"\n-    }\n-\n-The ``RelationList`` containing that reference will be represended as a list in JSON.\n-\n-Deserialization\n-^^^^^^^^^^^^^^^\n-\n-In order to set a relation when creating or updating content, you can use one\n-of several ways to specify relations:\n-\n-- UID\n-- path\n-- URL\n-- intid\n-\n-Specify relations by UID:\n-\n-.. code-block:: json\n-\n-  {\n-    "relatedItems": [\n-      "158e5361282647e39bf0698fe238814b",\n-      "5597250bda4b41eab6ed37cd25fb0979"\n-    ]\n-  }\n-\n-Specify relations by path:\n-\n-.. code-block:: json\n-\n-  {\n-    "relatedItems": ["/page1", "/page2"]\n-  }\n-\n-Specify relations by URL:\n-\n-.. code-block:: json\n-\n-  {\n-    "relatedItems": [\n-      "http://localhost:8080/Plone/page1",\n-      "http://localhost:8080/Plone/page2"\n-    ]\n-  }\n-\n-Specify relations by intid:\n-\n-.. code-block:: json\n-\n-  {\n-    "relatedItems": [347127075, 347127076]\n-  }\n-\n-Next/Previous/Parent Navigation\n--------------------------------\n-\n-The response body of a GET request contains three attributes that allows navigating to the parent and the next and previous sibling in the container the current document is located.\n-\n-Parent\n-^^^^^^\n-\n-The "parent" attribute points to the parent container of the current content object.\n-\n-.. code-block:: json\n-\n-  {\n-    "parent": {\n-      "@id": "http://nohost/plone/folder-with-items", \n-      "@type": "Folder", \n-      "title": "Folder with items",\n-      "description": "This is a folder with two documents", \n-    }\n-  }\n-\n-Previous Item\n-^^^^^^^^^^^^^\n-\n-The "previous_item" attribute points to the sibling that is located before the current element in the parent container (Plone uses the getObjectPositionInParent attribute to sort content objects within a folderish container).\n-\n-.. code-block:: json\n-\n-  {\n-    "previous_item": {\n-      "@id": "http://nohost/plone/folder-with-items/item-1", \n-      "@type": "Document",\n-      "title": "Item 1",\n-      "description": "This the previous item"\n-    }\n-  }\n-\n-Next Item\n-^^^^^^^^^\n-\n-The "next_item" attribute points to the sibling that is located after the current element in the parent container (Plone uses the getObjectPositionInParent attribute to sort content objects within a folderish container).\n-\n-.. code-block:: json\n-\n-  {\n-    "next_item": {\n-      "@id": "http://nohost/plone/folder-with-items/item-2", \n-      "@type": "Document",\n-      "title": "Item 2",\n-      "description": "This the next item"\n-    }\n-  }\n-\ndiff --git a/docs/source/sharing.md b/docs/source/sharing.md\nnew file mode 100644\nindex 000000000..611c9911c\n--- /dev/null\n+++ b/docs/source/sharing.md\n@@ -0,0 +1,80 @@\n+(sharing)=\n+\n+# Sharing\n+\n+Plone comes with a sophisticated user management system that allows an administrator to assign users and groups with global roles and permissions.\n+Sometimes this in not enough though and you might want to give users the permission to access or edit a specific part of your website or a specific content object.\n+This is where local roles, located in the Plone {guilabel}`Sharing` tab, come in handy.\n+\n+\n+## Retrieving Local Roles\n+\n+In `plone.restapi`, the representation of any content object will include a hypermedia link to the local role and sharing information in the `sharing` attribute:\n+\n+```http\n+GET /plone/folder HTTP/1.1\n+Accept: application/json\n+```\n+\n+```\n+HTTP 200 OK\n+content-type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/folder",\n+  "@type": "Folder",\n+\n+  "more attributes": "...",\n+\n+  "sharing": {\n+    "@id": "http://localhost:55001/plone/folder/@sharing",\n+    "title": "Sharing",\n+  }\n+}\n+```\n+\n+The sharing information of a content object can also be directly accessed by appending `/@sharing` to the `GET` request to the URL of a content object.\n+For example, to access the sharing information for a top-level folder, do the following.\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/sharing_folder_get.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/sharing_folder_get.resp\n+:language: http\n+```\n+\n+The `available_roles` property contains the list of roles that can be managed via the sharing page.\n+It contains dictionaries with the role ID and its translated `title` as it appears on the sharing page.\n+\n+\n+## Searching for principals\n+\n+Users or groups without a sharing entry can be found by appending the argument `search` to the query string, in other words, `?search=admin`.\n+Global roles are marked with the string `global`.\n+Inherited roles are marked with the string `acquired`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/sharing_search.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/sharing_search.resp\n+:language: http\n+```\n+\n+\n+## Updating Local Roles\n+\n+You can update the sharing information by sending a `POST` request to the object URL and appending `/@sharing`, for example, `/plone/folder/@sharing`.\n+Say you want to give the `AuthenticatedUsers` group the `Reader` local role for a folder:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/sharing_folder_post.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/sharing_folder_post.resp\n+:language: http\n+```\ndiff --git a/docs/source/sharing.rst b/docs/source/sharing.rst\ndeleted file mode 100644\nindex d83b87b8a..000000000\n--- a/docs/source/sharing.rst\n+++ /dev/null\n@@ -1,69 +0,0 @@\n-.. _sharing:\n-\n-Sharing\n-=======\n-\n-Plone comes with a sophisticated user management system that allows to assign users and groups with global roles and permissions. Sometimes this in not enough though and you might want to give users the permission to access or edit a specific part of your website or a specific content object. This is where local roles (located in the Plone sharing tab) come in handy.\n-\n-\n-Retrieving Local Roles\n-----------------------\n-\n-In plone.restapi, the representation of any content object will include a hypermedia link to the local role / sharing information in the ``sharing`` attribute:\n-\n-.. code-block:: http\n-\n-  GET /plone/folder HTTP/1.1\n-  Accept: application/json\n-\n-.. code::\n-\n-  HTTP 200 OK\n-  content-type: application/json\n-\n-  {\n-    "@id": "http://localhost:55001/plone/folder",\n-    "@type": "Folder",\n-    ...\n-    "sharing": {\n-      "@id": "http://localhost:55001/plone/folder/@sharing",\n-      "title": "Sharing",\n-    }\n-  }\n-\n-The sharing information of a content object can also be directly accessed by appending ``/@sharing`` to the GET request to the URL of a content object. E.g. to access the sharing information for a top-level folder, do:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/sharing_folder_get.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/sharing_folder_get.resp\n-   :language: http\n-\n-The ``available_roles`` property contains the list of roles that can be\n-managed via the sharing page. It contains dictionaries with the role ID and\n-its translated ``title`` (as it appears on the sharing page).\n-\n-\n-Searching for principals\n-------------------------\n-\n-Users and/or groups without a sharing entry can be found by appending the argument ``search`` to the query string. ie ``?search=admin``.\n-Global roles are marked with the string ``"global"``. Inherited roles are marked with the string ``"acquired"``.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/sharing_search.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/sharing_search.resp\n-   :language: http\n-\n-\n-Updating Local Roles\n---------------------\n-\n-You can update the \'sharing\' information by sending a POST request to the object URL and appending ``/@sharing``, e.g. ``/plone/folder/@sharing``. E.g. say you want to give the ``AuthenticatedUsers`` group the ``Reader`` local role for a folder:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/sharing_folder_post.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/sharing_folder_post.resp\n-   :language: http\ndiff --git a/docs/source/system.md b/docs/source/system.md\nnew file mode 100644\nindex 000000000..d163df533\n--- /dev/null\n+++ b/docs/source/system.md\n@@ -0,0 +1,35 @@\n+(system)=\n+\n+# System\n+\n+The `@system` endpoint exposes system information about the Plone backend.\n+\n+Send a `GET` request to the `@system` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/system_get.req\n+```\n+\n+The response will contain the system information:\n+\n+```http\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@system",\n+  "cmf_version": "2.4.2",\n+  "debug_mode": "No",\n+  "pil_version": "6.2.1 (Pillow)",\n+  "plone_gs_metadata_version_file_system": "5208",\n+  "plone_gs_metadata_version_installed": "5208",\n+  "plone_version": "5.2.1",\n+  "python_version": "3.7.7 (default, Mar 10 2020, 15:43:33) \\n[Clang 11.0.0 (clang-1100.0.33.17)]",\n+  "zope_version": "4.1.3"\n+}\n+```\n+\n+```{note}\n+The system endpoint is protected by the `plone.app.controlpanel.Overview` permission that requires the Site Administrator or Manager role.\n+```\ndiff --git a/docs/source/system.rst b/docs/source/system.rst\ndeleted file mode 100644\nindex 9a0342894..000000000\n--- a/docs/source/system.rst\n+++ /dev/null\n@@ -1,31 +0,0 @@\n-.. _system:\n-\n-System\n-======\n-\n-The `@system` endpoint exposes system information about the Plone backend.\n-\n-Send a GET request to the `@system` endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/system_get.req\n-\n-The response will contain the system information::\n-\n-  HTTP/1.1 200 OK\n-  Content-Type: application/json\n-\n-  {\n-    "@id": "http://localhost:55001/plone/@system",\n-    "cmf_version": "2.4.2",\n-    "debug_mode": "No",\n-    "pil_version": "6.2.1 (Pillow)",\n-    "plone_gs_metadata_version_file_system": "5208",\n-    "plone_gs_metadata_version_installed": "5208",\n-    "plone_version": "5.2.1",\n-    "python_version": "3.7.7 (default, Mar 10 2020, 15:43:33) \\n[Clang 11.0.0 (clang-1100.0.33.17)]",\n-    "zope_version": "4.1.3"\n-  }\n-\n-\n-.. note:: The system endpoint is protected by the ``plone.app.controlpanel.Overview`` permission that requires the site-administrator or manager role.\n\\ No newline at end of file\ndiff --git a/docs/source/tiles.md b/docs/source/tiles.md\nnew file mode 100644\nindex 000000000..0d32a7aa9\n--- /dev/null\n+++ b/docs/source/tiles.md\n@@ -0,0 +1,85 @@\n+# Tiles\n+\n+```{warning}\n+The tiles endpoint is deprecated and will be removed in `plone.restapi` 9.\n+```\n+\n+```{note}\n+The tiles endpoint currently matches only partially, specifically the `GET` endpoints, the default Plone implementation.\n+```\n+\n+A tile in Plone is an HTML snippet that can contain arbitrary content, such as text, images, or videos.\n+\n+\n+## Listing available tiles\n+\n+```{note}\n+This endpoint currently does not return any data.\n+The functionality needs to be implemented.\n+```\n+\n+List all available tiles types by sending a `GET` request to the `@tiles` endpoint on the portal root:\n+\n+```\n+GET /plone/@tiles HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+```\n+\n+The server responds with a {term}`200 OK` status and lists all available tiles:\n+\n+```\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+[\n+  {\n+    "@id": "http://localhost:55001/plone/@tiles/title",\n+    "title": "Title tile",\n+    "description": "A field tile that will show the title of the content object",\n+  },\n+  {\n+    "@id": "http://localhost:55001/plone/@tiles/description",\n+    "title": "Description tile",\n+    "description": "A field tile that will show the description of the content object",\n+  },\n+]\n+```\n+\n+\n+## Retrieve JSON schema of an individual tile\n+\n+```{note}\n+This endpoint currently does not return any data.\n+The functionality needs to be implemented.\n+```\n+\n+Retrieve the JSON schema of a specific tile by calling the `@tiles` endpoint with the ID of the tile:\n+\n+```\n+GET /plone/@tiles/title HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+```\n+\n+The server responds with a JSON schema definition for that particular tile:\n+\n+```\n+HTTP/1.1 200 OK\n+Content-Type: application/json+schema\n+\n+{\n+  "properties": {\n+    "title": {\n+      "description": "",\n+      "title": "Title",\n+      "type": "string"\n+    },\n+    ...\n+  },\n+  "required": [\n+    "title",\n+  ],\n+  "title": "Title Tile",\n+  "type": "object"\n+}\n+```\ndiff --git a/docs/source/tiles.rst b/docs/source/tiles.rst\ndeleted file mode 100644\nindex cb3cde18d..000000000\n--- a/docs/source/tiles.rst\n+++ /dev/null\n@@ -1,74 +0,0 @@\n-Tiles\n-=====\n-\n-.. warning::\n-   The tiles endpoint is deprecated and will be removed in plone.restapi 9.\n-\n-.. note::\n-  The tiles endpoint currently match only partially (the GET endpoints) the default Plone implementation.\n-\n-A tile in Plone is an HTML snippet that can contain arbitrary content (e.g. text, images, videos).\n-\n-\n-Listing available tiles\n------------------------\n-\n-.. note::\n-  This endpoint currently does not return any data. The functionality needs to be implemented.\n-\n-List all available tiles type by sending a GET request to the @tiles endpoint on the portal root::\n-\n-  GET /plone/@tiles HTTP/1.1\n-  Accept: application/json\n-  Authorization: Basic YWRtaW46c2VjcmV0\n-\n-The server responds with a `Status 200` and list all available tiles::\n-\n-  HTTP/1.1 200 OK\n-  Content-Type: application/json\n-  [\n-    {\n-      "@id": "http://localhost:55001/plone/@tiles/title",\n-      "title": "Title tile",\n-      "description": "A field tile that will show the title of the content object",\n-    },\n-    {\n-      "@id": "http://localhost:55001/plone/@tiles/description",\n-      "title": "Description tile",\n-      "description": "A field tile that will show the description of the content object",\n-    },\n-  ]\n-\n-\n-Retrieve JSON schema of an individual tile\n-------------------------------------------\n-\n-.. note::\n-  This endpoint currently does not return any data. The functionality needs to be implemented.\n-\n-Retrieve the JSON schema of a specific tile by calling the \'@tiles\' endpoint with the id of the tile::\n-\n-  GET /plone/@tiles/title HTTP/1.1\n-  Accept: application/json\n-  Authorization: Basic YWRtaW46c2VjcmV0\n-\n-The server responds with a JSON schema definition for that particular tile::\n-\n-  HTTP/1.1 200 OK\n-  Content-Type: application/json+schema\n-\n-  {\n-    "properties": {\n-      "title": {\n-        "description": "",\n-        "title": "Title",\n-        "type": "string"\n-      },\n-      ...\n-    },\n-    "required": [\n-      "title",\n-    ],\n-    "title": "Title Tile",\n-    "type": "object"\n-  }\ndiff --git a/docs/source/translations.md b/docs/source/translations.md\nnew file mode 100644\nindex 000000000..8ae4ceb68\n--- /dev/null\n+++ b/docs/source/translations.md\n@@ -0,0 +1,121 @@\n+(translations)=\n+\n+# Translations\n+\n+```{note}\n+This is only available on Plone 5.\n+```\n+\n+Since Plone 5, the product [`plone.app.multilingual`](https://pypi.org/project/plone.app.multilingual/) is included in the base Plone installation.\n+It is not enabled by default.\n+\n+Site interface texts include the configuration menus, error messages, information messages, and other static text.\n+Multilingualism in Plone not only allows the managers of the site to configure the site interface texts to be in one language or another, but also to configure Plone to handle multilingual content.\n+To achieve that, Plone provides the user interface for managing content translations.\n+\n+You can get additional information about the multilingual capabilities of Plone in the [documentation](https://docs.plone.org/develop/plone/i18n/translating_content.html).\n+\n+In connection with those capabilities, `plone.restapi` provides a `@translations` endpoint to handle the translation information of the content objects.\n+\n+Once we have installed `plone.app.multilingual` and enabled more than one language, we can link two content items of different languages to be the translation of each other issuing a `POST` query to the `@translations` endpoint, including the `id` of the content to which it should be linked.\n+The `id` of the content must be a full URL of the content object:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translations_post.req\n+```\n+\n+```{note}\n+`id` is a required field, and needs to point to existing content on the site.\n+```\n+\n+The API will return a {term}`201 Created` response, if the linking was successful:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/translations_post.resp\n+:language: http\n+```\n+\n+We can also use the object\'s path to link the translation instead of the full URL:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples//translations_post_by_id.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples//translations_post_by_id.resp\n+:language: http\n+```\n+\n+We can also use the object\'s UID to link the translation:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples//translations_post_by_uid.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples//translations_post_by_id.resp\n+:language: http\n+```\n+\n+After linking the contents, we can get the list of the translations of that content item by issuing a `GET` request on the `@translations` endpoint of that content item:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translations_get.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/translations_get.resp\n+:language: http\n+```\n+\n+To unlink the content, issue a `DELETE` request on the `@translations` endpoint of the content item, and provide the language code you want to unlink:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translations_delete.req\n+```\n+\n+```{note}\n+`language` is a required field.\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/translations_delete.resp\n+:language: http\n+```\n+\n+\n+## Creating a translation from an existing content\n+\n+The `POST` content endpoint to a folder is also capable of linking this new content with an\n+exising translation using two parameters: `translationOf` and `language`.\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translations_link_on_post.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/translations_link_on_post.resp\n+:language: http\n+```\n+\n+\n+## Get location in the tree for new translations\n+\n+When you create a translation in Plone, there are policies in place for finding a suitable placement for it.\n+This endpoint returns the proper placement for the newly created translation:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translation_locator.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/translation_locator.resp\n+:language: http\n+```\n+\n+\n+## Expansion\n+\n+This endpoint can be used with the {doc}`expansion` mechanism which allows getting additional information about a content item in one query, avoiding unnecessary requests.\n+\n+If a simple `GET` request is done on the content item, a new entry will be shown on the `@components` entry, with the URL of the `@translations` endpoint:\ndiff --git a/docs/source/translations.rst b/docs/source/translations.rst\ndeleted file mode 100644\nindex 9ffaa4e39..000000000\n--- a/docs/source/translations.rst\n+++ /dev/null\n@@ -1,125 +0,0 @@\n-.. _`translations`:\n-\n-Translations\n-============\n-\n-.. note::\n-    This is only available on Plone 5.\n-\n-Since Plone 5 the product `plone.app.multilingual`_ is included in the base\n-Plone installation although it is not enabled by default.\n-\n-Multilingualism in Plone not only allows the managers of the site to configure\n-the site interface texts to be in one language or another (such as the\n-configuration menus, error messages, information messages or other static\n-text) but also to configure Plone to handle multilingual content. To achieve\n-that it provides the user interface for managing content translations.\n-\n-You can get additional information about the multilingual capabilities of Plone\n-in the `documentation`_.\n-\n-In connection with that capabilities, plone.restapi provides a `@translations`\n-endpoint to handle the translation information of the content objects.\n-\n-Once we have installed `plone.app.multilingual`_ and enabled more than one\n-language we can link two content-items of different languages to be the\n-translation of each other issuing a `POST` query to the `@translations`\n-endpoint including the `id` of the content which should be linked to. The\n-`id` of the content must be a full URL of the content object:\n-\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/translations_post.req\n-\n-\n-.. note::\n-    "id" is a required field and needs to point to an existing content on the site.\n-\n-The API will return a `201 Created` response if the linking was successful.\n-\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translations_post.resp\n-   :language: http\n-\n-\n-We can also use the object\'s path to link the translation instead of the full URL:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples//translations_post_by_id.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples//translations_post_by_id.resp\n-   :language: http\n-\n-\n-We can also use the object\'s UID to link the translation:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples//translations_post_by_uid.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples//translations_post_by_id.resp\n-   :language: http\n-\n-\n-After linking the contents we can get the list of the translations of that\n-content item by issuing a ``GET`` request on the `@translations` endpoint of\n-that content item.:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/translations_get.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translations_get.resp\n-   :language: http\n-\n-\n-To unlink the content, issue a ``DELETE`` request on the `@translations`\n-endpoint of the content item and provide the language code you want to unlink.:\n-\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/translations_delete.req\n-\n-.. note::\n-    "language" is a required field.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translations_delete.resp\n-   :language: http\n-\n-Creating a translation from an existing content\n------------------------------------------------\n-\n-The POST content endpoint to a folder is capable also of linking this new content with an\n-exising translation using two parameters: ``translationOf`` and ``language``.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/translations_link_on_post.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translations_link_on_post.resp\n-   :language: http\n-\n-Get location in the tree for new translations\n----------------------------------------------\n-\n-When you create a translation in Plone, there are policies in place for finding a suitable\n-placement for it. This endpoint returns the proper placement for the newly going to be\n-created translation.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/translation_locator.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translation_locator.resp\n-   :language: http\n-\n-Expansion\n----------\n-\n-This endpoint can be used with the :ref:`expansion name` mechanism which allows to get additional\n-information about a content item in one query, avoiding unnecesary requests.\n-\n-If a simple ``GET`` request is done on the content item, a new entry will be shown on the `@components`\n-entry with the URL of the `@translations` endpoint:\n-\n-\n-\n-.. _`plone.app.multilingual`: https://pypi.org/project/plone.app.multilingual/\n-.. _`Products.LinguaPlone`: https://pypi.python.org/pypi/Products.LinguaPlone.\n-.. _`documentation`: https://docs.plone.org/develop/plone/i18n/translating_content.html\ndiff --git a/docs/source/tusupload.md b/docs/source/tusupload.md\nnew file mode 100644\nindex 000000000..34629c946\n--- /dev/null\n+++ b/docs/source/tusupload.md\n@@ -0,0 +1,150 @@\n+# TUS resumable upload\n+\n+`plone.restapi` supports the [TUS Open Protocol](https://tus.io/) for resumable file uploads.\n+There is a `@tus-upload` endpoint to upload a file, and a `@tus-replace` endpoint to replace an existing file.\n+\n+\n+## Creating an Upload URL\n+\n+```{note}\n+`POST` requests to the `@tus-upload` endpoint are allowed on all `IFolderish` content types, for example, `Folder`.\n+```\n+\n+To create a new upload, send a `POST` request to the `@tus-upload` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/tusupload_post.req\n+```\n+\n+The server will return a temporary upload URL in the `Location` header of the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusupload_post.resp\n+:language: http\n+```\n+\n+The file can then be uploaded in the next step to that temporary URL.\n+\n+\n+## Uploading a File\n+\n+```{note}\n+PATCH requests to the `@tus-upload` endpoint are allowed on all IContentish content types.\n+```\n+\n+Once a temporary upload URL has been created, a client can send a `PATCH` request to upload a file.\n+The file content should be sent in the body of the request:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusupload_patch_finalized.req\n+:language: http\n+```\n+\n+When just a single file is uploaded at once, the server will respond with a {term}`204 No Content` response after a successful upload.\n+The HTTP `Location` header contains he URL of the newly created content object:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusupload_patch_finalized.resp\n+:language: http\n+```\n+\n+\n+## Partial Upload\n+\n+TUS allows partial upload of files.\n+A partial file is also uploaded by sending a `PATCH` request to the temporary URL:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusupload_patch.req\n+:language: http\n+```\n+\n+The server will also respond with a {term}`204 No content` response.\n+Though instead of providing the final file URL in the `Location` header, the server provides an updated `Upload-Offset` value, telling the client the new offset:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusupload_patch.resp\n+:language: http\n+```\n+\n+When the last partial file has been uploaded, the server will contain the final file URL in the `Location` header.\n+\n+## Replacing Existing Files\n+\n+TUS can also be used to replace an existing file by sending a `POST` request to the `@tus-replace` endpoint instead:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusreplace_post.req\n+:language: http\n+```\n+\n+The server will respond with a {term}`201 Created` status and return the URL of the temporarily created upload resource in the `Location` header of the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusupload_post.resp\n+:language: http\n+```\n+\n+The file can then be uploaded to that URL using the `PATCH` method in the same way as creating a new file:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusreplace_patch.req\n+:language: http\n+```\n+\n+The server will respond with a {term}`204 No Content` response and the final file URL in the HTTP `Location` header:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusreplace_patch.resp\n+:language: http\n+```\n+\n+\n+## Asking for the Current File Offset\n+\n+To ask the server for the current file offset, the client can send a `HEAD` request to the upload URL:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/tusupload_head.req\n+```\n+\n+The server will respond with a {term}`200 OK` status and the current file offset in the `Upload-Offset` header:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusupload_head.resp\n+:language: http\n+```\n+\n+\n+## Configuration and Options\n+\n+The current TUS configuration and a list of supported options can be retrieved sending an `OPTIONS` request to the `@tus-upload` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/tusupload_options.req\n+```\n+\n+The server will respond with a {term}`204 No content` status and HTTP headers containing information about the available extensions and the TUS version:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/tusupload_options.resp\n+:language: http\n+```\n+\n+\n+## CORS Configuration\n+\n+If you use CORS and want to make it work with TUS, you have to make sure the TUS-specific HTTP headers are allowed by your CORS policy:\n+\n+```xml\n+<plone:CORSPolicy\n+  allow_origin="http://localhost"\n+  allow_methods="DELETE,GET,OPTIONS,PATCH,POST,PUT"\n+  allow_credentials="true"\n+  allow_headers="Accept,Authorization,Origin,X-Requested-With,Content-Type,Upload-Length,Upload-Offset,Tus-Resumable,Upload-Metadata,Lock-Token"\n+  expose_headers="Upload-Offset,Location,Upload-Length,Tus-Version,Tus-Resumable,Tus-Max-Size,Tus-Extension,Upload-Metadata"\n+  max_age="3600"\n+  />\n+```\n+\n+See the `plone.rest` documentation for more information on how to configure CORS policies.\n+\n+See <https://tus.io/protocols/resumable-upload.html#headers> for a list and description of the individual headers.\n+\n+\n+## Temporary Upload Directory\n+\n+During upload, files are stored in a temporary directory that by default is located in the `CLIENT_HOME` directory.\n+If you are using a multi ZEO client setup without session stickiness you *must* configure this to a directory shared by all ZEO clients by setting the `TUS_TMP_FILE_DIR` environment variable, for example `TUS_TMP_FILE_DIR=/tmp/tus-uploads`.\ndiff --git a/docs/source/tusupload.rst b/docs/source/tusupload.rst\ndeleted file mode 100644\nindex 15457ec31..000000000\n--- a/docs/source/tusupload.rst\n+++ /dev/null\n@@ -1,143 +0,0 @@\n-TUS resumable upload\n-====================\n-\n-plone.restapi supports the `TUS Open Protocol <https://tus.io/>`_ for resumable file uploads.\n-There is a `@tus-upload` endpoint to upload a file and a `@tus-replace` endpoint to replace an existing file.\n-\n-\n-Creating an Upload URL\n-----------------------\n-\n-.. note:: POST requests to the `@tus-upload` endpoint are allowed on all IFolderish content types (e.g. Folder).\n-\n-To create a new upload, send a POST request to the `@tus-upload` endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/tusupload_post.req\n-\n-The server will return a temporary upload URL in the location header of the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_post.resp\n-   :language: http\n-\n-The file can then be uploaded in the next step to that temporary URL.\n-\n-\n-Uploading a File\n-----------------\n-\n-.. note:: PATCH requests to the `@tus-upload` endpoint are allowed on all IContentish content types.\n-\n-Once a temporary upload URL has been created, a client can send a PATCH request to upload a file. The file content should be send in the body of the request:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_patch_finalized.req\n-   :language: http\n-\n-When just a single file is uploaded at once, the server will respond with a `204: No Content` response after a successful upload.\n-The HTTP location header contains he URL of the newly created content object:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_patch_finalized.resp\n-   :language: http\n-\n-\n-Partial Upload\n---------------\n-\n-TUS allows partial upload of files.\n-A partial file is also uploaded by sending a PATCH request to the temporary URL:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_patch.req\n-   :language: http\n-\n-The server will also respond with a `204: No content` response.\n-Though, instead of providing the final file URL in the \'location\' header, the server provides an updated \'Upload-Offset\' value, to tell the client the new offset:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_patch.resp\n-   :language: http\n-\n-When the last partial file has been uploaded, the server will contain the final file URL in the \'location\' header.\n-\n-\n-Replacing Existing Files\n-------------------------\n-\n-TUS can also be used to replace an existing file by sending a POST request to the `@tus-replace` endpoint instead.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusreplace_post.req\n-   :language: http\n-\n-The server will respond with a `201: Created` status and return the URL of the temprorary created upload resource\n-in the location header of the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_post.resp\n-   :language: http\n-\n-The file can then be uploaded to that URL using the PATCH method in the same way as creating a new file:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusreplace_patch.req\n-   :language: http\n-\n-The server will respond with a `204: No Content` response and the final file URL in the HTTP location header:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusreplace_patch.resp\n-   :language: http\n-\n-\n-Asking for the Current File Offset\n-----------------------------------\n-\n-To ask the server for the current file offset, the client can send a HEAD request to the upload URL:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/tusupload_head.req\n-\n-The server will respond with a `200: Ok` status and the current file offset in the \'Upload-Offset\' header:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_head.resp\n-   :language: http\n-\n-\n-Configuration and Options\n--------------------------\n-\n-The current TUS configuration and a list of supported options can be retrieved sending an OPTIONS request to the `@tus-upload` endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/tusupload_options.req\n-\n-The server will respond with a `204: No content` status and HTTP headers containing information about the available extentions and the TUS version:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/tusupload_options.resp\n-   :language: http\n-\n-\n-CORS Configuration\n-------------------\n-\n-If you use CORS and want to make it work with TUS, you have to make sure the TUS specific HTTP headers are allowed by your CORS policy.\n-\n-.. code-block:: xml\n-\n-  <plone:CORSPolicy\n-    allow_origin="http://localhost"\n-    allow_methods="DELETE,GET,OPTIONS,PATCH,POST,PUT"\n-    allow_credentials="true"\n-    allow_headers="Accept,Authorization,Origin,X-Requested-With,Content-Type,Upload-Length,Upload-Offset,Tus-Resumable,Upload-Metadata,Lock-Token"\n-    expose_headers="Upload-Offset,Location,Upload-Length,Tus-Version,Tus-Resumable,Tus-Max-Size,Tus-Extension,Upload-Metadata"\n-    max_age="3600"\n-    />\n-\n-See the plone.rest documentation for more information on how to configure CORS policies.\n-\n-See https://tus.io/protocols/resumable-upload.html#headers for a list and description of the individual headers.\n-\n-\n-Temporary Upload Directory\n---------------------------\n-\n-During upload files are stored in a temporary directory that by default is located in the `CLIENT_HOME` directory.\n-If you are using a multi ZEO client setup without session stickiness you *must* configure this to a directory shared\n-by all ZEO clients by setting the `TUS_TMP_FILE_DIR` environment variable. E.g. ``TUS_TMP_FILE_DIR=/tmp/tus-uploads``\n-\n-\n-\ndiff --git a/docs/source/types-schema.md b/docs/source/types-schema.md\nnew file mode 100644\nindex 000000000..ffaba84a0\n--- /dev/null\n+++ b/docs/source/types-schema.md\n@@ -0,0 +1,499 @@\n+(types-schema)=\n+\n+# Types Schema\n+\n+The following is a detailed list of all available [Zope Schema](https://zopeschema.readthedocs.io/en/latest/) field types and their corresponding representation as [JSON Schema](https://json-schema.org/).\n+\n+\n+## TextLine\n+\n+Zope Schema:\n+\n+```python\n+zope.schema.TextLine(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+    default=u\'foobar\'\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'string\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'default\': u\'foobar\',\n+}\n+```\n+\n+\n+## Text\n+\n+Zope Schema:\n+\n+```\n+zope.schema.Text(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+    default=u\'Lorem ipsum dolor sit amet\',\n+    min_length=10,\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'string\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'widget\': \'textarea\',\n+    \'default\': u\'Lorem ipsum dolor sit amet\',\n+    \'minLength\': 10,\n+}\n+```\n+\n+\n+## Bool\n+\n+Zope Schema:\n+\n+```\n+zope.schema.Bool(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+    default=False,\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'boolean\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'default\': False,\n+}\n+```\n+\n+\n+## Float\n+\n+Zope Schema:\n+\n+```\n+zope.schema.Float(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+    min=0.0,\n+    max=1.0,\n+    default=0.5,\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'minimum\': 0.0,\n+    \'maximum\': 1.0,\n+    \'type\': \'number\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'default\': 0.5,\n+}\n+```\n+\n+\n+## Decimal\n+\n+Zope Schema:\n+\n+```\n+zope.schema.Decimal(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+    min=Decimal(0),\n+    max=Decimal(1),\n+    default=Decimal(0.5),\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'minimum\': 0.0,\n+    \'maximum\': 1.0,\n+    \'type\': \'number\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'default\': 0.5,\n+},\n+```\n+\n+\n+## Int\n+\n+Zope Schema:\n+\n+```\n+zope.schema.Int(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+    min=0,\n+    max=100,\n+    default=50,\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'minimum\': 0,\n+    \'maximum\': 100,\n+    \'type\': \'integer\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'default\': 50,\n+}\n+```\n+\n+\n+## Choice\n+\n+Zope Schema:\n+\n+```\n+zope.schema.Choice(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+    vocabulary=self.dummy_vocabulary,\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'string\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'enum\': [\'foo\', \'bar\'],\n+    \'enumNames\': [\'Foo\', \'Bar\'],\n+    \'choices\': [(\'foo\', \'Foo\'), (\'bar\', \'Bar\')],\n+}\n+```\n+\n+\n+## List\n+\n+Zope Schema:\n+\n+```\n+zope.schema.List(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+    min_length=1,\n+    value_type=schema.TextLine(\n+        title=u\'Text\',\n+        description=u\'Text field\',\n+        default=u\'Default text\'\n+    ),\n+    default=[\'foobar\'],\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'array\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'default\': [\'foobar\'],\n+    \'minItems\': 1,\n+    \'uniqueItems\': False,\n+    \'additionalItems\': True,\n+    \'items\': {\n+        \'type\': \'string\',\n+        \'title\': u\'Text\',\n+        \'description\': u\'Text field\',\n+        \'default\': u\'Default text\',\n+    }\n+},\n+```\n+\n+\n+## Tuple\n+\n+Zope Schema:\n+\n+```\n+field = zope.schema.Tuple(\n+    title=u\'My field\',\n+    value_type=schema.Int(),\n+    default=(1, 2),\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'array\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'\',\n+    \'uniqueItems\': True,\n+    \'additionalItems\': True,\n+    \'items\': {\n+        \'title\': u\'\',\n+        \'description\': u\'\',\n+        \'type\': \'integer\',\n+    },\n+    \'default\': (1, 2),\n+}\n+```\n+\n+\n+## Set\n+\n+Zope Schema:\n+\n+```\n+field = zope.schema.Set(\n+    title=u\'My field\',\n+    value_type=schema.TextLine(),\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'array\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'\',\n+    \'uniqueItems\': True,\n+    \'additionalItems\': True,\n+    \'items\': {\n+        \'title\': u\'\',\n+        \'description\': u\'\',\n+        \'type\': \'string\',\n+    }\n+}\n+```\n+\n+\n+## List of Choices\n+\n+Zope Schema:\n+\n+```\n+field = zope.schema.List(\n+    title=u\'My field\',\n+    value_type=schema.Choice(\n+        vocabulary=self.dummy_vocabulary,\n+    ),\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'array\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'\',\n+    \'uniqueItems\': True,\n+    \'additionalItems\': True,\n+    \'items\': {\n+        \'title\': u\'\',\n+        \'description\': u\'\',\n+        \'type\': \'string\',\n+        \'enum\': [\'foo\', \'bar\'],\n+        \'enumNames\': [\'Foo\', \'Bar\'],\n+        \'choices\': [(\'foo\', \'Foo\'), (\'bar\', \'Bar\')],\n+    }\n+}\n+```\n+\n+\n+## Object\n+\n+Zope Schema:\n+\n+```\n+zope.schema.Object(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+    schema=IDummySchema,\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'object\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'properties\': {\n+        \'field1\': {\n+            \'title\': u\'Foo\',\n+            \'description\': u\'\',\n+            \'type\': \'boolean\'\n+        },\n+        \'field2\': {\n+            \'title\': u\'Bar\',\n+            \'description\': u\'\',\n+            \'type\': \'string\'\n+        },\n+    }\n+},\n+```\n+\n+\n+## RichText (`plone.app.textfield`)\n+\n+Zope Schema:\n+\n+```\n+from plone.app.textfield import RichText\n+field = RichText(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'string\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'widget\': \'richtext\',\n+}\n+```\n+\n+\n+## Date\n+\n+Zope Schema:\n+\n+```\n+zope.schema.Date(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+    default=date(2016, 1, 1),\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'string\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'default\': date(2016, 1, 1),\n+    \'widget\': u\'date\',\n+}\n+```\n+\n+\n+## DateTime\n+\n+Zope Schema:\n+\n+```\n+zope.schema.Datetime(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'string\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'widget\': u\'datetime\',\n+}\n+```\n+\n+\n+## Email\n+\n+Zope Schema:\n+\n+```\n+plone.schema.Email(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'string\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'widget\': u\'email\',\n+}\n+```\n+\n+\n+## Password\n+\n+Zope Schema:\n+\n+```\n+zope.schema.Password(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'string\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'widget\': u\'password\',\n+}\n+```\n+\n+\n+## URI\n+\n+Zope Schema:\n+\n+```\n+zope.schema.URI(\n+    title=u\'My field\',\n+    description=u\'My great field\',\n+)\n+```\n+\n+JSON Schema:\n+\n+```\n+{\n+    \'type\': \'string\',\n+    \'title\': u\'My field\',\n+    \'description\': u\'My great field\',\n+    \'widget\': u\'url\',\n+}\n+```\ndiff --git a/docs/source/types-schema.rst b/docs/source/types-schema.rst\ndeleted file mode 100644\nindex 44d614ea4..000000000\n--- a/docs/source/types-schema.rst\n+++ /dev/null\n@@ -1,445 +0,0 @@\n-.. _types-schema:\n-\n-Types Schema\n-============\n-\n-A detailed list of all available `Zope Schema <https://zopeschema.readthedocs.io/en/latest/>`_  field types and their corresponding representation as `JSON Schema <http://json-schema.org/>`_ .\n-\n-TextLine\n---------\n-\n-Zope Schema::\n-\n-    zope.schema.TextLine(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-        default=u\'foobar\'\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'string\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'default\': u\'foobar\',\n-    }\n-\n-\n-Text\n-----\n-\n-Zope Schema::\n-\n-    zope.schema.Text(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-        default=u\'Lorem ipsum dolor sit amet\',\n-        min_length=10,\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'string\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'widget\': \'textarea\',\n-        \'default\': u\'Lorem ipsum dolor sit amet\',\n-        \'minLength\': 10,\n-    }\n-\n-\n-Bool\n-----\n-\n-Zope Schema::\n-\n-    zope.schema.Bool(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-        default=False,\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'boolean\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'default\': False,\n-    }\n-\n-\n-Float\n------\n-\n-Zope Schema::\n-\n-    zope.schema.Float(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-        min=0.0,\n-        max=1.0,\n-        default=0.5,\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'minimum\': 0.0,\n-        \'maximum\': 1.0,\n-        \'type\': \'number\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'default\': 0.5,\n-    }\n-\n-\n-Decimal\n--------\n-\n-Zope Schema::\n-\n-    zope.schema.Decimal(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-        min=Decimal(0),\n-        max=Decimal(1),\n-        default=Decimal(0.5),\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'minimum\': 0.0,\n-        \'maximum\': 1.0,\n-        \'type\': \'number\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'default\': 0.5,\n-    },\n-\n-\n-Int\n----\n-\n-Zope Schema::\n-\n-    zope.schema.Int(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-        min=0,\n-        max=100,\n-        default=50,\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'minimum\': 0,\n-        \'maximum\': 100,\n-        \'type\': \'integer\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'default\': 50,\n-    }\n-\n-\n-Choice\n-------\n-\n-Zope Schema::\n-\n-    zope.schema.Choice(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-        vocabulary=self.dummy_vocabulary,\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'string\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'enum\': [\'foo\', \'bar\'],\n-        \'enumNames\': [\'Foo\', \'Bar\'],\n-        \'choices\': [(\'foo\', \'Foo\'), (\'bar\', \'Bar\')],\n-    }\n-\n-\n-List\n-----\n-\n-Zope Schema::\n-\n-    zope.schema.List(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-        min_length=1,\n-        value_type=schema.TextLine(\n-            title=u\'Text\',\n-            description=u\'Text field\',\n-            default=u\'Default text\'\n-        ),\n-        default=[\'foobar\'],\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'array\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'default\': [\'foobar\'],\n-        \'minItems\': 1,\n-        \'uniqueItems\': False,\n-        \'additionalItems\': True,\n-        \'items\': {\n-            \'type\': \'string\',\n-            \'title\': u\'Text\',\n-            \'description\': u\'Text field\',\n-            \'default\': u\'Default text\',\n-        }\n-    },\n-\n-\n-Tuple\n------\n-\n-Zope Schema::\n-\n-    field = zope.schema.Tuple(\n-        title=u\'My field\',\n-        value_type=schema.Int(),\n-        default=(1, 2),\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'array\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'\',\n-        \'uniqueItems\': True,\n-        \'additionalItems\': True,\n-        \'items\': {\n-            \'title\': u\'\',\n-            \'description\': u\'\',\n-            \'type\': \'integer\',\n-        },\n-        \'default\': (1, 2),\n-    }\n-\n-\n-Set\n----\n-\n-Zope Schema::\n-\n-    field = zope.schema.Set(\n-        title=u\'My field\',\n-        value_type=schema.TextLine(),\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'array\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'\',\n-        \'uniqueItems\': True,\n-        \'additionalItems\': True,\n-        \'items\': {\n-            \'title\': u\'\',\n-            \'description\': u\'\',\n-            \'type\': \'string\',\n-        }\n-    }\n-\n-\n-List of Choices\n----------------\n-\n-Zope Schema::\n-\n-    field = zope.schema.List(\n-        title=u\'My field\',\n-        value_type=schema.Choice(\n-            vocabulary=self.dummy_vocabulary,\n-        ),\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'array\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'\',\n-        \'uniqueItems\': True,\n-        \'additionalItems\': True,\n-        \'items\': {\n-            \'title\': u\'\',\n-            \'description\': u\'\',\n-            \'type\': \'string\',\n-            \'enum\': [\'foo\', \'bar\'],\n-            \'enumNames\': [\'Foo\', \'Bar\'],\n-            \'choices\': [(\'foo\', \'Foo\'), (\'bar\', \'Bar\')],\n-        }\n-    }\n-\n-\n-Object\n-------\n-\n-Zope Schema::\n-\n-    zope.schema.Object(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-        schema=IDummySchema,\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'object\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'properties\': {\n-            \'field1\': {\n-                \'title\': u\'Foo\',\n-                \'description\': u\'\',\n-                \'type\': \'boolean\'\n-            },\n-            \'field2\': {\n-                \'title\': u\'Bar\',\n-                \'description\': u\'\',\n-                \'type\': \'string\'\n-            },\n-        }\n-    },\n-\n-\n-RichText (plone.app.textfield)\n-------------------------------\n-\n-Zope Schema::\n-\n-    from plone.app.textfield import RichText\n-    field = RichText(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'string\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'widget\': \'richtext\',\n-    }\n-\n-\n-Date\n-----\n-\n-Zope Schema::\n-\n-    zope.schema.Date(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-        default=date(2016, 1, 1),\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'string\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'default\': date(2016, 1, 1),\n-        \'widget\': u\'date\',\n-    }\n-\n-\n-DateTime\n---------\n-\n-Zope Schema::\n-\n-    zope.schema.Datetime(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'string\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'widget\': u\'datetime\',\n-    }\n-\n-\n-Email\n------\n-\n-Zope Schema::\n-\n-    plone.schema.Email(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'string\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'widget\': u\'email\',\n-    }\n-\n-\n-Password\n---------\n-\n-Zope Schema::\n-\n-    zope.schema.Password(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'string\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'widget\': u\'password\',\n-    }\n-\n-\n-URI\n----\n-\n-Zope Schema::\n-\n-    zope.schema.URI(\n-        title=u\'My field\',\n-        description=u\'My great field\',\n-    )\n-\n-JSON Schema::\n-\n-    {\n-        \'type\': \'string\',\n-        \'title\': u\'My field\',\n-        \'description\': u\'My great field\',\n-        \'widget\': u\'url\',\n-    }\ndiff --git a/docs/source/types.md b/docs/source/types.md\nnew file mode 100644\nindex 000000000..75f2ed688\n--- /dev/null\n+++ b/docs/source/types.md\n@@ -0,0 +1,237 @@\n+(types)=\n+\n+# Types\n+\n+```{note}\n+These docs are generated by code tests, therefore you will see some `test` content types appear here.\n+```\n+\n+Available content types in a Plone site can be listed and queried by accessing the `/@types` endpoint on any context.\n+Access requires an authenticated user.\n+The `addable` key specifies if the content type can be added to the current context.\n+The `layouts` key specifies the defined views:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types.resp\n+:language: http\n+```\n+\n+The API consumer can create, read, update, and delete a content types schema.\n+\n+| Verb    | URL              | Action                                             |\n+| ------- | ---------------- | -------------------------------------------------- |\n+| `POST`  | `/@types/{type}` | Add field/fieldset to content type schema          |\n+| `GET`   | `/@types/{type}` | Get the schema of a content type                   |\n+| `PATCH` | `/@types/{type}` | Update existing schema fields/fieldsets properties |\n+| `PUT`   | `/@types/{type}` | Replace content-type schema                        |\n+\n+In addition to the above methods we can also do:\n+\n+| Verb     | URL                              | Action                            |\n+| -------- | -------------------------------- | --------------------------------- |\n+| `GET`    | `/@type/{type}/{field/fieldset}` | Get field/fieldset properties     |\n+| `PATCH`  | `/@type/{type}/{field/fieldset}` | Update field/fieldset properties  |\n+| `DELETE` | `/@type/{type}/{field/fieldset}` | Remove field/fieldset from schema |\n+\n+```{note}\n+Schema fields and fieldsets defined by [behaviors](https://docs.plone.org/external/plone.app.dexterity/docs/behaviors/index.html) are immutable and can NOT be changed via this RestAPI endpoint.\n+See {ref}`dexterity-types` control panel RestAPI endpoint for enabling and disabling behaviors.\n+```\n+\n+\n+## Add schema fieldset or field with `POST`\n+\n+To create a new *fieldset*, send a `POST` request to the `/@types/Document` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_post_fieldset.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_post_fieldset.resp\n+:language: http\n+```\n+\n+To create a new *field*, send a `POST` request to the `/@types/Document` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_post_field.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_post_field.resp\n+:language: http\n+```\n+\n+For a complete list of available field `@types`, you can access `/@vocabularies/Fields` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_fields.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/vocabularies_get_fields.resp\n+:language: http\n+```\n+\n+\n+## Get the schema with `GET`\n+\n+To get the schema of a content type, access the `/@types` endpoint with the name of the content type, for example, `plone/@types/Document`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document.resp\n+:language: http\n+```\n+\n+The content type schema uses the [JSON Schema](http://json-schema.org/) format.\n+The tagged values for the widgets are also exposed in the `properties` attribute of the schema.\n+\n+For `Choice` fields, their vocabulary or source will be linked to in a `vocabulary` or `querysource` property (one or the other, never both):\n+\n+- If a `querysource` property is included, that field is backed by an `IQuerysource`.\n+  In that case, the source\'s terms can\'t be enumerated.\n+  The terms need to be *queried* by issuing a request to the linked endpoint and including the user\'s search terms in the `?query=` parameter.\n+- If a `vocabulary` property is included, the field is backed by a vocabulary or another kind of iterable source.\n+  The terms can then be *enumerated* by issuing a request to the linked endpoint.\n+\n+See {ref}`vocabularies` for details on these endpoints.\n+\n+See {ref}`types-schema` for a detailed documentation about the available field types.\n+\n+To get one schema **fieldset** properties, access `@types/Document/{fieldset}` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_get_fieldset.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_get_fieldset.resp\n+:language: http\n+```\n+\n+To get one schema *field* properties, access `@types/Document/{field}` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_get_field.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_get_field.resp\n+:language: http\n+```\n+\n+\n+## Update schema with `PATCH`\n+\n+To update content type schema defaults, we send a `PATCH` request to the server.\n+`PATCH` allows to provide just a subset of the resource, that is, the values you actually want to change.\n+\n+To update one or more schema *field* properties:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_patch_properites.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_patch_properites.resp\n+:language: http\n+```\n+\n+To change one or more *fieldset* properties:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_patch_fieldsets.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_patch_fieldsets.resp\n+:language: http\n+```\n+\n+To update one *fieldset* settings, we can also send a `PATCH` request to `@types/Document/{fieldset}` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_patch_fieldset.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_patch_fieldset.resp\n+:language: http\n+```\n+\n+To update one *field* settings, we can also send a `PATCH` request to `@types/Document/{field}` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_patch_field.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_patch_field.resp\n+:language: http\n+```\n+\n+\n+## Update schema with `PUT`\n+\n+Use `PUT` when more changes are needed in one call, such as creating new fields or fieldsets, moving fields to a fieldset, removing multiple fields, and so on:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_put.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_put.resp\n+:language: http\n+```\n+\n+\n+## Removing schema field/fieldset with `DELETE`\n+\n+Delete an existing schema *field* by sending a `DELETE` request to the URL of an existing schema field:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_delete_field.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_delete_field.resp\n+:language: http\n+```\n+\n+Delete an existing schema *fieldset* by sending a `DELETE` request to the URL of an existing schema fieldset:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_delete_fieldset.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/types_document_delete_fieldset.resp\n+:language: http\n+```\ndiff --git a/docs/source/types.rst b/docs/source/types.rst\ndeleted file mode 100644\nindex 8451dc69a..000000000\n--- a/docs/source/types.rst\n+++ /dev/null\n@@ -1,204 +0,0 @@\n-.. _types:\n-\n-Types\n-=====\n-\n-.. note::\n-    These docs are generated by code tests, therefore you will see some \'test\' contenttypes appear here.\n-\n-Available content types in a Plone site can be listed and queried by accessing the ``/@types`` endpoint on any context (requires an authenticated user). The \'addable\' key specifies if the content type can be added to the current context. The \'layouts\' key specifies the defined views.\n-\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types.resp\n-   :language: http\n-\n-\n-The API consumer can create, read, update, and delete a content-types schema.\n-\n-======= =============================================== =====================================================================\n-Verb    URL                                             Action\n-======= =============================================== =====================================================================\n-POST    ``/@types/{type}``                              Add field/fieldset to content type schema\n-GET     ``/@types/{type}``                              Get the schema of a content type\n-PATCH   ``/@types/{type}``                              Update existing schema fields/fieldsets properties\n-PUT     ``/@types/{type}``                              Replace content-type schema\n-======= =============================================== =====================================================================\n-\n-In addition to the above methods we can also do:\n-\n-======= =============================================== =====================================================================\n-Verb    URL                                             Action\n-======= =============================================== =====================================================================\n-GET     ``/@type/{type}/{field/fieldset}``              Get field/fieldset properties\n-PATCH   ``/@type/{type}/{field/fieldset}``              Update field/fieldset properties\n-DELETE  ``/@type/{type}/{field/fieldset}``              Remove field/fieldset from schema\n-======= =============================================== =====================================================================\n-\n-.. note::\n-\n-  Schema fields/fieldsets defined by `behaviors <https://docs.plone.org/external/plone.app.dexterity/docs/behaviors/index.html>`_\n-  are immutable and can NOT be changed via this RestAPI endpoint. See :ref:`dexterity-types` controlpanel RestAPI endpoint\n-  for enabling/disabling behaviors.\n-\n-\n-Add schema fieldset/field with POST\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-To create a new **fieldset**, send a POST request to the ``/@types/Document`` endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_post_fieldset.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_post_fieldset.resp\n-   :language: http\n-\n-\n-To create a new **field**, send a POST request to the ``/@types/Document`` endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_post_field.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_post_field.resp\n-   :language: http\n-\n-For a complete list of available field **@types** you can access **/@vocabularies/Fields** endpoint.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_fields.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get_fields.resp\n-   :language: http\n-\n-Get the schema with GET\n-~~~~~~~~~~~~~~~~~~~~~~~\n-\n-To get the schema of a content type, access the ``/@types`` endpoint  with the name of the content type, e.g. ``plone/@types/Document``:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document.resp\n-   :language: http\n-\n-The content type schema uses the `JSON Schema <http://json-schema.org/>`_ format.\n-The tagged values for the widgets are also exposed in the the "properties" attribute of the schema.\n-\n-For ``Choice`` fields, their vocabulary or source will be linked to in a ``vocabulary`` or ``querysource`` property (one or the other, never both):\n-\n-\n-- If a ``querysource`` property is included, that field is backed by an ``IQuerysource``.\n-  In that case, the source\'s terms can\'t be enumerated, and the terms need to be **queried** by issuing a request to the linked endpoint and including the user\'s search terms in the ``?query=`` parameter.\n-- If a ``vocabulary`` property is included, the field is backed by a vocabulary or another kind of iterable source.\n-  The terms can then be **enumerated** by issuing a request to the linked endpoint.\n-\n-See :ref:`vocabularies` for details on these endpoints.\n-\n-See :ref:`types-schema` for a detailed documentation about the available field types.\n-\n-To get one schema **fieldset** properties, access ``@types/Document/{fieldset}`` endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_get_fieldset.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_get_fieldset.resp\n-   :language: http\n-\n-To get one schema **field** properties, access ``@types/Document/{field}`` endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_get_field.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_get_field.resp\n-   :language: http\n-\n-\n-Update schema with PATCH\n-~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-To update content type schema defaults we send a PATCH request to the server.\n-PATCH allows to provide just a subset of the resource (the values you actually want to change).\n-\n-To update one or more schema **field** properties:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_patch_properites.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_patch_properites.resp\n-   :language: http\n-\n-To change one or more **fieldsets** properties:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_patch_fieldsets.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_patch_fieldsets.resp\n-   :language: http\n-\n-\n-To update one **fieldset** settings, we can also send a PATCH request to ``@types/Document/{fieldset}`` endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_patch_fieldset.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_patch_fieldset.resp\n-   :language: http\n-\n-To update one **field** settings, we can also send a PATCH request to ``@types/Document/{field}`` endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_patch_field.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_patch_field.resp\n-   :language: http\n-\n-Update schema with PUT\n-~~~~~~~~~~~~~~~~~~~~~~\n-\n-Use PUT when more changes are needed in one call, like create new fields/fieldsets, move fields to fieldset, remove multiple fields, etc.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_put.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_put.resp\n-   :language: http\n-\n-Removing schema field/fieldset with DELETE\n-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-Delete an existing schema **field** by sending a DELETE request to the URL of an existing schema field:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_delete_field.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_delete_field.resp\n-   :language: http\n-\n-\n-Delete an existing schema **fieldset** by sending a DELETE request to the URL of an existing schema fieldset:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/types_document_delete_fieldset.req\n-\n-Response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_delete_fieldset.resp\n-   :language: http\ndiff --git a/docs/source/upgrade-guide.md b/docs/source/upgrade-guide.md\nnew file mode 100644\nindex 000000000..388445c0c\n--- /dev/null\n+++ b/docs/source/upgrade-guide.md\n@@ -0,0 +1,829 @@\n+# Upgrade Guide\n+\n+This upgrade guide lists all breaking changes in `plone.restapi`.\n+It explains the steps that are needed to upgrade to the latest version.\n+\n+\n+## Upgrading to `plone.restapi` 7.x\n+\n+The navigation endpoint has been refactored.\n+Now its behavior is consistent regarding the `items` attribute.\n+Now the `items` attribute is present, even if the element of the tree does not have child elements, in which case it will be an empty array.\n+This might affect some logins via JavaScript, specifically if the condition is checking for the existence of the `items` attribute and expects it to be `undefined`.\n+\n+\n+## Upgrading to `plone.restapi` 6.x\n+\n+`plone.restapi` 6.0.0 removes the `IAPIRequest` marker interface (<https://github.com/plone/plone.restapi/pull/819>).\n+\n+It also ships with a fix that prevents converting bytestring IDs to Unicode IDs when reordering on Python 2 (<https://github.com/plone/plone.restapi/issues/827>).\n+\n+All versions before `plone.restapi` 6.0.0 are potentially affected by this issue.\n+\n+You may be affected by this issue and should run the fix if:\n+\n+- You used the `PATCH` "ordering" functionality of `plone.restapi`\n+- Were using Python 2 at that point\n+- Are seeing issues with `objectIds()` returning mixed string types\n+\n+If you need to fix object IDs, you can do one of the following:\n+\n+- Use the browser view `@@plone-restapi-upgrade-fix-ordering` as a Manager to fix all folderish content types in your Plone site.\n+- Run the helper function `ensure_child_ordering_object_ids_are_native_strings` from `plone.restapi.upgrades.ordering` for all affected objects.\n+  You could do this in a custom upgrade step implemented in your policy.\n+\n+We expect that most content actually will not be affected.\n+See <https://github.com/plone/plone.restapi/issues/827> for more details.\n+\n+\n+## Upgrading to `plone.restapi` 5.x\n+\n+`plone.restapi` 5.0.0 introduces the following breaking change:\n+\n+- Rename `tiles` behavior and fields to `blocks` migration step. [timo, sneridagh] (#821)\n+\n+The `tiles` field has been renamed to `blocks`, and the `tiles_layout` field to `blocks_layout`. This changes the response format from:\n+\n+```json\n+{\n+  "@id": "http://localhost:55001/plone/my-document",\n+  "\xe2\x80\xa6",\n+  "tiles_layout": [\n+    "#title-1",\n+    "#description-1",\n+    "#image-1"\n+  ],\n+  "tiles": {\n+    "\xe2\x80\xa6"\n+  }\n+}\n+```\n+\n+to:\n+\n+```json\n+{\n+  "@id": "http://localhost:55001/plone/my-document",\n+  "\xe2\x80\xa6",\n+  "blocks_layout": [\n+    "#title-1",\n+    "#description-1",\n+    "#image-1"\n+  ],\n+  "blocks": {\n+    "\xe2\x80\xa6"\n+  }\n+}\n+```\n+\n+This change affects the `GET`, `PATCH`, and `POST` formats.\n+It should only affect you if you use Volto.\n+\n+\n+## Upgrading to `plone.restapi` 4.x\n+\n+`plone.restapi` 4.0.0 introduces the following breaking changes:\n+\n+1.  Fields with vocabularies now return the `token` and `title` instead of the stored value.\n+2.  Choice and list fields return a hyperlink to a vocabulary instead of `choices`, `enum`, and `enumNames`.\n+3.  Serialize widget parameters into a `widgetOptions` object instead of adding them to the top level of the schema property.\n+4.  The vocabularies endpoint does no longer returns an `@id` for terms, the results are batched, and terms are now listed as `items` instead of `terms` to match other batched responses.\n+\n+\n+### Serialization and Deserialization of fields with vocabularies\n+\n+The serialization of fields with vocabularies, such as `Choice`, now return the `token` and the `title` of the vocabulary term instead of the stored value.\n+This is allows displaying the term `title` without additionally querying the vocabulary.\n+However it is necessary to adapt existing client implementations.\n+\n+The date and time control panel previously returned a number for the `first_weekday` property:\n+\n+```json\n+{\n+  "@id": "http://localhost:55001/plone/@controlpanels/date-and-time",\n+  "data": {\n+      "\xe2\x80\xa6",\n+      "first_weekday": 0,\n+      "\xe2\x80\xa6"\n+  },\n+  "\xe2\x80\xa6",\n+}\n+```\n+\n+Now it returns an object with a `token` and a `title`:\n+\n+```json\n+{\n+  "@id": "http://localhost:55001/plone/@controlpanels/date-and-time",\n+  "data": {\n+      "\xe2\x80\xa6",\n+      "first_weekday": {\n+          "title": "Monday",\n+          "token": "0"\n+      },\n+      "\xe2\x80\xa6"\n+  },\n+  "\xe2\x80\xa6"\n+}\n+```\n+\n+Deserialization accepts objects that contain a token, but also just the token or the value.\n+\n+However, it is highly recommended to always use the token, as vocabulary terms may contain values that are not JSON serializable.\n+\n+\n+### Choice and List fields return link to vocabulary instead of the values\n+\n+Choice and List fields using named vocabularies are now serialized with a `vocabulary` property, giving the URL of the `@vocabularies` endpoint for the vocabulary instead of including `choices`,\n+`enum`, and `enumNames` inline.\n+\n+Old Response:\n+\n+```json\n+"choices": [\n+    [\n+        "de",\n+        "Deutsch"\n+    ],\n+    [\n+        "en",\n+        "English"\n+    ]\n+],\n+"enum": [\n+  "de",\n+  "en",\n+],\n+"enumNames": [\n+  "Deutsch",\n+  "English",\n+]\n+```\n+\n+New response:\n+\n+```json\n+"vocabulary": {\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.CaptchaVocabulary"\n+},\n+```\n+\n+\n+### Serialize widget parameters into a `widgetOptions` object\n+\n+Serialize widget parameters into a `widgetOptions` object instead of adding them to the top level of the schema property.\n+\n+Old response:\n+\n+```json\n+"vocabulary": "plone.app.vocabularies.Users"\n+```\n+\n+New response:\n+\n+```json\n+"widgetOptions": {\n+  "pattern_options": {\n+    "recentlyUsed": true\n+  },\n+  "vocabulary": { "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users" }\n+}\n+```\n+\n+\n+### Example: Vocabularies Subjects Field\n+\n+The `subjects` field is now serialized as an `array` of `string` items using the `plone.app.vocabularies.Keywords` vocabulary.\n+\n+Old response:\n+\n+```json\n+"subjects": {\n+  "choices": ["\xe2\x80\xa6"],\n+  "enum": ["\xe2\x80\xa6"],\n+  "enumNames": ["\xe2\x80\xa6"]\n+},\n+"type": "string"\n+```\n+\n+New response:\n+\n+```json\n+"additionalItems": true,\n+"type": "array",\n+"uniqueItems": true,\n+"widgetOptions": {\n+  "vocabulary": {\n+    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+  }\n+},\n+"items": {\n+  "description": "",\n+  "title": "",\n+  "type": "string"\n+}\n+```\n+\n+\n+### Example: Available Time Zones Field (vocabulary in `items`)\n+\n+Old response:\n+\n+```json\n+"available_timezones": {\n+  "additionalItems": true,\n+  "default": [],\n+  "description": "The timezones, which should be available for the portal. Can be set for users and events",\n+  "items": {\n+    "choices": [\n+      [\n+        "Africa/Abidjan",\n+        "Africa/Abidjan"\n+      ],\n+      [\n+        "Africa/Accra",\n+        "Africa/Accra"\n+      ],\n+      "\xe2\x80\xa6"\n+    ],\n+    "enum": [\n+      "\xe2\x80\xa6"\n+    ],\n+    "enumNames": [\n+      "\xe2\x80\xa6"\n+    ]\n+  },\n+  "title": "Available timezones",\n+  "type": "array",\n+  "uniqueItems": true\n+}\n+```\n+\n+New response:\n+\n+```json\n+"available_timezones": {\n+  "additionalItems": true,\n+  "default": [],\n+  "description": "The timezones, which should be available for the portal. Can be set for users and events",\n+  "items": {\n+    "description": "",\n+    "title": "",\n+    "type": "string",\n+    "vocabulary": {\n+      "@id": "http://localhost:8080/Plone/@vocabularies/plone.app.vocabularies.Timezones"\n+    }\n+  },\n+  "title": "Available timezones",\n+  "type": "array",\n+  "uniqueItems": true\n+},\n+```\n+\n+\n+### Example: Weekday Field (vocabulary in main property)\n+\n+Old response:\n+\n+```json\n+"first_weekday": {\n+  "choices": [\n+    [\n+      "0",\n+      "Monday"\n+    ],\n+    [\n+      "1",\n+      "Tuesday"\n+    ],\n+    [\n+      "2",\n+      "Wednesday"\n+    ],\n+    [\n+      "3",\n+      "Thursday"\n+    ],\n+    [\n+      "4",\n+      "Friday"\n+    ],\n+    [\n+      "5",\n+      "Saturday"\n+    ],\n+    [\n+      "6",\n+      "Sunday"\n+    ]\n+  ],\n+  "description": "First day in the week.",\n+  "enum": [\n+    "0",\n+    "1",\n+    "2",\n+    "3",\n+    "4",\n+    "5",\n+    "6"\n+  ],\n+  "enumNames": [\n+    "Monday",\n+    "Tuesday",\n+    "Wednesday",\n+    "Thursday",\n+    "Friday",\n+    "Saturday",\n+    "Sunday"\n+  ],\n+  "title": "First weekday",\n+  "type": "string"\n+},\n+```\n+\n+New response:\n+\n+```json\n+"first_weekday": {\n+  "description": "First day in the week.",\n+  "title": "First weekday",\n+  "type": "string",\n+  "vocabulary": {\n+    "@id": "http://localhost:8080/Plone/@vocabularies/plone.app.vocabularies.Weekdays"\n+  }\n+},\n+```\n+\n+\n+### Vocabularies Endpoint\n+\n+The vocabularies endpoint no longer returns an `@id` for terms.\n+\n+The results are batched, and terms are now listed as `items` instead of `terms` to match other batched responses.\n+\n+Batch size is 25 by default, but can be overridden using the `b_size` parameter.\n+\n+Old response:\n+\n+```json\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n+  "terms": [\n+    {\n+      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Collection",\n+      "title": "Collection",\n+      "token": "Collection"\n+    },\n+    "\xe2\x80\xa6"\n+  ]\n+}\n+```\n+\n+New response:\n+\n+```json\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n+  "items": [\n+      {\n+        "title": "Collection",\n+        "token": "Collection"\n+      },\n+      "\xe2\x80\xa6"\n+  ],\n+  "items_total": 12\n+}\n+```\n+\n+\n+## Upgrading to `plone.restapi` 3.x\n+\n+\n+### Image scales\n+\n+Image download URLs and image scale URLs are created using the UID-based URL formats.\n+This allows Plone to create different URLs when the image changes, thus ensuring caches are updated.\n+\n+Old Response:\n+\n+```json\n+{\n+  "icon": {\n+    "download": "http://localhost:55001/plone/image/@@images/image/icon",\n+    "height": 32,\n+    "width": 24\n+  },\n+  "large": {\n+    "download": "http://localhost:55001/plone/image/@@images/image/large",\n+    "height": 768,\n+    "width": 576\n+  },\n+  "\xe2\x80\xa6"\n+}\n+```\n+\n+New Response:\n+\n+```json\n+{\n+  "icon": {\n+    "download": "http://localhost:55001/plone/image/@@images/8eed3f80-5e1f-4115-85b8-650a10a6ca84.png",\n+    "height": 32,\n+    "width": 24\n+  },\n+  "large": {\n+    "download": "http://localhost:55001/plone/image/@@images/0d1824d1-2672-4b62-9277-aeb220d3bf15.png",\n+    "height": 768,\n+    "width": 576\n+  },\n+  "\xe2\x80\xa6"\n+}\n+```\n+\n+\n+### `@sharing` endpoint\n+\n+The `available_roles` property in the response to a `GET` request to the `@sharing` endpoint has changed.\n+Instead of a flat list of strings, it now contains a list of dicts, with the role ID and their translated title.\n+\n+Old Response:\n+\n+```http\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "available_roles": [\n+    "Contributor",\n+    "Editor",\n+    "Reviewer",\n+    "Reader"\n+  ],\n+  "entries": [\n+      "..."\n+  ],\n+  "inherit": true\n+}\n+```\n+\n+New Response:\n+\n+```http\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "available_roles": [\n+    {\n+      "id": "Contributor",\n+      "title": "Can add"\n+    },\n+    {\n+      "id": "Editor",\n+      "title": "Can edit"\n+    },\n+    {\n+      "id": "Reader",\n+      "title": "Can view"\n+    },\n+    {\n+      "id": "Reviewer",\n+      "title": "Can review"\n+    }\n+  ],\n+  "entries": [\n+      "\xe2\x80\xa6"\n+  ],\n+  "inherit": true\n+}\n+```\n+\n+\n+### Custom Content Deserializers\n+\n+If you have implemented custom content deserializers, you have to handle the new `create` keyword in the `__call__` method, which determines if deserialization is performed during object creation or while updating an object.\n+\n+Deserializers should only fire an `IObjectModifiedEvent` event if an object has been updated. They should not fire it when a new object has been created.\n+\n+See [Dexterity content deserializer](https://github.com/plone/plone.restapi/blob/master/src/plone/restapi/deserializer/dxcontent.py) for an example.\n+\n+\n+## Upgrading to `plone.restapi` 2.x\n+\n+`plone.restapi` 2.0.0 converts all datetime, DateTime and time objects to UTC before serializing.\n+The translations endpoint becomes "expandable", which introduces the following breaking changes.\n+\n+\n+### Translations\n+\n+Previously when using the `@translations` endpoint in `plone.restapi` 1.x, the endpoint returned a `language` key with the content object\'s language and a `translations` key with all its translations.\n+\n+Now as the endpoint is expandable, we want the endpoint to behave like the other expandable endpoints.\n+As top level information, we only include the name of the endpoint on the `@id` attribute and the actual translations of the content object in an attribute called `items`.\n+\n+This means that now the JSON response to a `GET` request to the {ref}`translations` endpoint does not include the language of the actual content item, and the translations are now in an attribute called `items` instead of `translations`.\n+\n+Old response:\n+\n+```http\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/en/test-document",\n+  "language": "en",\n+  "translations": [\n+    {\n+      "@id": "http://localhost:55001/plone/es/test-document",\n+      "language": "es"\n+    }\n+  ]\n+}\n+```\n+\n+New response:\n+\n+```http\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/en/test-document/@translations",\n+  "items": [\n+    {\n+      "@id": "http://localhost:55001/plone/es/test-document",\n+      "language": "es"\n+    }\n+  ]\n+}\n+```\n+\n+\n+## Upgrading to `plone.restapi` 1.0b1\n+\n+In `plone.restapi` 1.0b1 the `url` attribute on the {ref}`navigation` and {ref}`breadcrumbs` endpoint was renamed to `@id` to be consistent with other links/URLs used in `plone.restapi`.\n+\n+The JSON response to a `GET` request to the {ref}`breadcrumbs` endpoint changed from using the `url` attribute for `items`:\n+\n+```http\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n+  "items": [\n+    {\n+      "title": "Welcome to Plone",\n+      "url": "http://localhost:55001/plone/front-page"\n+    }\n+  ]\n+}\n+```\n+\n+\xe2\x80\xa6to using the `@id` for the URL of `items`:\n+\n+```http\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n+  "items": [\n+    {\n+      "@id": "http://localhost:55001/plone/front-page",\n+      "title": "Welcome to Plone"\n+    }\n+  ]\n+}\n+```\n+\n+The JSON response to a `GET` request to the {ref}`navigation` endpoint changed from using the `url` attribute for `items`:\n+\n+```http\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/front-page/@navigation",\n+  "items": [\n+    {\n+      "title": "Home",\n+      "url": "http://localhost:55001/plone",\n+    },\n+    {\n+      "title": "Welcome to Plone",\n+      "url": "http://localhost:55001/plone/front-page"\n+    }\n+  ]\n+}\n+```\n+\n+to using the `@id` for the URL of `items`:\n+\n+```http\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/front-page/@navigation",\n+  "items": [\n+    {\n+      "@id": "http://localhost:55001/plone",\n+      "title": "Home"\n+    },\n+    {\n+      "@id": "http://localhost:55001/plone/front-page",\n+      "title": "Welcome to Plone"\n+    }\n+  ]\n+}\n+```\n+\n+The expansion mechanism is also affected by this change when {ref}`navigation` or {ref}`breadcrumbs` endpoints are expanded.\n+\n+From using `url` in the breadcrumb `items`:\n+\n+```json\n+{\n+  "@components": {\n+    "breadcrumbs": {\n+      "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n+      "items": [\n+        {\n+          "title": "Welcome to Plone",\n+          "url": "http://localhost:55001/plone/front-page"\n+        }\n+      ]\n+    },\n+    "navigation": {\n+      "@id": "http://localhost:55001/plone/front-page/@navigation",\n+      "items": [\n+        {\n+          "title": "Home",\n+          "url": "http://localhost:55001/plone",\n+        },\n+        {\n+          "title": "Welcome to Plone",\n+          "url": "http://localhost:55001/plone/front-page"\n+        }\n+      ]\n+    },\n+    "\xe2\x80\xa6"\n+}\n+```\n+\n+to using `@id` in the breadcrumb `items`:\n+\n+```json\n+{\n+  "@components": {\n+    "breadcrumbs": {\n+      "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n+      "items": [\n+        {\n+          "@id": "http://localhost:55001/plone/front-page",\n+          "title": "Welcome to Plone"\n+        }\n+      ]\n+    },\n+    "navigation": {\n+      "@id": "http://localhost:55001/plone/front-page/@navigation",\n+      "items": [\n+        {\n+          "@id": "http://localhost:55001/plone",\n+          "title": "Home"\n+        },\n+        {\n+          "@id": "http://localhost:55001/plone/front-page",\n+          "title": "Welcome to Plone"\n+        }\n+      ]\n+    },\n+    "\xe2\x80\xa6"\n+}\n+```\n+\n+Changelog:\n+\n+- Rename `url` attribute on navigation and breadcrumb to `@id`. [timo]\n+\n+Pull Request:\n+\n+- <https://github.com/plone/plone.restapi/pull/459>\n+\n+\n+## Upgrading to `plone.restapi` 1.0a25\n+\n+`plone.restapi` 1.0a25 introduced three breaking changes:\n+\n+- Remove `@components` navigation and breadcrumbs.\n+  Use top level `@navigation` and `@breadcrumb` endpoints instead. [timo]\n+- Remove `sharing` attributes from `GET` response. [timo, jaroel]\n+- Convert `richtext` using `.output_relative_to`.\n+  Direct conversion from `RichText` is no longer supported as we *always* need a context for the `ITransformer`. [jaroel]\n+\n+\n+### Remove @components endpoint\n+\n+`plone.restapi` 1.0a25 removed the `@components` endpoint which used to provide a {ref}`navigation` and a {ref}`breadcrumbs` endpoint.\n+\n+Instead of using `@components/navigation`:\n+\n+```\n+http://localhost:8080/Plone/@components/navigation\n+```\n+\n+Use just `@navigation`:\n+\n+```\n+http://localhost:8080/Plone/@navigation\n+```\n+\n+Instead of using `@components/breadcrumbs`:\n+\n+```\n+http://localhost:8080/Plone/@components/breadcrumbs\n+```\n+\n+Use just `@breadcrumbs`:\n+\n+```\n+http://localhost:8080/Plone/@breadcrumbs\n+```\n+\n+Changelog:\n+\n+- Remove `@components` navigation and breadcrumbs.\n+  Use top level `@navigation` and `@breadcrumb` endpoints instead. [timo]\n+\n+Pull Request:\n+\n+- <https://github.com/plone/plone.restapi/pull/425>\n+\n+\n+### Remove `sharing` attribute\n+\n+The `sharing` attribute was removed from all content `GET` responses:\n+\n+```json\n+"sharing": {\n+  "@id": "http://localhost:55001/plone/collection/@sharing",\n+  "title": "Sharing"\n+},\n+```\n+\n+Use the {ref}`sharing` endpoint that can be expanded instead.\n+\n+Changelog:\n+\n+- Remove `sharing` attributes from `GET` response. [timo, jaroel]\n+\n+Pull Request:\n+\n+- <https://github.com/plone/plone.restapi/commit/1b5e9e3a74df22e53b674849e27fa4b39b792b8c>\n+\n+\n+### Convert `richtext` using `.output_relative_to`\n+\n+Use `.output_relative_to` to convert `richtext`.\n+\n+Changelog:\n+\n+- Convert `richtext` using `.output_relative_to.`\n+  Direct conversion from `RichText` is no longer supported as we *always* need a context for the `ITransformer`. [jaroel]\n+\n+Pull Request:\n+\n+- <https://github.com/plone/plone.restapi/pull/428>\n+\n+\n+## Upgrading to `plone.restapi` 1.0a17\n+\n+`plone.restapi` 1.0a17 changed the serialization of the `richtext` "text" field for content objects from using `raw` (a Unicode string with the original input markup):\n+\n+```json\n+"text": {\n+  "content-type": "text/plain",\n+  "data": "Lorem ipsum",\n+  "encoding": "utf-8"\n+},\n+```\n+\n+to using `output` (a Unicode object representing the transformed output):\n+\n+```json\n+"text": {\n+  "content-type": "text/plain",\n+  "data": "<p>Lorem ipsum</p>",\n+  "encoding": "utf-8"\n+},\n+```\n+\n+Changelog:\n+\n+- Change `RichText` field value to use `output` instead of `raw` to fix inline paths.\n+  This fixes #302. [erral]\n+\n+Pull Request:\n+\n+- <https://github.com/plone/plone.restapi/pull/346>\ndiff --git a/docs/source/upgrade-guide.rst b/docs/source/upgrade-guide.rst\ndeleted file mode 100644\nindex dfc40643b..000000000\n--- a/docs/source/upgrade-guide.rst\n+++ /dev/null\n@@ -1,790 +0,0 @@\n-Upgrade Guide\n-=============\n-\n-This upgrade guide lists all breaking changes in plone.restapi and explains the necessary steps that are needed to upgrade to the lastest version.\n-\n-Upgrading to plone.restapi 7.x\n-------------------------------\n-\n-Navigation endpoint has been refactored, and now its behavior is consistent regarding the ``items`` attribute.\n-Now the ``items`` attribute is present even if the element of the tree does not have children elements.\n-This might effect to some login in JavaScript specially, if the condition is checking for the existance of the attribute and expect to be ``undefined``, since this change it will be an empty array.\n-\n-Upgrading to plone.restapi 6.x\n-------------------------------\n-\n-plone.restapi 6.0.0 removes the IAPIRequest marker interface (https://github.com/plone/plone.restapi/pull/819).\n-\n-It also ships with a fix that prevents converting bytestring ids to unicode ids when reordering on Python 2 (https://github.com/plone/plone.restapi/issues/827).\n-\n-All versions before plone.restapi 6.0.0 are potentially affected by this issue.\n-\n-You may be affected by this issue and should run the fix if:\n-\n-- You used the PATCH "ordering" functionality of plone.restapi\n-- Were using Python 2 at that point\n-- Are seeing issues with objectIds() returning mixed string types\n-\n-If you need to fix object ids you can do one of the following:\n-\n-- Use the browser-view ``@@plone-restapi-upgrade-fix-ordering`` as a "Manager"\n-  to fix all folderish content types in your Plone site.\n-- Run the helper function\n-  ``ensure_child_ordering_object_ids_are_native_strings``\n-  from ``plone.restapi.upgrades.ordering`` for all affected objects. You could\n-  do this in a custom upgrade-step implemented in your policy.\n-\n-We expect that most content won\'t actually be affected. See\n-https://github.com/plone/plone.restapi/issues/827 for more details.\n-\n-\n-Upgrading to plone.restapi 5.x\n-------------------------------\n-\n-plone.restapi 5.0.0 introduces the following breaking change:\n-\n-- Rename tiles behavior and fields to blocks, migration step. [timo, sneridagh] (#821)\n-\n-The "tiles" field has been renamed to "blocks" and the "tiles_layout" field to "blocks_layout". This changes the response format from::\n-\n-  {\n-    "@id": "http://localhost:55001/plone/my-document",\n-    ...\n-    "tiles_layout": [\n-      "#title-1",\n-      "#description-1",\n-      "#image-1"\n-    ],\n-    "tiles": {\n-      ...\n-    }\n-  }\n-\n-to::\n-\n-  {\n-    "@id": "http://localhost:55001/plone/my-document",\n-    ...\n-    "blocks_layout": [\n-      "#title-1",\n-      "#description-1",\n-      "#image-1"\n-    ],\n-    "blocks": {\n-      ...\n-    }\n-  }\n-\n-This change affects the GET, PATCH and POST formats. Though, it should only affect you if you use Volto.\n-\n-\n-Upgrading to plone.restapi 4.x\n-------------------------------\n-\n-plone.restapi 4.0.0 introduces the following breaking changes:\n-\n-1) Fields with vocabularies now return the ``token`` and ``title`` instead of the stored value.\n-2) Choice and list fields return a hyperlink to a vocabulary instead of ``choices``, ``enum``, and ``enumNames``.\n-3) Serialize widget parameters into a ``widgetOptions`` object instead of adding them to the top level of the schema property.\n-4) The vocabularies endpoint does no longer returns an ``@id`` for terms, the results are batched, and terms are now listed as ``items`` instead of ``terms`` to match other batched responses.\n-\n-\n-Serialization and Deserialization of fields with vocabularies\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-The serialization of fields with vocabularies (e.g. ``Choice``) now return the\n-`token` and the `title` of the vocabulary term instead of the stored value.\n-This is allows displaying the term (title) without additionally querying the\n-vocabulary. However it\'s necessary to adopt existing client implementations.\n-\n-The date and time controlpanel previously returned a number for the\n-``first_weekday`` property::\n-\n-  {\n-    "@id": "http://localhost:55001/plone/@controlpanels/date-and-time",\n-    "data": {\n-        ...\n-        "first_weekday": 0,\n-        ...\n-    }\n-    ...\n-  }\n-\n-Now it returns an object with a token and a title::\n-\n-  {\n-    "@id": "http://localhost:55001/plone/@controlpanels/date-and-time",\n-    "data": {\n-        ...\n-        "first_weekday": {\n-            "title": "Monday",\n-            "token": "0"\n-        },\n-        ...\n-    }\n-    ...\n-  }\n-\n-Deserialization accepts objects that contain a token, but also just the token\n-or the value.\n-\n-However it\'s highly recommended to always use the token as vocabulary terms\n-may contain values that are not JSON serializable.\n-\n-\n-Choice and List fields return link to vocabulary instead of the values\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-Choice and List fields using named vocabularies are now serialized\n-with a ``vocabulary`` property giving the URL of the ``@vocabularies``\n-endpoint for the vocabulary instead of including ``choices``,\n-``enum`` and ``enumNames`` inline.\n-\n-Old Response::\n-\n-    "choices": [\n-        [\n-            "de",\n-            "Deutsch"\n-        ],\n-        [\n-            "en",\n-            "English"\n-        ],\n-    ],\n-    "enum": [\n-      "de",\n-      "en",\n-    ],\n-    "enumNames": [\n-      "Deutsch",\n-      "English",\n-    ],\n-\n-New response::\n-\n-    "vocabulary": {\n-        "@id": "http://localhost:55001/plone/@vocabularies/plone.app.discussion.vocabularies.CaptchaVocabulary"\n-    },\n-\n-Serialize widget parameters into a ``widgetOptions`` object\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-Serialize widget parameters into a ``widgetOptions`` object instead of adding them to the top level of the schema property.\n-\n-Old response::\n-\n-      "vocabulary": "plone.app.vocabularies.Users"\n-\n-New response::\n-\n-      "widgetOptions": {\n-        "pattern_options": {\n-          "recentlyUsed": true\n-        },\n-        "vocabulary": { "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users" }\n-      }\n-\n-\n-Example: Vocabularies Subjects Field\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-The ``subjects`` field is now serialized as an ``array``\n-of ``string`` items using the ``plone.app.vocabularies.Keywords`` vocabulary.\n-\n-Old response::\n-\n-    "subjects": {\n-      "choices": [...],\n-      "enum": [...],\n-      "enumNames": [...],\n-    }\n-    "type": "string"\n-\n-New response::\n-\n-    "additionalItems": true,\n-    "type": "array",\n-    "uniqueItems": true,\n-    "widgetOptions": {\n-        "vocabulary": {\n-          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n-      }\n-    },\n-    "items": {\n-      "description": "",\n-      "title": "",\n-      "type": "string"\n-    },\n-\n-Example: Available Time Zones Field (vocabulary in ``items``)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-Old response::\n-\n-    "available_timezones": {\n-      "additionalItems": true,\n-      "default": [],\n-      "description": "The timezones, which should be available for the portal. Can be set for users and events",\n-      "items": {\n-        "choices": [\n-          [\n-            "Africa/Abidjan",\n-            "Africa/Abidjan"\n-          ],\n-          [\n-            "Africa/Accra",\n-            "Africa/Accra"\n-          ],\n-          ...\n-        "enum": [\n-          ...\n-        ],\n-        "enumNames": [\n-          ...\n-        ]\n-      },\n-      title: "Available timezones",\n-      type: "array",\n-      uniqueItems: true,\n-    }\n-\n-New response::\n-\n-    "available_timezones": {\n-      "additionalItems": true,\n-      "default": [],\n-      "description": "The timezones, which should be available for the portal. Can be set for users and events",\n-      "items": {\n-        "description": "",\n-        "title": "",\n-        "type": "string",\n-        "vocabulary": {\n-          "@id": "http://localhost:8080/Plone/@vocabularies/plone.app.vocabularies.Timezones"\n-        }\n-      },\n-      "title": "Available timezones",\n-      "type": "array",\n-      "uniqueItems": true\n-    },\n-\n-Example: Weekday Field (vocabulary in main property)\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-Old response::\n-\n-    "first_weekday": {\n-      "choices": [\n-        [\n-          "0",\n-          "Monday"\n-        ],\n-        [\n-          "1",\n-          "Tuesday"\n-        ],\n-        [\n-          "2",\n-          "Wednesday"\n-        ],\n-        [\n-          "3",\n-          "Thursday"\n-        ],\n-        [\n-          "4",\n-          "Friday"\n-        ],\n-        [\n-          "5",\n-          "Saturday"\n-        ],\n-        [\n-          "6",\n-          "Sunday"\n-        ]\n-      ],\n-      "description": "First day in the week.",\n-      "enum": [\n-        "0",\n-        "1",\n-        "2",\n-        "3",\n-        "4",\n-        "5",\n-        "6"\n-      ],\n-      "enumNames": [\n-        "Monday",\n-        "Tuesday",\n-        "Wednesday",\n-        "Thursday",\n-        "Friday",\n-        "Saturday",\n-        "Sunday"\n-      ],\n-      "title": "First weekday",\n-      "type": "string"\n-    },\n-\n-New response::\n-\n-    "first_weekday": {\n-      "description": "First day in the week.",\n-      "title": "First weekday",\n-      "type": "string",\n-      "vocabulary": {\n-        "@id": "http://localhost:8080/Plone/@vocabularies/plone.app.vocabularies.Weekdays"\n-      }\n-    },\n-\n-Vocabularies Endpoint\n-^^^^^^^^^^^^^^^^^^^^^\n-\n-The vocabularies endpoint does no longer returns an ``@id`` for terms.\n-\n-The results are batched, and terms are now listed as ``items`` instead of ``terms`` to match other batched responses.\n-\n-Batch size is 25 by default but can be overridden using the ``b_size`` parameter.\n-\n-Old response::\n-\n-    {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n-      "terms": [\n-        {\n-          "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes/Collection",\n-          "title": "Collection",\n-          "token": "Collection"\n-        },\n-        ...\n-      ]\n-    }\n-\n-New response::\n-\n-    {\n-      "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes",\n-      "items": [\n-          {\n-            "title": "Collection",\n-            "token": "Collection"\n-          },\n-          ...\n-      ],\n-      "items_total": 12\n-    }\n-\n-\n-Upgrading to plone.restapi 3.x\n-------------------------------\n-\n-Image scales\n-^^^^^^^^^^^^\n-\n-Image download URLs and image scale URLs are created using the UID based url formats. This allows Plone to create different URLs when the image changes and thus ensuring caches are updated.\n-\n-Old Response::\n-\n-     {\n-       "icon": {\n-         "download": "http://localhost:55001/plone/image/@@images/image/icon",\n-         "height": 32,\n-         "width": 24\n-       },\n-       "large": {\n-         "download": "http://localhost:55001/plone/image/@@images/image/large",\n-         "height": 768,\n-         "width": 576\n-       },\n-       ...\n-      }\n-\n-New Response::\n-\n-     {\n-       "icon": {\n-         "download": "http://localhost:55001/plone/image/@@images/8eed3f80-5e1f-4115-85b8-650a10a6ca84.png",\n-         "height": 32,\n-         "width": 24\n-       },\n-       "large": {\n-         "download": "http://localhost:55001/plone/image/@@images/0d1824d1-2672-4b62-9277-aeb220d3bf15.png",\n-         "height": 768,\n-         "width": 576\n-       },\n-      ...\n-      }\n-\n-\n-@sharing endpoint\n-^^^^^^^^^^^^^^^^^\n-\n-The ``available_roles`` property in the response to a GET request to the\n-``@sharing`` endpoint has changed: Instead of a flat list of strings, it now\n-contains a list of dicts, with the role ID and their translated title:\n-\n-Old Response::\n-\n-  HTTP/1.1 200 OK\n-  Content-Type: application/json\n-\n-  {\n-    "available_roles": [\n-      "Contributor",\n-      "Editor",\n-      "Reviewer",\n-      "Reader"\n-    ],\n-    "entries": [\n-        "..."\n-    ],\n-    "inherit": true\n-  }\n-\n-\n-New Response::\n-\n-  HTTP/1.1 200 OK\n-  Content-Type: application/json\n-\n-  {\n-    "available_roles": [\n-      {\n-        "id": "Contributor",\n-        "title": "Can add"\n-      },\n-      {\n-        "id": "Editor",\n-        "title": "Can edit"\n-      },\n-      {\n-        "id": "Reader",\n-        "title": "Can view"\n-      },\n-      {\n-        "id": "Reviewer",\n-        "title": "Can review"\n-      }\n-    ],\n-    "entries": [\n-        "..."\n-    ],\n-    "inherit": true\n-  }\n-\n-\n-Custom Content Deserializers\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-If you have implemented custom content deserializers, you have to handle the\n-new ``create`` keyword in the ``__call__`` method, which determines if deserialization\n-is performed during object creation or while updating an object.\n-\n-Deserializers should only fire an ``IObjectModifiedEvent`` event if an object\n-has been updated. They should not fire it, when a new object has been created.\n-\n-See `Dexterity content deserializer <https://github.com/plone/plone.restapi/blob/master/src/plone/restapi/deserializer/dxcontent.py>`_ for an example.\n-\n-\n-Upgrading to plone.restapi 2.x\n-------------------------------\n-\n-plone.restapi 2.0.0 converts all datetime, DateTime and time to UTC before serializing.\n-The translations endpoint becomes "expandable", which introduces the following breaking changes.\n-\n-Translations\n-^^^^^^^^^^^^\n-\n-When using the `@translations` endpoint in plone.restapi 1.x, the endpoint returned a `language` key\n-with the content object\'s language and a `translations` key with all its translations.\n-\n-Now, as the endpoint is expandable we want the endpoint to behave like the other expandable endpoints.\n-As top level information we only include the name of the endpoint on the `@id` attribute and the actual\n-translations of the content object in an attribute called `items`.\n-\n-This means that now the JSON response to a GET request to the :ref:`translations` endpoint does not\n-include anymore the language of the actual content item and the translations in an attribute called\n-`items` instead of `translations`.\n-\n-Old response::\n-\n-  HTTP/1.1 200 OK\n-  Content-Type: application/json\n-\n-  {\n-    "@id": "http://localhost:55001/plone/en/test-document",\n-    "language": "en",\n-    "translations": [\n-      {\n-        "@id": "http://localhost:55001/plone/es/test-document",\n-        "language": "es"\n-      }\n-    ]\n-  }\n-\n-New response::\n-\n-  HTTP/1.1 200 OK\n-  Content-Type: application/json\n-\n-  {\n-    "@id": "http://localhost:55001/plone/en/test-document/@translations",\n-    "items": [\n-      {\n-        "@id": "http://localhost:55001/plone/es/test-document",\n-        "language": "es"\n-      }\n-    ]\n-  }\n-\n-\n-Upgrading to plone.restapi 1.0b1\n---------------------------------\n-\n-In plone.restapi 1.0b1 the \'url\' attribute on the :ref:`navigation` and :ref:`breadcrumbs` endpoint was renamed to \'@id\' to be consistent with other links/URLs used in\n-plone.restapi.\n-\n-The JSON response to a GET request to the :ref:`breadcrumbs` endpoint changed from using the \'url\' attribute for \'items\'::\n-\n-    HTTP/1.1 200 OK\n-    Content-Type: application/json\n-\n-    {\n-      "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n-      "items": [\n-        {\n-          "title": "Welcome to Plone",\n-          "url": "http://localhost:55001/plone/front-page"\n-        }\n-      ]\n-    }\n-\n-to using the \'@id\' for the URL of \'items\'::\n-\n-    HTTP/1.1 200 OK\n-    Content-Type: application/json\n-\n-    {\n-      "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n-      "items": [\n-        {\n-          "@id": "http://localhost:55001/plone/front-page",\n-          "title": "Welcome to Plone"\n-        }\n-      ]\n-    }\n-\n-The JSON response to a GET request to the :ref:`navigation` endpoint changed from using the \'url\' attribute for \'items\'::\n-\n-    HTTP/1.1 200 OK\n-    Content-Type: application/json\n-\n-    {\n-      "@id": "http://localhost:55001/plone/front-page/@navigation",\n-      "items": [\n-        {\n-          "title": "Home",\n-          "url": "http://localhost:55001/plone",\n-        },\n-        {\n-          "title": "Welcome to Plone",\n-          "url": "http://localhost:55001/plone/front-page"\n-        }\n-      ]\n-    }\n-\n-to using the \'@id\' for the URL of \'items\'::\n-\n-    HTTP/1.1 200 OK\n-    Content-Type: application/json\n-\n-    {\n-      "@id": "http://localhost:55001/plone/front-page/@navigation",\n-      "items": [\n-        {\n-          "@id": "http://localhost:55001/plone",\n-          "title": "Home"\n-        },\n-        {\n-          "@id": "http://localhost:55001/plone/front-page",\n-          "title": "Welcome to Plone"\n-        }\n-      ]\n-    }\n-\n-The expansion mechanism is also affected by this change when :ref:`navigation` or :ref:`breadcrumbs` endpoints are expanded.\n-\n-From using \'url\' in the breadcrumb \'items\'::\n-\n-    {\n-      "@components": {\n-        "breadcrumbs": {\n-          "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n-          "items": [\n-            {\n-              "title": "Welcome to Plone",\n-              "url": "http://localhost:55001/plone/front-page"\n-            }\n-          ]\n-        },\n-        "navigation": {\n-          "@id": "http://localhost:55001/plone/front-page/@navigation",\n-          "items": [\n-            {\n-              "title": "Home",\n-              "url": "http://localhost:55001/plone",\n-            },\n-            {\n-              "title": "Welcome to Plone",\n-              "url": "http://localhost:55001/plone/front-page"\n-            }\n-          ]\n-        },\n-        ...\n-    }\n-\n-to using \'@id\' in the breadcrumb \'items\'::\n-\n-    {\n-      "@components": {\n-        "breadcrumbs": {\n-          "@id": "http://localhost:55001/plone/front-page/@breadcrumbs",\n-          "items": [\n-            {\n-              "@id": "http://localhost:55001/plone/front-page",\n-              "title": "Welcome to Plone"\n-            }\n-          ]\n-        },\n-        "navigation": {\n-          "@id": "http://localhost:55001/plone/front-page/@navigation",\n-          "items": [\n-            {\n-              "@id": "http://localhost:55001/plone",\n-              "title": "Home"\n-            },\n-            {\n-              "@id": "http://localhost:55001/plone/front-page",\n-              "title": "Welcome to Plone"\n-            }\n-          ]\n-        },\n-        ...\n-    }\n-\n-Changelog::\n-\n-- Rename \'url\' attribute on navigation / breadcrumb to \'@id\'. [timo]\n-\n-Pull Request:\n-\n-- https://github.com/plone/plone.restapi/pull/459\n-\n-\n-Upgrading to plone.restapi 1.0a25\n----------------------------------\n-\n-plone.restapi 1.0a25 introduced three breaking changes:\n-\n-- Remove @components navigation and breadcrumbs. Use top level @navigation and\n-  @breadcrumb endpoints instead. [timo]\n-\n-- Remove "sharing" attributes from GET response. [timo,jaroel]\n-\n-- Convert richtext using .output_relative_to. Direct conversion from RichText\n-  if no longer supported as we *always* need a context for the ITransformer. [jaroel]\n-\n-Remove @components endpoint\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-plone.restapi 1.0a25 removed the @components endpoint which used to provide a\n-:ref:`navigation` and a :ref:`breadcrumbs` endpoint.\n-\n-Instead of using "@components/navigation"::\n-\n-  http://localhost:8080/Plone/@components/navigation\n-\n-Use just "@navigation"::\n-\n-  http://localhost:8080/Plone/@navigation\n-\n-Instead of using "@components/breadcrumbs"::\n-\n-  http://localhost:8080/Plone/@components/breadcrumbs\n-\n-Use just "@breadcrumbs"::\n-\n-  http://localhost:8080/Plone/@breadcrumbs\n-\n-Changelog::\n-\n-- Remove @components navigation and breadcrumbs. Use top level @navigation and @breadcrumb endpoints instead. [timo]\n-\n-Pull Request:\n-\n-- https://github.com/plone/plone.restapi/pull/425\n-\n-\n-Remove "sharing" attributes\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-The "sharing" attribute was removed from all content GET responses::\n-\n-  "sharing": {\n-    "@id": "http://localhost:55001/plone/collection/@sharing",\n-    "title": "Sharing"\n-  },\n-\n-Use the :ref:`sharing` endpoint that can be expanded instead.\n-\n-Changelog::\n-\n-- Remove "sharing" attributes from GET response. [timo,jaroel]\n-\n-Pull Request:\n-\n-- https://github.com/plone/plone.restapi/commit/1b5e9e3a74df22e53b674849e27fa4b39b792b8c\n-\n-\n-Convert richtext using .output_relative_to\n-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-Using ".output_relative_to" in the\n-\n-Changelog::\n-\n-- Convert richtext using .output_relative_to. Direct conversion from RichText if no longer supported as we *always* need a context for the ITransformer. [jaroel]\n-\n-Pull Request:\n-\n-https://github.com/plone/plone.restapi/pull/428\n-\n-\n-Upgrading to plone.restapi 1.0a17\n----------------------------------\n-\n-plone.restapi 1.0a17 changed the serialization of the rich-text "text" field for content objects from using \'raw\' (a unicode string with the original input markup)::\n-\n-  "text": {\n-    "content-type": "text/plain",\n-    "data": "Lorem ipsum",\n-    "encoding": "utf-8"\n-  },\n-\n-to using \'output\' (a unicode object representing the transformed output)::\n-\n-  "text": {\n-    "content-type": "text/plain",\n-    "data": "<p>Lorem ipsum</p>",\n-    "encoding": "utf-8"\n-  },\n-\n-Changelog::\n-\n-- Change RichText field value to use \'output\' instead of \'raw\' to fix inline paths. This fixes #302. [erral]\n-\n-Pull Request:\n-\n-https://github.com/plone/plone.restapi/pull/346\n-\ndiff --git a/docs/source/users.md b/docs/source/users.md\nnew file mode 100644\nindex 000000000..8b925f81a\n--- /dev/null\n+++ b/docs/source/users.md\n@@ -0,0 +1,288 @@\n+# Users\n+\n+Available users in a Plone site can be created, queried, updated, and deleted by interacting with the `/@users` endpoint on portal root.\n+This action requires an authenticated user:\n+\n+\n+## List Users\n+\n+To retrieve a list of all current users in the portal, call the `/@users` endpoint with a `GET` request:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users.req\n+```\n+\n+The server will respond with a list of all users in the portal:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users.resp\n+:language: http\n+```\n+\n+This only works for Manager users.\n+Anonymous users, or logged-in users without Manager rights, are not allowed to list users.\n+This is the example as an anonymous user:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_anonymous.req\n+```\n+\n+The server will return a {term}`401 Unauthorized` status code.\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_anonymous.resp\n+:language: http\n+```\n+\n+And this one as a user without the proper rights:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_unauthorized.req\n+```\n+\n+The server will return a {term}`401 Unauthorized` status code.\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_unauthorized.resp\n+:language: http\n+```\n+\n+The endpoint supports some basic filtering:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_filtered_by_username.req\n+```\n+\n+The server will respond with a list of the filtered users in the portal where the username starts with the `query` parameter\'s value:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n+:language: http\n+```\n+\n+The endpoint also takes a `limit` parameter.\n+Its default is a maximum of 25 users at a time for performance reasons.\n+\n+\n+## Create User\n+\n+To create a new user, send a `POST` request to the global `/@users` endpoint with a JSON representation of the user you want to create in the body:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_created.req\n+```\n+\n+```{note}\n+By default, `username`, and `password` are required fields.\n+If email login is enabled, `email` and `password` are required fields.\n+All other fields in the example are optional.\n+\n+The field `username` is *not allowed* when email login is *enabled*.\n+```\n+\n+If the user has been created successfully, the server will respond with a status {term}`201 Created`.\n+The `Location` header contains the URL of the newly created user, and the resource representation is in the payload:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_created.resp\n+:language: http\n+```\n+\n+If no roles have been specified, then a `Member` role is added as a sensible default.\n+\n+## Read User\n+\n+To retrieve all details for a particular user, send a `GET` request to the `/@users` endpoint and append the user ID to the URL:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_get.req\n+```\n+\n+The server will respond with a {term}`200 OK` status code and the JSON representation of the user in the body:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_get.resp\n+:language: http\n+```\n+\n+The key `roles` lists the globally defined roles for the user.\n+\n+Only users with Manager rights are allowed to get other users\' information:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_unauthorized_get.req\n+```\n+\n+If the user lacks these rights, the server will respond with a {term}`401 Unauthorized` status code:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_unauthorized_get.resp\n+:language: http\n+```\n+\n+Anonymous users are not allowed to get users\' information:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_anonymous_get.req\n+```\n+\n+If the user is anonymous, the server will respond with a {term}`401 Unauthorized` status code:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_anonymous_get.resp\n+:language: http\n+```\n+\n+But each user is allowed to get its own information:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_authorized_get.req\n+```\n+\n+In this case, the server will respond with a {term}`200 OK` status code and the JSON representation of the user in the body:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_authorized_get.resp\n+:language: http\n+```\n+\n+\n+## Update User\n+\n+To update the settings of a user, send a `PATCH` request with the user details you want to amend to the URL of that particular user.\n+For example, if you want to update the email address of the admin user, do the following:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_update.req\n+```\n+\n+A successful response to a `PATCH` request will be indicated by a {term}`204 No Content` response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_update.resp\n+:language: http\n+```\n+\n+```{note}\n+The `roles` object is a mapping of a role and a boolean indicating adding or removing.\n+```\n+\n+Any user is able to update their own properties and password (if allowed) by using the same request.\n+\n+The user portrait or avatar can also be updated using the same serialization as the file one:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_update_portrait.req\n+```\n+\n+A successful response to a `PATCH` request will be indicated by a {term}`204 No Content` response.\n+Then when requesting the user, the portrait URL should be on the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_update_portrait_get.resp\n+:language: http\n+```\n+\n+Adding the portrait via the `@user` endpoint does not scale its size because it is assumed that the frontend will take care of resizing or cropping.\n+If you still want Plone to take care of image scaling using the default Plone behavior for portraits, you have to add the `scale` attribute to the request:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_update_portrait_scale.req\n+```\n+\n+\n+## Delete User\n+\n+To delete a user, send a `DELETE` request to the `/@users` endpoint and append the user ID of the user you want to delete.\n+For example, to delete the user with the ID `johndoe`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_delete.req\n+```\n+\n+A successful response will be indicated by a {term}`204 No Content` response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_delete.resp\n+:language: http\n+```\n+\n+\n+## User registration\n+\n+Plone allows you to enable user self registration.\n+If it is enabled, then an anonymous user can register a new user using the user creation endpoint.\n+This new user will have the role `Member` by default, just the same as the Plone registration process.\n+\n+To create a new user, send a `POST` request to the `@users` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_add.req\n+```\n+\n+If the user should receive an email to set her password, you should pass `"sendPasswordReset": true` in the JSON body of the request.\n+Keep in mind that Plone will send a URL that points to the URL of the Plone site, which might just be your API endpoint.\n+\n+If the user has been created, the server will respond with a {term}`201 Created` response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/users_add.resp\n+:language: http\n+```\n+\n+\n+## Reset User Password\n+\n+Plone allows to reset a password for a user by sending a `POST` request to the user resource and appending `/reset-password` to the URL:\n+\n+```\n+POST /plone/@users/noam/reset-password HTTP/1.1\n+Host: localhost:8080\n+Accept: application/json\n+```\n+\n+The server will respond with a {term}`200 OK` response, and send an email to the user to reset her password.\n+\n+The token that is part of the reset URL in the email can be used to authorize setting a new password:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/users_reset.req\n+```\n+\n+\n+### Reset Own Password\n+\n+Plone also allows a user to reset her own password directly without sending an email.\n+The endpoint and the request is the same as above, but now the user can send both the old and new passwords in the payload:\n+\n+```\n+POST /plone/@users/noam/reset-password HTTP/1.1\n+Host: localhost:8080\n+Accept: application/json\n+Content-Type: application/json\n+\n+{\n+  \'old_password\': \'secret\',\n+  \'new_password\': \'verysecret\',\n+}\n+```\n+\n+The server will respond with a {term}`200 OK` response without sending an email.\n+\n+To set the password with the old password, you need either the `Set own password` or the `plone.app.controlpanel.UsersAndGroups` permission.\n+\n+If an API consumer tries to send a password in the payload that is not the same as the currently logged in user, the server will respond with a {term}`400 Bad Request` response.\n+\n+\n+### Return Values\n+\n+- {term}`200 OK`\n+- {term}`400 Bad Request`\n+- `403` (Unknown Token)\n+- `403` (Expired Token)\n+- `403` (Wrong user)\n+- `403` (Not allowed)\n+- `403` (Wrong password)\n+- {term}`500 Internal Server Error` (server fault, can not recover internally)\ndiff --git a/docs/source/users.rst b/docs/source/users.rst\ndeleted file mode 100644\nindex 92211c209..000000000\n--- a/docs/source/users.rst\n+++ /dev/null\n@@ -1,242 +0,0 @@\n-Users\n-=====\n-\n-Available users in a Plone site can be created, queried, updated and deleted by interacting with the ``/@users`` endpoint on portal root (requires an authenticated user):\n-\n-List Users\n-----------\n-\n-To retrieve a list of all current users in the portal, call the ``/@users`` endpoint with a ``GET`` request:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users.req\n-\n-The server will respond with a list of all users in the portal:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users.resp\n-   :language: http\n-\n-\n-This only works for Manager users, anonymous users or logged-in users without Manager rights are now allowed to list users. This is the example as an anonymous user:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_anonymous.req\n-\n-The server will return a 401 Unauthorized status code\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_anonymous.resp\n-   :language: http\n-\n-\n-And this one as an user without the proper rights:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_unauthorized.req\n-\n-The server will return a 401 Unauthorized status code\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_unauthorized.resp\n-   :language: http\n-\n-\n-The endpoint supports some basic filtering:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_filtered_by_username.req\n-\n-The server will respond with a list the filtered users in the portal with username starts with the query.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_filtered_by_username.resp\n-   :language: http\n-\n-The endpoint also takes a ``limit`` parameter that defaults to a maximum of 25 users at a time for performance reasons.\n-\n-\n-Create User\n------------\n-\n-To create a new user, send a ``POST`` request to the global ``/@users`` endpoint with a JSON representation of the user you want to create in the body:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_created.req\n-\n-\n-.. note::\n-    By default, "username", and "password" are required fields. If email login is enabled, "email" and "password" are required fields. All other fields in the example are optional.\n-\n-    The field "username" is **not allowed** when email login is *enabled*.\n-\n-If the user has been created successfully, the server will respond with a status 201 (Created). The ``Location`` header contains the URL of the newly created user and the resource representation in the payload:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_created.resp\n-   :language: http\n-\n-If no roles has been specified, then a default ``Member`` role is added as a sensible default.\n-\n-\n-Read User\n----------\n-\n-To retrieve all details for a particular user, send a ``GET`` request to the ``/@users`` endpoint and append the user id to the URL:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_get.req\n-\n-The server will respond with a 200 OK status code and the JSON representation of the user in the body:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_get.resp\n-   :language: http\n-\n-The key \'roles\' lists the globally defined roles for the user.\n-\n-Only users with Manager rights are allowed to get other users\' information:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_unauthorized_get.req\n-\n-If the user lacks this rights, the server will respond with a 401 Unauthorized status code:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_unauthorized_get.resp\n-   :language: http\n-\n-Also anonymous users are not allowed to get users\' information:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_anonymous_get.req\n-\n-If the user is an anonymous one, the server will respond with a 401 Unauthorized status code:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_anonymous_get.resp\n-   :language: http\n-\n-But each user is allowed to get its own information.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_authorized_get.req\n-\n-In this case, the server will respond with a 200 OK status code and the JSON respresentation of the user in the body:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_authorized_get.resp\n-   :language: http\n-\n-Update User\n------------\n-\n-To update the settings of a user, send a ``PATCH`` request with the user details you want to amend to the URL of that particular user, e.g. if you want to update the email address of the admin user to:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_update.req\n-\n-A successful response to a PATCH request will be indicated by a :term:`204 No Content` response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_update.resp\n-   :language: http\n-\n-.. note::\n-  The \'roles\' object is a mapping of a role and a boolean indicating adding or removing.\n-\n-Any user is able to update their own properties and password (if allowed) by using the same request.\n-\n-The user portrait/avatar can also be updated using the same serialization as the file one:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_update_portrait.req\n-\n-A successful response to a PATCH request will be indicated by a :term:`204 No Content` response.\n-Then asking for the user the portrait URL should be on the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_update_portrait_get.resp\n-   :language: http\n-\n-Adding the portrait via the @user endpoint does not scale it since it\'s assumed that the frontend will take care of it (resizing/cropping).\n-If you still want that Plone to take care of the scaling using the default Plone behavior for portraits, you have to add the ``scale`` attribute to the request:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_update_portrait_scale.req\n-\n-Delete User\n------------\n-\n-To delete a user send a ``DELETE`` request to the ``/@users`` endpoint and append the user id of the user you want to delete, e.g. to delete the user with the id johndoe:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_delete.req\n-\n-A successful response will be indicated by a :term:`204 No Content` response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/users_delete.resp\n-   :language: http\n-\n-\n-User registration\n------------------\n-\n-Plone allows you to enable the auto registration of users.\n-If it is enabled, then an anonymous user can register a new user using the user creation endpoint.\n-This new user will have the role ``Member`` by default as the Plone registration process also does.\n-\n-To create a new user send a POST request to the \'@users\' endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_add.req\n-\n-If the user should receive an email to set her password, you should pass \'sendPasswordReset": true\' in the JSON body of the request.\n-Keep in mind that Plone will send a URL that points to the URL of the Plone site, which might just be your API endpoint.\n-\n-If the user has been created, the server will respond with a :term:`201 Created` response:\n-\n-..  literalinclude:: ../../src/plone/restapi/tests/http-examples/users_add.resp\n-    :language: http\n-\n-\n-Reset User Password\n--------------------\n-\n-Plone allows to reset a password for a user by sending a POST request to the user resource and appending `/reset-password` to the URL::\n-\n-  POST /plone/@users/noam/reset-password HTTP/1.1\n-  Host: localhost:8080\n-  Accept: application/json\n-\n-The server will respond with a :term:`200 OK` response and send an email to the user to reset her password.\n-\n-The token that is part of the reset url in the email can be used to\n-authorize setting a new password:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/users_reset.req\n-\n-\n-Reset Own Password\n-^^^^^^^^^^^^^^^^^^\n-\n-Plone also allows a user to reset her own password directly without sending an email. The endpoint and the request is the same as above, but now the user can send the old password and the new password as payload::\n-\n-  POST /plone/@users/noam/reset-password HTTP/1.1\n-  Host: localhost:8080\n-  Accept: application/json\n-  Content-Type: application/json\n-\n-  {\n-    \'old_password\': \'secret\',\n-    \'new_password\': \'verysecret\',\n-  }\n-\n-The server will respond with a :term:`200 OK` response without sending an email.\n-\n-To set the password with the old password you need either the ``Set own password`` or the ``plone.app.controlpanel.UsersAndGroups`` permission.\n-\n-If an API consumer tries to send a password in the payload that is not the same as the currently logged in user, the server will respond with a :term:`400 Bad Request` response.\n-\n-\n-Return Values\n-^^^^^^^^^^^^^\n-\n-* :term:`200 OK`\n-* :term:`400 Bad Request`\n-* `403` (Unknown Token)\n-* `403` (Expired Token)\n-* `403` (Wrong user)\n-* `403` (Not allowed)\n-* `403` (Wrong password)\n-* :term:`500 Internal Server Error` (server fault, can not recover internally)\ndiff --git a/docs/source/vocabularies.md b/docs/source/vocabularies.md\nnew file mode 100644\nindex 000000000..0383d956e\n--- /dev/null\n+++ b/docs/source/vocabularies.md\n@@ -0,0 +1,227 @@\n+(vocabularies)=\n+\n+# Vocabularies and Sources\n+\n+Vocabularies are a set of allowed choices that back a particular field.\n+They contain so-called *terms* which represent those allowed choices.\n+Sources are similar, but are a more generic and dynamic concept.\n+\n+\n+## Concepts\n+\n+*Vocabularies* contain a list of terms.\n+These terms are usually tokenized, meaning that in addition to a term\'s value, it also has a `token`, which is a machine-friendly identifier for the term in 7-bit ASCII.\n+\n+```{note}\n+Since the underlying value of a term might not necessarily be serializable (it could be an arbitrary Python object), `plone.restapi` only exposes and accepts tokens.\n+It will transparently convert between tokens and values during serialization and deseralization.\n+For this reason, the following endpoints only support *tokenized* vocabularies and sources, and they do not expose the terms\' values.\n+```\n+\n+Terms can also have a `title`, which is intended to be the user-facing label for the term.\n+For vocabularies or sources whose terms are only tokenized but not titled, `plone.restapi` will fall back to using the token as the term title.\n+\n+*Sources* are similar to vocabularies, but they tend to be more dynamic in nature, and are often used for larger sets of terms.\n+They are also not registered with a global name like vocabularies, but are instead addressed via the field they are assigned to.\n+\n+*Query Sources* are sources that are capable of being queried or searched.\n+The source will then return only the subset of terms that match the query.\n+\n+The use of such a source is usually a strong indication that no attempt should be made to enumerate the full set of terms.\n+Instead, the source should only be queried, for example, by presenting the user with an autocomplete widget.\n+\n+Both vocabularies and sources can be context-sensitive.\n+This means that they take the context into account and their contents may therefore change depending on the context in which they are invoked.\n+\n+This section can only provide a basic overview of vocabularies and related concepts.\n+For a more in-depth explanation please refer to the [Plone documentation](https://docs.plone.org/develop/plone/forms/vocabularies.html).\n+\n+\n+## Endpoints overview\n+\n+In `plone.restapi` these three concepts are exposed through three separate endpoints, described in more detail below:\n+\n+- **`@vocabularies`**`/<vocab_name>`\n+- **`@sources`**`/<field_name>`\n+- **`@querysources`**`/<field_name>`**`?query=`**`<search_query>`\n+\n+While the `@vocabularies` and `@sources` endpoints allow *enumeration* of terms and optionally filter terms server-side, the `@querysources` endpoint *only* allows for searching the respective source.\n+\n+\n+## List all vocabularies\n+\n+```{eval-rst}\n+.. http:get:: (context)/@vocabularies\n+```\n+\n+To retrieve a list of all the available vocabularies, send a `GET` request to the `@vocabularies` endpoint:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies.req\n+```\n+\n+The response will include a list with the URL (`@id`) and the names (`title`) of all the available vocabularies in Plone:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/vocabularies.resp\n+:language: http\n+```\n+\n+\n+## Get a vocabulary\n+\n+```{eval-rst}\n+.. http:get:: (context)/@vocabularies/(vocab_name)\n+```\n+\n+To enumerate the terms of a particular vocabulary, use the `@vocabularies` endpoint with the name of the vocabulary, for example `/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes`.\n+The endpoint can be used with the site root and content objects:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get.req\n+```\n+\n+The server will respond with a list of terms.\n+The title is purely for display purposes.\n+The token is what should be sent to the server to address that term.\n+\n+```{note}\n+Vocabulary terms will be *batched* if the size of the resultset exceeds the batch size.\n+See {doc}`batching` for more details on how to work with batched results.\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/vocabularies_get.resp\n+:language: http\n+```\n+\n+By default, the vocabularies are batched.\n+However, you can pass the parameter `b_size=-1` to force the endpoint to return all the terms, instead of a batched response.\n+\n+\n+### Filter Vocabularies\n+\n+```{eval-rst}\n+.. http:get:: (context)/@vocabularies/(vocab_name)?title=(filter_query)\n+```\n+\n+```{eval-rst}\n+.. http:get:: (context)/@vocabularies/(vocab_name)?token=(filter_query)\n+```\n+\n+```{eval-rst}\n+.. http:get:: (context)/@vocabularies/(vocab_name)?tokens=(filter_term1)&tokens=(filter_term2)&...\n+```\n+\n+Vocabulary terms can be filtered using the `title`, `token`, or `tokens` (array) parameter.\n+\n+Use the `title` parameter to filter vocabulary terms by title.\n+For example, search for all terms that contain the string `doc` in the title:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.resp\n+:language: http\n+```\n+\n+Use the `token` parameter to filter vocabulary terms by token.\n+This is useful when you have the `token`, and you need to retrieve the `title`.\n+For example, search for the term `doc` in the token:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp\n+:language: http\n+```\n+\n+```{note}\n+You must not filter by `title` and `token` at the same time.\n+The API returns a 400 response code if you do so.\n+```\n+\n+Use the `tokens` parameter to filter vocabulary terms by a list of tokens:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token_list.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token_list.resp\n+:language: http\n+```\n+\n+\n+## Get a source\n+\n+```{eval-rst}\n+.. http:get:: (context)/@sources/(field_name)\n+```\n+\n+To enumerate the terms of a field\'s source, use the `@sources` endpoint on a specific context, and pass the field name as a path parameter, for example, `/plone/doc/@sources/some_field`.\n+\n+Because sources are inherently tied to a specific field, this endpoint can only be invoked on content objects.\n+The source is addressed via the field name for which it is used, instead of a global name (which sources do not have).\n+\n+Otherwise, the endpoint behaves the same as the `@vocabularies` endpoint.\n+\n+Example:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/sources_get.req\n+```\n+\n+The server will respond with a list of terms.\n+The title is purely for display purposes.\n+The token is what should be sent to the server to address that term:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/sources_get.resp\n+:language: http\n+```\n+\n+```{note}\n+Technically there can be sources that are not iterable: ones that only implement `ISource`, but not `IIterableSource`.\n+These cannot be enumerated using the `@sources` endpoint.\n+It will respond with a corresponding error.\n+```\n+\n+\n+## Querying a query source\n+\n+```{eval-rst}\n+.. http:get:: (context)/@querysources/(field_name)?query=(search_query)\n+```\n+\n+Query sources\xe2\x80\x94sources that implement `IQuerySource`\xe2\x80\x94can be queried using this endpoint, by passing the search term in the `query` parameter.\n+This search term will be passed to the query source\'s `search()` method.\n+The source\'s results are returned.\n+\n+Example:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/querysources_get.req\n+```\n+\n+The server will respond with a list of terms.\n+The title is purely for display purposes.\n+The token is what should be sent to the server to address that term:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/querysources_get.resp\n+:language: http\n+```\n+\n+```{note}\n+Technically, even though sources that implement `IQuerySource` are required to implement `__iter__` as well when strictly following the interface interitance hierarchy, they usually are used in Plone in situations where their full contents should not or cannot be enumerated.\n+For example, imagine a source of all users, backed by a large LDAP.\n+\n+For this reason, `plone.restapi` takes the stance that the `IQuerySource` interface is a strong indication that this source should *only* be queried, and therefore does not support enumeration of terms via the `@querysources` endpoint.\n+\n+If the source does actually implement `IIterableSource` in addition to `IQuerySource`, it can still be enumerated via the `@sources` endpoint.\n+```\ndiff --git a/docs/source/vocabularies.rst b/docs/source/vocabularies.rst\ndeleted file mode 100644\nindex 7c1d820b9..000000000\n--- a/docs/source/vocabularies.rst\n+++ /dev/null\n@@ -1,181 +0,0 @@\n-.. _vocabularies:\n-\n-Vocabularies and Sources\n-========================\n-\n-Vocabularies are a set of allowed choices that back a particular field.\n-They contain so called *terms* which represent those allowed choices.\n-Sources are a similar, but are a more generic and dynamic concept.\n-\n-Concepts\n---------\n-\n-**Vocabularies** contain a list of terms.\n-These terms are usually tokenized, meaning that in addition to a term\'s value, it also has a ``token`` which is a machine-friendly identifier for the term (7bit ASCII).\n-\n-.. note::\n-    Since the underlying value of a term might not necessarily be serializable (it could be an arbitrary Python object), ``plone.restapi`` only exposes and accepts tokens, and will transparently convert between tokens and values during serialization / deseralization.\n-    For this reason, the following endpoints only support *tokenized* vocabularies / sources, and they do not expose the terms\' values.\n-\n-Terms can also have a ``title``, which is intended to be the user-facing label for the term.\n-For vocabularies or sources whose terms are only tokenized, but not titled, ``plone.restapi`` will fall back to using the token as the term title.\n-\n-**Sources** are similar to vocabularies, but they tend to be more dynamic in nature, and are often used for larger sets of terms.\n-They are also not registered with a global name like vocabularies, but are instead addressed via the field they are assigned to.\n-\n-**Query Sources** are sources that are capable of being queried / searched.\n-The source will then return only the subset of terms that match the query.\n-\n-The use of such a source is usually a strong indication that no attempt should be made to enumerate the full set of terms, but instead the source should only be queried, by presenting the user with an autocomplete widget for example.\n-\n-Both vocabularies and sources can be context-sensitive, meaning that they take the context into account and their contents may therefore change depending on the context they\'re invoked on.\n-\n-This section can only provide a basic overview of vocabularies and related concepts.\n-For a more in-depth explanation please refer to the `Plone documentation <https://docs.plone.org/develop/plone/forms/vocabularies.html>`_.\n-\n-Endpoints overview\n-------------------\n-\n-In ``plone.restapi`` these three concepts are exposed through three separate endpoints (described in more detail below):\n-\n-- **@vocabularies**/(vocab_name)\n-- **@sources**/(field_name)\n-- **@querysources**/(field_name) **?query=** (search_query)\n-\n-While the ``@vocabularies`` and ``@sources`` endpoints allow to *enumerate* terms (and optionally have terms filtered server-side), the ``@querysources`` endpoint **only** allows for searching the respective source.\n-\n-\n-List all vocabularies\n----------------------\n-\n-.. http:get:: (context)/@vocabularies\n-\n-To retrieve a list of all the available vocabularies, send a ``GET`` request to the ``@vocabularies`` endpoint:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/vocabularies.req\n-\n-The response will include a list with the URL (``@id``) and the names (``title``) of all the available vocabularies in Plone:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies.resp\n-   :language: http\n-\n-\n-Get a vocabulary\n-----------------\n-\n-.. http:get:: (context)/@vocabularies/(vocab_name)\n-\n-To enumerate the terms of a particular vocabulary, use the ``@vocabularies`` endpoint with the name of the vocabulary, e.g. ``/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes``.\n-The endpoint can be used with the site root and content objects.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get.req\n-\n-The server will respond with a list of terms.\n-The title is purely for display purposes.\n-The token is what should be sent to the server to address that term.\n-\n-.. note::\n-    Vocabulary terms will be **batched** if the size of the resultset exceeds the batch size.\n-    See :doc:`./batching` for more details on how to work with batched results.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get.resp\n-   :language: http\n-\n-By default, the vocabularies are batched. However, you can pass ``b_size=-1`` parameter to force the endpoint to return all the terms, not batched response.\n-\n-Filter Vocabularies\n-^^^^^^^^^^^^^^^^^^^\n-\n-.. http:get:: (context)/@vocabularies/(vocab_name)?title=(filter_query)\n-.. http:get:: (context)/@vocabularies/(vocab_name)?token=(filter_query)\n-.. http:get:: (context)/@vocabularies/(vocab_name)?tokens=(filter_term1)&tokens=(filter_term2)&...\n-\n-Vocabulary terms can be filtered using the ``title``, ``token`` or ``tokens`` (array) parameter.\n-\n-Use the ``title`` parameter to filter vocabulary terms by title.\n-E.g. search for all terms that contain the string ``doc`` in the title:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_title.resp\n-   :language: http\n-\n-Use the ``token`` parameter to filter vocabulary terms by token.\n-This is useful in case that you have the token and you need to retrieve the ``title``.\n-E.g. search the term ``doc`` in the token:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token.resp\n-   :language: http\n-\n-.. note::\n-    You must not filter by title and token at the same time.\n-    The API returns a 400 response code if you do so.\n-\n-Use the ``tokens`` parameter to filter vocabulary terms by a list of tokens.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token_list.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get_filtered_by_token_list.resp\n-   :language: http\n-\n-Get a source\n-------------\n-\n-.. http:get:: (context)/@sources/(field_name)\n-\n-To enumerate the terms of a field\'s source, use the ``@sources`` endpoint on a specific context, and pass the field name as a path parameter, e.g. ``/plone/doc/@sources/some_field``.\n-\n-Because sources are inherently tied to a specific field, this endpoint can only be invoked on content objects, and the source is addressed via the field name its used for, instead of a global name (which sources don\'t have).\n-\n-Otherwise the endpoint behaves the same as the ``@vocabularies`` endpoint.\n-\n-Example:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/sources_get.req\n-\n-The server will respond with a list of terms.\n-The title is purely for display purposes.\n-The token is what should be sent to the server to address that term.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/sources_get.resp\n-   :language: http\n-\n-.. note::\n-    Technically there can be sources that are not iterable (ones that only implement ``ISource``, but not ``IIterableSource``).\n-    These cannot be enumerated using the ``@sources`` endpoint, and it will respond with a corresponding error.\n-\n-\n-Querying a query source\n------------------------\n-\n-.. http:get:: (context)/@querysources/(field_name)?query=(search_query)\n-\n-Query sources (sources implementing `IQuerySource`) can be queried using this endpoint, by passing the search term in the ``query`` parameter.\n-This search term will be passed to the query source\'s ``search()`` method, and the source\'s results are returned.\n-\n-Example:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/querysources_get.req\n-\n-The server will respond with a list of terms.\n-The title is purely for display purposes.\n-The token is what should be sent to the server to address that term.\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/querysources_get.resp\n-   :language: http\n-\n-.. note::\n-    Even though technically sources that implement ``IQuerySource`` are required to implement ``__iter__`` as well (when strictly following the interface interitance hierarchy), they usually are used in Plone in situations where their full contents shouldn\'t or can\'t be enumerated (imagine a source of all users, backed by a large LDAP, for example).\n-\n-    For this reason, ``plone.restapi`` takes the stance that the ``IQuerySource`` interface is a strong indication that this source should **only** be queried, and therefore doesn\'t support enumeration of terms via the ``@querysources`` endpoint.\n-\n-    *(If the source does actually implement IIterableSource in addition to IQuerySource, it can still be enumerated via the @sources endpoint)*\ndiff --git a/docs/source/workflow.md b/docs/source/workflow.md\nnew file mode 100644\nindex 000000000..2475b2545\n--- /dev/null\n+++ b/docs/source/workflow.md\n@@ -0,0 +1,39 @@\n+# Workflow\n+\n+```{note}\n+Currently the workflow support is limited to executing transitions on content.\n+```\n+\n+In Plone, content almost always has a {term}`workflow` attached.\n+We can get the current state and history of an object by issuing a `GET` request for any context:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workflow_get.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/workflow_get.resp\n+:language: http\n+```\n+\n+Now if we want to change the state of the front page to publish, we would proceed by issuing a `POST` request to the given URL:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workflow_post.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/workflow_post.resp\n+:language: http\n+```\n+\n+We can also change the state recursively for all contained items, provide a comment, and set effective and expiration dates:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workflow_post_with_body.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/workflow_post_with_body.resp\n+:language: http\n+```\ndiff --git a/docs/source/workflow.rst b/docs/source/workflow.rst\ndeleted file mode 100644\nindex 3b336ff45..000000000\n--- a/docs/source/workflow.rst\n+++ /dev/null\n@@ -1,32 +0,0 @@\n-Workflow\n-========\n-\n-.. note::\n-   Currently the workflow support is limited to executing transitions on content.\n-\n-In Plone, content almost always has a :term:`workflow` attached.\n-We can get the current state and history of an object by issuing a ``GET`` request using on any context:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/workflow_get.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workflow_get.resp\n-   :language: http\n-\n-\n-Now, if we want to change the state of the front page to publish, we would proceed by issuing a ``POST`` request to the given URL:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/workflow_post.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workflow_post.resp\n-   :language: http\n-\n-\n-We can also also change the state recursively for all contained items, provide a comment and set effective and expiration dates:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/workflow_post_with_body.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workflow_post_with_body.resp\n-   :language: http\ndiff --git a/docs/source/workingcopy.md b/docs/source/workingcopy.md\nnew file mode 100644\nindex 000000000..87b0872be\n--- /dev/null\n+++ b/docs/source/workingcopy.md\n@@ -0,0 +1,107 @@\n+# Working Copy\n+\n+```{note}\n+This feature is available only on Plone 5 or greater.\n+```\n+\n+Plone has a *working copy* feature provided by the core package `plone.app.iterate`.\n+It allows the users to create a working copy of a published or live content object, and work with it until it is ready to be published without having to edit the original object.\n+\n+This process has several steps in its life cycle.\n+\n+\n+## Create working copy (a.k.a., check-out)\n+\n+The user initiates the process and creates a working copy by checking out the content:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_post.req\n+```\n+\n+\xe2\x80\xa6and receives the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/workingcopy_post.resp\n+:language: http\n+```\n+\n+\n+## Get the working copy\n+\n+A working copy has been created and can be accessed querying the content:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_get.req\n+\n+```\n+\n+\xe2\x80\xa6and receives the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/workingcopy_get.resp\n+:language: http\n+```\n+\n+The `GET` content of any object also states the location of the working copy, if any, as `working_copy`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_baseline_get.req\n+\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp\n+:language: http\n+```\n+\n+The `GET` content of any a working copy also returns the original as `working_copy_of`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_wc_get.req\n+```\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/workingcopy_wc_get.resp\n+:language: http\n+```\n+\n+\n+## Check-in\n+\n+Once the user has finished editing the working copy and wants to update the original with the changes, they would check in the working copy:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_patch.req\n+\n+```\n+\n+\xe2\x80\xa6and receives the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/workingcopy_patch.resp\n+:language: http\n+```\n+\n+The working copy is deleted afterwards as a result of this process.\n+The `PATCH` can also be issued in the original (baseline) object.\n+\n+\n+## Delete the working copy (cancel check-out)\n+\n+If you want to cancel the check-out and delete the working copy (in both the original and\n+the working copy):\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_delete.req\n+\n+```\n+\n+and receives the response:\n+\n+```{literalinclude} ../../src/plone/restapi/tests/http-examples/workingcopy_delete.resp\n+:language: http\n+```\n+\n+When a working copy is deleted using the normal `DELETE` action, it also deletes the relation and cancels the check-out.\n+That is handled by `plone.app.iterate` internals.\ndiff --git a/docs/source/workingcopy.rst b/docs/source/workingcopy.rst\ndeleted file mode 100644\nindex 52ac68bba..000000000\n--- a/docs/source/workingcopy.rst\n+++ /dev/null\n@@ -1,91 +0,0 @@\n-Working Copy\n-============\n-\n-.. note::\n-    This is only available on Plone 5.\n-\n-Plone has the "Working copy" feature provided by the core package ``plone.app.iterate``.\n-It allows the users to create a working copy of a (published or live) content object and\n-work with it until it\'s ready to be published without having to edit the original object.\n-\n-This process has several steps of it\'s life cycle:\n-\n-Create working Copy (aka Check-out)\n------------------------------------\n-\n-The user initiates the process and creates a "working copy" by "checking out" the content:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_post.req\n-\n-and receives the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workingcopy_post.resp\n-   :language: http\n-\n-Get the working copy\n---------------------\n-\n-A working copy has been created and can be accessed querying the content:\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_get.req\n-\n-\n-and receives the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workingcopy_get.resp\n-   :language: http\n-\n-the GET content of any object, also states the location of the working copy, if any (``working_copy``).\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_baseline_get.req\n-\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workingcopy_baseline_get.resp\n-   :language: http\n-\n-the GET content of any a working copy also returns the original (``working_copy_of``):\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_wc_get.req\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workingcopy_wc_get.resp\n-   :language: http\n-\n-Check-in\n----------\n-\n-Once the user has finished editing the working copy and wants to update the original\n-with the changes in there, or "check-in" the working copy.\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_patch.req\n-\n-\n-and receives the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workingcopy_patch.resp\n-   :language: http\n-\n-\n-The working copy is deleted afterwards as a result of this process. The PATCH can also be issued in the original (baseline) object.\n-\n-Delete the working copy (cancel check-out)\n-------------------------------------------\n-\n-If you want to cancel the checkout and delete the working copy (in both the original and\n-the working copy):\n-\n-..  http:example:: curl httpie python-requests\n-    :request: ../../src/plone/restapi/tests/http-examples/workingcopy_delete.req\n-\n-\n-and receives the response:\n-\n-.. literalinclude:: ../../src/plone/restapi/tests/http-examples/workingcopy_delete.resp\n-   :language: http\n-\n-When a working copy is deleted using the "normal" delete action, it also deletes the\n-relation and cancels the check-out, but that is handled by ``plone.app.iterate`` internals.\ndiff --git a/docs/source/ideas/actions.rst b/ideas/actions.rst\nsimilarity index 100%\nrename from docs/source/ideas/actions.rst\nrename to ideas/actions.rst\ndiff --git a/docs/source/ideas/hydra-operations.rst b/ideas/hydra-operations.rst\nsimilarity index 100%\nrename from docs/source/ideas/hydra-operations.rst\nrename to ideas/hydra-operations.rst\ndiff --git a/docs/source/ideas/hydra.rst b/ideas/hydra.rst\nsimilarity index 73%\nrename from docs/source/ideas/hydra.rst\nrename to ideas/hydra.rst\nindex 979e68b17..642637585 100644\n--- a/docs/source/ideas/hydra.rst\n+++ b/ideas/hydra.rst\n@@ -81,63 +81,63 @@ Implementation\n Plone Document:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../../../src/plone/restapi/tests/http-examples/document.req\n+    :request: ../src/plone/restapi/tests/http-examples/document.req\n \n-.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/document.resp\n+.. literalinclude:: ../src/plone/restapi/tests/http-examples/document.resp\n    :language: http\n \n Plone Folder:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../../../src/plone/restapi/tests/http-examples/folder.req\n+    :request: ../src/plone/restapi/tests/http-examples/folder.req\n \n-.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/folder.resp\n+.. literalinclude:: ../src/plone/restapi/tests/http-examples/folder.resp\n    :language: http\n \n Plone Portal Root:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../../../src/plone/restapi/tests/http-examples/siteroot.req\n+    :request: ../src/plone/restapi/tests/http-examples/siteroot.req\n \n-.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/siteroot.resp\n+.. literalinclude:: ../src/plone/restapi/tests/http-examples/siteroot.resp\n    :language: http\n \n Collection:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../../../src/plone/restapi/tests/http-examples/collection.req\n+    :request: ../src/plone/restapi/tests/http-examples/collection.req\n \n-.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/collection.resp\n+.. literalinclude:: ../src/plone/restapi/tests/http-examples/collection.resp\n    :language: http\n \n Plone Image:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../../../src/plone/restapi/tests/http-examples/image.req\n+    :request: ../src/plone/restapi/tests/http-examples/image.req\n \n-.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/image.resp\n+.. literalinclude:: ../src/plone/restapi/tests/http-examples/image.resp\n    :language: http\n \n File:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../../../src/plone/restapi/tests/http-examples/file.req\n+    :request: ../src/plone/restapi/tests/http-examples/file.req\n \n-.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/file.resp\n+.. literalinclude:: ../src/plone/restapi/tests/http-examples/file.resp\n    :language: http\n \n Link:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../../../src/plone/restapi/tests/http-examples/link.req\n+    :request: ../src/plone/restapi/tests/http-examples/link.req\n \n-.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/link.resp\n+.. literalinclude:: ../src/plone/restapi/tests/http-examples/link.resp\n    :language: http\n \n News Item:\n \n ..  http:example:: curl httpie python-requests\n-    :request: ../../../src/plone/restapi/tests/http-examples/newsitem.req\n+    :request: ../src/plone/restapi/tests/http-examples/newsitem.req\n \n-.. literalinclude:: ../../../src/plone/restapi/tests/http-examples/newsitem.resp\n+.. literalinclude:: ../src/plone/restapi/tests/http-examples/newsitem.resp\n    :language: http\ndiff --git a/docs/source/ideas/item.rst b/ideas/item.rst\nsimilarity index 100%\nrename from docs/source/ideas/item.rst\nrename to ideas/item.rst\ndiff --git a/docs/source/ideas/plog2015.rst b/ideas/plog2015.rst\nsimilarity index 100%\nrename from docs/source/ideas/plog2015.rst\nrename to ideas/plog2015.rst\ndiff --git a/docs/source/ideas/plone-conference-2014-open-space.rst b/ideas/plone-conference-2014-open-space.rst\nsimilarity index 100%\nrename from docs/source/ideas/plone-conference-2014-open-space.rst\nrename to ideas/plone-conference-2014-open-space.rst\ndiff --git a/docs/source/ideas/toolbar.rst b/ideas/toolbar.rst\nsimilarity index 100%\nrename from docs/source/ideas/toolbar.rst\nrename to ideas/toolbar.rst\ndiff --git a/docs/source/ideas/workflow.rst b/ideas/workflow.rst\nsimilarity index 97%\nrename from docs/source/ideas/workflow.rst\nrename to ideas/workflow.rst\nindex 6b3a11a3a..5e689262b 100644\n--- a/docs/source/ideas/workflow.rst\n+++ b/ideas/workflow.rst\n@@ -1,5 +1,3 @@\n-.. include:: /alert-noindex.rst\n-\n ########\n Workflow\n ########\ndiff --git a/news/1375.feature b/news/1375.feature\nnew file mode 100644\nindex 000000000..634321d15\n--- /dev/null\n+++ b/news/1375.feature\n@@ -0,0 +1 @@\n+Documentation was converted to MyST from reStructuredText. [stevepiercy]\n'

