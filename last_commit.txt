Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2019-04-17T20:17:50+02:00
Author: telshock (telshock) <telsh@protonmail.ch>
Commit: https://github.com/plone/plone.app.multilingual/commit/4ac0ed98b41d1420a41f6a217a4b2850a19c31fe

Fix typos

There are still many parts where I am unsure what the readme tries to communicate, but I am not knowledgeable enough about the project to fix those. I also gave up after a third of the file.

Files changed:
M README.rst

b'diff --git a/README.rst b/README.rst\nindex c68965c2..5f370627 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -4,13 +4,13 @@\n Introduction\n ============\n \n-In the old days before Plone 4.3, talking about multi-language support in Plone is talk about Products.LinguaPlone. It has been the *defacto* standard for managing translations of Archetypes-based content types in Plone through the years. Somehow its functionality never made its way into the Plone core and today it is in legacy status. Nowadays, Plone faces the rising of Dexterity content types and its adoption into the core since Plone 4.3. With Plone 5 released, the transition is completed and Dexterity is shipped as its default content type story.\n+In the old days before Plone 4.3, talking about multi-language support in Plone was talk about Products.LinguaPlone. It has been the *defacto* standard for managing translations of Archetypes-based content types in Plone through the years. Somehow its functionality never made its way into the Plone core and today it is in legacy status. Nowadays, Plone faces the rising of Dexterity content types and its adoption into the core since Plone 4.3. With Plone 5 released, the transition is completed and Dexterity is shipped as its default content type story.\n \n-plone.app.multilingual was designed originally to provide Plone a whole multilingual story. Using ZCA technologies, enables translations to Dexterity and Archetypes content types as well managed via an unified UI.\n+plone.app.multilingual was designed originally to add a whole multilingual story to Plone. Using ZCA technologies, it enables translations to Dexterity and Archetypes content types managed via a unified UI.\n \n This module provides the user interface for managing content translations. It\'s the app package of the next generation Plone multilingual engine. It\'s designed to work with Dexterity content types and the *old fashioned* Archetypes based content types as well. It only works with Plone 4.1 and above due to the use of UUIDs for referencing the translations.\n \n-After more than 7 years, a GSOC, redesigns, reimplementations due to deprecated libraries, two major Plone versions finally we are able to say that plone.app.multilingual is finally here.\n+After more than 7 years, a GSOC, redesigns, reimplementations due to deprecated libraries and two major Plone versions we are finally able to say that plone.app.multilingual has arrived.\n \n \n Versions\n@@ -29,7 +29,7 @@ Versions\n Components\n ==========\n \n-PAM is composed of two packages, one is mandatory:\n+PAM is composed of two packages. One is mandatory:\n \n     * plone.app.multilingual (core, UI, enables Dexterity support via a behavior)\n \n@@ -67,7 +67,7 @@ These are the most important features PAM provides.\n Root Language folders\n ---------------------\n \n-After the setup, PAM will create root folders for each of your site\'s languages and put translated content into the appropriate folders. A language folder implements INavigationRoot, so from the user\'s point of view, each language is "jailed" inside its correspondent language folder. There are event subscribers in place to capture user interaction with content and update the language in contents accordingly, for example when user moves or copy content between language folders.\n+After the setup, PAM will create root folders for each of your site\'s languages and put translated content into the appropriate folders. A language folder implements INavigationRoot, so from the user\'s point of view, each language is "jailed" inside its corresponding language folder. There are event subscribers in place to capture user interaction with content and update the language in contents accordingly, for example when a user moves or copies content between language folders.\n \n \n Babel view\n@@ -79,15 +79,15 @@ An evolution of the LP *translate* view, unified for either Archetypes and Dexte\n Language independent fields\n ---------------------------\n \n-PAM has support for language independent fields, but with a twist respect the LP implementation. As PAM does design does not give more relevance to one translated object above the others siblings (has no canonical object), fields marked as language independent get copied over all the members of the translation group always. The PAM UI will warn you about this behavior by reminding you that the values in the field on the other group participants will be overwritten.\n+PAM has support for language independent fields, but with a twist regarding the LP implementation. As PAM\'s design does not give more relevance to one translated object than to its siblings (has no canonical object), fields marked as language independent are always copied over to all members of the translation group. The PAM UI will remind you about this behavior by warning you that the values in the corresponding field of all members of the translation group will be overwritten.\n \n \n Translation locator policy\n --------------------------\n \n-When translating content, this policy decides how it would be placed in the site\'s structure. There are two policies in place:\n+When translating content, the policy influences how the translated content will be placed in the site\'s structure. There are two policies to choose from:\n \n-    * LP way, the translation gets placed in the nearest translated folder in parent\'s hierarchy\n+    * LP way, the translation gets placed in the nearest translated folder in the parent\'s hierarchy\n \n     * Ask user where to place the translated element in the destination language root folder\n \n@@ -95,10 +95,10 @@ When translating content, this policy decides how it would be placed in the site\n Language selector policy\n ------------------------\n \n-While browsing the site, the language selector viewlet allows users to switch site\'s content language and ease access between translations of the current content. There are two policies in place in case the translation of a specific language does not exist (yet):\n+While browsing the site, the language selector viewlet allows users to switch the site\'s content language. There are two policies in place in case the translation of a specific language does not exist (yet):\n \n     * LP way, the selector shows the nearest translated container.\n-    * Shows the user an informative view that shows the current available translations for the current content.\n+    * Shows the user an informative view that shows the currently available translations for the current content.\n \n \n The assets folder - a shared "Language Independent Folder"\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2021-12-22T15:35:15+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.multilingual/commit/0b8503f7357373e722e2eb80f891526309566c7c

Merge branch 'master' into patch-1

Files changed:
A CREDITS.rst
M .gitignore
M CHANGES.rst
M README.rst
M setup.cfg
M setup.py
M src/plone/app/multilingual/browser/add.py
M src/plone/app/multilingual/browser/controlpanel.py
M src/plone/app/multilingual/browser/javascript/babel_helper.js
M src/plone/app/multilingual/browser/migrator.py
M src/plone/app/multilingual/browser/modify.py
M src/plone/app/multilingual/browser/selector.py
M src/plone/app/multilingual/browser/setup.py
M src/plone/app/multilingual/browser/switcher.py
M src/plone/app/multilingual/browser/templates/add-form-is-translation.pt
M src/plone/app/multilingual/browser/templates/controlpanel.pt
M src/plone/app/multilingual/browser/templates/dexterity_edit.pt
M src/plone/app/multilingual/browser/templates/modify_translations.pt
M src/plone/app/multilingual/browser/update.py
M src/plone/app/multilingual/content/lif.py
M src/plone/app/multilingual/dx/cloner.py
M src/plone/app/multilingual/dx/schemaeditor.py
M src/plone/app/multilingual/events.py
M src/plone/app/multilingual/indexer.py
M src/plone/app/multilingual/interfaces.py
M src/plone/app/multilingual/itg.py
M src/plone/app/multilingual/manager.py
M src/plone/app/multilingual/profiles/default/types/LIF.xml
M src/plone/app/multilingual/profiles/default/types/LRF.xml
M src/plone/app/multilingual/setuphandlers.py
M src/plone/app/multilingual/subscriber.py
M src/plone/app/multilingual/testing.py
M src/plone/app/multilingual/tests/robot/test_add_translation.robot
M src/plone/app/multilingual/tests/robot/test_schemaeditor.robot
M src/plone/app/multilingual/tests/robot/test_translate_content.robot
M src/plone/app/multilingual/tests/test_api.py
M src/plone/app/multilingual/tests/test_helper_views.py
M src/plone/app/multilingual/tests/test_lif.py
M src/plone/app/multilingual/tests/test_menu.py
M src/plone/app/multilingual/tests/test_selector.py
M src/plone/app/multilingual/tests/test_setup.py
D .gitattributes
D buildout.cfg
D docs/CREDITS.txt
D jenkins.cfg
D news/338.bugfix
D news/339.bugfix
D test-plone-5.0.x.cfg
D test-plone-5.1.x.cfg
D test-plone-5.x.cfg

b'diff --git a/.gitattributes b/.gitattributes\ndeleted file mode 100644\nindex 6f9ff673..00000000\n--- a/.gitattributes\n+++ /dev/null\n@@ -1 +0,0 @@\n-CHANGES.rst merge=union\ndiff --git a/.gitignore b/.gitignore\nindex 5894cbb6..3a725158 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -31,9 +31,6 @@ MKcodeintel\n # Mac\n .DS_Store\n \n-# Local development\n-local.cfg\n-\n # Emacs\n .emacs.desktop*\n \ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 49d8b58e..4722c559 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,229 @@ Changelog\n \n .. towncrier release notes start\n \n+6.0.0a5 (2021-10-16)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Manage Translations view should not call translation objects. [mliebischer] (#384)\n+\n+\n+6.0.0a4 (2021-10-13)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Disable CSRF protection during the setting of TG attribute. [mamico] (#375)\n+\n+\n+6.0.0a3 (2021-09-15)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Remove cyclic dependency with Products.CMFPlone\n+  [ericof] (#391)\n+\n+\n+6.0.0a2 (2021-09-01)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Force view_methods to be a tuple on setup and uninstall (#337)\n+- Fix deleting items with broken relation in languageindependent field\n+  [pbauer] (#390)\n+\n+\n+6.0.0a1 (2021-04-28)\n+--------------------\n+\n+Breaking changes:\n+\n+\n+- Bootstrapify for barceloneta-lts (#380)\n+\n+      * Init add to own branch\n+\n+      * Add back missing html tag\n+\n+      * Fix double msgs & add full width\n+\n+      * Fix headings\n+\n+      * Init add to own branch\n+\n+      * Add back missing html tag\n+\n+      * Fix headings\n+\n+      * fix test, use string from footer\n+\n+      * fix test, check h1 not documentFirstHeading\n+\n+      * fix test, use contains text\n+\n+      * update icons\n+\n+      * Jquery load is removed with jq3.\n+\n+      * major version bump\n+\n+      Co-authored-by: Peter Holzer <peter.holzer@agitator.com>\n+      Co-authored-by: Peter Mathis <peter.mathis@kombinat.at> (#380)\n+\n+\n+Bug fixes:\n+\n+\n+- Force view_methods to be a tuple on setup and uninstall (#337)\n+\n+\n+5.6.2 (2020-09-26)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Fixed deprecation warning for ComponentLookupError.\n+  Fixed deprecation warning for ILanguageSchema, depend on ``plone.i18n`` 4.0.4.\n+  Fixed deprecation warning for IObjectEvent from zope.component.\n+  Fixed deprecation warning for zope.site.hooks.\n+  [maurits] (#3130)\n+\n+\n+5.6.1 (2020-06-24)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Hide left and right portlet columns on babel add view. Fixes #373 [iham] (#373)\n+\n+\n+5.6.0 (2020-05-06)\n+------------------\n+\n+New features:\n+\n+\n+- Inherit IPloneAppMultilingualInstalled layer from IPloneFormLayer for better\n+  LIF widget overriding.\n+  [petschki] (#371)\n+\n+\n+Bug fixes:\n+\n+\n+- Move metadata to setup.cfg in order to avoid encoding problems in CHANGES.rst running Plone 6.0 on Python 3.6, see #372.\n+  [jensens] (#372)\n+\n+\n+5.5.1 (2020-04-20)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Minor packaging updates. (#1)\n+\n+\n+5.5.0 (2019-12-11)\n+------------------\n+\n+New features:\n+\n+\n+- Remove the \'set_language\' parameter when \'always_set_cookie\' is enabled in language control panel. See #362\n+  [erral] (#362)\n+\n+\n+5.4.2 (2019-11-25)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Use the shared \'Plone test setup\' and \'Plone test teardown\' keywords in Robot tests.\n+  [Rotonen] (#349)\n+\n+\n+5.4.1 (2019-08-23)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- fix adding new language when Language Independent Folder has content\n+  [petschki] (#358)\n+- add/update translation forms doesn\'t show error return from z3c form validation\n+  [mamico] (#360)\n+\n+\n+5.4.0 (2019-07-18)\n+------------------\n+\n+New features:\n+\n+\n+- Add low level events and notifies:\n+  on register, update and remove of a translation to a translation groups.\n+  [jensens] (#256)\n+\n+\n+Bug fixes:\n+\n+\n+- Remove deprecation warnings in tests.\n+  Increase readability\n+  Add code comments.\n+  Remove superfluos reindex of "Language" in manager.\n+  [jensens] (#256)\n+- wrong check for default addview in addtranslation traverser\n+  [mauro] (#355)\n+- Remove any dependency to ``archetypes.multilingual``, since this is a indirection.\n+  Remove all dependencies that are already part of ``Products.CMFPlone``.\n+  All version specifications were reduced to use a recent ``Products.CMFPlone``.\n+  The ``decorator`` dependency is no longer used.\n+  [jensens] (#357)\n+\n+\n+5.3.5 (2019-05-21)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Setting named behavior instead of dotted on fti during install. [iham] (#345)\n+\n+\n+5.3.4 (2019-05-04)\n+------------------\n+\n+Bug fixes:\n+\n+- Avoid browser to permanently cache first redirection to negotiated lang (#347)\n+  [laulaz]\n+\n+- Moved to named behaviors. [iham] (#342)\n+\n+\n+5.3.3 (2019-04-29)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Fix toolbar icon\n+  [agitator] (#338)\n+- Fix DeprecationWarning ``ILanguageSchema`` was moved to ``plone.i18n``. [jensens] (#339)\n+\n+\n 5.3.2 (2019-02-08)\n ------------------\n \n@@ -76,6 +299,10 @@ Bug fixes:\n - Fixed tests now that Catalan has translated \xe2\x80\x98assets\xe2\x80\x99 into \xe2\x80\x98recursos\xe2\x80\x99.\n   [maurits]\n \n+- Run addAttributeTG for the site root when installing. This prevents\n+  triggering plone.protect.\n+  [jaroel]\n+\n \n 5.2.0 (2018-04-04)\n ------------------\ndiff --git a/docs/CREDITS.txt b/CREDITS.rst\nsimilarity index 100%\nrename from docs/CREDITS.txt\nrename to CREDITS.rst\ndiff --git a/README.rst b/README.rst\nindex 5f370627..fb92fbb9 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -31,11 +31,11 @@ Components\n \n PAM is composed of two packages. One is mandatory:\n \n-    * plone.app.multilingual (core, UI, enables Dexterity support via a behavior)\n+* plone.app.multilingual (core, UI, enables Dexterity support via a behavior)\n \n and one optional:\n \n-    * archetypes.multilingual (enables Archetypes support)\n+* archetypes.multilingual (enables Archetypes support)\n \n \n Usage\n@@ -87,9 +87,8 @@ Translation locator policy\n \n When translating content, the policy influences how the translated content will be placed in the site\'s structure. There are two policies to choose from:\n \n-    * LP way, the translation gets placed in the nearest translated folder in the parent\'s hierarchy\n-\n-    * Ask user where to place the translated element in the destination language root folder\n+* LP way, the translation gets placed in the nearest translated folder in the parent\'s hierarchy\n+* Ask user where to place the translated element in the destination language root folder\n \n \n Language selector policy\n@@ -97,8 +96,8 @@ Language selector policy\n \n While browsing the site, the language selector viewlet allows users to switch the site\'s content language. There are two policies in place in case the translation of a specific language does not exist (yet):\n \n-    * LP way, the selector shows the nearest translated container.\n-    * Shows the user an informative view that shows the currently available translations for the current content.\n+* LP way, the selector shows the nearest translated container.\n+* Shows the user an informative view that shows the currently available translations for the current content.\n \n \n The assets folder - a shared "Language Independent Folder"\n@@ -237,12 +236,12 @@ All the internal features are implemented on the package plone.app.multilingual.\n \n The key points are:\n \n-    1. Each translation is a content object\n-    2. There is no canonical object\n-    3. The translation reference storage is external to the content object\n-    4. Adapt all the steps on translation\n-    5. Language get/set via an unified adapter\n-    6. Translatable marker interface(s)\n+1. Each translation is a content object\n+2. There is no canonical object\n+3. The translation reference storage is external to the content object\n+4. Adapt all the steps on translation\n+5. Language get/set via an unified adapter\n+6. Translatable marker interface(s)\n \n \n There is no canonical content object\n@@ -262,21 +261,26 @@ Adapt all the steps on translation\n \n The different aspects involved on a translation are adapted, so it\'s possible to create different policies for different types, sites, etc.\n \n-  * ITranslationFactory - General factory used to create a new content\n+``ITranslationFactory``\n+    General factory used to create a new content\n \n-    * ITranslationLocator - Where we are going to locate the new translated content\n+``ITranslationLocator``\n+    Where we are going to locate the new translated content\n \n-        Default : If the parent folder is translated create the content on the translated parent folder, otherwise create on the parent folder.\n+    Default : If the parent folder is translated create the content on the translated parent folder, otherwise create on the parent folder.\n \n-    * ITranslationCloner - Method to clone the original object to the new one\n+``ITranslationCloner``\n+    Method to clone the original object to the new one\n \n-        Default : Nothing\n+    Default : Nothing\n \n-    * ITranslationIdChooser - Which id is the translation\n+``ITranslationIdChooser``\n+    Which id is the translation\n \n-        Default : The original id + lang code-block\n+    Default : The original id + lang code-block\n \n-  * ILanguageIndependentFieldsManager - Manager for language independent fields\n+``ILanguageIndependentFieldsManager``\n+    Manager for language independent fields\n \n     Default: Nothing\n \ndiff --git a/buildout.cfg b/buildout.cfg\ndeleted file mode 100644\nindex d0f1508a..00000000\n--- a/buildout.cfg\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-[buildout]\n-extends =\n-    test-plone-5.1.x.cfg\ndiff --git a/jenkins.cfg b/jenkins.cfg\ndeleted file mode 100644\nindex 3c2ccdc5..00000000\n--- a/jenkins.cfg\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-[buildout]\n-extends =\n-    buildout.cfg\n-    https://raw.github.com/plone/buildout.jenkins/master/jenkins.cfg\n-    https://raw.github.com/plone/buildout.jenkins/master/jenkins-code-analysis.cfg\n-jenkins-test-eggs =\n-    plone.app.multilingual[test]\n-    archetypes.multilingual[test]\n-jenkins-test-directories =\n-    src/plone/app/multilingual\n-    extras/archetypes.multilingual/src/archetypes/multilingual\n-\ndiff --git a/news/338.bugfix b/news/338.bugfix\ndeleted file mode 100644\nindex 4e80877c..00000000\n--- a/news/338.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Fix toolbar icon\n-[agitator]\n\\ No newline at end of file\ndiff --git a/news/339.bugfix b/news/339.bugfix\ndeleted file mode 100644\nindex 49f5cce0..00000000\n--- a/news/339.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Fix DeprecationWarning ``ILanguageSchema`` was moved to ``plone.i18n``. [jensens]\n\\ No newline at end of file\ndiff --git a/setup.cfg b/setup.cfg\nindex 190e1a22..06f1a796 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,3 +1,29 @@\n+[metadata]\n+version = 6.0.0a6.dev0\n+name = plone.app.multilingual\n+description = Multilingual Plone Content package\n+long_description = file: README.rst, CREDITS.rst, CHANGES.rst\n+classifiers=\n+    Development Status :: 5 - Production/Stable\n+    Environment :: Web Environment\n+    Framework :: Plone\n+    Framework :: Plone :: 6.0\n+    Framework :: Plone :: Core\n+    Framework :: Zope :: 5\n+    License :: OSI Approved :: GNU General Public License v2 (GPLv2)\n+    Operating System :: OS Independent\n+    Programming Language :: Python\n+    Programming Language :: Python :: 3.7\n+    Programming Language :: Python :: 3.8\n+    Programming Language :: Python :: 3.9\n+url = https://github.com/plone/plone.app.multilingual\n+license = GPL\n+keywords = language, multilingual, content\n+author = Ramon Navarro, Victor Fernandez de Alba, awello et al\n+author_email = r.navarro@iskra.cat\n+maintainer = Plone Foundation\n+maintainer_email = releasemanager@plone.org\n+\n [check-manifest]\n ignore =\n     *.cfg\ndiff --git a/setup.py b/setup.py\nindex 75d88f4e..9115d66f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,65 +2,26 @@\n from setuptools import find_packages\n from setuptools import setup\n \n-import os\n-\n-\n-version = \'5.3.3.dev0\'\n \n setup(\n-    name=\'plone.app.multilingual\',\n-    version=version,\n-    description=\'Multilingual Plone UI package, enables maintenance of \'\n-                \'translations for both Dexterity types and Archetypes\',\n-    long_description=\'\\n\\n\'.join([\n-        open(\'README.rst\').read(),\n-        open(os.path.join(\'docs\', \'CREDITS.txt\')).read(),\n-        open(\'CHANGES.rst\').read(),\n-    ]),\n-    classifiers=[\n-        \'Framework :: Plone\',\n-        \'Framework :: Plone :: 5.2\',\n-        \'License :: OSI Approved :: GNU General Public License (GPL)\',\n-        \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 2.7\',\n-        \'Programming Language :: Python :: 3.6\',\n-        \'Programming Language :: Python :: 3.7\',\n-        \'Topic :: Software Development :: Libraries :: Python Modules\',\n-    ],\n-    url=\'https://github.com/plone/plone.app.multilingual\',\n-    license=\'GPL\',\n-    keywords=\'language multilingual content\',\n-    author=\'Ramon Navarro, Victor Fernandez de Alba, awello et al\',\n-    author_email=\'r.navarro@iskra.cat\',\n+    # metadata in setup.cfg\n     packages=find_packages(\'src\'),\n     package_dir={\'\': \'src\'},\n     namespace_packages=[\'plone\', \'plone.app\'],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'Products.CMFPlone>=5.0b1\',\n-        \'Products.GenericSetup>=1.8.2\',\n-        # we want p.a.layout >= 2.5.22 on 2.5.x branch OR >= 2.6.3\n-        \'plone.app.layout>=2.5.22,!=2.6.0,!=2.6.1,!=2.6.2\',\n-        \'plone.app.registry\',\n-        \'plone.app.z3cform\',\n-        \'plone.behavior\',\n-        \'plone.dexterity\',\n+        \'plone.i18n>=4.0.4\',\n         \'setuptools\',\n         \'six\',\n-        \'z3c.relationfield\',\n-        \'zope.publisher\',\n     ],\n     extras_require={\n         \'archetypes\': [\n             \'archetypes.multilingual\',\n         ],\n         \'test\': [\n-            \'plone.app.testing[robot]>=4.2.2\',\n+            \'plone.app.testing[robot]\',\n             \'plone.app.robotframework\',\n-            \'plone.app.contenttypes\',\n-            \'archetypes.multilingual\',\n-            \'decorator\',  # BBB\n         ],\n     },\n     entry_points="""\ndiff --git a/src/plone/app/multilingual/browser/add.py b/src/plone/app/multilingual/browser/add.py\nindex e3ff90fe..03ef47d8 100644\n--- a/src/plone/app/multilingual/browser/add.py\n+++ b/src/plone/app/multilingual/browser/add.py\n@@ -99,7 +99,7 @@ def traverse(self, name, ignored):\n             )\n         if add_view is None:\n             add_view = queryMultiAdapter((self.context, self.request, ti))\n-            if add_view is not None:\n+            if add_view is None:\n                 raise TraversalError(self.context, name)\n \n         add_view.__name__ = ti.factory\n@@ -127,6 +127,8 @@ def portal_url(self):\n \n     def render(self):\n         self.request[\'disable_border\'] = True\n+        self.request[\'disable_plone.leftcolumn\'] = True\n+        self.request[\'disable_plone.rightcolumn\'] = True\n         self.babel_content = super(MultilingualAddForm, self).render()\n         return self.babel()\n \ndiff --git a/src/plone/app/multilingual/browser/controlpanel.py b/src/plone/app/multilingual/browser/controlpanel.py\nindex 612e8fd1..7f3289e9 100644\n--- a/src/plone/app/multilingual/browser/controlpanel.py\n+++ b/src/plone/app/multilingual/browser/controlpanel.py\n@@ -14,7 +14,7 @@\n from z3c.form import button\n from zc.relation.interfaces import ICatalog as IRelationCatalog\n from zope.component import getUtility\n-from zope.component.interfaces import ComponentLookupError\n+from zope.interface.interfaces import ComponentLookupError\n from zope.i18nmessageid import MessageFactory\n from zope.schema.interfaces import IVocabularyFactory\n \ndiff --git a/src/plone/app/multilingual/browser/javascript/babel_helper.js b/src/plone/app/multilingual/browser/javascript/babel_helper.js\nindex 4296ef56..0792d47c 100644\n--- a/src/plone/app/multilingual/browser/javascript/babel_helper.js\n+++ b/src/plone/app/multilingual/browser/javascript/babel_helper.js\n@@ -169,7 +169,7 @@\n         });\n     }\n \n-    $(window).load(function () {\n+    $(window).on("load", function () {\n \n         /* alert about language independent field */\n         $(\'.languageindependent\').click(function () {\ndiff --git a/src/plone/app/multilingual/browser/migrator.py b/src/plone/app/multilingual/browser/migrator.py\nindex 5b702957..9b21dfac 100644\n--- a/src/plone/app/multilingual/browser/migrator.py\n+++ b/src/plone/app/multilingual/browser/migrator.py\n@@ -14,7 +14,7 @@\n from zc.relation.interfaces import ICatalog\n from zope.component import getUtility\n from zope.component.hooks import getSite\n-from zope.component.interfaces import ComponentLookupError\n+from zope.interface.interfaces import ComponentLookupError\n from zope.interface import Interface\n \n import logging\ndiff --git a/src/plone/app/multilingual/browser/modify.py b/src/plone/app/multilingual/browser/modify.py\nindex 152545e5..bd2cb694 100644\n--- a/src/plone/app/multilingual/browser/modify.py\n+++ b/src/plone/app/multilingual/browser/modify.py\n@@ -48,16 +48,18 @@ class ConnectTranslation(AutoExtensibleForm, Form):\n                                default=u"Connect translation"))\n     def handle_add(self, action):\n         data, errors = self.extractData()\n-        if not errors:\n-            content = data[\'content\']\n-            language = data[\'language\']\n-            ILanguage(content).set_language(language)\n-            itm = ITranslationManager(self.context)\n-            # the \'register_translation\'-method takes content OR\n-            # UUID as second parameter. We need to use the UUID\n-            # here because otherwise the catalog can\'t be acquired\n-            # and the translation index is not updated\n-            itm.register_translation(language, IUUID(content))\n+        if errors:\n+            self.status = self.formErrorsMessage\n+            return\n+        content = data[\'content\']\n+        language = data[\'language\']\n+        ILanguage(content).set_language(language)\n+        itm = ITranslationManager(self.context)\n+        # the \'register_translation\'-method takes content OR\n+        # UUID as second parameter. We need to use the UUID\n+        # here because otherwise the catalog can\'t be acquired\n+        # and the translation index is not updated\n+        itm.register_translation(language, IUUID(content))\n         return self.request.response.redirect(\n             self.context.absolute_url() + \'/modify_translations\')\n \ndiff --git a/src/plone/app/multilingual/browser/selector.py b/src/plone/app/multilingual/browser/selector.py\nindex 4335ae08..0bd6167e 100644\n--- a/src/plone/app/multilingual/browser/selector.py\n+++ b/src/plone/app/multilingual/browser/selector.py\n@@ -2,6 +2,9 @@\n from plone.app.i18n.locales.browser.selector import LanguageSelector\n from plone.app.multilingual.interfaces import ITG\n from plone.app.multilingual.interfaces import NOTG\n+from plone.i18n.interfaces import ILanguageSchema\n+from plone.registry.interfaces import IRegistry\n+from zope.component import getUtility\n from zope.component import queryAdapter\n from zope.component.hooks import getSite\n from ZTUtils import make_query\n@@ -79,16 +82,21 @@ class LanguageSelectorViewlet(LanguageSelector):\n     def languages(self):\n         languages_info = super(LanguageSelectorViewlet, self).languages()\n         results = []\n+        registry = getUtility(IRegistry)\n+        settings = registry.forInterface(ILanguageSchema, prefix="plone")\n         translation_group = queryAdapter(self.context, ITG)\n         if translation_group is None:\n             translation_group = NOTG\n+\n         for lang_info in languages_info:\n             # Avoid to modify the original language dict\n             data = lang_info.copy()\n             data[\'translated\'] = True\n-            query_extras = {\n-                \'set_language\': data[\'code\'],\n-            }\n+            query_extras = {}\n+            if not settings.set_cookie_always:\n+                query_extras.update({\n+                    \'set_language\': data[\'code\'],\n+                })\n             post_path = getPostPath(self.context, self.request)\n             if post_path:\n                 query_extras[\'post_path\'] = post_path\ndiff --git a/src/plone/app/multilingual/browser/setup.py b/src/plone/app/multilingual/browser/setup.py\nindex 558c4ea7..02475db7 100644\n--- a/src/plone/app/multilingual/browser/setup.py\n+++ b/src/plone/app/multilingual/browser/setup.py\n@@ -264,8 +264,8 @@ def setupLanguageSwitcher(self):\n         tt = getToolByName(self.context, \'portal_types\')\n         site = tt[\'Plone Site\']\n \n-        if \'language-switcher\' not in site.view_methods:\n-            methods = site.view_methods\n+        methods = tuple(site.view_methods)\n+        if \'language-switcher\' not in methods:\n             site.view_methods = methods + (\'language-switcher\', )\n             site.default_view = \'language-switcher\'\n             self.context.reindexObject()\n@@ -281,6 +281,6 @@ def ensure_translatable(self, type_):\n \n         if IDexterityFTI.providedBy(fti):\n             behaviors = list(fti.behaviors)\n-            behaviors.append(IDexterityTranslatable.__identifier__)\n+            behaviors.append(\'plone.translatable\')\n             behaviors = tuple(set(behaviors))\n             fti._updateProperty(\'behaviors\', behaviors)\ndiff --git a/src/plone/app/multilingual/browser/switcher.py b/src/plone/app/multilingual/browser/switcher.py\nindex 2d9ddca1..a06477b0 100644\n--- a/src/plone/app/multilingual/browser/switcher.py\n+++ b/src/plone/app/multilingual/browser/switcher.py\n@@ -28,4 +28,4 @@ def __call__(self):\n         if not langCookie or langCookie != target:\n             self.request.response.setCookie(\'I18N_LANGUAGE\', target, path=\'/\')\n \n-        self.request.response.redirect(url, status=301)\n+        self.request.response.redirect(url, status=302)\ndiff --git a/src/plone/app/multilingual/browser/templates/add-form-is-translation.pt b/src/plone/app/multilingual/browser/templates/add-form-is-translation.pt\nindex 13a9b3fb..67af4856 100644\n--- a/src/plone/app/multilingual/browser/templates/add-form-is-translation.pt\n+++ b/src/plone/app/multilingual/browser/templates/add-form-is-translation.pt\n@@ -1,18 +1,27 @@\n <div class="container">\n-  <div class="portalMessage info" role="status">\n-    <strong i18n:translate="" i18n:domain="plone">\n-      Info\n-    </strong>\n-    <tal:block i18n:domain="plone"\n-               i18n:translate="add-form-is-translation">\n-      This object is going to be a translation to <span i18n:name="language" tal:replace="python:view.language_name(view.language())"></span> from:\n-    </tal:block>\n-    <ul>\n-      <li tal:repeat="origin view/origin"><span tal:content="python:view.language_name(origin.Language)"></span>: <a href="#" class="link-overlay" tal:attributes="href origin/getURL">  <span tal:content="origin/Title"></span></a></li>\n-    </ul>\n-    <span i18n:domain="plone" i18n:translate="create-object-without-translation">\n+    <div class="row">\n+        <div class="alert alert-info col-12" role="alert">\n+            <strong i18n:translate="" i18n:domain="plone">\n+                Info\n+            </strong>\n+            <tal:block i18n:domain="plone"\n+                     i18n:translate="add-form-is-translation">\n+                This object is going to be a translation to\n+                <span i18n:name="language" tal:replace="python:view.language_name(view.language())"></span>\n+                from:\n+            </tal:block>\n+            <ul>\n+                <li tal:repeat="origin view/origin">\n+                    <span tal:content="python:view.language_name(origin.Language)"></span>:\n+                    <a href="#"\n+                       class="link-overlay" tal:attributes="href origin/getURL">\n+                        <span tal:content="origin/Title"></span></a></li>\n+            </ul>\n+            <span i18n:domain="plone" i18n:translate="create-object-without-translation">\n       If you want to create this object without being a translation press\n-      <a href="#" class="link-overlay" i18n:name="url" tal:attributes="href view/returnURL" i18n:translate="">here</a>\n+      <a href="#"\n+         class="link-overlay" i18n:name="url" tal:attributes="href view/returnURL" i18n:translate="">here</a>\n     </span>\n-  </div>\n+        </div>\n+    </div>\n </div>\ndiff --git a/src/plone/app/multilingual/browser/templates/controlpanel.pt b/src/plone/app/multilingual/browser/templates/controlpanel.pt\nindex fca5b46e..b13b2dd9 100644\n--- a/src/plone/app/multilingual/browser/templates/controlpanel.pt\n+++ b/src/plone/app/multilingual/browser/templates/controlpanel.pt\n@@ -8,8 +8,9 @@\n \n <body>\n \n-<div metal:fill-slot="prefs_configlet_main">\n+<tal:main metal:fill-slot="prefs_configlet_main">\n \n+  <header>\n     <a id="setup-link" class="link-parent"\n        tal:attributes="href string:$portal_url/@@overview-controlpanel"\n        i18n:translate="">\n@@ -21,27 +22,27 @@\n     <div metal:use-macro="context/global_statusmessage/macros/portal_message">\n       Portal status message\n     </div>\n+  </header>\n+  <div id="content-core">\n+      <div id="layout-contents">\n+          <span tal:replace="structure view/contents" />\n+      </div>\n+      <div class="mt-4">\n+        <p i18n:translate="">\n+          The\n+          <a i18n:name="url" i18n:translate="" tal:attributes="href string:${context/absolute_url}/multilingual-map">multilingual map view\n+          </a>\n+          allows you to view in a graphical manner the already translated items and its relations.\n+        </p>\n+        <p i18n:translate=""\n+            tal:condition="view/isLPinstalled">\n+          In case you want to migrate from Products.LinguaPlone access to the\n+          <a i18n:name="url" i18n:translate="" tal:attributes="href string:${context/absolute_url}/lp-migration">migration procedure.\n+          </a>\n+        </p>\n+      </div>\n+  </div>\n \n-    <div id="content-core">\n-        <div id="layout-contents">\n-            <span tal:replace="structure view/contents" />\n-        </div>\n-        <div>\n-          <p i18n:translate="">\n-            The\n-            <a i18n:name="url" i18n:translate="" tal:attributes="href string:${context/absolute_url}/multilingual-map">multilingual map view\n-            </a>\n-            allows you to view in a graphical manner the already translated items and its relations.\n-          </p>\n-          <p i18n:translate=""\n-             tal:condition="view/isLPinstalled">\n-            In case you want to migrate from Products.LinguaPlone access to the\n-            <a i18n:name="url" i18n:translate="" tal:attributes="href string:${context/absolute_url}/lp-migration">migration procedure.\n-            </a>\n-          </p>\n-        </div>\n-    </div>\n-\n-</div>\n+</tal:main>\n </body>\n </html>\ndiff --git a/src/plone/app/multilingual/browser/templates/dexterity_edit.pt b/src/plone/app/multilingual/browser/templates/dexterity_edit.pt\nindex f1fddce5..90954606 100644\n--- a/src/plone/app/multilingual/browser/templates/dexterity_edit.pt\n+++ b/src/plone/app/multilingual/browser/templates/dexterity_edit.pt\n@@ -11,8 +11,9 @@\n     <script src="++resource++plone.app.multilingual.javascript/babel_helper.js"></script>\n     <input type="hidden" id="url_translate" value="" tal:attributes="value context/absolute_url"/>\n     <input type="hidden" id="gtranslate_service_available" value="" tal:attributes="value pamutils/gtenabled"/>\n+\n     <div class=\'col-md-6\'>\n-        <h1 i18n:translate="heading_available_translations">Available translations for this content</h1>\n+        <h2 i18n:translate="heading_available_translations">Available translations for this content</h2>\n         <div id="trans-selector"\n              tal:define="languages pamutils/translated_languages;\n              max_nr_of_buttons view/max_nr_of_buttons">\n@@ -40,7 +41,7 @@\n     </div>\n     <div class=\'col-md-6\'>\n     <div id="header-translation">\n-        <h1 i18n:translate="translation_to">Translation to <span i18n:name="language" tal:content="pamutils/current_language_name" tal:omit-tag="">es</span></h1>\n+        <h2 i18n:translate="translation_to">Translation to <span i18n:name="language" tal:content="pamutils/current_language_name" tal:omit-tag="">es</span></h2>\n     </div>\n     <div id="form-target">\n       <tal:block content="structure view/babel_content">Content edit</tal:block>\ndiff --git a/src/plone/app/multilingual/browser/templates/modify_translations.pt b/src/plone/app/multilingual/browser/templates/modify_translations.pt\nindex dbddabb8..a32f8adc 100644\n--- a/src/plone/app/multilingual/browser/templates/modify_translations.pt\n+++ b/src/plone/app/multilingual/browser/templates/modify_translations.pt\n@@ -10,71 +10,75 @@\n \n <metal:main fill-slot="main">\n \n-  <h1 class="documentFirstHeading"\n-      i18n:translate=""\n-      metal:define-slot="heading">\n-    Modify translations\n-  </h1>\n+    <header>\n+      <h1 class="documentFirstHeading"\n+          i18n:translate=""\n+          metal:define-slot="heading">\n+        Modify translations\n+      </h1>\n \n-  <div class="documentDescription" i18n:translate="long_description_modify_translations">\n-    This form allows you to add or remove translations for the current object.\n-  </div>\n+      <div class="documentDescription" i18n:translate="long_description_modify_translations">\n+        This form allows you to add or remove translations for the current object.\n+      </div>\n+    </header>\n \n   <div id="content-core">\n \n-    <table class="listing" id="translations-overview" summary="Translations overview">\n+    <table class="table table-bordered table-striped table-sm" id="translations-overview" summary="Translations overview">\n       <tal:langs repeat="lang view/available_languages">\n-        <tr tal:define="translation python:view.get_translation(lang);\n-                        oddrow repeat/lang/odd;"\n-            tal:attributes="class python:oddrow and \'odd\' or \'even\'">\n-          <td class="langColumn" tal:define="activeLanguage context/Language|nothing">\n-            <span tal:attributes="class python:lang == activeLanguage and \'activeLanguage\' or None"\n+        <tr tal:define="translation python:view.get_translation(lang);">\n+          <td class="align-middle text-center" tal:define="activeLanguage context/Language|nothing">\n+            <span tal:attributes="class python:lang == activeLanguage and \'activeLanguage font-weight-bold\' or None"\n                   tal:content="lang"></span>\n           </td>\n           <td>\n-            <tal:hastranslation condition="translation">\n+            <tal:hastranslation condition="python:translation">\n               <h3 class="translationTitle" tal:content="translation/Title">Title</h3>\n               <a class="translationURL" href="#" tal:attributes="href translation/absolute_url">\n                 <span tal:replace="python:\'/\'.join(translation.getPhysicalPath())">URL</span>\n               </a>\n             </tal:hastranslation>\n-            <tal:notranslation condition="not:translation">\n+            <tal:notranslation condition="python:not translation">\n               <h3 class="translationTitle discreet" i18n:translate="">Translation missing</h3>\n             </tal:notranslation>\n           </td>\n-          <td class="actionColumn">\n+          <td class="align-middle text-center">\n             <tal:hastranslation condition="python:translation and translation != context">\n               <a href="#" title="Disconnect translation" class="pat-plone-modal disconnectTranslationAction"\n                  tal:attributes="href string:${context/absolute_url}/disconnect_translation?came_from=${context/UID}&language=${lang}"\n                  i18n:attributes="title disconnect_translation">\n-                  <svg aria-hidden="true" width="14" height="14" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M503 1271l-256 256q-10 9-23 9-12 0-23-9-9-10-9-23t9-23l256-256q10-9 23-9t23 9q9 10 9 23t-9 23zm169 41v320q0 14-9 23t-23 9-23-9-9-23v-320q0-14 9-23t23-9 23 9 9 23zm-224-224q0 14-9 23t-23 9h-320q-14 0-23-9t-9-23 9-23 23-9h320q14 0 23 9t9 23zm1264 128q0 120-85 203l-147 146q-83 83-203 83-121 0-204-85l-334-335q-21-21-42-56l239-18 273 274q27 27 68 27.5t68-26.5l147-146q28-28 28-67 0-40-28-68l-274-275 18-239q35 21 56 42l336 336q84 86 84 204zm-617-724l-239 18-273-274q-28-28-68-28-39 0-68 27l-147 146q-28 28-28 67 0 40 28 68l274 274-18 240q-35-21-56-42l-336-336q-84-86-84-204 0-120 85-203l147-146q83-83 203-83 121 0 204 85l334 335q21 21 42 56zm633 84q0 14-9 23t-23 9h-320q-14 0-23-9t-9-23 9-23 23-9h320q14 0 23 9t9 23zm-544-544v320q0 14-9 23t-23 9-23-9-9-23v-320q0-14 9-23t23-9 23 9 9 23zm407 151l-256 256q-11 9-23 9t-23-9q-9-10-9-23t9-23l256-256q10-9 23-9t23 9q9 10 9 23t-9 23z"/></svg>\n-                <span class="actionLabel" i18n:translate="disconnect_translation">Disconnect translation</span>\n+                  <img src="" alt="" width="20" height="20" class="icon me-2"\n+                           tal:attributes="src string:++plone++bootstrap-icons/arrows-angle-expand.svg"/><span \n+                    class="d-none d-md-inline-block text-xs-right" i18n:translate="disconnect_translation">Disconnect translation</span>\n               </a>\n             </tal:hastranslation>\n-            <tal:notranslation condition="not:translation">\n+            <tal:notranslation condition="python:not translation">\n               <a href="#" title="Connect existing translation" class="pat-plone-modal connectTranslationAction"\n                  tal:attributes="href string:${context/absolute_url}/connect_translation?language=${lang}"\n                  i18n:attributes="title connect_existing_translation">\n-                  <svg aria-hidden="true" width="14" height="14" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1520 1216q0-40-28-68l-208-208q-28-28-68-28-42 0-72 32 3 3 19 18.5t21.5 21.5 15 19 13 25.5 3.5 27.5q0 40-28 68t-68 28q-15 0-27.5-3.5t-25.5-13-19-15-21.5-21.5-18.5-19q-33 31-33 73 0 40 28 68l206 207q27 27 68 27 40 0 68-26l147-146q28-28 28-67zm-703-705q0-40-28-68l-206-207q-28-28-68-28-39 0-68 27l-147 146q-28 28-28 67 0 40 28 68l208 208q27 27 68 27 42 0 72-31-3-3-19-18.5t-21.5-21.5-15-19-13-25.5-3.5-27.5q0-40 28-68t68-28q15 0 27.5 3.5t25.5 13 19 15 21.5 21.5 18.5 19q33-31 33-73zm895 705q0 120-85 203l-147 146q-83 83-203 83-121 0-204-85l-206-207q-83-83-83-203 0-123 88-209l-88-88q-86 88-208 88-120 0-204-84l-208-208q-84-84-84-204t85-203l147-146q83-83 203-83 121 0 204 85l206 207q83 83 83 203 0 123-88 209l88 88q86-88 208-88 120 0 204 84l208 208q84 84 84 204z"/></svg>\n-                <span class="actionLabel" i18n:translate="connect_existing_translation">Connect existing translation</span>\n+                  <img src="" alt="" width="20" height="20" class="icon me-2"\n+                           tal:attributes="src string:++plone++bootstrap-icons/arrows-angle-contract.svg"/><span \n+                    class="d-none d-md-inline-block" i18n:translate="connect_existing_translation">Connect existing translation</span>\n               </a>\n             </tal:notranslation>\n           </td>\n-          <td class="actionColumn">\n+          <td class="align-middle text-center">\n             <tal:hastranslation condition="python:translation and translation != context">\n               <a href="#" title="Delete translated item" class="pat-plone-modal deleteTranslationAction"\n                  tal:attributes="href string:${translation/absolute_url}/delete_confirmation"\n                  i18n:attributes="title delete_translated_item">\n-                <svg aria-hidden="true" width="14" height="14" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path class="icon" d="M704 1376v-704q0-14-9-23t-23-9h-64q-14 0-23 9t-9 23v704q0 14 9 23t23 9h64q14 0 23-9t9-23zm256 0v-704q0-14-9-23t-23-9h-64q-14 0-23 9t-9 23v704q0 14 9 23t23 9h64q14 0 23-9t9-23zm256 0v-704q0-14-9-23t-23-9h-64q-14 0-23 9t-9 23v704q0 14 9 23t23 9h64q14 0 23-9t9-23zm-544-992h448l-48-117q-7-9-17-11h-317q-10 2-17 11zm928 32v64q0 14-9 23t-23 9h-96v948q0 83-47 143.5t-113 60.5h-832q-66 0-113-58.5t-47-141.5v-952h-96q-14 0-23-9t-9-23v-64q0-14 9-23t23-9h309l70-167q15-37 54-63t79-26h320q40 0 79 26t54 63l70 167h309q14 0 23 9t9 23z"/></svg>\n-                <span class="actionLabel" i18n:translate="delete_translated_item">Delete translated item</span>\n+                  <img src="" alt="" width="20" height="20" class="icon me-2"\n+                           tal:attributes="src string:++plone++bootstrap-icons/trash.svg"/><span \n+                    class="d-none d-md-inline-block" i18n:translate="delete_translated_item">Delete translated item</span>\n               </a>\n             </tal:hastranslation>\n-            <tal:notranslation condition="not:translation">\n+            <tal:notranslation condition="python:not translation">\n               <a href="#" title="Add translation" class="pat-plone-modal addTranslationAction"\n                  tal:attributes="href string:${context/absolute_url}/@@create_translation?language=${lang}"\n                  i18n:attributes="title add_translation">\n-                  <svg aria-hidden="true" width="14" height="14" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1600 736v192q0 40-28 68t-68 28h-416v416q0 40-28 68t-68 28h-192q-40 0-68-28t-28-68v-416h-416q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h416v-416q0-40 28-68t68-28h192q40 0 68 28t28 68v416h416q40 0 68 28t28 68z"/></svg>\n-                <span class="actionLabel" i18n:translate="add_translation">Add translation</span>\n+                  <img src="" alt="" width="20" height="20"\n+                           tal:attributes="src string:++plone++bootstrap-icons/plus.svg"/><span \n+                    class="d-none d-md-inline-block" i18n:translate="add_translation">Add translation</span>\n               </a>\n             </tal:notranslation>\n           </td>\ndiff --git a/src/plone/app/multilingual/browser/update.py b/src/plone/app/multilingual/browser/update.py\nindex 9b309665..2831e787 100644\n--- a/src/plone/app/multilingual/browser/update.py\n+++ b/src/plone/app/multilingual/browser/update.py\n@@ -20,12 +20,14 @@ class UpdateLanguageForm(form.Form):\n     @button.buttonAndHandler(_(u"update_language", default=u"Update Language"))\n     def handle_update(self, action):\n         data, errors = self.extractData()\n-        new_object = self.context\n+        if errors:\n+            self.status = self.formErrorsMessage\n+            return\n \n-        if not errors:\n-            language = data[\'language\']\n-            # We need to move the object to its place!!\n-            new_object = multilingualMoveObject(self.context, language)\n+        new_object = self.context\n+        language = data[\'language\']\n+        # We need to move the object to its place!!\n+        new_object = multilingualMoveObject(self.context, language)\n \n         return self.request.response.redirect(\n             new_object.absolute_url() + \'?set_language=\' + language)\ndiff --git a/src/plone/app/multilingual/content/lif.py b/src/plone/app/multilingual/content/lif.py\nindex e78ad21f..3b265b4b 100644\n--- a/src/plone/app/multilingual/content/lif.py\n+++ b/src/plone/app/multilingual/content/lif.py\n@@ -3,6 +3,8 @@\n from Products.CMFCore.utils import getToolByName\n from zope.component.hooks import getSite\n \n+from plone.dexterity.content import Container\n+\n \n def connect_with_others(ob, event):\n     pc = getToolByName(getSite(), \'portal_catalog\')\ndiff --git a/src/plone/app/multilingual/dx/cloner.py b/src/plone/app/multilingual/dx/cloner.py\nindex f5c489e9..c4221e3f 100644\n--- a/src/plone/app/multilingual/dx/cloner.py\n+++ b/src/plone/app/multilingual/dx/cloner.py\n@@ -49,6 +49,9 @@ def has_independent_fields(self):\n         return False\n \n     def copy_relation(self, relation_value, target_language):\n+        if not relation_value or relation_value.isBroken():\n+            return\n+\n         obj = relation_value.to_object\n         intids = getUtility(IIntIds)\n         translation = ITranslationManager(obj).get_translation(target_language)\n@@ -62,20 +65,24 @@ def copy_fields(self, translation):\n \n         target_language = queryAdapter(translation, ILanguage).get_language()\n \n-        def relation_copier(rel, lang=target_language, fun=self.copy_relation):\n-            return fun(rel, lang)\n-\n         for schema in iterSchemata(self.context):\n             for field_name in schema:\n                 if ILanguageIndependentField.providedBy(schema[field_name]):\n                     value = getattr(schema(self.context), field_name, _marker)\n-\n                     if value == _marker:\n                         continue\n                     elif IRelationValue.providedBy(value):\n                         value = self.copy_relation(value, target_language)\n                     elif IRelationList.providedBy(schema[field_name]):\n-                        value = list(map(relation_copier, value or []))\n+                        if not value:\n+                            value = []\n+                        else:\n+                            new_value = []\n+                            for relation in value:\n+                                copied_relation = self.copy_relation(relation, target_language)\n+                                if copied_relation:\n+                                    new_value.append(copied_relation)\n+                            value = new_value\n \n                     doomed = True\n                     setattr(schema(translation),\ndiff --git a/src/plone/app/multilingual/dx/schemaeditor.py b/src/plone/app/multilingual/dx/schemaeditor.py\nindex 823eee4c..a431a6fe 100644\n--- a/src/plone/app/multilingual/dx/schemaeditor.py\n+++ b/src/plone/app/multilingual/dx/schemaeditor.py\n@@ -52,9 +52,15 @@ def _write_languageindependent(self, value):\n # additional conditions pass:\n @adapter(ISchemaContext, IField)\n def get_li_schema(schema_context, field):\n-    behavior = \'plone.app.multilingual.dx.interfaces.IDexterityTranslatable\'\n     fti = getattr(schema_context, \'fti\', None)\n-    if fti and behavior in getattr(fti, \'behaviors\', []):\n+    lang_behavior = set(\n+        (\n+            \'plone.app.multilingual.dx.interfaces.IDexterityTranslatable\',\n+            \'plone.translatable\',\n+        ),\n+    )\n+    fti_behaviors = set(getattr(fti, \'behaviors\', []))\n+    if lang_behavior.intersection(fti_behaviors):\n         return IFieldLanguageIndependent\n \n \ndiff --git a/src/plone/app/multilingual/events.py b/src/plone/app/multilingual/events.py\nindex 479d4ace..f7ec2b70 100644\n--- a/src/plone/app/multilingual/events.py\n+++ b/src/plone/app/multilingual/events.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n-from zope.component.interfaces import IObjectEvent\n from zope.interface import Attribute\n from zope.interface import implementer\n+from zope.interface.interfaces import IObjectEvent\n \n \n class IObjectWillBeTranslatedEvent(IObjectEvent):\n@@ -19,6 +19,39 @@ class IObjectTranslatedEvent(IObjectEvent):\n     language = Attribute("Target language.")\n \n \n+class ITranslationRegisteredEvent(IObjectEvent):\n+    """Sent after a new translation was registered.\n+\n+    This is meant to be notified on low-level manager level only.\n+    """\n+\n+    object = Attribute("The base object.")\n+    target = Attribute("The translated object.")\n+    language = Attribute("The language of the translated obejct.")\n+\n+\n+class ITranslationUpdatedEvent(IObjectEvent):\n+    """Sent after an translation was moved to point to a different object\n+\n+    This is meant to be notified on low-level manager level only.\n+    """\n+\n+    object = Attribute("The base object.")\n+    old_object = Attribute("The old translation, now orphaned.")\n+    language = Attribute("The language of the objects.")\n+\n+\n+class ITranslationRemovedEvent(IObjectEvent):\n+    """Sent after an translation was removed.\n+\n+    This is meant to be notified on low-level manager level only.\n+    """\n+\n+    object = Attribute("The base object.")\n+    old_object = Attribute("The old translation, now orphaned.")\n+    language = Attribute("The language of the objects.")\n+\n+\n @implementer(IObjectWillBeTranslatedEvent)\n class ObjectWillBeTranslatedEvent(object):\n     """Sent before an object is translated."""\n@@ -36,3 +69,36 @@ def __init__(self, context, target, language):\n         self.object = context\n         self.target = target\n         self.language = language\n+\n+\n+@implementer(ITranslationRegisteredEvent)\n+class TranslationRegisteredEvent(object):\n+    """Sent after a new translation was registered.\n+    """\n+\n+    def __init__(self, context, target, language):\n+        self.object = context\n+        self.target = target\n+        self.language = language\n+\n+\n+@implementer(ITranslationUpdatedEvent)\n+class TranslationUpdatedEvent(object):\n+    """Sent after an translation was moved to point to a different object\n+    """\n+\n+    def __init__(self, context, old_object, language):\n+        self.object = context\n+        self.old_object = old_object\n+        self.language = language\n+\n+\n+@implementer(ITranslationRemovedEvent)\n+class TranslationRemovedEvent(object):\n+    """Sent after an translation was moved to point to a different object\n+    """\n+\n+    def __init__(self, context, old_object, language):\n+        self.object = context\n+        self.old_object = old_object\n+        self.language = language\ndiff --git a/src/plone/app/multilingual/indexer.py b/src/plone/app/multilingual/indexer.py\nindex 1e7ca8c3..b43f60a8 100644\n--- a/src/plone/app/multilingual/indexer.py\n+++ b/src/plone/app/multilingual/indexer.py\n@@ -12,5 +12,4 @@ def itgIndexer(obj):\n \n @indexer(ITranslatable)\n def LanguageIndexer(object, **kw):\n-    language = ILanguage(object).get_language()\n-    return language\n+    return ILanguage(object).get_language()\ndiff --git a/src/plone/app/multilingual/interfaces.py b/src/plone/app/multilingual/interfaces.py\nindex ac936295..cde3ca5a 100644\n--- a/src/plone/app/multilingual/interfaces.py\n+++ b/src/plone/app/multilingual/interfaces.py\n@@ -1,5 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.app.multilingual import _\n+from plone.app.z3cform.interfaces import IPloneFormLayer\n+from plone.i18n.interfaces import ILanguageSchema\n from plone.supermodel import model\n from zope import schema\n from zope.interface import Attribute\n@@ -7,12 +9,6 @@\n from zope.schema.vocabulary import SimpleTerm\n from zope.schema.vocabulary import SimpleVocabulary\n \n-try:\n-    from plone.i18n.interfaces import ILanguageSchema\n-except ImportError:\n-    # BBB for Plone 5.1, remove with Plone 6\n-    from Products.CMFPlone.interfaces import ILanguageSchema\n-\n \n # CONSTANTS\n SHARED_NAME = \'shared\'\n@@ -166,8 +162,8 @@ class ITG(Interface):\n     """\n \n \n-class IPloneAppMultilingualInstalled(Interface):\n-    """ layer """\n+class IPloneAppMultilingualInstalled(IPloneFormLayer):\n+    """ layer inherits from PloneFormLayer for better LIF widget overriding """\n \n \n selector_policies = SimpleVocabulary(\ndiff --git a/src/plone/app/multilingual/itg.py b/src/plone/app/multilingual/itg.py\nindex c30284e5..e0f52980 100644\n--- a/src/plone/app/multilingual/itg.py\n+++ b/src/plone/app/multilingual/itg.py\n@@ -40,9 +40,11 @@ def set(self, tg):\n @adapter(ITranslatable, IObjectCreatedEvent)\n def addAttributeTG(obj, event):\n \n-    if not IObjectCopiedEvent.providedBy(event):\n-        if getattr(aq_base(obj), ATTRIBUTE_NAME, None):\n-            return  # defensive: keep existing TG on non-copy create\n+    if (\n+        not IObjectCopiedEvent.providedBy(event)\n+        and getattr(aq_base(obj), ATTRIBUTE_NAME, None)\n+    ):\n+        return  # defensive: keep existing TG on non-copy create\n \n     generator = queryUtility(IUUIDGenerator)\n     if generator is None:\ndiff --git a/src/plone/app/multilingual/manager.py b/src/plone/app/multilingual/manager.py\nindex ee9467b1..66a13b41 100644\n--- a/src/plone/app/multilingual/manager.py\n+++ b/src/plone/app/multilingual/manager.py\n@@ -1,6 +1,9 @@\n # -*- coding: utf-8 -*-\n from plone.app.multilingual.events import ObjectTranslatedEvent\n from plone.app.multilingual.events import ObjectWillBeTranslatedEvent\n+from plone.app.multilingual.events import TranslationRegisteredEvent\n+from plone.app.multilingual.events import TranslationRemovedEvent\n+from plone.app.multilingual.events import TranslationUpdatedEvent\n from plone.app.multilingual.interfaces import IMutableTG\n from plone.app.multilingual.interfaces import ITG\n from plone.app.multilingual.interfaces import ITranslationFactory\n@@ -9,13 +12,16 @@\n from plone.app.multilingual.interfaces import NOTG\n from plone.app.multilingual.itg import addAttributeTG\n from plone.app.uuid.utils import uuidToObject\n+from plone.protect.interfaces import IDisableCSRFProtection\n from plone.uuid.handlers import addAttributeUUID\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import ILanguage\n+from zope.globalrequest import getRequest\n+from zope.component.hooks import getSite\n from zope.event import notify\n+from zope.interface import alsoProvides\n from zope.interface import implementer\n-from zope.site.hooks import getSite\n \n \n @implementer(ITranslationManager)\n@@ -27,7 +33,6 @@ def __init__(self, context):\n             self.tg = context\n         else:\n             self.tg = self.get_tg(context)\n-        self._canonical = None\n         site = getSite()\n         self.pcatalog = getToolByName(site, \'portal_catalog\', None)\n \n@@ -41,7 +46,7 @@ def get_id(self, context):\n         # We must ensure that this case can\'t happen, any object translatable\n         # will have an UUID (in any case we can be at the portal factory!)\n         except KeyError:\n-            context._v_safe_write = True\n+            alsoProvides(getRequest(), IDisableCSRFProtection)\n             addAttributeUUID(context, None)\n             context.reindexObject(idxs=[\'UID\'])\n             context_id = IUUID(context)\n@@ -55,8 +60,9 @@ def get_tg(self, context):\n         try:\n             context_id = ITG(context)\n         # We must ensure that this case can\'t happen, any object translatable\n-        # will have an UUID (in any case we can be at the portal factory!)\n+        # will have an TG (in any case we can be at the portal factory!)\n         except TypeError:\n+            alsoProvides(getRequest(), IDisableCSRFProtection)\n             addAttributeTG(context, None)\n             context.reindexObject(idxs=[\'TranslationGroup\'])\n             context_id = ITG(context)\n@@ -71,44 +77,53 @@ def register_translation(self, language, content):\n             raise KeyError(\'There is no target language\')\n \n         if type(content) == str:\n-            content_obj = uuidToObject(content)\n-        else:\n-            content_obj = content\n+            content = uuidToObject(content)\n \n         # Check if exists and is not myself\n         brains = self.pcatalog.unrestrictedSearchResults(\n             TranslationGroup=self.tg, Language=language)\n-        if len(brains) > 0 and brains[0].UID != self.get_id(content_obj):\n+        if len(brains) > 0 and brains[0].UID != self.get_id(content):\n             raise KeyError("Translation already exists")\n \n         # register the new translation in the canonical\n-        IMutableTG(content_obj).set(self.tg)\n-        content_obj.reindexObject(\n-            idxs=(\'Language\', \'TranslationGroup\'))\n+        IMutableTG(content).set(self.tg)\n+        content.reindexObject(idxs=(\'Language\', \'TranslationGroup\'))\n+        notify(TranslationRegisteredEvent(self.context, content, language))\n \n     def update(self):\n-        """ see interfaces"""\n+        """ Update the adapted item.\n+\n+        If unregistered, register a Translation-Grouup (TG) for it and exit.\n+\n+        Check that there aren\'t two translations on the same language\n+        This is to be used for changing the contexts language.\n+        If there is already an item in the same language,\n+        Remove the other items TG information and make the current adapted\n+        context the active language for the current TG.\n+\n+        """\n         language = ILanguage(self.context).get_language()\n-        # self.context.reindexObject(idxs=("Language", "TranslationGroup", ))\n-        # In case language is already on the translated languages we are\n-        # going to orphan the old translation\n         brains = self.pcatalog.unrestrictedSearchResults(\n-            TranslationGroup=self.tg, Language=language)\n+            TranslationGroup=self.tg,\n+            Language=language,\n+        )\n         if len(brains) == 0:\n-            # There is not a translation with this tg on this language\n+            # There is no translation within current TG for this language.\n             self.register_translation(language, self.context)\n-        else:\n-            # We need to check if the language has changed\n-            brain = brains[0]\n-            content_id = self.get_id(self.context)\n-            if brain.UID != content_id:\n-                # Is a different object -> remove the old one\n-                # We get the old uuid\n-                old_object = brain.getObject()\n-                IMutableTG(old_object).set(NOTG)\n-                old_object.reindexObject(idxs=(\n-                    "Language", "TranslationGroup",\n-                ))\n+            return\n+        # In case the language is already within the translated languages we are\n+        # going to orphan the old translation.\n+        brain = brains[0]\n+        content_id = self.get_id(self.context)\n+        if brain.UID == content_id:\n+            return\n+\n+        # It is a different object -> remove the old one\n+        # We get the old uuid\n+        old_object = brain.getObject()\n+        IMutableTG(old_object).set(NOTG)\n+        old_object.reindexObject(idxs=("TranslationGroup",))\n+        notify(TranslationUpdatedEvent(self.context, old_object, language))\n \n     def add_translation(self, language):\n         """ see interfaces """\n@@ -125,9 +140,7 @@ def add_translation(self, language):\n         # register the new translation\n         self.register_translation(language, translated_object)\n         # event\n-        notify(ObjectTranslatedEvent(self.context,\n-               translated_object, language))\n-        return\n+        notify(ObjectTranslatedEvent(self.context, translated_object, language))\n \n     def add_translation_delegated(self, language):\n         """\n@@ -147,7 +160,8 @@ def remove_translation(self, language):\n         """ see interfaces """\n         translation = self.get_translation(language)\n         IMutableTG(translation).set(NOTG)\n-        translation.reindexObject()\n+        translation.reindexObject(idxs=("TranslationGroup",))\n+        notify(TranslationRemovedEvent(self.context, translation, language))\n \n     def get_translation(self, language):\n         """ see interfaces """\n@@ -169,7 +183,8 @@ def get_translations(self):\n         """ see interfaces """\n         translations = {}\n         brains = self.pcatalog.unrestrictedSearchResults(\n-            TranslationGroup=self.tg)\n+            TranslationGroup=self.tg,\n+        )\n         for brain in brains:\n             translations[brain.Language] = brain.getObject()\n         return translations\ndiff --git a/src/plone/app/multilingual/profiles/default/types/LIF.xml b/src/plone/app/multilingual/profiles/default/types/LIF.xml\nindex a8199adf..c1a283bf 100644\n--- a/src/plone/app/multilingual/profiles/default/types/LIF.xml\n+++ b/src/plone/app/multilingual/profiles/default/types/LIF.xml\n@@ -23,11 +23,11 @@\n   <property name="add_permission">cmf.ManagePortal</property>\n   <property name="klass">plone.dexterity.content.Container</property>\n   <property name="behaviors">\n-    <element value="plone.app.dexterity.behaviors.metadata.IDublinCore"/>\n-    <element value="plone.app.content.interfaces.INameFromTitle"/>\n-    <element value="Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes"/>\n-    <element value="plone.app.multilingual.dx.interfaces.IDexterityTranslatable" />\n-    <element value="plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation"/>\n+    <element value="plone.dublincore"/>\n+    <element value="plone.namefromtitle"/>\n+    <element value="plone.constraintypes"/>\n+    <element value="plone.translatable" />\n+    <element value="plone.excludefromnavigation"/>\n   </property>\n   <property name="schema">plone.app.multilingual.interfaces.ILanguageIndependentFolder</property>\n   <property name="model_source"></property>\ndiff --git a/src/plone/app/multilingual/profiles/default/types/LRF.xml b/src/plone/app/multilingual/profiles/default/types/LRF.xml\nindex eb30503f..b1e28668 100644\n--- a/src/plone/app/multilingual/profiles/default/types/LRF.xml\n+++ b/src/plone/app/multilingual/profiles/default/types/LRF.xml\n@@ -23,12 +23,12 @@\n   <property name="add_permission">cmf.ManagePortal</property>\n   <property name="klass">plone.dexterity.content.Container</property>\n   <property name="behaviors">\n-    <element value="plone.app.dexterity.behaviors.metadata.IDublinCore"/>\n-    <element value="plone.app.content.interfaces.INameFromTitle"/>\n-    <element value="Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes"/>\n-    <element value="plone.app.multilingual.dx.interfaces.IDexterityTranslatable" />\n-    <element value="plone.app.dexterity.behaviors.exclfromnav.IExcludeFromNavigation"/>\n-    <element value="plone.app.layout.navigation.interfaces.INavigationRoot"/>\n+    <element value="plone.dublincore"/>\n+    <element value="plone.namefromtitle"/>\n+    <element value="plone.constraintypes"/>\n+    <element value="plone.translatable" />\n+    <element value="plone.excludefromnavigation"/>\n+    <element value="plone.navigationroot"/>\n   </property>\n   <property name="schema">plone.app.multilingual.interfaces.ILanguageRootFolder</property>\n   <property name="model_source"></property>\ndiff --git a/src/plone/app/multilingual/setuphandlers.py b/src/plone/app/multilingual/setuphandlers.py\nindex 56406645..91673489 100644\n--- a/src/plone/app/multilingual/setuphandlers.py\n+++ b/src/plone/app/multilingual/setuphandlers.py\n@@ -1,6 +1,8 @@\n # -*- coding: utf-8 -*-\n from logging import getLogger\n from plone.app.multilingual.browser.setup import SetupMultilingualSite\n+from plone.app.multilingual.interfaces import ITranslatable\n+from plone.app.multilingual.itg import addAttributeTG\n from Products.CMFPlone.interfaces import INonInstallable\n from Products.CMFPlone.utils import getToolByName\n from zope.component.hooks import getSite\n@@ -42,19 +44,24 @@ def step_default_various(context):\n     portal = context.getSite()\n     enable_translatable_behavior(portal)\n \n+    # Add the attribute to the site root now so plone.protect won\'t cry.\n+    addAttributeTG(portal, None)\n+\n \n def enable_translatable_behavior(portal):\n     types_tool = portal.portal_types\n \n-    # Iterate through all Dexterity content type\n+    # Iterate through all Dexterity content type, except the site root\n     all_ftis = types_tool.listTypeInfo()\n-    dx_ftis = [x for x in all_ftis if getattr(x, \'behaviors\', False)]\n+    dx_ftis = (\n+        fti for fti in all_ftis\n+        if getattr(fti, \'behaviors\', False) and fti.getId() != \'Plone Site\'\n+    )\n     for fti in dx_ftis:\n-\n         # Enable translatable behavior for all types\n         behaviors = list(fti.behaviors)\n         behaviors.extend([\n-            \'plone.app.multilingual.dx.interfaces.IDexterityTranslatable\',\n+            \'plone.translatable\',\n         ])\n         behaviors = tuple(set(behaviors))\n         fti._updateProperty(\'behaviors\', behaviors)\n@@ -81,7 +88,7 @@ def disable_translatable_behavior(portal):\n         # Disable translatable behavior from all types\n         behaviors = [\n             i for i in fti.behaviors if i !=\n-            \'plone.app.multilingual.dx.interfaces.IDexterityTranslatable\'\n+            \'plone.translatable\'\n         ]\n         fti._updateProperty(\'behaviors\', behaviors)\n \n@@ -90,8 +97,9 @@ def disable_language_switcher(portal):\n     """Remove the use of language-switcher as default view for Plone Site"""\n     tt = getToolByName(portal, \'portal_types\')\n     site = tt[\'Plone Site\']\n-    methods = site.view_methods\n-    site.view_methods = [m for m in methods if m != \'language-switcher\']\n+    site.view_methods = tuple(\n+        method for method in site.view_methods if method != \'language-switcher\'\n+    )\n     if site.default_view == \'language-switcher\':\n         site.default_view = \'listing_view\'\n \ndiff --git a/src/plone/app/multilingual/subscriber.py b/src/plone/app/multilingual/subscriber.py\nindex 582a4890..42816ad6 100644\n--- a/src/plone/app/multilingual/subscriber.py\n+++ b/src/plone/app/multilingual/subscriber.py\n@@ -5,9 +5,11 @@\n from plone.app.multilingual.interfaces import ILanguageIndependentFolder\n from plone.app.multilingual.interfaces import IMutableTG\n from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n+from plone.app.multilingual.interfaces import ITG\n from plone.app.multilingual.interfaces import ITranslatable\n from plone.app.multilingual.interfaces import ITranslationManager\n from plone.app.multilingual.interfaces import LANGUAGE_INDEPENDENT\n+from plone.app.multilingual.itg import addAttributeTG\n from plone.dexterity.interfaces import IDexterityContent\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.interfaces import IFolderish\n@@ -89,13 +91,14 @@ def unindex_language_independent(ob, event):\n \n     language_tool = getToolByName(ob, \'portal_languages\')\n     language_codes = language_tool.supported_langs\n-\n+    portal = getSite()\n     uuid = IUUID(ob).split(\'-\')[0]\n+\n     for code in language_codes:\n         for brain in pc.unrestrictedSearchResults(UID=uuid + \'-\' + code):\n-            ob.unrestrictedTraverse(brain.getPath()).unindexObject()\n+            portal.unrestrictedTraverse(brain.getPath()).unindexObject()\n         for brain in pc.unrestrictedSearchResults(UID=uuid):\n-            ob.unrestrictedTraverse(brain.getPath()).unindexObject()\n+            portal.unrestrictedTraverse(brain.getPath()).unindexObject()\n \n \n # Multilingual subscribers\n@@ -115,6 +118,9 @@ def set_recursive_language(ob, language):\n \n     elif ILanguage(ob).get_language() != language:\n         ILanguage(ob).set_language(language)\n+        if ITG(ob, None) is None:\n+            addAttributeTG(ob, None)\n+            ob.reindexObject(idxs=[\'TranslationGroup\'])\n         ITranslationManager(ob).update()\n         reindex_object(ob)\n \ndiff --git a/src/plone/app/multilingual/testing.py b/src/plone/app/multilingual/testing.py\nindex deeb7c6c..c04eceed 100644\n--- a/src/plone/app/multilingual/testing.py\n+++ b/src/plone/app/multilingual/testing.py\n@@ -167,8 +167,8 @@ def create_content_type(self, portal_type):\n         disableCSRFProtection()\n         fti = DexterityFTI(str(portal_type), title=portal_type)\n         fti.behaviors = (\n-            \'plone.app.dexterity.behaviors.metadata.IBasic\',\n-            \'plone.app.multilingual.dx.interfaces.IDexterityTranslatable\'\n+            \'plone.basic\',\n+            \'plone.translatable\',\n         )\n         fti.model_source = u"""\\\n <model xmlns="http://namespaces.plone.org/supermodel/schema">\ndiff --git a/src/plone/app/multilingual/tests/robot/test_add_translation.robot b/src/plone/app/multilingual/tests/robot/test_add_translation.robot\nindex 2dd46e6f..01908b40 100644\n--- a/src/plone/app/multilingual/tests/robot/test_add_translation.robot\n+++ b/src/plone/app/multilingual/tests/robot/test_add_translation.robot\n@@ -1,13 +1,14 @@\n *** Settings ***\n \n-Resource  plone/app/robotframework/selenium.robot\n Resource  plone/app/robotframework/keywords.robot\n+Resource  plone/app/robotframework/saucelabs.robot\n+Resource  plone/app/robotframework/selenium.robot\n Resource  Products/CMFPlone/tests/robot/keywords.robot\n \n Library  Remote  ${PLONE_URL}/RobotRemote\n \n-Test Setup  Setup test browser\n-Test Teardown  Close all browsers\n+Test Setup  Run Keywords  Plone test setup\n+Test Teardown  Run keywords  Plone test teardown\n \n *** Test Cases ***\n \n@@ -71,13 +72,13 @@ I link the document in English as a translation\n   Wait until element is visible  xpath=(//span[contains(., \'An English Document\')])\n   Click Element  xpath=(//span[contains(., \'An English Document\')])\n   Wait until page contains  An English Document\n-\n-  Click Element  xpath=(//*[contains(@class, \'plone-modal-footer\')]//input[@id=\'form-buttons-connect_translation\'])\n+  \n+  Click Element  xpath=(//*[contains(@class, \'plone-modal-footer\')]//button[@id=\'form-buttons-connect_translation\'])\n   Wait until page contains element  xpath=(//h3[@class="translationTitle"])\n   Sleep  5\n   Wait until element is visible  xpath=(//h3[@class="translationTitle"])\n-  Focus  xpath=(//*[@class="odd"]//a[contains(@href,"a-catalan-document")])\n-  Click Element  xpath=(//*[@class="odd"]//a[contains(@href,"a-catalan-document")])\n+  Focus  xpath=(//*[@id="translations-overview"]//a[contains(@href,"a-catalan-document")])\n+  Click Element  xpath=(//*[@id="translations-overview"]//a[contains(text(),\'/plone/ca/a-catalan-document\')])\n   Wait until page contains  A Catalan Document\n \n I switch to English\n@@ -88,6 +89,6 @@ I switch to English\n \n I can view the document in English\n   Wait until page contains element\n-  ...  xpath=//*[contains(@class, \'documentFirstHeading\')][./text()=\'An English Document\']\n+  ...  xpath=//h1[1][contains(text(),\'English Document\')]\n   Wait until page contains element\n   ...  xpath=//ul[@id=\'portal-languageselector\']/li[contains(@class, \'currentLanguage\')]/a[@title=\'English\']\ndiff --git a/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot b/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot\nindex 9b35c5ab..0ce75781 100644\n--- a/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot\n+++ b/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot\n@@ -1,12 +1,13 @@\n *** Settings ***\n \n-Resource  plone/app/robotframework/selenium.robot\n Resource  plone/app/robotframework/keywords.robot\n+Resource  plone/app/robotframework/saucelabs.robot\n+Resource  plone/app/robotframework/selenium.robot\n \n Library  Remote  ${PLONE_URL}/RobotRemote\n \n-Test Setup  Open test browser\n-Test Teardown  Close all browsers\n+Test Setup  Run Keywords  Plone test setup\n+Test Teardown  Run keywords  Plone test teardown\n \n \n *** Test Cases ***\ndiff --git a/src/plone/app/multilingual/tests/robot/test_translate_content.robot b/src/plone/app/multilingual/tests/robot/test_translate_content.robot\nindex 49b03778..6c3a9d20 100644\n--- a/src/plone/app/multilingual/tests/robot/test_translate_content.robot\n+++ b/src/plone/app/multilingual/tests/robot/test_translate_content.robot\n@@ -1,12 +1,13 @@\n *** Settings ***\n \n-Resource  plone/app/robotframework/selenium.robot\n Resource  plone/app/robotframework/keywords.robot\n+Resource  plone/app/robotframework/saucelabs.robot\n+Resource  plone/app/robotframework/selenium.robot\n \n Library  Remote  ${PLONE_URL}/RobotRemote\n \n-Test Setup  Open test browser\n-Test Teardown  Close all browsers\n+Test Setup  Run Keywords  Plone test setup\n+Test Teardown  Run keywords  Plone test teardown\n \n \n *** Test Cases ***\n@@ -73,6 +74,6 @@ I switch to Catalan\n \n I can view the document in Catalan\n   Page Should Contain Element\n-  ...  xpath=//*[contains(@class, \'documentFirstHeading\')][./text()=\'A Catalan Document\']\n+  ...  xpath=//h1[1][text()=\'A Catalan Document\']\n   Page Should Contain Element\n   ...  xpath=//ul[@id=\'portal-languageselector\']/li[contains(@class, \'currentLanguage\')]/a[@title=\'Catal\xc3\xa0\']\ndiff --git a/src/plone/app/multilingual/tests/test_api.py b/src/plone/app/multilingual/tests/test_api.py\nindex 755afd97..1e1d1b57 100644\n--- a/src/plone/app/multilingual/tests/test_api.py\n+++ b/src/plone/app/multilingual/tests/test_api.py\n@@ -236,7 +236,7 @@ def test_create_destroy_link_translations(self):\n         id_a_ca = ITranslationManager(a_ca).query_canonical()\n         id_another_es = ITranslationManager(another_es).query_canonical()\n \n-        self.assertNotEquals(id_another_es, id_a_ca)\n+        self.assertNotEqual(id_another_es, id_a_ca)\n         self.assertTrue(isinstance(id_another_es, str))\n         self.assertTrue(isinstance(id_a_ca, str))\n \ndiff --git a/src/plone/app/multilingual/tests/test_helper_views.py b/src/plone/app/multilingual/tests/test_helper_views.py\nindex cad7464b..9f3f07ff 100644\n--- a/src/plone/app/multilingual/tests/test_helper_views.py\n+++ b/src/plone/app/multilingual/tests/test_helper_views.py\n@@ -7,10 +7,10 @@\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.dexterity.utils import createContentInContainer\n+from plone.i18n.interfaces import ILanguageSchema\n from plone.registry.interfaces import IRegistry\n from plone.testing.z2 import Browser\n from Products.CMFPlone.interfaces import ILanguage\n-from Products.CMFPlone.interfaces import ILanguageSchema\n from zope.component import getUtility\n from zope.interface import alsoProvides\n \ndiff --git a/src/plone/app/multilingual/tests/test_lif.py b/src/plone/app/multilingual/tests/test_lif.py\nindex eb98925f..d3faf4f0 100644\n--- a/src/plone/app/multilingual/tests/test_lif.py\n+++ b/src/plone/app/multilingual/tests/test_lif.py\n@@ -35,9 +35,9 @@ def setUp(self):\n \n         fti = DexterityFTI(\'Feedback\')\n         fti.behaviors = (\n-            \'plone.app.dexterity.behaviors.metadata.IBasic\',\n-            \'plone.app.content.interfaces.INameFromTitle\',\n-            \'plone.app.multilingual.dx.interfaces.IDexterityTranslatable\',\n+            \'plone.basic\',\n+            \'plone.namefromtitle\',\n+            \'plone.translatable\',\n         )\n         fti.model_source = u"""\\\n <model xmlns="http://namespaces.plone.org/supermodel/schema"\ndiff --git a/src/plone/app/multilingual/tests/test_menu.py b/src/plone/app/multilingual/tests/test_menu.py\nindex 2a92bf99..f5276ccd 100644\n--- a/src/plone/app/multilingual/tests/test_menu.py\n+++ b/src/plone/app/multilingual/tests/test_menu.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n+from plone.app.multilingual.interfaces import ITranslatable\n from plone.app.multilingual.testing import PAM_FUNCTIONAL_TESTING\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -45,6 +46,7 @@ def test_menu_does_not_contain_translated_entries(self):\n         self.assertNotIn(\'translate_into_ca\', self.browser.contents)\n \n     def test_menu_does_not_appear_without_ITranslatable(self):\n+        self.assertFalse(ITranslatable.providedBy(self.portal))\n         self.browser.open(self.portal.absolute_url() + \'/folder_listing\')\n         self.assertNotIn(\'Translate\', self.browser.contents)\n \ndiff --git a/src/plone/app/multilingual/tests/test_selector.py b/src/plone/app/multilingual/tests/test_selector.py\nindex 31a568ef..f2b98d54 100644\n--- a/src/plone/app/multilingual/tests/test_selector.py\n+++ b/src/plone/app/multilingual/tests/test_selector.py\n@@ -11,7 +11,9 @@\n from plone.app.multilingual.interfaces import ITG\n from plone.app.multilingual.testing import PAM_FUNCTIONAL_TESTING\n from plone.app.multilingual.testing import PAM_INTEGRATION_TESTING\n+from plone.app.multilingual.testing import PAM_INTEGRATION_PRESET_TESTING\n from plone.dexterity.utils import createContentInContainer\n+from plone.i18n.interfaces import ILanguageSchema\n from plone.registry.interfaces import IRegistry\n from plone.testing.z2 import Browser\n from Products.CMFCore.utils import getToolByName\n@@ -84,7 +86,7 @@ def test_selector_data_not_modified_by_viewlet(self):\n         selector_adapter.update()\n         selector_adapter_languages = selector_adapter.languages()\n \n-        self.assertNotEquals(\n+        self.assertNotEqual(\n             selector_adapter_languages, selector_viewlet_languages\n         )\n \n@@ -169,7 +171,7 @@ def assertFullyTranslatedPages(self):\n         self.assertEqual(\n             self.browser.url, a.absolute_url() + \'?set_language=en\'\n         )\n-        self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n+        self.assertRegexpMatches(self.browser.contents, r"Distributed under the")\n \n         self.browser.open(selector_viewlet_languages[1][\'url\'])\n         self.assertEqual(\n@@ -309,7 +311,7 @@ def test_languages_partially_translated_by_closest(self):\n         )\n         self.assertIn(\'lang="en"\', self.browser.contents)\n         # But extra check, because English is the default?\n-        self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n+        self.assertRegexpMatches(self.browser.contents, r"Distributed under the")\n \n         # Check that CA translation is only partial and a parent folder\n         # is found\n@@ -350,7 +352,7 @@ def test_languages_partially_translated_by_dialog(self):\n         )\n         # But extra check, because English is the default?\n         self.assertIn(\'lang="en"\', self.browser.contents)\n-        self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n+        self.assertRegexpMatches(self.browser.contents, r"Distributed under the")\n \n         tgid = selector_languages[1][\'url\'].split(\'/\')[-2]\n \n@@ -397,7 +399,7 @@ def assertSiteRoot(self):\n         )\n         self.browser.open(selector_languages[0][\'url\'])\n         self.assertIn(\'lang="en"\', self.browser.contents)\n-        self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n+        self.assertRegexpMatches(self.browser.contents, r"Distributed under the")\n \n         # Check CA root\n         self.assertEqual(\n@@ -506,7 +508,7 @@ def assertRootFolders(self):\n             self.portal[\'en\'].absolute_url() + \'?set_language=en\',\n         )\n         self.assertIn(\'lang="en"\', self.browser.contents)\n-        self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n+        self.assertRegexpMatches(self.browser.contents, r"Distributed under the")\n \n         # Check CA\n         self.browser.open(selector_languages[1][\'url\'])\n@@ -570,7 +572,7 @@ def test_languages_preserve_view(self):\n             f_en.absolute_url() + \'/contact-info?set_language=en\',\n         )\n         self.assertIn(\'lang="en"\', self.browser.contents)\n-        self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n+        self.assertRegexpMatches(self.browser.contents, r"Distributed under the")\n \n         # Check CA\n         self.browser.open(selector_languages[1][\'url\'])\n@@ -609,7 +611,7 @@ def test_languages_preserve_view(self):\n             f_en.absolute_url() + \'/contact-info?set_language=en\',\n         )\n         self.assertIn(\'lang="en"\', self.browser.contents)\n-        self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n+        self.assertRegexpMatches(self.browser.contents, r"Distributed under the")\n \n         # Check CA\n         self.browser.open(selector_languages[1][\'url\'])\n@@ -674,7 +676,7 @@ def assertLanguagesPreserveQuery(self, policy):\n             ),\n         )\n         self.assertIn(\'lang="en"\', self.browser.contents)\n-        self.assertRegexpMatches(self.browser.contents, r"You\\s*are here")\n+        self.assertRegexpMatches(self.browser.contents, r"Distributed under the")\n \n         # Check CA\n         self.browser.open(selector_languages[1][\'url\'])\n@@ -930,3 +932,142 @@ def assertUrlsEqual(self, url1, url2):\n         self.assertEqual(parsed_url_1[2], parsed_url_2[2])\n         self.assertEqual(parsed_url_1[3], parsed_url_2[3])\n         self.assertEqual(parse_qs_1, parse_qs_2)\n+\n+\n+class TestLanguageSelectorSetLanguage(unittest.TestCase):\n+    layer = PAM_INTEGRATION_PRESET_TESTING\n+\n+    def setUp(self):\n+        # Set test variables\n+        self.portal = self.layer[\'portal\']\n+        self.portal_url = self.portal.absolute_url()\n+        self.request = self.layer[\'request\']\n+        alsoProvides(self.layer[\'request\'], IPloneAppMultilingualInstalled)\n+\n+        registry = getUtility(IRegistry)\n+        self.settings = registry.forInterface(ILanguageSchema, prefix="plone")\n+\n+    def test_set_language_is_present(self):\n+        """ test the presence of set_language parameter in the urls created in the language selector"""\n+\n+        self.settings.set_cookie_always = False\n+        self.selector_viewlet = LanguageSelectorViewlet(\n+            self.portal[\'en\'], self.request, None, None\n+        )\n+        self.selector_viewlet.update()\n+\n+        selector_languages = self.selector_viewlet.languages()\n+        tg = ITG(self.portal[\'en\'])\n+\n+        self.assertListEqual(\n+            selector_languages,\n+            [\n+                {\n+                    \'code\': u\'en\',\n+                    u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+                    u\'name\': u\'English\',\n+                    u\'native\': u\'English\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'en\',\n+                        \'query\': \'?set_language=en\',\n+                    },\n+                    \'selected\': True,\n+                    \'translated\': True,\n+                },\n+                {\n+                    \'code\': u\'ca\',\n+                    u\'flag\': u\'/++resource++language-flags/ca.gif\',\n+                    u\'name\': u\'Catalan\',\n+                    u\'native\': u\'Catal\\xe0\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'ca\',\n+                        \'query\': \'?set_language=ca\',\n+                    },\n+                    \'selected\': False,\n+                    \'translated\': True,\n+                },\n+                {\n+                    \'code\': u\'es\',\n+                    u\'flag\': u\'/++resource++country-flags/es.gif\',\n+                    u\'name\': u\'Spanish\',\n+                    u\'native\': u\'Espa\\xf1ol\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'es\',\n+                        \'query\': \'?set_language=es\',\n+                    },\n+                    \'selected\': False,\n+                    \'translated\': True,\n+                },\n+            ],\n+        )\n+\n+    def test_set_language_is_not_present_when_always_set_cookie_is_set(self):\n+        """ test the absence of set_language parameter in the urls created in the language selector"""\n+        self.settings.set_cookie_always = True\n+        self.selector_viewlet = LanguageSelectorViewlet(\n+            self.portal[\'en\'], self.request, None, None\n+        )\n+        self.selector_viewlet.update()\n+\n+        selector_languages = self.selector_viewlet.languages()\n+        tg = ITG(self.portal[\'en\'])\n+\n+        self.assertListEqual(\n+            selector_languages,\n+            [\n+                {\n+                    \'code\': u\'en\',\n+                    u\'flag\': u\'/++resource++country-flags/gb.gif\',\n+                    u\'name\': u\'English\',\n+                    u\'native\': u\'English\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'en\',\n+                        \'query\': \'\',\n+                    },\n+                    \'selected\': True,\n+                    \'translated\': True,\n+                },\n+                {\n+                    \'code\': u\'ca\',\n+                    u\'flag\': u\'/++resource++language-flags/ca.gif\',\n+                    u\'name\': u\'Catalan\',\n+                    u\'native\': u\'Catal\\xe0\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'ca\',\n+                        \'query\': \'\',\n+                    },\n+                    \'selected\': False,\n+                    \'translated\': True,\n+                },\n+                {\n+                    \'code\': u\'es\',\n+                    u\'flag\': u\'/++resource++country-flags/es.gif\',\n+                    u\'name\': u\'Spanish\',\n+                    u\'native\': u\'Espa\\xf1ol\',\n+                    \'url\': SELECTOR_VIEW_TEMPLATE\n+                    % {\n+                        \'url\': self.portal.absolute_url(),\n+                        \'tg\': tg,\n+                        \'lang\': \'es\',\n+                        \'query\': \'\',\n+                    },\n+                    \'selected\': False,\n+                    \'translated\': True,\n+                },\n+            ],\n+        )\ndiff --git a/src/plone/app/multilingual/tests/test_setup.py b/src/plone/app/multilingual/tests/test_setup.py\nindex a288059a..c656e44a 100644\n--- a/src/plone/app/multilingual/tests/test_setup.py\n+++ b/src/plone/app/multilingual/tests/test_setup.py\n@@ -1,7 +1,11 @@\n # -*- coding: utf-8 -*-\n+from Acquisition import aq_base\n from plone.app.multilingual.browser.setup import SetupMultilingualSite\n from plone.app.multilingual.browser.vocabularies import AllContentLanguageVocabulary  # noqa: E501\n+from plone.app.multilingual.interfaces import ATTRIBUTE_NAME\n from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n+from plone.app.multilingual.interfaces import ITG\n+from plone.app.multilingual.interfaces import ITranslatable\n from plone.app.multilingual.testing import PAM_INTEGRATION_PRESET_TESTING\n from plone.app.multilingual.testing import PAM_INTEGRATION_TESTING\n from Products.CMFCore.utils import getToolByName\n@@ -27,6 +31,11 @@ def test_single_language(self):\n         """Only one language is set."""\n         self.assertEqual(len(self.languages), 1)\n \n+    def test_portal_has_tg_attribute(self):\n+        """The site root should have the TG attribute set after installing"""\n+        tg_attribute = getattr(aq_base(self.portal), ATTRIBUTE_NAME, None)\n+        self.assertIsNotNone(tg_attribute)\n+\n     def test_no_languagefolder_created(self):\n         """On a single language no folder creation is done."""\n         portal_objects = self.portal.objectIds()\ndiff --git a/test-plone-5.0.x.cfg b/test-plone-5.0.x.cfg\ndeleted file mode 100644\nindex 139db4c2..00000000\n--- a/test-plone-5.0.x.cfg\n+++ /dev/null\n@@ -1,11 +0,0 @@\n-[buildout]\n-extends =\n-    https://raw.github.com/collective/buildout.plonetest/master/test-5.0.x.cfg\n-    test-plone-5.x.cfg\n-\n-plone-series = 5.0\n-\n-[versions]\n-# Plone 5.0 needs a plone.app.layout release from the 2.5.x series\n-plone.app.layout = 2.5.22\n-coverage = >=4.2\n\\ No newline at end of file\ndiff --git a/test-plone-5.1.x.cfg b/test-plone-5.1.x.cfg\ndeleted file mode 100644\nindex 8258d2ba..00000000\n--- a/test-plone-5.1.x.cfg\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-[buildout]\n-extends =\n-    https://raw.github.com/collective/buildout.plonetest/master/test-5.1.x.cfg\n-    test-plone-5.x.cfg\n-\n-plone-series = 5.1\n-\n-[versions]\n-# Plone 5.1 needs a plone.app.layout release from the 2.6.x series\n-plone.app.layout = 2.6.3\n-setuptools = 34.3.0\n-zc.buildout = 2.8.0\ndiff --git a/test-plone-5.x.cfg b/test-plone-5.x.cfg\ndeleted file mode 100644\nindex 686e2876..00000000\n--- a/test-plone-5.x.cfg\n+++ /dev/null\n@@ -1,118 +0,0 @@\n-[buildout]\n-package-name = plone.app.multilingual\n-package-extras = [test]\n-\n-extensions =\n-    mr.developer\n-\n-auto-checkout =\n-    archetypes.multilingual\n-    archetypes.testcase\n-\n-versions = versions\n-sources-dir = extras\n-always-checkout = force\n-\n-eggs =\n-    Pillow\n-    archetypes.multilingual\n-    archetypes.testcase\n-\n-test-eggs =\n-    Pillow\n-    plone.app.multilingual[test]\n-    archetypes.multilingual[test]\n-\n-parts +=\n-    zopepy\n-    i18ndude\n-    releaser\n-    ohcount\n-    coverage\n-    coverage-test\n-    checkversions\n-    omelette\n-    code-analysis\n-\n-\n-[zopepy]\n-recipe = zc.recipe.egg\n-eggs = ${instance:eggs}\n-interpreter = zopepy\n-scripts = zopepy\n-\n-\n-[i18ndude]\n-unzip = true\n-recipe = zc.recipe.egg\n-eggs = i18ndude\n-\n-\n-[releaser]\n-recipe = zc.recipe.egg\n-eggs = jarn.mkrelease\n-\n-\n-[ohcount]\n-recipe = zc.recipe.egg\n-eggs = ohconvert\n-\n-\n-[coverage]\n-recipe = zc.recipe.egg\n-eggs = z3c.coverage\n-\n-\n-[coverage-test]\n-recipe = zc.recipe.testrunner\n-eggs = ${test:eggs}\n-defaults = [\'--coverage\', \'../../coverage\', \'-v\', \'--auto-progress\']\n-\n-\n-[checkversions]\n-recipe = zc.recipe.egg\n-eggs = z3c.checkversions [buildout]\n-\n-\n-[test]\n-# Override defaults to test all our eggs, see test-4.x.x for details:\n-# https://github.com/collective/buildout.plonetest/blob/master\n-eggs =\n-    ${buildout:package-name} ${buildout:package-extras}\n-    ${buildout:test-eggs}\n-defaults = [\'--exit-with-status\', \'--auto-color\', \'--auto-progress\',\n-            \'--verbose\', \'--ndiff\']\n-\n-\n-[omelette]\n-recipe = collective.recipe.omelette\n-eggs = ${instance:eggs}\n-\n-\n-[code-analysis]\n-recipe = plone.recipe.codeanalysis\n-directory =\n-    ${buildout:directory}/src\n-    ${buildout:directory}/extras/archetypes.multilingual\n-# Conventions\n-flake8-max-complexity = 16\n-imports = True\n-prefer-single-quotes = False\n-debug-statements = True\n-# i18n\n-utf8-header = True\n-# Deprecation warnings\n-deprecated-aliases = True\n-\n-\n-[versions]\n-setuptools = >=7.0\n-zc.buildout = >=2.2.5\n-coverage =\n-\n-# Unpin this product so we are testing development code\n-plone.app.multilingual =\n-\n-[sources]\n-archetypes.multilingual =  git git://github.com/plone/archetypes.multilingual.git pushurl=git@github.com:plone/archetypes.multilingual.git\n-archetypes.testcase =  git git://github.com/sneridagh/archetypes.testcase.git pushurl=git@github.com:sneridagh/archetypes.testcase.git\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2021-12-22T15:35:25+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.multilingual/commit/a847607a2c1c10a9c0d21e777f3bdf7dbd23762a

Merge pull request #340 from telshock/patch-1

Fix typos

Files changed:
M README.rst

b'diff --git a/README.rst b/README.rst\nindex eddc7a5a..fb92fbb9 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -4,13 +4,13 @@\n Introduction\n ============\n \n-In the old days before Plone 4.3, talking about multi-language support in Plone is talk about Products.LinguaPlone. It has been the *defacto* standard for managing translations of Archetypes-based content types in Plone through the years. Somehow its functionality never made its way into the Plone core and today it is in legacy status. Nowadays, Plone faces the rising of Dexterity content types and its adoption into the core since Plone 4.3. With Plone 5 released, the transition is completed and Dexterity is shipped as its default content type story.\n+In the old days before Plone 4.3, talking about multi-language support in Plone was talk about Products.LinguaPlone. It has been the *defacto* standard for managing translations of Archetypes-based content types in Plone through the years. Somehow its functionality never made its way into the Plone core and today it is in legacy status. Nowadays, Plone faces the rising of Dexterity content types and its adoption into the core since Plone 4.3. With Plone 5 released, the transition is completed and Dexterity is shipped as its default content type story.\n \n-plone.app.multilingual was designed originally to provide Plone a whole multilingual story. Using ZCA technologies, enables translations to Dexterity and Archetypes content types as well managed via an unified UI.\n+plone.app.multilingual was designed originally to add a whole multilingual story to Plone. Using ZCA technologies, it enables translations to Dexterity and Archetypes content types managed via a unified UI.\n \n This module provides the user interface for managing content translations. It\'s the app package of the next generation Plone multilingual engine. It\'s designed to work with Dexterity content types and the *old fashioned* Archetypes based content types as well. It only works with Plone 4.1 and above due to the use of UUIDs for referencing the translations.\n \n-After more than 7 years, a GSOC, redesigns, reimplementations due to deprecated libraries, two major Plone versions finally we are able to say that plone.app.multilingual is finally here.\n+After more than 7 years, a GSOC, redesigns, reimplementations due to deprecated libraries and two major Plone versions we are finally able to say that plone.app.multilingual has arrived.\n \n \n Versions\n@@ -29,7 +29,7 @@ Versions\n Components\n ==========\n \n-PAM is composed of two packages, one is mandatory:\n+PAM is composed of two packages. One is mandatory:\n \n * plone.app.multilingual (core, UI, enables Dexterity support via a behavior)\n \n@@ -67,7 +67,7 @@ These are the most important features PAM provides.\n Root Language folders\n ---------------------\n \n-After the setup, PAM will create root folders for each of your site\'s languages and put translated content into the appropriate folders. A language folder implements INavigationRoot, so from the user\'s point of view, each language is "jailed" inside its correspondent language folder. There are event subscribers in place to capture user interaction with content and update the language in contents accordingly, for example when user moves or copy content between language folders.\n+After the setup, PAM will create root folders for each of your site\'s languages and put translated content into the appropriate folders. A language folder implements INavigationRoot, so from the user\'s point of view, each language is "jailed" inside its corresponding language folder. There are event subscribers in place to capture user interaction with content and update the language in contents accordingly, for example when a user moves or copies content between language folders.\n \n \n Babel view\n@@ -79,26 +79,25 @@ An evolution of the LP *translate* view, unified for either Archetypes and Dexte\n Language independent fields\n ---------------------------\n \n-PAM has support for language independent fields, but with a twist respect the LP implementation. As PAM does design does not give more relevance to one translated object above the others siblings (has no canonical object), fields marked as language independent get copied over all the members of the translation group always. The PAM UI will warn you about this behavior by reminding you that the values in the field on the other group participants will be overwritten.\n+PAM has support for language independent fields, but with a twist regarding the LP implementation. As PAM\'s design does not give more relevance to one translated object than to its siblings (has no canonical object), fields marked as language independent are always copied over to all members of the translation group. The PAM UI will remind you about this behavior by warning you that the values in the corresponding field of all members of the translation group will be overwritten.\n \n \n Translation locator policy\n --------------------------\n \n-When translating content, this policy decides how it would be placed in the site\'s structure. There are two policies in place:\n-\n-* LP way, the translation gets placed in the nearest translated folder in parent\'s hierarchy\n+When translating content, the policy influences how the translated content will be placed in the site\'s structure. There are two policies to choose from:\n \n+* LP way, the translation gets placed in the nearest translated folder in the parent\'s hierarchy\n * Ask user where to place the translated element in the destination language root folder\n \n \n Language selector policy\n ------------------------\n \n-While browsing the site, the language selector viewlet allows users to switch site\'s content language and ease access between translations of the current content. There are two policies in place in case the translation of a specific language does not exist (yet):\n+While browsing the site, the language selector viewlet allows users to switch the site\'s content language. There are two policies in place in case the translation of a specific language does not exist (yet):\n \n * LP way, the selector shows the nearest translated container.\n-* Shows the user an informative view that shows the current available translations for the current content.\n+* Shows the user an informative view that shows the currently available translations for the current content.\n \n \n The assets folder - a shared "Language Independent Folder"\n'

