Repository: plone.app.layout


Branch: refs/heads/master
Date: 2021-11-18T17:05:46+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.layout/commit/f258329b2cd7976d4c8dc8b33d03c091428949e3

Micro-optimizations visibility at layoutpolicy

Files changed:
A news/271.bugfix
M plone/app/layout/globals/layout.py

b'diff --git a/news/271.bugfix b/news/271.bugfix\nnew file mode 100644\nindex 00000000..d5bc1726\n--- /dev/null\n+++ b/news/271.bugfix\n@@ -0,0 +1,2 @@\n+Micro optimizations at visibility in layoutpolicy [jensens]\n+\ndiff --git a/plone/app/layout/globals/layout.py b/plone/app/layout/globals/layout.py\nindex f523a5cd..e0617741 100644\n--- a/plone/app/layout/globals/layout.py\n+++ b/plone/app/layout/globals/layout.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from AccessControl import getSecurityManager\n from plone.app.layout.globals.interfaces import IBodyClassAdapter\n from plone.app.layout.globals.interfaces import ILayoutPolicy\n from plone.app.layout.globals.interfaces import IViewView\n@@ -38,7 +39,6 @@\n     ViewMixinForTemplates,\n )\n \n-\n @implementer(ILayoutPolicy)\n class LayoutPolicy(BrowserView):\n     """A view that gives access to various layout related functions."""\n@@ -93,40 +93,27 @@ def have_portlets(self, manager_name, view=None):\n \n         return renderer.visible\n \n-    @memoize\n-    def icons_visible(self):\n-        """Returns True if icons should be shown or False otherwise."""\n-        context = self.context\n-        membership = getToolByName(context, "portal_membership")\n-        anon = membership.isAnonymousUser()\n-\n+    def _image_visibility(self, name):\n+        """check if image {name} is visible with current settings and user"""\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n-        icon_visibility = settings.icon_visibility\n-\n-        if icon_visibility == "enabled":\n-            return True\n-        elif icon_visibility == "authenticated" and not anon:\n+        visibility = getattr(settings, f"{name}_visibility")\n+        if visibility == "enabled":\n             return True\n-        else:\n+        if visibility != "authenticated":\n             return False\n+        user = getSecurityManager().getUser()\n+        return user is not None and user.getUserName() != \'Anonymous User\'\n+\n+    @memoize\n+    def icons_visible(self):\n+        """Returns True if icons should be shown or False otherwise."""\n+        return self._image_visibility("icon")\n \n     @memoize\n     def thumb_visible(self):\n         """Returns True if thumbs should be shown or False otherwise."""\n-        context = self.context\n-        membership = getToolByName(context, "portal_membership")\n-        anon = membership.isAnonymousUser()\n-        registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n-        thumb_visibility = settings.thumb_visibility\n-\n-        if thumb_visibility == "enabled":\n-            return True\n-        elif thumb_visibility == "authenticated" and not anon:\n-            return True\n-        else:\n-            return False\n+        return self._image_visibility("thumb")\n \n     @deprecate(\n         "deprecated since Plone 4, ContentIcons are rendered as Fonts now see"\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2021-11-18T22:28:52+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.layout/commit/07b4d14b45ee71912d22dfe89fd8311edfb284e3

Merge branch 'master' into layoutpolicy-visible-optimization

Files changed:
A news/270.breaking
M plone/app/layout/globals/interfaces.py
M plone/app/layout/globals/layout.py

b'diff --git a/news/270.breaking b/news/270.breaking\nnew file mode 100644\nindex 00000000..93cc8a42\n--- /dev/null\n+++ b/news/270.breaking\n@@ -0,0 +1 @@\n+Remove long deprecated ``getIcon``` from layout-policy. [jensens]\ndiff --git a/plone/app/layout/globals/interfaces.py b/plone/app/layout/globals/interfaces.py\nindex 5cbe5b52..61413a7f 100644\n--- a/plone/app/layout/globals/interfaces.py\n+++ b/plone/app/layout/globals/interfaces.py\n@@ -61,17 +61,6 @@ def have_portlets(manager_name, view=None):\n     def icons_visible():\n         """Returns True if icons should be shown or False otherwise."""\n \n-    def getIcon(item):\n-        """\n-        deprecated for Plone > 5.0 see\n-        https://github.com/plone/Products.CMFPlone/issues/1151\n-        Returns an object which implements the IContentIcon interface and\n-        provides the informations necessary to render an icon. The item\n-        parameter needs to be adaptable to IContentIcon. Icons can be disabled\n-        globally or just for anonymous users with the icon_visibility property\n-        in site_properties.\n-        """\n-\n     def bodyClass(template, view):\n         """Returns the CSS class to be used on the body tag."""\n \ndiff --git a/plone/app/layout/globals/layout.py b/plone/app/layout/globals/layout.py\nindex e0617741..c85f66ca 100644\n--- a/plone/app/layout/globals/layout.py\n+++ b/plone/app/layout/globals/layout.py\n@@ -1,9 +1,7 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from plone.app.layout.globals.interfaces import IBodyClassAdapter\n from plone.app.layout.globals.interfaces import ILayoutPolicy\n from plone.app.layout.globals.interfaces import IViewView\n-from plone.app.layout.icons.interfaces import IContentIcon\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.memoize.view import memoize\n from plone.portlets.interfaces import IPortletManager\n@@ -23,7 +21,6 @@\n from zope.component import getUtility\n from zope.component import queryMultiAdapter\n from zope.component import queryUtility\n-from zope.deprecation import deprecate\n from zope.interface import alsoProvides\n from zope.interface import implementer\n from zope.interface import Interface\n@@ -115,25 +112,6 @@ def thumb_visible(self):\n         """Returns True if thumbs should be shown or False otherwise."""\n         return self._image_visibility("thumb")\n \n-    @deprecate(\n-        "deprecated since Plone 4, ContentIcons are rendered as Fonts now see"\n-        "https://docs.plone.org/develop/addons/index.html"\n-        "#upgrading-to-plone-5-1."\n-    )\n-    def getIcon(self, item):\n-        """Returns an object which implements the IContentIcon interface and\n-        provides the informations necessary to render an icon. The item\n-        parameter needs to be adaptable to IContentIcon. Icons can be disabled\n-        globally or just for anonymous users with the icon_visibility property\n-        in site_properties.\n-        """\n-        context = self.context\n-        if not self.icons_visible():\n-            icon = getMultiAdapter((context, self.request, None), IContentIcon)\n-        else:\n-            icon = getMultiAdapter((context, self.request, item), IContentIcon)\n-        return icon\n-\n     def _toolbar_classes(self):\n         """current toolbar controlling classes"""\n         if not self._context_state.is_toolbar_visible():\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2021-11-18T22:29:05+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.layout/commit/67bf022d47c7096314de65e60242d24d5f629775

Merge pull request #271 from plone/layoutpolicy-visible-optimization

Micro-optimizations visibility at layoutpolicy

Files changed:
A news/271.bugfix
M plone/app/layout/globals/layout.py

b'diff --git a/news/271.bugfix b/news/271.bugfix\nnew file mode 100644\nindex 00000000..d5bc1726\n--- /dev/null\n+++ b/news/271.bugfix\n@@ -0,0 +1,2 @@\n+Micro optimizations at visibility in layoutpolicy [jensens]\n+\ndiff --git a/plone/app/layout/globals/layout.py b/plone/app/layout/globals/layout.py\nindex f687ceb6..c85f66ca 100644\n--- a/plone/app/layout/globals/layout.py\n+++ b/plone/app/layout/globals/layout.py\n@@ -1,3 +1,4 @@\n+from AccessControl import getSecurityManager\n from plone.app.layout.globals.interfaces import IBodyClassAdapter\n from plone.app.layout.globals.interfaces import ILayoutPolicy\n from plone.app.layout.globals.interfaces import IViewView\n@@ -35,7 +36,6 @@\n     ViewMixinForTemplates,\n )\n \n-\n @implementer(ILayoutPolicy)\n class LayoutPolicy(BrowserView):\n     """A view that gives access to various layout related functions."""\n@@ -90,40 +90,27 @@ def have_portlets(self, manager_name, view=None):\n \n         return renderer.visible\n \n-    @memoize\n-    def icons_visible(self):\n-        """Returns True if icons should be shown or False otherwise."""\n-        context = self.context\n-        membership = getToolByName(context, "portal_membership")\n-        anon = membership.isAnonymousUser()\n-\n+    def _image_visibility(self, name):\n+        """check if image {name} is visible with current settings and user"""\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n-        icon_visibility = settings.icon_visibility\n-\n-        if icon_visibility == "enabled":\n-            return True\n-        elif icon_visibility == "authenticated" and not anon:\n+        visibility = getattr(settings, f"{name}_visibility")\n+        if visibility == "enabled":\n             return True\n-        else:\n+        if visibility != "authenticated":\n             return False\n+        user = getSecurityManager().getUser()\n+        return user is not None and user.getUserName() != \'Anonymous User\'\n+\n+    @memoize\n+    def icons_visible(self):\n+        """Returns True if icons should be shown or False otherwise."""\n+        return self._image_visibility("icon")\n \n     @memoize\n     def thumb_visible(self):\n         """Returns True if thumbs should be shown or False otherwise."""\n-        context = self.context\n-        membership = getToolByName(context, "portal_membership")\n-        anon = membership.isAnonymousUser()\n-        registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n-        thumb_visibility = settings.thumb_visibility\n-\n-        if thumb_visibility == "enabled":\n-            return True\n-        elif thumb_visibility == "authenticated" and not anon:\n-            return True\n-        else:\n-            return False\n+        return self._image_visibility("thumb")\n \n     def _toolbar_classes(self):\n         """current toolbar controlling classes"""\n'

