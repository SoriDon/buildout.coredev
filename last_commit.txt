Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-03-29T13:45:58+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/d4e6cc4c00345cb7419511be8a0e583f35c4c499

Remove combine_bundles and related code (see https://github.com/plone/Products.CMFPlone/issues/3467)

Files changed:
M Products/CMFPlone/exportimport/configure.zcml
M Products/CMFPlone/resources/browser/combine.py
D Products/CMFPlone/resources/exportimport/__init__.py
D Products/CMFPlone/resources/exportimport/bundles.py

b'diff --git a/Products/CMFPlone/exportimport/configure.zcml b/Products/CMFPlone/exportimport/configure.zcml\nindex 3607947997..b3a1ada1ba 100644\n--- a/Products/CMFPlone/exportimport/configure.zcml\n+++ b/Products/CMFPlone/exportimport/configure.zcml\n@@ -76,14 +76,6 @@\n       description="Import CMFDiffTool settings">\n   </genericsetup:importStep>\n \n-  <genericsetup:importStep\n-      name="combine-bundles"\n-      title="Bundle combination"\n-      description="Combine JS/CSS bundles together"\n-      handler="Products.CMFPlone.resources.exportimport.bundles.combine">\n-    <depends name="plone.app.registry" />\n-  </genericsetup:importStep>\n-\n   <genericsetup:exportStep\n       name="content"\n       title="Content"\ndiff --git a/Products/CMFPlone/resources/browser/combine.py b/Products/CMFPlone/resources/browser/combine.py\nindex ae1ac23fd1..e2be703e4b 100644\n--- a/Products/CMFPlone/resources/browser/combine.py\n+++ b/Products/CMFPlone/resources/browser/combine.py\n@@ -1,20 +1,5 @@\n-from Acquisition import aq_base\n-from datetime import datetime\n-from io import BytesIO\n-from plone.registry.interfaces import IRegistry\n-from plone.resource.file import FilesystemFile\n-from plone.resource.interfaces import IResourceDirectory\n-from Products.CMFPlone.interfaces import IBundleRegistry\n-from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME  # noqa\n-from zExceptions import NotFound\n-from zope.component import getUtility\n-from zope.component import queryUtility\n-\n-import logging\n-import re\n import zope.deferredimport\n \n-\n zope.deferredimport.initialize()\n \n zope.deferredimport.deprecated(\n@@ -22,143 +7,3 @@\n     PRODUCTION_RESOURCE_DIRECTORY="Products.CMFPlone:resources.utils.PRODUCTION_RESOURCE_DIRECTORY",\n     get_override_directory="Products.CMFPlone:resources.utils.get_override_directory",\n )\n-\n-\n-PRODUCTION_RESOURCE_DIRECTORY = "production"\n-logger = logging.getLogger(__name__)\n-\n-\n-def get_production_resource_directory():\n-    persistent_directory = queryUtility(IResourceDirectory, name="persistent")\n-    if persistent_directory is None:\n-        return ""\n-    container = persistent_directory[OVERRIDE_RESOURCE_DIRECTORY_NAME]\n-    try:\n-        production_folder = container[PRODUCTION_RESOURCE_DIRECTORY]\n-    except NotFound:\n-        return "%s/++unique++1" % PRODUCTION_RESOURCE_DIRECTORY\n-    if "timestamp.txt" not in production_folder:\n-        return "%s/++unique++1" % PRODUCTION_RESOURCE_DIRECTORY\n-    timestamp = production_folder.readFile("timestamp.txt")\n-    if isinstance(timestamp, bytes):\n-        timestamp = timestamp.decode()\n-    return "{}/++unique++{}".format(PRODUCTION_RESOURCE_DIRECTORY, timestamp)\n-\n-\n-def get_resource(context, path):\n-    if path.startswith("++plone++"):\n-        # ++plone++ resources can be customized, we return their override\n-        # value if any\n-        overrides = get_override_directory(context)\n-        filepath = path[9:]\n-        if overrides.isFile(filepath):\n-            return overrides.readFile(filepath)\n-\n-    try:\n-        resource = context.unrestrictedTraverse(path)\n-    except (NotFound, AttributeError):\n-        logger.warning(\n-            f"Could not find resource {path}. You may have to create it first."\n-        )  # noqa\n-        return\n-\n-    if isinstance(resource, FilesystemFile):\n-        (directory, sep, filename) = path.rpartition("/")\n-        return context.unrestrictedTraverse(directory).readFile(filename)\n-\n-    # calling the resource may modify the header, i.e. the content-type.\n-    # we do not want this, so keep the original header intact.\n-    response_before = context.REQUEST.response\n-    context.REQUEST.response = response_before.__class__()\n-    if hasattr(aq_base(resource), "GET"):\n-        # for FileResource\n-        result = resource.GET()\n-    else:\n-        # any BrowserView\n-        result = resource()\n-    context.REQUEST.response = response_before\n-    return result\n-\n-\n-def write_js(context, folder, meta_bundle):\n-    registry = getUtility(IRegistry)\n-    resources = []\n-\n-    # bundles\n-    bundles = registry.collectionOfInterface(\n-        IBundleRegistry, prefix="plone.bundles", check=False\n-    )\n-    for bundle in bundles.values():\n-        if bundle.merge_with == meta_bundle and bundle.jscompilation:\n-            resource = get_resource(context, bundle.jscompilation)\n-            if not resource:\n-                continue\n-            resources.append(resource)\n-\n-    fi = BytesIO()\n-    for script in resources:\n-        if not isinstance(script, bytes):\n-            script = script.encode()\n-        fi.write(script + b"\\n")\n-    folder.writeFile(meta_bundle + ".js", fi)\n-    logger.info(\'Wrote combined JS bundle "%s".\' % meta_bundle)\n-\n-\n-def write_css(context, folder, meta_bundle):\n-    registry = getUtility(IRegistry)\n-    resources = []\n-\n-    bundles = registry.collectionOfInterface(\n-        IBundleRegistry, prefix="plone.bundles", check=False\n-    )\n-    for bundle in bundles.values():\n-        if bundle.merge_with == meta_bundle and bundle.csscompilation:\n-            css = get_resource(context, bundle.csscompilation)\n-            if not css:\n-                continue\n-            (path, sep, filename) = bundle.csscompilation.rpartition("/")\n-            # Process relative urls:\n-            # we prefix with current resource path any url not starting with\n-            # \'/\' or http: or data:\n-            if not isinstance(path, bytes):\n-                path = path.encode()\n-            css = re.sub(\n-                br"""(url\\([\'"]?(?![\'"]?([a-z]+:|\\/)))""", br"\\1%s/" % path, css\n-            )\n-            resources.append(css)\n-\n-    fi = BytesIO()\n-    for script in resources:\n-        if not isinstance(script, bytes):\n-            script = script.encode()\n-        fi.write(script + b"\\n")\n-    folder.writeFile(meta_bundle + ".css", fi)\n-    logger.info(\'Wrote combined CSS bundle "%s".\' % meta_bundle)\n-\n-\n-def get_override_directory(context):\n-    persistent_directory = queryUtility(IResourceDirectory, name="persistent")\n-    if persistent_directory is None:\n-        return\n-    if OVERRIDE_RESOURCE_DIRECTORY_NAME not in persistent_directory:\n-        persistent_directory.makeDirectory(OVERRIDE_RESOURCE_DIRECTORY_NAME)\n-    return persistent_directory[OVERRIDE_RESOURCE_DIRECTORY_NAME]\n-\n-\n-def combine_bundles(context):\n-    container = get_override_directory(context)\n-    if PRODUCTION_RESOURCE_DIRECTORY not in container:\n-        container.makeDirectory(PRODUCTION_RESOURCE_DIRECTORY)\n-    production_folder = container[PRODUCTION_RESOURCE_DIRECTORY]\n-\n-    # store timestamp\n-    fi = BytesIO()\n-    fi.write(datetime.now().isoformat().encode())\n-    production_folder.writeFile("timestamp.txt", fi)\n-\n-    # generate new combined bundles\n-    write_js(context, production_folder, "default")\n-    write_js(context, production_folder, "logged-in")\n-    write_css(context, production_folder, "default")\n-    write_css(context, production_folder, "logged-in")\n-    logger.info("Finished bundle compilation.")\ndiff --git a/Products/CMFPlone/resources/exportimport/__init__.py b/Products/CMFPlone/resources/exportimport/__init__.py\ndeleted file mode 100644\nindex e69de29bb2..0000000000\ndiff --git a/Products/CMFPlone/resources/exportimport/bundles.py b/Products/CMFPlone/resources/exportimport/bundles.py\ndeleted file mode 100644\nindex f380b846e2..0000000000\n--- a/Products/CMFPlone/resources/exportimport/bundles.py\n+++ /dev/null\n@@ -1,33 +0,0 @@\n-from ..browser.combine import combine_bundles\n-from plone.registry.interfaces import IRegistry\n-from zope.component import queryUtility\n-\n-\n-def combine(context):\n-    logger = context.getLogger("bundles")\n-    registry = queryUtility(IRegistry)\n-\n-    if registry is None:\n-        logger.info("Cannot find registry")\n-        return\n-\n-    # Look for a keyword in registry.xml or the registry directory.\n-    filepaths = ["registry.xml"]\n-    if context.isDirectory("registry"):\n-        for filename in context.listDirectory("registry"):\n-            filepaths.append("registry/" + filename)\n-    found = False\n-    for filepath in filepaths:\n-        body = context.readDataFile(filepath)\n-        if body is not None and b"IBundleRegistry" in body:\n-            found = True\n-            break\n-    if not found:\n-        return\n-\n-    # Calling combine_bundles used to have as side effect that the\n-    # Content-Type header of the response was set to application/javascript,\n-    # which we do not want.  But that was fixed already in Plone 5.1b2.\n-    # See https://github.com/plone/Products.CMFPlone/pull/1924\n-    site = context.getSite()\n-    combine_bundles(site)\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-03-29T14:19:55+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/b78af6154894649be2d1b1eb4a8507d53716349c

add changenote

Files changed:
A news/3468.bugfix

b'diff --git a/news/3468.bugfix b/news/3468.bugfix\nnew file mode 100644\nindex 0000000000..a9cdb27d1d\n--- /dev/null\n+++ b/news/3468.bugfix\n@@ -0,0 +1,2 @@\n+Remove obsolte combine_bundles and related code.\n+[pbauer]\n\\ No newline at end of file\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2022-03-29T21:37:47+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/11d0f37115393714e8628c8581bfb97f7e057908

Merge pull request #3468 from plone/remove_combine_bundles

Remove combine_bundles and related code

Files changed:
A news/3468.bugfix
M Products/CMFPlone/exportimport/configure.zcml
M Products/CMFPlone/resources/browser/combine.py
D Products/CMFPlone/resources/exportimport/__init__.py
D Products/CMFPlone/resources/exportimport/bundles.py

b'diff --git a/Products/CMFPlone/exportimport/configure.zcml b/Products/CMFPlone/exportimport/configure.zcml\nindex 3607947997..b3a1ada1ba 100644\n--- a/Products/CMFPlone/exportimport/configure.zcml\n+++ b/Products/CMFPlone/exportimport/configure.zcml\n@@ -76,14 +76,6 @@\n       description="Import CMFDiffTool settings">\n   </genericsetup:importStep>\n \n-  <genericsetup:importStep\n-      name="combine-bundles"\n-      title="Bundle combination"\n-      description="Combine JS/CSS bundles together"\n-      handler="Products.CMFPlone.resources.exportimport.bundles.combine">\n-    <depends name="plone.app.registry" />\n-  </genericsetup:importStep>\n-\n   <genericsetup:exportStep\n       name="content"\n       title="Content"\ndiff --git a/Products/CMFPlone/resources/browser/combine.py b/Products/CMFPlone/resources/browser/combine.py\nindex ae1ac23fd1..e2be703e4b 100644\n--- a/Products/CMFPlone/resources/browser/combine.py\n+++ b/Products/CMFPlone/resources/browser/combine.py\n@@ -1,20 +1,5 @@\n-from Acquisition import aq_base\n-from datetime import datetime\n-from io import BytesIO\n-from plone.registry.interfaces import IRegistry\n-from plone.resource.file import FilesystemFile\n-from plone.resource.interfaces import IResourceDirectory\n-from Products.CMFPlone.interfaces import IBundleRegistry\n-from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME  # noqa\n-from zExceptions import NotFound\n-from zope.component import getUtility\n-from zope.component import queryUtility\n-\n-import logging\n-import re\n import zope.deferredimport\n \n-\n zope.deferredimport.initialize()\n \n zope.deferredimport.deprecated(\n@@ -22,143 +7,3 @@\n     PRODUCTION_RESOURCE_DIRECTORY="Products.CMFPlone:resources.utils.PRODUCTION_RESOURCE_DIRECTORY",\n     get_override_directory="Products.CMFPlone:resources.utils.get_override_directory",\n )\n-\n-\n-PRODUCTION_RESOURCE_DIRECTORY = "production"\n-logger = logging.getLogger(__name__)\n-\n-\n-def get_production_resource_directory():\n-    persistent_directory = queryUtility(IResourceDirectory, name="persistent")\n-    if persistent_directory is None:\n-        return ""\n-    container = persistent_directory[OVERRIDE_RESOURCE_DIRECTORY_NAME]\n-    try:\n-        production_folder = container[PRODUCTION_RESOURCE_DIRECTORY]\n-    except NotFound:\n-        return "%s/++unique++1" % PRODUCTION_RESOURCE_DIRECTORY\n-    if "timestamp.txt" not in production_folder:\n-        return "%s/++unique++1" % PRODUCTION_RESOURCE_DIRECTORY\n-    timestamp = production_folder.readFile("timestamp.txt")\n-    if isinstance(timestamp, bytes):\n-        timestamp = timestamp.decode()\n-    return "{}/++unique++{}".format(PRODUCTION_RESOURCE_DIRECTORY, timestamp)\n-\n-\n-def get_resource(context, path):\n-    if path.startswith("++plone++"):\n-        # ++plone++ resources can be customized, we return their override\n-        # value if any\n-        overrides = get_override_directory(context)\n-        filepath = path[9:]\n-        if overrides.isFile(filepath):\n-            return overrides.readFile(filepath)\n-\n-    try:\n-        resource = context.unrestrictedTraverse(path)\n-    except (NotFound, AttributeError):\n-        logger.warning(\n-            f"Could not find resource {path}. You may have to create it first."\n-        )  # noqa\n-        return\n-\n-    if isinstance(resource, FilesystemFile):\n-        (directory, sep, filename) = path.rpartition("/")\n-        return context.unrestrictedTraverse(directory).readFile(filename)\n-\n-    # calling the resource may modify the header, i.e. the content-type.\n-    # we do not want this, so keep the original header intact.\n-    response_before = context.REQUEST.response\n-    context.REQUEST.response = response_before.__class__()\n-    if hasattr(aq_base(resource), "GET"):\n-        # for FileResource\n-        result = resource.GET()\n-    else:\n-        # any BrowserView\n-        result = resource()\n-    context.REQUEST.response = response_before\n-    return result\n-\n-\n-def write_js(context, folder, meta_bundle):\n-    registry = getUtility(IRegistry)\n-    resources = []\n-\n-    # bundles\n-    bundles = registry.collectionOfInterface(\n-        IBundleRegistry, prefix="plone.bundles", check=False\n-    )\n-    for bundle in bundles.values():\n-        if bundle.merge_with == meta_bundle and bundle.jscompilation:\n-            resource = get_resource(context, bundle.jscompilation)\n-            if not resource:\n-                continue\n-            resources.append(resource)\n-\n-    fi = BytesIO()\n-    for script in resources:\n-        if not isinstance(script, bytes):\n-            script = script.encode()\n-        fi.write(script + b"\\n")\n-    folder.writeFile(meta_bundle + ".js", fi)\n-    logger.info(\'Wrote combined JS bundle "%s".\' % meta_bundle)\n-\n-\n-def write_css(context, folder, meta_bundle):\n-    registry = getUtility(IRegistry)\n-    resources = []\n-\n-    bundles = registry.collectionOfInterface(\n-        IBundleRegistry, prefix="plone.bundles", check=False\n-    )\n-    for bundle in bundles.values():\n-        if bundle.merge_with == meta_bundle and bundle.csscompilation:\n-            css = get_resource(context, bundle.csscompilation)\n-            if not css:\n-                continue\n-            (path, sep, filename) = bundle.csscompilation.rpartition("/")\n-            # Process relative urls:\n-            # we prefix with current resource path any url not starting with\n-            # \'/\' or http: or data:\n-            if not isinstance(path, bytes):\n-                path = path.encode()\n-            css = re.sub(\n-                br"""(url\\([\'"]?(?![\'"]?([a-z]+:|\\/)))""", br"\\1%s/" % path, css\n-            )\n-            resources.append(css)\n-\n-    fi = BytesIO()\n-    for script in resources:\n-        if not isinstance(script, bytes):\n-            script = script.encode()\n-        fi.write(script + b"\\n")\n-    folder.writeFile(meta_bundle + ".css", fi)\n-    logger.info(\'Wrote combined CSS bundle "%s".\' % meta_bundle)\n-\n-\n-def get_override_directory(context):\n-    persistent_directory = queryUtility(IResourceDirectory, name="persistent")\n-    if persistent_directory is None:\n-        return\n-    if OVERRIDE_RESOURCE_DIRECTORY_NAME not in persistent_directory:\n-        persistent_directory.makeDirectory(OVERRIDE_RESOURCE_DIRECTORY_NAME)\n-    return persistent_directory[OVERRIDE_RESOURCE_DIRECTORY_NAME]\n-\n-\n-def combine_bundles(context):\n-    container = get_override_directory(context)\n-    if PRODUCTION_RESOURCE_DIRECTORY not in container:\n-        container.makeDirectory(PRODUCTION_RESOURCE_DIRECTORY)\n-    production_folder = container[PRODUCTION_RESOURCE_DIRECTORY]\n-\n-    # store timestamp\n-    fi = BytesIO()\n-    fi.write(datetime.now().isoformat().encode())\n-    production_folder.writeFile("timestamp.txt", fi)\n-\n-    # generate new combined bundles\n-    write_js(context, production_folder, "default")\n-    write_js(context, production_folder, "logged-in")\n-    write_css(context, production_folder, "default")\n-    write_css(context, production_folder, "logged-in")\n-    logger.info("Finished bundle compilation.")\ndiff --git a/Products/CMFPlone/resources/exportimport/__init__.py b/Products/CMFPlone/resources/exportimport/__init__.py\ndeleted file mode 100644\nindex e69de29bb2..0000000000\ndiff --git a/Products/CMFPlone/resources/exportimport/bundles.py b/Products/CMFPlone/resources/exportimport/bundles.py\ndeleted file mode 100644\nindex f380b846e2..0000000000\n--- a/Products/CMFPlone/resources/exportimport/bundles.py\n+++ /dev/null\n@@ -1,33 +0,0 @@\n-from ..browser.combine import combine_bundles\n-from plone.registry.interfaces import IRegistry\n-from zope.component import queryUtility\n-\n-\n-def combine(context):\n-    logger = context.getLogger("bundles")\n-    registry = queryUtility(IRegistry)\n-\n-    if registry is None:\n-        logger.info("Cannot find registry")\n-        return\n-\n-    # Look for a keyword in registry.xml or the registry directory.\n-    filepaths = ["registry.xml"]\n-    if context.isDirectory("registry"):\n-        for filename in context.listDirectory("registry"):\n-            filepaths.append("registry/" + filename)\n-    found = False\n-    for filepath in filepaths:\n-        body = context.readDataFile(filepath)\n-        if body is not None and b"IBundleRegistry" in body:\n-            found = True\n-            break\n-    if not found:\n-        return\n-\n-    # Calling combine_bundles used to have as side effect that the\n-    # Content-Type header of the response was set to application/javascript,\n-    # which we do not want.  But that was fixed already in Plone 5.1b2.\n-    # See https://github.com/plone/Products.CMFPlone/pull/1924\n-    site = context.getSite()\n-    combine_bundles(site)\ndiff --git a/news/3468.bugfix b/news/3468.bugfix\nnew file mode 100644\nindex 0000000000..a9cdb27d1d\n--- /dev/null\n+++ b/news/3468.bugfix\n@@ -0,0 +1,2 @@\n+Remove obsolte combine_bundles and related code.\n+[pbauer]\n\\ No newline at end of file\n'

