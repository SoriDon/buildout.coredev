Repository: mockup


Branch: refs/heads/master
Date: 2022-03-30T16:29:46+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/106c585209379bb722bf9e88344403ba4667c1e4

fix(pat structure): Fix async/await inconsistencies.

Files changed:
M src/pat/structure/js/actions.js
M src/pat/structure/js/views/actionmenu.js
M src/pat/structure/js/views/columns.js
M src/pat/structure/js/views/table.js

b'diff --git a/src/pat/structure/js/actions.js b/src/pat/structure/js/actions.js\nindex 1df881ae4..5d4eef318 100644\n--- a/src/pat/structure/js/actions.js\n+++ b/src/pat/structure/js/actions.js\n@@ -13,7 +13,7 @@ export default Backbone.Model.extend({\n         this.selectedCollection = this.app.selectedCollection;\n     },\n \n-    selectAll: function (e) {\n+    selectAll: async function (e) {\n         // This implementation is very specific to the default collection\n         // with the reliance on its queryParser and queryHelper.  Custom\n         // collection (Backbone.Paginator.requestPager implementation)\n@@ -21,66 +21,77 @@ export default Backbone.Model.extend({\n         e.preventDefault();\n         let page = 1;\n         let count = 0;\n-        const getPage = () => {\n+        const getPage = async () => {\n             this.app.loading.show();\n-            $.ajax({\n-                url: this.app.collection.url,\n-                type: "GET",\n-                dataType: "json",\n-                data: {\n-                    query: this.app.collection.queryParser({\n-                        searchPath: this.model.attributes.path,\n-                    }),\n-                    batch: JSON.stringify({\n-                        page: page,\n-                        size: 100,\n-                    }),\n-                    attributes: JSON.stringify(\n-                        this.app.collection.queryHelper.options.attributes\n-                    ),\n+\n+            const url = new URL(this.app.collection.url);\n+            url.searchParams.append(\n+                "query",\n+                this.app.collection.queryParser({\n+                    searchPath: this.model.attributes.path,\n+                })\n+            );\n+            url.searchParams.append(\n+                "batch",\n+                JSON.stringify({\n+                    page: page,\n+                    size: 100,\n+                })\n+            );\n+            url.searchParams.append(\n+                "attributes",\n+                JSON.stringify(this.app.collection.queryHelper.options.attributes)\n+            );\n+            const resp = await fetch(url, {\n+                headers: {\n+                    Accept: "application/json",\n                 },\n-            }).done((data) => {\n-                const items = this.app.collection.parse(data, count);\n-                count += items.length;\n-                for (const item of items) {\n-                    this.app.selectedCollection.add(new Result(item));\n-                }\n-                page += 1;\n-                if (data.total > count) {\n-                    getPage();\n-                } else {\n-                    this.app.loading.hide();\n-                    this.app.tableView.render();\n-                }\n             });\n+            const data = await resp.json();\n+\n+            const items = this.app.collection.parse(data, count);\n+            count += items.length;\n+            for (const item of items) {\n+                this.app.selectedCollection.add(new Result(item));\n+            }\n+            page += 1;\n+            if (data.total > count) {\n+                await getPage();\n+            } else {\n+                this.app.loading.hide();\n+                await this.app.tableView.render();\n+            }\n         };\n-        getPage();\n+        await getPage();\n     },\n \n-    doAction: function (buttonName, successMsg, failMsg) {\n-        $.ajax({\n-            url: this.app.buttons.get(buttonName).options.url,\n-            data: {\n+    doAction: async function (buttonName, successMsg, failMsg) {\n+        const url = new URL(this.app.buttons.get(buttonName).options.url);\n+        const resp = await fetch(url, {\n+            headers: {\n+                Accept: "application/json",\n+            },\n+            method: "POST",\n+            body: JSON.stringify({\n                 selection: JSON.stringify([this.model.attributes.UID]),\n                 folder: this.model.attributes.path,\n                 _authenticator: utils.getAuthenticator(),\n-            },\n-            dataType: "json",\n-            type: "POST",\n-        }).done((data) => {\n-            let msg;\n-            if (data.status === "success") {\n-                msg = _t(`${successMsg} "${this.model.attributes.Title}"`);\n-                this.app.collection.pager();\n-                this.app.updateButtons();\n-            } else {\n-                msg = _t(`Error ${failMsg} "${this.model.attributes.Title}"`);\n-            }\n-            this.app.clearStatus();\n-            this.app.setStatus({\n-                text: msg,\n-                type: data.status || "warning",\n-            });\n+            }),\n+        });\n+        const data = await resp.json();\n+\n+        let msg;\n+        if (data.status === "success") {\n+            msg = _t(`${successMsg} "${this.model.attributes.Title}"`);\n+            this.app.collection.pager();\n+            this.app.updateButtons();\n+        } else {\n+            msg = _t(`Error ${failMsg} "${this.model.attributes.Title}"`);\n+        }\n+        this.app.clearStatus();\n+        this.app.setStatus({\n+            text: msg,\n+            type: data.status || "warning",\n         });\n     },\n \n@@ -109,21 +120,21 @@ export default Backbone.Model.extend({\n         this.app.moveItem(this.model.attributes.id, "bottom");\n     },\n \n-    setDefaultPageClicked: function (e) {\n+    setDefaultPageClicked: async function (e) {\n         e.preventDefault();\n-        $.ajax({\n-            url: this.app.getAjaxUrl(this.app.setDefaultPageUrl),\n-            type: "POST",\n-            data: {\n-                _authenticator: $(\'[name="_authenticator"]\').val(),\n-                id: this.model.attributes.id,\n-            },\n-            success: (data) => {\n-                this.app.ajaxSuccessResponse.apply(this.app, [data]);\n-            },\n-            error: (data) => {\n-                this.app.ajaxErrorResponse.apply(this.app, [data]);\n-            },\n-        });\n+        try {\n+            const url = new URL(this.app.getAjaxUrl(this.app.setDefaultPageUrl));\n+            const resp = await fetch(url, {\n+                method: "POST",\n+                body: JSON.stringify({\n+                    id: this.model.attributes.id,\n+                    _authenticator: $(\'[name="_authenticator"]\').val(),\n+                }),\n+            });\n+            const data = await resp.json();\n+            this.app.ajaxSuccessResponse.apply(this.app, [data]);\n+        } catch (e) {\n+            this.app.ajaxSuccessResponse.apply(this.app, [e]);\n+        }\n     },\n });\ndiff --git a/src/pat/structure/js/views/actionmenu.js b/src/pat/structure/js/views/actionmenu.js\nindex 0232b271c..e94c3091c 100644\n--- a/src/pat/structure/js/views/actionmenu.js\n+++ b/src/pat/structure/js/views/actionmenu.js\n@@ -44,7 +44,7 @@ export default BaseView.extend({\n             }\n             menuOptionsCategorized[category].push(menuOption);\n             menuOption.classes = [menuOption.name, menuOption.idx];\n-            if(menuOption.css){\n+            if (menuOption.css) {\n                 menuOption.classes.push(menuOption.css);\n             }\n             if (menuOption.modal === true) {\n@@ -83,20 +83,20 @@ export default BaseView.extend({\n         const data = this.model.toJSON();\n         data.header = this.options.header || null;\n         data.menuOptions = this.menuOptionsCategorized;\n-        for(const button of data.menuOptions.button){\n-           if(button.icon){\n-               button.iconSVG = await utils.resolveIcon(button.icon);\n-           }\n+        for (const button of data.menuOptions.button) {\n+            if (button.icon) {\n+                button.iconSVG = await utils.resolveIcon(button.icon);\n+            }\n         }\n-        for(const button of data.menuOptions.dropdown){\n-           if(button.icon){\n-               button.iconSVG = await utils.resolveIcon(button.icon);\n-           }\n+        for (const button of data.menuOptions.dropdown) {\n+            if (button.icon) {\n+                button.iconSVG = await utils.resolveIcon(button.icon);\n+            }\n         }\n         this.el.innerHTML = this.template(\n             $.extend(\n                 {\n-                    dropdownIcon: await utils.resolveIcon(\'plone-settings\'),\n+                    dropdownIcon: await utils.resolveIcon("plone-settings"),\n                     _t: _t,\n                     id: utils.generateId(),\n                 },\n@@ -109,7 +109,6 @@ export default BaseView.extend({\n         }\n \n         registry.scan(this.$el);\n-\n         return this;\n     },\n });\ndiff --git a/src/pat/structure/js/views/columns.js b/src/pat/structure/js/views/columns.js\nindex a009c5de3..8977256f9 100644\n--- a/src/pat/structure/js/views/columns.js\n+++ b/src/pat/structure/js/views/columns.js\n@@ -75,13 +75,13 @@ export default PopoverView.extend({\n         return this;\n     },\n \n-    applyButtonClicked() {\n+    async applyButtonClicked() {\n         this.hide();\n         this.app.activeColumns = [];\n         for (const inp of this.$("input:checked")) {\n             this.app.activeColumns.push($(inp).val());\n         }\n         this.app.setCookieSetting(this.app.activeColumnsCookie, this.app.activeColumns);\n-        this.app.tableView.render();\n+        await this.app.tableView.render();\n     },\n });\ndiff --git a/src/pat/structure/js/views/table.js b/src/pat/structure/js/views/table.js\nindex f3f722126..e98e54fae 100644\n--- a/src/pat/structure/js/views/table.js\n+++ b/src/pat/structure/js/views/table.js\n@@ -119,12 +119,11 @@ export default BaseView.extend({\n             });\n         }\n \n-        registry.scan(this.$el);\n-\n-        this.$el.find("table")\n+        this.$el\n+            .find("table")\n             .on("init.dt", () => {\n                 // Add reordering action by drag and drop\n-                if(this.app.options.moveUrl){\n+                if (this.app.options.moveUrl) {\n                     this.addReordering();\n                 }\n                 // store Order of nativ sorting for move action\n@@ -132,10 +131,10 @@ export default BaseView.extend({\n             })\n             .on("order.dt", (e, settings, ordArr) => {\n                 // prevent message from showing for nativ order\n-                if(ordArr.length === 1){\n+                if (ordArr.length === 1) {\n                     const order = ordArr[0];\n-                    if(order.col === 0 && order.dir === \'asc\'){\n-                        if(this.tableSortable){\n+                    if (order.col === 0 && order.dir === "asc") {\n+                        if (this.tableSortable) {\n                             this.tableSortable.enableSort();\n                         }\n                         // Clear the status message\n@@ -144,32 +143,35 @@ export default BaseView.extend({\n                     }\n                 }\n \n-                const btn = $(\'<button type="button" class="btn btn-danger btn-xs"></button>\')\n-                  .text(_t("Reset column sorting"))\n-                  .on("click", () => {\n-                      // Use column 0 to restore ordering and then empty list so it doesn\'t\n-                      // show the icon in the column header\n-                      const api = $(e.target).dataTable().api();\n-                      api.order([0, "asc"]);\n-                      api.draw();\n-                  });\n+                const btn = $(\n+                    \'<button type="button" class="btn btn-danger btn-xs"></button>\'\n+                )\n+                    .text(_t("Reset column sorting"))\n+                    .on("click", () => {\n+                        // Use column 0 to restore ordering and then empty list so it doesn\'t\n+                        // show the icon in the column header\n+                        const api = $(e.target).dataTable().api();\n+                        api.order([0, "asc"]);\n+                        api.draw();\n+                    });\n                 this.app.setStatus(\n-                  {\n-                      text: _t(\n-                        "Notice: Drag and drop reordering is disabled when viewing the contents sorted by a column."\n-                      ),\n-                      type: "warning",\n-                  },\n-                  btn,\n-                  false,\n-                  "sorting_dndreordering_disabled"\n+                    {\n+                        text: _t(\n+                            "Notice: Drag and drop reordering is disabled when viewing the contents sorted by a column."\n+                        ),\n+                        type: "warning",\n+                    },\n+                    btn,\n+                    false,\n+                    "sorting_dndreordering_disabled"\n                 );\n-                if(this.tableSortable){\n+                if (this.tableSortable) {\n                     this.tableSortable.disableSort();\n                 }\n                 this.$el.removeClass("order-support");\n             });\n \n+        registry.scan(this.$el);\n         return this;\n     },\n \n'

Repository: mockup


Branch: refs/heads/master
Date: 2022-03-30T17:00:25+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/4b3776f9df8f1ca8d5be36caa46c1c07279617c3

fix(pat structure): Await rendering the table before scanning it for patterns.

This prevents for DataTable being initialized before all data has
arrived. Otherwise DataTables might show a label "No data available."
even though data is available.

Files changed:
M src/pat/structure/js/views/table.js

b'diff --git a/src/pat/structure/js/views/table.js b/src/pat/structure/js/views/table.js\nindex e98e54fae..9b7ebfb4f 100644\n--- a/src/pat/structure/js/views/table.js\n+++ b/src/pat/structure/js/views/table.js\n@@ -1,6 +1,7 @@\n import $ from "jquery";\n import _ from "underscore";\n import _t from "../../../../core/i18n-wrapper";\n+import events from "@patternslib/patternslib/src/core/events";\n import registry from "@patternslib/patternslib/src/core/registry";\n import BaseView from "../../../../core/ui/views/base";\n import TableRowView from "./tablerow";\n@@ -98,7 +99,8 @@ export default BaseView.extend({\n \n         if (this.collection.length) {\n             const container = this.$("tbody");\n-            await this.collection.each(async (result) => {\n+\n+            this.collection.each(async (result) => {\n                 this.dateColumns.map((col) => {\n                     // empty column instead of displaying "None".\n                     if (\n@@ -116,7 +118,46 @@ export default BaseView.extend({\n                 });\n                 await view.render();\n                 container.append(view.el);\n+\n+                this.el.dispatchEvent(new Event("render_collection"));\n             });\n+\n+            // NOTE: this is based on the concept of awaiting an event.\n+            // See this Stackoverflow answer here:\n+            // https://stackoverflow.com/a/44746691/1337474\n+            // For each collection callback above we throw an event "render_collection".\n+            // When the number of thrown "render_collection" events equals the number of collection entries, we throw a "render_collection__finished" event.\n+            // For this "render_collection__finished" event we\'re a-waiting for.\n+            // And after that we can scan the table.\n+            //\n+            // I agree, this feels weired.\n+            let cnt__render_collection = 0;\n+            events.add_event_listener(\n+                this.el,\n+                "render_collection",\n+                "render_collection__counter__listener",\n+                () => {\n+                    cnt__render_collection++;\n+                    if (cnt__render_collection === this.collection.length) {\n+                        this.el.dispatchEvent(new Event("render_collection__finished"));\n+                    }\n+                }\n+            );\n+            const render_collection__finished = () =>\n+                new Promise((resolve) =>\n+                    events.add_event_listener(\n+                        this.el,\n+                        "render_collection__finished",\n+                        "render_collection__finished__listener",\n+                        resolve,\n+                        { once: true }\n+                    )\n+                );\n+\n+            await render_collection__finished();\n+            events.remove_event_listener = (this.el, "render_collection__counter__listener"); // prettier-ignore\n+            events.remove_event_listener = (this.el, "render_collection__finished__listener"); // prettier-ignore\n+            registry.scan(this.$el);\n         }\n \n         this.$el\n@@ -171,7 +212,6 @@ export default BaseView.extend({\n                 this.$el.removeClass("order-support");\n             });\n \n-        registry.scan(this.$el);\n         return this;\n     },\n \n'

Repository: mockup


Branch: refs/heads/master
Date: 2022-03-30T17:15:13+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/09a1dd347f3b982afacef2b015b07ee06a5ce310

Merge pull request #1144 from plone/fix-structure-datatable

Fix structure datatable

Files changed:
M src/pat/structure/js/actions.js
M src/pat/structure/js/views/actionmenu.js
M src/pat/structure/js/views/columns.js
M src/pat/structure/js/views/table.js

b'diff --git a/src/pat/structure/js/actions.js b/src/pat/structure/js/actions.js\nindex 1df881ae4..5d4eef318 100644\n--- a/src/pat/structure/js/actions.js\n+++ b/src/pat/structure/js/actions.js\n@@ -13,7 +13,7 @@ export default Backbone.Model.extend({\n         this.selectedCollection = this.app.selectedCollection;\n     },\n \n-    selectAll: function (e) {\n+    selectAll: async function (e) {\n         // This implementation is very specific to the default collection\n         // with the reliance on its queryParser and queryHelper.  Custom\n         // collection (Backbone.Paginator.requestPager implementation)\n@@ -21,66 +21,77 @@ export default Backbone.Model.extend({\n         e.preventDefault();\n         let page = 1;\n         let count = 0;\n-        const getPage = () => {\n+        const getPage = async () => {\n             this.app.loading.show();\n-            $.ajax({\n-                url: this.app.collection.url,\n-                type: "GET",\n-                dataType: "json",\n-                data: {\n-                    query: this.app.collection.queryParser({\n-                        searchPath: this.model.attributes.path,\n-                    }),\n-                    batch: JSON.stringify({\n-                        page: page,\n-                        size: 100,\n-                    }),\n-                    attributes: JSON.stringify(\n-                        this.app.collection.queryHelper.options.attributes\n-                    ),\n+\n+            const url = new URL(this.app.collection.url);\n+            url.searchParams.append(\n+                "query",\n+                this.app.collection.queryParser({\n+                    searchPath: this.model.attributes.path,\n+                })\n+            );\n+            url.searchParams.append(\n+                "batch",\n+                JSON.stringify({\n+                    page: page,\n+                    size: 100,\n+                })\n+            );\n+            url.searchParams.append(\n+                "attributes",\n+                JSON.stringify(this.app.collection.queryHelper.options.attributes)\n+            );\n+            const resp = await fetch(url, {\n+                headers: {\n+                    Accept: "application/json",\n                 },\n-            }).done((data) => {\n-                const items = this.app.collection.parse(data, count);\n-                count += items.length;\n-                for (const item of items) {\n-                    this.app.selectedCollection.add(new Result(item));\n-                }\n-                page += 1;\n-                if (data.total > count) {\n-                    getPage();\n-                } else {\n-                    this.app.loading.hide();\n-                    this.app.tableView.render();\n-                }\n             });\n+            const data = await resp.json();\n+\n+            const items = this.app.collection.parse(data, count);\n+            count += items.length;\n+            for (const item of items) {\n+                this.app.selectedCollection.add(new Result(item));\n+            }\n+            page += 1;\n+            if (data.total > count) {\n+                await getPage();\n+            } else {\n+                this.app.loading.hide();\n+                await this.app.tableView.render();\n+            }\n         };\n-        getPage();\n+        await getPage();\n     },\n \n-    doAction: function (buttonName, successMsg, failMsg) {\n-        $.ajax({\n-            url: this.app.buttons.get(buttonName).options.url,\n-            data: {\n+    doAction: async function (buttonName, successMsg, failMsg) {\n+        const url = new URL(this.app.buttons.get(buttonName).options.url);\n+        const resp = await fetch(url, {\n+            headers: {\n+                Accept: "application/json",\n+            },\n+            method: "POST",\n+            body: JSON.stringify({\n                 selection: JSON.stringify([this.model.attributes.UID]),\n                 folder: this.model.attributes.path,\n                 _authenticator: utils.getAuthenticator(),\n-            },\n-            dataType: "json",\n-            type: "POST",\n-        }).done((data) => {\n-            let msg;\n-            if (data.status === "success") {\n-                msg = _t(`${successMsg} "${this.model.attributes.Title}"`);\n-                this.app.collection.pager();\n-                this.app.updateButtons();\n-            } else {\n-                msg = _t(`Error ${failMsg} "${this.model.attributes.Title}"`);\n-            }\n-            this.app.clearStatus();\n-            this.app.setStatus({\n-                text: msg,\n-                type: data.status || "warning",\n-            });\n+            }),\n+        });\n+        const data = await resp.json();\n+\n+        let msg;\n+        if (data.status === "success") {\n+            msg = _t(`${successMsg} "${this.model.attributes.Title}"`);\n+            this.app.collection.pager();\n+            this.app.updateButtons();\n+        } else {\n+            msg = _t(`Error ${failMsg} "${this.model.attributes.Title}"`);\n+        }\n+        this.app.clearStatus();\n+        this.app.setStatus({\n+            text: msg,\n+            type: data.status || "warning",\n         });\n     },\n \n@@ -109,21 +120,21 @@ export default Backbone.Model.extend({\n         this.app.moveItem(this.model.attributes.id, "bottom");\n     },\n \n-    setDefaultPageClicked: function (e) {\n+    setDefaultPageClicked: async function (e) {\n         e.preventDefault();\n-        $.ajax({\n-            url: this.app.getAjaxUrl(this.app.setDefaultPageUrl),\n-            type: "POST",\n-            data: {\n-                _authenticator: $(\'[name="_authenticator"]\').val(),\n-                id: this.model.attributes.id,\n-            },\n-            success: (data) => {\n-                this.app.ajaxSuccessResponse.apply(this.app, [data]);\n-            },\n-            error: (data) => {\n-                this.app.ajaxErrorResponse.apply(this.app, [data]);\n-            },\n-        });\n+        try {\n+            const url = new URL(this.app.getAjaxUrl(this.app.setDefaultPageUrl));\n+            const resp = await fetch(url, {\n+                method: "POST",\n+                body: JSON.stringify({\n+                    id: this.model.attributes.id,\n+                    _authenticator: $(\'[name="_authenticator"]\').val(),\n+                }),\n+            });\n+            const data = await resp.json();\n+            this.app.ajaxSuccessResponse.apply(this.app, [data]);\n+        } catch (e) {\n+            this.app.ajaxSuccessResponse.apply(this.app, [e]);\n+        }\n     },\n });\ndiff --git a/src/pat/structure/js/views/actionmenu.js b/src/pat/structure/js/views/actionmenu.js\nindex 0232b271c..e94c3091c 100644\n--- a/src/pat/structure/js/views/actionmenu.js\n+++ b/src/pat/structure/js/views/actionmenu.js\n@@ -44,7 +44,7 @@ export default BaseView.extend({\n             }\n             menuOptionsCategorized[category].push(menuOption);\n             menuOption.classes = [menuOption.name, menuOption.idx];\n-            if(menuOption.css){\n+            if (menuOption.css) {\n                 menuOption.classes.push(menuOption.css);\n             }\n             if (menuOption.modal === true) {\n@@ -83,20 +83,20 @@ export default BaseView.extend({\n         const data = this.model.toJSON();\n         data.header = this.options.header || null;\n         data.menuOptions = this.menuOptionsCategorized;\n-        for(const button of data.menuOptions.button){\n-           if(button.icon){\n-               button.iconSVG = await utils.resolveIcon(button.icon);\n-           }\n+        for (const button of data.menuOptions.button) {\n+            if (button.icon) {\n+                button.iconSVG = await utils.resolveIcon(button.icon);\n+            }\n         }\n-        for(const button of data.menuOptions.dropdown){\n-           if(button.icon){\n-               button.iconSVG = await utils.resolveIcon(button.icon);\n-           }\n+        for (const button of data.menuOptions.dropdown) {\n+            if (button.icon) {\n+                button.iconSVG = await utils.resolveIcon(button.icon);\n+            }\n         }\n         this.el.innerHTML = this.template(\n             $.extend(\n                 {\n-                    dropdownIcon: await utils.resolveIcon(\'plone-settings\'),\n+                    dropdownIcon: await utils.resolveIcon("plone-settings"),\n                     _t: _t,\n                     id: utils.generateId(),\n                 },\n@@ -109,7 +109,6 @@ export default BaseView.extend({\n         }\n \n         registry.scan(this.$el);\n-\n         return this;\n     },\n });\ndiff --git a/src/pat/structure/js/views/columns.js b/src/pat/structure/js/views/columns.js\nindex a009c5de3..8977256f9 100644\n--- a/src/pat/structure/js/views/columns.js\n+++ b/src/pat/structure/js/views/columns.js\n@@ -75,13 +75,13 @@ export default PopoverView.extend({\n         return this;\n     },\n \n-    applyButtonClicked() {\n+    async applyButtonClicked() {\n         this.hide();\n         this.app.activeColumns = [];\n         for (const inp of this.$("input:checked")) {\n             this.app.activeColumns.push($(inp).val());\n         }\n         this.app.setCookieSetting(this.app.activeColumnsCookie, this.app.activeColumns);\n-        this.app.tableView.render();\n+        await this.app.tableView.render();\n     },\n });\ndiff --git a/src/pat/structure/js/views/table.js b/src/pat/structure/js/views/table.js\nindex f3f722126..9b7ebfb4f 100644\n--- a/src/pat/structure/js/views/table.js\n+++ b/src/pat/structure/js/views/table.js\n@@ -1,6 +1,7 @@\n import $ from "jquery";\n import _ from "underscore";\n import _t from "../../../../core/i18n-wrapper";\n+import events from "@patternslib/patternslib/src/core/events";\n import registry from "@patternslib/patternslib/src/core/registry";\n import BaseView from "../../../../core/ui/views/base";\n import TableRowView from "./tablerow";\n@@ -98,7 +99,8 @@ export default BaseView.extend({\n \n         if (this.collection.length) {\n             const container = this.$("tbody");\n-            await this.collection.each(async (result) => {\n+\n+            this.collection.each(async (result) => {\n                 this.dateColumns.map((col) => {\n                     // empty column instead of displaying "None".\n                     if (\n@@ -116,15 +118,53 @@ export default BaseView.extend({\n                 });\n                 await view.render();\n                 container.append(view.el);\n+\n+                this.el.dispatchEvent(new Event("render_collection"));\n             });\n-        }\n \n-        registry.scan(this.$el);\n+            // NOTE: this is based on the concept of awaiting an event.\n+            // See this Stackoverflow answer here:\n+            // https://stackoverflow.com/a/44746691/1337474\n+            // For each collection callback above we throw an event "render_collection".\n+            // When the number of thrown "render_collection" events equals the number of collection entries, we throw a "render_collection__finished" event.\n+            // For this "render_collection__finished" event we\'re a-waiting for.\n+            // And after that we can scan the table.\n+            //\n+            // I agree, this feels weired.\n+            let cnt__render_collection = 0;\n+            events.add_event_listener(\n+                this.el,\n+                "render_collection",\n+                "render_collection__counter__listener",\n+                () => {\n+                    cnt__render_collection++;\n+                    if (cnt__render_collection === this.collection.length) {\n+                        this.el.dispatchEvent(new Event("render_collection__finished"));\n+                    }\n+                }\n+            );\n+            const render_collection__finished = () =>\n+                new Promise((resolve) =>\n+                    events.add_event_listener(\n+                        this.el,\n+                        "render_collection__finished",\n+                        "render_collection__finished__listener",\n+                        resolve,\n+                        { once: true }\n+                    )\n+                );\n+\n+            await render_collection__finished();\n+            events.remove_event_listener = (this.el, "render_collection__counter__listener"); // prettier-ignore\n+            events.remove_event_listener = (this.el, "render_collection__finished__listener"); // prettier-ignore\n+            registry.scan(this.$el);\n+        }\n \n-        this.$el.find("table")\n+        this.$el\n+            .find("table")\n             .on("init.dt", () => {\n                 // Add reordering action by drag and drop\n-                if(this.app.options.moveUrl){\n+                if (this.app.options.moveUrl) {\n                     this.addReordering();\n                 }\n                 // store Order of nativ sorting for move action\n@@ -132,10 +172,10 @@ export default BaseView.extend({\n             })\n             .on("order.dt", (e, settings, ordArr) => {\n                 // prevent message from showing for nativ order\n-                if(ordArr.length === 1){\n+                if (ordArr.length === 1) {\n                     const order = ordArr[0];\n-                    if(order.col === 0 && order.dir === \'asc\'){\n-                        if(this.tableSortable){\n+                    if (order.col === 0 && order.dir === "asc") {\n+                        if (this.tableSortable) {\n                             this.tableSortable.enableSort();\n                         }\n                         // Clear the status message\n@@ -144,27 +184,29 @@ export default BaseView.extend({\n                     }\n                 }\n \n-                const btn = $(\'<button type="button" class="btn btn-danger btn-xs"></button>\')\n-                  .text(_t("Reset column sorting"))\n-                  .on("click", () => {\n-                      // Use column 0 to restore ordering and then empty list so it doesn\'t\n-                      // show the icon in the column header\n-                      const api = $(e.target).dataTable().api();\n-                      api.order([0, "asc"]);\n-                      api.draw();\n-                  });\n+                const btn = $(\n+                    \'<button type="button" class="btn btn-danger btn-xs"></button>\'\n+                )\n+                    .text(_t("Reset column sorting"))\n+                    .on("click", () => {\n+                        // Use column 0 to restore ordering and then empty list so it doesn\'t\n+                        // show the icon in the column header\n+                        const api = $(e.target).dataTable().api();\n+                        api.order([0, "asc"]);\n+                        api.draw();\n+                    });\n                 this.app.setStatus(\n-                  {\n-                      text: _t(\n-                        "Notice: Drag and drop reordering is disabled when viewing the contents sorted by a column."\n-                      ),\n-                      type: "warning",\n-                  },\n-                  btn,\n-                  false,\n-                  "sorting_dndreordering_disabled"\n+                    {\n+                        text: _t(\n+                            "Notice: Drag and drop reordering is disabled when viewing the contents sorted by a column."\n+                        ),\n+                        type: "warning",\n+                    },\n+                    btn,\n+                    false,\n+                    "sorting_dndreordering_disabled"\n                 );\n-                if(this.tableSortable){\n+                if (this.tableSortable) {\n                     this.tableSortable.disableSort();\n                 }\n                 this.$el.removeClass("order-support");\n'

