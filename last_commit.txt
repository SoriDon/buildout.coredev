Repository: plone.base


Branch: refs/heads/main
Date: 2022-09-07T15:36:52Z
Author: Rudd-O (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.base/commit/23708ce53c385f17100211fc48fff25997567903

Fix folder_contents being broken with VHM and Multilingual

When Multilingual is enabled and VHM is enabled too, serving any folderish's `folder_contents` under a language folder as a top level domain name is currently broken (if `en.site.com/archives` is VHMed to `PloneSite/en/archives` then `@@qsOptions` URL is `/archives/@@qsOptions` instead of being `/@@qsOptions` as it should be.

The fundamental problem is that the function `get_top_site_from_url(...)` is failing to retrieve the actual top site because it can't find a site in the traversal structure, so it picks the last folderish as the site, which is obvs broken because `/@@qsOptions` only works on site roots, not on folderish content.

This code makes it so that any site found in the structure is returned as the top site from the URL, but if no top site is found in that traversal, the actual site from `getSite()` is returned instead, which is the correct behavior based on how the function is named, and actually fixes the `/@@qsOptions` conundrum.

Files changed:
M src/plone/base/utils.py

b'diff --git a/src/plone/base/utils.py b/src/plone/base/utils.py\nindex c879fd8..793af9a 100644\n--- a/src/plone/base/utils.py\n+++ b/src/plone/base/utils.py\n@@ -262,6 +262,9 @@ def get_top_site_from_url(context, request):\n     - Virtual hosting roots to Subsite, URL path: /, Returns: Subsite\n     """\n     site = getSite()\n+    # This variable collects all sites found during the traversal that\n+    # takes place below, starting with the site root.\n+    subsites = [site]\n     try:\n         url_path = urlparse(context.absolute_url()).path.split("/")\n         for idx in range(len(url_path)):\n@@ -269,10 +272,18 @@ def get_top_site_from_url(context, request):\n             site_path = "/".join(request.physicalPathFromURL(_path)) or "/"\n             _site = context.restrictedTraverse(site_path)\n             if ISite.providedBy(_site):\n+                subsites.append(_site)\n                 break\n-        if _site:\n-            site = _site\n-    except (ValueError, AttributeError):\n+        # Pick the subsite to return.\n+        # If no subsite was found, return the top site.\n+        # If at some point a subsite was found, return that\n+        # (in effect, the shallowest subsite inside the site).\n+        # With VHM, sometimes the topmost site is not actually\n+        # in the client URL, so in that case we fall back to\n+        # the actual top site, even if it is not within the\n+        # client URL.\n+        site = subsites[-1]\n+    except (ValueError, AttributeError) as exc:\n         # On error, just return getSite.\n         # Refs: https://github.com/plone/plone.app.content/issues/103\n         # Also, TestRequest doesn\'t have physicalPathFromURL\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2022-09-07T16:54:47Z
Author: Rudd-O (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.base/commit/4f88a01ad5147bb9d659d36bb36f82cd3ca83d38

Add towncrier announcement.

Files changed:
A news/18.bugfix

b'diff --git a/news/18.bugfix b/news/18.bugfix\nnew file mode 100644\nindex 0000000..636f011\n--- /dev/null\n+++ b/news/18.bugfix\n@@ -0,0 +1 @@\n+fix `@@qsOptions` view (essentially, listing of `folder_contents`) when VHM roots the site on a plone.app.multilingual language folder as noted in https://github.com/plone/plone.app.content/issues/159 [Rudd-O]\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2022-09-07T17:42:57Z
Author: Rudd-O (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.base/commit/49a80b2d8e559b014655d9d475c2ead597ff1fcd

Include the topmost accessible object in the subsites list.

Files changed:
M src/plone/base/utils.py

b'diff --git a/src/plone/base/utils.py b/src/plone/base/utils.py\nindex 793af9a..b4490ef 100644\n--- a/src/plone/base/utils.py\n+++ b/src/plone/base/utils.py\n@@ -257,6 +257,24 @@ def get_top_site_from_url(context, request):\n \n     It should return the following in these cases:\n \n+    - No virtual hosting, URL path: /Plone, Returns: Plone Site\n+    - No virtual hosting, URL path: /Plone/Subsite, Returns: Plone\n+    - Virtual hosting roots to Subsite, URL path: /, Returns: Subsite\n+    """\n+    """Find the top-most site, which is still in the url path.\n+\n+    If the current context is within a subsite within a PloneSiteRoot and no\n+    virtual hosting is in place, the PloneSiteRoot is returned.\n+    When at the same context but in a virtual hosting environment with the\n+    virtual host root pointing to the subsite, it returns the subsite instead\n+    the PloneSiteRoot.\n+\n+    For this given content structure:\n+\n+    /Plone/Subsite\n+\n+    It should return the following in these cases:\n+\n     - No virtual hosting, URL path: /Plone, Returns: Plone Site\n     - No virtual hosting, URL path: /Plone/Subsite, Returns: Plone\n     - Virtual hosting roots to Subsite, URL path: /, Returns: Subsite\n@@ -271,17 +289,17 @@ def get_top_site_from_url(context, request):\n             _path = "/".join(url_path[: idx + 1]) or "/"\n             site_path = "/".join(request.physicalPathFromURL(_path)) or "/"\n             _site = context.restrictedTraverse(site_path)\n-            if ISite.providedBy(_site):\n+            if ISite.providedBy(_site) or idx == 0:\n+                # idx == 0 -> topmost accessible object from VHM.\n                 subsites.append(_site)\n                 break\n         # Pick the subsite to return.\n         # If no subsite was found, return the top site.\n-        # If at some point a subsite was found, return that\n-        # (in effect, the shallowest subsite inside the site).\n+        # If at some point a subsite was found, return that.\n         # With VHM, sometimes the topmost site is not actually\n         # in the client URL, so in that case we fall back to\n-        # the actual top site, even if it is not within the\n-        # client URL.\n+        # the topmost accessible object within the client URL.\n+        # https://github.com/plone/plone.app.content/issues/159\n         site = subsites[-1]\n     except (ValueError, AttributeError) as exc:\n         # On error, just return getSite.\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2022-09-07T18:03:57Z
Author: Rudd-O (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.base/commit/60dcd498cd848e342460c2a11abfdbccbacd2d72

Add comment to give context w.r.t p.a.multilingual.

Files changed:
M src/plone/base/utils.py

b'diff --git a/src/plone/base/utils.py b/src/plone/base/utils.py\nindex b4490ef..bd3a889 100644\n--- a/src/plone/base/utils.py\n+++ b/src/plone/base/utils.py\n@@ -260,6 +260,10 @@ def get_top_site_from_url(context, request):\n     - No virtual hosting, URL path: /Plone, Returns: Plone Site\n     - No virtual hosting, URL path: /Plone/Subsite, Returns: Plone\n     - Virtual hosting roots to Subsite, URL path: /, Returns: Subsite\n+    - Virtual hosting roots to Subsite, URL path: /x, Returns: Subsite\n+\n+    In this context, Subsite also refers to Language Root Folders from\n+    plone.app.multilingual.\n     """\n     """Find the top-most site, which is still in the url path.\n \n'

Repository: plone.base


Branch: refs/heads/main
Date: 2022-09-07T18:19:35Z
Author: Rudd-O (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.base/commit/3199ddb4fad13ebaa1b4c99edbd6c5ff6346cb4f

Remove redundant comment.

Files changed:
M src/plone/base/utils.py

b'diff --git a/src/plone/base/utils.py b/src/plone/base/utils.py\nindex bd3a889..03ac159 100644\n--- a/src/plone/base/utils.py\n+++ b/src/plone/base/utils.py\n@@ -265,24 +265,6 @@ def get_top_site_from_url(context, request):\n     In this context, Subsite also refers to Language Root Folders from\n     plone.app.multilingual.\n     """\n-    """Find the top-most site, which is still in the url path.\n-\n-    If the current context is within a subsite within a PloneSiteRoot and no\n-    virtual hosting is in place, the PloneSiteRoot is returned.\n-    When at the same context but in a virtual hosting environment with the\n-    virtual host root pointing to the subsite, it returns the subsite instead\n-    the PloneSiteRoot.\n-\n-    For this given content structure:\n-\n-    /Plone/Subsite\n-\n-    It should return the following in these cases:\n-\n-    - No virtual hosting, URL path: /Plone, Returns: Plone Site\n-    - No virtual hosting, URL path: /Plone/Subsite, Returns: Plone\n-    - Virtual hosting roots to Subsite, URL path: /, Returns: Subsite\n-    """\n     site = getSite()\n     # This variable collects all sites found during the traversal that\n     # takes place below, starting with the site root.\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2022-09-07T19:16:33Z
Author: Rudd-O (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.base/commit/653bb700f54e79a5861f483c6bb5aebce7c2e5fb

Correct tests.

Files changed:
M src/plone/base/utils.py

b'diff --git a/src/plone/base/utils.py b/src/plone/base/utils.py\nindex 03ac159..a76d008 100644\n--- a/src/plone/base/utils.py\n+++ b/src/plone/base/utils.py\n@@ -266,27 +266,37 @@ def get_top_site_from_url(context, request):\n     plone.app.multilingual.\n     """\n     site = getSite()\n-    # This variable collects all sites found during the traversal that\n-    # takes place below, starting with the site root.\n-    subsites = [site]\n     try:\n+        # This variable collects all sites found during the traversal that\n+        # takes place below, which only includes objects visible via VHM.\n+        subsites = []\n+        # This variable collect the topmost objects found during the\n+        # traversal below, as fallback in case there are no sites found\n+        # during the traversal.\n+        topmosts = []\n         url_path = urlparse(context.absolute_url()).path.split("/")\n         for idx in range(len(url_path)):\n             _path = "/".join(url_path[: idx + 1]) or "/"\n             site_path = "/".join(request.physicalPathFromURL(_path)) or "/"\n             _site = context.restrictedTraverse(site_path)\n-            if ISite.providedBy(_site) or idx == 0:\n-                # idx == 0 -> topmost accessible object from VHM.\n-                subsites.append(_site)\n-                break\n+            if ISite.providedBy(_site):\n+                subsites.append(idx)\n+            else:\n+                topmosts.append(idx)\n         # Pick the subsite to return.\n         # If no subsite was found, return the top site.\n-        # If at some point a subsite was found, return that.\n+        # If at some point a subsite was found, return the\n+        # rootmost of all subsites.\n         # With VHM, sometimes the topmost site is not actually\n         # in the client URL, so in that case we fall back to\n         # the topmost accessible object within the client URL.\n-        # https://github.com/plone/plone.app.content/issues/159\n-        site = subsites[-1]\n+        try:\n+            _path_idx = subsites[0]\n+        except IndexError:\n+            _path_idx = topmosts[0]\n+        _path = "/".join(url_path[: _path_idx + 1]) or "/"\n+        site_path = "/".join(request.physicalPathFromURL(_path)) or "/"\n+        site = context.restrictedTraverse(site_path)\n     except (ValueError, AttributeError) as exc:\n         # On error, just return getSite.\n         # Refs: https://github.com/plone/plone.app.content/issues/103\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2022-09-07T19:31:09Z
Author: Rudd-O (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.base/commit/b1ff114335544d6d7470291bceeb6d1aa4710355

Update tests to cover the test case that this PR fixes.

Files changed:
M src/plone/base/tests/test_utils.py

b'diff --git a/src/plone/base/tests/test_utils.py b/src/plone/base/tests/test_utils.py\nindex 0ed9906..bd953e1 100644\n--- a/src/plone/base/tests/test_utils.py\n+++ b/src/plone/base/tests/test_utils.py\n@@ -127,6 +127,13 @@ def physicalPathFromURL(self, url):\n         ctx.vh_root = "/approot/PloneSite/folder/SubSite"\n         self.assertEqual(get_top_site_from_url(ctx, req).id, "SubSite")\n \n+        # Case 6 (VHM points to child of subsite, this bug existed 4 years):\n+        req = MockRequest()\n+        req.vh_root = "/approot/PloneSite/folder/SubSite/en"\n+        ctx = MockContext("/approot/PloneSite/folder/SubSite/en/archives")\n+        ctx.vh_root = "/approot/PloneSite/folder/SubSite/en"\n+        self.assertEqual(get_top_site_from_url(ctx, req).id, "en")\n+\n     def test_human_readable_size_int(self):\n         from plone.base.utils import human_readable_size\n \n'

Repository: plone.base


Branch: refs/heads/main
Date: 2022-09-07T21:29:14Z
Author: Rudd-O (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.base/commit/991cd48df2ddab9ae5d1733423741bdf8526f6f6

Clarify comment in this crucial piece of code.

Now that tests are passing and the functionality of the site is working perfectly, I give myself some time to give a better rationale for this change as comments, for future me and future Plonistas.

Files changed:
M src/plone/base/utils.py

b'diff --git a/src/plone/base/utils.py b/src/plone/base/utils.py\nindex a76d008..6880e37 100644\n--- a/src/plone/base/utils.py\n+++ b/src/plone/base/utils.py\n@@ -249,21 +249,47 @@ def get_top_site_from_url(context, request):\n     virtual hosting is in place, the PloneSiteRoot is returned.\n     When at the same context but in a virtual hosting environment with the\n     virtual host root pointing to the subsite, it returns the subsite instead\n-    the PloneSiteRoot.\n+    the PloneSiteRoot.  Finally, if the virtual hosting environment points to\n+    a *child* of a site/subsite, that child returns instead of the site/subsite.\n \n     For this given content structure:\n \n-    /Plone/Subsite\n+    /Plone/Subsite:\n+      /file\n+      /en-US\n+        /folder\n+          /image\n \n     It should return the following in these cases:\n \n-    - No virtual hosting, URL path: /Plone, Returns: Plone Site\n-    - No virtual hosting, URL path: /Plone/Subsite, Returns: Plone\n-    - Virtual hosting roots to Subsite, URL path: /, Returns: Subsite\n-    - Virtual hosting roots to Subsite, URL path: /x, Returns: Subsite\n-\n-    In this context, Subsite also refers to Language Root Folders from\n-    plone.app.multilingual.\n+    - No virtual hosting\n+      URL path:              /Plone\n+      Object accessed:       /Plone\n+      Returns:               Plone\n+\n+    - No virtual hosting\n+      URL path:              /Plone/Subsite\n+      Object accessed:       /Plone/Subsite\n+      Returns:               Plone\n+\n+    - Virtual hosting root:  /Plone/Subsite\n+      URL path:              /\n+      Object accessed:       /Plone/Subsite\n+      Returns:               Subsite\n+\n+    - Virtual hosting root:  /Plone/Subsite\n+      URL path:              /file\n+      Object accessd:        /Plone/Subsite/file\n+      Returns:               Subsite\n+\n+    - Virtual hosting root:  /Plone/Subsite/en-US\n+      URL path:              /folder/image\n+      Object accessed:       /Plone/Subsite/en-US/folder/image\n+      Returns:               Subsite/en-US\n+      (in this last case -- common with p.a.multilingual and usually described\n+       as subdomain hosting for languages -- no Site object is visible TTW,\n+       so it must return the topmost visible container, since the callees\n+       need an object with a valid, TTW-visible URL to do their work.)\n     """\n     site = getSite()\n     try:\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2022-09-07T21:49:23Z
Author: Rudd-O (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.base/commit/a80196c7f3d759a1979f7282974b956d0978eca2

Add warning to people who might want to use this function incorrectly.

Files changed:
M src/plone/base/utils.py

b'diff --git a/src/plone/base/utils.py b/src/plone/base/utils.py\nindex 6880e37..5558bb4 100644\n--- a/src/plone/base/utils.py\n+++ b/src/plone/base/utils.py\n@@ -244,6 +244,12 @@ def _top_request(req):\n \n def get_top_site_from_url(context, request):\n     """Find the top-most site, which is still in the url path.\n+    \n+    Use this method if you need a "root object" reference to generate URLs\n+    that will be used by, and will work correctly from the standpoint of,\n+    *browser* code (JavaScript / XML HTTP requests) after virtual hosting has\n+    been applied.  *Never* use this to get to a site root in Plone server code\n+    -- it is not appropriate for that use.\n \n     If the current context is within a subsite within a PloneSiteRoot and no\n     virtual hosting is in place, the PloneSiteRoot is returned.\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2022-09-07T21:51:58Z
Author: Rudd-O (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.base/commit/7d7da9928a58f82702d3755c9d661e2dd67d4a37

Change oneliner description of method, since it was misleading to begin with.

Files changed:
M src/plone/base/utils.py

b'diff --git a/src/plone/base/utils.py b/src/plone/base/utils.py\nindex 5558bb4..1d817d5 100644\n--- a/src/plone/base/utils.py\n+++ b/src/plone/base/utils.py\n@@ -243,7 +243,9 @@ def _top_request(req):\n \n \n def get_top_site_from_url(context, request):\n-    """Find the top-most site, which is still in the url path.\n+    """\n+    Find the first ISite object that appears in the pre-virtual-hosting URL\n+    path, falling back to the object pointed by the virtual hosting root.\n     \n     Use this method if you need a "root object" reference to generate URLs\n     that will be used by, and will work correctly from the standpoint of,\n'

Repository: plone.base


Branch: refs/heads/main
Date: 2022-09-08T16:45:29Z
Author: Rudd-O (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.base/commit/1199d726f879cbecf0a133b35b64dad08d4fd06f

Merge pull request #18 from Rudd-O/main

Fix folder_contents being broken with VHM and Multilingual

------------------------------

When Multilingual is enabled and VHM is enabled too, serving any folderish's `folder_contents` under a language folder as a top level domain name is currently broken (if `en.site.com/archives` is VHMed to `PloneSite/en/archives` then `@@qsOptions` URL is `/archives/@@qsOptions` instead of being `/@@qsOptions` as it should be.

The fundamental problem is that the function `get_top_site_from_url(...)` is failing to retrieve the actual top site because it can't find a site in the traversal structure, so it picks the last folderish as the site, which is obvs broken because `/@@qsOptions` only works on site roots, not on folderish content.

This code makes it so that any site found in the structure is returned as the top site from the URL, but if no top site is found in that traversal, the actual site from `getSite()` is returned instead, which is the correct behavior based on how the function is named, and actually fixes the `/@@qsOptions` conundrum.

# Reproducer

Odd intersection of circumstances to reproduce bug:

1. Create classic `Plone` site.
2. Enable Multilingual with `en-US` or some other language.
3. Verify visiting `/Plone` redirects to `Plone/en-US` or your language folder of choice.
4. VHM your site so that `/Plone/en-US` is accessible as `/` (a standard, supported Multilingual rewrite configuration typically used by Ploners for language-code subdomain hosting).  `Plone/en-US/VirtualHostRoot` is the relevant VHM rewrite.
5. Visit the site.  Verify that site is accessible as `/`.
6. Create folder `xxx` on that location.
7. Visit folder `xxx` on that location.
8. Click on *Folder contents* in the editor toolbar.
9. Verify that the folder contents screen for `xxx` loads, but the actual listing remains empty.
10. Verify that there is an HTTP 404 for `@@qsOptions` in the network panel of your browser inspector.

# Rationale

This code makes the method sometimes return a content object in some cases, rather than an actual site root.

Why?

All callsites (see below) need a "root object" *from the perspective of the browser* to compute a root and generate various URLs for their own purposes, because all their purposes are XHR browser stuff (fill lists of objects and search results, chiefly).  This method I'm fixing determines the "root" used for that tree which is used in related items, image insertion, and folder contents browsing, and if that "root" is incorrect / does not correspond to what the browser sees as "root", **nothing works**.

Needless to say, this method should never be used to traverse anything server-side.

# Quality control

## Callsites 

My omelette is big.  There are not that many uses, and all its uses currently broken are fixed by this patch.  I count two uses:

1. `plone.app.content.browser.contents`:`ContentsBaseAction` / `get_options` / `ContextInfo.call`
2. `plone.app.widgets`:`get_relateditems_options`

## Unit and regression testing

All current unit tests pass now.  I have added a test case to cover the "root URL object is not actually a site" case, which was never tested before.  In addition to that, I have tested this with a local build (most up to date code) and here is what I can verify:

* Related items works now!
* Image insertion works as well.
* Browsing folders in folder contents works too.

So pretty much everything that was broken before, is no longer broken thanks to this modest change.  And that is the complete manual regression test of all users of this code.

Files changed:
A news/18.bugfix
M src/plone/base/tests/test_utils.py
M src/plone/base/utils.py

b'diff --git a/news/18.bugfix b/news/18.bugfix\nnew file mode 100644\nindex 0000000..636f011\n--- /dev/null\n+++ b/news/18.bugfix\n@@ -0,0 +1 @@\n+fix `@@qsOptions` view (essentially, listing of `folder_contents`) when VHM roots the site on a plone.app.multilingual language folder as noted in https://github.com/plone/plone.app.content/issues/159 [Rudd-O]\ndiff --git a/src/plone/base/tests/test_utils.py b/src/plone/base/tests/test_utils.py\nindex 0ed9906..bd953e1 100644\n--- a/src/plone/base/tests/test_utils.py\n+++ b/src/plone/base/tests/test_utils.py\n@@ -127,6 +127,13 @@ def physicalPathFromURL(self, url):\n         ctx.vh_root = "/approot/PloneSite/folder/SubSite"\n         self.assertEqual(get_top_site_from_url(ctx, req).id, "SubSite")\n \n+        # Case 6 (VHM points to child of subsite, this bug existed 4 years):\n+        req = MockRequest()\n+        req.vh_root = "/approot/PloneSite/folder/SubSite/en"\n+        ctx = MockContext("/approot/PloneSite/folder/SubSite/en/archives")\n+        ctx.vh_root = "/approot/PloneSite/folder/SubSite/en"\n+        self.assertEqual(get_top_site_from_url(ctx, req).id, "en")\n+\n     def test_human_readable_size_int(self):\n         from plone.base.utils import human_readable_size\n \ndiff --git a/src/plone/base/utils.py b/src/plone/base/utils.py\nindex c879fd8..1d817d5 100644\n--- a/src/plone/base/utils.py\n+++ b/src/plone/base/utils.py\n@@ -243,36 +243,95 @@ def _top_request(req):\n \n \n def get_top_site_from_url(context, request):\n-    """Find the top-most site, which is still in the url path.\n+    """\n+    Find the first ISite object that appears in the pre-virtual-hosting URL\n+    path, falling back to the object pointed by the virtual hosting root.\n+    \n+    Use this method if you need a "root object" reference to generate URLs\n+    that will be used by, and will work correctly from the standpoint of,\n+    *browser* code (JavaScript / XML HTTP requests) after virtual hosting has\n+    been applied.  *Never* use this to get to a site root in Plone server code\n+    -- it is not appropriate for that use.\n \n     If the current context is within a subsite within a PloneSiteRoot and no\n     virtual hosting is in place, the PloneSiteRoot is returned.\n     When at the same context but in a virtual hosting environment with the\n     virtual host root pointing to the subsite, it returns the subsite instead\n-    the PloneSiteRoot.\n+    the PloneSiteRoot.  Finally, if the virtual hosting environment points to\n+    a *child* of a site/subsite, that child returns instead of the site/subsite.\n \n     For this given content structure:\n \n-    /Plone/Subsite\n+    /Plone/Subsite:\n+      /file\n+      /en-US\n+        /folder\n+          /image\n \n     It should return the following in these cases:\n \n-    - No virtual hosting, URL path: /Plone, Returns: Plone Site\n-    - No virtual hosting, URL path: /Plone/Subsite, Returns: Plone\n-    - Virtual hosting roots to Subsite, URL path: /, Returns: Subsite\n+    - No virtual hosting\n+      URL path:              /Plone\n+      Object accessed:       /Plone\n+      Returns:               Plone\n+\n+    - No virtual hosting\n+      URL path:              /Plone/Subsite\n+      Object accessed:       /Plone/Subsite\n+      Returns:               Plone\n+\n+    - Virtual hosting root:  /Plone/Subsite\n+      URL path:              /\n+      Object accessed:       /Plone/Subsite\n+      Returns:               Subsite\n+\n+    - Virtual hosting root:  /Plone/Subsite\n+      URL path:              /file\n+      Object accessd:        /Plone/Subsite/file\n+      Returns:               Subsite\n+\n+    - Virtual hosting root:  /Plone/Subsite/en-US\n+      URL path:              /folder/image\n+      Object accessed:       /Plone/Subsite/en-US/folder/image\n+      Returns:               Subsite/en-US\n+      (in this last case -- common with p.a.multilingual and usually described\n+       as subdomain hosting for languages -- no Site object is visible TTW,\n+       so it must return the topmost visible container, since the callees\n+       need an object with a valid, TTW-visible URL to do their work.)\n     """\n     site = getSite()\n     try:\n+        # This variable collects all sites found during the traversal that\n+        # takes place below, which only includes objects visible via VHM.\n+        subsites = []\n+        # This variable collect the topmost objects found during the\n+        # traversal below, as fallback in case there are no sites found\n+        # during the traversal.\n+        topmosts = []\n         url_path = urlparse(context.absolute_url()).path.split("/")\n         for idx in range(len(url_path)):\n             _path = "/".join(url_path[: idx + 1]) or "/"\n             site_path = "/".join(request.physicalPathFromURL(_path)) or "/"\n             _site = context.restrictedTraverse(site_path)\n             if ISite.providedBy(_site):\n-                break\n-        if _site:\n-            site = _site\n-    except (ValueError, AttributeError):\n+                subsites.append(idx)\n+            else:\n+                topmosts.append(idx)\n+        # Pick the subsite to return.\n+        # If no subsite was found, return the top site.\n+        # If at some point a subsite was found, return the\n+        # rootmost of all subsites.\n+        # With VHM, sometimes the topmost site is not actually\n+        # in the client URL, so in that case we fall back to\n+        # the topmost accessible object within the client URL.\n+        try:\n+            _path_idx = subsites[0]\n+        except IndexError:\n+            _path_idx = topmosts[0]\n+        _path = "/".join(url_path[: _path_idx + 1]) or "/"\n+        site_path = "/".join(request.physicalPathFromURL(_path)) or "/"\n+        site = context.restrictedTraverse(site_path)\n+    except (ValueError, AttributeError) as exc:\n         # On error, just return getSite.\n         # Refs: https://github.com/plone/plone.app.content/issues/103\n         # Also, TestRequest doesn\'t have physicalPathFromURL\n'

