Repository: plone.app.caching


Branch: refs/heads/master
Date: 2019-02-11T11:06:17+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/c10e1997b4f35b11abbd9836631deb2fc0e1acc7

solved conflcit

Files changed:
M plone/app/caching/purge.py

b"diff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py\nindex beda585..8f6d5c7 100644\n--- a/plone/app/caching/purge.py\n+++ b/plone/app/caching/purge.py\n@@ -24,6 +24,7 @@\n from zope.interface import implementer\n from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n from zope.lifecycleevent.interfaces import IObjectMovedEvent\n+from zope.lifecycleevent.interfaces import IObjectRemovedEvent\n from zope.schema import getFieldsInOrder\n \n import six\n@@ -279,6 +280,15 @@ def purgeOnModified(object, event):\n \n @adapter(IContentish, IObjectMovedEvent)\n def purgeOnMovedOrRemoved(object, event):\n+    request = getRequest()\n+    confirmed_delete = (\n+        'delete_confirmation' in request.URL\n+        and request.REQUEST_METHOD == 'POST'\n+        and 'form.submitted' in request.form\n+    )\n+    if IObjectRemovedEvent.providedBy(event) and not confirmed_delete:\n+        # ignore extra delete events\n+        return\n     # Don't purge when added\n     if event.oldName is not None and event.oldParent is not None:\n         if isPurged(object):\n"

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2019-02-11T11:06:17+01:00
Author: Rob McBroom (skurfer) <github@skurfer.com>
Commit: https://github.com/plone/plone.app.caching/commit/968560530e457c87f86bbc9ef94139f45027e924

ignore add events more reliably

Files changed:
M plone/app/caching/purge.py

b"diff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py\nindex 8f6d5c7..6406f77 100644\n--- a/plone/app/caching/purge.py\n+++ b/plone/app/caching/purge.py\n@@ -22,6 +22,7 @@\n from zope.event import notify\n from zope.globalrequest import getRequest\n from zope.interface import implementer\n+from zope.lifecycleevent.interfaces import IObjectAddedEvent\n from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n from zope.lifecycleevent.interfaces import IObjectMovedEvent\n from zope.lifecycleevent.interfaces import IObjectRemovedEvent\n@@ -290,6 +291,7 @@ def purgeOnMovedOrRemoved(object, event):\n         # ignore extra delete events\n         return\n     # Don't purge when added\n-    if event.oldName is not None and event.oldParent is not None:\n-        if isPurged(object):\n-            notify(Purge(object))\n+    if IObjectAddedEvent.providedBy(event):\n+        return\n+    if isPurged(object):\n+        notify(Purge(object))\n"

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2019-02-11T11:06:17+01:00
Author: Rob McBroom (skurfer) <github@skurfer.com>
Commit: https://github.com/plone/plone.app.caching/commit/5695092506ab2ededf276082ee3da2894ec235e7

also purge the parent on moves and deletes

The parent very likely displays the old object in a list.

Files changed:
M plone/app/caching/purge.py

b'diff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py\nindex 6406f77..0ddc081 100644\n--- a/plone/app/caching/purge.py\n+++ b/plone/app/caching/purge.py\n@@ -295,3 +295,6 @@ def purgeOnMovedOrRemoved(object, event):\n         return\n     if isPurged(object):\n         notify(Purge(object))\n+    parent = object.getParentNode()\n+    if parent:\n+        notify(Purge(parent))\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2019-02-11T11:06:17+01:00
Author: Rob McBroom (skurfer) <github@skurfer.com>
Commit: https://github.com/plone/plone.app.caching/commit/5acc3e1f8275941c735e6e58c69e947412f298c8

more prevention of purging when added

We still want to purge the parent in this case.

Files changed:
M plone/app/caching/purge.py

b"diff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py\nindex 0ddc081..89ef3e5 100644\n--- a/plone/app/caching/purge.py\n+++ b/plone/app/caching/purge.py\n@@ -293,7 +293,7 @@ def purgeOnMovedOrRemoved(object, event):\n     # Don't purge when added\n     if IObjectAddedEvent.providedBy(event):\n         return\n-    if isPurged(object):\n+    if isPurged(object) and 'portal_factory' not in request.URL:\n         notify(Purge(object))\n     parent = object.getParentNode()\n     if parent:\n"

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2019-02-11T11:10:24+01:00
Author: Rob McBroom (skurfer) <github@skurfer.com>
Commit: https://github.com/plone/plone.app.caching/commit/c0734b3fda25fb0f5ae03743651b4a844eb4a434

adjust tests for new behavior

Files changed:
M plone/app/caching/tests/test_purge.py

b"diff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py\nindex 5736429..8c13c7d 100644\n--- a/plone/app/caching/tests/test_purge.py\n+++ b/plone/app/caching/tests/test_purge.py\n@@ -30,6 +30,7 @@\n from zope.component import provideUtility\n from zope.component.event import objectEventNotify\n from zope.event import notify\n+from zope.globalrequest import getRequest\n from zope.globalrequest import setRequest\n from zope.interface import implementer\n from zope.lifecycleevent import ObjectAddedEvent\n@@ -65,7 +66,9 @@ def handler(self, event):\n \n \n class FauxRequest(dict):\n-    pass\n+    REQUEST_METHOD = 'POST'\n+    URL = 'http://nohost/test'\n+    form = ('form.submitted',)\n \n \n @implementer(IContentish)\n@@ -88,6 +91,9 @@ def virtual_url_path(self):\n     def getPhysicalPath(self):\n         return ('', )\n \n+    def getParentNode(self):\n+        return FauxNonContent('folder')\n+\n \n @implementer(IBrowserDefault)\n class FauxContent(FauxNonContent):\n@@ -153,7 +159,7 @@ def test_moved(self):\n         notify(ObjectMovedEvent(context, FauxContent(), 'old',\n                                 context.__parent__, 'new'))\n \n-        self.assertEqual(1, len(self.handler.invocations))\n+        self.assertEqual(2, len(self.handler.invocations))\n         self.assertEqual(context, self.handler.invocations[0].object)\n \n     def test_renamed(self):\n@@ -163,15 +169,17 @@ def test_renamed(self):\n                                 context.__parent__, 'old',\n                                 context.__parent__, 'new'))\n \n-        self.assertEqual(1, len(self.handler.invocations))\n+        self.assertEqual(2, len(self.handler.invocations))\n         self.assertEqual(context, self.handler.invocations[0].object)\n \n     def test_removed(self):\n         context = FauxContent('new').__of__(FauxContent())\n+        request = getRequest()\n+        request.URL = 'http://nohost/delete_confirmation'\n \n         notify(ObjectRemovedEvent(context, context.__parent__, 'new'))\n \n-        self.assertEqual(1, len(self.handler.invocations))\n+        self.assertEqual(2, len(self.handler.invocations))\n         self.assertEqual(context, self.handler.invocations[0].object)\n \n \n"

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2019-02-11T11:10:42+01:00
Author: Peter Holzer (agitator) <peter.holzer@agitator.com>
Commit: https://github.com/plone/plone.app.caching/commit/465f8811c2cbef89cc849c9f76e423cb18221d43

moved changelog entry to news

Files changed:
A news/37.bugfix

b'diff --git a/news/37.bugfix b/news/37.bugfix\nnew file mode 100644\nindex 0000000..63ed7ea\n--- /dev/null\n+++ b/news/37.bugfix\n@@ -0,0 +1,4 @@\n+Only fire 1 Purge() when deleting content, instead of 3 [skurfer]\n+Detect and ignore content creation more reliably [skurfer]\n+Also purge the parent object when something changes (since the parent probably displays a list that includes the item being changed)\n+[skurfer]\n\\ No newline at end of file\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2019-02-21T15:30:02+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/d393908394cbd7f2218710edad450b4c6f1dbf1e

Merge pull request #37 from plone/dupes

Clean up Purge events

Files changed:
A news/37.bugfix
M plone/app/caching/purge.py
M plone/app/caching/tests/test_purge.py

b"diff --git a/news/37.bugfix b/news/37.bugfix\nnew file mode 100644\nindex 0000000..63ed7ea\n--- /dev/null\n+++ b/news/37.bugfix\n@@ -0,0 +1,4 @@\n+Only fire 1 Purge() when deleting content, instead of 3 [skurfer]\n+Detect and ignore content creation more reliably [skurfer]\n+Also purge the parent object when something changes (since the parent probably displays a list that includes the item being changed)\n+[skurfer]\n\\ No newline at end of file\ndiff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py\nindex beda585..89ef3e5 100644\n--- a/plone/app/caching/purge.py\n+++ b/plone/app/caching/purge.py\n@@ -22,8 +22,10 @@\n from zope.event import notify\n from zope.globalrequest import getRequest\n from zope.interface import implementer\n+from zope.lifecycleevent.interfaces import IObjectAddedEvent\n from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n from zope.lifecycleevent.interfaces import IObjectMovedEvent\n+from zope.lifecycleevent.interfaces import IObjectRemovedEvent\n from zope.schema import getFieldsInOrder\n \n import six\n@@ -279,7 +281,20 @@ def purgeOnModified(object, event):\n \n @adapter(IContentish, IObjectMovedEvent)\n def purgeOnMovedOrRemoved(object, event):\n+    request = getRequest()\n+    confirmed_delete = (\n+        'delete_confirmation' in request.URL\n+        and request.REQUEST_METHOD == 'POST'\n+        and 'form.submitted' in request.form\n+    )\n+    if IObjectRemovedEvent.providedBy(event) and not confirmed_delete:\n+        # ignore extra delete events\n+        return\n     # Don't purge when added\n-    if event.oldName is not None and event.oldParent is not None:\n-        if isPurged(object):\n-            notify(Purge(object))\n+    if IObjectAddedEvent.providedBy(event):\n+        return\n+    if isPurged(object) and 'portal_factory' not in request.URL:\n+        notify(Purge(object))\n+    parent = object.getParentNode()\n+    if parent:\n+        notify(Purge(parent))\ndiff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py\nindex 5736429..8c13c7d 100644\n--- a/plone/app/caching/tests/test_purge.py\n+++ b/plone/app/caching/tests/test_purge.py\n@@ -30,6 +30,7 @@\n from zope.component import provideUtility\n from zope.component.event import objectEventNotify\n from zope.event import notify\n+from zope.globalrequest import getRequest\n from zope.globalrequest import setRequest\n from zope.interface import implementer\n from zope.lifecycleevent import ObjectAddedEvent\n@@ -65,7 +66,9 @@ def handler(self, event):\n \n \n class FauxRequest(dict):\n-    pass\n+    REQUEST_METHOD = 'POST'\n+    URL = 'http://nohost/test'\n+    form = ('form.submitted',)\n \n \n @implementer(IContentish)\n@@ -88,6 +91,9 @@ def virtual_url_path(self):\n     def getPhysicalPath(self):\n         return ('', )\n \n+    def getParentNode(self):\n+        return FauxNonContent('folder')\n+\n \n @implementer(IBrowserDefault)\n class FauxContent(FauxNonContent):\n@@ -153,7 +159,7 @@ def test_moved(self):\n         notify(ObjectMovedEvent(context, FauxContent(), 'old',\n                                 context.__parent__, 'new'))\n \n-        self.assertEqual(1, len(self.handler.invocations))\n+        self.assertEqual(2, len(self.handler.invocations))\n         self.assertEqual(context, self.handler.invocations[0].object)\n \n     def test_renamed(self):\n@@ -163,15 +169,17 @@ def test_renamed(self):\n                                 context.__parent__, 'old',\n                                 context.__parent__, 'new'))\n \n-        self.assertEqual(1, len(self.handler.invocations))\n+        self.assertEqual(2, len(self.handler.invocations))\n         self.assertEqual(context, self.handler.invocations[0].object)\n \n     def test_removed(self):\n         context = FauxContent('new').__of__(FauxContent())\n+        request = getRequest()\n+        request.URL = 'http://nohost/delete_confirmation'\n \n         notify(ObjectRemovedEvent(context, context.__parent__, 'new'))\n \n-        self.assertEqual(1, len(self.handler.invocations))\n+        self.assertEqual(2, len(self.handler.invocations))\n         self.assertEqual(context, self.handler.invocations[0].object)\n \n \n"

