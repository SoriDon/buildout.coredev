Repository: plone.namedfile


Branch: refs/heads/master
Date: 2022-08-13T22:04:01+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/74f556edfcdccda05fa9627c26d885a6d4d5d068

Revert "Use mode parameter instead of deprecated direction and warn user about it."

This reverts commit 7b9ed92ee5b9cf3535446073ee3c0bb0098458d5.

It causes test failures in plone.restapi.  Need to have a look later.

Files changed:
M plone/namedfile/adapters.py
M plone/namedfile/scaling.py
M plone/namedfile/test.pt
M plone/namedfile/tests/test_adapters.py
M plone/namedfile/tests/test_scaling.py
M plone/namedfile/usage.rst
D news/102.bugfix

b'diff --git a/news/102.bugfix b/news/102.bugfix\ndeleted file mode 100644\nindex 192f87d..0000000\n--- a/news/102.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Use ``mode`` parameter instead of deprecated ``direction`` and warn user about it.\n-[petschki, maurits]\ndiff --git a/plone/namedfile/adapters.py b/plone/namedfile/adapters.py\nindex 0f1453b..dc831b2 100644\n--- a/plone/namedfile/adapters.py\n+++ b/plone/namedfile/adapters.py\n@@ -121,6 +121,7 @@ def get_original_image_url(self, fieldname, width, height):\n             fieldname,\n             width=width,\n             height=height,\n+            direction="thumbnail",\n             pre=True,\n             include_srcset=False,\n         )\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 3185a51..21efd53 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -37,7 +37,6 @@\n \n import functools\n import logging\n-import warnings\n \n \n logger = logging.getLogger(__name__)\n@@ -275,19 +274,13 @@ def update_parameters(self, **parameters):\n                 parameters["quality"] = quality\n         return parameters\n \n-    def create_scale(self, data, mode, height, width, **parameters):\n-        if "direction" in parameters:\n-            warnings.warn(\n-                "The \'direction\' option is deprecated, use \'mode\' instead.",\n-                DeprecationWarning,\n-            )\n-            mode = parameters.pop("direction")\n+    def create_scale(self, data, direction, height, width, **parameters):\n         return scaleImage(\n-            data, mode=mode, height=height, width=width, **parameters\n+            data, direction=direction, height=height, width=width, **parameters\n         )\n \n     def handle_image(\n-        self, orig_value, orig_data, mode, height, width, **parameters\n+        self, orig_value, orig_data, direction, height, width, **parameters\n     ):\n         """Return a scaled image, its mimetype format, and width and height."""\n         if getattr(orig_value, "contentType", "") == "image/svg+xml":\n@@ -301,7 +294,7 @@ def handle_image(\n             return result\n         try:\n             result = self.create_scale(\n-                orig_data, mode=mode, height=height, width=width, **parameters\n+                orig_data, direction=direction, height=height, width=width, **parameters\n             )\n         except (ConflictError, KeyboardInterrupt):\n             raise\n@@ -318,7 +311,7 @@ def handle_image(\n     def __call__(\n         self,\n         fieldname=None,\n-        mode="scale",\n+        direction="thumbnail",\n         height=None,\n         width=None,\n         scale=None,\n@@ -363,7 +356,7 @@ def __call__(\n             del parameters["modified"]\n         try:\n             result = self.handle_image(\n-                orig_value, orig_data, mode, height, width, **parameters\n+                orig_value, orig_data, direction, height, width, **parameters\n             )\n         finally:\n             # Make sure the file is closed to avoid error:\n@@ -455,10 +448,9 @@ def traverse(self, name, furtherPath):\n     @deprecate("use property available_sizes instead")\n     def getAvailableSizes(self, fieldname=None):\n         if fieldname:\n-            warnings.warn(\n+            logger.warning(\n                 "fieldname was passed to deprecated getAvailableSizes, but "\n                 "will be ignored.",\n-                DeprecationWarning,\n             )\n         return self.available_sizes\n \n@@ -529,7 +521,7 @@ def scale(\n         scale=None,\n         height=None,\n         width=None,\n-        mode="scale",\n+        direction="thumbnail",\n         pre=False,\n         include_srcset=None,\n         **parameters,\n@@ -544,9 +536,9 @@ def scale(\n             fieldname = primary.fieldname\n         if scale is not None:\n             if width is not None or height is not None:\n-                logger.warning(\n-                    "A scale name and width/height are given. Those are "\n-                    "mutually exclusive: solved by ignoring width/height and "\n+                logger.warn(\n+                    "A scale name and width/heigth are given. Those are"\n+                    "mutually exclusive: solved by ignoring width/heigth and "\n                     "taking name",\n                 )\n             available = self.available_sizes\n@@ -565,7 +557,7 @@ def scale(\n             fieldname=fieldname,\n             height=height,\n             width=width,\n-            mode=mode,\n+            direction=direction,\n             scale=scale,\n             **parameters,\n         )\n@@ -584,7 +576,7 @@ def scale(\n                     fieldname=fieldname,\n                     height=height,\n                     width=width,\n-                    mode=mode,\n+                    direction=direction,\n                     scale=scale,\n                     storage=storage,\n                     **parameters,\n@@ -600,7 +592,7 @@ def calculate_srcset(\n         scale=None,\n         height=None,\n         width=None,\n-        mode="scale",\n+        direction="thumbnail",\n         storage=None,\n         **parameters,\n     ):\n@@ -618,7 +610,7 @@ def calculate_srcset(\n                 fieldname=fieldname,\n                 height=height * hdScale["scale"] if height else height,\n                 width=width * hdScale["scale"] if width else width,\n-                mode=mode,\n+                direction=direction,\n                 **parameters,\n             )\n             if scale_src is None:\n@@ -633,10 +625,10 @@ def tag(\n         scale=None,\n         height=None,\n         width=None,\n-        mode="scale",\n+        direction="thumbnail",\n         **kwargs,\n     ):\n-        scale = self.scale(fieldname, scale, height, width, mode, pre=True)\n+        scale = self.scale(fieldname, scale, height, width, direction, pre=True)\n         return scale.tag(**kwargs) if scale else None\n \n     def picture(\n@@ -741,7 +733,7 @@ def _tag_from_brain_image_scales(\n         """Try to get a tag from the image_scales metadata.\n \n         If we have any non-standard keyword arguments, we cannot use this method.\n-        Especially you cannot set a mode: we must use the default "scale" mode.\n+        Especially you cannot set a direction: we must use the default "thumbnail".\n \n         Also, no old-style hidpi srcsets are included.  If the site has enabled this,\n         we return nothing: this information is not (easily) available in the brain.\ndiff --git a/plone/namedfile/test.pt b/plone/namedfile/test.pt\nindex a1ad17d..d15efb0 100644\n--- a/plone/namedfile/test.pt\n+++ b/plone/namedfile/test.pt\n@@ -69,7 +69,7 @@\n   </section>\n   <hr />\n   <section id="examples">\n-    <h2>Examples with mode</h2>\n+    <h2>Examples with direction/mode</h2>\n \n     <h3>Mini</h3>\n     <figure class="figure"\n@@ -78,16 +78,16 @@\n       <br /><code tal:content="img_tag" />\n     </figure>\n \n-    <h3 id="cover">Mini mode=cover</h3>\n+    <h3 id="cover">Mini direction=cover</h3>\n     <figure class="figure"\n-      tal:define="img_tag python:images.tag(\'image\', scale=\'mini\', mode=\'cover\')">\n+      tal:define="img_tag python:images.tag(\'image\', scale=\'mini\', direction=\'cover\')">\n       <img tal:replace="structure img_tag" />\n       <br /><code tal:content="img_tag" />\n     </figure>\n \n-    <h3 id="contain">Mini mode=contain</h3>\n+    <h3 id="contain">Mini direction=contain</h3>\n     <figure class="figure"\n-      tal:define="img_tag python:images.tag(\'image\', scale=\'mini\', mode=\'contain\')">\n+      tal:define="img_tag python:images.tag(\'image\', scale=\'mini\', direction=\'contain\')">\n       <img tal:replace="structure img_tag" />\n       <br /><code tal:content="img_tag" />\n     </figure>\n@@ -96,7 +96,9 @@\n   <section id="picture">\n     <h2>Picture tags</h2>\n     <p>\n-      Picture tags only work on Plone 6.\n+      Temporary note:\n+      Picture tags only work on Plone 6, with several other branches merged.\n+      See <a href="https://github.com/plone/buildout.coredev/blob/6.0/plips/plip-image-srcsets.cfg">coredev</a>.\n       If not available (like on Plone 5.2), an ordinary image tag is created.\n     </p>\n \ndiff --git a/plone/namedfile/tests/test_adapters.py b/plone/namedfile/tests/test_adapters.py\nindex e13160e..7a14782 100644\n--- a/plone/namedfile/tests/test_adapters.py\n+++ b/plone/namedfile/tests/test_adapters.py\n@@ -85,7 +85,7 @@ def test_field_adapter_return_scales(self):\n             },\n         )\n         # Note: self.content.absolute_url() is actually empty in this test.\n-        self.assertTrue(download.startswith("@@images/image1-16-"))\n+        self.assertTrue(download.startswith(f"@@images/image1-16-"))\n         self.assertTrue(download.endswith(".gif"))\n         self.assertIn("listing", scales)\n         self.assertEqual(len(scales), 1)\n@@ -94,7 +94,7 @@ def test_field_adapter_return_scales(self):\n         self.assertEqual(listing["height"], 16)\n         self.assertEqual(listing["width"], 16)\n         download = listing["download"]\n-        self.assertTrue(download.startswith("@@images/image1-16-"))\n+        self.assertTrue(download.startswith(f"@@images/image1-16-"))\n         self.assertTrue(download.endswith(".gif"))\n \n     @unittest.skipIf(IImageScalesFieldAdapter is not None, "Skipping on Plone 6")\n@@ -131,7 +131,7 @@ def test_field_adapter_does_not_return_larger_scales(self):\n             },\n         )\n         # Note: self.content.absolute_url() is actually empty in this test.\n-        self.assertTrue(download.startswith("@@images/image1-900-"))\n+        self.assertTrue(download.startswith(f"@@images/image1-900-"))\n         self.assertTrue(download.endswith(".jpeg"))\n         # larger and huge should not be in here: these scales would return the same\n         # content as the original.\n@@ -142,4 +142,4 @@ def test_field_adapter_does_not_return_larger_scales(self):\n         preview = scales["preview"]\n         self.assertEqual(preview["width"], 400)\n         self.assertEqual(preview["height"], 400)\n-        self.assertTrue(preview["download"].startswith("@@images/image1-400-"))\n+        self.assertTrue(preview["download"].startswith(f"@@images/image1-400-"))\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex ed4382a..1aff212 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -30,7 +30,6 @@\n import re\n import time\n import unittest\n-import warnings\n \n \n # Unique scale name used to be a uuid.uui4(),\n@@ -673,29 +672,7 @@ def testGuardedAccess(self):\n \n     def testGetAvailableSizes(self):\n         self.scaling.available_sizes = {"foo": (60, 60)}\n-        with warnings.catch_warnings(record=True) as w:\n-            warnings.simplefilter("once")\n-            self.assertEqual(\n-                self.scaling.getAvailableSizes(),\n-                {"foo": (60, 60)},\n-            )\n-            self.assertEqual(len(w), 1)\n-            self.assertIs(w[0].category, DeprecationWarning)\n-            self.assertIn(\n-                "use property available_sizes instead",\n-                str(w[0].message),\n-            )\n-            self.assertEqual(\n-                self.scaling.getAvailableSizes("image"),\n-                {"foo": (60, 60)},\n-            )\n-            self.assertEqual(len(w), 2)\n-            self.assertIs(w[1].category, DeprecationWarning)\n-            self.assertIn(\n-                "fieldname was passed to deprecated getAvailableSizes, but "\n-                "will be ignored.",\n-                str(w[1].message),\n-            )\n+        assert self.scaling.getAvailableSizes("image") == {"foo": (60, 60)}\n \n     def testGetImageSize(self):\n         assert self.scaling.getImageSize("image") == (200, 200)\ndiff --git a/plone/namedfile/usage.rst b/plone/namedfile/usage.rst\nindex b5625d0..b59639c 100644\n--- a/plone/namedfile/usage.rst\n+++ b/plone/namedfile/usage.rst\n@@ -357,8 +357,8 @@ several ways that you may reference scales from page templates.\n \n 1. for full control you may do the tag generation explicitly::\n \n-     <img tal:define="images context/@@images;\n-                      thumbnail python: images.scale(\'image\', width=64, height=64);"\n+     <img tal:define="scales context/@@images;\n+                      thumbnail python: scales.scale(\'image\', width=64, height=64);"\n           tal:condition="thumbnail"\n           tal:attributes="src thumbnail/url;\n                           width thumbnail/width;\n@@ -366,16 +366,16 @@ several ways that you may reference scales from page templates.\n \n    This would create an up to 64 by 64 pixel scaled down version of the image\n    stored in the "image" field.  It also allows for passing in additional\n-   parameters supported by the ``scaleImage`` function from ``plone.scale``,\n-   e.g. ``mode`` or ``quality``.\n+   parameters support by `plone.scale`_\'s ``scaleImage`` function, e.g.\n+   ``direction`` or ``quality``.\n \n-   .. _`plone.scale`: https://pypi.org/project/plone.scale/\n+   .. _`plone.scale`: http://pypi.python.org/pypi/plone.scale\n \n 2. for automatic tag generation with extra parameters you would use::\n \n-     <img tal:define="images context/@@images"\n-          tal:replace="structure python: images.tag(\'image\',\n-                       width=1200, height=800, mode=\'contain\')" />\n+     <img tal:define="scale context/@@images"\n+          tal:replace="structure python: scale.scale(\'image\',\n+                       width=1200, height=800, direction=\'down\').tag()" />\n \n 3. It is possible to access scales via predefined named scale sizes, rather\n    than hardcoding the dimensions every time you access a scale.  The scale\n@@ -384,8 +384,9 @@ several ways that you may reference scales from page templates.\n    scale name => (width, height).  A scale called \'mini\' could then be accessed\n    like this::\n \n-     <img tal:define="images context/@@images"\n-          tal:replace="structure python: images.tag(\'image\', scale=\'mini\')" />\n+     <img tal:define="scale context/@@images"\n+          tal:replace="structure python: scale.scale(\'image\',\n+                       scale=\'mini\').tag()" />\n \n    This would use the predefined scale size "mini" to determine the desired\n    image dimensions, but still allow to pass in extra parameters.\n'

