Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-01-24T12:08:58+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.layout/commit/fe976393ab2dadb8328f0c0fc2969145523d4c0e

globalsections: rm deprecated code and get registry once

Files changed:
M plone/app/layout/viewlets/common.py

b'diff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex d3b56803..d9d0553d 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -240,46 +240,39 @@ class GlobalSectionsViewlet(ViewletBase):\n     )\n     _subtree_markup_wrapper = u\'<ul class="has_subtree dropdown">{out}</ul>\'\n \n+    def __init__(self, *args):\n+        super().__init__(*args)\n+        self.registry = getUtility(IRegistry)\n+\n     @property\n     def settings(self):\n-        registry = getUtility(IRegistry)\n-        settings = registry.forInterface(INavigationSchema, prefix="plone")\n-        return settings\n+        return self.registry.forInterface(INavigationSchema, prefix="plone")\n \n     @property\n     def language_settings(self):\n-        registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ILanguageSchema, prefix="plone")\n-        return settings\n+        return self.registry.forInterface(ILanguageSchema, prefix="plone")\n \n     @property\n     def navtree_path(self):\n         return getNavigationRoot(self.context)\n \n-    @property\n-    @deprecate("This property will be removed in Plone 6")\n-    def navtree_depth(self):\n-        return self.settings.navigation_depth\n-\n     @property\n     def current_language(self):\n+        language_settings = self.registry.forInterface(ILanguageSchema, prefix="plone")\n         return (\n             self.request.get("LANGUAGE", None)\n             or (self.context and aq_inner(self.context).Language())\n-            or self.language_settings.default_language\n+            or language_settings.default_language\n         )\n \n     @property\n     def types_using_view(self):\n-        registry = getUtility(IRegistry)\n-        types_using_view = registry.get("plone.types_use_view_action_in_listings", [])\n-        return types_using_view\n+        return self.registry.get("plone.types_use_view_action_in_listings", [])\n \n     @property\n     @memoize\n     def navtree(self):\n         ret = defaultdict(list)\n-        settings = self.settings\n         navtree_path = self.navtree_path\n         portal_tabs = self.portal_tabs\n         for tab in portal_tabs:\n@@ -307,6 +300,7 @@ def navtree(self):\n             self.customize_tab(entry, tab)\n             ret[navtree_path].append(entry)\n \n+        settings = self.settings\n         if not settings.generate_tabs:\n             return ret\n \n@@ -338,7 +332,7 @@ def navtree(self):\n         portal_catalog = getToolByName(self.context, "portal_catalog")\n         brains = portal_catalog.searchResults(**query)\n \n-        types_using_view = self.types_using_view\n+        types_using_view = set(self.types_using_view)\n         for brain in brains:\n             brain_path = brain.getPath()\n             brain_parent_path = brain_path.rpartition("/")[0]\n@@ -421,54 +415,6 @@ def portal_tabs(self):\n         )\n         return portal_tabs_view.topLevelTabs()\n \n-    @deprecate("This method will be removed in Plone 6")\n-    def selectedTabs(self, default_tab="index_html", portal_tabs=()):\n-        portal = getToolByName(self.context, "portal_url").getPortalObject()\n-        plone_url = getNavigationRootObject(self.context, portal).absolute_url()\n-        plone_url_len = len(plone_url)\n-        request = self.request\n-        valid_actions = []\n-\n-        url = request["URL"]\n-        path = url[plone_url_len:]\n-        path_list = path.split("/")\n-        if len(path_list) <= 1:\n-            return {"portal": default_tab}\n-\n-        for action in portal_tabs:\n-            if not action["url"].startswith(plone_url):\n-                # In this case the action url is an external link. Then, we\n-                # avoid issues (bad portal_tab selection) continuing with next\n-                # action.\n-                continue\n-            action_path = action["url"][plone_url_len:]\n-            if not action_path.startswith("/"):\n-                action_path = "/" + action_path\n-            action_path_list = action_path.split("/")\n-            if action_path_list[1] == path_list[1]:\n-                # Make a list of the action ids, along with the path length\n-                # for choosing the longest (most relevant) path.\n-                valid_actions.append((len(action_path_list), action["id"]))\n-\n-        # Sort by path length, the longest matching path wins\n-        valid_actions.sort()\n-        if valid_actions:\n-            return {"portal": valid_actions[-1][1]}\n-\n-        return {"portal": default_tab}\n-\n-    @property\n-    @memoize\n-    @deprecate("This method will be removed in Plone 6")\n-    def selected_tabs(self):\n-        return self.selectedTabs(portal_tabs=self.portal_tabs)\n-\n-    @property\n-    @memoize\n-    @deprecate("This method will be removed in Plone 6")\n-    def selected_portal_tab(self):\n-        return self.selected_tabs["portal"]\n-\n \n class PersonalBarViewlet(ViewletBase):\n \n@@ -510,7 +456,7 @@ def update(self):\n             member = self.portal_state.member()\n             userid = member.getId()\n \n-            self.homelink_url = "%s/useractions" % self.navigation_root_url\n+            self.homelink_url = f"{self.navigation_root_url}/useractions"\n \n             membership = getToolByName(context, "portal_membership")\n             member_info = membership.getMemberInfo(userid)\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-01-24T12:17:17+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.layout/commit/9cca510fa58dac884a9ac9cf6dc4349aa11047b9

black common.py

Files changed:
A news/285.breaking
A news/285.bugfix
M plone/app/layout/viewlets/common.py

b'diff --git a/news/285.breaking b/news/285.breaking\nnew file mode 100644\nindex 00000000..acbb4f0b\n--- /dev/null\n+++ b/news/285.breaking\n@@ -0,0 +1,2 @@\n+Remove (marked for removal im Plone 6) deprecated methods. [jensens]\n+\ndiff --git a/news/285.bugfix b/news/285.bugfix\nnew file mode 100644\nindex 00000000..ac0e1fa9\n--- /dev/null\n+++ b/news/285.bugfix\n@@ -0,0 +1 @@\n+In global sections viewlet fetch registry only one time. Also: Code style black and minor code cleanup. [jensens]\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex d9d0553d..2c56a5db 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -38,8 +38,8 @@\n zope.deferredimport.initialize()\n zope.deferredimport.deprecated(\n     "Import from plone.app.portlets.browser.viewlets instead",\n-    ManagePortletsFallbackViewlet=\'plone.app.portlets.browser.viewlets:ManagePortletsFallbackViewlet\',\n-    FooterViewlet=\'plone.app.portlets.browser.viewlets:FooterViewlet\',\n+    ManagePortletsFallbackViewlet="plone.app.portlets.browser.viewlets:ManagePortletsFallbackViewlet",\n+    FooterViewlet="plone.app.portlets.browser.viewlets:FooterViewlet",\n )\n \n \n@@ -68,7 +68,7 @@ def portal_url(self):\n \n     def update(self):\n         self.portal_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_portal_state"\n+            (self.context, self.request), name="plone_portal_state"\n         )\n         self.site_url = self.portal_state.portal_url()\n         self.navigation_root_url = self.portal_state.navigation_root_url()\n@@ -94,7 +94,7 @@ class TitleViewlet(ViewletBase):\n     index = ViewPageTemplateFile("title.pt")\n \n     # seperator of page- and portal-title\n-    sep = u" &mdash; "\n+    sep = " &mdash; "\n \n     @property\n     @memoize\n@@ -133,7 +133,7 @@ def page_title(self):\n             return self.site_title_setting\n \n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n         return escape(safe_unicode(context_state.object_title()))\n \n@@ -142,7 +142,7 @@ def update(self):\n             self.site_title = self.site_title_setting\n             return\n         portal_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_portal_state"\n+            (self.context, self.request), name="plone_portal_state"\n         )\n         if IPloneSiteRoot.providedBy(portal_state.navigation_root()):\n             portal_title = self.site_title_setting\n@@ -187,7 +187,7 @@ class SiteActionsViewlet(ViewletBase):\n \n     def update(self):\n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n         self.site_actions = context_state.actions("site_actions")\n \n@@ -199,7 +199,7 @@ def update(self):\n         super(SearchBoxViewlet, self).update()\n \n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n \n         registry = getUtility(IRegistry)\n@@ -229,16 +229,16 @@ class GlobalSectionsViewlet(ViewletBase):\n     index = ViewPageTemplateFile("sections.pt")\n \n     _opener_markup_template = (\n-        u\'<input id="navitem-{uid}" type="checkbox" class="opener" />\'\n-        u\'<label for="navitem-{uid}" role="button" aria-label="{title}"></label>\'  # noqa: E 501\n+        \'<input id="navitem-{uid}" type="checkbox" class="opener" />\'\n+        \'<label for="navitem-{uid}" role="button" aria-label="{title}"></label>\'  # noqa: E 501\n     )\n     _item_markup_template = (\n-        u\'<li class="{id}{has_sub_class} nav-item">\'\n-        u\'<a href="{url}" class="state-{review_state} nav-link"{aria_haspopup}>{title}</a>{opener}\'  # noqa: E 501\n-        u"{sub}"\n-        u"</li>"\n+        \'<li class="{id}{has_sub_class} nav-item">\'\n+        \'<a href="{url}" class="state-{review_state} nav-link"{aria_haspopup}>{title}</a>{opener}\'  # noqa: E 501\n+        "{sub}"\n+        "</li>"\n     )\n-    _subtree_markup_wrapper = u\'<ul class="has_subtree dropdown">{out}</ul>\'\n+    _subtree_markup_wrapper = \'<ul class="has_subtree dropdown">{out}</ul>\'\n \n     def __init__(self, *args):\n         super().__init__(*args)\n@@ -396,7 +396,7 @@ def build_tree(self, path, first_run=True):\n         """Non-template based recursive tree building.\n         3-4 times faster than template based.\n         """\n-        out = u""\n+        out = ""\n         for item in self.navtree.get(path, []):\n             out += self.render_item(item, path)\n \n@@ -426,7 +426,7 @@ def update(self):\n         context = aq_inner(self.context)\n \n         context_state = getMultiAdapter(\n-            (context, self.request), name=u"plone_context_state"\n+            (context, self.request), name="plone_context_state"\n         )\n \n         user_actions = context_state.actions("user")\n@@ -497,7 +497,7 @@ def getTabSets(self):\n         context_fti = context.getTypeInfo()\n \n         context_state = getMultiAdapter(\n-            (context, self.request), name=u"plone_context_state"\n+            (context, self.request), name="plone_context_state"\n         )\n         actions = context_state.actions\n \n@@ -612,5 +612,3 @@ def update(self):\n \n class TinyLogoViewlet(ViewletBase):\n     index = ViewPageTemplateFile("tiny_logo.pt")\n-\n-\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2022-01-24T23:35:11+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.layout/commit/ba873b3739f981c85a7a13659976f6fb28badafb

Merge pull request #285 from plone/navtree-adjustments

Global Sections Adjustments

Files changed:
A news/285.breaking
A news/285.bugfix
M plone/app/layout/viewlets/common.py

b'diff --git a/news/285.breaking b/news/285.breaking\nnew file mode 100644\nindex 00000000..acbb4f0b\n--- /dev/null\n+++ b/news/285.breaking\n@@ -0,0 +1,2 @@\n+Remove (marked for removal im Plone 6) deprecated methods. [jensens]\n+\ndiff --git a/news/285.bugfix b/news/285.bugfix\nnew file mode 100644\nindex 00000000..ac0e1fa9\n--- /dev/null\n+++ b/news/285.bugfix\n@@ -0,0 +1 @@\n+In global sections viewlet fetch registry only one time. Also: Code style black and minor code cleanup. [jensens]\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex d3b56803..2c56a5db 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -38,8 +38,8 @@\n zope.deferredimport.initialize()\n zope.deferredimport.deprecated(\n     "Import from plone.app.portlets.browser.viewlets instead",\n-    ManagePortletsFallbackViewlet=\'plone.app.portlets.browser.viewlets:ManagePortletsFallbackViewlet\',\n-    FooterViewlet=\'plone.app.portlets.browser.viewlets:FooterViewlet\',\n+    ManagePortletsFallbackViewlet="plone.app.portlets.browser.viewlets:ManagePortletsFallbackViewlet",\n+    FooterViewlet="plone.app.portlets.browser.viewlets:FooterViewlet",\n )\n \n \n@@ -68,7 +68,7 @@ def portal_url(self):\n \n     def update(self):\n         self.portal_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_portal_state"\n+            (self.context, self.request), name="plone_portal_state"\n         )\n         self.site_url = self.portal_state.portal_url()\n         self.navigation_root_url = self.portal_state.navigation_root_url()\n@@ -94,7 +94,7 @@ class TitleViewlet(ViewletBase):\n     index = ViewPageTemplateFile("title.pt")\n \n     # seperator of page- and portal-title\n-    sep = u" &mdash; "\n+    sep = " &mdash; "\n \n     @property\n     @memoize\n@@ -133,7 +133,7 @@ def page_title(self):\n             return self.site_title_setting\n \n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n         return escape(safe_unicode(context_state.object_title()))\n \n@@ -142,7 +142,7 @@ def update(self):\n             self.site_title = self.site_title_setting\n             return\n         portal_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_portal_state"\n+            (self.context, self.request), name="plone_portal_state"\n         )\n         if IPloneSiteRoot.providedBy(portal_state.navigation_root()):\n             portal_title = self.site_title_setting\n@@ -187,7 +187,7 @@ class SiteActionsViewlet(ViewletBase):\n \n     def update(self):\n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n         self.site_actions = context_state.actions("site_actions")\n \n@@ -199,7 +199,7 @@ def update(self):\n         super(SearchBoxViewlet, self).update()\n \n         context_state = getMultiAdapter(\n-            (self.context, self.request), name=u"plone_context_state"\n+            (self.context, self.request), name="plone_context_state"\n         )\n \n         registry = getUtility(IRegistry)\n@@ -229,57 +229,50 @@ class GlobalSectionsViewlet(ViewletBase):\n     index = ViewPageTemplateFile("sections.pt")\n \n     _opener_markup_template = (\n-        u\'<input id="navitem-{uid}" type="checkbox" class="opener" />\'\n-        u\'<label for="navitem-{uid}" role="button" aria-label="{title}"></label>\'  # noqa: E 501\n+        \'<input id="navitem-{uid}" type="checkbox" class="opener" />\'\n+        \'<label for="navitem-{uid}" role="button" aria-label="{title}"></label>\'  # noqa: E 501\n     )\n     _item_markup_template = (\n-        u\'<li class="{id}{has_sub_class} nav-item">\'\n-        u\'<a href="{url}" class="state-{review_state} nav-link"{aria_haspopup}>{title}</a>{opener}\'  # noqa: E 501\n-        u"{sub}"\n-        u"</li>"\n+        \'<li class="{id}{has_sub_class} nav-item">\'\n+        \'<a href="{url}" class="state-{review_state} nav-link"{aria_haspopup}>{title}</a>{opener}\'  # noqa: E 501\n+        "{sub}"\n+        "</li>"\n     )\n-    _subtree_markup_wrapper = u\'<ul class="has_subtree dropdown">{out}</ul>\'\n+    _subtree_markup_wrapper = \'<ul class="has_subtree dropdown">{out}</ul>\'\n+\n+    def __init__(self, *args):\n+        super().__init__(*args)\n+        self.registry = getUtility(IRegistry)\n \n     @property\n     def settings(self):\n-        registry = getUtility(IRegistry)\n-        settings = registry.forInterface(INavigationSchema, prefix="plone")\n-        return settings\n+        return self.registry.forInterface(INavigationSchema, prefix="plone")\n \n     @property\n     def language_settings(self):\n-        registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ILanguageSchema, prefix="plone")\n-        return settings\n+        return self.registry.forInterface(ILanguageSchema, prefix="plone")\n \n     @property\n     def navtree_path(self):\n         return getNavigationRoot(self.context)\n \n-    @property\n-    @deprecate("This property will be removed in Plone 6")\n-    def navtree_depth(self):\n-        return self.settings.navigation_depth\n-\n     @property\n     def current_language(self):\n+        language_settings = self.registry.forInterface(ILanguageSchema, prefix="plone")\n         return (\n             self.request.get("LANGUAGE", None)\n             or (self.context and aq_inner(self.context).Language())\n-            or self.language_settings.default_language\n+            or language_settings.default_language\n         )\n \n     @property\n     def types_using_view(self):\n-        registry = getUtility(IRegistry)\n-        types_using_view = registry.get("plone.types_use_view_action_in_listings", [])\n-        return types_using_view\n+        return self.registry.get("plone.types_use_view_action_in_listings", [])\n \n     @property\n     @memoize\n     def navtree(self):\n         ret = defaultdict(list)\n-        settings = self.settings\n         navtree_path = self.navtree_path\n         portal_tabs = self.portal_tabs\n         for tab in portal_tabs:\n@@ -307,6 +300,7 @@ def navtree(self):\n             self.customize_tab(entry, tab)\n             ret[navtree_path].append(entry)\n \n+        settings = self.settings\n         if not settings.generate_tabs:\n             return ret\n \n@@ -338,7 +332,7 @@ def navtree(self):\n         portal_catalog = getToolByName(self.context, "portal_catalog")\n         brains = portal_catalog.searchResults(**query)\n \n-        types_using_view = self.types_using_view\n+        types_using_view = set(self.types_using_view)\n         for brain in brains:\n             brain_path = brain.getPath()\n             brain_parent_path = brain_path.rpartition("/")[0]\n@@ -402,7 +396,7 @@ def build_tree(self, path, first_run=True):\n         """Non-template based recursive tree building.\n         3-4 times faster than template based.\n         """\n-        out = u""\n+        out = ""\n         for item in self.navtree.get(path, []):\n             out += self.render_item(item, path)\n \n@@ -421,54 +415,6 @@ def portal_tabs(self):\n         )\n         return portal_tabs_view.topLevelTabs()\n \n-    @deprecate("This method will be removed in Plone 6")\n-    def selectedTabs(self, default_tab="index_html", portal_tabs=()):\n-        portal = getToolByName(self.context, "portal_url").getPortalObject()\n-        plone_url = getNavigationRootObject(self.context, portal).absolute_url()\n-        plone_url_len = len(plone_url)\n-        request = self.request\n-        valid_actions = []\n-\n-        url = request["URL"]\n-        path = url[plone_url_len:]\n-        path_list = path.split("/")\n-        if len(path_list) <= 1:\n-            return {"portal": default_tab}\n-\n-        for action in portal_tabs:\n-            if not action["url"].startswith(plone_url):\n-                # In this case the action url is an external link. Then, we\n-                # avoid issues (bad portal_tab selection) continuing with next\n-                # action.\n-                continue\n-            action_path = action["url"][plone_url_len:]\n-            if not action_path.startswith("/"):\n-                action_path = "/" + action_path\n-            action_path_list = action_path.split("/")\n-            if action_path_list[1] == path_list[1]:\n-                # Make a list of the action ids, along with the path length\n-                # for choosing the longest (most relevant) path.\n-                valid_actions.append((len(action_path_list), action["id"]))\n-\n-        # Sort by path length, the longest matching path wins\n-        valid_actions.sort()\n-        if valid_actions:\n-            return {"portal": valid_actions[-1][1]}\n-\n-        return {"portal": default_tab}\n-\n-    @property\n-    @memoize\n-    @deprecate("This method will be removed in Plone 6")\n-    def selected_tabs(self):\n-        return self.selectedTabs(portal_tabs=self.portal_tabs)\n-\n-    @property\n-    @memoize\n-    @deprecate("This method will be removed in Plone 6")\n-    def selected_portal_tab(self):\n-        return self.selected_tabs["portal"]\n-\n \n class PersonalBarViewlet(ViewletBase):\n \n@@ -480,7 +426,7 @@ def update(self):\n         context = aq_inner(self.context)\n \n         context_state = getMultiAdapter(\n-            (context, self.request), name=u"plone_context_state"\n+            (context, self.request), name="plone_context_state"\n         )\n \n         user_actions = context_state.actions("user")\n@@ -510,7 +456,7 @@ def update(self):\n             member = self.portal_state.member()\n             userid = member.getId()\n \n-            self.homelink_url = "%s/useractions" % self.navigation_root_url\n+            self.homelink_url = f"{self.navigation_root_url}/useractions"\n \n             membership = getToolByName(context, "portal_membership")\n             member_info = membership.getMemberInfo(userid)\n@@ -551,7 +497,7 @@ def getTabSets(self):\n         context_fti = context.getTypeInfo()\n \n         context_state = getMultiAdapter(\n-            (context, self.request), name=u"plone_context_state"\n+            (context, self.request), name="plone_context_state"\n         )\n         actions = context_state.actions\n \n@@ -666,5 +612,3 @@ def update(self):\n \n class TinyLogoViewlet(ViewletBase):\n     index = ViewPageTemplateFile("tiny_logo.pt")\n-\n-\n'

