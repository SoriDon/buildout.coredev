Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-01-19T16:35:03+01:00
Author: Víctor Fernández de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/d970bf0c73459a84a83d23a927aeb09b1730ed65

DX site root support for Plone 6 (backwards compat) (#1220)

* Remove blocks behavior hack for site root in Plone6

* Fix duplicated test names

* WTF, wrong conditions :P

* Add serializer/deserializer support for DX root site

* Enable locking for root site

* Fix tests, and improve code

* Update to latest Plone6 alpha

* Update changelog

* Fix tests for Plone 6

* Revert changes to requirements

* Improve the form of the PLONE60MARKER import

* Even better PLONE60MARKER detection

Files changed:
A news/1219.feature
M src/plone/restapi/deserializer/site.py
M src/plone/restapi/serializer/site.py
M src/plone/restapi/services/locking/configure.zcml
M src/plone/restapi/tests/test_serializer.py
M src/plone/restapi/tests/test_site_deserializer.py
M src/plone/restapi/tests/test_site_serializer.py

b'diff --git a/news/1219.feature b/news/1219.feature\nnew file mode 100644\nindex 000000000..ed2cca097\n--- /dev/null\n+++ b/news/1219.feature\n@@ -0,0 +1,2 @@\n+Add support for DX Plone Site root in Plone 6. Remove blocks behavior hack for site root in Plone 6.\n+[sneridagh]\ndiff --git a/src/plone/restapi/deserializer/site.py b/src/plone/restapi/deserializer/site.py\nindex 10e09989e..fa58309a3 100644\n--- a/src/plone/restapi/deserializer/site.py\n+++ b/src/plone/restapi/deserializer/site.py\n@@ -1,5 +1,6 @@\n+from importlib import import_module\n from plone.restapi.deserializer import json_body\n-from plone.restapi.deserializer.mixins import OrderingMixin\n+from plone.restapi.deserializer.dxcontent import DeserializeFromJson\n from plone.restapi.interfaces import IBlockFieldDeserializationTransformer\n from plone.restapi.interfaces import IDeserializeFromJson\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n@@ -11,67 +12,80 @@\n import json\n \n \n+HAS_PLONE_6 = getattr(\n+    import_module("Products.CMFPlone.factory"), "PLONE60MARKER", False\n+)\n+\n+\n @implementer(IDeserializeFromJson)\n @adapter(IPloneSiteRoot, IRequest)\n-class DeserializeSiteRootFromJson(OrderingMixin):\n+class DeserializeSiteRootFromJson(DeserializeFromJson):\n     """JSON deserializer for the Plone site root"""\n \n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n+        if HAS_PLONE_6:\n+            super().__init__(self.context, self.request)\n+\n     def __call__(self, validate_all=False):\n-        # Currently we only do layout and ordering, as the plone site root\n-        # has no schema or something like that.\n+        if HAS_PLONE_6:\n+            # Call the default DX content deserializer\n+            super().__call__(self)\n+\n         data = json_body(self.request)\n \n         if "layout" in data:\n             layout = data["layout"]\n             self.context.setLayout(layout)\n \n-        # OrderingMixin\n-        if "ordering" in data and "subset_ids" not in data["ordering"]:\n-            data["ordering"]["subset_ids"] = self.context.contentIds()\n-        self.handle_ordering(data)\n-\n-        # Volto Blocks on the Plone Site root faker\n-        if "blocks" in data:\n-            value = data["blocks"]\n-            for id, block_value in value.items():\n-                block_type = block_value.get("@type", "")\n-                handlers = []\n-                for h in subscribers(\n-                    (self.context, self.request),\n-                    IBlockFieldDeserializationTransformer,\n-                ):\n-                    if h.block_type == block_type or h.block_type is None:\n-                        handlers.append(h)\n-                for handler in sorted(handlers, key=lambda h: h.order):\n-                    block_value = handler(block_value)\n-                value[id] = block_value\n-            if not getattr(self.context, "blocks", False):\n-                self.context.manage_addProperty(\n-                    "blocks", json.dumps(value), "string"\n-                )  # noqa\n-            else:\n-                self.context.manage_changeProperties(blocks=json.dumps(value))  # noqa\n+        # Volto Blocks on the Plone Site root faker for Plone 5\n+        if not HAS_PLONE_6:\n+            # OrderingMixin (needed for correct ordering for Plone < 6)\n+            if "ordering" in data and "subset_ids" not in data["ordering"]:\n+                data["ordering"]["subset_ids"] = self.context.contentIds()\n+            self.handle_ordering(data)\n \n-        if "blocks_layout" in data:\n-            if not getattr(self.context, "blocks_layout", False):\n-                self.context.manage_addProperty(\n-                    "blocks_layout", json.dumps(data["blocks_layout"]), "string"\n-                )  # noqa\n-            else:\n-                self.context.manage_changeProperties(\n-                    blocks_layout=json.dumps(data["blocks_layout"])\n-                )  # noqa\n+            if "blocks" in data:\n+                value = data["blocks"]\n+                for id, block_value in value.items():\n+                    block_type = block_value.get("@type", "")\n+                    handlers = []\n+                    for h in subscribers(\n+                        (self.context, self.request),\n+                        IBlockFieldDeserializationTransformer,\n+                    ):\n+                        if h.block_type == block_type or h.block_type is None:\n+                            handlers.append(h)\n+                    for handler in sorted(handlers, key=lambda h: h.order):\n+                        block_value = handler(block_value)\n+                    value[id] = block_value\n+                if not getattr(self.context, "blocks", False):\n+                    self.context.manage_addProperty(\n+                        "blocks", json.dumps(value), "string"\n+                    )  # noqa\n+                else:\n+                    self.context.manage_changeProperties(\n+                        blocks=json.dumps(value)\n+                    )  # noqa\n+\n+            if "blocks_layout" in data:\n+                if not getattr(self.context, "blocks_layout", False):\n+                    self.context.manage_addProperty(\n+                        "blocks_layout", json.dumps(data["blocks_layout"]), "string"\n+                    )  # noqa\n+                else:\n+                    self.context.manage_changeProperties(\n+                        blocks_layout=json.dumps(data["blocks_layout"])\n+                    )  # noqa\n \n-        if "title" in data:\n-            self.context.setTitle(data["title"])\n+            if "title" in data:\n+                self.context.setTitle(data["title"])\n \n-        if "description" in data:\n-            self.context.manage_changeProperties(\n-                description=data["description"]\n-            )  # noqa\n+            if "description" in data:\n+                self.context.manage_changeProperties(\n+                    description=data["description"]\n+                )  # noqa\n \n         return self.context\ndiff --git a/src/plone/restapi/serializer/site.py b/src/plone/restapi/serializer/site.py\nindex 6648b0280..7ba280e4d 100644\n--- a/src/plone/restapi/serializer/site.py\n+++ b/src/plone/restapi/serializer/site.py\n@@ -1,18 +1,34 @@\n+from AccessControl import getSecurityManager\n+from importlib import import_module\n+from plone.autoform.interfaces import READ_PERMISSIONS_KEY\n+from plone.dexterity.utils import iterSchemata\n from plone.restapi.batching import HypermediaBatch\n from plone.restapi.interfaces import IBlockFieldSerializationTransformer\n+from plone.restapi.interfaces import IFieldSerializer\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n+from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.serializer.expansion import expandable_elements\n+from plone.restapi.services.locking import lock_info\n+from plone.supermodel.utils import mergedTaggedValueDict\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n from zope.component import adapter\n from zope.component import getMultiAdapter\n+from zope.component import queryMultiAdapter\n+from zope.component import queryUtility\n from zope.component import subscribers\n from zope.interface import implementer\n from zope.interface import Interface\n+from zope.schema import getFields\n+from zope.security.interfaces import IPermission\n \n import json\n \n+HAS_PLONE_6 = getattr(\n+    import_module("Products.CMFPlone.factory"), "PLONE60MARKER", False\n+)\n+\n \n @implementer(ISerializeToJson)\n @adapter(IPloneSiteRoot, Interface)\n@@ -50,12 +66,40 @@ def __call__(self, version=None):\n             "parent": {},\n             "is_folderish": True,\n             "description": self.context.description,\n-            "blocks": self.serialize_blocks(),\n-            "blocks_layout": json.loads(\n-                getattr(self.context, "blocks_layout", "{}")\n-            ),  # noqa\n         }\n \n+        if HAS_PLONE_6:\n+            # Insert Plone Site DX root field values\n+            for schema in iterSchemata(self.context):\n+                read_permissions = mergedTaggedValueDict(schema, READ_PERMISSIONS_KEY)\n+\n+                for name, field in getFields(schema).items():\n+\n+                    if not self.check_permission(\n+                        read_permissions.get(name), self.context\n+                    ):\n+                        continue\n+\n+                    # serialize the field\n+                    serializer = queryMultiAdapter(\n+                        (field, self.context, self.request), IFieldSerializer\n+                    )\n+                    value = serializer()\n+                    result[json_compatible(name)] = value\n+\n+            # Insert locking information\n+            result.update({"lock": lock_info(self.context)})\n+        else:\n+            # Apply the fake blocks behavior in site root hack using site root properties\n+            result.update(\n+                {\n+                    "blocks": self.serialize_blocks(),\n+                    "blocks_layout": json.loads(\n+                        getattr(self.context, "blocks_layout", "{}")\n+                    ),\n+                }\n+            )\n+\n         # Insert expandable elements\n         result.update(expandable_elements(self.context, self.request))\n \n@@ -70,7 +114,23 @@ def __call__(self, version=None):\n \n         return result\n \n+    def check_permission(self, permission_name, obj):\n+        if permission_name is None:\n+            return True\n+\n+        if permission_name not in self.permission_cache:\n+            permission = queryUtility(IPermission, name=permission_name)\n+            if permission is None:\n+                self.permission_cache[permission_name] = True\n+            else:\n+                sm = getSecurityManager()\n+                self.permission_cache[permission_name] = bool(\n+                    sm.checkPermission(permission.title, obj)\n+                )\n+        return self.permission_cache[permission_name]\n+\n     def serialize_blocks(self):\n+        # This is only for below 6\n         blocks = json.loads(getattr(self.context, "blocks", "{}"))\n         if not blocks:\n             return blocks\ndiff --git a/src/plone/restapi/services/locking/configure.zcml b/src/plone/restapi/services/locking/configure.zcml\nindex b7cc527eb..2af53b1f2 100644\n--- a/src/plone/restapi/services/locking/configure.zcml\n+++ b/src/plone/restapi/services/locking/configure.zcml\n@@ -11,6 +11,14 @@\n       name="@lock"\n       />\n \n+  <plone:service\n+      method="GET"\n+      factory=".get.Lock"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      permission="zope2.View"\n+      name="@lock"\n+      />\n+\n   <plone:service\n       method="POST"\n       factory=".add.Lock"\n@@ -19,6 +27,14 @@\n       name="@lock"\n       />\n \n+  <plone:service\n+      method="POST"\n+      factory=".add.Lock"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      permission="cmf.ModifyPortalContent"\n+      name="@lock"\n+      />\n+\n   <plone:service\n       method="PATCH"\n       factory=".update.Lock"\n@@ -27,6 +43,14 @@\n       name="@lock"\n       />\n \n+  <plone:service\n+      method="PATCH"\n+      factory=".update.Lock"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      permission="cmf.ModifyPortalContent"\n+      name="@lock"\n+      />\n+\n   <plone:service\n       method="DELETE"\n       factory=".delete.Lock"\n@@ -35,6 +59,14 @@\n       name="@lock"\n       />\n \n+  <plone:service\n+      method="DELETE"\n+      factory=".delete.Lock"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      permission="cmf.ModifyPortalContent"\n+      name="@lock"\n+      />\n+\n   <!-- DEPRECATED -->\n   <plone:service\n       method="POST"\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex 271b86c30..b123c2e03 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -1,5 +1,5 @@\n from DateTime import DateTime\n-from unittest.mock import patch\n+from importlib import import_module\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.textfield.value import RichTextValue\n@@ -9,12 +9,17 @@\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from plone.scale import storage\n from Products.CMFCore.utils import getToolByName\n+from unittest.mock import patch\n from zope.component import getMultiAdapter\n \n import json\n import os\n import unittest\n \n+HAS_PLONE_6 = getattr(\n+    import_module("Products.CMFPlone.factory"), "PLONE60MARKER", False\n+)\n+\n \n class TestSerializeToJsonAdapter(unittest.TestCase):\n \n@@ -395,10 +400,18 @@ def test_serialize_returns_site_root_common(self):\n         self.assertIn("title", self.serialize(self.portal))\n         self.assertIn("description", self.serialize(self.portal))\n \n+    @unittest.skipIf(\n+        HAS_PLONE_6,\n+        "This test is only intended to run for Plone 6 and DX site root enabled",\n+    )\n     def test_serialize_returns_site_root_opt_in_blocks_not_present(self):\n         self.assertEqual(self.serialize(self.portal)["blocks"], {})\n         self.assertEqual(self.serialize(self.portal)["blocks_layout"], {})\n \n+    @unittest.skipIf(\n+        HAS_PLONE_6,\n+        "This test is only intended to run for Plone 6 and DX site root enabled",\n+    )\n     def test_serialize_returns_site_root_opt_in_blocks_present(self):\n         blocks = {\n             "0358abe2-b4f1-463d-a279-a63ea80daf19": {"@type": "description"},\ndiff --git a/src/plone/restapi/tests/test_site_deserializer.py b/src/plone/restapi/tests/test_site_deserializer.py\nindex 872441bf4..26ae2ed43 100644\n--- a/src/plone/restapi/tests/test_site_deserializer.py\n+++ b/src/plone/restapi/tests/test_site_deserializer.py\n@@ -1,11 +1,19 @@\n+from importlib import import_module\n+from plone.dexterity.interfaces import IDexterityFTI\n+from plone.dexterity.schema import SCHEMA_CACHE\n from plone.restapi.interfaces import IDeserializeFromJson\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n from plone.restapi.tests.mixin_ordering import OrderingMixin\n from zope.component import getMultiAdapter\n+from zope.component import queryUtility\n \n import json\n import unittest\n \n+HAS_PLONE_6 = getattr(\n+    import_module("Products.CMFPlone.factory"), "PLONE60MARKER", False\n+)\n+\n \n class TestDXContentDeserializer(unittest.TestCase, OrderingMixin):\n \n@@ -49,13 +57,27 @@ def setUp(self):\n             id="doc1",\n         )\n \n+        # Enable volto.blocks if Plone Site is DX\n+        fti = queryUtility(IDexterityFTI, name="Plone Site")\n+        if fti is not None:\n+            behavior_list = [a for a in fti.behaviors]\n+            behavior_list.append("volto.blocks")\n+            fti.behaviors = tuple(behavior_list)\n+            # Invalidating the cache is required for the FTI to be applied\n+            # on the existing object\n+            SCHEMA_CACHE.invalidate("Plone Site")\n+\n     def deserialize(self, body="{}", validate_all=False, context=None):\n         context = context or self.portal\n         self.request["BODY"] = body\n         deserializer = getMultiAdapter((context, self.request), IDeserializeFromJson)\n         return deserializer(validate_all=validate_all)\n \n-    def test_opt_in_blocks_deserializer(self):\n+    @unittest.skipIf(\n+        HAS_PLONE_6,\n+        "This test is only intended to run for Plone 5 and the blocks behavior site root hack enabled",\n+    )\n+    def test_opt_in_blocks_deserializer_plone5(self):\n         blocks = {\n             "0358abe2-b4f1-463d-a279-a63ea80daf19": {"@type": "description"},\n             "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n@@ -76,7 +98,11 @@ def test_opt_in_blocks_deserializer(self):\n         self.assertEqual(blocks, json.loads(self.portal.blocks))\n         self.assertEqual(blocks_layout, json.loads(self.portal.blocks_layout))\n \n-    def test_resolveuids_blocks_deserializer(self):\n+    @unittest.skipIf(\n+        HAS_PLONE_6,\n+        "This test is only intended to run for Plone 5 and the blocks behavior site root hack enabled",\n+    )\n+    def test_resolveuids_blocks_deserializer_plone5(self):\n         blocks = {\n             "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n                 "@type": "foo",\n@@ -102,3 +128,59 @@ def test_resolveuids_blocks_deserializer(self):\n             values["0358abe2-b4f1-463d-a279-a63ea80daf19"]["url"],\n             f"resolveuid/{self.portal.doc1.UID()}",\n         )\n+\n+    @unittest.skipIf(\n+        not HAS_PLONE_6,\n+        "This test is only intended to run for Plone 6 and DX site root enabled",\n+    )\n+    def test_opt_in_blocks_deserializer(self):\n+        blocks = {\n+            "0358abe2-b4f1-463d-a279-a63ea80daf19": {"@type": "description"},\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n+        }\n+        blocks_layout = {\n+            "items": [\n+                "07c273fc-8bfc-4e7d-a327-d513e5a945bb",\n+                "0358abe2-b4f1-463d-a279-a63ea80daf19",\n+            ]\n+        }\n+\n+        self.deserialize(\n+            body=\'{{"blocks": {}, "blocks_layout": {}}}\'.format(\n+                json.dumps(blocks), json.dumps(blocks_layout)\n+            )\n+        )\n+\n+        self.assertEqual(blocks, self.portal.blocks)\n+        self.assertEqual(blocks_layout, self.portal.blocks_layout)\n+\n+    @unittest.skipIf(\n+        not HAS_PLONE_6,\n+        "This test is only intended to run for Plone 6 and DX site root enabled",\n+    )\n+    def test_resolveuids_blocks_deserializer(self):\n+        blocks = {\n+            "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n+                "@type": "foo",\n+                "url": self.portal.doc1.absolute_url(),\n+            },\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n+        }\n+        blocks_layout = {\n+            "items": [\n+                "07c273fc-8bfc-4e7d-a327-d513e5a945bb",\n+                "0358abe2-b4f1-463d-a279-a63ea80daf19",\n+            ]\n+        }\n+\n+        self.deserialize(\n+            body=\'{{"blocks": {}, "blocks_layout": {}}}\'.format(\n+                json.dumps(blocks), json.dumps(blocks_layout)\n+            )\n+        )\n+\n+        values = self.portal.blocks\n+        self.assertEqual(\n+            values["0358abe2-b4f1-463d-a279-a63ea80daf19"]["url"],\n+            f"resolveuid/{self.portal.doc1.UID()}",\n+        )\ndiff --git a/src/plone/restapi/tests/test_site_serializer.py b/src/plone/restapi/tests/test_site_serializer.py\nindex ff3628fb3..6c3139995 100644\n--- a/src/plone/restapi/tests/test_site_serializer.py\n+++ b/src/plone/restapi/tests/test_site_serializer.py\n@@ -1,16 +1,24 @@\n-from plone.restapi.interfaces import ISerializeToJson\n-from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n-from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n-from plone.restapi.testing import RelativeSession\n-from zope.component import getMultiAdapter\n+from importlib import import_module\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n+from plone.dexterity.interfaces import IDexterityFTI\n+from plone.dexterity.schema import SCHEMA_CACHE\n+from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+from plone.restapi.testing import RelativeSession\n+from zope.component import getMultiAdapter\n+from zope.component import queryUtility\n \n import json\n import unittest\n \n+HAS_PLONE_6 = getattr(\n+    import_module("Products.CMFPlone.factory"), "PLONE60MARKER", False\n+)\n+\n \n class TestSiteSerializer(unittest.TestCase):\n \n@@ -25,6 +33,15 @@ def setUp(self):\n             id="doc1",\n         )\n \n+        fti = queryUtility(IDexterityFTI, name="Plone Site")\n+        if fti is not None:\n+            behavior_list = [a for a in fti.behaviors]\n+            behavior_list.append("volto.blocks")\n+            fti.behaviors = tuple(behavior_list)\n+            # Invalidating the cache is required for the FTI to be applied\n+            # on the existing object\n+            SCHEMA_CACHE.invalidate("Plone Site")\n+\n     def serialize(self):\n         serializer = getMultiAdapter((self.portal, self.request), ISerializeToJson)\n         return serializer()\n@@ -43,7 +60,11 @@ def test_get_is_folderish(self):\n         self.assertIn("is_folderish", obj)\n         self.assertEqual(True, obj["is_folderish"])\n \n-    def test_resolveuids_get_serialized_in_serializer(self):\n+    @unittest.skipIf(\n+        HAS_PLONE_6,\n+        "This test is only intended to run for Plone 5 and the blocks behavior site root hack enabled",\n+    )\n+    def test_resolveuids_get_serialized_in_serializer_plone5(self):\n         blocks = {\n             "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n                 "@type": "foo",\n@@ -58,6 +79,25 @@ def test_resolveuids_get_serialized_in_serializer(self):\n             self.portal.doc1.absolute_url(),\n         )\n \n+    @unittest.skipIf(\n+        not HAS_PLONE_6,\n+        "This test is only intended to run for Plone 6 and DX site root enabled",\n+    )\n+    def test_resolveuids_get_serialized_in_serializer(self):\n+        blocks = {\n+            "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n+                "@type": "foo",\n+                "url": f"resolveuid/{self.portal.doc1.UID()}",\n+            },\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n+        }\n+        self.portal.blocks = blocks\n+        obj = self.serialize()\n+        self.assertEqual(\n+            obj["blocks"]["0358abe2-b4f1-463d-a279-a63ea80daf19"]["url"],\n+            self.portal.doc1.absolute_url(),\n+        )\n+\n \n class TestSiteSerializationFunctional(unittest.TestCase):\n \n'

