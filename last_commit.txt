Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2021-07-07T08:00:26+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/83fc20476f5540225293f3e728d24f2257c50f00

Add to generate Plone image scales on save when environment variable PLONE_SCALE_GENERATE_ON_SAVE=1 is set

Files changed:
A plone/formwidget/namedfile/datamanager.py
M plone/formwidget/namedfile/configure.zcml
M plone/formwidget/namedfile/interfaces.py
M plone/formwidget/namedfile/tests.py

b'diff --git a/plone/formwidget/namedfile/configure.zcml b/plone/formwidget/namedfile/configure.zcml\nindex 393ad9b..2f0106b 100644\n--- a/plone/formwidget/namedfile/configure.zcml\n+++ b/plone/formwidget/namedfile/configure.zcml\n@@ -9,11 +9,17 @@\n   <include package="z3c.form" />\n   <include package="plone.namedfile" />\n \n+  <adapter factory=".datamanager.NamedImageAttributeField" />\n   <adapter factory=".converter.NamedDataConverter" />\n   <adapter factory=".converter.Base64Converter" />\n   <adapter factory=".validator.NamedFileWidgetValidator" />\n   <adapter factory=".utils.FileUploadTemporaryStorage" />\n \n+  <subscriber\n+      for="ZPublisher.interfaces.IPubSuccess"\n+      handler=".datamanager.plone_scale_generate_on_save"\n+  />\n+\n   <class class=".widget.NamedFileWidget">\n     <require\n         permission="zope.Public"\ndiff --git a/plone/formwidget/namedfile/datamanager.py b/plone/formwidget/namedfile/datamanager.py\nnew file mode 100644\nindex 0000000..f8368a2\n--- /dev/null\n+++ b/plone/formwidget/namedfile/datamanager.py\n@@ -0,0 +1,111 @@\n+# -*- coding: utf-8 -*-\n+from plone.formwidget.namedfile.interfaces import IScaleGenerateOnSave\n+from plone.namedfile.field import INamedImageField\n+from z3c.form.datamanager import AttributeField\n+from ZODB.POSException import ConflictError\n+from zope.annotation.interfaces import IAnnotations\n+from zope.component import adapter\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.globalrequest import getRequest\n+from zope.interface import Interface\n+from zope.interface import alsoProvides\n+\n+import logging\n+import os\n+import transaction\n+\n+try:\n+    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n+except ImportError:\n+    PLONE_5 = False  # pragma: no cover\n+else:\n+    PLONE_5 = True  # pragma: no cover\n+\n+\n+ANNOTATION_KEY = "plone.formwidget.namedfile.scale"\n+ENVIRONMENT_KEY = "PLONE_SCALE_GENERATE_ON_SAVE"\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+@adapter(Interface, INamedImageField)\n+class NamedImageAttributeField(AttributeField):\n+\n+    def __init__(self, *args, **kwargs):\n+        super(NamedImageAttributeField, self).__init__(*args, **kwargs)\n+        flag = (os.environ.get(ENVIRONMENT_KEY) or "").lower()\n+        self.scale_generate_on_save = flag in ["1", "true", "yes", "on"]\n+\n+    def set(self, value):\n+        """See z3c.form.interfaces.IDataManager"""\n+        super(NamedImageAttributeField, self).set(value)\n+        if self.scale_generate_on_save:\n+            schedule_plone_scale_generate_on_save(\n+                self.context, getRequest(), self.field.__name__)\n+\n+\n+def schedule_plone_scale_generate_on_save(context, request, fieldname):\n+    annotations = IAnnotations(request, None)\n+    if annotations is not None:\n+        annotations.setdefault(ANNOTATION_KEY, [])\n+        annotations[ANNOTATION_KEY].append((context, fieldname))\n+        alsoProvides(request, IScaleGenerateOnSave)\n+\n+\n+def plone_scale_generate_on_save(event):\n+    if not IScaleGenerateOnSave.providedBy(event.request):\n+        return\n+    annotations = IAnnotations(event.request, None)\n+    if annotations is None:\n+        return\n+    for context, fieldname in annotations.get(ANNOTATION_KEY) or []:\n+        try:\n+            images = getMultiAdapter((context, event.request), name="images")\n+            try:\n+                scales = get_scale_infos()\n+            except ImportError:\n+                continue\n+            t = transaction.get()\n+            for name, actual_width, actual_height in scales:\n+                images.scale(fieldname, scale=name)\n+            image = getattr(context, fieldname, None)\n+            if image:  # REST API requires this scale to refer the original\n+                width, height = image.getImageSize()\n+                images.scale(fieldname,\n+                             width=width, height=height, direction="thumbnail")\n+            msg = "/".join(filter(bool, ["/".join(context.getPhysicalPath()),\n+                                         "@@images", fieldname]))\n+            t.note(msg)\n+            t.commit()\n+        except ConflictError:\n+            msg = "/".join(filter(bool, ["/".join(context.getPhysicalPath()),\n+                                         "@@images", fieldname]))\n+            logger.warning("ConflictError. Scale not generated on save: " + msg)\n+\n+\n+def get_scale_infos():\n+    """Returns a list of (name, width, height) 3-tuples of the\n+    available image scales.\n+    """\n+    from Products.CMFCore.interfaces import IPropertiesTool\n+    if PLONE_5:\n+        from plone.registry.interfaces import IRegistry\n+\n+        registry = getUtility(IRegistry)\n+        from Products.CMFPlone.interfaces import IImagingSchema\n+\n+        imaging_settings = registry.forInterface(IImagingSchema, prefix="plone")\n+        allowed_sizes = imaging_settings.allowed_sizes\n+\n+    else:\n+        ptool = getUtility(IPropertiesTool)\n+        image_properties = ptool.imaging_properties\n+        allowed_sizes = image_properties.getProperty("allowed_sizes")\n+\n+    def split_scale_info(allowed_size):\n+        name, dims = allowed_size.split(" ")\n+        width, height = list(map(int, dims.split(":")))\n+        return name, width, height\n+\n+    return [split_scale_info(size) for size in allowed_sizes]\ndiff --git a/plone/formwidget/namedfile/interfaces.py b/plone/formwidget/namedfile/interfaces.py\nindex af31209..d94f988 100644\n--- a/plone/formwidget/namedfile/interfaces.py\n+++ b/plone/formwidget/namedfile/interfaces.py\n@@ -40,3 +40,9 @@ class IFileUploadTemporaryStorage(Interface):\n \n     def cleanup():\n         """Removes stale temporary uploads from the upload storage"""\n+\n+\n+class IScaleGenerateOnSave(Interface):\n+    """Marker interface on request for creating scales\n+    when NamedImageField has been used to save a new image file on content.\n+    """\ndiff --git a/plone/formwidget/namedfile/tests.py b/plone/formwidget/namedfile/tests.py\nindex 940e55e..d018079 100644\n--- a/plone/formwidget/namedfile/tests.py\n+++ b/plone/formwidget/namedfile/tests.py\n@@ -1,5 +1,21 @@\n+from DateTime import DateTime\n+from OFS.SimpleItem import SimpleItem\n+from ZPublisher.pubevents import PubSuccess\n+from plone.formwidget.namedfile.datamanager import NamedImageAttributeField\n+from plone.formwidget.namedfile.interfaces import IScaleGenerateOnSave\n+from plone.formwidget.namedfile.testing import FUNCTIONAL_TESTING\n from plone.formwidget.namedfile.testing import INTEGRATION_TESTING\n+from plone.namedfile.field import NamedImage as NamedImageField\n+from plone.namedfile.file import NamedImage\n+from plone.namedfile.interfaces import IImageScaleTraversable\n+from plone.namedfile.tests import getFile\n+from plone.scale.storage import AnnotationStorage\n from plone.testing import layered\n+from z3c.form.interfaces import IDataManager\n+from zope.annotation import IAttributeAnnotatable\n+from zope.component import getMultiAdapter\n+from zope.event import notify\n+from zope.interface import implementer\n \n import doctest\n import re\n@@ -7,8 +23,56 @@\n import unittest\n \n \n+class IHasImage(IImageScaleTraversable):\n+    image = NamedImageField()\n+\n+\n+@implementer(IAttributeAnnotatable, IHasImage)\n+class DummyContent(SimpleItem):\n+    image = None\n+    modified = DateTime\n+    id = __name__ = "item"\n+    title = "foo"\n+\n+    def Title(self):\n+        return self.title\n+\n+\n+class ScaleGenerateOnSaveTests(unittest.TestCase):\n+\n+    layer = FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        item = DummyContent()\n+        self.layer["app"]._setOb("item", item)\n+        self.item = self.layer["app"].item\n+        self.request = self.layer["request"]\n+\n+    def test_not_generate_scales_on_save(self):\n+        self.assertEqual(len(AnnotationStorage(self.item).storage), 0)\n+        dm = getMultiAdapter((self.item, IHasImage["image"]), IDataManager)\n+        self.assertIsInstance(dm, NamedImageAttributeField)\n+        self.assertFalse(dm.scale_generate_on_save)\n+        dm.set(NamedImage(getFile("image.png"), "image/png", "image.png"))\n+        self.assertFalse(IScaleGenerateOnSave.providedBy(self.request))\n+        notify(PubSuccess(self.request))\n+        self.assertEqual(len(AnnotationStorage(self.item).storage), 0)\n+\n+    def test_generate_scales_on_save(self):\n+        self.assertEqual(len(AnnotationStorage(self.item).storage), 0)\n+        dm = getMultiAdapter((self.item, IHasImage["image"]), IDataManager)\n+        self.assertIsInstance(dm, NamedImageAttributeField)\n+        self.assertFalse(dm.scale_generate_on_save)\n+        dm.scale_generate_on_save = True\n+        dm.set(NamedImage(getFile("image.png"), "image/png", "image.png"))\n+        self.assertTrue(IScaleGenerateOnSave.providedBy(self.request))\n+        notify(PubSuccess(self.request))\n+        self.assertGreater(len(AnnotationStorage(self.item).storage), 0)\n+\n+\n def test_suite():\n     suite = unittest.TestSuite()\n+    suite.addTest(unittest.makeSuite(ScaleGenerateOnSaveTests))\n     suite.addTest(\n         layered(\n             doctest.DocFileSuite(\n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2021-07-07T08:00:28+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/380e12e780c7fc2f37a83136e136dc7605d5e0d5

Add changelog entry

Files changed:
A news/43.feature

b'diff --git a/news/43.feature b/news/43.feature\nnew file mode 100644\nindex 0000000..81d221c\n--- /dev/null\n+++ b/news/43.feature\n@@ -0,0 +1 @@\n+- Add to generate configured Plone image scales on save when environment variable PLONE_SCALE_GENERATE_ON_SAVE=1 is set. With the default Plone configuration, this effectively removes on-demand image scaling on GET requests. [datakurre]\n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2021-07-07T08:00:29+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/47023e8efb192c65746703ad3524a77d95c1dc9b

Update changelog item

Files changed:
M news/43.feature

b'diff --git a/news/43.feature b/news/43.feature\nindex 81d221c..8b6fc4b 100644\n--- a/news/43.feature\n+++ b/news/43.feature\n@@ -1 +1 @@\n-- Add to generate configured Plone image scales on save when environment variable PLONE_SCALE_GENERATE_ON_SAVE=1 is set. With the default Plone configuration, this effectively removes on-demand image scaling on GET requests. [datakurre]\n+Add to generate configured Plone image scales on save when environment variable PLONE_SCALE_GENERATE_ON_SAVE=1 is set. With the default Plone configuration, this effectively removes on-demand image scaling on GET requests. [datakurre]\n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2021-07-07T08:00:29+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/29c617250c23e2d4163f0c994e9e95c67f90f59a

Apply comments from review for https://github.com/plone/plone.formwidget.namedfile/pull/43

Files changed:
M plone/formwidget/namedfile/datamanager.py
M plone/formwidget/namedfile/utils.py

b'diff --git a/plone/formwidget/namedfile/datamanager.py b/plone/formwidget/namedfile/datamanager.py\nindex f8368a2..80a8296 100644\n--- a/plone/formwidget/namedfile/datamanager.py\n+++ b/plone/formwidget/namedfile/datamanager.py\n@@ -1,12 +1,12 @@\n # -*- coding: utf-8 -*-\n from plone.formwidget.namedfile.interfaces import IScaleGenerateOnSave\n+from plone.formwidget.namedfile.utils import get_scale_infos\n from plone.namedfile.field import INamedImageField\n from z3c.form.datamanager import AttributeField\n from ZODB.POSException import ConflictError\n from zope.annotation.interfaces import IAnnotations\n from zope.component import adapter\n from zope.component import getMultiAdapter\n-from zope.component import getUtility\n from zope.globalrequest import getRequest\n from zope.interface import Interface\n from zope.interface import alsoProvides\n@@ -15,13 +15,6 @@\n import os\n import transaction\n \n-try:\n-    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n-except ImportError:\n-    PLONE_5 = False  # pragma: no cover\n-else:\n-    PLONE_5 = True  # pragma: no cover\n-\n \n ANNOTATION_KEY = "plone.formwidget.namedfile.scale"\n ENVIRONMENT_KEY = "PLONE_SCALE_GENERATE_ON_SAVE"\n@@ -32,10 +25,7 @@\n @adapter(Interface, INamedImageField)\n class NamedImageAttributeField(AttributeField):\n \n-    def __init__(self, *args, **kwargs):\n-        super(NamedImageAttributeField, self).__init__(*args, **kwargs)\n-        flag = (os.environ.get(ENVIRONMENT_KEY) or "").lower()\n-        self.scale_generate_on_save = flag in ["1", "true", "yes", "on"]\n+    scale_generate_on_save = False\n \n     def set(self, value):\n         """See z3c.form.interfaces.IDataManager"""\n@@ -45,20 +35,22 @@ def set(self, value):\n                 self.context, getRequest(), self.field.__name__)\n \n \n+NamedImageAttributeField.scale_generate_on_save = (\n+    os.environ.get(ENVIRONMENT_KEY) or ""\n+).lower() in ["1", "true", "yes", "on"]\n+\n+\n def schedule_plone_scale_generate_on_save(context, request, fieldname):\n-    annotations = IAnnotations(request, None)\n-    if annotations is not None:\n-        annotations.setdefault(ANNOTATION_KEY, [])\n-        annotations[ANNOTATION_KEY].append((context, fieldname))\n-        alsoProvides(request, IScaleGenerateOnSave)\n+    annotations = IAnnotations(request, {})\n+    annotations.setdefault(ANNOTATION_KEY, [])\n+    annotations[ANNOTATION_KEY].append((context, fieldname))\n+    alsoProvides(request, IScaleGenerateOnSave)\n \n \n def plone_scale_generate_on_save(event):\n     if not IScaleGenerateOnSave.providedBy(event.request):\n         return\n-    annotations = IAnnotations(event.request, None)\n-    if annotations is None:\n-        return\n+    annotations = IAnnotations(event.request, {})\n     for context, fieldname in annotations.get(ANNOTATION_KEY) or []:\n         try:\n             images = getMultiAdapter((context, event.request), name="images")\n@@ -82,30 +74,3 @@ def plone_scale_generate_on_save(event):\n             msg = "/".join(filter(bool, ["/".join(context.getPhysicalPath()),\n                                          "@@images", fieldname]))\n             logger.warning("ConflictError. Scale not generated on save: " + msg)\n-\n-\n-def get_scale_infos():\n-    """Returns a list of (name, width, height) 3-tuples of the\n-    available image scales.\n-    """\n-    from Products.CMFCore.interfaces import IPropertiesTool\n-    if PLONE_5:\n-        from plone.registry.interfaces import IRegistry\n-\n-        registry = getUtility(IRegistry)\n-        from Products.CMFPlone.interfaces import IImagingSchema\n-\n-        imaging_settings = registry.forInterface(IImagingSchema, prefix="plone")\n-        allowed_sizes = imaging_settings.allowed_sizes\n-\n-    else:\n-        ptool = getUtility(IPropertiesTool)\n-        image_properties = ptool.imaging_properties\n-        allowed_sizes = image_properties.getProperty("allowed_sizes")\n-\n-    def split_scale_info(allowed_size):\n-        name, dims = allowed_size.split(" ")\n-        width, height = list(map(int, dims.split(":")))\n-        return name, width, height\n-\n-    return [split_scale_info(size) for size in allowed_sizes]\ndiff --git a/plone/formwidget/namedfile/utils.py b/plone/formwidget/namedfile/utils.py\nindex 75a963b..55e1a95 100644\n--- a/plone/formwidget/namedfile/utils.py\n+++ b/plone/formwidget/namedfile/utils.py\n@@ -6,10 +6,18 @@\n from random import randint\n from zope.annotation.interfaces import IAnnotations\n from zope.component import adapter\n+from zope.component import getUtility\n from zope.interface import implementer\n from zope.interface import Interface\n from ZPublisher.HTTPRequest import FileUpload\n \n+try:\n+    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n+except ImportError:\n+    PLONE_5 = False  # pragma: no cover\n+else:\n+    PLONE_5 = True  # pragma: no cover\n+\n \n FILE_UPLOAD_MAP_KEY = "file_upload_map"\n FILE_UPLOAD_EXPIRATION_TIME = 30 * 60  # seconds\n@@ -48,3 +56,30 @@ def cleanup(self):\n             ):  # Avoid conflict errors by deleting only every fifth time  # noqa\n                 # Delete expired files or files without timestamp\n                 del upload_map[key]\n+\n+\n+def get_scale_infos():\n+    """Returns a list of (name, width, height) 3-tuples of the\n+    available image scales.\n+    """\n+    from Products.CMFCore.interfaces import IPropertiesTool\n+    if PLONE_5:\n+        from plone.registry.interfaces import IRegistry\n+\n+        registry = getUtility(IRegistry)\n+        from Products.CMFPlone.interfaces import IImagingSchema\n+\n+        imaging_settings = registry.forInterface(IImagingSchema, prefix="plone")\n+        allowed_sizes = imaging_settings.allowed_sizes\n+\n+    else:\n+        ptool = getUtility(IPropertiesTool)\n+        image_properties = ptool.imaging_properties\n+        allowed_sizes = image_properties.getProperty("allowed_sizes")\n+\n+    def split_scale_info(allowed_size):\n+        name, dims = allowed_size.split(" ")\n+        width, height = list(map(int, dims.split(":")))\n+        return name, width, height\n+\n+    return [split_scale_info(size) for size in allowed_sizes]\n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2021-07-07T08:00:30+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/b7676cb9fa45ab445fa0e9a1f3f89a14c2987df8

Change get_scales_info to not depend on _IMREALLYPLONE5-hint

Files changed:
M plone/formwidget/namedfile/utils.py

b'diff --git a/plone/formwidget/namedfile/utils.py b/plone/formwidget/namedfile/utils.py\nindex 55e1a95..c30aaab 100644\n--- a/plone/formwidget/namedfile/utils.py\n+++ b/plone/formwidget/namedfile/utils.py\n@@ -11,13 +11,6 @@\n from zope.interface import Interface\n from ZPublisher.HTTPRequest import FileUpload\n \n-try:\n-    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n-except ImportError:\n-    PLONE_5 = False  # pragma: no cover\n-else:\n-    PLONE_5 = True  # pragma: no cover\n-\n \n FILE_UPLOAD_MAP_KEY = "file_upload_map"\n FILE_UPLOAD_EXPIRATION_TIME = 30 * 60  # seconds\n@@ -63,7 +56,7 @@ def get_scale_infos():\n     available image scales.\n     """\n     from Products.CMFCore.interfaces import IPropertiesTool\n-    if PLONE_5:\n+    try:\n         from plone.registry.interfaces import IRegistry\n \n         registry = getUtility(IRegistry)\n@@ -71,8 +64,7 @@ def get_scale_infos():\n \n         imaging_settings = registry.forInterface(IImagingSchema, prefix="plone")\n         allowed_sizes = imaging_settings.allowed_sizes\n-\n-    else:\n+    except ImportError:  # Plone 4\n         ptool = getUtility(IPropertiesTool)\n         image_properties = ptool.imaging_properties\n         allowed_sizes = image_properties.getProperty("allowed_sizes")\n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2021-07-07T09:13:25+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/3714ae050846a8db73827669362f54b6f4465340

Change to set the feature flag attribute on class definition

Files changed:
M plone/formwidget/namedfile/datamanager.py

b'diff --git a/plone/formwidget/namedfile/datamanager.py b/plone/formwidget/namedfile/datamanager.py\nindex 80a8296..7aaaf73 100644\n--- a/plone/formwidget/namedfile/datamanager.py\n+++ b/plone/formwidget/namedfile/datamanager.py\n@@ -25,7 +25,9 @@\n @adapter(Interface, INamedImageField)\n class NamedImageAttributeField(AttributeField):\n \n-    scale_generate_on_save = False\n+    scale_generate_on_save = (\n+        os.environ.get(ENVIRONMENT_KEY) or ""\n+    ).lower() in ["1", "true", "yes", "on"]\n \n     def set(self, value):\n         """See z3c.form.interfaces.IDataManager"""\n@@ -35,11 +37,6 @@ def set(self, value):\n                 self.context, getRequest(), self.field.__name__)\n \n \n-NamedImageAttributeField.scale_generate_on_save = (\n-    os.environ.get(ENVIRONMENT_KEY) or ""\n-).lower() in ["1", "true", "yes", "on"]\n-\n-\n def schedule_plone_scale_generate_on_save(context, request, fieldname):\n     annotations = IAnnotations(request, {})\n     annotations.setdefault(ANNOTATION_KEY, [])\n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2021-07-07T09:19:21+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/0026d0ff167c054effa11825e4fa62ec271fc3a2

Remove Plone 4 compatibility

Files changed:
M plone/formwidget/namedfile/utils.py

b'diff --git a/plone/formwidget/namedfile/utils.py b/plone/formwidget/namedfile/utils.py\nindex c30aaab..1210ce1 100644\n--- a/plone/formwidget/namedfile/utils.py\n+++ b/plone/formwidget/namedfile/utils.py\n@@ -1,15 +1,17 @@\n from BTrees.OOBTree import OOBTree\n+from Products.CMFPlone.interfaces import IImagingSchema\n+from ZPublisher.HTTPRequest import FileUpload\n from datetime import datetime\n from datetime import timedelta\n from persistent.dict import PersistentDict\n from plone.formwidget.namedfile.interfaces import IFileUploadTemporaryStorage\n+from plone.registry.interfaces import IRegistry\n from random import randint\n from zope.annotation.interfaces import IAnnotations\n from zope.component import adapter\n from zope.component import getUtility\n-from zope.interface import implementer\n from zope.interface import Interface\n-from ZPublisher.HTTPRequest import FileUpload\n+from zope.interface import implementer\n \n \n FILE_UPLOAD_MAP_KEY = "file_upload_map"\n@@ -55,19 +57,9 @@ def get_scale_infos():\n     """Returns a list of (name, width, height) 3-tuples of the\n     available image scales.\n     """\n-    from Products.CMFCore.interfaces import IPropertiesTool\n-    try:\n-        from plone.registry.interfaces import IRegistry\n-\n-        registry = getUtility(IRegistry)\n-        from Products.CMFPlone.interfaces import IImagingSchema\n-\n-        imaging_settings = registry.forInterface(IImagingSchema, prefix="plone")\n-        allowed_sizes = imaging_settings.allowed_sizes\n-    except ImportError:  # Plone 4\n-        ptool = getUtility(IPropertiesTool)\n-        image_properties = ptool.imaging_properties\n-        allowed_sizes = image_properties.getProperty("allowed_sizes")\n+    registry = getUtility(IRegistry)\n+    imaging_settings = registry.forInterface(IImagingSchema, prefix="plone")\n+    allowed_sizes = imaging_settings.allowed_sizes\n \n     def split_scale_info(allowed_size):\n         name, dims = allowed_size.split(" ")\n'

Repository: plone.formwidget.namedfile


Branch: refs/heads/master
Date: 2021-07-07T08:59:04+02:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.formwidget.namedfile/commit/7ee1f4594c387b8e048ffebcd3b2e14ae9506025

Merge pull request #43 from plone/datakurre-generate-scales-on-save

Add to generate Plone image scales on save (opt-in)

Files changed:
A news/43.feature
A plone/formwidget/namedfile/datamanager.py
M plone/formwidget/namedfile/configure.zcml
M plone/formwidget/namedfile/interfaces.py
M plone/formwidget/namedfile/tests.py
M plone/formwidget/namedfile/utils.py

b'diff --git a/news/43.feature b/news/43.feature\nnew file mode 100644\nindex 0000000..8b6fc4b\n--- /dev/null\n+++ b/news/43.feature\n@@ -0,0 +1 @@\n+Add to generate configured Plone image scales on save when environment variable PLONE_SCALE_GENERATE_ON_SAVE=1 is set. With the default Plone configuration, this effectively removes on-demand image scaling on GET requests. [datakurre]\ndiff --git a/plone/formwidget/namedfile/configure.zcml b/plone/formwidget/namedfile/configure.zcml\nindex 393ad9b..2f0106b 100644\n--- a/plone/formwidget/namedfile/configure.zcml\n+++ b/plone/formwidget/namedfile/configure.zcml\n@@ -9,11 +9,17 @@\n   <include package="z3c.form" />\n   <include package="plone.namedfile" />\n \n+  <adapter factory=".datamanager.NamedImageAttributeField" />\n   <adapter factory=".converter.NamedDataConverter" />\n   <adapter factory=".converter.Base64Converter" />\n   <adapter factory=".validator.NamedFileWidgetValidator" />\n   <adapter factory=".utils.FileUploadTemporaryStorage" />\n \n+  <subscriber\n+      for="ZPublisher.interfaces.IPubSuccess"\n+      handler=".datamanager.plone_scale_generate_on_save"\n+  />\n+\n   <class class=".widget.NamedFileWidget">\n     <require\n         permission="zope.Public"\ndiff --git a/plone/formwidget/namedfile/datamanager.py b/plone/formwidget/namedfile/datamanager.py\nnew file mode 100644\nindex 0000000..7aaaf73\n--- /dev/null\n+++ b/plone/formwidget/namedfile/datamanager.py\n@@ -0,0 +1,73 @@\n+# -*- coding: utf-8 -*-\n+from plone.formwidget.namedfile.interfaces import IScaleGenerateOnSave\n+from plone.formwidget.namedfile.utils import get_scale_infos\n+from plone.namedfile.field import INamedImageField\n+from z3c.form.datamanager import AttributeField\n+from ZODB.POSException import ConflictError\n+from zope.annotation.interfaces import IAnnotations\n+from zope.component import adapter\n+from zope.component import getMultiAdapter\n+from zope.globalrequest import getRequest\n+from zope.interface import Interface\n+from zope.interface import alsoProvides\n+\n+import logging\n+import os\n+import transaction\n+\n+\n+ANNOTATION_KEY = "plone.formwidget.namedfile.scale"\n+ENVIRONMENT_KEY = "PLONE_SCALE_GENERATE_ON_SAVE"\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+@adapter(Interface, INamedImageField)\n+class NamedImageAttributeField(AttributeField):\n+\n+    scale_generate_on_save = (\n+        os.environ.get(ENVIRONMENT_KEY) or ""\n+    ).lower() in ["1", "true", "yes", "on"]\n+\n+    def set(self, value):\n+        """See z3c.form.interfaces.IDataManager"""\n+        super(NamedImageAttributeField, self).set(value)\n+        if self.scale_generate_on_save:\n+            schedule_plone_scale_generate_on_save(\n+                self.context, getRequest(), self.field.__name__)\n+\n+\n+def schedule_plone_scale_generate_on_save(context, request, fieldname):\n+    annotations = IAnnotations(request, {})\n+    annotations.setdefault(ANNOTATION_KEY, [])\n+    annotations[ANNOTATION_KEY].append((context, fieldname))\n+    alsoProvides(request, IScaleGenerateOnSave)\n+\n+\n+def plone_scale_generate_on_save(event):\n+    if not IScaleGenerateOnSave.providedBy(event.request):\n+        return\n+    annotations = IAnnotations(event.request, {})\n+    for context, fieldname in annotations.get(ANNOTATION_KEY) or []:\n+        try:\n+            images = getMultiAdapter((context, event.request), name="images")\n+            try:\n+                scales = get_scale_infos()\n+            except ImportError:\n+                continue\n+            t = transaction.get()\n+            for name, actual_width, actual_height in scales:\n+                images.scale(fieldname, scale=name)\n+            image = getattr(context, fieldname, None)\n+            if image:  # REST API requires this scale to refer the original\n+                width, height = image.getImageSize()\n+                images.scale(fieldname,\n+                             width=width, height=height, direction="thumbnail")\n+            msg = "/".join(filter(bool, ["/".join(context.getPhysicalPath()),\n+                                         "@@images", fieldname]))\n+            t.note(msg)\n+            t.commit()\n+        except ConflictError:\n+            msg = "/".join(filter(bool, ["/".join(context.getPhysicalPath()),\n+                                         "@@images", fieldname]))\n+            logger.warning("ConflictError. Scale not generated on save: " + msg)\ndiff --git a/plone/formwidget/namedfile/interfaces.py b/plone/formwidget/namedfile/interfaces.py\nindex af31209..d94f988 100644\n--- a/plone/formwidget/namedfile/interfaces.py\n+++ b/plone/formwidget/namedfile/interfaces.py\n@@ -40,3 +40,9 @@ class IFileUploadTemporaryStorage(Interface):\n \n     def cleanup():\n         """Removes stale temporary uploads from the upload storage"""\n+\n+\n+class IScaleGenerateOnSave(Interface):\n+    """Marker interface on request for creating scales\n+    when NamedImageField has been used to save a new image file on content.\n+    """\ndiff --git a/plone/formwidget/namedfile/tests.py b/plone/formwidget/namedfile/tests.py\nindex 940e55e..d018079 100644\n--- a/plone/formwidget/namedfile/tests.py\n+++ b/plone/formwidget/namedfile/tests.py\n@@ -1,5 +1,21 @@\n+from DateTime import DateTime\n+from OFS.SimpleItem import SimpleItem\n+from ZPublisher.pubevents import PubSuccess\n+from plone.formwidget.namedfile.datamanager import NamedImageAttributeField\n+from plone.formwidget.namedfile.interfaces import IScaleGenerateOnSave\n+from plone.formwidget.namedfile.testing import FUNCTIONAL_TESTING\n from plone.formwidget.namedfile.testing import INTEGRATION_TESTING\n+from plone.namedfile.field import NamedImage as NamedImageField\n+from plone.namedfile.file import NamedImage\n+from plone.namedfile.interfaces import IImageScaleTraversable\n+from plone.namedfile.tests import getFile\n+from plone.scale.storage import AnnotationStorage\n from plone.testing import layered\n+from z3c.form.interfaces import IDataManager\n+from zope.annotation import IAttributeAnnotatable\n+from zope.component import getMultiAdapter\n+from zope.event import notify\n+from zope.interface import implementer\n \n import doctest\n import re\n@@ -7,8 +23,56 @@\n import unittest\n \n \n+class IHasImage(IImageScaleTraversable):\n+    image = NamedImageField()\n+\n+\n+@implementer(IAttributeAnnotatable, IHasImage)\n+class DummyContent(SimpleItem):\n+    image = None\n+    modified = DateTime\n+    id = __name__ = "item"\n+    title = "foo"\n+\n+    def Title(self):\n+        return self.title\n+\n+\n+class ScaleGenerateOnSaveTests(unittest.TestCase):\n+\n+    layer = FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        item = DummyContent()\n+        self.layer["app"]._setOb("item", item)\n+        self.item = self.layer["app"].item\n+        self.request = self.layer["request"]\n+\n+    def test_not_generate_scales_on_save(self):\n+        self.assertEqual(len(AnnotationStorage(self.item).storage), 0)\n+        dm = getMultiAdapter((self.item, IHasImage["image"]), IDataManager)\n+        self.assertIsInstance(dm, NamedImageAttributeField)\n+        self.assertFalse(dm.scale_generate_on_save)\n+        dm.set(NamedImage(getFile("image.png"), "image/png", "image.png"))\n+        self.assertFalse(IScaleGenerateOnSave.providedBy(self.request))\n+        notify(PubSuccess(self.request))\n+        self.assertEqual(len(AnnotationStorage(self.item).storage), 0)\n+\n+    def test_generate_scales_on_save(self):\n+        self.assertEqual(len(AnnotationStorage(self.item).storage), 0)\n+        dm = getMultiAdapter((self.item, IHasImage["image"]), IDataManager)\n+        self.assertIsInstance(dm, NamedImageAttributeField)\n+        self.assertFalse(dm.scale_generate_on_save)\n+        dm.scale_generate_on_save = True\n+        dm.set(NamedImage(getFile("image.png"), "image/png", "image.png"))\n+        self.assertTrue(IScaleGenerateOnSave.providedBy(self.request))\n+        notify(PubSuccess(self.request))\n+        self.assertGreater(len(AnnotationStorage(self.item).storage), 0)\n+\n+\n def test_suite():\n     suite = unittest.TestSuite()\n+    suite.addTest(unittest.makeSuite(ScaleGenerateOnSaveTests))\n     suite.addTest(\n         layered(\n             doctest.DocFileSuite(\ndiff --git a/plone/formwidget/namedfile/utils.py b/plone/formwidget/namedfile/utils.py\nindex 75a963b..1210ce1 100644\n--- a/plone/formwidget/namedfile/utils.py\n+++ b/plone/formwidget/namedfile/utils.py\n@@ -1,14 +1,17 @@\n from BTrees.OOBTree import OOBTree\n+from Products.CMFPlone.interfaces import IImagingSchema\n+from ZPublisher.HTTPRequest import FileUpload\n from datetime import datetime\n from datetime import timedelta\n from persistent.dict import PersistentDict\n from plone.formwidget.namedfile.interfaces import IFileUploadTemporaryStorage\n+from plone.registry.interfaces import IRegistry\n from random import randint\n from zope.annotation.interfaces import IAnnotations\n from zope.component import adapter\n-from zope.interface import implementer\n+from zope.component import getUtility\n from zope.interface import Interface\n-from ZPublisher.HTTPRequest import FileUpload\n+from zope.interface import implementer\n \n \n FILE_UPLOAD_MAP_KEY = "file_upload_map"\n@@ -48,3 +51,19 @@ def cleanup(self):\n             ):  # Avoid conflict errors by deleting only every fifth time  # noqa\n                 # Delete expired files or files without timestamp\n                 del upload_map[key]\n+\n+\n+def get_scale_infos():\n+    """Returns a list of (name, width, height) 3-tuples of the\n+    available image scales.\n+    """\n+    registry = getUtility(IRegistry)\n+    imaging_settings = registry.forInterface(IImagingSchema, prefix="plone")\n+    allowed_sizes = imaging_settings.allowed_sizes\n+\n+    def split_scale_info(allowed_size):\n+        name, dims = allowed_size.split(" ")\n+        width, height = list(map(int, dims.split(":")))\n+        return name, width, height\n+\n+    return [split_scale_info(size) for size in allowed_sizes]\n'

