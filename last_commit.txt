Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-11-12T21:53:53-08:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/4b50a8dc74e565fb2094ebf1dbfe223e5c06a2d4

remove createMultiColumnList.py

its one remaining call did not actually affect the rendered markup

Files changed:
M CHANGES.rst
M Products/CMFPlone/browser/templates/search.pt
D Products/CMFPlone/skins/plone_scripts/createMultiColumnList.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 7214fd5..6091026 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -27,6 +27,7 @@ Breaking changes:
     - ``author_find_content.py``
     - ``canSelectDefaultPage.py`` with tests
     - ``create_query_string.py``
+    - ``createMultiColumnList.py``
     - ``formatColumns.py`` with tests
     - ``getAllowedTypes.py``
     - ``getGlobalPortalRoles.py``
diff --git a/Products/CMFPlone/browser/templates/search.pt b/Products/CMFPlone/browser/templates/search.pt
index ac1579a..b4ee4d5 100644
--- a/Products/CMFPlone/browser/templates/search.pt
+++ b/Products/CMFPlone/browser/templates/search.pt
@@ -85,20 +85,15 @@
                              i18n:translate="label_toggle">Select All/None</label>
                     </div>
                     <div class="search-type-options">
-                      <tal:div tal:define="typeLists python:context.createMultiColumnList(types_list, numCols=2, sort_on='self');"
-                               tal:repeat="sublist typeLists">
-                        <tal:items repeat="type sublist">
-                          <div>
-                            <input type="checkbox" name="portal_type:list" value="#" class="noborder" checked="checked"
-                                   tal:attributes="value type;
-                                                   id string:portal_type_${repeat/sublist/number}_${repeat/type/number};
-                                                   checked python:((type in request.get('portal_type', [])) or first_call) and 'checked' or ''"/>
-                              <label for="" i18n:translate=""
-                                     tal:attributes="for string:portal_type_${repeat/sublist/number}_${repeat/type/number}"
-                                     tal:content="python: portal_types.getTypeInfo(type).Title()" />
-                          </div>
-                        </tal:items>
-                      </tal:div>
+                      <div tal:repeat="type types_list">
+                        <input type="checkbox" name="portal_type:list" value="#" class="noborder" checked="checked"
+                               tal:attributes="value type;
+                                               id string:portal_type_${repeat/type/number};
+                                               checked python:((type in request.get('portal_type', [])) or first_call) and 'checked' or ''"/>
+                          <label for="" i18n:translate=""
+                                 tal:attributes="for string:portal_type_${repeat/type/number}"
+                                 tal:content="python: portal_types.getTypeInfo(type).Title()" />
+                      </div>
                     </div>
                   </div>
                 </fieldset>
diff --git a/Products/CMFPlone/skins/plone_scripts/createMultiColumnList.py b/Products/CMFPlone/skins/plone_scripts/createMultiColumnList.py
deleted file mode 100644
index 75b474f..0000000
--- a/Products/CMFPlone/skins/plone_scripts/createMultiColumnList.py
+++ /dev/null
@@ -1,52 +0,0 @@
-## Script (Python) "createMultiColumnList"
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=input_list,numCols=3, sort_on=None
-##title=Turn a single list into a list of lists for multi column display
-
-""" This method turns a list into a list of sublists for multi-column display.
-    The number of sublists is determined by the numCols parameter.  The
-    initial list may optionally be sorted based on the sort_on property, which
-    should be the name of a property or method on the list items or the string
-    'self', which will cause the list to be sorted in place without a sort
-    function.
-"""
-
-from zExceptions import Forbidden
-if container.REQUEST.get('PUBLISHED') is script:
-    raise Forbidden('Script may not be published.')
-
-list_len = len(input_list)
-
-if sort_on and sort_on != 'self':
-    # function for generating sort attribute (if callable)
-    get_sort_attr = lambda x: (
-                        callable(getattr(x, sort_on, None)) and
-                        getattr(x, sort_on)() or
-                        getattr(x, sort_on, None))
-
-    dec_list = [(get_sort_attr(l), l) for l in input_list]
-    dec_list.sort()
-    input_list = [l[1] for l in dec_list]
-elif sort_on == 'self':
-    input_list.sort()
-
-# Calculate the length of the sublists
-sublist_len = (
-    list_len % numCols == 0 and
-    list_len / numCols or
-    list_len / numCols + 1)
-
-# Calculate the list end point given the list number
-list_end = lambda list_num: (
-                list_num == numCols - 1 and
-                list_len or
-                (list_num + 1) * sublist_len)
-
-# Generate columns
-final_lists = [input_list[i * sublist_len:list_end(i)] for i in range(numCols)]
-
-return final_lists


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-11-13T09:50:33+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/90751221b6d23f50a350b0b04d6d2d057703ab75

Merge pull request #1835 from plone/davisagli-cleanup-scripts

remove createMultiColumnList.py

Files changed:
M CHANGES.rst
M Products/CMFPlone/browser/templates/search.pt
D Products/CMFPlone/skins/plone_scripts/createMultiColumnList.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 7c8ba07..fff12c9 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -27,6 +27,7 @@ Breaking changes:
     - ``author_find_content.py``
     - ``canSelectDefaultPage.py`` with tests
     - ``create_query_string.py``
+    - ``createMultiColumnList.py``
     - ``formatColumns.py`` with tests
     - ``getAllowedTypes.py``
     - ``getGlobalPortalRoles.py``
diff --git a/Products/CMFPlone/browser/templates/search.pt b/Products/CMFPlone/browser/templates/search.pt
index ac1579a..b4ee4d5 100644
--- a/Products/CMFPlone/browser/templates/search.pt
+++ b/Products/CMFPlone/browser/templates/search.pt
@@ -85,20 +85,15 @@
                              i18n:translate="label_toggle">Select All/None</label>
                     </div>
                     <div class="search-type-options">
-                      <tal:div tal:define="typeLists python:context.createMultiColumnList(types_list, numCols=2, sort_on='self');"
-                               tal:repeat="sublist typeLists">
-                        <tal:items repeat="type sublist">
-                          <div>
-                            <input type="checkbox" name="portal_type:list" value="#" class="noborder" checked="checked"
-                                   tal:attributes="value type;
-                                                   id string:portal_type_${repeat/sublist/number}_${repeat/type/number};
-                                                   checked python:((type in request.get('portal_type', [])) or first_call) and 'checked' or ''"/>
-                              <label for="" i18n:translate=""
-                                     tal:attributes="for string:portal_type_${repeat/sublist/number}_${repeat/type/number}"
-                                     tal:content="python: portal_types.getTypeInfo(type).Title()" />
-                          </div>
-                        </tal:items>
-                      </tal:div>
+                      <div tal:repeat="type types_list">
+                        <input type="checkbox" name="portal_type:list" value="#" class="noborder" checked="checked"
+                               tal:attributes="value type;
+                                               id string:portal_type_${repeat/type/number};
+                                               checked python:((type in request.get('portal_type', [])) or first_call) and 'checked' or ''"/>
+                          <label for="" i18n:translate=""
+                                 tal:attributes="for string:portal_type_${repeat/type/number}"
+                                 tal:content="python: portal_types.getTypeInfo(type).Title()" />
+                      </div>
                     </div>
                   </div>
                 </fieldset>
diff --git a/Products/CMFPlone/skins/plone_scripts/createMultiColumnList.py b/Products/CMFPlone/skins/plone_scripts/createMultiColumnList.py
deleted file mode 100644
index 75b474f..0000000
--- a/Products/CMFPlone/skins/plone_scripts/createMultiColumnList.py
+++ /dev/null
@@ -1,52 +0,0 @@
-## Script (Python) "createMultiColumnList"
-##bind container=container
-##bind context=context
-##bind namespace=
-##bind script=script
-##bind subpath=traverse_subpath
-##parameters=input_list,numCols=3, sort_on=None
-##title=Turn a single list into a list of lists for multi column display
-
-""" This method turns a list into a list of sublists for multi-column display.
-    The number of sublists is determined by the numCols parameter.  The
-    initial list may optionally be sorted based on the sort_on property, which
-    should be the name of a property or method on the list items or the string
-    'self', which will cause the list to be sorted in place without a sort
-    function.
-"""
-
-from zExceptions import Forbidden
-if container.REQUEST.get('PUBLISHED') is script:
-    raise Forbidden('Script may not be published.')
-
-list_len = len(input_list)
-
-if sort_on and sort_on != 'self':
-    # function for generating sort attribute (if callable)
-    get_sort_attr = lambda x: (
-                        callable(getattr(x, sort_on, None)) and
-                        getattr(x, sort_on)() or
-                        getattr(x, sort_on, None))
-
-    dec_list = [(get_sort_attr(l), l) for l in input_list]
-    dec_list.sort()
-    input_list = [l[1] for l in dec_list]
-elif sort_on == 'self':
-    input_list.sort()
-
-# Calculate the length of the sublists
-sublist_len = (
-    list_len % numCols == 0 and
-    list_len / numCols or
-    list_len / numCols + 1)
-
-# Calculate the list end point given the list number
-list_end = lambda list_num: (
-                list_num == numCols - 1 and
-                list_len or
-                (list_num + 1) * sublist_len)
-
-# Generate columns
-final_lists = [input_list[i * sublist_len:list_end(i)] for i in range(numCols)]
-
-return final_lists


