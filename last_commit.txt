Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2018-09-29T15:57:20+08:00
Author: Jian Aijun (jianaijun) <jianaijun@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/8430e132c75306e16c3c214b67e6378ef5f4fea3

Fixed sorting error after Changing the base class for existing objects

Files changed:
M CHANGES.rst
M plone/app/contenttypes/migration/dxmigration.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 72437071..7d112a92 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,9 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Fixed sorting error after Changing the base class for existing objects.\n+  see `issue <https://github.com/plone/plone.app.contenttypes/issues/487>`\n+  [jianaijun]\n \n \n 1.4.12 (2018-09-23)\ndiff --git a/plone/app/contenttypes/migration/dxmigration.py b/plone/app/contenttypes/migration/dxmigration.py\nindex c0a87d55..7abd7d4d 100644\n--- a/plone/app/contenttypes/migration/dxmigration.py\n+++ b/plone/app/contenttypes/migration/dxmigration.py\n@@ -4,6 +4,7 @@\n from plone.dexterity.interfaces import IDexterityContent\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.event.utils import default_timezone\n+from plone.folder.interfaces import IOrdering\n from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2Base\n from Products.CMFCore.utils import getToolByName\n from Products.contentmigration.basemigrator.migrator import CMFItemMigrator\n@@ -12,6 +13,7 @@\n from zope.annotation.interfaces import IAnnotations\n from zope.component import queryUtility\n from zope.component.hooks import getSite\n+from zope.interface import directlyProvides\n \n import importlib\n import logging\n@@ -160,6 +162,7 @@ def migrate_base_class_to_new_class(obj,\n     is_container = isinstance(obj, BTreeFolder2Base)\n \n     if was_item and is_container or migrate_to_folderish and is_container:\n+        directlyProvides(obj, IOrdering)\n         #  If Itemish becomes Folderish we have to update obj _tree\n         BTreeFolder2Base._initBTrees(obj)\n \n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2018-09-30T10:06:40+08:00
Author: Jian Aijun (jianaijun) <jianaijun@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/3256a1d642bfca4052bb4fc46cbdacd3b7d6d0fd

Use the alsoProvides instead of directlyProvides.

Files changed:
M plone/app/contenttypes/migration/dxmigration.py

b'diff --git a/plone/app/contenttypes/migration/dxmigration.py b/plone/app/contenttypes/migration/dxmigration.py\nindex 7abd7d4d..25e24a25 100644\n--- a/plone/app/contenttypes/migration/dxmigration.py\n+++ b/plone/app/contenttypes/migration/dxmigration.py\n@@ -13,7 +13,7 @@\n from zope.annotation.interfaces import IAnnotations\n from zope.component import queryUtility\n from zope.component.hooks import getSite\n-from zope.interface import directlyProvides\n+from zope.interface import alsoProvides\n \n import importlib\n import logging\n@@ -162,7 +162,7 @@ def migrate_base_class_to_new_class(obj,\n     is_container = isinstance(obj, BTreeFolder2Base)\n \n     if was_item and is_container or migrate_to_folderish and is_container:\n-        directlyProvides(obj, IOrdering)\n+        alsoProvides(obj, IOrdering)\n         #  If Itemish becomes Folderish we have to update obj _tree\n         BTreeFolder2Base._initBTrees(obj)\n \n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2019-01-12T16:28:15+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/739b73d5f83af6f6b97a8af19feeaa6f53383f3c

Merge remote-tracking branch 'origin/master'

Files changed:
M CHANGES.rst
M docs/README.rst
M plone/app/contenttypes/browser/file.py
M plone/app/contenttypes/content.py
M plone/app/contenttypes/indexers.py
M plone/app/contenttypes/tests/robot/test_collection_location_criterion.robot
M plone/app/contenttypes/tests/test_behaviors_leadimage.py
M plone/app/contenttypes/tests/test_collection.py
M plone/app/contenttypes/tests/test_file.py
M plone/app/contenttypes/tests/test_image.py
M plone/app/contenttypes/tests/test_indexes.py
M plone/app/contenttypes/utils.py
M setup.py
D plone/app/contenttypes/tests/test_utils.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 7d112a92..8fa02b7f 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -1,8 +1,8 @@\n Changelog\n =========\n \n-1.4.13 (unreleased)\n--------------------\n+2.0.1 (unreleased)\n+------------------\n \n Breaking changes:\n \n@@ -19,6 +19,43 @@ Bug fixes:\n   [jianaijun]\n \n \n+2.0.0 (2018-10-30)\n+------------------\n+\n+Breaking changes:\n+\n+- ILeadImage and IRichText behaviors now have proper "Marker"-Interfaces.\n+  As this was only possible by renaming the schema adapter to *Behavior to\n+  not break with implementations inside the collective, the FTI-behavior-definition\n+  has changed\n+    \'plone.app.contenttypes.behaviors.leadimage.ILeadImage\'\n+    becomes\n+    \'plone.app.contenttypes.behaviors.leadimage.ILeadImageBehavior\'\n+    and\n+    \'plone.app.contenttypes.behaviors.richtext.IRichText\'\n+    becomes\n+    \'plone.app.contenttypes.behaviors.richtext.IRichTextBehavior\'\n+  [iham]\n+\n+New features:\n+\n+- By using correct (Marker-)Interfaces for the ILeadImage and IRichText,\n+  the factories are now working properly and can be reconfigured\n+  wherever you might need them. ZCA FTW!\n+  [iham]\n+- Use human_readable_size from Products.CMFPlone.utils to replace getObjSize\n+  script. #1801\n+  [reinhardt]\n+\n+Bug fixes:\n+\n+- The ``Format`` accessor should actually return the ``format`` attribute\n+  (see plone/Products.CMFPlone#2540)\n+  [ale-rt]\n+\n+- Fix resource warnings. \n+  [davisagli] \n+\n 1.4.12 (2018-09-23)\n -------------------\n \ndiff --git a/docs/README.rst b/docs/README.rst\nindex 6bcd4cd4..f7bf6325 100644\n--- a/docs/README.rst\n+++ b/docs/README.rst\n@@ -418,7 +418,10 @@ Information for Addon-Developers\n Design decisions\n ^^^^^^^^^^^^^^^^\n \n-The schemata for the types File, Image and Link are defined in xml-files using ``plone.supermodel``. This allows the types to be editable trough the web. The types Document, News Item, Folder and Event have no schemata at all but only use behaviors to provide their fields.\n+Schemata that are defined in XML-files using ``plone.supermodel`` allow editing those types\' schemata through the web. \n+This is the case for the default File, Image and Link content types. \n+Schemata coming from behaviors, on the other hand, are not editable through the web.\n+The Document, News Item, Folder and Event default types, for example, have no schemata of their own at all, all their fields are provided by behaviors.\n \n \n Installation as a dependency from another product\ndiff --git a/plone/app/contenttypes/browser/file.py b/plone/app/contenttypes/browser/file.py\nindex cbe05ddd..ce09ea38 100644\n--- a/plone/app/contenttypes/browser/file.py\n+++ b/plone/app/contenttypes/browser/file.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from plone.app.contenttypes.browser.utils import Utils\n-from plone.app.contenttypes.utils import human_readable_size\n+from Products.CMFPlone.utils import human_readable_size\n \n \n class FileView(Utils):\ndiff --git a/plone/app/contenttypes/content.py b/plone/app/contenttypes/content.py\nindex 766fa379..b9068c88 100644\n--- a/plone/app/contenttypes/content.py\n+++ b/plone/app/contenttypes/content.py\n@@ -76,6 +76,14 @@ def results(self, **kwargs):\n class Document(Item):\n     """Convenience subclass for ``Document`` portal type\n     """\n+    def Format(self):\n+        \'\'\' Provide a proper accessor for the format attribute\n+        See https://github.com/plone/Products.CMFPlone/issues/2540\n+        \'\'\'\n+        format = self.format\n+        if six.PY2 and isinstance(format, six.text_type):\n+            format = self.format.encode()\n+        return format\n \n \n @implementer(IFile)\ndiff --git a/plone/app/contenttypes/indexers.py b/plone/app/contenttypes/indexers.py\nindex afea3e15..a2ba27fb 100644\n--- a/plone/app/contenttypes/indexers.py\n+++ b/plone/app/contenttypes/indexers.py\n@@ -16,6 +16,7 @@\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import safe_unicode\n+from Products.CMFPlone.utils import human_readable_size\n from Products.PortalTransforms.libtransforms.utils import MissingBinary\n from ZODB.POSException import ConflictError\n \n@@ -165,7 +166,7 @@ def getObjSize_image(obj):\n             u\'please reindex!\'.format(obj.absolute_url())\n         )\n         return\n-    return obj.getObjSize(None, primary_field_info.value.size)\n+    return human_readable_size(primary_field_info.value.size)\n \n \n @indexer(IFile)\n@@ -178,7 +179,7 @@ def getObjSize_file(obj):\n             u\'please reindex!\'.format(obj.absolute_url())\n         )\n         return\n-    return obj.getObjSize(None, primary_field_info.value.size)\n+    return human_readable_size(primary_field_info.value.size)\n \n \n @indexer(IDexterityContent)\ndiff --git a/plone/app/contenttypes/tests/robot/test_collection_location_criterion.robot b/plone/app/contenttypes/tests/robot/test_collection_location_criterion.robot\nindex 39e394c7..7cca6bb9 100644\n--- a/plone/app/contenttypes/tests/robot/test_collection_location_criterion.robot\n+++ b/plone/app/contenttypes/tests/robot/test_collection_location_criterion.robot\n@@ -22,7 +22,6 @@ Test Teardown  Close all browsers\n *** Test cases ***************************************************************\n \n Scenario: Test Relative Location Criterion\n-    [Tags]  unstable\n     [Documentation]  This sometimes fails with:\n     ...              Element locator \'css=#select2-drop input\' did not match any elements after 30 seconds\n     Given I am logged in as site owner\n@@ -35,7 +34,6 @@ Scenario: Test Relative Location Criterion\n \n \n Scenario: Test Absolute Location Criterion\n-    [Tags]  unstable\n     [Documentation]  This sometimes fails with:\n     ...              Element locator \'css=#select2-drop input\' did not match any elements after 30 seconds\n     ...              Or with: Element \'id=content\' should not contain text \'Document outside Folder\' but it did.\ndiff --git a/plone/app/contenttypes/tests/test_behaviors_leadimage.py b/plone/app/contenttypes/tests/test_behaviors_leadimage.py\nindex f397118f..a42331db 100644\n--- a/plone/app/contenttypes/tests/test_behaviors_leadimage.py\n+++ b/plone/app/contenttypes/tests/test_behaviors_leadimage.py\n@@ -62,7 +62,8 @@ def test_lead_image_viewlet_shows_up(self):\n         file_ctl = self.browser.getControl(\n             name=\'form.widgets.ILeadImageBehavior.image\'\n         )\n-        file_ctl.add_file(io.FileIO(file_path), \'image/png\', \'image.jpg\')\n+        with io.FileIO(file_path, \'rb\') as f:\n+            file_ctl.add_file(f, \'image/png\', \'image.jpg\')\n         # Image caption\n         self.browser.getControl(\n             name=\'form.widgets.ILeadImageBehavior.image_caption\'\ndiff --git a/plone/app/contenttypes/tests/test_collection.py b/plone/app/contenttypes/tests/test_collection.py\nindex b8467b92..5f3569fc 100644\n--- a/plone/app/contenttypes/tests/test_collection.py\n+++ b/plone/app/contenttypes/tests/test_collection.py\n@@ -36,8 +36,10 @@\n def dummy_image():\n     from plone.namedfile.file import NamedBlobImage\n     filename = os.path.join(os.path.dirname(__file__), u\'image.png\')\n+    with open(filename, \'rb\') as f:\n+        image_data = f.read() \n     return NamedBlobImage(\n-        data=open(filename, \'rb\').read(),\n+        data=image_data,\n         filename=filename\n     )\n \ndiff --git a/plone/app/contenttypes/tests/test_file.py b/plone/app/contenttypes/tests/test_file.py\nindex e58bd90a..022c0aa0 100644\n--- a/plone/app/contenttypes/tests/test_file.py\n+++ b/plone/app/contenttypes/tests/test_file.py\n@@ -133,7 +133,8 @@ def test_add_file(self):\n         self.browser.getControl(name=widget).value = \'This is my file.\'\n         file_path = os.path.join(os.path.dirname(__file__), \'image.jpg\')\n         file_ctl = self.browser.getControl(name=\'form.widgets.file\')\n-        file_ctl.add_file(io.FileIO(file_path), \'image/png\', \'image.jpg\')\n+        with io.FileIO(file_path, \'rb\') as f:\n+            file_ctl.add_file(f, \'image/png\', \'image.jpg\')\n         self.browser.getControl(\'Save\').click()\n         self.assertTrue(self.browser.url.endswith(\'image.jpg/view\'))\n         self.assertTrue(\'My file\' in self.browser.contents)\n@@ -148,7 +149,8 @@ def test_shortname_file(self):\n         self.browser.getControl(name=widget).value = \'my-special-file\'\n         file_path = os.path.join(os.path.dirname(__file__), \'image.jpg\')\n         file_ctl = self.browser.getControl(name=\'form.widgets.file\')\n-        file_ctl.add_file(io.FileIO(file_path), \'image/png\', \'image.jpg\')\n+        with io.FileIO(file_path, \'rb\') as f:\n+            file_ctl.add_file(f, \'image/png\', \'image.jpg\')\n         self.browser.getControl(\'Save\').click()\n         self.assertTrue(self.browser.url.endswith(\'my-special-file/view\'))\n \n@@ -162,7 +164,8 @@ def test_mime_icon_pdf_for_file_(self):\n         self.browser.getControl(name=widget).value = \'This is my pdf file.\'\n         file_path = os.path.join(os.path.dirname(__file__), \'file.pdf\')\n         file_ctl = self.browser.getControl(name=\'form.widgets.file\')\n-        file_ctl.add_file(io.FileIO(file_path), \'application/pdf\', \'file.pdf\')\n+        with io.FileIO(file_path, \'rb\') as f:\n+            file_ctl.add_file(f, \'application/pdf\', \'file.pdf\')\n         self.browser.getControl(\'Save\').click()\n         self.assertTrue(self.browser.url.endswith(\'file.pdf/view\'))\n         self.assertTrue(\'pdf.png\' in self.browser.contents)\n@@ -181,8 +184,8 @@ def test_alternative_mime_icon_doc_for_file(self):\n         self.browser.getControl(name=widget).value = \'This is my doc file.\'\n         file_path = os.path.join(os.path.dirname(__file__), \'file.doc\')\n         file_ctl = self.browser.getControl(name=\'form.widgets.file\')\n-        file_ctl.add_file(io.FileIO(file_path), \'application/msword\',\n-                          \'file.doc\')\n+        with io.FileIO(file_path, \'rb\') as f:\n+            file_ctl.add_file(f, \'application/msword\', \'file.doc\')\n         self.browser.getControl(\'Save\').click()\n         self.assertTrue(self.browser.url.endswith(\'file.doc/view\'))\n         self.assertTrue(\'custom.png\' in self.browser.contents)\n@@ -197,9 +200,11 @@ def test_mime_icon_odt_for_file_(self):\n         self.browser.getControl(name=widget).value = \'This is my odt file.\'\n         file_path = os.path.join(os.path.dirname(__file__), \'file.odt\')\n         file_ctl = self.browser.getControl(name=\'form.widgets.file\')\n-        file_ctl.add_file(io.FileIO(file_path),\n-                          \'application/vnd.oasis.opendocument.text\',\n-                          \'file.odt\')\n+        with io.FileIO(file_path, \'rb\') as f:\n+            file_ctl.add_file(\n+                f,\n+                \'application/vnd.oasis.opendocument.text\',\n+                \'file.odt\')\n         self.browser.getControl(\'Save\').click()\n         self.assertTrue(self.browser.url.endswith(\'file.odt/view\'))\n         self.assertTrue(\'application.png\' in self.browser.contents)\ndiff --git a/plone/app/contenttypes/tests/test_image.py b/plone/app/contenttypes/tests/test_image.py\nindex 1ab94e94..9974c82e 100644\n--- a/plone/app/contenttypes/tests/test_image.py\n+++ b/plone/app/contenttypes/tests/test_image.py\n@@ -22,8 +22,10 @@\n def dummy_image(filename=u\'image.jpg\'):\n     from plone.namedfile.file import NamedBlobImage\n     filename = os.path.join(os.path.dirname(__file__), filename)\n+    with open(filename, \'rb\') as f:\n+        image_data = f.read()\n     return NamedBlobImage(\n-        data=open(filename, \'rb\').read(),\n+        data=image_data,\n         filename=filename\n     )\n \n@@ -153,7 +155,8 @@ def test_add_image(self):\n         self.browser.getControl(name=widget).value = \'my-special-image.jpg\'\n         image_path = os.path.join(os.path.dirname(__file__), \'image.jpg\')\n         image_ctl = self.browser.getControl(name=\'form.widgets.image\')\n-        image_ctl.add_file(io.FileIO(image_path), \'image/png\', \'image.jpg\')\n+        with io.FileIO(image_path, \'rb\') as f:\n+            image_ctl.add_file(f, \'image/png\', \'image.jpg\')\n         self.browser.getControl(\'Save\').click()\n         self.assertTrue(self.browser.url.endswith(\'image.jpg/view\'))\n         self.assertIn(\'My image\', self.browser.contents)\n@@ -169,7 +172,8 @@ def test_add_image_with_shortname(self):\n         self.browser.getControl(name=widget).value = \'my-special-image.jpg\'\n         image_path = os.path.join(os.path.dirname(__file__), \'image.jpg\')\n         image_ctl = self.browser.getControl(name=\'form.widgets.image\')\n-        image_ctl.add_file(io.FileIO(image_path), \'image/png\', \'image.jpg\')\n+        with io.FileIO(image_path, \'rb\') as f:\n+            image_ctl.add_file(f, \'image/png\', \'image.jpg\')\n         self.browser.getControl(\'Save\').click()\n         self.assertTrue(self.browser.url.endswith(\'my-special-image.jpg/view\'))\n \n@@ -185,7 +189,8 @@ def test_image_view_fullscreen(self):\n         self.browser.getControl(name=widget).value = \'This is my image.\'\n         image_path = os.path.join(os.path.dirname(__file__), \'image.jpg\')\n         image_ctl = self.browser.getControl(name=\'form.widgets.image\')\n-        image_ctl.add_file(io.FileIO(image_path), \'image/png\', \'image.jpg\')\n+        with io.FileIO(image_path, \'rb\') as f:\n+            image_ctl.add_file(f, \'image/png\', \'image.jpg\')\n         self.browser.getControl(\'Save\').click()\n         self.browser.getLink(\'Click to view full-size image\').click()\n         self.assertTrue(\ndiff --git a/plone/app/contenttypes/tests/test_indexes.py b/plone/app/contenttypes/tests/test_indexes.py\nindex d703584f..e10eef5d 100644\n--- a/plone/app/contenttypes/tests/test_indexes.py\n+++ b/plone/app/contenttypes/tests/test_indexes.py\n@@ -370,9 +370,8 @@ def test_getobjsize_image(self):\n             path=\'/plone/folder/image\',\n         ))\n \n-        # XXX: Do we still rely on getObjSize in portal_skins/plone_scripts?\n         self.assertEqual(\n-            self.portal.getObjSize(None, primary_field_info.value.size),\n+            \'5.0 KB\',\n             brains[0].getObjSize,\n         )\n \n@@ -380,8 +379,11 @@ def test_getobjsize_file(self):\n         from plone.namedfile.file import NamedBlobFile\n \n         filename = os.path.join(os.path.dirname(__file__), u\'image.jpg\')\n-        test_file = NamedBlobFile(data=open(filename, \'rb\').read(),\n-                                  filename=filename)\n+        with open(filename, \'rb\') as f:\n+            file_data = f.read()\n+        test_file = NamedBlobFile(\n+            data=file_data,\n+            filename=filename)\n \n         primary_field_info = IPrimaryFieldInfo(self.file)\n         primary_field_info.field.set(self.file, test_file)\n@@ -391,8 +393,7 @@ def test_getobjsize_file(self):\n             path=\'/plone/folder/file\',\n         ))\n \n-        # XXX: Do we still rely on getObjSize in portal_skins/plone_scripts?\n         self.assertEqual(\n-            self.portal.getObjSize(None, primary_field_info.value.size),\n+            \'5.0 KB\',\n             brains[0].getObjSize,\n         )\ndiff --git a/plone/app/contenttypes/tests/test_utils.py b/plone/app/contenttypes/tests/test_utils.py\ndeleted file mode 100644\nindex 91befe16..00000000\n--- a/plone/app/contenttypes/tests/test_utils.py\n+++ /dev/null\n@@ -1,23 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.contenttypes.utils import human_readable_size\n-\n-import unittest\n-\n-\n-class PloneAppContenttypesUtilsTestCase(unittest.TestCase):\n-\n-    def test_human_readable_size(self):\n-        self.assertEqual(human_readable_size(0), \'0 B\')\n-        self.assertEqual(human_readable_size(1), \'1 B\')\n-        size = 1000\n-        self.assertEqual(human_readable_size(1000), \'1000 B\')\n-        size += 24\n-        self.assertEqual(human_readable_size(size), \'1.0 KB\')\n-        size += 512\n-        self.assertEqual(human_readable_size(size), \'1.5 KB\')\n-        size *= 1024\n-        self.assertEqual(human_readable_size(size), \'1.5 MB\')\n-        size *= 1024\n-        self.assertEqual(human_readable_size(size), \'1.5 GB\')\n-        size *= 1024\n-        self.assertEqual(human_readable_size(size), \'1536.0 GB\')\ndiff --git a/plone/app/contenttypes/utils.py b/plone/app/contenttypes/utils.py\nindex 39858ef5..262fac81 100644\n--- a/plone/app/contenttypes/utils.py\n+++ b/plone/app/contenttypes/utils.py\n@@ -42,18 +42,3 @@ def replace_link_variables_by_paths(context, url):\n def _replace_variable_by_path(url, variable, obj):\n     path = \'/\'.join(obj.getPhysicalPath())\n     return url.replace(variable, path)\n-\n-\n-def human_readable_size(size):\n-    """Return human readable size.\n-    Based on https://stackoverflow.com/a/1094933\n-    """\n-    if size < 1024:\n-        return \'{size} B\'.format(size=size)\n-\n-    for unit in (\'KB\', \'MB\', \'GB\'):\n-        size /= 1024.0\n-        if size < 1024.0:\n-            return \'{size:.1f} {unit}\'.format(size=size, unit=unit)\n-\n-    return \'{size:.1f} GB\'.format(size=size)\ndiff --git a/setup.py b/setup.py\nindex 1c4de429..a6a729fe 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -5,7 +5,7 @@\n import os\n \n \n-version = \'1.4.13.dev0\'\n+version = \'2.0.1.dev0\'\n \n \n def read(*rnames):\n@@ -39,7 +39,7 @@ def read(*rnames):\n       author_email=\'plone-developers@lists.sourceforge.net\',\n       url=\'https://github.com/plone/plone.app.contenttypes\',\n       license=\'GPL\',\n-      packages=find_packages(exclude=[\'ez_setup\']),\n+      packages=find_packages(),\n       namespace_packages=[\'plone\', \'plone.app\'],\n       include_package_data=True,\n       zip_safe=False,\n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2019-01-13T11:17:17+01:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/78ca7db2814ff6f0bfab4d01414b6b3f7cae68e4

Merge pull request #498 from plone/488-jianaijun-branch-updated

Fixed sorting error after Changing the base class for existing objects (updated)

Files changed:
M CHANGES.rst
M plone/app/contenttypes/migration/dxmigration.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 339c91b5..8fa02b7f 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,9 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Fixed sorting error after Changing the base class for existing objects.\n+  see `issue <https://github.com/plone/plone.app.contenttypes/issues/487>`\n+  [jianaijun]\n \n \n 2.0.0 (2018-10-30)\ndiff --git a/plone/app/contenttypes/migration/dxmigration.py b/plone/app/contenttypes/migration/dxmigration.py\nindex c0a87d55..25e24a25 100644\n--- a/plone/app/contenttypes/migration/dxmigration.py\n+++ b/plone/app/contenttypes/migration/dxmigration.py\n@@ -4,6 +4,7 @@\n from plone.dexterity.interfaces import IDexterityContent\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.event.utils import default_timezone\n+from plone.folder.interfaces import IOrdering\n from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2Base\n from Products.CMFCore.utils import getToolByName\n from Products.contentmigration.basemigrator.migrator import CMFItemMigrator\n@@ -12,6 +13,7 @@\n from zope.annotation.interfaces import IAnnotations\n from zope.component import queryUtility\n from zope.component.hooks import getSite\n+from zope.interface import alsoProvides\n \n import importlib\n import logging\n@@ -160,6 +162,7 @@ def migrate_base_class_to_new_class(obj,\n     is_container = isinstance(obj, BTreeFolder2Base)\n \n     if was_item and is_container or migrate_to_folderish and is_container:\n+        alsoProvides(obj, IOrdering)\n         #  If Itemish becomes Folderish we have to update obj _tree\n         BTreeFolder2Base._initBTrees(obj)\n \n'

