Repository: plone.recipe.zeoserver


Branch: refs/heads/master
Date: 2023-04-27T14:17:06+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.recipe.zeoserver/commit/56cba1182c7241312fa3a25904a8e6c1497ebfae

configure with plone/meta

Files changed:
A .editorconfig
A .meta.toml
A .pre-commit-config.yaml
M pyproject.toml
M setup.cfg
M setup.py
M src/plone/__init__.py
M src/plone/recipe/__init__.py
M src/plone/recipe/zeoserver/ctl.py
M src/plone/recipe/zeoserver/pack.py
M src/plone/recipe/zeoserver/recipe.py
M src/plone/recipe/zeoserver/tests/__init__.py
M src/plone/recipe/zeoserver/tests/test_docs.py
M src/plone/recipe/zeoserver/tests/zeoserver.txt
M tox.ini
D .coveragerc
D .travis.yml
D bootstrap.py

b'diff --git a/.coveragerc b/.coveragerc\ndeleted file mode 100644\nindex 417be10..0000000\n--- a/.coveragerc\n+++ /dev/null\n@@ -1,8 +0,0 @@\n-[run]\n-branch = True\n-source = $COVERAGE_HOME/src/plone/recipe/zeoserver\n-parallel = true\n-data_file = $COVERAGE_HOME/.coverage\n-\n-[report]\n-precision = 2\ndiff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..99342b2\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "2a4ba395"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/.travis.yml b/.travis.yml\ndeleted file mode 100644\nindex 2ad0449..0000000\n--- a/.travis.yml\n+++ /dev/null\n@@ -1,23 +0,0 @@\n-language: python\n-dist: xenial\n-python:\n-    - 2.7\n-    - 3.6\n-    - 3.7\n-    - 3.8\n-before_install:\n-    - pip install -U setuptools pip\n-    - pip install -U coverage coveralls zope.testrunner\n-install:\n-    - pip install -U -e .[zrs]\n-script:\n-    - export COVERAGE_HOME=$(pwd)\n-    - export COVERAGE_PROCESS_START=$COVERAGE_HOME/.coveragerc\n-    - coverage run -m zope.testrunner --test-path=src --all -v1\n-notifications:\n-    email: false\n-after_success:\n-    - coverage combine\n-    - coveralls\n-cache:\n-  pip: true\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex a629566..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,189 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-tmpeggs = tempfile.mkdtemp()\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep\n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n-\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--setuptools-version",\n-                  help="use a specific setuptools version")\n-\n-\n-options, args = parser.parse_args()\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    if options.allow_site_packages:\n-        import setuptools\n-        import pkg_resources\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-\n-if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n-\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-requirement = \'zc.buildout\'\n-version = options.version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        try:\n-            return not parsed_version.is_prerelease\n-        except AttributeError:\n-            # Older setuptools\n-            for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n-                    return False\n-            return True\n-\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..639f77a 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,65 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex faceec3..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,8 +1,23 @@\n-[check-manifest]\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n ignore =\n-    *.cfg\n-    .coveragerc\n-    bootstrap.py\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n \n-[bdist_wheel]\n-universal = 1\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex b267cbc..e11de4f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,70 +1,65 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n import sys\n \n \n-version = \'2.0.4.dev0\'\n+version = "2.0.4.dev0"\n \n additional_install_requires = []\n \n-if sys.platform[:3].lower() == \'win\':\n-    additional_install_requires += [\'nt_svcutils\']\n+if sys.platform[:3].lower() == "win":\n+    additional_install_requires += ["nt_svcutils"]\n \n \n setup(\n     name="plone.recipe.zeoserver",\n     version=version,\n-    author=\'Hanno Schlichting\',\n-    author_email=\'hannosch@plone.org\',\n-    description=\'ZC Buildout recipe for installing a ZEO server\',\n-    long_description=(\n-        open(\'README.rst\').read() +\n-        \'\\n\' +\n-        open(\'CHANGES.rst\').read()\n-    ),\n-    license=\'ZPL 2.1\',\n-    keywords=\'zope2 zeo zodb buildout\',\n-    url=\'https://github.com/plone/plone.recipe.zeoserver\',\n-    download_url=\'https://pypi.org/project/plone.recipe.zeoserver\',\n+    author="Hanno Schlichting",\n+    author_email="hannosch@plone.org",\n+    description="ZC Buildout recipe for installing a ZEO server",\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n+    license="ZPL 2.1",\n+    keywords="zope2 zeo zodb buildout",\n+    url="https://github.com/plone/plone.recipe.zeoserver",\n+    download_url="https://pypi.org/project/plone.recipe.zeoserver",\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'License :: OSI Approved :: Zope Public License\',\n-        \'Framework :: Buildout\',\n-        \'Framework :: Plone\',\n-        \'Framework :: Plone :: 5.1\',\n-        \'Framework :: Plone :: 5.2\',\n-        \'Framework :: Plone :: Core\',\n-        \'Framework :: Zope\',\n-        \'Framework :: Zope :: 4\',\n-        \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 2\',\n-        \'Programming Language :: Python :: 2.7\',\n-        \'Programming Language :: Python :: 3\',\n-        \'Programming Language :: Python :: 3.6\',\n-        \'Programming Language :: Python :: 3.7\',\n-        \'Programming Language :: Python :: 3.8\',\n-        \'Programming Language :: Python :: Implementation\',\n-        \'Programming Language :: Python :: Implementation :: CPython\',\n+        "Development Status :: 5 - Production/Stable",\n+        "License :: OSI Approved :: Zope Public License",\n+        "Framework :: Buildout",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 5.1",\n+        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: Core",\n+        "Framework :: Zope",\n+        "Framework :: Zope :: 4",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 2",\n+        "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: Implementation",\n+        "Programming Language :: Python :: Implementation :: CPython",\n     ],\n-    packages=find_packages(\'src\'),\n+    packages=find_packages("src"),\n     include_package_data=True,\n-    package_dir={\'\': \'src\'},\n-    namespace_packages=[\'plone\', \'plone.recipe\'],\n+    package_dir={"": "src"},\n+    namespace_packages=["plone", "plone.recipe"],\n     install_requires=[\n-        \'setuptools\',\n-        \'zc.buildout\',\n-        \'zc.recipe.egg\',\n-        \'ZODB >= 5\',\n-        \'zope.mkzeoinstance >=4.1\',\n-        \'ZopeUndo\',\n-    ] + additional_install_requires,\n-    extras_require={\n-        \'zrs\': [\'zc.zrs\']\n-    },\n+        "setuptools",\n+        "zc.buildout",\n+        "zc.recipe.egg",\n+        "ZEO",\n+        "ZODB >= 5",\n+        "zope.mkzeoinstance >=4.1",\n+        "ZopeUndo",\n+    ]\n+    + additional_install_requires,\n+    extras_require={"zrs": ["zc.zrs"]},\n     zip_safe=False,\n     entry_points={\n-        \'zc.buildout\': [\'default = plone.recipe.zeoserver.recipe:Recipe\'],\n+        "zc.buildout": ["default = plone.recipe.zeoserver.recipe:Recipe"],\n     },\n )\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex 85880ef..05f0beb 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1,7 +1,7 @@\n-# -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/src/plone/recipe/__init__.py b/src/plone/recipe/__init__.py\nindex 85880ef..05f0beb 100644\n--- a/src/plone/recipe/__init__.py\n+++ b/src/plone/recipe/__init__.py\n@@ -1,7 +1,7 @@\n-# -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/src/plone/recipe/zeoserver/ctl.py b/src/plone/recipe/zeoserver/ctl.py\nindex 638c9b6..4430245 100644\n--- a/src/plone/recipe/zeoserver/ctl.py\n+++ b/src/plone/recipe/zeoserver/ctl.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """zeocltl -- control a ZEO server using zdaemon.\n \n Usage: zeocltl [options] [action [arguments]]\n@@ -10,7 +9,6 @@\n no action is specified on the command line, a "shell" interpreting actions\n typed interactively is started. Use the action "help" to find out about\n available actions. """\n-from __future__ import print_function\n \n from ZEO import runzeo\n from ZEO import zeoctl\n@@ -20,16 +18,16 @@\n \n \n if sys.platform[:3].lower() == "win":\n-    print(\'For win32 platforms, runzeo.bat or zeoservice.exe should be used\')\n-    print(\'%s is based on zdaemon, which is Linux specific\' % sys.argv[0])\n-    print(\'Aborting...\')\n+    print("For win32 platforms, runzeo.bat or zeoservice.exe should be used")\n+    print("%s is based on zdaemon, which is Linux specific" % sys.argv[0])\n+    print("Aborting...")\n     sys.exit(0)\n \n \n def main(args=None):\n     # When we detect Supervisord we need to make sure we do not fork a\n     # sub process since Supervisord does not like that\n-    if \'SUPERVISOR_ENABLED\' in os.environ:\n+    if "SUPERVISOR_ENABLED" in os.environ:\n         # We will ignore any command sent and always start in foreground mode\n         args = args[:2]\n         runzeo.main(args)\ndiff --git a/src/plone/recipe/zeoserver/pack.py b/src/plone/recipe/zeoserver/pack.py\nindex 4098112..218efbe 100644\n--- a/src/plone/recipe/zeoserver/pack.py\n+++ b/src/plone/recipe/zeoserver/pack.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from ZEO.ClientStorage import ClientStorage\n from ZEO.Exceptions import ClientDisconnected\n \n@@ -9,8 +8,18 @@\n import time\n \n \n-def _main(host, port, unix=None, days=1, username=None, password=None,\n-          realm=None, blob_dir=None, storage=\'1\', shared_blob_dir=True):\n+def _main(\n+    host,\n+    port,\n+    unix=None,\n+    days=1,\n+    username=None,\n+    password=None,\n+    realm=None,\n+    blob_dir=None,\n+    storage="1",\n+    shared_blob_dir=True,\n+):\n     if unix is not None:\n         addr = unix\n     else:\n@@ -27,17 +36,24 @@ def _main(host, port, unix=None, days=1, username=None, password=None,\n         # We do not want to wait until a zeoserver is up and running; it\n         # should already be running, so wait=False\n         cs = ClientStorage(\n-            addr, storage=storage, wait=False, read_only=True,\n-            username=username, password=password, realm=realm,\n-            blob_dir=blob_dir, shared_blob_dir=shared_blob_dir,\n+            addr,\n+            storage=storage,\n+            wait=False,\n+            read_only=True,\n+            username=username,\n+            password=password,\n+            realm=realm,\n+            blob_dir=blob_dir,\n+            shared_blob_dir=shared_blob_dir,\n         )\n         for i in range(60):\n             if cs.is_connected():\n                 break\n             time.sleep(1)\n         else:\n-            logger.error("Could not connect to zeoserver. Please make sure it "\n-                         "is running.")\n+            logger.error(\n+                "Could not connect to zeoserver. Please make sure it " "is running."\n+            )\n             cs.close()\n             sys.exit(1)\n         try:\n@@ -45,8 +61,9 @@ def _main(host, port, unix=None, days=1, username=None, password=None,\n             # => wait=True\n             cs.pack(wait=True, days=int(days))\n         except ClientDisconnected:\n-            logger.error("Disconnected from zeoserver. Please make sure it "\n-                         "is still running.")\n+            logger.error(\n+                "Disconnected from zeoserver. Please make sure it " "is still running."\n+            )\n             sys.exit(1)\n     finally:\n         if cs is not None:\n@@ -58,8 +75,7 @@ def main(*args, **kw):\n     old_level = root_logger.getEffectiveLevel()\n     logging.getLogger().setLevel(logging.WARNING)\n     handler = logging.StreamHandler(sys.stdout)\n-    handler.setFormatter(logging.Formatter(\n-        "%(name)s %(levelname)s %(message)s"))\n+    handler.setFormatter(logging.Formatter("%(name)s %(levelname)s %(message)s"))\n     logging.getLogger().addHandler(handler)\n     try:\n         _main(*args, **kw)\ndiff --git a/src/plone/recipe/zeoserver/recipe.py b/src/plone/recipe/zeoserver/recipe.py\nindex 7074006..24c4d83 100644\n--- a/src/plone/recipe/zeoserver/recipe.py\n+++ b/src/plone/recipe/zeoserver/recipe.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n import logging\n import os\n import shutil\n@@ -9,6 +8,7 @@\n \n try:\n     import zc.zrs\n+\n     HAS_ZRS = True\n except ImportError:\n     HAS_ZRS = False\n@@ -17,74 +17,77 @@\n curdir = os.path.dirname(__file__)\n \n \n-class Recipe(object):\n-\n+class Recipe:\n     def __init__(self, buildout, name, options):\n-        self.egg = zc.recipe.egg.Egg(buildout, options[\'recipe\'], options)\n+        self.egg = zc.recipe.egg.Egg(buildout, options["recipe"], options)\n         self.buildout, self.options, self.name = buildout, options, name\n \n-        options[\'location\'] = os.path.join(\n-            buildout[\'buildout\'][\'parts-directory\'],\n+        options["location"] = os.path.join(\n+            buildout["buildout"]["parts-directory"],\n             self.name,\n         )\n-        options[\'bin-directory\'] = buildout[\'buildout\'][\'bin-directory\']\n-        options[\'scripts\'] = \'\'  # suppress script generation.\n+        options["bin-directory"] = buildout["buildout"]["bin-directory"]\n+        options["scripts"] = ""  # suppress script generation.\n \n         # Relative path support for the generated scripts\n         relative_paths = options.get(\n-            \'relative-paths\',\n-            buildout[\'buildout\'].get(\'relative-paths\', \'false\'))\n-        if relative_paths == \'true\':\n-            options[\'buildout-directory\'] = buildout[\'buildout\'][\'directory\']\n-            self._relative_paths = options[\'buildout-directory\']\n+            "relative-paths", buildout["buildout"].get("relative-paths", "false")\n+        )\n+        if relative_paths == "true":\n+            options["buildout-directory"] = buildout["buildout"]["directory"]\n+            self._relative_paths = options["buildout-directory"]\n         else:\n-            self._relative_paths = \'\'\n-            assert relative_paths == \'false\'\n+            self._relative_paths = ""\n+            assert relative_paths == "false"\n \n     _ws_locations = None\n \n+    @property\n     def ws_locations(self):\n         if self._ws_locations is None:\n             self._ws_locations = [d.location for d in self.zodb_ws]\n         return self._ws_locations\n-    ws_locations = property(ws_locations)\n \n     def install(self):\n         _, self.zodb_ws = self.egg.working_set()\n \n         options = self.options\n-        location = options[\'location\']\n+        location = options["location"]\n \n         if os.path.exists(location):\n             shutil.rmtree(location)\n \n-        self.module_paths = self.options.get(\'extra-paths\', [])\n+        self.module_paths = self.options.get("extra-paths", [])\n         if self.module_paths:\n             # Filter out empty directories\n-            self.module_paths = [p for p in self.module_paths.split(\'\\n\') if p]\n+            self.module_paths = [p for p in self.module_paths.split("\\n") if p]\n \n         # this was taken from mkzeoinstance.py\n         import zdaemon\n+\n         zdaemon_home = os.path.split(zdaemon.__path__[0])[0]\n \n         import ZEO\n+\n         self.zodb_home = os.path.dirname(os.path.dirname(ZEO.__file__))\n         params = {\n             "package": "zeo",\n             "PACKAGE": "ZEO",\n             "zodb_home": self.zodb_home,\n-            \'zdaemon_home\': zdaemon_home,\n+            "zdaemon_home": zdaemon_home,\n             "instance_home": location,\n-            "address": \'8100\',  # will be overwritten later\n-            "python": options[\'executable\'],\n+            "address": "8100",  # will be overwritten later\n+            "python": options["executable"],\n         }\n         from zope.mkzeoinstance import ZEOInstanceBuilder\n+\n         ZEOInstanceBuilder().create(location, params)\n \n         try:\n             # Save the working set:\n-            open(os.path.join(location, \'etc\', \'.eggs\'), \'w\').write(\n-                \'\\n\'.join(self.ws_locations))\n+            open(os.path.join(location, "etc", ".eggs"), "w").write(\n+                "\\n".join(self.ws_locations)\n+            )\n \n             # Make a new zeo.conf based on options in buildout.cfg\n             self.build_zeo_conf()\n@@ -95,7 +98,7 @@ def install(self):\n             # Install extra scripts\n             self.install_scripts()\n \n-        except Exception:            # clean up\n+        except Exception:  # clean up\n             shutil.rmtree(location)\n             raise\n \n@@ -105,14 +108,14 @@ def update(self):\n         _, self.zodb_ws = self.egg.working_set()\n \n         options = self.options\n-        location = options[\'location\']\n+        location = options["location"]\n \n         if os.path.exists(location):\n             # See if we can stop. We need to see if the working set path\n             # has changed.\n-            saved_path = os.path.join(location, \'etc\', \'.eggs\')\n+            saved_path = os.path.join(location, "etc", ".eggs")\n             if os.path.isfile(saved_path):\n-                if (open(saved_path).read() != \'\\n\'.join(self.ws_locations)):\n+                if open(saved_path).read() != "\\n".join(self.ws_locations):\n                     # Something has changed. Blow away the instance.\n                     self.install()\n \n@@ -125,108 +128,109 @@ def update(self):\n         return location\n \n     def build_zeo_conf(self):\n-        """Create a zeo.conf file\n-        """\n+        """Create a zeo.conf file"""\n         options = self.options\n-        location = options[\'location\']\n+        location = options["location"]\n         instance_home = location\n \n-        base_dir = self.buildout[\'buildout\'][\'directory\']\n-        var_dir = options.get(\'var\', os.path.join(base_dir, \'var\'))\n+        base_dir = self.buildout["buildout"]["directory"]\n+        var_dir = options.get("var", os.path.join(base_dir, "var"))\n         if not os.path.exists(var_dir):\n             os.makedirs(var_dir)\n \n         self.pid_file = options.get(\n-            \'pid-file\',\n-            os.path.join(var_dir, self.name + \'.pid\'))\n+            "pid-file", os.path.join(var_dir, self.name + ".pid")\n+        )\n \n-        zeo_conf_path = options.get(\'zeo-conf\', None)\n+        zeo_conf_path = options.get("zeo-conf", None)\n         if zeo_conf_path is not None:\n             zeo_conf = "%%include %s" % os.path.abspath(zeo_conf_path)\n         else:\n-            zeo_address = options.get(\'zeo-address\', \'8100\')\n-            zeo_conf_additional = options.get(\'zeo-conf-additional\', \'\')\n-            storage_number = options.get(\'storage-number\', \'1\')\n+            zeo_address = options.get("zeo-address", "8100")\n+            zeo_conf_additional = options.get("zeo-conf-additional", "")\n+            storage_number = options.get("storage-number", "1")\n \n-            monitor_address = options.get(\'monitor-address\', \'\')\n+            monitor_address = options.get("monitor-address", "")\n             if monitor_address:\n-                monitor_address = \'monitor-address %s\' % monitor_address\n+                monitor_address = "monitor-address %s" % monitor_address\n \n-            effective_user = options.get(\'effective-user\', \'\')\n+            effective_user = options.get("effective-user", "")\n             if effective_user:\n-                effective_user = \'user %s\' % effective_user\n+                effective_user = "user %s" % effective_user\n \n-            invalidation_queue_size = options.get(\'invalidation-queue-size\',\n-                                                  \'100\')\n+            invalidation_queue_size = options.get("invalidation-queue-size", "100")\n \n-            socket_name = options.get(\'socket-name\',\n-                                      \'%s/zeo.zdsock\' % var_dir)\n+            socket_name = options.get("socket-name", "%s/zeo.zdsock" % var_dir)\n             socket_dir = os.path.dirname(socket_name)\n             if not os.path.exists(socket_dir):\n                 os.makedirs(socket_dir)\n \n-            z_log_name = os.path.sep.join((\'log\', self.name + \'.log\'))\n-            zeo_log_level = options.get(\'zeo-log-level\', \'info\')\n-            zeo_log_custom = options.get(\'zeo-log-custom\', None)\n+            z_log_name = os.path.sep.join(("log", self.name + ".log"))\n+            zeo_log_level = options.get("zeo-log-level", "info")\n+            zeo_log_custom = options.get("zeo-log-custom", None)\n \n             # if zeo-log is given, we use it to set the runner\n             # logfile value in any case\n-            z_log_filename = options.get(\'zeo-log\', z_log_name)\n+            z_log_filename = options.get("zeo-log", z_log_name)\n             z_log_filename = os.path.join(var_dir, z_log_filename)\n             z_log_dir = os.path.dirname(z_log_filename)\n             if not os.path.exists(z_log_dir):\n                 os.makedirs(z_log_dir)\n \n             # zeo-log-custom superseeds zeo-log\n-            logformat = options.get(\n-                \'zeo-log-format\', \'%(asctime)s %(message)s\')\n+            logformat = options.get("zeo-log-format", "%(asctime)s %(message)s")\n             if zeo_log_custom is None:\n-                zeo_log_rotate = \'\'\n-                zeo_log_max_size = options.get(\'zeo-log-max-size\', None)\n+                zeo_log_rotate = ""\n+                zeo_log_max_size = options.get("zeo-log-max-size", None)\n                 if zeo_log_max_size:\n-                    zeo_log_old_files = options.get(\'zeo-log-old-files\', 1)\n-                    zeo_log_rotate = \'\\n\'.join((\n-                        "max-size %s" % zeo_log_max_size,\n-                        "      old-files %s" % zeo_log_old_files))\n+                    zeo_log_old_files = options.get("zeo-log-old-files", 1)\n+                    zeo_log_rotate = "\\n".join(\n+                        (\n+                            "max-size %s" % zeo_log_max_size,\n+                            "      old-files %s" % zeo_log_old_files,\n+                        )\n+                    )\n                 z_log = z_log_file % {\n-                    \'filename\': z_log_filename,\n-                    \'logformat\': logformat,\n-                    \'zeo_log_rotate\': zeo_log_rotate}\n+                    "filename": z_log_filename,\n+                    "logformat": logformat,\n+                    "zeo_log_rotate": zeo_log_rotate,\n+                }\n             else:\n                 z_log = zeo_log_custom\n \n-            file_storage = os.path.sep.join((\'filestorage\', \'Data.fs\'))\n-            file_storage = options.get(\'file-storage\', file_storage)\n+            file_storage = os.path.sep.join(("filestorage", "Data.fs"))\n+            file_storage = options.get("file-storage", file_storage)\n             file_storage = os.path.join(var_dir, file_storage)\n             file_storage_dir = os.path.dirname(file_storage)\n             if not os.path.exists(file_storage_dir):\n                 os.makedirs(file_storage_dir)\n \n-            if options.get(\'authentication-database\', \'\'):\n-                authentication = authentication_template % \\\n-                    dict(database=options.get(\'authentication-database\'),\n-                         realm=options.get(\'authentication-realm\', \'ZEO\'))\n+            if options.get("authentication-database", ""):\n+                authentication = authentication_template % dict(\n+                    database=options.get("authentication-database"),\n+                    realm=options.get("authentication-realm", "ZEO"),\n+                )\n             else:\n-                authentication = \'\'\n+                authentication = ""\n \n-            blob_storage = options.get(\'blob-storage\', \'blobstorage\')\n+            blob_storage = options.get("blob-storage", "blobstorage")\n             if blob_storage:\n                 blob_storage = os.path.join(var_dir, blob_storage)\n                 storage_template = blob_storage_template\n             else:\n                 storage_template = file_storage_template\n \n-            effective_user = options.get(\'effective-user\', \'\')\n+            effective_user = options.get("effective-user", "")\n             if effective_user:\n-                effective_user = \'user %s\' % effective_user\n+                effective_user = "user %s" % effective_user\n \n-            pack_gc = options.get(\'pack-gc\', \'\')\n-            if pack_gc.lower() == \'false\':\n-                pack_gc = \'pack-gc false\'\n+            pack_gc = options.get("pack-gc", "")\n+            if pack_gc.lower() == "false":\n+                pack_gc = "pack-gc false"\n \n-            pack_keep_old = options.get(\'pack-keep-old\', \'\')\n-            if pack_keep_old.lower() == \'false\':\n-                pack_keep_old = \'pack-keep-old false\'\n+            pack_keep_old = options.get("pack-keep-old", "")\n+            if pack_keep_old.lower() == "false":\n+                pack_keep_old = "pack-keep-old false"\n \n             storage = storage_template % dict(\n                 storage_number=storage_number,\n@@ -237,23 +241,23 @@ def build_zeo_conf(self):\n             )\n \n             # ZRS config\n-            rfrom = options.get(\'replicate-from\')\n-            rto = options.get(\'replicate-to\')\n+            rfrom = options.get("replicate-from")\n+            rto = options.get("replicate-to")\n             if HAS_ZRS and (rfrom or rto):\n-                replicate = \'\'\n+                replicate = ""\n                 if rfrom:\n                     replicate += "\\nreplicate-from %s" % rfrom\n                 if rto:\n                     replicate += "\\nreplicate-to %s" % rto\n-                keep_alive = options.get(\'keep-alive-delay\', \'60\')\n+                keep_alive = options.get("keep-alive-delay", "60")\n                 storage = zrs_template % dict(\n                     storage=storage,\n                     keep_alive=keep_alive,\n                     replicate=replicate,\n-                    storage_number=storage_number\n+                    storage_number=storage_number,\n                 )\n \n-            read_only = options.get(\'read-only\', \'false\')\n+            read_only = options.get("read-only", "false")\n             zeo_conf = zeo_conf_template % dict(\n                 instance_home=instance_home,\n                 effective_user=effective_user,\n@@ -268,78 +272,74 @@ def build_zeo_conf(self):\n                 zeo_conf_additional=zeo_conf_additional,\n                 monitor_address=monitor_address,\n                 zeo_log_level=zeo_log_level,\n-                read_only=read_only\n+                read_only=read_only,\n             )\n \n-        zeo_conf_path = os.path.join(location, \'etc\', \'zeo.conf\')\n-        open(zeo_conf_path, \'w\').write(zeo_conf)\n+        zeo_conf_path = os.path.join(location, "etc", "zeo.conf")\n+        open(zeo_conf_path, "w").write(zeo_conf)\n \n     def patch_binaries(self):\n-        location = self.options[\'location\']\n+        location = self.options["location"]\n         # XXX We need to patch the windows specific batch scripts\n-        # and they need a different path seperator\n+        # and they need a different path separator\n         path = (\n-            os.path.pathsep.join(self.ws_locations) +\n-            os.path.pathsep +\n-            os.path.pathsep.join(self.module_paths)\n+            os.path.pathsep.join(self.ws_locations)\n+            + os.path.pathsep\n+            + os.path.pathsep.join(self.module_paths)\n         )\n-\n-        for script_name in (\'runzeo\', \'zeoctl\'):\n-            script_path = os.path.join(location, \'bin\', script_name)\n+        for script_name in ("runzeo", "zeoctl"):\n+            script_path = os.path.join(location, "bin", script_name)\n             script = open(script_path).read()\n-            script = script.replace(\'PYTHONPATH="$ZODB3_HOME"\',\n-                                    \'PYTHONPATH="%s"\' % path)\n-            f = open(script_path, \'w\')\n+            script = script.replace(\n+                \'PYTHONPATH="$ZODB3_HOME"\', \'PYTHONPATH="%s"\' % path\n+            )\n+            f = open(script_path, "w")\n             f.write(script)\n             f.close()\n \n     def install_scripts(self):\n         options = self.options\n-        location = options[\'location\']\n+        location = options["location"]\n \n-        self.zeo_conf = options.get(\'zeo-conf\', None)\n+        self.zeo_conf = options.get("zeo-conf", None)\n         if self.zeo_conf is None:\n-            self.zeo_conf = os.path.join(location, \'etc\', \'zeo.conf\')\n+            self.zeo_conf = os.path.join(location, "etc", "zeo.conf")\n \n-        _, ws = self.egg.working_set([\'plone.recipe.zeoserver\'])\n+        _, ws = self.egg.working_set(["plone.recipe.zeoserver"])\n \n-        path = (\n-            os.path.pathsep.join(self.ws_locations) +\n-            os.path.pathsep +\n-            os.path.pathsep.join(self.module_paths)\n-        )\n-        initialization = """\n-        import os; os.environ[\'PYTHONPATH\'] = %r\n-        """.strip() % path\n         zc.buildout.easy_install.scripts(\n-            [(self.name, \'plone.recipe.zeoserver.ctl\', \'main\')],\n-            ws, options[\'executable\'], options[\'bin-directory\'],\n-            initialization=\'\\n\'.join(\n-                [initialization, options.get(\'initialization\', \'\'), \'\']),\n-            arguments=(\'\\n        ["-C", %r]\'\n-                       \'\\n        + sys.argv[1:]\'\n-                       % self.zeo_conf),\n+            [(self.name, "plone.recipe.zeoserver.ctl", "main")],\n+            ws,\n+            options["executable"],\n+            options["bin-directory"],\n+            initialization=options.get("initialization", ""),\n+            arguments=(\n+                \'\\n        ["-C", %r]\' "\\n        + sys.argv[1:]" % self.zeo_conf\n+            ),\n             extra_paths=self.module_paths,\n-            relative_paths=self._relative_paths)\n+            relative_paths=self._relative_paths,\n+        )\n \n         # zeopack.py\n-        zeopack = options.get(\'zeopack\', None)\n-        zeopack_script_name = options.get(\'zeopack-script-name\', \'zeopack\')\n+        zeopack = options.get("zeopack", None)\n+        zeopack_script_name = options.get("zeopack-script-name", "zeopack")\n         zeopack_scripts = dict(zeopack=zeopack_script_name)\n         if zeopack is not None:\n             directory, filename = os.path.split(zeopack)\n             if zeopack and os.path.exists(zeopack):\n                 zc.buildout.easy_install.scripts(\n-                    [(\'zeopack\', os.path.splitext(filename)[0], \'main\')],\n-                    ws, options[\'executable\'], options[\'bin-directory\'],\n+                    [("zeopack", os.path.splitext(filename)[0], "main")],\n+                    ws,\n+                    options["executable"],\n+                    options["bin-directory"],\n                     scripts=zeopack_scripts,\n                     extra_paths=ws + [directory] + self.module_paths,\n                     relative_paths=self._relative_paths,\n                 )\n         else:\n-            host = port = socket_path = \'\'\n-            zeo_address = options.get(\'zeo-address\', \'8100\')\n-            parts = zeo_address.split(\':\')\n+            host = port = socket_path = ""\n+            zeo_address = options.get("zeo-address", "8100")\n+            parts = zeo_address.split(":")\n \n             if len(parts) == 1:\n                 try:\n@@ -351,145 +351,154 @@ def install_scripts(self):\n                     # a path to a Unix socket file\n                     socket_path = zeo_address\n                 else:\n-                    host = \'127.0.0.1\'\n+                    host = "127.0.0.1"\n                     port = zeo_address\n             else:\n                 host, port = parts\n \n-            username = options.get(\'pack-user\', None)\n-            password = options.get(\'pack-password\', None)\n+            username = options.get("pack-user", None)\n+            password = options.get("pack-password", None)\n             if username is not None:\n-                realm = options.get(\'authentication-realm\', \'ZEO\')\n+                realm = options.get("authentication-realm", "ZEO")\n             else:\n                 realm = None\n-            storage = options.get(\'storage-number\', \'1\')\n+            storage = options.get("storage-number", "1")\n \n             arg_list = [\n-                \'host\', \'port\', \'unix\', \'days\',\n-                \'username\', \'password\', \'realm\', \'blob_dir\', \'storage\',\n+                "host",\n+                "port",\n+                "unix",\n+                "days",\n+                "username",\n+                "password",\n+                "realm",\n+                "blob_dir",\n+                "storage",\n             ]\n             arguments = dict(\n                 address=zeo_address,\n                 host=host,\n                 port=port,\n                 unix=socket_path,\n-                days=options.get(\'pack-days\', 1),\n+                days=options.get("pack-days", 1),\n                 username=username,\n                 password=password,\n                 realm=realm,\n                 storage=storage,\n-                blob_dir=options.get(\'blob-storage\', None),\n+                blob_dir=options.get("blob-storage", None),\n             )\n-            arguments_info = \'\'\n+            arguments_info = ""\n             for k, v in arguments.items():\n                 if not v:\n-                    arguments_info += \'%s = None\\n\' % k\n+                    arguments_info += "%s = None\\n" % k\n                 else:\n-                    arguments_info += \'%s = "%s"\\n\' % (k, v)\n-\n-            arguments_info += ("import getopt; opts = "\n-                               "getopt.getopt(sys.argv[1:], \'S:B:D:W1\')[0];\\n"\n-                               "opts = dict(opts)\\n"\n-                               "storage = opts.get(\'-S\') and "\n-                               "opts[\'-S\'] or storage\\n"\n-                               "blob_dir = opts.get(\'-B\') and "\n-                               "opts[\'-B\'] or blob_dir\\n"\n-                               "days = opts.get(\'-D\') and "\n-                               "opts[\'-D\'] or days\\n"\n-                               )\n+                    arguments_info += f\'{k} = "{v}"\\n\'\n+\n+            arguments_info += (\n+                "import getopt; opts = "\n+                "getopt.getopt(sys.argv[1:], \'S:B:D:W1\')[0];\\n"\n+                "opts = dict(opts)\\n"\n+                "storage = opts.get(\'-S\') and "\n+                "opts[\'-S\'] or storage\\n"\n+                "blob_dir = opts.get(\'-B\') and "\n+                "opts[\'-B\'] or blob_dir\\n"\n+                "days = opts.get(\'-D\') and "\n+                "opts[\'-D\'] or days\\n"\n+            )\n \n             # Make sure the recipe itself and its dependencies are on the path\n-            extra_paths = [\n-                ws.by_key[options[\'recipe\'].replace(\'[zrs]\', \'\')].location]\n+            extra_paths = [ws.by_key[options["recipe"].replace("[zrs]", "")].location]\n             try:\n-                extra_paths.append(ws.by_key[\'zc.buildout\'].location)\n+                extra_paths.append(ws.by_key["zc.buildout"].location)\n             except KeyError:\n                 # XXX Buildout installed with Pip?\n                 pass\n-            extra_paths.append(ws.by_key[\'zc.recipe.egg\'].location)\n+            extra_paths.append(ws.by_key["zc.recipe.egg"].location)\n             zc.buildout.easy_install.scripts(\n-                [(\'zeopack\', \'plone.recipe.zeoserver.pack\', \'main\')],\n-                self.zodb_ws, options[\'executable\'], options[\'bin-directory\'],\n+                [("zeopack", "plone.recipe.zeoserver.pack", "main")],\n+                self.zodb_ws,\n+                options["executable"],\n+                options["bin-directory"],\n                 scripts=zeopack_scripts,\n                 initialization=arguments_info,\n-                arguments=\', \'.join(arg_list),\n+                arguments=", ".join(arg_list),\n                 relative_paths=self._relative_paths,\n                 extra_paths=extra_paths + self.module_paths,\n             )\n \n         # The backup script, pointing to repozo.py\n-        repozo = options.get(\'repozo\', None)\n-        repozo_script_name = options.get(\'repozo-script-name\', \'repozo\')\n+        repozo = options.get("repozo", None)\n+        repozo_script_name = options.get("repozo-script-name", "repozo")\n         repozo_scripts = dict(repozo=repozo_script_name)\n         if repozo is None:\n-            repozo = \'ZODB.scripts.repozo\'\n+            repozo = "ZODB.scripts.repozo"\n             extra_paths = []\n         else:\n             if not os.path.exists(repozo):\n-                raise AssertionError(\n-                    \'Custom repozo script not found: %s\' % repozo)\n+                raise AssertionError("Custom repozo script not found: %s" % repozo)\n             directory, filename = os.path.split(repozo)\n             repozo = os.path.splitext(filename)[0]\n             extra_paths = [directory]\n         zc.buildout.easy_install.scripts(\n-            [(\'repozo\', repozo, \'main\')],\n-            self.zodb_ws, options[\'executable\'], options[\'bin-directory\'],\n+            [("repozo", repozo, "main")],\n+            self.zodb_ws,\n+            options["executable"],\n+            options["bin-directory"],\n             scripts=repozo_scripts,\n             extra_paths=extra_paths + self.module_paths,\n             relative_paths=self._relative_paths,\n         )\n \n-        if sys.platform == \'win32\':\n+        if sys.platform == "win32":\n             self.install_win32_scripts()\n \n     def install_win32_scripts(self):\n         path = self.ws_locations + self.module_paths\n-        location = self.options[\'location\']\n+        location = self.options["location"]\n \n-        arguments = {\'PYTHON\': self.options[\'executable\'],\n-                     \'zodb_home\': self.zodb_home,\n-                     \'INSTANCE_HOME\': location,\n-                     \'PYTHONPATH\': os.path.pathsep.join(path),\n-                     \'PACKAGE\': \'zeo\',\n-                     \'PID_FILENAME\': self.pid_file}\n+        arguments = {\n+            "PYTHON": self.options["executable"],\n+            "zodb_home": self.zodb_home,\n+            "INSTANCE_HOME": location,\n+            "PYTHONPATH": os.path.pathsep.join(path),\n+            "PACKAGE": "zeo",\n+            "PID_FILENAME": self.pid_file,\n+        }\n \n         # runzeo.bat\n-        runzeo_filename = \'%s_runzeo.bat\' % self.name\n-        runzeo = open(join(curdir, \'runzeo.bat\')).read()\n-        self._write_file(os.path.join(self.options[\'bin-directory\'],\n-                                      runzeo_filename), runzeo % arguments)\n+        runzeo_filename = "%s_runzeo.bat" % self.name\n+        runzeo = open(join(curdir, "runzeo.bat")).read()\n+        self._write_file(\n+            os.path.join(self.options["bin-directory"], runzeo_filename),\n+            runzeo % arguments,\n+        )\n \n         # zeoservice.py\n-        zeo_filename = \'%s_service\' % self.name\n-        zeo_service = open(join(curdir, \'zeoservice.py.in\')).read()\n-        zeo_file = os.path.join(self.options[\'bin-directory\'],\n-                                \'%s.py\' % zeo_filename)\n+        zeo_filename = "%s_service" % self.name\n+        zeo_service = open(join(curdir, "zeoservice.py.in")).read()\n+        zeo_file = os.path.join(self.options["bin-directory"], "%s.py" % zeo_filename)\n         self._write_file(zeo_file, zeo_service % arguments)\n \n-        initialization = """\n-        import os; os.environ[\'PYTHONPATH\'] = %r\n-        """.strip() % os.path.pathsep.join(path)\n-\n         zc.buildout.easy_install.scripts(\n-            [(zeo_filename, zeo_filename, \'main\')],\n+            [(zeo_filename, zeo_filename, "main")],\n             self.zodb_ws,\n-            self.options[\'executable\'],\n-            self.options[\'bin-directory\'],\n+            self.options["executable"],\n+            self.options["bin-directory"],\n             extra_paths=path,\n             relative_paths=self._relative_paths,\n-            initialization=initialization,\n+            initialization=self.options.get("initialization", ""),\n         )\n \n     def _write_file(self, path, content):\n-        logger = logging.getLogger(\'zc.buildout.easy_install\')\n-        f = open(path, \'w\')\n+        logger = logging.getLogger("zc.buildout.easy_install")\n+        f = open(path, "w")\n         try:\n             f.write(content)\n         finally:\n             f.close()\n-        logger.debug(\'Wrote file %s\' % path)\n+        logger.debug("Wrote file %s" % path)\n         os.chmod(path, 0o755)\n-        logger.warning(\'Changed mode for %s to 755\' % path)\n+        logger.warning("Changed mode for %s to 755" % path)\n \n \n # the template used to build a regular file storage entry for zeo.conf\ndiff --git a/src/plone/recipe/zeoserver/tests/__init__.py b/src/plone/recipe/zeoserver/tests/__init__.py\nindex ec51c5a..792d600 100644\n--- a/src/plone/recipe/zeoserver/tests/__init__.py\n+++ b/src/plone/recipe/zeoserver/tests/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/src/plone/recipe/zeoserver/tests/test_docs.py b/src/plone/recipe/zeoserver/tests/test_docs.py\nindex 84dba40..8b36292 100644\n--- a/src/plone/recipe/zeoserver/tests/test_docs.py\n+++ b/src/plone/recipe/zeoserver/tests/test_docs.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from zc.buildout.testing import buildoutSetUp\n from zc.buildout.testing import buildoutTearDown\n from zc.buildout.testing import install\n@@ -14,22 +12,21 @@\n \n def setUp(test):\n     buildoutSetUp(test)\n-    install_develop(\'plone.recipe.zeoserver\', test)\n-    install(\'zc.recipe.egg\', test)\n+    install_develop("plone.recipe.zeoserver", test)\n+    install("zc.recipe.egg", test)\n     if sys.platform[:3].lower() == "win":\n-        install(\'nt_svcutils\', test)\n-    install(\'zope.mkzeoinstance\', test)\n-    install(\'ZopeUndo\', test)\n-    install(\'zc.zrs\', test)\n-    install(\'Automat\', test)\n-    install(\'incremental\', test)\n-    install(\'constantly\', test)\n-    install(\'attrs\', test)\n-    install(\'Twisted\', test)\n-    install(\'hyperlink\', test)\n-    install(\'idna\', test)\n-    install(\'PyHamcrest\', test)\n-    dependencies = pkg_resources.working_set.require(\'ZODB\')\n+        install("nt_svcutils", test)\n+    install("zope.mkzeoinstance", test)\n+    install("ZopeUndo", test)\n+    install("zc.zrs", test)\n+    install("Automat", test)\n+    install("incremental", test)\n+    install("constantly", test)\n+    install("attrs", test)\n+    install("Twisted", test)\n+    install("hyperlink", test)\n+    install("idna", test)\n+    dependencies = pkg_resources.working_set.require("ZODB")\n     for dep in dependencies:\n         try:\n             install(dep.project_name, test)\n@@ -41,15 +38,18 @@ def setUp(test):\n \n def tearDown(test):\n     buildoutTearDown(test)\n-    sample_buildout = test.globs[\'sample_buildout\']\n+    sample_buildout = test.globs["sample_buildout"]\n     shutil.rmtree(sample_buildout, ignore_errors=True)\n \n \n def test_suite():\n     suite = []\n-    flags = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)\n+    flags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n \n-    suite.append(doctest.DocFileSuite(\'zeoserver.txt\', optionflags=flags,\n-                                      setUp=setUp, tearDown=buildoutTearDown))\n+    suite.append(\n+        doctest.DocFileSuite(\n+            "zeoserver.txt", optionflags=flags, setUp=setUp, tearDown=buildoutTearDown\n+        )\n+    )\n \n     return unittest.TestSuite(suite)\ndiff --git a/src/plone/recipe/zeoserver/tests/zeoserver.txt b/src/plone/recipe/zeoserver/tests/zeoserver.txt\nindex 080a4a8..880e2a1 100644\n--- a/src/plone/recipe/zeoserver/tests/zeoserver.txt\n+++ b/src/plone/recipe/zeoserver/tests/zeoserver.txt\n@@ -632,3 +632,36 @@ The main script should have the initialization.\n     >>> with open(join(\'bin\', \'zeo\' + suffix)) as f:\n     ...     \'foo = 1\' in f.read()\n     True\n+\n+Additinal eggs\n+==============\n+\n+The recipe support additional eggs.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = zeo\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [zeo]\n+    ... recipe = plone.recipe.zeoserver\n+    ... zeo-address = /path/to/zeo.socket\n+    ... eggs = ZEO\n+    ... \'\'\' % globals())\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling zeo.\n+    Installing zeo.\n+    ...\n+\n+The main script should have the initialization.\n+\n+    >>> breakpoint()\n+    >>> if WINDOWS:\n+    ...     suffix = \'-script.py\'\n+    ... else:\n+    ...     suffix = \'\'\n+\n+    >>> with open(join(\'bin\', \'zeo\' + suffix)) as f:\n+    ...     \'foo = 1\' in f.read()\n+    True\ndiff --git a/tox.ini b/tox.ini\nindex d7c0507..c7235fd 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,38 +1,76 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n envlist =\n-    py27,\n-    py36,\n-    py37,\n-    py38,\n-    flake8,\n-    coverage\n-\n-skip_missing_interpreters = False\n+    format\n+    lint\n+    test\n \n [testenv]\n-usedevelop = true\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies\n+skip_install = true\n+deps =\n+    build\n+    z3c.dependencychecker==2.11\n+commands =\n+    python -m build --sdist --no-isolation\n+    dependencychecker\n+\n+[testenv:dependencies-graph]\n+description = generate a graph out of the package\'s dependencies\n+deps =\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n commands =\n-    zope-testrunner --test-path=src --all {posargs:-vc}\n-extras = zrs\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+use_develop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n deps =\n     zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir}/src -s plone.recipe.zeoserver {posargs}\n+extras =\n+    zrs\n \n [testenv:coverage]\n-basepython = python3.6\n+use_develop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n deps =\n-    zope.testrunner\n     coverage\n-setenv =\n-    COVERAGE_HOME={toxinidir}\n-    COVERAGE_PROCESS_START={toxinidir}/.coveragerc\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    coverage run -m zope.testrunner --test-path=src {posargs:-vc}\n-    coverage combine\n-    coverage html\n-    coverage report --fail-under=62\n-\n-[testenv:flake8]\n-basepython = python3.6\n-skip_install = true\n-deps = flake8\n-commands = flake8 --doctests src setup.py\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir}/src -s plone.recipe.zeoserver {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    zrs\n'

Repository: plone.recipe.zeoserver


Branch: refs/heads/master
Date: 2023-04-27T14:22:14+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.recipe.zeoserver/commit/81897258e70d7f038659794bcb442de3ee043fd9

Fix missing dependecies when defining additional eggs. Distinct PYTHONPATH locations.

Files changed:
M src/plone/recipe/zeoserver/recipe.py

b'diff --git a/src/plone/recipe/zeoserver/recipe.py b/src/plone/recipe/zeoserver/recipe.py\nindex 24c4d83..e187139 100644\n--- a/src/plone/recipe/zeoserver/recipe.py\n+++ b/src/plone/recipe/zeoserver/recipe.py\n@@ -22,6 +22,10 @@ def __init__(self, buildout, name, options):\n         self.egg = zc.recipe.egg.Egg(buildout, options["recipe"], options)\n         self.buildout, self.options, self.name = buildout, options, name\n \n+        if self.options.get("eggs") and options["recipe"] not in self.options["eggs"]:\n+            # make sure we do not loose our own dependencies if additional eggs are provided\n+            self.options["eggs"] += "\\n%s" % options["recipe"]\n+\n         options["location"] = os.path.join(\n             buildout["buildout"]["parts-directory"],\n             self.name,\n@@ -45,7 +49,7 @@ def __init__(self, buildout, name, options):\n     @property\n     def ws_locations(self):\n         if self._ws_locations is None:\n-            self._ws_locations = [d.location for d in self.zodb_ws]\n+            self._ws_locations = {d.location for d in self.zodb_ws}\n         return self._ws_locations\n \n     def install(self):\n'

Repository: plone.recipe.zeoserver


Branch: refs/heads/master
Date: 2023-04-27T16:14:47+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.recipe.zeoserver/commit/4553e514c41c68980d53b9d81d53d64b31c2d019

changenote

Files changed:
A news/45.bugfix

b'diff --git a/news/45.bugfix b/news/45.bugfix\nnew file mode 100644\nindex 0000000..a80d508\n--- /dev/null\n+++ b/news/45.bugfix\n@@ -0,0 +1,2 @@\n+Fix lost dependencies when defining additional `eggs` in buildout part.\n+[petschki]\n'

Repository: plone.recipe.zeoserver


Branch: refs/heads/master
Date: 2023-04-27T16:14:55+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.recipe.zeoserver/commit/654a2df5d17e498924133b3b4c1058cf08cc8a5b

define python_requires

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex e11de4f..2bd2eb4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -43,6 +43,7 @@\n         "Programming Language :: Python :: Implementation",\n         "Programming Language :: Python :: Implementation :: CPython",\n     ],\n+    python_requires=">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",\n     packages=find_packages("src"),\n     include_package_data=True,\n     package_dir={"": "src"},\n'

Repository: plone.recipe.zeoserver


Branch: refs/heads/master
Date: 2023-04-27T16:15:04+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.recipe.zeoserver/commit/e0989247d985cf0dc1d1e75c2989be4eecc24a15

add test

Files changed:
M src/plone/recipe/zeoserver/tests/zeoserver.txt

b"diff --git a/src/plone/recipe/zeoserver/tests/zeoserver.txt b/src/plone/recipe/zeoserver/tests/zeoserver.txt\nindex 880e2a1..c78d019 100644\n--- a/src/plone/recipe/zeoserver/tests/zeoserver.txt\n+++ b/src/plone/recipe/zeoserver/tests/zeoserver.txt\n@@ -633,8 +633,8 @@ The main script should have the initialization.\n     ...     'foo = 1' in f.read()\n     True\n \n-Additinal eggs\n-==============\n+Additional eggs\n+===============\n \n The recipe support additional eggs.\n \n@@ -656,12 +656,11 @@ The recipe support additional eggs.\n \n The main script should have the initialization.\n \n-    >>> breakpoint()\n     >>> if WINDOWS:\n     ...     suffix = '-script.py'\n     ... else:\n     ...     suffix = ''\n \n-    >>> with open(join('bin', 'zeo' + suffix)) as f:\n-    ...     'foo = 1' in f.read()\n+    >>> with open(join('parts', 'zeo', 'bin', 'zeoctl' + suffix)) as f:\n+    ...     'plone.recipe.zeoserver' in f.read()\n     True\n"

Repository: plone.recipe.zeoserver


Branch: refs/heads/master
Date: 2023-04-27T16:16:07+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.recipe.zeoserver/commit/04b6f8d3505e78568e7f4205c1002adb07e2a0c7

remove unused

Files changed:
D buildout.cfg

b'diff --git a/buildout.cfg b/buildout.cfg\ndeleted file mode 100644\nindex 9890e2b..0000000\n--- a/buildout.cfg\n+++ /dev/null\n@@ -1,11 +0,0 @@\n-[buildout]\n-develop = .\n-parts = test zeo\n-\n-[test]\n-recipe = zc.recipe.testrunner\n-eggs =\n-    plone.recipe.zeoserver[zrs]\n-\n-[zeo]\n-recipe = plone.recipe.zeoserver\n'

Repository: plone.recipe.zeoserver


Branch: refs/heads/master
Date: 2023-04-28T08:04:27+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.recipe.zeoserver/commit/9f39cd8c1797b18ca1579168da06a106fb6728b7

update setup.py, bump major version -&gt; py3 support only.

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 2bd2eb4..c93b2f6 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,15 +1,8 @@\n from setuptools import find_packages\n from setuptools import setup\n \n-import sys\n \n-\n-version = "2.0.4.dev0"\n-\n-additional_install_requires = []\n-\n-if sys.platform[:3].lower() == "win":\n-    additional_install_requires += ["nt_svcutils"]\n+version = "3.0.0.dev0"\n \n \n setup(\n@@ -28,22 +21,18 @@\n         "License :: OSI Approved :: Zope Public License",\n         "Framework :: Buildout",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n-        "Framework :: Plone :: Core",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Zope",\n-        "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n         "Programming Language :: Python :: Implementation",\n         "Programming Language :: Python :: Implementation :: CPython",\n     ],\n-    python_requires=">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",\n+    python_requires=">=3.8",\n     packages=find_packages("src"),\n     include_package_data=True,\n     package_dir={"": "src"},\n@@ -56,8 +45,8 @@\n         "ZODB >= 5",\n         "zope.mkzeoinstance >=4.1",\n         "ZopeUndo",\n-    ]\n-    + additional_install_requires,\n+        "nt_svcutils; platform_system == \'Windows\'",\n+    ],\n     extras_require={"zrs": ["zc.zrs"]},\n     zip_safe=False,\n     entry_points={\n'

Repository: plone.recipe.zeoserver


Branch: refs/heads/master
Date: 2023-04-28T08:04:27+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.recipe.zeoserver/commit/559c14906467c350f2686d676c2c16466620ef7a

add version information in README

Files changed:
M README.rst

b'diff --git a/README.rst b/README.rst\nindex cdda1f7..ddf8222 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -239,6 +239,13 @@ zeopack\n   "#" is the number of days to keep.\n \n \n+Version Information\n+-------------------\n+\n+- 3.x -> Plone 6, Zope 5, Python 3.8+\n+- 2.x -> Plone 5, Zope 4, Python 2.7\n+\n+\n Reporting bugs or asking questions\n ----------------------------------\n \n'

Repository: plone.recipe.zeoserver


Branch: refs/heads/master
Date: 2023-04-28T08:04:27+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.recipe.zeoserver/commit/4e3197f869a7cb526efb7c4de60083ed3192819e

update changenote

Files changed:
M news/45.bugfix

b'diff --git a/news/45.bugfix b/news/45.bugfix\nindex a80d508..b1e692a 100644\n--- a/news/45.bugfix\n+++ b/news/45.bugfix\n@@ -1,2 +1,3 @@\n-Fix lost dependencies when defining additional `eggs` in buildout part.\n+- Fix lost dependencies when defining additional `eggs` in buildout part.\n+- Update Codebase to python 3.8+\n [petschki]\n'

Repository: plone.recipe.zeoserver


Branch: refs/heads/master
Date: 2023-04-28T08:19:15+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.recipe.zeoserver/commit/8e950b66f06f168b922895fab93c5d9b488ff56f

test different os

Files changed:
A .github/workflows/tests.yml

b'diff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nnew file mode 100644\nindex 0000000..c6b3405\n--- /dev/null\n+++ b/.github/workflows/tests.yml\n@@ -0,0 +1,47 @@\n+name: tests\n+\n+on:\n+  push:\n+    branches:\n+      - master\n+  pull_request:\n+    branches:\n+      - master\n+  workflow_dispatch:\n+\n+jobs:\n+  build:\n+    strategy:\n+      # We want to see all failures:\n+      fail-fast: false\n+      matrix:\n+        os:\n+        - ["ubuntu", "ubuntu-20.04"]\n+        - ["windows", "windows-latest"]\n+        - ["macos", "macos-11"]\n+        config:\n+        # [Python version, tox env]\n+        - ["3.9",   "test"]\n+\n+    runs-on: ${{ matrix.os[1] }}\n+    name: ${{ matrix.os[0] }}-${{ matrix.config[1] }}\n+    steps:\n+    - uses: actions/checkout@v3\n+    - name: Set up Python\n+      uses: actions/setup-python@v4\n+      with:\n+        python-version: ${{ matrix.config[0] }}\n+    - name: Pip cache\n+      uses: actions/cache@v3\n+      with:\n+        path: ~/.cache/pip\n+        key: ${{ runner.os }}-pip-${{ matrix.config[0] }}-${{ hashFiles(\'setup.*\', \'tox.ini\') }}\n+        restore-keys: |\n+          ${{ runner.os }}-pip-${{ matrix.config[0] }}-\n+          ${{ runner.os }}-pip-\n+    - name: Install dependencies\n+      run: |\n+        python -m pip install --upgrade pip\n+        pip install tox\n+    - name: Test\n+      run: tox -e ${{ matrix.config[1] }}\n'

Repository: plone.recipe.zeoserver


Branch: refs/heads/master
Date: 2023-04-28T08:21:58+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.recipe.zeoserver/commit/c75981765f5c7ae05ca57354e6c3cbe1de896182

fix for windows

Files changed:
M src/plone/recipe/zeoserver/recipe.py

b'diff --git a/src/plone/recipe/zeoserver/recipe.py b/src/plone/recipe/zeoserver/recipe.py\nindex e187139..66192bc 100644\n--- a/src/plone/recipe/zeoserver/recipe.py\n+++ b/src/plone/recipe/zeoserver/recipe.py\n@@ -457,7 +457,7 @@ def install_scripts(self):\n             self.install_win32_scripts()\n \n     def install_win32_scripts(self):\n-        path = self.ws_locations + self.module_paths\n+        path = list(self.ws_locations) + self.module_paths\n         location = self.options["location"]\n \n         arguments = {\n'

Repository: plone.recipe.zeoserver


Branch: refs/heads/master
Date: 2023-04-28T10:07:12+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.recipe.zeoserver/commit/f4df9be72e79619963e9afd4df627e017e35619b

doctest fix

Files changed:
M .github/workflows/tests.yml
M src/plone/recipe/zeoserver/tests/zeoserver.txt

b'diff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nindex c6b3405..5f29c12 100644\n--- a/.github/workflows/tests.yml\n+++ b/.github/workflows/tests.yml\n@@ -1,4 +1,4 @@\n-name: tests\n+name: Windows and MacOS\n \n on:\n   push:\n@@ -16,7 +16,6 @@ jobs:\n       fail-fast: false\n       matrix:\n         os:\n-        - ["ubuntu", "ubuntu-20.04"]\n         - ["windows", "windows-latest"]\n         - ["macos", "macos-11"]\n         config:\n@@ -27,10 +26,12 @@ jobs:\n     name: ${{ matrix.os[0] }}-${{ matrix.config[1] }}\n     steps:\n     - uses: actions/checkout@v3\n+\n     - name: Set up Python\n       uses: actions/setup-python@v4\n       with:\n         python-version: ${{ matrix.config[0] }}\n+\n     - name: Pip cache\n       uses: actions/cache@v3\n       with:\n@@ -39,9 +40,12 @@ jobs:\n         restore-keys: |\n           ${{ runner.os }}-pip-${{ matrix.config[0] }}-\n           ${{ runner.os }}-pip-\n+\n     - name: Install dependencies\n       run: |\n         python -m pip install --upgrade pip\n         pip install tox\n+\n     - name: Test\n-      run: tox -e ${{ matrix.config[1] }}\n+      run: |\n+        tox -e ${{ matrix.config[1] }}\ndiff --git a/src/plone/recipe/zeoserver/tests/zeoserver.txt b/src/plone/recipe/zeoserver/tests/zeoserver.txt\nindex c78d019..e9ad7bd 100644\n--- a/src/plone/recipe/zeoserver/tests/zeoserver.txt\n+++ b/src/plone/recipe/zeoserver/tests/zeoserver.txt\n@@ -272,7 +272,8 @@ We should have a zeo.conf with log file rotation enabled::\n \n     >>> zeo = os.path.join(sample_buildout, \'parts\', \'zeo\')\n     >>> with open(os.path.join(zeo, \'etc\', \'zeo.conf\')) as f:\n-    ...     print(f.read())\n+    ...     output = f.read()\n+    >>> print(output.replace(\'\\\\\', \'/\'))\n     %define INSTANCE ...\n     ...\n     <eventlog>\n@@ -473,8 +474,6 @@ be different and correspond as the buildout specified::\n \n     >>> zeopack_scripts = (\'first-zeopack\', \'second-zeopack\')\n     >>> zeopack_paths = [os.path.join(sample_buildout, \'bin\', script) for script in zeopack_scripts]\n-    >>> if WINDOWS:\n-    ...     zeopack_paths =  [zeopack + \'-script.py\' for zeopack in zeopacks]\n     >>> with open(zeopack_paths[0], \'r\') as f:\n     ...     first_zeopack = f.read()\n     >>> with open(zeopack_paths[1], \'r\') as f:\n'

Repository: plone.recipe.zeoserver


Branch: refs/heads/master
Date: 2023-05-02T13:51:29+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.recipe.zeoserver/commit/ee3fd4e19b9863b6d8fc775bc4f316c825e4ed6f

remove obsolete dependency

Files changed:
M setup.py
M src/plone/recipe/zeoserver/tests/test_docs.py

b'diff --git a/setup.py b/setup.py\nindex c93b2f6..a8a8def 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -45,7 +45,6 @@\n         "ZODB >= 5",\n         "zope.mkzeoinstance >=4.1",\n         "ZopeUndo",\n-        "nt_svcutils; platform_system == \'Windows\'",\n     ],\n     extras_require={"zrs": ["zc.zrs"]},\n     zip_safe=False,\ndiff --git a/src/plone/recipe/zeoserver/tests/test_docs.py b/src/plone/recipe/zeoserver/tests/test_docs.py\nindex 8b36292..e0a96bc 100644\n--- a/src/plone/recipe/zeoserver/tests/test_docs.py\n+++ b/src/plone/recipe/zeoserver/tests/test_docs.py\n@@ -14,8 +14,6 @@ def setUp(test):\n     buildoutSetUp(test)\n     install_develop("plone.recipe.zeoserver", test)\n     install("zc.recipe.egg", test)\n-    if sys.platform[:3].lower() == "win":\n-        install("nt_svcutils", test)\n     install("zope.mkzeoinstance", test)\n     install("ZopeUndo", test)\n     install("zc.zrs", test)\n'

Repository: plone.recipe.zeoserver


Branch: refs/heads/master
Date: 2023-05-02T13:54:33+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.recipe.zeoserver/commit/12b1c23c1b2642ff98dc4b5e4b232daa4b397176

fix window scrip suffix

Files changed:
M src/plone/recipe/zeoserver/tests/zeoserver.txt

b"diff --git a/src/plone/recipe/zeoserver/tests/zeoserver.txt b/src/plone/recipe/zeoserver/tests/zeoserver.txt\nindex e9ad7bd..52d2d23 100644\n--- a/src/plone/recipe/zeoserver/tests/zeoserver.txt\n+++ b/src/plone/recipe/zeoserver/tests/zeoserver.txt\n@@ -474,6 +474,8 @@ be different and correspond as the buildout specified::\n \n     >>> zeopack_scripts = ('first-zeopack', 'second-zeopack')\n     >>> zeopack_paths = [os.path.join(sample_buildout, 'bin', script) for script in zeopack_scripts]\n+    >>> if WINDOWS:\n+    ...     zeopack_paths =  [zeopack + '-script.py' for zeopack in zeopack_paths]\n     >>> with open(zeopack_paths[0], 'r') as f:\n     ...     first_zeopack = f.read()\n     >>> with open(zeopack_paths[1], 'r') as f:\n"

Repository: plone.recipe.zeoserver


Branch: refs/heads/master
Date: 2023-05-02T15:50:20+02:00
Author: Peter Mathis (petschki) <petschki@users.noreply.github.com>
Commit: https://github.com/plone/plone.recipe.zeoserver/commit/7c967075bd0aef994822d3c594eff52b3f3bd746

flake8

Files changed:
M src/plone/recipe/zeoserver/tests/test_docs.py

b'diff --git a/src/plone/recipe/zeoserver/tests/test_docs.py b/src/plone/recipe/zeoserver/tests/test_docs.py\nindex e0a96bc..81b3642 100644\n--- a/src/plone/recipe/zeoserver/tests/test_docs.py\n+++ b/src/plone/recipe/zeoserver/tests/test_docs.py\n@@ -6,7 +6,6 @@\n import doctest\n import pkg_resources\n import shutil\n-import sys\n import unittest\n \n \n'

Repository: plone.recipe.zeoserver


Branch: refs/heads/master
Date: 2023-05-02T15:50:27+02:00
Author: Peter Mathis (petschki) <petschki@users.noreply.github.com>
Commit: https://github.com/plone/plone.recipe.zeoserver/commit/82199ff8238d829f48448f7079634f03ec317871

fix suffix

Files changed:
M src/plone/recipe/zeoserver/tests/zeoserver.txt

b"diff --git a/src/plone/recipe/zeoserver/tests/zeoserver.txt b/src/plone/recipe/zeoserver/tests/zeoserver.txt\nindex 52d2d23..9cfd184 100644\n--- a/src/plone/recipe/zeoserver/tests/zeoserver.txt\n+++ b/src/plone/recipe/zeoserver/tests/zeoserver.txt\n@@ -657,11 +657,6 @@ The recipe support additional eggs.\n \n The main script should have the initialization.\n \n-    >>> if WINDOWS:\n-    ...     suffix = '-script.py'\n-    ... else:\n-    ...     suffix = ''\n-\n-    >>> with open(join('parts', 'zeo', 'bin', 'zeoctl' + suffix)) as f:\n+    >>> with open(join('parts', 'zeo', 'bin', 'zeoctl')) as f:\n     ...     'plone.recipe.zeoserver' in f.read()\n     True\n"

Repository: plone.recipe.zeoserver


Branch: refs/heads/master
Date: 2023-05-03T10:24:55+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.recipe.zeoserver/commit/189d1a609b832e0a9a3b72943fb24dfaad8620fb

Merge pull request #45 from plone/petschki-dependency-fix

Dependency fix

Files changed:
A .editorconfig
A .github/workflows/tests.yml
A .meta.toml
A .pre-commit-config.yaml
A news/45.bugfix
M README.rst
M pyproject.toml
M setup.cfg
M setup.py
M src/plone/__init__.py
M src/plone/recipe/__init__.py
M src/plone/recipe/zeoserver/ctl.py
M src/plone/recipe/zeoserver/pack.py
M src/plone/recipe/zeoserver/recipe.py
M src/plone/recipe/zeoserver/tests/__init__.py
M src/plone/recipe/zeoserver/tests/test_docs.py
M src/plone/recipe/zeoserver/tests/zeoserver.txt
M tox.ini
D .coveragerc
D .travis.yml
D bootstrap.py
D buildout.cfg

b'diff --git a/.coveragerc b/.coveragerc\ndeleted file mode 100644\nindex 417be10..0000000\n--- a/.coveragerc\n+++ /dev/null\n@@ -1,8 +0,0 @@\n-[run]\n-branch = True\n-source = $COVERAGE_HOME/src/plone/recipe/zeoserver\n-parallel = true\n-data_file = $COVERAGE_HOME/.coverage\n-\n-[report]\n-precision = 2\ndiff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..b4158b8\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,39 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\ndiff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nnew file mode 100644\nindex 0000000..5f29c12\n--- /dev/null\n+++ b/.github/workflows/tests.yml\n@@ -0,0 +1,51 @@\n+name: Windows and MacOS\n+\n+on:\n+  push:\n+    branches:\n+      - master\n+  pull_request:\n+    branches:\n+      - master\n+  workflow_dispatch:\n+\n+jobs:\n+  build:\n+    strategy:\n+      # We want to see all failures:\n+      fail-fast: false\n+      matrix:\n+        os:\n+        - ["windows", "windows-latest"]\n+        - ["macos", "macos-11"]\n+        config:\n+        # [Python version, tox env]\n+        - ["3.9",   "test"]\n+\n+    runs-on: ${{ matrix.os[1] }}\n+    name: ${{ matrix.os[0] }}-${{ matrix.config[1] }}\n+    steps:\n+    - uses: actions/checkout@v3\n+\n+    - name: Set up Python\n+      uses: actions/setup-python@v4\n+      with:\n+        python-version: ${{ matrix.config[0] }}\n+\n+    - name: Pip cache\n+      uses: actions/cache@v3\n+      with:\n+        path: ~/.cache/pip\n+        key: ${{ runner.os }}-pip-${{ matrix.config[0] }}-${{ hashFiles(\'setup.*\', \'tox.ini\') }}\n+        restore-keys: |\n+          ${{ runner.os }}-pip-${{ matrix.config[0] }}-\n+          ${{ runner.os }}-pip-\n+\n+    - name: Install dependencies\n+      run: |\n+        python -m pip install --upgrade pip\n+        pip install tox\n+\n+    - name: Test\n+      run: |\n+        tox -e ${{ matrix.config[1] }}\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..99342b2\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[meta]\n+template = "default"\n+commit-id = "2a4ba395"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..fdafec1\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,42 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.3.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.0.3\n+    hooks:\n+    -   id: zpretty\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\ndiff --git a/.travis.yml b/.travis.yml\ndeleted file mode 100644\nindex 2ad0449..0000000\n--- a/.travis.yml\n+++ /dev/null\n@@ -1,23 +0,0 @@\n-language: python\n-dist: xenial\n-python:\n-    - 2.7\n-    - 3.6\n-    - 3.7\n-    - 3.8\n-before_install:\n-    - pip install -U setuptools pip\n-    - pip install -U coverage coveralls zope.testrunner\n-install:\n-    - pip install -U -e .[zrs]\n-script:\n-    - export COVERAGE_HOME=$(pwd)\n-    - export COVERAGE_PROCESS_START=$COVERAGE_HOME/.coveragerc\n-    - coverage run -m zope.testrunner --test-path=src --all -v1\n-notifications:\n-    email: false\n-after_success:\n-    - coverage combine\n-    - coveralls\n-cache:\n-  pip: true\ndiff --git a/README.rst b/README.rst\nindex cdda1f7..ddf8222 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -239,6 +239,13 @@ zeopack\n   "#" is the number of days to keep.\n \n \n+Version Information\n+-------------------\n+\n+- 3.x -> Plone 6, Zope 5, Python 3.8+\n+- 2.x -> Plone 5, Zope 4, Python 2.7\n+\n+\n Reporting bugs or asking questions\n ----------------------------------\n \ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex a629566..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,189 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-tmpeggs = tempfile.mkdtemp()\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep\n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("-v", "--version", help="use a specific zc.buildout version")\n-\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--setuptools-version",\n-                  help="use a specific setuptools version")\n-\n-\n-options, args = parser.parse_args()\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    if options.allow_site_packages:\n-        import setuptools\n-        import pkg_resources\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-\n-if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n-\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-cmd = [sys.executable, \'-c\',\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-requirement = \'zc.buildout\'\n-version = options.version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        try:\n-            return not parsed_version.is_prerelease\n-        except AttributeError:\n-            # Older setuptools\n-            for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n-                    return False\n-            return True\n-\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/buildout.cfg b/buildout.cfg\ndeleted file mode 100644\nindex 9890e2b..0000000\n--- a/buildout.cfg\n+++ /dev/null\n@@ -1,11 +0,0 @@\n-[buildout]\n-develop = .\n-parts = test zeo\n-\n-[test]\n-recipe = zc.recipe.testrunner\n-eggs =\n-    plone.recipe.zeoserver[zrs]\n-\n-[zeo]\n-recipe = plone.recipe.zeoserver\ndiff --git a/news/45.bugfix b/news/45.bugfix\nnew file mode 100644\nindex 0000000..b1e692a\n--- /dev/null\n+++ b/news/45.bugfix\n@@ -0,0 +1,3 @@\n+- Fix lost dependencies when defining additional `eggs` in buildout part.\n+- Update Codebase to python 3.8+\n+[petschki]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..639f77a 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,3 +1,5 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tool.towncrier]\n filename = "CHANGES.rst"\n directory = "news/"\n@@ -18,3 +20,65 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+[tool.isort]\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\ndiff --git a/setup.cfg b/setup.cfg\nindex faceec3..0da8f8f 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,8 +1,23 @@\n-[check-manifest]\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+[bdist_wheel]\n+universal = 0\n+\n+[flake8]\n+doctests = 1\n ignore =\n-    *.cfg\n-    .coveragerc\n-    bootstrap.py\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n \n-[bdist_wheel]\n-universal = 1\n+[check-manifest]\n+ignore =\n+    .editorconfig\n+    .meta.toml\n+    .pre-commit-config.yaml\n+    tox.ini\ndiff --git a/setup.py b/setup.py\nindex b267cbc..a8a8def 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,70 +1,54 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n-import sys\n \n-\n-version = \'2.0.4.dev0\'\n-\n-additional_install_requires = []\n-\n-if sys.platform[:3].lower() == \'win\':\n-    additional_install_requires += [\'nt_svcutils\']\n+version = "3.0.0.dev0"\n \n \n setup(\n     name="plone.recipe.zeoserver",\n     version=version,\n-    author=\'Hanno Schlichting\',\n-    author_email=\'hannosch@plone.org\',\n-    description=\'ZC Buildout recipe for installing a ZEO server\',\n-    long_description=(\n-        open(\'README.rst\').read() +\n-        \'\\n\' +\n-        open(\'CHANGES.rst\').read()\n-    ),\n-    license=\'ZPL 2.1\',\n-    keywords=\'zope2 zeo zodb buildout\',\n-    url=\'https://github.com/plone/plone.recipe.zeoserver\',\n-    download_url=\'https://pypi.org/project/plone.recipe.zeoserver\',\n+    author="Hanno Schlichting",\n+    author_email="hannosch@plone.org",\n+    description="ZC Buildout recipe for installing a ZEO server",\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n+    license="ZPL 2.1",\n+    keywords="zope2 zeo zodb buildout",\n+    url="https://github.com/plone/plone.recipe.zeoserver",\n+    download_url="https://pypi.org/project/plone.recipe.zeoserver",\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'License :: OSI Approved :: Zope Public License\',\n-        \'Framework :: Buildout\',\n-        \'Framework :: Plone\',\n-        \'Framework :: Plone :: 5.1\',\n-        \'Framework :: Plone :: 5.2\',\n-        \'Framework :: Plone :: Core\',\n-        \'Framework :: Zope\',\n-        \'Framework :: Zope :: 4\',\n-        \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 2\',\n-        \'Programming Language :: Python :: 2.7\',\n-        \'Programming Language :: Python :: 3\',\n-        \'Programming Language :: Python :: 3.6\',\n-        \'Programming Language :: Python :: 3.7\',\n-        \'Programming Language :: Python :: 3.8\',\n-        \'Programming Language :: Python :: Implementation\',\n-        \'Programming Language :: Python :: Implementation :: CPython\',\n+        "Development Status :: 5 - Production/Stable",\n+        "License :: OSI Approved :: Zope Public License",\n+        "Framework :: Buildout",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Zope",\n+        "Framework :: Zope :: 5",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n+        "Programming Language :: Python :: Implementation",\n+        "Programming Language :: Python :: Implementation :: CPython",\n     ],\n-    packages=find_packages(\'src\'),\n+    python_requires=">=3.8",\n+    packages=find_packages("src"),\n     include_package_data=True,\n-    package_dir={\'\': \'src\'},\n-    namespace_packages=[\'plone\', \'plone.recipe\'],\n+    package_dir={"": "src"},\n+    namespace_packages=["plone", "plone.recipe"],\n     install_requires=[\n-        \'setuptools\',\n-        \'zc.buildout\',\n-        \'zc.recipe.egg\',\n-        \'ZODB >= 5\',\n-        \'zope.mkzeoinstance >=4.1\',\n-        \'ZopeUndo\',\n-    ] + additional_install_requires,\n-    extras_require={\n-        \'zrs\': [\'zc.zrs\']\n-    },\n+        "setuptools",\n+        "zc.buildout",\n+        "zc.recipe.egg",\n+        "ZEO",\n+        "ZODB >= 5",\n+        "zope.mkzeoinstance >=4.1",\n+        "ZopeUndo",\n+    ],\n+    extras_require={"zrs": ["zc.zrs"]},\n     zip_safe=False,\n     entry_points={\n-        \'zc.buildout\': [\'default = plone.recipe.zeoserver.recipe:Recipe\'],\n+        "zc.buildout": ["default = plone.recipe.zeoserver.recipe:Recipe"],\n     },\n )\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex 85880ef..05f0beb 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1,7 +1,7 @@\n-# -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/src/plone/recipe/__init__.py b/src/plone/recipe/__init__.py\nindex 85880ef..05f0beb 100644\n--- a/src/plone/recipe/__init__.py\n+++ b/src/plone/recipe/__init__.py\n@@ -1,7 +1,7 @@\n-# -*- coding: utf-8 -*-\n # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages\n try:\n-    __import__(\'pkg_resources\').declare_namespace(__name__)\n+    __import__("pkg_resources").declare_namespace(__name__)\n except ImportError:\n     from pkgutil import extend_path\n+\n     __path__ = extend_path(__path__, __name__)\ndiff --git a/src/plone/recipe/zeoserver/ctl.py b/src/plone/recipe/zeoserver/ctl.py\nindex 638c9b6..4430245 100644\n--- a/src/plone/recipe/zeoserver/ctl.py\n+++ b/src/plone/recipe/zeoserver/ctl.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n """zeocltl -- control a ZEO server using zdaemon.\n \n Usage: zeocltl [options] [action [arguments]]\n@@ -10,7 +9,6 @@\n no action is specified on the command line, a "shell" interpreting actions\n typed interactively is started. Use the action "help" to find out about\n available actions. """\n-from __future__ import print_function\n \n from ZEO import runzeo\n from ZEO import zeoctl\n@@ -20,16 +18,16 @@\n \n \n if sys.platform[:3].lower() == "win":\n-    print(\'For win32 platforms, runzeo.bat or zeoservice.exe should be used\')\n-    print(\'%s is based on zdaemon, which is Linux specific\' % sys.argv[0])\n-    print(\'Aborting...\')\n+    print("For win32 platforms, runzeo.bat or zeoservice.exe should be used")\n+    print("%s is based on zdaemon, which is Linux specific" % sys.argv[0])\n+    print("Aborting...")\n     sys.exit(0)\n \n \n def main(args=None):\n     # When we detect Supervisord we need to make sure we do not fork a\n     # sub process since Supervisord does not like that\n-    if \'SUPERVISOR_ENABLED\' in os.environ:\n+    if "SUPERVISOR_ENABLED" in os.environ:\n         # We will ignore any command sent and always start in foreground mode\n         args = args[:2]\n         runzeo.main(args)\ndiff --git a/src/plone/recipe/zeoserver/pack.py b/src/plone/recipe/zeoserver/pack.py\nindex 4098112..218efbe 100644\n--- a/src/plone/recipe/zeoserver/pack.py\n+++ b/src/plone/recipe/zeoserver/pack.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from ZEO.ClientStorage import ClientStorage\n from ZEO.Exceptions import ClientDisconnected\n \n@@ -9,8 +8,18 @@\n import time\n \n \n-def _main(host, port, unix=None, days=1, username=None, password=None,\n-          realm=None, blob_dir=None, storage=\'1\', shared_blob_dir=True):\n+def _main(\n+    host,\n+    port,\n+    unix=None,\n+    days=1,\n+    username=None,\n+    password=None,\n+    realm=None,\n+    blob_dir=None,\n+    storage="1",\n+    shared_blob_dir=True,\n+):\n     if unix is not None:\n         addr = unix\n     else:\n@@ -27,17 +36,24 @@ def _main(host, port, unix=None, days=1, username=None, password=None,\n         # We do not want to wait until a zeoserver is up and running; it\n         # should already be running, so wait=False\n         cs = ClientStorage(\n-            addr, storage=storage, wait=False, read_only=True,\n-            username=username, password=password, realm=realm,\n-            blob_dir=blob_dir, shared_blob_dir=shared_blob_dir,\n+            addr,\n+            storage=storage,\n+            wait=False,\n+            read_only=True,\n+            username=username,\n+            password=password,\n+            realm=realm,\n+            blob_dir=blob_dir,\n+            shared_blob_dir=shared_blob_dir,\n         )\n         for i in range(60):\n             if cs.is_connected():\n                 break\n             time.sleep(1)\n         else:\n-            logger.error("Could not connect to zeoserver. Please make sure it "\n-                         "is running.")\n+            logger.error(\n+                "Could not connect to zeoserver. Please make sure it " "is running."\n+            )\n             cs.close()\n             sys.exit(1)\n         try:\n@@ -45,8 +61,9 @@ def _main(host, port, unix=None, days=1, username=None, password=None,\n             # => wait=True\n             cs.pack(wait=True, days=int(days))\n         except ClientDisconnected:\n-            logger.error("Disconnected from zeoserver. Please make sure it "\n-                         "is still running.")\n+            logger.error(\n+                "Disconnected from zeoserver. Please make sure it " "is still running."\n+            )\n             sys.exit(1)\n     finally:\n         if cs is not None:\n@@ -58,8 +75,7 @@ def main(*args, **kw):\n     old_level = root_logger.getEffectiveLevel()\n     logging.getLogger().setLevel(logging.WARNING)\n     handler = logging.StreamHandler(sys.stdout)\n-    handler.setFormatter(logging.Formatter(\n-        "%(name)s %(levelname)s %(message)s"))\n+    handler.setFormatter(logging.Formatter("%(name)s %(levelname)s %(message)s"))\n     logging.getLogger().addHandler(handler)\n     try:\n         _main(*args, **kw)\ndiff --git a/src/plone/recipe/zeoserver/recipe.py b/src/plone/recipe/zeoserver/recipe.py\nindex 7074006..66192bc 100644\n--- a/src/plone/recipe/zeoserver/recipe.py\n+++ b/src/plone/recipe/zeoserver/recipe.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n import logging\n import os\n import shutil\n@@ -9,6 +8,7 @@\n \n try:\n     import zc.zrs\n+\n     HAS_ZRS = True\n except ImportError:\n     HAS_ZRS = False\n@@ -17,74 +17,81 @@\n curdir = os.path.dirname(__file__)\n \n \n-class Recipe(object):\n-\n+class Recipe:\n     def __init__(self, buildout, name, options):\n-        self.egg = zc.recipe.egg.Egg(buildout, options[\'recipe\'], options)\n+        self.egg = zc.recipe.egg.Egg(buildout, options["recipe"], options)\n         self.buildout, self.options, self.name = buildout, options, name\n \n-        options[\'location\'] = os.path.join(\n-            buildout[\'buildout\'][\'parts-directory\'],\n+        if self.options.get("eggs") and options["recipe"] not in self.options["eggs"]:\n+            # make sure we do not loose our own dependencies if additional eggs are provided\n+            self.options["eggs"] += "\\n%s" % options["recipe"]\n+\n+        options["location"] = os.path.join(\n+            buildout["buildout"]["parts-directory"],\n             self.name,\n         )\n-        options[\'bin-directory\'] = buildout[\'buildout\'][\'bin-directory\']\n-        options[\'scripts\'] = \'\'  # suppress script generation.\n+        options["bin-directory"] = buildout["buildout"]["bin-directory"]\n+        options["scripts"] = ""  # suppress script generation.\n \n         # Relative path support for the generated scripts\n         relative_paths = options.get(\n-            \'relative-paths\',\n-            buildout[\'buildout\'].get(\'relative-paths\', \'false\'))\n-        if relative_paths == \'true\':\n-            options[\'buildout-directory\'] = buildout[\'buildout\'][\'directory\']\n-            self._relative_paths = options[\'buildout-directory\']\n+            "relative-paths", buildout["buildout"].get("relative-paths", "false")\n+        )\n+        if relative_paths == "true":\n+            options["buildout-directory"] = buildout["buildout"]["directory"]\n+            self._relative_paths = options["buildout-directory"]\n         else:\n-            self._relative_paths = \'\'\n-            assert relative_paths == \'false\'\n+            self._relative_paths = ""\n+            assert relative_paths == "false"\n \n     _ws_locations = None\n \n+    @property\n     def ws_locations(self):\n         if self._ws_locations is None:\n-            self._ws_locations = [d.location for d in self.zodb_ws]\n+            self._ws_locations = {d.location for d in self.zodb_ws}\n         return self._ws_locations\n-    ws_locations = property(ws_locations)\n \n     def install(self):\n         _, self.zodb_ws = self.egg.working_set()\n \n         options = self.options\n-        location = options[\'location\']\n+        location = options["location"]\n \n         if os.path.exists(location):\n             shutil.rmtree(location)\n \n-        self.module_paths = self.options.get(\'extra-paths\', [])\n+        self.module_paths = self.options.get("extra-paths", [])\n         if self.module_paths:\n             # Filter out empty directories\n-            self.module_paths = [p for p in self.module_paths.split(\'\\n\') if p]\n+            self.module_paths = [p for p in self.module_paths.split("\\n") if p]\n \n         # this was taken from mkzeoinstance.py\n         import zdaemon\n+\n         zdaemon_home = os.path.split(zdaemon.__path__[0])[0]\n \n         import ZEO\n+\n         self.zodb_home = os.path.dirname(os.path.dirname(ZEO.__file__))\n         params = {\n             "package": "zeo",\n             "PACKAGE": "ZEO",\n             "zodb_home": self.zodb_home,\n-            \'zdaemon_home\': zdaemon_home,\n+            "zdaemon_home": zdaemon_home,\n             "instance_home": location,\n-            "address": \'8100\',  # will be overwritten later\n-            "python": options[\'executable\'],\n+            "address": "8100",  # will be overwritten later\n+            "python": options["executable"],\n         }\n         from zope.mkzeoinstance import ZEOInstanceBuilder\n+\n         ZEOInstanceBuilder().create(location, params)\n \n         try:\n             # Save the working set:\n-            open(os.path.join(location, \'etc\', \'.eggs\'), \'w\').write(\n-                \'\\n\'.join(self.ws_locations))\n+            open(os.path.join(location, "etc", ".eggs"), "w").write(\n+                "\\n".join(self.ws_locations)\n+            )\n \n             # Make a new zeo.conf based on options in buildout.cfg\n             self.build_zeo_conf()\n@@ -95,7 +102,7 @@ def install(self):\n             # Install extra scripts\n             self.install_scripts()\n \n-        except Exception:            # clean up\n+        except Exception:  # clean up\n             shutil.rmtree(location)\n             raise\n \n@@ -105,14 +112,14 @@ def update(self):\n         _, self.zodb_ws = self.egg.working_set()\n \n         options = self.options\n-        location = options[\'location\']\n+        location = options["location"]\n \n         if os.path.exists(location):\n             # See if we can stop. We need to see if the working set path\n             # has changed.\n-            saved_path = os.path.join(location, \'etc\', \'.eggs\')\n+            saved_path = os.path.join(location, "etc", ".eggs")\n             if os.path.isfile(saved_path):\n-                if (open(saved_path).read() != \'\\n\'.join(self.ws_locations)):\n+                if open(saved_path).read() != "\\n".join(self.ws_locations):\n                     # Something has changed. Blow away the instance.\n                     self.install()\n \n@@ -125,108 +132,109 @@ def update(self):\n         return location\n \n     def build_zeo_conf(self):\n-        """Create a zeo.conf file\n-        """\n+        """Create a zeo.conf file"""\n         options = self.options\n-        location = options[\'location\']\n+        location = options["location"]\n         instance_home = location\n \n-        base_dir = self.buildout[\'buildout\'][\'directory\']\n-        var_dir = options.get(\'var\', os.path.join(base_dir, \'var\'))\n+        base_dir = self.buildout["buildout"]["directory"]\n+        var_dir = options.get("var", os.path.join(base_dir, "var"))\n         if not os.path.exists(var_dir):\n             os.makedirs(var_dir)\n \n         self.pid_file = options.get(\n-            \'pid-file\',\n-            os.path.join(var_dir, self.name + \'.pid\'))\n+            "pid-file", os.path.join(var_dir, self.name + ".pid")\n+        )\n \n-        zeo_conf_path = options.get(\'zeo-conf\', None)\n+        zeo_conf_path = options.get("zeo-conf", None)\n         if zeo_conf_path is not None:\n             zeo_conf = "%%include %s" % os.path.abspath(zeo_conf_path)\n         else:\n-            zeo_address = options.get(\'zeo-address\', \'8100\')\n-            zeo_conf_additional = options.get(\'zeo-conf-additional\', \'\')\n-            storage_number = options.get(\'storage-number\', \'1\')\n+            zeo_address = options.get("zeo-address", "8100")\n+            zeo_conf_additional = options.get("zeo-conf-additional", "")\n+            storage_number = options.get("storage-number", "1")\n \n-            monitor_address = options.get(\'monitor-address\', \'\')\n+            monitor_address = options.get("monitor-address", "")\n             if monitor_address:\n-                monitor_address = \'monitor-address %s\' % monitor_address\n+                monitor_address = "monitor-address %s" % monitor_address\n \n-            effective_user = options.get(\'effective-user\', \'\')\n+            effective_user = options.get("effective-user", "")\n             if effective_user:\n-                effective_user = \'user %s\' % effective_user\n+                effective_user = "user %s" % effective_user\n \n-            invalidation_queue_size = options.get(\'invalidation-queue-size\',\n-                                                  \'100\')\n+            invalidation_queue_size = options.get("invalidation-queue-size", "100")\n \n-            socket_name = options.get(\'socket-name\',\n-                                      \'%s/zeo.zdsock\' % var_dir)\n+            socket_name = options.get("socket-name", "%s/zeo.zdsock" % var_dir)\n             socket_dir = os.path.dirname(socket_name)\n             if not os.path.exists(socket_dir):\n                 os.makedirs(socket_dir)\n \n-            z_log_name = os.path.sep.join((\'log\', self.name + \'.log\'))\n-            zeo_log_level = options.get(\'zeo-log-level\', \'info\')\n-            zeo_log_custom = options.get(\'zeo-log-custom\', None)\n+            z_log_name = os.path.sep.join(("log", self.name + ".log"))\n+            zeo_log_level = options.get("zeo-log-level", "info")\n+            zeo_log_custom = options.get("zeo-log-custom", None)\n \n             # if zeo-log is given, we use it to set the runner\n             # logfile value in any case\n-            z_log_filename = options.get(\'zeo-log\', z_log_name)\n+            z_log_filename = options.get("zeo-log", z_log_name)\n             z_log_filename = os.path.join(var_dir, z_log_filename)\n             z_log_dir = os.path.dirname(z_log_filename)\n             if not os.path.exists(z_log_dir):\n                 os.makedirs(z_log_dir)\n \n             # zeo-log-custom superseeds zeo-log\n-            logformat = options.get(\n-                \'zeo-log-format\', \'%(asctime)s %(message)s\')\n+            logformat = options.get("zeo-log-format", "%(asctime)s %(message)s")\n             if zeo_log_custom is None:\n-                zeo_log_rotate = \'\'\n-                zeo_log_max_size = options.get(\'zeo-log-max-size\', None)\n+                zeo_log_rotate = ""\n+                zeo_log_max_size = options.get("zeo-log-max-size", None)\n                 if zeo_log_max_size:\n-                    zeo_log_old_files = options.get(\'zeo-log-old-files\', 1)\n-                    zeo_log_rotate = \'\\n\'.join((\n-                        "max-size %s" % zeo_log_max_size,\n-                        "      old-files %s" % zeo_log_old_files))\n+                    zeo_log_old_files = options.get("zeo-log-old-files", 1)\n+                    zeo_log_rotate = "\\n".join(\n+                        (\n+                            "max-size %s" % zeo_log_max_size,\n+                            "      old-files %s" % zeo_log_old_files,\n+                        )\n+                    )\n                 z_log = z_log_file % {\n-                    \'filename\': z_log_filename,\n-                    \'logformat\': logformat,\n-                    \'zeo_log_rotate\': zeo_log_rotate}\n+                    "filename": z_log_filename,\n+                    "logformat": logformat,\n+                    "zeo_log_rotate": zeo_log_rotate,\n+                }\n             else:\n                 z_log = zeo_log_custom\n \n-            file_storage = os.path.sep.join((\'filestorage\', \'Data.fs\'))\n-            file_storage = options.get(\'file-storage\', file_storage)\n+            file_storage = os.path.sep.join(("filestorage", "Data.fs"))\n+            file_storage = options.get("file-storage", file_storage)\n             file_storage = os.path.join(var_dir, file_storage)\n             file_storage_dir = os.path.dirname(file_storage)\n             if not os.path.exists(file_storage_dir):\n                 os.makedirs(file_storage_dir)\n \n-            if options.get(\'authentication-database\', \'\'):\n-                authentication = authentication_template % \\\n-                    dict(database=options.get(\'authentication-database\'),\n-                         realm=options.get(\'authentication-realm\', \'ZEO\'))\n+            if options.get("authentication-database", ""):\n+                authentication = authentication_template % dict(\n+                    database=options.get("authentication-database"),\n+                    realm=options.get("authentication-realm", "ZEO"),\n+                )\n             else:\n-                authentication = \'\'\n+                authentication = ""\n \n-            blob_storage = options.get(\'blob-storage\', \'blobstorage\')\n+            blob_storage = options.get("blob-storage", "blobstorage")\n             if blob_storage:\n                 blob_storage = os.path.join(var_dir, blob_storage)\n                 storage_template = blob_storage_template\n             else:\n                 storage_template = file_storage_template\n \n-            effective_user = options.get(\'effective-user\', \'\')\n+            effective_user = options.get("effective-user", "")\n             if effective_user:\n-                effective_user = \'user %s\' % effective_user\n+                effective_user = "user %s" % effective_user\n \n-            pack_gc = options.get(\'pack-gc\', \'\')\n-            if pack_gc.lower() == \'false\':\n-                pack_gc = \'pack-gc false\'\n+            pack_gc = options.get("pack-gc", "")\n+            if pack_gc.lower() == "false":\n+                pack_gc = "pack-gc false"\n \n-            pack_keep_old = options.get(\'pack-keep-old\', \'\')\n-            if pack_keep_old.lower() == \'false\':\n-                pack_keep_old = \'pack-keep-old false\'\n+            pack_keep_old = options.get("pack-keep-old", "")\n+            if pack_keep_old.lower() == "false":\n+                pack_keep_old = "pack-keep-old false"\n \n             storage = storage_template % dict(\n                 storage_number=storage_number,\n@@ -237,23 +245,23 @@ def build_zeo_conf(self):\n             )\n \n             # ZRS config\n-            rfrom = options.get(\'replicate-from\')\n-            rto = options.get(\'replicate-to\')\n+            rfrom = options.get("replicate-from")\n+            rto = options.get("replicate-to")\n             if HAS_ZRS and (rfrom or rto):\n-                replicate = \'\'\n+                replicate = ""\n                 if rfrom:\n                     replicate += "\\nreplicate-from %s" % rfrom\n                 if rto:\n                     replicate += "\\nreplicate-to %s" % rto\n-                keep_alive = options.get(\'keep-alive-delay\', \'60\')\n+                keep_alive = options.get("keep-alive-delay", "60")\n                 storage = zrs_template % dict(\n                     storage=storage,\n                     keep_alive=keep_alive,\n                     replicate=replicate,\n-                    storage_number=storage_number\n+                    storage_number=storage_number,\n                 )\n \n-            read_only = options.get(\'read-only\', \'false\')\n+            read_only = options.get("read-only", "false")\n             zeo_conf = zeo_conf_template % dict(\n                 instance_home=instance_home,\n                 effective_user=effective_user,\n@@ -268,78 +276,74 @@ def build_zeo_conf(self):\n                 zeo_conf_additional=zeo_conf_additional,\n                 monitor_address=monitor_address,\n                 zeo_log_level=zeo_log_level,\n-                read_only=read_only\n+                read_only=read_only,\n             )\n \n-        zeo_conf_path = os.path.join(location, \'etc\', \'zeo.conf\')\n-        open(zeo_conf_path, \'w\').write(zeo_conf)\n+        zeo_conf_path = os.path.join(location, "etc", "zeo.conf")\n+        open(zeo_conf_path, "w").write(zeo_conf)\n \n     def patch_binaries(self):\n-        location = self.options[\'location\']\n+        location = self.options["location"]\n         # XXX We need to patch the windows specific batch scripts\n-        # and they need a different path seperator\n+        # and they need a different path separator\n         path = (\n-            os.path.pathsep.join(self.ws_locations) +\n-            os.path.pathsep +\n-            os.path.pathsep.join(self.module_paths)\n+            os.path.pathsep.join(self.ws_locations)\n+            + os.path.pathsep\n+            + os.path.pathsep.join(self.module_paths)\n         )\n-\n-        for script_name in (\'runzeo\', \'zeoctl\'):\n-            script_path = os.path.join(location, \'bin\', script_name)\n+        for script_name in ("runzeo", "zeoctl"):\n+            script_path = os.path.join(location, "bin", script_name)\n             script = open(script_path).read()\n-            script = script.replace(\'PYTHONPATH="$ZODB3_HOME"\',\n-                                    \'PYTHONPATH="%s"\' % path)\n-            f = open(script_path, \'w\')\n+            script = script.replace(\n+                \'PYTHONPATH="$ZODB3_HOME"\', \'PYTHONPATH="%s"\' % path\n+            )\n+            f = open(script_path, "w")\n             f.write(script)\n             f.close()\n \n     def install_scripts(self):\n         options = self.options\n-        location = options[\'location\']\n+        location = options["location"]\n \n-        self.zeo_conf = options.get(\'zeo-conf\', None)\n+        self.zeo_conf = options.get("zeo-conf", None)\n         if self.zeo_conf is None:\n-            self.zeo_conf = os.path.join(location, \'etc\', \'zeo.conf\')\n+            self.zeo_conf = os.path.join(location, "etc", "zeo.conf")\n \n-        _, ws = self.egg.working_set([\'plone.recipe.zeoserver\'])\n+        _, ws = self.egg.working_set(["plone.recipe.zeoserver"])\n \n-        path = (\n-            os.path.pathsep.join(self.ws_locations) +\n-            os.path.pathsep +\n-            os.path.pathsep.join(self.module_paths)\n-        )\n-        initialization = """\n-        import os; os.environ[\'PYTHONPATH\'] = %r\n-        """.strip() % path\n         zc.buildout.easy_install.scripts(\n-            [(self.name, \'plone.recipe.zeoserver.ctl\', \'main\')],\n-            ws, options[\'executable\'], options[\'bin-directory\'],\n-            initialization=\'\\n\'.join(\n-                [initialization, options.get(\'initialization\', \'\'), \'\']),\n-            arguments=(\'\\n        ["-C", %r]\'\n-                       \'\\n        + sys.argv[1:]\'\n-                       % self.zeo_conf),\n+            [(self.name, "plone.recipe.zeoserver.ctl", "main")],\n+            ws,\n+            options["executable"],\n+            options["bin-directory"],\n+            initialization=options.get("initialization", ""),\n+            arguments=(\n+                \'\\n        ["-C", %r]\' "\\n        + sys.argv[1:]" % self.zeo_conf\n+            ),\n             extra_paths=self.module_paths,\n-            relative_paths=self._relative_paths)\n+            relative_paths=self._relative_paths,\n+        )\n \n         # zeopack.py\n-        zeopack = options.get(\'zeopack\', None)\n-        zeopack_script_name = options.get(\'zeopack-script-name\', \'zeopack\')\n+        zeopack = options.get("zeopack", None)\n+        zeopack_script_name = options.get("zeopack-script-name", "zeopack")\n         zeopack_scripts = dict(zeopack=zeopack_script_name)\n         if zeopack is not None:\n             directory, filename = os.path.split(zeopack)\n             if zeopack and os.path.exists(zeopack):\n                 zc.buildout.easy_install.scripts(\n-                    [(\'zeopack\', os.path.splitext(filename)[0], \'main\')],\n-                    ws, options[\'executable\'], options[\'bin-directory\'],\n+                    [("zeopack", os.path.splitext(filename)[0], "main")],\n+                    ws,\n+                    options["executable"],\n+                    options["bin-directory"],\n                     scripts=zeopack_scripts,\n                     extra_paths=ws + [directory] + self.module_paths,\n                     relative_paths=self._relative_paths,\n                 )\n         else:\n-            host = port = socket_path = \'\'\n-            zeo_address = options.get(\'zeo-address\', \'8100\')\n-            parts = zeo_address.split(\':\')\n+            host = port = socket_path = ""\n+            zeo_address = options.get("zeo-address", "8100")\n+            parts = zeo_address.split(":")\n \n             if len(parts) == 1:\n                 try:\n@@ -351,145 +355,154 @@ def install_scripts(self):\n                     # a path to a Unix socket file\n                     socket_path = zeo_address\n                 else:\n-                    host = \'127.0.0.1\'\n+                    host = "127.0.0.1"\n                     port = zeo_address\n             else:\n                 host, port = parts\n \n-            username = options.get(\'pack-user\', None)\n-            password = options.get(\'pack-password\', None)\n+            username = options.get("pack-user", None)\n+            password = options.get("pack-password", None)\n             if username is not None:\n-                realm = options.get(\'authentication-realm\', \'ZEO\')\n+                realm = options.get("authentication-realm", "ZEO")\n             else:\n                 realm = None\n-            storage = options.get(\'storage-number\', \'1\')\n+            storage = options.get("storage-number", "1")\n \n             arg_list = [\n-                \'host\', \'port\', \'unix\', \'days\',\n-                \'username\', \'password\', \'realm\', \'blob_dir\', \'storage\',\n+                "host",\n+                "port",\n+                "unix",\n+                "days",\n+                "username",\n+                "password",\n+                "realm",\n+                "blob_dir",\n+                "storage",\n             ]\n             arguments = dict(\n                 address=zeo_address,\n                 host=host,\n                 port=port,\n                 unix=socket_path,\n-                days=options.get(\'pack-days\', 1),\n+                days=options.get("pack-days", 1),\n                 username=username,\n                 password=password,\n                 realm=realm,\n                 storage=storage,\n-                blob_dir=options.get(\'blob-storage\', None),\n+                blob_dir=options.get("blob-storage", None),\n             )\n-            arguments_info = \'\'\n+            arguments_info = ""\n             for k, v in arguments.items():\n                 if not v:\n-                    arguments_info += \'%s = None\\n\' % k\n+                    arguments_info += "%s = None\\n" % k\n                 else:\n-                    arguments_info += \'%s = "%s"\\n\' % (k, v)\n-\n-            arguments_info += ("import getopt; opts = "\n-                               "getopt.getopt(sys.argv[1:], \'S:B:D:W1\')[0];\\n"\n-                               "opts = dict(opts)\\n"\n-                               "storage = opts.get(\'-S\') and "\n-                               "opts[\'-S\'] or storage\\n"\n-                               "blob_dir = opts.get(\'-B\') and "\n-                               "opts[\'-B\'] or blob_dir\\n"\n-                               "days = opts.get(\'-D\') and "\n-                               "opts[\'-D\'] or days\\n"\n-                               )\n+                    arguments_info += f\'{k} = "{v}"\\n\'\n+\n+            arguments_info += (\n+                "import getopt; opts = "\n+                "getopt.getopt(sys.argv[1:], \'S:B:D:W1\')[0];\\n"\n+                "opts = dict(opts)\\n"\n+                "storage = opts.get(\'-S\') and "\n+                "opts[\'-S\'] or storage\\n"\n+                "blob_dir = opts.get(\'-B\') and "\n+                "opts[\'-B\'] or blob_dir\\n"\n+                "days = opts.get(\'-D\') and "\n+                "opts[\'-D\'] or days\\n"\n+            )\n \n             # Make sure the recipe itself and its dependencies are on the path\n-            extra_paths = [\n-                ws.by_key[options[\'recipe\'].replace(\'[zrs]\', \'\')].location]\n+            extra_paths = [ws.by_key[options["recipe"].replace("[zrs]", "")].location]\n             try:\n-                extra_paths.append(ws.by_key[\'zc.buildout\'].location)\n+                extra_paths.append(ws.by_key["zc.buildout"].location)\n             except KeyError:\n                 # XXX Buildout installed with Pip?\n                 pass\n-            extra_paths.append(ws.by_key[\'zc.recipe.egg\'].location)\n+            extra_paths.append(ws.by_key["zc.recipe.egg"].location)\n             zc.buildout.easy_install.scripts(\n-                [(\'zeopack\', \'plone.recipe.zeoserver.pack\', \'main\')],\n-                self.zodb_ws, options[\'executable\'], options[\'bin-directory\'],\n+                [("zeopack", "plone.recipe.zeoserver.pack", "main")],\n+                self.zodb_ws,\n+                options["executable"],\n+                options["bin-directory"],\n                 scripts=zeopack_scripts,\n                 initialization=arguments_info,\n-                arguments=\', \'.join(arg_list),\n+                arguments=", ".join(arg_list),\n                 relative_paths=self._relative_paths,\n                 extra_paths=extra_paths + self.module_paths,\n             )\n \n         # The backup script, pointing to repozo.py\n-        repozo = options.get(\'repozo\', None)\n-        repozo_script_name = options.get(\'repozo-script-name\', \'repozo\')\n+        repozo = options.get("repozo", None)\n+        repozo_script_name = options.get("repozo-script-name", "repozo")\n         repozo_scripts = dict(repozo=repozo_script_name)\n         if repozo is None:\n-            repozo = \'ZODB.scripts.repozo\'\n+            repozo = "ZODB.scripts.repozo"\n             extra_paths = []\n         else:\n             if not os.path.exists(repozo):\n-                raise AssertionError(\n-                    \'Custom repozo script not found: %s\' % repozo)\n+                raise AssertionError("Custom repozo script not found: %s" % repozo)\n             directory, filename = os.path.split(repozo)\n             repozo = os.path.splitext(filename)[0]\n             extra_paths = [directory]\n         zc.buildout.easy_install.scripts(\n-            [(\'repozo\', repozo, \'main\')],\n-            self.zodb_ws, options[\'executable\'], options[\'bin-directory\'],\n+            [("repozo", repozo, "main")],\n+            self.zodb_ws,\n+            options["executable"],\n+            options["bin-directory"],\n             scripts=repozo_scripts,\n             extra_paths=extra_paths + self.module_paths,\n             relative_paths=self._relative_paths,\n         )\n \n-        if sys.platform == \'win32\':\n+        if sys.platform == "win32":\n             self.install_win32_scripts()\n \n     def install_win32_scripts(self):\n-        path = self.ws_locations + self.module_paths\n-        location = self.options[\'location\']\n+        path = list(self.ws_locations) + self.module_paths\n+        location = self.options["location"]\n \n-        arguments = {\'PYTHON\': self.options[\'executable\'],\n-                     \'zodb_home\': self.zodb_home,\n-                     \'INSTANCE_HOME\': location,\n-                     \'PYTHONPATH\': os.path.pathsep.join(path),\n-                     \'PACKAGE\': \'zeo\',\n-                     \'PID_FILENAME\': self.pid_file}\n+        arguments = {\n+            "PYTHON": self.options["executable"],\n+            "zodb_home": self.zodb_home,\n+            "INSTANCE_HOME": location,\n+            "PYTHONPATH": os.path.pathsep.join(path),\n+            "PACKAGE": "zeo",\n+            "PID_FILENAME": self.pid_file,\n+        }\n \n         # runzeo.bat\n-        runzeo_filename = \'%s_runzeo.bat\' % self.name\n-        runzeo = open(join(curdir, \'runzeo.bat\')).read()\n-        self._write_file(os.path.join(self.options[\'bin-directory\'],\n-                                      runzeo_filename), runzeo % arguments)\n+        runzeo_filename = "%s_runzeo.bat" % self.name\n+        runzeo = open(join(curdir, "runzeo.bat")).read()\n+        self._write_file(\n+            os.path.join(self.options["bin-directory"], runzeo_filename),\n+            runzeo % arguments,\n+        )\n \n         # zeoservice.py\n-        zeo_filename = \'%s_service\' % self.name\n-        zeo_service = open(join(curdir, \'zeoservice.py.in\')).read()\n-        zeo_file = os.path.join(self.options[\'bin-directory\'],\n-                                \'%s.py\' % zeo_filename)\n+        zeo_filename = "%s_service" % self.name\n+        zeo_service = open(join(curdir, "zeoservice.py.in")).read()\n+        zeo_file = os.path.join(self.options["bin-directory"], "%s.py" % zeo_filename)\n         self._write_file(zeo_file, zeo_service % arguments)\n \n-        initialization = """\n-        import os; os.environ[\'PYTHONPATH\'] = %r\n-        """.strip() % os.path.pathsep.join(path)\n-\n         zc.buildout.easy_install.scripts(\n-            [(zeo_filename, zeo_filename, \'main\')],\n+            [(zeo_filename, zeo_filename, "main")],\n             self.zodb_ws,\n-            self.options[\'executable\'],\n-            self.options[\'bin-directory\'],\n+            self.options["executable"],\n+            self.options["bin-directory"],\n             extra_paths=path,\n             relative_paths=self._relative_paths,\n-            initialization=initialization,\n+            initialization=self.options.get("initialization", ""),\n         )\n \n     def _write_file(self, path, content):\n-        logger = logging.getLogger(\'zc.buildout.easy_install\')\n-        f = open(path, \'w\')\n+        logger = logging.getLogger("zc.buildout.easy_install")\n+        f = open(path, "w")\n         try:\n             f.write(content)\n         finally:\n             f.close()\n-        logger.debug(\'Wrote file %s\' % path)\n+        logger.debug("Wrote file %s" % path)\n         os.chmod(path, 0o755)\n-        logger.warning(\'Changed mode for %s to 755\' % path)\n+        logger.warning("Changed mode for %s to 755" % path)\n \n \n # the template used to build a regular file storage entry for zeo.conf\ndiff --git a/src/plone/recipe/zeoserver/tests/__init__.py b/src/plone/recipe/zeoserver/tests/__init__.py\nindex ec51c5a..792d600 100644\n--- a/src/plone/recipe/zeoserver/tests/__init__.py\n+++ b/src/plone/recipe/zeoserver/tests/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n #\ndiff --git a/src/plone/recipe/zeoserver/tests/test_docs.py b/src/plone/recipe/zeoserver/tests/test_docs.py\nindex 84dba40..81b3642 100644\n--- a/src/plone/recipe/zeoserver/tests/test_docs.py\n+++ b/src/plone/recipe/zeoserver/tests/test_docs.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-\n from zc.buildout.testing import buildoutSetUp\n from zc.buildout.testing import buildoutTearDown\n from zc.buildout.testing import install\n@@ -8,28 +6,24 @@\n import doctest\n import pkg_resources\n import shutil\n-import sys\n import unittest\n \n \n def setUp(test):\n     buildoutSetUp(test)\n-    install_develop(\'plone.recipe.zeoserver\', test)\n-    install(\'zc.recipe.egg\', test)\n-    if sys.platform[:3].lower() == "win":\n-        install(\'nt_svcutils\', test)\n-    install(\'zope.mkzeoinstance\', test)\n-    install(\'ZopeUndo\', test)\n-    install(\'zc.zrs\', test)\n-    install(\'Automat\', test)\n-    install(\'incremental\', test)\n-    install(\'constantly\', test)\n-    install(\'attrs\', test)\n-    install(\'Twisted\', test)\n-    install(\'hyperlink\', test)\n-    install(\'idna\', test)\n-    install(\'PyHamcrest\', test)\n-    dependencies = pkg_resources.working_set.require(\'ZODB\')\n+    install_develop("plone.recipe.zeoserver", test)\n+    install("zc.recipe.egg", test)\n+    install("zope.mkzeoinstance", test)\n+    install("ZopeUndo", test)\n+    install("zc.zrs", test)\n+    install("Automat", test)\n+    install("incremental", test)\n+    install("constantly", test)\n+    install("attrs", test)\n+    install("Twisted", test)\n+    install("hyperlink", test)\n+    install("idna", test)\n+    dependencies = pkg_resources.working_set.require("ZODB")\n     for dep in dependencies:\n         try:\n             install(dep.project_name, test)\n@@ -41,15 +35,18 @@ def setUp(test):\n \n def tearDown(test):\n     buildoutTearDown(test)\n-    sample_buildout = test.globs[\'sample_buildout\']\n+    sample_buildout = test.globs["sample_buildout"]\n     shutil.rmtree(sample_buildout, ignore_errors=True)\n \n \n def test_suite():\n     suite = []\n-    flags = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)\n+    flags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE\n \n-    suite.append(doctest.DocFileSuite(\'zeoserver.txt\', optionflags=flags,\n-                                      setUp=setUp, tearDown=buildoutTearDown))\n+    suite.append(\n+        doctest.DocFileSuite(\n+            "zeoserver.txt", optionflags=flags, setUp=setUp, tearDown=buildoutTearDown\n+        )\n+    )\n \n     return unittest.TestSuite(suite)\ndiff --git a/src/plone/recipe/zeoserver/tests/zeoserver.txt b/src/plone/recipe/zeoserver/tests/zeoserver.txt\nindex 080a4a8..9cfd184 100644\n--- a/src/plone/recipe/zeoserver/tests/zeoserver.txt\n+++ b/src/plone/recipe/zeoserver/tests/zeoserver.txt\n@@ -272,7 +272,8 @@ We should have a zeo.conf with log file rotation enabled::\n \n     >>> zeo = os.path.join(sample_buildout, \'parts\', \'zeo\')\n     >>> with open(os.path.join(zeo, \'etc\', \'zeo.conf\')) as f:\n-    ...     print(f.read())\n+    ...     output = f.read()\n+    >>> print(output.replace(\'\\\\\', \'/\'))\n     %define INSTANCE ...\n     ...\n     <eventlog>\n@@ -474,7 +475,7 @@ be different and correspond as the buildout specified::\n     >>> zeopack_scripts = (\'first-zeopack\', \'second-zeopack\')\n     >>> zeopack_paths = [os.path.join(sample_buildout, \'bin\', script) for script in zeopack_scripts]\n     >>> if WINDOWS:\n-    ...     zeopack_paths =  [zeopack + \'-script.py\' for zeopack in zeopacks]\n+    ...     zeopack_paths =  [zeopack + \'-script.py\' for zeopack in zeopack_paths]\n     >>> with open(zeopack_paths[0], \'r\') as f:\n     ...     first_zeopack = f.read()\n     >>> with open(zeopack_paths[1], \'r\') as f:\n@@ -632,3 +633,30 @@ The main script should have the initialization.\n     >>> with open(join(\'bin\', \'zeo\' + suffix)) as f:\n     ...     \'foo = 1\' in f.read()\n     True\n+\n+Additional eggs\n+===============\n+\n+The recipe support additional eggs.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = zeo\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [zeo]\n+    ... recipe = plone.recipe.zeoserver\n+    ... zeo-address = /path/to/zeo.socket\n+    ... eggs = ZEO\n+    ... \'\'\' % globals())\n+    >>> print(system(join(\'bin\', \'buildout\'))),\n+    Uninstalling zeo.\n+    Installing zeo.\n+    ...\n+\n+The main script should have the initialization.\n+\n+    >>> with open(join(\'parts\', \'zeo\', \'bin\', \'zeoctl\')) as f:\n+    ...     \'plone.recipe.zeoserver\' in f.read()\n+    True\ndiff --git a/tox.ini b/tox.ini\nindex d7c0507..c7235fd 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,38 +1,76 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n [tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n envlist =\n-    py27,\n-    py36,\n-    py37,\n-    py38,\n-    flake8,\n-    coverage\n-\n-skip_missing_interpreters = False\n+    format\n+    lint\n+    test\n \n [testenv]\n-usedevelop = true\n+allowlist_externals =\n+    sh\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies\n+skip_install = true\n+deps =\n+    build\n+    z3c.dependencychecker==2.11\n+commands =\n+    python -m build --sdist --no-isolation\n+    dependencychecker\n+\n+[testenv:dependencies-graph]\n+description = generate a graph out of the package\'s dependencies\n+deps =\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n commands =\n-    zope-testrunner --test-path=src --all {posargs:-vc}\n-extras = zrs\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+use_develop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n deps =\n     zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir}/src -s plone.recipe.zeoserver {posargs}\n+extras =\n+    zrs\n \n [testenv:coverage]\n-basepython = python3.6\n+use_develop = true\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n deps =\n-    zope.testrunner\n     coverage\n-setenv =\n-    COVERAGE_HOME={toxinidir}\n-    COVERAGE_PROCESS_START={toxinidir}/.coveragerc\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    coverage run -m zope.testrunner --test-path=src {posargs:-vc}\n-    coverage combine\n-    coverage html\n-    coverage report --fail-under=62\n-\n-[testenv:flake8]\n-basepython = python3.6\n-skip_install = true\n-deps = flake8\n-commands = flake8 --doctests src setup.py\n+    coverage run {envbindir}/zope-testrunner --all --test-path={toxinidir}/src -s plone.recipe.zeoserver {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    zrs\n'

