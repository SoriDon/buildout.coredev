Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2018-06-13T17:37:17+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/2b2033eeee580c6718465674a2fc3a2a5d054bf2

Migrate tests away from PloneTestCase
Migrate skin-templates to browser-views
Fix tests for python 3

Files changed:
A Products/CMFPlacefulWorkflow/browser/__init__.py
A Products/CMFPlacefulWorkflow/browser/configure.zcml
A Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt
A Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt
A Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt
A Products/CMFPlacefulWorkflow/browser/views.py
A Products/CMFPlacefulWorkflow/testing.py
M Products/CMFPlacefulWorkflow/DefaultWorkflowPolicy.py
M Products/CMFPlacefulWorkflow/configure.zcml
M Products/CMFPlacefulWorkflow/tests/CMFPlacefulWorkflowTestCase.py
M Products/CMFPlacefulWorkflow/tests/policy_form.txt
M Products/CMFPlacefulWorkflow/tests/testCMFPlacefulWorkflow.py
M Products/CMFPlacefulWorkflow/tests/test_configlet.py
M Products/CMFPlacefulWorkflow/tests/test_doctests.py
D Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration.pt
D Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration_add.py
D Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration_set.py
D Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_localpolicies_form.pt
D Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_localpolicies_set.py
D Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping.pt
D Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping.pt.metadata
D Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping_set.py

b'diff --git a/Products/CMFPlacefulWorkflow/DefaultWorkflowPolicy.py b/Products/CMFPlacefulWorkflow/DefaultWorkflowPolicy.py\nindex 22af4c8..69ea3a7 100644\n--- a/Products/CMFPlacefulWorkflow/DefaultWorkflowPolicy.py\n+++ b/Products/CMFPlacefulWorkflow/DefaultWorkflowPolicy.py\n@@ -280,7 +280,7 @@ def setChain(self, portal_type, chain, REQUEST=None):\n             raise ValueError("\'%s\' is not a valid portal type." % portal_type)\n \n         if isinstance(chain, six.string_types):\n-            chain = map(lambda x: x.strip(), chain.split(\',\'))\n+            chain = [i.strip() for i in chain.split(\',\')]\n \n         wftool = getToolByName(self, \'portal_workflow\')\n         cbt = self._chains_by_type\ndiff --git a/Products/CMFPlacefulWorkflow/browser/__init__.py b/Products/CMFPlacefulWorkflow/browser/__init__.py\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/Products/CMFPlacefulWorkflow/browser/configure.zcml b/Products/CMFPlacefulWorkflow/browser/configure.zcml\nnew file mode 100644\nindex 0000000..3f2cdcf\n--- /dev/null\n+++ b/Products/CMFPlacefulWorkflow/browser/configure.zcml\n@@ -0,0 +1,31 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    xmlns:browser="http://namespaces.zope.org/browser">\n+\n+    <browser:page\n+        for="*"\n+        name="placeful_workflow_configuration"\n+        class=".views.PlacefulWorkflowConfiguration"\n+        template="placeful_workflow_configuration.pt"\n+        permission="zope2.View"\n+        />\n+\n+    <browser:page\n+        for="*"\n+        name="prefs_workflow_policy_mapping"\n+        class=".views.WorkflowPolicyMapping"\n+        template="prefs_workflow_policy_mapping.pt"\n+        permission="zope2.View"\n+        />\n+\n+    <browser:page\n+        for="*"\n+        name="prefs_workflow_localpolicies_form"\n+        class=".views.WorkflowPoliciesForm"\n+        template="prefs_workflow_localpolicies_form.pt"\n+        permission="zope2.View"\n+        />\n+\n+</configure>\n+\ndiff --git a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration.pt b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\nsimilarity index 82%\nrename from Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration.pt\nrename to Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\nindex 4b43f2b..ca12bb4 100644\n--- a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\n@@ -1,35 +1,13 @@\n-<tal:block replace="nothing">\n--*- coding: utf-8 -*-\n-## CMFPlacefulWorkflow\n-## Copyright (C)2005-2008 Ingeniweb\n-\n-## This program is free software; you can redistribute it and/or modify\n-## it under the terms of the GNU General Public License as published by\n-## the Free Software Foundation; either version 2 of the License, or\n-## (at your option) any later version.\n-\n-## This program is distributed in the hope that it will be useful,\n-## but WITHOUT ANY WARRANTY; without even the implied warranty of\n-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-## GNU General Public License for more details.\n-\n-## You should have received a copy of the GNU General Public License\n-## along with this program; see the file COPYING. If not, write to the\n-## Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n-\n-Workflow policy configuration template\n-\n-</tal:block>\n <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n       lang="en"\n-      metal:use-macro="here/main_template/macros/master"\n+      metal:use-macro="context/main_template/macros/master"\n       i18n:domain="cmfplacefulworkflow">\n \n     <div metal:fill-slot="main"\n-         tal:define="wf_list here/portal_workflow/objectIds;\n-                     pwtool here/portal_placeful_workflow;\n-                     config python: pwtool.getWorkflowPolicyConfig(here);\n-                     siteroot python: pwtool.isSiteRoot(here);">\n+         tal:define="wf_list context/portal_workflow/objectIds;\n+                     pwtool context/portal_placeful_workflow;\n+                     config python: pwtool.getWorkflowPolicyConfig(context);\n+                     siteroot python: pwtool.isSiteRoot(context);">\n \n         <h1 i18n:translate="heading_workflow_policies">\n             Workflow policies\' local configuration management\n@@ -50,11 +28,11 @@ Workflow policy configuration template\n \n         <tal:nosite tal:condition="not:siteroot">\n \n-          <p tal:condition="python:not config and here.isPrincipiaFolderish">\n-            <form action="placeful_workflow_configuration_add" method="POST">\n+          <p tal:condition="python:not config and context.isPrincipiaFolderish">\n+            <form action="placeful_workflow_configuration" method="POST">\n                 <button type="submit" name="add_wp_for_type" i18n:translate="description_add_workflow_policy_for_type">\n                   Add a workflow policy\'s local configuration in the\n-                  <span tal:replace="python:here.translate(here.portal_type)"\n+                  <span tal:replace="python:context.translate(context.portal_type)"\n                         i18n:name="portal_type">\n                       portal type\n                   </span>\n@@ -62,9 +40,8 @@ Workflow policy configuration template\n             </form>\n           </p>\n \n-          <p tal:condition="python:not here.isPrincipiaFolderish and here is not container">\n-              <form action="placeful_workflow_configuration_add" method="POST"\n-                    tal:attributes="action python:container.absolute_url()+\'/placeful_workflow_configuration_add\'">\n+          <p tal:condition="python:not context.isPrincipiaFolderish and context is not container">\n+              <form action="placeful_workflow_configuration" method="POST">\n                 <button type="submit" name="add_wp_local_config" i18n:translate="description_add_workflow_policy">\n                   Add Workflow policy\'s local configuration\n                 </button>\n@@ -73,8 +50,8 @@ Workflow policy configuration template\n \n           <form id="edit_form"\n                 name="edit_form"\n-                method="post"\n-                action="placeful_workflow_configuration_set"\n+                method="POST"\n+                action="${context/absolute_url}/@@placeful_workflow_configuration"\n                 tal:condition="config">\n \n               <fieldset tal:define="policies pwtool/getWorkflowPolicyInfos;\n@@ -202,7 +179,7 @@ Workflow policy configuration template\n                   <div class="field">\n \n                     <input type="checkbox" checked="checked" class="noborder"\n-                           name="update_security" value="" id="cb_update_security" />\n+                           name="update_security" value="update_security" id="cb_update_security" />\n \n                     <label for="cb_update_security"\n                            i18n:domain="cmfplacefulworkflow"\ndiff --git a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_localpolicies_form.pt b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt\nsimilarity index 84%\nrename from Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_localpolicies_form.pt\nrename to Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt\nindex 6c4b459..0e5ee11 100644\n--- a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_localpolicies_form.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt\n@@ -1,28 +1,6 @@\n-<tal:block replace="nothing">\n--*- coding: utf-8 -*-\n-## CMFPlacefulWorkflow\n-## Copyright (C)2005 Ingeniweb\n-\n-## This program is free software; you can redistribute it and/or modify\n-## it under the terms of the GNU General Public License as published by\n-## the Free Software Foundation; either version 2 of the License, or\n-## (at your option) any later version.\n-\n-## This program is distributed in the hope that it will be useful,\n-## but WITHOUT ANY WARRANTY; without even the implied warranty of\n-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-## GNU General Public License for more details.\n-\n-## You should have received a copy of the GNU General Public License\n-## along with this program; see the file COPYING. If not, write to the\n-## Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n-\n-CMFPlacefulWorkflow configuration panel\n-\n-</tal:block>\n <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n       lang="en"\n-      metal:use-macro="here/prefs_main_template/macros/master"\n+      metal:use-macro="context/prefs_main_template/macros/master"\n       i18n:domain="cmfplacefulworkflow">\n \n     <metal:block fill-slot="top_slot"/>\n@@ -34,7 +12,7 @@ CMFPlacefulWorkflow configuration panel\n         <span tal:define="dummy python:request.response.setHeader(\'pragma\',\'no-cache\')" />\n \n         <div id="content"\n-             tal:condition="python:checkPermission(\'Manage portal\', here)">\n+             tal:condition="python:checkPermission(\'Manage portal\', context)">\n \n             <h5 class="hiddenStructure">Views</h5>\n \n@@ -73,8 +51,8 @@ CMFPlacefulWorkflow configuration panel\n                 <form action=""\n                       name=""\n                       method="post"\n-                      tal:attributes="action string:prefs_workflow_localpolicies_set"\n-                      tal:define="wfp python:here.portal_placeful_workflow;">\n+                      tal:attributes="action string:${context/absolute_url}/@@prefs_workflow_localpolicies_form"\n+                      tal:define="wfp python:context.portal_placeful_workflow;">\n \n                     <fieldset>\n                         <legend i18n:translate="legend_workflow_policies">Existing Workflow Policies</legend>\n@@ -118,7 +96,7 @@ CMFPlacefulWorkflow configuration panel\n                         <legend i18n:translate="legend_add_workflow_policy">Add a workflow policy</legend>\n                         <div class="field"\n                              tal:define="error errors/policy_id | nothing;"\n-                             tal:attributes="class python:test(error, \'field error\', \'field\')">\n+                             tal:attributes="class python:\'field error\' if error else \'field\'">\n \n                             <label i18n:translate="label_new_policy_id">New policy Id</label>\n                             <span class="fieldRequired" title="Required"\n@@ -137,7 +115,7 @@ CMFPlacefulWorkflow configuration panel\n                         </div>\n                         <div class="field"\n                              tal:define="error errors/policy_id | nothing;"\n-                             tal:attributes="class python:test(error, \'field error\', \'field\')">\n+                             tal:attributes="class python:\'field error\' if error else \'field\'">\n \n                             <label i18n:translate="label_duplicate_policy_id">Duplicate another policy</label>\n                             <span class="fieldRequired" title="Required"\n@@ -178,8 +156,8 @@ CMFPlacefulWorkflow configuration panel\n         </div>\n         <div id="content"\n              class="documentEditable"\n-             tal:condition="python:not checkPermission(\'Manage portal\', here)">\n-            <tal:block replace="here/raiseUnauthorized" />\n+             tal:condition="python:not checkPermission(\'Manage portal\', context)">\n+            <tal:block replace="context/raiseUnauthorized" />\n         </div>\n \n     </div>\ndiff --git a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping.pt b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt\nsimilarity index 93%\nrename from Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping.pt\nrename to Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt\nindex 29743d6..a01013d 100644\n--- a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt\n@@ -1,14 +1,14 @@\n <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n       lang="en"\n-      metal:use-macro="here/prefs_main_template/macros/master"\n+      metal:use-macro="context/prefs_main_template/macros/master"\n       i18n:domain="cmfplacefulworkflow">\n \n     <metal:block fill-slot="top_slot"/>\n \n     <div metal:fill-slot="prefs_configlet_content"\n-         tal:define="allowedContentTypes allowedSortedContentTypes|here/allowedContentTypes;\n+         tal:define="allowedContentTypes allowedSortedContentTypes|context/allowedContentTypes;\n                      wfpid python:request.get(\'wfpid\');\n-                     wf_policy python:here.portal_placeful_workflow.getWorkflowPolicyById(wfpid);\n+                     wf_policy python:context.portal_placeful_workflow.getWorkflowPolicyById(wfpid);\n                      wtool context/portal_workflow;\n                      wf_list python: [{\'id\': obj.getId(), \'title\': obj.title_or_id()} for obj in wtool.objectValues()];"\n          class="configlet">\n@@ -16,7 +16,7 @@\n         <span tal:define="dummy python:request.response.setHeader(\'pragma\',\'no-cache\')" />\n \n         <div id="content"\n-             tal:condition="python:checkPermission(\'Manage portal\', here)">\n+             tal:condition="python:checkPermission(\'Manage portal\', context)">\n \n             <h5 class="hiddenStructure">Views</h5>\n \n@@ -46,7 +46,7 @@\n                     Custom workflow policy which maps content types to workflows.\n                 </p>\n                 <form name="prefs_workflow_policy_mapping_set"\n-                      action="prefs_workflow_policy_mapping_set"\n+                      action="${context/absolute_url}/@@prefs_workflow_policy_mapping"\n                       method="post">\n \n                     <fieldset>\n@@ -120,7 +120,7 @@\n \n                                 <option tal:repeat="wf wf_list"\n                                         tal:attributes="value wf/id;\n-                                                        selected python:test((wf[\'id\'],)==wf_policy.getDefaultChain(here), \'selected\', None)"\n+                                                        selected python:\'selected\' if (wf[\'id\'],)==wf_policy.getDefaultChain(context) else None"\n                                         tal:content="wf/title"\n                                         i18n:domain="plone"\n                                         i18n:translate="">\n@@ -157,18 +157,18 @@\n                                             <select id="select_workflow" name="workflow_id"\n                                                     tal:attributes="name string:wf.${ctype_id}:record;" >\n                                                 <option value="acquisition"\n-                                                        tal:attributes="selected python:test(chain is None, \'selected\', None);"\n+                                                        tal:attributes="selected python:\'selected\' if chain is None else None;"\n                                                         i18n:translate="label_mapping_acquire_workflow">Acquire workflow from above</option>\n                                                 <option value=""\n-                                                        tal:attributes="selected python:test(chain == (), \'selected\', None);"\n+                                                        tal:attributes="selected python:\'selected\' if chain == () else None;"\n                                                         i18n:translate="label_mapping_no_workflow">No workflow</option>\n \n                                                 <option value="(Default)"\n-                                                        tal:attributes="selected python:test(chain == \'(Default)\', \'selected\', None);"\n+                                                        tal:attributes="selected python:\'selected\' if chain == \'(Default)\' else None;"\n                                                         i18n:translate="label_mapping_default_worflow">Default workflow for the policy</option>\n                                                 <option tal:repeat="wf wf_list"\n                                                         tal:attributes="value wf/id;\n-                                                                        selected python:test((wf[\'id\'],) == chain, \'selected\', None)"\n+                                                                        selected python:\'selected\' if (wf[\'id\'],) == chain else None"\n                                                         tal:content="wf/title"\n                                                         i18n:domain="plone"\n                                                         i18n:translate="">workflow_id</option>\ndiff --git a/Products/CMFPlacefulWorkflow/browser/views.py b/Products/CMFPlacefulWorkflow/browser/views.py\nnew file mode 100644\nindex 0000000..f12f567\n--- /dev/null\n+++ b/Products/CMFPlacefulWorkflow/browser/views.py\n@@ -0,0 +1,144 @@\n+# -*- coding: utf-8 -*-\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlacefulWorkflow import CMFPlacefulWorkflowMessageFactory as _\n+from Products.Five import BrowserView\n+\n+\n+class PlacefulWorkflowConfiguration(BrowserView):\n+    """Manage placeful wf for a item or container\n+    """\n+\n+    def __call__(self):\n+        context = self.context\n+        request = self.request\n+\n+        policy_in = request.form.get(\'policy_in\', None)\n+        policy_below = request.form.get(\'policy_below\', None)\n+\n+        # Form submission will either have update_security as a key\n+        # meaning user wants to do it OR no key at all. If this script\n+        # is called directly, we use the parameter\n+        update_security = request.form.get(\'update_security\', None)\n+\n+        if \'add_wp_for_type\' in request.form:\n+            context.manage_addProduct[\'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig(request)\n+            context.plone_utils.addPortalMessage(_(u\'Workflow policy configuration added.\'))\n+            return request.response.redirect(\'placeful_workflow_configuration\')\n+\n+        # This script is used for both the save and cancel button\n+        cancel = False\n+        submit = request.form.get(\'submit\', None)\n+        if not submit:\n+            return self.index()\n+\n+        if submit is not None and submit == \'Cancel\':\n+            cancel = True\n+            message = _(u\'Configuration changes cancelled.\')\n+\n+\n+        if not cancel:\n+            tool = getToolByName(context, \'portal_placeful_workflow\')\n+            config = tool.getWorkflowPolicyConfig(context)\n+            if not config:\n+                message = _(u\'No config in this folder.\')\n+            else:\n+                if not tool.isValidPolicyName(policy_in) and not policy_in == \'\':\n+                    raise AttributeError("%s is not a valid policy id" % policy_in)\n+\n+                if not tool.isValidPolicyName(policy_below) and not policy_below == \'\':\n+                    raise AttributeError("%s is not a valid policy id" % policy_below)\n+\n+                config.setPolicyIn(policy_in, update_security)\n+                config.setPolicyBelow(policy_below, update_security)\n+\n+                message = _(\'Changed policies.\')\n+\n+        context.plone_utils.addPortalMessage(message)\n+        return request.response.redirect(\'placeful_workflow_configuration\')\n+\n+\n+class WorkflowPoliciesForm(BrowserView):\n+\n+    def __call__(self):\n+        context = self.context\n+        request = self.request\n+\n+        policy_ids = request.get(\'policy_ids\', [])\n+        policy_id = request.get(\'policy_id\', None)\n+        delete = request.get(\'delete\', None)\n+        add = request.get(\'add\', None)\n+        policy_duplicate_id = request.get(\'policy_duplicate_id\', \'empty\')\n+\n+        pwtool = getToolByName(context, \'portal_placeful_workflow\')\n+        plone_utils = getToolByName(context, \'plone_utils\')\n+\n+        if delete and policy_ids:\n+            for policy_id in policy_ids:\n+                if policy_id in pwtool.objectIds():\n+                    pwtool.manage_delObjects([policy_id, ])\n+            plone_utils.addPortalMessage(_(u\'Deleted Local Workflow Policy.\'), \'info\')\n+            return request.response.redirect(\'prefs_workflow_localpolicies_form\')\n+\n+        elif add:\n+            if policy_id:\n+                pwtool.manage_addWorkflowPolicy(id=policy_id, duplicate_id=policy_duplicate_id)\n+                plone_utils.addPortalMessage(_(u\'Local Workflow Policy added.\'), \'info\')\n+                return request.response.redirect(\'prefs_workflow_policy_mapping?wfpid=\' + policy_id)\n+\n+            else:\n+                plone_utils.addPortalMessage(_(u\'The policy Id is required.\'), \'error\')\n+                return request.response.redirect(\'prefs_workflow_localpolicies_form\')\n+\n+        return self.index()\n+\n+class WorkflowPolicyMapping(BrowserView):\n+    """\n+    """\n+\n+    def __call__(self):\n+        request = self.request\n+        if not request.get(\'submit\', None):\n+            return self.index()\n+\n+        context = self.context\n+        plone_utils = getToolByName(context, \'plone_utils\')\n+\n+        wfpid = request.get(\'wfpid\', None)\n+        if not wfpid:\n+            plone_utils.addPortalMessage(_(u\'No Policy selected.\'), \'error\')\n+            return request.response.redirect(portal_url + \'/@@prefs_workflow_localpolicies_form\')\n+\n+        tool = getToolByName(context, \'portal_placeful_workflow\')\n+        policy = tool.getWorkflowPolicyById(wfpid)\n+        title = request.get(\'title\', None)\n+        description = request.get(\'description\', None)\n+        default_workflow_id = request.get(\'default_workflow_id\', None)\n+        wf = request.get(\'wf\', None)\n+\n+        if title:\n+            plone_utils.addPortalMessage(title)\n+            policy.setTitle(title)\n+        else:\n+            plone_utils.addPortalMessage(_(u\'Title is required.\'), \'error\')\n+            return request.response.redirect(\'@@prefs_workflow_policy_mapping?wfpid=%s\' % wfpid)\n+\n+        policy.setDescription(description)\n+        policy.setDefaultChain(\n+            default_chain=(default_workflow_id, ),\n+            REQUEST=request)\n+\n+        # for filtering special option values\n+        CHAIN_MAP = {\'acquisition\': None, \'\': ()}\n+\n+        for pt, wflow in list(wf.items()):\n+            if wflow in CHAIN_MAP:\n+                chain = CHAIN_MAP[wflow]\n+            else:\n+                chain = (wflow, )\n+            policy.setChain(portal_type=pt, chain=chain, REQUEST=request)\n+\n+        wf_tool = getToolByName(context, \'portal_workflow\')\n+        wf_tool.updateRoleMappings()\n+\n+        plone_utils.addPortalMessage(_(u\'Changes to criteria saved.\'))\n+        return request.response.redirect(\'prefs_workflow_policy_mapping?wfpid=%s\' % wfpid)\ndiff --git a/Products/CMFPlacefulWorkflow/configure.zcml b/Products/CMFPlacefulWorkflow/configure.zcml\nindex 7260aa3..c0badd1 100644\n--- a/Products/CMFPlacefulWorkflow/configure.zcml\n+++ b/Products/CMFPlacefulWorkflow/configure.zcml\n@@ -1,5 +1,7 @@\n-<configure xmlns="http://namespaces.zope.org/zope">\n+<configure xmlns="http://namespaces.zope.org/zope"\n+    xmlns:zcml="http://namespaces.zope.org/zcml">\n \n+  <include package=".browser"/>\n   <include file="implements.zcml"/>\n   <include file="exportimport.zcml"/>\n   <include file="profiles.zcml"/>\ndiff --git a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration_add.py b/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration_add.py\ndeleted file mode 100644\nindex ed750dc..0000000\n--- a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration_add.py\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-##parameters=\n-##title=add workflow policy configuration\n-##\n-\n-from Products.CMFPlacefulWorkflow import CMFPlacefulWorkflowMessageFactory as _\n-\n-context.manage_addProduct[\'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n-\n-context.plone_utils.addPortalMessage(_(u\'Workflow policy configuration added.\'))\n-context.REQUEST.RESPONSE.redirect(\'placeful_workflow_configuration\')\ndiff --git a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration_set.py b/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration_set.py\ndeleted file mode 100644\nindex c1b7259..0000000\n--- a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration_set.py\n+++ /dev/null\n@@ -1,39 +0,0 @@\n-##parameters=policy_in=\'\', policy_below=\'\', update_security=False\n-##title=set placeful workflow configuration\n-##\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlacefulWorkflow import CMFPlacefulWorkflowMessageFactory as _\n-\n-request = context.REQUEST\n-\n-# Form submission will either have update_security as a key\n-# meaning user wants to do it OR no key at all. If this script\n-# is called directly, we use the parameter\n-update_security = (\'update_security\' in request.form) or update_security\n-\n-# This script is used for both the save and cancel button\n-cancel = False\n-submit = request.form.get(\'submit\', None)\n-if submit is not None and submit == \'Cancel\':\n-    cancel = True\n-    message = _(u\'Configuration changes cancelled.\')\n-\n-if not cancel:\n-    tool = getToolByName(context, \'portal_placeful_workflow\')\n-    config = tool.getWorkflowPolicyConfig(context)\n-    if not config:\n-        message = _(u\'No config in this folder.\')\n-    else:\n-        if not tool.isValidPolicyName(policy_in) and not policy_in == \'\':\n-            raise AttributeError("%s is not a valid policy id" % policy_in)\n-\n-        if not tool.isValidPolicyName(policy_below) and not policy_below == \'\':\n-            raise AttributeError("%s is not a valid policy id" % policy_below)\n-\n-        config.setPolicyIn(policy_in, update_security)\n-        config.setPolicyBelow(policy_below, update_security)\n-\n-        message = _(\'Changed policies.\')\n-\n-context.plone_utils.addPortalMessage(message)\n-request.RESPONSE.redirect(\'placeful_workflow_configuration\')\ndiff --git a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_localpolicies_set.py b/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_localpolicies_set.py\ndeleted file mode 100644\nindex 7fc8fff..0000000\n--- a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_localpolicies_set.py\n+++ /dev/null\n@@ -1,32 +0,0 @@\n-##parameters=delete=None, add=None\n-##title=set local workflow policies prefs\n-##\n-\n-from Products.CMFPlacefulWorkflow import CMFPlacefulWorkflowMessageFactory as _\n-from Products.CMFCore.utils import getToolByName\n-\n-request = context.REQUEST\n-\n-policy_ids = request.get(\'policy_ids\', [])\n-policy_id = request.get(\'policy_id\', None)\n-policy_duplicate_id = request.get(\'policy_duplicate_id\', \'empty\')\n-\n-pwtool = getToolByName(context, \'portal_placeful_workflow\')\n-plone_utils = getToolByName(context, \'plone_utils\')\n-\n-if delete and policy_ids:\n-    for policy_id in policy_ids:\n-        if policy_id in pwtool.objectIds():\n-            pwtool.manage_delObjects([policy_id, ])\n-    plone_utils.addPortalMessage(_(u\'Deleted Local Workflow Policy.\'), \'info\')\n-    request.RESPONSE.redirect(\'prefs_workflow_localpolicies_form\')\n-\n-elif add:\n-    if policy_id:\n-        pwtool.manage_addWorkflowPolicy(id=policy_id, duplicate_id=policy_duplicate_id)\n-        plone_utils.addPortalMessage(_(u\'Local Workflow Policy added.\'), \'info\')\n-        request.RESPONSE.redirect(\'prefs_workflow_policy_mapping?wfpid=\' + policy_id)\n-\n-    else:\n-        plone_utils.addPortalMessage(_(u\'The policy Id is required.\'), \'error\')\n-        request.RESPONSE.redirect(\'prefs_workflow_localpolicies_form\')\ndiff --git a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping.pt.metadata b/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping.pt.metadata\ndeleted file mode 100644\nindex b11bb32..0000000\n--- a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping.pt.metadata\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-[default]\n-title=Workflow Policy\n-\n-[security]\n-View=0:Authenticated\ndiff --git a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping_set.py b/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping_set.py\ndeleted file mode 100644\nindex c9a2102..0000000\n--- a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping_set.py\n+++ /dev/null\n@@ -1,42 +0,0 @@\n-##parameters=submit, wfpid, title, description, wf, default_workflow_id\n-##title=set local workflow policy mapping\n-#-*- coding: utf-8 -*-\n-\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlacefulWorkflow import CMFPlacefulWorkflowMessageFactory as _\n-\n-plone_utils = getToolByName(context, \'plone_utils\')\n-\n-request = context.REQUEST\n-policy = getToolByName(context, \'portal_placeful_workflow\').getWorkflowPolicyById(wfpid)\n-\n-if title:\n-    plone_utils.addPortalMessage(title)\n-    policy.setTitle(title)\n-else:\n-    plone_utils.addPortalMessage(_(u\'Title is required.\'), \'error\')\n-    if request:\n-        request.RESPONSE.redirect(\'prefs_workflow_policy_mapping?wfpid=%s\' % wfpid)\n-    return request\n-\n-policy.setDescription(description)\n-\n-policy.setDefaultChain(default_chain=(default_workflow_id, ), REQUEST=context.REQUEST)\n-\n-# for filtering special option values\n-CHAIN_MAP = {\'acquisition\': None, \'\': ()}\n-for pt, wf in wf.items():\n-    if wf in CHAIN_MAP:\n-        chain = CHAIN_MAP[wf]\n-    else:\n-        chain = (wf, )\n-    policy.setChain(portal_type=pt, chain=chain, REQUEST=context.REQUEST)\n-\n-wf_tool = getToolByName(context, \'portal_workflow\')\n-wf_tool.updateRoleMappings()\n-\n-plone_utils.addPortalMessage(_(u\'Changes to criteria saved.\'))\n-if request:\n-    request.RESPONSE.redirect(\'prefs_workflow_policy_mapping?wfpid=%s\' % wfpid)\n-\n-return request\ndiff --git a/Products/CMFPlacefulWorkflow/testing.py b/Products/CMFPlacefulWorkflow/testing.py\nnew file mode 100644\nindex 0000000..9bcdca4\n--- /dev/null\n+++ b/Products/CMFPlacefulWorkflow/testing.py\n@@ -0,0 +1,60 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n+from plone.app.robotframework.testing import REMOTE_LIBRARY_BUNDLE_FIXTURE\n+from plone.app.testing import applyProfile\n+from plone.app.testing import FunctionalTesting\n+from plone.app.testing import IntegrationTesting\n+from plone.app.testing import PloneSandboxLayer\n+from Products.GenericSetup import profile_registry\n+from Products.CMFCore.interfaces import ISiteRoot\n+from Products.GenericSetup import EXTENSION\n+from plone.testing import z2\n+\n+import Products.CMFPlacefulWorkflow\n+\n+\n+class ProductsCmfplacefulworkflowLayer(PloneSandboxLayer):\n+\n+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n+\n+    def setUpZope(self, app, configurationContext):\n+        # Load any other ZCML that is required for your tests.\n+        # The z3c.autoinclude feature is disabled in the Plone fixture base\n+        # layer.\n+        self.loadZCML(package=Products.CMFPlacefulWorkflow)\n+        profile_registry.registerProfile(\n+            name=\'exportimport\', title=\'Test Placeful Workflow Profile\',\n+            description=(\n+                "Tests the placeful workflow policy handler."),\n+            path=\'profiles/exportimport\',\n+            product=\'Products.CMFPlacefulWorkflow.tests\',\n+            profile_type=EXTENSION, for_=ISiteRoot)\n+        z2.installProduct(app, \'Products.CMFPlacefulWorkflow\')\n+\n+    def setUpPloneSite(self, portal):\n+        applyProfile(portal, \'Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow\')\n+\n+\n+PRODUCTS_CMFPLACEFULWORKFLOW_FIXTURE = ProductsCmfplacefulworkflowLayer()\n+\n+\n+PRODUCTS_CMFPLACEFULWORKFLOW_INTEGRATION_TESTING = IntegrationTesting(\n+    bases=(PRODUCTS_CMFPLACEFULWORKFLOW_FIXTURE,),\n+    name=\'ProductsCmfplacefulworkflowLayer:IntegrationTesting\',\n+)\n+\n+\n+PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING = FunctionalTesting(\n+    bases=(PRODUCTS_CMFPLACEFULWORKFLOW_FIXTURE,),\n+    name=\'ProductsCmfplacefulworkflowLayer:FunctionalTesting\',\n+)\n+\n+\n+PRODUCTS_CMFPLACEFULWORKFLOW_ACCEPTANCE_TESTING = FunctionalTesting(\n+    bases=(\n+        PRODUCTS_CMFPLACEFULWORKFLOW_FIXTURE,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+        z2.ZSERVER_FIXTURE,\n+    ),\n+    name=\'ProductsCmfplacefulworkflowLayer:AcceptanceTesting\',\n+)\ndiff --git a/Products/CMFPlacefulWorkflow/tests/CMFPlacefulWorkflowTestCase.py b/Products/CMFPlacefulWorkflow/tests/CMFPlacefulWorkflowTestCase.py\nindex 6bdefdc..bc71f79 100644\n--- a/Products/CMFPlacefulWorkflow/tests/CMFPlacefulWorkflowTestCase.py\n+++ b/Products/CMFPlacefulWorkflow/tests/CMFPlacefulWorkflowTestCase.py\n@@ -18,58 +18,20 @@\n """\n CMFPlacefulWorkflow TestCase module\n """\n+from Products.CMFPlacefulWorkflow.testing import PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING\n \n-from Products.CMFCore.interfaces import ISiteRoot\n-from Products.GenericSetup import EXTENSION\n-from Products.GenericSetup import profile_registry\n-from plone.app import testing\n-from plone.app.testing.bbb import PloneTestCase\n-from plone.app.testing.bbb import PloneTestCaseFixture\n-from plone.testing import z2\n+import unittest\n \n \n-class PlacefulWorkflowLayer(PloneTestCaseFixture):\n+class CMFPlacefulWorkflowTestCase(unittest.TestCase):\n \n-    def setUpZope(self, app, configurationContext):\n-        super(PlacefulWorkflowLayer, self).setUpZope(app, configurationContext)\n-        profile_registry.registerProfile(\n-            name=\'exportimport\', title=\'Test Placeful Workflow Profile\',\n-            description=(\n-                "Tests the placeful workflow policy handler."),\n-            path=\'profiles/exportimport\',\n-            product=\'Products.CMFPlacefulWorkflow.tests\',\n-            profile_type=EXTENSION, for_=ISiteRoot)\n-        z2.installProduct(app, \'Products.CMFPlacefulWorkflow\')\n \n-    def setUpPloneSite(self, portal):\n-        super(PlacefulWorkflowLayer, self).setUpPloneSite(portal)\n-        # install sunburst theme\n-        testing.applyProfile(\n-            portal, \'Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow\')\n-\n-    def tearDownZope(self, app):\n-        super(PlacefulWorkflowLayer, self).tearDownZope(app)\n-        z2.uninstallProduct(app, \'Products.CMFPlacefulWorkflow\')\n-\n-PWF_FIXTURE = PlacefulWorkflowLayer()\n-PWF_LAYER = testing.FunctionalTesting(bases=(PWF_FIXTURE, ),\n-                                      name=\'PlacefulWorkflowTestCase:Functional\')\n-\n-\n-class CMFPlacefulWorkflowTestCase(PloneTestCase):\n-\n-    layer = PWF_LAYER\n+    layer = PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING\n \n     class Session(dict):\n         def set(self, key, value):\n             self[key] = value\n \n-    def _setup(self):\n-        PloneTestCase.PloneTestCase._setup(self)\n-        self.app.REQUEST[\'SESSION\'] = self.Session()\n-\n     def getPermissionsOfRole(self, role):\n         perms = self.portal.permissionsOfRole(role)\n         return [p[\'name\'] for p in perms if p[\'selected\']]\n-\n-CMFPlacefulWorkflowFunctionalTestCase = CMFPlacefulWorkflowTestCase\ndiff --git a/Products/CMFPlacefulWorkflow/tests/policy_form.txt b/Products/CMFPlacefulWorkflow/tests/policy_form.txt\nindex 57e3e8d..b327c7b 100644\n--- a/Products/CMFPlacefulWorkflow/tests/policy_form.txt\n+++ b/Products/CMFPlacefulWorkflow/tests/policy_form.txt\n@@ -5,10 +5,24 @@ Placeful workflow policy form\n \n The Placeful workflow policy form works in a real browser.\n \n+Create some content\n+\n+    >>> from plone.app.testing import setRoles\n+    >>> from plone.app.testing import TEST_USER_ID\n+    >>> portal = layer[\'portal\']\n+    >>> setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+    >>> portal.invokeFactory(\'Document\', \'front-page\')\n+    \'front-page\'\n+    >>> portal.setDefaultPage(\'front-page\')\n+    >>> portal.invokeFactory(\'Folder\', \'f1\')\n+    \'f1\'\n+    >>> folder = portal[\'f1\']\n+    >>> from transaction import commit\n+    >>> commit()\n+\n Open a browser and log in as a user who can use the policy form.\n \n     >>> from plone.testing.z2 import Browser\n-    >>> portal = layer[\'portal\']\n     >>> browser = Browser(layer[\'app\'])\n     >>> browser.open(portal.absolute_url())\n     >>> browser.getLink(\'Log in\').click()\n@@ -22,7 +36,8 @@ Open a browser and log in as a user who can use the policy form.\n \n Open the policy form for the front-page and for the folder.\n \n-    >>> browser.getLink(\'Policy\').click()\n+    >>> browser.open(portal.absolute_url())\n+    >>> browser.getLink(id=\'workflow-transition-policy\').click()\n     >>> browser.url\n     \'http://nohost/plone/front-page/placeful_workflow_configuration\'\n     >>> print(browser.contents)\n@@ -40,44 +55,39 @@ Open the policy form for the front-page and for the folder.\n \n The policy form also works for pages that aren\'t the default page.\n \n-    >>> from plone.app.testing import login, TEST_USER_NAME\n-    >>> login(portal, TEST_USER_NAME)\n-    >>> from plone.app.testing import TEST_USER_ID\n-    >>> folder = portal.portal_membership.getHomeFolder(TEST_USER_ID)\n     >>> page = folder[folder.invokeFactory(type_name=\'Document\', id=\'foo\')]\n-    >>> from transaction import commit\n     >>> commit()\n     >>> browser.open(page.absolute_url())\n     >>> browser.getLink(\'Policy\').click()\n     >>> browser.url\n-    \'http://nohost/plone/Members/test_user_1_/foo/placeful_workflow_configuration\'\n+    \'http://nohost/plone/f1/foo/placeful_workflow_configuration\'\n     >>> print(browser.contents)\n     <...\n     <h1>...Workflow policies\' local configuration management...</h1>\n     ...\n \n-Without a local policy document \'foo\', contained inside \'/Members/test_user_1_\' is in review state visible:\n+Without a local policy document \'foo\', contained inside \'/f1\' is in review state visible:\n \n     >>> browser.open(folder.absolute_url())\n     >>> browser.url\n-    \'http://nohost/plone/Members/test_user_1_\'\n+    \'http://nohost/plone/f1\'\n \n     >>> foo_link = browser.getLink(\'foo\')\n-    >>> \'state-visible\' in foo_link.attrs[\'class\']\n+    >>> \'state-private\' in foo_link.attrs[\'class\']\n     True\n \n-Now we will add a local policy on the user folder. Simple Publication for the folder, Intranet below it:\n+Now we will add a local policy on the user folder. Old Plone Publication for the folder, Intranet below it:\n \n     >>> browser.open(folder.absolute_url())\n     >>> browser.getLink(\'Policy\').click()\n     >>> browser.url\n-    \'http://nohost/plone/Members/test_user_1_/placeful_workflow_configuration\'\n+    \'http://nohost/plone/f1/placeful_workflow_configuration\'\n     >>> browser.getControl(name="add_wp_for_type").click()\n     >>> \'Update catalog role mappings\' in browser.contents\n     True\n \n     >>> ctrl_in = browser.getControl(name=\'policy_in\')\n-    >>> ctrl_in.getControl(value=\'simple-publication\').selected=True\n+    >>> ctrl_in.getControl(value=\'old-plone\').selected=True\n \n     >>> ctrl_below = browser.getControl(name=\'policy_below\')\n     >>> ctrl_below.getControl(value=\'intranet\').selected=True\n@@ -95,7 +105,7 @@ And save the policies:\n We validate policy settings were saved:\n \n     >>> ctrl_in = browser.getControl(name=\'policy_in\')\n-    >>> ctrl_in.getControl(value=\'simple-publication\').selected\n+    >>> ctrl_in.getControl(value=\'old-plone\').selected\n     True\n \n     >>> ctrl_below = browser.getControl(name=\'policy_below\')\n@@ -106,7 +116,7 @@ And mappings were not updated:\n \n     >>> browser.open(folder.absolute_url())\n     >>> foo_link = browser.getLink(\'foo\')\n-    >>> \'state-visible\' in foo_link.attrs[\'class\']\n+    >>> \'state-private\' in foo_link.attrs[\'class\']\n     True\n \n If we are sure, or willing to wait, it is possible to update role mappings:\ndiff --git a/Products/CMFPlacefulWorkflow/tests/testCMFPlacefulWorkflow.py b/Products/CMFPlacefulWorkflow/tests/testCMFPlacefulWorkflow.py\nindex ccbefd5..acaba08 100644\n--- a/Products/CMFPlacefulWorkflow/tests/testCMFPlacefulWorkflow.py\n+++ b/Products/CMFPlacefulWorkflow/tests/testCMFPlacefulWorkflow.py\n@@ -25,7 +25,10 @@\n from Products.CMFPlacefulWorkflow.tests.CMFPlacefulWorkflowTestCase import CMFPlacefulWorkflowTestCase  # noqa: E501\n from Products.CMFPlone.utils import get_installer\n from zExceptions import Forbidden\n-\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import logout\n+from plone.app.testing import login\n \n _edit_permissions = []\n _all_permissions = _edit_permissions\n@@ -42,8 +45,6 @@ def createMember(self, id, pw, email, roles=(\'Member\', )):\n         return member\n \n     def setupSecurityContext(self, ):\n-        self.logout()\n-        self.loginAsPortalOwner()\n         # Create a few members\n         self.user1 = self.createMember(\'user1\', \'abcd4\', \'abc@domain.tld\')\n         self.user2 = self.createMember(\'user2\', \'abcd4\', \'abc@domain.tld\')\n@@ -52,14 +53,12 @@ def setupSecurityContext(self, ):\n         self.folder = self.portal.portal_membership.getHomeFolder(\'user1\')\n         self.qi = get_installer(self.portal)\n         self.qi.install_product(\'CMFPlacefulWorkflow\')\n-        self.logout()\n \n-    def afterSetUp(self, ):\n-        """\n-        afterSetUp(self) => This method is called to create an empty PloneArticle.\n-        It also joins three users called \'user1\', \'user2\' and \'user3\'.\n-        """\n-        # some usefull properties/tool\n+    def setUp(self, ):\n+        self.portal = self.layer[\'portal\']\n+        self.app = self.layer[\'app\']\n+        self.app.REQUEST[\'SESSION\'] = self.Session()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.catalog = getToolByName(self.portal, \'portal_catalog\')\n         self.workflow = getToolByName(self.portal, \'portal_workflow\')\n         self.membershipTool = getToolByName(self.portal, \'portal_membership\')\n@@ -70,7 +69,7 @@ def afterSetUp(self, ):\n \n         self.setupSecurityContext()\n \n-        self.login(\'user1\')\n+        # login(self.portal, \'user1\')\n         # self.createPolicy()\n \n     def createArticle(self, ):\n@@ -87,7 +86,6 @@ def test_marker_applied_and_unapplied(self):\n         the install, and removed by the uninstall.\n         """\n         self.assertTrue(IPlacefulMarker.providedBy(self.workflow))\n-        self.loginAsPortalOwner()\n         self.qi.uninstall_product(\'CMFPlacefulWorkflow\')\n         self.assertFalse(IPlacefulMarker.providedBy(self.workflow))\n \n@@ -104,7 +102,6 @@ def test_reinstall(self):\n \n     def test_activation_reactivation(self):\n         """Test multiple installs and uninstalls."""\n-        self.loginAsPortalOwner()\n         self.qi.uninstall_product(\'CMFPlacefulWorkflow\')\n         self.assertFalse(\'portal_placeful_workflow\' in self.portal)\n         self.qi.install_product(\'CMFPlacefulWorkflow\')\n@@ -112,22 +109,6 @@ def test_activation_reactivation(self):\n         self.qi.uninstall_product(\'CMFPlacefulWorkflow\')\n         self.assertFalse(\'portal_placeful_workflow\' in self.portal)\n \n-    def test_prefs_workflow_policy_mapping_set_PostOnly(self):\n-        """\n-        Check POST on mapping policy\n-        """\n-        self.loginAsPortalOwner()\n-        # add a policy to edit\n-        pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n-        # use a GET request which should fail\n-        self.app.REQUEST.set(\'REQUEST_METHOD\', \'GET\')\n-        self.assertRaises(Forbidden,\n-                          self.portal.prefs_workflow_policy_mapping_set,\n-                          True, \'foo_bar_policy\', \'title\', \'description\',\n-                          {\'Document\': \'plone_workflow\'}, \'plone_workflow\')\n-\n     def test_01_addWorkflowPolicyConfig(self, ):\n         """\n         Add workflow policy config\n@@ -164,7 +145,6 @@ def test_04_addWorkflowPolicyAndConfigForIt(self, ):\n         """\n         Add workflow policy\n         """\n-        self.loginAsPortalOwner()\n         pwt = self.portal_placeful_workflow\n         pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n                                      \'default_workflow_policy (Simple Policy)\')\n@@ -176,14 +156,13 @@ def test_04_addWorkflowPolicyAndConfigForIt(self, ):\n         self.assertEqual(pc.getPolicyInId(), \'foo_bar_policy\')\n         self.assertEqual(pc.getPolicyBelowId(), \'foo_bar_policy\')\n \n-        self.logout()\n+        logout()\n \n     def test_04_addWorkflowPolicyAndDuplicateConfiguration(self, ):\n         """Add a workflow policy and duplicate another one\n \n         Use a python script that can duplicate another policy or portal_workflow configuration\n         """\n-        self.loginAsPortalOwner()\n         pw_tool = self.portal_placeful_workflow\n         wf_tool = self.portal.portal_workflow\n         ptypes = self.portal.portal_types.objectIds()\n@@ -227,7 +206,7 @@ def test_04_addWorkflowPolicyAndDuplicateConfiguration(self, ):\n                 self.assertEqual(policy2.getChainFor(\n                     ptype), (\'plone_workflow\', \'folder_workflow\'))\n \n-        self.logout()\n+        logout()\n \n     def test_05_editWorkflowPolicy(self, ):\n         """Edit workflow policy\n@@ -257,11 +236,9 @@ def test_06_getWorkflowPolicyIds(self, ):\n \n     def test_07_getChainFor(self, ):\n         # Let\'s see what the chain is before\n-        self.logout()\n-        self.loginAsPortalOwner()\n-\n         pw = self.portal.portal_workflow\n-        self.assertEqual(pw.getChainFor(\'Document\'), (\'plone_workflow\', ))\n+        self.assertEqual(\n+            pw.getChainFor(\'Document\'), (\'simple_publication_workflow\', ))\n \n         self.portal.invokeFactory(\n             \'Document\',\n@@ -272,7 +249,7 @@ def test_07_getChainFor(self, ):\n         # Workflow tool should look for policy definition and return\n         # the chain of the correct policy\n         self.assertEqual(pw.getChainFor(self.portal.doc_before),\n-                             (\'plone_workflow\', ))\n+                             (\'simple_publication_workflow\', ))\n \n         # Let\'s define another policy\n         pwt = self.portal_placeful_workflow\n@@ -323,15 +300,13 @@ def test_08_getChainFor(self, ):\n         self.assertEqual(pwt.getMaxChainLength(), 2)\n \n     def test_09_wft_getChainFor(self, ):\n-        self.logout()\n-        self.loginAsPortalOwner()\n         self.portal.invokeFactory(\'Folder\', id=\'folder\')\n         self.portal.folder.invokeFactory(\'Document\', id=\'document\', text=\'foo\')\n \n         # Check default\n         wft = self.portal.portal_workflow\n         chain = wft.getChainFor(\'Document\')\n-        self.assertEqual(tuple(chain), (\'plone_workflow\', ))\n+        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n \n         # Check global chain\n         wft.setChainForPortalTypes((\'Document\', ), (\'wf\', ))\n@@ -348,8 +323,6 @@ def test_09_wft_getChainFor(self, ):\n         self.assertEqual(tuple(chain), ())\n \n     def test_10_wft_getChainFor_placeful(self):\n-        self.logout()\n-        self.loginAsPortalOwner()\n         wft = self.portal.portal_workflow\n         self.portal.invokeFactory(\'Folder\', id=\'folder\')\n         self.portal.folder.invokeFactory(\'Document\', id=\'document\')\n@@ -410,8 +383,6 @@ def test_10_wft_getChainFor_placeful(self):\n \n     def test_11_In_and_Below(self):\n         """In and below"""\n-        self.logout()\n-        self.loginAsPortalOwner()\n         wft = self.portal.portal_workflow\n         self.portal.invokeFactory(\'Folder\', id=\'folder\')\n         self.portal.folder.invokeFactory(\'Document\', id=\'document\')\n@@ -474,8 +445,6 @@ def test_11_In_and_Below(self):\n     def test_11_copy_paste(self):\n         """ Test security after a copy/paste\n         """\n-        self.logout()\n-        self.loginAsPortalOwner()\n         wft = self.portal.portal_workflow\n         self.portal.invokeFactory(\'Document\', id=\'document\')\n         self.portal.invokeFactory(\'Folder\', id=\'folder\')\n@@ -503,13 +472,13 @@ def test_11_copy_paste(self):\n         cb = self.portal.manage_copyObjects([\'document\'])\n         self.portal.folder.manage_pasteObjects(cb_copy_data=cb)\n \n-        # A document in plone root should have plone_workflow\n+        # A document in plone root should have simple_publication_workflow\n         chain = wft.getChainFor(self.portal.document)\n-        self.assertEqual(tuple(chain), (\'plone_workflow\', ))\n+        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n \n-        # Folder should have folder_workflow\n+        # Folder should have simple_publication_workflow\n         chain = wft.getChainFor(self.portal.folder)\n-        self.assertEqual(tuple(chain), (\'folder_workflow\', ))\n+        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n \n         # A document in folder should have folder_workflow\n         chain = wft.getChainFor(self.portal.folder.document)\n@@ -529,8 +498,6 @@ def test_13_getWorkflowPolicyConfig(self):\n         self.assertEqual(config, None)\n \n     def test_14_getWorkflowPolicyConfig(self):\n-        self.logout()\n-        self.loginAsPortalOwner()\n         self.portal.invokeFactory(\'Folder\', id=\'folder\')\n         self.portal.folder.invokeFactory(\'Document\', id=\'document\')\n         self.portal.folder.invokeFactory(\'Folder\', id=\'folder2\')\n@@ -575,8 +542,6 @@ def test_14_getWorkflowPolicyConfig(self):\n         self.assertEqual(config, None)\n \n     def test_15_wft_getChainFor_placeful_with_strange_wrapper(self):\n-        self.logout()\n-        self.loginAsPortalOwner()\n         wft = self.portal.portal_workflow\n         self.portal.invokeFactory(\'Folder\', id=\'folder\')\n         self.portal.folder.invokeFactory(\'Document\', id=\'document\')\n@@ -602,17 +567,17 @@ def test_15_wft_getChainFor_placeful_with_strange_wrapper(self):\n         pc.setPolicyBelow(\'foo_bar_policy\')\n \n         chain = wft.getChainFor(self.portal.folder2.document2)\n-        self.assertEqual(tuple(chain), (\'plone_workflow\', ))\n+        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n \n         # What if we acquired the doc from the wrong place\n         wrapped_doc = self.portal.folder2.document2.__of__(self.portal.folder)\n         chain = wft.getChainFor(wrapped_doc)\n-        self.assertEqual(tuple(chain), (\'plone_workflow\', ))\n+        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n \n         # What if we acquired the container from the wrong place\n         wrapped_doc = self.portal.folder2.__of__(self.portal.folder).document2\n         chain = wft.getChainFor(wrapped_doc)\n-        self.assertEqual(tuple(chain), (\'plone_workflow\', ))\n+        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n \n     def test_16_getWorklists(self):\n         """Verify if worklists are always accessible with a policy\n@@ -620,8 +585,6 @@ def test_16_getWorklists(self):\n         wf_tool = self.portal.portal_workflow\n         placeful_tool = self.portal_placeful_workflow\n \n-        self.loginAsPortalOwner()\n-\n         self.portal.invokeFactory(\'Folder\', id=\'folder\')\n         self.portal.folder.invokeFactory(\'Document\', id=\'document\')\n \n@@ -662,4 +625,4 @@ def test_16_getWorklists(self):\n             )))\n         self.assertEqual(tuple(self.portal.my_worklist()), (document, ))\n \n-        self.logout()\n+        logout()\ndiff --git a/Products/CMFPlacefulWorkflow/tests/test_configlet.py b/Products/CMFPlacefulWorkflow/tests/test_configlet.py\nindex 3ab9b91..06c6e00 100644\n--- a/Products/CMFPlacefulWorkflow/tests/test_configlet.py\n+++ b/Products/CMFPlacefulWorkflow/tests/test_configlet.py\n@@ -19,37 +19,42 @@\n CMFPlacefulWorkflow Functional Test of the Through the Web Configuration\n """\n \n-from plone.app import testing\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.testing.z2 import Browser\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlacefulWorkflow.tests.CMFPlacefulWorkflowTestCase import CMFPlacefulWorkflowFunctionalTestCase  # noqa: E501\n+from Products.CMFPlacefulWorkflow.tests.CMFPlacefulWorkflowTestCase import CMFPlacefulWorkflowTestCase  # noqa: E501\n from transaction import commit\n \n \n-class TestConfiglet(CMFPlacefulWorkflowFunctionalTestCase):\n+class TestConfiglet(CMFPlacefulWorkflowTestCase):\n \n-    def afterSetUp(self):\n+    def setUp(self):\n         """Init some shortcuts member variables."""\n+        self.portal = self.layer[\'portal\']\n+        self.app = self.layer[\'app\']\n+        self.app.REQUEST[\'SESSION\'] = self.Session()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.ppw = getToolByName(self.portal, \'portal_placeful_workflow\')\n \n         self.createDummyPolicy()\n \n     def getBrowser(self, logged_in=False):\n         """ instantiate and return a testbrowser for convenience """\n-        browser = Browser(self.layer[\'app\'])\n+        browser = Browser(self.app)\n         if logged_in:\n             # Add an authorization header using the given or default\n             # credentials """\n             browser.addHeader(\'Authorization\', \'Basic %s:%s\' % (\n-                testing.SITE_OWNER_NAME,\n-                testing.SITE_OWNER_PASSWORD))\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD))\n         return browser\n \n     def createDummyPolicy(self):\n         """Create a workflow policy named \'dummy_policy\' for us to work with.\n         """\n-        self.logout()\n-        self.loginAsPortalOwner()\n         # Create a policy\n         self.ppw.manage_addWorkflowPolicy(\n             \'dummy_policy\', \'default_workflow_policy (Simple Policy)\')\n@@ -65,7 +70,7 @@ def test_local_mapping_select_acquisition_chain(self):\n         self.setLocalChainForPortalType(\'Document\', \'folder_workflow\')\n         commit()\n         browser = self.getBrowser(logged_in=True)\n-\n+        browser.handleErrors = False\n         browser.open(\'http://nohost/plone/prefs_workflow_policy_mapping?\'\n                      \'wfpid=dummy_policy\')\n         self.assertEqual(browser.getControl(name=\'wf.Document:record\').value,\ndiff --git a/Products/CMFPlacefulWorkflow/tests/test_doctests.py b/Products/CMFPlacefulWorkflow/tests/test_doctests.py\nindex fd7068f..c4caf6b 100644\n--- a/Products/CMFPlacefulWorkflow/tests/test_doctests.py\n+++ b/Products/CMFPlacefulWorkflow/tests/test_doctests.py\n@@ -20,8 +20,7 @@\n """\n \n from plone.testing import layered\n-from Products.CMFPlacefulWorkflow.tests.CMFPlacefulWorkflowTestCase import PWF_LAYER\n-\n+from Products.CMFPlacefulWorkflow.testing import PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING\n import doctest\n import unittest\n \n@@ -37,5 +36,5 @@ def test_suite():\n     for testfile in [\'exportimport.txt\', \'policy_form.txt\']:\n         suite.addTest(layered(doctest.DocFileSuite(testfile,\n                                                    optionflags=OPTIONFLAGS),\n-                              layer=PWF_LAYER))\n+                              layer=PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING))\n     return suite\n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2018-08-14T07:10:45+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/851421d10a8f337c602420e082db86ac2034906f

add changenote

Files changed:
M CHANGES.rst

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 951f1d0..fa2fc78 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -6,17 +6,22 @@ Changelog\n \n Breaking changes:\n \n+- Replace all skin-templates with browser-views\n+  [pbauer]\n+\n - Adapt tests to `Products.GenericSetup >= 2.0` thus requiring at least that\n   version.\n   [icemac]\n \n New features:\n \n-- *add item here*\n \n Bug fixes:\n \n-- More for Python 2 / 3 compatibility\n+- Fix all tests for python 3 and no longer use PloneTestCase\n+  [pbauer]\n+\n+- More Python 2 / 3 compatibility\n   [ale-rt, davilima6]\n \n \n'

Repository: Products.CMFPlacefulWorkflow


Branch: refs/heads/master
Date: 2018-08-14T20:34:14+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.CMFPlacefulWorkflow/commit/987302334c2c196c257a67b97c4f33e3f693a8bb

Merge pull request #23 from plone/python3

Migrate tests away from PloneTestCase

Files changed:
A Products/CMFPlacefulWorkflow/browser/__init__.py
A Products/CMFPlacefulWorkflow/browser/configure.zcml
A Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt
A Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt
A Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt
A Products/CMFPlacefulWorkflow/browser/views.py
A Products/CMFPlacefulWorkflow/testing.py
M CHANGES.rst
M Products/CMFPlacefulWorkflow/DefaultWorkflowPolicy.py
M Products/CMFPlacefulWorkflow/configure.zcml
M Products/CMFPlacefulWorkflow/tests/CMFPlacefulWorkflowTestCase.py
M Products/CMFPlacefulWorkflow/tests/policy_form.txt
M Products/CMFPlacefulWorkflow/tests/testCMFPlacefulWorkflow.py
M Products/CMFPlacefulWorkflow/tests/test_configlet.py
M Products/CMFPlacefulWorkflow/tests/test_doctests.py
D Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration.pt
D Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration_add.py
D Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration_set.py
D Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_localpolicies_form.pt
D Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_localpolicies_set.py
D Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping.pt
D Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping.pt.metadata
D Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping_set.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 951f1d0..fa2fc78 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -6,17 +6,22 @@ Changelog\n \n Breaking changes:\n \n+- Replace all skin-templates with browser-views\n+  [pbauer]\n+\n - Adapt tests to `Products.GenericSetup >= 2.0` thus requiring at least that\n   version.\n   [icemac]\n \n New features:\n \n-- *add item here*\n \n Bug fixes:\n \n-- More for Python 2 / 3 compatibility\n+- Fix all tests for python 3 and no longer use PloneTestCase\n+  [pbauer]\n+\n+- More Python 2 / 3 compatibility\n   [ale-rt, davilima6]\n \n \ndiff --git a/Products/CMFPlacefulWorkflow/DefaultWorkflowPolicy.py b/Products/CMFPlacefulWorkflow/DefaultWorkflowPolicy.py\nindex 22af4c8..69ea3a7 100644\n--- a/Products/CMFPlacefulWorkflow/DefaultWorkflowPolicy.py\n+++ b/Products/CMFPlacefulWorkflow/DefaultWorkflowPolicy.py\n@@ -280,7 +280,7 @@ def setChain(self, portal_type, chain, REQUEST=None):\n             raise ValueError("\'%s\' is not a valid portal type." % portal_type)\n \n         if isinstance(chain, six.string_types):\n-            chain = map(lambda x: x.strip(), chain.split(\',\'))\n+            chain = [i.strip() for i in chain.split(\',\')]\n \n         wftool = getToolByName(self, \'portal_workflow\')\n         cbt = self._chains_by_type\ndiff --git a/Products/CMFPlacefulWorkflow/browser/__init__.py b/Products/CMFPlacefulWorkflow/browser/__init__.py\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/Products/CMFPlacefulWorkflow/browser/configure.zcml b/Products/CMFPlacefulWorkflow/browser/configure.zcml\nnew file mode 100644\nindex 0000000..3f2cdcf\n--- /dev/null\n+++ b/Products/CMFPlacefulWorkflow/browser/configure.zcml\n@@ -0,0 +1,31 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    xmlns:browser="http://namespaces.zope.org/browser">\n+\n+    <browser:page\n+        for="*"\n+        name="placeful_workflow_configuration"\n+        class=".views.PlacefulWorkflowConfiguration"\n+        template="placeful_workflow_configuration.pt"\n+        permission="zope2.View"\n+        />\n+\n+    <browser:page\n+        for="*"\n+        name="prefs_workflow_policy_mapping"\n+        class=".views.WorkflowPolicyMapping"\n+        template="prefs_workflow_policy_mapping.pt"\n+        permission="zope2.View"\n+        />\n+\n+    <browser:page\n+        for="*"\n+        name="prefs_workflow_localpolicies_form"\n+        class=".views.WorkflowPoliciesForm"\n+        template="prefs_workflow_localpolicies_form.pt"\n+        permission="zope2.View"\n+        />\n+\n+</configure>\n+\ndiff --git a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration.pt b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\nsimilarity index 82%\nrename from Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration.pt\nrename to Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\nindex 4b43f2b..ca12bb4 100644\n--- a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/placeful_workflow_configuration.pt\n@@ -1,35 +1,13 @@\n-<tal:block replace="nothing">\n--*- coding: utf-8 -*-\n-## CMFPlacefulWorkflow\n-## Copyright (C)2005-2008 Ingeniweb\n-\n-## This program is free software; you can redistribute it and/or modify\n-## it under the terms of the GNU General Public License as published by\n-## the Free Software Foundation; either version 2 of the License, or\n-## (at your option) any later version.\n-\n-## This program is distributed in the hope that it will be useful,\n-## but WITHOUT ANY WARRANTY; without even the implied warranty of\n-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-## GNU General Public License for more details.\n-\n-## You should have received a copy of the GNU General Public License\n-## along with this program; see the file COPYING. If not, write to the\n-## Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n-\n-Workflow policy configuration template\n-\n-</tal:block>\n <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n       lang="en"\n-      metal:use-macro="here/main_template/macros/master"\n+      metal:use-macro="context/main_template/macros/master"\n       i18n:domain="cmfplacefulworkflow">\n \n     <div metal:fill-slot="main"\n-         tal:define="wf_list here/portal_workflow/objectIds;\n-                     pwtool here/portal_placeful_workflow;\n-                     config python: pwtool.getWorkflowPolicyConfig(here);\n-                     siteroot python: pwtool.isSiteRoot(here);">\n+         tal:define="wf_list context/portal_workflow/objectIds;\n+                     pwtool context/portal_placeful_workflow;\n+                     config python: pwtool.getWorkflowPolicyConfig(context);\n+                     siteroot python: pwtool.isSiteRoot(context);">\n \n         <h1 i18n:translate="heading_workflow_policies">\n             Workflow policies\' local configuration management\n@@ -50,11 +28,11 @@ Workflow policy configuration template\n \n         <tal:nosite tal:condition="not:siteroot">\n \n-          <p tal:condition="python:not config and here.isPrincipiaFolderish">\n-            <form action="placeful_workflow_configuration_add" method="POST">\n+          <p tal:condition="python:not config and context.isPrincipiaFolderish">\n+            <form action="placeful_workflow_configuration" method="POST">\n                 <button type="submit" name="add_wp_for_type" i18n:translate="description_add_workflow_policy_for_type">\n                   Add a workflow policy\'s local configuration in the\n-                  <span tal:replace="python:here.translate(here.portal_type)"\n+                  <span tal:replace="python:context.translate(context.portal_type)"\n                         i18n:name="portal_type">\n                       portal type\n                   </span>\n@@ -62,9 +40,8 @@ Workflow policy configuration template\n             </form>\n           </p>\n \n-          <p tal:condition="python:not here.isPrincipiaFolderish and here is not container">\n-              <form action="placeful_workflow_configuration_add" method="POST"\n-                    tal:attributes="action python:container.absolute_url()+\'/placeful_workflow_configuration_add\'">\n+          <p tal:condition="python:not context.isPrincipiaFolderish and context is not container">\n+              <form action="placeful_workflow_configuration" method="POST">\n                 <button type="submit" name="add_wp_local_config" i18n:translate="description_add_workflow_policy">\n                   Add Workflow policy\'s local configuration\n                 </button>\n@@ -73,8 +50,8 @@ Workflow policy configuration template\n \n           <form id="edit_form"\n                 name="edit_form"\n-                method="post"\n-                action="placeful_workflow_configuration_set"\n+                method="POST"\n+                action="${context/absolute_url}/@@placeful_workflow_configuration"\n                 tal:condition="config">\n \n               <fieldset tal:define="policies pwtool/getWorkflowPolicyInfos;\n@@ -202,7 +179,7 @@ Workflow policy configuration template\n                   <div class="field">\n \n                     <input type="checkbox" checked="checked" class="noborder"\n-                           name="update_security" value="" id="cb_update_security" />\n+                           name="update_security" value="update_security" id="cb_update_security" />\n \n                     <label for="cb_update_security"\n                            i18n:domain="cmfplacefulworkflow"\ndiff --git a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_localpolicies_form.pt b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt\nsimilarity index 84%\nrename from Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_localpolicies_form.pt\nrename to Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt\nindex 6c4b459..0e5ee11 100644\n--- a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_localpolicies_form.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_localpolicies_form.pt\n@@ -1,28 +1,6 @@\n-<tal:block replace="nothing">\n--*- coding: utf-8 -*-\n-## CMFPlacefulWorkflow\n-## Copyright (C)2005 Ingeniweb\n-\n-## This program is free software; you can redistribute it and/or modify\n-## it under the terms of the GNU General Public License as published by\n-## the Free Software Foundation; either version 2 of the License, or\n-## (at your option) any later version.\n-\n-## This program is distributed in the hope that it will be useful,\n-## but WITHOUT ANY WARRANTY; without even the implied warranty of\n-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-## GNU General Public License for more details.\n-\n-## You should have received a copy of the GNU General Public License\n-## along with this program; see the file COPYING. If not, write to the\n-## Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n-\n-CMFPlacefulWorkflow configuration panel\n-\n-</tal:block>\n <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n       lang="en"\n-      metal:use-macro="here/prefs_main_template/macros/master"\n+      metal:use-macro="context/prefs_main_template/macros/master"\n       i18n:domain="cmfplacefulworkflow">\n \n     <metal:block fill-slot="top_slot"/>\n@@ -34,7 +12,7 @@ CMFPlacefulWorkflow configuration panel\n         <span tal:define="dummy python:request.response.setHeader(\'pragma\',\'no-cache\')" />\n \n         <div id="content"\n-             tal:condition="python:checkPermission(\'Manage portal\', here)">\n+             tal:condition="python:checkPermission(\'Manage portal\', context)">\n \n             <h5 class="hiddenStructure">Views</h5>\n \n@@ -73,8 +51,8 @@ CMFPlacefulWorkflow configuration panel\n                 <form action=""\n                       name=""\n                       method="post"\n-                      tal:attributes="action string:prefs_workflow_localpolicies_set"\n-                      tal:define="wfp python:here.portal_placeful_workflow;">\n+                      tal:attributes="action string:${context/absolute_url}/@@prefs_workflow_localpolicies_form"\n+                      tal:define="wfp python:context.portal_placeful_workflow;">\n \n                     <fieldset>\n                         <legend i18n:translate="legend_workflow_policies">Existing Workflow Policies</legend>\n@@ -118,7 +96,7 @@ CMFPlacefulWorkflow configuration panel\n                         <legend i18n:translate="legend_add_workflow_policy">Add a workflow policy</legend>\n                         <div class="field"\n                              tal:define="error errors/policy_id | nothing;"\n-                             tal:attributes="class python:test(error, \'field error\', \'field\')">\n+                             tal:attributes="class python:\'field error\' if error else \'field\'">\n \n                             <label i18n:translate="label_new_policy_id">New policy Id</label>\n                             <span class="fieldRequired" title="Required"\n@@ -137,7 +115,7 @@ CMFPlacefulWorkflow configuration panel\n                         </div>\n                         <div class="field"\n                              tal:define="error errors/policy_id | nothing;"\n-                             tal:attributes="class python:test(error, \'field error\', \'field\')">\n+                             tal:attributes="class python:\'field error\' if error else \'field\'">\n \n                             <label i18n:translate="label_duplicate_policy_id">Duplicate another policy</label>\n                             <span class="fieldRequired" title="Required"\n@@ -178,8 +156,8 @@ CMFPlacefulWorkflow configuration panel\n         </div>\n         <div id="content"\n              class="documentEditable"\n-             tal:condition="python:not checkPermission(\'Manage portal\', here)">\n-            <tal:block replace="here/raiseUnauthorized" />\n+             tal:condition="python:not checkPermission(\'Manage portal\', context)">\n+            <tal:block replace="context/raiseUnauthorized" />\n         </div>\n \n     </div>\ndiff --git a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping.pt b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt\nsimilarity index 93%\nrename from Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping.pt\nrename to Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt\nindex 29743d6..a01013d 100644\n--- a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping.pt\n+++ b/Products/CMFPlacefulWorkflow/browser/prefs_workflow_policy_mapping.pt\n@@ -1,14 +1,14 @@\n <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n       lang="en"\n-      metal:use-macro="here/prefs_main_template/macros/master"\n+      metal:use-macro="context/prefs_main_template/macros/master"\n       i18n:domain="cmfplacefulworkflow">\n \n     <metal:block fill-slot="top_slot"/>\n \n     <div metal:fill-slot="prefs_configlet_content"\n-         tal:define="allowedContentTypes allowedSortedContentTypes|here/allowedContentTypes;\n+         tal:define="allowedContentTypes allowedSortedContentTypes|context/allowedContentTypes;\n                      wfpid python:request.get(\'wfpid\');\n-                     wf_policy python:here.portal_placeful_workflow.getWorkflowPolicyById(wfpid);\n+                     wf_policy python:context.portal_placeful_workflow.getWorkflowPolicyById(wfpid);\n                      wtool context/portal_workflow;\n                      wf_list python: [{\'id\': obj.getId(), \'title\': obj.title_or_id()} for obj in wtool.objectValues()];"\n          class="configlet">\n@@ -16,7 +16,7 @@\n         <span tal:define="dummy python:request.response.setHeader(\'pragma\',\'no-cache\')" />\n \n         <div id="content"\n-             tal:condition="python:checkPermission(\'Manage portal\', here)">\n+             tal:condition="python:checkPermission(\'Manage portal\', context)">\n \n             <h5 class="hiddenStructure">Views</h5>\n \n@@ -46,7 +46,7 @@\n                     Custom workflow policy which maps content types to workflows.\n                 </p>\n                 <form name="prefs_workflow_policy_mapping_set"\n-                      action="prefs_workflow_policy_mapping_set"\n+                      action="${context/absolute_url}/@@prefs_workflow_policy_mapping"\n                       method="post">\n \n                     <fieldset>\n@@ -120,7 +120,7 @@\n \n                                 <option tal:repeat="wf wf_list"\n                                         tal:attributes="value wf/id;\n-                                                        selected python:test((wf[\'id\'],)==wf_policy.getDefaultChain(here), \'selected\', None)"\n+                                                        selected python:\'selected\' if (wf[\'id\'],)==wf_policy.getDefaultChain(context) else None"\n                                         tal:content="wf/title"\n                                         i18n:domain="plone"\n                                         i18n:translate="">\n@@ -157,18 +157,18 @@\n                                             <select id="select_workflow" name="workflow_id"\n                                                     tal:attributes="name string:wf.${ctype_id}:record;" >\n                                                 <option value="acquisition"\n-                                                        tal:attributes="selected python:test(chain is None, \'selected\', None);"\n+                                                        tal:attributes="selected python:\'selected\' if chain is None else None;"\n                                                         i18n:translate="label_mapping_acquire_workflow">Acquire workflow from above</option>\n                                                 <option value=""\n-                                                        tal:attributes="selected python:test(chain == (), \'selected\', None);"\n+                                                        tal:attributes="selected python:\'selected\' if chain == () else None;"\n                                                         i18n:translate="label_mapping_no_workflow">No workflow</option>\n \n                                                 <option value="(Default)"\n-                                                        tal:attributes="selected python:test(chain == \'(Default)\', \'selected\', None);"\n+                                                        tal:attributes="selected python:\'selected\' if chain == \'(Default)\' else None;"\n                                                         i18n:translate="label_mapping_default_worflow">Default workflow for the policy</option>\n                                                 <option tal:repeat="wf wf_list"\n                                                         tal:attributes="value wf/id;\n-                                                                        selected python:test((wf[\'id\'],) == chain, \'selected\', None)"\n+                                                                        selected python:\'selected\' if (wf[\'id\'],) == chain else None"\n                                                         tal:content="wf/title"\n                                                         i18n:domain="plone"\n                                                         i18n:translate="">workflow_id</option>\ndiff --git a/Products/CMFPlacefulWorkflow/browser/views.py b/Products/CMFPlacefulWorkflow/browser/views.py\nnew file mode 100644\nindex 0000000..f12f567\n--- /dev/null\n+++ b/Products/CMFPlacefulWorkflow/browser/views.py\n@@ -0,0 +1,144 @@\n+# -*- coding: utf-8 -*-\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlacefulWorkflow import CMFPlacefulWorkflowMessageFactory as _\n+from Products.Five import BrowserView\n+\n+\n+class PlacefulWorkflowConfiguration(BrowserView):\n+    """Manage placeful wf for a item or container\n+    """\n+\n+    def __call__(self):\n+        context = self.context\n+        request = self.request\n+\n+        policy_in = request.form.get(\'policy_in\', None)\n+        policy_below = request.form.get(\'policy_below\', None)\n+\n+        # Form submission will either have update_security as a key\n+        # meaning user wants to do it OR no key at all. If this script\n+        # is called directly, we use the parameter\n+        update_security = request.form.get(\'update_security\', None)\n+\n+        if \'add_wp_for_type\' in request.form:\n+            context.manage_addProduct[\'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig(request)\n+            context.plone_utils.addPortalMessage(_(u\'Workflow policy configuration added.\'))\n+            return request.response.redirect(\'placeful_workflow_configuration\')\n+\n+        # This script is used for both the save and cancel button\n+        cancel = False\n+        submit = request.form.get(\'submit\', None)\n+        if not submit:\n+            return self.index()\n+\n+        if submit is not None and submit == \'Cancel\':\n+            cancel = True\n+            message = _(u\'Configuration changes cancelled.\')\n+\n+\n+        if not cancel:\n+            tool = getToolByName(context, \'portal_placeful_workflow\')\n+            config = tool.getWorkflowPolicyConfig(context)\n+            if not config:\n+                message = _(u\'No config in this folder.\')\n+            else:\n+                if not tool.isValidPolicyName(policy_in) and not policy_in == \'\':\n+                    raise AttributeError("%s is not a valid policy id" % policy_in)\n+\n+                if not tool.isValidPolicyName(policy_below) and not policy_below == \'\':\n+                    raise AttributeError("%s is not a valid policy id" % policy_below)\n+\n+                config.setPolicyIn(policy_in, update_security)\n+                config.setPolicyBelow(policy_below, update_security)\n+\n+                message = _(\'Changed policies.\')\n+\n+        context.plone_utils.addPortalMessage(message)\n+        return request.response.redirect(\'placeful_workflow_configuration\')\n+\n+\n+class WorkflowPoliciesForm(BrowserView):\n+\n+    def __call__(self):\n+        context = self.context\n+        request = self.request\n+\n+        policy_ids = request.get(\'policy_ids\', [])\n+        policy_id = request.get(\'policy_id\', None)\n+        delete = request.get(\'delete\', None)\n+        add = request.get(\'add\', None)\n+        policy_duplicate_id = request.get(\'policy_duplicate_id\', \'empty\')\n+\n+        pwtool = getToolByName(context, \'portal_placeful_workflow\')\n+        plone_utils = getToolByName(context, \'plone_utils\')\n+\n+        if delete and policy_ids:\n+            for policy_id in policy_ids:\n+                if policy_id in pwtool.objectIds():\n+                    pwtool.manage_delObjects([policy_id, ])\n+            plone_utils.addPortalMessage(_(u\'Deleted Local Workflow Policy.\'), \'info\')\n+            return request.response.redirect(\'prefs_workflow_localpolicies_form\')\n+\n+        elif add:\n+            if policy_id:\n+                pwtool.manage_addWorkflowPolicy(id=policy_id, duplicate_id=policy_duplicate_id)\n+                plone_utils.addPortalMessage(_(u\'Local Workflow Policy added.\'), \'info\')\n+                return request.response.redirect(\'prefs_workflow_policy_mapping?wfpid=\' + policy_id)\n+\n+            else:\n+                plone_utils.addPortalMessage(_(u\'The policy Id is required.\'), \'error\')\n+                return request.response.redirect(\'prefs_workflow_localpolicies_form\')\n+\n+        return self.index()\n+\n+class WorkflowPolicyMapping(BrowserView):\n+    """\n+    """\n+\n+    def __call__(self):\n+        request = self.request\n+        if not request.get(\'submit\', None):\n+            return self.index()\n+\n+        context = self.context\n+        plone_utils = getToolByName(context, \'plone_utils\')\n+\n+        wfpid = request.get(\'wfpid\', None)\n+        if not wfpid:\n+            plone_utils.addPortalMessage(_(u\'No Policy selected.\'), \'error\')\n+            return request.response.redirect(portal_url + \'/@@prefs_workflow_localpolicies_form\')\n+\n+        tool = getToolByName(context, \'portal_placeful_workflow\')\n+        policy = tool.getWorkflowPolicyById(wfpid)\n+        title = request.get(\'title\', None)\n+        description = request.get(\'description\', None)\n+        default_workflow_id = request.get(\'default_workflow_id\', None)\n+        wf = request.get(\'wf\', None)\n+\n+        if title:\n+            plone_utils.addPortalMessage(title)\n+            policy.setTitle(title)\n+        else:\n+            plone_utils.addPortalMessage(_(u\'Title is required.\'), \'error\')\n+            return request.response.redirect(\'@@prefs_workflow_policy_mapping?wfpid=%s\' % wfpid)\n+\n+        policy.setDescription(description)\n+        policy.setDefaultChain(\n+            default_chain=(default_workflow_id, ),\n+            REQUEST=request)\n+\n+        # for filtering special option values\n+        CHAIN_MAP = {\'acquisition\': None, \'\': ()}\n+\n+        for pt, wflow in list(wf.items()):\n+            if wflow in CHAIN_MAP:\n+                chain = CHAIN_MAP[wflow]\n+            else:\n+                chain = (wflow, )\n+            policy.setChain(portal_type=pt, chain=chain, REQUEST=request)\n+\n+        wf_tool = getToolByName(context, \'portal_workflow\')\n+        wf_tool.updateRoleMappings()\n+\n+        plone_utils.addPortalMessage(_(u\'Changes to criteria saved.\'))\n+        return request.response.redirect(\'prefs_workflow_policy_mapping?wfpid=%s\' % wfpid)\ndiff --git a/Products/CMFPlacefulWorkflow/configure.zcml b/Products/CMFPlacefulWorkflow/configure.zcml\nindex 7260aa3..c0badd1 100644\n--- a/Products/CMFPlacefulWorkflow/configure.zcml\n+++ b/Products/CMFPlacefulWorkflow/configure.zcml\n@@ -1,5 +1,7 @@\n-<configure xmlns="http://namespaces.zope.org/zope">\n+<configure xmlns="http://namespaces.zope.org/zope"\n+    xmlns:zcml="http://namespaces.zope.org/zcml">\n \n+  <include package=".browser"/>\n   <include file="implements.zcml"/>\n   <include file="exportimport.zcml"/>\n   <include file="profiles.zcml"/>\ndiff --git a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration_add.py b/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration_add.py\ndeleted file mode 100644\nindex ed750dc..0000000\n--- a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration_add.py\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-##parameters=\n-##title=add workflow policy configuration\n-##\n-\n-from Products.CMFPlacefulWorkflow import CMFPlacefulWorkflowMessageFactory as _\n-\n-context.manage_addProduct[\'CMFPlacefulWorkflow\'].manage_addWorkflowPolicyConfig()\n-\n-context.plone_utils.addPortalMessage(_(u\'Workflow policy configuration added.\'))\n-context.REQUEST.RESPONSE.redirect(\'placeful_workflow_configuration\')\ndiff --git a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration_set.py b/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration_set.py\ndeleted file mode 100644\nindex c1b7259..0000000\n--- a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/placeful_workflow_configuration_set.py\n+++ /dev/null\n@@ -1,39 +0,0 @@\n-##parameters=policy_in=\'\', policy_below=\'\', update_security=False\n-##title=set placeful workflow configuration\n-##\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlacefulWorkflow import CMFPlacefulWorkflowMessageFactory as _\n-\n-request = context.REQUEST\n-\n-# Form submission will either have update_security as a key\n-# meaning user wants to do it OR no key at all. If this script\n-# is called directly, we use the parameter\n-update_security = (\'update_security\' in request.form) or update_security\n-\n-# This script is used for both the save and cancel button\n-cancel = False\n-submit = request.form.get(\'submit\', None)\n-if submit is not None and submit == \'Cancel\':\n-    cancel = True\n-    message = _(u\'Configuration changes cancelled.\')\n-\n-if not cancel:\n-    tool = getToolByName(context, \'portal_placeful_workflow\')\n-    config = tool.getWorkflowPolicyConfig(context)\n-    if not config:\n-        message = _(u\'No config in this folder.\')\n-    else:\n-        if not tool.isValidPolicyName(policy_in) and not policy_in == \'\':\n-            raise AttributeError("%s is not a valid policy id" % policy_in)\n-\n-        if not tool.isValidPolicyName(policy_below) and not policy_below == \'\':\n-            raise AttributeError("%s is not a valid policy id" % policy_below)\n-\n-        config.setPolicyIn(policy_in, update_security)\n-        config.setPolicyBelow(policy_below, update_security)\n-\n-        message = _(\'Changed policies.\')\n-\n-context.plone_utils.addPortalMessage(message)\n-request.RESPONSE.redirect(\'placeful_workflow_configuration\')\ndiff --git a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_localpolicies_set.py b/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_localpolicies_set.py\ndeleted file mode 100644\nindex 7fc8fff..0000000\n--- a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_localpolicies_set.py\n+++ /dev/null\n@@ -1,32 +0,0 @@\n-##parameters=delete=None, add=None\n-##title=set local workflow policies prefs\n-##\n-\n-from Products.CMFPlacefulWorkflow import CMFPlacefulWorkflowMessageFactory as _\n-from Products.CMFCore.utils import getToolByName\n-\n-request = context.REQUEST\n-\n-policy_ids = request.get(\'policy_ids\', [])\n-policy_id = request.get(\'policy_id\', None)\n-policy_duplicate_id = request.get(\'policy_duplicate_id\', \'empty\')\n-\n-pwtool = getToolByName(context, \'portal_placeful_workflow\')\n-plone_utils = getToolByName(context, \'plone_utils\')\n-\n-if delete and policy_ids:\n-    for policy_id in policy_ids:\n-        if policy_id in pwtool.objectIds():\n-            pwtool.manage_delObjects([policy_id, ])\n-    plone_utils.addPortalMessage(_(u\'Deleted Local Workflow Policy.\'), \'info\')\n-    request.RESPONSE.redirect(\'prefs_workflow_localpolicies_form\')\n-\n-elif add:\n-    if policy_id:\n-        pwtool.manage_addWorkflowPolicy(id=policy_id, duplicate_id=policy_duplicate_id)\n-        plone_utils.addPortalMessage(_(u\'Local Workflow Policy added.\'), \'info\')\n-        request.RESPONSE.redirect(\'prefs_workflow_policy_mapping?wfpid=\' + policy_id)\n-\n-    else:\n-        plone_utils.addPortalMessage(_(u\'The policy Id is required.\'), \'error\')\n-        request.RESPONSE.redirect(\'prefs_workflow_localpolicies_form\')\ndiff --git a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping.pt.metadata b/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping.pt.metadata\ndeleted file mode 100644\nindex b11bb32..0000000\n--- a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping.pt.metadata\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-[default]\n-title=Workflow Policy\n-\n-[security]\n-View=0:Authenticated\ndiff --git a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping_set.py b/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping_set.py\ndeleted file mode 100644\nindex c9a2102..0000000\n--- a/Products/CMFPlacefulWorkflow/skins/CMFPlacefulWorkflow/prefs_workflow_policy_mapping_set.py\n+++ /dev/null\n@@ -1,42 +0,0 @@\n-##parameters=submit, wfpid, title, description, wf, default_workflow_id\n-##title=set local workflow policy mapping\n-#-*- coding: utf-8 -*-\n-\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlacefulWorkflow import CMFPlacefulWorkflowMessageFactory as _\n-\n-plone_utils = getToolByName(context, \'plone_utils\')\n-\n-request = context.REQUEST\n-policy = getToolByName(context, \'portal_placeful_workflow\').getWorkflowPolicyById(wfpid)\n-\n-if title:\n-    plone_utils.addPortalMessage(title)\n-    policy.setTitle(title)\n-else:\n-    plone_utils.addPortalMessage(_(u\'Title is required.\'), \'error\')\n-    if request:\n-        request.RESPONSE.redirect(\'prefs_workflow_policy_mapping?wfpid=%s\' % wfpid)\n-    return request\n-\n-policy.setDescription(description)\n-\n-policy.setDefaultChain(default_chain=(default_workflow_id, ), REQUEST=context.REQUEST)\n-\n-# for filtering special option values\n-CHAIN_MAP = {\'acquisition\': None, \'\': ()}\n-for pt, wf in wf.items():\n-    if wf in CHAIN_MAP:\n-        chain = CHAIN_MAP[wf]\n-    else:\n-        chain = (wf, )\n-    policy.setChain(portal_type=pt, chain=chain, REQUEST=context.REQUEST)\n-\n-wf_tool = getToolByName(context, \'portal_workflow\')\n-wf_tool.updateRoleMappings()\n-\n-plone_utils.addPortalMessage(_(u\'Changes to criteria saved.\'))\n-if request:\n-    request.RESPONSE.redirect(\'prefs_workflow_policy_mapping?wfpid=%s\' % wfpid)\n-\n-return request\ndiff --git a/Products/CMFPlacefulWorkflow/testing.py b/Products/CMFPlacefulWorkflow/testing.py\nnew file mode 100644\nindex 0000000..9bcdca4\n--- /dev/null\n+++ b/Products/CMFPlacefulWorkflow/testing.py\n@@ -0,0 +1,60 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n+from plone.app.robotframework.testing import REMOTE_LIBRARY_BUNDLE_FIXTURE\n+from plone.app.testing import applyProfile\n+from plone.app.testing import FunctionalTesting\n+from plone.app.testing import IntegrationTesting\n+from plone.app.testing import PloneSandboxLayer\n+from Products.GenericSetup import profile_registry\n+from Products.CMFCore.interfaces import ISiteRoot\n+from Products.GenericSetup import EXTENSION\n+from plone.testing import z2\n+\n+import Products.CMFPlacefulWorkflow\n+\n+\n+class ProductsCmfplacefulworkflowLayer(PloneSandboxLayer):\n+\n+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)\n+\n+    def setUpZope(self, app, configurationContext):\n+        # Load any other ZCML that is required for your tests.\n+        # The z3c.autoinclude feature is disabled in the Plone fixture base\n+        # layer.\n+        self.loadZCML(package=Products.CMFPlacefulWorkflow)\n+        profile_registry.registerProfile(\n+            name=\'exportimport\', title=\'Test Placeful Workflow Profile\',\n+            description=(\n+                "Tests the placeful workflow policy handler."),\n+            path=\'profiles/exportimport\',\n+            product=\'Products.CMFPlacefulWorkflow.tests\',\n+            profile_type=EXTENSION, for_=ISiteRoot)\n+        z2.installProduct(app, \'Products.CMFPlacefulWorkflow\')\n+\n+    def setUpPloneSite(self, portal):\n+        applyProfile(portal, \'Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow\')\n+\n+\n+PRODUCTS_CMFPLACEFULWORKFLOW_FIXTURE = ProductsCmfplacefulworkflowLayer()\n+\n+\n+PRODUCTS_CMFPLACEFULWORKFLOW_INTEGRATION_TESTING = IntegrationTesting(\n+    bases=(PRODUCTS_CMFPLACEFULWORKFLOW_FIXTURE,),\n+    name=\'ProductsCmfplacefulworkflowLayer:IntegrationTesting\',\n+)\n+\n+\n+PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING = FunctionalTesting(\n+    bases=(PRODUCTS_CMFPLACEFULWORKFLOW_FIXTURE,),\n+    name=\'ProductsCmfplacefulworkflowLayer:FunctionalTesting\',\n+)\n+\n+\n+PRODUCTS_CMFPLACEFULWORKFLOW_ACCEPTANCE_TESTING = FunctionalTesting(\n+    bases=(\n+        PRODUCTS_CMFPLACEFULWORKFLOW_FIXTURE,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+        z2.ZSERVER_FIXTURE,\n+    ),\n+    name=\'ProductsCmfplacefulworkflowLayer:AcceptanceTesting\',\n+)\ndiff --git a/Products/CMFPlacefulWorkflow/tests/CMFPlacefulWorkflowTestCase.py b/Products/CMFPlacefulWorkflow/tests/CMFPlacefulWorkflowTestCase.py\nindex 6bdefdc..bc71f79 100644\n--- a/Products/CMFPlacefulWorkflow/tests/CMFPlacefulWorkflowTestCase.py\n+++ b/Products/CMFPlacefulWorkflow/tests/CMFPlacefulWorkflowTestCase.py\n@@ -18,58 +18,20 @@\n """\n CMFPlacefulWorkflow TestCase module\n """\n+from Products.CMFPlacefulWorkflow.testing import PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING\n \n-from Products.CMFCore.interfaces import ISiteRoot\n-from Products.GenericSetup import EXTENSION\n-from Products.GenericSetup import profile_registry\n-from plone.app import testing\n-from plone.app.testing.bbb import PloneTestCase\n-from plone.app.testing.bbb import PloneTestCaseFixture\n-from plone.testing import z2\n+import unittest\n \n \n-class PlacefulWorkflowLayer(PloneTestCaseFixture):\n+class CMFPlacefulWorkflowTestCase(unittest.TestCase):\n \n-    def setUpZope(self, app, configurationContext):\n-        super(PlacefulWorkflowLayer, self).setUpZope(app, configurationContext)\n-        profile_registry.registerProfile(\n-            name=\'exportimport\', title=\'Test Placeful Workflow Profile\',\n-            description=(\n-                "Tests the placeful workflow policy handler."),\n-            path=\'profiles/exportimport\',\n-            product=\'Products.CMFPlacefulWorkflow.tests\',\n-            profile_type=EXTENSION, for_=ISiteRoot)\n-        z2.installProduct(app, \'Products.CMFPlacefulWorkflow\')\n \n-    def setUpPloneSite(self, portal):\n-        super(PlacefulWorkflowLayer, self).setUpPloneSite(portal)\n-        # install sunburst theme\n-        testing.applyProfile(\n-            portal, \'Products.CMFPlacefulWorkflow:CMFPlacefulWorkflow\')\n-\n-    def tearDownZope(self, app):\n-        super(PlacefulWorkflowLayer, self).tearDownZope(app)\n-        z2.uninstallProduct(app, \'Products.CMFPlacefulWorkflow\')\n-\n-PWF_FIXTURE = PlacefulWorkflowLayer()\n-PWF_LAYER = testing.FunctionalTesting(bases=(PWF_FIXTURE, ),\n-                                      name=\'PlacefulWorkflowTestCase:Functional\')\n-\n-\n-class CMFPlacefulWorkflowTestCase(PloneTestCase):\n-\n-    layer = PWF_LAYER\n+    layer = PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING\n \n     class Session(dict):\n         def set(self, key, value):\n             self[key] = value\n \n-    def _setup(self):\n-        PloneTestCase.PloneTestCase._setup(self)\n-        self.app.REQUEST[\'SESSION\'] = self.Session()\n-\n     def getPermissionsOfRole(self, role):\n         perms = self.portal.permissionsOfRole(role)\n         return [p[\'name\'] for p in perms if p[\'selected\']]\n-\n-CMFPlacefulWorkflowFunctionalTestCase = CMFPlacefulWorkflowTestCase\ndiff --git a/Products/CMFPlacefulWorkflow/tests/policy_form.txt b/Products/CMFPlacefulWorkflow/tests/policy_form.txt\nindex 57e3e8d..b327c7b 100644\n--- a/Products/CMFPlacefulWorkflow/tests/policy_form.txt\n+++ b/Products/CMFPlacefulWorkflow/tests/policy_form.txt\n@@ -5,10 +5,24 @@ Placeful workflow policy form\n \n The Placeful workflow policy form works in a real browser.\n \n+Create some content\n+\n+    >>> from plone.app.testing import setRoles\n+    >>> from plone.app.testing import TEST_USER_ID\n+    >>> portal = layer[\'portal\']\n+    >>> setRoles(portal, TEST_USER_ID, [\'Manager\'])\n+    >>> portal.invokeFactory(\'Document\', \'front-page\')\n+    \'front-page\'\n+    >>> portal.setDefaultPage(\'front-page\')\n+    >>> portal.invokeFactory(\'Folder\', \'f1\')\n+    \'f1\'\n+    >>> folder = portal[\'f1\']\n+    >>> from transaction import commit\n+    >>> commit()\n+\n Open a browser and log in as a user who can use the policy form.\n \n     >>> from plone.testing.z2 import Browser\n-    >>> portal = layer[\'portal\']\n     >>> browser = Browser(layer[\'app\'])\n     >>> browser.open(portal.absolute_url())\n     >>> browser.getLink(\'Log in\').click()\n@@ -22,7 +36,8 @@ Open a browser and log in as a user who can use the policy form.\n \n Open the policy form for the front-page and for the folder.\n \n-    >>> browser.getLink(\'Policy\').click()\n+    >>> browser.open(portal.absolute_url())\n+    >>> browser.getLink(id=\'workflow-transition-policy\').click()\n     >>> browser.url\n     \'http://nohost/plone/front-page/placeful_workflow_configuration\'\n     >>> print(browser.contents)\n@@ -40,44 +55,39 @@ Open the policy form for the front-page and for the folder.\n \n The policy form also works for pages that aren\'t the default page.\n \n-    >>> from plone.app.testing import login, TEST_USER_NAME\n-    >>> login(portal, TEST_USER_NAME)\n-    >>> from plone.app.testing import TEST_USER_ID\n-    >>> folder = portal.portal_membership.getHomeFolder(TEST_USER_ID)\n     >>> page = folder[folder.invokeFactory(type_name=\'Document\', id=\'foo\')]\n-    >>> from transaction import commit\n     >>> commit()\n     >>> browser.open(page.absolute_url())\n     >>> browser.getLink(\'Policy\').click()\n     >>> browser.url\n-    \'http://nohost/plone/Members/test_user_1_/foo/placeful_workflow_configuration\'\n+    \'http://nohost/plone/f1/foo/placeful_workflow_configuration\'\n     >>> print(browser.contents)\n     <...\n     <h1>...Workflow policies\' local configuration management...</h1>\n     ...\n \n-Without a local policy document \'foo\', contained inside \'/Members/test_user_1_\' is in review state visible:\n+Without a local policy document \'foo\', contained inside \'/f1\' is in review state visible:\n \n     >>> browser.open(folder.absolute_url())\n     >>> browser.url\n-    \'http://nohost/plone/Members/test_user_1_\'\n+    \'http://nohost/plone/f1\'\n \n     >>> foo_link = browser.getLink(\'foo\')\n-    >>> \'state-visible\' in foo_link.attrs[\'class\']\n+    >>> \'state-private\' in foo_link.attrs[\'class\']\n     True\n \n-Now we will add a local policy on the user folder. Simple Publication for the folder, Intranet below it:\n+Now we will add a local policy on the user folder. Old Plone Publication for the folder, Intranet below it:\n \n     >>> browser.open(folder.absolute_url())\n     >>> browser.getLink(\'Policy\').click()\n     >>> browser.url\n-    \'http://nohost/plone/Members/test_user_1_/placeful_workflow_configuration\'\n+    \'http://nohost/plone/f1/placeful_workflow_configuration\'\n     >>> browser.getControl(name="add_wp_for_type").click()\n     >>> \'Update catalog role mappings\' in browser.contents\n     True\n \n     >>> ctrl_in = browser.getControl(name=\'policy_in\')\n-    >>> ctrl_in.getControl(value=\'simple-publication\').selected=True\n+    >>> ctrl_in.getControl(value=\'old-plone\').selected=True\n \n     >>> ctrl_below = browser.getControl(name=\'policy_below\')\n     >>> ctrl_below.getControl(value=\'intranet\').selected=True\n@@ -95,7 +105,7 @@ And save the policies:\n We validate policy settings were saved:\n \n     >>> ctrl_in = browser.getControl(name=\'policy_in\')\n-    >>> ctrl_in.getControl(value=\'simple-publication\').selected\n+    >>> ctrl_in.getControl(value=\'old-plone\').selected\n     True\n \n     >>> ctrl_below = browser.getControl(name=\'policy_below\')\n@@ -106,7 +116,7 @@ And mappings were not updated:\n \n     >>> browser.open(folder.absolute_url())\n     >>> foo_link = browser.getLink(\'foo\')\n-    >>> \'state-visible\' in foo_link.attrs[\'class\']\n+    >>> \'state-private\' in foo_link.attrs[\'class\']\n     True\n \n If we are sure, or willing to wait, it is possible to update role mappings:\ndiff --git a/Products/CMFPlacefulWorkflow/tests/testCMFPlacefulWorkflow.py b/Products/CMFPlacefulWorkflow/tests/testCMFPlacefulWorkflow.py\nindex ccbefd5..acaba08 100644\n--- a/Products/CMFPlacefulWorkflow/tests/testCMFPlacefulWorkflow.py\n+++ b/Products/CMFPlacefulWorkflow/tests/testCMFPlacefulWorkflow.py\n@@ -25,7 +25,10 @@\n from Products.CMFPlacefulWorkflow.tests.CMFPlacefulWorkflowTestCase import CMFPlacefulWorkflowTestCase  # noqa: E501\n from Products.CMFPlone.utils import get_installer\n from zExceptions import Forbidden\n-\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import logout\n+from plone.app.testing import login\n \n _edit_permissions = []\n _all_permissions = _edit_permissions\n@@ -42,8 +45,6 @@ def createMember(self, id, pw, email, roles=(\'Member\', )):\n         return member\n \n     def setupSecurityContext(self, ):\n-        self.logout()\n-        self.loginAsPortalOwner()\n         # Create a few members\n         self.user1 = self.createMember(\'user1\', \'abcd4\', \'abc@domain.tld\')\n         self.user2 = self.createMember(\'user2\', \'abcd4\', \'abc@domain.tld\')\n@@ -52,14 +53,12 @@ def setupSecurityContext(self, ):\n         self.folder = self.portal.portal_membership.getHomeFolder(\'user1\')\n         self.qi = get_installer(self.portal)\n         self.qi.install_product(\'CMFPlacefulWorkflow\')\n-        self.logout()\n \n-    def afterSetUp(self, ):\n-        """\n-        afterSetUp(self) => This method is called to create an empty PloneArticle.\n-        It also joins three users called \'user1\', \'user2\' and \'user3\'.\n-        """\n-        # some usefull properties/tool\n+    def setUp(self, ):\n+        self.portal = self.layer[\'portal\']\n+        self.app = self.layer[\'app\']\n+        self.app.REQUEST[\'SESSION\'] = self.Session()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.catalog = getToolByName(self.portal, \'portal_catalog\')\n         self.workflow = getToolByName(self.portal, \'portal_workflow\')\n         self.membershipTool = getToolByName(self.portal, \'portal_membership\')\n@@ -70,7 +69,7 @@ def afterSetUp(self, ):\n \n         self.setupSecurityContext()\n \n-        self.login(\'user1\')\n+        # login(self.portal, \'user1\')\n         # self.createPolicy()\n \n     def createArticle(self, ):\n@@ -87,7 +86,6 @@ def test_marker_applied_and_unapplied(self):\n         the install, and removed by the uninstall.\n         """\n         self.assertTrue(IPlacefulMarker.providedBy(self.workflow))\n-        self.loginAsPortalOwner()\n         self.qi.uninstall_product(\'CMFPlacefulWorkflow\')\n         self.assertFalse(IPlacefulMarker.providedBy(self.workflow))\n \n@@ -104,7 +102,6 @@ def test_reinstall(self):\n \n     def test_activation_reactivation(self):\n         """Test multiple installs and uninstalls."""\n-        self.loginAsPortalOwner()\n         self.qi.uninstall_product(\'CMFPlacefulWorkflow\')\n         self.assertFalse(\'portal_placeful_workflow\' in self.portal)\n         self.qi.install_product(\'CMFPlacefulWorkflow\')\n@@ -112,22 +109,6 @@ def test_activation_reactivation(self):\n         self.qi.uninstall_product(\'CMFPlacefulWorkflow\')\n         self.assertFalse(\'portal_placeful_workflow\' in self.portal)\n \n-    def test_prefs_workflow_policy_mapping_set_PostOnly(self):\n-        """\n-        Check POST on mapping policy\n-        """\n-        self.loginAsPortalOwner()\n-        # add a policy to edit\n-        pwt = self.portal_placeful_workflow\n-        pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n-                                     \'default_workflow_policy (Simple Policy)\')\n-        # use a GET request which should fail\n-        self.app.REQUEST.set(\'REQUEST_METHOD\', \'GET\')\n-        self.assertRaises(Forbidden,\n-                          self.portal.prefs_workflow_policy_mapping_set,\n-                          True, \'foo_bar_policy\', \'title\', \'description\',\n-                          {\'Document\': \'plone_workflow\'}, \'plone_workflow\')\n-\n     def test_01_addWorkflowPolicyConfig(self, ):\n         """\n         Add workflow policy config\n@@ -164,7 +145,6 @@ def test_04_addWorkflowPolicyAndConfigForIt(self, ):\n         """\n         Add workflow policy\n         """\n-        self.loginAsPortalOwner()\n         pwt = self.portal_placeful_workflow\n         pwt.manage_addWorkflowPolicy(\'foo_bar_policy\',\n                                      \'default_workflow_policy (Simple Policy)\')\n@@ -176,14 +156,13 @@ def test_04_addWorkflowPolicyAndConfigForIt(self, ):\n         self.assertEqual(pc.getPolicyInId(), \'foo_bar_policy\')\n         self.assertEqual(pc.getPolicyBelowId(), \'foo_bar_policy\')\n \n-        self.logout()\n+        logout()\n \n     def test_04_addWorkflowPolicyAndDuplicateConfiguration(self, ):\n         """Add a workflow policy and duplicate another one\n \n         Use a python script that can duplicate another policy or portal_workflow configuration\n         """\n-        self.loginAsPortalOwner()\n         pw_tool = self.portal_placeful_workflow\n         wf_tool = self.portal.portal_workflow\n         ptypes = self.portal.portal_types.objectIds()\n@@ -227,7 +206,7 @@ def test_04_addWorkflowPolicyAndDuplicateConfiguration(self, ):\n                 self.assertEqual(policy2.getChainFor(\n                     ptype), (\'plone_workflow\', \'folder_workflow\'))\n \n-        self.logout()\n+        logout()\n \n     def test_05_editWorkflowPolicy(self, ):\n         """Edit workflow policy\n@@ -257,11 +236,9 @@ def test_06_getWorkflowPolicyIds(self, ):\n \n     def test_07_getChainFor(self, ):\n         # Let\'s see what the chain is before\n-        self.logout()\n-        self.loginAsPortalOwner()\n-\n         pw = self.portal.portal_workflow\n-        self.assertEqual(pw.getChainFor(\'Document\'), (\'plone_workflow\', ))\n+        self.assertEqual(\n+            pw.getChainFor(\'Document\'), (\'simple_publication_workflow\', ))\n \n         self.portal.invokeFactory(\n             \'Document\',\n@@ -272,7 +249,7 @@ def test_07_getChainFor(self, ):\n         # Workflow tool should look for policy definition and return\n         # the chain of the correct policy\n         self.assertEqual(pw.getChainFor(self.portal.doc_before),\n-                             (\'plone_workflow\', ))\n+                             (\'simple_publication_workflow\', ))\n \n         # Let\'s define another policy\n         pwt = self.portal_placeful_workflow\n@@ -323,15 +300,13 @@ def test_08_getChainFor(self, ):\n         self.assertEqual(pwt.getMaxChainLength(), 2)\n \n     def test_09_wft_getChainFor(self, ):\n-        self.logout()\n-        self.loginAsPortalOwner()\n         self.portal.invokeFactory(\'Folder\', id=\'folder\')\n         self.portal.folder.invokeFactory(\'Document\', id=\'document\', text=\'foo\')\n \n         # Check default\n         wft = self.portal.portal_workflow\n         chain = wft.getChainFor(\'Document\')\n-        self.assertEqual(tuple(chain), (\'plone_workflow\', ))\n+        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n \n         # Check global chain\n         wft.setChainForPortalTypes((\'Document\', ), (\'wf\', ))\n@@ -348,8 +323,6 @@ def test_09_wft_getChainFor(self, ):\n         self.assertEqual(tuple(chain), ())\n \n     def test_10_wft_getChainFor_placeful(self):\n-        self.logout()\n-        self.loginAsPortalOwner()\n         wft = self.portal.portal_workflow\n         self.portal.invokeFactory(\'Folder\', id=\'folder\')\n         self.portal.folder.invokeFactory(\'Document\', id=\'document\')\n@@ -410,8 +383,6 @@ def test_10_wft_getChainFor_placeful(self):\n \n     def test_11_In_and_Below(self):\n         """In and below"""\n-        self.logout()\n-        self.loginAsPortalOwner()\n         wft = self.portal.portal_workflow\n         self.portal.invokeFactory(\'Folder\', id=\'folder\')\n         self.portal.folder.invokeFactory(\'Document\', id=\'document\')\n@@ -474,8 +445,6 @@ def test_11_In_and_Below(self):\n     def test_11_copy_paste(self):\n         """ Test security after a copy/paste\n         """\n-        self.logout()\n-        self.loginAsPortalOwner()\n         wft = self.portal.portal_workflow\n         self.portal.invokeFactory(\'Document\', id=\'document\')\n         self.portal.invokeFactory(\'Folder\', id=\'folder\')\n@@ -503,13 +472,13 @@ def test_11_copy_paste(self):\n         cb = self.portal.manage_copyObjects([\'document\'])\n         self.portal.folder.manage_pasteObjects(cb_copy_data=cb)\n \n-        # A document in plone root should have plone_workflow\n+        # A document in plone root should have simple_publication_workflow\n         chain = wft.getChainFor(self.portal.document)\n-        self.assertEqual(tuple(chain), (\'plone_workflow\', ))\n+        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n \n-        # Folder should have folder_workflow\n+        # Folder should have simple_publication_workflow\n         chain = wft.getChainFor(self.portal.folder)\n-        self.assertEqual(tuple(chain), (\'folder_workflow\', ))\n+        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n \n         # A document in folder should have folder_workflow\n         chain = wft.getChainFor(self.portal.folder.document)\n@@ -529,8 +498,6 @@ def test_13_getWorkflowPolicyConfig(self):\n         self.assertEqual(config, None)\n \n     def test_14_getWorkflowPolicyConfig(self):\n-        self.logout()\n-        self.loginAsPortalOwner()\n         self.portal.invokeFactory(\'Folder\', id=\'folder\')\n         self.portal.folder.invokeFactory(\'Document\', id=\'document\')\n         self.portal.folder.invokeFactory(\'Folder\', id=\'folder2\')\n@@ -575,8 +542,6 @@ def test_14_getWorkflowPolicyConfig(self):\n         self.assertEqual(config, None)\n \n     def test_15_wft_getChainFor_placeful_with_strange_wrapper(self):\n-        self.logout()\n-        self.loginAsPortalOwner()\n         wft = self.portal.portal_workflow\n         self.portal.invokeFactory(\'Folder\', id=\'folder\')\n         self.portal.folder.invokeFactory(\'Document\', id=\'document\')\n@@ -602,17 +567,17 @@ def test_15_wft_getChainFor_placeful_with_strange_wrapper(self):\n         pc.setPolicyBelow(\'foo_bar_policy\')\n \n         chain = wft.getChainFor(self.portal.folder2.document2)\n-        self.assertEqual(tuple(chain), (\'plone_workflow\', ))\n+        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n \n         # What if we acquired the doc from the wrong place\n         wrapped_doc = self.portal.folder2.document2.__of__(self.portal.folder)\n         chain = wft.getChainFor(wrapped_doc)\n-        self.assertEqual(tuple(chain), (\'plone_workflow\', ))\n+        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n \n         # What if we acquired the container from the wrong place\n         wrapped_doc = self.portal.folder2.__of__(self.portal.folder).document2\n         chain = wft.getChainFor(wrapped_doc)\n-        self.assertEqual(tuple(chain), (\'plone_workflow\', ))\n+        self.assertEqual(tuple(chain), (\'simple_publication_workflow\', ))\n \n     def test_16_getWorklists(self):\n         """Verify if worklists are always accessible with a policy\n@@ -620,8 +585,6 @@ def test_16_getWorklists(self):\n         wf_tool = self.portal.portal_workflow\n         placeful_tool = self.portal_placeful_workflow\n \n-        self.loginAsPortalOwner()\n-\n         self.portal.invokeFactory(\'Folder\', id=\'folder\')\n         self.portal.folder.invokeFactory(\'Document\', id=\'document\')\n \n@@ -662,4 +625,4 @@ def test_16_getWorklists(self):\n             )))\n         self.assertEqual(tuple(self.portal.my_worklist()), (document, ))\n \n-        self.logout()\n+        logout()\ndiff --git a/Products/CMFPlacefulWorkflow/tests/test_configlet.py b/Products/CMFPlacefulWorkflow/tests/test_configlet.py\nindex 3ab9b91..06c6e00 100644\n--- a/Products/CMFPlacefulWorkflow/tests/test_configlet.py\n+++ b/Products/CMFPlacefulWorkflow/tests/test_configlet.py\n@@ -19,37 +19,42 @@\n CMFPlacefulWorkflow Functional Test of the Through the Web Configuration\n """\n \n-from plone.app import testing\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.testing.z2 import Browser\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlacefulWorkflow.tests.CMFPlacefulWorkflowTestCase import CMFPlacefulWorkflowFunctionalTestCase  # noqa: E501\n+from Products.CMFPlacefulWorkflow.tests.CMFPlacefulWorkflowTestCase import CMFPlacefulWorkflowTestCase  # noqa: E501\n from transaction import commit\n \n \n-class TestConfiglet(CMFPlacefulWorkflowFunctionalTestCase):\n+class TestConfiglet(CMFPlacefulWorkflowTestCase):\n \n-    def afterSetUp(self):\n+    def setUp(self):\n         """Init some shortcuts member variables."""\n+        self.portal = self.layer[\'portal\']\n+        self.app = self.layer[\'app\']\n+        self.app.REQUEST[\'SESSION\'] = self.Session()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n         self.ppw = getToolByName(self.portal, \'portal_placeful_workflow\')\n \n         self.createDummyPolicy()\n \n     def getBrowser(self, logged_in=False):\n         """ instantiate and return a testbrowser for convenience """\n-        browser = Browser(self.layer[\'app\'])\n+        browser = Browser(self.app)\n         if logged_in:\n             # Add an authorization header using the given or default\n             # credentials """\n             browser.addHeader(\'Authorization\', \'Basic %s:%s\' % (\n-                testing.SITE_OWNER_NAME,\n-                testing.SITE_OWNER_PASSWORD))\n+                SITE_OWNER_NAME,\n+                SITE_OWNER_PASSWORD))\n         return browser\n \n     def createDummyPolicy(self):\n         """Create a workflow policy named \'dummy_policy\' for us to work with.\n         """\n-        self.logout()\n-        self.loginAsPortalOwner()\n         # Create a policy\n         self.ppw.manage_addWorkflowPolicy(\n             \'dummy_policy\', \'default_workflow_policy (Simple Policy)\')\n@@ -65,7 +70,7 @@ def test_local_mapping_select_acquisition_chain(self):\n         self.setLocalChainForPortalType(\'Document\', \'folder_workflow\')\n         commit()\n         browser = self.getBrowser(logged_in=True)\n-\n+        browser.handleErrors = False\n         browser.open(\'http://nohost/plone/prefs_workflow_policy_mapping?\'\n                      \'wfpid=dummy_policy\')\n         self.assertEqual(browser.getControl(name=\'wf.Document:record\').value,\ndiff --git a/Products/CMFPlacefulWorkflow/tests/test_doctests.py b/Products/CMFPlacefulWorkflow/tests/test_doctests.py\nindex fd7068f..c4caf6b 100644\n--- a/Products/CMFPlacefulWorkflow/tests/test_doctests.py\n+++ b/Products/CMFPlacefulWorkflow/tests/test_doctests.py\n@@ -20,8 +20,7 @@\n """\n \n from plone.testing import layered\n-from Products.CMFPlacefulWorkflow.tests.CMFPlacefulWorkflowTestCase import PWF_LAYER\n-\n+from Products.CMFPlacefulWorkflow.testing import PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING\n import doctest\n import unittest\n \n@@ -37,5 +36,5 @@ def test_suite():\n     for testfile in [\'exportimport.txt\', \'policy_form.txt\']:\n         suite.addTest(layered(doctest.DocFileSuite(testfile,\n                                                    optionflags=OPTIONFLAGS),\n-                              layer=PWF_LAYER))\n+                              layer=PRODUCTS_CMFPLACEFULWORKFLOW_FUNCTIONAL_TESTING))\n     return suite\n'

