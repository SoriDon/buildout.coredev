Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-07-20T14:18:38+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/3b5673da683dc2fd0bf180ce68f90f35206c4ad0

fix: plone.restapi must work without dependency on only Products.CMFPlone

currently it depends on plone.app.itertae. The assumption, that it is always there is wrong, it is an internal addon, only installed when dependening on 'Plone'.

Files changed:
A news/1461.bugfix
M src/plone/restapi/serializer/dxcontent.py
M src/plone/restapi/services/configure.zcml

b'diff --git a/news/1461.bugfix b/news/1461.bugfix\nnew file mode 100644\nindex 000000000..2246d8193\n--- /dev/null\n+++ b/news/1461.bugfix\n@@ -0,0 +1,2 @@\n+Do not hard depend on `plone.app.iterate`. It is not an direct core package and might not be available.\n+[jensens]\ndiff --git a/src/plone/restapi/serializer/dxcontent.py b/src/plone/restapi/serializer/dxcontent.py\nindex 90295ca3a..4f1331b32 100644\n--- a/src/plone/restapi/serializer/dxcontent.py\n+++ b/src/plone/restapi/serializer/dxcontent.py\n@@ -15,7 +15,6 @@\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.serializer.expansion import expandable_elements\n from plone.restapi.serializer.nextprev import NextPrevious\n-from plone.restapi.serializer.working_copy import WorkingCopyInfo\n from plone.restapi.services.locking import lock_info\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from plone.supermodel.utils import mergedTaggedValueDict\n@@ -30,6 +29,13 @@\n from zope.schema import getFields\n from zope.security.interfaces import IPermission\n \n+try:\n+    # plone.app.iterate is by intend not part of Products.CMFPlone dependencies\n+    # so we can not rely on having it\n+    from plone.restapi.serializer.working_copy import WorkingCopyInfo\n+except ImportError:\n+    WorkingCopyInfo = None\n+\n \n @implementer(ISerializeToJson)\n @adapter(IDexterityContent, Interface)\n@@ -77,8 +83,11 @@ def __call__(self, version=None, include_items=True):\n         )\n \n         # Insert working copy information\n-        baseline, working_copy = WorkingCopyInfo(self.context).get_working_copy_info()\n-        result.update({"working_copy": working_copy, "working_copy_of": baseline})\n+        if WorkingCopyInfo is not None:\n+            baseline, working_copy = WorkingCopyInfo(\n+                self.context\n+            ).get_working_copy_info()\n+            result.update({"working_copy": working_copy, "working_copy_of": baseline})\n \n         # Insert locking information\n         result.update({"lock": lock_info(obj)})\ndiff --git a/src/plone/restapi/services/configure.zcml b/src/plone/restapi/services/configure.zcml\nindex 7c9287335..bf5b31be9 100644\n--- a/src/plone/restapi/services/configure.zcml\n+++ b/src/plone/restapi/services/configure.zcml\n@@ -38,7 +38,7 @@\n   <include package=".workflow" />\n   <include\n       package=".workingcopy"\n-      zcml:condition="have plone-5"\n+      zcml:condition="installed plone.app.iterate"\n       />\n   <include\n       package=".multilingual"\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-08-01T16:04:20+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/e89fed385a1a9316eb80f25c811f1735c5c01617

Merge branch 'master' into fix-no-iterate

Files changed:
A news/1459.bugfix
M docs/source/conf.py
M src/plone/restapi/services/users/get.py
M src/plone/restapi/tests/http-examples/translated_messages_addons.resp

b'diff --git a/docs/source/conf.py b/docs/source/conf.py\nindex c7261d9fe..f875873b0 100644\n--- a/docs/source/conf.py\n+++ b/docs/source/conf.py\n@@ -32,7 +32,7 @@\n # built documents.\n # TODO: There must be a way to import this from `setup.py` so we don\'t have to\n # update it manually for each release.\n-version = "8.21.3.dev0"\n+version = "8.24.1.dev0"\n release = version\n \n # -- General configuration ----------------------------------------------------\ndiff --git a/news/1459.bugfix b/news/1459.bugfix\nnew file mode 100644\nindex 000000000..f281b0331\n--- /dev/null\n+++ b/news/1459.bugfix\n@@ -0,0 +1 @@\n+Fix of users endpoint for Membrane users. [ksuess]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex 4bc5271f4..4bdda66c5 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -63,8 +63,8 @@ def _principal_search_results(\n \n         return principals\n \n-    def _get_users(self):\n-        results = {user["userid"] for user in self.acl_users.searchUsers()}\n+    def _get_users(self, **kw):\n+        results = {user["userid"] for user in self.acl_users.searchUsers(**kw)}\n         users = [self.portal_membership.getMemberById(userid) for userid in results]\n         return self._sort_users(users)\n \n@@ -103,14 +103,19 @@ def _get_filtered_users(self, query, groups_filter, search_term, limit):\n         if search_term:\n             users = self._user_search_results()\n         else:\n-            results = self.acl_users.searchUsers(id=query, max_results=limit)\n-            users = [\n-                self.portal_membership.getMemberById(user["userid"]) for user in results\n-            ]\n+            kw = {}\n+            if query:\n+                kw["id"] = query\n+                # No max_results if groups_filter\n+                if limit:\n+                    kw["max_results"] = limit\n+            users = self._get_users(**kw)\n+\n         if groups_filter:\n             users = [\n                 user for user in users if set(user.getGroups()) & set(groups_filter)\n             ]\n+        users = limit and users[:limit] or users\n         return self._sort_users(users)\n \n     def has_permission_to_query(self):\n@@ -131,7 +136,7 @@ def reply(self):\n         if len(self.query) > 0 and len(self.params) == 0:\n             query = self.query.get("query", "")\n             groups_filter = self.query.get("groups-filter:list", [])\n-            limit = self.query.get("limit", [DEFAULT_SEARCH_RESULTS_LIMIT])[0]\n+            limit = int(self.query.get("limit", [DEFAULT_SEARCH_RESULTS_LIMIT])[0])\n             if query or groups_filter or self.search_term or limit:\n                 if self.has_permission_to_query():\n                     users = self._get_filtered_users(\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_addons.resp b/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\nindex a9de8d8b2..52de69ced 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_addons.resp\n@@ -73,7 +73,7 @@ Content-Type: application/json\n                 "newVersion": "0006",\n                 "required": false\n             },\n-            "version": "8.23.1.dev0"\n+            "version": "8.24.1.dev0"\n         },\n         {\n             "@id": "http://localhost:55001/plone/@addons/plone.session",\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2022-08-05T15:24:30+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.restapi/commit/e5a22f018292d798c7c9b6600a1dad85a6328a57

Merge pull request #1461 from plone/fix-no-iterate

fix: plone.restapi must work with dependency on only Products.CMFPlone

Files changed:
A news/1461.bugfix
M src/plone/restapi/serializer/dxcontent.py
M src/plone/restapi/services/configure.zcml

b'diff --git a/news/1461.bugfix b/news/1461.bugfix\nnew file mode 100644\nindex 000000000..2246d8193\n--- /dev/null\n+++ b/news/1461.bugfix\n@@ -0,0 +1,2 @@\n+Do not hard depend on `plone.app.iterate`. It is not an direct core package and might not be available.\n+[jensens]\ndiff --git a/src/plone/restapi/serializer/dxcontent.py b/src/plone/restapi/serializer/dxcontent.py\nindex 90295ca3a..4f1331b32 100644\n--- a/src/plone/restapi/serializer/dxcontent.py\n+++ b/src/plone/restapi/serializer/dxcontent.py\n@@ -15,7 +15,6 @@\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.serializer.expansion import expandable_elements\n from plone.restapi.serializer.nextprev import NextPrevious\n-from plone.restapi.serializer.working_copy import WorkingCopyInfo\n from plone.restapi.services.locking import lock_info\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from plone.supermodel.utils import mergedTaggedValueDict\n@@ -30,6 +29,13 @@\n from zope.schema import getFields\n from zope.security.interfaces import IPermission\n \n+try:\n+    # plone.app.iterate is by intend not part of Products.CMFPlone dependencies\n+    # so we can not rely on having it\n+    from plone.restapi.serializer.working_copy import WorkingCopyInfo\n+except ImportError:\n+    WorkingCopyInfo = None\n+\n \n @implementer(ISerializeToJson)\n @adapter(IDexterityContent, Interface)\n@@ -77,8 +83,11 @@ def __call__(self, version=None, include_items=True):\n         )\n \n         # Insert working copy information\n-        baseline, working_copy = WorkingCopyInfo(self.context).get_working_copy_info()\n-        result.update({"working_copy": working_copy, "working_copy_of": baseline})\n+        if WorkingCopyInfo is not None:\n+            baseline, working_copy = WorkingCopyInfo(\n+                self.context\n+            ).get_working_copy_info()\n+            result.update({"working_copy": working_copy, "working_copy_of": baseline})\n \n         # Insert locking information\n         result.update({"lock": lock_info(obj)})\ndiff --git a/src/plone/restapi/services/configure.zcml b/src/plone/restapi/services/configure.zcml\nindex 7c9287335..bf5b31be9 100644\n--- a/src/plone/restapi/services/configure.zcml\n+++ b/src/plone/restapi/services/configure.zcml\n@@ -38,7 +38,7 @@\n   <include package=".workflow" />\n   <include\n       package=".workingcopy"\n-      zcml:condition="have plone-5"\n+      zcml:condition="installed plone.app.iterate"\n       />\n   <include\n       package=".multilingual"\n'

