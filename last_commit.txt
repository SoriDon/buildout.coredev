Repository: plone.scale


Branch: refs/heads/master
Date: 2022-05-16T14:24:05+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/6cc4b95ea0a18b828e6539fdb55b00cdf3b7f72a

Add more tests for cleaning up old items.

Files changed:
M plone/scale/tests/test_storage.py

b'diff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py\nindex 17c2f2b..50fa17d 100644\n--- a/plone/scale/tests/test_storage.py\n+++ b/plone/scale/tests/test_storage.py\n@@ -148,7 +148,7 @@ def testDeleteRemovesItemAndIndex(self):\n         del storage[scale["uid"]]\n         self.assertEqual(len(storage), 0)\n \n-    def testCleanUpOldItems(self):\n+    def testCleanUpOldItemsForSameParameters(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n         scale_old = storage.scale(foo=23, bar=42)\n@@ -158,17 +158,32 @@ def testCleanUpOldItems(self):\n         self.assertEqual(len(storage), 1)\n         self.assertIn(scale_new["uid"], storage)\n         self.assertNotIn(scale_old["uid"], storage)\n+        del storage[scale_new["uid"]]\n+        self.assertEqual(len(storage), 0)\n+\n+    def testCleanUpOldItemsForDifferentParameters(self):\n+        self._provide_dummy_scale_adapter()\n+        storage = self.storage\n+        scale_old = storage.scale(foo=23, bar=42)\n+        orig_modified = storage.modified()\n+        next_modified = orig_modified + 60000\n+        storage.modified = lambda: next_modified\n+        scale_new = storage.scale(foo=23, bar=50)\n+        self.assertEqual(len(storage), 2)\n+        self.assertIn(scale_new["uid"], storage)\n+        self.assertIn(scale_old["uid"], storage)\n \n         # When modification time is older than a day, too old scales\n         # get purged.\n-        next_modified = storage.modified() + 24 * 60 * 60 * 1000 + 1\n+        next_modified = orig_modified + 24 * 60 * 60 * 1000 + 1\n         storage.modified = lambda: next_modified\n-        scale_newer = storage.scale(foo=23, bar=42)\n+        scale_newer = storage.scale(foo=23, bar=70)\n \n         self.assertIn(scale_newer["uid"], storage)\n-        self.assertNotIn(scale_new["uid"], storage)\n+        self.assertIn(scale_new["uid"], storage)\n         self.assertNotIn(scale_old["uid"], storage)\n         del storage[scale_newer["uid"]]\n+        del storage[scale_new["uid"]]\n         self.assertEqual(len(storage), 0)\n \n     def testClear(self):\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-05-16T15:34:19+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/3b61587dd914946d15194aec47376a916703c8f3

Test _modified_since method.

Files changed:
M plone/scale/tests/test_storage.py

b'diff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py\nindex 50fa17d..351acdf 100644\n--- a/plone/scale/tests/test_storage.py\n+++ b/plone/scale/tests/test_storage.py\n@@ -148,6 +148,20 @@ def testDeleteRemovesItemAndIndex(self):\n         del storage[scale["uid"]]\n         self.assertEqual(len(storage), 0)\n \n+    def test_modified_since(self):\n+        self._provide_dummy_scale_adapter()\n+        storage = self.storage\n+        self.assertEqual(storage.modified(), 42)\n+\n+        self.assertTrue(storage._modified_since(41))\n+        self.assertFalse(storage._modified_since(42))\n+        self.assertFalse(storage._modified_since(43))\n+\n+        self.assertFalse(storage._modified_since(41, offset=1))\n+        self.assertTrue(storage._modified_since(40, offset=1))\n+        self.assertFalse(storage._modified_since(32, offset=10))\n+        self.assertTrue(storage._modified_since(32, offset=9))\n+\n     def testCleanUpOldItemsForSameParameters(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-05-16T16:13:13+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/afbad8258e8d0d5a7ba817ec5da9da2a8a373dbe

Fix cleanup of scales: only throw away outdated scales of the same field.

Fixes https://github.com/plone/plone.scale/issues/55

Files changed:
A news/55.bugfix
M plone/scale/storage.py
M plone/scale/tests/test_storage.py

b'diff --git a/news/55.bugfix b/news/55.bugfix\nnew file mode 100644\nindex 0000000..261a4b6\n--- /dev/null\n+++ b/news/55.bugfix\n@@ -0,0 +1,2 @@\n+Fix cleanup of scales: only throw away outdated scales of the same field.\n+[maurits]\ndiff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex 6cab18a..87cedad 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -192,7 +192,8 @@ def scale(self, **parameters):\n         if result is not None:\n             # storage will be modified:\n             # good time to also cleanup\n-            self._cleanup()\n+            fieldname = parameters.get("fieldname")\n+            self._cleanup(fieldname=fieldname)\n             data, format_, dimensions = result\n             width, height = dimensions\n             uid = str(uuid4())\n@@ -205,12 +206,14 @@ def scale(self, **parameters):\n                 key=key,\n                 modified=self.modified_time,\n             )\n+            if fieldname:\n+                info["fieldname"] = fieldname\n             if outdated_uid:\n                 del self[outdated_uid]\n             storage[uid] = info\n         return info\n \n-    def _cleanup(self):\n+    def _cleanup(self, fieldname=None):\n         storage = self.storage\n         modified_time = self.modified_time\n         if modified_time is None:\n@@ -223,6 +226,10 @@ def _cleanup(self):\n             # before refactoring\n             if isinstance(key, tuple):\n                 del self[key]\n+            if fieldname and "fieldname" in value and value["fieldname"] != fieldname:\n+                # Leave scales for other fieldnames alone.\n+                # self.modified may have nothing to do with that field.\n+                continue\n             # clear cache from scales older than one day\n             elif self._modified_since(value["modified"], offset=KEEP_SCALE_MILLIS):\n                 del self[key]\n@@ -239,7 +246,7 @@ def __delitem__(self, uid):\n         except KeyError:\n             # This should not happen, but it apparently can happen in corner\n             # cases.  See https://github.com/plone/plone.scale/issues/15\n-            logger.warn("Could not delete key %s from storage.", uid)\n+            logger.warning("Could not delete key %s from storage.", uid)\n \n     def __iter__(self):\n         return iter(self.storage)\ndiff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py\nindex 351acdf..0f883ca 100644\n--- a/plone/scale/tests/test_storage.py\n+++ b/plone/scale/tests/test_storage.py\n@@ -200,6 +200,35 @@ def testCleanUpOldItemsForDifferentParameters(self):\n         del storage[scale_new["uid"]]\n         self.assertEqual(len(storage), 0)\n \n+    def testCleanUpOldItemsForDifferentFieldname(self):\n+        self._provide_dummy_scale_adapter()\n+        storage = self.storage\n+        scale_image = storage.scale(fieldname="image", bar=42)\n+        next_modified = storage.modified() + 60000\n+        storage.modified = lambda: next_modified\n+        scale_leadimage_old = storage.scale(fieldname="leadimage", bar=50)\n+        self.assertEqual(len(storage), 2)\n+        self.assertIn(scale_leadimage_old["uid"], storage)\n+        self.assertIn(scale_image["uid"], storage)\n+\n+        # When modification time is older than a day, too old scales\n+        # get purged.  But only for the current fieldname.\n+        next_modified = storage.modified() + 24 * 60 * 60 * 1000 + 1\n+        storage.modified = lambda: next_modified\n+        scale_leadimage_new = storage.scale(fieldname="leadimage", bar=70)\n+\n+        self.assertIn(scale_leadimage_new["uid"], storage)\n+        self.assertNotIn(scale_leadimage_old["uid"], storage)\n+        self.assertIn(scale_image["uid"], storage)\n+\n+        # If we manually call cleanup without a fieldname,\n+        # all items are checked.\n+        storage._cleanup()\n+        self.assertIn(scale_leadimage_new["uid"], storage)\n+        self.assertNotIn(scale_image["uid"], storage)\n+        del storage[scale_leadimage_new["uid"]]\n+        self.assertEqual(len(storage), 0)\n+\n     def testClear(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2022-05-17T22:27:00+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/7caa0c4a7b6dec3c2b835384f4b0614e060e6229

Merge pull request #56 from plone/maurits-test-cleanup

Only throw away outdated scales of the same field.

Files changed:
A news/55.bugfix
M plone/scale/storage.py
M plone/scale/tests/test_storage.py

b'diff --git a/news/55.bugfix b/news/55.bugfix\nnew file mode 100644\nindex 0000000..261a4b6\n--- /dev/null\n+++ b/news/55.bugfix\n@@ -0,0 +1,2 @@\n+Fix cleanup of scales: only throw away outdated scales of the same field.\n+[maurits]\ndiff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex 6cab18a..87cedad 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -192,7 +192,8 @@ def scale(self, **parameters):\n         if result is not None:\n             # storage will be modified:\n             # good time to also cleanup\n-            self._cleanup()\n+            fieldname = parameters.get("fieldname")\n+            self._cleanup(fieldname=fieldname)\n             data, format_, dimensions = result\n             width, height = dimensions\n             uid = str(uuid4())\n@@ -205,12 +206,14 @@ def scale(self, **parameters):\n                 key=key,\n                 modified=self.modified_time,\n             )\n+            if fieldname:\n+                info["fieldname"] = fieldname\n             if outdated_uid:\n                 del self[outdated_uid]\n             storage[uid] = info\n         return info\n \n-    def _cleanup(self):\n+    def _cleanup(self, fieldname=None):\n         storage = self.storage\n         modified_time = self.modified_time\n         if modified_time is None:\n@@ -223,6 +226,10 @@ def _cleanup(self):\n             # before refactoring\n             if isinstance(key, tuple):\n                 del self[key]\n+            if fieldname and "fieldname" in value and value["fieldname"] != fieldname:\n+                # Leave scales for other fieldnames alone.\n+                # self.modified may have nothing to do with that field.\n+                continue\n             # clear cache from scales older than one day\n             elif self._modified_since(value["modified"], offset=KEEP_SCALE_MILLIS):\n                 del self[key]\n@@ -239,7 +246,7 @@ def __delitem__(self, uid):\n         except KeyError:\n             # This should not happen, but it apparently can happen in corner\n             # cases.  See https://github.com/plone/plone.scale/issues/15\n-            logger.warn("Could not delete key %s from storage.", uid)\n+            logger.warning("Could not delete key %s from storage.", uid)\n \n     def __iter__(self):\n         return iter(self.storage)\ndiff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py\nindex 17c2f2b..0f883ca 100644\n--- a/plone/scale/tests/test_storage.py\n+++ b/plone/scale/tests/test_storage.py\n@@ -148,7 +148,21 @@ def testDeleteRemovesItemAndIndex(self):\n         del storage[scale["uid"]]\n         self.assertEqual(len(storage), 0)\n \n-    def testCleanUpOldItems(self):\n+    def test_modified_since(self):\n+        self._provide_dummy_scale_adapter()\n+        storage = self.storage\n+        self.assertEqual(storage.modified(), 42)\n+\n+        self.assertTrue(storage._modified_since(41))\n+        self.assertFalse(storage._modified_since(42))\n+        self.assertFalse(storage._modified_since(43))\n+\n+        self.assertFalse(storage._modified_since(41, offset=1))\n+        self.assertTrue(storage._modified_since(40, offset=1))\n+        self.assertFalse(storage._modified_since(32, offset=10))\n+        self.assertTrue(storage._modified_since(32, offset=9))\n+\n+    def testCleanUpOldItemsForSameParameters(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n         scale_old = storage.scale(foo=23, bar=42)\n@@ -158,17 +172,61 @@ def testCleanUpOldItems(self):\n         self.assertEqual(len(storage), 1)\n         self.assertIn(scale_new["uid"], storage)\n         self.assertNotIn(scale_old["uid"], storage)\n+        del storage[scale_new["uid"]]\n+        self.assertEqual(len(storage), 0)\n+\n+    def testCleanUpOldItemsForDifferentParameters(self):\n+        self._provide_dummy_scale_adapter()\n+        storage = self.storage\n+        scale_old = storage.scale(foo=23, bar=42)\n+        orig_modified = storage.modified()\n+        next_modified = orig_modified + 60000\n+        storage.modified = lambda: next_modified\n+        scale_new = storage.scale(foo=23, bar=50)\n+        self.assertEqual(len(storage), 2)\n+        self.assertIn(scale_new["uid"], storage)\n+        self.assertIn(scale_old["uid"], storage)\n \n         # When modification time is older than a day, too old scales\n         # get purged.\n-        next_modified = storage.modified() + 24 * 60 * 60 * 1000 + 1\n+        next_modified = orig_modified + 24 * 60 * 60 * 1000 + 1\n         storage.modified = lambda: next_modified\n-        scale_newer = storage.scale(foo=23, bar=42)\n+        scale_newer = storage.scale(foo=23, bar=70)\n \n         self.assertIn(scale_newer["uid"], storage)\n-        self.assertNotIn(scale_new["uid"], storage)\n+        self.assertIn(scale_new["uid"], storage)\n         self.assertNotIn(scale_old["uid"], storage)\n         del storage[scale_newer["uid"]]\n+        del storage[scale_new["uid"]]\n+        self.assertEqual(len(storage), 0)\n+\n+    def testCleanUpOldItemsForDifferentFieldname(self):\n+        self._provide_dummy_scale_adapter()\n+        storage = self.storage\n+        scale_image = storage.scale(fieldname="image", bar=42)\n+        next_modified = storage.modified() + 60000\n+        storage.modified = lambda: next_modified\n+        scale_leadimage_old = storage.scale(fieldname="leadimage", bar=50)\n+        self.assertEqual(len(storage), 2)\n+        self.assertIn(scale_leadimage_old["uid"], storage)\n+        self.assertIn(scale_image["uid"], storage)\n+\n+        # When modification time is older than a day, too old scales\n+        # get purged.  But only for the current fieldname.\n+        next_modified = storage.modified() + 24 * 60 * 60 * 1000 + 1\n+        storage.modified = lambda: next_modified\n+        scale_leadimage_new = storage.scale(fieldname="leadimage", bar=70)\n+\n+        self.assertIn(scale_leadimage_new["uid"], storage)\n+        self.assertNotIn(scale_leadimage_old["uid"], storage)\n+        self.assertIn(scale_image["uid"], storage)\n+\n+        # If we manually call cleanup without a fieldname,\n+        # all items are checked.\n+        storage._cleanup()\n+        self.assertIn(scale_leadimage_new["uid"], storage)\n+        self.assertNotIn(scale_image["uid"], storage)\n+        del storage[scale_leadimage_new["uid"]]\n         self.assertEqual(len(storage), 0)\n \n     def testClear(self):\n'

