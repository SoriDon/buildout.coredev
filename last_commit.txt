Repository: plone.restapi


Branch: refs/heads/master
Date: 2023-02-05T07:45:10-03:00
Author: Ã‰rico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/e7f9cd14596c79cb80532c95b7a32968ca59252a

Fix bug with registry service that would not support tuple records (#1578)

Files changed:
A news/1575.bugfix
M src/plone/restapi/services/registry/update.py
M src/plone/restapi/tests/test_registry.py

b'diff --git a/news/1575.bugfix b/news/1575.bugfix\nnew file mode 100644\nindex 000000000..b5af597bd\n--- /dev/null\n+++ b/news/1575.bugfix\n@@ -0,0 +1 @@\n+Fix bug with registry service that would not support tuple records. [ericof]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/services/registry/update.py b/src/plone/restapi/services/registry/update.py\nindex 755814e43..8693e9681 100644\n--- a/src/plone/restapi/services/registry/update.py\n+++ b/src/plone/restapi/services/registry/update.py\n@@ -1,7 +1,9 @@\n+from plone.registry import field\n from plone.registry.interfaces import IRegistry\n from plone.restapi.services import Service\n from zope.component import getUtility\n from zope.interface import alsoProvides\n+from zope.schema.interfaces import WrongType\n \n import json\n import plone.protect.interfaces\n@@ -20,7 +22,14 @@ def reply(self):\n             if key not in registry:\n                 raise NotImplementedError(\n                     "This endpoint is only intended to update existing "\n-                    "records! Couldn\'t find key %r" % key\n+                    f"records! Couldn\'t find key {key}"\n                 )\n-            registry[key] = value\n+            # Issue 1575: Deal with tuple values\n+            try:\n+                registry[key] = value\n+            except WrongType as exc:\n+                if isinstance(exc.field, field.Tuple) and isinstance(value, list):\n+                    registry[key] = tuple(value)\n+                else:\n+                    raise exc\n         return self.reply_no_content()\ndiff --git a/src/plone/restapi/tests/test_registry.py b/src/plone/restapi/tests/test_registry.py\nindex d66936ba6..61a266b64 100644\n--- a/src/plone/restapi/tests/test_registry.py\n+++ b/src/plone/restapi/tests/test_registry.py\n@@ -35,6 +35,18 @@ def setUp(self):\n             record = Record(field.TextLine(title="Foo Bar"), "Lorem Ipsum")\n             registry.records["foo.bar" + str(counter)] = record\n \n+        # Add Tuple record\n+        record = Record(\n+            field.Tuple(\n+                title="Tuple",\n+                min_length=0,\n+                max_length=10,\n+                value_type=field.TextLine(title="Value"),\n+            ),\n+            ("Hello", "World", "!"),\n+        )\n+        registry.records["foo.tuple"] = record\n+\n         transaction.commit()\n \n     def tearDown(self):\n@@ -73,6 +85,20 @@ def test_update_non_existing_registry_record(self):\n         response = self.api_session.patch("/@registry", json=payload)\n         self.assertEqual(response.status_code, 500)\n \n+    def test_update_wrong_type(self):\n+        payload = {"foo.bar": ["lorem ipsum"]}\n+        response = self.api_session.patch("/@registry", json=payload)\n+        self.assertEqual(response.status_code, 500)\n+\n+    def test_update_tuple_record(self):\n+        registry = getUtility(IRegistry)\n+        payload = {"foo.tuple": ["lorem", "ipsum", "dolor"]}\n+        response = self.api_session.patch("/@registry", json=payload)\n+        transaction.commit()\n+\n+        self.assertEqual(response.status_code, 204)\n+        self.assertEqual(registry["foo.tuple"], ("lorem", "ipsum", "dolor"))\n+\n     def test_get_listing(self):\n         response = self.api_session.get("/@registry")\n \n'

