Repository: mockup


Branch: refs/heads/master
Date: 2022-03-30T13:15:31+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/93d5978fa072d1efb8f2db29830460f4452eb9a8

fix(core utils resolveIcon): Fix resolveIcon cache.

Fix the ``resolveIcon`` cache in a way that multiple asynchronous calls for the same icon does not lead to multiple network connections to the same resource.
Instead the icon cache is prefilled with the Promise which will resolve the icon and then we await the fullfilment of the Promise.

Files changed:
M src/core/utils.js

b'diff --git a/src/core/utils.js b/src/core/utils.js\nindex d36d7b0c8..6ca67d2cb 100644\n--- a/src/core/utils.js\n+++ b/src/core/utils.js\n@@ -1,6 +1,7 @@\n import $ from "jquery";\n+import logging from "@patternslib/patternslib/src/core/logging";\n \n-\n+const logger = logging.getLogger("core utils");\n \n var QueryHelper = function (options) {\n     /* if pattern argument provided, it can implement the interface of:\n@@ -373,61 +374,74 @@ var createElementFromHTML = function (htmlString) {\n     return div.firstChild;\n };\n \n-let iconCache = new Map();\n+const ICON_CACHE = new Map();\n \n const resolveIcon = async function (name, as_node, css_class) {\n     // Return a <svg> element from a icon name.\n     // Example:\n     // const dropdownIcon: await utils.resolveIcon(\'plone-settings\');\n     // if (name === \'plone.icon.plone-rearrange\'){debugger}\n-    const iconLookupName = `plone.icon.${name}`;\n-    const cache_key = as_node ? iconLookupName + \'_as_node\' : iconLookupName;\n-    // const cached_icon = iconCache.has(iconLookupName) ? iconCache.get(iconLookupName) :\n-    const cached_icon = iconCache.get(cache_key);\n-    if(cached_icon){\n-        console.log("use cached icon: ", cache_key)\n-        return cached_icon;\n+    const icon_lookup_name = `plone.icon.${name}`;\n+    const cache_key = as_node ? icon_lookup_name + "_as_node" : icon_lookup_name;\n+\n+    // ATTENTION: async/await trick ahead!\n+    if (!ICON_CACHE.has(cache_key)) {\n+        // 1) Immediately set the asynchronous function call to _resolve_icon in the icon cache.\n+        // Subsequent calls will not re-set this because the cache_key is already set.\n+        ICON_CACHE.set(cache_key, _resolve_icon());\n+        logger.debug(`Loading icon "${icon_lookup_name}"`);\n     }\n-    console.log("resolve icon: ", iconLookupName)\n-    const baseUrl = $("body").attr("data-portal-url");\n-    let icon = null;\n-    if(baseUrl){\n-        const url = baseUrl + "/@@iconresolver";\n-        if (url) {\n-            const resp = await fetch(`${url}/${name}`);\n-            icon = await resp.text();\n+    // 2) Await the promise for resolving the icon or just return the icon itself.\n+    return await ICON_CACHE.get(cache_key);\n+\n+    async function _resolve_icon() {\n+        // Do the actual loading.\n+\n+        const base_url = $("body").attr("data-portal-url");\n+        let icon = null;\n+        if (base_url) {\n+            const url = base_url + "/@@iconresolver";\n+            if (url) {\n+                try {\n+                    const resp = await fetch(`${url}/${name}`);\n+                    icon = await resp.text();\n+                } catch (e) {\n+                    logger.warn(`Loading icon "${name}" from URL ${url} failed.`);\n+                    console.warn(e);\n+                }\n+            }\n         }\n-    }\n-    if (!icon) {\n-        // fallback\n-        name = iconLookupName;\n-        try {\n-            import("../styles/icons.scss");\n-            const iconmap = await import("../iconmap.json");\n-            const parts = iconmap[name]?.split?.("/");\n-            if (parts[0].includes("bootstrap-icons")) {\n-                icon = await import(`bootstrap-icons/icons/${parts[1]}`);\n-                icon = icon?.default;\n+        if (!icon) {\n+            // fallback\n+            name = icon_lookup_name;\n+            try {\n+                import("../styles/icons.scss");\n+                const iconmap = await import("../iconmap.json");\n+                const parts = iconmap[name]?.split?.("/");\n+                if (parts[0].includes("bootstrap-icons")) {\n+                    icon = await import(`bootstrap-icons/icons/${parts[1]}`);\n+                    icon = icon?.default;\n+                }\n+            } catch (e) {\n+                // import error\n+                logger.warn(`Loading icon "${icon_lookup_name}" failed from fallback.`);\n+                console.warn(e);\n             }\n-        } catch (e) {\n-            // import error\n-            console.warn(e);\n         }\n-    }\n-    if (!icon) {\n-        return as_node ? null : "";\n-    }\n+        if (!icon) {\n+            return as_node ? null : "";\n+        }\n \n-    if (as_node) {\n-        const tmp = document.createElement("div");\n-        tmp.innerHTML = icon;\n-        icon = tmp.querySelector("svg");\n-    }\n-    if (as_node && css_class) {\n-        icon.classList.add(css_class);\n+        if (as_node) {\n+            const tmp = document.createElement("div");\n+            tmp.innerHTML = icon;\n+            icon = tmp.querySelector("svg");\n+        }\n+        if (as_node && css_class) {\n+            icon.classList.add(css_class);\n+        }\n+        return icon;\n     }\n-    iconCache.set(cache_key, icon);\n-    return icon;\n };\n \n export default {\n'

Repository: mockup


Branch: refs/heads/master
Date: 2022-03-30T14:56:44+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/b04f3780460744501b11e83b14e7c828a3e57fc3

Merge pull request #1142 from plone/fix-icon-cache

fix(core utils resolveIcon): Fix resolveIcon cache.

Files changed:
M src/core/utils.js

b'diff --git a/src/core/utils.js b/src/core/utils.js\nindex d36d7b0c8..6ca67d2cb 100644\n--- a/src/core/utils.js\n+++ b/src/core/utils.js\n@@ -1,6 +1,7 @@\n import $ from "jquery";\n+import logging from "@patternslib/patternslib/src/core/logging";\n \n-\n+const logger = logging.getLogger("core utils");\n \n var QueryHelper = function (options) {\n     /* if pattern argument provided, it can implement the interface of:\n@@ -373,61 +374,74 @@ var createElementFromHTML = function (htmlString) {\n     return div.firstChild;\n };\n \n-let iconCache = new Map();\n+const ICON_CACHE = new Map();\n \n const resolveIcon = async function (name, as_node, css_class) {\n     // Return a <svg> element from a icon name.\n     // Example:\n     // const dropdownIcon: await utils.resolveIcon(\'plone-settings\');\n     // if (name === \'plone.icon.plone-rearrange\'){debugger}\n-    const iconLookupName = `plone.icon.${name}`;\n-    const cache_key = as_node ? iconLookupName + \'_as_node\' : iconLookupName;\n-    // const cached_icon = iconCache.has(iconLookupName) ? iconCache.get(iconLookupName) :\n-    const cached_icon = iconCache.get(cache_key);\n-    if(cached_icon){\n-        console.log("use cached icon: ", cache_key)\n-        return cached_icon;\n+    const icon_lookup_name = `plone.icon.${name}`;\n+    const cache_key = as_node ? icon_lookup_name + "_as_node" : icon_lookup_name;\n+\n+    // ATTENTION: async/await trick ahead!\n+    if (!ICON_CACHE.has(cache_key)) {\n+        // 1) Immediately set the asynchronous function call to _resolve_icon in the icon cache.\n+        // Subsequent calls will not re-set this because the cache_key is already set.\n+        ICON_CACHE.set(cache_key, _resolve_icon());\n+        logger.debug(`Loading icon "${icon_lookup_name}"`);\n     }\n-    console.log("resolve icon: ", iconLookupName)\n-    const baseUrl = $("body").attr("data-portal-url");\n-    let icon = null;\n-    if(baseUrl){\n-        const url = baseUrl + "/@@iconresolver";\n-        if (url) {\n-            const resp = await fetch(`${url}/${name}`);\n-            icon = await resp.text();\n+    // 2) Await the promise for resolving the icon or just return the icon itself.\n+    return await ICON_CACHE.get(cache_key);\n+\n+    async function _resolve_icon() {\n+        // Do the actual loading.\n+\n+        const base_url = $("body").attr("data-portal-url");\n+        let icon = null;\n+        if (base_url) {\n+            const url = base_url + "/@@iconresolver";\n+            if (url) {\n+                try {\n+                    const resp = await fetch(`${url}/${name}`);\n+                    icon = await resp.text();\n+                } catch (e) {\n+                    logger.warn(`Loading icon "${name}" from URL ${url} failed.`);\n+                    console.warn(e);\n+                }\n+            }\n         }\n-    }\n-    if (!icon) {\n-        // fallback\n-        name = iconLookupName;\n-        try {\n-            import("../styles/icons.scss");\n-            const iconmap = await import("../iconmap.json");\n-            const parts = iconmap[name]?.split?.("/");\n-            if (parts[0].includes("bootstrap-icons")) {\n-                icon = await import(`bootstrap-icons/icons/${parts[1]}`);\n-                icon = icon?.default;\n+        if (!icon) {\n+            // fallback\n+            name = icon_lookup_name;\n+            try {\n+                import("../styles/icons.scss");\n+                const iconmap = await import("../iconmap.json");\n+                const parts = iconmap[name]?.split?.("/");\n+                if (parts[0].includes("bootstrap-icons")) {\n+                    icon = await import(`bootstrap-icons/icons/${parts[1]}`);\n+                    icon = icon?.default;\n+                }\n+            } catch (e) {\n+                // import error\n+                logger.warn(`Loading icon "${icon_lookup_name}" failed from fallback.`);\n+                console.warn(e);\n             }\n-        } catch (e) {\n-            // import error\n-            console.warn(e);\n         }\n-    }\n-    if (!icon) {\n-        return as_node ? null : "";\n-    }\n+        if (!icon) {\n+            return as_node ? null : "";\n+        }\n \n-    if (as_node) {\n-        const tmp = document.createElement("div");\n-        tmp.innerHTML = icon;\n-        icon = tmp.querySelector("svg");\n-    }\n-    if (as_node && css_class) {\n-        icon.classList.add(css_class);\n+        if (as_node) {\n+            const tmp = document.createElement("div");\n+            tmp.innerHTML = icon;\n+            icon = tmp.querySelector("svg");\n+        }\n+        if (as_node && css_class) {\n+            icon.classList.add(css_class);\n+        }\n+        return icon;\n     }\n-    iconCache.set(cache_key, icon);\n-    return icon;\n };\n \n export default {\n'

