Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-12-01T15:50:54+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/db437c1952ac782aeb1a6d8cebc0c7356c4b560a

isort

Files changed:
M Products/CMFPlone/resources/browser/combine.py
M Products/CMFPlone/resources/browser/configjs.py
M Products/CMFPlone/resources/browser/cook.py
M Products/CMFPlone/resources/browser/mixins.py
M Products/CMFPlone/resources/browser/resource.py
M Products/CMFPlone/resources/browser/scripts.py
M Products/CMFPlone/resources/browser/styles.py
M Products/CMFPlone/resources/exportimport/bundles.py
M Products/CMFPlone/resources/exportimport/cssregistry.py
M Products/CMFPlone/resources/exportimport/jsregistry.py
M Products/CMFPlone/resources/exportimport/resourceregistry.py
M Products/CMFPlone/resources/viewlets/__init__.py
M Products/CMFPlone/resources/viewlets/settings.py

diff --git a/Products/CMFPlone/resources/browser/combine.py b/Products/CMFPlone/resources/browser/combine.py
index d7c4ecd..28b2066 100644
--- a/Products/CMFPlone/resources/browser/combine.py
+++ b/Products/CMFPlone/resources/browser/combine.py
@@ -14,6 +14,7 @@
 import logging
 import re
 
+
 PRODUCTION_RESOURCE_DIRECTORY = "production"
 logger = logging.getLogger(__name__)
 
diff --git a/Products/CMFPlone/resources/browser/configjs.py b/Products/CMFPlone/resources/browser/configjs.py
index 4af09b8..700c156 100644
--- a/Products/CMFPlone/resources/browser/configjs.py
+++ b/Products/CMFPlone/resources/browser/configjs.py
@@ -1,12 +1,12 @@
 # -*- coding: utf-8 -*-
-import json
-import re
-
+from plone.registry.interfaces import IRegistry
 from Products.CMFPlone.interfaces import IResourceRegistry
 from Products.Five.browser import BrowserView
-from plone.registry.interfaces import IRegistry
 from zope.component import getUtility
 
+import json
+import re
+
 
 configjs = """requirejs.config({
     baseUrl: PORTAL_URL,
diff --git a/Products/CMFPlone/resources/browser/cook.py b/Products/CMFPlone/resources/browser/cook.py
index 4fdf61d..8f9afdd 100644
--- a/Products/CMFPlone/resources/browser/cook.py
+++ b/Products/CMFPlone/resources/browser/cook.py
@@ -1,23 +1,24 @@
 # -*- coding: utf-8 -*-
-import logging
-
-from Products.CMFPlone.interfaces.resources import IResourceRegistry
-from Products.CMFPlone.interfaces.resources import IBundleRegistry
-from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME  # noqa
-from Products.CMFPlone.resources.browser.combine import combine_bundles
-from StringIO import StringIO
 from cssmin import cssmin
 from datetime import datetime
 from plone.protect.interfaces import IDisableCSRFProtection
 from plone.registry.interfaces import IRegistry
 from plone.resource.interfaces import IResourceDirectory
 from plone.subrequest import subrequest
+from Products.CMFPlone.interfaces.resources import IBundleRegistry
+from Products.CMFPlone.interfaces.resources import IResourceRegistry
+from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME  # noqa
+from Products.CMFPlone.resources.browser.combine import combine_bundles
 from slimit import minify
+from StringIO import StringIO
+from zExceptions import NotFound
 from zope.component import getUtility
 from zope.component.hooks import getSite
 from zope.globalrequest import getRequest
 from zope.interface import alsoProvides
-from zExceptions import NotFound
+
+import logging
+
 
 logger = logging.getLogger('Products.CMFPlone')
 
diff --git a/Products/CMFPlone/resources/browser/mixins.py b/Products/CMFPlone/resources/browser/mixins.py
index 69fce1a..dcf0cc0 100644
--- a/Products/CMFPlone/resources/browser/mixins.py
+++ b/Products/CMFPlone/resources/browser/mixins.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
+from plone.registry.interfaces import IRegistry
 from Products.CMFPlone.interfaces import IResourceRegistry
 from Products.Five.browser import BrowserView
-from plone.registry.interfaces import IRegistry
 from urlparse import urlparse
 from zope.component import getMultiAdapter
 from zope.component import getUtility
diff --git a/Products/CMFPlone/resources/browser/resource.py b/Products/CMFPlone/resources/browser/resource.py
index 47f3d2f..9bcac3d 100644
--- a/Products/CMFPlone/resources/browser/resource.py
+++ b/Products/CMFPlone/resources/browser/resource.py
@@ -1,23 +1,24 @@
 # -*- coding: utf-8 -*-
-from Acquisition import aq_inner, aq_base, aq_parent
-from Products.CMFCore.Expression import Expression
+from .combine import get_production_resource_directory
+from Acquisition import aq_base
+from Acquisition import aq_inner
+from Acquisition import aq_parent
+from plone.app.layout.viewlets.common import ViewletBase
+from plone.app.theming.utils import theming_policy
+from plone.memoize.view import memoize
+from plone.registry.interfaces import IRegistry
 from Products.CMFCore.Expression import createExprContext
+from Products.CMFCore.Expression import Expression
+from Products.CMFCore.utils import _getAuthenticatedUser
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import IBundleRegistry
 from Products.CMFPlone.interfaces import IResourceRegistry
-from plone.app.layout.viewlets.common import ViewletBase
-from plone.app.theming.utils import theming_policy
-from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.resources import RESOURCE_DEVELOPMENT_MODE
+from Products.CMFPlone.utils import get_top_request
 from zope import component
 from zope.component import getMultiAdapter
 from zope.component import getUtility
 from zope.ramcache.interfaces import ram
-from Products.CMFCore.utils import _getAuthenticatedUser
-from plone.memoize.view import memoize
-from Products.CMFPlone.resources import RESOURCE_DEVELOPMENT_MODE
-from Products.CMFPlone.utils import get_top_request
-
-from .combine import get_production_resource_directory
 
 
 class ResourceView(ViewletBase):
diff --git a/Products/CMFPlone/resources/browser/scripts.py b/Products/CMFPlone/resources/browser/scripts.py
index a6df2c7..ea97346 100644
--- a/Products/CMFPlone/resources/browser/scripts.py
+++ b/Products/CMFPlone/resources/browser/scripts.py
@@ -1,10 +1,9 @@
 # -*- coding: utf-8 -*-
-from urlparse import urlparse
-from urllib import quote
-
 from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings
 from Products.CMFPlone.resources.browser.resource import ResourceView
 from Products.CMFPlone.utils import get_top_request
+from urllib import quote
+from urlparse import urlparse
 from zope.component import getMultiAdapter
 
 
diff --git a/Products/CMFPlone/resources/browser/styles.py b/Products/CMFPlone/resources/browser/styles.py
index ce5f316..c5696ff 100644
--- a/Products/CMFPlone/resources/browser/styles.py
+++ b/Products/CMFPlone/resources/browser/styles.py
@@ -1,10 +1,9 @@
 # -*- coding: utf-8 -*-
-from urlparse import urlparse
-from urllib import quote
-
 from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings
 from Products.CMFPlone.resources.browser.resource import ResourceView
 from Products.CMFPlone.utils import get_top_request
+from urllib import quote
+from urlparse import urlparse
 
 
 class StylesView(ResourceView):
diff --git a/Products/CMFPlone/resources/exportimport/bundles.py b/Products/CMFPlone/resources/exportimport/bundles.py
index 56ea8aa..54e50f7 100644
--- a/Products/CMFPlone/resources/exportimport/bundles.py
+++ b/Products/CMFPlone/resources/exportimport/bundles.py
@@ -1,10 +1,9 @@
 # -*- coding: utf-8 -*-
+from ..browser.combine import combine_bundles
 from plone.registry.interfaces import IRegistry
 from zope.component import queryUtility
 from zope.globalrequest import getRequest
 
-from ..browser.combine import combine_bundles
-
 
 def combine(context):
 
diff --git a/Products/CMFPlone/resources/exportimport/cssregistry.py b/Products/CMFPlone/resources/exportimport/cssregistry.py
index 927c7dd..d4fa172 100644
--- a/Products/CMFPlone/resources/exportimport/cssregistry.py
+++ b/Products/CMFPlone/resources/exportimport/cssregistry.py
@@ -1,10 +1,9 @@
 # -*- coding: utf-8 -*-
-from Products.CMFPlone.resources.exportimport.resourceregistry import \
-    ResourceRegistryNodeAdapter
-from Products.CMFPlone.resources.exportimport.resourceregistry import \
-    importResRegistry
+from Products.CMFPlone.resources.exportimport.resourceregistry import importResRegistry
+from Products.CMFPlone.resources.exportimport.resourceregistry import ResourceRegistryNodeAdapter
 from Products.ResourceRegistries.interfaces import ICSSRegistry
 
+
 _FILENAME = 'cssregistry.xml'
 _REG_ID = 'portal_css'
 _REG_TITLE = 'Stylesheet registry'
diff --git a/Products/CMFPlone/resources/exportimport/jsregistry.py b/Products/CMFPlone/resources/exportimport/jsregistry.py
index ec99026..da48846 100644
--- a/Products/CMFPlone/resources/exportimport/jsregistry.py
+++ b/Products/CMFPlone/resources/exportimport/jsregistry.py
@@ -1,7 +1,8 @@
 # -*- coding: utf-8 -*-
 from Products.ResourceRegistries.interfaces import IJSRegistry
-from resourceregistry import ResourceRegistryNodeAdapter
 from resourceregistry import importResRegistry
+from resourceregistry import ResourceRegistryNodeAdapter
+
 
 _FILENAME = 'jsregistry.xml'
 _REG_ID = 'portal_javascripts'
diff --git a/Products/CMFPlone/resources/exportimport/resourceregistry.py b/Products/CMFPlone/resources/exportimport/resourceregistry.py
index 504b88b..6e636ed 100644
--- a/Products/CMFPlone/resources/exportimport/resourceregistry.py
+++ b/Products/CMFPlone/resources/exportimport/resourceregistry.py
@@ -1,13 +1,12 @@
 # -*- coding: utf-8 -*-
 from datetime import datetime
-
+from plone.i18n.normalizer.interfaces import IIDNormalizer
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import IBundleRegistry
 from Products.CMFPlone.interfaces import IResourceRegistry
 from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings
 from Products.GenericSetup.interfaces import IBody
 from Products.GenericSetup.utils import XMLAdapterBase
-from plone.i18n.normalizer.interfaces import IIDNormalizer
 from zope.component import queryMultiAdapter
 from zope.component import queryUtility
 from zope.component.interfaces import ComponentLookupError
diff --git a/Products/CMFPlone/resources/viewlets/__init__.py b/Products/CMFPlone/resources/viewlets/__init__.py
index ab52c67..31d2aad 100644
--- a/Products/CMFPlone/resources/viewlets/__init__.py
+++ b/Products/CMFPlone/resources/viewlets/__init__.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
-from Products.ResourceRegistries.interfaces.registries import IResourceRegistry
+from Products.ResourceRegistries.interfaces.registries import ICookedFile
 from Products.ResourceRegistries.interfaces.registries import ICSSRegistry
-from Products.ResourceRegistries.interfaces.registries import IKSSRegistry
 from Products.ResourceRegistries.interfaces.registries import IJSRegistry
-from Products.ResourceRegistries.interfaces.registries import ICookedFile
+from Products.ResourceRegistries.interfaces.registries import IKSSRegistry
 from Products.ResourceRegistries.interfaces.registries import IResourceProvider
+from Products.ResourceRegistries.interfaces.registries import IResourceRegistry
+from Products.ResourceRegistries.interfaces.settings import IResourceRegistriesSettings
 from Products.ResourceRegistries.interfaces.viewletmanagers import IHtmlHeadScripts
 from Products.ResourceRegistries.interfaces.viewletmanagers import IHtmlHeadStyles
-from Products.ResourceRegistries.interfaces.settings import IResourceRegistriesSettings
diff --git a/Products/CMFPlone/resources/viewlets/settings.py b/Products/CMFPlone/resources/viewlets/settings.py
index 7324f35..6ebf27c 100644
--- a/Products/CMFPlone/resources/viewlets/settings.py
+++ b/Products/CMFPlone/resources/viewlets/settings.py
@@ -3,6 +3,7 @@
 from zope.i18nmessageid import MessageFactory
 from zope.interface import Interface
 
+
 _ = MessageFactory('plone')
 
 


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-12-01T15:51:20+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/7bfab515c9418fd286b8ab810c8212a9aa2997c8

remove hasattr and do not fail silently on wrong input

Files changed:
M Products/CMFPlone/resources/__init__.py

diff --git a/Products/CMFPlone/resources/__init__.py b/Products/CMFPlone/resources/__init__.py
index 8b8aa98..20d71b6 100644
--- a/Products/CMFPlone/resources/__init__.py
+++ b/Products/CMFPlone/resources/__init__.py
@@ -2,36 +2,40 @@
 import os
 
 
-RESOURCE_DEVELOPMENT_MODE = False
-if os.getenv('FEDEV', '').lower() == 'true':
-    RESOURCE_DEVELOPMENT_MODE = True
+RESOURCE_DEVELOPMENT_MODE = os.getenv('FEDEV', '').lower() == 'true'
 
 
 def add_resource_on_request(request, resource):
     """ Adds the resource to the request
     """
-    if not hasattr(request, 'enabled_resources'):
-        request.enabled_resources = []
-
-    if isinstance(resource, str) and resource not in request.enabled_resources:
+    if not isinstance(resource, str):
+        raise ValueError(
+            'add_resource_on_request expects a string value for resource'
+        )
+    request.enabled_resources = getattr(request, 'enabled_resources', [])
+    if resource not in request.enabled_resources:
         request.enabled_resources.append(resource)
 
 
 def add_bundle_on_request(request, bundle):
     """ Adds the bundle to the request
     """
-    if not hasattr(request, 'enabled_bundles'):
-        request.enabled_bundles = []
-
-    if isinstance(bundle, str) and bundle not in request.enabled_bundles:
+    if not isinstance(bundle, str):
+        raise ValueError(
+            'add_bundle_on_request expects a string value for bundle'
+        )
+    request.enabled_bundles = getattr(request, 'enabled_bundles', [])
+    if bundle not in request.enabled_bundles:
         request.enabled_bundles.append(bundle)
 
 
 def remove_bundle_on_request(request, bundle):
     """ Removes the bundle to the request
     """
-    if hasattr(request, 'disabled_bundles'):
-        if isinstance(bundle, str):
-            request.disabled_bundles.append(bundle)
-    else:
-        request.disabled_bundles = [bundle]
+    if not isinstance(bundle, str):
+        raise ValueError(
+            'remove_bundle_on_request expects a string value for bundle'
+        )
+    request.disabled_bundles = getattr(request, 'disabled_bundles', [])
+    if bundle not in request.disabled_bundles:
+        request.disabled_bundles.append(bundle)


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-12-01T18:31:33+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/4b30a9c2434a4cb259d4b70203dd37c97a955899

take debug-mode into account, take fs last_compilation date into account, cleanup.

Files changed:
A Products/CMFPlone/resources/bundle.py
M CHANGES.rst
M Products/CMFPlone/resources/browser/__init__.py
M Products/CMFPlone/resources/browser/combine.py
M Products/CMFPlone/resources/browser/configjs.py
M Products/CMFPlone/resources/browser/cook.py
M Products/CMFPlone/resources/browser/resource.py
M Products/CMFPlone/resources/browser/scripts.pt
M Products/CMFPlone/resources/browser/scripts.py
M Products/CMFPlone/resources/browser/styles.py
M Products/CMFPlone/resources/exportimport/__init__.py
M Products/CMFPlone/tests/testCSSandJSRegistry.py
M Products/CMFPlone/tests/testResourceRegistries.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 6f298b5..75502bd 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -111,6 +111,17 @@ New features:
 
 - Toolbar: Let the toolbar submenus be as wide as they need to be and do not break entries into multiple lines. [thet]
 
+- Resource Registry:
+  In ``debug-mode`` (zope.conf, buildout) do not load cache the production bundle.
+  [jensens]
+
+- Resource Registry:
+  In ``debug-mode`` (zope.conf, buildout) do not ignore development mode for anonymous users.
+  [jensens]
+
+- Resource Registry: If file system version is newer than ``last_compilation`` date of a bundle, use this as ``last_compilation`` date.
+  [jensens]
+
 
 Bug fixes:
 
@@ -197,6 +208,8 @@ Bug fixes:
 - URL change for bug tracker, wording tweaks to UPGRADE.txt
   [tkimnguyen]
 
+- Cleanup code of resource registry.
+  [jensens]
 
 5.1a2 (2016-08-19)
 ------------------
diff --git a/Products/CMFPlone/resources/browser/__init__.py b/Products/CMFPlone/resources/browser/__init__.py
index e69de29..40a96af 100644
--- a/Products/CMFPlone/resources/browser/__init__.py
+++ b/Products/CMFPlone/resources/browser/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/Products/CMFPlone/resources/browser/combine.py b/Products/CMFPlone/resources/browser/combine.py
index 28b2066..7a8e89e 100644
--- a/Products/CMFPlone/resources/browser/combine.py
+++ b/Products/CMFPlone/resources/browser/combine.py
@@ -15,23 +15,23 @@
 import re
 
 
-PRODUCTION_RESOURCE_DIRECTORY = "production"
+PRODUCTION_RESOURCE_DIRECTORY = 'production'
 logger = logging.getLogger(__name__)
 
 
 def get_production_resource_directory():
-    persistent_directory = queryUtility(IResourceDirectory, name="persistent")
+    persistent_directory = queryUtility(IResourceDirectory, name='persistent')
     if persistent_directory is None:
         return ''
     container = persistent_directory[OVERRIDE_RESOURCE_DIRECTORY_NAME]
     try:
         production_folder = container[PRODUCTION_RESOURCE_DIRECTORY]
     except NotFound:
-        return "%s/++unique++1" % PRODUCTION_RESOURCE_DIRECTORY
+        return '%s/++unique++1' % PRODUCTION_RESOURCE_DIRECTORY
     if 'timestamp.txt' not in production_folder:
-        return "%s/++unique++1" % PRODUCTION_RESOURCE_DIRECTORY
+        return '%s/++unique++1' % PRODUCTION_RESOURCE_DIRECTORY
     timestamp = production_folder.readFile('timestamp.txt')
-    return "%s/++unique++%s" % (
+    return '%s/++unique++%s' % (
         PRODUCTION_RESOURCE_DIRECTORY, timestamp)
 
 
@@ -47,7 +47,7 @@ def get_resource(context, path):
     try:
         resource = context.unrestrictedTraverse(path)
     except NotFound:
-        logger.warn(u"Could not find resource {0}. You may have to create it first.".format(path))  # noqa
+        logger.warn(u'Could not find resource {0}. You may have to create it first.'.format(path))  # noqa
         return
 
     if isinstance(resource, FilesystemFile):
@@ -67,19 +67,35 @@ def write_js(context, folder, meta_bundle):
     resources = []
 
     # default resources
-    if meta_bundle == 'default' and registry.records.get(
-        'plone.resources/jquery.js'
+    if (
+        meta_bundle == 'default' and
+        registry.records.get('plone.resources/jquery.js')
     ):
-        resources.append(get_resource(context,
-            registry.records['plone.resources/jquery.js'].value))
-        resources.append(get_resource(context,
-            registry.records['plone.resources.requirejs'].value))
-        resources.append(get_resource(context,
-            registry.records['plone.resources.configjs'].value))
+        resources.append(
+            get_resource(
+                context,
+                registry.records['plone.resources/jquery.js'].value
+            )
+        )
+        resources.append(
+            get_resource(
+                context,
+                registry.records['plone.resources.requirejs'].value
+            )
+        )
+        resources.append(
+            get_resource(
+                context,
+                registry.records['plone.resources.configjs'].value
+            )
+        )
 
     # bundles
     bundles = registry.collectionOfInterface(
-        IBundleRegistry, prefix="plone.bundles", check=False)
+        IBundleRegistry,
+        prefix='plone.bundles',
+        check=False
+    )
     for bundle in bundles.values():
         if bundle.merge_with == meta_bundle and bundle.jscompilation:
             resource = get_resource(context, bundle.jscompilation)
@@ -90,7 +106,7 @@ def write_js(context, folder, meta_bundle):
     fi = StringIO()
     for script in resources:
         fi.write(script + '\n')
-    folder.writeFile(meta_bundle + ".js", fi)
+    folder.writeFile(meta_bundle + '.js', fi)
 
 
 def write_css(context, folder, meta_bundle):
@@ -98,7 +114,10 @@ def write_css(context, folder, meta_bundle):
     resources = []
 
     bundles = registry.collectionOfInterface(
-        IBundleRegistry, prefix="plone.bundles", check=False)
+        IBundleRegistry,
+        prefix='plone.bundles',
+        check=False
+    )
     for bundle in bundles.values():
         if bundle.merge_with == meta_bundle and bundle.csscompilation:
             css = get_resource(context, bundle.csscompilation)
@@ -117,11 +136,11 @@ def write_css(context, folder, meta_bundle):
     fi = StringIO()
     for script in resources:
         fi.write(script + '\n')
-    folder.writeFile(meta_bundle + ".css", fi)
+    folder.writeFile(meta_bundle + '.css', fi)
 
 
 def get_override_directory(context):
-    persistent_directory = queryUtility(IResourceDirectory, name="persistent")
+    persistent_directory = queryUtility(IResourceDirectory, name='persistent')
     if persistent_directory is None:
         return
     if OVERRIDE_RESOURCE_DIRECTORY_NAME not in persistent_directory:
@@ -138,7 +157,7 @@ def combine_bundles(context):
     # store timestamp
     fi = StringIO()
     fi.write(datetime.now().isoformat())
-    production_folder.writeFile("timestamp.txt", fi)
+    production_folder.writeFile('timestamp.txt', fi)
 
     # generate new combined bundles
     write_js(context, production_folder, 'default')
diff --git a/Products/CMFPlone/resources/browser/configjs.py b/Products/CMFPlone/resources/browser/configjs.py
index 700c156..a88268a 100644
--- a/Products/CMFPlone/resources/browser/configjs.py
+++ b/Products/CMFPlone/resources/browser/configjs.py
@@ -87,8 +87,10 @@ class ConfigJsView(RequireJsView):
 
     def __call__(self):
         (paths, shims) = self.get_requirejs_config()
-        self.request.response.setHeader("Content-Type",
-                                        "application/javascript")
+        self.request.response.setHeader(
+            'Content-Type',
+            'application/javascript'
+        )
         return configjs % (
             json.dumps(paths, indent=4),
             _format_shims(shims)
diff --git a/Products/CMFPlone/resources/browser/cook.py b/Products/CMFPlone/resources/browser/cook.py
index 8f9afdd..c29c419 100644
--- a/Products/CMFPlone/resources/browser/cook.py
+++ b/Products/CMFPlone/resources/browser/cook.py
@@ -22,6 +22,27 @@
 
 logger = logging.getLogger('Products.CMFPlone')
 
+REQUIREJS_RESET_PREFIX = """
+/* reset requirejs definitions so that people who
+   put requirejs in legacy compilation do not get errors */
+var _old_define = define;
+var _old_require = require;
+define = undefined;
+require = undefined;
+try{
+"""
+REQUIREJS_RESET_POSTFIX = """
+}catch(e){
+    // log it
+    if (typeof console !== "undefined"){
+        console.log('Error loading javascripts!' + e);
+    }
+}finally{
+    define = _old_define;
+    require = _old_require;
+}
+"""
+
 
 def cookWhenChangingSettings(context, bundle=None):
     """When our settings are changed, re-cook the not compilable bundles
@@ -39,60 +60,46 @@ def cookWhenChangingSettings(context, bundle=None):
             bundle = bundles.setdefault('plone-legacy')
             bundle.resources = []
 
-
     if not bundle.resources:
-        # you can have a bundle without any resources defined and it's just shipped
-        # as a legacy compiled js file
+        # you can have a bundle without any resources defined and it's just
+        # shipped as a legacy compiled js file
         return
 
     # Let's join all css and js
-    css_file = ""
-    cooked_js = """
-/* reset requirejs definitions so that people who
-   put requirejs in legacy compilation do not get errors */
-var _old_define = define;
-var _old_require = require;
-define = undefined;
-require = undefined;
-try{
-"""
+    css_file = ''
+    cooked_js = REQUIREJS_RESET_PREFIX
     siteUrl = getSite().absolute_url()
     request = getRequest()
     for package in bundle.resources or []:
-        if package in resources:
-            resource = resources[package]
-            for css in resource.css:
-                response = subrequest(siteUrl + '/' + css)
-                if response.status == 200:
-                    css_file += response.getBody()
-                    css_file += '\n'
-
-            if resource.js:
-                response = subrequest(siteUrl + '/' + resource.js)
-                if response.status == 200:
-                    js = response.getBody()
-                    try:
-                        cooked_js += '\n/* resource: %s */\n%s' % (
-                            resource.js,
-                            minify(js, mangle=False, mangle_toplevel=False)
-                        )
-                    except SyntaxError:
-                        cooked_js += '\n/* resource(error cooking): %s */\n%s' % (
-                            resource.js, js)
-                else:
-                    cooked_js += '\n/* Could not find resource: %s */\n\n' % resource.js
+        if package not in resources:
+            continue
+        resource = resources[package]
+        for css in resource.css:
+            url = siteUrl + '/' + css
+            response = subrequest(url)
+            if response.status == 200:
+                css_file += response.getBody()
+                css_file += '\n'
+            else:
+                css_file += '\n/* Could not find resource: %s */\n\n' % url
+        if not resource.js:
+            continue
+        url = siteUrl + '/' + resource.js
+        response = subrequest(url)
+        if response.status == 200:
+            js = response.getBody()
+            try:
+                cooked_js += '\n/* resource: %s */\n%s' % (
+                    resource.js,
+                    minify(js, mangle=False, mangle_toplevel=False)
+                )
+            except SyntaxError:
+                cooked_js += '\n/* resource(error cooking): %s */\n%s' % (
+                    resource.js, js)
+        else:
+            cooked_js += '\n/* Could not find resource: %s */\n\n' % url
 
-    cooked_js += """
-}catch(e){
-    // log it
-    if (typeof console !== "undefined"){
-        console.log('Error loading javascripts!' + e);
-    }
-}finally{
-    define = _old_define;
-    require = _old_require;
-}
-"""
+    cooked_js += REQUIREJS_RESET_POSTFIX
     cooked_css = cssmin(css_file)
 
     js_path = bundle.jscompilation
diff --git a/Products/CMFPlone/resources/browser/resource.py b/Products/CMFPlone/resources/browser/resource.py
index 9bcac3d..a7d961f 100644
--- a/Products/CMFPlone/resources/browser/resource.py
+++ b/Products/CMFPlone/resources/browser/resource.py
@@ -1,8 +1,9 @@
 # -*- coding: utf-8 -*-
-from .combine import get_production_resource_directory
 from Acquisition import aq_base
 from Acquisition import aq_inner
 from Acquisition import aq_parent
+from App.config import getConfiguration
+from copy import copy
 from plone.app.layout.viewlets.common import ViewletBase
 from plone.app.theming.utils import theming_policy
 from plone.memoize.view import memoize
@@ -14,6 +15,8 @@
 from Products.CMFPlone.interfaces import IBundleRegistry
 from Products.CMFPlone.interfaces import IResourceRegistry
 from Products.CMFPlone.resources import RESOURCE_DEVELOPMENT_MODE
+from Products.CMFPlone.resources.browser.combine import get_production_resource_directory  # noqa
+from Products.CMFPlone.resources.bundle import Bundle
 from Products.CMFPlone.utils import get_top_request
 from zope import component
 from zope.component import getMultiAdapter
@@ -21,15 +24,19 @@
 from zope.ramcache.interfaces import ram
 
 
-class ResourceView(ViewletBase):
+class ResourceBase(object):
     """Information for script rendering.
+
+    This is a mixin base class for a browser view, a viewlet or a tile
+    or anything similar with a context and a request set on initialization.
     """
 
     @property
     @memoize
     def anonymous(self):
         return _getAuthenticatedUser(
-            self.context).getUserName() == 'Anonymous User'
+            self.context
+        ).getUserName() == 'Anonymous User'
 
     @property
     @memoize
@@ -43,14 +50,19 @@ def development(self):
         """
         if RESOURCE_DEVELOPMENT_MODE:
             return True
-        if self.anonymous:
+        if self.anonymous and not self.debug_mode:
             return False
         return self.registry.records['plone.resources.development'].value
 
+    @property
+    def debug_mode(self):
+        return getConfiguration().debug_mode
+
     def develop_bundle(self, bundle, attr):
-        if RESOURCE_DEVELOPMENT_MODE:
-            return True
-        return self.development and getattr(bundle, attr, False)
+        return (
+            RESOURCE_DEVELOPMENT_MODE or
+            (self.development and getattr(bundle, attr, False))
+        )
 
     @property
     def last_legacy_import(self):
@@ -89,98 +101,101 @@ def evaluateExpression(self, expression, context):
             return True
 
     def update(self):
-        self.portal_state = getMultiAdapter((self.context, self.request),
-                                            name=u'plone_portal_state')
+        self.portal_state = getMultiAdapter(
+            (self.context, self.request),
+            name=u'plone_portal_state'
+        )
         self.site_url = self.portal_state.portal_url()
         self.registry = getUtility(IRegistry)
-
         self.production_path = get_production_resource_directory()
 
-        self.diazo_production_css = None
-        self.diazo_development_css = None
-        self.diazo_development_js = None
-        self.diazo_production_js = None
-        self.themeObj = None
-
-        # Check if its Diazo enabled
+        theme = None
         policy = theming_policy(self.request)
         if policy.isThemeEnabled():
-            self.themeObj = policy.get_theme()
-            if self.themeObj:
-                if hasattr(self.themeObj, 'production_css'):
-                    self.diazo_production_css = self.themeObj.production_css
-                    self.diazo_development_css = self.themeObj.development_css
-                    self.diazo_development_js = self.themeObj.development_js
-                    self.diazo_production_js = self.themeObj.production_js
+            # Check if Diazo is enabled
+            theme = policy.get_theme() or None
+
+        self.diazo_production_css = getattr(theme, 'production_css', None)
+        self.diazo_development_css = getattr(theme, 'development_css', None)
+        self.diazo_production_js = getattr(theme, 'production_js', None)
+        self.diazo_development_js = getattr(theme, 'development_js', None)
+        self.theme_enabled_bundles = getattr(theme, 'enabled_bundles', [])
+        self.theme_disabled_bundles = getattr(theme, 'disabled_bundles', [])
 
     def get_bundles(self):
-        return self.registry.collectionOfInterface(
-            IBundleRegistry, prefix="plone.bundles", check=False)
+        result = {}
+        records = self.registry.collectionOfInterface(
+            IBundleRegistry,
+            prefix="plone.bundles",
+            check=False
+        )
+        for name, record in records.items():
+            result[name] = Bundle(record)
+        return result
 
     def get_resources(self):
         return self.registry.collectionOfInterface(
-            IResourceRegistry, prefix="plone.resources", check=False)
+            IResourceRegistry,
+            prefix="plone.resources",
+            check=False
+        )
+
+    def eval_expression(self, expression, bundle_name):
+        if not expression:
+            return True
+        cache = component.queryUtility(ram.IRAMCache)
+        cooked_expression = None
+        if cache is not None:
+            cooked_expression = cache.query(
+                'plone.bundles.cooked_expressions',
+                key=dict(prefix=bundle_name),
+                default=None
+            )
+        if (
+            cooked_expression is None or
+            cooked_expression.text != expression
+        ):
+            cooked_expression = Expression(expression)
+            if cache is not None:
+                cache.set(
+                    cooked_expression,
+                    'plone.bundles.cooked_expressions',
+                    key=dict(prefix=bundle_name)
+                )
+        return self.evaluateExpression(cooked_expression, self.context)
 
     def get_cooked_bundles(self):
         """
         Get the cooked bundles
         """
-        cache = component.queryUtility(ram.IRAMCache)
-        bundles = self.get_bundles()
-
-        enabled_diazo_bundles = []
-        disabled_diazo_bundles = []
+        request = get_top_request(self.request)  # might be a subrequest
 
-        if self.themeObj:
-            enabled_diazo_bundles = self.themeObj.enabled_bundles
-            disabled_diazo_bundles = self.themeObj.disabled_bundles
+        # theme specific set bundles
+        enabled_bundles = set(self.theme_enabled_bundles)
+        disabled_bundles = set(self.theme_disabled_bundles)
 
         # Request set bundles
-        request = get_top_request(self.request)  # might be a subrequest
-        enabled_request_bundles = []
-        disabled_request_bundles = []
-        if hasattr(request, 'enabled_bundles'):
-            enabled_request_bundles.extend(request.enabled_bundles)
-
-        if hasattr(request, 'disabled_bundles'):
-            disabled_request_bundles.extend(request.disabled_bundles)
+        enabled_bundles.update(getattr(request, 'enabled_bundles', []))
+        disabled_bundles.update(getattr(request, 'disabled_bundles', []))
 
-        for key, bundle in bundles.items():
+        for key, bundle in self.get_bundles().items():
             # The diazo manifest and request bundles are more important than
             # the disabled bundle on registry.
             # We can access the site with diazo.off=1 without diazo bundles
-            if (bundle.enabled
-                    or key in enabled_request_bundles
-                    or key in enabled_diazo_bundles) and\
-                    (key not in disabled_diazo_bundles
-                        and key not in disabled_request_bundles):
-                # check expression
-                if bundle.expression:
-                    cooked_expression = None
-                    if cache is not None:
-                        cooked_expression = cache.query(
-                            'plone.bundles.cooked_expressions',
-                            key=dict(prefix=bundle.__prefix__), default=None)
-                    if (
-                            cooked_expression is None or
-                            cooked_expression.text != bundle.expression):
-                        cooked_expression = Expression(bundle.expression)
-                        if cache is not None:
-                            cache.set(
-                                cooked_expression,
-                                'plone.bundles.cooked_expressions',
-                                key=dict(prefix=bundle.__prefix__))
-                    if not self.evaluateExpression(
-                            cooked_expression, self.context):
-                        continue
-                yield key, bundle
+            if (
+                key in disabled_bundles or
+                (key not in enabled_bundles and not bundle.enabled) or
+                not self.eval_expression(bundle.expression, bundle.name)
+            ):
+                continue
+
+            yield key, bundle
 
     def ordered_bundles_result(self, production=False):
         """
         It gets the ordered result of bundles
         """
         result = []
-        # The first one
         inserted = []
         depends_on = {}
         for key, bundle in self.get_cooked_bundles():
@@ -200,21 +215,25 @@ def ordered_bundles_result(self, production=False):
         while len(depends_on) > 0:
             found = False
             for key, bundles_to_add in depends_on.items():
-                if key in inserted:
-                    found = True
-                    for bundle in bundles_to_add:
-                        if not(production and bundle.merge_with):
-                            self.get_data(bundle, result)
-                        inserted.append(
-                            bundle.__prefix__.split('/', 1)[1].rstrip('.'))
-                    del depends_on[key]
+                if key not in inserted:
+                    continue
+                found = True
+                for bundle in bundles_to_add:
+                    if not(production and bundle.merge_with):
+                        self.get_data(bundle, result)
+                    inserted.append(bundle.name)
+                del depends_on[key]
             if not found:
                 break
 
-        # THe ones that does not get the dependencies
+        # The ones that does not get the dependencies
         for bundles_to_add in depends_on.values():
             for bundle in bundles_to_add:
                 if not(production and bundle.merge_with):
                     self.get_data(bundle, result)
-
         return result
+
+
+class ResourceView(ResourceBase, ViewletBase):
+    """Viewlet Information for script rendering.
+    """
diff --git a/Products/CMFPlone/resources/browser/scripts.pt b/Products/CMFPlone/resources/browser/scripts.pt
index e9ad1bb..1450818 100644
--- a/Products/CMFPlone/resources/browser/scripts.pt
+++ b/Products/CMFPlone/resources/browser/scripts.pt
@@ -1,4 +1,4 @@
-<script type="text/javascript" tal:content="string:PORTAL_URL = '${view/base_url}';"></script>
+<script type="text/javascript" tal:content="string:PORTAL_URL = '${view/site_url}';"></script>
 <tal:scripts repeat="script view/scripts"><tal:block define="condcomment script/conditionalcomment; resetrjs script/resetrjs|nothing"><tal:if condition="resetrjs">
   <tal:openreset content='structure string:&lt;script type="text/javascript"&gt;'/>
       /* reset requirejs definitions so that people who put requirejs in legacy compilation do not get errors */
diff --git a/Products/CMFPlone/resources/browser/scripts.py b/Products/CMFPlone/resources/browser/scripts.py
index ea97346..f897899 100644
--- a/Products/CMFPlone/resources/browser/scripts.py
+++ b/Products/CMFPlone/resources/browser/scripts.py
@@ -11,65 +11,84 @@ class ScriptsView(ResourceView):
     """Information for script rendering.
     """
 
+    def _add_resources(
+        self,
+        resources_to_add,
+        result,
+        bundle_name='none',
+        resetrjs=False,
+        conditionalcomment=''
+    ):
+        resources = self.get_resources()
+        for resource in resources_to_add:
+            data = resources.get(resource, None)
+            if data is None or not data.js:
+                continue
+            url = urlparse(data.js)
+            if url.netloc == '':
+                # Local
+                src = '{0}/{1}'.format(self.site_url, data.js)
+            else:
+                src = data.js
+            data = {
+                'bundle': bundle_name,
+                'conditionalcomment': conditionalcomment,
+                'src': src,
+                # Reset RequireJS if bundle is in non-compile to
+                # avoid "Mismatched anonymous define()" in legacy
+                # scripts.
+                'resetrjs': resetrjs,
+            }
+            result.append(data)
+
     def get_data(self, bundle, result):
-        bundle_name = bundle.__prefix__.split('/', 1)[1].rstrip('.')
         if self.develop_bundle(bundle, 'develop_javascript'):
             # Bundle development mode
-            resources = self.get_resources()
-            for resource in bundle.resources:
-                if resource in resources:
-                    script = resources[resource]
-                    if script.js:
-                        url = urlparse(script.js)
-                        if url.netloc == '':
-                            # Local
-                            src = "%s/%s" % (self.site_url, script.js)
-                        else:
-                            src = "%s" % (script.js)
+            self._add_resources(
+                bundle.resources,
+                result,
+                bundle_name=bundle.name,
+                resetrjs=bundle.compile,
+                conditionalcomment=bundle.conditionalcomment,
+            )
+            return
+        if (
+            not bundle.compile and
+            (
+                not bundle.last_compilation or
+                self.last_legacy_import > bundle.last_compilation
+            ) and
+            bundle.resources
+        ):
+            # Its a legacy css bundle OR compiling is happening outside of
+            # plone
 
-                        data = {
-                            'bundle': bundle_name,
-                            'conditionalcomment': bundle.conditionalcomment,  # noqa
-                            'src': src,
-                            # Reset RequireJS if bundle is in non-compile to
-                            # avoid "Mismatched anonymous define()" in legacy
-                            # scripts.
-                            'resetrjs': bundle.compile is False
-                        }
-                        result.append(data)
-        else:
-            if bundle.compile is False:
-                # Its a legacy css bundle OR compiling is happening outside of
-                # plone
-                if ((not bundle.last_compilation
-                        or self.last_legacy_import > bundle.last_compilation)
-                        and bundle.resources):
-                    # We need to combine files. It's possible no resources are defined
-                    # because the compiling is done outside of plone
-                    cookWhenChangingSettings(self.context, bundle)
-            if bundle.jscompilation:
-                js_path = bundle.jscompilation
-                if '++plone++' in js_path:
-                    resource_path = js_path.split('++plone++')[-1]
-                    resource_name, resource_filepath = resource_path.split(
-                        '/', 1)
-                    js_location = '%s/++plone++%s/++unique++%s/%s' % (
-                        self.site_url,
-                        resource_name,
-                        quote(str(bundle.last_compilation)),
-                        resource_filepath
-                    )
-                else:
-                    js_location = '%s/%s?version=%s' % (
-                        self.site_url,
-                        bundle.jscompilation,
-                        quote(str(bundle.last_compilation))
-                    )
-                result.append({
-                    'bundle': bundle_name,
-                    'conditionalcomment': bundle.conditionalcomment,
-                    'src': js_location
-                })
+            # We need to combine files. It's possible no resources are
+            # defined because the compiling is done outside of plone
+            cookWhenChangingSettings(self.context, bundle)
+        if bundle.jscompilation:
+            js_path = bundle.jscompilation
+            if '++plone++' in js_path:
+                resource_path = js_path.split('++plone++')[-1]
+                resource_name, resource_filepath = resource_path.split(
+                    '/', 1)
+                js_location = '{0}/++plone++{1}/++unique++{2}/{3}'.format(
+                    self.site_url,
+                    resource_name,
+                    quote(str(bundle.last_compilation)),
+                    resource_filepath
+                )
+            else:
+                js_location = '{0}/{1}?version={2}'.format(
+                    self.site_url,
+                    bundle.jscompilation,
+                    quote(str(bundle.last_compilation))
+                )
+            result.append({
+                'bundle': bundle.name,
+                'conditionalcomment': bundle.conditionalcomment,
+                'src': js_location
+            })
 
     def default_resources(self):
         """ Default resources used by Plone itself
@@ -77,7 +96,7 @@ def default_resources(self):
         result = []
         # We always add jquery resource
         result.append({
-            'src': '%s/%s' % (
+            'src': '{0}/{1}'.format(
                 self.site_url,
                 self.registry.records['plone.resources/jquery.js'].value),
             'conditionalcomment': None,
@@ -86,28 +105,28 @@ def default_resources(self):
         if self.development:
             # We need to add require.js and config.js
             result.append({
-                'src': '%s/%s' % (
+                'src': '{0}/{1}'.format(
                     self.site_url,
                     self.registry.records['plone.resources.less-variables'].value),  # noqa
                 'conditionalcomment': None,
                 'bundle': 'basic'
             })
             result.append({
-                'src': '%s/%s' % (
+                'src': '{0}/{1}'.format(
                     self.site_url,
                     self.registry.records['plone.resources.lessc'].value),
                 'conditionalcomment': None,
                 'bundle': 'basic'
             })
         result.append({
-            'src': '%s/%s' % (
+            'src': '{0}/{1}'.format(
                 self.site_url,
                 self.registry.records['plone.resources.requirejs'].value),
             'conditionalcomment': None,
             'bundle': 'basic'
         })
         result.append({
-            'src': '%s/%s' % (
+            'src': '{0}/{1}'.format(
                 self.site_url,
                 self.registry.records['plone.resources.configjs'].value),
             'conditionalcomment': None,
@@ -116,8 +135,10 @@ def default_resources(self):
         return result
 
     def base_url(self):
-        portal_state = getMultiAdapter((self.context, self.request),
-                                       name=u'plone_portal_state')
+        portal_state = getMultiAdapter(
+            (self.context, self.request),
+            name=u'plone_portal_state'
+        )
         site_url = portal_state.portal_url()
         return site_url
 
@@ -125,12 +146,12 @@ def scripts(self):
         """The requirejs scripts, the ones that are not resources are loaded on
         configjs.py
         """
-        if self.development or not self.production_path:
+        if self.debug_mode or self.development or not self.production_path:
             result = self.default_resources()
             result.extend(self.ordered_bundles_result())
         else:
             result = [{
-                'src': '%s/++plone++%s' % (
+                'src': '{0}/++plone++{1}'.format(
                     self.site_url,
                     self.production_path + '/default.js'
                 ),
@@ -139,7 +160,7 @@ def scripts(self):
             }, ]
             if not self.anonymous:
                 result.append({
-                    'src': '%s/++plone++%s' % (
+                    'src': '{0}/++plone++{1}'.format(
                         self.site_url,
                         self.production_path + '/logged-in.js'
                     ),
@@ -150,37 +171,21 @@ def scripts(self):
 
         # Add manual added resources
         request = get_top_request(self.request)  # might be a subrequest
-        if hasattr(request, 'enabled_resources'):
-            resources = self.get_resources()
-            for resource in request.enabled_resources:
-                if resource in resources:
-                    data = resources[resource]
-                    if data.js:
-                        url = urlparse(data.js)
-                        if url.netloc == '':
-                            # Local
-                            src = "%s/%s" % (self.site_url, data.js)
-                        else:
-                            src = "%s" % (data.js)
-
-                        data = {
-                            'bundle': 'none',
-                            'conditionalcomment': '',  # noqa
-                            'src': src}
-                        result.append(data)
+        enabled_resources = getattr(request, 'enabled_resources', [])
+        if enabled_resources:
+            self._add_resources(enabled_resources, result)
 
         # Add diazo url
         origin = None
-        if self.diazo_production_js and self.development is False:
+        if self.diazo_production_js and not self.development:
             origin = self.diazo_production_js
-        if self.diazo_development_js and self.development is True:
+        if self.diazo_development_js and self.development:
             origin = self.diazo_development_js
         if origin:
             result.append({
                 'bundle': 'diazo',
                 'conditionalcomment': '',
-                'src': '%s/%s' % (
-                    self.site_url, origin)
+                'src': '{0}/{1}'.format(self.site_url, origin),
             })
 
         return result
diff --git a/Products/CMFPlone/resources/browser/styles.py b/Products/CMFPlone/resources/browser/styles.py
index c5696ff..1a7528b 100644
--- a/Products/CMFPlone/resources/browser/styles.py
+++ b/Products/CMFPlone/resources/browser/styles.py
@@ -1,12 +1,13 @@
 # -*- coding: utf-8 -*-
+from plone.app.layout.viewlets.common import ViewletBase
 from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings
-from Products.CMFPlone.resources.browser.resource import ResourceView
+from Products.CMFPlone.resources.browser.resource import ResourceBase
 from Products.CMFPlone.utils import get_top_request
 from urllib import quote
 from urlparse import urlparse
 
 
-class StylesView(ResourceView):
+class StylesBase(ResourceBase):
 
     """ Information for style rendering. """
 
@@ -14,9 +15,6 @@ def get_urls(self, style, bundle):
         """
         Extracts the urls for the specific resource
         """
-        bundle_name = bundle.__prefix__.split(
-            '/',
-            1)[1].rstrip('.') if bundle else 'none'
         for css in style.css:
             url = urlparse(css)
             if url.netloc == '':
@@ -32,8 +30,9 @@ def get_urls(self, style, bundle):
 
             data = {
                 'rel': rel,
-                'bundle': bundle_name,
-                'conditionalcomment': bundle.conditionalcomment if bundle else '',  # noqa
+                'bundle': bundle.name if bundle else 'none',
+                'conditionalcomment':
+                    bundle.conditionalcomment if bundle else '',
                 'src': src}
             yield data
 
@@ -42,9 +41,6 @@ def get_data(self, bundle, result):
         Gets the needed information for the bundle
         and stores it on the result list
         """
-        bundle_name = bundle.__prefix__.split(
-            '/',
-            1)[1].rstrip('.') if bundle else 'none'
         if self.develop_bundle(bundle, 'develop_css'):
             self.resources = self.get_resources()
             # The bundle resources
@@ -80,7 +76,7 @@ def get_data(self, bundle, result):
                         quote(str(bundle.last_compilation))
                     )
                 result.append({
-                    'bundle': bundle_name,
+                    'bundle': bundle.name,
                     'rel': 'stylesheet',
                     'conditionalcomment': bundle.conditionalcomment,
                     'src': css_location
@@ -90,7 +86,7 @@ def styles(self):
         """
         Get all the styles
         """
-        if self.development or not self.production_path:
+        if self.development or self.debug_mode or not self.production_path:
             result = self.ordered_bundles_result()
         else:
             result = [{
@@ -149,3 +145,8 @@ def styles(self):
 
             result.append(data)
         return result
+
+
+class StylesView(StylesBase, ViewletBase):
+    """Styles Viewlet
+    """
diff --git a/Products/CMFPlone/resources/bundle.py b/Products/CMFPlone/resources/bundle.py
new file mode 100644
index 0000000..f7eab61
--- /dev/null
+++ b/Products/CMFPlone/resources/bundle.py
@@ -0,0 +1,101 @@
+# -*- coding: utf-8 -*-
+from plone.resource.directory import FilesystemResourceDirectory
+from plone.resource.file import FilesystemFile
+from Products.CMFCore.FSFile import FSFile
+from Products.Five.browser.resource import DirectoryResource
+from Products.Five.browser.resource import FileResource
+from zope.component.hooks import getSite
+from datetime import datetime
+
+import os
+
+
+class Bundle(object):
+    """Wraps pure bundles RecordsProxy and enrich with logic
+    .
+    Proxy attributes and provide some utility functions
+    """
+
+    def __init__(self, data):
+        """initialize Bunde.initialize
+
+        data is a
+        - registry record
+        - with interfaces'IResourceRegistry'
+        - with prefix 'plone.bundles'
+        """
+        self.data = data
+
+    def _real_path(self, ctx):
+        if ctx == 'js':
+            resource_path = self.data.jscompilation
+        else:
+            resource_path = self.data.csscompilation
+        resource = getSite().restrictedTraverse(resource_path)
+        if resource.__module__ == 'Products.Five.metaclass':
+            try:
+                return 'fs', resource.chooseContext().path
+            except:
+                try:
+                    return 'fs', resource.context.path
+                except:
+                    try:
+                        if callable(resource):
+                            return None, None
+                        else:
+                            return None, None
+                    except:
+                        return None, None
+        elif isinstance(resource, FilesystemFile):
+            return 'fs', resource.path
+        elif isinstance(resource, FileResource):
+            return 'fs', resource.chooseContext().path
+        elif isinstance(resource, DirectoryResource):
+            return 'fs', resource.context.path
+        elif isinstance(resource, FilesystemResourceDirectory):
+            return 'fs', resource.directory
+        elif isinstance(resource, FSFile):
+            return 'zodb', resource._filepath
+        else:
+            return 'zodb', None
+
+    @property
+    def name(self):
+        return self.data.__prefix__.split('/', 1)[1].rstrip('.')
+
+    @property
+    def last_compilation(self):
+        """check bundles last compilation using filesystem date or date of OFS.
+
+        if bundle has a last_compilation date newer than filesystem/OFS it wins
+        always.
+        """
+        mods = []
+        for ctx in ['js', 'css']:
+            loc, path = self._real_path(ctx)
+            if loc == 'fs' and os.path.exists(path):
+                mods.append(datetime.fromtimestamp(os.path.getmtime(path)))
+            elif loc == 'zodb':
+                self.data.last_compilation
+        if self.data.last_compilation:
+            if self.data.last_compilation > max(mods):
+                return self.data.last_compilation
+            else:
+                return max(mods)
+        return self.data.last_compilation
+
+    @last_compilation.setter
+    def last_compilation(self, value):
+        self.data.last_compilation = value
+
+    def __getattr__(self, name):
+        """act as r/o wrapper"""
+        return getattr(self.data, name)
+
+    def __repr__(self):
+        return '<{0}.{1} object "{2}" at {3}>'.format(
+            self.__class__.__module__,
+            self.__class__.__name__,
+            self.name,
+            id(self)
+        )
diff --git a/Products/CMFPlone/resources/exportimport/__init__.py b/Products/CMFPlone/resources/exportimport/__init__.py
index e69de29..7c68785 100644
--- a/Products/CMFPlone/resources/exportimport/__init__.py
+++ b/Products/CMFPlone/resources/exportimport/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
\ No newline at end of file
diff --git a/Products/CMFPlone/tests/testCSSandJSRegistry.py b/Products/CMFPlone/tests/testCSSandJSRegistry.py
index 0e100bd..11843cc 100644
--- a/Products/CMFPlone/tests/testCSSandJSRegistry.py
+++ b/Products/CMFPlone/tests/testCSSandJSRegistry.py
@@ -1,9 +1,9 @@
 # -*- coding: utf-8 -*-
-from plone.app.testing.bbb import PloneTestCase
 from plone.registry.interfaces import IRegistry
-from zope.component import getUtility
 from Products.CMFPlone.interfaces import IBundleRegistry
 from Products.CMFPlone.interfaces import IResourceRegistry
+from Products.CMFPlone.tests.PloneTestCase import PloneTestCase
+from zope.component import getUtility
 
 
 class TestCSSRegistry(PloneTestCase):
@@ -13,7 +13,9 @@ def afterSetUp(self):
 
     def testDefaultCssIsInstalled(self):
         installedResources = self.registry.collectionOfInterface(
-            IResourceRegistry, prefix="plone.resources")
+            IResourceRegistry,
+            prefix='plone.resources'
+        )
         expected = [
             '++plone++static/plone.less',
         ]
@@ -23,7 +25,7 @@ def testDefaultCssIsInstalled(self):
 
     def testBundleIsInstalled(self):
         installedBundles = self.registry.collectionOfInterface(
-            IBundleRegistry, prefix="plone.bundles")
+            IBundleRegistry, prefix='plone.bundles')
         expected = [
             'plone',
             'plone-legacy'
@@ -36,14 +38,16 @@ def testBundleIsInstalled(self):
     #     indexRTLStylesheet = self.tool.getResourcePosition('RTL.css')
     #     comes_before = ['++resource++plone.css']
     #     for cb in comes_before:
-    #         self.assertTrue(cb in installedStylesheetIds[:indexRTLStylesheet],
-    #                         cb)
+    #         self.assertTrue(
+    #             cb in installedStylesheetIds[:indexRTLStylesheet],
+    #             cb
+    #         )
 
     def testJSIsInsertedInPage(self):
         self.registry['plone.resources.development'] = True
         self.registry['plone.bundles/plone.develop_css'] = True
         page = self.portal.index_html()
-        self.assertTrue("++plone++static/plone.less" in page)
+        self.assertTrue('++plone++static/plone.less' in page)
 
 
 class TestJSRegistry(PloneTestCase):
@@ -53,12 +57,14 @@ def afterSetUp(self):
 
     def testDefaultJSIsInstalled(self):
         installedResources = self.registry.collectionOfInterface(
-            IResourceRegistry, prefix="plone.resources")
+            IResourceRegistry,
+            prefix='plone.resources'
+        )
         expected = [
             '++resource++plone.js',
             'jquery.highlightsearchterms.js'
         ]
-        js_files = [x.js for x in installedResources.values()]
+        js_files = {x.js for x in installedResources.values()}
         for e in expected:
             self.assertTrue(e in js_files, e)
 
@@ -66,4 +72,4 @@ def testJSIsInsertedInPage(self):
         self.registry['plone.resources.development'] = True
         self.registry['plone.bundles/plone.develop_javascript'] = True
         page = self.portal.index_html()
-        self.assertTrue("++resource++plone.js" in page)
+        self.assertTrue('++resource++plone.js' in page)
diff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py
index 6beeea9..b24d681 100644
--- a/Products/CMFPlone/tests/testResourceRegistries.py
+++ b/Products/CMFPlone/tests/testResourceRegistries.py
@@ -15,6 +15,7 @@
 from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings
 from Products.CMFPlone.resources.browser.scripts import ScriptsView
 from Products.CMFPlone.resources.browser.styles import StylesView
+from Products.CMFPlone.resources.bundle import Bundle
 from Products.CMFPlone.resources.exportimport.resourceregistry import ResourceRegistryNodeAdapter
 from Products.CMFPlone.tests import PloneTestCase
 from Products.GenericSetup.context import SetupEnviron
@@ -54,7 +55,10 @@ def test_cooking_resources(self):
 
         cookWhenChangingSettings(self.portal, bundle)
         resp = subrequest(
-            '%s/++plone++static/foobar-compiled.js' % self.portal.absolute_url())
+            '{0}/++plone++static/foobar-compiled.js'.format(
+                self.portal.absolute_url()
+            )
+        )
 
         self.assertTrue('alert(' in resp.getBody())
 
@@ -73,10 +77,14 @@ def test_cooking_missing(self):
         resource.js = '++plone++static/foobar.js'
         bundle.resources = ['foobar']
 
+        bundle = Bundle(bundle)
+
         cookWhenChangingSettings(self.portal, bundle)
         resp = subrequest(
-            '%s/++plone++static/foobar-compiled.js' % self.portal.absolute_url())
-
+            '{0}/++plone++static/foobar-compiled.js'.format(
+                self.portal.absolute_url()
+            )
+        )
         self.assertTrue('Could not find resource' in resp.getBody())
 
     def test_error(self):
@@ -106,8 +114,10 @@ def test_error(self):
 
         cookWhenChangingSettings(self.portal, bundle)
         resp = subrequest(
-            '%s/++plone++static/foobar-compiled.js' % self.portal.absolute_url())
-
+            '{0}/++plone++static/foobar-compiled.js'.format(
+                self.portal.absolute_url()
+            )
+        )
         self.assertTrue('error cooking' in resp.getBody())
 
 
@@ -130,7 +140,10 @@ def _get_resources(self):
 
     def _get_legacy_bundle(self):
         return getUtility(IRegistry).collectionOfInterface(
-            IBundleRegistry, prefix="plone.bundles", check=False)['plone-legacy']
+            IBundleRegistry,
+            prefix="plone.bundles",
+            check=False
+        )['plone-legacy']
 
     def _get_resource_dom(self, name='++resource++/resource.js',
                           remove=False, enabled=True):
@@ -148,7 +161,8 @@ def test_resource_blacklist(self):
         js_files = [x.js for x in self._get_resources().values()]
         self.assertTrue("++resource++/bad_resource.js" not in js_files)
         self.assertTrue(
-            "resource-bad_resource-js" not in self._get_legacy_bundle().resources)
+            "resource-bad_resource-js" not in
+            self._get_legacy_bundle().resources)
 
     def test_resource_no_blacklist(self):
         importer = self._get_importer()
@@ -221,7 +235,7 @@ def test_insert_before(self):
         # now, insert
         foobar = parseString("""
             <object>
-                <javascript id="foobar.js" insert-before="one" enabled="true" />
+              <javascript id="foobar.js" insert-before="one" enabled="true" />
             </object>
             """)
         importer._importNode(foobar.documentElement)
@@ -325,7 +339,11 @@ def __init__(self, name, enabled=True):
 class TestScriptsViewlet(PloneTestCase.PloneTestCase):
 
     def test_scripts_viewlet(self):
-        scripts = ScriptsView(self.layer['portal'], self.layer['request'], None)
+        scripts = ScriptsView(
+            self.layer['portal'],
+            self.layer['request'],
+            None
+        )
         scripts.update()
         results = scripts.scripts()
         self.assertEqual(results[0]['bundle'], 'production')
@@ -340,7 +358,11 @@ def test_scripts_viewlet(self):
 
     def test_scripts_viewlet_anonymous(self):
         logout()
-        scripts = ScriptsView(self.layer['portal'], self.layer['request'], None)
+        scripts = ScriptsView(
+            self.layer['portal'],
+            self.layer['request'],
+            None
+        )
         scripts.update()
         results = scripts.scripts()
         self.assertEqual(results[0]['bundle'], 'production')
@@ -349,17 +371,24 @@ def test_scripts_viewlet_anonymous(self):
         self.assertTrue(results[0]['src'].endswith('/default.js'))
         self.assertEqual(len(results), 1)
 
-    @mock.patch.object(ScriptsView,
-                       'get_resources',
-                       new=lambda self: {'foo': DummyResource('++resource++foo.js')})
+    @mock.patch.object(
+        ScriptsView,
+        'get_resources',
+        new=lambda self: {'foo': DummyResource('++resource++foo.js')}
+    )
     def test_request_resources(self):
         add_resource_on_request(self.layer['request'], 'foo')
-        scripts = ScriptsView(self.layer['portal'], self.layer['request'], None)
+        scripts = ScriptsView(
+            self.layer['portal'],
+            self.layer['request'],
+            None
+        )
         scripts.update()
         results = scripts.scripts()
         self.assertEqual(
             results[-1], {'src': 'http://nohost/plone/++resource++foo.js',
                           'conditionalcomment': '',
+                          'resetrjs': False,
                           'bundle': 'none'})
 
     def test_request_resources_not_add_same_twice(self):
@@ -379,7 +408,7 @@ def test_request_bundles_not_add_same_twice(self):
     @mock.patch.object(
         ScriptsView,
         'get_bundles',
-        new=lambda self: {'foo': DummyBundle('foo', enabled=False)}
+        new=lambda self: {'foo': Bundle(DummyBundle('foo', enabled=False))}
     )
     def test_add_bundle_on_request_with_subrequest(self):
         req = self.layer['request']
@@ -423,7 +452,7 @@ def test_add_bundle_on_request_with_subrequest(self):
     @mock.patch.object(
         ScriptsView,
         'get_bundles',
-        new=lambda self: {'foo': DummyBundle('foo', enabled=True)}
+        new=lambda self: {'foo': Bundle(DummyBundle('foo', enabled=True))}
     )
     def test_remove_bundle_on_request_with_subrequest(self):
         req = self.layer['request']
@@ -491,7 +520,8 @@ def test_add_resource_on_request_with_subrequest(self):
             {
                 'src': 'http://nohost/plone/++resource++foo.js',
                 'conditionalcomment': '',
-                'bundle': 'none'
+                'resetrjs': False,
+                'bundle': 'none',
             }
         )
 


Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2016-12-01T19:32:04+01:00
Author: agitator (agitator) <hpeter@agitator.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/75e6a60a52c31d401f3898fb08c4914f5d00a3b5

Merge pull request #1859 from plone/jensens-fix-rr-development

Fix ResourceRegistry in development mode

Files changed:
A Products/CMFPlone/resources/bundle.py
M CHANGES.rst
M Products/CMFPlone/resources/__init__.py
M Products/CMFPlone/resources/browser/__init__.py
M Products/CMFPlone/resources/browser/combine.py
M Products/CMFPlone/resources/browser/configjs.py
M Products/CMFPlone/resources/browser/cook.py
M Products/CMFPlone/resources/browser/mixins.py
M Products/CMFPlone/resources/browser/resource.py
M Products/CMFPlone/resources/browser/scripts.pt
M Products/CMFPlone/resources/browser/scripts.py
M Products/CMFPlone/resources/browser/styles.py
M Products/CMFPlone/resources/exportimport/__init__.py
M Products/CMFPlone/resources/exportimport/bundles.py
M Products/CMFPlone/resources/exportimport/cssregistry.py
M Products/CMFPlone/resources/exportimport/jsregistry.py
M Products/CMFPlone/resources/exportimport/resourceregistry.py
M Products/CMFPlone/resources/viewlets/__init__.py
M Products/CMFPlone/resources/viewlets/settings.py
M Products/CMFPlone/tests/testCSSandJSRegistry.py
M Products/CMFPlone/tests/testResourceRegistries.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 6f298b5..75502bd 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -111,6 +111,17 @@ New features:
 
 - Toolbar: Let the toolbar submenus be as wide as they need to be and do not break entries into multiple lines. [thet]
 
+- Resource Registry:
+  In ``debug-mode`` (zope.conf, buildout) do not load cache the production bundle.
+  [jensens]
+
+- Resource Registry:
+  In ``debug-mode`` (zope.conf, buildout) do not ignore development mode for anonymous users.
+  [jensens]
+
+- Resource Registry: If file system version is newer than ``last_compilation`` date of a bundle, use this as ``last_compilation`` date.
+  [jensens]
+
 
 Bug fixes:
 
@@ -197,6 +208,8 @@ Bug fixes:
 - URL change for bug tracker, wording tweaks to UPGRADE.txt
   [tkimnguyen]
 
+- Cleanup code of resource registry.
+  [jensens]
 
 5.1a2 (2016-08-19)
 ------------------
diff --git a/Products/CMFPlone/resources/__init__.py b/Products/CMFPlone/resources/__init__.py
index 8b8aa98..20d71b6 100644
--- a/Products/CMFPlone/resources/__init__.py
+++ b/Products/CMFPlone/resources/__init__.py
@@ -2,36 +2,40 @@
 import os
 
 
-RESOURCE_DEVELOPMENT_MODE = False
-if os.getenv('FEDEV', '').lower() == 'true':
-    RESOURCE_DEVELOPMENT_MODE = True
+RESOURCE_DEVELOPMENT_MODE = os.getenv('FEDEV', '').lower() == 'true'
 
 
 def add_resource_on_request(request, resource):
     """ Adds the resource to the request
     """
-    if not hasattr(request, 'enabled_resources'):
-        request.enabled_resources = []
-
-    if isinstance(resource, str) and resource not in request.enabled_resources:
+    if not isinstance(resource, str):
+        raise ValueError(
+            'add_resource_on_request expects a string value for resource'
+        )
+    request.enabled_resources = getattr(request, 'enabled_resources', [])
+    if resource not in request.enabled_resources:
         request.enabled_resources.append(resource)
 
 
 def add_bundle_on_request(request, bundle):
     """ Adds the bundle to the request
     """
-    if not hasattr(request, 'enabled_bundles'):
-        request.enabled_bundles = []
-
-    if isinstance(bundle, str) and bundle not in request.enabled_bundles:
+    if not isinstance(bundle, str):
+        raise ValueError(
+            'add_bundle_on_request expects a string value for bundle'
+        )
+    request.enabled_bundles = getattr(request, 'enabled_bundles', [])
+    if bundle not in request.enabled_bundles:
         request.enabled_bundles.append(bundle)
 
 
 def remove_bundle_on_request(request, bundle):
     """ Removes the bundle to the request
     """
-    if hasattr(request, 'disabled_bundles'):
-        if isinstance(bundle, str):
-            request.disabled_bundles.append(bundle)
-    else:
-        request.disabled_bundles = [bundle]
+    if not isinstance(bundle, str):
+        raise ValueError(
+            'remove_bundle_on_request expects a string value for bundle'
+        )
+    request.disabled_bundles = getattr(request, 'disabled_bundles', [])
+    if bundle not in request.disabled_bundles:
+        request.disabled_bundles.append(bundle)
diff --git a/Products/CMFPlone/resources/browser/__init__.py b/Products/CMFPlone/resources/browser/__init__.py
index e69de29..40a96af 100644
--- a/Products/CMFPlone/resources/browser/__init__.py
+++ b/Products/CMFPlone/resources/browser/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/Products/CMFPlone/resources/browser/combine.py b/Products/CMFPlone/resources/browser/combine.py
index d7c4ecd..7a8e89e 100644
--- a/Products/CMFPlone/resources/browser/combine.py
+++ b/Products/CMFPlone/resources/browser/combine.py
@@ -14,23 +14,24 @@
 import logging
 import re
 
-PRODUCTION_RESOURCE_DIRECTORY = "production"
+
+PRODUCTION_RESOURCE_DIRECTORY = 'production'
 logger = logging.getLogger(__name__)
 
 
 def get_production_resource_directory():
-    persistent_directory = queryUtility(IResourceDirectory, name="persistent")
+    persistent_directory = queryUtility(IResourceDirectory, name='persistent')
     if persistent_directory is None:
         return ''
     container = persistent_directory[OVERRIDE_RESOURCE_DIRECTORY_NAME]
     try:
         production_folder = container[PRODUCTION_RESOURCE_DIRECTORY]
     except NotFound:
-        return "%s/++unique++1" % PRODUCTION_RESOURCE_DIRECTORY
+        return '%s/++unique++1' % PRODUCTION_RESOURCE_DIRECTORY
     if 'timestamp.txt' not in production_folder:
-        return "%s/++unique++1" % PRODUCTION_RESOURCE_DIRECTORY
+        return '%s/++unique++1' % PRODUCTION_RESOURCE_DIRECTORY
     timestamp = production_folder.readFile('timestamp.txt')
-    return "%s/++unique++%s" % (
+    return '%s/++unique++%s' % (
         PRODUCTION_RESOURCE_DIRECTORY, timestamp)
 
 
@@ -46,7 +47,7 @@ def get_resource(context, path):
     try:
         resource = context.unrestrictedTraverse(path)
     except NotFound:
-        logger.warn(u"Could not find resource {0}. You may have to create it first.".format(path))  # noqa
+        logger.warn(u'Could not find resource {0}. You may have to create it first.'.format(path))  # noqa
         return
 
     if isinstance(resource, FilesystemFile):
@@ -66,19 +67,35 @@ def write_js(context, folder, meta_bundle):
     resources = []
 
     # default resources
-    if meta_bundle == 'default' and registry.records.get(
-        'plone.resources/jquery.js'
+    if (
+        meta_bundle == 'default' and
+        registry.records.get('plone.resources/jquery.js')
     ):
-        resources.append(get_resource(context,
-            registry.records['plone.resources/jquery.js'].value))
-        resources.append(get_resource(context,
-            registry.records['plone.resources.requirejs'].value))
-        resources.append(get_resource(context,
-            registry.records['plone.resources.configjs'].value))
+        resources.append(
+            get_resource(
+                context,
+                registry.records['plone.resources/jquery.js'].value
+            )
+        )
+        resources.append(
+            get_resource(
+                context,
+                registry.records['plone.resources.requirejs'].value
+            )
+        )
+        resources.append(
+            get_resource(
+                context,
+                registry.records['plone.resources.configjs'].value
+            )
+        )
 
     # bundles
     bundles = registry.collectionOfInterface(
-        IBundleRegistry, prefix="plone.bundles", check=False)
+        IBundleRegistry,
+        prefix='plone.bundles',
+        check=False
+    )
     for bundle in bundles.values():
         if bundle.merge_with == meta_bundle and bundle.jscompilation:
             resource = get_resource(context, bundle.jscompilation)
@@ -89,7 +106,7 @@ def write_js(context, folder, meta_bundle):
     fi = StringIO()
     for script in resources:
         fi.write(script + '\n')
-    folder.writeFile(meta_bundle + ".js", fi)
+    folder.writeFile(meta_bundle + '.js', fi)
 
 
 def write_css(context, folder, meta_bundle):
@@ -97,7 +114,10 @@ def write_css(context, folder, meta_bundle):
     resources = []
 
     bundles = registry.collectionOfInterface(
-        IBundleRegistry, prefix="plone.bundles", check=False)
+        IBundleRegistry,
+        prefix='plone.bundles',
+        check=False
+    )
     for bundle in bundles.values():
         if bundle.merge_with == meta_bundle and bundle.csscompilation:
             css = get_resource(context, bundle.csscompilation)
@@ -116,11 +136,11 @@ def write_css(context, folder, meta_bundle):
     fi = StringIO()
     for script in resources:
         fi.write(script + '\n')
-    folder.writeFile(meta_bundle + ".css", fi)
+    folder.writeFile(meta_bundle + '.css', fi)
 
 
 def get_override_directory(context):
-    persistent_directory = queryUtility(IResourceDirectory, name="persistent")
+    persistent_directory = queryUtility(IResourceDirectory, name='persistent')
     if persistent_directory is None:
         return
     if OVERRIDE_RESOURCE_DIRECTORY_NAME not in persistent_directory:
@@ -137,7 +157,7 @@ def combine_bundles(context):
     # store timestamp
     fi = StringIO()
     fi.write(datetime.now().isoformat())
-    production_folder.writeFile("timestamp.txt", fi)
+    production_folder.writeFile('timestamp.txt', fi)
 
     # generate new combined bundles
     write_js(context, production_folder, 'default')
diff --git a/Products/CMFPlone/resources/browser/configjs.py b/Products/CMFPlone/resources/browser/configjs.py
index 4af09b8..a88268a 100644
--- a/Products/CMFPlone/resources/browser/configjs.py
+++ b/Products/CMFPlone/resources/browser/configjs.py
@@ -1,12 +1,12 @@
 # -*- coding: utf-8 -*-
-import json
-import re
-
+from plone.registry.interfaces import IRegistry
 from Products.CMFPlone.interfaces import IResourceRegistry
 from Products.Five.browser import BrowserView
-from plone.registry.interfaces import IRegistry
 from zope.component import getUtility
 
+import json
+import re
+
 
 configjs = """requirejs.config({
     baseUrl: PORTAL_URL,
@@ -87,8 +87,10 @@ class ConfigJsView(RequireJsView):
 
     def __call__(self):
         (paths, shims) = self.get_requirejs_config()
-        self.request.response.setHeader("Content-Type",
-                                        "application/javascript")
+        self.request.response.setHeader(
+            'Content-Type',
+            'application/javascript'
+        )
         return configjs % (
             json.dumps(paths, indent=4),
             _format_shims(shims)
diff --git a/Products/CMFPlone/resources/browser/cook.py b/Products/CMFPlone/resources/browser/cook.py
index 4fdf61d..c29c419 100644
--- a/Products/CMFPlone/resources/browser/cook.py
+++ b/Products/CMFPlone/resources/browser/cook.py
@@ -1,26 +1,48 @@
 # -*- coding: utf-8 -*-
-import logging
-
-from Products.CMFPlone.interfaces.resources import IResourceRegistry
-from Products.CMFPlone.interfaces.resources import IBundleRegistry
-from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME  # noqa
-from Products.CMFPlone.resources.browser.combine import combine_bundles
-from StringIO import StringIO
 from cssmin import cssmin
 from datetime import datetime
 from plone.protect.interfaces import IDisableCSRFProtection
 from plone.registry.interfaces import IRegistry
 from plone.resource.interfaces import IResourceDirectory
 from plone.subrequest import subrequest
+from Products.CMFPlone.interfaces.resources import IBundleRegistry
+from Products.CMFPlone.interfaces.resources import IResourceRegistry
+from Products.CMFPlone.interfaces.resources import OVERRIDE_RESOURCE_DIRECTORY_NAME  # noqa
+from Products.CMFPlone.resources.browser.combine import combine_bundles
 from slimit import minify
+from StringIO import StringIO
+from zExceptions import NotFound
 from zope.component import getUtility
 from zope.component.hooks import getSite
 from zope.globalrequest import getRequest
 from zope.interface import alsoProvides
-from zExceptions import NotFound
+
+import logging
+
 
 logger = logging.getLogger('Products.CMFPlone')
 
+REQUIREJS_RESET_PREFIX = """
+/* reset requirejs definitions so that people who
+   put requirejs in legacy compilation do not get errors */
+var _old_define = define;
+var _old_require = require;
+define = undefined;
+require = undefined;
+try{
+"""
+REQUIREJS_RESET_POSTFIX = """
+}catch(e){
+    // log it
+    if (typeof console !== "undefined"){
+        console.log('Error loading javascripts!' + e);
+    }
+}finally{
+    define = _old_define;
+    require = _old_require;
+}
+"""
+
 
 def cookWhenChangingSettings(context, bundle=None):
     """When our settings are changed, re-cook the not compilable bundles
@@ -38,60 +60,46 @@ def cookWhenChangingSettings(context, bundle=None):
             bundle = bundles.setdefault('plone-legacy')
             bundle.resources = []
 
-
     if not bundle.resources:
-        # you can have a bundle without any resources defined and it's just shipped
-        # as a legacy compiled js file
+        # you can have a bundle without any resources defined and it's just
+        # shipped as a legacy compiled js file
         return
 
     # Let's join all css and js
-    css_file = ""
-    cooked_js = """
-/* reset requirejs definitions so that people who
-   put requirejs in legacy compilation do not get errors */
-var _old_define = define;
-var _old_require = require;
-define = undefined;
-require = undefined;
-try{
-"""
+    css_file = ''
+    cooked_js = REQUIREJS_RESET_PREFIX
     siteUrl = getSite().absolute_url()
     request = getRequest()
     for package in bundle.resources or []:
-        if package in resources:
-            resource = resources[package]
-            for css in resource.css:
-                response = subrequest(siteUrl + '/' + css)
-                if response.status == 200:
-                    css_file += response.getBody()
-                    css_file += '\n'
-
-            if resource.js:
-                response = subrequest(siteUrl + '/' + resource.js)
-                if response.status == 200:
-                    js = response.getBody()
-                    try:
-                        cooked_js += '\n/* resource: %s */\n%s' % (
-                            resource.js,
-                            minify(js, mangle=False, mangle_toplevel=False)
-                        )
-                    except SyntaxError:
-                        cooked_js += '\n/* resource(error cooking): %s */\n%s' % (
-                            resource.js, js)
-                else:
-                    cooked_js += '\n/* Could not find resource: %s */\n\n' % resource.js
+        if package not in resources:
+            continue
+        resource = resources[package]
+        for css in resource.css:
+            url = siteUrl + '/' + css
+            response = subrequest(url)
+            if response.status == 200:
+                css_file += response.getBody()
+                css_file += '\n'
+            else:
+                css_file += '\n/* Could not find resource: %s */\n\n' % url
+        if not resource.js:
+            continue
+        url = siteUrl + '/' + resource.js
+        response = subrequest(url)
+        if response.status == 200:
+            js = response.getBody()
+            try:
+                cooked_js += '\n/* resource: %s */\n%s' % (
+                    resource.js,
+                    minify(js, mangle=False, mangle_toplevel=False)
+                )
+            except SyntaxError:
+                cooked_js += '\n/* resource(error cooking): %s */\n%s' % (
+                    resource.js, js)
+        else:
+            cooked_js += '\n/* Could not find resource: %s */\n\n' % url
 
-    cooked_js += """
-}catch(e){
-    // log it
-    if (typeof console !== "undefined"){
-        console.log('Error loading javascripts!' + e);
-    }
-}finally{
-    define = _old_define;
-    require = _old_require;
-}
-"""
+    cooked_js += REQUIREJS_RESET_POSTFIX
     cooked_css = cssmin(css_file)
 
     js_path = bundle.jscompilation
diff --git a/Products/CMFPlone/resources/browser/mixins.py b/Products/CMFPlone/resources/browser/mixins.py
index 69fce1a..dcf0cc0 100644
--- a/Products/CMFPlone/resources/browser/mixins.py
+++ b/Products/CMFPlone/resources/browser/mixins.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
+from plone.registry.interfaces import IRegistry
 from Products.CMFPlone.interfaces import IResourceRegistry
 from Products.Five.browser import BrowserView
-from plone.registry.interfaces import IRegistry
 from urlparse import urlparse
 from zope.component import getMultiAdapter
 from zope.component import getUtility
diff --git a/Products/CMFPlone/resources/browser/resource.py b/Products/CMFPlone/resources/browser/resource.py
index 47f3d2f..a7d961f 100644
--- a/Products/CMFPlone/resources/browser/resource.py
+++ b/Products/CMFPlone/resources/browser/resource.py
@@ -1,34 +1,42 @@
 # -*- coding: utf-8 -*-
-from Acquisition import aq_inner, aq_base, aq_parent
-from Products.CMFCore.Expression import Expression
+from Acquisition import aq_base
+from Acquisition import aq_inner
+from Acquisition import aq_parent
+from App.config import getConfiguration
+from copy import copy
+from plone.app.layout.viewlets.common import ViewletBase
+from plone.app.theming.utils import theming_policy
+from plone.memoize.view import memoize
+from plone.registry.interfaces import IRegistry
 from Products.CMFCore.Expression import createExprContext
+from Products.CMFCore.Expression import Expression
+from Products.CMFCore.utils import _getAuthenticatedUser
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import IBundleRegistry
 from Products.CMFPlone.interfaces import IResourceRegistry
-from plone.app.layout.viewlets.common import ViewletBase
-from plone.app.theming.utils import theming_policy
-from plone.registry.interfaces import IRegistry
+from Products.CMFPlone.resources import RESOURCE_DEVELOPMENT_MODE
+from Products.CMFPlone.resources.browser.combine import get_production_resource_directory  # noqa
+from Products.CMFPlone.resources.bundle import Bundle
+from Products.CMFPlone.utils import get_top_request
 from zope import component
 from zope.component import getMultiAdapter
 from zope.component import getUtility
 from zope.ramcache.interfaces import ram
-from Products.CMFCore.utils import _getAuthenticatedUser
-from plone.memoize.view import memoize
-from Products.CMFPlone.resources import RESOURCE_DEVELOPMENT_MODE
-from Products.CMFPlone.utils import get_top_request
-
-from .combine import get_production_resource_directory
 
 
-class ResourceView(ViewletBase):
+class ResourceBase(object):
     """Information for script rendering.
+
+    This is a mixin base class for a browser view, a viewlet or a tile
+    or anything similar with a context and a request set on initialization.
     """
 
     @property
     @memoize
     def anonymous(self):
         return _getAuthenticatedUser(
-            self.context).getUserName() == 'Anonymous User'
+            self.context
+        ).getUserName() == 'Anonymous User'
 
     @property
     @memoize
@@ -42,14 +50,19 @@ def development(self):
         """
         if RESOURCE_DEVELOPMENT_MODE:
             return True
-        if self.anonymous:
+        if self.anonymous and not self.debug_mode:
             return False
         return self.registry.records['plone.resources.development'].value
 
+    @property
+    def debug_mode(self):
+        return getConfiguration().debug_mode
+
     def develop_bundle(self, bundle, attr):
-        if RESOURCE_DEVELOPMENT_MODE:
-            return True
-        return self.development and getattr(bundle, attr, False)
+        return (
+            RESOURCE_DEVELOPMENT_MODE or
+            (self.development and getattr(bundle, attr, False))
+        )
 
     @property
     def last_legacy_import(self):
@@ -88,98 +101,101 @@ def evaluateExpression(self, expression, context):
             return True
 
     def update(self):
-        self.portal_state = getMultiAdapter((self.context, self.request),
-                                            name=u'plone_portal_state')
+        self.portal_state = getMultiAdapter(
+            (self.context, self.request),
+            name=u'plone_portal_state'
+        )
         self.site_url = self.portal_state.portal_url()
         self.registry = getUtility(IRegistry)
-
         self.production_path = get_production_resource_directory()
 
-        self.diazo_production_css = None
-        self.diazo_development_css = None
-        self.diazo_development_js = None
-        self.diazo_production_js = None
-        self.themeObj = None
-
-        # Check if its Diazo enabled
+        theme = None
         policy = theming_policy(self.request)
         if policy.isThemeEnabled():
-            self.themeObj = policy.get_theme()
-            if self.themeObj:
-                if hasattr(self.themeObj, 'production_css'):
-                    self.diazo_production_css = self.themeObj.production_css
-                    self.diazo_development_css = self.themeObj.development_css
-                    self.diazo_development_js = self.themeObj.development_js
-                    self.diazo_production_js = self.themeObj.production_js
+            # Check if Diazo is enabled
+            theme = policy.get_theme() or None
+
+        self.diazo_production_css = getattr(theme, 'production_css', None)
+        self.diazo_development_css = getattr(theme, 'development_css', None)
+        self.diazo_production_js = getattr(theme, 'production_js', None)
+        self.diazo_development_js = getattr(theme, 'development_js', None)
+        self.theme_enabled_bundles = getattr(theme, 'enabled_bundles', [])
+        self.theme_disabled_bundles = getattr(theme, 'disabled_bundles', [])
 
     def get_bundles(self):
-        return self.registry.collectionOfInterface(
-            IBundleRegistry, prefix="plone.bundles", check=False)
+        result = {}
+        records = self.registry.collectionOfInterface(
+            IBundleRegistry,
+            prefix="plone.bundles",
+            check=False
+        )
+        for name, record in records.items():
+            result[name] = Bundle(record)
+        return result
 
     def get_resources(self):
         return self.registry.collectionOfInterface(
-            IResourceRegistry, prefix="plone.resources", check=False)
+            IResourceRegistry,
+            prefix="plone.resources",
+            check=False
+        )
+
+    def eval_expression(self, expression, bundle_name):
+        if not expression:
+            return True
+        cache = component.queryUtility(ram.IRAMCache)
+        cooked_expression = None
+        if cache is not None:
+            cooked_expression = cache.query(
+                'plone.bundles.cooked_expressions',
+                key=dict(prefix=bundle_name),
+                default=None
+            )
+        if (
+            cooked_expression is None or
+            cooked_expression.text != expression
+        ):
+            cooked_expression = Expression(expression)
+            if cache is not None:
+                cache.set(
+                    cooked_expression,
+                    'plone.bundles.cooked_expressions',
+                    key=dict(prefix=bundle_name)
+                )
+        return self.evaluateExpression(cooked_expression, self.context)
 
     def get_cooked_bundles(self):
         """
         Get the cooked bundles
         """
-        cache = component.queryUtility(ram.IRAMCache)
-        bundles = self.get_bundles()
-
-        enabled_diazo_bundles = []
-        disabled_diazo_bundles = []
+        request = get_top_request(self.request)  # might be a subrequest
 
-        if self.themeObj:
-            enabled_diazo_bundles = self.themeObj.enabled_bundles
-            disabled_diazo_bundles = self.themeObj.disabled_bundles
+        # theme specific set bundles
+        enabled_bundles = set(self.theme_enabled_bundles)
+        disabled_bundles = set(self.theme_disabled_bundles)
 
         # Request set bundles
-        request = get_top_request(self.request)  # might be a subrequest
-        enabled_request_bundles = []
-        disabled_request_bundles = []
-        if hasattr(request, 'enabled_bundles'):
-            enabled_request_bundles.extend(request.enabled_bundles)
-
-        if hasattr(request, 'disabled_bundles'):
-            disabled_request_bundles.extend(request.disabled_bundles)
+        enabled_bundles.update(getattr(request, 'enabled_bundles', []))
+        disabled_bundles.update(getattr(request, 'disabled_bundles', []))
 
-        for key, bundle in bundles.items():
+        for key, bundle in self.get_bundles().items():
             # The diazo manifest and request bundles are more important than
             # the disabled bundle on registry.
             # We can access the site with diazo.off=1 without diazo bundles
-            if (bundle.enabled
-                    or key in enabled_request_bundles
-                    or key in enabled_diazo_bundles) and\
-                    (key not in disabled_diazo_bundles
-                        and key not in disabled_request_bundles):
-                # check expression
-                if bundle.expression:
-                    cooked_expression = None
-                    if cache is not None:
-                        cooked_expression = cache.query(
-                            'plone.bundles.cooked_expressions',
-                            key=dict(prefix=bundle.__prefix__), default=None)
-                    if (
-                            cooked_expression is None or
-                            cooked_expression.text != bundle.expression):
-                        cooked_expression = Expression(bundle.expression)
-                        if cache is not None:
-                            cache.set(
-                                cooked_expression,
-                                'plone.bundles.cooked_expressions',
-                                key=dict(prefix=bundle.__prefix__))
-                    if not self.evaluateExpression(
-                            cooked_expression, self.context):
-                        continue
-                yield key, bundle
+            if (
+                key in disabled_bundles or
+                (key not in enabled_bundles and not bundle.enabled) or
+                not self.eval_expression(bundle.expression, bundle.name)
+            ):
+                continue
+
+            yield key, bundle
 
     def ordered_bundles_result(self, production=False):
         """
         It gets the ordered result of bundles
         """
         result = []
-        # The first one
         inserted = []
         depends_on = {}
         for key, bundle in self.get_cooked_bundles():
@@ -199,21 +215,25 @@ def ordered_bundles_result(self, production=False):
         while len(depends_on) > 0:
             found = False
             for key, bundles_to_add in depends_on.items():
-                if key in inserted:
-                    found = True
-                    for bundle in bundles_to_add:
-                        if not(production and bundle.merge_with):
-                            self.get_data(bundle, result)
-                        inserted.append(
-                            bundle.__prefix__.split('/', 1)[1].rstrip('.'))
-                    del depends_on[key]
+                if key not in inserted:
+                    continue
+                found = True
+                for bundle in bundles_to_add:
+                    if not(production and bundle.merge_with):
+                        self.get_data(bundle, result)
+                    inserted.append(bundle.name)
+                del depends_on[key]
             if not found:
                 break
 
-        # THe ones that does not get the dependencies
+        # The ones that does not get the dependencies
         for bundles_to_add in depends_on.values():
             for bundle in bundles_to_add:
                 if not(production and bundle.merge_with):
                     self.get_data(bundle, result)
-
         return result
+
+
+class ResourceView(ResourceBase, ViewletBase):
+    """Viewlet Information for script rendering.
+    """
diff --git a/Products/CMFPlone/resources/browser/scripts.pt b/Products/CMFPlone/resources/browser/scripts.pt
index e9ad1bb..1450818 100644
--- a/Products/CMFPlone/resources/browser/scripts.pt
+++ b/Products/CMFPlone/resources/browser/scripts.pt
@@ -1,4 +1,4 @@
-<script type="text/javascript" tal:content="string:PORTAL_URL = '${view/base_url}';"></script>
+<script type="text/javascript" tal:content="string:PORTAL_URL = '${view/site_url}';"></script>
 <tal:scripts repeat="script view/scripts"><tal:block define="condcomment script/conditionalcomment; resetrjs script/resetrjs|nothing"><tal:if condition="resetrjs">
   <tal:openreset content='structure string:&lt;script type="text/javascript"&gt;'/>
       /* reset requirejs definitions so that people who put requirejs in legacy compilation do not get errors */
diff --git a/Products/CMFPlone/resources/browser/scripts.py b/Products/CMFPlone/resources/browser/scripts.py
index a6df2c7..f897899 100644
--- a/Products/CMFPlone/resources/browser/scripts.py
+++ b/Products/CMFPlone/resources/browser/scripts.py
@@ -1,10 +1,9 @@
 # -*- coding: utf-8 -*-
-from urlparse import urlparse
-from urllib import quote
-
 from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings
 from Products.CMFPlone.resources.browser.resource import ResourceView
 from Products.CMFPlone.utils import get_top_request
+from urllib import quote
+from urlparse import urlparse
 from zope.component import getMultiAdapter
 
 
@@ -12,65 +11,84 @@ class ScriptsView(ResourceView):
     """Information for script rendering.
     """
 
+    def _add_resources(
+        self,
+        resources_to_add,
+        result,
+        bundle_name='none',
+        resetrjs=False,
+        conditionalcomment=''
+    ):
+        resources = self.get_resources()
+        for resource in resources_to_add:
+            data = resources.get(resource, None)
+            if data is None or not data.js:
+                continue
+            url = urlparse(data.js)
+            if url.netloc == '':
+                # Local
+                src = '{0}/{1}'.format(self.site_url, data.js)
+            else:
+                src = data.js
+            data = {
+                'bundle': bundle_name,
+                'conditionalcomment': conditionalcomment,
+                'src': src,
+                # Reset RequireJS if bundle is in non-compile to
+                # avoid "Mismatched anonymous define()" in legacy
+                # scripts.
+                'resetrjs': resetrjs,
+            }
+            result.append(data)
+
     def get_data(self, bundle, result):
-        bundle_name = bundle.__prefix__.split('/', 1)[1].rstrip('.')
         if self.develop_bundle(bundle, 'develop_javascript'):
             # Bundle development mode
-            resources = self.get_resources()
-            for resource in bundle.resources:
-                if resource in resources:
-                    script = resources[resource]
-                    if script.js:
-                        url = urlparse(script.js)
-                        if url.netloc == '':
-                            # Local
-                            src = "%s/%s" % (self.site_url, script.js)
-                        else:
-                            src = "%s" % (script.js)
+            self._add_resources(
+                bundle.resources,
+                result,
+                bundle_name=bundle.name,
+                resetrjs=bundle.compile,
+                conditionalcomment=bundle.conditionalcomment,
+            )
+            return
+        if (
+            not bundle.compile and
+            (
+                not bundle.last_compilation or
+                self.last_legacy_import > bundle.last_compilation
+            ) and
+            bundle.resources
+        ):
+            # Its a legacy css bundle OR compiling is happening outside of
+            # plone
 
-                        data = {
-                            'bundle': bundle_name,
-                            'conditionalcomment': bundle.conditionalcomment,  # noqa
-                            'src': src,
-                            # Reset RequireJS if bundle is in non-compile to
-                            # avoid "Mismatched anonymous define()" in legacy
-                            # scripts.
-                            'resetrjs': bundle.compile is False
-                        }
-                        result.append(data)
-        else:
-            if bundle.compile is False:
-                # Its a legacy css bundle OR compiling is happening outside of
-                # plone
-                if ((not bundle.last_compilation
-                        or self.last_legacy_import > bundle.last_compilation)
-                        and bundle.resources):
-                    # We need to combine files. It's possible no resources are defined
-                    # because the compiling is done outside of plone
-                    cookWhenChangingSettings(self.context, bundle)
-            if bundle.jscompilation:
-                js_path = bundle.jscompilation
-                if '++plone++' in js_path:
-                    resource_path = js_path.split('++plone++')[-1]
-                    resource_name, resource_filepath = resource_path.split(
-                        '/', 1)
-                    js_location = '%s/++plone++%s/++unique++%s/%s' % (
-                        self.site_url,
-                        resource_name,
-                        quote(str(bundle.last_compilation)),
-                        resource_filepath
-                    )
-                else:
-                    js_location = '%s/%s?version=%s' % (
-                        self.site_url,
-                        bundle.jscompilation,
-                        quote(str(bundle.last_compilation))
-                    )
-                result.append({
-                    'bundle': bundle_name,
-                    'conditionalcomment': bundle.conditionalcomment,
-                    'src': js_location
-                })
+            # We need to combine files. It's possible no resources are
+            # defined because the compiling is done outside of plone
+            cookWhenChangingSettings(self.context, bundle)
+        if bundle.jscompilation:
+            js_path = bundle.jscompilation
+            if '++plone++' in js_path:
+                resource_path = js_path.split('++plone++')[-1]
+                resource_name, resource_filepath = resource_path.split(
+                    '/', 1)
+                js_location = '{0}/++plone++{1}/++unique++{2}/{3}'.format(
+                    self.site_url,
+                    resource_name,
+                    quote(str(bundle.last_compilation)),
+                    resource_filepath
+                )
+            else:
+                js_location = '{0}/{1}?version={2}'.format(
+                    self.site_url,
+                    bundle.jscompilation,
+                    quote(str(bundle.last_compilation))
+                )
+            result.append({
+                'bundle': bundle.name,
+                'conditionalcomment': bundle.conditionalcomment,
+                'src': js_location
+            })
 
     def default_resources(self):
         """ Default resources used by Plone itself
@@ -78,7 +96,7 @@ def default_resources(self):
         result = []
         # We always add jquery resource
         result.append({
-            'src': '%s/%s' % (
+            'src': '{0}/{1}'.format(
                 self.site_url,
                 self.registry.records['plone.resources/jquery.js'].value),
             'conditionalcomment': None,
@@ -87,28 +105,28 @@ def default_resources(self):
         if self.development:
             # We need to add require.js and config.js
             result.append({
-                'src': '%s/%s' % (
+                'src': '{0}/{1}'.format(
                     self.site_url,
                     self.registry.records['plone.resources.less-variables'].value),  # noqa
                 'conditionalcomment': None,
                 'bundle': 'basic'
             })
             result.append({
-                'src': '%s/%s' % (
+                'src': '{0}/{1}'.format(
                     self.site_url,
                     self.registry.records['plone.resources.lessc'].value),
                 'conditionalcomment': None,
                 'bundle': 'basic'
             })
         result.append({
-            'src': '%s/%s' % (
+            'src': '{0}/{1}'.format(
                 self.site_url,
                 self.registry.records['plone.resources.requirejs'].value),
             'conditionalcomment': None,
             'bundle': 'basic'
         })
         result.append({
-            'src': '%s/%s' % (
+            'src': '{0}/{1}'.format(
                 self.site_url,
                 self.registry.records['plone.resources.configjs'].value),
             'conditionalcomment': None,
@@ -117,8 +135,10 @@ def default_resources(self):
         return result
 
     def base_url(self):
-        portal_state = getMultiAdapter((self.context, self.request),
-                                       name=u'plone_portal_state')
+        portal_state = getMultiAdapter(
+            (self.context, self.request),
+            name=u'plone_portal_state'
+        )
         site_url = portal_state.portal_url()
         return site_url
 
@@ -126,12 +146,12 @@ def scripts(self):
         """The requirejs scripts, the ones that are not resources are loaded on
         configjs.py
         """
-        if self.development or not self.production_path:
+        if self.debug_mode or self.development or not self.production_path:
             result = self.default_resources()
             result.extend(self.ordered_bundles_result())
         else:
             result = [{
-                'src': '%s/++plone++%s' % (
+                'src': '{0}/++plone++{1}'.format(
                     self.site_url,
                     self.production_path + '/default.js'
                 ),
@@ -140,7 +160,7 @@ def scripts(self):
             }, ]
             if not self.anonymous:
                 result.append({
-                    'src': '%s/++plone++%s' % (
+                    'src': '{0}/++plone++{1}'.format(
                         self.site_url,
                         self.production_path + '/logged-in.js'
                     ),
@@ -151,37 +171,21 @@ def scripts(self):
 
         # Add manual added resources
         request = get_top_request(self.request)  # might be a subrequest
-        if hasattr(request, 'enabled_resources'):
-            resources = self.get_resources()
-            for resource in request.enabled_resources:
-                if resource in resources:
-                    data = resources[resource]
-                    if data.js:
-                        url = urlparse(data.js)
-                        if url.netloc == '':
-                            # Local
-                            src = "%s/%s" % (self.site_url, data.js)
-                        else:
-                            src = "%s" % (data.js)
-
-                        data = {
-                            'bundle': 'none',
-                            'conditionalcomment': '',  # noqa
-                            'src': src}
-                        result.append(data)
+        enabled_resources = getattr(request, 'enabled_resources', [])
+        if enabled_resources:
+            self._add_resources(enabled_resources, result)
 
         # Add diazo url
         origin = None
-        if self.diazo_production_js and self.development is False:
+        if self.diazo_production_js and not self.development:
             origin = self.diazo_production_js
-        if self.diazo_development_js and self.development is True:
+        if self.diazo_development_js and self.development:
             origin = self.diazo_development_js
         if origin:
             result.append({
                 'bundle': 'diazo',
                 'conditionalcomment': '',
-                'src': '%s/%s' % (
-                    self.site_url, origin)
+                'src': '{0}/{1}'.format(self.site_url, origin),
             })
 
         return result
diff --git a/Products/CMFPlone/resources/browser/styles.py b/Products/CMFPlone/resources/browser/styles.py
index ce5f316..1a7528b 100644
--- a/Products/CMFPlone/resources/browser/styles.py
+++ b/Products/CMFPlone/resources/browser/styles.py
@@ -1,13 +1,13 @@
 # -*- coding: utf-8 -*-
-from urlparse import urlparse
-from urllib import quote
-
+from plone.app.layout.viewlets.common import ViewletBase
 from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings
-from Products.CMFPlone.resources.browser.resource import ResourceView
+from Products.CMFPlone.resources.browser.resource import ResourceBase
 from Products.CMFPlone.utils import get_top_request
+from urllib import quote
+from urlparse import urlparse
 
 
-class StylesView(ResourceView):
+class StylesBase(ResourceBase):
 
     """ Information for style rendering. """
 
@@ -15,9 +15,6 @@ def get_urls(self, style, bundle):
         """
         Extracts the urls for the specific resource
         """
-        bundle_name = bundle.__prefix__.split(
-            '/',
-            1)[1].rstrip('.') if bundle else 'none'
         for css in style.css:
             url = urlparse(css)
             if url.netloc == '':
@@ -33,8 +30,9 @@ def get_urls(self, style, bundle):
 
             data = {
                 'rel': rel,
-                'bundle': bundle_name,
-                'conditionalcomment': bundle.conditionalcomment if bundle else '',  # noqa
+                'bundle': bundle.name if bundle else 'none',
+                'conditionalcomment':
+                    bundle.conditionalcomment if bundle else '',
                 'src': src}
             yield data
 
@@ -43,9 +41,6 @@ def get_data(self, bundle, result):
         Gets the needed information for the bundle
         and stores it on the result list
         """
-        bundle_name = bundle.__prefix__.split(
-            '/',
-            1)[1].rstrip('.') if bundle else 'none'
         if self.develop_bundle(bundle, 'develop_css'):
             self.resources = self.get_resources()
             # The bundle resources
@@ -81,7 +76,7 @@ def get_data(self, bundle, result):
                         quote(str(bundle.last_compilation))
                     )
                 result.append({
-                    'bundle': bundle_name,
+                    'bundle': bundle.name,
                     'rel': 'stylesheet',
                     'conditionalcomment': bundle.conditionalcomment,
                     'src': css_location
@@ -91,7 +86,7 @@ def styles(self):
         """
         Get all the styles
         """
-        if self.development or not self.production_path:
+        if self.development or self.debug_mode or not self.production_path:
             result = self.ordered_bundles_result()
         else:
             result = [{
@@ -150,3 +145,8 @@ def styles(self):
 
             result.append(data)
         return result
+
+
+class StylesView(StylesBase, ViewletBase):
+    """Styles Viewlet
+    """
diff --git a/Products/CMFPlone/resources/bundle.py b/Products/CMFPlone/resources/bundle.py
new file mode 100644
index 0000000..f7eab61
--- /dev/null
+++ b/Products/CMFPlone/resources/bundle.py
@@ -0,0 +1,101 @@
+# -*- coding: utf-8 -*-
+from plone.resource.directory import FilesystemResourceDirectory
+from plone.resource.file import FilesystemFile
+from Products.CMFCore.FSFile import FSFile
+from Products.Five.browser.resource import DirectoryResource
+from Products.Five.browser.resource import FileResource
+from zope.component.hooks import getSite
+from datetime import datetime
+
+import os
+
+
+class Bundle(object):
+    """Wraps pure bundles RecordsProxy and enrich with logic
+    .
+    Proxy attributes and provide some utility functions
+    """
+
+    def __init__(self, data):
+        """initialize Bunde.initialize
+
+        data is a
+        - registry record
+        - with interfaces'IResourceRegistry'
+        - with prefix 'plone.bundles'
+        """
+        self.data = data
+
+    def _real_path(self, ctx):
+        if ctx == 'js':
+            resource_path = self.data.jscompilation
+        else:
+            resource_path = self.data.csscompilation
+        resource = getSite().restrictedTraverse(resource_path)
+        if resource.__module__ == 'Products.Five.metaclass':
+            try:
+                return 'fs', resource.chooseContext().path
+            except:
+                try:
+                    return 'fs', resource.context.path
+                except:
+                    try:
+                        if callable(resource):
+                            return None, None
+                        else:
+                            return None, None
+                    except:
+                        return None, None
+        elif isinstance(resource, FilesystemFile):
+            return 'fs', resource.path
+        elif isinstance(resource, FileResource):
+            return 'fs', resource.chooseContext().path
+        elif isinstance(resource, DirectoryResource):
+            return 'fs', resource.context.path
+        elif isinstance(resource, FilesystemResourceDirectory):
+            return 'fs', resource.directory
+        elif isinstance(resource, FSFile):
+            return 'zodb', resource._filepath
+        else:
+            return 'zodb', None
+
+    @property
+    def name(self):
+        return self.data.__prefix__.split('/', 1)[1].rstrip('.')
+
+    @property
+    def last_compilation(self):
+        """check bundles last compilation using filesystem date or date of OFS.
+
+        if bundle has a last_compilation date newer than filesystem/OFS it wins
+        always.
+        """
+        mods = []
+        for ctx in ['js', 'css']:
+            loc, path = self._real_path(ctx)
+            if loc == 'fs' and os.path.exists(path):
+                mods.append(datetime.fromtimestamp(os.path.getmtime(path)))
+            elif loc == 'zodb':
+                self.data.last_compilation
+        if self.data.last_compilation:
+            if self.data.last_compilation > max(mods):
+                return self.data.last_compilation
+            else:
+                return max(mods)
+        return self.data.last_compilation
+
+    @last_compilation.setter
+    def last_compilation(self, value):
+        self.data.last_compilation = value
+
+    def __getattr__(self, name):
+        """act as r/o wrapper"""
+        return getattr(self.data, name)
+
+    def __repr__(self):
+        return '<{0}.{1} object "{2}" at {3}>'.format(
+            self.__class__.__module__,
+            self.__class__.__name__,
+            self.name,
+            id(self)
+        )
diff --git a/Products/CMFPlone/resources/exportimport/__init__.py b/Products/CMFPlone/resources/exportimport/__init__.py
index e69de29..7c68785 100644
--- a/Products/CMFPlone/resources/exportimport/__init__.py
+++ b/Products/CMFPlone/resources/exportimport/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
\ No newline at end of file
diff --git a/Products/CMFPlone/resources/exportimport/bundles.py b/Products/CMFPlone/resources/exportimport/bundles.py
index 56ea8aa..54e50f7 100644
--- a/Products/CMFPlone/resources/exportimport/bundles.py
+++ b/Products/CMFPlone/resources/exportimport/bundles.py
@@ -1,10 +1,9 @@
 # -*- coding: utf-8 -*-
+from ..browser.combine import combine_bundles
 from plone.registry.interfaces import IRegistry
 from zope.component import queryUtility
 from zope.globalrequest import getRequest
 
-from ..browser.combine import combine_bundles
-
 
 def combine(context):
 
diff --git a/Products/CMFPlone/resources/exportimport/cssregistry.py b/Products/CMFPlone/resources/exportimport/cssregistry.py
index 927c7dd..d4fa172 100644
--- a/Products/CMFPlone/resources/exportimport/cssregistry.py
+++ b/Products/CMFPlone/resources/exportimport/cssregistry.py
@@ -1,10 +1,9 @@
 # -*- coding: utf-8 -*-
-from Products.CMFPlone.resources.exportimport.resourceregistry import \
-    ResourceRegistryNodeAdapter
-from Products.CMFPlone.resources.exportimport.resourceregistry import \
-    importResRegistry
+from Products.CMFPlone.resources.exportimport.resourceregistry import importResRegistry
+from Products.CMFPlone.resources.exportimport.resourceregistry import ResourceRegistryNodeAdapter
 from Products.ResourceRegistries.interfaces import ICSSRegistry
 
+
 _FILENAME = 'cssregistry.xml'
 _REG_ID = 'portal_css'
 _REG_TITLE = 'Stylesheet registry'
diff --git a/Products/CMFPlone/resources/exportimport/jsregistry.py b/Products/CMFPlone/resources/exportimport/jsregistry.py
index ec99026..da48846 100644
--- a/Products/CMFPlone/resources/exportimport/jsregistry.py
+++ b/Products/CMFPlone/resources/exportimport/jsregistry.py
@@ -1,7 +1,8 @@
 # -*- coding: utf-8 -*-
 from Products.ResourceRegistries.interfaces import IJSRegistry
-from resourceregistry import ResourceRegistryNodeAdapter
 from resourceregistry import importResRegistry
+from resourceregistry import ResourceRegistryNodeAdapter
+
 
 _FILENAME = 'jsregistry.xml'
 _REG_ID = 'portal_javascripts'
diff --git a/Products/CMFPlone/resources/exportimport/resourceregistry.py b/Products/CMFPlone/resources/exportimport/resourceregistry.py
index 504b88b..6e636ed 100644
--- a/Products/CMFPlone/resources/exportimport/resourceregistry.py
+++ b/Products/CMFPlone/resources/exportimport/resourceregistry.py
@@ -1,13 +1,12 @@
 # -*- coding: utf-8 -*-
 from datetime import datetime
-
+from plone.i18n.normalizer.interfaces import IIDNormalizer
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import IBundleRegistry
 from Products.CMFPlone.interfaces import IResourceRegistry
 from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings
 from Products.GenericSetup.interfaces import IBody
 from Products.GenericSetup.utils import XMLAdapterBase
-from plone.i18n.normalizer.interfaces import IIDNormalizer
 from zope.component import queryMultiAdapter
 from zope.component import queryUtility
 from zope.component.interfaces import ComponentLookupError
diff --git a/Products/CMFPlone/resources/viewlets/__init__.py b/Products/CMFPlone/resources/viewlets/__init__.py
index ab52c67..31d2aad 100644
--- a/Products/CMFPlone/resources/viewlets/__init__.py
+++ b/Products/CMFPlone/resources/viewlets/__init__.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
-from Products.ResourceRegistries.interfaces.registries import IResourceRegistry
+from Products.ResourceRegistries.interfaces.registries import ICookedFile
 from Products.ResourceRegistries.interfaces.registries import ICSSRegistry
-from Products.ResourceRegistries.interfaces.registries import IKSSRegistry
 from Products.ResourceRegistries.interfaces.registries import IJSRegistry
-from Products.ResourceRegistries.interfaces.registries import ICookedFile
+from Products.ResourceRegistries.interfaces.registries import IKSSRegistry
 from Products.ResourceRegistries.interfaces.registries import IResourceProvider
+from Products.ResourceRegistries.interfaces.registries import IResourceRegistry
+from Products.ResourceRegistries.interfaces.settings import IResourceRegistriesSettings
 from Products.ResourceRegistries.interfaces.viewletmanagers import IHtmlHeadScripts
 from Products.ResourceRegistries.interfaces.viewletmanagers import IHtmlHeadStyles
-from Products.ResourceRegistries.interfaces.settings import IResourceRegistriesSettings
diff --git a/Products/CMFPlone/resources/viewlets/settings.py b/Products/CMFPlone/resources/viewlets/settings.py
index 7324f35..6ebf27c 100644
--- a/Products/CMFPlone/resources/viewlets/settings.py
+++ b/Products/CMFPlone/resources/viewlets/settings.py
@@ -3,6 +3,7 @@
 from zope.i18nmessageid import MessageFactory
 from zope.interface import Interface
 
+
 _ = MessageFactory('plone')
 
 
diff --git a/Products/CMFPlone/tests/testCSSandJSRegistry.py b/Products/CMFPlone/tests/testCSSandJSRegistry.py
index 0e100bd..11843cc 100644
--- a/Products/CMFPlone/tests/testCSSandJSRegistry.py
+++ b/Products/CMFPlone/tests/testCSSandJSRegistry.py
@@ -1,9 +1,9 @@
 # -*- coding: utf-8 -*-
-from plone.app.testing.bbb import PloneTestCase
 from plone.registry.interfaces import IRegistry
-from zope.component import getUtility
 from Products.CMFPlone.interfaces import IBundleRegistry
 from Products.CMFPlone.interfaces import IResourceRegistry
+from Products.CMFPlone.tests.PloneTestCase import PloneTestCase
+from zope.component import getUtility
 
 
 class TestCSSRegistry(PloneTestCase):
@@ -13,7 +13,9 @@ def afterSetUp(self):
 
     def testDefaultCssIsInstalled(self):
         installedResources = self.registry.collectionOfInterface(
-            IResourceRegistry, prefix="plone.resources")
+            IResourceRegistry,
+            prefix='plone.resources'
+        )
         expected = [
             '++plone++static/plone.less',
         ]
@@ -23,7 +25,7 @@ def testDefaultCssIsInstalled(self):
 
     def testBundleIsInstalled(self):
         installedBundles = self.registry.collectionOfInterface(
-            IBundleRegistry, prefix="plone.bundles")
+            IBundleRegistry, prefix='plone.bundles')
         expected = [
             'plone',
             'plone-legacy'
@@ -36,14 +38,16 @@ def testBundleIsInstalled(self):
     #     indexRTLStylesheet = self.tool.getResourcePosition('RTL.css')
     #     comes_before = ['++resource++plone.css']
     #     for cb in comes_before:
-    #         self.assertTrue(cb in installedStylesheetIds[:indexRTLStylesheet],
-    #                         cb)
+    #         self.assertTrue(
+    #             cb in installedStylesheetIds[:indexRTLStylesheet],
+    #             cb
+    #         )
 
     def testJSIsInsertedInPage(self):
         self.registry['plone.resources.development'] = True
         self.registry['plone.bundles/plone.develop_css'] = True
         page = self.portal.index_html()
-        self.assertTrue("++plone++static/plone.less" in page)
+        self.assertTrue('++plone++static/plone.less' in page)
 
 
 class TestJSRegistry(PloneTestCase):
@@ -53,12 +57,14 @@ def afterSetUp(self):
 
     def testDefaultJSIsInstalled(self):
         installedResources = self.registry.collectionOfInterface(
-            IResourceRegistry, prefix="plone.resources")
+            IResourceRegistry,
+            prefix='plone.resources'
+        )
         expected = [
             '++resource++plone.js',
             'jquery.highlightsearchterms.js'
         ]
-        js_files = [x.js for x in installedResources.values()]
+        js_files = {x.js for x in installedResources.values()}
         for e in expected:
             self.assertTrue(e in js_files, e)
 
@@ -66,4 +72,4 @@ def testJSIsInsertedInPage(self):
         self.registry['plone.resources.development'] = True
         self.registry['plone.bundles/plone.develop_javascript'] = True
         page = self.portal.index_html()
-        self.assertTrue("++resource++plone.js" in page)
+        self.assertTrue('++resource++plone.js' in page)
diff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py
index 6beeea9..b24d681 100644
--- a/Products/CMFPlone/tests/testResourceRegistries.py
+++ b/Products/CMFPlone/tests/testResourceRegistries.py
@@ -15,6 +15,7 @@
 from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings
 from Products.CMFPlone.resources.browser.scripts import ScriptsView
 from Products.CMFPlone.resources.browser.styles import StylesView
+from Products.CMFPlone.resources.bundle import Bundle
 from Products.CMFPlone.resources.exportimport.resourceregistry import ResourceRegistryNodeAdapter
 from Products.CMFPlone.tests import PloneTestCase
 from Products.GenericSetup.context import SetupEnviron
@@ -54,7 +55,10 @@ def test_cooking_resources(self):
 
         cookWhenChangingSettings(self.portal, bundle)
         resp = subrequest(
-            '%s/++plone++static/foobar-compiled.js' % self.portal.absolute_url())
+            '{0}/++plone++static/foobar-compiled.js'.format(
+                self.portal.absolute_url()
+            )
+        )
 
         self.assertTrue('alert(' in resp.getBody())
 
@@ -73,10 +77,14 @@ def test_cooking_missing(self):
         resource.js = '++plone++static/foobar.js'
         bundle.resources = ['foobar']
 
+        bundle = Bundle(bundle)
+
         cookWhenChangingSettings(self.portal, bundle)
         resp = subrequest(
-            '%s/++plone++static/foobar-compiled.js' % self.portal.absolute_url())
-
+            '{0}/++plone++static/foobar-compiled.js'.format(
+                self.portal.absolute_url()
+            )
+        )
         self.assertTrue('Could not find resource' in resp.getBody())
 
     def test_error(self):
@@ -106,8 +114,10 @@ def test_error(self):
 
         cookWhenChangingSettings(self.portal, bundle)
         resp = subrequest(
-            '%s/++plone++static/foobar-compiled.js' % self.portal.absolute_url())
-
+            '{0}/++plone++static/foobar-compiled.js'.format(
+                self.portal.absolute_url()
+            )
+        )
         self.assertTrue('error cooking' in resp.getBody())
 
 
@@ -130,7 +140,10 @@ def _get_resources(self):
 
     def _get_legacy_bundle(self):
         return getUtility(IRegistry).collectionOfInterface(
-            IBundleRegistry, prefix="plone.bundles", check=False)['plone-legacy']
+            IBundleRegistry,
+            prefix="plone.bundles",
+            check=False
+        )['plone-legacy']
 
     def _get_resource_dom(self, name='++resource++/resource.js',
                           remove=False, enabled=True):
@@ -148,7 +161,8 @@ def test_resource_blacklist(self):
         js_files = [x.js for x in self._get_resources().values()]
         self.assertTrue("++resource++/bad_resource.js" not in js_files)
         self.assertTrue(
-            "resource-bad_resource-js" not in self._get_legacy_bundle().resources)
+            "resource-bad_resource-js" not in
+            self._get_legacy_bundle().resources)
 
     def test_resource_no_blacklist(self):
         importer = self._get_importer()
@@ -221,7 +235,7 @@ def test_insert_before(self):
         # now, insert
         foobar = parseString("""
             <object>
-                <javascript id="foobar.js" insert-before="one" enabled="true" />
+              <javascript id="foobar.js" insert-before="one" enabled="true" />
             </object>
             """)
         importer._importNode(foobar.documentElement)
@@ -325,7 +339,11 @@ def __init__(self, name, enabled=True):
 class TestScriptsViewlet(PloneTestCase.PloneTestCase):
 
     def test_scripts_viewlet(self):
-        scripts = ScriptsView(self.layer['portal'], self.layer['request'], None)
+        scripts = ScriptsView(
+            self.layer['portal'],
+            self.layer['request'],
+            None
+        )
         scripts.update()
         results = scripts.scripts()
         self.assertEqual(results[0]['bundle'], 'production')
@@ -340,7 +358,11 @@ def test_scripts_viewlet(self):
 
     def test_scripts_viewlet_anonymous(self):
         logout()
-        scripts = ScriptsView(self.layer['portal'], self.layer['request'], None)
+        scripts = ScriptsView(
+            self.layer['portal'],
+            self.layer['request'],
+            None
+        )
         scripts.update()
         results = scripts.scripts()
         self.assertEqual(results[0]['bundle'], 'production')
@@ -349,17 +371,24 @@ def test_scripts_viewlet_anonymous(self):
         self.assertTrue(results[0]['src'].endswith('/default.js'))
         self.assertEqual(len(results), 1)
 
-    @mock.patch.object(ScriptsView,
-                       'get_resources',
-                       new=lambda self: {'foo': DummyResource('++resource++foo.js')})
+    @mock.patch.object(
+        ScriptsView,
+        'get_resources',
+        new=lambda self: {'foo': DummyResource('++resource++foo.js')}
+    )
     def test_request_resources(self):
         add_resource_on_request(self.layer['request'], 'foo')
-        scripts = ScriptsView(self.layer['portal'], self.layer['request'], None)
+        scripts = ScriptsView(
+            self.layer['portal'],
+            self.layer['request'],
+            None
+        )
         scripts.update()
         results = scripts.scripts()
         self.assertEqual(
             results[-1], {'src': 'http://nohost/plone/++resource++foo.js',
                           'conditionalcomment': '',
+                          'resetrjs': False,
                           'bundle': 'none'})
 
     def test_request_resources_not_add_same_twice(self):
@@ -379,7 +408,7 @@ def test_request_bundles_not_add_same_twice(self):
     @mock.patch.object(
         ScriptsView,
         'get_bundles',
-        new=lambda self: {'foo': DummyBundle('foo', enabled=False)}
+        new=lambda self: {'foo': Bundle(DummyBundle('foo', enabled=False))}
     )
     def test_add_bundle_on_request_with_subrequest(self):
         req = self.layer['request']
@@ -423,7 +452,7 @@ def test_add_bundle_on_request_with_subrequest(self):
     @mock.patch.object(
         ScriptsView,
         'get_bundles',
-        new=lambda self: {'foo': DummyBundle('foo', enabled=True)}
+        new=lambda self: {'foo': Bundle(DummyBundle('foo', enabled=True))}
     )
     def test_remove_bundle_on_request_with_subrequest(self):
         req = self.layer['request']
@@ -491,7 +520,8 @@ def test_add_resource_on_request_with_subrequest(self):
             {
                 'src': 'http://nohost/plone/++resource++foo.js',
                 'conditionalcomment': '',
-                'bundle': 'none'
+                'resetrjs': False,
+                'bundle': 'none',
             }
         )
 


