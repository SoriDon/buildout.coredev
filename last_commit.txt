Repository: five.intid


Branch: refs/heads/master
Date: 2019-09-20T14:29:20+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/five.intid/commit/313fdccba3dabc463db3c1c45d80ac3a26815991

Speedup object lookup by up factor ~80

Files changed:
A news/14.bugfix
M five/intid/keyreference.py

b'diff --git a/five/intid/keyreference.py b/five/intid/keyreference.py\nindex f623565..4001afb 100644\n--- a/five/intid/keyreference.py\n+++ b/five/intid/keyreference.py\n@@ -4,7 +4,6 @@\n from Acquisition import IAcquirer\n from ZODB.interfaces import IConnection\n from ZPublisher.BaseRequest import RequestContainer\n-from zExceptions import NotFound\n from persistent import IPersistent\n from zope.component import adapter\n from zope.site.hooks import getSite\n@@ -40,6 +39,23 @@ def add_object_to_connection(ob, event):\n         connection.add(aq_base(ob))\n \n \n+def traverse(base, path):\n+    """simplified fast unrestricted traverse.\n+    base: the app-root to start from\n+    path: absolute path from app root as string\n+    returns: content at the end or None\n+    """\n+    current = base\n+    for cid in path.split(\'/\'):\n+        if not cid:\n+            continue\n+        try:\n+            current = current[cid]\n+        except KeyError:\n+            return None\n+    return current\n+\n+\n @implementer(IKeyReference)\n @adapter(IPersistent)\n class KeyReferenceToPersistent(KeyReferenceToPersistent):\n@@ -108,7 +124,7 @@ def root(self):\n     def wrapped_object(self):\n         if self.path is None:\n             return self.object\n-        obj = self.root.unrestrictedTraverse(self.path, None)\n+        obj = traverse(self.root, self.path)\n         if obj is None:\n             return self.object\n         chain = aq_chain(obj)\ndiff --git a/news/14.bugfix b/news/14.bugfix\nnew file mode 100644\nindex 0000000..328d26b\n--- /dev/null\n+++ b/news/14.bugfix\n@@ -0,0 +1,2 @@\n+When looking up back-references the lookup using unrestrictedTraverse was way to slow.\n+A simplified traverse speeds up the lookup by up 80x. [jensens, 2silver]\n\\ No newline at end of file\n'

Repository: five.intid


Branch: refs/heads/master
Date: 2019-09-23T10:49:27+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/five.intid/commit/568b6c4a6d752dfa59e3db2066a95959d6782766

be paranoid and fallback to OFS traverse for edge cases where __getitem__ is not enough.

Files changed:
M five/intid/keyreference.py

b'diff --git a/five/intid/keyreference.py b/five/intid/keyreference.py\nindex 4001afb..744b41f 100644\n--- a/five/intid/keyreference.py\n+++ b/five/intid/keyreference.py\n@@ -15,8 +15,11 @@\n from five.intid.site import get_root\n from zope.lifecycleevent.interfaces import IObjectAddedEvent\n \n+import logging\n import six\n \n+logger = logging.getLogger(__name__)\n+\n \n @adapter(IPersistent)\n @implementer(IConnection)\n@@ -44,15 +47,13 @@ def traverse(base, path):\n     base: the app-root to start from\n     path: absolute path from app root as string\n     returns: content at the end or None\n+    raises: KeyError if not traversable this way\n     """\n     current = base\n     for cid in path.split(\'/\'):\n         if not cid:\n             continue\n-        try:\n-            current = current[cid]\n-        except KeyError:\n-            return None\n+        current = current[cid]\n     return current\n \n \n@@ -124,7 +125,14 @@ def root(self):\n     def wrapped_object(self):\n         if self.path is None:\n             return self.object\n-        obj = traverse(self.root, self.path)\n+        try:\n+            # use simplified fast traverse to get the object, ~80x faster than OFS\n+            obj = traverse(self.root, self.path)\n+        except KeyError:\n+            # be paranoid and fall back to the complex OFS traverse for (hypothetical)\n+            # edge cases\n+            logger.debug(\'fall back to OFS traversal for {0}\'.format(self.path))\n+            obj = self.root.unrestrictedTraverse(self.path, None)\n         if obj is None:\n             return self.object\n         chain = aq_chain(obj)\n@@ -133,8 +141,7 @@ def wrapped_object(self):\n         if not len(chain) or not isinstance(chain[-1], RequestContainer):\n             site = getSite()\n             site_chain = aq_chain(site)\n-            if len(site_chain) and isinstance(site_chain[-1],\n-                                              RequestContainer):\n+            if len(site_chain) and isinstance(site_chain[-1], RequestContainer):\n                 req = site_chain[-1]\n                 new_obj = req\n                 # rebuld the chain with the request at the bottom\n'

Repository: five.intid


Branch: refs/heads/master
Date: 2019-09-23T13:53:03+02:00
Author: agitator (agitator) <agitator@users.noreply.github.com>
Commit: https://github.com/plone/five.intid/commit/aba0c758d832befa16a12397714141c774c3527c

Merge pull request #14 from plone/speedup

Speedup object lookup by up factor ~80

Files changed:
A news/14.bugfix
M five/intid/keyreference.py

b'diff --git a/five/intid/keyreference.py b/five/intid/keyreference.py\nindex f623565..744b41f 100644\n--- a/five/intid/keyreference.py\n+++ b/five/intid/keyreference.py\n@@ -4,7 +4,6 @@\n from Acquisition import IAcquirer\n from ZODB.interfaces import IConnection\n from ZPublisher.BaseRequest import RequestContainer\n-from zExceptions import NotFound\n from persistent import IPersistent\n from zope.component import adapter\n from zope.site.hooks import getSite\n@@ -16,8 +15,11 @@\n from five.intid.site import get_root\n from zope.lifecycleevent.interfaces import IObjectAddedEvent\n \n+import logging\n import six\n \n+logger = logging.getLogger(__name__)\n+\n \n @adapter(IPersistent)\n @implementer(IConnection)\n@@ -40,6 +42,21 @@ def add_object_to_connection(ob, event):\n         connection.add(aq_base(ob))\n \n \n+def traverse(base, path):\n+    """simplified fast unrestricted traverse.\n+    base: the app-root to start from\n+    path: absolute path from app root as string\n+    returns: content at the end or None\n+    raises: KeyError if not traversable this way\n+    """\n+    current = base\n+    for cid in path.split(\'/\'):\n+        if not cid:\n+            continue\n+        current = current[cid]\n+    return current\n+\n+\n @implementer(IKeyReference)\n @adapter(IPersistent)\n class KeyReferenceToPersistent(KeyReferenceToPersistent):\n@@ -108,7 +125,14 @@ def root(self):\n     def wrapped_object(self):\n         if self.path is None:\n             return self.object\n-        obj = self.root.unrestrictedTraverse(self.path, None)\n+        try:\n+            # use simplified fast traverse to get the object, ~80x faster than OFS\n+            obj = traverse(self.root, self.path)\n+        except KeyError:\n+            # be paranoid and fall back to the complex OFS traverse for (hypothetical)\n+            # edge cases\n+            logger.debug(\'fall back to OFS traversal for {0}\'.format(self.path))\n+            obj = self.root.unrestrictedTraverse(self.path, None)\n         if obj is None:\n             return self.object\n         chain = aq_chain(obj)\n@@ -117,8 +141,7 @@ def wrapped_object(self):\n         if not len(chain) or not isinstance(chain[-1], RequestContainer):\n             site = getSite()\n             site_chain = aq_chain(site)\n-            if len(site_chain) and isinstance(site_chain[-1],\n-                                              RequestContainer):\n+            if len(site_chain) and isinstance(site_chain[-1], RequestContainer):\n                 req = site_chain[-1]\n                 new_obj = req\n                 # rebuld the chain with the request at the bottom\ndiff --git a/news/14.bugfix b/news/14.bugfix\nnew file mode 100644\nindex 0000000..328d26b\n--- /dev/null\n+++ b/news/14.bugfix\n@@ -0,0 +1,2 @@\n+When looking up back-references the lookup using unrestrictedTraverse was way to slow.\n+A simplified traverse speeds up the lookup by up 80x. [jensens, 2silver]\n\\ No newline at end of file\n'

