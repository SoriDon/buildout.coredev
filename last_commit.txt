Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2016-02-23T16:50:33-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/0cd41d229c9d18813ce72e8b8905b06425c278ef

Include fields in additional fieldsets for DX content types

Files changed:
M CHANGES.rst
M Products/CMFDiffTool/dexteritydiff.py

diff --git a/CHANGES.rst b/CHANGES.rst
index da5ba53..437f60d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -6,7 +6,8 @@ Changelog
 
 New:
 
-- *add item here*
+- Include fields in additional fieldsets for DX content types
+  [frapell]
 
 Fixes:
 
diff --git a/Products/CMFDiffTool/dexteritydiff.py b/Products/CMFDiffTool/dexteritydiff.py
index 4e40004..59513ce 100644
--- a/Products/CMFDiffTool/dexteritydiff.py
+++ b/Products/CMFDiffTool/dexteritydiff.py
@@ -169,4 +169,11 @@ def _compute_fields_order(self, obj):
         form = DefaultEditForm(obj, getRequest())
         form.portal_type = obj.portal_type
         form.updateFields()
-        return [(form.fields[name].field, name) for name in form.fields]
+        all_fields = list()
+        all_fields += [(form.fields[name].field, name) for name in form.fields]
+        if form.groups:
+            for group in form.groups:
+                all_fields += [(group.fields[name].field, name) for name in group.fields]
+
+        return all_fields
+


Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2016-02-27T10:29:00-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/75645f153c4e4c7499c783f58a6e97db3f85cd4d

Fix tests: We are now pulling all fields from dx content

Files changed:
M Products/CMFDiffTool/tests/testChangeSet.py

diff --git a/Products/CMFDiffTool/tests/testChangeSet.py b/Products/CMFDiffTool/tests/testChangeSet.py
index 585da74..2dd2a4f 100644
--- a/Products/CMFDiffTool/tests/testChangeSet.py
+++ b/Products/CMFDiffTool/tests/testChangeSet.py
@@ -52,7 +52,7 @@ def testChangeSetUnchanged(self):
         self.setupTestObjects()
         self.cs.computeDiff(self.folder.doc1, self.folder.copy_of_doc1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 3)
+        self.assertEqual(len(diffs), 15)
         self.assertTrue(diffs[0].same)
 
     def testChangeSetChanged(self):
@@ -60,7 +60,7 @@ def testChangeSetChanged(self):
         self.folder.copy_of_doc1.setTitle('My New Title')
         self.cs.computeDiff(self.folder.doc1, self.folder.copy_of_doc1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 3)
+        self.assertEqual(len(diffs), 15)
         self.assertFalse(diffs[0].same)
         self.assertEqual(diffs[0].ndiff(),
                          '- My Title%s+ My New Title' % linesep)
@@ -69,14 +69,14 @@ def testChangeSetFolderUnchanged(self):
         self.setupTestFolders()
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 2)
+        self.assertEqual(len(diffs), 14)
         self.assertTrue(diffs[0].same)
         sub_cs = self.cs.getSubDiffs()
         self.assertEqual(len(sub_cs), 3)
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 3)
+            self.assertEqual(len(sub_diffs), 15)
             self.assertTrue(sub_cs[0].same)
             self.assertTrue(sub_cs[1].same)
             self.assertTrue(sub_cs[2].same)
@@ -86,7 +86,7 @@ def testChangeSetFolderChanged(self):
         self.folder.copy_of_folder1.setTitle('My New Title')
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 2)
+        self.assertEqual(len(diffs), 14)
         self.assertFalse(diffs[0].same)
         self.assertEqual(diffs[0].ndiff(),
                          '- My Folder Title%s+ My New Title' % linesep)
@@ -98,7 +98,7 @@ def testChangeSetFolderChanged(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 3)
+            self.assertEqual(len(sub_diffs), 15)
             self.assertTrue(sub_diffs[0].same)
 
     def testChangeSetFolderDocChanged(self):
@@ -106,7 +106,7 @@ def testChangeSetFolderDocChanged(self):
         self.folder.copy_of_folder1.doc1.setTitle('My New Title')
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 2)
+        self.assertEqual(len(diffs), 14)
         self.assertTrue(diffs[0].same)
         self.assertTrue(diffs[1].same)
         self.assertFalse(self.cs._added)
@@ -116,7 +116,7 @@ def testChangeSetFolderDocChanged(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 3)
+            self.assertEqual(len(sub_diffs), 15)
             # doc1 has changed
             if sub_cs[i].getId() == 'doc1':
                 self.assertFalse(sub_diffs[0].same)
@@ -130,7 +130,7 @@ def testChangeSetFolderDocRemoved(self):
         self.folder.copy_of_folder1.manage_delObjects('doc1')
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 2)
+        self.assertEqual(len(diffs), 14)
         self.assertTrue(diffs[0].same)
         self.assertTrue(diffs[1].same)
         sub_cs = self.cs.getSubDiffs()
@@ -140,7 +140,7 @@ def testChangeSetFolderDocRemoved(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 3)
+            self.assertEqual(len(sub_diffs), 15)
             self.assertTrue(sub_diffs[0].same)
         self.assertFalse(self.cs._added)
         self.assertEqual(list(self.cs._removed), ['doc1'])
@@ -151,7 +151,7 @@ def testChangeSetFolderDocAdded(self):
                                                   title='My Doc Title')
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 2)
+        self.assertEqual(len(diffs), 14)
         self.assertTrue(diffs[0].same)
         self.assertTrue(diffs[1].same)
         sub_cs = self.cs.getSubDiffs()
@@ -160,7 +160,7 @@ def testChangeSetFolderDocAdded(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 3)
+            self.assertEqual(len(sub_diffs), 15)
             self.assertTrue(sub_diffs[0].same)
         self.assertFalse(self.cs._removed)
         self.assertEqual(list(self.cs._added), ['doc4'])
@@ -178,7 +178,7 @@ def testChangeSetFolderReordered(self):
             return
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 2)
+        self.assertEqual(len(diffs), 14)
         self.assertTrue(diffs[0].same)
         self.assertFalse(self.cs._added)
         self.assertFalse(self.cs._removed)
@@ -188,7 +188,7 @@ def testChangeSetFolderReordered(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 3)
+            self.assertEqual(len(sub_diffs), 15)
             self.assertTrue(sub_diffs[0].same)
         # XXX we need an explicit way of noting reorders
 
@@ -216,7 +216,7 @@ def testChangeSetFolderComplex(self):
 
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 2)
+        self.assertEqual(len(diffs), 14)
         self.assertFalse(diffs[0].same)
         self.assertEqual(diffs[0].ndiff(),
                          '- My Folder Title%s+ My New Title' % linesep)
@@ -229,7 +229,7 @@ def testChangeSetFolderComplex(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 3)
+            self.assertEqual(len(sub_diffs), 15)
             if sub_cs[i].getId() == 'doc3':
                 self.assertFalse(sub_diffs[0].same)
                 self.assertEqual(sub_diffs[0].ndiff(),


Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2016-02-27T20:35:48+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/4ffcdff813ee713fb1d8135438f184e3c09a951b

Merge pull request #14 from plone/dx_all_fields

Include fields in additional fieldsets for DX content types

Files changed:
M CHANGES.rst
M Products/CMFDiffTool/dexteritydiff.py
M Products/CMFDiffTool/tests/testChangeSet.py

diff --git a/CHANGES.rst b/CHANGES.rst
index da5ba53..437f60d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -6,7 +6,8 @@ Changelog
 
 New:
 
-- *add item here*
+- Include fields in additional fieldsets for DX content types
+  [frapell]
 
 Fixes:
 
diff --git a/Products/CMFDiffTool/dexteritydiff.py b/Products/CMFDiffTool/dexteritydiff.py
index 4e40004..59513ce 100644
--- a/Products/CMFDiffTool/dexteritydiff.py
+++ b/Products/CMFDiffTool/dexteritydiff.py
@@ -169,4 +169,11 @@ def _compute_fields_order(self, obj):
         form = DefaultEditForm(obj, getRequest())
         form.portal_type = obj.portal_type
         form.updateFields()
-        return [(form.fields[name].field, name) for name in form.fields]
+        all_fields = list()
+        all_fields += [(form.fields[name].field, name) for name in form.fields]
+        if form.groups:
+            for group in form.groups:
+                all_fields += [(group.fields[name].field, name) for name in group.fields]
+
+        return all_fields
+
diff --git a/Products/CMFDiffTool/tests/testChangeSet.py b/Products/CMFDiffTool/tests/testChangeSet.py
index 585da74..2dd2a4f 100644
--- a/Products/CMFDiffTool/tests/testChangeSet.py
+++ b/Products/CMFDiffTool/tests/testChangeSet.py
@@ -52,7 +52,7 @@ def testChangeSetUnchanged(self):
         self.setupTestObjects()
         self.cs.computeDiff(self.folder.doc1, self.folder.copy_of_doc1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 3)
+        self.assertEqual(len(diffs), 15)
         self.assertTrue(diffs[0].same)
 
     def testChangeSetChanged(self):
@@ -60,7 +60,7 @@ def testChangeSetChanged(self):
         self.folder.copy_of_doc1.setTitle('My New Title')
         self.cs.computeDiff(self.folder.doc1, self.folder.copy_of_doc1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 3)
+        self.assertEqual(len(diffs), 15)
         self.assertFalse(diffs[0].same)
         self.assertEqual(diffs[0].ndiff(),
                          '- My Title%s+ My New Title' % linesep)
@@ -69,14 +69,14 @@ def testChangeSetFolderUnchanged(self):
         self.setupTestFolders()
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 2)
+        self.assertEqual(len(diffs), 14)
         self.assertTrue(diffs[0].same)
         sub_cs = self.cs.getSubDiffs()
         self.assertEqual(len(sub_cs), 3)
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 3)
+            self.assertEqual(len(sub_diffs), 15)
             self.assertTrue(sub_cs[0].same)
             self.assertTrue(sub_cs[1].same)
             self.assertTrue(sub_cs[2].same)
@@ -86,7 +86,7 @@ def testChangeSetFolderChanged(self):
         self.folder.copy_of_folder1.setTitle('My New Title')
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 2)
+        self.assertEqual(len(diffs), 14)
         self.assertFalse(diffs[0].same)
         self.assertEqual(diffs[0].ndiff(),
                          '- My Folder Title%s+ My New Title' % linesep)
@@ -98,7 +98,7 @@ def testChangeSetFolderChanged(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 3)
+            self.assertEqual(len(sub_diffs), 15)
             self.assertTrue(sub_diffs[0].same)
 
     def testChangeSetFolderDocChanged(self):
@@ -106,7 +106,7 @@ def testChangeSetFolderDocChanged(self):
         self.folder.copy_of_folder1.doc1.setTitle('My New Title')
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 2)
+        self.assertEqual(len(diffs), 14)
         self.assertTrue(diffs[0].same)
         self.assertTrue(diffs[1].same)
         self.assertFalse(self.cs._added)
@@ -116,7 +116,7 @@ def testChangeSetFolderDocChanged(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 3)
+            self.assertEqual(len(sub_diffs), 15)
             # doc1 has changed
             if sub_cs[i].getId() == 'doc1':
                 self.assertFalse(sub_diffs[0].same)
@@ -130,7 +130,7 @@ def testChangeSetFolderDocRemoved(self):
         self.folder.copy_of_folder1.manage_delObjects('doc1')
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 2)
+        self.assertEqual(len(diffs), 14)
         self.assertTrue(diffs[0].same)
         self.assertTrue(diffs[1].same)
         sub_cs = self.cs.getSubDiffs()
@@ -140,7 +140,7 @@ def testChangeSetFolderDocRemoved(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 3)
+            self.assertEqual(len(sub_diffs), 15)
             self.assertTrue(sub_diffs[0].same)
         self.assertFalse(self.cs._added)
         self.assertEqual(list(self.cs._removed), ['doc1'])
@@ -151,7 +151,7 @@ def testChangeSetFolderDocAdded(self):
                                                   title='My Doc Title')
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 2)
+        self.assertEqual(len(diffs), 14)
         self.assertTrue(diffs[0].same)
         self.assertTrue(diffs[1].same)
         sub_cs = self.cs.getSubDiffs()
@@ -160,7 +160,7 @@ def testChangeSetFolderDocAdded(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 3)
+            self.assertEqual(len(sub_diffs), 15)
             self.assertTrue(sub_diffs[0].same)
         self.assertFalse(self.cs._removed)
         self.assertEqual(list(self.cs._added), ['doc4'])
@@ -178,7 +178,7 @@ def testChangeSetFolderReordered(self):
             return
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 2)
+        self.assertEqual(len(diffs), 14)
         self.assertTrue(diffs[0].same)
         self.assertFalse(self.cs._added)
         self.assertFalse(self.cs._removed)
@@ -188,7 +188,7 @@ def testChangeSetFolderReordered(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 3)
+            self.assertEqual(len(sub_diffs), 15)
             self.assertTrue(sub_diffs[0].same)
         # XXX we need an explicit way of noting reorders
 
@@ -216,7 +216,7 @@ def testChangeSetFolderComplex(self):
 
         self.cs.computeDiff(self.folder.folder1, self.folder.copy_of_folder1)
         diffs = self.cs.getDiffs()
-        self.assertEqual(len(diffs), 2)
+        self.assertEqual(len(diffs), 14)
         self.assertFalse(diffs[0].same)
         self.assertEqual(diffs[0].ndiff(),
                          '- My Folder Title%s+ My New Title' % linesep)
@@ -229,7 +229,7 @@ def testChangeSetFolderComplex(self):
         for i in range(len(sub_cs)):
             self.assertTrue(isinstance(sub_cs[i], BaseChangeSet))
             sub_diffs = sub_cs[i].getDiffs()
-            self.assertEqual(len(sub_diffs), 3)
+            self.assertEqual(len(sub_diffs), 15)
             if sub_cs[i].getId() == 'doc3':
                 self.assertFalse(sub_diffs[0].same)
                 self.assertEqual(sub_diffs[0].ndiff(),


